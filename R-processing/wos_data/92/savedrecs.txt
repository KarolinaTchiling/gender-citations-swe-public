FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Balaram, A
   Vasundra, S
AF Balaram, A.
   Vasundra, S.
TI Prediction of software fault-prone classes using ensemble random forest
   with adaptive synthetic sampling algorithm
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Adaptive synthetic sampling; Butterfly optimization; Ensemble random
   forest; Imbalanced data; Software fault prediction
ID MACHINE
AB The process of predicting fault module in software is known as Software Fault Prediction (SFP) which is important for releasing software versions that are dependent on the predefined metrics due to historical faults in software. The fault prediction in software such as components, classes and modules, at an early stage in the development cycle, is important as it significantly contributes to time reduction and cost reduction. Therefore, the modules that are used for processing each step is reduced by the unnecessary efforts eliminated the faults during development process. However, the problem of imbalanced dataset becomes a significant challenge during SFP for software fault prediction at an early stage. The limitations such as inclusion of software metric for SFP models, cost effectiveness of the fault and the fault density prediction, are still few obstacles faced by research. The proposed Butterfly optimization performs feature selection that helps to predict meticulous and remarkable results by developing the applications of Machine Learning techniques. The present research uses Ensemble Random Forest with Adaptive Synthetic Sampling (E-RF-ADASYN) for fault prediction by using various classifiers which is mentioned in the proposed method section. The proposed E-RF-ADASYN obtained Area Under Curve (AUC) of 0.854767 better when compared with the existing method Rough-KNN Noise-Filtered Easy Ensemble (RKEE) of 0.771.
C1 [Balaram, A.; Vasundra, S.] JNTUA Univ, Dept CSE, Anantapur, Andhra Pradesh, India.
C3 Jawaharlal Nehru Technological University - Anantapur
RP Balaram, A (corresponding author), JNTUA Univ, Dept CSE, Anantapur, Andhra Pradesh, India.
EM balaram.balaram@gmail.com; vasundras.cse@jntua.ac.in
RI jntua, Prof.S.Vasundra/HGU-2372-2022
OI vasundra, s/0000-0002-6880-0026; Amagoth, Balaram/0000-0002-7646-6718
CR Ahmed Md Razu, 2020, ICCDE 2020: Proceedings of 2020 the 6th International Conference on Computing and Data Engineering, P247, DOI 10.1145/3379247.3379278
   Al Qasem O, 2020, IEEE ACCESS, V8, P63945, DOI 10.1109/ACCESS.2020.2985290
   Alsghaier H, 2020, SOFTWARE PRACT EXPER, V50, P407, DOI 10.1002/spe.2784
   Bai S, 2021, ENG FAIL ANAL, V120, DOI 10.1016/j.engfailanal.2020.105077
   Bakka K. V., 2016, INT J ENG RES, V5, P404
   Bal PR, 2020, IEEE T RELIAB, V69, P1355, DOI 10.1109/TR.2020.2996261
   Cui ZQ, 2020, IEEE ACCESS, V8, P172296, DOI 10.1109/ACCESS.2020.3025460
   Elmishali A, 2018, ENG APPL ARTIF INTEL, V69, P147, DOI 10.1016/j.engappai.2017.12.011
   Geng R, 2018, IEEE ACCESS, V6, P74984, DOI 10.1109/ACCESS.2018.2881890
   Kalsoom A, 2018, J SUPERCOMPUT, V74, P4568, DOI 10.1007/s11227-018-2326-5
   Kotagiri Raju S., 2018, INT J PURE APPL MATH, V118, P321
   Kumar L, 2018, J SYST SOFTWARE, V137, P686, DOI 10.1016/j.jss.2017.04.016
   Maheshwar KU., 2014, INT J INNOVAT RES SC, V1, P116
   Niu Y, 2018, INT J COMPUT SCI MAT, V9, P547, DOI 10.1504/IJCSM.2018.096327
   Riaz S, 2018, IEEE ACCESS, V6, P46886, DOI 10.1109/ACCESS.2018.2865383
   Sharma D, 2019, INT J SYST ASSUR ENG, V10, P1453, DOI 10.1007/s13198-019-00896-5
   Shirabad J.S., 2005, The PROMISE Repository of Software Engineering Databases
   Tong HN, 2018, INFORM SOFTWARE TECH, V96, P94, DOI 10.1016/j.infsof.2017.11.008
   Tumar I, 2020, IEEE ACCESS, V8, P8041, DOI 10.1109/ACCESS.2020.2964321
   Turabieh H, 2019, EXPERT SYST APPL, V122, P27, DOI 10.1016/j.eswa.2018.12.033
   Viji C, 2019, CLUSTER COMPUT, V22, P133, DOI 10.1007/s10586-018-1923-7
   Yucalar F, 2020, ENG SCI TECHNOL, V23, P938, DOI 10.1016/j.jestch.2019.10.005
   Zhu MM, 2018, COMPUT LANG SYST STR, V53, P27, DOI 10.1016/j.cl.2017.12.002
NR 23
TC 17
Z9 17
U1 0
U2 29
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 6
DI 10.1007/s10515-021-00311-z
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XE8RU
UT WOS:000723650500001
DA 2024-07-18
ER

PT J
AU Rabiser, R
   Thanhofer-Pilisch, J
   Vierhauser, M
   Grünbacher, P
   Egyed, A
AF Rabiser, Rick
   Thanhofer-Pilisch, Juergen
   Vierhauser, Michael
   Gruenbacher, Paul
   Egyed, Alexander
TI Developing and evolving a DSL-based approach for runtime monitoring of
   systems of systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Systems of systems; Requirements monitoring; Constraint checking;
   Domain-specific languages; DSL evolution
ID DOMAIN-SPECIFIC LANGUAGES; REQUIREMENTS; FRAMEWORK; MAC
AB Complex software-intensive systems are often described as systems of systems (SoS) due to their heterogeneous architectural elements. As SoS behavior is often only understandable during operation, runtime monitoring is needed to detect deviations from requirements. Today, while diverse monitoring approaches exist, most do not provide what is needed to monitor SoS, e.g., support for dynamically defining and deploying diverse checks across multiple systems. In this paper we report on our experiences of developing, applying, and evolving an approach for monitoring an SoS in the domain of industrial automation software, that is based on a domain-specific language (DSL). We first describe our initial approach to dynamically define and check constraints in SoS at runtime and then motivate and describe its evolution based on requirements elicited in an industry collaboration project. We furthermore describe solutions we have developed to support the evolution of our approach, i.e., a code generation approach and a framework to automate testing the DSL after changes. We evaluate the expressiveness and scalability of our new DSL-based approach using an industrial SoS. We also discuss lessons we learned. Our results show that while developing a DSL-based approach is a good solution to support industrial users, one must prepare the approach for evolution, by making it extensible and adaptable to future scenarios. Particularly, support for automated (re-)generation of tools and code after changes and automated testing are essential.
C1 [Rabiser, Rick; Thanhofer-Pilisch, Juergen] Johannes Kepler Univ Linz, Christian Doppler Lab MEVSS, Linz, Austria.
   [Vierhauser, Michael] Univ Notre Dame, Comp Sci & Engn, Notre Dame, IN 46556 USA.
   [Gruenbacher, Paul; Egyed, Alexander] Johannes Kepler Univ Linz, Inst Software Syst Engn, Linz, Austria.
C3 Johannes Kepler University Linz; University of Notre Dame; Johannes
   Kepler University Linz
RP Rabiser, R (corresponding author), Johannes Kepler Univ Linz, Christian Doppler Lab MEVSS, Linz, Austria.
EM rick.rabiser@jku.at; mvierhau@nd.edu; paul.gruenbacher@jku.at
RI Vierhauser, Michael/AAG-5859-2021; Egyed, Alexander/E-2632-2017;
   Rabiser, Rick/B-8673-2017; Grunbacher, Paul/C-2970-2013
OI Vierhauser, Michael/0000-0003-2672-9230; Rabiser,
   Rick/0000-0003-3862-1112; Grunbacher, Paul/0000-0002-1951-5288
FU Christian Doppler Forschungsgesellschaft, Austria; Primetals
   Technologies; Austrian Science Fund (FWF) [J3998-N31]; Austrian Science
   Fund (FWF) [P25513, J3998] Funding Source: Austrian Science Fund (FWF)
FX This work has been supported by the Christian Doppler
   Forschungsgesellschaft (Grant No. CDL MEVSS), Austria and Primetals
   Technologies. Michael Vierhauser's work was funded by the Austrian
   Science Fund (FWF) under Grant No. J3998-N31. We want to thank Thomas
   Krismayer for his feedback and his help in setting up the evaluation
   environment.
CR Aktug I, 2008, LECT NOTES COMPUT SC, V5014, P262, DOI 10.1007/978-3-540-68237-0_19
   Albuquerque D, 2015, J SYST SOFTWARE, V101, P245, DOI 10.1016/j.jss.2014.11.051
   [Anonymous], 2015, P 9 INT WORKSH VAR M
   [Anonymous], ELECT COMMUNICATIONS
   [Anonymous], 2011, EVENT PROCESSING BUS
   Autili M, 2015, IEEE T SOFTWARE ENG, V41, P620, DOI 10.1109/TSE.2015.2398877
   Baresi Luciano, 2013, 2013 IEEE 20th International Conference on Web Services (ICWS), P83, DOI 10.1109/ICWS.2013.21
   Bauer A, 2006, LECT NOTES COMPUT SC, V4337, P260
   Bertolino Antonia, 2011, Software Engineering for Resilient Systems. Proceedings Third International Workshop (SERENE 2011), P130, DOI 10.1007/978-3-642-24124-6_13
   Bubak M, 2004, LECT NOTES COMPUT SC, V3019, P344
   Bures Tomas., 2014, Proceedings of the 17th international ACM Sigsoft symposium on Component-based software engineering, P91
   Cailliau Antoine, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P1, DOI 10.1109/SEAMS.2017.5
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Canovas Izquierdo Javier Luis, 2012, 2012 Proceedings of 4th International Workshop Modeling in Software Engineering (MiSE 2012), P29, DOI 10.1109/MISE.2012.6226011
   Cazzola W., 2010, P 7 WORKSH REFL AOP
   Chen F, 2004, LECT NOTES COMPUT SC, V3308, P357
   de Geest G, 2008, WORK CONF REVERSE EN, P197, DOI 10.1109/WCRE.2008.50
   Degueule T., 2015, P WORKSH DOM SPEC MO, P45, DOI DOI 10.1145/2846696.2846697
   Delgado N, 2004, IEEE T SOFTWARE ENG, V30, P859, DOI 10.1109/TSE.2004.91
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Egyed A., 2006, 28th International Conference on Software Engineering Proceedings, P381, DOI 10.1145/1134285.1134339
   Eichelberger H, 2014, J SYST SOFTWARE, V93, P163, DOI 10.1016/j.jss.2014.02.022
   Fickas S., 1995, Proceedings of the Second IEEE International Symposium on Requirements Engineering (Cat. No.95TH8040), P140, DOI 10.1109/ISRE.1995.512555
   Ghezzi C, 2012, PROC INT CONF SOFTW, P1403, DOI 10.1109/ICSE.2012.6227237
   Gunadi H, 2014, LECT NOTES COMPUT SC, V8442, P296, DOI 10.1007/978-3-319-06410-9_21
   Hermans F, 2009, LECT NOTES COMPUT SC, V5795, P423, DOI 10.1007/978-3-642-04425-0_33
   Juergens E, 2006, ELECTRON NOTES THEOR, V164, P55, DOI 10.1016/j.entcs.2006.10.004
   Kanstren T, 2011, INT J ADV SOFTW, V4, P256
   Kim M, 2004, FORM METHOD SYST DES, V24, P129, DOI 10.1023/B:FORM.0000017719.43755.7c
   KIVILUOMA K, 2006, P 2006 INT S SOFTW T, P181
   Krismayer T, 2017, IEEE INT CONF AUTOM, P826, DOI 10.1109/ASE.2017.8115693
   LUDWIG T, 1997, TUMI9733
   Maiden N, 2013, IEEE SOFTWARE, V30, P16, DOI 10.1109/MS.2013.10
   Maier M., 1998, SYST ENG, V1, P267, DOI [DOI 10.1002/(SICI)1520-6858(1998)1:43.0.CO;2-D, 10.1002/(SICI)1520-6858(1998)1:4lt;267::AID-SYS3gt;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4LT;267::AID-SYS3GT;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4<267::AID-SYS3>3.0.CO;2-D]
   Mansouri-Samani M., 1993, IEEE Network, V7, P20, DOI 10.1109/65.244791
   Meyers B, 2011, SCI COMPUT PROGRAM, V76, P1223, DOI 10.1016/j.scico.2011.01.002
   Montali M, 2013, ACM T INTEL SYST TEC, V5, DOI 10.1145/2542182.2542199
   Muccini H, 2007, LECT NOTES COMPUT SC, V4608, P124
   Nielsen CB, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2794381
   Nikolov N, 2015, PROCEDIA COMPUT SCI, V68, P53, DOI 10.1016/j.procs.2015.09.223
   PASCHKE A, 2005, P INT C COMP INT MOD, V2, P308, DOI DOI 10.1109/CIMCA.2005.1631486
   Pizka M, 2007, TASE 2007: FIRST JOINT IEEE/IFIP SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P305, DOI 10.1109/TASE.2007.13
   Rabiser R, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P122, DOI 10.1145/2889160.2889234
   Rabiser R, 2017, J SYST SOFTWARE, V125, P309, DOI 10.1016/j.jss.2016.12.034
   Robinson WN, 2006, REQUIR ENG, V11, P17, DOI 10.1007/s00766-005-0016-3
   Sammapun U, 2005, 11TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P147, DOI 10.1109/RTCSA.2005.84
   Schmidt Martin, 2013, SDL 2013: Model-Driven Dependability Engineering. 16th International SDL Forum. Proceedings: LNCS 7916, P222, DOI 10.1007/978-3-642-38911-5_13
   Skene J, 2005, LECT NOTES COMPUT SC, V3705, P319, DOI 10.1007/11580850_17
   Spanoudakis G, 2009, ADV INFORM SECUR, V45, P1, DOI 10.1007/978-0-387-88775-3
   Spinellis D, 2001, J SYST SOFTWARE, V56, P91, DOI 10.1016/S0164-1212(00)00089-3
   Thanhofer-Pilisch J, 2017, 2017 43RD EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA), P149, DOI 10.1109/SEAA.2017.25
   van den Bos Jeroen, 2013, Modelling Foundations and Applications. 9th European Conference, ECMFA 2013. Proceedings. LNCS 7949, P207, DOI 10.1007/978-3-642-39013-5_15
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Van Hoorn A., 2012, P 3 ACM SPEC INT C P, P247, DOI DOI 10.1145/2188286.2188326
   van Lamsweerde A., 2009, REQUIREMENTS ENG SYS
   Vermolen S, 2008, LECT NOTES COMPUT SC, V5301, P630, DOI 10.1007/978-3-540-87875-9_44
   Vierhauser Michael, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P531, DOI 10.1007/978-3-642-33666-9_34
   Vierhauser M., 2010, P IEEEACM INT C AUTO, P63
   Vierhauser M., 2012, P 36 INT C SOFTW ENG, P125
   Vierhauser M, 2017, LECT NOTES COMPUT SC, V10153, P181, DOI 10.1007/978-3-319-54045-0_14
   Vierhauser M, 2016, INFORM SOFTWARE TECH, V80, P89, DOI 10.1016/j.infsof.2016.08.005
   Vierhauser M, 2015, IEEE INT CONF AUTOM, P715, DOI 10.1109/ASE.2015.25
   Vierhauser M, 2016, J SYST SOFTWARE, V112, P123, DOI 10.1016/j.jss.2015.07.008
   Viswanathan M, 2005, LECT NOTES COMPUT SC, V3407, P543
   Voelter Markus, 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P70, DOI 10.1109/SPLC.2011.25
   Volz M., 2011, Proceedings of the 2011 IEEE 13th International Conference on High Performance Computing and Communication (HPCC 2011). 2011 IEEE International Workshop on Future Trends of Distributed Computing Systems (FTDCS 2011). Workshops of the 2011 International Conference on Ubiquitous Intelligence and Computing (UIC 2011). Workshops of the 2011 International Conference on Autonomic and Trusted Computing (ATC 2011), P477, DOI 10.1109/HPCC.2011.69
   Whittle J, 2010, REQUIR ENG, V15, P177, DOI 10.1007/s00766-010-0101-0
   Wieringa R, 2006, REQUIR ENG, V11, P102, DOI 10.1007/s00766-005-0021-6
   Zhang PC, 2011, SOFTWARE PRACT EXPER, V41, P841, DOI 10.1002/spe.1038
   Zhang PC, 2008, LECT NOTES COMPUT SC, V4977, P144, DOI 10.1007/978-3-540-89376-9_14
   Zschaler Steffen, 2009, Software Language Engineering. Second International Conference, SLE 2009. Revised Selected Papers, P334
NR 71
TC 11
Z9 11
U1 1
U2 6
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2018
VL 25
IS 4
SI SI
BP 875
EP 915
DI 10.1007/s10515-018-0241-x
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW9YB
UT WOS:000447363400007
DA 2024-07-18
ER

PT J
AU Sun, Y
   White, J
   Li, B
   Walker, M
   Turner, H
AF Sun, Yu
   White, Jules
   Li, Bo
   Walker, Michael
   Turner, Hamilton
TI Automated QoS-oriented cloud resource optimization using containers
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automated software deployment; QoS performance; Resource allocation and
   optimization; Bin packing
ID VIRTUAL MACHINES
AB Optimizing the deployment of software in a cloud environment is one approach for maximizing system Quality-of-Service (QoS) and minimizing total cost. A traditional challenge to this optimization is the large amount of benchmarking required to optimize even simplistic cloud systems. This paper introduces RAM, an new approach to enable rapid, optimized deployment of software onto a cloud environment by substantially reducing the number of benchmarks required. RAM continues to perform some benchmarking, and therefore its predictions of application QoS metrics, such as throughput and latency, are very accurate. Our results show a maximum difference of 1.06 % between RAM predicted QoS and empirically measured QoS. Moreover, RAM can be provided with QoS requirements for each software in the system, and will ensure that each requirement is met before presenting a deployment plan.
C1 [White, Jules; Li, Bo; Walker, Michael] Vanderbilt Univ, 1025 16th Ave S, Nashville, TN 37212 USA.
   [Turner, Hamilton] Virginia Tech, 1185 Perry St, Blacksburg, VA 24061 USA.
   [Sun, Yu] Calif State Polytech Univ Pomona, 3801 W Temple Ave, Pomona, CA 91768 USA.
C3 Vanderbilt University; Virginia Polytechnic Institute & State
   University; California State University System; California State
   Polytechnic University Pomona
RP Sun, Y (corresponding author), Calif State Polytech Univ Pomona, 3801 W Temple Ave, Pomona, CA 91768 USA.
EM yusun@cpp.edu
CR [Anonymous], 1996, APPROXIMATION ALGORI
   [Anonymous], 1996, APPL LINEAR STAT MOD
   [Anonymous], 2007, P 4 USENIX C NETW SY
   [Anonymous], USENIX ANN TECHN C M
   [Anonymous], 2011, MSRTR
   [Anonymous], 2007, P 16 INT C WORLD WID
   [Anonymous], P 10 INT C AUT COMP
   [Anonymous], FORECASTING CLOUD CO
   [Anonymous], 2005, Discrete Optimization, DOI [DOI 10.1016/J.DISOPT.2005.01.002, 10.1016/j.disopt.2005.01.002]
   Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   Beloglazov A, 2012, FUTURE GENER COMP SY, V28, P755, DOI 10.1016/j.future.2011.04.017
   BERKEY JO, 1987, J OPER RES SOC, V38, P423, DOI 10.2307/2582731
   Bobroff N, 2007, 2007 10TH IFIP/IEEE INTERNATIONAL SYMPOSIUM ON INTEGRATED NETWORK MANAGEMENT (IM 2009), VOLS 1 AND 2, P119, DOI 10.1109/INM.2007.374776
   Bodík P, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P111
   Coffman E. G.  Jr., 1987, Journal of Complexity, V3, P406, DOI 10.1016/0885-064X(87)90009-4
   Cohen I., 2004, P USENIX OSDI, V6, P16
   Corradi A, 2014, FUTURE GENER COMP SY, V32, P118, DOI 10.1016/j.future.2012.05.012
   Dosa G., 2013, P 30 INT S THEOR ASP, P538, DOI DOI 10.4230/LIPICS.STACS.2013.538
   FRIESEN DK, 1986, SIAM J COMPUT, V15, P222, DOI 10.1137/0215016
   Halili E. H., 2008, APACHE JMETER PRACTI
   Hien Nguyen Van, 2009, Proceedings of the 2009 Ninth IEEE International Conference on Computer and Information Technology. CIT 2009, P357, DOI 10.1109/CIT.2009.109
   Huang J., 2012, 2012 2nd International Conference on Consumer Electronics, Communications and Networks (CECNet), P2056
   Johnson David S, 1973, THESIS, P6
   Karmarkar N., 1982, 23rd Annual Symposium on Foundations of Computer Science, P312, DOI 10.1109/SFCS.1982.61
   Kenyon C, 1996, PROCEEDINGS OF THE SEVENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P359
   Kundu S., 2010, HPCA
   Lakew EB, 2014, INT CONF UTIL CLOUD, P560, DOI 10.1109/UCC.2014.86
   Lim HC, 2009, FIRST WORKSHOP ON AUTOMATED CONTROL FOR DATACENTERS AND CLOUDS (ACDC '09), P13
   Manley S., 1998, Performance Evaluation Review, V26, P270, DOI 10.1145/277858.277945
   Mao M., 2011, P 2011 INT C HIGH PE, P49
   Meijering E, 2002, P IEEE, V90, P319, DOI 10.1109/5.993400
   Merkel D., 2014, LINUX J, V2014, P2, DOI DOI 10.5555/2600239.2600241
   Modi P. J., 2001, Principles and Practice of Constraint Programming - CP 2002. 7th International Conference, CP 2001. Proceedings (Lecture Notes in Computer Science Vol.2239), P685
   Morais F, 2013, IEEE ACM INT SYMP, P42, DOI 10.1109/CCGrid.2013.74
   Nguyen H., 2013, P USENIX INT C AUT O
   O'Loughlin J, 2014, LECT NOTES COMPUT SC, V8914, P133, DOI 10.1007/978-3-319-14609-6_9
   Rao J, 2009, ACM/IEEE SIXTH INTERNATIONAL CONFERENCE ON AUTONOMIC COMPUTING AND COMMUNICATIONS (ICAC '09), P137
   Saha D, 1997, TENTH INTERNATIONAL CONFERENCE ON VLSI DESIGN, PROCEEDINGS, P155, DOI 10.1109/ICVD.1997.568069
   Seiden SS, 2002, J ACM, V49, P640, DOI 10.1145/585265.585269
   Shekhar Srikantaiah., 2008, HOTPOWER 08 P 2008 C, P1
   Sherman Y., 2002, US Patent, Patent No. [6,434,513, 6434513]
   Shi LL, 2009, FCST 2009: PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON FRONTIER OF COMPUTER SCIENCE AND TECHNOLOGY, P119, DOI 10.1109/FCST.2009.32
   Silva JuanM., 2008, CommunicabilityMS '08 - Proceeding of the 1st ACM international workshop on Communicability design and evaluation in cultural and ecological multimedia, P9, DOI DOI 10.1145/1462039.1462042
   Sobel W., 2008, P CCA, V8
   Sun Y, 2014, LECT NOTES COMPUT SC, V8767, P18, DOI 10.1007/978-3-319-11653-2_2
   Tolosana-Calasanz R, 2014, 2014 INTERNATIONAL CONFERENCE ON CLOUD AND AUTONOMIC COMPUTING (ICCAC 2014), P196, DOI 10.1109/ICCAC.2014.22
   Tsoumakos D, 2013, IEEE ACM INT SYMP, P34, DOI 10.1109/CCGrid.2013.45
   Uttamchandani S, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK: 2005 UNENIX ANNUAL TECHNICAL CONFERENCE, P75
   Vanderster DC, 2006, 2006 7TH IEEE/ACM INTERNATIONAL CONFERENCE ON GRID COMPUTING, P231, DOI 10.1109/ICGRID.2006.311020
   Wang M, 2011, IEEE INFOCOM SER, P71, DOI 10.1109/INFCOM.2011.5935254
   White J, 2010, IEEE T SOFTWARE ENG, V36, P838, DOI 10.1109/TSE.2010.77
   Williams L.B.C., 2005, MODEL DRIVEN ENG LAN
   Wood T, 2008, LECT NOTES COMPUT SC, V5346, P366, DOI 10.1007/978-3-540-89856-6_19
   Xiao Z, 2013, IEEE T PARALL DISTR, V24, P1107, DOI 10.1109/TPDS.2012.283
   Xu J, 2008, CLUSTER COMPUT, V11, P213, DOI 10.1007/s10586-008-0060-0
   Zhu L, 2007, PROC INT CONF SOFTW, P797
   越民义, 1995, Acta Mathematicae Applicatae Sinica, V11, P318, DOI 10.1007/BF02011198
NR 57
TC 11
Z9 11
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2017
VL 24
IS 1
BP 101
EP 137
DI 10.1007/s10515-016-0191-0
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EI2DM
UT WOS:000392296800005
DA 2024-07-18
ER

PT J
AU Thung, F
   Lucia
   Lo, D
   Jiang, LX
   Rahman, F
   Devanbu, PT
AF Thung, Ferdian
   Lucia
   Lo, David
   Jiang, Lingxiao
   Rahman, Foyzur
   Devanbu, Premkumar T.
TI To what extent could we detect field defects? An extended empirical
   study of false negatives in static bug-finding tools
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE False negatives; Static bug-finding tools; Empirical study
ID FRAMEWORK
AB Software defects can cause much loss. Static bug-finding tools are designed to detect and remove software defects and believed to be effective. However, do such tools in fact help prevent actual defects that occur in the field and reported by users? If these tools had been used, would they have detected these field defects, and generated warnings that would direct programmers to fix them? To answer these questions, we perform an empirical study that investigates the effectiveness of five state-of-the-art static bug-finding tools (FindBugs, JLint, PMD, CheckStyle, and JCSC) on hundreds of reported and fixed defects extracted from three open source programs (Lucene, Rhino, and AspectJ). Our study addresses the question: To what extent could field defects be detected by state-of-the-art static bug-finding tools? Different from past studies that are concerned with the numbers of false positives produced by such tools, we address an orthogonal issue on the numbers of false negatives. We find that although many field defects could be detected by static bug-finding tools, a substantial proportion of defects could not be flagged. We also analyze the types of tool warnings that are more effective in finding field defects and characterize the types of missed defects. Furthermore, we analyze the effectiveness of the tools in finding field defects of various severities, difficulties, and types.
C1 [Thung, Ferdian; Lucia; Lo, David; Jiang, Lingxiao] Singapore Management Univ, Sch Informat Syst, Singapore 178902, Singapore.
   [Rahman, Foyzur; Devanbu, Premkumar T.] Univ Calif Davis, Davis, CA 95616 USA.
C3 Singapore Management University; University of California System;
   University of California Davis
RP Thung, F (corresponding author), Singapore Management Univ, Sch Informat Syst, Singapore 178902, Singapore.
EM ferdiant.2013@phdis.smu.edu.sg; lucia.2009@phdis.smu.edu.sg;
   davidlo@smu.edu.sg; lxjiang@smu.edu.sg; mfrahman@ucdavis.edu;
   ptdevanbu@ucdavis.edu
RI Thung, Ferdian/AAX-9321-2020; Jiang, Lingxiao/E-8553-2012;
   /AAZ-7265-2020; Lo, David/A-2493-2012
OI Jiang, Lingxiao/0000-0002-4336-8548; Lo, David/0000-0002-4367-7201;
   Devanbu, Prem/0000-0002-4346-5276
CR [Anonymous], 2004, Software Engineering and Knowledge Engineering
   [Anonymous], 2005, PMD applied
   [Anonymous], 2002, 0232002 NAT I STAND
   [Anonymous], P 20 WORK C REV ENG
   [Anonymous], 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering- Volume 1, ICSE '10
   [Anonymous], 2007, P 22 IEEE ACM INT C, DOI DOI 10.1145/1321631.1321639
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Artho C, 2006, JLINT FIND BUGS JAVA
   Ayewah N., 2010, Proceedings of the 19th international symposium on Software testing and analysis, P241
   Ayewah N, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P1, DOI 10.1145/1251535.1251536
   Ayewah N, 2008, IEEE SOFTWARE, V25, P22, DOI 10.1109/MS.2008.130
   Ball T, 2011, COMMUN ACM, V54, P68, DOI 10.1145/1965724.1965743
   Beyer Dirk, 2007, International Journal on Software Tools for Technology Transfer, V9, P505, DOI 10.1007/s10009-007-0044-z
   Brun Y, 2004, PROC INT CONF SOFTW, P480, DOI 10.1109/ICSE.2004.1317470
   Cadar C, 2008, ACM T INFORM SYST SE, V12, DOI 10.1145/1455518.1455522
   Cheung S.-C., 2011, P 19 ACM SIGSOFT S 1, P15
   Chou A., 2001, Operating Systems Review, V35, P73, DOI 10.1145/502059.502042
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Dallmeier V., 2007, P 22 IEEE ACM INT C, P433
   Giger E, 2011, P 8 WORK C MIN SOFTW, P83, DOI [10.1145/1985441.1985456, DOI 10.1145/1985441.1985456]
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Heckman S.S., 2007, Crossroads, V14, P7
   Heckman S, 2011, INFORM SOFTWARE TECH, V53, P363, DOI 10.1016/j.infsof.2010.12.007
   Heckman S, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P161, DOI 10.1109/ICST.2009.45
   Holzmann G., 2000, STTT, V2, P321, DOI 10.1007/s100090050039
   Hosseini H, 2012, EUR CON SFTWR MTNCE, P149, DOI 10.1109/CSMR.2012.25
   Hovemeyer D., 2004, OBJECT ORIENTED PROG
   Jocham R, 2005, JCSC JAVA CODING STA
   Kawrykow D., 2011, P 33 INT C SOFTW ENG
   Kim S., 2007, MINING SOFTWARE REPO
   Kremenek T., 2003, P STAT AN 10 INT S S
   Liang G., 2010, AUTOMATED SOFTWARE E
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Pan K, 2009, EMPIR SOFTW ENG, V14, P286, DOI 10.1007/s10664-008-9077-5
   Park J.W., 2011, P ASS ADV ART INT AA
   Rutar N, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P245, DOI 10.1109/ISSRE.2004.1
   Ruthruff JR, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P341, DOI 10.1145/1368088.1368135
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   Spacco J., 2006, PROC 2006 INT WORK M, P133
   Sun Chengnian, 2010, P 32 ACMIEEE INT C S, V1, P45, DOI [DOI 10.1145/1806799, 10.1145/1806799.1806811]
   Sunghun Kim, 2008, 1st India Software Engineering Conference. ISEC 2008
   Thung F, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P420, DOI 10.1109/ICSM.2012.6405302
   Visser W., 2005, SPIN
   Weeratunge D., 2010, P 19 INT S SOFTW TES, P253
   WEISS C, 2007, P 4 INT WORKSH MIN S
   Wu WJ, 2011, ASIA PAC SOFWR ENG, P389, DOI 10.1109/APSEC.2011.15
   Xie X, 2012, P 8 INT C PRED MOD S, P19, DOI [DOI 10.1145/2365324.2365329, 10.1145/2365324.2365329]
   Xie YC, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1232420.1232423
NR 55
TC 17
Z9 18
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2015
VL 22
IS 4
SI SI
BP 561
EP 602
DI 10.1007/s10515-014-0169-8
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CR8KJ
UT WOS:000361600000005
OA Green Published
DA 2024-07-18
ER

PT J
AU O'Halloran, C
AF O'Halloran, Colin
TI Automated verification of code automatically generated from Simulink®
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Simulink; Auto-code; Z; Refinement; Theorem proving; Ada
AB The CLawZ toolset independently and automatically proves the correctness of code automatically generated by a commercial auto-code generator for the Simulink(A (R)) modelling language. The use of formal methods is invisible to the user and it has been shown to lead to faster development of correct code. The CLawZ toolset has been continually developed and used for over a decade to prove the correctness of embedded real time safety critical software for Eurofighter Typhoon. The only requirement on the commercial auto-coder is that it provides traceability information between the signal wires in a Simulink(A (R)) model and the program variables that implement them.
C1 Univ Oxford, Oxford, England.
C3 University of Oxford
RP O'Halloran, C (corresponding author), Univ Oxford, Oxford, England.
EM colin.ohalloran@cs.ox.ac.uk
CR Abrial J.-R., 2010, MODELLING EVENT B SY
   Arthan R, 2000, ICFEM 2000: THIRD INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P169, DOI 10.1109/ICFEM.2000.873817
   Barnes J., 1997, High-Integrity Ada: The SPARK Approach
   Denney E., 2009, VERIFICATION DRIVEN
   Filliâtre JC, 2004, LECT NOTES COMPUT SC, V3308, P15
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   Hewitt M. A., 1997, ZUM '97: The Z Formal Specification Notation. 10th International Conference of Z Users Proceedings, P37
   Hoare C. A. R., 1969, COMMUN ACM
   ISO/IEC, 1995, ISO/IEC 12207
   Knuth D.E., 1992, CSLI LECT NOTES, V27
   Littlewood B, 2000, IEEE T SOFTWARE ENG, V26, P1157, DOI 10.1109/32.888629
   Littlewood B., 2002, LNCS, V2434, P485
   Morgan C., 1990, PRENTICE HALL SERIES
   Murali R., 2012, P AVOCS 12 BAMB
   O'Halloran C., 1997, Formal Aspects of Computing, V9, P349, DOI 10.1007/BF01211295
   O'Halloran C., 1999, ASE 1999, P127
   Powell A, 2007, LECT NOTES COMPUT SC, V4470, P295
   Toom A., 2008, EUR C EMB REAL TIM S
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
NR 19
TC 14
Z9 15
U1 0
U2 12
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2013
VL 20
IS 2
SI SI
BP 237
EP 264
DI 10.1007/s10515-012-0116-5
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 095SE
UT WOS:000315354200004
DA 2024-07-18
ER

PT J
AU Qian, J
   Ju, XL
   Chen, X
AF Qian, Jie
   Ju, Xiaolin
   Chen, Xiang
TI GNet4FL: effective fault localization via graph convolutional neural
   network
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Fault localization; Graph convolutional neural network; Abstract syntax
   tree
ID SPECTRUM; SLICE
AB Fault localization aims to efficiently locate faults when debugging programs, reducing software development and maintenance costs. Spectrum-based fault location (SBFL) is the most commonly used fault location technology, which calculates and ranks the suspicious value of each program entity with a specific formula by counting the coverage information of all the program entities and execution results of test cases. However, previous SBFL techniques suffered from low accuracy due to the sole use of execution coverage. This paper proposed an approach GNet4FL based on the graph convolutional neural network. GNet4FL first collects static features based on code structure and dynamic features based on test results. Then, GNet4FL uses GraphSAGE to obtain node representation of source codes and performs feature fusion on an entity consisting of multiple nodes, which preserves the topological information of the graph. Finally, the representation of each entity is input to the multi-layer perceptron for training and ranking entities. The results of the study showed that GNet4FL successfully located 160 out of 262 faults, outperforming the three state-of-the-art methods by 94, 42, and 14% in Top-1 accuracy, and having close results to Grace with less cost. Furthermore, we investigated the impact of each component (i.e., graph neural network, pruning, and dynamic features) of GNet4FL on the results. We found that all of these components had a positive impact on the proposed approach.
C1 [Qian, Jie; Ju, Xiaolin; Chen, Xiang] Nantong Univ, Sch Informat Sci & Technol, Nantong 226019, Jiangsu, Peoples R China.
C3 Nantong University
RP Ju, XL (corresponding author), Nantong Univ, Sch Informat Sci & Technol, Nantong 226019, Jiangsu, Peoples R China.
EM qianjieee@gmail.com; ju.xl@ntu.edu.cn; xchencs@ntu.edu.cn
RI JU, Xiao-lin/F-8459-2011; Chen, Xiang/AAG-3663-2019
OI Chen, Xiang/0000-0002-1180-3891
CR Abreu R, 2006, 12TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P39
   Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Lam AN, 2017, INT C PROGRAM COMPRE, P218, DOI 10.1109/ICPC.2017.24
   Anowar F, 2021, COMPUT SCI REV, V40, DOI 10.1016/j.cosrev.2021.100378
   Bruna J, 2014, Arxiv, DOI [arXiv:1312.6203, DOI 10.48550/ARXIV.1312.6203]
   Chung H.M., 2002, P 35 ANN HAWAII INT, V7, P841
   Dutta Arpita, 2021, Lean and Agile Software Development. 5th International Conference, LASD 2021. Proceedings. Lecture Notes in Business Information Processing (LNBIP 408), P156, DOI 10.1007/978-3-030-67084-9_10
   Feyzi F, 2020, EMPIR SOFTW ENG, V25, P3873, DOI 10.1007/s10664-020-09859-y
   Fushiki T, 2011, STAT COMPUT, V21, P137, DOI 10.1007/s11222-009-9153-8
   Gong P, 2015, IEEE ICST WORKSHOP
   Gu WW, 2021, NAT COMMUN, V12, DOI 10.1038/s41467-021-23795-5
   Hamilton WL, 2017, ADV NEUR IN, V30
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Ju XL, 2014, J SYST SOFTWARE, V90, P3, DOI 10.1016/j.jss.2013.11.1109
   Keller F, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P114, DOI 10.1109/QRS.2017.22
   Kipf T.N., 2017, INT C LEARNING REPRE, DOI DOI 10.48550/ARXIV.1609.02907
   Kücük Y, 2021, PROC INT CONF SOFTW, P649, DOI 10.1109/ICSE43902.2021.00066
   Li X, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P169, DOI 10.1145/3293882.3330574
   Li X, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133916
   Li Y, 2021, PROC INT CONF SOFTW, P661, DOI 10.1109/ICSE43902.2021.00067
   Liu C., 2005, P EUR SOFTW ENG C HE, V30, P286
   Liu Y, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P126, DOI 10.1109/QRS.2017.23
   Lou YL, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P664, DOI 10.1145/3468264.3468580
   Mao XG, 2014, J SYST SOFTWARE, V89, P51, DOI 10.1016/j.jss.2013.08.031
   Naish L, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000791.2000795
   Papadakis M, 2015, SOFTW TEST VERIF REL, V25, P605, DOI 10.1002/stvr.1509
   Park S, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P645
   Pearson S, 2017, PROC INT CONF SOFTW, P609, DOI 10.1109/ICSE.2017.62
   Peng ZD, 2020, INFORM SCIENCES, V510, P108, DOI 10.1016/j.ins.2019.08.077
   Planning S, 2002, The economic impacts of inadequate infrastructure for software testing
   Qian J, 2021, IEEE INT C S Q R S, P672, DOI 10.1109/QRS54544.2021.00077
   Raunak V, 2017, Arxiv, DOI arXiv:1708.03629
   Sohn J, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P273, DOI 10.1145/3092703.3092717
   Soremekun E, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-020-09931-7
   van der Maaten L, 2008, J MACH LEARN RES, V9, P2579
   Vancsics B, 2022, J SYST SOFTWARE, V193, DOI 10.1016/j.jss.2022.111429
   Wang X, 2019, WEB CONFERENCE 2019: PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE (WWW 2019), P2022, DOI 10.1145/3308558.3313562
   Wong WE, 2016, IEEE T SOFTWARE ENG, V42, P707, DOI 10.1109/TSE.2016.2521368
   Wong WE, 2014, IEEE T RELIAB, V63, P290, DOI 10.1109/TR.2013.2285319
   Wong WE, 2010, J SYST SOFTWARE, V83, P188, DOI 10.1016/j.jss.2009.09.037
   Wong WE, 2009, INT J SOFTW ENG KNOW, V19, P573, DOI 10.1142/S021819400900426X
   Woolson RF, 2007, Wiley encyclopedia of clinical trials, P1, DOI [10.1002/9780471462422.eoct979, DOI 10.1002/9780471462422.EOCT979]
   Wu F, 2019, PR MACH LEARN RES, V97
   Wu ZH, 2021, IEEE T NEUR NET LEAR, V32, P4, DOI 10.1109/TNNLS.2020.2978386
   Xiao X, 2021, INFORM SOFTWARE TECH, V139, DOI 10.1016/j.infsof.2021.106653
   Xie XY, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522924
   Xie XY, 2013, INFORM SOFTWARE TECH, V55, P866, DOI 10.1016/j.infsof.2012.08.008
   Xu JX, 2021, IEEE T RELIAB, V70, P613, DOI 10.1109/TR.2020.3040191
   Xuan JF, 2015, IEEE T KNOWL DATA EN, V27, P264, DOI 10.1109/TKDE.2014.2324590
   Yang YM, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3505243
   Yang YB, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P157, DOI 10.1145/2950290.2950353
   Zhang J, 2019, PROC INT CONF SOFTW, P783, DOI 10.1109/ICSE.2019.00086
   Zhang JM, 2022, IEEE T SOFTWARE ENG, V48, P1, DOI 10.1109/TSE.2019.2962027
   Zhang MS, 2021, IEEE T SOFTWARE ENG, V47, P1089, DOI 10.1109/TSE.2019.2911283
   Zhang Z, 2021, INFORM SOFTWARE TECH, V131, DOI 10.1016/j.infsof.2020.106486
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
   Zou DM, 2021, IEEE T SOFTWARE ENG, V47, P332, DOI 10.1109/TSE.2019.2892102
NR 58
TC 1
Z9 1
U1 6
U2 46
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 16
DI 10.1007/s10515-023-00383-z
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA E5LJ9
UT WOS:000975952300001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Schubert, PD
   Gazzillo, P
   Patterson, Z
   Braha, J
   Schiebel, F
   Hermann, B
   Wei, SY
   Bodden, E
AF Schubert, Philipp Dominik
   Gazzillo, Paul
   Patterson, Zach
   Braha, Julian
   Schiebel, Fabian
   Hermann, Ben
   Wei, Shiyi
   Bodden, Eric
TI Static data-flow analysis for software product lines in C Revoking the
   preprocessor's special role
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Inter-procedural static analysis; Software product lines; Preprocessor;
   LLVM; C; C plus plus
ID SYSTEMS
AB Many critical codebases are written in C, and most of them use preprocessor directives to encode variability, effectively encoding software product lines. These preprocessor directives, however, challenge any static code analysis. SPLlift, a previously presented approach for analyzing software product lines, is limited to Java programs that use a rather simple feature encoding and to analysis problems with a finite and ideally small domain. Other approaches that allow the analysis of real-world C software product lines use special-purpose analyses, preventing the reuse of existing analysis infrastructures and ignoring the progress made by the static analysis community. This work presents VarAlyzer, a novel static analysis approach for software product lines. VarAlyzer first transforms preprocessor constructs to plain C while preserving their variability and semantics. It then solves any given distributive analysis problem on transformed product lines in a variability-aware manner. VarAlyzer 's analysis results are annotated with feature constraints that encode in which configurations each result holds. Our experiments with 95 compilation units of OpenSSL show that applying VarAlyzer enables one to conduct inter-procedural, flow-, field- and context-sensitive data-flow analyses on entire product lines for the first time, outperforming the product-based approach for highly-configurable systems.
C1 [Schubert, Philipp Dominik; Bodden, Eric] Paderborn Univ, Paderborn, Germany.
   [Gazzillo, Paul; Braha, Julian] Univ Cent Florida, Orlando, FL 32816 USA.
   [Patterson, Zach; Wei, Shiyi] Univ Texas Dallas, Dallas, TX USA.
   [Schiebel, Fabian; Bodden, Eric] Fraunhofer IEM, Paderborn, Germany.
   [Hermann, Ben] Tech Univ Dortmund, Dortmund, Germany.
C3 University of Paderborn; State University System of Florida; University
   of Central Florida; University of Texas System; University of Texas
   Dallas; Dortmund University of Technology
RP Schubert, PD (corresponding author), Paderborn Univ, Paderborn, Germany.
EM philipp.schubert@upb.de; paul.gazzillo@ucf.edu;
   zach.patterson@utdallas.edu; julianbraha@gmail.com;
   fabian.schiebel@iem.fraunhofer.de; ben.hermann@cs.tu-dortmund.de;
   swei@utdallas.edu; eric.bodden@upb.de
RI Wei, Shiyi/AAR-1561-2020; Hermann, Ben/AAG-9524-2019; Bodden,
   Eric/AAE-1365-2021
OI Hermann, Ben/0000-0001-9848-2017; Bodden, Eric/0000-0003-3470-3647;
   Schubert, Philipp Dominik/0000-0002-8674-1859; Gazzillo,
   Paul/0000-0003-1425-8873; Braha, Julian/0009-0001-8899-5334
FU Projekt DEAL; German Research Foundation (DFG) within the Collaborative
   Research Centre 901 "On-The-Fly Computing" [160364472-SFB901/3]; Heinz
   Nixdorf Foundation; NSF [CCF-1840934, CCF-1816951]
FX Open Access funding enabled and organized by Projekt DEAL. This work was
   partially supported by the German Research Foundation (DFG) within the
   Collaborative Research Centre 901 "On-The-Fly Computing" under the
   project number 160364472-SFB901/3, the Heinz Nixdorf Foundation, and NSF
   grants CCF-1840934 and CCF-1816951.
CR [Anonymous], 2021, ARTIFACTS SUPPLEMENT
   [Anonymous], 2018, GCC OPTIMIZE OPTIONS
   [Anonymous], 2018, ICCOPTIMIZEOPTIONS I
   [Anonymous], 2018, CLANG TIDY CLANG TID
   [Anonymous], 2012, FILEVAULTBUG APPLE S
   [Anonymous], 2020, BISON BISON
   [Anonymous], 2020, HERCULES HERCULES
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Bodden E, 2018, COMPANION PROCEEDINGS FOR THE ISSTA/ECOOP 2018 WORKSHOPS, P85, DOI 10.1145/3236454.3236500
   Bodden E, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI 10.1145/2499370.2491976
   Brabrand C., 2012, Proceedings of the 11th Annual International Conference on Aspect-oriented Software Development, AOSD '12, P13, DOI DOI 10.1145/2162049.2162052
   Chen S, 2012, ACM SIGPLAN NOTICES, V47, P29, DOI 10.1145/2398856.2364535
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   CodeSonar G, 2018, GRAMMATECH CODESONAR
   Coverity-(SAST), 2018, COV STAT APPL SEC TE
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dimovski Aleksandar S., 2016, Model-Checking Software. 23rd International Symposium, SPIN 2016, co-located with ETAPS 2016. Proceedings: LNCS 9641, P19, DOI 10.1007/978-3-319-32582-8_2
   Ernst MD, 2002, IEEE T SOFTWARE ENG, V28, P1146, DOI 10.1109/TSE.2002.1158288
   Garrido A, 2005, PROC IEEE INT CONF S, P379
   Gazzillo P, 2012, ACM SIGPLAN NOTICES, V47, P323, DOI 10.1145/2345156.2254103
   Hermann B, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P758, DOI 10.1145/2786805.2786829
   Holzinger P, 2017, P IEEE S SECUR PRIV, P1027, DOI 10.1109/SP.2017.16
   Iosif-Lazar A.F., 2017, ARXIV170108114
   Kästner C, 2012, ACM SIGPLAN NOTICES, V47, P773, DOI 10.1145/2398857.2384673
   Kästner C, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2211616.2211617
   Kästner C, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P805
   Kästner C, 2009, PROC INT CONF SOFTW, P611, DOI 10.1109/ICSE.2009.5070568
   Kastner C, 2010, THESIS O VONGUERICKE, DOI [10.1524/itit.2012.0662, DOI 10.1524/ITIT.2012.0662]
   Kenner A., 2010, P 2 INT WORKSH FEAT, P25, DOI DOI 10.1145/1868688.1868693
   Krüger S, 2017, IEEE INT CONF AUTOM, P931, DOI 10.1109/ASE.2017.8115707
   Le W, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1047, DOI 10.1145/2568225.2568304
   Liebig J., 2013, P 2013 9 JOINT M FDN, P81, DOI DOI 10.1145/2491411.2491437
   Liebig Jorg, 2011, AOSD 11
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   McCloskey B, 2005, ESEC FSE 13, P21
   Midtgaard J, 2015, SCI COMPUT PROGRAM, V105, P145, DOI 10.1016/j.scico.2015.04.005
   Onlinedocs G., 2021, GCC ONLINEDOCS CPP 3
   Reps T, 2003, LECT NOTES COMPUT SC, V2694, P189
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Schubert PD, 2019, LECT NOTES COMPUT SC, V11428, P393, DOI 10.1007/978-3-030-17465-1_22
   Sharir M., 1978, 2 APPROACHES INTERPR
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Strom Robert E., 1983, Proceedings of the 10th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, POPL '83, P276, DOI DOI 10.1145/567067.567093
   Thum T., 2012, Analysis strategies for software product lines
   Von Rhein A, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3280986
   Walkingshaw Eric, 2014, ACM SIGPLAN S NEW ID, P213
NR 48
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 35
DI 10.1007/s10515-022-00333-1
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZZ4MV
UT WOS:000773246000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Overbey, JL
   Johnson, RE
   Hafiz, M
AF Overbey, Jeffrey L.
   Johnson, Ralph E.
   Hafiz, Munawar
TI Differential precondition checking: a language-independent, reusable
   analysis for refactoring engines
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Precondition checking; Refactoring; Restructuring; Static analysis
AB One of the most difficult parts of building automated refactorings is ensuring that they preserve behavior. This paper proposes a new technique to check for behavior preservation; we call this technique differential precondition checking. It is simple yet expressive enough to implement the most common refactorings, and the core algorithm runs in linear time. However, the main advantage is that a differential precondition checker can be placed in a library and reused in refactoring tools for many different languages; the core algorithm can be implemented in a way that is completely language independent. We have implemented a differential precondition checker and used it in refactoring tools for Fortran (Photran), PHP, and BC.
C1 [Overbey, Jeffrey L.; Hafiz, Munawar] Auburn Univ, Dept Comp Sci & Software Engn, Auburn, AL 36849 USA.
   [Johnson, Ralph E.] Univ Illinois, Dept Comp Sci, Champaign, IL USA.
C3 Auburn University System; Auburn University; University of Illinois
   System; University of Illinois Urbana-Champaign
RP Overbey, JL (corresponding author), Auburn Univ, Dept Comp Sci & Software Engn, Auburn, AL 36849 USA.
EM joverbey@auburn.edu; johnson@cs.illinois.edu; munawar@auburn.edu
FU National Science Foundation [OCI 07-25070, CCF-1217271]; state of
   Illinois
FX This research is part of the Blue Waters sustained-petascale computing
   project, which is supported by the National Science Foundation (Award
   Number OCI 07-25070) and the state of Illinois. Blue Waters is a joint
   effort of the University of Illinois at Urbana-Champaign, its National
   Center for Super-computing Applications, IBM, and the Great Lakes
   Consortium for Petascale Computation. Additionally, portions of this
   research were supported by the National Science Foundation under award
   CCF-1217271. The authors would like to thank the anonymous reviewers, as
   well as Rob Bocchino, John Brant, Brett Daniel, Danny Dig, Matthew
   Fotzler, Milos Gligoric, Vilas Jagannath, Ashley Kasza, Darko Marinov,
   Stas Negara, and members of the Brett Daniel Software Engineering
   Seminar for providing invaluable feedback on earlier drafts of this
   paper.
CR Daniel B., 2007, P 6 JOINT M EUR SOFT
   Dig D, 2009, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2009.5070539
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Kennedy Ken., 2002, Optimizing compilers for modern architectures: a dependence-based approach
   Mens T, 2005, J SOFTW MAINT EVOL-R, V17, P247, DOI 10.1002/smr.316
   Murphy-Hill E, 2009, PROC INT CONF SOFTW, P287, DOI 10.1109/ICSE.2009.5070529
   Overbey J. L., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P303, DOI 10.1109/ASE.2011.6100067
   Overbey J.L., 2011, TECHNICAL REPORT
   Overbey JL, 2009, LECT NOTES COMPUT SC, V5452, P114, DOI 10.1007/978-3-642-00434-6_8
   Reichenbach C., 2009, P 23 EUR C OBJ OR PR
   Schäfer M, 2010, ACM SIGPLAN NOTICES, V45, P286, DOI 10.1145/1932682.1869485
   Schafer M., 2010, 24 EUR C OBJ OR PROG
   Schafer M., 2009, ECOOP 09
   SCHAFER M, 2008, 23 ANN ACM SIGPLAN C
   Verbaere M., 2006, P 28 INT C SOFTW ENG
NR 15
TC 3
Z9 3
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2016
VL 23
IS 1
SI SI
BP 77
EP 104
DI 10.1007/s10515-014-0176-9
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1TW
UT WOS:000369000800004
DA 2024-07-18
ER

PT J
AU Liu, J
   Basu, S
   Lutz, RR
AF Liu, Jing
   Basu, Samik
   Lutz, Robyn R.
TI Compositional model checking of software product lines using variation
   point obligations
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software product lines; Compositional model checking; Variation point;
   Feature
ID VERIFICATION
AB This paper introduces a technique for incremental and compositional model checking that allows efficient reuse of model-checking results associated with the features in a product line. As the use of product lines has increased, so has the need to verify the models used to construct the products in the product line. However, this effort is currently hampered by the difficulty of composing model-checking results for the features in a way that allows reuse for subsequent products. The contributions of this paper are to remove restrictions on how the features can be sequentially composed, to describe how to generate obligations such that all sequentially composed systems can be verified, and to show how to compositionally model check the product in the product line by reusing the variation-point obligations. The paper develops the technique and its implementation in the context of a medical-device product line.
C1 [Liu, Jing] Rockwell Collins Inc, Cedar Rapids, IA 52498 USA.
   [Basu, Samik; Lutz, Robyn R.] Iowa State Univ, Dept Comp Sci, Ames, IA USA.
   [Lutz, Robyn R.] CALTECH, Jet Prop Lab, Pasadena, CA USA.
C3 Rockwell Collins; Iowa State University; National Aeronautics & Space
   Administration (NASA); NASA Jet Propulsion Laboratory (JPL); California
   Institute of Technology
RP Liu, J (corresponding author), Rockwell Collins Inc, Cedar Rapids, IA 52498 USA.
EM Jing.Janet.Liu@gmail.com; sbasu@cs.iastate.edu; rlutz@cs.iastate.edu
OI Lutz, Robyn/0000-0001-5390-7982
FU National Science Foundation [0541163, 0702758, 0709217, 0916275]; Direct
   For Computer & Info Scie & Enginr; Division Of Computer and Network
   Systems [0709217] Funding Source: National Science Foundation; Direct
   For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [0702758, 0541163, 0916275] Funding Source:
   National Science Foundation
FX This research was supported by the National Science Foundation under
   grants 0541163, 0702758, 0709217 and 0916275. The authors would like to
   thank members of the IFIP Working Group 2.9, Software Requirements
   Engineering, for valuable feedback on a presentation describing this
   work.
CR ABADI M, 1995, ACM T PROGR LANG SYS, V17, P507, DOI 10.1145/203095.201069
   [Anonymous], LICS
   Basu S, 2006, THEOR COMPUT SCI, V354, P211, DOI 10.1016/j.tcs.2005.11.016
   Batory D, 2006, COMMUN ACM, V49, P45, DOI 10.1145/1183236.1183264
   BEREZIN S, 1998, P COMPOS 97, P81
   Blundell C, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P258, DOI 10.1109/ASE.2004.1342743
   BLUNDELL C, 2003, CS0307 BROWN U
   Bruns G., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P274
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   CLEAVELAND R, 1990, ACTA INFORM, V27, P725, DOI 10.1007/BF00264284
   Ellenbogen KA, 2005, CARDIAC PACING AND ICDS, 4TH EDITION, P1, DOI 10.1002/9780470750674
   FANTECHI A, 2007, ESEC FSE 07, P521
   Fischbein D., 2006, ROSATEA 06, P39
   FISLER K, 2001, ESEC FSE 9, P152
   FISLER K, 2002, WPICSTR0228
   Gheorghiu M, 2007, LECT NOTES COMPUT SC, V4424, P292
   Giannakopoulou D, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P3, DOI 10.1109/ASE.2002.1114984
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Hall RJ, 2000, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VI, P67
   HAVELUND K, 2001, SOFTWARE ENG, V27, P1000
   Huth Michael, 2004, Logic in Computer Science: Modelling and reasoning about systems
   Jacobson I., 1997, Software Reuse: Architecture, Process and Organization for Business Success
   Kaivola R, 2005, LECT NOTES COMPUT SC, V3576, P170
   Kang K. C., 1990, Technical Report
   Kang KC, 2002, IEEE SOFTWARE, V19, P58, DOI 10.1109/MS.2002.1020288
   Kishi T, 2005, LECT NOTES COMPUT SC, V3714, P150
   Krishnamurthi S, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1217295.1217296
   Lauenroth K., 2007, ASE 07, P373
   Li H., 2002, Software Engineering Notes, V27, P89, DOI 10.1145/605466.605481
   Li H. C., 2005, Automated Software Engineering, V12, P349, DOI 10.1007/s10515-005-2643-9
   Li HC, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P195, DOI 10.1109/ASE.2002.1115013
   LITTLEWOOD B, 1993, COMMUN ACM, V36, P69, DOI 10.1145/163359.163373
   LIU J, 2010, RES PROTOTYPE MODEL
   LIU J, 2008, 0805 IOW STAT U DEP
   Liu J, 2007, J SYST SOFTWARE, V80, P1879, DOI 10.1016/j.jss.2007.01.047
   Liu J, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P596
   NEJATI S, 2008, INT S FDN SOFTW ENG
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Ossher H., 2000, P S SOFTW ARCH COMP
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   QUEILLE JP, 1982, P INT S PROGR
   Szyperski C., 2002, COMPONENT SOFTWARE, V2nd
   THANG NT, 2005, THESIS JAPAN ADV I S
   WANG X, 2005, THESIS WORCESTER POL
   Webber DL, 2004, SCI COMPUT PROGRAM, V53, P305, DOI 10.1016/j.scico.2003.04.004
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
   XIE F, 2003, SIGSOFT SOFTW ENG NO, V28, P277
   ZAVE P, 1993, COMPUTER, V26, P20, DOI 10.1109/2.223539
NR 49
TC 19
Z9 21
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2011
VL 18
IS 1
BP 39
EP 76
DI 10.1007/s10515-010-0075-7
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 702CV
UT WOS:000285873100003
DA 2024-07-18
ER

PT J
AU Hao, D
   Xie, T
   Zhang, L
   Wang, XY
   Sun, JS
   Mei, H
AF Hao, Dan
   Xie, Tao
   Zhang, Lu
   Wang, Xiaoyin
   Sun, Jiasu
   Mei, Hong
TI Test input reduction for result inspection to facilitate fault
   localization
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Test suite reduction; Testing; Debugging; Fault localization
ID TEST-SUITE REDUCTION; PRIORITIZATION
AB Testing-based fault-localization (TBFL) approaches often require the availability of high-statement-coverage test suites that sufficiently exercise the areas around the faults. However, in practice, fault localization often starts with a test suite whose quality may not be sufficient to apply TBFL approaches. Recent capture/replay or traditional test-generation tools can be used to acquire a high-statement-coverage test collection (i.e., test inputs only) without expected outputs. But it is expensive or even infeasible for developers to manually inspect the results of so many test inputs. To enable practical application of TBFL approaches, we propose three strategies to reduce the test inputs in an existing test collection for result inspection. These three strategies are based on the execution traces of test runs using the test inputs. With the three strategies, developers can select only a representative subset of the test inputs for result inspection and fault localization. We implemented and applied the three test-input-reduction strategies to a series of benchmarks: the Siemens programs, DC, and TCC. The experimental results show that our approach can help developers inspect the results of a smaller subset (less than 10%) of test inputs, whose fault-localization effectiveness is close to that of the whole test collection.
C1 [Hao, Dan; Zhang, Lu; Wang, Xiaoyin; Sun, Jiasu; Mei, Hong] Peking Univ, Key Lab High Confidence Software Technol, Sch Elect Engn & Comp Sci, Minist Educ,Inst Software, Beijing 100871, Peoples R China.
   [Xie, Tao] N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA.
C3 Peking University; North Carolina State University
RP Mei, H (corresponding author), Peking Univ, Key Lab High Confidence Software Technol, Sch Elect Engn & Comp Sci, Minist Educ,Inst Software, Beijing 100871, Peoples R China.
EM haod@sei.pku.edu.cn; xie@csc.ncsu.edu; zhanglu@sei.pku.edu.cn;
   wangxy06@sei.pku.edu.cn; sjs@sei.pku.edu.cn; meih@pku.edu.cn
RI Wang, Xiaoyin/ABA-9508-2020; Hao, Dan/A-8600-2015
OI Hao, Dan/0000-0001-8295-303X
FU National Basic Research Program of China [2009CB320703]; Science Fund
   for Creative Research Groups of China [60821003]; National Natural
   Science Foundation of China [60803012, 90718016]; NSF [CCF-0725190,
   CCF-0845272]; ARO [W911NF-07-1-0431, W911NF-08-1-0105]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [0845272] Funding Source: National Science Foundation
FX This effort is sponsored by the National Basic Research Program of China
   (973) under Grant No. 2009CB320703, the Science Fund for Creative
   Research Groups of China under Grant No. 60821003, the National Natural
   Science Foundation of China under Grant No. 60803012, and the National
   Natural Science Foundation of China under Grant No. 90718016. Tao Xie's
   work is supported in part by NSF grants CCF-0725190, CCF-0845272, and
   ARO grants W911NF-07-1-0431 and W911NF-08-1-0105.
CR Agrawal H, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P143, DOI 10.1109/ISSRE.1995.497652
   Barbosa EF, 2001, SOFTW TEST VERIF REL, V11, P113, DOI 10.1002/stvr.226
   Baresi Luciano., 2001, Test Oracles
   Baudry B., 2006, P 28 INT C SOFTW ENG, P82, DOI DOI 10.1145/1134285.1134299
   Cleve H, 2005, PROC INT CONF SOFTW, P342
   Dan H, 2008, AUTOMAT SOFTW ENG, V15, P207, DOI 10.1007/s10515-008-0025-9
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Enderton HB., 1977, Elements of set theory
   Graves TL, 2001, ACM T SOFTW ENG METH, V10, P184, DOI 10.1145/367008.367020
   Guo L, 2006, LECT NOTES COMPUT SC, V3923, P80
   Hao D, 2005, PROC IEEE INT CONF S, P683
   HAO D, 2006, P 28 INT C SOFTW ENG, P957
   HAO D, 2005, P 20 IEEE INT C AUT, P291
   HAO D, 2006, P 13 AS PAC SOFTW EN, P277
   Hao D, 2009, PROC INT CONF SOFTW, P583, DOI 10.1109/ICSE.2009.5070561
   Harrold M. J., 1993, ACM Transactions on Software Engineering and Methodology, V2, P270, DOI 10.1145/152388.152391
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Jeffrey D, 2005, PROC IEEE INT CONF S, P549
   Jeffrey D, 2007, IEEE T SOFTWARE ENG, V33, P108, DOI 10.1109/TSE.2007.18
   Jones JA, 2003, IEEE T SOFTWARE ENG, V29, P195, DOI 10.1109/TSE.2003.1183927
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Jones JA, 2005, P 20 IEEE ACM INT C, P273
   JOSEPH N, 1992, STAT PROBABILITY MOD
   LIBLIT B, 2003, P ACM SIGPLAN 2003 C, P141
   LIU C, 2005, P 13 ACM SIGSOFT INT, P295
   Ma XY, 2005, IEEE SYS MAN CYBERN, P133
   Pacheco C, 2005, LECT NOTES COMPUT SC, V3586, P504
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Rothermel G, 2002, SOFTW TEST VERIF REL, V12, P219, DOI 10.1002/stvr.256
   Rothermel G, 1998, IEEE T SOFTWARE ENG, V24, P401, DOI 10.1109/32.689399
   Rothermel G., 1997, ACM Transactions on Software Engineering and Methodology, V6, P173, DOI 10.1145/248233.248262
   Saff David., 2005, PROC ASE, P114, DOI DOI 10.1145/1101908.1101927
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Sprenkle S, 2005, PROC IEEE INT CONF S, P587
   Srivastava A., 2002, Software Engineering Notes, V27, P97, DOI 10.1145/566171.566187
   Trochim W.M.K., 2007, RES METHODS KNOWLEDG
   Walcott K.R., 2006, P INT S SOFTW TEST A, P1, DOI DOI 10.1145/1146238.1146240
   Wang Z, 2005, LUMINESCENCE, V20, P347, DOI 10.1002/bio.843
   WOHLIN C, 1999, EXPERIMENTATION SOFT
   Xie T., 2006, Automated Software Engineering, V13, P345, DOI 10.1007/s10851-006-8530-6
   Xie YC, 2003, IEEE T SOFTWARE ENG, V29, P915, DOI 10.1109/TSE.2003.1237172
   Yu YB, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P201, DOI 10.1145/1368088.1368116
NR 44
TC 40
Z9 51
U1 1
U2 12
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2010
VL 17
IS 1
BP 5
EP 31
DI 10.1007/s10515-009-0056-x
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 534MO
UT WOS:000272902000002
DA 2024-07-18
ER

PT J
AU Taghdiri, M
   Jackson, D
AF Taghdiri, Mana
   Jackson, Daniel
TI Inferring specifications to detect errors in code
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 19th International Conference on Automated Software Engineering (ASE
   2004)
CY SEP, 2004
CL Linz, AUSTRIA
DE specification inference; modular abstraction; counterexample-guided
   abstraction refinement; bounded program verification; alloy; SAT
ID SHAPE-ANALYSIS
AB A new technique is presented to statically check a given procedure against a user-provided property. The method requires no annotations; it automatically infers a context-dependent specification for each procedure call, so that only as much information about a procedure is used as is needed to analyze its caller. Specifications are inferred iteratively. Empty specifications are initially used to over-approximate the effects of all procedure calls; these are later refined in response to spurious counterexamples. When the analysis terminates, any remaining counterexample is guaranteed to be valid. However, since the heap is finitized, the absence of a counterexample does not guarantee the validity of the given property in general.
C1 MIT, Comp Sci & AI Lab, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Taghdiri, M (corresponding author), MIT, Comp Sci & AI Lab, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM taghdiri@mit.edu; dnj@mit.edu
CR [Anonymous], SPIN WORKSH MOD CHEC
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   CLARKE EM, 2000, P COMP AID VER, P154
   Cormen T.H., 1990, Introduction to Algorithms
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   GRAF S, **DROPPED REF**
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   PLAISTED DA, 1986, J SYMB COMPUT, V2, P293, DOI 10.1016/S0747-7171(86)80028-1
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Xie Yichen., 2005, ACM SIGPLAN NOTICES, P351, DOI DOI 10.1145/1047659.1040334
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 36
TC 11
Z9 12
U1 1
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2007
VL 14
IS 1
BP 87
EP 121
DI 10.1007/s10515-006-0005-x
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 211VO
UT WOS:000249551600005
DA 2024-07-18
ER

PT J
AU Kolthoff, K
   Bartelt, C
   Ponzetto, SP
AF Kolthoff, Kristian
   Bartelt, Christian
   Ponzetto, Simone Paolo
TI Data-driven prototyping via natural-language-based GUI retrieval
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Rapid prototyping of graphical user interfaces (GUIs); Information
   retrieval for GUIs; GUI prototypes from natural language requirements;
   Data-driven GUI prototyping; Deriving editable GUI screens
ID INFORMATION-RETRIEVAL
AB Rapid GUI prototyping has evolved into a widely applied technique in early stages of software development to facilitate the clarification and refinement of requirements. Especially high-fidelity GUI prototyping has shown to enable productive discussions with customers and mitigate potential misunderstandings, however, the benefits of applying high-fidelity GUI prototypes are accompanied by the disadvantage of being expensive and time-consuming in development and requiring experience to create. In this work, we show RaWi, a data-driven GUI prototyping approach that effectively retrieves GUIs for reuse from a large-scale semi-automatically created GUI repository for mobile apps on the basis of Natural Language (NL) searches to facilitate GUI prototyping and improve its productivity by leveraging the vast GUI prototyping knowledge embodied in the repository. Retrieved GUIs can directly be reused and adapted in the graphical editor of RaWi. Moreover, we present a comprehensive evaluation methodology to enable (i) the systematic evaluation of NL-based GUI ranking methods through a novel high-quality gold standard and conduct an in-depth evaluation of traditional IR and state-of-the-art BERT-based models for GUI ranking, and (ii) the assessment of GUI prototyping productivity accompanied by an extensive user study in a practical GUI prototyping environment.
C1 [Kolthoff, Kristian; Bartelt, Christian] Univ Mannheim, Inst Enterprise Syst, Mannheim, Germany.
   [Ponzetto, Simone Paolo] Univ Mannheim, Data & Web Sci Grp, Mannheim, Germany.
C3 University of Mannheim; University of Mannheim
RP Kolthoff, K (corresponding author), Univ Mannheim, Inst Enterprise Syst, Mannheim, Germany.
EM kolthoff@es.uni-mannheim.de; bartelt@es.uni-mannheim.de;
   simone@informatik.uni-mannheim.de
OI Ponzetto, Simone Paolo/0000-0001-7484-2049
CR Adobe XD, 2015, PROD XD
   Akkaya C., 2010, NAACL HLT 2010 WORKS, P195
   [Anonymous], 2014, MOCKPLUS
   [Anonymous], 2022, RAWI REPOSITORY RAWI
   [Anonymous], 2011, LUCENE APACHE LUCENE
   [Anonymous], 2019, SKETCH
   Azad HK, 2019, INFORM PROCESS MANAG, V56, P1698, DOI 10.1016/j.ipm.2019.05.009
   Beaudouin-Lafon Michel, 2002, PROTOTYPING TOOLS TE, P1006
   Behrang F, 2018, 2018 IEEE/ACM 5TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT), P236, DOI 10.1145/3197231.3197244
   Bernal-Cárdenas C, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P71, DOI 10.1109/ICSE-Companion.2019.00041
   Brooke J., 1996, USABILITY EVALUATION, P189, DOI DOI 10.1201/9781498710411-35
   Bunian S, 2021, Arxiv, DOI arXiv:2102.05216
   Cambronero J, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P964, DOI 10.1145/3338906.3340458
   Carpineto C, 2001, ACM T INFORM SYST, V19, P1, DOI 10.1145/366836.366860
   Carvalho V.R., 2011, ACM Sigir forum, V44, P17, DOI DOI 10.1145/1924475.1924481
   Chen CY, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P665, DOI 10.1145/3180155.3180222
   Chen JS, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3391613
   Chunyang Chen, 2019, Proceedings of the ACM on Human-Computer Interaction, V3, DOI 10.1145/3359282
   Coyette A, 2007, LECT NOTES COMPUT SC, V4662, P150
   Coyette A, 2007, LECT NOTES COMPUT SC, V4401, P160
   Deka B, 2017, UIST'17: PROCEEDINGS OF THE 30TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P845, DOI 10.1145/3126594.3126651
   Deka B, 2016, UIST 2016: PROCEEDINGS OF THE 29TH ANNUAL SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P767, DOI 10.1145/2984511.2984581
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   diaeresis>tze Hinrich Schu<spacing, 2008, INTRO INFORM RETRIEV, V39
   Difallah D, 2018, WSDM'18: PROCEEDINGS OF THE ELEVENTH ACM INTERNATIONAL CONFERENCE ON WEB SEARCH AND DATA MINING, P135, DOI 10.1145/3159652.3159661
   Faranello Scott., 2012, Balsamiq Wireframes Quickstart Guide
   Figma, 2016, FIGMA
   Galke L., 2017, INFORM 2017
   Gu XD, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P933, DOI 10.1145/3180155.3180167
   Hajimiri Y., 2020, 22 INT C HUMAN COMPU, P1
   Han SG, 2020, Arxiv, DOI arXiv:2004.08476
   Huang F, 2019, CHI 2019: PROCEEDINGS OF THE 2019 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3290605.3300334
   Husain H, 2020, Arxiv, DOI arXiv:1909.09436
   Jones K.S., 1976, J DOC
   Kolthoff K., 2020, 35 IEEEACM INT C AUT
   Kolthoff K, 2021, LECT NOTES COMPUT SC, V12801, P376, DOI 10.1007/978-3-030-80599-9_33
   Konva.js, 2015, KONVA JS HTML5 2D CA
   Kraemer HC, 2012, AM J PSYCHIAT, V169, P13, DOI 10.1176/appi.ajp.2011.11010050
   Krippendorff Klaus, 2011, COMPUTING KRIPPENDOR, DOI DOI 10.1002/9781405186407.WBIECR029
   Landay J.A., 1994, INTERACTIVE SKETCHIN
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Lee CG, 2020, Arxiv, DOI arXiv:2001.05684
   Leiva L. A., 2020, 22 INT C HUMAN COMPU, DOI 10.1145/3406324.3410710
   Li T.J.J., 2021, ARXIV
   Lo R, 1996, PROCEEDINGS OF THE 3RD INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, P166, DOI 10.1109/METRIC.1996.492453
   Lv F, 2015, IEEE INT CONF AUTOM, P260, DOI 10.1109/ASE.2015.42
   Macbeth G, 2011, UNIV PSYCHOL, V10, P545, DOI 10.11144/Javeriana.upsy10-2.cdcp
   McMillan C, 2012, IEEE T SOFTWARE ENG, V38, P1069, DOI 10.1109/TSE.2011.84
   Mikolov Tomas, 2013, Advances in Neural Information Processing Systems, P3111, DOI DOI 10.48550/ARXIV.1310.4546
   Moran K, 2018, Arxiv, DOI arXiv:1802.02312
   Mukasa KS, 2008, INT REQUIR ENG CONF, P327, DOI 10.1109/RE.2008.55
   Paolacci G, 2010, JUDGM DECIS MAK, V5, P411
   Peer E, 2014, BEHAV RES METHODS, V46, P1023, DOI 10.3758/s13428-013-0434-y
   Phan Nina, 2007, 30th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P709, DOI 10.1145/1277741.1277870
   Rashtchian C., 2010, P NAACL HLT 2010 WOR, V2010, P139, DOI DOI 10.5555/1866696.1866717
   Ravid A., 2000, Requirements Engineering, V5, P225, DOI 10.1007/PL00010352
   RaWi Prototype, 2022, RAW RAP PROT WEBS
   Reimers N, 2019, Arxiv, DOI [arXiv:1908.10084, 10.48550/arXiv.1908.10084]
   Ritchie D., 2011, P 24 ANN ACM S US IN, P165, DOI DOI 10.1145/2047196.2047216
   Robertson S. E., 1995, Text REtrieval Conference (TREC-3) (NIST SP 500-225), P109
   Ross Joel, 2010, CHI 10 EXTENDED ABST, DOI [DOI 10.1145/1753846.1753873, 10.1145/1753846.1753873]
   Rudd Jim, 1996, Interactions, V3, P76, DOI DOI 10.1145/223500.223514
   Segura VCVB, 2012, PROCEEDINGS OF THE INTERNATIONAL WORKING CONFERENCE ON ADVANCED VISUAL INTERFACES, P18, DOI 10.1145/2254556.2254564
   Shuyo N., 2010, Language detection library for java
   Smith R, 2007, PROC INT CONF DOC, P629, DOI 10.1109/icdar.2007.4376991
   Teufel S, 2007, TEXT SPEECH LANG TEC, V37, P163
   Wang Bryan, 2021, UIST '21: The 34th Annual ACM Symposium on User Interface Software and Technology, P498, DOI 10.1145/3472749.3474765
   Windsor P., 1992, Software Prototyping and Evolutionary Development, P4
   Woolson RF, 2007, Wiley encyclopedia of clinical trials, P1, DOI [10.1002/9780471462422.eoct979, DOI 10.1002/9780471462422.EOCT979]
   Young T, 2018, IEEE COMPUT INTELL M, V13, P55, DOI 10.1109/MCI.2018.2840738
   Zhang HY, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P956, DOI 10.1145/2950290.2983955
NR 71
TC 5
Z9 5
U1 2
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
AR 13
DI 10.1007/s10515-023-00377-x
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9W6WD
UT WOS:000949218900001
OA hybrid
DA 2024-07-18
ER

PT J
AU Wang, ZJ
   Liu, F
   Hao, YY
   Jin, Z
AF Wang, Zejun
   Liu, Fang
   Hao, Yiyang
   Jin, Zhi
TI AdaComplete: improve DL-based code completion method's domain
   adaptability
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Code completion; Neural network; N-gram; Model integration; Domain
   adaptability
AB Code completion is an important feature in integrated development environments that can accelerate the coding process. With the development of deep learning technologies and easy-to-acquire open-source codebases, many Deep Learning based code completion models (DL models) are proposed. These models are trained using the generic source code datasets, resulting in poor domain adaptability. That is, these models suffer from performance loss when helping programmers code in a specific domain, e.g., helping to decide which domain-specific API to call. To solve the problem, we propose AdaComplete, a simple and effective framework that utilizes a local code completion model to compensate DL models' domain adaptability. The local code completion model is trained using the source codes of the target domain. When used in code completion, given the context, AdaComplete can adaptively choose the recommendations from either the DL model or the local code completion model based on our hand-crafted features. Experimental results show that AdaComplete outperforms state-of-the-art DL-based code completion methods on specific domains and can improve the accuracy by 7% on average.
C1 [Wang, Zejun; Jin, Zhi] Peking Univ, Sch Comp Sci, Beijing, Peoples R China.
   [Wang, Zejun; Jin, Zhi] Peking Univ, MoE, Key Lab High Confidence Software Technol, Beijing, Peoples R China.
   [Liu, Fang] Beihang Univ, State Key Lab Software Dev Environm, Beijing, Peoples R China.
   [Hao, Yiyang] Silicon Heart Tech Co, Beijing, Peoples R China.
C3 Peking University; Peking University; Beihang University
RP Jin, Z (corresponding author), Peking Univ, Sch Comp Sci, Beijing, Peoples R China.; Jin, Z (corresponding author), Peking Univ, MoE, Key Lab High Confidence Software Technol, Beijing, Peoples R China.
EM zejunwang@pku.edu.cn; fangliu@buaa.edu.cn; haoyiyang@nnthink.com;
   zhijin@pku.edu.cn
RI TIAN, YI/KHU-9704-2024; Chen, YiJun/KFS-9282-2024; Wang,
   Zejun/KBB-8454-2024; Yin, Jing/KDO-6274-2024; wang, shuo/KCL-3379-2024;
   chen, huan/KEC-2019-2024; li, Shang/KHU-3233-2024; Wang,
   zhenhua/KFA-8731-2024; Li, Kunpeng/KFS-6306-2024; Yang,
   Ning/KHD-1133-2024
CR Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Alon U., 2020, INT C MACHINE LEARNI, P245
   Bakhtin A., 2018, ARXIV
   Bhoopchand A., 2016, arXiv
   Brown P. F., 1992, Computational Linguistics, V18, P31
   Bruch M, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P213, DOI 10.1145/1595696.1595728
   Chen C, 2004, U CALIF BERKELEY
   Chen SF, 1999, COMPUT SPEECH LANG, V13, P359, DOI 10.1006/csla.1999.0128
   Ciniselli M, 2021, IEEE WORK CONF MIN S, P108, DOI 10.1109/MSR52588.2021.00024
   CORTES C, 1995, MACH LEARN, V20, P273, DOI 10.1007/BF00994018
   Dai ZH, 2019, Arxiv, DOI [arXiv:1901.02860, DOI 10.48550/ARXIV.1901.02860]
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   Fortunato O., 2015, arXiv
   Gage P., 1994, C Users Journal, V12, P23
   Hellendoorn VJ, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P763, DOI 10.1145/3106237.3106290
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Hou Daqing, 2010, P 2 INT WORKSHOP REC, P26
   Kamath A., 2020, P 58 ANN M ASS COMPU, P5684, DOI 10.18653/v1/2020.acl-main.503
   Karampatsis RM, 2020, PROC INT CONF SOFTW, P1073, DOI 10.1145/3377811.3380342
   Dam HK, 2016, Arxiv, DOI arXiv:1608.02715
   Kim S, 2021, Arxiv, DOI arXiv:2003.13848
   Kim S, 2021, PROC INT CONF SOFTW, P150, DOI 10.1109/ICSE43902.2021.00026
   Kuang K., 2020, AAAI CONF ARTIF INTE, phttps
   Li J, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4159
   Liu Chang., 2017, Neural code completion
   Liu F, 2020, IEEE INT CONF AUTOM, P473, DOI 10.1145/3324884.3416591
   Liu F, 2020, INT C PROGRAM COMPRE, P37, DOI 10.1145/3387904.3389261
   Nguyen T.T., 2013, P 2013 9 JOINT M FDN, P532, DOI DOI 10.1145/2491411.2491458
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Radford A., 2019, LANGUAGE MODELS ARE
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Robbes R, 2010, AUTOMAT SOFTW ENG, V17, P181, DOI 10.1007/s10515-010-0064-x
   Roos P, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P757, DOI 10.1109/ICSE.2015.240
   Saenko K, 2010, LECT NOTES COMPUT SC, V6314, P213, DOI 10.1007/978-3-642-15561-1_16
   Salton G., 2017, Proceedings of the Eighth International Joint Conference on Natural Language Processing (Volume 1: Long Papers), V1, P441
   Tin Kam Ho, 1995, Proceedings of the Third International Conference on Document Analysis and Recognition, P278, DOI 10.1109/ICDAR.1995.598994
   Tu ZP, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P269, DOI 10.1145/2635868.2635875
   Barone AVM, 2017, Arxiv, DOI arXiv:1707.09920
   Vashishth S, 2019, PR MACH LEARN RES, V89
   Vaswani A, 2023, Arxiv, DOI [arXiv:1706.03762, DOI 10.48550/ARXIV.1706.03762, 10.48550/arXiv.1706.03762]
   Wang Jindong, 2021, P 30 INT JOINT C ART, P4627, DOI DOI 10.24963/IJCAI.2021/628
   Wang YL, 2021, AAAI CONF ARTIF INTE, V35, P14015
   Yang K, 2022, J SOFTW-EVOL PROC, V34, DOI 10.1002/smr.2414
   Yang X, 2007, INT J PATTERN RECOGN, V21, P961, DOI 10.1142/S0218001407005703
NR 45
TC 1
Z9 1
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
AR 11
DI 10.1007/s10515-023-00376-y
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9P1BN
UT WOS:000944025600001
DA 2024-07-18
ER

PT J
AU Zhi, C
   Deng, SG
   Han, JX
   Yin, JW
AF Zhi, Chen
   Deng, Shuiguang
   Han, Junxiao
   Yin, Jianwei
TI Towards automatic detection and prioritization of pre-logging overhead:
   a case study of hadoop ecosystem
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Logging; Logging overhead; Pre-logging overhead; Pre-logging statements
AB The pre-logging overhead refers to the overhead produced by pre-logging statements (PLS), which are used to construct the parameters of logging calls. In practice, these logging-related statements are usually guarded by conditional statements, known as logging guards, to ensure that they are only executed when necessary (e.g., at the debugging phase). However, developers occasionally forget to add logging guards to costly PLS, resulting in missing logging guards (MLG) issues, which can have a significant impact on performance, particularly for high-throughput software, and lead to critical performance issues. In this paper, (1) we conduct the first empirical study of 137 commits addressing MLG issues in five popular open-source software of the Hadoop ecosystem. Based on the results, we reveal five findings of the current practice of logging guards. (2) We devise an accurate algorithm to detect PLSs (over 95% in precision and recall) and find out 16 problematic partially guarded logging calls (10 of them are confirmed and fixed by developers). (3) We investigate two metric-based ranking approaches using six software metrics to prioritize PLSs based on their impact on performance. We discover that the execution frequency of PLSs achieves the best performance, and combining multiple software metrics can improve performance (7.8% on average).
C1 [Zhi, Chen; Deng, Shuiguang] Zhejiang Univ & Alibaba Zhejiang Univ Joint Res I, Hangzhou, Peoples R China.
   [Han, Junxiao] Zhejiang Univ City Coll, Hangzhou, Peoples R China.
   [Yin, Jianwei] Zhejiang Univ, Hangzhou, Peoples R China.
C3 Hangzhou City University; Zhejiang University
RP Deng, SG (corresponding author), Zhejiang Univ & Alibaba Zhejiang Univ Joint Res I, Hangzhou, Peoples R China.
EM zjuzhichen@zju.edu.cn; dengsg@zju.edu.cn; junxiaohan@zju.edu.cn;
   zjuyjw@zju.edu.cn
RI Zhi, Chen/JRX-3166-2023
OI Zhi, Chen/0000-0002-1273-2992
FU National Science Foundation of China [U20A20173, 62125206]; Natural
   Science Foundation of Zhejiang Province [LR18F020003]; Alibaba-Zhejiang
   University Joint Research Institute of Frontier Technologies
FX This work was partially supported by the National Science Foundation of
   China (No. U20A20173 and No. 62125206), Natural Science Foundation of
   Zhejiang Province (No. LR18F020003), and Alibaba-Zhejiang University
   Joint Research Institute of Frontier Technologies.
CR Arnold M, 2001, ACM SIGPLAN NOTICES, V36, P168, DOI 10.1145/381694.378832
   Burges C., 2005, ICML, P89
   Busjaeger B, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P975, DOI 10.1145/2950290.2983954
   Cai H., 2017, P 2017 AS PAC S INT
   Cao Z., 2007, P 24 INT C MACHINE L, P129, DOI DOI 10.1145/1273496.1273513
   Chen BY, 2020, PROC INT CONF SOFTW, P397, DOI 10.1145/3377811.3380408
   Chen BY, 2017, EMPIR SOFTW ENG, V22, P330, DOI 10.1007/s10664-016-9429-5
   Ding Rui, 2015, P 2015 USENIX TECHN, P139
   Ding ZS, 2020, PROC INT CONF SOFTW, P1435, DOI 10.1145/3377811.3380351
   Freund Y, 2004, J MACH LEARN RES, V4, P933, DOI 10.1162/1532443041827916
   Friedman JH, 2001, ANN STAT, V29, P1189, DOI 10.1214/aos/1013203451
   Fu Q, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P24, DOI 10.1145/2591062.2591175
   Gay D, 2000, LECT NOTES COMPUT SC, V1781, P82
   Hassani M, 2018, EMPIR SOFTW ENG, V23, P3248, DOI 10.1007/s10664-018-9603-z
   He PJ, 2018, IEEE INT CONF AUTOM, P178, DOI 10.1145/3238147.3238193
   Jia ZY, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P61, DOI 10.1109/SANER.2018.8330197
   Johnson B, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P672, DOI 10.1109/ICSE.2013.6606613
   Lam P., 2011, P CET US COMP INFR W, V15, P35
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Li H, 2017, EMPIR SOFTW ENG, V22, P1684, DOI 10.1007/s10664-016-9456-2
   Li ZH, 2021, PROC INT CONF SOFTW, P1461, DOI 10.1109/ICSE43902.2021.00131
   Li ZH, 2020, IEEE INT CONF AUTOM, P361, DOI 10.1145/3324884.3416636
   Li ZH, 2019, PROC INT CONF SOFTW, P152, DOI 10.1109/ICSE.2019.00032
   Liu ZX, 2021, IEEE T SOFTWARE ENG, V47, P2012, DOI 10.1109/TSE.2019.2941943
   Lyu YJ, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P310, DOI 10.1145/3213846.3213865
   Mizouchi T, 2019, INT C PROGRAM COMPRE, P135, DOI 10.1109/ICPC.2019.00029
   Mostafa S, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P23, DOI 10.1145/3092703.3092725
   Nistor A, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P902, DOI 10.1109/ICSE.2015.100
   Pecchia A, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P169, DOI 10.1109/ICSE.2015.145
   Qian J, 2009, IEEE INT WORK C SO, P35, DOI 10.1109/SCAM.2009.13
   Rong GP, 2020, PROC IEEE INT CONF S, P12, DOI 10.1109/ICSME46990.2020.00012
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Snelting G, 2006, ACM T SOFTW ENG METH, V15, P410, DOI 10.1145/1178625.1178628
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Yang N, 2021, 2021 IEEE/ACM 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2021), P61, DOI 10.1109/ICSE-SEIP52600.2021.00015
   Yuan D, 2012, PROC INT CONF SOFTW, P102, DOI 10.1109/ICSE.2012.6227202
   Zhao GL, 2019, EMPIR SOFTW ENG, V24, P2140, DOI 10.1007/s10664-019-09696-8
   Zhao X, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P565, DOI 10.1145/3132747.3132778
   Zhi C, 2019, PROC IEEE INT CONF S, P459, DOI 10.1109/ICSME.2019.00079
   Zhu JM, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P415, DOI 10.1109/ICSE.2015.60
NR 40
TC 3
Z9 3
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 11
DI 10.1007/s10515-021-00317-7
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY1WT
UT WOS:000736772300001
DA 2024-07-18
ER

PT J
AU Shahbazi, A
   Panahandeh, M
   Miller, J
AF Shahbazi, Ali
   Panahandeh, Mahsa
   Miller, James
TI Black-box tree test case generation through diversity
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automated test case generation; Black-box testing; Random testing;
   Structured input; Trees; Software testing; Tree distance; Tree test
   cases
ID PROPORTIONAL SAMPLING STRATEGY; GENETIC ALGORITHM; SOFTWARE; DISTANCE;
   POWER
AB To identify defects and security risks in many real-world applications structured test cases, including test cases structured as trees are required. A simple approach is to generate random trees as test cases [random testing (RT)]; however, the RT approach is not very effective. In this work, we investigate and extend the black-box tree test case generation approaches. We introduce a novel model to produce superior test case generation based around the idea of measuring the diversity of a tree test set. This initial approach is further extended by adding a second model which describes the distribution of tree sizes. Both models are realized via a multi-objective optimization algorithm. An empirical study is performed with four real-world programs indicating that the generated tree test cases outperform test cases generated by other methods.
C1 [Shahbazi, Ali; Panahandeh, Mahsa; Miller, James] Univ Alberta, Dept Elect & Comp Engn, Edmonton, AB, Canada.
C3 University of Alberta
RP Miller, J (corresponding author), Univ Alberta, Dept Elect & Comp Engn, Edmonton, AB, Canada.
EM ashahbazi@ualberta.ca; panahand@ualberta.ca; jimm@ualberta.ca
OI Panahandeh, Mahsa/0000-0002-6369-8982
FU NSERC (National Science and Engineering Research Council of Canada)
FX This work is supported by the NSERC (National Science and Engineering
   Research Council of Canada).
CR Ali S, 2010, IEEE T SOFTWARE ENG, V36, P742, DOI 10.1109/TSE.2009.52
   AMMANN PE, 1988, IEEE T COMPUT, V37, P418, DOI 10.1109/12.2185
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   [Anonymous], 2005, SIGMOD, DOI DOI 10.1145/1066157.1066243
   [Anonymous], 2007, 2 INT WORKSH AUT SOF
   Arcuri Andrea., 2011, ISSTA
   Bai XY, 2005, SOSE 2005: IEEE INTERNATIONAL WORKSHOP ON SERVICE-ORIENTED SYSTEM ENGINEERING, P207
   Barbosa Denilson, 2002, P 5 INT WORKSH WEB D, P49
   BAROUDI JJ, 1989, MIS QUART, V13, P87, DOI 10.2307/248704
   Bartolini C, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P326, DOI 10.1109/ICST.2009.28
   Benford F., 1938, P AM PHILOS SOC, V78, P551, DOI DOI 10.2307/984802
   Berger A, 2011, PROBAB SURV, V8, P1, DOI 10.1214/11-PS175
   Berger A, 2011, MATH INTELL, V33, P85, DOI 10.1007/s00283-010-9182-3
   Bertolino A, 2007, PROC INT CONF SOFTW, P53, DOI 10.1109/ICSECOMPANION.2007.72
   Bertolino A, 2007, LECT NOTES COMPUT SC, V4401, P114
   BISHOP PG, 1993, FTCS-23 - TWENTY-THIRD INTERNATIONAL SYMPOSIUM ON FAULT-TOLERANT COMPUTING : DIGEST OF PAPERS, P98, DOI 10.1109/FTCS.1993.627312
   Budd T.A., 1979, Mutation Analysis
   Buttler D., 2004, 5 INT C INT COMP
   Chan FT, 1996, INFORM SOFTWARE TECH, V38, P775, DOI 10.1016/0950-5849(96)01103-2
   Chan KP, 2002, LECT NOTES COMPUT SC, V2349, P321
   Chen T. Y., 2005, P 9 AS COMP SCI C AD, P3156
   Chen TY, 2006, J SYST SOFTWARE, V79, P591, DOI 10.1016/j.jss.2005.05.029
   Chen TY, 2013, IEEE T RELIAB, V62, P226, DOI 10.1109/TR.2013.2240898
   Chen TY, 2001, J SYST SOFTWARE, V58, P65, DOI 10.1016/S0164-1212(01)00028-0
   Ciupa I, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P71, DOI 10.1145/1368088.1368099
   COHEN J, 1992, PSYCHOL BULL, V112, P155, DOI 10.1037/0033-2909.112.1.155
   Cohen J., 1988, STAT POWER ANAL BEHA
   Connor R, 2011, INFORM SYST, V36, P748, DOI 10.1016/j.is.2010.12.003
   De Jong K. A., 1991, Parallel Problem Solving from Nature. 1st Workshop, PPSN 1 Proceedings, P38, DOI 10.1007/BFb0029729
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Downey AB, 2001, NINTH INTERNATIONAL SYMPOSIUM ON MODELING, ANALYSIS AND SIMULATION OF COMPUTER AND TELECOMMUNICATION SYSTEMS, PROCEEDINGS, P361, DOI 10.1145/384268.378824
   DURAN JW, 1984, IEEE T SOFTWARE ENG, V10, P438, DOI 10.1109/TSE.1984.5010257
   Durtschi C., 2004, J FORENSIC ACCOUNTIN, V5, P17
   Feldt R, 2013, PROC INT SYMP SOFTW, P350, DOI 10.1109/ISSRE.2013.6698888
   FINELLI GB, 1991, RELIAB ENG SYST SAFE, V32, P155, DOI 10.1016/0951-8320(91)90052-9
   Forrester JE, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE 4TH UNSENIX WINDOWS SYSTEMS SYMPOSIUM, P59
   Frankl PG, 1997, J SYST SOFTWARE, V38, P235, DOI 10.1016/S0164-1212(96)00154-9
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Ganesh Vijay, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P1, DOI 10.1007/978-3-642-22110-1_1
   Geyer CL, 2004, COMMUN STAT-SIMUL C, V33, P229, DOI 10.1081/SAC-120028442
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P., 2007, P 2 INT WORKSHOP RAN, P1, DOI [DOI 10.1145/1292414.1292416, 10.1145/1292414.1292416.]
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Havrikov N, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P719, DOI 10.1145/2635868.2661666
   HILL TP, 1995, AM MATH MON, V102, P322, DOI 10.2307/2974952
   JIANG T, 1995, THEOR COMPUT SCI, V143, P137, DOI 10.1016/0304-3975(95)80015-8
   JUST R, 2014, INT S FDN SOFTW ENG
   Lee SC, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P200, DOI 10.1109/ISSRE.2001.989474
   LIPNER S., 2005, TRUSTWORTHY COMPUTIN
   Lv JP, 2014, IEEE T SYST MAN CY-S, V44, P1649, DOI 10.1109/TSMC.2014.2318019
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Mayer J., 2006, P 5 ACM IEEE INT S E, P105
   Müller-Molina AJ, 2009, LECT NOTES ARTIF INT, V5433, P87
   Newcombe S, 1881, Am J Math, V4, P39, DOI [10.2307/2369148, DOI 10.2307/2369148]
   Nierman A., 2002, Proceedings of the 5th International Workshop on the Web and Databases (WebDB 2002), Madison, Wisconsin, USA, P61
   Nigrini MJ, 1997, AUDITING-J PRACT TH, V16, P52
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Pacheco Carlos., 2008, International Symposium on Software Testing and Analysis (ISSTA), P87
   RAIMI RA, 1976, AM MATH MON, V83, P521, DOI 10.2307/2319349
   Santelices Raul, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P429, DOI 10.1109/ICST.2010.29
   Santelices R.A., 2010, P 19 INT S SOFTW TES, P195, DOI [DOI 10.1145/1831708.1831733, 10.1145/1831708.1831733]
   Scheemaecke M. D., 2001, NANOXML
   Schneckenburger C., 2007, P 4 INT WORKSH SOFTW, P90
   SELKOW SM, 1977, INFORM PROCESS LETT, V6, P184, DOI 10.1016/0020-0190(77)90064-3
   Shahbazi A, 2016, IEEE T SOFTWARE ENG, V42, P361, DOI 10.1109/TSE.2015.2487958
   Shahbazi A, 2014, IEEE T KNOWL DATA EN, V26, P864, DOI 10.1109/TKDE.2013.53
   Shahbazi A, 2013, IEEE T SOFTWARE ENG, V39, P163, DOI 10.1109/TSE.2012.18
   Sneed HM, 2006, IEEE INTL SYMPOS WEB, P14
   SPEARS WM, 1995, COM ADAP SY, P367
   StAX, 2006, HOM OR STAX
   STEPHENS MA, 1970, J ROY STAT SOC B, V32, P115
   TAI KC, 1979, J ACM, V26, P422, DOI 10.1145/322139.322143
   Tanaka E., 1988, International Journal of Pattern Recognition and Artificial Intelligence, V2, P221, DOI 10.1142/S0218001488000157
   Tappenden A, 2005, AGILE 2005, Proceedings, P29, DOI 10.1109/ADC.2005.11
   Tappenden AF, 2009, IEEE T RELIAB, V58, P619, DOI 10.1109/TR.2009.2034288
   Valiente G, 2001, EIGHTH SYMPOSIUM ON STRING PROCESSING AND INFORMATION RETRIEVAL, PROCEEDINGS, P212, DOI 10.1109/SPIRE.2001.989761
   Vanderveen P, 2014, PROC IEEE INT CONF S, P516, DOI 10.1109/ICSME.2014.85
   Wang JTL, 2001, PATTERN RECOGN, V34, P127, DOI 10.1016/S0031-3203(99)00199-5
   WHITE LJ, 1980, IEEE T SOFTWARE ENG, V6, P247, DOI 10.1109/TSE.1980.234486
   WHITLEY D, 1994, STAT COMPUT, V4, P65, DOI 10.1007/BF00175354
   Xu Jeff Offutt andWuzhi, 2004, SIGSOFT Softw. Eng. Notes, V29, P1, DOI [10.1145/1022494.1022529, DOI 10.1145/1022494.1022529]
   Xu WZ, 2005, 16TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P257, DOI 10.1109/ISSRE.2005.44
   Yoshikawa T, 2003, THIRD INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P20, DOI 10.1109/QSIC.2003.1319081
   ZHANG KZ, 1989, SIAM J COMPUT, V18, P1245, DOI 10.1137/0218082
NR 86
TC 1
Z9 1
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2018
VL 25
IS 3
BP 531
EP 568
DI 10.1007/s10515-018-0232-y
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP2SY
UT WOS:000440687600004
DA 2024-07-18
ER

PT J
AU Hofer, B
   Perez, A
   Abreu, R
   Wotawa, F
AF Hofer, Birgit
   Perez, Alexandre
   Abreu, Rui
   Wotawa, Franz
TI On the empirical evaluation of similarity coefficients for spreadsheets
   fault localization
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE End-user debugging; Spreadsheets; Similarity coefficients;
   Spectrum-based fault localization
ID ASSOCIATION
AB Spreadsheets are by far the most prominent example of end-user programs of ample size and substantial structural complexity. They are usually not thoroughly tested so they often contain faults. Debugging spreadsheets is a hard task due to the size and structure, which is usually not directly visible to the user, i.e., the functions are hidden and only the computed values are presented. A way to locate faulty cells in spreadsheets is by adapting software debugging approaches for traditional procedural or object-oriented programming languages. One of such approaches is spectrum-based fault localization (SFL). In this paper, we study the impact of different similarity coefficients on the accuracy of SFL applied to the spreadsheet domain. Our empirical evaluation shows that three of the 42 studied coefficients (Ochiai, Jaccard and Sorensen-Dice) require less effort by the user while inspecting the diagnostic report, and can also be used interchangeably without a loss of accuracy. In addition, we illustrate the influence of the number of correct and incorrect output cells on the diagnostic report.
C1 [Hofer, Birgit; Wotawa, Franz] Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
   [Perez, Alexandre; Abreu, Rui] Univ Porto, Fac Engn, Dept Informat Engn, P-4100 Oporto, Portugal.
C3 Graz University of Technology; Universidade do Porto
RP Hofer, B (corresponding author), Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
EM bhofer@ist.tugraz.at; alexandre.perez@fe.up.pt; rui@computer.org;
   wotawa@ist.tugraz.at
RI Abreu, Rui/K-7048-2019
OI Abreu, Rui/0000-0003-3734-3157; Hofer, Birgit/0000-0001-5144-059X;
   Wotawa, Franz/0000-0002-0462-2283; Perez, Alexandre/0000-0002-5809-0550
FU Foundation for Science and Technology (FCT), of the Portuguese Ministry
   of Science, Technology, and Higher Education (MCTES)
   [PTDC/EIA-CCO/108613/2008]; competence network Softnet Austria II (COMET
   K-Projekt) - Austrian Federal Ministry of Economy, Family and Youth
   (bmwfj); province of Styria; Steirische
   Wirtschaftsforderungsgesellschaft mbH. (SFG); city of Vienna in terms of
   the center for innovation and technology (ZIT); Fundação para a Ciência
   e a Tecnologia [PTDC/EIA-CCO/108613/2008] Funding Source: FCT
FX This work was supported by the Foundation for Science and Technology
   (FCT), of the Portuguese Ministry of Science, Technology, and Higher
   Education (MCTES), under Project PTDC/EIA-CCO/108613/2008, and the
   competence network Softnet Austria II (www.soft-net.at, COMET K-Projekt)
   funded by the Austrian Federal Ministry of Economy, Family and Youth
   (bmwfj), the province of Styria, the Steirische
   Wirtschaftsforderungsgesellschaft mbH. (SFG), and the city of Vienna in
   terms of the center for innovation and technology (ZIT).
CR Abraham R, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P37, DOI 10.1109/VLHCC.2005.42
   Abraham R, 2007, J VISUAL LANG COMPUT, V18, P71, DOI 10.1016/j.jvlc.2006.06.001
   Abraham R, 2007, PROC INT CONF SOFTW, P251
   Abraham R, 2006, IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P43
   Abraham R, 2009, IEEE T SOFTWARE ENG, V35, P94, DOI 10.1109/TSE.2008.73
   Abreu R, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P89, DOI 10.1109/TAIC.PART.2007.13
   Abreu R, 2006, 12TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P39
   Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   Aggarwal C. C., 1998, Proceedings of the Seventeenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems. PODS 1998, P18, DOI 10.1145/275487.275490
   Agrawal R., P 20 INT C VERY LARG
   Agresti A.., 2019, INTRO CATEGORICAL DA
   [Anonymous], 1957, B JPN SOC SCI FISH
   [Anonymous], COMP RES REP CORR
   [Anonymous], 2013, IJCAI
   [Anonymous], 2001, ADAP COMP MACH LEARN
   [Anonymous], COMP RES REP CORR
   [Anonymous], COMMUNICATION
   [Anonymous], COMP RES REP CORR
   [Anonymous], 1996, Advances in Knowledge Discovery and Data Mining
   [Anonymous], 2010, 9 JOINT C KNOWL BAS
   [Anonymous], 1975, MATH BIOSCI, DOI 10.1016/0025-5564(75)90047-4
   [Anonymous], 1973, CLUSTER ANAL APPL
   [Anonymous], P 15 IB AM C SOFTW E
   [Anonymous], 2003, SOFTVIS 03, DOI DOI 10.1145/774833.774851
   [Anonymous], P EUSPRIG 2003 DUBL
   Brglez F., 1985, INT S CIRCUITS SYSTE, P663
   Brin S., 1997, SIGMOD Record, V26, P255, DOI [10.1145/253262.253327, 10.1145/253262.253325]
   Burnett M, 2003, PROC INT CONF SOFTW, P93, DOI 10.1109/ICSE.2003.1201191
   Campos J, 2012, IEEE INT CONF AUTOM, P378, DOI 10.1145/2351676.2351752
   Chadwick D, 2001, SOFTWARE QUAL J, V9, P133, DOI 10.1023/A:1016631003750
   Cheng H, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P141
   Clark P, 1991, Proceedings of the Fifth European Working Session on Learning, P151, DOI DOI 10.1007/BFB0017011
   Coblenz MJ, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P314, DOI 10.1109/VLHCC.2005.67
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Cunha J, 2012, PROC INT CONF SOFTW, P1395, DOI 10.1109/ICSE.2012.6227239
   DICE LR, 1945, ECOLOGY, V26, P297, DOI 10.2307/1932409
   Fisher M, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P141, DOI 10.1109/ICSE.2002.1007963
   Fisher Marc., 2005, P 1 WORKSHOP END USE, P47
   Geng LQ, 2006, ACM COMPUT SURV, V38, DOI 10.1145/1132960.1132963
   GOODMAN LA, 1954, J AM STAT ASSOC, V49, P732, DOI 10.2307/2281536
   Healey J.F., 1993, STAT TOOL SOCIAL RES
   Hermans F, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P292, DOI 10.1109/ICSE.2013.6606575
   Hermans F, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P409, DOI 10.1109/ICSM.2012.6405300
   Hermans F, 2012, PROC INT CONF SOFTW, P441, DOI 10.1109/ICSE.2012.6227171
   Hermans F, 2010, LECT NOTES COMPUT SC, V6183, P52, DOI 10.1007/978-3-642-14107-2_4
   Hofer B, 2013, LECT NOTES COMPUT SC, V7793, P68, DOI 10.1007/978-3-642-37057-1_6
   James M., 1967, PROC BERKELEY S MATH, V1, P281, DOI DOI 10.1007/S11665-016-2173-6
   Jannach D, 2013, ENASE: PROCEEDINGS OF THE 8TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, P117, DOI 10.5220/0004410601170124
   Janssem T, 2009, IEEE INT CONF AUTOM, P662, DOI 10.1109/ASE.2009.27
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Ko AJ, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922658
   Lo D., 2010, Software Maintenance (ICSM), 2010 IEEE International Confer- ence on, P1, DOI DOI 10.1109/ICSM.2010.5609542
   Mittermeir R, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P221, DOI 10.1109/WCRE.2002.1173080
   Ohsaki M, 2004, LECT NOTES ARTIF INT, V3202, P362
   Piatetsky-Shapiro G., 1991, Knowledge discovery in databases, P229
   ROGERS DJ, 1960, SCIENCE, V132, P1115, DOI 10.1126/science.132.3434.1115
   Rothermel K. J., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P230, DOI 10.1109/ICSE.2000.870414
   SMYTH P, 1992, IEEE T KNOWL DATA EN, V4, P301, DOI 10.1109/69.149926
   SOKAL ROBERT R., 1958, UNIV KANSAS SCI BULL, V38, P1409
   Tan P., 2002, Proceedings of the Eighth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD'02, P32, DOI DOI 10.1145/775047.775053
   Tikir M. M., 2002, Software Engineering Notes, V27, P86, DOI 10.1145/566171.566186
   Wang XM, 2009, PROC INT CONF SOFTW, P45, DOI 10.1109/ICSE.2009.5070507
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Xu XF, 2011, INT J SOFTW ENG KNOW, V21, P803, DOI 10.1142/S0218194011005505
NR 64
TC 23
Z9 28
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2015
VL 22
IS 1
SI SI
BP 47
EP 74
DI 10.1007/s10515-014-0145-3
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE0EH
UT WOS:000351476800003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hristoskova, A
   Volckaert, B
   De Turck, F
AF Hristoskova, Anna
   Volckaert, Bruno
   De Turck, Filip
TI The WTE plus framework: automated construction and runtime adaptation of
   service mashups
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Service mashups; Semantic reasoning; HTN planning; Runtime adaptation;
   Quality of Service (QoS)
ID SEMANTIC WEB; DYNAMIC COMPOSITION; ORCHESTRATION; LANGUAGES
AB An emerging software engineering methodology is the combination of functionality and content from existing software components into service mashups, creating greater value than the sum of the individual participating building blocks. For businesses, using catalogues of reusable services means agile development of new applications using open communication standards including the Simple Object Access Protocol (SOAP) for transmitting data, and the Web Services Description Language (WSDL) for defining services. The result is faster adaptation to the changing business environment creating value at reduced development time and cost while increasing revenues.
   This manuscript presents the developed service management framework and evaluation results of the WTE+ (Web2.0/Telco2.0/Enterprise2.0 with semantics) research project. Main goal is supporting application developers with the automatic construction and runtime reconfiguration of custom-made service mashups at a minimum performance cost without the need for constant IT intervention. Semantically enriched services are automatically combined into custom-made service mashups by the designed planning algorithms. These planning techniques are optimized with late binding and runtime adaptation to changing user-context taking fully into account the quality of service parameters of the available components which are provided at design time and updated at runtime. In addition, recovery mechanisms are provided in case of failed services and/or resources. During mashup execution, unavailable services are dynamically replaced by equivalent ones or alternative service mashups keeping in mind the current execution state.
   The developed planning algorithms are put through extensive performance and scalability experiments for a typical e-commerce scenario, in which e-shop services such as product payment and delivery are on-the-fly composed to an e-shop application. The results show that an automatic construction of a new application out of existing services can take up between 5 to 43 seconds for 500 services while runtime adaptation takes up to 5 seconds on average depending on the availability of equivalent services.
C1 [Hristoskova, Anna; Volckaert, Bruno; De Turck, Filip] Ghent Univ IBBT, Dept Informat Technol, B-9050 Ghent, Belgium.
C3 Ghent University
RP Hristoskova, A (corresponding author), Ghent Univ IBBT, Dept Informat Technol, Gaston Crommenlaan 8 Bus 201, B-9050 Ghent, Belgium.
EM Anna.Hristoskova@intec.UGent.be; Bruno.Volckaert@intec.UGent.be;
   Filip.DeTurck@intec.UGent.be
RI Volckaert, Bruno/G-6288-2015
OI Volckaert, Bruno/0000-0003-0575-5894; De Turck,
   Filip/0000-0003-4824-1199
FU Special Research Fund of Ghent University (BOF); WTE+, an IBBT
   (Interdisciplanary Institute for BroadBand Technology) GBO (Joint Basic
   Research) project
FX Anna Hristoskova would like to thank the Special Research Fund of Ghent
   University (BOF) for financial support through her PhD grant. This work
   is partly funded by WTE+ (WTE+ 2008-2010), an IBBT (Interdisciplanary
   Institute for BroadBand Technology) GBO (Joint Basic Research) project
   on the definition of an open architecture that allows the creation,
   sharing and composition of service mashups, seamlessly combining
   functionality available on the Web, the enterprise or the telecom
   operator.
CR Agre G, 2007, CYBERN INF TECHNOL, V7, P45
   Akkiraju R., 2005, WSDL S WEB SERVICE S
   [Anonymous], 2005, Proceedings of the 1st International Association for the Advancement of Artificial Intelligence (AAAI) Fall Symposium on Agents and the Semantic Web, Technical Report FS-05-01
   [Anonymous], 2004, Web Semantics: Science, Services and Agents on the World Wide Web
   [Anonymous], 2004, OWL S SEMANTIC MARKU
   Ardagna B, 2007, IEEE SOFTWARE, V24, P39, DOI 10.1109/MS.2007.174
   Aschoff R. R., 2011, INT C SERV OR COMP I
   Avellino G, 2008, LECT NOTES COMPUT SC, V5377, P266, DOI 10.1007/978-3-540-89897-9_23
   Baresi L, 2010, LECT NOTES COMPUT SC, V6481, P112, DOI 10.1007/978-3-642-17694-4_10
   Baresi L, 2007, SERV ORIENTED COMPUT, V1, P75, DOI 10.1007/s11761-007-0004-1
   Battle S., 2005, SWSO SEMANTIC WEB SE
   Beisiegel M., 2005, Service Component Architecture - Building Systems using Service Oriented Architecture
   Berbner R, 2006, ICWS 2006: IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P72
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Bertoli P, 2010, ARTIF INTELL, V174, P316, DOI 10.1016/j.artint.2009.12.002
   Brogi A., 2004, Electronic Notes in Theoretical Computer Science, V105, P73, DOI DOI 10.1016/J.ENTCS.2004.05.007
   Cândido G, 2009, ENG APPL ARTIF INTEL, V22, P939, DOI 10.1016/j.engappai.2008.10.020
   Canfora G, 2005, 2005 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, PROCEEDINGS, P121
   Dai Y, 2009, J COMPUT SCI TECH-CH, V24, P250, DOI 10.1007/s11390-009-9221-8
   Daniel F, 2010, LECT NOTES COMPUT SC, V6336, P310, DOI 10.1007/978-3-642-15618-2_22
   Daniel F, 2009, LECT NOTES COMPUT SC, V5829, P428, DOI 10.1007/978-3-642-04840-1_32
   Dean M., 2004, SWRL: a semantic web Rule Language combining OWL and RuleML
   Di Nitto E, 2008, AUTOMAT SOFTW ENG, V15, P313, DOI 10.1007/s10515-008-0032-x
   Fujii K, 2006, INT J COOP INF SYST, V15, P293, DOI 10.1142/S0218843006001372
   Gamha Youssef, 2007, 2007 IEEE Congress on Services, P49, DOI 10.1109/SERVICES.2007.11
   Gubala T., 2006, E SCI GRID COMPUTING, P12
   Guinea S., 2011, INT C SERV OR COMP I
   Hamadi R., 2003, Proceedings of the 14th Australasian database conference, V17, P191
   Hausheer D, 2009, TOWARDS THE FUTURE INTERNET: A EUROPEAN RESEARCH PERSPECTIVE, P1, DOI 10.3233/978-1-60750-007-0-1
   Hawke S., 2011, SEMANTIC WEB PROVIDI
   Hristoskova A, 2010, COMPUT METH PROG BIO, V100, P248, DOI 10.1016/j.cmpb.2010.03.019
   Hristoskova A, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON INTERNET AND WEB APPLICATIONS AND SERVICES, P377, DOI 10.1109/ICIW.2009.62
   Klusch M, 2009, J WEB SEMANT, V7, P121, DOI 10.1016/j.websem.2008.10.001
   Lara R, 2004, LECT NOTES COMPUT SC, V3250, P254
   Lécué F, 2009, INT J SEMANT COMPUT, V3, P499, DOI 10.1142/S1793351X09000896
   Leitner Philipp, 2010, 2010 IEEE International Conference on Web Services (ICWS), P369, DOI 10.1109/ICWS.2010.21
   Lin KJ, 2010, SERV ORIENTED COMPUT, V4, P157, DOI 10.1007/s11761-010-0063-6
   Liu JM, 2004, PROCEEDINGS OF THE IEEE INTERNATIONAL CONFERENCE ON E-COMMERCE TECHNOLOGY FOR DYNAMIC E-BUSINESS, P234, DOI 10.1145/984622.984657
   Metzger A., 2010, P 2010 ICSE WORKSHOP, P20
   Miyagi M, 2004, NOMS 2004: IEEE/IFIP NETWORK OPERATIONS AND MANAGMENT SYMPOSIUM, P905, DOI 10.1109/NOMS.2004.1317792
   Moller T, 2010, OWL S API
   Papazoglou MP, 2008, INT J COOP INF SYST, V17, P223, DOI 10.1142/S0218843008001816
   Peltz C, 2003, COMPUTER, V36, P46, DOI 10.1109/MC.2003.1236471
   Pfeffer H, 2009, INT J ADV SOFTW, V2, P63
   Pietschmann S., 2009, INT J ADV INTERNET T, V2, P277
   Pistore M., 2005, INT JOINT C ART INT
   Prete L. D., 2008, P 7 WORKSH REFL AD M, P5
   Roman D, 2005, APPL ONTOL, V1, P77
   Sirin E, 2004, IEEE INTELL SYST, V19, P42, DOI 10.1109/MIS.2004.27
   Taivalsaari Antero, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering - Workshops, P25, DOI 10.1109/ASEW.2008.4686307
   Tosi Davide, 2009, International Journal of Autonomic Computing, V1, P58, DOI 10.1504/IJAC.2009.024500
   Tsalgatidou A, 2006, SIGMOD REC, V35, P22, DOI 10.1145/1147376.1147380
   Vall'ee M, 2005, P 1 EUR YOUNG RES WO
   van der Aalst WMP, 2003, EUROMICRO CONF PROC, P298
   Verma K, 2007, IEEE INTERNET COMPUT, V11, P83, DOI 10.1109/MIC.2007.48
   Yelmo J. C., 2009, LECT NOTES COMPUTER, V4749, P342
   Zhang SH, 2005, ITCC 2005: International Conference on Information Technology: Coding and Computing, Vol 2, P214
   Zisman Andrea, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P158, DOI 10.1109/ASE.2008.26
NR 58
TC 8
Z9 8
U1 0
U2 122
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2013
VL 20
IS 4
BP 499
EP 542
DI 10.1007/s10515-012-0105-8
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200MY
UT WOS:000323074400002
DA 2024-07-18
ER

PT J
AU He, ZM
   Shu, FD
   Yang, Y
   Li, MS
   Wang, Q
AF He, Zhimin
   Shu, Fengdi
   Yang, Ye
   Li, Mingshu
   Wang, Qing
TI An investigation on the feasibility of cross-project defect prediction
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Defect prediction; Cross-project; Data characteristics; Machine
   learning; Training data
ID STATIC CODE ATTRIBUTES; MODELS; NUMBER; FAULTS
AB Software defect prediction helps to optimize testing resources allocation by identifying defect-prone modules prior to testing. Most existing models build their prediction capability based on a set of historical data, presumably from the same or similar project settings as those under prediction. However, such historical data is not always available in practice. One potential way of predicting defects in projects without historical data is to learn predictors from data of other projects. This paper investigates defect predictions in the cross-project context focusing on the selection of training data. We conduct three large-scale experiments on 34 data sets obtained from 10 open source projects. Major conclusions from our experiments include: (1) in the best cases, training data from other projects can provide better prediction results than training data from the same project; (2) the prediction results obtained using training data from other projects meet our criteria for acceptance on the average level, defects in 18 out of 34 cases were predicted at a Recall greater than 70% and a Precision greater than 50%; (3) results of cross-project defect predictions are related with the distributional characteristics of data sets which are valuable for training data selection. We further propose an approach to automatically select suitable training data for projects without historical data. Prediction results provided by the training data selected by using our approach are comparable with those provided by training data from the same project.
C1 [He, Zhimin; Shu, Fengdi; Yang, Ye; Li, Mingshu; Wang, Qing] Chinese Acad Sci, Lab Internet Software Technol, Inst Software, Beijing 100190, Peoples R China.
   [He, Zhimin] Chinese Acad Sci, Grad Univ, Beijing 100190, Peoples R China.
   [Li, Mingshu] Chinese Acad Sci, State Key Lab Comp Sci, Inst Software, Beijing 100190, Peoples R China.
C3 Chinese Academy of Sciences; Institute of Software, CAS; Chinese Academy
   of Sciences; University of Chinese Academy of Sciences, CAS; Chinese
   Academy of Sciences; Institute of Software, CAS
RP He, ZM (corresponding author), Chinese Acad Sci, Lab Internet Software Technol, Inst Software, Beijing 100190, Peoples R China.
EM hezhimin@itechs.iscas.ac.cn; fdshu@itechs.iscas.ac.cn;
   ye@itechs.iscas.ac.cn; mingshu@iscas.ac.cn; wq@itechs.iscas.ac.cn
RI Yang, Ye/GZM-4812-2022; wang, qi/ITT-9652-2023; yang,
   yang/HGT-7999-2022; Lang, Ming/HIK-0758-2022
FU National Natural Science Foundation of China [60873072, 61073044,
   60903050]; National Science and Technology Major Project; National Basic
   Research Program [2007CB310802]; CAS
FX This work is supported by the National Natural Science Foundation of
   China under Grant Nos. 60873072, 61073044, and 60903050; the National
   Science and Technology Major Project; the National Basic Research
   Program under Grant No. 2007CB310802; CAS Innovation Program. We thank
   Marian Jureczko and Lech Madeyski for sharing defect data sets used in
   this paper. We also thank the anonymous reviewers for their valuable
   comments and suggestions to improve the quality of this paper.
CR [Anonymous], 1998, STAT LEARNING THEORY
   [Anonymous], 2008, Proceedings of the 4th International Workshop on Predictor Models in Software Engineering, PROMISE '08
   Boetticher G., PROMISE REPOSITORY E
   Carvalho A.B., 2010, J SYST SOFTW, V83, P7346
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Hassan AE, 2005, PROC IEEE INT CONF S, P263
   Jiang Y, 2008, EMPIR SOFTW ENG, V13, P561, DOI 10.1007/s10664-008-9079-3
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Jureczko M., 2010, Model Methods Syst Dependability Oficyna Wydawnicza Politech Wroclawskiej, P69
   Khoshgoftaar TM, 2005, INTELL DATA ANAL, V9, P3, DOI 10.3233/IDA-2005-9102
   Khoshgoftaar TM, 2010, INTELL DATA ANAL, V14, P69, DOI 10.3233/IDA-2010-0409
   Kocaguneli E, 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, P321, DOI DOI 10.1145/1858996.1859061
   Koru AG, 2005, IEEE SOFTWARE, V22, P23, DOI 10.1109/MS.2005.149
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li Q., 2010, J SOFTW MAINT EVOL R
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P637, DOI 10.1109/TSE.2007.70721
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Ohlsson N, 1996, IEEE T SOFTWARE ENG, V22, P886, DOI 10.1109/32.553637
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Quinlan J. R., 1993, PROGRAMS MACHINE LEA
   SHEPPERD M, 1994, J SYST SOFTWARE, V26, P197, DOI 10.1016/0164-1212(94)90011-6
   Tosun A., 2009, P 5 INT C PRED MOD S, P1, DOI DOI 10.1145/1540438.1540446
   Tosun A, 2010, AAAI CONF ARTIF INTE, P1748
   Turhan B, 2010, LECT NOTES COMPUT SC, V6156, P116, DOI 10.1007/978-3-642-13792-1_11
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Van Hulse J, 2009, DATA KNOWL ENG, V68, P1513, DOI 10.1016/j.datak.2009.08.005
   Wahyudin D., 2008, 3 IFIP CENTR E EUR C
   Watanabe S., 2008, P 4 INT WORKSH PRED, P19
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   Weyuker EJ, 2008, LECT NOTES COMPUT SC, V4966, P18
   Weyuker EJ, 2010, EMPIR SOFTW ENG, V15, P277, DOI 10.1007/s10664-009-9111-2
   Zhang HY, 2007, IEEE T SOFTWARE ENG, V33, P635, DOI 10.1109/TSE.2007.70706
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 40
TC 218
Z9 242
U1 0
U2 25
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2012
VL 19
IS 2
SI SI
BP 167
EP 199
DI 10.1007/s10515-011-0090-3
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 872HA
UT WOS:000298798700003
DA 2024-07-18
ER

PT J
AU Sawin, J
   Rountev, A
AF Sawin, Jason
   Rountev, Atanas
TI Improving static resolution of dynamic class loading in Java using
   dynamically gathered environment information
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 7th IEEE International Working Conference on Source Code Analysis and
   Manipulation
CY SEP 30-OCT 01, 2007
CL Paris, FRANCE
SP IEEE Comp Soc, TCSE, CEA Lab Integrat Syst & Technologies, Ecole Polytech, Software Improvement Grp, CREST, Kings Coll London
DE Static analysis; String analysis; Dynamic class loading; Reflection
AB In Java software, one important flexibility mechanism is dynamic class loading. Unfortunately, the vast majority of static analyses for Java treat dynamic class loading either unsoundly or too conservatively. We present a novel semi-static approach for resolving dynamic class loading by combining static string analysis with dynamically gathered information about the execution environment. The insight behind the approach is that dynamic class loading often depends on characteristics of the environment that are encoded in various environment variables. Such variables are not static elements; however, their run-time values typically remain the same across multiple executions of the application. Thus, the string values reported by our technique are tailored to the current installation of the system under analysis. Additionally, we propose extensions of string analysis to increase the number of sites that can be resolved purely statically, and to track the names of environment variables. An experimental evaluation on the Java 1.4 standard libraries shows that a state-of-the-art purely static approach resolves only 28% of non-trivial sites, while our approach resolves 74% of such sites. We also demonstrate how the information gained from resolved dynamic class loading can be used to determine the classes that can potentially be instantiated through the use of reflection. Our extensions of string analysis greatly increase the number of resolvable reflective instantiation sites. This work is a step towards making static analysis tools better equipped to handle the dynamic features of Java.
C1 [Sawin, Jason; Rountev, Atanas] Ohio State Univ, Columbus, OH 43210 USA.
C3 University System of Ohio; Ohio State University
RP Sawin, J (corresponding author), Ohio State Univ, 395 Dreese Labs,2015 Neil Ave, Columbus, OH 43210 USA.
EM sawin@cse.ohio-state.edu; rountev@cse.ohio-state.edu
CR [Anonymous], 2005, International Conference on World Wide Web, DOI [10.1145/1060745.1060809, DOI 10.1145/1060745.1060809]
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   BACON DF, 1996, ACM C OBJ OR PROGR S, P324
   BRAUX M, 1999, ACM WORKSH PART EV S, P2
   Choi TH, 2006, LECT NOTES COMPUT SC, V4279, P374
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Christensen AS, 2003, ACM T PROGR LANG SYS, V25, P814, DOI 10.1145/945885.945890
   CHRISTODORESCU M, 2005, ACM SIGPLAN SIGSOFT, P88
   CODISH M, 1993, ACM SIGPLAN SIGACT S, P451
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Futamura Y., 1971, Systems, Compurters, Controls, V25, P45
   Gould C, 2004, PROC INT CONF SOFTW, P645, DOI 10.1109/ICSE.2004.1317486
   Gould C, 2004, PROC INT CONF SOFTW, P697, DOI 10.1109/ICSE.2004.1317494
   HALFOND WG, 2005, IEEE ACM INT C AUT S, P174
   Hirzel M, 2004, LECT NOTES COMPUT SC, V3086, P96
   Hirzel M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216379
   Kirkegaard C, 2004, IEEE T SOFTWARE ENG, V30, P181, DOI 10.1109/TSE.2004.1271173
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Liang S, 1998, ACM SIGPLAN NOTICES, V33, P36, DOI 10.1145/286942.286945
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Livshits B, 2005, LECT NOTES COMPUT SC, V3780, P139
   MARTIN E, 2006, INT C SOFTW ENG, P901
   Mohri M., 2000, ROBUSTNESS LANGUAGE, P251
   Muller H. A., 1988, Proceedings of the 10th International Conference on Software Engineering (Cat. No.88CH2554-4), P80, DOI 10.1109/ICSE.1988.93690
   PECHTCHANSKI I, 2001, ACM C OBJ OR PROGR S, P195
   QIAN F, 2004, VIRT MACH RES TECHN, P139
   Storey MAD, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P275, DOI 10.1109/ICSM.1995.526549
   Storey MAD, 2000, SCI COMPUT PROGRAM, V36, P183, DOI 10.1016/S0167-6423(99)00036-2
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   Sundaresan V, 2006, INT SYM CODE GENER, P87
   TABUCHI N, 2002, P TIP 02 WORKSH TYP, P1
   THIEMANN P, 2005, ACM SIGPLAN WORKSH T, P59
   Tip F, 2000, ACM SIGPLAN NOTICES, V35, P281, DOI 10.1145/354222.353190
   TIP F, 1999, ACM SIGPLAN INT C OB, P292
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   WASSERMANN G, 2004, WORKSH SPEC VER COMP, P70
   Wassermann G., 2007, ACM SIGPLAN C PROGRA, P32
NR 37
TC 13
Z9 17
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2009
VL 16
IS 2
BP 357
EP 381
DI 10.1007/s10515-009-0049-9
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 431SN
UT WOS:000265084000007
DA 2024-07-18
ER

PT J
AU Autili, M
   Inverardi, P
   Pelliccione, P
AF Autili, M.
   Inverardi, P.
   Pelliccione, P.
TI Graphical scenarios for specifying temporal properties: an automated
   approach
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE scenario based notation; system requirements specification; temporal
   properties specification
AB Temporal logics are commonly used for reasoning about concurrent systems. Model checkers and other finite-state verification techniques allow for automated checking of system model compliance to given temporal properties. These properties are typically specified as linear-time formulae in temporal logics. Unfortunately, the level of inherent sophistication required by these formalisms too often represents an impediment to move these techniques from "research theory" to "industry practice". The objective of this work is to facilitate the nontrivial and error prone task of specifying, correctly and without expertise in temporal logic, temporal properties. In order to understand the basis of a simple but expressive formalism for specifying temporal properties we critically analyze commonly used in practice visual notations. Then we present a scenario-based visual language called Property Sequence Chart (PSC) that, in our opinion, fixes the highlighted lacks of these notations by extending a subset of UML 2.0 Interaction Sequence Diagrams. We also provide PSC with both denotational and operational semantics. The operational semantics is obtained via translation into Buchi automata and the translation algorithm is implemented as a plugin of our CHARMY tool. Expressiveness of PSC has been validated with respect to well known property specification patterns.
C1 Univ Aquila, Dipartimento Informat, I-67010 Coppito, Italy.
C3 University of L'Aquila
RP Autili, M (corresponding author), Univ Aquila, Dipartimento Informat, I-67010 Coppito, Italy.
EM marco.autili@di.univaq.it; inverard@di.univaq.it; pellicci@di.univaq.it
RI AUTILI, Marco/AAG-7127-2020; Pelliccione, Patrizio/Q-5118-2019;
   Pelliccione, Patrizio/A-4105-2008
OI AUTILI, Marco/0000-0001-5951-1567; Pelliccione,
   Patrizio/0000-0002-5438-2281; Pelliccione, Patrizio/0000-0002-5438-2281
CR ALFONSO A, 2004, 26 ICSE 04 EDINBURGH
   ANDRE C, 2001, 4 IEEE INT S OO REAL
   [Anonymous], 1991, The Temporal Logic of Reactive and Concurrent Systems
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   [Anonymous], 2001, MODEL CHECKING
   AUTILI M, 2006, 5 GTVMT 06 ETAPS 06
   AUTILI M, 2006, 5 INT WORKH SCEN STA
   Braberman V, 2005, IEEE T SOFTWARE ENG, V31, P1028, DOI 10.1109/TSE.2005.131
   BUCHI JR, 1960, P INT C LOG METH PHI
   COLANGELO D, 2006, FORTE 2006 PARIS FRA, V4229, P243
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   Dillon L. K., 1994, ACM Transactions on Software Engineering and Methodology, V3, P131, DOI 10.1145/192218.192226
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Gerth R., 1995, INT C PROTOCOL SPECI, P3
   HAREL D, 2002, MASCOTS 02
   Haugen O., 2004, System Analysis and Modeling. 4th International SDL and MSC Workshop, SAM 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 3319), P65
   HOLZMANN GJ, 2002, P FDN SOFTW ENG SIGS
   KLOSE J, 2001, LNCS, V2031, P512
   KUGLER H, 2005, 11 INT C TACAS 05
   LEE I, 1997, HIGH ASSURANCE SYSTE
   Object Management Group, 2004, UML SUP VERS 2 0
   Pnueli Amir., 1977, P 18 ANN S FDN COMPU, P46, DOI DOI 10.1109/SFCS.1977.32
   *PSC PROJ, 2005, PSC WEB SIT
   Smith M., 2001, 5 INT S REQ ENG
   Smith RL, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P11, DOI 10.1109/ICSE.2002.1007952
   STORRLE H, 2003, VLFM 03 INTL WS VISU
   TIVOLI M, 2004, RSTL OBJET J 12 2006, P77
   Uchitel S, 2004, ACM T SOFTW ENG METH, V13, P37, DOI 10.1145/1005561.1005563
   ZANOLIN L, 2003, SAVCBS
NR 29
TC 55
Z9 63
U1 1
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2007
VL 14
IS 3
BP 293
EP 340
DI 10.1007/s10515-007-0012-6
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 212HF
UT WOS:000249586100002
DA 2024-07-18
ER

PT J
AU Hirsch, T
   Hofer, B
AF Hirsch, Thomas
   Hofer, Birgit
TI Detecting non-natural language artifacts for de-noising bug reports
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE NLP; Bug reports; Issue tickets; Data cleaning; Artifact removal;
   De-noising
ID AGREEMENT
AB Textual documents produced in the software engineering process are a popular target for natural language processing (NLP) and information retrieval (IR) approaches. However, issue tickets often contain artifacts such as code snippets, log outputs and stack traces. These artifacts not only inflate the issue ticket sizes, but also can this noise constitute a real problem for some NLP approaches, and therefore has to be removed in the pre-processing of some approaches. In this paper, we present a machine learning based approach to classify textual content into natural language and non-natural language artifacts at line level. We show how data from GitHub issue trackers can be used for automated training set generation, and present a custom preprocessing approach for the task of artifact removal. The training sets are automatically created from Markdown annotated issue tickets and project documentation files. We use these generated training sets to train a Markdown agnostic model that is able to classify un-annotated content. We evaluate our approach on issue tickets from projects written in C++, Java, JavaScript, PHP, and Python. Our approach achieves ROC-AUC scores between 0.92 and 0.96 for language-specific models. A multi-language model trained on the issue tickets of all languages achieves ROC-AUC scores between 0.92 and 0.95. The provided models are intended to be used as noise reduction pre-processing steps for NLP and IR approaches working on issue tickets.
C1 [Hirsch, Thomas; Hofer, Birgit] Graz Univ Technol, Inst Software Technol, Inffeldgasse 16b, A-8010 Graz, Austria.
C3 Graz University of Technology
RP Hofer, B (corresponding author), Graz Univ Technol, Inst Software Technol, Inffeldgasse 16b, A-8010 Graz, Austria.
EM thirsch@ist.tugraz.at; bhofer@ist.tugraz.at
OI Hofer, Birgit/0000-0001-5144-059X
FU Austrian Science Fund (FWF) - Austrian Science Fund (FWF) [P 32653-N]
FX Open access funding provided by Austrian Science Fund (FWF). The work
   described in this paper has been funded by the Austrian Science Fund
   (FWF): P 32653-N (Automated Debugging in Use).
CR Bacchelli A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P476, DOI 10.1109/ASE.2011.6100103
   Bacchelli A, 2012, PROC INT CONF SOFTW, P375, DOI 10.1109/ICSE.2012.6227177
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Bishop Christopher M, 2006, PATTERN RECOGN, V128, P1
   Calefato F, 2019, INFORM SOFTWARE TECH, V114, P1, DOI 10.1016/j.infsof.2019.05.012
   Chawla I, 2015, P 8 IND SOFTW ENG C, DOI DOI 10.1145/2723742.2723751
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Devaiya D., 2021, 33 INT C SOFTWARE EN, DOI [10.18293/SEKE2021-163, DOI 10.18293/SEKE2021-163]
   Goseva-Popstojanova K, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2018), P344, DOI 10.1109/QRS.2018.00047
   Hirsch T., 2022, ARTIFACT DETECTION T, DOI [10.5281/zenodo.6393129, DOI 10.5281/ZENODO.6393129]
   Hirsch T, 2022, ARRAY-NY, V15, DOI 10.1016/j.array.2022.100189
   Hirsch T, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOPS (ASEW 2021), P191, DOI 10.1109/ASEW52652.2021.00046
   James G, 2013, SPRINGER TEXTS STAT, V103, P1, DOI [10.1007/978-1-4614-7138-7, 10.1007/978-1-4614-7138-7_1]
   Jauhiainen T., 2017, P 21 NORD C COMP LIN, P183
   Kukkar A, 2020, IEEE ACCESS, V8, P200749, DOI 10.1109/ACCESS.2020.3033045
   Kukkar A, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19132964
   Kumar L, 2021, LECT NOTES COMPUT SC, V12955, P398, DOI 10.1007/978-3-030-87007-2_28
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Mani S, 2019, PROCEEDINGS OF THE 6TH ACM IKDD CODS AND 24TH COMAD, P171, DOI 10.1145/3297001.3297023
   Mäntylä MV, 2018, IEEE WORK CONF MIN S, P387, DOI 10.1145/3196398.3196444
   Ortu M, 2016, INT WORKS EMERG TREN, P1, DOI [10.1145/2897695.2897696, 10.1109/WETSoM.2016.009]
   Ponzanelli L, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P474, DOI 10.1109/MSR.2015.67
   Premraj R., 2008, P 2008 INT WORKING C, P27
   Ray B, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P155, DOI 10.1145/2635868.2635922
   Rigby PC, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P832, DOI 10.1109/ICSE.2013.6606629
   Saha RK, 2013, IEEE INT CONF AUTOM, P345, DOI 10.1109/ASE.2013.6693093
   Soltani M, 2020, EMPIR SOFTW ENG, V25, P5255, DOI 10.1007/s10664-020-09882-z
   Tan L, 2014, EMPIR SOFTW ENG, V19, P1665, DOI 10.1007/s10664-013-9258-8
   Thung F., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P205, DOI 10.1109/WCRE.2012.30
   Ye DH, 2016, PROC IEEE INT CONF S, P389, DOI 10.1109/ICSME.2016.11
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
   Zhou C, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-10010-8
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
NR 33
TC 2
Z9 2
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 52
DI 10.1007/s10515-022-00350-0
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3Z1LM
UT WOS:000844181800001
PM 36065351
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Gupta, A
   Namasudra, S
AF Gupta, Ambika
   Namasudra, Suyel
TI A Novel Technique for Accelerating Live Migration in Cloud Computing
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Virtual machine; Downtime; Data transfer; Migration time; Performance
ID VIRTUAL MACHINE MIGRATION; DESIGN
AB Currently, cloud computing is being used in many scientific areas like geoscience, DNA sequencing, healthcare, and many more. In a cloud computing environment, a Virtual Machine (VM) is a virtualized instance of any computer that can execute almost all the tasks of a computer. VM migration can be referred to as a task to move VMs from one physical machine to another physical machine. During VM migration, there are many issues, such as fault occurrence, seamless connectivity, and maintaining the quality of service. The cloud service provider has to anticipate the server downtime and various other delays like slow processing of user's request due to the occurrence of a fault, improper allocation of VMs, and many more. A reliable and advanced live migration optimization technique has been proposed in this work for a trustworthy cloud computing environment. There are three main algorithms in the proposed scheme considering the total migration time, namely Host Selection Migration Time (HSMT), VM Reallocation Migration Time (VMRMT), and VM Reallocation Bandwidth Usage (VMRBU). These algorithms support to enhance the performance of cloud computing environments by minimizing the migration time. The proposed scheme has been compared to some existing approaches, namely Kernel-based Virtual Machines (KVM) and Pareto Optimized Framework for Seamless VM Live Migration (POF-SVLM), to evaluate its performance. The results show that the proposed scheme reduces the total cores of CPU by 60-70%, downtime by 70-80%, data transfer rate by 40-50%, and migration time by 40-50%.
C1 [Gupta, Ambika] GLA Univ, Dept Comp Engn & Applicat, Mathura, India.
   [Gupta, Ambika; Namasudra, Suyel] Natl Inst Technol Patna, Dept Comp Sci & Engn, Patna, Bihar, India.
C3 GLA University; National Institute of Technology (NIT System); National
   Institute of Technology Patna
RP Namasudra, S (corresponding author), Natl Inst Technol Patna, Dept Comp Sci & Engn, Patna, Bihar, India.
EM suyelnamasudra@gmail.com
RI Namasudra, Suyel/AAV-1723-2020
CR Agrawal D, 2022, COMPUT BIOL MED, V140, DOI 10.1016/j.compbiomed.2021.105100
   Ahmad AA, 2019, J CLOUD COMPUT-ADV S, V8, DOI 10.1186/s13677-019-0134-y
   Ali HM, 2022, CLUSTER COMPUT, V25, P2143, DOI 10.1007/s10586-021-03389-y
   Aljunid MF, 2020, CAAI T INTELL TECHNO, V5, P268, DOI 10.1049/trit.2020.0031
   [Anonymous], 2011, P 2 ACMSPEC INT C PE
   Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   Bala A., 2012, Int J Comput Sci Issues, V9, P288
   Baldominos A, 2020, INT J INTERACT MULTI, V6, P24, DOI 10.9781/ijimai.2020.06.001
   Beloglazov A, 2012, CONCURR COMP-PRACT E, V24, P1397, DOI 10.1002/cpe.1867
   Calheiros RN, 2011, SOFTWARE PRACT EXPER, V41, P23, DOI 10.1002/spe.995
   Choudhary A, 2017, J CLOUD COMPUT-ADV S, V6, DOI 10.1186/s13677-017-0092-1
   Cui Y, 2017, IEEE ACM T NETWORK, V25, P3427, DOI 10.1109/TNET.2017.2744643
   De Garrido L, 2021, INT J INTERACT MULTI, V7, P199, DOI 10.9781/ijimai.2021.03.001
   Deshpande U., 2012, 6th International Workshop on Virtualization Technologies in Distributed Computing, P19, DOI [10.1145/2287056.2287062, DOI 10.1145/2287056.2287062]
   Deshpande U, 2013, IEEE ACM INT SYMP, P394, DOI 10.1109/CCGrid.2013.39
   Dhule C., 2020, COMPUT SPRINGER VERL, V102, P2158
   El Motaki S, 2021, CLUSTER COMPUT, V24, P3367, DOI 10.1007/s10586-021-03331-2
   Gao ZF, 2020, IEEE NETWORK, V34, P216, DOI 10.1109/MNET.001.1900260
   Hamdy M, 2020, CAAI T INTELL TECHNO, V5, P237, DOI 10.1049/trit.2019.0099
   Hines Michael R., 2009, Operating Systems Review, V43, P14, DOI 10.1145/1618525.1618528
   Hu W., 2013, P ACM CLOUD AUTONOMI, P1
   Hussain T, 2020, IEEE T IND INFORM, V16, P77, DOI 10.1109/TII.2019.2929228
   Jiechao Gao, 2021, SenSys '21: Proceedings of the 19th ACM Conference on Embedded Networked Sensor Systems, P453, DOI 10.1145/3485730.3493450
   Kumar A, 2021, INT J WEB GRID SERV, V17, P321, DOI 10.1504/IJWGS.2021.118398
   LeCun, MNIST HANDWRITTEN DI
   Malleswari TYJN, 2019, J CLOUD COMPUT-ADV S, V8, DOI 10.1186/s13677-019-0125-z
   Moghaddam MJ, 2020, CLUSTER COMPUT, V23, P3029, DOI 10.1007/s10586-020-03067-5
   Mousavi S, 2017, ACTA POLYTECH HUNG, V14, P83, DOI 10.12700/APH.14.4.2017.4.5
   Namasudra S, 2022, IEEE T SERV COMPUT, V15, P2289, DOI 10.1109/TSC.2020.3046471
   Namasudra S, 2021, ACM T MULTIM COMPUT, V16, DOI 10.1145/3392665
   Obasuyi GabrielCephas., 2015, International Journal of Communications, Network and System Sciences, V8, P260, DOI [10.4236/ijcns.2015.87026, DOI 10.4236/IJCNS.2015.87026]
   Rajabzadeh M, 2020, J SUPERCOMPUT, V76, P7438, DOI 10.1007/s11227-020-03169-2
   Rajapackiyam E., 2020, J COMPUT SCI-NETH, DOI [10.3844/jcssp.2020.543.550, DOI 10.3844/JCSSP.2020.543.550]
   Rauf HT, 2021, SOFT COMPUT, V25, P12989, DOI 10.1007/s00500-021-06075-8
   Salfner F, 2011, PROCEEDINGS OF THE FOURTH INTERNATIONAL CONFERENCE ON DEPENDABILITY (DEPEND 2011), P100
   Sangpetch A, 2017, CLOSER: PROCEEDINGS OF THE 7TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING AND SERVICES SCIENCE, P75, DOI 10.5220/0006254601030111
   Sharma P, 2022, EXPERT SYST, V39, DOI 10.1111/exsy.12915
   Sun G, 2016, FUTURE GENER COMP SY, V55, P74, DOI 10.1016/j.future.2015.09.005
   Suruliandi A, 2021, INT J INTERACT MULTI, V7, P66, DOI 10.9781/ijimai.2021.05.001
   Tao F, 2016, IEEE T SERV COMPUT, V9, P910, DOI 10.1109/TSC.2015.2416928
   Wang CJ, 2021, IEEE T IND INFORM, V17, P5511, DOI 10.1109/TII.2020.3007407
   Wu H, 2016, IEEE T CLOUD COMPUT, V4, P250, DOI 10.1109/TCC.2014.2369439
   Xu F, 2016, IEEE T COMPUT, V65, P2470, DOI 10.1109/TC.2015.2481403
   Yuan G., 2020, T INTELL TECHNOL, V5, P259, DOI [10.1049/trit.2020.0079, DOI 10.1049/TRIT.2020.0079]
   Zhang F, 2018, IEEE COMMUN SURV TUT, V20, P1206, DOI 10.1109/COMST.2018.2794881
   Zhang JL, 2013, INT J DISTRIB SENS N, DOI 10.1155/2013/625070
   Zhang JL, 2021, IEEE INTERNET THINGS, V8, P3323, DOI 10.1109/JIOT.2020.3043289
   Zhang R, 2015, IEEE T PARALL DISTR, V26, P2327, DOI 10.1109/TPDS.2014.2346504
NR 48
TC 17
Z9 17
U1 1
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 34
DI 10.1007/s10515-022-00332-2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZY2TW
UT WOS:000772442600001
DA 2024-07-18
ER

PT J
AU Pathik, B
   Sharma, M
AF Pathik, Babita
   Sharma, Meena
TI Source code change analysis with deep learning based programming model
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Change impact analysis; Abstract syntax tree; Path2Vec; Deep learning;
   Word embedding; Distance metrics; Attention; Un-parsing
AB Analyzing the change in source code is a very crucial activity for object-oriented parallel programming software. This paper suggested an Impact analysis method with Attention BiLSTM (IABLSTM) for detecting the changes and their affected part in the object-oriented software system. Classical approaches based on control flow graph, program dependence analysis, latent dirichlet allocation, and data mining have been used for change impact analysis. A Path2Vec approach is presented in the paper, combining a deep learning technique with word embedding to analyze and identify the change. The paper considers two versions of a python program for experiment and generates the abstract syntax tree (AST). Then extract the path to produce a token sequence. Next, convert the token sequence into unique vectors by applying a word embedding layer. The BiLSTM network encodes the sequence into a vector representation. After that, compare the embedded output with the use of cosine distance metrics. We trained the neural network model with the embedded outcome. Then decode the resultant token sequence into a path of AST. Finally, convert the AST path back to code using the un-parsing technique. To strengthen the parallel programming based proposed model, we combined the attention mechanism to emphasize and detect the differences in the code. The model is detecting the change of code efficiently. The experimental results show that our proposed model's change detection accuracy increases significantly compared with other conventional models for change impact analysis. The proposed method can also be applied for impact analysis on object-oriented based parallel programming. The empirical evaluation shows that the model outperforms change detection with approximately 85% validation accuracy.
C1 [Pathik, Babita] DAVV, Inst Engn & Technol, IT, Indore, India.
   [Sharma, Meena] DAVV, Inst Engn & Technol, Dept Comp Engn, Indore, India.
C3 Devi Ahilya University; Devi Ahilya University
RP Pathik, B (corresponding author), DAVV, Inst Engn & Technol, IT, Indore, India.
EM babitapathik@gmail.com; msharma@ietdavv.edu.in
RI Pathik, Babita/GRJ-4468-2022; PATHIK, BABITA/ABE-6187-2021
OI PATHIK, BABITA/0000-0002-1523-2141
CR Ahmad S., 2014, International Journal of Software Engineering Applications, V5, P125
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   Angerer F, 2019, AUTOMAT SOFTW ENG, V26, P417, DOI 10.1007/s10515-019-00253-7
   Baah GK, 2010, IEEE T SOFTWARE ENG, V36, P528, DOI 10.1109/TSE.2009.87
   Badri L, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P167, DOI 10.1109/APSEC.2005.100
   Bohner SA, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P42, DOI 10.1109/ICSM.1996.564987
   Büch L, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P95, DOI [10.1109/saner.2019.8668039, 10.1109/SANER.2019.8668039]
   Dam H. K., 2018, DEEP TREE BASED MODE
   Eid S, 2020, EGYPT INFORM J, V21, P219, DOI 10.1016/j.eij.2020.02.002
   Gethers M., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P540, DOI 10.1109/ASE.2011.6100120
   Goknil A., 2016, ARXIV PREPRINT ARXIV
   Hameed Z, 2020, IEEE ACCESS, V8, P73992, DOI 10.1109/ACCESS.2020.2988550
   Hoang T, 2020, PROC INT CONF SOFTW, P518, DOI 10.1145/3377811.3380361
   Kitsu E, 2013, ASIA PAC SOFWR ENG, P299, DOI 10.1109/APSEC.2013.48
   Le THM, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3383458
   Liang HL, 2019, IEEE ACCESS, V7, P83812, DOI 10.1109/ACCESS.2019.2925313
   Meng Y, 2020, COMPLEXITY, V2020, DOI 10.1155/2020/5027198
   Molderez T, 2017, IEEE WORK CONF MIN S, P248, DOI 10.1109/MSR.2017.12
   Musco Vincenzo, 2016, 2016 IEEE/ACM 5th International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering (RAISE). Proceedings, P8, DOI 10.1109/RAISE.2016.010
   Oladunni T., 2019, IEEE SOUTHEASTCON, P1
   Rahman MM, 2020, SCI PROGRAMMING-NETH, V2020, DOI 10.1155/2020/7426461
   Siow JK, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P284, DOI [10.1109/SANER48275.2020.9054794, 10.1109/saner48275.2020.9054794]
   Thomas SW, 2010, IEEE INT WORK C SO, P55, DOI 10.1109/SCAM.2010.13
   Wang WH, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P261, DOI [10.1109/SANER48275.2020.9054857, 10.1109/saner48275.2020.9054857]
   White M, 2016, IEEE INT CONF AUTOM, P87, DOI 10.1145/2970276.2970326
   Zhang J, 2019, PROC INT CONF SOFTW, P783, DOI 10.1109/ICSE.2019.00086
NR 26
TC 3
Z9 3
U1 1
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 15
DI 10.1007/s10515-021-00305-x
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY6EY
UT WOS:000737064300003
DA 2024-07-18
ER

PT J
AU Ferrari, A
   Esuli, A
AF Ferrari, Alessio
   Esuli, Andrea
TI An NLP approach for cross-domain ambiguity detection in requirements
   engineering
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Natural language processing; NLP; Requirements engineering; Ambiguity;
   Domain knowledge; Language models; Word embeddings
ID KNOWLEDGE; MODELS
AB During requirements elicitation, different stakeholders with diverse backgrounds and skills need to effectively communicate to reach a shared understanding of the problem at hand. Linguistic ambiguity due to terminological discrepancies may occur between stakeholders that belong to different technical domains. If not properly addressed, ambiguity can create frustration and distrust during requirements elicitation meetings, and lead to problems at later stages of development. This paper presents a natural language processing approach to identify ambiguous terms between different domains, and rank them by ambiguity score. The approach is based on building domain-specific language models, one for each stakeholders' domain. Word embeddings from each language model are compared in order to measure the differences of use of a term, thus estimating its potential ambiguity across the domains of interest. We evaluate the approach on seven potential elicitation scenarios involving five domains. In the evaluation, we compare the ambiguity rankings automatically produced with the ones manually obtained by the authors as well as by multiple annotators recruited through Amazon Mechanical Turk. The rankings produced by the approach lead to a maximum Kendall's Tau of 88%. However, for several elicitation scenarios, the application of the approach was unsuccessful in terms of performance. Analysis of the agreement among annotators and of the observed inaccuracies offer hints for further research on the relationship between domain knowledge and natural language ambiguity.
C1 [Ferrari, Alessio; Esuli, Andrea] CNR, ISTI, Via G Moruzzi 1, I-56124 Pisa, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR)
RP Ferrari, A (corresponding author), CNR, ISTI, Via G Moruzzi 1, I-56124 Pisa, Italy.
EM alessio.ferrari@isti.cnr.it; andrea.esuli@isti.cnr.it
RI Esuli, Andrea/B-6343-2015; Ferrari, Alessio/J-1155-2019
OI Esuli, Andrea/0000-0002-5725-4322; Ferrari, Alessio/0000-0002-0636-5663
CR Ambriola V., 2006, Automated Software Engineering, V13, P107, DOI 10.1007/s10515-006-5468-2
   [Anonymous], 2014, ESEM
   [Anonymous], 2013, ADV NEURAL INFORM PR, DOI DOI 10.48550/ARXIV.1310.4546
   [Anonymous], 2014, P 2014 C EMPIRICAL M, DOI DOI 10.3115/V1/D14-1110
   [Anonymous], 2010, Analysis of ordinal categorical data
   [Anonymous], WORD SENSE DISAMBIGU
   [Anonymous], 2016, COLING
   [Anonymous], 1968, SELECTED PAPERS J R
   [Anonymous], 2018, ARXIV180504032
   [Anonymous], 2018, AEROSP CONF PROC
   Arora C, 2015, IEEE T SOFTWARE ENG, V41, P944, DOI 10.1109/TSE.2015.2428709
   Avramidis Eleftherios, 2013, Prague Bulletin of Mathematical Linguistics, P63, DOI 10.2478/pralin-2013-0012
   Berry D. M., 2003, From contract drafting to software specification: Linguistic sources of ambiguity
   Berry DM, 2005, IEEE SOFTWARE, V22, P55, DOI 10.1109/MS.2005.22
   Berry DM, 2004, SPRING INT SER ENG C, V753, P7
   Blei DM, 2012, COMMUN ACM, V55, P77, DOI 10.1145/2133806.2133826
   Casamayor A, 2012, KNOWL-BASED SYST, V30, P78, DOI 10.1016/j.knosys.2011.12.009
   Chantree F, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P59
   Cleland-Huang J, 2015, IEEE SOFTWARE, V32, P16, DOI 10.1109/MS.2015.67
   Dag JNO, 2005, IEEE SOFTWARE, V22, P32, DOI 10.1109/MS.2005.1
   Dalpiaz F, 2018, LECT NOTES COMPUT SC, V10753, P119, DOI 10.1007/978-3-319-77243-1_8
   Dieste O, 2011, IEEE T SOFTWARE ENG, V37, P283, DOI 10.1109/TSE.2010.33
   Evans MC, 2017, INT REQUIR ENG CONF, P312, DOI 10.1109/RE.2017.87
   Falessi D, 2013, IEEE T SOFTWARE ENG, V39, P18, DOI 10.1109/TSE.2011.122
   Femmer H, 2017, J SYST SOFTWARE, V123, P190, DOI 10.1016/j.jss.2016.02.047
   Fernández DM, 2017, EMPIR SOFTW ENG, V22, P2298, DOI 10.1007/s10664-016-9451-7
   Ferrari A., 2012, 2012 IEEE 20th International Requirements Engineering Conference (RE 2012), P191, DOI 10.1109/RE.2012.6345803
   Ferrari A, 2018, EMPIR SOFTW ENG, V23, P3684, DOI 10.1007/s10664-018-9596-7
   Ferrari A, 2017, IEEE SOFTWARE, V34, P28, DOI 10.1109/MS.2017.4121207
   Ferrari A, 2017, 2017 IEEE 25TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW), P393, DOI 10.1109/REW.2017.20
   Ferrari A, 2016, REQUIR ENG, V21, P333, DOI 10.1007/s00766-016-0249-3
   Ferrari N, 2018, 2018 FIFTH INTERNATIONAL CONFERENCE ON INTERNET OF THINGS: SYSTEMS, MANAGEMENT AND SECURITY, P31, DOI 10.1109/IoTSMS.2018.8554829
   Flekova L, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P2029
   Gacitua R., 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P5, DOI 10.1109/RE.2010.12
   Gleich B, 2010, LECT NOTES COMPUT SC, V6182, P218, DOI 10.1007/978-3-642-14192-8_20
   Guo J, 2017, PROC INT CONF SOFTW, P3, DOI 10.1109/ICSE.2017.9
   Harris ZS, 1954, WORD, V10, P146, DOI 10.1080/00437956.1954.11659520
   HOFFMAN RR, 1995, ORGAN BEHAV HUM DEC, V62, P129, DOI 10.1006/obhd.1995.1039
   Honnibal M., 2017, Convolutional Neural Networks and Incremental Parsing, DOI DOI 10.1145/2566486.2568003
   Jha N, 2017, LECT NOTES COMPUT SC, V10153, P273, DOI 10.1007/978-3-319-54045-0_20
   Kendall MG, 1945, BIOMETRIKA, V33, P239, DOI 10.2307/2332303
   Kof L., 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P391, DOI 10.1109/RE.2010.53
   Krisch J, 2015, INT REQUIR ENG CONF, P344, DOI 10.1109/RE.2015.7320451
   Lami G., 2001, P 26 ANN NASA GODD S, P97, DOI 10.1109/SEW.2001.992662
   LANDIS JR, 1977, BIOMETRICS, V33, P363, DOI 10.2307/2529786
   Lee YK, 2002, PROCEEDINGS OF THE 2002 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING, P41
   Levy O, 2014, ADV NEUR IN, V27
   Lian XL, 2016, INT REQUIR ENG CONF, P156, DOI 10.1109/RE.2016.50
   Maalej W, 2015, INT REQUIR ENG CONF, P116, DOI 10.1109/RE.2015.7320414
   Manning CD, 2011, LECT NOTES COMPUT SC, V6608, P171, DOI 10.1007/978-3-642-19400-9_14
   Massey AK, 2014, INT REQUIR ENG CONF, P83, DOI 10.1109/RE.2014.6912250
   Mavin A, 2009, PROCEEDINGS OF THE 2009 17TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, P317, DOI 10.1109/RE.2009.9
   Mich L., 1996, Natural Language Engineering, V2, P161, DOI 10.1017/S1351324996001337
   Miller George, 1998, WORDNET ELECT LEXICA
   Navigli R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459355
   Pedersen T., 2000, Proceedings of the First Meeting of the North American Chapter of the Association for Computational Linguistics, P63
   Pedersen T, 2006, TEXT SPEECH LANG TEC, V33, P133, DOI 10.1007/1-4020-4809-2_6
   Pohl K., 2011, Requirements Engineering Fundamentals, V1st
   Quirchmayr T, 2017, LECT NOTES COMPUT SC, V10153, P255, DOI 10.1007/978-3-319-54045-0_19
   Raganato Alessandro, 2017, P 2017 C EMPIRICAL M, P1156
   Robeer M, 2016, INT REQUIR ENG CONF, P196, DOI 10.1109/RE.2016.40
   Rosadini B, 2017, LECT NOTES COMPUT SC, V10153, P344, DOI 10.1007/978-3-319-54045-0_24
   Sleimi A, 2018, INT REQUIR ENG CONF, P124, DOI 10.1109/RE.2018.00022
   Sultanov H, 2013, S VIS LANG HUM CEN C, P52, DOI 10.1109/RE.2013.6636705
   Taghipour K., 2015, P 2015 C N AM CHAPTE, P314
   Tjong S. F., 2013, The design of SREE-a prototype potential ambiguity finder for requirements specifications and lessons learned, V7830, P80, DOI DOI 10.1007/978-3-642-37422-7_6
   Wang WT, 2018, INT REQUIR ENG CONF, P40, DOI 10.1109/RE.2018.00-53
   Yang H, 2011, REQUIR ENG, V16, P163, DOI 10.1007/s00766-011-0119-y
   Yue T, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2699697
   Zowghi D, 2005, ENGINEERING AND MANAGING SOFTWARE REQUIREMENTS, P19, DOI 10.1007/3-540-28244-0_2
NR 70
TC 42
Z9 46
U1 1
U2 26
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2019
VL 26
IS 3
SI SI
BP 559
EP 598
DI 10.1007/s10515-019-00261-7
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IS5YT
UT WOS:000482229800003
DA 2024-07-18
ER

PT J
AU Rosenmüller, M
   Siegmund, N
   Apel, S
   Saake, G
AF Rosenmueller, Marko
   Siegmund, Norbert
   Apel, Sven
   Saake, Gunter
TI Flexible feature binding in software product lines
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software product lines; Feature binding time; Feature-oriented
   programming; Feature composition; Static binding; Dynamic binding
ID COLLABORATIONS
AB A software product line (SPL) is a family of programs that share assets from a common code base. The programs of an SPL can be distinguished in terms of features, which represent units of program functionality that satisfy stakeholders' requirements. The features of an SPL can be bound either statically at program compile time or dynamically at run time. Both binding times are used in SPL development and have different advantages. For example, dynamic binding provides high flexibility whereas static binding supports fine-grained customizability without any impact on performance (e.g., for use on embedded systems). However, contemporary techniques for implementing SPLs force a programmer to choose the binding time already when designing an SPL and to mix different implementation techniques when multiple binding times are needed. We present an approach that integrates static and dynamic feature binding seamlessly. It allows a programmer to implement an SPL once and to decide per feature at deployment time whether it should be bound statically or dynamically. Dynamic binding usually introduces an overhead regarding resource consumption and performance. We reduce this overhead by statically merging features that are used together into dynamic binding units. A program can be configured at run time by composing binding units on demand. We use feature models to ensure that only valid feature combinations can be selected at compile and at run time. We provide a compiler and evaluate our approach on the basis of two non-trivial SPLs.
C1 [Rosenmueller, Marko; Siegmund, Norbert; Saake, Gunter] Univ Magdeburg, Sch Comp Sci, D-39106 Magdeburg, Germany.
   [Apel, Sven] Univ Passau, Dept Math & Informat, Passau, Germany.
C3 Otto von Guericke University; University of Passau
RP Rosenmüller, M (corresponding author), Univ Magdeburg, Sch Comp Sci, D-39106 Magdeburg, Germany.
EM rosenmue@ovgu.de; nsiegmun@ovgu.de; saake@ovgu.de; apel@uni-passau.de
RI Siegmund, Norbert/U-1325-2019
OI Siegmund, Norbert/0000-0001-7741-7777; Apel, Sven/0000-0003-3687-2233
FU German Research Foundation (DFG) [SA 465/34-1, AP 206/2-1, AP 206/4-1];
   German Ministry of Education and Research (BMBF) [01IM08003C]
FX We thank Christian Kastner for comments on earlier drafts of this paper.
   The work of Marko Rosenmuller is funded by the German Research
   Foundation (DFG), project number SA 465/34-1. Norbert Siegmund is funded
   by the German Ministry of Education and Research (BMBF), project number
   01IM08003C. Sven Apel's work is supported by the German Research
   Foundation (DFG), projects AP 206/2-1 and AP 206/4-1.
CR Alves V., 2006, Proceedings of the 5th international conference on Generative Programming and Component Engineering, P201, DOI [10.1145/1173706, DOI 10.1145/1173706]
   Anastasopoulos M., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/379377.375269
   APEL S, 2011, P INT C SOF IN PRESS
   Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Apel S, 2010, SCI COMPUT PROGRAM, V75, P1022, DOI 10.1016/j.scico.2010.02.001
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P161
   Aracic I, 2006, LECT NOTES COMPUT SC, V3880, P135
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P143, DOI 10.1109/ICSR.1998.685739
   Bockisch Christoph., 2004, AOSD 04 P 3 INT C AS, P83
   Cardone R, 2001, PROC INT CONF SOFTW, P285, DOI 10.1109/ICSE.2001.919102
   CHAKRAVARTHY V, 2008, P INT C ASP OR SOFTW, P108
   Classen Andreas., 2009, Proceedings of the 3th International Workshop on Variability Modelling of Software-intensive Systems (VAMOS'09), P51
   Czarnecki K, 2004, LECT NOTES COMPUT SC, V3154, P266
   Gamma E., 2011, Design Patterns: Elements of Reusable Object-Oriented Software, V39th ed.
   GILANI W, 2005, P NET OBJECTDAYS GES, P94
   Griss ML, 2000, LECT NOTES COMPUT SC, V1844, P137
   Hallsteinsen S, 2008, COMPUTER, V41, P93, DOI 10.1109/MC.2008.123
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Hundt C, 2007, J OBJECT TECHNOL, V6, P417, DOI 10.5381/jot.2007.6.9.a21
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lee J, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P131
   Lieberherr K, 2003, COMPUT J, V46, P542, DOI 10.1093/comjnl/46.5.542
   LIEBERMAN H, 1986, SIGPLAN NOTICES, V21, P214, DOI 10.1145/960112.28718
   Lippman StanleyB., 1996, INSIDE C OBJECT MODE
   Lopez-Herrejon Roberto., 2006, Proceedings of the 2006 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation (New York, NY, USA), PEPM '06, P68
   McDirmid S, 2001, ACM SIGPLAN NOTICES, V36, P211, DOI 10.1145/504311.504298
   MEZINI M, 2000, COMPONENT INTEGRATIO
   NICOARA A, 2008, SIGOPS OPERATING SYS, V42, P233
   Ostermann K, 2002, LECT NOTES COMPUT SC, V2374, P89
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Pure-systems GmbH, 2004, TECHN WHIT PAP VAR M
   Rosenmüller M, 2009, DATA KNOWL ENG, V68, P1493, DOI 10.1016/j.datak.2009.07.013
   Rosenmüller M, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P3
   Rosenmuller Marko., 2010, VAMOS, P123
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   van Gurp J, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P45, DOI 10.1109/WICSA.2001.948406
   Villazón A, 2010, ACM SIGPLAN NOTICES, V45, P95, DOI 10.1145/1837852.1621622
   ZDUN U, 2004, P 9 EUR C PATT LANG, P1
   Zdun U, 2007, INFORM SOFTWARE TECH, V49, P871, DOI 10.1016/j.infsof.2006.10.001
NR 41
TC 22
Z9 23
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2011
VL 18
IS 2
BP 163
EP 197
DI 10.1007/s10515-011-0080-5
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 737DG
UT WOS:000288548300003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Kiyavitskaya, N
   Zannone, N
AF Kiyavitskaya, Nadzeya
   Zannone, Nicola
TI Requirements model generation to support requirements elicitation: the
   Secure Tropos experience
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE lightweight text analysis; model generation
AB In recent years several efforts have been devoted by researchers in the Requirements Engineering community to the development of methodologies for supporting designers during requirements elicitation, modeling, and analysis. However, these methodologies often lack tool support to facilitate their application in practice and encourage companies to adopt them.
   In this paper, we present our experience in the application of methods for the transformation of requirements specifications expressed in natural language into semi-structured specifications. More specifically, we apply a lightweight method for extracting requirements from system descriptions in natural language to support the Secure Tropos methodology during requirements elicitation phase. Our proposal is based on Cerno, a semantic annotation environment, which uses high-speed context-free robust parsing combined with simple word search. To evaluate our proposal, we discuss its application to the requirements elicitation process followed in the course of a European project on four industrial case studies.
C1 [Zannone, Nicola] Univ Toronto, Dept Comp Sci, Toronto, ON M5S 2E4, Canada.
   [Kiyavitskaya, Nadzeya] Univ Trent, Dipartimento Ingn & Sci Informaz, Trento, Italy.
C3 University of Toronto; University of Trento
RP Zannone, N (corresponding author), Univ Toronto, Dept Comp Sci, 40 St George Str, Toronto, ON M5S 2E4, Canada.
EM nadzeya@disi.unitn.it; zannone@cs.toronto.edu
RI Zannone, Nicola/H-1318-2012
OI Zannone, Nicola/0000-0002-9081-5996
CR Ambriola V., 2006, Automated Software Engineering, V13, P107, DOI 10.1007/s10515-006-5468-2
   ASNAR Y, 2006, A1D21 SERENITY CONS
   BANIASSAD E, 2004, P INT C SOFTW ENG
   Breaux TD, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P49
   BRESCIANI P, 2004, J AUTONOMOUS AGENTS, V8, P203, DOI DOI 10.1023/B:AGNT.0000018806.20944.EF
   BURG JFM, 1996, LINGUISTIC INSTRUMEN
   CAMPADELLO S, 2006, A7D21 SERENITY CONS
   CAMPADELLO S, 2006, A7D11 SERENITY CONS
   Chantree F, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P59
   Cole SV, 2006, PROCEEDINGS OF THE IEEE SOUTHEASTCON 2006, P125, DOI 10.1109/second.2006.1629336
   CORDES DW, 1992, J AM SOC INFORM SCI, V43, P62, DOI 10.1002/(SICI)1097-4571(199201)43:1<62::AID-ASI6>3.0.CO;2-C
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   FUCHS NE, 1998, LNCS, V1559, P1
   Giorgini P, 2005, LECT NOTES COMPUT SC, V3655, P237
   Goldin L., 1997, Automated Software Engineering, V4, P375, DOI 10.1023/A:1008617922496
   Handschuh S, 2002, LECT NOTES ARTIF INT, V2473, P358
   HIRST G, 1981, LNCS, V119
   *IBM, 2007, IBM RAT REQUISITEPRO
   Kaiya H, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P223
   Kamsties E., 2001, P 1 WORKSH INSP SOFT, P68
   Kiyavitskaya N., 2007, PROC IEEEACM 22 INT, P429, DOI [10.1145/1321631.1321701, DOI 10.1145/1321631.1321701]
   KIYAVITSKAYA N, 2007, P ENTER 2007
   Kiyavitskaya N, 2006, LECT NOTES ARTIF INT, V4333, P143
   Massacci F, 2005, COMPUT STAND INTER, V27, P445, DOI 10.1016/j.csi.2005.01.003
   MASSACCI F, 2008, SOCIAL MODE IN PRESS
   Massacci Fabio., 2007, HDB ONTOLOGIES BUSIN
   MICH L, 2002, P 3 INT C DAT MIN, P321
   NOBATA C, 1999, P INT C COMP PROC OR
   Ratchev S, 2003, KNOWL-BASED SYST, V16, P1, DOI 10.1016/S0950-7051(02)00027-8
   Resnik P, 1999, J ARTIF INTELL RES, V11, P95, DOI 10.1613/jair.514
   Robertson S, 2012, Mastering the requirements process: getting requirements right
   Sampaio Americo., 2005, P 20 IEEEACM INT C A, P352
   SAMPSON G, 2003, P EACL 03
   Stone A, 2006, IEE P-SOFTW, V153, P211, DOI 10.1049/ip-sen:20060034
   STONE A, 2006, P ICSOFT, V1, P139
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P1089, DOI 10.1109/32.738341
   van Lamsweerde A., 1991, P AAAI SPRING S SERI, P59
   Vargas-Vera M, 2002, LECT NOTES ARTIF INT, V2473, P379
   Yiming Yang, 1999, Information Retrieval, V1, P69, DOI 10.1023/A:1009982220290
   Yu E., 1995, MODELING STRATEGIC R
   Zeni N, 2008, ARES 2008: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON AVAILABILITY, SECURITY AND RELIABILITY, P1437, DOI 10.1109/ARES.2008.79
NR 41
TC 12
Z9 12
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2008
VL 15
IS 2
BP 149
EP 173
DI 10.1007/s10515-008-0028-6
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308YL
UT WOS:000256426700002
DA 2024-07-18
ER

PT J
AU Zhang, X
   Yu, ZW
   Liu, JQ
   Wang, H
   Wang, L
   Guo, B
AF Zhang, Xin
   Yu, Zhiwen
   Liu, Jiaqi
   Wang, Hui
   Wang, Liang
   Guo, Bin
TI HMPT: a human-machine cooperative program translation method
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Program translation; Human-machine cooperation; Neural machine
   translation; Transformer; Interactive machine learning
AB Program translation aims to translate one kind of programming language to another, e.g., from Python to Java. Due to the inefficiency of translation rules construction with pure human effort (software engineer) and the low quality of machine translation results with pure machine effort, it is suggested to implement program translation in a human-machine cooperative way. However, existing human-machine program translation methods fail to utilize the human's ability effectively, which require human to post-edit the results (i.e., statically modified directly on the model generated code). To solve this problem, we propose HMPT (Human-Machine Program Translation), a novel method that achieves program translation based on human-machine cooperation. It can (1) reduce the human effort by introducing a prefix-based interactive protocol that feeds the human's edit into the model as the prefix and regenerates better output code, and (2) reduce the interactive response time resulted by excessive program length in the regeneration process from two aspects: avoiding duplicate prefix generation with cache attention information, as well as reducing invalid suffix generation by splicing the suffix of the results. The experiments are conducted on two real datasets. Results show compared to the baselines, our method reduces the human effort up to 73.5% at the token level and reduces the response time up to 76.1%.
C1 [Zhang, Xin; Yu, Zhiwen; Liu, Jiaqi; Wang, Hui; Wang, Liang; Guo, Bin] Northwestern Polytech Univ, Sch Comp Sci, 1 Dongxiang Rd, Xian 710129, Shaanxi, Peoples R China.
C3 Northwestern Polytechnical University
RP Yu, ZW; Liu, JQ (corresponding author), Northwestern Polytech Univ, Sch Comp Sci, 1 Dongxiang Rd, Xian 710129, Shaanxi, Peoples R China.
EM 2020262928@mail.nwpu.edu.cn; zhiwenyu@nwpu.edu.cn; jqliu@nwpu.edu.cn;
   hui.wang@mail.nwpu.edu.cn; liangwang@nwpu.edu.cn; guob@nwpu.edu.cn
RI Liu, Jiaqi/KCK-0065-2024
OI Liu, Jiaqi/0000-0002-7301-5946
FU National Key R amp;D Program of China [2021ZD0113305]; National Natural
   Science Foundation of China [61960206008, 62002294, 62002292]; National
   Science Fund for Distinguished Young Scholars [62025205]
FX AcknowledgementsThis work was supported in part by the National Key R &D
   Program of China (No. 2021ZD0113305), the National Natural Science
   Foundation of China (No. 61960206008, 62002294, 62002292), and the
   National Science Fund for Distinguished Young Scholars (No. 62025205).
CR Aggarwal K., 2015, Technical report
   Ahmad WU, 2021, Arxiv, DOI arXiv:2108.11590
   Ahmad WU, 2021, 2021 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL-HLT 2021), P2655
   Alabau V, 2014, PATTERN RECOGN, V47, P1217, DOI 10.1016/j.patcog.2013.09.035
   Barrachina S, 2009, COMPUT LINGUIST, V35, P3, DOI 10.1162/coli.2008.07-055-R2-06-29
   Castano A., 1997, 5 EUR C SPEECH COMM, P247
   Chai CL, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P19, DOI 10.1145/3318464.3389772
   Chakraborty Saikat, 2022, ESEC/FSE 2022: Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, P18, DOI 10.1145/3540250.3549162
   Chen XY, 2018, 32 C NEURAL INFORM P, V31
   Cho Kyunghyun, 2014, SYNTAX SEMANTICS STR, P5, DOI [10.3115/v1/w14-4012, 10.3115 /v1/D14-1179, DOI 10.3115/V1/D14-1179]
   Civera J., 2004, P 2004 C EMPIRICAL M, P349
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Drissi M, 2018, Arxiv, DOI [arXiv:1807.01784, 10.48550/arXiv.1807.01784, DOI 10.48550/ARXIV.1807.01784]
   Fan Yang, 2020, Proceedings of the ACM on Human-Computer Interaction, V4, DOI 10.1145/3434183
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   Foster G., 1997, Machine Translation, V12, P175, DOI 10.1023/A:1007999327580
   Gonzalez-Rubio J., 2013, P 2013 C EMPIRICAL M, VD13-1, P244
   Guo D., 2021, ICLR
   Gupta KK, 2020, IEEE IJCNN, DOI 10.1109/ijcnn48605.2020.9207491
   Karaivanov S., 2014, P 2014 ACM INT S NEW, P173, DOI 10.1145/2661136.2661148
   Kelly M., 2020, UNEMPLOYMENT CHECKS
   Kim B, 2018, ACM T INTERACT INTEL, V8, DOI 10.1145/3214366
   Lam TK, 2018, Arxiv, DOI arXiv:1805.01553
   Kingma Diederik P., 2015, P 3 INT C LEARN
   Klein G, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017): SYSTEM DEMONSTRATIONS, P67, DOI 10.18653/v1/P17-4012
   Koehn P, 2014, PROCEEDINGS OF THE 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 2, P574
   Lachaux MA, 2021, ADV NEUR IN, V34
   Nguyen A.T., 2013, P 2013 9 JOINT M FDN, P651
   Niu CG, 2022, PROC INT CONF SOFTW, P2006, DOI 10.1145/3510003.3510096
   Och FJ, 2003, COMPUT LINGUIST, V29, pc, DOI 10.1162/089120103321337421
   Ott M, 2019, Arxiv, DOI arXiv:1904.01038
   Papineni K, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P311, DOI 10.3115/1073083.1073135
   Peris A, 2019, COMPUT SPEECH LANG, V58, P98, DOI 10.1016/j.csl.2019.04.001
   Peris A, 2017, COMPUT SPEECH LANG, V45, P201, DOI 10.1016/j.csl.2016.12.003
   Radford A., 2019, LANGUAGE MODELS ARE
   Raffel C, 2020, J MACH LEARN RES, V21
   Ren S, 2020, Arxiv, DOI [arXiv:2009.10297, 10.48550/arXiv.2009.10297]
   Roziere B., 2021, INT C LEARNING REPRE
   Roziere Baptiste, 2020, processing systems, V33, P20601
   Sanchis-Trilles G., 2014, P 17 ANN C EUROPEAN, P27
   Sennrich R, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P86
   Sundermeyer M., 2014, C EMP METH NAT LANG
   Tomas J., 2006, STAT PHRASE BASED MO, VP06-2, P835
   Ahmad WU, 2022, Arxiv, DOI arXiv:2205.11116
   Ueffing N, 2007, COMPUT LINGUIST, V33, P9, DOI 10.1162/coli.2007.33.1.9
   Vaswani A., 2018, C ASS MACHINE TRANSL
   Vaswani A, 2017, ADV NEUR IN, V30
   Vincent P., 2008, INT C MACH LEARN ICM, P1096, DOI [10.1145/1390156.1390294, DOI 10.1145/1390156.1390294]
   Wang Y, 2021, 2021 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2021), P8696
   Weisz JD, 2022, IUI'22: 27TH INTERNATIONAL CONFERENCE ON INTELLIGENT USER INTERFACES, P369, DOI 10.1145/3490099.3511157
   Weisz JD, 2021, IUI '21 - 26TH INTERNATIONAL CONFERENCE ON INTELLIGENT USER INTERFACES, P402, DOI 10.1145/3397481.3450656
   Weng RX, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P5255
   Yuksel Beste F., 2020, CHI EA '20: Extended Abstracts of the 2020 CHI Conference on Human Factors in Computing Systems, DOI 10.1145/3334480.3382821
   Zamora-Mart F., 2010, MACH TRANSL
   Zhao TX, 2020, AAAI CONF ARTIF INTE, V34, P9660
   Zhiwen Yu, 2021, CCF Transactions on Pervasive Computing and Interaction, V3, P1, DOI 10.1007/s42486-020-00051-1
   Zhu M, 2022, AAAI CONF ARTIF INTE, P11783
NR 57
TC 0
Z9 0
U1 11
U2 19
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 27
DI 10.1007/s10515-023-00395-9
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA P6ZW1
UT WOS:001052146700001
OA hybrid
DA 2024-07-18
ER

PT J
AU Dhaya, R
   Kanthavel, R
AF Dhaya, R.
   Kanthavel, R.
TI Cloud-based multiple importance sampling algorithm with AI based CNN
   classifier for secure infrastructure
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Human upper body parts; Occlusion; MMIS; AI-CNN; Dynamic environment; 2D
   image; 3D image
ID 3D HUMAN POSE; TRACKING
AB Enhancing Security infrastructure in the cloud data center has been a typical task that includes tracking human motion and their body parts under dynamic environment has been a difficult task during video detection situations. The research proposal's goal is to propose the human object video tracking methods to estimate the movement of human upper body actions and classify it under a dynamic environment. Moreover, the movement of upper body parts estimation includes face and arm variation or detections to define the classification problem. Considering the combination of frequent moving object parts with occlusion problems, decision making of target object identification and upper body pose variations will result in improving the classification accuracy. It also helps with a reduction in occlusion of the moving body parts detection. The modified multiple importance sampling filter with AI-based convolution neural network classifier has been proposed to track human poses with fast-moving actions. Dynamic sampling filer tracks the upper part of the human body with 2D images and 3D postures. Finally, similar poses are classified using an updated convolution neural network classifier which is designed for human object classification. The high accuracy of the system has been obtained for cluttered environments with occlusion problems by properly obtaining the sampling states of the filter as shown in the experimental result analysis part.
C1 [Dhaya, R.; Kanthavel, R.] King Khalid Univ, Dept Comp Sci, Sarat Abida Campus, Abha, Saudi Arabia.
   [Dhaya, R.; Kanthavel, R.] King Khalid Univ, Dept Comp Engn, Abha, Saudi Arabia.
C3 King Khalid University; King Khalid University
RP Dhaya, R (corresponding author), King Khalid Univ, Dept Comp Sci, Sarat Abida Campus, Abha, Saudi Arabia.; Dhaya, R (corresponding author), King Khalid Univ, Dept Comp Engn, Abha, Saudi Arabia.
EM dhayavel2005@gmail.com; kanthavel2005@gmail.com
FU King Khalid University, Abha, Kingdom of Saudi Arabia through a Large
   Research Project [RGP/161/42]
FX This research work was fully supported by King Khalid University, Abha,
   Kingdom of Saudi Arabia, for funding this work through a Large Research
   Project under Grant Number RGP/161/42.
CR Agarwal A, 2006, IEEE T PATTERN ANAL, V28, P44, DOI 10.1109/TPAMI.2006.21
   ARIHARAN V, 2015, 2015 IEEE INT C EL C, P1, DOI DOI 10.1109/ICECCT.2015.7226080
   Barros Jilliam Maria Diaz, 2015, 10th International Conference on Computer Vision Theory and Applications (VISAPP 2015). Proceedings, P553
   Bourdev L, 2009, IEEE I CONF COMP VIS, P1365, DOI 10.1109/ICCV.2009.5459303
   Buehler P., 2008, BRIT MACH VIS C, V1, P1101
   Dalal N., 2005, PROC IEEE COMPUT SOC, V1, P886
   del Rincón JM, 2011, IEEE T SYST MAN CY B, V41, P26, DOI 10.1109/TSMCB.2010.2044041
   Eichner Marcin., 2009, BMVC
   Felzenszwalb PF, 2005, INT J COMPUT VISION, V61, P55, DOI 10.1023/B:VISI.0000042934.15159.49
   Ferrari V, 2009, PROC CVPR IEEE, P1, DOI 10.1109/CVPRW.2009.5206495
   Girshick R, 2014, PROC CVPR IEEE, P580, DOI 10.1109/CVPR.2014.81
   Huang CM, 2014, IEEE SENS J, V14, P2267, DOI 10.1109/JSEN.2014.2309256
   Jammalamadaka N., 2015, INT C AUT FAC GES RE, V59, P31
   Labussière M, 2020, FRONT ROBOT AI, V7, DOI 10.3389/frobt.2020.572054
   Lee MW, 2009, IEEE T PATTERN ANAL, V31, P27, DOI 10.1109/TPAMI.2008.35
   Lee MW, 2006, IEEE T PATTERN ANAL, V28, P905, DOI 10.1109/TPAMI.2006.110
   Levi K., 2013, IEEE C COMPUT VIS PA, V1, P60
   Liu CG, 2010, J INTELL ROBOT SYST, V58, P109, DOI 10.1007/s10846-009-9346-6
   Liu MH, 2020, AAAI CONF ARTIF INTE, V34, P11596
   García AL, 2020, IEEE ACCESS, V8, P18681, DOI 10.1109/ACCESS.2020.2964386
   Manakattu SS, 2012, PROCEEDINGS OF THE 2012 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI'12), P459
   Nguyen MT, 2019, COMPUT INTEL NEUROSC, V2019, DOI 10.1155/2019/1353601
   Nowak M, 2021, MULTIMED TOOLS APPL, V80, P15093, DOI 10.1007/s11042-020-10120-3
   Núñez JC, 2017, MULTIMED TOOLS APPL, V76, P4249, DOI 10.1007/s11042-016-3759-6
   Qi F., 2020, J PHYS C SER, DOI [10.1088/1742-6596/1790/1/012089, DOI 10.1088/1742-6596/1790/1/012089]
   Ribeiro D, 2017, PATTERN RECOGN, V61, P641, DOI 10.1016/j.patcog.2016.05.027
   Sedai S, 2013, IEEE T IMAGE PROCESS, V22, P4286, DOI 10.1109/TIP.2013.2271850
   Sermanet P., 2013, INT C LEARN REPR, DOI DOI 10.1016/J.VISRES.2006.11.009
   Sivic J, 2003, NINTH IEEE INTERNATIONAL CONFERENCE ON COMPUTER VISION, VOLS I AND II, PROCEEDINGS, P1470, DOI 10.1109/iccv.2003.1238663
   Veach E., 1995, Computer Graphics Proceedings. SIGGRAPH 95, P419, DOI 10.1145/218380.218498
   Xi ZH, 2015, OPTIK, V126, P2500, DOI 10.1016/j.ijleo.2015.06.020
   Xu TX, 2021, SENSORS-BASEL, V21, DOI 10.3390/s21051684
   Zhang TZ, 2013, INT J COMPUT VISION, V101, P367, DOI 10.1007/s11263-012-0582-z
NR 33
TC 6
Z9 6
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 16
DI 10.1007/s10515-021-00293-y
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UC8MT
UT WOS:000686776800001
DA 2024-07-18
ER

PT J
AU Angerer, F
   Grimmer, A
   Prähofer, H
   Grünbacher, P
AF Angerer, Florian
   Grimmer, Andreas
   Praehofer, Herbert
   Gruenbacher, Paul
TI Change impact analysis for maintenance and evolution of variable
   software systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Change impact analysis; Program analysis; Maintenance; Variability
AB Understanding variability is essential to allow the configuration of software systems to diverse requirements. Variability-aware program analysis techniques have been proposed for analyzing the space of program variants. Such techniques are highly beneficial, e.g., to determine the potential impact of changes during maintenance. This article presents an interprocedural and configuration-aware change impact analysis (CIA) approach for determining the possibly impacted source code elements when changing the source code of a product family. The approach also supports engineers, who are adapting the code of specific product variants after an initial pre-configuration. The approach can be adapted to work with different variability mechanisms, it is more precise than existing CIA approaches, and it can be implemented using standard control flow and data flow analysis. We report evaluation results on the benefit and performance of the approach using industrial product lines.
C1 [Angerer, Florian; Grimmer, Andreas; Gruenbacher, Paul] Johannes Kepler Univ Linz, Christian Doppler Lab MEVSS, Inst Software Syst Engn, Linz, Austria.
   [Praehofer, Herbert] Johannes Kepler Univ Linz, Inst Syst Software, Linz, Austria.
C3 Johannes Kepler University Linz; Johannes Kepler University Linz
RP Grünbacher, P (corresponding author), Johannes Kepler Univ Linz, Christian Doppler Lab MEVSS, Inst Software Syst Engn, Linz, Austria.
EM florian.angerer@jku.at; herbert.praehofer@jku.at;
   paul.gruenbacher@jku.at
RI Grunbacher, Paul/C-2970-2013
OI Grunbacher, Paul/0000-0002-1951-5288
FU Johannes Kepler University Linz; Austrian Federal Ministry for Digital
   and Economic Affairs; National Foundation for Research, Technology and
   Development; Keba AG
FX Open access funding provided by Johannes Kepler University Linz. The
   financial support by the Austrian Federal Ministry for Digital and
   Economic Affairs, the National Foundation for Research, Technology and
   Development, and Keba AG is gratefully acknowledged. We thank Peter
   Feichtinger for implementing the SDG Browser tool.
CR Angerer F, 2014, P 18 INT SOFTW PROD
   Angerer F., 2017, 33 IEEE INT C SOFTW
   Angerer F., 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, P903
   Angerer F, 2015, IEEE INT CONF AUTOM, P385, DOI 10.1109/ASE.2015.58
   [Anonymous], 2001, OPTIMIZING COMPILERS
   [Anonymous], 2001, SOFTWARE PRODUCT LIN
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel Sven., 2013, P 5 INT WORKSHOP FEA, P1, DOI [10.1145/2528265.2528267, DOI 10.1145/2528265.2528267]
   Arnold Robert S., 1996, SOFTWARE CHANGE IMPA
   Berger T, 2010, IEEE RAD CONF, P75, DOI 10.1109/RADAR.2010.5494650
   Black S, 2001, J SOFTW MAINT EVOL-R, V13, P263, DOI 10.1002/smr.233
   Bohner S, 2002, P 27 ANN NASA GODD I
   Brabrand C., 2012, Proceedings of the 11th Annual International Conference on Aspect-oriented Software Development, AOSD '12, P13, DOI DOI 10.1145/2162049.2162052
   Brunelière H, 2014, INFORM SOFTWARE TECH, V56, P1012, DOI 10.1016/j.infsof.2014.04.007
   Cenelec, 2013, 6113132013 IEC
   Chen K., 2001, P IEEE INT C SOFTW M
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Feichtinger P, 2017, THESIS
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Grimmer A, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P460, DOI 10.1109/SANER.2016.15
   Hammer C., 2006, IEEE INT S SECURE SO, P87
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Jász J, 2008, PROC IEEE INT CONF S, P137, DOI 10.1109/ICSM.2008.4658062
   Kästner C, 2014, IEEE T SOFTWARE ENG, V40, P67, DOI 10.1109/TSE.2013.45
   Kästner C, 2012, IT-INF TECHNOL, V54, P42, DOI 10.1524/itit.2012.0662
   Kästner C, 2011, ACM SIGPLAN NOTICES, V46, P805, DOI 10.1145/2076021.2048128
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kernighan B.W., 1988, The C Programming Language
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lam P, 2011, CET US COMP INF WORK
   Lettner D., 2014, P INT EUR SOFTW ENG
   Lettner D., 2014, P INT C SOFTW SYST P
   Lettner D, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE CO-LOCATED WORKSHOPS (SPLC'13 WORKSHOPS), P52
   Liebig J., 2013, P 2013 9 JOINT M FDN, P81, DOI DOI 10.1145/2491411.2491437
   Liebig Jorg, 2010, P 32 ACM IEEE INT C, V1, P105
   Lillack M, 2018, IEEE T SOFTWARE ENG, V44, P1269, DOI 10.1109/TSE.2017.2756048
   Lillack Max, 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, P445, DOI 10.1145/2642937.2643001
   Linsbauer L., 2014, P 30 INT C SOFTW MAI
   Louridas P, 2006, IEEE SOFTWARE, V23, P58, DOI 10.1109/MS.2006.114
   Midtgaard J., 2014, Proceedings of the 13th International Conference on Modularity, P181, DOI DOI 10.1145/2577080.2577091
   Muchnick S., 1997, ADV COMPILER DESIGN
   Nielson F., 1999, Principles of Program Analysis
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Reisner E., 2010, P ACM IEEE INT C SOF, V1, P445, DOI DOI 10.1145/1806799.1806864
   Rubin J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1233, DOI 10.1109/ICSE.2013.6606686
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Snelting G., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P332
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   von Rhein A, 2016, J LOG ALGEBR METHODS, V85, P125, DOI 10.1016/j.jlamp.2015.06.007
   Walkingshaw Eric, 2014, ACM SIGPLAN S NEW ID, P213
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Wöss A, 2003, LECT NOTES COMPUT SC, V2789, P192
   Xu J. Qian, 2005, ACM SIGSOFT Software Engineering Notes, V30, P1, DOI [10.1145/1050849.1050865.36Y, DOI 10.1145/1050849.1050865]
   Xu TY, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P244, DOI 10.1145/2517349.2522727
   Zhang S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P312, DOI 10.1109/ICSE.2013.6606577
NR 58
TC 17
Z9 17
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2019
VL 26
IS 2
BP 417
EP 461
DI 10.1007/s10515-019-00253-7
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HZ9SC
UT WOS:000469196400006
OA hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Xiao, XS
   Tillmann, N
   Fahndrich, M
   de Halleux, J
   Moskal, M
   Xie, T
AF Xiao, Xusheng
   Tillmann, Nikolai
   Fahndrich, Manuel
   de Halleux, J.
   Moskal, Michal
   Xie, Tao
TI User-aware privacy control via extended static-information-flow analysis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Mobile Application; Privacy Control; Information Flow Analysis; Static
   Analysis
ID MODEL
AB Applications in mobile marketplaces may leak private user information without notification. Existing mobile platforms provide little information on how applications use private user data, making it difficult for experts to validate applications and for users to grant applications access to their private data. We propose a user-aware-privacy-control approach, which reveals how private information is used inside applications. We compute static information flows and classify them as safe/unsafe based on a tamper analysis that tracks whether private data is obscured before escaping through output channels. This flow information enables platforms to provide default settings that expose private data for only safe flows, thereby preserving privacy and minimizing decisions required from users. We build our approach into TouchDevelop, an application-creation environment that allows users to write scripts on mobile devices and install scripts published by other users. We evaluate our approach by studying 546 scripts published by 194 users, and the results show that our approach effectively reduces the need to make access-granting choices to only 10.1 % (54) of all scripts. We also conduct a user survey that involves 50 TouchDevelop users to assess the effectiveness and usability of our approach. The results show that 90 % of the users consider our approach useful in protecting their privacy, and 54 % prefer our approach over other privacy-control approaches.
C1 [Xiao, Xusheng] NEC Labs Amer, Princeton, NJ 08540 USA.
   [Tillmann, Nikolai; Fahndrich, Manuel; de Halleux, J.; Moskal, Michal] Microsoft Res, Redmond, WA USA.
   [Xie, Tao] Univ Illinois, Dept Comp Sci, Urbana, IL USA.
C3 NEC Corporation; Microsoft; University of Illinois System; University of
   Illinois Urbana-Champaign
RP Xiao, XS (corresponding author), NEC Labs Amer, Princeton, NJ 08540 USA.
EM xsxiao@nec-labs.com; nikolait@microsoft.com; jhalleux@microsoft.com;
   micmo@microsoft.com; taoxie@illinois.edu
RI Xiao, Xusheng/KIC-3760-2024
OI Xiao, Xusheng/0000-0003-4797-4294; Moskal, Michal/0000-0001-5791-2228
CR [Anonymous], 2011, MICROSOFT WHAT IS US
   [Anonymous], P CCS
   [Anonymous], 2011, TouchDevelop
   [Anonymous], 2010, P USENIX S OP SYST D
   Askarov A, 2010, LECT NOTES COMPUT SC, V6012, P64, DOI 10.1007/978-3-642-11957-6_5
   Budi A, 2011, ACM SIGPLAN NOTICES, V46, P447, DOI 10.1145/1993316.1993551
   Castro M, 2008, ACM SIGPLAN NOTICES, V43, P319, DOI 10.1145/1353536.1346322
   Clause J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P21, DOI 10.1145/1985793.1985797
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Egele Manuel, 2011, P NDSS
   Enck W., 2011, P USENIX SEC S P USENIX SEC S
   Enck W, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P235
   Felt A.P., 2011, P WEBAPPS
   Felt A. P., 2011, P 1 ACM WORKSH SEC P, P3, DOI DOI 10.1145/2046614.2046618
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Gilbert P., 2011, P 2 INT WORKSHOP MOB, P21, DOI DOI 10.1145/1999732.1999740
   Grechanik Mark, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P368, DOI 10.1109/ISSRE.2010.13
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Hornyack P, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P639
   Howard F., MALWARE YOUR MOCHA O
   Kang M.G., 2011, P NDSS SAN DIEGO CA
   Li S., 2013, P VL HCC
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Myers AC, 2000, ACM T SOFTW ENG METH, V9, P410, DOI 10.1145/363516.363526
   Roesner Franziska., 2011, User-driven access control: A new model for granting permissions in modern operating systems
   Roy I, 2009, ACM SIGPLAN NOTICES, V44, P63, DOI 10.1145/1543135.1542484
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   SALTZER JH, 1975, P IEEE, V63, P1278, DOI 10.1109/PROC.1975.9939
   Shieh S.-P. W., 1990, Proceedings. 1990 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.90CH2884-5), P285, DOI 10.1109/RISP.1990.63858
   Taneja K., 2011, ESECFSE, P201
   Tillmann N., 2011, MSRTR201149
   Vidas T., 2011, P W2SP OAKL CA MAY
   Wetherall D., 2011, Proc. HotOS '13, P21
   Xiao XS, 2012, IEEE INT CONF AUTOM, P80, DOI 10.1145/2351676.2351689
   Xie Y., 2006, P USENIX SEC
   Zhu David Yu, 2011, Operating Systems Review, V45, P142, DOI 10.1145/1945023.1945039
NR 38
TC 5
Z9 6
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2015
VL 22
IS 3
SI SI
BP 333
EP 366
DI 10.1007/s10515-014-0166-y
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CM4JQ
UT WOS:000357651200003
DA 2024-07-18
ER

PT J
AU Lo, D
   Maoz, S
AF Lo, David
   Maoz, Shahar
TI Scenario-based and value-based specification mining: better together
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Specification mining; Dynamic analysis; Live sequence charts;
   Value-based invariants
ID TEMPORAL SPECIFICATIONS; LSCS; INFERENCE; COMPILER; SYSTEMS
AB Specification mining takes execution traces as input and extracts likely program invariants, which can be used for comprehension, verification, and evolution related tasks. In this work we integrate scenario-based specification mining, which uses a data-mining algorithm to suggest ordering constraints in the form of live sequence charts, an inter-object, visual, modal, scenario-based specification language, with mining of value-based invariants, which detects likely invariants holding at specific program points. The key to the integration is a technique we call scenario-based slicing, running on top of the mining algorithms to distinguish the scenario-specific invariants from the general ones. The resulting suggested specifications are rich, consisting of modal scenarios annotated with scenario-specific value-based invariants, referring to event parameters and participating object properties.
   We have implemented the mining algorithm and the visual presentation of the mined scenarios within a standard development environment. An evaluation of our work over a number of case studies shows promising results in extracting expressive specifications from real programs, which could not be extracted previously. The more expressive the mined specifications, the higher their potential to support program comprehension and testing.
C1 [Lo, David] Singapore Management Univ, Sch Informat Syst, Singapore, Singapore.
   [Maoz, Shahar] Rhein Westfal TH Aachen, Dept Comp Sci 3, Aachen, Germany.
C3 Singapore Management University; RWTH Aachen University
RP Lo, D (corresponding author), Singapore Management Univ, Sch Informat Syst, Singapore, Singapore.
EM davidlo@smu.edu.sg; maoz@se-rwth.de
RI Lo, David/A-2493-2012
OI Lo, David/0000-0002-4367-7201; Maoz, Shahar/0000-0002-4022-5349
CR Acharya M, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P311
   Acharya Mithun, 2007, P 6 JOINT M EUROPEAN, P25, DOI [DOI 10.1145/1287624.1287630, 10.1145/1287624.1287630]
   AGRAWAL R, 1995, PROC INT CONF DATA, P3, DOI 10.1109/ICDE.1995.380415
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], 2011, ACCOMPANYING WEBSITE
   [Anonymous], 1994, P INT C VERY LARGE D
   [Anonymous], 2007, P 2007 INT S SOFTWAR
   [Anonymous], CSSE0310040 CORR
   Boshernitsan M., 2006, ISSTA, P169
   Dallmeier V., 2006, P 2006 INT WORKSH DY, P17, DOI DOI 10.1145/1138912.1138918
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   ELRAMLY M, 2002, P 8 ACM SIGKDD INT C, P315
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Gabel M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P51, DOI 10.1145/1368088.1368096
   Guo PhilipJ., 2006, P 2006 INT S SOFTWAR, P255
   Han J., 2000, ACM SIGKDD Explor. Newslett., V2, P14
   Han J., 2006, DATA MINING CONCEPTS, DOI 10.1016/C2009-0-61819-5
   Harel D, 2001, COMPUTER, V34, P53, DOI 10.1109/2.895118
   Harel D, 2010, P IEEE ACM INT C AUT, P359
   Harel D, 2008, SOFTW SYST MODEL, V7, P237, DOI 10.1007/s10270-007-0054-z
   Harel D, 2007, LECT NOTES COMPUT SC, V4422, P121
   Jerding DF, 1997, PROC INT CONF SOFTW, P360, DOI 10.1145/253228.253356
   Klein F, 2007, LECT NOTES COMPUT SC, V4422, P185
   Klose J, 2006, LECT NOTES COMPUT SC, V4144, P219, DOI 10.1007/11817963_22
   Krüger IH, 2003, LECT NOTES COMPUT SC, V2621, P387
   Kugler H, 2005, LECT NOTES COMPUT SC, V3440, P445
   Kugler H, 2009, LECT NOTES COMPUT SC, V5505, P77, DOI 10.1007/978-3-642-00768-2_9
   Le Goues C, 2009, LECT NOTES COMPUT SC, V5505, P292, DOI 10.1007/978-3-642-00768-2_26
   Lettrari Marc., 2001, Proceedings of the 4th International Conference on The Unified Modeling Language, Modeling Languages, Concepts, and Tools (UML'01), P317
   Li J., 2006, P C ART INT AAAI
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   Livshits V. B., 2009, PLDI, P75, DOI DOI 10.1145/1542476.1542485
   Lo David, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P109, DOI 10.1109/ASE.2008.21
   Lo D., 2008, Proceedings of the 2008 siam international conference on data mining, P553, DOI DOI 10.1137/1.9781611972788.51
   Lo D., 2006, SIGSOFT FSE, P265
   Lo D, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P231, DOI 10.1109/ICECCS.2011.30
   Lo D, 2009, WORK CONF REVERSE EN, P62, DOI 10.1109/WCRE.2009.42
   Lo D, 2009, IEEE INT CONF AUTOM, P359, DOI 10.1109/ASE.2009.19
   Lo David., 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, ASE '10, P387
   Lo David., 2008, P 8 ACM SIGPLAN SIGS, P29, DOI DOI 10.1145/1512475.1512482
   Lo David, 2007, ASE'07, P465, DOI DOI 10.1145/1321631.1321710
   Lorenzoli D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P501, DOI 10.1145/1368088.1368157
   Maoz S, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000804
   Maoz S, 2009, LECT NOTES COMPUT SC, V5795, P301, DOI 10.1007/978-3-642-04425-0_22
   Mariani L, 2005, IEEE INT C ENG COMP, P292
   Mariani L, 2007, PROC INT CONF SOFTW, P85
   Milea N., 2011, P INT C RUNT VER RV
   OLENDER KM, 1990, IEEE T SOFTWARE ENG, V16, P268, DOI 10.1109/32.48935
   Quante J, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P219, DOI 10.1109/WCRE.2007.24
   Ramanathan MK, 2007, PROC INT CONF SOFTW, P240
   Ramanathan MK, 2007, ACM SIGPLAN NOTICES, V42, P123, DOI 10.1145/1273442.1250749
   Safyallah H, 2006, INT C PROGRAM COMPRE, P84, DOI 10.1109/ICPC.2006.19
   Santelices Raul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P218, DOI 10.1109/ASE.2008.32
   Sibay G, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P41, DOI 10.1145/1368088.1368095
   Sun J, 2005, LECT NOTES COMPUT SC, V3582, P415
   Uchitel S., 2001, Software Engineering Notes, V26, P74, DOI 10.1145/503271.503220
   Vasudevan P, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P289, DOI 10.1109/SERA.2006.25
   Wang J., 2003, KDD'03, P236, DOI [10.1145/956750.956779, DOI 10.1145/956750.956779]
   Wang JY, 2004, PROC INT CONF DATA, P79, DOI 10.1109/ICDE.2004.1319986
   Wasylkowski A, 2011, AUTOMAT SOFTW ENG, V18, P263, DOI 10.1007/s10515-011-0084-1
   Wasylkowski A, 2009, IEEE INT CONF AUTOM, P295, DOI 10.1109/ASE.2009.30
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   Xie T, 2009, COMPUTER, V42, P55, DOI 10.1109/MC.2009.256
   Xu Z., 2010, PROC GECCO, P1365
NR 66
TC 27
Z9 27
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2012
VL 19
IS 4
SI SI
BP 423
EP 458
DI 10.1007/s10515-012-0103-x
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 988QT
UT WOS:000307506300003
OA Green Submitted, Green Published, Green Accepted
DA 2024-07-18
ER

PT J
AU Xie, XY
   Jin, S
   Chen, SQ
AF Xie, Xiaoyuan
   Jin, Shuo
   Chen, Songqiang
TI QAASKER<SUP>+</SUP>: a novel testing method for question answering
   software via asking recursive questions
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Question answering; Testing and validation; Recursive metamorphic
   testing; Natural language processing
AB Question Answering (QA) is an attractive and challenging area in NLP community. With the development of QA technique, plenty of QA software has been applied in daily human life to provide convenient access of information retrieval. To investigate the performance of QA software, many benchmark datasets have been constructed to provide various test cases. However, current QA software is mainly tested in a reference-based paradigm, in which the expected outputs (labels) of test cases are mandatory to be annotated with much human effort before testing. As a result, neither the just-in-time test during usage nor the extensible test on massive unlabeled real-life data is feasible, which keeps the current testing of QA software from being flexible and sufficient. In this work, we propose a novel testing method, qaAskeR (+), with five new Metamorphic Relations for QA software. qaAskeR (+) does not refer to the annotated labels of test cases. Instead, based on the idea that a correct answer should imply a piece of reliable knowledge that always conforms with any other correct answer, qaAskeR (+) tests QA software by inspecting its behaviors on multiple recursively asked questions that are relevant to the same or some further enriched knowledge. Experimental results show that qaAskeR (+) can reveal quite a few violations that indicate actual answering issues on various mainstream QA software without using any pre-annotated labels.
C1 [Xie, Xiaoyuan; Jin, Shuo; Chen, Songqiang] Wuhan Univ, Sch Comp Sci, Wuhan, Peoples R China.
C3 Wuhan University
RP Xie, XY; Chen, SQ (corresponding author), Wuhan Univ, Sch Comp Sci, Wuhan, Peoples R China.
EM xxie@whu.edu.cn; imjinshuo@whu.edu.cn; i9schen@gmail.com
RI CHEN, Songqiang/JZD-6315-2024
OI CHEN, Songqiang/0000-0002-1220-8728
FU National Natural Science Foundation of China [62250610224, 61972289,
   61832009]
FX We first sincerely appreciate the positive acknowledgment and the very
   kind suggestions from the anonymous reviewers for both our conference
   paper and this extended journal paper. This work was partially supported
   by the National Natural Science Foundation of China under the grant
   numbers 62250610224, 61972289, and 61832009. And the numerical
   calculations in this work have been partially done on the supercomputing
   system in the Supercomputing Center of Wuhan University.
CR Azmy Michael, 2018, P 27 INT C COMP LING, P2093
   Bao Junwei, 2016, P COLING 2016 26 INT, P2503
   Berant J., 2013, P 2013 C EMPIRICAL M, P1533
   Bollacker K., 2008, P 2008 ACM SIGMOD IN, P1247, DOI 10.1145/1376616.1376746
   Chandar S, 2016, Arxiv, DOI arXiv:1605.07427
   Chen DQ, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1870, DOI 10.18653/v1/P17-1171
   Chen SQ, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P104, DOI 10.1109/ASE51524.2021.9678670
   Chen SQ, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P590, DOI 10.1145/3468264.3468569
   Chen T.Y., 1998, Metamorphic testing: a new approach for generating next test cases
   Chen TY, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3143561
   Chen TY, 2004, ELEVENTH ANNUAL INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P94
   Clark C, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P2924
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   De Smedt T, 2012, J MACH LEARN RES, V13, P2063
   Dong L., 2019, CoRR
   Dzendzik D, 2021, Arxiv, DOI arXiv:2101.10421
   Eger S, 2020, 1ST CONFERENCE OF THE ASIA-PACIFIC CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 10TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (AACL-IJCNLP 2020), P786
   Gardner M, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1307
   Gupta M, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4996
   Gupta S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P863, DOI 10.1145/3368089.3409756
   Han JL, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1475
   He GL, 2021, WSDM '21: PROCEEDINGS OF THE 14TH ACM INTERNATIONAL CONFERENCE ON WEB SEARCH AND DATA MINING, P535, DOI 10.1145/3437963.3441753
   He PJ, 2020, PROC INT CONF SOFTW, P961, DOI 10.1145/3377811.3380339
   He PJ, 2021, PROC INT CONF SOFTW, P410, DOI 10.1109/ICSE43902.2021.00047
   He W, 2018, MACHINE READING FOR QUESTION ANSWERING, P37
   Jia R., 2017, P 2017 C EMP METH NA, P2021, DOI [10.18653/v1/D17-1215, DOI 10.18653/V1/D17-1215, DOI 10.18653/V1/D17-1215.URL]
   Jin Q, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P2567
   Khashabi D, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1896
   Khashabi Daniel, 2018, P 2018 C N AM CHAPTE, V1, P252, DOI 10.18653/v1/N18-1023
   Kitaev N, 2018, PROCEEDINGS OF THE 56TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL), VOL 1, P2676
   Kwiatkowski T, 2019, T ASSOC COMPUT LING, V7, P453, DOI 10.1162/tacl_a_00276/1923288
   Lai Guokun, 2017, P 2017 C EMPIRICAL M, DOI [10.18653/v1/D17-1082, DOI 10.18653/V1/D17-1082]
   Lan Y., 2021, P 30 INT JOINT C ART, P4483, DOI [10.24963/ijcai.2021/611, DOI 10.24963/IJCAI.2021/611, 10.24963/IJCAI.2021/611]
   Lan YS, 2020, 58TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2020), P969
   Lehmann J, 2015, SEMANT WEB, V6, P167, DOI 10.3233/SW-140134
   Lin CY, 2004, ROUGE: A Package for Automatic Evaluation of Summaries, P74, DOI DOI 10.1253/JCJ.34.1213
   Liu YH, 2019, Arxiv, DOI arXiv:1907.11692
   Liu ZX, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P115, DOI 10.1145/3460319.3464829
   Longpre S, 2021, Arxiv, DOI arXiv:2007.15207
   Nguyen T., 2016, P 2016 WORKSHOP COGN, V1773
   Northcutt CG, 2021, Arxiv, DOI arXiv:2103.14749
   Onishi Takeshi, 2016, EMNLP
   Raffel C, 2020, J MACH LEARN RES, V21
   Rajpurkar P., 2016, P 2016 C EMP METH NA, V2016, P2383
   Rajpurkar P, 2018, PROCEEDINGS OF THE 56TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 2, P784
   Rehurek R., 2010, P LREC 2010 WORKSH N, P45, DOI DOI 10.13140/2.1.2393.1847
   Ribeiro M. T., 2020, P 58 ANN M ASS COMPU, P4902
   Sun ZY, 2022, PROC INT CONF SOFTW, P1181, DOI 10.1145/3510003.3510206
   Sun ZY, 2020, PROC INT CONF SOFTW, P974, DOI 10.1145/3377811.3380420
   Suster S., 2018, P 2018 C N AM CHAPT, DOI [10.18653/v1/N18-1140, DOI 10.18653/V1/N18-1140]
   Tafjord O, 2021, Arxiv, DOI arXiv:2109.02593
   Tanon TP, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB (WWW'16), P1419, DOI 10.1145/2872427.2874809
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Trivedi P, 2017, LECT NOTES COMPUT SC, V10588, P210, DOI 10.1007/978-3-319-68204-4_22
   Wang S, 2020, IEEE INT CONF AUTOM, P1053, DOI 10.1145/3324884.3416584
   Wang X., 2020, P 28 INT C COMPUTATI, P2572
   Xie XY, 2020, IEEE T RELIAB, V69, P1293, DOI 10.1109/TR.2020.2972266
   Xie XY, 2011, J SYST SOFTWARE, V84, P544, DOI 10.1016/j.jss.2010.11.920
   Yan BY, 2019, 2019 IEEE/ACM 4TH INTERNATIONAL WORKSHOP ON METAMORPHIC TESTING (MET 2019), P70, DOI 10.1109/MET.2019.00018
   Yang Z, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P2369
   Yani M, 2021, INFORMATION, V12, DOI 10.3390/info12070271
   Yih WT, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2016), VOL 2, P201
   Zhang MS, 2018, IEEE INT CONF AUTOM, P132, DOI 10.1145/3238147.3238187
   Zhang ZS, 2020, Arxiv, DOI arXiv:2005.06249
   Zhou ZQ, 2019, COMMUN ACM, V62, P61, DOI 10.1145/3241979
   Zhou ZQ, 2016, IEEE T SOFTWARE ENG, V42, P264, DOI 10.1109/TSE.2015.2478001
NR 66
TC 1
Z9 1
U1 2
U2 12
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
AR 14
DI 10.1007/s10515-023-00380-2
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA C5OI4
UT WOS:000962402500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Assavakamhaenghan, N
   Tanaphantaruk, W
   Suwanworaboon, P
   Choetkiertikul, M
   Tuarob, S
AF Assavakamhaenghan, Noppadol
   Tanaphantaruk, Waralee
   Suwanworaboon, Ponlakit
   Choetkiertikul, Morakot
   Tuarob, Suppawong
TI Quantifying effectiveness of team recommendation for collaborative
   software development
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Collaborative software development; Machine learning; Knowledge graph;
   Software team effectiveness; Team recommendation
ID PROCESS IMPROVEMENT; SUCCESS FACTORS; PERFORMANCE; MANAGEMENT;
   FRAMEWORK; RISKS
AB It is undeniable that software development is a team-based activity. The quality of the delivered product highly depends on the team configuration. However, selecting an appropriate team to complete a software task is non-trivial, as it needs to consider team compatibility in multiple aspects. While extensive literature introduced multiple team recommendation algorithms, such algorithms are not designed to support the specific roles in software teams. This paper proposes a novel set of metrics for measuring five dimensions of a software team's effectiveness, including historical collaboration, team cohesiveness, teammate interaction, team members' expertise, and role experience. Furthermore, Wining Experience-based Software Team RECommendation (WESTREC) is introduced to solve the software team recommendation problem. WESTREC considers multiple aspects of team characteristics, including historical collaboration, team cohesiveness, teammate interaction, project description, team members' expertise, and role experience. Specifically, given a software project, a machine learning based team scoring function is used along with the Max-Logit algorithm to approximate and recommend suitable software team configurations for the given task. We validate the effectiveness of the WESTREC on real-world software development datasets (i.e., Atlassian and Apache). Furthermore, we study the factors that affect the performance of collaborative software development and propose a method to evaluate the effectiveness of a software team. The results show that WESTREC outperforms state-of-the-art baseline approaches in three out of five groups of team effectiveness metrics associated with different team characteristics in large software systems. Our research findings not only illustrate the efficacy of automatic software team evaluation using machine learning techniques but also serve as building blocks for potential applications that involve automatic team formation and evaluation, such as automatic recommendation of research collaborators and grouping personnel for team-based projects.
C1 [Assavakamhaenghan, Noppadol; Tanaphantaruk, Waralee; Suwanworaboon, Ponlakit; Choetkiertikul, Morakot; Tuarob, Suppawong] Mahidol Univ, Fac Informat & Commun Technol, Salaya, Nakhon Pathom, Thailand.
C3 Mahidol University
RP Tuarob, S (corresponding author), Mahidol Univ, Fac Informat & Commun Technol, Salaya, Nakhon Pathom, Thailand.
EM noppadol.ass@student.mahidol.edu; waralee.tan@student.mahidol.edu;
   ponlakit.suw@student.mahidol.edu; morakot.cho@mahidol.edu;
   suppawong.tua@mahidol.edu
OI Tuarob, Suppawong/0000-0002-5201-5699
FU Thailand Science Research and Innovation (TSRI); National Research
   Council of Thailand (NRCT) [RSA6280105]; Mahidol University
   [MU-MiniRC02/2564]
FX This research is supported by the Thailand Science Research and
   Innovation (TSRI), formerly known as Thailand Research Fund (TRF), and
   the National Research Council of Thailand (NRCT) through Grant No.
   RSA6280105. We also appreciate computing resources from Mahidol
   University (Grant No. MU-MiniRC02/2564).
CR Akbar MA, 2019, J COMPUT LANG, V51, P112, DOI 10.1016/j.cola.2018.12.005
   Alberola JM, 2016, KNOWL-BASED SYST, V101, P1, DOI 10.1016/j.knosys.2016.02.010
   Alsharo M, 2017, INFORM MANAGE-AMSTER, V54, P479, DOI 10.1016/j.im.2016.10.005
   [Anonymous], 2007, THESIS
   [Anonymous], 2015, CHAOS REPORT 2015
   Assavakamhaenghan N, 2019, INT WORKSH EMPIR ENG, P19, DOI 10.1109/IWESEP49350.2019.00012
   Beaver J.M., 2006, SIGSOFT SOFTW ENG NO, V31, P1, DOI DOI 10.1145/1127878.1127882
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Chen R, 2017, INT J PROD RES, V55, P6207, DOI 10.1080/00207543.2017.1326641
   Chipulu M, 2014, INT J OPER PROD MAN, V34, P364, DOI 10.1108/IJOPM-04-2012-0156
   Choetkiertikul M, 2017, EMPIR SOFTW ENG, V22, P1223, DOI 10.1007/s10664-016-9496-7
   Chow T, 2008, J SYST SOFTWARE, V81, P961, DOI 10.1016/j.jss.2007.08.020
   Colazo JA, 2010, INT J INNOV MANAG, V14, P735, DOI 10.1142/S1363919610002866
   Cunliffe M.O. Wurl., 2014, Guide to best practices to study the ocean's surface
   Datta A., 2011, Proceedings of the 20th international conference companion on World wide web, WWW '11, P201
   Datta A., 2011, T RECS TEAM RECOMMEN, P201, DOI [10.1145/1963192.1963289, DOI 10.1145/1963192.1963289]
   Dingsoyr T., 2012, 2012 5th International Workshop on Cooperative and Human Aspects of Software Engineering, P27, DOI 10.1109/CHASE.2012.6223016
   Dingsoyr T, 2016, IEEE SOFTWARE, V33, P106, DOI 10.1109/MS.2016.100
   Dubinsky Y., 2004, ROLES AGILE SOFTWARE, P157, DOI [10.1007/978-3-540-24853-8_18, DOI 10.1007/978-3-540-24853-8_18]
   Fagerholm Fabian, 2014, P 18 INT C EVALUATIO, DOI [10.1145/2601248.2601285, DOI 10.1145/2601248.2601285]
   Faraj S, 2000, MANAGE SCI, V46, P1554, DOI 10.1287/mnsc.46.12.1554.12072
   Foster E.C., 2014, SOFTWARE ENG, P253
   Franzago M, 2018, IEEE T SOFTWARE ENG, V44, P1146, DOI 10.1109/TSE.2017.2755039
   Guha R., 2004, P 13 INT C WORLD WID, P403, DOI DOI 10.1145/988672.988727
   Günsel A, 2012, PROCD SOC BEHV, V58, P853, DOI 10.1016/j.sbspro.2012.09.1063
   Han WM, 2007, J SYST SOFTWARE, V80, P42, DOI 10.1016/j.jss.2006.04.030
   Huckman RS, 2009, MANAGE SCI, V55, P85, DOI 10.1287/mnsc.1080.0921
   Hupa A, 2010, COMPUT COMMUN NETW S, P319, DOI 10.1007/978-1-84882-229-0_12
   Jiang J, 2000, J SYST SOFTWARE, V52, P3, DOI 10.1016/S0164-1212(99)00128-4
   Jiang J.J., 2000, PROJ MANAG J, V31, P19, DOI DOI 10.1177/875697280003100404
   Khan AA, 2017, APPL COMPUT REV, V17, P5, DOI 10.1145/3131080.3131081
   Khan AA, 2017, INFORM SOFTWARE TECH, V87, P180, DOI 10.1016/j.infsof.2017.03.006
   Khan AA, 2014, PROCD SOC BEHV, V129, P496, DOI 10.1016/j.sbspro.2014.03.706
   Lappas T, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P467
   Lindsjorn Y, 2016, J SYST SOFTWARE, V122, P274, DOI 10.1016/j.jss.2016.09.028
   Liu H., 2014, MACHINE LEARNING APP, DOI [10.13140/2.1.4558.4966, DOI 10.13140/2.1.4558.4966]
   Liu HT, 2016, INT CONF SEMANT, P1, DOI [10.1109/SKG.2016.11, 10.1109/SKG.2016.009]
   Maalej W, 2017, J SYST SOFTWARE, V128, P267, DOI 10.1016/j.jss.2016.11.033
   Martinez-Vazquez J., 2011, IMPACT FISCAL DECENT
   Monderer D, 1996, GAME ECON BEHAV, V14, P124, DOI 10.1006/game.1996.0044
   MUDRACK PE, 1989, SMALL GROUP BEHAV, V20, P37, DOI 10.1177/104649648902000103
   Naguib H, 2013, IEEE WORK CONF MIN S, P22, DOI 10.1109/MSR.2013.6623999
   Niazi M, 2016, INT J PROJ MANAG, V34, P1553, DOI 10.1016/j.ijproman.2016.08.008
   Niazi M, 2010, INFORM SOFTWARE TECH, V52, P1204, DOI 10.1016/j.infsof.2010.06.005
   OliverBossert J.L., 2018, MCKIN Q, V10, P30
   Qiao WX, 2021, INFORM PROCESS MANAG, V58, DOI 10.1016/j.ipm.2021.102634
   Rahman MM, 2016, IEEE INT CONF AUTOM, P792, DOI 10.1145/2970276.2970283
   Rebai S, 2020, AUTOMAT SOFTW ENG, V27, P301, DOI 10.1007/s10515-020-00275-6
   Rosenkranze C., 2011, P 32 INT C INF SYST
   Sokolov E, 2017, SOFTWARE DEV PRODUCT
   Sommerville I., 2004, Software Engineering
   Song Yang., 2011, P 17 ANN INT C MOBIL, P325
   Storey MA, 2017, IEEE T SOFTWARE ENG, V43, P185, DOI 10.1109/TSE.2016.2584053
   Storn R, 1997, J GLOBAL OPTIM, V11, P341, DOI 10.1023/A:1008202821328
   Tuarob S, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09966-4
   Wang XY, 2015, LECT NOTES COMPUT SC, V9049, P389, DOI 10.1007/978-3-319-18120-2_23
   Wick C.T., 1999, THESIS
   Wieland K, 2013, COMPUT SUPP COOP W J, V22, P181, DOI 10.1007/s10606-012-9172-4
   Xinyu Wang, 2016, IEEE Transactions on Big Data, V2, P70, DOI 10.1109/TBDATA.2016.2546303
   Xu CY, 2018, J SYST SOFTWARE, V142, P195, DOI 10.1016/j.jss.2018.04.060
   Yang H, 2021, INFORM PROCESS MANAG, V58, DOI 10.1016/j.ipm.2020.102421
   Ye LT, 2018, IEEE INT CONF AUTOM, P808, DOI 10.1145/3238147.3240472
   Zhang ZY, 2020, EMPIR SOFTW ENG, V25, P859, DOI 10.1007/s10664-019-09755-0
   Zhu HB, 2006, IEEE T SYST MAN CY A, V36, P1110, DOI 10.1109/TSMCA.2006.883170
NR 64
TC 5
Z9 5
U1 4
U2 21
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 51
DI 10.1007/s10515-022-00357-7
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W1ZC
UT WOS:000842150700001
DA 2024-07-18
ER

PT J
AU Sheth, V
   Damevski, K
AF Sheth, Viral
   Damevski, Kostadin
TI Grouping related stack overflow comments for software developer
   recommendation
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software developer discussions; Developer forums; Stack overflow;
   Comment grouping; Comment ranking
AB Stack Overflow is a question and answer forum widely used by developers all over the world. Contributors share their knowledge on this platform not only in the form of answers, but also as comments to those answers. With millions of developer-contributed comments, the valuable knowledge contained within them remains difficult to locate by readers. Moreover, Stack Overflow's comment hiding mechanism that only shows the top five most highly voted comments and hides the remaining leads to wealth condensation. Recently, researchers have observed that the Stack Overflow's comment display mechanism hides important and relevant comments and makes it difficult for readers to understand the conversational context, as many comments are related to other hidden comments. In this paper, we propose a set of features and a machine learning-based technique to identify the relatedness of pairs of comments. Further, we extend the relatedness into comment clustering, as, with clusters, readers can get the entire context of a set of comments that form a single conversational thread. We evaluate our methods against several baselines to show that they provide strong improvements, although the problem in general is made difficult by the short text and narrow topic of discussion in the comments.
C1 [Sheth, Viral; Damevski, Kostadin] Virginia Commonwealth Univ, Dept Comp Sci, Richmond, VA 23284 USA.
C3 Virginia Commonwealth University
RP Sheth, V (corresponding author), Virginia Commonwealth Univ, Dept Comp Sci, Richmond, VA 23284 USA.
EM shethvh@vcu.edu; kdamevski@vcu.edu
RI Damevski, Kostadin/F-4476-2014
OI Damevski, Kostadin/0000-0001-7799-2026
CR Aggarwal A, 2016, PROCEEDINGS OF THE 27TH ACM CONFERENCE ON HYPERTEXT AND SOCIAL MEDIA (HT'16), P179, DOI 10.1145/2914586.2914636
   Bird S., 2004, P ACL INTERACTIVE PO, P214
   Calefato F, 2017, INT CONF AFFECT, P79, DOI 10.1109/ACIIW.2017.8272591
   Diyanati A, 2020, J COMPUT LANG, V61, DOI 10.1016/j.cola.2020.101000
   Elsner M, 2010, COMPUT LINGUIST, V36, P389, DOI 10.1162/coli_a_00003
   Ericson J, WEALTH CONDENSATION
   Imran M.M., 2021, P 18 INT C MIN SOFTW
   Jiang J-Y, 2018, P 2018 C N AM CHAPTE, V1, P1812
   Kummerfeld J.K., 2018, ARXIV PREPRINT ARXIV
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Mikolov Tomas, 2013, Preprints
   Novielli N, 2018, IEEE WORK CONF MIN S, P14, DOI 10.1145/3196398.3196453
   Pennington J., 2014, P 2014 C EMP METH NA, P1532
   Ponzanelli L, 2014, PROC IEEE INT CONF S, P541, DOI 10.1109/ICSME.2014.90
   Rahman MM, 2015, IEEE INT WORK C SO, P81, DOI 10.1109/SCAM.2015.7335404
   Rehurek R., 2010, LREC, DOI DOI 10.13140/2.1.2393.1847
   Sengupta S, 2020, P 53 HAW INT C SYST, P2898, DOI DOI 10.24251/HICSS.2020.354
   Shi L, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P391, DOI 10.1145/3468264.3468562
   Stocker G, COMMENT EXPLOSION
   Yao Y, 2017, IEEE T KNOWL DATA EN, V29, P1723, DOI 10.1109/TKDE.2017.2696535
   Zhang H., 2019, ARXIV190400946
   Zhang HX, 2021, IEEE T SOFTWARE ENG, V47, P2520, DOI 10.1109/TSE.2019.2954319
   Zhang HX, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3434279
NR 23
TC 0
Z9 0
U1 1
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 40
DI 10.1007/s10515-022-00339-9
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0W2JC
UT WOS:000788858900001
DA 2024-07-18
ER

PT J
AU Pérez, F
   Font, J
   Arcega, L
   Cetina, C
AF Perez, Francisca
   Font, Jaime
   Arcega, Lorena
   Cetina, Carlos
TI Collaborative feature location in models through automatic query
   expansion
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Query expansion; Collaborative information retrieval; Feature location;
   Search-based software engineering; Model driven engineering
ID SOURCE CODE; SOFTWARE; STATISTICS
AB Collaboration with other people is a major theme in the information-seeking process. However, most existing works that address the location of features during the maintenance or evolution of software do not support collaboration, or they are focused on code as the main software artifact. Hence, collaborative feature location in models has not enjoyed much attention to date. In this work, we address this concern by proposing an approach, CoFLiM, that enables the collaboration of several domain experts in order to locate the model fragment of a target feature. CoFLiM uses the feature descriptions of the domain experts and their self-rated confidence level to automatically reformulate the relevant feature descriptions in a single query. This query guides the evolutionary algorithm of our approach that finds the model fragment of the feature being located. We evaluate CoFLiM in a real-world case study from our industrial partner. We analyze the impact of CoFLiM in terms of recall, precision, and the F-measure. Moreover, we compare the reformulation of CoFLiM with four baselines. We also perform a statistical analysis to show that the impact of the results is significant. Our results show that collaboration pays off in the location of features in models. The results also show that the self-rated confidence level can be used to locate features in models. Finally, the results show that there are no significant improvements when more than three domain experts are involved, which is relevant in those industrial contexts where the availability of domain experts is scarce.
C1 [Perez, Francisca; Font, Jaime; Arcega, Lorena; Cetina, Carlos] Univ San Jorge, SVIT Res Grp, Autovia A-23 Zaragoza Huesca Km 299, Zaragoza 50830, Spain.
   [Font, Jaime; Arcega, Lorena] Univ Oslo, Dept Informat, Postboks 1080 Blindern, N-0316 Oslo, Norway.
C3 Universidad San Jorge; University of Oslo
RP Pérez, F (corresponding author), Univ San Jorge, SVIT Res Grp, Autovia A-23 Zaragoza Huesca Km 299, Zaragoza 50830, Spain.
EM mfperez@usj.es; jfont@usj.es; larcega@usj.es; ccetina@usj.es
RI Arcega, Lorena/AAA-8929-2022; Pérez, Francisca/KPH-0503-2024; Font,
   Jaime/S-1243-2018; Cetina, Carlos/P-8682-2017
OI Arcega, Lorena/0000-0002-2464-8894; Font, Jaime/0000-0002-2980-5596;
   Cetina, Carlos/0000-0001-8542-5515; Perez, Francisca/0000-0001-6371-915X
FU Ministry of Economy and Competitiveness (MINECO) through the Spanish
   National R+D+i Plan; ERDF funds under the Project Model-Driven
   Variability Extraction for Software Product Line Adoption
   [TIN2015-64397-R]
FX This work has been partially supported by the Ministry of Economy and
   Competitiveness (MINECO) through the Spanish National R+D+i Plan and
   ERDF funds under the Project Model-Driven Variability Extraction for
   Software Product Line Adoption (TIN2015-64397-R). We also thank ITEA3
   15010 REVaMP2 Project.
CR Ambreen T, 2018, REQUIR ENG, V23, P63, DOI 10.1007/s00766-016-0258-2
   [Anonymous], P ACM IEEE 19 INT C
   [Anonymous], 2001, SOFTWARE PRODUCT LIN
   [Anonymous], 2016, APACHE OPENNLP TOOLK
   [Anonymous], P 15 INT C SOFTW REU
   [Anonymous], 2017, ENGLISH PORTER2 STEM
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Arcuri A, 2013, EMPIR SOFTW ENG, V18, P594, DOI 10.1007/s10664-013-9249-9
   Arens Y., 1996, Journal of Intelligent Information Systems: Integrating Artificial Intelligence and Database Technologies, V6, P99, DOI 10.1007/BF00122124
   Asuncion HU, 2010, 2010 ACM IEEE 32 INT, V1, P95
   Barros Mrciode Oliveira., 2011, RELATE DIA, V5
   Bendersky Michael, 2008, P 31 ANN INT ACM SIG, P491
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Boyd-Graber J, 2017, FOUND TRENDS INF RET, V11, P144
   Carpineto C, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2071389.2071390
   CAVALCANTI YC, 2014, P 29 ACM IEEE INT C, P325, DOI DOI 10.1145/2642937.2642964
   CLIFF N, 1993, PSYCHOL BULL, V114, P494, DOI 10.1037/0033-2909.114.3.494
   Cliff N., 2014, Ordinal Methods for Behavioral Data Analysis
   Dietrich T, 2013, IEEE INT CONF AUTOM, P586, DOI 10.1109/ASE.2013.6693117
   Dit B, 2013, J SOFTW-EVOL PROC, V25, P53, DOI 10.1002/smr.567
   Dumitru H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P181, DOI 10.1145/1985793.1985819
   Dyer, 2016, WATCHMAKER FRAMEWORK
   Font Jaime, 2018, IEEE Transactions on Evolutionary Computation, V22, P363, DOI 10.1109/TEVC.2017.2751100
   Font J., 2015, P 19 INT C SOFTW PRO, P46, DOI DOI 10.1145/2791060.2791085
   Font Jaime., 2015, P 19 INT C SOFTWARE, P411, DOI [DOI 10.1145/2791060.2793678, 10.1145/2791060.2793678]
   Gay G, 2009, PROC IEEE INT CONF S, P351, DOI 10.1109/ICSM.2009.5306315
   Grissom R. J., 2005, EFFECT SIZES RES BRO
   Haiduc S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P842, DOI 10.1109/ICSE.2013.6606630
   Harman M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P5, DOI 10.1145/2648511.2648513
   Harman M, 2010, LECT NOTES COMPUT SC, V6013, P1, DOI 10.1007/978-3-642-12029-9_1
   Haugen O, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P139, DOI 10.1109/SPLC.2008.25
   Hill E, 2009, PROC INT CONF SOFTW, P232, DOI 10.1109/ICSE.2009.5070524
   Hofmann T, 1999, P 22 ANN INT ACM SIG, V99, P50
   Holthusen, 2014, P 18 INT SOFTW PROD, V2, P36, DOI DOI 10.1145/2647908.2655965
   Hulth A, 2003, PROCEEDINGS OF THE 2003 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING, P216
   Jinqiu Yang, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P161, DOI 10.1109/MSR.2012.6224276
   Kimmig M., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P376, DOI 10.1109/ASE.2011.6100076
   Kotelyanskii A, 2014, INT CONF QUAL SOFTW, P79, DOI 10.1109/QSIC.2014.43
   Kumaran G., 2008, Proceedings of the 31st annual international ACM SIGIR conference on Research and development in information retrieval, P11
   Kumaran G, 2009, PROCEEDINGS 32ND ANNUAL INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P564, DOI 10.1145/1571941.1572038
   Landauer TK, 1998, DISCOURSE PROCESS, V25, P259, DOI 10.1080/01638539809545028
   Lapena R., 2017, ER FORUM 2017
   Lopez-Herrejon RE, 2015, J SYST SOFTWARE, V103, P353, DOI 10.1016/j.jss.2014.10.037
   Lopez-Herrejon Roberto E., 2014, ABS14062823 CORR
   Lu ML, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P545, DOI 10.1109/SANER.2015.7081874
   Lv F., 2015, AUTOMATED SOFTWARE E
   Marcus A, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P214, DOI 10.1109/WCRE.2004.10
   Martinez J, 2015, IEEE INT CONF AUTOM, P396, DOI 10.1109/ASE.2015.44
   Martinez Jabier, 2015, P 19 INT C SOFTW PRO, P101, DOI DOI 10.1145/2791060.2791086
   Morris M. R., 2007, CHI 2007 WORKSH EXPL
   Perez Francisca, 2017, On the Move to Meaningful Internet Systems: OTM 2017 Conferences. Confederated International Conferences CoopIS, C&TC and ODBASE 2017. Proceedings: LNCS 10573, P114, DOI 10.1007/978-3-319-69462-7_9
   Pérez F, 2018, DATA KNOWL ENG, V116, P159, DOI 10.1016/j.datak.2018.06.001
   Rivas AR, 2014, SCI WORLD J, DOI 10.1155/2014/132158
   Romano J, 2006, ANN M FLOR ASS I RES, P1
   Rubin J., 2013, Domain Engineering, P29, DOI DOI 10.1007/978-3-642-36654-3
   Salton G., 1971, SMART RETRIEVAL SYST
   Salton G, 1986, Introduction to Modern Information Retrieval
   Sayyad AS, 2013, IEEE INT CONF AUTOM, P465, DOI 10.1109/ASE.2013.6693104
   Shah C, 2010, ADV LIBR, V32, P3, DOI 10.1108/S0065-2830(2010)0000032004
   Sisman B, 2013, IEEE WORK CONF MIN S, P309, DOI 10.1109/MSR.2013.6624044
   Tian Y, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P44, DOI 10.1109/CSMR-WCRE.2014.6747213
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Wang S., 2014, ACM/IEEE International Conference on Automated Software Engineering, ASE '14, Vasteras, Sweden - September 15 - 19, 2014, P677
   Wille D, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE CO-LOCATED WORKSHOPS (SPLC'13 WORKSHOPS), P44
   Xiaorui Zhang, 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P90, DOI 10.1109/SPLC.2011.24
   Zeng Qing T, 2012, AMIA Annu Symp Proc, V2012, P1050
   Zhang XR, 2012, ASIA PAC SOFWR ENG, P766, DOI 10.1109/APSEC.2012.76
   Zou YH, 2015, PROF GEOGR, V67, P412, DOI 10.1080/00330124.2014.987198
NR 68
TC 18
Z9 18
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2019
VL 26
IS 1
BP 161
EP 202
DI 10.1007/s10515-019-00251-9
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA HL4VT
UT WOS:000458723700005
DA 2024-07-18
ER

PT J
AU Wang, TJ
   Zhang, ZW
   Jing, XY
   Zhang, LQ
AF Wang, Tiejian
   Zhang, Zhiwu
   Jing, Xiaoyuan
   Zhang, Liqiang
TI Multiple kernel ensemble learning for software defect prediction
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software defect prediction; Multiple kernel learning; Ensemble learning;
   Multiple kernel ensemble learning (MKEL)
ID NEURAL-NETWORKS; CLASSIFICATION; QUALITY; MACHINE
AB Software defect prediction aims to predict the defect proneness of new software modules with the historical defect data so as to improve the quality of a software system. Software historical defect data has a complicated structure and a marked characteristic of class-imbalance; how to fully analyze and utilize the existing historical defect data and build more precise and effective classifiers has attracted considerable researchers' interest from both academia and industry. Multiple kernel learning and ensemble learning are effective techniques in the field of machine learning. Multiple kernel learning can map the historical defect data to a higher-dimensional feature space and make them express better, and ensemble learning can use a series of weak classifiers to reduce the bias generated by the majority class and obtain better predictive performance. In this paper, we propose to use the multiple kernel learning to predict software defect. By using the characteristics of the metrics mined from the open source software, we get a multiple kernel classifier through ensemble learning method, which has the advantages of both multiple kernel learning and ensemble learning. We thus propose a multiple kernel ensemble learning (MKEL) approach for software defect classification and prediction. Considering the cost of risk in software defect prediction, we design a new sample weight vector updating strategy to reduce the cost of risk caused by misclassifying defective modules as non-defective ones. We employ the widely used NASA MDP datasets as test data to evaluate the performance of all compared methods; experimental results show that MKEL outperforms several representative state-of-the-art defect prediction methods.
C1 [Wang, Tiejian; Jing, Xiaoyuan; Zhang, Liqiang] Wuhan Univ, Sch Comp, State Key Lab Software Engn, Wuhan, Peoples R China.
   [Zhang, Zhiwu] Nanjing Univ Posts & Telecommun, Sch Comp, Nanjing, Peoples R China.
C3 Wuhan University; Nanjing University of Posts & Telecommunications
RP Wang, TJ (corresponding author), Wuhan Univ, Sch Comp, State Key Lab Software Engn, Wuhan, Peoples R China.
EM wangtiejian1116@sina.com
RI He, Chen/JLM-5059-2023
OI Zhang, Zhi-Wu/0000-0002-2346-580X
CR Aljamaan HI, 2009, 2009 IEEE SYMPOSIUM ON COMPUTATIONAL INTELLIGENCE AND DATA MINING, P187, DOI 10.1109/CIDM.2009.4938648
   Amasaki S, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P215, DOI 10.1109/ISSRE.2003.1251044
   [Anonymous], EASE 2011
   Bennett K.P., 2002, P 8 ACM SIGKDD INT C, P24, DOI DOI 10.1145/775047.775051
   Bezerra MER, 2011, IEEE SYS MAN CYBERN, P2515, DOI 10.1109/ICSMC.2011.6084055
   Bi J., 2004, ACM SIGKDD INT C KNO, P521
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Damoulas T, 2008, BIOINFORMATICS, V24, P1264, DOI 10.1093/bioinformatics/btn112
   Dietterich TG, 2000, LECT NOTES COMPUT SC, V1857, P1, DOI 10.1007/3-540-45014-9_1
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Freund Y, 1997, J COMPUT SYST SCI, V55, P119, DOI 10.1006/jcss.1997.1504
   Gao K, 2011, SEKE 2011 P 23 INT C, P89
   Gao KH, 2012, 2012 11TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2012), VOL 2, P281, DOI 10.1109/ICMLA.2012.145
   Gayatri N, 2010, LECT NOTES ENG COMP, P124
   Gehler P, 2009, IEEE I CONF COMP VIS, P221, DOI 10.1109/ICCV.2009.5459169
   Gonen M., 2008, ICML, P352, DOI DOI 10.1145/1390156.1390201
   Gray D, 2009, COMM COM INF SC, V43, P223
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Halstead M.H., 1977, OPERATING PROGRAMMIN
   He HB, 2009, IEEE T KNOWL DATA EN, V21, P1263, DOI 10.1109/TKDE.2008.239
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P414, DOI 10.1145/2568225.2568320
   Kembhavi A, 2009, IEEE I CONF COMP VIS, P638, DOI 10.1109/ICCV.2009.5459179
   Khoshgoftaar TM, 2010, PROC INT C TOOLS ART, DOI 10.1109/ICTAI.2010.27
   Khoshgoftaar TM, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P203, DOI 10.1109/METRIC.2002.1011339
   Khoshgoftaar TM, 2002, PROC INT C TOOLS ART, P365, DOI 10.1109/TAI.2002.1180826
   Lewis D.P., 2006, Proc. of Int. Conference on Machine Learning, P553, DOI DOI 10.1145/1143844.1143914
   Li YL, 2010, INT CONF COMP SCI, P1, DOI 10.1109/ICCSIT.2010.5564891
   Luo GC, 2012, IEICE T INF SYST, VE95D, P2006, DOI 10.1587/transinf.E95.D.2006
   Lyu MR, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P153, DOI 10.1109/FOSE.2007.24
   Ma Y., 2012, IEICE T, V95-D, P215
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Müller KR, 2001, IEEE T NEURAL NETWOR, V12, P181, DOI 10.1109/72.914517
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Ong CS, 2005, J MACH LEARN RES, V6, P1043
   Paikari E, 2012, INT J SOFTW ENG KNOW, V22, P747, DOI 10.1142/S0218194012400116
   Rakotomamonjy A., 2007, P 24 INT C MACHINE L, P775, DOI DOI 10.1145/1273496.1273594
   Ren J., 2014, J APPL MATH, V2014, P8, DOI DOI 10.1016/J.ISATRA.2014.08.008
   Rokach L, 2010, ARTIF INTELL REV, V33, P1, DOI 10.1007/s10462-009-9124-7
   Schölkopf B, 1999, IEEE T NEURAL NETWOR, V10, P1000, DOI 10.1109/72.788641
   Scholkopf B, 1998, NEURAL COMPUT, V10, P1299, DOI 10.1162/089976698300017467
   Seiffert C, 2009, IEEE T SYST MAN CY A, V39, P1283, DOI 10.1109/TSMCA.2009.2027131
   Seliya Naeem, 2010, Proceedings 2010 IEEE 12th International Symposium on High-Assurance Systems Engineering (HASE), P26, DOI 10.1109/HASE.2010.29
   Seliya N, 2011, WIRES DATA MIN KNOWL, V1, P448, DOI 10.1002/widm.38
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Sun YM, 2007, PATTERN RECOGN, V40, P3358, DOI 10.1016/j.patcog.2007.04.009
   Sun ZB, 2012, IEEE T SYST MAN CY C, V42, P1806, DOI 10.1109/TSMCC.2012.2226152
   Thwin MMT, 2005, J SYST SOFTWARE, V76, P147, DOI 10.1016/j.jss.2004.05.001
   Turhan B, 2007, ICSOFT 2007: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL SE, P244
   Turhan B, 2009, DATA KNOWL ENG, V68, P278, DOI 10.1016/j.datak.2008.10.005
   Valentini G, 2002, LECT NOTES COMPUT SC, V2486, P3
   Wang J, 2012, INT CONF QUAL SOFTW, P13, DOI 10.1109/QSIC.2012.19
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Xia H, 2013, IEEE T KNOWL DATA EN, V25, P1574, DOI 10.1109/TKDE.2012.89
   Xing F, 2005, 16TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P213
   Yambor W.S., 2000, EMPIRICAL EVALUATION, P1
   Yan Z, 2010, LECT NOTES COMPUT SC, V6064, P17
   Zheng J, 2010, EXPERT SYST APPL, V37, P4537, DOI 10.1016/j.eswa.2009.12.056
   Zhou ZH, 2006, IEEE T KNOWL DATA EN, V18, P63, DOI 10.1109/TKDE.2006.17
   Zien A., 2007, P INT C MACHINE LEAR, V227, P1191, DOI [10.1145/1273496.1273646, DOI 10.1145/1273496.1273646]
NR 61
TC 102
Z9 109
U1 0
U2 57
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2016
VL 23
IS 4
BP 569
EP 590
DI 10.1007/s10515-015-0179-1
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DV1HD
UT WOS:000382670800003
DA 2024-07-18
ER

PT J
AU Ponsini, O
   Michel, C
   Rueher, M
AF Ponsini, Olivier
   Michel, Claude
   Rueher, Michel
TI Verifying floating-point programs with constraint programming and
   abstract interpretation techniques
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Program verification; Floating-point computation; Constraint solving
   over floating-point numbers; Constraint solving over real number
   intervals; Abstract interpretation-based approximation
ID VERIFICATION
AB Static value analysis is a classical approach for verifying programs with floating-point computations. Value analysis mainly relies on abstract interpretation and over-approximates the possible values of program variables. State-of-the-art tools may however compute over-approximations that can be rather coarse for some very usual program expressions. In this paper, we show that constraint solvers can significantly refine approximations computed with abstract interpretation tools. More precisely, we introduce a hybrid approach combining abstract interpretation and constraint programming techniques in a single static and automatic analysis. This hybrid approach benefits from the strong points of abstract interpretation and constraint programming techniques, and thus, it is more effective than static analysers and constraint solvers, when used separately. We compared the efficiency of the system we developed-named rAiCp-with state-of-the-art static analyzers: rAiCp produces substantially more precise approximations and is able to check program properties on both academic and industrial benchmarks.
C1 [Ponsini, Olivier; Michel, Claude; Rueher, Michel] Univ Nice Sophia Antipolis, CNRS, I3S, F-06900 Sophia Antipolis, France.
C3 Universite Cote d'Azur; Centre National de la Recherche Scientifique
   (CNRS)
RP Rueher, M (corresponding author), Univ Nice Sophia Antipolis, CNRS, I3S, F-06900 Sophia Antipolis, France.
EM Claude.Michel@unice.fr; michel.rueher@gmail.com
FU ANR VACSIM project [ANR-11-INSE-0004]; ANR AEOLUS project
   [ANR-10-SEGI-0013]; OSEO ISI PAJERO project; Agence Nationale de la
   Recherche (ANR) [ANR-11-INSE-0004, ANR-10-SEGI-0013] Funding Source:
   Agence Nationale de la Recherche (ANR)
FX The authors gratefully acknowledge Sylvie Putot, Eric Goubault and
   Franck Vedrine for their advice and help on using FLUCTUAT. We also
   gratefully acknowledge Laurent Arditi and Helene Collavizza who
   carefully read this paper and provided critical comments. This work was
   partially supported by ANR VACSIM (ANR-11-INSE-0004), ANR AEOLUS
   (ANR-10-SEGI-0013), and OSEO ISI PAJERO projects. Part of this work was
   done while Michel Rueher was visiting Professor at NII (National
   Institute of Informatics) 2-1-2 Hitotsubashi, Chiyoda-ku, Tokyo
   101-8430.
CR Ayad A, 2010, LECT NOTES ARTIF INT, V6173, P127
   Barnett M., 2005, INFORM PROCESS LETT, V93, P281
   Boldo S, 2007, P S COMP ARITHM, P187, DOI 10.1109/ARITH.2007.20
   Botella B, 2006, SOFTW TEST VERIF REL, V16, P97, DOI 10.1002/stvr.333
   Brillout Angelo, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P69, DOI 10.1109/FMCAD.2009.5351141
   CODOGNET P, 1992, PROCEEDINGS OF THE 1992 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P155, DOI 10.1109/ICCL.1992.185478
   Collavizza H, 2010, CONSTRAINTS, V15, P238, DOI 10.1007/s10601-009-9089-9
   Cousot P, 2001, LECT NOTES COMPUT SC, V2000, P138
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2007, TASE 2007: FIRST JOINT IEEE/IFIP SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P3, DOI 10.1109/TASE.2007.55
   D'Silva V, 2012, LECT NOTES COMPUT SC, V7214, P48, DOI 10.1007/978-3-642-28756-5_5
   de Dinechin F, 2011, IEEE T COMPUT, V60, P242, DOI 10.1109/TC.2010.128
   Delmas D, 2009, LECT NOTES COMPUT SC, V5825, P53
   Denmat T, 2007, LECT NOTES COMPUT SC, V4741, P241
   Ghorbal K, 2010, LECT NOTES COMPUT SC, V6174, P212, DOI 10.1007/978-3-642-14295-6_22
   Girard A, 2005, LECT NOTES COMPUT SC, V3414, P291
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   Goubault E, 2006, LECT NOTES COMPUT SC, V4134, P18
   Granvilliers L, 2006, ACM T MATH SOFTWARE, V32, P138, DOI 10.1145/1132973.1132980
   Harrison J, 1999, LECT NOTES COMPUT SC, V1690, P113
   LHOMME O, 1993, IJCAI-93, VOLS 1 AND 2, P232
   Marre B, 2010, LECT NOTES COMPUT SC, V6308, P360, DOI 10.1007/978-3-642-15396-9_30
   Michel C., 2001, Principles and Practice of Constraint Programming - CP 2002. 7th International Conference, CP 2001. Proceedings (Lecture Notes in Computer Science Vol.2239), P524
   MICHEL C., 2002, 7 INT S ARTIFICIAL I
   Pelleau M, 2013, LECT NOTES COMPUT SC, V7737, P434
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   VanHentenryck P, 1997, SIAM J NUMER ANAL, V34, P797, DOI 10.1137/S0036142995281504
NR 28
TC 7
Z9 8
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2016
VL 23
IS 2
BP 191
EP 217
DI 10.1007/s10515-014-0154-2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DG7KF
UT WOS:000372262500003
DA 2024-07-18
ER

PT J
AU Heimdahl, MPE
   George, D
AF Heimdahl, Mats P. E.
   George, Devaraj
TI On the effect of test-suite reduction on automatically generated
   model-based tests
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 19th International Conference on Automated Software Engineering (ASE
   2004)
CY SEP, 2004
CL Linz, AUSTRIA
DE specification-based testing; test reduction; fault finding; model
   checkers; automated test generation
ID CHECKING; MINIMIZATION; SPECIFICATION
AB Model checking techniques can be successfully employed as a test-case generation technique to generate tests from formal models. The number of tests-cases produced, however, is typically large for complex coverage criteria such as MC/DC. Test-suite reduction can provide us with a smaller set of test-cases that preserve the original coverage-often a dramatically smaller set. Nevertheless, one potential drawback with test-suite reduction is that this might affect the quality of the test-suite in terms of fault finding. Previous empirical studies provide conflicting evidence on this issue. To further investigate the problem and determine its effect when testing implementations derived from formal models of software we performed an experiment using a large case example of a Flight Guidance System, generated reduced test-suites for a variety of structural coverage criteria while preserving coverage, and recorded their fault finding effectiveness. Our results indicate that the size of the specification based test-suites can be dramatically reduced and that the fault detection of the reduced test-suites is adversely affected. In this report we describe our experiment, analyze the results, and discuss the implications for testing based on formal specifications.
C1 Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
C3 University of Minnesota System; University of Minnesota Twin Cities
RP Heimdahl, MPE (corresponding author), Univ Minnesota, Dept Comp Sci & Engn, 200 Union St SE 4-192, Minneapolis, MN 55455 USA.
CR Ammann P.E., 1999, P 4 IEEE INT S HIGH
   Ammann PE, 1998, SECOND INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P46, DOI 10.1109/ICFEM.1998.730569
   [Anonymous], P WORK USER INT THEO
   BENSALEM S, 1999, P 7 WORK C DEP COMP, P89
   BLACKNURN MR, 1997, P 12 ANN C COMP ASS
   Callahan J., 1996, P SPIN WORKSH
   Chan W, 1998, IEEE T SOFTWARE ENG, V24, P498, DOI 10.1109/32.708566
   CHILENSKI JJ, 1994, SOFTWARE ENG J, V9, P193, DOI 10.1049/sej.1994.0025
   Choi YJ, 2002, 7TH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P109, DOI 10.1109/HASE.2002.1173111
   Clarke EM, 1999, MODEL CHECKING, P1
   Engels A, 1997, LECT NOTES COMPUT SC, V1217, P384, DOI 10.1007/BFb0035401
   *EST TECHN, 2004, SCAD SUIT PORD DESCR
   *FAA, 2002, WHAT IS DEC APPL MOD
   FRANKL P, 1991, P S TEST ANAL VER
   Garey M.R., 1979, COMPUTERS INTRACTABI
   Gargantini A, 1999, LECT NOTES COMPUT SC, V1687, P146, DOI 10.1145/318774.318939
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   HAREL D, 1990, IEEE T SOFTWARE ENG, V16, P403, DOI 10.1109/32.54292
   HAYHURST K, 2001, TM2001210879 NASA
   Heimdahl M.P.E., 2004, P 8 IEEE INT S HIGH
   HEIMDAHL MP, 2001, 2 INT WORKSH ANAL TE
   HEIMDAHL MP, 2003, 3 INT WORSH FORM APP
   Heimdahl MPE, 1996, IEEE T SOFTWARE ENG, V22, P363, DOI 10.1109/32.508311
   Heimdahl MPE, 2004, P 19 IEEE INT C AUT
   Heitmeyer C, 1998, IEEE T SOFTWARE ENG, V24, P927, DOI 10.1109/32.730543
   HEITMEYER C, 1995, COMPASS '95 - PROCEEDINGS OF THE TENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P109, DOI 10.1109/CMPASS.1995.521891
   Heitmeyer C. L., 1996, ACM Transactions on Software Engineering and Methodology, V5, P231, DOI 10.1145/234426.234431
   HONG HS, 2003, P INT C SOFTW ENG PO
   HONG HS, 2002, P INT C TOOLS ALG CO
   Jasper R., 1994, SIGSOFT Software Engineering Notes, P95
   Jones JA, 2003, IEEE T SOFTWARE ENG, V29, P195, DOI 10.1109/TSE.2003.1183927
   Lee E. A., 2003, UCBERLM0325
   LEVESON NG, 1994, IEEE T SOFTWARE ENG, V20, P684, DOI 10.1109/32.317428
   *MATHW INC, MATHW INC SIM PROD W
   *NUS, 2005, NUSMV TOOLS
   OFFUTT AJ, 1999, P 5 IEEE IINT C ENG
   Owre S., 1993, The PVS specification language (beta release)"
   PNUELI A, 1986, LECT NOTES COMPUT SC, V224, P510
   Rayadurgam S, 2001, EIGHTH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER BASED SYSTEMS, PROCEEDINGS, P83, DOI 10.1109/ECBS.2001.922409
   RAYADURGAM S, 2003, THESIS U MINNESOTA
   Rayadurgam S., 2001, P 6 IEEE INT S HIGH
   Rothermel G, 1998, PROC IEEE INT CONF S, P34, DOI 10.1109/ICSM.1998.738487
   *RTCA, 1992, SFOTW CONS AIRB SYST
   Thompson JM, 1999, P IEEE RAP SYST PROT, P172, DOI 10.1109/IWRSP.1999.779049
   THOMPSON JM, 1999, 7 ACM SIGSOFT S FDN, P163
   Whalen M. W., 1999, Proceedings 4th IEEE International Symposium on High-Assurance Systems Engineering, P217, DOI 10.1109/HASE.1999.809497
   Wong WE, 1998, SOFTWARE PRACT EXPER, V28, P347, DOI 10.1002/(SICI)1097-024X(19980410)28:4<347::AID-SPE145>3.0.CO;2-L
   Wong WE, 1997, P INT COMP SOFTW APP, P522, DOI 10.1109/CMPSAC.1997.625062
NR 49
TC 4
Z9 6
U1 1
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2007
VL 14
IS 1
BP 37
EP 57
DI 10.1007/s10515-006-0004-y
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 211VO
UT WOS:000249551600003
DA 2024-07-18
ER

PT J
AU Habibi, E
   Mirian-Hosseinabadi, SH
AF Habibi, Elahe
   Mirian-Hosseinabadi, Seyed-Hassan
TI Sharif-TaaWS: a tool to automate unit testing of web services
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Web service; Unit testing tool; Service oriented; Functional test; Test
   as a web service; Online test; Attribute grammar
AB Service-Oriented Architecture is a technology for designing software systems. Upon using this architecture, new challenges appeared for software testing in which unit testing can be viewed as the most essential and basic testing procedure. Many industrial tools and academic studies have presented a level of automation for unit testing of web services. Herein, we introduce a new tool called Sharif-TaaWS to automate the unit testing of web services through a method-based attribute grammar (MBAG) of the source code. This tool generates a test web service named TaaWS (Test as a web service), a combination of both online testing and testing as a service. Sharif-TaaWS has three modules including Initializer, MBAG generator, and TaaWS creator. These modules scan and parse the web service source code through the scan-grammar, generate MBAG, and create test cases in TaaWS. In this paper, we evaluate our proposed tool using different types of web services. Sharif-TaaWS is compared with other unit testing tools through the response time, test case generation, and report preparation time using different environments. The results show that Sharif-TaaWS has more ability to find web service faults and can reduce the testing process time through the attribute grammar and the test web service.
C1 [Habibi, Elahe; Mirian-Hosseinabadi, Seyed-Hassan] Sharif Univ Technol, Dept Comp Engn, Room 807,CE New Bldg,Azadi Ave, Tehran, Iran.
C3 Sharif University of Technology
RP Habibi, E; Mirian-Hosseinabadi, SH (corresponding author), Sharif Univ Technol, Dept Comp Engn, Room 807,CE New Bldg,Azadi Ave, Tehran, Iran.
EM ehabibiphd@ce.sharif.edu; hmirian@sharif.edu
FU Sharif University of Technology - Iran
FX This research has been supported by a Grant from the Sharif University
   of Technology - Iran.
CR Ammann P., 2016, INTRO SOFTWARE TESTI, DOI [10.1017/9781316771273, DOI 10.1017/9781316771273]
   Anjum MS, 2019, LECT NOTES COMPUT SC, V11451, P3, DOI 10.1007/978-3-030-16670-0_1
   [Anonymous], CALCULATOR WEB SERVI
   [Anonymous], API TOOLS
   [Anonymous], PERSONALINFO WEB SER
   [Anonymous], SOAP SONAR
   [Anonymous], HP SERVICE TEST
   [Anonymous], 2016, FEATURES SERVICE APA
   [Anonymous], WEB SERVICE TESTING
   [Anonymous], 2004, Web Services Architecture
   [Anonymous], SoapUI - The Home of Functional Testing
   [Anonymous], ORACLE APPL TESTING
   [Anonymous], SOATEST
   [Anonymous], TESTMAKER
   [Anonymous], API TESTING TOOLS
   Arcuri A, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3293455
   Atlidakis V, 2019, PROC INT CONF SOFTW, P748, DOI 10.1109/ICSE.2019.00083
   Bozkurt M, 2013, SOFTW TEST VERIF REL, V23, P261, DOI 10.1002/stvr.1470
   Candea George, 2019, Computing and Software Science: State of the Art and Perspectives. Lecture Notes in Computer Science (LNCS 10000), P505, DOI 10.1007/978-3-319-91908-9_24
   Candea George, 2010, P 1 ACM S CLOUD COMP, P155, DOI DOI 10.1145/1807128.1807153
   Corradini D, 2022, SOFTW TEST VERIF REL, V32, DOI 10.1002/stvr.1808
   Dong X., 2004, Proceedings of the 30th International Conference on Very Large Data Bases (VLDB'04), V30, P372, DOI DOI 10.1016/B978-012088469-8.50035-8
   Endo A.T., 2013, THESIS U SAO PAULO
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Habibi Elaheh, 2021, 2021 7th International Conference on Web Research (ICWR), P16, DOI 10.1109/ICWR51868.2021.9443109
   Habibi E., 2021, SHARIF TAAWS TOOL GE
   Habibi E, 2022, INT J SOFTW TOOLS TE, V24, P511, DOI 10.1007/s10009-022-00649-z
   Hielscher J, 2008, LECT NOTES COMPUT SC, V5377, P122, DOI 10.1007/978-3-540-89897-9_11
   JMeter Apache, US
   Jonathan, 2020, PROCEEDINGS OF 2020 INTERNATIONAL CONFERENCE ON INFORMATION MANAGEMENT AND TECHNOLOGY (ICIMTECH), P443, DOI [10.1109/icimtech50083.2020.9211258, 10.1109/ICIMTech50083.2020.9211258]
   katalon, KATALON
   Keramati H, 2015, INFORM SOFTWARE TECH, V57, P204, DOI 10.1016/j.infsof.2014.09.007
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Lenz C., 2007, P SEMSOA WORKSH SOFT, P10
   Martin-Lopez A, 2020, LECT NOTES COMPUT SC, V12571, P459, DOI 10.1007/978-3-030-65310-1_33
   Sajeev A., 1997, P INT C SOFTWARE ENG, P110
   Sheskin DJ., 2003, HDB PARAMETRIC NONPA, DOI [10.1201/9781420036268, DOI 10.1201/9781420036268]
   Slonneger K., 1995, Formal Syntax and Semantics of Programming Languages: A Laboratory Based Approach, Vfirst
   Sneed HM, 2006, IEEE INTL SYMPOS WEB, P14
   Sommerville Ian, 2011, Software engineering
   Tsai WT, 2005, SOSE 2005: IEEE INTERNATIONAL WORKSHOP ON SERVICE-ORIENTED SYSTEM ENGINEERING, P151
   Viglianisi E, 2020, IEEE INT CONF SOFTW, P142, DOI 10.1109/ICST46399.2020.00024
   Wang YQ, 2003, LECT NOTES COMPUT SC, V2910, P194
   Zhang M, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3464940
   Zhang Y., 2010, J COMPUTINFSYST, V6, P2859
NR 45
TC 1
Z9 1
U1 3
U2 19
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2023
VL 30
IS 1
AR 1
DI 10.1007/s10515-022-00368-4
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6M2XH
UT WOS:000888736200001
DA 2024-07-18
ER

PT J
AU Bock, T
   Hunsen, C
   Joblin, M
   Apel, S
AF Bock, Thomas
   Hunsen, Claus
   Joblin, Mitchell
   Apel, Sven
TI Synchronous development in open-source projects: A higher-level
   perspective
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Open-source software projects; Developer coordination; Synchronous
   development
ID SOFTWARE; COORDINATION; SHAPE
AB Mailing lists are a major communication channel for supporting developer coordination in open-source software projects. In a recent study, researchers explored temporal relationships (e.g., synchronization) between developer activities on source code and on the mailing list, relying on simple heuristics of developer collaboration (e.g., co-editing files) and developer communication (e.g., sending e-mails to the mailing list). We propose two methods for studying synchronization between collaboration and communication activities from a higher-level perspective, which captures the complex activities and views of developers more precisely than the rather technical perspective of previous work. On the one hand, we explore developer collaboration at the level of features (not files), which are higher-level concepts of the domain and not mere technical artifacts. On the other hand, we lift the view of developer communication from a message-based model, which treats each e-mail individually, to a conversation-based model, which is semantically richer due to grouping e-mails that represent conceptually related discussions. By means of an empirical study, we investigate whether the different abstraction levels affect the observed relationship between commit activity and e-mail communication using state-of-the-art time-series analysis. For this purpose, we analyze a combined history of 40 years of data for three highly active and widely deployed open-source projects: QEMU, BUSYBOX, and OPENSSL. Overall, we found evidence that a higher-level view on the coordination of developers leads to identifying a stronger statistical dependence between the technical activities of developers than a less abstract and rather technical view.
C1 [Bock, Thomas; Joblin, Mitchell; Apel, Sven] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
   [Hunsen, Claus] Univ Passau, Passau, Germany.
   [Joblin, Mitchell] Siemens AG, Munich, Germany.
C3 Saarland University; University of Passau; Siemens AG; Siemens Germany
RP Bock, T (corresponding author), Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
EM bockthom@cs.uni-saarland.de; hunsen@fim.uni-passau.de;
   joblin@cs.uni-saarland.de; apel@cs.uni-saarland.de
RI Bock, Thomas/HNS-9424-2023
OI Apel, Sven/0000-0003-3687-2233; Bock, Thomas/0000-0001-6906-3489
FU German Research Foundation [AP 206/5-1, AP 206/6-1, AP 206/11-1, AP
   206/14-1]
FX This work has been supported by the German Research Foundation (AP
   206/5-1&2, AP 206/6-1&2, AP 206/11-1, and AP 206/14-1).
CR Ali N, 2013, IEEE T SOFTWARE ENG, V39, P725, DOI 10.1109/TSE.2012.71
   [Anonymous], 2015, P 19 INT C SOFTW PRO, DOI DOI 10.1145/2791060.2791108
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Bacchelli A, 2010, LECT NOTES COMPUT SC, V6013, P59
   Berger T., 2013, P INT WORKSH VAR MOD, p23:1
   Berndt DJ, 1994, P 3 INT C KNOWL DISC, P359, DOI DOI 10.5555/3000850.3000887
   Bird C., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P568, DOI 10.1109/ICSM.2011.6080832
   BIRD C, 2006, P 2006 INT WORKSH MI, P13
   Bird C., 2011, P 19 ACM SIGSOFT S 1, P4, DOI DOI 10.1145/2025113.2025119
   Bird Christian, 2008, Proceedings of the 2008 ACM SIGSOFT Symposium on the Foundations of Software Engineering, P24
   CANNONBOWERS JA, 1993, INDIVIDUAL AND GROUP DECISION MAKING, P221
   Cataldo M, 2013, IEEE T SOFTWARE ENG, V39, P343, DOI 10.1109/TSE.2012.32
   Cataldo M, 2009, IEEE T SOFTWARE ENG, V35, P864, DOI 10.1109/TSE.2009.42
   Cataldo M, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P2
   Crowston K., 2005, First Monday, V10, DOI 10.5210/fm.v10i2.1207
   De Souza C., 2005, P 2005 ACM INT C SUP, P197, DOI 10.1145/1099203.1099239
   Draheim D, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P131, DOI 10.1109/IWPSE.2003.1231220
   Ernst MD, 2002, IEEE T SOFTWARE ENG, V28, P1146, DOI 10.1109/TSE.2002.1158288
   Espinosa J., 2001, Shared Mental Models and Coordination in Large-Scale, P513
   Feigenspan J, 2013, EMPIR SOFTW ENG, V18, P699, DOI 10.1007/s10664-012-9208-x
   Fenske W, 2015, IEEE INT WORK C SO, P171, DOI 10.1109/SCAM.2015.7335413
   Gharehyazie M, 2017, EMPIR SOFTW ENG, V22, P1795, DOI 10.1007/s10664-016-9463-3
   Guzzi A, 2013, IEEE WORK CONF MIN S, P277, DOI 10.1109/MSR.2013.6624039
   Herbsleb J. D., 2003, Software Engineering Notes, V28, P138, DOI 10.1145/949952.940091
   Herbsleb JD, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P188, DOI 10.1109/FOSE.2007.11
   Herbsleb JD, 1999, IEEE SOFTWARE, V16, P63, DOI 10.1109/52.795103
   Hunsen C, 2020, EMPIR SOFTW ENG, V25, P4379, DOI 10.1007/s10664-020-09833-8
   Hunsen C, 2016, EMPIR SOFTW ENG, V21, P449, DOI 10.1007/s10664-015-9360-1
   Jermakovics A, 2011, PROCEEDINGS OF THE 4TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE'11), P24
   Jiang Y., 2014, P INT S EMP SOFTW EN
   Joblin M, 2017, PROC INT CONF SOFTW, P164, DOI 10.1109/ICSE.2017.23
   Joblin M, 2017, EMPIR SOFTW ENG, V22, P2050, DOI 10.1007/s10664-016-9478-9
   Joblin M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P563, DOI 10.1109/ICSE.2015.73
   Keogh E.J., 2001, P 2001 SIAM INT C DA, P1, DOI [DOI 10.1137/1.9781611972719.1, 10.1137/1.9781611972719.1]
   Kernighan B.W., 1988, The C Programming Language
   Kwan I, 2011, IEEE T SOFTWARE ENG, V37, P307, DOI 10.1109/TSE.2011.29
   Liebig Jorg, 2010, P 32 ACM IEEE INT C, V1, P105
   López-Fernández L, 2006, INT J INF TECHNOL WE, V1, P27, DOI 10.4018/jitwe.2006070103
   Mannan UA, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P543, DOI 10.1145/3368089.3409707
   Medeiros Flavio, 2015, 29 EUR C OBJ OR PROG, P495
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Oliva Gustavo A., 2012, Collaboration and Technology. Proceedings of the 18th International Conference, CRIWG 2012, P97, DOI 10.1007/978-3-642-33284-5_8
   Queiroz R, 2017, SOFTW SYST MODEL, V16, P77, DOI 10.1007/s10270-015-0483-z
   Rabiner L.R., 1993, FUNDAMENTALS SPEECH, VVolume 14
   Ramsauer R, 2019, PROC INT CONF SOFTW, P807, DOI 10.1109/ICSE.2019.00088
   Riehle D, 2015, PROGR IS, P25, DOI 10.1007/978-3-662-47011-4_2
   Rigby PC, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P541
   SAKOE H, 1978, IEEE T ACOUST SPEECH, V26, P43, DOI 10.1109/TASSP.1978.1163055
   Schulze S, 2018, IEEE INT WORK C SO, P50, DOI 10.1109/SCAM.2018.00013
   Scozzi B., 2008, Proceedings of the 41st Annual Hawaii International Conference on System Sciences (HICSS 2008), P306, DOI [10.1109/HICSS.2008.391., DOI 10.1109/HICSS.2008.391]
   Singh PV, 2010, ACM T SOFTW ENG METH, V20, DOI 10.1145/1824760.1824763
   Sommerville I., 2010, SOFTWARE ENG
   Storey MA, 2017, IEEE T SOFTWARE ENG, V43, P185, DOI 10.1109/TSE.2016.2584053
   Toral SL, 2010, INFORM SOFTWARE TECH, V52, P296, DOI 10.1016/j.infsof.2009.10.007
   Wiese IS, 2016, PROC IEEE INT CONF S, P345, DOI 10.1109/ICSME.2016.13
   Wu J, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P304, DOI 10.1109/ISESE.2003.1237991
   Xuan Q, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P222, DOI 10.1145/2568225.2568238
   Xuan Q, 2016, PLOS ONE, V11, DOI 10.1371/journal.pone.0154324
   Xuan Q, 2012, PROCEEDINGS OF THE 2012 ASE INTERNATIONAL CONFERENCE ON SOCIAL INFORMATICS (SOCIALINFORMATICS 2012), P78, DOI 10.1109/SocialInformatics.2012.17
NR 60
TC 3
Z9 3
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 3
DI 10.1007/s10515-021-00292-z
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XD7EW
UT WOS:000722868300003
OA hybrid
DA 2024-07-18
ER

PT J
AU Nadim, M
   Mondal, D
   Roy, CK
AF Nadim, Md
   Mondal, Debajyoti
   Roy, Chanchal K.
TI Leveraging structural properties of source code graphs for just-in-time
   bug prediction
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Source code visualization; Graph representation; Graph attribute;
   Machine learning models; Feature selection; Classification
ID SOFTWARE CHANGES
AB The most common use of data visualization is to minimize the complexity for proper understanding. A graph is one of the most commonly used representations for understanding relational data. It produces a simplified representation of data that is challenging to comprehend if kept in a textual format. In this study, we propose a methodology to utilize the relational properties of source code in the form of a graph to identify Just-in-Time (JIT) bug prediction in software systems during different revisions of software evolution and maintenance. We presented a method to convert the source codes of commit patches to equivalent graph representations and named it Source Code Graph (SCG). To understand and compare multiple source code graphs, we extracted several structural properties of these .graphs, such as the density, number of cycles, nodes, edges, etc. We then utilized the attribute values of those SCGs to visualize and detect buggy software commits. We process more than 246 K software commits from 12 subject systems in this investigation. Our investigation on these 12 open-source software projects written in C++ and Java programming languages shows that if we combine the features from SCG with conventional features used in similar studies, we will get the increased performance of Machine Learning (ML) based buggy commit detection models. We also find the increase of F1 Scores in predicting buggy and non-buggy commits statistically significant using the Wilcoxon Signed Rank Test. Since SCG-based feature values represent the style or structural properties of source code updates or changes in the software system, it suggests the importance of careful maintenance of source code style or structure for keeping a software system bug-free.
C1 [Nadim, Md; Mondal, Debajyoti; Roy, Chanchal K.] Univ Saskatchewan, Saskatoon, SK, Canada.
C3 University of Saskatchewan
RP Nadim, M (corresponding author), Univ Saskatchewan, Saskatoon, SK, Canada.
EM mdn769@usask.ca; d.mondal@usask.ca; chanchal.roy@usask.ca
OI Nadim, Md/0000-0003-1765-2462
FU Natural Sciences and Engineering Research Council of Canada (NSERC);
   Global Institute for Food Security (GIFS); Global Institute for Water
   Security (GIWS)
FX This work is supported by the Natural Sciences and Engineering Research
   Council of Canada (NSERC) and by two Canada First Research Excellence
   Fund (CFREF) grants coordinated by Global Institute for Food Security
   (GIFS) and Global Institute for Water Security (GIWS).
CR Alexandru CV, 2019, 2019 SEVENTH IEEE WORKING CONFERENCE ON SOFTWARE VISUALIZATION (VISSOFT), P12, DOI 10.1109/VISSOFT.2019.00010
   Allamanis M., 2018, INT C LEARN REPR ICL
   Nguyen AT, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P858, DOI 10.1109/ICSE.2015.336
   [Anonymous], 1908, BIOMETRIKA, V6, P1
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering (FSE'11), DOI [10.1145/2025113.2025121, DOI 10.1145/2025113.2025121]
   [Anonymous], 2007, Software Visualization: Visualizing the Structure, Behavior, and Evolution of Software
   Asaduzzaman M., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P116, DOI 10.1109/MSR.2012.6224267
   Bavota G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P104, DOI 10.1109/SCAM.2012.20
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bernardi ML, 2012, EUR CON SFTWR MTNCE, P139, DOI 10.1109/CSMR.2012.24
   Bondy JA., 1976, Graph theory with applications, P9
   Borg M, 2019, PROCEEDINGS OF THE 3RD ACM SIGSOFT INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE '19), P7, DOI 10.1145/3340482.3342742
   Bulmer J, 2018, PROCEEDINGS OF THE 23RD WESTERN CANADIAN CONFERENCE ON COMPUTING EDUCATION (WCCCE '18), DOI 10.1145/3209635.3209652
   Burch M, 2011, IEEE T VIS COMPUT GR, V17, P2344, DOI 10.1109/TVCG.2011.226
   Canfora G., 2011, 2011 18th Working Conference on Reverse Engineering, P191, DOI 10.1109/WCRE.2011.31
   Chevalier F., 2007, 9 INT WORKSHOP PRINC, P90
   COLLOFELLO JS, 1989, J SYST SOFTWARE, V9, P191, DOI 10.1016/0164-1212(89)90039-3
   Dhaya R., 2020, J TRENDS COMP SCI SM, V2, P109, DOI [10.36548/jtcsst.2020.2.005, DOI 10.36548/JTCSST.2020.2.005]
   Ell J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1471, DOI 10.1109/ICSE.2013.6606748
   Eyolfson J., 2011, WORKING C MINING SOF, P153, DOI DOI 10.1145/1985441.1985464
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   GoogleDevelopers, 2020, CLASS PREC REC MACH
   Gove R, 2019, IEEE INT CON INF VIS, P201, DOI 10.1109/IV.2019.00042
   Gu Z., 2010, ICSE 10, V1, P55, DOI DOI 10.1145/1806799.1806812
   Hamilton W. L., 2017, B TECHNICAL COMMITTE, V40, P52
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Hindle Abram, 2008, P 2008 INT WORKING C, P99
   Hinton G. E., 2002, Advances in Neural InformationProcessing Systems, P857
   Islam MR, 2020, APPL COMPUT REV, V20, P18, DOI [10.1145/3447332.3447334, 10.1145/3341105.3373880]
   Jajuga K, 2000, ST CLASS DAT ANAL, P105
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Jones K. S., 1994, Current Issues in Computational Linguistics: In Honour of Don Walker, P3, DOI [DOI 10.1007/978-0-585-35958-81, DOI 10.1007/978-0-585-35958-8_1]
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Kim S, 2006, Proceedings of the 2006 international workshop on Mining software repositories, P173
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Kim Y, 2021, IEEE T VIS COMPUT GR, V27, P656, DOI 10.1109/TVCG.2020.3030414
   Kruiger JF, 2017, COMPUT GRAPH FORUM, V36, P283, DOI 10.1111/cgf.13187
   LLVM Compiler Infrastructure, 2019, LLVMS AN TRANSF PASS
   Mikolov T., 2013, ADV NEURAL INFORM PR, V26, P3111, DOI DOI 10.5555/2999792.2999959
   Mockus A, 2000, PROC IEEE INT CONF S, P120, DOI 10.1109/ICSM.2000.883028
   Mostafa N., 2009, Proceedings of the 7th International Conference on Principles and Practice of Programming in Java, PPPJ'09, P162, DOI 10.1145/1596655.1596682
   Mou LL, 2016, AAAI CONF ARTIF INTE, P1287
   Myers EugeneM., 1981, P 8 ACM SIGPLAN SIGA, P219, DOI 10.1145/567532.567556
   Nadim M, 2020, THESIS U SASKATCHEWA
   Nam D, 2018, PROC IEEE ACM INT C, P53
   Pradel M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276517
   Purushothaman R, 2005, IEEE T SOFTWARE ENG, V31, P511, DOI 10.1109/TSE.2005.74
   Rajlich V., 2014, Proceedings of the Conference on the Future of Software Engineering, P133, DOI [10.1145/2593882.2593893, DOI 10.1145/2593882.2593893]
   Ray B, 2016, PROC INT CONF SOFTW, P428, DOI 10.1145/2884781.2884848
   Reniers D, 2014, SCI COMPUT PROGRAM, V79, P224, DOI 10.1016/j.scico.2012.05.002
   Rosen C, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P966, DOI 10.1145/2786805.2803183
   Rosner B, 2006, BIOMETRICS, V62, P185, DOI 10.1111/j.1541-0420.2005.00389.x
   Sandoval Alcocer J.P., 2013, 2013 1 IEEE WORK C S, P1, DOI [DOI 10.1109/VISSOFT.2013.6650523, 10.1109/ICTON.2013.6602680, DOI 10.1109/ICTON.2013.6602680]
   Alcocer JPS, 2019, 2019 SEVENTH IEEE WORKING CONFERENCE ON SOFTWARE VISUALIZATION (VISSOFT), P1, DOI 10.1109/VISSOFT.2019.00009
   Shakya S., 2020, J Ubiquitous Comput Communication Technol (UCCT), P126, DOI DOI 10.36548/JUCCT.2020.3.002
   Shivaji S, 2013, IEEE T SOFTWARE ENG, V39, P552, DOI 10.1109/TSE.2012.43
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   Sliwerski J., 2005, P 5 JOINT M EUROPEAN, P107
   Storey MA, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P139, DOI 10.1109/FOSM.2008.4659257
   Tabassum S, 2020, PROC INT CONF SOFTW, P554, DOI 10.1145/3377811.3380403
   Tan M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P99, DOI 10.1109/ICSE.2015.139
   Tomida Y, 2019, 2019 SEVENTH IEEE WORKING CONFERENCE ON SOFTWARE VISUALIZATION (VISSOFT), P23, DOI 10.1109/VISSOFT.2019.00011
   Tufano M, 2018, IEEE WORK CONF MIN S, P542, DOI 10.1145/3196398.3196431
   van der Maaten L, 2008, J MACH LEARN RES, V9, P2579
   Vieira R, 2019, 15TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING (PROMISE'19), P80, DOI 10.1145/3345629.3345639
   Voinea L., 2005, Proceedings of the ACM Symposium on Software Visualization, P47, DOI [10.1145/1056018.1056025, DOI 10.1145/1056018.1056025]
   Wang S, 2016, PROC INT CONF SOFTW, P297, DOI 10.1145/2884781.2884804
   Wen M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P326, DOI 10.1145/3338906.3338962
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Yang XL, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P17, DOI 10.1109/QRS.2015.14
   Zhang J, 2019, PROC INT CONF SOFTW, P783, DOI 10.1109/ICSE.2019.00086
NR 71
TC 7
Z9 7
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 27
DI 10.1007/s10515-022-00326-0
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZL1HP
UT WOS:000763432000002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nistala, PV
   Rajbhoj, A
   Kulkarni, V
   Soni, S
   Nori, KV
   Reddy, R
AF Nistala, Padmalata, V
   Rajbhoj, Asha
   Kulkarni, Vinay
   Soni, Shivani
   Nori, Kesav, V
   Reddy, Raghu
TI Towards digitalization of requirements: generating context-sensitive
   user stories from diverse specifications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE NLP; NLP4RE; Model extraction; Requirements digitalization; Requirement
   meta-model; User story; Product context; Feature model; Feature
   classification; Requirement specification
ID LANGUAGE; TRANSFORMATION; MODELS
AB Requirements Engineering in the industry is expertise-driven, heavily manual, and centered around various types of requirement specification documents being prepared and maintained. These specification documents are in diverse formats and vary depending on whether it is a business requirement document, functional specification, interface specification, client specification, and so on. These diverse specification documents embed crucial product knowledge such as functional decomposition of the domain into features, feature hierarchy, feature types and their specific feature characteristics, dependencies, business context, etc. Moreover, in a product development scenario, thousands of pages of requirement specification documentation is created over the years. Comprehending functionality and its associated context from large volumes of specification documents is a highly complex task. To address this problem, we propose to digitalize the requirement specification documents into processable models. This paper discusses the salient aspects involved in the digitalization of requirements knowledge from diverse requirement specification documents. It proposes an AI engine for the automatic transformation of diverse text-based requirement specifications into machine-processable models using NLP techniques and the generation of context-sensitive user stories. The paper describes the key requirement abstractions and concepts essential in an industrial scenario, the conceptual meta-model, and DizReq engine (AI engine for digitalizing requirements) implementation for automatically transforming diverse requirement specifications into user stories embedding the business context. The evaluation results from digitalizing specifications of an IT product suite are discussed: mean feature extraction efficiency is 40 features/file, mean user story extraction efficiency is 71 user stories/file, feature extraction accuracy is 94%, and requirement extraction accuracy is 98%.
C1 [Nistala, Padmalata, V] Tata Consultancy Serv, TCS Res, Hyderabad, India.
   [Rajbhoj, Asha; Kulkarni, Vinay; Soni, Shivani] Tata Consultancy Serv, TCS Res, Pune, Maharashtra, India.
   [Nori, Kesav, V; Reddy, Raghu] Int Inst Informat Technol, Hyderabad, India.
C3 Tata Sons; Tata Consultancy Services Limited (TCS); Tata Sons; Tata
   Consultancy Services Limited (TCS); International Institute of
   Information Technology Hyderabad
RP Nistala, PV (corresponding author), Tata Consultancy Serv, TCS Res, Hyderabad, India.
EM nistala.padma@tcs.com
RI , Raghu/JYO-4409-2024
OI , Raghu/0000-0003-2280-5400; Nistala, Padmalata/0000-0003-1204-4011
CR ACHER M., 2012, P 6 INT WORKSH VAR M, P45, DOI DOI 10.1145/2110147.2110153
   Ambriola V., 2006, Automated Software Engineering, V13, P107, DOI 10.1007/s10515-006-5468-2
   [Anonymous], 2015, ISO/IEC 2382:2015
   [Anonymous], 2017, PROC CVPR IEEE
   [Anonymous], 2021, DOCX4J OPEN SOURCE A
   Arora C, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P250, DOI 10.1145/2976767.2976769
   Bleistein SJ, 2006, INFORM SOFTWARE TECH, V48, P846, DOI 10.1016/j.infsof.2005.12.001
   Bourque Pierre, 2014, SWEBOK: Guide to the Software Engineering Body of Knowledge, V3rd
   Bryant Barett R., 2003, NATURAL LANGUAGE REQ
   Dag J. N., 2002, 8 INT WORKSH REQ ENG
   Dalpiaz F, 2018, IEEE SOFTWARE, V35, P115, DOI 10.1109/MS.2018.3571242
   Davril Jean-Marc., 2013, JOINT M EUR SOFTW EN, P290, DOI DOI 10.1145/2491411.2491455
   Deeptimahanti DK, 2009, IEEE INT CONF AUTOM, P680, DOI 10.1109/ASE.2009.48
   Deeptimahanti DK, 2011, P 4 IND SOFTW ENG C, P165, DOI [10.1145/1953355.1953378, DOI 10.1145/1953355.1953378]
   Diamantopoulos T, 2017, LANG RESOUR EVAL, V51, P495, DOI 10.1007/s10579-017-9381-z
   Elallaoui M, 2018, PROCEDIA COMPUT SCI, V130, P42, DOI 10.1016/j.procs.2018.04.010
   Ferrari A, 2017, IEEE SOFTWARE, V34, P28, DOI 10.1109/MS.2017.4121207
   Herchi H., 2012, USER REQUIREMENTS UM, P4
   Hong D, 2005, SEVENTH INTERNATIONAL CONFERENCE ON ELECTRONIC COMMERCE, VOLS 1 AND 2, SELECTED PROCEEDINGS, P590
   Hull E., 2005, REQUIR ENG, V2nd
   Kassab M, 2015, IEEE INT WORKS EMPIR, P1, DOI 10.1109/EmpiRE.2015.7431299
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   Kulkarni V, 2010, LECT NOTES COMPUT SC, V6395, P331
   Liddy E. D., 2001, NATURAL LANGUAGE PRO, P15
   Lucassen G, 2015, INT REQUIR ENG CONF, P126, DOI 10.1109/RE.2015.7320415
   Melouk M, 2020, PROCEDIA COMPUT SCI, V170, P869, DOI 10.1016/j.procs.2020.03.122
   Mich L., 2004, MARKET RES REQUIREME, P25
   More P., 2012, International Journal of Applied Information Systems, V1, P19, DOI 10.5120/ijais12-450222
   Nistala P., 2020, 2020 IEEE ACM INT C, P10
   Nistala P, 2013, S VIS LANG HUM CEN C, P320, DOI 10.1109/RE.2013.6636737
   Riebisch Matthias., 2003, Modelling Variability for Object Oriented Product Lines, V22, P64
   Robeer M, 2016, INT REQUIR ENG CONF, P196, DOI 10.1109/RE.2016.40
   ROLLAND C, 1992, LECT NOTES COMPUT SC, V593, P257
   Savic D, 2011, IEEE ANNU SOFTW ENG, P19, DOI 10.1109/SEW.2011.9
   Schatsky D., 2020, AI IS HELPING MAKE B, V12
   Shaheen R., 2018, REQUIREMENTS MANAGEM, P1
   Sitou W, 2007, P INT COMP SOFTW APP, P593
   Sree-Kumar A, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P43, DOI 10.1145/3233027.3233029
   Tao Xie, 2018, Dependable Software Engineering. Theories, Tools, and Applications. 4th International Symposium, SETTA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 10998), P3, DOI 10.1007/978-3-319-99933-3_1
   Yue T, 2011, REQUIR ENG, V16, P75, DOI 10.1007/s00766-010-0111-y
   Zhao L., 2020, NATURAL LANGUAGE PRO, V75
NR 41
TC 4
Z9 4
U1 0
U2 20
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 26
DI 10.1007/s10515-022-00324-2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZL1HP
UT WOS:000763432000001
DA 2024-07-18
ER

PT J
AU Gharaat, M
   Sharbaf, M
   Zamani, B
   Hamou-Lhadj, A
AF Gharaat, Mohammadali
   Sharbaf, Mohammadreza
   Zamani, Bahman
   Hamou-Lhadj, Abdelwahab
TI ALBA: a model-driven framework for the automatic generation of android
   location-based apps
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model-driven software engineering; Domain specific language;
   Location-based android apps; Software engineering for mobile apps;
   Automated software engineering
AB In recent years, the number of smartphone users has increased dramatically. These users download millions of apps and use them for various services. Due to the significant demand for mobile apps, developers often seek faster development methods and more effective tools and techniques to generate these apps. Many of these apps are location-based apps in which users receive services based on their geographical location. In this paper, we propose a model-driven approach for the automatic generation of Android location-based mobile apps. Our framework, called ALBA, consists of a domain-specific modeling language, a modeling tool, and a plugin which includes model to code transformations. The modeling tool enables a novice designer to model a location-based app. The model is validated against the predefined constraints and the editor prevents creating invalid models. The designer uses the plugin to generate the Android code of the app. The evaluation of our work is two fold. First, to evaluate the generalizability of the ALBA framework, we conducted an experiment which includes the generation of four industrial location-based apps. Second, to evaluate the usability and quality of both the framework and the generated apps, we conducted a case study consists of three experiments. The results of the evaluation are promising both in terms of the applicability of the framework and the quality of the generated apps.
C1 [Gharaat, Mohammadali; Sharbaf, Mohammadreza] Univ Isfahan, Dept Software Engn, MDSE Res Grp, Esfahan, Iran.
   [Zamani, Bahman; Hamou-Lhadj, Abdelwahab] Concordia Univ, Dept Elect & Comp Engn, Montreal, PQ, Canada.
C3 University of Isfahan; Concordia University - Canada
RP Zamani, B (corresponding author), Concordia Univ, Dept Elect & Comp Engn, Montreal, PQ, Canada.
EM mohamadali.gharat@mehr.ui.ac.ir; m.sharbaf@eng.ui.ac.ir;
   zamani@eng.ui.ac.ir; wahab.hamou-lhadj@concordia.ca
RI Sharbaf, Mohammadreza/ABC-9932-2020
OI Sharbaf, Mohammadreza/0000-0001-5113-7689; Hamou-Lhadj,
   Abdelwahab/0000-0002-3319-5006
CR Alfraihi H, 2018, LECT NOTES COMPUT SC, V11150, P229, DOI 10.1007/978-3-030-01042-3_14
   [Anonymous], 2012, EXPT SOFTWARE ENG
   [Anonymous], 2010, THE EPSILON BOOK
   Bangor A, 2009, J USABILITY STUD, V4, P114
   Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   Benouda Hanane, 2016, International Conference on Mobile and Wireless Technologies (ICMWT2016). LNEE 391, P241, DOI 10.1007/978-981-10-1409-3_27
   Bernaschina Carlo, 2017, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). Proceedings, P207, DOI 10.1109/MOBILESoft.2017.15
   Brambilla M., 2017, Model-Driven Software Engineering in Practice, Second Edition, ser. Synthesis Lectures on Software Engineering, VSecond
   Clement J., 2019, Number of _apps available in leading
   Combemale B., 2016, ENG MODELING LANGUAG, DOI [10.1201/b21841, DOI 10.1201/B21841]
   Dabit Nader., 2018, React Native in Action
   Dalmasso I, 2013, INT WIREL COMMUN, P323, DOI 10.1109/IWCMC.2013.6583580
   Dehlinger J., 2011, Proceedings of the Workshop on Mobile Software Engineering, P29
   Dillon Andrew., 2001, The evaluation of software usability
   FERRARO R., 2011, Location-Aware Application
   Gaouar L., 2015, P INT C INT INF PROC, P19
   Heitkotter Henning, 2013, P 28 ANN ACM S APPL, P526
   Hemel Z, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P695
   Holst A, 2019, SMARTPHONE USERS WOR
   Holst A, 2019, GLOBAL MARKET SHARE
   HoseinDoost S, 2019, SOFTW SYST MODEL, V18, P1985, DOI 10.1007/s10270-017-0627-4
   Hussain A, 2013, J INF COMMUN TECHNOL, V12, P55
   Kang K. C., 1990, Technical Report
   Kloss Jorg, 2012, ANDROID APPS APP INV
   Kolovos DS, 2017, SOFTW SYST MODEL, V16, P229, DOI 10.1007/s10270-015-0455-3
   Kung D., 2013, Object-oriented Software Engineering: An Agile Unified Methodology
   Kurtev I., 2006, COMPANION 21 ANN ACM, P602, DOI DOI 10.1145/1176617.1176632
   Meirelles P, 2019, LECT NOTES COMPUT SC, V11623, P586, DOI 10.1007/978-3-030-24308-1_47
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Oh YJ, 2019, COMPUT HUM BEHAV, V94, P82, DOI 10.1016/j.chb.2019.01.003
   Okediran O. O., 2014, International Journal of Advanced Networking and Applications, V6, P2195
   Parada A. G., 2011, Proceedings of the 2011 Brazilian Symposium on Computing System Engineering (SBESC 2011), P99, DOI 10.1109/SBESC.2011.22
   Parada AG, 2012, BRAZ SYM COMPUT SYST, P192, DOI 10.1109/SBESC.2012.44
   Quazi FUR., 2018, INT J COMPUT SCI MOB, V7, P1
   Raveh J, 2019, USE LOCATION BASED S
   Rieger C, 2018, COMPUT LANG SYST STR, V53, P43, DOI 10.1016/j.cl.2018.01.001
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Sydow L, 2018, RECORD LEVELS APP DO
   Tufail H, 2018, 2018 IEEE 9TH ANNUAL INFORMATION TECHNOLOGY, ELECTRONICS AND MOBILE COMMUNICATION CONFERENCE (IEMCON), P1165, DOI 10.1109/IEMCON.2018.8614821
   Usman M, 2017, J SYST SOFTWARE, V123, P1, DOI 10.1016/j.jss.2016.09.049
   Vaupel S, 2018, SOFTW SYST MODEL, V17, P35, DOI 10.1007/s10270-016-0559-4
   Zolotas C, 2017, AUTOMAT SOFTW ENG, V24, P791, DOI 10.1007/s10515-016-0206-x
NR 43
TC 5
Z9 5
U1 0
U2 14
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2021
VL 28
IS 1
AR 2
DI 10.1007/s10515-020-00278-3
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PU7FM
UT WOS:000609465700001
PM 38624616
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Jorro-Aragoneses, JL
   Díaz-Agudo, B
   Recio-García, JA
   Jimenez-Díaz, G
AF Luis Jorro-Aragoneses, Jose
   Diaz-Agudo, Belen
   Recio-Garcia, Juan A.
   Jimenez-Diaz, Guillermo
TI RecoLibry Suite: a set of intelligent tools for the development of
   recommender systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Recommender systems; Dependency injection; Framework suite; Components
   architecture; Ontology
AB Recommendation systems are a key part of almost every modern consumer website. Recommender systems include techniques to filter, explore and rank a huge amount of information and items according to the user's current interests, and the similarity among users and items. Designing and implementing a recommender system usually requires high programming and machine learning skills. To alleviate these processes we present RecoLibry Suite: a set of intelligent tools to assist different types of users on the development of recommender systems. RecoLibry Suite supports not only the design and development of recommender systems but also its deployment as software as a service. We have evaluated the usability of the proposed tools with real users.
C1 [Luis Jorro-Aragoneses, Jose; Diaz-Agudo, Belen; Recio-Garcia, Juan A.; Jimenez-Diaz, Guillermo] Univ Complutense Madrid, Dept Software Engn & Artificial Intelligence, Madrid, Spain.
C3 Complutense University of Madrid
RP Jorro-Aragoneses, JL (corresponding author), Univ Complutense Madrid, Dept Software Engn & Artificial Intelligence, Madrid, Spain.
EM jljorro@ucm.es; belend@ucm.es; jareciog@ucm.es; gjimenez@ucm.es
RI Jorro Aragoneses, Jose Luis/GWC-1253-2022; Díaz-Agudo,
   Belén/AAC-5815-2021; Recio-Garcia, Juan A./K-5962-2014
OI Jorro Aragoneses, Jose Luis/0000-0002-2917-3912; Díaz-Agudo,
   Belén/0000-0003-2818-027X; Recio-Garcia, Juan A./0000-0001-8731-6195
FU UCM [921330]; Spanish Committee of Economy and Competitiveness
   [TIN2017-87330-R]; Banco Santander in UCM [CT17/17-CT17/18]
FX Supported by the UCM (Research Group 921330), the Spanish Committee of
   Economy and Competitiveness (TIN2017-87330-R) and the funding provided
   by Banco Santander in UCM (CT17/17-CT17/18).
CR Abadi Martin, 2016, TENSORFLOW LARGE SCA, V16, P265
   Adomavicius G, 2011, RECOMMENDER SYSTEMS HANDBOOK, P217, DOI 10.1007/978-0-387-85820-3_7
   [Anonymous], 2012, P ACM RECSYS CHALL
   Ayala-Gómez F, 2018, LECT NOTES ARTIF INT, V11289, P176, DOI 10.1007/978-3-030-04497-8_15
   BELLOTOMAS JJ, 2004, ECCBR 2004
   CHAN S, 2013, CIKM 2013, P2493
   CHEN G., 2000, TR2000381 DARTM COLL
   Councill B., 2001, COMPONENT BASED SOFT, P5
   Ekstrand Michael D, 2011, P 5 ACM C REC SYST, P133, DOI DOI 10.1145/2043932.2043958
   Frakes W. B., 1987, SIGIR Forum, V21, P30, DOI 10.1145/24634.24636
   Frokjar E., 2000, PROCEEDING ACM CHI 2, P345, DOI DOI 10.1145/332040.332455
   Gantner Zeno, 2011, ACM C REC SYST ACM N, P305
   Gómez-Albarrán M, 1998, ECAI 1998: 13TH EUROPEAN CONFERENCE ON ARTIFICIAL INTELLIGENCE, PROCEEDINGS, P98
   Harper FM, 2016, ACM T INTERACT INTEL, V5, DOI 10.1145/2827872
   Jorro-Aragoneses JL, 2019, KNOWL-BASED SYST, V182, DOI 10.1016/j.knosys.2019.07.025
   Jorro-Aragoneses JL, 2017, PROC INT C TOOLS ART, P796, DOI 10.1109/ICTAI.2017.00125
   JORROARAGONESES JL, 2017, ICTAI 2017
   Kelly CJ, 2019, BMC MED, V17, DOI 10.1186/s12916-019-1426-2
   Khoshgoftaar T.M., 2009, ADV ARTIFICIAL INTEL, DOI [10.1155/2009/421425, DOI 10.1155/2009/421425]
   KIRK J, 2018, TENSORREC
   Kolodner JL, 2006, CAMB HANDB PSYCHOL, P225
   Koren Y, 2011, RECOMMENDER SYSTEMS HANDBOOK, P145, DOI 10.1007/978-0-387-85820-3_5
   Kula M, 2017, Spotlight
   Kula M, 2015, Proceedings of the 2nd Workshop on New Trends on Content-Based Recommender Systems co-located with 9th ACM Conference on Recommender Systems (RecSys 2015), Vienna, Austria, September 16-20, 2015, P14
   Landset S., 2015, Journal of Big Data, V2, P1, DOI DOI 10.1186/S40537-015-0032-1
   Lops P, 2011, RECOMMENDER SYSTEMS HANDBOOK, P73, DOI 10.1007/978-0-387-85820-3_3
   Mao JM, 2015, BIOMARK RES, V3, DOI 10.1186/s40364-015-0034-3
   MCILROY MD, 1969, SOFTW ENG C SPONS NA
   NEWELL A, 1982, ARTIF INTELL, V18, P87, DOI 10.1016/0004-3702(82)90012-1
   Paraschakis D, 2015, 2015 IEEE 14TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P1024, DOI 10.1109/ICMLA.2015.183
   Paszke Adam, 2017, Pytorch
   Recio-García JA, 2014, SCI COMPUT PROGRAM, V79, P126, DOI 10.1016/j.scico.2012.04.002
   Recio-García JA, 2014, INFORM SYST, V40, P168, DOI 10.1016/j.is.2012.11.003
   Recio-García JA, 2008, RECSYS'08: PROCEEDINGS OF THE 2008 ACM CONFERENCE ON RECOMMENDER SYSTEMS, P243
   Ricci F, 2011, RECOMMENDER SYSTEMS HANDBOOK, P1, DOI 10.1007/978-0-387-85820-3_1
   Sarwat M, 2017, PROC INT CONF DATA, P1320, DOI 10.1109/ICDE.2017.174
   SEAN O, 2018, ORYX 2
   SZYPERSKI C, 2019, ECOOP 2019, P184
   Szyperski Clemens., 2000, Foundations of Component-Based Systems, P1
   van Setten M, 2004, LECT NOTES COMPUT SC, V3137, P235
   VND K, 2017, TENSORREC
   2016, AP SPARK LIGHTN FAST
NR 42
TC 5
Z9 5
U1 2
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2020
VL 27
IS 1-2
BP 63
EP 89
DI 10.1007/s10515-020-00269-4
EA MAR 2020
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LU4VK
UT WOS:000523378800001
DA 2024-07-18
ER

PT J
AU Xia, X
   Lo, D
AF Xia, Xin
   Lo, David
TI An effective change recommendation approach for supplementary bug fixes
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Change recommendation; Supplementary bug fixes; Random walk; Genetic
   algorithm
ID CODE; IMPACT
AB Bug fixing is one of the most important activities during software development and maintenance. A substantial number of bugs are often fixed more than once due to incomplete initial fixes which need to be followed up by supplementary fixes. Automatically recommending relevant change locations for supplementary bug fixes can help developers to improve their productivity. It also help improve the reliability of systems by highlighting locations that a developer potentially needs to change to completely remove a bug. Unfortunately, a recent study by Park et al. shows that many change recommendation techniques do not work for supplementary bug fixes. In this paper, to advance the capabilities of existing change recommendation techniques, we propose an effective approach named SupLocator to recommend relevant locations (i.e., methods) that need to be changed for supplementary bug fixes. Based on various relationships among methods, classes, and packages in the source code (such as containment, inheritance, historical co-change, etc.), SupLocator extracts six change relationship graphs. Next, SupLocator performs random walk on each of the 6 graphs, and for each it outputs a ranked list of candidate change locations. Finally, SupLocator combines these six ranked lists by leveraging genetic algorithm. To investigate the benefits of SupLocator, we perform experiments on three projects, i.e., Eclipse JDT, Eclipse SWT, and Equinox p2. The experimental results show that on average SupLocator can achieve top-1, top-5, and top-10 accuracies, mean reciprocal rank (MRR), and mean average precision (MAP) of 0.51, 0.65, 0.67, 0.58 and 0.32 for the three projects, which improve the best variants of the approach proposed by Park et al. by 1523.09, 639.70, 550.62, 919.41, and 1478.44 %, respectively. It also improves the approach proposed by Saul et al. in terms of top-1, top-5, and top-10 accuracies, MRR, and MAP by 71.81, 29.54, 18.30, 47.24, and 56.60 %, respectively. Statistical tests show that the improvements are statistically significant.
C1 [Xia, Xin] Zhejiang Univ, Coll Comp Sci & Technol, Hangzhou, Zhejiang, Peoples R China.
   [Lo, David] Singapore Management Univ, Sch Informat Syst, Singapore, Singapore.
C3 Zhejiang University; Singapore Management University
RP Xia, X (corresponding author), Zhejiang Univ, Coll Comp Sci & Technol, Hangzhou, Zhejiang, Peoples R China.
EM xxia@zju.edu.cn; davidlo@smu.edu.sg
RI Xia, Xin/AAD-6217-2022; Lo, David/A-2493-2012
OI Xia, Xin/0000-0002-6302-3256; Lo, David/0000-0002-4367-7201
FU NSFC Program [61602403, 61402406]; National Key Technology R&D Program
   of the Ministry of Science and Technology of China [2015BAH17F01]
FX We would like to thank Jihun Park for providing us the datasets and
   source code used in their study (Park et al. 2014). This research was
   supported by NSFC Program (Nos. 61602403 and 61402406) and National Key
   Technology R&D Program of the Ministry of Science and Technology of
   China under grant 2015BAH17F01.
CR Abdi H., ENCY MEASUREMENT STA
   An L, 2014, IEEE INT WORK C SO, P205, DOI 10.1109/SCAM.2014.29
   [Anonymous], 2012, SIGSOFT
   [Anonymous], 2005, Proc. of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE'05)
   [Anonymous], 1999, MODERN INFORM RETRIE
   [Anonymous], P 34 INT ACM SIGIR C
   [Anonymous], 2009, FOUND TRENDS INF RET, DOI DOI 10.1561/1500000016
   [Anonymous], 2007, P 6 JOINT M EUR SOFT
   [Anonymous], Introduction to genetic algorithms
   [Anonymous], 2014, P 22 INT C PROGR COM
   [Anonymous], INTERNET SOC SPORT S
   [Anonymous], 2013, Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering-ESEC/FSE 2013, page
   [Anonymous], 2014, P 29 ACM IEEE INT C, DOI DOI 10.1145/2642937.2642956
   [Anonymous], AUTOMATED SOFTWARE E
   [Anonymous], 2001, INTRO GRAPH THEORY
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Burges C., 2005, ICML, P89
   Canfora G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P252, DOI 10.1109/ICST.2013.38
   Dagenais B, 2008, ACM SIGPLAN NOTICES, V43, P313, DOI 10.1145/1449955.1449790
   Deb K., 2001, MULTIOBJECTIVE OPTIM
   Freund Y, 2004, J MACH LEARN RES, V4, P933, DOI 10.1162/1532443041827916
   Goldber D. E., 1988, Machine Learning, V3, P95, DOI 10.1023/A:1022602019183
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Hassan AE, 2004, PROC IEEE INT CONF S, P284, DOI 10.1109/ICSM.2004.1357812
   Hassan AE, 2006, EMPIR SOFTW ENG, V11, P335, DOI 10.1007/s10664-006-9006-4
   Herzig K, 2013, IEEE WORK CONF MIN S, P121, DOI 10.1109/MSR.2013.6624018
   Herzig K, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P60, DOI 10.1109/ISSRE.2011.16
   Jihun Park, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P40, DOI 10.1109/MSR.2012.6224298
   Joachims T, 2002, P 8 ACM SIGKDD INT C, P133, DOI [DOI 10.1145/775047.775067, 10.1145/775047.775067]
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kawrykow D, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P351, DOI 10.1145/1985793.1985842
   Kleinberg JM, 1999, J ACM, V46, P604, DOI 10.1145/324133.324140
   Le Goues C., 2012, IEEE Transactions on Software Engineering, V38, P54, DOI 10.1109/TSE.2011.104
   Liu Y, 2010, IEEE T SOFTWARE ENG, V36, P852, DOI 10.1109/TSE.2010.51
   Malik H, 2008, PROC IEEE INT CONF S, P177, DOI 10.1109/ICSM.2008.4658066
   Meffert Klaus., JGAP JAVA GENETIC AL
   Ming-Feng Tsai, 2007, 30th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P383, DOI 10.1145/1277741.1277808
   Nguyen Tien N, 2010, Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering-Volume 1, ICSE '10, P315
   Page L., 1999, PAGERANK CITATION RA
   Panichella A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P522, DOI 10.1109/ICSE.2013.6606598
   Panichella A, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P164, DOI 10.1109/CSMR-WCRE.2014.6747166
   Poshyvanyk D, 2009, EMPIR SOFTW ENG, V14, P5, DOI 10.1007/s10664-008-9088-2
   Rao S., 2011, P 8 WORK C MIN SOFTW, P43
   Robillard MP, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P406, DOI 10.1109/ICSE.2002.1007986
   Saha RK, 2013, IEEE INT CONF AUTOM, P345, DOI 10.1109/ASE.2013.6693093
   Shihab E, 2013, EMPIR SOFTW ENG, V18, P1005, DOI 10.1007/s10664-012-9228-6
   Tamrawi A, 2011, P 19 ACM SIGSOFT S 1, P365, DOI [DOI 10.1145/2025113.2025163, 10.31274/etd-180810-1814, DOI 10.31274/ETD-180810-1814]
   Thongtanunam P, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P141, DOI 10.1109/SANER.2015.7081824
   Wang Tiantian, 2013, P 2013 9 JOINT M FDN, P455
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Xia X, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P134, DOI 10.1109/CSMR-WCRE.2014.6747163
   Ying ATT, 2004, IEEE T SOFTWARE ENG, V30, P574, DOI 10.1109/TSE.2004.52
   Zhang QF, 2007, IEEE T EVOLUT COMPUT, V11, P712, DOI 10.1109/TEVC.2007.892759
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
   Zhou Z.-H., 2012, ENSEMBLE METHODS FDN, DOI DOI 10.1201/B12207
   Zimmermann T, 2005, IEEE T SOFTWARE ENG, V31, P429, DOI 10.1109/TSE.2005.72
   Zimmermann T, 2012, PROC INT CONF SOFTW, P1074, DOI 10.1109/ICSE.2012.6227112
NR 58
TC 19
Z9 20
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2017
VL 24
IS 2
BP 455
EP 498
DI 10.1007/s10515-016-0204-z
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ES3FH
UT WOS:000399413800006
DA 2024-07-18
ER

PT J
AU Rago, A
   Marcos, C
   Diaz-Pace, JA
AF Rago, Alejandro
   Marcos, Claudia
   Diaz-Pace, J. Andres
TI Assisting requirements analysts to find latent concerns with
   <i>REAssistant</i>
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Concern mining; User assistance; Tool support; Semantic analysis;
   Natural language processing; Use case specifications
ID AGREEMENT
AB Textual requirements are very common in software projects. However, this format of requirements often keeps relevant concerns (e.g., performance, synchronization, data access, etc.) from the analyst's view because their semantics are implicit in the text. Thus, analysts must carefully review requirements documents in order to identify key concerns and their effects. Concern mining tools based on NLP techniques can help in this activity. Nonetheless, existing tools cannot always detect all the crosscutting effects of a given concern on different requirements sections, as this detection requires a semantic analysis of the text. In this work, we describe an automated tool called REAssistant that supports the extraction of semantic information from textual use cases in order to reveal latent crosscutting concerns. To enable the analysis of use cases, we apply a tandem of advanced NLP techniques (e.g, dependency parsing, semantic role labeling, and domain actions) built on the UIMA framework, which generates different annotations for the use cases. Then, REAssistant allows analysts to query these annotations via concern-specific rules in order to identify all the effects of a given concern. The REAssistant tool has been evaluated with several case-studies, showing good results when compared to a manual identification of concerns and a third-party tool. In particular, the tool achieved a remarkable recall regarding the detection of crosscutting concern effects.
C1 [Rago, Alejandro; Marcos, Claudia; Diaz-Pace, J. Andres] UNICEN Univ, ISISTAN Res Inst, Paraje Arroyo Seco, Tandil, Argentina.
   [Rago, Alejandro; Diaz-Pace, J. Andres] Consejo Nacl Invest Cient & Tecn, RA-1033 Buenos Aires, DF, Argentina.
   [Marcos, Claudia] CIC, Buenos Aires, DF, Argentina.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET)
RP Rago, A; Marcos, C; Diaz-Pace, JA (corresponding author), UNICEN Univ, ISISTAN Res Inst, Paraje Arroyo Seco, Tandil, Argentina.
EM arago@exa.unicen.edu.ar; cmarcos@exa.unicen.edu.ar;
   adiaz@exa.unicen.edu.ar
OI Rago, Alejandro/0000-0002-8617-4225
FU ANPCyT (Argentina) through PICT Project [2247]
FX This work was partially supported by ANPCyT (Argentina) through PICT
   Project 2010 No. 2247. The authors are grateful to all the participants
   of the case-studies. The authors also thank the anonymous reviewers for
   their feedback that helped to improve the quality of the manuscript.
CR Ali B, 2008, P ITSIM 08, V3, P1
   [Anonymous], 2012, MINING UNSTRUCTURED
   [Anonymous], 2010, Synthesis Lectures on Human Language Technology Series
   Araujo J., 2005, Early Aspects: The Current Landscape
   Baeza-Yates R A, 2011, MODERN INFORM RETRIE
   Baniassad E, 2006, IEEE SOFTWARE, V23, P61, DOI 10.1109/MS.2006.8
   Bass L, 2012, SEI SERIES SOFTWARE
   Bell R, 2011, COURSE REGISTRATION
   Brown N, 2011, 2011 9TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P103, DOI 10.1109/WICSA.2011.22
   Chen LP, 2013, IEEE SOFTWARE, V30, P38, DOI 10.1109/MS.2012.174
   Cockburn A., 2001, Writing effective use cases, V1
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Dekhtyar A, 2011, INT REQUIR ENG CONF, P111, DOI 10.1109/RE.2011.6051649
   Drazan J, 2007, LECT NOTES COMPUT SC, V4362, P856
   Ferrucci D., 2004, Natural Language Engineering, V10, P327, DOI 10.1017/S1351324904003523
   Frakes WB., 1992, Information retrieval: Data structures and algorithms
   Gallardo-Valencia Rosalva E., 2007, 5th International Workshop on Comparative Evaluation in Requirements Engineering (CERE 2007), P11, DOI 10.1109/CERE.2007.2
   Gersmann S., 2005, THESIS TU MUNCHEN
   Hsu C. W., 2010, Technical Report
   Kamalrudin M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P531, DOI 10.1145/1985793.1985866
   Kamata MI, 2007, INT REQUIR ENG CONF, P69, DOI 10.1109/RE.2007.31
   Knauss E, 2009, 2009 ICSE WORKSHOP ON WIKIS FOR SOFTWARE ENGINEERING, P25, DOI 10.1109/WIKIS4SE.2009.5069994
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Laplante P.A., 2013, APPL SOFTWARE ENG SE
   Manning C., 1999, FDN STAT NATURAL LAN, V59
   Mich L, 2004, REQUIR ENG, V9, P151, DOI 10.1007/s00766-004-0195-3
   Mullick N, 2006, 2006 IEEE INTERNATIONAL CONFERENCE ON GLOBAL SOFTWARE ENGINEERING, PROCEEDINGS, P203, DOI 10.1109/ICGSE.2006.261234
   Rago A, 2013, REQUIR ENG, V18, P67, DOI 10.1007/s00766-011-0142-z
   Rosenhainer L., 2004, AOSD 04 EARLY ASPECT
   Sampaio A., 2007, ESEM 07
   Sampaio A, 2007, LECT NOTES COMPUT SC, V4620, P4
   Sateli B, 2013, P INT COMP SOFTW APP, P405, DOI 10.1109/COMPSAC.2013.68
   Sinha A., 2008, RC24712 IBM
   Svahnberg M, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P288
   Tabares M., 2008, AVANCES SISTEMAS INF, V5, P61
   Tsoumakas G, 2010, DATA MINING AND KNOWLEDGE DISCOVERY HANDBOOK, SECOND EDITION, P667, DOI 10.1007/978-0-387-09823-4_34
   Xiao X., 2012, FSE 12
   Zhang H.M., 2010, COMP DES APPL ICCDA, P624, DOI DOI 10.1109/ICCDA.2010.5540893
NR 38
TC 6
Z9 9
U1 1
U2 16
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2016
VL 23
IS 2
BP 219
EP 252
DI 10.1007/s10515-014-0156-0
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DG7KF
UT WOS:000372262500004
DA 2024-07-18
ER

PT J
AU Zhang, W
   Huang, LG
   Ng, V
   Ge, JD
AF Zhang, Wei
   Huang, Liguo
   Ng, Vincent
   Ge, Jidong
TI <i>SMPLearner</i>: learning to predict software maintainability
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software Maintainability; Maintenance effort; Software metric; Machine
   learning
ID METRICS
AB Accurate and practical software maintainability prediction enables organizations to effectively manage their maintenance resources and guide maintenance-related decision making. This paper presents SMPLearner, an automated learning-based approach to train maintainability predictors by harvesting the actual average maintenance effort computed from the code change history as well as employing a much richer set of 44 four-level hierarchical code metrics collected by static code analysis tools. We systematically evaluated SMPLearner on 150 observations partitioned from releases of eight large scale open source software systems. Our evaluation showed that SMPLearner not only outperformed the traditional 4-metric MI model but also the recent learning-based maintainability predictors constructed based on single Class-level metrics, demonstrating that single Class-level metrics were not sufficient for maintainability prediction.
C1 [Zhang, Wei; Huang, Liguo] So Methodist Univ, Dept Comp Sci & Engn, Dallas, TX 75275 USA.
   [Ng, Vincent] Univ Texas Dallas, Human Language Technol Res Inst, Richardson, TX 75083 USA.
   [Ge, Jidong] Nanjing Univ, Software Inst, State Key Lab Novel Software Technol, Nanjing 210093, Jiangsu, Peoples R China.
C3 Southern Methodist University; University of Texas System; University of
   Texas Dallas; Nanjing University
RP Huang, LG (corresponding author), So Methodist Univ, Dept Comp Sci & Engn, Dallas, TX 75275 USA.
EM wei@smu.edu; lghuang@smu.edu; vince@hlt.utdallas.edu; gjd@nju.edu.cn
OI Huang, LiGuo/0000-0001-7790-0195
FU U.S. National Science Foundation (NSF CNS Award) [1126747]; State Key
   Laboratory for Novel Software Technology of Nanjing University; National
   Natural Science Foundation, China [61100039, 61021062, 61272188,
   91318301]; Natural Science Foundation of Jiangsu Province, China
   [BK20131277]; Direct For Computer & Info Scie & Enginr; Division Of
   Computer and Network Systems [1126747] Funding Source: National Science
   Foundation
FX We thank the anonymous reviewers for their helpful comments on an
   earlier draft of this manuscript. This research is supported by the U.S.
   National Science Foundation (NSF CNS Award # 1126747). It is partially
   supported by the Oversea Fund of State Key Laboratory for Novel Software
   Technology of Nanjing University, National Natural Science Foundation,
   China (No. 61100039, 61021062, 61272188, 91318301), and Natural Science
   Foundation of Jiangsu Province, China (No. BK20131277).
CR Al-Kilidar H., 2005, 2005 International Symposium on Empirical Software Engineering (IEEE Cat. No. 05EX1213)
   [Anonymous], SPEC SESS SYST QUAL
   [Anonymous], 610121990 IEEE
   Baggen R, 2012, SOFTWARE QUAL J, V20, P287, DOI 10.1007/s11219-011-9144-9
   Bhattacharya P, 2012, PROC INT CONF SOFTW, P419, DOI 10.1109/ICSE.2012.6227173
   Bhattacharya P, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P171, DOI 10.1145/1985793.1985817
   Burkett David., 2008, EMNLP, P877
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   COLEMAN D, 1994, COMPUTER, V27, P44, DOI 10.1109/2.303623
   Fernandez-Ramil J, 2009, INT FED INFO PROC, V299, P170
   Foss T, 2003, IEEE T SOFTWARE ENG, V29, P985, DOI 10.1109/TSE.2003.1245300
   Glass R. L., 2002, FACTS FALLACIES SOFT
   Halstead M.H., 1977, OPERATING PROGRAMMIN
   Heitlager I, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P30, DOI 10.1109/QUATIC.2007.8
   Kaur A, 2013, INT J SOFTW ENG KNOW, V23, P743, DOI 10.1142/S0218194013500198
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   Liso A., 2001, CROSSTALK, P15
   Malhotra R, 2012, CURR SCI INDIA, V102, P19
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mittal Harish., 2009, SIGSOFT Software Engineering Notes, V34, P1, DOI DOI 10.1145/1527202.1527210
   Muthanna S, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P248, DOI 10.1109/WCRE.2000.891476
   Oman P., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P337, DOI 10.1109/ICSM.1992.242525
   Riaz M, 2009, INT SYMP EMP SOFTWAR, P368, DOI 10.1109/esem.2009.5314233
   Shepperd M., 2000, Empirical Software Engineering, V5, P175, DOI 10.1023/A:1026582314146
   Singh Y., 2009, SIGSOFT SOFTW ENG NO, V34, P1
   van Koten C, 2006, INFORM SOFTWARE TECH, V48, P59, DOI 10.1016/j.infsof.2005.03.002
   Welker KD, 1997, J SOFTW MAINT-RES PR, V9, P127, DOI 10.1002/(SICI)1096-908X(199705)9:3<127::AID-SMR149>3.0.CO;2-S
   Yu LG, 2006, J SOFTW MAINT EVOL-R, V18, P311, DOI 10.1002/smr.335
   Zhou YM, 2007, J SYST SOFTWARE, V80, P1349, DOI 10.1016/j.jss.2006.10.049
   Zhou Yuming, 2008, Wuhan University Journal of Natural Sciences, V13, P14, DOI 10.1007/s11859-008-0104-6
NR 31
TC 16
Z9 16
U1 2
U2 13
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2015
VL 22
IS 1
SI SI
BP 111
EP 141
DI 10.1007/s10515-014-0161-3
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE0EH
UT WOS:000351476800005
DA 2024-07-18
ER

PT J
AU Letier, E
   Kramer, J
   Magee, J
   Uchitel, S
AF Letier, Emmanuel
   Kramer, Jeff
   Magee, Jeff
   Uchitel, Sebastian
TI Deriving event-based transition systems from goal-oriented requirements
   models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE goal-oriented requirements engineering; labelled transition systems;
   method integration; requirements animation; requirements analysis
ID SPECIFICATIONS; TROPOS
AB Goal-oriented methods are increasingly popular for elaborating software requirements. They offer systematic support for incrementally building intentional, structural, and operational models of the software and its environment. Event-based transition systems on the other hand are convenient formalisms for reasoning about software behaviour at the architectural level.
   The paper relates these two worlds by presenting a technique for translating formal specification of software operations built according to the KAOS goal-oriented method into event-based transition systems analysable by the LTSA toolset. The translation involves moving from a declarative, state-based, timed, synchronous formalism typical of requirements modelling languages to an operational, event-based, untimed, asynchronous one typical of architecture description languages. The derived model can be used for the formal analysis and animation of KAOS operation models in LTSA.
   The paper also provides insights into the two complementary formalisms, and shows that the use of synchronous temporal logic for requirements specification hinders a smooth transition from requirements to software architecture models.
C1 [Letier, Emmanuel] UCL, Dept Comp Sci, London WC1E 6BT, England.
   [Letier, Emmanuel] London Software Syst, London WC1E 6BT, England.
   [Kramer, Jeff; Magee, Jeff; Uchitel, Sebastian] Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2BZ, England.
   [Kramer, Jeff; Magee, Jeff; Uchitel, Sebastian] London Software Syst, Dept Comp, London SW7 2BZ, England.
   [Uchitel, Sebastian] Univ Buenos Aires, FCEN, Dept Comp, Buenos Aires, DF, Argentina.
C3 University of London; University College London; Imperial College
   London; University of Buenos Aires
RP Letier, E (corresponding author), UCL, Dept Comp Sci, Gower St, London WC1E 6BT, England.
EM e.letier@cs.ucl.ac.uk; jk@doc.ic.ac.uk; jnm@doc.ic.ac.uk;
   suchitel@dc.uba.ar
OI Uchitel, Sebastian/0000-0001-9352-1478
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   ALRAJEH D, 2008, P FUND APPR SOFTW EN
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 1999, Concurrency-state models and Java programs
   BERNARDO M, 2001, UBLCS22017
   BERRY DM, 2003, 2 INT SOFTW REQ ARCH
   BORGIDA A, 1995, IEEE T SOFTW ENG OCT
   BRANDOZZI M, 2001, STRAW 2001 SOFTWARE, P54
   Bresciani P, 2004, AUTON AGENT MULTI-AG, V8, P203, DOI 10.1023/B:AGNT.0000018806.20944.ef
   Castro J, 2002, INFORM SYST, V27, P365, DOI 10.1016/S0306-4379(02)00012-1
   CASTRO J, 1 INT WORKSH SOFTW R
   Cheung SC, 1999, ACM T SOFTW ENG METH, V8, P49, DOI 10.1145/295558.295570
   Chung L., 2000, Non-functional Requirements in Software Engineering
   Cimatti A., 2002, LECT NOTES COMPUTER, V2404
   COURTOIS PJ, 1993, P ICSE 93 15 INT C S
   DAMAS C, 2006, SIGSOFT FSE, P197
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   DARIMONT R, 1996, P FSE 4 4 ACM S FDN
   De Landtsheer R, 2004, REQUIR ENG, V9, P104, DOI 10.1007/s00766-004-0189-1
   Fuxman A, 2004, REQUIR ENG, V9, P132, DOI 10.1007/s00766-004-0191-7
   Giannakopoulou D., 2005, Automated Software Engineering, V12, P297, DOI 10.1007/s10515-005-2641-y
   Giannakopoulou D, 2004, PROC INT CONF SOFTW, P211, DOI 10.1109/ICSE.2004.1317443
   Giannakopoulou D, 1999, LECT NOTES COMPUT SC, V1687, P511, DOI 10.1145/318774.319268
   Giannakopoulou D., 1999, Automated Software Engineering, V6, P7, DOI 10.1023/A:1008645800955
   Giannakopoulou D., 2003, P ESEC FSE 2003 HELS
   Gross D., 2001, Requirements Engineering, V6, P18, DOI 10.1007/s007660170013
   Heitmeyer C, 1998, LECT NOTES COMPUT SC, V1427, P526, DOI 10.1007/BFb0028775
   Heitmeyer C. L., 1996, ACM Transactions on Software Engineering and Methodology, V5, P231, DOI 10.1145/234426.234431
   Henzinger TA, 1998, LECT NOTES COMPUT SC, V1466, P439, DOI 10.1007/BFb0055640
   Jackson D., 2000, ACM SIGSOFT P C FDN
   JACKSON M, 1995, PROC INT CONF SOFTW, P283, DOI 10.1145/225014.225041
   Jani D, 2005, LECT NOTES COMPUT SC, V3527, P185
   KELLER RM, 1976, COMMUN ACM, V19, P371, DOI 10.1145/360248.360251
   Knight JC, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P547, DOI 10.1109/ICSE.2002.1007998
   KRAMER J, 1983, IEE PROC-E, V130, P1, DOI 10.1049/ip-e.1983.0001
   LETIER E, 2001, THESIS U CATHOLIQUE
   LETIER E, 2002, P ICSE 02 24 INT C S
   LETIER E, 2002, FSE 10 10 ACM S FDN
   Letier E, 2004, P 12 ACM SIGSOFT INT, P53
   LETIER E, 2005, P ESEC FSE 2005 LISB
   Leveson N.G., 1995, Safeware: System Safety and Computers
   LIU L, 2001, 1 INT WORKSH SOFTW R
   MAGEE J, 1995, 5 EUR SOFTW ENG C ES, P137
   MAGEE J, 2000, P 22 INT C SOFTW ENG
   MYLOPOULOS J, 2006, P RE 06 14 IEEE JOIN, P4
   NG K, 1996, AUTOMAT SOFTW ENG, V3, P261
   Nuseibeh B, 2001, COMPUTER, V34, P115, DOI 10.1109/2.910904
   PONSARD C, 2004, P FMICS 04 9 INT WOR
   Roscoe AW, 1998, PRENTICE HALL SERIES
   van Lamsweerde A, 2003, LECT NOTES COMPUT SC, V2804, P25
   van Lamsweerde A, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P249
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P1089, DOI 10.1109/32.738341
   van Lamsweerde A., 1998, IEEE T SOFTWARE ENG
   VANLAMSWEERDE A, 2000, IEEE T SOFTW ENG OCT
   VANLAMSWEERDE A, 2000, 22 INT C SOFTW ENG A, P22
   VANLAMSWEERDE A, 2002, LECT NOTES COMPUTER, V2941, P325
   VANLAMSWEERDE A, 2004, P RE 04 12 IEEE JOIN
   VANTRAN H, 2004, P 12 IEEE JOINT INT
   WOODCOCK J, 1999, PRENTICE HALL INT SE
   [No title captured]
NR 61
TC 38
Z9 41
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2008
VL 15
IS 2
BP 175
EP 206
DI 10.1007/s10515-008-0027-7
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308YL
UT WOS:000256426700003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Alturayeif, N
   Aljamaan, H
   Hassine, J
AF Alturayeif, Nouf
   Aljamaan, Hamoud
   Hassine, Jameleddine
TI An automated approach to aspect-based sentiment analysis of apps reviews
   using machine and deep learning
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Aspect-based sentiment analysis (ABSA); Apps reviews; Users feedback;
   Machine learning; Deep learning
ID USERS EMOTIONS
AB Apps reviews hold a huge amount of informative user feedback that may be used to assist software practitioners in better understanding users' needs, identify issues related to quality, such as privacy concerns and low efficiency, and evaluate the perceived users' satisfaction with the app features. One way to efficiently extract this information is by using Aspect-Based Sentiment Analysis (ABSA). The role of ABSA of apps reviews is to identify all app's aspects being reviewed and assign a sentiment polarity towards each aspect. This paper aims to build ABSA models using supervised Machine Learning (ML) and Deep Learning (DL) approaches. Our automated technique is intended to (1) identify the most useful and effective text-representation and task-specific features in both Aspect Category Detection (ACD) and Aspect Category Polarity, (2) empirically investigate the performance of conventional ML models when utilized for ABSA task of apps reviews, and (3) empirically compare the performance of ML models and DL models in the context of ABSA task. We built the models using different algorithms/architectures and performed hyper-parameters tuning. In addition, we extracted a set of relevant features for the ML models and performed an ablation study to analyze their contribution to the performance. Our empirical study showed that the ML model trained using Logistic Regression algorithm and BERT embeddings outperformed the other models. Although ML outperformed DL, DL models do not require hand-crafted features and they allow for a better learning of features when trained with more data.
C1 [Alturayeif, Nouf; Aljamaan, Hamoud; Hassine, Jameleddine] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran, Saudi Arabia.
   [Alturayeif, Nouf] Imam Abdulrahman Bin Faisal Univ, Comp Dept, Dammam, Saudi Arabia.
   [Hassine, Jameleddine] King Fahd Univ Petr & Minerals, Interdisciplinary Res Ctr Intelligent Secure Syst, Dhahran, Saudi Arabia.
   [Aljamaan, Hamoud] King Fahd Univ Petr & Minerals, Interdisciplinary Res Ctr Finance & Digital Econ, Dhahran, Saudi Arabia.
C3 King Fahd University of Petroleum & Minerals; Imam Abdulrahman Bin
   Faisal University; King Fahd University of Petroleum & Minerals; King
   Fahd University of Petroleum & Minerals
RP Alturayeif, N (corresponding author), King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran, Saudi Arabia.; Alturayeif, N (corresponding author), Imam Abdulrahman Bin Faisal Univ, Comp Dept, Dammam, Saudi Arabia.
EM g201901790@kfupm.edu.sa; hjamaan@kfupm.edu.sa; jhassine@kfupm.edu.sa
RI Alturayeif, Nora S/E-7679-2017; Aljamaan, Hamoud/N-9756-2019; Hassine,
   Jameleddine/E-5940-2015
OI Aljamaan, Hamoud/0000-0002-2146-9348; Alturayeif,
   Nouf/0000-0002-2761-8420
FU The authors would like to acknowledge the support of King Fahd
   University of Petroleum and Minerals (KFUPM) in the development of this
   work.; King Fahd University of Petroleum and Minerals (KFUPM)
FX The authors would like to acknowledge the support of King Fahd
   University of Petroleum and Minerals (KFUPM) in the development of this
   work.
CR Aljamaan H, 2020, PROCEEDINGS OF THE 16TH ACM INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING, PROMISE 2020, P1, DOI 10.1145/3416508.3417114
   Alturaief N, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOPS (ASEW 2021), P211, DOI 10.1109/ASEW52652.2021.00049
   [Anonymous], 2010, About WordNet
   Bird S., 2009, NATURAL LANGUAGE PRO
   Brownlee J., 2016, MASTER MACHINE LEARN, V1, P11
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chen X., 2019, IEEE Transactions on Software Engineering
   CHURCH KW, 1990, 27TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P76
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   Dong L, 2014, PROCEEDINGS OF THE 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 2, P49
   Geron A., 2017, Hands-On Machine Learning With Scikit-Learn and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems
   Groen EC, 2017, IEEE SOFTWARE, V34, P44, DOI 10.1109/MS.2017.33
   Gu XD, 2015, IEEE INT CONF AUTOM, P760, DOI 10.1109/ASE.2015.57
   Guzman E, 2017, INT REQUIR ENG CONF, P11, DOI 10.1109/RE.2017.88
   Guzman E, 2015, IEEE INT CONF AUTOM, P771, DOI 10.1109/ASE.2015.88
   Guzman E, 2014, INT REQUIR ENG CONF, P153, DOI 10.1109/RE.2014.6912257
   Han J, 2012, MOR KAUF D, P1
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Kirange D., 2014, Asian J. Comput. Sci. Inf. Technol. (AJCSIT), V4, DOI 10.15520/ajcsit.v4i8.9
   Kiritchenko S., 2014, P 8 INT WORKSH SEM E, P437, DOI DOI 10.3115/V1/S14-2076
   Kujala S, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P75, DOI 10.1109/RE.2005.72
   Kumar A., 2016, P 10 INT WORKSH SEM, P1129
   LeCun Y., 1995, The handbook of brain theory and neural networks, V3361, DOI [10.5555/303568.303704, DOI 10.5555/303568.303704]
   Liu YD, 2016, 2016 12TH INTERNATIONAL CONFERENCE ON SIGNAL-IMAGE TECHNOLOGY & INTERNET-BASED SYSTEMS (SITIS), P581, DOI 10.1109/SITIS.2016.97
   Luiz W, 2018, WEB CONFERENCE 2018: PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE (WWW2018), P1909, DOI 10.1145/3178876.3186168
   Maalej W., 2011, Proceedings of the 2011 IEEE 9th International Conference on Dependable, Autonomic and Secure Computing (DASC 2011), P864, DOI 10.1109/DASC.2011.146
   Malik H, 2020, FUTURE GENER COMP SY, V107, P659, DOI 10.1016/j.future.2018.02.008
   Martens D, 2019, IEEE SOFTWARE, V36, P32, DOI 10.1109/MS.2019.2923603
   Mohammad S., 2010, P NAACL HLT 2010 WOR, DOI DOI 10.5555/1860631.1860635
   Mohammad SM, 2013, COMPUT INTELL-US, V29, P436, DOI 10.1111/j.1467-8640.2012.00460.x
   Novak PK, 2015, PLOS ONE, V10, DOI 10.1371/journal.pone.0144296
   Pagano D, 2013, S VIS LANG HUM CEN C, P125, DOI 10.1109/RE.2013.6636712
   Panichella S, 2015, PROC IEEE INT CONF S, P281, DOI 10.1109/ICSM.2015.7332474
   Pontiki M., 2014, P 8 INT WORKSH SEM E, P27, DOI 10.3115/v1/S14-2004
   Pontiki M., 2016, P 10 INT WORKSH SEM, P19, DOI 10.18653/v1/S16-1002
   Qian ZZ, 2016, P INT COMP SOFTW APP, P93, DOI 10.1109/COMPSAC.2016.183
   Ramos Juan., 2003, USING TF IDF DETERMI, V242, P29
   Rehurek R., 2010, P LREC 2010 WORKSH N, P45, DOI DOI 10.13140/2.1.2393.1847
   Rocha L, 2015, J WEB SEMANT, V34, P27, DOI 10.1016/j.websem.2015.05.006
   Seyff Norbert, 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P37, DOI 10.1109/RE.2010.15
   Shah F.A., 2016, P INT WORKSH APP MAR, P15
   Socher R., 2013, P 2013 C EMP METH NA, V2013, P1631, DOI DOI 10.1371/JOURNAL.PONE.0073791
   Stade M, 2019, INT REQUIR ENG CONF, P375, DOI 10.1109/RE.2019.00048
   Stanik C, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P220, DOI 10.1109/REW.2019.00046
   Su YQ, 2019, 2019 15TH INTERNATIONAL CONFERENCE ON MOBILE AD-HOC AND SENSOR NETWORKS (MSN 2019), P338, DOI 10.1109/MSN48538.2019.00070
   TAIT P, 1988, MIS QUART, V12, P91, DOI 10.2307/248809
   Tang DY, 2016, Arxiv, DOI arXiv:1605.08900
   Tang DY, 2016, Arxiv, DOI [arXiv:1512.01100, DOI 10.48550/ARXIV.1512.01100]
   Thelwall M, 2010, J AM SOC INF SCI TEC, V61, P2544, DOI 10.1002/asi.21416
   Thüring M, 2007, INT J PSYCHOL, V42, P253, DOI 10.1080/00207590701396674
   Tsai YL, 2016, CONF TECHNOL APPL, P162, DOI 10.1109/TAAI.2016.7880153
   Turney PD, 2003, ACM T INFORM SYST, V21, P315, DOI 10.1145/944012.944013
   Van Solingen Rini, 1999, The Goal/ Question/ Metric Method: a practical guide for quality improvement of software development
   Villarroel L, 2016, PROC INT CONF SOFTW, P14, DOI 10.1145/2884781.2884818
   Wang Y., 2016, P 2016 C EMPIRICAL M, P606, DOI 10.18653/v1/D16-1058
   Williams G, 2017, INT REQUIR ENG CONF, P1, DOI 10.1109/RE.2017.14
   Wright H.K., 2010, P FSE SDP WORKSH FUT, P411
   Yuanchun Li, 2017, Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies, V1, DOI 10.1145/3130935
   Zhao LL, 2019, FUTURE INTERNET, V11, DOI 10.3390/fi11020052
   Zheng SL, 2018, Arxiv, DOI arXiv:1802.00892
   Zowghi D, 2005, ENGINEERING AND MANAGING SOFTWARE REQUIREMENTS, P19, DOI 10.1007/3-540-28244-0_2
NR 61
TC 1
Z9 1
U1 2
U2 12
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 30
DI 10.1007/s10515-023-00397-7
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA R0TH2
UT WOS:001061548100001
DA 2024-07-18
ER

PT J
AU Tinnes, C
   Kehrer, T
   Joblin, M
   Hohenstein, U
   Biesdorf, A
   Apel, S
AF Tinnes, Christof
   Kehrer, Timo
   Joblin, Mitchell
   Hohenstein, Uwe
   Biesdorf, Andreas
   Apel, Sven
TI Mining domain-specific edit operations from model repositories with
   applications to semantic lifting of model differences and change
   profiling
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Edit operations; Model-driven engineering; Software product line
   engineering; Model versioning
ID TRANSFORMATION; GRAPH; EMF; TOOLS
AB Model transformations are central to model-driven software development. Applications of model transformations include creating models, handling model co-evolution, model merging, and understanding model evolution. In the past, various (semi-)automatic approaches to derive model transformations from meta-models or from examples have been proposed. These approaches require time-consuming handcrafting or the recording of concrete examples, or they are unable to derive complex transformations. We propose a novel unsupervised approach, called Ockham, which is able to learn edit operations from model histories in model repositories. Ockham is based on the idea that meaningful domain-specific edit operations are the ones that compress the model differences. It employs frequent subgraph mining to discover frequent structures in model difference graphs. We evaluate our approach in two controlled experiments and one real-world case study of a large-scale industrial model-driven architecture project in the railway domain. We found that our approach is able to discover frequent edit operations that have actually been applied before. Furthermore, Ockham is able to extract edit operations that are meaningful-in the sense of explaining model differences through the edit operations they comprise-to practitioners in an industrial setting. We also discuss use cases (i.e., semantic lifting of model differences and change profiles) for the discovered edit operations in this industrial setting. We find that the edit operations discovered by Ockham can be used to better understand and simulate the evolution of models.
C1 [Tinnes, Christof; Joblin, Mitchell; Hohenstein, Uwe; Biesdorf, Andreas; Apel, Sven] Siemens AG, Munich, Germany.
   [Kehrer, Timo] Humboldt Univ, Berlin, Germany.
   [Tinnes, Christof; Joblin, Mitchell] Saarland Univ, Saarbrucken, Germany.
   [Kehrer, Timo] Univ Bern, Bern, Switzerland.
   [Biesdorf, Andreas] Trier Univ Appl Sci, Trier, Germany.
   [Apel, Sven] Saarland Informat Campus, Saarbrucken, Germany.
C3 Siemens AG; Siemens Germany; Humboldt University of Berlin; Saarland
   University; University of Bern
RP Tinnes, C (corresponding author), Siemens AG, Munich, Germany.; Tinnes, C (corresponding author), Saarland Univ, Saarbrucken, Germany.
EM christof.tinnes@siemens.com; timo.kehrer@inf.unibe.ch;
   mitchell.joblin@siemens.com; uwe.hohenstein@siemens.com;
   andreas.biesdorf@siemens.com; apel@cs.uni-saarland.de
RI Kehrer, Timo/AAI-6563-2020; Tinnes, Christof/HSH-4382-2023
OI Kehrer, Timo/0000-0002-2582-5557; Tinnes, Christof/0000-0002-1320-1480;
   Apel, Sven/0000-0003-3687-2233
FU German Research Foundation [KE 2267/1-1]
FX AcknowledgementsThe work of the second author has been partially
   supported by the German Research Foundation within the project
   VariantSync (KE 2267/1-1).
CR Acretoaie V, 2018, SOFTW SYST MODEL, V17, P1139, DOI 10.1007/s10270-016-0546-9
   Alshanqiti AM., 2012, ELECT COMMUN EUR ASS, V47, P58, DOI [10.14279/tuj.eceasst.58.848, DOI 10.14279/TUJ.ECEASST.58.848]
   Arendt T, 2013, AUTOMAT SOFTW ENG, V20, P141, DOI 10.1007/s10515-012-0114-7
   Arendt T, 2010, LECT NOTES COMPUT SC, V6394, P121
   Avazpour I, 2015, J VISUAL LANG COMPUT, V28, P195, DOI 10.1016/j.jvlc.2015.02.005
   Baki I, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2904904
   Balanyi Z, 2003, PROC IEEE INT CONF S, P305, DOI 10.1109/ICSM.2003.1235436
   Bariatti F, 2020, LECT NOTES COMPUT SC, V12080, P54, DOI 10.1007/978-3-030-44584-3_5
   ben Fadhel A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P212, DOI 10.1109/ICSM.2012.6405274
   Berramla K, 2020, PROCEEDINGS OF THE 8TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD), P76, DOI 10.5220/0009168200760083
   Biermann E, 2012, SOFTW SYST MODEL, V11, P227, DOI 10.1007/s10270-011-0199-7
   Brosch P, 2009, LECT NOTES COMPUT SC, V5795, P271, DOI 10.1007/978-3-642-04425-0_20
   Burdusel A, 2018, 21ST ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS: COMPANION PROCEEDINGS (MODELS-COMPANION '18), P12, DOI 10.1145/3270112.3270130
   Cook D.J., 2006, Mining graph data
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   Dagit J., 2013, P INT WORKSHOP DOCUM
   DJOKO S, 1994, PROCEEDINGS OF THE TWELFTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P1442
   Dong J, 2009, INT J SOFTW ENG KNOW, V19, P823, DOI 10.1142/S021819400900443X
   Ehrig H, 2004, LECT NOTES COMPUT SC, V3256, P161
   Ehrig K., 2005, INT C AUTOMATED SOFT, P134, DOI DOI 10.1145/1101908.1101930
   Ferenc R, 2005, PROC IEEE INT CONF S, P295
   Getir S, 2018, J SYST SOFTWARE, V142, P115, DOI 10.1016/j.jss.2018.04.001
   Ghannem A., 2018, J SOFTWARE EVOLUTION, V30, P1
   Grunwald P. D, 2007, MINIMUM DESCRIPTION, DOI DOI 10.7551/MITPRESS/4643.001.0001
   Hegedüs A, 2011, S VIS LANG HUM CEN C, P17, DOI 10.1109/VLHCC.2011.6070373
   Heider W, 2010, INFORM SOFTWARE TECH, V52, P758, DOI 10.1016/j.infsof.2010.03.007
   Herrmannsdoerfer M., 2010, SOFTWARE LANGUAGE EN, P163, DOI [10.5555/1964571.1964585, DOI 10.5555/1964571.1964585]
   Hoan Anh Nguyen, 2019, 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE). Proceedings, P819, DOI 10.1109/ICSE.2019.00089
   Hölldobler K, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P136, DOI 10.1109/MODELS.2015.7338244
   Janke M, 2022, IEEE T SOFTWARE ENG, V48, P848, DOI 10.1109/TSE.2020.3004892
   Jiang CT, 2013, KNOWL ENG REV, V28, P75, DOI 10.1017/S0269888912000331
   Kahani N, 2019, SOFTW SYST MODEL, V18, P2361, DOI 10.1007/s10270-018-0665-6
   Kappel Gerti, 2012, Conceptual Modelling and Its Theoretical Foundations. Essays Dedicated to Bernhard Thalheim on the Occasion of his 60th Birthday, P197, DOI 10.1007/978-3-642-28279-9_15
   Kehrer T., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P163, DOI 10.1109/ASE.2011.6100050
   Kehrer T., 2013, MODELS WORKSHOP MODE, P30
   Kehrer T, 2017, LECT NOTES COMPUT SC, V10374, P92, DOI 10.1007/978-3-319-61473-1_7
   Kehrer T, 2016, LECT NOTES COMPUT SC, V9765, P173, DOI 10.1007/978-3-319-42064-6_12
   Kehrer T, 2012, IEEE INT CONF AUTOM, P306, DOI 10.1145/2351676.2351731
   Kehrer T, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P638, DOI 10.1109/ICSM.2012.6405342
   Kehrer Timo, 2015, Ph. D. Dissertation
   Ketkar N. S., 2005, P 1 INT WORKSH OP SO, P71, DOI DOI 10.1145/1133905.1133915
   Khelladi DE, 2016, INFORM SYST, V62, P220, DOI 10.1016/j.is.2016.05.002
   Koegel M, 2009, 2009 ICSE WORKSHOP ON COMPARISON AND VERSIONING OF SOFTWARE MODELS, P43, DOI 10.1109/CVSM.2009.5071721
   Kogel S., 2016, CEUR WORKSHOP PROC, V1706, P14
   Kolovos DS, 2010, LECT NOTES COMPUT SC, V6394, P211
   Kolovos DS, 2009, 2009 ICSE WORKSHOP ON COMPARISON AND VERSIONING OF SOFTWARE MODELS, P1, DOI 10.1109/CVSM.2009.5071714
   Langer P, 2013, J SYST SOFTWARE, V86, P551, DOI 10.1016/j.jss.2012.09.037
   Martinez M, 2013, PROC IEEE INT CONF S, P388, DOI 10.1109/ICSM.2013.54
   Mazanek S., 2009, ELECT COMMUN EUR ASS, V18, P58, DOI [10.14279/tuj.eceasst.18.262, DOI 10.14279/TUJ.ECEASST.18.262]
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Mokaddem CE, 2018, 21ST ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2018), P257, DOI 10.1145/3239372.3239406
   Nijssen S, 2005, ELECTRON NOTES THEOR, V127, P77, DOI 10.1016/j.entcs.2004.12.039
   Ohrndorf M, 2018, PROC IEEE ACM INT C, P105, DOI 10.1145/3183440.3183498
   Oruc M, 2016, 2016 FOURTH INTERNATIONAL CONFERENCE IN SOFTWARE ENGINEERING RESEARCH AND INNOVATION - CONISOFT 2016, P115, DOI 10.1109/CONISOFT.2016.26
   Pietsch P., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P620, DOI 10.1109/ASE.2011.6100140
   Polanyi M., 1958, Personal Knowledge
   Rose LM, 2014, SOFTW SYST MODEL, V13, P323, DOI 10.1007/s10270-012-0245-0
   Saada H., 2014, P INT C CONCEPT LATT, P11
   Schmidt M, 2009, 2009 ICSE WORKSHOP ON COMPARISON AND VERSIONING OF SOFTWARE MODELS, P13, DOI 10.1109/CVSM.2009.5071716
   Schmidt M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P947
   Schroeder G, 2011, UCERSTI2 WORKSH 5 AC
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Shermer M, 2008, SCI AM, V299, P48, DOI 10.1038/scientificamerican1208-48
   Siegmund J, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P9, DOI 10.1109/ICSE.2015.24
   Stephan Matthew, 2013, MODELSWARD 2013. 1st International Conference on Model-Driven Engineering and Software Development. Proceedings, P265
   Sun Y, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P980, DOI 10.1145/1985793.1985966
   Taentzer G., 2007, APPL GRAPH TRANSFORM, P98
   Tinnes C, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P930, DOI 10.1109/ASE51524.2021.9678698
   VanDeursen A., 2007, TECHNICAL REPORT SER, DOI [10.1109/MSR.2013.6624031, DOI 10.1109/MSR.2013.6624031]
   Varró D, 2006, LECT NOTES COMPUT SC, V4199, P410
   Welke P, 2020, KDD '20: PROCEEDINGS OF THE 26TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P1275, DOI 10.1145/3394486.3403180
   Yan X., 2003, Proceedings of the ninth ACM SIGKDD international conference on Knowledge discovery and data mining, KDD '03, P286
   Yazdi HS, 2016, J SYST SOFTWARE, V118, P176, DOI 10.1016/j.jss.2016.05.010
   Yijun Yu, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P273, DOI 10.1109/ASE.2011.6100063
NR 74
TC 1
Z9 1
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 17
DI 10.1007/s10515-023-00381-1
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA E5BT7
UT WOS:000975698900001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Cui, YN
   Sun, Y
   Lin, ZW
AF Cui, Yuning
   Sun, Yi
   Lin, Zhaowen
TI DroidHook: a novel API-hook based Android malware dynamic analysis
   sandbox
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Android; Mobile malware; Dynamic analysis; Sandbox
ID FEATURES; SYSTEM; MODEL
AB With the popularity of Android devices, mobile apps are prevalent in our daily life, making them a target for attackers to steal private data and push advertisements. Dynamic analysis is an effective approach to detect runtime behavior of Android malware and can reduce the impact of code obfuscation. However, some dynamic sandboxes commonly used by researchers are usually based on emulators with older versions of Android, for example, the state-of-the-art sandbox, DroidBox. These sandboxes are vulnerable to evasion attacks and may not work with the latest apps. In this paper, we propose a prototype framework, DroidHook, as a novel automated sandbox for Android malware dynamic analysis. Unlike most existing tools, DroidHook has two obvious advantages. Firstly, the set of APIs to be monitored by DroidHook can be easily modified, so that DroidHook is ideally suitable for diverse situations, including the detection of a specific family of malware and unknown malware. Secondly, DroidHook does not depend on a specific Android OS but only on Xposed, so it can work with multiple Android versions and can perform normally on both emulators and real devices. Experiments show that DroidHook can provide more fine-grained and precise results than DroidBox. Moreover, with the support for real devices and new versions of Android, DroidHook can run most samples properly and acquire stronger detection results, compared to emulator-based tools.
C1 [Cui, Yuning; Sun, Yi; Lin, Zhaowen] Beijing Univ Posts & Telecommun, Natl Pilot Software Engn Sch, Sch Comp Sci, Beijing, Peoples R China.
   [Cui, Yuning; Sun, Yi; Lin, Zhaowen] Natl Engn Lab Mobile Network Secur No 2013 2685, Beijing, Peoples R China.
C3 Beijing University of Posts & Telecommunications
RP Sun, Y (corresponding author), Beijing Univ Posts & Telecommun, Natl Pilot Software Engn Sch, Sch Comp Sci, Beijing, Peoples R China.; Sun, Y (corresponding author), Natl Engn Lab Mobile Network Secur No 2013 2685, Beijing, Peoples R China.
EM cuiyn@bupt.edu.cn; sybupt@bupt.edu.cn; linzw@bupt.edu.cn
OI Cui, Yuning/0000-0003-4234-6221
CR Aafer Y, 2013, L N INST COMP SCI SO, V127, P86
   Alzaylaee M.K., 2017, Proceedings of the 3rd ACM on International Workshop on Security And Privacy Analytics, P65, DOI DOI 10.1145/3041008.3041010
   Alzaylaee MK, 2016, 2016 INTERNATIONAL CONFERENCE ON CYBER SECURITY AND PROTECTION OF DIGITAL SERVICES (CYBER SECURITY)
   Arp D, 2014, 21ST ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2014), DOI 10.14722/ndss.2014.23247
   Arshad S, 2018, IEEE ACCESS, V6, P4321, DOI 10.1109/ACCESS.2018.2792941
   AV-TEST, 2020, MALW STAT TRENDS REP
   Cai HP, 2019, IEEE T INF FOREN SEC, V14, P1455, DOI 10.1109/TIFS.2018.2879302
   Chang WL, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SIGNAL PROCESSING, COMMUNICATIONS AND COMPUTING (ICSPCC)
   Chen X, 2020, IEEE T INF FOREN SEC, V15, P987, DOI 10.1109/TIFS.2019.2932228
   Cho H, 2018, IEEE ACCESS, V6, P71229, DOI 10.1109/ACCESS.2018.2881699
   DroidBox, 2020, DROIDB DYN AN ANDR A
   Enck W, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2619091
   Fan M, 2018, IEEE T INF FOREN SEC, V13, P1890, DOI 10.1109/TIFS.2018.2806891
   Fan M, 2017, IEEE T INF FOREN SEC, V12, P1772, DOI 10.1109/TIFS.2017.2687880
   Feng PB, 2018, IEEE ACCESS, V6, P30996, DOI 10.1109/ACCESS.2018.2844349
   Gajrani J, 2020, COMPUT SECUR, V90, DOI 10.1016/j.cose.2019.101688
   Gao H, 2021, COMPUT SECUR, V106, DOI 10.1016/j.cose.2021.102264
   Kelly G., 2014, REPORT 97 MOBILE MAL
   Lindorfer Martina, 2014, 2014 Third International Workshop on Building Analysis Datasets and Gathering Experience Returns for Security (BADGERS). Proceedings, P3, DOI 10.1109/BADGERS.2014.7
   Martín A, 2019, INFORM FUSION, V52, P128, DOI 10.1016/j.inffus.2018.12.006
   Nicheporuk A., 2020, PROC ICTERI WORKSHOP, P198
   Onwuzurike L, 2019, ACM T PRIV SECUR, V22, DOI 10.1145/3313391
   Peiravian N, 2013, PROC INT C TOOLS ART, P300, DOI 10.1109/ICTAI.2013.53
   Samhi J, 2022, PROC INT CONF SOFTW, P1232, DOI 10.1145/3510003.3512766
   Sihag V., 2021, J INTERNET SERVICES, V11, P34
   Statista, 2022, GLOB MOB OS MARK SHA
   Sugunan K., 2018, in Big Data andCloud Computing(Advances in Intelligent Systems and Computing), P147, DOI DOI 10.1007/978-981-10-7200-0_13
   Sun M., 2016, P 2016 ACM C COMP CO, P331, DOI 10.1145/2976749.2978343
   Sun XY, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3440033
   Tam K, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23145
   Tian K, 2020, IEEE T DEPEND SECURE, V17, P64, DOI 10.1109/TDSC.2017.2745575
   Wang W, 2019, J AMB INTEL HUM COMP, V10, P3035, DOI 10.1007/s12652-018-0803-6
   Xiao X, 2019, MULTIMED TOOLS APPL, V78, P3979, DOI 10.1007/s11042-017-5104-0
   Xu LF, 2016, 2016 IEEE 3RD INTERNATIONAL CONFERENCE ON CYBER SECURITY AND CLOUD COMPUTING (CSCLOUD), P220, DOI 10.1109/CSCloud.2016.27
   Xue L, 2019, IEEE T INF FOREN SEC, V14, P814, DOI 10.1109/TIFS.2018.2866347
   Zheng M, 2014, INT WIREL COMMUN, P128, DOI 10.1109/IWCMC.2014.6906344
   Zungur O, 2020, I C DEPEND SYS NETWO, P318, DOI 10.1109/DSN48063.2020.00048
NR 37
TC 0
Z9 0
U1 2
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
AR 10
DI 10.1007/s10515-023-00378-w
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9H5CC
UT WOS:000938849400001
DA 2024-07-18
ER

PT J
AU Sattler, F
   von Rhein, A
   Berger, T
   Johansson, NS
   Hardo, MM
   Apel, S
AF Sattler, Florian
   von Rhein, Alexander
   Berger, Thorsten
   Johansson, Niklas Schalck
   Hardo, Mikael Mark
   Apel, Sven
TI Lifting inter-app data-flow analysis to large app sets
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Android; Data-flow analysis; Inter-app communication; Variability-aware
   analysis; Variational data structures
AB Mobile apps process increasing amounts of private data, giving rise to privacy concerns. Such concerns do not arise only from single apps, which might-accidentally or intentionally-leak private information to untrusted parties, but also from multiple apps communicating with each other. Certain combinations of apps can create critical data flows not detectable by analyzing single apps individually. While sophisticated tools exist to analyze data flows inside and across apps, none of these scale to large numbers of apps, given the combinatorial explosion of possible (inter-app) data flows. We present a scalable approach to analyze data flows across Android apps. At the heart of our approach is a graph-based data structure that represents inter-app flows efficiently. Following ideas from product-line analysis, the data structure exploits redundancies among flows and thereby tames the combinatorial explosion. Instead of focusing on specific installations of app sets on mobile devices, we lift traditional data-flow analysis approaches to analyze and represent data flows of all possible combinations of apps. We developed the tool Sifta and applied it to several existing app benchmarks and real-world app sets, demonstrating its scalability and accuracy.
C1 [Sattler, Florian; Apel, Sven] Univ Passau, Passau, Germany.
   [von Rhein, Alexander] CQSE GmbH, Munich, Germany.
   [Berger, Thorsten] Chalmers I Univ Gothenburg, Gothenburg, Sweden.
   [Johansson, Niklas Schalck; Hardo, Mikael Mark] IT Univ Copenhagen, Copenhagen, Denmark.
C3 University of Passau; IT University Copenhagen
RP Apel, S (corresponding author), Univ Passau, Passau, Germany.
EM apel@uni-passau.de
OI Apel, Sven/0000-0003-3687-2233
FU German Research Foundation [AP 206/4, AP 206/6]
FX We thank Eric Bodden, Steven Arzt, Li Li, Fengguo Wei, and Yajin Zhou
   for helpful discussions on our implementation, on their tools (ICCTA and
   AMANDROID), and for making their benchmark sets available. The work has
   been supported by the German Research Foundation (AP 206/4 and AP
   206/6).
CR Al Bidani N., 2014, THESIS
   [Anonymous], CMUSEI2015TR001
   [Anonymous], 2014, APP STOR SAL TOP 10
   [Anonymous], TECHNICAL REPORT
   Apel S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P482, DOI 10.1109/ICSE.2013.6606594
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Berger T, 2014, INFORM SOFTWARE TECH, V56, P1520, DOI 10.1016/j.infsof.2014.05.005
   Bodden E, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI 10.1145/2499370.2491976
   Chin E., 2011, P 9 INT C MOB SYST A, P239, DOI DOI 10.1145/1999995.2000018
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Czarnecki K., 2006, GPCE, P211
   Dienst S., 2012, STATIC ANAL APP DEPE
   Enck W, 2011, P 20 USENIX C SEC SE, P2
   Enck W, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2619091
   Felt AdriennePorter., 2011, USENIX SECURITY S, V30, P88
   Hardy N., 1988, Operating Systems Review, V22, P36, DOI 10.1145/54289.871709
   Kästner C, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P805
   KLIEBER W., 2014, Proceedings of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis, P1
   Li L, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P280, DOI 10.1109/ICSE.2015.48
   Liebig J., 2013, P 2013 9 JOINT M FDN, P81, DOI DOI 10.1145/2491411.2491437
   Lu Long, 2012, P 2012 ACM C COMP CO, P229, DOI DOI 10.1145/2382196.2382223
   Martin W, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P123, DOI 10.1109/MSR.2015.19
   Mojica I. J., 2015, IEEE SOFTW
   Mojica IJ, 2014, IEEE SOFTWARE, V31, P78, DOI 10.1109/MS.2013.142
   Nadi S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P140, DOI 10.1145/2568225.2568283
   Nauman M., 2010, P 5 ACM S INF COMP C, V10, P328, DOI [10.1145/1755688.1755732, DOI 10.1145/1755688.1755732]
   Octeau D, 2016, ACM SIGPLAN NOTICES, V51, P469, DOI 10.1145/2914770.2837661
   Octeau D, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P77, DOI 10.1109/ICSE.2015.30
   Octeau Damien, 2013, P 22 USENIX C SEC SE, P543
   Ongtang M, 2012, SECUR COMMUN NETW, V5, P658, DOI 10.1002/sec.360
   Sadeghi A, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P725, DOI 10.1109/ICSE.2015.233
   Sbirlea D., 2013, IBM J RES DEV, V57
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Viennot N., 2014, 2014 ACM INT C MEAS, P221, DOI DOI 10.1145/2637364.2592003
   Walkingshaw Eric, 2014, ACM SIGPLAN S NEW ID, P213
   Wei FG, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1329, DOI 10.1145/2660267.2660357
   Zhou YJ, 2012, P IEEE S SECUR PRIV, P95, DOI 10.1109/SP.2012.16
NR 38
TC 8
Z9 8
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2018
VL 25
IS 2
BP 315
EP 346
DI 10.1007/s10515-017-0228-z
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF3PN
UT WOS:000431868200005
DA 2024-07-18
ER

PT J
AU Duley, A
   Spandikow, C
   Kim, M
AF Duley, Adam
   Spandikow, Chris
   Kim, Miryung
TI Vdiff: a program differencing algorithm for Verilog hardware description
   language
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software evolution; Program differencing; Hardware description languages
AB During code review tasks, comparing two versions of a hardware design description using existing program differencing tools such as diff is inherently limited because these tools implicitly assume sequential execution semantics, while hardware description languages are designed to model concurrent computation. We designed a position-independent differencing algorithm to robustly handle language constructs whose relative orderings do not matter. This paper presents Vdiff, an instantiation of this position-independent differencing algorithm for Verilog HDL. To help programmers reason about the differences at a high-level, Vdiff outputs syntactic differences in terms of Verilog-specific change types. The quantitative evaluation of Vdiff on two open source hardware design projects shows that Vdiff is very accurate, with overall 96.8 % precision and 97.3 % recall when using manually classified differences as a basis of comparison. Vdiff is also fast and scalable-it processes the entire revision history of nine open projects all under 5.35 minutes. We conducted a user study with eight hardware design experts to understand how the program differences identified by the experts match Vdiff's output. The study results show that Vdiff's output is better aligned with the experts' classification of Verilog changes than an existing textual program differencing tool.
C1 [Kim, Miryung] Univ Texas Austin, Austin, TX 78712 USA.
   [Duley, Adam] ARM Inc, Austin, TX 78746 USA.
   [Spandikow, Chris] IBM Corp, Austin, TX 78758 USA.
C3 University of Texas System; University of Texas Austin; International
   Business Machines (IBM)
RP Kim, M (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM adam.duley@arm.com; spandiko@gmail.com; miryung@ece.utexas.edu
FU National Science Foundation [CCF-1043810, CCF-1117902, CCF-1149391];
   Microsoft SEIF Award; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [1043810, 1117902, 1533791]
   Funding Source: National Science Foundation
FX This research is in part supported by National Science Foundation grants
   under CCF-1043810, CCF-1117902, and CCF-1149391 and 2011 Microsoft SEIF
   Award. The research was in part conducted while the first two authors
   were graduate students at The University of Texas at Austin.
CR [Anonymous], 2010, Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research FOSER
   Apiwattanapong T, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P2, DOI 10.1109/ASE.2004.1342719
   Ashenden PJ, 2003, IEEE DES TEST COMPUT, V20, P112
   Canfora G, 2009, IEEE SOFTWARE, V26, P50, DOI 10.1109/MS.2009.26
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Cottrell Rylan., 2007, P JOINT M EUROPEAN S, P165
   Cottrell Rylan., 2008, P INT S FDN SOFTWARE, P214, DOI [DOI 10.1145/1453101.1453130, 10.1145/1453101.1453130]
   DICE LR, 1945, ECOLOGY, V26, P297, DOI 10.2307/1932409
   Duley A., VDIFF DOWNLOAD
   Fluri B, 2007, IEEE T SOFTWARE ENG, V33, P725, DOI 10.1109/TSE.2007.70731
   Gupta V., 1993, Proceedings. 34th Annual Symposium on Foundations of Computer Science (Cat. No.93CH3368-8), P62, DOI 10.1109/SFCS.1993.366881
   HUNT JW, 1977, COMMUN ACM, V20, P350, DOI 10.1145/359581.359603
   Malpohl Guido., 2000, AUTOMAT SOFTW ENG, V10, P183
   Myers EW, 1986, ALGORITHMICA, V1, P251, DOI 10.1007/BF01840446
   Neamtiu Iulian., 2005, Iulian Neamtiu and Including Bind. Understanding source code evolution using abstract syntax tree matching. In Proceedings of the International Workshop on Mining Software Repositories, pages 2-6, 2005., P2
   Ohst D, 2003, PROC IEEE INT CONF S, P13, DOI 10.1109/ICSM.2003.1235402
   Person Suzette, 2008, P 16 INT S FDN SOFTW, P226, DOI [DOI 10.1145/1453101.1453131, 10.1145/1453101.1453131]
   Raghavan S, 2004, PROC IEEE INT CONF S, P188, DOI 10.1109/ICSM.2004.1357803
   Reiss SP, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P11, DOI 10.1145/1368088.1368091
   Rich DL, 2003, IEEE DES TEST COMPUT, V20, P82, DOI 10.1109/MDT.2003.1214355
   Schmidt M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P947
   Soto M, 2006, LECT NOTES COMPUT SC, V4257, P123
   Sudakrishnan Sangeetha, 2008, P 2008 INT WORK C MI, P39, DOI [10.1145/1370750.1370761, DOI 10.1145/1370750.1370761]
   Thomas D., 2002, The Verilog Hardware Description Language, V5th, DOI 10.1007/978-0-387-85344-4
   TREUDE C, 2007, P 6 JOINT M EUR SOFT, P295, DOI DOI 10.1145/1287624.1287665
   Weissgerber P, 2006, IEEE INT CONF AUTOM, P231
   WUU Y, 1991, SOFTWARE PRACT EXPER, V21, P739, DOI 10.1002/spe.4380210706
   Xing Z., 2005, 20 IEEEACM INT C AUT, P54, DOI DOI 10.1145/1101908.1101919
   Yijun Yu, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P273, DOI 10.1109/ASE.2011.6100063
NR 29
TC 6
Z9 6
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2012
VL 19
IS 4
SI SI
BP 459
EP 490
DI 10.1007/s10515-012-0107-6
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 988QT
UT WOS:000307506300004
DA 2024-07-18
ER

PT J
AU Simons, AJH
AF Simons, Anthony J. H.
TI JWalk: a tool for lazy, systematic testing of java classes by design
   introspection and user interaction
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE agile methods; unit testing; state-based testing; algebraic testing;
   lazy specification; lazy systematic testing; operational abstraction;
   JWalk; JUnit
ID SPECIFICATIONS
AB Popular software testing tools, such as JUnit, allow frequent retesting of modified code; yet the manually created test scripts are often seriously incomplete. A unit-testing tool called JWalk has therefore been developed to address the need for systematic unit testing within the context of agile methods. The tool operates directly on the compiled code for Java classes and uses a new lazy method for inducing the changing design of a class on the fly. This is achieved partly through introspection, using Java's reflection capability, and partly through interaction with the user, constructing and saving test oracles on the fly. Predictive rules reduce the number of oracle values that must be confirmed by the tester. Without human intervention, JWalk performs bounded exhaustive exploration of the class's method protocols and may be directed to explore the space of algebraic constructions, or the intended design state-space of the tested class. With some human interaction, JWalk performs up to the equivalent of fully automated state-based testing, from a specification that was acquired incrementally.
C1 Univ Sheffield, Dept Comp Sci, Sheffield S10 2TN, S Yorkshire, England.
C3 University of Sheffield
RP Simons, AJH (corresponding author), Univ Sheffield, Dept Comp Sci, Sheffield S10 2TN, S Yorkshire, England.
EM a.simons@dcs.shef.ac.uk
OI Simons, Anthony/0000-0002-5925-7148
CR *AG SOFTW, 2007, AG
   [Anonymous], 2000, THESIS U WASHINGTON
   [Anonymous], P 28 INT C SOFTW ENG
   [Anonymous], P 12 ACM SIGSOFT
   [Anonymous], 2005, Extreme programming explained: Embrace change
   [Anonymous], JUNIT POCKET GUIDE
   Ball T, 2000, COMPUTER, V33, P57, DOI 10.1109/2.869371
   Beck K., 2000, EXTREME PROGRAMMING
   BERNOT G, 1991, SOFTWARE ENG J, V6, P387, DOI 10.1049/sej.1991.0040
   Bezier Boris., 1990, Software Testing Techniques, V2nd
   Binder R. V., 1996, Software Testing, Verification and Reliability, V6, P125, DOI 10.1002/(SICI)1099-1689(199609/12)6:3/4<125::AID-STVR121>3.0.CO;2-X
   BINDER RV, TOOTSIE HIGH END OO
   Boshernitsan M., 2006, ISSTA, P169
   Boyapati C., 2002, ISSTA 02, P123, DOI DOI 10.1145/566172.566191
   Chen HY, 2001, ACM T SOFTW ENG METH, V10, P56, DOI 10.1145/366378.366380
   Cheon Y, 2002, LECT NOTES COMPUT SC, V2374, P231
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Christenson D. M., 2000, AMPHITRUO, P39
   Csallner C, 2004, SOFTWARE PRACT EXPER, V34, P1025, DOI 10.1002/spe.602
   Csallner C., 2006, P ISSTA 2006, P245, DOI DOI 10.1145/1146238.1146267
   D'Souza DesmondF., 1999, OBJECTS COMPONENTS F
   DESCHEEMAECKER M, NANOXML 2 2 1 SOURCE
   DOONG RK, 1991, P 4 S SOFTW TEST AN, P165
   DOONG RK, 1994, ACM T SOFTW ENG METH, V3, P101
   DRANIDIS D, 2004, P 1 S E EUR WORKSH F, P72
   *ECL FDN, ECL OP DEV PLATF
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   ERNST MD, 2007, IN PRESS SCI COMPUT
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GOGUEN J, 1997, ALGEBRAIC SEMANTICS
   GOGUEN J, 1993, INTRO OBJ
   Grieskamp W., 2002, Software Engineering Notes, V27, P112, DOI 10.1145/566171.566190
   Henkel J, 2003, LECT NOTES COMPUT SC, V2743, P431
   HENKEL J, 2004, P 26 INT C SOFTW ENG
   HOLCOMBE M, 2001, P 2 INT C EXTR PROGR, P109
   HOLCOMBE WML, 2003, LECT NOTES COMPUTER, V2675, P161
   Huo Yan Chen, 1998, ACM Transactions on Software Engineering and Methodology, V7, P250, DOI 10.1145/287000.287004
   Ipate F, 1997, INT J COMPUT MATH, V63, P159, DOI 10.1080/00207169708804559
   *IPL, CANT PLUS PLUS TEST
   Irvine Alisa, 1995, EFFECTIVENESS CATEGO
   JARD C, 1983, J SYST SOFTWARE, V3, P315, DOI 10.1016/0164-1212(83)90018-3
   Kiczales G., 1991, The Art of the Metaobject Protocol
   LERDA F, 2001, P 8 INT SPIN WORKSH, P80
   Lorenzoli D., 2006, P INT WORKSH DYN AN, P25
   Marinov D, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P22, DOI 10.1109/ASE.2001.989787
   MCGREGOR JD, 1994, P 11 INT C TEST COMP
   Pacheco C, 2005, LECT NOTES COMPUT SC, V3586, P504
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   *PAR, 2007, PAR JTEST PROD DESCR
   Petrenko A, 2004, IEEE T SOFTWARE ENG, V30, P29, DOI 10.1109/TSE.2004.1265734
   Robillard P. N., 2002, SOFTWARE ENG PROCESS
   Simons AJH, 2005, LECT NOTES COMPUT SC, V3556, P118
   SIMONS AJH, 2007, P 2 TEST AC IND C PR, P138
   SIMONS AJH, 2007, JWALK LAZY SYSTEMATI
   Simons AJH, 2006, SOFTW TEST VERIF REL, V16, P133, DOI 10.1002/stvr.349
   *SIR, SOFTW ART INFR REP N
   TILLMANN N, 2005, P 10 EUR SOFTW ENG C, P253
   TILLMANN N, 2005, P 5 EUR SOFTW ENG C, P241
   Ural H, 2000, COMPUT COMMUN, V23, P609, DOI 10.1016/S0140-3664(99)00227-3
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   VISSER W, 2006, P INT S SOFTW TEST A, P37, DOI DOI 10.1145/1146238.1146243
   Xie T, 2005, LECT NOTES COMPUT SC, V3440, P365
   Xie T, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P196
   Xie T, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P40
   YUAN H, 2005, P 1 INT WORKSH REV E, P5
   [No title captured]
NR 66
TC 15
Z9 18
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2007
VL 14
IS 4
BP 369
EP 418
DI 10.1007/s10515-007-0015-3
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 220BJ
UT WOS:000250131600001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Dilley, N
   Lange, J
AF Dilley, Nicolas
   Lange, Julien
TI Automated verification of concurrent go programs via bounded model
   checking
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Go; Concurrency; Static verification; Behavioural types; Model checking
AB The Go programming language offers a wide range of primitives to coordinate lightweight threads, e.g., channels, waitgroups, and mutexes-all of which may cause concurrency bugs. Static checkers that guarantee the absence of bugs are essential to help programmers avoid these costly errors before their code is executed. However existing tools either miss too many bugs or cannot handle large programs, and do not support programs that rely on statically unknown parameters that affect their concurrent structure (e.g., number of threads). To address these limitations, we propose a static checker for Go programs which relies on performing bounded model checking of their concurrent behaviours. In contrast to previous works, our approach deals with large codebases, supports programs that have statically unknown parameters, and is extensible to additional concurrency primitives. Our work includes a detailed presentation of the extraction algorithm from Go programs to models, an algorithm to automatically check programs with statically unknown parameters, and a large scale evaluation of our approach. The latter shows that our approach outperforms the state-of-the-art on 220 synthetic programs and 78 buggy programs adapted from existing codebases.
C1 [Dilley, Nicolas] Univ Kent, Canterbury, England.
   [Lange, Julien] Royal Holloway Univ London, Egham, England.
C3 University of Kent; University of London; Royal Holloway University
   London
RP Lange, J (corresponding author), Royal Holloway Univ London, Egham, England.
EM nd315@kent.ac.uk; julien.lange@rhul.ac.uk
OI Lange, Julien/0000-0001-9697-1378
CR [Anonymous], 2021, Google: preload code
   [Anonymous], 2021, golang: TestRaceIssue12664_2 code
   [Anonymous], 2021, Kubernetes: GenerateNodeMap code
   [Anonymous], 2022, Snail007: Keys code
   [Anonymous], 2021, Kubernetes: Kubernetes (k8s)
   [Anonymous], 2021, golang: go Github project
   [Anonymous], 1999, Concurrency-state models and Java programs
   Borges H, 2018, J SYST SOFTWARE, V146, P112, DOI 10.1016/j.jss.2018.09.016
   Castro David, 2019, Proceedings of the ACM on Programming Languages, V3, DOI 10.1145/3290342
   Chabbi M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P474, DOI 10.1145/3519939.3523720
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Cordeiro L, 2018, LECT NOTES COMPUT SC, V10981, P183, DOI 10.1007/978-3-319-96145-3_10
   Cranen S, 2013, LECT NOTES COMPUT SC, V7795, P199, DOI 10.1007/978-3-642-36742-7_15
   Dilley N., 2022, Concurrency in Go Benchmark Maker
   Dilley N., 2021, Gomela
   Dilley N., 2022, Gomela
   Dilley N, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1016, DOI 10.1109/ASE51524.2021.9678571
   Dilley N, 2020, ELECTRON P THEOR COM, P34, DOI 10.4204/EPTCS.314.4
   Dilley N, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P377, DOI [10.1109/SANER.2019.8668036, 10.1109/saner.2019.8668036]
   Gabet J., 2020, LIPIcs, V166, P4
   Gadelha MR, 2018, IEEE INT CONF AUTOM, P888, DOI 10.1145/3238147.3240481
   github, sasha-s: go-deadlock
   github, Uber: goleak
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Google, 2020, FindAll code
   gopls, the Go language server
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Honnef D., Staticcheck
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   Kusano M, 2013, IEEE INT CONF AUTOM, P722, DOI 10.1109/ASE.2013.6693142
   Lange J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1137, DOI 10.1145/3180155.3180157
   Lange J, 2017, ACM SIGPLAN NOTICES, V52, P748, DOI 10.1145/3093333.3009847
   Liu ZH, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P888, DOI 10.1145/3503222.3507753
   Liu ZH, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P616, DOI 10.1145/3445814.3446756
   Midtgaard J, 2018, LECT NOTES COMPUT SC, V11002, P284, DOI 10.1007/978-3-319-99725-4_18
   Ng N, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P174, DOI 10.1145/2892208.2892232
   Padhiyar Sumit, 2021, Practical Aspects of Declarative Languages. 23rd International Symposium, PADL 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12548), P127, DOI 10.1007/978-3-030-67438-0_8
   Siebenmann C., 2020, Even in Go, concurrency is still not easy (with an example)
   Stadtmüller K, 2016, LECT NOTES COMPUT SC, V10017, P116, DOI 10.1007/978-3-319-47958-3_7
   Stiévenart Q, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428254
   Sulzmann M., 2017, Hardware and Software: Verification and Testing - 13th International Haifa Verification Conference, HVC 2017, Haifa, Israel, November 13-15, 2017, Proceedings, Lecture Notes in Computer Science, V10629, P83, DOI DOI 10.1007/978-3-319-70389-3_6
   Sulzmann M, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236959
   Taheri S, 2021, I S WORKL CHAR PROC, P138, DOI 10.1109/IISWC53511.2021.00023
   Tu TF, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P865, DOI 10.1145/3297858.3304069
   Veileborg O.H., 2022, ASE, P32
   Yuan T, 2021, INT SYM CODE GENER, P187, DOI 10.1109/CGO51591.2021.9370317
   Zaks A, 2008, LECT NOTES COMPUT SC, V5156, P325, DOI 10.1007/978-3-540-85114-1_22
NR 49
TC 0
Z9 0
U1 1
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 29
DI 10.1007/s10515-023-00391-z
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA W8DO2
UT WOS:001093878800001
DA 2024-07-18
ER

PT J
AU Huang, Y
   Huang, JB
   Chen, XP
   He, KN
   Zhou, XC
AF Huang, Yuan
   Huang, Jinbo
   Chen, Xiangping
   He, Kunning
   Zhou, Xiaocong
TI BCGen: a comment generation method for bytecode
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Bytecode; Comments generation; Control flow graph; Program comprehension
AB Bytecode is a form of instruction set designed for efficient execution by a software interpreter. Unlike human-readable source code, bytecode is even harder to understand for programmers and researchers. Bytecode has been widely used in various software tasks such as malware detection and clone detection. In order to understand the meaning of the bytecode more quickly and accurately and further help programmers in more software activities, we propose a bytecode comment generation method (called BCGen) using neural language model. Specifically, to get the structured information of the bytecode, we first generate the control flow graph (CFG) of the bytecode, and serialize the CFG with bytecode semantic information. Then a transformer model combining gate recurrent unit is proposed to learn the features of bytecode to generate comments. We obtain the bytecode by building the Jar packages of the well-known open-source projects in the Maven repository and construct a bytecode dataset to train and evaluate our model. Experimental results show that the BLEU of BCGen can reach 0.26, which outperforms several baselines and proves the effectiveness and practicability of our method. It is concluded that it is possible to generate natural language comments directly from the bytecode. Meanwhile, it is important to take structured and semantic information into account in generating bytecode comments.
C1 [Huang, Yuan; Huang, Jinbo] Sun Yat Sen Univ, Sch Software Engn, Zhuhai 519000, Guangdong, Peoples R China.
   [Chen, Xiangping] Sun Yat Sen Univ, Sch Journalism & Commun, Guangdong Key Lab Big Data Anal & Simulat Publ Opi, Guangzhou 510000, Guangdong, Peoples R China.
   [He, Kunning; Zhou, Xiaocong] Sun Yat Sen Univ, Sch Comp Sci & Engn, Guangzhou 510000, Guangdong, Peoples R China.
C3 Sun Yat Sen University; Sun Yat Sen University; Sun Yat Sen University
RP Chen, XP (corresponding author), Sun Yat Sen Univ, Sch Journalism & Commun, Guangdong Key Lab Big Data Anal & Simulat Publ Opi, Guangzhou 510000, Guangdong, Peoples R China.
EM huangyuan5@mail.sysu.edu.cn; huangjb63@mail2.sysu.edu.cn;
   chenxp8@mail.sysu.edu.cn; hekn@mail2.sysu.edu.cn;
   isszxc@mail.sysu.edu.cn
FU Guangdong Key Area RD Program; National Natural Science Foundation of
   China;  [2020B010164002];  [61902441];  [61902105];  [61976061]
FX AcknowledgementThis research is supported by the Guangdong Key Area R&D
   Program (2020B010164002), National Natural Science Foundation of China
   (61902441, 61902105, 61976061).
CR Allamanis M, 2018, Arxiv, DOI arXiv:1711.00740
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Alon U., 2018, ARXIV
   Banerjee S., 2005, P ACL WORKSH INTR EX, P65
   Chen Boxing, 2014, P 9 WORKSHOP STAT MA, P362, DOI DOI 10.3115/V1/W14-3346
   Chung JY, 2014, Arxiv, DOI arXiv:1412.3555
   Dahm M., 1999, JIT'99. Java-Information-Tag 1999, P267
   Daoudi N, 2021, COMM COM INF SC, V1482, P81, DOI 10.1007/978-3-030-87839-9_4
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   Ding YX, 2014, COMPUT SECUR, V44, P65, DOI 10.1016/j.cose.2014.04.003
   Dong L, 2019, ADV NEUR IN, V32
   Gao Y., 2019, INT C INFORM COMMUNI, V11999, P199
   Haiduc S., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P223, DOI 10.1145/1810295.1810335
   Haiduc S., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P35, DOI 10.1109/WCRE.2010.13
   Hajmasan G., 2019, 2019 C NEXT GENERATI, P1
   Haque S., 2020, MSR 20 17 INT C MIN, P300, DOI DOI 10.1145/3379597.3387449
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Hochreiter S., 1997, Neural Computation, V9, P1735
   Hu X, 2020, EMPIR SOFTW ENG, V25, P2179, DOI [10.1007/s10664-019-09730-9, 10.1007/978-981-13-8203-1_1]
   Hu X, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2269
   Hu X, 2018, INT C PROGRAM COMPRE, P200, DOI 10.1145/3196321.3196334
   Iyer S, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P2073
   Jackson D, 2001, IEEE T SOFTWARE ENG, V27, P156, DOI 10.1109/32.908960
   Jiang ZM, 2008, INT CONF QUAL SOFTW, P181, DOI 10.1109/QSIC.2008.50
   Keivanloo I., 2012, 2012 IEEE 20th International Conference on Program Comprehension, P247
   Krogmann K, 2010, IEEE T SOFTWARE ENG, V36, P865, DOI 10.1109/TSE.2010.69
   Lam P., 2011, P CET US COMP INFR W, V15, P35
   LeClair A, 2019, PROC INT CONF SOFTW, P795, DOI 10.1109/ICSE.2019.00087
   Li J, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P155, DOI 10.1109/ASE51524.2021.9678724
   Li YC, 2011, LECT NOTES COMPUT SC, V6956, P237, DOI 10.1007/978-3-642-23716-4_21
   Lin Chin-Yew, 2004, Text summarization branches out, P74, DOI DOI 10.2307/3105454
   Lindholm T., 2013, The Java virtual machine specification
   Liu ZA, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1056, DOI 10.1109/ASE51524.2021.9678518
   Luong MT, 2015, Arxiv, DOI arXiv:1508.04025
   McBurney PW, 2016, IEEE T SOFTWARE ENG, V42, P103, DOI 10.1109/TSE.2015.2465386
   McLaughlin N, 2017, PROCEEDINGS OF THE SEVENTH ACM CONFERENCE ON DATA AND APPLICATION SECURITY AND PRIVACY (CODASPY'17), P301, DOI 10.1145/3029806.3029823
   Moreno L, 2013, CONF PROC INT SYMP C, P23, DOI 10.1109/ICPC.2013.6613830
   Papineni K., 2002, P ACL, P311
   Radford A., 2019, LANGUAGE MODELS ARE
   Ramu R, 2020, PROC INT CONF SOFTW, P1037, DOI 10.1145/3377811.3380435
   Rodeghero P, 2017, PROC INT CONF SOFTW, P49, DOI 10.1109/ICSE.2017.13
   Rodeghero P, 2015, IEEE T SOFTWARE ENG, V41, P1038, DOI 10.1109/TSE.2015.2442238
   Rozi MF, 2020, IEEE IJCNN, DOI 10.1109/ijcnn48605.2020.9207134
   Shido Y, 2019, IEEE IJCNN
   Sridhara G, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P101, DOI 10.1145/1985793.1985808
   Sutskever I, 2014, ADV NEUR IN, V27
   Tian DH, 2021, EXPERT SYST APPL, V168, DOI 10.1016/j.eswa.2020.114348
   Tian JF, 2020, INFORM SOFTWARE TECH, V123, DOI 10.1016/j.infsof.2020.106289
   Phu TN, 2019, ISCIT 2019: PROCEEDINGS OF 2019 19TH INTERNATIONAL SYMPOSIUM ON COMMUNICATIONS AND INFORMATION TECHNOLOGIES (ISCIT), P568, DOI 10.1109/ISCIT.2019.8905120
   Nguyen TT, 2021, ASIA CCS'21: PROCEEDINGS OF THE 2021 ACM ASIA CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P578, DOI 10.1145/3433210.3437511
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang WH, 2022, IEEE T SOFTWARE ENG, V48, P102, DOI 10.1109/TSE.2020.2979701
   Wang ZW, 2019, Arxiv, DOI [arXiv:1907.05572, DOI 10.48550/ARXIV.1907.05572]
   Wei BL, 2020, IEEE INT CONF AUTOM, P349, DOI 10.1145/3324884.3416578
   Wong E, 2013, IEEE INT CONF AUTOM, P562, DOI 10.1109/ASE.2013.6693113
   Xue YX, 2019, IEEE T SOFTWARE ENG, V45, P1125, DOI 10.1109/TSE.2018.2827379
   Yang J., 2021, IEEE Transactions on Software Engineering
   Yu DJ, 2017, P INT COMP SOFTW APP, P317, DOI 10.1109/COMPSAC.2017.104
   Zhang J, 2020, PROC INT CONF SOFTW, P1385, DOI 10.1145/3377811.3380383
   Zhang WH, 2021, SYMMETRY-BASEL, V13, DOI 10.3390/sym13071107
   Zhao YJ, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3446905
   Zhou HY, 2021, AAAI CONF ARTIF INTE, V35, P11106
NR 62
TC 1
Z9 2
U1 1
U2 11
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2023
VL 30
IS 1
AR 5
DI 10.1007/s10515-022-00374-6
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6X5KZ
UT WOS:000896453200001
OA hybrid
DA 2024-07-18
ER

PT J
AU Yang, S
   Mao, XN
   Lu, Y
   Xu, Y
AF Yang, Shuo
   Mao, Xinjun
   Lu, Yao
   Xu, Yong
TI Towards a behavior tree-based robotic software architecture with adjoint
   observation schemes for robotic software development
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Adjoint sensing and acting; Adjoint observation scheme; Behavior tree;
   Robotic software architecture
ID SYSTEMS; DESIGN
AB Nowadays, autonomous robots are increasingly accomplishing tasks in the dynamic world where environment states may change unexpectedly and be partially observable. The robot tasks in dynamic environments generally expect the robot to continuously deliberate upon the task goal while effectively obtaining environmental information with sensor and actuator actions. Implementing the underlying robotic software for such tasks can be rather difficult and tedious. The software developers need to synthetically implement the decision-making issues of controlling and planning, as well as the interactions between robotic sensing and actuating components, which is much more challenging than general-purpose software development. The existing software engineering practices focus on the general-purpose software development issues of modularity and communication, without specialized architectural solutions for the implementation of robotic controlling and decision-making processes, which still limits the implementation efficiency of robotic software in dynamic environments. This paper proposes a general-purpose scheme of adjoint observation between robotic sensing and actuating components, which specifies the integral control loop of controlling, planning, and data flows. The adjoint observation scheme solves the problem of effectively exploring the environment for effective observations by the integral control loop. Then we utilize the Behavior Tree component software architecture for concrete implementation of adjoint observation schemes. More specifically, we propose the Parallel and Fallback tree structure for concrete implementation of adjoint control flows. We also extend the BT architecture with an online planning component and mutual data store mechanism, enabling continuous planning and efficient data communication between robotic sensing and actuating processes. In the experiment, we select the Classical BT approach and Pure ROS-based approach as baseline approaches, to validate the task effectiveness of the adjoint observation scheme and development efficiency of the supporting software architecture.
C1 [Yang, Shuo; Mao, Xinjun; Lu, Yao; Xu, Yong] Natl Univ Def Technol, Coll Comp, Key Lab Software Engn Complex Syst, Changsha, Peoples R China.
C3 National University of Defense Technology - China
RP Yang, S (corresponding author), Natl Univ Def Technol, Coll Comp, Key Lab Software Engn Complex Syst, Changsha, Peoples R China.
EM yangshuo11@nudt.edu.cn; xjmao@nudt.edu.cn; luyao@nudt.edu.cn
FU Key Laboratory of Software Engineering for Complex Systems; National
   Natural Science Foundation of China [62172426]
FX This work is supported by the Key Laboratory of Software Engineering for
   Complex Systems. The work is also supported by the National Natural
   Science Foundation of China under Grant No.62172426.
CR Abdellatif T, 2012, ROBOT AUTON SYST, V60, P1563, DOI 10.1016/j.robot.2012.09.005
   Ahmad A, 2016, J SYST SOFTWARE, V122, P16, DOI 10.1016/j.jss.2016.08.039
   Anis Koubaa., 2015, J SOFTWARE ENG ROBOT, V6, P1
   [Anonymous], 2017, Journal of Software Engineering for Robotics
   Basu A, 2011, IEEE SOFTWARE, V28, P41, DOI 10.1109/MS.2011.27
   Brugali D, 2009, IEEE ROBOT AUTOM MAG, V16, P84, DOI 10.1109/MRA.2009.934837
   Bruyninckx H., 2013, Proceedings of the 28th Annual ACM Symposium on Applied Computing, P1758, DOI [10.1145/2480362.2480693, DOI 10.1145/2480362.2480693]
   Colledanchise M., 2018, Behavior Trees in Robotics and AI: An Introduction, DOI DOI 10.1201/9780429489105
   Colledanchise M, 2021, IEEE ROBOT AUTOM LET, V6, P5929, DOI 10.1109/LRA.2021.3087442
   Colledanchise M, 2018, IEEE INT C INT ROBOT, P7103, DOI 10.1109/IROS.2018.8593504
   Heitmeyer CL, 2015, AUTOMAT SOFTW ENG, V22, P159, DOI 10.1007/s10515-014-0157-z
   Jang C, 2010, ETRI J, V32, P646, DOI [10.4218/etrij.101510.0138, 10.4218/etrij.10.1510.0138]
   Kortenkamp D, 2016, SPRINGER HANDBOOK OF ROBOTICS, P283
   Koubaa A., 2017, ROBOT OPERATING SYST, V1
   Koubaa A., 2015, Cooperative Robots and Sensor Networks 2015, P3, DOI DOI 10.1007/978-3-319-18299-5_1
   Kuckling J, 2018, LECT NOTES COMPUT SC, V11172, P30, DOI 10.1007/978-3-030-00533-7_3
   Lohse M, 2014, INT J SOC ROBOT, V6, P121, DOI 10.1007/s12369-013-0209-8
   Nyasente SO., 2014, J INF ENG APPL, V4, P71
   Quigley M, 2009, IEEE INT CONF ROBOT, P3604
   Rouland Q, 2020, FUTURE GENER COMP SY, V108, P178, DOI 10.1016/j.future.2020.02.033
   Rovida F, 2017, IEEE INT C INT ROBOT, P6793, DOI 10.1109/IROS.2017.8206598
   Suma V., 2016, TECHNOL SPECTR REV, V1, P20
   Ye N, 2017, J ARTIF INTELL RES, V58, P231, DOI 10.1613/jair.5328
NR 23
TC 0
Z9 0
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 31
DI 10.1007/s10515-022-00328-y
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZP1BH
UT WOS:000766159500001
DA 2024-07-18
ER

PT J
AU Esteves, G
   Figueiredo, E
   Veloso, A
   Viggiato, M
   Ziviani, N
AF Esteves, Geanderson
   Figueiredo, Eduardo
   Veloso, Adriano
   Viggiato, Markos
   Ziviani, Nivio
TI Understanding machine learning software defect predictions
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software defects; Explainable models; Jureczko datasets; SHAP values
ID METRICS; PERFORMANCE; ACCURACY
AB Software defects are well-known in software development and might cause several problems for users and developers aside. As a result, researches employed distinct techniques to mitigate the impacts of these defects in the source code. One of the most notable techniques focuses on defect prediction using machine learning methods, which could support developers in handling these defects before they are introduced in the production environment. These studies provide alternative approaches to predict the likelihood of defects. However, most of these works concentrate on predicting defects from a vast set of software features. Another key issue with the current literature is the lack of a satisfactory explanation of the reasons that drive the software to a defective state. Specifically, we use a tree boosting algorithm (XGBoost) that receives as input a training set comprising records of easy-to-compute characteristics of each module and outputs whether the corresponding module is defect-prone. To exploit the link between predictive power and model explainability, we propose a simple model sampling approach that finds accurate models with the minimum set of features. Our principal idea is that features not contributing to increasing the predictive power should not be included in the model. Interestingly, the reduced set of features helps to increase model explainability, which is important to provide information to developers on features related to each module of the code which is more defect-prone. We evaluate our models on diverse projects within Jureczko datasets, and we show that (i) features that contribute most for finding best models may vary depending on the project and (ii) it is possible to find effective models that use few features leading to better understandability. We believe our results are useful to developers as we provide the specific software features that influence the defectiveness of selected projects.
C1 [Esteves, Geanderson; Ziviani, Nivio] Univ Fed Minas Gerais & Kunumi, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [Figueiredo, Eduardo; Veloso, Adriano] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [Viggiato, Markos] Univ Alberta, Dept Elect & Comp Engn, Edmonton, AB, Canada.
C3 Universidade Federal de Minas Gerais; University of Alberta
RP Esteves, G (corresponding author), Univ Fed Minas Gerais & Kunumi, Dept Comp Sci, Belo Horizonte, MG, Brazil.
EM geanderson@dcc.ufmg.br; figueiredo@dcc.ufmg.br; adrianov@dcc.ufmg.br;
   viggiato@ualberta.ca; nivio@dcc.ufmg.br
RI Veloso, Adriano/C-8695-2013
OI Veloso, Adriano/0000-0002-9177-4954; Esteves dos Santos,
   Geanderson/0000-0002-7571-6578; Ziviani, Nivio/0000-0002-7079-2010;
   Viggiato, Markos/0000-0002-8500-3723; Figueiredo,
   Eduardo/0000-0002-6004-2718
FU Project: Models, Algorithms and Systems for the Web
   [FAPEMIG/PRONEX/MASWeb APQ-01400- 14]; CNPq; Fapemig
FX We thank the support given by the Project: Models, Algorithms and
   Systems for the Web (Grant by FAPEMIG/PRONEX/MASWeb APQ-01400- 14) and
   authors' individual grants and scholarships from CNPq and Fapemig.
CR Agrawal Amritanshu, 2018, 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE). Proceedings, P1050, DOI 10.1145/3180155.3180197
   Chen TQ, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P785, DOI 10.1145/2939672.2939785
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Couto C, 2012, EUR CON SFTWR MTNCE, P223, DOI 10.1109/CSMR.2012.31
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Ferenc R, 2018, PROMISE'18: PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING, P12, DOI 10.1145/3273934.3273936
   Fukushima T., 2014, Proceedings of the 11th Working Conference on Mining Software Repositories, MSR 2014, P172, DOI DOI 10.1145/2597073.2597075
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Gray David, 2011, 15th Annual Conference on Evaluation & Assessment in Software Engineering (EASE 2011), P96, DOI 10.1049/ic.2011.0012
   Gray D, 2009, COMM COM INF SC, V43, P223
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Halstead M.H., 1977, OPERATING PROGRAMMIN
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Herbold S, 2015, 2015 30th IEEE/ACM International Conference on Automated Software Engineering Workshop (ASEW), P90, DOI 10.1109/ASEW.2015.8
   Jiang T, 2013, IEEE INT CONF AUTOM, P279, DOI 10.1109/ASE.2013.6693087
   Jiarpakdee J, 2022, IEEE T SOFTWARE ENG, V48, P166, DOI 10.1109/TSE.2020.2982385
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P414, DOI 10.1145/2568225.2568320
   Jureczko M., 2010, Model Methods Syst Dependability Oficyna Wydawnicza Politech Wroclawskiej, P69
   Knab P., 2006, P 2006 INT WORKSHOP, P119
   Kuhn M., 2015, ASTROPHYSICS SOURCE
   Lewis C, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P372, DOI 10.1109/ICSE.2013.6606583
   Li YL, 2010, INT CONF COMP SCI, P1, DOI 10.1109/ICCSIT.2010.5564891
   Lundberg S. M., 2017, P 2017 ICML WORKSH H
   Lundberg SM, 2017, ADV NEUR IN, V30
   Lundberg Scott M, 2018, ARXIV180203888
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MCCABE TJ, 1989, COMMUN ACM, V32, P1415, DOI 10.1145/76380.76382
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Mori T, 2019, EMPIR SOFTW ENG, V24, P779, DOI 10.1007/s10664-018-9638-1
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   PETRIC J, 2016, P 20 INT C EVALUATIO
   Sayyad Shirabad J., 2005, The PROMISE Repository of Software Engineering Databases
   Shapley Lloyd S, 1953, Contributions to the Theory of Games (AM-28), V2, P307, DOI DOI 10.1515/9781400881970-018
   Shuai B, 2013, 2013 9TH INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE AND SECURITY (CIS), P260, DOI 10.1109/CIS.2013.61
   Sokolova M, 2006, LECT NOTES COMPUT SC, V4304, P1015
   Stites R. L., 1991, ANNA - 91. Analysis of Neural Network Applications, P199, DOI 10.1145/106965.106970
   Sun Z, 2018, An empirical study of public data quality problems in cross project defect prediction
   Tantithamthavorn C, 2018, 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING - SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2018), P286, DOI 10.1145/3183519.3183547
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   Tantithamthavorn C, 2017, IEEE T SOFTWARE ENG, V43, P1, DOI 10.1109/TSE.2016.2584050
   Thwin MMT, 2005, J SYST SOFTWARE, V76, P147, DOI 10.1016/j.jss.2004.05.001
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Turhan B, 2009, DATA KNOWL ENG, V68, P278, DOI 10.1016/j.datak.2008.10.005
   Wang DD, 2019, I C OPT COMMUN NETW, DOI [10.1109/icocn.2019.8934212, 10.1145/3290605.3300831]
   Wang S, 2016, PROC INT CONF SOFTW, P297, DOI 10.1145/2884781.2884804
   Xu Z, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P209, DOI 10.1109/SANER.2018.8330210
   Xuan X., 2015, P 30 ANN ACM S APPL
   Yang YB, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P157, DOI 10.1145/2950290.2950353
   Yatish S, 2019, PROC INT CONF SOFTW, P654, DOI 10.1109/ICSE.2019.00075
   Zhang F, 2017, IEEE T SOFTWARE ENG, V43, P476, DOI 10.1109/TSE.2016.2599161
NR 52
TC 37
Z9 38
U1 0
U2 23
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2020
VL 27
IS 3-4
SI SI
BP 369
EP 392
DI 10.1007/s10515-020-00277-4
EA OCT 2020
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OH9NE
UT WOS:000577031000001
DA 2024-07-18
ER

PT J
AU Li, Y
   Zhu, CG
   Gligoric, M
   Rubin, J
   Chechik, M
AF Li, Yi
   Zhu, Chenguang
   Gligoric, Milos
   Rubin, Julia
   Chechik, Marsha
TI Precise semantic history slicing through dynamic delta refinement
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Semantic history slicing; Program analysis; Software configuration
   management
AB Semantic history slicing solves the problem of extracting changes related to a particular high-level functionality from software version histories. State-of-the-art techniques combine static program analysis and dynamic execution tracing to infer an over-approximated set of changes that can preserve the functional behaviors captured by a test suite. However, due to the conservative nature of such techniques, the sliced histories may contain irrelevant changes. In this paper, we propose a divide-and-conquer-style partitioning approach enhanced by dynamic delta refinement to produce much smaller semantic history slices. We utilize deltas in dynamic invariants generated from successive test executions to learn significance of changes with respect to the target functionality. Additionally, we introduce a file-level commit splitting technique for untangling unrelated changes introduced in a single commit. Empirical results indicate that these measurements accurately rank changes according to their relevance to the desired test behaviors and thus partition history slices in an efficient and effective manner.
C1 [Li, Yi] Nanyang Technol Univ, Sch Comp Sci & Engn, Singapore 639798, Singapore.
   [Zhu, Chenguang; Gligoric, Milos] Univ Texas Austin, Dept Elect & Comp Engn, Austin, TX 78712 USA.
   [Rubin, Julia] Univ British Columbia, Dept Elect & Comp Engn, Vancouver, BC V6T 1Z4, Canada.
   [Chechik, Marsha] Univ Toronto, Dept Comp Sci, Toronto, ON M5S 3G4, Canada.
C3 Nanyang Technological University; University of Texas System; University
   of Texas Austin; University of British Columbia; University of Toronto
RP Li, Y (corresponding author), Nanyang Technol Univ, Sch Comp Sci & Engn, Singapore 639798, Singapore.
EM yi_li@ntu.edu.sg; cgzhu@utexas.edu; gligoric@utexas.edu;
   mjulia@ece.ubc.ca; chechik@cs.toronto.edu
RI Li, Yi/AAG-4899-2020
OI Li, Yi/0000-0003-4562-8208; Rubin, Julia/0000-0001-7280-1614; Chechik,
   Marsha/0000-0002-6301-3517
FU Singapore Ministry of Education Academic Research Fund Tier 1
   [2018-T1-002-069]
FX This research is partly supported by the Singapore Ministry of Education
   Academic Research Fund Tier 1 (Award No. 2018-T1-002-069).
CR [Anonymous], 2018, APACHE COMMONS LANG
   [Anonymous], 2016, Git Version Control System
   [Anonymous], 2017, YAML Ain't Markup Language
   [Anonymous], 2017, APACHE COMMONS CSV L
   [Anonymous], 2017, JIRA Software
   [Anonymous], 2016, Apache Subversion (SVN) Version Control System
   [Anonymous], 2016, Git: git-bisect Documentation
   [Anonymous], 2018, GIT TOOLS INTERACTIV
   [Anonymous], 2018, GIT GIT BASICS
   [Anonymous], 2017, APACHE COMMONS NET L
   [Anonymous], 2017, APACHE COMMONS IO LI
   [Anonymous], 2015, APACHE MAVEN PROJECT
   [Anonymous], 2018, APACHE COMMONS COMPR
   [Anonymous], 2016, Mercurial Source Control Management System
   [Anonymous], 2016, JGit: A Lightweight, Pure Java Library Implementing the Git Version Control System
   [Anonymous], 1999, P 1999 C CTR ADV STU
   [Anonymous], 2015, Apache Commons Byte Code Engineering Library
   Arnold Robert S., 1996, SOFTWARE CHANGE IMPA
   Brun Y, 2004, PROC INT CONF SOFTW, P480, DOI 10.1109/ICSE.2004.1317470
   Brun Y, 2013, IEEE T SOFTWARE ENG, V39, P1358, DOI 10.1109/TSE.2013.28
   Chawathe S. S., 1996, SIGMOD Record, V25, P493, DOI 10.1145/235968.233366
   Dodoo Nii, 2003, MITLCSTR914
   Ernst M. D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P213, DOI 10.1109/ICSE.1999.841011
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Ferzund J, 2009, LECT NOTES COMPUT SC, V5891, P242, DOI 10.1007/978-3-642-05415-0_18
   Fluri B, 2007, IEEE T SOFTWARE ENG, V33, P725, DOI 10.1109/TSE.2007.70731
   Fluri B, 2006, INT C PROGRAM COMPRE, P35, DOI 10.1109/ICPC.2006.16
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   Hayashi S, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P617, DOI 10.1109/ICSM.2012.6405336
   Herzig K, 2013, IEEE WORK CONF MIN S, P121, DOI 10.1109/MSR.2013.6624018
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kastner Christian, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P258, DOI 10.1109/ASE.2008.36
   KUNG D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P202, DOI 10.1109/ICSM.1994.336774
   Law J, 2003, PROC INT CONF SOFTW, P308, DOI 10.1109/ICSE.2003.1201210
   Li Y., 2019, TECHNICAL REPORT
   Li Y., 2018, P 40 INT C SOFTW ENG
   Li Y, 2018, IEEE T SOFTWARE ENG, V44, P182, DOI 10.1109/TSE.2017.2664824
   Li Y, 2016, IEEE INT CONF AUTOM, P495, DOI 10.1145/2970276.2970336
   Li Y, 2015, IEEE INT CONF AUTOM, P686, DOI 10.1109/ASE.2015.47
   Murphy-Hill E, 2012, IEEE T SOFTWARE ENG, V38, P5, DOI 10.1109/TSE.2011.41
   Muslu K, 2015, IEEE INT CONF AUTOM, P697, DOI 10.1109/ASE.2015.53
   Ning XJ, 2017, J GEOGR SCI, V27, P23, DOI 10.1007/s11442-017-1362-z
   Orso Alessandro., 2008, Proceedings of the 2008 international workshop on dynamic analysis: held in conjunction with the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2008), WODA '08, P36, DOI DOI 10.1145/1401827.1401835
   Pastore L, 2014, S F-SCIENZAEFILOSOFI, P37
   Perkins J. H., 2004, Software Engineering Notes, V29, P23, DOI 10.1145/1041685.1029901
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   Rothermel G, 1996, IEEE T SOFTWARE ENG, V22, P529, DOI 10.1109/32.536955
   Rubin Julia., 2012, P SOFTWARE PRODUCT L, P156, DOI DOI 10.1145/2362536.2362558
   Saha R, 2017, LECT NOTES COMPUT SC, V10202, P60, DOI 10.1007/978-3-662-54494-5_4
   Servant F., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P452, DOI 10.1109/ASE.2011.6100097
   Wei Jin, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P137, DOI 10.1109/ICST.2010.64
   Xie T, 2005, IEEE T SOFTWARE ENG, V31, P869, DOI 10.1109/TSE.2005.107
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
   Zeller A, 1999, LECT NOTES COMPUT SC, V1687, P253, DOI 10.1145/318774.318946
   Zhu CG, 2017, IEEE WORK CONF MIN S, P523, DOI 10.1109/MSR.2017.49
   Zimmermann T, 2004, PROC INT CONF SOFTW, P563, DOI 10.1109/ICSE.2004.1317478
NR 56
TC 4
Z9 4
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2019
VL 26
IS 4
SI SI
BP 757
EP 793
DI 10.1007/s10515-019-00260-8
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JQ6FZ
UT WOS:000499040300003
DA 2024-07-18
ER

PT J
AU Dilshener, T
   Wermelinger, M
   Yu, YJ
AF Dilshener, Tezcan
   Wermelinger, Michel
   Yu, Yijun
TI Locating bugs without looking back
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Bug localisation; Information retrieval; Empirical study
ID TRACEABILITY LINKS; LOCALIZATION; CODE
AB Bug localisation is a core program comprehension task in software maintenance: given the observation of a bug, e.g. via a bug report, where is it located in the source code? Information retrieval (IR) approaches see the bug report as the query, and the source code files as the documents to be retrieved, ranked by relevance. Such approaches have the advantage of not requiring expensive static or dynamic analysis of the code. However, current state-of-the-art IR approaches rely on project history, in particular previously fixed bugs or previous versions of the source code. We present a novel approach that directly scores each current file against the given report, thus not requiring past code and reports. The scoring method is based on heuristics identified through manual inspection of a small sample of bug reports. We compare our approach to eight others, using their own five metrics on their own six open source projects. Out of 30 performance indicators, we improve 27 and equal 2. Over the projects analysed, on average we find one or more affected files in the top 10 ranked files for 76% of the bug reports. These results show the applicability of our approach to software projects without history.
C1 [Dilshener, Tezcan; Wermelinger, Michel; Yu, Yijun] Open Univ, Sch Comp & Commun, Milton Keynes MK7 6AA, Bucks, England.
C3 Open University - UK
RP Dilshener, T (corresponding author), Open Univ, Sch Comp & Commun, Milton Keynes MK7 6AA, Bucks, England.
EM tezcan@dilshener.de; michel.wermelinger@open.ac.uk; yijun.yu@open.ac.uk
RI Wermelinger, Michel/AAG-5635-2020
OI Wermelinger, Michel/0000-0002-6467-3293; Yu, Yijun/0000-0002-7154-8570
CR Abebe SL, 2011, IEEE INT WORK C SO, P125, DOI 10.1109/SCAM.2011.18
   [Anonymous], 1997, READINGS INFORM RETR
   [Anonymous], 2006, NON TRADITIONAL REF
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Arong, 2014, PROCEEDINGS OF 2014 IEEE INTERNATIONAL CONFERENCE ON PROGRESS IN INFORMATICS AND COMPUTING (PIC), P51, DOI 10.1109/PIC.2014.6972294
   Bennett K. H., 2000, P C FUT SOFTW ENG, P73
   Bettenburg N., 2008, P 2008 INT WORKING C, P27
   Boslaugh S., 2008, STAT NUTSHELL
   Butler S, 2011, LECT NOTES COMPUT SC, V6813, P130, DOI 10.1007/978-3-642-22655-7_7
   Butler S, 2010, EUR CON SFTWR MTNCE, P156, DOI 10.1109/CSMR.2010.27
   Dilshener T., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P412, DOI 10.1109/ICSM.2011.6080808
   Dilshener T, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P286, DOI [10.1109/MSR.2016.037, 10.1145/2901739.2901775]
   Eisenbarth T, 2001, PROC IEEE INT CONF S, P602, DOI 10.1109/ICSM.2001.972777
   Gethers M., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P133, DOI 10.1109/ICSM.2011.6080780
   Hill E., 2007, Proceedings of the 22nd International Conference on Automated Software Engineering, P14
   Kevic K, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P468, DOI 10.1145/2591062.2591117
   Kochhar Pavneet Singh, 2014, P 2 ACM IEEE INT C, P803, DOI DOI 10.1145/2642937.2642997
   Kochhar Pavneet Singh, 2016, 25 INT S SOFTWARE TE, P165, DOI 10.1145/2931037.2931051
   Lawrie D., 2012, 1 WORKSH TEXT AN SOF
   Le TDB, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P579, DOI 10.1145/2786805.2786880
   Li Z, 2006, P 1 WORKSH ARCH SYST, P25, DOI DOI 10.1145/1181309.1181314
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   Marcus A, 2005, PROG COMPREHEN, P33, DOI 10.1109/WPC.2005.33
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Moreno L, 2014, PROC IEEE INT CONF S, P151, DOI 10.1109/ICSME.2014.37
   Moreno L, 2013, PROC IEEE INT CONF S, P452, DOI 10.1109/ICSM.2013.70
   Nichols B.D, 2010, P ANN SE REG C ACM S
   Parnin C, P INT S SOFTW TEST A, P199
   Petrenko M, 2013, INFORM SOFTWARE TECH, V55, P651, DOI 10.1016/j.infsof.2012.09.013
   Poshyvanyk D, 2007, IEEE T SOFTWARE ENG, V33, P420, DOI [10.1109/TSE.2007.1016, 10.1109/TSE.2007.1016.]
   Rahman S, 2015, 2015 18TH INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION TECHNOLOGY (ICCIT), P190, DOI 10.1109/ICCITechn.2015.7488066
   Rao S., 2011, P 8 WORK C MIN SOFTW, P43
   Ratanotayanon Sukanya, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P206, DOI 10.1109/ICPC.2010.33
   Saha RK, 2013, IEEE INT CONF AUTOM, P345, DOI 10.1109/ASE.2013.6693093
   SALTON G, 1988, INFORM PROCESS MANAG, V24, P513, DOI 10.1016/0306-4573(88)90021-0
   Schroter Adrian, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P118, DOI 10.1109/MSR.2010.5463280
   Sillito J, 2008, IEEE T SOFTWARE ENG, V34, P434, DOI 10.1109/TSE.2008.26
   Sisman B., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P50, DOI 10.1109/MSR.2012.6224299
   Starke J, 2009, PROC IEEE INT CONF S, P157, DOI 10.1109/ICSM.2009.5306335
   Uneno Y, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P183, DOI 10.1109/QRS.2016.30
   Voorhees Ellen M., 2001, Trec, V7, P361, DOI DOI 10.1017/S1351324901002789
   Wang Q, 2015, J NANOMATER, V2015, DOI 10.1155/2015/408634
   Wang SW, 2014, PROC IEEE INT CONF S, P171, DOI 10.1109/ICSME.2014.39
   WILDE N, 1995, J SOFTW MAINT-RES PR, V7, P49, DOI 10.1002/smr.4360070105
   Wong CP, 2014, PROC IEEE INT CONF S, P181, DOI 10.1109/ICSME.2014.40
   Xia X, 2016, PROC IEEE INT CONF S, P268, DOI 10.1109/ICSME.2016.67
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
   Ye X, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P689, DOI 10.1145/2635868.2635874
   Youm KC, 2015, ASIA PAC SOFWR ENG, P190, DOI 10.1109/APSEC.2015.23
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
   Zimmermann T, 2010, IEEE T SOFTWARE ENG, V36, P618, DOI 10.1109/TSE.2010.63
NR 51
TC 11
Z9 14
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2018
VL 25
IS 3
BP 383
EP 434
DI 10.1007/s10515-017-0226-1
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP2SY
UT WOS:000440687600001
OA Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Landhäusser, M
   Weigelt, S
   Tichy, WF
AF Landhaeusser, Mathias
   Weigelt, Sebastian
   Tichy, Walter F.
TI NLCI: a natural language command interpreter
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Programming in natural language; End-user programming; Knowledge-based
   software engineering; Program synthesis; Natural language processing for
   software engineering
ID SEMANTIC-WEB; INTERFACES; ONTOLOGIES; POWERAQUA
AB Natural language interfaces are becoming more and more common, because they are powerful and easy to use. Examples of such interfaces are voice controlled navigation devices, Apple's personal assistant Siri, Google Voice Search, and translation services. However, such interfaces are extremely difficult to build, to maintain, and to port to new domains. We present an approach for building and porting such interfaces quickly. NLCI is a natural language command interpreter that accepts action commands in English and translates them into executable code. The core component is an ontology that models an API. Once the API is "ontologized", NLCI translates input sentences into sequences of API calls that implement the intended actions. Two radically different APIs were ontologized: openHAB for home automation and Alice for building 3D animations. Construction of the ontology can be automated if the API uses descriptive names for its components. In that case, the language interface can be generated completely automatically. Recall and precision of NLCI on a benchmark of 50 input scripts are 67 and 78 %, resp. Though not yet acceptable for practical use, the results indicate that the approach is feasible. NLCI accepts typed input only. Future work will use a speech front-end to test spoken input.
C1 [Landhaeusser, Mathias; Weigelt, Sebastian; Tichy, Walter F.] Karlsruhe Inst Technol, Inst Program Struct & Data Org, Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Landhäusser, M (corresponding author), Karlsruhe Inst Technol, Inst Program Struct & Data Org, Karlsruhe, Germany.
EM landhaeusser@kit.edu; weigelt@kit.edu; tichy@kit.edu
RI Landhäußer, Mathias/I-6956-2019
OI Landhäußer, Mathias/0000-0002-7439-8096
CR Androutsopoulos I., 1995, Natural Language Engineering, V1, P29, DOI [DOI 10.1017/S135132490000005X, 10.1017/S0269888900005476]
   [Anonymous], 2005, CHI 05 EXTENDED ABST, DOI DOI 10.1145/1056808.1056975
   [Anonymous], 2008, COLING 2008 P WORKSH
   [Anonymous], END USER DEV HUMAN C
   Ballard Bruce W., 1979, ANN C ACM, P228, DOI [DOI 10.1145/800177.810072, 10.1145/800177.810072]
   Bellegarda J. R., 2014, Natural Interaction with Robots, Knowbots and Smartphones, P3
   BIERMANN AW, 1983, INT J MAN MACH STUD, V18, P71, DOI 10.1016/S0020-7373(83)80005-4
   Chomsky Noam., 1986, Knowledge of Language: Its Nature, Origin, and Use
   Conway M. J., 1997, THESIS
   Damljanovic D, 2010, LECT NOTES COMPUT SC, V6088, P106, DOI 10.1007/978-3-642-13486-9_8
   de Marneffe M.C., 2015, TECH REP
   Ferrucci D, 2010, AI MAG, V31, P59, DOI 10.1609/aimag.v31i3.2303
   Goodman D., 1998, DANNY GOODMANS APPLE
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Guzzoni D., 2007, ASS ADVANCEMENT ARTI, P52
   Hongji Yang, 1999, Proceedings. Twenty-Third Annual International Computer Software and Applications Conference (Cat. No.99CB37032), P21, DOI 10.1109/CMPSAC.1999.812512
   Knoll R., 2006, COMPANION 21 ACM SIG, P542, DOI DOI 10.1145/1176617.1176628
   Knoll R., 2011, P 10 SIGPLAN S NEW I, P33, DOI [10.1145/2048237.2048243, DOI 10.1145/2048237.2048243]
   Knublauch H, 2004, LECT NOTES COMPUT SC, V3298, P229
   Körner SJ, 2009, INT J SEMANT COMPUT, V3, P445, DOI 10.1142/S1793351X09000872
   Landhäusser M, 2015, INT WORK REAL ARTIF, P7, DOI 10.1109/RAISE.2015.9
   Landhausser M., 2014, P 3 INT WORKSH REAL, P45, DOI DOI 10.1145/2593801.2593809
   Le V., 2013, MOBSYS 13, P5
   Liu H, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P281
   Lopez V, 2006, LECT NOTES COMPUT SC, V4011, P393
   Lopez V, 2012, SEMANT WEB, V3, P249, DOI 10.3233/SW-2011-0030
   Manning CD, 2014, PROCEEDINGS OF 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: SYSTEM DEMONSTRATIONS, P55, DOI 10.3115/v1/p14-5010
   Manshadi Mehdi, 2013, INTEGRATING PROGRAMM
   Martinez-Barco P, 2013, DATA KNOWL ENG, V88, P109, DOI 10.1016/j.datak.2013.08.001
   Mihalcea R, 2006, LECT NOTES COMPUT SC, V3878, P319
   Miller Jim., 2011, A Critical Introduction to Syntax
   Ortiz CL, 2014, IEEE INTERNET COMPUT, V18, P74, DOI 10.1109/MIC.2014.36
   Pane JF, 2002, IEEE 2002 SYMPOSIA ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P198, DOI 10.1109/HCC.2002.1046372
   Pane JF, 2001, INT J HUM-COMPUT ST, V54, P237, DOI 10.1006/ijhc.2000.0410
   PANE JF, 1996, CMUCS96132 SCH COMP
   Price D., 2000, IUI 2000. 2000 International Conference on Intelligent User Interfaces, P207, DOI 10.1145/325737.325845
   SAMMET JE, 1966, COMMUN ACM, V9, P228, DOI 10.1145/365230.365274
   Thummalapenta S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1002, DOI 10.1109/ICSE.2013.6606650
   Thummalapenta S, 2012, PROC INT CONF SOFTW, P881, DOI 10.1109/ICSE.2012.6227131
   Unger C, 2011, LECT NOTES COMPUT SC, V6716, P153, DOI 10.1007/978-3-642-22327-3_15
   Vadas D., 2005, P AUSTRALASIAN LANGU, P191
   Walts D., 1975, IJCAI, P868
   Wang C, 2007, LECT NOTES COMPUT SC, V4519, P473
   Zhang Y., 2006, International Workshop on Metamodels, Schemas, Grammars, and Ontologies for Reverse Engineering, P36
NR 44
TC 24
Z9 24
U1 0
U2 23
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2017
VL 24
IS 4
BP 839
EP 861
DI 10.1007/s10515-016-0202-1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FI9EQ
UT WOS:000412307800005
OA Green Published
DA 2024-07-18
ER

PT J
AU Caiuta, R
   Pozo, A
   Vergilio, SR
AF Caiuta, Rafael
   Pozo, Aurora
   Vergilio, Silvia Regina
TI Meta-learning based selection of software reliability models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software reliability models; Meta-learning; Data mining
ID PREDICTION
AB The correct estimation of the software reliability level is fundamental to reduce efforts in the testing, maintenance and release activities. To help in this task, we find in the literature an increasing number of software reliability models (SRMs). However, none has proved to perform well considering different contexts. Due to this, the selection of the best model for a particular case is an important task. Most existing works on SRM selection need to test different models and decide based on how well the model fits the data and predicts the future events. Moreover, in general, they do not consider search-based models. Considering this fact, this paper introduces a Meta-learning approach for SRM selection. In such approach, some meta-features are used to indicate the best performing model. The approach is independent of the type of models to be selected, and can be used with different data mining algorithms. It includes the following activities: meta-knowledge extraction, meta-learning and classification. The activities meta-knowledge extraction and meta-learning are performed just once and generate a meta-classifier. Therefore, the meta-classifier is used to select the most adequate model for new projects (classification activity). The approach is evaluated in a set of experiments and the results do not show statistical difference between the Meta-learning approach and the choice of the best performing model. Otherwise, the results point out statistical difference between the Meta-learning approach and the choice of the worst performing model with a large stochastic difference according to the Vargha and Delaney Effect Size.
C1 [Caiuta, Rafael; Pozo, Aurora; Vergilio, Silvia Regina] Fed Univ Parana UFPR, Dept Comp Sci, CP 19 081, BR-81531970 Curitiba, Parana, Brazil.
C3 Universidade Federal do Parana
RP Vergilio, SR (corresponding author), Fed Univ Parana UFPR, Dept Comp Sci, CP 19 081, BR-81531970 Curitiba, Parana, Brazil.
EM caiuta@gmail.com; aurora@inf.ufpr.br; silvia@inf.ufpr.br
RI Pozo, Aurora/GLR-8381-2022
OI Pozo, Aurora/0000-0001-5808-3919
FU CNPq
FX The authors would like to thank CNPq for financial support.
CR Afzal W, 2008, CSA 2008: INTERNATIONAL SYMPOSIUM ON COMPUTER SCIENCE AND ITS APPLICATIONS, PROCEEDINGS, P114, DOI 10.1109/CSA.2008.13
   Aljahdali SH, 2001, ACS/IEEE INTERNATIONAL CONFERENCE ON COMPUTER SYSTEMS AND APPLICATIONS, PROCEEDINGS, P470, DOI 10.1109/AICCSA.2001.934046
   [Anonymous], 2005, HDB SOFTWARE RELIABI
   Arlot S, 2010, STAT SURV, V4, P40, DOI 10.1214/09-SS054
   Asad C. A., 2004, Proceedings of the 28th Annual International Computer Software and Applications Conference. COMPSAC 2004, P534, DOI 10.1109/CMPSAC.2004.1342891
   Borowska K., 2014, ADV COMPUT SCI RES, V11, P31
   Brazdil P. B., 2009, Metalearning: Applications to Data Mining
   Caiuta R., 2008, IEEE INT JOINT C NEU
   Chatzis S., 2015, NEURAL NETW LEARN SY, P1
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Costa EO, 2007, IEEE T RELIAB, V56, P422, DOI 10.1109/TR.2007.903269
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Febrero F, 2014, INFORM SOFTWARE TECH, V56, P839, DOI 10.1016/j.infsof.2014.03.006
   Haykin S., 1998, NEURAL NETWORKS COMP
   Kartalopoulos S.V., 1996, Understanding Neural Networks and Fuzzy Logic: Basic Concepts and Applications
   KARUNANITHI N, 1992, IEEE T SOFTWARE ENG, V18, P563, DOI 10.1109/32.148475
   Khoshogoftaar TM., 1991, Proceedings of the international symposium on software reliability Engineering, P183
   Kohavi R., 1995, INT C ART INT
   KRUSKAL WH, 1952, J AM STAT ASSOC, V47, P583, DOI 10.1080/01621459.1952.10483441
   Lakey PeterB., 1997, SYSTEM SOFTWARE RELI
   Manderna R., 2013, SOFTW ENG TECHNOL, V5, P200
   Mitchell T. M., 1997, MACHINE LEARNING
   Moranda P., 1972, TECH REP
   Moranda P., 1975, P ANN REL MAINT S
   Musa J. D., 1975, IEEE Transactions on Software Engineering, VSE-1, P312, DOI 10.1109/TSE.1975.6312856
   Musa J.D., 1990, SOFTWARE RELIABILITY
   MUSA JD, 1980, SOFTWARE RELIABILITY
   Pai G, 2002, TECH REP
   Pappa GL, 2014, GENET PROGRAM EVOL M, V15, P3, DOI 10.1007/s10710-013-9186-9
   Park J, 2015, J SYST SOFTWARE, V101, P236, DOI 10.1016/j.jss.2014.12.029
   Prudêncio RBC, 2004, PATTERN RECOGN LETT, V25, P911, DOI 10.1016/j.patrec.2004.02.004
   Prudênico RBC, 2004, NEUROCOMPUTING, V61, P121, DOI 10.1016/j.neucom.2004.03.008
   Quinlan J. R., 1993, PROGRAMS MACHINE LEA
   SANTOS P, 2004, P 4 INT C HYBR INT S
   SIEGAL S, 1988, NONPARAMETRIC STATIS
   Sitte R, 1999, IEEE T RELIAB, V48, P285, DOI 10.1109/24.799900
   Smith-Miles KA, 2008, ACM COMPUT SURV, V41, DOI 10.1145/1456650.1456656
   SOUZA GA, 2006, IEEE LATIN AM TEST W, P165
   Sundarkumar GG, 2015, ENG APPL ARTIF INTEL, V37, P368, DOI 10.1016/j.engappai.2014.09.019
   University W., 2007, WEK MACH LERN SOFTW
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Vilalta R, 2005, DATA MINING AND KNOWLEDGE DISCOVERY HANDBOOK, P731, DOI 10.1007/0-387-25465-X_33
   Wu Y, 2013, PROCEEDINGS OF THE BRITISH MACHINE VISION CONFERENCE 2013, DOI 10.5244/C.27.134
   Yamada S, 2014, SPRINGERBRIEF STAT, P1, DOI 10.1007/978-4-431-54565-1
NR 44
TC 3
Z9 4
U1 1
U2 22
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2017
VL 24
IS 3
BP 575
EP 602
DI 10.1007/s10515-016-0195-9
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EW3KK
UT WOS:000402394000004
DA 2024-07-18
ER

PT J
AU Nikanjam, A
   Morovati, MM
   Khomh, F
   Ben Braiek, H
AF Nikanjam, Amin
   Morovati, Mohammad Mehdi
   Khomh, Foutse
   Ben Braiek, Houssem
TI Faults in deep reinforcement learning programs: a taxonomy and a
   detection approach
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Deep reinforcement learning; Software testing; Fault detection; Graph
   transformations
ID GO
AB A growing demand is witnessed in both industry and academia for employing Deep Learning (DL) in various domains to solve real-world problems. Deep reinforcement learning (DRL) is the application of DL in the domain of Reinforcement Learning. Like any software system, DRL applications can fail because of faults in their programs. In this paper, we present the first attempt to categorize faults occurring in DRL programs. We manually analyzed 761 artifacts of DRL programs (from Stack Overflow posts and GitHub issues) developed using well-known DRL frameworks (OpenAI Gym, Dopamine, Keras-rl, Tensorforce) and identified faults reported by developers/users. We labeled and taxonomized the identified faults through several rounds of discussions. The resulting taxonomy is validated using an online survey with 19 developers/researchers. To allow for the automatic detection of faults in DRL programs, we have defined a meta-model of DRL programs and developed DRLinter, a model-based fault detection approach that leverages static analysis and graph transformations. The execution flow of DRLinter consists in parsing a DRL program to generate a model conforming to our meta-model and applying detection rules on the model to identify faults occurrences. The effectiveness of DRLinter is evaluated using 21 synthetic and real faulty DRL programs. For synthetic samples, we injected faults observed in the analyzed artifacts from Stack Overflow and GitHub. The results show that DRLinter can successfully detect faults in both synthesized and real-world examples with a recall of 75% and a precision of 100%.
C1 [Nikanjam, Amin; Morovati, Mohammad Mehdi; Khomh, Foutse; Ben Braiek, Houssem] Polytech Montreal, SWAT Lab, Montreal, PQ, Canada.
C3 Universite de Montreal; Polytechnique Montreal
RP Nikanjam, A (corresponding author), Polytech Montreal, SWAT Lab, Montreal, PQ, Canada.
EM amin.nikanjam@polymtl.ca; mehdi.morovati@polymtl.ca;
   foutse.khomh@polymtl.ca; houssem.ben-braiek@polymtl.ca
RI Nikanjam, Amin/AAT-7832-2020
OI Nikanjam, Amin/0000-0002-0440-6839; Morovati, Mohammad
   Mehdi/0000-0002-7942-4791
FU Natural Sciences and Engineering Research Council of Canada (NSERC);
   Fonds de Recherche du Quebec (FRQ)
FX This work is partly funded by the Natural Sciences and Engineering
   Research Council of Canada (NSERC) and the Fonds de Recherche du Quebec
   (FRQ).
CR Agostinelli F, 2018, LECT NOTES ARTIF INT, V11100, P298, DOI 10.1007/978-3-319-99492-5_13
   Akkaya I., 2019, Solving rubik's cube with a robot hand
   [Anonymous], 2017, ELECT IMAG, DOI [DOI 10.2352/ISSN.2470-1173.2017.19.AVM-023, 10.2352/ISSN.2470-1173.2017.19.AVM-023]
   Bagherzadeh M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P432, DOI 10.1145/3338906.3338939
   Bellemare MG, 2020, NATURE, V588, P77, DOI 10.1038/s41586-020-2939-8
   Borges H, 2016, PROC IEEE INT CONF S, P334, DOI 10.1109/ICSME.2016.31
   Castro P. S., 2018, Dopamine: A research framework for deep reinforcement learning
   Fischer T. G., 2018, FAU Discussion Papers in Economics
   François-Lavet V, 2018, FOUND TRENDS MACH LE, V11, P219, DOI 10.1561/2200000071
   Gandhi D, 2017, IEEE INT C INT ROBOT, P3948, DOI 10.1109/IROS.2017.8206247
   Ghamarian Amir Hossein, 2012, International Journal on Software Tools for Technology Transfer, V14, P15, DOI 10.1007/s10009-011-0186-x
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Hartmann T, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2019), P300, DOI 10.1109/MODELS.2019.00014
   Heckel R, 2006, ELECTRON NOTES THEOR, V148, P187, DOI 10.1016/j.entcs.2005.12.018
   Humbatova N, 2020, PROC INT CONF SOFTW, P1110, DOI 10.1145/3377811.3380395
   Islam MJ, 2020, PROC INT CONF SOFTW, P1135, DOI 10.1145/3377811.3380378
   Islam MJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P510, DOI 10.1145/3338906.3338955
   Kuhnle A, 2017, TENSORFORCE TENSORFL
   Lapan M., 2018, Deep Reinforcement Learning Hands-On: Apply modern RL methods, with deep Q-networks, value iteration, policy gradients, TRPO, AlphaGo Zero and more
   Levine S, 2016, J MACH LEARN RES, V17
   Lillicrap Timothy P, 2015, ARXIV150902971
   Meldrum S, 2017, P 21 INT C EVALUATIO, P180
   Mnih V, 2016, PR MACH LEARN RES, V48
   Mnih V, 2015, NATURE, V518, P529, DOI 10.1038/nature14236
   Morales M., 2019, GROKKING DEEP REINFO
   Moravcík M, 2017, SCIENCE, V356, P508, DOI 10.1126/science.aam6960
   Nemati S, 2019, Reinforcement Learning in Healthcare: A Survey. arXiv
   Plappert M, 2016, keras-rl
   Rensink A, 2003, LECT NOTES COMPUT SC, V3062, P479
   Schrittwieser J, 2020, NATURE, V588, P604, DOI 10.1038/s41586-020-03051-4
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Silver D, 2016, NATURE, V529, P484, DOI 10.1038/nature16961
   Sutton RS, 2018, ADAPT COMPUT MACH LE, P1
   Trujillo M., 2020, DEEPTEST WORKSH ICSE
   Vijayaraghavan G, 2003, Star East, V2003, P1
   WATKINS CJCH, 1992, MACH LEARN, V8, P279, DOI 10.1007/BF00992698
   Zhang B., 2021, PR MACH LEARN RES, P4015
   Zhang TY, 2019, PROC INT SYMP SOFTW, P104, DOI 10.1109/ISSRE.2019.00020
   Zhang YH, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P129, DOI 10.1145/3213846.3213866
NR 39
TC 13
Z9 13
U1 2
U2 19
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 8
DI 10.1007/s10515-021-00313-x
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XS5MV
UT WOS:000732953800001
DA 2024-07-18
ER

PT J
AU Williams, G
   Tushev, M
   Ebrahimi, F
   Mahmoud, A
AF Williams, Grant
   Tushev, Miroslav
   Ebrahimi, Fahimeh
   Mahmoud, Anas
TI Modeling user concerns in Sharing Economy: the case of food delivery
   apps
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Sharing Economy; Domain modeling; Mobile applications
ID STRENGTH DETECTION; MOBILE APPS; SENTIMENT; SUPPORT; REVIEWS
AB Sharing Economy apps, such as Uber, Airbnb, and TaskRabbit, have generated a substantial consumer interest over the past decade. The unique form of peer-to-peer business exchange these apps have enabled has been linked to significant levels of economic growth, helping people in resource-constrained communities to build social capital and move up the economic ladder. However, due to the multidimensional nature of their operational environments, and the lack of effective methods for capturing and describing their end-users' concerns, Sharing Economy apps often struggle to survive. To address these challenges, in this paper, we examine crowd feedback in ecosystems of Sharing Economy apps. Specifically, we present a case study targeting the ecosystem of food delivery apps. Using qualitative analysis methods, we synthesize important user concerns present in the Twitter feeds and app store reviews of these apps. We further propose and intrinsically evaluate an automated procedure for generating a succinct model of these concerns. Our work provides a first step toward building a full understanding of user needs in ecosystems of Sharing Economy apps. Our objective is to provide Sharing Economy app developers with systematic guidelines to help them maximize their market fitness and mitigate their end-users' concerns and optimize their experience.
C1 [Williams, Grant; Tushev, Miroslav; Ebrahimi, Fahimeh; Mahmoud, Anas] Microsoft, Redmond, WA 98052 USA.
C3 Microsoft
RP Mahmoud, A (corresponding author), Microsoft, Redmond, WA 98052 USA.
EM grwillia@microsoft.com; mahmoud@csc.lsu.edu
RI Ebrahimi, Fahimeh/AAU-3670-2021
FU U.S. National Science Foundation [CNS 1951411]; LSU Economic Development
   Assistantships
FX This work was supported in part by the U.S. National Science Foundation
   (Award CNS 1951411) and LSU Economic Development Assistantships awards.
CR ABBOTT RJ, 1983, COMMUN ACM, V26, P882, DOI 10.1145/182.358441
   Acquier A, 2017, TECHNOL FORECAST SOC, V125, P1, DOI 10.1016/j.techfore.2017.07.006
   Ala-Mantila S, 2016, J CLEAN PROD, V135, P356, DOI 10.1016/j.jclepro.2016.05.156
   AlSubaihin A., 2016, INT S EMP SOFTW ENG
   [Anonymous], 1990, DOMAIN ANAL INTRO
   [Anonymous], 2014, 14054 HARV BUS SCH N
   [Anonymous], 2014, NOTRE DAME LAW REV O
   [Anonymous], 2013, INT C SOFTW ENG
   [Anonymous], 2014, HARVARD BUS REV
   [Anonymous], 2010, PROC 10 ANN JOINT C, DOI DOI 10.1145/1816123.1816156
   [Anonymous], 2015, The sharing economy - consumer intelligence series
   Aznar JP, 2017, INTANG CAP, V13, P147, DOI 10.3926/ic.921
   Bellotti V, 2015, CHI 2015: PROCEEDINGS OF THE 33RD ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P1085, DOI 10.1145/2702123.2702272
   Benkler Y, 2017, STRATEG ORGAN, V15, P264, DOI 10.1177/1476127016652606
   Berry DM, 2017, 2017 IEEE 25TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW), P284, DOI 10.1109/REW.2017.25
   Bing L., 2011, International Conference on Information and Knowledge Management, P583
   Bird Steven, 2009, NATURAL LANGUAGE PRO, DOI DOI 10.1007/S10579-010-9124-X
   Bistaffa F., 2015, P 9 ACM C REC SYST R, P139
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Bonciu F, 2016, ROM J EUR AFF, V16, P36
   Bouma G. J., 2009, Normalized (pointwise) mutual information in collocation extraction
   Chen G., 2020, RES SQUARE, DOI [10.21203/rs.3.rs-26460/v1, DOI 10.21203/RS.3.RS-26460/V1]
   Chen N, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P767, DOI 10.1145/2568225.2568263
   Cheng MM, 2016, ANN TOURISM RES, V60, P111, DOI 10.1016/j.annals.2016.07.001
   Chow Y, 2015, PROCEEDINGS OF THE 2015 INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS & MULTIAGENT SYSTEMS (AAMAS'15), P1829
   Church K.W., 1990, WORD ASS NORMS MUTUA, V16, P22
   Cleland-Huang J, 2005, PROC INT CONF SOFTW, P362
   Conger K., 2020, RESULTS ARE SHARING
   Coulton P, 2011, INT J MOB HUM COMPUT, V3, P55, DOI 10.4018/jmhci.2011100104
   Di Sorbo A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P499, DOI 10.1145/2950290.2950299
   Dillahunt Tawanna R., 2017, Proceedings of the ACM on Human-Computer Interaction, V1, DOI 10.1145/3134673
   Dillahunt TR, 2015, CHI 2015: PROCEEDINGS OF THE 33RD ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P2285, DOI 10.1145/2702123.2702189
   Dogru T, 2019, TOURISM MANAGE, V72, P27, DOI 10.1016/j.tourman.2018.11.008
   Elbendak M, 2011, J SYST SOFTWARE, V84, P1209, DOI 10.1016/j.jss.2011.02.025
   Fang LX, 2014, J INEQUAL APPL, DOI 10.1186/1029-242X-2014-190
   Finkelstein A., 2014, RN, V14, P10
   Ge Y., 2017, 22776 NBER
   Glassey O, 2008, KNOWL PROCESS MANAG, V15, P247, DOI 10.1002/kpm.315
   Glinz M, 2007, INT REQUIR ENG CONF, P21, DOI 10.1109/RE.2007.45
   Goel P, 2016, ACM TRANS SPAT ALGOR, V2, DOI 10.1145/2845080
   Gómez M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P567, DOI 10.1109/ICSE.2015.195
   Griffiths T., 2004, FINDING SCI TOPICS, P5228
   Groen EC, 2017, INT REQUIR ENG CONF, P80, DOI 10.1109/RE.2017.73
   Guzman E, 2017, INT REQUIR ENG CONF, P11, DOI 10.1109/RE.2017.88
   Guzman E, 2014, INT REQUIR ENG CONF, P153, DOI 10.1109/RE.2014.6912257
   Harman M., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P108, DOI 10.1109/MSR.2012.6224306
   He W, 2012, 2011 3RD INTERNATIONAL CONFERENCE ON COMPUTER TECHNOLOGY AND DEVELOPMENT (ICCTD 2011), VOL 1, P71
   Hofmann T, 1999, SIGIR'99: PROCEEDINGS OF 22ND INTERNATIONAL CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P50, DOI 10.1145/312624.312649
   Hong L., 2010, P 1 WORKSH SOC MED A, P80, DOI [10.1145/1964858.1964870, DOI 10.1145/1964858.1964870]
   Hossain M, 2020, INT J HOSP MANAG, V87, DOI 10.1016/j.ijhm.2020.102470
   Hüttel A, 2018, J CLEAN PROD, V174, P827, DOI 10.1016/j.jclepro.2017.11.019
   Iacob C, 2013, IEEE WORK CONF MIN S, P41, DOI 10.1109/MSR.2013.6624001
   Inouye D., 2011, Proceedings of the 2011 IEEE Third International Conference on Privacy, Security, Risk and Trust and IEEE Third International Conference on Social Computing (PASSAT/SocialCom 2011), P298, DOI 10.1109/PASSAT/SocialCom.2011.31
   Jansen S, 2009, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE-COMPANION.2009.5070978
   Jha N, 2019, EMPIR SOFTW ENG, V24, P3659, DOI 10.1007/s10664-019-09716-7
   Jha N, 2018, EMPIR SOFTW ENG, V23, P3734, DOI 10.1007/s10664-018-9605-x
   Jongeling R, 2017, EMPIR SOFTW ENG, V22, P2543, DOI 10.1007/s10664-016-9493-x
   Jongeling R, 2015, PROC IEEE INT CONF S, P531, DOI 10.1109/ICSM.2015.7332508
   Khalid H, 2015, IEEE SOFTWARE, V32, P70, DOI 10.1109/MS.2014.50
   Khatiwada S, 2017, INF SOFTW TECHNOL, V93, P45
   Lin B., 2018, INT C SOFTW ENG
   LOVINS JB, 1968, MECH TRANSL, V11, P22
   Maalej W, 2015, INT REQUIR ENG CONF, P116, DOI 10.1109/RE.2015.7320414
   Martin CJ, 2016, ECOL ECON, V121, P149, DOI 10.1016/j.ecolecon.2015.11.027
   Martin W, 2017, IEEE T SOFTWARE ENG, V43, P817, DOI 10.1109/TSE.2016.2630689
   Martin W, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P123, DOI 10.1109/MSR.2015.19
   Matzler K, 2015, MIT SLOAN MANAGE REV, V56, P71
   Mcilroy S, 2017, COMMUN ACM, V60, P62, DOI 10.1145/3141771
   McIlroy S, 2016, EMPIR SOFTW ENG, V21, P1067, DOI 10.1007/s10664-015-9375-7
   Mihalcea R., 2006, P 21 NAT C ART INT, V6, P775
   Mimno D, 2011, EMNLP, P262, DOI DOI 10.5555/2145432.2145462
   Mohagheghi P., 2019, ICSE WORKSH SOFTW QU, P39
   Murillo D, 2017, TECHNOL FORECAST SOC, V125, P66, DOI 10.1016/j.techfore.2017.05.024
   NONAKA I, 1994, ORGAN SCI, V5, P14, DOI 10.1287/orsc.5.1.14
   Pagano D, 2013, S VIS LANG HUM CEN C, P125, DOI 10.1109/RE.2013.6636712
   Palomba F, 2018, J SYST SOFTWARE, V137, P143, DOI 10.1016/j.jss.2017.11.043
   Panichella S., 2015, INT C SOFTW MAINT EV, P767
   Rehurek Radim, 2010, WORKSH NEW CHALL NLP
   Sousa D., 2010, P 2 INT WORKSHOP SEA, P63, DOI [10.1145/1871985.1871996, DOI 10.1145/1871985.1871996]
   Steinwart I, 2002, J MACH LEARN RES, V2, P67, DOI 10.1162/153244302760185252
   Svedic Z., 2015, THESIS
   Thebault-Spieker J, 2017, ACM T COMPUT-HUM INT, V24, DOI 10.1145/3058499
   Thebault-Spieker J, 2015, PROCEEDINGS OF THE 2015 ACM INTERNATIONAL CONFERENCE ON COMPUTER-SUPPORTED COOPERATIVE WORK AND SOCIAL COMPUTING (CSCW'15), P265, DOI 10.1145/2675133.2675278
   Thelwall M, 2012, J AM SOC INF SCI TEC, V63, P163, DOI 10.1002/asi.21662
   Thelwall M, 2010, J AM SOC INF SCI TEC, V61, P2544, DOI 10.1002/asi.21416
   Turney P. D., 2001, P 12 EUR C MACH LEAR, P491, DOI DOI 10.1007/3-540-44795-4_42
   Tussyadiah IP, 2016, J TRAVEL TOUR MARK, V33, P806, DOI 10.1080/10548408.2015.1068263
   Üstün B, 2006, CHEMOMETR INTELL LAB, V81, P29, DOI 10.1016/j.chemolab.2005.09.003
   Villarroel L, 2016, PROC INT CONF SOFTW, P14, DOI 10.1145/2884781.2884818
   Wang S., 2012, Baselines and bigrams: Simple, good sentiment and topic classification, P90
   Williams G, 2017, INT REQUIR ENG CONF, P1, DOI 10.1109/RE.2017.14
   Williams G, 2017, 2017 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMOTION AWARENESS IN SOFTWARE ENGINEERING (SEMOTION 2017), P2, DOI 10.1109/SEmotion.2017.1
   Williams J, 2018, FIRST GRAND CHALLENGE AND WORKSHOP ON HUMAN MULTIMODAL LANGUAGE (CHALLENGE-HML), P64
   Wohlin C., 2012, Experimentation in Software Engineering
   Xu L, 2012, CONTEMPORARY INNOVATION AND DEVELOPMENT IN MANAGEMENT SCIENCE, P12
   Yan X., 2013, P 22 INT C WORLD WID, P1445, DOI DOI 10.1145/2488388.2488514
   Yu ES, 2009, LECT NOTES COMPUT SC, V5600, P99, DOI 10.1007/978-3-642-02463-4_7
   Zervas G, 2017, J MARKETING RES, V54, P687, DOI 10.1509/jmr.15.0204
   Zhao WNX, 2011, LECT NOTES COMPUT SC, V6611, P338, DOI 10.1007/978-3-642-20161-5_34
   Zhu G, 2017, INT J CONTEMP HOSP M, V29, P2218, DOI 10.1108/IJCHM-09-2016-0496
NR 100
TC 26
Z9 30
U1 3
U2 40
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2020
VL 27
IS 3-4
SI SI
BP 229
EP 263
DI 10.1007/s10515-020-00274-7
EA AUG 2020
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA OH9NE
UT WOS:000558421600001
PM 38624448
OA Bronze
DA 2024-07-18
ER

PT J
AU Velez, M
   Jamshidi, P
   Sattler, F
   Siegmund, N
   Apel, S
   Kästner, C
AF Velez, Miguel
   Jamshidi, Pooyan
   Sattler, Florian
   Siegmund, Norbert
   Apel, Sven
   Kastner, Christian
TI ConfigCrusher: towards white-box performance analysis for configurable
   systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Configurable systems; Performance analysis; Static analysis; Dynamic
   analysis
ID PREDICTION; IMPACT; MODEL
AB Stakeholders of configurable systems are often interested in knowing how configuration options influence the performance of a system to facilitate, for example, the debugging and optimization processes of these systems. Several black-box approaches can be used to obtain this information, but they either sample a large number of configurations to make accurate predictions or miss important performance-influencing interactions when sampling few configurations. Furthermore, black-box approaches cannot pinpoint the parts of a system that are responsible for performance differences among configurations. This article proposes ConfigCrusher, a white-box performance analysis that inspects the implementation of a system to guide the performance analysis, exploiting several insights of configurable systems in the process. ConfigCrusher employs a static data-flow analysis to identify how configuration options may influence control-flow statements and instruments code regions, corresponding to these statements, to dynamically analyze the influence of configuration options on the regions' performance. Our evaluation on 10 configurable systems shows the feasibility of our white-box approach to more efficiently build performance-influence models that are similar to or more accurate than current state of the art approaches. Overall, we showcase the benefits of white-box performance analyses and their potential to outperform black-box approaches and provide additional information for analyzing configurable systems.
C1 [Velez, Miguel; Kastner, Christian] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Jamshidi, Pooyan] Univ South Carolina, Columbia, SC 29208 USA.
   [Sattler, Florian; Apel, Sven] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
   [Siegmund, Norbert] Univ Leipzig, Leipzig, Germany.
C3 Carnegie Mellon University; University of South Carolina System;
   University of South Carolina Columbia; Saarland University; Leipzig
   University
RP Velez, M (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM mvelezce@cs.cmu.edu
RI ; Jamshidi, Pooyan/K-2848-2014
OI Apel, Sven/0000-0003-3687-2233; Jamshidi, Pooyan/0000-0002-9342-0703;
   Velez, Miguel/0000-0001-9564-6936
FU NSF [1318808, 1552944, 1717022]; AFRL; DARPA [FA8750-16-2-0042]; German
   Research Foundation [AP 206/7-2, AP 206/11-1, SI 2171/2, SI 2171/3-1]
FX This work has been supported in part by the NSF (Awards 1318808,
   1552944, 1717022), AFRL, DARPA (FA8750-16-2-0042), and the German
   Research Foundation (AP 206/7-2, AP 206/11-1, SI 2171/2, SI 2171/3-1).
   We thank Chu-Pan Wong and Jens Meinicke for their comments during the
   development of this work. We thank the FOSD 2017 and 2018 meeting
   participants for their feedback on the central idea of this work. We
   thank Steven Artz for his help with FlowDroid.
CR Al-Hajjaji M, 2017, ACM SIGPLAN NOTICES, V52, P144, DOI [10.1145/2993236.2993253, 10.1145/3093335.2993253]
   Aldrich J, 2019, IEEE SOFTWARE, V36, P83, DOI 10.1109/MS.2018.2885058
   Andreasen E. S., 2017, P 6 ACM SIGPLAN INT, P31, DOI [10.1145/3088515.3088521, DOI 10.1145/3088515.3088521]
   Angerer F, 2015, IEEE INT CONF AUTOM, P385, DOI 10.1109/ASE.2015.58
   [Anonymous], 2010, P USENIX S OP SYST D
   Apel S., 2013, Feature-Oriented Software Development: Concepts and Implementation
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Austin TH, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P165
   Austin Thomas H., 2009, P ACM SIGPLAN 4 WORK, P113, DOI DOI 10.1145/1554339.1554353
   Avdiienko V, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P426, DOI 10.1109/ICSE.2015.61
   Barros P, 2015, IEEE INT CONF AUTOM, P669, DOI 10.1109/ASE.2015.69
   Becker S, 2009, J SYST SOFTWARE, V82, P3, DOI 10.1016/j.jss.2008.03.066
   Bell J, 2014, ACM SIGPLAN NOTICES, V49, P83, DOI [10.1145/2660193.2660212, 10.1145/2714064.2660212]
   Bertoli M, 2006, INT CONF QUANT EVAL, P119
   Bodden E, 2018, 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING TECHNOLOGIES RESULTS (ICSE-NIER), P45, DOI 10.1145/3183440.3183462
   Bruneton E., 2002, Adaptable and extensible component systems, V30
   Cashman M, 2018, IEEE INT CONF AUTOM, P757, DOI 10.1145/3238147.3240466
   Castro PD, 2015, ACM T ARCHIT CODE OP, V12, DOI 10.1145/2724717
   Chen YM, 2019, PROCEEDINGS OF THE 2019 INTERNATIONAL CONFERENCE ON ROBOTICS, INTELLIGENT CONTROL AND ARTIFICIAL INTELLIGENCE (RICAI 2019), P631, DOI 10.1145/3366194.3366307
   Christakis M, 2016, IEEE INT CONF AUTOM, P332, DOI 10.1145/2970276.2970347
   Cito J, 2018, PROC IEEE ACM INT C, P41, DOI 10.1145/3183440.3183481
   Do LNQ, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P307, DOI 10.1145/3092703.3092705
   Dong Z, 2016, PROC INT SYMP SOFTW, P185, DOI 10.1109/ISSRE.2016.37
   Esfahani N, 2013, IEEE T SOFTWARE ENG, V39, P1467, DOI 10.1109/TSE.2013.37
   Garbervetsky D, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P442, DOI 10.1145/3106237.3106261
   Georges A, 2007, ACM SIGPLAN NOTICES, V42, P57, DOI 10.1145/1297105.1297033
   Gregg B, 2016, COMMUN ACM, V59, P48, DOI 10.1145/2909476
   Guo JM, 2013, IEEE INT CONF AUTOM, P301, DOI 10.1109/ASE.2013.6693089
   Gupta A., 2014, P INT S EMP SOFTW EN, P40
   Halin A, 2019, EMPIR SOFTW ENG, V24, P674, DOI 10.1007/s10664-018-9635-4
   Han X, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962602
   Han X, 2018, PROCEEDINGS OF THE 2018 EURO-ASIA CONFERENCE ON ENVIRONMENT AND CSR: TOURISM, SOCIETY AND EDUCATION SESSION (PART III), P174
   Hao S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P92, DOI 10.1109/ICSE.2013.6606555
   Harchol-Balter Mor, 2013, Performance modeling and design of computer systems: queueing theory in action
   Hervieu A, 2016, INFORM SOFTWARE TECH, V71, P129, DOI 10.1016/j.infsof.2015.11.007
   Hervieu A, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P120, DOI 10.1109/ISSRE.2011.31
   Hoffmann H, 2011, ACM SIGPLAN NOTICES, V46, P199, DOI 10.1145/1961296.1950390
   Hubaux A., 2012, 6 INT WORKSHOP VARIA, P149
   Hutter Frank, 2011, Learning and Intelligent Optimization. 5th International Conference, LION 5. Selected Papers, P507, DOI 10.1007/978-3-642-25566-3_40
   Jabbarvand R., 2016, P 25 INT S SOFTWARE, P425, DOI DOI 10.1145/2931037.2931067
   Jamshidi Pooyan, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P31, DOI 10.1109/SEAMS.2017.11
   Jamshidi P, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P71, DOI 10.1145/3236024.3236074
   Jamshidi P, 2017, IEEE INT CONF AUTOM, P497, DOI 10.1109/ASE.2017.8115661
   Jamshidi P, 2016, I S MOD ANAL SIM COM, P39, DOI 10.1109/MASCOTS.2016.17
   Jiaping Gui, 2016, 2016 IEEE/ACM 5th International Workshop on Green and Sustainable Software (GREENS), P1, DOI 10.1109/GREENS.2016.009
   Jin DP, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P215, DOI 10.1145/2591062.2591191
   Kim C.H. P., 2011, Proceedings of the Tenth International Conference on Aspect-oriented Software Development, P57
   Kim C.H. P., 2013, Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, P257
   Kolesnikov S., 2018, SOFTWARE SYSTEM MODE
   Konietschke F, 2012, ELECTRON J STAT, V6, P738, DOI 10.1214/12-EJS691
   Lerch J, 2015, IEEE INT CONF AUTOM, P619, DOI 10.1109/ASE.2015.9
   Lillack M, 2018, IEEE T SOFTWARE ENG, V44, P1269, DOI 10.1109/TSE.2017.2756048
   Medeiros F, 2016, PROC INT CONF SOFTW, P643, DOI 10.1145/2884781.2884793
   Meinicke J, 2016, IEEE INT CONF AUTOM, P483, DOI 10.1145/2970276.2970322
   Montgomery D.C., 2006, DESIGN ANAL EXPT, DOI DOI 10.1198/TECH.2006.S372
   Mostafa S, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P23, DOI 10.1145/3092703.3092725
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Oh J, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P61, DOI 10.1145/3106237.3106273
   Olaechea R, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P92, DOI 10.1145/2648511.2648521
   Pauck F, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P331, DOI 10.1145/3236024.3236029
   Petkovich J., 2017, P 8 ACM SPEC INT C P, P39, DOI [10.1145/3030207.3030216, DOI 10.1145/3030207.3030216]
   Qiu LN, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P176, DOI 10.1145/3213846.3213873
   Rabkin A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P131, DOI 10.1145/1985793.1985812
   Reisner E., 2010, P ACM IEEE INT C SOF, V1, P445, DOI DOI 10.1145/1806799.1806864
   Richard Kuhn D., 2013, Introduction to combinatorial testing
   Sarkar A, 2015, IEEE INT CONF AUTOM, P342, DOI 10.1109/ASE.2015.45
   Saumont P.-Y, 2017, LAZY COMPUTATIONS JA
   Siegmund N, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P284, DOI 10.1145/2786805.2786845
   Siegmund N, 2014, ACM SIGPLAN NOTICES, V49, P95, DOI [10.1145/2517208.2517209, 10.1145/2637365.2517209]
   Siegmund N, 2012, SOFTWARE QUAL J, V20, P487, DOI 10.1007/s11219-011-9152-9
   Siegmund N, 2012, PROC INT CONF SOFTW, P167, DOI 10.1109/ICSE.2012.6227196
   Souto S, 2018, J SYST SOFTWARE, V137, P733, DOI 10.1016/j.jss.2017.08.010
   Souto S, 2017, PROC INT CONF SOFTW, P632, DOI 10.1109/ICSE.2017.64
   Späth J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133923
   Nguyen T, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P655, DOI 10.1145/2950290.2950311
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Velez M., 2019, CONFIGCRUSHER WHITE
   Wang B, 2013, IEEE INT SYMP PHASE, P89, DOI 10.1109/ARRAY.2013.6731806
   Wang S, 2018, ACM SIGPLAN NOTICES, V53, P154, DOI [10.1145/3173162.3173206, 10.1145/3296957.3173206]
   Wang Y, 2019, IEEE INT C MICROELEC, P18, DOI [10.1109/ICMTS.2019.8730947, 10.1109/icmts.2019.8730947]
   Weisenburger Pascal, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P140, DOI 10.1109/SEAMS.2017.10
   Xu TY, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P244, DOI 10.1145/2517349.2522727
   Xu TY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P307, DOI 10.1145/2786805.2786852
   Yu TT, 2018, EMPIR SOFTW ENG, V23, P3034, DOI 10.1007/s10664-017-9578-1
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
   Zhu YQ, 2017, PROCEEDINGS OF THE 2017 SYMPOSIUM ON CLOUD COMPUTING (SOCC '17), P338, DOI 10.1145/3127479.3128605
NR 87
TC 18
Z9 19
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2020
VL 27
IS 3-4
SI SI
BP 265
EP 300
DI 10.1007/s10515-020-00273-8
EA AUG 2020
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OH9NE
UT WOS:000556165500001
DA 2024-07-18
ER

PT J
AU Kleffmann, M
   Röhl, S
   Book, M
   Gruhn, V
AF Kleffmann, Markus
   Roehl, Sebastian
   Book, Matthias
   Gruhn, Volker
TI Evaluation of a traceability approach for informal freehand sketches
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Sketches; Electronic whiteboards; Traceability; Cooperative design
ID SOFTWARE-DEVELOPMENT; SOURCE-CODE; DESIGN; LINKS; DOCUMENTATION;
   COLLABORATION; WHITEBOARD; DIAGRAMS; SUPPORT; MODEL
AB Most engineers and designers prefer to use large drawing boards such as whiteboards or flip charts for the initial collaborative sketching of a system's models. Large interactive displays have recently begun to replace these physical drawing boards, blurring the line between freehand sketching and toolkit-aided modeling. While digital boards offer more flexibility in drawing and navigating models, they must also provide appropriate cognitive support for frequent shifts of focus and navigation between related artifacts. Furthermore, automated assistance in uncovering potential inconsistencies and contradictions between model sketches would be beneficial so that users do not get lost amid their sketches. In this paper, we discuss an approach to create relationships between the elements of informal hand-drawn sketches on large interactive displays by combining fuzzy search with classic information retrieval techniques. The identification and maintenance of relationships is particularly challenging because we are working with hand-drawn and hand-lettered model sketches rather than the syntactically clean models created with digital modeling toolkits. We evaluated our approach by analyzing 89 model sketches from 16 industry projects and found that it identifies relations between sketched model elements with high precision and recall.
C1 [Kleffmann, Markus; Roehl, Sebastian; Gruhn, Volker] Univ Duisburg Essen, Paluno, Essen, Germany.
   [Book, Matthias] Univ Iceland, Fac Ind Engn Mech Engn & Comp Sci, Reykjavik, Iceland.
C3 University of Duisburg Essen; University of Iceland
RP Kleffmann, M (corresponding author), Univ Duisburg Essen, Paluno, Essen, Germany.
EM markus.kleffmann@paluno.uni-due.de; sebastian.roehl@paluno.uni-due.de;
   book@hi.is; volker.gruhn@paluno.uni-due.de
CR Andrews C, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P55
   [Anonymous], 2009, Found. Trends Hum.-Comput. Interact, DOI DOI 10.1561/1100000013
   [Anonymous], 2012, Software and Systems Traceability
   [Anonymous], 2013, PROC EICS 13
   [Anonymous], 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering
   Anslow C, 2011, P WORKSH DAT EXPL IN, P20
   Anslow C., 2010, HUMAN ASPECTS SOFTWA, V10, DOI 10.1145/1938595.1938603
   Anslow C, 2010, SOFTVIS 2010: PROCEEDINGS OF THE 2010 INTERNATIONAL SYMPOSIUM ON SOFTWARE VISUALIZATION, P25
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Asuncion HU, 2009, 2009 ICSE WORKSHOP ON TRACEABILITY IN EMERGING FORMS OF SOFTWARE ENGINEERING (TEFSE), P1, DOI 10.1109/TEFSE.2009.5069574
   Asuncion HU, 2010, 2010 ACM IEEE 32 INT, V1, P95
   Bailey BrianP., 2003, P C HUMAN FACTORS CO, P313, DOI DOI 10.1145/642611.642666
   Ball R., 2008, Graphics Interface, P9
   Ball R, 2007, CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1 AND 2, P191
   Bartelt C., 2013, P WORKSH MOD THEIR R
   Bi XJ, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1005
   Blagojevic Rachel, 2010, SBIM, V10, P79
   Book Matthias, 2013, 2013 39th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P53, DOI 10.1109/SEAA.2013.25
   Book M., 2016, TAMED AGILITY PRAGMA
   Book M, 2014, LECT NOTES BUS INF P, V166, P115
   Caetano Anabela, 2002, SSS 02, P9
   Chen Q, 2003, 200S IEEE SYMPOSIUM ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, P219
   Chen Q, 2008, SOFTWARE PRACT EXPER, V38, P961, DOI 10.1002/spe.856
   Chen XF, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P912, DOI 10.1145/1985793.1985943
   CHERUBINI M, 2007, P SIGCHI C HUM FACT, P557, DOI DOI 10.1145/1240624.1240714
   Cleland-Huang J, 2003, IEEE T SOFTWARE ENG, V29, P796, DOI 10.1109/TSE.2003.1232285
   Covi L. M., 1998, P COOP BUILD INT INF
   Coyette A, 2007, LECT NOTES COMPUT SC, V4401, P160
   Damm C. H., 2000, CHI 2000 Conference Proceedings. Conference on Human Factors in Computing Systems. CHI 2000. The Future is Here, P518, DOI 10.1145/332040.332488
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Dekel U, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P261
   DIN, 2011, 50082011 DIN
   Drivalos-Matragkas N., 2010, Proceedings of the 6th ECMFA Traceability Workshop. ECMFA-TW'10, P23, DOI DOI 10.1145/1814392.1814396
   Faruqui M., 2016, P 1 WORKSH EV VECT S
   Ferguson E., 1994, ENG MINDS EYE
   Frakes WB., 1992, Information retrieval: Data structures and algorithms
   Galvao I., 2007, P 11 IEEE INT ENT DI
   Goel V., 1995, Sketches of thought
   Grapenthin S., 2013, Proceedings of the 31st ACM international conference on Design of communication, New York, NY, USA, P71, DOI DOI 10.1145/2507065.2507087
   Grundy J, 2007, PROC INT CONF SOFTW, P282
   HALLER M, 2010, P SIGCHI C HUM FACT, P609, DOI DOI 10.1145/1753326.1753418
   Hammond T., 2006, ACM SIGGRAPH 2006 CO, DOI 10.1145/1185657.1185786
   Hardy J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P812, DOI 10.1145/1985793.1985910
   Hebig R., 2011, P 4 INT WORKSH MULT, V42
   Hesenius M, 2016, 2016 INTERNATIONAL CONFERENCE ON COLLABORATION TECHNOLOGIES AND SYSTEMS (CTS), P327, DOI [10.1109/CTS.2016.0066, 10.1109/CTS.2016.64]
   Hosseini-Khayat Ali, 2011, P 3 ACM SIGCHI S ENG, P289, DOI [10.1145/1996461.1996538, DOI 10.1145/1996461.1996538]
   Kleffmann M., 2014, P 6 INT WORKSH SOC S, P9
   Kleffmann M, 2015, 2015 IEEE/ACM 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE AND SYSTEMS TRACEABILITY, P1, DOI 10.1109/SST.2015.8
   Kleffmann M, 2014, IEEE INT ENTERP, P191, DOI 10.1109/EDOCW.2014.37
   Kleffmann M, 2013, 2013 7TH INTERNATIONAL WORKSHOP ON TRACEABILITY IN EMERGING FORMS OF SOFTWARE ENGINEERING (TEFSE), P23, DOI 10.1109/TEFSE.2013.6620150
   Klefmann Markus, 2014, P 29 ANN ACM S APPL, P161, DOI DOI 10.1145/2554850.2563668
   Klock S., 2011, 6th international workshop on Traceability in emerging forms of software engineering, P24
   KRAUT RE, 1995, COMMUN ACM, V38, P69, DOI 10.1145/203330.203345
   Landay JA, 2001, COMPUTER, V34, P56, DOI 10.1109/2.910894
   LARKIN JH, 1987, COGNITIVE SCI, V11, P65, DOI 10.1016/S0364-0213(87)80026-5
   LaToza T. D., 2006, 28th International Conference on Software Engineering Proceedings, P492, DOI 10.1145/1134285.1134355
   Letelier P., P 1 INT WORKSH TRAC, P32
   Levenshtein V. I., 1966, SOV PHYS DOKL, V10, P707
   Lin J., 2002, Conference Proceedings. Conference on Human Factors in Computing Systems. CHI 2002, P307, DOI 10.1145/503376.503431
   Mader Patrick, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P49, DOI 10.1109/ASE.2008.15
   Mäder P, 2009, LECT NOTES COMPUT SC, V5562, P174, DOI 10.1007/978-3-642-02674-4_13
   Mangano N, 2014, 32ND ANNUAL ACM CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2014), P331, DOI 10.1145/2556288.2557411
   Mangano N, 2015, IEEE T SOFTWARE ENG, V41, P135, DOI 10.1109/TSE.2014.2362924
   Mangano N, 2012, AUTOMAT SOFTW ENG, V19, P381, DOI 10.1007/s10515-012-0104-9
   Marcus A, 2005, INT J SOFTW ENG KNOW, V15, P811, DOI 10.1142/S0218194005002543
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Marcus A., 2005, P 3 INT WORKSH TRAC, P56, DOI DOI 10.1145/1107656.1107669
   Mark G, 2002, COMMUN ACM, V45, P89, DOI 10.1145/508448.508453
   Memmel T., 2008, P 7 INT C COMP AID D, P161
   Murta LGP, 2008, AUTOMAT SOFTW ENG, V15, P75, DOI 10.1007/s10515-007-0020-6
   Myers B, 2008, 2008 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P177, DOI 10.1109/VLHCC.2008.4639081
   Mynatt Elizabeth D., 1999, P SIGCHI C HUM FACT, P346, DOI DOI 10.1145/302979.303108
   Obrenovic Z, 2011, ACM T COMPUT-HUM INT, V18, DOI 10.1145/1959022.1959026
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   Petre M, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P233, DOI 10.1145/1595696.1595731
   Plimmer Beryl., 2004, CHI '04: CHI '04 extended abstracts on Human factors in computing systems, P1337
   Pye D., 2000, The Nature and Aesthetics of Design
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Sapna P.G., 2007, P 10 INT C INFORM TE, P217
   Schütze M, 2003, RES ENG DES, V14, P89, DOI 10.1007/s00163-002-0028-7
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Settimi R, 2004, 7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, P49, DOI 10.1109/IWPSE.2004.1334768
   SHARIF B., 2011, Proceedings of the 6th International Workshop on Traceability in Emerging Forms of Software Engineering (TEFSE), P67, DOI DOI 10.1145/1987856.1987872
   Shipman F. M.  III, 1999, Computer Supported Cooperative Work: The Journal of Collaborative Computing, V8, P333, DOI 10.1023/A:1008716330212
   Singhal A., 2001, IEEE DATA ENG B, V24, P35
   Soukoreff R.W., 2001, EXTENDED ABSTRACTS A, P319, DOI DOI 10.1145/634067.634256
   Spanoudakis G., 2002, ACM INT C PROCEEDING, P135, DOI [10.1145/568760.568786, DOI 10.1145/568760.568786]
   Spanoudakis G, 2001, HDB SOFTWARE ENG KNO, VI, P329
   Stapleton G, 2015, ACM T INTEL SYST TEC, V6, DOI 10.1145/2631925
   STEFIK M, 1987, COMMUN ACM, V30, P32, DOI 10.1145/7885.7887
   STEFIK M, 1987, ACM T INFORM SYST, V5, P147, DOI 10.1145/27636.28056
   Streitz Norbert., 2002, CHI'02 extended abstracts on Human factors in computing systems, CHI EA'02, P506
   Teasley S., 2000, CSCW 2000. ACM 2000 Conference on Computer Supported Cooperative Work, P339, DOI 10.1145/358916.359005
   Turney PD, 2010, J ARTIF INTELL RES, V37, P141, DOI 10.1613/jair.2934
   Tversky B, 2003, HUMAN BEHAVIOUR IN DESIGN: INDIVIDUALS, TEAMS, TOOLS, P79
   WAGNER RA, 1974, J ACM, V21, P168, DOI 10.1145/321796.321811
   Wuest D., 2012, INT C MOB COMP APPL, P225, DOI DOI 10.1007/978-3-642-36632-1_13
   Yatani K., 2009, Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, P995, DOI [DOI 10.1145/1518701.1518853, 10.1145/1518701.1518853]
   Zannier C, 2007, LECT NOTES COMPUT SC, V4536, P1
NR 99
TC 2
Z9 2
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2018
VL 25
IS 1
BP 1
EP 43
DI 10.1007/s10515-017-0221-6
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS2DV
UT WOS:000419589600001
DA 2024-07-18
ER

PT J
AU Ouni, A
   Kessentini, M
   Sahraoui, H
   Boukadoum, M
AF Ouni, Ali
   Kessentini, Marouane
   Sahraoui, Houari
   Boukadoum, Mounir
TI Maintainability defects detection and correction: a multi-objective
   approach
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Maintainability defects; Software maintenance; Search-based software
   engineering; Multi-objective optimization; By example; Effort
AB Software defects often lead to bugs, runtime errors and software maintenance difficulties. They should be systematically prevented, found, removed or fixed all along the software lifecycle. However, detecting and fixing these defects is still, to some extent, a difficult, time-consuming and manual process. In this paper, we propose a two-step automated approach to detect and then to correct various types of maintainability defects in source code. Using Genetic Programming, our approach allows automatic generation of rules to detect defects, thus relieving the designer from a fastidious manual rule definition task. Then, we correct the detected defects while minimizing the correction effort. A correction solution is defined as the combination of refactoring operations that should maximize as much as possible the number of corrected defects with minimal code modification effort. We use the Non-dominated Sorting Genetic Algorithm (NSGA-II) to find the best compromise. For six open source projects, we succeeded in detecting the majority of known defects, and the proposed corrections fixed most of them with minimal effort.
C1 [Kessentini, Marouane] Missouri Univ Sci & Technol, CS, Rolla, MO 65409 USA.
   [Ouni, Ali; Sahraoui, Houari] Univ Montreal, DIRO, Montreal, PQ, Canada.
   [Boukadoum, Mounir] Univ Quebec, DI, Montreal, PQ H3C 3P8, Canada.
C3 University of Missouri System; Missouri University of Science &
   Technology; Universite de Montreal; University of Quebec; University of
   Quebec Montreal
RP Kessentini, M (corresponding author), Missouri Univ Sci & Technol, CS, Rolla, MO 65409 USA.
EM ouniali@iro.umontreal.ca; marouanek@mst.edu; sahraoui@iro.umontreal.ca;
   Boukadoum.mounir@uqam.ca
RI Ouni, Ali/Y-8280-2019
OI Ouni, Ali/0000-0003-4708-0362
CR Alikacem H., 2006, ACT 12 C LMO
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   Boehm BW., 2000, SOFTWARE COST ESTIMA, VII
   Boehm BW., 1981, Software Engineering Economics
   BRATKO I, 1995, COMMUN ACM, V38, P65, DOI 10.1145/219717.219771
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   DAVIS R, 1977, ARTIF INTELL, V8, P15, DOI 10.1016/0004-3702(77)90003-0
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Dhambri K, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P279
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gaffney J.E., 1981, P ACM 81 C, P126, DOI [10.1145/800175.809854, DOI 10.1145/800175.809854]
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   Harman M, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P58, DOI 10.1109/METRIC.2004.1357891
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1106
   HECKEL R, 1995, THESIS TU BERLIN
   Kapser C, 2006, WORK CONF REVERSE EN, P19
   Kataoka Y, 2001, PROC IEEE INT CONF S, P736, DOI 10.1109/ICSM.2001.972794
   Kessentini M., 2010, P INT C AUT SOFTW EN
   Khomh F., 2009, P ICQS 09
   Kothari SC, 2004, SOFTWARE QUAL J, V12, P99, DOI 10.1023/B:SQJO.0000024058.90885.6a
   Koza J.R., 1992, GENETIC PROGRAMMING, VVolume 1
   Lewerentz C., 1996, P IEEE S SOFTW METR
   Liu H, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P265, DOI 10.1145/1595696.1595738
   Marinescu R., P ICM 04, P350
   Mehta A, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P417, DOI 10.1109/ICSE.2002.1007987
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Menzies T, 2006, IEEE T SOFTWARE ENG, V32, P883, DOI 10.1109/TSE.2006.114
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   O'Keeffe M, 2008, J SOFTW MAINT EVOL-R, V20, P345, DOI 10.1002/smr.378
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Raedt D., 1996, ADV INDUCTIVE LOGIC
   Sahraoui H. A., 2000, P INT C SOFTW MAINT
   Seng O, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1909
   Zitzler E, 1998, LECT NOTES COMPUT SC, V1498, P292, DOI 10.1007/BFb0056872
NR 35
TC 105
Z9 120
U1 0
U2 14
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2013
VL 20
IS 1
BP 47
EP 79
DI 10.1007/s10515-011-0098-8
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 059MN
UT WOS:000312709700003
DA 2024-07-18
ER

PT J
AU Li, M
   Zhang, HY
   Wu, RX
   Zhou, ZH
AF Li, Ming
   Zhang, Hongyu
   Wu, Rongxin
   Zhou, Zhi-Hua
TI Sample-based software defect prediction with active and semi-supervised
   learning
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software defect prediction; Sampling; Quality assurance; Machine
   learning; Active semi-supervised learning
ID STATIC CODE ATTRIBUTES; CLASSIFICATION; FRAMEWORK
AB Software defect prediction can help us better understand and control software quality. Current defect prediction techniques are mainly based on a sufficient amount of historical project data. However, historical data is often not available for new projects and for many organizations. In this case, effective defect prediction is difficult to achieve. To address this problem, we propose sample-based methods for software defect prediction. For a large software system, we can select and test a small percentage of modules, and then build a defect prediction model to predict defect-proneness of the rest of the modules. In this paper, we describe three methods for selecting a sample: random sampling with conventional machine learners, random sampling with a semi-supervised learner and active sampling with active semi-supervised learner. To facilitate the active sampling, we propose a novel active semi-supervised learning method ACoForest which is able to sample the modules that are most helpful for learning a good prediction model. Our experiments on PROMISE datasets show that the proposed methods are effective and have potential to be applied to industrial practice.
C1 [Zhang, Hongyu; Wu, Rongxin] Tsinghua Univ, MOE Key Lab Informat Syst Secur, Beijing 100084, Peoples R China.
   [Li, Ming; Zhou, Zhi-Hua] Nanjing Univ, Natl Key Lab Novel Software Technol, Nanjing 210093, Jiangsu, Peoples R China.
C3 Tsinghua University; Nanjing University
RP Zhang, HY (corresponding author), Tsinghua Univ, MOE Key Lab Informat Syst Secur, Beijing 100084, Peoples R China.
EM lim@lamda.nju.edu.cn; hongyu@tsinghua.edu.cn;
   wrx09@mails.tsinghua.edu.cn; zhouzh@lamda.nju.edu.cn
RI zhang, hongyu/ABC-3702-2021; wu, rongxin/F-3999-2016
OI zhang, hongyu/0000-0002-3063-9425; Wu, Rongxin/0000-0002-4648-3795
FU National Science Foundation of China [60903103, 61073006, 61021062];
   Tsinghua University [2010THZ0]
FX This research is supported by National Science Foundation of China
   (60903103, 61073006, 61021062) and the Tsinghua University research
   project 2010THZ0. The authors would like to thank anonymous reviewers
   for their suggestions and Wei-Wei Tu for proof-reading.
CR Angluin D., 1988, Machine Learning, V2, P343, DOI 10.1007/BF00116829
   [Anonymous], 2000, Proceedings of the 17th International Conference on Machine Learning (ICML 2000)
   [Anonymous], 1530 U WISC DEP COMP
   [Anonymous], P 12 INT C MACH LEAR
   [Anonymous], 2004, ADV NEURAL INFORM PR
   [Anonymous], 2009, P 6 C EMAIL ANTI SPA
   [Anonymous], P INT C PRED MOD SOF
   Balcan MF, 2007, LECT NOTES COMPUT SC, V4539, P35, DOI 10.1007/978-3-540-72927-3_5
   Belkin M, 2006, J MACH LEARN RES, V7, P2399
   Blum A., 1998, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, P92, DOI 10.1145/279943.279962
   Breiman L., 2001, Mach. Learn., V45, P5
   Chapelle O., 2006, SEMISUPERVISED LEARN
   Chapelle O., 2005, Proceedings of the tenth international workshop on artificial intelligence and statistics, P57
   Freund Y, 1997, MACH LEARN, V28, P133, DOI 10.1023/A:1007330508534
   Gibbons J.D., 1985, NONPARAMETRIC STAT I
   Goldman S., 2000, ICML, P327
   Grandvalet Y., 2005, CAP, V367, P281
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   Jiang YA, 2011, J COMPUT SCI TECH-CH, V26, P328, DOI 10.1007/s11390-011-9439-0
   Joachims T, 1999, MACHINE LEARNING, PROCEEDINGS, P200
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Koru AG, 2005, IEEE SOFTWARE, V22, P23, DOI 10.1109/MS.2005.149
   Lafferty J. D., 2003, P INT C MACH LEARN, P912, DOI DOI 10.5555/3041838.3041953
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Lewis D. D., 1994, SIGIR '94. Proceedings of the Seventeenth Annual International ACM-SIGIR Conference on Research and Development in Information Retrieval, P3
   Lewis D.D., 1994, MACH LEARN P 1994, P148
   Li M, 2007, IEEE T SYST MAN CY A, V37, P1088, DOI 10.1109/TSMCA.2007.904745
   Li M, 2009, INFORM PROCESS MANAG, V45, P341, DOI 10.1016/j.ipm.2008.11.002
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Miller DJ, 1997, ADV NEUR IN, V9, P571
   Muslea I., 2002, ICML, P435
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Nigam K, 2000, MACH LEARN, V39, P103, DOI 10.1023/A:1007692713085
   Seung H. S., 1992, Proceedings of the Fifth Annual ACM Workshop on Computational Learning Theory, P287, DOI 10.1145/130385.130417
   SHAHSHAHANI BM, 1994, IEEE T GEOSCI REMOTE, V32, P1087, DOI 10.1109/36.312897
   Steedman M, 2003, EACL 2003: 10TH CONFERENCE OF THE EUROPEAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P331
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   WeiWang Zhi-Hua, 2008, P 25 INT C MACHINE L, P1152
   Zhang H., 2010, P 26 IEEE INT C SOFT, P1
   Zhang HY, 2007, 13TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P93, DOI 10.1109/PRDC.2007.28
   Zhang HY, 2007, IEEE T SOFTWARE ENG, V33, P635, DOI 10.1109/TSE.2007.70706
   Zhang HY, 2009, PROC IEEE INT CONF S, P274, DOI 10.1109/ICSM.2009.5306304
   Zhang HY, 2010, PROCEEDINGS OF THE ELEVENTH WEST LAKE INTERNATIONAL CONFERENCE ON SMALL & MEDIUM BUSINESS, P14
   Zhou ZH, 2005, IEEE T KNOWL DATA EN, V17, P1529, DOI 10.1109/TKDE.2005.186
   Zhou ZH, 2007, IEEE T KNOWL DATA EN, V19, P1479, DOI [10.1109/TKDE.2007.190644, 10.1109/TKDE.2007.190644.]
   Zhou ZH, 2006, ACM T INFORM SYST, V24, P219, DOI 10.1145/1148020.1148023
   Zhou ZH, 2009, LECT NOTES COMPUT SC, V5519, P529, DOI 10.1007/978-3-642-02326-2_53
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
   Zimmermann T, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P531, DOI 10.1145/1368088.1368161
NR 49
TC 128
Z9 155
U1 1
U2 35
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2012
VL 19
IS 2
SI SI
BP 201
EP 230
DI 10.1007/s10515-011-0092-1
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 872HA
UT WOS:000298798700004
DA 2024-07-18
ER

PT J
AU Edwards, A
   Tucker, S
   Demsky, B
AF Edwards, Alex
   Tucker, Sean
   Demsky, Brian
TI AFID: an automated approach to collecting software faults
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Fault collection
AB We present a new approach for creating repositories of real software faults. We have developed a tool, the Automatic Fault IDentification Tool (AFID), that implements this approach. AFID records both a fault revealing test case and a faulty version of the source code for any crashing faults that the developer discovers and a fault correcting source code change for any crashing faults that the developer corrects. The test cases are a significant contribution, because they enable new research that explores the dynamic behaviors of the software faults. AFID uses an operating system level monitoring mechanism to monitor both the compilation and execution of the application. This technique makes it straightforward for AFID to support a wide range of programming languages and compilers.
   We present our experience using AFID in a controlled case study and in a real development environment to collect software faults in the internal development of our group's compiler. The case studies collected several real software faults and validated the basic approach. The longer term internal study revealed weaknesses in using the original version of AFID for real development. This experience led to a number of refinements to the tool for use in real software development. We have collected over 20 real software faults in large programs and continue to collect software faults.
C1 [Demsky, Brian] Univ Calif Irvine, Dept Elect Engn & Comp Sci, Irvine, CA 92697 USA.
   [Tucker, Sean] Western Digital, Irvine, CA 92612 USA.
   [Edwards, Alex] Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
C3 University of California System; University of California Irvine;
   Western Digital Corporation; University of California System; University
   of California Los Angeles
RP Demsky, B (corresponding author), Univ Calif Irvine, Dept Elect Engn & Comp Sci, Irvine, CA 92697 USA.
EM bdemsky@uci.edu
FU National Science Foundation [CCF-0846195, CCF-0725350]; Direct For
   Computer & Info Scie & Enginr [0846195] Funding Source: National Science
   Foundation; Division of Computing and Communication Foundations
   [0846195] Funding Source: National Science Foundation
FX This research was supported by the National Science Foundation under
   grants CCF-0846195 and CCF-0725350. We would like to thank the anonymous
   reviewers for their helpful comments.
CR [Anonymous], 1999, PTRACE 2 LINUX PROGR
   [Anonymous], P ACM SIGM S PAR DIS
   Cadar C, 2005, LECT NOTES COMPUT SC, V3639, P2
   CHACON S, 2010, GIT FAST VERSION CON
   Collins-Sussman B., 2002, Linux J, V2002, P3
   Dallmeier V., 2007, ASE, P433
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   EDWARDS A, 2008, P 2008 INT S SOFTW T, P179
   LEBLANC TJ, 1987, IEEE T COMPUT, V36, P471, DOI 10.1109/TC.1987.1676929
   LIBLIT B, 2003, P ACM SIGPLAN 2003 C, P141
   LIVSHITS B, 2005, ACM SIGSOFT S FDN SO, P296
   Lu Shan, 2005, WORKSHOP EVALUATION, P1, DOI 10.1.1.134.8941
   Nagappan N., 2006, P 28 INT C SOFTW ENG, P452, DOI DOI 10.1145/1134285.1134349
   Neuhaus S, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P529
   SEKAR R, 2003, MODEL CARRYING CODE
   SLIWERSKI J, 2005, P 2005 INT WORKSH MI, P1, DOI DOI 10.1145/1083142.1083147
   Some RR, 2001, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P501, DOI 10.1109/DSN.2001.941435
   SPACCO J, 2005, P MIN SOFTW REP WORK
   SPILLANE RP, 2007, P 2007 WORKSH EXP CO, P1
   Steven J., 2000, PROC INT S SOFTWARE, P158
   WILLIAMS CC, 2004, P 1 INT WORKSH MIN S, P70
   Zeller A, 1999, LECT NOTES COMPUT SC, V1687, P253, DOI 10.1145/318774.318946
NR 22
TC 2
Z9 3
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2010
VL 17
IS 3
BP 347
EP 372
DI 10.1007/s10515-010-0068-6
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 608HD
UT WOS:000278573200005
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Kou, HB
   Johnson, PM
   Erdogmus, H
AF Kou, Hongbing
   Johnson, Philip M.
   Erdogmus, Hakan
TI Operational definition and automated inference of test-driven
   development with Zorro
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Test driven development; Hackystat; Process measurement
AB Test-driven development (TDD) is a style of development named for its most visible characteristic: the design and implementation of test cases prior to the implementation of the code required to make them pass. Many claims have been made for TDD: that it can improve implementation as well as design quality, that it can improve productivity, that it results in 100% coverage, and so forth. However, research to validate these claims has yielded mixed and sometimes contradictory results. We believe that at least part of the reason for these results stems from differing interpretations of the TDD development style, along with an inability to determine whether programmers actually follow whatever definition of TDD is in use.
   Zorro is a system designed to automatically determine whether a developer is complying with an operational definition of Test-Driven Development (TDD) practices. Automated recognition of TDD can benefit the software development community in a variety of ways, from inquiry into the "true nature" of TDD, to pedagogical aids to support the practice of test-driven development, to support for more rigorous empirical studies on the effectiveness of TDD in both laboratory and real world settings.
   This paper describes the Zorro system, its operational definition of TDD, the analyses made possible by Zorro, two empirical evaluations of the system, and an attempted case study. Our research shows that it is possible to define an operational definition of TDD that is amenable to automated recognition, and illustrates the architectural and design issues that must be addressed in order to do so. Zorro has implications not only for the practice of TDD, but also for software engineering "micro-process" definition and recognition through its parent framework, Software Development Stream Analysis.
C1 [Kou, Hongbing; Johnson, Philip M.] Univ Hawaii, Collaborat Software Dev Lab, Dept Informat & Comp Sci, Honolulu, HI 96822 USA.
   [Erdogmus, Hakan] Kalemun Res Inc, Ottawa, ON K1V 1R9, Canada.
C3 University of Hawaii System
RP Johnson, PM (corresponding author), Univ Hawaii, Collaborat Software Dev Lab, Dept Informat & Comp Sci, Honolulu, HI 96822 USA.
EM hongbing@hawaii.edu; johnson@hawaii.edu; hakan.erdogmus@computer.org
RI Erdogmus, Hakan/HTQ-8803-2023
OI Erdogmus, Hakan/0000-0002-7987-5621
FU Collaborative Software Development Laboratory; National Research Council
   of Canada
FX We gratefully acknowledge the members of the Collaborative Software
   Development Laboratory who supported this research, as well as the
   student and industrial participants in the evaluation. The National
   Research Council of Canada supported the initial stages of this research
   under a cooperative agreement. Dr. Burak Turhan of University of Oulu,
   Finland, provided valuable comments and information regarding tool
   support for TDD adoption.
CR [Anonymous], 2007, ESEM 07 INT S EMP SO
   [Anonymous], ESEM 07
   [Anonymous], 2003, TEST DRIVEN DEV EXAM
   [Anonymous], INT S EMP SOFTW ENG
   Beck RJ, 2000, MUSIC PERCEPT, V18, P87
   Cook J. E., 1996, THESIS U COLORADO
   COOK JE, 1995, PROC INT CONF SOFTW, P73, DOI 10.1145/225014.225021
   CURTIS B, 1992, COMMUN ACM, V35, P75, DOI 10.1145/130994.130998
   Damm LO, 2006, J SYST SOFTWARE, V79, P1001, DOI 10.1016/j.jss.2005.10.015
   Erdogmus H, 2005, IEEE T SOFTWARE ENG, V31, P226, DOI 10.1109/TSE.2005.37
   Friedman-Hill E., 2003, JESS ACTION
   George B, 2004, INFORM SOFTWARE TECH, V46, P337, DOI 10.1016/j.infsof.2003.09.011
   GEORGE B, 2003, ACM S APPL COMPUTING, V3, P23
   Geras A, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P405, DOI 10.1109/METRIC.2004.1357925
   Janzen D, 2005, COMPUTER, V38, P43, DOI 10.1109/MC.2005.314
   Janzen DS, 2008, IEEE SOFTWARE, V25, P77, DOI 10.1109/MS.2008.34
   Jeffries R., 2000, EXTREME PROGRAMMING
   JENSEN C, 2004, SPECIAL ISSUE PROSIM
   JENSEN C, 2005, P INT SOFTW PROC WOR
   JOHNSON PM, 2004, P 2004 INT S EMP SOF
   JOHNSON PM, 2005, 2 WORKSH PROD PERF H
   JOHNSON PM, 2005, IEEE SOFTWARE
   KAUFMANN R, 2003, OOPSLA 03, P298, DOI DOI 10.1145/949344.949421
   KELLNER MI, 1991, P 1 INT C SOFTW PROC
   KOU H, 2006, P 2006 INT WORKSH SO
   KOU H, 2006, ECLIPSE SCREEN RECOR
   KOU H, 2007, THESIS U HAWAII
   Madeyski L, 2007, LECT NOTES COMPUT SC, V4764, P200
   Maximilien EM, 2003, PROC INT CONF SOFTW, P564, DOI 10.1109/ICSE.2003.1201238
   Mishali O, 2008, LECT NOTES BUS INF P, V9, P63
   MULLER MM, 2002, EMPIRICAL ASSESSMENT
   PANCUR M, 2003, P EUROCON 2003 IEEE
   Sanchez JC, 2007, AGILE 2007, PROCEEDINGS, P5, DOI 10.1109/AGILE.2007.43
   Sutton S. M.  Jr., 1995, ACM Transactions on Software Engineering and Methodology, V4, P221, DOI 10.1145/214013.214017
   TURNU I, 2004, QUTE SWAP WORKSH ACM
   WANG Y, 2004, XP AGILE U, P32
   WEGE C, 2004, THESIS E KARLS U TUR
   WILLIAMS L, 2003, P 14 INT S SOFTW REL, P298
   [No title captured]
NR 39
TC 17
Z9 22
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2010
VL 17
IS 1
BP 57
EP 85
DI 10.1007/s10515-009-0058-8
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 534MO
UT WOS:000272902000004
DA 2024-07-18
ER

PT J
AU Rajeswari, J
   Raja, J
   Jayashri, S
AF Rajeswari, J.
   Raja, J.
   Jayashri, S.
TI Gradient contouring and texture modelling based CAD system for improved
   TB classification
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automated TB recognition system; Level sets; Pneumoconiosis; AI system;
   Chest X-ray; GLCM; Gradient based active contour etc
ID CHEST; ABNORMALITIES; TUBERCULOSIS; SEGMENTATION; DIAGNOSIS
AB In this work, fully automated software design is developed for TB recognition system which includes deformable gradient based active contour level set model for isolating the lung region from input chest x-ray images. In general, segmenting the lung region from CXR images computationally intensive task due its complex analyzes, dynamic morphological variations among different classes and boundary discontinuities etc. In particular, as compared to all other abnormality analyzes in CXR images TB detection required most appropriate ROI segmentation irrespective among image non linearity's. The proposed method considers ACM modeling by eliminating discontinuous boundary conditions. Here in this work gradient information at the lung boundaries active contour model is derived. This reduces the computational cost and increases accuracy as a consequence of selecting optimized global threshold limit and gradient features in all possible ways. This framework also includes unified texture classification model to enrich the texture content from the ROI segmented lungs regions from CXR imaging. To meet this requirement, orientation driven texture classification is done which retain texture information's from all the possible coordinate angles to accomplish comprehensive texture retention. More generally, the intrinsic relationship between texture classification and feature set modeling has been explicitly analyzed and presented. Moreover, state-of-the-art feature extraction and selection (CBH-FS) has been introduced and embedded into the framework to form a complete, automated Tuberculosis detection system. The whole system was successfully evaluated by several benchmark datasets and it was shown that the algorithms mentioned earlier efficiently detect TB affected lung images. Finally supervised support vector machine (SVM) based Artificial Intelligence (AI) learning model is used to validate the false detection rate of fully automated TB classification CAD software system.
C1 [Rajeswari, J.; Jayashri, S.] Adhiparasakthi Engn Coll, Dept Comp Sci & Engn, Melmaruvathur, Tamil Nadu, India.
   [Raja, J.] Adhiparasakthi Engn Coll, Dept Elect & Commun Engn, Melmaruvathur, Tamil Nadu, India.
   [Rajeswari, J.; Jayashri, S.] Adhiparasakthi Engn Coll, Melmaruvathur, Tamil Nadu, India.
RP Rajeswari, J (corresponding author), Adhiparasakthi Engn Coll, Dept Comp Sci & Engn, Melmaruvathur, Tamil Nadu, India.; Rajeswari, J (corresponding author), Adhiparasakthi Engn Coll, Melmaruvathur, Tamil Nadu, India.
EM rajeswari@adhiparasakthi.in; raja@apec.edu.in; jayaravi2010@gmail.com
RI J, Rajeswari/JPY-1546-2023
OI J, Rajeswari/0000-0003-0705-0548
CR Ait Skourt B, 2018, PROCEDIA COMPUT SCI, V127, P109, DOI 10.1016/j.procs.2018.01.104
   Alberg AJ, 2003, CHEST, V123, p21S, DOI 10.1378/chest.123.1_suppl.21S
   Candemir S, 2019, INT J COMPUT ASS RAD, V14, P563, DOI 10.1007/s11548-019-01917-1
   Jaeger S, 2014, IEEE T MED IMAGING, V33, P233, DOI 10.1109/TMI.2013.2284099
   Karargyris A, 2016, INT J COMPUT ASS RAD, V11, P99, DOI 10.1007/s11548-015-1242-x
   Lee JS, 2010, BIOMED ENG-APP BAS C, V22, P149, DOI 10.4015/S1016237210001876
   Li F, 2015, ACAD RADIOL, V22, P475, DOI 10.1016/j.acra.2014.11.008
   Newton SM, 2008, LANCET INFECT DIS, V8, P498, DOI 10.1016/S1473-3099(08)70182-8
   Nixon M., 2019, FEATURE EXTRACTION I, DOI 10.1016/C2011-0-06935-1
   Seghers D, 2006, PROC SPIE, V6144, DOI 10.1117/12.648404
   Tan JH, 2012, J MED SYST, V36, P2751, DOI 10.1007/s10916-011-9751-9
   Tourassi GD, 1999, RADIOLOGY, V213, P317, DOI 10.1148/radiology.213.2.r99nv49317
   van Ginneken B, 2002, IEEE T MED IMAGING, V21, P139, DOI 10.1109/42.993132
NR 13
TC 6
Z9 6
U1 1
U2 14
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 18
DI 10.1007/s10515-021-00304-y
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY6EY
UT WOS:000737064300001
DA 2024-07-18
ER

PT J
AU Sharma, C
   Sinha, R
AF Sharma, Chandan
   Sinha, Roopak
TI FLASc: a formal algebra for labeled property graph schema
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Graph schema; Labeled property graph databases; ETL; Data transformation
   and loading; Neo4j; Cypher
ID DATABASE; CONSTRAINTS
AB Contemporary labeled property graph databases are either schema-less or schema-optional to support frequent changes in the structure of data found in domains requiring high flexibility. However, the lack of structure impacts data transformation and loading operations from heterogeneous sources into graph databases. We present a formal algebra FLASc for specifying and generating graph schema for labeled property graph databases. We formally define FLASc and demonstrate the use of FLASc generated graph schemas to systematically transform and load data-sets related to domains of cyber-physical systems, big data analytics and tourism. Findings from three disparate case studies show that FLASc-generated schemas assist in enforcing integrity constraints that reduce the chance of data corruption, hence assuring data consistency and integrity.
C1 [Sharma, Chandan] Univ Petr & Energy Studies, Sch Comp Sci, Cybernet Cluster, Dehra Dun, Uttrakhand, India.
   [Sharma, Chandan; Sinha, Roopak] Auckland Univ Technol, Dept Comp Sci & Software Engn, Auckland, New Zealand.
C3 University of Petroleum & Energy Studies (UPES); Auckland University of
   Technology
RP Sharma, C (corresponding author), Univ Petr & Energy Studies, Sch Comp Sci, Cybernet Cluster, Dehra Dun, Uttrakhand, India.; Sharma, C (corresponding author), Auckland Univ Technol, Dept Comp Sci & Software Engn, Auckland, New Zealand.
EM chandan.sharma@ddn.upes.ac.in; roopak.sinha@aut.ac.nz
RI Sharma, Chandan/AAX-1424-2021
OI Sharma, Chandan/0000-0002-7864-7088
FU CAUL
FX Open Access funding enabled and organized by CAUL and its Member
   Institutions.
CR AGD of Health, 2017, NAT BOW CANC SCREEN
   Airbnb, 2018, INS AIRBNB ADD DAT D
   Alex A., 2013, LDBC USE CASE ANAL C
   Amann B., 1992, Proceeding of the ACM Conference on Hypertext, P201, DOI 10.1145/168466.168527
   Angles R., 2012, Proceedings of the 2012 IEEE International Conference on Data Engineering Workshops (ICDEW 2012), P171, DOI 10.1109/ICDEW.2012.31
   Angles R, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1322432.1322433
   Angles R, 2021, INT CONF MANAGE DATA, P2423, DOI 10.1145/3448016.3457561
   Angles R, 2020, IEEE ACCESS, V8, P86091, DOI 10.1109/ACCESS.2020.2993117
   Angles R, 2018, INT CONF MANAGE DATA, P1421, DOI 10.1145/3183713.3190654
   Angles R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3104031
   Angles R, 2014, SIGMOD REC, V43, P27, DOI 10.1145/2627692.2627697
   Angles Renzo, 2019, RDF and Property Graphs Interoperability: Status and Issues
   Angles Renzo, 2018, AMW
   [Anonymous], 2020, P26601
   [Anonymous], 2013, SPARQL 1 1 QUER LANG
   [Anonymous], 1998, RESOURCE DESCRIPTION
   [Anonymous], 2020, TIGERGRAPH MODERN GR
   [Anonymous], 1994, Proceedings of the 20th International Conference on Very Large Data Bases, VLDB '94
   Apache, 2021, APACHE TINKERPOP
   Apache, GREMLIN QUERY LANGUA
   Apache, 2020, APACHE JAVA LIB PARS
   Badia A, 2011, SIGMOD REC, V40, P61, DOI 10.1145/2070736.2070750
   Bagan G., 2015, ARXIV PREPRINT ARXIV
   Barcelo P., 2011, P S PRINC DAT SYST P, P199
   Barceló P, 2016, SIAM J COMPUT, V45, P1339, DOI 10.1137/15M1034714
   Barceló P, 2012, ACM T DATABASE SYST, V37, DOI 10.1145/2389241.2389250
   Barcelo Pablo, 2012, AMW, V12, P180
   Barik MS, 2016, LECT NOTES COMPUT SC, V10063, P263, DOI 10.1007/978-3-319-49806-5_14
   Bell G, 2009, SCIENCE, V323, P1297, DOI 10.1126/science.1170411
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Bonifati A., 2018, Synthesis Lectures on Data Management, DOI DOI 10.2200/S00873ED1V01Y201808DTM051
   Brodie M.L., 2010, MOV FED C
   Castro J., 2017, AMW
   Chein M., 1992, REV DINTELLIGENCE AR, V6, P365
   Chein M, 2009, ADV INFORM KNOWL PRO, P1
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Daniel G, 2016, LECT NOTES COMPUT SC, V9974, P430, DOI 10.1007/978-3-319-46397-1_33
   de Sousa VM, 2014, IIWAS2018: THE 20TH INTERNATIONAL CONFERENCE ON INFORMATION INTEGRATION AND WEB-BASED APPLICATIONS & SERVICES, P183, DOI 10.1145/3282373.3282375
   FINKELSTEIN S, 1988, ACM T DATABASE SYST, V13, P91, DOI 10.1145/42201.42205
   Fitzgerald G, 1999, INT J INFORM MANAGE, V19, P319, DOI 10.1016/S0268-4012(99)00029-8
   Florescu D., 1998, Proceedings of the Seventeenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems. PODS 1998, P139, DOI 10.1145/275487.275503
   Frozza AA, 2020, 2020 IEEE 21ST INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION FOR DATA SCIENCE (IRI 2020), P271, DOI 10.1109/IRI49571.2020.00046
   Ghrab A, 2016, ABS160200503
   Ghrab A., 2014, ANAL AWARE GRAPH DAT
   Graves M., 1995, Proceedings of the Twenty-Eighth Hawaii International Conference on System Sciences, P32, DOI 10.1109/HICSS.1995.375353
   GRIFFITH RL, 1982, ACM T DATABASE SYST, V7, P417, DOI 10.1145/319732.319743
   GYSSENS M, 1994, IEEE T KNOWL DATA EN, V6, P572, DOI 10.1109/69.298174
   Halpin T, 2005, LECT NOTES COMPUT SC, V3762, P676
   Hartig O, 2019, PROCEEDINGS OF THE 2ND ACM SIGMOD JOINT INTERNATIONAL WORKSHOP ON GRAPH DATA MANAGEMENT EXPERIENCES & SYSTEMS (GRADES) AND NETWORK DATA ANALYTICS (NDA) 2019, DOI 10.1145/3327964.3328495
   Hedley J, 2020, JSOUP JAVA HTML PARS
   Hidders J, 2003, LECT NOTES COMPUT SC, V2572, P394
   Johnson RB, 2007, J MIX METHOD RES, V1, P112, DOI 10.1177/1558689806298224
   Khalajzadeh H, 2020, J COMPUT LANG, V58, DOI 10.1016/j.cola.2020.100964
   Khalajzadeh H, 2019, IEEE INT CONGR BIG, P93, DOI 10.1109/BigDataCongress.2019.00025
   Khan A, 2012, PROC INT CONF DATA, P1218, DOI 10.1109/ICDE.2012.143
   Kunii H. S., 1987, Proceedings 1987 Fall Joint Computer Conference - Exploring Technology: Today and Tomorrow (Cat. No.87CH2468-7), P138
   LEVENE M, 1995, IEEE T KNOWL DATA EN, V7, P809, DOI 10.1109/69.469818
   Levene M., 1990, Proceedings of the 5th Jerusalem Conference on Information Technology (JCIT). Next Decade in Information Technology (Cat. No.90TH0326-9), P520, DOI 10.1109/JCIT.1990.128324
   Levene M., 1991, Data & Knowledge Engineering, V6, P205, DOI 10.1016/0169-023X(91)90005-I
   Marciniak J.J., 1994, ENCY SOFTWARE ENG
   Megid YA, 2018, LECT NOTES COMPUT SC, V11030, P350, DOI 10.1007/978-3-319-98812-2_31
   Mior MJ, 2017, IEEE T KNOWL DATA EN, V29, P2275, DOI 10.1109/TKDE.2017.2722412
   PAREDAENS J, 1995, IEEE T KNOWL DATA EN, V7, P436, DOI 10.1109/69.390249
   Park Y, 2014, 2014 IEEE 30TH INTERNATIONAL CONFERENCE ON DATA ENGINEERING WORKSHOPS (ICDEW), P12, DOI 10.1109/ICDEW.2014.6818295
   Pérez J, 2006, LECT NOTES COMPUT SC, V4273, P30
   Pin-Shan Chen P., 1976, ACM Transactions on Database Systems, V1, P9, DOI 10.1145/320434.320440
   Pokorny J, 2016, P IDEAS 16, P370, DOI [DOI 10.1145/2938503.2938547, 10.1145/2938503.2938547]
   Pokorny J., 2017, J ADV ENG COMPUT, V1, P04, DOI [10.25073/jaec.201711.44, DOI 10.25073/JAEC.201711.44]
   Pokorny J, 2017, PROCEDIA COMPUT SCI, V109, P975, DOI 10.1016/j.procs.2017.05.456
   Reina F, 2020, LECT NOTES COMPUT SC, V12391, P269, DOI 10.1007/978-3-030-59003-1_18
   Reutter J.L., 2013, ARXIV PREPRINT ARXIV
   Rodriguez Marko A., 2010, Bulletin of the American Society for Information Science and Technology, V36, P35, DOI 10.1002/bult.2010.1720360610
   Rodriguez MA, 2012, ADV DATA MIN DATABAS, P29, DOI 10.4018/978-1-61350-053-8.ch002
   Roy-Hubara N, 2017, IT PROF, V19, P34, DOI 10.1109/MITP.2017.4241458
   SCIORE E, 1994, ACM T DATABASE SYST, V19, P254, DOI 10.1145/176567.176570
   Sestak M, 2021, FUTURE GENER COMP SY, V115, P459, DOI 10.1016/j.future.2020.09.036
   Sestak M, 2016, CEN EUR CON INFO INT, P23
   Sharma C., 2021, THESIS AUCKLAND U TE
   Sharma C, 2019, BDCAT'19: PROCEEDINGS OF THE 6TH IEEE/ACM INTERNATIONAL CONFERENCE ON BIG DATA COMPUTING, APPLICATIONS AND TECHNOLOGIES, P71, DOI 10.1145/3365109.3368782
   Sharma C, 2021, INFORM SYST, V102, DOI 10.1016/j.is.2021.101816
   Sharma C, 2020, IEEE INT CONF AUTOM, P1379, DOI 10.1145/3324884.3418916
   Sharma C, 2019, IEEE INTL CONF IND I, P1558, DOI [10.1109/indin41052.2019.8972272, 10.1109/INDIN41052.2019.8972272]
   Sowa J., 1999, Conceptual Structures: Standards and Practices. 7th International Conference on Conceptual Structures, ICCS'99. Proceedings (Lecture Notes in Computer Science Vol.1640), P1
   SOWA JF, 1976, IBM J RES DEV, V20, P336, DOI 10.1147/rd.204.0336
   Sowa JF, 2008, FOUND ARTIF INTELL, P213, DOI 10.1016/S1574-6526(07)03005-2
   Sowa JohnF., 1992, CONCEPTUAL STRUCTURE, P3
   Tetko IV, 2016, MOL INFORM, V35, P615, DOI 10.1002/minf.201600073
   Tucker J., 2003, DATA SYNTAX SEMANTIC
   W3C, 2021, RESOURCE DESCRIPTION
   Wood PT, 2012, SIGMOD REC, V41, P50, DOI 10.1145/2206869.2206879
   Yu Y, 2011, LECT NOTES COMPUT SC, V7031, P794, DOI 10.1007/978-3-642-25073-6_50
NR 92
TC 2
Z9 2
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 37
DI 10.1007/s10515-022-00336-y
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0F5KP
UT WOS:000777398700001
OA hybrid
DA 2024-07-18
ER

PT J
AU Wang, Y
   Redmiles, D
AF Wang, Y.
   Redmiles, David
TI IIAG: a data-driven and theory-inspired approach for advising how to
   interact with new remote collaborators in OSS teams
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Open source software (OSS); Game theory analytics; Intelligent tool;
   Collaboration; Unfamiliar remote collaborators
ID SENTIMENT ANALYSIS; BIG DATA; TRUST; DISTANCE; COMMUNICATION;
   COORDINATION; DYNAMICS; HOFSTEDE; IDENTITY
AB Open source software development (OSS) team members often need to figure out how to initiate a collaboration with a new remote collaborator. An inappropriate strategy could lead to failures in developing cooperation. In this paper, we propose an approach and corresponding intelligent system called IIAG (Initial Interaction Assistant based on Game theory analytics), which identifies and advises its users about strategies for initial interactions with new remote collaborators. IIAG integrates game theory, decision models, and social factors with the collaborative traces mined from empirical project data to achieve this goal. When a user seeks IIAG's advice, it simulates an individual's decision processes to find the strategies that yield the best outcomes. Thus, it can advise proper strategies for users. IIAG is evaluated extensively. We design and perform virtual experiments to evaluate IIAG with empirical data collected from three large open source projects. The results show that IIAG can identify the payoff-optimal strategy with over 80% accuracy. We also conduct a lightweight user study to evaluate the IIAG's usefulness from the potential users' perspective. The results are also promising. Thus, IIAG can help OSS team members in making informed decisions about interacting with new remote collaborators.
C1 [Wang, Y.] Beijing Univ Posts & Telecommun, Sch Software Engn, Beijing, Peoples R China.
   [Redmiles, David] Univ Calif Irvine, Dept Informat, Irvine, CA USA.
C3 Beijing University of Posts & Telecommunications; University of
   California System; University of California Irvine
RP Wang, Y (corresponding author), Beijing Univ Posts & Telecommun, Sch Software Engn, Beijing, Peoples R China.
EM wang@cocolabs.org
OI Redmiles, David/0000-0002-1370-7123
CR ADAMS DA, 1992, MIS QUART, V16, P227, DOI 10.2307/249577
   Ahmed T, 2017, IEEE INT CONF AUTOM, P106, DOI 10.1109/ASE.2017.8115623
   Al-Ani Ban., 2013, P ACM C COMPUTER SUP, P563, DOI [DOI 10.1145/2441776.2441840, 10.1145/2441776.2441840]
   Alami Adam, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P220, DOI 10.1145/3383219.3383242
   [Anonymous], 2013, P 16 C COMP SUPP COO
   [Anonymous], 2014, RECOMMENDATION SYSTE, DOI DOI 10.1007/978-3-642-45135-5_12
   [Anonymous], 2004, STAG HUNT EVOLUTION, DOI DOI 10.1017/CBO9781139165228
   [Anonymous], 2001, Individual strategy and social structure: an evolutionary theory of institutions
   [Anonymous], 2002, P INT WORKSH PRINC S
   ARTHUR WB, 1991, AM ECON REV, V81, P353
   Avram G, 2009, COMPUT SUPP COOP W J, V18, P477, DOI 10.1007/s10606-009-9099-6
   Baron RA, 2000, ACAD MANAGE EXEC, V14, P106, DOI 10.5465/AME.2000.2909843
   Bechar-Israeli H., 1995, J COMPUT-MEDIAT COMM, V1, pJCMC127, DOI [10.1111/j.1083-6101.1995.tb00325.x, DOI 10.1111/J.1083-6101.1995.TB00325.X]
   Begel A., 2010, Software Engineering, 2010 ACM/IEEE 32nd International Conference on, V1, P125
   Begel A, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P12, DOI 10.1145/2568225.2568233
   Bird C, 2009, COMMUN ACM, V52, P85, DOI 10.1145/1536616.1536639
   Bjorn P, 2011, ECSCW 2011: PROCEEDINGS OF THE 12TH EUROPEAN CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, P133
   Boden A, 2009, ECSCW 2009: PROCEEDINGS OF THE 11TH EUROPEAN CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, P123, DOI 10.1007/978-1-84882-854-4_7
   Bonaccio S, 2006, ORGAN BEHAV HUM DEC, V101, P127, DOI 10.1016/j.obhdp.2006.07.001
   Borgatti SP, 2003, J MANAGE, V29, P991, DOI 10.1016/S0149-2063(03)00087-4
   Boyd D, 2012, INFORM COMMUN SOC, V15, P662, DOI 10.1080/1369118X.2012.678878
   Calefato F., 2013, Proc. 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 13), P587
   Calefato F, 2018, EMPIR SOFTW ENG, V23, P1352, DOI 10.1007/s10664-017-9546-9
   Calefato F, 2017, INT CONF GLOBAL SOFT, P56, DOI 10.1109/ICGSE.2017.1
   Calefato F, 2016, 2016 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMOTION AWARENESS IN SOFTWARE ENGINEERING (SEMOTION), P3, DOI [10.1109/SEmotion.2016.010, 10.1145/2897000.2897001]
   Carmel E, 2001, IEEE SOFTWARE, V18, P22, DOI 10.1109/52.914734
   Carmines E.G., 1979, Qualitative applications in the social sciences: Reliability and validity assessment, DOI DOI 10.4135/9781412985642
   Castelle M., 2018, Proceedings of the 2nd Workshop on Abusive Language Online, ALW2'18, P160
   Cataldo M, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P2
   Chowdhury S.K., 2011, CHI EA 11, P965, DOI [10.1145/1979742.1979506, DOI 10.1145/1979742.1979506]
   Chowdhury SA, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P422, DOI 10.1109/MSR.2015.54
   Connelly BL, 2011, J MANAGE, V37, P39, DOI 10.1177/0149206310388419
   Cooke NJ, 2015, ENHANCING THE EFFECTIVENESS OF TEAM SCIENCE, P1
   Cooper R., 1999, COORDINATION GAMES, DOI [10.1017/CBO9780511609428, DOI 10.1017/CBO9780511609428]
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   Dourish P., 1992, CHI '92 Conference Proceedings. ACM Conference on Human Factors in Computing Systems. Striking a Balance, P541, DOI 10.1145/142750.142982
   Drogendijk R, 2006, INT BUS REV, V15, P361, DOI 10.1016/j.ibusrev.2006.05.003
   Easley D., 2010, Networks, Crowds, and Markets Reasoning about a Highly Connected World, DOI DOI 10.1017/CBO9780511761942
   Erev I, 1998, AM ECON REV, V88, P848
   Erickson T., 2000, ACM Transactions on Computer-Human Interaction, V7, P59, DOI 10.1145/344949.345004
   Erickson Thomas., 1999, Proceedings of CHI '99, P72, DOI 10.1145/302979.302997
   Espinosa JA, 2015, J MANAGE INFORM SYST, V32, P151, DOI 10.1080/07421222.2015.1029390
   Fang F, 2017, AI MAG, V38, P23, DOI 10.1609/aimag.v38i1.2710
   Fiske ST, 2002, J PERS SOC PSYCHOL, V82, P878, DOI 10.1037//0022-3514.82.6.878
   Fulmer CA, 2012, J MANAGE, V38, P1167, DOI 10.1177/0149206312439327
   Fussell S. R., 1998, ACM 1998 Conference on Computer Supported Cooperative Work. Proceedings. CSCW 98, P275, DOI 10.1145/289444.289502
   Gawronski B., 2011, HDB IMPLICIT SOCIAL
   Gintis H, 2009, BOUNDS OF REASON: GAME THEORY AND THE UNIFICATION OF THE BEHAVIORAL SCIENCES, P1
   Gregor S, 2006, MIS QUART, V30, P611
   Groysberg B, 2011, ORGAN SCI, V22, P722, DOI 10.1287/orsc.1100.0547
   Gutwin C., 2004, Computer Supported Cooperative Work Conference Proceedings, P72, DOI 10.1145/1031607.1031621
   Hall T, 2008, IEEE SOFTWARE, V25, P92, DOI 10.1109/MS.2008.105
   Hanus MD, 2015, INT J HUM-COMPUT ST, V84, P33, DOI 10.1016/j.ijhcs.2015.07.004
   Harsanyi J.C., 1982, PAPERS GAME THEORY, P235
   Harsanyi John C., 1977, Erkenntnis, V11, P25, DOI DOI 10.1007/BF00169843
   Hendry DG, 2008, INT J HUM-COMPUT ST, V66, P545, DOI 10.1016/j.ijhcs.2007.12.002
   Herbsleb JD, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P188, DOI 10.1109/FOSE.2007.11
   Herbsleb JD, 1999, IEEE SOFTWARE, V16, P63, DOI 10.1109/52.795103
   Hincapié-Ramos JD, 2011, UBICOMP'11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON UBIQUITOUS COMPUTING, P477
   Hinds P, 2011, ACAD MANAG ANN, V5, P135, DOI 10.1080/19416520.2011.586108
   Hinds PJ, 2005, ORGAN SCI, V16, P290, DOI 10.1287/orsc.1050.0122
   HOFSTEDE G, 1984, J CROSS CULT PSYCHOL, V15, P417, DOI 10.1177/0022002184015004003
   Hornsey MJ, 2000, PERS SOC PSYCHOL B, V26, P242, DOI 10.1177/0146167200264010
   Islam MR, 2017, IEEE WORK CONF MIN S, P203, DOI 10.1109/MSR.2017.9
   Jarvenpaa SL, 1999, ORGAN SCI, V10, P791, DOI 10.1287/orsc.10.6.791
   Jarvenpaa SL, 2004, INFORM SYST RES, V15, P250, DOI 10.1287/isre.1040.0028
   Jongeling R, 2017, EMPIR SOFTW ENG, V22, P2543, DOI 10.1007/s10664-016-9493-x
   Kahneman D., 2000, CHOICES VALUES FRAME, DOI [DOI 10.1017/CBO9780511803475, 10.1017/CBO9780511803475]
   Kiritchenko S, 2014, J ARTIF INTELL RES, V50, P723, DOI 10.1613/jair.4272
   Kwan I, 2011, IEEE T SOFTWARE ENG, V37, P307, DOI 10.1109/TSE.2011.29
   Largent EA., 2017, Yale J Health Policy Law Ethics, V17, P61
   Laumer S, 2017, CSCW'17: PROCEEDINGS OF THE 2017 ACM CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK AND SOCIAL COMPUTING, P978, DOI 10.1145/2998181.2998309
   Leonardi PM, 2013, J COMPUT-MEDIAT COMM, V19, P1, DOI 10.1111/jcc4.12029
   Levina N, 2008, MIS QUART, V32, P307
   Lin B, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P94, DOI 10.1145/3180155.3180195
   López G, 2017, CSCW'17: PROCEEDINGS OF THE 2017 ACM CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK AND SOCIAL COMPUTING, P808, DOI 10.1145/2998181.2998281
   Lycett M, 2013, EUR J INFORM SYST, V22, P381, DOI 10.1057/ejis.2013.10
   Maznevski ML, 2000, ORGAN SCI, V11, P473, DOI 10.1287/orsc.11.5.473.15200
   Mcknight DH, 1998, ACAD MANAGE REV, V23, P473, DOI 10.5465/AMR.1998.926622
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Menzies T, 2012, PROC INT CONF SOFTW, P1032, DOI 10.1109/ICSE.2012.6227117
   Menzies Tim., 2013, P 9 INT C PREDICTIVE, P11, DOI 10.1145/2499393.2499401
   Monroe BL, 2015, PS-POLIT SCI POLIT, V48, P71, DOI 10.1017/S1049096514001760
   Murphy-Hill E, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1, DOI 10.1145/2568225.2568226
   Myerson R., 1978, INT J GAME THEORY, V7, P73
   North M J., 2007, Managing Business Complexity: Discovering Strategic Solutions with Agent-Based Modeling and Simulation, P45, DOI DOI 10.1093/ACPROF:OSO/9780195172119.001.0001
   Novielli N, 2018, IEEE WORK CONF MIN S, P364, DOI 10.1145/3196398.3196403
   O'Leary MB, 2007, MIS QUART, V31, P433
   Olson GM, 2000, HUM-COMPUT INTERACT, V15, P139, DOI 10.1207/S15327051HCI1523_4
   Paikari E., 2012, Proceedings 2012 International Conference on Software and System Process (ICSSP 2012), P13, DOI 10.1109/ICSSP.2012.6225958
   Paunonen SV, 1998, J PERS SOC PSYCHOL, V74, P538, DOI 10.1037/0022-3514.74.2.538
   Powell WW, 2005, AM J SOCIOL, V110, P1132, DOI 10.1086/421508
   Power DJ, 2008, INFORM SYST MANAGE, V25, P149, DOI 10.1080/10580530801941124
   Reagans R, 2004, ADMIN SCI QUART, V49, P101
   Riegelsberger J, 2003, INT J HUM-COMPUT ST, V58, P759, DOI 10.1016/S1071-5819(03)00042-9
   Rubinstein R.Y., 2016, Simulation and the Monte Carlo method
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Sapkota H, 2019, PLOS ONE, V14, DOI 10.1371/journal.pone.0226281
   Sarker S, 2011, J MANAGE INFORM SYST, V28, P273, DOI 10.2753/MIS0742-1222280109
   Sarma A, 2010, COMPUTER, V43, P61, DOI 10.1109/MC.2010.163
   Schumann J, 2012, PROCEEDINGS OF THE 17TH ACM INTERNATIONAL CONFERENCE ON SUPPORTING GROUP WORK, P199
   Seering Joseph, 2018, Proceedings of the ACM on Human-Computer Interaction, V2, DOI 10.1145/3274771
   Shim JP, 2002, DECIS SUPPORT SYST, V33, P111, DOI 10.1016/S0167-9236(01)00139-7
   Silva JO, 2017, XXXI BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING (SBES 2017), P224, DOI 10.1145/3131151.3131156
   Simon HA, 1991, ORGAN SCI, V2, P125, DOI 10.1287/orsc.2.1.125
   Skyrms B., 2001, P ADDRESSES AM PHILO, V75, P31, DOI DOI 10.2307/3218711
   Skyrms B, 2008, SYNTHESE, V160, P21, DOI 10.1007/s11229-006-9075-3
   Steinmacher I, 2019, COMPUT SUPP COOP W J, V28, P247, DOI 10.1007/s10606-018-9335-z
   Steinmacher I, 2016, PROC INT CONF SOFTW, P273, DOI 10.1145/2884781.2884806
   Steinmacher I, 2013, COMPUT SUPP COOP W J, V22, P113, DOI 10.1007/s10606-012-9164-4
   Storey MA., 2010, P FSE SDP WORKSH FUT, P359, DOI DOI 10.1145/1882362.1882435
   Storey MA, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P928, DOI 10.1145/2950290.2983989
   Tamburri DA, 2016, IEEE SOFTWARE, V33, P70, DOI 10.1109/MS.2016.144
   Tang J. C., 2001, CHI 2001 Conference Proceedings. Conference on Human Factors in Computing Systems, P221, DOI 10.1145/365024.365105
   Tourani P, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P24, DOI 10.1109/SANER.2017.7884606
   Train KE, 2009, DISCRETE CHOICE METHODS WITH SIMULATION, 2ND EDITION, P1, DOI 10.1017/CBO9780511805271
   Trainer EH, 2018, J SYST SOFTWARE, V144, P328, DOI 10.1016/j.jss.2018.06.028
   Turban E., 2010, Decision Support and Business Intelligence Systems, V9th
   van Wesel P, 2017, PROC IEEE INT CONF S, P544, DOI 10.1109/ICSME.2017.25
   Von Neumann J., 2007, THEORY GAMES EC BEHA, DOI 10.1515/9781400829460
   Wang Y, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P230, DOI 10.1109/ASE.2019.00031
   Wang Y, 2016, ACM CONFERENCE ON COMPUTER-SUPPORTED COOPERATIVE WORK AND SOCIAL COMPUTING (CSCW 2016), P303, DOI 10.1145/2818048.2820064
   Wang Y, 2016, EMPIR SOFTW ENG, V21, P2233, DOI 10.1007/s10664-015-9407-3
   Wang Y, 2019, PROC INT CONF SOFTW, P572, DOI 10.1109/ICSE.2019.00068
   Wang YX, 2016, LECT NOTES COMPUT SC, V9867, P121, DOI 10.1007/978-3-319-45381-1_10
   Wilson TS, 2005, PHIL EDUC, P347, DOI 10.3115/1220575.1220619
   Wu A, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1955
   Yang Y, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962594
NR 128
TC 1
Z9 2
U1 0
U2 36
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 5
DI 10.1007/s10515-021-00283-0
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA SG9PN
UT WOS:000653772100001
DA 2024-07-18
ER

PT J
AU Cai, CH
   Sun, J
   Dobbie, G
AF Cai, Cheng-Hao
   Sun, Jing
   Dobbie, Gillian
TI Automatic B-model repair using model checking and machine learning
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model repair; B-method; Model checking; Formal verification; Machine
   learning
ID REGRESSION; CLASSIFICATION
AB The B-method, which provides automated verification for the design of software systems, still requires users to manually repair faulty models. This paper proposes B-repair, an approach that supports automated repair of faulty models written in the B formal specification language. After discovering a fault in a model using the B-method, B-repair is able to suggest possible repairs for the fault, estimate the quality of suggested repairs and use a suitable repair to revise the model. The suggestion of repairs is produced using the Isolation method, which suggests changing the pre-conditions of operations, and the Revision method, which suggests changing the post-conditions of operations. The estimation of repair quality makes use of machine learning techniques that can learn the features of state transitions. After estimating the quality of suggested repairs, the repairs are ranked, and a best repair is selected according to the result of ranking and is used to revise the model. This approach has been evaluated using a set of finite state machines seeded with faults and a case study. The evaluation has revealed that B-repair is able to repair a large number of faults, including invariant violations, assertion violations and deadlock states, and gain high accuracies of repair. Using the combination of model checking and machine learning-guided techniques, B-repair saves development time by finding and repairing faults automatically during design.
C1 [Cai, Cheng-Hao; Sun, Jing; Dobbie, Gillian] Univ Auckland, Sch Comp Sci, 38 Princes St, Auckland 1142, New Zealand.
C3 University of Auckland
RP Cai, CH (corresponding author), Univ Auckland, Sch Comp Sci, 38 Princes St, Auckland 1142, New Zealand.
EM chenghao.cai@auckland.ac.nz; jing.sun@auckland.ac.nz;
   g.dobbie@auckland.ac.nz
OI Cai, Cheng-Hao/0000-0001-6815-9091; Dobbie, Gillian/0000-0001-7245-0367
FU State Scholarship Fund; China Scholarship Council [201708060334]
FX This work is supported by the State Scholarship Fund sponsored by the
   China Scholarship Council [Grant Number: 201708060334].
CR Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   [Anonymous], WIT T BUILT ENV
   [Anonymous], 2005, B BOOK ASSIGNING PRO
   Baader Franz, 1998, TERM REWRITING ALL
   Babin G, 2016, LECT NOTES COMPUT SC, V10009, P106, DOI 10.1007/978-3-319-47846-3_8
   Bagaria J, 2017, STANFORD ENCY PHILOS
   Barbosa Haniel, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P353, DOI 10.1007/978-3-642-30885-7_30
   Behm P, 1999, LECT NOTES COMPUT SC, V1708, P369
   Benaissa N, 2016, LECT NOTES COMPUT SC, V9707, P203, DOI 10.1007/978-3-319-33951-1_15
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Cai CH, 2018, IEEE INT C ENG COMP, P31, DOI 10.1109/ICECCS2018.2018.00012
   Cimatti A., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P495
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   COX DR, 1958, J R STAT SOC B, V20, P215
   D'Silva V, 2008, IEEE T COMPUT AID D, V27, P1165, DOI 10.1109/TCAD.2008.923410
   Degiovanni R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P129, DOI 10.1145/2568225.2568323
   Fadil H, 2005, LECT NOTES COMPUT SC, V3563, P516
   Gazzola L, 2019, IEEE T SOFTWARE ENG, V45, P34, DOI 10.1109/TSE.2017.2755013
   Glorot X., 2011, JMLR Proceedings, V15, P315, DOI DOI 10.1002/ECS2.1832
   Gopinath D, 2011, LECT NOTES COMPUT SC, V6605, P173, DOI 10.1007/978-3-642-19835-9_15
   Guowei Yang, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P455, DOI 10.1007/978-3-642-32759-9_37
   Harel D, 2014, LECT NOTES COMPUT SC, V8780, P1, DOI 10.1007/978-3-662-44871-7_1
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Hoffmann S, 2007, LECT NOTES COMPUT SC, V4355, P257
   Huth Michael, 2004, Logic in Computer Science: Modelling and reasoning about systems
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Ke YL, 2015, IEEE INT CONF AUTOM, P295, DOI 10.1109/ASE.2015.60
   Krings S, 2016, LECT NOTES COMPUT SC, V9681, P361, DOI 10.1007/978-3-319-33693-0_23
   Kurt I, 2008, EXPERT SYST APPL, V34, P366, DOI 10.1016/j.eswa.2006.09.004
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Le Goues C, 2013, SOFTWARE QUAL J, V21, P421, DOI 10.1007/s11219-013-9208-0
   Le XBD, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P593, DOI 10.1145/3106237.3106309
   Le XBD, 2016, PROC IEEE INT CONF S, P428, DOI 10.1109/ICSME.2016.66
   Le XBD, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P213, DOI 10.1109/SANER.2016.76
   LeCun Y, 1998, LECT NOTES COMPUT SC, V1524, P9, DOI 10.1007/3-540-49430-8_2
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Leuschel M, 2009, LECT NOTES COMPUT SC, V5115, P78, DOI 10.1007/978-3-642-11447-2_6
   Loh WY, 2011, WIRES DATA MIN KNOWL, V1, P14, DOI 10.1002/widm.8
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   PRAAGMAN J, 1985, EUR J OPER RES, V19, P144, DOI 10.1016/0377-2217(85)90321-2
   Schmidt J, 2018, LECT NOTES COMPUT SC, V11023, P346, DOI 10.1007/978-3-319-98938-9_20
   Schmidt J, 2016, LECT NOTES COMPUT SC, V9675, P303, DOI 10.1007/978-3-319-33600-8_25
   SIEKMANN JH, 1989, J SYMB COMPUT, V7, P207, DOI 10.1016/S0747-7171(89)80012-4
   Tin Kam Ho, 1995, Proceedings of the Third International Conference on Document Analysis and Recognition, P278, DOI 10.1109/ICDAR.1995.598994
   Turian J, 2010, ACL 2010: 48TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P384
   Wen M, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/3180155.3180233
   Wilkerson J.L., 2010, P GECCO 2010 GENETIC, P1391
NR 49
TC 9
Z9 9
U1 1
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2019
VL 26
IS 3
SI SI
BP 653
EP 704
DI 10.1007/s10515-019-00264-4
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IS5YT
UT WOS:000482229800005
DA 2024-07-18
ER

PT J
AU Boussaïd, I
   Siarry, P
   Ahmed-Nacer, M
AF Boussaid, Ilhem
   Siarry, Patrick
   Ahmed-Nacer, Mohamed
TI A survey on search-based model-driven engineering
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Search-based software engineering (SBSE); Model-driven engineering
   (MDE); Metaheuristics; Metaheuristic
ID SOFTWARE; TRANSFORMATION; OPTIMIZATION; CHALLENGES; GENERATION;
   TAXONOMY; QUALITY
AB Model-driven engineering (MDE) and search-based software engineering (SBSE) are both relevant approaches to software engineering. MDE aims to raise the level of abstraction in order to cope with the complexity of software systems, while SBSE involves the application of metaheuristic search techniques to complex software engineering problems, reformulating engineering tasks as optimization problems. The purpose of this paper is to survey the relatively recent research activity lying at the interface between these two fields, an area that has come to be known as search-based model-driven engineering. We begin with an introduction to MDE, the concepts of models, of metamodels and of model transformations. We also give a brief introduction to SBSE and metaheuristics. Then, we survey the current research work centered around the combination of search-based techniques and MDE. The literature survey is accompanied by the presentation of references for further details.
C1 [Boussaid, Ilhem; Ahmed-Nacer, Mohamed] Univ Sci & Technol Houari Boumediene, LSI, BP El Alia, Algiers 16111, Algeria.
   [Siarry, Patrick] Univ Paris Est Creteil Val Marne, LiSSi EA 3956, 61 Ave General Gaulle, F-94010 Creteil, France.
C3 University Science & Technology Houari Boumediene; Universite
   Paris-Est-Creteil-Val-de-Marne (UPEC)
RP Boussaïd, I (corresponding author), Univ Sci & Technol Houari Boumediene, LSI, BP El Alia, Algiers 16111, Algeria.
EM iboussaid@usthb.dz
CR Ab Rahim L, 2015, SOFTW SYST MODEL, V14, P1003, DOI 10.1007/s10270-013-0358-0
   Abdeen H., 2014, 29 IEEE ACM INT C AU
   Afzal W, 2011, EXPERT SYST APPL, V38, P11984, DOI 10.1016/j.eswa.2011.03.041
   Afzal W, 2009, INFORM SOFTWARE TECH, V51, P957, DOI 10.1016/j.infsof.2008.12.005
   Aleti A, 2013, IEEE T SOFTWARE ENG, V39, P658, DOI 10.1109/TSE.2012.64
   Ali S., 2011, Proceedings of the 11th International Conference on Quality Software (QSIC 2011), P41, DOI 10.1109/QSIC.2011.17
   Ali S, 2013, IEEE T SOFTWARE ENG, V39, P1376, DOI 10.1109/TSE.2013.17
   Ali S, 2010, IEEE T SOFTWARE ENG, V36, P742, DOI 10.1109/TSE.2009.52
   Amal B, 2014, LECT NOTES COMPUT SC, V8636, P31
   Amoui M, 2006, INT J INFORM TECHNOL, V1, P235
   Amrani M., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P921, DOI 10.1109/ICST.2012.197
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   Andrade Sandro Santos, 2013, 2013 IEEE 7th International Conference on Self-Adaptation and Self-Organizing Systems Workshops, P23, DOI 10.1109/SASOW.2013.13
   [Anonymous], 1995, OPT DAYS MONTR
   [Anonymous], 2012, P 5 INDIA SOFTWARE E
   [Anonymous], EMPIR SOFTW ENG
   [Anonymous], 2010, P 6 INT C PRED MOD S
   [Anonymous], THESIS
   Antoniol G, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P172, DOI 10.1109/METRIC.2004.1357901
   Arzoky M., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P422, DOI 10.1109/ICSTW.2011.87
   Bagnall AJ, 2001, INFORM SOFTWARE TECH, V43, P883, DOI 10.1016/S0950-5849(01)00194-X
   Baki I, 2014, LECT NOTES COMPUT SC, V8767, P636, DOI 10.1007/978-3-319-11653-2_39
   Balaban M., 2015, CEUR WORKSHOP P, V1503
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Baudry B, 2005, IEEE SOFTWARE, V22, P76, DOI 10.1109/MS.2005.30
   Baudry B., 2006, ECMDA WORKSH INT MOD
   Baudry B, 2010, COMMUN ACM, V53, P139, DOI 10.1145/1743546.1743583
   ben Fadhel A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P212, DOI 10.1109/ICSM.2012.6405274
   Bencomo N., 2014, LECT NOTES COMPUTER, V8378
   Bézivin J, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P273, DOI 10.1109/ASE.2001.989813
   BEZIVIN J, 2004, EUR J INFORM PROF, V5, P21
   Bézivin J, 2006, LECT NOTES COMPUT SC, V4143, P36
   Binkley D, 2015, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2015.7335396
   Birattari M., 2001, AIDA0105 TU DARMST F
   Blum C, 2011, APPL SOFT COMPUT, V11, P4135, DOI 10.1016/j.asoc.2011.02.032
   Boussaïd I, 2013, INFORM SCIENCES, V237, P82, DOI 10.1016/j.ins.2013.02.041
   Brun Y, 2009, LECT NOTES COMPUT SC, V5525, P48, DOI 10.1007/978-3-642-02161-9_3
   Bryant BR, 2011, COMPUT SCI INF SYST, V8, P225, DOI 10.2298/CSIS110114012B
   Burton FR, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P45, DOI 10.1109/CMSBSE.2013.6604436
   Cheng BHC, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P1, DOI 10.1109/CMSBSE.2013.6604427
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Chicano F., 2005, 6 MET INT C MIC2005
   Chisalita-Cretu C., 2011, MULTIOBJECTIVE REFAC, P441
   Cinnéide MO, 2012, INT SYMP EMP SOFTWAR, P49, DOI 10.1145/2372251.2372260
   Clarke J., 2003, IEE Proceedings-Software, V150, P161, DOI 10.1049/ip-sen:20030559
   Colanzi TE, 2013, J SYST SOFTWARE, V86, P970, DOI 10.1016/j.jss.2012.07.041
   Cooper KD, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/315253.314414
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   CZARNECKI K, 2003, P 2 OOPSLA WORKSH GE
   de Freitas FG, 2011, LECT NOTES COMPUT SC, V6956, P18, DOI 10.1007/978-3-642-23716-4_5
   de Lemos R., 2013, Lecture Notes in Computer Science, V7475, P1, DOI DOI 10.1007/978-3-642-35813-5_1
   Neto FGD, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P12, DOI 10.1109/CMSBSE.2013.6604430
   Debreceni C, 2016, LECT NOTES COMPUT SC, V9633, P104, DOI 10.1007/978-3-662-49665-7_7
   Denil J, 2014, LECT NOTES COMPUT SC, V8769, P80, DOI 10.1007/978-3-319-11743-0_6
   Dias Neto A. C., 2007, P 1 ACM INT WORKSH E, P31
   Dolado J.J., 1998, P INSPIRE 3 PROC IMP
   Dong Xu, 2005, Proceedings. 12th Asia-Pacific Software Engineering Conference
   Dongkyung Nam, 2000, International Journal of Fuzzy Systems, V2, P87
   Dorigo M, 1996, IEEE T SYST MAN CY B, V26, P29, DOI 10.1109/3477.484436
   Doungsa-ard Chartchai., 2007, Software Engineering Advances, P47, DOI DOI 10.1109/ICSEA.2007.70
   Durillo JJ, 2009, 1ST INTERNATIONAL SYMPOSIUM ON SEARCH BASED SOFTWARE ENGINEERING, PROCEEDINGS, P49, DOI 10.1109/SSBSE.2009.21
   FARMER JD, 1986, PHYSICA D, V22, P187, DOI 10.1016/0167-2789(86)90240-X
   Farooq U, 2009, IEEE ICST WORKSHOP, P141, DOI 10.1109/ICSTW.2009.27
   Fatiregun D, 2005, WCRE: 12TH WORKING CONFERENCE ON REVERSE ENGINEERING 2005, PROCEEDINGS, P3
   Fatiregun D, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P65
   Fatiregun D, 2003, LECT NOTES COMPUT SC, V2724, P2511
   Faunes Martin, 2013, Theory and Practice of Model Transformations. 6th International Conference, ICMT 2013. Proceedings: LNCS 7909, P17, DOI 10.1007/978-3-642-38883-5_2
   Faunes M, 2013, LECT NOTES COMPUT SC, V8107, P187, DOI 10.1007/978-3-642-41533-3_12
   Faunes M, 2012, IEEE INT CONF AUTOM, P250, DOI 10.1145/2351676.2351714
   FAVRE JM, 2004, P UML2004 INT WORKSH
   FEO TA, 1995, J GLOBAL OPTIM, V6, P109, DOI 10.1007/BF01096763
   FEO TA, 1989, OPER RES LETT, V8, P67, DOI 10.1016/0167-6377(89)90002-3
   Fleck M., 2015, Proc. of NasBASE, P1
   Fleurey F, 2004, SIVOES-MODEVA 2004, PROCEEDINGS, P29, DOI 10.1109/MODEVA.2004.1425846
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   Ghaith Shadi, 2012, Search Based Software Engineering. Proceedings of the 4th International Symposium (SSBSE 2012), P121, DOI 10.1007/978-3-642-33119-0_10
   Ghannem Adnane, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P96, DOI 10.1007/978-3-642-39742-4_9
   Ghannem Adnane., 2011, P C CTR ADV STUDIES, P175
   GLOVER F, 1986, COMPUT OPER RES, V13, P533, DOI 10.1016/0305-0548(86)90048-1
   Goldsby HJ, 2008, LECT NOTES COMPUT SC, V5301, P568, DOI 10.1007/978-3-540-87875-9_40
   Goldsby HeatherJ., 2008, P 5 IEEE INT C AUTON, P87
   Gomez Juan Jose Cadavid, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P131, DOI 10.1109/ICST.2012.93
   Greenfield J., 2003, OOPSLA 03 COMPANION, P16, DOI DOI 10.1145/949344.949348
   Gyapay S., 2004, Electronic Notes in Theoretical Computer Science, V109, P137
   Hansel J, 2014, P 7 INT WORKSH SEARC, P31
   Harman M., 2012, 2012 Proceedings of the First International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering (RAISE 2012), P1, DOI 10.1109/RAISE.2012.6227961
   Harman M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P5, DOI 10.1145/2648511.2648513
   Harman M., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P414, DOI 10.1109/ICSTW.2011.38
   Harman Mark, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P320, DOI 10.1007/978-3-540-78917-8_11
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M., 2002, GEN EV COMP C GECCO, P1351
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Harman M, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P1, DOI 10.1145/2593929.2600116
   Harman M, 2013, INT WORKS EMERG TREN, P1
   Harman M, 2013, J SYST SOFTWARE, V86, P2225, DOI 10.1016/j.jss.2012.10.027
   Harman M, 2012, INT SYMP EMP SOFTWAR, P1, DOI 10.1145/2372251.2372253
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Harman M, 2012, LECT NOTES COMPUT SC, V7007, P1
   Harman M, 2007, INT C PROGRAM COMPRE, P3
   Hegedus Abel, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P173, DOI 10.1109/ASE.2011.6100051
   Hemmati Hadi., 2010, Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, P267
   Herrmannsdoerfer M, 2009, LECT NOTES COMPUT SC, V5653, P52, DOI 10.1007/978-3-642-03013-0_4
   Herrmannsdorfer Markus, 2014, Coupled evolution of software metamodels and models, P33
   Holland J.H., 1992, Adaptation in Natural and Artificial Systems, DOI DOI 10.7551/MITPRESS/1090.001.0001
   Ipate F, 2008, ROM J INF SCI TECH, V11, P209
   Iqbal M.Z., 2012, Proceedings of the International Symposium on Software Testing and Analysis, P199
   Iqbal MZ, 2010, LECT NOTES COMPUT SC, V6394, P286
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jensen und A.C., 2010, Proceedings of the 12th Annual Conference on Genetic and Evolutionary Computation. GECCO '10, P1341
   Jie Zhang, 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P76, DOI 10.1109/IWAST.2012.6228994
   Jilani AA, 2014, LECT NOTES COMPUT SC, V8568, P17
   Kalaji Abdul Salam, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P232, DOI 10.1109/ICSTW.2010.25
   Kalaji AS, 2011, INFORM SOFTWARE TECH, V53, P1297, DOI 10.1016/j.infsof.2011.06.004
   Kappel Gerti, 2012, Conceptual Modelling and Its Theoretical Foundations. Essays Dedicated to Bernhard Thalheim on the Occasion of his 60th Birthday, P197, DOI 10.1007/978-3-642-28279-9_15
   Karaboga D., 2005, Technical Report-TR06
   Kenndy J., 1995, P ICNN 95 INT C NEUR, P1942
   Kent S., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P286
   Kessentini M., 2010, P 2 INT WORKSH BEH M
   Kessentini M., 2010, P 20 ANN INT C CTR A, P72
   Kessentini M, 2014, J SYST SOFTWARE, V97, P1, DOI 10.1016/j.jss.2014.06.040
   Kessentini M, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P51, DOI 10.1109/CMSBSE.2013.6604438
   Kessentini M, 2013, GECCO'13: PROCEEDINGS OF THE 2013 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1453
   Kessentini M, 2012, SOFTW SYST MODEL, V11, P209, DOI 10.1007/s10270-010-0175-7
   Kessentini M, 2011, AUTOMAT SOFTW ENG, V18, P199, DOI 10.1007/s10515-010-0079-3
   Kessentini M, 2008, LECT NOTES COMPUT SC, V5301, P159, DOI 10.1007/978-3-540-87875-9_12
   Kessentini W, 2016, LECT NOTES COMPUT SC, V9764, P138, DOI 10.1007/978-3-319-42061-5_9
   Kilic H, 2011, LECT NOTES COMPUT SC, V6956, P271, DOI 10.1007/978-3-642-23716-4_26
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Kirsopp Colin., 2002, GECCO 02, P1367
   Koc E, 2012, COMPUTER AND INFORMATION SCIENCES II, P59, DOI 10.1007/978-1-4471-2155-8_7
   Koc E, 2012, LECT NOTES COMPUT SC, V7331, P318, DOI 10.1007/978-3-642-30976-2_38
   Kolovos D S., 2013, Proceedings of the Workshop on Scalability in Model Driven Engineering. BigMDE'13, V2, P1
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   KOZA JR, 1994, STAT COMPUT, V4, P87, DOI 10.1007/BF00175355
   Kruse S, 2015, ONLINE AUSG COEVOLUT
   Kuhne T., 2006, Softw Syst Model, V5, P369, DOI [DOI 10.1007/S10270-006-0017-9, 10.1007/s10270-006-0017-9]
   Kulkarni P, 2004, ACM SIGPLAN NOTICES, V39, P171, DOI 10.1145/996893.996863
   Kuster J.M., 2004, UML 2004
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Lee S, 2011, SOFTWARE PRACT EXPER, V41, P521, DOI 10.1002/spe.1031
   Lefticaru Raluca, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P525, DOI 10.1109/ICST.2008.32
   Li HZ, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P255
   Li HZ, 2005, LECT NOTES COMPUT SC, V3502, P69
   Lopez-Herrejon RE, 2015, INFORM SOFTWARE TECH, V61, P33, DOI 10.1016/j.infsof.2015.01.008
   Macías-Escrivá FD, 2013, EXPERT SYST APPL, V40, P7267, DOI 10.1016/j.eswa.2013.07.033
   Mahouachi R., 2013, P 15 ANN C COMPANION, P205, DOI [10.1145/2464576.2464680, DOI 10.1145/2464576.2464680]
   Mancoridis S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P50, DOI 10.1109/ICSM.1999.792498
   Mansoor U, 2015, J SYST SOFTWARE, V103, P423, DOI 10.1016/j.jss.2014.11.043
   Mansouri S.A., 2009, TR0903 KINGS COLL LO
   Martens A., 2010, P 1 JOINT WOSP SIPEW, P105, DOI [DOI 10.1145/1712605.1712624, 10.1145]
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   McKinley PK, 2012, J INTERNET SERV APPL, V3, P51, DOI 10.1007/s13174-011-0049-4
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Mellor S.J., 2004, MDA DISTILLED PRINCI, V88
   Mendez D., 2010, MOD EV WORKSH OLS NO
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Mens T., 2007, P 1 WORKSH REF TOOLS
   Mens T., 2014, Studying Evolving Software Ecosystems based on Ecological Models, P297, DOI DOI 10.1007/978-3-642-45398-4_10
   Mens T., 2007, 1 WORKSH REF TOOLS W, P25
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Miller W., 1976, IEEE Transactions on Software Engineering, VSE-2, P223, DOI 10.1109/TSE.1976.233818
   Misbhauddin M, 2015, EMPIR SOFTW ENG, V20, P206, DOI 10.1007/s10664-013-9283-7
   Mkaouer MW, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P61, DOI 10.1109/CMSBSE.2013.6605712
   Mkaouer MW, 2014, LECT NOTES COMPUT SC, V8636, P168
   Mkaouer W, 2014, GECCO'14: PROCEEDINGS OF THE 2014 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1263, DOI 10.1145/2576768.2598366
   Mladenovic N, 1997, COMPUT OPER RES, V24, P1097, DOI 10.1016/S0305-0548(97)00031-2
   Moghadam IH, 2012, EUR CON SFTWR MTNCE, P43, DOI 10.1109/CSMR.2012.15
   Moghadam IH, 2011, LECT NOTES COMPUT SC, V6956, P70, DOI 10.1007/978-3-642-23716-4_9
   Moghadam Iman Hemati., 2011, Proceeding of the 4th workshop on Refactoring tools - WRT'11, page, P41
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Muller PA, 2012, SOFTW SYST MODEL, V11, P347, DOI 10.1007/s10270-010-0172-x
   Mussbacher G, 2014, LECT NOTES COMPUT SC, V8767, P183, DOI 10.1007/978-3-319-11653-2_12
   Nisbet A, 1998, LECT NOTES COMPUT SC, V1401, P987, DOI 10.1007/BFb0037253
   O'Keeffe M, 2008, J SOFTW MAINT EVOL-R, V20, P345, DOI 10.1002/smr.378
   Ofria C, 2004, ARTIF LIFE, V10, P191, DOI 10.1162/106454604773563612
   OMG, 2013, OMG MET FAC MOF COR
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Otero Fernando E.B., 2010, P 2 INT S SEARCH BAS
   Ouni A, 2013, GECCO'13: PROCEEDINGS OF THE 2013 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1461
   Ouni A, 2013, EUR CON SFTWR MTNCE, P221, DOI 10.1109/CSMR.2013.31
   Paige R.F., 2013, 1 INT WORKSH COMB MO
   Passino KM, 2002, IEEE CONTR SYST MAG, V22, P52, DOI 10.1109/MCS.2002.1004010
   Poulding S., 2013, THESIS
   Prasanna M., 2009, INT J ADV SOFT COMPU, V1, P19
   Räihä O, 2010, COMPUT SCI REV, V4, P203, DOI 10.1016/j.cosrev.2010.06.001
   Ramirez A.J., 2009, P 4 INT WORKSH MOD R
   Ramirez AJ, 2011, LECT NOTES COMPUT SC, V6981, P501, DOI 10.1007/978-3-642-24485-8_37
   Ramirez AJ, 2009, ACM/IEEE SIXTH INTERNATIONAL CONFERENCE ON AUTONOMIC COMPUTING AND COMMUNICATIONS (ICAC '09), P97
   Rechenberg Ingo, 1973, EVOLUTIONSSTRATEGIE
   Rose L.M., 2010, MOD EV WORKSH COL IN
   Rose L.M., 2009, P MOD EV MODSE MCCM
   Rose LM, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P16, DOI 10.1109/CMSBSE.2013.6604431
   Rumbaugh J., 1991, OBJECT ORIENTED MODE
   Ryan C., 2000, AUTOMATIC REENGINEER, V2
   Saada H, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P174
   Saada H, 2013, IEEE INT CONF AUTOM, P688, DOI 10.1109/ASE.2013.6693134
   Sabharwal S., 2011, INT J COMPUTER SCI I, V8, P433
   Saeed A, 2016, APPL SOFT COMPUT, V49, P1094, DOI 10.1016/j.asoc.2016.08.030
   Sahin D, 2015, J SOFTW-EVOL PROC, V27, P821, DOI 10.1002/smr.1735
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Shelburg Jeffery, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P209, DOI 10.1007/978-3-642-39742-4_16
   Shirole M., 2011, Proceedings of the 4th india software engineering conference, P125
   Shirole M, 2010, COMM COM INF SC, V94, P53, DOI 10.1007/978-3-642-14834-7_6
   Simon D, 2008, IEEE T EVOLUT COMPUT, V12, P702, DOI 10.1109/TEVC.2008.919004
   Simons Chris, 2015, Search-Based Software Engineering. 7th International Symposium, SSBSE 2015. Proceedings: LNCS 9275, P47, DOI 10.1007/978-3-319-22183-0_4
   Simons CL, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P49, DOI 10.1109/CMSBSE.2013.6604437
   Sttzle T., 1998, THESIS
   Sun Y, 2009, LECT NOTES COMPUT SC, V5795, P712, DOI 10.1007/978-3-642-04425-0_58
   Sztipanovits J, 1997, COMPUTER, V30, P110, DOI 10.1109/2.585163
   Taentzer G, 2014, SOFTW SYST MODEL, V13, P239, DOI 10.1007/s10270-012-0248-x
   Talbi E-G, 2009, Metaheuristics: from Design to Implementation, DOI DOI 10.1002/9780470496916
   Truyen Frank., 2006, The fast guide to model driven architecture
   Utting M., 2007, PRACTICAL MODEL BASE
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Van Der Straeten R, 2009, LECT NOTES COMPUT SC, V5421, P35, DOI 10.1007/978-3-642-01648-6_4
   Varró D, 2006, LECT NOTES COMPUT SC, V4199, P410
   Varró D, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P978, DOI 10.1145/1244002.1244217
   Voudouris C, 1999, EUR J OPER RES, V113, P469, DOI 10.1016/S0377-2217(98)00099-X
   Voudouris C., 1997, THESIS
   Wang W., 2013, MDEBE@MoDELS, P42
   White David R., 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P16, DOI 10.1007/978-3-642-39742-4_3
   Williams J.R., 2012, 6th International Workshop on Models and Evolution, Proceedings of the ACM/IEEE 15th International Conference on Model Driven Engineering Languages and Systems, Innsbruck Austria, 15 October 2012, P39
   Williams J.R., 2013, COLLEGIUM, P76
   Wimmer Manuel., 2007, System Sciences, p285b, DOI DOI 10.1109/HICSS.2007.572
   Yano T., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P164, DOI 10.1109/ICSTW.2011.37
   Yano Thaise, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P236, DOI 10.1109/ICSTW.2010.52
   Zhang Y, 2008, LECT NOTES COMPUT SC, V5025, P88, DOI 10.1007/978-3-540-69062-7_8
NR 229
TC 49
Z9 54
U1 0
U2 12
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2017
VL 24
IS 2
BP 233
EP 294
DI 10.1007/s10515-017-0215-4
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ES3FH
UT WOS:000399413800001
DA 2024-07-18
ER

PT J
AU Armando, A
   Benerecetti, M
   Mantovani, J
AF Armando, Alessandro
   Benerecetti, Massimo
   Mantovani, Jacopo
TI Counterexample-guided abstraction refinement for linear programs with
   arrays
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
ID SOFTWARE MODEL CHECKING; VERIFICATION; TOOL
AB Predicate abstraction refinement is one of the leading approaches to software verification. The key idea is to abstract the input program into a Boolean Program (i.e. a program whose variables range over the Boolean values only and model the truth values of predicates corresponding to properties of the program state), and refinement searches for new predicates in order to build a new, more refined abstraction. Thus Boolean programs are commonly employed as a simple, yet useful abstraction. However, the effectiveness of predicate abstraction refinement on programs that involve a tight interplay between data-flow and control-flow is still to be ascertained. We present a novel counterexample guided abstraction refinement procedure for Linear Programs with arrays, a fragment of the C programming language where variables and array elements range over a numeric domain and expressions involve linear combinations of variables and array elements. In our procedure the input program is abstracted w.r.t. a family of sets of array indices, the abstraction is a Linear Program (without arrays), and refinement searches for new array indices. We use Linear Programs as the target of the abstraction (instead of Boolean programs) as they allow to express complex correlations between data and control. Thus, unlike the approaches based on predicate abstraction, our approach treats arrays precisely. This is an important feature as arrays are ubiquitous in programming. We provide a precise account of the abstraction, Model Checking, and refinement processes, discuss their implementation in the EUREKA tool, and present a detailed analysis of the experimental results confirming the effectiveness of our approach on a number of programs of interest.
C1 [Armando, Alessandro; Mantovani, Jacopo] Univ Genoa, Genoa, Italy.
   [Armando, Alessandro] FBK IRST, Trento, Italy.
   [Benerecetti, Massimo] Univ Naples Federico II, Naples, Italy.
C3 University of Genoa; Fondazione Bruno Kessler; FBK-ICT - Center for
   Information & Communication Technology; University of Naples Federico II
RP Armando, A (corresponding author), Univ Genoa, Genoa, Italy.
EM armando@unige.it; bene@na.infn.it; jacopo.mantovani@unige.it
OI Benerecetti, Massimo/0000-0003-4664-6061; Armando,
   Alessandro/0000-0002-5246-2157
CR [Anonymous], SNU REAL TIM BENCHM
   [Anonymous], CP CV 04
   [Anonymous], 148 HP LABS
   [Anonymous], LNCS
   [Anonymous], PADL
   [Anonymous], P POPL VEN IT
   [Anonymous], ENTCS
   [Anonymous], LNCS
   [Anonymous], LNCS
   [Anonymous], GRAY CODE DICT ALGOR
   [Anonymous], DO185A RTCA INC
   [Anonymous], 24 INT C COMP AID VE
   [Anonymous], OSDI
   [Anonymous], LNCS
   [Anonymous], 1968, ZAPISKI NAUCHNYH SEM
   Bagnara R, 2002, LECT NOTES COMPUT SC, V2477, P213
   Ball T., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P103
   Ball T., 2006, Operating Systems Review, V40, P73, DOI 10.1145/1218063.1217943
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   Barrett C, 2004, LECT NOTES COMPUT SC, V3114, P515
   Basler G, 2009, LECT NOTES COMPUT SC, V5643, P64, DOI 10.1007/978-3-642-02658-4_9
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Beyer D., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P189
   Beyer Dirk, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P25, DOI 10.1109/FMCAD.2009.5351147
   BRESENHAM JE, 1965, IBM SYST J, V4, P25, DOI 10.1147/sj.41.0025
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Bultan T, 1999, ACM T PROGR LANG SYS, V21, P747, DOI 10.1145/325478.325480
   Chaki S, 2004, FORM METHOD SYST DES, V25, P129, DOI 10.1023/B:FORM.0000040026.56959.91
   Chen H., 2002, P 9 ACM C COMPUTER C, P235
   Clarke E, 2005, LECT NOTES COMPUT SC, V3440, P570
   Clarke E., 2003, Proceedings 2003. Design Automation Conference (IEEE Cat. No.03CH37451), P368
   Clarke Edmund M., 2001, Model Checking
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Coen-Porisini A., 2001, Software Engineering Notes, V26, P142, DOI 10.1145/503271.503230
   Collavizza H, 2006, LECT NOTES COMPUT SC, V3920, P182
   Cook B, 2005, LECT NOTES COMPUT SC, V3576, P296
   Cordeiro L, 2009, IEEE INT CONF AUTOM, P137, DOI 10.1109/ASE.2009.63
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2011, ACM SIGPLAN NOTICES, V46, P105, DOI 10.1145/1925844.1926399
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Esparza J, 2001, LECT NOTES COMPUT SC, V2102, P324
   Falke S, 2013, LECT NOTES COMPUT SC, V7795, P623, DOI 10.1007/978-3-642-36742-7_48
   Flanagan C, 2004, SCI COMPUT PROGRAM, V50, P253, DOI 10.1016/j.scico.2004.01.006
   Flanagan C, 2003, LECT NOTES COMPUT SC, V2618, P189
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Gopan D, 2005, ACM SIGPLAN NOTICES, V40, P338, DOI 10.1145/1047659.1040333
   Halbwachs N, 2008, ACM SIGPLAN NOTICES, V43, P339, DOI 10.1145/1379022.1375623
   Henzinger T. A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P526
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Ivancic F, 2005, PR IEEE COMP DESIGN, P297, DOI 10.1109/ICCD.2005.77
   Keller CW, 2005, LECT NOTES COMPUT SC, V3440, P563
   McMillan KennethLauchlin., 1992, SYMBOLIC MODEL CHECK
   Cardona PAN, 2015, CUAD ACT, P154
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Xie YC, 2005, LECT NOTES COMPUT SC, V3576, P139
NR 56
TC 1
Z9 2
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD APR
PY 2014
VL 21
IS 2
SI SI
BP 225
EP 285
DI 10.1007/s10515-013-0132-0
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AD6AB
UT WOS:000333333800004
DA 2024-07-18
ER

PT J
AU Bocic, I
   Bultan, T
   Rosner, N
AF Bocic, Ivan
   Bultan, Tevfik
   Rosner, Nicolas
TI Inductive verification of data model invariants in web applications
   using first-order logic
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Data model; Automated verification; First-order logic; Many-sorted logic
ID DYNALLOY; ALLOY
AB Modern software applications store their data in remote cloud servers. Users interact with these applications using web browsers or thin clients running on mobile devices. A key concern for these applications is the correctness of the actions that update the data store, which are triggered by user requests. Considering that modern applications store and manage data for millions (even billions) of users, misuse or loss of user data can have catastrophic consequences. In this paper, we focus on automated discovery of data store bugs in applications that use development frameworks that are RESTful, enforce the Model-View-Controller architecture, and use Object Relational Mapping libraries to manipulate data. We present a formal data model for data stores and data store manipulation in such applications. We have developed a framework for verification of data models via translation to First Order Logic (FOL), followed by automated theorem proving. Due to the undecidability of FOL, this automated approach does not always produce a conclusive answer. We investigate the use of many-sorted logic in data model verification in order to improve the effectiveness of this approach. Many-sorted logic allows us to specify type information explicitly, thus lightening the burden of reasoning about type information during theorem proving. Our experimental results demonstrate that our verification approach is scalable to real-world web applications and is able to detect bugs in them.
C1 [Bocic, Ivan] Google Inc, Mountain View, CA USA.
   [Bultan, Tevfik; Rosner, Nicolas] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
C3 Google Incorporated; University of California System; University of
   California Santa Barbara
RP Rosner, N (corresponding author), Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
EM bocic.ivan@gmail.com; bultan@cs.ucsb.edu; rosner@cs.ucsb.edu
FU NSF [CCF-1423623]
FX This material is based on research sponsored by NSF under Grant
   CCF-1423623.
CR Ahrendt W., 2005, Softw. Syst. Model., V4, P32
   [Anonymous], 2013, WEB FRAM PERF DEADL
   [Anonymous], 2011, P 2011 INT S SOFTW T
   [Anonymous], 2000, ARCHITECTURAL STYLES
   [Anonymous], 2015, TPTP SYNTAX
   [Anonymous], 2013, FAT FREE CRM RUB RAI
   Ball T, 2014, ACM SIGPLAN NOTICES, V49, P282, DOI [10.1145/2594291.2594317, 10.1145/2666356.2594317]
   BARNETT M, 2005, LNCS, V4111, P364, DOI DOI 10.1007/11804192_17
   Blanchette Jasmin Christian, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P345, DOI 10.1007/978-3-642-32347-8_24
   Bocic I, 2016, THESIS
   Bocic I., 2015, 37 INT C SOFTW ENG I
   Bocic I., 2015, 30 IEEE ACM INT C AU
   Bocic I, 2017, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2017.72
   Bocic I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P620, DOI 10.1145/2568225.2568281
   Bocic I, 2015, LECT NOTES COMPUT SC, V9058, P393, DOI 10.1007/978-3-319-17524-9_27
   Claessen K, 2011, LECT NOTES ARTIF INT, V6803, P207, DOI 10.1007/978-3-642-22438-6_17
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Deutsch A., 2006, SIGMOD 06, P772
   Deutsch A., 2008, IEEE Data Eng. Bull, V31, P35
   Deutsch A, 2007, J COMPUT SYST SCI, V73, P442, DOI 10.1016/j.jcss.2006.10.006
   Dutertre B, 2006, LECT NOTES COMPUT SC, V4144, P81, DOI 10.1007/11817963_11
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Frias MF, 2007, ACM T SOFTW ENG METH, V17, DOI 10.1145/1314493.1314497
   Frias MF, 2005, PROC INT CONF SOFTW, P442
   Galeotti JP, 2006, INT FED INFO PROC, V227, P249
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Kahsai T, 2016, LECT NOTES COMPUT SC, V9779, P352, DOI 10.1007/978-3-319-41528-4_19
   Karaca E, 2016, COLLECTION LIST AWES
   Kovács G, 2013, ADV E-BUS RES, P1, DOI 10.4018/978-1-4666-4181-5.ch001
   KRASNER GE, 1988, J OBJECT-ORIENT PROG, V1, P41
   Kuncak V, 2006, IEEE T SOFTWARE ENG, V32, P988, DOI 10.1109/TSE.2006.125
   Lesani M, 2014, LECT NOTES COMPUT SC, V8559, P550, DOI 10.1007/978-3-319-08867-9_37
   Near J. P., 2012, P ACM SIGSOFT 20 INT
   Nijjar J, 2013, FME WORKS FORM, P29, DOI 10.1109/FormaliSE.2013.6612274
   Nijjar J, 2012, IEEE INT CONF AUTOM, P210, DOI 10.1145/2351676.2351706
   Object Management Group, UML SPEC
   PELLETIER F, 2019, AI COMMUN, V15, P79
   Quine W.V., 1954, J. Symb. Log, V19, P177, DOI [10.2307/2268615, DOI 10.2307/2268615]
   RICHTERS M, 2000, P 3 INT C UN MOD LAN
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   SimilarTech, 2018, WEBS TECHN DET TRACK
   Stickel M., 1994, Automated Deduction - CADE-12. 12th International Conference on Automated Deduction. Proceedings, P341
   Sutcliffe G, 2006, AI COMMUN, V19, P35
   Sutcliffe G., 1994, Automated Deduction - CADE-12. 12th International Conference on Automated Deduction. Proceedings, P252
   Sutcliffe G, 2012, LECT NOTES COMPUT SC, V7180, P406, DOI 10.1007/978-3-642-28717-6_32
   Warmer J.B., 1998, OBJECT CONSTRAINT LA
   Weidenbach C, 2016, SPASS INPUT SYNTAX V
   Weidenbach C, 2009, LECT NOTES ARTIF INT, V5663, P140, DOI 10.1007/978-3-642-02959-2_10
   Zee K, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P349, DOI 10.1145/1375581.1375624
NR 52
TC 1
Z9 3
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2019
VL 26
IS 2
BP 379
EP 416
DI 10.1007/s10515-018-0249-2
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HZ9SC
UT WOS:000469196400005
DA 2024-07-18
ER

PT J
AU Tarvo, A
   Reiss, SP
AF Tarvo, Alexander
   Reiss, Steven P.
TI Automatic performance prediction of multithreaded programs: a simulation
   approach
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Program analysis; Performance; Modeling; Simulation
AB The performance of multithreaded programs is often difficult to understand and predict. Multiple threads engage in synchronization operations and use hardware simultaneously. This results in a complex non-linear dependency between the configuration of a program and its performance. To better understand this dependency a performance prediction model is used. Such a model predicts the performance of a system for different configurations. Configurations reflect variations in the workload, different program options such as the number of threads, and characteristics of the hardware. Performance models are complex and require a solid understanding of the program's behavior. As a result, building models of large applications manually is extremely time-consuming and error-prone. In this paper we present an approach for building performance models of multithreaded programs automatically. We employ hierarchical discrete-event models. Different tiers of the model simulate different factors that affect performance of the program, while interaction between the model tiers simulates mutual influence of these factors on performance. Our framework uses a combination of static and dynamic analyses of a single representative run of a system to collect information required for building the performance model. This includes information about the structure of the program, the semantics of interaction between the program's threads, and resource demands of individual program's components. In our experiments we demonstrate that models accurately predict the performance of various multithreaded programs, including complex industrial applications.
C1 [Tarvo, Alexander] Google Inc, Kirkland, WA 98033 USA.
   [Reiss, Steven P.] Brown Univ, Providence, RI 02912 USA.
C3 Google Incorporated; Brown University
RP Tarvo, A (corresponding author), Google Inc, Kirkland, WA 98033 USA.
EM alextarvo@gmail.com; spr@cs.brown.edu
FU National Science Foundation [CCF1130822]
FX We thank Dr. Eno Thereska for his insightful comments and feedback on
   the paper. This work is supported by the National Science Foundation
   through Grant CCF1130822.
CR Akdere M, 2012, PROC INT CONF DATA, P390, DOI 10.1109/ICDE.2012.64
   Anderson E., 2001, HPLSSP20014
   [Anonymous], 2000, Digital Signal Processing-A Computer Science Perceptive
   [Anonymous], P OSDI
   [Anonymous], 1967, AFIPS, DOI 10.1145/1465482.1465560
   BARNES J, 1986, NATURE, V324, P446, DOI 10.1038/324446a0
   Bause F., 1993, Proceedings. 5th International Workshop on Petri Nets and Performance Models (Cat. No.93TH0558-7), P14, DOI 10.1109/PNPM.1993.393439
   Bennani MN, 2005, ICAC 2005: Second International Conference on Autonomic Computing, Proceedings, P229
   Brosig F., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P183, DOI 10.1109/ASE.2011.6100052
   Brosig Fabian, 2009, P 1 INT WORKSH RUN T
   Brünink M, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P39, DOI 10.1145/2950290.2950314
   Bull J. M., 1999, Proceedings of the ACM 1999 Java Grande Conference, P81, DOI 10.1145/304065.304103
   Chen Feifei., 2014, Proceedings of the 5th ACM/SPEC international conference on Performance engineering. (Dublin, Irlande, P39
   Chen SP, 2005, J SYST SOFTWARE, V74, P35, DOI 10.1016/j.jss.2003.05.005
   Cheung L., 2011, Proceedings of the 2011 IEEE 19th International Symposium on Modelling, Analysis & Simulation of Computer and Telecommunication Systems (MASCOTS 2011), P75, DOI 10.1109/MASCOTS.2011.66
   Chun B., 2010, MANTIS PREDICTING SY
   Coppa E, 2012, ACM SIGPLAN NOTICES, V47, P89, DOI 10.1145/2345156.2254076
   Curtsinger C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P184, DOI 10.1145/2815400.2815409
   Duggan J., 2011, Proceedings of the 2011 international conference on Management of data, P337
   Feng WY, 2008, NONLINEAR ANAL-HYBRI, V2, P272, DOI 10.1016/j.nahs.2006.04.012
   Ferrari D., 1983, Measurement and Tuning of Computer Systems
   Franks Greg, 1998, P 1 INT WORKSH SOFTW, P120
   Ganapathi A, 2010, I C DATA ENGIN WORKS, P87, DOI 10.1109/ICDEW.2010.5452742
   Ganapathi A, 2009, PROC INT CONF DATA, P592, DOI 10.1109/ICDE.2009.130
   Goldsmith Simon F., 2007, P 6 JOINT M EUR SOFT, P395, DOI 10.1145/1287624.1287681
   Gulur Nagendra, 2014, ACM SIGMETRICS Performance Evaluation Review, V42, P505, DOI 10.1145/2591971.2591995
   Happe J, 2010, LECT NOTES COMPUT SC, V6093, P20, DOI 10.1007/978-3-642-13821-8_4
   Herodotou H, 2011, PROC VLDB ENDOW, V4, P1111
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   Huang HF, 2011, INT J DISTRIB SENS N, DOI 10.1155/2011/412146
   Israr T., 2005, ACM WOSP 05, P147
   Jarvis SA, 2008, CONCURR COMP-PRACT E, V20, P195, DOI 10.1002/cpe.1191
   Jian Chen, 2011, Performance Evaluation Review, V39, P1, DOI 10.1145/2007116.2007118
   Kounev S., P 3 JOINT WOSP SIPEW, DOI [10.1145/2188286.2188290, DOI 10.1145/2188286.2188290]
   Koziolek H., 2006, ENTCS, V176, P69
   Kristensen L. M., 1998, International Journal on Software Tools for Technology Transfer, V2, P98, DOI 10.1007/s100090050021
   Law A.M., 1997, SIMULATION MODELING
   Lazowska E. D., 1984, COMPUTER SYSTEM ANAL
   Lee BC, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P249, DOI 10.1145/1229428.1229479
   Liu Y, 2005, IEEE T SOFTWARE ENG, V31, P928, DOI 10.1109/TSE.2005.127
   Menasce D. A., 2006, INT CMG C 2006
   Moseley Tipp., 2007, Proceedings of the International Conference on Computing Frontiers, CF, P143
   Narayanan D, 2005, MASCOTS 2005:13th IEEE International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, P239, DOI 10.1109/MASCOTS.2005.21
   Nguyen H. Q., 2011, ICPE, P73
   Nguyen HaiQuang., 2012, Proceedings of the 3rd ACM/SPEC International Conference on Performance Engineering, ICPE'12, P229
   Ohmann T., 2014, P IEEE ACM INT C AUT, P19, DOI [10.1145/2642937.2642988, DOI 10.1145/2642937.2642988, 10.1145/2642937, DOI 10.1145/2642937]
   Peierls T., 2005, JAVA CONCURRENCY PRA
   Reiss S., 2013, P 1 IEEE WORK C SOFT
   Reiss SP, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P302
   Reiss SP, 2001, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2001.919096
   Rolia J, 2009, P 4 INT ICST C PERF
   Roy N., 2008, MASCOTS, P317
   Strebelow R., 2012, 2012 IEEE 20th International Symposium on Modelling, Analysis & Simulation of Computer and Telecommunication Systems (MASCOTS), P251, DOI 10.1109/MASCOTS.2012.37
   Tallent NR, 2009, ACM SIGPLAN NOTICES, V44, P229, DOI 10.1145/1594835.1504210
   Tarvo A., 2012, Proceedings of the third joint WOSP/SIPEW international conference on Performance Engineering, ICPE '12, (New York, NY, USA), P217
   Tarvo A., 2014, ASE, P7
   Teng QM, 2010, IBM J RES DEV, V54, DOI 10.1147/JRD.2010.2058481
   Thakkar D., 2008, Proceedings of 7th International Workshop on Software and Performance, P55
   Thereska E., P INT S MOD AN SIM C, P1
   Thereska E, 2008, PERF E R SI, V36, P253, DOI 10.1145/1384529.1375486
   Van der Mei RD, 2001, TELECOMMUN SYST, V16, P361, DOI 10.1023/A:1016667027983
   Varga A., 2008, An Overview of the Omnet++ Simulation Environment, P1
   Wang MZ, 2004, IEEE COMPUTER SOCIETY'S 12TH ANNUAL INTERNATIONAL SYMPOSIUM ON MODELING, ANALYSIS, AND SIMULATION OF COMPUTER AND TELECOMMUNICATIONS SYSTEMS - PROCEEDINGS, P588
   Westermann D, 2012, IEEE INT CONF AUTOM, P190, DOI 10.1145/2351676.2351703
   WOODSIDE CM, 1995, IEEE T COMPUT, V44, P20, DOI 10.1109/12.368012
   Woodside M, 2001, PERFORM EVALUATION, V45, P107, DOI 10.1016/S0166-5316(01)00033-5
   Xu J., 2005, P C SPEC VER COMP BA
   Zaparanuks D, 2012, ACM SIGPLAN NOTICES, V47, P67, DOI 10.1145/2345156.2254074
   [No title captured]
NR 69
TC 1
Z9 1
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2018
VL 25
IS 1
BP 101
EP 155
DI 10.1007/s10515-017-0214-5
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS2DV
UT WOS:000419589600004
DA 2024-07-18
ER

PT J
AU Rodríguez, RJ
AF Rodriguez, Ricardo J.
TI A Petri net tool for software performance estimation based on upper
   throughput bounds
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Petri net; UML; Software performance; Optimization
ID SIMULATION
AB Functional and non-functional properties analysis (i.e., dependability, security, or performance) ensures that requirements are fulfilled during the design phase of software systems. However, the Unified Modelling Language (UML), standard de facto in industry for software systems modelling, is unsuitable for any kind of analysis but can be tailored for specific analysis purposes through profiling. For instance, the MARTE profile enables to annotate performance data within UML models that can be later transformed to formal models (e.g., Petri nets or timed automatas) for performance evaluation. A performance (or throughput) estimation in such models normally relies on a whole exploration of the state space, which becomes unfeasible for large systems. To overcome this issue upper throughput bounds are computed, which provide an approximation to the real system throughput with a good complexity-accuracy trade-off. This paper introduces a tool, named PeabraiN, that estimates the performance of software systems via their UML models. To do so, UML models are transformed to Petri nets where performance is estimated based on upper throughput bounds computation. PeabraiN also allows to compute other features on Petri nets, such as the computation of upper and lower marking place bounds, and to simulate using an approximate (continuous) method. We show the applicability of PeabraiN by evaluating the performance of a building closed circuit TV system.
C1 [Rodriguez, Ricardo J.] Univ Zaragoza, Dept Informat & Ingn Sistemas, Maria de Luna 1, Zaragoza 50018, Spain.
C3 University of Zaragoza
RP Rodríguez, RJ (corresponding author), Univ Zaragoza, Dept Informat & Ingn Sistemas, Maria de Luna 1, Zaragoza 50018, Spain.
EM rjrodriguez@unizar.es
RI Rodriguez, Ricardo/GXF-0596-2022
FU EU [644869]; Spanish MICINN [TIN2014-58457-R]
FX The author would like to thank Ivan Pamplona, an undergraduate student
   who helped in the implementation of PeabraiN enhancements. This work was
   partially supported by the EU Horizon 2020 research and innovation
   programme under Grant Agreement No. 644869 (DICE) and by the Spanish
   MICINN project CyCriSec (TIN2014-58457-R).
CR [Anonymous], FORMAL110602 OMG
   [Anonymous], 2012, JAMA: Java Matrix Package
   [Anonymous], 2 INT WORKSH NONF SY
   Baarir Soheib, 2009, Performance Evaluation Review, V36, P4, DOI 10.1145/1530873.1530876
   Bernardi S, 2007, J SYST SOFTWARE, V80, P1843, DOI 10.1016/j.jss.2007.02.029
   Bernardi S, 2011, SOFTW SYST MODEL, V10, P313, DOI 10.1007/s10270-009-0128-1
   Bonet P., 2007, P 23 LAT AM C INF CL
   Bonet P., 2012, P 3 ACM SPEC INT C P, P245
   Bouma H, 2013, PROC SPIE, V8745, DOI 10.1117/12.2015869
   CAMPOS J, 1993, PERFORM EVALUATION, V18, P3, DOI 10.1016/0166-5316(93)90024-O
   CAMPOS J, 1992, LECT NOTES COMPUT SC, V609, P352
   Chiola G., 1993, Proceedings. 5th International Workshop on Petri Nets and Performance Models (Cat. No.93TH0558-7), P128, DOI 10.1109/PNPM.1993.393428
   Delatour J, 2003, P 1 INT WORKSH VAL V, P94
   Distefano S, 2011, IEEE T SOFTWARE ENG, V37, P65, DOI 10.1109/TSE.2010.10
   Janicki R., 1994, Journal of Information Processing and Cybernetics, V30, P143
   Fecher H, 2005, LECT NOTES COMPUT SC, V3785, P52
   FLORIN G, 1989, IEEE T SOFTWARE ENG, V15, P367, DOI 10.1109/32.16598
   Garcia-Valles F., 1999, Proceedings 8th International Workshop on Petri Nets and Performance Models (Cat. No.PR00331), P104, DOI 10.1109/PNPM.1999.796557
   Gillespie DT, 2007, ANNU REV PHYS CHEM, V58, P35, DOI 10.1146/annurev.physchem.58.032806.104637
   Gillespie DT, 2008, LECT NOTES COMPUT SC, V5016, P125
   GILLESPIE DT, 1976, J COMPUT PHYS, V22, P403, DOI 10.1016/0021-9991(76)90041-3
   Gómez-Martínez E, 2006, LECT NOTES COMPUT SC, V4024, P401
   Hillah L.M., 2009, Petri Net Newsletter, V76, P9
   Koch Manuel., 2006, Software Systems Modeling, V5, P429, DOI DOI 10.1007/S10270-006-0030-Z
   Lagarde Francois., 2007, Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering, ASE'07, P445
   Liu Z, 1995, LECT NOTES COMPUT SC, V935, P316
   Llado C.M., 2011, P 2 ACM SPEC INT C P, P103, DOI DOI 10.1145/1958746.1958764
   Lopez-Grao J. P., 2004, Software Engineering Notes, V29, P25, DOI 10.1145/974043.974048
   Merseguer J, 2002, WODES'02: SIXTH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, PROCEEDINGS, P295, DOI 10.1109/WODES.2002.1167702
   MOLLOY MK, 1982, IEEE T COMPUT, V31, P913, DOI 10.1109/TC.1982.1676110
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   OMG, 2011, UN MOD LANG SUP OBJ
   Petriu D., 2003, UML REAL, P221
   Randimbivololona F, 2001, LECT NOTES COMPUT SC, V2000, P131
   Rodriguez R. J., 2012, 2012 12th International Conference on Application of Concurrency to System Design (ACSD), P142, DOI 10.1109/ACSD.2012.13
   Rodríguez RJ, 2013, IEEE T SYST MAN CY-S, V43, P1385, DOI 10.1109/TSMC.2013.2245118
   Rodríguez RJ, 2010, LECT NOTES COMPUT SC, V6342, P175
   Rodriguez RJ, 2010, P 2 INT WORKSH SOFTW, P42
   Selic B, 2007, 10th IEEE International Symposium on Object and Component-Oriented Real-Time Distributed Computing, Proceedings, P2, DOI 10.1109/ISORC.2007.10
   SILVA M, 1988, LECT NOTES COMPUT SC, V340, P386
   Smith CU, 2010, PERFORM EVALUATION, V67, P548, DOI 10.1016/j.peva.2010.01.006
   Tricas F., 2003, THESIS
   Woodside M., 2005, P 5 INT WORKSH SOFTW, P1, DOI [10.1145/1071021.1071022, 10.1145, DOI 10.1145/1071021.1071022]
NR 43
TC 8
Z9 9
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2017
VL 24
IS 1
BP 73
EP 99
DI 10.1007/s10515-015-0186-2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EI2DM
UT WOS:000392296800004
OA Green Published
DA 2024-07-18
ER

PT J
AU That, MTT
   Sadou, S
   Oquendo, F
   Fleurquin, R
AF Minh Tu Ton That
   Sadou, Salah
   Oquendo, Flavio
   Fleurquin, Regis
TI Preserving architectural decisions through architectural patterns
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Architectural decision; Pattern; Model driving engineering
AB Architectural decisions have emerged as a means to maintain the quality of the architecture during its evolution. One of the most important decisions made by architects are those about the design approach such as the use of patterns or styles in the architecture. The structural nature of this type of decisions give them the potential to be controlled systematically. In the literature, there are some works on the automation of architectural decision violation checking. In this paper we show that these works do not allow to detect all possible architectural decision violations. To solve this problem we propose an approach which: (i) describes architectural patterns that hold the architectural decision definition, (ii) integrates architectural decisions into an architectural model and, (iii) automates the architectural decision conformance checking. The approach is implemented using Eclipse modeling framework and its accompanying technologies. Starting from well-known architectural patterns, we show that we can formalize all those related to the structural aspect. Through two evaluations, we show that our approach can be adapted to different architecture paradigms and allows to detect more violations comparing to the existing approaches.
C1 [Minh Tu Ton That; Sadou, Salah; Oquendo, Flavio; Fleurquin, Regis] Univ Bretagne Sud, IRISA, Vannes, France.
RP That, MTT (corresponding author), Univ Bretagne Sud, IRISA, Vannes, France.
EM minh-tu.ton-that@irisa.fr; Salah.Sadou@irisa.fr;
   Flavio.Oquendo@irisa.fr; regis.fleurquin@irisa.fr
OI Sadou, Salah/0000-0001-8961-3142
CR Allen R.J., 1997, A Formal Approach to Software Architecture
   [Anonymous], 2006, TECHNICAL REPORT
   [Anonymous], 2011, ISO IEC IEEE 42010 2
   [Anonymous], SCA SERVICE COMPONEN
   [Anonymous], 1996, PATTERN ORIENTED SOF
   [Anonymous], 2003, TECHNICAL REPORT
   Avgeriou P., 2005, 10th European conference on pattern languages of programs (EuroPlop 2005), P1
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Capilla R., 2006, SIGSOFT SOFTW ENG NO, V31, P20
   Capilla R, 2011, LECT NOTES COMPUT SC, V6903, P303, DOI 10.1007/978-3-642-23798-0_33
   ELAASAR M, 2004, SCE0418 CARL U
   France RB, 2004, IEEE T SOFTWARE ENG, V30, P193, DOI 10.1109/TSE.2004.1271174
   Gamma E., 1993, ECOOP '93 - Object-Oriented Programming. 7th European Conference Proceedings, P406
   Garlan D, 2000, FDN COMPONENT BASED, P47
   Garlan David, 2010, SEI Series in Software Engineering, Vsecond
   Harrison NB, 2007, LECT NOTES COMPUT SC, V4758, P263
   Harrison NB, 2007, IEEE SOFTWARE, V24, P38, DOI 10.1109/MS.2007.124
   Hohpe G., 2012, Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions, V15
   Jansen A., 2007, WORKING IEEEIFIP C S, P4
   Jansen A, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P109
   Könemann P, 2010, LECT NOTES COMPUT SC, V6285, P246, DOI 10.1007/978-3-642-15114-9_19
   Kruchten P, 2006, LECT NOTES COMPUT SC, V4214, P43
   Kuster Martin, 2013, Software Architecture. 7th European Conference, ECSA 2013. Proceedings: LNCS 7584, P184, DOI 10.1007/978-3-642-39031-9_16
   Lucas FJ, 2009, INFORM SOFTWARE TECH, V51, P1631, DOI 10.1016/j.infsof.2009.04.009
   Lytra I., 2013, P 7 EUR C SOFTW ARCH
   Medvidovic N, 2002, ACM T SOFTW ENG METH, V11, P2, DOI 10.1145/504087.504088
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Minh Tu Ton That, 2012, 2012 Joint Working IEEE/IFIP Conference on Software Architecture (WICSA 2012) & European Conference on Software Architecture (ECSA 2012), P196, DOI 10.1109/WICSA-ECSA.212.28
   Muller PA, 2005, LECT NOTES COMPUT SC, V3713, P264, DOI 10.1007/11557432_19
   Savolainen J, 2010, LECT NOTES COMPUT SC, V6285, P425, DOI 10.1007/978-3-642-15114-9_37
   Shahin M, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P293, DOI 10.1109/WICSA.2009.5290823
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Tang A, 2007, J SYST SOFTWARE, V80, P918, DOI 10.1016/j.jss.2006.08.040
   That M. T. T., 2013, P 7 EUR C SOFTW ARCH
   Thomas E., 2009, DESIGN PATTERNS
   TIBERMACINE C, 2005, P 5 IEEE IFIP WORK C, P121
   Tibermacine C., 2011, P 14 INT ACM SIGS S, P31
   Tibermacine C, 2010, J SYST SOFTWARE, V83, P815, DOI 10.1016/j.jss.2009.11.736
   Tyree J, 2005, IEEE SOFTWARE, V22, P19, DOI 10.1109/MS.2005.27
   Wojcik Rob, 2006, TECHNICAL REPORT
   Zalewski A, 2011, LECT NOTES COMPUT SC, V6903, P83, DOI 10.1007/978-3-642-23798-0_9
   Zdun U., 2008, SHARK, P11
   Zimmerman O, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P157, DOI 10.1109/WICSA.2008.19
   Zimmermann O., 2012, P WICSA ECSA 2012 CO, P96, DOI DOI 10.1145/23619992362021
   Zimmermann O, 2007, LECT NOTES COMPUT SC, V4880, P15
   Zimmermann O, 2011, IEEE SOFTWARE, V28, P64, DOI 10.1109/MS.2011.3
   [No title captured]
NR 48
TC 3
Z9 3
U1 1
U2 10
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2016
VL 23
IS 3
BP 427
EP 467
DI 10.1007/s10515-014-0172-0
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DM9CA
UT WOS:000376660500005
DA 2024-07-18
ER

PT J
AU Chung, WC
   Lin, HP
   Chen, SC
   Jiang, MF
   Chung, YC
AF Chung, Wu-Chun
   Lin, Hung-Pin
   Chen, Shih-Chang
   Jiang, Mon-Fong
   Chung, Yeh-Ching
TI JackHare: a framework for SQL to NoSQL translation using MapReduce
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Cloud computing; Unstructured data processing; MapReduce; NoSQL
   database; HBase; JDBC; Compiler
AB As data exploration has increased rapidly in recent years, the datastore and data processing are getting more and more attention in extracting important information. To find a scalable solution to process the large-scale data is a critical issue in either the relational database system or the emerging NoSQL database. With the inherent scalability and fault tolerance of Hadoop, MapReduce is attractive to process the massive data in parallel. Most of previous researches focus on developing the SQL or SQL-like queries translator with the Hadoop distributed file system. However, it could be difficult to update data frequently in such file system. Therefore, we need a flexible datastore as HBase not only to place the data over a scale-out storage system, but also to manipulate the changeable data in a transparent way. However, the HBase interface is not friendly enough for most users. A GUI composed of SQL client application and database connection to HBase will ease the learning curve. In this paper, we propose the JackHare framework with SQL query compiler, JDBC driver and a systematical method using MapReduce framework for processing the unstructured data in HBase. After importing the JDBC driver to a SQL client GUI, we can exploit the HBase as the underlying datastore to execute the ANSI-SQL queries. Experimental results show that our approaches can perform well with efficiency and scalability.
C1 [Chung, Wu-Chun; Lin, Hung-Pin; Chen, Shih-Chang; Chung, Yeh-Ching] Natl Tsing Hua Univ, Dept Comp Sci, Hsinchu 300, Taiwan.
   [Jiang, Mon-Fong] Is Land Syst Inc, Hsinchu 300, Taiwan.
C3 National Tsing Hua University
RP Chen, SC (corresponding author), Natl Tsing Hua Univ, Dept Comp Sci, Hsinchu 300, Taiwan.
EM wcchung@sslab.cs.nthu.edu.tw; tlcsmall3@sslab.cs.nthu.edu.tw;
   shcchen@sslab.cs.nthu.edu.tw; mike@is-land.com.tw; ychung@cs.nthu.edu.tw
CR Abouzeid A., 2009, PROC VLDB ENDOW, V2, P922, DOI [10.14778/1687627.1687731, DOI 10.14778/1687627.1687731]
   Afrati F. N., 2010, EDBT, P99, DOI [DOI 10.1145/1739041.1739056, 10.1145/1739041.1739056]
   [Anonymous], 2010, P ACM SIGMOD INT C M, DOI DOI 10.1145/1807167.1807273
   Binnig C., 2012, P 2012 JOINT EDBT IC, P41
   Chang F, 2008, ACM T COMPUT SYST, V26, DOI 10.1145/1365815.1365816
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Ghemawat S., 2003, ACM SIGOPS OPERATING, V37, P29, DOI [DOI 10.1145/945445.945450, DOI 10.1145/1165389.945450, 10.1145/1165389.945450]
   Gowraj N., LNCS, V7808, P571
   Kaldewey T., 2012, EDBT, P15, DOI DOI 10.1145/2247596.2247600
   Lee R, 2011, INT CON DISTR COMP S, P25, DOI 10.1109/ICDCS.2011.26
   Okcan Alper., 2011, PROC SIGMOD C, P949
   Olston C., 2008, Proceedings of the 2008 ACM SIGMOD International Conference on Manage- ment of Data, P1099
   Pavlo A, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P165
   Stonebraker M, 2011, COMMUN ACM, V54, P72, DOI 10.1145/1953122.1953144
   Su X., 2012, Proceedings of the 2012 ACM S MOD International Conference on Management of Data, P779
   Thusoo A, 2009, PROC VLDB ENDOW, V2, P1626, DOI 10.14778/1687553.1687609
   Xu Y., 2013, P 22 INT C WORLD WID, P212
NR 17
TC 20
Z9 21
U1 0
U2 35
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2014
VL 21
IS 4
SI SI
BP 489
EP 508
DI 10.1007/s10515-013-0135-x
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AQ9UD
UT WOS:000343201000004
DA 2024-07-18
ER

PT J
AU Ghezzi, G
   Gall, HC
AF Ghezzi, Giacomo
   Gall, Harald C.
TI A framework for semi-automated software evolution analysis composition
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
ID VALIDATION; METRICS
AB Software evolution data stored in repositories such as version control, bug and issue tracking, or mailing lists is crucial to better understand a software system and assess its quality. A myriad of analyses exploiting such data have been proposed throughout the years. However, easy and straight forward synergies between these analyses rarely exist. To tackle this problem we have investigated the concept of Software Analysis as a Service and devised SOFAS, a distributed and collaborative software evolution analysis platform. Software analyses are offered as services that can be accessed, composed into workflows, and executed over the Internet. This paper presents our framework for composing these analyses into workflows, consisting of a custom-made modeling language and a composition infrastructure for the service offerings. The framework exploits the RESTful nature of our analysis service architecture and comes with a service composer to enable semi-automated service compositions by a user. We validate our framework by showcasing two different approaches built on top of it that support different stakeholders in gaining a deeper insight into a project history and evolution. As a result, our framework has shown its applicability to deliver diverse, complex analyses across system and tool boundaries.
C1 [Ghezzi, Giacomo; Gall, Harald C.] Univ Zurich, Dept Informat, Software Evolut & Architecture Lab Seal, Zurich, Switzerland.
C3 University of Zurich
RP Ghezzi, G (corresponding author), Univ Zurich, Dept Informat, Software Evolut & Architecture Lab Seal, Zurich, Switzerland.
EM ghezzi@ifi.uzh.ch; gall@ifi.uzh.ch
OI Gall, Harald/0000-0002-3874-5628
FU Swiss National Science Foundation as part of the Systems of Systems
   Analysis (SoSYA) project, SNF [132175]
FX This work was supported by the Swiss National Science Foundation as part
   of the Systems of Systems Analysis (SoSYA) project, SNF Project No.
   132175.
CR [Anonymous], 2000, Dissertation
   [Anonymous], 2007, Web services business process execution language version 2.0
   Bacchelli A., 2010, Proceedings of the 32nd International Conference on Software Engineering, P375
   Baresi L, 2007, IET SOFTW, V1, P219, DOI 10.1049/iet-sen:20070027
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Bevan Jennifer., 2005, ESECFSE 13, P177
   Call HC, 2009, IEEE SOFTWARE, V26, P26, DOI 10.1109/MS.2009.6
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Chunxiang Xu, 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P468, DOI 10.1109/COMPSAC.2010.54
   Cubranic D, 2003, PROC INT CONF SOFTW, P408, DOI 10.1109/ICSE.2003.1201219
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   D'Ambros M., 2005, P 3 IEEE INT WORKSH
   D'Ambros M, 2009, WORK CONF REVERSE EN, P135, DOI 10.1109/WCRE.2009.19
   D'Ambros M, 2009, IEEE T SOFTWARE ENG, V35, P720, DOI 10.1109/TSE.2009.17
   Farrell Joel., 2007, Semantic Annotations for WSDL and XML Schema: W3C Recommendation
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Fluri B, 2007, IEEE T SOFTWARE ENG, V33, P725, DOI 10.1109/TSE.2007.70731
   Foster H, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P152, DOI 10.1109/ASE.2003.1240303
   Gall H, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P13
   German D. M., 2004, "International Workshop on Mining Software Repositories (MSR 2004)" W17S Workshop - 26th International Conference on Software Engineering, P17, DOI 10.1049/ic:20040469
   Ghezzi G, 2011, WORK IEEE IFIP C SOF
   Ghezzi G., 2008, P 4 INT ERCIM WORKSH
   Giger Emanuel., 2011, P 12 INT WORKSHOP PR, P51
   Gini C., 1912, Variabilita e mutuabilita. Contributo allo studio delle distribuzioni e delle relazioni statistiche
   Girba T, 2004, PROC IEEE INT CONF S, P40, DOI 10.1109/ICSM.2004.1357788
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Hughes G., 2008, TAV WEB, P40
   Iqbal A, 2009, P INT C SOFTW ENG KN
   Jin D, 2005, PROC IEEE INT CONF S, P613
   Kiefer C., 2007, P 4 INT WORKSH MIN S
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Lanza Michele., 2005, Object-Oriented Metrics in Practice
   Lathem J, 2007, ICSC 2007: INTERNATIONAL CONFERENCE ON SEMANTIC COMPUTING, PROCEEDINGS, P469, DOI 10.1109/ICSC.2007.94
   Mandel L., 2008, DESCRIBE REST WEB SE
   Mangler J., 2009, INT C SERV OR COMP A, P1
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mockus A, 2000, PROC IEEE INT CONF S, P120, DOI 10.1109/ICSM.2000.883028
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Muller S., 2012, 5 INT WORKSH COOP HU
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Pautasso C., 2008, 7 INT C BUS PROC MAN
   Pautasso C, 2009, LECT NOTES COMPUT SC, V5634, P142, DOI 10.1007/978-3-642-02655-3_11
   Pinzger M., 2005, P ACM 2005 S SOFTW V
   Robles Gregorio, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P171, DOI 10.1109/MSR.2010.5463348
   SLIWERSKI J, 2005, P INT WORKSH MIN SOF
   Tappolet J, 2010, J WEB SEMANT, V8, P225, DOI 10.1016/j.websem.2010.04.009
   Tichelaar S, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P296, DOI 10.1109/WCRE.2000.891485
   Wursch M., 2012, COMPUT J, P1
   Zhao HB, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P189, DOI 10.1109/ICWS.2009.111
   Zimmermann T, 2004, PROC INT CONF SOFTW, P563, DOI 10.1109/ICSE.2004.1317478
NR 51
TC 9
Z9 10
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2013
VL 20
IS 3
SI SI
BP 463
EP 496
DI 10.1007/s10515-013-0125-z
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 155QP
UT WOS:000319763400006
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Dennis, LA
   Fisher, M
   Webster, MP
   Bordini, RH
AF Dennis, Louise A.
   Fisher, Michael
   Webster, Matthew P.
   Bordini, Rafael H.
TI Model checking agent programming languages
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Multi-agent systems; Agent programming languages; BDI formal
   verification; Model checking; Java PathFinder
ID ALLOCATION
AB In this paper we describe a verification system for multi-agent programs. This is the first comprehensive approach to the verification of programs developed using programming languages based on the BDI (belief-desire-intention) model of agency. In particular, we have developed a specific layer of abstraction, sitting between the underlying verification system and the agent programming language, that maps the semantics of agent programs into the relevant model-checking framework. Crucially, this abstraction layer is both flexible and extensible; not only can a variety of different agent programming languages be implemented and verified, but even heterogeneous multi-agent programs can be captured semantically. In addition to describing this layer, and the semantic mapping inherent within it, we describe how the underlying model-checker is driven and how agent properties are checked. We also present several examples showing how the system can be used. As this is the first system of its kind, it is relatively slow, so we also indicate further work that needs to be tackled to improve performance.
C1 [Dennis, Louise A.; Fisher, Michael] Univ Liverpool, Dept Comp Sci, Liverpool L69 3BX, Merseyside, England.
   [Webster, Matthew P.] Virtual Engn Ctr, Daresbury Lab, Warrington WA4 4AD, Cheshire, England.
   [Bordini, Rafael H.] Univ Fed Rio Grande do Sul, Inst Informat, BR-91501970 Porto Alegre, RS, Brazil.
C3 University of Liverpool; STFC Daresbury Laboratory; Universidade Federal
   do Rio Grande do Sul
RP Dennis, LA (corresponding author), Univ Liverpool, Dept Comp Sci, Liverpool L69 3BX, Merseyside, England.
EM l.a.dennis@liverpool.ac.uk; mfisher@liverpool.ac.uk;
   matt@liverpool.ac.uk; R.Bordini@inf.ufrgs.br
RI Fisher, Michael/P-2111-2019; Bordini, Rafael/G-4919-2012
OI Fisher, Michael/0000-0002-0875-3862; Bordini,
   Rafael/0000-0001-8688-9901; Dennis, Louise/0000-0003-1426-1896; Webster,
   Matt/0000-0002-8817-6881
FU EPSRC [EP/D052548, EP/DO54788, EP/F037201]; CNPq [307924/2009-2]; EPSRC
   [EP/D052548/1, EP/F037201/1] Funding Source: UKRI
FX The authors would like to thank EPSRC for its support of this work
   through research projects EP/D052548, EP/DO54788, and EP/F037201, and
   CNPq for its support through grant 307924/2009-2.
CR [Anonymous], 2005, MULTIAGENT PROGRAMMI, DOI DOI 10.1007/B137449
   [Anonymous], 1990, HDB THEORETICAL COMP
   [Anonymous], 1998, RENEWABLE ENERGY TEC
   [Anonymous], 2007, WILEY SERIES AGENT T
   [Anonymous], 2003, Studies in logic and the foundations of mathematics
   [Anonymous], 2004, Auctions: Theory and Practice
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Bond A., 1988, READINGS DISTRIBUTED
   Bordini Rafael H., 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P69, DOI 10.1109/ASE.2008.17
   Bordini R.H., 2003, LECT NOTES ARTIFICIA, V3067
   Bordini R.H., 2009, J LOGIC COMPUT
   Bordini RH, 2005, MU S ART SOC SIM ORG, V15, P3, DOI 10.1007/0-387-26350-0_1
   Bordini RH, 2006, AUTON AGENT MULTI-AG, V12, P239, DOI 10.1007/s10458-006-5955-7
   Bordini RH, 2004, IEEE INTELL SYST, V19, P46, DOI 10.1109/MIS.2004.47
   Boutilier C, 1997, ARTIF INTELL, V94, P1, DOI 10.1016/S0004-3702(97)00029-5
   Bratman M. E., 1988, Computational Intelligence, V4, P349, DOI 10.1111/j.1467-8640.1988.tb00284.x
   Bratman M.E., 1987, Intention, Plans, and Practical Reason
   Bredin J, 2003, AUTON AGENT MULTI-AG, V6, P235, DOI 10.1023/A:1022923422570
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Cimatti A., 2002, LECT NOTES COMPUTER
   Clarke EM, 1999, MODEL CHECKING, P1
   COHEN PR, 1990, ARTIF INTELL, V42, P213, DOI 10.1016/0004-3702(90)90055-5
   Collins J., 2009, LECT NOTES BUSINESS, V13
   Corera JM, 1996, IEEE INTELL SYST APP, V11, P71, DOI 10.1109/64.546586
   D'Amorim M., 2007, THESIS U ILLINOIS UR
   Dash RK, 2007, IEEE T SYST MAN CY A, V37, P391, DOI 10.1109/TSMCA.2007.893474
   Dastani M, 2005, MU S ART SOC SIM ORG, V15, P39, DOI 10.1007/0-387-26350-0_2
   Dastani M., 2009, MULTI AGENT SYSTEMS
   DAVIS R, 1983, ARTIF INTELL, V20, P63, DOI 10.1016/0004-3702(83)90015-2
   de Boer F.S., 2007, J APPL LOGIC, V5, P277, DOI [10.1016/j.jal.2005.12.014, DOI 10.1016/J.JAL.2005.12.014]
   Dennis L.A., 2008, INT WORKSH PROGR MUL, P40
   Dennis L.A., 2008, LOG SIM INT REAS AIS
   Dennis L, 2008, LECT NOTES ARTIF INT, V5056, P137
   Dennis LA, 2008, LECT NOTES ARTIF INT, V4908, P124
   Doghri I., 2008, P 8 INT C NEW TECHN, P1
   Durfee E. H., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P63, DOI 10.1109/69.43404
   Fisher M., 2007, J APPL LOGIC, V5, P193
   Fisher M, 2010, AUTON AGENT MULTI-AG, V21, P368, DOI 10.1007/s10458-009-9105-x
   Fortnow L., 2008, P 9 ACM C EL COMM EC
   Gibney MA, 1999, LECT NOTES ARTIF INT, V1699, P46
   Haque N, 2005, KNOWL-BASED SYST, V18, P163, DOI 10.1016/j.knosys.2004.10.008
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Himoff J., 2005, 4th international conference on autonomous agents and multiagent systems, P60
   Hindriks K. V., 2001, Intelligent Agents VII. Agent Theories Architectures and Languages. 7th International Workshop, ATAL 2000. Proceedings (Lecture Notes in Artificial Intelligence Vol.1986), P228
   Hindriks KV, 1998, LECT NOTES ARTIF INT, V1365, P215, DOI 10.1007/BFb0026761
   Hirsch B., 2008, P WORKSH AG THEOR AG
   Jenkins B., HASH FUNCTIONS DOBBS
   Jongmans SSTQ, 2010, LECT NOTES ARTIF INT, V6245, P219, DOI 10.1007/978-3-642-14977-1_17
   Kacprzak Magdalena, 2004, AAMAS, P638
   Klugl F., 2005, APPL AGENT TECHNOLOG
   Konishi H, 2003, J ECON THEORY, V110, P1, DOI 10.1016/S0022-0531(03)00004-8
   LJUNBERG M, 1992, P 2 PAC RIM INT C AI
   Moreno A, 2003, ARTIF INTELL MED, V27, P229, DOI 10.1016/S0933-3657(03)00004-6
   Muscettola N, 1998, ARTIF INTELL, V103, P5, DOI 10.1016/S0004-3702(98)00068-X
   Owre S, 2008, LECT NOTES COMPUT SC, V5170, P22, DOI 10.1007/978-3-540-71067-7_5
   Pokahr A, 2005, MU S ART SOC SIM ORG, V15, P149, DOI 10.1007/0-387-26350-0_6
   Raimondi F., 2007, J APPL LOGIC, V5, P235, DOI DOI 10.1016/J.JAL.2005.12.010
   Rao A. S., 1995, ICMAS-95 Proceedings. First International Conference on Multi-Agent Systems, P312
   Rao A. S., 1996, Agents Breaking Away. 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '96 Proceedings, P42, DOI 10.1007/BFb0031845
   RAO AS, 1992, PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE (KR 92), P439
   Reeves DM, 2005, DECIS SUPPORT SYST, V39, P67, DOI 10.1016/j.dss.2004.08.014
   Rimassa G., 2007, Workshop dagli Oggetti agli Agenti WOA, Genova, Italy, P1
   Sandholm TW, 1997, ARTIF INTELL, V94, P99, DOI 10.1016/S0004-3702(97)00030-1
   SHOHAM Y, 1993, ARTIF INTELL, V60, P51, DOI 10.1016/0004-3702(93)90034-9
   SISTLA AP, 1987, THEOR COMPUT SCI, V49, P217, DOI 10.1016/0304-3975(87)90008-9
   Smith R. G., 1980, FRAMEWORK DISTRIBUTE
   SMITH RG, 1981, IEEE T SYST MAN CYB, V11, P61, DOI 10.1109/TSMC.1981.4308579
   van Riemsdijk B., 2003, P 2 INT JOINT C AUTO, P393
   VICKREY W, 1961, J FINANC, V16, P8, DOI 10.2307/2977633
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Walsh WE, 1998, INTERNATIONAL CONFERENCE ON MULTI-AGENT SYSTEMS, PROCEEDINGS, P325, DOI 10.1109/ICMAS.1998.699077
   Webster M.P., 2009, ULCS09004
   Winikoff M, 2005, MU S ART SOC SIM ORG, V15, P175, DOI 10.1007/0-387-26350-0_7
   Winikoff M., 2002, P 8 INT C PRINC KNOW, P470
   Winikoff Michael., 2007, P 6 INT JOINT C AUTO, P1
   Wooldridge M., 2007, Proceedings of the 22nd AAAI Conference on Artificial Intelligence (AAAI'07), P9
   [No title captured]
NR 77
TC 96
Z9 98
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2012
VL 19
IS 1
BP 5
EP 63
DI 10.1007/s10515-011-0088-x
PG 59
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 872GX
UT WOS:000298798400002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Meredith, PO
   Jin, DY
   Chen, F
   Rosu, G
AF Meredith, Patrick O'Neil
   Jin, Dongyun
   Chen, Feng
   Rosu, Grigore
TI Efficient monitoring of parametric context-free patterns
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 23rd IEEE/ACM International Conference on Automated Software Engineering
CY SEP 15-16, 2008
CL LAquila, ITALY
SP IEEE, ACM
DE Runtime verification; Monitoring; Context-free languages
ID PROGRAMS; RUNTIME
AB Recent developments in runtime verification and monitoring show that parametric regular and temporal logic specifications can be efficiently monitored against large programs. However, these logics reduce to ordinary finite automata, limiting their expressivity. For example, neither can specify structured properties that refer to the call stack of the program. While context-free grammars (CFGs) are expressive and well-understood, existing techniques for monitoring CFGs generate large runtime overhead in real-life applications. This paper demonstrates that monitoring parametric CFGs is practical (with overhead on the order of 12% or lower in most cases). We present a monitor synthesis algorithm for CFGs based on an LR(1) parsing algorithm, modified to account for good prefix matching. In addition, a logic-independent mechanism is introduced to support matching against the suffixes of execution traces.
C1 [Meredith, Patrick O'Neil; Jin, Dongyun; Chen, Feng; Rosu, Grigore] Univ Illinois, Urbana, IL 61801 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Meredith, PO (corresponding author), Univ Illinois, Urbana, IL 61801 USA.
EM pmeredit@cs.uiuc.edu; djin3@cs.uiuc.edu; grosu@cs.uiuc.edu
CR Aho A.V., 1986, COMPILERS PRINCIPLES, P215
   Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   [Anonymous], THESIS RWTH AACHEN U
   Avgustinov P., 2005, AOSD 05, P87, DOI DOI 10.1145/1052898.1052906
   Avgustinov P, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P589
   BARRINGER H, 2008, J LOG COMPUT
   BLACKBURN SM, 2006, OOPSLA 06, P169
   BODDEN E, 2008, TRACEMATCHES BENCHMA
   Bodden E, 2007, LECT NOTES COMPUT SC, V4609, P525
   Chaudhuri S, 2007, LECT NOTES COMPUT SC, V4595, P279
   Chen F, 2004, LECT NOTES COMPUT SC, V3308, P357
   CHEN F, 2009, AUTOMAT SOFTW ENG, P383
   CHEN F, 2003, RUNTIME VERIFICATION, V89
   Chen F, 2006, ELECTRON NOTES THEOR, V144, P3, DOI 10.1016/j.entcs.2006.02.002
   Chen F, 2009, LECT NOTES COMPUT SC, V5505, P246, DOI 10.1007/978-3-642-00768-2_23
   Chen Shu, 2007, In Silico Biology, V7, P569
   DAMORIM M, 2005, ACM SIGSOFT SOFTWARE, V30, P1
   Drusinsky D., 1997, TEMPORAL ROVER
   Duncan A. G., 1981, 5th International Conference on Software Engineering, P170
   Duncan A.G., 1978, WORKSHOP SOFTWARE TE, P270
   GOLDSMITH S, 2005, OOPSLA 05 P 20 ACM S, P385
   HANFORD KV, 1970, IBM SYST J, V9, P242, DOI 10.1147/sj.94.0242
   Havelund Klaus., 2001, RUNTIME VERIFICATION, V55
   Hopcroft JE., 2008, Introduction to automata theory, languages, and computation
   HOUSSAIS B, 1977, STRATHCL ALG 68 C
   Hughes G., 2007, INT S SOFTWARE TESTI, P39
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Kim M, 2004, FORM METHOD SYST DES, V24, P129, DOI 10.1023/B:FORM.0000017719.43755.7c
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   Leavens G.T., 2000, OBJECT ORIENTED PROG, P105
   Martin Michael., 2005, OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference on Object oriented programming systems languages and applications, P365
   MAURER PM, 1990, IEEE SOFTWARE, V7, P50, DOI 10.1109/52.56422
   MEREDITH P, 2008, AUTOMAT SOFTW ENG, P148
   Purdom P.A., 1972, BIT, V2, P336
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   SIRER E, 1999, DOMAIN SPECIFIC LANG, P1
NR 36
TC 16
Z9 21
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2010
VL 17
IS 2
SI SI
BP 149
EP 180
DI 10.1007/s10515-010-0063-y
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 573FB
UT WOS:000275892700003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Marin, M
   van Deursen, A
   Moonen, L
   van der Rijst, R
AF Marin, Marius
   van Deursen, Arie
   Moonen, Leon
   van der Rijst, Robin
TI An integrated crosscutting concern migration strategy and its
   semi-automated application to JHotDraw
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 7th IEEE International Working Conference on Source Code Analysis and
   Manipulation
CY SEP 30-OCT 01, 2007
CL Paris, FRANCE
SP IEEE Comp Soc, TCSE, CEA Lab Integrat Syst & Technologies, Ecole Polytech, Software Improvement Grp, CREST, Kings Coll London
DE Program analysis; Code refactoring; Cross cutting concerns; Concern
   modeling; Aspect-oriented programming; Reverse engineering; Software
   engineering
ID CODE
AB In this paper we propose a systematic strategy for migrating crosscutting concerns in existing object-oriented systems to aspect-oriented programming solutions. The proposed strategy consists of four steps: mining, exploration, documentation and refactoring of crosscutting concerns. We discuss in detail a new approach to refactoring to aspect-oriented programming that is fully integrated with our strategy, and apply the whole strategy to an object-oriented system, namely the JHotDraw framework.
   Moreover, we present a method to semi-automatically perform the aspect-introducing refactorings based on identified crosscutting concern sorts which is supported by a prototype tool called sair. We perform an exploratory case study in which we apply this tool on the same object-oriented system and compare its results with the results of manual migration in order to assess the feasibility of automated aspect refactoring. Both the refactoring tool sair and the results of the manual migration are made available as open-source, the latter providing the largest aspect-introducing refactoring available to date.
   We report on our experiences with conducting both case studies and reflect on the success and challenges of the migration process.
C1 [Marin, Marius] Accenture, Technol Architecture, NL-1082 MA Amsterdam, Netherlands.
   [van Deursen, Arie; van der Rijst, Robin] Delft Univ Technol, Delft, Netherlands.
   [Moonen, Leon] Simula Res Lab, Lysaker, Norway.
C3 Accenture; Delft University of Technology
RP Marin, M (corresponding author), Accenture, Technol Architecture, GustavMahlerplein 90, NL-1082 MA Amsterdam, Netherlands.
EM marius.marin@accenture.com; arie.vandeursen@tudelft.nl;
   leon.moonen@computer.org; rvdrijst@gmail.com
RI Moonen, Leon/M-8790-2015; van Deursen, Arie/G-3084-2011
OI Moonen, Leon/0000-0002-1761-6771; van Deursen, Arie/0000-0003-4850-3312
CR [Anonymous], P OBJ OR PROGR SYST
   Binkley D, 2006, IEEE T SOFTWARE ENG, V32, P698, DOI 10.1109/TSE.2006.95
   Breu S, 2006, IEEE INT CONF AUTOM, P221
   Bruntink M, 2005, PROC IEEE INT CONF S, P37
   BRUNTINK M, 2008, P 12 EUR C SOFTW MAI, P133
   Ceccato M, 2006, SOFTWARE QUAL J, V14, P209, DOI 10.1007/s11219-006-9217-3
   Cole L., 2005, Proc. 4th ACM International Conference on Aspect-Oriented Software Development (AOSD), P123
   Ettinger R., 2004, PROC 3 INT C ASPECT, P93
   FILMAN R, 2005, ASPECT ORIENTED SOFT
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   Hanenberg S., 2003, 4th Annual International Conference on Object-Oriented and Internet-based Technologies, Concepts, P19
   HANNEMANN J, 2005, P 4 INT C ASP OR SOF, P135
   Harrison W., 2005, P MACS 05, P1, DOI [10.2307/j.ctt20mvc0k.5, DOI 10.2307/J.CTT20MVC0K.5]
   Janzen D., 2003, Proceedings of the 2nd Annual Conference on Aspect-Oriented Software Development (AOSD), P178, DOI 10.1145/643603.643622
   Kellens A, 2007, LECT NOTES COMPUT SC, V4640, P143
   Laddad R., 2003, ASPECTJ ACTION PRACT
   LESIECKI N, 2005, AOP AT WORK ENHANCE
   Marin M, 2005, PROC IEEE INT CONF S, P673
   MARIN M, 2008, THESIS DELFT U TECHN
   Marin M, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P101, DOI 10.1109/SCAM.2007.25
   Marin M, 2007, PROC INT CONF SOFTW, P758
   Marin M, 2006, WORK CONF REVERSE EN, P29
   Marin M, 2007, ACM T SOFTW ENG METH, V17, DOI 10.1145/1314493.1314496
   Mariotti C, 2007, EUR J NEUROL, V14, P31
   Mens K, 2003, PROC IEEE INT CONF S, P169, DOI 10.1109/ICSM.2003.1235419
   Monteiro M., 2005, Proceedings of the 4th international conference on Aspect-oriented software development, P111
   Robillard MP, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189751
   Robillard MP, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P406, DOI 10.1109/ICSE.2002.1007986
   Shepherd D., 2005, ASE 05 P 20 IEEEACM, P184
   Störzer M, 2006, IEEE INT CONF AUTOM, P317
   TARR P, 2004, RC23343 IBM TJ WATS
   Tonella P, 2004, PROC IEEE INT CONF S, P220, DOI 10.1109/ICSM.2004.1357806
   VANDERRIJST R, 2008, THESIS DELFT U TECHN
   VANDEURSEN A, 2003, P WCRE WORKSH REFACT
NR 34
TC 8
Z9 10
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2009
VL 16
IS 2
BP 323
EP 356
DI 10.1007/s10515-009-0051-2
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 431SN
UT WOS:000265084000006
OA hybrid
DA 2024-07-18
ER

PT J
AU Marceau, G
   Cooper, GH
   Spiro, JP
   Krishnamurthi, S
   Reiss, SP
AF Marceau, Guillaume
   Cooper, Gregory H.
   Spiro, Jonathan P.
   Krishnamurthi, Shriram
   Reiss, Steven P.
TI The design and implementation of a dataflow language for scriptable
   debugging
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 19th International Conference on Automated Software Engineering (ASE
   2004)
CY SEP, 2004
CL Linz, AUSTRIA
DE debugging; script automation; dataflow dsl scheme; Java
AB Debugging is a laborious, manual activity that often involves the repetition of common operations. Ideally, users should be able to describe these repetitious operations as little programs. Debuggers should therefore be programmable, or scrip-table. The operating environment of these scripts, however, imposes interesting design challenges on the programming language in which these scripts are written.
   This paper presents our design of a language for scripting debuggers. The language offers powerful primitives that can precisely and concisely capture many important debugging and comprehension metaphors. The paper also describes a pair of debuggers, one for Java and the other for Scheme, built in accordance with these principles. The paper includes concrete examples of applying this debugger to programs.
C1 Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
C3 Brown University
RP Marceau, G (corresponding author), Brown Univ, Dept Comp Sci, 115 Waterman St, Providence, RI 02912 USA.
RI Jolugbo, Olajide/D-3216-2017
OI Jolugbo, Olajide/0000-0001-6512-4117; Krishnamurthi,
   Shriram/0000-0001-5184-1975
CR ARAL Z, 1988, P ACM SIGPLAN SIGOPS, P151
   *ASP OR PROGR, 2001, COMMUN ACM, V44
   Auguston M, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P217, DOI 10.1109/ASE.2002.1115015
   BRUEGGE B, 1983, P ACM SIGSOFT SIGPLA, P34
   Clements J, 2004, ACM T PROGR LANG SYS, V26, P1029, DOI 10.1145/1034774.1034778
   COOPER GH, 2006, EMBEDDING DYNAMIC DA
   Cormen T.H., 1997, Introduction to Algorithms
   Courtney A., 2001, Practical Aspects of Declarative Languages. Third International Symposium, PADL 2001. Proceedings (Lecture Notes in Computer Science Vol.1990), P29
   CRAWFORD RH, 1992, PROCEEDINGS OF THE 1992 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P252, DOI 10.1109/ICCL.1992.185489
   DIAS MD, 1999, P 2U INT C SOFTW ENG, P504
   Ducasse M., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P504, DOI 10.1109/ICSE.1999.841040
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Filman R.E., 2000, WORKSH ADV SEP CONC
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   FLATT M, 1999, ACM SIGPLAN INT C FU, P138
   GOLAN M, 1993, PROCEEDINGS OF THE WINTER 1993 USENIX CONFERENCE, P107
   Hanson D. R., 1997, PROC USENIX ANN TECH, P183
   Jeffery C, 1998, ACM SIGPLAN NOTICES, V33, P67, DOI 10.1145/277633.277644
   JOHNSON MS, 1981, COMPUT LANG, V6, P79, DOI 10.1016/0096-0551(81)90068-0
   KELSEY R, 1998, ACM SGIPLAN NOTICES, V33
   Lencevicius R., 2003, Automated Software Engineering, V10, P39, DOI 10.1023/A:1021816917888
   LENCEVICIUS R, 2000, P 4 INT WORKSH AUT D
   Marceau G., 2004, IEEE INT C AUT SOFTW
   Meyer B., 1992, Eiffel: The Language
   OLSSON RA, 1993, P US TECHN C, P221
   Smith DR, 2004, LECT NOTES COMPUT SC, V3286, P39
   Stallman R.M., 1989, FREE SOFTWARE FDN
   WINTERBOTTOM P, 1994, PROCEEDINGS OF THE WINTER 1994 USENIX CONFERENCE, P211
NR 28
TC 11
Z9 12
U1 1
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2007
VL 14
IS 1
BP 59
EP 86
DI 10.1007/s10515-006-0003-z
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 211VO
UT WOS:000249551600004
DA 2024-07-18
ER

PT J
AU Dessureault, JS
   Massicotte, D
AF Dessureault, Jean-Sebastien
   Massicotte, Daniel
TI <i>AI</i><SUP>2</SUP>: the next leap toward native language-based and
   explainable machine learning framework
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Machine learning; Framework; NLP; AI ethics; Explainability
AB The machine learning frameworks flourished in the last decades, allowing artificial intelligence to get out of academic circles to be applied to enterprise domains. This field has significantly advanced, but there is still some meaningful improvement to reach the subsequent expectations. The proposed framework, named AI(2), uses a natural language interface that allows non-specialists to benefit from machine learning algorithms without necessarily knowing how to program with a programming language. The primary contribution of the AI(2 )framework allows a user to call the machine learning algorithms in English, making its interface usage easier. The second contribution is greenhouse gas (GHG) awareness. It has some strategies to evaluate the GHG generated by the algorithm to be called and to propose alternatives to find a solution without executing the energy-intensive algorithm. Another contribution is a preprocessing module that helps to describe and to load data properly. Using an English text-based chatbot, this module guides the user to define every dataset so that it can be described, normalized, loaded, and divided appropriately. The last contribution of this paper is about explainability. The scientific community has known that machine learning algorithms imply the famous black-box problem for decades. Traditional machine learning methods convert an input into an output without being able to justify this result. The proposed framework explains the algorithm's process with the proper texts, graphics, and tables. The results, declined in five cases, present usage applications from the user's English command to the explained output. Ultimately, the AI(2) framework represents the next leap toward native language based, human-oriented concerns about machine learning framework.
C1 [Dessureault, Jean-Sebastien; Massicotte, Daniel] Univ Quebec Trois Rivieres, Elect & Comp Engn Dept, Lab Signal & Syst Integrat, LSSI, 3351 Bd Forges, Trois Rivieres, PQ G8Z 4M3, Canada.
C3 University of Quebec; University of Quebec Trois Rivieres
RP Dessureault, JS (corresponding author), Univ Quebec Trois Rivieres, Elect & Comp Engn Dept, Lab Signal & Syst Integrat, LSSI, 3351 Bd Forges, Trois Rivieres, PQ G8Z 4M3, Canada.
EM jean.sebastien.dessureault@cegeptr.qc.ca; daniel.massicotte@uqtr.ca
FU Natural Sciences and Engineering Research Council
FX This work has been supported by the Natural Sciences and Engineering
   Research Council.
CR Abadi M., 2016, arXiv, DOI DOI 10.48550/ARXIV.1603.04467
   Adadi A, 2018, IEEE ACCESS, V6, P52138, DOI 10.1109/ACCESS.2018.2870052
   Adoma AF, 2020, I COMP CONF WAVELET, P117, DOI 10.1109/ICCWAMTIP51612.2020.9317379
   Agarwal N, 2020, 2020 IEEE SYMPOSIUM SERIES ON COMPUTATIONAL INTELLIGENCE (SSCI), P1528, DOI [10.1109/SSCI47803.2020.9308260, 10.1109/ssci47803.2020.9308260]
   Ahmed M, 2020, ELECTRONICS-SWITZ, V9, DOI 10.3390/electronics9081295
   Biau G, 2016, TEST-SPAIN, V25, P197, DOI 10.1007/s11749-016-0481-7
   Chang JW, 2022, J AMB INTEL HUM COMP, DOI 10.1007/s12652-021-03512-2
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Demsar J, 2013, J MACH LEARN RES, V14, P2349
   Dessureault J.-S., Explainable global error weighted on feature importance: The xGEWFI metric to evaluate the error of data imputation and data augmentation, DOI [10.1007/s10489-023-04661-x, DOI 10.1007/S10489-023-04661-X]
   Dessureault JS, 2023, PROCEEDINGS OF 2023 8TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING TECHNOLOGIES, ICMLT 2023, P1, DOI 10.1145/3589883.3589884
   Dessureault JS, 2021, AI-BASEL, V3, P1, DOI 10.3390/ai3010001
   Dessureault JS, 2022, Arxiv, DOI arXiv:2206.08974
   Dessureault JS, 2022, Arxiv, DOI arXiv:2206.08982
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   Goldberg Lisa R., 2019, The Book of Why: The New Science of Cause and Effect, V19, P1945, DOI [10.1080/14697688.2019, DOI 10.1080/14697688.2019.1655928]
   Guarasci R, 2021, J AMB INTEL HUM COMP, DOI 10.1007/s12652-021-03297-4
   Jolliffe IT, 2016, PHILOS T R SOC A, V374, DOI 10.1098/rsta.2015.0202
   Jordan M.I, 1985, AD-A-173989/5/XAB; ICS-8604
   Karita S, 2019, 2019 IEEE AUTOMATIC SPEECH RECOGNITION AND UNDERSTANDING WORKSHOP (ASRU 2019), P449, DOI [10.1109/asru46091.2019.9003750, 10.1109/ASRU46091.2019.9003750]
   Liu YH, 2019, Arxiv, DOI arXiv:1907.11692
   Lottick K, 2019, Arxiv, DOI [arXiv:1911.08354, DOI 10.48550/ARXIV.1911.08354]
   Malhotra S, 2021, J AMB INTEL HUM COMP, V12, P10267, DOI 10.1007/s12652-020-02800-7
   Marietto MDB, 2013, Arxiv, DOI [arXiv:1307.3091, DOI 10.48550/ARXIV.1307.3091, 10.48550/arXiv.1307.3091]
   Mohseni S, 2020, Arxiv, DOI [arXiv:1811.11839, DOI 10.1145/3387166, 10.1145/3387166]
   Motwani A, 2021, J AMB INTEL HUM COMP, DOI 10.1007/s12652-020-02790-6
   Nguyen G, 2019, ARTIF INTELL REV, V52, P77, DOI 10.1007/s10462-018-09679-z
   Ouyang L., 2022, ADV NEURAL INFORM PR, V35, P27730, DOI 10.48550/ARXIV.2203.02155
   Palacio S, 2021, IEEE INT CONF COMP V, P3759, DOI 10.1109/ICCVW54120.2021.00420
   Pham TH, 2021, J AMB INTEL HUM COMP, V12, P10145, DOI 10.1007/s12652-020-02779-1
   Ramchoun H, 2016, INT J INTERACT MULTI, V4, P26, DOI 10.9781/ijimai.2016.415
   Rothman D., 2021, Transformers for Natural Language Processing: Build Innovative Deep Neural Network Architectures for NLP with Python, PyTorch, TensorFlow, BERT, RoBERTa, and More
   ROUSSEEUW PJ, 1987, J COMPUT APPL MATH, V20, P53, DOI 10.1016/0377-0427(87)90125-7
   Rumelhart D.E., 2013, Learning internal representations by error propagation, P399, DOI [10.1016/b978-1-4832-1446-7.50035-2, 10.1016/B978-1-4832-1446-7.50035-2]
   The Institute for Ethical AI & Machine Learning, 2023, The Institute for Ethical AI & Machine Learning
   Troyanskaya O.G., 2003, Missing Value Estimation
   Vaswani A, 2017, ADV NEUR IN, V30
   Verbraeken J, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3377454
   Wang Z., 2019, Archives of computational methods in engineering, P1
   Yu J, 2020, J CLASSIF, V37, P462, DOI 10.1007/s00357-019-09330-8
   Zhang K, 2017, CAMB MG MEC, P1, DOI [10.1007/s10586-017-1443-x, 10.1017/9781139024853, 10.1109/ICC.2017.7997360]
   Zhang X., 2018, P USENIX WORKSH HOT
NR 42
TC 0
Z9 0
U1 2
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 32
DI 10.1007/s10515-023-00399-5
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA S7ET9
UT WOS:001072770500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zhang, YT
   Wang, DY
   Dong, W
AF Zhang, Yating
   Wang, Daiyan
   Dong, Wei
TI MerIt: improving neural program synthesis by merging collective
   intelligence
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Neural program synthesis; Swarm intelligence; Collective intelligence;
   Pattern mining; User intent
ID PARTICLE SWARM OPTIMIZATION; FEATURE-SELECTION; ALGORITHM;
   RECOMMENDATIONS
AB Program synthesis is the task of automatically generating programs from user intent, which is one of the central problems in automated software engineering. Recently many researchers use a neural network to learn the distribution over programs based on user intent (such as API and type name), known as neural program synthesis (NPS). The generated programs of NPS are highly dependent on user intent. However, it is difficult for users to provide an accurate and complete intent for the NPS model, which decreases the synthesis accuracy of NPS. Collective Intelligence (CI) is an emerging trend, which illustrates that collective wisdom surpasses individual wisdom. Inspired by CI techniques, we propose an automatic task-specific user intent merging framework for NPS named MerIt (Merge User Intent of Program Synthesis). The key point of our framework is that we propose an improved Unsupervised Ant Colony Optimization (UACO) algorithm to selectively merge effective intent from multiple developers, and design three selection strategies to guide the merge process. The experiments show that our approach is able to provide more adequate and efficient input for NPS and improve the synthesis accuracy. Besides, our evaluation shows that selectively merging knowledge from multiple developers could be a significant way of promoting automated software engineering.
C1 [Zhang, Yating; Wang, Daiyan; Dong, Wei] Natl Univ Def Technol, Coll Comp, Changsha, Peoples R China.
C3 National University of Defense Technology - China
RP Zhang, YT (corresponding author), Natl Univ Def Technol, Coll Comp, Changsha, Peoples R China.
EM zhangyating18@nudt.edu.cn; wangdaiyan@nudt.edu.cn; wdong@nudt.edu.cn
RI Zhang, Yating/AAC-9518-2020
OI Zhang, Yating/0000-0002-6927-8452
FU National Natural Science Foundation of China [61690203, 62032019]
FX This work was supported by National Natural Science Foundation of China
   (Nos. 61690203, 62032019).
CR Abolafia D.A., 2018, CORR ABS ARXIV180103
   Abualigah LM, 2017, J SUPERCOMPUT, V73, P4773, DOI 10.1007/s11227-017-2046-2
   Acharya Mithun, 2007, P 6 JOINT M EUROPEAN, P25, DOI [DOI 10.1145/1287624.1287630, 10.1145/1287624.1287630]
   Al-Tashi Q, 2019, IEEE ACCESS, V7, P39496, DOI 10.1109/ACCESS.2019.2906757
   [Anonymous], 2018, P INT C LEARNING REP
   Bai XH, 2018, IEEE C EVOL COMPUTAT, P989, DOI 10.1109/CEC.2018.8477773
   Bonabeau E., 1999, NATURAL ARTIFICIAL S
   Brezocnik L, 2018, APPL SCI-BASEL, V8, DOI 10.3390/app8091521
   Brockschmidt Marc, 2018, ICLR
   Bunel R., 2018, ARXIV180504276
   Buse RPL, 2012, PROC INT CONF SOFTW, P782, DOI 10.1109/ICSE.2012.6227140
   D'Souza AR, 2016, IEEE INT WORK C SO, P51, DOI 10.1109/SCAM.2016.22
   Devlin J, 2017, PR MACH LEARN RES, V70
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Fong S, 2015, NEURAL COMPUT APPL, V26, P1725, DOI 10.1007/s00521-015-1836-9
   Fowkes J, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P254, DOI 10.1145/2950290.2950319
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Han JW, 2007, DATA MIN KNOWL DISC, V15, P55, DOI 10.1007/s10618-006-0059-1
   Jain DK, 2019, IEEE ACCESS, V7, P18480, DOI 10.1109/ACCESS.2019.2894871
   Jain P, 2019, J INTELL FUZZY SYST, V36, P4479, DOI 10.3233/JIFS-179001
   Kennedy J, 1995, 1995 IEEE INTERNATIONAL CONFERENCE ON NEURAL NETWORKS PROCEEDINGS, VOLS 1-6, P1942, DOI 10.1109/icnn.1995.488968
   Kyaw KS, 2019, ISCIT 2019: PROCEEDINGS OF 2019 19TH INTERNATIONAL SYMPOSIUM ON COMMUNICATIONS AND INFORMATION TECHNOLOGIES (ISCIT), P226, DOI 10.1109/ISCIT.2019.8905200
   Lakhani K R, 2010, Harvard Business School General Management Unit Case, P610
   Lin XV, 2018, PROCEEDINGS OF THE ELEVENTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION (LREC 2018), P3107
   Ling W, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P599
   Liu BB, 2019, IEEE ACCESS, V7, P159162, DOI 10.1109/ACCESS.2019.2950232
   Liu JX, 2020, P INT COMP SOFTW APP, P872, DOI 10.1109/COMPSAC48688.2020.0-155
   Moslehi F, 2020, J AMB INTEL HUM COMP, V11, P1105, DOI 10.1007/s12652-019-01364-5
   Murali V., 2018, 6 INT C LEARN REPR I
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Peng HJ, 2018, IEEE ACCESS, V6, P69203, DOI 10.1109/ACCESS.2018.2879583
   Peska L, 2019, SWARM EVOL COMPUT, V48, P201, DOI 10.1016/j.swevo.2019.04.003
   Petrillo F, 2019, J SYST SOFTWARE, V153, P152, DOI 10.1016/j.jss.2019.04.028
   Rabinovich M, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1139, DOI 10.18653/v1/P17-1105
   Shen B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360596
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Sun ZY, 2019, AAAI CONF ARTIF INTE, P7055
   Sutskever I, 2014, ADV NEUR IN, V27
   Wang D., 2020, COLLECTIVE INTELLIGE, P98, DOI [10.1145/3417113.3423371, DOI 10.1145/3417113.3423371]
   Wang H., 2002, Proceedings of the 2002 ACM SIGMOD International Conference on Management of Data, SIGMOD'02, P394, DOI DOI 10.1145/564691.564737
   Wang J, 2013, IEEE WORK CONF MIN S, P319, DOI 10.1109/MSR.2013.6624045
   Xu X., 2017, CORR ABS ARXIV171104
   Yang XS, 2014, ENG OPTIMIZ, V46, P1222, DOI 10.1080/0305215X.2013.832237
   Yang XS, 2011, INT J BIO-INSPIR COM, V3, P267, DOI 10.1504/IJBIC.2011.042259
   Yin PC, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P440, DOI 10.18653/v1/P17-1041
   Zhang YT, 2020, P INT COMP SOFTW APP, P963, DOI 10.1109/COMPSAC48688.2020.0-146
   Zhang YD, 2014, SCI WORLD J, DOI 10.1155/2014/204294
   Zhong H, 2009, LECT NOTES COMPUT SC, V5653, P318, DOI 10.1007/978-3-642-03013-0_15
   Zohar A, 2018, ADV NEUR IN, V31
NR 50
TC 0
Z9 0
U1 1
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 45
DI 10.1007/s10515-022-00343-z
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2H9NR
UT WOS:000814614000001
DA 2024-07-18
ER

PT J
AU Boukharata, S
   Ouni, A
   Kessentini, M
   Bouktif, S
   Wang, HZ
AF Boukharata, Sabrine
   Ouni, Ali
   Kessentini, Marouane
   Bouktif, Salah
   Wang, Hanzhang
TI Improving web service interfaces modularity using multi-objective
   optimization
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Web service; Web service interface; Service design; Modularity; SOA;
   Searchbased software engineering
ID OPPORTUNITIES; COHESION; IMPACT
AB Service interface is a critical component in a service-oriented architecture (SOA). As first-class design artifact, a service interface should be properly designed to provide best practice of third-party reuse. However, a very common bad service design practice in existing SOAs is to place semantically unrelated operations implementing several abstractions in a single interface. Poorly designed service interfaces can have a negative effect on all client applications that use these services. Indeed, services with such poor interface structure tend to be difficult to comprehend, maintain and reuse in business processes, leading to unsuccessful services. Necessarily, then, service designers should refactor, i.e., restructure, their service interface into smaller, more cohesive interfaces, each representing a specific abstraction. To address this problem, we introduce a novel approach, namely WSIRem, to support service's developers in improving the modularization of their service interfaces. WSIRem is based on a multi-objective search-based optimization approach to find the appropriate modularization of a service interface into smaller, more cohesive and loosely coupled interfaces, each implementing a distinct abstraction. WSIRem has been empirically evaluated on a benchmark of 22 real-world Web services provided by Amazon and Yahoo. Results show that the automatically identified interfaces improved the services interface structure. Qualitative evaluation of WSIRem with developers showed the performance of WSIRem in terms of understandability, where the new WSIRem interfaces were recognized as relevant' from developers point of view with more than 73% of precision and 77% of recall. Overall, the obtained results show that WSIRem outperforms state-of-the-art approaches relying on traditional partitioning techniques.
C1 [Boukharata, Sabrine; Ouni, Ali] Univ Quebec, ETS Montreal, Montreal, PQ, Canada.
   [Kessentini, Marouane] Univ Michigan, Comp & Informat Sci Dept, Ann Arbor, MI 48109 USA.
   [Bouktif, Salah] UAE Univ, Coll Informat Technol, Al Ain, U Arab Emirates.
   [Wang, Hanzhang] eBay, San Jose, CA USA.
C3 University of Quebec; University of Quebec Montreal; Ecole de
   Technologie Superieure - Canada; University of Michigan System;
   University of Michigan; United Arab Emirates University; eBay Inc.
RP Ouni, A (corresponding author), Univ Quebec, ETS Montreal, Montreal, PQ, Canada.
EM ali.ouni@etsmtl.ca
RI Ouni, Ali/Y-8280-2019; Bouktif, Salah/AAD-6537-2021
OI Ouni, Ali/0000-0003-4708-0362; 
FU NSERC Discovery Grant [RGPIN-2018-05960]; Research Start-up 2016 Grant -
   UAE University [G00002211]; UAE University
FX This work is partially supported by NSERC Discovery Grant (Grant No.
   RGPIN-2018-05960), and by the Research Start-up (2) 2016 Grant G00002211
   funded by UAE University.
CR Abdeen H, 2009, WORK CONF REVERSE EN, P103, DOI 10.1109/WCRE.2009.13
   Anquetil N., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P235, DOI 10.1109/WCRE.1999.806964
   Athanasopoulos D., 2011, Proceedings of the 2011 IEEE International Conference on Web Services (ICWS 2011), P588, DOI 10.1109/ICWS.2011.27
   Athanasopoulos D., 2015, IEEE T SERV COMPUT, V8, P1
   Bavota G, 2014, EMPIR SOFTW ENG, V19, P1617, DOI 10.1007/s10664-013-9256-x
   Bavota G, 2011, J SYST SOFTWARE, V84, P397, DOI 10.1016/j.jss.2010.11.918
   Budgen D, 1999, SOFTWARE DESIGN
   Card DavidN., 1990, MEASURING SOFTWARE D
   CHISNALL PM, 1993, J MARKET RES SOC, V35, P392
   CLIFF N, 1993, PSYCHOL BULL, V114, P494, DOI 10.1037/0033-2909.114.3.494
   Cohen J., 1988, STAT POWER ANAL BEHA
   Crasso M, 2010, IEEE INTERNET COMPUT, V14, P48, DOI 10.1109/MIC.2010.81
   Daagi M, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS 2017), P172, DOI 10.1109/ICWS.2017.30
   De Renzis A, 2017, COMPUT STAND INTER, V50, P124, DOI 10.1016/j.csi.2016.09.005
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Dudney B., 2003, J2EE_AntiPatterns
   FLEISS JL, 1971, PSYCHOL BULL, V76, P378, DOI 10.1037/h0031619
   Fokaefs M., 2011, Proceedings of the 2011 IEEE International Conference on Web Services (ICWS 2011), P49, DOI 10.1109/ICWS.2011.114
   Fokaefs M, 2012, J SYST SOFTWARE, V85, P2241, DOI 10.1016/j.jss.2012.04.013
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Haesen R, 2008, LECT NOTES COMPUT SC, V5074, P375
   Harman M., 2002, GEN EV COMP C GECCO, P1351
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Hirsch M, 2018, COMPUT STAND INTER, V56, P116, DOI 10.1016/j.csi.2017.09.010
   Hruschka ER, 2009, IEEE T SYST MAN CY C, V39, P133, DOI 10.1109/TSMCC.2008.2007252
   Kessentini Marouane, 2017, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). Proceedings, P122, DOI 10.1109/MOBILESoft.2017.29
   Král J, 2009, 2009 COMPUTATION WORLD: FUTURE COMPUTING, SERVICE COMPUTATION, COGNITIVE, ADAPTIVE, CONTENT, PATTERNS, P271, DOI 10.1109/ComputationWorld.2009.80
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Mancoridis S, 1998, PROG COMPREHEN, P45, DOI 10.1109/WPC.1998.693283
   Rodriguez JM, 2013, SOFTWARE PRACT EXPER, V43, P613, DOI 10.1002/spe.2123
   Rodriguez JM, 2010, IFIP ADV INF COMM TE, V341, P139
   Maqbool O, 2007, IEEE T SOFTWARE ENG, V33, P759, DOI 10.1109/TSE.2007.70732
   Masoud H, 2014, J SYST SOFTWARE, V93, P110, DOI 10.1016/j.jss.2014.02.053
   Mateos C, 2015, SOFTWARE PRACT EXPER, V45, P925, DOI 10.1002/spe.2268
   Mateos C, 2015, ENTERP INF SYST-UK, V9, P58, DOI 10.1080/17517575.2012.717234
   Mkaouer W, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2729974
   Mohan N., 2012, POWER ELECT 1 COURSE, VFirst, P1
   Newcomer E., 2002, UNDERSTANDING WEB SE
   Coscia JLO, 2014, SCI COMPUT PROGRAM, V89, P374, DOI 10.1016/j.scico.2014.03.015
   Ouni A, 2019, ACM T INTERNET TECHN, V19, DOI 10.1145/3226593
   Ouni A, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS 2017), P532, DOI 10.1109/ICWS.2017.62
   Ouni A, 2017, IEEE T SERV COMPUT, V10, P603, DOI 10.1109/TSC.2015.2502595
   Ouni A, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1843
   Ouni A, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2932631
   Ouni A, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS), P91, DOI 10.1109/ICWS.2016.20
   Ouni A, 2015, GECCO'15: PROCEEDINGS OF THE 2015 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1351, DOI 10.1145/2739480.2754724
   Ouni A, 2015, J SYST SOFTWARE, V105, P18, DOI 10.1016/j.jss.2015.03.040
   Ouni A, 2013, AUTOMAT SOFTW ENG, V20, P47, DOI 10.1007/s10515-011-0098-8
   Paixao M, 2015, MULTIOBJECTIVE MODUL, P282
   Paixao M, 2018, IEEE T EVOLUT COMPUT, V22, P394, DOI 10.1109/TEVC.2017.2691281
   Palma F, 2014, LECT NOTES COMPUT SC, V8627, P58, DOI 10.1007/978-3-319-09970-5_6
   Perepletchikov Mikhail, 2008, Journal of Software, V3, P1, DOI 10.4304/jsw.3.2.1-14
   Perepletchikov M, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P328
   Perepletchikov M, 2007, 2007 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P329, DOI 10.1109/ASWEC.2007.17
   Perepletchikov M, 2010, IEEE T SERV COMPUT, V3, P89, DOI 10.1109/TSC.2010.23
   Poshyvanyk D, 2006, PROC IEEE INT CONF S, P469
   Praditwong K, 2011, IEEE T SOFTWARE ENG, V37, P264, DOI 10.1109/TSE.2010.26
   Romano D., 2012, Proceedings of the 2012 IEEE 19th International Conference on Web Services (ICWS), P392, DOI 10.1109/ICWS.2012.29
   Romano D, 2014, PROC IEEE INT CONF S, P351, DOI 10.1109/ICSME.2014.57
   Romano D, 2014, IEEE WORLD CONGR SER, P478, DOI 10.1109/SERVICES.2014.91
   Rotem-Gal-Oz A., 2012, SOA patterns
   Seng O, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1045
   Stewart KJ, 2006, STAT SCI, V21, P167, DOI 10.1214/088342306000000141
   Torkamani Mohammad Ali., 2014, International Journal of Electrical and Computer Engineering (IJECE), V4, P16, DOI DOI 10.11591/ijece.v4i1.4097
   Wang H, 2018, IEEE T SERV COMPUT T
   Wen Z, 2004, PROG COMPREHEN, P194, DOI 10.1109/WPC.2004.1311061
   Zhang XY, 2015, IEEE T EVOLUT COMPUT, V19, P761, DOI 10.1109/TEVC.2014.2378512
NR 69
TC 8
Z9 9
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2019
VL 26
IS 2
BP 275
EP 312
DI 10.1007/s10515-019-00256-4
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HZ9SC
UT WOS:000469196400002
DA 2024-07-18
ER

PT J
AU Pohlmann, U
   Hüwe, M
AF Pohlmann, Uwe
   Huewe, Marcus
TI Model-driven allocation engineering: specifying and solving constraints
   based on the example of automotive systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Resource allocation; Allocation engineering; Constraint satisfaction
   problem; Integer linear programming; Model-driven engineering
AB Automotive systems provide sophisticated functionality and are controlled by networked electronic control units (ECUs). Nowadays, software engineers use component-based development approaches to develop their software. Moreover, software components have to be allocated to ECUs to be executed. Engineers have to cope with topology-, software-, and timing dependencies and memory-, scheduling-, and routing constraints. Currently, engineers use linear programming to specify allocation constraints manually and to compute a feasible allocation specification automatically. However, encoding the allocation problem as a linear program is a complex and error-prone task. This paper contributes a model-driven, object constraint language based, and graph pattern based allocation engineering approach for reducing the engineering effort and to avoid failures. We validate our approach with an automotive case study. We specify the software component model, the hardware platform model, and the allocation constraint specification with our engineering approach MechatronicUML. Our validation shows that we can specify allocation constraints with less engineering effort and are able to compute feasible allocation specifications automatically.
C1 [Pohlmann, Uwe; Huewe, Marcus] Fraunhofer IEM, Zukunftsmeile 1, D-33102 Paderborn, Germany.
RP Pohlmann, U (corresponding author), Fraunhofer IEM, Zukunftsmeile 1, D-33102 Paderborn, Germany.
EM upohl@uni-paderborn.de; mhuewe@mail.uni-paderborn.de
OI Pohlmann, Uwe/0000-0002-6571-7788
CR Abran A., 2001, Guide to the software engineering body of knowledge: trial version
   *AC, CYB PHYS SYST DRIV F, DOI DOI 10.1007/978-3-642-29090-9
   Aleti A, 2015, AUTOMAT SOFTW ENG, V22, P199, DOI 10.1007/s10515-014-0148-0
   Aleti A, 2013, IEEE T SOFTWARE ENG, V39, P658, DOI 10.1109/TSE.2012.64
   Aleti A, 2009, MOMPES: 2009 ICSE WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, P61, DOI 10.1109/MOMPES.2009.5069138
   [Anonymous], 2011, 2626212011 ISO
   [Anonymous], 2011, 2626262011 ISO
   [Anonymous], 2014, P SOFTW ENG WORKSH
   Apvrille L., 2010, P FISITA 2010 WORLD, VVolume 8
   Aravantinos V., 2015, CEUR WORKSHOP P, P19
   Atkinson C, 2003, IEEE SOFTWARE, V20, P36, DOI 10.1109/MS.2003.1231149
   Becker S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P614, DOI 10.1145/2591062.2591142
   Bergmann G, 2010, LECT NOTES COMPUT SC, V6394, P76
   Blum C, 2003, ACM COMPUT SURV, V35, P268, DOI 10.1145/937503.937505
   Clements P. C., 1996, Proceedings of the 8th International Workshop on Software Specification and Design, P16, DOI 10.1109/IWSSD.1996.501143
   CROWDER H, 1983, OPER RES, V31, P803, DOI 10.1287/opre.31.5.803
   DAKIN RJ, 1965, COMPUT J, V8, P250, DOI 10.1093/comjnl/8.3.250
   Davis RI, 2007, REAL-TIME SYST, V35, P239, DOI 10.1007/s11241-007-9012-7
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Dearle A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P269, DOI 10.1109/FOSE.2007.20
   Dziwok S, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P715, DOI 10.1145/2635868.2661665
   Eckardt T, 2013, COMPUT SCI-RES DEV, V28, P3, DOI 10.1007/s00450-011-0184-y
   Feljan J, 2014, EUROMICRO CONF PROC, P237, DOI 10.1109/SEAA.2014.22
   Feljan J, 2012, EUROMICRO CONF PROC, P117, DOI 10.1109/SEAA.2012.56
   Geismann J, 2017, MODELSWARD: PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P285, DOI 10.5220/0006117702850292
   Holtmann J, 2016, J SOFTW-EVOL PROC, V28, P722, DOI 10.1002/smr.1780
   IEC, 2012, 614991 IEC
   Jaffar J., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P111, DOI 10.1145/41625.41635
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Koch T, 2011, MATH PROGRAM COMPUT, V3, P103, DOI 10.1007/s12532-011-0025-9
   Koziolek A., 2011, Proceedings of the 14th international ACM Sigsoft symposium on Component based software engineering - CBSE'11 p, P103, DOI DOI 10.1145/2000229.2000244
   Kuchcinski K, 2001, J SYST ARCHITECT, V47, P241, DOI 10.1016/S1383-7621(00)00048-5
   Kugele S, 2015, 2015 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CODESIGN (MEMOCODE), P158, DOI 10.1109/MEMCOD.2015.7340482
   Kumar S., 2010, Asia Pac. Bus. Rev., V6, P5, DOI [10.1177/097324701000600301, DOI 10.1177/097324701000600301]
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Lukasiewycz M, 2011, GECCO-2011: PROCEEDINGS OF THE 13TH ANNUAL GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1723
   Malek S, 2012, IEEE T SOFTWARE ENG, V38, P73, DOI 10.1109/TSE.2011.3
   Meedeniya I, 2011, J SYST SOFTWARE, V84, P835, DOI 10.1016/j.jss.2011.01.004
   Metzner A, 2006, REAL TIM SYST SYMP P, P147, DOI 10.1109/RTSS.2006.44
   Nazari A, 2016, J OPER RES SOC, V67, P1050, DOI 10.1057/jors.2015.119
   OMG-MARTE, 2011, UML PROF MARTE MOD A
   Pohl K., 2011, Requirements Engineering Fundamentals, V1st
   POHLMANN U, 2018, THESIS U PADERBORN P, DOI DOI 10.17619/UNIPB/1-313
   Pop T, 2014, KNOWL INF SYST, V40, P127, DOI 10.1007/s10115-013-0627-9
   Prasad M. R., 2005, International Journal on Software Tools for Technology Transfer, V7, P156, DOI 10.1007/s10009-004-0183-4
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Saksena M., 1996, Proceedings of the 4th International Workshop on Parallel and Distributed Real-Time Systems, P244, DOI 10.1109/WPDRTS.1996.557688
   Schatz Bernhard, 2010, Proceedings of the 2010 17th IEEE International Conference and Workshops on Engineering of Computer-Based Systems (ECBS 2010), P173, DOI 10.1109/ECBS.2010.25
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Svogor Ivan, 2013, CIT. Journal of Computing and Information Technology, V21, P211, DOI 10.2498/cit.1002284
   Svogor Ivan, 2013, Proceedings of the ITI 2013 35th International Conference on Information Technology Interfaces (ITI), P341, DOI 10.2498/iti.2013.0558
   Svogor I., 2016, Proceedings of the 2015 European Conference on Software Architecture Workshops - ECSAW, V15, P1, DOI DOI 10.1145/2797433.2797501
   Vale T, 2016, J SYST SOFTWARE, V111, P128, DOI 10.1016/j.jss.2015.09.019
   van Glabbeek R, 2017, ELECTRON P THEOR COM, P14, DOI 10.4204/EPTCS.244.2
   Wang SG, 2004, RTAS 2004: 10TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P219
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Williams H.P., 1998, INFORMS J COMPUT, V10, P261
   Zeller M., 2011, 2011 5th IEEE International Conference on Self-Adaptive and Self-Organizing Systems (SASO), P79, DOI 10.1109/SASO.2011.19
   Zeller M, 2013, J SYST ARCHITECT, V59, P1067, DOI 10.1016/j.sysarc.2012.11.003
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 82
TC 7
Z9 7
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2019
VL 26
IS 2
BP 315
EP 378
DI 10.1007/s10515-018-0248-3
PG 64
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HZ9SC
UT WOS:000469196400004
DA 2024-07-18
ER

PT J
AU Khatchadourian, R
AF Khatchadourian, Raffi
TI Automated refactoring of legacy Java software to enumerated types
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software environments; Software maintenance; Software tools; Enumerated
   types; Java; Automated refactoring
AB Modern Java languages introduce several new features that offer significant improvements over older Java technology. In this article we consider the new enum construct, which provides language support for enumerated types. Prior to recent Java languages, programmers needed to employ various patterns (e.g., the weak enum pattern) to compensate for the absence of enumerated types in Java. Unfortunately, these compensation patterns lack several highly-desirable properties of the enum construct, most notably, type safety. We present a novel fully-automated approach for transforming legacy Java code to use the new enumeration construct. This semantics-preserving approach increases type safety, produces code that is easier to comprehend, removes unnecessary complexity, and eliminates brittleness problems due to separate compilation. At the core of the proposed approach is an interprocedural type inferencing algorithm which tracks the flow of enumerated values. The algorithm was implemented as an open source, publicly available Eclipse plug-in and evaluated experimentally on 17 large Java benchmarks. Our results indicate that analysis cost is practical and the algorithm can successfully refactor a substantial number of fields to enumerated types. This work is a significant step towards providing automated tool support for migrating legacy Java software to modern Java technologies.
C1 [Khatchadourian, Raffi] CUNY, Hunter Coll, Dept Comp Sci, New York, NY 10065 USA.
C3 City University of New York (CUNY) System; Hunter College (CUNY)
RP Khatchadourian, R (corresponding author), CUNY, Hunter Coll, Dept Comp Sci, New York, NY 10065 USA.
EM raffi.khatchadourian@hunter.cuny.edu
RI Khatchadourian, Raffi/AAH-2180-2019
OI Khatchadourian, Raffi/0000-0002-7930-0182
FU National Science Foundation [CCF-0546040]
FX This material is based upon work supported by the National Science
   Foundation under Grant CCF-0546040.
CR Baumer D., 2001, OOPSLA 01 COMPANION
   Bloch J., 2001, EFFECTIVE JAVA PROGR
   Bracha G., 2003, 014 JSR
   De Sutter B, 2004, LECT NOTES COMPUT SC, V3086, P585
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Dig D, 2009, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2009.5070539
   Donovan A, 2004, ACM SIGPLAN NOTICES, V39, P15, DOI 10.1145/1035292.1028979
   Eidorff P. H., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P1, DOI 10.1145/292540.292543
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fuhrer R, 2005, LECT NOTES COMPUT SC, V3586, P71
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gosling J., 2005, Java Language Specification, Vthird
   Gravley JM, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P227, DOI 10.1109/WCRE.1996.558915
   Kerievsky J., 2004, REFACTORING PATTERNS
   Khatchadourian Raffi, 2007, 2007 IEEE International Conference on Software Maintenance, P224, DOI 10.1109/ICSM.2007.4362635
   Khatchadourian R., 2010, Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, P181, DOI [10.1145/1858996.1859036, DOI 10.1145/1858996.1859036]
   Kiezun A, 2007, PROC INT CONF SOFTW, P437
   Knuth D. E., 1967, THEORY COMPUT SYST, V2
   Kumar A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P98, DOI 10.1109/ICSM.2012.6405259
   Oracle Corporation, 2010, JAV PROGR LANG ENH J
   Oracle Corporation, 2015, TYP EN
   Palsberg J., 1994, OBJECT ORIENTED TYPE
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Ramalingam G., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P119, DOI 10.1145/292540.292553
   Steimann F., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1404, DOI 10.1145/1141277.1141604
   Steimann F., 2003, PPPJ
   Tip F, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/949343.949308
   Tip F., 2004, 23238 RC IBM TJ WATS
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   van Deursen A, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P220, DOI 10.1109/WCRE.1998.723192
   van Deursen A, 1999, PROG COMPREHEN, P74, DOI 10.1109/WPC.1999.777746
   von Dincklage D, 2004, ACM SIGPLAN NOTICES, V39, P1, DOI 10.1145/1035292.1028978
NR 32
TC 8
Z9 9
U1 4
U2 21
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2017
VL 24
IS 4
BP 757
EP 787
DI 10.1007/s10515-016-0208-8
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FI9EQ
UT WOS:000412307800002
DA 2024-07-18
ER

PT J
AU Silva, RS
   Hasling, WM
   Budnik, CJ
   McKenna, M
AF Silva Filho, Roberto Silveira
   Hasling, William M.
   Budnik, Christof J.
   McKenna, Monica
TI Experiences using Tedeso: an extensible and interoperable model-based
   testing platform
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model-based testing automation; Workflow-driven service-oriented
   architectures; Tedeso
AB The integration of novel software quality assurance tools into existing development environments must be performed in ways that leverage the benefits of the tools while minimizing their impact on existing software processes. This supports the adoption of new methodologies with minimal interference into core business practices. This paper discusses the design of Tedeso, an extensible and interoperable model-based testing platform developed to facilitate the automatic generation of tests, while supporting the needs of different stakeholders in a diverse and broad organization. We discuss Tedeso key design characteristics, in particular its extensibility and interoperability, provided through the use of a workflow-driven service-oriented architecture, and show how it has enabled and facilitated the adoption of model-based testing techniques in different business units in different sectors within SIEMENS. We also discuss some issues that come from the adoption of service-oriented architectures, showing how they have been managed in our platform.
C1 [Silva Filho, Roberto Silveira; Hasling, William M.; Budnik, Christof J.; McKenna, Monica] Siemens Corp, Corp Technol, Software Architecture Design, Princeton, NJ 08540 USA.
C3 Siemens AG
RP Silva, RS (corresponding author), Siemens Corp, Corp Technol, Software Architecture Design, 755 Coll Rd East, Princeton, NJ 08540 USA.
EM Roberto.Silva-Filho@siemens.com; Bill.Hasling@siemens.com;
   Christof.Budnik@siemens.com; Monica.McKenna@siemens.com
CR Birsan D., 2005, ACM QUEUE, V3, P41
   Budnik C. J., 2008, GI JAHRESTAGUNG, V1, P223
   Crelier O., 2011, Proceedings of the 2011 Fifth Brazilian Symposium on Software Components, Architectures and Reuse (SBCARS 2011), P100, DOI 10.1109/SBCARS.2011.11
   Dalal S. R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P285, DOI 10.1109/ICSE.1999.841019
   Ekman T, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1297105.1297029
   Filho R. S. S., 2010, IEEE 34th Annual Computer Software and Applications Conference Workshops (COMPSACW 2010), P323, DOI 10.1109/COMPSACW.2010.63
   Filho R S S, 2007, 9 INT C FEAT INT SOF, P33
   Haines MN, 2010, COMMUN ACM, V53, P135, DOI 10.1145/1787234.1787269
   Hartman A., 2004, Software Engineering Notes, V29, P129, DOI 10.1145/1013886.1007529
   Hasling B., 2008, MODEL BASED TESTING, P367
   Hein C., 2006, 1 WORKSH FUT TRENDS
   Masticola S.P., 2009, ASME C P 2009, P175
   OSTRAND TJ, 1988, COMMUN ACM, V31, P676, DOI 10.1145/62959.62964
   Parnas D. L., 1994, ICSE-16. 16th International Conference on Software Engineering (Cat. No.94CH3409-0), P279, DOI 10.1109/ICSE.1994.296790
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Piccinelli G, 2003, EUROMICRO CONF PROC, P291
   Richters M., 1998, Conceptual Modeling - ER'98. 17th International Conference on Conceptual Modeling. Proceedings, P449
   Silva Filho R.S., 2003, P 2 INT WORKSH DISTR, P1
   Silva Filho R.S., 2012, 5 IEEE INT C SOFTW T
   Silva RS, 2011, AOSD 2011 PROCEEDINGS AND COMPANION MATERIAL, P7
   TEITELMAN W, 1981, COMPUTER, V14, P25, DOI 10.1109/C-M.1981.220410
   THOMAS I, 1992, IEEE SOFTWARE, V9, P29, DOI 10.1109/52.120599
   Thomas I., 2007, OBJEKTSPEKTRUM, V3, P39
   Utting M., 2007, PRACTICAL MODEL BASE
   Vieira M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P669, DOI 10.1145/1368088.1368183
   Yongyi Z., 2009, RES SERVICE ORIENTED, P369
NR 26
TC 3
Z9 3
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2013
VL 20
IS 3
SI SI
BP 299
EP 337
DI 10.1007/s10515-012-0118-3
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 155QP
UT WOS:000319763400002
DA 2024-07-18
ER

PT J
AU Walderhaug, S
AF Walderhaug, Stale
TI Design and evaluation of the ModelHealth toolchain for continuity of
   care web services
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model-driven development; Healthcare information systems; Empirical
   study; Software engineering
ID CASE TOOLS; MODELS
AB Motivation: Systems interoperability is a key challenge in providing continuity of care to all patients. The challenge is addressed with information standards and new approaches to systems integration based on service-oriented architectures. Model-driven development promise utilities that are suitable for software service development in the healthcare domain, but development tools are still immature and their industry uptake is low. The knowledge about how model-driven development tools can become more useful to the healthcare software developers should be strengthened. Approach: This paper presents the ModelHealth toolchain that was created in four design/assess cycles, involving 28 students and 41 professional developers in the period 2007-2010. The toolchain provides design assistance for creating software services based on concepts from the CEN-13940 standard for continuity of care, which facilitates development of interoperable software services. Results: The CEN-13940 standard was successfully incorporated into the ModelHealth Toolchain assisting developers in creating software service design models that adhered to the standard. The developers expressed that improved understanding of the target system, documentation generation, and artifact traceability were essential utilities of the model-driven approach. Conclusion: The paper concludes healthcare domain knowledge can be successfully incorporated in a model-driven development toolchain, providing valuable input to the healthcare software service design process. A set of recommendations on how to incorporate domain specific concepts into model-driven development tools is provided. To our knowledge, no other scientific publications have reported from healthcare specific model-driven tool design and evaluations. Our recommendations extend and nuance existing knowledge on model-driven development tooling in general.
C1 [Walderhaug, Stale] SINTEF ICT, N-7465 Trondheim, Norway.
   [Walderhaug, Stale] Univ Tromso, Dept Comp Sci, Tromso, Norway.
C3 SINTEF; UiT The Arctic University of Tromso
RP Walderhaug, S (corresponding author), SINTEF ICT, SP Andersen Vei 15B, N-7465 Trondheim, Norway.
EM stale.walderhaug@sintef.no
OI Walderhaug, Stale/0000-0002-8192-2060
FU EU [IST-034707]
FX The research presented herein was made possible by the EU Grant
   IST-034707-the MPOWER project (The MPOWER Consortium 2007). A special
   thanks to the University of Tromso, Professor Gunnar Hartvigsen and the
   master students at the computer science department. Thanks to DIPS ASA
   for giving me the opportunity to use of their limited time during their
   developer conference. Finally, thanks to Dr. Erlend Stav, Dr. Geir
   Kjetil Hanssen, Marius Mikalsen, Dr. Babak Farschian and the other
   members of the BAMSE research group at SINTEF ICT in Trondheim, Norway.
   Discussions, valuable input and reviews are essential elements that aid
   keeping the focus throughout a long research trail.
CR Aizenbud-Reshef N, 2006, IBM SYST J, V45, P515, DOI 10.1147/sj.453.0515
   [Anonymous], 2020, FDA1997D0029
   [Anonymous], 2011, CONNECT COMM PORT
   [Anonymous], 2006, TC251 CEN 1, P105
   [Anonymous], 2000, TC251 CEN 1
   [Anonymous], 2009, ISOTC215 ANSI
   [Anonymous], HLTH INF, P159
   [Anonymous], 2006, SYSTEMARKITEKTUR INF
   [Anonymous], 2006, Object Constraint Language V2.0, P1
   [Anonymous], 2006, SERVICE ORIENTED ARC
   Cao L, 2009, IEEE SOFTWARE, V26, P19, DOI 10.1109/MS.2009.87
   Carver J., 2003, P 9 INT S SOFTW METR
   Chinnic R., 2007, WEB SERVICES DESCR 1
   Ericsson K.A., 1985, Protocol analysis: Verbal reports as data
   European Commission, 2011, ICT CHALL
   European Commission, 2008, C20083282 EUR COMM, V32008H0594
   Fister I, 2011, COMPUT LANG SYST STR, V37, P151, DOI 10.1016/j.cl.2011.04.001
   Fowler M., 2010, Domain-specific languages
   France R., 2007, 2007 FUT SOFTW ENG
   Fuentes-Fernandez L., 2004, The European Journal for the Informatics Professional, V5, P5
   Glass RL, 1999, IEEE SOFTWARE, V16, P104, DOI 10.1109/MS.1999.754066
   Grimson J., 2000, Communications of the ACM, V43, P48, DOI 10.1145/336460.336474
   Haggerty JL, 2003, BRIT MED J, V327, P1219, DOI 10.1136/bmj.327.7425.1219
   Hailpern B, 2006, IBM SYST J, V45, P451, DOI 10.1147/sj.453.0451
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Hevner AR., 2007, SCAND J INF SYST, V19
   Honey A., 2006, HL7 SERVICE ORIENTED, P79
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   Iivari J, 1996, COMMUN ACM, V39, P94, DOI 10.1145/236156.236183
   Ivkovic I, 2004, PROC IEEE INT CONF S, P252, DOI 10.1109/ICSM.2004.1357809
   Jedlitschka A, 2007, LECT NOTES COMPUT SC, V4336, P58
   Johnston S, 2005, UML 2 0 PROFILE SOFT
   Karna Juha, 2009, Evaluating the use of domain-specific modeling in practice
   Kawamoto K, 2007, J AM MED INFORM ASSN, V14, P146, DOI 10.1197/jamia.M2298
   Khambati Abizer, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P467, DOI 10.1109/ASE.2008.75
   Khambati A., 2008, MODEL DRIVEN APPROAC
   Khan Mohammad Ullah, 2008, IEEE Distributed Systems Online, V9, DOI 10.1109/MDSO.2008.19
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kitchenham BA, 2004, PROC INT CONF SOFTW, P273
   Kitchenham BA, 2008, Guide to advanced empirical software engineering, P63, DOI [DOI 10.1007/978-1-84800-044-5_3, 10.1007/ 978-1-84800-044-5_3]
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   Ko A.J., 2007, P 29 INT C SOFTW ENG
   Kosar T., 2012, EMPIR SOFTW ENG, P1
   Kripalani S, 2007, JAMA-J AM MED ASSOC, V297, P831, DOI 10.1001/jama.297.8.831
   Limon A.E., EUROPEAN C MODEL DRI
   MacDonald A, 2005, 2005 Australian Software Engineering Conference, Proceedings, P14, DOI 10.1109/ASWEC.2005.32
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Miles M. B., 1984, Qualitative data analysis: An expanded sourcebook
   Miller J., 2003, MDA guide version 1.0. 1
   Mohagheghi P., 2008, P MOD DRIV ARCH FDN
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   Mohagheghi P, 2010, LECT NOTES COMPUT SC, V6413, P212, DOI 10.1007/978-3-642-16385-2_27
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Object Management Group (OMG), 2006, MET FAC COR SPEC VER
   Object Management Group (OMG), 2007, UML 2 1 2 SUP INFR
   ORLIKOWSKI WJ, 1993, MIS QUART, V17, P309, DOI 10.2307/249774
   Raghupathi W., 2008, E SERV J, V5, P39
   Ramesh B, 2001, IEEE T SOFTWARE ENG, V27, P58, DOI 10.1109/32.895989
   Ryan G.W., 2000, HDB QUALITATIVE RES, V2nd, P769, DOI DOI 10.1177/0002764204273170
   Seaman C.B., 2008, Guide to Advanced Empirical Software Engineering, P35, DOI [10.1007/978-1-84800-044-52, DOI 10.1007/978-1-84800-044-52]
   Selic B, 2007, 10 IEEE ISORC, V7
   Sloane E., 2007, INTEGRATED SOCIAL AC
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   Staron M, 2006, P MODEL UML C
   Staron M, 2006, LECT NOTES COMPUT SC, V4199, P57
   Stav E., 2010, INT J MED INFORM
   Stefanov DH, 2004, IEEE T NEUR SYS REH, V12, P228, DOI 10.1109/TNSRE.2004.828423
   van den Bos J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P671, DOI 10.1145/1985793.1985887
   Walderhaug S., 2008, CODE CENTRIC MODEL C
   Walderhaug S., 2008, DESIGNING SOFTWARE I, P133, DOI DOI 10.4018/978-1-59904-699-0.CH006
   Walderhaug S, 2010, STUD HEALTH TECHNOL, V160, P242, DOI 10.3233/978-1-60750-588-4-242
   Walderhaug S, 2008, ST HEAL T, V136, P107
   Walker J., 2005, HLTH TRACKING, V5
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
   Winkler S, 2010, SOFTW SYST MODEL, V9, P529, DOI 10.1007/s10270-009-0145-0
   Winograd T., 1996, BRINGING DESIGN SOFT
NR 76
TC 0
Z9 0
U1 0
U2 34
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2013
VL 20
IS 2
SI SI
BP 185
EP 235
DI 10.1007/s10515-012-0115-6
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 095SE
UT WOS:000315354200003
DA 2024-07-18
ER

PT J
AU Gargantini, A
   Riccobene, E
   Scandurra, P
AF Gargantini, Angelo
   Riccobene, Elvinia
   Scandurra, Patrizia
TI A semantic framework for metamodel-based languages
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Metamodelling; Model-based development; Model driven engineering; Formal
   methods; Abstract state machines; Language semantics; Semantic
   (meta-)hooking; Weaving behaviour
AB In the model-based development context, metamodel-based languages are increasingly being defined and adopted either for general purposes or for specific domains of interest. However, meta-languages such as the MOF (Meta Object Facility)-combined with the OCL (Object Constraint Language) for expressing constraints-used to specify metamodels focus on structural and static semantics but have no built-in support for specifying behavioral semantics. This paper introduces a formal semantic framework for the definition of the semantics of metamodel-based languages. Using metamodelling principles, we propose several techniques, some based on the translational approach while others based on the weaving approach, all showing how the Abstract State Machine formal method can be integrated with current metamodel engineering environments to endow language metamodels with precise and executable semantics.
   We exemplify the use of our semantic framework by applying the proposed techniques to the OMG metamodelling framework for the behaviour specification of the Finite State Machines provided in terms of a metamodel.
C1 [Gargantini, Angelo; Scandurra, Patrizia] Univ Bergamo, Dip Ing Informaz & Metodi Matemat, I-24044 Dalmine, Italy.
   [Riccobene, Elvinia] Univ Milan, Dip Tecnol Informaz, I-26013 Crema, Italy.
C3 University of Bergamo; University of Milan
RP Scandurra, P (corresponding author), Univ Bergamo, Dip Ing Informaz & Metodi Matemat, Vle Marconi 5, I-24044 Dalmine, Italy.
EM angelo.gargantini@unibg.it; elvinia.riccobene@unimi.it;
   patrizia.scandurra@unibg.it
RI Gargantini, Angelo/E-6060-2012; Riccobene, Elvinia/B-7517-2013
OI Gargantini, Angelo/0000-0002-4035-0131; Riccobene,
   Elvinia/0000-0002-1400-1026; SCANDURRA, Patrizia/0000-0002-9209-3624
CR ANLAUFF M, 2000, LNCS, V1912, P69
   [Anonymous], 2006, MET FAC MOF COR SPEC
   [Anonymous], 2006, COMP 21 ACM SIGPLAN, DOI DOI 10.1145/1176617.1176691
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], MOF QUER VIEWS TRANS
   [Anonymous], 0602 LINA
   *AS OMG, 2001, ACT SEM CONS UML
   BALASUBRAMANIAN D, 2006, INT WORKSH GRAPH BAS
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   Börger E, 2005, LECT NOTES COMPUT SC, V3717, P264
   BORGER E, 2000, LNCS, V1912, P223
   Borger E., 2003, ABSTRACT STATE MACHI
   Broy M, 2007, LECT NOTES COMPUT SC, V4364, P318
   CAVARRA A, 2004, STUDIA INFORM UNIVER, V3, P367
   CHEN K, 2005, P 5 ACM INT C EMB SO, P35
   Chen K, 2007, DES AUT TEST EUROPE, P906
   CLARK T, 2001, WORKSH LANG DESCR TO
   COMBEMALE B, 2007, 9 INT C ENT INF SYST
   COMPTON K, 2000, P DYN BEH UML MOD SE
   DIRUSCIO D, 2006, 0603 LINA
   Esser R, 2001, IEEE SYMPOSIA ON HUMAN-CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P272, DOI 10.1109/HCC.2001.995274
   Flake S, 2004, LECT NOTES COMPUT SC, V3273, P226
   *FUML OMG, 2008, SEM FDN SUBS EX UML
   GARGANTINI A, 2007, LNCS FESTSCHRIFT
   GARGANTINI A, 2007, 14 INT ASM WORKSH P
   GARGANTINI A, 2008, 110 U MIL DTI DEP
   GARGANTINI A, 2006, 97 DTI U MIL
   Harel D, 2004, COMPUTER, V37, P64, DOI 10.1109/MC.2004.172
   JOUAULT F, 2006, P 8 IFIP INT C FORM
   JURJENS J., 2002, SAC, P1009
   KURTEV I, 2006, OOPSLA 06, P602
   *MICR, 2005, MICR DSL TOOLS
   MULLER PA, 2005, P ACM IEEE 8 INT C M
   OBER I, 2000, TOOLS 37 PACIFIC 200
   *OMG, 2006, OBJ CONSTR LANG OCL
   *OMG, 2002, MET FAC MOF V1 4 FOR
   *OMG, 2003, MDA GUID V1 0 1
   Riccobene E, 2004, LECT NOTES COMPUT SC, V3052, P111
   Richters M., 2001, THESIS U BREMEN
   SCANDURRA P, 2005, THESIS U CATANIA
   Scheidgen M, 2007, LECT NOTES COMPUT SC, V4530, P157
   Steinberg D., 2008, EMF ECLIPSE MODELING
   Sztipanovits J, 1997, COMPUTER, V30, P110, DOI 10.1109/2.585163
   THIRIOUX X, 2007, INT WORKSH TOW MOD T
   *UML, 2009, UML 2 1 2 OMG UN MOD
   2001, ASML ASML LANGUAGE W
   2006, XASM ZOO ATLANTIC XA
   2006, ASMM ABSTRACT STATE
   2008, GASM ASMS WEB SITE
   2007, XMF MOSAIC XACTIUM X
   2006, GME GENERIC MODELING
   2005, AMMA AMMA PLATFORM
   2007, M2M PROJECT ECLIPSE
NR 53
TC 20
Z9 23
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2009
VL 16
IS 3-4
BP 415
EP 454
DI 10.1007/s10515-009-0053-0
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 470SS
UT WOS:000268000900003
DA 2024-07-18
ER

PT J
AU Selic, B
AF Selic, Bran
TI Personal reflections on automation, programming culture, and model-based
   software engineering
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model-driven development; Computer-aided software engineering;
   Psychology of programming; Usability; Computer automation; Software
   tools
AB Model-based software engineering (MBSE) is an approach to software development characterized in part by significantly greater levels of automation when compared to more traditional development methods. Computer-based tools play a fundamental role in a number of key aspects of development, including authoring support (many MBSE languages are predominantly visual), automatic or semi-automatic verification, automated translation of specifications into corresponding programs, and so on.
   Given the historical precedents, such as the introduction of compilation technology, there is little doubt that automation, when properly conceived and realized, can dramatically increase the productivity of software developers and improve the quality of their software. Therefore, it is natural to assume that MBSE would quickly become the dominant form of software development, similar to the rapid adoption of computer-aided design approaches for hardware. Yet, this has not been the case.
   In this opinion-based article, derived from the author's long-term experience with MBSE and its application in industry, we examine the causes behind this seemingly paradoxical situation.
C1 Malina Software Corp, Nepean, ON K2J 2J3, Canada.
RP Selic, B (corresponding author), Malina Software Corp, 10 Blueridge Court, Nepean, ON K2J 2J3, Canada.
EM selic@acm.org
RI Jaafar, Mohamad Farid/B-4563-2010; Selic, Bran/AAV-7565-2021
OI Selic, Bran/0000-0002-3703-8593
CR [Anonymous], 1995, MYTHICAL MAN MONTH
   [Anonymous], 1974, Proceedings of the 1974 ACM SIGFIDET (now SIGMOD) workshop on Data description, access and control, ACM, DOI DOI 10.1145/800296.811515
   [Anonymous], PTC080609 OMG
   [Anonymous], 2004, Software Factories
   [Anonymous], 2021, MOD GLM COMM
   *ECL FDN, 2008, ECL DOC
   Ellsberger J., 1997, SDL: formal object-oriented language for communicating systems
   Frankel D.S., 2003, Model Driven Architecture: Applying MDA to Enterprise Computing
   Graham I., 2001, OBJECT ORIENTED METH
   HAREL D, 1990, IEEE T SOFTWARE ENG, V16, P403, DOI 10.1109/32.54292
   *IBM, 1964, SYST REF LIB REP PRO
   Magerko B, 2008, COMPUTER, V41, P87, DOI 10.1109/MC.2008.172
   *MATHWORKS, 2008, MATLAB FUNCT REF
   McLuhan Marshall, 1994, Laws of Media: The New Science
   Mellor StephenJ., 2004, MDA Distilled: Principles of Model-Driven Architecture
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Nunes N.J., 2005, LECT NOTES COMPUTER, V3297, P94
   Object Management Group (OMG), 2003, OMG20030601
   *OMG, 2007, FORMAL071102 OMG
   *OMG, 2007, FORMAL071201 OMG
   *OMG, 2008, OMG MARTE INF DAY
   Selic B., 1994, REAL TIME OBJECT ORI
   Weigert T, 2006, IEEE INTERNATIONAL CONFERENCE ON SENSOR NETWORKS, UBIQUITOUS, AND TRUSTWORTHY COMPUTING, VOL 1, PROCEEDINGS, P208
NR 23
TC 27
Z9 29
U1 1
U2 13
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 379
EP 391
DI 10.1007/s10515-008-0035-7
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800009
DA 2024-07-18
ER

PT J
AU Xing, ZC
   Stroulia, E
AF Xing, Zhenchang
   Stroulia, Eleni
TI Differencing logical UML models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 20th International Conference on Automated Software Engineering (ASE
   2005)
CY 2005
CL Long Beach, CA
SP IEEE, ACM
DE design differencing; structural evolution; design understanding; design
   mentoring
ID EVOLUTION; HISTORY; DESIGN
AB UMLDiff is a heuristic algorithm for automatically detecting the changes that the logical design of an object-oriented software system has gone through, as the subject system evolved from one version to the next. UMLDiff requires as input two models of the logical design of the system, corresponding to two of its versions. It produces as output a set of change facts, reporting the differences between the two logical-design versions in terms of (a) additions, removals, moves, renamings of model elements, i.e., subsystems, packages, classes, interfaces, attributes and operations, (b) changes to their attributes, and (c) changes to the relations among these model elements. In this paper, we detail the underlying metamodel, the UMLDiff algorithm and its heuristics for establishing lexical and structural similarity. We report on our experimental evaluation of the correctness and robustness of UMLDiff through a real-world case study.
C1 Univ Alberta, Dept Comp Sci, Edmonton, AB T6G 2H1, Canada.
C3 University of Alberta
RP Xing, ZC (corresponding author), Univ Alberta, Dept Comp Sci, Edmonton, AB T6G 2H1, Canada.
EM xing@cs.ualberta.ca; stroulia@cs.ualberta.ca
RI Stroulia, Eleni/H-6518-2018; Zhang, Shiwei/JIY-4344-2023
OI Stroulia, Eleni/0000-0002-8784-8236; 
CR [Anonymous], 1994, Object-oriented software metrics: a practical guide
   [Anonymous], PROGRAMMING LANGUAGE
   Apiwattanapong T, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P2, DOI 10.1109/ASE.2004.1342719
   Demeyer S, 2000, ACM SIGPLAN NOTICES, V35, P166, DOI 10.1145/354222.353183
   Egyed A., 2001, P 16 INT C AUT SOFTW
   EICK SG, 1992, IEEE T SOFTWARE ENG, V18, P957, DOI 10.1109/32.177365
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Godfrey MW, 2005, IEEE T SOFTWARE ENG, V31, P166, DOI 10.1109/TSE.2005.28
   JACKSON D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P243, DOI 10.1109/ICSM.1994.336770
   Lanza M., 2001, Proceedings of the 4th International Workshop on Principles of Software Evolution, P37
   LEHMAN MM, 1985, PROGRAM EVOLUTION PR, P538
   Ohst D, 2003, PROC IEEE INT CONF S, P13, DOI 10.1109/ICSM.2003.1235402
   *OMG, 2003, UNIF MOD LANG SPEC
   Ryder BG, 2001, ACM SIGPLAN NOTICES, P46
   Schofield C, 2006, INT C PROGRAM COMPRE, P23, DOI 10.1109/ICPC.2006.18
   SIMON K, 1986, THEORETICAL COMPUTER, V58, P376
   SPANOUDAKIS G, 2001, P 7 INT C OBJ OR INF, P47
   Tu Q, 2002, PROG COMPREHEN, P127, DOI 10.1109/WPC.2002.1021334
   Van Rysselberghe F, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P126, DOI 10.1109/IWPSE.2003.1231219
   WAGNER RA, 1974, J ACM, V21, P168, DOI 10.1145/321796.321811
   XING Z, 2004, P ECL TECHN EXCH WOR
   Xing Z., 2005, Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering, P54
   XING Z, 1991, IDENTIFYING SYNTACTI, V21, P739
   Xing ZC, 2005, PROC IEEE INT CONF S, P621
   Xing ZC, 2006, INT J SOFTW ENG KNOW, V16, P23, DOI 10.1142/S0218194006002707
   Xing ZC, 2005, IEEE T SOFTWARE ENG, V31, P850, DOI 10.1109/TSE.2005.106
   Xing ZC, 2004, PROG COMPREHEN, P34, DOI 10.1109/WPC.2004.1311045
   Xing ZC, 2006, PROC IEEE INT CONF S, P458
NR 30
TC 31
Z9 35
U1 1
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2007
VL 14
IS 2
BP 215
EP 259
DI 10.1007/s10515-007-0007-3
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 212HE
UT WOS:000249586000004
DA 2024-07-18
ER

PT J
AU Kumar, A
   Nadeem, M
   Shameem, M
AF Kumar, Ankur
   Nadeem, Mohammad
   Shameem, Mohammad
TI Machine learning based predictive modeling to effectively implement
   DevOps practices in software organizations
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE DevOps; Prediction model; Support vector machine; Artificial neural
   network; Random forest
ID CONTINUOUS INTEGRATION; SAMPLE-SIZE; RANDOM FOREST; CLASSIFICATION;
   AUTOMATION; STRENGTH; NEED
AB Development and Operations (DevOps) is a relatively recent phenomenon that can be defined as a multidisciplinary effort to improve and accelerate the delivery of business values in terms of IT solutions. Many software organizations are heading towards DevOps to leverage its benefits in terms of improved development speed, stability, collaboration, and communication. DevOps practices are essential to effectively implement in software organizations, but little attention has been given in the literature to how these practices can be managed. Our study aims to propose and develop a framework for effectively managing DevOps practices. We have conducted an empirical study using the publicly available HELENA2 dataset to identify the best practices for effectively implementing DevOps. Furthermore, we have used the prediction algorithms such as Support Vector Machine (SVM), Artificial Neural Network (ANN) and Random Forest (RF) to develop a prediction model for DevOps implementation. The findings of this study show that "Continuous deployment", "Coding standards", "Continuous integration", and "Daily Standup" "are the most significant practicesduring the life cycle of projects for effectively managing the DevOps practices. The contribution of this study is not only limited to investigating the best DevOps practices but also provides a prediction of DevOps project success and prioritization of best practices. It can assist software organizations in getting the best possible practices to focus on based on the nature of their projects.
C1 [Kumar, Ankur; Nadeem, Mohammad] Aligarh Muslim Univ, Dept Comp Sci, Aligarh, India.
   [Shameem, Mohammad] Koneru Lakshmaiah Educ Fdn, Dept Comp Sci & Engn, Vaddeswaram, Andhra Prades, India.
C3 Aligarh Muslim University; Koneru Lakshmaiah Education Foundation (K L
   Deemed to be University)
RP Shameem, M (corresponding author), Koneru Lakshmaiah Educ Fdn, Dept Comp Sci & Engn, Vaddeswaram, Andhra Prades, India.
EM shameem.ism@gmail.com
RI Kumar, Ankur/KTI-8876-2024
OI Kumar, Ankur/0000-0002-2417-9581
CR Abiodun OI, 2019, IEEE ACCESS, V7, P158820, DOI 10.1109/ACCESS.2019.2945545
   Akbar MA, 2023, SOFT COMPUT, V27, P1907, DOI 10.1007/s00500-020-05150-w
   Albuquerque AB, 2019, ADV INTELL SYST COMP, V860, P143, DOI 10.1007/978-3-030-00184-1_14
   Almeida F, 2022, FUTURE INTERNET, V14, DOI 10.3390/fi14020063
   Amaro R, 2023, IEEE T SOFTWARE ENG, V49, P883, DOI 10.1109/TSE.2022.3166626
   Amershi S, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P291, DOI 10.1109/ICSE-SEIP.2019.00042
   Anandya R., 2021, 2021 INT C INF MULT, DOI [10.1109/icimcis53775.2021.9699240, DOI 10.1109/ICIMCIS53775.2021.9699240]
   Andreassen A, 2020, PHYS REV D, V101, DOI 10.1103/PhysRevD.101.091901
   Angara J, 2018, ADV INTELL SYST, V709, P271, DOI 10.1007/978-981-10-8633-5_28
   Azad N, 2022, 5TH INTERNATIONAL WORKSHOP ON SOFTWARE-INTENSIVE BUSINESS: TOWARDS SUSTAINABLE SOFTWARE BUSINESS (IWSIB 2022), P83, DOI 10.1145/3524614.3528627
   Badshah Sher, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P427, DOI 10.1145/3383219.3383280
   Bapi S. Chakraborty, 2019, Understanding Azure Monitoring: Includes IaaS and PaaS Scenarios, P205, DOI [10.1007/978-1-4842-5130-06, DOI 10.1007/978-1-4842-5130-06]
   BARHILLEL M, 1979, ORGAN BEHAV HUM PERF, V24, P245, DOI 10.1016/0030-5073(79)90028-X
   Beck TW, 2013, J STRENGTH COND RES, V27, P2323, DOI 10.1519/JSC.0b013e318278eea0
   Benni B, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2019), P605, DOI 10.1109/MODELS-C.2019.00092
   Bijwe A., 2022, SSRN ELECT J, DOI [10.2139/ssrn.4091401, DOI 10.2139/SSRN.4091401]
   Brand M, 2021, REV MANAG SCI, V15, P157, DOI 10.1007/s11846-019-00373-0
   Bruneliere H, 2022, MICROPROCESS MICROSY, V94, DOI 10.1016/j.micpro.2022.104672
   Çalikli G, 2018, PROCEEDINGS OF THE 2018 INTERNATIONAL CONFERENCE ON SOFTWARE AND SYSTEM PROCESS (ICSSP 2018), P51, DOI 10.1145/3202710.3203156
   Callanan M, 2016, IEEE SOFTWARE, V33, P53, DOI 10.1109/MS.2016.66
   Castellanos C, 2021, J SYST SOFTWARE, V172, DOI 10.1016/j.jss.2020.110869
   Chauhan VK, 2019, ARTIF INTELL REV, V52, P803, DOI 10.1007/s10462-018-9614-6
   Crowley Catherine, 2018, DEVOPS CAPABILITY TH
   Dehgani R, 2019, KYBERNETES, V48, P2217, DOI 10.1108/K-10-2018-0532
   Dörnenburg E, 2018, IEEE SOFTWARE, V35, P71, DOI 10.1109/MS.2018.290110337
   Erich FMA, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1885
   Faustino J, 2022, SOFTWARE PRACT EXPER, V52, P1905, DOI 10.1002/spe.3096
   Fernández-Delgado M, 2014, J MACH LEARN RES, V15, P3133
   Filippetto AS, 2021, INFORM SOFTWARE TECH, V131, DOI 10.1016/j.infsof.2020.106497
   Fitzgerald B, 2017, J SYST SOFTWARE, V123, P176, DOI 10.1016/j.jss.2015.06.063
   Forsgren N, 2018, COMMUN ACM, V61, P44, DOI 10.1145/3159169
   Gall M, 2022, EUR J INFORM SYST, V31, P548, DOI 10.1080/0960085X.2021.1997100
   Gheorghe-Pop ID, 2020, IEEE GLOBE WORK, DOI 10.1109/GCWkshps50303.2020.9367411
   Gupta TK, 2019, MACHINE LEARNING IN BIO-SIGNAL ANALYSIS AND DIAGNOSTIC IMAGING, P159, DOI 10.1016/B978-0-12-816086-2.00007-2
   Gupta V, 2017, INFORM SOFTWARE TECH, V92, P75, DOI 10.1016/j.infsof.2017.07.010
   Heine K.M., THESIS G WASHINGTON
   Hemon A, 2020, IEEE SOFTWARE, V37, P30, DOI 10.1109/MS.2019.2958900
   Hemon A, 2020, INFORM SYST FRONT, V22, P927, DOI 10.1007/s10796-019-09905-1
   Imbault F, 2004, INT C PATT RECOG, P597, DOI 10.1109/ICPR.2004.1333843
   Ivanova A., 2018, DATA ANAL DEVOPS EFF
   Karamitsos I, 2020, INFORMATION, V11, DOI 10.3390/info11070363
   Khan AA, 2021, APPL SOFT COMPUT, V102, DOI 10.1016/j.asoc.2021.107090
   Khan AA, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2263
   Khan MS, 2022, IEEE ACCESS, V10, P14339, DOI 10.1109/ACCESS.2022.3145970
   Kirk Diana, 2022, Onward! 2022: Proceedings of the 2022 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P33, DOI 10.1145/3563835.3567656
   Klünder J, 2020, 2020 IEEE/ACM INTERNATIONAL CONFERENCE ON SOFTWARE AND SYSTEM PROCESSES, ICSSP, P61, DOI 10.1145/3379177.3388898
   Kuhrmann M., 2018, HELENA Stage 2 Results
   Lazuardi M., 2021, 2021 10th International Conference on Software and Information Engineering (ICSIE), P10, DOI DOI 10.1145/3512716.3512718
   Leite L, 2020, ACM COMPUT SURV, V52, DOI 10.1145/3359981
   Lin B, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3490388
   Liu L., 2021, P 5 INT C COMP SCI A, P1, DOI [10.1145/3487075.3487116, DOI 10.1145/3487075.3487116]
   Luz WP, 2019, J SYST SOFTWARE, V157, DOI 10.1016/j.jss.2019.07.083
   Lwakatare LE, 2020, INT CONF SOFTW, P216
   Lwakatare LE, 2019, INFORM SOFTWARE TECH, V114, P217, DOI 10.1016/j.infsof.2019.06.010
   Macarthy RW, 2020, EUROMICRO CONF PROC, P221, DOI 10.1109/SEAA51224.2020.00046
   Mair C, 2000, J SYST SOFTWARE, V53, P23, DOI 10.1016/S0164-1212(00)00005-4
   Mantovani RG, 2016, PROCEEDINGS OF 2016 5TH BRAZILIAN CONFERENCE ON INTELLIGENT SYSTEMS (BRACIS 2016), P37, DOI [10.1109/BRACIS.2016.62, 10.1109/BRACIS.2016.018]
   Marijan D, 2019, SOFTWARE PRACT EXPER, V49, P192, DOI 10.1002/spe.2661
   Marijan D, 2018, P INT COMP SOFTW APP, P22, DOI 10.1109/COMPSAC.2018.00012
   Marrero L, 2021, 2021 40TH INTERNATIONAL CONFERENCE OF THE CHILEAN COMPUTER SCIENCE SOCIETY (SCCC), DOI 10.1109/SCCC54552.2021.9650363
   Martínez-Mesa J, 2014, AN BRAS DERMATOL, V89, P609
   Morales JA, 2018, 19TH INTERNATIONAL CONFERENCE ON AGILE SOFTWARE DEVELOPMENT (XP '18), DOI 10.1145/3234152.3234188
   Mumbarkar Priyanka, 2022, AIP Conference Proceedings, V2519, DOI 10.1063/5.0110594
   Munoz Mirna, 2019, New Knowledge in Information Systems and Technologies. Advances in Intelligent Systems and Computing (AISC 930), P666, DOI 10.1007/978-3-030-16181-1_63
   Nadeem M, 2017, APPL SOFT COMPUT, V59, P500, DOI 10.1016/j.asoc.2017.06.005
   Nadeem M, 2016, ARAB J SCI ENG, V41, P1053, DOI 10.1007/s13369-015-1979-0
   Narang P, 2022, ENG TECHNOL APPL SCI, V12, P9726, DOI 10.48084/etasr.5315
   Nogueira AF, 2018, 2018 11TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P282, DOI 10.1109/QUATIC.2018.00050
   Pianini D, 2021, PROC IEEE INT CONF S, P505, DOI 10.1109/ICSME52107.2021.00051
   Lima JAP, 2020, INFORM SOFTWARE TECH, V121, DOI 10.1016/j.infsof.2020.106268
   Probst P, 2019, WIRES DATA MIN KNOWL, V9, DOI 10.1002/widm.1301
   Putra TA, 2020, IEEE ACCESS, V8, P40536, DOI 10.1109/ACCESS.2020.2976045
   Rafi S, 2022, APPL SOFT COMPUT, V116, DOI 10.1016/j.asoc.2021.108377
   Rahman A, 2019, INFORM SOFTWARE TECH, V108, P65, DOI 10.1016/j.infsof.2018.12.004
   Ramezan CA, 2019, REMOTE SENS-BASEL, V11, DOI 10.3390/rs11020185
   Razavi S, 2021, ENVIRON MODELL SOFTW, V137, DOI 10.1016/j.envsoft.2020.104954
   Rodríguez P, 2019, ADV COMPUT, V113, P135, DOI 10.1016/bs.adcom.2018.03.014
   Sabharwal N., 2022, HANDS ON AIOPS, DOI [10.1007/978-1-4842-8267-0, DOI 10.1007/978-1-4842-8267-0]
   Saidani I, 2021, INFORM SOFTWARE TECH, V138, DOI 10.1016/j.infsof.2021.106618
   Samarawickrama Saliya Sajith, 2017, 2017 Seventeenth International Conference on Advances in ICT for Emerging Regions (ICTer), P1, DOI 10.1109/ICTER.2017.8257808
   Senapathi Mali, 2018, P 22 INT C EV ASS SO, P57, DOI [10.1145/3210459.3210465, DOI 10.1145/3210459.3210465]
   Shahin M, 2017, IEEE ACCESS, V5, P3909, DOI 10.1109/ACCESS.2017.2685629
   Shameem M, 2023, APPL SOFT COMPUT, V135, DOI 10.1016/j.asoc.2023.109998
   Shameem M, 2020, APPL SOFT COMPUT, V90, DOI 10.1016/j.asoc.2020.106122
   Shameem Mohammad, 2022, Evol. Softw. Process.: Trends Future Dir., P187
   Sheykhmousa M, 2020, IEEE J-STARS, V13, P6308, DOI 10.1109/JSTARS.2020.3026724
   Smeds J, 2015, LECT NOTES BUS INF P, V212, P166, DOI 10.1007/978-3-319-18612-2_14
   Soni M, 2016, IEEE CONF CLOUD COMP, P85, DOI 10.1109/CCEM.2015.29
   Speiser JL, 2019, EXPERT SYST APPL, V134, P93, DOI 10.1016/j.eswa.2019.05.028
   Stahl Daniel, 2017, 2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P440, DOI 10.1109/SEAA.2017.8114695
   Subramanya R, 2022, APPL SCI-BASEL, V12, DOI 10.3390/app12199851
   Vabalas A, 2019, PLOS ONE, V14, DOI 10.1371/journal.pone.0224365
   Wang ZQ, 2020, INT CONF ADV CLOUD B, P42, DOI 10.1109/CBD51900.2020.00017
   Xiong Z, 2020, COMP MATER SCI, V171, DOI 10.1016/j.commatsci.2019.109203
NR 94
TC 3
Z9 3
U1 3
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 21
DI 10.1007/s10515-023-00388-8
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M0KU6
UT WOS:001027095100001
DA 2024-07-18
ER

PT J
AU Negrón, APP
   Reyes, LM
   Muñoz, M
AF Perez Negron, Adriana Pena
   Reyes, Luz M.
   Munoz, Mirna
TI Mathematical model of social behavior for the allocation of members in
   software development teams
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Mathematical model; Software development; Team members; Team
   integration; Project management
ID OPTIMIZATION; PROJECTS
AB The allocation of members in software development teams has a direct impact on the software project's success. Several approaches have been proposed to deal with this task, mainly using optimization techniques to manage the cost, scope, and time constraints, where experience and backgrounds represent important resources; however, when there is no previous teamwork between the candidates the problem might escalate. For software development team formation different variables are considered from the individual profiles, along with team characteristics such as team size, members' geographic location, or team roles; while it can be expected that the team interaction influences its members' performance. In this paper, a mathematical model is introduced as a means to understand how individuals evolve as a result of their interaction, presenting an overview of team behavior as a whole. The model simulates the individuals clustering according to similarities, and the variation of the individual states as a result of their interaction. In the model, adjustable parameters include the number of individuals, the number and degree of their characteristics with an expected probability of manifestation, the degree of similarity among them for clustering, and the probability of clustering. The model is applied to an approach based on interactive styles and the Team Software Process methodology team roles, simulating their interactive style degree adaptability over time.
C1 [Perez Negron, Adriana Pena; Reyes, Luz M.] Univ Guadalajara CUCEI, Guadalajara, Jalisco, Mexico.
   [Munoz, Mirna] Ctr Invest Matemat, Unidad Zacatecas, Zacatecas, Zacatecas, Mexico.
RP Negrón, APP (corresponding author), Univ Guadalajara CUCEI, Guadalajara, Jalisco, Mexico.
EM adriana.pena@cucei.udg.mx
RI Peña Pérez Negrón, Adriana/AFK-8243-2022
OI Peña Pérez Negrón, Adriana/0000-0001-6823-2367; reyes,
   luz/0000-0003-4449-8894
CR Abrams D., 1990, EUR J SOC PSYCHOL, V1, P195, DOI [10.1080/14792779108401862, DOI 10.1080/14792779108401862]
   André M, 2011, INFORM SOFTWARE TECH, V53, P259, DOI 10.1016/j.infsof.2010.11.011
   Arunachalam Abhinaya, 2016, CSI Transactions on ICT, V4, P83, DOI 10.1007/s40012-016-0105-0
   Cialdini RB, 2004, ANNU REV PSYCHOL, V55, P591, DOI 10.1146/annurev.psych.55.090902.142015
   Costa A, 2020, IEEE ACCESS, V8, P145687, DOI 10.1109/ACCESS.2020.3015017
   Di Penta M, 2011, SOFTWARE PRACT EXPER, V41, P495, DOI 10.1002/spe.1001
   Drexler A., 1993, TEAM PERFORMANCE MOD, V1
   Harre R., 1986, THE DICT PERSONALITY
   Humphrey W. S, 1990, INTRO TEAM SOFTWARE
   Humphrey W.S, 2000, PERSONAL SOFTWARE PR, V11
   Jana RK, 2017, ADV INTELL SYST, V458, P395, DOI 10.1007/978-981-10-2035-3_40
   Keith MJ, 2018, P 51 HAW INT C SYST
   Lappas T, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P467
   May R M., 2004, The theory of chaotic attractors, P85, DOI 10.1007/978-0-387-21830-4_7
   Muñoz M, 2024, J SOFTW-EVOL PROC, V36, DOI 10.1002/smr.2342
   Muñoz M, 2019, IET SOFTW, V13, P99, DOI 10.1049/iet-sen.2018.5088
   Parravano A, 2008, PHYS REV E, V78, DOI 10.1103/PhysRevE.78.026120
   Prashandi W. A. C., 2019, 2019 International Conference on Advanced Computing and Applications (ACOMP). Proceedings, P16, DOI 10.1109/ACOMP.2019.00010
   Rangel N, 2017, COMM COM INF SC, V748, P675, DOI 10.1007/978-3-319-64218-5_56
   Ren J, 2011, LECT NOTES COMPUT SC, V6956, P127, DOI 10.1007/978-3-642-23716-4_14
   Ribes E., 1990, PSICOLOGIA GEN
   Schall D, 2016, P INT WORKSH QUAL AS, P35
   Schwaber K., 2013, DEFINITIVE GUIDE SCR
   Tsai HT, 2003, EUR J OPER RES, V151, P167, DOI 10.1016/S0377-2217(02)00600-8
   Tseng T.-L., 2004, International Journal of Project Management, V22, P147, DOI 10.1016/S0263-7863(03)00058-9
   Yilmaz M, 2017, INFORM SOFTWARE TECH, V86, P101, DOI 10.1016/j.infsof.2017.01.005
NR 26
TC 1
Z9 1
U1 1
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 32
DI 10.1007/s10515-022-00330-4
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZT8YF
UT WOS:000769435200001
DA 2024-07-18
ER

PT J
AU Derakhshandi, M
   Kolahdouz-Rahimi, S
   Troya, J
   Lano, K
AF Derakhshandi, Mohammad
   Kolahdouz-Rahimi, Shekoufeh
   Troya, Javier
   Lano, Kevin
TI A model-driven framework for developing android-based classic
   multiplayer 2D board games
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model driven; Android; 2D games; Board games; Multiplayer games
ID MOBILE APPLICATIONS; VIDEOGAMES
AB Mobile applications and game development are attractive fields in software engineering. Despite the advancement of programming languages and integrated development environments, there have always been many challenges for software and mobile game developers. Model-Driven Engineering (MDE) is a software engineering methodology that applies software modeling languages for modeling the problem domain. In this paradigm, the code is to be automatically generated from the models by applying different model transformations. Besides, manipulating models instead of code facilitates the discovery and resolution of errors due to the high level of abstraction. This study presents an approach and framework, called MAndroid, that generates Android-based classic multiplayer 2D board games in a fully automated fashion, relying on the concepts of MDE. Structural and behavioral dimensions of the game are first modeled in MAndroid. Models are then automatically transformed to code that can be run on any mobile phone and tablet running Android 4.4 or higher. In order to evaluate the proposed approach, three board games are fully implemented. Additionally, applicability, developer performance, simplicity and attractiveness of MAndroid are evaluated through a set of questionnaires. MAndroid is also evaluated technically by comparing it to other Android game-development frameworks. Results demonstrate the benefits of using MAndroid.
C1 [Derakhshandi, Mohammad; Kolahdouz-Rahimi, Shekoufeh] Univ Isfahan, Dept Software Engn, MDSE Res Grp, Esfahan, Iran.
   [Troya, Javier] Univ Malaga, ITIS Software, Malaga, Spain.
   [Lano, Kevin] Kings Coll London, Dept Informat, London, England.
C3 University of Isfahan; Universidad de Malaga; University of London;
   King's College London
RP Kolahdouz-Rahimi, S (corresponding author), Univ Isfahan, Dept Software Engn, MDSE Res Grp, Esfahan, Iran.
EM m.derakhshandi71@gmail.com; sh.rahimi@eng.ui.ac.ir; jtroya@uma.es;
   kevin.lano@kcl.ac.uk
OI Lano, Kevin Charles/0000-0002-9706-1410
FU European Commission (FEDER); Spanish Government under project COSCA
   [PGC2018-094905-B-I00]; Spanish Government under project APOLO
   [US-1264651]; Spanish Government under project HORATIO
   [RTI2018-101204-B-C21]; Spanish Government under project EKIPMENT-PLUS
   [P18-FR-2895]
FX We would like to thank the reviewers of the paper for their insightful
   comments and very valuable suggestions, which helped us significantly to
   improve this work. This work is partially supported by the European
   Commission (FEDER) and the Spanish Government under projects COSCA
   (PGC2018-094905-B-I00), APOLO (US-1264651), HORATIO
   (RTI2018-101204-B-C21) and EKIPMENT-PLUS (P18-FR-2895).
CR Akoglu H, 2018, TURK J EMERG MED, V18, P91, DOI 10.1016/j.tjem.2018.08.001
   Albaum G, 1997, J MARKET RES SOC, V39, P331
   Altunbay D., 2009, 1 TURKISH S MODEL DR
   [Anonymous], 2019, SMARTPHONE MARKET SH
   [Anonymous], 2021, CARDGAMES
   [Anonymous], 2021, FUN GAMES FREE
   [Anonymous], 2003, ANDREW ROLLINGS ERNE
   [Anonymous], 2012, EXPT SOFTWARE ENG
   [Anonymous], 2021, BIG BRAIN KRAKEN
   [Anonymous], 2019, ECLIPSE ACCELEO PROJ
   [Anonymous], 2019, ANDROID DEVELOPERS
   Bezivin J., 2004, UPGRADE: The European Journal for the Informatics Professional, V5
   Brambilla M., 2012, Model-Driven Software Engineering in Practice, DOI [DOI 10.1007/978-3-031-02549-5, 10.2200/S00441ED1V01Y201208SWE001, DOI 10.2200/S00441ED1V01Y201208SWE001]
   Budinsky F., 2004, Eclipse modeling framework: a developer's guide
   Callele D, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P240, DOI 10.1109/RE.2005.58
   Derakhsandi M, 2019, MANDROID FRAMEWORK
   Developer A., 2015, PERMISSIONS ANDROID
   Frank U., 2013, Domain Engineering, P133
   Gharaat M, 2021, AUTOMAT SOFTW ENG, V28, DOI 10.1007/s10515-020-00278-3
   Guana V, 2014, P 2014 IEEE GAMES EN
   Heitk├a┬Atter H., 2013, P 28 ANN ACM S APPL, P526, DOI [https://doi.org/10.1145/2480362.2480464, DOI 10.1145/2480362.2480464]
   Hernandez F.E., 2010, Proceedings of the 10th Workshop on Domain-Specific Modeling, P1
   Hinebaugh J.P., 2009, BOARD GAME ED
   Kelly C., 2012, PROGRAMMING 2D GAMES, DOI [10.1201/b12292, DOI 10.1201/B12292]
   Kleppe A., 2008, Software Language Engineering: Creating Domain-Specific Languages using Metamodels
   Kosanovic M, 2016, AIP CONF PROC, V1738, DOI 10.1063/1.4952022
   Lachgar M, 2017, INT J COMPUT SCI NET, V17, P274
   Marques E., 2012, Proceedings of the 2012 workshop on Domain-specific modeling, P13
   Meier R., 2018, PROFESSIONAL ANDROID, DOI [10.1002/9781119419389, DOI 10.1002/9781119419389]
   Merriam-Webster, 2019, DEFINITION GAME MERR
   Minhyuk Ko, 2012, 2012 IEEE/ACIS 11th International Conference on Computer and Information Science (ICIS), P669, DOI 10.1109/ICIS.2012.48
   Musset Jonathan, 2006, Acceleo user guide, P157
   Novak J., 2011, Game Development Essentials: An Introduction, Vth
   Núñez M, 2020, J SYST SOFTWARE, V161, DOI 10.1016/j.jss.2019.110489
   Oldevik J, 2005, LECT NOTES COMPUT SC, V3748, P239
   Parada A. G., 2011, Proceedings of the 2011 Brazilian Symposium on Computing System Engineering (SBESC 2011), P99, DOI 10.1109/SBESC.2011.22
   Parada AG, 2012, BRAZ SYM COMPUT SYST, P192, DOI 10.1109/SBESC.2012.44
   Pressman R.S., 2005, Software engineering: a Practitioner's Approach
   Reyno EM., 2009, COMPUTERS ENTERTAINM, V7, P1, DOI DOI 10.1145/1541895.1541909
   Rieger C, 2018, COMPUT LANG SYST STR, V53, P43, DOI 10.1016/j.cl.2018.01.001
   Núñez-Valdez ER, 2017, J AMB INTEL HUM COMP, V8, P435, DOI 10.1007/s12652-016-0404-1
   Nuñez-Valdez ER, 2013, INT J INTERACT MULTI, V2, P33, DOI 10.9781/ijimai.2013.224
   Sabraoui A., 2019, 2019 International Conference of Computer Science and Renewable Energies (ICCSRE), P1, DOI [10.1109/ICCSRE.2019.8807572, DOI 10.1109/ICCSRE.2019.8807572]
   Sabraoui A, 2012, PROCEEDINGS OF 2012 INTERNATIONAL CONFERENCE ON COMPLEX SYSTEMS (ICCS12), P393
   Sanchez Kevin, 2015, 2015 10th Computing Colombian Conference (10CCC). Proceedings, P93, DOI 10.1109/ColumbianCC.2015.7333417
   Schober P, 2018, ANESTH ANALG, V126, P1763, DOI 10.1213/ANE.0000000000002864
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Thu EE, 2017, 2017 IEEE/ACIS 15TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS (SERA), P179, DOI 10.1109/SERA.2017.7965726
   Tschang FT, 2005, INT J INNOV MANAG, V9, P103, DOI 10.1142/S1363919605001198
   Tufail H, 2018, 2018 IEEE 9TH ANNUAL INFORMATION TECHNOLOGY, ELECTRONICS AND MOBILE COMMUNICATION CONFERENCE (IEMCON), P1165, DOI 10.1109/IEMCON.2018.8614821
   Usman Muhammad, 2014, 2014 21st Asia-Pacific Software Engineering Conference (APSEC), P111, DOI 10.1109/APSEC.2014.26
   Vaupel S, 2018, SOFTW SYST MODEL, V17, P35, DOI 10.1007/s10270-016-0559-4
NR 53
TC 1
Z9 1
U1 2
U2 14
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 7
DI 10.1007/s10515-021-00282-1
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SQ7UV
UT WOS:000660557500001
DA 2024-07-18
ER

PT J
AU Gadelha, G
   Ramalho, F
   Massoni, T
AF Gadelha, Guilherme
   Ramalho, Franklin
   Massoni, Tiago
TI Traceability recovery between bug reports and test cases-a Mozilla
   Firefox case study
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Bug reports; System features; Test cases; Traceability; Information
   retrieval; Deep learning
ID REQUIREMENTS; LINKS
AB Automatic recovery of traceability between software artifacts may promote early detection of issues and better calculate change impact. Information Retrieval (IR) techniques have been proposed for the task, but they differ considerably in input parameters and results. It is difficult to assess results when those techniques are applied in isolation, usually in small or medium-sized software projects. Recently, multilayered approaches to machine learning, in special Deep Learning (DL), have achieved success in text classification through their capacity to model complex relationships among data. In this article, we apply several IR and DL techniques for investing automatic traceability between bug reports and manual test cases, using historical data from the Mozilla Firefox's Quality Assurance (QA) team. In this case study, we assess the following IR techniques: LSI, LDA, and BM25, in addition to a DL architecture called Convolutional Neural Networks (CNNs), through the use of Word Embeddings. In this context of traceability, we observe poor performances from three out of the four studied techniques. Only the LSI technique presented acceptable results, standing out even over the state-of-the-art BM25 technique. The obtained results suggest that the semi-automatic application of the LSI technique - with an appropriate combination of thresholds - may be feasible for real-world software projects.
C1 [Gadelha, Guilherme; Ramalho, Franklin; Massoni, Tiago] Fed Univ Campina Grande UFCG, Comp & Syst Dept DSC, Campina Grande, Paraiba, Brazil.
C3 Universidade Federal de Campina Grande
RP Gadelha, G (corresponding author), Fed Univ Campina Grande UFCG, Comp & Syst Dept DSC, Campina Grande, Paraiba, Brazil.
EM guilherme@copin.ufcg.edu.br; franklin@computacao.ufcg.edu.br;
   massoni@computacao.ufcg.edu.br
FU Brazilian federal agency CAPES of Ministry of Education (MEC/Brazil)
FX Brazilian federal agency CAPES of Ministry of Education (MEC/Brazil).
CR [Anonymous], 2009, INTRO INFORM RETRIEV
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Berry DM, 2017, 2017 IEEE 25TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW), P284, DOI 10.1109/REW.2017.25
   Bjarnason E, 2016, INFORM SOFTWARE TECH, V77, P61, DOI 10.1016/j.infsof.2016.03.008
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Borg M, 2014, EMPIR SOFTW ENG, V19, P1565, DOI 10.1007/s10664-013-9255-y
   Buttcher S., 2010, Information Retrieval-Implementing and Evaluating Search Engines
   Canfora G., 2006, ADV MATER RES-KR, DOI [10.4028/www.scientific.net/AMR.785-786.1516, DOI 10.4028/WWW.SCIENTIFIC.NET/AMR.785-786.1516]
   Capobianco G, 2009, WORK CONF REVERSE EN, P195, DOI 10.1109/WCRE.2009.14
   Capobianco G, 2009, INT C PROGRAM COMPRE, P148, DOI 10.1109/ICPC.2009.5090038
   Chen K, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P31
   Chen K., 2013, EFFICIENT ESTIMATION, P2
   Davies S, 2014, P 8 ACM IEEE INT S E, DOI [10.1145/2652524.2652541, DOI 10.1145/2652524.2652541]
   De Lucia A, 2013, INFORM SOFTWARE TECH, V55, P741, DOI 10.1016/j.infsof.2012.08.002
   De Lucia A, 2011, CONF PROC INT SYMP C, P21, DOI 10.1109/ICPC.2011.34
   De Lucia A, 2006, INT C PROGRAM COMPRE, P307, DOI 10.1109/ICPC.2006.15
   De Lucia A, 2009, EMPIR SOFTW ENG, V14, P57, DOI 10.1007/s10664-008-9090-8
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Dekhtyar A, 2007, INT REQUIR ENG CONF, P141, DOI 10.1109/RE.2007.17
   Dekhtyar A, 2017, INT REQUIR ENG CONF, P484, DOI 10.1109/RE.2017.26
   Eder Sebastian, 2014, 9 INT WORKSH AUT SOF, P29, DOI [10.1145/2593501.2593506, DOI 10.1145/2593501.2593506]
   Falessi CantoneG., 2010, ESEM 2010 - Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, P1
   Falessi D, 2017, EMPIR SOFTW ENG, V22, P996, DOI 10.1007/s10664-016-9460-6
   Fazzini M, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P141, DOI 10.1145/3213846.3213869
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Guo J, 2017, PROC INT CONF SOFTW, P3, DOI 10.1109/ICSE.2017.9
   Hayes J.H., 2005, TRACING MAPPING SUPP
   Hayes JH, 2007, INNOV SYST SOFTW ENG, V3, P193, DOI 10.1007/s11334-007-0024-1
   Hayes JH, 2006, IEEE T SOFTWARE ENG, V32, P4, DOI 10.1109/TSE.2006.3
   Hoffman M.D., 2012, ACADEMIAEDU, P1
   Kaushik N., 2011, 2011 18th Working Conference on Reverse Engineering, P411, DOI 10.1109/WCRE.2011.58
   Lee Dennis, 2016, WRITE BUG REPORT WIL
   Lormans M, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P45
   Mäntylä MV, 2013, PROC IEEE INT CONF S, P20, DOI 10.1109/ICSM.2013.13
   Merten T, 2016, LECT NOTES COMPUT SC, V9619, P45, DOI 10.1007/978-3-319-30282-9_4
   Mills C, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P1068, DOI 10.1145/3106237.3121280
   Minelli R, 2013, EUR CON SFTWR MTNCE, P144, DOI 10.1109/CSMR.2013.24
   Ng AY, 2002, ADV NEUR IN, V14, P841
   Oliveto Rocco, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P68, DOI 10.1109/ICPC.2010.20
   Panichella A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P522, DOI 10.1109/ICSE.2013.6606598
   Passos L., 2013, FEATURE ORIENTED SOF, DOI [10.1145/2430502.2430526, DOI 10.1145/2430502.2430526]
   Pennington J., 2014, P 2014 C EMP METH NA, P1532, DOI [DOI 10.3115/V1/D14-1162, 10.3115/v1/D14-1162]
   Robertson Stephen, 2009, Foundations and Trends in Information Retrieval, V3, P333, DOI 10.1561/1500000019
   Sabev P., 2015, MANUAL AUTOMATED TES
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Sharifi F, 2018, IEEE INT CONF SOFTW, P309, DOI 10.1109/ICST.2018.00038
   Sommerville I., 2011, Software Engineering (Ninth), DOI DOI 10.1111/J.1365-2362.2005.01463.X
   Yadla S, 2005, INNOV SYST SOFTW ENG, V1, P116, DOI 10.1007/s11334-005-0011-3
   Zimmermann T, 2010, IEEE T SOFTWARE ENG, V36, P618, DOI 10.1109/TSE.2010.63
NR 50
TC 6
Z9 6
U1 1
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 8
DI 10.1007/s10515-021-00287-w
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TH9OV
UT WOS:000672413300001
DA 2024-07-18
ER

PT J
AU Karthikeyan, M
   Subashini, TS
   Jebakumar, R
AF Karthikeyan, M.
   Subashini, T. S.
   Jebakumar, R.
TI SSD based waste separation in smart garbage using augmented clustering
   NMS
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Object detection; Single-shot detector; Smart garbage; ACNMS
ID OBJECT DETECTION
AB Object detection plays a pivotal role in autonomous systems helps to build the machines to be intelligent as humans that leads to build an Artificial Intelligence application used for society,Industries,face-recognition and so-on. Nowadays, it is difficult to manage the waste generated by humans and industries which is increasing rapidly day by day needs to address the problem to make automation for separating the Bio-degradable and Non-Bio degradable waste. Although humans are tried to manage impact of waste management in society to maintain the eco-system by implementing a separate trash for Bio and Non-bio waste. Sometimes it is difficult to follow for the separation of waste manually by humans. There is no existing sensor to identify the types of wastes. In this proposed system, it evolves the implementation of the bio-degradable and non-bio degradable object detection method to help to detect these objects automatically with the augmented clustering NMS using Single-shot detector methods. The enhanced augmented clustering algorithm effectively detects the multiple objects in the video along with the respective bio or non-bio classification custom object detection model. With the build thousand images for each class custom dataset model to train the objects using deep learning neural network. A custom object detection data model is built with the help of NVIDIA GPU RTX 4 GB using tensorflow model. Here the results are interpreted with the mean average precision value of 0.965 with ACNMS Single shot object detector which is effectively detected with the new enhanced technique.
C1 [Karthikeyan, M.; Jebakumar, R.] SRM Inst Sci & Technol, Sch Comp, Coll Engn & Technol, Dept Comp Sci & Engn, Kattankulathur 603203, India.
   [Subashini, T. S.] Annamalai Univ, Dept Comp Sci & Engn, Chidambaram 608002, India.
C3 SRM Institute of Science & Technology Chennai; Annamalai University
RP Karthikeyan, M (corresponding author), SRM Inst Sci & Technol, Sch Comp, Coll Engn & Technol, Dept Comp Sci & Engn, Kattankulathur 603203, India.
EM karthikm1@srmist.edu.in
RI M, Karthikeyan/AAZ-5615-2021; M, KARTHIKEYAN/JQW-9773-2023; R,
   JEBAKUMAR/ABE-8759-2021; R, J/HNJ-2189-2023; T.S., Subashini/W-3557-2019
OI M, Karthikeyan/0000-0002-2025-6535; R, JEBAKUMAR/0000-0002-1570-2561;
   T.S., Subashini/0000-0002-1292-2315
CR Andrew Howe J., 2017, IMPROVED CLUSTERING, V1, P1
   Annepu R.K., 2012, SUSTAINABLE SOLID WA, P3
   Bodla N, 2017, IEEE I CONF COMP VIS, P5562, DOI 10.1109/ICCV.2017.593
   Chinnaswamy S, 2021, COMPUT ELECTR ENG, V91, DOI 10.1016/j.compeleceng.2021.107130
   Dersch S, 2021, ISPRS J PHOTOGRAMM, V172, P207, DOI 10.1016/j.isprsjprs.2020.11.016
   Devaki P., 2019, INT J INNOV TECHNOL, V12, P411
   Fathimah YA., 2020, P MANUF, V43, P535
   Ghatak TK, 2016, PROCEDIA ENVIRON SCI, V35, P169, DOI 10.1016/j.proenv.2016.07.071
   Hespeler SC, 2021, ARTIF INTELL AGR, V5, P102, DOI 10.1016/j.aiia.2021.05.003
   Nguyen HT, 2020, SENSORS-BASEL, V20, DOI 10.3390/s20164424
   Kim Y, 2021, APPL SOFT COMPUT, V102, DOI 10.1016/j.asoc.2020.107062
   Kumar Ashwani, 2020, Procedia Computer Science, V171, P2610, DOI 10.1016/j.procs.2020.04.283
   Kumar A, 2020, CURR RES ENVIRON SUS, V2, DOI 10.1016/j.crsust.2020.100011
   Kumar A, 2020, EURASIP J WIREL COMM, V2020, DOI 10.1186/s13638-020-01826-x
   Li CJ, 2021, PATTERN RECOGN LETT, V145, P127, DOI 10.1016/j.patrec.2021.02.003
   Li YD, 2020, CHINESE J AERONAUT, V33, P1747, DOI 10.1016/j.cja.2020.02.024
   Liu Y, 2021, EXPERT SYST APPL, V172, DOI 10.1016/j.eswa.2021.114602
   Lopes A.C.P., 2021, J CLEAN PROD, V280, P1
   Lyu Y, 2021, ISPRS J PHOTOGRAMM, V176, P139, DOI 10.1016/j.isprsjprs.2021.04.004
   Ma G., 2021, J BUILD ENG, V38, P1
   Murthy CB, 2020, APPL SCI-BASEL, V10, DOI 10.3390/app10093280
   Nagrath P, 2021, SUSTAIN CITIES SOC, V66, DOI 10.1016/j.scs.2020.102692
   Nowakowski P, 2020, WASTE MANAGE, V109, P1, DOI 10.1016/j.wasman.2020.04.041
   Panwar H., 2020, Case Stud. Chem. Environ. Eng., V2
   Qin JC, 2021, PROCEDIA COMPUT SCI, V183, P768, DOI 10.1016/j.procs.2021.02.127
   Sahoo PK., 2020, J KING SAUD U COMPUT, V1, P1
   ShanFur BB., 2020, P CIRP, V88, P54, DOI [10.1016/j.procir.2020.05.010, DOI 10.1016/J.PROCIR.2020.05.010]
   Sohag MU, 2020, INTERNET THINGS-NETH, V11, DOI 10.1016/j.iot.2020.100255
   Srinivasan R, 2023, DISTRIB PARALLEL DAT, V41, P37, DOI 10.1007/s10619-021-07331-4
   Wang, 2020, J MATER CIVIL ENG, V32, P1
   Xianzhi Du, 2020, 2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Proceedings, P11589, DOI 10.1109/CVPR42600.2020.01161
   Younis Ayesha, 2020, ICCDE 2020: Proceedings of 2020 the 6th International Conference on Computing and Data Engineering, P44, DOI 10.1145/3379247.3379264
   Zhou K, 2016, DESTECH TRANS COMP
NR 33
TC 8
Z9 8
U1 2
U2 38
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 17
DI 10.1007/s10515-021-00296-9
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UL1AI
UT WOS:000692391600001
DA 2024-07-18
ER

PT J
AU Liu, ZX
   Xia, X
   Lo, D
   Grundy, J
AF Liu, Zhongxin
   Xia, Xin
   Lo, David
   Grundy, John
TI Automatic, highly accurate app permission recommendation
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Android security model; Permission recommendation; Collaborative
   filtering; Content-based recommendation
AB To ensure security and privacy, Android employs a permission mechanism which requires developers to explicitly declare the permissions needed by their applications (apps). Users must grant those permissions before they install apps or during runtime. This mechanism protects users' private data, but also imposes additional requirements on developers. For permission declaration, developers need knowledge about what permissions are necessary to implement various features of their apps, which is difficult to acquire due to the incompleteness of Android documentation. To address this problem, we present a novel permission recommendation system named PerRec for Android apps. PerRec leverages mining-based techniques and data fusion methods to recommend permissions for given apps according to their used APIs and API descriptions. The recommendation scores of potential permissions are calculated by a composition of two techniques which are implemented as two components of PerRec: a collaborative filtering component which measures similarities between apps based on semantic similarities between APIs; and a content-based recommendation component which automatically constructs profiles for potential permissions from existing apps. The two components are combined in PerRec for better performance. We have evaluated PerRec on 730 apps collected from Google Play and F-Droid, a repository of free and open source Android apps. Experimental results show that our approach significantly improves the state-of-the-art approaches APRecCFcorrelation, APRecTEXT and Axplorer.
C1 [Liu, Zhongxin] Zhejiang Univ, Coll Comp Sci & Technol, Hangzhou, Zhejiang, Peoples R China.
   [Xia, Xin; Grundy, John] Monash Univ, Fac Informat Technol, Melbourne, Vic, Australia.
   [Lo, David] Singapore Management Univ, Sch Informat Syst, Singapore, Singapore.
C3 Zhejiang University; Monash University; Singapore Management University
RP Xia, X (corresponding author), Monash Univ, Fac Informat Technol, Melbourne, Vic, Australia.
EM liu_zx@zju.edu.cn; xin.xia@monash.edu; davidlo@smu.edu.sg;
   john.grundy@monash.edu
RI Xia, Xin/AAD-6217-2022; Grundy, John/I-6681-2012; Lo, David/A-2493-2012
OI Xia, Xin/0000-0002-6302-3256; Grundy, John/0000-0003-4928-7076; Lo,
   David/0000-0002-4367-7201
CR [Anonymous], 2017, DOWNL PAG ANDR SDK
   [Anonymous], 2017, ANDR API REF
   [Anonymous], 2017, ANDR SEC TIPS
   Aslam J. A., 2001, SIGIR Forum, P276
   Au K. W. Y., 2017, WEBSITE PSCOUT
   Au Kathy Wain Yee, 2012, P 2012 ACM C COMP CO, P217
   Backes M., 2017, WEBSITE AXPLORER
   Backes M, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P1101
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Bao LF, 2017, SCI CHINA INFORM SCI, V60, DOI 10.1007/s11432-016-9072-3
   Bao LF, 2016, 2016 INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, TESTING AND EVOLUTION (SATE 2016), P36, DOI 10.1109/SATE.2016.13
   Bartel A, 2012, IEEE INT CONF AUTOM, P274, DOI 10.1145/2351676.2351722
   Collard ML, 2003, PROG COMPREHEN, P134
   Desnos A., 2011, Black Hat, 2011, Abu Dhabi, BlackHat'11, P77
   Felt A. P., 2017, WEBSITE STOWAWAY
   Felt AP, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P627
   Felt AP, 2012, P 8 S USABLE PRIVACY, P1, DOI DOI 10.1145/2335356.2335360
   Fox E. A., 1993, Text REtrieval Conference (TREC-1) (NIST-SP-500-207), P319
   FOX EA, 1994, COMBINATION MULTIPLE
   GitHub, 2017, REP MP3 VOIC REC GIT
   Gousios Georgios, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P12, DOI 10.1109/MSR.2012.6224294
   Gousios G., 2018, WEBSITE GHTORRENT
   Grissom R. J., 2005, EFFECT SIZES RES BRO
   Gunawardana A, 2009, J MACH LEARN RES, V10, P2935
   IDC, 2017, SMARTPH VEND MARK SH
   Karim MY, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P427, DOI 10.1109/SANER.2016.74
   Khan U, 2018, REMOTEDROID F DROID
   Li CJ, 2014, PROCEEDINGS OF THE 2ND INTERNATIONAL CONFERENCE ON SOFT COMPUTING IN INFORMATION COMMUNICATION TECHNOLOGY, P275
   Lo D., 2014, P 29 ACM IEEE INT C, P127
   Majeur, 2018, APPL INF GOOGL PLAY
   Manadhata PK, 2011, IEEE T SOFTWARE ENG, V37, P371, DOI 10.1109/TSE.2010.60
   Mihalcea R., 2006, P 21 NAT C ART INT, V6, P775
   Munaiah N, 2017, EMPIR SOFTW ENG, V22, P3219, DOI 10.1007/s10664-017-9512-6
   Oracle, 2017, OFF WEBS JAV
   Oracle, 2017, JAV API DOC
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Pennington J., 2017, WEBSITE GLOVE
   Pennington J., 2014, P 2014 C EMP METH NA, P1532
   Prabhakar Raghavan, 2008, INTRO INFORM RETRIEV, V151, P5
   Qu ZY, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1354, DOI 10.1145/2660267.2660287
   Vidas T., 2011, P WEB, V2, P91
   Wu DJ, 2012, ASIA JT CONF INF SEC, P62, DOI 10.1109/AsiaJCIS.2012.18
   Wu SL, 2012, ADAPT LEARN OPTIM, V13, P135
   Xu BW, 2016, IEEE INT CONF AUTOM, P51, DOI 10.1145/2970276.2970357
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
NR 45
TC 14
Z9 16
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2019
VL 26
IS 2
BP 241
EP 274
DI 10.1007/s10515-019-00254-6
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HZ9SC
UT WOS:000469196400001
DA 2024-07-18
ER

PT J
AU Tzannes, A
   Heumann, ST
   Eloussi, L
   Vakilian, M
   Adve, VS
   Han, M
AF Tzannes, Alexandros
   Heumann, Stephen T.
   Eloussi, Lamyaa
   Vakilian, Mohsen
   Adve, Vikram S.
   Han, Michael
TI Region and effect inference for safe parallelism
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Safe parallelism; Annotation inference; Fork-join parallelism
AB In this paper, we present the first full regions-and-effects inference algorithm for explicitly parallel fork-join programs. We infer annotations equivalent to those in Deterministic Parallel Java (DPJ) for type-safe C++ programs. We chose the DPJ annotations because they give the strongest safety guarantees of any existing concurrency-checking approach we know of, static or dynamic, and it is also the most expressive static checking system we know of that gives strong safety guarantees. This expressiveness, however, makes manual annotation difficult and tedious, which motivates the need for automatic inference, but it also makes the inference problem very challenging: the code may use region polymorphism, imperative updates with complex aliasing, arbitrary recursion, hierarchical region specifications, and wildcard elements to describe potentially infinite sets of regions. We express the inference as a constraint satisfaction problem and develop, implement, and evaluate an algorithm for solving it. The region and effect annotations inferred by the algorithm constitute a checkable proof of safe parallelism, and it can be recorded both for documentation and for fast and modular safety checking.
C1 [Tzannes, Alexandros; Heumann, Stephen T.; Eloussi, Lamyaa; Vakilian, Mohsen; Adve, Vikram S.] Univ Illinois, Champaign, IL 61820 USA.
   [Han, Michael] Autodesk Inc, San Rafael, CA USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   Autodesk, Inc.
RP Tzannes, A (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
EM atzannes@gmail.com
OI Tzannes, Alexandros/0000-0002-4984-2036
FU Directorate for Computer and Information Science and Engineering [NSF
   CNS 07-20772]; Intel Illinois Parallel Computing Center (I2PC)
FX Funding was provided by Directorate for Computer and Information Science
   and Engineering (Grant No. NSF CNS 07-20772) and Intel Illinois Parallel
   Computing Center (I2PC).
CR Aiken Alexander., 1995, Proceedings of the ACM SIGPLAN 1995 Conference on Programming Language Design and Implementation, PLDI '95, page, p174?185
   Allen M. D., 2009, P 14 ACM SIGPLAN S P
   Anderson M, 2008, TLS-TIMES LIT SUPPL, P29
   [Anonymous], P 15 ED ASPLOS ARCH
   [Anonymous], 1994, Program analysis and specialization for the C programming language
   [Anonymous], P 20 IEEE INT C SOFT
   [Anonymous], 2009, P 24 ACM SIGPLAN C O
   Artzi S, 2009, AUTOMAT SOFTW ENG, V16, P145, DOI 10.1007/s10515-008-0043-7
   Banning J. P., 1979, P 6 ACM SIGACT SIGPL
   Bierman G., 2003, WORKSH OBJ OR DEV
   Bocchino Jr R. L., 2010, THESIS
   Bocchino Jr R. L., 2011, P 38 ANN ACM SIGPLAN
   Bocchino RL, 2011, LECT NOTES COMPUT SC, V6813, P306, DOI 10.1007/978-3-642-22655-7_15
   Cherem S., 2004, P 4 INT S MEM MAN VA
   Clarke DavidG., 1998, P 13 ACM SIGPLAN C O
   Cunningham D, 2008, LECT NOTES COMPUT SC, V5382, P72, DOI 10.1007/978-3-540-92188-2_4
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dietl W., 2011, P 25 EUR C OBJ OR PR
   Dymnikov C., 2013, P 22 AUSTR C SOFTW E
   Fahndrich M., 1998, P ACM SIGPLAN 1998 C
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   GORDON C. S., 2012, P ACM INT C OBJ OR P
   Greenhouse A., 1999, P 13 EUR C OBJ OR PR
   Hardekopf Ben, 2007, P 2007 ACM SIGPLAN C
   Huang W., 2012, P ACM INT C OBJ OR P
   Huang W., 2012, P 26 EUR C OBJ OR PR
   Jouvelot P., 1991, P 18 ACM SIGPLAN SIG
   Kawaguchi M., 2012, P 33 ACM SIGPLAN C P
   Lee EA, 2006, COMPUTER, V39, P33, DOI 10.1109/MC.2006.180
   Lucassen J. M., 1988, P 15 ACM SIGPLAN SIG
   Nguyen P., 2005, P 28 AUSTR C COMP SC, V38
   Olszewski M., 2009, P 14 INT C ARCH SUPP
   Pearce DJ, 2011, LECT NOTES COMPUT SC, V6601, P104, DOI 10.1007/978-3-642-19861-8_7
   Quinonez J, 2008, LECT NOTES COMPUT SC, V5142, P616, DOI 10.1007/978-3-540-70592-5_26
   Rinard MC, 1998, ACM T PROGR LANG SYS, V20, P483, DOI 10.1145/291889.291893
   Rondon P. M., 2010, P 37 ANN ACM SIGPLAN
   Rountev A., 2000, P ACM SIGPLAN 2000 C
   Ryder BG, 2001, ACM T PROGR LANG SYS, V23, P105, DOI 10.1145/383043.381532
   Sabry Amr, 1993, LISP SYMBOLIC COMPUT, V6, P289
   SALCIANU AD, 2005, P 6 INT C VER MOD CH
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M., 1994, P 21 ACM SIGPLAN S P
   Treichler S., 2013, P 2013 ACM SIGPLAN I
   Vakilian M., 2009, P 2009 IEEE ACM INT
NR 45
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2019
VL 26
IS 2
BP 463
EP 509
DI 10.1007/s10515-019-00257-3
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HZ9SC
UT WOS:000469196400007
DA 2024-07-18
ER

PT J
AU Hegedüs, A
   Horváth, A
   Varró, D
AF Hegedues, Abel
   Horvath, Akos
   Varro, Daniel
TI A model-driven framework for guided design space exploration
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Design space exploration; Model-driven engineering; Search-based
   software engineering
ID EMBEDDED SYSTEMS; TRANSFORMATION
AB Design space exploration (DSE) aims at searching through various models representing different design candidates to support activities like configuration design of critical systems or automated maintenance of IT systems. In model-driven engineering, DSE is applied to find instance models that are (i) reachable from an initial model with a sequence of transformation rules and (ii) satisfy a set of structural and numerical constraints. Since exhaustive exploration of the design space is infeasible for large models, the traversal is often guided by hints, derived by system analysis, to prioritize the next states to traverse (selection criteria) and to avoid searching unpromising states (cut-off criteria). In this paper, we define an exploration approach where selection and cut-off criteria are defined using dependency analysis and algebraic abstraction of transformation rules. Additionally, we apply different state encoding techniques to identify recurring states and reduce the number of visited states. Finally, we illustrate our approach on a cloud infrastructure configuration problem and provide detailed evaluation on both synthetic and real applications. This evaluation includes (i) the comparison of several exploration techniques, (ii) performance measurements on multiple state encoding techniques and (iii) comparing two implementation architectures of our design space exploration framework.
C1 [Hegedues, Abel; Horvath, Akos; Varro, Daniel] Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, H-1117 Budapest, Hungary.
C3 Budapest University of Technology & Economics
RP Hegedüs, A (corresponding author), Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Magyar Tudosok Krt 2, H-1117 Budapest, Hungary.
EM abel.hegedus@mit.bme.hu; akos.horvath@mit.bme.hu; varro@mit.bme.hu
RI Varro, Daniel/AAC-4234-2022; Hegedus, Abel/A-8494-2012
OI Varro, Daniel/0000-0002-8790-252X; Horvath, Akos/0000-0003-3545-3694;
   Hegedus, Abel/0000-0002-8940-4348
FU CERTIMOT Project [ERC_HU-09-01-2010-0003]; TAMOP Grants
   [4.2.2.B-10/1-2010-0009, 4.2.2.C-11/1/KONV-2012-0001]; Janos Bolyai
   Scholarship
FX The authors would like to thank their students Miklos Foldenyi and Tamas
   Szabo, who helped in the evaluation of state encoding techniques and
   comparing the Viatra2 and EMF-based DSE framework implementations and
   the anonymous reviewers for their excellent comments and suggestions.
   This work was partially supported by the CERTIMOT
   (ERC_HU-09-01-2010-0003) Project, the TAMOP (4.2.2.B-10/1-2010-0009,
   4.2.2.C-11/1/KONV-2012-0001) Grants and the Janos Bolyai Scholarship.
CR [Anonymous], 2012, ECLIPSE PROJECT EMFT
   [Anonymous], 2012, ECLIPSE PROJECT EMF
   [Anonymous], IEEE S VIS LANG HUM
   Atkinson C, 2003, IEEE SOFTWARE, V20, P36, DOI 10.1109/MS.2003.1231149
   AUTOSAR Consortium, 2013, THE AUTOSAR STAND
   Baldan P, 2002, LECT NOTES COMPUT SC, V2505, P14
   Baresi L., 2006, Software and System Modeling, V5, P187
   Baresi L, 2006, LECT NOTES COMPUT SC, V4178, P306
   Baresi L, 2008, ELECTRON NOTES THEOR, V213, P3, DOI 10.1016/j.entcs.2008.04.071
   Basten T., 2013, Model-Based Design of Adaptive Embedded Systems, P189
   Basten T, 2010, LECT NOTES COMPUT SC, V6415, P90, DOI 10.1007/978-3-642-16558-0_10
   Bergmann G., 2008, Proceedings of 3rd International Workshop on Graph and Model Transformation (GRaMoT 2008). 30th International Conference on Software Engineering, P25, DOI [10.1145/1402947.1402953, DOI 10.1145/1402947.1402953]
   Bergmann G., 2012, P 6 INT C GRAPH TRAN
   Bergmann G, 2012, LECT NOTES COMPUT SC, V7304, P1, DOI 10.1007/978-3-642-30561-0_1
   Bouktif S., 2006, P GECCO 06 ACM
   BOYAPATI C, 2002, P INT S SOFTW TEST A
   dos Santos O M., 2004, Electr. Notes Theor. Comput. Sci, V109, P125
   Edelkamp S., 2006, LNCS, V4178
   Ehrig H., 1999, Handbook of Graph Grammars and Computing by Graph Transformation: Applications, Languages and Tools, V2
   Ermel C., 2011, LNCS, V6603
   Eunsuk Kang, 2010, Foundations of Computer Software. Modeling, Development, and Verification of Adaptive Systems. 16th Monterey Workshop 2010. Revised Selected Papers, P33, DOI 10.1007/978-3-642-21292-5_3
   Gamatié A, 2011, ACM T EMBED COMPUT S, V10, DOI 10.1145/2043662.2043663
   GODEFROID P, 1995, FORM METHOD SYST DES, V7, P227, DOI 10.1007/BF01384077
   Heckel R., 2002, LNCS
   Hegedus Abel, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P173, DOI 10.1109/ASE.2011.6100051
   Hegedus A., 2010, P PNGT 10
   Horváth A, 2012, SOFTW SYST MODEL, V11, P385, DOI 10.1007/s10270-010-0185-5
   Jackson E.K, 2013, P INT C EMB SOFTW EM, P1, DOI [10.1109/EMPSOFT.2013.6658589, DOI 10.1109/EMPSOFT.2013.6658589]
   KIESEL N, 1995, INFORM SYST, V20, P21, DOI 10.1016/0306-4379(95)00002-L
   König B, 2006, LECT NOTES COMPUT SC, V3920, P197
   Kuhne T., 2006, Softw Syst Model, V5, P369, DOI [DOI 10.1007/S10270-006-0017-9, 10.1007/s10270-006-0017-9]
   Meedeniya I, 2011, J SYST SOFTWARE, V84, P835, DOI 10.1016/j.jss.2011.01.004
   MENS T, 1999, THESIS VRIJE U BRUSS
   Mens T., 2006, LANGAGES MODELES OBJ
   Mohanty S, 2002, ACM SIGPLAN NOTICES, V37, P18, DOI 10.1145/566225.513835
   Neema S, 2003, LECT NOTES COMPUT SC, V2855, P290
   Object Management Group, 2013, BUS PROC MOD NOT BPM
   Rensink A, 2004, LECT NOTES COMPUT SC, V3256, P319
   Rensink A., 2007, ELECT COMMUNICATIONS, V1
   Rensink A., 2004, Applications of Graph Transformations with Industrial Relevance (AGTIVE), V3063 of LNCS.
   Rensink A, 2005, ELECTRON NOTES THEOR, V127, P127, DOI 10.1016/j.entcs.2004.12.036
   Rensink Arend., 2003, Workshop on Automated Verification of Critical Systems (AVoCS), Technical Report DSSE-TR-2003-2, P150
   Ristau B., 2008, P C DES AUT TEST EUR
   Saxena T, 2010, LECT NOTES COMPUT SC, V6394, P46
   Schatz Bernhard, 2010, Proceedings of the 2010 17th IEEE International Conference and Workshops on Engineering of Computer-Based Systems (ECBS 2010), P173, DOI 10.1109/ECBS.2010.25
   Schmidt A., 2003, LNCS, V2863, P92
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Stern U., 1996, Methoden des Entwurfs und der Verifikation digitaler Systeme, V4, P81
   Talbi E.-G, 2009, METAHEURISTICS DESIG, V74, DOI DOI 10.1002/9780470496916
   The Eclipse Project, 2012, ECLIPSE MODELING FRA
   Varro D., 2003, Journal of Software and Systems Modeling, V2, P187, DOI [DOI 10.1007/S10270-003-0028-8, 10.1007/s10270-003-0028-8]
   Varro D, 2006, LNCS, V4178
   Varró D, 2007, SCI COMPUT PROGRAM, V68, P214, DOI 10.1016/j.scico.2007.05.004
   Varro-Gyapay S., 2006, P PNGT 06
   Visser W., 2004, Software Engineering Notes, V29, P97, DOI 10.1145/1013886.1007526
   Voudouris C., 2010, Wiley Encyclopedia of Operations Research and Management Science
NR 56
TC 24
Z9 28
U1 2
U2 15
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2015
VL 22
IS 3
SI SI
BP 399
EP 436
DI 10.1007/s10515-014-0163-1
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CM4JQ
UT WOS:000357651200005
DA 2024-07-18
ER

PT J
AU Voelter, M
   Ratiu, D
   Kolb, B
   Schaetz, B
AF Voelter, Markus
   Ratiu, Daniel
   Kolb, Bernd
   Schaetz, Bernhard
TI mbeddr: instantiating a language workbench in the embedded software
   domain
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Language workbenches; Domain specific languages and tooling; Synthesis
   of tailored tools; Embedded systems
AB Tools can boost software developer productivity, but building custom tools is prohibitively expensive, especially for small organizations. For example, embedded programmers often have to use low-level C with limited IDE support, and integrated into an off-the-shelf tool chain in an ad-hoc way.
   To address these challenges, we have built mbeddr, an extensible language and IDE for embedded software development based on C. mbeddr is a large-scale instantiation of the Jetbrains MPS language workbench. Exploiting its capabilities for language modularization and composition, projectional editing and multi-stage transformation, mbeddr is an open and modular framework that lets third parties add extensions to C with minimal effort and without invasive changes. End users can combine extensions in programs as needed.
   To illustrate the approach, in this paper we discuss mbeddr's support for state machines, components, decision tables, requirements tracing, product line variability and program verification and outline their implementation. We also present our experience with building mbeddr, which shows that relying on language workbenches dramatically reduces the effort of building customized, modular and extensible languages and IDEs to the point where this is affordable by small organizations. Finally, we report on the experience of using mbeddr in a commercial project, which illustrates the benefits to end users.
C1 [Voelter, Markus] Independent Itemis, Stuttgart, Germany.
   [Kolb, Bernd] Itemis AG, Stuttgart, Germany.
   [Ratiu, Daniel; Schaetz, Bernhard] Fortiss, Munich, Germany.
C3 fortiss
RP Voelter, M (corresponding author), Independent Itemis, Stuttgart, Germany.
EM voelter@acm.org; ratiu@fortiss.org; kolb@itemis.de; schaetz@fortiss.org
FU German BMBF [FKZ 01/S11014]
FX We thank Marcel Matzat and Domenik Pavletic for their work on mbeddr.
   mbeddr has been supported by the German BMBF, FKZ 01/S11014.
CR Andalam S., 2010, P ACM IEEE INT C FOR
   Andalam Sidharta, 2009, P WORKSH REC PERF PR
   Arnoldus J., 2007, P 6 ACM INT C GEN PR
   Axelsson E., 2010, MEMOCODE 2010
   Bachrach J., 2001, P 16 C OBJ OR PROGR
   Ben-Asher Y., 1996, SOFTW PRACT EXP, V26
   Beuche D, 2004, SCI COMPUT PROGRAM, V53, P333, DOI 10.1016/j.scico.2003.04.005
   Birk A., 2003, IEEE SOFTW, V20
   Boussinot F., 1991, SOFTW PRACT EXP, V21
   Bravenboer M., 2007, LNCS, V5002
   Bravenboer M., 2004, P 19 C OBJ OR PROGR
   Bravenboer M., 2007, GEN PROGR COMP ENG 6
   BRAVENBOER M, 2008, STRATEGO XT 0 17 LAN
   Broy M., 2011, EMERGING TECHNOLOGIE
   Broy M., 2010, P IEEE, V98
   Clarke E., 2000, Modular Translation of Statecharts to SMV
   Clarke Edmund M., 1997, P INT C FDN SOFTW TE, P54, DOI DOI 10.1007/BFB0058022
   Corbett J. C., 2000, P INT C SOFTW ENG IC
   Damm W., 2010, NATL ROADMAP EMBEDDE
   Dunkels A., 2006, P 4 INT C EMB NETW S
   Ebert C, 2009, COMPUTER, V42, P42, DOI 10.1109/MC.2009.118
   Efftinge S., 2012, P 11 C GEN PROGR COM
   Erdweg S., 2011, OOPSLA 2011
   Erdweg S., 2011, P 10 ACM INT C GEN P
   Ernst M.D., 2002, IEEE T SOFTW ENG, V28
   Ferguson R., 2000, INF SOFTW TECHNOL, V42
   Fowler M, 2005, Language workbenches: The killer-app for domain specific languages?
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gokhale A.S., 2008, SCI COMPUT PROGRAM, V73
   Graaf B., 2003, IEEE SOFTW, V20
   Grunbacher P., 2009, P 2009 INT C AUT SOF
   Grundy J., 2007, P 29 INT C SOFTW ENG
   Hammond K., 2003, P GPCE 2003
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   Heering J., 1989, ACM SIGPLAN NOT, V24
   Heidenreich F., 2007, 2 WORKSH ASP OR PROD
   Heitmeyer C., 2006, DEV SAFETY CRITICAL
   Hemel Z, 2011, ACM SIGPLAN NOTICES, V46, P695, DOI 10.1145/2076021.2048121
   Janicki R., 1997, TABULAR REPRESENTATI
   Jirapanthong W., 2005, 12 AS PAC SOFTW ENG
   Kastner C., 2007, P 11 INT C SOFTW PRO, V2
   Kats L.C.L., 2010, P 25 ACM C OBJ OR PR
   Klint P., 2009, 9 IEEE INT WORK C SO
   Klint P., 1993, ACM T SOFTW ENG METH, V2
   Krahn Holger, 2010, International Journal on Software Tools for Technology Transfer, V12, P353, DOI 10.1007/s10009-010-0142-1
   Liggesmeyer P., 2009, IEEE SOFTW, V26
   Loer K., 2002, P INT C AUT SOFTW EN
   Lorenz D.H., 2011, P OOPSLA SPLASH 2011
   Mali Y., 2011, LNCS, V6823
   Marche C, 2012, JESSIE PLUGIN DEDUCT
   Medina-Mora R., 1981, IEEE T SOFTW ENG, V7
   Mernik M, 2005, COMPUT LANG SYST STR, V31, P1, DOI 10.1016/j.cl.2004.02.001
   Mernik M., 2002, LNCS, V2304
   Meyer Bertrand., 1998, Proceedings of the 26th International Conference on Technology of Object-Oriented Languages and Systems (TOOLS'98), page, P446
   Notkin D., 1985, J SYST SOFTW, V5
   Nystrom N., 2003, LNCS, V2622
   Palopoli L., 1999, 6 INT WORKSH REAL TI
   Parnas D., 2010, IEEE COMPUT, V43
   Parr T.J., 1995, SOFTW PRACT EXP, V25
   Porter S.W., 1988, THESIS NAVAL POSTGRA
   Ratiu D, 2012, P WORKSH FORM METH S
   Renggli L., 2010, EUR C OBJ OR PROGR E
   Reps T. W, 1984, 1 ACM SIGSOFT SIGPLA
   Sheini HM, 2006, LECT NOTES COMPUT SC, V4121, P1
   Simonyi C., 2006, P 21 ACM C COMP OBJ
   Steele Jr G.L., 1999, H ORDER SYMB COMPUT, V12
   TATSUBORI M, 2000, LNCS, V1826
   Thomas D, 2002, IEEE SOFTWARE, V19, P22, DOI 10.1109/MS.2002.1003449
   Tolvanen Juha-Pekka, 2009, P 24 ACM SIGPLAN C C, P819
   Van Wyk E., 2007, LNCS, V4609
   Van Wyk E., 2008, ELECT NOTES THEOR CO, V203
   Van Wyk E., 2002, LNCS, V2304
   Visser E, 2008, LECT NOTES COMPUT SC, V5235, P291, DOI 10.1007/978-3-540-88643-3_7
   Voelter M., 2010, LNCS
   Voelter M., 2012, P SPLASH 2012
   Voelter  M., 2011, LNCS
   von Hanxleden Reinhard, 2009, P 9 ACM IEEE INT C E, P225
NR 77
TC 27
Z9 29
U1 0
U2 14
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2013
VL 20
IS 3
SI SI
BP 339
EP 390
DI 10.1007/s10515-013-0120-4
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 155QP
UT WOS:000319763400003
DA 2024-07-18
ER

PT J
AU Bagheri, E
   Ensan, F
   Gasevic, D
AF Bagheri, Ebrahim
   Ensan, Faezeh
   Gasevic, Dragan
TI Decision support for the software product line domain engineering
   lifecycle
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software product lines; Feature models; Domain engineering; NLP model
   inference
ID KNOWLEDGE MANAGEMENT; STAGED CONFIGURATION; FEATURE MODELS;
   UNDERSTANDABILITY; SPECIFICATIONS; REQUIREMENTS
AB Software product line engineering is a paradigm that advocates the reusability of software engineering assets and the rapid development of new applications for a target domain. These objectives are achieved by capturing the commonalities and variabilities between the applications of the target domain and through the development of comprehensive and variability-covering feature models. The feature models developed within the software product line development process need to cover the relevant features and aspects of the target domain. In other words, the feature models should be elaborate representations of the feature space of that domain. Given that feature models, i.e., software product line feature models, are developed mostly by domain analysts by sifting through domain documentation, corporate records and transcribed interviews, the process is a cumbersome and error-prone one. In this paper, we propose a decision support platform that assists domain analysts throughout the domain engineering lifecycle by: (1) automatically performing natural language processing tasks over domain documents and identifying important information for the domain analysts such as the features and integrity constraints that exist in the domain documents; (2) providing a collaboration platform around the domain documents such that multiple domain analysts can collaborate with each other during the process using a Wiki; (3) formulating semantic links between domain terminology with external widely used ontologies such as WordNet in order to disambiguate the terms used in domain documents; and (4) developing traceability links between the unstructured information available in the domain documents and their formal counterparts within the formal feature model representations. Results obtained from our controlled experimentations show that the decision support platform is effective in increasing the performance of the domain analysts during the domain engineering lifecycle in terms of both the coverage and accuracy measures.
C1 [Bagheri, Ebrahim; Gasevic, Dragan] Athabasca Univ, Sch Comp & Informat Syst, Athabasca, AB, Canada.
   [Ensan, Faezeh] Univ British Columbia, Sauder Sch Business, Vancouver, BC V5Z 1M9, Canada.
C3 Athabasca University; University of British Columbia
RP Bagheri, E (corresponding author), Athabasca Univ, Sch Comp & Informat Syst, Athabasca, AB, Canada.
EM ebagheri@athabascau.ca; dgasevic@acm.org; faezeh.ensan@sauder.ubc.ca
RI Gasevic, Dragan/AAT-3909-2020; Ensan, Faezeh/A-1466-2018
OI Gasevic, Dragan/0000-0001-9265-1908; Bagheri,
   Ebrahim/0000-0002-5148-6237
CR [Anonymous], 2003, Joint Human Language Technology Conference/Annual Meeting of the North American Chapter of the Association for Computational Linguistics (HLT-NAACL '03) Association for Computational Linguistics, DOI DOI 10.3115/1119176.1119201
   [Anonymous], 2009, APPL SOFTWARE PRODUC
   [Anonymous], 2008, ACL
   [Anonymous], 20020835 SAND SAND N
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Antoniou G., 2009, Handbook on Ontologies, P91, DOI [DOI 10.1007/978-3-540-92673-3_4, DOI 10.1007/978-3-540-92673-34]
   Babar MA, 2010, IEEE SOFTWARE, V27, P89, DOI 10.1109/MS.2010.77
   Bagheri E, 2010, 14 INT SOFTW PROD LI
   Bagheri E, 2012, J SOFTW-EVOL PROC, V24, P375, DOI 10.1002/smr.534
   Bagheri E, 2011, SOFTWARE QUAL J, V19, P579, DOI 10.1007/s11219-010-9127-2
   Bagheri E, 2010, INF SYST E-BUS MANAG, V8, P257, DOI 10.1007/s10257-008-0101-5
   Barrett DanielJ., 2008, MEDIAWIKI
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Benavides D., 2007, PROCEEDING 1 INT WOR, P129
   Boskovic M, 2010, INT J SOFTW ENG KNOW, V20, P459, DOI 10.1142/S0218194010004827
   Bradley AP, 1997, PATTERN RECOGN, V30, P1145, DOI 10.1016/S0031-3203(96)00142-2
   Buitelaar P., 2005, Ontology learning from text: Methods, evaluation and applications, V123, P3
   Cox M.A., 2008, HDB DATA VIS, P315
   Czarnecki K, 2004, LECT NOTES COMPUT SC, V3154, P266
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   Davis Jesse, 2006, P 23 INT C MACH LEAR, P233, DOI [DOI 10.1145/1143844.1143874, 10.1145/1143844.1143874]
   Dumitru H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P181, DOI 10.1145/1985793.1985819
   Fabbrini F, 2002, 26TH ANNUAL NASA GODDARD SOFTWARE ENGINEERING WORKSHOP, PROCEEDINGS, P97, DOI 10.1109/SEW.2001.992662
   Finkel Jenny Rose, 2005, ACL, P363
   Genero M, 2008, DATA KNOWL ENG, V64, P534, DOI 10.1016/j.datak.2007.09.011
   Gervasi V, 2005, ACM T SOFTW ENG METH, V14, P277, DOI 10.1145/1072997.1072999
   Gervasi V, 2002, SOFTWARE PRACT EXPER, V32, P113, DOI 10.1002/spc.430
   Grace TPL, 2009, J KNOWL MANAG, V13, P64, DOI 10.1108/13673270910971833
   Harsu Maarit., 2002, SURVEY DOMAIN ENG
   Henderson-Sellers B., 1996, Object-Oriented Metrics, measures of complexity
   Hovy E. H., 2005, OXFORD HDB COMPUTATI, P583
   Janota M, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P13
   John I., 2006, SOFTWARE PRODUCT LIN, P127
   Kang K. C., 1990, Technical Report
   Kiefer C, 2007, LECT NOTES COMPUT SC, V4825, P295
   Kof L, 2009, LECT NOTES COMPUT SC, V5512, P197, DOI 10.1007/978-3-642-02050-6_17
   Kohavi R., 1995, IJCAI-95. Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, P1137
   Lee K, 2002, LECT NOTES COMPUT SC, V2319, P62
   Lin D., 1998, Machine Learning. Proceedings of the Fifteenth International Conference (ICML'98), P296
   Lopez-Herrejon R. E., 2001, Generative and Component-Based Software Engineering. Third International Conference, GCSE 2001. Proceedings (Lecture Notes in Computer Science Vol.2186), P10
   McCallum Andrew, 2003, Proceedings of the Seventh Conference on Natural Language Learning at HLT-NAACL 2003, P188, DOI DOI 10.3115/1119176.1119206
   McGregor JD, 2010, IEEE SOFTWARE, V27, P16, DOI 10.1109/MS.2010.74
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Mendonca M, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P13
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   Nadeau D, 2007, LINGUIST INVESTIG, V30, P3
   Niu N, 2008, INT REQUIR ENG CONF, P155, DOI 10.1109/RE.2008.49
   Pérez J, 2006, LECT NOTES COMPUT SC, V4273, P30
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Resnik Philip., 1995, P IJCAI 95
   Ryan K, 1993, P IEEE INT S REQ ENG, P240, DOI 10.1109/ISRE.1993.324852
   Sampaio A, 2007, LECT NOTES COMPUT SC, V4620, P4
   Serrano MA, 2008, SOFTWARE QUAL J, V16, P79, DOI 10.1007/s11219-007-9030-7
   She S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P461, DOI 10.1145/1985793.1985856
   Tappolet J, 2010, J WEB SEMANT, V8, P225, DOI 10.1016/j.websem.2010.04.009
   Tessier P, 2005, LECT NOTES COMPUT SC, V3714, P222
   Tjong KSE, 2003, P 7 C NAT LANG LEARN, P142, DOI DOI 10.3115/1119176.1119195
   Uren V, 2006, J WEB SEMANT, V4, P14, DOI 10.1016/j.websem.2005.10.002
   Uschold M, 1996, KNOWL ENG REV, V11, P93, DOI 10.1017/S0269888900007797
   Wang HH, 2007, J WEB SEMANT, V5, P117, DOI 10.1016/j.websem.2006.11.006
   Weiss D.M., 2006, P 10 INT SOFTW PROD, P237, DOI [10.1109/SPLINE.2006.1691614, DOI 10.1109/SPLINE.2006.1691614]
   Weiss S.M., 2005, Text Mining - Predictive Methods for Analyzing Unstructured Information
   WESTON N., 2009, P 13 INT SOFTWARE PR, P211
   Zhong H, 2009, IEEE INT CONF AUTOM, P307, DOI 10.1109/ASE.2009.94
   Zhou GD, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P473
NR 67
TC 22
Z9 28
U1 1
U2 24
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2012
VL 19
IS 3
BP 335
EP 377
DI 10.1007/s10515-011-0099-7
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 988QR
UT WOS:000307506100004
DA 2024-07-18
ER

PT J
AU Gherbi, A
   Khendek, F
AF Gherbi, Abdelouahed
   Khendek, Ferhat
TI From UML/SPT models to schedulability analysis: approach and a prototype
   implementation using ATL
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Symposium on Object and Component-Oriented
   Real-Time Distributed Computing
CY APR 24-26, 2006
CL Gyeongju, SOUTH KOREA
SP IEEE Comp Soc, TCDP, Konkuk Univ, Software Res Ctr, Korea Informat Sci Soc, OMG, IFIP WG 10 4, USAF Off Sci Res, Asian Off Aerosp Res & Dev, Electr & Telecommun Res Inst, Korea Sci & Engn Fdn
DE UML; UML/SPT; MDA; Model transformations; Schedulability analysis; ATL;
   Real-time
AB Model Driven Architecture (MDA) is a software development approach promoted by the OMG. MDA is based on two key concepts, models and model transformations. Several kinds of models are generally used throughout the development process to specify a software system and to support its analysis and validation. UML and its extensions, such as the UML profile for real-time systems (UML/SPT), are commonly used to define the structure and the behavior of software systems while other models, such as performance models or schedulability models, are more suitable for performance or schedulability analysis, respectively. In this paper we discuss a model transformation enabling the derivation of schedulability analysis models from UML/SPT models. As a proof of concepts, we present a prototype implementation of this model transformation using ATL. We provide a definition of the source and target metamodels using the metamodel specification language KM3 and we specify the transformation in an ATL module. We discuss the merits and limitations of our approach and of its implementation.
C1 [Gherbi, Abdelouahed; Khendek, Ferhat] Concordia Univ, Dept Elect & Comp Engn, Montreal, PQ H3G 1M8, Canada.
C3 Concordia University - Canada
RP Gherbi, A (corresponding author), Concordia Univ, Dept Elect & Comp Engn, 1455 Maisonneuve Blvd W, Montreal, PQ H3G 1M8, Canada.
EM gherbi@ece.concordia.ca; khendek@ece.concordia.ca
OI Khendek, Ferhat/0000-0002-3337-9841; Gherbi,
   Abdelouahed/0000-0001-9117-5743
CR [Anonymous], OBJ CONSTR LANG OMG
   [Anonymous], LNCS
   [Anonymous], UN MOD LANG SUP VERS
   [Anonymous], 1999, XSL TRANSF XSLT VERS
   [Anonymous], 2006, COMP 21 ACM SIGPLAN, DOI DOI 10.1145/1176617.1176691
   [Anonymous], MOF 2 0 XMI MAPP SPE
   [Anonymous], 2005, UML PROF SCHED PERF
   *ATLAS GROUP, 2005, KM3 KENR METMETAMODE
   Balsamo S, 2004, IEEE T SOFTWARE ENG, V30, P295, DOI 10.1109/TSE.2004.9
   BATORI G, 2005, LNCS, V3502, P289
   BERNARDI S, 2004, INT WORKSH SPEC VAL
   Bézivin J, 2005, LECT NOTES COMPUT SC, V3599, P33
   Bézivin J, 2004, EIGHTH IEEE INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P58, DOI 10.1109/EDOC.2004.1342505
   Bézivin J, 2006, ELECTRON NOTES THEOR, V152, P69, DOI 10.1016/j.entcs.2006.01.015
   Briand LC, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P57, DOI 10.1109/WCRE.2003.1287237
   Budinsky F, 2004, ECLIPSE SERIES
   CARIOU E, 2004, WORKSH OCL MOD DRIV, P69
   D'Ambrogio A., 2005, P ACM 5 INT WORKSHOP, P75, DOI DOI 10.1145/1071021.1071029
   *ECL, 2007, M2M PROJ
   *ECL, 2007, ECL MOD PROJ
   Garousi V, 2005, LECT NOTES COMPUT SC, V3748, P160
   Gherbi A, 2006, NINTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT AND COMPONENT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P343, DOI 10.1109/ISORC.2006.37
   Graaf B, 2008, J SYST SOFTWARE, V81, P517, DOI 10.1016/j.jss.2007.06.007
   Graaf B, 2007, FOURTH INTERNATIONAL WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, PROCEEDINGS, P115, DOI 10.1109/MOMPES.2007.12
   Gu, 2005, P 5 INT WORKSHOP SOF, P99
   Gu ZH, 2005, LECT NOTES COMPUT SC, V3489, P235
   JOUAULT F, 2006, P 2006 ACM S APPL CO, P1188, DOI DOI 10.1145/1141277.1141561
   Jouault F, 2006, LECT NOTES COMPUT SC, V4037, P171
   KLEPPE A, 2003, OBJECT TECHNOLOGY SE
   Koehler J, 2005, IBM SYST J, V44, P47, DOI 10.1147/sj.441.0047
   Mellor SJ, 2003, IEEE SOFTWARE, V20, P14, DOI 10.1109/MS.2003.1231145
   MILLER J, 2003, OMG20030601 OMG
   Object Management Group (OMG), 2005, PTC051101 OMG
   *OMG, 2005, MET OBJ FAC MOF COR
   *OMG, 2007, PTC070804 OMG
   *OMG, 2002, AD20020410 OMG
   Ortiz G, 2006, LECT NOTES COMPUT SC, V4294, P471
   Peltier M., 2001, P WORKSH TRANSF UML
   Poon PMS, 2004, SECOND IEEE WORKSHOP ON SOFTWARE TECHNOLOGIES FOR FUTURE EMBEDDED AND UBIQUITOUS SYSTEMS, PROCEEDINGS, P90, DOI 10.1109/WSTFES.2004.1300421
   PORRES I, 2003, SOFTWARE SYSTEMS MOD, V2, P262
   Saksena M., 2000, 3 INT S OBJ OR REAL, P360
   SAKSENA M, 2000, 12 EUR C REAL TIM SY
   Selic B., 1998, Languages, Compilers, and Tools for Embedded Systems. ACM SIGPLAN Workshop LCTES'98. Proceedings, P250, DOI 10.1007/BFb0057795
   Selic B., 1994, REAL TIME OBJECT ORI
   Sha L, 2004, REAL-TIME SYST, V28, P101, DOI 10.1023/B:TIME.0000045315.61234.1e
   Skene J, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P236, DOI 10.1109/ASE.2003.1240311
   Verdickt T, 2005, IEEE T SOFTWARE ENG, V31, P695, DOI 10.1109/TSE.2005.88
   Wang M, 1999, MATH RES LETT, V6, P99
   Zander J, 2005, LECT NOTES COMPUT SC, V3502, P289
NR 49
TC 3
Z9 3
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2009
VL 16
IS 3-4
BP 387
EP 414
DI 10.1007/s10515-008-0045-5
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 470SS
UT WOS:000268000900002
DA 2024-07-18
ER

PT J
AU Osterweil, LJ
AF Osterweil, Leon J.
TI What is software?
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software engineering; Software process; Software development
AB This paper suggests that there may be other types of software besides computer software. The paper identifies parallels between computer software and such other societal artifacts as laws, processes, recipes, and instructions (e.g. for driving and kitbuilding), and suggests that there are similar parallels in the ways in which these artifacts are built and evolved. The paper suggests that technologies for supporting the automation of computer software development and evolution might facilitate work in these other domains. It also suggests that successful approaches in these other domains could have useful and important application to the domain of computer software. It is further suggested that it might be important for discussions such as these to lead to a deeper understanding of the nature of "software".
C1 Univ Massachusetts, Dept Comp Sci, Lab Adv Software Engn Res, Amherst, MA 01003 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst
RP Osterweil, LJ (corresponding author), Univ Massachusetts, Dept Comp Sci, Lab Adv Software Engn Res, Amherst, MA 01003 USA.
EM ljo@cs.umass.edu
CR Breaux TD, 2008, IEEE T SOFTWARE ENG, V34, P5, DOI 10.1109/TSE.2007.70746
   Chen B, 2008, ADVANCED DESIGN AND MANUFACTURE TO GAIN A COMPETITIVE EDGE, P623, DOI 10.1007/978-1-84800-241-8_63
   CLARKE LA, 2008, ACM SIGSOFT IEEE 30, P889
   GEORGAKOPOULOS D, 1995, DISTRIB PARALLEL DAT, V3, P119, DOI 10.1007/BF01277643
   Naur Peter., 1968, Software engineering-report on a conference sponsored by the nato science committee garimisch, germany
   OSTERWEIL LJ, 1997, ACM SIGSOFT IEEE 19, P540
   OSTERWEIL LJ, 1987, AC M SIGSOFT IEEE 9, P2
   Parnas DL, 1997, COMMUN ACM, V40, P128, DOI 10.1145/260750.260784
   SERGOT MJ, 1986, COMMUN ACM, V29, P370, DOI 10.1145/5689.5920
   Simidchieva Borislava I., 2008, P 2008 INT C DIG GOV, P63
NR 10
TC 5
Z9 5
U1 7
U2 30
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 261
EP 273
DI 10.1007/s10515-008-0031-y
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800002
DA 2024-07-18
ER

PT J
AU Gallego, JMC
   Jaramillo, CMZ
AF Gallego, Johnathan Mauricio Calle
   Jaramillo, Carlos Mario Zapata
TI QUARE: towards a question-answering model for requirements elicitation
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Information systems; Information retrieval; Retrieval tasks and goals;
   Question answering; Software and its engineering; Software creation and
   management; Designing software; Requirements analysis; Information
   extraction; Requirements elicitation; Question-answering systems;
   Natural language processing; Named entity recognition
ID LANGUAGE
AB Requirements elicitation is a stakeholder-centered approach; therefore, natural language remains an effective way of documenting and validating requirements. As the scope of the software domain grows, software analysts process a higher number of requirements documents, generating delays and errors while characterizing the software domain. Natural language processing is key in such a process, allowing software analysts for speeding up the requirements elicitation process and mitigating the impact of the ambiguity and misinterpretations coming from natural-language-based requirements documents. However, natural-language-processing-based proposals for requirements elicitation are mainly focused on specific domains and still fail for understanding several requirements writing styles. In this paper, we present QUARE, a question-answering model for requirements elicitation. The QUARE model comprises a meta-ontology for requirements elicitation, easing the generation of requirements-elicitation-related questions and the initial structuration of any software domain. In addition, the QUARE model includes a named entity recognition and relation extraction system focused on requirements elicitation, allowing software analysts for processing several requirements writing styles. Although software analysts address a software domain at a time, they use the same kind of questions for identifying and characterizing requirements abstractions such as actors, concepts, and actions from a software domain. Such a process may be framed into the QUARE model workflow. We validate our proposal by using an experimental process including real-world requirements documents coming from several software domains and requirements writing styles. The QUARE model is a novel proposal aimed at supporting software analysts in the requirements elicitation process.
C1 [Gallego, Johnathan Mauricio Calle; Jaramillo, Carlos Mario Zapata] Univ Nacl Colombia, Medellin, Colombia.
C3 Universidad Nacional de Colombia
RP Gallego, JMC (corresponding author), Univ Nacl Colombia, Medellin, Colombia.
EM cgjonathanm@unal.edu.co; cmzapata@unal.edu.co
FU Minciencias (Ministry of Science, Technology, and Innovation)
FX This research work is sponsored by Minciencias (Ministry of Science,
   Technology, and Innovation) at Colombia in the National Ph.D. Student
   program, bid 785 of 2017.
CR Adikara F., 2016, INT J ELECT COMPUT E, V6, P3188, DOI [10.11591/ijece.v6i6.12802, DOI 10.11591/IJECE.V6I6.12802]
   Aguilar C., 2017, TRATAMIENTO INFORMAC, V1st
   [Anonymous], 2017, Requirements engineering
   Arruda D., LECT NOTES COMPUTER
   Bisong E., 2019, Building Machine Learning and Deep Learning Models on Google Cloud Platform
   Boquist E., 2014, AUTOMATED DIALOGUE S
   Bouziane A, 2015, PROCEDIA COMPUT SCI, V73, P366, DOI 10.1016/j.procs.2015.12.005
   Burnay C, 2014, LECT NOTES COMPUT SC, V8484, P180, DOI 10.1007/978-3-319-07881-6_13
   Calle J., 2022, QUESTION ANSWERING M
   Cysneiros L.M., LECT NOTES COMPUTER, V2603, P39
   Dalpiaz F, 2018, IEEE SOFTWARE, V35, P115, DOI 10.1109/MS.2018.3571242
   Do Prado Leite J. C. S., 1996, Proceedings of the 8th International Workshop on Software Specification and Design, P85, DOI 10.1109/IWSSD.1996.501150
   DUBOIS E, 1986, P IEEE, V74, P1431, DOI 10.1109/PROC.1986.13644
   Düchting M, 2007, LECT NOTES COMPUT SC, V4550, P58
   Dwitam F., 2020, Telkomnika (Telecommun. Comput. Electron. Control), V18, P890, DOI [10.12928/telkomnika.v18i2.14866, DOI 10.12928/TELKOMNIKA.V18I2.14866]
   Escalona MJ, 2006, WEBIST 2006: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS AND TECHNOLOGIES, P310
   Ferrari A, 2021, PROC IEEE ACM INT C, P322, DOI 10.1109/ICSE-Companion52605.2021.00137
   Ferrari A, 2017, INT REQUIR ENG CONF, P502, DOI 10.1109/RE.2017.29
   Gacitua R., 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P5, DOI 10.1109/RE.2010.12
   Gause D.C., 1989, EXPLORING REQUIREMEN, P59
   Gelbukh A, 2013, 2013 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI), P2112, DOI 10.1109/ICACCI.2013.6637507
   Gholamy A., 2018, Int. J. Intell. Technol. Appl. Stat, V11, P105, DOI [10.6148/IJITAS.20180611(2).0003, DOI 10.6148/IJITAS.20180611(2).0003]
   Grigoriou Rafaila, 2014, Natural Language Processing and Information Systems. 19th International Conference on Applications of Natural Language to Information Systems, NLDB 2014. Proceedings: LNCS 8455, P164
   Henriksson Aron, 2020, The Practice of Enterprise Modeling. 13th IFIP Working Conference, PoEM 2020. Proceedings. Lecture Notes in Business Information Processing (LNBIP 400), P351, DOI 10.1007/978-3-030-63479-7_24
   Hunt J., 1997, SMALLTALK OBJECT ORI, P184, DOI [10.1007/978-1-4471-0961-7_19, DOI 10.1007/978-1-4471-0961-7_19]
   Iyer S, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P963, DOI 10.18653/v1/P17-1089
   Janssens D., 2019, Natural language processing in requirements elicitation and requirements analysis: a systematic literature review
   Jurafsky D., 2009, SPEECH LANGUAGE PROC
   Karpukhin V, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP), P6769
   Knublauch H., 2004, SEMWEB
   Kucherer Christian, 2018, Enterprise Information Systems. 19th International Conference, ICEIS 2017. Revised Selected Papers. Lecture Notes in Business Information Processing (LNBIP 321), P212, DOI 10.1007/978-3-319-93375-7_11
   Laiq M, 2020, INT WORKS RE ENG E T, P1, DOI 10.1109/REET51203.2020.00007
   Lian XL, 2020, INFORM SOFTWARE TECH, V118, DOI 10.1016/j.infsof.2019.106196
   Lim S., 2021, SN Computer Science, V2, P1
   Manago M., LECT NOTES COMPUTER
   McZara J, 2015, EMPIR SOFTW ENG, V20, P1721, DOI 10.1007/s10664-014-9334-8
   Montani I., 2018, IN PRESS
   Montani Ines, 2023, Zenodo
   Pacheco C, 2018, IET SOFTW, V12, P365, DOI 10.1049/iet-sen.2017.0144
   Perepletchikov M, 2005, LECT NOTES ARTIF INT, V3690, P203
   Raharjana IK, 2021, IEEE ACCESS, V9, P53811, DOI 10.1109/ACCESS.2021.3070606
   Rajender Kumar Surana Chetan Surana, 2019, 2019 4th International Conference on Recent Trends on Electronics, Information, Communication & Technology (RTEICT), P866, DOI 10.1109/RTEICT46194.2019.9016907
   Rajpurkar P., 2016, P 2016 C EMP METH NA, V2016, P2383
   Sleimi A, 2019, INT REQUIR ENG CONF, P319, DOI 10.1109/RE.2019.00041
   Vlas R., 2011, Proceedings of the Seventeenth Americas Conferences on Information Systems, USA, P1, DOI DOI 10.1109/HICSS.2011.28
   Wieringa R.J., 2014, Design Science Methodology: For Information Systems and Software Engineering, DOI DOI 10.1007/978-3-662-43839-8
   WIJERS GM, 1990, LECT NOTES COMPUT SC, V436, P88
   Wohlin C., 2012, Experimentation in Software Engineering
   Wolfson T, 2020, T ASSOC COMPUT LING, V8, P183, DOI 10.1162/tacl_a_00309
   Xie ZW, 2016, LECT NOTES COMPUT SC, V10102, P300, DOI 10.1007/978-3-319-50496-4_25
   Yamanaka Takatoshi, 2010, Selected Topics in Applied Computing. Applied Computing Conference 2010 (ACC '10), P54
   Young T, 2018, IEEE COMPUT INTELL M, V13, P55, DOI 10.1109/MCI.2018.2840738
   Zapata Carlos M, 2010, Ingeniare. Rev. chil. ing., V18, P26, DOI 10.4067/S0718-33052010000100004
   Zapata CM, 2010, DYNA-COLOMBIA, V77, P209
   Zelle JM, 1996, PROCEEDINGS OF THE THIRTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE EIGHTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE, VOLS 1 AND 2, P1050
   Zhao L, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3444689
NR 56
TC 1
Z9 1
U1 4
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 25
DI 10.1007/s10515-023-00386-w
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N8CU0
UT WOS:001039237700001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Lakhan, A
   Mohammed, MA
   Obaid, OI
   Chakraborty, C
   Abdulkareem, KH
   Kadry, S
AF Lakhan, Abdullah
   Mohammed, Mazin Abed
   Obaid, Omar Ibrahim
   Chakraborty, Chinmay
   Abdulkareem, Karrar Hameed
   Kadry, Seifedine
TI Efficient deep-reinforcement learning aware resource allocation in
   SDN-enabled fog paradigm
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Deep reinforcement learning; Offloading; Scheduling; Fog; Cloud; DQBRA;
   SDN
ID MOBILE; MIGRATION
AB These days, fog computing is an emerging paradigm that offers ubiquitous and omnipresent latency-aware services to delay applications. However, due to the mobility features of applications, the resource allocation to the workload of applications in distributed dynamic fog networks is becoming a challenging problem. This paper investigates the resource allocation problem in software define network (SDN) enable fog networks. Based on SDN, we distributed the fog network, which consists of many fog nodes. The considered problem contains many stringent constraints (e.g., mobility, deadline, and resource capacity), which are must be satisfied during the execution of applications. Offloading some tasks to fog system performance can be improved by reducing the latency and energy consumption, which are the two important metrics of interest in fog networks. The study proposes a novel container-based architecture with different fog nodes. Based on architecture, the study devises the deep-learning-Q-network based resource-allocation, which consists of various components to solve the problem. The parts are mobility controller, resource searching, and resource allocation, and task migration. Performance evaluation shows that the proposed architecture and schemes better perform existing studies in terms of application costs (energy and execution time) by 30%.
C1 [Lakhan, Abdullah] Wenzhou Univ, Coll Comp Sci & Artificial Intelligence, Wenzhou 325035, Peoples R China.
   [Mohammed, Mazin Abed] Univ Anbar, Coll Comp Sci & Informat Technol, Ramadi 31001, Iraq.
   [Obaid, Omar Ibrahim] AL Iraqia Univ, Coll Educ, Dept Comp Sci, Baghdad, Iraq.
   [Chakraborty, Chinmay] Birla Inst Technol, Elect & Commun Engn, Mesra, Jharkhand, India.
   [Abdulkareem, Karrar Hameed] Al Muthanna Univ, Coll Agr, Samawah 66001, Iraq.
   [Kadry, Seifedine] Noroff Univ Coll, Fac Appl Comp & Technol, Kristiansand, Norway.
C3 Wenzhou University; University of Anbar; Al-Iraqia University; Birla
   Institute of Technology Mesra; Al-Muthanna University
RP Mohammed, MA (corresponding author), Univ Anbar, Coll Comp Sci & Informat Technol, Ramadi 31001, Iraq.
EM abdullahrazalakhan@gmail.com; mazinalshujeary@uoanbar.edu.iq;
   alhamdanyomar23@gmail.com; cchakrabarty@bitmesra.ac.in;
   Khak9784@mu.edu.iq; seifedine.kadry@noroff.no
RI Kadry, Seifedine/C-7437-2011; Mohammed, Mazin Abed/E-3910-2018; Obaid,
   Omar Ibrahim/V-9986-2019; Chakraborty, Chinmay/N-3608-2017; Lakhan,
   Abdullah/AAL-3243-2020; Abdulkareem, Karrar Hameed/V-1741-2017
OI Kadry, Seifedine/0000-0002-1939-4842; Mohammed, Mazin
   Abed/0000-0001-9030-8102; Obaid, Omar Ibrahim/0000-0002-7408-3270;
   Chakraborty, Chinmay/0000-0002-4385-0975; Lakhan,
   Abdullah/0000-0002-1833-1364; Abdulkareem, Karrar
   Hameed/0000-0001-7302-2049
CR [Anonymous], 2000, APPL OPTIMIZAT
   Arshad H, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON SMART CLOUD (SMARTCLOUD), P84, DOI 10.1109/SmartCloud.2018.00022
   Ashraf S, 2020, J AMB INTEL HUM COMP, V11, P2731, DOI 10.1007/s12652-019-01333-y
   Attar HH, 2021, EURASIP J WIREL COMM, V2021, DOI 10.1186/s13638-021-02032-z
   Chen JX, 2022, IEEE T IND INFORM, V18, P2000, DOI 10.1109/TII.2021.3088465
   Chen JX, 2021, IEEE SENS J, V21, P25222, DOI 10.1109/JSEN.2021.3055635
   Dootio M.A., 2022, COST EFFICIENT SERVI
   Kyzy IE, 2021, EXPERT SYST APPL, V184, DOI 10.1016/j.eswa.2021.115425
   Lakhan A., EAI ENDORSED T MOBIL, V5, p2019b
   Lakhan A, 2024, T EMERG TELECOMMUN T, V35, DOI 10.1002/ett.4363
   Lakhan A, 2021, IEEE T INTELL TRANSP, V22, P4212, DOI 10.1109/TITS.2021.3056461
   Lakhan A, 2021, SENSORS-BASEL, V21, DOI 10.3390/s21124093
   Lakhan A, 2019, IEEE INT SYMP PARAL, P242, DOI 10.1109/ISPA-BDCloud-SustainCom-SocialCom48970.2019.00044
   Lakhan A, 2020, COMPUTING, V102, P105, DOI 10.1007/s00607-019-00733-4
   Lakhan A, 2018, 2018 INTERNATIONAL CONFERENCE ON CLOUD COMPUTING, BIG DATA AND BLOCKCHAIN (ICCBB 2018), P50
   Li CL, 2019, FUTURE GENER COMP SY, V95, P249, DOI 10.1016/j.future.2019.01.007
   Ning ZL, 2019, ACM T INTEL SYST TEC, V10, DOI 10.1145/3317572
   Qurat, 2020, 2020 1 INT C INNOVAT, P1, DOI DOI 10.1109/IRASET48871.2020.9091998
   Rahman A, 2022, CLUSTER COMPUT, V25, P2351, DOI 10.1007/s10586-021-03367-4
   Raja D, 2020, J AMB INTEL HUM COMP, DOI 10.1007/s12652-020-01717-5
   Roy S, 2020, J AMB INTEL HUM COMP, V11, P151, DOI 10.1007/s12652-019-01261-x
   Sajnani Dileep Kumar, 2018, COMMUN NETWORK, V10, P127, DOI DOI 10.4236/CN.2018.104011
   Sathio Anwar Ali, 2021, 2021 International Conference on Computing, Electronics & Communications Engineering (iCCECE), P30, DOI 10.1109/iCCECE52344.2021.9534846
   Wang JQ, 2018, NEURAL COMPUT APPL, V30, P1529, DOI 10.1007/s00521-016-2747-0
   Wang SG, 2018, IEEE ACCESS, V6, P23511, DOI 10.1109/ACCESS.2018.2828102
   Wang TX, 2018, SUSTAIN COMPUT-INFOR, V19, P214, DOI 10.1016/j.suscom.2018.05.004
   Wang TX, 2018, PEER PEER NETW APPL, V11, P793, DOI 10.1007/s12083-017-0561-9
   Yin LX, 2018, IEEE T IND INFORM, V14, P4712, DOI 10.1109/TII.2018.2851241
   Zhang C, 2019, FUTURE GENER COMP SY, V96, P111, DOI 10.1016/j.future.2019.01.059
NR 29
TC 25
Z9 25
U1 1
U2 18
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 20
DI 10.1007/s10515-021-00318-6
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YD6YE
UT WOS:000740584600001
DA 2024-07-18
ER

PT J
AU Almhana, R
   Kessentini, M
AF Almhana, Rafi
   Kessentini, Marouane
TI Considering dependencies between bug reports to improve bugs triage
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Bugs management; Bug triage; Bug localization; Bug prioritization;
   Search-based software engineering; Software quality assurance
ID MODEL; PRIORITIZATION; OPTIMIZATION; SEVERITY; EXAMPLES
AB Software development teams need to deal with several open reports of critical bugs to be addressed urgently and simultaneously. The management of these bugs is a complex problem due to the limited resources and the deadlines-pressure. Most of the existing studies treated bug reports in isolation when assigning them to developers. Thus, developers may spend considerable cognitive efforts moving between completely unrelated bug reports thus not sharing any common files to be inspected. In this paper, we propose an automated bugs triage approach based on the dependencies between the open bug reports. Our approach starts by localizing the files to be inspected for each of the pending bug reports. We defined the dependency between two bug reports as the number of common files to be inspected to localize the bugs. Then, we adopted multi-objective search to rank the bug reports for programmers based on both their priorities and the dependency between them. We evaluated our approach on a set of open source programs and compared it to the traditional approach of considering bug reports in isolation based mainly on their priority. The results show a significant time reduction of over 30% in localizing the bugs simultaneously comparing to the traditional bugs prioritization technique based on only priorities.
C1 [Almhana, Rafi; Kessentini, Marouane] Univ Michigan, Dearborn, MI 48128 USA.
C3 University of Michigan System; University of Michigan
RP Kessentini, M (corresponding author), Univ Michigan, Dearborn, MI 48128 USA.
EM ralmhana@umich.edu; marouane@umich.edu
CR Abdelmoez W, 2012, 2012 22ND INTERNATIONAL CONFERENCE ON COMPUTER THEORY AND APPLICATIONS (ICCTA), P167, DOI 10.1109/ICCTA.2012.6523564
   Alenezi M, 2013, 2013 12TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2013), VOL 2, P112, DOI 10.1109/ICMLA.2013.114
   Almhana R, 2016, IEEE INT CONF AUTOM, P286, DOI 10.1145/2970276.2970344
   Amal B, 2014, LECT NOTES COMPUT SC, V8636, P31
   [Anonymous], 2008, THESIS
   Behl D, 2014, PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON RELIABILTY, OPTIMIZATION, & INFORMATION TECHNOLOGY (ICROIT 2014), P294, DOI 10.1109/ICROIT.2014.6798341
   Bettenburg N, 2008, PROC IEEE INT CONF S, P337, DOI 10.1109/ICSM.2008.4658082
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Canfora G., 2011, 2011 18th Working Conference on Reverse Engineering, P191, DOI 10.1109/WCRE.2011.31
   Chaturvedi K.K., 2012, 2012 CSI 6 INT C SOF, P1
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deb K, 2011, ENG OPTIMIZ, V43, P1175, DOI 10.1080/0305215X.2010.548863
   Dommati S. J., 2013, ARXIV13041677
   Dreyton Duany, 2015, Search-Based Software Engineering. 7th International Symposium, SSBSE 2015. Proceedings: LNCS 9275, P295, DOI 10.1007/978-3-319-22183-0_26
   Dreyton D, 2016, LECT NOTES COMPUT SC, V9962, P143, DOI 10.1007/978-3-319-47106-8_10
   Dumais ST, 2004, ANNU REV INFORM SCI, V38, P189
   Emmerich MTM, 2018, NAT COMPUT, V17, P585, DOI 10.1007/s11047-018-9685-y
   Fischer M, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P90, DOI 10.1109/WCRE.2003.1287240
   Geng JY, 2018, IEEE ACCESS, V6, P60547, DOI 10.1109/ACCESS.2018.2875122
   Ghannem A, 2016, SOFTWARE QUAL J, V24, P947, DOI 10.1007/s11219-015-9271-9
   Ghannem A, 2014, J SOFTW-EVOL PROC, V26, P692, DOI 10.1002/smr.1644
   Ghannem Adnane., 2011, P C CTR ADV STUDIES, P175
   Goyal N., 2015, ADV INTELLIGENT INFO, P493
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Henard C, 2014, LECT NOTES COMPUT SC, V8636, P92
   Kanwal J., 2010, PROC 4 INT C OPEN SO, P22
   Kanwal J, 2012, J COMPUT SCI TECH-CH, V27, P397, DOI 10.1007/s11390-012-1230-3
   Keller AA., 2019, Multi-objective optimization in theory and practice II: meta-heuristic algorithms
   Kessentini M, 2014, J SYST SOFTWARE, V97, P1, DOI 10.1016/j.jss.2014.06.040
   Lamkanfi A, 2011, EUR CON SFTWR MTNCE, P249, DOI 10.1109/CSMR.2011.31
   Li Z, 2006, P 1 WORKSH ARCH SYST, P25, DOI DOI 10.1145/1181309.1181314
   Núñez A, 2013, SOFT COMPUT, V17, P301, DOI 10.1007/s00500-012-0894-5
   Ramirez A, 2019, J SYST SOFTWARE, V149, P382, DOI 10.1016/j.jss.2018.12.015
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Sharma M, 2012, INT CONF INTELL SYST, P539, DOI 10.1109/ISDA.2012.6416595
   Shelburg Jeffery, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P209, DOI 10.1007/978-3-642-39742-4_16
   Sun Chengnian, 2010, P 32 ACMIEEE INT C S, V1, P45, DOI [DOI 10.1145/1806799, 10.1145/1806799.1806811]
   Thung F, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P420, DOI 10.1109/ICSM.2012.6405302
   Uddin J, 2017, ARTIF INTELL REV, V47, P145, DOI 10.1007/s10462-016-9478-6
   Valdivia-Garcia Harold., 2014, P 11 WORKING C MININ, P72
   Wong WE, 2016, IEEE T SOFTWARE ENG, V42, P707, DOI 10.1109/TSE.2016.2521368
   Xuan JF, 2012, PROC INT CONF SOFTW, P25, DOI 10.1109/ICSE.2012.6227209
   Ye X, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P689, DOI 10.1145/2635868.2635874
   Yu L, 2010, LECT NOTES ARTIF INT, V6441, P356, DOI 10.1007/978-3-642-17313-4_35
   Yuan Tian, 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P215, DOI 10.1109/WCRE.2012.31
   Zanetti MS, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1032, DOI 10.1109/ICSE.2013.6606653
   Zhang T, 2016, J SYST SOFTWARE, V117, P166, DOI 10.1016/j.jss.2016.02.034
   Zheng Alice X., 2006, INT C MACH LEARN, P1105, DOI DOI 10.1145/1143844.1143983
   Zou WQ, 2020, IEEE T SOFTWARE ENG, V46, P836, DOI 10.1109/TSE.2018.2870414
NR 49
TC 17
Z9 18
U1 2
U2 23
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2021
VL 28
IS 1
AR 1
DI 10.1007/s10515-020-00279-2
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PP6JW
UT WOS:000605967700001
DA 2024-07-18
ER

PT J
AU Rebai, S
   Amich, A
   Molaei, S
   Kessentini, M
   Kazman, R
AF Rebai, Soumaya
   Amich, Abderrahmen
   Molaei, Somayeh
   Kessentini, Marouane
   Kazman, Rick
TI Multi-objective code reviewer recommendations: balancing expertise,
   availability and collaborations
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Modern code review; Search based software engineering; Reviewers
   recommendation
ID ALGORITHM
AB Modern Code review is one of the most critical tasks in software maintenance and evolution. A rigorous code review leads to fewer bugs and reduced overall maintenance costs. Most existing studies focus on automatically identifying the most qualified reviewers, based on their expertise, to review pull-up requests. However, the management of code reviews is a complex problem in practice due to a project's limited resources, including the availability of peer reviewers. Furthermore, the history of collaborations between developers and reviewers could affect the quality of the reviews, in positive or negative ways. In this paper, we formulate the recommendation of code reviewers as a multi-objective search problem to balance the conflicting objectives of expertise, availability, and history of collaborations. Our validation confirms the effectiveness of our multi-objective approach on 9 open source projects by making better recommendations, on average, than the state of the art.
C1 [Rebai, Soumaya; Amich, Abderrahmen; Molaei, Somayeh; Kessentini, Marouane] Univ Michigan, Dearborn, MI 48128 USA.
   [Kazman, Rick] Univ Hawaii, Honolulu, HI 96822 USA.
C3 University of Michigan System; University of Michigan; University of
   Hawaii System
RP Kessentini, M (corresponding author), Univ Michigan, Dearborn, MI 48128 USA.
EM srebal@umich.edu; aamich@umich.edu; smolaei@umich.edu;
   marouane@umich.edu
CR Almhana R, 2016, IEEE INT CONF AUTOM, P286, DOI 10.1145/2970276.2970344
   Amal B, 2014, LECT NOTES COMPUT SC, V8636, P31
   [Anonymous], 2006, BEST KEPT SECRETS PE
   [Anonymous], 2012, CS201210 U WAT DR CH
   Bacchelli A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P712, DOI 10.1109/ICSE.2013.6606617
   Balachandran V, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P931, DOI 10.1109/ICSE.2013.6606642
   Baysal O, 2013, WORK CONF REVERSE EN, P122, DOI 10.1109/WCRE.2013.6671287
   Bird Christian, 2008, Proceedings of the 2008 ACM SIGSOFT Symposium on the Foundations of Software Engineering, P24
   Bosu Amiangshu, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P133, DOI 10.1109/ESEM.2013.23
   Bosu A, 2017, IEEE T SOFTWARE ENG, V43, P56, DOI 10.1109/TSE.2016.2576451
   Bosu A, 2014, IFIP ADV INF COMM TE, V427, P31
   Bosu Amiangshu, 2014, P 8 ACM IEEE INT S E, P33
   Committee S.E.S, 1997, IEEE STAND SOFTW REV, P1028
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deb K, 2011, ENG OPTIMIZ, V43, P1175, DOI 10.1080/0305215X.2010.548863
   Emmerich MTM, 2018, NAT COMPUT, V17, P585, DOI 10.1007/s11047-018-9685-y
   Fagan M., 2002, Software Pioneers, P575
   Ghannem A, 2016, SOFTWARE QUAL J, V24, P947, DOI 10.1007/s11219-015-9271-9
   Ghannem Adnane., 2011, P C CTR ADV STUDIES, P175
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Jackson RR, 2001, BEHAVIOUR, V138, P1215, DOI 10.1163/15685390152822184
   Keller A, 2019, FRONT FOR GLOB CHANG, V2, DOI 10.3389/ffgc.2019.00081
   Kononenko O, 2015, PROC IEEE INT CONF S, P111, DOI 10.1109/ICSM.2015.7332457
   Ouni A, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1843
   Ouni A, 2017, INFORM SOFTWARE TECH, V83, P55, DOI 10.1016/j.infsof.2016.11.007
   Ouni A, 2016, PROC IEEE INT CONF S, P367, DOI 10.1109/ICSME.2016.65
   Rachmawati L, 2009, IEEE T EVOLUT COMPUT, V13, P810, DOI 10.1109/TEVC.2009.2017515
   Rigby PC, 2013, P 2013 9 JOINT M FDN, P202, DOI DOI 10.1145/2491411.2491444
   Rigby PC, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P541, DOI 10.1145/1985793.1985867
   Rigby PC, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P541
   Thongtanunam P, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P141, DOI 10.1109/SANER.2015.7081824
   Thongtanunam Patanamon, 2014, P 7 INT WORKSHOP COO, P119
   Wang HZ, 2016, LECT NOTES COMPUT SC, V9936, P352, DOI 10.1007/978-3-319-46295-0_22
   Wilcoxon Frank, 1970, SELECTED TABLES MATH, V1, P171, DOI [DOI 10.1002/9780471462422.EOCT, DOI 10.1007/SPRINGERREFERENCE_205698]
   Xia X, 2015, PROC IEEE INT CONF S, P261, DOI 10.1109/ICSM.2015.7332472
   Xia X, 2013, WORK CONF REVERSE EN, P72, DOI 10.1109/WCRE.2013.6671282
   Yang X, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P460, DOI [10.1145/2901739.2903504, 10.1109/MSR.2016.054]
   Yang X, 2016, IEICE T INF SYST, VE99D, P661, DOI 10.1587/transinf.2015EDP7261
   Yu Y, 2016, INFORM SOFTWARE TECH, V74, P204, DOI 10.1016/j.infsof.2016.01.004
   Zanjani M., 2015, T SOFTWARE ENG, V42, P530, DOI DOI 10.1109/TSE.2015.2500238
   Zanjani MB, 2016, IEEE T SOFTWARE ENG, V42, P530, DOI 10.1109/TSE.2015.2500238
NR 41
TC 16
Z9 16
U1 0
U2 8
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2020
VL 27
IS 3-4
SI SI
BP 301
EP 328
DI 10.1007/s10515-020-00275-6
EA SEP 2020
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OH9NE
UT WOS:000566315200001
DA 2024-07-18
ER

PT J
AU Alkhazi, B
   Abid, C
   Kessentini, M
   Leroy, D
   Wimmer, M
AF Alkhazi, Bader
   Abid, Chaima
   Kessentini, Marouane
   Leroy, Dorian
   Wimmer, Manuel
TI Multi-criteria test cases selection for model transformations
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model-driven engineering; Model transformation; Model transformation
   testing; Test case selection; NSGA-II
AB Model transformations play an important role in the evolution of systems in various fields such as healthcare, automotive and aerospace industry. Thus, it is important to check the correctness of model transformation programs. Several approaches have been proposed to generate test cases for model transformations based on different coverage criteria (e.g., statements, rules, metamodel elements, etc.). However, the execution of a large number of test cases during the evolution of transformation programs is time-consuming and may include a lot of overlap between the test cases. In this paper, we propose a test case selection approach for model transformations based on multi-objective search. We use the non-dominated sorting genetic algorithm (NSGA-II) to find the best trade-offs between two conflicting objectives: (1) maximize the coverage of rules and (2) minimize the execution time of the selected test cases. We validated our approach on several evolution cases of medium and large ATLAS Transformation Language programs.
C1 [Alkhazi, Bader; Abid, Chaima; Kessentini, Marouane] Univ Michigan, Dearborn, MI 48128 USA.
   [Leroy, Dorian; Wimmer, Manuel] Johannes Kepler Univ Linz, CDL MIssNT, Linz, Austria.
C3 University of Michigan System; University of Michigan; Johannes Kepler
   University Linz
RP Kessentini, M (corresponding author), Univ Michigan, Dearborn, MI 48128 USA.
EM balkhazi@umich.edu; cabid@umich.edu; marouane@umich.edu;
   dorian.leroy@jku.at; manuel.wimmer@jku.at
OI Alkhazi, Bader/0000-0002-4132-1578
FU Austrian Federal Ministry for Digital and Economic Affairs; National
   Foundation for Research, Technology and Development; FWF [P28519-N31,
   P30525-N31]
FX This work has been partially supported and funded by the Austrian
   Federal Ministry for Digital and Economic Affairs, the National
   Foundation for Research, Technology and Development and by the FWF under
   the Grant Numbers P28519-N31 and P30525-N31.
CR Agrawal H., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P348, DOI 10.1109/ICSM.1993.366927
   Alkhazi B, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P295, DOI 10.1145/2976767.2976782
   Almendros-Jiménez JM, 2016, LECT NOTES COMPUT SC, V9893, P16, DOI 10.1007/978-3-319-45547-1_2
   [Anonymous], 2011, IEC250102011 ISO
   [Anonymous], 2015, P PROJ SHOWC STAF
   [Anonymous], 2012, Synthesis Lectures on Software Engineering, DOI [DOI 10.2200/S00751ED2V01Y201701SWE004, DOI 10.2200/S00441ED1V01Y201208SWE001]
   [Anonymous], P ECMDA WORKSH INT M
   [Anonymous], ARXIV12116322
   [Anonymous], 2001, Algorithms, Multi-objective Optimization Using Evolutionary, DOI [DOI 10.5555/559152, 10.5555/559152]
   Arcuri A, 2013, EMPIR SOFTW ENG, V18, P594, DOI 10.1007/s10664-013-9249-9
   ATL, 2006, ATL TRANSF ZOO
   Baki I, 2014, LECT NOTES COMPUT SC, V8767, P636, DOI 10.1007/978-3-319-11653-2_39
   Ball T., 1998, P ACM SIGSOFT INT S, V23, P2
   Bates S., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P384, DOI 10.1145/158511.158694
   Baudry B, 2010, COMMUN ACM, V53, P139, DOI 10.1145/1743546.1743583
   Benedusi P., 1988, Proceedings of the Conference on Software Maintenance - 1988 (IEEE Cat. No.88CH2615-3), P352, DOI 10.1109/ICSM.1988.10187
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Binkley D, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P251, DOI 10.1109/ICSM.1995.526547
   Biswas S., 2009, ACM SIGSOFT Software Engineering Notes, V34, P1
   Biswas S, 2011, INFORM-J COMPUT INFO, V35, P289
   Boussaïd I, 2017, AUTOMAT SOFTW ENG, V24, P233, DOI 10.1007/s10515-017-0215-4
   Branke E, 2004, LECT NOTES COMPUT SC, V3242, P722, DOI 10.1007/978-3-540-30217-9_73
   Brottier E, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P85
   Bryant BR, 2011, COMPUT SCI INF SYST, V8, P225, DOI 10.2298/CSIS110114012B
   Burgueño L, 2015, IEEE T SOFTWARE ENG, V41, P490, DOI 10.1109/TSE.2014.2375201
   Cabot J, 2010, J SYST SOFTWARE, V83, P283, DOI 10.1016/j.jss.2009.08.012
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   de Souza LS, 2014, 2014 BRAZILIAN CONFERENCE ON INTELLIGENT SYSTEMS (BRACIS), P414, DOI 10.1109/BRACIS.2014.80
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Debreceni C, 2016, LECT NOTES COMPUT SC, V9633, P104, DOI 10.1007/978-3-662-49665-7_7
   Denil J, 2014, LECT NOTES COMPUT SC, V8769, P80, DOI 10.1007/978-3-319-11743-0_6
   Ehrig K, 2009, SOFTW SYST MODEL, V8, P479, DOI 10.1007/s10270-008-0095-y
   Eiben AE, 2011, SWARM EVOL COMPUT, V1, P19, DOI 10.1016/j.swevo.2011.02.001
   Elbaum S., 2000, Software Engineering Notes, V25, P102, DOI 10.1145/347636.348910
   Farooq U, 2009, IEEE ICST WORKSHOP, P141, DOI 10.1109/ICSTW.2009.27
   Faunes Martin, 2013, Theory and Practice of Model Transformations. 6th International Conference, ICMT 2013. Proceedings: LNCS 7909, P17, DOI 10.1007/978-3-642-38883-5_2
   Faunes M, 2013, LECT NOTES COMPUT SC, V8107, P187, DOI 10.1007/978-3-642-41533-3_12
   Finot Olivier, 2013, Theory and Practice of Model Transformations. 6th International Conference, ICMT 2013. Proceedings: LNCS 7909, P189, DOI 10.1007/978-3-642-38883-5_17
   Fischer K. F., 1977, The IEEE Computer Society's First International Computer Software and Applications Conference, P421
   Fleck M., 2015, Proc. of NasBASE, P1
   Fleck M, 2017, IEEE T SOFTWARE ENG, V43, P1009, DOI 10.1109/TSE.2017.2654255
   Fleurey F, 2004, SIVOES-MODEVA 2004, PROCEEDINGS, P29, DOI 10.1109/MODEVA.2004.1425846
   Fleurey F, 2009, SOFTW SYST MODEL, V8, P185, DOI 10.1007/s10270-007-0074-8
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   Ghannem Adnane, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P96, DOI 10.1007/978-3-642-39742-4_9
   Ghannem Adnane., 2011, P C CTR ADV STUDIES, P175
   Gogolla M, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P312, DOI 10.1109/MODELS.2015.7338262
   Gogolla M, 2011, LECT NOTES COMPUT SC, V6698, P221, DOI 10.1007/978-3-642-21470-7_16
   Gómez A, 2011, FOTOCINEMA, P131
   Gonzalez Carlos A., 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P449, DOI 10.1007/978-3-642-33666-9_29
   Goodenough J. B., 1975, IEEE Transactions on Software Engineering, VSE-1, P156, DOI 10.1109/TSE.1975.6312836
   Guerra Esther, 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P40, DOI 10.1007/978-3-642-30476-7_3
   Guerra E, 2013, AUTOMAT SOFTW ENG, V20, P5, DOI 10.1007/s10515-012-0102-y
   Gupta R., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P299, DOI 10.1109/ICSM.1992.242531
   Gyapay S., 2004, Electronic Notes in Theoretical Computer Science, V109, P137
   Hadka D., 2012, Moea framework: a free and open source java framework for multiobjective optimization
   Harrold M. J., 1988, Proceedings of the Conference on Software Maintenance - 1988 (IEEE Cat. No.88CH2615-3), P362, DOI 10.1109/ICSM.1988.10188
   Hartmann J., 1990, Proceedings of the Twenty-Third Annual Hawaii International Conference on System Sciences, P92, DOI 10.1109/HICSS.1990.205179
   Hartmann J., 1989, Proceedings: Conference on Software Maintenance (Cat. No.89CH2744-1), P70, DOI 10.1109/ICSM.1989.65195
   Hemmati H., 2010, P 18 ACM SIGSOFT INT, P267
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   INRIA, 2005, ATL TRANSF EX BIBT D
   Jensen und A.C., 2010, Proceedings of the 12th Annual Conference on Genetic and Evolutionary Computation. GECCO '10, P1341
   Jilani AA, 2014, LECT NOTES COMPUT SC, V8568, P17
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Kappel Gerti, 2012, Conceptual Modelling and Its Theoretical Foundations. Essays Dedicated to Bernhard Thalheim on the Occasion of his 60th Birthday, P197, DOI 10.1007/978-3-642-28279-9_15
   Kazmi R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3057269
   Kessentini M, 2013, SOFTWARE QUAL J, V21, P551, DOI 10.1007/s11219-012-9187-6
   Kessentini M, 2013, GECCO'13: PROCEEDINGS OF THE 2013 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1453
   Kessentini M, 2012, SOFTW SYST MODEL, V11, P209, DOI 10.1007/s10270-010-0175-7
   Kessentini M, 2011, AUTOMAT SOFTW ENG, V18, P199, DOI 10.1007/s10515-010-0079-3
   Kessentini M, 2010, LECT NOTES COMPUT SC, V6138, P156, DOI 10.1007/978-3-642-13595-8_14
   Kessentini M, 2008, LECT NOTES COMPUT SC, V5301, P159, DOI 10.1007/978-3-540-87875-9_12
   Kuhne T., 2006, Softw Syst Model, V5, P369, DOI [DOI 10.1007/S10270-006-0017-9, 10.1007/s10270-006-0017-9]
   Kumar M, 2012, CHIANG MAI J SCI, V39, P486
   Lamari M, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P998, DOI 10.1145/1244002.1244220
   Laski J., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P282, DOI 10.1109/ICSM.1992.242533
   LEE JAN, 1990, J SYST SOFTWARE, V13, P177, DOI 10.1016/0164-1212(90)90093-2
   Leung H. K. N., 1990, Proceedings. Conference on Software Maintenance 1990 (Cat. No.90CH2921-5), P290, DOI 10.1109/ICSM.1990.131377
   Leung H. K. N., 1989, Proceedings: Conference on Software Maintenance (Cat. No.89CH2744-1), P60, DOI 10.1109/ICSM.1989.65194
   Li XD, 2003, LECT NOTES COMPUT SC, V2723, P37
   Lin YH, 2005, MODEL-DRIVEN SOFTWARE DEVELOPMENT, P219, DOI 10.1007/3-540-28554-7_10
   Mansoor U, 2017, SOFTWARE QUAL J, V25, P473, DOI 10.1007/s11219-015-9284-4
   McQuillan J.A., 2009, Model Transformation with ATL, P63
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Mirarab S, 2012, IEEE T SOFTWARE ENG, V38, P936, DOI 10.1109/TSE.2011.56
   Moghadam IH, 2012, EUR CON SFTWR MTNCE, P43, DOI 10.1109/CSMR.2012.15
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   Mottu JM, 2006, LECT NOTES COMPUT SC, V4066, P376
   Object Management Group (OMG), 2003, PTC031004 OMG
   Panichella A, 2015, IEEE T SOFTWARE ENG, V41, P358, DOI 10.1109/TSE.2014.2364175
   Raji F., 1981, Proceedings of the National Telecommunications Conference, VB-6-3, P1
   Rose LM, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P16, DOI 10.1109/CMSBSE.2013.6604431
   Rosero RH, 2016, INT J SOFTW ENG KNOW, V26, P675, DOI 10.1142/S0218194016300013
   Rothermel G., 1994, SIGSOFT Software Engineering Notes, P169
   Rothermel G., 1997, Empirical Software Engineering, V2, P178, DOI 10.1023/A:1009765704299
   Rothermel G., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P358, DOI 10.1109/ICSM.1993.366926
   Saada H, 2013, IEEE INT CONF AUTOM, P688, DOI 10.1109/ASE.2013.6693134
   Sahin D, 2015, J SOFTW-EVOL PROC, V27, P821, DOI 10.1002/smr.1735
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Seawright J, 2008, POLIT RES QUART, V61, P294, DOI 10.1177/1065912907313077
   Selim G.M., 2012, Proceedings of the First Workshop on the Analysis of Model Transformations, P21
   Sharma C, 2014, ARXIV14104838
   Shelburg Jeffery, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P209, DOI 10.1007/978-3-642-39742-4_16
   TAHA AB, 1989, PROCEEDINGS : THE THIRTEENTH ANNUAL INTERNATIONAL COMPUTER SOFTWARE & APPLICATIONS CONFERENCE, P527, DOI 10.1109/CMPSAC.1989.65142
   Talbi E.-G, 2009, METAHEURISTICS DESIG, V74, DOI DOI 10.1002/9780470496916
   Troya J, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3241744
   Vallecillo Antonio, 2012, Formal Methods for Model-Driven Engineering. 12th International School of Formal Methods for the Design of Computer, Communication and Software Systems (SFM 2012). Advanced Lectures, P399, DOI 10.1007/978-3-642-30982-3_11
   Van Der Straeten R., 2008, International Conference on Model Driven Engineering Languages and Systems, P35
   Wang HZ, 2016, LECT NOTES COMPUT SC, V9936, P352, DOI 10.1007/978-3-319-46295-0_22
   Wang W., 2013, MDEBE@MoDELS, P42
   Wimmer M, 2013, LECT NOTES COMPUT SC, V8107, P203, DOI 10.1007/978-3-642-41533-3_13
   Yau S.S., 1987, P IEEE COMP SOC INT
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yoo S., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P140, DOI 10.1145/1273463.1273483
NR 116
TC 10
Z9 10
U1 2
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2020
VL 27
IS 1-2
BP 91
EP 118
DI 10.1007/s10515-020-00271-w
EA APR 2020
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LU4VK
UT WOS:000525329300001
DA 2024-07-18
ER

PT J
AU Gerasimou, S
   Calinescu, R
   Tamburrelli, G
AF Gerasimou, Simos
   Calinescu, Radu
   Tamburrelli, Giordano
TI Synthesis of probabilistic models for quality-of-service software
   engineering
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Search-based software engineering; Probabilistic model checking;
   Evolutionary algorithms; QoS requirements
ID SELF-ADAPTIVE SOFTWARE; GENETIC ALGORITHM; QUANTITATIVE VERIFICATION;
   CHECKING; SYSTEM; UPDATE
AB An increasingly used method for the engineering of software systems with strict quality-of-service (QoS) requirements involves the synthesis and verification of probabilistic models for many alternative architectures and instantiations of system parameters. Using manual trial-and-error or simple heuristics for this task often produces suboptimal models, while the exhaustive synthesis of all possible models is typically intractable. The EvoChecker search-based software engineering approach presented in our paper addresses these limitations by employing evolutionary algorithms to automate the model synthesis process and to significantly improve its outcome. EvoChecker can be used to synthesise the Pareto-optimal set of probabilistic models associated with the QoS requirements of a system under design, and to support the selection of a suitable system architecture and configuration. EvoChecker can also be used at runtime, to drive the efficient reconfiguration of a self-adaptive software system. We evaluate EvoChecker on several variants of three systems from different application domains, and show its effectiveness and applicability.
C1 [Gerasimou, Simos; Calinescu, Radu] Univ York, Dept Comp Sci, York, N Yorkshire, England.
   [Tamburrelli, Giordano] Lastminute Com, Chiasso, Switzerland.
C3 University of York - UK
RP Gerasimou, S (corresponding author), Univ York, Dept Comp Sci, York, N Yorkshire, England.
EM simos.gerasimou@york.ac.uk; radu.calinescu@york.ac.uk; tambug@gmail.com
RI Calinescu, Radu/AAN-1912-2020
OI Calinescu, Radu/0000-0002-2678-9260
FU UK MOD
FX This paper presents research partly sponsored by UK MOD. The information
   contained in it should not be interpreted as representing the views of
   the UK MOD, nor should it be assumed it reflects any current or future
   UK MOD policy.
CR Alba E, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1066
   Aleti A, 2017, AUTOMAT SOFTW ENG, V24, P603, DOI 10.1007/s10515-016-0197-7
   Aleti A, 2013, IEEE T SOFTWARE ENG, V39, P658, DOI 10.1109/TSE.2012.64
   Alur R, 1999, FORM METHOD SYST DES, V15, P7, DOI 10.1023/A:1008739929481
   Alur R., 2015, ACM SIGLOG NEWS, V2, P46
   Andova S., 2004, Formal Modeling and Analysis of Timed Systems. First International Workshop, FORMATS 2003. Revised Papers. (Lecture Notes in Comput. Sci. Vol.2791), P88
   Andrews JH, 2011, IEEE T SOFTWARE ENG, V37, P80, DOI 10.1109/TSE.2010.46
   [Anonymous], 1984, Logics and Models of Concurrent Systems (NATO ASI Series, DOI [DOI 10.1007/978-3-642-82453-1_5, 10.1007/978-3-642-82453-1\5]
   [Anonymous], 1997, HDB EVOL COMPUT
   [Anonymous], 2006, Evolutionary Algorithms for Solving Multi-Objective Problems (Genetic and Evolutionary Computation)
   [Anonymous], 2011, LONDON
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Aziz Adnan, 2000, ACM Trans. Comput. Logic, V1, P162, DOI DOI 10.1145/343369.343402
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 1999, LECT NOTES COMPUT SC, V1664, P146
   Baier C, 2010, COMMUN ACM, V53, P76, DOI 10.1145/1810891.1810912
   Baresi Luciano., 2010, Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research. FoSER'10, P17, DOI [10.1145/1882362.1882367, DOI 10.1145/1882362.1882367]
   Bartocci E, 2011, LECT NOTES COMPUT SC, V6605, P326, DOI 10.1007/978-3-642-19835-9_30
   Behrmann G, 2006, INT CONF QUANT EVAL, P125
   Bianco A., 1995, Foundations of Software Technology and Theoretical Computer Science. 15th Conference. Proceedings, P499
   Bonakdarpour Borzoo, 2012, SIGACT News, V43, P85, DOI 10.1145/2261417.2261437
   Buccafurri F, 1999, ARTIF INTELL, V112, P57, DOI 10.1016/S0004-3702(99)00039-9
   Calinescu Radu, 2017, Software Engineering for Self-Adaptive Systems III. Assurances. International Seminar. Revised Selected and Invited Papers: LNCS 9640, P223, DOI 10.1007/978-3-319-74183-3_8
   Calinescu R., 2017, Self-Aware Computing Systems, P337
   Calinescu R, 2018, IEEE T SOFTWARE ENG, V44, P1039, DOI 10.1109/TSE.2017.2738640
   Calinescu R, 2017, LECT NOTES COMPUT SC, V10503, P304, DOI 10.1007/978-3-319-66335-7_20
   Calinescu R, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA 2017), P131, DOI 10.1109/ICSA.2017.16
   Calinescu R, 2016, IEEE T RELIAB, V65, P107, DOI 10.1109/TR.2015.2452931
   Calinescu R, 2015, LECT NOTES COMPUT SC, V9033, P235, DOI 10.1007/978-3-662-46675-9_16
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Calinescu R, 2011, IEEE T SOFTWARE ENG, V37, P387, DOI 10.1109/TSE.2010.92
   Calinescu R, 2009, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.2009.5070512
   Canfora G, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1069
   Carrillo M, 2014, ARTIF INTELL, V211, P51, DOI 10.1016/j.artint.2014.02.005
   Chatzieleftheriou George, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P341, DOI 10.1007/978-3-642-28891-3_32
   Chen TL, 2013, 2013 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P85, DOI 10.1109/TASE.2013.20
   Chicano F., 2008, P 10 ANN C GEN EV CO, p[1727, 2008]
   Clarke EM, 1999, MODEL CHECKING, P1
   Coker Z, 2015, 2015 IEEE/ACM 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P168, DOI 10.1109/SEAMS.2015.16
   Damm LO, 2007, PROC INT CONF SOFTW, P560
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Drager K., 2014, TACAS 2014, V8413, P531, DOI DOI 10.1007/978-3-642-54862-8-44
   Durillo JJ, 2011, ADV ENG SOFTW, V42, P760, DOI 10.1016/j.advengsoft.2011.05.014
   Epifani I, 2009, PROC INT CONF SOFTW, P111, DOI 10.1109/ICSE.2009.5070513
   Ferrucci F, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P462, DOI 10.1109/ICSE.2013.6606592
   Filieri A, 2016, IEEE T SOFTWARE ENG, V42, P75, DOI 10.1109/TSE.2015.2421318
   Forejt Vojtech, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P317, DOI 10.1007/978-3-642-33386-6_25
   Fraser G., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P121, DOI 10.1109/ICST.2012.92
   Fraser G, 2013, IEEE T SOFTWARE ENG, V39, P276, DOI 10.1109/TSE.2012.14
   Gerasimou Simos, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P83, DOI 10.1109/SEAMS.2017.19
   Gerasimou Simos, 2012, Proceedings of the 14th International Conference on Enterprise Information Systems (ICEIS 2012)., P168
   Gerasimou S, 2017, THESIS
   Gerasimou S, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P115, DOI 10.1145/2593929.2593932
   Gerasimou S, 2015, IEEE INT CONF AUTOM, P319, DOI 10.1109/ASE.2015.22
   Ghezzi Carlo, 2012, Large-Scale Complex IT Systems. Development, Operation and Management. 17th Monterey Workshop 2012. Revised Selected Papers, P369, DOI 10.1007/978-3-642-34059-8_19
   Grefenstette J. J., 1987, GENETIC ALGORITHMS S, P42
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Harman M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P5, DOI 10.1145/2648511.2648513
   Harman M, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P1, DOI 10.1145/2593929.2600116
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Harman M, 2012, LECT NOTES COMPUT SC, V7007, P1
   Helwig S, 2008, LECT NOTES COMPUT SC, V5199, P889, DOI 10.1007/978-3-540-87700-4_88
   Johnson CG, 2007, LECT NOTES COMPUT SC, V4445, P114
   Johnson Kenneth, 2013, P 16 INT ACM SIGSOFT, P33, DOI DOI 10.1145/2465449.2465456
   Katoen JP, 2011, PERFORM EVALUATION, V68, P90, DOI 10.1016/j.peva.2010.04.001
   Katoen JP, 2005, INT CONF QUANT EVAL, P243, DOI 10.1109/QEST.2005.2
   Katz G, 2013, ELECTRON PROC THEOR, P70, DOI 10.4204/EPTCS.140.5
   Kazimipour B, 2014, 2014 IEEE CONGRESS ON EVOLUTIONARY COMPUTATION (CEC), P2585, DOI 10.1109/CEC.2014.6900618
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2007, LECT NOTES COMPUT SC, V4486, P220
   Kwiatkowska M, 2011, I C DEPEND SYS NETWO, P359, DOI 10.1109/DSN.2011.5958249
   Kwiatkowska M, 2010, LECT NOTES COMPUT SC, V6015, P23, DOI 10.1007/978-3-642-12002-2_3
   Martens A., 2010, P 1 JOINT WOSP SIPEW, P105, DOI [DOI 10.1145/1712605.1712624, 10.1145]
   Martinez-Araiza Ulises, 2014, 2014 World Automation Congress (WAC), P654, DOI 10.1109/WAC.2014.6936082
   Mason G., 2018, Adv. Hybrid. Intell. Methods Models Syst. Appl, V85, P71
   Mason G, 2017, ICAART: PROCEEDINGS OF THE 9TH INTERNATIONAL CONFERENCE ON AGENTS AND ARTIFICIAL INTELLIGENCE, VOL 2, P105, DOI 10.5220/0006156001050117
   Meedeniya Indika, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P229, DOI 10.1109/ISSRE.2010.19
   Minku LL, 2013, T SOFTW ENG METHODOL, V22
   Moreno GA, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P1, DOI 10.1145/2786805.2786853
   Nebro AJ, 2009, INT J INTELL SYST, V24, P726, DOI 10.1002/int.20358
   Oman S., 2001, International Journal of Computational Intelligence and Applications, V1, P71, DOI 10.1142/S1469026801000056
   Praditwong K, 2011, IEEE T SOFTWARE ENG, V37, P264, DOI 10.1109/TSE.2010.26
   Qiu QR, 2001, IEEE T COMPUT AID D, V20, P1200, DOI 10.1109/43.952737
   Ramirez AJ, 2011, CLUSTER COMPUT, V14, P229, DOI 10.1007/s10586-010-0122-y
   Ren J, 2011, LECT NOTES COMPUT SC, V6956, P127, DOI 10.1007/978-3-642-23716-4_14
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Sayyad AS, 2013, IEEE INT CONF AUTOM, P465, DOI 10.1109/ASE.2013.6693104
   Sesic A, 2008, IEEE T COMPUT AID D, V27, P403, DOI 10.1109/TCAD.2007.911342
   Stylianou C, 2012, PROC INT C TOOLS ART, P277, DOI 10.1109/ICTAI.2012.45
   Ulusoy A, 2014, INT J ROBOT RES, V33, P1130, DOI 10.1177/0278364913519000
   Van Veldhuizen DavidA., 1999, EVOL COMPUT
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
   Younes HLS, 2005, LECT NOTES COMPUT SC, V3576, P253
   Zhang Y, 2008, J ARTIF INTELL RES, V31, P113, DOI 10.1613/jair.2420
   Zitzler E, 1999, IEEE T EVOLUT COMPUT, V3, P257, DOI 10.1109/4235.797969
   Zitzler E, 2003, IEEE T EVOLUT COMPUT, V7, P117, DOI 10.1109/TEVC.2003.810758
   Zitzler E., 2000, EUROGEN 2001 Evol. Methods Des. Optim. Control Appl. Ind. Probl, P95
   Zitzler E, 2007, LECT NOTES COMPUT SC, V4403, P862
   Zitzler E, 2008, LECT NOTES COMPUT SC, V5252, P373, DOI 10.1007/978-3-540-88908-3_14
NR 102
TC 43
Z9 43
U1 0
U2 14
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2018
VL 25
IS 4
SI SI
BP 785
EP 831
DI 10.1007/s10515-018-0235-8
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW9YB
UT WOS:000447363400005
OA hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Tian, T
   Gong, DW
AF Tian, Tian
   Gong, Dunwei
TI Test data generation for path coverage of message-passing parallel
   programs based on co-evolutionary genetic algorithms
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software testing; Test data; Path coverage; Parallel program;
   Co-evolutionary genetic algorithm
AB Employing genetic algorithms to generate test data for path coverage has been an important method in software testing. Previous work, however, is suitable mainly for serial programs. Automatic test data generation for path coverage of message-passing parallel programs without non-determinacy is investigated in this study by using co-evolutionary genetic algorithms. This problem is first formulated as a single-objective optimization problem, and then a novel co-evolutionary genetic algorithm is proposed to tackle the formulated optimization problem. This method employs the alternate co-evolution of two kinds of populations to generate test data that meet path coverage. The proposed method is applied to seven parallel programs, and compared with the other three methods. The experimental results show that the proposed method has the best success rate and the least number of evaluated individuals and time consumption.
C1 [Tian, Tian; Gong, Dunwei] China Univ Min & Technol, Sch Informat & Elect Engn, Xuzhou 221116, Jiangsu, Peoples R China.
   [Gong, Dunwei] Lanzhou Univ Technol, Sch Elect Engn & Informat Engn, Lanzhou 730050, Gansu, Peoples R China.
C3 China University of Mining & Technology; Lanzhou University of
   Technology
RP Gong, DW (corresponding author), China Univ Min & Technol, Sch Informat & Elect Engn, Xuzhou 221116, Jiangsu, Peoples R China.
EM dwgong@vip.163.com
FU National Natural Science Foundation of China [61375067, 61203304];
   Natural Science Foundation of Jiangsu Province [BK2012566]; Fundamental
   Research Funds for Central Universities [2012LWB72, 2012QNA58]
FX This work is jointly supported by National Natural Science Foundation of
   China with Grant No. 61375067 and 61203304, Natural Science Foundation
   of Jiangsu Province with Grant No. BK2012566, and Fundamental Research
   Funds for Central Universities with Grant No. 2012LWB72 and 2012QNA58.
   Thank to Dr. Edward C. Mignot, Shandong University, for linguistic
   advice.
CR Ahmed MA, 2008, COMPUT OPER RES, V35, P3107, DOI 10.1016/j.cor.2007.01.012
   Alba E., 2008, P 10 ANN C GEN EV CO, P1735
   [Anonymous], PARALLEL COMPUTING S
   Arcuri A, 2014, INFORM SCIENCES, V259, P412, DOI 10.1016/j.ins.2009.12.019
   Arcuri A, 2008, LECT NOTES COMPUT SC, V5361, P61
   Arcuri A, 2008, IEEE C EVOL COMPUTAT, P162, DOI 10.1109/CEC.2008.4630793
   Arcuri Andrea., 2007, Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering, P397, DOI DOI 10.1145/1321631.1321693
   Bueno PMS, 2002, INT J SOFTW ENG KNOW, V12, P691, DOI 10.1142/S0218194002001074
   Chen G.L., 2004, PAPER PAPERMAKING, P59
   Chen TY, 2010, J SYST SOFTWARE, V83, P60, DOI 10.1016/j.jss.2009.02.022
   Ding Z., 2008, P 23 INT TECHN C CIR, P1117
   Domínguez-Jiménez JJ, 2011, INFORM SOFTWARE TECH, V53, P1108, DOI 10.1016/j.infsof.2011.03.008
   Edelstein O, 2002, IBM SYST J, V41, P111, DOI 10.1147/sj.411.0111
   Eytani Y, 2006, ELECTRON NOTES THEOR, V144, P57, DOI 10.1016/j.entcs.2006.02.004
   Ferguson R, 1996, INFORM SOFTWARE TECH, V38, P343, DOI 10.1016/0950-5849(95)01064-5
   Geist GA, 1997, LECT NOTES COMPUT SC, V1332, P116
   Godefroid P., 2004, International Journal on Software Tools for Technology Transfer, V6, P117, DOI 10.1007/s10009-004-0141-1
   Gong D, 2010, IET SOFTW, V4, P361, DOI 10.1049/iet-sen.2009.0092
   Gong Dun-wei, 2010, Acta Electronica Sinica, V38, P1299
   Gong DW, 2011, J SYST SOFTWARE, V84, P2222, DOI 10.1016/j.jss.2011.06.028
   Gupta Ashish, 2011, Platelets, DOI 10.3109/09537104.2010.547958
   Gupta N., 1998, Software Engineering Notes, V23, P231, DOI 10.1145/291252.288321
   Hruba V., 2012, TESTING CONCURRENT P
   Husbands P., 1991, PROC 4 INT C GENET A, P264
   Katayama T, 1997, ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE AND INTERNATIONAL COMPUTER SCIENCE CONFERENCE, PROCEEDINGS, P485, DOI 10.1109/APSEC.1997.640205
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   Krammer B, 2006, LECT NOTES COMPUT SC, V4192, P105
   Krawczyk H., 1994, 2 TU GDANSK
   Krena Bohuslav., 2010, PADTAD, P48
   Lei Y, 2002, IEEE INT C ENG COMP, P35, DOI 10.1109/ICECCS.2002.1181496
   de Oliveira AAL, 2013, 2013 IEEE CONGRESS ON EVOLUTIONARY COMPUTATION (CEC), P829
   MCMINN P., 2006, Proceedings of the 2006 international symposium on Software testing and analysis, P13, DOI [10.1145/1146238.1146241, DOI 10.1145/1146238.1146241]
   Meuleau N., 1995, ARTIF EVOL, V1063, P159
   Potter M.A., 1997, The design and analysis of a computational model of cooperative coevolution
   Ren J, 2011, LECT NOTES COMPUT SC, V6956, P127, DOI 10.1007/978-3-642-23716-4_14
   Sair M., 1996, TECHNICAL REPORT
   Shan Jinhui, 2005, Acta Scientiarum Naturalium Universitatis Pekinensis, V41, P134
   SIR, 2011, SIR REPOSITORY SOFTW
   Souza P., 2013, Concurr. Comput.: Pract. Exper., V25, P149
   Souza SRS, 2008, CONCURR COMP-PRACT E, V20, P1893, DOI 10.1002/cpe.1297
   Souza SRS, 2011, P 23 INT C SOFTW ENG, P207
   Steenbuck S., 2013, P 6 INT C SOFTW TEST
   Vakkalanka S, 2008, LECT NOTES COMPUT SC, V5205, P248, DOI 10.1007/978-3-540-87475-1_34
   Vetter JereyS., 2000, Proceedings Supercomputing 2000, November 4-10, 2000, Dallas, Texas, USA. IEEE Computer Society, P51
   Wang Zhi-Yan, 1998, Journal of Software, V9, P438
   WATKINS AL, 1995, PROCEEDINGS OF THE 4TH SOFTWARE QUALITY CONFERENCE, VOLS 1 AND 2, P300
   Wiegand R. P., 2001, P 3 ANN C GEN EV COM, P1235
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Wong WE, 2005, IEEE INT C ENG COMP, P539
   Xanthakis S., 1992, 5 INT C SOFTWARE ENG, P625
   Xie Xiao-Yuan, 2009, Journal of Software, V20, P3117, DOI 10.3724/SP.J.1001.2009.00580
   Yang C.-S. D., 1998, Software Engineering Notes, V23, P153, DOI 10.1145/271775.271804
   YANG RD, 1992, INFORM SOFTWARE TECH, V34, P43, DOI 10.1016/0950-5849(92)90093-5
NR 53
TC 24
Z9 28
U1 0
U2 22
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2016
VL 23
IS 3
BP 469
EP 500
DI 10.1007/s10515-014-0173-z
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DM9CA
UT WOS:000376660500006
DA 2024-07-18
ER

PT J
AU Wang, SW
   Lo, D
   Jiang, LX
AF Wang, Shaowei
   Lo, David
   Jiang, Lingxiao
TI AutoQuery: automatic construction of dependency queries for code search
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Code search; Dependency query; Query construction; Graph mining
ID FEATURE LOCATION
AB Many code search techniques have been proposed to return relevant code for a user query expressed as textual descriptions. However, source code is not mere text. It contains dependency relations among various program elements. To leverage these dependencies for more accurate code search results, techniques have been proposed to allow user queries to be expressed as control and data dependency relationships among program elements. Although such techniques have been shown to be effective for finding relevant code, it remains a question whether appropriate queries can be generated by average users. In this work, we address this concern by proposing a technique, AutoQuery, that can automatically construct dependency queries from a set of code snippets. We realize AutoQuery by the following major steps: firstly, code snippets (that are not necessarily compilable) are converted into program dependence graphs (PDGs); secondly, a new graph mining solution is built to return common structures in the PDGs; thirdly, the common structures are converted to dependency queries, which are used to retrieve results by using a dependence-based code search technique. We have evaluated AutoQuery on real systems with 47 different code search tasks. The results show that the automatically constructed dependency queries retrieve relevant code with a precision, recall, and F-measure of 68.4, 72.1, and 70.2 %, respectively. We have also performed a user study to compare the effectiveness of AutoQuery with that of human generated queries. The results show that queries constructed by AutoQuery on average help to retrieve code fragments with comparable F-measures to those retrieved by human constructed queries.
C1 [Wang, Shaowei; Lo, David; Jiang, Lingxiao] Singapore Management Univ, Sch Informat Syst, 80 Stamford Rd, Singapore 178902, Singapore.
C3 Singapore Management University
RP Lo, D (corresponding author), Singapore Management Univ, Sch Informat Syst, 80 Stamford Rd, Singapore 178902, Singapore.
EM shaoweiwang.2010@smu.edu.sg; davidlo@smu.edu.sg; lxjiang@smu.edu.sg
RI Jiang, Lingxiao/E-8553-2012; Lo, David/A-2493-2012
OI Jiang, Lingxiao/0000-0002-4336-8548; Lo, David/0000-0002-4367-7201
CR Andersen J, 2012, IEEE INT CONF AUTOM, P382, DOI 10.1145/2351676.2351753
   [Anonymous], ICSE
   [Anonymous], CSMR
   [Anonymous], 2008, INTRO INFORM RETRIEV, DOI DOI 10.1017/CBO9780511809071
   [Anonymous], 2007, P 22 IEEE ACM INT C
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering, DOI [DOI 10.1145/2025113.2025185, 10.1145/2025113.2025185]
   [Anonymous], 1997, ACM SIGACT NEWS
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Baah GK, 2010, IEEE T SOFTWARE ENG, V36, P528, DOI 10.1109/TSE.2009.87
   BAKER HG, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P218, DOI 10.1145/91556.91652
   Boya Sun, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P1, DOI 10.1109/ISSRE.2010.37
   Chan W., 2012, PROC ACM SIGSOFT 20, P1, DOI DOI 10.1145/2393596.2393606
   Chang RY, 2008, IEEE T SOFTWARE ENG, V34, P579, DOI 10.1109/TSE.2008.24
   Cheng H, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P141
   Dagenais B, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P313
   Dit B, 2013, J SOFTW-EVOL PROC, V25, P53, DOI 10.1002/smr.567
   Dit B, 2013, EMPIR SOFTW ENG, V18, P277, DOI 10.1007/s10664-011-9194-4
   Gabel M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P321, DOI 10.1145/1368088.1368132
   Ganesh Vijay, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P1, DOI 10.1007/978-3-642-22110-1_1
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Horwitz S., 1992, International Conference on Software Engineering, P392, DOI 10.1145/143062.143156
   Jang JY, 2012, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2012.13
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Jiang LX, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P81
   Kim J., 2010, AAAI
   Komondoor R, 2001, LECT NOTES COMPUT SC, V2028, P383
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Lee M.-W., 2010, Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE '10, P167
   Li JY, 2012, PROC INT CONF SOFTW, P310, DOI 10.1109/ICSE.2012.6227183
   Liu Chao, 2006, Proc. 12th ACMSIGKDD Int'l Con. on Knowledge Discovery and Data Mining (KDD 06), P872, DOI DOI 10.1145/1150402.1150522
   McMillan C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P111, DOI 10.1145/1985793.1985809
   Meng N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P329
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nguyen TT, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P383, DOI 10.1145/1595696.1595767
   OCallahan R, 1997, PROC INT CONF SOFTW, P338, DOI 10.1145/253228.253351
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Shaowei Wang, 2011, 2011 18th Working Conference on Reverse Engineering, P92, DOI 10.1109/WCRE.2011.72
   Tian Y, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P44, DOI 10.1109/CSMR-WCRE.2014.6747213
   Wang SW, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P604, DOI 10.1109/ICSM.2012.6405332
   Wang X., 2010, Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, ASE '10, P457
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Yan X., 2003, Proceedings of the ninth ACM SIGKDD international conference on Knowledge discovery and data mining, KDD '03, P286
   Yan XF, 2002, 2002 IEEE INTERNATIONAL CONFERENCE ON DATA MINING, PROCEEDINGS, P721, DOI 10.1109/ICDM.2002.1184038
   Zhu FD, 2011, PROC VLDB ENDOW, V4, P807
NR 44
TC 6
Z9 7
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2016
VL 23
IS 3
BP 393
EP 425
DI 10.1007/s10515-014-0170-2
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DM9CA
UT WOS:000376660500004
DA 2024-07-18
ER

PT J
AU Devine, T
   Goseva-Popstojanova, K
   Krishnan, S
   Lutz, RR
AF Devine, Thomas
   Goseva-Popstojanova, Katerina
   Krishnan, Sandeep
   Lutz, Robyn R.
TI Assessment and cross-product prediction of software product line
   quality: accounting for reuse across products, over multiple releases
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software product lines; Cross-product prediction; Cross-product reuse;
   Cross-release reuse; Longitudinal study; Assessment; Fault proneness
   prediction
ID QUANTITATIVE-ANALYSIS; ERRORS; NUMBER; FAULTS
AB The goals of cross-product reuse in a software product line (SPL) are to mitigate production costs and improve the quality. In addition to reuse across products, due to the evolutionary development process, a SPL also exhibits reuse across releases. In this paper, we empirically explore how the two types of reuse-reuse across products and reuse across releases-affect the quality of a SPL and our ability to accurately predict fault proneness. We measure the quality in terms of post-release faults and consider different levels of reuse across products (i.e., common, high-reuse variation, low-reuse variation, and single-use packages), over multiple releases. Assessment results showed that quality improved for common, low-reuse variation, and single-use packages as they evolved across releases. Surprisingly, within each release, among preexisting ('old') packages, the cross-product reuse did not affect the change and fault proneness. Cross-product predictions based on pre-release data accurately ranked the packages according to their post-release faults and predicted the 20 % most faulty packages. The predictions benefited from data available for other products in the product line, with models producing better results (1) when making predictions on smaller products (consisting mostly of common packages) rather than on larger products and (2) when trained on larger products rather than on smaller products.
C1 [Devine, Thomas; Goseva-Popstojanova, Katerina] W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26506 USA.
   [Krishnan, Sandeep; Lutz, Robyn R.] Iowa State Univ, Dept Comp Sci, Ames, IA USA.
C3 West Virginia University; Iowa State University
RP Goseva-Popstojanova, K (corresponding author), W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26506 USA.
EM tdevine4@mix.wvu.edu; Katerina.Goseva@mail.wvu.edu;
   sandeepk@iastate.edu; rlutz@iastate.edu
RI Krishnan, Sandeep/AGX-4591-2022
OI Goseva-Popstojanova, Katerina/0000-0003-4683-672X; Lutz,
   Robyn/0000-0001-5390-7982
FU National Science Foundation [0916275, 0916284]; American Recovery and
   Reinvestment Act; WVU ADVANCE Sponsorship Program - National Science
   Foundation ADVANCE IT Program [HRD-100797]; Direct For Computer & Info
   Scie & Enginr [0916284] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations [0916284] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [0916275] Funding Source: National Science Foundation
FX This work was supported in part by the National Science Foundation
   Grants 0916275 and 0916284 with funds from the American Recovery and
   Reinvestment Act of 2009 and by the WVU ADVANCE Sponsorship Program
   funded by the National Science Foundation ADVANCE IT Program award
   HRD-100797. Part of this work was performed while Robyn Lutz was
   visiting the California Institute of Technology.
CR Andersson C, 2007, IEEE T SOFTWARE ENG, V33, P273, DOI 10.1109/TSE.2007.1005
   [Anonymous], 2009, P 5 INT C PRED MOD S
   [Anonymous], DID ECLIPSE COME
   [Anonymous], APPL LINEAR REGRES M
   [Anonymous], 2010, Analysis of ordinal categorical data
   [Anonymous], 1983, MONOGRAPHS STAT APPL
   [Anonymous], INFO SOFTW TECHNOL
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], CVSPS PATCHSETS CVS
   [Anonymous], P 17 INT SOFTW PROD
   [Anonymous], 2011, P 7 INT C PREDICTIVE
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Bell R., 2006, Proc. 2006 International Symposium on Software Testing and Analysis, P61
   Bibi S, 2006, I C COMP SYST APPLIC, P330, DOI 10.1109/AICCSA.2006.205110
   Bingham NH, 2010, Regression: linear models in statistics
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Breivold HP, 2012, INFORM SOFTWARE TECH, V54, P16, DOI 10.1016/j.infsof.2011.06.002
   Chastek G., 2007, P 3 INT WORKSHOP OPE, P1
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   D'Ambros M, 2009, WORK CONF REVERSE EN, P135, DOI 10.1109/WCRE.2009.19
   Devine T. R., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P181, DOI 10.1109/ICST.2012.98
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Frakes WB, 2001, J SYST SOFTWARE, V57, P99, DOI 10.1016/S0164-1212(00)00121-7
   Gomaa H., 2004, Designing Software Product Lines with UML: From Use Cases to PatternBased Software Architectures
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Hamill M, 2009, IEEE T SOFTWARE ENG, V35, P484, DOI 10.1109/TSE.2009.3
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   Kamei Y., 2010, Proceedings of the 26th International Conference on Software Maintenance, P1, DOI 10.1109/ICSM.2010.5609530
   Kastro Y, 2008, SOFTWARE QUAL J, V16, P543, DOI 10.1007/s11219-008-9053-8
   Khoshgoftaar TM, 2004, EMPIR SOFTW ENG, V9, P229, DOI 10.1023/B:EMSE.0000027781.18360.9b
   KHOSHGOFTAAR TM, 1990, IEEE J SEL AREA COMM, V8, P253, DOI 10.1109/49.46879
   Kleinbaum D.G., 1988, APPL REGRESSION ANAL
   Krishnan S., 2011, P 8 WORKING C MINING, P103
   LIM WC, 1994, IEEE SOFTWARE, V11, P23, DOI 10.1109/52.311048
   Luo Li P., 2006, 28th International Conference on Software Engineering Proceedings, P413, DOI 10.1145/1134285.1134343
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   McConnell Steve., 2004, Code Complete, V2nd ed
   Mohagheghi P, 2004, PROC INT CONF SOFTW, P282, DOI 10.1109/ICSE.2004.1317450
   Mohagheghi P, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1363102.1363104
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   NELDER JA, 1972, J R STAT SOC SER A-G, V135, P370, DOI 10.2307/2344614
   Norusis MarijaJ., 2012, IBM SPSS Statistics 19: Advanced Statistical Procedures Companion
   Ohlsson N, 1996, IEEE T SOFTWARE ENG, V22, P886, DOI 10.1109/32.553637
   Ostrand T. J., 2002, Software Engineering Notes, V27, P55, DOI 10.1145/566171.566181
   Ostrand T. J., 2010, P 6 INT C PRED MOD S, P19, DOI [DOI 10.1145/1868328, 10.1145/1868328]
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Ostrand TJ., 2004, Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA '04, V29, P86, DOI [DOI 10.1145/1013886.1007524, 10.1145/1013886.1007524]
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Selby RW, 2005, IEEE T SOFTWARE ENG, V31, P495, DOI 10.1109/TSE.2005.69
   Shin Y, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P61, DOI 10.1109/MSR.2009.5069481
   Shull FJ, 2008, EMPIR SOFTW ENG, V13, P211, DOI 10.1007/s10664-008-9060-1
   Thomas WM, 1997, J SYST SOFTWARE, V38, P211, DOI 10.1016/S0164-1212(96)00152-5
   Thompson J. M., 2003, Requirements Engineering, V8, P42, DOI 10.1007/s00766-003-0166-0
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   van der Linden Frank, 2009, UPGRADE: The European Journal for the Informatics Professional, V10, P32
   van Gurp J, 2010, SOFTWARE PRACT EXPER, V40, P285, DOI 10.1002/spe.955
   Watanabe S., 2008, P 4 INT WORKSH PRED, P19
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   Zhang WS, 2005, LECT NOTES COMPUT SC, V3714, P57
   Zhimin He, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P45, DOI 10.1109/ESEM.2013.20
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 65
TC 11
Z9 13
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2016
VL 23
IS 2
BP 253
EP 302
DI 10.1007/s10515-014-0160-4
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DG7KF
UT WOS:000372262500005
DA 2024-07-18
ER

PT J
AU Pan, K
   Wu, XT
   Xie, T
AF Pan, Kai
   Wu, Xintao
   Xie, Tao
TI Program-input generation for testing database applications using
   existing database states
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Database application testing; Test generation; Dynamic symbolic
   execution
ID COVERAGE
AB Testing is essential for quality assurance of database applications. Achieving high code coverage of the database applications is important in testing. In practice, there may exist a copy of live databases that can be used for database application testing. Using an existing database state is desirable since it tends to be representative of real-world objects' characteristics, helping detect faults that could cause failures in real-world settings. However, to cover a specific program-code portion (e.g., block), appropriate program inputs also need to be generated for the given existing database state. To address this issue, in this paper, we propose a novel approach that generates program inputs for achieving high code coverage of a database application, given an existing database state. Our approach uses symbolic execution to track how program inputs are transformed before appearing in the executed SQL queries and how the constraints on query results affect the application's execution. One significant challenge in our problem context is the gap between program-input constraints derived from the program and from the given existing database state; satisfying both types of constraints is needed to cover a specific program-code portion. Our approach includes novel query formulation to bridge this gap. We incorporate the data-instantiation component in our framework to deal with the case that no effective program input values can be attained. We determine how to generate new records and populate them in the new database state such that the code along the path can be covered. We also extend our approach of program-input generation to test database applications including canonical queries and group-by queries. Our approach is loosely integrated into Pex, a state-of-the-art white-box testing tool for .NET from Microsoft Research. Empirical evaluations on two real database applications show that our approach assists Pex to generate program inputs that achieve higher code coverage than the program inputs generated by Pex without our approach's assistance.
C1 [Pan, Kai] Microsoft Corp, Outlook Serv Applicat & Serv Grp, Redmond, WA 98052 USA.
   [Wu, Xintao] Univ Arkansas, Dept Comp Sci & Comp Engn, Fayetteville, AR 72701 USA.
   [Xie, Tao] Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
C3 Microsoft; University of Arkansas System; University of Arkansas
   Fayetteville; University of Illinois System; University of Illinois
   Urbana-Champaign
RP Xie, T (corresponding author), Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
EM kaipan@microsoft.com; xintaowu@gmail.com; taoxie@illinois.edu
OI Wu, Xintao/0000-0002-2823-3063
FU U.S. National Science Foundation [CCF-0915059, CCF-1349666, CNS-1434582,
   CCF-1434596, CCF-1434590, CNS-1439481]; Direct For Computer & Info Scie
   & Enginr; Division of Computing and Communication Foundations [1434590]
   Funding Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1434596] Funding Source: National Science Foundation
FX This work was supported in part by U.S. National Science Foundation
   under CCF-0915059 for Kai Pan and Xintao Wu, and under CCF-1349666,
   CNS-1434582, CCF-1434596, CCF-1434590, and CNS-1439481 for Tao Xie.
CR Ahmed R., 2006, VLDB, P1026
   [Anonymous], 1987, SIGMOD, DOI DOI 10.1145/38713.38723
   [Anonymous], 2007, P INT C DAT ENG, DOI DOI 10.1109/ICDE.2007.367896
   Binnig C., 2008, DBTEST, P5
   Binnig Carsten, 2007, P ACM SIGMOD INT C M, P341, DOI DOI 10.1145/1247480.1247520
   Bruno Nicolas, 2005, P 31 INT C VERY LARG, P1097
   Chaudhuri Surajit, 1994, P 20 INT C VER LARG, P354
   Chays D, 2004, SOFTW TEST VERIF REL, V14, P17, DOI 10.1002/stvr.286
   CHAYS D, 2004, THESIS POLYTECHNIC U
   Chays D., 2008, DBTEST, P6
   Chixiang Zhou, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P61, DOI 10.1109/ICST.2012.86
   Dayal U., 1987, Proceedings of the Thirteenth International Conference on Very Large Data Bases: 1987 13th VLDB, P197
   de la Riva C., 2010, AST, P67
   Deng YT, 2005, PROC INT CONF SOFTW, P78, DOI 10.1145/1062455.1062486
   Emmi M., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P151
   Godefroid Patrice., 2011, Proc. ISSTA, P23, DOI [10.1145/2001420.2001424, DOI 10.1145/2001420.2001424]
   Gupta A., 1995, VLDB '95. Proceedings of the 21st International Conference on Very Large Data Bases, P358
   Gupta BP, 2010, PROC INT CONF DATA, P876, DOI 10.1109/ICDE.2010.5447862
   Halfond WGJ, 2006, IEEE INT CONF AUTOM, P69
   Kai Pan, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P73, DOI 10.1109/ASE.2011.6100152
   Kapfhammer Gregory M., 2008, 1st India Software Engineering Conference. ISEC 2008, P77
   Kapfhammer G. M., 2003, Software Engineering Notes, V28, P98, DOI 10.1145/949952.940086
   Khalek Shadi Abdul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P238, DOI 10.1109/ASE.2008.34
   Khalek Shadi Abdul, 2010, Proceedings of the 25th IEEE/ACM International Conference on Automated Software Engineering, ASE'10, page, P329
   KIM W, 1982, ACM T DATABASE SYST, V7, P443, DOI 10.1145/319732.319745
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Li C., 2010, P INT WORKSH TEST DA
   Microsoft Research Foundation of Software Engineering Group, PEX DYN AN TEST GEN
   Pan K., 2011, P INT WORKSH TEST DA
   Pan K, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2491529
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Seshadri P, 1996, PROC INT CONF DATA, P450, DOI 10.1109/ICDE.1996.492194
   Shah S, 2011, PROC INT CONF DATA, P1175, DOI 10.1109/ICDE.2011.5767876
   Taneja K., 2010, ASE, P289, DOI DOI 10.1145/1858996.1859053
   Tuya J., 2006, P 2 WORKSH MUT AN MU, P1, DOI DOI 10.1109/MUTATION.2006.13
   Tuya J, 2007, INFORM SOFTWARE TECH, V49, P398, DOI 10.1016/j.infsof.2006.06.009
   Tuya J, 2010, SOFTW TEST VERIF REL, V20, P237, DOI 10.1002/stvr.424
   Willmor D., 2006, 28th International Conference on Software Engineering Proceedings, P102, DOI 10.1145/1134285.1134301
   Willmor D, 2006, TAIC PART - TESTING: ACADEMIC & INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P115, DOI 10.1109/TAIC-PART.2006.28
   Wu XT, 2007, FUND INFORM, V78, P595
   Wu XT, 2005, 9TH INTERNATIONAL DATABASE ENGINEERING & APPLICATION SYMPOSIUM, PROCEEDINGS, P317
   Zhou C., 2011, ICST, P259, DOI DOI 10.1109/ICST.2011.63
   Zhou CX, 2011, SOFTW TEST VERIF REL, V21, P241, DOI 10.1002/stvr.462
   Zhou CX, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P396, DOI 10.1109/ICST.2009.43
NR 44
TC 8
Z9 8
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2015
VL 22
IS 4
SI SI
BP 439
EP 473
DI 10.1007/s10515-014-0158-y
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CR8KJ
UT WOS:000361600000002
DA 2024-07-18
ER

PT J
AU Sardinha, A
   Chitchyan, R
   Weston, N
   Greenwood, P
   Rashid, A
AF Sardinha, Alberto
   Chitchyan, Ruzanna
   Weston, Nathan
   Greenwood, Phil
   Rashid, Awais
TI EA-Analyzer: automating conflict detection in a large set of textual
   aspect-oriented requirements
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
AB One of the aims of Aspect-Oriented Requirements Engineering is to address the composability and subsequent analysis of crosscutting and non-crosscutting concerns during requirements engineering. A composition definition explicitly represents interdependencies and interactions between concerns. Subsequent analysis of such compositions helps to reveal conflicting dependencies that need to be resolved in requirements. However, detecting conflicts in a large set of textual aspect-oriented requirements is a difficult task as a large number of explicitly defined interdependencies need to be analyzed. This paper presents EA-Analyzer, the first automated tool for identifying conflicts in aspect-oriented requirements specified in natural-language text. The tool is based on a novel application of a Bayesian learning method. We present an empirical evaluation of the tool with three industrial-strength requirements documents from different domains and a fourth academic case study used as a de facto benchmark in several areas of the aspect-oriented community. This evaluation shows that the tool achieves up to 93.90 % accuracy regardless of the documents chosen as the training and validation sets.
C1 [Sardinha, Alberto] Univ Tecn Lisboa, INESC ID, P-1100 Lisbon, Portugal.
   [Sardinha, Alberto] Univ Tecn Lisboa, Inst Super Tecn, P-1096 Lisbon, Portugal.
   [Chitchyan, Ruzanna] Univ Leicester, Dept Comp Sci, Leicester LE1 7RH, Leics, England.
   [Weston, Nathan; Greenwood, Phil; Rashid, Awais] Univ Lancaster, Dept Comp, Lancaster LA1 4WA, England.
C3 Universidade de Lisboa; INESC-ID; Universidade de Lisboa; University of
   Leicester; Lancaster University
RP Sardinha, A (corresponding author), Univ Tecn Lisboa, INESC ID, Ave Rovisco Pais 1, P-1100 Lisbon, Portugal.
EM jose.alberto.sardinha@ist.utl.pt
RI ; Sardinha, Alberto/L-9553-2015
OI Rashid, Awais/0000-0002-0109-1341; Chitchyan,
   Ruzanna/0000-0001-6293-3445; Sardinha, Alberto/0000-0002-5782-3142
FU European Commission [PIIF-GA-2008-221016]; FCT through the PIDDAC
   Program
FX This work has been supported by a Marie Curie Fellowship from the
   European Commission (Grant Agreement No. PIIF-GA-2008-221016) and FCT
   (INESC-ID multiannual funding) through the PIDDAC Program funds.
CR Ambriola V., 2006, Automated Software Engineering, V13, P107, DOI 10.1007/s10515-006-5468-2
   [Anonymous], 1998, AAAI 98 WORKSH LEARN
   [Anonymous], P AAAI SPRING S SER
   Araujo J., 2004, RE 04
   Ayed D., 2009, DYNAMIC VARIABILITY
   Baniassad E., 2004, ICSE 04
   Barais O., 2008, ICCBSS 08
   Bishop Christopher M, 2006, PATTERN RECOGN, V128, P1
   Brito I S., 2007, Transactions on Aspect-Oriented Software Development Special Issue on Early Aspects
   Burg J. F. M., 1995, CAISE 95
   Chitchyan R., 2007, AOSD 07
   Chitchyan R., 2009, AOSD 09
   Chitchyan R., 2007, THESIS LANCASTER U
   Chung L., 1999, NONFUNCTIONAL REQUIR
   Clarke S., 2005, ASPECT ORIENTED ANAL
   Cohen W W, 1996, AAAI SPRING S MACH L
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   Domingos P, 1997, MACH LEARN, V29, P103, DOI 10.1023/A:1007413511361
   Easterbrook S, 1996, SOFTWARE ENG J, V11, P31, DOI 10.1049/sej.1996.0004
   Goldin L., 1997, Automated Software Engineering, V4, P375, DOI 10.1023/A:1008617922496
   GRAY J, 1991, COMPUTER, V24, P39, DOI 10.1109/2.84898
   Joachims T., 1997, ICML 97
   Joachims T., 1998, ECML 98
   Kienzle J, 2010, LECT NOTES COMPUT SC, V6210, P1
   Laney R., 2004, RE 04
   Lang K., 1995, P 12 INT C MACHINE L, P331
   Lewis D.D, 1998, EUR C MACH LEARN, P4
   McCallum A., 1998, AAAI 98 WORKSH LEARN, V752, P41, DOI DOI 10.1109/TSMC.1985.6313426
   Mehner K., 2006, RE 06
   MITCHELL T, 1989, ANNU REV COMPUT SCI, V4, P417
   Moreira A., 2005, LNCS, V3520
   Moreira A., 2005, P 13 IEEE INT C REQ
   Mostefaoui F, 2007, J OBJECT TECHNOL, V6, P137, DOI 10.5381/jot.2007.6.7.a6
   Nentwich C, 2003, ACM T SOFTW ENG METH, V12, P28, DOI 10.1145/839268.839271
   Nuseibeh B, 2001, J SYST SOFTWARE, V58, P171, DOI 10.1016/S0164-1212(01)00036-X
   Nuseibeh B., 2003, ICSE 03
   Payne T. R., 1995, INTERFACE AGENTS LEA
   Pohl K., 2005, Software Product Line Engineering: Foundations, Principles and Techniques, V1, DOI [10.1007/3-540-28901-1, DOI 10.1007/3-540-28901-1]
   Rashid A., 2003, AOSD 03
   Rayson P., 2010, WMATRIX
   Reddy YR, 2006, LECT NOTES COMPUT SC, V3880, P75
   Sampaio A., 2005, ASE 05
   Sampaio A., 2007, ESEM 07
   Schapire RE, 2000, MACH LEARN, V39, P135, DOI 10.1023/A:1007649029923
   Shaker P., 2006, P ASP DEP INT WORKSH
   Shepherd D., 2006, AOSD 06
   Soares S, 2006, SOFTWARE PRACT EXPER, V36, P711, DOI 10.1002/spe.715
   Weston N., 2008, RE 08
   YANG YM, 1994, ACM T INFORM SYST, V12, P252, DOI 10.1145/183422.183424
NR 49
TC 14
Z9 14
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2013
VL 20
IS 1
BP 111
EP 135
DI 10.1007/s10515-012-0106-7
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 059MN
UT WOS:000312709700005
DA 2024-07-18
ER

PT J
AU Hashemi, S
   Mäntylä, M
AF Hashemi, Shayan
   Mantyla, Mika
TI SiaLog: detecting anomalies in software execution logs using the siamese
   network
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Log analysis; Anomaly detection; Siamese network; Deep learning
AB Detecting anomalies in software logs has become a notable concern for software engineers and maintainers as they represent anomalies in software execution paths and states. This paper propose a novel anomaly detection approach based on the Siamese network on top of Recurrent Neural Networks(RNN). Accordingly, we introduce a novel training pair generation algorithm to train the Siamese network which reduces generated training significantly while maintaining the F-1 score. Additionally, we propose a hybrid model by combining the Siamese network with a traditional feedforward neural network to make end-to-end training possible, reducing engineering effort in setting up a deep-learning-based log anomaly detector. Furthermore, we provides validations of the approach on the Hadoop Distributed File System (HDFS), Blue Gene/L (BGL), and Hadoop map-reduce task log datasets. To the best of our knowledge, the proposed approach outperforms other methods on the same dataset at the F-1 scores of respectively 0.99, 0.99, and 0.94 on HDFS, BGL, and Hadoop datasets, resulting in a new state-of-the-art performance.To further evaluate the proposed method, we examine our method's robustness to log evolutions by evaluating the model on synthetically evolved log sequences; we got the F-1 score of 0.95 on the HDFS dataset at the noise ratio of 20%. Finally, we dive deep into some of the side benefits of the Siamese network. Accordingly, we introduce an unsupervised log evolution monitoring method alongside a visualization technique that facilitates model interpretability.
C1 [Hashemi, Shayan; Mantyla, Mika] Univ Oulu, ITEE, M3S Res Unit, Oulu, Finland.
C3 University of Oulu
RP Hashemi, S (corresponding author), Univ Oulu, ITEE, M3S Res Unit, Oulu, Finland.
EM shayan.hashemi@oulu.fi; mika.mantyla@oulu.fi
RI Mäntylä, Mika V/E-7644-2012
OI Hashemi, Shayan/0000-0001-6031-1765
FU Academy of Finland [298020, 328058]; Academy of Finland (AKA) [328058]
   Funding Source: Academy of Finland (AKA)
FX This work has been supported by the Academy of Finland (grant IDs 298020
   and 328058). Additionally, the authors gratefully acknowledge CSC -IT
   Center for Science, Finland, for their generous computational resources.
CR Abdi H, 2010, WIRES COMPUT STAT, V2, P433, DOI 10.1002/wics.101
   Ahrabian K, 2019, NEURAL COMPUT APPL, V31, P9321, DOI 10.1007/s00521-018-3844-z
   Alhersh T, 2019, INT CONF PERVAS COMP, P17, DOI [10.1109/percomw.2019.8730743, 10.1109/PERCOMW.2019.8730743]
   [Anonymous], 2010, WDS 10 P CONTR PAP
   [Anonymous], 2006, PROC IEEE COMPUT SOC
   Bahdanau D, 2016, Arxiv, DOI [arXiv:1409.0473, 10.48550/arXiv.1409.0473]
   Bertinetto L, 2016, LECT NOTES COMPUT SC, V9914, P850, DOI 10.1007/978-3-319-48881-3_56
   Bromley J., 1993, International Journal of Pattern Recognition and Artificial Intelligence, V7, P669, DOI 10.1142/S0218001493000339
   Chalapathy R, 2019, Arxiv, DOI [arXiv:1901.03407, 10.48550/ARXIV.1901.03407, DOI 10.48550/ARXIV.1901.03407]
   Chopra S, 2005, PROC CVPR IEEE, P539, DOI 10.1109/cvpr.2005.202
   Chung JY, 2014, Arxiv, DOI arXiv:1412.3555
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   Dey S, 2017, Arxiv, DOI [arXiv:1707.02131, 10.48550/arXiv.1707.02131, DOI 10.48550/ARXIV.1707.02131]
   Du M, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1285, DOI 10.1145/3133956.3134015
   Esteves G, 2020, AUTOMAT SOFTW ENG, V27, P369, DOI 10.1007/s10515-020-00277-4
   Guo Q, 2017, IEEE I CONF COMP VIS, P1781, DOI 10.1109/ICCV.2017.196
   He PJ, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS 2017), P33, DOI 10.1109/ICWS.2017.13
   He S., 2020, to appear
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Jhuang HH, 2013, IEEE I CONF COMP VIS, P3192, DOI 10.1109/ICCV.2013.396
   LeCun Y., 2015, Lenet-5, convolutional neural networks
   LeCun Y, 2015, NATURE, V521, P436, DOI 10.1038/nature14539
   Leppanen Marko, 2015, IEEE Software, V32, P64, DOI 10.1109/MS.2015.50
   Li LS, 2018, J MACH LEARN RES, V18
   Lin QW, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P102, DOI 10.1145/2889160.2889232
   Liu W, 2016, LECT NOTES COMPUT SC, V9905, P21, DOI 10.1007/978-3-319-46448-0_2
   Lou J.G., 2010, USENIX ANN TECHN C, P1
   Lu SY, 2018, 2018 16TH IEEE INT CONF ON DEPENDABLE, AUTONOM AND SECURE COMP, 16TH IEEE INT CONF ON PERVAS INTELLIGENCE AND COMP, 4TH IEEE INT CONF ON BIG DATA INTELLIGENCE AND COMP, 3RD IEEE CYBER SCI AND TECHNOL CONGRESS (DASC/PICOM/DATACOM/CYBERSCITECH), P151, DOI 10.1109/DASC/PiCom/DataCom/CyberSciTec.2018.00037
   McInnes L, 2020, Arxiv, DOI [arXiv:1802.03426, DOI 10.48550/ARXIV.1802.03426, 10.21105/joss.00861]
   Meng WB, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4739
   Mikolov T., 2013, ADV NEURAL INFORM PR, V26, P3111, DOI DOI 10.5555/2999792.2999959
   Nedelkoski S, 2020, Arxiv, DOI arXiv:2008.09340
   Oliner A, 2007, I C DEPEND SYS NETWO, P575, DOI 10.1109/DSN.2007.103
   Redmon J, 2016, PROC CVPR IEEE, P779, DOI 10.1109/CVPR.2016.91
   Sun D., 2019, 2019 International Joint Conference on Neural Networks (IJCNN), P1
   van der Maaten L, 2008, J MACH LEARN RES, V9, P2579
   Velez M, 2020, AUTOMAT SOFTW ENG, V27, P265, DOI 10.1007/s10515-020-00273-8
   Wang WH, 2015, LECT NOTES COMPUT SC, V8944, P812, DOI 10.1007/978-3-319-15554-8_73
   Wilkins B, 2020, Arxiv, DOI arXiv:2005.10211
   Wu YH, 2016, Arxiv, DOI [arXiv:1609.08144, DOI 10.48550/ARXIV.1609.08144]
   Xia X, 2015, AUTOMAT SOFTW ENG, V22, P75, DOI 10.1007/s10515-014-0162-2
   Xu W, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P117
   Yu X, 2016, ACM SIGPLAN NOTICES, V51, P489, DOI 10.1145/2954679.2872407
   Yunhua Zhang, 2018, Computer Vision - ECCV 2018. 15th European Conference. Proceedings: Lecture Notes in Computer Science (LNCS 11213), P355, DOI 10.1007/978-3-030-01240-3_22
   Zhang X, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P807, DOI 10.1145/3338906.3338931
   Zhu JM, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P121, DOI 10.1109/ICSE-SEIP.2019.00021
NR 46
TC 3
Z9 3
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 61
DI 10.1007/s10515-022-00365-7
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5H4KO
UT WOS:000867649600001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Abid, C
   Alizadeh, V
   Kessentini, M
   Dhaouadi, M
   Kazman, R
AF Abid, Chaima
   Alizadeh, Vahid
   Kessentini, Marouane
   Dhaouadi, Mouna
   Kazman, Rick
TI Prioritizing refactorings for security-critical code
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Refactoring; Security; Recommendations
AB It is vitally important to fix quality issues in security-critical code as they may be sources of vulnerabilities in the future. These quality issues may increase the attack surface if they are not quickly refactored. In this paper, we use the history of vulnerabilities and security bug reports along with a set of keywords to automatically identify a project's security-critical files based on its source code, bug reports, pull-request descriptions and commit messages. After identifying these security-related files, we estimate their risks using static analysis to check their coupling with other project components. Then, our approach recommends refactorings to prioritize fixing quality issues in these security-critical files to improve quality attributes and remove identified code smells. To find a trade-off between the quality issues and security-critical files, we adopted a multi-objective search strategy. We evaluated our approach on six open source projects and one industrial system to check the correctness and relevance of the refactorings targeting security critical code. The results of our survey with practitioners supports our hypothesis that quality and security need to be considered together to provide relevant refactoring recommendations.
C1 [Abid, Chaima; Alizadeh, Vahid; Kessentini, Marouane; Dhaouadi, Mouna] Univ Michigan Dearborn, Dearborn, MI 48128 USA.
   [Kazman, Rick] Univ Hawaii, Honolulu, HI 96822 USA.
C3 University of Michigan System; University of Michigan Dearborn;
   University of Hawaii System
RP Kessentini, M (corresponding author), Univ Michigan Dearborn, Dearborn, MI 48128 USA.
EM cabid@umich.edu; alizadeh@umich.edu; marouane@umich.edu;
   mounad@umich.edu; kazman@hawaii.edu
RI Alizadeh, Vahid/S-2154-2018
OI Alizadeh, Vahid/0000-0002-5030-9036
CR Abid C., IEEE T SOFTW ENG
   Agrawal A., 2014, PENSEE, V76, P161
   Agrawal A., 2012, SOFTW ENG, V2, P60
   Alizadeh V, 2020, IEEE T SOFTWARE ENG, V46, P932, DOI 10.1109/TSE.2018.2872711
   Alizadeh V, 2018, IEEE INT CONF AUTOM, P464, DOI [10.1145/3238147.3238217, 10.114513238147.3238217]
   Alshammari Bandar, 2010, Proceedings of the 21st Australian Software Engineering Conference (ASWEC 2010), P55, DOI 10.1109/ASWEC.2010.34
   Alshammari B, 2010, ASIA PAC SOFWR ENG, P186, DOI 10.1109/APSEC.2010.30
   Alshammari B, 2009, INT CONF QUAL SOFTW, P11, DOI 10.1109/QSIC.2009.11
   [Anonymous], 2021, CVE VULNERABILITY DA
   [Anonymous], 2009, CWE 398 INDICATOR PO
   [Anonymous], 2018, REFACTORING IMPROVIN
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Bouillon P, 2008, LECT NOTES BUS INF P, V11, P41
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Chowdhury I., 2008, Proceedings of the fourth international workshop on Software engineering for secure systems, P57, DOI DOI 10.1145/1370905.1370913
   Chowdhury I, 2011, J SYST ARCHITECT, V57, P294, DOI 10.1016/j.sysarc.2010.06.003
   Cinnéide MO, 2012, INT SYMP EMP SOFTWAR, P49, DOI 10.1145/2372251.2372260
   Cusumano MA, 2004, COMMUN ACM, V47, P25
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Fokaefs M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1037, DOI 10.1145/1985793.1985989
   Ghaith Shadi, 2012, Search Based Software Engineering. Proceedings of the 4th International Symposium (SSBSE 2012), P121, DOI 10.1007/978-3-642-33119-0_10
   Grothoff C, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286823
   Haldar V, 2005, 21st Annual Computer Security Applications Conference, Proceedings, P274
   Han J., 1998, P 1998 AUSTR WORKSH, P83
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1106
   Huang KM, 2020, IEEE T SERV COMPUT, V13, P144, DOI 10.1109/TSC.2016.2646687
   Jensen und A.C., 2010, Proceedings of the 12th Annual Conference on Genetic and Evolutionary Computation. GECCO '10, P1341
   Kessentini M, 2011, CONF PROC INT SYMP C, P81, DOI 10.1109/ICPC.2011.22
   Kessentini Marouane., 2010, Proceedings of the Second InternationalWorkshop on Behaviour Modelling: Foundation and Applications, P2
   Kessentini W, 2018, 21ST ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2018), P101, DOI 10.1145/3239372.3239375
   Kobori K, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P83, DOI 10.1109/SANER.2015.7081818
   Krsul I.V., 1998, SOFTWARE VULNERABILI
   Lee S, 2011, SOFTWARE PRACT EXPER, V41, P521, DOI 10.1002/spe.1031
   Lin Y, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P535, DOI 10.1145/2950290.2950317
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Mansoor U, 2017, SOFTWARE QUAL J, V25, P473, DOI 10.1007/s11219-015-9284-4
   Maruyama K., 2011, P 4 WORKSHOP REFACTO, P22, DOI [DOI 10.1145/1984732.1984737, 1145/1984732.1984737]
   Mkaouer M. W., 2014, P 29 ACM IEEE INT C, P331, DOI [DOI 10.1145/2642937.2642965, 10.1145/2642937.2642965. u r l, DOI 10.1145/2642937.2642965.URL]
   Mkaouer MW, 2017, EMPIR SOFTW ENG, V22, P894, DOI 10.1007/s10664-016-9426-8
   Mkaouer MW, 2016, EMPIR SOFTW ENG, V21, P2503, DOI 10.1007/s10664-015-9414-4
   Mkaouer MW, 2014, LECT NOTES COMPUT SC, V8636, P168
   Mkaouer W, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2729974
   Muller A., 2010, 8 INT C PRINC PRACT, P1
   Mumtaz H, 2018, INFORM SOFTWARE TECH, V96, P112, DOI 10.1016/j.infsof.2017.11.010
   Nikiforakis Nick, 2012, P 2012 ACM C COMP CO, P736, DOI DOI 10.1145/2382196.2382274
   O'Keeffe M, 2008, J SYST SOFTWARE, V81, P502, DOI 10.1016/j.jss.2007.06.003
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Ouni A, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1843
   Ouni A, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2932631
   Ouni A, 2015, J SYST SOFTWARE, V105, P18, DOI 10.1016/j.jss.2015.03.040
   Ouni A, 2013, GECCO'13: PROCEEDINGS OF THE 2013 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1461
   Ouni A, 2013, EUR CON SFTWR MTNCE, P221, DOI 10.1109/CSMR.2013.31
   Palomba F, 2014, ADV COMPUT, V95, P201, DOI 10.1016/B978-0-12-800160-8.00004-8
   Scandariato R, 2014, IEEE T SOFTWARE ENG, V40, P993, DOI 10.1109/TSE.2014.2340398
   Seng O, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1909
   Shatnawi R., 2011, Internat. J. Software Eng. Applicat., P127
   Srivastava AK, 2018, J COMPUT SCI-NETH, V25, P388, DOI 10.1016/j.jocs.2017.08.003
   Steimann F, 2009, LECT NOTES COMPUT SC, V5653, P419, DOI 10.1007/978-3-642-03013-0_19
   Tang YM, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P27, DOI 10.1109/QRS.2015.15
   Tsantalis N, 2011, EUR CON SFTWR MTNCE, P25, DOI 10.1109/CSMR.2011.7
   Vidal S, 2016, COMPUT LANG SYST STR, V46, P1, DOI 10.1016/j.cl.2016.04.001
   Vidal SA, 2016, AUTOMAT SOFTW ENG, V23, P501, DOI 10.1007/s10515-014-0175-x
   Vidal SA, 2016, EMPIR SOFTW ENG, V21, P483, DOI 10.1007/s10664-015-9365-9
   Walden J, 2014, PROC INT SYMP SOFTW, P23, DOI 10.1109/ISSRE.2014.32
   Wang WT, 2019, J IND INF INTEGR, V14, P34, DOI 10.1016/j.jii.2018.11.001
   Wright J.L., 2013, INFORM SECURITY TECH, V17, P173, DOI DOI 10.1016/J.ISTR.2013.02.002
   Yu L., 2009, INT C COMP INT SOFTW, P1, DOI [DOI 10.1109/CISE.2009.5362721, 10.1109/CISE.2009.5362721]
   Zazworka N., 2011, P 2 WORKSH MAN TECHN, P39
   Zoller C, 2012, PROCEEDINGS OF THE 2012 JOINT CONFERENCE OF THE 22ND INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2012 SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA 2012), P43, DOI 10.1109/IWSM-MENSURA.2012.15
NR 71
TC 2
Z9 3
U1 2
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 4
DI 10.1007/s10515-021-00281-2
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SE0ZY
UT WOS:000651805600001
DA 2024-07-18
ER

PT J
AU Bhatti, BM
   Mubarak, S
   Nagalingam, S
AF Bhatti, Baber Majid
   Mubarak, Sameera
   Nagalingam, Sev
TI Information security implications of using NLP in IT outsourcing: a
   Diffusion of Innovation theory perspective
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Information security risk (ISR); Information security risk management
   (ISRM); Information technology outsourcing (ITO); Natural language
   processing (NLP)
ID RISKS; TECHNOLOGY; MANAGEMENT; FRAMEWORK; SUCCESS; IMPACT
AB Information technology outsourcing (ITO) is a USD multi-trillion industry. There is growing competition among ITO service providers to improve their service deliveries. Natural language processing (NLP) is a technique, which can be leveraged to gain a competitive advantage in the ITO industry. This paper explores the information security implications of using NLP in ITO. First, it explores the use of NLP to enhance information security risk management (ISRM) in ITO. Then, it delves into the information security risks (ISRs) that may arise from the use of NLP in ITO. Finally, it proposes possible ISRM approaches to address those ISRs in ITO from the use of NLP. The study follows a qualitative approach using the case study method. Nine participants from three organisations (an ITO client, service provider and sub-contractor) engaged in an ITO relationship in the ICT industry were interviewed through a semi-structured questionnaire. The research findings were verified through a focus group. Case study scenarios are provided for a clear understanding of the findings. To the best of our knowledge, it is the first study to investigate the information security implications of the use of NLP in ITO.
C1 [Bhatti, Baber Majid; Mubarak, Sameera] Univ South Australia, UniSA STEM, Adelaide, SA, Australia.
   [Nagalingam, Sev] Univ South Australia, UniSA Business, Adelaide, SA, Australia.
C3 University of South Australia; University of South Australia
RP Bhatti, BM (corresponding author), Univ South Australia, UniSA STEM, Adelaide, SA, Australia.
EM baber.bhatti@mymail.unisa.edu.au; sameera.mubarak@unisa.edu.au;
   sev.nagalingam@unisa.edu.au
RI Bhatti, Baber Majid/H-9567-2016; Nagalingam, Sev/A-4921-2008
OI Bhatti, Baber Majid/0000-0001-5835-5507; Nagalingam,
   Sev/0000-0001-6919-9474
CR Abdel-Basset M, 2019, FUTURE GENER COMP SY, V90, P489, DOI 10.1016/j.future.2018.08.035
   Al-Hawari F., 2019, IN PRESS, V17
   Alshemali B, 2020, KNOWL-BASED SYST, V191, DOI 10.1016/j.knosys.2019.105210
   [Anonymous], 2003, Diffusion of Innovations
   [Anonymous], 2017, INT C INTELLIGENT SY
   Bhatti Baber Majid, 2020, Neural Information Processing. 27th International Conference, ICONIP 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12533), P487, DOI 10.1007/978-3-030-63833-7_41
   Bhatti B.M., 2017, AUSTR C INF SYST ACI
   Braun V., 2012, APA HDB RES METHODS, P57, DOI [https://doi.org/10.1037/13620-004, 10.1007/978-981-10-2779-6_103-1, 10.1037/13620-004]
   Braun V, 2013, Success Qual Res, V1st
   Chambers N., 2018, Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), V1, P1626
   Chou DC, 2009, COMPUT STAND INTER, V31, P1036, DOI 10.1016/j.csi.2008.09.032
   Chowdhary K.R., 2020, Fundamentals of Artificial Intelligence, P603, DOI [DOI 10.1007/978-81-322-3972-719, 10.1007/978-81-322-3972-719, DOI 10.1007/978-81-322-3972-7_19]
   Creswell J.W., 2018, RES SESIGN QUALITATI, V5h
   Delen GPAJ, 2019, J SYST SOFTWARE, V156, P113, DOI 10.1016/j.jss.2019.06.074
   Dhillon G, 2017, INFORM MANAGE-AMSTER, V54, P452, DOI 10.1016/j.im.2016.10.002
   Ensslin L, 2020, J GLOB INF MANAG, V28, P123, DOI 10.4018/JGIM.2020070107
   Feyisetan O, 2020, PROCEEDINGS OF THE 13TH INTERNATIONAL CONFERENCE ON WEB SEARCH AND DATA MINING (WSDM '20), P903, DOI 10.1145/3336191.3371881
   González R, 2016, J GLOB INF TECH MAN, V19, P223, DOI 10.1080/1097198X.2016.1246932
   Guion LA., 2011, EDIS 2011, DOI DOI 10.32473/EDIS-FY394-2011
   Hanafizadeh P, 2017, J GLOB OPER STRATEG, V10, P67, DOI 10.1108/JGOSS-05-2016-0016
   ISO, 2014, 375002014 ISO
   Janssens D, 2019, NATURAL LANGUAGE PRO
   Jorgensen Claus, 2010, Strategic Outsourcing, V3, P192, DOI 10.1108/17538291011093794
   Kabiraj T, 2016, INT REV ECON FINANC, V44, P281, DOI 10.1016/j.iref.2016.02.016
   Kang Y, 2020, J MANAG ANAL, V7, P139, DOI 10.1080/23270012.2020.1756939
   Kvale S., 2008, Doing interviews, DOI DOI 10.4135/9781849208963
   Lin YM, 2010, J INF COMMUN TECHNOL, V9, P87
   Lioliou E., 2019, GLOBAL OUTSOURCING D, P1
   Martinez-Noya A, 2012, J INT MANAG, V18, P18, DOI 10.1016/j.intman.2011.06.004
   Mason M., 2010, Forum: Qualitative Social Research, V11, DOI DOI 10.17169/FQS-11.3.1428
   Mathews Sherin Mary, 2019, Intelligent Computing. Proceedings of the 2019 Computing Conference. Advances in Intelligent Systems and Computing (AISC 998), P1269, DOI 10.1007/978-3-030-22868-2_90
   Meng-Meng Wang, 2019, Journal of Enterprise Information Management, V32, P325, DOI 10.1108/JEIM-07-2018-0167
   Moiseev Alexander, 2020, OUTSOURCING CREATES
   Moradlou H, 2022, PROD PLAN CONTROL, V33, P1319, DOI 10.1080/09537287.2020.1863500
   Myers M. D., 2007, Information and Organization, V17, P2, DOI 10.1016/j.infoandorg.2006.11.001
   Nassimbeni G, 2012, IND MANAGE DATA SYST, V112, P405, DOI 10.1108/02635571211210059
   Pitropakis N, 2019, COMPUT SCI REV, V34, DOI 10.1016/j.cosrev.2019.100199
   Plotkin D., 2018, GLOBAL OUTSOURCING S
   Premuroso RF, 2012, INT J ACCOUNT INF SY, V13, P382, DOI 10.1016/j.accinf.2012.05.001
   Qiu SL, 2019, APPL SCI-BASEL, V9, DOI 10.3390/app9050909
   Quaglietta J. D., 2020, CORONAVIRUS IMPACT S
   Russell RL, 2018, 2018 17TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P757, DOI 10.1109/ICMLA.2018.00120
   Sadat MN, 2019, BMC MED INFORM DECIS, V19, DOI 10.1186/s12911-019-0867-z
   Sakolnakom T.P. Na., 2011, INT J MANAGEMENT INF, V15, P11, DOI DOI 10.19030/IJMIS.V15I3.4638
   Schneider S, 2016, J INF TECHNOL-UK, V31, P1, DOI 10.1057/jit.2014.25
   Shropshire J, 2018, P 13 PREICIS WORKSH
   Sloniec J, 2018, FOUND MANAGE, V10, P113, DOI 10.2478/fman-2018-0010
   Snowden J., 2016, HFS MARKET INDEX IT
   Tarsh S., 2016, GLOBAL OUTSOURCING S
   Truong TC, 2020, SYMMETRY-BASEL, V12, DOI 10.3390/sym12030410
   Tomiura, 2020, EC TIME COVID 19, P59
   Wang CJ, 2020, JAMA-J AM MED ASSOC, V323, P1341, DOI 10.1001/jama.2020.3151
   WILLIAMSON OE, 1991, ADMIN SCI QUART, V36, P269, DOI 10.2307/2393356
   Winter K, 2018, LECT NOTES COMPUT SC, V11229, P261, DOI 10.1007/978-3-030-02610-3_15
   Wulf F, 2019, CONF BUS INFORM, P258, DOI 10.1109/CBI.2019.00036
   Yin R. K., 2009, CASE STUDY RES DESIG, V4th ed.
   Youssef AE, 2019, INT J ADV COMPUT SC, V10, P186
   Yuan Y, 2020, INT J PROD ECON, V219, P54, DOI 10.1016/j.ijpe.2019.04.038
   Zalnieriute M, 2021, CAMB LAW J, V80, P8
   Zhang N, 2019, P IEEE S SECUR PRIV, P1381, DOI 10.1109/SP.2019.00016
NR 60
TC 10
Z9 10
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 12
DI 10.1007/s10515-021-00286-x
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TJ1MB
UT WOS:000673253700001
PM 38624871
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Li, ZQ
   Jing, XY
   Zhu, XK
   Zhang, HY
   Xu, BW
   Ying, S
AF Li, Zhiqiang
   Jing, Xiao-Yuan
   Zhu, Xiaoke
   Zhang, Hongyu
   Xu, Baowen
   Ying, Shi
TI Heterogeneous defect prediction with two-stage ensemble learning
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Heterogeneous defect prediction; Two-stage ensemble learning; Linear
   inseparability; Multiple kernel learning; Class imbalance; Data
   sampling; Domain adaptation
ID STATIC CODE ATTRIBUTES; CLASSIFICATION; MACHINE; MODELS
AB Heterogeneous defect prediction (HDP) refers to predicting defect-prone software modules in one project (target) using heterogeneous data collected from other projects (source). Recently, several HDP methods have been proposed. However, these methods do not sufficiently incorporate the two characteristics of the defect data: (1) data could be linear inseparable, and (2) data could be highly imbalanced. These two data characteristics make it challenging to build an effective HDP model. In this paper, we propose a novel Two-Stage Ensemble Learning (TSEL) approach to HDP, which contains two stages: ensemble multi-kernel domain adaptation (EMDA) stage and ensemble data sampling (EDS) stage. In the EMDA stage, we develop an Ensemble Multiple Kernel Correlation Alignment (EMKCA) predictor, which combines the advantage of multiple kernel learning and domain adaptation techniques. In the EDS stage, we employ RESample with replacement (RES) technique to learn multiple different EMKCA predictors and use average ensemble to combine them together. These two stages create an ensemble of defect predictors. Extensive experiments on 30 public projects show that the proposed TSEL approach outperforms a range of competing methods. The improvement is 20.14-33.92% in AUC, 36.05-54.78% in f-measure, and 5.48-19.93% in balance, respectively.
C1 [Li, Zhiqiang] Shaanxi Normal Univ, Sch Comp Sci, Xian 710119, Shaanxi, Peoples R China.
   [Li, Zhiqiang; Jing, Xiao-Yuan; Ying, Shi] Wuhan Univ, Sch Comp Sci, Wuhan 430072, Hubei, Peoples R China.
   [Jing, Xiao-Yuan] Nanjing Univ Posts & Telecommun, Sch Automat, Nanjing 210023, Jiangsu, Peoples R China.
   [Zhu, Xiaoke] Henan Univ, Sch Comp & Informat Engn, Kaifeng 475001, Peoples R China.
   [Zhang, Hongyu] Univ Newcastle, Sch Elect Engn & Comp, Callaghan, NSW 2308, Australia.
   [Xu, Baowen] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210093, Jiangsu, Peoples R China.
C3 Shaanxi Normal University; Wuhan University; Nanjing University of Posts
   & Telecommunications; Henan University; University of Newcastle; Nanjing
   University
RP Jing, XY (corresponding author), Wuhan Univ, Sch Comp Sci, Wuhan 430072, Hubei, Peoples R China.; Jing, XY (corresponding author), Nanjing Univ Posts & Telecommun, Sch Automat, Nanjing 210023, Jiangsu, Peoples R China.; Zhu, XK (corresponding author), Henan Univ, Sch Comp & Informat Engn, Kaifeng 475001, Peoples R China.
EM lzq115@163.com; jingxy_2000@126.com; henuzxk@163.com;
   hongyu.zhang@newcastle.edu.au; bwxu@nju.edu.cn; yingshi@whu.edu.cn
RI zhang, hongyu/ABC-3702-2021; Xu, Baowen/IXW-4882-2023; He,
   Chen/JLM-5059-2023
OI zhang, hongyu/0000-0002-3063-9425; Xu, Baowen/0000-0001-7743-1296; 
FU NSFC-Key Project of General Technology Fundamental Research United Fund
   [U1736211]; National Key Research and Development Program of China
   [2017YFB0202001]; National Nature Science Foundation of China [61672208,
   41571417]; Fundamental Research Funds for the Central Universities
   [GK201903086]; Natural Science Foundation Key Project for Innovation
   Group of Hubei Province [2018CFA024]; Science and Technique Development
   Program of Henan [172102210186, 182102311066]; Higher Education
   Institution Key Research Projects of Henan Province [19A520001]; Medical
   Education Research Project of Henan [Wjlx2016095]; Scientific Research
   Staring Foundation of SNNU [1110011006]
FX The authors would like to thank the editors and anonymous reviewers for
   their constructive comments and suggestions. This work was supported by
   the NSFC-Key Project of General Technology Fundamental Research United
   Fund under Grant No. U1736211, the National Key Research and Development
   Program of China under Grant No. 2017YFB0202001, the National Nature
   Science Foundation of China under Grant Nos. 61672208 and 41571417, the
   Fundamental Research Funds for the Central Universities No. GK201903086,
   the Natural Science Foundation Key Project for Innovation Group of Hubei
   Province under Grant No. 2018CFA024, the Science and Technique
   Development Program of Henan under Grant Nos. 172102210186 and
   182102311066, Higher Education Institution Key Research Projects of
   Henan Province, No. 19A520001, the Medical Education Research Project of
   Henan No. Wjlx2016095, and the Scientific Research Staring Foundation of
   SNNU No. 1110011006.
CR Al Noor S, 2016, IEEE INT CONF CLOUD, P172, DOI [10.1109/CLOUD.2016.30, 10.1109/CLOUD.2016.0032]
   [Anonymous], 2014, ARXIV PREPRINT ARXIV
   [Anonymous], 2010, KERNEL METHODS NONLI
   [Anonymous], PROC INT CONF SOFTW
   [Anonymous], PROC INT CONF SOFTW
   [Anonymous], AUTOMAT SOFTW ENG
   [Anonymous], 2018, IEEE T SOFTWARE ENG, DOI DOI 10.1109/TSE.2017.2724538
   [Anonymous], 2018, IEEE T SOFTW ENG
   [Anonymous], 2012, P ACM SIGSOFT 20 INT
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Bin Y, 2017, INT SYMP EMP SOFTWAR, P354, DOI 10.1109/ESEM.2017.49
   Canfora G, 2015, SOFTW TEST VERIF REL, V25, P426, DOI 10.1002/stvr.1570
   Chen L, 2015, INFORM SOFTWARE TECH, V62, P67, DOI 10.1016/j.infsof.2015.01.014
   Cheng M., 2016, P 28 INT C SOFTW ENG, P171
   Cheung S.-C., 2011, P 19 ACM SIGSOFT S 1, P15
   Correia-Fagundes Catarina, 2013, Bocagiana (Funchal), P1
   Cruz AEC, 2009, INT SYMP EMP SOFTWAR, P461
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Fan RE, 2008, J MACH LEARN RES, V9, P1871
   Fu W, 2016, INFORM SOFTWARE TECH, V76, P135, DOI 10.1016/j.infsof.2016.04.017
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Gönen M, 2011, J MACH LEARN RES, V12, P2211
   Haibo He, 2009, IEEE Transactions on Knowledge and Data Engineering, V21, P1263, DOI 10.1109/TKDE.2008.239
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   Herbold S., 2013, P 9 INT C PREDICTIVE, P1
   Herbold S, 2017, IEEE T SOFTWARE ENG, V43, P1091, DOI 10.1109/TSE.2017.2748129
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Jing XY, 2017, IEEE T SOFTWARE ENG, V43, P321, DOI 10.1109/TSE.2016.2597849
   Jing XY, 2017, IEEE T IMAGE PROCESS, V26, P1363, DOI 10.1109/TIP.2017.2651364
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P414, DOI 10.1145/2568225.2568320
   Jing XY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P496, DOI 10.1145/2786805.2786813
   Jing XY, 2004, IEEE T SYST MAN CY B, V34, P2405, DOI 10.1109/TSMCB.2004.837586
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Kamei Y, 2016, EMPIR SOFTW ENG, V21, P2072, DOI 10.1007/s10664-015-9400-x
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Kim S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P481, DOI 10.1145/1985793.1985859
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li M, 2012, AUTOMAT SOFTW ENG, V19, P201, DOI 10.1007/s10515-011-0092-1
   Li ZQ, 2019, IEEE T SOFTWARE ENG, V45, P391, DOI 10.1109/TSE.2017.2780222
   Li ZQ, 2018, IET SOFTW, V12, P161, DOI 10.1049/iet-sen.2017.0148
   Li ZQ, 2018, AUTOMAT SOFTW ENG, V25, P201, DOI 10.1007/s10515-017-0220-7
   Li ZQ, 2018, SOFTW TEST VERIF REL, V28, DOI 10.1002/stvr.1658
   Li ZQ, 2017, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2017.19
   Liu W, 2012, PROC CVPR IEEE, P2074, DOI 10.1109/CVPR.2012.6247912
   Liu X., 2013, Ensemble Methods for Class Imbalance Learning
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Malhotra R, 2017, EMPIR SOFTW ENG, V22, P2806, DOI 10.1007/s10664-016-9488-7
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Nam J., 2017, IEEE Transactions on Software Engineering, V44, P874, DOI 10.1109/TSE.2017.2720603
   Nam J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P508, DOI 10.1145/2786805.2786814
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Pan SJ, 2010, IEEE T KNOWL DATA EN, V22, P1345, DOI 10.1109/TKDE.2009.191
   Peters F, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P801, DOI 10.1109/ICSE.2015.92
   Peters F, 2013, IEEE T SOFTWARE ENG, V39, P1054, DOI 10.1109/TSE.2013.6
   Ryu D, 2016, EMPIR SOFTW ENG, V21, P43, DOI 10.1007/s10664-014-9346-4
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Sun BC, 2016, AAAI CONF ARTIF INTE, P2058
   Tan M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P99, DOI 10.1109/ICSE.2015.139
   Tantithamthavorn C, 2017, IEEE T SOFTWARE ENG, V43, P1, DOI 10.1109/TSE.2016.2584050
   Tantithamthavorn C, 2016, IEEE T SOFTWARE ENG, V42, P1092, DOI 10.1109/TSE.2016.2553030
   Theodoridis S, 2009, PATTERN RECOGNITION, 4RTH EDITION, P1
   Turhan B, 2013, INFORM SOFTWARE TECH, V55, P1101, DOI 10.1016/j.infsof.2012.10.003
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wang TJ, 2016, AUTOMAT SOFTW ENG, V23, P569, DOI 10.1007/s10515-015-0179-1
   Weiss Karl, 2016, Journal of Big Data, V3, DOI 10.1186/s40537-016-0043-6
   Weston J., 2003, Journal of Machine Learning Research, V3, P1439, DOI 10.1162/153244303322753751
   Xia X, 2016, IEEE T SOFTWARE ENG, V42, P977, DOI 10.1109/TSE.2016.2543218
   Yang XL, 2017, INFORM SOFTWARE TECH, V87, P206, DOI 10.1016/j.infsof.2017.03.007
   Yang XL, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P17, DOI 10.1109/QRS.2015.14
   Yeh YR, 2014, IEEE T IMAGE PROCESS, V23, P2009, DOI 10.1109/TIP.2014.2310992
   Yu Q, 2017, J SYST SOFTWARE, V132, P366, DOI 10.1016/j.jss.2017.06.070
   Zhang F, 2016, EMPIR SOFTW ENG, V21, P2107, DOI 10.1007/s10664-015-9396-2
   Zhang H., 2010, PROMISE, P1
   Zhang HY, 2007, IEEE T SOFTWARE ENG, V33, P635, DOI 10.1109/TSE.2007.70706
   Zhang HY, 2007, 14TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P230, DOI 10.1109/ASPEC.2007.64
   Zhang HY, 2009, PROC IEEE INT CONF S, P274, DOI 10.1109/ICSM.2009.5306304
   Zhang ZW, 2017, AUTOMAT SOFTW ENG, V24, P47, DOI 10.1007/s10515-016-0194-x
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 80
TC 40
Z9 44
U1 0
U2 18
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2019
VL 26
IS 3
SI SI
BP 599
EP 651
DI 10.1007/s10515-019-00259-1
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IS5YT
UT WOS:000482229800004
DA 2024-07-18
ER

PT J
AU Liu, J
   Zhou, PY
   Yang, ZJ
   Liu, X
   Grundy, J
AF Liu, Jin
   Zhou, Pingyi
   Yang, Zijiang
   Liu, Xiao
   Grundy, John
TI FastTagRec: fast tag recommendation for software information sites
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software information site; Software object; Tag recommendation
AB Software information sites such as StackOverflow and Freeecode enable information sharing and communication for developers around the world. To facilitate correct classification and efficient search, developers need to provide tags for their postings. However, tagging is inherently an uncoordinated process that depends not only on developers' understanding of their own postings but also on other factors, including developers' English skills and knowledge about existing postings. As a result, developers keep creating new tags even though existing tags are sufficient. The net effect is an ever increasing number of tags with severe redundancy along with more postings over time. Any algorithms based on tags become less efficient and accurate. In this paper we propose FastTagRec, an automated scalable tag recommendation method using neural network-based classification. By learning existing postings and their tags from existing information, FastTagRec is able to very accurately infer tags for new postings. We have implemented a prototype tool and carried out experiments on ten software information sites. Our results show that FastTagRec is not only more accurate but also three orders of magnitude faster than the comparable state-of-the-art tool TagMulRec. In addition to empirical evaluation, we have also conducted an user study which successfully confirms the usefulness of of our approach.
C1 [Liu, Jin; Zhou, Pingyi] Wuhan Univ, Sch Comp Sci, State Key Lab Software Engn, Wuhan, Hubei, Peoples R China.
   [Liu, Jin] Chinese Acad Sci, Inst Informat Engn, Key Lab Network Assessment Technol, Beijing, Peoples R China.
   [Yang, Zijiang] Western Michigan Univ, Dept Comp Sci, Kalamazoo, MI 49008 USA.
   [Liu, Xiao] Deakin Univ, Sch Informat Technol, Melbourne, Vic, Australia.
   [Grundy, John] Monash Univ, Fac Informat Technol, Melbourne, Vic, Australia.
C3 Wuhan University; Chinese Academy of Sciences; Institute of Information
   Engineering, CAS; Western Michigan University; Deakin University; Monash
   University
RP Liu, J (corresponding author), Wuhan Univ, Sch Comp Sci, State Key Lab Software Engn, Wuhan, Hubei, Peoples R China.; Liu, J (corresponding author), Chinese Acad Sci, Inst Informat Engn, Key Lab Network Assessment Technol, Beijing, Peoples R China.
EM jinliu@whu.edu.cn; zhou_pinyi@whu.edu.cn; zijiang.yang@wmich.edu;
   xiao.liu@deakin.edu.au; john.grundy@monash.edu
RI Grundy, John/AAF-1716-2019; Liu, Xiao/AAG-1593-2020
OI Grundy, John/0000-0003-4928-7076; Liu, Xiao/0000-0001-8400-5754
FU National Key Research and Development Program of China [2017YFB1400602,
   2018YFB1003800]; National Natural Science Foundation of China [61572374,
   U163620068, 61472423]; Open Fund of Key Laboratory of Network Assessment
   Technology from CAS; Academic Team Building Plan for Young Scholars from
   Wuhan University [WHU2016012]
FX The authors would like to acknowledge the support provided by the
   National Key Research and Development Program of China (2017YFB1400602,
   2018YFB1003800), the National Natural Science Foundation of China
   (61572374, U163620068, 61472423), Open Fund of Key Laboratory of Network
   Assessment Technology from CAS, and Academic Team Building Plan for
   Young Scholars from Wuhan University (WHU2016012).
CR Al-Kofahi J.M., 2010, SOFTW MAINT ICSM 201, P1
   [Anonymous], 2008, P 17 INT C WORLD WID
   [Anonymous], 2006, COMPUT SCI, DOI DOI 10.4018/JDWM.2007070101
   [Anonymous], PROC INT CONF SOFTW
   Begel A., 2010, Proceedings of the FSE/SDP workshop on Future of software engineering research, P33, DOI DOI 10.1145/1882362.1882370
   Behley J, 2013, IEEE INT C INT ROBOT, P4195, DOI 10.1109/IROS.2013.6696957
   Beyer S, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P430, DOI [10.1109/MSR.2016.051, 10.1145/2901739.2901750]
   Beyer S, 2015, INT C PROGRAM COMPRE, P94, DOI 10.1109/ICPC.2015.18
   Bishop C. M., 2006, MACH LEARN, V128, P1
   Cai Li, 2011, P 20 ACM INT C INF K, P1321, DOI DOI 10.1145/2063576.2063768
   Fowkes J, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P254, DOI 10.1145/2950290.2950319
   Goodman J, 2001, INT CONF ACOUST SPEE, P561, DOI 10.1109/ICASSP.2001.940893
   Gu XD, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P631, DOI 10.1145/2950290.2950334
   Hindle A, 2016, EMPIR SOFTW ENG, V21, P368, DOI 10.1007/s10664-015-9387-3
   Hou DQ, 2013, PROC IEEE INT CONF S, P60, DOI 10.1109/ICSM.2013.17
   Jäschke R, 2007, LECT NOTES ARTIF INT, V4702, P506
   Macbeth G, 2011, UNIV PSYCHOL, V10, P545, DOI 10.11144/Javeriana.upsy10-2.cdcp
   Michaud HM, 2016, PROC IEEE INT CONF S, P290, DOI 10.1109/ICSME.2016.39
   Mikolov T., 2011, 2011 IEEE Workshop on Automatic Speech Recognition & Understanding (ASRU), P196, DOI 10.1109/ASRU.2011.6163930
   Mikolov T, 2013, ICLR WORKSHOP POSTER
   Rendle Steffen, 2010, P 3 ACM INT C WEB SE, P81, DOI DOI 10.1145/1718487.1718498
   Song QB, 2011, IEEE T SOFTWARE ENG, V37, P356, DOI 10.1109/TSE.2010.90
   Storey MA., 2010, P FSE SDP WORKSH FUT, P359, DOI DOI 10.1145/1882362.1882435
   Thung F., 2014, P 29 ACM IEEE INT C, P871
   Thung F, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P600, DOI 10.1109/ICSM.2012.6405331
   Treude C, 2016, PROC INT CONF SOFTW, P392, DOI 10.1145/2884781.2884800
   Treude C, 2009, PROC INT CONF SOFTW, P12, DOI 10.1109/ICSE.2009.5070504
   Wang H., 2013, P 23 INT JOINT C ART, P2719
   Wang QF, 2013, PROCEEDINGS OF THE 22ND ACM INTERNATIONAL CONFERENCE ON INFORMATION & KNOWLEDGE MANAGEMENT (CIKM'13), P1789, DOI 10.1145/2505515.2505649
   Wang S., 2012, Baselines and bigrams: Simple, good sentiment and topic classification, P90
   Wang SW, 2014, PROC IEEE INT CONF S, P291, DOI 10.1109/ICSME.2014.51
   Wang SW, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P604, DOI 10.1109/ICSM.2012.6405332
   White M, 2016, IEEE INT CONF AUTOM, P87, DOI 10.1145/2970276.2970326
   White M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P334, DOI 10.1109/MSR.2015.38
   Xia X, 2017, IEEE T SOFTWARE ENG, V43, P272, DOI 10.1109/TSE.2016.2576454
   Xia X, 2016, IEEE T RELIAB, V65, P1810, DOI 10.1109/TR.2016.2588139
   Xia X, 2016, IEEE T SOFTWARE ENG, V42, P977, DOI 10.1109/TSE.2016.2543218
   Xia X, 2015, J SOFTW-EVOL PROC, V27, P195, DOI 10.1002/smr.1706
   Xia X, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P134, DOI 10.1109/CSMR-WCRE.2014.6747163
   Xia X, 2013, IEEE WORK CONF MIN S, P287, DOI 10.1109/MSR.2013.6624040
   Xu BW, 2016, IEEE INT CONF AUTOM, P51, DOI 10.1145/2970276.2970357
   Yang D, 2014, WWW'14 COMPANION: PROCEEDINGS OF THE 23RD INTERNATIONAL CONFERENCE ON WORLD WIDE WEB, P407, DOI 10.1145/2567948.2577285
   Yang DQ, 2015, LECT NOTES COMPUT SC, V9049, P353, DOI 10.1007/978-3-319-18120-2_21
   Yang LX, 2013, INK WORKS OPTIC WIRE, P99, DOI 10.1109/IWOW.2013.6777786
   Yin D., 2010, Proceedings of the 16th ACM SIGKDD international conference on Knowledge discovery and data mining, P959
   Zangerle E, 2011, LECT NOTES COMPUT SC, V6984, P113, DOI 10.1007/978-3-642-24704-0_16
   Zhang ML, 2007, PATTERN RECOGN, V40, P2038, DOI 10.1016/j.patcog.2006.12.019
   Zhao Z, 2015, IEEE T KNOWL DATA EN, V27, P993, DOI 10.1109/TKDE.2014.2356461
   Zhou P, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SIGNAL PROCESSING, COMMUNICATIONS AND COMPUTING (ICSPCC)
   Zimmermann T, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P531, DOI 10.1145/1368088.1368161
NR 50
TC 26
Z9 27
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2018
VL 25
IS 4
SI SI
BP 675
EP 701
DI 10.1007/s10515-018-0239-4
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW9YB
UT WOS:000447363400001
DA 2024-07-18
ER

PT J
AU Narasimhan, K
   Reichenbach, C
   Lawall, J
AF Narasimhan, Krishna
   Reichenbach, Christoph
   Lawall, Julia
TI Cleaning up copy-paste clones with interactive merging
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Program analysis; Static analysis; Clone management; Source code
   analysis
AB Copy-paste-modify is a form of software reuse in which developers explicitly duplicate source code. This duplicated source code, amounting to a code clone, is adapted for a new purpose. Copy-paste-modify is popular among software developers, however, empirical evidence shows that it complicates software maintenance and increases the frequency of bugs. To allow developers to use copy-paste-modify without having to worry about these concerns, we propose an approach that automatically merges similar pieces of code by creating suitable abstractions. Because different kinds of abstractions may be beneficial in different contexts, our approach offers multiple abstraction mechanisms, which were selected based on a study of popular open-source repositories. To demonstrate the feasibility of our approach, we have designed and implemented a prototype merging tool for C++ and evaluated it on a number of code clones exhibiting some variation, i.e., near-miss clones, in popular Open Source packages. We observed that maintainers find our algorithmically created abstractions to be largely preferable to the existing duplicated code.
C1 [Narasimhan, Krishna] Itemis, Fassnachtstr 1, D-70378 Stuttgart, Germany.
   [Reichenbach, Christoph] Lund Univ, Dept Comp Sci, Lund, Sweden.
   [Lawall, Julia] Sorbonne Univ, Inria, LIP6, Paris, France.
C3 Lund University; Inria; Sorbonne Universite
RP Reichenbach, C (corresponding author), Lund Univ, Dept Comp Sci, Lund, Sweden.
EM knarasimhan@itemis.de; christoph.reichenbach@cs.lth.se;
   julia.lawall@lip6.fr
OI Reichenbach, Christoph/0000-0003-0608-7023
CR [Anonymous], 2009, P INT WORKSH SOFTW C
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Choi E., 2011, PROC 5 INT WORKSHOP, P7
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   de Wit M, 2009, PROC IEEE INT CONF S, P169, DOI 10.1109/ICSM.2009.5306336
   Duala-Ekoko E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P843, DOI 10.1145/1368088.1368218
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fraser G, 2012, IEEE T SOFTWARE ENG, V38, P278, DOI 10.1109/TSE.2011.93
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gazzillo P, 2012, ACM SIGPLAN NOTICES, V47, P323, DOI 10.1145/2345156.2254103
   Goto A, 2013, INT WORKS SOFTW CLON, P23, DOI 10.1109/IWSC.2013.6613038
   Nguyen HA, 2012, IEEE T SOFTWARE ENG, V38, P1008, DOI 10.1109/TSE.2011.90
   Hunt Andrew, 1999, The Pragmatic Programmer: From Journeyman to Master, V1
   Juergens E, 2009, PROC INT CONF SOFTW, P485, DOI 10.1109/ICSE.2009.5070547
   Kapser CJ, 2008, EMPIR SOFTW ENG, V13, P645, DOI 10.1007/s10664-008-9076-6
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Krishnan GP, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P104, DOI 10.1109/CSMR-WCRE.2014.6747160
   Lague B, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P314, DOI 10.1109/ICSM.1997.624264
   Medeiros Flavio, 2015, 29 EUR C OBJ OR PROG, P495
   Mondal M, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P114, DOI 10.1109/CSMR-WCRE.2014.6747161
   Narasimhan K, 2015, IEEE INT CONF AUTOM, P630, DOI 10.1109/ASE.2015.39
   Negara S, 2012, LECT NOTES COMPUT SC, V7313, P79, DOI 10.1007/978-3-642-31057-7_5
   Pawlik M, 2011, P VLDB ENDOWMENT, V5
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Reichenbach C, 2009, LECT NOTES COMPUT SC, V5653, P394, DOI 10.1007/978-3-642-03013-0_18
   Roy C, 2013, MSR
   Saha RK, 2013, IEEE WORK CONF MIN S, P139, DOI 10.1109/MSR.2013.6624021
   Schäfer M, 2009, LECT NOTES COMPUT SC, V5653, P369, DOI 10.1007/978-3-642-03013-0_17
   Tairas R, 2012, INFORM SOFTWARE TECH, V54, P1297, DOI 10.1016/j.infsof.2012.06.011
   Zibran MF, 2013, IET SOFTW, V7, P167, DOI 10.1049/iet-sen.2012.0058
NR 30
TC 4
Z9 4
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2018
VL 25
IS 3
BP 627
EP 673
DI 10.1007/s10515-018-0238-5
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP2SY
UT WOS:000440687600007
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Zolotas, C
   Diamantopoulos, T
   Chatzidimitriou, KC
   Symeonidis, AL
AF Zolotas, Christoforos
   Diamantopoulos, Themistoklis
   Chatzidimitriou, Kyriakos C.
   Symeonidis, Andreas L.
TI From requirements to source code: a Model-Driven Engineering approach
   for RESTful web services
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE RESTful web services; Model-Driven Engineering; Software requirements;
   Automated Software Engineering
AB During the last few years, the REST architectural style has drastically changed the way web services are developed. Due to its transparent resource-oriented model, the RESTful paradigm has been incorporated into several development frameworks that allow rapid development and aspire to automate parts of the development process. However, most of the frameworks lack automation of essential web service functionality, such as authentication or database searching, while the end product is usually not fully compliant to REST. Furthermore, most frameworks rely heavily on domain specific modeling and require developers to be familiar with the employed modeling technologies. In this paper, we present a Model-Driven Engineering (MDE) engine that supports fast design and implementation of web services with advanced functionality. Our engine provides a front-end interface that allows developers to design their envisioned system through software requirements in multimodal formats. Input in the form of textual requirements and graphical storyboards is analyzed using natural language processing techniques and semantics, to semi-automatically construct the input model for the MDE engine. The engine subsequently applies model-to-model transformations to produce a RESTful, ready-to-deploy web service. The procedure is traceable, ensuring that changes in software requirements propagate to the underlying software artefacts and models. Upon assessing our methodology through a case study and measuring the effort reduction of using our tools, we conclude that our system can be effective for the fast design and implementation of web services, while it allows easy wrapping of services that have been engineered with traditional methods to the MDE realm.
C1 [Zolotas, Christoforos; Diamantopoulos, Themistoklis; Chatzidimitriou, Kyriakos C.; Symeonidis, Andreas L.] Aristotle Univ Thessaloniki, Elect & Comp Engn Dept, GR-54124 Thessaloniki, Greece.
C3 Aristotle University of Thessaloniki
RP Diamantopoulos, T (corresponding author), Aristotle Univ Thessaloniki, Elect & Comp Engn Dept, GR-54124 Thessaloniki, Greece.
EM christopherzolotas@issel.ee.auth.gr; thdiaman@issel.ee.auth.gr;
   kyrcha@issel.ee.auth.gr; asymeon@eng.auth.gr
RI Symeonidis, Andreas/N-3313-2015
OI Symeonidis, Andreas/0000-0003-0235-6046; Diamantopoulos,
   Themistoklis/0000-0002-0520-7225
FU FP7 Collaborative Project S-CASE - European Commission [610717]
FX Parts of this work have been supported by the FP7 Collaborative Project
   S-CASE (Grant Agreement No. 610717), funded by the European Commission.
   S-CASE aims to provide a cloud-based realm of services and tools for
   software developers to enable rapid software prototyping based on user
   requirements and system models, provided in multimodal formats. S-CASE
   provides automated solutions for (a) the extraction of system
   specifications and architecture, (b) the transformation of these
   specifications (models) to the source code of RESTful web services, and
   (c) the discovery and synthesis of composite workflows of software
   artefacts from distributed open source and proprietary resources in
   order to fulfill the system requirements. More info on S-CASE can be
   found at http://s-case.github.io/.
CR ABBOTT RJ, 1983, COMMUN ACM, V26, P882, DOI 10.1145/182.358441
   [Anonymous], REQUIREMENTS SPECIFI
   [Anonymous], ABS150403498 CORR
   [Anonymous], P INT C INF INT WEB
   [Anonymous], LANGUAGE RE IN PRESS
   [Anonymous], 2012, CUCUMBER BOOK BEHAV
   [Anonymous], 2000, ARCHITECTURAL STYLES
   [Anonymous], WORKSH SEM WEB EN SO
   [Anonymous], 2014, P ACL 2014 WORKSH SE
   [Anonymous], P 4 EUR C SOFTW ARCH
   BASILI VR, 1984, IEEE T SOFTWARE ENG, V10, P728, DOI 10.1109/TSE.1984.5010301
   BOOCH G, 1986, IEEE T SOFTWARE ENG, V12, P211, DOI 10.1109/TSE.1986.6312937
   Castaneda V., 2010, Glob J Res Eng, V10
   Dermeval D., 2015, Requirements Engineering, P1
   Happel H.J., 2006, P WORKSH SEM WORKSH, P5
   Harmain H. M., 2003, Automated Software Engineering, V10, P157, DOI 10.1023/A:1022916028950
   Hernandez A.G., 2010, Proceedings of the first international workshop on restful design, P39, DOI DOI 10.1145/1798354.1798384
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   Liebel G, 2014, LECT NOTES COMPUT SC, V8767, P166, DOI 10.1007/978-3-319-11653-2_11
   Mich L., 1996, Natural Language Engineering, V2, P161, DOI 10.1017/S1351324996001337
   Moody DL, 2009, IEEE T SOFTWARE ENG, V35, P756, DOI 10.1109/TSE.2009.67
   Mylopoulos J, 2000, INFORMATION SYSTEMS ENGINEERING, P261
   Newman S., 2015, BUILDING MICROSERVIC
   Parastatidis S., 2010, Proceedings of the First International Workshop on RESTful Design, P16
   Porres Ivan., 2011, Proceedings of the 2011 ACM Symposium on Applied Computing, P1598, DOI DOI 10.1145/1982185.1982521
   Richardson L., 2008, RESTFUL WEB SERVICES
   Saeki M., 1989, Proceedings. 11th International Conference on Software Engineering (Cat. No.89CH2718-5), P64, DOI 10.1145/74587.74594
   Schreier S., 2011, Proceedings of the Second International Workshop on RESTful Design, P15, DOI [DOI 10.1145/1967428, 10.1145/1967428]
   Smialek M., 2012, 2012 IEEE 20th International Requirements Engineering Conference (RE 2012), P321, DOI 10.1109/RE.2012.6345825
   Störrle H, 2014, LECT NOTES COMPUT SC, V8767, P518, DOI 10.1007/978-3-319-11653-2_32
   Sweller J., 1994, Learning and instruction, P295, DOI DOI 10.1016/0959-4752(94)90003-5
   Yu E., 2010, SOCIAL MODELING REQU
   Zhao HB, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P189, DOI 10.1109/ICWS.2009.111
   Zuzak I, 2011, LECT NOTES COMPUT SC, V6757, P346, DOI 10.1007/978-3-642-22233-7_24
NR 34
TC 10
Z9 12
U1 1
U2 27
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2017
VL 24
IS 4
BP 791
EP 838
DI 10.1007/s10515-016-0206-x
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FI9EQ
UT WOS:000412307800004
DA 2024-07-18
ER

PT J
AU Bulej, L
   Bures, T
   Horky, V
   Kotrc, J
   Marek, L
   Trojánek, T
   Tuma, P
AF Bulej, Lubomir
   Bures, Tomas
   Horky, Vojtech
   Kotrc, Jaroslav
   Marek, Lukas
   Trojanek, Tomas
   Tuma, Petr
TI Unit testing performance with Stochastic Performance Logic
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Performance evaluation; Unit testing; Java
AB Unit testing is an attractive quality management tool in the software development process, however, practical obstacles make it difficult to use unit tests for performance testing. We present Stochastic Performance Logic, a formalism for expressing performance requirements, together with interpretations that facilitate performance evaluation in the unit test context. The formalism and the interpretations are implemented in a performance testing framework and evaluated in multiple experiments, demonstrating the ability to identify performance differences in realistic unit test scenarios.
C1 [Bures, Tomas; Horky, Vojtech; Kotrc, Jaroslav; Marek, Lukas; Trojanek, Tomas; Tuma, Petr] Charles Univ Prague, Dept Distributed & Dependable Syst, Fac Math & Phys, Prague, Czech Republic.
   [Bulej, Lubomir] Univ Lugano, Fac Informat, Lugano, Switzerland.
C3 Charles University Prague; Universita della Svizzera Italiana
RP Tuma, P (corresponding author), Charles Univ Prague, Dept Distributed & Dependable Syst, Fac Math & Phys, Prague, Czech Republic.
EM bulejl@usi.ch; tomas.bures@d3s.mff.cuni.cz; petr.tuma@d3s.mff.cuni.cz
RI Tuma, Petr/A-3094-2009; Horký, Vojtěch/M-5260-2019; Bulej,
   Lubomír/G-3045-2014; Bures, Tomas/G-1821-2014
OI Tuma, Petr/0000-0002-7035-2322; Horký, Vojtěch/0000-0003-2146-160X;
   Bulej, Lubomír/0000-0002-4573-6084; Bures, Tomas/0000-0003-3622-9918
FU EU [257414 ASCENS]; GACR [P202/10/J042 FERDINAND]; COST CZ (LD)
   [LD15051]; Charles University
FX We gratefully acknowledge the contribution of our colleagues Frantisek
   Haas, Jaroslav Keznikl, Alena Koubkova, Martin Lacina and Andrej
   Podzimek, who were authors of the conference papers that this article
   combines and extends. Portions of this work were previously published
   under the copyright of the corresponding publishers and partially
   supported by the EU Project 257414 ASCENS and the GACR project
   P202/10/J042 FERDINAND. This work was partially supported by the COST CZ
   (LD) Project LD15051 and by the Charles University institutional funding
   (SVV).
CR [Anonymous], 2011, INT ENCY STAT SCI
   [Anonymous], 2013, SPL TOOL
   *ANSI IEEE, 1986, 10081987 ANSIIEEE
   Beck K., 1997, SIMPLE SMALLTALK TES
   Beck Kent L., 2003, Test Driven Development By Example
   Bergmann V., 2013, CONTIPERF 2
   Bourque Pierre, 2014, SWEBOK: Guide to the Software Engineering Body of Knowledge, V3rd
   Bulej Lubomir, 2015, Software Engineering for Collective Autonomic Systems. The ASCENS Approach: LNCS 8998, P291, DOI 10.1007/978-3-319-16310-9_8
   Bulej Lubomir., 2012, P 3 ACMSPEC INT C PE, P311, DOI DOI 10.1145/2188286.2188345
   Chen TS, 2015, IEEE T COMPUT, V64, P1442, DOI 10.1109/TC.2014.2315614
   Clark M, 2013, JUNITPERF
   de Oliveira AugustoBorn., 2013, Proceedings of the 4th ACM/SPEC International Conference on Performance Engineering, ICPE'13, P137
   Dice D., 2003, TECHNICAL REPORT
   Dice Dave, 2006, BIASED LOCKING HOTSP
   Foo King Chun, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P32, DOI 10.1109/QSIC.2010.35
   Ghaith S, 2013, EUR CON SFTWR MTNCE, P379, DOI 10.1109/CSMR.2013.54
   Heger Christoph, 2013, P 4 ACM SPEC INT C P, P27, DOI DOI 10.1145/2479871.2479879
   Horky Vojtech, 2013, Computer Performance Engineering. 10th European Workshop, EPEW 2013. Proceedings: LNCS 8168, P149, DOI 10.1007/978-3-642-40725-3_12
   Horky V., 2015, P 6 ACMSPEC INT C PE, P337, DOI [10.1145/2668930, DOI 10.1145/2668930]
   hunterhacker/jdom, 2013, VER PERF
   Kalibera T, 2005, MASCOTS 2005:13th IEEE International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, P183, DOI 10.1109/MASCOTS.2005.18
   Kalibera T., 2005, P INT S PERF EV COMP P INT S PERF EV COMP, P853
   Liu Xuezheng., 2008, Proceedings of the 5th USENIX Symposium on Networked Systems Design and Implementation, NSDI'08, P423
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Oracle, 2006, JVM TOOL INT
   Oracle, 2014, JAV MICR HARN OPENJD
   Oracle, 2014, GARB COLL ERG
   Perl S. E., 1993, Operating Systems Review, V27, P134, DOI 10.1145/173668.168630
   Porter A, 2007, IEEE T SOFTWARE ENG, V33, P510, DOI 10.1109/TSE.2007.70719
   Reynolds Patrick., 2006, Proceedings of the 3rd Conference on Networked Systems Design and Implementation - Volume 3, NSDI '06, V3, P9
   Sewe A, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P657
   Tjang A, 2009, SYM REL DIST SYST, P61, DOI 10.1109/SRDS.2009.24
   Trojanek T., 2012, THESIS
   Vetter JeffreyS., 2002, P 2002 ACMIEEE C SUP, P1
   WELCH BL, 1947, BIOMETRIKA, V34, P28, DOI 10.2307/2332510
   Wirsing M., 2015, LECT NOTES COMPUTER, V8998
NR 36
TC 15
Z9 15
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2017
VL 24
IS 1
BP 139
EP 187
DI 10.1007/s10515-015-0188-0
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EI2DM
UT WOS:000392296800006
DA 2024-07-18
ER

PT J
AU Guerra, E
   de Lara, J
   Wimmer, M
   Kappel, G
   Kusel, A
   Retschitzegger, W
   Schönböck, J
   Schwinger, W
AF Guerra, Esther
   de Lara, Juan
   Wimmer, Manuel
   Kappel, Gerti
   Kusel, Angelika
   Retschitzegger, Werner
   Schoenboeck, Johannes
   Schwinger, Wieland
TI Automated verification of model transformations based on visual
   contracts
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model-Driven Engineering; Model transformation; Contract-based
   specification; Verification; QVT-relations
ID COMPONENTS; DESIGN
AB Model-Driven Engineering promotes the use of models to conduct the different phases of the software development. In this way, models are transformed between different languages and notations until code is generated for the final application. Hence, the construction of correct Model-to-Model (M2M) transformations becomes a crucial aspect in this approach.
   Even though many languages and tools have been proposed to build and execute M2M transformations, there is scarce support to specify correctness requirements for such transformations in an implementation-independent way, i.e., irrespective of the actual transformation language used.
   In this paper we fill this gap by proposing a declarative language for the specification of visual contracts, enabling the verification of transformations defined with any transformation language. The verification is performed by compiling the contracts into QVT to detect disconformities of transformation results with respect to the contracts. As a proof of concept, we also report on a graphical modeling environment for the specification of contracts, and on its use for the verification of transformations in several case studies.
C1 [Guerra, Esther; de Lara, Juan] Univ Autonoma Madrid, Madrid, Spain.
   [Wimmer, Manuel; Kappel, Gerti; Schoenboeck, Johannes] Vienna Univ Technol, A-1040 Vienna, Austria.
   [Kusel, Angelika; Retschitzegger, Werner; Schwinger, Wieland] Johannes Kepler Univ Linz, A-4040 Linz, Austria.
C3 Autonomous University of Madrid; Technische Universitat Wien; Johannes
   Kepler University Linz
RP Guerra, E (corresponding author), Univ Autonoma Madrid, Madrid, Spain.
EM esther.guerra@uam.es; Juan.deLara@uam.es; wimmer@big.tuwien.ac.at;
   gerti@big.tuwien.ac.at; kusel@bioinf.jku.at; werner@bioinf.jku.at;
   schoenboeck@big.tuwien.ac.at; wieland.schwinger@jku.ac.at
RI Guerra, Esther/B-4977-2014; de Lara, Juan/B-5422-2014
OI Guerra, Esther/0000-0002-2818-2278; de Lara, Juan/0000-0001-9425-6362;
   Schonbock, Johannes/0000-0002-1706-6319
FU Austrian Science Fund (FWF) [P21374-N13]; Spanish Ministry of Science
   [TIN2008-02081, TIN2011-24139]; R&D programme of the Madrid Region
   [S2009/TIC-1650]; Austrian Science Fund (FWF) [P21374] Funding Source:
   Austrian Science Fund (FWF)
FX This work has been funded by the Austrian Science Fund (FWF) under grant
   P21374-N13, the Spanish Ministry of Science under grants TIN2008-02081
   and TIN2011-24139, and the R&D programme of the Madrid Region under
   project S2009/TIC-1650.
CR [Anonymous], OCL SPEC VERS 2 0
   [Anonymous], SOFTWARE SYSTEM MODE
   [Anonymous], ECEASST
   Aranega V, 2011, COMM COM INF SC, V50, P137
   Balogh A, 2010, LECT NOTES COMPUT SC, V5765, P224, DOI 10.1007/978-3-642-17322-6_11
   Baudry B., 2006, ECMDA WORKSH INT MOD, V92
   Baudry B, 2010, COMMUN ACM, V53, P139, DOI 10.1145/1743546.1743583
   Beugnard A, 1999, COMPUTER, V32, P38, DOI 10.1109/2.774917
   Bezivin J., 2005, WORKSH MODELS 05
   Briand LC, 2003, SOFTWARE PRACT EXPER, V33, P637, DOI 10.1002/spe.520
   Brottier E, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P85
   Cabot J, 2010, J SYST SOFTWARE, V83, P283, DOI 10.1016/j.jss.2009.08.012
   Cariou Eric., 2004, Workshop of OCL and Model Driven Engineering, V12, P69
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Fishman George S., 2001, SPRING S OPERAT RES, DOI 10.1007/978-1-4757-3552-9
   Fleurey F, 2004, SIVOES-MODEVA 2004, PROCEEDINGS, P29, DOI 10.1109/MODEVA.2004.1425846
   Fleurey F, 2009, SOFTW SYST MODEL, V8, P185, DOI 10.1007/s10270-007-0074-8
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   Giner P, 2009, LECT NOTES COMPUT SC, V5795, P748, DOI 10.1007/978-3-642-04425-0_61
   Gogolla M, 2011, LECT NOTES COMPUT SC, V6698, P221, DOI 10.1007/978-3-642-21470-7_16
   Gronback R. C., 2009, ECLIPSE MODELING PRO
   Guerra Esther, 2010, Proceedings 2010 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC 2010), P119, DOI 10.1109/VLHCC.2010.25
   Guerra E, 2013, SOFTW SYST MODEL, V12, P555, DOI 10.1007/s10270-011-0211-2
   Jackson D., 2006, LOGIC LANGUAGE ANAL
   Jensen Kurt, 2007, International Journal on Software Tools for Technology Transfer, V9, P213, DOI 10.1007/s10009-007-0038-x
   Jensen K., 1997, MONOGRAPHS THEORETIC
   JOUAULT F, 2005, MOD TRANSF PRACT WOR
   Kessentini M, 2011, AUTOMAT SOFTW ENG, V18, P199, DOI 10.1007/s10515-010-0079-3
   Kolovos D., 2006, GAMMA 06, P13, DOI DOI 10.1145/1138304.1138308
   Kolovos DS, 2008, LECT NOTES COMPUT SC, V5063, P46, DOI 10.1007/978-3-540-69927-9_4
   Kuhne T., 2006, Softw Syst Model, V5, P369, DOI [DOI 10.1007/S10270-006-0017-9, 10.1007/s10270-006-0017-9]
   Kuster J. M., 2006, Models in Software Engineering. Workshops and Symposia at MoDELS 2006. Reports and Revised Selected Papers (Lecture Notes in Computer Science Vol.4364), P193
   Kuster J.M., 2006, Software and Systems Modeling, V5, P233, DOI [10.1007/s10270-006-0018-8, DOI 10.1007/S10270-006-0018-8]
   Le Traon Y, 2006, IEEE T SOFTWARE ENG, V32, P571, DOI 10.1109/TSE.2006.79
   Leavens GT, 2005, SCI COMPUT PROGRAM, V55, P185, DOI 10.1016/j.scico.2004.05.015
   Lin Y., 2004, OOPSLA WORKSH BEST P
   Lin YH, 2005, MODEL-DRIVEN SOFTWARE DEVELOPMENT, P219, DOI 10.1007/3-540-28554-7_10
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Mottu Jean-Marie, 2008, 2008 IEEE International Conference on Software Testing Verification and Validation Workshop (ICSTW), P105, DOI 10.1109/ICSTW.2008.27
   Mottu JM, 2006, LECT NOTES COMPUT SC, V4199, P589
   Object Management Group, 2011, QVT SPEC VERS 1 1
   Polack Dimitrios S., 2008, 2008 IEEE International Conference on Software Testing Verification and Validation Workshop (ICSTW), P97, DOI 10.1109/ICSTW.2008.50
   Ramos R, 2007, LECT NOTES COMPUT SC, V4735, P121
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Sen S, 2009, LECT NOTES COMPUT SC, V5563, P148, DOI 10.1007/978-3-642-02408-5_11
   SPIVEY JM, 1989, SOFTWARE ENG J, V4, P40, DOI 10.1049/sej.1989.0006
   TATA Research Development and Design, MODELMORF
   Varró D, 2006, LECT NOTES COMPUT SC, V4178, P260
   Xpand, XPAND TEMPL
NR 50
TC 50
Z9 55
U1 1
U2 16
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2013
VL 20
IS 1
BP 5
EP 46
DI 10.1007/s10515-012-0102-y
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 059MN
UT WOS:000312709700002
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Apel, S
   Kästner, C
   Grösslinger, A
   Lengauer, C
AF Apel, Sven
   Kaestner, Christian
   Groesslinger, Armin
   Lengauer, Christian
TI Type safety for feature-oriented product lines
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Feature featherweight Java; Feature-oriented programming; Software
   product lines; Type systems; Safe composition
ID MINIMAL CORE CALCULUS; IMPLEMENTATION; JAVA; EXTENSION; SUPPORT; DESIGN
AB A feature-oriented product line is a family of programs that share a common set of features. A feature implements a stakeholder's requirement and represents a design decision or configuration option. When added to a program, a feature involves the introduction of new structures, such as classes and methods, and the refinement of existing ones, such as extending methods. A feature-oriented decomposition enables a generator to create an executable program by composing feature code solely on the basis of the feature selection of a user-no other information needed. A key challenge of product line engineering is to guarantee that only well-typed programs are generated. As the number of valid feature combinations grows combinatorially with the number of features, it is not feasible to type check all programs individually. The only feasible approach is to have a type system check the entire code base of the feature-oriented product line. We have developed such a type system on the basis of a formal model of a feature-oriented Java-like language. The type system guaranties type safety for feature-oriented product lines. That is, it ensures that every valid program of a well-typed product line is well-typed. Our formal model including type system is sound and complete.
C1 [Apel, Sven; Groesslinger, Armin; Lengauer, Christian] Univ Passau, Dept Math & Informat, Passau, Germany.
   [Kaestner, Christian] Univ Magdeburg, Sch Comp Sci, D-39106 Magdeburg, Germany.
C3 University of Passau; Otto von Guericke University
RP Apel, S (corresponding author), Univ Passau, Dept Math & Informat, Passau, Germany.
EM apel@uni-passau.de; kaestner@iti.cs.uni-magdeburg.de;
   groesslinger@uni-passau.de; lengauer@uni-passau.de
OI Kastner, Christian/0000-0002-4450-4572; Apel, Sven/0000-0003-3687-2233
FU German Research Foundation (DFG) [AP 206/2-1]
FX This work is being funded in part by the German Research Foundation
   (DFG), project number AP 206/2-1.
CR Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   Anfurrutia FI, 2007, LECT NOTES COMPUT SC, V4607, P473
   [Anonymous], EATCS SERIES
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S, 2005, LECT NOTES COMPUT SC, V3676, P125
   APEL S, 2007, MIP0712 U PASS DEP I
   APEL S, 2004, LNCS, V3437, P137
   Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Apel S, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1745312.1745316
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel S, 2009, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2009.5070523
   Apel S, 2009, LECT NOTES COMPUT SC, V5563, P4, DOI 10.1007/978-3-642-02408-5_2
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P101
   Apel S, 2009, LECT NOTES COMPUT SC, V5634, P9, DOI 10.1007/978-3-642-02655-3_3
   Aversano L, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P83, DOI 10.1109/SCAM.2002.1134108
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   BERGEL A, 2005, P INT C OBJ OR PROGR, P177
   Bono V, 1999, LECT NOTES COMPUT SC, V1628, P43
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Clarke D., 2007, P INT C ASP OR SOFTW, P121
   Clements P., 2002, Software product lines
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   Czarnecki K., 2006, GPCE, P211
   DELAWARE B, 2009, P INT S FDN SOFTW EN, P243
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   GASIUNAS V., 2007, P INT C OBJ OR PROGR, P133, DOI DOI 10.1145/1297027.1297038
   Gosling J., 2005, Java Language Specification, Vthird
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   HUTCHINS D, 2006, P INT C OBJ OR PROGR, P1
   HUTCHINS D., 2009, THESIS U EDINBURGH
   Igarashi A, 2005, LECT NOTES COMPUT SC, V3780, P161
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kamina T, 2004, LECT NOTES COMPUT SC, V3302, P398
   Kang Kyo C, 1990, Technical Report
   KASTNER C, 2008, P INT C AUT SOFTW EN, P258
   KASTNER C, 2007, P INT SOFTW PROD LIN, P222
   KASTNER C, 2009, P INT C OBJ MOD COMP, V33, P174
   Kastner Christian, 2010, THESIS U MAGDEBURG
   Kastner Christian, 2009, P INT C GEN PROGR CO, P157, DOI DOI 10.1145/1621607.1621632
   Lagorio G, 2009, LECT NOTES COMPUT SC, V5653, P244, DOI 10.1007/978-3-642-03013-0_12
   Liquori L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330022
   Lopez-Herrejon R. E., 2001, Generative and Component-Based Software Engineering. Third International Conference, GCSE 2001. Proceedings (Lecture Notes in Computer Science Vol.2186), P10
   Lopez-Herrejon RE, 2005, LECT NOTES COMPUT SC, V3586, P169
   Lopez-Herrejon Roberto., 2006, Proceedings of the 2006 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation (New York, NY, USA), PEPM '06, P68
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2743, P2
   Mendonca Marcilio, 2009, SPLC' 09, P231
   MEZINI M, 2004, P INT S FDN SOFTW EN, P127
   Murphy GC, 2001, PROC INT CONF SOFTW, P275, DOI 10.1109/ICSE.2001.919101
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   Odersky M, 2003, LECT NOTES COMPUT SC, V2743, P201
   Ostermann K, 2002, LECT NOTES COMPUT SC, V2374, P89
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   REENSKAUG T, 1992, J OBJECT-ORIENT PROG, V5, P27
   ROSENBERG Morton., 2008, Presidential Claims of Executive Privilege: History, Law, Practice and Recent Developments, P1
   Rosenmüller M, 2009, DATA KNOWL ENG, V68, P1493, DOI 10.1016/j.datak.2009.07.013
   Rosenmüller M, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P3
   ROSENMULLER M, 2009, LNI P, V144, P117
   SIEGMUND N, 2009, LNI P, V144, P297
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   STRNISA R, 2007, P INT C OBJ OR PROGR, P499
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   VanHilst Michael., 1996, P 11 ACM SIGPLAN C O, P359
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
   [No title captured]
NR 71
TC 47
Z9 50
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2010
VL 17
IS 3
BP 251
EP 300
DI 10.1007/s10515-010-0066-8
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 608HD
UT WOS:000278573200003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Giffhorn, D
   Hammer, C
AF Giffhorn, Dennis
   Hammer, Christian
TI Precise slicing of concurrent programs An Evaluation of static slicing
   algorithms for concurrent programs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 7th IEEE International Working Conference on Source Code Analysis and
   Manipulation
CY SEP 30-OCT 01, 2007
CL Paris, FRANCE
SP IEEE Comp Soc, TCSE, CEA Lab Integrat Syst & Technologies, Ecole Polytech, Software Improvement Grp, CREST, Kings Coll London
DE Slicing; Program analysis; Concurrency; Threads
AB While there exist efficient algorithms to slice sequential programs precisely, there are only two algorithms for precise slicing of concurrent interprocedural programs with recursive procedures (Krinke in Proc. ESEC/FSE'03, pp. 178-187, 2003; Nanda and Ramesh in ACM Toplas. 28(6):1088-1144, 2006). We present an empirical evaluation of both algorithms for Java. We demonstrate that both algorithms provide the same precision up to the model of concurrency in use and show that the concurrency model has strong impact on slice precision and computation costs. Furthermore, we extend both algorithms to support dynamic thread creation both in loops and recursion-a feature that the original algorithms could not fully handle. The worst case complexity of the algorithms being exponential, we developed several optimizations and compared these with each other and with algorithms that trade precision for speed. Finally, we show that one algorithm may produce incorrect slices and present a remedy.
C1 [Giffhorn, Dennis; Hammer, Christian] Univ Karlsruhe TH, Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Giffhorn, D (corresponding author), Univ Karlsruhe TH, Karlsruhe, Germany.
EM giffhorn@ipd.info.uni-karlsruhe.de; hammer@ipd.info.uni-karlsruhe.de
RI Hammer, Christian/IUP-7955-2023
OI Hammer, Christian/0000-0001-5955-3732
CR Bates S., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P384, DOI 10.1145/158511.158694
   Binkley D, 2004, ADV COMPUT, V62, P105, DOI 10.1016/S0065-2458(03)62003-6
   Binkley D, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290523
   Chen ZQ, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/375431.375420
   Chen ZQ, 2000, FIRST ASIA-PACIFIC CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P39, DOI 10.1109/APAQ.2000.883776
   Cheng J., 1993, Automated and Algorithmic Debugging. First International Workshop, AADEBUG '93 Proceedings, P223, DOI 10.1007/BFb0019411
   CHENG J, 1997, INT C ADV PAR DISTR, P395
   Giffhorn D, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P17, DOI 10.1109/SCAM.2007.9
   Gosling J., 2005, Java Language Specification, Vthird
   Hammen C, 2004, PSYCHOLOGICAL TREATMENT OF BIPOLAR DISORDER, P17, DOI 10.1145/996821.996830
   HAMMER C, 2008, 200816 U KARLSR FAK
   Hatcliff J, 1999, LECT NOTES COMPUT SC, V1694, P1
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   KAMKAR M, 1990, LECT NOTES COMPUT SC, V456, P60
   Krinke J, 2002, PROC IEEE INT CONF S, P22, DOI 10.1109/ICSM.2002.1167744
   Krinke J, 1998, ACM SIGPLAN NOTICES, V33, P35, DOI 10.1145/277633.277638
   KRINKE J, 2003, P 9 EUR SOFTW ENG C, P178
   MULLEROLM M, 2001, STOC 2001 33 ACM S T, P647
   Nanda MG, 2006, ACM T PROGR LANG SYS, V28, P1088, DOI 10.1145/1186632.1186636
   NANDA MG, 2000, ISSTA 00, P180
   Naumovich G, 1999, LECT NOTES COMPUT SC, V1687, P338, DOI 10.1145/318774.319252
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   RUF E, 2000, P C PROGR LANG DES I, P208
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   Sridharan M, 2007, ACM SIGPLAN NOTICES, V42, P112, DOI 10.1145/1273442.1250748
   TIP F, 1995, J PROGRAM LANG, V3, P121
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Zhao JJ, 1999, PROG COMPREHEN, P126, DOI 10.1109/WPC.1999.777751
NR 29
TC 19
Z9 24
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2009
VL 16
IS 2
BP 197
EP 234
DI 10.1007/s10515-009-0048-x
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 431SN
UT WOS:000265084000002
DA 2024-07-18
ER

PT J
AU Smaragdakis, Y
   Csallner, C
   Subramanian, R
AF Smaragdakis, Yannis
   Csallner, Christoph
   Subramanian, Ranjith
TI Scalable satisfiability checking and test data generation from modeling
   diagrams
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 22nd International Conference on Automated Software Engineering
CY NOV 05-09, 2007
CL Atlanta, GA
DE ORM; Modeling; Testing; Databases; NP-hardness; ORM-; Test data
   generation
AB We explore the automatic generation of test data that respect constraints expressed in the Object-Role Modeling (ORM) language. ORM is a popular conceptual modeling language, primarily targeting database applications, with significant uses in practice. The general problem of even checking whether an ORM diagram is satisfiable is quite hard: restricted forms are easily NP-hard and the problem is undecidable for some expressive formulations of ORM. Brute-force mapping to input for constraint and SAT solvers does not scale: state-of-the-art solvers fail to find data to satisfy uniqueness and mandatory constraints in realistic time even for small examples. We instead define a restricted subset of ORM that allows efficient reasoning yet contains most constraints overwhelmingly used in practice. We show that the problem of deciding whether these constraints are consistent (i.e., whether we can generate appropriate test data) is solvable in polynomial time, and we produce a highly efficient (interactive speed) checker. Additionally, we analyze over 160 ORM diagrams that capture data models from industrial practice and demonstrate that our subset of ORM is expressive enough to handle their vast majority.
C1 [Smaragdakis, Yannis] Univ Massachusetts, Amherst, MA 01003 USA.
   [Csallner, Christoph] Univ Texas Arlington, Arlington, TX 76019 USA.
   [Subramanian, Ranjith] Find Com, Mountain View, CA USA.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   University of Texas System; University of Texas Arlington
RP Smaragdakis, Y (corresponding author), Univ Massachusetts, Amherst, MA 01003 USA.
EM yannis@cs.umass.edu; csallner@uta.edu; ranjith.subramanian@gmail.com
RI Smaragdakis, Yannis/AAM-2851-2021
CR [Anonymous], S THEOR APPL SATIS F
   Berardi D, 2005, ARTIF INTELL, V168, P70, DOI 10.1016/j.artint.2005.05.003
   Calvanese D., 1994, Proceedings. The 10th International Conference Data Engineering (Cat. No.94CH3383-7), P204, DOI 10.1109/ICDE.1994.283032
   Deng YT, 2005, PROC INT CONF SOFTW, P78, DOI 10.1145/1062455.1062486
   EGYED A, 2006, P 28 INT C SOFTW ENG, P381, DOI DOI 10.1145/1134285.1134339
   Egyed A, 2007, PROC INT CONF SOFTW, P292
   Fan WF, 2002, J ACM, V49, P368, DOI 10.1145/567112.567117
   GRANT J, 1985, THEOR COMPUT SCI, V41, P271, DOI 10.1016/0304-3975(85)90075-1
   HALPIN T, 1991, LECT NOTES COMPUT SC, V495, P342
   Halpin T., 2001, INFORM MODELING RELA
   HALPIN TA, 1995, P 14 INT C OBJ OR EN, P191
   Halpin Terry., 1998, HDB ARCHITECTURES IN
   HEYNMANS S, 2006, THESIS VRIJE U BRUSS
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   JARRAR M, 2005, P INT C SEM NETW WOR
   KANEIWA K, 2006, P 4 INT S FDN INF KN, P219
   KEET CM, 2007, P 20 INT WORKSH DESC
   Khurshid S, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/ASE.2000.873646
   Lenzerini M., 1987, Proceedings of the Thirteenth International Conference on Very Large Data Bases: 1987 13th VLDB, P147
   MANOLIOS P, 2007, P ACM SIGSOFT INT S
   MARAEE A, 2007, P 3 EUR C MOD DRIV A
   Nentwich C, 2003, PROC INT CONF SOFTW, P455, DOI 10.1109/ICSE.2003.1201223
   Neufeld A., 1993, P VLDB ENDOWMENT VLD, V2, P173
   Nijssen G.M., 1989, CONCEPTUAL SCHEMA RE
   Shlyakhter I, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P94, DOI 10.1109/ASE.2003.1240298
   Smaragdakis Yannis., 2007, ASE 07 P 22 IEEEACM, P4
   Taghdiri M, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P144, DOI 10.1109/ASE.2004.1342732
   VANBOMMEL P, 1991, INFORM SYST, V16, P471, DOI 10.1016/0306-4379(91)90037-A
   Warren I, 2006, IEEE INT CONF AUTOM, P37
   WILLMOR D, 2006, P 28 INT C SOFTW ENG, P102
NR 30
TC 10
Z9 10
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2009
VL 16
IS 1
BP 73
EP 99
DI 10.1007/s10515-008-0044-6
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 408EP
UT WOS:000263418600004
DA 2024-07-18
ER

PT J
AU Sangaroonsilp, P
   Choetkiertikul, M
   Dam, HK
   Ghose, A
AF Sangaroonsilp, Pattaraporn
   Choetkiertikul, Morakot
   Dam, Hoa Khanh
   Ghose, Aditya
TI An empirical study of automated privacy requirements classification in
   issue reports
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Privacy; Issue reports; Issues classification; Machine learning; Natural
   language processing; Deep learning models; Privacy issues classification
AB The recent advent of data protection laws and regulations has emerged to protect privacy and personal information of individuals. As the cases of privacy breaches and vulnerabilities are rapidly increasing, people are aware and more concerned about their privacy. These bring a significant attention to software development teams to address privacy concerns in developing software applications. As today's software development adopts an agile, issue-driven approach, issues in an issue tracking system become a centralised pool that gathers new requirements, requests for modification and all the tasks of the software project. Hence, establishing an alignment between those issues and privacy requirements is an important step in developing privacy-aware software systems. This alignment also facilitates privacy compliance checking which may be required as an underlying part of regulations for organisations. However, manually establishing those alignments is labour intensive and time consuming. In this paper, we explore a wide range of machine learning and natural language processing techniques which can automatically classify privacy requirements in issue reports. We employ six popular techniques namely Bag-of-Words (BoW), N-gram Inverse Document Frequency (N-gram IDF), Term Frequency-Inverse Document Frequency (TF-IDF), Word2Vec, Convolutional Neural Network (CNN) and Bidirectional Encoder Representations from Transformers (BERT) to perform the classification on privacy-related issue reports in Google Chrome and Moodle projects. The evaluation showed that BoW, N-gram IDF, TF-IDF and Word2Vec techniques are suitable for classifying privacy requirements in those issue reports. In addition, N-gram IDF is the best performer in both projects.
C1 [Sangaroonsilp, Pattaraporn; Dam, Hoa Khanh; Ghose, Aditya] Univ Wollongong, Fac Engn & Informat Sci, Sch Comp & Informat Technol, Northfields Ave, Wollongong, NSW 2500, Australia.
   [Choetkiertikul, Morakot] Mahidol Univ, Fac Informat & Commun Technol, Phuttamonthon Sai 4, Nakhon Pathom 73170, Thailand.
C3 University of Wollongong; Mahidol University
RP Sangaroonsilp, P (corresponding author), Univ Wollongong, Fac Engn & Informat Sci, Sch Comp & Informat Technol, Northfields Ave, Wollongong, NSW 2500, Australia.
EM ps642@uowmail.edu.au; morakot.cho@mahidol.ac.th; hoa@uow.edu.au;
   aditya@uow.edu.au
FU CAUL, Member Institutions
FX Open Access funding enabled and organized by CAUL and its Member
   Institutions.
CR Almhana R, 2016, IEEE INT CONF AUTOM, P286, DOI 10.1145/2970276.2970344
   [Anonymous], 2013, word2vec
   [Anonymous], 2011, 29100 ISOIEC
   [Anonymous], 2008, P 7 ACM INT C IMAGE
   Antón AI, 2004, REQUIR ENG, V9, P169, DOI 10.1007/s00766-003-0183-z
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Asia-Pacific Economic Cooperation (APEC): APEC Privacy Framework, 2017, APEC PRIV FRAM
   Ayala-Rivera V, 2018, INT REQUIR ENG CONF, P136, DOI 10.1109/RE.2018.00023
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Bojanowski P., 2017, Transactions of the Association for Computational Linguistics, V5, P135, DOI DOI 10.1162/TACLA00051
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   British Broadcasting Corporation (BBC), 2020, BBC
   Chen K., 2013, EFFICIENT ESTIMATION, P2
   Cho H, 2022, INFORM SOFTWARE TECH, V142, DOI 10.1016/j.infsof.2021.106743
   Choetkiertikul M, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-020-09898-5
   Choetkiertikul M, 2018, PROC IEEE ACM INT C, P244, DOI 10.1145/3183440.3194952
   CNET, 2019, BRIT AIRW FAC 230M G
   Data Privacy Manager, 2020, DATA PRIVACY MANAGER
   Devlin J, 2019, Arxiv, DOI arXiv:1810.04805
   European Commission, 2019, GDPR NUMB 2019 HAPP
   Fan Q, 2017, INT SYMP EMP SOFTWAR, P121, DOI 10.1109/ESEM.2017.19
   Gurses S., 2011, COMPUTERS PRIVACY DA, P1
   Harris ZS, 1954, WORD, V10, P146, DOI 10.1080/00437956.1954.11659520
   Huggingface, 2020, TOK
   Huggingface, 2020, TRANSFORMERS
   Kowsari K, 2019, INFORMATION, V10, DOI 10.3390/info10040150
   Lee SR, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P926, DOI 10.1145/3106237.3117776
   MCGRAW KO, 1992, PSYCHOL BULL, V111, P361, DOI 10.1037/0033-2909.111.2.361
   Moraes R, 2013, EXPERT SYST APPL, V40, P621, DOI 10.1016/j.eswa.2012.07.059
   Muller N.M., 2019, TEXT SPEECH DIALOGUE, P151
   National Legislative Assembly, 2019, THAIL PERS DAT PROT
   Office Journal of the European Union: General Data Protection Regulation (GDPR), 2016, GEN DAT PROT REG GDP
   Pandey N, 2017, INNOV SYST SOFTW ENG, V13, P279, DOI 10.1007/s11334-017-0294-1
   Pennington J., 2014, P 2014 C EMP METH NA, P1532
   Peters M, 2018, STUD LATEINAMERIKA, V32, P1, DOI 10.5771/9783845286846
   Privacy Affairs, 2020, GDPR FIN LIST FIND A
   Reina Y., 2020, TEXT PREPROCESSING B
   Reuters, 2020, REUTERS
   Sangaroonsilp P, 2022, REPLICATION PACKAGE
   Sangaroonsilp P, 2023, INFORM SOFTWARE TECH, V157, DOI 10.1016/j.infsof.2023.107162
   Sarker IH., 2021, DEEP LEARNING COMPRE
   Shirakawa M, 2015, PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB (WWW 2015), P960, DOI 10.1145/2736277.2741628
   Srivastava N, 2014, J MACH LEARN RES, V15, P1929
   State of California Department of Justice, 2018, California Consumer Privacy Act (CCPA)
   Swinhoe D., 2020, The 14 biggest data breaches of the 21st century
   TensorFlow, 2020, SEQ MOD
   Torre D, 2020, INT REQUIR ENG CONF, P136, DOI 10.1109/RE48521.2020.00025
   UNCTAD, 2020, Data protection and privacy legislation worldwide
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Wild C., 1997, WILCOXON RANK SUM TE
   Ye X, 2018, 2018 17TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P1438, DOI 10.1109/ICMLA.2018.00234
NR 51
TC 1
Z9 1
U1 2
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 20
DI 10.1007/s10515-023-00387-9
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MJ8
UT WOS:001020964500001
OA hybrid
DA 2024-07-18
ER

PT J
AU Lee, J
   Cho, H
   Lee, W
AF Lee, Jaehyung
   Cho, Hangyeol
   Lee, Woosuk
TI Madusa: mobile application demo generation based on usage scenarios
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Demo generation; Mobile applications; Integer linear programming;
   Android; Static analysis for android
AB Mobile applications have grown rapidly in size. This dramatic increases in size and complexity make mobile applications less accessible to a broader scope of users. The prevailing approach for better accessibility of mobile applications is to manually reimplement slimmed versions with a small but representative portion of a regular original app. Unfortunately, this approach imposes significant burden on developers. We propose a system called Madusa to enable developers to effectively customize and reduce their mobile applications for Android. Madusa takes as input an original app, an upper bound on the size of a reduced version, and usage scenarios as a high-level specification of its desired core functionality. The output is a reduced version of the app that is still correct with respect to the specification while not exceeding the size limit. Madusa constructs a graph representing dependencies among methods and resources and identifies a sub-part of the graph using integer linear programming to generate a reduced version that exhibits behaviors as similar as possible to the original app. Our experimental evaluation on a suite of 19 Android apps available on Google Play Store. Madusa effectively converges to the desired simplified apps by reducing the app size by 40% on average (maximally by 60%). We conclude our approach effectively removes redundant code and resources with respect to given usage scenarios.
C1 [Lee, Jaehyung; Cho, Hangyeol; Lee, Woosuk] Hanyang Univ, Dept Comp Sci & Engn, Ansan, South Korea.
C3 Hanyang University
RP Lee, W (corresponding author), Hanyang Univ, Dept Comp Sci & Engn, Ansan, South Korea.
EM woosuk@hanyang.ac.kr
RI Lee, Woosuk/ITV-2754-2023
OI Lee, Woosuk/0000-0002-1884-619X
FU National Research Foundation of Korea (NRF) [2020R1C1C1014518,
   2021R1A5A1021944]; Institute for Information amp; communications
   Technology Promotion (IITP) grant - Korea government (MSIT)
   [2021-0-00758]
FX The first two authors major in Bio Artificial Intelligence at Hanyang
   University. This research was supported by the National Research
   Foundation of Korea (NRF) grant (No. 2020R1C1C1014518, 2021R1A5A1021944)
   and Institute for Information & communications Technology Promotion
   (IITP) grant (No. 2021-0-00758) funded by the Korea government (MSIT).
CR Anders Bertelrud P.H, 2015, APP THINNING XCODE
   Quach A, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P869
   [Anonymous], 2021, UI APPL EXERCISER MO
   [Anonymous], 2021, GITHUB SMALI
   [Anonymous], 2021, IPHONES TOP APPS ARE
   [Anonymous], 2014, Google Play Store
   [Anonymous], 2021, ANDROID INSTANT APPS
   [Anonymous], 2021, apktool-a tool for reverse engineering 3rd party, closed, binary android apps
   [Anonymous], 2021, PROGUARD JAVA OPTIMI
   [Anonymous], 2020, CICMALDROID
   [Anonymous], 2021, GOOGLE PLAY INSTANT
   [Anonymous], 2021, APPS TRY NOW ANDROID
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Costantini G, 2011, LECT NOTES COMPUT SC, V6991, P505, DOI 10.1007/978-3-642-24559-6_34
   F-Droid, F DROID FREE OPEN SO
   github, ELLA TOOL BINARY INS
   Henderson M., 2018, GOOGLE I O 18
   Heo K, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P380, DOI 10.1145/3243734.3243838
   huawei, QUICK APPS HUAWEI DE
   jacoco, JaCoCo Java code coverage library
   Jiang YF, 2018, PROC INT SYMP SOFTW, P189, DOI 10.1109/ISSRE.2018.00029
   Jiang YF, 2016, P INT COMP SOFTW APP, P12, DOI 10.1109/COMPSAC.2016.146
   Lee Jaehyung, 2022, Zenodo, DOI 10.5281/ZENODO.7272254
   Liu JR, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P502, DOI 10.1109/SANER.2017.7884662
   PAPADIMITRIOU CH, 1981, J ACM, V28, P765, DOI 10.1145/322276.322287
   Pilgun A, 2020, ASIA PAC SOFWR ENG, P375, DOI 10.1109/APSEC51365.2020.00046
   Pilgun A, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3395042
   Qian CX, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1733
   Romdhana A, 2021, IEEE INT CONF SOFTW, P417, DOI 10.1109/ICST49551.2021.00053
   Tang Y., 2021, IEEE Transactions on Software Engineering
   Xie Q., 2021, IEEE T MOBILE COMPUT
   Yeh CC, 2015, P INT COMP SOFTW APP, P447, DOI 10.1109/COMPSAC.2015.125
NR 32
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
AR 8
DI 10.1007/s10515-022-00372-8
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7W4YO
UT WOS:000913519600001
OA hybrid
DA 2024-07-18
ER

PT J
AU Anupriya
   Singhrova, A
AF Anupriya
   Singhrova, Anita
TI Mobile traffic flow prediction using intelligent whale optimization
   algorithm
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE SDMN; Traffic forecasting; Whale optimization algorithm
AB The digital growth has triggered explosion of mobile and wireless scenario. This expansion propelled the high demand of wireless capacity especially bandwidth. The increased demand lead to the need of efficient utilization of critical resources in networks. Under such circumstances, software defined mobile network (SDMN) controller has emerged as one of the promising solution for efficient management of resources. As the data flow is not constant throughout, so is the resource requirement. The mobile traffic forecasting helps SDMN controller to allocate resources according to the fluctuating demand of traffic peaks or troughs. Different forecasting algorithms already exist to identify the solution but most of them fail to achieve the global optimum value. This paper motivates to make SDMN mobile network more reliable, congestion free and intelligent decision maker by introducing an intelligent whale optimization algorithm (IWOA) to identify optimal parameters of the forecasting model. The accuracy of the proposed model will improve network efficiency because of dynamic decisions based on forecasting results. The WOA offers slow rate of convergence along iterative process and tends to converge into local optimum. The proposed algorithm is predominantly using chaotic maps, weight factor and convergence factor to estimate and naturally adjust the intrinsic parameters of optimization. Along the iterative cycles, the proposed technique (IWOA) emend the effectiveness of search to reach towards the optimal solution. To illuminate the efficiency of the IWOA in forecasting model, it is compared over two different scenarios of datasets. Additionally, the results show the improved performance of the proposed IWOA in terms of sensitivity (0.02%), accuracy (3.57%), precision (0.05%) and F1-Score (0.04%) with regard to WOA.
C1 [Anupriya; Singhrova, Anita] Deenbandhu Chhotu Ram Univ Sci & Technol, Dept Comp Sci & Engn, Sonipat, India.
C3 Deenbandhu Chhotu Ram University of Science & Technology
RP Anupriya (corresponding author), Deenbandhu Chhotu Ram Univ Sci & Technol, Dept Comp Sci & Engn, Sonipat, India.
EM anupriya.nain3@gmail.com; nidhianita@gmail.com
CR Abolfazli S, 2014, J NETW COMPUT APPL, V40, P345, DOI 10.1016/j.jnca.2013.09.009
   Adnan RM, 2020, J HYDROL, V586, DOI 10.1016/j.jhydrol.2019.124371
   Alsattar HA, 2020, ARTIF INTELL REV, V53, P2237, DOI 10.1007/s10462-019-09732-5
   Anita, 2019, SWARM EVOL COMPUT, V48, P93, DOI 10.1016/j.swevo.2019.03.013
   [Anonymous], 2020, Cisco Annual Internet Report (2018-2023) White Paper
   Anupriya, 2021, ICT EXPRESS, V7, P143, DOI 10.1016/j.icte.2021.05.005
   Anupriya Singrova A, 2021, INT J FUTURE GENER C, V14, P795
   Fan GS, 2021, COMPUT SCI INF SYST, V18, P23, DOI 10.2298/CSIS200229041F
   Fiandrino C, 2020, IEEE COMMUN MAG, V58, P20, DOI 10.1109/MCOM.001.1900601
   Jain M, 2019, SWARM EVOL COMPUT, V44, P148, DOI 10.1016/j.swevo.2018.02.013
   Karaboga D, 2007, J GLOBAL OPTIM, V39, P459, DOI 10.1007/s10898-007-9149-x
   Kennedy J, 1995, 1995 IEEE INTERNATIONAL CONFERENCE ON NEURAL NETWORKS PROCEEDINGS, VOLS 1-6, P1942, DOI 10.1109/icnn.1995.488968
   Khishe M, 2020, EXPERT SYST APPL, V149, DOI 10.1016/j.eswa.2020.113338
   Masadeh R, 2019, INT J ADV COMPUT SC, V10, P388
   Mehrabian AR, 2006, ECOL INFORM, V1, P355, DOI 10.1016/j.ecoinf.2006.07.003
   Mirjalili S, 2016, ADV ENG SOFTW, V95, P51, DOI 10.1016/j.advengsoft.2016.01.008
   Mirjalili S, 2015, KNOWL-BASED SYST, V89, P228, DOI 10.1016/j.knosys.2015.07.006
   Mirjalili S, 2014, ADV ENG SOFTW, V69, P46, DOI 10.1016/j.advengsoft.2013.12.007
   Oliveira DHL, 2021, IEEE T NETW SERV MAN, V18, P94, DOI 10.1109/TNSM.2021.3055174
   Özbek B, 2019, UEEE INT SYM PERS IN, P1200, DOI 10.1109/pimrc.2019.8904217
   Sayed GI, 2018, J CLASSIF, V35, P300, DOI 10.1007/s00357-018-9261-2
   Sciancalepore V, 2017, IEEE INFOCOM SER
   Soares J, 2011, IEEE POW ENER SOC GE
   SRINIVAS M, 1994, IEEE T SYST MAN CYB, V24, P656, DOI 10.1109/21.286385
   Yasin Z. M., 2020, IJ-AI, V9, P417, DOI [10.11591/ijai.v9.i3.pp417-423, DOI 10.11591/IJAI.V9.I3.PP417-423]
   Zhang CY, 2018, PROCEEDINGS OF THE 2018 THE NINETEENTH INTERNATIONAL SYMPOSIUM ON MOBILE AD HOC NETWORKING AND COMPUTING (MOBIHOC '18), P231, DOI 10.1145/3209582.3209606
NR 26
TC 1
Z9 1
U1 1
U2 21
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 48
DI 10.1007/s10515-022-00349-7
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2S1YB
UT WOS:000821594300001
DA 2024-07-18
ER

PT J
AU Nguyen, DA
   Minh, KD
   Nguyen, ML
   Hung, PN
AF Nguyen, Duc-Anh
   Do Minh, Kha
   Nguyen, Minh Le
   Hung, Pham Ngoc
TI A symbolic execution-based method to perform untargeted attack on
   feed-forward neural networks
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Symbolic execution; SMT solver; Feed-forward neural network; Robustness;
   Adversarial example generation
ID GENERATION
AB DeepCheck is a symbolic execution-based method to attack feed-forward neural networks. However, in the untargeted attack, DeepCheck suffers from a low success rate due to the limitation of preserving neuron activation patterns and the weakness of solving the constraint by SMT solvers. Therefore, this paper proposes a method to improve the success rate of DeepCheck. Compared to DeepCheck, the proposed method has two main differences including (i) does not force to preserve neuron activation patterns and (ii) uses a heuristic solver rather than SMT solvers. The experimental results on MNIST, Fashion-MNIST, and A-Z handwritten alphabets show three promising results. In the 1-pixel attack, while DeepCheck obtains an average of 0.7% success rate, the proposed method could achieve an average of 54.3% success rate. In the n-pixel attack, while DeepCheck obtains an average of at most 16.9% success rate for using the Z3 solver and at most 26.8% for using the SMTInterpol solver, the proposed method achieves an average of at most 98.7% success rate. In terms of solving cost, while the average running time of the proposed heuristic solver is around 0.4 s per attack, the average running time of DeepCheck is usually larger significantly. These results show the effectiveness of the proposed method to deal with the limitation of DeepCheck.
C1 [Nguyen, Duc-Anh; Do Minh, Kha; Hung, Pham Ngoc] Vietnam Natl Univ, VNU Univ Engn & Technol VNU UET, 144 Xuanthuy Str, Hanoi 100000, Vietnam.
   [Nguyen, Minh Le] Japan Adv Inst Sci & Technol JAIST, Sch Informat Sci, ASAHIDAI 1-1, Nomi 9231211, Japan.
C3 Vietnam National University Hanoi; Japan Advanced Institute of Science &
   Technology (JAIST)
RP Hung, PN (corresponding author), Vietnam Natl Univ, VNU Univ Engn & Technol VNU UET, 144 Xuanthuy Str, Hanoi 100000, Vietnam.
EM nguyenducanh@vnu.edu.vn; khadm@vnu.edu.vn; nguyenml@jaist.ac.jp;
   hungpn@vnu.edu.vn
RI Nguyen, Truong/JXN-9786-2024
OI Ngoc Hung, Pham/0000-0002-5584-5823
FU Ministry of Science and Technology, Vietnam [KC-4.0-07/19-25,
   KC4.0/19-25]; Vingroup JSC; Vingroup Innovation Foundation (VINIF),
   Institute of Big Data [VINIF.2021.TS.105, VINIF.2021.ThS.24]
FX This work is supported by Ministry of Science and Technology, Vietnam
   under project number KC-4.0-07/19-25, Program KC4.0/19-25. Duc-Anh
   Nguyen was funded by Vingroup JSC and supported by the Master, PhD
   Scholarship Programme of Vingroup Innovation Foundation (VINIF),
   Institute of Big Data, code VINIF.2021.TS.105. Kha Do Minh was funded by
   Vingroup JSC and supported by the Master, PhD Scholarship Programme of
   Vingroup Innovation Foundation (VINIF), Institute of Big Data, code
   VINIF.2021.ThS.24
CR [Anonymous], 2015, CoRR
   Baluja Shumeet, 2017, ARXIV170309387
   Bruttomesso R, 2008, LECT NOTES COMPUT SC, V5123, P299
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Clevert D.A, 2015, 4 INT C LEARN REPR I
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dutertre B, 2006, LECT NOTES COMPUT SC, V4144, P81, DOI 10.1007/11817963_11
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Goodfellow I. J., 2015, 3 INT C LEARNING REP
   Gopinath D, 2019, PROC INT SYMP SOFTW, P313, DOI 10.1109/ISSRE.2019.00039
   Gopinath D, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P282, DOI 10.1109/ICSE-Companion.2019.00115
   Hendrycks D., 2016, ARXIV160608415
   Hoenicke J, 2019, LECT NOTES COMPUT SC, V11388, P297, DOI 10.1007/978-3-030-11245-5_14
   Isola P, 2017, PROC CVPR IEEE, P5967, DOI 10.1109/CVPR.2017.632
   Johnson J, 2016, LECT NOTES COMPUT SC, V9906, P694, DOI 10.1007/978-3-319-46475-6_43
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   King DB, 2015, ACS SYM SER, V1214, P1
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kurakin A., 2016, WORKSHOP TRACK P
   Kurakin A, 2018, SPRING SER CHALLENGE, P195, DOI 10.1007/978-3-319-94042-7_11
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Ma L, 2018, IEEE INT CONF AUTOM, P120, DOI 10.1145/3238147.3238202
   Mangal R., 2019, ARXIV190205983
   Mohri M., 2012, Foundations of Machine Learning
   Monniaux D, 2016, LECT NOTES COMPUT SC, V9890, P401, DOI 10.1007/978-3-319-45641-6_26
   Nair Vinod, 2010, INT C INT C MACHINE, P807
   Noller Y., 2021, ARXIV210300124
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Perry DM, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P68, DOI 10.1145/3092703.3092728
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Su T, 2014, INT CONF SOFTW SECUR, P98, DOI 10.1109/SERE.2014.23
   Sun Y., 2018, Testing deep neural networks
   Sun Youcheng, 2018, ARXIV180500089
   Szegedy C, 2014, Arxiv, DOI [arXiv:1312.6199, DOI 10.1109/CVPR.2015.7298594]
   Tian Y., 2017, ARXIV170808559
   Williams N, 2005, LECT NOTES COMPUT SC, V3463, P281
   Xiao Chaowei, 2018, 6 INT C LEARN REPR I
   Xiao H., 2017, arXiv
   Zhang JM, 2022, IEEE T SOFTWARE ENG, V48, P1, DOI 10.1109/TSE.2019.2962027
NR 39
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 46
DI 10.1007/s10515-022-00345-x
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2O0PZ
UT WOS:000818772200001
DA 2024-07-18
ER

PT J
AU Xiang, Y
   Yang, XW
   Huang, H
   Huang, ZX
   Li, MQ
AF Xiang, Yi
   Yang, Xiaowei
   Huang, Han
   Huang, Zhengxin
   Li, Miqing
TI Sampling configurations from software product lines via
   probability-aware diversification and SAT solving
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software product lines; Diverse sampling; Probability-aware
   diversification; SAT solving
ID EVOLUTIONARY ALGORITHMS; CONSTRAINTS; SELECTION; SEARCH; MODELS
AB Sampling a small, valid and representative set of configurations from software product lines (SPLs) is important, yet challenging due to a huge number of possible configurations to be explored. Recently, the sampling strategy based on satisfiability (SAT) solving has enjoyed great popularity due to its high efficiency and good scalability. However, this sampling offers no guarantees on diversity, especially in terms of the number of selected features, an important property to characterize a configuration. In this paper, we propose a probability-aware diversification (PaD) strategy to cooperate with SAT solving in generating diverse configurations, with the effect that valid configurations are efficiently generated by SAT solving while also maintaining diversity brought by PaD. Experimental results on 51 public SPLs show that, when working cooperatively with PaD, the performance (regarding diversity) of off-the-shelf SAT solvers has substantial improvements, with large effect sizes observed on more than 71% of all the cases. Furthermore, we propose a general search-based framework where PaD and evolutionary algorithms can work together, and instantiate this framework in the context of search-based diverse sampling and search-based multi-objective SPL configuration (where there is a practical need of generating diverse configurations). It is demonstrated by the experimental results that PaD also brings abundant performance gains to these search-based approaches. Finally, we apply PaD to a practical problem, i.e., machine learning based performance predictions of SPLs, and show that using PaD tends to improve the accuracy of performance prediction models.
C1 [Xiang, Yi; Yang, Xiaowei; Huang, Han] South China Univ Technol, Sch Software Engn, Guangzhou 510006, Guangdong, Peoples R China.
   [Huang, Zhengxin] Youjiang Med Univ Nationalities, Lab Comp Sci & Math, Baise, Guangxi, Peoples R China.
   [Li, Miqing] Univ Birmingham, Ctr Excellence Res Computat Intelligence & Applic, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
C3 South China University of Technology; Youjiang Medical University for
   Nationalities; University of Birmingham
RP Yang, XW (corresponding author), South China Univ Technol, Sch Software Engn, Guangzhou 510006, Guangdong, Peoples R China.
EM xiangyi@scut.edu.cn; xwyang@scut.edu.cn; hhan@scut.edu.cn;
   huangzhx26@mail2.sysu.edu.cn; limitsing@gmail.com
RI Li, Miqing/P-4153-2015; Xiang, Yi/B-8462-2014; Liu,
   Yining/KHC-6217-2024; Zhang, Can/JUU-9511-2023; li,
   fangyu/KCY-0521-2024; su, hang/KEH-2976-2024
OI Li, Miqing/0000-0002-8607-9607; Liu, Yining/0000-0002-2218-2349; li,
   fangyu/0009-0009-8303-9157; 
FU Guangdong Basic and Applied Basic Research Foundation [2019A1515011700,
   2019A1515011411]; National Natural Science Foundation of China
   [61906069, 61773410, 61876207]; Science and Technology Program of
   Guangzhou [202002030355, 201802010007]; Guangdong Province Key Area R D
   Program [2018B010109003]; Fundamental Research Funds for the Central
   Universities [2020ZYGXZR014]
FX This work was supported by Guangdong Basic and Applied Basic Research
   Foundation (2019A1515011700, 2019A1515011411), National Natural Science
   Foundation of China (61906069, 61773410, 61876207), Science and
   Technology Program of Guangzhou (202002030355, 201802010007), Guangdong
   Province Key Area R &D Program (2018B010109003), and Fundamental
   Research Funds for the Central Universities (2020ZYGXZR014).
CR Achlioptas D, 2018, LECT NOTES COMPUT SC, V10929, P135, DOI 10.1007/978-3-319-94144-8_9
   Al-Hajjaji M, 2017, ACM SIGPLAN NOTICES, V52, P144, DOI [10.1145/2993236.2993253, 10.1145/3093335.2993253]
   [Anonymous], 2010, J SATISFIABIL BOOLEA, DOI DOI 10.3233/SAT190075
   [Anonymous], 2008, J. Satisf. Boolean Model. Comput., DOI 10.3233/sat190039
   [Anonymous], 2015, P 2015 INT S SOFTWAR, DOI DOI 10.1145/2771783.2771808
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Audemard G, 2009, 21ST INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-09), PROCEEDINGS, P399
   Balint A., 2012, PROC SAT 2012, P16
   Baranov E, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1114, DOI 10.1145/3368089.3409744
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Cai S, 2013, FASTER IMPLEMENTATIO
   Cai SW, 2015, COMPUT J, V58, P2864, DOI 10.1093/comjnl/bxu135
   Chakraborty Supratik, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P304, DOI 10.1007/978-3-662-46681-0_25
   Chen JF, 2019, IEEE T SOFTWARE ENG, V45, P597, DOI 10.1109/TSE.2018.2790925
   Coello C.A., 2007, Evolutionary algorithms for solving multi-objective problems, V5
   Cohen M.B., 2007, P 2007 INT S SOFTW T, P129
   Cohen MB, 2008, IEEE T SOFTWARE ENG, V34, P633, DOI 10.1109/TSE.2008.50
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dutra R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P549, DOI 10.1145/3180155.3180248
   Garvin BJ, 2011, EMPIR SOFTW ENG, V16, P61, DOI 10.1007/s10664-010-9135-7
   Gogate V, 2006, LECT NOTES COMPUT SC, V4204, P711
   Guo J., 2014, P 29 ACMIEEE INT C A, P409, DOI 10.1145/2642937.2642971
   Guo JM, 2019, SOFTW SYST MODEL, V18, P1447, DOI 10.1007/s10270-017-0610-0
   Guo JM, 2013, IEEE INT CONF AUTOM, P301, DOI 10.1109/ASE.2013.6693089
   Guo JM, 2011, J SYST SOFTWARE, V84, P2208, DOI 10.1016/j.jss.2011.06.026
   Halin A, 2019, EMPIR SOFTW ENG, V24, P674, DOI 10.1007/s10664-018-9635-4
   Henard C, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE CO-LOCATED WORKSHOPS (SPLC'13 WORKSHOPS), P126
   Henard C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P517, DOI 10.1109/ICSE.2015.69
   Henard C, 2014, IEEE T SOFTWARE ENG, V40, P650, DOI 10.1109/TSE.2014.2327020
   Heradio Ruben, 2020, SPLC '20: Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A, DOI 10.1145/3382025.3414951
   Hierons RM, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2897760
   Johansen MF, 2011, LECT NOTES COMPUT SC, V6981, P638, DOI 10.1007/978-3-642-24485-8_47
   Johansen Martin Fagereng, 2012, P 16 INT SOFTWARE PR, P46, DOI [10.1145/2362536.2362547, DOI 10.1145/2362536.2362547]
   Kaltenecker C, 2019, PROC INT CONF SOFTW, P1084, DOI 10.1109/ICSE.2019.00112
   Kang Kyo C, 1990, Technical Report
   Krieter S, 2020, PROCEEDINGS OF THE 14TH INTERNATIONAL WORKING CONFERENCE ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS '20), DOI 10.1145/3377024.3377042
   Lehman J., 2008, ALIFE, P329
   Lehman J, 2011, EVOL COMPUT, V19, P189, DOI 10.1162/EVCO_a_00025
   Li MQ, 2019, ACM COMPUT SURV, V52, DOI 10.1145/3300148
   Li MQ, 2018, 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING TECHNOLOGIES RESULTS (ICSE-NIER), P17, DOI 10.1145/3183399.3183405
   Li MQ, 2015, ARTIF INTELL, V228, P45, DOI 10.1016/j.artint.2015.06.007
   Liang Jia Hui, 2015, P 19 INT C SOFTW PRO, P91, DOI [10.1145/2791060, DOI 10.1145/2791060]
   Liebig J., 2013, P 2013 9 JOINT M FDN, P81, DOI DOI 10.1145/2491411.2491437
   Lopez-Herrejon R. E., 2015, 8 IEEE INT C SOFTW T, P1, DOI DOI 10.1109/ICSTW.2015.7107435
   Luo C, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1081, DOI 10.1145/3468264.3468622
   Marques-Silva JP, 1999, IEEE T COMPUT, V48, P506, DOI 10.1109/12.769433
   Medeiros F, 2016, PROC INT CONF SOFTW, P643, DOI 10.1145/2884781.2884793
   Melo J, 2016, TENTH INTERNATIONAL WORKSHOP ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS 2016), P3, DOI 10.1145/2866614.2866615
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Oh J., 2020, TR2001 U TEX AUST
   Oh J, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P61, DOI 10.1145/3106237.3106273
   Oh Jeho, 2019, P 23 INT SYSTEMS SOF, VA, DOI DOI 10.1145/3336294.3342359
   Olaechea R, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P92, DOI 10.1145/2648511.2648521
   Pereira JA, 2020, PROCEEDINGS OF THE ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE'20), P277, DOI 10.1145/3358960.3379137
   Pett T, 2020, SPLC'19: PROCEEDINGS OF THE 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL A, P78, DOI 10.1145/3336294.3336322
   Plazar Q, 2019, IEEE INT CONF SOFTW, P240, DOI 10.1109/ICST.2019.00032
   Pohl Richard, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P313, DOI 10.1109/ASE.2011.6100068
   Sarkar A, 2015, IEEE INT CONF AUTOM, P342, DOI 10.1109/ASE.2015.45
   Sayyad Abdel Salam, 2013, Proceedings of the 2013 3rd International Workshop on Replication in Empirical Software Engineering Research (RESER 2013), P84, DOI 10.1109/RESER.2013.6
   Sayyad AS, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P492, DOI 10.1109/ICSE.2013.6606595
   Sayyad AS, 2013, IEEE INT CONF AUTOM, P465, DOI 10.1109/ASE.2013.6693104
   Sayyad AS, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P22, DOI 10.1109/CMSBSE.2013.6604432
   SELMAN B, 1992, AAAI-92 PROCEEDINGS : TENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, P440
   Siegmund N, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P284, DOI 10.1145/2786805.2786845
   Soos M, 2020, LECT NOTES COMPUT SC, V12224, P463, DOI 10.1007/978-3-030-53288-8_22
   Sundermann Chico, 2020, VAMOS '20: Proceedings of the 14th International Working Conference on Variability Modelling of Software-Intensive Systems, DOI 10.1145/3377024.3377025
   Thurley M, 2006, LECT NOTES COMPUT SC, V4121, P424
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Xiang Y, 2022, PROC INT CONF SOFTW, P1945, DOI 10.1145/3510003.3510053
   Xiang Y, 2021, IEEE T SOFTWARE ENG, V48, P2317, DOI 10.1109/TSE.2021.3057853
   Xiang Y, 2020, EMPIR SOFTW ENG, V25, P591, DOI 10.1007/s10664-019-09761-2
   Xiang Y, 2018, ACM T SOFTW ENG METH, V26, DOI 10.1145/3176644
   Xiang Y, 2017, IEEE T EVOLUT COMPUT, V21, P131, DOI 10.1109/TEVC.2016.2587808
   Xue YN, 2019, NEUROCOMPUTING, V364, P32, DOI 10.1016/j.neucom.2019.06.075
   Xue YX, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1231, DOI 10.1145/3180155.3180257
   Zhang WJ, 2020, PROCEEDINGS OF THE TWENTY-NINTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1177
   Zitzler E, 1999, IEEE T EVOLUT COMPUT, V3, P257, DOI 10.1109/4235.797969
   Zitzler E, 2004, LECT NOTES COMPUT SC, V3242, P832
NR 80
TC 1
Z9 1
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 54
DI 10.1007/s10515-022-00348-8
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4G9BQ
UT WOS:000849482700001
DA 2024-07-18
ER

PT J
AU Mythily, M
   Saha, S
   Selvam, S
   Swamidason, ITJ
AF Mythily, M.
   Saha, Sanchari
   Selvam, Sudhakar
   Swamidason, Iwin Thanakumar Joseph
TI BPM supported model generation by contemplating key elements of
   information security
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model transformation; UML; Secure software; Software automation
ID REQUIREMENTS; TRANSFORMATION; FRAMEWORK; PATTERNS
AB Model-based software engineering has made great strides in developing new software that would outshine traditional methodology. Due to this, well-defined support has been provided for process modeling by the introduction of varieties of notations to develop the UML models. In addition to this, Business Process Modeling (BPM) is a pioneer in introducing process models with domain knowledge representation. Most of the software has similarities based on their operations, structures, validation, and so on. So, an automatic process involvement supports them in terms of cost and duration. This proposed secure Business Process Model will support the development phase and help incorporate the security code along with customer requirements. The proposed Secured Business Process (SecBP) system is an automation process to fine-tune the software engineering design process automatically. Security requirement incorporation requires an image to text and vice versa conversion at the early stages of the software design process. The security integration process is optimized by a decision learning algorithm. Hence the proposed system brings an output model as a domain-specific model with security mapping.
C1 [Mythily, M.] Karunya Inst Technol & Sci, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India.
   [Saha, Sanchari] CMR Inst Technol, Dept Comp Sci & Engn, Bangalore, Karnataka, India.
   [Selvam, Sudhakar] SRM Inst Sci & Technol, Dept Comp Sci & Engn, Chengalpattu, India.
   [Swamidason, Iwin Thanakumar Joseph] Koneru Lakshmaiah Educ Fdn, Dept Comp Sci & Engn, Guntur, Andhra Pradesh, India.
C3 Karunya Institute of Technology & Sciences; SRM Institute of Science &
   Technology Chennai; Koneru Lakshmaiah Education Foundation (K L Deemed
   to be University)
RP Mythily, M (corresponding author), Karunya Inst Technol & Sci, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India.
EM Mythily.m@gmail.com; saha.sanchari85@gmail.com; sudhakar.sree@gmail.com;
   iwineee2006@gmail.com
RI S, Iwin Thanakumar Joseph/AAC-8169-2019
OI S, Iwin Thanakumar Joseph/0000-0002-0452-4608; M,
   Mythily/0000-0002-3534-6285
CR Aburub F, 2007, INFORM SOFTWARE TECH, V49, P1162, DOI 10.1016/j.infsof.2006.12.002
   Aguilar-Savén RS, 2004, INT J PROD ECON, V90, P129, DOI 10.1016/S0925-5273(03)00102-6
   [Anonymous], 2002, UML XML SCHEMA, DOI DOI 10.1145/563932.563924
   Basciani F, 2020, IEEE T SOFTWARE ENG, V46, P251, DOI 10.1109/TSE.2018.2846223
   Bendraou R, 2010, IEEE T SOFTWARE ENG, V36, P662, DOI 10.1109/TSE.2009.85
   Bernauer M., 2004, REPRESENTING XML SCH
   Bhardwaj R, 2013, INT J ADV RES COMPUT, V3, P2277
   Broad J., 2013, Risk Management Framework: A lab-based approach to securing Information Systems
   Chen J.I.Z., 2020, Journal of Information Technology, V2, P108
   Cimatti A, 2011, SOFTW SYST MODEL, V10, P147, DOI 10.1007/s10270-009-0130-7
   D'Aubeterre F, 2008, EUR J INFORM SYST, V17, P528, DOI 10.1057/ejis.2008.42
   De Castro V, 2011, INFORM SOFTWARE TECH, V53, P87, DOI 10.1016/j.infsof.2010.09.002
   de Sousa TC, 2011, INNOV SYST SOFTW ENG, V7, P293, DOI 10.1007/s11334-011-0169-9
   Domínguez E, 2011, INFORM SOFTWARE TECH, V53, P34, DOI 10.1016/j.infsof.2010.08.001
   Faridmoayer S., 2017, INT C KNOWL BASED EN, DOI [10.1109/KBEI.2017.8324973, DOI 10.1109/KBEI.2017.8324973]
   Fenza G, 2021, IEEE INT CONF COMP, DOI 10.1109/CIVEMSA52099.2021.9493582
   Flater David, 2009, Proceedings of the 2009 International Conference on Information & Knowledge Engineering. IKE 2009, P207
   Fleck M, 2017, IEEE T SOFTWARE ENG, V43, P1009, DOI 10.1109/TSE.2017.2654255
   Frankova G, 2011, J SYST SOFTWARE, V84, P1351, DOI 10.1016/j.jss.2011.03.077
   Genero M, 2005, J OBJECT TECHNOL, V4, P59, DOI 10.5381/jot.2005.4.9.a1
   Georg G, 2009, INFORM SOFTWARE TECH, V51, P846, DOI 10.1016/j.infsof.2008.05.004
   Gorschek T, 2008, INFORM SOFTWARE TECH, V50, P67, DOI 10.1016/j.infsof.2007.10.003
   Hadavi MA, 2008, LECT NOTES ENG COMP, P985
   Haley CB, 2008, IEEE T SOFTWARE ENG, V34, P133, DOI 10.1109/TSE.2007.70754
   Hamid B, 2018, COMPUT SECUR, V77, P315, DOI 10.1016/j.cose.2018.03.016
   Heidari F, 2011, LECT NOTES BUS INF P, V88, P85
   Jiirjens Jan, 2007, International Journal on Software Tools for Technology Transfer, V9, P527, DOI 10.1007/s10009-007-0048-8
   Kempf D, 2021, ACM T MATH SOFTWARE, V47, DOI 10.1145/3424144
   Kim DK, 2017, J SYST SOFTWARE, V125, P289, DOI 10.1016/j.jss.2016.12.019
   Klos C, 2023, IEEE T ENG MANAGE, V70, P2017, DOI 10.1109/TEM.2021.3075502
   Kuhrmann M, 2014, SCI COMPUT PROGRAM, V79, P172, DOI 10.1016/j.scico.2012.03.007
   Lano K, 2018, J SYST SOFTWARE, V140, P48, DOI 10.1016/j.jss.2018.03.001
   List B, 2005, LECT NOTES COMPUT SC, V3770, P85, DOI 10.1007/11568346_10
   Liu H, 2017, INT CONF MACH LEARN, P569
   Liu L., 2001, STRAW'01, P1
   Lodderstedt T, SECUREUML UML BASED
   MCCABE TJ, 1989, COMMUN ACM, V32, P1415, DOI 10.1145/76380.76382
   Mellado D, 2007, COMPUT STAND INTER, V29, P244, DOI 10.1016/j.csi.2006.04.002
   Mellado D, 2014, COMPUT STAND INTER, V36, P711, DOI 10.1016/j.csi.2013.12.006
   Mellado D, 2010, INFORM SOFTWARE TECH, V52, P1094, DOI 10.1016/j.infsof.2010.05.007
   Molina F, 2009, ADV ENG SOFTW, V40, P1306, DOI 10.1016/j.advengsoft.2009.01.018
   Mouratidis H, 2005, INFORM SYST, V30, P609, DOI 10.1016/j.is.2004.06.002
   Mythily M, 2019, CLUSTER COMPUT, V22, P12351, DOI 10.1007/s10586-017-1618-5
   Mythily M, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2213
   Nadir S, 2015, 2015 INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND COMPUTATIONAL INTELLIGENCE (CSCI), P13, DOI 10.1109/CSCI.2015.186
   PlantUML, 2015, PLANTUML OP SOURC TO
   Qomariyah N. N., 2020, 8 INT C INFORM COMMU, P1, DOI [10.1109/ICoICT49345.2020.9166341, DOI 10.1109/ICOICT49345.2020.9166341]
   Robbins JE, 2000, INFORM SOFTWARE TECH, V42, P79, DOI 10.1016/S0950-5849(99)00083-X
   Rodríguez A, 2007, IEICE T INF SYST, VE90D, P745, DOI 10.1093/ietisy/e90-d.4.745
   Rodríguez A, 2011, DECIS SUPPORT SYST, V51, P446, DOI 10.1016/j.dss.2011.01.018
   Rodríguez A, 2010, INFORM SOFTWARE TECH, V52, P945, DOI 10.1016/j.infsof.2010.03.015
   Cuadrado JS, 2022, IEEE T SOFTWARE ENG, V48, P1097, DOI 10.1109/TSE.2020.3011388
   Sánchez-González L, 2017, SOFTW SYST MODEL, V16, P759, DOI 10.1007/s10270-015-0482-0
   Sanjay A., 2020, INT C SMART INN DES, P5, DOI [10.1109/ICSIDEMPC49020.2020, DOI 10.1109/ICSIDEMPC49020.2020]
   Sebastián G, 2020, IEEE LAT AM T, V18, P1433, DOI 10.1109/TLA.2020.9111679
   Shin ME, 2007, SCI COMPUT PROGRAM, V66, P60, DOI 10.1016/j.scico.2006.10.009
   Shousha M, 2012, IEEE T SOFTWARE ENG, V38, P354, DOI 10.1109/TSE.2010.107
   Team N, 1996, INFORM SYST, V21, P515, DOI 10.1016/0306-4379(96)00026-9
   Thilaka B., 2020, 2020 2nd International Conference on Innovative Mechanisms for Industry Applications (ICIMIA). Proceedings, P598, DOI 10.1109/ICIMIA48430.2020.9074885
   Wang H., 2021, Journal of Soft Computing Paradigm, V3, P19
   Wang HH, 2014, SCI COMPUT PROGRAM, V95, P93, DOI 10.1016/j.scico.2014.02.027
   Wiegers K., 2014, SOFTWARE REQUIREMENT, V2nd
   Wimmer Manuel., 2007, System Sciences, p285b, DOI DOI 10.1109/HICSS.2007.572
   Wolter C, 2009, J SYST ARCHITECT, V55, P211, DOI 10.1016/j.sysarc.2008.10.002
NR 64
TC 0
Z9 0
U1 2
U2 11
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 23
DI 10.1007/s10515-022-00321-5
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YS2KL
UT WOS:000750511400002
DA 2024-07-18
ER

PT J
AU Rubio, R
   Martí-Oliet, N
   Pita, I
   Verdejo, A
AF Rubio, Ruben
   Marti-Oliet, Narciso
   Pita, Isabel
   Verdejo, Alberto
TI Model checking strategy-controlled systems in rewriting logic
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Rewriting strategies; Model checking; Maude; Formal methods
ID OPERATIONAL SEMANTICS; IMPLEMENTATION; FRAMEWORK; LANGUAGE; AUTOMATA;
   MAUDE
AB Rewriting logic and its implementation Maude are an expressive framework for the formal specification and verification of software and other kinds of systems. Concurrency is naturally represented by nondeterministic local transformations produced by the application of rewriting rules over algebraic terms in an equational theory. Some aspects of the global behavior of the systems or additional constraints sometimes require restricting this nondeterminism. Rewriting strategies are used as a higher-level and modular resource to cleanly capture these requirements, which can be easily expressed in Maude with an integrated strategy language. However, strategy-aware specifications cannot be verified with the builtin LTL model checker, making strategies less useful and attractive. In this paper, we discuss model checking for strategy-controlled systems, and present a strategy-aware extension of the Maude LTL model checker. The expressivity of the strategy language is discussed in relation to model checking, the model checker is illustrated with multiple application examples, and its performance is compared.
C1 [Rubio, Ruben; Marti-Oliet, Narciso; Pita, Isabel; Verdejo, Alberto] Univ Complutense Madrid, Fac Informat, Madrid, Spain.
C3 Complutense University of Madrid
RP Rubio, R (corresponding author), Univ Complutense Madrid, Fac Informat, Madrid, Spain.
EM rubenrub@ucm.es; narciso@ucm.es; ipandreu@ucm.es; jalberto@ucm.es
RI ; Rubio, Ruben/V-3138-2017
OI Marti-Oliet, Narciso/0000-0002-6576-762X; Verdejo,
   Alberto/0000-0002-7374-3214; Pita, Isabel/0000-0003-4915-5452; Rubio,
   Ruben/0000-0003-2983-3404
FU Spanish Ministry of Science and Innovation [PID2019-108528RB-C22];
   Spanish Ministry of Universities [FPU17/02319]
FX This work was partially supported by the Spanish Ministry of Science and
   Innovation (PID2019-108528RB-C22). Ruben Rubio is partially supported by
   the Spanish Ministry of Universities (FPU17/02319).
CR Andrei O, 2007, THEOR COMPUT SCI, V373, P163, DOI 10.1016/j.tcs.2006.12.016
   Andrei O, 2006, LECT NOTES COMPUT SC, V4060, P194, DOI 10.1007/11780274_11
   Andrei O, 2009, ELECTRON NOTES THEOR, V238, P23, DOI 10.1016/j.entcs.2009.05.011
   [Anonymous], 1984, HEURISTICS INTELLIGE
   [Anonymous], 2003, Terese: Term Rewriting Systems.
   [Anonymous], 1980, 7 ACM S PRINC PROGR, DOI DOI 10.1145/567446.567463
   Asarin E, 1995, LECT NOTES COMPUT SC, V999, P1
   Atzei N, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1124, DOI 10.1145/3338906.3341173
   Baader Franz., 1998, Term rewriting and all that, DOI [10.1017/CBO9781139172752, DOI 10.1017/CBO9781139172752]
   Balland E, 2007, LECT NOTES COMPUT SC, V4533, P36
   Barendregt H., 2014, LAMBDA CALCULUS ITS, V131
   Borovansky P., 2001, International Journal of Foundations of Computer Science, V12, P69, DOI 10.1142/S0129054101000412
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouhoula A., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P67, DOI 10.1007/BFb0030589
   Bourdier T, 2010, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.15.1
   Braga C, 2007, ELECTRON NOTES THEOR, V175, P3, DOI 10.1016/j.entcs.2006.10.024
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Clarke E.M., 2016, HDB MODEL CHECKING, DOI DOI 10.1007/978-3-319-10575-8_8
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Clarke EM, 1999, MODEL CHECKING, P1
   Clavel M., 2020, MAUDE MANUAL V31
   Clavel M., 2007, ALL MAUDE A HIGH PER, DOI DOI 10.1007/978-3-540-71999-1
   David Alexandre, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P206, DOI 10.1007/978-3-662-46681-0_16
   Dijkstra E.W., 1982, EWD 447: On the role of scientific thought. Selected Writings on Computing: A Personal Perspective, P60, DOI DOI 10.1007/978-1-4612-5695-3
   Durán F, 2020, J LOG ALGEBR METHODS, V110, DOI 10.1016/j.jlamp.2019.100497
   Eker S, 2007, ELECTRON NOTES THEOR, V174, P3, DOI 10.1016/j.entcs.2006.03.017
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   Ene N.C., 2020, APPL MATH INFORMATIC, V334, P117, DOI [10.1007/978-3-030-56356-1_8, DOI 10.1007/978-3-030-56356-1_8]
   Fernandez Maribel, 2020, PPDP '20: Proceedings of the 22nd International Symposium on Principles and Practice of Declarative Programming, DOI 10.1145/3414080.3414090
   Fernández M, 2019, MATH STRUCT COMP SCI, V29, P615, DOI 10.1017/S0960129518000270
   Fernández M, 2018, J LOG ALGEBR METHODS, V96, P12, DOI 10.1016/j.jlamp.2017.12.005
   Finkel O, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(3:12)2014
   Gastin P, 2001, LECT NOTES COMPUT SC, V2102, P53
   Hidalgo-Herrero M, 2007, ELECTRON NOTES THEOR, V174, P119, DOI 10.1016/j.entcs.2007.02.051
   Hoare CAR, 1985, COMMUNICATING SEQUEN
   Holzmann G., 2021, SPIN FORMAL VERIFICA
   Holzmann G., 1996, Proceedings of the 2nd International SPIN Workshop on Model Checking of Software, P23
   KIRCHNER C, 2008, STUDIES LOGIC FDN MA, V17, P339
   KOWALSKI R, 1979, COMMUN ACM, V22, P424, DOI 10.1145/359131.359136
   Kwenda PR, 2022, WASTE MANAGE RES, V40, P139, DOI 10.1177/0734242X21991645
   LESCANNE P, 1990, LECT NOTES COMPUT SC, V463, P262
   Loding C., 2016, LIPICS, V58, DOI [10.4230/LIPIcs.MFCS.2016.88, DOI 10.4230/LIPICS.MFCS.2016.88]
   MARIN M, 2006, J APPL NON CLASSICAL, V16, P151
   Marin M, 2019, PROCEEDINGS OF THE 24TH ACM SYMPOSIUM ON ACCESS CONTROL MODELS AND TECHNOLOGIES (SACMAT '19), P173, DOI 10.1145/3322431.3325416
   Martí-Oliet N, 2005, ELECTRON NOTES THEOR, V117, P417, DOI 10.1016/j.entcs.2004.06.020
   Martí-Oliet N, 2009, ELECTRON NOTES THEOR, V238, P227, DOI 10.1016/j.entcs.2009.05.022
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Mogavero F, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2631917
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   Perrin D., 2004, INFINITE WORDS PURE, DOI [10.1016/S0079-8169(04)80002-3, DOI 10.1016/S0079-8169(04)80002-3]
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Rosa-Velardo F, 2006, ELECTRON NOTES THEOR, V147, P135, DOI 10.1016/j.entcs.2005.06.041
   Rubio Ruben, 2019, Recent Trends in Algebraic Development Techniques. 24th IFIP WG 1.3 International Workshop, WADT 2018. Revised Selected Papers: Lecture Notes in Computer Science (LNCS 11563), P27, DOI 10.1007/978-3-030-23220-7_2
   Rubio R., 2020, UNIFIED MAUDE MODEL
   Rubio R, 2022, J LOG ALGEBR METHODS, V124, DOI 10.1016/j.jlamp.2021.100727
   Rubio R, 2022, J LOG ALGEBR METHODS, V124, DOI 10.1016/j.jlamp.2021.100728
   Rubio R, 2021, J LOG ALGEBR METHODS, V123, DOI 10.1016/j.jlamp.2021.100700
   Rubio Ruben, 2019, LIPICS, V131
   Santos-García G, 2007, ELECTRON NOTES THEOR, V176, P79, DOI 10.1016/j.entcs.2007.06.009
   Santos-García G, 2009, ADV SOFT COMP, V50, P424
   Somenzi F., 2000, P 12 INT C COMP AID, V1855, P248, DOI DOI 10.1007/10722167
   Staiger L., 1997, Handbook of formal languages, V3, P339, DOI DOI 10.1007/978-3-642-59126-6_6
   Straffin P.D., 1993, ANNELI LAX NEW MATH, V36
   Tanenbaum Andrew., 2018, Modern operating systems
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Verdejo A, 2012, ELECTRON P THEOR COM, P17, DOI 10.4204/EPTCS.82.2
NR 67
TC 6
Z9 6
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 7
DI 10.1007/s10515-021-00307-9
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XL5IC
UT WOS:000728177000001
DA 2024-07-18
ER

PT J
AU Zaki-Ismail, A
   Osama, M
   Abdelrazek, M
   Grundy, J
   Ibrahim, A
AF Zaki-Ismail, Aya
   Osama, Mohamed
   Abdelrazek, Mohamed
   Grundy, John
   Ibrahim, Amani
TI RCM-extractor: an automated NLP-based approach for extracting a semi
   formal representation model from natural language requirements
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Requirements extraction; Requirements formalization; Natural-language
   extraction
ID SPECIFICATION
AB Most existing (semi-)automated requirements formalisation techniques assume requirements to be specified in predefined templates. They also employ template-specific transformation rules to provide the corresponding formal representation. Hence, such techniques have limited expressiveness and more importantly require system engineers to re-write their system requirements following defined templates for maintenance and evolution. In this paper, we introduce an automated requirements extraction technique (RCM-Extractor) to automatically extract the key constructs of a comprehensive and formalisable semi-formal representation model from textual requirements. This avoids the expressiveness issues affecting the existing requirement specification templates, and eliminates the need to rewriting the requirements to match the structure of such templates. We evaluated RCM-Extractor on a dataset of 162 requirements curated from several papers in the literature. RCM-Extractor achieved 87% precision, 98% recall, 92% F-measure, and 86% accuracy. In addition, we evaluated the capabilities of RCM-Extractor to extract requirements on a dataset of 15,000 automatically synthesised requirements that are constructed specifically to evaluate our approach. This dataset has a complete coverage of the possible structures and arrangements of the properties that can exist in system requirements. Our approach achieved 57%, 92% and 100% accuracy for un-corrected, partially-corrected and fully-corrected Stanford typed-dependencies representations of the synthesised requirements, respectively.
C1 [Zaki-Ismail, Aya; Osama, Mohamed; Abdelrazek, Mohamed; Ibrahim, Amani] Deakin Univ, 221 Burwood Hwy, Burwood, Vic 3125, Australia.
   [Grundy, John] Monash Univ, Wellington Rd, Clayton, Vic 3800, Australia.
C3 Deakin University; Monash University
RP Zaki-Ismail, A (corresponding author), Deakin Univ, 221 Burwood Hwy, Burwood, Vic 3125, Australia.
EM amohamedzakiism@deakin.edu.au; mdarweish@deakin.edu.au;
   mohamed.abdelrazek@deakin.edu.au; john.grundy@monash.edu;
   amani.ibrahim@deakin.edu.au
RI Grundy, John/I-6681-2012
OI Abdelrazek, Mohamed/0000-0003-3812-9785
CR Bitsch F., 2001, LNCS, V2187, P176, DOI [10.1007/3-540-45416-018, DOI 10.1007/3-540-45416-018]
   Brunello A., 2019, 26 INT S TEMP REPR R
   Buzhinsky I, 2019, IEEE INTL CONF IND I, P400, DOI [10.1109/INDIN41052.2019.8972130, 10.1109/indin41052.2019.8972130]
   Das Bidyut, 2018, International Journal of Modern Education and Computer Science, V10, P57, DOI 10.5815/ijmecs.2018.01.06
   Dick J., 2017, REQUIR ENG, VFourth
   Ferrari A, 2017, INT REQUIR ENG CONF, P502, DOI 10.1109/RE.2017.29
   Fifarek AW, 2017, LECT NOTES COMPUT SC, V10227, P420, DOI 10.1007/978-3-319-57288-8_30
   Fu RR, 2017, I C COMM SOFTW NET, P1477, DOI 10.1109/ICCSN.2017.8230353
   Ghosh S, 2016, LECT NOTES COMPUT SC, V9690, P41, DOI 10.1007/978-3-319-40648-0_4
   Herbst T, 2005, Z ANGLIST AM, V53, P193
   Houdek F., 2013, SYSTEM REQUIREMENTS
   Jeannet B., 2016, DEBUGGING EMBEDDED S
   Justice B, 2013, THESIS C VONOSSIETZK
   Kamp H., 1981, THEORY TRUTH SEMANTI, P189
   Konrad S, 2005, PROC INT CONF SOFTW, P372
   Leech G., 2005, ENGLISH GRAMMAR TODA, DOI [https://doi.org/10.1007/978-1-349-16878-1, DOI 10.1007/978-1-349-16878-1]
   Lucio L., 2017, MODELS SATELLITE EVE, P566
   Lúcio L, 2017, LECT NOTES COMPUT SC, V10227, P427, DOI 10.1007/978-3-319-57288-8_31
   Marko N, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P143, DOI 10.1109/SEAA.2015.11
   Mavin A, 2009, PROCEEDINGS OF THE 2009 17TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, P317, DOI 10.1109/RE.2009.9
   Nelken R., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P360
   Osama M, 2020, PROC IEEE INT CONF S, P651, DOI 10.1109/ICSME46990.2020.00067
   Pohl K., 2011, Requirements Engineering Fundamentals, V1st
   S R., 1996, CLAW 96
   Sladekova V, 2007, THESIS U KOMENSKEHO
   Sturla G, 2017, THESIS MIT
   Teige T., 2016, 19 GI ITG GMM WORKSH, P6
   Thyssen J, 2013, SOFTW SYST MODEL, V12, P265, DOI 10.1007/s10270-011-0204-1
   Yan RJ, 2015, DES AUT TEST EUROPE, P1677
   Zaki-Ismail A., 2020, RCM REQUIREMENT CAPT
   Zaki-Ismail A., 2021, SEKE
   Zaki-Ismail A, 2021, LECT NOTES COMPUT SC, V12685, P54, DOI 10.1007/978-3-030-73128-1_4
   Zaki-Ismail A, 2021, PROCEEDINGS OF THE 9TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD), P270, DOI 10.5220/0010270602700277
   Zhao L., 2020, ARXIV PREPRINT ARXIV
NR 34
TC 4
Z9 4
U1 1
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 10
DI 10.1007/s10515-021-00312-y
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY1CF
UT WOS:000736718900002
DA 2024-07-18
ER

PT J
AU Chen, XF
   Hosking, J
   Grundy, J
   Amor, R
AF Chen, Xiaofan
   Hosking, John
   Grundy, John
   Amor, Robert
TI DCTracVis: a system retrieving and visualizing traceability links
   between source code and documentation
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software traceability; Traceability recovery; Traceability visualization
AB It is well recognized that traceability links between software artifacts provide crucial support in comprehension, efficient development, and effective management of a software system. However, automated traceability systems to date have been faced with two major open research challenges: how to extract traceability links with both high precision and high recall, and how to efficiently visualize links for complex systems because of scalability and visual clutter issues. To overcome the two challenges, we designed and developed a traceability system, DCTracVis. This system employs an approach that combines three supporting techniques, regular expressions, key phrases, and clustering, with information retrieval (IR) models to improve the performance of automated traceability recovery between documents and source code. This combination approach takes advantage of the strengths of the three techniques to ameliorate limitations of IR models. Our experimental results show that our approach improves the performance of IR models, increases the precision of retrieved links, and recovers more correct links than IR alone. After having retrieved high-quality traceability links, DCTracVis then utilizes a new approach that combines treemap and hierarchical tree techniques to reduce visual clutter and to allow the visualization of the global structure of traces and a detailed overview of each trace, while still being highly scalable and interactive. Usability evaluation results show that our approach can effectively and efficiently help software developers comprehend, browse, and maintain large numbers of links.
C1 [Chen, Xiaofan] Nanjing Univ Sci & Technol, Sch Comp Sci & Engn, Nanjing, Jiangsu, Peoples R China.
   [Hosking, John] Univ Auckland, Auckland, New Zealand.
   [Grundy, John] Monash Univ, Fac Informat Technol, Melbourne, Vic, Australia.
   [Amor, Robert] Univ Auckland, Dept Comp Sci, Auckland, New Zealand.
C3 Nanjing University of Science & Technology; University of Auckland;
   Monash University; University of Auckland
RP Chen, XF (corresponding author), Nanjing Univ Sci & Technol, Sch Comp Sci & Engn, Nanjing, Jiangsu, Peoples R China.
EM xiaofanchen@hotmail.com; j.hosking@auckland.ac.nz;
   john.grundy@monash.edu; trebor@cs.auckland.ac.nz
RI Amor, Robert/L-9611-2019; Grundy, John/AAF-1716-2019
OI Amor, Robert/0000-0002-4329-9044; Grundy, John/0000-0003-4928-7076
FU Foundation for Research, Science and Technology; University of Auckland;
   MBIE Software Process and Product Improvement project
FX This research is financially supported by the Foundation for Research,
   Science and Technology, MBIE Software Process and Product Improvement
   project, and University of Auckland.
CR Abadi A, 2008, INT C PROGRAM COMPRE, P103, DOI 10.1109/ICPC.2008.30
   ADAMS, 2009, OVERVIEW
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Antoniol G, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P240, DOI 10.1109/WCRE.2000.891475
   Asuncion H., 2007, 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE), P115
   Aswani Kumar Ch, 2009, Journal of Computing and Information Technology - CIT, V17, P259, DOI 10.2498/cit.1001268
   Bacchelli A., 2010, Proceedings of the 32nd International Conference on Software Engineering, P375
   Chen X., 2012, VL HCC 2012
   Chen X., 2013, 22 ASWEC
   Cleland-Huang J, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P135, DOI 10.1109/RE.2005.78
   Cleland-Huang J., 2007, Second International Workshop on Requirements Engineering Visualization (REV 2007), P4
   Cleland-Huang J, 2007, COMPUTER, V40, P27, DOI 10.1109/MC.2007.195
   Cornelissen B, 2007, INT C PROGRAM COMPRE, P49
   De Lucia A, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1276933.1276934
   De Lucia A, 2013, INFORM SOFTWARE TECH, V55, P741, DOI 10.1016/j.infsof.2012.08.002
   Di Penta M, 2002, PROG COMPREHEN, P207, DOI 10.1109/WPC.2002.1021342
   Falessi D, 2017, EMPIR SOFTW ENG, V22, P996, DOI 10.1007/s10664-016-9460-6
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Graham M, 2010, INFORM VISUAL, V9, P235, DOI 10.1057/ivs.2009.29
   GRECHANIK M., 2007, Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering, P95
   Hayes JH, 2003, 11TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P138
   Holten D, 2006, IEEE T VIS COMPUT GR, V12, P741, DOI 10.1109/TVCG.2006.147
   Jackson M., 2016, 2016 IEEE AEROSPACE, P1, DOI [10.1109/AERO.2016, DOI 10.1109/AERO.2016]
   James M., 1967, PROC BERKELEY S MATH, V1, P281, DOI DOI 10.1007/S11665-016-2173-6
   Kamalabalan K, 2015, 2015 Moratuwa Engineering Research Conference (MERCon), P318, DOI 10.1109/MERCon.2015.7112366
   Kardes FR, 2004, J CONSUM RES, V31, P368, DOI 10.1086/422115
   Kuang HY, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P68, DOI 10.1109/SANER.2017.7884610
   LDRA, 2012, LDRA PROD BROCH V7 2
   Li C, 2007, PROCEEDINGS OF THE 6TH INTERNATIONAL SYMPOSIUM ON COAL COMBUSTION, P1, DOI 10.1145/1329125.1329187
   Lucia A. D., 2004, 16 INT C SOFTW ENG K, P31
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Marcus A., 2005, P 3 INT WORKSH TRAC, P56, DOI DOI 10.1145/1107656.1107669
   Merten T., 2011, 2011 4th International Workshop on Managing Requirements Knowledge (MARK 2011), P17, DOI 10.1109/MARK.2011.6046557
   Nakagawa H, 2017, PROC IEEE ACM INT C, P136, DOI 10.1109/ICSE-C.2017.117
   Nishikawa K, 2015, PROC IEEE INT CONF S, P576, DOI 10.1109/ICSM.2015.7332517
   Prefuse, 2011, PREF INF VIS TOOLK
   Rocco J. D., 2013, P 2 WORKSH GRAPH MOD, P51
   Rodrigues A, 2016, PROCEEDINGS 2016 10TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P61, DOI [10.1109/QUATIC.2016.019, 10.1109/QUATIC.2016.17]
   Roman G. C., 1992, International Conference on Software Engineering, P412, DOI 10.1145/143062.143157
   Settimi R, 2004, 7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, P49, DOI 10.1109/IWPSE.2004.1334768
   SHNEIDERMAN B, 1992, ACM T GRAPHIC, V11, P92, DOI 10.1145/102377.115768
   Singhal A., 2001, IEEE DATA ENG B, V24, P35
   Spanoudakis G, 2005, ADV SOFTWARE ENG KNO
   van Amstel Marcel F., 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P152, DOI 10.1007/978-3-642-30476-7_10
   van Ravensteijn W. J. P, 2011, THESIS
   von Pilgrim J, 2008, LECT NOTES COMPUT SC, V5095, P17, DOI 10.1007/978-3-540-69100-6_2
   Voytek J. B., 2011, CHI 2011
   Wang XB, 2009, ELECTRON NOTES THEOR, V243, P121, DOI 10.1016/j.entcs.2009.07.009
   WATKINS R, 1994, IEEE SOFTWARE, V11, P104, DOI 10.1109/52.300100
   Witten I.H., 1999, P 4 ACM C DIG LIB, P254, DOI 10.1145/313238.313437
   Woodruff A., 1997, CSD97968 U CAL
   Xiaofan Chen, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P223, DOI 10.1109/ASE.2011.6100057
   Xin Zhou, 2008, 2008 IEEE 32nd International Computer Software and Applications Conference (COMPSAC), P295, DOI 10.1109/COMPSAC.2008.36
   Yang Li, 2012, Requirements Engineering: Foundation for Software Quality. Proceedings 18th International Working Conference, REFSQ 2012, P194, DOI 10.1007/978-3-642-28714-5_17
NR 54
TC 4
Z9 6
U1 2
U2 9
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2018
VL 25
IS 4
SI SI
BP 703
EP 741
DI 10.1007/s10515-018-0243-8
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW9YB
UT WOS:000447363400002
DA 2024-07-18
ER

PT J
AU Nair, V
   Menzies, T
   Siegmund, N
   Apel, S
AF Nair, Vivek
   Menzies, Tim
   Siegmund, Norbert
   Apel, Sven
TI Faster discovery of faster system configurations with spectral learning
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Performance prediction; Spectral learning; Decision trees; Search-based
   software engineering; Sampling
ID PRINCIPAL COMPONENT ANALYSIS
AB Despite the huge spread and economical importance of configurable software systems, there is unsatisfactory support in utilizing the full potential of these systems with respect to finding performance-optimal configurations. Prior work on predicting the performance of software configurations suffered from either (a) requiring far too many sample configurations or (b) large variances in their predictions. Both these problems can be avoided using the WHAT spectral learner. WHAT's innovation is the use of the spectrum (eigenvalues) of the distance matrix between the configurations of a configurable software system, to perform dimensionality reduction. Within that reduced configuration space, many closely associated configurations can be studied by executing only a few sample configurations. For the subject systems studied here, a few dozen samples yield accurate and stable predictors-less than 10% prediction error, with a standard deviation of less than 2%. When compared to the state of the art, WHAT (a) requires 2-10 times fewer samples to achieve similar prediction accuracies, and (b) its predictions are more stable (i.e., have lower standard deviation). Furthermore, we demonstrate that predictive models generated by WHAT can be used by optimizers to discover system configurations that closely approach the optimal performance.
C1 [Nair, Vivek; Menzies, Tim] North Carolina State Univ, Raleigh, NC 27695 USA.
   [Siegmund, Norbert] Bauhaus Univ Weimar, Weimar, Germany.
   [Apel, Sven] Univ Passau, Passau, Germany.
C3 North Carolina State University; Bauhaus-Universitat Weimar; University
   of Passau
RP Nair, V (corresponding author), North Carolina State Univ, Raleigh, NC 27695 USA.
EM vivekaxl@gmail.com; tim.menzies@gmail.com;
   norbert.siegmund@uni-passau.de; apel@uni-passau.de
RI Menzies, Tim/X-7680-2019; Siegmund, Norbert/U-1325-2019; Nair,
   Vivek/AAH-6229-2019
OI Menzies, Tim/0000-0002-5040-3196; Siegmund, Norbert/0000-0001-7741-7777;
   Nair, Vivek/0000-0002-7318-1530; Apel, Sven/0000-0003-3687-2233
FU NSF [1506586]; German Research Foundation [AP 206/4, AP 206/6, SI
   2171/2]; Division of Computing and Communication Foundations; Direct For
   Computer & Info Scie & Enginr [1506586] Funding Source: National Science
   Foundation
FX The work is partially funded by NSF awards #1506586. Sven Apel's work
   has been supported by the German Research Foundation (AP 206/4 and AP
   206/6). Norbert Siegmund's work has been supported by the German
   Research Foundation (SI 2171/2).
CR [Anonymous], 2013, THESIS
   [Anonymous], 2000, C UNC ART INT UAI, DOI [10.5555/647234.719759, DOI 10.5555/647234.719759]
   [Anonymous], 2001, P 7 ACM SIGKDD INT C
   Bettenburg N., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P60, DOI 10.1109/MSR.2012.6224300
   Bettenburg N, 2015, EMPIR SOFTW ENG, V20, P294, DOI 10.1007/s10664-013-9292-6
   Blewitt ME, 2008, NAT GENET, V40, P663, DOI 10.1038/ng.142
   Boley D, 1998, DATA MIN KNOWL DISC, V2, P325, DOI 10.1023/A:1009740529316
   Burges CJC, 2010, FOUND TRENDS MACH LE, V2, P275, DOI 10.1561/2200000002
   Chen J., 2016, ARXIV160807617
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deiters C, 2013, INT WORK REAL ARTIF, P14, DOI 10.1109/RAISE.2013.6615199
   Domingos P, 2012, COMMUN ACM, V55, P78, DOI 10.1145/2347736.2347755
   Du Q, 2008, INT J HIGH PERFORM C, V22, P438, DOI 10.1177/1094342007088380
   Efron B, 1994, INTRO BOOTSTRAP, DOI DOI 10.1201/9780429246593
   Faloutsos C., 1995, SIGMOD Record, V24, P163, DOI 10.1145/568271.223812
   Fletcher R., 1987, Practical Methods of Optimization, DOI [DOI 10.1002/9781118723203, 10.1002/9781118723203]
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   GRASSBERGER P, 1983, PHYSICA D, V9, P189, DOI 10.1016/0167-2789(83)90298-1
   Guo JM, 2013, IEEE INT CONF AUTOM, P301, DOI 10.1109/ASE.2013.6693089
   Hamerly G., 2010, P 2010 SIAM INT C DA, P130
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Hinton GE, 2006, SCIENCE, V313, P504, DOI 10.1126/science.1127647
   Houle ME, 2012, INT CONF DAT MIN WOR, P587, DOI 10.1109/ICDMW.2012.94
   Ilin A, 2010, J MACH LEARN RES, V11, P1957
   Jolliffe I.T., 1986, Principal component analysis, DOI DOI 10.1016/0169-7439(87)80084-9
   Kamvar K., 2003, P INT JOINT C ART IN
   Krall J, 2015, IEEE T SOFTWARE ENG, V41, P1001, DOI 10.1109/TSE.2015.2432024
   Menzies T., T SOFTW ENG, V39, P822
   Mittas N, 2013, IEEE T SOFTWARE ENG, V39, P537, DOI 10.1109/TSE.2012.45
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Platt J.C., 2005, P 10 INT WORKSHOP AR, P261
   Pukelsheim F, 2006, CLASS APPL MATH, V50, P1, DOI 10.1137/1.9780898719109
   Richard Kuhn D., 2013, Introduction to combinatorial testing
   Sarkar A, 2015, IEEE INT CONF AUTOM, P342, DOI 10.1109/ASE.2015.45
   Sayyad AS, 2013, IEEE INT CONF AUTOM, P465, DOI 10.1109/ASE.2013.6693104
   Shi JB, 2000, IEEE T PATTERN ANAL, V22, P888, DOI 10.1109/34.868688
   Siegmund J., P INT C SOFTW ENG, V1, P9
   Siegmund N, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P284, DOI 10.1145/2786805.2786845
   Siegmund N, 2012, PROC INT CONF SOFTW, P167, DOI 10.1109/ICSE.2012.6227196
   Storn R, 1997, J GLOBAL OPTIM, V11, P341, DOI 10.1023/A:1008202821328
   Theisen C., P INT C SOFTW ENG, P199
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Weiss GM, 2008, DATA MIN KNOWL DISC, V17, P253, DOI 10.1007/s10618-007-0082-x
   Xu TY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P307, DOI 10.1145/2786805.2786852
   Zhang F, 2016, PROC INT CONF SOFTW, P309, DOI 10.1145/2884781.2884839
   Zhang Y, 2015, IEEE INT CONF AUTOM, P365, DOI 10.1109/ASE.2015.15
   Zuluaga M., 2013, INT C MACH LEARN, V28, P462
NR 47
TC 26
Z9 27
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2018
VL 25
IS 2
BP 247
EP 277
DI 10.1007/s10515-017-0225-2
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF3PN
UT WOS:000431868200003
DA 2024-07-18
ER

PT J
AU Lou, JG
   Lin, QW
   Ding, R
   Fu, Q
   Zhang, DM
   Xie, T
AF Lou, Jian-Guang
   Lin, Qingwei
   Ding, Rui
   Fu, Qiang
   Zhang, Dongmei
   Xie, Tao
TI Experience report on applying software analytics in incident management
   of online service
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software analytics; Online service; Service incident diagnosis; Incident
   management
AB As online services become more and more popular, incident management has become a critical task that aims to minimize the service downtime and to ensure high quality of the provided services. In practice, incident management is conducted through analyzing a huge amount of monitoring data collected at runtime of a service. Such data-driven incident management faces several significant challenges such as the large data scale, complex problem space, and incomplete knowledge. To address these challenges, we carried out 2-year software-analytics research where we designed a set of novel data-driven techniques and developed an industrial system called the Service Analysis Studio (SAS) targeting real scenarios in a large-scale online service of Microsoft. SAS has been deployed to worldwide product datacenters and widely used by on-call engineers for incident management. This paper shares our experience about using software analytics to solve engineers pain points in incident management, the developed data-analysis techniques, and the lessons learned from the process of research development and technology transfer.
C1 [Lou, Jian-Guang; Lin, Qingwei; Ding, Rui; Zhang, Dongmei] Microsoft Res Asia, 5 Danling St, Beijing, Peoples R China.
   [Fu, Qiang] One Microsoft Way, Redmond, WA USA.
   [Xie, Tao] Univ Illinois, Dept Comp Sci, Siebel Ctr 4237, 201 N Goodwin Ave, Urbana, IL 61801 USA.
C3 Microsoft; Microsoft Research Asia; University of Illinois System;
   University of Illinois Urbana-Champaign
RP Lou, JG (corresponding author), Microsoft Res Asia, 5 Danling St, Beijing, Peoples R China.
EM jlou@microsoft.com; qlin@microsoft.com; juding@microsoft.com;
   qifu@microsoft.com; dongmeiz@microsoft.com; taoxie@illinois.edu
RI Ding, Rui/AAL-7714-2021; Lin, Qingwei/AAZ-3604-2021; zhang,
   dongmei/B-8011-2013; Ding, Rui/JSL-0652-2023
OI Ding, Rui/0000-0003-2880-9736; LOU, jianguang/0000-0001-8496-033X
FU Division Of Computer and Network Systems; Direct For Computer & Info
   Scie & Enginr [1564274] Funding Source: National Science Foundation
CR [Anonymous], 2010, P USENIX ANN TECH C
   [Anonymous], 2008, INFORMATIONWEEK NEWS
   [Anonymous], P SOCC
   [Anonymous], 1985, P 8 ANN INT ACM SIGI, DOI DOI 10.1145/253495.253506
   Ashok B., 2009, P ACM FSE 09, P373
   Basu S., 2004, P 10 ACM SIGKDD INT, P59, DOI DOI 10.1145/1014052.1014062
   Bird C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P205, DOI 10.1145/2591062.2591173
   Bodík P, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P111
   Cellier P, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P991
   Chun Yuan, 2006, Operating Systems Review, V40, P375, DOI 10.1145/1218063.1217972
   Cohen I, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P231
   Cohen I., 2005, Proceedings of the twentieth ACM symposium on Operating systems principles, SOSP '05, (New York, NY, USA), P105, DOI DOI 10.1145/1095810.1095821
   Dang YN, 2012, 28TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2012), P369
   De Rosa M., 2011, P USENIX NSDI
   Ding R, 2015, PROC VLDB ENDOW, V8, P473, DOI 10.14778/2735479.2735481
   Ding R, 2014, I C DEPEND SYS NETWO, P311, DOI 10.1109/DSN.2014.39
   Ding R, 2012, IEEE INT CONF AUTOM, P318, DOI 10.1145/2351676.2351735
   Dong G., 1999, P 5 ACM SIGKDD INT C, P43, DOI [10.1145/312129., DOI 10.1145/312129, DOI 10.1145/312129.312191]
   Epifani I., 2010, P 18 ACM SIGSOFT INT, P227
   FREITAS AA, 2000, ACM ALGKDD EXPLOR NE, V2, P65, DOI DOI 10.1145/360402.360423
   Fu Q., 2014, P ICSE
   Fu Q., 2012, P SRDS
   Fu Q, 2013, IEEE WORK CONF MIN S, P397, DOI 10.1109/MSR.2013.6624054
   Fu QA, 2009, IEEE DATA MINING, P149, DOI 10.1109/ICDM.2009.60
   Glerum K., 2009, P 22 ACM S OP SYST P, P106
   Han J, 2012, MOR KAUF D, P1
   Han S, 2012, PROC INT CONF SOFTW, P145, DOI 10.1109/ICSE.2012.6227198
   Hoover J. N., 2008, INFORMATIONWEEK
   Huang C., 2006, ACHIEVING SCALABLE A
   Jiuyong Li, 2001, Advances in Knowledge Discovery and Data Mining. 5th Pacific-Asia Conference, PAKDD 2001. Proceedings (Lecture Notes in Artificial Intelligence Vol.2035), P364
   Li HZ, 2010, BIOSTATISTICS, V11, P139, DOI 10.1093/biostatistics/kxp043
   Li P. L., 2011, P ICSE, P716
   Lim M., 2014, P ICDM
   Lin Q., 2016, P ICSE
   Liu C, 2005, SIAM PROC S, P286, DOI 10.1145/1081706.1081753
   Lou J. G., 2013, P ASE
   Menzies T, 2013, IEEE T SOFTWARE ENG, V39, P822, DOI 10.1109/TSE.2012.83
   Nagaraj K., 2012, P USENIX NSDI, P271
   Natu M., 2011, P ICAC, P1
   Patterson DA, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XVI), P185
   Songyun Duan, 2008, 2008 International Conference on Autonomic Computing (ICAC '08), P45, DOI 10.1109/ICAC.2008.28
   Sun Chengnian, 2010, P 32 ACMIEEE INT C S, V1, P45, DOI [DOI 10.1145/1806799, 10.1145/1806799.1806811]
   Wang XY, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P461, DOI 10.1145/1368088.1368151
   Zhang DM, 2013, IEEE SOFTWARE, V30, P30, DOI 10.1109/MS.2013.94
   Zhang DM, 2012, PROC INT CONF SOFTW, P997
   Zhang S, 2005, I C DEPEND SYS NETWO, P644, DOI 10.1109/DSN.2005.44
NR 46
TC 19
Z9 20
U1 0
U2 31
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2017
VL 24
IS 4
BP 905
EP 941
DI 10.1007/s10515-017-0218-1
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FI9EQ
UT WOS:000412307800008
DA 2024-07-18
ER

PT J
AU Aleti, A
AF Aleti, Aldeida
TI Designing automotive embedded systems with adaptive genetic algorithms
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software architecture; Genetic algorithms; Adaptive parameter control;
   Bayesian networks
ID OPTIMIZATION; RELIABILITY; ARCHITECTURE; PERFORMANCE; ADAPTATION;
   ALLOCATION
AB One of the most common problems faced by planners, whether in industry or government, is optimisation-finding the optimal solution to a problem. Even a one percent improvement in a solution can make a difference of millions of dollars in some cases. Traditionally optimisation problems are solved by analytic means or exact optimisation methods. Today, however, many optimisation problems in the design of embedded architectures involve complex combinatorial systems that make such traditional approaches unsuitable or intractable. Genetic algorithms, instead, tackle these kind of problems by finding good solutions in a reasonable amount of time. Their successful application, however, relies on algorithm parameters which are problem dependent, and usually even depend on the problem instance at hand. To address this issue, we propose an adaptive parameter control method for genetic algorithms, which adjusts parameters during the optimisation process. The central aim of this work is to assist practitioners in solving complex combinatorial optimisation problems by adapting the optimisation strategy to the problem being solved. We present a case study from the automotive industry, which shows the efficiency and applicability of the proposed adaptive optimisation approach. The experimental evaluation indicates that the proposed approach outperforms optimisation methods with pre-tuned parameter values and three prominent adaptive parameter control techniques.
C1 Monash Univ, Fac Informat Technol, Clayton, Vic 3800, Australia.
C3 Monash University
RP Aleti, A (corresponding author), Monash Univ, Fac Informat Technol, Clayton, Vic 3800, Australia.
EM aldeida.aleti@monash.edu
RI Aleti, Aldeida/AAE-8486-2019
OI Aleti, Aldeida/0000-0002-1716-690X
FU Australian Research Council; Australian Government agencies; Australian
   Research Council [DE140100017]; Australian Research Council
   [DE140100017] Funding Source: Australian Research Council
FX We wish to acknowledge Monash University for the use of their Nimrod
   software in this work. The Nimrod project has been funded by the
   Australian Research Council and a number of Australian Government
   agencies, and was initially developed by the Distributed Systems
   Technology. This research was supported under Australian Research
   Council's Discovery Projects funding scheme (project number
   DE140100017). We would like to thank several anonymous reviewers who
   helped improve the quality of this work.
CR Afzal Wasif, 2010, 2010 Proceedings of Second International Symposium on Search Based Software Engineering (SSBSE), P79, DOI 10.1109/SSBSE.2010.19
   Afzal W, 2011, EXPERT SYST APPL, V38, P11984, DOI 10.1016/j.eswa.2011.03.041
   AKERHOLM M, 2004, 4 C SOFTW ENG RES PR
   Aleti A., 2012, 2012 IEEE Congress on Evolutionary Computation, P1, DOI DOI 10.1109/CEC.2012.6256567
   Aleti A, 2011, GECCO-2011: PROCEEDINGS OF THE 13TH ANNUAL GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P561
   Aleti A, 2013, IEEE T SOFTWARE ENG, V39, P658, DOI 10.1109/TSE.2012.64
   Aleti A, 2009, IEEE INT CONF AUTOM, P505, DOI 10.1109/ASE.2009.59
   Aleti A, 2009, MOMPES: 2009 ICSE WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, P61, DOI 10.1109/MOMPES.2009.5069138
   Angeline P.J., 1995, IEEE PROCEDEENG COMP, P152
   [Anonymous], 15 INT C PROGR COMPR
   [Anonymous], 2000, 1471 ISOIEC
   Bäck T, 2001, EVOL COMPUT, V9, pIII, DOI 10.1162/106365601750190361
   Back T., 1996, EVOLUTIONARY ALGORIT
   Bartz-Beielstein T, 2005, IEEE C EVOL COMPUTAT, P773
   Broy M., 2006, 28th International Conference on Software Engineering Proceedings, P33, DOI 10.1145/1134285.1134292
   Butts K., 2001, LNCS, V2211, P66
   Calinescu R, 2009, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.2009.5070512
   Cervantes J, 2009, IEEE T EVOLUT COMPUT, V13, P369, DOI 10.1109/TEVC.2008.927707
   CHERN MS, 1992, OPER RES LETT, V11, P309, DOI 10.1016/0167-6377(92)90008-Q
   Cohen J., 1988, STAT POWER ANAL BEHA
   Coit DW, 1996, IEEE T RELIAB, V45, P254, DOI 10.1109/24.510811
   Corne D. W., 2002, Parallel Problem Solving from Nature - PPSN VII. 7th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2439), P132
   Cornford SL, 2003, AEROSP CONF PROC, P3681
   Cuenot P, 2007, IEEE INT C ENG COMP, P353, DOI 10.1109/ICECCS.2007.28
   DAVIS L, 1989, PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON GENETIC ALGORITHMS, P61
   De Jong K. A., 1995, THESIS U MICHIGAN
   De Jong KA, 1975, ANAL BEHAV CLASS GEN
   De Jong K, 2007, STUD COMPUT INTELL, V54, P1
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deb K, 2001, EVOL COMPUT, V9, P197, DOI 10.1162/106365601750190406
   Eiben AE, 2011, SWARM EVOL COMPUT, V1, P19, DOI 10.1016/j.swevo.2011.02.001
   Eiben AE, 1999, IEEE T EVOLUT COMPUT, V3, P124, DOI 10.1109/4235.771166
   Eiben G, 2008, NAT COMPUT SER, P153, DOI 10.1007/978-3-540-72960-0_8
   Farmani R, 2003, IEEE T EVOLUT COMPUT, V7, P445, DOI 10.1109/TEVC.2003.817236
   Fialho A., 2009, P GEN EV COMP C, P779
   FOGARTY TC, 1989, PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON GENETIC ALGORITHMS, P104
   Fredriksson J, 2005, LECT NOTES COMPUT SC, V3489, P49
   Fredriksson J, 2007, 13TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P39, DOI 10.1109/RTCSA.2007.32
   Goseva-Popstojanova K, 2001, PERFORM EVALUATION, V45, P179, DOI 10.1016/S0166-5316(01)00034-7
   GREFENSTETTE JJ, 1986, IEEE T SYST MAN CYB, V16, P122, DOI 10.1109/TSMC.1986.289288
   Grunske L., 2006, 28th International Conference on Software Engineering Proceedings, P849, DOI 10.1145/1134285.1134431
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Harman M, 2012, INT SYMP EMP SOFTWAR, P1, DOI 10.1145/2372251.2372253
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Heinecke H., 2004, CONV TRANSP EL ASS
   Heiner G, 1998, DIG PAP INT SYMP FAU, P402, DOI 10.1109/FTCS.1998.689491
   HESSER J, 1991, LECT NOTES COMPUT SC, V496, P23
   Holland J.H., 1992, Adaptation in Natural and Artificial Systems, DOI DOI 10.7551/MITPRESS/1090.001.0001
   Hong TP, 2000, J HEURISTICS, V6, P439, DOI 10.1023/A:1009642825198
   Igel C, 2003, NEUROCOMPUTING, V55, P347, DOI 10.1016/S0925-2312(02)00628-8
   Jhumka A., 2002, Formal Techniques in Real-Time and Fault-Tolerant Systems. 7th International Symposium, FTRTFT 2002. Proceedings (Lecture Notes in Computer Science Vol.2469), P111
   Julstrom B.A., 1995, P 6 INT C GENETIC AL, P81
   KITCHENHAM B, 1995, IEEE SOFTWARE, V12, P52, DOI 10.1109/52.391832
   KUBAT P, 1989, OPER RES LETT, V8, P35, DOI 10.1016/0167-6377(89)90031-X
   Kulturel-Konak S, 2003, IIE TRANS, V35, P515, DOI 10.1080/07408170390193044
   Kulturel-Konak S, 2008, J HEURISTICS, V14, P335, DOI 10.1007/s10732-007-9041-3
   Lukasiewycz M, 2008, ASIA S PACIF DES AUT, P661
   Malek S, 2005, LECT NOTES COMPUT SC, V3798, P99
   Malek S., 2007, THESIS U SO CALIFORN
   Mantere T, 2005, APPL SOFT COMPUT, V5, P315, DOI 10.1016/j.asoc.2004.08.004
   MARTENS A, 2009, 6 INT WORKSH FORM EN
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Medvidovic N., 2007, ESSPE '07 International workshop on Engineering of software services for pervasive environments: in conjunction with the 6th ESEC/FSE joint meeting, P47, DOI [10.1145/1294904.1294911, DOI 10.1145/1294904.1294911]
   Meedeniya I, 2011, J SYST SOFTWARE, V84, P835, DOI 10.1016/j.jss.2011.01.004
   Mikic-Rakic M, 2004, LECT NOTES COMPUT SC, V3083, P1
   Nadi F, 2011, GECCO-2011: PROCEEDINGS OF THE 13TH ANNUAL GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P901
   Papadopoulos Y, 2005, J SYST SOFTWARE, V76, P77, DOI 10.1016/j.jss.2004.06.027
   Pearl J., 1988, PROBABILISTIC REASON
   PETTITT AN, 1977, TECHNOMETRICS, V19, P205, DOI 10.2307/1268631
   Pretschner A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P55, DOI 10.1109/FOSE.2007.22
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   SCHAFFER JD, 1989, PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON GENETIC ALGORITHMS, P51
   Scharnhorst T, 2005, VDI BER, V1907, P395
   Schlierkamp-Voosen D, 1994, LECT NOTES COMPUT SC, V866, P199
   Sharma VS, 2007, J SYST SOFTWARE, V80, P493, DOI 10.1016/j.jss.2006.07.021
   Sharma VS, 2005, LECT NOTES COMPUT SC, V3489, P66
   SHATZ SM, 1992, IEEE T COMPUT, V41, P1156, DOI 10.1109/12.165396
   Smit SK, 2009, IEEE C EVOL COMPUTAT, P399, DOI 10.1109/CEC.2009.4982974
   Smith J, 1996, IEEE C EVOL COMPUTAT, P318, DOI 10.1109/ICEC.1996.542382
   Thierens D, 2002, IEEE C EVOL COMPUTAT, P980, DOI 10.1109/CEC.2002.1007058
   Thierens D, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1539
   Tuson A, 1998, EVOL COMPUT, V6, P161, DOI 10.1162/evco.1998.6.2.161
   Verner JM, 2009, INT CONF RES CHAL, P313, DOI 10.1109/RCIS.2009.5089295
   Yoo S., 2011, EUR SOFTW ENG C ACMS
   Yun-Chia Liang, 1999, Proceedings of the 1999 Congress on Evolutionary Computation-CEC99 (Cat. No. 99TH8406), P1478, DOI 10.1109/CEC.1999.782658
   Zhang Y, 2008, LECT NOTES COMPUT SC, V5025, P88, DOI 10.1007/978-3-540-69062-7_8
   Zitzler E, 2003, IEEE T EVOLUT COMPUT, V7, P117, DOI 10.1109/TEVC.2003.810758
   Zitzler E, 2007, LECT NOTES COMPUT SC, V4403, P862
NR 88
TC 11
Z9 12
U1 1
U2 27
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2015
VL 22
IS 2
SI SI
BP 199
EP 240
DI 10.1007/s10515-014-0148-0
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE0EI
UT WOS:000351476900004
DA 2024-07-18
ER

PT J
AU Lavesson, N
   Boeva, V
   Tsiporkova, E
   Davidsson, P
AF Lavesson, Niklas
   Boeva, Veselka
   Tsiporkova, Elena
   Davidsson, Paul
TI A method for evaluation of learning components
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Data mining; Evaluation; Machine learning
AB Today, it is common to include machine learning components in software products. These components offer specific functionalities such as image recognition, time series analysis, and forecasting but may not satisfy the non-functional constraints of the software products. It is difficult to identify suitable learning algorithms for a particular task and software product because the non-functional requirements of the product affect algorithm suitability. A particular suitability evaluation may thus require the assessment of multiple criteria to analyse trade-offs between functional and non-functional requirements. For this purpose, we present a method for APPlication-Oriented Validation and Evaluation (APPrOVE). This method comprises four sequential steps that address the stated evaluation problem. The method provides a common ground for different stakeholders and enables a multi-expert and multi-criteria evaluation of machine learning algorithms prior to inclusion in software products. Essentially, the problem addressed in this article concerns how to choose the appropriate machine learning component for a particular software product.
C1 [Lavesson, Niklas] Blekinge Inst Technol, S-37179 Karlskrona, Sweden.
   [Boeva, Veselka] Tech Univ Sofia, Branch Plovdiv, Comp Syst & Technol Dept, Plovdiv, Bulgaria.
   [Tsiporkova, Elena] Sirris, Collect Ctr Belgian Technol Ind, Software Engn & ICT Grp, Brussels, Belgium.
   [Davidsson, Paul] Malmo Univ, S-20506 Malmo, Sweden.
C3 Blekinge Institute Technology; Technical University Sofia; Malmo
   University
RP Lavesson, N (corresponding author), Blekinge Inst Technol, S-37179 Karlskrona, Sweden.
EM Niklas.Lavesson@bth.se; vboeva@tu-plovdiv.bg;
   elena.tsiporkova@sirris.be; Paul.Davidsson@mah.se
RI Davidsson, Paul/B-2969-2012; Lavesson, Niklas/B-3313-2013; Boeva,
   Veselka/IAP-9371-2023
OI Davidsson, Paul/0000-0003-0998-6585; 
CR Alizadeh AA, 2000, NATURE, V403, P503, DOI 10.1038/35000501
   Allahyari H, 2011, 11 SCAND C ART INT
   Alon U, 1999, P NATL ACAD SCI USA, V96, P6745, DOI 10.1073/pnas.96.12.6745
   Bucila C., 2006, 12 ACM SIGKDD INT C
   Fodor J., 1994, Fuzzy Preference Modelling and Multicriteria Decision Support
   Freitas A., 1998, 2 EUR S PRINC DAT MI
   Gaines B.R., 1996, ADV KNOWLEDGE DISCOV, P205
   Japkowicz N., 2011, Evaluating Learning Algorithms A Classification Perspective, V211, P224, DOI DOI 10.1017/CBO9780511921803
   Lavesson Niklas, 2007, International Journal of Intelligent Information and Database Systems, V1, P37, DOI 10.1504/IJIIDS.2007.013284
   Lavesson N., 2010, KNOWL INF SYST
   Lavesson N., 2008, 8 SIAM INT C DAT MIN
   Lavesson N., 2010, 5 IEEE INT C INT SYS
   Menzies T., 2012, EMPIRICAL SOFTWARE E, V17
   Nakhaeizadeh G., 1997, Proceedings of the Third International Conference on Knowledge Discovery and Data Mining, P37
   Nakhaeizadeh G., 1998, Proceedings Fourth International Conference on Knowledge Discovery and Data Mining, P289
   Provost F., 1998, Machine Learning. Proceedings of the Fifteenth International Conference (ICML'98), P445
   Roubens M., 1985, Preference modelling
   Saaty T.L., 1980, ANAL HIERARCHY PROCE
   Singh D, 2002, CANCER CELL, V1, P203, DOI 10.1016/S1535-6108(02)00030-2
   Tsiporkova E., 2004, KYBERNETIKA J CZECH, V40
   Tsiporkova E., 2010, 5 INT C INT WEB APPL
   Tsiporkova E., 2006, INF SCI, V176
   Vaidya OS, 2006, EUR J OPER RES, V169, P1, DOI 10.1016/j.ejor.2004.04.028
   Wang R. Y., 1996, Journal of Management Information Systems, V12, P5
   Wohlin C, 2003, EMPIR SOFTW ENG, V8, P285, DOI 10.1023/A:1024476828183
   Yin R.K., 2014, Applications of case study research, V2nd
NR 26
TC 1
Z9 1
U1 0
U2 8
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2014
VL 21
IS 1
BP 41
EP 63
DI 10.1007/s10515-013-0123-1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AA3EG
UT WOS:000330975100003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gay, G
   Menzies, T
   Jalali, O
   Mundy, G
   Gilkerson, B
   Feather, M
   Kiper, J
AF Gay, Gregory
   Menzies, Tim
   Jalali, Omid
   Mundy, Gregory
   Gilkerson, Beau
   Feather, Martin
   Kiper, James
TI Finding robust solutions in requirements models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
AB Solutions to non-linear requirements engineering problems may be "brittle"; i.e. small changes may dramatically alter solution effectiveness. Hence, it is not enough to just generate solutions to requirements problems- we must also assess solution robustness. The KEYS2 algorithm can generate decision ordering diagrams. Once generated, these diagrams can assess solution robustness in linear time. In experiments with real-world requirements engineering models, we show that KEYS2 can generate decision ordering diagrams in O(N (2)). When assessed in terms of terms of (a) reducing inference times, (b) increasing solution quality, and (c) decreasing the variance of the generated solution, KEYS2 out-performs other search algorithms (simulated annealing, ASTAR, MaxWalkSat).
C1 [Gay, Gregory; Menzies, Tim; Jalali, Omid; Gilkerson, Beau] W Virginia Univ, Morgantown, WV 26506 USA.
   [Mundy, Gregory] Alderson Broaddus Coll, Philippi, WV USA.
   [Feather, Martin] CALTECH, Jet Prop Lab, Pasadena, CA USA.
   [Kiper, James] Miami Univ, Dept Comp Sci & Syst Anal, Oxford, OH 45056 USA.
C3 West Virginia University; California Institute of Technology; National
   Aeronautics & Space Administration (NASA); NASA Jet Propulsion
   Laboratory (JPL); University System of Ohio; Miami University
RP Menzies, T (corresponding author), W Virginia Univ, Morgantown, WV 26506 USA.
EM greg@greggay.com; tim@menzies.us; jalali.omid@gmail.com;
   beau.gilkerson@gmail.com; mundyge@ab.edu; martin.s.feather@jpl.nasa.gov;
   kiperjd@muohio.edu
RI Menzies, Tim/X-7680-2019
OI Menzies, Tim/0000-0002-5040-3196; Gay, Gregory/0000-0001-6794-9585
FU National Aeronautics and Space administration; Alderson-Broaddus
   College; Miami University
FX This research was conducted at West Virginia University, the Jet
   Propulsion Laboratory under a contract with the National Aeronautics and
   Space administration, Alderson-Broaddus College, and Miami University.
   Reference herein to any specific commercial product, process, or service
   by trade name, trademark, manufacturer, or otherwise, does not
   constitute or imply its endorsement by the United States Government.
CR Abdel-Hamid T., 1991, SOFTWARE PROJECT DYN
   ADMINISTRATION FA, 2006, SYSTEM ENG MANUAL VE
   AKHAVI M, 1993, P 5 SOFTW ENG PROC G
   AMAREL S, 1986, MACHINE LEARNING ART, P499
   [Anonymous], 2002, P INT C COMP AID VER
   BAGNALL A, 2001, INF SOFTW TECHNOL, V43
   BALSAMO S, 2004, IEEE T SOFTW ENG, V30
   BRATKO I, 2001, PROGRAMMING ARTIFICI
   BYLANDER T, 1991, ARTIF INTELL, V49, P25, DOI 10.1016/0004-3702(91)90005-5
   Cai Y., 2005, Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE), P329, DOI DOI 10.1145/1101908.1101962
   CHILDS A, 2006, IEEE COMPUT, V39
   CLARK R, 2005, THESIS PORTLAND STAT
   Clarke J., 2003, IEE Proceedings-Software, V150, P161, DOI 10.1049/ip-sen:20030559
   Coarfa C., 2000, Principles and Practice of Constraint Programming - CP 2000. 6th International Conference, CP 2000. Proceedings (Lecture Notes in Computer Science Vol.1894), P143
   Cornford SL, 2001, AEROSP CONF PROC, P441, DOI 10.1109/AERO.2001.931736
   Crawford J., 1994, AAAI 94
   DEKLEER J, 1986, ARTIF INTELL, V28, P163, DOI 10.1016/0004-3702(86)90081-0
   Denno P, 2003, IEEE SOFTWARE, V20, P59, DOI 10.1109/MS.2003.1231153
   DONZELLI P, 2001, J SYST SOFTW, V59
   FEATHER M, 2008, IEEE INT C REQ ENG I
   FEATHER M, 2008, APPL BROAD SPECTRUM
   FEATHER M, 2002, IEEE JOINT C REQ ENG
   Feather M. S., 2008, SPACE TECHNOLOGY APP
   Filman R., 2004, ASPECT ORIENTED SOFT
   France R, 2003, IEEE SOFTWARE, V20, P52, DOI 10.1109/MS.2003.1231152
   Gray J, 2006, COMPUTER, V39, P51, DOI 10.1109/MC.2006.45
   GU J, 1997, DIMACS SERIES DISCRE, P19
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   HAREL D, 1990, IEEE T SOFTWARE ENG, V16, P403, DOI 10.1109/32.54292
   Harman M, 2004, PROC INT CONF SOFTW, P728, DOI 10.1109/ICSE.2004.1317508
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   HART PE, 1968, IEEE T SYST SCI CYB, VSSC4, P100, DOI 10.1109/TSSC.1968.300136
   Heitmeyer C., 2002, Encyclopedia of Software Engineering, Vsecond
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   HUI Y, 2004, TENCON 2004, V2, P306
   IWASAKI Y, 1989, HDB ARTIFICIAL INTEL, V4, P323
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   JALALI O, 2008, P PROM 2008 WORKSH I
   JERJENS J, 2006, ICSE 06, P819
   Jureta IJ, 2008, INT REQUIR ENG CONF, P71, DOI 10.1109/RE.2008.13
   Kautz H, 1996, PROCEEDINGS OF THE THIRTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE EIGHTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE, VOLS 1 AND 2, P1194
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Kohavi R, 1997, ARTIF INTELL, V97, P273, DOI 10.1016/S0004-3702(97)00043-X
   MacLean A., 1996, Design Rationale: Concepts, Techniques, and Use, V1st, P53
   MARTIN R, 2001, J SYST SOFTW, V59
   MARTIN RH, 2000, INT J SOFTWARE PROCE, V5, P147
   MENZIES T, 2003, SEDECS 2003
   MENZIES T, 2008, P PROM 08 ICSE
   MENZIES T, 2003, SOFT COMPUTING SOFTW
   METROPOLIS N, 1953, J CHEM PHYS, V21, P1087, DOI 10.1063/1.1699114
   Mi P., 1990, IEEE Transactions on Knowledge and Data Engineering, V2, P283, DOI 10.1109/69.60792
   MITTELMANN H, 2007, 22 EUR C OP RES
   MYLOPOULOS J, 1992, IEEE T SOFTWARE ENG, V18, P483, DOI 10.1109/32.142871
   Mylopoulos J, 1999, COMMUN ACM, V42, P31, DOI 10.1145/291469.293165
   Ngo-The A, 2009, IEEE T SOFTWARE ENG, V35, P109, DOI 10.1109/TSE.2008.80
   Pearl J., 1984, Heuristics: Intelligent Search Strategies for Computer Problem Solving
   RELA L, 2004, THESIS LAPPEENRANTA
   Russell S., 2016, Artificial intelligence a modern approach
   Saaty T.L, 1980, Advanced Optimization and Decision-Making Techniques in Textile Manufacturing, DOI DOI 10.1201/9780429504419-2
   Scott EM, 2000, SENSITIVITY ANAL
   SELMAN B, 1993, P 2 DIMACS CHALL CLI
   Setamanit Siri-on, 2007, Software Process: Improvement and Practice, V12, P491, DOI 10.1002/spip.335
   SHUM SB, 1994, INT J HUM-COMPUT ST, V40, P603, DOI 10.1006/ijhc.1994.1029
   Sterman H.D, 2000, Business Dynamics System Thinking and Modelling for a Complex World
   STOUT B, 1997, SMART MOVES INTELLIG
   URIBE T, 1994, P 1 INT C CONSTR COM, P34
   Williams R., 2003, P IJCAI 2003
   Zave P., 1997, ACM Transactions on Software Engineering and Methodology, V6, P1, DOI 10.1145/237432.237434
   Zhang HY, 2007, IEEE T SOFTWARE ENG, V33, P635, DOI 10.1109/TSE.2007.70706
NR 70
TC 5
Z9 6
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2010
VL 17
IS 1
BP 87
EP 116
DI 10.1007/s10515-009-0059-7
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 534MO
UT WOS:000272902000005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Li, YY
   Feng, Y
   Guo, C
   Chen, ZY
   Xu, BW
AF Li, Yuying
   Feng, Yang
   Guo, Chao
   Chen, Zhenyu
   Xu, Baowen
TI Crowdsourced test case generation for android applications via static
   program analysis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Android testing; Automated testing; Static program analysis;
   Collaborative testing
AB The testing of Android applications(apps) is a challenging task due to the serious fragmentation issues and diverse usage environments. To improve the testing efficiency and collect the feedbacks from real usage scenarios, crowdsourcing has been employed in the testing of Android. However, crowdsourced testing is a manual working paradigm, while the shortage of testing guidance for crowd workers who often have limited software engineering knowledge may result in many redundant or invalid test reports. To fill this gap, this paper presents an automated test case generation approach for the testing of Android apps. Our approach is built upon static program analysis and is capable of providing detailed testing steps to guide workers in performing testing. Furthermore, we use the automated testing tool for pre-testing, and crowd workers only need to test the uncovered test cases. We evaluate our approach with six widely-used apps to evaluate its effectiveness and efficiency. The experimental results show that our approach can detect 71.5% more bugs in diverse categories and achieve 21.8% higher path coverage in comparison with classic crowdsourced testing techniques. Also, in the experiment, we detect 44 unknown bugs in the six subjects, which indicates our approach is highly promising for assisting the testing of Android apps in practice.
C1 [Li, Yuying; Feng, Yang; Guo, Chao; Chen, Zhenyu; Xu, Baowen] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210093, Jiangsu, Peoples R China.
C3 Nanjing University
RP Feng, Y (corresponding author), Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210093, Jiangsu, Peoples R China.
EM yuyingli@smail.nju.edu.cn; fengyang@nju.edu.cn; 1021172957@qq.com;
   zychen@nju.edu.cn; bwxu@nju.edu.cn
RI Yan, Miaochen/JLL-5061-2023; Zhou, Hong/JKJ-1067-2023; Zhao,
   YiAn/JFK-5881-2023; Xu, Baowen/IXW-4882-2023; Wang, zijun/JNS-5435-2023;
   yan, yan/JVN-1800-2024
OI Xu, Baowen/0000-0001-7743-1296; 
FU National Natural Science Foundation of China [62002158, 61832009,
   61932012]; Science, Technology and Innovation Commission of Shenzhen
   Municipality [CJGJZD20200617103001003]
FX AcknowledgementsWe would like to thank anonymous reviewers for their
   insightful and constructive comments. This research was partially funded
   by the National Natural Science Foundation of China under Grant Nos.
   62002158, 61832009, and 61932012, and the Science, Technology and
   Innovation Commission of Shenzhen Municipality (No.
   CJGJZD20200617103001003).
CR Alyahya S, 2020, INFORM SOFTWARE TECH, V127, DOI 10.1016/j.infsof.2020.106363
   Amalfitano D, 2017, J SYST SOFTWARE, V125, P322, DOI 10.1016/j.jss.2016.12.017
   Amalfitano D, 2015, IEEE SOFTWARE, V32, P53, DOI 10.1109/MS.2014.55
   Amalfitano Domenico., 2015, P 3 INT WORKSHOP SOF, P5, DOI DOI 10.1145/2804345.2804348
   Anandan S, 2012, MATER SCI FORUM, V712, P1, DOI 10.4028/www.scientific.net/MSF.712.1
   Moreno IA, 2020, PROC INT CONF SOFTW, P230, DOI 10.1145/3377812.3381389
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Au FioraT. W., 2008, P 9 C AUSTRALASIAN U, V76, P55
   Chen S, 2019, PROC INT CONF SOFTW, P596, DOI 10.1109/ICSE.2019.00070
   Chen Y, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20), DOI 10.1145/3313831.3376835
   Cui Q, 2017, P INT COMP SOFTW APP, P75, DOI 10.1109/COMPSAC.2017.265
   Dimara E, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P5475, DOI 10.1145/3025453.3025870
   Gadiraju U, 2017, PROCEEDINGS OF THE 28TH ACM CONFERENCE ON HYPERTEXT AND SOCIAL MEDIA (HT'17), P5, DOI 10.1145/3078714.3078715
   Gebrekrstos S.W., 2022, STGFA SMOG
   Hettiachchi Danula, 2020, Proceedings of the ACM on Human-Computer Interaction, V4, DOI 10.1145/3415181
   Hettiachchi D, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3494522
   Howe J., 2008, WHY POWER CROWD IS D
   Irani LC, 2016, 34TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2016, P4573, DOI 10.1145/2858036.2858592
   Jabbarvand R, 2019, PROC INT CONF SOFTW, P1119, DOI 10.1109/ICSE.2019.00115
   Jensen C S, 2013, P 2013 INT S SOFTW T, P67, DOI [10.1145/2483760.2483777, DOI 10.1145/2483760.2483777]
   Khan UH, 2022, EMITTER, V10, P63, DOI 10.24003/emitter.v10i1.628
   Kong PF, 2019, IEEE T RELIAB, V68, P45, DOI 10.1109/TR.2018.2865733
   Li L, 2017, INFORM SOFTWARE TECH, V88, P67, DOI 10.1016/j.infsof.2017.04.001
   Machiry A., 2013, P 2013 9 JOINT M FDN, P224
   Mao K, 2017, J SYST SOFTWARE, V126, P57, DOI 10.1016/j.jss.2016.09.015
   Mao K, 2015, 9TH IEEE INTERNATIONAL SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING (SOSE 2015), P347, DOI 10.1109/SOSE.2015.46
   Minxue Pan, 2020, ISSTA '20: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, P153, DOI 10.1145/3395363.3397354
   Pezze M., 2008, Software Testing and Analysis: Process, Principles and Techniques
   Rountev Atanas, 2014, P ANN IEEEACM INT S, P143
   Salman I, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P666, DOI 10.1109/ICSE.2015.82
   Su T, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P245, DOI 10.1145/3106237.3106298
   Tan SH, 2020, PROC INT CONF SOFTW, P1335, DOI 10.1145/3377811.3380349
   Usman A., 2020, INT J ADV SCI ENG IN, V10, P16, DOI [DOI 10.18517/IJASEIT.10.1.10194, 10.18517/ijaseit.10.1.10194]
   Wang J., 2021, IEEE Transactions on Software Engineering, P1
   Wang J, 2020, PROC INT CONF SOFTW, P469, DOI 10.1145/3377811.3380382
   Wei LL, 2020, IEEE T SOFTWARE ENG, V46, P1176, DOI 10.1109/TSE.2018.2876439
   Yang SQ, 2018, AUTOMAT SOFTW ENG, V25, P833, DOI 10.1007/s10515-018-0237-6
   Yang SQ, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P89, DOI 10.1109/ICSE.2015.31
   Yang Y, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962594
NR 39
TC 0
Z9 0
U1 3
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 26
DI 10.1007/s10515-023-00394-w
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N8VC8
UT WOS:001039715300001
DA 2024-07-18
ER

PT J
AU Alqmase, M
   Alshayeb, M
   Ghouti, L
AF Alqmase, Mohammed
   Alshayeb, Mohammad
   Ghouti, Lahouari
TI Quality assessment framework to rank software projects
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Quality assessment; Product maturity model; Software metrics; Metric
   thresholds; Machine learning
ID MATURITY MODEL; INFORMATION; THRESHOLDS; CODE
AB Over the last three decades, many quality models have been proposed for software systems. These models employ software metrics to assess different quality attributes. However, without adequate thresholds, it is very hard to associate plausible interpretations with software quality attributes. Many attempts are reported in the literature to identify meaningful thresholds for software metrics. However, these attempts fail to clearly map the proposed thresholds to the assessment of software quality attributes. This paper aims at bridging this gap and provides a methodology for quality assessment models based on software metric thresholds. By doing so, software products can be easily ranked according to specific quality levels. Our methodology defines software metric thresholds to generate ordinal data. Then, the ordinal data is combined with a weighting scheme based on the Pearson correlation coefficient. The resulting weights are assigned to data categories in each software metric. Thanks to these weights, project quality levels are straightforwardly estimated. To assess the effectiveness of our software metric thresholding framework, we carry out an empirical study. The reported results clearly show that the proposed framework has a significant impact on the assessment and evaluation of the software product quality.
C1 [Alqmase, Mohammed; Alshayeb, Mohammad] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran, Saudi Arabia.
   [Alshayeb, Mohammad] King Fahd Univ Petr & Minerals, Interdisciplinary Res Ctr Intelligent Secure Syst, Dhahran, Saudi Arabia.
   [Ghouti, Lahouari] Prince Sultan Univ, Riyadh, Saudi Arabia.
C3 King Fahd University of Petroleum & Minerals; King Fahd University of
   Petroleum & Minerals; Prince Sultan University
RP Alqmase, M (corresponding author), King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran, Saudi Arabia.
EM g201531270@kfupm.edu.sa; alshayeb@kfupm.edu.sa; lghouti@psu.edu.sa
RI Alshayeb, Mohammad/B-5941-2015
OI Alqmase, Mohammed/0000-0002-6267-0961
FU Deanship of Scientific Research at King Fahd University of Petroleum and
   Minerals; Prince Sultan University
FX M. Alqmase and M. Alshayeb would like to acknowledge the support
   provided by the Deanship of Scientific Research at King Fahd University
   of Petroleum and Minerals. L. Ghouti acknowledges the support of Prince
   Sultan University.
CR Abdellatif A., 2018, SOFTW EVOL PROCESS, P32
   Al-Qutaish RE, 2011, J RES PRACT INF TECH, V43, P307
   Alqmase M, 2019, J COMPUT SCI TECH-CH, V34, P1063, DOI 10.1007/s11390-019-1960-6
   Alshayeb M., 2015, 10 INT C SOFTW ENG A
   Alvaro A, 2007, EUROMICRO CONF PROC, P83
   Alves TL, 2010, PROC IEEE INT CONF S
   [Anonymous], 1977, PRELIMINARY HDB SOFT
   [Anonymous], 2011, ISO/IEC 25010:2011
   [Anonymous], 1988, Principles of software engineering management
   [Anonymous], 1976, P 2 INT C SOFTW ENG
   [Anonymous], 2006, P EFOSS WORKSH COM I
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 2003, CMMI GUIDLINES PROCE
   Benesty J, 2009, SPRINGER TOP SIGN PR, V2, P1, DOI 10.1007/978-3-642-00296-0_1
   Bluman AG., 2009, ELEMENTARY STAT STEP, P185
   Boehm B.W., 1978, Characteristics of Software Quality
   Chappell D., 2013, 3 ASPECTS SOFTWARE Q
   Chmielewski M., 1994, INT J APPROX REASON
   Committee SES, 1998, 10611998R2009 IEEE S
   Fenton N., 2014, Software Metrics: A Rigorous and Practical Approach, V3rd, DOI DOI 10.1201/B17461
   Ferreira KAM, 2012, J SYST SOFTWARE, V85, P244, DOI 10.1016/j.jss.2011.05.044
   Gilb T., 1977, SOFTWARE METRICS
   Grady R.B., 1987, SOFTWARE METRICS EST, V1
   Hall MA., 1999, THESIS CORRELATION B
   Han J., 2012, Data Mining, P393, DOI [DOI 10.1016/B978-0-12-381479-1.00009-5, 10.1016/B978-0-12-381479-1.00009-5]
   He P, 2015, INFORM SOFTWARE TECH, V59, P170, DOI 10.1016/j.infsof.2014.11.006
   International Organization for Standardization, 2020, 159392002 ISOIEC
   Jones C., 2010, SOFTWARE QUALITY KEY, P555
   Jones C., 2010, Software engineering best practices: Lessons from successful projects in the top companies
   Jureczko M., 2010, SOFTWARE DEFECT PRED
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Jureczko M., MODELS METHODS SYSTE
   Jureczko M., 2010, PROMISE REPOSITORY S
   KENT JT, 1983, BIOMETRIKA, V70, P163, DOI 10.1093/biomet/70.1.163
   KIRA K, 1992, MACHINE LEARNING /, P249
   KITCHENHAM BA, 1989, SOFTWARE ENG J, V4, P2, DOI 10.1049/sej.1989.0001
   KONONENKO I, 1994, P EUR C MACH LEARN
   LIPOW M, 1982, IEEE T SOFTWARE ENG, V8, P437, DOI 10.1109/TSE.1982.235579
   Liu H, 2002, DATA MIN KNOWL DISC, V6, P393, DOI 10.1023/A:1016304305535
   Loon H.V, 2007, PROCESS ASSESSMENT I
   Masramon G.P., 2015, ARXIV PREPRINT
   McCall J., 1977, Factors in software quality, V1
   Mori T., 2002, P COL 2002 19 INT C
   Mountassir A, 2012, IEEE SYS MAN CYBERN, P3298, DOI 10.1109/ICSMC.2012.6378300
   Oliveira P, 2014, PROC IEEE INT CONF S, P629, DOI 10.1109/ICSME.2014.112
   Oliveira P, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P254, DOI 10.1109/CSMR-WCRE.2014.6747177
   Origin A, 2020, METHOD QUALIFICATION
   Rudiger Lincke., 2008, International Symposium on Software Testing and Analysis, P131, DOI 10.1145/1390630.1390648
   *SEI, 2006, PROC MAT PROF SOFTW
   Shatnawi R, 2010, J SOFTW MAINT EVOL-R, V22, P1, DOI 10.1002/smr.404
   Spinellis D, 2005, IEEE SOFTWARE, V22, P9, DOI 10.1109/MS.2005.111
   Steuer R, 2002, BIOINFORMATICS, V18, pS231, DOI 10.1093/bioinformatics/18.suppl_2.S231
   TAJIMA D, 1981, COMPUTER, V14, P89, DOI 10.1109/C-M.1981.220456
   Vale G, 2015, 2015 29TH BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, P110, DOI 10.1109/SBES.2015.9
   Veado L, 2016, PROCEEDINGS OF THE 20TH INTERNATIONAL CONFERENCE ON EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING 2016 (EASE '16), DOI 10.1145/2915970.2916014
   Weka G., WEKA DOCUMENTATION M
   Yamashita K, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P191, DOI 10.1109/QRS.2016.31
   Zhang HY, 2009, PROC IEEE INT CONF S, P274, DOI 10.1109/ICSM.2009.5306304
   Zou KH, 2003, RADIOLOGY, V227, P617, DOI 10.1148/radiol.2273011499
NR 59
TC 2
Z9 2
U1 0
U2 8
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 41
DI 10.1007/s10515-022-00342-0
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 1I8UX
UT WOS:000797503500001
DA 2024-07-18
ER

PT J
AU Tërnava, X
   Mortara, J
   Collet, P
   Le Berre, D
AF Ternava, Xhevahire
   Mortara, Johann
   Collet, Philippe
   Le Berre, Daniel
TI Identification and visualization of variability implementations in
   object-oriented variability-rich systems: a symmetry-based approach
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automatic variability identification; Variability visualization;
   Object-oriented variability-rich systems; Variability comprehention;
   Variability evolution; Software product line engineering
ID SOFTWARE PRODUCT LINES; SOURCE CODE; TAXONOMY; PATTERNS
AB Most modern object-oriented software systems are variability-rich, despite that they may not be developed as product lines. Their variability is implemented by several traditional techniques in combination, such as inheritance, overloading, or design patterns. As domain features or variation points with variants are not a by-product of these techniques, variability in code assets of such systems is implicit, and hardly documented, hampering qualities such as understandability and maintainability. In this article, we present an approach for automatic identification and visualization of variability implementation places, that is, variation points with variants, in variability-rich systems. To uniformly identify them, we propose to rely on the existing symmetries in the different software constructs and patterns. We then propose to visualize them according to their density. By means of our realized toolchain implementing the approach, symfinder, we report on a threefold evaluation, (i) on the identified potential variability in sixteen large open-source systems and symfinder 's scalability, (ii) on measuring symfinder 's precision and robustness when mapping identified variability to domain features, and (iii) on its usage by a software architect. Results show that symfinder can indeed help in identifying and comprehending the variability of the targeted systems.
C1 [Ternava, Xhevahire] Univ Rennes 1, Inria IRISA, Rennes, France.
   [Mortara, Johann; Collet, Philippe] Univ Cote dAzur, I3S, CNRS, Sophia Antipolis, France.
   [Le Berre, Daniel] Univ dArtois, CRIL, CNRS, Lens, France.
C3 Universite de Rennes; Centre National de la Recherche Scientifique
   (CNRS); Universite Cote d'Azur; Centre National de la Recherche
   Scientifique (CNRS)
RP Tërnava, X (corresponding author), Univ Rennes 1, Inria IRISA, Rennes, France.
EM xhevahire.ternava@irisa.fr
RI Mortara, Johann/HKN-7249-2023; Tërnava, Xhevahire/HMV-5291-2023
OI Mortara, Johann/0000-0002-1779-5511; Le Berre,
   Daniel/0000-0003-3221-9923
CR ALEXANDE.C, 1968, PERCEPT PSYCHOPHYS, V4, P73, DOI 10.3758/BF03209511
   Alexander C., 2002, The Nature of Order: The phenomenon of life
   Anastasopoulos M., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/379377.375269
   Andam Berima, 2017, P 11 INT WORKSH VAR, P100, DOI DOI 10.1145/3023956.3023967
   [Anonymous], 2010, J SATISFIABIL BOOLEA, DOI DOI 10.3233/SAT190075
   [Anonymous], 2008, SPLC
   [Anonymous], 2007, Software Visualization: Visualizing the Structure, Behavior, and Evolution of Software
   [Anonymous], 2016, FEATURE ORIENTED SOF, DOI DOI 10.1007/978-3-642-37521-7
   Anquetil N, 2010, SOFTW SYST MODEL, V9, P427, DOI 10.1007/s10270-009-0120-9
   Assunçao WKG, 2017, EMPIR SOFTW ENG, V22, P2972, DOI 10.1007/s10664-017-9499-z
   Bachmann Felix., 2005, Variability in Software Product Lines
   Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   Beuche D, 2019, 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE(SPLC 2019), VOL B, P37, DOI 10.1145/3307630.3342391
   Bosch J, 2002, LECT NOTES COMPUT SC, V2290, P13
   Capilla R., 2013, Concepts Tools and Experiences
   Coplien J, 1998, IEEE SOFTWARE, V15, P37, DOI 10.1109/52.730836
   Coplien J. O., 1998, C++ Report, V10, P11
   Coplien J.O., 2020, IN PRESS
   Coplien J.O., 2001, P VS LIV 2001, P1
   Coplien J.O., 2000, INT S GEN COMP BAS S, P37
   Coplien J.O., 1999, Multi-Paradigm Design for C++
   Couto MV, 2011, EUR CON SFTWR MTNCE, P191, DOI 10.1109/CSMR.2011.25
   Cruz D, 2019, PROCEEDINGS OF THE 13TH INTERNATIONAL WORKSHOP ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS '19), DOI 10.1145/3302333.3302343
   Czarnecki Krzysztof., 2012, P 6 INT WORKSHOP VAR, P173, DOI DOI 10.1145/2110147.2110167
   De Lucia A, 2010, EUR CON SFTWR MTNCE, P176, DOI 10.1109/CSMR.2010.16
   Dit B, 2013, J SOFTW-EVOL PROC, V25, P53, DOI 10.1002/smr.567
   Duc Minh Le, 2013, Safe and Secure Software Reuse. 13th International Conference on Software Reuse, ICSR 2013. Proceedings: LNCS 7925, P1, DOI 10.1007/978-3-642-38977-1_1
   Duszynski S., 2012, 2012 Proceedings of the 3rd International Workshop on Product LinE Approaches in Software Engineering (PLEASE 2012), P37, DOI 10.1109/PLEASE.2012.6229768
   El-Sharkawy S, 2019, INFORM SOFTWARE TECH, V106, P1, DOI 10.1016/j.infsof.2018.08.015
   Fritsch C., 2002, P INT WORKSH PROD LI, P59
   Gabriel Richard P, 1996, Patterns of Software
   Galster M, 2019, PROCEEDINGS OF THE 13TH INTERNATIONAL WORKSHOP ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS '19), DOI 10.1145/3302333.3302336
   Galster M, 2014, IEEE T SOFTWARE ENG, V40, P282, DOI 10.1109/TSE.2013.56
   Garcia J, 2013, IEEE INT CONF AUTOM, P486, DOI 10.1109/ASE.2013.6693106
   Halin Axel, 2017, P 11 INT WORKSH VAR, P44, DOI [10.1145/3023956.3023963, DOI 10.1145/3023956.3023963]
   Henney K., 2003, P 2 NORD PATT LANG P, P1
   Heuzeroth D, 2003, PROG COMPREHEN, P94
   Hilliard R., 2010, P 4 EUR C SOFTW ARCH, P312
   Hunsen C, 2016, EMPIR SOFTW ENG, V21, P449, DOI 10.1007/s10664-015-9360-1
   Jacobson I., 1997, Software Reuse: Architecture, Process and Organization for Business Success
   Jayaraman K., 2009, NASA FORMAL METHODS, P121
   John I., 2007, PROOC 1 INT WORKSH V, P45
   Kamali SR, 2019, 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE(SPLC 2019), VOL B, P143, DOI 10.1145/3307630.3342400
   Kang K.C., 1990, CARNEGIE-MELLON UNIV PITTSBURGH PA SOFTWARE ENGINEERING INST
   Krueger CW, 2002, LECT NOTES COMPUT SC, V2290, P282
   Krüger J, 2019, J SYST SOFTWARE, V152, P239, DOI 10.1016/j.jss.2019.01.057
   Krüger J, 2017, ACM INT CONF PR SER, P105, DOI 10.1145/3168365.3168371
   Kruger J., SOFTWARE ENG VARIABI, P153
   Lanza M, 2005, PROC INT CONF SOFTW, P672
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Le Berre D, 2009, IWOCE 2009: INTERNATIONAL WORKSHOP ON OPEN COMPONENT ECOSYSTEM, P21
   Liebig Jorg, 2010, P 32 ACM IEEE INT C, V1, P105
   Lopez-Herrejon RE, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1912
   Lozano A, 2011, LECT NOTES COMPUT SC, V6999, P141, DOI 10.1007/978-3-642-24574-9_19
   Martinez J, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P132, DOI 10.1145/3233027.3233038
   Martinez J, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P257, DOI 10.1145/3233027.3236402
   Martinez J, 2017, 21ST INTERNATIONAL SYSTEM & SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2017), VOL 2, P38, DOI 10.1145/3109729.3109748
   Martinez J, 2017, PROC IEEE ACM INT C, P67, DOI 10.1109/ICSE-C.2017.15
   Martinez Jabier, 2016, SPLC, P119
   McKay B.D., 1981, PRACTICAL GRAPH ISOM
   Meinicke J, 2017, MASTERING SOFTWARE V, DOI DOI 10.1007/978-3-319-61443-4
   Metzger A., Proc. Futur. Softw. Eng. - FOSE 2014, ACM Press, New York, New York, USA, P70, DOI DOI 10.1145/2593882.2593888
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Meyer B., 1988, Object-Oriented Software Construction
   MIARA RJ, 1983, COMMUN ACM, V26, P861, DOI 10.1145/182.358437
   Michelon GK, 2020, SPLC'19: PROCEEDINGS OF THE 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL A, P93, DOI 10.1145/3336294.3342360
   Mortara J., 24 INT SYST SOFTW PR, DOI [10.1145/3382025.3414987, DOI 10.1145/3382025.3414987]
   Mortara J, 2020, PROCEEDINGS OF THE 14TH INTERNATIONAL WORKING CONFERENCE ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS '20), DOI 10.1145/3377024.3377037
   Mortara J, 2019, 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE(SPLC 2019), VOL B, P5, DOI 10.1145/3307630.3342394
   Niere J, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P338, DOI 10.1109/ICSE.2002.1007980
   OASIS, 2020, OAS VAR EXCH LANG VE
   Paskevicius P, 2012, COMM COM INF SC, V319, P108
   Patzke T., 2002, PRODUCT LINE IMPLEME
   Pleuss Andreas, 2012, International Journal on Software Tools for Technology Transfer, V14, P497, DOI 10.1007/s10009-012-0252-z
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Pure-systems GmbH, 2020, PURE VARIANTS
   Rabiser R, 2019, 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE(SPLC 2019), VOL B, P134, DOI 10.1145/3307630.3342399
   Rosen J., 1995, SYMMETRY SCI
   Rosen J, 2008, FRONT COLLECT, P1
   Rubin J., 2013, Domain Engineering, P29, DOI DOI 10.1007/978-3-642-36654-3
   Schmid K, 2004, SCI COMPUT PROGRAM, V53, P259, DOI 10.1016/j.scico.2003.04.002
   Schneeweiss D., 2010, P 14 SOFTW PROD LIN, P219
   Shi N, 2006, IEEE INT CONF AUTOM, P123
   Shneiderman B, 1996, IEEE SYMPOSIUM ON VISUAL LANGUAGES, PROCEEDINGS, P336, DOI 10.1109/VL.1996.545307
   Stewart I., 1992, FEARFUL SYMMETRY IS
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Tërnava X, 2020, SPLC'19: PROCEEDINGS OF THE 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL A, P231, DOI 10.1145/3336294.3336311
   Tërnava X, 2017, 21ST INTERNATIONAL SYSTEM & SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2017), VOL 2, P81, DOI 10.1145/3109729.3109733
   Tërnava X, 2017, LECT NOTES COMPUT SC, V10221, P112, DOI 10.1007/978-3-319-56856-0_8
   Tornhill Adam., 2015, Your code as a crime scene: use forensic techniques to arrest defects, bottlenecks, and bad design in your programs
   Turner CR, 1999, J SYST SOFTWARE, V49, P3, DOI 10.1016/S0164-1212(99)00062-X
   ULLMANN JR, 1976, J ACM, V23, P31, DOI 10.1145/321921.321925
   Vera-Pérez OL, 2019, EMPIR SOFTW ENG, V24, P1195, DOI 10.1007/s10664-018-9653-2
   Wettel R, 2007, 4TH IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEDINGS, P92, DOI 10.1109/VISSOF.2007.4290706
   Wettel R, 2008, WORK CONF REVERSE EN, P219, DOI 10.1109/WCRE.2008.55
   Yu DJ, 2015, J SYST SOFTWARE, V103, P1, DOI 10.1016/j.jss.2015.01.019
   Zhang Bo., 2013, Proceedings of the 17th International Software Product Line Conference, P168
   ZHAO L, 2003, J OBJECT TECHNOL, V2, P123, DOI DOI 10.5381/JOT.2003.2.5.A3
   ZHAO L, 2002, P 14 INT C TECHN OBJ, P181
   Zhao L, 2008, COMMUN ACM, V51, P41, DOI 10.1145/1325555.1325564
   Ziadi T, 2012, EUR CON SFTWR MTNCE, P417, DOI 10.1109/CSMR.2012.52
NR 101
TC 1
Z9 1
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 25
DI 10.1007/s10515-022-00329-x
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZH9YO
UT WOS:000761284800001
DA 2024-07-18
ER

PT J
AU Abdellatif, M
   Tighilt, R
   Belkhir, A
   Moha, N
   Guéhéneuc, YG
   Beaudry, É
AF Abdellatif, Manel
   Tighilt, Rafik
   Belkhir, Abdelkarim
   Moha, Naouel
   Gueheneuc, Yann-Gael
   Beaudry, Eric
TI A multi-dimensional study on the state of the practice of REST APIs
   usage in Android apps
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE REST API; Android; Practices; Third-party HTTP libraries
ID AGREEMENT; SERVICES
AB REST APIs are gaining a tremendous attraction in industry and a growing usage in mobile platforms. They are well suited for providing content to apps running on small devices, like smartphones and tablets. Several research works studied REST APIs development practices for mobile apps. However, little is known about how Android apps use/consume these APIs in practice. Consequently, we propose a multi-dimensional study on the state of the practice of REST APIs usage in Android apps. We follow three directions: analysing of Android apps, mining Stack Overflow posts on REST APIs usage in Android apps, and surveying Android developers about their usage of REST APIs in their mobile apps. We (1) build a catalog of Android REST mobile clients practices, (2) propose an automatic approach to detect these practices, (3) analyze 1595 Android apps downloaded from the Google Play store, (4) mine 12,478 Stack Overflow posts to study REST APIs usage in Android apps, and (5) conduct an online survey with 118 Android developers to understand their usage of these practices. We report that only two good practices are widely considered by Android developers when implementing their mobile apps. These practices are network connectivity awareness and JSON versus XML response parsing. We also report Android developers' recommendations for the use of third-party HTTP libraries and their role in implementing the recommended practices.
C1 [Abdellatif, Manel; Tighilt, Rafik; Belkhir, Abdelkarim; Moha, Naouel; Beaudry, Eric] Univ Quebec Montreal, Montreal, PQ, Canada.
   [Abdellatif, Manel] Polytech Montreal, Montreal, PQ, Canada.
   [Gueheneuc, Yann-Gael] Concordia Univ, Montreal, PQ, Canada.
C3 University of Quebec; University of Quebec Montreal; Universite de
   Montreal; Polytechnique Montreal; Concordia University - Canada
RP Abdellatif, M (corresponding author), Univ Quebec Montreal, Montreal, PQ, Canada.; Abdellatif, M (corresponding author), Polytech Montreal, Montreal, PQ, Canada.
EM manel.abdellatif@polymtl.ca
RI Abdellatif, manel/JFS-0902-2023
OI Abdellatif, Manel/0000-0002-8647-1676
CR Abdellatif M, 2018, LECT NOTES COMPUT SC, V11236, P634, DOI 10.1007/978-3-030-03596-9_46
   Arroqui M, 2012, COMPUT ELECTRON AGR, V87, P14, DOI 10.1016/j.compag.2012.05.016
   Belkhir A, 2019, 2019 IEEE/ACM 6TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2019), P66, DOI 10.1109/MOBILESoft.2019.00020
   Brabra H, 2016, LECT NOTES COMPUT SC, V9936, P202, DOI 10.1007/978-3-319-46295-0_13
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Li D, 2016, PROC INT CONF SOFTW, P249, DOI 10.1145/2884781.2884867
   Li DQ, 2015, J INEQUAL APPL, DOI 10.1186/s13660-015-0556-0
   Li L, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P403, DOI 10.1109/SANER.2016.52
   Nurseitov Nurzhan, 2009, Proceedings on the ISCA 22nd International Conferenceon Computers and Their Applications in Industry and Engineering. CAINE-2009, P157
   Oumaziz MA, 2017, LECT NOTES COMPUT SC, V10601, P614, DOI 10.1007/978-3-319-69035-3_45
   Palma F, 2019, IEEE T SOFTWARE ENG, V45, P1024, DOI 10.1109/TSE.2018.2819180
   Palma F, 2015, LECT NOTES COMPUT SC, V9435, P171, DOI 10.1007/978-3-662-48616-0_11
   Palma F, 2014, LECT NOTES COMPUT SC, V8831, P230, DOI 10.1007/978-3-662-45391-9_16
   Petrillo F, 2016, LECT NOTES COMPUT SC, V9936, P157, DOI 10.1007/978-3-319-46295-0_10
   Rodrigues C, 2011, COMM COM INF SC, V220, P162
   Rodríguez C, 2016, LECT NOTES COMPUT SC, V9671, P21, DOI 10.1007/978-3-319-38791-8_2
   Salza P., 2019, EMPIR SOFTW ENG, V25, P1
   Singh R., 2013, ELEMENTS SURVEY SAMP
   Tilkov S, 2008, INFOQ ARTICLE
   Vall ~ee-Rai R., 2010, CASCON 1 DECADE HIGH, P214, DOI DOI 10.1145/1925805.1925818
   Wang HZ, 2016, LECT NOTES COMPUT SC, V9936, P352, DOI 10.1007/978-3-319-46295-0_22
NR 22
TC 3
Z9 4
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2020
VL 27
IS 3-4
SI SI
BP 187
EP 228
DI 10.1007/s10515-020-00272-9
EA AUG 2020
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OH9NE
UT WOS:000560258000001
DA 2024-07-18
ER

PT J
AU Alshanqiti, A
   Heckel, R
   Kehrer, T
AF Alshanqiti, Abdullah
   Heckel, Reiko
   Kehrer, Timo
TI Inferring visual contracts from Java programs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Visual contracts; Graph transformation; Model extraction; Dynamic
   analysis; Reverse engineering; Specification mining
ID MODEL TRANSFORMATION
AB Visual contracts model the operation of components or services by pre- and post-conditions formalised as graph transformation rules. They provide a precise intuitive notation to support testing, understanding and analysis of software. Their detailed specification of internal data states and transformations, referred to as deep behavioural modelling, is an error-prone activity. In this paper we propose a dynamic approach to reverse engineering visual contracts from Java based on tracing the execution of Java operations. The resulting contracts give an accurate description of the observed object transformations, their effects and preconditions in terms of object structures, parameter and attribute values, and their generalised specification by universally quantified (multi) objects, patterns, and invariants. While this paper focusses on the fundamental technique rather than a particular application, we explore potential uses in our evaluation, including in program understanding, review of test reports and debugging.
C1 [Alshanqiti, Abdullah; Heckel, Reiko] Univ Leicester, Dept Comp Sci, Leicester, Leics, England.
   [Kehrer, Timo] Humboldt Univ, Inst Informat, Berlin, Germany.
C3 University of Leicester; Humboldt University of Berlin
RP Alshanqiti, A (corresponding author), Univ Leicester, Dept Comp Sci, Leicester, Leics, England.
EM a.m.alshanqiti@gmail.com; reiko@mcs.le.ac.uk;
   timo.kehrer@informatik.hu-berlin.de
RI Kehrer, Timo/AAI-6563-2020; Alshanqiti, Abdullah/AAV-3441-2020; Heckel,
   Reiko/AAO-6439-2021
OI Kehrer, Timo/0000-0002-2582-5557; Alshanqiti,
   Abdullah/0000-0002-6080-5236; Heckel, Reiko/0000-0003-4719-0772
CR Alshanqiti A. M., 2014, ELECT COMMUNICATIONS, V67
   Alshanqiti A. M., 2013, ELECT COMMUNICATIONS, V58
   Alshanqiti A, 2015, IEEE INT CONF AUTOM, P104, DOI 10.1109/ASE.2015.63
   Alshanqiti A, 2016, IEEE INT CONF AUTOM, P816, DOI 10.1145/2970276.2970287
   [Anonymous], ECEASST
   Arendt T, 2013, AUTOMAT SOFTW ENG, V20, P141, DOI 10.1007/s10515-012-0114-7
   Arendt T, 2010, LECT NOTES COMPUT SC, V6394, P121
   Artzi Shay, 2006, P 1 WORKSH MOD BAS T, P2006
   Balogh Z, 2009, SOFTW SYST MODEL, V8, P347, DOI 10.1007/s10270-008-0092-1
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Brito H, 2012, J BRAZ COMPUT SOC, V19, P15, DOI [10.1007/s13173-012-0083-5, DOI 10.1007/S13173-012-0083-5]
   Bruggink HJS, 2014, LECT NOTES COMPUT SC, V8571, P253
   Bürdek J, 2016, AUTOMAT SOFTW ENG, V23, P687, DOI 10.1007/s10515-015-0185-3
   Dolques X, 2011, LECT NOTES COMPUT SC, V6698, P189, DOI 10.1007/978-3-642-21470-7_14
   Ehrig H., 2006, MONO THEOR COMP SCI, DOI 10.1007/3-540-31188-2
   Engels G, 2006, LECT NOTES COMPUT SC, V4178, P336
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Faunes M, 2012, IEEE INT CONF AUTOM, P250, DOI 10.1145/2351676.2351714
   Geiger L., 2007, ELECT COMMUNICATIONS, V1
   Hamann Lars, 2012, Modelling Foundations and Applications. Proceedings 8th European Conference, ECMFA 2012, P384, DOI 10.1007/978-3-642-31491-9_29
   HAUSMANN JH, 2005, INT J WEB SERV RES, V2, P67, DOI DOI 10.4018/jwsr.2005040104
   Heckel R, 2005, ELECTRON NOTES THEOR, V116, P145, DOI 10.1016/j.entcs.2004.02.073
   Kappel Gerti, 2012, Conceptual Modelling and Its Theoretical Foundations. Essays Dedicated to Bernhard Thalheim on the Occasion of his 60th Birthday, P197, DOI 10.1007/978-3-642-28279-9_15
   Kehrer T., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P163, DOI 10.1109/ASE.2011.6100050
   Kehrer T., 2013, MODELS WORKSHOP MODE, P30
   Kehrer T, 2017, LECT NOTES COMPUT SC, V10374, P92, DOI 10.1007/978-3-319-61473-1_7
   Kehrer T, 2016, LECT NOTES COMPUT SC, V9765, P173, DOI 10.1007/978-3-319-42064-6_12
   Khan Tamim Ahmed, 2012, Graph Transformations. Proceedings 6th International Conference, ICGT 2012, P279, DOI 10.1007/978-3-642-33654-6_19
   Langer P, 2010, LECT NOTES COMPUT SC, V6142, P153, DOI 10.1007/978-3-642-13688-7_11
   Malpani A, 2010, PROC INT CONF DATA, P1177, DOI 10.1109/ICDE.2010.5447776
   Mariani L, 2005, ELECTRON NOTES THEOR, V116, P17, DOI 10.1016/j.entcs.2004.02.089
   Martinez L., 2011, P INT C SOFTW ENG RE, V1, P58
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Pavletic Domenik, 2015, Reliable Software Technologies - Ada-Europe 2015. 20th Ada-Europe International Conference on Reliable Software Technologies. Proceedings: LNCS 9111, P33, DOI 10.1007/978-3-319-19584-1
   Rountev A., 2005, ACM SIGSOFT Software Engineering Notes, V31, P96
   Runge O., 2013, ECEASST, V58
   Sarkar M. K., 2013, INT J ADV COMPUT RES, V3, P135
   Shamshiri S, 2015, IEEE INT CONF AUTOM, P201, DOI 10.1109/ASE.2015.86
   Struber D., 2017, ICGT
   Tonella P, 2003, PROC IEEE INT CONF S, P159, DOI 10.1109/ICSM.2003.1235418
   Varró D, 2006, LECT NOTES COMPUT SC, V4199, P410
   You CH, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P977
   Zhao CY, 2010, IEEE T SOFTWARE ENG, V36, P431, DOI 10.1109/TSE.2010.3
   Ziadi T, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P107, DOI 10.1109/ICECCS.2011.18
NR 44
TC 0
Z9 0
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2018
VL 25
IS 4
SI SI
BP 745
EP 784
DI 10.1007/s10515-018-0242-9
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW9YB
UT WOS:000447363400004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nizamani, ZA
   Liu, H
   Chen, DM
   Niu, ZD
AF Nizamani, Zeeshan Ahmed
   Liu, Hui
   Chen, David Matthew
   Niu, Zhendong
TI Automatic approval prediction for software enhancement requests
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software enhancements; Machine learning; Multinomial naive Bayes;
   Document classification
ID TEXT CLASSIFICATION; BUG REPORT; SEVERITY; ACCURATE; ALGORITHMS
AB Software applications often receive a large number of enhancement requests that suggest developers to fulfill additional functions. Such requests are usually checked manually by the developers, which is time consuming and tedious. Consequently, an approach that can automatically predict whether a new enhancement report will be approved is beneficial for both the developers and enhancement suggesters. With the approach, according to their available time, the developers can rank the reports and thus limit the number of reports to evaluate from large collection of low quality enhancement requests that are unlikely to be approved. The approach can help developers respond to the useful requests more quickly. To this end, we propose a multinomial naive Bayes based approach to automatically predict whether a new enhancement report is likely to be approved or rejected. We acquire the enhancement reports of open-source software applications from Bugzilla for evaluation. Each report is preprocessed and modeled as a vector. Using these vectors with their corresponding approval status, we train a Bayes based classifier. The trained classifier predicts approval or rejection of the new enhancement reports. We apply different machine learning and neural network algorithms, and it turns out that the multinomial naive Bayes classifier yields the highest accuracy with the given dataset. The proposed approach is evaluated with 40,000 enhancement reports from 35 open source applications. The results of tenfold cross validation suggest that the average accuracy is up to 89.25%.
C1 [Nizamani, Zeeshan Ahmed; Liu, Hui; Chen, David Matthew; Niu, Zhendong] Beijing Inst Technol, Sch Comp Sci & Technol, Beijing 100081, Peoples R China.
C3 Beijing Institute of Technology
RP Liu, H (corresponding author), Beijing Inst Technol, Sch Comp Sci & Technol, Beijing 100081, Peoples R China.
EM nizamanishan@gmail.com; liuhui08@bit.edu.cn; chen7david@me.com;
   zniu@bit.edu.cn
RI niu, zhendong/KIJ-1559-2024
OI Niu, Zhendong/0000-0002-0576-7572
FU National Key Research and Development Program of China [2016YFB1000801];
   National Natural Science Foundation of China [61472034, 61772071,
   61690205]
FX The work is supported by the National Key Research and Development
   Program of China (2016YFB1000801) and the National Natural Science
   Foundation of China (61472034, 61772071,61690205).
CR [Anonymous], IJCAI 2001 WORKSHOP
   [Anonymous], 2014, P INT C INT C MACH L
   Antoniol Giuliano, 2008, P 2008 C CTR ADV STU
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Banerjee S., 2012, 2012 IEEE 14th International Symposium on High-Assurance Systems Engineering (HASE 2012), P74, DOI 10.1109/HASE.2012.38
   Bhattacharya P, 2012, J SYST SOFTWARE, V85, P2275, DOI 10.1016/j.jss.2012.04.053
   Chen J., 2011, EXPERT SYST APPL, V15, P2160
   Chen ZP, 2006, KNOWL-BASED SYST, V19, P422, DOI 10.1016/j.knosys.2006.03.005
   Chengnian Sun, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P253, DOI 10.1109/ASE.2011.6100061
   Delany SJ, 2012, EXPERT SYST APPL, V39, P9899, DOI 10.1016/j.eswa.2012.02.053
   Domingos P, 1997, MACH LEARN, V29, P103, DOI 10.1023/A:1007413511361
   Eberhardt J.J., 2015, Scholarly Horizons: University of Minnesota, Morris Undergraduate Journal, V2, P2
   Gad W, 2015, 2015 TENTH INTERNATIONAL CONFERENCE ON COMPUTER ENGINEERING & SYSTEMS (ICCES), P147, DOI 10.1109/ICCES.2015.7393036
   Gopalan Raj P., 2014, 23rd Australian Software Engineering Conference (ASWEC 2014), P104, DOI 10.1109/ASWEC.2014.31
   Hellerstein J., 2000, RECOGNIZING END USER, V19
   Herzig K, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P392, DOI 10.1109/ICSE.2013.6606585
   Hindle A, 2016, EMPIR SOFTW ENG, V21, P368, DOI 10.1007/s10664-015-9387-3
   Hu H, 2014, PROC INT SYMP SOFTW, P122, DOI 10.1109/ISSRE.2014.17
   Huo X, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1909
   Jeong G, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P111, DOI 10.1145/1595696.1595715
   Jiang LX, 2013, J EXP THEOR ARTIF IN, V25, P273, DOI 10.1080/0952813X.2012.721010
   Jin ZP, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON INTELLIGENCE AND SECURITY INFORMATICS (ISI), P132, DOI 10.1109/ISI.2015.7165952
   Lamkanfi Ahmed, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P1, DOI 10.1109/MSR.2010.5463284
   Lamkanfi A, 2011, EUR CON SFTWR MTNCE, P249, DOI 10.1109/CSMR.2011.31
   Lazar A., 2014, P 11 WORKING C MININ, P308
   Liang Feng, 2013, Web Technologies and Applications. 15th Asia-Pacific Web Conference, APWeb 2013. Proceedings, P709, DOI 10.1007/978-3-642-37401-2_69
   Lin MJ, 2016, J SYST SOFTWARE, V121, P223, DOI 10.1016/j.jss.2016.02.022
   Liu Y, 2015, AAAI CONF ARTIF INTE, P2418
   Menzies T, 2008, PROC IEEE INT CONF S, P346, DOI 10.1109/ICSM.2008.4658083
   Murphy G., 2004, P 16 INT C SOFTW ENG
   Naguib H., 2013 10 IEEE WORK C, P22
   Pingclasai N, 2013, ASIA PAC SOFWR ENG, P13, DOI 10.1109/APSEC.2013.105
   Rajlich V., 2014, Proceedings of the Conference on the Future of Software Engineering, P133, DOI [10.1145/2593882.2593893, DOI 10.1145/2593882.2593893]
   Rish I., 2001, ANAL DATA CHARACTERI, P30
   Roy NKS, 2014, EUROMICRO CONF PROC, P269, DOI 10.1109/SEAA.2014.51
   Santos I, 2012, EXPERT SYST APPL, V39, P437, DOI 10.1016/j.eswa.2011.07.034
   Saric F., 2012, Proceedings of the First Joint Conference on Lexical and Computational Semantics, P441
   Scholkopf B., 1998, Advances in Kernel Methods: Support Vector Learning
   Sohrawardi SJ, 2014, 2014 NINTH INTERNATIONAL CONFERENCE ON DIGITAL INFORMATION MANAGEMENT (ICDIM), P242, DOI 10.1109/ICDIM.2014.6991434
   Su J., P 28 INT C MACH LEAR, P97
   Tan SB, 2011, EXPERT SYST APPL, V38, P10264, DOI 10.1016/j.eswa.2011.02.114
   Thung F., 2014, P 29 ACM IEEE INT C, P871
   Tian Y, 2012, EUR CON SFTWR MTNCE, P385, DOI 10.1109/CSMR.2012.48
   Uysal AK, 2014, INFORM PROCESS MANAG, V50, P104, DOI 10.1016/j.ipm.2013.08.006
   Valdivia Garcia H., P 11 WORK C MIN SOFT, P72
   Wang SS, 2015, KNOWL INF SYST, V44, P77, DOI 10.1007/s10115-014-0746-y
   Wang X., 2008, P 30 INT C SOFTW ENG
   Wei Z., 2011, PROCEDIA ENG, V15, P2160
   Wu XD, 2008, KNOWL INF SYST, V14, P1, DOI 10.1007/s10115-007-0114-2
   Xia X, 2015, INFORM SOFTWARE TECH, V61, P93, DOI 10.1016/j.infsof.2014.12.006
   Xuan J., 2017, ARXIV170404769
   Yang JM, 2012, INFORM PROCESS MANAG, V48, P741, DOI 10.1016/j.ipm.2011.12.005
   Zaghloul W, 2009, IND MANAGE DATA SYST, V109, P708, DOI 10.1108/02635570910957669
   Zhang H., 2004, AA, V1, P3
   Zhang HY, 2007, GRC: 2007 IEEE INTERNATIONAL CONFERENCE ON GRANULAR COMPUTING, PROCEEDINGS, P708
   Zhang W, 2015, KNOWL-BASED SYST, V75, P152, DOI 10.1016/j.knosys.2014.11.028
   Zhang YD, 2014, KNOWL-BASED SYST, V64, P22, DOI 10.1016/j.knosys.2014.03.015
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
   Zimmermann T, 2010, IEEE T SOFTWARE ENG, V36, P618, DOI 10.1109/TSE.2010.63
NR 59
TC 13
Z9 14
U1 1
U2 8
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2018
VL 25
IS 2
BP 347
EP 381
DI 10.1007/s10515-017-0229-y
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF3PN
UT WOS:000431868200006
DA 2024-07-18
ER

PT J
AU Österlund, E
   Löwe, W
AF Osterlund, Erik
   Lowe, Welf
TI Self-adaptive concurrent components
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Context-aware composition; Self-adaptive components; Concurrent context
ID IMPLEMENTATION; SOFTWARE
AB Selecting the optimum component implementation variant is sometimes difficult since it depends on the component's usage context at runtime, e.g., on the concurrency level of the application using the component, call sequences to the component, actual parameters, the hardware available etc. A conservative selection of implementation variants leads to suboptimal performance, e.g., if a component is conservatively implemented as thread-safe while during the actual execution it is only accessed from a single thread. In general, an optimal component implementation variant cannot be determined before runtime and a single optimal variant might not even exist since the usage contexts can change significantly over the runtime. We introduce self-adaptive concurrent components that automatically and dynamically change not only their internal representation and operation implementation variants but also their synchronization mechanism based on a possibly changing usage context. The most suitable variant is selected at runtime rather than at compile time. The decision is revised if the usage context changes, e.g., if a single-threaded context changes to a highly contended concurrent context. As a consequence, programmers can focus on the semantics of their systems and, e.g., conservatively use thread-safe components to ensure consistency of their data, while deferring implementation and optimization decisions to context-aware runtime optimizations. We demonstrate the effect on performance with self-adaptive concurrent queues, sets, and ordered sets. In all three cases, experimental evaluation shows close to optimal performance regardless of actual contention.
C1 [Osterlund, Erik] Oracle, Stockholm, Sweden.
   [Lowe, Welf] Linnaeus Univ, Dept Comp Sci, Software Technol Labs, S-35106 Vaxjo, Sweden.
C3 Linnaeus University
RP Österlund, E (corresponding author), Oracle, Stockholm, Sweden.
EM erik.osterlund@oracle.com; Welf.Lowe@lnu.se
FU Swedish Research Council [2011-6185]
FX This research was supported by the Swedish Research Council Under Grant
   2011-6185.
CR Abbas N., 2010, P 4 EUR C SOFTW ARCH, P324, DOI [10.1145/1842752.1842812, DOI 10.1145/1842752.1842812]
   Ananian CS, 2005, INT S HIGH PERF COMP, P316, DOI 10.1109/HPCA.2005.41
   Andersson J, 2008, LECT NOTES COMPUT SC, V4954, P157
   [Anonymous], 2016, OBJ JAV PLATF SE 8
   [Anonymous], 1967, P APRIL 18 20 1967 S, DOI DOI 10.1145/1465482.1465560
   Damron P, 2006, ACM SIGPLAN NOTICES, V41, P336, DOI 10.1145/1168918.1168900
   Dice D, 2006, LECT NOTES COMPUT SC, V4167, P194
   Dig D, 2009, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2009.5070539
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   Felber P, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P237, DOI 10.1145/1345206.1345241
   Fomitchev M., 2004, ACM S PRINC DISTR CO, P50
   Frigo M, 2005, P IEEE, V93, P216, DOI 10.1109/JPROC.2004.840301
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gammie P, 2015, ACM SIGPLAN NOTICES, V50, P99, DOI [10.1145/2737924.2738006, 10.1145/2813885.2738006]
   Hammond L, 2004, CONF PROC INT SYMP C, P102
   Hawblitzel C, 2009, ACM SIGPLAN NOTICES, V44, P441, DOI 10.1145/1594834.1480935
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   Herlihy M., 1993, TRANSACTIONAL MEMORY, V21
   Herlihy M, 2008, LECT NOTES COMPUT SC, V5218, P350, DOI 10.1007/978-3-540-87779-0_24
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Kessler C, 2012, CONCURR COMP-PRACT E, V24, P481, DOI 10.1002/cpe.1844
   Kirchner J., 2015, INT J ADV INTELL SYS, V8, P347
   Kirchner J, 2015, LECT NOTES COMPUT SC, V9306, P95, DOI 10.1007/978-3-319-24072-5_7
   Kjolstad F, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P61, DOI 10.1145/1985793.1985803
   Kogan A, 2012, ACM SIGPLAN NOTICES, V47, P141, DOI 10.1145/2370036.2145835
   Kogan A, 2011, ACM SIGPLAN NOTICES, V46, P223, DOI 10.1145/2038037.1941585
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Li X., P INT S COD GEN OPT, P111
   Löwe W, 1999, TOOLS, V29, P351, DOI 10.1109/TOOLS.1999.779066
   Lowis M., 2007, Proceedings of the 2007 International Conference on Dynamic Languages: In Conjunction with the 15th International Smalltalk Joint Conference, P143, DOI DOI 10.1145/1352678.1352688
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Michael M. M., P 14 ANN ACM S PAR A, P73
   Michael MM, 2004, IEEE T PARALL DISTR, V15, P491, DOI 10.1109/TPDS.2004.8
   Moir M, 1997, LECT NOTES COMPUT SC, V1320, P305, DOI 10.1007/BFb0030692
   Moura JoseM. F., 2000, HIGH PERFORMANCE EMB
   Osterlund E., 2014, P 29 ACM IEEE INT C, V14, P223, DOI [10.1145/2642937.2642995, DOI 10.1145/2642937.2642995]
   Österlund E, 2015, ACM SIGPLAN NOTICES, V50, P56, DOI 10.1145/2754169.2754177
   Österlund E, 2013, IEEE INT CONF AUTOM, P410, DOI 10.1109/ASE.2013.6693099
   Pirinen P. P., 1998, P INT S MEM MAN, V98, P20, DOI [10.1145/286860.286863, DOI 10.1145/286860.286863]
   Pizlo F., P 9 INT C PRINC PRAC, P171
   Russell K, 2006, ACM SIGPLAN NOTICES, V41, P263, DOI 10.1145/1167515.1167496
   Saha B., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P187, DOI 10.1145/1122971.1123001
   Schonberg Edmond., 1979, POPL 79, P197, DOI DOI 10.1145/567752.567771
   Schultz UP, 1999, LECT NOTES COMPUT SC, V1628, P367
   Shavit N, 1997, DISTRIB COMPUT, V10, P99, DOI 10.1007/s004460050028
   Sundell H., 2005, PAR DISTR PROC S 200, P24
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Timnat S., 2012, PRINCIPLES DISTRIBUT, V7702, P330, DOI DOI 10.1007/978-3-642-35476-2
   Whaley RC, 2001, PARALLEL COMPUT, V27, P3, DOI 10.1016/S0167-8191(00)00087-9
   Xu GQ, 2013, LECT NOTES COMPUT SC, V7920, P1, DOI 10.1007/978-3-642-39038-8_1
NR 50
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2018
VL 25
IS 1
BP 47
EP 99
DI 10.1007/s10515-017-0219-0
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS2DV
UT WOS:000419589600003
DA 2024-07-18
ER

PT J
AU Kamalrudin, M
   Hosking, J
   Grundy, J
AF Kamalrudin, Massila
   Hosking, John
   Grundy, John
TI MaramaAIC: tool support for consistency management and validation of
   requirements
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Consistency management; Requirements validation; Essential use cases;
   Essential user interface
ID GOAL
AB Requirements captured by requirements engineers (REs) are commonly inconsistent with their client's intended requirements and are often error prone. There is limited tool support providing end-to-end support between the REs and their client for the validation and improvement of these requirements. We have developed an automated tool called MaramaAIC (Automated Inconsistency Checker) to address these problems. MaramaAIC provides automated requirements traceability and visual support to identify and highlight inconsistency, incorrectness and incompleteness in captured requirements. MaramaAIC provides an end-to-end rapid prototyping approach together with a patterns library that helps to capture requirements and check the consistency of requirements that have been expressed in textual natural language requirements and then extracted to semi-formal abstract interactions, essential use cases (EUCs) and user interface prototype models. It helps engineers to validate the correctness and completeness of the EUCs modelled requirements by comparing them to "best-practice" templates and generates an abstract prototype in the form of essential user interface prototype models and concrete User Interface views in the form of HTML. We describe its design and implementation together with results of evaluating our tool's efficacy and performance, and user perception of the tool's usability and its strengths and weaknesses via a substantial usability study. We also present a qualitative study on the effectiveness of the tool's end-to-end rapid prototyping approach in improving dialogue between the RE and the client as well as improving the quality of the requirements.
C1 [Kamalrudin, Massila] Univ Teknikal Malaysia Melaka, Innovat Software Syst & Serv Grp, Melaka, Malaysia.
   [Hosking, John] Univ Auckland, Fac Sci, Auckland, New Zealand.
   [Grundy, John] Swinburne Univ Technol, Sch Software & Elect Engn, POB 218, Hawthorn, Vic 3122, Australia.
C3 Universiti Teknologi Malaysia; University Teknikal Malaysia Melaka;
   University of Auckland; Swinburne University of Technology
RP Kamalrudin, M (corresponding author), Univ Teknikal Malaysia Melaka, Innovat Software Syst & Serv Grp, Melaka, Malaysia.
EM massila@utem.edu.my; j.hosking@auckland.ac.nz; jgrundy@swin.edu.au
RI Grundy, John/AAF-1716-2019; kamalrudin, massila/AAI-4061-2021
OI Grundy, John/0000-0003-4928-7076; kamalrudin,
   massila/0000-0003-4804-2042
FU University of Auckland; Swinburne University of Technology; Ministry of
   Higher Education Malaysia [FRGS/F00185]; Universiti Teknikal Malaysia
   Melaka (UTeM); New Zealand Ministry of Business, Innovation Employment
FX We acknowledge the support of the participants in our evaluation studies
   who willingly gave their time. Massila Kamalrudin acknowledges financial
   support from the University of Auckland, Swinburne University of
   Technology, Ministry of Higher Education Malaysia (FRGS/F00185) and
   Universiti Teknikal Malaysia Melaka (UTeM) for their assistance in this
   research. All authors acknowledge the support of the New Zealand
   Ministry of Business, Innovation & Employment via funding for the
   Software Process and Product Improvement project. We also thank Jun Huh
   for his assistance in developing MaramaAIC and Mark Young for his
   kindness in providing us the exemplar requirements. Finally, we thank
   the extremely thorough and detailed comments of the anonymous referees
   who went above and beyond the call of duty to give us very precise,
   detailed and very helpful assistance on earlier drafts of this article.
CR Acharya S, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P231
   Am Sampaio R, 2005, P 20 IEEE ACM INT C
   Ambler S. W., 2003, ESSENTIAL LOW FIDELI
   Ambler Scott W., 2004, The Object Primer: Agile Model-Driven Development with UML
   [Anonymous], REQUIREMENT ENG PROC
   [Anonymous], 2004, P 12 IEEE INT REQ EN
   [Anonymous], 2008 IEEE ACM INT C
   Biddle R., 2000, PATTERN ESSENTIAL US
   Biddle Robert, 2002, P 25 AUSTR C COMP SC, P7
   Bjork R C., 1998, Use Cases for Example ATM System:Gordon Collage Mathematics and Computer Science
   Blackwell AF, 2001, LECT NOTES ARTIF INT, V2117, P325
   Blackwell T.G.a.A., 1998, COGNITIVE DIMENSIONS
   Constantine L.L., 1998, SOFTW DEV, V6
   Constantine L.L., 1999, Software for Use: A Practical Guide to the Models and Methods of Usage-Centered Design
   Constantine L.L., 2003, P 25 INT C SOFTW ENG
   Constantine LL, 2001, AW OBJ TECHNOL S, P245
   Corporation B.S., 2011, CALIBERRM ENT SOFTW
   Cristian B., 2008, GENERATING ABSTRACT
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   Denger C., 2003, P IEEE INT C SOFTW S
   Egyed A, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P387, DOI 10.1109/ASE.2001.989835
   Evans G., GETTING USE CASES 1
   Fabbrini F., 2001, SOFTW ENG WORKSH 200
   Gefei Zhang, 2012, Modelling Foundations and Applications. Proceedings 8th European Conference, ECMFA 2012, P162, DOI 10.1007/978-3-642-31491-9_14
   Geisser M., 2007, WORKING PAPERS INFOR
   Gervasi V, 2005, ACM T SOFTW ENG METH, V14, P277, DOI 10.1145/1072997.1072999
   Glinz M, 2000, 4TH INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P49, DOI 10.1109/ICRE.2000.855584
   Guerra E, 2013, AUTOMAT SOFTW ENG, V20, P5, DOI 10.1007/s10515-012-0102-y
   Horton T., EXAMPLE USE CASES PA
   Hull E., 2005, DOORS TOOL MANAGE RE, P173
   Huzar Z., 2005, CONSISTENCY PROBLEMS, P1
   IBM, RAT REQUISITEPRO REQ
   Inc. S.S., 2011, REQ MAN PROV WAY ACC
   Jacobson Ivar., 1999, AW OBJ TECHNOL S
   Kamalrudin M., 2012, 27 AUT SOFTW ENG C E
   Kamalrudin M, 2011, P 2011 26 IEEE ACM I
   Kamalrudin M., 2014, INT J SOFTW ENG IJSE, V1
   Kamalrudin M., 2010, 25 IEEE ACM INT C AU
   Kim J, 2006, DATA KNOWL ENG, V58, P21, DOI 10.1016/j.datak.2005.05.006
   Kovacevic S., 1999, USER INTERFACE MODEL, P514
   Kutar M., 2000, 12 ANN M PSYCH PROGR
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Litvak B, 2003, I C SOFTW ENG FORM M, P118, DOI 10.1109/SEFM.2003.1236213
   Lopez-Herrejon R.E., 2012, P 6 INT WORKSH VAR M
   NENTWICH C, 2003, P 25 INT C SOFTW ENG
   Nguyen T.H., 2012, P 27 IEEE ACM INT C
   Nuseibeh B, 2000, COMPUTER, V33, P24, DOI 10.1109/2.839317
   Perrouin G., 2009, COMPOSING MODELS DET, P89
   Reder Alexander, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P202, DOI 10.1007/978-3-642-33666-9_14
   Robertson S., 2006, Mastering the Requirements Process
   Sardinha A, 2013, AUTOMAT SOFTW ENG, V20, P111, DOI 10.1007/s10515-012-0106-7
   Some S.S., 2005, P 13 IEEE INT C REQ
   Tjong S. F., 2006, 6 IEEE INT C COMP IN
   Van Buskirk R, 2003, IBM SYST J, V42, P613, DOI 10.1147/sj.424.0613
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P908, DOI 10.1109/32.730542
   Yu ESK, 1997, RE '97 - PROCEEDINGS OF THE THIRD IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, P226, DOI 10.1109/ISRE.1997.566873
   Yue T, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2699697
   Yufei X., 2010, 2 INT C COMP ENG TEC
   Zisman G.S.a.A., 2001, HDB SOFTWARE ENG KNO, V1, P329
   Zowghi D, 2003, INFORM SOFTWARE TECH, V45, P993, DOI 10.1016/S0950-5849(03)00100-9
NR 60
TC 14
Z9 15
U1 0
U2 12
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2017
VL 24
IS 1
BP 1
EP 45
DI 10.1007/s10515-016-0192-z
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EI2DM
UT WOS:000392296800001
DA 2024-07-18
ER

PT J
AU Bürdek, J
   Kehrer, T
   Lochau, M
   Reuling, D
   Kelter, U
   Schürr, A
AF Buerdek, Johannes
   Kehrer, Timo
   Lochau, Malte
   Reuling, Dennis
   Kelter, Udo
   Schuerr, Andy
TI Reasoning about product-line evolution using complex feature model
   differences
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software evolution; Model-driven engineering; Software product lines;
   Feature models
AB Features define common and variable parts of the members of a (software) product line. Feature models are used to specify the set of all valid feature combinations. Feature models not only enjoy an intuitive tree-like graphical syntax, but also a precise formal semantics, which can be denoted as propositional formulae over Boolean feature variables. A product line usually constitutes a long-term investment and, therefore, has to undergo continuous evolution to meet ever-changing requirements. First of all, product-line evolution leads to changes of the feature model due to its central role in the product-line paradigm. As a result, product-line engineers are often faced with the problems that (1) feature models are changed in an ad-hoc manner without proper documentation, and (2) the semantic impact of feature diagram changes is unclear. In this article, we propose a comprehensive approach to tackle both challenges. For (1), our approach compares the old and new version of the diagram representation of a feature model and specifies the changes using complex edit operations on feature diagrams. In this way, feature model changes are automatically detected and formally documented. For (2), we propose an approach for reasoning about the semantic impact of diagram changes. We present a set of edit operations on feature diagrams, where complex operations are primarily derived from evolution scenarios observed in a real-world case study, i.e., a product line from the automation engineering domain. We evaluated our approach to demonstrate its applicability with respect to the case study, as well as its scalability concerning experimental data sets.
C1 [Buerdek, Johannes; Lochau, Malte; Schuerr, Andy] Tech Univ Darmstadt, Real Time Syst Grp, Darmstadt, Germany.
   [Kehrer, Timo; Reuling, Dennis; Kelter, Udo] Univ Siegen, Software Engn Grp, Siegen, Germany.
C3 Technical University of Darmstadt; Universitat Siegen
RP Kehrer, T (corresponding author), Univ Siegen, Software Engn Grp, Siegen, Germany.
EM buerdek@es.tu-darmstadt.de; kehrer@informatik.uni-siegen.de;
   lochau@es.tu-darmstadt.de; dreuling@informatik.uni-siegen.de;
   kelter@informatik.uni-siegen.de; schuerr@es.tu-darmstadt.de
RI Kehrer, Timo/AAI-6563-2020
OI Kehrer, Timo/0000-0002-2582-5557
FU DFG (German Research Foundation) under the Priority Programme: Design
   For Future-Managed Software Evolution [SPP 1593]
FX This work was partially supported by the DFG (German Research
   Foundation) under the Priority Programme SPP 1593: Design For
   Future-Managed Software Evolution.
CR Acher M., 2012, CAISE 24 INT C ADV I
   Amelunxen C, 2008, IET SOFTW, V2, P204, DOI 10.1049/iet-sen:20070076
   [Anonymous], 2004, WORKSH DIR SOFTW ENG
   [Anonymous], 2006, P 5 INT C GEN PROGR
   Arendt T., 2010, MODEL DRIVEN ENG LAN
   Barone I, 2008, PROC IEEE INT CONF S, P462, DOI 10.1109/ICSM.2008.4658105
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bayer J., 1999, SSR'99. Proceedings of the Fifth Symposium on Software Reusability. Bridging the Gap Between Research and Practice, P122, DOI 10.1145/303008.303063
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Bendix L, 2009, MBSE: 2009 INTERNATIONAL CONFERENCE ON MODEL-BASED SYSTEMS ENGINEERING, P60, DOI 10.1109/MBSE.2009.5031721
   Biermann E, 2010, LECT NOTES COMPUT SC, V5765, P121, DOI 10.1007/978-3-642-17322-6_7
   Botterweck G., 2010, Proceedings of the 2010 ICSE Workshop on Product Line Approaches in Software Engineering, P24
   Botterweck Goetz., 2014, EVOLVING SOFTWARE SY, P265, DOI DOI 10.1007/978-3-642-45398-4_9
   Braun S., 2012, INT C MATH MOD WIEN
   Bruegge B, 2006, 2006 IEEE INTERNATIONAL CONFERENCE ON GLOBAL SOFTWARE ENGINEERING, PROCEEDINGS, P139, DOI 10.1109/ICGSE.2006.261227
   Brun Cedric, 2008, UPGRADE, The European Journal for the Informatics Professional, V9, P29
   Conradi R, 1998, ACM COMPUT SURV, V30, P232, DOI 10.1145/280277.280280
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Dhungana D, 2010, J SYST SOFTWARE, V83, P1108, DOI 10.1016/j.jss.2010.02.018
   Ehrig H, 2006, FUNDAMENTALS ALGEBRA, V373
   Gheyi R, 2011, J UNIVERS COMPUT SCI, V17, P684
   HERRMANNSDOERFE.M, 2010, P 1 INT WORKSH MOD C, P76, DOI DOI 10.1145/1826147.1826161
   Johansen Martin Fagereng, 2012, P 16 INT SOFTWARE PR, P46, DOI [10.1145/2362536.2362547, DOI 10.1145/2362536.2362547]
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kang K, 1990, TECH REP
   Kehrer T., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P163, DOI 10.1109/ASE.2011.6100050
   Kehrer T, 2014, AT-AUTOM, V62, P803, DOI 10.1515/auto-2014-1102
   Kehrer T, 2013, IEEE INT CONF AUTOM, P191, DOI 10.1109/ASE.2013.6693079
   Kehrer T, 2012, IEEE INT CONF AUTOM, P306, DOI 10.1145/2351676.2351731
   Kehrer T, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P638, DOI 10.1109/ICSM.2012.6405342
   Kehrer Timo, 2014, P ACM IEEE INT C AUT, P827
   Kelter U., 2005, SOFTWARE ENG, P105
   Könemann P, 2010, LECT NOTES COMPUT SC, V6395, P108
   KOGEL M, 2008, P 2008 INT WORKSH CO, P19, DOI DOI 10.1145/1370152.1370158
   Kolovos DS, 2009, LECT NOTES COMPUT SC, V5562, P146, DOI 10.1007/978-3-642-02674-4_11
   KOLOVOS DS, 2009, ICSE WORKSH COMP VER, P1
   Küster JM, 2008, LECT NOTES COMPUT SC, V5240, P244, DOI 10.1007/978-3-540-85758-7_19
   Langer P, 2013, J SYST SOFTWARE, V86, P551, DOI 10.1016/j.jss.2012.09.037
   Lin YH, 2007, EUR J INFORM SYST, V16, P349, DOI 10.1057/palgrave.ejis.3000685
   Lippe E., 1992, SIGSOFT Software Engineering Notes, V17, P78, DOI 10.1145/142882.143753
   Lity S., 2015, MBEES, P43
   Lotufo R, 2010, LECT NOTES COMPUT SC, V6287, P136, DOI 10.1007/978-3-642-15579-6_10
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Myers EW, 1986, ALGORITHMICA, V1, P251, DOI 10.1007/BF01840446
   Nejati S, 2007, PROC INT CONF SOFTW, P54
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Object Management Group, 2006, MET FAC MOF COR SPEC
   Pleuss A, 2012, J SYST SOFTWARE, V85, P2261, DOI 10.1016/j.jss.2011.08.008
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Schurr A., 1996, Fundamenta Informaticae, V26, P363
   Segura S., 2012, Proceedings of the Sixth International Workshop on Variability Modeling of Software-Intensive Systems, P63, DOI DOI 10.1145/2110147.2110155
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Sturmer I., 2007, MBEES, P83
   Sun J, 2005, IEEE INT C ENG COMP, P303
   Thüm T, 2009, PROC INT CONF SOFTW, P254, DOI 10.1109/ICSE.2009.5070526
   Thüma T, 2014, SCI COMPUT PROGRAM, V79, P70, DOI 10.1016/j.scico.2012.06.002
   Tichy W. F., 1988, Proceedings of the International Workshop on Software Version and Configuration Control, P1
   TICHY WF, 1984, ACM T COMPUT SYST, V2, P309, DOI 10.1145/357401.357404
   Vogel-Heuser B., 2014, Researching Evolution in Industrial Plant Automation: Scenarios and Documentation of the Pick and Place Unit
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
   Xing ZC, 2006, WORK CONF REVERSE EN, P263
   Xing ZC, 2007, AUTOMAT SOFTW ENG, V14, P215, DOI 10.1007/s10515-007-0007-3
NR 62
TC 36
Z9 38
U1 0
U2 14
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2016
VL 23
IS 4
BP 687
EP 733
DI 10.1007/s10515-015-0185-3
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DV1HD
UT WOS:000382670800007
DA 2024-07-18
ER

PT J
AU Jia, ZC
   Chen, R
   Xing, X
   Xu, JJ
   Xie, YW
AF Jia, Zhichun
   Chen, Rong
   Xing, Xing
   Xu, Junjie
   Xie, Yiwu
TI SFDCloud: top-<i>k</i> service faults diagnosis in cloud computing
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Fault diagnosis; Cloud computing; Web service composition; Service
   dependence graph
AB With a variety of providers large and small delivering a number of cloud-based services, cloud computing is evolving into an important service delivery infrastructure. One of the challenges in this evolution is how to provide necessary fault handling for migration long-running or computationally-intensive application services into shared open cloud infrastructures. To minimize failure impact on services and application executions, we present a diagnostic architecture and a diagnosis method based on the service dependence graph (SDG) model and the service execution log for handling service faults. By decoupling diagnosis service components and sharing diagnosis resources, the scalability of diagnosis methods is improved by incorporating third-party diagnostic components into our architecture. By analyzing the dependence relations of activities in SDG model, our diagnosis method identifies the incorrect activities, and explains the root causes for the web service composition faults, based on the differences between successful and failed executions of composite service. Experimental results show that our method is effective in diagnosing faults in web service composition of various scales.
C1 [Jia, Zhichun; Chen, Rong; Xing, Xing; Xu, Junjie; Xie, Yiwu] Dalian Maritime Univ, Sch Informat Sci & Technol, Dalian 116026, Peoples R China.
C3 Dalian Maritime University
RP Chen, R (corresponding author), Dalian Maritime Univ, Sch Informat Sci & Technol, Dalian 116026, Peoples R China.
EM rchen@dlmu.edu.cn
RI Jia, Zhichun/AAN-7132-2020; Xu, Junjie/KMA-6697-2024; Xing,
   Xing/JUF-7767-2023; Chen, Rong/AAM-2436-2020
OI Chen, Rong/0000-0001-5848-6398; Xing, Xing/0000-0003-0130-0147
CR Abreu R., 2009, S REF APPR LAK ARR C
   Abreu R, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P89, DOI 10.1109/TAIC.PART.2007.13
   Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   Ait-Bachir A., 2009, P 20 INT C DAT EXP S
   Alodib M., 2009, 7 IEEE EUR C WEB SER
   Andrews Tony., 2003, Business process execution language for web services
   [Anonymous], 2008, P 17 INT C WORLD WID, DOI DOI 10.1145/1367497.1367605
   Ardissono L., 2005, P 3 EUR C WEB SERV E
   Ardissono L., 2006, P 3 EUR C SOFTW ARCH
   Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   Baah GK, 2010, IEEE T SOFTWARE ENG, V36, P528, DOI 10.1109/TSE.2009.87
   Chiang ML, 2012, J NETW SYST MANAG, V20, P579, DOI 10.1007/s10922-012-9247-z
   Dai Y., 2011, 2011 IEEE INT C SERV
   Du J., 2010, P 5 ACM S INF COMP C
   Duan S., 2010, P 2010 IEEE IFIP NET
   Friedrich G, 2010, IEEE T SOFTWARE ENG, V36, P198, DOI 10.1109/TSE.2010.8
   Hamadi R, 2008, DISTRIB PARALLEL DAT, V23, P1, DOI 10.1007/s10619-007-7020-1
   Han X., 2010, 2010 IEEE WIC ACM IN
   Höfer CN, 2011, J INTERNET SERV APPL, V2, P81, DOI 10.1007/s13174-011-0027-x
   Hui SC, 2001, ENG APPL ARTIF INTEL, V14, P537, DOI 10.1016/S0952-1976(01)00018-5
   Jhawar R, 2012, 2012 IEEE FIRST AESS EUROPEAN CONFERENCE ON SATELLITE TELECOMMUNICATIONS (ESTEL)
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Juhnke E., 2009, 35 EUR C SOFTW ENG A
   Kang H., 2010, P 7 INT C AUT COMP W
   Kemper P, 2009, IEEE T SOFTWARE ENG, V35, P195, DOI 10.1109/TSE.2008.75
   Kopp O, 2010, LECT NOTES COMPUT SC, V6470, P303, DOI 10.1007/978-3-642-17358-5_21
   Lakshmi H.N., 2011, INT J COMPUT COMMUN, V3, P13
   Li Y., 2009, P 2009 21 IEEE INT C
   Liu A, 2010, IEEE T SERV COMPUT, V3, P46, DOI 10.1109/TSC.2009.28
   Mayer W, 2010, LECT NOTES COMPUT SC, V6470, P334, DOI 10.1007/978-3-642-17358-5_23
   Mell P, 2010, COMMUN ACM, V53, P50
   Mi H., 2012, IEEE NETW OP MAN S N
   Moo-Mena F., 2008, P 11 INT C COMP SCI
   Mostefaoui G.K., 2007, P 2007 2 INT C COMM
   Motahari-Nezhad H.R., 2009, OUTSOURCING BUSINESS, VHPL-2009-23
   Nielsen J., 1993, Response times: The 3 important limits
   Pencolé Y, 2009, J UNIVERS COMPUT SCI, V15, P3246
   Sharma B., 2013, 43 IEEE IFIP INT C D
   Silas S, 2012, HUM-CENTRIC COMPUT I, V2, DOI 10.1186/2192-1962-2-5
   Song W., 2011, 2011 IEEE INT C WEB
   Vaquero LM, 2009, ACM SIGCOMM COMP COM, V39, P50, DOI 10.1145/1496091.1496100
   Venkatasubramanian V, 2003, COMPUT CHEM ENG, V27, P327, DOI 10.1016/S0098-1354(02)00162-X
   Wang H., 2006, P 19 INT FLOR ART IN
   Wei Y, 2010, IEEE INTERNET COMPUT, V14, P72, DOI 10.1109/MIC.2010.147
   Xu X, 2012, ROBOT CIM-INT MANUF, V28, P75, DOI 10.1016/j.rcim.2011.07.002
   Yan YH, 2009, INT J WEB SERV RES, V6, P87, DOI 10.4018/jwsr.2009092205
   Yang K., 2009, WASE INT C INF ENG I
   Yu K., 2011, P 2011 ACM S APPL CO
   Yu Y., 2008, ACM IEEE 30 INT C SO
   Zhang Y., 2011, 2011 IEEE INT C CLOU
   Zubarev J., 2011, CLOUD SERVICES OPPOR
NR 51
TC 4
Z9 4
U1 0
U2 25
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2014
VL 21
IS 4
SI SI
BP 461
EP 488
DI 10.1007/s10515-013-0137-8
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AQ9UD
UT WOS:000343201000003
DA 2024-07-18
ER

PT J
AU Nerella, VKS
   Surapaneni, S
   Madria, SK
   Weigert, T
AF Nerella, Venkata Krishna Suhas
   Surapaneni, Swetha
   Madria, Sanjay K.
   Weigert, Thomas
TI Exploring optimization and caching for efficient collection operations
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Run time; Collection operations; Joins; Query optimization; Cache
   policy; Join caching; Selectivity
AB Many large programs operate on collection types. Extensive libraries are available in many programming languages, such as the C++ Standard Template Library, which make programming with collections convenient. Extending programming languages to provide collection queries as first class constructs in the language would not only allow programmers to write queries explicitly in their programs but it would also allow compilers to leverage the wealth of experience available from the database domain to optimize such queries. This paper describes an approach to reduce the run time of programs involving explicit collection queries by performing run time query optimization that is effective for single runs of a program. In addition, it also leverages a cache to store previously computed results. The proposed approach relies on histograms built from the data at run time to estimate the selectivity of joins and predicates in order to construct query plans. Information from earlier executions of the same query during run time is leveraged during the construction of the query plans, even when the data has changed between these executions. An effective cache policy is also determined for caching the results of join (sub) queries. The cache is maintained incrementally, when the underlying collections change, and use of the cache space is optimized by a cache replacement policy. Our approach has been implemented within the Java Query Language (JQL) framework using AspectJ. Our approach demonstrated that its run time query optimization in integration with caching sub query result significantly improves the run time of programs with explicit queries over equivalent programs performing collection operations by iterating over those collections. This paper evaluates our approach using synthetic as well as real world Robocode programs by comparing it to JQL as a benchmark. Experimental results show that our approach performs better than the JQL approach with respect to the program run time.
C1 [Nerella, Venkata Krishna Suhas; Surapaneni, Swetha; Madria, Sanjay K.; Weigert, Thomas] Missouri Univ Sci & Technol, Dept Comp Sci, Rolla, MO 65409 USA.
C3 University of Missouri System; Missouri University of Science &
   Technology
RP Madria, SK (corresponding author), Missouri Univ Sci & Technol, Dept Comp Sci, Rolla, MO 65409 USA.
EM vnhh4@mail.mst.edu; ssfz2@mst.edu; madrias@mst.edu; weigert@mst.edu
OI Madria, Sanjay/0000-0002-2768-3660
CR Aboulnaga A, 1999, SIGMOD RECORD, VOL 28, NO 2 - JUNE 1999, P181, DOI 10.1145/304181.304198
   Acar U. A., 2008, P 25 ANN ACM S PRINC
   Acar UA, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596530
   Antoshenkov G., 1996, VLDB Journal, V5, P229, DOI 10.1007/s007780050026
   Antoshenkov G., 1993, Proceedings. Ninth International Conference on Data Engineering (Cat. No.92CH3258-1), P538, DOI 10.1109/ICDE.1993.344026
   BABU S, 2005, P 21 INT C DAT ENG
   Bizarro P, 2009, IEEE T KNOWL DATA EN, V21, P582, DOI 10.1109/TKDE.2008.160
   Cao P, 1997, PROCEEDINGS OF THE USENIX SYMPOSIUM ON INTERNET TECHNOLOGIES AND SYSTEMS, P193
   Chaudhuri S., 1998, Proceedings of the Seventeenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems. PODS 1998, P34, DOI 10.1145/275487.275492
   Chen Y., 2007, P 2007 ACM IEEE C SU
   Chidlovskii B., 2000, VLDB J
   Chu F., 1999, P ACM S PRINC DAT SY
   Cole R. L., 1994, SIGMOD Record, V23, P150, DOI 10.1145/191843.191872
   Cole R.L., 2000, IEEE DATA ENG B
   DAR S, 1996, P 22 INT VLDB C
   Degenaro L., 2000, IFIP ACM INT C DISTR
   Deshpande P., 1998, P 1998 ACM SIGMOD IN, V27
   Fu Y., 2005, TECHNICAL REPORT
   Getoor L, 2001, SIGMOD RECORD, V30, P461, DOI 10.1145/376284.375727
   Gibbons PB, 2002, ACM T DATABASE SYST, V27, P261, DOI 10.1145/581751.581753
   Halevy AY, 2001, VLDB J, V10, P270, DOI 10.1007/s007780100054
   Hellerstein J. M., 1996, SIGMOD Record, V25, P423, DOI 10.1145/235968.233359
   IOANNIDIS YE, 1992, PROC INT CONF VERY L, P103
   Ioannidis YE, 1996, ACM COMPUT SURV, V28, P121, DOI 10.1145/234313.234367
   Kabra N., 1998, SIGMOD Record, V27, P106, DOI 10.1145/276305.276315
   Keller A. M., 1996, VLDB Journal, V5, P35, DOI 10.1007/s007780050014
   Kossmann D, 2000, ACM T DATABASE SYST, V25, P43, DOI 10.1145/352958.352982
   Labio W., 2000, P 26 INT C VERY LARG, P461
   Lempel R., 2003, P 12 INT C WORLD WID
   Lencevicius R, 1997, ACM SIGPLAN NOTICES, V32, P304, DOI 10.1145/263700.263752
   Meijer E., 2006, SIGMOD
   Michael Isard Dennis Fetterly Yuan Yu., 2009, Proc. LSDS-IR, P8
   MISTRY H, 2001, P ACM SIGMOD
   Nerella V., 2011, IEEE 35 ANN COMPUTER, P468
   Nerella Venkata Krishna Suhas, 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P407, DOI 10.1109/COMPSAC.2010.48
   Ozcan R, 2011, ACM T WEB, V5, DOI 10.1145/1961659.1961663
   Ozcan Rifat, 2008, P 17 INT C WORLD WID
   Qian XL, 1996, PROC INT CONF DATA, P48, DOI 10.1109/ICDE.1996.492088
   Quass D, 1996, PROCEEDINGS OF THE FOURTH INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED INFORMATION SYSTEMS, P158, DOI 10.1109/PDIS.1996.568677
   Ross K. A., 1996, SIGMOD Record, V25, P447, DOI 10.1145/235968.233361
   ROUSSOPOULOS N, 1982, ACM T DATABASE SYST, V7, P258, DOI 10.1145/319702.319729
   ROUSSOPOULOS N, 1991, ACM T DATABASE SYST, V16, P535, DOI 10.1145/111197.111215
   Seppi K. D., 1993, ORSA Journal on Computing, V5, P410, DOI 10.1287/ijoc.5.4.410
   Serpanos DN, 2000, 2000 IEEE INTERNATIONAL CONFERENCE ON MULTIMEDIA AND EXPO, PROCEEDINGS VOLS I-III, P727, DOI 10.1109/ICME.2000.871464
   Steinbrunn M., 1997, VLDB Journal, V6, P191, DOI 10.1007/s007780050040
   Surapaneni S., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P468, DOI 10.1109/ASE.2011.6100101
   Willis D., 2008, THESIS VICTORIA U WE
   Willis D, 2008, ACM SIGPLAN NOTICES, V43, P1, DOI 10.1145/1449955.1449766
   Willis Darren, 2006, P EUR C OBJ OR PROGR
   Zhou Jingren, 2007, P 23 INT C DAT ENG I, P526
NR 50
TC 3
Z9 3
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2014
VL 21
IS 1
BP 3
EP 40
DI 10.1007/s10515-013-0119-x
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AA3EG
UT WOS:000330975100002
DA 2024-07-18
ER

PT J
AU Shahamiri, SR
   Wan-Kadir, WMN
   Ibrahim, S
   Hashim, SZM
AF Shahamiri, Seyed Reza
   Wan-Kadir, Wan M. N.
   Ibrahim, Suhaimi
   Hashim, Siti Zaiton Mohd
TI Artificial neural networks as multi-networks automated test oracle
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automated software testing; Software test oracle; Artificial neural
   networks; Mutation testing
ID SOFTWARE; GENERATION
AB One of the important issues in software testing is to provide an automated test oracle. Test oracles are reliable sources of how the software under test must operate. In particular, they are used to evaluate the actual results produced by the software. However, in order to generate an automated test oracle, it is necessary to map the input domain to the output domain automatically. In this paper, Multi-Networks Oracles based on Artificial Neural Networks are introduced to handle the mapping automatically. They are an enhanced version of previous ANN-Based Oracles. The proposed model was evaluated by a framework provided by mutation testing and applied to test two industry-sized case studies. In particular, a mutated version of each case study was provided and injected with some faults. Then, a fault-free version of it was developed as a Golden Version to evaluate the capability of the proposed oracle finding the injected faults. Meanwhile, the quality of the proposed oracle is measured by assessing its accuracy, precision, misclassification error and recall. Furthermore, the results of the proposed oracle are compared with former ANN-based Oracles. Accuracy of the proposed oracle was up to 98.93%, and the oracle detected up to 98% of the injected faults. The results of the study show the proposed oracle has better quality and applicability than the previous model.
C1 [Shahamiri, Seyed Reza] Univ Malaya, Dept Software Engn, Fac Comp Sci & Informat Technol, Kuala Lumpur 50603, Malaysia.
   [Wan-Kadir, Wan M. N.; Ibrahim, Suhaimi; Hashim, Siti Zaiton Mohd] Univ Teknol Malaysia, Dept Software Engn, Fac Comp Sci & Informat Syst, Utm Skudai 81310, Johor, Malaysia.
C3 Universiti Malaya; Universiti Teknologi Malaysia
RP Shahamiri, SR (corresponding author), Univ Malaya, Dept Software Engn, Fac Comp Sci & Informat Technol, Kuala Lumpur 50603, Malaysia.
EM admin@rezanet.com
RI Shahamiri, Seyed Reza/G-4389-2011; Hashim, Siti Zaiton
   Mohd/AAE-5401-2020; Ibrahim, Suhaimi/A-2724-2014
OI Shahamiri, Seyed Reza/0000-0003-1543-5931; Ibrahim,
   Suhaimi/0000-0001-9274-7117; Wan Kadir, Wan Mohd
   Nasir/0000-0003-4459-4050
CR Aggarwal KK., 2004, ACM SIGSOFT Software Engineering Notes, V29, P1, DOI [DOI 10.1145/986710.986725, 10.1145/986710.986725]
   Ammann Paul, 2008, Introduction to software testing, V1st
   [Anonymous], 2002, SOFTWARE TESTING CRA
   [Anonymous], 1994, Connectionist Speech Recognition: A Hybrid Approach
   Briand LC, 2009, INFORM SOFTWARE TECH, V51, P16, DOI 10.1016/j.infsof.2008.09.010
   Hall RJ, 2008, AUTOMAT SOFTW ENG, V15, P113, DOI 10.1007/s10515-008-0026-8
   Heiat A, 2002, INFORM SOFTWARE TECH, V44, P911, DOI 10.1016/S0950-5849(02)00128-3
   Jin H., 2008, P 2008 INT C COMP SC
   Kessentini M, 2011, AUTOMAT SOFTW ENG, V18, P199, DOI 10.1007/s10515-010-0079-3
   Khoshgoftaar T. M., 1992, Proceedings. Third International Symposium on Software Reliability Engineering (Cat. No.92TH0486-1), P83, DOI 10.1109/ISSRE.1992.285855
   KHOSHGOFTAAR TM, 1995, SOFTWARE ENG J, V10, P89, DOI 10.1049/sej.1995.0012
   Khoshgoftaar TM, 2000, 3RD IEEE SYMPOSIUM ON APPLICATION SPECIFIC SYSTEMS AND SOFTWARE ENGINEERING TECHNOLOGY, PROCEEDINGS, P57, DOI 10.1109/ASSET.2000.888032
   Last M, 2004, INT J SOFTW ENG KNOW, V14, P369, DOI 10.1142/S0218194004001737
   Last M, 2004, S MACH PERC, V56, P21
   Manolache LI, 2001, SOFTWARE PRACT EXPER, V31, P1211, DOI 10.1002/spe.409
   McCaffrey, 2009, SOFTWARE TESTING FUN
   Memon A, 2005, J SOFTW MAINT EVOL-R, V17, P27, DOI 10.1002/smr.305
   Memon A. M., 2000, Software Engineering Notes, V25, P30, DOI 10.1145/357474.355050
   Memon AM, 2004, S MACH PERC, V56, P51
   Menhaj M.B., 2001, BASICS NEURAL NETWOR
   Michael C., 1998, 13 IEEE INT C AUT SO
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Ntafos SC, 2001, IEEE T SOFTWARE ENG, V27, P949, DOI 10.1109/32.962563
   Patton R., 2005, SOFTWARE TESTING, VSecond
   Peters D., 1994, SIGSOFT Software Engineering Notes, P58
   Peters DK, 1998, IEEE T SOFTWARE ENG, V24, P161, DOI 10.1109/32.667877
   Pfleeger SL, 1997, COMPUTER, V30, P33, DOI 10.1109/2.566148
   Ran LH, 2009, INFORM SOFTWARE TECH, V51, P460, DOI 10.1016/j.infsof.2008.05.016
   Richardson D. J., 1992, International Conference on Software Engineering, P105, DOI 10.1145/143062.143100
   Saraph P, 2003, IEEE SYS MAN CYBERN, P768
   Schalkoff R. J., 1997, ARTIFICIAL NEURAL NE
   Schroeder P. J., 2000, Software Engineering Notes, V25, P173, DOI 10.1145/347636.349042
   Schroeder PJ, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P139, DOI 10.1109/ASE.2002.1115005
   Shahamiri S. R., 2010, 2010 2nd International Conference on Software Technology and Engineering (ICSTE 2010), P272, DOI 10.1109/ICSTE.2010.5608808
   Shahamiri S.R., 2008, 4 POSTGR ANN RES SEM
   Shahamiri SR, 2011, INFORM SOFTWARE TECH, V53, P774, DOI 10.1016/j.infsof.2011.02.006
   Shahamiri SR, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ADVANCES (ICSEA 2009), P140, DOI 10.1109/ICSEA.2009.29
   Shahamiri SR, 2010, INT CONF COMP SCI, P30, DOI 10.1109/ICCSIT.2010.5563989
   Sofokleous AA, 2008, J SYST SOFTWARE, V81, P1883, DOI 10.1016/j.jss.2007.12.809
   Spillner A., 2007, SOFTWARE TESTING FDN, V2
   Stocks P, 1996, IEEE T SOFTWARE ENG, V22, P777, DOI 10.1109/32.553698
   Su YS, 2007, J SYST SOFTWARE, V80, P606, DOI 10.1016/j.jss.2006.06.017
   Sun Y., 2010, 13 INT C TEXT SPEECH
   Vanmali M, 2002, INT J INTELL SYST, V17, P45, DOI 10.1002/int.1002
   Whittaker JA, 2000, IEEE SOFTWARE, V17, P70, DOI 10.1109/52.819971
   Woodward MR, 2006, INFORM SOFTWARE TECH, V48, P433, DOI 10.1016/j.infsof.2005.05.003
   WOODWARD MR, 1993, INFORM SOFTWARE TECH, V35, P163, DOI 10.1016/0950-5849(93)90053-6
   Ye M, 2006, LECT NOTES COMPUT SC, V4234, P498
   Ying Lu, 2007, Information Technology Journal, V6, P469
NR 50
TC 34
Z9 38
U1 1
U2 11
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2012
VL 19
IS 3
BP 303
EP 334
DI 10.1007/s10515-011-0094-z
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 988QR
UT WOS:000307506100003
DA 2024-07-18
ER

PT J
AU Antkiewicz, M
   Bartolomei, TT
   Czarnecki, K
AF Antkiewicz, Michal
   Bartolomei, Thiago Tonelli
   Czarnecki, Krzysztof
TI Fast extraction of high-quality framework-specific models from
   application code
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 22nd International Conference on Automated Software Engineering
CY NOV 05-09, 2007
CL Atlanta, GA
DE Reverse engineering; Framework-specific models; Framework-specific
   modeling languages; Static analysis; Object-oriented frameworks;
   Application programming interface; API
AB Framework-specific models represent the design of application code from the framework viewpoint by showing how framework-provided concepts are instantiated in the code. Retrieving such models quickly and precisely is necessary for practical model-supported software engineering, in which developers use design models for development tasks such as code understanding, verifying framework usage rules, and round-trip engineering. Also, comparing models extracted at different times of the software lifecycle supports software evolution tasks.
   We describe an experimental study of the static analyses necessary to automatically retrieve framework-specific models from application code. We reverse engineer a number of applications based on three open-source frameworks and evaluate the quality of the retrieved models. The models are expressed using framework-specific modeling languages (FSMLs), each designed for an open-source framework. For reverse engineering, we use prototype implementations of the three FSMLs.
   Our results show that for the considered frameworks and a large body of application code rather simple code analyses are sufficient for automatically retrieving framework-specific models with high precision and recall. Based on the initial results, we refine the static analyses and repeat the study on a larger set of applications to provide more evidence and confirm the results. The refined static analyses provide precision and recall of close to 100% for the analyzed applications.
C1 [Antkiewicz, Michal; Bartolomei, Thiago Tonelli; Czarnecki, Krzysztof] Univ Waterloo, Generat Software Dev Lab, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Antkiewicz, M (corresponding author), Univ Waterloo, Generat Software Dev Lab, 200 Univ Ave W, Waterloo, ON N2L 3G1, Canada.
EM mantkiew@gsd.uwaterloo.ca; ttonelli@gsd.uwaterloo.ca;
   kczarnec@gsd.uwaterloo.ca
CR Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   [Anonymous], OSGI SERV PLATF COR
   ANTKIEWICZ M, 2008, THESIS U WATERLOO
   ANTKIEWICZ M, 2007, ASE 2007, P214
   Antkiewicz M, 2006, LECT NOTES COMPUT SC, V4199, P692
   Antkiewicz Michal., 2008, GTTSE
   *AP SOFTW FDN, 2006, ROLL WEBL 3 0
   *AP SOFTW FDN, 2007, STRUTS US GUID
   AVGUSTINOV P, 2005, PLDI 05, P117
   Cohen T, 2006, ACM SIGPLAN NOTICES, V41, P89, DOI 10.1145/1167515.1167481
   CZARNECKI K, 2005, SOFTW PROCESS IMPROV, V10
   Czarnecki K, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P23, DOI 10.1109/SPLINE.2007.24
   De Volder K, 2006, LECT NOTES COMPUT SC, V3819, P88
   DEBAUD JM, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P326, DOI 10.1109/ICSM.1994.336762
   *ECL FDN, 2008, JAV DEV TOOLS
   *EJB 3 0 EXP GROUP, 2006, JSR 220 ENT JAVABEAN
   FAIRBANKS G, 2006, OOPSLA, P75
   Gamma Erich., 2003, CONTRIBUTING ECLIPSE
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   HILSDALE E, 2004, AOSD 04, P26
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2895, P105
   Pandit Chinmay., 2005, MAKE YOUR ECLIPSE AP
   Rountev A, 2006, LECT NOTES COMPUT SC, V3923, P2
   Rugaber S, 2000, ANN SOFTW ENG, V9, P143, DOI 10.1023/A:1018976708691
   *SPRING FRAM, 2008, SPRING FRAM MAN
   *SUN MICR, 2008, JAV TUT LESS APPL
   *SUN MICR, 2008, JAV SERV FAC
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   ZHANG W, 2006, SCAM 2006, P63
NR 32
TC 2
Z9 2
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2009
VL 16
IS 1
BP 101
EP 144
DI 10.1007/s10515-008-0040-x
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 408EP
UT WOS:000263418600005
DA 2024-07-18
ER

PT J
AU Fischer, G
AF Fischer, Gerhard
TI Rethinking software design in participation cultures
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software design; Domain-oriented design environments; Human-problem
   domain interaction; Meta-design; Distribution and diversity; Networked
   information economy; Participation cultures
AB The research activities in software engineering at the Center for LifeLong Learning & Design (L3D) in the past have been grounded in the basic assumption that important aspects of software engineering are best understood as human-centered design activities. Some of the major objectives were to support designers with domain-oriented design environments, allowing them to interact at the problem domain level and to frame activities and artifacts based on an evolutionary approach.
   A fundamental shift occurring over the last few years is the formation of participation cultures enhanced and supported by a change from an industrialized information economy (specialized in producing finished goods to be consumed passively) to a cyber-enabled networked information economy (in which all people are provided with the means to participate actively in personally meaningful problems). Some of the implications of this fundamental shift for software engineering, including meta-design, lessons learned from open source software, and distribution and diversity in communities, are explored, and their implications for the "automate/informate" perspectives are briefly discussed.
C1 Univ Colorado, Ctr Lifelong Learning & Design, Boulder, CO 80309 USA.
C3 University of Colorado System; University of Colorado Boulder
RP Fischer, G (corresponding author), Univ Colorado, Ctr Lifelong Learning & Design, Boulder, CO 80309 USA.
EM gerhard@colorado.edu
FU National Science Foundation; SRA, Inc., Tokyo, Japan
FX Our research in human-centered software design was supported by a
   substantial number of research grants from the National Science
   Foundation and by SRA, Inc., Tokyo, Japan.
CR Alexander C., 1977, PATTERN LANGUAGE TOW
   [Anonymous], 1988, In The Age Of The Smart Machine
   [Anonymous], PROD INF TECHN INN C
   [Anonymous], 2000, The social life of information
   BELADY L, 1985, PROGRAM EVOLUTION PR
   Benkler Yochai, 2006, WEALTH NETWORKS SOCI
   BILLINGS CE, 1991, 103885 NASA AMES RES
   Burnett M, 2004, COMMUN ACM, V47, P53, DOI 10.1145/1015864.1015889
   *CSTB, 1990, COMMUN ACM, V33, P281
   Dawkins Richard., 1987, BLIND WATCHMAKER
   Fischer G, 2004, SOCIAL CAPTIAL AND INFORMATION TECHNOLOGY, P355
   Fischer G., 1987, Human-Computer Interaction, V3, P179, DOI 10.1207/s15327051hci0303_1
   Fischer G., 1998, Automated Software Engineering, V5, P447, DOI 10.1023/A:1008657429810
   Fischer G., 2001, P 24 ANN INFORM SYST, P1
   Fischer G., 1994, Automated Software Engineering, V1, P177, DOI [10.1007/BF00872289, DOI 10.1007/BF00872289]
   FISCHER G, 2003, INT J AUTOMATED SOFT, V10, P233
   Fischer G., 2006, END USER DEV EMPOWER, P427, DOI [DOI 10.1007/1-4020-5386-X_19, 10.1007/1-4020-5386-X_19]
   Fischer G., 2005, P 5 C CREATIVITY COG, P128
   Greenbaum J., 1991, Design at Work: Cooperative Design of Computer Systems
   Henderson A., 1991, Design At Work: Cooperative Design of Computer Systems, P219
   Hippel E. von., 2005, Democratizing Innovation
   Illich I., 1972, Tools for Conviviality, DOI DOI 10.2307/1958421
   Janis I. L., 1972, VICTIMS GROUPTHINK P
   Lee L., 1992, DAY PHONES STOPPED
   Levy FrankRichard Murnane., 2004, NEW DIVISION LABOR C
   LIEBERMAN H, 2006, END USER DEV EMPOWER
   Mumford E., 1987, COMPUTERS DEMOCRACY, P59
   MYERBURG BJ, 1906, HEART DIS TXB CARDIO, P75
   O'Reilly T., 2006, What Is Web 2.0: Design patterns and business models for the next generation of software
   Olson G.M., 2001, Humancomputer Interaction in the new Millennium, P397
   PERLIS AJ, 1982, SIGPLAN NOTICES, P7
   Raymond Eric Steven, 2001, The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary
   Schon D. A., 1983, The reflective practitioner: How professionals think in action
   SHAW M, 1989, SCALING UP RES AGEND, P75
   Simon H.A., 1996, The Sciences of the Artificial, V3rd ed
   Tapscott Don, 2006, Wikinomics: How Mass Collaboration Changes Everything
   Wenger E., 1998, Communities of practice: learning, meaning, and identity, DOI [10.1017/CBO9780511803932, DOI 10.1017/CBO9780511803932]
   Winograd T., 1996, BRINGING DESIGN SOFT
   YE Y, 2005, INT J AUTOMATED SOFT, V12, P199
   YE Y, 2007, P 4 INT C UN ACC HUM, P312
NR 40
TC 6
Z9 7
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 365
EP 377
DI 10.1007/s10515-008-0030-z
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800008
DA 2024-07-18
ER

PT J
AU Jackson, M
AF Jackson, Michael
TI Automated software engineering: supporting understanding
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Complexity; Description; Fragmentation; Manipulation; Automation;
   Mechanisation
AB The most important role for automation in software engineering is the support of human understanding. Some aspects of understanding and how it can be supported are discussed.
C1 Open Univ, Milton Keynes MK7 6BJ, Bucks, England.
C3 Open University - UK
RP Jackson, M (corresponding author), Open Univ, Milton Keynes MK7 6BJ, Bucks, England.
EM jacksonma@acm.org
CR [Anonymous], WASHINGTON POST 0324
   BURSTALL RM, 1980, LECTURE NOTES COMPUT, V86, P292, DOI DOI 10.1007/3-540-10007-5_41
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   Hoare C.A.R., 1981, The Emperor's Old Clothes
   JACKSON M, 1975, PRINCIPLES PROGRAM D
NR 5
TC 4
Z9 4
U1 1
U2 3
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 275
EP 281
DI 10.1007/s10515-008-0034-8
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800003
DA 2024-07-18
ER

PT J
AU Li, B
   Wei, Y
   Sun, XB
   Bo, LL
   Chen, DS
   Tao, CAQ
AF Li, Bin
   Wei, Ying
   Sun, Xiaobing
   Bo, Lili
   Chen, Dingshan
   Tao, Chuanqi
TI Towards the identification of bug entities and relations in bug reports
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Bug analysis; Bug entity recognition; Relation extraction; Neural
   networks
ID RECOMMENDATION; AGREEMENT
AB During the bug fixing process, developers usually analyze the historical relevant bug reports in bug repository to support various bug analysis and fixing activities. There are rich semantics and relationships in the bug reports, which can be helpful for bug retrieval, recommendation, and repair. In this paper, our purpose is to quickly extract effective knowledge of bug report from two perspectives: entity recognition and relation extraction to assist bug understanding and fixing. Meanwhile, we hope to strengthen the relevance of bug reports through the effective extraction of bug knowledge. In order to effectively extract the bug entities and relations in the bug report, we first define 8 types of relations between the bug entities and incorporate neural network Recurrent Neural Network (RNN) and RNN based on shortest dependency path (SDP-RNN) to automatically identify bug entities and their relations in bug reports. Results We evaluate the effectiveness of our method through four experimental questions. From the results, the bug knowledge extracted by our method can effectively represent the semantics and relations in the bug report, and obtain F1 scores of 79.32% and 63.8% in entity recognition and relation extraction, respectively. The proposed approach can efficiently extract the structured bug knowledge in the bug report, and further enhance the correlation between the bug reports and the effectiveness of the bug knowledge through the representation of these structured bug knowledge units.
C1 [Li, Bin; Wei, Ying; Sun, Xiaobing; Bo, Lili; Chen, Dingshan] Yangzhou Univ, Sch Informat Engn, Yangzhou, Jiangsu, Peoples R China.
   [Tao, Chuanqi] Nanjing Univ Aeronaut & Astronaut, Coll Artificial Intelligence, Coll Comp Sci & Technol, Nanjing, Peoples R China.
C3 Yangzhou University; Nanjing University of Aeronautics & Astronautics
RP Sun, XB (corresponding author), Yangzhou Univ, Sch Informat Engn, Yangzhou, Jiangsu, Peoples R China.
EM xbsun@yzu.edu.cn; bolili@yzu.edu.cn
RI Wei, Ying/HZK-9397-2023
OI Sun, Xiaobing/0000-0001-5165-5080
FU National Natural Science Foundation of China [61972335, 61872312,
   62002309]; Six Talent Peaks Project in Jiangsu Province [RJFW-053];
   Jiangsu "333" Project; Open Funds of State Key Laboratory for Novel
   Software Technology of Nanjing University [KFKT2020B15, KFKT2020B16];
   Yangzhou city-Yangzhou University Science and Technology Cooperation
   Fund Project [YZ2021157]; Key Laboratory of Safety-Critical Software
   Ministry of Industry and Information Technology [NJ2020022]; Natural
   Science Research Project of Universities in Jiangsu Province
   [20KJB520024]; Yangzhou University Interdisciplinary Research Foundation
   for Animal Husbandry Discipline of Targeted Support [yzuxk202015];
   Yangzhou University Top-level Talents Support Program
FX This work is supported by the National Natural Science Foundation of
   China (Nos. 61972335, 61872312, 62002309); the Six Talent Peaks Project
   in Jiangsu Province (No. RJFW-053), the Jiangsu "333" Project, the Open
   Funds of State Key Laboratory for Novel Software Technology of Nanjing
   University (Nos. KFKT2020B15, KFKT2020B16), the Yangzhou city-Yangzhou
   University Science and Technology Cooperation Fund Project (YZ2021157),
   the Key Laboratory of Safety-Critical Software Ministry of Industry and
   Information Technology (No. NJ2020022), the Natural Science Research
   Project of Universities in Jiangsu Province (No. 20KJB520024), Yangzhou
   University Interdisciplinary Research Foundation for Animal Husbandry
   Discipline of Targeted Support (yzuxk202015) and Yangzhou University
   Top-level Talents Support Program (2019).
CR Alenezi M., 2018, ABS180407803
   [Anonymous], 2013, OXID MED CELL LONGEV, DOI DOI 10.1155/2013/146860
   [Anonymous], 2012, P 21 INT C WORLD WID
   [Anonymous], 2011, P 49 ANN M ASS COMP
   [Anonymous], 2004, P 42 ASS COMP LING A
   Ardimento P., 2017, P 7 INT C WEB INT MI
   Bagheri E, 2016, AUTOMAT SOFTW ENG, V23, P147, DOI 10.1007/s10515-014-0146-2
   Bettenburg N, 2008, PROC IEEE INT CONF S, P337, DOI 10.1109/ICSM.2008.4658082
   Bunescu RC, 2005, P C HUM LANG TECHN E, P724, DOI DOI 10.3115/1220575.1220666
   Cantrell, 2018, ARXIVABS180302839
   Capobianco G, 2013, J SOFTW-EVOL PROC, V25, P743, DOI 10.1002/smr.1564
   Chen DS, 2019, 2019 IEEE 1ST INTERNATIONAL WORKSHOP ON INTELLIGENT BUG FIXING (IBF '19), P39, DOI [10.1109/IBF.2019.8665494, 10.1109/ibf.2019.8665494]
   Chen M., 2017, ARXIVABS171106788
   Cho Kyunghyun, 2014, SYNTAX SEMANTICS STR, P5, DOI [10.3115/v1/w14-4012, 10.3115 /v1/D14-1179, DOI 10.3115/V1/D14-1179]
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Dat P., 2007, Proceedings of A AAI-07, P1414
   Di Sorbo A, 2015, IEEE INT CONF AUTOM, P12, DOI 10.1109/ASE.2015.12
   Dietz L, 2018, ACM/SIGIR PROCEEDINGS 2018, P1387, DOI 10.1145/3209978.3210187
   dos Santos CN, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1, P626
   Duchi J, 2011, J MACH LEARN RES, V12, P2121
   Falleri J.-R, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P4, DOI 10.1109/ICPC.2010.12
   Fu TJ, 2019, 57TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2019), P1409
   Gao HH, 2022, IEEE TETCI, V6, P66, DOI 10.1109/TETCI.2020.3023155
   Gao HH, 2022, IEEE T COMPUT SOC SY, V9, P336, DOI 10.1109/TCSS.2021.3102591
   Haidar MA, 2017, INT CONF ACOUST SPEE, P5730, DOI 10.1109/ICASSP.2017.7953254
   Han ZB, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P456, DOI 10.1109/SANER.2018.8330232
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Jiang L, 2022, IEEE T SOFTWARE ENG, V48, P1249, DOI 10.1109/TSE.2020.3017794
   Jimeno-Yepes, 2018, ARXIVABS180804029
   Kang N, 2014, BMC BIOINFORMATICS, V15, DOI 10.1186/1471-2105-15-64
   Katiyar A, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P917, DOI 10.18653/v1/P17-1085
   Khatiwada S, 2018, INFORM SOFTWARE TECH, V93, P45, DOI 10.1016/j.infsof.2017.08.012
   Kim S. D., 2002, Proceedings of the 7th World Congress on Genetics Applied to Livestock Production, Montpellier, France, August, 2002. Session 28, P1
   Lample M., 2016, P NAACL HLT, P260, DOI DOI 10.18653/V1/N16-1030
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Le TDB, 2017, EMPIR SOFTW ENG, V22, P2237, DOI 10.1007/s10664-016-9484-y
   Le XBD, 2016, PROC IEEE INT CONF S, P428, DOI 10.1109/ICSME.2016.66
   Le XBD, 2016, PROC IEEE INT CONF S, P423, DOI 10.1109/ICSME.2016.68
   Le XBD, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P213, DOI 10.1109/SANER.2016.76
   Li Q, 2014, PROCEEDINGS OF THE 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P402, DOI 10.3115/v1/p14-1038
   Liu C, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P282, DOI 10.1109/ICST.2013.24
   Liu H, 2022, IEEE T SOFTWARE ENG, V48, P1268, DOI 10.1109/TSE.2020.3018481
   Liu K., 2014, P COLING 2014 25 INT, P2335
   Lu JT, 2021, KNOWL-BASED SYST, V225, DOI 10.1016/j.knosys.2021.107098
   Mahfoodh H., 2020, P 2020 INT C INNOVAT, P1, DOI DOI 10.1109/3ICT51146.2020.9312003
   Malik H.H., 2011, Proceedings of the 20th ACM International Conference on Information and Knowledge Management, CIKM, P2497, DOI 10.1145/2063576.2064001
   Manning CD, 2014, PROCEEDINGS OF 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: SYSTEM DEMONSTRATIONS, P55, DOI 10.3115/v1/p14-5010
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Miwa M, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1105
   Nagano S, 2012, P INT COMP SOFTW APP, P11, DOI 10.1109/COMPSAC.2012.10
   Nguyen D.B., 2016, Transactions of the Association for Computational Linguistics, V4, P215, DOI DOI 10.1162/TACL_A_00094
   Duc NT, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017): SYSTEM DEMONSTRATIONS, P37, DOI 10.18653/v1/P17-4007
   Ni Z, 2020, J SYST SOFTWARE, V163, DOI 10.1016/j.jss.2020.110538
   Passos A., 2014, P 18 C COMP NAT LANG, P78
   Ren X, 2017, PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB (WWW'17), P1015, DOI 10.1145/3038912.3052708
   Ren XX, 2020, IEEE INT CONF AUTOM, P461, DOI 10.1145/3324884.3416551
   Rink B, 2010, P 5 INT WORKSH SEM E, P256
   Sainath TN, 2013, INT CONF ACOUST SPEE, P8614, DOI 10.1109/ICASSP.2013.6639347
   Shaalan K, 2014, COMPUT LINGUIST, V40, P469, DOI [10.1162/COLI_a_00178, 10.1162/coli_a_00178]
   Sharma A, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P449, DOI 10.1109/SANER.2015.7081855
   Shen JF, 2016, P INT COMP SOFTW APP, P103, DOI 10.1109/COMPSAC.2016.162
   Shokripour R, 2013, IEEE WORK CONF MIN S, P2, DOI 10.1109/MSR.2013.6623997
   Socher Richard, 2012, P 2012 JOINT C EMPIR, DOI [10.5555/2390948.2391084, DOI 10.1162/153244303322533223]
   Sun A., 2011, P M ASS COMP LING JU, P521
   Sun XB, 2021, FRONT COMPUT SCI-CHI, V15, DOI 10.1007/s11704-020-9441-1
   Sun XB, 2019, SCI CHINA INFORM SCI, V62, DOI 10.1007/s11432-017-9459-5
   Sun XB, 2017, ASIA PAC SOFWR ENG, P348, DOI 10.1109/APSEC.2017.41
   Sun XB, 2018, FRONT COMPUT SCI-CHI, V12, P528, DOI 10.1007/s11704-016-6023-3
   Sun XB, 2017, J SYST SOFTWARE, V134, P355, DOI 10.1016/j.jss.2017.09.021
   Sutskever I, 2014, ADV NEUR IN, V27
   Tian Y, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P570, DOI 10.1109/SANER.2015.7081879
   von Krogh Georg, 2005, P 38 ANN HAWAII INT, p198b, DOI DOI 10.1109/HICSS.2005.378
   Wang LL, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1298
   Wang L, 2017, PROC IEEE ACM INT C, P189, DOI 10.1109/ICSE-C.2017.102
   Xu Y., 2015, P 2015 C EMP METH NA, P1785
   Yao L., 2011, P 2011 C EMP METH NA, P1456
   Ye DH, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P90, DOI 10.1109/SANER.2016.10
   Zhao XJ, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P56, DOI 10.1109/SANER.2017.7884609
   Zheng SC, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1227, DOI 10.18653/v1/P17-1113
   Zheng SC, 2017, NEUROCOMPUTING, V257, P59, DOI 10.1016/j.neucom.2016.12.075
   Zhou C, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-10010-8
   Zhou C, 2020, J SYST SOFTWARE, V165, DOI 10.1016/j.jss.2020.110572
   Zhou C, 2018, INT C PROGRAM COMPRE, P108, DOI 10.1145/3196321.3196335
   Zhou G, 2005, P 43 ANN M ASS COMP, P427
NR 84
TC 5
Z9 5
U1 3
U2 18
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 24
DI 10.1007/s10515-022-00325-1
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YS2KL
UT WOS:000750511400001
DA 2024-07-18
ER

PT J
AU Srivastava, A
   Badal, T
   Saxena, P
   Vidyarthi, A
   Singh, R
AF Srivastava, Anugrah
   Badal, Tapas
   Saxena, Pawan
   Vidyarthi, Ankit
   Singh, Rishav
TI UAV surveillance for violence detection and individual identification
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Violence detection; Drone surveillance videos; Deep learning; LSTM;
   Transfer learning; Violent individual
ID VIDEO; RECOGNITION
AB Violence detection and face recognition of the individuals involved in the violence has an influence that's noticeable on the development of automated video surveillance research. With increasing risks in society and insufficient staff to monitor them, there is an expanding demand for drones square measure and computerized video surveillance. Violence detection is expeditious and can be utilized as the method to selectively filter the surveillance videos, and identify or take note of the individual who is creating the anomaly. Individual identification from drone surveillance videos in a crowded area is difficult because of the expeditious movement, overlapping features, and bestrew backgrounds. The goal is to come with a better drone surveillance system that recognizes the violent individuals that are implicated in violence and evoke a distress signal so that fast help can be offered. This paper uses the currently developed techniques based on deep learning and proposed the concept of transfer learning using deep learning-based different hybrid models with LSTM for violence detection. Identifying individuals incriminated in violence from drone-captured images involves major issues in variations of human facial appearance, hence the paper uses a CNN model combined with image processing techniques. For testing, the drone captured video dataset is developed for an unconstrained environment. Ultimately, the features extracted from a hybrid of inception modules and residual blocks, with LSTM architecture yielded an accuracy of 97.33% and thereby proved to be noteworthy and thereby, demonstrating its superiority over other models that have been tested. For the individual identification module, the best accuracy of 99.20% obtained on our dataset, is a CNN model with residual blocks trained for face identification.
C1 [Srivastava, Anugrah; Badal, Tapas; Saxena, Pawan] Bennett Univ, Comp Sci Engn Dept, Greater Noida, India.
   [Vidyarthi, Ankit] Jaypee Inst Informat Technol, Dept CSE & IT, Noida, India.
   [Singh, Rishav] Natl Inst Technol, Dept Comp Sci & Engn, Delhi, India.
C3 Jaypee Institute of Information Technology (JIIT); National Institute of
   Technology (NIT System); National Institute of Technology Delhi
RP Singh, R (corresponding author), Natl Inst Technol, Dept Comp Sci & Engn, Delhi, India.
EM AS5271@bennett.edu.in; Tapas.Badal@bennett.edu.in;
   pawan.saxena@bennett.edu.in; dr.ankit.vidyarthi@gmail.com;
   rishav.singh@nitdelhi.ac.in
RI singh, rishav/AAB-7472-2020; Vidyarthi, Ankit/AAD-4939-2020
OI singh, rishav/0000-0003-2947-9046; Vidyarthi, Ankit/0000-0002-8026-4246
CR Amato G., 2018, 10 INT C ADV MULTIME, P1
   Aydin B, 2019, TECHNOL SOC, V59, DOI 10.1016/j.techsoc.2019.101180
   Baba M, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19071676
   Nievas EB, 2011, LECT NOTES COMPUT SC, V6855, P332, DOI 10.1007/978-3-642-23678-5_39
   Bindemann M, 2017, SCI REP-UK, V7, DOI 10.1038/s41598-017-14026-3
   Cao Z, 2017, PROC CVPR IEEE, P1302, DOI 10.1109/CVPR.2017.143
   Cheng W.-H., 2003, P 5 ACM SIGMM INT WO, P109, DOI DOI 10.1145/973264.973282
   Deeba F, 2019, INT J ADV COMPUT SC, V10, P274
   Deniz O, 2014, PROCEEDINGS OF THE 2014 9TH INTERNATIONAL CONFERENCE ON COMPUTER VISION, THEORY AND APPLICATIONS (VISAPP 2014), VOL 2, P478
   Ding CH, 2014, LECT NOTES COMPUT SC, V8888, P551, DOI 10.1007/978-3-319-14364-4_53
   Donahue J, 2017, IEEE T PATTERN ANAL, V39, P677, DOI 10.1109/TPAMI.2016.2599174
   Fu EY, 2017, INT J PERVASIVE COMP, V13, P130, DOI 10.1108/IJPCC-02-2017-0018
   Giannakopoulos T, 2007, 2007 IEEE NINTH WORKSHOP ON MULTIMEDIA SIGNAL PROCESSING, P90, DOI 10.1109/MMSP.2007.4412825
   Giannakopoulos T, 2006, LECT NOTES COMPUT SC, V3955, P502
   Goya Koichiro, 2009, Proceedings of the 2009 Fifth International Conference on Intelligent Information Hiding and Multimedia Signal Processing. IIH-MSP 2009, P736, DOI 10.1109/IIH-MSP.2009.264
   Ha S, 2016, IEEE IJCNN, P381, DOI 10.1109/IJCNN.2016.7727224
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Jaderberg M, 2015, ADV NEUR IN, V28
   Ji SW, 2013, IEEE T PATTERN ANAL, V35, P221, DOI 10.1109/TPAMI.2012.59
   Karpathy A, 2014, PROC CVPR IEEE, P1725, DOI 10.1109/CVPR.2014.223
   Kazemi V, 2014, PROC CVPR IEEE, P1867, DOI 10.1109/CVPR.2014.241
   Kemelmacher-Shlizerman I, 2016, PROC CVPR IEEE, P4873, DOI 10.1109/CVPR.2016.527
   King DE, 2009, J MACH LEARN RES, V10, P1755
   Kohonen, 1989, SELF ORG ASS MEMORY
   Laptev I, 2005, INT J COMPUT VISION, V64, P107, DOI 10.1007/s11263-005-1838-7
   Li X, 2017, IEEE I CONF COMP VIS, P2895, DOI 10.1109/ICCV.2017.313
   Li Y, 2008, IEEE T PATTERN ANAL, V30, P1728, DOI 10.1109/TPAMI.2008.73
   Mumtaz A, 2018, 2018 2ND EUROPEAN CONFERENCE ON ELECTRICAL ENGINEERING AND COMPUTER SCIENCE (EECS 2018), P558, DOI 10.1109/EECS.2018.00109
   Naik A.J, 2017, INT J LAT RES ENGIN, P11
   Ordóñez FJ, 2016, SENSORS-BASEL, V16, DOI 10.3390/s16010115
   Penmetsa S., 2014, Electronic Letters on Computer Vision and Image Analysis, V13, P18
   Ramanathan M, 2014, IEEE T HUM-MACH SYST, V44, P650, DOI 10.1109/THMS.2014.2325871
   Saypadith S, 2018, ASIAPAC SIGN INFO PR, P1318, DOI 10.23919/APSIPA.2018.8659751
   Singh A, 2018, IEEE COMPUT SOC CONF, P1710, DOI 10.1109/CVPRW.2018.00214
   Soliman M.M, 2019, VIOLENCE RECOGNITION, DOI [10.1109/ICICIS46948.2019.9014714, DOI 10.1109/ICICIS46948.2019.9014714]
   Srivastava A, 2021, J REAL-TIME IMAGE PR, V18, P1851, DOI 10.1007/s11554-021-01171-2
   Sumon SA, 2020, VIETNAM J COMPUT SCI, V7, P19, DOI 10.1142/S2196888820500013
   Ullah FUM, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19112472
   van der Spoel E, 2015, AGING-US, V7, P956, DOI 10.18632/aging.100841
   Vishwajit Dandagpl., 2019, INT RES J ENG TECHNO
   Wang LM, 2016, LECT NOTES COMPUT SC, V9912, P20, DOI 10.1007/978-3-319-46484-8_2
   Wang M, 2021, NEUROCOMPUTING, V429, P215, DOI 10.1016/j.neucom.2020.10.081
   Wongun Choi, 2009, 2009 IEEE 12th International Conference on Computer Vision Workshops, ICCV Workshops, P1282, DOI 10.1109/ICCVW.2009.5457461
   Wu B, 2004, SIXTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATIC FACE AND GESTURE RECOGNITION, PROCEEDINGS, P79
   Xu M, 2012, OPT ENG, V51, DOI 10.1117/1.OE.51.4.047202
   Zaheer MZ, 2015, INT CONF IT CONVERGE
   Zajdel W, 2007, 2007 IEEE CONFERENCE ON ADVANCED VIDEO AND SIGNAL BASED SURVEILLANCE, P200, DOI 10.1109/AVSS.2007.4425310
   Zhang BW, 2016, PROC CVPR IEEE, P2718, DOI 10.1109/CVPR.2016.297
   Zhou PP, 2017, J PHYS CONF SER, V844, DOI 10.1088/1742-6596/844/1/012044
NR 49
TC 13
Z9 13
U1 1
U2 14
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 28
DI 10.1007/s10515-022-00323-3
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZL1HP
UT WOS:000763432000004
DA 2024-07-18
ER

PT J
AU Sangeeta
   Sitender
   Sharma, K
   Bala, M
AF Sangeeta
   Sitender
   Sharma, Kapil
   Bala, Manju
TI New failure rate model for iterative software development life cycle
   process
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software development life cycle; Iterative software development life
   cycle; Optimization; Failure rate model; Software reliability
ID RELIABILITY GROWTH-MODELS; TESTING-EFFORT; OPTIMIZATION; POLICIES;
   SYSTEMS; METRICS; TIME
AB Software reliability models are one of the most generally used mathematical tool for estimation of reliability, failure rate and number of remaining faults in the software. Existing software reliability models are designed to follow waterfall software development life cycle process. These existing models do not take advantage of iterative software development process. In this paper, a new failure rate model centered on iterative software development life cycle process has been developed. It aims to integrate a new modulation factor for incorporating varying needs in each phase of iterative software development process. It comprises imperfect debugging with the possibility of fault introduction and removal of multiple faults in an interval as iterative development of the software proceeds. The proposed model has been validated on twelve iterations of Eclipse software failure dataset and nine iterations of Java Development toolkit (JDT) software failure dataset. Parameter estimation for the proposed model has been done by hybrid particle swarm optimization and gravitational search algorithm. Experimental results in-terms of goodness-of-fit shows that proposed model has outperformed Jelinski Moranda, Shick Wolverton, Goel Okummotto Imperfect debugging, GS Mahapatra, Modified Shick Wolverton in 83.33% of iterations for eclipse dataset and 77.77% of iterations for JDT dataset.
C1 [Sangeeta] Delhi Technol Univ, Dept Comp Sci & Engn, Delhi, India.
   [Sangeeta] Maharaja Surajmal Inst Technol, Dept Comp Sci & Engn, New Delhi 110058, India.
   [Sitender] Maharaja Surajmal Inst Technol, Dept Informat Technol, New Delhi 110058, India.
   [Sharma, Kapil] DTU, Dept Informat Technol, Delhi, India.
   [Bala, Manju] Inderprastha Coll Women, Dept Comp Sci, Civil Lines, DU, Delhi, India.
C3 Delhi Technological University; Maharaja Surajmal Institute of
   Technology; Maharaja Surajmal Institute of Technology; Delhi
   Technological University; University of Delhi
RP Sitender (corresponding author), Maharaja Surajmal Inst Technol, Dept Informat Technol, New Delhi 110058, India.
EM sangeeta.phogat@gmail.com; sitender@msit.in; kapil@ieee.org;
   manjugpm@gmail.com
RI bala, manju/KIH-7797-2024; Sitender, Dr/AAJ-9624-2021
OI bala, manju/0000-0002-2313-0284; Sitender, Dr/0000-0003-0341-2927; ,
   Sangeeta/0000-0002-8691-3892
CR Ab Wahab MN, 2015, PLOS ONE, V10, DOI 10.1371/journal.pone.0122827
   Abraham A, 2012, J COMPUT THEOR NANOS, V9, P249, DOI 10.1166/jctn.2012.2019
   Abrahamsson P, 2003, EUROMICRO CONF PROC, P259
   Akbar MA, 2018, IEEE ACCESS, V6, P4811, DOI 10.1109/ACCESS.2017.2787981
   [Anonymous], 1983, ANSIIEEE STD 729 198
   [Anonymous], 2004, Agile and Iterative Development
   Basili V. R., 1975, IEEE Transactions on Software Engineering, VSE-1, P390, DOI 10.1109/TSE.1975.6312870
   Bharathi R, 2020, INT J AUTOM COMPUT, V17, P305, DOI 10.1007/s11633-019-1214-7
   BOEHM BW, 1988, COMPUTER, V21, P61, DOI 10.1145/12944.12948
   BOEHM BW, 1984, IEEE T SOFTWARE ENG, V10, P4, DOI 10.1109/TSE.1984.5010193
   Borges L., 2014, P 29 ANN ACM S APPL, DOI [10.1145/2554850.2555161, DOI 10.1145/2554850.2555161]
   Chang YC, 2009, APPL MATH MODEL, V33, P3578, DOI 10.1016/j.apm.2008.11.018
   Garg RK, 2013, SOFTW TEST VERIF REL, V23, P149, DOI 10.1002/stvr.459
   Gokhale S.S., 1996, IMPORTANT MILESTONES
   Gokhale SS, 2004, SOFTWARE QUAL J, V12, P211, DOI 10.1023/B:SQJO.0000034709.63615.8b
   Gokhale SS, 1998, IEEE INTERNATIONAL COMPUTER PERFORMANCE AND DEPENDABILITY SYMPOSIUM -PROCEEDINGS, P13, DOI 10.1109/IPDS.1998.707705
   Gokhale SS, 1999, ANN SOFTW ENG, V8, P85, DOI 10.1023/A:1018923329647
   Goseva-Popstojanova K, 2001, PERFORM EVALUATION, V45, P179, DOI 10.1016/S0166-5316(01)00034-7
   Greer D, 2004, INFORM SOFTWARE TECH, V46, P243, DOI 10.1016/j.infsof.2003.07.002
   HOLLAND JH, 1992, SCI AM, V267, P66, DOI 10.1038/scientificamerican0792-66
   Huang CY, 2005, IEEE T RELIAB, V54, P583, DOI 10.1109/TR.2005.859230
   Huang CY, 2003, IEEE T SOFTWARE ENG, V29, P261, DOI 10.1109/TSE.2003.1183936
   Jelinski Z., 1972, Statistical Computer Performance Evaluation, P465, DOI DOI 10.1016/B978-0-12-266950-7.50028-1
   Jin C, 2016, APPL SOFT COMPUT, V40, P283, DOI 10.1016/j.asoc.2015.11.041
   Kapur PK, 2012, IEEE T RELIAB, V61, P758, DOI 10.1109/TR.2012.2207531
   KAPUR PK, 1991, INT J SYST SCI, V22, P1563, DOI 10.1080/00207729108910731
   Kapur PK, 1996, MICROELECTRON RELIAB, V36, P645, DOI 10.1016/0026-2714(95)00157-3
   Kennedy J, 1995, 1995 IEEE INTERNATIONAL CONFERENCE ON NEURAL NETWORKS PROCEEDINGS, VOLS 1-6, P1942, DOI 10.1109/icnn.1995.488968
   Kruchten P.., 2004, RATIONAL UNIFIED PRO
   Kumar S, 2018, J INFORM OPTIM SCI, V39, DOI 10.1080/02522667.2017.1380420
   Larman C, 2003, COMPUTER, V36, P47, DOI 10.1109/MC.2003.1204375
   LITTLEWOOD B, 1987, SOFTWARE ENG J, V2, P30, DOI 10.1049/sej.1987.0005
   LITTLEWOOD B, 1979, IEEE T RELIAB, V28, P241, DOI 10.1109/TR.1979.5220576
   Luo Z., 2011, 2011 7 INT C COMP IN, DOI [10.1109/cis.2011.51, DOI 10.1109/CIS.2011.51]
   Mahapatra GS., 2012, Int. J. Comput. Appl, V48, P38
   McCall J., 1987, METHODOLOGY SOFTWARE, V2, DOI [10.21236/ada190019, DOI 10.21236/ADA190019]
   Mirjalili S., 2010, Proceedings of the 2010 International Conference on Computer and Information Application (ICCIA 2010), P374, DOI 10.1109/ICCIA.2010.6141614
   Mirjalili S, 2014, NEURAL COMPUT APPL, V25, P1423, DOI 10.1007/s00521-014-1629-6
   Model W., 2015, LUETTAVISSA, V3
   MORANDA PB, 1981, IEEE T RELIAB, V30, P309, DOI 10.1109/TR.1981.5221096
   Musa J. D., 1984, Proceedings of the 7th International Conference on Software Engineering (cat. no. 84CH2011-5), P230
   Myung IJ, 2003, J MATH PSYCHOL, V47, P90, DOI 10.1016/S0022-2496(02)00028-7
   OHBA M, 1984, LECT NOTES ECON MATH, V235, P144
   Olague HM, 2007, IEEE T SOFTWARE ENG, V33, P402, DOI 10.1109/TSE.2007.1015.
   ORTIZ EA, 1995, P A REL MAI, P182, DOI 10.1109/RAMS.1995.513244
   Pavlov N., 2018, COMMUN APPL ANAL, V22, P555, DOI [10.12732/caa.v22i4.4, DOI 10.12732/CAA.V22I4.4]
   Pham H., 2006, SYSTEM SOFTWARE RELI, P153
   Rana R, 2013, 2013 JOINT CONFERENCE OF THE 23RD INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2013 EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA), P213, DOI 10.1109/IWSM-Mensura.2013.37
   Roy P, 2014, INT J RELIAB QUAL SA, V21, DOI 10.1142/S0218539314500089
   Sangeeta, 2020, J STAT MANAG SYST, V23, P1037, DOI 10.1080/09720510.2020.1814498
   Sangeeta, 2020, INT J SYST ASSUR ENG, V11, P77, DOI 10.1007/s13198-019-00926-2
   Sangeeta, 2019, J COMPUT THEOR NANOS, V16, P5089, DOI [10.1166/jctn.2019.8568, DOI 10.1166/JCTN.2019.8568]
   Sangeeta Sharma K, RECENT ADV COMPUT SC
   SCHICK GJ, 1978, IEEE T SOFTWARE ENG, V4, P104, DOI 10.1109/TSE.1978.231481
   Sharma K., 2018, J ADV RES DYN CONTRO, P1957
   Sharma K, 2010, IEEE T RELIAB, V59, P266, DOI 10.1109/TR.2010.2048657
   Sheta A, 2006, IEEE C EVOL COMPUTAT, P3056
   Singh VB, 2018, IEEE T SOFTWARE ENG, V44, P1207, DOI 10.1109/TSE.2017.2766070
   Smidts C, 1998, IEEE T RELIAB, V47, P268, DOI 10.1109/24.740500
   Tripathi A.K., 2019, ARXIV PREPRINT ARXIV
   Turk LIA., 2016, INT J STW ENG APPL, V7, P33, DOI [10.5121/ijsea.2016.7204, DOI 10.5121/IJSEA.2016.7204]
   Wang W.L., 1999, P PAC RIM INT S DEP, DOI [10.1109/prdc.1999.816223, DOI 10.1109/PRDC.1999.816223]
   Wei XM, 2018, J SYST SOFTWARE, V137, P580, DOI 10.1016/j.jss.2017.06.018
   WEISS SN, 1988, IEEE T SOFTWARE ENG, V14, P1512, DOI 10.1109/32.6196
   Wong WE, 2016, IEEE T SOFTWARE ENG, V42, P707, DOI 10.1109/TSE.2016.2521368
   Xiang JW, 2015, IEEE T RELIAB, V64, P320, DOI 10.1109/TR.2014.2363155
   Xie M., 1991, SOFTWARE RELIABILITY, DOI [10.1142/1390, DOI 10.1142/1390]
   YAMADA S, 1992, COMPUT MATH APPL, V24, P79, DOI 10.1016/0898-1221(92)90231-6
   YAMADA S, 1983, IEEE T RELIAB, V32, P475, DOI 10.1109/TR.1983.5221735
   YAMADA S, 1986, IEEE T RELIAB, V35, P19, DOI 10.1109/TR.1986.4335332
   Yang X-S., 2012, J COMPUT ENG INFORM, DOI [10.4172/2324-9307.1000e101, DOI 10.4172/2324-9307.1000E101]
   Yang XS, 2014, NATURE-INSPIRED OPTIMIZATION ALGORITHMS, P141, DOI 10.1016/B978-0-12-416743-8.00010-5
   Zhang XM, 2003, IEEE T SYST MAN CY A, V33, P114, DOI 10.1109/TSMCA.2003.812597
NR 73
TC 2
Z9 3
U1 3
U2 40
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 9
DI 10.1007/s10515-021-00288-9
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TH4PE
UT WOS:000672072500001
DA 2024-07-18
ER

PT J
AU Gonzalez-Fernandez, Y
   Hamidi, S
   Chen, S
   Liaskos, S
AF Gonzalez-Fernandez, Yasser
   Hamidi, Saeideh
   Chen, Stephen
   Liaskos, Sotirios
TI Efficient elicitation of software configurations using crowd preferences
   and domain knowledge
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software configuration; Software customization; Markov decision
   processes; Genetic algorithms
ID ALGORITHMS; PRIVACY
AB As software systems grow in size and complexity, the process of configuring them to meet individual needs becomes more and more challenging. Users, especially those that are new to a system, are faced with an ever increasing number of configuration possibilities, making the task of choosing the right one more and more daunting. However, users are rarely alone in using a software system. Crowds of other users or the designers themselves can provide with examples and rules as to what constitutes a meaningful configuration. We introduce a technique for designing optimal interactive configuration elicitation dialogs, aimed at utilizing crowd and expert information to reduce the amount of manual configuration effort. A repository of existing user configurations supplies us with information about popular ways to complete an existing partial configuration. Designers augment this information with their own constraints. A Markov decision process (MDP) model is then created to encode configuration elicitation dialogs that maximize the automatic configuration decisions based on the crowd and the designers' information. A genetic algorithm is employed to solve the MDP when problem sizes prevent use of common exact techniques. In our evaluation with various configuration models we show that the technique is feasible, saves configuration effort and scales for real problem sizes of a few hundreds of features.
C1 [Gonzalez-Fernandez, Yasser; Hamidi, Saeideh; Chen, Stephen; Liaskos, Sotirios] York Univ, Sch Informat Technol, Toronto, ON, Canada.
C3 York University - Canada
RP Liaskos, S (corresponding author), York Univ, Sch Informat Technol, Toronto, ON, Canada.
EM yasserglez@gmail.com; saeideh.hamidi@gmail.com; sychen@yorku.ca;
   liaskos@yorku.ca
RI Chen, Stephen/K-8473-2013
OI Chen, Stephen/0000-0001-8657-6200
CR Acquisti A., 2005, Proceedings of WPES05, P71
   Acquisti A, 2006, LECT NOTES COMPUT SC, V4258, P36
   Adomavicius G, 2005, IEEE T KNOWL DATA EN, V17, P734, DOI 10.1109/TKDE.2005.99
   Agrawal Rakesh., 1993, P 1993 ACM SIGMOD IN, P207, DOI DOI 10.1145/170035.170072
   [Anonymous], P 22 INT C SYST SOFT
   [Anonymous], 2010, 1 MONDAY
   [Anonymous], 2013, P 7 INT WORKSH VAR M, DOI DOI 10.1145/2430502.2430530
   [Anonymous], EUR J DERMATOL
   [Anonymous], 2011, PROC INTERNET MEASUR, DOI 10.1145/2068816.2068823
   [Anonymous], 2013, LECT NOTES COMPUT
   [Anonymous], P 15 INT SOFTW PROD
   [Anonymous], P 10 INT C EL COMM I
   [Anonymous], 2015 30 IEEEACM INT
   [Anonymous], P 29 ACM IEEE INT C
   [Anonymous], REVERSE ENG FEATURE
   [Anonymous], P 2 INT WORLD C MASS
   [Anonymous], THESIS
   [Anonymous], 2006, CITESEER
   [Anonymous], 1993, Foundations of Constraint Satisfaction
   [Anonymous], COMPUT LANG SYST STR
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], THESIS
   [Anonymous], 2018, P 12 INT WORKSHOP VA
   Bachmann F., 2003, PFE 03 PROC 5 INT WO, P66
   Baghel Malti., 2012, INT J COMPUTER APPL, V58, P21, DOI DOI 10.5120/9391-3813
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bellman R., 1957, Dynamic programming
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Bierwirth Christian., 1996, Parallel Problem Solving from Nature, P310, DOI [https://doi.org/10.1007/3-540-61723-X_995, DOI 10.1007/3-540-61723-X_995]
   Blum C, 2003, ACM COMPUT SURV, V35, P268, DOI 10.1145/937503.937505
   Boutilier C, 1999, J ARTIF INTELL RES, V11, P1
   Boyd DM, 2007, J COMPUT-MEDIAT COMM, V13, P210, DOI 10.1111/j.1083-6101.2007.00393.x
   Choudhary AK, 2009, J INTELL MANUF, V20, P501, DOI 10.1007/s10845-008-0145-x
   Consens MarianoP., 2005, ACM SIGMOD INT C MAN, P239
   Czarnecki K, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P22, DOI 10.1109/SPLC.2008.49
   Czarnecki Krzysztof., 2012, P 6 INT WORKSHOP VAR, P173, DOI DOI 10.1145/2110147.2110167
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   Debatin B, 2009, J COMPUT-MEDIAT COMM, V15, P83, DOI 10.1111/j.1083-6101.2009.01494.x
   Felfernig A., 2014, Knowledge-Based Configuration: From Research to Business Cases
   French S., 1982, Sequencing and Scheduling
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   Grefenstette J.J., 1985, P 1 INT C GEN ALG TH, P160
   Guo JM, 2013, IEEE INT CONF AUTOM, P301, DOI 10.1109/ASE.2013.6693089
   Han J, 2000, P 2000 ACM SIGMOD IN, P1, DOI DOI 10.1145/342009.335372
   Haslinger E. N., 2011, 2011 18th Working Conference on Reverse Engineering, P308, DOI 10.1109/WCRE.2011.45
   Holland J.H., 1992, Adaptation in Natural and Artificial Systems, DOI DOI 10.7551/MITPRESS/1090.001.0001
   Jin Dongpu, 2014, P 29 ACMIEEE INT C A, P151, DOI [10.1145/2642937.2643009, DOI 10.1145/2642937.2643009]
   Johnsen M., 2012, IEEE International Workshop on Machine Learning for Signal Processing, Santander, Spain, P1, DOI [DOI 10.2514/6.2012-1296235, 10.1145/2335356.2335369]
   Johnson R.A., 2007, APPL MULTIVARIATE ST, V6th
   Lampe C, 2008, CSCW: 2008 ACM CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, CONFERENCE PROCEEDINGS, P721
   Liaskos S, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P9, DOI 10.1109/RE.2005.19
   Liaskos S, 2012, INFORM SYST, V37, P767, DOI 10.1016/j.is.2012.05.006
   Liaskos S, 2011, REQUIR ENG, V16, P227, DOI 10.1007/s00766-011-0129-9
   Mackay W. E., 1991, Human Factors in Computing Systems. Reaching Through Technology. CHI '91. Conference Proceedings, P153, DOI 10.1145/108844.108867
   MACKWORTH AK, 1977, ARTIF INTELL, V8, P99, DOI 10.1016/0004-3702(77)90007-8
   Mazo R., 2014, Recommendation Systems in Software Engineering, P511, DOI 10.1007/978-3-642-45135-5
   Mei H, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P250, DOI 10.1109/CMPSAC.2003.1245350
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Moriarty DE, 1999, J ARTIF INTELL RES, V11, P241, DOI 10.1613/jair.613
   Mylopoulos J, 2001, IEEE SOFTWARE, V18, P92, DOI 10.1109/52.903174
   Nöhrer A, 2013, AUTOMAT SOFTW ENG, V20, P265, DOI 10.1007/s10515-012-0117-4
   Nohrer A., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P25, DOI 10.1109/SPLC.2011.45
   Page S. R., 1996, Human Factors in Computing Systems. Common Ground. CHI 96 Conference Proceedings, P340, DOI 10.1145/238386.238541
   Potvin JY, 1996, ANN OPER RES, V63, P339
   Puterman ML., 2014, MARKOV DECISION PROC, DOI DOI 10.1002/9780470316887
   Riedmiller M, 2005, LECT NOTES ARTIF INT, V3720, P317, DOI 10.1007/11564096_32
   Sayyad AS, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P492, DOI 10.1109/ICSE.2013.6606595
   Siegmund N, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P284, DOI 10.1145/2786805.2786845
   Siegmund N, 2012, SOFTWARE QUAL J, V20, P487, DOI 10.1007/s11219-011-9152-9
   Soltani Samaneh, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P536, DOI 10.1109/ASE.2011.6100118
   Strater K., 2008, P 22 BRIT HIC GROUP, V1, P111, DOI [DOI 10.14236/EWIC/HCI2008.11, 10.1145/1531514.1531530, DOI 10.1145/1531514.1531530]
   Sutton R., 1998, Reinforcement Learning: An Introduction
   von der Massen T, 2005, LECT NOTES COMPUT SC, V3714, P82
   Whiteson S, 2012, ADAPT LEARN OPTIM, V12, P325
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Xu TY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P307, DOI 10.1145/2786805.2786852
NR 77
TC 2
Z9 2
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2019
VL 26
IS 1
BP 87
EP 123
DI 10.1007/s10515-018-0247-4
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HL4VT
UT WOS:000458723700003
DA 2024-07-18
ER

PT J
AU Ohmann, P
   Liblit, B
AF Ohmann, Peter
   Liblit, Ben
TI Lightweight control-flow instrumentation and postmortem analysis in
   support of debugging
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Postmortem program analysis; Debugging; Core dumps; Static program
   slicing; Path tracing; Coverage
AB Debugging is difficult and costly. As a programmer looks for a bug, it would be helpful to see a complete trace of events leading to the point of failure. Unfortunately, full tracing is simply too slow to use after deployment, and may even be impractical during testing. We aid post-deployment debugging by giving programmers additional information about program activity shortly before failure. We use latent information in post-failure memory dumps, augmented by low-overhead, tunable run-time tracing. Our results with a realistically-tuned tracing scheme show low enough overhead (0-5 %) to be used in production runs. We demonstrate several potential uses of this enhanced information, including a novel postmortem static slice restriction technique and a reduced view of potentially-executed code. Experimental evaluation shows our approach to be very effective. For example, our analyses shrink stack-sensitive interprocedural static slices by 53-78 % in larger applications.
C1 [Ohmann, Peter; Liblit, Ben] Univ Wisconsin, Madison, WI 53706 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Ohmann, P (corresponding author), Univ Wisconsin, Madison, WI 53706 USA.
EM ohmann@cs.wisc.edu; liblit@cs.wisc.edu
OI Liblit, Ben/0000-0002-2245-2839; Ohmann, Peter/0000-0002-7670-7374
FU DoE [DE-SC0002153]; LLNL contract [B580360]; NSF [CCF-0953478,
   CCF-1217582, CCF-1420866]; Wisconsin Alumni Research Foundation;
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1420866, 1217582] Funding Source: National Science
   Foundation
FX Mark Chapman provided invaluable assistance with understanding and
   manipulating CodeSurfer-generated PDGs. This research was supported in
   part by DoE contract DE-SC0002153; LLNL contract B580360; NSF Grants
   CCF-0953478, CCF-1217582, and CCF-1420866; a Grant from the Wisconsin
   Alumni Research Foundation; and a CodeSurfer license generously provided
   by GrammaTech, Inc. Opinions, findings, conclusions, or recommendations
   expressed herein are those of the authors and do not necessarily reflect
   the views of NSF or other institutions.
CR AGRAWAL H, 1990, SIGPLAN NOTICES, V25, P246, DOI 10.1145/93548.93576
   Agrawal H., 1991, P ACM 4 S TESTING AN, P60
   Ammons G, 1997, ACM SIGPLAN NOTICES, V32, P85, DOI 10.1145/258916.258924
   Anderson P, 2003, IEEE T SOFTWARE ENG, V29, P721, DOI 10.1109/TSE.2003.1223646
   [Anonymous], 2004, P 2004 INT S COD GEN
   [Anonymous], 2010, ICSE
   [Anonymous], ASPLOS 16 16 INT C
   Apiwattanapong Taweesup., 2002, ACM WORKSHOP PROGRAM, P35
   Ball T, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P46, DOI 10.1109/MICRO.1996.566449
   Binkley D, 2006, SCI COMPUT PROGRAM, V62, P228, DOI 10.1016/j.scico.2006.04.007
   Binkley D, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1217295.1217297
   Bond MD, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P97
   Bowring J., 2002, PASTE 02, P2
   Cao Y., 2014, Proceedings of the ACM/IEEE International Conference on Automated Software Engineering ASE, P791
   Clause J, 2007, PROC INT CONF SOFTW, P261
   Crameri O, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P199
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Gauf Bernie., 2007, Journal of Software Technology, V10, P29
   Gupta R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P370, DOI 10.1145/261640.261644
   Hailpern B, 2002, IBM SYST J, V41, P4, DOI 10.1147/sj.411.0004
   HORWITZ S, 1988, SIGPLAN NOTICES, V23, P35
   Horwitz S, 2010, IEEE T SOFTWARE ENG, V36, P7, DOI 10.1109/TSE.2009.66
   Jaramillo C, 2000, LECT NOTES COMPUT SC, V1824, P240
   Jin W, 2012, PROC INT CONF SOFTW, P474, DOI 10.1109/ICSE.2012.6227168
   KAMKAR M, 1993, MICROPROC MICROPROG, V38, P625, DOI 10.1016/0165-6074(93)90203-W
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   KOREL B, 1990, J SYST SOFTWARE, V13, P187, DOI 10.1016/0164-1212(90)90094-3
   Krinke J, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P29
   Lei Y, 2012, P INT COMP SOFTW APP, P1, DOI 10.1109/COMPSAC.2012.9
   Manevich R., 2004, Software Engineering Notes, V29, P63, DOI 10.1145/1041685.1029907
   Mars J, 2009, INT SYM CODE GENER, P169, DOI 10.1109/CGO.2009.24
   Melski D, 1999, LECT NOTES COMPUT SC, V1575, P47
   Mulhern A., 2008, 1639 U WISC
   Nishimatsu A., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P422, DOI 10.1109/ICSE.1999.841032
   Ohmann P., 2013, 28 INT C AUT SOFTW E, P2013
   Orso A., 2002, Software Engineering Notes, V27, P65, DOI 10.1145/566171.566182
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Ro&beta;ler J., 2013, ICST 13
   Rothermel Gregg., 2006, Software-artifact infrastructure repository
   SUMNER W.N., 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering, P525
   Takada T, 2002, PROG COMPREHEN, P169, DOI 10.1109/WPC.2002.1021338
   Tassey  Gregory, 2002, 7007 RTI NAT I STAND
   Tice C. M., 1999, THESIS
   Vaswani K, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P351
   VENKATESH GA, 1991, SIGPLAN NOTICES, V26, P107, DOI 10.1145/113446.113455
   Weeratunge D, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P155
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Yuan D, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P143
   Zamfir C, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P321
   Zhang XY, 2004, ACM SIGPLAN NOTICES, V39, P94, DOI 10.1145/996893.996855
NR 50
TC 3
Z9 3
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2017
VL 24
IS 4
BP 865
EP 904
DI 10.1007/s10515-016-0190-1
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FI9EQ
UT WOS:000412307800007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nguyen, BN
   Robbins, B
   Banerjee, I
   Memon, A
AF Nguyen, Bao N.
   Robbins, Bryan
   Banerjee, Ishan
   Memon, Atif
TI GUITAR: an innovative tool for automated testing of GUI-driven software
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE GUI testing; Test automation; Test generation
ID MODEL; GENERATION
AB Most of today's software applications feature a graphical user interface (GUI) front-end. System testing of these applications requires that test cases, modeled as sequences of GUI events, be generated and executed on the software. We term GUI testing as the process of testing a software application through its GUI. Researchers and practitioners agree that one must employ a variety of techniques (e.g., model-based, capture/replay, manually scripted) for effective GUI testing. Yet, the tools available today for GUI testing are limited in the techniques they support. In this paper, we describe an innovative tool called GUITAR that supports a wide variety of GUI testing techniques. The innovation lies in the architecture of GUITAR, which uses plug-ins to support flexibility and extensibility. Software developers and quality assurance engineers may use this architecture to create new toolchains, new workflows based on the toolchains, and plug in a variety of measurement tools to conduct GUI testing. We demonstrate these features of GUITAR via several carefully crafted case studies.
C1 [Nguyen, Bao N.; Robbins, Bryan; Banerjee, Ishan; Memon, Atif] Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Nguyen, BN (corresponding author), Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
EM baonn@cs.umd.edu; brobbins@cs.umd.edu; ishan@cs.umd.edu; atif@cs.umd.edu
FU Direct For Computer & Info Scie & Enginr; Division Of Computer and
   Network Systems [1205501] Funding Source: National Science Foundation
CR Amalfitano D., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P252, DOI 10.1109/ICSTW.2011.77
   [Anonymous], 2001, LNCS, DOI [DOI 10.1007/3-540-45449-7_11, DOI 10.1007/3-540-45449-711]
   [Anonymous], 2010, INT C SOFTWARE TESTI
   [Anonymous], 2009, DESIGNING USER INTER
   Artzi S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P571, DOI 10.1145/1985793.1985871
   Baresi Luciano., 2001, Test Oracles
   Belli F, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P34, DOI 10.1109/ISSRE.2001.989456
   Brooks P., 2009, P 2 IEEE INT C SOFTW
   Brooks P. A., 2007, Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering, P333
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Chang TH, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1535
   Chen J., 2001, C SYST SCI, V9, P9061
   Chen WK, 2005, 19TH INTERNATIONAL CONFERENCE ON ADVANCED INFORMATION NETWORKING AND APPLICATIONS, VOL 1, PROCEEDINGS, P967
   Cunha Marco, 2010, 2010 2nd International Conference on Software Technology and Engineering (ICSTE 2010), P202, DOI 10.1109/ICSTE.2010.5608882
   Draheim D, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P168, DOI 10.1109/CSMR.2005.4
   Ganov S., 2008, P INT WORKSH AUT SOF
   Grechanik M, 2009, IEEE ICST WORKSHOP, P243, DOI 10.1109/ICSTW.2009.31
   Hellmann Theodore D., 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P444, DOI 10.1109/ICSTW.2010.35
   Jääskeläinen A, 2009, PROC INT CONF SOFTW, P112, DOI 10.1109/ICSE-COMPANION.2009.5070969
   McMaster S., 2009, P 1 INT WORKSH TESTI
   Memon A, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P260, DOI 10.1109/WCRE.2003.1287256
   Memon A. M., 2001, Software Engineering Notes, V26, P256, DOI 10.1145/503271.503244
   Memon AM, 2005, IEEE T SOFTWARE ENG, V31, P884, DOI 10.1109/TSE.2005.117
   Memon AM, 2001, IEEE T SOFTWARE ENG, V27, P144, DOI 10.1109/32.908959
   Memon AM, 2007, SOFTW TEST VERIF REL, V17, P137, DOI 10.1002/stvr.364
   Memon AM, 2010, ADV COMPUT, V80, P121, DOI 10.1016/S0065-2458(10)80003-8
   Mesbah A, 2009, PROC INT CONF SOFTW, P210, DOI 10.1109/ICSE.2009.5070522
   Myers B.A., 1995, ACM T COMPUT-HUM INT, V2, P64, DOI [10.1145/200968.200971, DOI 10.1145/200968.200971]
   Nguyen D.H., 2010, WORKSH AUT SOFTW TES, P24
   Paiva ACR, 2008, LECT NOTES COMPUT SC, V4916, P218
   Robinson B, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P333
   Ruiz A, 2008, TACI PART 2008:TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P99, DOI 10.1109/TAIC-PART.2008.11
   Silva JoaoCarlos., 2009, P 2009 ACM S APPL CO, P121
   Silva JL, 2008, ELECTRON NOTES THEOR, V208, P77, DOI 10.1016/j.entcs.2008.03.108
   Staiger S, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P252
   URAL H, 1991, IEEE T COMMUN, V39, P514, DOI 10.1109/26.81739
   Veanes Margus, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P39, DOI 10.1007/978-3-540-78917-8_2
   Vieira M., 2006, AST, P9, DOI DOI 10.1145/1138929.1138932
   Xie Q, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1416563.1416567
   Xie Q, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189752
   Yuan X, 2011, IEEE T SOFTWARE ENG, V37, P559, DOI 10.1109/TSE.2010.50
   Yuan X, 2010, IEEE T SOFTWARE ENG, V36, P81, DOI 10.1109/TSE.2009.68
   Zhang Sai., 2011, Proceedings of the 2011 International Symposium on Software Testing and Analysis, P353, DOI 10.1145/2001420.2001463
NR 43
TC 131
Z9 150
U1 0
U2 19
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2014
VL 21
IS 1
BP 65
EP 105
DI 10.1007/s10515-013-0128-9
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AA3EG
UT WOS:000330975100004
DA 2024-07-18
ER

PT J
AU Deshmukh, JV
   Emerson, EA
   Sankaranarayanan, S
AF Deshmukh, Jyotirmoy V.
   Emerson, E. Allen
   Sankaranarayanan, Sriram
TI Symbolic modular deadlock analysis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Deadlock prediction; Static analysis; Concurrent libraries
AB Methods in object-oriented concurrent libraries often encapsulate internal synchronization details. As a result of information hiding, clients calling the library methods may cause thread safety violations by invoking methods in an unsafe manner. This is frequently a cause of deadlocks. Given a concurrent library, we present a technique for inferring interface contracts that specify permissible concurrent method calls and patterns of aliasing among method arguments. In this work, we focus on deriving contracts that guarantee deadlock-free execution for the methods in the library. The contracts also help client developers by documenting required assumptions about the library methods. Alternatively, the contracts can be statically enforced in the client code to detect potential deadlocks in the client. Our technique combines static analysis with a symbolic encoding scheme for tracking lock dependencies, allowing us to synthesize contracts using a SMT solver. Additionally, we investigate extensions of our technique to reason about deadlocks in libraries that employ signaling primitives such as wait-notify for cooperative synchronization. Our prototype tool analyzes over a million lines of code for some widely-used Java libraries within an hour, thus demonstrating its scalability and efficiency. Furthermore, the contracts inferred by our approach have been able to pinpoint real deadlocks in clients, i.e. deadlocks that have been a part of bug-reports filed by users and developers of client code.
C1 [Deshmukh, Jyotirmoy V.] Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
   [Emerson, E. Allen] Univ Texas Austin, Dept Comp Sci, Austin, TX 78712 USA.
   [Sankaranarayanan, Sriram] Univ Colorado, Dept Comp Sci, Boulder, CO 80309 USA.
C3 University of Pennsylvania; University of Texas System; University of
   Texas Austin; University of Colorado System; University of Colorado
   Boulder
RP Deshmukh, JV (corresponding author), Univ Penn, Dept Comp & Informat Sci, 200 S 33Rd St, Philadelphia, PA 19104 USA.
EM jyotirmoy@cerc.utexas.edu; emerson@cs.utexas.edu; srirams@colorado.edu
CR Agarwal R, 2006, LECT NOTES COMPUT SC, V3875, P191
   Agarwal Rahul, 2006, P 2006 WORKSH PAR DI, P51
   Artho Cyrille., 2001, 2001 AUSTR SOFTW, P68
   Bensalem S, 2006, LECT NOTES COMPUT SC, V3875, P208
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Corbett JC, 1996, IEEE T SOFTWARE ENG, V22, P161, DOI 10.1109/32.489078
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deshmukh J, 2009, IEEE INT CONF AUTOM, P480, DOI 10.1109/ASE.2009.14
   Dutertre B, 2006, LECT NOTES COMPUT SC, V4144, P81, DOI 10.1007/11817963_11
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Flanagan C, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P293, DOI 10.1145/1375581.1375618
   Havelund K, 2000, LECT NOTES COMPUT SC, V1885, P245
   Havelund K., 2000, International Journal on Software Tools for Technology Transfer (STTT), V2, P366, DOI [10.1007/s100090050043., DOI 10.1007/S100090050043]
   Holzmann Gerard J., 2003, The SPIN Model Checker
   Lahiri SK, 2005, LECT NOTES COMPUT SC, V3717, P168
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   LI L, 2004, P 17 INT WORKSH LANG, P194
   LISTER A, 1977, SIGOPS OPER SYST REV, V11, P5
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Naik M, 2009, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2009.5070538
   OTTO F, 2008, P 1 INT WORKSH MULT, P41
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   SHANBHAG VK, 2008, P 15 AS PAC SOFTW EN, P361
   *SUN, 2007, SUN DEV NETW BUG DAT
   Vallee-Rai R., 1999, CASCON 1999, P125
   VONPRAUN C, 2004, THESIS ETH ZURICH
   Williams A, 2005, LECT NOTES COMPUT SC, V3586, P602
   2008, JAJUK ADV JUKEBOX
NR 28
TC 6
Z9 6
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2011
VL 18
IS 3-4
SI SI
BP 325
EP 362
DI 10.1007/s10515-011-0085-0
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 789YV
UT WOS:000292556500005
DA 2024-07-18
ER

PT J
AU Wasylkowski, A
   Zeller, A
AF Wasylkowski, Andrzej
   Zeller, Andreas
TI Mining temporal specifications from object usage
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automatic defect detection; Mining specifications; Temporal logic;
   Computation Tree Logic; Program analysis
ID CHECKING
AB A caller must satisfy the callee's precondition-that is, reach a state in which the callee may be called. Preconditions describe the state that needs to be reached, but not how to reach it. We combine static analysis with model checking to mine Fair Computation Tree Logic (CTL (F) ) formulas that describe the operations a parameter goes through: "In parseProperties(String xml), the parameter xml normally stems from getProperties()." Such operational preconditions can be learned from program code, and the code can be checked for their violations. Applied to AspectJ, our Tikanga prototype found 169 violations of operational preconditions, uncovering 7 unique defects and 27 unique code smells-with 52% true positives in the 25% top-ranked violations.
C1 [Wasylkowski, Andrzej; Zeller, Andreas] Univ Saarland, Dept Comp Sci, D-6600 Saarbrucken, Germany.
C3 Saarland University
RP Wasylkowski, A (corresponding author), Univ Saarland, Dept Comp Sci, D-6600 Saarbrucken, Germany.
EM wasylkowski@cs.uni-saarland.de; zeller@cs.uni-saarland.de
CR Acharya M, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P311
   Acharya Mithun, 2007, P 6 JOINT M EUROPEAN, P25, DOI [DOI 10.1145/1287624.1287630, 10.1145/1287624.1287630]
   Alur R, 2005, ACM SIGPLAN NOTICES, V40, P98, DOI 10.1145/1047659.1040314
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], 2010, THESIS SAARLAND U
   [Anonymous], ESEC FSE 2009
   [Anonymous], 2001, Proceedings of the 18th ACM Symposium on Operating Systems Principles
   [Anonymous], SIGSOFT 2008 FSE 16
   [Anonymous], ASE 2009
   [Anonymous], THESIS SAARLAND U
   [Anonymous], SOFTWARE ENG CHAIR
   [Anonymous], ASE 2009
   [Anonymous], P ICSE 08
   [Anonymous], ISSTA 2002
   [Anonymous], SIGSOFT 2008 FSE 16
   [Anonymous], 2007, P 2007 INT S SOFTWAR
   [Anonymous], ESEC FSE 13
   [Anonymous], P INT S SOFTW TEST A
   [Anonymous], ACM T SOFTW ENG METH
   [Anonymous], ESEC FSE 2007
   [Anonymous], AADEBUG 2005
   Antoy S, 2000, IEEE T SOFTWARE ENG, V26, P55, DOI 10.1109/32.825766
   Brin S., 1997, SIGMOD Record, V26, P255, DOI [10.1145/253262.253327, 10.1145/253262.253325]
   Chan W., 2000, LNCS, V1855, P450, DOI DOI 10.1007/10722167
   Chang RY, 2008, IEEE T SOFTWARE ENG, V34, P579, DOI 10.1109/TSE.2008.24
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Cook J. E., 1998, ACM Transactions on Software Engineering and Methodology, V7, P215, DOI 10.1145/287000.287001
   Dallmeier V, 2005, LECT NOTES COMPUT SC, V3586, P528
   Dallmeier V., 2010, P 19 INT S SOFTWARE, P85, DOI [DOI 10.1145/1831708.1831719, 10.1145/1831708.1831719]
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gabel M., 2010, ICSE, P15
   Ganter B, 1999, Formal concept analysis: Mathematical foundations
   Gurfinkel A, 2003, IEEE T SOFTWARE ENG, V29, P898, DOI 10.1109/TSE.2003.1237171
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   Henkel J, 2003, LECT NOTES COMPUT SC, V2743, P431
   Hovemeyer David., 2004, ACM Conference on Object-Oriented Programming Systems, Lan-guages, and Applications, OOPSLA '04, P132
   JONSSON B, 1990, LECT NOTES COMPUT SC, V407, P179
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   MANDELIN D, 2005, PLDI 05, P48, DOI [10.1145/1065010.1065018, DOI 10.1145/1065010.1065018]
   Ramanathan MK, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P123, DOI 10.1145/1250734.1250749
   Sahavechaphan N, 2006, ACM SIGPLAN NOTICES, V41, P413, DOI 10.1145/1167515.1167508
   Shoham S, 2008, IEEE T SOFTWARE ENG, V34, P651, DOI 10.1109/TSE.2008.63
   Thummalapenta S, 2009, PROC INT CONF SOFTW, P496, DOI 10.1109/ICSE.2009.5070548
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   Yang Jinlin, 2006, ICSE, P282, DOI [10.1145/1134285.1134325, DOI 10.1145/1134285.1134325]
   Zeller A., 2005, Why Programs Fail: A Guide to Systematic Debugging
   Zhong H, 2009, LECT NOTES COMPUT SC, V5653, P318, DOI 10.1007/978-3-642-03013-0_15
NR 49
TC 36
Z9 40
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2011
VL 18
IS 3-4
SI SI
BP 263
EP 292
DI 10.1007/s10515-011-0084-1
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 789YV
UT WOS:000292556500003
DA 2024-07-18
ER

PT J
AU Andersen, J
   Lawall, JL
AF Andersen, Jesper
   Lawall, Julia L.
TI Generic patch inference
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 23rd IEEE/ACM International Conference on Automated Software Engineering
CY SEP 15-16, 2008
CL LAquila, ITALY
SP IEEE, ACM
DE Linux; Patches; Change detection
AB A key issue in maintaining Linux device drivers is the need to keep them up to date with respect to evolutions in Linux internal libraries. Currently, there is little tool support for performing and documenting such changes.
   In this paper we present a tool, spdiff, that identifies common changes made in a set of files and their updated versions, and extracts a generic patch performing those changes. Library developers can use our tool to extract a generic patch based on the result of manually updating a few typical driver files, and then apply this generic patch to other drivers. Driver developers can use it to extract an abstract representation of the set of changes that others have made.
   Our experiments on recent changes in Linux show that the inferred generic patches are more concise than the corresponding patches found in commits to the Linux source tree while being safe with respect to the changes performed in the provided driver files.
C1 [Andersen, Jesper; Lawall, Julia L.] Univ Copenhagen, Dept Comp Sci, DK-2100 Copenhagen O, Denmark.
C3 University of Copenhagen
RP Lawall, JL (corresponding author), Univ Copenhagen, Dept Comp Sci, Univ Pk 1, DK-2100 Copenhagen O, Denmark.
EM jespera@diku.dk; julia@diku.dk
CR ANDERSEN J, 2010, THESIS U COPENHAGEN
   Chawathe S. S., 1996, SIGMOD Record, V25, P493, DOI 10.1145/235968.233366
   CONCHON S, 2000, ACM SIGPLAN WORKSH M
   FILLIATRE JC, 2000, 1368 U PAR SUD
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kim M, 2007, PROC INT CONF SOFTW, P333
   MACKENZIE D, 2003, COMP MERGING FILES W
   Neamtiu J. F. I., 2005, P INT WORKSH MIN SOF, V30, P1, DOI [DOI 10.1145/1082983.1083143, 10.1145/1082983.1083143]
   Padioleau Y., 2006, 1 ACM SIGOPS EUROSYS, P59
   Padioleau Y, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P247, DOI 10.1145/1357010.1352618
   Weissgerber P, 2006, IEEE INT CONF AUTOM, P231
NR 11
TC 19
Z9 23
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2010
VL 17
IS 2
SI SI
BP 119
EP 148
DI 10.1007/s10515-010-0062-z
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 573FB
UT WOS:000275892700002
DA 2024-07-18
ER

PT J
AU Ceccato, M
   Preda, MD
   Nagra, J
   Collberg, C
   Tonella, P
AF Ceccato, Mariano
   Preda, Mila Dalla
   Nagra, Jasvir
   Collberg, Christian
   Tonella, Paolo
TI Trading-off security and performance in barrier slicing for remote
   software entrusting
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 7th IEEE International Working Conference on Source Code Analysis and
   Manipulation
CY SEP 30-OCT 01, 2007
CL Paris, FRANCE
SP IEEE Comp Soc, TCSE, CEA Lab Integrat Syst & Technologies, Ecole Polytech, Software Improvement Grp, CREST, Kings Coll London
DE Program slicing; Security; Source code transformation
AB Network applications often require that a trust relationship is established between a trusted host (e.g., the server) and an untrusted host (e.g., the client). The remote entrusting problem is the problem of ensuring the trusted host that whenever a request from an untrusted host is served, the requester is in a genuine state, unaffected by malicious modifications or attacks.
   Barrier slicing helps solve the remote entrusting problem. The computation of the sensitive client state is sliced and moved to the server, where it is not possible to tamper with it. However, this solution might involve unacceptable computation and communication costs for the server, especially when the slice to be moved is large. In this paper, we investigate the trade-off between security loss and performance overhead associated with moving only a portion of the barrier slice to the server and we show that this trade-off can be reduced to a multi-objective optimization problem. We describe how to make decisions in practice with reference to a case study, for which we show how to choose among the alternative options.
C1 [Ceccato, Mariano; Tonella, Paolo] Fdn Bruno Kessler, Trento, Italy.
   [Preda, Mila Dalla; Nagra, Jasvir] Univ Trent, Trento, Italy.
   [Collberg, Christian] Univ Arizona, Tucson, AZ USA.
C3 Fondazione Bruno Kessler; University of Trento; University of Arizona
RP Ceccato, M (corresponding author), Fdn Bruno Kessler, Trento, Italy.
EM ceccato@fbk.eu
RI Ceccato, Mariano/T-7139-2019; Tonella, Paolo/C-1702-2015
OI Ceccato, Mariano/0000-0001-7325-0316; Tonella, Paolo/0000-0003-3088-0339
CR Carroll A., 2002, MICROSOFT PALLADIUM
   Ceccato M, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P27
   Collette Y., 2004, MULTIOBJECTIVE OPTIM, DOI DOI 10.1007/978-3-662-08883-8
   DEFENSE D, 1985, 520028STD DC DOD
   Dorigo M., 1997, IEEE Transactions on Evolutionary Computation, V1, P53, DOI 10.1109/4235.585892
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   KENNELL R, 2003, P 12 USENIX SEC S
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Krinke J, 2004, SOFTWARE QUAL J, V12, P339, DOI 10.1023/B:SQJO.0000039792.93414.a5
   Krinke J, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P81, DOI 10.1109/SCAM.2003.1238034
   LAMPSON B, 1992, ACM T COMPUT SYST, V10, P265, DOI 10.1145/138873.138874
   Sailer R., 2004, DESIGN IMPLEMENTATIO, P223
   Seshadri A, 2004, P IEEE S SECUR PRIV, P272
   Seshadri A., 2005, P ACM S OPERATING SY, P1
   TOVEY CA, 1985, SIAM J ALGEBRA DISCR, V6, P384, DOI 10.1137/0606040
   van Oorschot PC, 2005, IEEE T DEPEND SECURE, V2, P82, DOI 10.1109/TDSC.2005.24
   Weiser MD., 1979, PROGRAM SLICES FORMA
   Zhang XY, 2003, INT SYM CODE GENER, P325, DOI 10.1109/CGO.2003.1191556
NR 18
TC 6
Z9 7
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2009
VL 16
IS 2
BP 235
EP 261
DI 10.1007/s10515-009-0047-y
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 431SN
UT WOS:000265084000003
DA 2024-07-18
ER

PT J
AU Dan, H
   Lu, Z
   Ying, P
   Hong, M
   Jiasu, S
AF Dan Hao
   Lu Zhang
   Ying Pan
   Hong Mei
   Jiasu Sun
TI On similarity-awareness in testing-based fault localization
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE debugging; maintenance; fault localization; fuzzy set
ID DATA-FLOW; CRITERIA; FAILURE
AB In the process of software development and maintenance, software debugging is an inevitable and time-consuming task. To accelerate software debugging, various approaches have been proposed to automate fault localization. Among them, testing-based fault-localization approaches are most promising, which use the execution information of many test cases to localize the faults. However, these existing testing-based fault-localization approaches ignore the similarity between test cases, which may harm the effectiveness of these approaches according to our previous research. Therefore, in this paper we propose a similarity-aware fault-localization approach, which takes each test case as a fuzzy set to deal with the similarity between test cases and calculates statements' suspicions based on the probability theory. To investigate whether SAFL can address the similarity issue effectively, we manually injected redundant test cases in a test suite and performed an experimental study on the original test suite and the test suite with redundancy, respectively. The experimental results demonstrate that in our experiments SAFL is an effective fault-localization approach, whether there is manually injected redundancy in the test suite. To compare SAFL with most existing testing-based fault-localization approaches, we performed another experimental study on Siemens program suite, which is extensively used in the evaluation of many other testing-based fault-localization approaches. This experimental study confirms the effectiveness of SAFL. Based on the two experimental studies, it seems that in our experiments SAFL cannot only deal with test suites containing much redundancy effectively but also perform effectively for test suites without much redundancy.
C1 [Dan Hao; Lu Zhang; Ying Pan; Hong Mei; Jiasu Sun] Peking Univ, Sch Elect Engn & Comp Sci, Inst Software, Key Lab High Confidence Software Technol,Minist E, Beijing 100871, Peoples R China.
C3 Peking University
RP Lu, Z (corresponding author), Peking Univ, Sch Elect Engn & Comp Sci, Inst Software, Key Lab High Confidence Software Technol,Minist E, Beijing 100871, Peoples R China.
EM haod@sei.pku.edu.cn; zhanglu@sei.pku.edu.cn; pany@sei.pku.edu.cn;
   meih@sei.pku.edu.cn; sjs@sei.pku.edu.cn
RI Ying, Pan/KFR-7928-2024; Hao, Dan/A-8600-2015
OI Ying, Pan/0000-0003-0941-3541; Hao, Dan/0000-0001-8295-303X
CR Agrawal H, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P143, DOI 10.1109/ISSRE.1995.497652
   AGRAWAL H, 1989, SERCT41P PURD U
   Ball T, 1996, COMPUTER, V29, P33, DOI 10.1109/2.488299
   Barbosa EF, 2001, SOFTW TEST VERIF REL, V11, P113, DOI 10.1002/stvr.226
   Baudry B., 2006, P 28 INT C SOFTW ENG, P82, DOI DOI 10.1145/1134285.1134299
   Black J, 2004, PROC INT CONF SOFTW, P106, DOI 10.1109/ICSE.2004.1317433
   Bush WR, 2000, SOFTWARE PRACT EXPER, V30, P775, DOI 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H
   Chaim ML, 2004, J SOFTW MAINT EVOL-R, V16, P277, DOI 10.1002/smr.297
   CHAN FT, 1987, SOFTWARE PRACT EXPER, V17, P227, DOI 10.1002/spe.4380170306
   Cleve H, 2005, PROC INT CONF SOFTW, P342
   COLLOFELLO JS, 1989, J SYST SOFTWARE, V9, P191, DOI 10.1016/0164-1212(89)90039-3
   DeMillo RA, 1997, P INT COMP SOFTW APP, P515, DOI 10.1109/CMPSAC.1997.625061
   Dickinson W, 2001, PROC INT CONF SOFTW, P339, DOI 10.1109/ICSE.2001.919107
   Dor Nurit., 2003, PLDI 03, P155, DOI [10.1145/781131.781149, DOI 10.1145/781131.781149]
   DUBOIS D, 1980, FUZZY SETS SYSTEMS, P9
   Engler D, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Engler Dawson R., 2001, Proceedings of the 18th ACM Symposium on Operating Systems Principles, P57
   FREUND JE, 1995, STAT 1 COURSE, P479
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   Hao D, 2005, PROC IEEE INT CONF S, P683
   HAO D, 2005, P 20 IEEE INT C AUT, P291
   Harrold M. J., 1993, ACM Transactions on Software Engineering and Methodology, V2, P270, DOI 10.1145/152388.152391
   HOWDEN WE, 1982, IEEE T SOFTWARE ENG, V8, P371, DOI 10.1109/TSE.1982.235571
   HUANG JC, 1979, IEEE T SOFTWARE ENG, V5, P226, DOI 10.1109/TSE.1979.234184
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Jones JA, 2005, P 20 IEEE ACM INT C, P273
   LAROCHELLE D, 2001, P 10 USENIX SEC S, P13
   LIBLIT B, 2005, P 2005 ACM SIGPLAN C, P15, DOI DOI 10.1145/1065010.1065014
   LIBLIT B, 2003, P ACM SIGPLAN 2003 C, P141
   Liu C., 2005, P EUR SOFTW ENG C HE, V30, P286
   Liu C, 2006, IEEE T SOFTWARE ENG, V32, P831, DOI 10.1109/TSE.2006.105
   MALDONADO JC, 2001, KLUWER INT SERIES AD, P113
   Mayer W, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P240, DOI 10.1109/ASE.2003.1240312
   Mayer W, 2002, FRONT ARTIF INTEL AP, V77, P422
   NEWMARK J, 1992, STAT PROBABILITY MOD, P679
   Offutt AJ, 1996, SOFTWARE PRACT EXPER, V26, P165, DOI 10.1002/(SICI)1097-024X(199602)26:2<165::AID-SPE5>3.0.CO;2-K
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Ruthruff JR, 2005, PROC INT CONF SOFTW, P352
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Wong WE, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P366, DOI 10.1109/APSEC.2004.26
   XIE Y, 2003, P 9 EUR SOFTW ENG C, P327, DOI DOI 10.1145/940071.940115
   Xie YC, 2003, IEEE T SOFTWARE ENG, V29, P915, DOI 10.1109/TSE.2003.1237172
   ZADEH LA, 1965, INFORM CONTROL, V8, P338, DOI 10.1016/S0019-9958(65)90241-X
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
   Zeller Andreas., 2002, Proceedings of the 10th ACM SIGSOFT Symposium on Foundations of Software Engineering, SIGSOFT '02/FSE-10, P1, DOI DOI 10.1145/587051.587053
NR 46
TC 23
Z9 27
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2008
VL 15
IS 2
BP 207
EP 249
DI 10.1007/s10515-008-0025-9
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308YL
UT WOS:000256426700004
DA 2024-07-18
ER

PT J
AU Milanova, A
AF Milanova, Ana
TI Composition inference for UML class diagrams
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 20th International Conference on Automated Software Engineering (ASE
   2005)
CY 2005
CL Long Beach, CA
SP IEEE, ACM
DE UML; points-to analysis; reverse engineering; ownership; algorithms
ID FRAMEWORK
AB Knowing which associations are compositions is important in a tool for the reverse engineering of UML class diagrams. Firstly, recovery of composition relationships bridges the gap between design and code. Secondly, since composition relationships explicitly state a requirement that certain representations cannot be exposed, it is important to determine if this requirement is met by component code. Verifying that compositions are implemented properly may prevent serious program flaws due to representation exposure.
   We propose an implementation-level composition model based on ownership and a novel approach for identifying compositions in Java software. Our approach is based on static ownership inference; it is parameterized by class analysis and is designed to work on incomplete programs. We present empirical results from two instantiation of our approach. For one of these instantiations, on average 40% of the examined fields account for relationships that are identified as compositions. In addition, we present a precision evaluation which shows that the analysis achieves almost perfect precision-that is, it almost never misses composition relationships. The results indicate that precise identification of interclass relationships can be done with a simple and inexpensive analysis, and thus can be easily incorporated in reverse engineering tools that support iterative model-driven development.
C1 Rensselaer Polytech Inst, Dept Comp Sci, Troy, NY 12180 USA.
C3 Rensselaer Polytechnic Institute
RP Milanova, A (corresponding author), Rensselaer Polytech Inst, Dept Comp Sci, 110 8th St, Troy, NY 12180 USA.
EM milanova@cs.rpi.edu
RI , mgmilanova/H-3187-2019
OI , mgmilanova/0000-0003-0995-1921
CR Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   ALDRICH J, 2002, C OBJECT ORIENTED PR, P311
   BACON D, 1996, C OBJ OR PROGR SYST, P324
   Barbier F, 2003, IEEE T SOFTWARE ENG, V29, P459, DOI 10.1109/TSE.2003.1199074
   Bernadou M, 2003, COMPUTATIONAL FLUID AND SOLID MECHANICS 2003, VOLS 1 AND 2, PROCEEDINGS, P103
   BOYAPATI C, 2003, S PRINCIPLES PROGRAM, P213
   BRUEL JM, 2001, INT C OBJECT ORIENTE, P5
   CLARKE D, 2002, C OBJECT ORIENTED PR, P292
   CLARKE D, 2003, C OBJECT ORIENTED PR, P374
   Clarke D. G., 1998, Conference Proceedings OOPSLA'98. Conference on Object-Oriented Programming, Systems, Languages and Applications, P48
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   FAHNDRICH M, 1998, C PROGR LANG DES IMP, P85
   Fowler M., 2004, UML DISTILLED, VThird
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GORVE D, 1997, C OBJECT ORIENTED PR, P108
   Gosling J., 2000, The Java Language Specification
   GROTHOFF C, 2001, C OBJ OR PROGR SYST, P241
   Grove D, 2001, ACM T PROGR LANG SYS, V23, P685, DOI 10.1145/506315.506316
   GUEHENEUC YG, 2004, C OBJ OR PROGR SYST, P301
   Jackson D, 2001, IEEE T SOFTWARE ENG, V27, P156, DOI 10.1109/32.908960
   Kollmann R, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P81, DOI 10.1109/WCRE.2001.957812
   Larman C., 2002, APPL UML PATTERNS, V2nd
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   LIANG D, 2001, WORKSH PROGR AN SOFT, P73
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   MILANOVA A, 2002, INT S SOFTW TEST AN, P1
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   PALSBERG J, 1991, C OBJ OR PROGR SYST, P146, DOI DOI 10.1145/117954.117965
   PLEVYAK J, 1994, C OBJ OR PROGR SYST, P324
   Potter J, 1998, 1998 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P80, DOI 10.1109/ASWEC.1998.730915
   Rountev A, 2004, PROC IEEE INT CONF S, P82, DOI 10.1109/ICSM.2004.1357793
   Rountev A, 2004, IEEE T SOFTWARE ENG, V30, P372, DOI 10.1109/TSE.2004.20
   ROUNTEV A, 2002, THESIS RUTGERS U
   ROUNTEV A, 2001, C OBJ OR PROGR SYST, P43
   RUF E, 2000, C PROGR LANG DES IMP, P208
   RUMBAUGH J, 2004, UNIFED MODELING LANG
   STRECKENBACH M, 2000, POINTS FOR JAVA GEN
   SU Z, 2000, S PRINC PROGR LANG, P81
   SUNDARESAN V, 2000, C OBJ OR PROGR SYST, P264
   TIP F, 2000, C OBJ OR PROGR SYST, P281
   Tonella P, 2001, PROC IEEE INT CONF S, P376, DOI 10.1109/ICSM.2001.972750
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   Whaley J, 2002, LECT NOTES COMPUT SC, V2477, P180
   WHALEY J, 2004, C PROGR LANG DES IMP, P131
NR 44
TC 2
Z9 4
U1 1
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2007
VL 14
IS 2
BP 179
EP 213
DI 10.1007/s10515-007-0010-8
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 212HE
UT WOS:000249586000003
DA 2024-07-18
ER

PT J
AU Chen, CY
   Tai, KY
AF Chen, Chung-Yang
   Tai, Kuang-Yen
TI Online ontological quality assessment of converted UML class diagrams in
   SRE
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software reverse engineering; Ontology; Class security design; UML class
   diagram
ID DEVELOPMENT LIFE-CYCLE; SOFTWARE-DEVELOPMENT; RISK ANALYSIS; SECURITY;
   METRICS; SYSTEMS; DESIGN; MODEL; VERIFICATION; MANAGEMENT
AB Software reverse engineering (SRE) is receiving more attention due to the current trend for rapid software development, since this allows developers to implement systems without any detailed design process and then use SRE tools to generate the design content, such as unified modeling language (UML) diagrams. In extant SRE research, studies have mainly focused on how precisely the conversion can reflect the system. However, little research has investigated the quality of the converted results, which could be inherently affected by poorly written software code. Accordingly, a knowledge-based ontological system (OntoRESec) was developed in this study to enable the online quality assessment of converted UML structural design content. With a focus on class design, OntoRESec features a domain-specific ontology model with a rule-based inference engine to assess the reversed class diagrams in SRE. With regard to the domain of quality assessment, the system is scoped to security in class design, since this is a major concern in terms of design quality and should be incorporated into the automated SRE context. An illustrative case is presented that adopts a security framework (STRIDE) to implement and demonstrate the rule-based inference of quality assessment in OntoRESec. In addition, several system cases are used to evaluate the proposed work.
C1 [Chen, Chung-Yang] Natl Cent Univ, Sch Management, Dept Informat Management, Taoyuan, Taiwan.
   [Tai, Kuang-Yen] Natl Taiwan Univ, Sch Management, Dept Informat Management, Taipei, Taiwan.
C3 National Central University; National Taiwan University
RP Chen, CY (corresponding author), Natl Cent Univ, Sch Management, Dept Informat Management, Taoyuan, Taiwan.
EM cychen@mgt.ncu.edu.tw
OI Chen, Chung-Yang/0000-0003-0146-3202
CR Abeer AA., 2019, IEEE ACCESS, V7, P49352, DOI [10.1109/ACCESS.2019.2909839, DOI 10.1109/ACCESS.2019.2909839]
   Abramov J, 2012, INFORM SOFTWARE TECH, V54, P1029, DOI 10.1016/j.infsof.2012.04.001
   Agrawal A, 2019, COMPUT FRAUD SECUR, P11, DOI 10.1016/S1361-3723(19)30107-1
   Aldawood H, 2019, FUTURE INTERNET, V11, DOI 10.3390/fi11030073
   Arvanitou EM, 2016, INFORM SOFTWARE TECH, V72, P110, DOI 10.1016/j.infsof.2015.12.010
   Athanasiou D, 2014, IEEE T SOFTWARE ENG, V40, P1100, DOI 10.1109/TSE.2014.2342227
   Aufner P, 2020, INT J INF SECUR, V19, P3, DOI 10.1007/s10207-019-00445-y
   Balaban M, 2019, SOFTW SYST MODEL, V18, P2717, DOI 10.1007/s10270-018-0696-z
   Bashir RS, 2016, INT J INFORM MANAGE, V36, P883, DOI 10.1016/j.ijinfomgt.2016.05.024
   Basin D, 2006, ACM T SOFTW ENG METH, V15, P39, DOI 10.1145/1125808.1125810
   Basin D, 2009, INFORM SOFTWARE TECH, V51, P815, DOI 10.1016/j.infsof.2008.05.011
   Biro M, 2018, IEEE SOFTWARE, V35, P24, DOI 10.1109/MS.2017.4541050
   Borghini S, 2020, COMMUN MATH PHYS, V377, P2079, DOI 10.1007/s00220-020-03739-8
   Brhel M, 2015, INFORM SOFTWARE TECH, V61, P163, DOI 10.1016/j.infsof.2015.01.004
   Briand LC, 2006, IEEE T SOFTWARE ENG, V32, P642, DOI 10.1109/TSE.2006.96
   Brunelière H, 2014, INFORM SOFTWARE TECH, V56, P1012, DOI 10.1016/j.infsof.2014.04.007
   Canfora G, 2011, COMMUN ACM, V54, P142, DOI 10.1145/1924421.1924451
   Catal C, 2009, INFORM SCIENCES, V179, P1040, DOI 10.1016/j.ins.2008.12.001
   Chang V, 2016, IEEE T SERV COMPUT, V9, P138, DOI [10.1109/ISSNIP.2015.7106910, 10.1109/TSC.2015.2491281]
   Chen CY, 2021, IEEE ACCESS, V9, P109569, DOI 10.1109/ACCESS.2021.3102295
   Chen CY., 2019, J INF MANAG, V26, P379
   Ciancarini P., 2019, SEMANT WEB, P1
   Clarisó R, 2019, IEEE T SOFTWARE ENG, V45, P412, DOI 10.1109/TSE.2017.2777830
   De Nicola A, 2009, INFORM SYST, V34, P258, DOI 10.1016/j.is.2008.07.002
   Mohino JD, 2019, ELECTRONICS-SWITZ, V8, DOI 10.3390/electronics8111218
   Demyanova Y, 2017, FORM METHOD SYST DES, V50, P289, DOI 10.1007/s10703-016-0264-5
   Dingsoyr T, 2012, J SYST SOFTWARE, V85, P1213, DOI 10.1016/j.jss.2012.02.033
   Fernández-Sáez AM, 2015, INFORM SOFTWARE TECH, V57, P644, DOI 10.1016/j.infsof.2014.05.014
   Gahalaut AK., 2010, INT J ENG SCI, V2, P2296
   Genero M, 2011, J DATABASE MANAGE, V22, P46, DOI 10.4018/jdm.2011070103
   Georg G, 2010, IEEE T SOFTWARE ENG, V36, P338, DOI 10.1109/TSE.2010.36
   Grossmann R., 2019, EXISTENCE WORLD INTR
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Hafiz M, 2007, IEEE SOFTWARE, V24, P52, DOI 10.1109/MS.2007.114
   Halkidis ST, 2008, IEEE T DEPEND SECURE, V5, P129, DOI 10.1109/TDSC.2007.70240
   Hamann PM, 2013, ORGAN RES METHODS, V16, P67, DOI 10.1177/1094428112470007
   Hao WN, 2019, IEEE ACCESS, V7, P155424, DOI 10.1109/ACCESS.2019.2938967
   Hatzivasilis G, 2016, IEEE SOFTWARE, V33, P46, DOI 10.1109/MS.2016.61
   Henry WC, 2020, COMPUT SECUR, V95, DOI 10.1016/j.cose.2020.101865
   Holland B, 2011, ACM T RECONFIG TECHN, V4, DOI 10.1145/2000832.2000839
   Islam S, 2011, SOFTW SYST MODEL, V10, P369, DOI 10.1007/s10270-010-0154-z
   Jones C, 1996, COMPUTER, V29, P94, DOI 10.1109/2.488361
   Jose CSN., 2020, IEEE ACCESS, V8, P33735
   Kalaimannan E, 2017, IEEE SECUR PRIV, V15, P52, DOI 10.1109/MSP.2017.14
   KITCHENHAM B, 1995, IEEE SOFTWARE, V12, P52, DOI 10.1109/52.391832
   Levy K, 2020, J CYBERSECURITY, V6, DOI 10.1093/cybsec/tyaa006
   Lias W., 2021, MODELGOON
   Liu G, 2020, COGN SYST RES, V60, P97, DOI 10.1016/j.cogsys.2019.09.005
   Loren K., 1999, MICROSOFT INTER 0401
   Maglaras L, 2020, INTERNET TECHNOL LET, V3, DOI 10.1002/itl2.132
   McGraw G, 2004, IEEE SECUR PRIV, V2, P80, DOI 10.1109/MSECP.2004.1281254
   McZara J, 2015, EMPIR SOFTW ENG, V20, P1721, DOI 10.1007/s10664-014-9334-8
   Mohammed NM, 2017, COMPUT STAND INTER, V50, P107, DOI 10.1016/j.csi.2016.10.001
   Nagaraju V, 2020, J SYST SOFTWARE, V168, DOI 10.1016/j.jss.2020.110643
   Nagaria B, 2022, IEEE T SOFTWARE ENG, V48, P1853, DOI 10.1109/TSE.2020.3040554
   Noy N., 2001, ONTOLOGY DEV
   Nugroho A, 2014, EMPIR SOFTW ENG, V19, P926, DOI 10.1007/s10664-013-9243-2
   Perepletchikov M, 2011, IEEE T SOFTWARE ENG, V37, P449, DOI 10.1109/TSE.2010.61
   Radjenovic D, 2013, INFORM SOFTWARE TECH, V55, P1397, DOI 10.1016/j.infsof.2013.02.009
   Rakic G, 2020, INFORM SOFTWARE TECH, V118, DOI 10.1016/j.infsof.2019.106203
   Ramachandran M, 2016, INT J INFORM MANAGE, V36, P580, DOI 10.1016/j.ijinfomgt.2016.03.008
   Rauf I, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3471930
   Rhmann W, 2020, J KING SAUD UNIV-COM, V32, P419, DOI 10.1016/j.jksuci.2019.03.006
   Rouland Q, 2021, J SYST ARCHITECT, V117, DOI 10.1016/j.sysarc.2021.102073
   Sabir U, 2019, IEEE ACCESS, V7, P158931, DOI 10.1109/ACCESS.2019.2950884
   Núñez JCS, 2020, IEEE ACCESS, V8, P77653, DOI 10.1109/ACCESS.2020.2989113
   Sanfilippo EM, 2019, COMPUT IND, V109, P182, DOI 10.1016/j.compind.2019.03.006
   Sarkar S, 2007, IEEE T SOFTWARE ENG, V33, P14, DOI 10.1109/TSE.2007.256942
   Shatnawi A, 2017, J SYST SOFTWARE, V131, P442, DOI 10.1016/j.jss.2016.06.101
   Shostack A., 2014, Threat Modeling: Designing for Security
   Simons CL, 2010, IEEE T SOFTWARE ENG, V36, P798, DOI 10.1109/TSE.2010.34
   Smith J, 2019, IEEE T SOFTWARE ENG, V45, P877, DOI 10.1109/TSE.2018.2810116
   Sommestad T, 2010, COMPUT SECUR, V29, P659, DOI 10.1016/j.cose.2010.02.002
   Source Forge, 2021, OPENPROJ SOFTW
   Suneetha KR, 2009, INT J COMPUT SCI NET, V9, P327
   Sunitha EV, 2019, IEEE ACCESS, V7, P8591, DOI 10.1109/ACCESS.2018.2890791
   Tondel I.A., 2019, INF COMPUT SECUR
   Tong X, 2014, INT J SECUR APPL, V8, P271, DOI 10.14257/ijsia.2014.8.2.28
   Tuma K, 2018, J SYST SOFTWARE, V144, P275, DOI 10.1016/j.jss.2018.06.073
   Unterkalmsteiner M, 2012, IEEE T SOFTWARE ENG, V38, P398, DOI 10.1109/TSE.2011.26
   Venkatesh V, 2020, INFORM SYST J, V30, P733, DOI 10.1111/isj.12282
   Verdon D, 2004, IEEE SECUR PRIV, V2, P79, DOI 10.1109/MSP.2004.55
   Vismari LF, 2017, IEEE SYST J, V11, P2072, DOI 10.1109/JSYST.2015.2422265
   Wand Y, 2002, INFORM SYST RES, V13, P363, DOI 10.1287/isre.13.4.363.69
   Washizaki H, 2018, EMPIR SOFTW ENG, V23, P2323, DOI 10.1007/s10664-017-9592-3
   Webber W, 2010, ACM T INFORM SYST, V28, DOI 10.1145/1852102.1852106
   Xing ZC, 2005, IEEE T SOFTWARE ENG, V31, P850, DOI 10.1109/TSE.2005.106
   Xu DX, 2006, IEEE T SOFTWARE ENG, V32, P265, DOI 10.1109/TSE.2006.40
NR 88
TC 0
Z9 0
U1 3
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 18
DI 10.1007/s10515-023-00385-x
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA J5IL7
UT WOS:001009952700001
DA 2024-07-18
ER

PT J
AU Mahdieh, M
   Mirian-Hosseinabadi, SH
   Mahdieh, M
AF Mahdieh, Mostafa
   Mirian-Hosseinabadi, Seyed-Hassan
   Mahdieh, Mohsen
TI Test case prioritization using test case diversification and
   fault-proneness estimations
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Regression testing; Test case prioritization; Defect prediction; Test
   case diversification; Bug History
ID OBJECT-ORIENTED SOFTWARE; TEST-SUITE REDUCTION; DEFECT PREDICTION;
   METRICS; NUMBER; MODEL
AB Regression testing activities greatly reduce the risk of faulty software release. However, the size of the test suites grows throughout the development process, resulting in time-consuming execution of the test suite and delayed feedback to the software development team. This has urged the need for approaches such as test case prioritization (TCP) and test-suite reduction to reach better results in case of limited resources. In this regard, proposing approaches that use auxiliary sources of data such as bug history can be interesting. We aim to propose an approach for TCP that takes into account test case coverage data, bug history, and test case diversification. To evaluate this approach we study its performance on real-world open-source projects. The bug history is used to estimate the fault-proneness of source code areas. The diversification of test cases is preserved by incorporating fault-proneness on a clustering-based approach scheme. The proposed methods are evaluated on datasets collected from the development history of five real-world projects including 357 versions in total. The experiments show that the proposed methods are superior to coverage-based TCP methods. The proposed approach shows that improvement of coverage-based and fault-proneness-based methods is possible by using a combination of diversification and fault-proneness incorporation.
C1 [Mahdieh, Mostafa; Mirian-Hosseinabadi, Seyed-Hassan; Mahdieh, Mohsen] Sharif Univ Technol, Dept Comp Engn, Azadi Ave, Tehran, Iran.
C3 Sharif University of Technology
RP Mirian-Hosseinabadi, SH (corresponding author), Sharif Univ Technol, Dept Comp Engn, Azadi Ave, Tehran, Iran.
EM hmirian@sharif.edu
OI Mirian-Hosseinabadi, Seyed-Hassan/0000-0001-8308-0349
CR Abou Assi R, 2021, SOFTW TEST VERIF REL, V31, DOI 10.1002/stvr.1762
   ABREU FBE, 1994, J SYST SOFTWARE, V26, P87, DOI 10.1016/0164-1212(94)90099-X
   Abu Hasan M, 2017, COMM COM INF SC, V750, P269, DOI 10.1007/978-981-10-6544-6_25
   Aljamaan H, 2020, PROCEEDINGS OF THE 16TH ACM INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING, PROMISE 2020, P1, DOI 10.1145/3416508.3417114
   Alves ELG, 2016, SOFTW TEST VERIF REL, V26, P402, DOI 10.1002/stvr.1603
   Anderson J., 2014, P 11 WORK C MIN SOFT, P142
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Arafeen MJ, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P312, DOI 10.1109/ICST.2013.12
   Ashraf E, 2012, LECT NOTES ENG COMP, P156
   Bagherzadeh M, 2021, Arxiv, DOI arXiv:2011.01834
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Bin Noor T, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P58, DOI 10.1109/ISSRE.2015.7381799
   Bishnu PS, 2012, IEEE T KNOWL DATA EN, V24, P1146, DOI 10.1109/TKDE.2011.163
   Boucher A, 2018, INFORM SOFTWARE TECH, V96, P38, DOI 10.1016/j.infsof.2017.11.005
   Boughorbel S, 2017, PLOS ONE, V12, DOI 10.1371/journal.pone.0177678
   Carlson Ryan, 2011, 2011 IEEE 27th International Conference on Software Maintenance, P382, DOI 10.1109/ICSM.2011.6080805
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chen JF, 2018, J SYST SOFTWARE, V135, P107, DOI 10.1016/j.jss.2017.09.031
   Chen JF, 2017, IEEE T RELIAB, V66, P373, DOI 10.1109/TR.2016.2628759
   Chen JJ, 2017, IEEE INT CONF SOFTW, P418, DOI 10.1109/ICST.2017.45
   Chicco D, 2017, BIODATA MIN, V10, DOI 10.1186/s13040-017-0155-3
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   DAVIES DL, 1979, IEEE T PATTERN ANAL, V1, P224, DOI 10.1109/TPAMI.1979.4766909
   Deng JH, 2020, IET SOFTW, V14, P443, DOI 10.1049/iet-sen.2019.0149
   Eghbali S, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P242, DOI 10.1109/ICSE-Companion.2019.00095
   Elbaum S, 2004, SOFTWARE QUAL J, V12, P185, DOI 10.1023/B:SQJO.0000034708.84524.22
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Engstrom E., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P367, DOI 10.1109/ICST.2011.27
   Engstrom Emelie, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P75, DOI 10.1109/ICST.2010.40
   Fang CR, 2014, SOFTWARE QUAL J, V22, P335, DOI 10.1007/s11219-013-9224-0
   Fraser G, 2007, LECT NOTES COMPUT SC, V4422, P291
   Fu W, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P72, DOI 10.1145/3106237.3106257
   Fu WH, 2017, IEICE T INF SYST, VE100D, P1218, DOI 10.1587/transinf.2016EDP7356
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Grindall M, 2006, EMPIR SOFTW ENG, V11, P583, DOI 10.1007/s10664-006-9024-2
   Guo L, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P417
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Hao D, 2016, IEEE T SOFTWARE ENG, V42, P490, DOI 10.1109/TSE.2015.2496939
   Hao D, 2014, ACM T SOFTW ENG METH, V24, DOI 10.1145/2685614
   Harrison R, 1998, IEEE T SOFTWARE ENG, V24, P491, DOI 10.1109/32.689404
   Hastie T., 2008, ELEMENTS STAT LEARNI, V2
   Hemmati H, 2019, ADV COMPUT, V112, P185, DOI 10.1016/bs.adcom.2017.12.004
   Hettiarachchi C, 2016, INFORM SOFTWARE TECH, V69, P1, DOI 10.1016/j.infsof.2015.08.008
   Hoang T, 2020, PROC INT CONF SOFTW, P518, DOI 10.1145/3377811.3380361
   Jiang B, 2009, IEEE INT CONF AUTOM, P233, DOI 10.1109/ASE.2009.77
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P414, DOI 10.1145/2568225.2568320
   Jingxiu Yao, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P120, DOI 10.1145/3383219.3383232
   Jones JA, 2003, IEEE T SOFTWARE ENG, V29, P195, DOI 10.1109/TSE.2003.1183927
   Jung-Hyun Kwon, 2014, 2014 21st Asia-Pacific Software Engineering Conference (APSEC), P19, DOI 10.1109/APSEC.2014.12
   Just R, 2014, P 2014 INT S SOFTW T, P437, DOI DOI 10.1145/2610384.2628055
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Kandil P, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1794
   Kanmani S, 2007, INFORM SOFTWARE TECH, V49, P483, DOI 10.1016/j.infsof.2006.07.005
   Kazmi R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3057269
   Khalilian A, 2012, SCI COMPUT PROGRAM, V78, P93, DOI 10.1016/j.scico.2012.01.006
   Khatibsyarbini M, 2018, INFORM SOFTWARE TECH, V93, P74, DOI 10.1016/j.infsof.2017.08.014
   Khoshgoftaar T. M., 2010, 2010 Proceedings of 22nd International Conference on Tools with Artificial Intelligence (ICTAI 2010), P137, DOI 10.1109/ICTAI.2010.27
   Kim S., 2010, P 2010 ACM IEEE INT, P5
   Klas M., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P119, DOI 10.1145/1810295.1810313
   Kumar A, 2010, DEV SPEED SCALE GOOG
   Laali M, 2016, LECT NOTES COMPUT SC, V9695, P78, DOI 10.1007/978-3-319-39083-3_6
   Lachmann R, 2016, 2016 15TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2016), P361, DOI [10.1109/ICMLA.2016.0065, 10.1109/ICMLA.2016.163]
   Ledru Y, 2012, AUTOMAT SOFTW ENG, V19, P65, DOI 10.1007/s10515-011-0093-0
   Leon D, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P442, DOI 10.1109/ISSRE.2003.1251065
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li J, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P318, DOI 10.1109/QRS.2017.42
   Li N, 2020, INFORM SOFTWARE TECH, V122, DOI 10.1016/j.infsof.2020.106287
   Li R, 2019, 2019 CROSS STRAIT QUAD-REGIONAL RADIO SCIENCE AND WIRELESS TECHNOLOGY CONFERENCE (CSQRWC), DOI 10.1109/csqrwc.2019.8799249
   Li ZQ, 2018, IET SOFTW, V12, P161, DOI 10.1049/iet-sen.2017.0148
   Liang HL, 2019, IEEE ACCESS, V7, P83812, DOI 10.1109/ACCESS.2019.2925313
   Lou YL, 2019, ADV COMPUT, V113, P1, DOI 10.1016/bs.adcom.2018.10.001
   Luo Q, 2019, IEEE T SOFTWARE ENG, V45, P1054, DOI 10.1109/TSE.2018.2822270
   Luo Q, 2018, PROC IEEE INT CONF S, P240, DOI 10.1109/ICSME.2018.00033
   Luo Q, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P559, DOI 10.1145/2950290.2950344
   Majd A, 2020, EXPERT SYST APPL, V147, DOI 10.1016/j.eswa.2019.113156
   Mandieh M, 2020, INFORM SOFTWARE TECH, V121, DOI 10.1016/j.infsof.2020.106269
   Mathur AP, 2010, FDN SOFTWARE TESTING
   Matloob F, 2021, IEEE ACCESS, V9, P98754, DOI 10.1109/ACCESS.2021.3095559
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mei H, 2012, IEEE T SOFTWARE ENG, V38, P1258, DOI 10.1109/TSE.2011.106
   Memon A, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P233, DOI 10.1109/ICSE-SEIP.2017.16
   Meneely A., 2008, P 16 ACM SIGSOFT INT, P13, DOI DOI 10.1145/1453101.1453106
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Miranda B, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P222, DOI 10.1145/3180155.3180210
   Mirarab S, 2007, LECT NOTES COMPUT SC, V4422, P276
   Mondal D., 2015, 8th International Conference on Software Testing, Verification and Validation, ICST15, P1
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Nam J, 2015, IEEE INT CONF AUTOM, P452, DOI 10.1109/ASE.2015.56
   Nam Jaechang., 2014, SURVEY SOFTWARE DEFE
   Noor T.B., 2017, P 13 INT C PREDICTIV, P2
   Okutan A, 2014, EMPIR SOFTW ENG, V19, P154, DOI 10.1007/s10664-012-9218-8
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Palma F, 2018, PROMISE'18: PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING, P80, DOI 10.1145/3273934.3273944
   Pan RQ, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-021-10066-6
   Panda S., 2016, Advances in Software Engineering, V2016, DOI 10.1155/2016/7132404
   Pandey SK, 2020, EXPERT SYST APPL, V144, DOI 10.1016/j.eswa.2019.113085
   Pang YL, 2013, 2013 12TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2013), VOL 2, P78, DOI 10.1109/ICMLA.2013.109
   Paterson D, 2019, IEEE INT CONF SOFTW, P346, DOI 10.1109/ICST.2019.00041
   Pei HY, 2021, INFORM SOFTWARE TECH, V131, DOI 10.1016/j.infsof.2020.106470
   Petric J, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962610
   Pinzger Martin, 2008, P 16 ACM SIGSOFT INT, P2, DOI DOI 10.1145/1453101.1453105
   Pradhan D, 2019, J SYST SOFTWARE, V153, P86, DOI 10.1016/j.jss.2019.03.064
   Rahman MA., 2018, INT J COMPUT APPL, V975, P8887
   Rothermel G, 2002, SOFTW TEST VERIF REL, V12, P219, DOI 10.1002/stvr.256
   Saha RK, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P268, DOI 10.1109/ICSE.2015.47
   Salehie M, 2011, EUR CON SFTWR MTNCE, P329, DOI 10.1109/CSMR.2011.46
   Sandha SS, 2020, INT CONF ACOUST SPEE, P3987, DOI [10.1109/ICASSP40776.2020.9054609, 10.1109/icassp40776.2020.9054609]
   Shivaji S, 2009, IEEE INT CONF AUTOM, P600, DOI 10.1109/ASE.2009.76
   Shrivathsan AD, 2019, SYMMETRY-BASEL, V11, DOI 10.3390/sym11111400
   Song QB, 2019, IEEE T SOFTWARE ENG, V45, P1253, DOI 10.1109/TSE.2018.2836442
   Spieker H, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P12, DOI 10.1145/3092703.3092709
   Srikanth H, 2016, INFORM SOFTWARE TECH, V69, P71, DOI 10.1016/j.infsof.2015.09.002
   Tan P. N., 2016, INTRO DATA MINING
   Thong Hoang, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P34, DOI 10.1109/MSR.2019.00016
   Tong HN, 2018, INFORM SOFTWARE TECH, V96, P94, DOI 10.1016/j.infsof.2017.11.008
   Wang RC, 2016, MATH PROBL ENG, V2016, DOI 10.1155/2016/8343910
   Wang S, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P182, DOI 10.1145/2889160.2889240
   Wang S, 2020, IEEE T SOFTWARE ENG, V46, P1267, DOI 10.1109/TSE.2018.2877612
   Wang S, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P523, DOI 10.1145/3106237.3106258
   Wang S, 2016, PROC INT CONF SOFTW, P297, DOI 10.1145/2884781.2884804
   Wang TJ, 2016, SOFTW TEST VERIF REL, V26, P498, DOI 10.1002/stvr.1610
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Xu D., 2015, Annals of Data Science, V2, P165, DOI [DOI 10.1007/S40745-015-0040-1, 10.1007/s40745-015-0040-1]
   Xu Z, 2019, J SYST SOFTWARE, V158, DOI 10.1016/j.jss.2019.110402
   Yan M, 2017, INT SYMP EMP SOFTWAR, P344, DOI 10.1109/ESEM.2017.48
   Yang XL, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P17, DOI 10.1109/QRS.2015.14
   Yang YB, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P157, DOI 10.1145/2950290.2950353
   Yao JX, 2021, INFORM SOFTWARE TECH, V139, DOI 10.1016/j.infsof.2021.106664
   Yedida R, 2021, Arxiv, DOI arXiv:2008.03835
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yoo S., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P140, DOI 10.1145/1273463.1273483
   Yoo S, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P201
   Zainab A, 2020, IEEE INT CONF BIG DA, P5332, DOI 10.1109/BigData50022.2020.9378423
   Zhang F, 2016, PROC INT CONF SOFTW, P309, DOI 10.1145/2884781.2884839
   Zhang ZW, 2017, AUTOMAT SOFTW ENG, V24, P47, DOI 10.1007/s10515-016-0194-x
   Zhao XB, 2015, P INT COMP SOFTW APP, P542, DOI 10.1109/COMPSAC.2015.154
   Zhong H, 2008, INFORM SOFTWARE TECH, V50, P534, DOI 10.1016/j.infsof.2007.06.003
   Zhu K, 2020, IET SOFTW, V14, P185, DOI 10.1049/iet-sen.2019.0278
NR 145
TC 6
Z9 7
U1 2
U2 12
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 50
DI 10.1007/s10515-022-00344-y
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3L5PY
UT WOS:000834814800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Saidani, I
   Ouni, A
   Mkaouer, MW
AF Saidani, Islem
   Ouni, Ali
   Mkaouer, Mohamed Wiem
TI Improving the prediction of continuous integration build failures using
   deep learning
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Continuous integration; Build prediction; Travis CI; Genetic algorithm;
   Long short term memory; Machine learning; Hyper-parameters optimization;
   Concept drift
ID HYPER-PARAMETER OPTIMIZATION; NEURAL-NETWORKS; CLASSIFICATION; SEARCH;
   IMPACT; LSTM
AB Continuous Integration (CI) aims at supporting developers in integrating code changes constantly and quickly through an automated build process. However, the build process is typically time and resource-consuming as running failed builds can take hours until discovering the breakage; which may cause disruptions in the development process and delays in the product release dates. Hence, preemptively detecting when a software state is most likely to trigger a failure during the build is of crucial importance for developers. Accurate build failures prediction techniques can cut the expenses of CI build cost by early predicting its potential failures. However, developing accurate prediction models is a challenging task as it requires learning long- and short-term dependencies in the historical CI build data as well as extensive feature engineering to derive informative features to learn from. In this paper, we introduce DL-CIBuild a novel approach that uses Long Short-Term Memory (LSTM)-based Recurrent Neural Networks (RNN) to construct prediction models for CI build outcome prediction. The problem is comprised of a single series of CI build outcomes and a model is required to learn from the series of past observations to predict the next CI build outcome in the sequence. In addition, we tailor Genetic Algorithm (GA) to tune the hyper-parameters for our LSTM model. We evaluate our approach and investigate the performance of both cross-project and online prediction scenarios on a benchmark of 91,330 CI builds from 10 large and long-lived software projects that use the Travis CI build system. The statistical analysis of the obtained results shows that the LSTM-based model outperforms traditional Machine Learning (ML) models with both online and cross-project validations. DL-CIBuild has shown also a less sensitivity to the training set size and an effective robustness to the concept drift. Additionally, by considering several Hyper-Parameter Optimization (HPO) methods as baseline for GA, we demonstrate that the latter performs the best
C1 [Saidani, Islem; Ouni, Ali] Univ Quebec, ETS Montreal, Montreal, PQ, Canada.
   [Mkaouer, Mohamed Wiem] Rochester Inst Technol, Rochester, NY 14623 USA.
C3 University of Quebec; Ecole de Technologie Superieure - Canada;
   University of Quebec Montreal; Rochester Institute of Technology
RP Ouni, A (corresponding author), Univ Quebec, ETS Montreal, Montreal, PQ, Canada.
EM islem.saidani.1@ens.etsmtl.ca; ali.ouni@etsmtl.ca; mwmvse@rit.edu
RI Ouni, Ali/Y-8280-2019; Mkaouer, Mohamed Wiem/N-7476-2017
OI Ouni, Ali/0000-0003-4708-0362; Mkaouer, Mohamed Wiem/0000-0001-6010-7561
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
   [RGPIN-2018-05960]
FX This work has been supported by the Natural Sciences and Engineering
   Research Council of Canada (NSERC), Discovery Grant RGPIN-2018-05960.
CR Abdalkareem R, 2021, IEEE T SOFTWARE ENG, V47, P2740, DOI 10.1109/TSE.2020.2967380
   Agrawal A, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1050, DOI 10.1145/3180155.3180197
   [Anonymous], 2020, REPLICATION PACKAGE
   [Anonymous], 2015, UNDERSTANDING LSTM N
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Atchison A, 2017, IEEE WORK CONF MIN S, P463, DOI 10.1109/MSR.2017.29
   Athiwaratkun B, 2017, INT CONF ACOUST SPEE, P2482, DOI 10.1109/ICASSP.2017.7952603
   Beller M, 2017, IEEE WORK CONF MIN S, P356, DOI 10.1109/MSR.2017.62
   Beller M, 2017, IEEE WORK CONF MIN S, P447, DOI 10.1109/MSR.2017.24
   Bengio Y, 2013, INT CONF ACOUST SPEE, P8624, DOI 10.1109/ICASSP.2013.6639349
   Benni KE, 2018, IEEE T SOFTWARE ENG, V44, P534, DOI 10.1109/TSE.2017.2731766
   Bergstra J., 2011, Adv. Neural Inf. Process. Syst., V24
   Bergstra J, 2012, J MACH LEARN RES, V13, P281
   Bhowan U, 2014, IEEE T EVOLUT COMPUT, V18, P893, DOI 10.1109/TEVC.2013.2293393
   Bhowan U, 2011, GECCO-2011: PROCEEDINGS OF THE 13TH ANNUAL GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1331
   Bhowan U, 2010, LECT NOTES COMPUT SC, V6021, P1, DOI 10.1007/978-3-642-12148-7_1
   Bhowan U, 2009, IEEE C EVOL COMPUTAT, P2802, DOI 10.1109/CEC.2009.4983294
   Bishop Christopher M., 2006, Pattern Recognition and Machine Learning, V4
   Bouktif S, 2020, ENERGIES, V13, DOI 10.3390/en13020391
   Bouktif S, 2018, ENERGIES, V11, DOI 10.3390/en11071636
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Buda M, 2018, NEURAL NETWORKS, V106, P249, DOI 10.1016/j.neunet.2018.07.011
   Cervantes J, 2013, IEEE SYS MAN CYBERN, P2659, DOI 10.1109/SMC.2013.7
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Choetkiertikul M, 2019, IEEE T SOFTWARE ENG, V45, P637, DOI 10.1109/TSE.2018.2792473
   CLIFF N, 1993, PSYCHOL BULL, V114, P494, DOI 10.1037/0033-2909.114.3.494
   Collell G, 2018, NEUROCOMPUTING, V275, P330, DOI 10.1016/j.neucom.2017.08.035
   Cui Yiming, 2015, ARXIV PREPRINT ARXIV
   Dey R, 2017, MIDWEST SYMP CIRCUIT, P1597, DOI 10.1109/MWSCAS.2017.8053243
   Di Martino Sergio, 2011, Product-Focused Software Process Improvement. Proceedings 12th International Conference, PROFES 2011, P247, DOI 10.1007/978-3-642-21843-9_20
   Duvall Paul M., 2007, Continuous integration: improving software quality and reducing risk
   Ekanayake J, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P51, DOI 10.1109/MSR.2009.5069480
   Falkner S, 2018, PR MACH LEARN RES, V80
   Fowler M., 2006, Continuous integration
   Gallaba K, 2018, IEEE INT CONF AUTOM, P87, DOI 10.1145/3238147.3238171
   Ghaleb T.A., IEEE T SOFTWARE ENG
   Ghaleb TA, 2019, EMPIR SOFTW ENG, V24, P2102, DOI 10.1007/s10664-019-09695-9
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Graves A, 2005, NEURAL NETWORKS, V18, P602, DOI 10.1016/j.neunet.2005.06.042
   Graves A, 2013, 2013 IEEE WORKSHOP ON AUTOMATIC SPEECH RECOGNITION AND UNDERSTANDING (ASRU), P273, DOI 10.1109/ASRU.2013.6707742
   Guo BS, 2019, ELECTRONICS-SWITZ, V8, DOI 10.3390/electronics8050579
   Haris M, 2021, APPL ENERG, V286, DOI 10.1016/j.apenergy.2021.116541
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Harman M, 2012, LECT NOTES COMPUT SC, V7007, P1
   Hassan F, 2017, INT SYMP EMP SOFTWAR, P157, DOI 10.1109/ESEM.2017.23
   Hastie T., 2009, The Elements of Statistical Learning
   Hilton M, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P197, DOI 10.1145/3106237.3106270
   Hilton M, 2016, IEEE INT CONF AUTOM, P426, DOI 10.1145/2970276.2970358
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Hochreiter S, 1997, ADV NEUR IN, V9, P473
   Hsu C.-W., 2003, PRACTICAL GUIDE SUPP
   Jebnoun Hadhemi, 2020, FOUTSE SCENT DEEP LE
   Jelihovschi E.G., 2014, TEMA (São Carlos), V15, P3
   Karpathy A., 2015, ARXIV150602078
   Krawczyk B, 2015, LECT NOTES COMPUT SC, V9375, P45, DOI 10.1007/978-3-319-24834-9_6
   Krishna R, 2016, IEEE INT CONF AUTOM, P122, DOI 10.1145/2970276.2970339
   Längkvist M, 2014, PATTERN RECOGN LETT, V42, P11, DOI 10.1016/j.patrec.2014.01.008
   Li H, 2018, MOLECULES, V23, DOI 10.3390/molecules23081923
   Li LS, 2018, J MACH LEARN RES, V18
   Li YX, 2020, PR MACH LEARN RES, V119
   Lorenzo PR, 2017, PROCEEDINGS OF THE 2017 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE (GECCO'17), P481, DOI 10.1145/3071178.3071208
   Luo Y, 2017, 2017 14TH WEB INFORMATION SYSTEMS AND APPLICATIONS CONFERENCE (WISA 2017), P139, DOI 10.1109/WISA.2017.17
   Malhotra R, 2017, AUTOMAT SOFTW ENG, V24, P673, DOI 10.1007/s10515-016-0203-0
   Mkaouer W, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2729974
   Ni AS, 2018, PROC IEEE ACM INT C, P366, DOI 10.1145/3183440.3195012
   Ni AS, 2017, IEEE WORK CONF MIN S, P455, DOI 10.1109/MSR.2017.26
   Ordóñez FJ, 2016, SENSORS-BASEL, V16, DOI 10.3390/s16010115
   Ouni A, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2932631
   Provost F., 2000, P AAAI 2000 WORKSH I, V68, P1, DOI DOI 10.1109/SOCPAR.2011
   Quinlan J. R., 1993, PROGRAMS MACHINE LEA
   Rausch T, 2017, IEEE WORK CONF MIN S, P345, DOI 10.1109/MSR.2017.54
   Romano J, 2006, ANN M FLOR ASS I RES, P1
   Saidani I., 29 ACM JOINT M EUR S, P1530
   Saidani I., 2022, IEEE T SOFTW ENG
   Saidani I, 2021, INFORM SOFTWARE TECH, V138, DOI 10.1016/j.infsof.2021.106618
   Saidani I, 2020, INFORM SOFTWARE TECH, V128, DOI 10.1016/j.infsof.2020.106392
   Santolucito M., 2018, STATICALLY VERIFYING
   Schapire Robert E, 2013, EMPIRICAL INFERENCE, P37, DOI [DOI 10.1007/978-3-642-41136-65, DOI 10.1007/978-3-642-41136-6_5]
   Shan Y, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P255, DOI 10.1145/2939672.2939704
   Shrikanth NC., 2020, ARXIV PREPRINT ARXIV
   Singh A., 2012, P 5 ACM WORKSH SEC A, P81
   Snoek J., 2012, Advances in Neural Information Processing Systems, V25, DOI DOI 10.48550/ARXIV.1206.2944
   Sundermeyer M, 2012, 13TH ANNUAL CONFERENCE OF THE INTERNATIONAL SPEECH COMMUNICATION ASSOCIATION 2012 (INTERSPEECH 2012), VOLS 1-3, P194
   Sundsoy P, 2016, ADV INTEL SYS RES, V127
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   Tantithamthavorn C, 2017, IEEE T SOFTWARE ENG, V43, P1, DOI 10.1109/TSE.2016.2584050
   Tharwat A, 2019, J CLASSIF, V36, P576, DOI 10.1007/s00357-018-9299-1
   Tsymbal Alexey, 2004, COMPUTER SCI DEP TRI, V106, P58
   Vasilescu B, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P805, DOI 10.1145/2786805.2786850
   Wang Y, 2016, PROCEEDINGS OF THE 2016 SECOND CONFERENCE ON MOBILE AND SECURE SERVICES (MOBISECSERV)
   Wicaksono AS, 2018, INT J ADV COMPUT SC, V9, P263
   Widmer G, 1996, MACH LEARN, V23, P69, DOI 10.1023/A:1018046501280
   Wilcoxon Frank, 1970, SELECTED TABLES MATH, V1, P171, DOI [DOI 10.1002/9780471462422.EOCT, DOI 10.1007/SPRINGERREFERENCE_205698]
   Xia J, 2017, 2017 14TH WEB INFORMATION SYSTEMS AND APPLICATIONS CONFERENCE (WISA 2017), P234, DOI 10.1109/WISA.2017.53
   Xia J, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY COMPANION (QRS-C), P311, DOI 10.1109/QRS-C.2017.59
   Xia YF, 2017, EXPERT SYST APPL, V78, P225, DOI 10.1016/j.eswa.2017.02.017
   Xie Z, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2875
   Yang L, 2020, NEUROCOMPUTING, V415, P295, DOI 10.1016/j.neucom.2020.07.061
   Yuhui Shi, 1998, Evolutionary Programming VII. 7th International Conference, EP98. Proceedings, P591, DOI 10.1007/BFb0040810
   Zenisek J, 2019, COMPUT IND ENG, V137, DOI 10.1016/j.cie.2019.106031
   Zhang F, 2016, PROC INT CONF SOFTW, P309, DOI 10.1145/2884781.2884839
   Zhao YY, 2017, IEEE INT CONF AUTOM, P60, DOI 10.1109/ASE.2017.8115619
   Zheng J, 2010, EXPERT SYST APPL, V37, P4537, DOI 10.1016/j.eswa.2009.12.056
   Zhou ZH, 2006, IEEE T KNOWL DATA EN, V18, P63, DOI 10.1109/TKDE.2006.17
NR 105
TC 13
Z9 23
U1 3
U2 22
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 21
DI 10.1007/s10515-021-00319-5
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YK1OB
UT WOS:000744989800001
DA 2024-07-18
ER

PT J
AU Verhaeghe, B
   Anquetil, N
   Etien, A
   Ducasse, S
   Seriai, A
   Derras, M
AF Verhaeghe, Benoit
   Anquetil, Nicolas
   Etien, Anne
   Ducasse, Stephane
   Seriai, Abderrahmane
   Derras, Mustapha
TI GUI visual aspect migration: a framework agnostic solution
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Graphical user interface; Visual part; Model-driven engineering;
   Migration
AB With the generalization of mobile devices and Web applications, GUI frameworks evolve at a fast pace: JavaFX replaced Swing, Angular 8 replaced Angular 1.4 which had replaced Google Web Toolkit (GWT). This situation forces organizations to migrate their applications to modern frameworks regularly so they do not become obsolete. There has been research in the past on automatic GUI migration. However, and concurrently, large organisations' applications use many different technologies. For example, the IT company with which we are working, Berger-Levrault, wishes to migrate applications written in generic programming language (Java/GWT), proprietary "4th generation" languages (VisualBasic 6, PowerBuilder), or markup languages (Silverlight). Furthermore, one must expect that in a few years time, new frameworks will appear and new migrations will be required. Thus, there is a need for a language-agnostic migration approach allowing one to migrate various legacy GUI to the latest technologies. None of the existing solutions allow to deal with such a variety of GUI framework. They also typically focus on a subpart of the migration (i.e. how to extract a specific GUI framework) ignoring the re-engineering/forward-engineering part of the migration (which is straightforward for a single technology). This makes it difficult to adapt these solutions to other GUI frameworks. We propose an approach to migrate the GUI part of applications. It is based on meta-models to represent the visual element structure and layout. We detail how to create both the GUI extractors and generators, with guidelines to support new markup and programming languages. We evaluate our approach by implementing three extractors and generators for web-based or desktop-based user interfaces defined with generic programming languages (Java, Pharo, TypeScript) or markup languages (XML, HTML). We comment case studies on five applications, opened and closed source, of different sizes. The implementations of our generic approach detect 99% of the widgets and identify (i.e. determine the type of the widget) 97% of them. We give examples of the migrated GUIs, both successful and not.
C1 [Verhaeghe, Benoit; Seriai, Abderrahmane; Derras, Mustapha] Berger Levrault, Montpellier, France.
   [Verhaeghe, Benoit; Anquetil, Nicolas; Etien, Anne; Ducasse, Stephane] INRIA Lille Nord Europe, RMod Team, Villeneuve Dascq, France.
   [Verhaeghe, Benoit; Anquetil, Nicolas; Etien, Anne; Ducasse, Stephane] Univ Lille, CNRS, Cent Lille, Inria,UMR 9189,CRIStAL, Lille, France.
C3 Universite de Lille; Centrale Lille; Centre National de la Recherche
   Scientifique (CNRS); Inria
RP Verhaeghe, B (corresponding author), Berger Levrault, Montpellier, France.; Verhaeghe, B (corresponding author), INRIA Lille Nord Europe, RMod Team, Villeneuve Dascq, France.; Verhaeghe, B (corresponding author), Univ Lille, CNRS, Cent Lille, Inria,UMR 9189,CRIStAL, Lille, France.
EM benoit.verhaeghe@berger-levrault.com; nicolas.anquetil@inria.fr;
   anne.etien@inria.fr; stephane.ducasse@inria.fr;
   abderrahmane.seriai@berger-levrault.com;
   mustapha.derras@berger-levrault.com
RI Etien, Anne/AAG-4675-2020
OI Etien, Anne/0000-0003-3034-873X; Verhaeghe, Benoit/0000-0002-4588-2698;
   Seriai, Abdelhak-djamel/0000-0003-1961-1410
FU Berger-Levrault; Inria-Lille-Nord-Europe
FX This work was supported by Berger-Levrault and Inria-Lille-Nord-Europe.
CR [Anonymous], 2012, P 24 AUSTR COMPUTER
   Beltramelli T, 2018, PROCEEDINGS OF THE ACM SIGCHI SYMPOSIUM ON ENGINEERING INTERACTIVE COMPUTING SYSTEMS (EICS'18), DOI 10.1145/3220134.3220135
   Bragagnolo S., 2020, INT C SOFTW SYST REU
   Bragagnolo S., 2020, INT C QUAL INF COMM
   Brambilla M., 2014, Interaction Flow Modeling Language: Model-Driven UI Engineering of Web and Mobile Apps with IFML
   Cao JX, 2010, INT J PARALLEL EMERG, V25, P93, DOI 10.1080/17445760802429585
   Chen CY, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P665, DOI 10.1145/3180155.3180222
   Dutriez C., 2019, P 14 ED INT WORKSH S
   Fabry J., 2017, SPEC UI FRAMEWORK
   Fleurey F, 2007, LECT NOTES COMPUT SC, V4735, P482
   Garcés K, 2018, COMPUT STAND INTER, V57, P110, DOI 10.1016/j.csi.2017.10.004
   Gerdes J, 2009, J SOFTW MAINT EVOL-R, V21, P171, DOI 10.1002/smr.400
   Gotti Z, 2016, ICSOFT-EA: PROCEEDINGS OF THE 11TH INTERNATIONAL JOINT CONFERENCE ON SOFTWARE TECHNOLOGIES - VOL. 1, P210, DOI 10.5220/0005986002100219
   Hasselknippe KF, 2017, ASIA PAC SOFWR ENG, P695, DOI 10.1109/APSEC.2017.87
   Hayakawa T., 2012, GSTF J COMPUT, P7
   Joorabchi M. E., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P177, DOI 10.1109/WCRE.2012.27
   Kazman R, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P154, DOI 10.1109/WCRE.1998.723185
   Lutteroth C, 2008, CONSTRAINTS, V13, P307, DOI 10.1007/s10601-008-9043-2
   Memon A, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P260, DOI 10.1109/WCRE.2003.1287256
   Mesbah A, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P181
   Mesbah A, 2012, ACM T WEB, V6, DOI 10.1145/2109205.2109208
   MOORE M, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P72, DOI 10.1109/ICSM.1994.336788
   Moran K., 2018, ARXIV180709440CS
   Rodriguez-Echeverria R., 2011, P CURR TRENDS WEB EN, P236
   Samir H, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P179, DOI 10.1109/WCRE.2007.48
   Ramon OS, 2016, INFORM SOFTWARE TECH, V70, P155, DOI 10.1016/j.infsof.2015.10.005
   Ramón OS, 2014, AUTOMAT SOFTW ENG, V21, P147, DOI 10.1007/s10515-013-0130-2
   Shah Eeshan., 2011, P COMP WORKSH DSM TM, P255
   Silva JC, 2010, EICS 2010: PROCEEDINGS OF THE 2010 ACM SIGCHI SYMPOSIUM ON ENGINEERING INTERACTIVE COMPUTING SYSTEMS, P181
   Verhaeghe B., 2019, IEEE 26 INT C SOFTW
   Wlodarski L, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P569, DOI [10.1109/SANER.2019.8668006, 10.1109/saner.2019.8668006]
NR 31
TC 2
Z9 2
U1 4
U2 29
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 6
DI 10.1007/s10515-021-00284-z
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SP2JJ
UT WOS:000659500300001
DA 2024-07-18
ER

PT J
AU Huang, Q
   Wu, GQ
AF Huang, Qing
   Wu, Guoqing
TI Enhance code search via reformulating queries with evolving contexts
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Code search; Query reformulation; Evolving context; Code changes;
   Statistical learning
ID SOFTWARE
AB To improve code search, many query expansion (QE) approaches use APIs or crowd knowledge for expanding a query. However, these approaches may sometimes negatively impact the retrieval performance. This is because they can't distinguish the relevant terms from the irrelevant ones among a large set of candidate expansion terms and expand a query with irrelevant terms. In this paper, we propose QREC, a query reformulation approach with evolving contexts that refer to new/deleted terms and dependent terms during the code evolution. By considering the new terms as the relevant and the deleted terms as the irrelevant, QREC could reformulate a query with appropriate expansion terms. The experimental results show that QREC outperforms the state-of-the-art QE approaches (e.g., CodeHow and QECK) by 9-11% and improves the precision of the code search algorithms IR, Portfolio and VF by up to 37-45%.
C1 [Huang, Qing] Jiangxi Normal Univ, Sch Comp & Informat Engn, Nanchang, Jiangxi, Peoples R China.
   [Wu, Guoqing] Wuhan Univ, Sch Comp, State Key Lab Software Engn, Wuhan, Hubei, Peoples R China.
C3 Jiangxi Normal University; Wuhan University
RP Huang, Q (corresponding author), Jiangxi Normal Univ, Sch Comp & Informat Engn, Nanchang, Jiangxi, Peoples R China.
EM qh@whu.edu.cn; wgq@whu.edu.cn
FU National Natural Science Foundation of China [61902162, 61762049,
   61872272, 61877031, 61802350, 61862033, 61772246, 61562042, 61672470]
FX This work was supported in part by the National Natural Science
   Foundation of China (Grant Nos. 61902162, 61762049, 61872272, 61877031,
   61802350, 61862033, 61772246, 61562042 and 61672470).
CR Nguyen AT, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P511, DOI 10.1145/2950290.2950333
   Carpineto C, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2071389.2071390
   Chaparro O., 2017, IEEE INT C SOFTW MAI
   FISCHER G, 1991, 13TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P318, DOI 10.1109/ICSE.1991.130658
   Fluri B, 2007, IEEE T SOFTWARE ENG, V33, P725, DOI 10.1109/TSE.2007.70731
   Haiduc S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P842, DOI 10.1109/ICSE.2013.6606630
   Howard MJ, 2013, IEEE WORK CONF MIN S, P377, DOI 10.1109/MSR.2013.6624052
   Keivanloo I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P664, DOI 10.1145/2568225.2568292
   Lemos O.A.L., 2007, P 22 IEEE ACM INT C, P525, DOI 10.1145/1321631.1321726
   Lv F, 2015, IEEE INT CONF AUTOM, P260, DOI 10.1109/ASE.2015.42
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   Mcmillan C, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522930
   McMillan C, 2012, IEEE T SOFTWARE ENG, V38, P1069, DOI 10.1109/TSE.2011.84
   Nie LM, 2016, IEEE T SERV COMPUT, V9, P771, DOI 10.1109/TSC.2016.2560165
   Proksch S, 2016, IEEE INT CONF AUTOM, P111, DOI 10.1145/2970276.2970330
   Sadowski C., 2015, P 10 JOINT M FDN SOF
   SALTON G, 1983, COMMUN ACM, V26, P1022, DOI 10.1145/182.358466
   Sim SE, 1998, PROG COMPREHEN, P180, DOI 10.1109/WPC.1998.693351
   Sridhara G, 2008, INT C PROGRAM COMPRE, P123, DOI 10.1109/ICPC.2008.18
   Stolee KT, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2581377
   Sun XB, 2014, 2014 3RD INTERNATIONAL WORKSHOP ON EVIDENTIAL ASSESSMENT OF SOFTWARE TECHNOLOGIES (EAST), P32, DOI 10.1145/2627508.2627514
   Tian Y., 2014, COMP P 36 INT C SOFT
   Xu B, 2016, J ASSOC INF SCI TECH, V67, P1345, DOI 10.1002/asi.23476
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
   Youm KC, 2017, INFORM SOFTWARE TECH, V82, P177, DOI 10.1016/j.infsof.2016.11.002
NR 25
TC 8
Z9 8
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2019
VL 26
IS 4
SI SI
BP 705
EP 732
DI 10.1007/s10515-019-00263-5
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JQ6FZ
UT WOS:000499040300001
DA 2024-07-18
ER

PT J
AU Mehiaoui, A
   Wozniak, E
   Babau, JP
   Tucci-Piergiovanni, S
   Mraidha, C
AF Mehiaoui, Asma
   Wozniak, Ernest
   Babau, Jean-Philippe
   Tucci-Piergiovanni, Sara
   Mraidha, Chokri
TI Optimizing the deployment of tree-shaped functional graphs of real-time
   system on distributed architectures
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Distributed real-time applications; Response-time analysis;
   Optimization; Linear programming; Genetic algorithm; Placement;
   Partitioning; Scheduling
ID SCHEDULABILITY ANALYSIS; OPTIMIZATION; TASK
AB Recent development methodologies from the industry and the academia for complex real-time systems define a stage in which system functions are deployed onto an execution platform. The deployment consists of the placement of functions on a distributed network of nodes, the partitioning of functions in tasks and the scheduling of tasks and messages. In this paper, we present two approaches towards the efficient deployment of realistic and complex real-time systems by considering tree-shaped functional models. A formal approach to compute optimal deployment and a heuristic approach to scale to industry-size systems. The approaches consider placement, partitioning and scheduling, and are based on mixed integer linear programming (MILP) technique. Furthermore, we present a deep evaluation of the proposed deployment approaches to show the benefits and limits of a MILP-based deployment approach. A set of synthetic use-cases as well as a real-life automotive system are used to assess the quality and scalability of our deployment approaches. Considering use-cases, we show an added value with respect to end-to-end latencies optimization when solving the three stages of the deployment problem at the same time. This is done by comparing the quality of the solutions obtained with our techniques to those returned by the existing approaches.
C1 [Mehiaoui, Asma; Babau, Jean-Philippe] UBO, Lab STICC, Brest, France.
   [Wozniak, Ernest] Fortiss GmbH, Guerickestr, Munich, Germany.
   [Tucci-Piergiovanni, Sara; Mraidha, Chokri] CEA List DILS, Gif Sur Yvette, France.
C3 Universite de Bretagne Occidentale; fortiss
RP Mehiaoui, A (corresponding author), UBO, Lab STICC, Brest, France.
EM asma.mehiaoui@yahoo.com; wozniak@fortiss.org;
   jean-philippe.babau@univ-brest.fr; sara.tucci@cea.fr;
   chokri.mraidha@cea.fr
RI Piergiovanni, Sara Tucci/H-5172-2013
OI Mraidha, Chokri/0000-0003-2993-5734
CR Al-Sheikh A, 2010, P 18 INT C REAL TIM, P179
   Aleti A, 2013, IEEE T SOFTWARE ENG, V39, P658, DOI 10.1109/TSE.2012.64
   Azketa E., 2011, P 1 WORKSH SYNTH OPT
   Azketa E., 2011, P 2011IEEE 10 INT C
   Azketa E, 2011, IEEE INT CONF TRUST, P958, DOI 10.1109/TrustCom.2011.132
   Bartolini C., 2005, Proceedings. RTAS 2005. 11th IEEE Real Time and Embedded Technology and Applications Symposium, P458
   Bate I, 2006, PROCEEDINGS OF THE 12TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, P221
   Bini E., 2006, EUR C REAL TIM SYST
   BOgholm T., 2008, THESIS, P1
   Bosch Global, 1991, CAN SPEC VERS 2 0
   Boyd S., 2004, CONVEX OPTIMIZATION
   Burns A, 2010, REAL TIME SYSTEMS PR
   Daghsen A, 2013, THESIS
   Davis RI, 2007, REAL-TIME SYST, V35, P239, DOI 10.1007/s11241-007-9012-7
   Feljan J, 2012, EUROMICRO CONF PROC, P117, DOI 10.1109/SEAA.2012.56
   García JJG, 2000, EUROMICRO, P15, DOI 10.1109/EMRTS.2000.853988
   Hamann A, 2006, REAL-TIME SYST, V33, P101, DOI 10.1007/s11241-006-6884-x
   Hamann A., 2007, P 13 IEEE REAL TIM E
   He XQ, 2010, COMPUT J, V53, P1071, DOI 10.1093/comjnl/bxp084
   Jackson D., 2009, MITCSAILTR2009033 CO
   Kienhuis B., 2002, Embedded Processor Design Challenges, V2268, P321
   Klein M.H., 1993, PRACTITIONERS HDB RE
   Kodase S, 2003, DESIGNERS FORUM: DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, P170
   Kugele S., 2014, P 6 INT WORKSH CONST, P18, DOI [10.1145/2593735.2593739, DOI 10.1145/2593735.2593739]
   Kugele S, 2015, 2015 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CODESIGN (MEMOCODE), P158, DOI 10.1109/MEMCOD.2015.7340482
   Kugele S, 2008, COMM COM INF SC, V17, P400
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Long RS, 2009, IEEE I C EMBED SOFTW, P138, DOI 10.1109/ICESS.2009.63
   Mehiaoui Asma, 2014, Proceedings of the 2014 9th IEEE International Symposium on Industrial Embedded Systems (SIES 2014), P122, DOI 10.1109/SIES.2014.6871196
   Mehiaoui A., 2012, 2012 IEEE 18th International Conference on Embedded and Real-Time Computing Systems and Applications (RTCSA 2012), P400, DOI 10.1109/RTCSA.2012.61
   Mehiaoui A, 2013, ACM SIGPLAN NOTICES, V48, P121, DOI 10.1145/2499369.2465572
   Palencia J. C., 1999, P 20 IEEE REAL TIM S
   Peng Wei., 2010, Computer Engineering and Technology (ICCET), 2010 2nd International Conference on, V4, pV4
   Peraldi-Frati M. A., 2012, ERTS2012 INT C EMB R
   Pohl K., 2016, ADV MODEL BASED ENG, P3
   Pop T., 2004, ACM T DES AUTOMAT EL, P593
   Pop T., 2003, P 1 IEEE ACM IFIP IN
   Racu R, 2005, RTAS 2005: 11th IEEE Real Time and Embedded Technology and Applications Symposium, Proceedings, P160
   Richard M., 2003, P IEEE C EM TECHN FA
   Saksena M., 2000, Proceedings Third IEEE International Symposium on Object-Oriented Real-Time Distributed Computing (ISORC 2000) (Cat. No. PR00607), P360, DOI 10.1109/ISORC.2000.839552
   Sangiovanni-Vincentelli A, 2001, IEEE DES TEST COMPUT, V18, P23, DOI 10.1109/54.970421
   Sorel Y., 2004, J ERCIM NEWS, V59, P68
   TINDELL K, 1994, MICROPROC MICROPROG, V40, P117, DOI 10.1016/0165-6074(94)90080-9
   Wang SG, 2006, IEEE T SOFTWARE ENG, V32, P254, DOI 10.1109/TSE.2006.39
   Wang SG, 2004, RTAS 2004: 10TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P219
   Wozniak E., 2013, 2013 IEEE 18 C EM TE, P1
   Zeller M., 2011, 2011 5th IEEE International Conference on Self-Adaptive and Self-Organizing Systems (SASO), P79, DOI 10.1109/SASO.2011.19
   Zhang M, 2011, P IEEE RAP SYST PROT, P23, DOI 10.1109/RSP.2011.5929971
   Zheng W, 2007, DES AUT TEST EUROPE, P93
   Zheng W, 2007, RTSS 2007: 28TH IEEE INTERNATIONAL REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P161, DOI 10.1109/RTSS.2007.40
   Zhu Q, 2012, ACM T EMBED COMPUT S, V11, DOI 10.1145/2362336.2362352
   Zhu Q, 2010, IEEE T IND INFORM, V6, P621, DOI 10.1109/TII.2010.2053938
   Zhu Q, 2009, 15TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATION SYMPOSIUM: RTAS 2009, PROCEEDINGS, P275, DOI 10.1109/RTAS.2009.37
NR 53
TC 2
Z9 2
U1 0
U2 8
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2019
VL 26
IS 1
BP 1
EP 57
DI 10.1007/s10515-018-0244-7
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HL4VT
UT WOS:000458723700001
DA 2024-07-18
ER

PT J
AU Ménard, PA
   Ratté, S
AF Menard, Pierre Andre
   Ratte, Sylvie
TI Concept extraction from business documents for software engineering
   projects
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automated extraction; Conceptual model; Domain model; Relevance
   evaluation; Software project; Knowledge modeling
AB Acquiring relevant business concepts is a crucial first step for any software project for which the software experts are not domain experts. The wealth of information buried within an organization's written documentation is a precious source of concepts, relationships and attributes which can be used to model the enterprise's domain. The lack of targeted extraction tools can make perusing through this type of resource a lengthy and costly process. We propose a domain model focused extraction process aimed at the rapid discovery of knowledge relevant to the software expert. To avoid undesirable noise from high-level linguistic tools, the process is mainly composed of positive and negative base filters that are less error prone and more robust. The extracted candidates are then reordered using a weight propagation algorithm based on structural hints from source documents. When tested on French text corpora from public organizations, our process performs 2.7 times better than a statistical baseline for relevant concept discovery. A new metric to assess the performance discovery speed of relevant concepts is introduced. The annotation of a gold standard definition of software engineering oriented concepts for knowledge extraction tasks is also presented.
C1 [Menard, Pierre Andre; Ratte, Sylvie] Ecole Technol Super, Montreal, PQ, Canada.
C3 University of Quebec; Ecole de Technologie Superieure - Canada
RP Ménard, PA (corresponding author), Ecole Technol Super, Montreal, PQ, Canada.
EM pierre-andre.menard.1@ens.etsmtl.ca; sylvie.ratte@etsmtl.ca
RI RattÃ©, Sylvie/ABU-0444-2022
OI Menard, Pierre Andre/0000-0003-1654-4021
CR [Abran A. IEEE Computer Society IEEE Computer Society], 2004, GUIDE SOFTWARE ENG B
   Anderson TD, 2006, INFORMATION INTERACTION IN CONTEXT, PROCEEDINGS, P7
   [Anonymous], 2011, Text Processing with GATE (Version 6)
   [Anonymous], NLDB09
   [Anonymous], 2003, Building a Treebank for French, chapter Treebanks for Romances Languages
   [Anonymous], 1992, Conceptual Database Design-An entity-relationship Approach
   [Anonymous], 2014, Software engineering: a practitioner's approach
   Borgida A, 2007, AUTOMAT SOFTW ENG, V14, P443, DOI 10.1007/s10515-007-0018-0
   CHEN PPS, 1983, INFORM SCIENCES, V29, P127, DOI 10.1016/0020-0255(83)90014-2
   Deeptimahanti DK, 2011, P 4 IND SOFTW ENG C, P165, DOI [10.1145/1953355.1953378, DOI 10.1145/1953355.1953378]
   Farrell J., 2009, IBM WATSON BRIEF OVE
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI DOI 10.7551/MITPRESS/7287.001.0001
   Green S., 2011, C EMP METH NAT LANG
   Grenon P., 2004, Spatial Cognition and Computation, noeth, V4, P69, DOI 10.1207/s15427633scc0401_5
   Ittoo A., 2010, TEXTRACTOR FRAMEWORK, P71, DOI [10.1007/978-3-642-12814-1_7, DOI 10.1007/978-3-642-12814-1_7]
   Kotonya G., 1998, Requirements engineering: processes and techniques
   Leroy G, 2003, J BIOMED INFORM, V36, P145, DOI 10.1016/S1532-0464(03)00039-X
   Manning C.D., 1999, FDN STAT NATURAL LAN
   Maynard D., 2007, BUSINESS INFORM SYST, DOI [10.1007/978-3-540-72035-5_28, DOI 10.1007/978-3-540-72035-5_28]
   Ménard PA, 2011, KNOWL INF SYST, V29, P305, DOI 10.1007/s10115-010-0341-9
   Nenkova Ani., 2004, P HLT NAACL
   Niles I., 2001, Formal Ontology in Information Systems. Collected Papers from the Second International Conference, P2, DOI 10.1145/505168.505170
   Nivre J, 2005, P 4 WORKSH TREEB LIN
   Pfleeger S.L., 2009, SOFTWARE ENG THEORY
   Popescu D, 2008, LECT NOTES COMPUT SC, V5320, P103
   Prieto-Diaz R., 1991, Domain Analysis and Software Systems Modeling, P9
   Rose S., 2010, TEXT MINING APPL THE, V1, P10, DOI DOI 10.1002/9780470689646.CH1
   SCHAMBER L, 1994, ANNU REV INFORM SCI, V29, P3
   SCHMID LA, 1994, INT CONF ACOUST SPEE, P41
   Shilakes C., 1998, ENTERPRISE INFORM PO
   Vossen Piek., 1998, EuroWordNet: A Multilingual Database with Lexical Semantic Networks
NR 31
TC 9
Z9 9
U1 0
U2 32
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2016
VL 23
IS 4
BP 649
EP 686
DI 10.1007/s10515-015-0184-4
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DV1HD
UT WOS:000382670800006
DA 2024-07-18
ER

PT J
AU Bissyandé, TF
   Réveillère, L
   Lawall, JL
   Muller, G
AF Bissyande, Tegawende F.
   Reveillere, Laurent
   Lawall, Julia L.
   Muller, Gilles
TI Ahead of time static analysis for automatic generation of debugging
   interfaces to the Linux kernel
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Diagnosys; Debugging; Linux; Plugin; Reliability; Testing
AB The Linux kernel does not export a stable, well-defined kernel interface, complicating the development of kernel-level services, such as device drivers and file systems. While there does exist a set of functions that are exported to external modules, this set of functions frequently changes, and the functions have implicit, ill-documented preconditions. No specific debugging support is provided. We present Diagnosys, an approach to automatically constructing a debugging interface for the Linux kernel. First, a designated kernel maintainer uses Diagnosys to identify constraints on the use of the exported functions. Based on this information, developers of kernel services can then use Diagnosys to generate a debugging interface specialized to their code. When a service including this interface is tested, it records information about potential problems. This information is preserved following a kernel crash or hang. Our experiments show that the generated debugging interface provides useful log information and incurs a low performance penalty.
C1 [Bissyande, Tegawende F.] Univ Luxembourg, SnT, 4 Rue Alphonse Weicker, L-2721 Luxembourg, Luxembourg.
   [Reveillere, Laurent] Univ Bordeaux, LaBRI, 351 Cours Liberat, F-33400 Talence, France.
   [Lawall, Julia L.; Muller, Gilles] Sorbonne Univ Regal, UPMC, LIP6, Inria, 4 Pl Jussieu, F-75252 Paris, France.
C3 University of Luxembourg; Centre National de la Recherche Scientifique
   (CNRS); Universite de Bordeaux; Sorbonne Universite; Inria
RP Bissyandé, TF (corresponding author), Univ Luxembourg, SnT, 4 Rue Alphonse Weicker, L-2721 Luxembourg, Luxembourg.
EM tegawende.bissyande@uni.lu; laurent.reveillere@labri.fr;
   Julia.Lawall@lip6.fr; Gilles.Muller@lip6.fr
FU ANR Blanc Grant ABL
FX This work was supported in part by the ANR Blanc Grant ABL.
CR Albinet A, 2004, 2004 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P867
   [Anonymous], 2010, 25 S APPL COMPUTING
   [Anonymous], ASPLOS 16 16 INT C
   Arnout K, 2003, COMPUTER, V36, P48, DOI 10.1109/MC.2003.1244535
   Ball T., 2006, Operating Systems Review, V40, P73, DOI 10.1145/1218063.1217943
   Bissyande T. F., 2013, THESIS U SCI TECHNOL
   Bissyande T. F., 2013, SOFTWARE PRACTICE EX
   Bissyande T. F., 2013, IEEE 24 INT S SOFTW
   Bissyandé TF, 2013, P INT COMP SOFTW APP, P303, DOI 10.1109/COMPSAC.2013.55
   Bissyandé TF, 2012, IEEE INT CONF AUTOM, P60, DOI 10.1145/2351676.2351686
   Bissyandé TF, 2010, LECT NOTES COMPUT SC, V6452, P273, DOI 10.1007/978-3-642-16955-7_14
   Bray T., 1996, Bonnie file system benchmark
   Bugrara S, 2008, P IEEE S SECUR PRIV, P325, DOI 10.1109/SP.2008.15
   Chou A., 2001, Operating Systems Review, V35, P73, DOI 10.1145/502059.502042
   Corbet J., 2004, INJECTING FAULTS KER
   Cotroneo D, 2009, SYM REL DIST SYST, P288, DOI 10.1109/SRDS.2009.26
   Dillig I, 2010, COMMUN ACM, V53, P115, DOI 10.1145/1787234.1787259
   Donahue A., 2010, THESIS U TORONTO
   Engler D., 2001, Operating Systems Review, V35, P57, DOI 10.1145/502059.502041
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Etsion Y., 2007, Operating Systems Review, V41, P259, DOI 10.1145/1272998.1273023
   Fetzer C, 2003, 2003 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P317, DOI 10.1109/DSN.2003.1209942
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Frade MJ, 2011, COMPUT SCI REV, V5, P252, DOI 10.1016/j.cosrev.2011.02.002
   Ganapathi A, 2006, LISA, V6, P49
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huth MichaelR. A., 2000, LOGIC COMPUTER SCI M
   Jones R., 2000, NETPERF NETWORK PERF
   Kroah-Hartman G., 2005, LINUX J, V133, P9
   Kroah- Hartman G., 2013, LINUX KERNEL DRIVER
   Kuznetsov V., 2010, USENIX ANN TECHN C A
   Lawall JL, 2009, I C DEPEND SYS NETWO, P43, DOI 10.1109/DSN.2009.5270354
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   Mao YD, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P115
   Marinescu PD, 2011, ACM T COMPUT SYST, V29, DOI 10.1145/2063509.2063511
   Meyer B., 1988, Object-Oriented Software Construction
   Mills C., 2004, USING DESIGN CONTRAC
   Nellitheertha H., 2004, REBOOT LINUX FASTER
   Padioleau Y, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P247, DOI 10.1145/1357010.1352618
   Palix N., 2010, PROC 9 INT C ASPECT, P169
   Palix N., 2011, P 2011 INT C ARCH SU
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Post H, 2007, LECT NOTES COMPUT SC, V4591, P518
   Ramanathan MK, 2007, PROC INT CONF SOFTW, P240
   Rostedt Steven., 2009, Debugging the kernel using Ftrace"
   Rubini A., 2001, LINUX DEVICE DRIVERS, P109
   Ryzhyk L, 2009, EUROSYS'09: PROCEEDINGS OF THE FOURTH EUROSYS CONFERENCE, P275
   Strembeck M, 2009, SOFTWARE PRACT EXPER, V39, P1253, DOI 10.1002/spe.936
   Yuan D, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P143
NR 50
TC 1
Z9 2
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2016
VL 23
IS 1
SI SI
BP 3
EP 41
DI 10.1007/s10515-014-0152-4
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1TW
UT WOS:000369000800002
DA 2024-07-18
ER

PT J
AU Almorsy, M
   Grundy, J
   Ibrahim, AS
AF Almorsy, Mohamed
   Grundy, John
   Ibrahim, Amani S.
TI Adaptable, model-driven security engineering for SaaS cloud-based
   applications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software-as-a-service; Model-driven engineering; Adaptive-security;
   Security engineering; Tenant-oriented security
ID REQUIREMENTS
AB Software-as-a-service (SaaS) multi-tenancy in cloud-based applications helps service providers to save cost, improve resource utilization, and reduce service customization and maintenance time. This is achieved by sharing of resources and service instances among multiple "tenants" of the cloud-hosted application. However, supporting multi-tenancy adds more complexity to SaaS applications required capabilities. Security is one of these key requirements that must be addressed when engineering multi-tenant SaaS applications. The sharing of resources among tenants-i.e. multi-tenancy-increases tenants' concerns about the security of their cloud-hosted assets. Compounding this, existing traditional security engineering approaches do not fit well with the multi-tenancy application model where tenants and their security requirements often emerge after the applications and services were first developed. The resultant applications do not usually support diverse security capabilities based on different tenants' needs, some of which may change at run-time i.e. after cloud application deployment. We introduce a novel model-driven security engineering approach for multi-tenant, cloud-hosted SaaS applications. Our approach is based on externalizing security from the underlying SaaS application, allowing both application/service and security to evolve at runtime. Multiple security sets can be enforced on the same application instance based on different tenants' security requirements. We use abstract models to capture service provider and multiple tenants' security requirements and then generate security integration and configurations at runtime. We use dependency injection and dynamic weaving via Aspect-Oriented Programming (AOP) to integrate security within critical application/service entities at runtime. We explain our approach, architecture and implementation details, discuss a usage example, and present an evaluation of our approach on a set of open source web applications.
C1 [Almorsy, Mohamed; Grundy, John; Ibrahim, Amani S.] Swinburne Univ Technol, Ctr Comp & Engn Software Syst, Melbourne, Vic, Australia.
C3 Swinburne University of Technology
RP Almorsy, M (corresponding author), Swinburne Univ Technol, Ctr Comp & Engn Software Syst, Melbourne, Vic, Australia.
EM malmorsy@swin.edu.au; jgrundy@swin.edu.au; aibrahim@swin.edu.au
RI Grundy, John/AAF-1716-2019
OI Grundy, John/0000-0003-4928-7076; Abdelrazek,
   Mohamed/0000-0003-3812-9785
FU Swinburne University of Technology; FRST SPPI project
FX Funding provided for this research by Swinburne University of Technology
   and FRST SPPI project is gratefully acknowledged. We also thank
   Swinburne University of Technology for their scholarship support for the
   first and third authors.
CR Akai S., 2009, EXTENDING ASPECTJ SE
   Almorsy M, 2012, IEEE INT CONF AUTOM, P230, DOI 10.1145/2351676.2351709
   [Anonymous], 2001, Security Engineering: A Guide to Building Dependable Distributed Systems
   [Anonymous], 2010, P 2010 AS PAC CLOUD
   BAUER A, 2008, P 4 INT WORKSH SOFTW, P33
   Blair G, 2009, COMPUTER, V42, P22, DOI 10.1109/MC.2009.326
   Brock M, 2010, LECT NOTES COMPUT SC, V6082, P254
   Cai H, 2009, IEEE INT CONF CLOUD, P101, DOI 10.1109/CLOUD.2009.63
   Chaoliang Zhong, 2010, 2010 Fifth International Symposium on Service Oriented System Engineering (SOSE 2010), P244, DOI 10.1109/SOSE.2010.34
   Chinchani R., 2004, 200416 U BUFF
   Deshuai Wang, 2009, 2009 1st International Conference on Information Science and Engineering (ICISE 2009), P336, DOI 10.1109/ICISE.2009.894
   Elkhatib A., 2007, INT WORKSH SOFTW ENG, P1
   Guo CJ, 2007, 9TH IEEE INTERNATIONAL CONFERENCE ON E-COMMERCE TECHNOLOGY/4TH IEEE INTERNATIONAL CONFERENCE ON ENTERPRISE COMPUTING, E-COMMERCE AND E-SERVICES, P551, DOI 10.1109/CEC-EEE.2007.4
   Hafner M, 2009, J UNIVERS COMPUT SCI, V15, P2916
   Hashii B., 2000, SUPPORTING RECONFIGU
   Hong Cai, 2010, Proceedings of the 2010 IEEE Congress on Services (SERVICES-1), P40, DOI 10.1109/SERVICES.2010.48
   Jin X, 2012, LECT NOTES COMPUT SC, V7371, P41, DOI 10.1007/978-3-642-31540-4_4
   Jing Xu, 2010, 2010 2nd IEEE International Conference on Information Management and Engineering (ICIME 2010), P388, DOI 10.1109/ICIME.2010.5477832
   Johansen R., 2007, YIIHAW NET ASPECT WE
   Jürjens J, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P408, DOI 10.1109/ASE.2001.989840
   Jurjens J., 2001, Fundamental Approaches to Software Engineering. 4th International Conference, FASE 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2029), P187
   LAMSWEERDE A.V., 2003, P INT WORKSHOP REQUI, P49
   Liu L., 2009, Int. J. Softw. Inform., V3, P89
   Lodderstedt Torsten., 2002, UML 02 P 5 INT C UNI, P426, DOI [DOI 10.1007/3-540-45800-X_33, DOI 10.1007/3-540-45800-X33]
   Mead N.R., 2005, SECURITY QUALITY REQ
   Mellado D, 2006, LECT NOTES COMPUT SC, V4189, P192
   Menzel Michael, 2010, Proceedings of the 2010 IEEE Congress on Services (SERVICES-1), P115, DOI 10.1109/SERVICES.2010.90
   Mietzner R, 2008, 2008 3RD INTERNATIONAL CONFERENCE ON INTERNET AND WEB APPLICATIONS AND SERVICES (ICIW 2008), P156, DOI 10.1109/ICIW.2008.68
   Montrieux L, 2010, P IEEE ACM INT C AUT, P357
   Morin B., 2010, SECURITY DRIVEN MODE
   Morin B, 2009, PROC INT CONF SOFTW, P122, DOI 10.1109/ICSE.2009.5070514
   Mouelhi T., 2008, P 11 INT C MOD DRIV
   Mouratidis H., 2007, INT J SOFTW ENG KNOW
   Pervez Z, 2010, INT CONF ADV COMMUN, P214
   Sanchez-Cid F, 2008, INT WORKSHOP DATABAS, P305, DOI 10.1109/DEXA.2008.119
   Scott K., 2003, RETARGETABLE RECONFI
   Sindre G, 2005, REQUIR ENG, V10, P34, DOI 10.1007/s00766-004-0194-4
   Vogel Thomas, 2010, Models in Software Engineering. Workshops and Symposia at MODELS 2010. Reports and Revised Selected Papers, P224, DOI 10.1007/978-3-642-21210-9_22
   Xuesong Zhang, 2010, 2010 IEEE International Conference on Software Engineering and Service Sciences (ICSESS 2010), P209, DOI 10.1109/ICSESS.2010.5552407
NR 39
TC 35
Z9 38
U1 0
U2 20
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD APR
PY 2014
VL 21
IS 2
SI SI
BP 187
EP 224
DI 10.1007/s10515-013-0133-z
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AD6AB
UT WOS:000333333800003
DA 2024-07-18
ER

PT J
AU Kloukinas, C
   Yovine, S
AF Kloukinas, Christos
   Yovine, Sergio
TI A model-based approach for multiple QoS in scheduling: from models to
   implementation
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE CASE; Model checking; Process management; Real-time systems and embedded
   systems
ID CONTROLLER SYNTHESIS; TIME; ALGORITHMS
AB Meeting multiple Quality of Service (QoS) requirements is an important factor in the success of complex software systems. This paper presents an automated, model-based scheduler synthesis approach for scheduling application software tasks to meet multiple QoS requirements. As a first step, it shows how designers can meet deadlock-freedom and timeliness requirements, in a manner that (i) does not over-provision resources, (ii) does not require architectural changes to the system, and that (iii) leaves enough degrees of freedom to pursue further properties. A major benefit of our synthesis methodology is that it increases traceability, by linking each scheduling constraint with a specific pair of QoS property and underlying platform execution model, so as to facilitate the validation of the scheduling constraints and the understanding of the overall system behaviour, required to meet further QoS properties.
   The paper shows how the methodology is applied in practice and also presents a prototype implementation infrastructure for executing an application on top of common operating systems, without requiring modifications of the latter.
C1 [Kloukinas, Christos] City Univ London, London EC1V 0HB, England.
   [Yovine, Sergio] Consejo Nacl Invest Cient & Tecn, RA-1033 Buenos Aires, DF, Argentina.
   [Yovine, Sergio] Univ Buenos Aires, Buenos Aires, DF, Argentina.
C3 City University London; Consejo Nacional de Investigaciones Cientificas
   y Tecnicas (CONICET); University of Buenos Aires
RP Kloukinas, C (corresponding author), City Univ London, London EC1V 0HB, England.
EM C.Kloukinas@soi.city.ac.uk; syovine@dc.uba.ar
OI Yovine, Sergio/0000-0002-2737-4382; Kloukinas,
   Christos/0000-0003-0424-7425
FU EU [FP7-ICT-2009-257367]; Royal Society; STIC-AmSud TAPIOCA; PICT-PAE
   02287; MinPlan GAMBETAS projects; MINCyT;  [BID-ANPCyT PICTO-CRUP 31352]
FX C. Kloukinas would like to acknowledge the partial financial support
   provided by the EU project FP7-ICT-2009-257367 IoT@ Work and the Royal
   Society, as well as the Verimag laboratory in France for its hospitality
   during the time when a large part of this paper was written.; S. Yovine
   would like to acknowledge the partial financial support provided by
   STIC-AmSud TAPIOCA, BID-ANPCyT PICTO-CRUP 31352, PICT-PAE 02287 and
   MinPlan GAMBETAS projects, and MINCyT "Cesar Milstein" grant.
CR Altisen K, 2002, REAL-TIME SYST, V23, P55, DOI 10.1023/A:1015346419267
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   [Anonymous], AVATARS CONSUME MUCH
   [Anonymous], 1997, WHAT REALLY HAPPENED
   Asarin E, 1995, LECT NOTES COMPUT SC, V999, P1
   Assayad I, 2005, LECT NOTES COMPUT SC, V3785, P204
   Barroso LA, 2003, IEEE MICRO, V23, P22, DOI 10.1109/MM.2003.1196112
   BARUAH SK, 1990, REAL-TIME SYST, V2, P301, DOI 10.1007/BF01995675
   Bertin V, 2002, LECT NOTES COMPUT SC, V2491, P382
   Bordin M, 2008, ECRTS 2008: PROCEEDINGS OF THE 20TH EUROMICRO CONFERENCE ON REAL-TIME SYSTEMS, P135, DOI 10.1109/ECRTS.2008.12
   Bruno E., 2007, JAVA RTS REAL TIME E
   Closse E., 2001, LNCS, V2102
   Combaz J, 2008, REAL-TIME SYST, V40, P1, DOI 10.1007/s11241-008-9049-2
   Coplien J, 1998, IEEE SOFTWARE, V15, P37, DOI 10.1109/52.730836
   Dobrin R, 2004, EUROMICRO, P144, DOI 10.1109/EMRTS.2004.1311016
   Fohler G, 2002, REAL-TIME SYST, V22, P5, DOI 10.1023/A:1013489610047
   Gansner ER, 2000, SOFTWARE PRACT EXPER, V30, P1203, DOI 10.1002/1097-024X(200009)30:11<1203::AID-SPE338>3.0.CO;2-N
   Garey M. R., 1977, SIAM Journal on Computing, V6, P416, DOI 10.1137/0206029
   Gauthier L., 2002, EXPRESSO RNTL PROJEC
   HARBOUR MG, 1994, IEEE T SOFTWARE ENG, V20, P13, DOI 10.1109/32.263752
   Henzinger TA, 2007, COMPUTER, V40, P32, DOI 10.1109/MC.2007.364
   Hoffmann G., 1991, CDC 91
   IEEE, 2001, 100312001 IEEE
   Isovic D., 2000, RTSS 00
   Joy B., 2000, JAVA LANGUAGE SPECIF, V2nd
   Kesten Y, 1999, INFORM COMPUT, V150, P209, DOI 10.1006/inco.1998.2774
   Klein M.H., 1993, PRACTITIONERS HDB RE
   Kloukinas C, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P14
   Kloukinas C, 2003, 15TH EUROMICRO CONFERENCE ON REAL-TIME SYSTEMS, PROCEEDINGS, P287, DOI 10.1109/EMRTS.2003.1212754
   Kloukinas C., 2003, LNCS, V2855
   Kwak H., 1998, RTSS 98
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Mok A.K., 1996, RTSS 96
   Real-Time for Java Expert Group, 2001, REAL TIM SPEC JAV
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   SHA L, 1990, IEEE T COMPUT, V39, P1175, DOI 10.1109/12.57058
   Tripakis S., 2002, EMSOFT 02
   Tripakis S., 1999, LNCS, V1708
   Tripakis S., 2001, EL NOTES TH COMP SCI, V55, P277
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
   Vicario E, 2001, IEEE T SOFTWARE ENG, V27, P728, DOI 10.1109/32.940727
   Wang Y, 2009, ACM SIGPLAN NOTICES, V44, P252, DOI 10.1145/1594834.1480913
   Weiss M., 1998, Languages, Compilers, and Tools for Embedded Systems. ACM SIGPLAN Workshop LCTES'98. Proceedings, P119, DOI 10.1007/BFb0057785
   Wong-Toi H, 1997, IEEE DECIS CONTR P, P4607, DOI 10.1109/CDC.1997.649708
   WONHAM WM, 1987, SIAM J CONTROL OPTIM, V25, P637, DOI 10.1137/0325036
NR 45
TC 0
Z9 0
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2011
VL 18
IS 1
BP 5
EP 38
DI 10.1007/s10515-010-0074-8
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 702CV
UT WOS:000285873100002
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Gay, G
   Menzies, T
   Davies, M
   Gundy-Burlet, K
AF Gay, Gregory
   Menzies, Tim
   Davies, Misty
   Gundy-Burlet, Karen
TI Automatically finding the control variables for complex system behavior
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Contrast-set learning; Search-based software engineering; Simulation;
   Optimization; Monte Carlo filtering
ID MODELS; RULES
AB Testing large-scale systems is expensive in terms of both time and money. Running simulations early in the process is a proven method of finding the design faults likely to lead to critical system failures, but determining the exact cause of those errors is still time-consuming and requires access to a limited number of domain experts. It is desirable to find an automated method that explores the large number of combinations and is able to isolate likely fault points.
   Treatment learning is a subset of minimal contrast-set learning that, rather than classifying data into distinct categories, focuses on finding the unique factors that lead to a particular classification. That is, they find the smallest change to the data that causes the largest change in the class distribution. These treatments, when imposed, are able to identify the factors most likely to cause a mission-critical failure. The goal of this research is to comparatively assess treatment learning against state-of-the-art numerical optimization techniques. To achieve this, this paper benchmarks the TAR3 and TAR4.1 treatment learners against optimization techniques across three complex systems, including two projects from the Robust Software Engineering (RSE) group within the National Aeronautics and Space Administration (NASA) Ames Research Center. The results clearly show that treatment learning is both faster and more accurate than traditional optimization methods.
C1 [Gay, Gregory; Menzies, Tim] W Virginia Univ, Morgantown, WV 26506 USA.
   [Davies, Misty; Gundy-Burlet, Karen] NASA, Ames Res Ctr, Moffett Field, CA 94035 USA.
C3 West Virginia University; National Aeronautics & Space Administration
   (NASA); NASA Ames Research Center
RP Gay, G (corresponding author), W Virginia Univ, Morgantown, WV 26506 USA.
EM greg@greggay.com; tim@menzies.us; misty.d.davies@nasa.gov;
   karen.gundy-burlet@nasa.gov
RI Menzies, Tim/X-7680-2019
OI Menzies, Tim/0000-0002-5040-3196; Davies, Misty/0000-0002-6245-9568;
   Gay, Gregory/0000-0001-6794-9585
FU National Aeronautics and Space Administration
FX This research was conducted at West Virginia University and the Ames
   Research Center under a contract with the National Aeronautics and Space
   Administration. Reference herein to any specific commercial product,
   process, or service by trade name, trademark, manufacturer, or
   otherwise, does not constitute or imply its endorsement by the United
   States Government.
CR ACEVEDO A, 2007, AIAA MOD SIM TECHN C, P2007
   Agrawal R., 1993, P 1993 ACM SIGMOD C
   [Anonymous], 1981, Practical Optimization
   [Anonymous], P 25 INT C SOFTW ENG
   [Anonymous], THESIS W VIRGINIA U
   [Anonymous], 1992, C4 5 PROGRAMS MACHIN
   [Anonymous], 1993, Proceedings of the 13th International Joint Conference on Artificial Intelligence
   Antoniol G, 2005, PROC IEEE INT CONF S, P357
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Austin PC, 2007, STAT MED, V26, P734, DOI 10.1002/sim.2580
   BASILI VR, 2002, P 24 INT C SOFTW ENG
   BAY S, 1999, P 5 INT C KNOWL DISC
   Bishop C.M., 2006, J ELECTRON IMAGING, V16, P049901, DOI DOI 10.1117/1.2819119
   BOEHM BW, 1988, IEEE T SOFTWARE ENG, V14, P1462, DOI 10.1109/32.6191
   BOETTICHER G, 2001, 2 INT WORKSH SOFT CO
   Breiman L, 1998, BIOMETRICS, DOI [10.1201/9781315139470, DOI 10.2307/2530946]
   Cai C. H., 1998, P INT DAT ENG APPL S
   Cleland-Huang J., 2006, P 14 IEEE INT REQUIR, P36
   Cornford SL, 2001, AEROSP CONF PROC, P441, DOI 10.1109/AERO.2001.931736
   Dechter R., 2003, Constraint Processing
   ERUHIMOV V, 2007, CONSTRUCTING HIGH DI, P414
   FEATHER M, 2008, IEEE SOFTWARE
   Fischer B, 2003, J FUNCT PROGRAM, V13, P483, DOI 10.1017/S0956796802004562
   Frank E., 1999, Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations
   Gay G, 2010, AUTOMAT SOFTW ENG, V17, P87, DOI 10.1007/s10515-009-0059-7
   Gigerenzer G, 1996, PSYCHOL REV, V103, P650, DOI 10.1037/0033-295X.103.4.650
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   GU J, 1997, DIMACS SERIES DISCRE, P19
   Gundy-Burlet K., 2009, AIAA Aerospace
   GUNDYBURLET K, 2007, 9 INT S ART INT ROB
   HOLTE RC, 1993, MACH LEARN, V11, P63, DOI 10.1023/A:1022631118932
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Hu Y., 2003, THESIS U BRIT COLUMB
   JING H, 2007, INFORM CONTROL AUTOM, V2, P71
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   KOHAVI R, 1997, ARTIF INTELL, V273, P324
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   MENZIES T, 2007, IEEE T SOFT ENG  JAN
   MENZIES T, 2007, IEEE T SOFTW ENG SEP
   MENZIES T, 2000, P ASE 2000
   MENZIES T, 2003, IEEE COMPUTER    NOV
   METROPOLIS N, 1953, J CHEM PHYS, V21, P1087, DOI 10.1063/1.1699114
   Oakley JE, 2004, J R STAT SOC B, V66, P751, DOI 10.1111/j.1467-9868.2004.05304.x
   ROSE KA, 1991, J FORECASTING, V10, P117, DOI 10.1002/for.3980100108
   Saltelli A, 2008, GLOBAL SENSITIVITY A, DOI DOI 10.1002/9780470725184.CH6
   Schumann J., 2008, P AUT SOFTW ENG 23 I
   Schumann J, 2009, AEROSP CONF PROC, P3136
   Scott EM, 2000, SENSITIVITY ANAL
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Sims C., 1999, MATLAB OPTIMIZATION
   SPEAR RC, 1994, WATER RESOUR RES, V30, P3159, DOI 10.1029/94WR01732
   Taylor BJ, 2005, IEEE IJCNN, P2915
   Torkkola K, 2006, STUD FUZZ SOFT COMP, V207, P297
   TOWELL GG, 1993, MACH LEARN, V13, P71, DOI 10.1023/A:1022683529158
   Turhan B., 2009, EMPIRICAL SOFTWARE E
   Tuv E, 2006, LECT NOTES COMPUT SC, V4224, P1048
   URIBE T, 1994, P 1 INT C CONSTR COM, P34
   Witten I. H., 2005, DATA MINING PRACTICA
NR 58
TC 15
Z9 21
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2010
VL 17
IS 4
BP 439
EP 468
DI 10.1007/s10515-010-0072-x
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 630EZ
UT WOS:000280257100004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Robbes, R
   Lanza, M
AF Robbes, Romain
   Lanza, Michele
TI Improving code completion with program history
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 23rd IEEE/ACM International Conference on Automated Software Engineering
CY SEP 15-16, 2008
CL LAquila, ITALY
SP IEEE, ACM
DE Software evolution; First-class changes; Integrated development
   environments; Code completion; Benchmark
AB Code completion is a widely used productivity tool. It takes away the burden of remembering and typing the exact names of methods or classes: As a developer starts typing a name, it provides a progressively refined list of candidates matching the name. However, the candidate list usually comes in alphabetic order, i.e., the environment is only second-guessing the name based on pattern matching, relying on human intervention to pick the correct one. Finding the correct candidate can thus be cumbersome or slower than typing the full name.
   We present an approach to improve code completion based on recorded program histories. We define a benchmarking procedure measuring the accuracy of a code completion engine and apply it to several completion algorithms on a dataset consisting of the history of several systems. Further, we use the change history data to improve the results offered by code completion tools. Finally, we propose an alternative interface for completion tools that we released to developers and evaluated.
C1 [Robbes, Romain] Univ Chile, PLEIAD Lab, Dept Comp Sci, Santiago, Chile.
   [Lanza, Michele] Univ Lugano, REVEAL Fac Informat, CH-6904 Lugano, Switzerland.
C3 Universidad de Chile; Universita della Svizzera Italiana
RP Robbes, R (corresponding author), Univ Chile, PLEIAD Lab, Dept Comp Sci, Blanco Encalada 2120,Of 308, Santiago, Chile.
EM rrobbes@dcc.uchile.cl; michele.lanza@usi.ch
RI Lanza, Michele/JNQ-9470-2023; Robbes, Romain/H-3771-2013
OI Lanza, Michele/0000-0003-4391-0197; Robbes, Romain/0000-0003-4569-6868
CR [Anonymous], CAMEL HAS TWO HUMPS
   [Anonymous], 2007, P IEEEACM INT C AUTO, DOI DOI 10.1145/1321631.1321646
   Arisholm E, 2007, IEEE T SOFTWARE ENG, V33, P65, DOI 10.1109/TSE.2007.17
   BAJRACHARYA S, 2006, OOPSLA 06, P681, DOI DOI 10.1145/1176617.1176671
   BRUCH M, 2009, ESEC FSE 09, P213, DOI DOI 10.1145/1595696.1595728
   Conradi R, 1998, ACM COMPUT SURV, V30, P232, DOI 10.1145/280277.280280
   Kersten Mik, 2006, P 14 ACM SIGSOFT INT, P1
   Lung J, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P191, DOI 10.1145/1368088.1368115
   MILLER GA, 1956, PSYCHOL REV, V63, P81, DOI 10.1037/h0043158
   MURPHY G, 2006, IEEE SOFTW
   Reiss SP, 2009, PROC INT CONF SOFTW, P243, DOI 10.1109/ICSE.2009.5070525
   Robbes R, 2007, LECT NOTES COMPUT SC, V4422, P27
   Robbes R, 2007, INT C PROGRAM COMPRE, P155
   Robbes R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P847, DOI 10.1145/1368088.1368219
   Sharon Y., 2007, THESIS U LUGANO
   Sim SE, 2003, PROC INT CONF SOFTW, P74, DOI 10.1109/ICSE.2003.1201189
   Sim SE, 2002, PROG COMPREHEN, P114, DOI 10.1109/WPC.2002.1021331
   WUYTS R, 2007, ROELTYPER FAST TYPE
   [No title captured]
NR 19
TC 50
Z9 60
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2010
VL 17
IS 2
SI SI
BP 181
EP 212
DI 10.1007/s10515-010-0064-x
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 573FB
UT WOS:000275892700004
DA 2024-07-18
ER

PT J
AU Holzmann, GJ
   Joshi, R
   Groce, A
AF Holzmann, Gerard J.
   Joshi, Rajeev
   Groce, Alex
TI Model driven code checking
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software verification; Logic model checking; Spin model checker;
   Embedded C code
AB Model checkers were originally developed to support the formal verification of high-level design models of distributed system designs. Over the years, they have become unmatched in precision and performance in this domain. Research in model checking has meanwhile moved towards methods that allow us to reason also about implementation level artifacts (e.g., software code) directly, instead of hand-crafted representations of those artifacts. This does not mean that there is no longer a place for the use of high-level models, but it does mean that such models are used in a different way today. In the approach that we describe here, high-level models are used to represent the environment for which the code is to be verified, but not the application itself. The code of the application is now executed as is by the model checker, while using powerful forms of abstraction on-the-fly to build the abstract state space that guides the verification process. This model-driven code checking method allows us to verify implementation level code efficiently for high-level safety and liveness properties. In this paper, we give an overview of the methodology that supports this new paradigm of code verification.
C1 [Holzmann, Gerard J.; Joshi, Rajeev; Groce, Alex] CALTECH, Jet Prop Lab, Lab Reliable Software, Pasadena, CA 91109 USA.
C3 National Aeronautics & Space Administration (NASA); NASA Jet Propulsion
   Laboratory (JPL); California Institute of Technology
RP Holzmann, GJ (corresponding author), CALTECH, Jet Prop Lab, Lab Reliable Software, 4800 Oak Grove Dr, Pasadena, CA 91109 USA.
EM gerard@spinroot.com
RI Jaafar, Mohamad Farid/B-4563-2010
FU NASA's Exploration Technology Development Program (ETDP)
FX The research described in this paper was carried out at the Jet
   Propulsion Laboratory, California Institute of Technology, under a
   contract with the National Aeronautics and Space Administration. The
   work was supported in part by NASA's Exploration Technology Development
   Program (ETDP) on Reliable Software Engineering.
CR GROCE A, 2008, P VMCAI 2008
   GROCE A, 2008, P 6 INT WORKSH DYN A
   Holzmann GJ, 2007, IEEE T SOFTWARE ENG, V33, P659, DOI 10.1109/TSE.2007.70724
   Holzmann GJ, 1999, INT FED INFO PROC, V28, P481
   HOLZMANN GJ, 2000, P SPIN 2000
   HOLZMANN GJ, 2004, P SPIN 2004
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   HOLZMANN GJ, 2008, P 15 SPIN WORKSH UCL
   ZAKS A, 2008, P 15 SPIN WORKSH UCL
NR 9
TC 16
Z9 17
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 283
EP 297
DI 10.1007/s10515-008-0033-9
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800004
DA 2024-07-18
ER

PT J
AU Hall, RJ
AF Hall, Robert J.
TI A method and tools for large scale scenarios
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE scenario; large scale; requirements engineering; tools; automated
   software engineering
AB Formal scenarios have many uses in requirements engineering, validation, performance modeling, and test generation. Many tools and methodologies can handle scenarios when the number of steps (interleaved inputs and outputs of the target system) is reasonably small. However, scenario based techniques do not scale well with the number of steps, number of actors, and complexity of behaviors and system interactions to be specified in the scenario. First, it is impractically tedious and error-prone to specify thousands of input steps and corresponding expected outputs. Second, even if one can write down such large scale scenarios, confidence in their correctness is naturally low. Third, complex systems requiring large scale scenarios tend to require many such scenarios to adequately cover the behavior space. This paper describes the motivations for and problems of large scale scenarios, as well as the LSS method, which uses automated and semi-automated techniques in describing, maintaining, communicating, and using large scale scenarios in requirements engineering. The method is illustrated in two widely divergent application domains: military live training instrumentation and electronic mail servers. A case study demonstrates the practical and beneficial use of LSS in architectural modeling of a complex, real-world system design.
C1 AT&T Labs Res, Florham Pk, NJ 07932 USA.
C3 AT&T
RP Hall, RJ (corresponding author), AT&T Labs Res, Florham Pk, NJ 07932 USA.
EM bob-3Scenarios-@channels.research.att.com
CR [Anonymous], 2004, Ad Hoc Wireless Networks Architectures and Protocols
   Hall RJ, 2000, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VI, P67
   HALL RJ, 2002, AUTOM SOFTW ENG, V9
   HALL RJ, 2005, AUTOM SOFTW ENG, V12
   HALL RJ, 2005, P 2005 IEEE MIL COMM
   HALL RJ, 2004, P 19 IEEE C AUT SOFT
   Harel David., 2003, COME LETS PLAY
   Heitmeyer C, 1998, LECT NOTES COMPUT SC, V1427, P526, DOI 10.1007/BFb0028775
   Holzmann G. J., 1991, Design and Validation of Comp. Protocols, V512
   IMIELINSKI T, 1997, COMMUN ACM
   Mauw S, 1997, SDL '97 - TIME FOR TESTING, P291, DOI 10.1016/B978-044482816-3/50020-4
   MUSA JD, 1993, IEEE SOFTWARE, V10, P14, DOI 10.1109/52.199724
   RICHARDSON DJ, 1992, P 14 INT C SOFTW ENG
   Uchitel S, 2004, ACM T SOFTW ENG METH, V13, P37, DOI 10.1145/1005561.1005563
   UCHITEL S, 2002, P 10 INT C FDN SOFTW
NR 15
TC 3
Z9 3
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2008
VL 15
IS 2
BP 113
EP 148
DI 10.1007/s10515-008-0026-8
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308YL
UT WOS:000256426700001
DA 2024-07-18
ER

PT J
AU Akbar, MA
   Khan, AA
   Rafi, S
AF Akbar, Muhammad Azeem
   Khan, Arif Ali
   Rafi, Saima
TI A systematic decision-making framework for tackling quantum software
   engineering challenges
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Quantum computing; Quantum software engineering (QSE); Challenging
   factors; Prioritization
ID FUZZY TOPSIS; MANAGEMENT; IMPLEMENTATION; QUALITY; DEVOPS
AB Quantum computing systems harness the power of quantum mechanics to execute computationally demanding tasks more effectively than their classical counterparts. This has led to the emergence of Quantum Software Engineering (QSE), which focuses on unlocking the full potential of quantum computing systems. As QSE gains prominence, it seeks to address the evolving challenges of quantum software development by offering comprehensive concepts, principles, and guidelines. This paper aims to identify, prioritize, and develop a systematic decision-making framework of the challenging factors associated with QSE process execution. We conducted a literature survey to identify the challenging factors associated with QSE process and mapped them into 7 core categories. Additionally, we used a questionnaire survey to collect insights from practitioners regarding these challenges. To examine the relationships between core categories of challenging factors, we applied Interpretive Structure Modeling (ISM). Lastly, we applied fuzzy TOPSIS to rank the identified challenging factors concerning to their criticality for QSE process. We have identified 22 challenging factors of QSE process and mapped them to 7 core categories. The ISM results indicate that the 'resources' category has the most decisive influence on the other six core categories of the identified challenging factors. Moreover, the fuzzy TOPSIS indicates that 'complex programming', 'limited software libraries', 'maintenance complexity', 'lack of training and workshops', and 'data encoding issues' are the highest priority challenging factor for QSE process execution. Organizations using QSE could consider the identified challenging factors and their prioritization to improve their QSE process.
C1 [Akbar, Muhammad Azeem] Lappeenranta Lahti Univ Technol, Software Engn Dept, Lappeenranta 53851, Finland.
   [Khan, Arif Ali] Univ Oulu, M3S Empir Software Engn Res Unit, Oulu 90014, Finland.
   [Rafi, Saima] Edinburgh Napier Univ, Sch Comp & Engn & Built Environm, Edinburgh, Scotland.
C3 Lappeenranta-Lahti University of Technology LUT; University of Oulu;
   Edinburgh Napier University
RP Khan, AA (corresponding author), Univ Oulu, M3S Empir Software Engn Res Unit, Oulu 90014, Finland.
EM azeem.akbar@lut.fi; arif.khan@oulu.fi
RI Khan, Arif Ali/ABG-2862-2020
OI Khan, Arif Ali/0000-0002-8479-1481
FU University of Oulu including Oulu University Hospital
FX Open Access funding provided by University of Oulu including Oulu
   University Hospital.
CR Agarwal A, 2017, Jindal J Business Res, V6, P44
   Agarwal P., 2021, inBignData Analytics, P113
   Akbar M.A., 2022, Classical to quantum software migration journey begins: a conceptual readiness model
   Akbar M.A., 2022, arXiv, DOI [10.48550/arxiv.2211.13990, DOI 10.48550/ARXIV.2211.13990]
   Akbar MA, 2022, LECT NOTES COMPUT SC, V13709, P563, DOI 10.1007/978-3-031-21388-5_42
   Akbar MA, 2022, INFORM SOFTWARE TECH, V147, DOI 10.1016/j.infsof.2022.106894
   Akbar MA, 2020, IEEE ACCESS, V8, P203070, DOI 10.1109/ACCESS.2020.3035829
   Akbar MA, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2292
   Akbar MA, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2275
   Akbar MA, 2020, J SOFTW-EVOL PROC, V32, DOI [10.1002/smr.2246, 10.1016/j.joco.2019.10.002]
   Akbar MA, 2019, J COMPUT LANG, V51, P112, DOI 10.1016/j.cola.2018.12.005
   Akbar MA, 2018, IEEE ACCESS, V6, P8066, DOI 10.1109/ACCESS.2018.2805702
   Aksu M., 2021, APPL SOFT COMPUT, V201, P103944
   Alderman AK, 2010, PLAST RECONSTR SURG, V126, P1381, DOI 10.1097/PRS.0b013e3181ea44f9
   Ali Shaukat, 2022, Communications of the ACM, V65, P84, DOI 10.1145/3512340
   Ali Shaukat, 2020, APEQS 2020: Proceedings of the 1st SIGSOFT International Workshop on Architectures and Paradigms for Engineering Quantum Software, P14, DOI 10.1145/3412451.3428499
   Ali S, 2016, J SYST SOFTWARE, V117, P402, DOI 10.1016/j.jss.2016.03.069
   Altman E, 2021, PRX QUANTUM, V2, DOI 10.1103/PRXQuantum.2.017003
   [Anonymous], 2002, ACM SIGSOFT SOFTW EN, DOI DOI 10.1145/571681.571686
   Arias D, 2023, NEUROCOMPUTING, V538, DOI 10.1016/j.neucom.2023.03.060
   Attri R, 2013, INT J SYST ASSUR ENG, V4, P365, DOI 10.1007/s13198-012-0122-9
   Attri Rajesh., 2013, RES J MANAGEMENT SCI, V2, P3
   Awschalom D, 2021, PRX QUANTUM, V2, DOI 10.1103/PRXQuantum.2.017002
   Belkhir Maria, 2022, 2022 Ninth International Conference on Software Defined Systems (SDS), P1, DOI 10.1109/SDS57574.2022.10062870
   Botsinis P, 2016, SCI REP-UK, V6, DOI 10.1038/srep38095
   Bova F, 2021, EPJ QUANTUM TECHNOL, V8, DOI 10.1140/epjqt/s40507-021-00091-1
   Bozbura FT, 2007, EXPERT SYST APPL, V32, P1100, DOI 10.1016/j.eswa.2006.02.006
   Bravyi S, 2022, J APPL PHYS, V132, DOI 10.1063/5.0082975
   Chen TY, 2008, FUZZY SET SYST, V159, P1410, DOI 10.1016/j.fss.2007.11.004
   Coles PJ, 2017, REV MOD PHYS, V89, DOI 10.1103/RevModPhys.89.015002
   Coveney PV., 2019, QUANTUM COMPUTING PR
   Cruz-Lemus J. A., 2022, QUANTUM SOFTWARE ENG, P229
   de la Barrera A.G., 2022, Quantum Software Engineering, P167
   De Stefano M, 2022, J SYST SOFTWARE, V190, DOI 10.1016/j.jss.2022.111326
   Devitt SJ, 2013, REP PROG PHYS, V76, DOI 10.1088/0034-4885/76/7/076001
   El Aoun MR, 2021, PROC IEEE INT CONF S, P343, DOI 10.1109/ICSME52107.2021.00037
   Fingerhuth M, 2018, PLOS ONE, V13, DOI 10.1371/journal.pone.0208561
   Blackburn TG, 2018, Arxiv, DOI arXiv:1804.11085
   Gambetta JM, 2017, NPJ QUANTUM INFORM, V3, DOI 10.1038/s41534-016-0004-0
   Gambetta JM., 2018, NPJ QUANT INFORM, V4, P1
   Gao Q., 2020, J AMBIENT INTELL HUM, V11, P3391
   Gill SS, 2022, SOFTWARE PRACT EXPER, V52, P66, DOI 10.1002/spe.3039
   Guzik V, 2015, I C APPL INF COMM TE, P583, DOI 10.1109/ICAICT.2015.7338628
   Hadfield S, 2019, Arxiv, DOI arXiv:1709.03489
   Heim B, 2020, NAT REV PHYS, V2, P709, DOI 10.1038/s42254-020-00245-7
   Helsen J., 2020, QUANTUM, V4, P306
   Hsieh HF, 2005, QUAL HEALTH RES, V15, P1277, DOI 10.1177/1049732305276687
   Huang CW., 2021, J SYST SOFTW, V173, P110956
   Ikart E.M., 2019, Asian Journal of Social Science Studies, V4, P1, DOI DOI 10.20849/AJSSS.V4I2.565
   Kannan D, 2014, EUR J OPER RES, V233, P432, DOI 10.1016/j.ejor.2013.07.023
   Kannan G, 2009, RESOUR CONSERV RECY, V54, P28, DOI 10.1016/j.resconrec.2009.06.004
   Keshta I, 2017, IEEE ACCESS, V5, P24162, DOI 10.1109/ACCESS.2017.2764490
   Khan A.A., 2022, Software architecture for quantum computing systems-a systematic review
   Khan AA, 2023, J SYST SOFTWARE, V201, DOI 10.1016/j.jss.2023.111682
   Khan AA, 2023, IEEE T COMPUT SOC SY, V10, P2971, DOI 10.1109/TCSS.2023.3251729
   Khan AA, 2021, APPL SOFT COMPUT, V102, DOI 10.1016/j.asoc.2021.107090
   Khan AA, 2019, APPL SOFT COMPUT, V83, DOI 10.1016/j.asoc.2019.105648
   Khan R. A., 2023, EVALUATION REQUIREME
   Killoran N, 2018, Arxiv, DOI arXiv:1806.06871
   Kitchenham B., 2007, GUIDELINES PERFORMIN
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Krohling RA, 2011, EXPERT SYST APPL, V38, P4190, DOI 10.1016/j.eswa.2010.09.081
   Lanzagorta M., 2020, QUANTUM COMPUTING DE
   Lenarduzzi V, 2016, 2016 42ND EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA), P112, DOI 10.1109/SEAA.2016.56
   Liao CN, 2011, EXPERT SYST APPL, V38, P10803, DOI 10.1016/j.eswa.2011.02.031
   Lima FR, 2014, APPL SOFT COMPUT, V21, P194, DOI 10.1016/j.asoc.2014.03.014
   Hevia JL, 2022, SOFTWARE PRACT EXPER, V52, P1517, DOI 10.1002/spe.3064
   MacQuarrie ER, 2020, NAT REV PHYS, V2, P596, DOI 10.1038/s42254-020-00247-5
   Mahmood S., 2022, INFORM TECHNOL MANAG, DOI [10.1007/s10799-022-00364-ws, DOI 10.1007/S10799-022-00364-WS]
   Mahmood S, 2017, INFORM SOFTWARE TECH, V91, P102, DOI 10.1016/j.infsof.2017.06.009
   McCaskey A, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING (ICRC), P154
   Mintz TM, 2020, ACM J EMERG TECH COM, V16, DOI 10.1145/3380964
   Mitarai K, 2018, PHYS REV A, V98, DOI 10.1103/PhysRevA.98.032309
   Moguel E., 2020, Q SET QCE, P5
   Moguel E, 2022, SOFTWARE QUAL J, V30, P983, DOI 10.1007/s11219-022-09589-y
   Mohsin M, 2019, ENVIRON SCI POLLUT R, V26, P22494, DOI 10.1007/s11356-019-05564-6
   Moll N., 2021, NPJ QUANT INFORM, V7, P1
   Mykhailova M., 2021, P 2 QUANTUM SOFTWARE, P81
   Nagori V., 2023, INT J RES ENG SCI MA, V6, P52
   Netti A, 2020, Arxiv, DOI arXiv:1910.06156
   Niazi M, 2016, INT J PROJ MANAG, V34, P1553, DOI 10.1016/j.ijproman.2016.08.008
   Niazi M, 2015, ARAB J SCI ENG, V40, P845, DOI 10.1007/s13369-015-1586-0
   Niazi M, 2012, J SOFTW-EVOL PROC, V24, P877, DOI 10.1002/smr.543
   Nielsen M. A., 2010, QUANTUM COMPUTATION, DOI [10.1017/cbo9780511976667, DOI 10.1017/CBO9780511976667]
   O'Riordan D., 2019, IEEE SOFTWARE, V36, P15
   Orus Roman, 2019, Reviews in Physics, V4, P115, DOI 10.1016/j.revip.2019.100028
   Pan J., 2020, INF SOFTW TECHNOL, V126, P106349
   Pandey D., 2010, Proceedings of 2010 International Conference on Advances in Recent Technologies in Communication and Computing (ARTCom 2010), P287, DOI 10.1109/ARTCom.2010.24
   Pérez-Castillo R, 2021, ADV ENG SOFTW, V151, DOI 10.1016/j.advengsoft.2020.102933
   Piattini Mario, 2020, ACM SIGSOFT Software Engineering Notes, V45, P12, DOI 10.1145/3402127.3402131
   Poczatek A., QUANTUM INFORM SCI I
   Poonia RC, 2016, J INFORM OPTIM SCI, V37, P279, DOI 10.1080/02522667.2015.1131024
   Qiskit, 2021, Qiskit global summer school on quantum machine learning
   Rafi S, 2022, J SOFTW-EVOL PROC, V34, DOI 10.1002/smr.2448
   Rafi S, 2020, IEEE ACCESS, V8, P46958, DOI 10.1109/ACCESS.2020.2976803
   Raj Tilak, 2011, International Journal of Productivity and Quality Management, V8, P153, DOI 10.1504/IJPQM.2011.041844
   Ravi V, 2005, TECHNOL FORECAST SOC, V72, P1011, DOI 10.1016/j.techfore.2004.07.002
   Sage A.P., 1977, Methodology for Large-Scale Systems
   SANCHEZ ME, 1992, PUBLIC OPIN QUART, V56, P206, DOI 10.1086/269311
   Saris WE, 2014, WILEY SER SURV METH, P1, DOI 10.1002/9781118634646
   Sarkar A., 2022, arXiv, DOI [10.48550/arxiv.2212.00619, DOI 10.48550/ARXIV.2212.00619]
   Serrano MA, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3548679
   Shameem M, 2020, IET SOFTW, V14, P389, DOI 10.1049/iet-sen.2019.0196
   Shameem M, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1979
   SHARMA HD, 1995, TECHNOL FORECAST SOC, V48, P285, DOI 10.1016/0040-1625(94)00066-6
   Shaydulin R., 2020, Proceedings of the IEEE/ACM 42nd International Conference on Software Engineering Workshops, P451
   Shi YN, 2020, P IEEE, V108, P1353, DOI 10.1109/JPROC.2020.2994765
   Singh R., 2020, INT J NETW SEC, V22, P1046
   Singh RK, 2011, ENG APPL ARTIF INTEL, V24, P437, DOI 10.1016/j.engappai.2010.09.006
   Sodhi B, 2021, 2021 IEEE 18TH INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA), P80, DOI 10.1109/ICSA51549.2021.00016
   Soni M, 2016, IEEE CONF CLOUD COMP, P85, DOI 10.1109/CCEM.2015.29
   Sun J., 2020, J AMBIENT INTELL HUM, V11, P5279
   Teo KH, 2021, J APPL PHYS, V130, DOI 10.1063/5.0061555
   Veryazov V, 2004, INT J QUANTUM CHEM, V100, P626, DOI 10.1002/qua.20166
   Cross AW, 2017, Arxiv, DOI arXiv:1707.03429
   WARFIELD JN, 1974, IEEE T SYST MAN CYB, VSMC4, P81, DOI 10.1109/TSMC.1974.5408524
   Weder B., 2022, Quantum Software Engineering, P61, DOI DOI 10.1007/978-3-031-05324-54
   Wohlin C., 2014, INT C EVALUATION ASS, P1
   Yigitbasioglu OM., 2021, IEEE SOFTWARE, V38, P100
   YOON KS, 1985, INT J PROD RES, V23, P345, DOI 10.1080/00207548508904712
   Zhao Jianjun, 2020, arXiv
   Zidan M, 2021, RESULTS PHYS, V21, DOI 10.1016/j.rinp.2020.103536
   Zouggari A, 2012, ENG APPL ARTIF INTEL, V25, P507, DOI 10.1016/j.engappai.2011.10.012
NR 123
TC 4
Z9 4
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 22
DI 10.1007/s10515-023-00389-7
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N4IU7
UT WOS:001036676000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Zhang, B
   Zhang, HY
   Le, VH
   Moscato, P
   Zhang, AZ
AF Zhang, Bo
   Zhang, Hongyu
   Le, Van-Hoang
   Moscato, Pablo
   Zhang, Aozhong
TI Semi-supervised and unsupervised anomaly detection by mining numerical
   workflow relations from system logs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Logs; Anomaly detection; Numerical relations; Log analysis
AB Large-scale software-intensive systems often generate logs for troubleshooting purpose. The system logs are semi-structured text messages that record the internal status of a system at runtime. In this paper, we propose ADR (Anomaly Detection by workflow Relations), which can mine numerical relations from logs and then utilize the discovered relations to detect system anomalies. Firstly the raw log entries are parsed into sequences of log events and transformed to an extended event-count-matrix. The relations among the matrix columns represent the relations among the system events in workflows. Next, ADR evaluates the matrix's nullspace that corresponds to the linearly dependent relations of the columns. Anomalies can be detected by evaluating whether or not the logs violate the mined relations. We design two types of ADR: sADR (for semi-supervised learning) and uADR (for unsupervised learning). We have evaluated them on four public log datasets. The experimental results show that ADR can extract the workflow relations from log data, and is effective for log-based anomaly detection in both semi-supervised and unsupervised manners.
C1 [Zhang, Bo; Zhang, Hongyu; Le, Van-Hoang; Moscato, Pablo] Univ Newcastle, Sch Informat & Phys Sci, Newcastle, NSW, Australia.
   [Zhang, Aozhong] Sun Yat sen Univ, Sch Math, Zhuhai, Peoples R China.
C3 University of Newcastle; Sun Yat Sen University
RP Zhang, HY (corresponding author), Univ Newcastle, Sch Informat & Phys Sci, Newcastle, NSW, Australia.
EM c3288930@uon.edu.au; hongyu.zhang@newcastle.edu.au;
   vanhoang.le@uon.edu.au; pablo.moscato@newcastle.edu.au
RI Le, Van Hoang/JKI-4668-2023
OI Le, Van-Hoang/0000-0002-7651-9154
FU Australian Research Council [DP200102940, DP220103044]; Australian
   Research Council [DP200102940] Funding Source: Australian Research
   Council
FX This research is supported by Australian Research Council's Discovery
   Projects (DP200102940 and DP220103044).
CR [Anonymous], 2009, Introduction to Probability and Statistics for Engineers and Scientists
   Astekin M, 2018, IEEE INT CONF BIG DA, P2071, DOI 10.1109/BigData.2018.8621967
   Bertero C, 2017, PROC INT SYMP SOFTW, P351, DOI 10.1109/ISSRE.2017.43
   Bodík P, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P111
   Breier J, 2017, WIRELESS PERS COMMUN, V94, P497, DOI 10.1007/s11277-015-3128-1
   Chen M, 2004, INTERNATIONAL CONFERENCE ON AUTONOMIC COMPUTING, PROCEEDINGS, P36, DOI 10.1109/ICAC.2004.1301345
   Du M, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1285, DOI 10.1145/3133956.3134015
   Du M, 2016, IEEE DATA MINING, P859, DOI [10.1109/ICDM.2016.0103, 10.1109/ICDM.2016.160]
   Farshchi M, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P24, DOI 10.1109/ISSRE.2015.7381796
   Fu QA, 2009, IEEE DATA MINING, P149, DOI 10.1109/ICDM.2009.60
   Hamooni H, 2016, CIKM'16: PROCEEDINGS OF THE 2016 ACM CONFERENCE ON INFORMATION AND KNOWLEDGE MANAGEMENT, P1573, DOI 10.1145/2983323.2983358
   He PJ, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS 2017), P33, DOI 10.1109/ICWS.2017.13
   He SL, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P60, DOI 10.1145/3236024.3236083
   He SL, 2016, PROC INT SYMP SOFTW, P207, DOI 10.1109/ISSRE.2016.21
   Jiang ZM, 2008, J SOFTW MAINT EVOL-R, V20, P249, DOI 10.1002/smr.374
   Kruegel Christopher., 2003, P 10 ACM C COMPUTER, P251
   Le VH, 2022, PROC INT CONF SOFTW, P1356, DOI 10.1145/3510003.3510155
   Li T, 2017, KDD'17: PROCEEDINGS OF THE 23RD ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1547, DOI 10.1145/3097983.3098022
   Liang YL, 2007, IEEE DATA MINING, P583, DOI 10.1109/ICDM.2007.46
   Lin QW, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P102, DOI 10.1145/2889160.2889232
   Liu FT, 2008, IEEE DATA MINING, P413, DOI 10.1109/ICDM.2008.17
   Lou J. G., 2010, P 16 ACM SIGKDD INT, P613, DOI [10.1145/1835804.1835883, DOI 10.1145/1835804.1835883]
   Makanju A, 2012, IEEE T KNOWL DATA EN, V24, P1921, DOI 10.1109/TKDE.2011.138
   Makanju A, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1255
   Mariani Leonardo, 2008, 2008 IEEE International Symposium on Software Reliability Engineering, P117, DOI 10.1109/ISSRE.2008.48
   Meng WB, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4739
   Meng WB, 2021, IEEE T NETW SERV MAN, V18, P1870, DOI 10.1109/TNSM.2021.3055425
   Nedelkoski S, 2020, Arxiv, DOI arXiv:2008.09340
   Oliner A, 2007, I C DEPEND SYS NETWO, P575, DOI 10.1109/DSN.2007.103
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Strang G., 2006, Linear Algebra and Its Applications, V4th edn.
   Tomas M., 2013, arXiv, DOI DOI 10.48550/ARXIV.1310.4546
   van der Walt S, 2011, COMPUT SCI ENG, V13, P22, DOI 10.1109/MCSE.2011.37
   Le VH, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P492, DOI 10.1109/ASE51524.2021.9678773
   Virtanen P, 2020, NAT METHODS, V17, P261, DOI 10.1038/s41592-019-0686-2
   Xu W, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P117
   Yin K, 2020, PROC IEEE INT CONF S, P667, DOI 10.1109/ICSME46990.2020.00069
   Zhang B, 2020, SYM REL DIST SYST, P195, DOI 10.1109/SRDS51746.2020.00027
   Zhang X, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P807, DOI 10.1145/3338906.3338931
   Zhu JM, 2023, Arxiv, DOI arXiv:2008.06448
   Zhu JM, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P121, DOI 10.1109/ICSE-SEIP.2019.00021
   Zhu JM, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P415, DOI 10.1109/ICSE.2015.60
NR 42
TC 3
Z9 3
U1 0
U2 21
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2023
VL 30
IS 1
AR 4
DI 10.1007/s10515-022-00370-w
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6T1SH
UT WOS:000893461300001
DA 2024-07-18
ER

PT J
AU Alhefdhi, A
   Dam, HK
   Nugroho, YS
   Hata, H
   Ishio, T
   Ghose, A
AF Alhefdhi, Abdulaziz
   Dam, Hoa Khanh
   Nugroho, Yusuf Sulistyo
   Hata, Hideaki
   Ishio, Takashi
   Ghose, Aditya
TI A framework for conditional statement technical debt identification and
   description
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software analytics; Self-admitted technical debt; Software
   documentation; Software quality; Machine learning; Conditional
   statements
ID SPACE; MODEL
AB Technical Debt occurs when development teams favour short-term operability over long-term stability. Since this places software maintainability at risk, technical debt requires early attention to avoid paying for accumulated interest. Most of the existing work focuses on detecting technical debt using code comments, known as Self-Admitted Technical Debt (SATD). However, there are many cases where technical debt instances are not explicitly acknowledged but deeply hidden in the code. In this paper, we propose a framework that caters for the absence of SATD comments in code. Our Self-Admitted Technical Debt Identification and Description (SATDID) framework determines if technical debt should be self-admitted for an input code fragment. If that is the case, SATDID will automatically generate the appropriate descriptive SATD comment that can be attached with the code. While our approach is applicable in principle to any type of code fragments, we focus in this study on technical debt hidden in conditional statements, one of the most TD-carrying parts of code. We explore and evaluate different implementations of SATDID. The evaluation results demonstrate the applicability and effectiveness of our framework over multiple benchmarks. Comparing with the results from the benchmarks, our approach provides at least 21.35, 59.36, 31.78, and 583.33% improvements in terms of Precision, Recall, F-1, and Bleu-4 scores, respectively. In addition, we conduct a human evaluation to the SATD comments generated by SATDID. In 1-5 and 0-5 scales for Acceptability and Understandability, the total means achieved by our approach are 3.128 and 3.172, respectively.
C1 [Alhefdhi, Abdulaziz; Dam, Hoa Khanh; Ghose, Aditya] Univ Wollongong, Sch Comp & Informat Technol, Wollongong, NSW 2522, Australia.
   [Nugroho, Yusuf Sulistyo] Univ Muhammadiyah Surakarta, Tekn Informat, Surakarta 57102, Jawa Tengah, Indonesia.
   [Hata, Hideaki] Shinshu Univ, Fac Engn, Wakasato, Nagano 3808553, Japan.
   [Ishio, Takashi] Nara Inst Sci & Technol, Div Informat Sci, Ikoma, Nara 6300192, Japan.
C3 University of Wollongong; Universitas Muhammadiyah Surakarta; Shinshu
   University; Nara Institute of Science & Technology
RP Alhefdhi, A (corresponding author), Univ Wollongong, Sch Comp & Informat Technol, Wollongong, NSW 2522, Australia.
EM aa043@uowmail.edu.au; hoa@uow.edu.au; yusuf.nugroho@ums.ac.id;
   hata@shinshu-u.ac.jp; ishio@is.naist.jp; aditya@uow.edu.au
RI Dam, Hoa Khanh/C-6058-2014; Nugroho, Yusuf Sulistyo/S-8200-2019
OI Nugroho, Yusuf Sulistyo/0000-0001-6391-0851; Ishio,
   Takashi/0000-0003-4106-699X; Alhefdhi, Abdulaziz/0000-0001-6162-6064
FU CAUL
FX Open Access funding enabled and organized by CAUL and its Member
   Institutions.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Aggarwal Charu C, 2012, A survey of text clustering algorithms, P163, DOI [10.1007/978-1-4614-3223-4, DOI 10.1007/978-1-4614-3223-46]
   Aniche M, 2018, EMPIR SOFTW ENG, V23, P2121, DOI 10.1007/s10664-017-9540-2
   [Anonymous], Scikit learn - cross-validation: evaluating estimator performance
   [Anonymous], 2002, P 40 ANN M ASS COMP
   Bahdanau D, 2016, Arxiv, DOI [arXiv:1409.0473, 10.48550/arXiv.1409.0473]
   Bavota G, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P315, DOI [10.1109/MSR.2016.040, 10.1145/2901739.2901742]
   Bingham E., 2001, KDD-2001. Proceedings of the Seventh ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, P245, DOI 10.1145/502512.502546
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Brown Nanette, 2010, P FSE SDP WORKSH FUT, P47
   Cho KYHY, 2014, Arxiv, DOI [arXiv:1406.1078, DOI 10.3115/V1/D14-1179, 10.48550/ARXIV.1406.1078, DOI 10.48550/ARXIV.1406.1078]
   Choetkiertikul M, 2019, IEEE T SOFTWARE ENG, V45, P637, DOI 10.1109/TSE.2018.2792473
   Chollet F., 10 MINUTE INTRO SEQU
   Cunningham W., 1993, OOPS Messenger, V4, P29
   Farias MAD, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 1 (ICEIS), P369, DOI 10.5220/0005914503690378
   Farias MAD, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P25, DOI 10.1109/MTD.2015.7332621
   Freitag M, 2017, Arxiv, DOI arXiv:1702.01806
   Gal Y, 2016, ADV NEUR IN, V29
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Hata H., P 41 ACMIEEE INT C S
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Hu X, 2018, INT C PROGRAM COMPRE, P200, DOI 10.1145/3196321.3196334
   Huang Q, 2018, EMPIR SOFTW ENG, V23, P418, DOI 10.1007/s10664-017-9522-4
   Joachims, 2001, P 24 ANN INT ACM SIG, P128, DOI [DOI 10.1145/383952.383974, 10.1145/383952.383974]
   Joachims Thorsten, 1998, EUROPEAN C MACHINE L, P137, DOI 10.1007/
   Kaufman S, 2012, ACM T KNOWL DISCOV D, V6, DOI 10.1145/2382577.2382579
   Kibriya AM, 2004, LECT NOTES ARTIF INT, V3339, P488
   Kingma D. P., 2014, arXiv
   Kruchten P., 2019, Managing Technical Debt
   Lim E, 2012, IEEE SOFTWARE, V29, P22, DOI 10.1109/MS.2012.130
   Liu ZX, 2018, IEEE INT CONF AUTOM, P373, DOI 10.1145/3238147.3238190
   Luong MT, 2015, Arxiv, DOI arXiv:1508.04025
   Maipradit R, 2020, IEEE INT WORK C SO, P54, DOI 10.1109/SCAM51674.2020.00011
   Maipradit R, 2020, EMPIR SOFTW ENG, V25, P3770, DOI 10.1007/s10664-020-09854-3
   Maldonado ED, 2017, PROC IEEE INT CONF S, P238, DOI 10.1109/ICSME.2017.8
   Maldonado ED, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P9, DOI 10.1109/MTD.2015.7332619
   Maldonado ED, 2017, IEEE T SOFTWARE ENG, V43, P1044, DOI 10.1109/TSE.2017.2654244
   Marcilio D, 2019, INT C PROGRAM COMPRE, P209, DOI 10.1109/ICPC.2019.00040
   Martínez M, 2015, EMPIR SOFTW ENG, V20, P176, DOI 10.1007/s10664-013-9282-8
   Matsumoto M., 1998, ACM Transactions on Modeling and Computer Simulation, V8, P3, DOI 10.1145/272991.272995
   McCallum A., 1998, AAAI 98 WORKSH LEARN, V752, P41, DOI DOI 10.1109/TSMC.1985.6313426
   Munaiah N, 2017, EMPIR SOFTW ENG, V22, P3219, DOI 10.1007/s10664-017-9512-6
   Oda Y, 2015, IEEE INT CONF AUTOM, P574, DOI 10.1109/ASE.2015.36
   Potdar A, 2014, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2014.31
   Ren XX, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3324916
   Rennie J.D., 2003, Proceedings of the 20th International Conference on Machine Learning, P616
   Russell S., 2002, Artificial Intelligence: A Modern Approach, P125
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Srivastava N, 2014, J MACH LEARN RES, V15, P1929
   Sutskever I, 2014, ADV NEUR IN, V27
   Tom E, 2013, J SYST SOFTWARE, V86, P1498, DOI 10.1016/j.jss.2012.12.052
   Viera AJ, 2005, FAM MED, V37, P360
   Wan Y, 2018, IEEE INT CONF AUTOM, P397, DOI 10.1145/3238147.3238206
   Wattanakriengkrai S, 2022, IEEE T SOFTWARE ENG, V48, P1480, DOI 10.1109/TSE.2020.3023177
   Wattanakriengkrai S, 2018, INT WORKSH EMPIR ENG, P7, DOI 10.1109/IWESEP.2018.00010
   Wehaibi S, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P179, DOI 10.1109/SANER.2016.72
   Xu BX, 2012, J COMPUT, V7, P2913, DOI 10.4304/jcp.7.12.2913-2920
   Xuan JF, 2017, IEEE T SOFTWARE ENG, V43, P34, DOI 10.1109/TSE.2016.2560811
   Yan M, 2019, IEEE T SOFTWARE ENG, V45, P1211, DOI 10.1109/TSE.2018.2831232
   Yoav G., 2017, Neural Network Methods in Natural Language Processing, P227
   Zampetti F, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P355, DOI [10.1109/SANER48275.2020.9054868, 10.1109/saner48275.2020.9054868]
   Zampetti F, 2018, IEEE WORK CONF MIN S, P526, DOI 10.1145/3196398.3196423
   Zampetti F, 2017, PROC IEEE INT CONF S, P216, DOI 10.1109/ICSME.2017.44
   Zazworka Nico, 2011, P 2 WORKSH MAN TECHN, P17, DOI 10.1145/1985362.1985366
NR 64
TC 1
Z9 1
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 60
DI 10.1007/s10515-022-00364-8
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5D9JN
UT WOS:000865249800001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Sharma, A
   Tokekar, S
   Varma, S
AF Sharma, Ashish
   Tokekar, Sanjiv
   Varma, Sunita
TI Actor-critic architecture based probabilistic meta-reinforcement
   learning for load balancing of controllers in software defined networks
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software-defined networking (SDN); Distributed controllers; Load
   balancing; Meta-reinforcement learning
ID SDN
AB The exponential growth in the complexity of network architecture to accommodate the enormous amount of data has motivated the emergence of software-defined networks (SDN). However, the scaling of network size and related services seriously affects the controller resource utilization in SDN. An optimal load balancing strategy is required to accommodate the dynamic network traffic and load distribution among different controllers. Although reinforcement learning has been used for load balancing in SDN by modelling it as the linear optimization problem, it could not perform well for the real-time load in SDN due to the uncertain and dynamic correlation between the resources. This paper presents a deep meta-reinforcement learning (meta-RL) technique to derive an intelligent optimization framework for load balancing in SDN using actor-critic architecture. Meta-RL is the modified version of conventional reinforcement learning which utilizes a smaller amount of training data comparatively to enable the agent to learn the policies. The proposed technique separates the task's inference and control to deal with the uncertainty while adapting to the new tasks in the sparse reward problem. It utilizes the probabilistic interpretation of task variables to solve the new task through sparse experience space. The simulation analysis supports the theoretical analysis of SDN's optimal load balancing technique. A real-time database has been utilized in this work to evaluate the efficiency and effectiveness of the proposed work. It has been found that the proposed technique showed an average of 10.4%, 19.1%, and 6.04% improvement in load balancing rate as compared to DC-LB, MMO-LB, and CRL-LB techniques. It also showed an improvement of 15.7%, 12.18%, and 5.18% in processing delay compared to the same methods, respectively. The standard deviation is also improved by 23.72% compared to the scenario of no-load balancing.
C1 [Sharma, Ashish] Govt Womens Polytech Coll Indore, Indore, MP, India.
   [Tokekar, Sanjiv] IET DAVV Indore, Indore, MP, India.
   [Varma, Sunita] SGSITS Indore, Indore, MP, India.
C3 Devi Ahilya University; Shri Govindram Seksaria Institute of Technology
   & Science
RP Sharma, A (corresponding author), Govt Womens Polytech Coll Indore, Indore, MP, India.
EM sharmaashish_gwpci@yahoo.co.in; sanjivtokekar@yahoo.com;
   sunita.varma19@gmail.com
RI SHARMA, ASHISH/HMP-3616-2023; Varma, Sunita/HOH-2681-2023
OI SHARMA, ASHISH/0000-0002-3904-8648; 
CR [Anonymous], 2016, J SUPERCOMPUT
   Belgaum MR, 2020, IEEE ACCESS, V8, P98612, DOI 10.1109/ACCESS.2020.2995849
   Benzekki K, 2016, SECUR COMMUN NETW, V9, P5803, DOI 10.1002/sec.1737
   Stadie BC, 2019, Arxiv, DOI arXiv:1803.01118
   Cimorelli F, 2016, MED C CONTR AUTOMAT, P1033, DOI 10.1109/MED.2016.7535946
   Hu T., 2017, J COMMUN, V8, P213
   iPref, WHAT IS IPERF IPERF3
   Lemeshko O, 2017, J ELECTR ENG-SLOVAK, V68, P444, DOI 10.1515/jee-2017-0079
   Li Z, 2021, Arxiv, DOI arXiv:2103.06579
   Li Z, 2018, INT CONF SOFTW ENG, P1120, DOI 10.1109/ICSESS.2018.8663757
   McKeown N, 2008, ACM SIGCOMM COMP COM, V38, P69, DOI 10.1145/1355734.1355746
   Mininet, An Instant Virtual Network on your Laptop (or Other PC)
   Mnih V, 2016, PR MACH LEARN RES, V48
   Mu TY, 2018, ACM T AUTON ADAP SYS, V13, DOI 10.1145/3281032
   Nagabandi A., 2019, INT C LEARN REPR ICL
   Open Networking Foundation, COLL TRANSF INFR LEV
   osrg, RYU SDN FRAM
   Paszke A, 2019, ADV NEUR IN, V32
   Rakelly K, 2019, Arxiv, DOI arXiv:1903.08254
   Rusu A. A., 2019, INT C LEARN REPR
   Sæmundsson S, 2018, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, P642
   Sahoo KS, 2020, IEEE INTERNET THINGS, V7, P5852, DOI 10.1109/JIOT.2019.2952527
   Schweighofer N, 2003, NEURAL NETWORKS, V16, P5, DOI 10.1016/S0893-6080(02)00228-9
   Sutton R., 1998, Reinforcement Learning: An Introduction
   Tosounidis V., 2020, 11th Hellenic Conference on Artificial Intelligence, P135
   Wang YL, 2016, APPL SCI-BASEL, V6, DOI 10.3390/app6040091
   Wu YW, 2020, IEEE CONF COMPUT, P1254, DOI 10.1109/INFOCOMWKSHPS50562.2020.9162977
   Ye X, 2017, COMPUT NETW, V126, P69, DOI 10.1016/j.comnet.2017.06.022
   Zhang SJ, 2018, IEEE ACCESS, V6, P18184, DOI 10.1109/ACCESS.2018.2820148
   Zhang Y, 2018, J NETW COMPUT APPL, V103, P101, DOI 10.1016/j.jnca.2017.11.015
NR 30
TC 0
Z9 0
U1 1
U2 18
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 59
DI 10.1007/s10515-022-00362-w
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4Z9ZY
UT WOS:000862558200001
DA 2024-07-18
ER

PT J
AU Zhou, ZY
   Yu, HQ
   Fan, GS
   Huang, ZJ
   Yang, K
   Zhang, JY
AF Zhou, Ziyi
   Yu, Huiqun
   Fan, Guisheng
   Huang, Zijie
   Yang, Kang
   Zhang, Jiayin
TI HQLgen: deep learning based HQL query generation from program context
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Object relational mapping; HQL query generation; Deep learning; Program
   comprehension
ID LESSONS
AB To facilitate Object-Oriented Programming (OOP) in data persistence, practitioners use Object Relational-Mapping (ORM) framework to map data bidirectionally between data classes and tables of Relational Database Management System (RDBMS). In terms of Java applications, the most trending ORM solution is Hibernate, where Hibernate Query Language (HQL) is proposed to perform customizable queries in an OOP style. However, HQL queries are hard to implement and maintain due to their flexibility and complexity. To address these issues, we propose a model called HQLgen that combines deep learning and template to automatically generate HQL queries from program context. It employs recurrent neural network to learn the contextual information of Java program, and predicts the key elements within HQL clauses via attention mechanism. To construct the dataset for model training and evaluation, we locate and extract projects containing HQL queries on GitHub followed by extensive cleaning and preprocessing, and finally obtain 24,118 HQL queries from 3,481 projects. Experimental results show that the proposed approach achieves an accuracy of 34.52% on predicting simple HQL queries. In addition, we release the collected dataset for future research interest.
C1 [Zhou, Ziyi; Yu, Huiqun; Fan, Guisheng; Huang, Zijie; Yang, Kang] East China Univ Sci & Technol, Dept Comp Sci & Engn, Shanghai, Peoples R China.
   [Zhang, Jiayin] East China Univ Sci & Technol, Dept Control Sci & Engn, Shanghai, Peoples R China.
C3 East China University of Science & Technology; East China University of
   Science & Technology
RP Yu, HQ (corresponding author), East China Univ Sci & Technol, Dept Comp Sci & Engn, Shanghai, Peoples R China.
EM yhq@ecust.edu.cn
RI Huang, Zijie/JUF-4746-2023
OI Huang, Zijie/0000-0002-8911-9889; Zhang, Jiayin/0000-0002-3543-762X;
   Zhou, Ziyi/0000-0002-8267-8178
FU National Natural Science Foundation of China [61772200]; Shanghai
   Natural Science Foundation [21ZR1416300]
FX This work was supported by the National Natural Science Foundation of
   China (No. 61772200), Shanghai Natural Science Foundation (No.
   21ZR1416300).
CR ANDROUTSOPOULOS I, 1993, INDUSTRIAL AND ENGINEERING APPLICATIONS OF ARTIFICIAL INTELLIGENCE AND EXPERT SYSTEMS - IEA/AIE 93, P327
   Androutsopoulos I., 1995, Natural Language Engineering, V1, P29, DOI [DOI 10.1017/S135132490000005X, 10.1017/S0269888900005476]
   [Anonymous], 2017, Sqlnet: Generating structured queries from natural language without reinforcement learning
   Bogin B, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P3659
   Chen TH, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P165, DOI [10.1109/MSR.2016.026, 10.1145/2901739.2901758]
   Chen TH, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P666, DOI 10.1145/2950290.2950303
   Cho K., 2014, Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP)
   Cook W.R., 2006, COMP 21 ACM SIGPLAN, P926
   Di Giacomo M, 2005, IEEE SOFTWARE, V22, P10, DOI 10.1109/MS.2005.71
   Dyer R, 2015, ACM T SOFTW ENG METH, V25, DOI 10.1145/2803171
   Glorot X., 2010, P INT C ARTIFICIAL I, P249
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Iyer S, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P963, DOI 10.18653/v1/P17-1089
   Kingma D. P., 2014, arXiv
   Li F, 2014, PROC VLDB ENDOW, V8, P73, DOI 10.14778/2735461.2735468
   Li RY, 2021, INT C PROGRAM COMPRE, P311, DOI 10.1109/ICPC52881.2021.00037
   Loli Samuel, 2020, SBES '20: Proceedings of the 34th Brazilian Symposium on Software Engineering, P82, DOI 10.1145/3422392.3422432
   Meurice L, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P262, DOI 10.1109/QRS.2016.38
   Nagy C, 2017, IEEE INT WORK C SO, P147, DOI 10.1109/SCAM.2017.19
   Nagy C, 2015, PROC IEEE INT CONF S, P516, DOI 10.1109/ICSM.2015.7332505
   Nagy C, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P580, DOI 10.1109/SANER.2015.7081881
   Nair Vinod, 2010, INT C INT C MACHINE, P807
   Nazari Mir Hossein Seyed, 2019, 2019 Conference on Lasers and Electro-Optics Europe & European Quantum Electronics Conference (CLEO/Europe-EQEC), DOI 10.1109/CLEOE-EQEC.2019.8872792
   Popescu A.-M., 2003, IUI 03. 2003 International Conference on Intelligent User Interfaces, P149, DOI 10.1145/604045.604070
   Presler-Marshall K, 2021, 2021 IEEE/ACM 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: JOINT TRACK ON SOFTWARE ENGINEERING EDUCATION AND TRAINING (ICSE-JSEET 2021), P199, DOI 10.1109/ICSE-SEET52601.2021.00030
   Procaccianti G, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962586
   Silva TM, 2019, PROCEEDINGS OF THE XXXIII BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, SBES 2019, P94, DOI 10.1145/3350768.3351796
   Singh R, 2016, PROCEEDINGS OF THE 2016 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE'16), P309, DOI 10.1145/2851553.2851576
   Sridhara G., 2010, P IEEE ACM INT C AUT, P43, DOI DOI 10.1145/1858996.1859006
   Sutskever I, 2014, ADV NEUR IN, V27
   Vial G, 2019, IEEE SOFTWARE, V36, P43, DOI 10.1109/MS.2018.227105428
   Wang Bailin, 2020, ACL, P7567
   Warren D. H. D., 1982, American Journal of Computational Linguistics, V8, P110
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Yu T., 2018, P 2018 C N AM CHAPT, V2, P588, DOI DOI 10.18653/V1/N18-2093
   Yu T, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P1653
   Yu T, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P3911
   Zhong Victor, 2017, ARXIV
NR 38
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 55
DI 10.1007/s10515-022-00359-5
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4I4PQ
UT WOS:000850560600001
DA 2024-07-18
ER

PT J
AU Ashfaq, F
   Bajwa, IS
AF Ashfaq, Fariha
   Bajwa, Imran Sarwar
TI Natural language ambiguity resolution by intelligent semantic annotation
   of software requirements
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software requirements; Ambiguity Resolution; Semantic annotation; SBVR
AB Natural Language (NL) is the root cause of ambiguity in the SRS document. The quality of the software development process can be improved by mitigating the risk with the use of semantically controlled representation. A possible solution to handle ambiguity can be the use of a mathematical formal logic representation in place of NL to capture software requirements. However, the use of formal logic is a complex task. A wrongly written formal logic will be difficult to handle and it will create serious problems in later stages of software development. Furthermore, stakeholders are typically not able to understand mathematical logic. Hence, this solution does not look feasible. Another possible way of addressing above discussed ambiguity problem is the use of controlled natural languages (CNL). It can work as a bridge between NL and formal representation. Since Requirement Analysis is based on communication and the analyst's experience, it can be modeled up to a certain limit. This limit gives birth to controlled language. If the document is written in a controlled language, it will be feasible for the development team to use a simpler and less costly linguistic tool. The CNLs are syntactically unambiguous, semantically consistent and, controlled. Several CNLs could be found in literature such as ACE, PENG, CPL, Formalized-English, and Semantics of Business Vocabulary and Rules (SBVR), etc. We aim to use an SBVR based CNL to capture stakeholder's requirements and prepare an SRS document using SBVR. Such software requirements will not only be syntactically clear but also semantically consistent.
C1 [Ashfaq, Fariha; Bajwa, Imran Sarwar] Islamia Univ Bahawalpur, Dept Comp Sci, Bahawalpu 63100, Pakistan.
C3 Islamia University of Bahawalpur
RP Bajwa, IS (corresponding author), Islamia Univ Bahawalpur, Dept Comp Sci, Bahawalpu 63100, Pakistan.
EM fariha.ashfaq@gmail.com; imran.sarwar@iub.edu.pk
RI Bajwa, Imran Sarwar/A-1454-2010
OI Bajwa, Imran Sarwar/0000-0002-5161-6441; Ashfaq,
   Fariha/0000-0002-9302-2940
CR Afreen H., 2011, 23 BEN C ART INT BNA, P23
   Al-Harbi O., 2012, INT J COMPUT SCI ISS, V9, P17
   Ali SW, 2018, 2018 INTERNATIONAL CONFERENCE ON ENGINEERING & EMERGING TECHNOLOGIES (ICEET), P113
   [Anonymous], 2009, P AUSTRALASIAN LANGU
   Anthopoulos L, 2016, GOV INFORM Q, V33, P161, DOI 10.1016/j.giq.2015.07.003
   Bajwa I. S., 2011, 2011 AAAI SPRING S S
   Bajwa IS, 2011, ICEIS 2011: PROCEEDINGS OF THE 13TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 2, P102
   Bajwa IS., 2009, European Journal of Scientific Research, V35, P22
   Bano M, 2015, IEEE INT WORKS EMPIR, P21, DOI 10.1109/EmpiRE.2015.7431303
   Bhatia M.P. S., 2016, Indian Journal of Science and Technology, V9, DOI [10.17485/ijst/2016/v9i9/71384, DOI 10.17485/IJST/2016/V9I9/71384]
   Clark P, 2010, LECT NOTES ARTIF INT, V5972, P65, DOI 10.1007/978-3-642-14418-9_5
   Danenas P, 2020, DATA KNOWL ENG, V128, DOI 10.1016/j.datak.2020.101822
   Ferrari A, 2014, 2014 IEEE 1ST INTERNATIONAL WORKSHOP ON ARTIFICIAL INTELLIGENCE FOR REQUIREMENTS ENGINEERING (AIRE), P1, DOI 10.1109/AIRE.2014.6894849
   Fricker S.A., 2015, REQUIREMENTS HLTH, P25, DOI DOI 10.1007/978-3-319-09798-5
   Friedrich Fabian, 2011, Advanced Information Systems Engineering. Proceedings 23rd International Conference, CAiSE 2011, P482, DOI 10.1007/978-3-642-21640-4_36
   Fuchs NE, 2008, LECT NOTES COMPUT SC, V5224, P104
   Galorath D., 2008, SOFTWARE PROJECT FAI
   Gill K. D., 2014, 2014 IEEE 27 CANADIA, P1, DOI [10.1109/CCECE.2014.6900955, DOI 10.1109/CCECE.2014.6900955]
   Gleich B, 2010, LECT NOTES COMPUT SC, V6182, P218, DOI 10.1007/978-3-642-14192-8_20
   Handbook A, 2003, CONTRACT DRAFTING SO
   Kaiya H, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P223
   Kamsties E., 2000, P 13 INT C SOFTW SYS
   Kamsties E., 2001, P 1 WORKSH INSP SOFT, P68
   Korner SJ, 2009, 2009 IEEE THIRD INTERNATIONAL CONFERENCE ON SEMANTIC COMPUTING (ICSC 2009), P1, DOI 10.1109/ICSC.2009.47
   Krka I., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P179, DOI 10.1145/1810295.1810324
   Li K, 2005, LINGUIST ANAL, P75
   Madni AM, 2015, SYSTEMS ENG, V18, P16, DOI 10.1002/sys.21284
   Martin P, 2002, LECT NOTES ARTIF INT, V2393, P77
   Massey AK, 2014, INT REQUIR ENG CONF, P83, DOI 10.1109/RE.2014.6912250
   Mich L, 2004, REQUIR ENG, V9, P40, DOI 10.1007/s00766-003-0179-8
   Mich Luisa, 2000, INT C SOFTW THEOR PR
   Nijssen S., 2008, BUSINESS RULES J, V9
   Nogueira S, 2019, SCI COMPUT PROGRAM, V181, P84, DOI 10.1016/j.scico.2019.01.003
   Nuseibeh B., 2000, P C FUTURE SOFTWARE, P35, DOI [10.1145/336512.336523, DOI 10.1145/336512.336523]
   Rodrigues Da Silva A., 2014, 29th Annual ACM Symposium on Applied Computing, P1021
   Montequín VR, 2018, COMPLEXITY, DOI 10.1155/2018/9496731
   Sabriye Ali Olow Jim'ale, 2017, 2017 8th International Conference on Information Technology (ICIT). Proceedings, P209, DOI 10.1109/ICITECH.2017.8080002
   Sandhu G, 2015, 2015 INTERNATIONAL CONFERENCE ON COMPUTING, COMMUNICATION & AUTOMATION (ICCCA), P812, DOI 10.1109/CCAA.2015.7148485
   Sankhwar S, 2014, GLOBAL J MULTIDISCIP, V3, P1
   Schwitter R., 2010, Coling 2010: Posters, P1113
   Shah U.S., 2015, SIGSOFT SOFTW ENG NO, V40, P1
   Sinha R, 2019, IEEE T IND INFORM, V15, P3772, DOI 10.1109/TII.2019.2908665
   Tjong S.F., 2008, Avoiding Ambiguity in Requirements Specifications
   Toutanova K, 2000, PROCEEDINGS OF THE 2000 JOINT SIGDAT CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND VERY LARGE CORPORA, P63, DOI 10.3115/1117794.1117802
   Umber A., 2011, 2011 Sixth International Conference on Digital Information Management, P102, DOI 10.1109/ICDIM.2011.6093363
   van der Aa H, 2018, INFORM SYST, V78, P83, DOI 10.1016/j.is.2018.01.007
   Verma RP, 2013, INT CONF EMERG TR, P140, DOI 10.1109/ICETET.2013.45
   Yang H, 2011, REQUIR ENG, V16, P163, DOI 10.1007/s00766-011-0119-y
   Zahid A. H. A., 2018, VFAST T SOFTWARE ENG, V6, P62
NR 49
TC 2
Z9 2
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 13
DI 10.1007/s10515-021-00291-0
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TM2UI
UT WOS:000675406500001
DA 2024-07-18
ER

PT J
AU Kautz, O
   Rumpe, B
   Wortmann, A
AF Kautz, Oliver
   Rumpe, Bernhard
   Wortmann, Andreas
TI Automated semantics-preserving parallel decomposition of finite
   component and connector architectures
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automated modeling; Architecture decomposition; Refinement; Refactoring
ID DETERMINIZATION; TRANSDUCERS; SOFTWARE; SYSTEMS; DRIVEN
AB For the systematic development of logical, message-driven architectures, automating parallel decomposition of software components is important to achieve efficient modular and parallel system development. During development, monolithic components that realize multiple independent concerns need to be decomposed to obtain a higher quality architecture of cohesively encapsulated, better comprehensive components. Previous work did not address automated parallel decomposition of finite message-driven and logically timed components with respect to the influence of messages received via input channels on the messages sent via output channels. This, however, is a necessary prerequisite to enable the analysis of event chains across logically distributed architectures. To address this, we present a concept of influence between channels of components that supports automated semantics-preserving parallel decomposition of finite deterministic component implementations into independent, more comprehensible components that are better accessible for analysis and development. Therefore, we extend the Focus theory of time-synchronous components with the concept of influence, present a decomposition procedure leveraging this, and prove that the resulting system is semantically equivalent. This enables automatically decomposing monolithic software components (e.g., for stepwise refinement or refactoring) into smaller components of better cohesion and comprehensibility and thus facilitates automated software engineering.
C1 [Kautz, Oliver; Rumpe, Bernhard; Wortmann, Andreas] Rhein Westfal TH Aachen, Software Engn, Aachen, Germany.
C3 RWTH Aachen University
RP Kautz, O (corresponding author), Rhein Westfal TH Aachen, Software Engn, Aachen, Germany.
EM kautz@se-rwth.de; rumpe@se-rwth.de; wortmann@se-rwth.de
RI ; Rumpe, Bernhard/S-8216-2016
OI Kautz, Oliver/0000-0001-5234-6028; Rumpe, Bernhard/0000-0002-2147-1966
FU German Federal Ministry for Education and Research [01IS16043P]
FX This research has partly received funding from the German Federal
   Ministry for Education and Research under Grant No. 01IS16043P. The
   responsibility for the content of this publication is with the authors.
CR [Anonymous], 2001, Specification and Development of Interactive Systems: FOCUS on Streams, Interfaces, and Refinement
   [Anonymous], 1988, FOCS 88
   [Anonymous], 1969, SOFTWARE ENG REPORT
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2011, INTRO MODERN ROBOTIC
   [Anonymous], 1989, CWI Q.
   Béal MP, 2002, THEOR COMPUT SCI, V289, P225, DOI 10.1016/S0304-3975(01)00271-7
   Béal MP, 2000, LECT NOTES COMPUT SC, V1853, P561
   Brim L., 2006, SIGSOFT SOFTW ENG NO, V31, P4
   Broy M, 2010, COMPUT J, V53, P1758, DOI 10.1093/comjnl/bxq005
   Buchi J. R, 1990, Studies in Logic and the Foundations of Mathematics, P425, DOI [10.1007/978-1-4613-8928-6_23, DOI 10.1007/978-1-4613-8928-6_23]
   Butting A, 2019, J SYST SOFTWARE, V149, P437, DOI 10.1016/j.jss.2018.12.016
   Butting A, 2017, LECT NOTES COMPUT SC, V10376, P53, DOI 10.1007/978-3-319-61482-3_4
   Butting A, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA 2017), P145, DOI 10.1109/ICSA.2017.34
   Campetelli A., 2011, 24 INT C COMP APPL I
   Carlsson G., 2015, ARXIV150301502
   Cavalcante E., 2016, EUR C SOFTW ARCH
   de-Alfaro L., 2005, ENG THEORIES SOFTWAR
   Debruyne V, 2005, ARCHITECTURE DESCRIP, P181, DOI DOI 10.1007/0-387-24590-1_12
   Díaz J, 2014, INFORM SOFTWARE TECH, V56, P727, DOI 10.1016/j.infsof.2014.01.014
   Díaz J, 2013, P ANN HICSS, P4780, DOI 10.1109/HICSS.2013.127
   Farwer B, 2002, LECT NOTES COMPUT SC, V2500, P3
   Feiler PH., 2012, Model-based engineering with AADL: An introduction to the SAE architecture analysis design language
   France R., 2007, FUTURE SOFTWARE ENG
   Friedenthal S., 2011, A practical guide to SysML: the systems modeling language
   GERACE GB, 1967, INFORM CONTROL, V11, P568, DOI 10.1016/S0019-9958(67)90787-5
   Grosu R., 1995, TUM19533
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Holzl F, 2010, MODEL BASED ENG EMBE
   Jongmans SSTQ, 2016, SCI COMPUT PROGRAM, V115, P47, DOI 10.1016/j.scico.2014.02.017
   Koehler C., 2009, P SAC 2009, P1369, DOI DOI 10.1145/1529282.1529587
   Kokash N., 2010, P 2010 ACM S APPL CO
   Malavolta I, 2013, IEEE T SOFTWARE ENG, V39, P869, DOI 10.1109/TSE.2012.74
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   NOZAKI A, 1978, INFORM CONTROL, V36, P275, DOI 10.1016/S0019-9958(78)90320-0
   Plotkin B., 2015, ARXIV150606017
   Poort ER, 2014, IEEE SOFTWARE, V31, P20, DOI 10.1109/MS.2014.111
   Razavi N, 2006, FOURTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P113, DOI 10.1109/MEMCOD.2006.1695912
   Ringert J., 2011, INT J SOFTWARE INFOR, V5, P29
   Ringert J.O., 2016, MODELLBASIERTE ENTWI
   Ringert JO, 2014, ANAL SYNTHESIS INTER, V19
   Strobl F., 1999, TECHNICAL REPORT
   ter Beek M. H., 2003, Computer Supported Cooperative Work: The Journal of Collaborative Computing, V12, P21, DOI 10.1023/A:1022407907596
   Uygur G., 2013, 2013 3 INT EL DRIV P, P1
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
   Volter M., 2013, Wiley Software Patterns Series
   Weber A, 1998, J COMPUT SYST SCI, V56, P46, DOI 10.1006/jcss.1997.1517
   WEBER A, 1995, INFORM COMPUT, V118, P327, DOI 10.1006/inco.1995.1071
NR 48
TC 2
Z9 2
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2020
VL 27
IS 1-2
BP 119
EP 151
DI 10.1007/s10515-020-00268-5
EA APR 2020
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LU4VK
UT WOS:000526209400001
DA 2024-07-18
ER

PT J
AU Groce, A
   Ahmed, I
   Jensen, C
   McKenney, PE
   Holmes, J
AF Groce, Alex
   Ahmed, Iftekhar
   Jensen, Carlos
   McKenney, Paul E.
   Holmes, Josie
TI How verified (or tested) is my code? Falsification-driven verification
   and testing
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Formal verification; Random testing; Mutation testing; Philosophy of
   science; Falsification; Oracles
ID MUTATION COVERAGE; MODEL
AB Formal verification has advanced to the point that developers can verify the correctness of small, critical modules. Unfortunately, despite considerable efforts, determining if a "verification" verifies what the author intends is still difficult. Previous approaches are difficult to understand and often limited in applicability. Developers need verification coverage in terms of the software they are verifying, not model checking diagnostics. We propose a methodology to allow developers to determine (and correct) what it is that they have verified, and tools to support that methodology. Our basic approach is based on a novel variation of mutation analysis and the idea of verification driven by falsification. We use the CBMC model checker to show that this approach is applicable not only to simple data structures and sorting routines, and verification of a routine in Mozilla's JavaScript engine, but to understanding an ongoing effort to verify the Linux kernel read-copy-update mechanism. Moreover, we show that despite the probabilistic nature of random testing and the tendency to incompleteness of testing as opposed to verification, the same techniques, with suitable modifications, apply to automated test generation as well as to formal verification. In essence, it is the number of surviving mutants that drives the scalability of our methods, not the underlying method for detecting faults in a program. From the point of view of a Popperian analysis where an unkilled mutant is a weakness (in terms of its falsifiability) in a "scientific theory" of program behavior, it is only the number of weaknesses to be examined by a user that is important.
C1 [Groce, Alex; Holmes, Josie] No Arizona Univ, Sch Informat Comp & Cyber Syst, Flagstaff, AZ 86011 USA.
   [Ahmed, Iftekhar; Jensen, Carlos] Oregon State Univ, Sch Elect Engn & Comp Sci, Corvallis, OR 97331 USA.
   [McKenney, Paul E.] IBM Linux Technol Ctr, Beaverton, OR USA.
C3 Northern Arizona University; Oregon State University; International
   Business Machines (IBM)
RP Groce, A (corresponding author), No Arizona Univ, Sch Informat Comp & Cyber Syst, Flagstaff, AZ 86011 USA.
EM agroce@gmail.com; ahmedi@oregonstate.edu; cjensen@eecs.oregonstate.edu;
   paulmck@linux.vnet.ibm.com; josie.holmes@nau.edu
OI Ahmed, Iftekhar/0000-0001-8221-5352
FU NSF [CCF-1217824, CCF-1054786]
FX A portion of this work was funded by NSF Grants CCF-1217824 and
   CCF-1054786.
CR Ahmed I, 2017, IEEE ICST WORKSHOP, P110, DOI 10.1109/ICSTW.2017.26
   Ahmed I, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P547, DOI 10.1145/2950290.2950324
   Aichernig Bernhard K., 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P23, DOI 10.1007/978-3-642-39698-4_2
   Andrews James H., 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P19, DOI 10.1109/ASE.2008.12
   Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], 2008, FORMAL METHODS COMPU
   [Anonymous], WORKSH DYN AN
   [Anonymous], 2006, EXTRA EXTRA READ ALL
   [Anonymous], WORKSH CONSTR FORM V
   [Anonymous], P 2008 INT C FORM ME
   [Anonymous], ACM SIGPLAN C PROGR
   [Anonymous], 2012, INT WORKSH DYN AN
   [Anonymous], 1980, Order No. 8025191
   [Anonymous], MUUPI MUTATION TOOL
   [Anonymous], MUTATION
   [Anonymous], QUICKSORT C
   [Anonymous], VISAR SOLVED DOUBLY
   [Anonymous], RE PATCH FYI RCU BLO
   [Anonymous], IF DEATH EVER SLEPT
   [Anonymous], INT WORKSH CONSTR FO
   [Anonymous], NATO SOFTW ENG C
   [Anonymous], 2015, TSTL TEMPLATE SCRIPT
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2006, RCU LINUX USAGE
   [Anonymous], 1963, CONJECTURES REFUTAT
   [Anonymous], 1971, TECHNICAL REPORT
   [Anonymous], RFC GIT TREE USERSPA
   [Anonymous], RCU TORTURE TEST OPE
   [Anonymous], IEEE T SOFTWARE ENG, DOI DOI 10.1109/TSE.2014.2372785
   [Anonymous], INT C SOFTW ENG
   [Anonymous], PYFAKEFS IMPLEMENTS
   [Anonymous], SCVALEX FINDING ALL
   [Anonymous], WORKSH DYN AN
   [Anonymous], ACM T SOFTW ENG METH
   [Anonymous], IMPROVING ENERGY EFF
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Auerbach G., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P21
   Ball T, 2005, LECT NOTES COMPUT SC, V3576, P67
   BENTLEY J, 1983, COMMUN ACM, V26, P1040, DOI 10.1145/358476.358484
   Budd T.A., 1980, POPL '80: Proceedings of the 7th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, (New York, NY, USA), P220
   Budd T.A., 1979, Mutation Analysis
   Chen Y, 2013, ACM SIGPLAN NOTICES, V48, P197, DOI 10.1145/2499370.2462173
   Chockler H, 2001, LECT NOTES COMPUT SC, V2102, P66
   Chockler H, 2012, IEEE T COMPUT AID D, V31, P765, DOI 10.1109/TCAD.2011.2180382
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clarke Edmund M., 2001, Model Checking
   CLARKE EM, 1995, DES AUT CON, P427
   Cuoq Pascal, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P120, DOI 10.1007/978-3-642-28891-3_12
   Daran M., 1996, SIGSOFT Software Engineering Notes, V21, P158, DOI [10.1145/229000.226313, 10.1145/226295.226313]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Desnoyers M, 2012, IEEE T PARALL DISTR, V23, P375, DOI 10.1109/TPDS.2011.159
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Ghassabani E, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P314, DOI 10.1145/2950290.2950346
   Ghassabani E, 2017, IEEE INT CONF AUTOM, P194, DOI 10.1109/ASE.2017.8115632
   Ghassabani E, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P31, DOI 10.23919/FMCAD.2017.8102238
   Gligoric M., 2013, P 2013 INT S SOFTW T, P302, DOI DOI 10.1145/2483760.2483769
   Gopinath R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P72, DOI 10.1145/2568225.2568278
   Groce A, 2004, LECT NOTES COMPUT SC, V2988, P108
   GROCE A, 2015, ACM INT S SOFTW TEST, P414
   Groce A, 2005, ELECTRON NOTES THEOR, V119, P67, DOI 10.1016/j.entcs.2004.12.023
   Groce A, 2007, PROC INT CONF SOFTW, P621
   Groce A, 2006, LECT NOTES COMPUT SC, V3920, P379
   Groce A, 2015, IEEE INT CONF AUTOM, P737, DOI 10.1109/ASE.2015.40
   Groce A, 2015, LECT NOTES COMPUT SC, V9058, P204, DOI 10.1007/978-3-319-17524-9_15
   Groce Alex, 2014, INT S NEW ID NEW PAR, P255, DOI DOI 10.1145/2661136.2661157
   Guniguntala D, 2008, IBM SYST J, V47, P221, DOI 10.1147/sj.472.0221
   Henard C, 2015, IEEE ICST WORKSHOP
   Holmes J, 2018, INT J SOFTW TOOLS TE, V20, P57, DOI 10.1007/s10009-016-0445-y
   HORSPOOL RN, 1980, SOFTWARE PRACT EXPER, V10, P501, DOI 10.1002/spe.4380100608
   Hoskote Y., 1999, Proceedings 1999 Design Automation Conference (Cat. No. 99CH36361), P300, DOI 10.1109/DAC.1999.781330
   Hume David, 1748, An Enquiry Concerning Human Understanding
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   KAner C., 2001, LESSONS LEARNED SOFT
   LAKATOS I, 1974, STUD HIST PHILOS SCI, V4, P309, DOI 10.1016/0039-3681(74)90007-7
   Lee TC, 2004, LECT NOTES COMPUT SC, V3299, P354
   Mathur A. P., 1994, Software Testing, Verification and Reliability, V4, P9, DOI 10.1002/stvr.4370040104
   Mathur A.P., 2012, FDN SOFTWARE TESTING
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   McKenney P. E, 2015, VERIFICATION CHALLEN
   McKenney PE, 2013, COMMUN ACM, V56, P40, DOI 10.1145/2483852.2483867
   McKenney Paul E, 1998, Parallel and Distributed Computing and Systems, V509518, P509
   Murugesan A, 2015, LECT NOTES COMPUT SC, V9058, P279, DOI 10.1007/978-3-319-17524-9_20
   Offutt A. J., 1996, Technical Report ISSE-TR-96-01
   Popper K., 2005, The logic of scientific discovery
   Schuler D., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P90, DOI 10.1109/ICST.2011.32
   Schuler D, 2013, SOFTW TEST VERIF REL, V23, P531, DOI 10.1002/stvr.1497
   Strichman O, 2008, LECT NOTES COMPUT SC, V4171, P496
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhang ZG, 2003, PROC INT CONF SOFTW, P319
NR 94
TC 6
Z9 6
U1 1
U2 9
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2018
VL 25
IS 4
SI SI
BP 917
EP 960
DI 10.1007/s10515-018-0240-y
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW9YB
UT WOS:000447363400008
DA 2024-07-18
ER

PT J
AU Morales, R
   Chicano, F
   Khomh, F
   Antoniol, G
AF Morales, Rodrigo
   Chicano, Francisco
   Khomh, Foutse
   Antoniol, Giuliano
TI Exact search-space size for the refactoring scheduling problem
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software maintenance; Search-based software engineering; Refactoring
AB Ouni et al. "Maintainability defects detection and correction: a multi-objective approach" proposed a search-based approach for generating optimal refactoring sequences. They estimated the size of the search space for the refactoring scheduling problem using a formulation that is incorrect; the search space is estimated to be too much larger than it is. We provide in this paper the exact expression for computing the number of possible refactoring sequences of a software system. This could be useful for researchers and practitioners interested in developing new approaches to automate refactoring.
C1 [Morales, Rodrigo; Khomh, Foutse; Antoniol, Giuliano] Polytech Montreal, DGIGL, Montreal, PQ, Canada.
   [Chicano, Francisco] Univ Malaga, Andalucia Tech, Dept Lenguajes & Ciencias Computac, Malaga, Spain.
C3 Universite de Montreal; Polytechnique Montreal; Universidad de Malaga
RP Morales, R (corresponding author), Polytech Montreal, DGIGL, Montreal, PQ, Canada.
EM rodrigomorales2@acm.org; chicano@lcc.uma.es; foutse.khomh@polymtl.ca;
   antoniol@ieee.org
RI Alvarado, Rodrigo Morales/AAR-2780-2021; Chicano, Francisco/I-5650-2015
OI Alvarado, Rodrigo Morales/0000-0002-1350-0560; Chicano,
   Francisco/0000-0003-1259-2990
FU Natural Sciences and Engineering Research Council of Canada (NSERC);
   Consejo Nacional de Ciencia y Tecnologia, Mexico (CONACyT)
FX This work has been supported by the Natural Sciences and Engineering
   Research Council of Canada (NSERC) and Consejo Nacional de Ciencia y
   Tecnologia, Mexico (CONACyT).
CR Du BoisB., 2006, IASTED C SOFTWARE EN, P346
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1106
   Moghadam Iman Hemati., 2011, Proceeding of the 4th workshop on Refactoring tools - WRT'11, page, P41
   Morales R, 2017, J SYST SOFTWARE, V128, P236, DOI 10.1016/j.jss.2016.05.042
   Morales R, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P24, DOI 10.1109/SANER.2016.23
   O'Keeffe M., 2006, 10th European Conference on Software Maintenance and Reengineering
   Opdyke William F., 1992, THESIS
   Ouni A, 2015, J SYST SOFTWARE, V105, P18, DOI 10.1016/j.jss.2015.03.040
   Ouni A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P347, DOI 10.1109/ICSM.2012.6405292
   Ouni A, 2013, AUTOMAT SOFTW ENG, V20, P47, DOI 10.1007/s10515-011-0098-8
   Ramanujan S., 1957, TATA I FUNDAM RES BO, V27, P816
   Van Rompaey B, 2009, EUR CON SFTWR MTNCE, P277, DOI 10.1109/CSMR.2009.30
NR 13
TC 3
Z9 4
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2018
VL 25
IS 2
BP 195
EP 200
DI 10.1007/s10515-017-0213-6
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF3PN
UT WOS:000431868200001
DA 2024-07-18
ER

PT J
AU Liao, CF
   Chen, K
   Tan, DH
   Chen, JJ
AF Liao, Chun-Feng
   Chen, Kung
   Tan, Deik Hoong
   Chen, Jiu-Jye
TI Automatic query rewriting schemes for multitenant SaaS applications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Schema-mapping; SaaS; Query rewriting; Multitenant
AB In Software as a Service (SaaS) environments, designing and realizing multitenant schema-mapping that supports a shared database with custom extensions is a non-trivial task. Universal Table is one promising schema-mapping technique that is commonly used. However, there has been little research devoted to the design and realization of a query rewriting scheme for Universal Table. In this paper, we present a collection of general query rewriting schemes for Universal Table that can transparently transform tenant-specific logical queries into corresponding physical queries. Based on the design, we have developed a Java-based schema-mapping and query rewriting middleware for Universal Table and a sample online shopping SaaS application to verify its feasibility. Additionally, analytical results that can be used to predict the overhead of our schemes are also reported. Finally, we conduct a series of experiments and find that the results not only agree well with our analytical predictions but also show that our schemes are scalable to the number of tenants and the number of concurrent database connections.
C1 [Liao, Chun-Feng; Chen, Kung; Chen, Jiu-Jye] Natl Chengchi Univ, CS Dept, 64,Sec 2,Zhi Nan Rd, Taipei 116, Taiwan.
   [Liao, Chun-Feng] Natl Chengchi Univ, Program Digital Content & Technol, 64,Sec 2,Zhi Nan Rd, Taipei 116, Taiwan.
   [Tan, Deik Hoong] Feng Chia Univ, IECS Dept, 100 Wenhwa Rd, Taichung 407, Taiwan.
C3 National Chengchi University; National Chengchi University; Feng Chia
   University
RP Liao, CF (corresponding author), Natl Chengchi Univ, CS Dept, 64,Sec 2,Zhi Nan Rd, Taipei 116, Taiwan.; Liao, CF (corresponding author), Natl Chengchi Univ, Program Digital Content & Technol, 64,Sec 2,Zhi Nan Rd, Taipei 116, Taiwan.
EM cfliao@nccu.edu.tw; chenk@nccu.edu.tw; deikhoong@gmail.com;
   100971009@nccu.edu.tw
RI ; Liao, Chun-Feng/E-3895-2015
OI CHEN, KUNG/0000-0002-5480-3226; Liao, Chun-Feng/0000-0001-5095-3940
FU Ministry of Science and Technology, Taiwan [103-2221-E-004-005,
   103-2221-E-004-018, 103-2218-E-004-003, 103-2218-E-004-001]
FX This work is partially sponsored by Ministry of Science and Technology,
   Taiwan, under Grant 103-2221-E-004-005, 103-2221-E-004-018,
   103-2218-E-004-003 and 103-2218-E-004-001.
CR [Anonymous], 2012, OSGI COR REL 5
   Aulbach S., 2008, P ACM INT C MAN DAT
   Chong F., 2006, Multi-Tenant Data Architecture
   Chong Frederick., 2006, ARCHITECTURE STRATEG
   Chun-Feng Liao, 2012, 2012 IEEE 4th International Conference on Cloud Computing Technology and Science (CloudCom). Proceedings, P833, DOI 10.1109/CloudCom.2012.6427562
   Clinton B., 2004, IBATIS JPETSTORE 4 0
   Codd E.F., 1972, Database Systems
   Copeland G. P., 1985, SIGMOD Record, V14, P268, DOI 10.1145/971699.318923
   Du J., 2010, P IEEE 17 INT C IND, P362
   Elmasri R., 2011, Database systems, V9
   Halili E. H., 2008, APACHE JMETER PRACTI
   Heng L., 2012, INT J COMPUTER SCI I, V9, P198
   JARKE M, 1984, COMPUT SURV, V16, P111, DOI 10.1145/356924.356928
   Koziolek H, 2011, 2011 9TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P320, DOI 10.1109/WICSA.2011.50
   Krebs R., 2012, P INT C CLOUD COMP S
   Li C., 2010, P IEEE INT C SOFTW E
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   MAIER D, 1983, ACM T DATABASE SYST, V8, P1, DOI 10.1145/319830.319831
   Pereira J., 2007, TECHNICAL REPORT
   Russell C, 2010, 243 JSR
   Weissman C. D., 2009, P ACM SIGMOD INT C M
   Yaish H., 2011, Proceedings of the 2011 IEEE 9th International Conference on Dependable, Autonomic and Secure Computing (DASC 2011), P737, DOI 10.1109/DASC.2011.127
NR 22
TC 3
Z9 3
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2016
VL 23
IS 4
BP 535
EP 568
DI 10.1007/s10515-015-0178-2
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DV1HD
UT WOS:000382670800002
DA 2024-07-18
ER

PT J
AU Mangano, N
   van der Hoek, A
AF Mangano, Nicolas
   van der Hoek, Andre
TI The design and evaluation of a tool to support software designers at the
   whiteboard
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Design; Software design; Sketching; Creative exploration; Electronic
   whiteboard; Informal drawing
ID DIAGRAMS
AB Despite the availability of advanced software design tools, software developers are known to frequently turn to the whiteboard when faced with a specific design problem. Free from any restrictions, they engage in an informal form of software design that relies heavily on sketching. However, whereas whiteboards afford flexibility and fluidity, they at the same time limit a designer in only being able to draw and erase content. This paper presents Calico, a novel software design tool that leverages electronic whiteboards to enhance the design experience with explicit support for the creative, exploratory aspects of design. Specifically, Calico offers a grid to partition the drawing space, scraps to organize and manipulate the content, and a reusable palette together with gesture-based input to address several natural behaviors exhibited by software designers, including frequent shifts in focus, use of low-detail models, use of a variety of notations, and a tendency to refine representations. To evaluate Calico, we performed a laboratory experiment involving the design of an educational traffic simulator. Through a three-pronged analysis examining the use of Calico's features, design behaviors exhibited by the participants, and the nature of the design conversations, we show how Calico benefits the design process as it takes place at the whiteboard.
C1 [Mangano, Nicolas; van der Hoek, Andre] Univ Calif Irvine, Dept Informat, Irvine, CA 92697 USA.
C3 University of California System; University of California Irvine
RP Mangano, N (corresponding author), Univ Calif Irvine, Dept Informat, Irvine, CA 92697 USA.
EM nmangano@ics.uci.edu; andre@ics.uci.edu
FU National Science Foundation [DUE-0920777, CCF-1118052]; Direct For
   Computer & Info Scie & Enginr [1118052] Funding Source: National Science
   Foundation; Direct For Computer & Info Scie & Enginr; Div Of Information
   & Intelligent Systems [1111446] Funding Source: National Science
   Foundation; Direct For Education and Human Resources [0920777] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations [1118052] Funding Source: National Science
   Foundation; Division Of Undergraduate Education [0920777] Funding
   Source: National Science Foundation
FX This work is partially supported by the National Science Foundation
   under grant numbers DUE-0920777 and CCF-1118052. We thank Hitachi for
   donating three FX-Duo Starboard interactive whiteboards.
CR [Anonymous], 2007, SKETCHING USER EXPER
   [Anonymous], 1991, The Psychology of Optimal Experience
   [Anonymous], 2002, AUSTR COMPUTER SCI C
   [Anonymous], 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering
   Baker A., 2010, THESIS
   Ball LJ, 2010, DESIGN STUD, V31, P567, DOI 10.1016/j.destud.2010.09.003
   Bederson BB, 2004, IEEE T SOFTWARE ENG, V30, P535, DOI 10.1109/TSE.2004.44
   Brooks F.P., 2010, Design of Design: Essays from a Computer Scientist
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Chen Q, 2008, SOFTWARE PRACT EXPER, V38, P961, DOI 10.1002/spe.856
   Cherubini M, 2007, CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1 AND 2, P557
   Chung R., 2005, INKKIT GENERIC DESIG, P29
   Damm C. H., 2000, CHI 2000 Conference Proceedings. Conference on Human Factors in Computing Systems. CHI 2000. The Future is Here, P518, DOI 10.1145/332040.332488
   Damm CH, 2000, LECT NOTES COMPUT SC, V1939, P396
   Dekel U, 2007, ACM SIGPLAN NOTICES, V42, P261, DOI 10.1145/1297105.1297047
   Ferguson E., 1992, ENG MINDS EYE
   Goel V., 1995, Sketches of thought
   Goldschmidt G., 1991, CREATIVITY RES J, V4, P123, DOI [10.1080/10400419109534381, DOI 10.1080/10400419109534381, https://doi.org/10.1080/10400419109534381]
   Grisham P., 2009, P WORKSH ACC TRAC GL, P13
   Grundy J, 2007, PROC INT CONF SOFTW, P282
   Guimbretiere F.V., 2002, THESIS
   HAILPERN J, 2007, TEAM STORM DEMONSTRA, P193
   Hendry DG, 2006, IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P95
   Hong J., 2000, SATIN TOOLKIT INFORM, P63
   Johnson Gabe, 2008, Foundations and Trends in Human-Computer Interaction, V2, P1, DOI 10.1561/1100000013
   Jones J., 1970, Design Methods
   Ju W, 2008, CSCW: 2008 ACM CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, CONFERENCE PROCEEDINGS, P17
   Klemmer Scott R., 2001, P UIST 01, P1, DOI 10.1145/502348.502350
   Kramer A., 1994, UIST '94. Seventh Annual Symposium on User Interface Software and Technology. Proceedings of the ACM Symposium on User Interface Software and Technology, P121, DOI 10.1145/192426.192474
   Landay J., 1996, SILK SKETCHING INTER, P399
   LARKIN JH, 1987, COGNITIVE SCI, V11, P65, DOI 10.1016/S0364-0213(87)80026-5
   Lawson B.R., 1994, DESIGN MIND
   Mangano N., 2012, P ACM 2012 C COMP SU
   Moran T.P., 1996, DESIGN RATIONALE CON
   Myers B, 2008, 2008 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P177, DOI 10.1109/VLHCC.2008.4639081
   Mynatt E., 1999, FLATLAND NEW DIMENSI, P353
   Newell A., 1972, SCI CMUPPDOC HUMAN P, V104
   Newman MW, 2003, HUM-COMPUT INTERACT, V18, P259, DOI 10.1207/S15327051HCI1803_3
   Nickerson J., 2008, INT C INF SYST ICIS, P216
   Olson G. M., 1992, Human-Computer Interaction, V7, P347, DOI 10.1207/s15327051hci0704_1
   Olson G.M., 1996, DESIGN RATIONALE CON, P217
   OLSON JS, 1993, ACM T INFORM SYST, V11, P321, DOI 10.1145/159764.159763
   Ossher H., 2010, RC24949, P1
   Ossher H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1192
   PEDERSEN ER, 1993, HUMAN FACTORS IN COMPUTING SYSTEMS, P391
   Petre M, 2004, INT J HUM-COMPUT ST, V61, P205, DOI 10.1016/j.ijhcs.2003.12.013
   Petre M., 2010, DES STUD
   Petre M, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P233, DOI 10.1145/1595696.1595731
   Plimmer B., 2005, P 6 AUSTRALASIAN C U, V40, P31
   Putnam L.L., 1981, Communication Yearbook 5, Transaction Books, P331, DOI DOI 10.1080/23808985.1981.11923852
   Schon D., 1984, The Reflective Practitioner: How Professionals Think in Action
   Schütze M, 2003, RES ENG DES, V14, P89, DOI 10.1007/s00163-002-0028-7
   Shipman F. M.  III, 1999, Computer Supported Cooperative Work: The Journal of Collaborative Computing, V8, P333, DOI 10.1023/A:1008716330212
   STEFIK M, 1987, ACM T INFORM SYST, V5, P147, DOI 10.1145/27636.28056
   Streitz N. A., 1994, Transcending Boundaries, CSCW '94. Proceedings of the Conference on Computer Supported Cooperative Work, P345, DOI 10.1145/192844.193044
   Suwa M., 2000, DESIGN STUDIES, V21, P539, DOI [DOI 10.1016/S0142-694X(99)00034-4, 10.1016/S0142-694X(99)00034-4]
   Tversky B., 2002, 2002 AAAI SPRING S S, P148
   Virzi R.A., 1996, USABILITY PROBLEM ID
   Wong Y.Y., 1992, ROUGH READY PROTOTYP
   Yamamoto Y, 2005, INT J HUM-COMPUT ST, V63, P513, DOI 10.1016/j.ijhcs.2005.04.023
   Yatani K, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P995
   Zannier C., 2007, AGILE PROCESSES SOFT
NR 62
TC 13
Z9 14
U1 0
U2 14
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2012
VL 19
IS 4
SI SI
BP 381
EP 421
DI 10.1007/s10515-012-0104-9
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 988QT
UT WOS:000307506300002
DA 2024-07-18
ER

PT J
AU Ledru, Y
   Petrenko, A
   Boroday, S
   Mandran, N
AF Ledru, Yves
   Petrenko, Alexandre
   Boroday, Sergiy
   Mandran, Nadine
TI Prioritizing test cases with string distances
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software engineering; Testing and debugging; Testing tools; Test case
   prioritisation; String distance
ID TEST-SUITE REDUCTION; MINIMIZATION
AB Test case prioritisation aims at finding an ordering which enhances a certain property of an ordered test suite. Traditional techniques rely on the availability of code or a specification of the program under test. We propose to use string distances on the text of test cases for their comparison and elaborate a prioritisation algorithm. Such a prioritisation does not require code or a specification and can be useful for initial testing and in cases when code is difficult to instrument. In this paper, we also report on experiments performed on the "Siemens Test Suite", where the proposed prioritisation technique was compared with random permutations and four classical string distance metrics were evaluated. The obtained results, confirmed by a statistical analysis, indicate that prioritisation based on string distances is more efficient in finding defects than random ordering of the test suite: the test suites prioritized using string distances are more efficient in detecting the strongest mutants, and, on average, have a better APFD than randomly ordered test suites. The results suggest that string distances can be used for prioritisation purposes, and Manhattan distance could be the best choice.
C1 [Ledru, Yves; Mandran, Nadine] UJF Grenoble 1, LIG, UMR 5217, Grenoble INP,CNRS,UPMF Grenoble 2, F-38041 Grenoble, France.
   [Petrenko, Alexandre; Boroday, Sergiy] Ctr Rech Informat Montreal, Montreal, PQ H3N 1M3, Canada.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS)
RP Ledru, Y (corresponding author), UJF Grenoble 1, LIG, UMR 5217, Grenoble INP,CNRS,UPMF Grenoble 2, F-38041 Grenoble, France.
EM Yves.Ledru@imag.fr; Alexandre.Petrenko@crim.ca
OI Petrenko, Alexandre/0000-0002-2938-1666
FU NSERC [OGP0194381]
FX This work was partly supported by the NSERC discovery grant OGP0194381.
   We acknowledge very useful comments of the reviewers.
CR [Anonymous], 1957, STAT METHODS
   Braun H., 1994, The collected works of John W. Tukey, VVIII
   Chan FT, 1996, INFORM SOFTWARE TECH, V38, P775, DOI 10.1016/0950-5849(96)01103-2
   Charikar M, 2006, PROCEEDINGS OF THE SEVENTHEENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P1018, DOI 10.1145/1109557.1109670
   Chen TY, 2004, LECT NOTES COMPUT SC, V3321, P320
   Cohen W.W., 2003, IJCAI WORKSH INF INT, P73, DOI DOI 10.5555/3104278.3104293
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Feijs L. M. G., 2002, Testing of Communicating Systems XIV. Application to Internet Technologies and Services. IFIP TC6/WG6.1 Fourteenth International Conference on Testing of Communicating Systems (TestCom 2002), P267
   HAMMING RW, 1950, BELL SYST TECH J, V29, P147, DOI 10.1002/j.1538-7305.1950.tb00463.x
   Harrold M. J., 1993, ACM Transactions on Software Engineering and Methodology, V2, P270, DOI 10.1145/152388.152391
   Heimdahl MPE, 2007, AUTOMAT SOFTW ENG, V14, P37, DOI 10.1007/s10515-006-0004-y
   Hemmati H, 2010, LECT NOTES COMPUT SC, V6435, P63, DOI 10.1007/978-3-642-16573-3_6
   Hennessy M., 2005, 20 IEEE ACM INT C AU
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Jiang B, 2009, IEEE INT CONF AUTOM, P233, DOI 10.1109/ASE.2009.77
   Jones JA, 2003, IEEE T SOFTWARE ENG, V29, P195, DOI 10.1109/TSE.2003.1183927
   Kessis M., 2005, 5 INT WORKSH SOFTW E
   Kovács G, 2009, LECT NOTES COMPUT SC, V5719, P82, DOI 10.1007/978-3-642-04554-7_6
   Ledru Y, 2009, IEEE INT CONF AUTOM, P510, DOI 10.1109/ASE.2009.23
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   Levenshtein V. I., 1966, SOV PHYS DOKL, V10, P707
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Malaiya Y., 1995, 6 INT S SOFTW REL EN
   Mayer J., 2006, INT S EMP SOFTW ENG
   Qu X., 2008, P 2008 INT S SOFTW T, P75
   Ramanathan MK, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P667
   Rothermel G, 1998, PROC IEEE INT CONF S, P34, DOI 10.1109/ICSM.1998.738487
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Smith A.M., 2007, P 22 IEEEACM INT C A, P539
   Srikanth H., 2005, INT S EMP SOFTW ENG
   Srivastava A., 2002, ACM SIGSOFT INT S SO
   VUONG ST, 1992, IFIP TRANS C, V3, P31
   Walcott K.R., 2006, ACM SIGSOFT INT S SO
   Wong W.E., 1997, 8 INT S SOFTW REL EN
   Wong WE, 1999, J SYST SOFTWARE, V48, P79, DOI 10.1016/S0164-1212(99)00048-5
   Yin HF, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P84, DOI 10.1109/ISSRE.1997.630850
NR 37
TC 78
Z9 81
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2012
VL 19
IS 1
BP 65
EP 95
DI 10.1007/s10515-011-0093-0
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 872GX
UT WOS:000298798400003
DA 2024-07-18
ER

PT J
AU Hierons, RM
   Ural, H
AF Hierons, R. M.
   Ural, H.
TI Generating a checking sequence with a minimum number of reset
   transitions
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Finite state machine; Checking sequence generation; Reset transition;
   Distinguishing sequence; Optimisation
ID FINITE; LENGTH; DESIGN
AB Given a finite state machine M, a checking sequence is an input sequence that is guaranteed to lead to a failure if the implementation under test is faulty and has no more states than M. There has been much interest in the automated generation of a short checking sequence from a finite state machine. However, such sequences can contain reset transitions whose use can adversely affect both the cost of applying the checking sequence and the effectiveness of the checking sequence. Thus, we sometimes want a checking sequence with a minimum number of reset transitions rather than a shortest checking sequence. This paper describes a new algorithm for generating a checking sequence, based on a distinguishing sequence, that minimises the number of reset transitions used.
C1 [Hierons, R. M.] Brunel Univ, Dept Informat Syst & Comp, Uxbridge UB8 3PH, Middx, England.
   [Ural, H.] Univ Ottawa, Sch Informat Technol & Engn, Ottawa, ON K1N 6N5, Canada.
C3 Brunel University; University of Ottawa
RP Hierons, RM (corresponding author), Brunel Univ, Dept Informat Syst & Comp, Uxbridge UB8 3PH, Middx, England.
EM rob.hierons@brunel.ac.uk
OI Hierons, Robert/0000-0002-4771-1446
FU Leverhulme Trust [F/00275/D]; Testing State Based Systems; Natural
   Sciences and Engineering Research Council (NSERC) of Canada [RGPIN 976];
   Engineering and Physical Sciences Research Council [GR/R43150]; Formal
   Methods and Testing (FORTEST)
FX This work was supported in part by Leverhulme Trust grant number
   F/00275/D, Testing State Based Systems, Natural Sciences and Engineering
   Research Council (NSERC) of Canada grant number RGPIN 976, and
   Engineering and Physical Sciences Research Council grant number
   GR/R43150, Formal Methods and Testing (FORTEST).
CR Aho A.V., 1988, P IEEE 8 INT S PROT, P75
   [Anonymous], 1971, Theory of Machines and Computations, DOI DOI 10.1016/B978-0-12-417750-5.50022-1
   [Anonymous], 1999, Testing Object-Oriented Systems: Models, Patterns, and Tools
   [Anonymous], 1964, 5 ANN S SWITCH CIRC, DOI DOI 10.1109/SWCT.1964.8
   Barnett M, 2004, LECT NOTES COMPUT SC, V2931, P252
   Broekman Bart., 2003, Testing embedded software
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Duale AY, 2004, IEEE T COMPUT, V53, P614, DOI 10.1109/TC.2004.1275300
   Farchi E, 2002, IBM SYST J, V41, P89, DOI 10.1147/sj.411.0089
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   GONENC G, 1970, IEEE T COMPUT, VC 19, P551, DOI 10.1109/T-C.1970.222975
   Harel D., 1998, MODELING REACTIVE SY
   Haydar M, 2004, LECT NOTES COMPUT SC, V3235, P115
   Hierons RM, 2006, IEEE T COMPUT, V55, P618, DOI 10.1109/TC.2006.80
   Hierons RM, 2004, INFORM PROCESS LETT, V90, P287, DOI 10.1016/j.ipl.2004.03.003
   Hierons RM, 2002, IEEE T COMPUT, V51, P1111, DOI 10.1109/TC.2002.1032630
   *ITU T, 1999, Z100 ITUT
   Larsen P., 1993, LNCS, V670, P268
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   Lenstra J. K., 1976, Networks, V6, P273, DOI 10.1002/net.3230060305
   LUO G, 1994, IEEE T SOFTWARE ENG, V20, P149, DOI 10.1109/32.265636
   Moore E.F., 1956, AUTOMATA STUDIES
   Niske M, 2007, LECT NOTES COMPUT SC, V4680, P301
   Simao A, 2008, LECT NOTES COMPUT SC, V5047, P153, DOI 10.1007/978-3-540-68524-1_12
   Ural H, 1997, IEEE T COMPUT, V46, P93, DOI 10.1109/12.559807
   Vasilevskii M. P., 1973, FAILURE DIAGNOSIS AU
   YAO MG, 1993, IFIP TRANS C, V16, P241
NR 27
TC 16
Z9 16
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2010
VL 17
IS 3
BP 217
EP 250
DI 10.1007/s10515-009-0061-0
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 608HD
UT WOS:000278573200002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, HY
   Chen, ZQ
   Xu, C
AF Wang, Huiyan
   Chen, Ziqi
   Xu, Chang
TI Freeze-and-mutate: abnormal sample identification for DL applications
   through model core analysis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Deep learning models; Abnormal sample identification; Model core
   analyses; Freeze and mutate
AB Deep learning (DL) applications, representing an emerging form of new software, are gaining increasing popularity by their intelligent and adaptive services. However, their service reliability depends highly on the prediction accuracy of their internally-integrated DL models. In practice, DL models are often observed to suffer from ill predictions upon abnormal inputs (e.g., adversarial attacking samples, out-of-distribution (OOD) samples, and etc.), and this could easily lead to unexpected behaviors or even catastrophic consequences (e.g., system crash). One promising way to guard the application reliability is to reveal such abnormal inputs in time before they are fed to the DL models integrated in the concerned applications. Then remedy actions (e.g., discarding or fixing these inputs) can be done to protect applications from acting abnormally. Existing work addressed this revealing problem by either making sample distance-comparison based analysis or generating sufficient model mutants for comparative analysis. However, such treatments caused a restricted focus on samples only, while overlooking the DL models themselves, or had to analyze massive mutants, incurring non-negligible overheads to applications. In this article, we propose a novel approach, NetChopper, to conducting a core analysis on the target DL model, and then partitioning it into two parts, one associating closely with the training knowledge being the model core (expected to be important and thus stable), and the other being the remaining part (expected to be immaterial and thus changeable). Based on such partitioning, NetChopper proceeds to preserve (or freeze) the model core, but mutate the remaining part to produce only a small number of model mutants. Later, NetChopper becomes able to reveal abnormal inputs from normal ones by exploiting these model-relevant and light-weight mutants only. We experimentally evaluated NetChopper by widely-used DL subjects (e.g., MNIST+LeNet4, and CIFAR10+VGG16) and typical abnormal inputs (e.g., adversarial and OOD samples). The results reported NetChopper 's promising AUROC scores in revealing the abnormal degrees of inputs, generally and stably outperforming, or comparably effective as, state-of-the-art techniques (e.g., mMutant, Surprise, and Mahalanobis), and also confirmed its high effectiveness and efficiency (with only marginal online overhead).
C1 [Wang, Huiyan; Chen, Ziqi; Xu, Chang] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210023, Jiangsu, Peoples R China.
   [Wang, Huiyan; Chen, Ziqi; Xu, Chang] Nanjing Univ, Dept Comp Sci & Technol, Nanjing 210023, Jiangsu, Peoples R China.
C3 Nanjing University; Nanjing University
RP Wang, HY (corresponding author), Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210023, Jiangsu, Peoples R China.; Wang, HY (corresponding author), Nanjing Univ, Dept Comp Sci & Technol, Nanjing 210023, Jiangsu, Peoples R China.
EM why@nju.edu.cn; rubychen0611@gmail.com; changxu@nju.edu.cn
RI zhang, zheng/KHY-8870-2024; Chen, Ziqi/HPE-6145-2023; Wang,
   Huiyan/JXW-9178-2024; Wen, Jing/KCL-6614-2024; chen, xiao/KFQ-6812-2024;
   wang, wei/JYP-7819-2024; Pan, Yue/KFS-4602-2024; Liu,
   Xiaohan/KBB-4246-2024; ZHANG, JING/KHY-1073-2024
OI Liu, Xiaohan/0009-0009-5291-2494; 
FU Natural Science Foundation of Jiangsu Province [BK20202001, BK20220771];
   Natural Science Foundation of China [61932021]; Collaborative Innovation
   Center of Novel Software Technology and Industrialization, Jiangsu,
   China
FX This research was supported by the Natural Science Foundation of Jiangsu
   Province under Grant Nos. BK20202001 and BK20220771, and the Natural
   Science Foundation of China under Grant No. 61932021. The authors would
   also like to thank the support from the Collaborative Innovation Center
   of Novel Software Technology and Industrialization, Jiangsu, China.
CR Nguyen A, 2017, PROC CVPR IEEE, P3510, DOI 10.1109/CVPR.2017.374
   [Anonymous], 2007, SEKE
   [Anonymous], About Face ID advanced technology
   [Anonymous], 2016, PRUNING CONVOLUTIONA
   [Anonymous], 1990, Adv Neural Inform Process Syst.
   [Anonymous], ADVERSARIAL DEFENSE
   Autopilot, AUT
   Bojarski M, 2016, Arxiv, DOI [arXiv:1604.07316, 10.48550/arXiv.1604.07316]
   Bulusu S., 2020, Anomalous Instance Detection in Deep Learning: A Survey
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Carlini Nicholas, 2017, ACM WORKSH ART INT S, P3
   Carrara F, 2017, PROCEEDINGS OF THE 15TH INTERNATIONAL WORKSHOP ON CONTENT-BASED MULTIMEDIA INDEXING (CBMI), DOI 10.1145/3095713.3095753
   Cohen G., 2020, Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, P14453
   Cohen G, 2017, IEEE IJCNN, P2921, DOI 10.1109/IJCNN.2017.7966217
   Dia H., 2021, SELF DRIVING CARS AR
   Dosovitskiy A, 2016, PROC CVPR IEEE, P4829, DOI 10.1109/CVPR.2016.522
   Feinman R, 2017, Arxiv, DOI [arXiv:1703.00410, 10.48550/arXiv.1703.00410, DOI 10.48550/ARXIV.1703.00410]
   Fong RC, 2017, IEEE I CONF COMP VIS, P3449, DOI 10.1109/ICCV.2017.371
   FRIGGE M, 1989, AM STAT, V43, P50, DOI 10.2307/2685173
   Gal Y, 2016, PR MACH LEARN RES, V48
   Gerasimou S, 2020, PROC INT CONF SOFTW, P702, DOI 10.1145/3377811.3380391
   Gimpel K., 2016, ABS160800530 CORR
   Gong ZT, 2017, Arxiv, DOI arXiv:1704.04960
   Goodfellow Ian., 2015, STAT-US
   Google, Google translate
   Guo C., 2018, 6 INT C LEARNING REP
   Guo JM, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P739, DOI 10.1145/3236024.3264835
   HASSIBI B, 1993, 1993 IEEE INTERNATIONAL CONFERENCE ON NEURAL NETWORKS, VOLS 1-3, P293, DOI 10.1109/ICNN.1993.298572
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Hendrycks D., 2017, 5 INT C LEARNING REP
   Pham HV, 2019, PROC INT CONF SOFTW, P1027, DOI 10.1109/ICSE.2019.00107
   Karpathy A., 2017, Software 2.0'
   Kim J, 2019, PROC INT CONF SOFTW, P1039, DOI 10.1109/ICSE.2019.00108
   Krizhevsky A., 2009, LEARNING MULTIPLE LA, DOI DOI 10.1145/3065386
   Kurakin A., 2016, Adversarial machine learning at scale
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   LeCun Y., 1998, The MNIST database of handwritten digits.
   Lee K, 2018, ADV NEUR IN, V31
   Li ZN, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P901, DOI 10.1145/3368089.3409696
   Li ZN, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2019), P89, DOI 10.1109/ICSE-NIER.2019.00031
   Lian SQ, 2018, DES AUT CON, DOI 10.1145/3195970.3196020
   Ma L, 2018, IEEE INT CONF AUTOM, P120, DOI 10.1145/3238147.3238202
   Mahendran A, 2015, PROC CVPR IEEE, P5188, DOI 10.1109/CVPR.2015.7299155
   Metzen J.H., 2017, 5 INT C LEARN REPR I
   Mikolov T., 2010, Recurrent neural network based language model
   Montavon G., 2019, EXPLAINABLE INTERPRE, V11700, P193, DOI [10.1007/978-3-030-28954-6_10, DOI 10.1007/978-3-030-28954-6_10]
   Moosavi-Dezfooli SM, 2016, PROC CVPR IEEE, P2574, DOI 10.1109/CVPR.2016.282
   Netzer Yuval, 2011, ADV NEUR INF PROC SY
   Pan R, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P889, DOI 10.1145/3368089.3409668
   Papernot N, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P372, DOI 10.1109/EuroSP.2016.36
   Papers with code, OUT OF DISTR DET
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Ribeiro MT, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1135, DOI 10.1145/2939672.2939778
   RUMELHART DE, 1986, NATURE, V323, P533, DOI 10.1038/323533a0
   Selvaraju RR, 2017, IEEE I CONF COMP VIS, P618, DOI 10.1109/ICCV.2017.74
   Simonyan K., 2014, CORR
   Sitawarin C., 2019, ARXIV
   Szegedy C., 2013, Advances in Neural Information Processing Systems, V26, P2553
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Wan CC, 2022, PROC INT CONF SOFTW, P212, DOI 10.1145/3510003.3510068
   Wan CC, 2021, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE43902.2021.00024
   Wang HY, 2020, PROC INT CONF SOFTW, P727, DOI 10.1145/3377811.3380379
   Wang JY, 2019, PROC INT CONF SOFTW, P1245, DOI 10.1109/ICSE.2019.00126
   Wang Z, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P788, DOI 10.1145/3368089.3409761
   Xiao H, 2017, Arxiv, DOI [arXiv:1708.07747, DOI 10.48550/ARXIV.1708.07747]
   Xie XF, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P146, DOI 10.1145/3293882.3330579
   Xu WL, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23198
   Zeiler M.D., 2014, P EUR C COMP VIS ZUR, P818
   Zhang JM, 2022, IEEE T SOFTWARE ENG, V48, P1, DOI 10.1109/TSE.2019.2962027
   Zhang MS, 2018, IEEE INT CONF AUTOM, P132, DOI 10.1145/3238147.3238187
NR 70
TC 0
Z9 0
U1 3
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
AR 9
DI 10.1007/s10515-022-00373-7
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7Y5PR
UT WOS:000914931500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Lei, ZY
   Zhao, WH
   Ding, ZK
   Xia, MY
   Qi, ZW
AF Lei, Zhanyao
   Zhao, Wenhua
   Ding, Zhenkai
   Xia, Mingyuan
   Qi, Zhengwei
TI AppSPIN: reconfiguration-based responsiveness testing and diagnosing for
   Android Apps
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Responsiveness; Configuration; Android
AB App responsiveness is the most intuitive interpretation of App performance from the users' perspective. Traditional performance profilers only focus on one type of program activity (e.g., CPU profiling). In contrast, the cause of slow responsiveness can be diverse or even due to the joint effect of multiple kinds. Also, various test configurations, such as device hardware and wireless connectivity, can dramatically impact particular program activities and indirectly affect App responsiveness. Conventional mobile testing lacks mechanisms to reveal configuration-sensitive bugs. In this paper, we propose AppSPIN, a tool to diagnose App responsiveness bugs and systematically explore configuration-sensitive bugs automatically. AppSPIN instruments the App to collect program events and UI responsiveness. The instrumented App is exercised with automated monkey testers, and AppSPIN correlates excessive and lengthy program events with poor responsiveness detected at runtime. The diagnosis process also synthesizes the major resource bottleneck for the App under test. After one test run, AppSPIN automatically alters the test configuration with most bottlenecked resources to further explore responsiveness bugs that occur only with particular test configurations. Our experiments with 30 real-world Apps show that AppSPIN can detect 123 unique responsiveness bugs and successfully diagnose the cause for 87% cases with an average of 15-minute test time and negligible overhead. Also, with altered test configurations, AppSPIN uncovers a considerable number of new bugs within four extra test runs.
C1 [Lei, Zhanyao; Zhao, Wenhua; Ding, Zhenkai; Qi, Zhengwei] Shanghai Jiao Tong Univ, Sch Software, Shanghai, Peoples R China.
   [Xia, Mingyuan] Shanghai Bantang Inc, AppetizerIO, Shanghai, Peoples R China.
C3 Shanghai Jiao Tong University
RP Qi, ZW (corresponding author), Shanghai Jiao Tong Univ, Sch Software, Shanghai, Peoples R China.
EM leizhanyao@sjtu.edu.cn; whzhao06@sjtu.edu.cn; bonjour@sjtu.edu.cn;
   ken@appetizer.io; qizhwei@sjtu.edu.cn
OI qi, zhengwei/0000-0003-2730-2319
FU Shanghai Pujiang Program [19PJ1430900]; Shanghai Key Laboratory of
   Scalable Computing and Systems
FX We would like to thank the anonymous reviewers of ICSME for their
   helpful comments. This work was sponsored by Shanghai Pujiang Program
   19PJ1430900 and supported by the Shanghai Key Laboratory of Scalable
   Computing and Systems.
CR [Anonymous], PRIMS ALGORITHM
   [Anonymous], 2016, Android performance tips
   [Anonymous], APPETIZERIO INTEGRAT
   [Anonymous], ANDROID PROFILER PRO
   [Anonymous], ANDROID MONKEY ANDRO
   [Anonymous], TELERIK FIDDLER WEB
   [Anonymous], Google Play - Supported Devices
   [Anonymous], APPIUM OPEN SOURCE T
   [Anonymous], MAXIM EFFICIENT ANDR
   [Anonymous], 2012, 10 USENIX S OP SYST
   Brocanelli M, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190525
   Chen QA, 2014, PROCEEDINGS OF THE 2014 ACM INTERNET MEASUREMENT CONFERENCE (IMC'14), P151, DOI 10.1145/2663716.2663726
   CHEN Y, 2021, 24 INT C FUNDAMENTAL, V2649, P46, DOI DOI 10.1007/978-3-030-71500-7_3
   Das T, 2020, EMPIR SOFTW ENG, V25, P2748, DOI 10.1007/s10664-019-09798-3
   Das T, 2016, PROC IEEE INT CONF S, P443, DOI 10.1109/ICSME.2016.49
   Gao Y, 2017, IEEE INFOCOM SER
   Gordon M.S., 2015, P 13 ANN INT C MOB S, P137, DOI [10.1145/2742647.2742649, DOI 10.1145/2742647.2742649]
   Habchi S, 2018, IEEE INT CONF AUTOM, P6, DOI 10.1145/3238147.3238197
   Hruby T., 2013, Proc. of the USENIX Annual Technical Conference (ATC'13), San Jose, CA, P255
   Huang T., 2016, P 3 ACM WORKSH MOB S, P16, DOI 10.1145/2940353.2940356
   Jovic M, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P155
   Kang Y, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P410, DOI 10.1145/2950290.2950316
   Kwon Yongin., 2013, P 2013 USENIX C ANN, P297
   Li W., 2021, AUTOMATIC PERFORMANC, P367
   Liang CJM, 2014, PROCEEDINGS OF THE 20TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE COMPUTING AND NETWORKING (MOBICOM '14), P519, DOI 10.1145/2639108.2639131
   Lin Y, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P341, DOI 10.1145/2635868.2635903
   Linares-Vásquez M, 2015, PROC IEEE INT CONF S, P352, DOI 10.1109/ICSM.2015.7332486
   Liu YP, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1013, DOI 10.1145/2568225.2568229
   Machiry A., 2013, P 2013 9 JOINT M FDN, P224
   Mudduluru R., 2016, P 25 INT S SOFTWARE
   Pradel M, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI [10.1145/2660193.2660233, 10.1145/2714064.2660233]
   Ravindranath L, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P85, DOI 10.1145/2517349.2522717
   Rosen S, 2015, IMC'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON INTERNET MEASUREMENT CONFERENCE, P339, DOI 10.1145/2815675.2815713
   Wei XT, 2012, MOBICOM 12: PROCEEDINGS OF THE 18TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE COMPUTING AND NETWORKING, P137
   Xiong WL, 2018, PROC IEEE INT CONF S, P36, DOI 10.1109/ICSME.2018.00013
   Xu Qiang., 2013, ACM MOBISYS
   Zhang L., 2013, PROC IEEEACMIFIP INT, P1, DOI [10.1109/CODES-ISSS.2013.6659020, DOI 10.1109/CODES-ISSS.2013.6659020]
   Zhao WH, 2019, PROC IEEE INT CONF S, P449, DOI 10.1109/ICSME.2019.00077
NR 38
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 47
DI 10.1007/s10515-022-00347-9
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2R2ZC
UT WOS:000820979700001
DA 2024-07-18
ER

PT J
AU Araujo, AF
   Gôlo, MPS
   Marcacini, RM
AF Araujo, Adailton F.
   Golo, Marcos P. S.
   Marcacini, Ricardo M.
TI Opinion mining for app reviews: an analysis of textual representation
   and predictive models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Review
DE Opinion mining; Requirements engineering; Machine learning; Mobile
   applications
ID SENTIMENT ANALYSIS; ASPECT EXTRACTION; CLASSIFICATION; WORDS
AB Popular mobile applications receive millions of user reviews. These reviews contain relevant information for software maintenance, such as bug reports and improvement suggestions. The review's information is a valuable knowledge source for software requirements engineering since the apps review analysis helps make strategic decisions to improve the app quality. However, due to the large volume of texts, the manual extraction of the relevant information is an impracticable task. Opinion mining is the field of study for analyzing people's sentiments and emotions through opinions expressed on the web, such as social networks, forums, and community platforms for products and services recommendation. In this paper, we investigate opinion mining for app reviews. In particular, we compare textual representation techniques for classification, sentiment analysis, and utility prediction from app reviews. We discuss and evaluate different techniques for the textual representation of reviews, from traditional Bag-of-Words (BoW) to the most recent state-of-the-art Neural Language models (NLM). Our findings show that the traditional Bag-of-Words model, combined with a careful analysis of text pre-processing techniques, is still competitive. It obtains results close to the NLM in the classification, sentiment analysis and utility prediction tasks. However, NLM proved to be more advantageous since they achieved very competitive performance in all the predictive tasks covered in this work, provide significant dimensionality reduction, and deals more adequately with semantic proximity between the reviews' texts.
   [GRAPHICS]
   .
C1 [Araujo, Adailton F.; Golo, Marcos P. S.; Marcacini, Ricardo M.] Univ Sao Paulo, Inst Math & Comp Sci, USP, POB 668, BR-13560970 Sao Carlos, SP, Brazil.
C3 Universidade de Sao Paulo
RP Araujo, AF (corresponding author), Univ Sao Paulo, Inst Math & Comp Sci, USP, POB 668, BR-13560970 Sao Carlos, SP, Brazil.
EM adailton.araujo@usp.br; marcosgolo@usp.br; ricardo.marcacini@icmc.usp.br
RI Marcacini, Ricardo/Q-6582-2019
OI Marcacini, Ricardo/0000-0002-2309-3487; Araujo,
   Adailton/0000-0002-2392-4818
FU National Council for Scientific and Technological Development (CNPq)
   [426663/2018-7, 133438/2020-1]; FAPESP [2019/25010-5, 2019/07665-4];
   Fundacao de Amparo a Pesquisa do Estado de Sao Paulo (FAPESP)
   [19/07665-4] Funding Source: FAPESP
FX This work was supported by National Council for Scientific and
   Technological Development (CNPq) [process number 426663/2018-7 and
   133438/2020-1], and FAPESP [process number 2019/25010-5 and
   2019/07665-4]. Conflict of interest, Availability of data and material,
   and Code availability, not applicable for this research.
CR Aggarwal Charu C., 2018, MACHINE LEARNING TEX
   Al Kilani N, 2019, 2019 SIXTH INTERNATIONAL CONFERENCE ON SOCIAL NETWORKS ANALYSIS, MANAGEMENT AND SECURITY (SNAMS), P541, DOI [10.1109/SNAMS.2019.8931820, 10.1109/snams.2019.8931820]
   [Anonymous], 2006, Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP 2006), DOI DOI 10.3115/1610075.1610135
   [Anonymous], 2018, MACHINE LEARNING TEX
   [Anonymous], 2020, P 17 NAT M ART COMP
   [Anonymous], 2019, C N AM CHAPTER ASS C
   [Anonymous], 2001, Ph.D. Thesis
   Aralikatte R, 2018, PROCEEDINGS OF THE ACM INDIA JOINT INTERNATIONAL CONFERENCE ON DATA SCIENCE AND MANAGEMENT OF DATA (CODS-COMAD'18), P57, DOI 10.1145/3152494.3152500
   Ben Messaoud M, 2019, LECT NOTES ARTIF INT, V11775, P805, DOI 10.1007/978-3-030-29551-6_71
   Benevenuto Fabricio., 2015, P 21 BRAZILIAN S MUL, P11, DOI [DOI 10.1145/2820426.2820642, 10.1145/2820426.2820642]
   Chen K., 2013, EFFICIENT ESTIMATION, P2
   D'hondt E, 2013, COMPUT LINGUIST, V39, P755, DOI 10.1162/COLI_a_00149
   Dabrowski J, 2020, LECT NOTES COMPUT SC, V12127, P401, DOI 10.1007/978-3-030-49435-3_25
   De Mulder W, 2015, COMPUT SPEECH LANG, V30, P61, DOI 10.1016/j.csl.2014.09.005
   Devlin J., 2018, BERT PRE TRAINING DE
   Dragoni M, 2019, INFORM PROCESS MANAG, V56, P1103, DOI 10.1016/j.ipm.2018.04.010
   Du JH, 2019, LECT NOTES COMPUT SC, V11881, P795, DOI 10.1007/978-3-030-34223-4_50
   Feldman R, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2436256.2436274
   Fu MS, 2018, EXPERT SYST APPL, V113, P33, DOI 10.1016/j.eswa.2018.06.052
   García S, 2010, INFORM SCIENCES, V180, P2044, DOI 10.1016/j.ins.2009.12.010
   Golo Marcos, 2019, PROCEEDING NATL M AR, P262
   Guzman E, 2015, IEEE INT CONF AUTOM, P771, DOI 10.1109/ASE.2015.88
   Guzman E, 2014, INT REQUIR ENG CONF, P153, DOI 10.1109/RE.2014.6912257
   Hutto C., 2014, P INT AAAI C WEB SOC, V8, P216, DOI [DOI 10.1609/ICWSM.V8I1.14550, 10.1609/icwsm.v8i1.14550]
   Kemmler M, 2013, PATTERN RECOGN, V46, P3507, DOI 10.1016/j.patcog.2013.06.005
   Kudraszow NL, 2013, STAT PROBABIL LETT, V83, P1863, DOI 10.1016/j.spl.2013.04.017
   LINDLEY DV, 1972, J ROY STAT SOC B, V34, P1
   Liu B, 2011, DATA CENTRIC SYST AP, P459, DOI 10.1007/978-3-642-19460-3_11
   Liu Yinhan, 2019, ARXIV190711692
   Lu Yue, 2010, WWW '10: Proceedings of the 19th international conference on World wide web, P691, DOI [10.1145/1772690.1772761, DOI 10.1145/1772690.1772761]
   Luiz W, 2018, WEB CONFERENCE 2018: PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE (WWW2018), P1909, DOI 10.1145/3178876.3186168
   Maalej W, 2016, REQUIR ENG, V21, P311, DOI 10.1007/s00766-016-0251-9
   Maalej W, 2016, IEEE SOFTWARE, V33, P48, DOI 10.1109/MS.2015.153
   Marcacini RM, 2018, DECIS SUPPORT SYST, V114, P70, DOI 10.1016/j.dss.2018.08.009
   Martin W, 2017, IEEE T SOFTWARE ENG, V43, P817, DOI 10.1109/TSE.2016.2630689
   Murtagh F., 1991, NEUROCOMPUTING, V2, P183
   Otter DW, 2021, IEEE T NEUR NET LEAR, V32, P604, DOI 10.1109/TNNLS.2020.2979670
   Pagano D, 2013, S VIS LANG HUM CEN C, P125, DOI 10.1109/RE.2013.6636712
   Reimers N, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P3982
   Ribeiro MT, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1135, DOI 10.1145/2939672.2939778
   Rudkowsky E, 2018, COMMUN METHODS MEAS, V12, P140, DOI 10.1080/19312458.2018.1455817
   Sanh, 2019, P 5 WORKSH EN EFF MA
   Shah FA, 2019, PROCEEDINGS OF THE 3RD ACM SIGSOFT INTERNATIONAL WORKSHOP ON APP MARKET ANALYTICS (WAMA '19), P40, DOI 10.1145/3340496.3342756
   Smola AJ, 2004, STAT COMPUT, V14, P199, DOI 10.1023/B:STCO.0000035301.49549.88
   Stanik C, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P220, DOI 10.1109/REW.2019.00046
   Tan P.N., 2013, Introduction to Data Mining: Pearson New International Edition
   Tax DMJ, 2004, MACH LEARN, V54, P45, DOI 10.1023/B:MACH.0000008084.60811.49
   Thelwall M, 2010, J AM SOC INF SCI TEC, V61, P2544, DOI 10.1002/asi.21416
   Trawinski B, 2012, INT J AP MAT COM-POL, V22, P867, DOI 10.2478/v10006-012-0064-z
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang C, 2018, LECT NOTES COMPUT SC, V11208, P384, DOI 10.1007/978-3-030-01225-0_23
   Yogarajan V., 2020, ACIIDS 2020, P97
   Zeng BQ, 2019, APPL SCI-BASEL, V9, DOI 10.3390/app9163389
   Zhang Zhu., 2006, CIKM '06, P51, DOI [10.1145/1183614.1183626, DOI 10.1145/1183614.1183626]
   Zhao LL, 2019, FUTURE INTERNET, V11, DOI 10.3390/fi11020052
   Zhou XH, 2020, AAAI CONF ARTIF INTE, V34, P9733
NR 56
TC 14
Z9 14
U1 2
U2 41
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 5
DI 10.1007/s10515-021-00301-1
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XD7EW
UT WOS:000722868300005
DA 2024-07-18
ER

PT J
AU Denney, E
   Pai, G
AF Denney, Ewen
   Pai, Ganesh
TI Tool support for assurance case development
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Assurance cases; Safety cases; Automation; Tool support; Formal methods
ID SAFETY; CONFIDENCE; ARGUMENTS
AB Argument-based assurance cases, often represented and organized using graphical argument structures, are increasingly being used in practice to provide assurance to stakeholders, e.g., regulatory authorities, that a system is acceptable for its intended use with respect to dependability and safety concerns. In general, comprehensive system-wide assurance arguments aggregate a substantial amount of diverse information, such as the results of safety analysis, requirements analysis, design, verification and other engineering activities. Although a variety of assurance case tools exist, many desirable operations on argument structures such as hierarchical and modular abstraction, argument pattern instantiation, and inclusion/extraction of richly structured information have limited to no automation support. To close this automation gap, over the past four years we have been developing a toolset for assurance case automation, AdvoCATE, at the NASA Ames Research Center. This paper describes how AdvoCATE is being engineered atop formal foundations for assurance case argument structures, to provide unique capabilities for: (a) automated creation and assembly of assurance arguments, (b) integration of formal methods into wider assurance arguments, (c) automated pattern instantiation, (d) hierarchical abstraction, (e) queries and views, and (f) verification of arguments. We (and our colleagues) have used AdvoCATE in real projects for safety assurance, in the context of unmanned aircraft systems.
C1 [Denney, Ewen; Pai, Ganesh] NASA, Ames Res Ctr, SGT, Moffett Field, CA 94035 USA.
C3 Stinger Ghaffarian Technologies, Inc. (SGT); National Aeronautics &
   Space Administration (NASA); NASA Ames Research Center
RP Denney, E; Pai, G (corresponding author), NASA, Ames Res Ctr, SGT, Moffett Field, CA 94035 USA.
EM ewen.denney@nasa.gov; ganesh.pai@nasa.gov
RI Pai, Ganesh/G-4516-2013
OI Pai, Ganesh/0000-0002-9848-3754
FU Safe Autonomous Systems Operations (SASO) project of the Airspace
   Operations and Safety Program, of the NASA Aeronautics Research Mission
   Directorate
FX This work has been supported, in part, by the Safe Autonomous Systems
   Operations (SASO) project of the Airspace Operations and Safety Program,
   of the NASA Aeronautics Research Mission Directorate.
CR Adelard LLP., 2011, Assurance and safety case environment (asce)
   [Anonymous], STANDARD BEST PRACTI
   [Anonymous], ENG SAF MAN
   [Anonymous], 89001 FAA US DEP TRA
   [Anonymous], P UK MOD EQ SAF ASS
   [Anonymous], 34 INT SYST SAF C IS
   [Anonymous], P 16 IEEE INT S HIGH
   [Anonymous], BUILD SAF CAS DEL AD
   [Anonymous], P 25 INT C COMP AID
   [Anonymous], DAPSSH091 EUROCONTRO
   [Anonymous], P SAF CRIT SYST S
   [Anonymous], P 33 IEEE AIAA DIG A
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], SAF MAN REQ DEF SYST
   [Anonymous], P 28 INT SYST SAF C
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], UNM AIRCR SYST UAS O
   [Anonymous], P 37 INT C SOFTW ENG
   [Anonymous], SMALL UNM AIRCR CONG
   [Anonymous], 4754 ARP SAE
   [Anonymous], WHIT BOOKL INTR SYST
   [Anonymous], NASATM2015218492 AM
   [Anonymous], 2007, IAEA SAF GLOSS TERM
   [Anonymous], 2010, GUIDANCE IND FDA STA
   [Anonymous], 2008, NAV
   [Anonymous], 201417 SIM RES LAB
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], INFOTECH AEROSPACE
   [Anonymous], 6 EUR C EMB REAL TIM
   [Anonymous], ARXIV150202605
   [Anonymous], CISC VIS NETW IND GL
   [Anonymous], LNCS
   [Anonymous], 2010012000 SAE
   [Anonymous], 2013 SAFECOMP WORKSH
   [Anonymous], 2013, P 32 S PRINC DAT SYS
   [Anonymous], P 29 INT SYST SAF C
   [Anonymous], TECHNICAL REPORT
   [Anonymous], 2013, P 1 INT WORKSH ARG A
   [Anonymous], PREL SAF CAS ADS B A
   [Anonymous], 2012, IEEEIFIP INT C DEPEN, DOI DOI 10.1109/DSN.2012
   [Anonymous], WORKSH P 2014 IEEE I
   [Anonymous], P AUSTR INF SEC WORK
   [Anonymous], 1996, 4761 ARP SAE
   [Anonymous], 2015, P 45 ANN IEEE IFIP I
   [Anonymous], STRUCT ASS CAS MET S
   [Anonymous], P 1 INT WORKSH ASS C
   [Anonymous], EVIDENCE USING SAFET
   [Anonymous], IND PERSP SAF CRIT S
   Ayoub A., 2013, 21 SAFETY CRITICAL S, P127
   Barranco M., 2011, P 16 IEEE INT C EM T, P1
   Basir N, 2008, LECT NOTES COMPUT SC, V5219, P249, DOI 10.1007/978-3-540-87698-4_22
   Bloomfield Robin, 2010, P 18 SAF CRIT SYST S
   Blume M, 1999, ACM T PROGR LANG SYS, V21, P813, DOI 10.1145/325478.325518
   Clothier R., 2017, P 17 AIAA AV TECHN I
   Cruanes S, 2013, LECT NOTES COMPUT SC, V7737, P275
   Denney Ewen, 2013, Computer Safety, Reliability and Security. 32nd International Conference, SAFECOMP 2013. Proceedings: LNCS 8153, P21, DOI 10.1007/978-3-642-40793-2_3
   Denney Ewen, 2012, Computer Safety, Reliability, and Security. Proceedings of the 31st International Conference, SAFECOMP 2012, P1, DOI 10.1007/978-3-642-33678-2_1
   Denney E, 2014, IEEE T RELIAB, V63, P830, DOI 10.1109/TR.2014.2335995
   Denney E, 2014, LECT NOTES COMPUT SC, V8666, P294, DOI 10.1007/978-3-319-10506-2_20
   Denney E, 2013, 2013 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P375, DOI 10.1109/ISSREW.2013.6688924
   Denney E, 2011, INT SYMP EMP SOFTWAR, P380, DOI 10.1109/ESEM.2011.53
   Dezfuli H., 2011, NASA System Safety Handbook, V1
   Eagles Sherman, 2014, Biomed Instrum Technol, V48, P24, DOI 10.2345/0899-8205-48.1.24
   Felici M, 2006, LECT NOTES COMPUT SC, V3943, P81
   Fenn J., 2007, P 15 SAF CRIT SYST S
   Gacek Andrew., 2014, P 2014 ACM SIGADA AN, P19
   Gallina B, 2014, 2014 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P204, DOI 10.1109/ISSREW.2014.30
   Goodenough JB, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1161, DOI 10.1109/ICSE.2013.6606668
   Greenwell W., 2006, P INT SYST SAF C
   Hawkins R, 2015, IEEE HI ASS SYS ENGR, P110, DOI 10.1109/HASE.2015.25
   International Organization for Standardization (ISO), 2011, ISO 26262
   Kelly T.P., 1998, THESIS
   Littlewood B, 2007, IEEE T SOFTWARE ENG, V33, P347, DOI 10.1109/TSE.2007.1002
   Matsuno Yutaka, 2010, Proceedings 2010 IEEE 12th International Symposium on High-Assurance Systems Engineering (HASE), P170, DOI 10.1109/HASE.2010.26
   MCDERMID JA, 1994, RELIAB ENG SYST SAFE, V43, P111, DOI 10.1016/0951-8320(94)90057-4
   Ratiu Daniel, 2015, Computer Safety, Reliability and Security. SAFECOMP 2015 Workshops, ASSURE, DECSoS, ISSE, ReSA4CI and SASSUR. Proceedings: LNCS 9338, P72, DOI 10.1007/978-3-319-24249-1_7
   Ruiz A., 2015, SYSTEM SOFTWARE SERV, V543, P63
   Rushby J., 2015, Technical report. SRI-CSL-15-01
   Taguchi K, 2014, 2014 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P192, DOI 10.1109/ISSREW.2014.79
   Toulmin S., 1969, USES ARGUMENTS
   Wilson SP, 1996, IEEE SYMPOSIUM AND WORKSHOP ON ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P198, DOI 10.1109/ECBS.1996.494529
   Yang JB, 2002, IEEE T SYST MAN CY A, V32, P289, DOI 10.1109/TSMCA.2002.802746
NR 82
TC 49
Z9 51
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2018
VL 25
IS 3
BP 435
EP 499
DI 10.1007/s10515-017-0230-5
PG 65
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP2SY
UT WOS:000440687600002
DA 2024-07-18
ER

PT J
AU Li, CL
   Zhang, J
   Chen, Y
   Li, LY
AF Li, Chunlin
   Zhang, Jing
   Chen, Yi
   Li, Layuan
TI Efficient QoS aware two-layer service allocation in hybrid mobile cloud
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Mobile cloud; QoS aware service allocation; Load-balancing; Hybrid cloud
ID RESOURCE; MODEL; COST
AB The paper proposes QoS based service allocation optimization in hybrid mobile cloud. The optimization formulation of the hybrid mobile cloud utility adopts a network utility maximization framework. The proposed hybrid cloud service allocation framework leads to a decomposition of the overall hybrid mobile cloud system problem into a separate problem for mobile user and one for the hybrid cloud provider. The mathematic solution of proposed model is concerned with the variables of local and public cloud. When the equilibrium prices of public cloud services and local cloud services are obtained, the system performance can be optimized. The QoS based two-layer service allocation optimization problem leads to two sub-algorithms. Interactions between the two sub-problems are through optimal variables for capacities of local or public cloud resources and service need. When the convergence points of the two sub-problems of public and local cloud service allocation are obtained, the optimal solution for hybrid mobile cloud utility is acquired. The system design issues of QoS based two-layer service allocation model are also given. The experiments study how data size, request arrival rate, number of cloud nodes have the effect on proposed algorithm and other compared algorithms.
C1 [Li, Chunlin; Zhang, Jing; Li, Layuan] Wuhan Univ Technol, Dept Comp Sci, Wuhan 430063, Hubei, Peoples R China.
   [Li, Chunlin; Chen, Yi] Beijing Technol & Business Univ, Beijing Key Lab Big Data Technol Food Safety, Beijing, Peoples R China.
   [Li, Chunlin] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210093, Jiangsu, Peoples R China.
C3 Wuhan University of Technology; Beijing Technology & Business
   University; Nanjing University
RP Li, CL (corresponding author), Wuhan Univ Technol, Dept Comp Sci, Wuhan 430063, Hubei, Peoples R China.; Li, CL (corresponding author), Beijing Technol & Business Univ, Beijing Key Lab Big Data Technol Food Safety, Beijing, Peoples R China.; Li, CL (corresponding author), Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210093, Jiangsu, Peoples R China.
EM chunlin74@aliyun.com
FU National Natural Science Foundation (NSF) [61472294, 61672397,
   61771354]; Open Research Fund of Beijing Key Laboratory of Big Data
   Technology for Food Safety, Beijing Technology and Business University
   [BKBD-2017KF01]
FX The authors thank the editors and the anonymous reviewers for their
   helpful comments and suggestions. The work was supported by the National
   Natural Science Foundation (NSF) under Grants (Nos. 61472294, 61672397,
   61771354), the Open Research Fund of Beijing Key Laboratory of Big Data
   Technology for Food Safety, Beijing Technology and Business University
   (Grant No. BKBD-2017KF01). Any opinions, findings, and conclusions are
   those of the authors and do not necessarily reflect the views of the
   above agencies.
CR Akbar A, 2017, 2017 SECOND INTERNATIONAL CONFERENCE ON FOG AND MOBILE EDGE COMPUTING (FMEC), P213, DOI 10.1109/FMEC.2017.7946433
   Aldwyan Y, 2017, CLOSER: PROCEEDINGS OF THE 7TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING AND SERVICES SCIENCE, P225, DOI 10.5220/0006359602530265
   Balaban Y, 2016, ISTANB UNIV ILET FAK, P1, DOI 10.17064/iuifd.289336
   Barbarossa S, 2013, IEEE INT WORK SIGN P, P26, DOI 10.1109/SPAWC.2013.6612005
   Cai YG, 2016, IEEE T VEH TECHNOL, V65, P1536, DOI 10.1109/TVT.2015.2411739
   Champati JP, 2015, 2015 IEEE 23RD INTERNATIONAL SYMPOSIUM ON QUALITY OF SERVICE (IWQOS), P31, DOI 10.1109/IWQoS.2015.7404699
   Chen LB, 2015, 2015 IEEE 2ND INTERNATIONAL CONFERENCE ON CYBER SECURITY AND CLOUD COMPUTING (CSCLOUD), P19, DOI 10.1109/CSCloud.2015.60
   Chen MH, 2016, INT CONF ACOUST SPEE, P3516, DOI 10.1109/ICASSP.2016.7472331
   Chopra N, 2013, 2013 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI), P840, DOI 10.1109/ICACCI.2013.6637285
   Gai KK, 2016, J NETW COMPUT APPL, V59, P46, DOI 10.1016/j.jnca.2015.05.016
   Genez T.A.L, 2015, IEEE T CLOUD COMPUT
   Ghasemi-Falavarjani S, 2015, COMPUT ELECTR ENG, V44, P218, DOI 10.1016/j.compeleceng.2015.02.006
   Jha RS, 2016, PROCEDIA COMPUT SCI, V78, P350, DOI 10.1016/j.procs.2016.02.072
   Karamoozian Amir, 2016, 2016 13th IEEE Annual Consumer Communications & Networking Conference (CCNC), P732, DOI 10.1109/CCNC.2016.7444870
   Kelly FP, 1998, J OPER RES SOC, V49, P237, DOI 10.2307/3010473
   Khaledi M., 2016, ARXIV160808521
   Kuchuk G, 2015, 2015 INTERNATIONAL CONFERENCE ON INFORMATION AND DIGITAL TECHNOLOGIES (IDT), P266, DOI 10.1109/DT.2015.7222982
   Kuhn H.W., 1951, P 2 BERKELEY S MATH, DOI DOI 10.1007/BF01582292
   Kwak J, 2015, IEEE J SEL AREA COMM, V33, P2510, DOI 10.1109/JSAC.2015.2478718
   Kwon YW, 2014, AUTOMAT SOFTW ENG, V21, P345, DOI 10.1007/s10515-013-0136-9
   Lee S, 2016, WIRELESS PERS COMMUN, V86, P57, DOI 10.1007/s11277-015-2976-z
   Li CL, 2015, WIRELESS PERS COMMUN, V83, P581, DOI 10.1007/s11277-015-2410-6
   Li CL, 2015, J SUPERCOMPUT, V71, P1196, DOI 10.1007/s11227-014-1345-0
   Li CL, 2014, INFORM SCIENCES, V279, P654, DOI 10.1016/j.ins.2014.04.018
   Liu FM, 2017, MOBILE NETW APPL, V22, P153, DOI 10.1007/s11036-016-0738-0
   LUH PB, 1993, IEEE T AUTOMAT CONTR, V38, P1066, DOI 10.1109/9.231461
   Ma J, 2016, INT IMMUNOPHARMACOL, V39, P1, DOI 10.1016/j.intimp.2016.06.034
   Moon S., 2015, Cloud Computing, V2015, P76
   Nabi Syed Waqar, 2015, 2015 International Conference on Reconfigurable Computing and FPGAs (ReConFig), P1, DOI 10.1109/ReConFig.2015.7393365
   Colombo-Mendoza LO, 2014, AUTOMAT SOFTW ENG, V21, P391, DOI 10.1007/s10515-014-0143-5
   Park J, 2012, LECT NOTES COMPUT SC, V7154, P263
   Raei H, 2017, J SUPERCOMPUT, V73, P1274, DOI 10.1007/s11227-016-1830-8
   Rezaeian A, 2016, INT CONF CLOUD ENG, P230, DOI 10.1109/IC2E.2016.42
   Sanaei Z, 2015, IEEE INT CONF MOB CL, P157, DOI 10.1109/MobileCloud.2015.28
   Sharif S, 2014, INT CONF CLOUD COMP, P455, DOI 10.1109/CloudCom.2014.128
   Shi T, 2016, PERVASIVE MOB COMPUT, V27, P90, DOI 10.1016/j.pmcj.2015.07.005
   Sun Y, 2017, AUTOMAT SOFTW ENG, V24, P101, DOI 10.1007/s10515-016-0191-0
   Wang XL, 2014, IEEE J BIOMED HEALTH, V18, P739, DOI 10.1109/JBHI.2013.2286157
   Wohlin C., 2012, Experimentation in Software Engineering
   Yang Steven, 2016, 2016 Conference on Precision Electromagnetic Measurements (CPEM), P1, DOI 10.1109/CPEM.2016.7540734
   Zarei MH, 2016, 2016 SECOND INTERNATIONAL CONFERENCE ON WEB RESEARCH (ICWR), P43, DOI 10.1109/ICWR.2016.7498444
NR 41
TC 1
Z9 1
U1 0
U2 11
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2018
VL 25
IS 3
BP 569
EP 593
DI 10.1007/s10515-018-0233-x
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP2SY
UT WOS:000440687600005
DA 2024-07-18
ER

PT J
AU Araújo, AA
   Paixao, M
   Yeltsin, I
   Dantas, A
   Souza, J
AF Araujo, Allysson Allex
   Paixao, Matheus
   Yeltsin, Italo
   Dantas, Altino
   Souza, Jerffeson
TI An Architecture based on interactive optimization and machine learning
   applied to the next release problem
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Next release problem; Interactive optimization; Machine learning; Search
   based software engineering
ID EVOLUTIONARY COMPUTATION; SEARCH; PRIORITIZATION; SELECTION; FATIGUE;
   SYSTEMS
AB The next release problem (NRP) consists of selecting which requirements will be implemented in the next release of a software system. For many search based software engineering approaches to the NRP, there is still a lack of capability to efficiently incorporate human experience and preferences in the search process. Therefore, this paper proposes an architecture to deal with this issue, where the decision maker (DM) and his/her tacit assessments are taken into account during the solutions evaluations alongside the interactive genetic algorithm. Furthermore, a learning model is employed to avoid an overwhelming number of interactions. An empirical study involving software engineer practitioners, different instances, and different machine learning techniques was performed to assess the feasibility of the architecture to incorporate human knowledge in the overall optimization process. Obtained results indicate the architecture can assist the DM in selecting a set of requirements that properly incorporate his/her expertise, while optimizing other explicit measurable aspects equally important to the next release planning. On a scale of 0 (very ineffective) to 5 (very effective), all participants found the experience of interactively selecting the requirements using the approach as a 4 (effective).
C1 [Araujo, Allysson Allex; Yeltsin, Italo; Dantas, Altino; Souza, Jerffeson] Univ Estadual Ceara, Optimizat Software Engn Grp, 1700 Dr Silas Munguba Ave, BR-60714903 Fortaleza, Ceara, Brazil.
   [Paixao, Matheus] UCL, CREST Ctr, Malet Pl, London WC1E 6BT, England.
C3 Universidade Estadual do Ceara; University of London; University College
   London
RP Araújo, AA (corresponding author), Univ Estadual Ceara, Optimizat Software Engn Grp, 1700 Dr Silas Munguba Ave, BR-60714903 Fortaleza, Ceara, Brazil.
EM allysson.araujo@uece.br; matheus.paixao.14@ucl.ac.uk;
   italo.yeltsin@uece.br; altino.dantas@uece.br; jerffeson.souza@uece.br
RI Araújo, Allysson Allex/Y-5188-2019
OI Araújo, Allysson Allex/0000-0003-2108-2335; Paixao,
   Matheus/0000-0002-1775-7259; Souza, Jerffeson/0000-0001-8361-4806
CR [Anonymous], P 3 BRAZ WORKSH SEAR
   [Anonymous], 2015, P GECCO COMP
   [Anonymous], 2012, J THEORETICAL APPL C
   [Anonymous], 1999, INT SERIES OPERATION
   [Anonymous], THESIS
   Araújo AA, 2014, LECT NOTES COMPUT SC, V8636, P228
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Arcuri A, 2011, LECT NOTES COMPUT SC, V6956, P33, DOI 10.1007/978-3-642-23716-4_6
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Bagnall AJ, 2001, INFORM SOFTWARE TECH, V43, P883, DOI 10.1016/S0950-5849(01)00194-X
   Baker P, 2006, PROC IEEE INT CONF S, P176
   Barros MD, 2011, LECT NOTES COMPUT SC, V6956, P268, DOI 10.1007/978-3-642-23716-4_24
   Bavota Gabriele, 2012, Search Based Software Engineering. Proceedings of the 4th International Symposium (SSBSE 2012), P75, DOI 10.1007/978-3-642-33119-0_7
   Carlshamre P, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P84
   Cho SB, 2002, APPL INTELL, V16, P129, DOI 10.1023/A:1013614519179
   Dantas Altino, 2015, Search-Based Software Engineering. 7th International Symposium, SSBSE 2015. Proceedings: LNCS 9275, P341, DOI 10.1007/978-3-319-22183-0_32
   del Sagrado Jose, 2010, 2010 Proceedings of Second International Symposium on Search Based Software Engineering (SSBSE), P67, DOI 10.1109/SSBSE.2010.18
   Ferrucci F., 2014, Softw. Proj. Manag. Chang. World, P373
   Ghannem Adnane, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P96, DOI 10.1007/978-3-642-39742-4_9
   Glass R. L., 2002, FACTS FALLACIES SOFT
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Han J, 2012, MOR KAUF D, P1
   Harman M, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P58, DOI 10.1109/METRIC.2004.1357891
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Harman M, 2012, LECT NOTES COMPUT SC, V7007, P1
   Harman M, 2007, INT C PROGRAM COMPRE, P3
   HAYKIN S.S., 2001, Redes Neurais, V2
   He Jiang, 2010, Proceedings of the 2nd International Conference on Software Engineering and Data Mining (SEDM 2010), P166
   Hsu FC, 2005, NEW GENERAT COMPUT, V23, P115, DOI 10.1007/BF03037489
   Kamalian R, 2006, IEEE INT CONF FUZZY, P678, DOI 10.1109/FUZZY.2006.1681784
   Karim MR, 2014, LECT NOTES COMPUT SC, V8636, P123
   Marculescu Bogdan, 2012, Search Based Software Engineering. Proceedings of the 4th International Symposium (SSBSE 2012), P273, DOI 10.1007/978-3-642-33119-0_21
   Marculescu B., 2015, ARXIV151204812
   Marculescu B, 2015, APPL SOFT COMPUT, V29, P26, DOI 10.1016/j.asoc.2014.12.025
   Marculescu B, 2013, 2013 12TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2013), VOL 2, P102, DOI 10.1109/ICMLA.2013.113
   Miettinen K., 2016, MULTIPLE CRITERIA DE, P927, DOI [DOI 10.1007/978-1-4939-3094-4_22, 10.1007/978-1-4939-3094-4_22]
   Mitchell T. M., 1997, MACHINE LEARNING
   Palit A K., 2005, Automatisierungstechnik, DOI DOI 10.1007/1-84628-184-9
   Parmee I., 2006, DS 36
   Pitangueira AM, 2015, INT REQUIR ENG CONF, P382, DOI 10.1109/RE.2015.7320455
   Pitangueira AM, 2015, J SYST SOFTWARE, V103, P267, DOI 10.1016/j.jss.2014.09.038
   ROUSSEEUW PJ, 1984, J AM STAT ASSOC, V79, P871, DOI 10.2307/2288718
   SCHACTER DL, 1987, J EXP PSYCHOL LEARN, V13, P501, DOI 10.1037/0278-7393.13.3.501
   Semet Y., 2002, Interactive evolutionary computation: a survey of existing theory
   Shackelford M, 2004, ADAPTIVE COMPUTING IN DESIGN AND MANUFACTURE VI, P197, DOI 10.1007/978-0-85729-338-1_17
   Shackelford M.R.N., 2007, P 9 ANN C COMP GEN E, P2933, DOI [10.1145/1274000.1274100, DOI 10.1145/1274000.1274100]
   Simons CL, 2013, SOFT COMPUT, V17, P2147, DOI 10.1007/s00500-013-1039-1
   Simons CL, 2014, SWARM INTELL-US, V8, P139, DOI 10.1007/s11721-014-0094-2
   Simons CL, 2012, IEEE T SYST MAN CY C, V42, P1797, DOI 10.1109/TSMCC.2012.2225103
   Simons CL, 2010, IEEE SYS MAN CYBERN, P3397
   Simons CL, 2010, IEEE T SOFTWARE ENG, V36, P798, DOI 10.1109/TSE.2010.34
   Takagi H, 2001, P IEEE, V89, P1275, DOI 10.1109/5.949485
   Takagi H., 1998, Proceedings of IEEE International Conference on Intelligent Engineering Systems (INES'98), P17, DOI [10.1109/5.949485, DOI 10.1109/5.949485]
   Tonella P., 2010, 2010 Proceedings of Second International Symposium on Search Based Software Engineering (SSBSE), P57, DOI 10.1109/SSBSE.2010.17
   Tonella P, 2013, INFORM SOFTWARE TECH, V55, P173, DOI 10.1016/j.infsof.2012.07.003
   van den Akker J.M., 2005, P 11 INT WORKSH REQ
   Wang SF, 2006, IEEE C EVOL COMPUTAT, P2180
   Witten I. H., 2005, DATA MINING PRACTICA
   Xuan JF, 2012, IEEE T SOFTWARE ENG, V38, P1195, DOI 10.1109/TSE.2011.92
   Zhang D, 2003, SOFTWARE QUAL J, V11, P87, DOI 10.1023/A:1023760326768
   Zhang Y, 2008, LECT NOTES COMPUT SC, V5025, P88, DOI 10.1007/978-3-540-69062-7_8
NR 61
TC 28
Z9 29
U1 1
U2 15
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2017
VL 24
IS 3
BP 623
EP 671
DI 10.1007/s10515-016-0200-3
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EW3KK
UT WOS:000402394000006
DA 2024-07-18
ER

PT J
AU Syer, MD
   Shang, WY
   Jiang, ZM
   Hassan, AE
AF Syer, Mark D.
   Shang, Weiyi
   Jiang, Zhen Ming
   Hassan, Ahmed E.
TI Continuous validation of performance test workloads
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Performance testing; Continuous testing; Workload characterization;
   Workload comparison; Execution logs
ID GENERATION; MAPREDUCE; SYSTEMS
AB The rise of large-scale software systems poses many new challenges for the software performance engineering field. Failures in these systems are often associated with performance issues, rather than with feature bugs. Therefore, performance testing has become essential to ensuring the problem-free operation of these systems. However, the performance testing process is faced with a major challenge: evolving field workloads, in terms of evolving feature sets and usage patterns, often lead to "outdated" tests that are not reflective of the field. Hence performance analysts must continually validate whether their tests are still reflective of the field. Such validation may be performed by comparing execution logs from the test and the field. However, the size and unstructured nature of execution logs makes such a comparison unfeasible without automated support. In this paper, we propose an automated approach to validate whether a performance test resembles the field workload and, if not, determines how they differ. Performance analysts can then update their tests to eliminate such differences, hence creating more realistic tests. We perform six case studies on two large systems: one open-source system and one enterprise system. Our approach identifies differences between performance tests and the field with a precision of 92 % compared to only 61 % for the state-of-the-practice and 19 % for a conventional statistical comparison.
C1 [Syer, Mark D.; Shang, Weiyi; Hassan, Ahmed E.] Queens Univ, Sch Comp, SAIL, Kingston, ON, Canada.
   [Jiang, Zhen Ming] York Univ, Dept Elect Engn & Comp Sci, Toronto, ON, Canada.
C3 Queens University - Canada; York University - Canada
RP Syer, MD (corresponding author), Queens Univ, Sch Comp, SAIL, Kingston, ON, Canada.
EM mdsyer@cs.queensu.ca; swy@cs.queensu.ca; zmjiang@cse.yorku.ca;
   ahmed@cs.queensu.ca
RI Hassan, Ahmed/AAB-7241-2019; KHALIFA, AHMED khalifa/HKF-2246-2023; Ali,
   Ahmed/HOF-4672-2023
OI KHALIFA, AHMED khalifa/0000-0002-2918-7572; 
CR Adam K., 2012, PROCESS MILLION SONG
   [Anonymous], 1908, BIOMETRIKA, V6, P1
   Ausick P., 2012, NASDAQ GETS CHEAP FA
   AVRITZER A, 1995, IEEE T SOFTWARE ENG, V21, P705, DOI 10.1109/32.464549
   Avritzer A., 1994, SIGSOFT Software Engineering Notes, P44
   Bataille J., 2013, OPERATIONAL PROGR RE
   Benoit D., 2013, NASDAQS BLOW BY BLOW
   Bernat Andrew R., 2011, P 10 ACM SIGPLAN SIG, P9, DOI 10.1145/2024569.2024572
   Bertolotti L, 2001, PERFORM EVALUATION, V46, P65, DOI 10.1016/S0166-5316(01)00047-5
   Cai Y., 2007, Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering, ASE '07, P353
   Calinski T., 1974, Communications in Statistics-Simulation and Computation, V3, P1, DOI [10.1080/03610927408827101, DOI 10.1080/03610927408827101]
   Cha S.-H., 2007, Int. J. Math. Models Methods Appl. Sci., V1, P300
   Chen Y, 2012, PROC VLDB ENDOW, V5, P1802, DOI 10.14778/2367502.2367519
   Cheng J., 2008, S JOBS MOBILEME
   Cohen J., 1988, STAT POWER ANAL BEHA
   Coleman P, 2011, AVOIDABLE COST DOWNT
   Cornelissen B, 2009, IEEE T SOFTWARE ENG, V35, P684, DOI 10.1109/TSE.2009.28
   De Barros M, 2007, I C DEPEND SYS NETWO, P612, DOI 10.1109/DSN.2007.102
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dean J, 2013, COMMUN ACM, V56, P74, DOI 10.1145/2408776.2408794
   Draheim D, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P55
   Duda R., 1973, Pattern Classification and Scene Analysis
   Elliott A.C., 2006, STAT ANAL QUICK REFE
   Frades I, 2010, METHODS MOL BIOL, V593, P81, DOI 10.1007/978-1-60327-194-3_5
   Fulekar MH., 2008, Bioinformatics: Applications in life and environmental science
   Greenwood D., 2007, P 6 INT JOINT C AUT, P1412
   Harris C., 2011, IT DOWNTIME COSTS 26
   Hassan A.E., 2007, P INT WORKSH SOFTW P, P209
   Hassan AE, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P713, DOI 10.1145/1368088.1379445
   Howell Jr T., 2014, PRICE FIXING UPGRADI
   Huang A., 2008, P NZ COMP SCI RES ST, P44
   Jiang ZM, 2008, J SOFTW MAINT EVOL-R, V20, P249, DOI 10.1002/smr.374
   Jiang ZM, 2009, PROC IEEE INT CONF S, P125, DOI 10.1109/ICSM.2009.5306331
   Jiang ZM, 2008, PROC IEEE INT CONF S, P307, DOI 10.1109/ICSM.2008.4658079
   Jiang ZL, 2013, THESIS
   Kampenes VB, 2007, INFORM SOFTWARE TECH, V49, P1073, DOI 10.1016/j.infsof.2007.02.015
   Kavulya Soila, 2010, Proceedings 2010 10th IEEE/ACM International Conference on Cluster, Cloud and Grid Computing (CCGrid), P94, DOI 10.1109/CCGRID.2010.112
   Klose O., 2014, HADOOP LINUX AZURE
   Kremenek T, 2003, LECT NOTES COMPUT SC, V2694, P295
   Krishnamurthy D, 2006, IEEE T SOFTWARE ENG, V32, P868, DOI 10.1109/TSE.2006.106
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Laurenzano MA, 2015, CLUSTER COMPUT, V18, P1, DOI 10.1007/s10586-013-0307-2
   Meira J. A., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P642, DOI 10.1109/ICST.2012.153
   Menascé DA, 2002, IEEE INTERNET COMPUT, V6, P70, DOI 10.1109/MIC.2002.1020328
   MILLIGAN GW, 1985, PSYCHOMETRIKA, V50, P159, DOI 10.1007/BF02294245
   MOJENA R, 1977, COMPUT J, V20, P359, DOI 10.1093/comjnl/20.4.359
   Nagappan Meiyappan, 2009, 2009 20th International Symposium on Software Reliability Engineering (ISSRE 2009), P41, DOI 10.1109/ISSRE.2009.23
   PARNAS DL, 1994, PROC INT CONF SOFTW, P279, DOI 10.1109/ICSE.1994.296790
   ROUSSEEUW PJ, 1987, J COMPUT APPL MATH, V20, P53, DOI 10.1016/0377-0427(87)90125-7
   Sandhya N, 2012, ADV INTEL SOFT COMPU, V132, P703
   Shang W., 2014, THESIS
   Shang W., 2011, P 2011 18 WORKING C, P335, DOI DOI 10.1109/WCRE.2011.48
   Shang WY, 2015, EMPIR SOFTW ENG, V20, P1, DOI 10.1007/s10664-013-9274-8
   Shang WY, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P402, DOI 10.1109/ICSE.2013.6606586
   Software Engineering Institute, 2006, ULTR SAL SYST SOFTWA
   Sokal RR., 2012, BIOMETRY, V4rd
   Syer M. D., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P83, DOI 10.1109/ICSM.2011.6080775
   Syer MD, 2013, PROC IEEE INT CONF S, P110, DOI 10.1109/ICSM.2013.22
   Syer MD, 2011, CONF PROC INT SYMP C, P215, DOI 10.1109/ICPC.2011.38
   Syer MD., 2014, ICPE, V14, P259
   Tan P., 2005, Cluster Analysis: Basic Concepts and Algorithms
   Uh G.R., 2006, P WORKSH BIN INSTR A, P56
   Voas J, 2000, IEEE SOFTWARE, V17, P87
   WELCH BL, 1947, BIOMETRIKA, V34, P28, DOI 10.2307/2332510
   Weyuker EJ, 2000, IEEE T SOFTWARE ENG, V26, P1147, DOI 10.1109/32.888628
   Williams A., 2012, AMAZON WEB SERVICES, V10
   Yuan Ding, 2014, 11 USENIX S OPERATIN, P249
   Zhang J, 2002, SOFTWARE PRACT EXPER, V32, P1411, DOI 10.1002/spe.487
   Zhang ZJ, 2013, ADV EDUC RES, V18, P253
NR 69
TC 16
Z9 18
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2017
VL 24
IS 1
BP 189
EP 231
DI 10.1007/s10515-016-0196-8
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EI2DM
UT WOS:000392296800007
DA 2024-07-18
ER

PT J
AU Lessenich, O
   Apel, S
   Lengauer, C
AF Lessenich, Olaf
   Apel, Sven
   Lengauer, Christian
TI Balancing precision and performance in structured merge
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Version control; Software merging; Structured merge; JDIME
AB Software-merging techniques face the challenge of finding a balance between precision and performance. In practice, developers use unstructured-merge (i.e., line-based) tools, which are fast but imprecise. In academia, many approaches incorporate information on the structure of the artifacts being merged. While this increases precision in conflict detection and resolution, it can induce severe performance penalties. Striving for a proper balance between precision and performance, we propose a structured-merge approach with auto-tuning. In a nutshell, we tune the merge process on-line by switching between unstructured and structured merge, depending on the presence of conflicts. We implemented a corresponding merge tool for Java, called JDime. Our experiments with 50 real-world Java projects, involving 434 merge scenarios with over 51 million lines of code, demonstrate that our approach indeed hits a sweet spot: While largely maintaining a precision that is superior to that of unstructured merge, structured merge with auto-tuning is up to 92 times faster than purely structured merge, 10 times on average.
EM lessenic@fim.uni-passau.de
OI Lessenich, Olaf/0000-0002-8996-1996; Apel, Sven/0000-0003-3687-2233
FU DFG [AP 206/2, AP 206/4, AP 206/5]
FX We thank Christian Kastner for feedback on the potential of this work,
   and for the design we used in the Figs. 1 and 2. This work has been
   supported by the DFG Grants: AP 206/2, AP 206/4, and AP 206/5.
CR [Anonymous], LNCS
   [Anonymous], P ASE ACM
   [Anonymous], 1991, SOFTWARE-PRACTICE AND EXPERIENCE, DOI DOI 10.1002/SPE.4380210706
   [Anonymous], P USENIX C C USENIX
   Apel S., 2011, P 19 ACM SIGSOFT S 1, P190, DOI DOI 10.1145/2025113.2025141
   Apel S, 2012, IEEE INT CONF AUTOM, P120, DOI 10.1145/2351676.2351694
   Apiwattanapong T, 2007, AUTOMAT SOFTW ENG, V14, P3, DOI 10.1007/s10515-006-0002-0
   Bergroth L, 2000, SPIRE 2000: SEVENTH INTERNATIONAL SYMPOSIUM ON STRING PROCESSING AND INFORMATION RETRIEVAL - PROCEEDINGS, P39, DOI 10.1109/SPIRE.2000.878178
   BERZINS V, 1994, ACM T PROGR LANG SYS, V16, P1875, DOI 10.1145/197320.197403
   Dig D, 2007, PROC INT CONF SOFTW, P427
   EDMONDS J, 1972, J ACM, V19, P248, DOI 10.1145/321694.321699
   HIRSCHBERG DS, 1975, COMMUN ACM, V18, P341, DOI 10.1145/360825.360861
   Hunt JJ, 2002, PROC IEEE INT CONF S, P511, DOI 10.1109/ICSM.2002.1167812
   JACKSON D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P243, DOI 10.1109/ICSM.1994.336770
   Koegel M, 2009, 2009 ICSE WORKSHOP ON COMPARISON AND VERSIONING OF SOFTWARE MODELS, P43, DOI 10.1109/CVSM.2009.5071721
   Kolovos DS, 2006, LECT NOTES COMPUT SC, V4199, P215
   Kuhn HW, 2005, NAV RES LOG, V52, P7, DOI 10.1002/nav.20053
   Lippe Ernst., 1992, Proceedings of the fifth ACM SIGSOFT symposium on Software development environments - SDE 5, P78, DOI DOI 10.1145/142868.143753
   Maoz S, 2011, LECT NOTES COMPUT SC, V6813, P230, DOI 10.1007/978-3-642-22655-7_12
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Schrijver A., 2002, Combinatorial optimization: polyhedra and efficiency, V1st
   Taentzer G, 2010, LECT NOTES COMPUT SC, V6372, P171
   TREUDE C, 2007, P 6 JOINT M EUR SOFT, P295, DOI DOI 10.1145/1287624.1287665
   Westfechtel B., 1991, Proceedings of the 3rd International Workshop on Software Configuration Management, P68, DOI 10.1145/111062.111071
   ZHANG KZ, 1994, INFORM PROCESS LETT, V49, P249, DOI 10.1016/0020-0190(94)90062-0
NR 25
TC 26
Z9 27
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2015
VL 22
IS 3
SI SI
BP 367
EP 397
DI 10.1007/s10515-014-0151-5
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CM4JQ
UT WOS:000357651200004
DA 2024-07-18
ER

PT J
AU Kwon, YW
   Tilevich, E
AF Kwon, Young-Woo
   Tilevich, Eli
TI Cloud refactoring: automated transitioning to cloud-based services
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Cloud computing; Services; Refactoring; Service extraction;
   Fault-tolerance; Program transformation
ID SOFTWARE SYSTEMS
AB Using cloud-based services can improve the performance, reliability, and scalability of a software application. However, transitioning an application to use cloud-based services is difficult, costly, and error-prone. The required re-engineering effort includes migrating to the cloud the functionality to be accessed as remote cloud-based services and re-targeting the client code accordingly. In addition, the client must be able to detect and handle the faults raised in the process of invoking the services. As a means of streamlining this transitioning, we developed a set of refactoring techniques-automated, IDE-assisted program transformations that eliminate the need to change programs by hand. In particular, we show how a programmer can extract services, add fault tolerance functionality, and adapt client code to invoke cloud services via refactorings integrated with a modern IDE. As a validation, we have applied our approach to automatically transform two third-party Java applications to use cloud-based services. We have also applied our approach to re-engineer a suite of services operated by General Electric to use cloud-based resources to better satisfy the GE business requirements.
C1 [Kwon, Young-Woo; Tilevich, Eli] Virginia Tech, Dept Comp Sci, Blacksburg, VA 24060 USA.
C3 Virginia Polytechnic Institute & State University
RP Kwon, YW (corresponding author), Virginia Tech, Dept Comp Sci, Blacksburg, VA 24060 USA.
EM ywkwon@cs.vt.edu; tilevich@cs.vt.edu
RI Kwon, Young-Woo/HGE-6607-2022
OI Kwon, Young-Woo/0000-0003-0625-8232; Tilevich, Eli/0000-0003-2415-6926
FU National Science Foundation [CCF-1116565]
FX GE Global Research has provided realistic cloud migration scenarios that
   motivated some of the refactoring techniques discussed in the article.
   This research is supported by the National Science Foundation through
   the Grant CCF-1116565.
CR Andreopoulos B, 2007, INFORM SOFTWARE TECH, V49, P244, DOI 10.1016/j.infsof.2006.10.010
   Andritsos P, 2005, IEEE T SOFTWARE ENG, V31, P150, DOI 10.1109/TSE.2005.25
   [Anonymous], ACMIFIP USENIX MIDDL
   Buyya R, 2009, FUTURE GENER COMP SY, V25, P599, DOI 10.1016/j.future.2008.12.001
   Candea G, 2001, EIGHTH WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS, PROCEEDINGS, P125, DOI 10.1109/HOTOS.2001.990072
   Canfora G, 2008, J SYST SOFTWARE, V81, P463, DOI 10.1016/j.jss.2007.06.006
   DeLucia A, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P122, DOI 10.1109/ICSM.1997.624238
   Dialani V., 2002, EUROPAR 2002 PAR PRO, P107
   Dieckmann S, 1999, LECT NOTES COMPUT SC, V1628, P92
   Edstrom J., 2012, 2012 IEEE 11th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom), P737, DOI 10.1109/TrustCom.2012.244
   Fang CL, 2007, J SYST ARCHITECT, V53, P21, DOI 10.1016/j.sysarc.2006.06.001
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   JAX-WS Expert Group, 2006, TECHNICAL REPORT
   King S. T., 2005, ATEC 05 P ANN C USEN
   Kwon Y.-W., 2011, MESOCA 11 P 2011 IEE
   Levenshtein V. I., 1966, SOV PHYS DOKL, V10, P707
   Li SM, 2006, WORK CONF REVERSE EN, P115
   LIANG D, 2003, 10 AS PAC SOFTW ENG
   Liu A, 2010, IEEE T SERV COMPUT, V3, P46, DOI 10.1109/TSC.2009.28
   Marchetto Alessandro, 2009, International Journal on Software Tools for Technology Transfer, V11, P427, DOI 10.1007/s10009-009-0123-4
   McGachey P, 2009, ELECTRON NOTES THEOR, V253, P47, DOI 10.1016/j.entcs.2009.11.014
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   OSGi Alliance, 2011, SPECIFICATION
   OSGi Alliance, 2010, TECHNICAL REPORT
   Paremus Ldt, 2008, PAR SERV FABR TECHN
   Santos GT, 2005, NINTH IEEE INTERNATIONAL EDOC ENTERPRISE COMPUTING CONFERENCE, PROCEEDINGS, P95, DOI 10.1109/EDOC.2005.15
   Sidiroglou S, 2005, LECT NOTES COMPUT SC, V3650, P1
   Spiegel A., 2002, THESIS FU BERLIN FB
   Sullivan M., 1991, Digest of Papers. Fault-Tolerant Computing: Twenty-First International Symposium (Cat. No.91CH2985-0), P2, DOI 10.1109/FTCS.1991.146625
   TATSUBORI M, 2001, EUR C OBJ OR PROGR E
   Tilevich Eli, 2002, P 16 EUR C OBJ OR PR
   Zheng ZB, 2010, INT J WEB SERV RES, V7, P21, DOI 10.4018/jwsr.2010100102
NR 33
TC 26
Z9 27
U1 0
U2 21
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2014
VL 21
IS 3
SI SI
BP 345
EP 372
DI 10.1007/s10515-013-0136-9
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AI7OG
UT WOS:000337081800003
DA 2024-07-18
ER

PT J
AU Pasareanu, CS
   Visser, W
   Bushnell, D
   Geldenhuys, J
   Mehlitz, P
   Rungta, N
AF Pasareanu, Corina S.
   Visser, Willem
   Bushnell, David
   Geldenhuys, Jaco
   Mehlitz, Peter
   Rungta, Neha
TI Symbolic PathFinder: integrating symbolic execution with model checking
   for Java bytecode analysis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Symbolic execution; Model checking; Testing; Java
ID VERIFICATION; GENERATION; EFFICIENT; TOOL
AB Symbolic PathFinder (SPF) is a software analysis tool that combines symbolic execution with model checking for automated test case generation and error detection in Java bytecode programs. In SPF, programs are executed on symbolic inputs representing multiple concrete inputs and the values of program variables are represented by expressions over those symbolic inputs. Constraints over these expressions are generated from the analysis of different paths through the program. The constraints are solved with off-the-shelf solvers to determine path feasibility and to generate test inputs. Model checking is used to explore different symbolic program executions, to systematically handle aliasing in the input data structures, and to analyze the multithreading present in the code. SPF incorporates techniques for handling input data structures, strings, and native calls to external libraries, as well as for solving complex mathematical constraints. We describe the tool and its application at NASA, in academia, and in industry.
C1 [Pasareanu, Corina S.; Bushnell, David; Mehlitz, Peter; Rungta, Neha] NASA, Ames Res Ctr, Moffett Field, CA 94035 USA.
   [Visser, Willem; Geldenhuys, Jaco] Univ Stellenbosch, ZA-7600 Stellenbosch, South Africa.
C3 National Aeronautics & Space Administration (NASA); NASA Ames Research
   Center; Stellenbosch University
RP Pasareanu, CS (corresponding author), NASA, Ames Res Ctr, Moffett Field, CA 94035 USA.
EM corina.s.pasareanu@nasa.gov; wvisser@cs.sun.ac.za;
   david.h.bushnell@nasa.gov; jaco@cs.sun.ac.za; peter.c.mehlitz@nasa.gov;
   neha.s.rungta@nasa.gov
CR Anand Saswat, 2009, International Journal on Software Tools for Technology Transfer, V11, P53, DOI 10.1007/s10009-008-0090-1
   Anand S, 2007, LECT NOTES COMPUT SC, V4424, P134
   [Anonymous], 2012, LATTE INT
   [Anonymous], 2012, YIC SMT SOLV
   [Anonymous], 2006, Proceedings of the 2006 International Symposium on Software Testing and Analysis (ISSTA), DOI [10.1145/1146238.1146256, DOI 10.1145/1146238.1146256]
   [Anonymous], 2010, Proceedings of the 19th international symposium on Software testing and analysis, DOI 10.1145/1831708.1831732
   [Anonymous], 2001, CA200133 CERTCC
   [Anonymous], 2012, JAV CONSTR SOLV
   Balasubramanian Daniel, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P267, DOI 10.1007/978-3-642-28891-3_26
   Balasubramanian D., 2011, P 2011 INT S SOFTWAR, P45, DOI [10.1145/2001420.2001427, DOI 10.1145/2001420.2001427]
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Bjorner N, 2009, LECT NOTES COMPUT SC, V5505, P307, DOI 10.1007/978-3-642-00768-2_27
   Borges M., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P111, DOI 10.1109/ICST.2012.91
   Bush WR, 2000, SOFTWARE PRACT EXPER, V30, P775, DOI 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H
   Bushnell D., 2011, NUM SOFTW VER WORKSH
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cadar C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1066, DOI 10.1145/1985793.1985995
   Cadar C, 2008, ACM T INFORM SYST SE, V12, DOI 10.1145/1455518.1455522
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Clarke L. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P215, DOI 10.1109/TSE.1976.233817
   Coen-Porisini A., 2001, P ESEC SIGSOFT FSE, P151
   Collingbourne P, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P315
   d'Amorim M, 2006, IEEE INT CONF AUTOM, P59
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deng XH, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P3, DOI 10.1109/TAIC.PART.2007.32
   Deng XH, 2006, IEEE INT CONF AUTOM, P157
   Deng XH, 2012, AUTOMAT SOFTW ENG, V19, P233, DOI 10.1007/s10515-011-0089-9
   Detlefs D.L., 1998, 159 SRC COMPAQ SYST
   Filieri A., 2013, P 35 INT C SOFTW ENG
   Geldenhuys Jaco, 2012, P 2012 INT S SOFTWAR, P166, DOI DOI 10.1145/2338965.2336773
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2008, IEEE SOFTWARE, V25, P30, DOI 10.1109/MS.2008.109
   Guodong Li, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P609, DOI 10.1007/978-3-642-22110-1_49
   Hooimeijer P., 2010, MSRTR201096
   Hooimeijer P, 2009, ACM SIGPLAN NOTICES, V44, P188, DOI 10.1145/1543135.1542498
   Hooimeijer Pieter., 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, P377, DOI DOI 10.1145/1858996.1859080
   Jayaraman K., 2009, NASA FORM METH S
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   Kiezun A., 2009, PROC INT S SOFTWARE, P105
   Kiezun A., 2009, THESIS MIT US
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Li X., 2008, AS S PROGR LANG SYST
   Loera J.A.D., 2011, ARXIV11080117V2MATHM
   Mirzaei N., 2012, JPF WORKSH
   Pasareanu C.S., 2011, Proceedings of the 2011 International Symposium on Software Testing and Analysis, ISSTA '11, P34, DOI DOI 10.1145/2001420.2001425
   Pasareanu Corina S., 2008, P 2008 INT S SOFTW T, P15, DOI [DOI 10.1145/1390630.1390635, DOI 10.1145/1390630]
   Pasareanu CS, 2004, LECT NOTES COMPUT SC, V2989, P164
   Person S, 2011, ACM SIGPLAN NOTICES, V46, P504, DOI 10.1145/1993316.1993558
   Phan Quoc-Sang, 2012, ACM SIGSOFT SOFTWARE, V37, P1, DOI [10.1145/2382756.2382791, DOI 10.1145/2382756.2382791]
   Rajan S., 2009, P 31 INT C SOFTW ENG
   Redelinghuys G., 2012, THESIS STELLENBOSCH
   Redis, 2012, RED NOSQL DAT
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   Sanfilippo S., 2012, REDIS DEFINITIVE GUI
   Santelices R.A., 2010, P 19 INT S SOFTW TES, P195, DOI [DOI 10.1145/1831708.1831733, 10.1145/1831708.1831733]
   Sasnauskas R, 2011, INT CON DISTR COMP S, P333, DOI 10.1109/ICDCS.2011.28
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Sen K, 2007, LECT NOTES COMPUT SC, V4383, P166
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P419
   Shannon D., 2009, P 2 INT WORKSHOP DEF, P22, DOI [DOI 10.1145/1555860.1555868, 10.1145/1555860, DOI 10.1145/1555860]
   Shannon D, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P13, DOI 10.1109/TAIC.PART.2007.34
   Siegel SF, 2011, MATH COMPUT SCI, V5, P395, DOI 10.1007/s11786-011-0100-7
   Souza M, 2011, LECT NOTES COMPUT SC, V6617, P359, DOI 10.1007/978-3-642-20398-5_26
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Tomb A., 2007, INT S SOFTWARE TESTI, P97
   Veanes Margus, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P498, DOI 10.1109/ICST.2010.15
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Visser W., 2012, INT S FDN SOFTW ENG
   Visser W., 2006, P ACM SIGSOFT INT S, P37
   Xie T, 2005, LECT NOTES COMPUT SC, V3440, P365
   Yang G., 2012, P 2012 INT S SOFTW T, P144, DOI DOI 10.1145/2338965.2336771
   Yu F, 2008, LECT NOTES COMPUT SC, V5156, P306
   Yu F, 2010, LECT NOTES COMPUT SC, V6015, P154
   Zhang Pingyu, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P43, DOI 10.1109/ASE.2011.6100093
NR 74
TC 92
Z9 106
U1 0
U2 26
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2013
VL 20
IS 3
SI SI
BP 391
EP 425
DI 10.1007/s10515-013-0122-2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 155QP
UT WOS:000319763400004
DA 2024-07-18
ER

PT J
AU Han, S
   Wallace, DR
   Miller, RC
AF Han, Sangmok
   Wallace, David R.
   Miller, Robert C.
TI Code completion of multiple keywords from abbreviated input
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Abbreviation completion; Multiple keywords; Code completion; Hidden
   Markov model; Code assistants; Abbreviation; Extrapolation; Data mining
AB Abbreviation Completion is a novel technique to improve the efficiency of code-writing by supporting code completion of multiple keywords based on non-predefined abbreviated input-a different approach from conventional code completion that finds one keyword at a time based on an exact character match. Abbreviated input consisting of abbreviated keywords and non-alphanumeric characters between each abbreviated keyword (e.g. pb st nm) is expanded into a full expression (e.g. public String name) by a Hidden Markov Model learned from a corpus of existing code and abbreviation examples. The technique does not require the user to memorize abbreviations and provides incremental feedback of the most likely completions.
   In addition to code completion by disabbreviation of multiple keywords, abbreviation completion supports prediction of the next keywords and non-alphanumeric characters of a code completion candidate, a technique called code completion by extrapolation. The system finds the most likely next keywords and non-alphanumeric characters using an n-gram model of programming language. This enables a code completion scenario in which a user first types a short abbreviated expression to complete the beginning part of a desired full expression and then uses the extrapolation feature to complete the remaining part without further typing.
   This paper presents the algorithm for abbreviation completion, integrated with a new user interface for multiple-keyword code completion. We tested the system by sampling 4919 code lines from open source projects and found that more than 99% of the code lines could be resolved from acronym-like abbreviations. The system could also extrapolate code completion candidates to complete the next one or two keywords with the accuracy of 96% and 82%, respectively. A user study of code completion by disabbreviation found 30% reduction in time usage and 41% reduction of keystrokes over conventional code completion.
C1 [Han, Sangmok; Wallace, David R.; Miller, Robert C.] MIT, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Han, S (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM sangmok@mit.edu
FU Samsung Scholarship Foundation
FX This research was supported by Samsung Scholarship Foundation.
CR *AM MECH TURK, 2010, AM MECH TURK US GUID
   BICKEL S, 2005, P HUM LANG TECHN C C, P193
   Brown P. F., 1992, Computational Linguistics, V18, P467
   Bruch M, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P213, DOI 10.1145/1595696.1595728
   *ECL, 2009, COD ASS ECL GAN DOC
   *ECL, 2009, TEMPL ECL GAN DOC
   *GNU, 2010, ABBR GNU EM MAN
   Han S, 2009, IEEE INT CONF AUTOM, P332, DOI 10.1109/ASE.2009.64
   Hill R, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P228, DOI 10.1109/ASE.2004.1342740
   Kersten Mik, 2006, P 14 ACM SIGSOFT INT, P1
   LITTLE G, 2007, P ASE, V16, P37
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   Murphy GC, 2006, IEEE SOFTWARE, V23, P76, DOI 10.1109/MS.2006.105
   Nandi A., 2007, VLDB, P219
   Nilsson D., 2001, 17 INT JOINT C ARTIF, P1280
   RABINER LR, 1989, P IEEE, V77, P257, DOI 10.1109/5.18626
   ROBBES R, 2008, P AUT SOFTW ENG, P181
   SAHAVECHAPHAN N, 2006, P ACM SIGPLAN C OBJ, V16, P413
   SHIEBER SM, 2007, NAT LANG ENG, V13, P137
   SOONG FK, 1991, INT CONF ACOUST SPEE, P705, DOI 10.1109/ICASSP.1991.150437
   WILLIS T, 2005, P ACC DES DIG WORLD
   2010, COMPLETEWORD VISUAL
NR 22
TC 9
Z9 11
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2011
VL 18
IS 3-4
SI SI
BP 363
EP 398
DI 10.1007/s10515-011-0083-2
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 789YV
UT WOS:000292556500006
DA 2024-07-18
ER

PT J
AU Derderian, K
   Hierons, RM
   Harman, M
   Guo, Q
AF Derderian, Karnig
   Hierons, Robert M.
   Harman, Mark
   Guo, Qiang
TI Estimating the feasibility of transition paths in extended finite state
   machines
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE EFSM; Transition feasibility; State-based testing; Automated test
   generation
ID SEQUENCE GENERATION; LENGTH; IDENTIFICATION
AB There has been significant interest in automating testing on the basis of an extended finite state machine (EFSM) model of the required behaviour of the implementation under test (IUT). Many test criteria require that certain parts of the EFSM are executed. For example, we may want to execute every transition of the EFSM. In order to find a test suite (set of input sequences) that achieves this we might first derive a set of paths through the EFSM that satisfy the criterion using, for example, algorithms from graph theory. We then attempt to produce input sequences that trigger these paths. Unfortunately, however, the EFSM might have infeasible paths and the problem of determining whether a path is feasible is generally undecidable. This paper describes an approach in which a fitness function is used to estimate how easy it is to find an input sequence to trigger a given path through an EFSM. Such a fitness function could be used in a search-based approach in which we search for a path with good fitness that achieves a test objective, such as executing a particular transition, and then search for an input sequence that triggers the path. If this second search fails then we search for another path with good fitness and repeat the process. We give a computationally inexpensive approach (fitness function) that estimates the feasibility of a path. In order to evaluate this fitness function we compared the fitness of a path with the ease with which an input sequence can be produced using search to trigger the path and we used random sampling in order to estimate this. The empirical evidence suggests that a reasonably good correlation (0.72 and 0.62) exists between the fitness of a path, produced using the proposed fitness function, and an estimate of the ease with which we can randomly generate an input sequence to trigger the path.
C1 [Derderian, Karnig; Hierons, Robert M.] Brunel Univ, Sch Informat Syst Comp & Math, London, England.
   [Harman, Mark] Kings Coll London, Dept Comp Sci, London WC2R 2LS, England.
   [Guo, Qiang] Univ Sheffield, Dept Comp Sci, Sheffield S10 2TN, S Yorkshire, England.
C3 Brunel University; University of London; King's College London;
   University of Sheffield
RP Hierons, RM (corresponding author), Brunel Univ, Sch Informat Syst Comp & Math, London, England.
EM karnig.derderian@brunel.ac.uk; rob.hierons@brunel.ac.uk;
   Mark.Harman@kcl.ac.uk; Q.Guo@dcs.shef.ac.uk
OI Hierons, Robert/0000-0002-4771-1446; Harman, Mark/0000-0002-5864-4488
CR AHO AV, 1991, IEEE T COMMUN, V39, P1604, DOI 10.1109/26.111442
   [Anonymous], 1964, 5 ANN S SWITCH CIRC, DOI DOI 10.1109/SWCT.1964.8
   BOCHMANN GV, 1990, COMPUT NETWORKS ISDN, V18, P335, DOI 10.1016/0169-7552(90)90121-8
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Derderian K, 2006, COMPUT J, V49, P331, DOI [10.1093/comjnl/bxl003, 10.1093/comjnl/bx1003]
   Derderian K, 2004, LECT NOTES COMPUT SC, V3103, P1429
   Duale AY, 2004, IEEE T COMPUT, V53, P614, DOI 10.1109/TC.2004.1275300
   Duale AY, 2000, INT FED INFO PROC, V48, P91
   GUO Q, 2004, LNCS, V2931, P169
   Harel D., 1998, MODELING REACTIVE SY
   Hierons RM, 2006, IEEE T COMPUT, V55, P618, DOI 10.1109/TC.2006.80
   Hierons RM, 2002, IEEE T COMPUT, V51, P1111, DOI 10.1109/TC.2002.1032630
   HOGREFE D, 1991, 5 U BERN
   Jones BF, 1998, COMPUT J, V41, P98, DOI 10.1093/comjnl/41.2.98
   KALAJI AS, 2008, 2 IEEE INT C SOFTW T
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   LEE D, 1994, IEEE T COMPUT, V43, P306, DOI 10.1109/12.272431
   Lefticaru Raluca, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P525, DOI 10.1109/ICST.2008.32
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Miller RE, 1993, IEEE ACM T NETWORK, V1, P116, DOI 10.1109/90.222912
   Offutt J, 2003, SOFTW TEST VERIF REL, V13, P25, DOI 10.1002/stvr.264
   Pargas RoyP., 1999, Verification and Reliability, V9, P263
   PEARSON SW, 1979, INT CMG C, P49
   Petrenko A, 2004, IEEE T SOFTWARE ENG, V30, P29, DOI 10.1109/TSE.2004.1265734
   Ramalingom T, 2003, COMPUT COMMUN, V26, P1622, DOI 10.1016/S0140-3664(03)00116-6
   SHEN X, 1992, SAC 92, P75
   SHEN Y, 1989, IFIP WG6 1 9 INT S P, P131
   SIDHU DP, 1989, IEEE T SOFTWARE ENG, V15, P413, DOI 10.1109/32.16602
   Tanenbaum A. S., 1996, Computer Networks
   YANG B, 1990, SIGCOMM 90, P118
NR 30
TC 24
Z9 33
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2010
VL 17
IS 1
BP 33
EP 56
DI 10.1007/s10515-009-0057-9
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 534MO
UT WOS:000272902000003
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Tuunanen, T
   Koskinen, J
   Kärkkäinen, T
AF Tuunanen, Timo
   Koskinen, Jussi
   Karkkainen, Tommi
TI Automated software license analysis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software licenses; Software reuse; Open source software; Reverse
   engineering; Program comprehension
ID REUSE; METRICS
AB Software license is a legal instrument governing the usage or redistribution of copyright-protected software. License analysis is an elaborate undertaking, especially in case of large software consisting of numerous modules under different licenses. This paper describes an automated approach for supporting software license analysis. The approach is implemented in a reverse engineering tool called ASLA. We provide a detailed description of the architecture and features of the tool. The tool is evaluated on the basis of an analysis of 12 OSS (open source software) packages. The results show that licenses for (on average) 89% of the source code files can be identified by using ASLA and that the efficiency of the automated analysis is (on average) 111 files per second. In a further comparison with two other open source license analyzers-OSLC and FOSSology-ASLA shows a competitive performance. The results validate the general feasibility of the ASLA approach in the context of analyzing non-trivial OSS packages.
C1 [Tuunanen, Timo; Karkkainen, Tommi] Univ Jyvaskyla, Dept Math Informat Technol, Jyvaskyla 40014, Finland.
   [Koskinen, Jussi] Univ Jyvaskyla, Dept Comp Sci & Informat Syst, Jyvaskyla 40014, Finland.
C3 University of Jyvaskyla; University of Jyvaskyla
RP Tuunanen, T (corresponding author), Univ Jyvaskyla, Dept Math Informat Technol, POB 35 Agora, Jyvaskyla 40014, Finland.
EM timtuun@jyu.fi; koskinen@jyu.fi; tka@mit.jyu.fi
OI Karkkainen, Tommi/0000-0003-0327-1167
CR *AFPL, 2008, AFPL GHOSTSCR
   Aho A.V., 1986, COMPILERS PRINCIPLES
   Anderson P, 2003, IEEE T SOFTWARE ENG, V29, P721, DOI 10.1109/TSE.2003.1223646
   Andritsos P, 2001, PROG COMPREHEN, P157, DOI 10.1109/WPC.2001.921727
   [Anonymous], 2003, Modernizing Legacy Systems: Software Technologies, Engineering Processes,and Business Practices
   *AP, 2005, AP HTTP SERV PROJ
   *AP, 2007, AP LIC VERS 2 0
   Ardagna CA, 2006, INT FED INFO PROC, V203, P209
   Bellay B, 1998, J SOFTW MAINT-RES PR, V10, P305, DOI 10.1002/(SICI)1096-908X(199809/10)10:5<305::AID-SMR175>3.0.CO;2-7
   *BSD, 2007, BSD LIC
   Capiluppi A, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P317, DOI 10.1109/CSMR.2003.1192440
   Cross I.I., 1992, ADV COMPUT, V35, P199, DOI [10.1016/S0065-2458(08)60596-3, DOI 10.1016/S0065-2458(08)60596-3]
   de Jonge M, 2005, IEEE T SOFTWARE ENG, V31, P588, DOI 10.1109/TSE.2005.77
   Frakes W, 1996, ACM COMPUT SURV, V28, P415, DOI 10.1145/234528.234531
   Frakes WB, 2005, IEEE T SOFTWARE ENG, V31, P529, DOI 10.1109/TSE.2005.85
   GARLAN D, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.469757
   *GCC, 2007, GNU COMP COLL
   *GIMP, 2008, GNU IM MAN PROGR
   *GNU, 2007, GNU BIN
   *GNU, 2008, GNU LIBT
   *GNU, 2008, GNU GO
   HECKEL P, 1978, COMMUN ACM, V21, P264, DOI 10.1145/359460.359467
   *JBOSS, 2008, JBOSS APPL SERV
   Koskinen J, 2004, J SOFTW MAINT EVOL-R, V16, P187, DOI 10.1002/smr.292
   KOSKINEN J, 2000, THESIS U JYVASKYLA J
   KOSKINEN J, 2008, INT JOINT C IN PRESS
   Lehman MM, 1998, PROC IEEE INT CONF S, P208, DOI 10.1109/ICSM.1998.738510
   LETOVSKY S, 1986, IEEE SOFTWARE, V3, P41, DOI 10.1109/MS.1986.233414
   *LIDESC, 2007, LIDESC LIBR LIC AW S
   LIENTZ BP, 1978, COMMUN ACM, V21, P466, DOI 10.1145/359511.359522
   LINDVALL M, 2003, ADV COMPUT, V59, P130
   *MICR, 2007, MICR SOFTW LIC TERMS
   *MIT, 2007, MIT LIC
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Morad S, 2005, IEEE INTERNATIONAL CONFERENCE ON SOFTWARE - SCIENCE, TECHNOLOGY AND ENGINEERING, PROCEEDINGS, P110, DOI 10.1109/SWSTE.2005.11
   Morisio M, 2002, IEEE T SOFTWARE ENG, V28, P340, DOI 10.1109/TSE.2002.995420
   *MOZ, 2008, MOZ FIR
   *MPL, 2007, MOZ PUBL LIC 1 1 MPL
   Nordquist P., 2003, J COMPUT SCI COLL, V19, P101
   *OPENS ORG, OPENS ORG APPR LIC
   *OSLC, 2007, OP SOUR LIC CHEC
   Paakki J., 1997, Nordic Journal of Computing, V4, P3
   Paulson JW, 2004, IEEE T SOFTWARE ENG, V30, P246, DOI 10.1109/TSE.2004.1274044
   PERENS B, 2005, OPEN SOURCE DEFINITI
   *PIDG, 2008, PIDG IM CLIENT
   Rosen L., 2005, OPEN SOURCE LICENSIN
   Samoladas I, 2004, COMMUN ACM, V47, P83, DOI 10.1145/1022594.1022598
   Selby RW, 2005, IEEE T SOFTWARE ENG, V31, P495, DOI 10.1109/TSE.2005.69
   Tuunanen T, 2006, INT FED INFO PROC, V203, P35
   Yu LG, 2004, IEEE T SOFTWARE ENG, V30, P694, DOI 10.1109/TSE.2004.58
   2008, HP MAY ACCIDENTALLY
NR 51
TC 28
Z9 35
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2009
VL 16
IS 3-4
BP 455
EP 490
DI 10.1007/s10515-009-0054-z
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 470SS
UT WOS:000268000900004
DA 2024-07-18
ER

PT J
AU Wang, YQ
   McIlraith, SA
   Yu, YJ
   Mylopoulos, J
AF Wang, Yiqiao
   McIlraith, Sheila A.
   Yu, Yijun
   Mylopoulos, John
TI Monitoring and diagnosing software requirements
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 22nd International Conference on Automated Software Engineering
CY NOV 05-09, 2007
CL Atlanta, GA
DE Requirement monitoring; Diagnostics
AB We propose a framework adapted from Artificial Intelligence theories of action and diagnosis for monitoring and diagnosing failures of software requirements. Software requirements are specified using goal models where they are associated with preconditions and postconditions. The monitoring component generates log data that contains the truth values of specified pre/post-conditions, as well as system action executions. Such data can be generated at different levels of granularity, depending on diagnostic feedback. The diagnostic component diagnoses the denial of requirements using the log data, and identifies problematic components. To support diagnostic reasoning, we transform the diagnostic problem into a propositional satisfiability (SAT) problem that can be solved by existing SAT solvers. The framework returns sound and complete diagnoses accounting for observed aberrant system behaviors. Our solution is illustrated with two medium-sized publicly available case studies: a Web-based email client and an ATM simulation. Our experimental results demonstrate the scalability of our approach.
C1 [Wang, Yiqiao; McIlraith, Sheila A.; Mylopoulos, John] Univ Toronto, Dept Comp Sci, Toronto, ON, Canada.
   [Yu, Yijun] Open Univ, Dept Comp, Fac Math & Phys, Milton Keynes MK7 6AA, Bucks, England.
C3 University of Toronto; Open University - UK
RP Wang, YQ (corresponding author), Univ Toronto, Dept Comp Sci, Toronto, ON, Canada.
EM yw@cs.toronto.edu; sheila@cs.toronto.edu; y.yu@open.ac.uk;
   jm@cs.toronto.edu
OI Yu, Yijun/0000-0002-7154-8570
CR [Anonymous], 9 INT WORKSH SOFTW S
   [Anonymous], 1991, Artificial and Mathematical Theory of Computation, DOI DOI 10.1016/B978-0-12-450010-5.50026-8
   BJORK R, 2007, EXAMPLE OBJECT ORIEN
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   DAVIS M, 1962, COMMUN ACM, V5, P394, DOI 10.1145/368273.368557
   DEKLEER J, 1992, ARTIF INTELL, V56, P197, DOI 10.1016/0004-3702(92)90027-U
   FICKAS S, 1995, 2 IEEE INT S REQ ENG
   Giorgini P, 2002, LECT NOTES COMPUT SC, V2503, P167
   Goldberg E, 2002, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, 2002 PROCEEDINGS, P142, DOI 10.1109/DATE.2002.998262
   Iwan G, 2002, AI COMMUN, V15, P31
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kiczales Gregor., 2001, An overview of AspectJ
   LEBERRE D, 2007, SATISFIABILITY LIB J
   McIlraith S., 1998, KR 98, P167
   MCILRAITH S, 2002, INT WORKSH NONM REAS, P356
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   MYLOPOULOS J, 1992, IEEE T SOFTWARE ENG, V18, P483, DOI 10.1109/32.142871
   REITER R, 1987, ARTIF INTELL, V32, P57, DOI 10.1016/0004-3702(87)90062-2
   ROBINSON WN, 2005, 38 ANN HAW INT C SYS
   Ryan Lawrence, 2004, Master's thesis
   SEBASTIANI R, 2004, 16 INT C ADV INF SYS, V4, P20
   van Lamsweerde A, 2000, IEEE T SOFTWARE ENG, V26, P978, DOI 10.1109/32.879820
   *W3C, 2002, WEB SERV
   WANG Y, 2007, 22 IEEE ACM INT C AU
   WINBLADH K, 2006, 21 IEEE ACM INT C AU
   Yu YJ, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P363
   ZHOU X, 2008, THESIS U TORONTO
NR 27
TC 30
Z9 33
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2009
VL 16
IS 1
BP 3
EP 35
DI 10.1007/s10515-008-0042-8
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 408EP
UT WOS:000263418600002
DA 2024-07-18
ER

PT J
AU Borgida, A
AF Borgida, Alex
TI How knowledge representation meets software engineering (and often
   databases)
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
ID LANGUAGE
AB This paper surveys a selection of personal research projects which addressed problems related to Software Engineering, and whose solution was inspired by ideas from the field of Knowledge Representation and Reasoning. Surprisingly often, the research was also related to problems in Databases. We discuss, in part, to what extent did the KR ideas provide ready-made solutions to SE and DB problems, and how frequently we had to invent new KR techniques.
C1 Rutgers State Univ, Dept Comp Sci, New Brunswick, NJ 08904 USA.
C3 Rutgers University System; Rutgers University New Brunswick
RP Borgida, A (corresponding author), Rutgers State Univ, Dept Comp Sci, New Brunswick, NJ 08904 USA.
EM borgida@cs.rutgers.edu
CR [Anonymous], ICSE 00 P 22 INT C S
   BALZER R, ICSE 1991, P158
   BARRON JL, 1982, P ACM SIGOA PHIL 12
   Borgida A, 1999, J ARTIF INTELL RES, V10, P399, DOI 10.1613/jair.584
   Borgida A, 1996, ARTIF INTELL, V82, P353, DOI 10.1016/0004-3702(96)00004-5
   BORGIDA A, 1989, SIGMOD REC, V18, P58, DOI 10.1145/66926.66932
   BORGIDA A, 1995, IEEE T SOFTWARE ENG, V21, P785, DOI 10.1109/32.469460
   BORGIDA A, 1985, ACM T DATABASE SYST, V10, P565, DOI 10.1145/4879.4995
   BORGIDA A, P ACM PODS 1989, P394
   BORGIDA A, 1981, IJCAI 1981, P254
   BORGIDA A, 1999, ICSE 99 P 21 INT C S, P378
   BORGIDA A, 1984, CONCEPTUAL MODELLING
   BORGIDA A, 1988, P SIGMOD 88 C, P434
   Calvanese D, 2001, INT J COOP INF SYST, V10, P237, DOI 10.1142/S0218843001000345
   Dalal M., 1988, AAAI 88. Seventh National Conference on Artificial Intelligence, P475
   Devanbu P., 1997, ACM Transactions on Software Engineering and Methodology, V6, P141, DOI 10.1145/248233.248253
   DEVANBU P, 1991, COMMUN ACM, V34, P34, DOI 10.1145/103167.103172
   Devanbu PT, 1996, ARTIF INTELL, V84, P1, DOI 10.1016/0004-3702(95)00091-7
   ETHERINGTON D, 1983, AAAI 83, P104
   GODERIS A, 2005, APPL DESCRIPTION LOG
   Greenspan S., 1994, ICSE-16. 16th International Conference on Software Engineering (Cat. No.94CH3409-0), P135, DOI 10.1109/ICSE.1994.296773
   GREENSPAN SJ, 1986, INFORM SYST, V11, P9, DOI 10.1016/0306-4379(86)90020-7
   JARKE M, 1992, ACM T INFORM SYST, V10, P1, DOI 10.1145/128756.128757
   JIANG L, 2006, RE 06, P196
   Levy AY, 1996, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON VERY LARGE DATA BASES, P251
   Mylopoulos J., 1980, ACM Transactions on Database Systems, V5, P185, DOI 10.1145/320141.320150
   MYLOPOULOS J, 1990, ACM T INFORM SYST, V8, P325, DOI 10.1145/102675.102676
   MYLOPOULOS J, 1975, IJCAI 1975, P414
   MYLOPOULOS J, 1975, INT JOINT COUNCIL AR, P134
   Newell Allen, 1995, COMPUTATION INTELLIG, P415
   *RDF SCH, RDF VOC DESCR LANG 1
   Sebastiani R, 2004, BIOMED SCI INSTRUM, V3084, P20
   Touretzy D., 1987, P 10 IJCAI, P476
   YU ESK, 1995, INT J COOP INF SYST, V4, P125, DOI 10.1142/S0218843095000056
NR 34
TC 1
Z9 2
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2007
VL 14
IS 4
BP 443
EP 464
DI 10.1007/s10515-007-0018-0
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 220BJ
UT WOS:000250131600003
DA 2024-07-18
ER

PT J
AU Apiwattanapong, T
   Orso, A
   Harrold, MJ
AF Apiwattanapong, Taweesup
   Orso, Alessandro
   Harrold, Mary Jean
TI JDiff: A differencing technique and tool for object-oriented programs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 19th International Conference on Automated Software Engineering (ASE
   2004)
CY SEP, 2004
CL Linz, AUSTRIA
DE program differencing; software evolution
ID GRAPH
AB During software evolution, information about changes between different versions of a program is useful for a number of software engineering tasks. For example, configuration-management systems can use change information to assess possible conflicts among updates from different users. For another example, in regression testing, knowledge about which parts of a program are unchanged can help in identifying test cases that need not be rerun. For many of these tasks, a purely syntactic differencing may not provide enough information for the task to be performed effectively. This problem is especially relevant in the case of object-oriented software, for which a syntactic change can have subtle and unforeseen effects. In this paper, we present a technique for comparing object-oriented programs that identifies both differences and correspondences between two versions of a program. The technique is based on a representation that handles object-oriented features and, thus, can capture the behavior of object-oriented programs. We also present JD(IFF), a tool that implements the technique for Java programs. Finally, we present the results of four empirical studies, performed on many versions of two medium-sized subjects, that show the efficiency and effectiveness of the technique when used on real programs.
C1 Georgia Inst Technol, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology
RP Apiwattanapong, T (corresponding author), Georgia Inst Technol, Atlanta, GA 30332 USA.
EM term@cc.gatech.edu; orso@cc.gatech.edu; harrold@cc.gatech.edu
CR [Anonymous], PROGRAMMING LANGUAGE
   Apiwattanapong T, 2005, PROC INT CONF SOFTW, P432
   Apiwattanapong T, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P2, DOI 10.1109/ASE.2004.1342719
   BINKLEY D, 1992, P IEEE C SOFTW MAINT, P41
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Elbaum S, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P169, DOI 10.1109/METRIC.2001.915525
   Ernst MichaelD., 2000, DYNAMICALLY DISCOVER
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   GERMAN DM, 2004, P 1 INT WORKSH MIN S, P17
   GRASS JE, 1992, USENIX C(PLUS-PLUS) TECHNICAL CONFERENCE PROCEEDINGS, P181
   HARROLD MJ, 2001, P ACM C OBJ OR PROGR, P312
   Hunt JJ, 2002, PROC IEEE INT CONF S, P511, DOI 10.1109/ICSM.2002.1167812
   JACKSON D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P243, DOI 10.1109/ICSM.1994.336770
   LASKI J, 1992, P C SOFTW MAINT 1992, P282, DOI DOI 10.1109/ICSM.1992.242533
   Law J, 2003, PROC INT CONF SOFTW, P308, DOI 10.1109/ICSE.2003.1201210
   LEUNG HKN, 1989, CONFERENCE ON SOFTWARE MAINTENANCE - 1989, PROCEEDINGS, P60
   Maletic JI, 2004, PROC IEEE INT CONF S, P210, DOI 10.1109/ICSM.2004.1357805
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Myers EW, 1986, ALGORITHMICA, V1, P251, DOI 10.1007/BF01840446
   Orso A., 2003, Software Engineering Notes, V28, P128, DOI 10.1145/949952.940089
   ORSO A, 2004, P ACM SIGSOFT S FDN
   Raghavan S, 2004, PROC IEEE INT CONF S, P188, DOI 10.1109/ICSM.2004.1357803
   RANGARAJAN K, 2001, AUTOMATIC ANAL JAVA
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   Rothermel G, 1996, IEEE T SOFTWARE ENG, V22, P529, DOI 10.1109/32.536955
   Rothermel G., 1997, ACM Transactions on Software Engineering and Methodology, V6, P173, DOI 10.1145/248233.248262
   Sinha S, 2000, IEEE T SOFTWARE ENG, V26, P849, DOI 10.1109/32.877846
   Wang Zheng., 2000, J INSTRUCTION LEVEL, V2
   Xing Z., 2005, Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering, P54
   YANG W, 1991, SOFTWARE PRACTICE EX, V7, P739
NR 31
TC 65
Z9 75
U1 1
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2007
VL 14
IS 1
BP 3
EP 36
DI 10.1007/s10515-006-0002-0
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 211VO
UT WOS:000249551600002
DA 2024-07-18
ER

PT J
AU Chen, QG
   Zhou, T
   Liu, K
   Li, L
   Ge, CP
   Liu, Z
   Klein, J
   Bissyandé, TF
AF Chen, Qianguo
   Zhou, Teng
   Liu, Kui
   Li, Li
   Ge, Chunpeng
   Liu, Zhe
   Klein, Jacques
   Bissyande, Tegawende F.
TI Tips: towards automating patch suggestion for vulnerable smart contracts
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Smart contract vulnerability; Automated repair; Fix template
AB Smart contracts are slowly penetrating our society where they are leveraged to support critical business transactions of which financial stakes are high. Smart contract programming is, however, in its infancy, and many failures due to programming defects exploited by malicious attackers and have made the headlines. In recent years, there has been an increasing effort in the literature to identify such vulnerabilities early in smart contracts to reduce the threats to the security of the accounts. Automatically patching smart contracts, however, is a much less investigated research topic. Yet, it can provide tools to help developers in fixing known vulnerabilities more rapidly. In this paper, we propose to review smart contract vulnerabilities and specify templates that will serve to automate patch generation. We implement the TIPS pipeline with 12 fix templates and assess its effectiveness on established smart contract datasets such as SmartBugs and ContractDefects. In particular, we show that TIPS is competitive against the state-of-the-art automated repair approach (SCRepair) in the literature. Finally, we evaluate the impact of the code changes suggested by TIPS in terms of gas usage.
C1 [Chen, Qianguo; Zhou, Teng; Liu, Kui; Ge, Chunpeng; Liu, Zhe] Nanjing Univ Aeronaut & Astronaut, Nanjing, Peoples R China.
   [Li, Li] Monash Univ, Melbourne, Australia.
   [Klein, Jacques; Bissyande, Tegawende F.] Univ Luxembourg, Luxembourg, Luxembourg.
C3 Nanjing University of Aeronautics & Astronautics; Monash University;
   University of Luxembourg
RP Liu, K (corresponding author), Nanjing Univ Aeronaut & Astronaut, Nanjing, Peoples R China.
EM cqgboy@163.com; tengzhou@nuaa.edu.cn; kui.liu@nuaa.edu.cn;
   li.li@monash.edu; gecp@nuaa.edu.cn; zhe.liu@nuaa.edu.cn;
   jacques.klein@uni.lu; tegawende.bissyande@uni.lu
RI chen, qianguo/IVV-0329-2023; LIU, zhe/HGD-6875-2022
OI chen, qianguo/0000-0002-6660-7409; 
CR Ashraf I, 2020, IEEE ACCESS, V8, P99552, DOI 10.1109/ACCESS.2020.2995183
   Brent L, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P454, DOI 10.1145/3385412.3385990
   Chen J., 2020, IEEE Trans. Softw. Eng.
   Nguyen TD, 2020, Arxiv, DOI arXiv:2004.08563
   Nguyen TD, 2021, Arxiv, DOI arXiv:2101.01917
   dasp, This is the very first iteration of the Decentralized Application Security Project (or DASP) Top 10 of 2018
   Durieux T, 2020, PROC INT CONF SOFTW, P530, DOI 10.1145/3377811.3380364
   Durieux T, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P349, DOI 10.1109/SANER.2017.7884635
   Ethereum, US
   ethereum, Remix
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Gao ZP, 2021, IEEE T SOFTWARE ENG, V47, P2874, DOI 10.1109/TSE.2020.2971482
   Gazzola L, 2019, IEEE T SOFTWARE ENG, V45, P34, DOI 10.1109/TSE.2017.2755013
   Ghanbari A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P19, DOI 10.1145/3293882.3330559
   github, SWC-registry
   github, Smart Contracts
   github, Ethereum smart contract security best practices
   Hartel P, 2020, LECT NOTES COMPUT SC, V12165, P23, DOI 10.1007/978-3-030-50995-8_2
   Huang YH, 2020, Arxiv, DOI arXiv:2007.14903
   ICO Security, about us
   Jiang B, 2018, IEEE INT CONF AUTOM, P259, DOI 10.1145/3238147.3238177
   Jiang JJ, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P298, DOI 10.1145/3213846.3213871
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   Koyuncu A, 2020, EMPIR SOFTW ENG, V25, P1980, DOI 10.1007/s10664-019-09780-z
   Koyuncu A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P314, DOI 10.1145/3338906.3338935
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Le XBD, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P213, DOI 10.1109/SANER.2016.76
   Li ZX, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1198, DOI 10.1109/ASE.2019.00136
   Liu C, 2018, PROC IEEE ACM INT C, P65, DOI 10.1145/3183440.3183495
   Liu H, 2018, IEEE INT CONF AUTOM, P814, DOI 10.1145/3238147.3240728
   Liu K, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3579637
   Liu K, 2020, PROC INT CONF SOFTW, P615, DOI 10.1145/3377811.3380338
   Liu K, 2021, J SYST SOFTWARE, V171, DOI 10.1016/j.jss.2020.110817
   Liu K, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P31, DOI 10.1145/3293882.3330577
   Liu K, 2019, IEEE INT CONF SOFTW, P102, DOI 10.1109/ICST.2019.00020
   Liu K, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P456, DOI 10.1109/saner.2019.8667970
   Liu XL, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P118, DOI 10.1109/SANER.2018.8330202
   Long F, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P727, DOI 10.1145/3106237.3106253
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Monperrus M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3105906
   Mueller B., 2018, HITB SECCONF AMSTERD, V9, P54
   Nikolic I, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P653, DOI 10.1145/3274694.3274743
   OLeary R.-R., 2017, Parity team publishes postmortem on $160 million ether freeze
   Saha RK, 2017, IEEE INT CONF AUTOM, P648, DOI 10.1109/ASE.2017.8115675
   Saha S, 2019, PROC INT CONF SOFTW, P13, DOI 10.1109/ICSE.2019.00020
   solare, ABOUT US
   Tikhomirov S, 2018, 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB), P9, DOI 10.1145/3194113.3194115
   Torres CF, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P664, DOI 10.1145/3274694.3274737
   Wan ZY, 2021, Arxiv, DOI arXiv:2102.10963
   Wen M, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/3180155.3180233
   Wustholz V, 2019, Arxiv, DOI arXiv:1905.06944
   Xiong YF, 2017, PROC INT CONF SOFTW, P416, DOI 10.1109/ICSE.2017.45
   Yu XL, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3402450
   Yuan Y, 2020, IEEE T SOFTWARE ENG, V46, P1040, DOI 10.1109/TSE.2018.2874648
   Zhang PC, 2020, Arxiv, DOI arXiv:2003.00257
   Zhang QZ, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P116, DOI [10.1109/saner48275.2020.9054822, 10.1109/SANER48275.2020.9054822]
NR 56
TC 0
Z9 0
U1 1
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 31
DI 10.1007/s10515-023-00392-y
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LP7W3
UT WOS:001188081000001
OA Green Published
DA 2024-07-18
ER

PT J
AU Kang, PL
AF Kang, Pilsung
TI Evolving scientific code adaptations with modularization frameworks
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software evolution; Program adaptation; Function call interception;
   Aspect-oriented programming; Scientific computing
ID SIMULATIONS; SYSTEMS; FORTRAN; TOOLS
AB Software for scientific computing has been traditionally unfavorable to changes, mainly due to its frequent use of old codebases where modern programming practices for modularity have been relatively difficult to adopt. In this paper, We present our 10-year experience of developing and evolving program adaptations in scientific software. Throughout a series of different adaptive scenario implementations, we show why managing adaptation codes using in-house tools in scientific computing has been difficult, and how we address the issue by means of modern software engineering techniques.
C1 [Kang, Pilsung] Dankook Univ, Dept Software Sci, Yongin 16890, Gyeonggi, South Korea.
C3 Dankook University
RP Kang, PL (corresponding author), Dankook Univ, Dept Software Sci, Yongin 16890, Gyeonggi, South Korea.
EM pilsungk@dankook.ac.kr
FU Dankook University
FX The present research was supported by the research fund of Dankook
   University in 2022.
CR Adhianto L, 2010, CONCURR COMP-PRACT E, V22, P685, DOI 10.1002/cpe.1553
   [Anonymous], 2001, LCPC
   [Anonymous], 1999, Using MPI: Portable Parallel Programming with the Message Passing Interface
   [Anonymous], 2008, PATCH FREE USER LEVE
   Baude F, 2015, SOFTWARE PRACT EXPER, V45, P1189, DOI 10.1002/spe.2270
   Bruening Derek, 2004, Efficient, transparent, and comprehensive runtime code manipulation
   Buisson J., 2005, International Conference ParCo, P65
   Cao Y, 2005, J CHEM PHYS, V122, DOI 10.1063/1.1824902
   Charif-Rubial AS, 2013, INT C HIGH PERFORM, P206, DOI 10.1109/HiPC.2013.6799106
   Du W., 2004, SC 04, P29
   Free Software Foundation, GCC ONL DOC
   GILLESPIE DT, 1976, J COMPUT PHYS, V22, P403, DOI 10.1016/0021-9991(76)90041-3
   Hunt G, 1999, PROCEEDINGS OF THE 3RD USENIX WINDOWS NT SYMPOSIUM, P135
   Janjic V., 2008, MAI 08 P 2 WORKSH MI, P7
   Kang P., 2011, P 10 INT C ASPECT OR, P165
   Kang P., 2009, P 24 ANN ACM S APPL, P995
   Kang P, 2018, J INF SCI ENG, V34, P1367, DOI 10.6688/JISE.201811_34(6).0002
   Kang P, 2018, IEICE T INF SYST, VE101D, P1950, DOI 10.1587/transinf.2018EDL8044
   Kang P, 2018, SOFTWARE PRACT EXPER, V48, P385, DOI 10.1002/spe.2501
   Kang P, 2012, CLUSTER COMPUT, V15, P321, DOI 10.1007/s10586-012-0205-z
   Kang P, 2012, COMPUT SCI ENG, V14, P52, DOI 10.1109/MCSE.2011.17
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   KINCAID DR, 1982, ACM T MATH SOFTWARE, V8, P302, DOI 10.1145/356004.356009
   Lehman M. M., 1985, Program Evolution: Processes of Software Change
   Li H, 2008, BIOTECHNOL PROGR, V24, P56, DOI 10.1021/bp070255h
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Luu H, 2013, IEEE INT C CL COMP
   Mascagni M, 2000, ACM T MATH SOFTWARE, V26, P436, DOI 10.1145/358407.358427
   Murai H, 2018, 2018 SIXTH INTERNATIONAL SYMPOSIUM ON COMPUTING AND NETWORKING WORKSHOPS (CANDARW 2018), P250, DOI 10.1109/CANDARW.2018.00054
   Peterson P, 2009, INT J COMPUT SCI ENG, V4, P296, DOI 10.1504/IJCSE.2009.029165
   Quinlan Dan, 2011, CET US COMP INFR WOR, V2011, P1
   Saito M, 2008, MONTE CARLO AND QUASI-MONTE CARLO METHODS 2006, P607, DOI 10.1007/978-3-540-74496-2_36
   Schaefer CA, 2009, LECT NOTES COMPUT SC, V5704, P9, DOI 10.1007/978-3-642-03869-3_5
   Spinczyk O., 2002, CR PIT 02 P 40 INT C, P53
   Spinellis D, 2008, IEEE SOFTWARE, V25, P78, DOI 10.1109/MS.2008.15
   Tafti D.K., 2001, PROC ASME FLUIDS ENG, P256, DOI [DOI 10.1115/IMECE2001/FED-24966, 10.1115/IMECE2001/FED-24966]
   The Eclipse Foundation, ASP PROJ
   Varadarajan S, 2005, FUTURE GENER COMP SY, V21, P878, DOI 10.1016/j.future.2003.12.020
   Voss MJ, 2001, ACM SIGPLAN NOTICES, V36, P93, DOI 10.1145/568014.379583
   Yu H, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P278
   Yue S., 2013, P INT C HIGH PERF CO
NR 42
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 24
DI 10.1007/s10515-023-00393-x
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N8OJ9
UT WOS:001039540300001
DA 2024-07-18
ER

PT J
AU Sharma, R
   Shahbazi, R
   Fard, FH
   Codabux, Z
   Vidoni, M
AF Sharma, Rishab
   Shahbazi, Ramin
   Fard, Fatemeh H.
   Codabux, Zadia
   Vidoni, Melina
TI Self-admitted technical debt in R: detection and causes
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Self-admitted technical debt; R packages; Machine learning; Deep
   learning; Deep neural pre-trained language models
ID SENTIMENT
AB Self-Admitted Technical Debt (SATD) is primarily studied in Object-Oriented (OO) languages and traditionally commercial software. However, scientific software coded in dynamically-typed languages such as R differs in paradigm, and the source code comments' semantics are different (i.e., more aligned with algorithms and statistics when compared to traditional software). Additionally, many Software Engineering topics are understudied in scientific software development, with SATD detection remaining a challenge for this domain. This gap adds complexity since prior works determined SATD in scientific software does not adjust to many of the keywords identified for OO SATD, possibly hindering its automated detection. Therefore, we investigated how classification models (traditional machine learning, deep neural networks, and deep neural Pre-Trained Language Models (PTMs)) automatically detect SATD in R packages. This study aims to study the capabilities of these models to classify different TD types in this domain and manually analyze the causes of each in a representative sample. Our results show that PTMs (i.e., RoBERTa) outperform other models and work well when the number of comments labelled as a particular SATD type has low occurrences. We also found that some SATD types are more challenging to detect. We manually identified sixteen causes, including eight new causes detected by our study. The most common cause was failure to remember, in agreement with previous studies. These findings will help the R package authors automatically identify SATD in their source code and improve their code quality. In the future, checklists for R developers can also be developed by scientific communities such as rOpenSci to guarantee a higher quality of packages before submission.
C1 [Sharma, Rishab; Shahbazi, Ramin; Fard, Fatemeh H.] Univ British Columbia, Dept Comp Sci, Kelowna, BC, Canada.
   [Codabux, Zadia] Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK, Canada.
   [Vidoni, Melina] Australian Natl Univ, CECS Sch Comp, Canberra, ACT, Australia.
C3 University of British Columbia; University of Saskatchewan; Australian
   National University
RP Vidoni, M (corresponding author), Australian Natl Univ, CECS Sch Comp, Canberra, ACT, Australia.
EM fatemeh.fard@ubc.ca; zadiacodabux@ieee.org; melina.vidoni@anu.edu.au
OI Fard, Fatemeh/0000-0002-4505-6257; Vidoni, Melina/0000-0002-4099-1430
FU Natural Sciences and Engineering Research Council of Canada at the
   University of Saskatchewan [RGPIN-2021-04232, DGECR-2021-00283]; Natural
   Sciences and Engineering Research Council of Canada at the University of
   British Columbia [RGPIN-2019-05175]
FX This study is partly supported by the Natural Sciences and Engineering
   Research Council of Canada, RGPIN-2021-04232 and DGECR-2021-00283 at the
   University of Saskatchewan, and RGPIN-2019-05175 at the University of
   British Columbia.
CR Ahalt S, 2014, COMPUT SCI ENG, V16, P18, DOI 10.1109/MCSE.2014.5
   Ahmad W., 2020, P 58 ANN M ASS COMPU, P4998, DOI 10.18653/v1/2020.acl-main.449
   Alfadel M, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021), P446, DOI 10.1109/SANER50967.2021.00048
   AlOmar EA, 2022, SCI COMPUT PROGRAM, V213, DOI 10.1016/j.scico.2021.102693
   Arvanitou EM, 2021, J SYST SOFTWARE, V172, DOI 10.1016/j.jss.2020.110848
   Arya D, 2019, PROC INT CONF SOFTW, P454, DOI 10.1109/ICSE.2019.00058
   Bavota G, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P315, DOI [10.1109/MSR.2016.040, 10.1145/2901739.2901742]
   Bogart C, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P109, DOI 10.1145/2950290.2950325
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Codabux Z, 2021, IEEE WORK CONF MIN S, P195, DOI 10.1109/MSR52588.2021.00032
   Codabux Z, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1894
   Cruz D, 2020, 2020 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT, TECHDEBT, P31, DOI 10.1145/3387906.3388618
   Cui Y, 2019, PROC CVPR IEEE, P9260, DOI 10.1109/CVPR.2019.00949
   Decan A, 2016, ACM PROCEEDINGS OF THE 10TH EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ECSA-W), DOI 10.1145/2993412.3003382
   Decan A, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P493, DOI 10.1109/SANER.2016.12
   Devlin J, 2018, N AM ASS COMP LING
   Fan A, 2018, PROCEEDINGS OF THE 56TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL), VOL 1, P889
   Flisar J, 2019, IEEE ACCESS, V7, P106475, DOI 10.1109/ACCESS.2019.2933318
   Flisar J, 2018, EUROMICRO CONF PROC, P230, DOI 10.1109/SEAA.2018.00045
   Forman George, 2010, ACM SIGKDD Explorations Newsletter, DOI DOI 10.1145/1882471.1882479
   Fowler M, 2009, TECHNICAL DEBT QUADR
   Freire Savio, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P210, DOI 10.1145/3383219.3383241
   Fucci G, 2021, IEEE WORK CONF MIN S, P403, DOI 10.1109/MSR52588.2021.00052
   Gao ZP, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P218, DOI 10.1145/3468264.3468553
   German DM, 2013, EUR CON SFTWR MTNCE, P243, DOI 10.1109/CSMR.2013.33
   Haibo He YM., 2013, IMBALANCED LEARNING
   Hannay JE, 2009, 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING FOR COMPUTATIONAL SCIENCE AND ENGINEERING, P1, DOI 10.1109/SECSE.2009.5069155
   Howison J, 2015, RES EVALUAT, V24, P454, DOI 10.1093/reseval/rvv014
   Huang Q, 2018, EMPIR SOFTW ENG, V23, P418, DOI 10.1007/s10664-017-9522-4
   James G, 2013, SPRINGER TEXTS STAT, V103, P1, DOI [10.1007/978-1-4614-7138-7, 10.1007/978-1-4614-7138-7_1]
   Jiang M, 2019, IEEE ACCESS, V7, P179942, DOI 10.1109/ACCESS.2019.2957192
   Kanade A, 2020, PR MACH LEARN RES, V119
   Kaur A, 2019, ADV INTELL SYST COMP, V741, P909, DOI 10.1007/978-981-13-0761-4_86
   Kaur A, 2017, 2017 INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND DATA SCIENCE (MLDS 2017), P9, DOI 10.1109/MLDS.2017.8
   Krishnaveni S, 2020, ADV INTELL SYST COMP, V1056, P723, DOI 10.1007/978-981-15-0199-9_62
   Lan Z., 2019, INT C LEARNING REPRE
   Li YK, 2020, EUROMICRO CONF PROC, P495, DOI 10.1109/SEAA51224.2020.00083
   Lin TY, 2020, IEEE T PATTERN ANAL, V42, P318, DOI 10.1109/TPAMI.2018.2858826
   Liu JK, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN SOCIETY (ICSE-SEIS 2021), P1, DOI 10.1145/3377815.3381377
   Liu YH, 2019, Arxiv, DOI arXiv:1907.11692
   Liu ZX, 2018, PROC IEEE ACM INT C, P9, DOI 10.1145/3183440.3183478
   Maalej W, 2015, INT REQUIR ENG CONF, P116, DOI 10.1109/RE.2015.7320414
   Maipradit R, 2020, IEEE INT WORK C SO, P54, DOI 10.1109/SCAM51674.2020.00011
   Maipradit R, 2020, EMPIR SOFTW ENG, V25, P3770, DOI 10.1007/s10664-020-09854-3
   Maldonado ED, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P9, DOI 10.1109/MTD.2015.7332619
   Maldonado ED, 2017, IEEE T SOFTWARE ENG, V43, P1044, DOI 10.1109/TSE.2017.2654244
   Manning C., 2003, C N AM CHAPT ASS COM, DOI [10.3115/1075168.1075176, DOI 10.3115/1075168.1075176]
   McHugh ML, 2012, BIOCHEM MEDICA, V22, P276, DOI 10.11613/bm.2012.031
   Mensah S., 2016, Rework effort estimation of self-admitted technical debt
   Mensah S, 2018, J SYST SOFTWARE, V135, P37, DOI 10.1016/j.jss.2017.09.026
   Milewicz Reed, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P421, DOI 10.1109/MSR.2019.00069
   Minaee S, 2020, MED IMAGE ANAL, V65, DOI 10.1016/j.media.2020.101794
   Mora-Cantallops M, 2020, J SYST SOFTWARE, V170, DOI 10.1016/j.jss.2020.110744
   Mora-Cantallops M, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2270
   Morandat F, 2012, LECT NOTES COMPUT SC, V7313, P104, DOI 10.1007/978-3-642-31057-7_6
   Mukherjee S., 2021, FIXING DEPENDENCY ER, P439
   Naseem U, 2020, FUTURE GENER COMP SY, V113, P58, DOI 10.1016/j.future.2020.06.050
   Novielli N, 2018, IEEE WORK CONF MIN S, P364, DOI 10.1145/3196398.3196403
   Phan T.H., 2020, RESOLVING CLASS IMBA
   Pinto G, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P582, DOI 10.1109/SANER.2018.8330263
   Potdar A, 2014, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2014.31
   Rantala L, 2020, SOFTWARE QUAL J, V28, P1551, DOI 10.1007/s11219-020-09520-3
   Ren XX, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3324916
   Robbes R, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2019), P29, DOI 10.1109/ICSE-NIER.2019.00016
   Santos RM, 2020, PROCEEDINGS OF THE 22ND INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS (ICEIS), VOL 2, P157, DOI 10.5220/0009796001570165
   Setyawan MYH., 2018, P 2018 INT C APPL EN, P1, DOI DOI 10.1109/INCAE.2018.8579372
   Siavvas M, 2022, ENTERP INF SYST-UK, V16, DOI 10.1080/17517575.2020.1824017
   Sierra G, 2019, J SYST SOFTWARE, V152, P70, DOI 10.1016/j.jss.2019.02.056
   Soyer Cunha Warteruzannan, 2020, SBCARS '20: Proceedings of the 14th Brazilian Symposium on Software Components, Architectures, and Reuse, P21, DOI 10.1145/3425269.3425281
   Sridharan M, 2021, IEEE WORK CONF MIN S, P358, DOI 10.1109/MSR52588.2021.00048
   Stanik C, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P220, DOI 10.1109/REW.2019.00046
   Storer T, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3084225
   TIOBE, 2020, TIOBE IND SOFTW QUAL
   Vidoni M, 2021, PROC INT CONF SOFTW, P1523, DOI 10.1109/ICSE43902.2021.00136
   Vidoni M, 2021, IEEE WORK CONF MIN S, P179, DOI 10.1109/MSR52588.2021.00030
   Wang Q, 2019, 57TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2019), P1810
   Wang X, 2020, IEEE INT CONF AUTOM, P871, DOI 10.1145/3324884.3416583
   Wattanakriengkrai S, 2018, INT WORKSH EMPIR ENG, P7, DOI 10.1109/IWESEP.2018.00010
   Wehaibi S, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P179, DOI 10.1109/SANER.2016.72
   Whitworth B., 2006, ENCY HUMAN COMPUTER
   Xavier L, 2020, IEEE WORK CONF MIN S, P137, DOI 10.1145/3379597.3387459
   Yan M, 2019, IEEE T SOFTWARE ENG, V45, P1211, DOI 10.1109/TSE.2018.2831232
   You YJ, 2019, 57TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2019), P2132
   Zampetti F, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P355, DOI [10.1109/SANER48275.2020.9054868, 10.1109/saner48275.2020.9054868]
   Zampetti F, 2018, IEEE WORK CONF MIN S, P526, DOI 10.1145/3196398.3196423
   Zanella G., 2020, HAWAII INT C SYSTEM, P471, DOI [10.24251/HICSS.2020.058, DOI 10.24251/HICSS.2020.058]
   Zhang T, 2020, PROC IEEE INT CONF S, P70, DOI 10.1109/ICSME46990.2020.00017
   Zhang ZL, 2018, ADV NEUR IN, V31
NR 88
TC 4
Z9 4
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 53
DI 10.1007/s10515-022-00358-6
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3Z9WT
UT WOS:000844765300001
OA hybrid
DA 2024-07-18
ER

PT J
AU Williams, I
   Yuan, XH
   Anwar, M
   McDonald, JT
AF Williams, Imano
   Yuan, Xiaohong
   Anwar, Mohd
   McDonald, J. Todd
TI An Automated Security Concerns Recommender Based on Use Case
   Specification Ontology
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Semantic Rules; Use Case Modeling; Ontology Formalisms; Knowledge-Based;
   Software Security
AB Identifying security concerns is a security activity that can be integrated into the requirements development phase. However, it has been shown that manually identifying concerns is a time-consuming and challenging task. The software engineering community has utilized natural language processing and query systems to automatically find part of the requirement specification with a specific concern. This research presents an ontology-based recommender system to suggest security concerns based on use case semantic rules and build on recent studies to find concerns in use cases. Our approach is to model use cases for interface design and map specific parts of use cases to the Application Security Verification Standard (ASVS) based on security concerns at the interaction steps of use cases. We conducted two evaluations, where we generated use case models from Restricted Use Case Modeling (RUCM) descriptions and then used semantic rules to infer where a specific security concern is in the use case models. These evaluations show that the recommender achieves up to 100% precision and recall for modeling use cases and recommending security concerns when the use case steps strictly adhere to rules for RUCM use cases. Otherwise, the modeling precision and recall will have arbitrary values, thus affecting the precision and recall for the recommended security concerns. As the main contribution, our approach can address security concerns for ASVS at the level of use case interaction steps.
C1 [Williams, Imano; Yuan, Xiaohong; Anwar, Mohd] North Carolina A&T State Univ, Comp Sci, Greensboro, NC USA.
   [McDonald, J. Todd] Univ S Alabama, Comp Sci, Mobile, AL 36688 USA.
C3 University of North Carolina; North Carolina A&T State University;
   University of South Alabama
RP Williams, I (corresponding author), North Carolina A&T State Univ, Comp Sci, Greensboro, NC USA.
EM irwilli1@aggies.ncat.edu; xhyuan@ncat.edu; manwar@ncat.edu;
   jtmcdonald@southalabama.edu
FU National Security Agency [H98230-20-1-0404]
FX This work is in part funded by the National Security Agency Grant
   H98230-20-1-0404. Any opinions, findings, or conclusions found in this
   paper are those of the authors and do not necessarily reflect the
   sponsors' views. The authors would like to acknowledge Dr. Albert
   Esterline for his suggestion on the use of ontology programming as well.
CR Abioye TE, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2269
   Acharya S., 2017, 2017 ASEE ANN C EXP
   Al-Ahmad Bilal, 2016, Lecture Notes on Software Engineering, V4, P205, DOI 10.18178/lnse.2016.4.3.251
   [Anonymous], 2014, Recommendation Systems in Software Engineering, DOI DOI 10.1007/978
   [Anonymous], 2005, P WORKSH SEM WEB EN
   [Anonymous], 2005, Secure Systems Development with UML
   Araujo J., 2005, Technical Notes
   Arogundade OT, 2020, ARAB J SCI ENG, V45, P6183, DOI 10.1007/s13369-020-04524-4
   Bagiampou M., 2012, USE CASE DIAGRAMS ON, P035
   Berry DM, 2017, 2017 IEEE 25TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW), P284, DOI 10.1109/REW.2017.25
   Boberski M., 2009, Owasp application security verification standard
   Burke R, 2000, ENCY LIB INFORM SYST, V69, P175
   Calderon ME, 2007, AVANCES SISTEMAS INF, V4, P43
   Chikh A, 2011, COMM COM INF SC, V186, P139
   Cockburn A, 2001, Writing effective use cases, the crystal collection for software professionals
   Constantine LL, 2001, AW OBJ TECHNOL S, P245
   Couto R., 2014, ARXIV
   Cox K, 2007, J SYST SOFTWARE, V80, P1286, DOI 10.1016/j.jss.2006.12.485
   DeGiacomo G, 1996, MOR KAUF R, P316
   DeGrace P., 1990, WICKED PROBLEMS RIGH
   Dritsas S., 2006, J E COMMER TOOLS APP, P1
   Felfernig A., 2006, EMPIRICAL STUDY CONS, P37
   Felfernig A., 2008, P 10 INT C ELECT COM, P1, DOI DOI 10.1145/1409540.1409544
   Gomaa H, 2009, EA'09: EARLY ASPECT WORKSHOP, P1
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Haley C.B., 2005, Validating security requirements using structured toulmin-style argumentation, V4, P21
   Happel H.J., 2006, P WORKSH SEM WORKSH, P5
   Hesse W., 2005, EAI 2005 P WORKSH EN, P3
   Howard M, 2005, COMPUTER SECURITY IN THE 21ST CENTURY, P109, DOI 10.1007/0-387-24006-3_8
   Jurkiewicz J, 2015, INFORM SOFTWARE TECH, V58, P110, DOI 10.1016/j.infsof.2014.09.011
   Kamalrudin Massila., 2010, ACM INT C AUTOMATED, P255, DOI [DOI 10.1145/1858996.1859047, 10.1145/1858996.1859047]
   Kang WT, 2013, 2013 INTERNATIONAL CONFERENCE ON CYBER-ENABLED DISTRIBUTED COMPUTING AND KNOWLEDGE DISCOVERY (CYBERC), P67, DOI 10.1109/CyberC.2013.20
   Ko D, 2019, REQUIR ENG, V24, P431, DOI 10.1007/s00766-018-0288-z
   Kolaitis PG, 2000, J COMPUT SYST SCI, V61, P302, DOI 10.1006/jcss.2000.1713
   Konstan JA, 1997, COMMUN ACM, V40, P77, DOI 10.1145/245108.245126
   Lamy JB, 2017, ARTIF INTELL MED, V80, P11, DOI 10.1016/j.artmed.2017.07.002
   Lasheras J, 2009, J RES PRACT INF TECH, V41, P119
   Lin JX, 1996, CONCURRENT ENG-RES A, V4, P279, DOI 10.1177/1063293X9600400307
   Martin B., 2011, COMMON WEAKNESS ENUM, V7515
   MAYANK V., 2004, REQUIREMENTS ENG SEM
   Mayfield J., 2012, EVALUATING QUALITY K
   Miller E., 1998, Bulletin of the American Society for Information Science, V25, P15, DOI 10.1002/bult.105
   Misra S., 2020, P INT C INF COMM TEC, P727, DOI [10.1007/978-3-030-69143-1_55, DOI 10.1007/978-3-030-69143-1_55/COVER, 10.1007/978-3-030-69143-155, DOI 10.1007/978-3-030-69143-155]
   Musen Mark A, 2015, AI Matters, V1, P4
   Noy N., 2001, KNOWLEDGE SYSTEMS LA, P32, DOI DOI 10.1016/J.ARTMED.2004.01.014
   Pakdeetrakulwong U, 2014, INT CONF INTERNET, P137, DOI 10.1109/ICITST.2014.7038793
   Preece A., 2006, SEMANTIC WEB APPROAC, P151
   Proksch S., 2013, SOFTWARE ENG, P1
   Rago A., 2015, REASSISTANT TOOL IDE, P32
   Rago A, 2016, AUTOMAT SOFTW ENG, V23, P219, DOI 10.1007/s10515-014-0156-0
   Rago A, 2013, REQUIR ENG, V18, P67, DOI 10.1007/s00766-011-0142-z
   Ricci F, 2011, RECOMMENDER SYSTEMS HANDBOOK, P1, DOI 10.1007/978-0-387-85820-3_1
   Romero-Mariona J., 2008, Proceedings of the 2008 international Workshop on Recommendation Systems For Software Engineering, P50
   Salini P, 2012, PROCEDIA ENGINEER, V38, P2799, DOI 10.1016/j.proeng.2012.06.328
   Salini P., 2016, NOVEL METHOD ONTOLOG, P1
   Sampaio A, 2007, LECT NOTES COMPUT SC, V4620, P4
   Santos J, 2008, MARK: 2008 FIRST INTERNATIONAL WORKSHOP ON MANAGING REQUIREMENTS KNOWLEDGE, P32, DOI 10.1109/MARK.2008.4
   Smith M., 2004, OWL web ontology language: guide
   Sommerville I., 2003, CURRENT ISSUES SAFET, P3
   Tena S, 2013, INFORM SOFTWARE TECH, V55, P1580, DOI 10.1016/j.infsof.2013.02.012
   Tiwari S, 2013, ASIA PAC SOFWR ENG, P207, DOI 10.1109/APSEC.2013.37
   Tsang E., 2014, Foundations of Constraint Satisfaction: The Classic Text
   Türpe S, 2017, INT REQUIR ENG CONF, P122, DOI 10.1109/RE.2017.13
   Valaski J., 2016, Proceedings of the International Conference on Software Engineering Research and Practice (SERP). The Steering Committee of The World Congress in Computer Science, P24
   Wang CH, 2022, IEEE T SOFTWARE ENG, V48, P585, DOI 10.1109/TSE.2020.2998503
   Williams I., 2020, IDENTIFYING SECURITY, P83
   WOUTERS B., 2000, EUROPEAN C OBJECT OR, P1
   Yahya S., 2014, Requirements Engineering, P16, DOI [10.1007/978-3-662-43610-3_2, DOI 10.1007/978-3-662-43610-3_2]
   Yue T, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430536.2430539
   Yue T, 2009, LECT NOTES COMPUT SC, V5795, P484
   Zanker M, 2010, CONSTRAINTS, V15, P574, DOI 10.1007/s10601-010-9098-8
   Zhang HH, 2017, IEEE ACM INT WORKS M, P5, DOI 10.1109/MiSE.2017.9
NR 72
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 42
DI 10.1007/s10515-022-00334-0
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2C9VU
UT WOS:000811207100002
DA 2024-07-18
ER

PT J
AU Chouchane, M
   Soui, M
   Ghedira, K
AF Chouchane, Mabrouka
   Soui, Makram
   Ghedira, Khaled
TI The impact of the code smells of the presentation layer on the
   diffuseness of aesthetic defects of Android apps
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Graphical android user interface; Aesthetic metrics; Presentation layer;
   Android apps
ID FAULT-PRONENESS; SOFTWARE; BAD
AB Recently, the number of Android apps has witnessed an ever-increase that is becoming a ubiquitous presence in our daily lives. These apps are evolving fast by offering new characteristics and functionalities. These ongoing improvements often affect app quality due to bad design practices and poor coding, known as Android code smells. In this context, the recent works highlighted the importance of the design quality of mobile application. To this end, many methods and tools are proposed to assess the quality of graphical user interface (GUI) and source code of Android apps, such as heuristic evaluation and field-testing, etc. In addition, the features and design of these Android apps may introduce bad design practices, that can highly decrease the quality and the performance of these Android applications. In this paper, we empirically study the diffuseness of GUI aesthetic defects and the code smells of the presentation layer of Android apps. Then, we investigate the impact of the appearance of code smells on the aesthetic of Android apps. To this end, we use two evaluation tools. The first one is called PLAIN which consists of detecting aesthetic defects by measuring a set of structural metrics of GUI. The second one is Android UI Detector which aims to identify the presentation layer code smells of Android apps. This analysis study is based on 8480 GUIs of 120 Android apps. The obtained results confirm that code smells of the presentation layer of Android apps have an impact on GUI aesthetic defects.
C1 [Chouchane, Mabrouka] Natl Sch Comp Sci, Manouba, Tunisia.
   [Soui, Makram] Saudi Elect Univ, Coll Comp & Informat, Riyadh, Saudi Arabia.
   [Ghedira, Khaled] Private Higher Sch Engn & Technol, Ariana, Tunisia.
C3 Universite de la Manouba; Saudi Electronic University
RP Chouchane, M (corresponding author), Natl Sch Comp Sci, Manouba, Tunisia.
EM chouchane.mabrouka@gmail.com; m.soui@seu.edu.sa;
   khaledghedira3@gmail.com
RI chouchane, Mabrouka/GPT-0979-2022
CR Abbes M, 2011, EUR CON SFTWR MTNCE, P181, DOI 10.1109/CSMR.2011.24
   AlOmar EA, 2019, INT SYMP EMP SOFTWAR, P42
   [Anonymous], 2003, 2 WORKSH EMP EV AD S
   [Anonymous], 1993, MORGAN KAUFMANN SERI
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 2012, EXPT SOFTWARE ENG
   Arcoverde R., 2011, WORKSH REF TOOLS, P33
   Bavota G, 2015, J SYST SOFTWARE, V107, P1, DOI 10.1016/j.jss.2015.05.024
   Bavota G, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P56, DOI 10.1109/ICSM.2012.6405253
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Camara J., 2014, Journal of the Brazilian Computer Society, V20, P1
   Carvalho SG, 2019, EMPIR SOFTW ENG, V24, P3546, DOI 10.1007/s10664-019-09768-9
   Cohen J., 1992, Current Directions in Psychological Science, V1, P98, DOI [DOI 10.1111/1467-8721.EP10768783, 10.1111/1467-8721.ep10768783]
   Cruz Luis, 2017, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). Proceedings, P46, DOI 10.1109/MOBILESoft.2017.19
   Cruz L, 2019, EMPIR SOFTW ENG, V24, P2438, DOI 10.1007/s10664-019-09701-0
   D'Ambros Marco, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P23, DOI 10.1109/QSIC.2010.58
   Flegal KM, 2016, JAMA-J AM MED ASSOC, V315, P2284, DOI 10.1001/jama.2016.6458
   Fowler Martin, 1997, 11 EUR C JYV FINL
   Freund Y., 1999, Journal of Japanese Society for Artificial Intelligence, V14, P771
   Gao J, 2019, IEEE INT C ENG COMP, P200, DOI 10.1109/ICECCS.2019.00029
   Gatrell M, 2015, SCI COMPUT PROGRAM, V102, P44, DOI 10.1016/j.scico.2014.12.002
   Gondra I, 2008, J SYST SOFTWARE, V81, P186, DOI 10.1016/j.jss.2007.05.035
   Hecht G, 2015, IEEE INT CONF AUTOM, P236, DOI 10.1109/ASE.2015.46
   Ines G, 2017, PROCEDIA COMPUT SCI, V112, P235, DOI 10.1016/j.procs.2017.08.234
   Jindal R., 2014, 3 INT C REL INF TECH, P1, DOI DOI 10.1109/ICRITO.2014.7014673
   Kessentini Marouane, 2017, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). Proceedings, P122, DOI 10.1109/MOBILESoft.2017.29
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   Li W, 2007, J SYST SOFTWARE, V80, P1120, DOI 10.1016/j.jss.2006.10.018
   Mabrouka C., EXPRIMENT
   Malhotra R, 2012, J INF PROCESS SYST, V8, P241, DOI 10.3745/JIPS.2012.8.2.241
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Mercaldo F, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1978
   Minelli R, 2013, EUR CON SFTWR MTNCE, P144, DOI 10.1109/CSMR.2013.24
   Mkaouer MW, 2017, EMPIR SOFTW ENG, V22, P894, DOI 10.1007/s10664-016-9426-8
   Olbrich SM, 2010, PROC IEEE INT CONF S
   Palomba F, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P487, DOI 10.1109/SANER.2017.7884659
   Palomba F, 2015, IEEE T SOFTWARE ENG, V41, P462, DOI 10.1109/TSE.2014.2372760
   Park D, 2011, INT J HUM-COMPUT ST, V69, P839, DOI 10.1016/j.ijhcs.2011.06.006
   Reimann Jan., 2014, Softwaretechnik-Trends, V34
   Ruiz I. J. M., 2012, 2012 IEEE 20th International Conference on Program Comprehension, P113
   Ruzic L, 2016, LECT NOTES COMPUT SC, V9737, P98, DOI 10.1007/978-3-319-40250-5_10
   Sjoberg DIK, 2013, IEEE T SOFTWARE ENG, V39, P1144, DOI 10.1109/TSE.2012.89
   Soui M., 2019, SOFT COMPUT, P1
   Soui M, 2017, PROCEEDINGS OF THE 12TH INTERNATIONAL JOINT CONFERENCE ON COMPUTER VISION, IMAGING AND COMPUTER GRAPHICS THEORY AND APPLICATIONS (VISIGRAPP 2017), VOL 1, P127, DOI 10.5220/0006171201270136
   Stephanidis C., 1999, 5 ERCIM WORKSH US IN
   Student, 1921, Biometrika, V13, P263, DOI 10.1093/biomet/13.2-3.263
   Ting SL, 2011, International Journal of Software Engineering and Its Applications, P37
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Yamashita A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P682, DOI 10.1109/ICSE.2013.6606614
   Yamashita A, 2013, WORK CONF REVERSE EN, P242, DOI 10.1109/WCRE.2013.6671299
   Yang L, 2020, NEUROCOMPUTING, V415, P295, DOI 10.1016/j.neucom.2020.07.061
   Yegnanarayana B., 2009, ARTIFICIAL NEURAL NE
NR 55
TC 4
Z9 4
U1 3
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 20
DI 10.1007/s10515-021-00297-8
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UU8FH
UT WOS:000699029700001
DA 2024-07-18
ER

PT J
AU Cao, ZR
   Tian, Y
   Le, TDB
   Lo, D
AF Cao, Zherui
   Tian, Yuan
   Le, Tien-Duy B.
   Lo, David
TI Rule-based specification mining leveraging learning to rank
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Specification mining; Learning to rank; Automated software development;
   Software maintenance and evolution
AB Software systems are often released without formal specifications. To deal with the problem of lack of and outdated specifications, rule-based specification mining approaches have been proposed. These approaches analyze execution traces of a system to infer the rules that characterize the protocols, typically of a library, that its clients must obey. Rule-based specification mining approaches work by exploring the search space of all possible rules and use interestingness measures to differentiate specifications from false positives. Previous rule-based specification mining approaches often rely on one or two interestingness measures, while the potential benefit of combining multiple available interestingness measures is not yet investigated. In this work, we propose a learning to rank based approach that automatically learns a good combination of 38 interestingness measures. Our experiments show that the learning to rank based approach outperforms the best performing approach leveraging single interestingness measure by up to 66%.
C1 [Cao, Zherui] Zhejiang Univ, Coll Comp Sci & Technol, Hangzhou, Zhejiang, Peoples R China.
   [Tian, Yuan; Le, Tien-Duy B.; Lo, David] Singapore Management Univ, Sch Informat Syst, Singapore, Singapore.
C3 Zhejiang University; Singapore Management University
RP Tian, Y (corresponding author), Singapore Management Univ, Sch Informat Syst, Singapore, Singapore.
EM caozherui@zju.edu.cn; ytian@smu.edu.sg; btdle.2012@smu.edu.sg;
   davidlo@smu.edu.sg
RI Lo, David/A-2493-2012
OI Lo, David/0000-0002-4367-7201
CR [Anonymous], 1 TEXT RETR C TREC 1
   [Anonymous], 2006, P 2006 INT S SOFTWAR
   [Anonymous], 2010, P 19 INT S SOFTW TES, DOI [10.1145/1831708.1831723, DOI 10.1145/1831708.1831723]
   [Anonymous], 2011, P 20 INT C WORLD WID, DOI DOI 10.1145/1963405.1963459
   [Anonymous], 2003, Journal of machine learning research
   [Anonymous], ICSME 30 INT C SOFTW
   [Anonymous], ESEC SIGSOFT FSE
   [Anonymous], PROC INT CONF SOFTW
   [Anonymous], 2009, Trends R Inf. Retriev.
   [Anonymous], 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering- Volume 1, ICSE '10
   [Anonymous], 2014, P IEEE ACM 29 INT C
   [Anonymous], 2012, Proceedings of_the_21st_ACM_international_conference_on_Information_and_knowledge management
   [Anonymous], ASE
   [Anonymous], 1997, Fourth NASA Langley Formal Methods Workshop (LFM)
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   BESCHASTNIKH I., 2011, P 19 ACM SIGSOFT S 1, P267, DOI DOI 10.1145/2025113.2025151
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   Binkley D, 2014, PROC IEEE INT CONF S, P441, DOI 10.1109/ICSME.2014.70
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Burges C., 2005, ICML, P89
   Burges C. J., 2007, ADV NEURAL INFORM PR, P193, DOI DOI 10.1007/S10994-010-5185-8
   Cao Z., 2007, P 24 INT C MACHINE L, P129, DOI DOI 10.1145/1273496.1273513
   da Costa DA, 2014, PROC IEEE INT CONF S, P281, DOI 10.1109/ICSME.2014.50
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Friedman JH, 2001, ANN STAT, V29, P1189, DOI 10.1214/aos/1013203451
   Geng LQ, 2006, ACM COMPUT SURV, V38, DOI 10.1145/1132960.1132963
   Ghotra B, 2017, IEEE WORK CONF MIN S, P146, DOI 10.1109/MSR.2017.18
   Henning J, 2009, VET RES, V40, DOI 10.1051/vetres:2008053
   Jun Xu, 2007, 30th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P391
   Krka I, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P178, DOI 10.1145/2635868.2635890
   Le T.-D. B., 2016, P 25 INT S SOFTW TES, P177, DOI DOI 10.1145/2931037.2931049
   Le TDB, 2015, IEEE INT CONF AUTOM, P115, DOI 10.1109/ASE.2015.83
   Le TDB, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P331, DOI 10.1109/SANER.2015.7081843
   Lee CP, 2014, NEURAL COMPUT, V26, P781, DOI 10.1162/NECO_a_00571
   Lemieux C, 2015, IEEE INT CONF AUTOM, P81, DOI 10.1109/ASE.2015.71
   Li WC, 2010, DES AUT CON, P755
   Liu HT, 2016, INT CONF SEMANT, P1, DOI [10.1109/SKG.2016.11, 10.1109/SKG.2016.009]
   Liu TY, 2011, LEARNING TO RANK FOR INFORMATION RETRIEVAL, P1, DOI 10.1007/978-3-642-14267-3
   Lo D., 2006, SIGSOFT FSE, P265
   Lo D, 2008, J SOFTW MAINT EVOL-R, V20, P227, DOI 10.1002/smr.375
   Lo D, 2012, AUTOMAT SOFTW ENG, V19, P423, DOI 10.1007/s10515-012-0103-x
   Lo D, 2012, SCI COMPUT PROGRAM, V77, P743, DOI 10.1016/j.scico.2010.10.003
   Louppe G, 2013, ADV NEURAL INFORM PR
   Metzler D, 2007, INFORM RETRIEVAL, V10, P257, DOI 10.1007/s10791-006-9019-z
   Mutegi CK, 2009, INT J FOOD MICROBIOL, V130, P27, DOI 10.1016/j.ijfoodmicro.2008.12.030
   Niu HR, 2017, EMPIR SOFTW ENG, V22, P259, DOI 10.1007/s10664-015-9421-5
   Rothman KJ., 2012, EPIDEMIOLOGY INTRO, P280
   Safyallah H, 2006, INT C PROGRAM COMPRE, P84, DOI 10.1109/ICPC.2006.19
   Stampfer MJ, 2009, J OCCUP ENVIRON HYG, V6, P267, DOI 10.1080/15459620902754703
   Tamrawi A, 2011, P 19 ACM SIGSOFT S 1, P365, DOI [DOI 10.1145/2025113.2025163, 10.31274/etd-180810-1814, DOI 10.31274/ETD-180810-1814]
   Tian Y, 2015, PROC IEEE INT CONF S, P301, DOI 10.1109/ICSM.2015.7332476
   Vasudevan P, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P289, DOI 10.1109/SERA.2006.25
   Walkinshaw Neil, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P248, DOI 10.1109/ASE.2008.35
   Walkinshaw N, 2016, EMPIR SOFTW ENG, V21, P811, DOI 10.1007/s10664-015-9367-7
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Wu QA, 2010, INFORM RETRIEVAL, V13, P254, DOI 10.1007/s10791-009-9112-1
   Wu S, 2012, ADAPT LEARN OPTIM, V13, P1, DOI 10.1007/978-3-642-28866-1
   Yang C, 2014, LECT NOTES COMPUT SC, V8712, P163, DOI 10.1007/978-3-319-11203-9_10
   Yang XX, 2015, IEEE T RELIAB, V64, P234, DOI 10.1109/TR.2014.2370891
   Ye X, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P689, DOI 10.1145/2635868.2635874
   Zhong H, 2013, ACM SIGPLAN NOTICES, V48, P803, DOI [10.1145/2509136.2509523, 10.1145/2544173.2509523]
NR 63
TC 18
Z9 18
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2018
VL 25
IS 3
BP 501
EP 530
DI 10.1007/s10515-018-0231-z
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP2SY
UT WOS:000440687600003
DA 2024-07-18
ER

PT J
AU Minku, LL
   Yao, X
AF Minku, Leandro L.
   Yao, Xin
TI Which models of the past are relevant to the present? A software effort
   estimation approach to exploiting useful past models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model-based software effort estimation; Machine learning; Cross-company
   learning; Online learning; Non-stationary environments
ID MOVING WINDOWS; EFFORT PREDICTION; COST ESTIMATION; ENSEMBLE
AB Software Effort Estimation (SEE) models can be used for decision-support by software managers to determine the effort required to develop a software project. They are created based on data describing projects completed in the past. Such data could include past projects from within the company that we are interested in (WC projects) and/or from other companies (cross-company, i.e., CC projects). In particular, the use of CC data has been investigated in an attempt to overcome limitations caused by the typically small size of WC datasets. However, software companies operate in non-stationary environments, where changes may affect the typical effort required to develop software projects. Our previous work showed that both WC and CC models of the past can become more or less useful over time, i.e., they can sometimes be helpful and sometimes misleading. So, how can we know if and when a model created based on past data represents well the current projects being estimated? We propose an approach called Dynamic Cross-company Learning (DCL) to dynamically identify which WC or CC past models are most useful for making predictions to a given company at the present. DCL automatically emphasizes the predictions given by these models in order to improve predictive performance. Our experiments comparing DCL against existing WC and CC approaches show that DCL is successful in improving SEE by emphasizing the most useful past models. A thorough analysis of DCL's behaviour is provided, strengthening its external validity.
C1 [Minku, Leandro L.] Univ Leicester, Dept Informat, Univ Rd, Leicester LE1 7RH, Leics, England.
   [Yao, Xin] Univ Birmingham, Sch Comp Sci, CERCIA, Birmingham B15 2TT, W Midlands, England.
C3 University of Leicester; University of Birmingham
RP Minku, LL (corresponding author), Univ Leicester, Dept Informat, Univ Rd, Leicester LE1 7RH, Leics, England.
EM leandro.minku@leicester.ac.uk; x.yao@cs.bham.ac.uk
RI YAO, XIN/W-2158-2018
OI YAO, XIN/0000-0001-8837-4442; Minku, Leandro/0000-0002-2639-0671
FU EPSRC [EP/J017515/1]; EPSRC [EP/J017515/1] Funding Source: UKRI
FX This work was supported by an EPSRC Grant (No. EP/J017515/1).
CR Amasaki S, 2015, J SOFTW-EVOL PROC, V27, P488, DOI 10.1002/smr.1672
   Amasaki S., 2011, 2011 Proceedings of Joint Conf of 21st Int'l Workshop on Software Measurement and the 6th Int'l Conference on Software Process and Product Measurement (IWSM-MENSURA 2011), P188, DOI 10.1109/IWSM-MENSURA.2011.29
   Amasaki S., 2015, PROMISE
   Amasaki S, 2014, LECT NOTES COMPUT SC, V8892, P63, DOI 10.1007/978-3-319-13835-0_5
   Amasaki S, 2012, PROCEEDINGS OF THE 2012 JOINT CONFERENCE OF THE 22ND INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2012 SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA 2012), P23, DOI 10.1109/IWSM-MENSURA.2012.13
   [Anonymous], 2013, P 9 INT C PRED MOD S, DOI DOI 10.1145/2499393.2499394
   [Anonymous], 1998, Learning from Data: Concepts, Theory, and Methods
   [Anonymous], 2012, P PROMISE 12
   Auer M, 2006, IEEE T SOFTWARE ENG, V32, P83, DOI 10.1109/TSE.2006.1599418
   Auer M, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P147
   Bettenburg N., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P60, DOI 10.1109/MSR.2012.6224300
   Bishop C.M., 2005, NEURAL NETWORKS PATT
   Bishop Christopher M, 2006, PATTERN RECOGN, V128, P1
   Boehm BW., 1981, Software Engineering Economics
   Briand L, 2000, ICSE, P377
   Cartwright MH, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P154, DOI 10.1109/METRIC.2003.1232464
   COHEN J, 1992, PSYCHOL BULL, V112, P155, DOI 10.1037/0033-2909.112.1.155
   DeMarco T, 1986, CONTROLLING SOFTWARE
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Gruschke T. M., 2008, ACM T SOFTW ENG METH, V17, P201
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   Jorgensen M, 2011, IEEE T SOFTWARE ENG, V37, P695, DOI 10.1109/TSE.2010.78
   Kitchenham B, 2002, J SYST SOFTWARE, V64, P57, DOI 10.1016/S0164-1212(02)00021-3
   Kitchenham B. A., 1984, ICL Technical Journal, V4, P73
   Kitchenham BA, 2007, IEEE T SOFTWARE ENG, V33, P316, DOI 10.1109/TSE.2007.1101
   Kocaguneli E, 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, P321, DOI DOI 10.1145/1858996.1859061
   Kocaguneli E, 2015, EMPIR SOFTW ENG, V20, P813, DOI 10.1007/s10664-014-9300-5
   Kocaguneli E, 2012, IEEE T SOFTWARE ENG, V38, P1403, DOI 10.1109/TSE.2011.111
   KOK PAM, 1990, ESPRIT 90, P296
   Kolter JZ, 2007, J MACH LEARN RES, V8, P2755
   Kolter JZ., 2005, P 22 INT C MACH LEAR, P449, DOI [10.1145/1102351.1102408, DOI 10.1145/1102351.1102408]
   Kultur Y, 2009, KNOWL-BASED SYST, V22, P395, DOI 10.1016/j.knosys.2009.05.001
   Lefley M, 2003, LECT NOTES COMPUT SC, V2724, P2477
   Levine TR, 2002, HUM COMMUN RES, V28, P612, DOI 10.1093/hcr/28.4.612
   Lokan C, 2009, IET SOFTW, V3, P422, DOI 10.1049/iet-sen.2008.0107
   Lokan C., 2009, ACSC WELL NZ, P35
   Lokan C., 2008, EASE, P10
   Lokan C, 2014, INFORM SOFTWARE TECH, V56, P1063, DOI 10.1016/j.infsof.2014.02.008
   Lokan C, 2012, ASIA PAC SOFWR ENG, P818, DOI 10.1109/APSEC.2012.74
   Lokan C, 2009, INT SYMP EMP SOFTWAR, P111, DOI 10.1109/ESEM.2009.5316019
   MacDonell S., 2010, ESEM
   Menzies T, 2013, IEEE T SOFTWARE ENG, V39, P822, DOI 10.1109/TSE.2012.83
   Minku LL, 2016, PROG ARTIF INTELL, V5, P307, DOI 10.1007/s13748-016-0092-2
   Minku LL, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P446, DOI 10.1145/2568225.2568228
   Minku LL, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522928
   Minku LL, 2013, INFORM SOFTWARE TECH, V55, P1512, DOI 10.1016/j.infsof.2012.09.012
   Minku LL, 2012, IEEE T KNOWL DATA EN, V24, P619, DOI 10.1109/TKDE.2011.58
   Minku LL, 2010, IEEE T KNOWL DATA EN, V22, P730, DOI 10.1109/TKDE.2009.156
   Minku LL, 2011, P 7 INT C PRED MOD S, P1, DOI DOI 10.1145/2020390.2020399
   Mitchell M.L., 2010, RES DESIGN EXPLAINED, V7th
   Muthukrishnan S, 2005, FOUND TRENDS THEOR C, V1, P1, DOI 10.1561/0400000002
   Premraj R., 2005, METRICS
   Sayyad Shirabad J., 2005, The PROMISE Repository of Software Engineering Databases
   Sentas P, 2005, INFORM SOFTWARE TECH, V47, P17, DOI 10.1016/j.infsof.2004.05.001
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   Stutzke R. D, 2006, SOFTWARE MANAGEMENT
   Tibshirani R, 1996, J ROY STAT SOC B, V58, P267, DOI 10.1111/j.2517-6161.1996.tb02080.x
   Turhan B, 2014, EUROMICRO CONF PROC, P285, DOI 10.1109/SEAA.2014.41
   Wen JF, 2012, INFORM SOFTWARE TECH, V54, P41, DOI 10.1016/j.infsof.2011.09.002
   Wieczorek I, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P237, DOI 10.1109/METRIC.2002.1011342
NR 62
TC 17
Z9 17
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2017
VL 24
IS 3
BP 499
EP 542
DI 10.1007/s10515-016-0209-7
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EW3KK
UT WOS:000402394000001
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Maamar, M
   Lazaar, N
   Loudni, S
   Lebbah, Y
AF Maamar, Mehdi
   Lazaar, Nadjib
   Loudni, Samir
   Lebbah, Yahia
TI Fault localization using itemset mining under constraints
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Fault localization; Itemset mining; Constraint programming; Test case
   coverage
AB We introduce in this paper an itemset mining approach to tackle the fault localization problem, which is one of the most difficult processes in software debugging. We formalize the problem of fault localization as finding the k best patterns satisfying a set of constraints modelling the most suspicious statements. We use a Constraint Programming (CP) approach to model and to solve our itemset based fault localization problem. Our approach consists of two steps: (i) mining top-k suspicious suites of statements; (ii) fault localization by processing top-k patterns. Experiments performed on standard benchmark programs show that our approach enables to propose a more precise localization than a standard approach.
C1 [Maamar, Mehdi; Lebbah, Yahia] Univ Oran 1, Lab LITIO, BP 1524, Oran 31000, Algeria.
   [Lazaar, Nadjib] Univ Montpellier, CNRS, LIRMM, 161 Rue Ada, F-34090 Montpellier, France.
   [Loudni, Samir] Univ Caen, CNRS, UMR GREYC 6072, F-14032 Caen, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite
   Paul-Valery; Universite Perpignan Via Domitia; Universite de
   Montpellier; Universite de Caen Normandie; Centre National de la
   Recherche Scientifique (CNRS)
RP Lebbah, Y (corresponding author), Univ Oran 1, Lab LITIO, BP 1524, Oran 31000, Algeria.
EM maamar.mehdi@edu.univ-oran1.dz; nadjib.lazaar@lirmm.fr;
   samir.loudni@unicaen.fr; ylebbah@gmail.com
RI ; Lebbah, Yahia/E-8138-2010
OI Lazaar, Nadjib/0000-0003-2524-9462; Lebbah, Yahia/0000-0003-4736-2976
CR AGRAWAL H, 1993, SOFTWARE PRACT EXPER, V23, P589, DOI 10.1002/spe.4380230603
   [Anonymous], 2009, UTDCS45 U TEX DALL
   [Anonymous], 2011, P SOFTW ENG KNOWL EN
   [Anonymous], 1992, Dependability: Basic Concepts and Terminology
   Cellier Peggy, 2009, Proceedings 21st International Conference on Software Engineering & Knowledge Engineering (SEKE 2009), P432
   Cellier P, 2008, LECT NOTES ARTIF INT, V4933, P273, DOI 10.1007/978-3-540-78137-0_20
   Cleve H, 2005, PROC INT CONF SOFTW, P342
   Crémilleux B, 2008, LECT NOTES COMPUT SC, V5073, P1242
   De Raedt Luc, 2008, P 14 ACM SIGKDD INT, P204
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   DERAEDT L, 2007, P 7 SIAM INT C DAT M
   Gonzalez-Sanchez A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P83, DOI 10.1109/ASE.2011.6100153
   Guns T, 2011, ARTIF INTELL, V175, P1951, DOI 10.1016/j.artint.2011.05.002
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Khiari M, 2010, LECT NOTES COMPUT SC, V6308, P552, DOI 10.1007/978-3-642-15396-9_44
   Mannila H, 1997, DATA MIN KNOWL DISC, V1, P241, DOI 10.1023/A:1009796218281
   Nessa S., 2008, WIRELESS ALGORITHMS
   Novak PK, 2009, J MACH LEARN RES, V10, P377
   Ott L., 2011, INTRO STAT METHODS D, V511
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Rojas Willy Ugarte, 2014, Integration of AI and OR Techniques in Constraint Programming. 11th International Conference, CPAIOR 2014. Proceedings: LNCS 8451, P71, DOI 10.1007/978-3-319-07046-9_6
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   VESSEY I, 1985, INT J MAN MACH STUD, V23, P459, DOI 10.1016/S0020-7373(85)80054-7
   Wong WE, 2010, J SYST SOFTWARE, V83, P188, DOI 10.1016/j.jss.2009.09.037
   Zeller A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/605466.605468
NR 27
TC 8
Z9 8
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2017
VL 24
IS 2
BP 341
EP 368
DI 10.1007/s10515-015-0189-z
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ES3FH
UT WOS:000399413800003
DA 2024-07-18
ER

PT J
AU Cohen, M
   Franke, U
AF Cohen, Mika
   Franke, Ulrik
TI An experiment in ontology use for command and control interoperability
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Semantic interoperability; C2 systems; System integration; Ontologies;
   SKOS
ID INTEGRATION; MATCH
AB The article addresses the question of whether methods from ontology engineering and reasoning can help domain-experts (as opposed to laymen) when mapping concepts from domain-specific vocabularies to each other. The overarching context is military Command & Control systems, and the prospects for fostering interoperability between them. The main contribution of the article is an experiment conducted with senior military officers on mapping two artillery vocabularies to each other. Overall, the evidence is stronger that (i) hierarchical structuring of concepts, (ii) definitions of concepts and (iii) mappings to a common reference vocabulary can help domain-experts to make sound matches than help them avoid unsound ones. However, more research is needed before a verdict can be given. Though the experiment exhibits high ecological validity, using subjects who are experts in the domain of the two vocabularies that are to be mapped to each other, internal validity suffers confounding effects of previous expertise, and reliability is low, due to the low number of subjects ().
C1 [Cohen, Mika; Franke, Ulrik] FOI Swedish Def Res Agcy, SE-16490 Stockholm, Sweden.
C3 FOI - Swedish Defence Research Agency
RP Franke, U (corresponding author), FOI Swedish Def Res Agcy, SE-16490 Stockholm, Sweden.
EM mika.cohen@foi.se; ulrik.franke@foi.se
OI Franke, Ulrik/0000-0003-2017-7914
FU R&D program of the Swedish Armed Forces
FX This work was supported by the R&D program of the Swedish Armed Forces.
   The authors are particularly grateful to the Swedish National Defence
   College and Johan Sigholm for the opportunity to conduct the experiment
   there, as well as to all of the subjects. Furthermore, Lars Lindberg and
   Pontus Horling helped improve the experimental setup, and Vahid Mojtahed
   supported the experiment in his capacity of project manager.
   Additionally, the manuscript was substantially improved by the comments
   of two anonymous reviewers. The assistance of Semantic Web Company GmbH
   in Vienna, who made the PoolParty platform available for the duration of
   this research, is also gratefully acknowledged.
CR [Anonymous], 2002, Supply Chain Management: An International Journal, DOI DOI 10.1108/13598540210425821
   [Anonymous], 2001, IJCAI
   Bau N., 2008, J TELECOMMUN INF TEC, V2, P5
   Beneventano D, 2003, IEEE INTERNET COMPUT, V7, P42, DOI 10.1109/MIC.2003.1232517
   Beyer M.A., 2011, G00215806 GARTN INC
   C2 Data and Services Steering Committee C2 core development concept, 2011, C2 DAT SERV STEER CO
   Choi N, 2006, SIGMOD REC, V35, P34, DOI 10.1145/1168092.1168097
   Cohen Mika, 2013, Web Reasoning and Rule Systems. 7th International Conference, RR 2013. Proceedings. LNCS 7994, P223, DOI 10.1007/978-3-642-39666-3_19
   Doan A, 2003, MACH LEARN, V50, P279, DOI 10.1023/A:1021765902788
   Fazlollahi A, 2012, LECT NOTES BUS INF P, V122, P34
   Forsvarsmakten [Swedish Armed Forces], 2007, SKJUTR ART GRAN SKJU
   Gailly F, 2009, LECT NOTES COMPUT SC, V5565, P395, DOI 10.1007/978-3-642-02144-2_32
   Giunchiglia F, 2004, LECT NOTES COMPUT SC, V3053, P61
   Goh CH, 1997, THESIS MIT
   Horrocks I, 2008, COMMUN ACM, V51, P58, DOI 10.1145/1409360.1409377
   Lheureux B.J., 2011, PREDICTS 2012 APPL I
   Li J., 2004, P PERF METR INT SYST
   Madhavan J., 2001, Proceedings of the 27th International Conference on Very Large Data Bases, P49
   McGuinness DL, 2000, SEVENTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-2001) / TWELFTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-2000), P1123
   MITRA P, 2002, P ECAI WORKSH ONT SE
   Mojtahed V., 2011, NATO 1 WORKSH IST 09
   NATO Standardization Agency (NSA), 2009, ART PROC AUT DAT PRO
   Noy NF, 2003, INT J HUM-COMPUT ST, V59, P983, DOI 10.1016/j.ijhcs.2003.08.002
   Obrst L, 2003, P 12 INT C INF KNOWL, P366, DOI DOI 10.1145/956863.956932
   Paralic J., 2003, Proceedings of the 14th International Conference on Information and Intelligent systems (IIS 2003), Varazdin, Croatia, P23
   Serafini L., 2003, P CONTEXT3
   SILVA N, 2003, P 6 INT C BUS INF SY
   Turnitsa C., 2005, P FALL SIM INT WORKS
   Ullberg J, 2009, LECT NOTES BUS INF P, V38, P13
   Visser U., 2000, ENABLING TECHNOLOGIE
   Walker J., 2005, HEALTH AFFAIR, V24
   Ye Y, 2008, INT J COMPUT INTEG M, V21, P1, DOI 10.1080/09511920601182225
NR 32
TC 0
Z9 0
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2015
VL 22
IS 2
SI SI
BP 145
EP 157
DI 10.1007/s10515-014-0149-z
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE0EI
UT WOS:000351476900002
DA 2024-07-18
ER

PT J
AU Bowes, D
   Hall, T
   Gray, D
AF Bowes, David
   Hall, Tracy
   Gray, David
TI DConfusion: a technique to allow cross study performance evaluation of
   fault prediction studies
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Fault; Confusion matrix; Machine learning
ID STATIC CODE ATTRIBUTES; SOFTWARE DEFECT PREDICTION; EMPIRICAL-ANALYSIS;
   CLASSIFICATION; PRONENESS; MODELS
AB There are many hundreds of fault prediction models published in the literature. The predictive performance of these models is often reported using a variety of different measures. Most performance measures are not directly comparable. This lack of comparability means that it is often difficult to evaluate the performance of one model against another. Our aim is to present an approach that allows other researchers and practitioners to transform many performance measures back into a confusion matrix. Once performance is expressed in a confusion matrix alternative preferred performance measures can then be derived. Our approach has enabled us to compare the performance of 600 models published in 42 studies. We demonstrate the application of our approach on 8 case studies, and discuss the advantages and implications of doing this.
C1 [Bowes, David; Gray, David] Univ Hertfordshire, Sci & Technol Res Inst, Hatfield AL10 9AB, Herts, England.
   [Hall, Tracy] Brunel Univ, Dept Informat Syst & Comp, Uxbridge UB8 3PH, Middx, England.
C3 University of Hertfordshire; Brunel University
RP Bowes, D (corresponding author), Univ Hertfordshire, Sci & Technol Res Inst, Coll Lane, Hatfield AL10 9AB, Herts, England.
EM d.h.bowes@herts.ac.uk; tracy.hall@brunel.ac.uk; d.gray@herts.ac.uk
OI Hall, Tracy/0000-0002-2728-9014; Bowes, David/0000-0001-7014-2811
CR [Anonymous], 2011, EVALUATION ASSESSMEN
   Arisholm E, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P215, DOI 10.1109/ISSRE.2007.22
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Baldi P, 2000, BIOINFORMATICS, V16, P412, DOI 10.1093/bioinformatics/16.5.412
   Batista G. E., 2004, ACM SIGKDD EXPL NEWS, V6, P20, DOI DOI 10.1145/1007730.1007735
   Bowes D., P 8 INT C PRED MOD S, P109
   Catal C, 2007, DEPCOS - RELCOMEX '07: INTERNATIONAL CONFERENCE ON DEPENDABILITY OF COMPUTER SYSTEMS, PROCEEDINGS, P238, DOI 10.1109/DEPCOS-RELCOMEX.2007.8
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Cruzes DS, 2011, INFORM SOFTWARE TECH, V53, P440, DOI 10.1016/j.infsof.2011.01.004
   de Carvalho AB, 2010, J SYST SOFTWARE, V83, P868, DOI 10.1016/j.jss.2009.12.023
   de Carvalho AB, 2008, PROC INT C TOOLS ART, P387, DOI 10.1109/ICTAI.2008.76
   Denaro G, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P241, DOI 10.1109/ICSE.2002.1007972
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Forman George, 2010, ACM SIGKDD Explorations Newsletter, DOI DOI 10.1145/1882471.1882479
   Gray D, 2012, IET SOFTW, V6, P549, DOI 10.1049/iet-sen.2011.0132
   Hall T., 2012, INT C MACH LEARN APP
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   He HB, 2009, IEEE T KNOWL DATA EN, V21, P1263, DOI 10.1109/TKDE.2008.239
   Jiang Y, 2008, EMPIR SOFTW ENG, V13, P561, DOI 10.1007/s10664-008-9079-3
   Kamei Yasutaka, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P196
   Kaur A, 2009, 2009 SECOND INTERNATIONAL CONFERENCE ON MACHINE VISION, PROCEEDINGS, ( ICMV 2009), P242, DOI 10.1109/ICMV.2009.54
   Khoshgoftaar TM, 2004, EMPIR SOFTW ENG, V9, P229, DOI 10.1023/B:EMSE.0000027781.18360.9b
   Kolcz A., 2004, ACM SIGKDD EXPLORATI, V6, P1, DOI [10.2973/odp.proc.ir.207.2004, DOI 10.1145/1007730.1007733]
   Koru AG, 2005, IEEE SOFTWARE, V22, P23, DOI 10.1109/MS.2005.149
   Kutlubay O, 2007, EUROMICRO CONF PROC, P322
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li YL, 2010, INT CONF COMP SCI, P1, DOI 10.1109/ICCSIT.2010.5564891
   Liu Y, 2010, IEEE T SOFTWARE ENG, V36, P852, DOI 10.1109/TSE.2010.51
   MA Y, 2006, ADV MACHINE LEARNING, P237
   Mende T, 2010, EUR CON SFTWR MTNCE, P107, DOI 10.1109/CSMR.2010.18
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P637, DOI 10.1109/TSE.2007.70721
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Ostrand T.J., 2007, Fourth International Workshop on Software Quality Assurance, P25
   Ostrand TJ., 2004, Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA '04, V29, P86, DOI [DOI 10.1145/1013886.1007524, 10.1145/1013886.1007524]
   Pai GJ, 2007, IEEE T SOFTWARE ENG, V33, P675, DOI [10.1109/TSE.2007.70722, 10.1109/TSE.2007.70722.]
   Pizzi NJ, 2002, IEEE IJCNN, P2405, DOI 10.1109/IJCNN.2002.1007518
   Seliya N, 2005, NINTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH-ASSURANCE SYSTEMS ENGINEERING, P89, DOI 10.1109/HASE.2005.4
   Sun Y, 2009, PATTERN RECOGN, V42, P1949, DOI 10.1016/j.patcog.2009.01.027
   Turhan B, 2009, EXPERT SYST APPL, V36, P9986, DOI 10.1016/j.eswa.2008.12.028
   Zeller A., 2011, P 7 INT C PRED MOD S
   Zhang HY, 2007, IEEE T SOFTWARE ENG, V33, P635, DOI 10.1109/TSE.2007.70706
   Zhou YM, 2006, IEEE T SOFTWARE ENG, V32, P771, DOI 10.1109/TSE.2006.102
NR 43
TC 17
Z9 19
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD APR
PY 2014
VL 21
IS 2
SI SI
BP 287
EP 313
DI 10.1007/s10515-013-0129-8
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AD6AB
UT WOS:000333333800005
DA 2024-07-18
ER

PT J
AU Ramón, OS
   Cuadrado, JS
   Molina, JG
AF Sanchez Ramon, Oscar
   Sanchez Cuadrado, Jesus
   Garcia Molina, Jesus
TI Model-driven reverse engineering of legacy graphical user interfaces
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Graphical User Interfaces; Layout; Modernisation; Model driven
   engineering; Reverse engineering; Reengineering
AB Businesses are increasingly beginning to modernise those of their legacy systems that were originally developed with Rapid Application Development (RAD) or Fourth Generation Language (4GL) environments, in order to benefit from new platforms and technologies. In these systems, the Graphical User Interface (GUI) layout is implicitly provided by the position of the GUI elements (i.e. coordinates). However, taking advantage of current features of GUI technologies often requires an explicit, high-level layout model. We propose a Model-Driven Engineering process with which to perform the automatic reverse engineering of RAD-built GUIs, which is focused on discovering the implicit layout, and produces a GUI model in which the layout is explicit. As an example of the approach, we apply an automatic reengineering process to this model in order to generate a Java Swing user interface.
C1 [Sanchez Cuadrado, Jesus] Univ Autonoma Madrid, Escuela Politecn Super, E-28049 Madrid, Spain.
   [Sanchez Ramon, Oscar; Garcia Molina, Jesus] Univ Murcia, Fac Informat, E-30100 Murcia, Spain.
C3 Autonomous University of Madrid; University of Murcia
RP Cuadrado, JS (corresponding author), Univ Autonoma Madrid, Escuela Politecn Super, Francisco Tomas & Valiente 11, E-28049 Madrid, Spain.
EM osanchez@um.es; jesus.sanchez.cuadrado@uam.es; jmolina@um.es
RI GARCIA-MOLINA, JESUS J/X-7078-2019; Sanchez Cuadrado, Jesus/L-2365-2013
OI Sanchez Cuadrado, Jesus/0000-0001-9755-5616
CR Andrade L, 2006, LECT NOTES COMPUT SC, V4143, P261
   [Anonymous], 2003, MSRTR200379
   [Anonymous], 2005, P MET S
   [Anonymous], PERSPECTIVES LEGACY
   BANDELLONI R, 2005, P 7 INT C HUM COMP I, P83
   Chen Y., 2003, P 12 INT C WORLD WID, P225
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   Clark T., 2004, APPL METAMODELLING F
   Cuadrado LS, 2007, IEEE SOFTWARE, V24, P48, DOI 10.1109/MS.2007.135
   Dixon M, 2011, 29TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P969
   Eclipse, 2003, ECL MOD FRAM PROJ EM
   Gerdes J, 2009, J SOFTW MAINT EVOL-R, V21, P171, DOI 10.1002/smr.400
   Harrison J.V., 1998, P 10 C ADV INF SYST, P8
   Jacobs C, 2003, ACM T GRAPHIC, V22, P838, DOI 10.1145/882262.882353
   Li WJ, 2005, BIOINFORMATICS, V21, P2036, DOI 10.1093/bioinformatics/bti290
   Limbourg Q, 2004, ENGINEERING ADVANCED WEB APPLICATIONS, P325
   Lutteroth Christof, 2008, P 9 C AUSTR US INT W, V76, P65, DOI [10.5555/1378337.1378350, DOI 10.5555/1378337.1378350]
   Maras J, 2011, LECT NOTES COMPUT SC, V6757, P228, DOI 10.1007/978-3-642-22233-7_16
   Martin J., 1991, Rapid Application Development
   Melia Santiago, 2008, 2008 8th International Conference on Web Engineering (ICWE), P13, DOI 10.1109/ICWE.2008.36
   Memon A, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P260, DOI 10.1109/WCRE.2003.1287256
   OMG: Architecture-Driven Modernization (ADM), 2007, ARCH DRIV MOD ADM
   Puerta A., 2002, IUI 02. 2002 International Conference on Intelligent User Interfaces, P214
   Sánchez Cuadrado J, 2006, LECT NOTES COMPUT SC, V4066, P158
   Cuadrado JS, 2009, SOFTW SYST MODEL, V8, P325, DOI 10.1007/s10270-008-0093-0
   Sanchez Ramon O., 2010, P IEEE ACM INT C AUT, P147, DOI [10.1145/1858996.1859023, DOI 10.1145/1858996.1859023]
   Staiger S, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P252
   Stroulia E., 2003, Automated Software Engineering, V10, P271, DOI 10.1023/A:1024460315173
   Vanderdonckt J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P241, DOI 10.1109/WCRE.2001.957828
NR 29
TC 24
Z9 26
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD APR
PY 2014
VL 21
IS 2
SI SI
BP 147
EP 186
DI 10.1007/s10515-013-0130-2
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AD6AB
UT WOS:000333333800002
DA 2024-07-18
ER

PT J
AU Keung, J
   Kocaguneli, E
   Menzies, T
AF Keung, Jacky
   Kocaguneli, Ekrem
   Menzies, Tim
TI Finding conclusion stability for selecting the best effort predictor in
   software effort estimation
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Effort estimation; Data mining; Stability; Linear regression; Regression
   trees; Neural nets; Analogy; MMRE; Evaluation criteria
ID COST ESTIMATION; SUBSET
AB Background: Conclusion Instability in software effort estimation (SEE) refers to the inconsistent results produced by a diversity of predictors using different datasets. This is largely due to the "ranking instability" problem, which is highly related to the evaluation criteria and the subset of the data being used.
   Aim: To determine stable rankings of different predictors.
   Method: 90 predictors are used with 20 datasets and evaluated using 7 performance measures, whose results are subject to Wilcoxon rank test (95 %). These results are called the "aggregate results". The aggregate results are challenged by a sanity check, which focuses on a single error measure (MRE) and uses a newly developed evaluation algorithm called CLUSTER. These results are called the "specific results."
   Results: Aggregate results show that: (1) It is now possible to draw stable conclusions about the relative performance of SEE predictors; (2) Regression trees or analogy-based methods are the best performers. The aggregate results are also confirmed by the specific results of the sanity check.
   Conclusion: This study offers means to address the conclusion instability issue in SEE, which is an important finding for empirical software engineering.
C1 [Keung, Jacky] Hong Kong Polytech Univ, Dept Comp, Kowloon, Hong Kong, Peoples R China.
   [Kocaguneli, Ekrem; Menzies, Tim] W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26505 USA.
C3 Hong Kong Polytechnic University; West Virginia University
RP Kocaguneli, E (corresponding author), W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26505 USA.
EM Jacky.Keung@comp.polyu.edu.hk; ekocagun@mix.wvu.edu; tim@menzies.us
RI Menzies, Tim/X-7680-2019; Keung, Jacky/X-4693-2019; Keung,
   Jacky/ABA-7089-2020
OI Menzies, Tim/0000-0002-5040-3196; Keung, Jacky/0000-0002-3803-9600; 
FU Qatar/West Virginia University [NPRP 09-12-5-2-470]
FX This research has been funded by the Qatar/West Virginia University
   research grant NPRP 09-12-5-2-470.
CR ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Alpaydin E, 2004, INTRO MACHINE LEARNI
   [Anonymous], THESIS W VIRGINIA U
   [Anonymous], 2002, Applied Statistics for Software Managers
   Auer M, 2006, IEEE T SOFTWARE ENG, V32, P83, DOI 10.1109/TSE.2006.1599418
   Bakir A, 2010, SOFTWARE QUAL J, V18, P57, DOI 10.1007/s11219-009-9081-z
   Blewitt ME, 2008, NAT GENET, V40, P663, DOI 10.1038/ng.142
   Boehm BW., 1981, Software Engineering Economics
   Brady A., 2010, INT C PRED MOD SOFTW
   Breiman L, 1996, MACH LEARN, V24, P10, DOI 1023/A:1018094028462
   CHANG CL, 1974, IEEE T COMPUT, VC 23, P1179, DOI 10.1109/T-C.1974.223827
   FAYYAD UM, 1993, IJCAI-93, VOLS 1 AND 2, P1022
   Foss T, 2003, IEEE T SOFTWARE ENG, V29, P985, DOI 10.1109/TSE.2003.1245300
   Gama J., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P662, DOI 10.1145/1141277.1141429
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   Jorgensen M, 2005, IEEE SOFTWARE, V22, P57, DOI 10.1109/MS.2005.73
   Jorgensen M, 2004, J SYST SOFTWARE, V70, P37, DOI 10.1016/S0164-1212(02)00156-5
   Kadoda G., 2000, UK CBR Workshop, P1
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Keung J, 2008, ASWEC 2008: 19TH AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P229
   Keung J, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P294
   Keung JW, 2008, IEEE T SOFTWARE ENG, V34, P471, DOI 10.1109/TSE.2008.34
   Kirsopp C., 2002, IEE Proceedings-Software, V149, P123, DOI 10.1049/ip-sen:20020695
   Kirsopp C, 2003, BCS CONF SERIES, P61
   KITCHENHAM B, 1993, PROC INT CONF SOFTW, P477, DOI 10.1109/ICSE.1993.346018
   Kitchenham BA, 2007, IEEE T SOFTWARE ENG, V33, P316, DOI 10.1109/TSE.2007.1101
   Kleijnen JPC, 1997, J STAT COMPUT SIM, V57, P111, DOI 10.1080/00949659708811805
   Li J., 2006, Proceedings of the 2006 ACM/IEEE international symposium on Empirical software engineering, P74
   Li J., 2007, INT C PRED MOD SOFTW
   Li YF, 2009, J SYST SOFTWARE, V82, P241, DOI 10.1016/j.jss.2008.06.001
   Lipowezky U, 1998, PATTERN RECOGN LETT, V19, P907, DOI 10.1016/S0167-8655(98)00075-0
   Mendes E, 2003, EMPIR SOFTW ENG, V8, P163, DOI 10.1023/A:1023062629183
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P409, DOI 10.1007/s10515-010-0070-z
   Milicic D, 2004, EUROMICRO CONF PROC, P422, DOI 10.1109/EURMIC.2004.1333398
   MIYAZAKI Y, 1994, J SYST SOFTWARE, V27, P3, DOI 10.1016/0164-1212(94)90110-4
   Myrtveit I, 2005, IEEE T SOFTWARE ENG, V31, P380, DOI 10.1109/TSE.2005.58
   Robson C., 2002, Real World Research, V2nd
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Shepperd M, 2001, IEEE T SOFTWARE ENG, V27, P1014, DOI 10.1109/32.965341
   Shepperd M, 1996, PROC INT CONF SOFTW, P170, DOI 10.1109/ICSE.1996.493413
   Walkerden F., 1999, Empirical Software Engineering, V4, P135, DOI 10.1023/A:1009872202035
   Yang Y, 2002, PKAW
NR 42
TC 47
Z9 47
U1 0
U2 33
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2013
VL 20
IS 4
BP 543
EP 567
DI 10.1007/s10515-012-0108-5
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200MY
UT WOS:000323074400003
DA 2024-07-18
ER

PT J
AU Magnusson, E
   Ekman, T
   Hedin, G
AF Magnusson, Eva
   Ekman, Torbjorn
   Hedin, Gorel
TI Demand-driven evaluation of collection attributes
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 7th IEEE International Working Conference on Source Code Analysis and
   Manipulation
CY SEP 30-OCT 01, 2007
CL Paris, FRANCE
SP IEEE Comp Soc, TCSE, CEA Lab Integrat Syst & Technologies, Ecole Polytech, Software Improvement Grp, CREST, Kings Coll London
DE Attribute grammars; Collection attributes; Circular attributes;
   Fixed-point computations; Source code analysis
ID GRAMMARS; DESIGN
AB In order to make attribute grammars useful for complicated analysis tasks, a number of extensions to the original Knuth formalism have been suggested. One such extension is the collection attribute mechanism, which allows the value of an attribute to be defined as a combination of contributions from distant nodes in the abstract syntax tree. Another extension that has proven useful is circular attributes, evaluated using fixed-point iteration. In this paper we show how collection attributes and the combined formalism, circular collection attributes, have been implemented in our declarative meta programming system JastAdd, and how they can be used for a variety of applications including devirtualization analysis, metrics and flow analysis. A number of evaluation algorithms are introduced and compared for applicability and efficiency. The key design criterion for our algorithms is that they work well with demand evaluation, i.e., defined properties are computed only if they are actually needed for a particular program. We show that the best algorithms work well on large practical problems including the analysis of large Java programs.
C1 [Magnusson, Eva; Hedin, Gorel] Lund Univ, Dept Comp Sci, S-22100 Lund, Sweden.
   [Ekman, Torbjorn] Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
C3 Lund University; University of Oxford
RP Magnusson, E (corresponding author), Lund Univ, Dept Comp Sci, Box 118, S-22100 Lund, Sweden.
EM Eva.Magnusson@cs.lth.se; torbjorn@comlab.ox.ac.uk; Gorel.Hedin@cs.lth.se
CR [Anonymous], 1996, Ph.D. Dissertation
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   BACON DF, 1996, OOPSLA, P324
   BESHERS GM, 1985, P ACM SIGPLAN 85 S L, P34
   BLACKBURN SM, 2006, OOPSLA 06, P169
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Ekman T, 2004, LECT NOTES COMPUT SC, V3086, P144
   EKMAN T, 2006, THESIS LUND U SWEDEN
   EKMAN T, 2007, OOPSLA 07 IN PRESS
   FARROW R, 1986, P SIGPLAN S COMP CON, P85
   Hedin G., 2000, Informatica, V24, P301
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   HEDIN G, 1994, LNCS, V786, P31
   KAISER GE, 1985, THESIS CARNEGIE MELL
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Magnusson E, 2007, SCI COMPUT PROGRAM, V68, P21, DOI 10.1016/j.scico.2005.06.005
   Nilsson-Nyman E., 2008, P 8 WORKSH LANG DESC
   PoetzschHeffter A, 1997, ACTA INFORM, V34, P737, DOI 10.1007/s002360050105
   SPINELLIS DD, 2007, CKJM CHIDAMBER KEMER
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   VANWYK E, 2007, P 7 WORKSH LANG DESC
   VANWYK E, 2007, LNCS
   Vogt Harald, 1989, PLDI, P131, DOI 10.1145/73141.74830
NR 26
TC 9
Z9 9
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2009
VL 16
IS 2
BP 291
EP 322
DI 10.1007/s10515-009-0046-z
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 431SN
UT WOS:000265084000005
DA 2024-07-18
ER

PT J
AU Hinchey, M
AF Hinchey, Mike
TI Desert Island Column
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Desert Island Books
ID FORMAL METHODS; SILVER BULLET; 10-COMMANDMENTS; MYTHS
C1 Univ Limerick, Lero Irish Software Engn Res Ctr, Limerick, Ireland.
C3 University of Limerick
RP Hinchey, M (corresponding author), Univ Limerick, Lero Irish Software Engn Res Ctr, Limerick, Ireland.
EM mike.hinchey@lero.ie
OI Hinchey, Mike/0000-0001-5110-561X
CR BOWEN J, 1998, HIGH INTEGRITY SYSTE
   BOWEN JP, 1995, COMPUTER, V28, P56, DOI 10.1109/2.375178
   Bowen JP, 2006, COMPUTER, V39, P40, DOI 10.1109/MC.2006.35
   BOWEN JP, 1995, IEEE SOFTWARE, V12, P34, DOI 10.1109/52.391826
   BOWEN JP, 1995, LNCS, V967, P7
   BOWEN JP, 1994, 350 U CAMBR COMP LAB
   Boyer R.S., 1981, The Correctness Problem in Computer Science
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   CRAIGEN D, 1994, IEEE SOFTWARE, V11, P30, DOI 10.1109/52.251201
   DEAN CN, 1996, SERIES FORMAL METHOD
   DIJKSTRA EW, 1981, CORRECTNESS PROBLEM, P1
   GERHART S, 1994, IEEE SOFTWARE, V11, P21, DOI 10.1109/52.251198
   HALL A, 1990, IEEE SOFTWARE, V7, P11, DOI 10.1109/52.57887
   HAREL D, 1992, COMPUTER, V25, P8, DOI 10.1109/2.108047
   Hinchey M.G., 1999, IND STRENGTH FORMAL
   HINCHEY MG, 2002, P 7 AUSTR WORKSH SAF
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Jones C. B., 1986, SERIES COMPUTER SCI
   Laplante Phillip, 1996, GREAT PAPERS COMPUTE
   Leveson Nancy, 1995, SAFEWARE SYSTEM SAFE, P515
   ORR K, 1989, BYTE, V14, P221
   WING JM, 1990, COMPUTER, V23, P8, DOI 10.1109/2.58215
   WOODCOCK J, 1988, SOFTWARE ENG MATH
NR 23
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 393
EP 402
DI 10.1007/s10515-008-0037-5
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800010
DA 2024-07-18
ER

PT J
AU Sutcliffe, A
AF Sutcliffe, Alistair
TI The socio-economics of software architecture
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE End-user development; Requirements; Architecture; Cost-benefit analysis
ID DESIGN
AB The paper argues that strategic decisions about software architectures need to be based on a social and economic analysis of which designs are likely to succeed and become accepted by users. Software architecture is increasingly having to take account of customisation, reuse, end-user development and system configuration. The relationship between architecture and end users' requirements is investigated, to propose a cost-benefit framework to support reasoning about architectural choices from the perspective of end users. The relationships between architectural decisions and non-functional requirements is reviewed, and the impact on architecture is assessed using a case study of developing configurable, semi-intelligent software to support medical researchers in e-science domains.
C1 Univ Manchester, Manchester Business Sch, Manchester M15 6PB, Lancs, England.
C3 University of Manchester
RP Sutcliffe, A (corresponding author), Univ Manchester, Manchester Business Sch, Booth St, Manchester M15 6PB, Lancs, England.
EM ags@manchester.ac.uk
CR Ananiadou S., 2006, Text Mining for Biology and Biomedicine
   [Anonymous], 9241 ISO
   [Anonymous], 1997, Requirements engineering: a good practice guide
   [Anonymous], 1993, A Small Matter of Programming
   Arango G., 1993, Proceedings Advances in Software Reuse. Selected Papers from the Second International Workshop on Software Reusability (Cat. No.93TH0495-2), P9, DOI 10.1109/ASR.1993.291722
   BASTOS LRD, 2003, P 2 INT WORKSH SOFTW, P114
   BURNETT MM, 1995, COMPUTER, V28, P45, DOI 10.1109/2.366157
   Callele D, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P299
   Choppy C, 2005, IEE P-SOFTW, V152, P198, DOI 10.1049/ip-sen:20045061
   CHUNG L, 1995, PROC INT CONF SOFTW, P25, DOI 10.1145/225014.225017
   CONKLIN J, 1988, ACM T INFORM SYST, V6, P303, DOI 10.1145/58566.59297
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   EASON KD, 1988, INFORM TECHNOLOGY SO
   ERDOGMUS H, 2002, P ICSE 02 ORL FL 19
   Fayad M., 2000, Domain-specific application frameworks
   Fickas S., 1995, Proceedings of the Second IEEE International Symposium on Requirements Engineering (Cat. No.95TH8040), P140, DOI 10.1109/ISRE.1995.512555
   Finkelstein A., 2008, P 16 IEEE INT REQ EN
   Fischer G, 2004, COMMUN ACM, V47, P33, DOI 10.1145/1015864.1015884
   FISCHER G, 1993, HUM FAC INF, V10, P49
   Fischer G., 1994, Automated Software Engineering, V1, P177, DOI [10.1007/BF00872289, DOI 10.1007/BF00872289]
   FISCHER G, 1996, DOMAIN KNOWLEDGE INT, P1
   FISHER S, 1994, MULTIMEDIA AUTHORING
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Glinz M, 2007, INT REQUIR ENG CONF, P21, DOI 10.1109/RE.2007.45
   Gordijn J, 2006, IEEE SOFTWARE, V23, P26, DOI 10.1109/MS.2006.71
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Green W.S., 2001, PLEASURE PRODUCTS US
   HALEY CB, 2004, P 12 IEEE INT C REQ
   Hall JG, 2002, IEEE JOINT INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P137, DOI 10.1109/ICRE.2002.1048516
   HANSEN S, 2007, P DES REQ WORKSH CLE
   Herlocker JL, 2004, ACM T INFORM SYST, V22, P5, DOI 10.1145/963770.963772
   Hofmeister C, 2005, IEE P-SOFTW, V152, P187, DOI 10.1049/ip-sen:20045052
   Jackson M., 2001, PROBLEM FRAMES ANAL
   Kartseva V, 2007, INT REQUIR ENG CONF, P91, DOI 10.1109/RE.2007.37
   Keller G., 1998, SAP R3 PROCESS ORIEN
   Laney R, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P122
   Lehman M. M., 2000, IEE Proceedings-Software, V147, P249, DOI 10.1049/ip-sen:20000922
   Lieberman H., 2001, YOUR WISH IS MY COMM
   Maimon O., 2005, The data mining and knowledge discovery handbook (1315-1329)
   Norman D.A., 2004, EMOTIONAL DESIGN WHY
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Nuseibeh B, 2001, COMPUTER, V34, P115, DOI 10.1109/2.910904
   Oinn T, 2006, CONCURR COMP-PRACT E, V18, P1067, DOI 10.1002/cpe.993
   PRIETODIAZ R, 1991, COMMUN ACM, V34, P88, DOI 10.1145/103167.103176
   Rapanotti L, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P80
   REPENNING A, 1993, CUCS69393 U COL DEP
   Robertson James., 1999, Mastering the Requirements Process
   Robinson WN, 2006, REQUIR ENG, V11, P17, DOI 10.1007/s00766-005-0016-3
   ROBINSON WN, 1999, IEEE T SOFTW ENG NOV
   SCHMID K, 2002, P ICSE 02 ORL FL 19
   Schwardt O, 2003, CURR TOP MED CHEM, V3, P1, DOI 10.2174/1568026033392642
   Simos M, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P94, DOI 10.1109/ICSR.1998.685734
   Sutcliffe A, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P19, DOI 10.1109/RE.2005.51
   Sutcliffe A., 2002, DOMAIN THEORY PATTER
   Vici AD, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P166, DOI 10.1109/ICSR.1998.685741
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
   Wile DS, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P194
   [No title captured]
   [No title captured]
NR 59
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 343
EP 363
DI 10.1007/s10515-008-0029-5
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800007
DA 2024-07-18
ER

PT J
AU Mitchell, B
AF Mitchell, Bill
TI Lazy buffer semantics for partial order scenarios
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
AB There exists a unique minimal generalisation of a UML sequence diagram (SD) that is race free, known as the inherent causal scenario. However, practitioners sometimes regard this solution as invalid since it is a purely mathematical construct that apparently does not describe a concrete software engineering solution for resolving race conditions.
   Practitioners often implement SDs with random access input buffers. Messages are then consumed correctly regardless of the order or time at which they arrive, which appears to avoid race conditions altogether. However, this approach changes the observable system behaviour from that specified. We refer to this approach as the lazy buffer realization of a SD.
   We introduce an operational semantics for the lazy buffer realization. We prove the inherent causal scenario global behaviour is bisimulation equivalent to the global behaviour of lazy buffer semantics. Hence, in this sense, the practitioners solution is theoretically the best possible. Also this proves that the inherent causal scenario does represent a 'real-world' software solution.
C1 Univ Surrey, Dept Comp, Guildford GU2 7XH, Surrey, England.
C3 University of Surrey
RP Mitchell, B (corresponding author), Univ Surrey, Dept Comp, Guildford GU2 7XH, Surrey, England.
EM w.mitchell@surrey.ac.uk
CR Alur R., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P304, DOI 10.1109/ICSE.2000.870421
   Alur R, 2001, LECT NOTES COMPUT SC, V2076, P797
   Alur R, 1999, LECT NOTES COMPUT SC, V1664, P114
   Alur R, 1996, SOFTWARE-CONC TOOL, V17, P70
   Baker P, 2003, LECT NOTES COMPUT SC, V2599, P170
   BENABDHALLAH H, 1997, P 3 INT C TOOLS ALG, P259
   Beyer M, 2003, ATS 2003: 12TH ASIAN TEST SYMPOSIUM, PROCEEDINGS, P102
   Bontemps Y, 2003, THIRD INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P41, DOI 10.1109/CSD.2003.1207698
   BONTEMPS Y, 2002, P SCEN STAT MACH MOD
   Chung IS, 1999, INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR PARALLEL AND DISTRIBUTED SYSTEMS, PROCEEDINGS, P72, DOI 10.1109/PDSE.1999.779740
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   GEHRKE T, 1998, P JOINT INT C FORM D, P3
   Gunter E. L., 2003, International Journal on Software Tools for Technology Transfer, V5, P78, DOI 10.1007/s10009-002-0085-2
   Harel D., 2002, International Journal of Foundations of Computer Science, V13, P5, DOI 10.1142/S0129054102000935
   HOLZMANN GJ, 1998, Patent No. 5812145
   Leue S, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P192, DOI 10.1109/ASE.1998.732635
   LOHREY M, 2002, P 13 INT C CONC THEO
   Mauw S, 1999, COMPUT NETW, V31, P1785, DOI 10.1016/S1389-1286(99)00060-2
   MAUW S, 1995, COMPUT J, V7, P473
   Mitchell B, 2005, IEEE T SOFTWARE ENG, V31, P767, DOI 10.1109/TSE.2005.104
   Mitchell B, 2003, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VII, P77
   MITCHELL B, 2004, LNCS, V3407, P114
   *OBJ MAN GROUP, 2004, UN MOD LANG SPEC VER
   PELED D, 2002, ELECT NOTES THEOR CO, V65
   RUDOLPH E, 2000, FORMALE BESCHREIBUNG, P153
   SCHUMANN J, 2000, P 22 INT C SOFTW ENG, P314
   Sun J, 2005, LECT NOTES COMPUT SC, V3582, P415
   TSIOLAKIS A, 2005, ELECT NOTES THEOR CO, V50, P266
   Uchitel S, 2004, ACM T SOFTW ENG METH, V13, P37, DOI 10.1145/1005561.1005563
   WANG HH, 2007, 1 JOINT IEEE IFIP S, P379
   WHITTLE J, 2005, J SOFTWARE SYSTEMS M, V4, P71
NR 32
TC 1
Z9 1
U1 1
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2007
VL 14
IS 4
BP 419
EP 441
DI 10.1007/s10515-007-0017-1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 220BJ
UT WOS:000250131600002
DA 2024-07-18
ER

PT J
AU Geng, BT
   Wang, F
AF Geng, Boting
   Wang, Feng
TI An SDN architecture for patent prior art search system based on phrase
   embedding
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software defined networks; Patent prior art search; Patent mining;
   Phrases embedding
ID RETRIEVAL
AB Software defined network (SDN) has gained a great attention in academic field for its separation of the control plane and the data plain to get a programmable network. In the study, we propose an SDN architecture for a scenario of intelligent patent prior art search system. Different from the current mainstream patent retrieval system, where patent prior art search is executed by means of traditional keywords matches under a fixed network topology, our proposed patent prior art search system based on SDN architecture can provide systematic and security analysis of patent text when encountering big data flows of patent applications. We also propose a new Phrase-based patent text representation model (PPTR), where the whole patent text is represented as a Bag of Phrases and then embedded into vector for patent prior art search, which could maintain the integrity of semantic units of patent text. Our experiments show that the proposed PPTR model achieves the best performance compared with traditional approaches of patent prior art search, and it is also expected that SDN architecture is a promising platform framework for other patent mining tasks.
C1 [Geng, Boting] Zhejiang Univ, Coll Comp Sci & Technol, 38 Zheda Rd, Hangzhou 310063, Zhejiang, Peoples R China.
   [Wang, Feng] Zhejiang Police Coll, Dept Comp & Informat Secur, 555 Binwen Rd, Hangzhou 1310053, Zhejiang, Peoples R China.
C3 Zhejiang University; Zhejiang Police College
RP Geng, BT (corresponding author), Zhejiang Univ, Coll Comp Sci & Technol, 38 Zheda Rd, Hangzhou 310063, Zhejiang, Peoples R China.
EM 11321030@zju.edu.cn; wangfeng@zju.edu.cn
FU Public Technology Research Project of Zhejiang Province [LGF19G010001];
   Technology Reserach Special Project of the Ministry of Public Security
   [2019GABJC36]
FX This work was supported by the Public Technology Research Project of
   Zhejiang Province (No. LGF19G010001), and the Technology Reserach
   Special Project of the Ministry of Public Security (No. 2019GABJC36).
CR Al-Shboul B, 2014, INFORM RETRIEVAL, V17, P430, DOI 10.1007/s10791-013-9233-4
   [Anonymous], 2011, 13 INT C ART INT LAW
   Atkinson K.H., 2008, P 1 ACM WORKSH PAT I, P37
   Bashir S, 2010, LECT NOTES COMPUT SC, V5993, P457, DOI 10.1007/978-3-642-12275-0_40
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Bouadjenek M.R., 2015, STUDY QUERY REFORMUL
   Cao Guihong, 2008, P SIGIR 2008, P243, DOI DOI 10.1145/1390334.1390377
   Chen K., 2013, EFFICIENT ESTIMATION, P2
   Chen YQ, 2015, LECT NOTES COMPUT SC, V9098, P148, DOI 10.1007/978-3-319-21042-1_12
   Cui LZ, 2016, IEEE NETWORK, V30, P58, DOI 10.1109/MNET.2016.7389832
   Fafalios Pavlos, 2014, Professional Search in the Modern World. COST Action IC1002 on Multilingual and Multifaceted Interactive Information Access: LNCS 8830, P166, DOI 10.1007/978-3-319-12511-4_9
   Far MG, 2015, SIGIR 2015: PROCEEDINGS OF THE 38TH INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P803, DOI 10.1145/2766462.2767801
   Fujii Atsushi, 2007, 30th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P793, DOI 10.1145/1277741.1277912
   Ganguly D., 2011, UNITED WE FALL DIVID
   Gobeill J., 2009, SIMPLE PREPOST PROCE
   Gutmann MU, 2012, J MACH LEARN RES, V13, P307
   Harper S., 2011, P 4 WORKSHOP PATENT, P19, DOI DOI 10.1145/2064975.2064982
   Helmers L, 2019, PLOS ONE, V14, DOI 10.1371/journal.pone.0212103
   Hofsttter S., 2019, ENRICHING WORD EMBED
   Hong HS, 2017, NATL ACAD SCI LETT, V40, P167, DOI 10.1007/s40009-017-0548-3
   Hu J, 2018, ENTROPY-SWITZ, V20, DOI 10.3390/e20020104
   Jones G., 2012, MACH TRANSL
   Jose A.S., 2017, INT C COMPUTING METH
   Kang M, 2020, INT CONF BIG DATA, P548, DOI 10.1109/BigComp48618.2020.000-6
   Kim Y., 2015, ICTIR 15
   Konishi K., 2005, QUERY TERMS EXTRACTI
   Krestel R., 2013, P 7 ACM C REC SYST, P395, DOI DOI 10.1145/2507157.2507232
   Kreutz D, 2015, P IEEE, V103, P14, DOI 10.1109/JPROC.2014.2371999
   Krishna A., 2019, QUERY EXPANSION PATE
   Lee J.-S., 2021, PATENTSEMTECH WORKSH
   Li Juanzi, 2007, Wuhan University Journal of Natural Sciences, V12, P917, DOI 10.1007/s11859-007-0038-4
   Magdy W, 2011, LECT NOTES COMPUT SC, V6611, P725, DOI 10.1007/978-3-642-20161-5_80
   Magdy Walid., 2009, Multilin- gual Information Access Evaluation I. Text Retrieval Experiments, P410
   Mahdabi Parvaz, 2012, Multidisciplinary Information Retrieval. Proceedings 5th Information Retrieval Facility Conference. IRFC 2012, P1, DOI 10.1007/978-3-642-31274-8_1
   Mahdabi P, 2011, LECT NOTES COMPUT SC, V6653, P3, DOI 10.1007/978-3-642-21353-3_2
   Mestres A., 2016, ARXIV
   Mihalcea R., 2004, P 2004 C EMPIRICAL M, P404, DOI DOI 10.3115/1219044.1219064
   Mikolov Tomas, 2013, EFFICIENT ESTIMATION
   Nidhi S., 2019, CODS COMAD 19
   Pennington J., 2014, P C EMP METH NAT LAN, P1532, DOI DOI 10.3115/V1/D14-1162
   Piroi Florina, 2011, CLEF NOTEBOOK PAPERS
   Le Q, 2014, PR MACH LEARN RES, V32, P1188
   Risch J., 2021, PATENTSEMTECH
   Rose S.J., 2009, RAPID AUTOMATIC KEYW
   Shalaby W., 2016, P 30 AAAI C ART INT
   Shalaby W., 2016, P 20 9 INT FLOR ART
   Shalaby W, 2019, KNOWL INF SYST, V61, P631, DOI 10.1007/s10115-018-1322-7
   Shalaby W, 2018, ACM/SIGIR PROCEEDINGS 2018, P957, DOI 10.1145/3209978.3210106
   Sideris K., 2017, SEER EMPOWERING SOFT
   Socher R., 2010, LEARNING CONTINUOUS
   Tannebaum W., 2012, 2012 IEEE Sixth International Conference on Semantic Computing (ICSC 2012), P336, DOI 10.1109/ICSC.2012.15
   Verma M., 2011, CLEF 2011 LABS WORKS
   Wang F, 2019, FRONT COMPUT SCI-CHI, V13, P1048, DOI 10.1007/s11704-018-7056-6
   Wang F, 2015, 2015 12TH INTERNATIONAL CONFERENCE ON FUZZY SYSTEMS AND KNOWLEDGE DISCOVERY (FSKD), P1455, DOI 10.1109/FSKD.2015.7382158
   WITTEN IH, 1999, P 4 ACM C DIG LIB
   Wu YL, 2020, INFORM SCIENCES, V517, P100, DOI 10.1016/j.ins.2019.12.031
   Xue X., 2009, Proceeding of the 18th ACM conference on Information and knowledge management, Hong Kong, China, P2037, DOI DOI 10.1145/1645953.1646295
   Zhang C, 2008, J Comput Inf Syst, V4, P1169
NR 58
TC 0
Z9 0
U1 1
U2 12
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 58
DI 10.1007/s10515-022-00360-y
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4Y9ZA
UT WOS:000861878300001
DA 2024-07-18
ER

PT J
AU Thirugnanasambandam, K
   Rajeswari, M
   Bhattacharyya, D
   Kim, JY
AF Thirugnanasambandam, Kalaipriyan
   Rajeswari, M.
   Bhattacharyya, Debnath
   Kim, Jung-yoon
TI Directed Artificial Bee Colony algorithm with revamped search strategy
   to solve global numerical optimization problems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Artificial Bee Colony algorithm; Directional Search; Combined Heat and
   Economic Power Dispatch; Evolutionary Algorithm
ID PARTICLE SWARM OPTIMIZATION; POWER ECONOMIC-DISPATCH; COMBINED HEAT;
   PERFORMANCE
AB Artificial Bee Colony algorithm (ABC) is inspired by behavior of food foraging of honeybees to solve the NP-Hard problems using optimization model which is one among the swarm intelligence algorithms. ABC is a widespread optimization algorithm to obtain the best solution from feasible solutions in the search space and strive harder than other existing population-based algorithms. However, in diversification process ABC algorithm shows good performance but lacks in intensification process and slows to convergence towards an optimal solution because of its search equations. In this work, the authors proposed an improvised solution search strategy at employed bee phase and onlooker bee phase by considering the advantages of the local-best, neighbor-best, and iteration-best solutions. Thus, the obtained candidate solutions are closer to the best solution by providing directional information to ABC algorithms. The search radius for new candidate solutions is adjusted in scout bee phase which facilitates to move towards global convergence. Thus, the process of diversification and intensification is balanced in this work. Finally, to assess the performance of the proposed algorithm, 20 numerical benchmarks functions are used. To show the significance of the proposed methodology it has been tested with Combined Heat and Economic Power Dispatch (CHPED) problem. The empirical result exhibits that the proposed algorithm provides higher quality solutions and outperform with original ABC algorithm for solving numerical optimization problems.
C1 [Thirugnanasambandam, Kalaipriyan] Vellore Inst Technol, Sch Comp Sci & Engn, Chennai Campus, Chennai, Tamil Nadu, India.
   [Rajeswari, M.] Sri Manakula Vinayagar Engn Coll, Madhagadipet, Puducherry, India.
   [Bhattacharyya, Debnath] Koneru Lakshmaiah Educ Fdn, Comp Sci & Engn, Vijayawada, Andhra Pradesh, India.
   [Kim, Jung-yoon] Gachon Univ, Dept Game Media, Coll Future Ind, Seongnam Si 13120, Gyeonggi Do, South Korea.
C3 Vellore Institute of Technology (VIT); VIT Chennai; Koneru Lakshmaiah
   Education Foundation (K L Deemed to be University); Gachon University
RP Kim, JY (corresponding author), Gachon Univ, Dept Game Media, Coll Future Ind, Seongnam Si 13120, Gyeonggi Do, South Korea.
EM kalaip27@gmail.com; raji.rajeswari18@gmail.com; debnathb@gmail.com;
   kjyoonrch@gmail.com
RI Thirugnanasambandam, Kalaipriyan/U-6041-2018; Bhattacharyya,
   Debnath/A-3144-2016
OI Bhattacharyya, Debnath/0000-0003-0140-9644
FU National Research Foundation of Korea(NRF) - Korea government(MSIT)
   [2019R1G1A110034111]
FX This work was supported by the National Research Foundation of
   Korea(NRF) grant funded by the Korea government(MSIT) (No.
   2019R1G1A110034111).
CR Aderhold A, 2010, STUD COMPUT INTELL, V284, P283
   Akay B, 2012, INFORM SCIENCES, V192, P120, DOI 10.1016/j.ins.2010.07.015
   Akbari R, 2010, COMMUN NONLINEAR SCI, V15, P3142, DOI 10.1016/j.cnsns.2009.11.003
   Anuar S, 2016, J KING SAUD UNIV-COM, V28, P395, DOI 10.1016/j.jksuci.2016.03.001
   Banharnsakun A, 2011, APPL SOFT COMPUT, V11, P2888, DOI 10.1016/j.asoc.2010.11.025
   BASTURK B, 2006, P IEEE SWARM INT S I
   Basu M, 2011, EXPERT SYST APPL, V38, P13527, DOI 10.1016/j.eswa.2011.03.067
   Basu M, 2010, ELECTR POW COMPO SYS, V38, P996, DOI 10.1080/15325000903571574
   Beigvand SD, 2016, ELECTR POW SYST RES, V133, P160, DOI 10.1016/j.epsr.2015.10.007
   Chen TG, 2014, SCI WORLD J, DOI 10.1155/2014/438260
   Civicioglu P, 2013, APPL MATH COMPUT, V219, P8121, DOI 10.1016/j.amc.2013.02.017
   Coelho LD, 2009, CHAOS SOLITON FRACT, V39, P510, DOI 10.1016/j.chaos.2007.01.093
   Dorigo M, 1996, IEEE T SYST MAN CY B, V26, P29, DOI 10.1109/3477.484436
   Gao WF, 2012, COMPUT OPER RES, V39, P687, DOI 10.1016/j.cor.2011.06.007
   Gao WF, 2011, INFORM PROCESS LETT, V111, P871, DOI 10.1016/j.ipl.2011.06.002
   Golberg D.E., 1989, Genetic algorithms in search, optimization, and machine learning, P36
   Kang F, 2009, COMPUT STRUCT, V87, P861, DOI 10.1016/j.compstruc.2009.03.001
   Karaboga D., 2005, Technical Report-TR06
   Karaboga D, 2014, APPL SOFT COMPUT, V23, P227, DOI 10.1016/j.asoc.2014.06.035
   Karaboga D, 2014, ARTIF INTELL REV, V42, P21, DOI 10.1007/s10462-012-9328-0
   Karaboga D, 2011, APPL SOFT COMPUT, V11, P652, DOI 10.1016/j.asoc.2009.12.025
   Karaboga D, 2009, ARTIF INTELL REV, V31, P61, DOI 10.1007/s10462-009-9127-4
   Karaboga D, 2009, APPL MATH COMPUT, V214, P108, DOI 10.1016/j.amc.2009.03.090
   Karaboga N, 2009, J FRANKLIN I, V346, P328, DOI 10.1016/j.jfranklin.2008.11.003
   Kassabalidis I, 2001, GLOB TELECOMM CONF, P3613, DOI 10.1109/GLOCOM.2001.966355
   Kaveh A, 2009, COMPUT STRUCT, V87, P1129, DOI 10.1016/j.compstruc.2009.04.011
   Liu B, 2005, CHAOS SOLITON FRACT, V25, P1261, DOI 10.1016/j.chaos.2004.11.095
   Luo J, 2013, APPL MATH COMPUT, V219, P10253, DOI 10.1016/j.amc.2013.04.001
   Maeda M, 2015, NEUROCOMPUTING, V148, P70, DOI 10.1016/j.neucom.2012.06.066
   Malik RezaFirsandaya., 2007, International Journal of Computer Science and Security, V1, P35
   Mohammadi-Ivatloo B, 2013, ELECTR POW SYST RES, V95, P9, DOI 10.1016/j.epsr.2012.08.005
   Neyestani M, 2019, J RENEW SUSTAIN ENER, V11, DOI 10.1063/1.5048833
   Özbakir L, 2010, APPL MATH COMPUT, V215, P3782, DOI 10.1016/j.amc.2009.11.018
   Ozturk C, 2015, APPL SOFT COMPUT, V28, P69, DOI 10.1016/j.asoc.2014.11.040
   Pan QK, 2011, INFORM SCIENCES, V181, P2455, DOI 10.1016/j.ins.2009.12.025
   Passino KM, 2002, IEEE CONTR SYST MAG, V22, P52, DOI 10.1109/MCS.2002.1004010
   Pawar P, 2018, INT C ADV MECH ENG
   Rajasekhar A, 2011, IEEE SYS MAN CYBERN, P655, DOI 10.1109/ICSMC.2011.6083786
   Rao R.S., 2008, Int. J. Electr. Power, V1, P116
   Samanta S, 2011, ENG APPL ARTIF INTEL, V24, P946, DOI 10.1016/j.engappai.2011.03.009
   Singh A, 2009, APPL SOFT COMPUT, V9, P625, DOI 10.1016/j.asoc.2008.09.001
   Stanarevic Nadezda, 2010, Latest Trends on Computers . 14th WSEAS International Conference on Computers (Part of the 14th WSEAS CSCC Multiconference), P440
   Sun LL, 2020, MICROPROCESS MICROSY, V76, DOI 10.1016/j.micpro.2020.103050
   Wang H, 2014, INFORM SCIENCES, V279, P587, DOI 10.1016/j.ins.2014.04.013
   Xiang T, 2007, APPL MATH COMPUT, V190, P1637, DOI 10.1016/j.amc.2007.02.103
   Xiao SY, 2021, APPL SOFT COMPUT, V100, DOI 10.1016/j.asoc.2020.106955
   Yan XH, 2012, NEUROCOMPUTING, V97, P241, DOI 10.1016/j.neucom.2012.04.025
   Yang XS, 2005, LECT NOTES COMPUT SC, V3562, P317
   Yi YJ, 2014, INT C INTEL HUM MACH, P271, DOI 10.1109/IHMSC.2014.73
   Yurtkuran A, 2016, COMPUT INTEL NEUROSC, V2016, DOI 10.1155/2016/8085953
   Zhang D, 2011, P 3 INT WORKSH INT S
   Zhu GP, 2010, APPL MATH COMPUT, V217, P3166, DOI 10.1016/j.amc.2010.08.049
NR 52
TC 10
Z9 12
U1 1
U2 31
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 13
DI 10.1007/s10515-021-00306-w
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY6EY
UT WOS:000737064300007
DA 2024-07-18
ER

PT J
AU Goyal, S
AF Goyal, Somya
TI Predicting the Defects using Stacked Ensemble Learner with Filtered
   Dataset
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software quality; Defect prediction; Data pre-processing; Class
   imbalance; Artificial neural networks (ANN); Stacked ensembles; Decision
   trees; Nearest neighbour; Support vector machine; ROC and AUC
ID CLASS IMBALANCE; SOFTWARE; CLASSIFIER; OVERLAP; MODEL; MAP
AB Software defect prediction is a crucial software project management activity to enhance the software quality. It aids the development team to forecast about which modules need extra attention for testing; which part of software is more prone to errors and faults; before the commencement of testing phase. It helps to reduce the testing cost and hence the overall development cost of the software. Though, it ensures in-time delivery of good quality end-product, but there is one major hinderance in making this prediction. This is the class imbalance issue in the training data. Data imbalance in class distribution adversely affects the performance of classifiers. This paper proposes a K-nearest neighbour (KNN) filtering-based data pre-processing technique for stacked ensemble classifier to handle class imbalance issue. First, nearest neighbour-based filtering is applied to filter out the overlapped data-points to reduce Imbalanced Ratio, then, the processed data with static code metrics is supplied to stacked ensemble for prediction. The stacking is achieved with five base classifiers namely Artificial Neural Network, Decision Tree, Naive Bayes, K-nearest neighbour (KNN) and Support Vector Machine. A comparative analysis among 30 classifiers (5 data pre-processing techniques * 6 prediction techniques) is made. In the experiments, five public datasets from NASA repository namely CM1, JM1, KC1, KC2 and PC1 are used. In total 150 prediction models (5 data pre-processing techniques * 6 classification techniques * 5 datasets) are proposed and their performances are assessed in terms of measures namely Receiver Operator Curve, Area under the Curve and accuracy. The statistical analysis shows that proposed stacked ensemble classifier with KNN filtering performs best among all the predictors independent of datasets.
C1 [Goyal, Somya] Manipal Univ Jaipur, Jaipur, Rajasthan, India.
C3 Manipal University Jaipur
RP Goyal, S (corresponding author), Manipal Univ Jaipur, Jaipur, Rajasthan, India.
EM somyagoyal1988@gmail.com
OI goyal, somya/0000-0002-0113-7733
CR Abaei G, 2015, KNOWL-BASED SYST, V74, P28, DOI 10.1016/j.knosys.2014.10.017
   Afzal W, 2012, INT J SOFTW ENG KNOW, V22, P203, DOI 10.1142/S0218194012400037
   [Anonymous], 2008, SPRINGER TEXTS STAT
   Boucher A, 2018, INFORM SOFTWARE TECH, V96, P38, DOI 10.1016/j.infsof.2017.11.005
   Cai XJ, 2020, CONCURR COMP-PRACT E, V32, DOI 10.1002/cpe.5478
   Chen JF, 2019, IEEE T SOFTWARE ENG, V45, P597, DOI 10.1109/TSE.2018.2790925
   Chen L, 2018, SOFTWARE QUAL J, V26, P97, DOI 10.1007/s11219-016-9342-6
   Erturk E, 2015, EXPERT SYST APPL, V42, P1872, DOI 10.1016/j.eswa.2014.10.025
   Felix EA, 2019, IET SOFTW, V13, P479, DOI 10.1049/iet-sen.2018.5193
   Galar M, 2012, IEEE T SYST MAN CY C, V42, P463, DOI 10.1109/TSMCC.2011.2161285
   Goyal Somya, 2019, 2019 International Conference on Machine Learning, Big Data, Cloud and Parallel Computing (COMITCon), P1, DOI 10.1109/COMITCon.2019.8862256
   Goyal Somya, 2018, International Journal of Information Technology and Computer Science, V10, P35, DOI 10.5815/ijitcs.2018.03.05
   Goyal S, 2020, INT J KNOWL SYST SCI, V11, P20, DOI 10.4018/IJKSS.2020040102
   Goyal S, 2019, ADV APPL MATH SCI, V18, P637
   Goyal S, 2020, LECT NOTES ELECTR EN, V605, P181, DOI 10.1007/978-3-030-30577-2_15
   Guo HX, 2017, EXPERT SYST APPL, V73, P220, DOI 10.1016/j.eswa.2016.12.035
   Halimu C, 2019, PROCEEDINGS OF THE 3RD INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND SOFT COMPUTING (ICMLSC 2019), P1, DOI 10.1145/3310986.3311023
   HANLEY JA, 1982, RADIOLOGY, V143, P29, DOI 10.1148/radiology.143.1.7063747
   Huda S, 2018, IEEE ACCESS, V6, P24184, DOI 10.1109/ACCESS.2018.2817572
   Kaur P, 2019, APPL ARTIF INTELL, V33, P420, DOI 10.1080/08839514.2019.1577017
   Kumar L, 2018, J SYST SOFTWARE, V137, P686, DOI 10.1016/j.jss.2017.04.016
   Laradji IH, 2015, INFORM SOFTWARE TECH, V58, P388, DOI 10.1016/j.infsof.2014.07.005
   Son LH, 2019, SYMMETRY-BASEL, V11, DOI 10.3390/sym11020212
   Lee HK, 2018, EXPERT SYST APPL, V98, P72, DOI 10.1016/j.eswa.2018.01.008
   Ma Y, 2014, J INTELL FUZZY SYST, V27, P2473, DOI 10.3233/IFS-141220
   Malhotra R, 2019, NEUROCOMPUTING, V343, P120, DOI 10.1016/j.neucom.2018.04.090
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Miholca DL, 2018, INFORM SCIENCES, V441, P152, DOI 10.1016/j.ins.2018.02.027
   Mitchell T. M., 1997, MACHINE LEARNING
   Özakinci R, 2018, J SYST SOFTWARE, V144, P216, DOI 10.1016/j.jss.2018.06.025
   Rao KN, 2020, EVOL SYST-GER, V11, P119, DOI 10.1007/s12530-018-9261-9
   Rathore SS, 2019, ARTIF INTELL REV, V51, P255, DOI 10.1007/s10462-017-9563-5
   Rathore SS, 2017, EXPERT SYST APPL, V82, P357, DOI 10.1016/j.eswa.2017.04.014
   Rathore SS, 2017, KNOWL-BASED SYST, V119, P232, DOI 10.1016/j.knosys.2016.12.017
   Rokach L, 2010, ARTIF INTELL REV, V33, P1, DOI 10.1007/s10462-009-9124-7
   Ross, 2005, PROBABILITY STAT ENG
   Sayyad S., 2015, PROMISE REPOSITORY S
   Siers MJ, 2015, INFORM SYST, V51, P62, DOI 10.1016/j.is.2015.02.006
   Song QB, 2019, IEEE T SOFTWARE ENG, V45, P1253, DOI 10.1109/TSE.2018.2836442
   Tantithamthavorn C, 2020, IEEE T SOFTWARE ENG, V46, P1200, DOI 10.1109/TSE.2018.2876537
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   TOMEK I, 1976, IEEE T SYST MAN CYB, V6, P448
   Tong HN, 2018, INFORM SOFTWARE TECH, V96, P94, DOI 10.1016/j.infsof.2017.11.008
   Tsai CF, 2019, INFORM SCIENCES, V477, P47, DOI 10.1016/j.ins.2018.10.029
   Vuttipittayamongkol P, 2020, INFORM SCIENCES, V509, P47, DOI 10.1016/j.ins.2019.08.062
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Wang TJ, 2016, AUTOMAT SOFTW ENG, V23, P569, DOI 10.1007/s10515-015-0179-1
   WOLPERT DH, 1992, NEURAL NETWORKS, V5, P241, DOI 10.1016/S0893-6080(05)80023-1
   Wu XD, 2008, KNOWL INF SYST, V14, P1, DOI 10.1007/s10115-007-0114-2
   Xia X, 2015, INFORM SOFTWARE TECH, V61, P93, DOI 10.1016/j.infsof.2014.12.006
   Yang XL, 2017, INFORM SOFTWARE TECH, V87, P206, DOI 10.1016/j.infsof.2017.03.007
   Zhang Y, 2018, FRONT COMPUT SCI-CHI, V12, P280, DOI 10.1007/s11704-017-6015-y
NR 54
TC 10
Z9 10
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 14
DI 10.1007/s10515-021-00285-y
PG 81
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TW8UZ
UT WOS:000682668900001
DA 2024-07-18
ER

PT J
AU Reiss, SP
   Miao, Y
   Xin, Q
AF Reiss, Steven P.
   Miao, Yun
   Xin, Qi
TI Seeking the user interface
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE User interface generation; Code search; Sketching
ID CODE SEARCH; REUSABLE SOFTWARE; RECOGNITION; DETECT; TEXT
AB User interface design and coding can be complex and messy. We describe a system that uses code search to simplify and automate the exploration of such code. We start with a simple sketch of the desired interface along with a set of keywords describing the application context. If necessary, we convert the sketch into a scalable vector graphics diagram. We then use existing code search engines to find results based on the keywords. We look for potential Java-based graphical user interface solutions within those results and apply a series of code transformations to the solutions to generate derivative solutions, aiming to get solutions that constitute only the user interface and that will compile and run. We run the resultant solutions and compare the generated interfaces to the user's sketches. Finally, we let programmers interact with the matched solutions and return the running code for the solutions they choose. The system is useful for exploring alternative interfaces to the initial and for looking at graphical user interfaces in a code repository.
C1 [Reiss, Steven P.; Xin, Qi] Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
   [Miao, Yun] Google, 1600 Amphitheater Pkwy, Mountain View, CA 94043 USA.
C3 Brown University; Google Incorporated
RP Reiss, SP (corresponding author), Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
EM spr@cs.brown.edu; yunmiao@google.com; qx5@cs.brown.edu
FU National Science Foundation [CCF1130822]; Microsoft; Google
FX This work is supported by the National Science Foundation Grant
   CCF1130822. Additional support has come from Microsoft and Google.
CR Akhin M., 2012, Proceedings 2012 4th International Workshop on Search-driven Development: Users, Infrastructure, Tools, and Evaluation (SUITE 2012), P5, DOI 10.1109/SUITE.2012.6225478
   [Anonymous], 2007, P IEEEACM INT C AUTO, DOI DOI 10.1145/1321631.1321646
   [Anonymous], 2012, P ACM SIGSOFT 20 INT
   [Anonymous], P 5 INT S ONEMPIRICA
   [Anonymous], 2012, THESIS
   [Anonymous], 2014, P 29 ACMIEEE INT C A
   [Anonymous], 2007, P 22 IEEE ACM INT C
   Bajracharya S, 2014, SCI COMPUT PROGRAM, V79, P241, DOI 10.1016/j.scico.2012.04.008
   Bajracharya Sushil, 2006, COMPANION 21 ACM SIG, P681
   Begel A., 2007, WORKSH HUM COMP INT
   Bragdon A., 2010, Proceedings of the 32nd International Conference on Software Engineering (ICSE'10), P455, DOI [DOI 10.1145/1806799.1806866, 10.1145/1806799.1806866]
   Bragdon A, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P2503
   Bull G., 2011, IEEE INT C IM COMP T
   Caetano Anabela, 2002, SSS 02, P9
   Chou SC, 1996, SOFTWARE PRACT EXPER, V26, P815, DOI 10.1002/(SICI)1097-024X(199607)26:7<815::AID-SPE32>3.0.CO;2-#
   Chou SC, 2006, INFORM PROCESS LETT, V99, P106, DOI 10.1016/j.ipl.2006.02.015
   Coates A, 2011, PROC INT CONF DOC, P440, DOI 10.1109/ICDAR.2011.95
   de Sa M., 2008, Proceedings of the Working Conference on Advanced Visual Interfaces, AVI 2008, P225
   Drummong CG, 2000, IEEE T SOFTWARE ENG, V26, P1179, DOI 10.1109/32.888631
   DUDA RO, 1972, COMMUN ACM, V15, P11, DOI 10.1145/361237.361242
   Ernst M.D., WS MATE 2006, P123
   FRAKES WB, 1994, IEEE T SOFTWARE ENG, V20, P617, DOI 10.1109/32.310671
   Gajos K.Z., 2008, P 22 AAAI C ART INT
   Goodger B., 2003, TECHNICAL REPORT
   Grechanik M., 2010, P 32 ACM IEEE INT C
   Greenberg S, 2007, MULTIMED TOOLS APPL, V32, P139, DOI 10.1007/s11042-006-0062-y
   Haiduc S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P842, DOI 10.1109/ICSE.2013.6606630
   Haiduc S, 2012, PROC INT CONF SOFTW, P1273, DOI 10.1109/ICSE.2012.6227101
   HALL RJ, 1993, PROC INT CONF SOFTW, P371, DOI 10.1109/ICSE.1993.346028
   Harris C., 1988, ALVEY VISION C, P147151
   Hartmann B., 2007, P SIGCHI C HUM FACT, P145, DOI DOI 10.1145/1240624.1240646
   Hill E, 2009, PROC INT CONF SOFTW, P232, DOI 10.1109/ICSE.2009.5070524
   Hoffmann R, 2007, UIST 2007: PROCEEDINGS OF THE 20TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P13
   Hummel O, 2008, IEEE SOFTWARE, V25, P45, DOI 10.1109/MS.2008.110
   Janjic W., 2012, Proceedings 2012 4th International Workshop on Search-driven Development: Users, Infrastructure, Tools, and Evaluation (SUITE 2012), P23, DOI 10.1109/SUITE.2012.6225475
   Janjic W, 2009, 2009 ICSE WORKSHOP ON SEARCH-DRIVEN DEVELOPMENT-USERS, INFRASTRUCTURE, TOOLS AND EVALUATION, P21, DOI 10.1109/SUITE.2009.5070015
   Ko AJ, 2005, PROC INT CONF SOFTW, P126
   Ko AJ, 2006, IEEE T SOFTWARE ENG, V32, P971, DOI 10.1109/TSE.2006.116
   Landay JA, 2001, COMPUTER, V34, P56, DOI 10.1109/2.910894
   Lemos OAL, 2011, INFORM SOFTWARE TECH, V53, P294, DOI 10.1016/j.infsof.2010.11.009
   Lemos O.A. L., 2009, P 2009 ACM S APPL CO, P476, DOI DOI 10.1145/1529282.1529384
   Lemos O.A.L., 2007, P 22 IEEE ACM INT C, P525, DOI 10.1145/1321631.1321726
   Li X, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P690, DOI 10.1145/2950290.2950341
   Lin Zhongpeng., 2014, Proceedings of the 5th International Workshop on Em erging Trends in Software M etrics, WETSoM 2014, P15
   Liu Dapeng, 2007, P 22 IEEEACM INT C A, P234, DOI 10.1145/1321631.1321667
   Lu ML, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P545, DOI 10.1109/SANER.2015.7081874
   MAAREK YS, 1991, IEEE T SOFTWARE ENG, V17, P800, DOI 10.1109/32.83915
   Martie L., 2015, P 30 INT C AUT SOFTW
   Martie L, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P76, DOI 10.1109/MSR.2015.15
   Martie L, 2013, 2013 6TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE), P101, DOI 10.1109/CHASE.2013.6614741
   McMillan C., P 33 INT C SOFTW ENG
   Meixner Gerrit, 2011, i-com Zeitschrift fur Interaktive und Kooperative Medien, V10, P2, DOI 10.1524/icom.2011.0026
   Mishne A, 2012, ACM SIGPLAN NOTICES, V47, P997, DOI 10.1145/2398857.2384689
   Neumann L., 2012, IEEE C COMP VIS PATT
   Nichols J., 2005, ACM CHI 2005 WORKSH
   Nylander S., 2005, UIST C COMP
   Park JW, 2014, KNOWL INF SYST, V41, P727, DOI 10.1007/s10115-013-0677-z
   PAUL S, 1994, IEEE T SOFTWARE ENG, V20, P463, DOI 10.1109/32.295894
   Plamondon R, 2000, IEEE T PATTERN ANAL, V22, P63, DOI 10.1109/34.824821
   Podgurski A., 1993, ACM Transactions on Software Engineering and Methodology, V2, P286, DOI 10.1145/152388.152392
   Raneburger D., 2012, P ACM S ENG INTERACT, P91
   Reiss S. P., 2012, Proceedings 2012 2nd International Workshop on Developing Tools as Plug-ins (TOPI 2012), P55, DOI 10.1109/TOPI.2012.6229811
   Reiss S.P., 2005, P ASE 2005 NOV, P34
   Reiss S.P., 2009, P SUITE 2009
   Reiss S.P., 2014, BROWSING SOFTWARE RE
   Reiss S. P, 2007, 22 IEEEACM INT C AUT, P74
   Reiss SP, 2009, PROC INT CONF SOFTW, P243, DOI 10.1109/ICSE.2009.5070525
   Seifert J., 2011, Proceedings of the 13th International Conference on Human Computer Interaction with Mobile Devices and Services, P109
   Shaowei Wang, 2011, 2011 18th Working Conference on Reverse Engineering, P119, DOI 10.1109/WCRE.2011.69
   Sisman B, 2013, IEEE WORK CONF MIN S, P309, DOI 10.1109/MSR.2013.6624044
   Stol KJ, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2533685
   Takuya Watanabe, 2011, P 3 INT WORKSH SEARC, P17, DOI [DOI 10.1145/1985429.1985434, 10.1145/1985429.1985434]
   Toshev A, 2012, INT J COMPUT VISION, V99, P123, DOI 10.1007/s11263-012-0521-z
   Nguyen TA, 2015, IEEE INT CONF AUTOM, P248, DOI 10.1109/ASE.2015.32
   Vanderlei TA, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P866, DOI 10.1145/1244002.1244192
   Vijayan Sugumaran, 2003, Data Base for Advances in Information Systems, V34, P8, DOI 10.1145/937742.937745
   Wang J, 2013, IEEE WORK CONF MIN S, P319, DOI 10.1109/MSR.2013.6624045
   Wang S., 2014, ACM/IEEE International Conference on Automated Software Engineering, ASE '14, Vasteras, Sweden - September 15 - 19, 2014, P677
   Wang SW, 2016, AUTOMAT SOFTW ENG, V23, P393, DOI 10.1007/s10515-014-0170-2
   Wightman D, 2012, UIST'12: PROCEEDINGS OF THE 25TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P219
   Wu V, 1999, IEEE T PATTERN ANAL, V21, P1224, DOI 10.1109/34.809116
   Yao Haining, 2004, P 42 ANN SE REG C, P110
   Ye YW, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P513, DOI 10.1109/ICSE.2002.1007995
   Ye YW, 2003, IEEE INTELL SYST, V18, P43, DOI 10.1109/MIS.2003.1200727
   [No title captured]
NR 85
TC 22
Z9 23
U1 0
U2 21
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2018
VL 25
IS 1
BP 157
EP 193
DI 10.1007/s10515-017-0216-3
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS2DV
UT WOS:000419589600005
DA 2024-07-18
ER

PT J
AU Suárez-Cabal, MJ
   de La Riva, C
   Tuya, J
   Blanco, R
AF Jose Suarez-Cabal, Maria
   de la Riva, Claudio
   Tuya, Javier
   Blanco, Raquel
TI Incremental test data generation for database queries
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software testing; Database testing; Test database generation; Test
   coverage; Constraint satisfaction problem (CSP)
ID COVERAGE
AB Testing database applications is a complex task since it involves designing test databases with meaningful test data in order to reveal faults and, at the same time, with a small size in order to carry out the testing process in an efficient way. This paper presents an automated approach to generating test data (test relational databases and test inputs for query parameters) for a set of SQL queries, with the aim of covering test requirements as obtained from said queries. The test data generation follows an incremental approach where, in each increment, test data are generated to cover a test requirement by re-using test data previously generated for other test requirements. The test data generation for each test requirement is formulated as a constraint satisfaction problem, where constraints are derived from the test requirement, initial database states and previously generated test data. The generation process is fully automated and supports the execution on complex queries and databases. Evaluation is carried out on a real life application, and the results show that small-size generated test relational databases achieve high coverage scores for the queries under test in a short generating time.
C1 [Jose Suarez-Cabal, Maria; de la Riva, Claudio; Tuya, Javier; Blanco, Raquel] Campus Univ Gijon, Dept Informat, Gijon 33204, Spain.
RP Suárez-Cabal, MJ (corresponding author), Campus Univ Gijon, Dept Informat, Gijon 33204, Spain.
EM cabal@uniovi.es; claudio@uniovi.es; tuya@uniovi.es; rblanco@uniovi.es
RI /E-9752-2016; Riva Alvarez, Claudio de la/L-5014-2014; Suarez-Cabal,
   Maria Jose/E-8453-2016; Tuya, Javier/L-6850-2014
OI /0000-0003-2855-0760; Riva Alvarez, Claudio de la/0000-0001-5592-9683;
   Suarez-Cabal, Maria Jose/0000-0001-8262-2871; Tuya,
   Javier/0000-0002-1091-934X
FU Spanish Ministry of Science and Technology [TIN2013-46928-C3-1-R,
   TIN2016-76956-C3-1-R]; ERDF funds [GRUPIN14-007]
FX This work was supported in part by projects TIN2013-46928-C3-1-R and
   TIN2016-76956-C3-1-R, funded by the Spanish Ministry of Science and
   Technology, and GRUPIN14-007, funded by the Principality of Asturias
   (Spain) and ERDF funds.
CR [Anonymous], 1990, The relational model for database management: version 2
   [Anonymous], 1993, Foundations of Constraint Satisfaction
   [Anonymous], 2007, P INT C DAT ENG, DOI DOI 10.1109/ICDE.2007.367896
   Binnig C., 2008, P 1 INT WORKSH TEST
   Binnig Carsten, 2007, P ACM SIGMOD INT C M, P341, DOI DOI 10.1145/1247480.1247520
   Blanco R., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P71, DOI 10.1109/ICST.2012.87
   Bruno N, 2006, IEEE T KNOWL DATA EN, V18, P1721, DOI 10.1109/TKDE.2006.190
   Bruno Nicolas, 2005, P 31 INT C VERY LARG, P1097
   Caballero R, 2010, LECT NOTES COMPUT SC, V6009, P191, DOI 10.1007/978-3-642-12251-4_15
   Chandra B, 2015, VLDB J, V24, P731, DOI 10.1007/s00778-015-0395-0
   Chays D, 2004, SOFTW TEST VERIF REL, V14, P17, DOI 10.1002/stvr.286
   Chays D., 2008, P 1 INT WORKSH TEST
   Chilenski J. J., 2001, INVESTIGATION 3 FORM
   de la Riva C., 2010, AST, P67
   Emmi M., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P151
   Halfond WGJ, 2006, IEEE INT CONF AUTOM, P69
   Houkjaer Kenneth, 2006, P 32 INT C VERY LARG, P1243
   Suárez-Cabal MJ, 2009, J UNIVERS COMPUT SCI, V15, P584
   Kai Pan, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P73, DOI 10.1109/ASE.2011.6100152
   Kapfhammer G. M., 2003, Software Engineering Notes, V28, P98, DOI 10.1145/949952.940086
   Kapfhammer GM, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P31, DOI 10.1109/ICST.2013.47
   Khalek S. A., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P50, DOI 10.1109/ICST.2011.21
   Khalek Shadi Abdul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P238, DOI 10.1109/ASE.2008.34
   Li C., 2010, P 3 INT WORKSH TEST
   Lo E, 2014, VLDB J, V23, P895, DOI 10.1007/s00778-014-0354-1
   Marcozzi M, 2015, SCI COMPUT PROGRAM, V105, P44, DOI 10.1016/j.scico.2015.03.005
   Pan K, 2015, AUTOMAT SOFTW ENG, V22, P439, DOI 10.1007/s10515-014-0158-y
   Pan K, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2491529
   Pan K, 2013, 2013 8TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST (AST), P111, DOI 10.1109/IWAST.2013.6595801
   Prud'homme C., 2015, 6241 LINA CNRS UMR T
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Shah S, 2011, PROC INT CONF DATA, P1175, DOI 10.1109/ICDE.2011.5767876
   Tuya J, 2007, INFORM SOFTWARE TECH, V49, P398, DOI 10.1016/j.infsof.2006.06.009
   Tuya J, 2016, IEEE T SOFTWARE ENG, V42, P941, DOI 10.1109/TSE.2016.2519032
   Tuya J, 2010, SOFTW TEST VERIF REL, V20, P237, DOI 10.1002/stvr.424
   Veanes M, 2009, LECT NOTES COMPUT SC, V5885, P49, DOI 10.1007/978-3-642-10373-5_3
   Vemasani P, 2014, IEEE ICST WORKSHOP, P216, DOI 10.1109/ICSTW.2014.23
   Willmor D., 2006, 28th International Conference on Software Engineering Proceedings, P102, DOI 10.1145/1134285.1134301
   Willmor D, 2006, TAIC PART - TESTING: ACADEMIC & INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P115, DOI 10.1109/TAIC-PART.2006.28
   Zhang B, 2001, P INT COMP SOFTW APP, P161, DOI 10.1109/CMPSAC.2001.960612
   Zhou C., 2011, ICST, P259, DOI DOI 10.1109/ICST.2011.63
NR 41
TC 6
Z9 7
U1 0
U2 11
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2017
VL 24
IS 4
BP 719
EP 755
DI 10.1007/s10515-017-0212-7
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FI9EQ
UT WOS:000412307800001
DA 2024-07-18
ER

PT J
AU Malhotra, R
   Khanna, M
AF Malhotra, Ruchika
   Khanna, Megha
TI An exploratory study for software change prediction in object-oriented
   systems using hybridized techniques
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Change proneness; Empirical validation; Hybridized techniques;
   Predictive modeling; Search-based techniques; Object-oriented metrics
ID LEARNING CLASSIFIER SYSTEMS; PARTICLE SWARM OPTIMIZATION; SUPPORT VECTOR
   MACHINES; OPEN-SOURCE PRODUCTS; CHANGE-PRONE CLASSES; EVOLUTIONARY
   ALGORITHMS; EMPIRICAL VALIDATION; COUPLING MEASUREMENT;
   FEATURE-SELECTION; FAULT PREDICTION
AB Variation in software requirements, technological upgrade and occurrence of defects necessitate change in software for its effective use. Early detection of those classes of a software which are prone to change is critical for software developers and project managers as it can aid in efficient resource allocation of limited resources. Moreover, change prone classes should be efficiently restructured and designed to prevent introduction of defects. Recently, use of search based techniques and their hybridized counter-parts have been advocated in the field of software engineering predictive modeling as these techniques help in identification of optimal solutions for a specific problem by testing the goodness of a number of possible solutions. In this paper, we propose a novel approach for change prediction using search-based techniques and hybridized techniques. Further, we address the following issues: (i) low repeatability of empirical studies, (ii) less use of statistical tests for comparing the effectiveness of models, and (iii) non-assessment of trade-off between runtime and predictive performance of various techniques. This paper presents an empirical validation of search-based techniques and their hybridized versions, which yields unbiased, accurate and repeatable results. The study analyzes and compares the predictive performance of five search-based, five hybridized techniques and four widely used machine learning techniques and a statistical technique for predicting change prone classes in six application packages of a popular operating system for mobile-Android. The results of the study advocate the use of hybridized techniques for developing models to identify change prone classes.
C1 [Malhotra, Ruchika; Khanna, Megha] Delhi Technol Univ, Delhi, India.
   [Khanna, Megha] Univ Delhi, Sri Guru Gobind Singh Coll Commerce, Delhi, India.
C3 Delhi Technological University; University of Delhi
RP Malhotra, R (corresponding author), Delhi Technol Univ, Delhi, India.
EM ruchikamalhotra2004@yahoo.com; meghakhanna86@gmail.com
RI Malhotra, Ruchika/ABC-3126-2020
OI Malhotra, Ruchika/0000-0003-3872-6213
CR Aguilar-Ruiz JS, 2003, IEEE T SYST MAN CY B, V33, P324, DOI 10.1109/TSMCB.2002.805696
   Ali S, 2010, IEEE T SOFTWARE ENG, V36, P742, DOI 10.1109/TSE.2009.52
   [Anonymous], 2013, P 9 INT C PRED MOD S, DOI DOI 10.1145/2499393.2499394
   [Anonymous], 2014, P 2014 INT C DAT MIN
   [Anonymous], P 6 INT C PRED MOD S
   [Anonymous], 2001, P 3 ANN C GENETIC EV
   [Anonymous], P INT C SOFTW TEST V
   [Anonymous], P 9 IEEE WORK C MIN
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Arisholm E, 2004, IEEE T SOFTWARE ENG, V30, P491, DOI 10.1109/TSE.2004.41
   Arisholm E., 2006, ISESE 06 P 2006 ACMI, P8
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Bacardit J, 2003, LECT NOTES COMPUT SC, V2724, P1818
   Bacardit J., 2004, THESIS
   Bacardit J, 2009, EVOL COMPUT, V17, P307, DOI 10.1162/evco.2009.17.3.307
   Bardsiri VK, 2014, EMPIR SOFTW ENG, V19, P857, DOI 10.1007/s10664-013-9241-4
   Bardsiri VK, 2013, SOFTWARE QUAL J, V21, P501, DOI 10.1007/s11219-012-9183-x
   Barros M. O., 2011, 00062011 UNIRIO
   Bernadó-Mansilla E, 2003, EVOL COMPUT, V11, P209, DOI 10.1162/106365603322365289
   Bieman JM, 2003, PROG COMPREHEN, P44
   Bieman JM, 2001, PROC IEEE INT CONF S, P580, DOI 10.1109/ICSM.2001.972775
   Braga PL, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1788
   Briand L. C., 2001, Empirical Software Engineering, V6, P11, DOI 10.1023/A:1009815306478
   Briand L. C., 1998, Empirical Software Engineering, V3, P65, DOI 10.1023/A:1009783721306
   Briand LC, 2000, J SYST SOFTWARE, V51, P245, DOI 10.1016/S0164-1212(99)00102-8
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Burgess CJ, 2001, INFORM SOFTWARE TECH, V43, P863, DOI 10.1016/S0950-5849(01)00192-6
   Canfora G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P252, DOI 10.1109/ICST.2013.38
   Cartwright M, 2000, IEEE T SOFTWARE ENG, V26, P786, DOI 10.1109/32.879814
   Carvalho DR, 2004, INFORM SCIENCES, V163, P13, DOI 10.1016/j.ins.2003.03.013
   Catal C, 2009, INFORM SCIENCES, V179, P1040, DOI 10.1016/j.ins.2008.12.001
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Chiu NH, 2007, J SYST SOFTWARE, V80, P628, DOI 10.1016/j.jss.2006.06.006
   Clarke J., 2003, IEE Proceedings-Software, V150, P161, DOI 10.1049/ip-sen:20030559
   Clerc M, 2002, IEEE T EVOLUT COMPUT, V6, P58, DOI 10.1109/4235.985692
   Corazza A, 2013, EMPIR SOFTW ENG, V18, P506, DOI 10.1007/s10664-011-9187-3
   Craenen BGW, 2003, IEEE T EVOLUT COMPUT, V7, P424, DOI 10.1109/TEVC.2003.816584
   de Carvalho AB, 2010, J SYST SOFTWARE, V83, P868, DOI 10.1016/j.jss.2009.12.023
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Di Martino Sergio, 2011, Product-Focused Software Process Improvement. Proceedings 12th International Conference, PROFES 2011, P247, DOI 10.1007/978-3-642-21843-9_20
   Dolado JJ, 2000, IEEE T SOFTWARE ENG, V26, P1006, DOI 10.1109/32.879821
   Durbin R, 1989, NEURAL COMPUT, V1, P133, DOI 10.1162/neco.1989.1.1.133
   El Emam K, 2001, J SYST SOFTWARE, V56, P63, DOI 10.1016/S0164-1212(00)00086-8
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Elish MO, 2013, J SOFTW-EVOL PROC, V25, P407, DOI 10.1002/smr.1549
   Friedman M, 1937, J AM STAT ASSOC, V32, P675, DOI 10.2307/2279372
   Gottlieb J, 2002, EVOL COMPUT, V10, P35, DOI 10.1162/106365602317301763
   Grosan C, 2007, STUD COMPUT INTELL, V75, P1
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Haibo He, 2009, IEEE Transactions on Knowledge and Data Engineering, V21, P1263, DOI 10.1109/TKDE.2008.239
   Hall M. A., 2000, P 17 INT C MACH LEAR, P359, DOI DOI 10.5555/645529.657793
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M., 2010, INT C FUND APPR SOFT
   Harman M, 2014, LECT NOTES COMPUT SC, V8636, P240
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Harman M, 2012, LECT NOTES COMPUT SC, V7007, P1
   Henderson-Sellers B., 1996, Object-Oriented Metrics, measures of complexity
   Hongmin Lu, 2012, Empirical Software Engineering, V17, P200, DOI 10.1007/s10664-011-9170-z
   Huang CL, 2008, APPL SOFT COMPUT, V8, P1381, DOI 10.1016/j.asoc.2007.10.007
   Huang SJ, 2006, INFORM SOFTWARE TECH, V48, P1034, DOI 10.1016/j.infsof.2005.12.020
   Khanna, 2014, SOFTW QUAL PROF, V17, P17
   Khoshgoftaar TM, 2006, SOFTWARE QUAL J, V14, P85, DOI 10.1007/s11219-006-7597-z
   Koru AG, 2007, J SYST SOFTWARE, V80, P63, DOI 10.1016/j.jss.2006.05.017
   Koru AG, 2005, IEEE T SOFTWARE ENG, V31, P625, DOI 10.1109/TSE.2005.89
   Kpodjedo S, 2011, EMPIR SOFTW ENG, V16, P141, DOI 10.1007/s10664-010-9151-7
   Kubat M., 1997, ADDRESSING CURSE IMB, V97, P179
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li M, 2012, AUTOMAT SOFTW ENG, V19, P201, DOI 10.1007/s10515-011-0092-1
   Lin SW, 2008, EXPERT SYST APPL, V35, P1817, DOI 10.1016/j.eswa.2007.08.088
   Lin SW, 2009, APPL SOFT COMPUT, V9, P1008, DOI 10.1016/j.asoc.2009.01.001
   Lindvall M, 1998, SOFTWARE PRACT EXPER, V28, P1551, DOI 10.1002/(SICI)1097-024X(19981225)28:15<1551::AID-SPE212>3.0.CO;2-0
   Malhotra R, 2014, P 7 INT WORKSH SEARC, P35
   Malhotra R., 2015, P N AM SEARCH BAS SO, P1
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   Malhotra R, 2013, INT J MACH LEARN CYB, V4, P273, DOI 10.1007/s13042-012-0095-7
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   Martínez-Estudillo FJ, 2008, NEUROCOMPUTING, V72, P548, DOI 10.1016/j.neucom.2007.11.019
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Minku LL, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522928
   Misirli AT, 2011, SOFTWARE QUAL J, V19, P515, DOI 10.1007/s11219-010-9128-1
   Olague HM, 2007, IEEE T SOFTWARE ENG, V33, P402, DOI 10.1109/TSE.2007.1015.
   Oliveira ALI, 2010, INFORM SOFTWARE TECH, V52, P1155, DOI 10.1016/j.infsof.2010.05.009
   Otero J, 2006, SOFT COMPUT, V10, P825, DOI 10.1007/s00500-005-0011-0
   Ouni A, 2013, AUTOMAT SOFTW ENG, V20, P47, DOI 10.1007/s10515-011-0098-8
   Pai GJ, 2007, IEEE T SOFTWARE ENG, V33, P675, DOI [10.1109/TSE.2007.70722, 10.1109/TSE.2007.70722.]
   Ramirez A., 2015, EMPIR SOFTW ENG, V21, P1
   Rivest R. L., 1987, Machine Learning, V2, P229, DOI 10.1007/BF00058680
   Rodríguez D, 2012, INFORM SCIENCES, V191, P14, DOI 10.1016/j.ins.2011.01.039
   Romano D., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P303, DOI 10.1109/ICSM.2011.6080797
   Singh Y, 2010, SOFTWARE QUAL J, V18, P3, DOI 10.1007/s11219-009-9079-6
   Sousa T, 2004, PARALLEL COMPUT, V30, P767, DOI 10.1016/j.parco.2003.12.015
   STONE M, 1974, J R STAT SOC B, V36, P111, DOI 10.1111/j.2517-6161.1974.tb00994.x
   Zhou YM, 2009, IEEE T SOFTWARE ENG, V35, P607, DOI 10.1109/TSE.2009.32
NR 93
TC 33
Z9 34
U1 0
U2 18
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2017
VL 24
IS 3
BP 673
EP 717
DI 10.1007/s10515-016-0203-0
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EW3KK
UT WOS:000402394000007
DA 2024-07-18
ER

PT J
AU Baresi, L
   Delamaro, M
   Nardi, P
AF Baresi, Luciano
   Delamaro, Marcio
   Nardi, Paulo
TI Test oracles for simulink-like models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Embedded software; Matlab/Simulink; Test oracle
ID FRAMEWORK
AB The design of embedded systems is often supported by the definition of executable models for tools like Matlab/Simulink or Scilab/Xcos. These models play a pivotal role in the development process and their correctness is thus extremely important. Many different solutions exist for the definition of suitable tests to "exercise" these models, but only a few (partial) solutions exist for assessing the quality of execution (simulation) results, that is, for defining suitable oracles. This paper addresses the problem and proposes a formal language for specifying the oracles and relating them to existing models. It also presents Apolom, a prototype tool for checking simulation results against stated oracles. The empirical assessment we conducted to assess the viability of the proposed solution is organized around four case studies and witnesses interesting results in terms of effectiveness, efficiency, and required resources.
C1 [Baresi, Luciano] Politecn Milan, Dipartimento Elettron Informaz & Bioingn, Milan, Italy.
   [Delamaro, Marcio] Univ Sao Paulo, ICMC, Sao Carlos, SP, Brazil.
   [Nardi, Paulo] Univ Tecnol Fed Parana, DACOM, Cornelio Procopio, Brazil.
C3 Polytechnic University of Milan; Universidade de Sao Paulo; Universidade
   Tecnologica Federal do Parana
RP Nardi, P (corresponding author), Univ Tecnol Fed Parana, DACOM, Cornelio Procopio, Brazil.
EM luciano.baresi@polimi.it; delamaro@icmc.usp.br; paulonardi@utfpr.edu.br
RI Delamaro, Marcio/D-5180-2011; Baresi, Luciano/N-4208-2018
OI Delamaro, Marcio/0000-0001-7535-5891; Baresi,
   Luciano/0000-0001-6467-837X; Nardi, Paulo Augusto/0000-0002-0874-1183
FU FAPESP (Fundacao de Amparo a Pesquisa do Estado de Sao Paulo)
   [2010/09806-0]; CNPq (Conselho Nacional de Desenvolvimento Cientifico e
   Tecnologico) [559915/2010-1, 144626/2009-8]; CAPES (Coordenacao de
   Aperfeiroamento de Pessoal de Nivel Superior) [6834-10-8]; Fundacao de
   Amparo a Pesquisa do Estado de Sao Paulo (FAPESP) [10/09806-0] Funding
   Source: FAPESP
FX The work presented in this paper has been supported by FAPESP (Fundacao
   de Amparo a Pesquisa do Estado de Sao Paulo), Process Number
   2010/09806-0, CNPq (Conselho Nacional de Desenvolvimento Cientifico e
   Tecnologico), Process Numbers 559915/2010-1 and 144626/2009-8, CAPES
   (Coordenacao de Aperfeiroamento de Pessoal de Nivel Superior), Process
   Number 6834-10-8. We would like to thank Instituto Nacional de Ciencia e
   Tecnologia em Sistemas Embarcados Criticos (INCT-SEC) and AGX.
CR Aichernig BK, 1999, LECT NOTES COMPUT SC, V1698, P250
   Alligood K.T., 2000, CHAOS INTRO DYNAMICA
   Andrews JH, 2003, IEEE T SOFTWARE ENG, V29, P634, DOI 10.1109/TSE.2003.1214327
   [Anonymous], 1989, ACM COMPUT SURV, V21, P593, DOI DOI 10.1145/76894.76897
   Araujo Rodrigo Fraxino., 2011, ICSEA 2011, P58
   Bagge AH, 2009, ELECTRON NOTES THEOR, V238, P17, DOI 10.1016/j.entcs.2009.09.038
   Baresi L., 2001, TECHNICAL REPORT
   Baresi L, 2009, LECT NOTES COMPUT SC, V5522, P26, DOI 10.1007/978-3-642-02138-1_2
   Blackburn MR, 1996, COMPASS '96 - PROCEEDINGS OF THE ELEVENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P237, DOI 10.1109/CMPASS.1996.507891
   Boden LM, 2005, 29TH ANNUAL IEEE/NASA SOFTWARE ENGINEERING WORKSHOP, PROCEEDINGS, P325, DOI 10.1109/SEW.2005.25
   Bogdanich W., 2011, New York Times
   Branco K., 2011, IEEE INT C ROB AUT I, P1
   BROWN DB, 1992, IEEE T RELIAB, V41, P272, DOI 10.1109/24.257793
   Denil J., 2015, P S THEOR MOD SIM SO, P47
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Edwards SH, 2001, SOFTW TEST VERIF REL, V11, P97, DOI 10.1002/stvr.224
   Felder M., 1994, ACM Transactions on Software Engineering and Methodology, V3, P308, DOI 10.1145/201024.201034
   Gaudel MC, 1995, LECT NOTES COMPUT SC, V915, P82
   GHEZZI C, 1990, J SYST SOFTWARE, V12, P107, DOI 10.1016/0164-1212(90)90074-V
   Grand K., 2010, LARGE SCALE MODELING
   GUTTAG J, 1977, COMMUN ACM, V20, P396, DOI 10.1145/359605.359618
   Lee CC, 2013, SAE INT J AEROSP, V6, P607, DOI 10.4271/2013-01-2237
   LORENZ EN, 1963, J ATMOS SCI, V20, P130, DOI 10.1175/1520-0469(1963)020<0130:DNF>2.0.CO;2
   Manolache LI, 2001, SOFTWARE PRACT EXPER, V31, P1211, DOI 10.1002/spe.409
   Memon A, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P164, DOI 10.1109/ASE.2003.1240304
   Nadeem A, 2005, J UNIVERS COMPUT SCI, V11, P962
   Nardi P., 2011, TECHNICAL REPORT
   Nardi PA, 2013, IEEE INT CONF EMBED, P330, DOI 10.1109/RTCSA.2013.6732234
   Philips M., 2012, KNIGHT SHOWS LOSE 44
   Reactive Systems Inc, 2015, REACT US GUID
   Reicherdt R, 2012, PROC INT CONF SOFTW, P551, DOI 10.1109/ICSE.2012.6227161
   Richardson D. J., 1992, International Conference on Software Engineering, P105, DOI 10.1145/143062.143100
   Schmidt A., 2015, P S THEOR MOD SIM, P69
   Shailesh S., 2016, EASE ANAL LARGE SIGN
   Sweet W, 1996, IEEE SPECTRUM, V33, P26, DOI 10.1109/6.542272
   The MathWorks Inc, SIM VER VAL
   The MathWorks Inc, SIM DES VER
   The MathWorks Inc, MOD VER BLOCKS VER M
   Tu D, 2009, 2009 INTERNATIONAL CONFERENCE ON SCALABLE COMPUTING AND COMMUNICATIONS & EIGHTH INTERNATIONAL CONFERENCE ON EMBEDDED COMPUTING, P351, DOI 10.1109/EmbeddedCom-ScalCom.2009.69
   Wang X, 2005, IEEE INT C ENG COMP, P440
   WEYUKER EJ, 1982, COMPUT J, V25, P465, DOI 10.1093/comjnl/25.4.465
   Zander-Nowicka J., 2006, P DAGST WORKSH MOD B, P131
   Zander-Nowicka J., 2008, THESIS
NR 43
TC 2
Z9 2
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2017
VL 24
IS 2
BP 369
EP 391
DI 10.1007/s10515-016-0207-9
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ES3FH
UT WOS:000399413800004
OA Green Published
DA 2024-07-18
ER

PT J
AU Vidal, SA
   Marcos, C
   Díaz-Pace, JA
AF Vidal, Santiago A.
   Marcos, Claudia
   Andres Diaz-Pace, J.
TI An approach to prioritize code smells for refactoring
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Code smells; Refactoring; Software evolution; Design problems
ID IDENTIFICATION; OPPORTUNITIES; EVOLUTION
AB Code smells are a popular mechanism to find structural design problems in software systems. Consequently, several tools have emerged to support the detection of code smells. However, the number of smells returned by current tools usually exceeds the amount of problems that the developer can deal with, particularly when the effort available for performing refactorings is limited. Moreover, not all the code smells are equally relevant to the goals of the system or its health. This article presents a semi-automated approach that helps developers focus on the most critical problems of the system. We have developed a tool that suggests a ranking of code smells, based on a combination of three criteria, namely: past component modifications, important modifiability scenarios for the system, and relevance of the kind of smell. These criteria are complementary and enable our approach to assess the smells from different perspectives. Our approach has been evaluated in two case-studies, and the results show that the suggested code smells are useful to developers.
C1 [Vidal, Santiago A.; Marcos, Claudia; Andres Diaz-Pace, J.] UNICEN, ISISTAN, Tandil, Argentina.
   [Vidal, Santiago A.; Andres Diaz-Pace, J.] Consejo Nacl Invest Cient & Tecn, Tandil, Argentina.
   [Marcos, Claudia] CIC, Buenos Aires, DF, Argentina.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET)
RP Vidal, SA (corresponding author), UNICEN, ISISTAN, Tandil, Argentina.
EM svidal@exa.unicen.edu.ar; cmarcos@exa.unicen.edu.ar;
   adiaz@exa.unicen.edu.ar
FU CONICET (Argentina) through PIP Project [112-201101-00078]
FX This work was partially supported by CONICET (Argentina) through PIP
   Project No. 112-201101-00078. We are grateful to Mauricio Arroqui and
   Carlos Machado for their valuable collaboration in the BCFS case-study.
CR [Anonymous], 2003, Modernizing Legacy Systems: Software Technologies, Engineering Processes,and Business Practices
   April A., 2008, SOFTWARE MAINTENANCE
   Arcoverde R. L., 2012, THESIS PONTIFICIA U
   Bashroush R, 2004, PROCEEDINGS OF THE IASTED INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P54
   CLEMENTS P, 2003, SOFTWARE ARCHITECTUR
   D'Ambros M, 2009, J SOFTW MAINT EVOL-R, V21, P217, DOI 10.1002/smr.407
   Erlikh L., 2000, IT Professional, V2, P17, DOI 10.1109/6294.846201
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Girba T, 2004, PROC IEEE INT CONF S, P40, DOI 10.1109/ICSM.2004.1357788
   Hurtado J. F., 2013, 14 ARG S SOFTW ENG A, V42
   Kazman R, 1996, IEEE SOFTWARE, V13, P47, DOI 10.1109/52.542294
   Kim M., 2012, P 20 INT S FDN SOFTW
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Levy H., 2002, FINANCIAL TIMES
   Macia I., 2012, CSMR
   Macia I, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P662, DOI 10.1109/ICSM.2012.6405348
   Mangudo Pablo, 2012, International Journal of Agile and Extreme Software Development, V1, P6
   Marcos C, 2011, IEEE LAT AM T, V9, P1099, DOI 10.1109/TLA.2011.6129709
   Marinescu R, 2012, IBM J RES DEV, V56, DOI 10.1147/JRD.2012.2204512
   Mens T., 2001, P 4 INT WORKSHOP PRI, P83, DOI [DOI 10.1145/602461.602476, 10.1145/602461.602476]
   Mkaouer MW, 2014, LECT NOTES COMPUT SC, V8636, P168
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Ozkaya I., 2010, CSMR, P127
   Ricci F, 2011, RECOMMENDER SYSTEMS HANDBOOK, P1, DOI 10.1007/978-0-387-85820-3_1
   Tsantalis N, 2011, EUR CON SFTWR MTNCE, P25, DOI 10.1109/CSMR.2011.7
   Tsantalis N, 2011, J SYST SOFTWARE, V84, P1757, DOI 10.1016/j.jss.2011.05.016
   Tsantalis N, 2010, J SYST SOFTWARE, V83, P391, DOI 10.1016/j.jss.2009.09.017
   Vidal S. A., 2013, THESIS UNICEN U
   Wong S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P411, DOI 10.1145/1985793.1985850
   Woods E, 2012, J SYST SOFTWARE, V85, P2034, DOI 10.1016/j.jss.2012.04.055
NR 31
TC 62
Z9 64
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2016
VL 23
IS 3
BP 501
EP 532
DI 10.1007/s10515-014-0175-x
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DM9CA
UT WOS:000376660500007
DA 2024-07-18
ER

PT J
AU Noureddine, A
   Rouvoy, R
   Seinturier, L
AF Noureddine, Adel
   Rouvoy, Romain
   Seinturier, Lionel
TI Monitoring energy hotspots in software
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Power model; Power monitoring; Energy consumption
AB Green IT has emerged as a discipline concerned with the optimization of software solutions with regards to their energy consumption. In this domain, most of the state-of-the-art solutions concentrate on coarse-grained approaches to monitor the energy consumption of a device or a process. In this paper, we report on a fine-grained runtime energy monitoring framework we developed to help developers to diagnose energy hotspots with a better accuracy. Concretely, our approach adopts a two-layer architecture including OS-level and process-level energy monitoring. OS-level energy monitoring estimates the energy consumption of processes according to different hardware devices (CPU, network card). Process-level energy monitoring focuses on Java-based applications and builds on OS-level energy monitoring to provide an estimation of energy consumption at the granularity of classes and methods. We argue that this per-method analysis of energy consumption provides better insights to the application in order to identify potential energy hotspots. In particular, our preliminary validation demonstrates that we can monitor energy hotspots of Jetty web servers and monitor their variations under stress scenarios.
C1 [Noureddine, Adel; Rouvoy, Romain; Seinturier, Lionel] Univ Lille 1, INRIA Lille, Nord Europe, CNRS,LIFL,UMR 8022, F-59655 Villeneuve Dascq, France.
   [Seinturier, Lionel] Inst Univ France, Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite de
   Lille; Institut Universitaire de France
RP Noureddine, A (corresponding author), Univ Lille 1, INRIA Lille, Nord Europe, CNRS,LIFL,UMR 8022, F-59655 Villeneuve Dascq, France.
EM adel.noureddine@outlook.com; romain.rouvoy@inria.fr;
   lionel.seinturier@inria.fr
RI Seinturier, Lionel/ABG-2829-2020
OI Seinturier, Lionel/0000-0003-0006-6088; Noureddine,
   Adel/0000-0002-8585-574X; Rouvoy, Romain/0000-0003-1771-8791
CR [Anonymous], HOTPOWER 09
   [Anonymous], 2021, TAXING PROFIT GLOBAL
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Feeney LM, 2001, IEEE INFOCOM SER, P1548, DOI 10.1109/INFCOM.2001.916651
   Flinn J, 1999, WMCSA '99, SECOND IEEE WORKSHOP ON MOBILE COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P2, DOI 10.1109/MCSA.1999.749272
   Gite V, 2014, DO I FIND OUT LINUX
   Kansal Aman, 2008, Performance Evaluation Review, V36, P26, DOI 10.1145/1453175.1453180
   Kuleshov E, 2007, AOSD 07
   McIntire D, 2007, PROCEEDINGS OF THE SIXTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P576, DOI 10.1145/1236360.1236448
   Noureddine A., 2012, 2012 First International Workshop on Green and Sustainable Software (GREENS), P21, DOI 10.1109/GREENS.2012.6224251
   Noureddine A., 2014, P 29 ANN ACM S APPL
   Noureddine A, 2012, IEEE INT CONF AUTOM, P160, DOI 10.1145/2351676.2351699
   Pouwelse J., 2000, MMSA 00, P157
   RIVEST RL, 1978, COMMUN ACM, V21, P120, DOI [10.1145/359340.359342, 10.1145/357980.358017]
   Rivoire S., 2007, P 2007 ACM SIGMOD IN, P365, DOI [10.1145/1247480.1247522, DOI 10.1145/1247480.1247522]
   Rühl C, 2012, ENERG POLICY, V50, P109, DOI 10.1016/j.enpol.2012.07.039
   Seo Chiyoung., 2007, Proceedings of the twentysecond IEEE/ACM international conference on Automated software engineering, ASE '07, P421
   Venners B., 1999, INSIDE JAVA VIRTUAL
   Vereecken W., 2010, 4th International Symposium on Communications, Control and Signal Processing (ISCCSP), P1, DOI DOI 10.1109/ISCCSP.2010.5463327
NR 19
TC 21
Z9 26
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2015
VL 22
IS 3
SI SI
BP 291
EP 332
DI 10.1007/s10515-014-0171-1
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CM4JQ
UT WOS:000357651200002
DA 2024-07-18
ER

PT J
AU Paydar, S
   Kahani, M
AF Paydar, Samad
   Kahani, Mohsen
TI A semantic web enabled approach to reuse functional requirements models
   in web engineering
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Web engineering; Semantic web; Annotation; Adaptation; Use case
   similarity; Reuse
ID SOFTWARE REUSE; DRIVEN DEVELOPMENT; UML; RETRIEVAL; PRODUCTIVITY;
   SIMILARITY; EVOLUTION; WORDNET; QUALITY; SYSTEM
AB Web engineering has emerged as a new software discipline to specifically address the challenges and complexities of developing high quality web applications. A main theme in different web engineering methodologies is to employ model driven development approaches. This increases the level of abstraction and formalism to the extent that machines can better involve in the development process and provide more automation, e.g. automatic code generation from the models. Despite their benefits, a main problem of these model-driven methodologies is that developing each new web application implies creating a probably large number of models from scratch. Hence, model reuse can be considered as the main solution to this problem. In this paper, a semantic web enabled approach is proposed for reusing models, specifically functional requirements models. It takes the brief description of the functional requirements of a new web application in terms of UML use case diagram, and semi-automatically generates the draft of the corresponding detailed description in terms of a set of UML activity diagrams. This is performed by utilizing a repository which contains semantic representation of the models of the previous web applications. The proposed approach is based on novel algorithms for annotating activity diagrams, measuring similarity of use cases, and adapting activity diagrams. The experimental evaluations demonstrate that the proposed approach is promising, and it has good precision and effectiveness.
C1 [Paydar, Samad; Kahani, Mohsen] Ferdowsi Univ Mashhad, Dept Comp Engn, Web Technol Lab, Mashhad, Iran.
C3 Ferdowsi University Mashhad
RP Paydar, S (corresponding author), Ferdowsi Univ Mashhad, Dept Comp Engn, Web Technol Lab, Mashhad, Iran.
EM samad.paydar@stu-mail.um.ac.ir; kahani@um.ac.ir
RI ; Kahani, Mohsen/P-6849-2014
OI Paydar, Samad/0000-0002-3370-2151; Kahani, Mohsen/0000-0002-2603-6066
CR Alchimowicz B, 2010, COMPUT INFORM, V29, P27
   Aguilar JA, 2010, J UNIVERS COMPUT SCI, V16, P2475
   Ali FM, 2004, INFORM SOFTWARE TECH, V46, P499, DOI 10.1016/S0950-5849(03)00089-2
   Alnusair Awny, 2010, 2010 IEEE International Conference on Information Reuse & Integration (IRI 2010), P258, DOI 10.1109/IRI.2010.5558931
   Alnusair A., 2012, Recent Trends in Information Reuse and Integration, P363
   Alspaugh TA, 1999, IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P142, DOI 10.1109/ISRE.1999.777994
   Anda B, 2005, EMPIR SOFTW ENG, V10, P285, DOI 10.1007/s10664-005-1289-3
   Anguswamy R., 2012, 6 ACM IEEE INT S EMP
   Anguswamy R., 2012, INT DOCT S EMP SOFTW
   [Anonymous], P ISCA 14 INT C INT
   [Anonymous], 1990, IEEE STANDARD GLOSSA
   [Anonymous], 2007, DAGSTUHL SEMINAR P
   [Anonymous], 1992, Object Oriented Software Engineering: A Use Case Driven Approach
   [Anonymous], 1981, THESIS U CALIFORNIA
   [Anonymous], SOFTWARE RETURN INVE
   [Anonymous], P 3 IRV SOFTW S UC I
   Antoniou G., 2009, Handbook on Ontologies, P91, DOI [DOI 10.1007/978-3-540-92673-3_4, DOI 10.1007/978-3-540-92673-34]
   Arkley P, 2005, 13th IEEE International Conference on Requirements Engineering, Proceedings, P385, DOI 10.1109/RE.2005.49
   Atkinson C, 2003, IEEE SOFTWARE, V20, P36, DOI 10.1109/MS.2003.1231149
   Bagheri E, 2012, AUTOMAT SOFTW ENG, V19, P335, DOI 10.1007/s10515-011-0099-7
   Bajracharya S, 2014, SCI COMPUT PROGRAM, V79, P241, DOI 10.1016/j.scico.2012.04.008
   Barros F, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P236, DOI 10.1109/QUATIC.2010.44
   Bauer Bernhard, 2006, LECT NOTES INFORMATI, V94, P293
   Bendraou R, 2010, IEEE T SOFTWARE ENG, V36, P662, DOI 10.1109/TSE.2009.85
   Berners-Lee T., 2006, Linked Data-Design Issues
   Bildhauer D., 2009, ICSE 09 WORKSH
   Bislimovska B., 2011, 11 INT C WEB ENG ICW
   Bloc M.C., 1998, P 5 AS PAC SOFTW ENG
   Bonilla-Morales B., 2012, International Journal of Computer Science Issues, V9, P24
   Bozzon A, 2010, LECT NOTES COMPUT SC, V6189, P1, DOI 10.1007/978-3-642-13911-6_1
   Calero C., 2006, Ontologies for software engineering and software technology
   CARD D, 1994, IEEE SOFTWARE, V11, P114, DOI 10.1109/52.311078
   Castaneda V., 2012, IMPROVING QUALITY SO
   Castaneda V., 2010, J RESEARCHES ENG, V10, P2
   Catal C., 2009, SIGSOFT Softw. Eng. Notes, V34, P1
   Ceri S, 2000, COMPUT NETW, V33, P137, DOI 10.1016/S1389-1286(00)00040-2
   Cheng BHC, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P285, DOI 10.1109/FOSE.2007.17
   Conallen J., 2002, BUILDING WEB APPL UM
   De Troyer OMF, 1998, COMPUT NETWORKS ISDN, V30, P85, DOI 10.1016/S0169-7552(98)00042-7
   Deissenboeck F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P603, DOI 10.1145/1368088.1368172
   Dobing B, 2006, COMMUN ACM, V49, P109, DOI 10.1145/1125944.1125949
   Durao FA, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1151
   Ebner G, 2002, IEEE SOFTWARE, V19, P70, DOI 10.1109/MS.2002.1003459
   Elias M., 2012, ICISTM 2012 COMMUNIC, V285, P64, DOI DOI 10.1007/978-3-642-29166-1_6
   Escalona MJ, 2008, IEEE T SOFTWARE ENG, V34, P377, DOI 10.1109/TSE.2008.27
   Escalona MJ, 2007, LECT NOTES BUS INF P, V1, P267
   Falessi D, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1978802.1978812
   Frakes W, 1998, ANN SOFTW ENG, V5, P125, DOI 10.1023/A:1018972323770
   Frakes W, 1996, ACM COMPUT SURV, V28, P415, DOI 10.1145/234528.234531
   Frakes WB, 2005, IEEE T SOFTWARE ENG, V31, P529, DOI 10.1109/TSE.2005.85
   FRAKES WB, 1994, IEEE SOFTWARE, V11, P15
   Frakes WB., 1992, Information retrieval: Data structures and algorithms
   GIRSCHICK M, 2006, TUDCS20065
   Gomes P, 2004, AI COMMUN, V17, P13
   Gomes P, 2002, FR ART INT, V77, P245
   Gomes P, 2007, LECT NOTES COMPUT SC, V4626, P449
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Gronmo R, 2011, J OBJECT TECHNOL, V10, DOI 10.5381/jot.2011.10.1.a8
   Hamid A., 2013, THESIS U TEXAS ARLIN
   HAMILTON K, 2006, LEARNING UML 2 0
   HAPPEL H., 2006, INT WORKSHOP SEMANTI, P1
   Hartig O., 2008, 4 INT WORKSH SEM WEB
   Holmes R, 2006, IEEE T SOFTWARE ENG, V32, P952, DOI 10.1109/TSE.2006.117
   Ilieva Magda G., 2008, SEKE 2008. The 20th International Conference Proceedings on Software Engineering & Knowledge Engineering, P478
   Iqbal A., 2009, 21 INT C SOFTW ENG K
   Jacobson A., 2004, Software and System Modeling, V3, P210, DOI [10.1007/s10270-004-0060-3, DOI 10.1007/S10270-004-0060-3]
   Jalender B., 2010, INT J ENG SCI TECHNO, V2, P6136
   KARLSSON EA, 1995, SOFTWARE REUSE HOLIS
   Keivanloo I., 2010, 6 INT WORKSH SEM WEB
   Kelter U., 2005, SOFTWARE ENG, P105
   Klimek R, 2010, COMPUT SCI-AGH, V11, P115
   Kling Wolfgang, 2011, P 4 INT C SOFTW LANG, V6940, P180
   Koch Nora, 2012, Web Engineering. Proceedings 12th International Conference, ICWE 2012, P215, DOI 10.1007/978-3-642-31753-8_16
   Koch N., 2008, Web Engineering: Modelling and Implementing Web Applications, P157, DOI 10.1007/978-1-84628-923-1_7
   Koch N., 2012, 3 WORKSH WEB REQ ENG
   Koch N., 2000, THESIS LUDWIG MAXIMI
   Korner S.J., 2009, SOFTWARE ENG KNOWLED
   Korner S.J., 2008, SOFTWARE ENG KNOWLED
   Lauesen S, 2012, REQUIR ENG, V17, P3, DOI 10.1007/s00766-011-0140-1
   Lemos O.A.L., 2007, P 22 IEEE ACM INT C, P525, DOI 10.1145/1321631.1321726
   Li YH, 2006, IEEE T KNOWL DATA EN, V18, P1138, DOI 10.1109/TKDE.2006.130
   Liang Y, 2003, INFORM SOFTWARE TECH, V45, P83, DOI 10.1016/S0950-5849(02)00164-7
   LIM WC, 1994, IEEE SOFTWARE, V11, P23, DOI 10.1109/52.311048
   Lin D., 1998, Machine Learning. Proceedings of the Fifteenth International Conference (ICML'98), P296
   LUCAS C, 1997, THESIS VRIJE U BRUSS
   Lucrédio D, 2008, LECT NOTES COMPUT SC, V5301, P296, DOI 10.1007/978-3-540-87875-9_22
   Matsumoto A., 2002, P 8 INT S SOFTW METR
   MCILROY MD, 1968, NATO SOFTW ENG C GAR
   McMillan C, 2012, IEEE T SOFTWARE ENG, V38, P1069, DOI 10.1109/TSE.2011.84
   McMillan C, 2012, PROC INT CONF SOFTW, P848, DOI 10.1109/ICSE.2012.6227134
   Mellor SJ, 2003, IEEE SOFTWARE, V20, P14, DOI 10.1109/MS.2003.1231145
   Mellor SJ., 2002, EXECUTABLE UML FDN M
   Mens T, 1999, LECT NOTES COMPUT SC, V1618, P378
   Mili A., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P157, DOI 10.1109/ICSE.2000.870407
   MILI H, 1995, IEEE T SOFTWARE ENG, V21, P528, DOI 10.1109/32.391379
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   Mohagheghi P, 2007, EMPIR SOFTW ENG, V12, P471, DOI 10.1007/s10664-007-9040-x
   Morisio M, 2002, IEEE T SOFTWARE ENG, V28, P340, DOI 10.1109/TSE.2002.995420
   MURUGESAN S, 1999, 1 ICSE WORKSH WEB EN, P1
   MURUGESAN S., 2008, Web Engineering: Modelling and Implementing Web Applications
   Nowick E., 2005, LIB PHILOS PRACT, V7, P1
   Nyulas C., 2009, P 5 INT WORKSH SEM W, P58
   OMG, 2005, MOD DRIV ARCH
   Paige R.F., 2008, ECMDA Traceability Workshop (ECMDA-TW) 2008, Proceedings, P49
   Park W.J., 2010, J INFORM SOFTW TECHN, V53, P230
   Paydar S., 2012, INT C COMP KNOWL ENG
   PORTER MF, 1980, PROGRAM-AUTOM LIBR, V14, P130, DOI 10.1108/eb046814
   Postmus D, 2008, INFORM SOFTWARE TECH, V50, P753, DOI 10.1016/j.infsof.2007.07.009
   PRASAD A, 1994, J SYST SOFTWARE, V27, P207, DOI 10.1016/0164-1212(94)90043-4
   Prieto-Diaz R., 1987, Proceedings of COMPSAC 87. The Eleventh Annual International Computer Software and Applications Conference (Cat. No.87CH2447-1), P23
   Prieto-Diaz R., 1990, SIGSOFT Software Engineering Notes, V15, P47, DOI 10.1145/382296.382703
   Ramesh B, 2001, IEEE T SOFTWARE ENG, V27, P58, DOI 10.1109/32.895989
   Ramesh B., 1993, P 1 INT S REQUIREMEN, P256
   Robinson WN, 2004, IEEE SOFTWARE, V21, P60, DOI 10.1109/MS.2004.1331304
   Robles K, 2012, INFORM SOFTWARE TECH, V54, P72, DOI 10.1016/j.infsof.2011.07.003
   Sabetzadeh M., 2005, Proceedings of the 3rd International Workshop on Traceability in Emerging Forms of Software Engineering. TEFSE'05, P44, DOI DOI 10.1145/1107656.1107667
   Saeki M., 1999, Proceedings Sixth Asia Pacific Software Engineering Conference (ASPEC'99) (Cat. No.PR00509), P309, DOI 10.1109/APSEC.1999.809617
   Salami Hamza Onoruoiza, 2013, International Journal of Soft Computing and Software Engineering, V3, P115, DOI 10.7321/jscse.v3.n3.19
   Salami H.O., 2012, 24 INT C SOFTWARE EN, P737
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   Selonen P., 2007, P NORD WORKSH MOD DR, P37
   Sen A, 1997, IEEE T SOFTWARE ENG, V23, P418, DOI 10.1109/32.605760
   Shahri H.H., 2007, 3 INT WORKSH SEM WEB
   Sherif K, 2003, INFORM MANAGE-AMSTER, V41, P159, DOI 10.1016/S0378-7206(03)00045-4
   Shi B, 2009, 2009 WRI WORLD CONGRESS ON SOFTWARE ENGINEERING, VOL 2, PROCEEDINGS, P109, DOI 10.1109/WCSE.2009.291
   Smialek M, 2010, LECT NOTES COMPUT SC, V5901, P697
   Somé SS, 2003, SERP'03: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH AND PRACTICE, VOLS 1 AND 2, P456
   Spanoudakis G, 2005, HANDBOOK OF SOFTWARE ENGINEERING AND KNOWLEDGE ENGINEERING, VOL 3: RECENT ADVANCES, P395, DOI 10.1142/9789812775245_0014
   Srisura B., 2010, Journal of Theoretical and Applied Information Technology, V19, P68
   Stephan M., 2012, 2011582 QUEENS U SCH
   Steyaert P, 1996, ACM SIGPLAN NOTICES, V31, P268, DOI 10.1145/236338.236363
   Sungwon Kang, 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P431, DOI 10.1109/COMPSAC.2010.51
   Tappolet J, 2010, J WEB SEMANT, V8, P225, DOI 10.1016/j.websem.2010.04.009
   Trakarnviroj A., 2012, P INT MULT ENG COMP
   Treude C., 2007, P EUR SOFTW ENG C FD, P295
   Udomchaiporn A, 2006, ASPEC 2006: 13th Asia-Pacific Software Engineering Conference, Proceedings, P113
   Valderas P, 2011, ACM T WEB, V5, DOI 10.1145/1961659.1961664
   Vilain P., 2000, 1200 MCC DEP INF
   WATKINS R, 1994, IEEE SOFTWARE, V11, P104, DOI 10.1109/52.300100
   Winkler S, 2010, SOFTW SYST MODEL, V9, P529, DOI 10.1007/s10270-009-0145-0
   Woo H.G., 2002, SO ASS INF SYST 2002
   Yamamoto T, 2005, LECT NOTES COMPUT SC, V3547, P530
   Yamamoto T., 2007, Systems and Computers in Japan, V38, P91, DOI 10.1002/scj.10379
   Yao HN, 2008, J AM SOC INF SCI TEC, V59, P613, DOI 10.1002/asi.20775
   Yue T., 2010, 20102015 SIM RES LAB
   Yue T, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430536.2430539
   Yue T, 2011, REQUIR ENG, V16, P75, DOI 10.1007/s00766-010-0111-y
   Yue T, 2010, LECT NOTES COMPUT SC, V6138, P337
   Zhang C, 2012, IEEE T SOFTWARE ENG, V38, P1213, DOI 10.1109/TSE.2011.79
   Zhibiao Wu, 1994, 32nd Annual Meeting of the Association for Computational Linguistics. Proceedings of the Conference, P133
   Zhuge H, 2002, INFORM SOFTWARE TECH, V44, P445, DOI 10.1016/S0950-5849(02)00022-8
   [No title captured]
NR 152
TC 10
Z9 11
U1 0
U2 24
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2015
VL 22
IS 2
SI SI
BP 241
EP 288
DI 10.1007/s10515-014-0144-4
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE0EI
UT WOS:000351476900005
DA 2024-07-18
ER

PT J
AU Dayarathna, M
   Suzumura, T
AF Dayarathna, Miyuru
   Suzumura, Toyotaro
TI Graph database benchmarking on cloud environments with XGDBench
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Cloud databases; Graph database systems; Benchmark testing; Network
   theory; System performance; Performance analysis
ID PERFORMANCE
AB Online graph database service providers have started migrating their operations to public clouds due to the increasing demand for low-cost, ubiquitous graph data storage and analysis. However, there is little support available for benchmarking graph database systems in cloud environments. We describe XGDBench which is a graph database benchmarking platform for cloud computing systems. XGDBench has been designed with the aim of creating an extensible platform for graph database benchmarking which makes it suitable for benchmarking future HPC systems. We extend the Yahoo! Cloud Serving Benchmark (YCSB) to the area of graph database benchmarking by creation of XGDBench. The benchmarking platform is written in X10 which is a PGAS language intended for programming future HPC systems. We describe the architecture of the XGDBench and explain how it differs from the current state-of-the-art. We conduct performance evaluation of five famous graph data stores AllegroGraph, Fuseki, Neo4j, OrientDB, and Titan using XGDBench on Tsubame 2.0 HPC cloud environment.
C1 [Dayarathna, Miyuru] Tokyo Inst Technol, Dept Comp Sci, Meguro Ku, Tokyo 1528552, Japan.
   [Suzumura, Toyotaro] Tokyo Inst Technol IBM Res Tokyo, Dept Comp Sci, Meguro Ku, Tokyo 1528552, Japan.
C3 Tokyo Institute of Technology
RP Dayarathna, M (corresponding author), Tokyo Inst Technol, Dept Comp Sci, Meguro Ku, 2-12-1 Ookayama, Tokyo 1528552, Japan.
EM dayarathna.m.aa@m.titech.ac.jp; suzumura@cs.titech.ac.jp
FU Japan Science and Technology Agency's CREST project titled "Development
   of System Software Technologies for post-Peta Scale High Performance
   Computing"
FX This research was supported by the Japan Science and Technology Agency's
   CREST project titled "Development of System Software Technologies for
   post-Peta Scale High Performance Computing".
CR Angles R., 2012, Proceedings of the 2012 IEEE International Conference on Data Engineering Workshops (ICDEW 2012), P171, DOI 10.1109/ICDEW.2012.31
   [Anonymous], P 48 ANN SE REG C AC
   [Anonymous], R MAT RECURSIVE MODE
   [Anonymous], 2013, ALL RDF STOR WEB 3 0
   [Anonymous], 2013, CASS
   [Anonymous], 2013, RDF PRIMER
   [Anonymous], 2012, CLOUDGRAPH NET GRAPH
   [Anonymous], 2012, NEO4J HER ADD ON
   Apache, 2012, FUS SERV RDF DAT HTT
   Aurelius, 2013, REXPR
   Aurelius, 2012, TIT DISTR GRAPH DAT
   Aurelius, 2012, REXST
   Bader DavidA., 2009, Hpc scalable graph analysis benchmark v1.0
   Bizer C, 2009, INT J SEMANT WEB INF, V5, P1, DOI 10.4018/jswis.2009081901
   Chakrabarti D, 2010, ADV DATABASE SYST, V40, P69, DOI 10.1007/978-1-4419-6045-0_3
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Ciglan M., 2012, Proceedings of the 2012 IEEE International Conference on Data Engineering Workshops (ICDEW 2012), P186, DOI 10.1109/ICDEW.2012.47
   Cooper Brian F., 2010, P 1 ACM S CLOUD COMP, P143, DOI [DOI 10.1145/1807128.1807152, 10.1145/1807128.1807152]
   Cudre-Mauroux P, 2011, PROC VLDB ENDOW, V4, P1510
   Dayarathna M., 2012, 2012 IEEE 4th International Conference on Cloud Computing Technology and Science (CloudCom). Proceedings, P363, DOI 10.1109/CloudCom.2012.6427516
   Dominguez-Sal D, 2010, LECT NOTES COMPUT SC, V6185, P37, DOI 10.1007/978-3-642-16720-1_4
   Dominguez-Sal D, 2011, LECT NOTES COMPUT SC, V6417, P25, DOI 10.1007/978-3-642-18206-8_3
   Dongarra J, 2011, INT J HIGH PERFORM C, V25, P3, DOI 10.1177/1094342010391989
   Dudley JT, 2010, GENOME MED, V2, DOI 10.1186/gm172
   Dydra, 2012, DYDR NETW MAD FRIEND
   Ekins S, 2010, PHARM RES-DORDR, V27, P2035, DOI 10.1007/s11095-010-0229-0
   Faloutsos M, 1999, COMP COMM R, V29, P251, DOI 10.1145/316194.316229
   Guo YB, 2005, J WEB SEMANT, V3, P158, DOI 10.1016/j.websem.2005.06.005
   Holzschuher F., 2013, P JOINT EDBT ICDT 20, P195, DOI DOI 10.1145/2457317.2457351
   Huppler K, 2009, LECT NOTES COMPUT SC, V5895, P18, DOI 10.1007/978-3-642-10424-4_3
   IBM, 2012, X10 PERF PROD SCAL
   Kamada K, 2010, IEEE NUCL SCI CONF R, P1, DOI 10.1109/NSSMIC.2010.5873706
   Kim M, 2012, INTERNET MATH, V8, P113, DOI 10.1080/15427951.2012.625257
   Leskovec J, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1361
   Ma L, 2006, LECT NOTES COMPUT SC, V4011, P125
   Morsey M, 2011, LECT NOTES COMPUT SC, V7031, P454, DOI 10.1007/978-3-642-25073-6_29
   Murphy R, 2006, I S WORKL CHAR PROC, P175
   Nambiar R, 2011, LECT NOTES COMPUT SC, V6417, P1, DOI 10.1007/978-3-642-18206-8_1
   Newmann M.E. J., 2010, Networks : An Introduction
   NuvolaBase, 2012, NUVOLABASE CLOUD YOU
   Partner J., 2012, NEO4J ACTION
   Robinson I., 2013, Graph databases
   Rohloff K, 2007, LECT NOTES COMPUT SC, V4806, P1105
   Sakr S., 2012, 2012 IEEE 5th International Conference on Cloud Computing (CLOUD), P360, DOI 10.1109/CLOUD.2012.11
   Sarwat M, 2012, PROC INT CONF DATA, P1289, DOI 10.1109/ICDE.2012.129
   Schmidt Michael., 2008, CoRR
   Shannon P, 2003, GENOME RES, V13, P2498, DOI 10.1101/gr.1239303
   Shao B., 2012, Proceedings of the 2012 ACM SIGMOD International Conference on Management of Data, P589
   Thakker D, 2010, LECT NOTES COMPUT SC, V6088, P379, DOI 10.1007/978-3-642-13486-9_26
   The Apache Software Foundation, 2013, SHIND WELC AP SHIND
   Versaci F, 2012, LECT NOTES COMPUT SC, V7333, P1, DOI 10.1007/978-3-642-31125-3_1
   Wang Jianyong, 2009, ENCY DATABASE SYSTEM, P2621
   Zhao Z, 2011, P 13 INT C INF INT W, P420
NR 53
TC 10
Z9 11
U1 0
U2 23
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2014
VL 21
IS 4
SI SI
BP 509
EP 533
DI 10.1007/s10515-013-0138-7
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AQ9UD
UT WOS:000343201000005
DA 2024-07-18
ER

PT J
AU Maciel, RSP
   Gomes, RA
   Magalhaes, AP
   Silva, BC
   Queiroz, JPB
AF Pitangueira Maciel, Rita Suzana
   Gomes, Ramon Araujo
   Magalhaes, Ana Patricia
   Silva, Bruno C.
   Queiroz, Joao Pedro B.
TI Supporting model-driven development using a process-centered software
   engineering environment
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software process; Model-driven development; Process centered software
   engineering
AB The adoption of Model-Driven Development (MDD) is increasing and it is widely recognized as an important approach for building software systems. In addition to traditional development process models, an MDD process requires the selection of metamodels and mapping rules for the generation of the transformation chain which produces models and application code. In this context, software process tasks should be performed in a specific sequence, with the correct input artifacts to produce the output ones. However, existing support tools and transformation engines for MDD do not have a process-centered focus that addresses different kinds of software process activities, such as application modeling and testing to guide the developers. Furthermore, they do not enable process modeling nor the (semi) automated execution of activities during process enactment. The MoDErNE (Model Driven Process-Centered Software Engineering Environment) uses process-centered software engineering environment concepts to improve MDD process specification and enactment by using a metamodeling foundation. In MoDErNE, a software process model may be enacted several times in different software projects. This paper details the MoDErNE environment, its approach and architecture and also the case studies through which the tool was evaluated.
C1 [Pitangueira Maciel, Rita Suzana; Gomes, Ramon Araujo; Magalhaes, Ana Patricia; Silva, Bruno C.; Queiroz, Joao Pedro B.] Univ Fed Bahia, Dept Comp Sci, Salvador, BA, Brazil.
C3 Universidade Federal da Bahia
RP Maciel, RSP (corresponding author), Univ Fed Bahia, Dept Comp Sci, Salvador, BA, Brazil.
EM ritasuzana@dcc.ufba.br; ramon@dcc.ufba.br; anapfmm@dcc.ufba.br;
   brunocs@dcc.ufba.br; jpqueiroz@dcc.ufba.br
RI Maciel, Rita Suzana Pitangueira/AAA-5111-2022
OI Maciel, Rita Suzana Pitangueira/0000-0003-3159-6065
FU FAPESB [5156/2008, PES0091/2008]
FX This work is partially funded by FAPESB, project number 5156/2008, and
   grant number PES0091/2008.
CR Ambriola V., 1997, ACM Transactions on Software Engineering and Methodology, V6, P283, DOI 10.1145/258077.258080
   [Anonymous], 2008, A Guide to the Project Management Body of Knowledge (PMBOK Guide), V4th
   [Anonymous], 2008, OMG
   [Anonymous], 14 INT C COMP SUPP C
   [Anonymous], 2011, SEKE
   Arbaoui S, 2002, ANN SOFTW ENG, V14, P311, DOI 10.1023/A:1020513911052
   Atkinson C., 2001, ENT DISTR OBJ COMP C
   Baker P., 2007, Model Driven Testing - Using the UML Testing Profile, VFirst
   Balzer R, 2001, PROC INT CONF SOFTW, P671
   Bouquet F., 2008, PROC INT C SOFTWARE, P45
   CASS AG, 2000, P 22 INT C SOFTW ENG
   Chen M., 2006, P 2006 INT WORKSH AU, P2
   da Silva B.C., 2009, 23 BRAZ S SOFTW ENG
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   Gomes R., 2011, P CBSOFT 2011 2 BRAZ
   Gruhn V, 2002, ANN SOFTW ENG, V14, P363, DOI 10.1023/A:1020522111961
   Guelfi N., 2003, OOPSLA WORKSH BEST P
   Hartmann J., 2004, UML BASED TEST GENER
   Humprey W., 1989, CMUSEI89TR2
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P633, DOI 10.1145/1985793.1985882
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   IEEE, 2008, 8292008 IEEE COMP SO
   Javed A. Z., 2007, P ICSE 2 INT WORKSH
   Koch N, 2006, WORKSH P 6 INT C WEB, V155
   Lima A., 2006, 20 BRAZ S SOFTW ENG
   Maciel Rita Suzana P., 2011, IADIS International Conference of Applied Computing 2011. Proceedings, P51
   Maciel Rita Suzana Pitangueira, 2009, Proceedings of the 2009 23rd Brazilian Symposium on Software Engineering. SBES 2009, P104, DOI 10.1109/SBES.2009.18
   Maciel RSP, 2006, JOINT MEETING OF THE FOURTH WORKSHOP ON MODEL-BASED DEVELOPMENT OF COMPUTER-BASED SYSTEMS AND THIRD INTERNATIONAL WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, PROCEEDINGS, P135
   Maciel RSP, 2005, INT C COMP SUPP COOP, P289, DOI 10.1109/CSCWD.2005.194185
   Magalhaes A. P., 2011, Proceedings of the 2011 Fifth Brazilian Symposium on Software Components, Architectures and Reuse (SBCARS 2011), P21, DOI 10.1109/SBCARS.2011.15
   Matinnejad R, 2012, 2012 IEEE 19TH INTERNATIONAL CONFERENCE AND WORKSHOPS ON ENGINEERING OF COMPUTER BASED SYSTEMS (ECBS), P64, DOI 10.1109/ECBS.2012.11
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   Montoni M, 2006, LECT NOTES COMPUT SC, V4034, P249
   Mussa M, 2009, INT CONF QUAL SOFTW, P167, DOI 10.1109/QSIC.2009.30
   Object Management Group (OMG), 2005, UML 2 0 TEST PROF FI
   OMG, 2003, MDA GUID VERS 1 0 1
   Wang H, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P684, DOI 10.1109/CMPSAC.2003.1245417
   Weber S., 2009, P SOFTEAM 09
   Yuan QL, 2008, IEEE INTL SYMPOS WEB, P41, DOI 10.1109/WSE.2008.4655394
   Zamli K. Z., 2005, Malaysian Journal of Computer Science, V18, P57
NR 40
TC 6
Z9 7
U1 0
U2 12
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2013
VL 20
IS 3
SI SI
BP 427
EP 461
DI 10.1007/s10515-013-0124-0
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 155QP
UT WOS:000319763400005
DA 2024-07-18
ER

PT J
AU Liu, H
   Niu, ZD
   Ma, ZY
   Shao, WZ
AF Liu, Hui
   Niu, Zhendong
   Ma, Zhiyi
   Shao, Weizhong
TI Identification of generalization refactoring opportunities
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software quality; Software refactoring; Generalization refactoring;
   Opportunity identification; Tool support; Software maintenance
ID CODE; SMELLS
AB Generalization refactoring helps relate classes and share functions, including both interfaces and implementation, by inheritance. To apply generalization refactoring, developers should first identify potential generalization refactoring opportunities, i.e., software entities that might benefit from generalization refactoring. For non-trivial software systems, manual identification of these opportunities is challenging and time-consuming. However, to the best of our knowledge, no existing tools have been specifically designed for this task. As a result, people have to identify these opportunities manually or with the help of tools designed for other purposes, e.g., clone detectors. To this end, we propose a tool GenReferee (Generalization Referee) to identify potential refactoring opportunities according to conceptual relationship, implementation similarity, structural correspondence, and inheritance hierarchies. It was first calibrated on two non-trivial open source applications, and then evaluated on another three. Evaluation results suggest that the proposed approach is effective and efficient.
C1 [Liu, Hui; Niu, Zhendong] Beijing Inst Technol, Sch Comp Sci & Technol, Beijing 100081, Peoples R China.
   [Ma, Zhiyi; Shao, Weizhong] Peking Univ, Key Lab High Confidence Software Technol, Minist Educ, Beijing 100871, Peoples R China.
C3 Beijing Institute of Technology; Peking University
RP Liu, H (corresponding author), Beijing Inst Technol, Sch Comp Sci & Technol, Beijing 100081, Peoples R China.
EM liuhui08@bit.edu.cn; zniu@bit.edu.cn; mzy@sei.pku.edu.cn;
   wzshao@pku.edu.cn
RI niu, zhendong/KIJ-1559-2024
OI Niu, Zhendong/0000-0002-0576-7572
FU National Natural Science Foundation of China [61003065]; Specialized
   Research Fund for the Doctoral Program of Higher Education
   [20101101120027]; Beijing Institute of Technology [2010Y0711]; National
   Basic Research Program of China [2011CB302604]; Beijing Municipal
   Natural Science Foundation [4122036]
FX The authors from Beijing Institute of Technology are sponsored by the
   National Natural Science Foundation of China (No. 61003065), Specialized
   Research Fund for the Doctoral Program of Higher Education (No.
   20101101120027), and Excellent Young Scholars Research Fund of Beijing
   Institute of Technology (No. 2010Y0711). The authors from Peking
   University are sponsored by the National Basic Research Program of China
   (No. 2011CB302604), and Beijing Municipal Natural Science Foundation
   (No. 4122036).
CR Adnan Rahmat, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P383, DOI 10.1109/ASE.2008.54
   [Anonymous], 1976, 41 BELL LAB
   [Anonymous], 2006, P 2006 INT WORKSH MI, DOI DOI 10.1145/1137983.1137999
   BAKER BS, 1992, COMPUTING SCIENCE AND STATISTICS : VOL 24, P49
   Bavota G, 2011, J SYST SOFTWARE, V84, P397, DOI 10.1016/j.jss.2010.11.918
   Bavota Gabriele., 2010, Proceedings of the IEEE International Conference on Software Maintenance ICSM, P1
   Cottrell Rylan., 2007, P JOINT M EUROPEAN S, P165
   Demeyer S, 2000, ACM SIGPLAN NOTICES, V35, P166, DOI 10.1145/354222.353183
   Dig D, 2006, LECT NOTES COMPUT SC, V4067, P404
   Enslen E, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P71, DOI 10.1109/MSR.2009.5069482
   FEILD H, 2006, P IASTED INT C SOFTW
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Godfrey MW, 2005, IEEE T SOFTWARE ENG, V31, P166, DOI 10.1109/TSE.2005.28
   Guerrouj L, 2013, J SOFTW-EVOL PROC, V25, P575, DOI 10.1002/smr.539
   Higo Y, 2002, LECT NOTES COMPUT SC, V2559, P185
   Higo Y., 2005, ACM SIGSOFT Softw. Eng. Notes, V30, P1
   HIGO Y, 2004, P 8 IASTED INT C SOF, P222
   Holmes R, 2006, IEEE T SOFTWARE ENG, V32, P952, DOI 10.1109/TSE.2006.117
   Hunt JJ, 2002, PROC IEEE INT CONF S, P511, DOI 10.1109/ICSM.2002.1167812
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kegel H, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P431, DOI 10.1145/1368088.1368147
   Kim M, 2007, PROC INT CONF SOFTW, P333
   Kim M, 2009, PROC INT CONF SOFTW, P309, DOI 10.1109/ICSE.2009.5070531
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Laski J., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P282, DOI 10.1109/ICSM.1992.242533
   Madani N, 2010, EUR CON SFTWR MTNCE, P68, DOI 10.1109/CSMR.2010.31
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Moha N, 2006, IEEE INT CONF AUTOM, P297
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Moore I., 1995, Technology of Object-Oriented Languages and Systems TOOLS 17. Proceedings of the Seventeenth International Conference, P267
   Munro MatthewJames., 2005, Software Metrics, P15, DOI 10.1109/metrics.2005.38
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Revelle M, 2011, EMPIR SOFTW ENG, V16, P773, DOI 10.1007/s10664-011-9159-7
   Sager T., 2006, P 2006 INT WORKSHOP, P65, DOI DOI 10.1145/1137983.1138000
   Snelting G., 1998, Software Engineering Notes, V23, P99, DOI 10.1145/291252.288273
   Steimann F, 2007, J OBJECT TECHNOL, V6, P99, DOI 10.5381/jot.2007.6.2.a5
   Streckenbach M, 2004, ACM SIGPLAN NOTICES, V39, P315, DOI 10.1145/1035292.1029003
   Tip F, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/949343.949308
   Tourwé T, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P91, DOI 10.1109/CSMR.2003.1192416
   Travassos GH, 1999, ACM SIGPLAN NOTICES, V34, P47, DOI 10.1145/320385.320389
   Tsantalis N, 2011, J SYST SOFTWARE, V84, P1757, DOI 10.1016/j.jss.2011.05.016
   Tsantalis N, 2010, J SYST SOFTWARE, V83, P391, DOI 10.1016/j.jss.2009.09.017
   Tsantalis N, 2009, IEEE T SOFTWARE ENG, V35, P347, DOI 10.1109/TSE.2009.1
   Van Rompaey B, 2007, IEEE T SOFTWARE ENG, V33, P800, DOI 10.1109/TSE.2007.70745
   Wake W.C., 2003, Refactoring Workbook, V1st
   Wang Z., 2000, J. Instr. Level Parallelism, V2, P1
   WUU Y, 1991, SOFTWARE PRACT EXPER, V21, P739, DOI 10.1002/spe.4380210706
   Xing Z., 2005, 20 IEEEACM INT C AUT, P54, DOI DOI 10.1145/1101908.1101919
   Yang LM, 2009, ASIA PAC SOFWR ENG, P43, DOI 10.1109/APSEC.2009.20
   Zhang M, 2011, J SOFTW MAINT EVOL-R, V23, P179, DOI 10.1002/smr.521
   Zimmermann T, 2005, IEEE T SOFTWARE ENG, V31, P429, DOI 10.1109/TSE.2005.72
NR 51
TC 9
Z9 12
U1 0
U2 21
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2013
VL 20
IS 1
BP 81
EP 110
DI 10.1007/s10515-012-0100-0
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 059MN
UT WOS:000312709700004
DA 2024-07-18
ER

PT J
AU Zhong, H
   Zhang, L
   Xie, T
   Mei, H
AF Zhong, Hao
   Zhang, Lu
   Xie, Tao
   Mei, Hong
TI Inferring specifications for resources from natural language API
   documentation
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Inferring specifications; API documentation
ID SOURCE CODE
AB Many software libraries, especially those commercial ones, provide API documentation in natural languages to describe correct API usages. However, developers may still write code that is inconsistent with API documentation, partially because many developers are reluctant to carefully read API documentation as shown by existing research. As these inconsistencies may indicate defects, researchers have proposed various detection approaches, and these approaches need many known specifications. As it is tedious to write specifications manually for all APIs, various approaches have been proposed to mine specifications automatically. In the literature, most existing mining approaches rely on analyzing client code, so these mining approaches would fail to mine specifications when client code is not sufficient. Instead of analyzing client code, we propose an approach, called Doc2Spec, that infers resource specifications from API documentation in natural languages. We evaluated our approach on the Javadocs of five libraries. The results show that our approach performs well on real scale libraries, and infers various specifications with relatively high precisions, recalls, and F-scores. We further used inferred specifications to detect defects in open source projects. The results show that specifications inferred by Doc2Spec are useful to detect real defects in existing projects.
C1 [Zhong, Hao] Chinese Acad Sci, Inst Software, Lab Internet Software Technol, Beijing, Peoples R China.
   [Zhang, Lu; Mei, Hong] Peking Univ, Sch Elect Engn & Comp Sci, Beijing 100871, Peoples R China.
   [Zhang, Lu; Mei, Hong] Peking Univ, Minist Educ, Key Lab High Confidence Software Technol, Beijing 100871, Peoples R China.
   [Xie, Tao] N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA.
C3 Chinese Academy of Sciences; Institute of Software, CAS; Peking
   University; Peking University; North Carolina State University
RP Zhong, H (corresponding author), Chinese Acad Sci, Inst Software, Lab Internet Software Technol, Beijing, Peoples R China.
EM zhonghao@itechs.iscas.ac.cn; zhanglu@sei.pku.edu.cn; xie@csc.ncsu.edu;
   meih@sei.pku.edu.cn
RI Zhong, Hao/B-2435-2015
OI Zhong, Hao/0000-0002-4302-9183
FU National Basic Research Program of China (973) [2007CB310802];
   Development Plan of China (863) [2007AA010303]; National Natural Science
   Foundation of China [60803023, 60873072, 90718042]; CAS; 973 Program of
   China [2009CB320703]; 863 Program of China [2007AA010301]; Science Fund
   for Creative Research Groups of China [60821003]; NSF [CNS-0716579,
   CCF-0725190, CCF-0845272, CCF-0915400, CNS-0958235]; NCSU CACC; ARO
   [W911NF-08-1-0443, W911NF-08-1-0105]; IBM
FX We appreciate editors and anonymous reviewers for their supportive and
   constructive comments. Hao Zhong's work is supported in part by the
   National Basic Research Program of China (973) No. 2007CB310802, the
   Development Plan of China (863) No. 2007AA010303, the National Natural
   Science Foundation of China No. 60803023, 60873072, and 90718042, and
   the CAS Innovation Program. The authors from Peking University are
   supported by the 973 Program of China No. 2009CB320703, the 863 Program
   of China No. 2007AA010301, and the Science Fund for Creative Research
   Groups of China No. 60821003. Tao Xie's work is supported in part by NSF
   grants CNS-0716579, CCF-0725190, CCF-0845272, CCF-0915400, CNS-0958235,
   an NCSU CACC grant, ARO grant W911NF-08-1-0443, ARO grant
   W911NF-08-1-0105 managed by NCSU SOSI, and an IBM Faculty Award.
CR Acharya M, 2009, LECT NOTES COMPUT SC, V5503, P370
   Acharya Mithun, 2007, P 6 JOINT M EUROPEAN, P25, DOI [DOI 10.1145/1287624.1287630, 10.1145/1287624.1287630]
   Alur R, 2005, ACM SIGPLAN NOTICES, V40, P98, DOI 10.1145/1047659.1040314
   Ambriola V, 1997, AUTOMATED SOFTWARE ENGINEERING, 12TH IEEE INTERNATIONAL CONFERENCE, PROCEEDINGS, P36, DOI 10.1109/ASE.1997.632822
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], P 40 ANN M ASS COMP
   [Anonymous], P 33 INT C SOFTW ENG
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Arnout K, 2003, COMPUTER, V36, P48, DOI 10.1109/MC.2003.1244535
   BAUM LE, 1970, ANN MATH STAT, V41, P164, DOI 10.1214/aoms/1177697196
   Buse R.P., 2008, Proceedings of the 2008 International Symposium on Software Testing and Analysis, ISSTA '08, P273
   Buse Raymond P. L., 2010, P 25 IEEE ACM INT C, P33, DOI DOI 10.1145/1858996.1859005
   CHINCHOR N, 1997, P 7 MUC
   Cohen W. W., 2004, P 10 ACM SIGKDD INT, P89, DOI DOI 10.1145/1014052.1014065
   DAG J, 2005, IEEE SOFTWARE, V3, P3
   Dagenais B., 2008, P 2008 SIGPLAN INT C, P313, DOI [10.1145/1449764.1449790, DOI 10.1145/1449764.1449790]
   Dekel U, 2009, INT C PROGRAM COMPRE, P168, DOI 10.1109/ICPC.2009.5090040
   Dekel U, 2009, PROC INT CONF SOFTW, P320, DOI 10.1109/ICSE.2009.5070532
   Engler Dawson R., 2001, Proceedings of the 18th ACM Symposium on Operating Systems Principles, P57
   Fantechi A., 2003, Requirements Engineering, V8, P161, DOI 10.1007/s00766-003-0174-0
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI DOI 10.7551/MITPRESS/7287.001.0001
   Fry ZP, 2008, IET SOFTW, V2, P27, DOI 10.1049/iet-sen:20070112
   GABEL M, 2010, P 32 ACM IEEE INT C, P15
   Gabel M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P51, DOI 10.1145/1368088.1368096
   Gegick Michael, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P11, DOI 10.1109/MSR.2010.5463340
   Gervasi V, 2005, ACM T SOFTW ENG METH, V14, P277, DOI 10.1145/1072997.1072999
   Goldin L., 1997, Automated Software Engineering, V4, P375, DOI 10.1023/A:1008617922496
   GOWRI M, 2005, P 20 OOPSLA, P77
   Hayes JH, 2006, IEEE T SOFTWARE ENG, V32, P4, DOI 10.1109/TSE.2006.3
   Henkel J, 2004, PROC INT CONF SOFTW, P449, DOI 10.1109/ICSE.2004.1317467
   HIRSCHMAN L, 1997, P 7 MUC
   Horie M., 2010, P 9 INT C ASP OR SOF, P97
   Host EW, 2009, LECT NOTES COMPUT SC, V5653, P294, DOI 10.1007/978-3-642-03013-0_14
   Igarashi A, 2005, ACM T PROGR LANG SYS, V27, P264, DOI 10.1145/1057387.1057390
   Jeong G., 2009, Proceedings of the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering. ESEC/FSE'09, P111, DOI DOI 10.1145/1595696.1595715
   Kof L, 2007, INT REQUIR ENG CONF, P121, DOI 10.1109/RE.2007.38
   KREMENEK T, 2006, P 7 OSDI, P259
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   LIVSHITS V, 2005, P ESEC FSE, P31
   Lo D., 2006, SIGSOFT FSE, P265
   Lo David., 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, ASE '10, P387
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Meziane F, 2008, REQUIR ENG, V13, P1, DOI [10.1007/s00766-007-0054-0, 10.1007/S00766-007-0054-0]
   Mikheev A, 1999, NINTH CONFERENCE OF THE EUROPEAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS, P1
   Novick David G., 2006, P 24 ANN ACM INT C D, P11, DOI DOI 10.1145/1166324.1166329
   Olson D.L., 2008, ADV DATA MINING TECH, DOI https://doi.org/10.1007/978-3-540-76917-0
   Padioleau Y, 2009, PROC INT CONF SOFTW, P331, DOI 10.1109/ICSE.2009.5070533
   PERRY E, 2002, ORACLE 9I JDBC DEV G
   RAMAN A, 1997, P MACH LEARN WORKSH
   Ramanathan MK, 2007, PROC INT CONF SOFTW, P240
   Rivest R. L., 1993, Machine learning: from theory to applications. Cooperative research at Siemens and MIT, P51
   Robillard MP, 2011, EMPIR SOFTW ENG, V16, P703, DOI 10.1007/s10664-010-9150-8
   Runeson P, 2007, PROC INT CONF SOFTW, P499
   Sawyer P, 2002, INFORM SYST FRONT, V4, P343, DOI 10.1023/A:1019918908208
   Shepherd D., 2007, P 6 INT C ASP OR SOF, P212, DOI 10.1145/1218563.1218587
   SHI L, 2011, P FASE, P416
   SRIDHARA G, 2010, P IEEE ACM INT C AUT, P43, DOI DOI 10.1145/1858996.1859006
   STYLOS J, 2009, P IVL HCC, P119
   Tan Lin., 2007, P 21 ACM SIGOPS S OP, P145, DOI DOI 10.1145/1294261.1294276
   Thummalapenta S., 2008, P 23 IEEE ACM INT C, P327
   Thummalapenta S, 2009, IEEE INT CONF AUTOM, P283, DOI 10.1109/ASE.2009.72
   Thummalapenta S, 2009, PROC INT CONF SOFTW, P496, DOI 10.1109/ICSE.2009.5070548
   Vasudevan P, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P289, DOI 10.1109/SERA.2006.25
   VITERBI AJ, 1967, IEEE T INFORM THEORY, V13, P260, DOI 10.1109/TIT.1967.1054010
   Wang XY, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P461, DOI 10.1145/1368088.1368151
   Wasylkowski Andrzej, 2007, P 6 JOINT M EUROPEAN, P35, DOI [10.1145/1287624.1287632, DOI 10.1145/1287624.1287632]
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   Whaley J., 2002, Software Engineering Notes, V27, P221, DOI 10.1145/566171.566212
   Williams CC, 2005, IEEE T SOFTWARE ENG, V31, P466, DOI 10.1109/TSE.2005.63
   WURSCH M, 2010, P 32 ICSE, P165, DOI DOI 10.1145/1806799.1806827
   Xu GQ, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P151, DOI 10.1145/1368088.1368110
   Zhong H, 2009, IEEE INT CONF AUTOM, P307, DOI 10.1109/ASE.2009.94
   Zhong H, 2009, LECT NOTES COMPUT SC, V5653, P318, DOI 10.1007/978-3-642-03013-0_15
   Zhong H, 2008, ASIA PAC SOFWR ENG, P9, DOI 10.1109/APSEC.2008.53
NR 74
TC 10
Z9 16
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2011
VL 18
IS 3-4
SI SI
BP 227
EP 261
DI 10.1007/s10515-011-0082-3
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 789YV
UT WOS:000292556500002
DA 2024-07-18
ER

PT J
AU Mahbub, K
   Spanoudakis, G
   Zisman, A
AF Mahbub, K.
   Spanoudakis, G.
   Zisman, A.
TI A monitoring approach for runtime service discovery
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Runtime service discovery; Proactive discovery; Service monitoring;
   Query
AB Effective runtime service discovery requires identification of services based on different service characteristics such as structural, behavioural, quality, and contextual characteristics. However, current service registries guarantee services described in terms of structural and sometimes quality characteristics and, therefore, it is not always possible to assume that services in them will have all the characteristics required for effective service discovery. In this paper, we describe a monitor-based runtime service discovery framework called MoRSeD. The framework supports service discovery in both push and pull modes of query execution. The push mode of query execution is performed in parallel to the execution of a service-based system, in a proactive way. Both types of queries are specified in a query language called SerDiQueL that allows the representation of structural, behavioral, quality, and contextual conditions of services to be identified. The framework uses a monitor component to verify if behavioral and contextual conditions in the queries can be satisfied by services, based on translations of these conditions into properties represented in event calculus, and verification of the satisfiability of these properties against services. The monitor is also used to support identification that services participating in a service-based system are unavailable, and identification of changes in the behavioral and contextual characteristics of the services. A prototype implementation of the framework has been developed. The framework has been evaluated in terms of comparison of its performance when using and when not using the monitor component.
C1 [Mahbub, K.; Spanoudakis, G.; Zisman, A.] City Univ London, Sch Informat, London EC1V 0HB, England.
C3 City University London
RP Mahbub, K (corresponding author), City Univ London, Sch Informat, London EC1V 0HB, England.
EM k.mahbub@soi.city.ac.uk; g.spanoudakis@soi.city.ac.uk;
   a.zisman@soi.city.ac.uk
FU European Community [FP7/2007-2013, 215483]
FX The research leading to these results has received funding from the
   European Community's Seventh Framework Programme [FP7/2007-2013] under
   Grant Agreement 215483 (S-Cube).
CR AGGARWAL R, 2004, INT C SERV COMP
   ANAGNOSTOPOULOS C, 2004, MOB ECONFERENCE
   [Anonymous], TEST ANAL WEB SERVIC
   [Anonymous], 2001, WSDL
   [Anonymous], 2006, Business Process Execution Language for Web Services BPEL and BPEL4WS
   [Anonymous], 2 INT WORKSH SEM WEB
   [Anonymous], P HAW INT C SYST SCI
   ARABSHIAN K, 2007, ACM IFIP USENIX 8 IN
   Arabshian K., 2007, Journal of Ubiquitous Computing and Intelligence, V1, P133
   ARABSHIAN K, 2007, CUCS03307
   Ardagna D, 2007, IEEE T SOFTWARE ENG, V33, P369, DOI 10.1109/TSE.2007.1011.
   Baldauf M, 2007, INT J AD HOC UBIQ CO, V2, P263, DOI 10.1504/IJAHUC.2007.014070
   Bardram J. E., 2005, LECT NOTES COMPUTER
   BARESI L, 2005, 3 INT C SERV OR COMP
   Baresi L, 2007, SERV ORIENTED COMPUT, V1, P75, DOI 10.1007/s11761-007-0004-1
   Beeri C., 2006, VLDB
   BETTINI C, 2007, WORLD WIDE WEB J WWW
   Bettini C., 2005, SDM
   BIANCULLI D, 2007, IWSOSWE 07
   Blake MB, 2007, DISTRIB PARALLEL DAT, V21, P39, DOI 10.1007/s10619-006-7001-9
   BORMANN F, 2005, 14 IST MOB WIR COMM
   BRATSKAS P, 2007, 16 INT C INF SYST DE
   BRAUN I, 2008, P WWW INT
   Capra L, 2003, IEEE T SOFTWARE ENG, V29, P929, DOI 10.1109/TSE.2003.1237173
   CASATI F, 2000, HPL200039 SOFTW TECH
   Chen F., 2003, RUNTIME VERIFICATION, P108, DOI DOI 10.1016/S1571-0661
   CHOONHWA L, 2003, S APP INT
   CORDELLA LP, 2001, 3 IAPR TC15 WORK GRA
   CUDDY S, 2005, IEEE INT C WIR MOB C
   Dingwall-Smith A., 2002, P 1 INT C ASP OR SOF
   Dranidis D., 2009, P 7 IEEE EUR C WEB S
   DRANIDIS D, 2007, P 3 S E EUR WORKSH F
   EISENSTEIN J, 2000, P 3 IEEE WORKSH MOB
   FEATHER M, 1995, P INT C REQ ENG
   FEATHER M, 1998, P 9 INT WORK SOFTW S
   GAN Y, 2007, P 2007 C CTR ADV STU
   GOSLAR K, 2003, P 7 WORLD MULT SYST
   GRIRORI D, 2006, INT C WEB SERV US
   GRUNDY J, 2001, IEEE 16 INT C AUT SO
   HALL RJ, 2004, 12 INT IEEE ENT DIST
   HALLE S, 2008, 12 INT IEEE ENT DIST
   HALLE S, 2009, P 2009 ACM S APPL CO
   HARIRI MA, 2008, COMMUNICATIONS SIWN, P46
   HAUSMANN JH, 2004, INT C WEB SERV
   Havelund K, 2004, FORM METHOD SYST DES, V24, P189, DOI 10.1023/B:FORM.0000017721.39909.4b
   Hoschek W., 2002, IEEE ACM SUP C US
   KELLER U, 2005, EUR SEM WEB C
   KLAN F, 2006, 18 GI WORKSH FDN DAT
   Klein M, 2004, IEEE INTERNET COMPUT, V8, P30, DOI 10.1109/MIC.2004.1260701
   Klusch Matthias, 2006, INT C AUT AG MULT SY
   Kozlenkov A, 2007, INT J WEB SERV RES, V4, P82, DOI 10.4018/jwsr.2007040104
   KOZLENKOV A, 2008, INFORM SCI REFERENCE, P811
   Lamport L., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P657
   LI L, 2003, WWW C WORK ESERVICES
   LI Q, 2007, THESIS U ALBERTA
   Lynch D., 2006, P 2 WORKSH INN WEB I
   Mahbub K, 2005, 2005 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, PROCEEDINGS, P257
   MAHBUB K, 2007, SPRINGER MONOGRAPH T
   MAHBUB K, 2009, 2 INT WORKSH SERV MO
   Mahbub Khaled., 2004, INT C SERVICE ORIENT, P84
   MIKHAIEL R, 2006, 4 INT C SERV OR COMP
   Morato J, 2003, GWC 2004: SECOND INTERNATIONAL WORDNET CONFERENCE, PROCEEDINGS, P270
   MOSER O, 2008, WWW 2008, P815
   Moser O, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P917
   Newberger A., 2003, IRBTR03017
   OASIS, 2007, Web Services Business Process Execution Language Version 2.0
   PANTAZOGLOU M, 2007, P SERV OR COMP LOOK
   PANTAZOGLOU M, 2006, 4 INT C SERV OR COMP
   PAPAZOGLOU M, 2002, INTERNET COMPUTING I
   ROMEIKAT R, 2007, P 2 INT C INT WEB AP
   SALIFU M, 2008, ANAL MONITORING SWIT
   Salifu M, 2007, INT REQUIR ENG CONF, P211, DOI 10.1109/RE.2007.21
   Seffah A, 2004, J SYST SOFTWARE, V73, P287, DOI 10.1016/j.jss.2003.09.017
   Shanahan M., 1999, LECT NOTES COMPUTER, V1600, P409
   SHEN Z, 2005, INT C SERV COMP SCC
   SIMMONDS J, 2009, IEEE T SERVICES COMP
   SINGH S, 2005, 3 EUR C WEB SERV
   SPANOUDAKIS G, 2007, IEEE INT C WEB SERV
   SUN JZ, 2003, P 4 INT C PAR DISTR, P27
   TALWAR V, 2006, P 13 WORKSH HP OPENV, P21
   *W3C, 2004, RES DESCR FRAM W3C R
   Wac K, 2005, LECT NOTES COMPUT SC, V3762, P751
   WANG X, 2006, 4 INT C SERV OR COMP
   YE Y, 2001, IEEE 16 INT C AUT SO
   YUNYAO LY, 2005, SIGMOD 2005 BALT JUN
   ZISMAN A, 2008, IEEE INT C AUT SOFTW
   ZISMAN A, 2009, 4 INT C SOFTW DAT TE
   ZISMAN A, 2008, IEEE 2008 INT SERV C
   2003, OWL S 1 0 RELEASE
   2004, AXIS2
   2006, INDEPENDENT ONL 0508
   [No title captured]
   2000, EXIST
NR 93
TC 6
Z9 6
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2011
VL 18
IS 2
BP 117
EP 161
DI 10.1007/s10515-010-0077-5
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 737DG
UT WOS:000288548300002
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Little, G
   Miller, RC
AF Little, Greg
   Miller, Robert C.
TI Keyword programming in Java
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 22nd International Conference on Automated Software Engineering
CY NOV 05-09, 2007
CL Atlanta, GA
DE Java; Autocomplete; Code assistants
AB Keyword programming is a novel technique for reducing the need to remember details of programming language syntax and APIs, by translating a small number of unordered keywords provided by the user into a valid expression. In a sense, the keywords act as a query that searches the space of expressions that are valid in the given context. Prior work has demonstrated the feasibility and merit of this approach in limited domains. This paper explores the potential for employing this technique in much larger domains, specifically general-purpose programming languages like Java. We present an algorithm for translating keywords into Java method call expressions. When tested on keywords extracted from existing method calls in Java code, the algorithm can accurately reconstruct over 90% of the original expressions. We tested the algorithm on keywords provided by users in a web-based study. The results suggest that users can obtain correct Java code using keyword queries as accurately as they can write the correct Java code themselves. We implemented the algorithm in an Eclipse plug-in as an extension to the autocomplete mechanism and deployed it in a preliminary field study of several users, with mixed results. One interesting result of this work is that most of the information in Java method call expressions lies in the keywords, and details of punctuation and even parameter ordering can often be inferred automatically.
C1 [Little, Greg; Miller, Robert C.] MIT, CSAIL, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Little, G (corresponding author), MIT, CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
EM glittle@gmail.com
CR [Anonymous], 2006, Proceedings of the ACM symposium on User interface software and technology (UIST '06), DOI DOI 10.1145/1166253.1166275
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI DOI 10.7551/MITPRESS/7287.001.0001
   Hill R, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P228, DOI 10.1109/ASE.2004.1342740
   JENG JJ, 1995, P ACM SIGSOFT S SOFT, P97
   LITTLE G, 2008, P CHI 2007 IN PRESS
   MANDELIN D, 2005, PLDI 05, P48, DOI [10.1145/1065010.1065018, DOI 10.1145/1065010.1065018]
   PRIETODIAZ R, 1987, IEEE SOFTWARE, V4, P6, DOI 10.1109/MS.1987.229789
   RITTRI M, 1990, LECT NOTES ARTIF INT, V449, P603
   Sahavechaphan Naiyana., 2006, Proceedings of the 21st OOPSLA, P413
   TANSALARAK N, 2005, P 8 INT SIGSOFT S CO
   Ye Y., 2000, INTEGRATING ACTIVE I, P60
   Ye YW, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P513, DOI 10.1109/ICSE.2002.1007995
   Zaremski A., 1995, ACM Transactions on Software Engineering, V6, P333
   Zaremski A. M., 1995, ACM Transactions on Software Engineering and Methodology, V4, P146, DOI 10.1145/210134.210179
NR 14
TC 11
Z9 24
U1 3
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2009
VL 16
IS 1
BP 37
EP 71
DI 10.1007/s10515-008-0041-9
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 408EP
UT WOS:000263418600003
DA 2024-07-18
ER

PT J
AU Chikhaoui, A
   Chadli, A
   Ouared, A
AF Chikhaoui, Ahmed
   Chadli, Abdelhafid
   Ouared, Abdelkader
TI A model-based DevOps process for development of mathematical database
   cost models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Database cost model development; Incremental design; Cost model reuse;
   Model driven engineering
ID ENERGY; MANAGEMENT; TOOL
AB Obviously, the complexity of mathematical database cost models increases with the evolution of the database technology brought by emerging hardware and the new deployment platforms (ex. Cloud). This finding raises questions about the reliability of past Cost Models (CMs). Indeed, redesigning a database CM to evaluate the quality of service (QoS) attributes (i.e. response time, energy, sizing, etc.) is becoming a challenging task. First, because developers directly implement the CM by hard coding inside a DBMS without a prior design. Second, due to a lack of a stepwise development process to support an incremental CM design and continuous testing to diagnose errors that occur at each design stage. Moreover, reusing CMs for other purposes is a major issue that necessitates investigations to allow designers reusing and adapting CMs according to their needs. To take up these challenges, we propose a model-based framework for incremental design and continuous testing of Database CMs Specifically, we are motivated by proposing an approach that aims at shifting CMs design from an adhoc design to a structured and shared design by using a set of design guidelines inspired from software engineering practices. Finally, we propose to use the DevOps reuse practices (Continuous Integration/Continuous Delivery: CI/CD) to store the CM under design in a repository after each upgrade to be reused, improved, calibrated, and refined for other purposes. We evaluate our approach against common CM features, and we carry out a comparison with some analytical models from the literature. Findings show that our framework provides a high CM prediction accuracy, and identify the right design components with a precision ranging from 85% to 100%.
C1 [Chikhaoui, Ahmed; Chadli, Abdelhafid; Ouared, Abdelkader] Univ Tiaret, Dept Comp Sci, BP 78 zaaroura, Tiaret 14000, Tiaret, Algeria.
C3 Universite Ibn Khaldoun Tiaret
RP Chikhaoui, A (corresponding author), Univ Tiaret, Dept Comp Sci, BP 78 zaaroura, Tiaret 14000, Tiaret, Algeria.
EM ahmed.chikhaoui@univ-tiaret.dz; abdelhafith.chadli@univ-tiaret.dz;
   abdelkader.ouared@univ-tiaret.dz
CR Agrawal S, 2001, SIGMOD RECORD, V30, P608
   [Anonymous], 2012, P 8 INT WORKSHOP DAT
   Asperti A, 2003, ANN MATH ARTIF INTEL, V38, P27, DOI 10.1023/A:1022907629104
   Brown D.P., 2009, US Patent, Patent No. [7,499,907, 7499907]
   Chaudhuri S., 2007, P 33 INT C VER LARG, P3
   Chikhaoui A, 2018, FED CONF COMPUT SCI, P1025, DOI 10.15439/2018F237
   Dageville Benoit., 2004, VLDB 04, P1098, DOI DOI 10.1016/B978-012088469-8.50096-6
   Djilani Z, 2015, LECT NOTES COMPUT SC, V9344, P297, DOI 10.1007/978-3-319-23781-7_24
   Ebert C, 2016, IEEE SOFTWARE, V33, P94, DOI 10.1109/MS.2016.68
   Guo Ru., 2020, Population Growth and Structural Change China Ethnic Statistical Yearbook 2020, P1
   Humar I, 2011, IEEE NETWORK, V25, P40, DOI 10.1109/MNET.2011.5730527
   Idreos S, 2018, INT CONF MANAGE DATA, P535, DOI 10.1145/3183713.3199671
   Lamb A, 2012, PROC VLDB ENDOW, V5, P1790, DOI 10.14778/2367502.2367518
   Lan H, 2021, DATA SCI ENG, V6, P86, DOI 10.1007/s41019-020-00149-7
   Lang W., 2011, IEEE Data Eng. Bull, V34, P12, DOI [10.1007/1155693057, DOI 10.1007/1155693057]
   Leis V, 2015, PROC VLDB ENDOW, V9, P204
   Leis Viktor, 2017, CIDR
   Lu JH, 2019, PROC VLDB ENDOW, V12, P1970, DOI 10.14778/3352063.3352112
   Maier C., 2010, P 13 INT C EXT DAT T, P701
   Marcus R, 2019, Arxiv, DOI arXiv:1904.03711
   McBrien PJ, 2010, LECT NOTES COMPUT SC, V6412, P362, DOI 10.1007/978-3-642-16373-9_26
   Ouared A., 2017, P ACM S APPL COMP SA, P1820
   Ouared A., 2017, P ER FOR DEM TRACK, P44
   Ouared A., 2020, Proceedings, V3, P17
   Ouared A, 2022, J COMPUT LANG, V73, DOI 10.1016/j.cola.2022.101173
   Ouared A, 2021, ENASE: PROCEEDINGS OF THE 16TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, P529, DOI 10.5220/0010535105290536
   Ouared A, 2022, CONCURR COMP-PRACT E, V34, DOI 10.1002/cpe.6724
   Ouared A, 2023, CONCURR COMP-PRACT E, V35, DOI 10.1002/cpe.6463
   Ouared A, 2018, COMPUT LANG SYST STR, V54, P236, DOI 10.1016/j.cl.2018.05.002
   Ouared A, 2016, LECT NOTES COMPUT SC, V9893, P72, DOI 10.1007/978-3-319-45547-1_6
   Siddiqui T, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P99, DOI 10.1145/3318464.3380584
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Varadarajan R, 2014, PROC INT CONF DATA, P1084, DOI 10.1109/ICDE.2014.6816725
   Woltmann L, 2020, Arxiv, DOI arXiv:2005.09367
   Wu WT, 2013, PROC INT CONF DATA, P1081, DOI 10.1109/ICDE.2013.6544899
   Xu ZC, 2012, PROC VLDB ENDOW, V5, P1954, DOI 10.14778/2367502.2367546
   Xu ZC, 2013, INT CON DISTR COMP S, P83, DOI 10.1109/ICDCS.2013.21
   Zilio DC, 2004, INTERNATIONAL CONFERENCE ON AUTONOMIC COMPUTING, PROCEEDINGS, P180
NR 38
TC 1
Z9 1
U1 3
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 23
DI 10.1007/s10515-023-00390-0
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N8OJ9
UT WOS:001039540300002
DA 2024-07-18
ER

PT J
AU Zhu, YR
   Li, T
AF Zhu, Yuran
   Li, Tong
TI An object detection-based framework for automatically recognizing iStar
   hand drafts
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Requirements modeling languages; iStar 2; 0; Hand drafts; Off-line
   recognition
AB Although various requirements modeling tools have been developed in the past decades to facilitate modeling practice, hand drafting is still preferred to a certain extent by some modelers. Thus, digitizing hand drafts has been essential in promoting modeling practice. In this paper, we focus on a requirement modeling language, iStar, which has been investigated for over two decades and has been widely accepted as a valuable method to model and analyze requirements, especially the social aspects. Specifically, we propose a comprehensive framework using customized object detection methods to systematically recognize and digitize iStar hand drafts, promoting the practical adoption of iStar. To evaluate the performance of our approach, we have systematically established a dataset that includes 630 hand drafts. To the best of our knowledge, this is the first iStar hand draft dataset and will contribute to further studies in this field. We have designed and conducted a series of experiments to evaluate our approach based on the data, showing that our approach can effectively digitize iStar hand drafts. The entity recognition rate reached 99.6%. The draft recognition rate reached 91.4%. In addition to the experiments, we have pragmatically applied our approach to actual modeling practice, illustrating the practical applicability of our approach.
C1 [Zhu, Yuran; Li, Tong] Beijing Univ Technol, 100 Pingleyuan, Beijing 100124, Peoples R China.
C3 Beijing University of Technology
RP Li, T (corresponding author), Beijing Univ Technol, 100 Pingleyuan, Beijing 100124, Peoples R China.
EM litong@bjut.edu.cn
RI li, tong/JYO-7530-2024
FU National Natural Science Foundation of China [61902010, 62162051];
   Project of Beijing Municipal Education Commission [KM202110005025];
   Beijing Natural Science Foundation Project [Z200002]
FX This work is partially supported by the National Natural Science
   Foundation of China (Nos. 61902010, 62162051), the Project of Beijing
   Municipal Education Commission (No. KM202110005025), and Beijing Natural
   Science Foundation Project (No. Z200002).
CR Ahmed J, 2020, CLASSIFICATION ROLE
   [Anonymous], LEAF 20
   BELLMAN R, 1966, SCIENCE, V153, P34, DOI 10.1126/science.153.3731.34
   Booch G., 2005, The Unified Modeling Language User Guide
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Bresler M., 2015, CVWW'15: Proceedings of the 20th Computer Vision Winter Workshop, P67
   Bresler M, 2016, INT CONF FRONT HAND, P48, DOI [10.1109/ICFHR.2016.0022, 10.1109/ICFHR.2016.19]
   Bresler M, 2013, PROC INT CONF DOC, P1215, DOI 10.1109/ICDAR.2013.246
   Cares C., 2008, P 3 INT I WORKSH
   Carton C, 2013, PROC INT CONF DOC, P1210, DOI 10.1109/ICDAR.2013.245
   Chang CC, 2008, 2008 INTERNATIONAL SYMPOSIUM ON INTELLIGENT INFORMATION TECHNOLOGY APPLICATION, VOL II, PROCEEDINGS, P346, DOI 10.1109/IITA.2008.259
   Chen Q, 2008, SOFTWARE PRACT EXPER, V38, P961, DOI 10.1002/spe.856
   Chen YW, 2019, INT REQUIR ENG CONF, P490, DOI 10.1109/RE.2019.00069
   Coüasnon B, 2006, INT J DOC ANAL RECOG, V8, P111, DOI 10.1007/s10032-005-0148-5
   Dalpiaz F, 2016, Arxiv, DOI [arXiv:1605.07767, DOI 10.48550/ARXIV.1605.07767]
   Du X., 2017, ISTAR
   Fang JQ, 2022, ENTROPY-SWITZ, V24, DOI 10.3390/e24030425
   Gervais P, 2020, Arxiv, DOI arXiv:2002.09303
   Gil J, 2002, IEEE T PATTERN ANAL, V24, P1606, DOI 10.1109/TPAMI.2002.1114852
   Hammond Tracy., 2006, ACM SIGGRAPH 2006 CO
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hearst MA, 1998, IEEE INTELL SYST APP, V13, P18, DOI 10.1109/5254.708428
   Horkoff J, 2016, CREATIVE ISTAR MODEL
   Horkoff J, 2019, REQUIR ENG, V24, P133, DOI 10.1007/s00766-017-0280-z
   HWANG H, 1995, IEEE T IMAGE PROCESS, V4, P499, DOI 10.1109/83.370679
   Lemaitre A., 2011, INT WORKSHOP GRAPHIC
   Li T., 2016, ISTAR
   Lin T.-Y., CO COMETRICS
   Lin TY, 2017, IEEE I CONF COMP VIS, P2999, DOI 10.1109/ICCV.2017.324
   Olsen L, 2009, COMPUT GRAPH-UK, V33, P85, DOI 10.1016/j.cag.2008.09.013
   OTSU N, 1979, IEEE T SYST MAN CYB, V9, P62, DOI 10.1109/TSMC.1979.4310076
   PiStar, US
   Plimmer B., 2007, P HCI 2007 21 BRIT H, P21
   Redmon J, 2018, Arxiv, DOI [arXiv:1804.02767, DOI 10.1109/CVPR.2017.690, DOI 10.48550/ARXIV.1804.02767]
   Ren SQ, 2017, IEEE T PATTERN ANAL, V39, P1137, DOI 10.1109/TPAMI.2016.2577031
   Sas J., 2015, 2015 FEDERATED C COM
   Schäfer B, 2021, INT J DOC ANAL RECOG, V24, P3, DOI 10.1007/s10032-020-00361-1
   Schuster-Bockler Benjamin, 2007, Curr Protoc Bioinformatics, VAppendix 3, p3A, DOI 10.1002/0471250953.bia03as18
   Shi D, 2016, RES DOMAIN ORIENTED
   TRIER OD, 1995, IEEE T PATTERN ANAL, V17, P312, DOI 10.1109/34.368197
   Wang YD, 2021, REQUIR ENG, V26, P301, DOI 10.1007/s00766-021-00346-4
   Wu J, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P1200
   Wüst D, 2011, LECT NOTES COMPUT SC, V6606, P100, DOI 10.1007/978-3-642-19858-8_12
   Yu Eric., 2011, SOCIAL MODELING REQU, V11, P2011, DOI DOI 10.7551/MITPRESS/7549.003.0005
   Yuan ZM, 2008, LECT NOTES COMPUT SC, V5328, P55
   Yunduo Wang, 2018, Advances in Conceptual Modeling. ER 2018 Workshops Emp-ER, MoBiD, MREBA, QMMQ, SCME. Proceedings: Lecture Notes in Computer Science (LNCS 11158), P49, DOI 10.1007/978-3-030-01391-2_11
   Zhu Y, 2021, ISTAR 630 DATASET
NR 47
TC 0
Z9 0
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 57
DI 10.1007/s10515-022-00361-x
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5A1IY
UT WOS:000862649200001
DA 2024-07-18
ER

PT J
AU Mustansir, A
   Shahzad, K
   Malik, MK
AF Mustansir, Amina
   Shahzad, Khurram
   Malik, Muhammad Kamran
TI Towards automatic business process redesign: an NLP based approach to
   extract redesign suggestions
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software engineering; Business process redesign; Application of NLP in
   BPR; Supervised learning techniques; Deep learning techniques
ID PROCESS MANAGEMENT; VALIDATION
AB Business process redesign (BPR) is widely recognized as a key phase of the business process management lifecycle. However, the existing studies have focused on proposing theoretical models, methodologies, and redesign patterns, whereas, the BPR activity remains dependent upon domain experts with little or no consideration to end-user feedback. To facilitate these experts, in this study, we have proposed a natural language processing (NLP) based approach to identify redesign suggestions from end-user feedback in natural language text. The proposed approach includes a novel set of annotation guidelines that can be used to generate computational resources for business process redesign. Secondly, to demonstrate the effectiveness of the proposed approach, we have generated computational resources which are composed of three real-world business processes and end-user feedback containing 8421 sentences. Finally, we have performed 270 experiments using six traditional and three deep learning techniques to evaluate their effectiveness for the identification of redesign suggestions from raw text. The classified suggestions can be used by domain experts to prioritize the redesign possibilities, without going through the details of the customer feedback.
C1 [Mustansir, Amina] Univ Punjab, Dept Comp Sci, Dept Software Engn, Lahore, Pakistan.
   [Shahzad, Khurram] Univ Punjab, Dept Data Sci, Lahore, Pakistan.
   [Malik, Muhammad Kamran] Univ Punjab, Dept Informat Technol, Lahore, Pakistan.
C3 University of Punjab; University of Punjab; University of Punjab
RP Mustansir, A (corresponding author), Univ Punjab, Dept Comp Sci, Dept Software Engn, Lahore, Pakistan.
EM amina.mustansir@pucit.edu.pk; khurram@pucit.edu.pk;
   kamran.malik@pucit.edu.pk
RI Malik, Muhammad Imran/ADP-9538-2022; Shahzad, Khurram/GRX-8200-2022
OI Malik, Muhammad Imran/0000-0002-5938-8797; Mustansir,
   Amina/0000-0003-1031-6730
CR van der Aa H, 2021, INFORM SYST, V102, DOI 10.1016/j.is.2021.101824
   [Anonymous], 2016, PROCESS MODEL MATCHI
   Antunes Goncalo., 2015, ENTERPRISE MODELLING, P127
   Cho M, 2017, DECIS SUPPORT SYST, V104, P92, DOI 10.1016/j.dss.2017.10.004
   Danilova KB, 2019, BUS PROCESS MANAG J, V25, P1377, DOI 10.1108/BPMJ-05-2017-0123
   Dumas M., 2013, Fundamentals of Business Process Management, DOI DOI 10.1007/978-3-662-56509-4
   Grisold T, 2021, COMMUN ASSOC INF SYS
   Grisold T, 2022, BUS INFORM SYST ENG+, V64, P149, DOI 10.1007/s12599-021-00703-1
   Khan MM, 2021, ACM T ASIAN LOW-RESO, V20, DOI 10.1145/3414524
   Leopold Henrik, 2012, Advanced Information Systems Engineering. Proceedings 24th International Conference, CAiSE 2012, P64, DOI 10.1007/978-3-642-31095-9_5
   Leopold H, 2014, IEEE T SOFTWARE ENG, V40, P818, DOI 10.1109/TSE.2014.2327044
   Lohrmann M, 2016, SOFTW SYST MODEL, V15, P353, DOI 10.1007/s10270-014-0443-z
   Mansar SL, 2007, BUS PROCESS MANAG J, V13, P193, DOI 10.1108/14637150710740455
   Mansar SL, 2005, COMPUT IND, V56, P457, DOI 10.1016/j.compind.2005.01.001
   Mendling J, 2020, EUR J INFORM SYST, V29, P208, DOI 10.1080/0960085X.2020.1755207
   Mustansir A, 2020, 2020 35TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOPS (ASEW 2020), P118, DOI 10.1145/3417113.3423374
   Muzaffar SI, 2019, COMPUT INFORM, V38, P851, DOI 10.31577/cai_2019_4_851
   Phellas C., 2011, Researching society and culture, V3rd, P181, DOI DOI 10.4324/9780203462867_appendix
   Recker J, 2016, BUS INFORM SYST ENG+, V58, P55, DOI 10.1007/s12599-015-0411-3
   Reijiers HA, 2005, OMEGA-INT J MANAGE S, V33, P283, DOI 10.1016/j.omega.2004.04.012
   Rosemann M, 2020, LECT NOTES COMPUT SC, V12168, P349, DOI 10.1007/978-3-030-58666-9_20
   Sànchez-Ferreres J, 2018, DATA KNOWL ENG, V118, P25, DOI 10.1016/j.datak.2018.09.001
   van der Aa H, 2017, INFORM SYST, V64, P447, DOI 10.1016/j.is.2016.07.010
   Vanwersch RJB, 2011, INT J CARE COORD, V15, P119, DOI 10.1258/jicp.2011.011025
   Vanwersch RJB, 2016, BUS INFORM SYST ENG+, V58, P43, DOI 10.1007/s12599-015-0417-x
   Vom Brocke J., 2014, HDB BUSINESS PROCESS
   Womack J., 2006, The machine that changed the world
   Zellner G, 2013, BUS PROCESS MANAG J, V19, P600, DOI 10.1108/BPMJ-Mar-2012-0020
NR 28
TC 5
Z9 6
U1 2
U2 17
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 12
DI 10.1007/s10515-021-00316-8
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY6EY
UT WOS:000737064300002
DA 2024-07-18
ER

PT J
AU Yavuz, T
   Bai, K
AF Yavuz, Tuba
   Bai, Ken (Yihang)
TI Analyzing system software components using API model guided symbolic
   execution
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Symbolic execution; API modeling; Specification
ID CHECKING
AB Analyzing real-world software is challenging due to complexity of the software frameworks or APIs they depend on. In this paper, we present a tool, PROMPT, that facilitates the analysis of software components usingAPI model guided symbolic execution. PROMPT has a specification component, PROSE, that lets users define an API model, which consists of a set of data constraints and life-cycle rules that define control-flow constraints among sequentially composed API functions. Given a PROSE model and a software component, PROMPT symbolically executes the component while enforcing the specified API model. PROMPT has been implemented on top of the KLEE symbolic execution engine and has been applied to Linux device drivers from the video, sound, and network subsystems and to some vulnerable components of BlueZ, the implementation of the Bluetooth protocol stack for the Linux kernel. PROMPT detected two new and four known memory vulnerabilities in some of the analyzed system software components.
C1 [Yavuz, Tuba] Univ Florida, ECE Dept, Benton 321, Gainesville, FL 32611 USA.
   [Bai, Ken (Yihang)] Univ Florida, ECE Dept, Larsen 234, Gainesville, FL 32611 USA.
C3 State University System of Florida; University of Florida; State
   University System of Florida; University of Florida
RP Yavuz, T (corresponding author), Univ Florida, ECE Dept, Benton 321, Gainesville, FL 32611 USA.
EM tuba@ece.ufl.edu
OI Bai, Yihang/0000-0002-4082-4165
FU National Science Foundation [CNS-1815883, CNS-1942235]; Semiconductor
   Research Corporation
FX This work was partially funded by the National Science Foundation under
   Grants CNS-1815883 and CNS-1942235 and by the Semiconductor Research
   Corporation. We would like to thank the anonymous reviewers for their
   feedback. We would like to thank Joshua Nelson for helping with the
   PROSE parser as an undergraduate researcher.
CR Amann S., 2017, ARXIV171200242 CORR
   [Anonymous], 2007, P 22 IEEE ACM INT C, DOI [DOI 10.1145/1321631.1321719, 10.1145/1321631.1321719]
   Bai GD, 2018, IEEE T SOFTWARE ENG, V44, P595, DOI 10.1109/TSE.2017.2697848
   Ball T., 2002, TECH REP
   Ball T, 2011, COMMUN ACM, V54, P68, DOI 10.1145/1965724.1965743
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Bucur S, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P183
   Cadar C, 2005, LECT NOTES COMPUT SC, V3639, P2
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Carpenter D, ALSA CS46XX POTENTIA
   Chatterjee Shaunak, 2009, International Journal on Software Tools for Technology Transfer, V11, P105, DOI 10.1007/s10009-009-0098-1
   Chipounov V, 2012, ACM T COMPUT SYST, V30, DOI 10.1145/2110356.2110358
   Dawei Qi, 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P415, DOI 10.1109/WCRE.2012.51
   Fahl S., 2013, ACM C COMP COMM SEC
   Georgiev Martin, 2012, P 2012 ACM C COMPUTE, P38
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Heule S, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P710, DOI 10.1145/2786805.2786875
   Indela S., 2016, P 2016 ACM INT S NEW
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Mehlitz P., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P584, DOI 10.1109/ASE.2011.6100131
   Myers BA, 2016, COMMUN ACM, V59, P62, DOI 10.1145/2896587
   Nadi S, 2016, PROC INT CONF SOFTW, P935, DOI 10.1145/2884781.2884790
   Park J, 2019, LECT NOTES COMPUT SC, V11424, P43, DOI 10.1007/978-3-030-16722-6_3
   Ramos DA, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P49
   Recoules F, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P589, DOI 10.1109/ASE.2019.00060
   Renzelmann MatthewJ., 2012, Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation (OSDI), P279
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Visser W, 2005, LECT NOTES COMPUT SC, V3639, P27
   Wang W, 2017, LECT NOTES COMPUT SC, V10145, P539, DOI 10.1007/978-3-319-52234-0_29
   Yavuz T, 2019, NET HSO DO NOT CALL
   Yong SH, 1999, ACM SIGPLAN NOTICES, V34, P91, DOI 10.1145/301631.301647
   Yun IS, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P363
   Zakharov IS, 2015, PROGRAM COMPUT SOFT+, V41, P49, DOI 10.1134/S0361768815010065
NR 35
TC 3
Z9 4
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2020
VL 27
IS 3-4
SI SI
BP 329
EP 367
DI 10.1007/s10515-020-00276-5
EA SEP 2020
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OH9NE
UT WOS:000570827100001
DA 2024-07-18
ER

PT J
AU Dell'Anna, D
   Dalpiaz, F
   Dastani, M
AF Dell'Anna, Davide
   Dalpiaz, Fabiano
   Dastani, Mehdi
TI Requirements-driven evolution of sociotechnical systems via
   probabilistic reasoning and hill climbing
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Requirements engineering; Sociotechnical systems; Bayesian networks;
   Requirements revision
ID CONTEXTUAL REQUIREMENTS; FRAMEWORK; MODELS; RISKS
AB Sociotechnical systems (STSs) are defined by the interaction between technical systems, like software and machines, and social entities, like humans and organizations. The entities within an STS are autonomous, thus weakly controllable, and the environment where the STS operates is highly dynamic. As a result, the design artifacts that represent the requirements of an STS, such as requirements models, may end up being invalid when the system operates, for the autonomous entities do not comply with the requirements, or the environment changes. In this paper, we present a framework that uses runtime execution data to support the runtime validation of requirements models and to guide the evolution of an STS. We propose two types of evolution: (i) manual: the analyst uses Bayesian inference to discover which assumptions in a requirements model are invalid and manually adjusts the system or its model; and (ii) automated: requirements are iteratively revised by an hill climbing algorithm searching for requirements that maximize the achievement of the stakeholders' objectives. We evaluate the effectiveness of different revision heuristics on a smart traffic simulation applied to an exemplar from the self-adaptive systems literature. The results show that our heuristics, informed by runtime execution data, outperform standard uninformed heuristics, in terms of convergence speed, solution quality, and stability. Moreover, the algorithms show good resilience to noise introduced into the execution data.
C1 [Dell'Anna, Davide; Dalpiaz, Fabiano; Dastani, Mehdi] Univ Utrecht, Utrecht, Netherlands.
C3 Utrecht University
RP Dell'Anna, D (corresponding author), Univ Utrecht, Utrecht, Netherlands.
EM d.dellanna@uu.nl; f.dalpiaz@uu.nl; m.m.dastani@uu.nl
RI Dell'Anna, Davide/AAE-9156-2021
OI Dell'Anna, Davide/0000-0002-1162-8341; Dalpiaz,
   Fabiano/0000-0003-4480-3887
CR Alechina N, 2014, AAMAS'14: PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS & MULTIAGENT SYSTEMS, P117
   Ali R, 2013, INFORM SOFTWARE TECH, V55, P35, DOI 10.1016/j.infsof.2012.06.013
   Ali R, 2011, LECT NOTES BUS INF P, V81, P372
   Almeida A, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1376, DOI 10.1145/2695664.2695875
   [Anonymous], 2009, ARXIV09083817
   [Anonymous], 2016, ARXIV160507767CSSE
   Aucher G, 2009, LECT NOTES ARTIF INT, V5834, P15, DOI 10.1007/978-3-642-04893-7_2
   Bencomo N., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P199, DOI 10.1145/1810295.1810329
   Bencomo N, 2015, INT REQUIR ENG CONF, P236, DOI 10.1109/RE.2015.7320429
   Bencomo N, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P113, DOI 10.1109/SEAMS.2013.6595498
   Blair G, 2009, COMPUTER, V42, P22, DOI 10.1109/MC.2009.326
   Boness K, 2008, IET SOFTW, V2, P46, DOI 10.1049/iet-sen:20070068
   Boness K, 2011, INFORM SOFTWARE TECH, V53, P1084, DOI 10.1016/j.infsof.2011.05.003
   Cailliau A, 2013, REQUIR ENG, V18, P129, DOI 10.1007/s00766-013-0168-5
   Chopra AK, 2014, INT REQUIR ENG CONF, P53, DOI 10.1109/RE.2014.6912247
   Cziharz T., 2016, HDB INT REQUIREMENTS
   Dalpiaz F, 2013, REQUIR ENG, V18, P1, DOI 10.1007/s00766-011-0132-1
   de Lemos R., 2013, Lecture Notes in Computer Science, V7475, P1, DOI DOI 10.1007/978-3-642-35813-5_1
   Dell'Anna D., 2018, P INT WORKSH ART INT
   Dell'Anna D., 2018, P 21 INT C PRINC PRA
   Doguc O, 2009, RELIAB ENG SYST SAFE, V94, P542, DOI 10.1016/j.ress.2008.06.009
   Fenton N, 2007, INFORM SOFTWARE TECH, V49, P32, DOI 10.1016/j.infsof.2006.09.001
   Fickas S., 1995, Proceedings of the Second IEEE International Symposium on Requirements Engineering (Cat. No.95TH8040), P140, DOI 10.1109/ISRE.1995.512555
   Filieri A, 2012, FORM ASP COMPUT, V24, P163, DOI 10.1007/s00165-011-0207-2
   Giorgini P, 2002, LECT NOTES COMPUT SC, V2503, P167
   Governatori G, 2010, LOG J IGPL, V18, P157, DOI 10.1093/jigpal/jzp075
   Joye N, 2010, BIOMED CIRC SYST C, P102, DOI 10.1109/BIOCAS.2010.5709581
   Knauss A, 2016, INFORM SOFTWARE TECH, V70, P85, DOI 10.1016/j.infsof.2015.10.001
   Krupitzer C, 2015, PERVASIVE MOB COMPUT, V17, P184, DOI 10.1016/j.pmcj.2014.09.009
   Lehman MM, 2005, IEEE International Workshop on Software Evolvability, Proceedings, P3, DOI 10.1109/IWSE.2005.14
   Lehman MM, 2003, INFORM PROCESS LETT, V88, P33, DOI 10.1016/S0020-0190(03)00382-X
   Luke S, 2005, SIMUL-T SOC MOD SIM, V81, P517, DOI 10.1177/0037549705058073
   Mendes E, 2008, IEEE T SOFTWARE ENG, V34, P723, DOI 10.1109/TSE.2008.64
   Misirli A.T., 2014, P 3 INT WORKSHOP REA, P7
   Paucar LHG, 2017, INT REQUIR ENG CONF, P430, DOI 10.1109/RE.2017.12
   Reddivari S, 2014, REQUIR ENG, V19, P257, DOI 10.1007/s00766-013-0194-3
   Robinson WN, 2006, REQUIR ENG, V11, P17, DOI 10.1007/s00766-005-0016-3
   Rummery G. A., 1994, CITESEER, V37
   Russell S., 2010, ARTIF INTELL, V3rd
   Salehie M, 2012, SOFTWARE PRACT EXPER, V42, P211, DOI 10.1002/spe.1066
   Singh MP, 2013, ACM T INTEL SYST TEC, V5, DOI 10.1145/2542182.2542203
   Sommerville I, 2012, COMMUN ACM, V55, P71, DOI 10.1145/2209249.2209268
   Souza VitorE Silva., 2011, P 6 INT S SOFTWARE E, P60
   SPIEGELHALTER DJ, 1993, STAT SCI, V8, P219, DOI 10.1214/ss/1177010888
   Tsvetovat M., 2004, KI, V18, P23
   van der Gaag LC, 2007, STUD FUZZ SOFT COMP, V213, P103
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P908, DOI 10.1109/32.730542
   van Lamsweerde A., 2009, REQUIREMENTS ENG SYS
   Wang YQ, 2009, AUTOMAT SOFTW ENG, V16, P3, DOI 10.1007/s10515-008-0042-8
   WELLMAN MP, 1990, ARTIF INTELL, V44, P257, DOI 10.1016/0004-3702(90)90026-V
   Whittle J, 2010, REQUIR ENG, V15, P177, DOI 10.1007/s00766-010-0101-0
   Wu PPY, 2015, DECIS SUPPORT SYST, V71, P14, DOI 10.1016/j.dss.2015.01.006
   Yu Eric., 1998, P 4 INT WORKSHOP REQ, P15
NR 53
TC 6
Z9 6
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2019
VL 26
IS 3
SI SI
BP 513
EP 557
DI 10.1007/s10515-019-00255-5
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IS5YT
UT WOS:000482229800002
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Li, ZQ
   Jing, XY
   Wu, F
   Zhu, XK
   Xu, BW
   Ying, S
AF Li, Zhiqiang
   Jing, Xiao-Yuan
   Wu, Fei
   Zhu, Xiaoke
   Xu, Baowen
   Ying, Shi
TI Cost-sensitive transfer kernel canonical correlation analysis for
   heterogeneous defect prediction
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Heterogeneous defect prediction; Kernel canonical correlation analysis;
   Class imbalance; Transfer learning; Cost-sensitive learning
ID STATIC CODE ATTRIBUTES; RECOGNITION; MACHINE; CLASSIFICATION; MODELS
AB Cross-project defect prediction (CPDP) refers to predicting defects in a target project using prediction models trained from historical data of other source projects. And CPDP in the scenario where source and target projects have different metric sets is called heterogeneous defect prediction (HDP). Recently, HDP has received much research interest. Existing HDP methods only consider the linear correlation relationship among the features (metrics) of the source and target projects, and such models are insufficient to evaluate nonlinear correlation relationship among the features. So these methods may suffer from the linearly inseparable problem in the linear feature space. Furthermore, existing HDP methods do not take the class imbalance problem into consideration. Unfortunately, the imbalanced nature of software defect datasets increases the learning difficulty for the predictors. In this paper, we propose a new cost-sensitive transfer kernel canonical correlation analysis (CTKCCA) approach for HDP. CTKCCA can not only make the data distributions of source and target projects much more similar in the nonlinear feature space, where the learned features have favorable separability, but also utilize the different misclassification costs for defective and defect-free classes to alleviate the class imbalance problem. We perform the Friedman test with Nemenyi's post-hoc statistical test and the Cliff's delta effect size test for the evaluation. Extensive experiments on 28 public projects from five data sources indicate that: (1) CTKCCA significantly performs better than the related CPDP methods; (2) CTKCCA performs better than the related state-of-the-art HDP methods.
C1 [Li, Zhiqiang; Jing, Xiao-Yuan; Zhu, Xiaoke; Xu, Baowen; Ying, Shi] Wuhan Univ, Sch Comp, State Key Lab Software Engn, Wuhan 430072, Hubei, Peoples R China.
   [Jing, Xiao-Yuan; Wu, Fei] Nanjing Univ Posts & Telecommun, Sch Automat, Nanjing 210023, Jiangsu, Peoples R China.
   [Zhu, Xiaoke] Henan Univ, Sch Comp & Informat Engn, Kaifeng 475001, Peoples R China.
C3 Wuhan University; Nanjing University of Posts & Telecommunications;
   Henan University
RP Jing, XY (corresponding author), Wuhan Univ, Sch Comp, State Key Lab Software Engn, Wuhan 430072, Hubei, Peoples R China.; Jing, XY (corresponding author), Nanjing Univ Posts & Telecommun, Sch Automat, Nanjing 210023, Jiangsu, Peoples R China.
EM jingxy_2000@126.com
RI Xu, Baowen/IXW-4882-2023; He, Chen/JLM-5059-2023
OI Xu, Baowen/0000-0001-7743-1296; 
FU National Key Research and Development Program of China [2017YFB0202001];
   National Nature Science Foundation of China [61272273, 61373038,
   61672392, 61472178, 61672208, U1404618]; National Basic Research 973
   Program of China [2014CB340702]; Program of State Key Laboratory of
   Software Engineering [SKLSE-1216-14]; Natural Science Foundation of
   Jiangsu Province [BK20170900]; Scientific Research Staring Foundation
   for Introduced Talents in NJUPT under NUPTSF [NY217009]; Science and
   Technology Program in Henan province [1721102410064]; Science and
   Technique Development Program of Henan [172102210186];
   Province-School-Region Project of Henan University [2016S11]
FX The authors would like to thank the editors and anonymous reviewers for
   their constructive comments and suggestions. This work was supported by
   the National Key Research and Development Program of China under Grant
   No. 2017YFB0202001, the National Nature Science Foundation of China
   under Grant Nos. 61272273, 61373038, 61672392, 61472178, 61672208,
   U1404618, the National Basic Research 973 Program of China under Project
   No. 2014CB340702, the Program of State Key Laboratory of Software
   Engineering under Grant No. SKLSE-1216-14, the Natural Science
   Foundation of Jiangsu Province under Grant No. BK20170900, the
   Scientific Research Staring Foundation for Introduced Talents in NJUPT
   under NUPTSF No. NY217009, the Science and Technology Program in Henan
   province under Grant No. 1721102410064, the Science and Technique
   Development Program of Henan under Grant No. 172102210186, and the
   Province-School-Region Project of Henan University under Grant No.
   2016S11.
CR [Anonymous], 2010, KERNEL METHODS NONLI
   [Anonymous], PROC INT CONF SOFTW
   [Anonymous], EMPIRICAL SOFTWARE E
   [Anonymous], P 30 IEEE ACM INT C
   [Anonymous], PROC INT CONF SOFTW
   [Anonymous], AUTOMAT SOFTW ENG
   [Anonymous], 2008, Proceedings of the 4th International Workshop on Predictor Models in Software Engineering, PROMISE '08
   [Anonymous], J APPL MATH
   [Anonymous], 2012, P ACM SIGSOFT 20 INT
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Bach FR, 2003, J MACH LEARN RES, V3, P1, DOI 10.1162/153244303768966085
   Baktashmotlagh M, 2013, IEEE I CONF COMP VIS, P769, DOI 10.1109/ICCV.2013.100
   Belhumeur PN, 1997, IEEE T PATTERN ANAL, V19, P711, DOI 10.1109/34.598228
   Bezerra MER, 2011, IEEE SYS MAN CYBERN, P2515, DOI 10.1109/ICSMC.2011.6084055
   Bradley AP, 1997, PATTERN RECOGN, V30, P1145, DOI 10.1016/S0031-3203(96)00142-2
   Briand LC, 2002, IEEE T SOFTWARE ENG, V28, P706, DOI 10.1109/TSE.2002.1019484
   Canfora G, 2015, SOFTW TEST VERIF REL, V25, P426, DOI 10.1002/stvr.1570
   Catal C, 2009, INFORM SCIENCES, V179, P1040, DOI 10.1016/j.ins.2008.12.001
   Chen L, 2015, INFORM SOFTWARE TECH, V62, P67, DOI 10.1016/j.infsof.2015.01.014
   Cheung S.-C., 2011, P 19 ACM SIGSOFT S 1, P15
   Cliff N., 2014, ORDINAL METHODS BEHA
   Cruz AEC, 2009, INT SYMP EMP SOFTWAR, P461
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Fan RE, 2008, J MACH LEARN RES, V9, P1871
   Gao KH, 2011, SOFTWARE PRACT EXPER, V41, P579, DOI 10.1002/spe.1043
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Haibo He, 2009, IEEE Transactions on Knowledge and Data Engineering, V21, P1263, DOI 10.1109/TKDE.2008.239
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   He P, 2015, INFORM SOFTWARE TECH, V59, P170, DOI 10.1016/j.infsof.2014.11.006
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   Herbold S., 2013, P 9 INT C PREDICTIVE, P1
   Japkowicz N., 2002, Intelligent Data Analysis, V6, P429
   Jiang T, 2013, IEEE INT CONF AUTOM, P279, DOI 10.1109/ASE.2013.6693087
   Jiang Y., 2009, 2009 International Conference on Sustainable Power Generation and Supply, P1, DOI DOI 10.1109/WCSP.2009.5371739
   Jiang Y, 2008, EMPIR SOFTW ENG, V13, P561, DOI 10.1007/s10664-008-9079-3
   Jing XY, 2014, AAAI CONF ARTIF INTE, P1882
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P414, DOI 10.1145/2568225.2568320
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P632, DOI 10.1145/2591062.2591151
   Jing XY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P496, DOI 10.1145/2786805.2786813
   Kamei Y, 2016, EMPIR SOFTW ENG, V21, P2072, DOI 10.1007/s10664-015-9400-x
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Khoshgoftaar TM, 2002, 7TH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P51, DOI 10.1109/HASE.2002.1173102
   Kim S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P481, DOI 10.1145/1985793.1985859
   Kim TK, 2007, IEEE T PATTERN ANAL, V29, P1005, DOI 10.1109/TPAMI.2007.1037
   Lai P L, 2000, Int J Neural Syst, V10, P365, DOI 10.1016/S0129-0657(00)00034-X
   Lee T, 2016, IEEE T SOFTWARE ENG, V42, P1015, DOI 10.1109/TSE.2016.2550458
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li M, 2012, AUTOMAT SOFTW ENG, V19, P201, DOI 10.1007/s10515-011-0092-1
   Li YO, 2009, IEEE T SIGNAL PROCES, V57, P3918, DOI 10.1109/TSP.2009.2021636
   Liu MX, 2014, IEEE T RELIAB, V63, P676, DOI 10.1109/TR.2014.2316951
   Liu W, 2012, PROC CVPR IEEE, P2074, DOI 10.1109/CVPR.2012.6247912
   Lu JW, 2013, IEEE T INF FOREN SEC, V8, P510, DOI 10.1109/TIFS.2013.2243146
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Ma Y, 2012, IEICE T INF SYST, VE95D, P267, DOI 10.1587/transinf.E95.D.267
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P637, DOI 10.1109/TSE.2007.70721
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2013, IEEE T SOFTWARE ENG, V39, P822, DOI 10.1109/TSE.2012.83
   Nam J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P508, DOI 10.1145/2786805.2786814
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Pan SJ, 2010, IEEE T KNOWL DATA EN, V22, P1345, DOI 10.1109/TKDE.2009.191
   Panichella A, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P164, DOI 10.1109/CSMR-WCRE.2014.6747166
   Pelayo L, 2012, IEEE T RELIAB, V61, P516, DOI 10.1109/TR.2012.2183912
   Peters F, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P801, DOI 10.1109/ICSE.2015.92
   Peters F, 2013, IEEE WORK CONF MIN S, P409, DOI 10.1109/MSR.2013.6624057
   Peters F, 2013, IEEE T SOFTWARE ENG, V39, P1054, DOI 10.1109/TSE.2013.6
   Ryu D, 2017, SOFTWARE QUAL J, V25, P235, DOI 10.1007/s11219-015-9287-1
   Ryu D, 2016, EMPIR SOFTW ENG, V21, P43, DOI 10.1007/s10664-014-9346-4
   Seiffert C, 2009, IEEE T SYST MAN CY A, V39, P1283, DOI 10.1109/TSMCA.2009.2027131
   Shepperd M, 2014, IEEE T SOFTWARE ENG, V40, P603, DOI 10.1109/TSE.2014.2322358
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Shivaji S, 2013, IEEE T SOFTWARE ENG, V39, P552, DOI 10.1109/TSE.2012.43
   Sun ZB, 2012, IEEE T SYST MAN CY C, V42, P1806, DOI 10.1109/TSMCC.2012.2226152
   Tan M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P99, DOI 10.1109/ICSE.2015.139
   Tantithamthavorn C, 2016, PROC INT CONF SOFTW, P321, DOI 10.1145/2884781.2884857
   Tantithamthavorn C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P812, DOI 10.1109/ICSE.2015.93
   Thiagarajan JJ, 2014, IEEE T IMAGE PROCESS, V23, P2905, DOI 10.1109/TIP.2014.2322938
   Thompson B, 1984, Canonical Correlation Analysis: Uses and Interpretation, V47
   Tosun A, 2010, INFORM SOFTWARE TECH, V52, P1242, DOI 10.1016/j.infsof.2010.06.006
   Turhan B, 2013, INFORM SOFTWARE TECH, V55, P1101, DOI 10.1016/j.infsof.2012.10.003
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Wang TJ, 2016, AUTOMAT SOFTW ENG, V23, P569, DOI 10.1007/s10515-015-0179-1
   Watanabe S., 2008, P 4 INT WORKSH PRED, P19
   Weston J., 2003, Journal of Machine Learning Research, V3, P1439, DOI 10.1162/153244303322753751
   Wu XX, 2015, IEEE T IMAGE PROCESS, V24, P4096, DOI 10.1109/TIP.2015.2445293
   Xia X, 2016, IEEE T SOFTWARE ENG, V42, P977, DOI 10.1109/TSE.2016.2543218
   Xia X, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P311, DOI 10.1109/SANER.2015.7081841
   Yeh YR, 2014, IEEE T IMAGE PROCESS, V23, P2009, DOI 10.1109/TIP.2014.2310992
   You D, 2011, IEEE T PATTERN ANAL, V33, P631, DOI 10.1109/TPAMI.2010.173
   Yue Jiang, 2008, 2008 IEEE International Symposium on Software Reliability Engineering, P197, DOI 10.1109/ISSRE.2008.54
   Zhang B, 2013, IEEE INT CONF BIG DA, DOI 10.1109/BigData.2013.6691612
   Zhang HY, 2007, IEEE T SOFTWARE ENG, V33, P635, DOI 10.1109/TSE.2007.70706
   Zhang ZW, 2017, AUTOMAT SOFTW ENG, V24, P47, DOI 10.1007/s10515-016-0194-x
   Zheng J, 2010, EXPERT SYST APPL, V37, P4537, DOI 10.1016/j.eswa.2009.12.056
   Zhimin He, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P45, DOI 10.1109/ESEM.2013.20
   Zhou DY, 2004, ADV NEUR IN, V16, P321
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 99
TC 79
Z9 85
U1 2
U2 34
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2018
VL 25
IS 2
BP 201
EP 245
DI 10.1007/s10515-017-0220-7
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF3PN
UT WOS:000431868200002
DA 2024-07-18
ER

PT J
AU Bagheri, E
   Ensan, F
AF Bagheri, Ebrahim
   Ensan, Faezeh
TI Semantic tagging and linking of software engineering social content
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Semantic tagging; Q&A websites; Social software engineering; Community
   interlinking; Web 2.0
ID UNDERSTANDABILITY; KNOWLEDGE
AB Social online communities and platforms play a significant role in the activities of software developers either as an integral part of the main activities or through complimentary knowledge and information sharing. As such techniques become more prevalent resulting in a wealth of shared information, the need to effectively organize and sift through the information becomes more important. Top-down approaches such as formal hierarchical directories have shown to lack scalability to be applicable to these circumstanes. Light-weight bottom-up techniques such as community tagging have shown promise for better organizing the available content. However, in more focused communities of practice, such as software engineering and development, community tagging can face some challenges such as tag explosion, locality of tags and interpretation differences, to name a few. To address these challenges, we propose a semantic tagging approach that benefits from the information available in Wikipedia to semantically ground the tagging process and provide a methodical approach for tagging social software engineering content. We have shown that our approach is able to provide high quality tags for social software engineering content that can be used not only for organizing such content but also for making meaningful and relevant content recommendation to the users both within a local community and also across multiple social online communities. We have empirically validated our approach through four main research questions. The results of our observations show that the proposed approach is quite effective in organizing social software engineering content and making relevant, helpful and novel content recommendations to software developers and users of social software engineering communities.
C1 [Bagheri, Ebrahim] Ryerson Univ, Toronto, ON, Canada.
   [Ensan, Faezeh] Athabasca Univ, Athabasca, AB, Canada.
C3 Toronto Metropolitan University; Athabasca University
RP Bagheri, E (corresponding author), Ryerson Univ, Toronto, ON, Canada.
EM bagheri@ryerson.ca; faezeh.ensan@athabascau.ca
RI Ensan, Faezeh/A-1466-2018
OI Bagheri, Ebrahim/0000-0002-5148-6237
CR Achananuparp P, 2012, IEEE INT CONF AUTOM, P334, DOI 10.1145/2351676.2351740
   Al-Kofahi J.M., 2010, SOFTW MAINT ICSM 201, P1
   [Anonymous], 2008, P 17 INT C WORLD WID
   [Anonymous], 2012, TECHNICAL REPORT
   [Anonymous], 2012, KDD
   [Anonymous], 2012, EMPIR SOFTW ENG
   [Anonymous], EMPIRICAL SOFTWARE E
   [Anonymous], 2007, WORLD WIDE WEB
   Bagheri E, 2012, AUTOMAT SOFTW ENG, V19, P335, DOI 10.1007/s10515-011-0099-7
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   Begel A., 2010, Software Engineering, 2010 ACM/IEEE 32nd International Conference on, V1, P125
   Begel A., 2010, Proceedings of the FSE/SDP workshop on Future of software engineering research, P33, DOI DOI 10.1145/1882362.1882370
   Carmel D, 2009, PROCEEDINGS 32ND ANNUAL INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P139, DOI 10.1145/1571941.1571967
   Chi EdH., 2008, P 19 ACM C HYPERTEXT, P81, DOI DOI 10.1145/1379092.1379110
   Frost R, 2007, IEEE SOFTWARE, V24, P114, DOI 10.1109/MS.2007.170
   Gabrilovich E, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1606
   Genero M, 2008, DATA KNOWL ENG, V64, P534, DOI 10.1016/j.datak.2007.09.011
   Gomez C., 2013, P 10 INT WORKSH MIN
   Gottipati S., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P323, DOI 10.1109/ASE.2011.6100069
   Gulli A., 2005, WWW 05, P902
   Guy M., 2006, D-Lib Magazine, V12, P1082
   Hale M., 2011, Proc. 6th Int'l Workshop on Traceability in Emerging Forms of Software Engineering, P71
   Hassan A.E, 2010, Proceedings of the FSE/SDP workshop on Future of Software Engineering Research, P161
   Hubbard D, 2010, IBM J RES DEV, V54, DOI 10.1147/JRD.2010.2042914
   Lee DL, 1997, IEEE SOFTWARE, V14, P67, DOI 10.1109/52.582976
   Lops P, 2013, J INTELL INF SYST, V40, P41, DOI 10.1007/s10844-012-0215-6
   Lozano Luis M., 2008, Methodology, P73, DOI [10.1027/1614-2241.4.2.73, DOI 10.1027/1614-2241.4.2.73]
   Pal A, 2012, ACM T INFORM SYST, V30, DOI 10.1145/2180868.2180872
   Pandita R, 2012, PROC INT CONF SOFTW, P815, DOI 10.1109/ICSE.2012.6227137
   Pollock L, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P4, DOI 10.1109/ICSM.2012.6405245
   Ponzanelli L, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1295, DOI 10.1109/ICSE.2013.6606701
   Ponzetto SP, 2007, J ARTIF INTELL RES, V30, P181, DOI 10.1613/jair.2308
   Posnett D, 2012, PROCEEDINGS OF THE 2012 ASE INTERNATIONAL CONFERENCE ON SOCIAL INFORMATICS (SOCIALINFORMATICS 2012), P199, DOI 10.1109/SocialInformatics.2012.67
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Sawadsky N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P812, DOI 10.1109/ICSE.2013.6606627
   Serrano MA, 2008, SOFTWARE QUAL J, V16, P79, DOI 10.1007/s11219-007-9030-7
   Sinclair J, 2008, J INF SCI, V34, P15, DOI 10.1177/0165551506078083
   SINGER L, 2012, 34 INT C SOFTW ENG I, P1325
   Singhal A., 1996, SIGIR Forum, P21
   Stieglitz S, 2013, J MANAGE INFORM SYST, V29, P217, DOI 10.2753/MIS0742-1222290408
   Storey MA., 2010, P FSE SDP WORKSH FUT, P359, DOI DOI 10.1145/1882362.1882435
   Strandberg K., 2013, NEW MEDIA SOC
   Treude C., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P231, DOI 10.1145/1810295.1810337
   Treude C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P804, DOI 10.1145/1985793.1985907
   Treude C, 2012, IEEE T SOFTWARE ENG, V38, P19, DOI 10.1109/TSE.2010.91
   Wang M, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2333112.2333120
   Wang SW, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P604, DOI 10.1109/ICSM.2012.6405332
   Wartena C, 2009, INT CONF INTELL SYST, P273, DOI 10.1109/ISDA.2009.130
   Xia X, 2013, IEEE WORK CONF MIN S, P287, DOI 10.1109/MSR.2013.6624040
   Yuan Tian, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P247, DOI 10.1109/MSR.2012.6224287
   Zangerle E, 2011, LECT NOTES COMPUT SC, V6984, P113, DOI 10.1007/978-3-642-24704-0_16
   Zesch T., 2007, Proceedings of the TextGraphs-2 Workshop NAACL-HLT 2007, P1
   [No title captured]
NR 53
TC 13
Z9 13
U1 0
U2 19
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2016
VL 23
IS 2
BP 147
EP 190
DI 10.1007/s10515-014-0146-2
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DG7KF
UT WOS:000372262500002
DA 2024-07-18
ER

PT J
AU Xia, X
   Gong, L
   Le, TDB
   Lo, D
   Jiang, LX
   Zhang, HY
AF Xia, Xin
   Gong, Liang
   Le, Tien-Duy B.
   Lo, David
   Jiang, Lingxiao
   Zhang, Hongyu
TI Diversity maximization speedup for localizing faults in single-fault and
   multi-fault programs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Fault localization; Test case prioritization; Single-fault program;
   Multi-fault program
AB Fault localization is useful for reducing debugging effort. Such techniques require test cases with oracles, which can determine whether a program behaves correctly for every test input. Although most fault localization techniques can localize faults relatively accurately even with a small number of test cases, choosing the right test cases and creating oracles for them are not easy. Test oracle creation is expensive because it can take much manual labeling effort (i.e., effort needed to decide whether the test cases pass or fail). Given a number of test cases to be executed, it is challenging to minimize the number of test cases requiring manual labeling and in the meantime achieve good fault localization accuracy. To address this challenge, this paper presents a novel test case selection strategy based on Diversity Maximization Speedup (Dms). Dms orders a set of unlabeled test cases in a way that maximizes the effectiveness of a fault localization technique. Developers are only expected to label a much smaller number of test cases along this ordering to achieve good fault localization results. We evaluate the performance of Dms on 2 different types of programs, single-fault and multi-fault programs. Our experiments with 411 faults from the Software-artifact Infrastructure Repository show (1) that Dms can help existing fault localization techniques to achieve comparable accuracy with on average 67 and 6 % fewer labeled test cases than previously best test case prioritization techniques for single-fault and multi-fault programs, and (2) that given a labeling budget (i.e., a fixed number of labeled test cases), Dms can help existing fault localization techniques reduce their debugging cost (in terms of the amount of code needed to be inspected to locate faults). We conduct hypothesis test and show that the saving of the debugging cost we achieve for the real C programs are statistically significant.
C1 [Xia, Xin] Zhejiang Univ, Coll Comp Sci & Technol, Hangzhou 310003, Zhejiang, Peoples R China.
   [Gong, Liang] Univ Calif Berkeley, Elect Engn & Comp Sci, Berkeley, CA 94720 USA.
   [Le, Tien-Duy B.; Lo, David; Jiang, Lingxiao] Singapore Management Univ, Sch Informat Syst, Singapore 178902, Singapore.
   [Zhang, Hongyu] Microsoft Res, Beijing, Peoples R China.
C3 Zhejiang University; University of California System; University of
   California Berkeley; Singapore Management University; Microsoft
RP Xia, X (corresponding author), Zhejiang Univ, Coll Comp Sci & Technol, Hangzhou 310003, Zhejiang, Peoples R China.
EM xxkidd@zju.edu.cn; gongliang13@eecs.berkeley.edu;
   btdle.2012@phdis.smu.edu.sg; davidlo@smu.edu.sg; lxjiang@smu.edu.sg;
   honzhang@microsoft.com
RI Xia, Xin/AAD-6217-2022; zhang, hongyu/ABC-3702-2021; Jiang,
   Lingxiao/E-8553-2012; Lo, David/A-2493-2012
OI Xia, Xin/0000-0002-6302-3256; zhang, hongyu/0000-0002-3063-9425; Jiang,
   Lingxiao/0000-0002-4336-8548; Lo, David/0000-0002-4367-7201
FU NSFC Program [61073006, 61103032]; Tsinghua University [2010THZ0];
   National Key Technology R&D Program of the Ministry of Science and
   Technology of China [2013BAH01B03]
FX This work is partially supported by NSFC Program (Nos. 61073006 and
   61103032), Tsinghua University project 2010THZ0, and National Key
   Technology R&D Program of the Ministry of Science and Technology of
   China (No. 2013BAH01B03). We thank researchers at University of
   Nebraska-Lincoln, Georgia Tech, and Siemens Corporate Research for the
   Software-artifact Infrastructure Repository. We would also like to thank
   the anonymous reviewers for providing us with constructive comments and
   suggestions.
CR Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   Ali S, 2009, IEEE INT CONF AUTOM, P76, DOI 10.1109/ASE.2009.89
   [Anonymous], ESEC FSE
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering (FSE'11), DOI DOI 10.1145/2025113.2025136
   [Anonymous], 2010, ISSTA
   [Anonymous], 2013, P 2013 INT S SOFTW T, DOI DOI 10.1145/2483760.2483767
   [Anonymous], ASE
   [Anonymous], 1990, Software testing techniques {
   [Anonymous], BIOMETRICS
   Arcuri Andrea., 2011, ISSTA
   Artzi S., 2010, ISSTA, P49, DOI DOI 10.1145/1831708.1831715
   Baudry B., 2006, 28th International Conference on Software Engineering Proceedings, P82, DOI 10.1145/1134285.1134299
   Bo Jiang, 2011, Proceedings of the 11th International Conference on Quality Software (QSIC 2011), P21, DOI 10.1109/QSIC.2011.37
   Bowring J. F., 2004, Software Engineering Notes, V29, P195, DOI 10.1145/1013886.1007539
   Campos J, 2013, IEEE INT CONF AUTOM, P257, DOI 10.1109/ASE.2013.6693085
   Debroy V, 2013, SOFTWARE PRACT EXPER, V43, P989, DOI 10.1002/spe.1146
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Gonzalez-Sanchez A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P83, DOI 10.1109/ASE.2011.6100153
   Gonzalez-Sanchez A, 2011, SOFTWARE PRACT EXPER, V41, P1105, DOI 10.1002/spe.1065
   Graybill F.A., 1994, REGRESSION ANAL CONC
   HAMLET RG, 1977, IEEE T SOFTWARE ENG, V3, P279, DOI 10.1109/TSE.1977.231145
   Jiang B, 2009, IEEE INT CONF AUTOM, P233, DOI 10.1109/ASE.2009.77
   Jiang Lingxiao., 2007, International Conference on Automated Software Engineering, P184
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Liblit B, 2003, ACM SIGPLAN NOTICES, V38, P141, DOI 10.1145/780822.781148
   Liblit B., 2005, ACM SIGPLAN INT C PR
   Lucia, 2014, J SOFTW-EVOL PROC, V26, P172, DOI 10.1002/smr.1616
   Nainar P.A., 2007, ISSTA, P5, DOI DOI 10.1145/1273463.1273467
   Naish L, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000791.2000795
   National Institute of Standards and Technology (NIST), 2002, SOFTW ERR COST US EC
   Pacheco C, 2005, LECT NOTES COMPUT SC, V3586, P504
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Renieris M., 2003, Proceedings. 18th IEEE International Conference on Automated Software Engineering (ASE'03), P141
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Santelices R, 2009, PROC INT CONF SOFTW, P56, DOI 10.1109/ICSE.2009.5070508
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Steimann F., 2012, Proceedings of the 2012 IEEE 23rd International Symposium on Software Reliability Engineering (ISSRE), P121, DOI 10.1109/ISSRE.2012.28
   Wong WE, 2014, IEEE T RELIAB, V63, P290, DOI 10.1109/TR.2013.2285319
   Xie T, 2006, LECT NOTES COMPUT SC, V4067, P380
   Xie XY, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522924
   Xu XF, 2011, INT J SOFTW ENG KNOW, V21, P803, DOI 10.1142/S0218194011005505
   Zeller A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/605466.605468
   Zeller A., 2005, ICSE
   Zhang LM, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P192, DOI 10.1109/ICSE.2013.6606565
NR 47
TC 17
Z9 20
U1 0
U2 9
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2016
VL 23
IS 1
SI SI
BP 43
EP 75
DI 10.1007/s10515-014-0165-z
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1TW
UT WOS:000369000800003
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Lee, KM
   Teng, WG
   Wu, JN
   Huang, KM
   Ko, YH
   Hou, TW
AF Lee, Kuen-Min
   Teng, Wei-Guang
   Wu, Jin-Neng
   Huang, Kuo-Ming
   Ko, Yao-Hsing
   Hou, Ting-Wei
TI Multicast and customized deployment of large-scale operating systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Cloud computing; Deployment; Multicast; Preboot execution environment
AB With the recent paradigm shift of cloud computing, deployment of operating systems (OSs) onto a large-scale computer network is becoming necessary. Note that there are usually numerous nodes with various functions in a cloud computing system. Thus, it is usually required to deploy different operating systems onto different nodes. In such a customized setting, conventional techniques of using unicast deployment to distribute a massive cloud OS onto thousands of nodes is time consuming and bandwidth-intensive. In this work, we thus propose a multicast deployment approach so as to significantly improve deployment efficiency. Furthermore, our multicast deployment approach can leverage existing configurations of the unicast counterpart. Specifically, the advantageous features of the proposed approach include the support of a reliable multicast protocol, a heterogeneous infrastructure, and cloud hypervisor environments. To evaluate the feasibility of the proposed approach in practical applications, CentOS and Ubuntu are used when implementing our deployment approach on several tens of nodes. Empirical studies show that both the required time for the entire distribution process, i.e., from starting delivery until the OS is ready, and the network bandwidth consumption are significantly reduced as compared with conventional unicast approaches. Consequently, less effort is required on monitoring and maintenance for system administrators.
C1 [Lee, Kuen-Min; Teng, Wei-Guang; Hou, Ting-Wei] Natl Cheng Kung Univ, Dept Engn Sci, Tainan 70101, Taiwan.
   [Lee, Kuen-Min; Wu, Jin-Neng; Huang, Kuo-Ming; Ko, Yao-Hsing] Ind Technol Res Inst, Cloud Serv Technol Ctr, Tainan, Taiwan.
C3 National Cheng Kung University; Industrial Technology Research Institute
   - Taiwan
RP Teng, WG (corresponding author), Natl Cheng Kung Univ, Dept Engn Sci, Tainan 70101, Taiwan.
EM allen_lee@itri.org.tw; wgteng@mail.ncku.edu.tw; LeslieWu@itri.org.tw;
   huangkuoming@itri.org.tw; sam_ko@itri.org.tw; hou@nc.es.ncku.edu.tw
CR Anderson BR, 2009, ITICSE 2009: PROCEEDING OF THE 2009 ACM SIGSE ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P293, DOI 10.1145/1595496.1562967
   [Anonymous], EUCALYPTUS CLOUD COM
   [Anonymous], 2009, DEP ELECT ENG COMPUT
   Berndt P., 2012, Proceedings of the 2012 8th International Conference on Computing Technology and Information Management (NCM and ICNIT), P794
   Bosin A., 2012, INTELL INF MANAG, V3, P52, DOI 10.4236/iim.2012.43008
   Cruz T, 2003, INT FED INFO PROC, V118, P321, DOI 10.1109/INM.2003.1194189
   Forell T., 2011, 2011 IEEE International Symposium on Parallel & Distributed Processing, Workshops and Phd Forum, P881, DOI 10.1109/IPDPS.2011.233
   GoGrid, 2012, GOGRID CLOUD HOSTING
   Google, 2012, GOOGL APPS BUS
   HP, 2012, HP STORE IT HOST IT
   Huang GL, 2012, J COMPUT, V7, P1681, DOI 10.4304/jcp.7.7.1681-1687
   IBM, 2012, IBM CLOUD COMP RETH
   Intel, 2012, INT PLATF MAN INT SP
   Intel, 2012, PREB EX ENV PXE SPEC
   Jeanvoine E., 2012, 8002 INRIA
   Kuusisto E., 2012, CENTRALIZED DATA CTR
   Li Jinhui, 2011, Proceedings of the 2011 3rd International Conference on Advanced Computer Control (ICACC 2011), P408, DOI 10.1109/ICACC.2011.6016442
   Linux, 2012, LINUX UDPCAST
   Microsoft, 2012, CLOUD COMP MICR VIEW
   Microsoft, 2012, UN SET PAR UN
   Moreno-Vozmediano R, 2009, FIRST WORKSHOP ON AUTOMATED CONTROL FOR DATACENTERS AND CLOUDS (ACDC '09), P19
   RackSpace, 2012, RACKSPACE OPEN CLOUD
   Schiffman J, 2011, IEEE SECUR PRIV, V9, P40, DOI 10.1109/MSP.2011.15
   Schmelzer S, 2011, P NETW OP MAN S, P1
   Yang CT, 2008, 2008 IEEE ASIA-PACIFIC SERVICES COMPUTING CONFERENCE, VOLS 1-3, PROCEEDINGS, P819, DOI 10.1109/APSCC.2008.266
   Yasuda S., 2011, P CSCC11, P315
   Yong-Ju Lee, 2011, Proceedings of the 2011 International Conference on Grid Computing & Applications (GCA 2011), P118
   Yong-Ju Lee, 2011, Proceedings of the 2011 13th International Conference on Advanced Communication Technology (ICACT). Smart Service Innovation through Mobile Interactivity, P859
NR 28
TC 4
Z9 4
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2014
VL 21
IS 4
SI SI
BP 443
EP 460
DI 10.1007/s10515-013-0139-6
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AQ9UD
UT WOS:000343201000002
DA 2024-07-18
ER

PT J
AU Gallardo, MD
   Sanán, D
AF del Mar Gallardo, Maria
   Sanan, David
TI Verification of complex dynamic data tree with mu-calculus
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model checking; Mu-calculus; Dynamic data structures
ID MODEL CHECKING; SHAPE-ANALYSIS
AB The problem of verifying software systems that use dynamic data structures (such as linked lists, queues, or binary trees) has attracted increasing interest over the last decade. Dynamic structures are not easily supported by verification techniques because, among other reasons, it is difficult to efficiently manage the pointer-based internal representation. This is a key aspect when, for instance, the goal is to construct a verification tool based on model checking techniques. In addition, since new nodes can be dynamically inserted or extracted from the structure, the shape of the dynamic data (and other more specific properties) may vary at runtime, with errors such as the non desirable sharing between two nodes being difficult to detect. In this paper, we propose to use mu-calculus to describe and analyze with model checking techniques dynamic data structures such as lists and trees. The expressiveness of mu-calculus makes it possible to naturally describe these structures. In addition, following the ideas of separation logic, the logic has been extended with a new operator capable of describing the non-sharing property, which is essential when analyzing dynamic data structures.
C1 [del Mar Gallardo, Maria; Sanan, David] Univ Malaga, E-29071 Malaga, Spain.
C3 Universidad de Malaga
RP Sanán, D (corresponding author), Univ Malaga, E-29071 Malaga, Spain.
EM gallardo@lcc.uma.es; sanan@lcc.uma.es
RI Sanan, David/AAA-8320-2020; Gallardo, Maria-del-Mar/JAC-7780-2023;
   Gallardo Melgarejo, Maria del Mar/G-4371-2014
OI Sanan, David/0000-0003-2755-3089; Gallardo Melgarejo, Maria del
   Mar/0000-0003-3481-5307
CR Anand Saswat, 2009, International Journal on Software Tools for Technology Transfer, V11, P53, DOI 10.1007/s10009-008-0090-1
   [Anonymous], INT J SOFTWARE TOOLS
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Avots D, 2005, PROC INT CONF SOFTW, P332
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Bogudlov I, 2007, LECT NOTES COMPUT SC, V4590, P221
   Bouajjani A, 2006, LECT NOTES COMPUT SC, V4134, P52
   Brochenin R, 2007, LECT NOTES COMPUT SC, V4514, P100, DOI 10.1007/978-3-540-72734-7_8
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Clarke EM, 1999, MODEL CHECKING, P1
   Cleaveland R., 1993, FMSD, P48
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   del Mar Gallardo Maria, 2010, Proceedings of the 2010 8th IEEE International Conference on Software Engineering and Formal Methods (SEFM 2010), P211, DOI 10.1109/SEFM.2010.34
   Demartini C, 1999, LECT NOTES COMPUT SC, V1680, P261
   Distefano D, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1449955.1449782
   Emerson E., 1996, DIMACS 31, P185
   Gallardo MD, 2009, J AUTOM REASONING, V42, P229, DOI 10.1007/s10817-009-9124-y
   Gallardo MD, 2002, LECT NOTES COMPUT SC, V2477, P395
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Holzmann GerardJ., 1995, PROC 15 INT C PROTOC, P301
   Holzmann GJ, 2004, LECT NOTES COMPUT SC, V2989, P76
   Huth M, 2001, LECT NOTES COMPUT SC, V2028, P155
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   Klarlund N., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P196, DOI 10.1145/158511.158628
   Lerda F., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P80
   Manevich R, 2005, LECT NOTES COMPUT SC, V3385, P181
   Moller A, 2001, ACM SIGPLAN NOTICES, V36, P221, DOI 10.1145/381694.378851
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sagiv M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P105, DOI 10.1145/292540.292552
   Stirling C., 1996, Logics for Concurrency. Structure versus Automata, P149
   Visser W, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P3, DOI 10.1109/ASE.2000.873645
NR 32
TC 0
Z9 0
U1 0
U2 8
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2013
VL 20
IS 4
BP 569
EP 612
DI 10.1007/s10515-012-0113-8
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200MY
UT WOS:000323074400004
DA 2024-07-18
ER

PT J
AU Nöhrer, A
   Egyed, A
AF Noehrer, Alexander
   Egyed, Alexander
TI C2O configurator: a tool for guided decision-making
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
AB Decision models are widely used in software engineering to describe and restrict decision-making (e.g., deriving a product from a product-line). Since decisions are typically interdependent, it is often neither obvious which decisions have the most significant impact nor which decisions might ultimately conflict. Unfortunately, the current state-of-the-art provides little support for dealing with such situations. On the one hand, some conflicts can be avoided by providing more freedom in which order decisions are made (i.e., most important decisions first). On the other hand, conflicts are unavoidable at times, and living with conflicts may be preferable over forcing the user to fix them right away-particularly because fixing conflicts becomes easier as more is known about a user's intentions. This paper introduces the C2O (Configurator 2.0) tool for guided decision-making. The tool allows the user to answer questions in an arbitrary order-with and without the presence of inconsistencies. While giving users those freedoms, it still supports and guides them by (i) rearranging the order of questions according to their potential to minimize user input, (ii) providing guidance to avoid follow-on conflicts, and (iii) supporting users in fixing conflicts at a later time.
C1 [Noehrer, Alexander; Egyed, Alexander] Johannes Kepler Univ Linz, Inst Syst Engn & Automat, A-4040 Linz, Austria.
C3 Johannes Kepler University Linz
RP Egyed, A (corresponding author), Johannes Kepler Univ Linz, Inst Syst Engn & Automat, A-4040 Linz, Austria.
EM alexander.egyed@jku.at
RI Egyed, Alexander/E-2632-2017
OI Egyed, Alexander/0000-0003-3128-5427
FU Austrian Science Fund (FWF) [P23115-N23]; Austrian Center of Competence
   in Mechatronics (ACCM); K2-Center of the COMET/K2 program; funds of the
   Austrian Republic; Provincial Government of Upper Austria; Austrian
   Science Fund (FWF) [P23115] Funding Source: Austrian Science Fund (FWF)
FX The authors would like to thank Thomas Schartmuller for his work on the
   GUI. The work was kindly supported by the Austrian Science Fund (FWF):
   P23115-N23 and the Austrian Center of Competence in Mechatronics (ACCM),
   a K2-Center of the COMET/K2 program, which is aided by funds of the
   Austrian Republic and the Provincial Government of Upper Austria. The
   authors thank all involved partners for their support.
CR [Anonymous], WORKSH SOFTW VAR MAN
   [Anonymous], 2008, J. Satisf. Boolean Model. Comput., DOI 10.3233/sat190039
   [Anonymous], P IEEE ACM INT C AUT
   Balzer R., 1991, P 13 INT C SOFTW ENG, P158
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Berre D. L., 2010, J SATISF BOOLEAN MOD, V7, P56
   Botterweck G., 2009, P 3 INT WORKSH VAR M, V29, P165
   Cobleigh R. L., 2006, P 14 ACM SIGSOFT INT, P208, DOI [10.1145/1181775.1181801, DOI 10.1145/1181775.1181801]
   DAVIS M, 1962, COMMUN ACM, V5, P394, DOI 10.1145/368273.368557
   Dhungana D., 2007, SOFTWARE PRODUCT LIN, P151
   Dhungana D, 2011, AUTOMAT SOFTW ENG, V18, P77, DOI 10.1007/s10515-010-0076-6
   Egyed A., 2006, 28th International Conference on Software Engineering Proceedings, P381, DOI 10.1145/1134285.1134339
   Grunbacher Paul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P351, DOI 10.1109/ASE.2008.46
   Haw D., 1994, INTERFACES DATABASE, P25
   Hayes J., 2005, P 3 INT WORKSHOP TRA, P20
   La Rosa M, 2009, SOFTW SYST MODEL, V8, P251, DOI 10.1007/s10270-008-0090-3
   MacLean A., 1989, SIGCHI Bulletin, P247, DOI 10.1145/67450.67497
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Mendonca Marcilio, 2009, SPLC' 09, P231
   MILLER GA, 1956, PSYCHOL REV, V63, P81, DOI 10.1037/h0043158
   Nohrer A., 2012, VAMOS, P83
   Nohrer A., 2011, SOFTWARE PRODUCT LIN
   NShrer A., 2010, Fourth International Workshop on Variability Modelling of Software-Intensive Systems, Linz, Austria, January 27-29, P107
   Pleuss Andreas, 2011, P 15 INT SOFTW PROD, V2, DOI [10.1145/2019136.2019161, DOI 10.1145/2019136.2019161]
   She S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P461, DOI 10.1145/1985793.1985856
   Siegmund N., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P160, DOI 10.1109/SPLC.2011.20
   Trinidad P, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P359, DOI 10.1109/SPLC.2008.50
   Tseitin G., 1983, AUTOMATION REASONING, P466, DOI [DOI 10.1007/978-3-642-81955-1_28, 10.1007/978-3-642-81955-128, DOI 10.1007/978-3-642-81955-128, 10.1007/978-3-642-81955-1_28]
   van Nimwegen C., 2006, Conference on Human Factors in Computing Systems. CHI2006, P917
   Vicente KJ, 2001, IEEE INTELL SYST, V16, P74, DOI 10.1109/5254.972095
   White J, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P225, DOI 10.1109/SPLC.2008.16
NR 31
TC 14
Z9 14
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2013
VL 20
IS 2
SI SI
BP 265
EP 296
DI 10.1007/s10515-012-0117-4
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 095SE
UT WOS:000315354200005
DA 2024-07-18
ER

PT J
AU Hooimeijer, P
   Weimer, W
AF Hooimeijer, Pieter
   Weimer, Westley
TI STRSOLVE: solving string constraints lazily
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE String; Regular language; Decision procedure; Scalability
ID DECISION PROCEDURE; PRECISE ANALYSIS; ALGORITHMS
AB Reasoning about strings is becoming a key step at the heart of many program analysis and testing frameworks. Stand-alone string constraint solving tools, called decision procedures, have been the focus of recent research in this area. The aim of this work is to provide algorithms and implementations that can be used by a variety of program analyses through a well-defined interface. This separation enables independent improvement of string constraint solving algorithms and reduces client effort.
   We present StrSolve, a decision procedure that reasons about equations over string variables. Our approach scales well with respect to the size of the input constraints, especially compared to other contemporary techniques. Our approach performs an explicit search for a satisfying assignment, but constructs the search space lazily based on an automata representation. We empirically evaluate our approach by comparing it with four existing string decision procedures on a number of tasks. We find that our prototype is, on average, several orders of magnitude faster than the fastest existing approaches, and present evidence that our lazy search space enumeration accounts for most of that benefit.
RP Hooimeijer, P (corresponding author), 85 Engineers Way,POB 400740, Charlottesville, VA 22904 USA.
EM pieter@cs.virginia.edu; weimer@cs.virginia.edu
FU National Science Foundation [CCF-0905236, CCF-0954024, CNS-0716478]; Air
   Force Office of Scientific Research [FA8750-11-2-0039]; MURI
   [FA9550-07-1-0532]; DARPA [FA8650-10-C-7089]
FX We gratefully acknowledge the support of the National Science Foundation
   (grants CCF-0905236, CCF-0954024 and CNS-0716478), Air Force Office of
   Scientific Research grant FA8750-11-2-0039, MURI grant FA9550-07-1-0532,
   and DARPA grant FA8650-10-C-7089.
CR [Anonymous], 2008, TOOLS ALGORITHMS CON
   [Anonymous], 2005, International Conference on World Wide Web, DOI [10.1145/1060745.1060809, DOI 10.1145/1060745.1060809]
   Axelsson R, 2008, LECT NOTES COMPUT SC, V5126, P410, DOI 10.1007/978-3-540-70583-3_34
   Balzarotti D, 2008, P IEEE S SECUR PRIV, P387, DOI 10.1109/SP.2008.22
   BJORNER N, 2009, TOOLS ALGORITHMS CON
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Cadar C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1066, DOI 10.1145/1985793.1985995
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Fu X, 2013, FORM ASP COMPUT, V25, P847, DOI 10.1007/s00165-011-0214-3
   Fu Xiang, 2010, P NASA C P, P67
   Fujitsu Laboratories: Fujitsu develops technology to enhance comprehensive testing of Java programs, 2010, FUJ DEV TECHN ENH CO
   Ganesh V, 2007, LECT NOTES COMPUT SC, V4590, P519
   Godefroid P., 2008, NETW DISTR SEC S
   Godefroid P., 2008, PROGRAMMING LANGAUGE
   Godefroid P., 2005, PROGRAMMING LANGAUGE
   HENRIKSEN J, 1995, LNCS, V1019
   Hooimeijer P, 2009, ACM SIGPLAN NOTICES, V44, P188, DOI 10.1145/1543135.1542498
   Hooimeijer Pieter., 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, P377, DOI DOI 10.1145/1858996.1859080
   Hooimeijer Pieter., 2011, Proceedings of the 20th USENIX Conference on Security, SEC'11, P1
   Hooirneijer P, 2011, LECT NOTES COMPUT SC, V6538, P248, DOI 10.1007/978-3-642-18275-4_18
   Ilie L, 2003, INFORM COMPUT, V186, P140, DOI 10.1016/S0890-5401(03)00090-7
   Kiezun A, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P105
   Lakhotia K, 2009, 2009 TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE-PRACTICE AND RESEARCH TECHNIQUES, TAIC PART 2009, P95, DOI 10.1109/TAICPART.2009.15
   Lakhotia K, 2010, J SYST SOFTWARE, V83, P2379, DOI 10.1016/j.jss.2010.07.026
   Lakhotia Kiran., 2008, Proceedings of the Annual Conference on Genetic and Evolution- ary Computation (GECCO), P1759, DOI [10.1145/1389095.1389435, DOI 10.1145/1389095.1389435]
   Li Nuo, 2009, AUTOMATED SOFTWARE E
   Majumdar R, 2007, PROC INT CONF SOFTW, P416
   Majumdar Rupak, 2007, 22 IEEE ACM INT C AU, P134
   Moller A, 2001, ACM SIGPLAN NOTICES, V36, P221, DOI 10.1145/381694.378851
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Pasareanu Corina S., 2008, P 2008 INT S SOFTW T, P15, DOI [DOI 10.1145/1390630.1390635, DOI 10.1145/1390630]
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Sipser M., 2013, Introduction to the theory of computation, V3
   Su ZD, 2006, ACM SIGPLAN NOTICES, V41, P372, DOI 10.1145/1111320.1111070
   Tateishi Takaaki., 2011, P 2011 INT S SOFTWAR, P166
   Veanes Margus, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P498, DOI 10.1109/ICST.2010.15
   Veanes M, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2103621.2103674
   Wassermann G, 2007, ACM SIGPLAN NOTICES, V42, P32, DOI 10.1145/1273442.1250739
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Xie YC, 2005, LECT NOTES COMPUT SC, V3576, P139
   Xie YC, 2006, USENIX Association Proceedings of the 15th USENIX Security Symposium, P179
   Yu F., 2010, CIAA, P290
   YU F, 2009, TOOLS ALGORITHMS CON
   Yu F, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P251, DOI 10.1145/1985793.1985828
   Yu F, 2009, IEEE INT CONF AUTOM, P605, DOI 10.1109/ASE.2009.20
NR 48
TC 24
Z9 25
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2012
VL 19
IS 4
SI SI
BP 531
EP 559
DI 10.1007/s10515-012-0111-x
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 988QT
UT WOS:000307506300006
DA 2024-07-18
ER

PT J
AU Kessentini, M
   Sahraoui, H
   Boukadoum, M
AF Kessentini, Marouane
   Sahraoui, Houari
   Boukadoum, Mounir
TI Example-based model-transformation testing
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model transformation testing; Artificial immune system; Traceability
AB A major concern in model-driven engineering is how to ensure the quality of the model-transformation mechanisms. One validation method that is commonly used is model transformation testing. When using this method, two important issues need to be addressed: the efficient generation/selection of test cases and the definition of oracle functions that assess the validity of the transformed models. This work is concerned with the latter. We propose a novel oracle function for model transformation testing that relies on the premise that the more a transformation deviates from well-known good transformation examples, the more likely it is erroneous. More precisely, the proposed oracle function compares target test cases with a base of examples that contains good quality transformation traces, and then assigns a risk level to them accordingly. Our approach takes inspiration from the biological metaphor of immune systems, where pathogens are identified by their difference with normal body cells. A significant feature of the approach is that one no longer needs to define an expected model for each test case. Furthermore, the detected faulty candidates are ordered by degree of risk, which helps the tester inspect the results. The validation results on a transformation mechanism used by an industrial partner confirm the effectiveness of our approach.
C1 [Kessentini, Marouane; Sahraoui, Houari] Univ Montreal, DIRO, Montreal, PQ, Canada.
   [Kessentini, Marouane] King Saud Univ, Coll Comp & Informat Sci, Riyadh, Saudi Arabia.
   [Boukadoum, Mounir] Univ Quebec, DI, Montreal, PQ H3C 3P8, Canada.
C3 Universite de Montreal; King Saud University; University of Quebec;
   University of Quebec Montreal
RP Kessentini, M (corresponding author), Univ Montreal, DIRO, Montreal, PQ, Canada.
EM kessentm@iro.umontreal.ca; sahraoui@iro.umontreal.ca;
   Boukadoum.mounir@uqam.ca
CR ALANEN M, 2003, UML US 03
   [Anonymous], 1989, SEARCH OPT MACHINE L
   [Anonymous], 1997, Immunology
   Baresel A., 2004, Software Engineering Notes, V29, P108, DOI 10.1145/1013886.1007527
   BARESEL A, 2002, GECCO 2002, P1329
   BAUDRY B, 2006, IMDT WORKSH
   BAUDRY B, 2002, ASE
   BEZIVIN J, 2005, MTIP WORKSH
   BEZIVIN J, 2004, OOPSLA GPCE 2004 WOR
   BROTTIER E, 2006, P SSRE
   CARIOU E, 2004, P WORKSH OCL MDE
   CARRILLO H, 1988, SIAM J APPL MATH, V48, P1073, DOI 10.1137/0148063
   Catal C, 2007, PROCEEDINGS OF THE IASTED INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P285
   CZARNECKI K, 2003, OOSPLA 2003 AN US
   Darabos Andrea., 2006, Proceedings of the 5th International Workshop on Graph Transformations and Visual Modeling Techniques, P69
   Dasgupta D, 2003, IEEE C EVOL COMPUTAT, P123, DOI 10.1109/CEC.2003.1299565
   FALLERI JR, 2006, P EUR C MDA TRAC WOR
   Fleurey F., 2004, 15 IEEE INT S SOFTW
   FLEUREY F, 2008, SOFTWARE SYSTEMS MOD
   Forrest S., 1994, P 1994 IEEE S SEC PR
   FRANCE R, 2007, ICSE 2007 FUTURE SOF
   Gonzalez F. A., 2003, Genetic Programming and Evolvable Machines, V4, P383, DOI 10.1023/A:1026195112518
   Harman M., 2007, P 29 IEEE INT C SOFT
   KESSENTINI M, 2010, J SOFTW SYST MODEL, DOI DOI 10.1007/S10270-010-0175-7
   Kessentini M, 2008, LECT NOTES COMPUT SC, V5301, P159, DOI 10.1007/978-3-540-87875-9_12
   Khuller S, 1996, ACM COMPUT SURV, V28, P43, DOI 10.1145/234313.234334
   KOLOVOS DS, 2006, P GAMMA
   KUSTER J, 2006, MODEVA 06
   Kuster J.M., 2006, Software and Systems Modeling, V5, P233, DOI [10.1007/s10270-006-0018-8, DOI 10.1007/S10270-006-0018-8]
   Lin Y., 2005, MODEL DRIVEN SOFTWAR
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   MOTTU JM, 2008, P ICST08
   MOTTU JM, 2006, P ECMDA 06 EUR C MOD
   Sampath P, 2007, RTAS 2007: 13TH REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P203
   Steel J, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P151, DOI 10.1109/ISSRE.2004.23
   SUN Y, 2009, MODELS09
   VARRO D, 2007, ACM S SAC 2007
   VARRO D, 2003, CSDUML 2003 CRITICAL, P63
   WIMMER M, 2007, HICSS 40 HAW INT C S
NR 39
TC 16
Z9 19
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2011
VL 18
IS 2
BP 199
EP 224
DI 10.1007/s10515-010-0079-3
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 737DG
UT WOS:000288548300004
DA 2024-07-18
ER

PT J
AU Menzies, T
   Milton, Z
   Turhan, B
   Cukic, B
   Jiang, Y
   Bener, A
AF Menzies, Tim
   Milton, Zach
   Turhan, Burak
   Cukic, Bojan
   Jiang, Yue
   Bener, Ayse
TI Defect prediction from static code features: current results,
   limitations, new approaches
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Defect prediction; Static code features; WHICH
ID CRITIQUE
AB Building quality software is expensive and software quality assurance (QA) budgets are limited. Data miners can learn defect predictors from static code features which can be used to control QA resources; e.g. to focus on the parts of the code predicted to be more defective.
   Recent results show that better data mining technology is not leading to better defect predictors. We hypothesize that we have reached the limits of the standard learning goal of maximizing area under the curve (AUC) of the probability of false alarms and probability of detection "AUC(pd, pf)"; i.e. the area under the curve of a probability of false alarm versus probability of detection.
   Accordingly, we explore changing the standard goal. Learners that maximize "AUC(effort, pd)" find the smallest set of modules that contain the most errors. WHICH is a meta-learner framework that can be quickly customized to different goals. When customized to AUC(effort, pd), WHICH out-performs all the data mining methods studied here. More importantly, measured in terms of this new goal, certain widely used learners perform much worse than simple manual methods.
   Hence, we advise against the indiscriminate use of learners. Learners must be chosen and customized to the goal at hand. With the right architecture (e.g. WHICH), tuning a learner to specific local business goals can be a simple task.
C1 [Menzies, Tim; Milton, Zach; Cukic, Bojan; Jiang, Yue] W Virginia Univ, Morgantown, WV 26506 USA.
   [Turhan, Burak] Univ Oulu, Oulu, Finland.
   [Bener, Ayse] Bogazici Univ, Istandbul, Turkey.
C3 West Virginia University; University of Oulu; Bogazici University
RP Menzies, T (corresponding author), W Virginia Univ, Morgantown, WV 26506 USA.
EM tim@menzies.us; zmilton@mix.wvu.edu; burak.turhan@oulu.fi;
   bojan.cukic@mail.csee.wvu.edu; yjiang1@mix.wvu.edu; bener@boun.edu.tr
RI Cukic, Bojan/B-8287-2009; Menzies, Tim/X-7680-2019; Turhan,
   Burak/G-7400-2011; Basar, Ayse/ABF-9265-2020
OI Menzies, Tim/0000-0002-5040-3196; Turhan, Burak/0000-0003-1511-2163;
   Basar, Ayse/0000-0003-4934-8326; Cukic, Bojan/0000-0001-7130-9054
FU NSF [CCF-0810879]; Turkish Scientific Research Council (Tubitak) [EEEAG
   108E014]; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [0810879] Funding Source: National
   Science Foundation
FX This research was supported by NSF grant CCF-0810879 and the Turkish
   Scientific Research Council (Tubitak EEEAG 108E014). For an earlier
   draft, see http://menzies.us/pdf/08bias.pdf.
CR [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], IEEE T SOFTW ENG
   [Anonymous], 5 ACM IEEE INT S EMP
   [Anonymous], 2002, P IEEE ASE 2002
   [Anonymous], 1995, Empirical methods for artificial intelligence
   Blewitt ME, 2008, NAT GENET, V40, P663, DOI 10.1038/ng.142
   Bradley P. S., 1998, Proceedings Fourth International Conference on Knowledge Discovery and Data Mining, P9
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   CHAPMAN M, 2002, P NASA SOFTW ASS S C
   Cohen W.W., 1995, P 12 INT C MACH LEAR, P115, DOI [DOI 10.1016/B978-1-55860-377-6.50023-2, 10.1016/B978-1-55860-377-6.50023-2]
   COVER TM, 1967, IEEE T INFORM THEORY, V13, P21, DOI 10.1109/TIT.1967.1053964
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Dietterich TG, 1997, AI MAG, V18, P97
   Domingos P, 1997, MACH LEARN, V29, P103, DOI 10.1023/A:1007413511361
   Elkan C., 2001, P 17 INT JOINT C ART, V17, P973
   FAGAN ME, 1986, IEEE T SOFTWARE ENG, V12, P744, DOI 10.1109/TSE.1986.6312976
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   FAWCETT T, 2001, 2001 IEEE INT C DAT
   FENTON N, 1994, IEEE SOFTWARE, V86, P95
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   FENTON NE, 1995, SOFTWARE METRICS RIG
   FREUND Y, 1997, JCSS J COMPUT SYST S, V55
   Hall GA, 2000, J SYST SOFTWARE, V54, P111, DOI 10.1016/S0164-1212(00)00031-5
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Huang J, 2005, IEEE T KNOWL DATA EN, V17, P299, DOI 10.1109/TKDE.2005.50
   JIANG Y, 2008, DEFECTS
   Jiang Y, 2008, EMPIR SOFTW ENG, V13, P561, DOI 10.1007/s10664-008-9079-3
   Khoshgoftaar TM, 2003, EMPIR SOFTW ENG, V8, P255, DOI 10.1023/A:1024424811345
   Khoshgoftaar TM, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P66, DOI 10.1109/ISSRE.2001.989459
   KHOSHGOFTAAR TM, 2001, RECENT ADV RELIABILI, P247
   KORU A, 2007, P PROMISE 07 ICSE
   Koru AG, 2008, EMPIR SOFTW ENG, V13, P473, DOI 10.1007/s10664-008-9080-x
   Koru AG, 2009, IEEE T SOFTWARE ENG, V35, P293, DOI 10.1109/TSE.2008.90
   LESSMANN S, 2008, IEEE T SOFTW ENG
   Leveson N.G., 1995, Safeware: System Safety and Computers
   Littlewood B, 1997, IEEE T SOFTWARE ENG, V23, P673, DOI 10.1109/32.637384
   Lowry M, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P322, DOI 10.1109/ASE.1998.732690
   LUTZ R, 2003, J SYST SOFTW
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Menzies T, 2000, IEEE SOFTWARE, V17, P107, DOI 10.1109/52.877876
   MENZIES T, 2004, 2004 IEEE C HIGH ASS
   MILTON Z, 2008, THESIS
   Mockus A, 2005, PROC INT CONF SOFTW, P225
   Musa J. D., 1987, Software Reliability: Measure-ment, Prediction, Application
   Nagappan N, 2005, PROC INT CONF SOFTW, P580, DOI 10.1145/1062455.1062558
   Nagappan N., 2005, ICSE 2005
   NAGAPPAN N, 2008, ICSE 08
   Newman D., 1998, UCI REPOSITORY MACHI
   NIKORA A, 2004, PERSONNEL COMMUNICAT
   NIKORA A, 2003, 9 INT SOFTW METR S M
   OSTRAND TJ, 2004, INT S SOFTW TEST AN, P86, DOI DOI 10.1145/1007512.1007524
   PORTER AA, 1990, IEEE SOFTWARE, V7, P46, DOI 10.1109/52.50773
   PUGH W, 1990, COMMUN ACM, V33, P668, DOI 10.1145/78973.78977
   Quinlan J.R., 1992, P AI 92, P343, DOI DOI 10.1142/9789814536271
   Quinlan J. R., 1993, PROGRAMS MACHINE LEA
   RAFFO D, 2005, COMMUNICATION
   Rakitin StevenR., 2001, ART H COMP SCI LIBR, V2nd
   SHEPPERD M, 1994, J SYST SOFTWARE, V26, P197, DOI 10.1016/0164-1212(94)90011-6
   Shull F, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P249, DOI 10.1109/METRIC.2002.1011343
   Shull F, 2000, COMPUTER, V33, P73, DOI 10.1109/2.869376
   SRINIVASAN K, 1995, IEEE T SOFTWARE ENG, V21, P126, DOI 10.1109/32.345828
   Tang W, 2004, PROC INT C TOOLS ART, P373
   TIAN J, 1995, IEEE T SOFTWARE ENG, V21, P641, DOI 10.1109/32.403788
   TOSUN A, 2010, IAAI 10
   Tosun A., 2009, PROMISE'09
   TURHAN B, 2009, EMPIR SOFTW ENG, V68, P278
   Turner J., 2006, PREDICTIVE APPROACH
   VOAS JM, 1995, IEEE SOFTWARE    MAY, P17
   WEYUKER E, 2008, EMPIR SOFTW ENG
   Witten I., 2002, ACM Sigmod Rec., V31, P76, DOI [10.1145/507338.507355, DOI 10.1145/507338.507355]
   Yang Y, 2006, LECT NOTES COMPUT SC, V4212, P533
   Zimmermann T., 2009, ESEC FSE 09
NR 73
TC 276
Z9 311
U1 3
U2 12
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2010
VL 17
IS 4
BP 375
EP 407
DI 10.1007/s10515-010-0069-5
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 630EZ
UT WOS:000280257100002
DA 2024-07-18
ER

PT J
AU Larson, E
AF Larson, Eric
TI SUDS: an infrastructure for creating dynamic software defect detection
   tools
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software testing; Software defect detection; Software engineering;
   Static analysis; Instrumentation; Testing tools
AB SUDS is a powerful infrastructure for creating dynamic software defect detection tools. It contains phases for both static analysis and dynamic instrumentation allowing users to create tools that take advantage of both paradigms. The results of static analysis phases can be used to improve the quality of dynamic defect detection tools created with SUDS by focusing the instrumentation on types of defects, sources of data, or regions of code. The instrumentation engine is designed in a manner that allows users to create their own correctness models quickly but is flexible to support construction of a wide range of different tools. The effectiveness of SUDS is demonstrated by showing that it is capable of finding bugs and that performance improves when static analysis is used to eliminate unnecessary instrumentation.
C1 Seattle Univ, Dept Comp Sci & Software Engn, Seattle, WA 98122 USA.
C3 Seattle University
RP Larson, E (corresponding author), Seattle Univ, Dept Comp Sci & Software Engn, Seattle, WA 98122 USA.
EM elarson@seattleu.edu
CR AKRITIDIS P, 2009, 2009 USENIX SEC C
   ANAND S, 2007, P INT C TOOLS ALG CO
   [Anonymous], 1999, 98991999 ISOIEC
   [Anonymous], P INT C COMP CONSTR
   [Anonymous], P INT S EMP SOFTW EN
   [Anonymous], 1976, COMMUNICATIONS ACM
   [Anonymous], P S PRINC PROGR LANG
   [Anonymous], SLOCCount
   [Anonymous], 2007, P 2007 INT S SOFTW T
   [Anonymous], P 2 INT C TESTS PROO
   [Anonymous], JAVA PATHFINDER
   [Anonymous], 2008, ISSTA
   AUSTIN T. M., 1994, P C PROGR LANG DES I
   BALL T, 2002, P S PRINC PROGR LANG
   Bessey A., 2010, COMMUNICATIONS ACM
   BINKLEY S, 2007, ACM T SOFTWARE ENG M
   BODDEN E, 2008, P INT S FDN SOFTW EN
   BODIK R, 2000, P C PROGR LANG DES I
   Bush W. R., 2000, SOFTWARE PRACTICE EX, V20
   Cadar C., 2008, KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs
   CHEN H., 2002, P 9 ACM C COMP COMM
   CHESS B, 2008, INFORM SECURITY TECH, V13
   CLAUSE J., 2007, P INT C AUT SOFTW EN
   CLAUSE J, 2009, P INT S SOFTW TEST A
   DACOSTA D, 2003, P INT C SOFTW MAINT
   DOR N, 2003, P C PROGR LANG DES I
   Elkarablieh B., 2009, P INT S SOFTW TEST A
   Forrester J. E., 2000, P 4 USENIX WIND SYST
   Ganesh V., 2009, P INT C SOFTW ENG
   GODEFROID P, 2005, P ACM SIGPLAN C PROG
   GODEFROID P., 2008, AUTOMATED WHITEBOX F
   GODEFROID P, 2008, P 8 ACM INT C EMB SO
   Haldar Vivek, 2005, P 21 ANN COMP SEC AP P 21 ANN COMP SEC AP
   HASTINGS R, 1992, P 1992 WINT US C
   HAUGH E, 2003, P 10 NETW DISTR SYST
   HENDREN L, 1992, P 5 INT WORKSH LANG
   HIND M, 1999, ACM T PROGRAMMING LA
   Holzmann G. J., 1997, IEEE T SOFTWARE ENG
   Jones R. W. M., 1997, P 3 INT WORKSH AUT D
   KIEZUM A, 2009, P INT S SOFTW TEST A
   LARSON E, 2009, P 17 IEEE INT C PROG
   LARSON E, 2003, P 12 USENIX SEC S
   LE W, 2008, P INT S FDN SOFTW EN
   LHEE K.-S., 2002, P 11 USENIX SEC S
   Luk C.-K., 2005, P C PROGR LANG DES I
   McMillan K. L., 1993, Symbolic model checking
   MERRILL J, 2003, P GCC DEV SUMM
   *MICR CORP, MICR CORP PHOEN COMP
   MOLNAR D, 2009, P 2009 USENIX SEC C
   Musuvathi M., 2002, P 5 S OP SYST DES IM
   MYERS A, 1999, P S PRINC PROGR LANG
   MYERS AC, 2000, ACM T SOFTWARE ENG M, V9
   NETHERCOTE N., 2007, P C PROGR LANG DES I
   Newsome J., 2005, Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software
   Nguyen-Tuong A, 2005, P 20 IFIP INT INF SE
   Pan K, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P31
   *PAR CORP, PAR CORP AUT C C RUN
   PASAREANU C., 2008, P INT S SOFTW TEST A
   RINGENBURG M, 2005, P C COMP COMM SEC
   Sen Koushik, 2005, P S FDN SOFTW ENG
   SHANKAR U, 2001, P 10 USENIX SEC S
   Srivastava A., 1994, P C PROGR LANG DES I
   TIKIR M, 2002, P ACM SIGSOFT INT S
   Tip F., 1995, JOURNAL OF PROGRAMMING LANGUAGES
   VISSER W, 2003, AUTOM SOFTW ENG J
   Wagner D., 2000, P NETWORK DISTRIBUTE
   Weiser M., 1981, P 5 INT C SOFTW ENG
   WILLIAMS N, 2005, P 5 EUR DEP COMP C
   Xie Y., 2003, P 9 EUR SOFTW ENG C
   XIN B, 2009, P INT S SOFTW TEST A
   Zeller Andreas., 2002, Proceedings of the 10th ACM SIGSOFT Symposium on Foundations of Software Engineering, SIGSOFT '02/FSE-10, P1, DOI DOI 10.1145/587051.587053
   1995, POINTER INTENSIVE BE
   PERLSEC PERL SECURIT
NR 73
TC 2
Z9 2
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2010
VL 17
IS 3
BP 301
EP 346
DI 10.1007/s10515-010-0067-7
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 608HD
UT WOS:000278573200004
DA 2024-07-18
ER

PT J
AU Volanschi, N
AF Volanschi, Nic
TI A portable compiler-integrated approach to permanent checking
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 21st IEEE International Conference on Automated Software Engineering
CY SEP   22, 2006
CL Tokyo, JAPAN
SP IEEE Comp Soc TCSE, ACM SIGSOFT, ACM SIGART, ACM Japan Chapter, Informat Proc Soc Japan, ASE Program Comm, Natl Inst Informat Japan, Univ Toronto, CSK Holdings Corp, Hatachi Ltd, NEC Corp, NTT Data Corp, Toshiba Corp, Toshiba Informat Syst Corp
DE extensible compilers; user-defined checks
AB Program checking is now a mature technology, but is not yet used on a large scale. We identify one cause of this gap in the decoupling of checking tools from the everyday development tools. To radically change the situation, we explore the integration of simple user-defined checks into the core of every development process: the compiler. The checks we implement express constrained reachability queries in the control flow graph taking the form "from x to y avoiding z", where x, y, and z are native code patterns containing a blend of syntactic, semantic and dataflow information. Compiler integration enables continuous checking throughout development, but also a pervasive propagation of checking technology. This integration poses some interesting challenges, including tight bounds on the acceptable overhead, but in turn opens up new perspectives. Factorizing analyses between checking and compiling improves both the efficiency and the expressiveness of the checks.
RP Volanschi, N (corresponding author), 1 Rue Michel Jeunet, F-78300 Poissy, France.
EM nic.volanschi@free.fr
CR ASHCRAFT K, 2002, P IEEE S SECURITY PR
   BACK G, 2003, SYSTEM CONSTRUCTING
   BALL T, 2001, LECT NOTES COMPUTER, V2102
   BURDY L, 2003, 8 INT WORKSH FORM ME, V80
   CHEN H., 2002, P 9 ACM C COMP COMM
   CHOU A, 2001, 18 S OP SYST PRINC S
   COBLEIGH J, 2002, IBM SYST J, V41
   CREW R, 1997, USENIX C DOMAIN SPEC
   DAS M., 2002, P ACM SIGPLAN C PROG
   DEVANBU P, 1999, ACM T SOFTW ENG METH, V8
   ENGLER D, 2000, P 4 S OP SYST DES IM
   EVANS D, 2002, IEEE SOFTW, V19
   Field J, 2003, LECT NOTES COMPUT SC, V2694, P439
   FOSTER J, 2002, ACM SIGPLAN C PROGRA
   Foster J.S., 1999, ACM SIGPLAN C PROGRA
   Geay Emmanuel, 2006, P 2006 ACM SIGPLAN S, P145, DOI [10.1145/1111542.1111567, DOI 10.1145/1111542.1111567]
   GRISWOLD W, 1996, 4 INT WORKSH PROGR C
   HENZINGER T, 2002, LECT NOTES COMPUTER, V2404
   HENZINGER T, 2004, LECT NOTES COMPUTER, V2772
   LIU Y, 2004, ACM SIGPLAN NOT, V39
   Martin M. C., 2005, P 20 ANN ACM SIGPLAN
   MERILL J, 2003, P GCC
   OLENDER K, 1989, ACM SIGSOFT SOFTW EN, V14
   REPS T, 1998, INF SOFTW TECHNOL, V40
   Rosen B. K., 1988, P 15 ACM SIGPLAN SIG
   Visser W, 2003, AUTOM SOFTW ENG J, V10
   VOLASCHI N, 2008, ACM SIGPLAN 2008 WOR
   VOLASCHI N, 2006, 8 ACM SIGPLAN INT S
   [No title captured]
NR 29
TC 4
Z9 5
U1 1
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING STREET, NEW YORK, NY 10013 USA
SN 0928-8910
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2008
VL 15
IS 1
BP 3
EP 33
DI 10.1007/s10515-007-0022-4
PG 31
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 255PS
UT WOS:000252670500002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Massacci, F
   Mylopoulos, J
   Zannone, N
AF Massacci, Fabio
   Mylopoulos, John
   Zannone, Nicola
TI Computer-aided support for secure tropos
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE security requirements engineering; CASE tools; automated reasoning
ID REQUIREMENTS; SPECIFICATIONS; PROTECTION; TRUST
AB In earlier work, we have introduced Secure Tropos, a requirements engineering methodology that extends the Tropos methodology and is intended for the design and analysis of security requirements. This paper briefly recaps the concepts proposed for capturing security aspects, and presents an implemented graphical CASE tool that supports the Secure Tropos methodology. Specifically, the tool supports the creation of Secure Tropos models, their translation to formal specifications, as well as the analysis of these specifications to ensure that they comply with specific security properties. Apart from presenting the tool, the paper also presents a two-tier evaluation consisting of two case studies and an experimental evaluation of the tool's scalability.
C1 Univ Trent, Dept Informat & Commun Technol, I-38100 Trento, Italy.
C3 University of Trento; Fondazione Bruno Kessler; FBK-ICT - Center for
   Information & Communication Technology
RP Zannone, N (corresponding author), Univ Trent, Dept Informat & Commun Technol, I-38100 Trento, Italy.
EM massacci@dit.unitn.it; jm@dit.unitn.it; zannone@dit.unitn.it
RI Zannone, Nicola/H-1318-2012; Massacci, Fabio/C-2662-2012
OI Zannone, Nicola/0000-0002-9081-5996; Massacci, Fabio/0000-0002-1091-8486
CR Agrawal R., 2002, Proceedings of the Twenty-eighth International Conference on Very Large Data Bases, P143
   ALPERN B, 1986, TR86727 CORN U COM S
   ANDERSON RJ, 1994, COMMUN ACM, V37, P32, DOI 10.1145/188280.188291
   [Anonymous], NON FUNCTIONAL REQUI
   ASNAR Y, 2006, A1 D2 1 SERENITY CON
   *ASS CAMB INT, 2005, MOD COD INT COD COND
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Basin D, 2006, ACM T SOFTW ENG METH, V15, P39, DOI 10.1145/1125808.1125810
   BAUER L, 2002, P FCS 02
   Bresciani P, 2004, AUTON AGENT MULTI-AG, V8, P203, DOI 10.1023/B:AGNT.0000018806.20944.ef
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   Darimont R, 1997, PROC INT CONF SOFTW, P612, DOI 10.1145/253228.253499
   De Landtsheer R., 2005, Proceedings 10th European Software Engineering Conference/13th ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/SIGSOFT FSE), P41, DOI DOI 10.1145/1081706.1081715
   DEBRABER F, 2003, UML UNIFIED PROCESS, P332
   ERNST NA, 2006, P REV 06, P2
   FICKAS S, 1988, IEEE SOFTWARE, V5, P37, DOI 10.1109/52.10002
   Fuxman A, 2004, REQUIR ENG, V9, P132, DOI 10.1007/s00766-004-0191-7
   Gelfond M., 1991, New Generation Computing, V9, P365, DOI 10.1007/BF03037169
   Gelfond M., 1988, P 5 INT C LOG PROGR, P1070, DOI DOI 10.2307/2275201
   GERMEAU F, 1997, P DIMACS WORKSH DES
   Giorgini P, 2005, LECT NOTES COMPUT SC, V3655, P237
   Giorgini P, 2005, LECT NOTES COMPUT SC, V3477, P161
   Giorgini Paolo, 2006, International Journal of Information Security, V5, P257
   Gravell A, 1996, SOFTWARE ENG J, V11, P104, DOI 10.1049/sej.1996.0014
   HALEY CB, 2005, P SREIS 05
   Heitmeyer C, 1998, LECT NOTES COMPUT SC, V1427, P526, DOI 10.1007/BFb0028775
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   JOHNSON CW, 2006, UNPUB ACM T INF SYST
   JORIN P, 2000, VALUE RISK NEW BENCH
   Jurjens Jan., 2004, SECURE SYSTEMS DEV U
   Leone N, 2006, ACM T COMPUT LOG, V7, P499, DOI 10.1145/1149114.1149117
   LIERLER Y, 2005, P 3 INT WORKSH ANSW, V142
   Lin FZ, 2002, EIGHTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-02)/FOURTEENTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-02), PROCEEDINGS, P112
   LIU L, 2003, P RE 03
   MAIDEN NA, 1992, COMMUN ACM, V35, P55, DOI 10.1145/129852.129857
   Massacci F, 2005, COMPUT STAND INTER, V27, P445, DOI 10.1016/j.csi.2005.01.003
   MASSACCI F, 2006, DIT06002
   McDermott J., 1999, Proceedings 15th Annual Computer Security Applications Conference (ACSAC'99), P55, DOI 10.1109/CSAC.1999.816013
   *NATL SEC AG, 2002, INF ASS TECHN FRAM I
   NIEMELA I, 1996, P JOINT INT C S LOG, P289
   NIEMELA I, 2000, P 8 INT WORKSH NON M
   Nuseibeh B., 2000, P C FUTURE SOFTWARE, P35, DOI [10.1145/336512.336523, DOI 10.1145/336512.336523]
   ONABAJO A, 2006, P ECBS 06, P460
   Perini A, 2004, LECT NOTES COMPUT SC, V3187, P169
   *PROM FIN GROUP, 2003, REP BOARD DIR ALL IR
   Rifaut A, 2003, 11TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P350
   SALTZER JH, 1975, P IEEE, V63, P1278, DOI 10.1109/PROC.1975.9939
   SCHATZ B, 2002, P OOIS 02 LECT NOT C, V2426, P298
   SCHNEIDER FB, 1987, TR87874
   Selvin A. M., 2005, New Review of Hypermedia and Multimedia, V11, P91, DOI 10.1080/13614560500191303
   Shum SJB, 2006, RATIONAL MANAGEMENT IN SOFTWARE ENGINEERING, P111
   Sindre G, 2005, REQUIR ENG, V10, P34, DOI 10.1007/s00766-004-0194-4
   Stamatelatos M., 2002, FAULT TREE HDB AEROS
   *US DEP JUST, 2002, SMSSDUSAO 2002R02005
   Van Gelder A., 1989, Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P1, DOI 10.1145/73721.73722
   van Lamsweerde A, 2004, PROC INT CONF SOFTW, P148, DOI 10.1109/ICSE.2004.1317437
   van Lamsweerde A, 2000, IEEE T SOFTWARE ENG, V26, P978, DOI 10.1109/32.879820
   YU E, 1995, THESIS U TOTONTO
NR 58
TC 25
Z9 27
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2007
VL 14
IS 3
BP 341
EP 364
DI 10.1007/s10515-007-0013-5
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 212HF
UT WOS:000249586100003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Panizo, L
   Gallardo, MD
AF Panizo, Laura
   Gallardo, Maria-del-Mar
TI STAn: analysis of data traces using an event-driven interval temporal
   logic
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Interval temporal logic; Runtime verification; Trace analysis
ID VERIFICATION
AB The increasing integration of systems into people's daily routines, especially smart phones, requires ensuring correctness of their functionality and even some performance requirements. Sometimes, we can only observe the interaction of the system (e.g. the smartphone) with its environment at certain time points; that is, we only have access to the data traces produced due to this interaction. This paper presents the tool STAN, which performs runtime verification on data traces that combine timestamped discrete events and sampled real-valued magnitudes. STAN uses the SPIN model checker as the underlying execution engine, and analyzes traces against properties described in the so-called event-driven interval temporal logic (eLTL) by transforming each eLTL formula into a network of concurrent automata, written in PROMELA, that monitors the trace. We present two different transformations for online and offline monitoring, respectively. Then, SPIN explores the state space of the automata network and the trace to return a verdict about the corresponding property. We use the proposal to analyze data traces obtained during mobile application testing in different network scenarios.
C1 [Panizo, Laura; Gallardo, Maria-del-Mar] Univ Malaga, ITIS Software, Andalucia Tech, Malaga, Spain.
C3 Universidad de Malaga
RP Panizo, L (corresponding author), Univ Malaga, ITIS Software, Andalucia Tech, Malaga, Spain.
EM laurapanizo@uma.es; mdgallardo@uma.es
RI Panizo Jaime, Laura/H-6283-2015; Gallardo Melgarejo, Maria del
   Mar/G-4371-2014
OI Panizo Jaime, Laura/0000-0002-6399-6162; Gallardo Melgarejo, Maria del
   Mar/0000-0003-3481-5307
FU CRUE-CSIC
FX Open Access funding provided thanks to the CRUE-CSIC agreement with
   Springer Nature.
CR ALLEN JF, 1983, COMMUN ACM, V26, P832, DOI 10.1145/182.358434
   ALUR R, 1993, INFORM COMPUT, V104, P35, DOI 10.1006/inco.1993.1025
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Awad A, 2019, LECT NOTES COMPUT SC, V11483, P346, DOI 10.1007/978-3-030-21290-2_22
   Barringer H, 2004, LECT NOTES COMPUT SC, V2937, P44
   Barringer H, 2010, J AEROS COMP INF COM, V7, P365, DOI 10.2514/1.49356
   Barringer H, 2010, J LOGIC COMPUT, V20, P675, DOI 10.1093/logcom/exn076
   Basin D, 2015, J ACM, V62, DOI 10.1145/2699444
   Botia JA, 2012, EXPERT SYST APPL, V39, P8136, DOI 10.1016/j.eswa.2012.01.153
   Cameron F, 2015, LECT NOTES COMPUT SC, V9333, P3, DOI 10.1007/978-3-319-23820-3_1
   Chaochen Z., 2004, MONOGRAPHS THEORETIC
   Convent L., 2018, LNCS, V11254, P144, DOI [DOI 10.1007/978-3-030-03044-5_10, 10.1007/978-3-030-03044, DOI 10.1007/978-3-030-03044]
   D'Souza Deepak, 2012, Theoretical Aspects of Computing - ICTAC 2012. Proceedings of the 9th International Colloquium, P16, DOI 10.1007/978-3-642-32943-2_2
   Zayas AD, 2020, SENSORS-BASEL, V20, DOI 10.3390/s20226652
   Donze Alexandre, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P264, DOI 10.1007/978-3-642-39799-8_19
   Espinosa CV, 2019, IEEE ACCESS, V7, P150369, DOI 10.1109/ACCESS.2019.2947361
   Faymonville P, 2019, LECT NOTES COMPUT SC, V11561, P421, DOI 10.1007/978-3-030-25540-4_24
   Gallardo M.M., 2019, LNCS, V2042, P177, DOI [10.1007/978-3-030-45260-5_11, DOI 10.1007/978-3-030-45260-5_11]
   Gallardo MD, 2014, SOFTW TEST VERIF REL, V24, P438, DOI 10.1002/stvr.1505
   Gorostiaga F, 2021, LECT NOTES COMPUT SC, V12974, P164, DOI 10.1007/978-3-030-88494-9_9
   Hallé S, 2016, LECT NOTES COMPUT SC, V10012, P68, DOI 10.1007/978-3-319-46982-9_6
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Havelund K, 2020, FORM METHOD SYST DES, V56, P1, DOI 10.1007/s10703-018-00327-4
   Havelund K, 2020, LECT NOTES COMPUT SC, V12302, P3, DOI 10.1007/978-3-030-59152-6_1
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Kauffman S, 2018, FORM METHOD SYST DES, V53, P54, DOI 10.1007/s10703-018-0317-z
   Kauffman S, 2016, LECT NOTES COMPUT SC, V10012, P235, DOI 10.1007/978-3-319-46982-9_15
   Kesten Y, 2005, THEOR COMPUT SCI, V331, P397, DOI 10.1016/j.tcs.2004.09.023
   Maler Oded, 2013, International Journal on Software Tools for Technology Transfer, V15, P247, DOI 10.1007/s10009-012-0247-9
   Panizo L, 2020, INT J SOFTW TOOLS TE, V22, P105, DOI 10.1007/s10009-019-00518-2
   Pnueli A, 2006, LECT NOTES COMPUT SC, V4085, P573
   Reinbacher T, 2014, TACAS, V8413, P357
   Espada AR, 2019, SOFTW TEST VERIF REL, V29, DOI 10.1002/stvr.1699
   Rosu G., 2005, Automated Software Engineering, V12, P151, DOI 10.1007/s10515-005-6205-y
   Sanchez C, 2019, FORM METHOD SYST DES, V55, P72, DOI 10.1007/s10703-019-00343-y
   Volanschi N, 2019, LECT NOTES COMPUT SC, V11757, P393, DOI 10.1007/978-3-030-32079-9_24
NR 36
TC 1
Z9 1
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2023
VL 30
IS 1
AR 3
DI 10.1007/s10515-022-00367-5
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6S4XC
UT WOS:000892991000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Bouziane, R
   Terrissa, LS
   Ayad, S
AF Bouziane, Radhia
   Terrissa, Labib Sadek
   Ayad, Soheyb
TI Semantic web services for ROS: a Robot as a Service approach
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Service-Oriented Architecture; Semantic web services; Robotic service
   discovery; Ontology; Robot operating system; Robot as a Service
ID DISCOVERY
AB Recently, Robot as a Service (RaaS) brought a major shift in the access and use of robots due to the technological advancements in computing, storage and communication. Users at the client side can manipulate their robots as an on-demand service throughout the Internet. The development of such systems is facing the fusion of the advantages of both Robot Operating System (ROS) and web services. Web services offer loosely coupled ROS software components enabling their interoperability and reuse. However, previous work in this area do not fully describe the service capability and characterization of the offered robotic functionality. In this paper, we propose a semantic description to ROS web services to facilitate their discovery and access in RaaS environment. The representation of ROS Semantic Web Service (ROS-SWS) leverages the ROS components to express its ability through a ROS domain ontology of capabilities and properties. The implemented services and results are presented in this paper.
C1 [Bouziane, Radhia; Terrissa, Labib Sadek; Ayad, Soheyb] Univ Biskra, Dept Comp Sci, LINFI, Biskra, Algeria.
C3 Universite Mohamed Khider Biskra
RP Bouziane, R (corresponding author), Univ Biskra, Dept Comp Sci, LINFI, Biskra, Algeria.
EM radhia.bouziane@univ-biskra.dz; terrissa@univ-biskra.dz;
   s.ayad@univ-biskra.dz
CR Aier S, 2007, LECT NOTES COMPUT SC, V4473, P40
   [Anonymous], 2015, MASTERING ROS ROBOTI
   Awad R, 2016, IEEE INT C EMERG
   Baklouti N, 2015, ENG APPL ARTIF INTEL, V46, P154, DOI 10.1016/j.engappai.2015.09.005
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bouziane R, 2017, INT C CONTROL DECISI, P809, DOI 10.1109/CoDIT.2017.8102694
   Costa LF, 2016, PROCEEDINGS OF 13TH LATIN AMERICAN ROBOTICS SYMPOSIUM AND 4TH BRAZILIAN SYMPOSIUM ON ROBOTICS - LARS/SBR 2016, P169, DOI 10.1109/LARS-SBR.2016.35
   Du ZH, 2017, FUTURE GENER COMP SY, V74, P337, DOI 10.1016/j.future.2016.01.002
   Gastel PJG. van, 2014, THESIS
   Gupta S., 2020, AIAA SCITECH 2020 FO
   Hua Yingbing, 2016, 2016 IEEE 21st International Conference on Emerging Technologies and Factory Automation (ETFA), DOI 10.1109/ETFA.2016.7733579
   Huang JY, 2017, 2017 18TH INTERNATIONAL CONFERENCE ON ADVANCED ROBOTICS (ICAR), P303, DOI 10.1109/ICAR.2017.8023624
   Janssen R, 2016, INTEL SERV ROBOT, V9, P63, DOI 10.1007/s11370-015-0185-y
   Koubaa Anis, 2014, Architecture of Computing Systems - ARCS 2014. 27th International Conference. Proceedings: LNCS 8350, P196, DOI 10.1007/978-3-319-04891-8_17
   Koubaa A., 2019, ARXIV PREPRINT ARXIV
   Koubaa A., 2015, J SOFTWARE ENG ROBOT, V1, P123
   Koubâa A, 2019, AD HOC NETW, V86, P46, DOI 10.1016/j.adhoc.2018.09.013
   Kunze L, 2011, IEEE INT CONF ROBOT
   Luo J, 2017, 2017 18TH INTERNATIONAL CONFERENCE ON ADVANCED ROBOTICS (ICAR), P487, DOI 10.1109/ICAR.2017.8023654
   Magaña A, 2020, IEEE INT C EMERG, P1507, DOI 10.1109/ETFA46521.2020.9212033
   Martin D, 2005, LECT NOTES COMPUT SC, V3387, P26
   Mastrogiovanni, 2017, ARXIV PREPRINT ARXIV
   Mori Y, 2014, LECT NOTES ARTIF INT, V8863, P150, DOI 10.1007/978-3-319-13332-4_13
   Mouradian C, 2018, CONSUM COMM NETWORK
   Oliveira LBR, 2017, COMPUT J, V60, P1363, DOI 10.1093/comjnl/bxx008
   OWL-S: Semantic Markup for Web Services, US
   Paolucci M, 2002, LECT NOTES COMPUT SC, V2342, P333
   Paulraj D, 2012, ENTERP INF SYST-UK, V6, P445, DOI 10.1080/17517575.2011.654265
   Pignaton De Freitas Edison, 2023, Journal of Ambient Intelligence and Humanized Computing, P4921, DOI 10.1007/s12652-020-02150-4
   de Freitas EP, 2020, KNOWL ENG REV, V35, DOI 10.1017/S0269888920000338
   protothema, About us
   Qian K, 2015, INT J ADV ROBOT SYST, V12, DOI 10.5772/60504
   Riazuelo L, 2015, IEEE T AUTOM SCI ENG, V12, P432, DOI 10.1109/TASE.2014.2377791
   ROS Website, US
   Ruta M, 2017, 2017 FIRST IEEE INTERNATIONAL CONFERENCE ON ROBOTIC COMPUTING (IRC), P422, DOI 10.1109/IRC.2017.83
   Samantha Rajapaksha U. U., 2021, 2021 10th International Conference on Information and Automation for Sustainability (ICIAfS), P381, DOI 10.1109/ICIAfS52090.2021.9606062
   SoftBank Robotics, US
   Srinivasan N, 2005, LECT NOTES COMPUT SC, V3387, P96
   Sugawara Y., 2015, MUSROBS IROS, P16
   Tenorth M, 2013, INT J ROBOT RES, V32, P566, DOI 10.1177/0278364913481635
   Tiddi I, 2017, K-CAP 2017: PROCEEDINGS OF THE KNOWLEDGE CAPTURE CONFERENCE, DOI 10.1145/3148011.3148014
   Tsardoulias EG, 2017, COGN SYST RES, V43, P157, DOI 10.1016/j.cogsys.2016.08.004
   Waibel M, 2011, IEEE ROBOT AUTOM MAG, V18, P69, DOI 10.1109/MRA.2011.941632
   Xie YY, 2020, IEEE SYST J, V14, P1245, DOI 10.1109/JSYST.2019.2904098
   Yang TH, 2016, MECH MACH SCI, V36, P735, DOI 10.1007/978-3-319-23327-7_63
   Yang TH, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON ROBOTICS AND BIOMIMETICS (ROBIO), P225, DOI 10.1109/ROBIO.2015.7418771
   Yinong Chen, 2010, 2010 Fifth International Symposium on Service Oriented System Engineering (SOSE 2010), P151, DOI 10.1109/SOSE.2010.44
   Zander S., 2016, ARXIV PREPRINT ARXIV
NR 48
TC 3
Z9 3
U1 7
U2 16
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 49
DI 10.1007/s10515-022-00346-w
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3B1TS
UT WOS:000827731200001
DA 2024-07-18
ER

PT J
AU Parashar, A
   Goyal, RK
   Kaushal, S
   Sahana, SK
AF Parashar, Anshu
   Kumar Goyal, Raman
   Kaushal, Sakshi
   Kumar Sahana, Sudip
TI Machine learning approach for software defect prediction using
   multi-core parallel computing
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Machine Learning; Software Defect Prediction; Multi-core; Parallel
   Computing; Software Automation
ID FRAMEWORK; MODEL
AB Defect prediction in software development is a very active topic of study. Software defect prediction (SDP) findings give the list of defect-prone source code artefacts, enabling quality assurance teams to efficiently allocate limited resources for validating software products. In order to enable both developers and reduce the time to market for more dependable software products, software defect prediction tools will play an increasingly significant role. Many machine learning approaches are present in the existing literature for SDP to enhance the performance of the software development team. However, very little work is reported for SDP using multi-core parallel computing. In this paper, a multi-core parallel machine learning approach for software defect prediction is proposed to classify a component as defective or non-defective. The proposed model has been built, trained and tested by varying the number of CPU cores involved in the processing. Extensive empirical studies have been conducted by applying the proposed approach on 11 software systems of NASA/PROMISE and other relevant repositories. The proposed approach has been compared with various state-of-art machine learning models to investigate the proposed models' supremacy in comparison with the other existing models. The experimental results indicate that the predictive performance of the proposed model is improved, and execution time is decreased by involving a greater number of CPU cores. Through evaluation of calculated results, it has been observed that the multi-core parallel processing Random Forest approach gives the best predicting performance parameters values nearly 99 or 100%. Moreover, the proposed approach performs significantly better in accuracy, precision, recall, F-Measures, and AUC compared to other machine learning models.
C1 [Parashar, Anshu; Kumar Goyal, Raman] Thapar Inst Engn & Technol, Comp Sci & Engn, Patiala, Punjab, India.
   [Kaushal, Sakshi] Panjab Univ, Univ Inst Engn & Technol, Comp Sci & Engn, Chandigarh, India.
   [Kumar Sahana, Sudip] Birla Inst Technol Mesra, Comp Sci & Engn, Ranchi, Bihar, India.
C3 Thapar Institute of Engineering & Technology; Panjab University; Birla
   Institute of Technology Mesra
RP Sahana, SK (corresponding author), Birla Inst Technol Mesra, Comp Sci & Engn, Ranchi, Bihar, India.
EM aparashar@thapar.edu; ramankumar.goyal@thapar.edu; sakshi@pu.ac.in;
   sudipsahana@bitmesra.ac.in
CR [Anonymous], SIMPLE EFFICIENT TOO
   [Anonymous], DEFECT DATASETS
   [Anonymous], RANDOM FOREST
   [Anonymous], Public Datasets
   Das R, 2019, NEURAL COMPUT APPL, V31, P675, DOI 10.1007/s00521-017-3099-0
   Ghotra B, 2017, IEEE WORK CONF MIN S, P146, DOI 10.1109/MSR.2017.18
   Gong LN, 2020, IEEE T RELIAB, V69, P40, DOI 10.1109/TR.2019.2895462
   Guo JH, 2017, IEEE T EMERG TOP COM, V5, P518, DOI 10.1109/TETC.2014.2335539
   Herbold S, 2017, IEEE T SOFTWARE ENG, V43, P1091, DOI 10.1109/TSE.2017.2748129
   Hijazi NM, 2021, EXPERT SYST APPL, V182, DOI 10.1016/j.eswa.2021.115290
   Hong L, 2016, IEEE SENS J, V16, P3099, DOI 10.1109/JSEN.2016.2522405
   Jin C, 2021, EXPERT SYST APPL, V171, DOI 10.1016/j.eswa.2021.114637
   Kalaivani N., 2018, International Journal of Pure and Applied Mathematics, V118, P3863
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li F., 2016, J APPL STAT, V45, P1
   Limsettho N, 2018, INFORM SOFTWARE TECH, V100, P87, DOI 10.1016/j.infsof.2018.04.001
   Liu C, 2019, INFORM SOFTWARE TECH, V107, P125, DOI 10.1016/j.infsof.2018.11.005
   Luo GC, 2012, IEICE T INF SYST, VE95D, P2006, DOI 10.1587/transinf.E95.D.2006
   Ma Y, 2012, IEICE T INF SYST, VE95D, P267, DOI 10.1587/transinf.E95.D.267
   Majumder S., 2020, EMPIR SOFTW ENG, V27, P1
   Malhotra R., 2014, P 8 INT C BIOINSP IN, P320
   Malhotra R, 2016, APPL SOFT COMPUT, V49, P1034, DOI 10.1016/j.asoc.2016.04.032
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   Nam J, 2018, IEEE T SOFTWARE ENG, V44, P874, DOI 10.1109/TSE.2017.2720603
   Peng XJ, 2019, NEURAL COMPUT APPL, V31, P379, DOI 10.1007/s00521-017-3004-x
   Radmanesh Nasim, 2016, IEEE/ACM Transactions on Audio, Speech and Language Processing, V24, P583, DOI 10.1109/TASLP.2016.2518801
   Ren JS, 2014, J APPL MATH, DOI 10.1155/2014/785435
   Shrikanth NC, 2021, PROC INT CONF SOFTW, P448, DOI 10.1109/ICSE43902.2021.00050
   Verbraeken J, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3377454
   Vijayakumar K, 2019, CLUSTER COMPUT, V22, P10789, DOI 10.1007/s10586-017-1176-x
   Wang KC, 2021, NEURAL COMPUT APPL, V33, P8249, DOI 10.1007/s00521-020-04960-1
   Xu Z, 2019, INFORM SOFTWARE TECH, V106, P182, DOI 10.1016/j.infsof.2018.10.004
   Yu X, 2017, INT J SOFTW ENG KNOW, V27, P1427, DOI 10.1142/S0218194017400046
   Zhang ZW, 2017, AUTOMAT SOFTW ENG, V24, P47, DOI 10.1007/s10515-016-0194-x
NR 34
TC 2
Z9 2
U1 0
U2 17
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 44
DI 10.1007/s10515-022-00340-2
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2C9VU
UT WOS:000811207100003
DA 2024-07-18
ER

PT J
AU Chandar, SK
AF Chandar, S. Kumar
TI Convolutional neural network for stock trading using technical
   indicators
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Artificial neural network; Convolutional neural network; Deep learning;
   Gramian angular field; Stock trading and technical indicators
ID MODEL
AB Stock market prediction is a very hot topic in financial world. Successful prediction of stock market movement may promise high profits. However, an accurate prediction of stock movement is a highly complicated and very difficult task because there are many factors that may affect the stock price such as global economy, politics, investor expectation and others. Several non-linear models such as Artificial Neural Network, fuzzy systems and hybrid models are being used for forecasting stock market. These models have limitations like slow convergence and overfitting problem. To solve the aforementioned issues, this paper intends to develop a robust stock trading model using deep learning network. In this paper, a stock trading model by integrating Technical Indicators and Convolutional Neural Network (TI-CNN) is developed and implemented. The stock data investigated in this work were collected from publicly available sources. Ten technical indicators are extracted from the historical data and taken as feature vectors. Subsequently, feature vectors are converted into an image using Gramian Angular Field and fed as an input to the CNN. Closing price of stock data are manually labelled as sell, buy, and hold points by determining the top and bottom points in a sliding window. The duration considered over a period from January 2009 to December 2018. Prediction ability of the developed TI-CNN model is tested on NASDAQ and NYSE data. Performance indicators such as accuracy and F1 score are calculated and compared to prove effectiveness of the proposed stock trading model. Experimental results demonstrate that the proposed TI-CNN achieves high prediction accuracy than that of the earlier models considered for comparison.
C1 [Chandar, S. Kumar] CHRIST Deemed Univ, Sch Business & Management, Bangalore, Karnataka, India.
C3 Christ University
RP Chandar, SK (corresponding author), CHRIST Deemed Univ, Sch Business & Management, Bangalore, Karnataka, India.
EM kumar.chandar@christuniversity.in
CR Al Wadi S., 2011, Appl. Math. Sci., V5, P315
   Atsalakis GS, 2009, EXPERT SYST APPL, V36, P5932, DOI 10.1016/j.eswa.2008.07.006
   Bao W, 2017, PLOS ONE, V12, DOI 10.1371/journal.pone.0180944
   Caley J.A., 2013, THESIS
   Chang SH, 2019, J PHYS ACT HEALTH, V16, P799, DOI 10.1123/jpah.2018-0648
   CHEN S, 2018, IOP C SERIES MAT SCI, P435
   Chung H, 2018, SUSTAINABILITY-BASEL, V10, DOI 10.3390/su10103765
   DAMASEVICIUS R, 2018, IEEE 16 WORLD S APPL
   Dhaya R., 2021, J INFORM TECHNOLOGY, V3, P118, DOI [10.36548/jiip.2021.2.004, DOI 10.36548/JITDW.2021.2.005, DOI 10.36548/JIIP.2021.2.004]
   Gao TW, 2018, NEURAL COMPUT, V30, P2833, DOI 10.1162/neco_a_01124
   Graves A, 2013, INT CONF ACOUST SPEE, P6645, DOI 10.1109/ICASSP.2013.6638947
   Hiransha M., 2018, Procedia Computer Science, V132, P1351, DOI 10.1016/j.procs.2018.05.050
   Iong-Zong Chen, 2021, J ARTIFICIAL INTELLI, V3, P101, DOI DOI 10.36548/JAICN.2021.2.003
   Kara Y, 2011, EXPERT SYST APPL, V38, P5311, DOI 10.1016/j.eswa.2010.10.027
   Khalajzadeh H., 2014, SOFT COMPUTING IND A, V223, P197
   Kim T, 2019, PLOS ONE, V14, DOI 10.1371/journal.pone.0212320
   Kim Y., 2014, P 2014 C EMPIRICAL M
   Lee C.S., 2016, INDIAN J SCI TECHNOL, V9, P1, DOI DOI 10.17485/ijst/2016/v9i26/97288
   Majhi B, 2014, J KING SAUD UNIV-COM, V26, P319, DOI 10.1016/j.jksuci.2013.12.005
   Nelson DMQ, 2017, IEEE IJCNN, P1419, DOI 10.1109/IJCNN.2017.7966019
   Rout M, 2014, J KING SAUD UNIV-COM, V26, P7, DOI 10.1016/j.jksuci.2013.01.002
   Selvin S, 2017, 2017 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI), P1643, DOI 10.1109/ICACCI.2017.8126078
   Sezer OB, 2018, APPL SOFT COMPUT, V70, P525, DOI 10.1016/j.asoc.2018.04.024
   Sungheetha Akey, 2021, J Trends Comp Sci Smart Technol, V3, P81, DOI [DOI 10.36548/JTCSST.2021.2.002, 10.36548/jtcsst.2021.2.002]
   Tripathi M., 2021, J. Innov. Image Process. (JIIP), V3, P100, DOI [DOI 10.36548/JIIP.2021.2.003, 10.36548/jiip.2021.2.003]
   Vargas MR, 2017, IEEE INT CONF COMP, P60, DOI 10.1109/CIVEMSA.2017.7995302
   Xu B, 2018, LECT NOTES ARTIF INT, V11109, P166, DOI 10.1007/978-3-319-99501-4_14
   Xu K, 2015, PR MACH LEARN RES, V37, P2048
NR 28
TC 13
Z9 13
U1 1
U2 58
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 16
DI 10.1007/s10515-021-00303-z
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY6EY
UT WOS:000737064300005
DA 2024-07-18
ER

PT J
AU Jiang, T
   Gan, XE
   Liang, Z
   Luo, G
AF Jiang, Tan
   Gan, Xiao'er
   Liang, Zheng
   Luo, Guang
TI AIDM: artificial intelligent for digital museum autonomous system with
   mixed reality and software-driven data collection and analysis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Hybrid reality; Data acquisition; Data analysis; Digital museum;
   Artificial intelligence; Human-computer interaction
AB The construction of digital museum is the inevitable trend of the development of museum cause. At present, there are some problems in the construction of digital museum in China, such as backward concept, low overall level, lack of funds and talents. Digital museum is a museum that uses digital and network technology to present the functions of physical museum on the network in a digital way. It includes three parts: the on-site digital display system of the museum exhibition hall, the museum business management system based on network digital technology and the network platform display system. This paper designs and implements a new intelligent digital museum system based on the hybrid reality technology. Compared with the existing digital museum navigation mode, the system gets rid of the tedious way of navigation, provides tourists with more diverse and realistic cultural relics information, and makes the human-computer interaction more humanized. The museum construction in the future will continue to be digital, networked and intelligent, which provides a good practice platform and a broad development world for the improvement and application of new technologies. Besides, the software-driven data collection and analysis models are combined for the systematic performance improvement of the model. The comparison experiment has shown that the proposed model is efficient.
C1 [Jiang, Tan; Gan, Xiao'er; Liang, Zheng; Luo, Guang] South China Normal Univ, Sch Fine Art, Guangzhou 510631, Peoples R China.
C3 South China Normal University
RP Jiang, T (corresponding author), South China Normal Univ, Sch Fine Art, Guangzhou 510631, Peoples R China.
EM jiangtan@scnu.edu.cn
RI JIANG, TAN/AFH-7019-2022
OI Jiang, Tan/0000-0002-0912-0389
CR Afroz Z, 2020, ENERG BUILDINGS, V226, DOI 10.1016/j.enbuild.2020.110367
   Agostino D, 2021, PUBLIC MONEY MANAGE, V41, P69, DOI 10.1080/09540962.2020.1764206
   Al-Sumaiti AS, 2020, IEEE ACCESS, V8, P93011, DOI 10.1109/ACCESS.2020.2995054
   Almhana R, 2021, AUTOMAT SOFTW ENG, V28, DOI 10.1007/s10515-020-00279-2
   Feng Li, 2011, SCI TECHNOL INNOV GU, V8, P246
   Guoyuan Cao, 2021, Proceedings of the 2021 International Conference on Artificial Intelligence and Smart Systems (ICAIS), P444, DOI 10.1109/ICAIS50930.2021.9395789
   He L., 2017, RES AUGMENTED REALIT
   Huang Jin, 2016, Journal of Computer Aided Design & Computer Graphics, V28, P869
   Huang T., 2016, DAGUAN, V6
   Huojiao Y, 2016, WIREL INTERNET TECHN, V9, P135
   Jianghan W, 2017, SCI ED GUIDE ELECT E, V29, P259
   Jibb LA, 2020, J MED INTERNET RES, V22, DOI 10.2196/16480
   Junzhong Gu, 2018, COMPUT APPL SOFTW, V3, P1
   Lenjani A, 2020, ENG STRUCT, V208, DOI 10.1016/j.engstruct.2019.109884
   Li Y, 2019, AUTOMAT SOFTW ENG, V26, P757, DOI 10.1007/s10515-019-00260-8
   Linlin Z, 2016, CHIN ETHNIC REV, V11, P212
   Liu P, 2021, MUS MANAGE CURATOR, V36, P403, DOI 10.1080/09647775.2021.1948905
   Ma J, 2016, J J RES, V7
   Markopoulos E, 2021, LECT NOTE NETW SYST, V276, P225, DOI 10.1007/978-3-030-80094-9_27
   Qiu K, 2013, APPL AUGMENTED REALI, P12
   Subhashini P., 2020, Journal of Information Technology and Digital World, V2, P221, DOI [https://doi.org/10.36548/jitdw.2020.4.006, DOI 10.36548/JITDW.2020.4.006]
   Sungheetha Akey, 2021, J. Innov. Image Process. (JIIP), V3, P1
   Ting X, 2012, POPUL SCI RES, V7, P29
   Wang XL, 2020, GEOMAT NAT HAZ RISK, V11, P766, DOI 10.1080/19475705.2020.1747554
   Wendrich R.E, 2017, MIXED REALITY APPL I
   Wenxia L., 2014, COMPUT KNOWL TECHNOL, V1, P160
   Xiang Li, 2005, MOD PRIM 2 ED, V2, P25
   Yang X, 2006, CENT PLAINS CULT REL, V1
   Yang Y, 2017, DAGUAN, V11
   Yavuz T, 2020, AUTOMAT SOFTW ENG, V27, P329, DOI 10.1007/s10515-020-00276-5
   Zhang F.X, 2015, ART TECHNOL, V5
   Zhang X, 2008, MUS CHINA, V3
   Zhaotong S., 2017, CIV ENG INF TECHNOL, V3
   Ziyu S, 2016, MOD DECOR THEORY, V7, P157
NR 34
TC 9
Z9 9
U1 30
U2 130
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 22
DI 10.1007/s10515-021-00315-9
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YK8MB
UT WOS:000745459100001
DA 2024-07-18
ER

PT J
AU Ali, A
   Khan, N
   Abu-Tair, M
   Noppen, J
   McClean, S
   McChesney, I
AF Ali, Aftab
   Khan, Naveed
   Abu-Tair, Mamun
   Noppen, Joost
   McClean, Sally
   McChesney, Ian
TI Discriminating features-based cost-sensitive approach for software
   defect prediction
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software bugs; defects; Machine learning models; Discriminating
   features; Cost-sensitivity; AUC; Recall
ID METRICS
AB Correlated quality metrics extracted from a source code repository can be utilized to design a model to automatically predict defects in a software system. It is obvious that the extracted metrics will result in a highly unbalanced data, since the number of defects in a good quality software system should be far less than the number of normal instances. It is also a fact that the selection of the best discriminating features significantly improves the robustness and accuracy of a prediction model. Therefore, the contribution of this paper is twofold, first it selects the best discriminating features that help in accurately predicting a defect in a software component. Secondly, a cost-sensitive logistic regression and decision tree ensemble-based prediction models are applied to the best discriminating features for precisely predicting a defect in a software component. The proposed models are compared with the most recent schemes in the literature in terms of accuracy, area under the curve, and recall. The models are evaluated using 11 datasets and it is evident from the results and analysis that the performance of the proposed prediction models outperforms the schemes in the literature.
C1 [Ali, Aftab; Khan, Naveed; Abu-Tair, Mamun; McClean, Sally; McChesney, Ian] Ulster Univ, Sch Comp, Newtownabbey BT37 0QB, North Ireland.
   [Noppen, Joost] BT, Appl Res, Ipswich, Suffolk, England.
C3 Ulster University
RP Ali, A (corresponding author), Ulster Univ, Sch Comp, Newtownabbey BT37 0QB, North Ireland.
EM a.ali@ulster.ac.uk; n.khan@ulster.ac.uk; m.abu-tair@ulster.ac.uk;
   johannes.noppen@bt.com; si.mcclean@ulster.ac.uk;
   ir.mcchesney@ulster.ac.uk
RI Khan, Naveed/KCK-0156-2024
FU BTIIC (BT Ireland Innovation Centre) project - BT and Invest Northern
   Ireland
FX This research is supported by the BTIIC (BT Ireland Innovation Centre)
   project, funded by BT and Invest Northern Ireland.
CR Ali A, 2019, LECT NOTES ARTIF INT, V11927, P350, DOI 10.1007/978-3-030-34885-4_27
   Ammann P., 2016, Introduction to software testing, DOI DOI 10.1017/9781316771273
   [Anonymous], 2009, Cambridge University Press, DOI DOI 10.1017/CBO9780511815867
   Aparna U, 2016, P 2016 ONLINE INT C, P1, DOI DOI 10.1109/GET.2016.7916845
   Arar ÖF, 2015, APPL SOFT COMPUT, V33, P263, DOI 10.1016/j.asoc.2015.04.045
   Arasteh B., 2018, J NETW TECHNOL, V9, P95
   Arshad A, 2018, IEEE ACCESS, V6, P25675, DOI 10.1109/ACCESS.2018.2835304
   Brady F., 2013, CAMBRIDGE U STUDY ST
   Branco P., 2015, ARXIV PREPRINT ARXIV
   Catal C, 2011, EXPERT SYST APPL, V38, P4626, DOI 10.1016/j.eswa.2010.10.024
   Catal C, 2009, INFORM SCIENCES, V179, P1040, DOI 10.1016/j.ins.2008.12.001
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Dick S, 2004, FUZZY SET SYST, V145, P81, DOI 10.1016/j.fss.2003.10.006
   Domingos Pedro, 1999, P 5 ACM SIGKDD INT C, P155, DOI DOI 10.1145/312129.312220
   Ebert C, 2009, COMPUTER, V42, P42, DOI 10.1109/MC.2009.118
   Eckardt J.R, 2014, PATH SOFTWARE COST C, P23
   Esteves G, 2020, AUTOMAT SOFTW ENG, V27, P369, DOI 10.1007/s10515-020-00277-4
   Guo L, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P417
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Huda S, 2018, IEEE ACCESS, V6, P2844, DOI 10.1109/ACCESS.2017.2785445
   Jorgensen P.C., 2018, Software Testing: A Craftsman's Approach
   Kassab M, 2017, IEEE SOFTWARE, V34, P46, DOI 10.1109/MS.2017.3571582
   Son LH, 2019, SYMMETRY-BASEL, V11, DOI 10.3390/sym11020212
   LECESSIE S, 1992, APPL STAT-J ROY ST C, V41, P191
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   Osman H, 2017, 2017 IEEE INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE), P27, DOI 10.1109/MALTESQUE.2017.7882013
   Pendharkar PC, 2005, IEEE T KNOWL DATA EN, V17, P1379, DOI 10.1109/TKDE.2005.155
   Rathore SS, 2017, KNOWL-BASED SYST, V119, P232, DOI 10.1016/j.knosys.2016.12.017
   Shirabad J.S., 2005, The PROMISE Repository of Software Engineering Databases
   Sommerville Ian, 2016, Software engineering 8
   Strategic Planning, 2002, EC IMP IN INFR SOFTW
   Sunil J.M., 2018, SEKE, P421
   Tassey G, 1996, FORSCHUNGSBERICHT FORSCHUNGSBERICHT, V2
   Taylor P, 2015, THESIS U YORK THESIS U YORK
NR 34
TC 11
Z9 11
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 11
DI 10.1007/s10515-021-00289-8
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TH9YB
UT WOS:000672437600002
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Cámara, J
   Schmerl, B
   Moreno, GA
   Garlan, D
AF Camara, Javier
   Schmerl, Bradley
   Moreno, Gabriel A.
   Garlan, David
TI MOSAICO: offline synthesis of adaptation strategy repertoires with
   flexible trade-offs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Self-Adaptation; Resilience; Synthesis; Model checking
ID SELF-ADAPTATION
AB Self-adaptation improves the resilience of software-intensive systems, enabling them to adapt their structure and behavior to run-time changes (e.g., in workload and resource availability). Many of these approaches reason about the best way of adapting by synthesizing adaptation plans online via planning or model checking tools. This method enables the exploration of a rich solution space, but optimal solutions and other guarantees (e.g., constraint satisfaction) are computationally costly, resulting in long planning times during which changes may invalidate plans. An alternative to online planning involves selecting at run time the adaptation best suited to the current system and environment conditions from among a predefined repertoire of adaptation strategies that capture repair and optimization tasks. This method does not incur run-time overhead but requires additional effort from engineers, who have to specify strategies and lack support to systematically assess their quality. In this article, we present MOSAICO, an approach for offline synthesis of adaptation strategy repertoires that makes a novel use of discrete abstractions of the state space to flexibly adapt extra-functional behavior in a scalable manner. The approach supports making tradeoffs: (i) among multiple extra-functional concerns, and (ii) between computation time and adaptation quality (varying abstraction resolution). Our results show a remarkable improvement on system qualities in contrast to manually-specified repertoires. More interestingly, moderate increments in abstraction resolution can lead to pronounced quality improvements, whereas high resolutions yield only negligible improvement over medium resolutions.
C1 [Camara, Javier; Schmerl, Bradley; Garlan, David] Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.
   [Moreno, Gabriel A.] Carnegie Mellon Univ, Software Engn Inst, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University; Carnegie Mellon University; Software
   Engineering Institute
RP Cámara, J (corresponding author), Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.
EM jcmoreno@cs.cmu.edu; schmerl@cs.cmu.edu; gmoreno@sei.cmu.edu;
   garlan@cs.cmu.edu
RI Camara, Javier/ABF-1534-2021
OI Schmerl, Bradley/0000-0001-7828-622X
FU Department of Defense [FA8721-05-C-0003]; Carnegie Mellon University
FX This material is based upon work funded and supported by the Department
   of Defense under Contract No. FA8721-05-C-0003 with Carnegie Mellon
   University for the operation of the Software Engineering Institute, a
   federally funded research and development center. [Distribution
   Statement A] This material has been approved for public release and
   unlimited distribution. Please see Copyright notice for non-US
   Government use and distribution (DM-0004612).
CR Andova S, 2003, LECT NOTES COMPUT SC, V2791, P88
   [Anonymous], 2004, THESIS CARNEGIE MELL
   [Anonymous], 2014, Software engineering: a practitioner's approach
   Beheshti SMRS, 2015, I C DEV ESYST ENG, P131, DOI 10.1109/DeSE.2015.23
   Calinescu R, 2011, IEEE T SOFTWARE ENG, V37, P387, DOI 10.1109/TSE.2010.92
   Calinescu R, 2009, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.2009.5070512
   Camara J, P 30 ANN ACM S APPL, P428
   Cámara J, 2016, J SYST SOFTWARE, V122, P507, DOI 10.1016/j.jss.2015.09.021
   Cámara J, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P13, DOI 10.1109/SEAMS.2013.6595488
   Carzaniga A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P782, DOI 10.1109/ICSE.2013.6606624
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Cheng SW, 2012, J SYST SOFTWARE, V85, P2860, DOI 10.1016/j.jss.2012.02.060
   Cheng SW, 2009, 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P132, DOI 10.1109/SEAMS.2009.5069082
   D'Ippolito N, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P688, DOI 10.1145/2568225.2568264
   da Silva C.E., 2011, P 6 INT S SOFTW ENG, P148, DOI DOI 10.1145/1988008.1988029
   Di Marco A, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P133, DOI 10.1109/SEAMS.2013.6595500
   Didona D, 2015, INT C PAR DISTRIB SY, P405, DOI 10.1109/ICPADS.2015.58
   Epifani I, 2009, PROC INT CONF SOFTW, P111, DOI 10.1109/ICSE.2009.5070513
   Filieri A, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P13, DOI 10.1145/2786805.2786833
   Forejt Vojtech, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P317, DOI 10.1007/978-3-642-33386-6_25
   Garlan D, 2004, COMPUTER, V37, P46, DOI 10.1109/MC.2004.175
   Giunchiglia F., 1999, LNAI, V1809
   Huber N, 2014, SERV ORIENTED COMPUT, V8, P73, DOI 10.1007/s11761-013-0144-4
   Huebscher MC, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1380584.1380585
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Klein C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P700, DOI 10.1145/2568225.2568227
   Kramer J, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P259, DOI 10.1109/FOSE.2007.19
   Kwiatkowska Marta, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P5, DOI 10.1007/978-3-319-02444-8_2
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2007, LECT NOTES COMPUT SC, V4486, P220
   Laprie J.-C., 2008, DSN FAST ABSTRACTS
   Li W., 2014, TOOLS ALGORITHMS CON, P470, DOI [10.1007/978-3-642-54862-8_40, 10.1007/978-3-642-54862-8_40/COVER]
   Moreno GA, 2016, PR INT CONF AUTONOM, P147, DOI 10.1109/ICAC.2016.59
   Moreno GA, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P1, DOI 10.1145/2786805.2786853
   Moreno J. C., 2014, LECT NOTES COMPUTER, P89
   Mukhija A, 2007, ECOWS 07: PROCEEDING OF THE 5TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P3, DOI 10.1109/ECOWS.2007.24
   Nou R, 2009, J SYST SOFTWARE, V82, P486, DOI 10.1016/j.jss.2008.07.048
   Piterman N, 2006, LECT NOTES COMPUT SC, V3855, P364
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   Schmerl Bradley R., 2014, P HOTSOS 14, P2
   SCHOPPERS MJ, 1987, P 10 INT JOINT C ART, P1039
   Sykes Daniel., 2010, Proceedings of the 2010 ACM Symposium on Applied Computing, SAC '10, P431, DOI DOI 10.1145/1774088.1774180
   Tajalli H., 2010, P IEEE ACM INT C AUT, P467, DOI DOI 10.1145/1858996.1859092
   Turner A, 2013, IEEE T PARALL DISTR, V24, P1256, DOI 10.1109/TPDS.2012.335
   Whittle J, 2010, REQUIR ENG, V15, P177, DOI 10.1007/s00766-010-0101-0
NR 45
TC 8
Z9 8
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2018
VL 25
IS 3
BP 595
EP 626
DI 10.1007/s10515-018-0234-9
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP2SY
UT WOS:000440687600006
DA 2024-07-18
ER

PT J
AU Kähkönen, K
   Saarikivi, O
   Heljanko, K
AF Kahkonen, Kari
   Saarikivi, Olli
   Heljanko, Keijo
TI Unfolding based automated testing of multithreaded programs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Dynamic symbolic execution; Unfoldings; Automated testing; Partial order
   reduction
ID EFFICIENT
AB In multithreaded programs both environment input data and the nondeterministic interleavings of concurrent events can affect the behavior of the program. One approach to systematically explore the nondeterminism caused by input data is dynamic symbolic execution. For testing multithreaded programs we present a new approach that combines dynamic symbolic execution with unfoldings, a method originally developed for Petri nets but also applied to many other models of concurrency. We provide an experimental comparison of our new approach with existing algorithms combining dynamic symbolic execution and partial order reductions and show that the new algorithm can explore the reachable control states of each thread with a significantly smaller number of test runs. In some cases the reduction to the number of test runs can be even exponential allowing programs with long test executions or hard-to-solve constraints generated by symbolic execution to be tested more efficiently. In addition we show that our algorithm generates a structure describing different interleavings from which deadlocks can be detected efficiently as well.
C1 [Kahkonen, Kari; Saarikivi, Olli; Heljanko, Keijo] Aalto Univ, HIIT, Sch Sci, Dept Comp Sci & Engn, Helsinki 00076, Finland.
C3 Aalto University
RP Kähkönen, K (corresponding author), Aalto Univ, HIIT, Sch Sci, Dept Comp Sci & Engn, Box 15400, Helsinki 00076, Finland.
EM kari.kahkonen@aalto.fi; olli.saarikivi@aalto.fi; keijo.heljanko@aalto.fi
RI Heljanko, Keijo/C-7603-2011
OI Heljanko, Keijo/0000-0002-4547-2701; Saarikivi, Olli/0000-0001-7596-4734
FU Tekes - Finnish Agency for Technology and Innovation; ARTEMIS-JU;
   Academy of Finland [128050, 139402]; Academy of Finland (AKA) [128050,
   139402] Funding Source: Academy of Finland (AKA)
FX This work has been financially supported by Tekes - Finnish Agency for
   Technology and Innovation, ARTEMIS-JU and Academy of Finland (Projects
   128050 and 139402).
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Agarwal Rahul, 2006, P 2006 WORKSH PAR DI, P51
   [Anonymous], THESIS U ILLINOIS
   [Anonymous], 1996, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-60761-7
   Cadar C., 2008, KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Diekert V., 1995, BOOK TRACES
   Esparza J., 2008, EATCS MONOGRAPHS THE
   Farzan A, 2006, LECT NOTES COMPUT SC, V4144, P315, DOI 10.1007/11817963_30
   Flanagan C., 2005, POPL
   Flanagan C, 2010, COMMUN ACM, V53, P93, DOI 10.1145/1839676.1839699
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   KAHKONEN K, 2012, P 27 IEEE ACM INT C, P150
   Khomenko V., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P366
   Lauterburg S, 2010, LECT NOTES COMPUT SC, V6013, P308, DOI 10.1007/978-3-642-12029-9_22
   McMillan KennethL., 1993, CAV 92 P 4 INT WORKS, P164, DOI [10.1007/3-540-56496-914, DOI 10.1007/3-540-56496-914]
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Pasareanu Corina S., 2008, P 2008 INT S SOFTW T, P15, DOI [DOI 10.1145/1390630.1390635, DOI 10.1145/1390630]
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   Saarikivi O., 2012, 2012 12th International Conference on Application of Concurrency to System Design (ACSD), P132, DOI 10.1109/ACSD.2012.18
   Sen K, 2007, LECT NOTES COMPUT SC, V4383, P166
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P419
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   VALMARI A, 1991, LECT NOTES COMPUT SC, V483, P491
   Vogler W, 1998, LECT NOTES COMPUT SC, V1466, P501
   Wang C, 2010, LECT NOTES COMPUT SC, V6015, P328, DOI 10.1007/978-3-642-12002-2_27
NR 27
TC 9
Z9 10
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2015
VL 22
IS 4
SI SI
BP 475
EP 515
DI 10.1007/s10515-014-0150-6
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CR8KJ
UT WOS:000361600000003
DA 2024-07-18
ER

PT J
AU Lochbihler, A
   Snelting, G
AF Lochbihler, Andreas
   Snelting, Gregor
TI On temporal path conditions in dependence graphs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 7th IEEE International Working Conference on Source Code Analysis and
   Manipulation
CY SEP 30-OCT 01, 2007
CL Paris, FRANCE
SP IEEE Comp Soc, TCSE, CEA Lab Integrat Syst & Technologies, Ecole Polytech, Software Improvement Grp, CREST, Kings Coll London
DE Program dependence graph; Path condition; Temporal logic; Security
   analysis
AB Program dependence graphs are a well-established device to represent possible information flow in a program. Path conditions in dependence graphs have been proposed to express more detailed circumstances of a particular flow; they provide precise necessary conditions for information flow along a path or chop in a dependence graph. Ordinary boolean path conditions, however, cannot express temporal properties, e.g. that for a specific flow it is necessary that some condition holds, and later another specific condition holds.
   In this contribution, we introduce temporal path conditions, which extend ordinary path conditions by temporal operators in order to express temporal dependencies between conditions for a flow. We present motivating examples, generation and simplification rules, application of model checking to generate witnesses for a specific flow, and a case study. We prove the following soundness property: if a temporal path condition for a path is satisfiable, then the ordinary boolean path condition for the path is satisfiable. The converse does not hold, indicating that temporal path conditions are more precise.
C1 [Lochbihler, Andreas; Snelting, Gregor] Univ Karlsruhe TH, Lehrstuhl Programmierparadigmen, Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Lochbihler, A (corresponding author), Univ Karlsruhe TH, Lehrstuhl Programmierparadigmen, Karlsruhe, Germany.
EM lochbihl@ipd.info.uni-karlsruhe.de; snelting@ipd.info.uni-karlsruhe.de
OI Lochbihler, Andreas/0000-0002-5851-494X
CR Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   BALL T, 2001, WORKSH PROGR AN SOFT, P97
   BALL T, 2002, SLAM PROJECT DEBUGGI, P1
   CANFORA G, 1998, INF SOFTW TECHNOL, V30, P595
   CIMATTI A, 1999, LECT NOTES COMPUTER, V1633, P495, DOI DOI 10.1007/3-540-48683-6_44
   Clarke Edmund M., 2001, Model Checking
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Darvas A, 2005, LECT NOTES COMPUT SC, V3450, P193
   Das Manuvir., 2002, PLDI, P57, DOI DOI 10.1145/512529.512538
   Dhurjati D, 2006, LECT NOTES COMPUT SC, V4134, P425
   Dwyer MB, 2001, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.2001.919092
   FISCHER J, 2005, FSE05, P227
   HAMMER C, 2006, INT S SEC SOFTW ENG, P87
   HAMPAPURAM H, 2005, WORKSH PROGR AN SOFT, P52
   Hong HS, 2003, PROC INT CONF SOFTW, P232
   Krinke J., 2003, THESIS U PASSAU
   LOCHBIHLER A, 2006, THESIS U PASSAU
   Lochbihler A, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P49, DOI 10.1109/SCAM.2007.10
   McMillan KennethLauchlin., 1992, SYMBOLIC MODEL CHECK
   Ranganath VP, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275502
   Robschink T, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P478, DOI 10.1109/ICSE.2002.1007992
   ROBSCHINK T, 2005, THESIS U PASSAU
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Snelting G., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P332
   Snelting G, 2006, ACM T SOFTW ENG METH, V15, P410, DOI 10.1145/1178625.1178628
   TIP F, 1995, J PROGRAM LANG, V3, P121
   XIE Y, 2002, PATH SENSITIVE PROGR
NR 29
TC 2
Z9 2
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2009
VL 16
IS 2
BP 263
EP 290
DI 10.1007/s10515-009-0050-3
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 431SN
UT WOS:000265084000004
DA 2024-07-18
ER

PT J
AU Artzi, S
   Kiezun, A
   Quinonez, J
   Ernst, MD
AF Artzi, Shay
   Kiezun, Adam
   Quinonez, Jaime
   Ernst, Michael D.
TI Parameter reference immutability: formal definition, inference tool, and
   comparison
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 22nd International Conference on Automated Software Engineering
CY NOV 05-09, 2007
CL Atlanta, GA
DE Readonly; Reference immutability; Definition; Combined analysis
ID JAVA
AB Knowing which method parameters may be mutated during a method's execution is useful for many software engineering tasks. A parameter reference is immutable if it cannot be used to modify the state of its referent object during the method's execution. We formally define this notion, in a core object-oriented language. Having the formal definition enables determining correctness and accuracy of tools approximating this definition and unbiased comparison of analyses and tools that approximate similar definitions.
   We present Pidasa, a tool for classifying parameter reference immutability. Pidasa combines several lightweight, scalable analyses in stages, with each stage refining the overall result. The resulting analysis is scalable and combines the strengths of its component analyses. As one of the component analyses, we present a novel dynamic mutability analysis and show how its results can be improved by random input generation. Experimental results on programs of up to 185 kLOC show that, compared to previous approaches, Pidasa increases both run-time performance and overall accuracy of immutability inference.
C1 [Artzi, Shay; Kiezun, Adam; Quinonez, Jaime; Ernst, Michael D.] MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02142 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Artzi, S (corresponding author), MIT, Comp Sci & Artificial Intelligence Lab, 32 Vassar st, Cambridge, MA 02142 USA.
EM artzi@csail.mit.edu; akiezun@csail.mit.edu; jaimeq@csail.mit.edu;
   mernst@csail.mit.edu
CR [Anonymous], 1992, Programming Language Design and Implementation (PLDI), DOI DOI 10.1145/143103.143137
   [Anonymous], 2000, The C++ Programming Language
   ARTZI S, 2006, M TOOS 2006
   ARTZI S, 2007, ASE 2007, P104
   BACON D, 1996, C OBJ OR PROGR SYST, P324
   Banning J.P., 1979, Proceedings of the 6th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, P29, DOI [10.1145/567752.567756., DOI 10.1145/567752.567756]
   Biberstein M., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P28
   BIRKA A, 2004, OOPSLA, P35
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   BOYLAND J, 2005, FTFJP 2005
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Cataño N, 2003, LECT NOTES COMPUT SC, V2575, P26
   CHOI JD, 1993, P 20 ACM SIGPLAN SIG, P232
   Clausen LR, 1997, CONCURRENCY-PRACT EX, V9, P1031, DOI 10.1002/(SICI)1096-9128(199711)9:11<1031::AID-CPE354>3.0.CO;2-O
   COOPER K, 1988, P SIGPLAN 88 C PROGR, P57
   Correa TelmoLuis., 2007, COMPANION 22 ACM SIG, P866
   Dallmeier V., 2006, P 2006 INT WORKSH DY, P17, DOI DOI 10.1145/1138912.1138918
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Demsky B, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P313, DOI 10.1109/ICSE.2002.1007978
   Dietl W, 2005, J OBJECT TECHNOL, V4, P5, DOI 10.5381/jot.2005.4.8.a1
   DIWAN A, 1996, C OBJ OR PROGR SYST, P292
   Dolado JJ, 2003, IEEE T SOFTWARE ENG, V29, P665, DOI 10.1109/TSE.2003.1214329
   Ernst D., 2005, OOPSLA, P211, DOI [DOI 10.1145/1103845.1094828, 10.1145/1094811.1094828, DOI 10.1145/1094811.1094828]
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   FOSTER JS, 1999, P 1999 ACM SIGPLAN C, P192
   Fowler M., 2000, Refactoring: Improving the Design of Existing Code
   Greenfieldboyce D, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P321
   GUO PJ, 2006, THESIS MIT CAMBRIDGE
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   HOGG J, 1991, C P OBJ OR PROGR SYS, P271
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kniesel G, 2001, SOFTWARE PRACT EXPER, V31, P555, DOI 10.1002/spe.372
   LANDI W, 1993, SIGPLAN NOTICES, V28, P56, DOI 10.1145/173262.155096
   Le A, 2005, LECT NOTES COMPUT SC, V3443, P287, DOI 10.1007/11406921_22
   Mariani L, 2005, IEEE INT C ENG COMP, P292
   MILANOVA A, 2002, INT S SOFTW TEST AN, P1
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   OCALLAHAN R, 2003, P 9 ACM SIGPLAN S PR, P167
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   PAPI MM, 2008, ISSTA, P201
   Pechtchanski I., 2002, JOINT ACM ISCOPE JAV, P202
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   POLISHCHUK M, 2007, P 34 ANN ACM SIGPLAN, P39
   Porat S., 2000, CASCON
   QUINONEZ J, 2008, THESIS MIT CAMBRIDGE
   Quinonez J, 2008, LECT NOTES COMPUT SC, V5142, P616, DOI 10.1007/978-3-540-70592-5_26
   RAZAFIMAHEFA C, 1999, THESIS MCGILL U MONT
   Rountev A., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P20
   ROUNTEV A, 2004, ICSM, P82
   ROUNTEV A, 2001, OOPSLA, P43, DOI DOI 10.1145/504282.504286
   RUF E, 1995, P SIGPLAN 95 C PROGR, P13
   Ryder BG, 2001, ACM T PROGR LANG SYS, V23, P105, DOI 10.1145/383043.381532
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   SALCIANU A, 2006, THESIS MIT CAMBRIDGE
   Savage S., 2015, P 16 ACM S OP SYST P, P27, DOI [10.1145/268998.266641, DOI 10.1145/268998.266641]
   SKOGLUND M, 2001, FTFJP 2001
   TIP F, 2000, OOPSLA, P281
   TKACHUK O, 2003, ESEC FSE 2003, P188
   TSCHANTZ MS, 2006, THESIS MIT CAMBRIDGE
   Vaziri M, 2007, LECT NOTES COMPUT SC, V4609, P54
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Xie T, 2006, LECT NOTES COMPUT SC, V4067, P380
   Xu HY, 2007, ACTA POLYM SIN, P785
   ZIBIN Y, 2007, ESEC SIGSOFT FSE, P75
NR 64
TC 6
Z9 7
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2009
VL 16
IS 1
BP 145
EP 192
DI 10.1007/s10515-008-0043-7
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 408EP
UT WOS:000263418600006
DA 2024-07-18
ER

PT J
AU Morrison, R
   Balasubramaniam, D
   Kirby, G
   Mickan, K
   Warboys, B
   Greenwood, RM
   Robertson, I
   Snowdon, B
AF Morrison, Ron
   Balasubramaniam, Dharini
   Kirby, Graham
   Mickan, Kath
   Warboys, Brian
   Greenwood, R. Mark
   Robertson, Ian
   Snowdon, Bob
TI A framework for supporting dynamic systems co-evolution
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE software evolution; run-time evolution; adaptive software; incremental
   design; co-evolution; reflection
ID REFLECTION
AB Businesses and their supporting software evolve to accommodate the constant revision and re-negotiation of commercial goals, and to intercept the potential of new technology. We have adopted the term co-evolution to describe the concept of the business and the software evolving sympathetically, but at potentially different rates. More generally, we extend co-evolution to accommodate wide-informatics systems, that are assembled from parts that co-evolve with each other and their environment, and whose behavior is potentially emergent. Typically these are long-lived systems in which dynamic co-evolution, whereby a system evolves as part of its own execution in reaction to both expected and unexpected events, is the only feasible option for change. Examples of such systems include continuously running business process models, sensor nets, grid applications, self-adapting/ tuning systems, peer-to-peer routing systems, control systems, autonomic systems, and pervasive computing applications.
   The contribution of this paper comprises: a study of the intrinsic nature of dynamic co-evolving systems; the derivation of a set of intrinsic requirements; a description of a model and a set of technologies, new and extant, to meet these intrinsic requirements; and illustrations of how these technologies may be implemented within an architecture description language (ArchWare ADL) and a conventional programming language ( Java). The model and technologies address three topics: structuring for dynamic co-evolution, incremental design, and adapting dynamic co-evolving systems. The combination yields a framework that can describe the system's specification, the executing software and the reflective evolutionary mechanisms within a single computational domain in which all three may evolve in tandem.
C1 Univ St Andrews, Sch Comp Sci, St Andrews KY16 9SX, Fife, Scotland.
   Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
C3 University of St Andrews; University of Manchester
RP Morrison, R (corresponding author), Univ St Andrews, Sch Comp Sci, St Andrews KY16 9SX, Fife, Scotland.
EM ron@dcs.st-and.ac.uk; dharini@dcs.st-and.ac.uk; graham@dcs.st-and.ac.uk;
   kath@dcs.st-and.ac.uk; brian@cs.man.ac.uk; markg@cs.man.ac.uk;
   robertsi@cs.man.ac.uk; rsnowdon@cs.man.ac.uk
OI Kirby, Graham/0000-0002-4422-0190
CR [Anonymous], 2005, Extreme programming explained: Embrace change
   [Anonymous], LISP PROGRAMMERS MAN
   [Anonymous], 1994, COMPLEXITY EMERGING
   *AP SOFTW FDN, 2003, BYT COD ENG LIBR BCE
   Balasubramaniam D., 2004, P 1 ACM SIGSOFT WORK, P18
   BALASUBRAMANIAM D, 2005, P ICSE WORKSH DES EV, P59
   Beer S., 1981, The Brain of the Firm
   BRADBURY JS, 2004, P 1 ACM SIGSOFT WORK, P28
   BROSILOW C, 2002, FEEDFORWARD CONTROL, pCH9
   BURSTALL RM, 1971, PROGRAMMING POP 2 ED
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   Colman A, 2005, LECT NOTES COMPUT SC, V3454, P63
   Dasgupta Subrata., 1991, Design Theory and Computer Science
   GARLAN D, 2004, ARCHITECTURE BASED S, V37, P46
   GODFREY MW, 1991, P INT C SOFTW MAINT, P23
   GORLICK MM, 1991, 13TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P23, DOI 10.1109/ICSE.1991.130620
   Groenewegen L, 2006, LECT NOTES COMPUT SC, V4038, P97
   HERRING C, 2001, P 34 ANN HAW INT C S, P1
   *IBM, 2002, AUT COMP IBMS PERSP
   KAPLAN S, 2001, WORK C COMPL DYN SYS
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kirby G, 1998, SOFTWARE PRACT EXPER, V28, P1045, DOI 10.1002/(SICI)1097-024X(199808)28:10<1045::AID-SPE191>3.0.CO;2-F
   KIRBY GNC, 2005, DYNAMIC COMPILATION
   KIRBY GNC, 1992, PERSISTENT OBJECT SY, P86
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   Kramer J, 1998, FOURTH INTERNATIONAL CONFERENCE ON CONFIGURABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P91, DOI 10.1109/CDS.1998.675762
   Lehman MeirM., 1997, Lecture Notes in Computer Science, V1149, P108
   McIlraith SA, 2001, IEEE INTELL SYST APP, V16, P46, DOI 10.1109/5254.920599
   MICKAN K, 2006, THESIS U ST ANDREWS
   MILNER R, 2003, 17 INT C COMP ASS RA
   MITLETONKELLY E, 2006, SOFTWARE EVOLUTION F, P53
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Morrison R, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P69, DOI 10.1109/WICSA.2004.1310691
   MORRISON R, 2000, SOFTW PRACT EXPERIEN, V30, P1
   MORRISON R, 1999, NAPIER88 PERSISTENT, P98
   NAUR P, 1969, SOFTWARE ENG REPORT, P7
   OQUENDO F, 2004, ACM SOFTW ENG NOTES, V29
   Oreizy P, 1999, IEEE INTELL SYST APP, V14, P54, DOI 10.1109/5254.769885
   Oreizy P, 1998, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.1998.671114
   *PSALG, 1988, PPRR1288
   SCHMERL B, 2002, P 14 INT C SOFTW ENG, V27, P241
   Shaw Mary, 1995, ACM SOFTWARE ENG NOT, V20, P27
   Singh MunindarP., 2005, SERVICE ORIENTED COM
   STEMPLE D, 2000, ESPRIT BAS RES SER, P158
   Topolnik M, 2005, ConTEL 2005: Proceedings of the 8th International Conference on Telecommunications, Vols 1 and 2, P485, DOI 10.1109/CONTEL.2005.185935
   Warboys B, 2005, IEEE SOFTWARE, V22, P20, DOI 10.1109/MS.2005.86
   Warboys B.C., 1999, Business information systems: A process approach
   WARBOYS BC, 1995, SOFTWARE PARADIGM, V10, P71
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
   Zhang Ji, 2006, P 28 INT C SOFTW ENG, P371
NR 50
TC 14
Z9 14
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2007
VL 14
IS 3
BP 261
EP 292
DI 10.1007/s10515-007-0011-7
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 212HF
UT WOS:000249586100001
DA 2024-07-18
ER

PT J
AU Chen, JY
   Ge, J
   Zheng, HB
AF Chen, Jinyin
   Ge, Jie
   Zheng, Haibin
TI ActGraph: prioritization of test cases based on deep neural network
   activation graph
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Deep neural network; Test prioritization; Deep learning testing;
   Activation graph; Label
AB Widespread applications of deep neural networks (DNNs) benefit from DNN testing to guarantee their quality. In the DNN testing, numerous test cases are fed into the model to explore potential vulnerabilities, but they require expensive manual cost to check the label. Therefore, test case prioritization is proposed to solve the problem of labeling cost, e.g., surprise adequacy-based, uncertainty quantifiers-based and mutation-based prioritization methods. However, most of them suffer from limited scenarios (i.e. high confidence adversarial or false positive cases) and high time complexity. To address these challenges, we propose the concept of the activation graph from the perspective of the spatial relationship of neurons. We observe that the activation graph of cases that triggers the model's misbehavior significantly differs from that of normal cases. Motivated by it, we design a test case prioritization method based on the activation graph, ActGraph, by extracting the high-order node feature of the activation graph for prioritization. ActGraph explains the difference between the test cases to solve the problem of scenario limitation. Without mutation operations, ActGraph is easy to implement, leading to lower time complexity. Extensive experiments on three datasets and four models demonstrate that ActGraph has the following key characteristics. (i) Effectiveness and generalizability: ActGraph shows competitive performance in all of the natural, adversarial and mixed scenarios, especially in RAUC-100 improvement (similar to x1.40). (ii) Efficiency: ActGraph runs at less time cost (similar to x1/50) than the state-of-the-art method. The code of ActGraph is open-sourced at https://github.com/Embed-Debuger/ActGraph.
C1 [Chen, Jinyin; Zheng, Haibin] Zhejiang Univ Technol, Inst Cyberspace Secur, Hangzhou 310023, Zhejiang, Peoples R China.
   [Chen, Jinyin; Ge, Jie; Zheng, Haibin] Zhejiang Univ Technol, Coll Informat Engn, Hangzhou 310023, Zhejiang, Peoples R China.
C3 Zhejiang University of Technology; Zhejiang University of Technology
RP Zheng, HB (corresponding author), Zhejiang Univ Technol, Inst Cyberspace Secur, Hangzhou 310023, Zhejiang, Peoples R China.; Zheng, HB (corresponding author), Zhejiang Univ Technol, Coll Informat Engn, Hangzhou 310023, Zhejiang, Peoples R China.
EM chenjinyin@zjut.edu.cn; 2112103116@zjut.edu.com;
   haibinzheng320@gmail.com
OI Ge, Jie/0009-0004-5163-8765
FU National Natural Science Foundation of China [62103374]; Zhejiang
   Provincial Natural Science Foundation [LDQ23F020001]; National Key
   Laboratory of Science and Technology on Information System Security
   [61421110502]
FX AcknowledgementsThis research was supported by the National Natural
   Science Foundation of China (No. 62072406), the Zhejiang Provincial
   Natural Science Foundation (No. LDQ23F020001), the National Key
   Laboratory of Science and Technology on Information System Security (No.
   61421110502), the National Natural Science Foundation of China (No.
   62103374).
CR Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Chen JJ, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3394112
   Chen TQ, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P785, DOI 10.1145/2939672.2939785
   Chen YS, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST), P89, DOI 10.1109/AITest.2019.000-2
   Dong YZ, 2019, Arxiv, DOI arXiv:1911.05904
   Fel Thomas, 2022, NEURIPS
   Filan D, 2021, Arxiv, DOI arXiv:2103.03386
   Gilmer J, 2017, PR MACH LEARN RES, V70
   Guo JM, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P739, DOI 10.1145/3236024.3264835
   Harel-Canada F, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P851, DOI 10.1145/3368089.3409754
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Henley Jon, 2016, GUARDIAN 1109
   Kim J, 2019, PROC INT CONF SOFTW, P1039, DOI 10.1109/ICSE.2019.00108
   Krizhevsky A., 2009, LEARNING MULTIPLE LA
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Li SF, 2022, IEEE SECUR PRIV, V20, P50, DOI 10.1109/MSEC.2022.3181001
   Li ZN, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P901, DOI 10.1145/3368089.3409696
   Li ZN, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P499, DOI 10.1145/3338906.3338930
   Li ZN, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2019), P89, DOI 10.1109/ICSE-NIER.2019.00031
   Liu TY, 2010, SIGIR 2010: PROCEEDINGS OF THE 33RD ANNUAL INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH DEVELOPMENT IN INFORMATION RETRIEVAL, P904
   Ma L, 2018, IEEE INT CONF AUTOM, P120, DOI 10.1145/3238147.3238202
   Ma W, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3417330
   Malaiya YK, 2002, IEEE T RELIAB, V51, P420, DOI 10.1109/TR.2002.804489
   Naitzat G, 2020, J MACH LEARN RES, V21
   Ni J, 2022, IEEE J-STARS, V15, P3697, DOI 10.1109/JSTARS.2022.3168799
   Odena A, 2019, PR MACH LEARN RES, V97
   Papernot N, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P372, DOI 10.1109/EuroSP.2016.36
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Rieck B., 2019, 7 INT C LEARNING REP
   Shen EJ, 2020, IEEE INT CONF AUTOM, P410, DOI 10.1145/3324884.3416621
   Simonyan K, 2015, Arxiv, DOI arXiv:1409.1556
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Vahedian Fatemeh, 2022, CIKM '22: Proceedings of the 31st ACM International Conference on Information & Knowledge Management, P4545, DOI 10.1145/3511808.3557628
   Wang J, 2022, IEEE T INTELL TRANSP, V23, P9543, DOI 10.1109/TITS.2022.3146038
   Wang Z, 2021, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE43902.2021.00046
   Weiss M, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P139, DOI 10.1145/3533767.3534375
   Weiss M, 2021, IEEE INT CONF SOFTW, P24, DOI 10.1109/ICST49551.2021.00015
   Yang Feng, 2020, ISSTA '20: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, P177, DOI 10.1145/3395363.3397357
   Zhao Y., 2022, 10 INT C LEARNING RE
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 41
TC 1
Z9 1
U1 3
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 28
DI 10.1007/s10515-023-00396-8
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA P7DB3
UT WOS:001052230700001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Antonelli, L
   Bimonte, S
   Rizzi, S
AF Antonelli, Leandro
   Bimonte, Sandro
   Rizzi, Stefano
TI Multidimensional modeling driven from a domain language
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Language extended lexicon; Multidimensional modeling; Data warehouse
   design; Requirements elicitation
ID DESIGN; METHODOLOGY
AB Purpose The multidimensional model is based on the concepts of facts (business phenomena to be analyzed), dimensions (coordinates for analyzing a fact), hierarchies (descriptions of each dimension at progressively coarser levels of aggregation), and measures (numerical attributes that quantify a fact), and it is commonly adopted for representing data to support the decision-making process. Though multidimensional modeling has been widely investigated, requirements elicitation is still an open issue mainly due to the poor knowledge end-users have of the multidimensional model on the one hand, to the lack of a domain language shared with designers on the other. In the direction of bridging this gap, this paper proposes an approach to obtain a multidimensional schema from the language of the domain captured through a Language Extended Lexicon (LEL). LELs have been introduced as structured glossaries to describe the language used in the application domain, aimed at facilitating requirements elicitation in software engineering. Our approach consists of two steps. In the first one, end-users apply a set of derivation rules to the LEL in order to obtain draft multidimensional schemata. The second step relies on the interaction of end-users and designers to review and edit these draft multidimensional schemata so as to obtain the final ones. The approach is validated via an experiment made on a case study, showing that end-users who apply our rules tend to produce multidimensional schemata that are more correct than those produced by end-users who work freely. Our rules provide a structured context where subjectivity has a smaller impact than in the case of designing with no guidelines, thus effectively supporting the collaboration between end-users and designers.
C1 [Antonelli, Leandro] UNLP, LIFIA Fac Informat, RA-1900 La Plata, Buenos Aires, Argentina.
   [Bimonte, Sandro] Univ Clermont Auvergne, INRAE, TSCF, 9 Ave Blaise Pascal, F-63170 Aubiere, France.
   [Rizzi, Stefano] Univ Bologna, DISI, Viale Risorgimento 2, I-40136 Bologna, Emilia Romagna, Italy.
C3 National University of La Plata; Universite Clermont Auvergne (UCA);
   INRAE; University of Bologna
RP Antonelli, L (corresponding author), UNLP, LIFIA Fac Informat, RA-1900 La Plata, Buenos Aires, Argentina.
EM leandro.antonelli@lifia.info.unlp.edu.ar; sandro.bimonte@inrae.fr;
   stefano.rizzi@unibo.it
RI Rizzi, Stefano/IUO-7212-2023
OI Rizzi, Stefano/0000-0002-4617-217X
CR Oliveira ADA, 2007, P INT C CHIL COMPUT, P40, DOI 10.1109/SCCC.2007.20
   Almentero E., 2014, P 29 ANN ACM S APPL, P1007
   Andrianjaka RM, 2019, INT CONF SYST THEO, P266, DOI [10.1109/icstcc.2019.8886081, 10.1109/ICSTCC.2019.8886081]
   [Anonymous], 2022, STANFORD NATURAL LAN
   [Anonymous], 1993, P IEEE INT S REQ ENG
   [Anonymous], 2007, PROC DOLAP
   [Anonymous], 2013, The Data Warehouse Toolkit: The Defi nitive Guide to Dimensional Modeling
   [Anonymous], 2001, Proceedings of the 4th ACM international workshop on Data warehousing and OLAP (DOLAP '01)
   [Anonymous], 2017, Requirements engineering
   Antonelli L., 2012, P WORKSHOP ENGENHARI, P1
   Antonelli L, 2016, J OBJECT TECHNOL, V15, DOI 10.5381/jot.2016.15.3.a3
   Antonelli L, 2015, REQUIR ENG, V20, P139, DOI 10.1007/s00766-013-0193-4
   Antonelli L, 2014, INT REQUIR ENG CONF, P263, DOI 10.1109/RE.2014.6912268
   Arnicans G, 2013, FRONT ARTIF INTEL AP, V249, P263, DOI 10.3233/978-1-61499-161-8-263
   Barbosa S. Diniz, 2004, P INT C ENG HUMAN CO, P271
   Bargui F, 2009, IEEE NLP-KE 2009: PROCEEDINGS OF INTERNATIONAL CONFERENCE ON NATURAL LANGUAGE PROCESSING AND KNOWLEDGE ENGINEERING, P199
   Bimonte S, 2021, REQUIR ENG, V26, P43, DOI 10.1007/s00766-020-00331-3
   Bozzato L., 2008, P 5 WORKSHOP SEMANTI, P1
   Breitman KK, 2003, 11TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P309
   Carme A, 2010, LECT NOTES COMPUT SC, V6263, P13, DOI 10.1007/978-3-642-15105-7_2
   Centeno M. E., 2009, P 6 WORKSHOP INGENIE, P941
   Cysneiros L.M., 2001, P C CTR ADV STUDIES, P2
   Cysneiros L.M., 2001, P WORKSHOP ENGENHARI, P139
   Di Tria F, 2017, INFORM SYST, V63, P47, DOI 10.1016/j.is.2016.06.006
   Di Tria F, 2012, INFORM SOFTWARE TECH, V54, P360, DOI 10.1016/j.infsof.2011.11.004
   Elamin E., 2017, P 2017 INT C COMMUNI, P1
   Evans R., 2013, P INT C RECENT ADV N, P270
   Ferrari A, 2018, PROC IEEE ACM INT C, P536, DOI 10.1145/3183440.3183467
   Gallinucci E, 2019, INFORM SYST, V85, P114, DOI 10.1016/j.is.2019.02.004
   Gallinucci E, 2018, INFORM SYST, V77, P86, DOI 10.1016/j.is.2018.06.004
   Garrido A, 2020, COMPUT ELECTRON AGR, V170, DOI 10.1016/j.compag.2020.105242
   Giorgini P, 2008, DECIS SUPPORT SYST, V45, P4, DOI 10.1016/j.dss.2006.12.001
   Golfarelli M, 1998, INT J COOP INF SYST, V7, P215, DOI 10.1142/S0218843098000118
   Golfarelli M, 2011, INFORM SOFTWARE TECH, V53, P1183, DOI 10.1016/j.infsof.2011.04.002
   Hadad G., 2009, ENCY INFORM SCI TECH, P789
   Jovanovic P, 2014, INFORM SYST, V44, P94, DOI 10.1016/j.is.2014.01.004
   Kaldeich C, 2004, BIOMED SCI INSTRUM, V3084, P536
   Kilicoglu H, 2008, BMC BIOINFORMATICS, V9, DOI 10.1186/1471-2105-9-S11-S10
   Leonardi M., 2015, INT J COMPUT SCI ENG, V5, P413
   Luc RJ, 2016, INT CONF SYST THEO, P842, DOI 10.1109/ICSTCC.2016.7790773
   Lv QJ, 2014, PROCEEDINGS OF 2014 IEEE WORKSHOP ON ADVANCED RESEARCH AND TECHNOLOGY IN INDUSTRY APPLICATIONS (WARTIA), P312, DOI 10.1109/WARTIA.2014.6976259
   Mauco MV, 2005, 2005 IEEE INTERNATIONAL SYMPOSIUM ON SIGNAL PROCESSING AND INFORMATION TECHNOLOGY (ISSPIT), VOLS 1 AND 2, P646
   Mighetti Juan P., 2016, CLEIej, V19, P181
   Nabli A, 2005, I C COMP SYST APPLIC
   Nair R, 2007, PROC WRLD ACAD SCI E, V19, P141
   Navigli R, 2008, FRONT ARTIF INTEL AP, V167, P71
   Phipps C., 2002, Proc. 4th Intl. Work. DMDW, P23
   Prakash N, 2018, DATA WAREHOUSE REQUI
   Razafindramintsa J.L., 2015, INT J COMPUT SCI ENG, V5, P1
   Romero Oscar, 2011, Scientific and Statistical Database Management. Proceedings 23rd International Conference, SSDBM 2011, P594, DOI 10.1007/978-3-642-22351-8_51
   Romero O, 2010, DATA KNOWL ENG, V69, P917, DOI 10.1016/j.datak.2010.03.006
   Romero O, 2009, INT J DATA WAREHOUS, V5, P1, DOI 10.4018/jdwm.2009040101
   Sakka A, 2021, DATA KNOWL ENG, V131, DOI 10.1016/j.datak.2021.101875
   Schuetz CG, 2021, SEMANT WEB, V12, P649, DOI 10.3233/SW-200419
   Serrano M, 2007, INFORM SOFTWARE TECH, V49, P851, DOI 10.1016/j.infsof.2006.09.008
   Sjoberg DIK, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P17, DOI 10.1109/ISESE.2002.1166921
   Tarehy BE, 2017, 2017 18TH INTERNATIONAL CARPATHIAN CONTROL CONFERENCE (ICCC), P310, DOI 10.1109/CarpathianCC.2017.7970417
   Thenmozhi M., 2016, INT J COMPUTER SCI I, V14, P8
   Urbieta M, 2022, LECT NOTE NETW SYST, V469, P413, DOI 10.1007/978-3-031-04819-7_40
   Urbieta M, 2020, INFORM SOFTWARE TECH, V127, DOI 10.1016/j.infsof.2020.106375
   Wohlin C., 2012, EXP SOFT ENG
   Zekri M, 2019, LECT NOTES COMPUT SC, V11684, P273, DOI 10.1007/978-3-030-28374-2_24
   Zhao L, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3444689
NR 63
TC 1
Z9 1
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
AR 6
DI 10.1007/s10515-022-00375-5
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7I8ME
UT WOS:000904142000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Han, JX
   Huang, C
   Sun, SQ
   Liu, ZL
   Liu, JY
AF Han, Jiaxuan
   Huang, Cheng
   Sun, Siqi
   Liu, Zhonglin
   Liu, Jiayong
TI bjXnet: an improved bug localization model based on code property graph
   and attention mechanism
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Bug localization; Graph semantics; Attention mechanism; Java project
ID RETRIEVAL
AB Bug localization technologies and tools are widely used in software engineering. Although state-of-the-art methods have achieved great progress, they only consider the source code information at the text level, which may establish a wrong correlation between the source code and the bug report, affecting the localization accuracy and reliability. In this paper, we propose an improved bug localization model, which uses the semantics of source codes at the graph level to supplement its semantics at the text level, optimizing and adjusting the graph semantics in combination with the attention mechanism to obtain the code semantic feature including the shallow and deep semantics of the source code. Finally, the correlation between code semantic feature and report semantic feature is measured by cosine similarity. We conduct experiments on three open source Java projects to comprehensively evaluate the performance of proposed model. The experimental results show that the model is significantly better than state-of-the-art methods.
C1 [Han, Jiaxuan; Huang, Cheng; Sun, Siqi; Liu, Zhonglin; Liu, Jiayong] Sichuan Univ, Sch Cyber Sci & Engn, Chengdu 610207, Sichuan, Peoples R China.
C3 Sichuan University
RP Huang, C (corresponding author), Sichuan Univ, Sch Cyber Sci & Engn, Chengdu 610207, Sichuan, Peoples R China.
EM zhanSxDrive30i@gmail.com; opcodesec@gmail.com; sunsiqi2022@gmail.com;
   jungleforsa@gmail.com; ljy@scu.edu.cn
RI LIU, JIAYONG/JKJ-6473-2023; Zhonglin, Liu/ABP-1204-2022
OI LIU, JIAYONG/0000-0002-1834-0877; Zhonglin, Liu/0000-0002-3239-5647
FU National Key Research and Development Program of China [2021YFB3100500];
   Frontier Science and Technology Innovation Projects of National Key
   Research and Development Program [2019QY1405]
FX AcknowledgementsThis paper is supported by the National Key Research and
   Development Program of China (No.2021YFB3100500) and the Frontier
   Science and Technology Innovation Projects of National Key Research and
   Development Program (No.2019QY1405).
CR Arong, 2014, PROCEEDINGS OF 2014 IEEE INTERNATIONAL CONFERENCE ON PROGRESS IN INFORMATICS AND COMPUTING (PIC), P51, DOI 10.1109/PIC.2014.6972294
   Baltrusaitis T, 2019, IEEE T PATTERN ANAL, V41, P423, DOI 10.1109/TPAMI.2018.2798607
   Bian P, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1101, DOI 10.1145/3368089.3409678
   Chakraborty S, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P443, DOI 10.1109/ASE51524.2021.9678559
   Chen H, 2019, PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON MULTIMEDIA (MM'19), P1749, DOI 10.1145/3343031.3351055
   Chen S., 2020, P IEEE CVF C COMP VI, P10638
   Chen Z., 2020, J INF SECUR, V5, P13
   Cheng X, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3436877
   Feng HT, 2020, IEEE CONF COMPUT, P722, DOI 10.1109/INFOCOMWKSHPS50562.2020.9163061
   Ghadery E, 2019, AAAI CONF ARTIF INTE, P6441
   Guo B, 2019, NEUROCOMPUTING, V363, P366, DOI 10.1016/j.neucom.2019.07.052
   He XN, 2020, PROCEEDINGS OF THE 43RD INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL (SIGIR '20), P639, DOI 10.1145/3397271.3401063
   Huo X, 2021, IEEE T SOFTWARE ENG, V47, P1368, DOI 10.1109/TSE.2019.2920771
   Li Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360588
   Li YJ, 2017, Arxiv, DOI arXiv:1511.05493
   Ling X, 2021, ACM T KNOWL DISCOV D, V15, DOI 10.1145/3447571
   [刘嘉勇 Liu Jiayong], 2022, [信息安全学报, Journal of Cyber Security], V7, P100
   Liu JH, 2021, IEEE T CIRC SYST VID, V31, P3242, DOI 10.1109/TCSVT.2020.3037661
   Liu S, 2021, 2021 IEEE/CVF INTERNATIONAL CONFERENCE ON COMPUTER VISION (ICCV 2021), P11895, DOI 10.1109/ICCV48922.2021.01170
   Lukins SK, 2008, WORK CONF REVERSE EN, P155, DOI 10.1109/WCRE.2008.33
   Luo ZL, 2017, IEEE T KNOWL DATA EN, V29, P2125, DOI 10.1109/TKDE.2017.2720734
   Mithun NC, 2018, ICMR '18: PROCEEDINGS OF THE 2018 ACM INTERNATIONAL CONFERENCE ON MULTIMEDIA RETRIEVAL, P19, DOI 10.1145/3206025.3206064
   Pennington J., 2014, P 2014 C EMP METH NA, P1532
   Qi BH, 2022, IEEE T RELIAB, V71, P235, DOI 10.1109/TR.2021.3104728
   Qi C, 2021, KNOWL-BASED SYST, V211, DOI 10.1016/j.knosys.2020.106561
   Saha RK, 2013, IEEE INT CONF AUTOM, P345, DOI 10.1109/ASE.2013.6693093
   Siow J.K., 2022, arXiv
   Sisman B., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P50, DOI 10.1109/MSR.2012.6224299
   Wallace B., 2015, ARXIV
   Wan Y, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P13, DOI 10.1109/ASE.2019.00012
   Wang H, 2021, PROC CVPR IEEE, P4556, DOI 10.1109/CVPR46437.2021.00453
   Wang ZD, 2019, PROC CVPR IEEE, P1117, DOI 10.1109/CVPR.2019.00121
   Wartschinski L, 2022, INFORM SOFTWARE TECH, V144, DOI 10.1016/j.infsof.2021.106809
   Wei YW, 2019, PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON MULTIMEDIA (MM'19), P1437, DOI 10.1145/3343031.3351034
   Wu YL, 2019, NEUROCOMPUTING, V331, P165, DOI 10.1016/j.neucom.2018.11.042
   Xiao Y, 2019, INFORM SOFTWARE TECH, V105, P17, DOI 10.1016/j.infsof.2018.08.002
   Xiao Y, 2017, ASIA PAC SOFWR ENG, P338, DOI 10.1109/APSEC.2017.40
   Xu Y, 2021, IEEE INT SYMP PARAL, P55, DOI 10.1109/ISPA-BDCloud-SocialCom-SustainCom52081.2021.00022
   Yamaguchi F, 2014, P IEEE S SECUR PRIV, P590, DOI 10.1109/SP.2014.44
   Yang Z., 2016, P 2016 C N AM CHAPT, P1480, DOI [DOI 10.18653/V1/N16-1174, 10.18653/v1/n16-1174]
   Yao ZY, 2019, WEB CONFERENCE 2019: PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE (WWW 2019), P2203, DOI 10.1145/3308558.3313632
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
   Youm KC, 2017, INFORM SOFTWARE TECH, V82, P177, DOI 10.1016/j.infsof.2016.11.002
   Yu L, 2020, P INT COMP SOFTW APP, P768, DOI 10.1109/COMPSAC48688.2020.0-167
   Zhang JL, 2020, INT C PROGRAM COMPRE, P219, DOI 10.1145/3387904.3389281
   Zhang Y, 2016, Arxiv, DOI arXiv:1603.00968
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
   Zhou Y., 2019, IEEE I CONF COMP VIS, V32, P256
   Zhu ZY, 2022, KNOWL-BASED SYST, V248, DOI 10.1016/j.knosys.2022.108741
   Zhuo YX, 2022, PROCEEDINGS OF THE 2022 INTERNATIONAL CONFERENCE ON MULTIMEDIA RETRIEVAL, ICMR 2022, P158, DOI 10.1145/3512527.3531381
NR 50
TC 4
Z9 4
U1 1
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
AR 12
DI 10.1007/s10515-023-00379-9
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9R0GT
UT WOS:000945334700001
DA 2024-07-18
ER

PT J
AU Kuang, L
   Zhou, C
   Yang, XX
AF Kuang, Li
   Zhou, Cong
   Yang, Xiaoxian
TI Code comment generation based on graph neural network enhanced
   transformer model for code understanding in open-source software
   ecosystems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Open-source software ecosystems; Code representation; Transformer; Graph
   neural network
AB In open-source software ecosystems, the scale of source code is getting larger and larger, and developers often use various methods (good code comments or method names, etc.) to make the code easier to read and understand. However, high-quality code comments or method names are often unavailable due to tight project schedules or other reasons in open-source software ecosystems such as Github. Therefore, in this work, we try to use deep learning models to generate appropriate code comments or method names to help software development and maintenance, which requires a non-trivial understanding of the code. Therefore, we propose a Graph neural network enhanced Transformer model (GTrans for short) to learn code representation to understand code better. Specifically, GTrans learns code representation from code sequences and graphs. We use a Transformer encoder to capture the global representation from code sequence and a graph neural network (GNN) encoder to focus on the local details in the code graph, and then use a decoder to combine both global and local representations by attention mechanism. We use three public datasets collected from GitHub to evaluate our model. In an extensive evaluation, we show that GTrans outperforms the state-of-the-art models up to 3.8% increase in METEOR metrics on code comment generation and outperforms the state-of-the-art models by margins of 5.8%-9.4% in ROUGE metrics on method name generation after some adjustments on the structure. Empirically, we find the method name generation task depends on more local information than global, and the code comment generation task is in contrast. Our data and code are available at https://github.com/zc-work/GTrans.
C1 [Kuang, Li; Zhou, Cong] Cent South Univ, Sch Comp Sci & Engn, Changsha 410075, Peoples R China.
   [Yang, Xiaoxian] Shanghai Polytech Univ, Sch Comp & Informat Engn, Shanghai 201209, Peoples R China.
C3 Central South University; Shanghai Polytechnic University
RP Zhou, C (corresponding author), Cent South Univ, Sch Comp Sci & Engn, Changsha 410075, Peoples R China.; Yang, XX (corresponding author), Shanghai Polytech Univ, Sch Comp & Informat Engn, Shanghai 201209, Peoples R China.
EM kuangli@csu.edu.cn; school@csu.edu.cn; xxyang@sspu.edu.cn
OI Kuang, Li/0000-0003-4975-034X
FU National Key R&D Program of China [2018YFB1402800]; National Natural
   Science Foundation of China [61772560, 61902236]; Fundamental Research
   Funds for the Central Universities of Central South University
   [2021zzts0725]
FX This work has been supported by the National Key R&D Program of China
   under Grant 2018YFB1402800, National Natural Science Foundation of China
   (Nos. 61772560, 61902236), Fundamental Research Funds for the Central
   Universities of Central South University (Grant No. 2021zzts0725). We
   are grateful for resources from the High Performance Computing Center of
   Central South University.
CR Ahmad W., 2020, P 58 ANN M ASS COMPU, P4998, DOI 10.18653/v1/2020.acl-main.449
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   Alon Uri, 2018, INT C LEARN REPR
   [Anonymous], 2017, ARXIV PREPRINT ARXIV
   Banerjee S, 2005, ACL WORKSHOP INTRINS, P65
   Barone Antonio Valerio Miceli, 2017, Proceedings of the Second Conference on Machine Translation, Association for Computational Linguistics, P99, DOI [DOI 10.18653/V1/W17-4710, 10.18653/v1/W17-4710]
   Chen FX, 2021, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2021, P2510
   Chen Xiangyi, 2018, ARXIV180802941
   Chirkova N, 2020, ARXIV PREPRINT ARXIV
   Cho Kyunghyun, 2014, SYNTAX SEMANTICS STR, P5, DOI [10.3115/v1/w14-4012, 10.3115 /v1/D14-1179, DOI 10.3115/V1/D14-1179]
   Eriguchi A, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P823
   Feng Z., 2020, EMNLP
   Fernandes P, 2019, 7 INT C LEARNING REP
   Gao S., 2021, ARXIV PREPRINT ARXIV
   Guo D., 2020, INT C LEARN REPR
   Hellendoorn V. J., 2019, INT C LEARNING REPRE
   Hellendoorn V.J., 2019, INT C LEARN REPR
   Hu X, SUMMARIZING SOURCE C
   Hu X, 2020, EMPIR SOFTW ENG, V25, P2179, DOI [10.1007/s10664-019-09730-9, 10.1007/978-981-13-8203-1_1]
   Hu X, 2018, INT C PROGRAM COMPRE, P200, DOI 10.1145/3196321.3196334
   Iyer S, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P2073
   LeClair A, 2020, INT C PROGRAM COMPRE, P184, DOI 10.1145/3387904.3389268
   LeClair A, 2019, PROC INT CONF SOFTW, P795, DOI 10.1109/ICSE.2019.00087
   Lin C., ARXIV PREPRINT ARXIV
   Lin CY, 2004, ROUGE: A Package for Automatic Evaluation of Summaries, P74, DOI DOI 10.1253/JCJ.34.1213
   Luong M.-T., 2015, ARXIV PREPRINT ARXIV
   Murphy-Hill E, 2012, IEEE T SOFTWARE ENG, V38, P5, DOI 10.1109/TSE.2011.41
   Papineni K, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P311, DOI 10.3115/1073083.1073135
   Ribeiro LFR, 2020, T ASSOC COMPUT LING, V8, P589, DOI 10.1162/tacl_a_00332
   See A, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1073, DOI 10.18653/v1/P17-1099
   Shaw P., 2018, P 2018 NAACL, V2, P464, DOI [DOI 10.18653/V1/N18-2074, 10.18653/v1/N18-2074]
   Shido Y, 2019, IEEE IJCNN
   Vaswani A, 2017, ADV NEUR IN, V30
   Wan Y, 2018, IEEE INT CONF AUTOM, P397, DOI 10.1145/3238147.3238206
   Wang W., 2020, ARXIV PREPRINT ARXIV
   Wei B., 2019, ARXIV PREPRINT ARXIV
   Xia X, 2018, IEEE T SOFTWARE ENG, V44, P951, DOI 10.1109/TSE.2017.2734091
   Xu SH, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM '19), P10, DOI 10.1145/3294032.3294079
   Zhang J, 2020, PROC INT CONF SOFTW, P1385, DOI 10.1145/3377811.3380383
   Zugner D., ARXIV PREPRINT ARXIV
NR 43
TC 4
Z9 4
U1 3
U2 15
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 43
DI 10.1007/s10515-022-00341-1
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2C9VU
UT WOS:000811207100001
DA 2024-07-18
ER

PT J
AU Cheng, C
   Li, B
   Li, ZY
   Liang, P
   Han, XF
   Zhang, JH
AF Cheng, Can
   Li, Bing
   Li, Zengyang
   Liang, Peng
   Han, Xiaofeng
   Zhang, Jiahua
TI Improving generality and accuracy of existing public development project
   selection methods: a study on GitHub ecosystem
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Open source software project; GitHub; Public development project
ID PULL-REQUESTS; RECOMMENDATION
AB With available tools and datasets existing on GitHub ecosystem, researchers have the opportunities to study diverse software engineering problems on a large-scale dataset. However, there are many potential threats when researchers try to directly use large-scale datasets, and one important threat is that GitHub contains many private projects (e.g., homework) and non-development projects (e.g., blog). For researchers who want to study cooperative behavior of developers or development process of projects, their research samples should not contain private projects and non-development projects. To solve this problem, we first analyzed the weaknesses of the base line methods (i.e., selecting top projects) and extended ML-based methods (i.e., training models on a labeled training dataset using ML algorithms, Extended_MLMs for short), and proposed two methods called Enhanced_RFM and Fusion_DL_RFM to address the weaknesses of Extended_RFM (the Extended_MLM that is based on Random Forest and has the best performance among all the Extended_MLMs). The results show that: (1) existing project sample selection methods have a low F-measure and poor generality (i.e., have a bad performance on the testing dataset); (2) Enhanced_RFM outperforms Fusion_DL_RFM on accuracy and stability; and (3) by adopting Enhanced_RFM, the F-measure of Extended_RFM is improved from 0.690 to 0.810 and the precision of Extended_RFM is improved from 0.559 to 0.785 under cross validation, which indicates that the generality of Extended_RFM is significantly improved.
C1 [Cheng, Can; Li, Bing; Liang, Peng; Han, Xiaofeng; Zhang, Jiahua] Wuhan Univ, Sch Comp Sci, Wuhan, Peoples R China.
   [Li, Zengyang] Cent China Normal Univ, Sch Comp Sci, Wuhan, Peoples R China.
C3 Wuhan University; Central China Normal University
RP Li, B; Liang, P (corresponding author), Wuhan Univ, Sch Comp Sci, Wuhan, Peoples R China.
EM chengcan@whu.edu.cn; bingli@whu.edu.cn; zengyangli@ccnu.edu.cn;
   liangp@whu.edu.cn; hanxiaofeng@whu.edu.cn; zhangjiahua@whu.edu.cn
RI li, bing/HTS-1845-2023; han, xiao/HDN-9782-2022; Li, bo/IWL-9318-2023;
   li, bing/GWQ-9617-2022
OI Liang, Peng/0000-0002-2056-5346; Cheng, Can/0000-0003-4260-4825
FU National Natural Science Foundation of China [61832014, 62172311,
   62032016]; Natural Science Foundation of Hubei Province of China
   [2021CFB577]
FX This work is supported by the National Natural Science Foundation of
   China (Nos. 61832014, 62172311, 62032016) and the Natural Science
   Foundation of Hubei Province of China (No. 2021CFB577).
CR Aggarwal K., 2014, P 11 WORKING C MININ, P360, DOI [10.1145/2597073.2597120, DOI 10.1145/2597073.2597120]
   Bao LF, 2021, IEEE T SOFTWARE ENG, V47, P1277, DOI 10.1109/TSE.2019.2918536
   Beel J, 2016, INT J DIGIT LIBRARIE, V17, P305, DOI 10.1007/s00799-015-0156-0
   Bertoncello MV, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P592, DOI [10.1109/SANER48275.2020.9054855, 10.1109/saner48275.2020.9054855]
   Breiman L., 2010, RANDOM FOREST MACH L, V45, P32
   Brindescu C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P322, DOI 10.1145/2568225.2568322
   Brunet J., 2014, P 11 WORK C MIN SOFT, P340
   Burlet G, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P292, DOI 10.1109/MSR.2015.34
   Cheng, 2018, P 30 INT C SOFTW ENG, P193
   Cheng C, DATASETS IMPROVING G
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Constantinou E, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P34, DOI 10.1109/SANER.2017.7884607
   Cosentino V, 2017, IEEE ACCESS, V5, P7173, DOI 10.1109/ACCESS.2017.2682323
   Dyer R, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P422, DOI 10.1109/ICSE.2013.6606588
   Elazhary O, 2019, PROC IEEE INT CONF S, P286, DOI 10.1109/ICSME.2019.00043
   Falessi D, 2017, INT SYMP EMP SOFTWAR, P151, DOI 10.1109/ESEM.2017.22
   Del Carpio AF, 2020, EUROMICRO CONF PROC, P445, DOI 10.1109/SEAA51224.2020.00077
   Fu W, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P49, DOI 10.1145/3106237.3106256
   Gousios Georgios, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P12, DOI 10.1109/MSR.2012.6224294
   Gousios G, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P345, DOI 10.1145/2568225.2568260
   Gousios G, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P358, DOI 10.1109/ICSE.2015.55
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Goyal R, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1893
   Hata H, 2015, 2015 IEEE/ACM 8TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING CHASE 2015, P15, DOI 10.1109/CHASE.2015.9
   He P, 2015, INFORM SOFTWARE TECH, V59, P170, DOI 10.1016/j.infsof.2014.11.006
   Hilton M, 2016, IEEE INT CONF AUTOM, P426, DOI 10.1145/2970276.2970358
   Jiang J, 2013, WORK CONF REVERSE EN, P132, DOI 10.1109/WCRE.2013.6671288
   Joulin A., 2016, ARXIV
   Kalliamvakou E., 2014, P 11 WORKING C MININ, P92, DOI DOI 10.1145/2597073.2597074
   Kalliamvakou E, 2016, EMPIR SOFTW ENG, V21, P2035, DOI 10.1007/s10664-015-9393-5
   Kikas R, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P291, DOI [10.1109/MSR.2016.038, 10.1145/2901739.2901751]
   Kim Y, 2014, IEEE ASME INT C ADV, P1747, DOI 10.1109/AIM.2014.6878336
   Kotti Z, 2020, EMPIR SOFTW ENG, V25, P3288, DOI 10.1007/s10664-020-09834-7
   Lai SW, 2015, AAAI CONF ARTIF INTE, P2267
   Lin JW, 2020, IEEE INT CONF AUTOM, P1078, DOI 10.1145/3324884.3416623
   Mechelli A., 2019, Machine Learning: Methods and Applications to Brain Disorders, DOI DOI 10.1016/B978-0-12-815739-8.00011-0
   Meli M, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23418
   Meng YN, 2019, 2019 IEEE 4TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING AND BIG DATA ANALYSIS (ICCCBDA), P618, DOI [10.1109/ICCCBDA.2019.8725669, 10.1109/icccbda.2019.8725669]
   Mikolov Tomas, 2013, Preprints
   Munaiah N, 2017, EMPIR SOFTW ENG, V22, P3219, DOI 10.1007/s10664-017-9512-6
   Overney C, 2020, PROC INT CONF SOFTW, P1209, DOI 10.1145/3377811.3380410
   Padhye R., 2014, Proceedings of the 11th Working Conference on Mining Software Repositories, P332, DOI 10.1145/2597073.2597113
   Rausch T, 2017, IEEE WORK CONF MIN S, P345, DOI 10.1109/MSR.2017.54
   Robles G, 2017, IEEE WORK CONF MIN S, P519, DOI 10.1109/MSR.2017.48
   Saha AK, 2013, IEEE WORK CONF MIN S, P73, DOI 10.1109/MSR.2013.6624009
   Sharma T, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P189, DOI [10.1109/MSR.2016.028, 10.1145/2901739.2901761]
   Vasilescu B, 2016, PROC INT CONF SOFTW, P994, DOI 10.1145/2884781.2884875
   Vasilescu B, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P805, DOI 10.1145/2786805.2786850
   Wang T, 2014, FRONT COMPUT SCI-CHI, V8, P69, DOI 10.1007/s11704-013-2394-x
   Xavier Joicymara, 2014, INT C SOFTWARE ENG K, P484
   Yu Y, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P367, DOI 10.1109/MSR.2015.42
   Yu Y, 2016, INFORM SOFTWARE TECH, V74, P204, DOI 10.1016/j.infsof.2016.01.004
   Zahavy T, 2018, AAAI CONF ARTIF INTE, P7873
   Zhao GL, 2019, EMPIR SOFTW ENG, V24, P2140, DOI 10.1007/s10664-019-09696-8
   Zhao YY, 2017, IEEE INT CONF AUTOM, P60, DOI 10.1109/ASE.2017.8115619
   Zhou PY, 2019, INFORM SOFTWARE TECH, V109, P1, DOI 10.1016/j.infsof.2019.01.002
NR 56
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 33
DI 10.1007/s10515-022-00322-4
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZV6GC
UT WOS:000770625300001
DA 2024-07-18
ER

PT J
AU Gu, ZL
   Yi, JD
   Yao, H
   Wang, Y
AF Gu, Zhenglin
   Yi, Jidong
   Yao, Hui
   Wang, Yang
TI Intelligent online guiding network regional planning based on
   software-driven autonomous communication system
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Online guiding network; Intelligent network; Regional planning; Remote
   sensing data; Soft computing; Distributed communication system
AB In recent years, with the rapid development of Internet technology, the large-scale popularization of smart phones, tablet computers and other intelligent terminal devices, and the gradual enrichment of 3G, 4G and other mobile network resources, the digital and mobile online guiding method is more and more accepted by people. At the same time, there are still many problems in online education, such as poor learning effect, enterprise profit difficulties and so on. At present, with the rapid development of higher education in China, the scale of higher education has achieved unprecedented growth, but there are also many problems, among which the more prominent problem is the unbalanced development of regional higher education. Therefore, it is necessary to adjust the regional structure of higher education so that higher education can become an inexhaustible driving force for regional development and promote the benign interaction and coordinated development between higher education and the region. The core idea of distributed communication system is to establish multiple call servers to provide services for users. The whole system adopts fully distributed structure, and a certain number of servers are deployed in each node of the network. The bearing capacity of the server is expanded to facilitate customers to access the communication network. Users can use the services provided by such a communication system anytime and anywhere, and realize real mobile communication. Based on the remote sensing deep learning method and the principle of distributed communication, this paper constructs intelligent online guiding network regional planning based on the remote sensing edge-driven distributed communication system with soft computing. Theough the modelling and simulation, the designed systen is proven to be effective.
C1 [Gu, Zhenglin] Yunnan Normal Univ, Coll Tourism & Geog Sci, Kunming 650500, Yunnan, Peoples R China.
   [Gu, Zhenglin] Yunnan Normal Univ, Elementary Educ Grp, Kunming 650500, Yunnan, Peoples R China.
   [Yi, Jidong; Yao, Hui] Yunnan Normal Univ, Dept Educ, Kunming 650500, Yunnan, Peoples R China.
   [Wang, Yang] Kunming Med Univ, Rehabil Coll, Kunming 650500, Yunnan, Peoples R China.
C3 Yunnan Normal University; Yunnan Normal University; Yunnan Normal
   University; Kunming Medical University
RP Yao, H (corresponding author), Yunnan Normal Univ, Dept Educ, Kunming 650500, Yunnan, Peoples R China.
EM yaohui6713@126.com
FU National Natural Science Foundation of China: Research on the space-time
   structure, early warning and balanced development of compulsory
   education in China [41671148]
FX The study was supported by "National Natural Science Foundation of
   China: Research on the space-time structure, early warning and balanced
   development of compulsory education in China (Grant No. 41671148)".
CR Adam E.E. B., 2020, Journal of Soft Computing Paradigm, V2, P209
   Choi JK, 2020, APPL COMPUT HARMON A, V48, P993, DOI 10.1016/j.acha.2018.09.007
   Dai MH, 2020, IEEE NETWORK, V34, P39, DOI 10.1109/MNET.011.2000068
   Dell'Anna D, 2019, AUTOMAT SOFTW ENG, V26, P513, DOI 10.1007/s10515-019-00255-5
   Dhaya R, 2021, AUTOMAT SOFTW ENG, V28, DOI 10.1007/s10515-021-00293-y
   Diaz-Guerra D, 2021, MULTIMED TOOLS APPL, V80, P5653, DOI 10.1007/s11042-020-09905-3
   Fengying X., 2015, CHINA HLTH STAT, V32
   Firouzi F, 2022, INFORM SYST, V107, DOI 10.1016/j.is.2021.101840
   Girshick R, 2016, IEEE T PATTERN ANAL, V38, P142, DOI 10.1109/TPAMI.2015.2437384
   Glerum A, 2020, NAT COMMUN, V11, DOI 10.1038/s41467-020-16176-x
   Huayu C., 2015, ART TECHNOL, V28
   Jun C, 2017, CHINA AUDIO VIS ED, V08, P118
   Kumar S, 2021, MULTIMED TOOLS APPL, V80, P13975, DOI 10.1007/s11042-020-10397-4
   Li C, 2021, GEOPHYS RES LETT, V48, DOI 10.1029/2020GL090555
   Lihua H., 2015, ETHN STUD, V8, P11
   Manoharan S., 2020, J INNOVATIVE IMAGE P, V2, P202, DOI [10.36548/jiip.2020.1.002, DOI 10.36548/JIIP.2020.1.002]
   Marzen RE, 2020, NAT COMMUN, V11, DOI 10.1038/s41467-020-17193-6
   Noh H, 2015, IEEE I CONF COMP VIS, P1520, DOI 10.1109/ICCV.2015.178
   Ojaghi S., 2015, AM J ENG TECHNOL SOC, V2, P8
   Qiang Y., 2015, IND INF ED, V11, P43
   Shiqin Z, 2017, CHINA PUBLISHING, P22
   Sundararaj V, 2021, MULTIMED TOOLS APPL, V80, P29875, DOI 10.1007/s11042-021-11123-4
   Wang Q, 2014, 2014 7TH INTERNATIONAL CONGRESS ON IMAGE AND SIGNAL PROCESSING (CISP 2014), P660, DOI 10.1109/CISP.2014.7003861
   Xiaoqing X., 2017, CHINA 501 ED, V05
   Yanlin Z., 2016, CHINA AUDIO VIS ED, V01, P116
   Yavuz T, 2020, AUTOMAT SOFTW ENG, V27, P329, DOI 10.1007/s10515-020-00276-5
   Yuanxiong T., 2015, EDUC ECON, V3, P8
   Zhihui J., 2017, MOD DISTANCE ED, V03, P34
   Zou Q, 2015, IEEE GEOSCI REMOTE S, V12, P2321, DOI 10.1109/LGRS.2015.2475299
NR 29
TC 0
Z9 0
U1 0
U2 20
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 14
DI 10.1007/s10515-021-00309-7
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY6EY
UT WOS:000737064300006
DA 2024-07-18
ER

PT J
AU Selvapandian, D
   Santhosh, R
AF Selvapandian, D.
   Santhosh, R.
TI Deep learning approach for intrusion detection in IoT-multi cloud
   environment
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Internet of Things (IoT); Multi-cloud computing; Intrusion detection
   system (IDS); Deep learning technique; Detection accuracy
ID DETECTION SYSTEMS
AB The possibility of connecting billions of smart end devices in the Internet of Things (IoT) provides wide range of services to the user. But, the unlimited connectivity of devices in IoT brings security issues when it is connected to wireless networks. Integrating cloud with IoT networks gains more attention as it reduces the sensor node resource limitations. However, the network complexity, open broadcast characteristics of IoT networks are vulnerable to attacks. To ensure network security and reliable operations, Intrusion Detection Systems (IDS) are widely preferred. IDS identifies the anomalies effectively in complex network environments and ensures the security of the network. Traditional intrusion detection systems based on neural networks consume long training time and low classification accuracy. Recently, deep learning methods are widely used in various image and signal processing, security applications. This research work presents a deep learning-based intrusion detection system for multi-cloud IoT environment to overcome the limitations of neural network-based intrusion detection models. The proposed intrusion detection model improves the detection accuracy by improving the training efficiency. Experimental evaluation of proposed model using NSL-KDD dataset provides improved performance than conventional techniques attaining 97.51% of detection rate, 96.28% of detection accuracy, and 94.41% of precision.
C1 [Selvapandian, D.; Santhosh, R.] Karpagam Acad Higher Educ, Fac Engn, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India.
C3 Karpagam Academy of Higher Education (KAHE)
RP Selvapandian, D (corresponding author), Karpagam Acad Higher Educ, Fac Engn, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India.
EM selvapandian79@gmall.com; santhoshrd@gmail.com
RI R, Santhosh/F-7577-2017
OI R, Santhosh/0000-0002-9287-5829
CR Al-Yaseen WL, 2017, EXPERT SYST APPL, V67, P296, DOI 10.1016/j.eswa.2016.09.041
   Ali MH, 2018, IEEE ACCESS, V6, P20255, DOI 10.1109/ACCESS.2018.2820092
   Benkhelifa E, 2018, IEEE COMMUN SURV TUT, V20, P3496, DOI 10.1109/COMST.2018.2844742
   Chaabouni N, 2019, IEEE COMMUN SURV TUT, V21, P2671, DOI 10.1109/COMST.2019.2896380
   Li X, 2019, IEEE ACCESS, V7, P9368, DOI 10.1109/ACCESS.2018.2890432
   Luo JL, 2020, IEEE ACCESS, V8, P38538, DOI 10.1109/ACCESS.2020.2974569
   Meneghello F, 2019, IEEE INTERNET THINGS, V6, P8182, DOI 10.1109/JIOT.2019.2935189
   Mohammed M.N., 2019, INT J COMPUT SCI SEC, V13, P167
   Moustafa N, 2019, IEEE INTERNET THINGS, V6, P4815, DOI 10.1109/JIOT.2018.2871719
   Mugunthan S.R., 2021, Journal of Soft Computing Paradigm (JSCP), V3, P70
   Naseer S, 2018, IEEE ACCESS, V6, P48231, DOI 10.1109/ACCESS.2018.2863036
   Pajouh NH, 2019, IEEE T EMERG TOP COM, V7, P314, DOI 10.1109/TETC.2016.2633228
   Porambage P, 2018, IEEE COMMUN SURV TUT, V20, P2961, DOI 10.1109/COMST.2018.2849509
   Qiu XY, 2020, IEEE ACCESS, V8, P26139, DOI 10.1109/ACCESS.2020.2971260
   Rafique W, 2020, IEEE COMMUN SURV TUT, V22, P1761, DOI 10.1109/COMST.2020.2997475
   Raj JS., 2021, J ISMAC, V2, P121, DOI [10.36548/jismac.2021.2.005, DOI 10.36548/JISMAC.2021.2.005]
   Shenfield A, 2018, ICT EXPRESS, V4, P95, DOI 10.1016/j.icte.2018.04.003
   Sivaganesan D, 2021, J TRENDS COMPUT SCI, V3, P59, DOI DOI 10.36548/JTCSST.2021.1.006
   Smys S., 2021, J ARTIFICIAL INTELLI, V3, P90
   Sungheetha Akey, 2021, J Trends Comp Sci Smart Technol, V3, P81, DOI [DOI 10.36548/JTCSST.2021.2.002, 10.36548/jtcsst.2021.2.002]
   Teng SH, 2018, IEEE-CAA J AUTOMATIC, V5, P108, DOI 10.1109/JAS.2017.7510730
   Wang H., 2021, J. Artif. Intell, V3, P43, DOI 10.36548/jaicn.2021.1.004
   Yahalom R, 2019, KNOWL-BASED SYST, V168, P59, DOI 10.1016/j.knosys.2019.01.002
   Yin CL, 2017, IEEE ACCESS, V5, P21954, DOI 10.1109/ACCESS.2017.2762418
   Zhang Y, 2019, IEEE ACCESS, V7, P31711, DOI 10.1109/ACCESS.2019.2903723
NR 25
TC 9
Z9 9
U1 0
U2 19
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 19
DI 10.1007/s10515-021-00298-7
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA US8BP
UT WOS:000697650600001
DA 2024-07-18
ER

PT J
AU Chen, H
   Damevski, K
   Shepherd, D
   Kraft, NA
AF Chen, Hui
   Damevski, Kostadin
   Shepherd, David
   Kraft, Nicholas A.
TI Modeling hierarchical usage context for software exceptions based on
   interaction data
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Stack trace; Crash report; Software exception; Software interaction
   trace; Hierarchical topic model
AB Traces of user interactions with a software system, captured in production, are commonly used as an input source for user experience testing. In this paper, we present an alternative use, introducing a novel approach of modeling user interaction traces enriched with another type of data gathered in production-software fault reports consisting of software exceptions and stack traces. The model described in this paper aims to improve developers' comprehension of the circumstances surrounding a specific software exception and can highlight specific user behaviors that lead to a high frequency of software faults. Modeling the combination of interaction traces and software crash reports to form an interpretable and useful model is challenging due to the complexity and variance in the combined data source. Therefore, we propose a probabilistic unsupervised learning approach, adapting the nested hierarchical Dirichlet process, which is a Bayesian non-parametric hierarchical topic model originally applied to natural language data. This model infers a tree of topics, each of whom describes a set of commonly co-occurring commands and exceptions. The topic tree can be interpreted hierarchically to aid in categorizing the numerous types of exceptions and interactions. We apply the proposed approach to large scale datasets collected from the ABB RobotStudio software application, and evaluate it both numerically and with a small survey of the RobotStudio developers.
C1 [Chen, Hui] CUNY Brooklyn Coll, Dept Comp & Informat Sci, Brooklyn, NY 11210 USA.
   [Damevski, Kostadin] Virginia Commonwealth Univ, Dept Comp Sci, Richmond, VA 23284 USA.
   [Shepherd, David; Kraft, Nicholas A.] ABB Corp Res, Raleigh, NC 27606 USA.
C3 City University of New York (CUNY) System; Brooklyn College (CUNY);
   Virginia Commonwealth University; ABB
RP Chen, H (corresponding author), CUNY Brooklyn Coll, Dept Comp & Informat Sci, Brooklyn, NY 11210 USA.
EM huichen@ieee.org; damevski@acm.org; david.shepherd@us.abb.com;
   nicholas.a.kraft@us.abb.com
RI Damevski, Kostadin/F-4476-2014; Chen, Hui/C-9645-2013
OI Damevski, Kostadin/0000-0001-7799-2026; Shepherd, David
   C./0000-0003-2017-7842; Chen, Hui/0000-0002-9840-4876
CR Agrawal A, 2018, INFORM SOFTWARE TECH, V98, P74, DOI 10.1016/j.infsof.2018.02.005
   [Anonymous], 2014, P 2014 INT S SOFTWAR, DOI DOI 10.1145/2610384.2610386
   [Anonymous], 2014, BAYESIAN DATA ANAL
   Arnold D.C., 2007, PARALLEL DISTRIBUTED, P64
   Blei D. M., 2001, SIGIR Forum, P343
   Blei DM, 2010, J ACM, V57, DOI 10.1145/1667053.1667056
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Chen TH, 2016, EMPIR SOFTW ENG, V21, P1843, DOI 10.1007/s10664-015-9402-8
   Chou A., 2001, Operating Systems Review, V35, P73, DOI 10.1145/502059.502042
   Damevski K, 2018, IEEE T SOFTWARE ENG, V44, P1100, DOI 10.1109/TSE.2017.2748134
   Damevski K, 2017, IEEE T SOFTWARE ENG, V43, P359, DOI 10.1109/TSE.2016.2592905
   Damevski K, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P126, DOI [10.1109/MSR.2016.022, 10.1145/2901739.2901741]
   Dang YN, 2012, PROC INT CONF SOFTW, P1084, DOI 10.1109/ICSE.2012.6227111
   Davies S., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P125, DOI 10.1109/WCRE.2012.22
   Dhaliwal T., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P333, DOI 10.1109/ICSM.2011.6080800
   Glerum K, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P103
   Gu ZX, 2012, ACM SIGPLAN NOTICES, V47, P927, DOI 10.1145/2398857.2384684
   Han S, 2012, PROC INT CONF SOFTW, P145, DOI 10.1109/ICSE.2012.6227198
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Kaushik N, 2012, EUR CON SFTWR MTNCE, P159, DOI 10.1109/CSMR.2012.78
   Li Z, 2006, P 1 WORKSH ARCH SYST, P25, DOI DOI 10.1145/1181309.1181314
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Meng H, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON MECHATRONICS AND AUTOMATION, VOLS I-V, CONFERENCE PROCEEDINGS, P88, DOI 10.1109/ICMA.2007.4303521
   Murphy-Hill E., 2012, P ACM SIGSOFT 20 INT
   Nguyen V.-A., 2014, P ADV NEURAL INFORM, P3671
   Paisley J, 2015, IEEE T PATTERN ANAL, V37, P256, DOI 10.1109/TPAMI.2014.2318728
   Panichella A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P522, DOI 10.1109/ICSE.2013.6606598
   Pritchard JK, 2000, GENETICS, V155, P945
   Roos M, 2015, BAYESIAN ANAL, V10, P321, DOI 10.1214/14-BA909
   Rosen-Zvi Michal., 2004, UAI
   Snipes W, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P105, DOI 10.1145/2591062.2591171
   Soh Z, 2015, INT SYMP EMP SOFTWAR, P1, DOI 10.1109/ESEM.2015.7321209
   Sun XB, 2016, 2016 17TH IEEE/ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING (SNPD), P357, DOI 10.1109/SNPD.2016.7515925
   Teh YW, 2006, J AM STAT ASSOC, V101, P1566, DOI 10.1198/016214506000000302
   van der Aalst W, 2004, IEEE T KNOWL DATA EN, V16, P1128, DOI 10.1109/TKDE.2004.47
   Wallach H.M., 2009, P 26 ANN INT C MACH, P1105, DOI DOI 10.1145/1553374.1553515
   Wang Y, 2012, TM LDA EFFICIENT ONL, P123, DOI DOI 10.1145/2339530.2339552
   Williams CC, 2005, IEEE T SOFTWARE ENG, V31, P466, DOI 10.1109/TSE.2005.63
   Yin ZN, 2010, ACM SIGCOMM COMP COM, V40, P34, DOI 10.1145/1823844.1823849
NR 39
TC 4
Z9 5
U1 0
U2 13
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2019
VL 26
IS 4
SI SI
BP 733
EP 756
DI 10.1007/s10515-019-00265-3
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JQ6FZ
UT WOS:000499040300002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nguyen, HV
   Phan, HD
   Kästner, C
   Nguyen, TN
AF Hung Viet Nguyen
   Hung Dang Phan
   Kastner, Christian
   Nguyen, Tien N.
TI Exploring output-based coverage for testing PHP web applications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Testing; Coverage; Web application; Symbolic execution; PHP; Output
   approximation
AB In software testing, different testers focus on different aspects of the software such as functionality, performance, design, and other attributes. While many tools and coverage metrics exist to support testers at the code level, not much support is targeted for testers who want to inspect the output of a program such as a dynamic web application. To support this category of testers, we propose a family of output-coverage metrics (similar to statement, branch, and path coverage metrics on code) that measure how much of the possible output has been produced by a test suite and what parts of the output are still uncovered. To do that, we first approximate the output universe using our existing symbolic execution technique. Then, given a set of test cases, we map the produced outputs onto the output universe to identify the covered and uncovered parts and compute output-coverage metrics. In our empirical evaluation on seven real-world PHP web applications, we show that selecting test cases by output coverage is more effective at identifying presentation faults such as HTML validation errors and spelling errors than selecting test cases by traditional code coverage. In addition, to help testers understand output coverage and augment test cases, we also develop a tool called WebTest that displays the output universe in one single web page and allows testers to visually explore covered and uncovered parts of the output.
C1 [Hung Viet Nguyen] Google LLC, Mountain View, CA USA.
   [Hung Dang Phan] Iowa State Univ, ECpE Dept, Ames, IA USA.
   [Kastner, Christian] Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.
   [Nguyen, Tien N.] Univ Texas Dallas, Sch Engn & Comp Sci, Richardson, TX 75083 USA.
C3 Google Incorporated; Iowa State University; Carnegie Mellon University;
   University of Texas System; University of Texas Dallas
RP Kästner, C (corresponding author), Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.
EM kaestner@cs.cmu.edu
OI Kastner, Christian/0000-0002-4450-4572
FU National Science Foundation [1318808, 1552944, 1717022]; AFRL
   [FA8750-16-2-0042]; DARPA [FA8750-16-2-0042];  [CCF-1349153]; 
   [CCF-1320578];  [CCF-1413927]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1318808] Funding
   Source: National Science Foundation; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1552944]
   Funding Source: National Science Foundation; Division Of Computer and
   Network Systems; Direct For Computer & Info Scie & Enginr [1717022]
   Funding Source: National Science Foundation
FX Kastner's work has been supported in part by the National Science
   Foundation (Awards 1318808, 1552944, and 1717022) and AFRL and DARPA
   (FA8750-16-2-0042). Nguyen's work has been supported in part by
   CCF-1349153, CCF-1320578, and CCF-1413927.
CR Ali S, 2010, IEEE T SOFTWARE ENG, V36, P742, DOI 10.1109/TSE.2009.52
   Alshahwan N., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P3, DOI 10.1109/ASE.2011.6100082
   Alshahwan N., 2014, Proceedings of the 2014 International Symposium on Software Testing and Analysis, P181
   Alshahwan N, 2012, PROC INT CONF SOFTW, P1345, DOI 10.1109/ICSE.2012.6227083
   Ammann Paul, 2008, Introduction to software testing, V1st
   Andrews A, 2005, SOFTWARE SYSTEMS MOD, V4, P326, DOI DOI 10.1007/S10270-004-0077-7
   [Anonymous], 2005, International Conference on World Wide Web, DOI [10.1145/1060745.1060809, DOI 10.1145/1060745.1060809]
   Artzi S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P571, DOI 10.1145/1985793.1985871
   Artzi S, 2010, IEEE T SOFTWARE ENG, V36, P474, DOI 10.1109/TSE.2010.31
   Brady P, 2016, MUTATION TESTING FRA
   Dogan S, 2014, J SYST SOFTWARE, V91, P174, DOI 10.1016/j.jss.2014.01.010
   Elbaum S, 2003, PROC INT CONF SOFTW, P49, DOI 10.1109/ICSE.2003.1201187
   Elbaum Sebastian., 2006, Proceedings of the 2006 International Workshop on Dynamic Systems Analysis (WODA 2006), P49, DOI DOI 10.1145/1138912.1138923
   Fard A. M., 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, ASE'14, P67, DOI 10.1145/2642937.2642991
   Frantzen L, 2009, LECT NOTES COMPUT SC, V5387, P143, DOI 10.1007/978-3-642-01364-5_9
   Girardi C, 2006, INT J WEB INF SYST, V2, P85, DOI 10.1108/17440080680000104
   Goodenough J. B., 1975, SIGPLAN Notices, V10, P493, DOI 10.1145/390016.808473
   Heidegger P, 2010, LECT NOTES COMPUT SC, V6141, P154, DOI 10.1007/978-3-642-13953-6_9
   Huang XG, 2014, 2014 14TH INTERNATIONAL SYMPOSIUM ON COMMUNICATIONS AND INFORMATION TECHNOLOGIES (ISCIT), P60
   Nguyen HV, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P369, DOI 10.1145/2786805.2786872
   Nguyen HV, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P693, DOI 10.1109/ICSE.2015.225
   Nguyen HV, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P518, DOI 10.1145/2635868.2635928
   Kästner C, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P805
   Li YF, 2014, INFORM SYST, V43, P20, DOI 10.1016/j.is.2014.02.001
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Mesbah A, 2012, ACM T WEB, V6, DOI 10.1145/2109205.2109208
   Mesbah A, 2009, PROC INT CONF SOFTW, P210, DOI 10.1109/ICSE.2009.5070522
   MILLER JC, 1963, COMMUN ACM, V6, P58, DOI 10.1145/366246.366248
   Mirzaaghaei M., 2014, Proceedings of the 2014 International Symposium on Software Testing and Analysis, ISSTA 2014, P71, DOI DOI 10.1145/2610384.2610406
   Nguyen H. V., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P13, DOI 10.1109/ASE.2011.6100047
   OSTRAND TJ, 1988, COMMUN ACM, V31, P676, DOI 10.1145/62959.62964
   Praphamontripong Upsorn, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P132, DOI 10.1109/ICSTW.2010.38
   Raghavan S., 2001, Proceedings of the 27th International Conference on Very Large Data Bases, P129
   Ricca F, 2001, PROC INT CONF SOFTW, P25, DOI 10.1109/ICSE.2001.919078
   Richardson D. J., 1981, 5th International Conference on Software Engineering, P244
   Samimi H, 2012, PROC INT CONF SOFTW, P277, DOI 10.1109/ICSE.2012.6227186
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Wang X, 2012, PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON APAC 2011
   Wassermann G., 2008, P 2008 INT S SOFTW T, P249, DOI DOI 10.1145/1390630.1390661
   Wassermann G, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P171, DOI 10.1145/1368088.1368112
   WEYUKER EJ, 1980, IEEE T SOFTWARE ENG, V6, P236, DOI 10.1109/TSE.1980.234485
   Yichen Xie, 2006, P 15 C USENIX SEC S, V15
   Yu F, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P251, DOI 10.1145/1985793.1985828
NR 43
TC 3
Z9 3
U1 0
U2 17
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2019
VL 26
IS 1
BP 59
EP 85
DI 10.1007/s10515-018-0246-5
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HL4VT
UT WOS:000458723700002
DA 2024-07-18
ER

PT J
AU Aleti, A
   Moser, I
   Grunske, L
AF Aleti, Aldeida
   Moser, I.
   Grunske, Lars
TI Analysing the fitness landscape of search-based software testing
   problems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Test data generation; Genetic algorithms; Fitness landscape
   characterisation
ID OPTIMIZATION; COEFFICIENT; GENERATION
AB Search-based software testing automatically derives test inputs for a software system with the goal of improving various criteria, such as branch coverage. In many cases, evolutionary algorithms are implemented to find near-optimal test suites for software systems. The result of the search is usually received without any indication of how successful the search has been. Fitness landscape characterisation can help understand the search process and its probability of success. In this study, we recorded the information content, negative slope coefficient and the number of improvements during the progress of a genetic algorithm within the EvoSuite framework. Correlating the metrics with the branch and method coverages and the fitness function values reveals that the problem formulation used in EvoSuite could be improved by revising the objective function. It also demonstrates that given the current formulation, the use of crossover has no benefits for the search as the most problematic landscape features are not the number of local optima but the presence of many plateaus.
C1 [Aleti, Aldeida] Monash Univ, Fac Informat Technol, Clayton, Vic, Australia.
   [Moser, I.] Swinburne Univ Technol, Fac Sci Engn & Technol, Hawthorn, Vic, Australia.
   [Grunske, Lars] Univ Stuttgart, Inst Software Technol, Stuttgart, Germany.
C3 Monash University; Swinburne University of Technology; University of
   Stuttgart
RP Aleti, A (corresponding author), Monash Univ, Fac Informat Technol, Clayton, Vic, Australia.
EM aldeida.aleti@monash.edu; imoser@swin.edu.au;
   lars.grunske@informatik.uni-stuttgart.de
RI Aleti, Aldeida/AAE-8486-2019; Grunske, Lars/AAH-4550-2019
OI Aleti, Aldeida/0000-0002-1716-690X; Grunske, Lars/0000-0002-8747-3745
FU Australian Research Council; Australian Government; Australian Research
   Council's Discovery Projects funding scheme [DE140100017]; Australian
   Research Council [DE140100017] Funding Source: Australian Research
   Council
FX We would like to thank Gordon Fraser and his team who developed EvoSuite
   for making the source code available. We wish to acknowledge Monash
   University for the use of their Nimrod software in this work. The Nimrod
   project has been funded by the Australian Research Council and a number
   of Australian Government agencies, and was initially developed by the
   Distributed Systems Technology. This research was supported under
   Australian Research Council's Discovery Projects funding scheme (Project
   Number DE140100017).
CR Aleti A, 2015, J SYST SOFTWARE, V103, P343, DOI 10.1016/j.jss.2014.11.035
   Ali S, 2010, IEEE T SOFTWARE ENG, V36, P742, DOI 10.1109/TSE.2009.52
   Angel E, 1998, THEOR COMPUT SCI, V191, P229, DOI 10.1016/S0304-3975(97)00176-X
   [Anonymous], P 15 ANN C COMP GEN
   [Anonymous], 2000, 6 INT C PAR PROBL SO
   Arcuri A, 2013, EMPIR SOFTW ENG, V18, P594, DOI 10.1007/s10664-013-9249-9
   Arcuri A, 2011, LECT NOTES COMPUT SC, V6956, P33, DOI 10.1007/978-3-642-23716-4_6
   Boyer R. S., 1975, SIGPLAN Notices, V10, P234, DOI 10.1145/390016.808445
   Clarke L. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P215, DOI 10.1109/TSE.1976.233817
   Fraser G, 2015, J SYST SOFTWARE, V103, P311, DOI 10.1016/j.jss.2014.05.032
   Fraser G, 2013, IEEE T SOFTWARE ENG, V39, P276, DOI 10.1109/TSE.2012.14
   Gheorghita M, 2013, 2013 IEEE CONGRESS ON EVOLUTIONARY COMPUTATION (CEC), P2766
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Jones BF, 1996, SOFTWARE ENG J, V11, P299, DOI 10.1049/sej.1996.0040
   Kalboussi S., LECT NOTES COMPUTER, V8084, P245
   Kinnear K. E.  Jr., 1994, Proceedings of the First IEEE Conference on Evolutionary Computation. IEEE World Congress on Computational Intelligence (Cat. No.94TH0650-2), P142, DOI 10.1109/ICEC.1994.350026
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Mao CY, 2015, SWARM EVOL COMPUT, V20, P23, DOI 10.1016/j.swevo.2014.10.003
   Matinnejad R, 2015, INFORM SOFTWARE TECH, V57, P705, DOI 10.1016/j.infsof.2014.05.007
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Merz P, 2000, IEEE T EVOLUT COMPUT, V4, P337, DOI 10.1109/4235.887234
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Miller W., 1976, IEEE Transactions on Software Engineering, VSE-2, P223, DOI 10.1109/TSE.1976.233818
   Pargas R. P., 1999, Software Testing, Verification and Reliability, V9, P263, DOI 10.1002/(SICI)1099-1689(199912)9:4<263::AID-STVR190>3.0.CO;2-Y
   Pitzer E, 2012, STUD COMPUT INTELL, V378, P161
   Roper M., 1997, 10 INT QUALITY WEEK
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Smith T, 2002, EVOL COMPUT, V10, P1, DOI 10.1162/106365602317301754
   Smith-Miles K, 2012, COMPUT OPER RES, V39, P875, DOI 10.1016/j.cor.2011.07.006
   Stadler PF, 1996, J MATH CHEM, V20, P1, DOI 10.1007/BF01165154
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Vanneschi L, 2006, LECT NOTES COMPUT SC, V3905, P178
   Vassilev VK, 2000, EVOL COMPUT, V8, P31, DOI 10.1162/106365600568095
   Vivanti M, 2013, PROC INT SYMP SOFTW, P370, DOI 10.1109/ISSRE.2013.6698890
   WATKINS AL, 1995, PROCEEDINGS OF THE 4TH SOFTWARE QUALITY CONFERENCE, VOLS 1 AND 2, P300
   Weaver W., 1963, MATH THEORY COMMUNIC
   Wegener J, 2001, INFORM SOFTWARE TECH, V43, P841, DOI 10.1016/S0950-5849(01)00190-2
   WEINBERGER E, 1990, BIOL CYBERN, V63, P325, DOI 10.1007/BF00202749
   WEINBERGER ED, 1991, PHYS REV A, V44, P6399, DOI 10.1103/PhysRevA.44.6399
   WHITLEY D, 1989, PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON GENETIC ALGORITHMS, P116
   Williams N, 2005, LECT NOTES COMPUT SC, V3463, P281
   Xanthakis S., 1992, 5 INT C SOFTWARE ENG, P625
   Xin B, 2009, WORLD SUMMIT ON GENETIC AND EVOLUTIONARY COMPUTATION (GEC 09), P623
NR 45
TC 28
Z9 29
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2017
VL 24
IS 3
BP 603
EP 621
DI 10.1007/s10515-016-0197-7
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EW3KK
UT WOS:000402394000005
DA 2024-07-18
ER

PT J
AU Zhao, YY
   Yang, YB
   Lu, HM
   Liu, JP
   Leung, H
   Wu, YS
   Zhou, YM
   Xu, BW
AF Zhao, Yangyang
   Yang, Yibiao
   Lu, Hongmin
   Liu, Jinping
   Leung, Hareton
   Wu, Yansong
   Zhou, Yuming
   Xu, Baowen
TI Understanding the value of considering client usage context in package
   cohesion for fault-proneness prediction
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Context; Cohesion; Metrics; Package; Fault-proneness; Prediction
ID ORIENTED DESIGN METRICS; SOFTWARE DEFECTS; QUALITY; CODE; SYSTEMS
AB By far, many package cohesion metrics have been proposed from internal structure view and external usage view. Based on whether client usage context (i.e., the way packages are used by their clients) is exploited, we group these metrics into two categories: non-context-based and context-based. Currently, there is no comprehensive empirical research devoted to understanding the actual value of client usage context for fault-proneness prediction. In this study, we conduct a thorough empirical study to investigate the value of considering client usage context in package cohesion for fault-proneness prediction. First, we use principal component analysis to examine the relationships between context-based and non-context-based cohesion metrics. Second, we employ univariate logistic regression analysis to investigate the correlation between context-based cohesion metrics and fault-proneness. Then, we build multivariate prediction models to analyze the ability of context-based cohesion metrics for fault-proneness prediction when used alone or used together with non-context-based cohesion metrics. To obtain comprehensive evaluations, we evaluate the effectiveness of these multivariate models in the ranking and classification scenarios from both cross-validation and across-version perspectives. The experimental results show that (1) context-based cohesion metrics are complementary to non-context-based cohesion metrics; (2) most of context-based cohesion metrics have a significantly negative association with fault-proneness; (3) when used alone or used together with non-context-based cohesion metrics, context-based cohesion metrics can substantially improve the effectiveness of fault-proneness prediction in most studied systems under both cross-validation and across-version evaluation. Client usage context has an important value in package cohesion for fault-proneness prediction.
C1 [Zhao, Yangyang; Yang, Yibiao; Lu, Hongmin; Liu, Jinping; Wu, Yansong; Zhou, Yuming; Xu, Baowen] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Jiangsu, Peoples R China.
   [Zhao, Yangyang; Yang, Yibiao; Lu, Hongmin; Liu, Jinping; Wu, Yansong; Zhou, Yuming; Xu, Baowen] Nanjing Univ, Dept Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
   [Leung, Hareton] Hong Kong Polytech Univ, Dept Comp, Hong Kong, Hong Kong, Peoples R China.
C3 Nanjing University; Nanjing University; Hong Kong Polytechnic University
RP Zhou, YM (corresponding author), Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Jiangsu, Peoples R China.; Zhou, YM (corresponding author), Nanjing Univ, Dept Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
EM zhouyuming@nju.edu.cn
RI Yang, Yibiao/ABP-4159-2022; zhao, yang/HTN-4320-2023; zhao,
   yang/GXF-4424-2022; Xu, Baowen/IXW-4882-2023
OI Yang, Yibiao/0000-0003-1153-2013; Xu, Baowen/0000-0001-7743-1296
FU National Key Basic Research and Development Program of China
   [2014CB340702]; National Natural Science Foundation of China [91318301,
   61432001, 61321491, 61300051, 61272082]; National Natural Science
   Foundation of Jiangsu Province [BK20130014]
FX The work in this paper is supported by the National Key Basic Research
   and Development Program of China (2014CB340702), the National Natural
   Science Foundation of China (91318301, 61432001, 61321491, 61300051,
   61272082), and the National Natural Science Foundation of Jiangsu
   Province (BK20130014)
CR Abdeen H., 2011, 2011 18th Working Conference on Reverse Engineering, P394, DOI 10.1109/WCRE.2011.55
   Abdeen H, 2013, WORK CONF REVERSE EN, P212, DOI 10.1109/WCRE.2013.6671296
   Allen E.B., 2001, Proceedings Seventh International Software Metrics Symposium, IEEE, P124
   [Anonymous], 2007, Proceedings of the 3rd International Workshop on Predictor Models in Software Engineering
   [Anonymous], 2003, Sage, Thousand Oaks
   [Anonymous], 2012, J BRAZ COMPUT SOC
   [Anonymous], 2006, ISESE '06: Proceedings of the 5th International Symposium on Empirical Software Engineering. Volume II: Short Papers and Posters, DOI DOI 10.1145/1159733.1159739.
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   [Anonymous], THESIS
   Arisholm E, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P215, DOI 10.1109/ISSRE.2007.22
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Belsley D. A., 2005, REGRESSION DIAGNOSTI
   Belsley D. A., 2005, Regression Diagnostics: Identifying Influential Data and Sources of Collinearity
   Briand LC, 2000, J SYST SOFTWARE, V51, P245, DOI 10.1016/S0164-1212(99)00102-8
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P722, DOI 10.1109/32.815329
   Chen L, 2015, INFORM SOFTWARE TECH, V62, P67, DOI 10.1016/j.infsof.2015.01.014
   Chowdhury I, 2011, J SYST ARCHITECT, V57, P294, DOI 10.1016/j.sysarc.2010.06.003
   Constantine LarryL., 1979, Structured Design
   Couto C, 2014, J SYST SOFTWARE, V93, P24, DOI 10.1016/j.jss.2014.01.033
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Doval D., 1999, STEP '99. Proceedings Ninth International Workshop Software Technology and Engineering Practice, P73, DOI 10.1109/STEP.1999.798481
   Elish MO, 2011, ADV ENG SOFTW, V42, P852, DOI 10.1016/j.advengsoft.2011.06.001
   Fenton N., 1996, SOFTWARE METRICS RIG, VSecond
   Gorman J., 2006, OO DESIGN PRINCIPLES
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Hata H, 2012, PROC INT CONF SOFTW, P200, DOI 10.1109/ICSE.2012.6227193
   He P., 2014, WUHAN U, V59, P170
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   HOCKING RR, 1976, BIOMETRICS, V32, P1, DOI 10.2307/2529336
   Howell D.C., 1997, STAT METHODS PSYCHOL, VForth
   Janes A, 2006, INFORM SCIENCES, V176, P3711, DOI 10.1016/j.ins.2005.12.002
   KAISER HF, 1958, PSYCHOMETRIKA, V23, P187, DOI 10.1007/BF02289233
   Kamei Y., 2010, Proceedings of the 26th International Conference on Software Maintenance, P1, DOI 10.1109/ICSM.2010.5609530
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Kouroshfar E, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1450, DOI 10.1109/ICSE.2013.6606741
   Lee YS., 1995, Proc. International Conference on Software Quality, Maribor, P81
   Marcus A, 2008, IEEE T SOFTWARE ENG, V34, P287, DOI 10.1109/TSE.2007.70768
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   Martin Robert C., 2000, Object Mentor, V34, P597
   Meneely A., 2008, P 16 ACM SIGSOFT INT, P13, DOI DOI 10.1145/1453101.1453106
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Misic VB, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P135, DOI 10.1109/METRIC.2001.915522
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Patel S., 1992, International Conference on Software Engineering, P38, DOI 10.1109/ICSE.1992.753488
   Peters F, 2013, IEEE T SOFTWARE ENG, V39, P1054, DOI 10.1109/TSE.2013.6
   Ponisio L, 2006, THESIS
   Ponisio L., 2006, IAM06002 U BERN
   Praditwong K, 2011, IEEE T SOFTWARE ENG, V37, P264, DOI 10.1109/TSE.2010.26
   Rahman F, 2012, Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE '12, P61
   Rahman F, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P432, DOI 10.1109/ICSE.2013.6606589
   Reinard J.C., 2006, Communication research statistics
   Sarkar S, 2008, IEEE T SOFTWARE ENG, V34, P700, DOI 10.1109/TSE.2008.43
   Schein A. I., 2003, P MACH LEARN RES PML, V3, P10
   Shihab E, 2013, INFORM SOFTWARE TECH, V55, P1981, DOI 10.1016/j.infsof.2013.06.002
   Shin Y, 2013, EMPIR SOFTW ENG, V18, P25, DOI 10.1007/s10664-011-9190-8
   Shin Y, 2011, IEEE T SOFTWARE ENG, V37, P772, DOI 10.1109/TSE.2010.81
   Singh Y, 2010, SOFTWARE QUAL J, V18, P3, DOI 10.1007/s11219-009-9079-6
   Tan M., 2015, ICSE SEIP
   Tianlin Zhou, 2008, 2008 IEEE International Workshop on Semantic Computing and Systems (WSCS 2008), P127, DOI 10.1109/WSCS.2008.23
   Turhan B, 2013, INFORM SOFTWARE TECH, V55, P1101, DOI 10.1016/j.infsof.2012.10.003
   Vernazza T., 2000, P WORLD MULT SYST CY, V1, P16
   Xu B., 2003, SIGADA, P62
   Yang YB, 2015, IEEE T SOFTWARE ENG, V41, P331, DOI 10.1109/TSE.2014.2370048
   Zhang H., 2013, P 2013 9 JOINT M FDN, P643, DOI DOI 10.1145/2491411.2494581
   Zhou Tian-Lin, 2009, Journal of Software, V20, P256, DOI 10.3724/SP.J.1001.2009.00561
   Zhou YM, 2006, IEEE T SOFTWARE ENG, V32, P771, DOI 10.1109/TSE.2006.102
   Zhou YM, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2556777
   Zimmermann T, 2009, INT SYMP EMP SOFTWAR, P436
NR 70
TC 13
Z9 15
U1 0
U2 14
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2017
VL 24
IS 2
BP 393
EP 453
DI 10.1007/s10515-016-0198-6
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ES3FH
UT WOS:000399413800005
DA 2024-07-18
ER

PT J
AU Cunha, J
   Erwig, M
   Mendes, J
   Saraiva, J
AF Cunha, Jacome
   Erwig, Martin
   Mendes, Jorge
   Saraiva, Joao
TI Model inference for spreadsheets
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Spreadsheets; ClassSheets; Relational model; Automatic model inference;
   Empirical validation
AB Many errors in spreadsheet formulas can be avoided if spreadsheets are built automatically from higher-level models that can encode and enforce consistency constraints in the generated spreadsheets. Employing this strategy for legacy spreadsheets is difficult, because the model has to be reverse engineered from an existing spreadsheet and existing data must be transferred into the new model-generated spreadsheet. We have developed and implemented a technique that automatically infers relational schemas from spreadsheets. This technique uses particularities from the spreadsheet realm to create better schemas. We have evaluated this technique in two ways: first, we have demonstrated its applicability by using it on a set of real-world spreadsheets. Second, we have run an empirical study with users. The study has shown that the results produced by our technique are comparable to the ones developed by experts starting from the same (legacy) spreadsheet data. Although relational schemas are very useful to model data, they do not fit spreadsheets well, as they do not allow expressing layout. Thus, we have also introduced a mapping between relational schemas and ClassSheets. A ClassSheet controls further changes to the spreadsheet and safeguards it against a large class of formula errors. The developed tool is a contribution to spreadsheet (reverse) engineering, because it fills an important gap and allows a promising design method (ClassSheets) to be applied to a huge collection of legacy spreadsheets with minimal effort.
C1 [Cunha, Jacome] HASLab INESC Tec, Dept Informat, Lisbon, Portugal.
   [Cunha, Jacome] Univ Nova Lisboa, P-1200 Lisbon, Portugal.
   [Erwig, Martin] Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA.
   [Mendes, Jorge; Saraiva, Joao] HASLab INESC Tec, Dept Informat, Braga, Portugal.
   [Mendes, Jorge; Saraiva, Joao] Univ Minho, Braga, Portugal.
C3 INESC TEC; Universidade do Minho; Universidade Nova de Lisboa; Oregon
   State University; Universidade do Minho; INESC TEC; Universidade do
   Minho
RP Cunha, J (corresponding author), HASLab INESC Tec, Dept Informat, Lisbon, Portugal.; Cunha, J (corresponding author), Univ Nova Lisboa, P-1200 Lisbon, Portugal.
EM jacome@fct.unl.pt; erwig@eecs.oregonstate.edu; jorgemendes@di.uminho.pt;
   jas@di.uminho.pt
RI Saraiva, João/L-6113-2015; Cunha, Jacome/A-1213-2013
OI Saraiva, João/0000-0002-5686-7151; Cunha, Jacome/0000-0002-4713-3834;
   Mendes, Jorge/0000-0002-7977-9453
FU ERDF - European Regional Development Fund through the COMPETE Programme
   (operational programme for competitiveness); National Funds through the
   FCT - Fundacao para a Ciencia e a Tecnologia (Portuguese Foundation for
   Science and Technology) [FCOMP-01-0124-FEDER-010048]; FCT
   [SFRH/BPD/73358/2010]; Fundação para a Ciência e a Tecnologia
   [SFRH/BPD/73358/2010] Funding Source: FCT
FX We would like to thank Orlando Belo for his help on running and
   analyzing the empirical study. We would also like to thank Paulo Azevedo
   for his help in conducting the statistical analysis of our empirical
   study. We would also like to thank the anonymous reviewers for their
   suggestions which helped us to improve the paper. This work is funded by
   ERDF - European Regional Development Fund through the COMPETE Programme
   (operational programme for competitiveness) and by National Funds
   through the FCT - Fundacao para a Ciencia e a Tecnologia (Portuguese
   Foundation for Science and Technology) within project
   FCOMP-01-0124-FEDER-010048. The first author was also supported by FCT
   grant SFRH/BPD/73358/2010.
CR Abraham R., 2006, 28th International Conference on Software Engineering Proceedings, P182, DOI 10.1145/1134285.1134312
   Abraham R, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P189, DOI 10.1109/VLHCC.2005.70
   Alhajj R, 2003, INFORM SYST, V28, P597, DOI 10.1016/S0306-4379(02)00042-X
   [Anonymous], ICSE 12
   [Anonymous], EUR SPREADSHEET RISK
   [Anonymous], 1983, The theory of relational databases
   Cheng T, 2012, LECT NOTES COMPUT SC, V7460, P94, DOI 10.1007/978-3-642-33125-1_9
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Connolly T., 2002, Database Systems: A Practical Approach to Design
   Cunha Jacome, 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P105, DOI 10.1007/978-3-642-30476-7_7
   Cunha Jacome, 2012, Proceedings 2012 First International Workshop on User Evaluation for Software Engineering Researchers (USER 2012), P25, DOI 10.1109/USER.2012.6226577
   Cunha Jacome, 2010, Proceedings 2010 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC 2010), P93, DOI 10.1109/VLHCC.2010.22
   Cunha J., 2014, TRHASLAB012014 U MIN
   Cunha J., 2012, ACM S APPL COMPUTING, P1151
   Cunha J., 2011, THESIS U MINHO
   Cunha J, 2014, SCI COMPUT PROGRAM, V96, P254, DOI 10.1016/j.scico.2014.02.002
   Cunha J, 2011, S VIS LANG HUM CEN C, P179, DOI 10.1109/VLHCC.2011.6070396
   Cunha J, 2011, LECT NOTES COMPUT SC, V6603, P186, DOI 10.1007/978-3-642-19811-3_14
   Cunha J, 2009, S VIS LANG HUM CEN C, P233, DOI 10.1109/VLHCC.2009.5295255
   Cunha Jacome., 2009, PEPM, P179
   Engels Gregor., 2005, ASE 05 P 20 IEEEACM, P124
   Erwig M, 2009, IEEE SOFTWARE, V26, P25, DOI 10.1109/MS.2009.140
   EuSpRIG, 2010, EUR SPREADSH RISKS I
   Hermans F, 2010, LECT NOTES COMPUT SC, V6183, P52, DOI 10.1007/978-3-642-14107-2_4
   Host M., 2000, Empirical Software Engineering, V5, P201, DOI 10.1023/A:1026586415054
   ISAKOWITZ T, 1995, ACM T INFORM SYST, V13, P1, DOI 10.1145/195705.195708
   Lämmel R, 2003, LECT NOTES COMPUT SC, V2562, P357
   Novelli N, 2001, LECT NOTES COMPUT SC, V1973, P189
   Panko R., 2000, P SPREADSH RISK S EU, P7
   Perry DE., 2000, P C FUT SOFTW ENG, P345, DOI DOI 10.1145/336512.336586
   Powell StephenG., 2003, ART MODELING SPREADS
   Ullman J.D., 1997, 1 COURSE DATABASE SY
   Visser E, 2005, J SYMB COMPUT, V40, P831, DOI 10.1016/j.jsc.2004.12.011
   Visser J., 2004, 8 BRAZ S PROGR LANG
NR 34
TC 17
Z9 18
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2016
VL 23
IS 3
BP 361
EP 392
DI 10.1007/s10515-014-0167-x
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DM9CA
UT WOS:000376660500003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Dennis, LA
   Fisher, M
   Lincoln, NK
   Lisitsa, A
   Veres, SM
AF Dennis, Louise A.
   Fisher, Michael
   Lincoln, Nicholas K.
   Lisitsa, Alexei
   Veres, Sandor M.
TI Practical verification of decision-making in agent-based autonomous
   systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Hybrid systems; Model checking; Agent architectures
ID MODEL CHECKING; HYBRID SYSTEMS; MULTIAGENT; ABSTRACTIONS; PROOFS
AB We present a verification methodology for analysing the decision-making component in agent-based hybrid systems. Traditionally hybrid automata have been used to both implement and verify such systems, but hybrid automata based modelling, programming and verification techniques scale poorly as the complexity of discrete decision-making increases making them unattractive in situations where complex logical reasoning is required. In the programming of complex systems it has, therefore, become common to separate out logical decision-making into a separate, discrete, component. However, verification techniques have failed to keep pace with this development. We are exploring agent-based logical components and have developed a model checking technique for such components which can then be composed with a separate analysis of the continuous part of the hybrid system. Among other things this allows program model checkers to be used to verify the actual implementation of the decision-making in hybrid autonomous systems.
C1 [Dennis, Louise A.; Fisher, Michael; Lisitsa, Alexei] Univ Liverpool, Dept Comp Sci, Liverpool, Merseyside, England.
   [Veres, Sandor M.] Univ Sheffield, Dept Automat Control & Syst Engn, Sheffield, S Yorkshire, England.
   [Lincoln, Nicholas K.] Univ Southampton, Sch Engn Sci, Southampton, Hants, England.
C3 University of Liverpool; University of Sheffield; University of
   Southampton
RP Dennis, LA (corresponding author), Univ Liverpool, Dept Comp Sci, Liverpool, Merseyside, England.
EM L.A.Dennis@liverpool.ac.uk
RI Veres, Sandor Mihaly/JNE-1547-2023; Lisitsa, Alexei/AAJ-2241-2020;
   Fisher, Michael/P-2111-2019
OI Fisher, Michael/0000-0002-0875-3862
FU Engineering and Physical Sciences Research Council [EP/F037201,
   EP/F037570]; EPSRC [EP/J011843/2, EP/F037201/1, EP/J011843/1,
   EP/L024942/1, EP/L024845/1] Funding Source: UKRI
FX This research was partially funded by Engineering and Physical Sciences
   Research Council grants EP/F037201 and EP/F037570, and primarily
   occurred while the third and fifth authors were at University of
   Southampton. Our thanks go to a number of anonymous referees who have
   both improved the paper and made suggestions that will inform our
   thinking in future.
CR Alechina N., 2010, LECT NOTES ARTIF INT, V6572, P69
   ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   Alur R, 2000, P IEEE, V88, P971, DOI 10.1109/5.871304
   [Anonymous], 1990, HDB THEORETICAL COMP
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2009, VERIFICATION CONTROL
   [Anonymous], 2010, LOGICAL ANAL HYBRID
   Barringer H., 2003, P 2 WORKSHOP SPECIFI, P14
   Bauer K., 2012, THESIS TU KAISERLAUT
   Blackburn P, 2006, Handbook of modal logic
   Bond A., 1988, READINGS DISTRIBUTED
   Bordini R., 2007, PROGRAMMING MULTIAGE
   Bordini RH, 2009, J LOGIC COMPUT, V19, P1385, DOI 10.1093/logcom/exp029
   Bordini RH, 2005, MU S ART SOC SIM ORG, V15, P3, DOI 10.1007/0-387-26350-0_1
   Bordini RH, 2006, AUTON AGENT MULTI-AG, V12, P239, DOI 10.1007/s10458-006-5955-7
   Boyer R.S., 1981, The Correctness Problem in Computer Science
   Branicky MS, 1998, IEEE T AUTOMAT CONTR, V43, P31, DOI 10.1109/9.654885
   Bratman M. E., 1988, Computational Intelligence, V4, P349, DOI 10.1111/j.1467-8640.1988.tb00284.x
   Bratman M.E., 1987, Intention, Plans, and Practical Reason
   Briand X., 2009, FORMAL METHODS MODEL, P141
   Bujorianu M. L., 2012, COMMUNICATIONS CONTR
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Clarke EM, 1999, MODEL CHECKING, P1
   COHEN PR, 1990, ARTIF INTELL, V42, P213, DOI 10.1016/0004-3702(90)90055-5
   Courcoubetis C., 1992, Formal Methods in System Design, V1, P275, DOI 10.1007/BF00121128
   da Silva PS, 2011, LECT NOTES COMPUT SC, V6527, P64, DOI 10.1007/978-3-642-19829-8_5
   Damm W, 2007, LECT NOTES COMPUT SC, V4762, P425
   Dastani M, 2005, MU S ART SOC SIM ORG, V15, P39, DOI 10.1007/0-387-26350-0_2
   DAVIS R, 1983, ARTIF INTELL, V20, P63, DOI 10.1016/0004-3702(83)90015-2
   de Boer F.S., 2007, J APPL LOGIC, V5, P277, DOI [10.1016/j.jal.2005.12.014, DOI 10.1016/J.JAL.2005.12.014]
   DEMILLO RA, 1979, COMMUN ACM, V22, P271, DOI 10.1145/359104.359106
   Dennis L. A., 2013, P WORKSH COMP LOG MU
   Dennis L.A., 2008, WORKSH LOG SIM INT R
   Dennis L. A., 2010, P 10 INT S ART INT R
   Dennis L. A., 2013, P AUT ROB SYST TAROS
   Dennis L. A., 2010, P 8 INT WORKSH DECL, P96
   Dennis L, 2010, IEEE INTELL SYST, V25, P92, DOI 10.1109/MIS.2010.88
   Dennis LA, 2008, LECT NOTES ARTIF INT, V4908, P124
   Dennis LA, 2012, AUTOMAT SOFTW ENG, V19, P5, DOI 10.1007/s10515-011-0088-x
   Durfee E. H., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P63, DOI 10.1109/69.43404
   Ezekiel J., 2011, AI SPACE INTELLIGENC
   FETZER JH, 1988, COMMUN ACM, V31, P1048, DOI 10.1145/48529.48530
   Fisher M, 2013, COMMUN ACM, V56, P84, DOI [10.1145/2494558, 10.1145/2500468.2494558]
   Frehse G, 2005, LECT NOTES COMPUT SC, V3414, P258
   Frehse G, 2004, IEEE DECIS CONTR P, P479, DOI 10.1109/CDC.2004.1428676
   Gammie P, 2004, LECT NOTES COMPUT SC, V3114, P479
   Gerth R., 1996, Protocol Specification, Testing and Verification XV. Proceedings of the Fifteenth IFIP WG6.1 International Symposium on Protocol Specification, Testing and Verification, P3
   Goebel R, 2009, IEEE CONTR SYST MAG, V29, P28, DOI 10.1109/MCS.2008.931718
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Henzinger TA, 1997, LECT NOTES COMPUT SC, V1254, P460, DOI 10.1007/s100090050008
   Heuerding A, 1996, AI COMMUN, V9, P53
   Hindriks K. V., 1999, Autonomous Agents and Multi-Agent Systems, V2, P357, DOI 10.1023/A:1010084620690
   Hindriks K. V., 2001, LECT NOTES ARTIF INT, V1986, P228
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Hunter J., 2013, Proceedings of the 2013 international conference on Autonomous agents and multi-agent systems, P869
   Jones C. B., 1986, SYSTEMATIC SOFTWARE
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jongmans SSTQ, 2010, LECT NOTES ARTIF INT, V6245, P219, DOI 10.1007/978-3-642-14977-1_17
   Karim Samin., 2005, AAMAS 05, P19
   Kitano H, 2001, AI MAG, V22, P39
   KOHN W, 1992, PROCEEDINGS OF THE 31ST IEEE CONFERENCE ON DECISION AND CONTROL, VOLS 1-4, P2956, DOI 10.1109/CDC.1992.371270
   Kurucz A, 2007, STUD LOGIC PRACT REA, V3, P869
   Kwiatkowska M., 2002, LNCS, V2324
   Lamport Leslie, 2003, SPECIFYING SYSTEMS T
   Lincoln NK, 2007, INT J ADAPT CONTROL, V21, P237, DOI 10.1002/acs.922
   Lincoln NK, 2013, IEEE COMPUT INTELL M, V8, P25, DOI 10.1109/MCI.2013.2279559
   Lomuscio A, 2010, LECT NOTES COMPUT SC, V6447, P204, DOI 10.1007/978-3-642-16901-4_15
   Lomuscio A, 2009, LECT NOTES COMPUT SC, V5643, P682, DOI 10.1007/978-3-642-02658-4_55
   Loos Sarah M., 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P42, DOI 10.1007/978-3-642-21437-0_6
   McMillan KL, 1999, LECT NOTES COMPUT SC, V1703, P342
   MISRA J, 1981, IEEE T SOFTWARE ENG, V7, P417, DOI 10.1109/TSE.1981.230844
   Muscettola N, 1998, ARTIF INTELL, V103, P5, DOI 10.1016/S0004-3702(98)00068-X
   Pasareanu CS, 2008, FORM METHOD SYST DES, V32, P175, DOI 10.1007/s10703-008-0049-6
   Patchett C, 2010, UKSIM INT CONF COMP, P60, DOI 10.1109/ISMS.2010.22
   Pokahr A, 2005, MU S ART SOC SIM ORG, V15, P149, DOI 10.1007/0-387-26350-0_6
   Rao A., 1999, APPL LOGIC SERIES
   Rao A. S., 1995, ICMAS-95 Proceedings. First International Conference on Multi-Agent Systems, P312
   Rao A. S., 1996, Agents Breaking Away. 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '96 Proceedings, P42, DOI 10.1007/BFb0031845
   RAO AS, 1991, PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING, P473
   RAO AS, 1992, PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE (KR 92), P439
   SHOHAM Y, 1993, ARTIF INTELL, V60, P51, DOI 10.1016/0004-3702(93)90034-9
   SIERHUIS M, 2001, THESIS U AMSTERDAM
   Stocker Richard, 2012, Logics in Artificial Intelligence. Proceedings of the 13th European Conference (JELIA 2012), P385, DOI 10.1007/978-3-642-33353-8_30
   Tiwari A, 2008, FORM METHOD SYST DES, V32, P57, DOI 10.1007/s10703-007-0044-3
   van Riemsdijk MB, 2009, AUTON AGENT MULTI-AG, V18, P471, DOI 10.1007/s10458-008-9067-4
   Varaiya P., 1999, LNCS, V1639, P1
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Webster Matt, 2011, Computer Safety, Reliability, and Security. Proceedings 30th International Conference, SAFECOMP 2011, P228, DOI 10.1007/978-3-642-24270-0_17
   Wei C., 2013, LNCS LNAI, V7837, P54, DOI [DOI 10.1007/978-3-642-38700-5, 10.1007/978-3-642-38700-5]
   Wooldridge M. J., 2002, INTRO MULTIAGENT SYS
NR 90
TC 50
Z9 50
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2016
VL 23
IS 3
BP 305
EP 359
DI 10.1007/s10515-014-0168-9
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DM9CA
UT WOS:000376660500002
OA hybrid, Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Jannach, D
   Schmitz, T
AF Jannach, Dietmar
   Schmitz, Thomas
TI Model-based diagnosis of spreadsheet programs: a constraint-based
   debugging approach
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Model-based diagnosis; Constraints; Spreadsheet programs
ID SEE
AB Spreadsheet programs are probably the most successful example of end-user software development tools and are used for a variety of purposes. Like any type of software, they are prone to error, in particular as they are usually developed by non-programmers. While various techniques exist to support the developer in finding errors in procedural programs, the tool support for spreadsheet debugging is still limited. In this paper, we show how techniques from model-based diagnosis can be applied and extended for spreadsheet debugging by translating the relevant parts of a spreadsheet to a constraint satisfaction problem. We additionally propose both problem-specific and generalizable extensions to the classical diagnosis algorithms which help to detect potential problems in a spreadsheet based on user-provided test cases more efficiently. The proposed techniques were integrated into a modular framework for spreadsheet debugging and evaluated with respect to scalability based on a number of real-world and artificially created spreadsheets. An additional error detection exercise involving 24 subjects was performed to assess the general applicability of such advanced spreadsheet debugging techniques for end users.
C1 [Jannach, Dietmar; Schmitz, Thomas] TU Dortmund, Dortmund, Germany.
C3 Dortmund University of Technology
RP Jannach, D (corresponding author), TU Dortmund, Dortmund, Germany.
EM dietmar.jannach@tu-dortmund.de; thomas.schmitz@tu-dortmund.de
FU European Union through the programme "Europaischer Fonds fur regionale
   Entwicklung-Investition in unsere Zukunft" [300251802]
FX This work was partially supported by the European Union through the
   programme "Europaischer Fonds fur regionale Entwicklung-Investition in
   unsere Zukunft" under contract number 300251802.
CR Abraham R., 2006, 28th International Conference on Software Engineering Proceedings, P182, DOI 10.1145/1134285.1134312
   Abraham R, 2007, PROC INT CONF SOFTW, P251
   Abraham R, 2006, IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P43
   Abraham R, 2009, IEEE T SOFTWARE ENG, V35, P94, DOI 10.1109/TSE.2008.73
   Abreu R., 2008, P 2008 INT WORKSHOP, P64
   Abreu R., 2012, 15 IB C SOFTW ENG CI, P1
   [Anonymous], 2013, 322 U MASS POL EC RE
   [Anonymous], 2013, P 2013 C CTR ADV STU
   [Anonymous], 2010, 9 JOINT C KNOWL BAS
   [Anonymous], 1993, Foundations of Constraint Satisfaction
   [Anonymous], P 4 INT WORKSH AUT D
   [Anonymous], P 26 AAAI C ART INT
   Asavametha A., 2012, THESIS OREGON STATE
   BROWN PS, 1987, ACM T INFORM SYST, V5, P258, DOI 10.1145/27641.28058
   Burnett M, 2002, IEEE T SOFTWARE ENG, V28, P576, DOI 10.1109/TSE.2002.1010060
   Burnett M, 2003, PROC INT CONF SOFTW, P93, DOI 10.1109/ICSE.2003.1201191
   Campos J, 2012, IEEE INT CONF AUTOM, P378, DOI 10.1145/2351676.2351752
   Chadwick D, 2001, SOFTWARE QUAL J, V9, P133, DOI 10.1023/A:1016631003750
   Chittaro L, 2004, ARTIF INTELL, V155, P147, DOI 10.1016/j.artint.2003.06.003
   CONSOLE L, 1993, IJCAI-93, VOLS 1 AND 2, P1494
   CREETH R, 1985, J ACCOUNTANCY, V159, P90
   Cunha J, 2012, LECT NOTES COMPUT SC, V7336, P202, DOI 10.1007/978-3-642-31128-4_15
   DEKLEER J, 1987, ARTIF INTELL, V32, P97, DOI 10.1016/0004-3702(87)90063-4
   DEKLEER J, 1990, ARTIF INTELL, V45, P381, DOI 10.1016/0004-3702(90)90012-O
   DITLEA S, 1987, PERS COMPUT, V11, P60
   Felfernig A, 2004, ARTIF INTELL, V152, P213, DOI 10.1016/S0004-3702(03)00117-6
   Felfernig A., 2001, KI 2001: Advances in Artificial Intelligence. Joint German/ Austrian Conference on AI. Proceedings (Lecture Notes in Artificial Intelligence Vol.2174), P185
   Felfernig A., 2010, P WORKSH PRINC DIAGN, P31
   Filby G., 1998, Spreadsheets in science and engineering
   FREUDER EC, 1992, ARTIF INTELL, V58, P21, DOI 10.1016/0004-3702(92)90004-H
   Friedrich G, 1999, ARTIF INTELL, V111, P3, DOI 10.1016/S0004-3702(99)00034-X
   FRIEDRICH G, 1992, PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE (KR 92), P489
   Galletta F., 1993, Accounting, Management Information Technology, V3, P79, DOI [10.1016/0959-8022(93)90001-M, DOI 10.1016/0959-8022(93)90001-M]
   GREINER R, 1989, ARTIF INTELL, V41, P79, DOI 10.1016/0004-3702(89)90079-9
   Hermans F, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P409, DOI 10.1109/ICSM.2012.6405300
   Hermans F, 2012, PROC INT CONF SOFTW, P441, DOI 10.1109/ICSE.2012.6227171
   Hofer B, 2013, LECT NOTES COMPUT SC, V7793, P68, DOI 10.1007/978-3-642-37057-1_6
   Jannach D, 2013, ENASE: PROCEEDINGS OF THE 8TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, P117, DOI 10.5220/0004410601170124
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Junker U, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P167
   Larrosa J, 1999, ARTIF INTELL, V107, P149, DOI 10.1016/S0004-3702(98)00108-8
   Panko R. R., 1996, Proceedings of the Twenty-Ninth Hawaii International Conference on System Sciences, P326, DOI 10.1109/HICSS.1996.495416
   Panko R. R., 1998, Journal of End User Computing, V10, P15
   Panko R.R., 2012, 2012 45th Hawaii International Conference on System Sciences, P4603
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Pemberton JD, 2000, IND MANAGE DATA SYST, V100, P379, DOI 10.1108/02635570010353938
   Powell SG, 2008, DECIS SUPPORT SYST, V46, P128, DOI 10.1016/j.dss.2008.06.001
   Reichwein J, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P25
   Reinhart CM, 2010, AM ECON REV, V100, P573, DOI 10.1257/aer.100.2.573
   REITER R, 1987, ARTIF INTELL, V32, P57, DOI 10.1016/0004-3702(87)90062-2
   Rothermel G, 1998, PROC INT CONF SOFTW, P198, DOI 10.1109/ICSE.1998.671118
   Shchekotykhin K, 2012, J WEB SEMANT, V12-13, P88, DOI 10.1016/j.websem.2011.12.006
   Smith BM, 1996, ARTIF INTELL, V81, P155, DOI 10.1016/0004-3702(95)00052-6
   Stumptner M., 1996, Industrial and Engineering Applications of Artificial Intelligence and Expert Systems. IEA/AIE 96. Proceedings of the Ninth International Conference, P155
   Stumptner M, 1999, IJCAI-99: PROCEEDINGS OF THE SIXTEENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 & 2, P1074
   Stumptner M, 2001, ARTIF INTELL, V127, P1, DOI 10.1016/S0004-3702(01)00054-6
   Wotawa F, 2013, AI COMMUN, V26, P133, DOI 10.3233/AIC-2012-0548
   Wotawa F, 2010, LECT NOTES ARTIF INT, V6096, P711, DOI 10.1007/978-3-642-13022-9_71
NR 58
TC 24
Z9 28
U1 0
U2 2
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2016
VL 23
IS 1
SI SI
BP 105
EP 144
DI 10.1007/s10515-014-0141-7
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1TW
UT WOS:000369000800005
DA 2024-07-18
ER

PT J
AU Xia, X
   Lo, D
   Shihab, E
   Wang, XY
   Zhou, B
AF Xia, Xin
   Lo, David
   Shihab, Emad
   Wang, Xinyu
   Zhou, Bo
TI Automatic, high accuracy prediction of reopened bugs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Reopened bugs; Imbalanced feature selection; Imbalanced learning
ID SEVERITY; SUPPORT
AB Bug fixing is one of the most time-consuming and costly activities of the software development life cycle. In general, bugs are reported in a bug tracking system, validated by a triage team, assigned for someone to fix, and finally verified and closed. However, in some cases bugs have to be reopened. Reopened bugs increase software maintenance cost, cause rework for already busy developers and in some cases even delay the future delivery of a software release. Therefore, a few recent studies focused on studying reopened bugs. However, these prior studies did not achieve high performance (in terms of precision and recall), required manual intervention, and used very simplistic techniques when dealing with this textual data, which leads us to believe that further improvements are possible. In this paper, we propose ReopenPredictor, which is an automatic, high accuracy predictor of reopened bugs. ReopenPredictor uses a number of features, including textual features, to achieve high accuracy prediction of reopened bugs. As part of ReopenPredictor, we propose two algorithms that are used to automatically estimate various thresholds to maximize the prediction performance. To examine the benefits of ReopenPredictor, we perform experiments on three large open source projects-namely Eclipse, Apache HTTP and OpenOffice. Our results show that ReopenPredictor outperforms prior work, achieving a reopened F-measure of 0.744, 0.770, and 0.860 for Eclipse, Apache HTTP and OpenOffice, respectively. These results correspond to an improvement in the reopened F-measure of the method proposed in the prior work by Shihab et al. by 33.33, 12.57 and 3.12% for Eclipse, Apache HTTP and OpenOffice, respectively.
C1 [Xia, Xin; Wang, Xinyu; Zhou, Bo] Zhejiang Univ, Coll Comp Sci & Technol, Hangzhou 310003, Zhejiang, Peoples R China.
   [Lo, David] Singapore Management Univ, Sch Informat Syst, Singapore 178902, Singapore.
   [Shihab, Emad] Concordia Univ, Dept Comp Sci & Software Engn, Montreal, PQ, Canada.
C3 Zhejiang University; Singapore Management University; Concordia
   University - Canada
RP Wang, XY (corresponding author), Zhejiang Univ, Coll Comp Sci & Technol, Hangzhou 310003, Zhejiang, Peoples R China.
EM xxkidd@zju.edu.cn; davidlo@smu.edu.sg; eshihab@cse.concordia.ca;
   wangxinyu@zju.edu.cn; bzhou@zju.edu.cn
RI Xia, Xin/AAD-6217-2022; Lo, David/A-2493-2012
OI Xia, Xin/0000-0002-6302-3256; Lo, David/0000-0002-4367-7201
FU NSFC Program [61103032]; National Key Technology R&D Program of the
   Ministry of Science and Technology of China [2013BAH01B01]
FX This research is sponsored in part by NSFC Program (No. 61103032) and
   National Key Technology R&D Program of the Ministry of Science and
   Technology of China (No. 2013BAH01B01). The code can be download from:
   https://github.com/xinxia1986/reopenBug.
CR Akbani R, 2004, LECT NOTES COMPUT SC, V3201, P39, DOI 10.1007/978-3-540-30115-8_7
   [Anonymous], EMPIRICAL SOFTWARE E
   [Anonymous], WORD VECTOR TOOL USE
   [Anonymous], 2007, P 22 IEEE ACM INT C, DOI DOI 10.1145/1321631.1321639
   [Anonymous], 1998, LEARNING TEXT CATEGO
   Anvik J., 2007, MSR
   Anvik John, 2005, P 2005 OOPSLA WORKSH, P35
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Bergstra J, 2012, J MACH LEARN RES, V13, P281
   Bettenburg N., 2008, P 16 ACM SIGSOFT INT, P308
   Bhattacharya P., 2010, Software Main- tenance (ICSM), 2010 IEEE International Conference on, P1
   Bo Pang, 2008, Foundations and Trends in Information Retrieval, V2, P1, DOI 10.1561/1500000001
   Canfora G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P252, DOI 10.1109/ICST.2013.38
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Cheung S.-C., 2011, P 19 ACM SIGSOFT S 1, P15
   Cubranic D., 2004, SEKE
   Francis P, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P451, DOI 10.1109/ISSRE.2004.43
   Gegick Michael, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P11, DOI 10.1109/MSR.2010.5463340
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Han J., 2006, DATA MINING CONCEPTS, DOI 10.1016/C2009-0-61819-5
   He HB, 2009, IEEE T KNOWL DATA EN, V21, P1263, DOI 10.1109/TKDE.2008.239
   Jeong G, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P111, DOI 10.1145/1595696.1595715
   Jiang Y, 2008, EMPIR SOFTW ENG, V13, P561, DOI 10.1007/s10664-008-9079-3
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Lamkanfi Ahmed, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P1, DOI 10.1109/MSR.2010.5463284
   Lamkanfi A, 2011, EUR CON SFTWR MTNCE, P249, DOI 10.1109/CSMR.2011.31
   LiGuo Huang, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P412, DOI 10.1109/ASE.2011.6100086
   Liu B., 2012, SYNTHESIS LECT HUMAN, V5, P1, DOI [DOI 10.2200/S00416ED1V01Y201204HLT016, 10.2200/s00416ed1v01y201204hlt016]
   Matter D, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P131, DOI 10.1109/MSR.2009.5069491
   Menzies T, 2008, PROC IEEE INT CONF S, P346, DOI 10.1109/ICSM.2008.4658083
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Nguyen A. T., 2012, P ACM SIGSOFT 20 INT, P63
   Panichella A, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P164, DOI 10.1109/CSMR-WCRE.2014.6747166
   Peters F, 2012, PROC INT CONF SOFTW, P189, DOI 10.1109/ICSE.2012.6227194
   Podgurski A, 2003, PROC INT CONF SOFTW, P465, DOI 10.1109/ICSE.2003.1201224
   Powers DMW, 2020, J MACH LEARN TECHNOL, P37, DOI DOI 10.9735/2229-3981
   Runeson P, 2007, PROC INT CONF SOFTW, P499
   Sandusky R. J., 2004, MSR
   Shihab E., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P249, DOI 10.1109/WCRE.2010.36
   Sun Chengnian, 2010, P 32 ACMIEEE INT C S, V1, P45, DOI [DOI 10.1145/1806799, 10.1145/1806799.1806811]
   Sun C, 2011, INT J CHEM ENG, V2011, DOI 10.1155/2011/545234
   Tamrawi A, 2011, P 19 ACM SIGSOFT S 1, P365, DOI [DOI 10.1145/2025113.2025163, 10.31274/etd-180810-1814, DOI 10.31274/ETD-180810-1814]
   Thung F., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P205, DOI 10.1109/WCRE.2012.30
   Tian Y, 2012, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2012.6227176
   Wang XY, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P461, DOI 10.1145/1368088.1368151
   Xia X., 2013, CSMR
   Yuan Tian, 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P215, DOI 10.1109/WCRE.2012.31
   Zaman S., 2011, Proceedings of the 8th working conference on mining software repositories, P93, DOI [10.1145/1985441.1985457, DOI 10.1145/1985441.1985457]
   Zhang HY, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1042, DOI 10.1109/ICSE.2013.6606654
   Zheng Z., 2004, ACM Sigkdd Explorations Newsletter, V6, P80, DOI DOI 10.1145/1007730.1007741
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
   Zimmermann T, 2012, PROC INT CONF SOFTW, P1074, DOI 10.1109/ICSE.2012.6227112
NR 52
TC 39
Z9 46
U1 0
U2 8
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2015
VL 22
IS 1
SI SI
BP 75
EP 109
DI 10.1007/s10515-014-0162-2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE0EH
UT WOS:000351476800004
OA Green Published
DA 2024-07-18
ER

PT J
AU Arendt, T
   Taentzer, G
AF Arendt, Thorsten
   Taentzer, Gabriele
TI A tool environment for quality assurance based on the Eclipse Modeling
   Framework
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Modeling; Model-based software development; Model quality; Model quality
   assurance; Eclipse Modeling Framework
AB The paradigm of model-based software development has become more and more popular since it promises an increase in the efficiency and quality of software development. Following this paradigm, models become primary artifacts in the software development process. Therefore, software quality and quality assurance frequently leads back to the quality and quality assurance of the involved models. In our approach, we propose a model quality assurance process that can be adapted to project-specific and domain-specific needs. This process is based on static model analysis using model metrics and model smells. Based on the outcome of the model analysis, appropriate model refactoring steps can be performed. In this paper, we present a tool environment conveniently supporting the proposed model quality assurance process. In particular, the presented tools support metrics reporting, smell detection, and refactoring for models being based on the Eclipse Modeling Framework, a widely used open source technology in model-based software development.
C1 [Arendt, Thorsten; Taentzer, Gabriele] Univ Marburg, FB Math & Comp Sci 12, D-35032 Marburg, Germany.
C3 Philipps University Marburg
RP Arendt, T (corresponding author), Univ Marburg, FB Math & Comp Sci 12, Hans Meerwein Str, D-35032 Marburg, Germany.
EM arendt@mathematik.uni-marburg.de; taentzer@mathematik.uni-marburg.de
FU Siemens Corporate Technology, Germany
FX This work has been partially funded by Siemens Corporate Technology,
   Germany. Furthermore, we thank the students Jan Baart, Matthias
   Burhenne, Gerrit H. Freise, Florian Mantz, Pawel Stepien, and Alexander
   Weber for their work on our tools. Last but not least, we like to thank
   the anonymous reviewers for their valuable comments on the previous
   version of this article.
CR [Anonymous], 2012, MODISCO MODISCO
   [Anonymous], 2012, REFACTORY REFACTORY
   [Anonymous], 2012, SDMETRICS
   [Anonymous], 2012, EMF VAL EMF VAL
   [Anonymous], 2012, EMF QUERY EMF QUERY
   [Anonymous], 2012, JET JET
   [Anonymous], 2012, IBM RAT SOFTW ARCH
   [Anonymous], 2012, JAV ORACL
   [Anonymous], 2012, EMF REF EMF REF
   [Anonymous], 2012, HENSHIN EMF HENSHIN
   [Anonymous], 2012, EMP ECL MOD PROJ EMP
   [Anonymous], 2012, OCL OBJECT CONSTRAIN
   [Anonymous], 2012, GMP GRAPH MOD PROJ G
   [Anonymous], 2012, MOF METAOBJECT FACIL
   [Anonymous], 2012, EMF COMP
   Arendt T., 2012, TECHNICAL REPORT
   Arendt T., 2010, 9 ED BENEVOL WORKSH
   Arendt T., 2009, MODEL DRIVEN SOFTWAR
   Arendt T., 2012, OBJEKTSPEKTRUM, V06
   Arendt T., 2012, TOOL ENV QUALITY ASS
   Arendt T., 2012, ACM DIGITAL IN PRESS
   Arendt T., 2011, LNI, V183, P63
   Arendt T, 2010, LECT NOTES COMPUT SC, V6394, P121
   Barbier G, 2010, INFORMATION SYSTEMS TRANSFORMATION: ARCHITECTURE-DRIVEN MODERNIZATION CASE STUDIES, P365, DOI 10.1016/B978-0-12-374913-0.00014-7
   Basili V.R., 1994, Encyclopedia of Software Engineering, P528532
   Boger M, 2003, LECT NOTES COMPUT SC, V2591, P366
   Ehrig H., 2006, MONO THEOR COMP SCI, DOI 10.1007/3-540-31188-2
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Frenzel L., 2006, ECLIPSE MAG, V5
   GAMMA E, 1995, DESIGN PATTERNS
   Genero M, 2005, J OBJECT TECHNOL, V4, P59, DOI 10.5381/jot.2005.4.9.a1
   Heimann J, 2010, LECT NOTES COMPUT SC, V6395, P78
   Kolovos DS, 2007, J OBJECT TECHNOL, V6, P53, DOI 10.5381/jot.2007.6.9.a3
   LANGE C, 2007, THESIS TU EINDHOVEN
   Markovic S, 2008, SOFTW SYST MODEL, V7, P25, DOI 10.1007/s10270-007-0056-x
   MD: No Magic, 2012, MAGICDRAW
   Min Zhang, 2008, Proceedings of the 2008 32nd Annual IEEE Software Engineering Workshop. SEW 2008, P161, DOI 10.1109/SEW.2008.26
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Porres I, 2003, LECT NOTES COMPUT SC, V2863, P159
   Riel AJ., 1996, Object-Oriented Design Heuristics
   Sakkinen M., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P39
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Suny? G., 2001, LNCS, P134, DOI DOI 10.1007/3-540-45441-1_11
   Thongmak M., 2004, P 8 NAT COMP SCI ENG
   Zhang J, 2005, MODEL-DRIVEN SOFTWARE DEVELOPMENT, P199, DOI 10.1007/3-540-28554-7_9
NR 45
TC 40
Z9 41
U1 0
U2 16
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2013
VL 20
IS 2
SI SI
BP 141
EP 184
DI 10.1007/s10515-012-0114-7
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 095SE
UT WOS:000315354200002
DA 2024-07-18
ER

PT J
AU Menzies, T
   Jalali, O
   Hihn, J
   Baker, D
   Lum, K
AF Menzies, Tim
   Jalali, Omid
   Hihn, Jairus
   Baker, Dan
   Lum, Karen
TI Stable rankings for different effort models
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE COCOMO; Effort estimation; Data mining; Evaluation
ID COST ESTIMATION; SOFTWARE; SELECTION
AB There exists a large and growing number of proposed estimation methods but little conclusive evidence ranking one method over another. Prior effort estimation studies suffered from "conclusion instability", where the rankings offered to different methods were not stable across (a) different evaluation criteria; (b) different data sources; or (c) different random selections of that data. This paper reports a study of 158 effort estimation methods on data sets based on COCOMO features. Four "best" methods were detected that were consistently better than the "rest" of the other 154 methods. These rankings of "best" and "rest" methods were stable across (a) three different evaluation criteria applied to (b) multiple data sets from two different sources that were (c) divided into hundreds of randomly selected subsets using four different random seeds. Hence, while there exists no single universal "best" effort estimation method, there appears to exist a small number (four) of most useful methods. This result both complicates and simplifies effort estimation research. The complication is that any future effort estimation analysis should be preceded by a "selection study" that finds the best local estimator. However, the simplification is that such a study need not be labor intensive, at least for COCOMO style data sets.
C1 [Menzies, Tim; Jalali, Omid; Baker, Dan] W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26506 USA.
   [Hihn, Jairus; Lum, Karen] NASA, Jet Prop Lab, Pasadena, CA USA.
C3 West Virginia University; National Aeronautics & Space Administration
   (NASA); NASA Jet Propulsion Laboratory (JPL)
RP Menzies, T (corresponding author), W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26506 USA.
EM tim@menzies.us; ojalali@mix.wvu.edu; jhihn@mail3.jpl.nasa.gov;
   danielryanbaker@gmail.com; karen.t.lum@jpl.nasa.gov
RI Menzies, Tim/X-7680-2019
OI Menzies, Tim/0000-0002-5040-3196
FU US National Aeronautics and Space Administration
FX The research described in this paper was carried out at West Virginia
   University and the Jet Propulsion Laboratory, California Institute of
   Technology, under a contract with the US National Aeronautics and Space
   Administration. Reference herein to any specific commercial product,
   process, or service by trade name, trademark, manufacturer, or otherwise
   does not constitute or imply its endorsement by the US Government.
CR Anderson J.R., 2004, COGNITIVE PSYCHOL IT, V6th
   [Anonymous], 2005, Data mining: Practical machine learning tools and techniques
   [Anonymous], THESIS W VIRGINIA U
   [Anonymous], 1993, Proceedings of the 13th International Joint Conference on Artificial Intelligence
   [Anonymous], ACM SIGSOFT ASS COMP
   BASILI VR, 2002, P 24 INT C SOFTW ENG
   Boehm BW., 2000, SOFTWARE COST ESTIMA, VII
   Boehm BW., 1981, Software Engineering Economics
   Breiman L, 1996, MACH LEARN, V24, P123, DOI 10.1007/bf00058655
   Briand L. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P377, DOI 10.1109/ICSE.2000.870428
   CHANG CL, 1974, IEEE T COMPUT, VC 23, P1179, DOI 10.1109/T-C.1974.223827
   Chen ZH, 2005, IEEE SOFTWARE, V22, P38, DOI 10.1109/MS.2005.151
   Chulani S, 1999, IEEE T SOFTWARE ENG, V25, P573, DOI 10.1109/32.799958
   Endres A., 2003, A Handbook of Software and Systems Engineering: Empirical Observations, Laws, and Theories
   Ferens D., 1998, J PARAMETRICS, V18, P55
   Freund Y, 1997, J COMPUT SYST SCI, V55, P119, DOI 10.1006/jcss.1997.1504
   GAMA J, 2006, SAC 06, P662
   GREGOR S, 2002, AUSTRALASIAN J INF S
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   JALALI O, 2007, THESIS W VIRGINIA U
   Jensen Randall., 1983, 5 ISPA C, P88
   Jorgensen M, 2004, IEEE T SOFTWARE ENG, V30, P993, DOI 10.1109/TSE.2004.103
   Jorgensen M, 2004, J SYST SOFTWARE, V70, P37, DOI 10.1016/S0164-1212(02)00156-5
   Jorgensen M, 2007, SYSTEMATIC REV SOFTW
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Keung JW, 2008, IEEE T SOFTWARE ENG, V34, P471, DOI 10.1109/TSE.2008.34
   Kirsopp C., 2002, IEEE Proc, V149
   KIRSOPP C, 2002, P 22 SGAI INT C KNOW
   Kitchenham BA, 2007, IEEE T SOFTWARE ENG, V33, P316, DOI 10.1109/TSE.2007.1101
   KLIIJNEN JPC, 1987, J STAT COMPUT SIM, V57, P111
   KOHAVI R, 1997, ARTIF INTELL, V273, P324
   LI J, 2007, P PROMISE 07 WORKSH
   Li YF, 2009, EMPIR SOFTW ENG, V14, P603, DOI 10.1007/s10664-008-9104-6
   Li YF, 2009, J SYST SOFTWARE, V82, P241, DOI 10.1016/j.jss.2008.06.001
   LIPOWEZKY U, 1998, PATTERN RECOGNIT LET, V19
   LUM K, 2002, ISPA C P
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   Mendes E, 2003, EMPIR SOFTW ENG, V8, P163, DOI 10.1023/A:1023062629183
   Menzies T., 2005, P PROMISE WORKSH ICS
   Menzies T., 2005, P ICSE
   Menzies T, 2006, IEEE T SOFTWARE ENG, V32, P883, DOI 10.1109/TSE.2006.114
   Miller A., 2002, SUBSET SELECTION REG
   Myrtveit I, 2005, IEEE T SOFTWARE ENG, V31, P380, DOI 10.1109/TSE.2005.58
   Park R., 1988, 4 COCOMO US GROUP M
   Putnam L., 1992, MEASURES EXCELLENCE
   Quinlan J. R., 1992, Proceedings of the 5th Australian Joint Conference on Artificial Intelligence. AI '92, P343
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Shepperd M, 2001, IEEE T SOFTWARE ENG, V27, P1014, DOI 10.1109/32.965341
   SHEPPERD M, 2007, INT C SOFTW ENG 2007
   Simons DJ, 1999, PERCEPTION, V28, P1059, DOI 10.1068/p2952
   Spareref.com, 2002, NASA SHUT CHECK LAUN
   Walkerden F., 1999, Empirical Software Engineering, V4, P135, DOI 10.1023/A:1009872202035
   Yang Y, 2002, PKAW
NR 53
TC 27
Z9 29
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2010
VL 17
IS 4
BP 409
EP 437
DI 10.1007/s10515-010-0070-z
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 630EZ
UT WOS:000280257100003
DA 2024-07-18
ER

PT J
AU Elyasi, M
   Simitcioglu, ME
   Saydemir, A
   Ekici, A
   Özener, OÖ
   Sözer, H
AF Elyasi, Milad
   Simitcioglu, M. Esad
   Saydemir, Abdullah
   Ekici, Ali
   Ozener, O. Orsan
   Sozer, Hasan
TI Genetic algorithms and heuristics hybridized for software architecture
   recovery
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Reverse engineering; Software architecture recovery; Software module
   clustering; Software modularity; Genetic algorithms
ID RECONSTRUCTION; MODULARIZATION; SYSTEMS
AB Large scale software systems must be decomposed into modular units to reduce maintenance efforts. Software Architecture Recovery (SAR) approaches have been introduced to analyze dependencies among software modules and automatically cluster them to achieve high modularity. These approaches employ various types of algorithms for clustering software modules. In this paper, we discuss design decisions and variations in existing genetic algorithms devised for SAR. We present a novel hybrid genetic algorithm that introduces three major differences with respect to these algorithms. First, it employs a greedy heuristic algorithm to automatically determine the number of clusters and enrich the initial population that is generated randomly. Second, it uses a different solution representation that facilitates an arithmetic crossover operator. Third, it is hybridized with a heuristic that improves solutions in each iteration. We present an empirical evaluation with seven real systems as experimental objects. We compare the effectiveness of our algorithm with respect to a baseline and state-of-the-art hybrid genetic algorithms. Our algorithm outperforms others in maximizing the modularity of the obtained clusters.
C1 [Simitcioglu, M. Esad; Saydemir, Abdullah; Sozer, Hasan] Ozyegin Univ, Comp Sci Dept, TR-34794 Istanbul, Turkiye.
   [Elyasi, Milad; Ekici, Ali; Ozener, O. Orsan] Ozyegin Univ, Ind Engn Dept, TR-34794 Istanbul, Turkiye.
   [Elyasi, Milad] CNRS, IMT Atlantique, LS2N, 4 Rue Alfred Kastler, F-44300 Nantes, France.
C3 Ozyegin University; Ozyegin University; Centre National de la Recherche
   Scientifique (CNRS); IMT - Institut Mines-Telecom; IMT Atlantique
RP Sözer, H (corresponding author), Ozyegin Univ, Comp Sci Dept, TR-34794 Istanbul, Turkiye.
EM milad.elyasi@ozyegin.edu.tr; esad.simitcioglu@ozu.edu.tr;
   abdullah.saydemir@ozu.edu.tr; ali.ekici@ozyegin.edu.tr;
   orsan.ozener@ozyegin.edu.tr; hasan.sozer@ozyegin.edu.tr
RI Ekici, Ali/A-5388-2015; Elyasi, Milad/IWM-4579-2023
OI Elyasi, Milad/0000-0002-4277-4114; /0000-0003-4185-3504
FU Scientific and Research Council of Turkey [120E488]
FX The work is supported by the Scientific and Research Council of Turkey
   under Grant No. 120E488
CR Akbari M, 2019, 2019 IEEE 5TH CONFERENCE ON KNOWLEDGE BASED ENGINEERING AND INNOVATION (KBEI 2019), P565, DOI 10.1109/KBEI.2019.8734939
   Altinisik M., 2016, P 31 ACM S APPL COMP, P1440
   Altinisik M, 2017, 11TH EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE (ECSA 2017) - COMPANION VOLUME, P160, DOI 10.1145/3129790.3129811
   Andritsos P., 2004, Advanced Database Technology - EDBT 2004, P531
   [Anonymous], 1994, Genetic Algorithms + Data Structures = Evolution Programs
   Barros MD, 2012, PROCEEDINGS OF THE FOURTEENTH INTERNATIONAL CONFERENCE ON GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1205, DOI 10.1145/2330163.2330330
   Candela I, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2928268
   Chen C, 2017, PROC IEEE ACM INT C, P377, DOI 10.1109/ICSE-C.2017.75
   Clauset A, 2005, PHYS REV E, V72, DOI 10.1103/PhysRevE.72.026132
   Corazza A, 2011, EUR CON SFTWR MTNCE, P35, DOI 10.1109/CSMR.2011.8
   Desai U, 2021, AAAI CONF ARTIF INTE, V35, P72
   Doval D., 1999, STEP '99. Proceedings Ninth International Workshop Software Technology and Engineering Practice, P73, DOI 10.1109/STEP.1999.798481
   Ducasse S, 2009, IEEE T SOFTWARE ENG, V35, P573, DOI 10.1109/TSE.2009.19
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   Elyasi M, 2022, 37TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1417, DOI 10.1145/3477314.3507020
   Ersoy E, 2016, LECT NOTES COMPUT SC, V9839, P326, DOI 10.1007/978-3-319-48992-6_24
   Garcia J., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P552, DOI 10.1109/ASE.2011.6100123
   Garcia J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P901, DOI 10.1109/ICSE.2013.6606639
   Garlan David, 2010, SEI Series in Software Engineering, Vsecond
   Gen M., 2000, Genetic Algorithms and Engineering Optimization
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Hendrickson B, 1995, SUPERCOMP PROC, P626
   Jalali NS, 2019, SOFT COMPUT, V23, P11141, DOI 10.1007/s00500-018-3666-z
   Jin WX, 2021, IEEE T SOFTWARE ENG, V47, P987, DOI 10.1109/TSE.2019.2910531
   Kalia AK, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1214, DOI 10.1145/3468264.3473915
   Karna S.K., 2012, Int. J. Eng. Math. Sci., V1, P1
   Karypis G, 1998, SIAM J SCI COMPUT, V20, P359, DOI 10.1137/S1064827595287997
   KRUSKAL WH, 1952, J AM STAT ASSOC, V47, P583, DOI 10.1080/01621459.1952.10483441
   Kumari AC, 2016, J SYST SOFTWARE, V117, P384, DOI 10.1016/j.jss.2016.04.007
   Lutellier T, 2018, IEEE T SOFTWARE ENG, V44, P159, DOI 10.1109/TSE.2017.2671865
   Maqbool O, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P15, DOI 10.1109/CSMR.2004.1281402
   Mitchell BS, 2008, SOFT COMPUT, V12, P77, DOI 10.1007/s00500-007-0218-3
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Mkaouer W, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2729974
   Mohammadi S, 2019, INFORM SOFTWARE TECH, V105, P252, DOI 10.1016/j.infsof.2018.09.001
   Monçores MC, 2018, COMPUT OPER RES, V91, P92, DOI 10.1016/j.cor.2017.10.004
   Mu LF, 2020, INFORM SYST FRONT, V22, P1133, DOI 10.1007/s10796-019-09906-0
   Murphy GC, 2001, IEEE T SOFTWARE ENG, V27, P364, DOI 10.1109/32.917525
   Nicosia V, 2009, J STAT MECH-THEORY E, DOI 10.1088/1742-5468/2009/03/P03024
   Nitin V., 2022, P 37 IEEE ACM INT C
   Noack A, 2009, LECT NOTES COMPUT SC, V5526, P257
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Praditwong K, 2011, IEEE T SOFTWARE ENG, V37, P264, DOI 10.1109/TSE.2010.26
   Rao R., 2016, Int J Ind Eng Comput, V7, P19, DOI [DOI 10.5267/J.IJIEC.2015.8.004, 10.5267/j.ijiec.2015.8.004]
   Ross P.J., 1996, TAGUCHI TECHNIQUES Q
   Rossi F, 2011, J SFDS, V152, P34
   Sarhan QI, 2022, IEEE T SOFTWARE ENG, V48, P1905, DOI 10.1109/TSE.2020.3042553
   Saydemir A., 2021, P 15 TURK NAT SOFTW, P1
   Schuetz P, 2008, PHYS REV E, V77, DOI 10.1103/PhysRevE.77.046112
   Sözer H, 2019, LECT NOTES COMPUT SC, V11681, P71, DOI 10.1007/978-3-030-29983-5_5
NR 50
TC 1
Z9 1
U1 2
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2023
VL 30
IS 2
AR 19
DI 10.1007/s10515-023-00384-y
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA K5JK8
UT WOS:001016798700001
DA 2024-07-18
ER

PT J
AU Aradea
   Supriana, I
   Surendro, K
AF Aradea
   Supriana, Iping
   Surendro, Kridanto
TI ARAS: adaptation requirements for adaptive systems Handling runtime
   uncertainty of contextual requirements
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Self-adaptive systems; Control loops; Goal-based models; Contextual
   requirements; Uncertainty; Bayesian inference
ID FRAMEWORK
AB Uncertainty is a major issue for system designers in developing an adaptive system, especially when defining adaptation requirements. The design-time requirement becomes invalid at run-time in the event of unforeseen circumstances due to the effects of unpredictable contextual variability. It is because contextual requirements are run-time uncertainty and a feature of unforeseen evolution. Various efforts have been made to realize adaptation requirements for adaptive systems, and there are already many mature works. However, the approach to handling uncertainty based on contextual requirements has not received sufficient attention, especially if it is integrated with the Bayesian approach. The problem that can arise because of this uncertainty is when the system's knowledge of contextual requirements becomes incomplete or inconsistent at run-time, the system cannot determine the choice of adaptation action. This paper introduces an approach to adaptation requirements for adaptive systems through an expanded goal-based modeling language with control loop patterns and context inheritance hierarchies to define contextual requirements, and their mapping of Bayesian approach expansion to determine adaptation behaviors related to context uncertainty at run-time. The simulation results show that the proposed model has provided an alternative way of responding to changes that are influenced by uncertainty based on contextual (functional) and non-functional requirements, either caused by false assumptions or other factors related to uncertainty. The evaluation results show that the proposed model can provide design support for adaptive systems at the level of architecture adaptability index = 0.81, and can handle domain variability and requirements evolution at run-time.
C1 [Aradea] Siliwangi Univ, Fac Engn, Dept Informat, Jl Siliwangi 24 Kahuripan, Tasikmalaya 46115, Jawa Barat, Indonesia.
   [Supriana, Iping; Surendro, Kridanto] Bandung Inst Technol, Sch Elect Engn & Informat, Jl Ganesa 10,Lb Siliwangi, Bandung 40132, Jawa Barat, Indonesia.
C3 Institute Technology of Bandung
RP Aradea (corresponding author), Siliwangi Univ, Fac Engn, Dept Informat, Jl Siliwangi 24 Kahuripan, Tasikmalaya 46115, Jawa Barat, Indonesia.
EM aradea@unsil.ac.id; iping@informatika.org; endro@informatika.org
RI Surendro, Kridanto/ACI-2745-2022; SURENDRO, KRIDANTO/JFJ-1513-2023; ,
   Aradea/AAE-2084-2020
OI Surendro, Kridanto/0000-0003-1705-1202; , Aradea/0000-0003-2193-7110
FU Ministry of Research, Technology and Higher Education of the Republic of
   Indonesia [181, A/UN.58.21/LT/2017]
FX The study is supported by the Ministry of Research, Technology and
   Higher Education of the Republic of Indonesia (No.
   181.A/UN.58.21/LT/2017).
CR Abbas N., 2017, THESIS LINNAEUS U, P118
   Abbas N., 2012, P WICSAECSA, P135, DOI [10.1145/2361999.2362028, DOI 10.1145/2361999.2362028]
   Abeywickrama DB, 2017, SERV ORIENTED COMPUT, V11, P1, DOI 10.1007/s11761-016-0203-8
   Abeywickrama DB, 2012, 2012 IEEE 19TH INTERNATIONAL CONFERENCE AND WORKSHOPS ON ENGINEERING OF COMPUTER BASED SYSTEMS (ECBS), P33, DOI 10.1109/ECBS.2012.30
   Abuseta Y., 2015, Int. J. Softw. Eng. Appl, V6, P11, DOI [10.5121/ijsea.2015.6402, DOI 10.5121/IJSEA.2015.6402]
   Ali R, 2010, REQUIR ENG, V15, P439, DOI 10.1007/s00766-010-0110-z
   Andersson J, 2009, LECT NOTES COMPUT SC, V5525, P27, DOI 10.1007/978-3-642-02161-9_2
   Angelopoulos K, 2016, PROCEEDINGS OF 2016 IEEE/ACM 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P35, DOI [10.1109/SEAMS.2016.012, 10.1145/2897053.2897054]
   Aradea, 2017, ADV INTELL SYST, V549, P253, DOI 10.1007/978-3-319-51281-5_26
   Aradea, 2017, ADV INTELL SYST, V549, P233, DOI 10.1007/978-3-319-51281-5_24
   Aradea, 2014, 2014 INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY SYSTEMS AND INNOVATION (ICITSI), P62, DOI 10.1109/ICITSI.2014.7048239
   Aradea, 2015, PROS K NAS SIST INF, P384
   Aradea, 2018, TELECOMMUNICATION CO, V16, P1276, DOI [10.12928/telkomnika.v16i0.7032, DOI 10.12928/TELKOMNIKA.V16I0.7032]
   Aradea, 2018, P INT C IND ENTERPRI, DOI [10.2991/ICOIESE-18.2019.7, DOI 10.2991/ICOIESE-18.2019.7]
   Arcaini P, 2015, 2015 IEEE/ACM 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P13, DOI 10.1109/SEAMS.2015.10
   Baresi L., 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P125, DOI 10.1109/RE.2010.25
   Baresi L., 2010, WORKSH SOFTW ENG AD, P114, DOI [10.1145/1808984.1808997, DOI 10.1145/1808984.1808997]
   Bencomo Nelly, 2013, Requirements Engineering: Foundation for Software Quality. 19th International Working Conference, REFSQ 2013. Proceedings, P221, DOI 10.1007/978-3-642-37422-7_16
   Bencomo N, 2013, INT WORK REAL ARTIF, P7, DOI 10.1109/RAISE.2013.6615198
   Bencomo Nelly., 2013, Generative and Transformational Techniques in Software Engineering IV: International Summer School, GTTSE 2011, Braga, Portugal, July 3-9, 2011, P271, DOI DOI 10.1007/978-3-642-35992-7_7
   Bradel Borys J., 2009, Proceedings of the 2009 International Conference on Software Engineering Research & Practice. SERP 2009, P543
   Bresciani P, 2004, AUTON AGENT MULTI-AG, V8, P203, DOI 10.1023/B:AGNT.0000018806.20944.ef
   Brings J., 2015, CEUR WORKSHOP PROC, V1342, P171
   Cappiello C, 2006, ELECTRON NOTES THEOR, V146, P69, DOI 10.1016/j.entcs.2005.11.008
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Chung L, 2012, Non-Functional Requirements in Software Engineering, V5
   Dalpiaz F, 2013, REQUIR ENG, V18, P1, DOI 10.1007/s00766-011-0132-1
   DannyWeyns Bradley, 2013, Revised Selected and Invited Papers, P76, DOI [10.1007/978-3-642-35813-5_4, DOI 10.1007/978-3-642-35813-5_4]
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   Daun M., 2012, MODEL BASED ENG EMBE, P51, DOI [10.1007/978-3-642-34614-9_4, DOI 10.1007/978-3-642-34614-9_4]
   Dean T., 1988, AAAI 88. Seventh National Conference on Artificial Intelligence, P524
   del Aguila IM, 2016, REQUIR ENG, V21, P461, DOI 10.1007/s00766-015-0225-3
   Dey S, 2017, INFORM SOFTWARE TECH, V87, P160, DOI 10.1016/j.infsof.2017.03.004
   Esfahani N., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P646, DOI 10.1109/ASE.2011.6100147
   Fahmideh M, 2019, COMPUT IND ENG, V128, P948, DOI 10.1016/j.cie.2018.08.004
   Gause DC, 2005, IEEE SOFTWARE, V22, P13, DOI 10.1109/MS.2005.143
   Goldsby HJ, 2008, FIFTEENTH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P36, DOI 10.1109/ECBS.2008.22
   Han DS, 2016, INFORM SOFTWARE TECH, V76, P118, DOI 10.1016/j.infsof.2016.04.014
   Hirsch D, 2006, LECT NOTES COMPUT SC, V4344, P113
   Horikoshi Hisayuki., 2012, Proceedings of the 27th Annual ACM Symposium on Applied Computing, SAC '12, P1144, DOI [10.1145/2245276.2231956, DOI 10.1145/2245276.2231956]
   Horkoff J, 2019, REQUIR ENG, V24, P133, DOI 10.1007/s00766-017-0280-z
   Horkoff J, 2013, REQUIR ENG, V18, P199, DOI 10.1007/s00766-011-0143-y
   Inverardi P., 2011, 2011 2nd International Workshop on Requirements@Run.Time (RE@RunTime), P1, DOI 10.1109/ReRunTime.2011.6046241
   Jureta I, 2015, DESIGN REQUIREMENTS, V1, DOI [10.1007/978-3-319-18821-8, DOI 10.1007/978-3-319-18821-8]
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Knauss A., 2015, DISSERTATION
   Knauss A, 2016, INFORM SOFTWARE TECH, V70, P85, DOI 10.1016/j.infsof.2015.10.001
   Kramer J, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P259, DOI 10.1109/FOSE.2007.19
   Krupitzer C, 2015, PERVASIVE MOB COMPUT, V17, P184, DOI 10.1016/j.pmcj.2014.09.009
   Lapouchnian A., 2006, P 16 ANN INT C COMP
   Lapouchnian A., 2011, DISSERTATION
   Lapouchnian A., 2011, Proceedings of the 5th International i* Workshop 2011, Trento, Italy, August 28-29, 2011, V766, P96
   Lapouchnian A, 2009, LECT NOTES COMPUT SC, V5829, P115, DOI 10.1007/978-3-642-04840-1_11
   McCarthy J., 1997, FORMALIZING CONTEXT, P13
   Mendonça DF, 2016, INFORM SOFTWARE TECH, V80, P245, DOI 10.1016/j.infsof.2016.09.005
   Morandini M, 2017, REQUIR ENG, V22, P77, DOI 10.1007/s00766-015-0236-0
   Munoz-Fernandez JC., 2015, CLEI ELECT J, V18, P5, DOI [10.1109/CLEI.2014.6965158, DOI 10.1109/CLEI.2014.6965158]
   Murphy K.P., 2002, DISSERTATION
   Nakagawa H., 2012, 2012 IEEE 6th International Conference on Self-Adaptive and Self-Organizing Systems (SASO 2012), P59, DOI 10.1109/SASO.2012.17
   Nakagawa Hiroyuki., 2011, Proceedings of the 6th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, P40
   Norsys Soft. Corp, 2018, NET TUT APPL BEL NET
   Paucar LHG, 2017, INT REQUIR ENG CONF, P430, DOI 10.1109/RE.2017.12
   Paucar LHG, 2017, INT REQUIR ENG CONF, P458, DOI 10.1109/RE.2017.58
   Paz A, 2016, ELECTRON NOTES THEOR, V321, P67, DOI 10.1016/j.entcs.2016.02.005
   Perini A., 2012, 6 INT C RES CHALLENG, DOI [10.1109/RCIS.2012.6240416, DOI 10.1109/RCIS.2012.6240416]
   Pimentel J., 2011, P 14 IBERO AM C SOFT, P115
   Pimentel J, 2016, PROCEEDINGS 2016 10TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P83, DOI [10.1109/QUATIC.2016.023, 10.1109/QUATIC.2016.52]
   Qureshi Nauman A., 2012, Requirements Engineering: Foundation for Software Quality. Proceedings 18th International Working Conference, REFSQ 2012, P263, DOI 10.1007/978-3-642-28714-5_24
   Qureshi N.A., 2011, DISSERTATION
   Ramirez Andres J., 2012, Search Based Software Engineering. Proceedings of the 4th International Symposium (SSBSE 2012), P198, DOI 10.1007/978-3-642-33119-0_15
   Ramirez Andres J., 2012, 2012 7th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, P99, DOI 10.1109/SEAMS.2012.6224396
   Russell Stuart J., 2010, Artificial Intelligence: A Modern Approach, V3rd
   Serrano M., 2011, CEUR P 5 INT I ISTAR
   Souza VES, 2013, COMPUT SCI-RES DEV, V28, P311, DOI 10.1007/s00450-012-0232-2
   Supriana I., 2017, INTERNET THINGS FDN, P293, DOI [10.1201/9781315156026-17, DOI 10.1201/9781315156026-17]
   Supriana I., 2015, 2 INT C ADV INFORMAT, V2, P157, DOI [10.1109/ICAICTA.2015.7335356, DOI 10.1109/ICAICTA.2015.7335356]
   Surendro K, 2016, J INF COMMUN TECHNOL, V15, P1
   Tamura G, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P153, DOI 10.1109/SEAMS.2013.6595502
   van Lamsweerde A., 1991, P A SPRING S SERIES, P59
   Wang TS, 2012, PHYSCS PROC, V24, P2010, DOI 10.1016/j.phpro.2012.02.295
   Welsh K., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P560, DOI 10.1109/ASE.2011.6100125
   Whittle J, 2010, REQUIR ENG, V15, P177, DOI 10.1007/s00766-010-0101-0
   Wohlin C., 2012, Experimentation in Software Engineering
   Yu E., 2011, SOCIAL MODELING REQU, P3
   Yu u.E., 1995, DISSERTATION
   Zavala E, 2018, EXPERT SYST APPL, V98, P166, DOI 10.1016/j.eswa.2018.01.009
   Zhuo-Qun Y., 2012, P 4 AS PAC S INT
NR 87
TC 0
Z9 0
U1 1
U2 2
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2023
VL 30
IS 1
AR 2
DI 10.1007/s10515-022-00369-3
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6O5MQ
UT WOS:000890286100001
DA 2024-07-18
ER

PT J
AU Mehrabi, M
   Zamani, B
   Hamou-Lhadj, A
AF Mehrabi, Maryam
   Zamani, Bahman
   Hamou-Lhadj, Abdelwahab
TI HealMA: a model-driven framework for automatic generation of IoT-based
   Android health monitoring applications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Health monitoring; Android; IoT; Model-driven engineering
ID INTERNET; SYSTEM; THINGS; CARE
AB The development of IoT-based Android health monitoring mobile applications (apps) using traditional software development methods is a challenging task. Developers need to be familiar with various programming languages to manage the heterogeneity of hardware and software systems and to support different communication technologies. To address these problems, in this paper, we first analyze the domain of health monitoring mobile applications and then propose a framework based on model-driven engineering that accelerates the development of such systems. The proposed framework, called HealMA, includes a domain-specific modeling language, a graphical modeling editor, several validation rules, and a set of model-to-code transformations, all packed as an Eclipse plugin. We evaluated the framework to assess its applicability in generating various mobile health applications, as well as its impact on software productivity. To this end, four different health monitoring applications have been automatically generated. Then, we evaluated the productivity of software developers by comparing the time and effort it takes to use HealMA compared to a code-centric process. As part of the evaluation, we also evaluated the usability of HealMA-generated apps by conducting a user study. The results show that HealMA is both applicable and beneficial for automatic generation of usable IoT-based Android health monitoring apps.
C1 [Mehrabi, Maryam; Zamani, Bahman] Univ Isfahan, Fac Comp Engn, MDSE Res Grp, Esfahan, Iran.
   [Hamou-Lhadj, Abdelwahab] Concordia Univ, Dept Elect & Comp Engn, Montreal, PQ, Canada.
C3 University of Isfahan; Concordia University - Canada
RP Zamani, B (corresponding author), Univ Isfahan, Fac Comp Engn, MDSE Res Grp, Esfahan, Iran.
EM maryam.mrb94@gmail.com; zamani@eng.ui.ac.ir;
   wahab.hamou-lhadj@concordia.ca
OI Hamou-Lhadj, Abdelwahab/0000-0002-3319-5006; Zamani,
   Bahman/0000-0001-6424-1442
CR Ajami H, 2018, ELECTRONICS-SWITZ, V7, DOI 10.3390/electronics7120371
   Al-khafajiy M, 2019, MULTIMED TOOLS APPL, V78, P24681, DOI 10.1007/s11042-018-7134-7
   [Anonymous], 2021, STATCOUNTER OFFICIAL
   Banos Oresti, 2014, Ambient Assisted Living and Daily Activities. 6th International Work-Conference, IWAAL 2014. Proceedings: LNCS 8868, P91, DOI 10.1007/978-3-319-13105-4_14
   Basili1 Victor R, 1994, Encyclopedia of software engineering, V1994, P528
   Bauer M., 2013, IOT REFERENCE MODEL, p113 162, DOI DOI 10.1007/978-3-642-40403-0_7
   Bermudez-Edo M, 2016, 2016 INT IEEE CONFERENCES ON UBIQUITOUS INTELLIGENCE & COMPUTING, ADVANCED & TRUSTED COMPUTING, SCALABLE COMPUTING AND COMMUNICATIONS, CLOUD AND BIG DATA COMPUTING, INTERNET OF PEOPLE, AND SMART WORLD CONGRESS (UIC/ATC/SCALCOM/CBDCOM/IOP/SMARTWORLD), P90, DOI [10.1109/UIC-ATC-ScalCom-CBDCom-IoP-SmartWorld.2016.8, 10.1109/UIC-ATC-ScalCom-CBDCom-IoP-SmartWorld.2016.0035]
   Brambilla Marco, 2014, Mobile Web Information Systems. 11th International Conference (MobiWIS 2014). Proceedings: LNCS 8640, P176, DOI 10.1007/978-3-319-10359-4_15
   Brambilla M., 2017, Model-Driven Software Engineering in Practice, Second Edition, ser. Synthesis Lectures on Software Engineering, VSecond
   CDC Official Website, 2020, FACTS HYP
   CDC Official Website, 2021, WHAT IS DIAB
   Chellouche S.A, 2013, 2013 1 INT S FUTURE, P1
   de Miguel-Díez J, 2019, PLOS ONE, V14, DOI 10.1371/journal.pone.0217143
   Dhanvijay MM, 2019, COMPUT NETW, V153, P113, DOI 10.1016/j.comnet.2019.03.006
   Eclipse, 2021, ECLIPSE OFFICIAL WEB
   Einarsson AF, 2017, 2017 IEEE 2ND INTERNATIONAL CONGRESS ON INTERNET OF THINGS (IEEE ICIOT), P82, DOI 10.1109/IEEE.ICIOT.2017.35
   Gharaat M, 2021, AUTOMAT SOFTW ENG, V28, DOI 10.1007/s10515-020-00278-3
   Gómez J, 2016, PROCEDIA COMPUT SCI, V83, P90, DOI 10.1016/j.procs.2016.04.103
   Grand View Research Official Website, 2021, MHEALTH APPS MARK SI
   Harris RE., 2019, Epidemiology of Chronic Disease: Global Perspectives
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hussain A, 2013, J INF COMMUN TECHNOL, V12, P55
   Hussein M., 2017, MODELS, P17
   Inupakutika D, 2020, J BIOMED INFORM, V105, DOI 10.1016/j.jbi.2020.103420
   Islam SMR, 2015, IEEE ACCESS, V3, P678, DOI 10.1109/ACCESS.2015.2437951
   ISO Official Website, 2020, US DEF
   Kang Kyo C, 1990, Technical Report
   Kung D., 2013, Object-oriented Software Engineering: An Agile Unified Methodology
   Lou Tian., 2016, A Comparison of Android Native App Architecture-MVC, MVP and MVVM
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   nih, 2021, CDC OFFICIAL WEBSITE
   Núñez M, 2020, J SYST SOFTWARE, V161, DOI 10.1016/j.jss.2019.110489
   Panahandeh M, 2021, SOFTW SYST MODEL, V20, P1491, DOI 10.1007/s10270-020-00853-y
   Patel P., 2011, P 8 MIDDL DOCT S, P1
   Pathinarupothi RK, 2019, IEEE INTERNET THINGS, V6, P2449, DOI 10.1109/JIOT.2018.2870068
   Qi J, 2017, PERVASIVE MOB COMPUT, V41, P132, DOI 10.1016/j.pmcj.2017.06.018
   Rechtman E, 2020, SCI REP-UK, V10, DOI 10.1038/s41598-020-78392-1
   Rhayem A, 2017, PROCEDIA COMPUT SCI, V112, P683, DOI 10.1016/j.procs.2017.08.127
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Statista Official Website, 2020, SMARTPH US WORLDW
   Sundaravadivel P, 2018, IEEE CONSUM ELECTR M, V7, P19, DOI 10.1109/MCE.2017.2755378
   Swaroop KN, 2019, INTERNET THINGS-NETH, V5, P116, DOI 10.1016/j.iot.2019.01.004
   Tomasic I, 2018, MED BIOL ENG COMPUT, V56, P547, DOI 10.1007/s11517-018-1798-z
   Usman M, 2017, J SYST SOFTWARE, V123, P1, DOI 10.1016/j.jss.2016.09.049
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Vaupel S, 2018, SOFTW SYST MODEL, V17, P35, DOI 10.1007/s10270-016-0559-4
   Vogelmeier CF, 2017, AM J RESP CRIT CARE, V195, P557, DOI 10.1164/rccm.201701-0218PP
   Wan J, 2018, EURASIP J WIREL COMM, DOI 10.1186/s13638-018-1308-x
   WHO, 2020, WHO OFFICIAL WEBSITE
   World Health Organization Official Website, 2020, BURD COPD
   World Health Organization Official Website, 2020, INT CHRON DIS PREV C
NR 51
TC 3
Z9 3
U1 3
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 56
DI 10.1007/s10515-022-00363-9
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4X1BA
UT WOS:000860584300001
PM 36185751
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Tambon, F
   Laberge, G
   An, L
   Nikanjam, A
   Mindom, PSN
   Pequignot, Y
   Khomh, F
   Antoniol, G
   Merlo, E
   Laviolette, F
AF Tambon, Florian
   Laberge, Gabriel
   An, Le
   Nikanjam, Amin
   Mindom, Paulina Stevia Nouwou
   Pequignot, Yann
   Khomh, Foutse
   Antoniol, Giulio
   Merlo, Ettore
   Laviolette, Francois
TI How to certify machine learning based safety-critical systems? A
   systematic literature review
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Review
DE Machine learning; Certification; Safety-critical; Systematic literature
   review
ID CRITICAL AVIONIC SYSTEMS; ADVERSARIAL EXAMPLES; SOFTWARE-DEVELOPMENT;
   CERTIFICATION; FRAMEWORK; UNCERTAINTY; CONTROLLERS; ROBUSTNESS;
   VALIDATION
AB Context Machine Learning (ML) has been at the heart of many innovations over the past years. However, including it in so-called "safety-critical" systems such as automotive or aeronautic has proven to be very challenging, since the shift in paradigm that ML brings completely changes traditional certification approaches. Objective This paper aims to elucidate challenges related to the certification of ML-based safety-critical systems, as well as the solutions that are proposed in the literature to tackle them, answering the question "How to Certify Machine Learning Based Safety-critical Systems?". Method We conduct a Systematic Literature Review (SLR) of research papers published between 2015 and 2020, covering topics related to the certification of ML systems. In total, we identified 217 papers covering topics considered to be the main pillars of ML certification: Robustness, Uncertainty, Explainability, Verification, Safe Reinforcement Learning, and Direct Certification. We analyzed the main trends and problems of each sub-field and provided summaries of the papers extracted. Results The SLR results highlighted the enthusiasm of the community for this subject, as well as the lack of diversity in terms of datasets and type of ML models. It also emphasized the need to further develop connections between academia and industries to deepen the domain study. Finally, it also illustrated the necessity to build connections between the above mentioned main pillars that are for now mainly studied separately. Conclusion We highlighted current efforts deployed to enable the certification of ML based software systems, and discuss some future research directions.
C1 [Tambon, Florian; Laberge, Gabriel; An, Le; Nikanjam, Amin; Mindom, Paulina Stevia Nouwou; Khomh, Foutse; Antoniol, Giulio; Merlo, Ettore] Polytech Montreal, Montreal, PQ, Canada.
   [Pequignot, Yann; Laviolette, Francois] Laval Univ, Quebec City, PQ, Canada.
C3 Universite de Montreal; Polytechnique Montreal; Laval University
RP Tambon, F (corresponding author), Polytech Montreal, Montreal, PQ, Canada.
EM florian-2.tambon@polymtl.ca; gabriel.laberge@polymtl.ca;
   le.an@polymtl.ca; amin.nikanjam@polymtl.ca;
   paulina-stevia.nouwou-mindom@polymtl.ca; yann.pequignot@iid.ulaval.ca;
   foutse.khomh@polymtl.ca; giuliano.antoniol@polymtl.ca;
   ettore.merlo@polymtl.ca; francois.laviolette@ift.ulaval.ca
RI Tambon, Florian/HNS-4168-2023; Pequignot, Yann B/O-4445-2018; Nikanjam,
   Amin/AAT-7832-2020
OI Tambon, Florian/0000-0001-5593-9400; Pequignot, Yann
   B/0000-0003-1691-1020; Nikanjam, Amin/0000-0002-0440-6839
CR Abate A, 2020, WORKSH ART INT FORM
   Abreu S., 2019, arXiv preprint arXiv, p1908.10714
   Agostinelli F, 2018, LECT NOTES ARTIF INT, V11100, P298, DOI 10.1007/978-3-319-99492-5_13
   Alagöz I, 2017, IEEE INT CONF SOFTW, P114, DOI 10.1109/ICST.2017.18
   Amarasinghe Kasun, 2019, 2019 IEEE INT C FUZZ, P1
   Ameyaw D. A., 2019, ANN C PHM SOC, V11
   Amini A, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P2357
   Amit G., 2020, ARXIV PREPRINT ARXIV
   Anderson BG, 2020, IEEE DECIS CONTR P, P2190, DOI [10.1109/CDC42340.2020.9303750, 10.1109/cdc42340.2020.9303750]
   [Anonymous], 2018, ISO 26262
   [Anonymous], 2015, MASE MODELS
   Aravantinos V., 2019, ARXIV PREPRINT ARXIV
   Arcaini P, 2020, 2020 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST), P7, DOI 10.1109/AITEST49225.2020.00009
   Arnab A, 2018, PROC CVPR IEEE, P888, DOI 10.1109/CVPR.2018.00099
   Aslansefat K., 2020, ARXIV PREPRINT ARXIV
   Ayers Edward W., 2020, NASA Formal Methods. 12th International Symposium, NFM 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12229), P63, DOI 10.1007/978-3-030-55754-6_4
   Bacci E, 2020, LECT NOTES COMPUT SC, V12288, P231, DOI 10.1007/978-3-030-57628-8_14
   Bär A, 2019, IEEE COMPUT SOC CONF, P1380, DOI 10.1109/CVPRW.2019.00178
   Baheri A, 2020, IEEE INT VEH SYM, P1550, DOI 10.1109/IV47402.2020.9304744
   Bakhti Y, 2019, IEEE ACCESS, V7, P160397, DOI 10.1109/ACCESS.2019.2951526
   Baluta T, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1249, DOI 10.1145/3319535.3354245
   Bar A., 2020, P IEEECVF C COMPUTER, P332
   Arrieta AB, 2020, INFORM FUSION, V58, P82, DOI 10.1016/j.inffus.2019.12.012
   Ben Braiek H, 2019, PROC IEEE INT CONF S, P454, DOI 10.1109/ICSME.2019.00078
   Berkenkamp F., 2017, ADV NEURAL INFORM PR, DOI DOI 10.5555/3294771.3294858
   Bernhard J, 2018, IEEE INT C INTELL TR, P3175, DOI 10.1109/ITSC.2018.8569436
   Biondi A, 2020, IEEE EMBED SYST LETT, V12, P78, DOI 10.1109/LES.2019.2953253
   Bragg J, 2018, LECT NOTES COMPUT SC, V11094, P418, DOI 10.1007/978-3-319-99229-7_35
   Bunel R, 2020, J MACH LEARN RES, V21
   Burton S, 2019, LECT NOTES COMPUT SC, V11699, P365, DOI 10.1007/978-3-030-26250-1_30
   Cardelli L, 2019, AAAI CONF ARTIF INTE, P7759
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Castelvecchi D, 2016, NATURE, V537, P20, DOI 10.1038/538020a
   Chakrabarty A, 2019, 2019 18TH EUROPEAN CONTROL CONFERENCE (ECC), P524, DOI [10.23919/ECC.2019.8795815, 10.23919/ecc.2019.8795815]
   Chen TY., 2020, ARXIV201107242
   Chen Y., 2019, ABS190202586 CORR
   Chen ZT, 2020, PROC INT SYMP SOFTW, P426, DOI 10.1109/ISSRE5003.2020.00047
   Cheng C.H., 2020, ARXIV PREPRINT ARXIV
   Cheng C.H., 2019, ARXIV PREPRINT ARXIV
   Cheng CH, 2019, DES AUT TEST EUROPE, P300, DOI [10.23919/DATE.2019.8714971, 10.23919/date.2019.8714971]
   Cheng CH, 2017, LECT NOTES COMPUT SC, V10482, P251, DOI 10.1007/978-3-319-68167-2_18
   Cheng R, 2019, AAAI CONF ARTIF INTE, P3387
   Cofer D, 2020, IEEEAAIA DIGIT AVION, DOI 10.1109/dasc50938.2020.9256581
   Colangelo F, 2019, EUR W VIS INF PROCES, P193, DOI [10.1109/euvip47703.2019.8946254, 10.1109/EUVIP47703.2019.8946254]
   Cosentino J., 2019, ARXIV PREPRINT ARXIV
   Croce F., 2019, ARXIV PREPRINT ARXIV
   Croce F, 2019, PR MACH LEARN RES, V89
   Dai QY, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST), P71, DOI 10.1109/AITest.2019.000-5
   Daniels Z.A., 2018, IJCAI WORKSH EXPL AR
   Dapello J., 2020, ADV NEURAL INFORM PR, V33, P13073
   Dean S., 2020, Learning for Dynamics and Control, V120, P350
   Delseny H., 2021, ARXIV PREPRINT ARXIV
   Demir S., 2019, ARXIV PREPRINT ARXIV, V1911, P10621
   Deshmukh JV, 2019, ICCAD-IEEE ACM INT
   Dey S., 2020, AISAFETY IJCAI
   Dinneen, 2019, ARXIV PREPRINT ARXIV
   Dreossi T., 2017, ARXIV PREPRINT ARXIV
   Duddu V., 2019, ARXIV PREPRINT ARXIV
   Dutta Souradeep, 2017, arXiv preprint arXiv: 1709.09130
   Dybå T, 2008, INFORM SOFTWARE TECH, V50, P833, DOI 10.1016/j.infsof.2008.01.006
   Eniser HF, 2019, LECT NOTES COMPUT SC, V11424, P171, DOI 10.1007/978-3-030-16722-6_10
   Everett M, 2022, IEEE T NEUR NET LEAR, V33, P4184, DOI 10.1109/TNNLS.2021.3056046
   Fan DD, 2020, IEEE INT CONF ROBOT, P4093, DOI [10.1109/ICRA40945.2020.9196709, 10.1109/icra40945.2020.9196709]
   Feng D., 2019, ARXIV190912358
   Fisac JF, 2019, IEEE T AUTOMAT CONTR, V64, P2737, DOI 10.1109/TAC.2018.2876389
   François-Lavet V, 2018, FOUND TRENDS MACH LE, V11, P219, DOI 10.1561/2200000071
   Fremont DJ, 2020, LECT NOTES COMPUT SC, V12224, P122, DOI 10.1007/978-3-030-53288-8_6
   Fujino Hirotaka, 2019, INCOSE International Symposium, V29, P152, DOI 10.1002/j.2334-5837.2019.00676.x
   Fulton N, 2019, LECT NOTES COMPUT SC, V11427, P413, DOI 10.1007/978-3-030-17462-0_28
   Gal Y, 2016, PR MACH LEARN RES, V48
   Gambi A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P318, DOI 10.1145/3293882.3330566
   Gandhi D, 2017, IEEE INT C INT ROBOT, P3948, DOI 10.1109/IROS.2017.8206247
   Gauerhof Lydia, 2020, Computer Safety, Reliability, and Security. 39th International Conference, SAFECOMP 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12234), P197, DOI 10.1007/978-3-030-54549-9_13
   Gauerhof L, 2018, LECT NOTES COMPUT SC, V11093, P45, DOI 10.1007/978-3-319-99130-6_4
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Ghosh S, 2018, I C DEPENDABLE SYST, P194, DOI 10.1109/DSN-W.2018.00064
   Ghosh S, 2018, IEEE INT CONF ROBOT, P7306
   Giladi N., 2019, ARXIV PREPRINT ARXIV
   Gladisch C, 2020, IEEE COMPUT SOC CONF, P1314, DOI 10.1109/CVPRW50498.2020.00170
   Göpfert JP, 2018, LECT NOTES COMPUT SC, V11139, P456, DOI 10.1007/978-3-030-01418-6_45
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Goodfellow I. J., 2015, 3 INT C LEARNING REP
   Goodman B, 2017, AI MAG, V38, P50, DOI 10.1609/aimag.v38i3.2741
   Gopinath D., 2019, ARXIV PREPRINT ARXIV
   Gopinath D, 2018, LECT NOTES COMPUT SC, V11138, P3, DOI 10.1007/978-3-030-01090-4_1
   Gros S, 2020, IFAC PAPERSONLINE, V53, P8076, DOI 10.1016/j.ifacol.2020.12.2276
   Gros T.P., INT C FORM TECHN DIS, P96
   Gu XZ, 2019, ACM IEEE INT CONF CY, P249, DOI 10.1145/3302509.3311038
   Gualo F, 2021, J SYST SOFTWARE, V176, DOI 10.1016/j.jss.2021.110938
   Guidotti D, 2019, LECT NOTES COMPUT SC, V11494, P364, DOI 10.1007/978-3-030-19212-9_24
   Guidotti R, 2019, IEEE INTELL SYST, V34, P14, DOI 10.1109/MIS.2019.2957223
   Guo JM, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P739, DOI 10.1145/3236024.3264835
   Guo WB, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P364, DOI 10.1145/3243734.3243792
   Hart P, 2019, IEEE INT C INTELL TR, P3176, DOI 10.1109/ITSC.2019.8917002
   Hein M, 2019, PROC CVPR IEEE, P41, DOI 10.1109/CVPR.2019.00013
   Hein M, 2017, ADV NEUR IN, V30
   Heinzmann L., 2019, AISAFETY IJCAI
   Hendrycks Dan, 2017, INT C LEARNING REPRE
   Hendrycks Dan, 2021, ARXIV210913916
   Hendrycks Dan, 2021, ICCV
   Hendrycks Dan, 2019, ARXIV190312261
   Henne M., 2020, SafeAI@ AAAI, P83
   Henriksson J, 2019, EUROMICRO CONF PROC, P113, DOI 10.1109/SEAA.2019.00026
   Henriksson J, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST), P27, DOI 10.1109/AITest.2019.00-12
   Nguyen HH, 2020, P AMER CONTR CONF, P3886, DOI [10.23919/acc45564.2020.9147564, 10.23919/ACC45564.2020.9147564]
   Huang XW, 2020, COMPUT SCI REV, V37, DOI 10.1016/j.cosrev.2020.100270
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Ignatiev A, 2018, LECT NOTES ARTIF INT, V10900, P627, DOI 10.1007/978-3-319-94205-6_41
   Inouye D.I., 2019, ARXIV PREPRINT ARXIV
   Isele D, 2018, IEEE INT C INT ROBOT, P6162, DOI 10.1109/IROS.2018.8593420
   ISO, 2019, Standard ISO/PAS 21448:2019(E)
   Jain D, 2020, ACM INT CONF PR SER, P143, DOI 10.1145/3371158.3371383
   Jeddi A, 2020, PROC CVPR IEEE, P1238, DOI 10.1109/CVPR42600.2020.00132
   Jin W, 2020, KDD '20: PROCEEDINGS OF THE 26TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P66, DOI 10.1145/3394486.3403049
   Julian K.D., 2019, 2019 IEEE/AIAA 38th Digital Avionics Systems Conference (DASC), P1
   Julian KD, 2020, IEEE INT C INTELL TR, DOI 10.1109/itsc45102.2020.9294549
   Kandel A., 2020, ARXIV PREPRINT ARXIV
   Kaprocki N, 2019, IEEE ICCE, P257, DOI [10.1109/icce-berlin47944.2019.8966168, 10.1109/ICCE-Berlin47944.2019.8966168]
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kendall A, 2017, 31 ANN C NEURAL INFO, V30
   Keuntaek Lee, 2019, 2019 18th IEEE International Conference On Machine Learning And Applications (ICMLA), P831, DOI 10.1109/ICMLA.2019.00145
   Kitchenham B.A., 2004, TRSE0401 KEEL U COMP
   Kitchenham B, 2010, INFORM SOFTWARE TECH, V52, P792, DOI 10.1016/j.infsof.2010.03.006
   Kläs M, 2019, LECT NOTES COMPUT SC, V11699, P358, DOI 10.1007/978-3-030-26250-1_29
   Kochenderfer M.J, 2019, ARXIV PREPRINT ARXIV
   Kornecki A, 2008, 2008 INTERNATIONAL MULTICONFERENCE ON COMPUTER SCIENCE AND INFORMATION TECHNOLOGY (IMCSIT), VOLS 1 AND 2, P618
   Kuppers F., 2020, P IEEE CVF C COMP VI, P326
   Kuutti S, 2019, LECT NOTES COMPUT SC, V11872, P150, DOI 10.1007/978-3-030-33617-2_17
   Kuwajima H, 2019, PROG ARTIF INTELL, V8, P273, DOI 10.1007/s13748-019-00179-x
   Laidlaw C, 2019, ARXIV PREPRINT ARXIV
   Le H., 2019, PR MACH LEARN RES, P3703
   Le MT, 2018, IEEE INT C INTELL TR, P3873, DOI 10.1109/ITSC.2018.8569637
   Lecuyer M., 2018, CERTIFIED ROBUSTNESS
   Lee K, 2019, PR MACH LEARN RES, V97
   Lee K, 2018, ADV NEUR IN, V31
   Li JL, 2019, LECT NOTES COMPUT SC, V11822, P296, DOI 10.1007/978-3-030-32304-2_15
   Li S, 2018, ARXIV PREPRINT ARXIV
   Li Y, 2019, 35TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSA), P138, DOI 10.1145/3359789.3359831
   Liang S., 2020, ARXIV PREPRINT ARXIV
   Lillicrap, 2015, ARXIV150902971, P1
   Lin W, 2019, PROC CVPR IEEE, P11410, DOI 10.1109/CVPR.2019.01168
   Liu J, 2020, ARXIV PREPRINT ARXIV
   Liu L, 2021, MOBILE NETW APPL, V26, P1145, DOI 10.1007/s11036-020-01624-1
   Liu MC, 2018, IEEE CONF VIS ANAL, P60, DOI 10.1109/VAST.2018.8802509
   Loquercio A, 2020, IEEE ROBOT AUTOM LET, V5, P3153, DOI 10.1109/LRA.2020.2974682
   Lust J., 2020, ARXIV PREPRINT ARXIV
   Lütjens B, 2019, IEEE INT CONF ROBOT, P8662, DOI [10.1109/icra.2019.8793611, 10.1109/ICRA.2019.8793611]
   Lyu ZY, 2020, AAAI CONF ARTIF INTE, V34, P5037
   Ma L, 2018, IEEE INT CONF AUTOM, P120, DOI 10.1145/3238147.3238202
   Ma L, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P614, DOI [10.1109/saner.2019.8668044, 10.1109/SANER.2019.8668044]
   Machida F, 2019, I C DEPENDABLE SYST, P48, DOI 10.1109/DSN-W.2019.00017
   Madry A., 2018, ARXIV
   Mani N, 2019, IEEE GLOB COMM CONF, DOI 10.1109/globecom38437.2019.9013408
   Mani Senthil, 2019, ARXIV191107309
   Marvi Z, 2020, P AMER CONTR CONF, P2176, DOI [10.23919/ACC45564.2020.9147584, 10.23919/acc45564.2020.9147584]
   Meinke Alexander, 2019, ARXIV190912180
   Meyes R., 2020, ARXIV PREPRINT ARXIV
   Michelmore R, 2018, ARXIV PREPRINT ARXIV
   Mirman M, 2018, PR MACH LEARN RES, V80
   Mnih V, 2015, NATURE, V518, P529, DOI 10.1038/nature14236
   Moravcík M, 2017, SCIENCE, V356, P508, DOI 10.1126/science.aam6960
   Mottok J., 2019, ARCS WORKSH 2019 32, P1
   Mueller S, 2015, IEEE INT C INTELL TR, P2659, DOI 10.1109/ITSC.2015.427
   Naseer M, 2020, DES AUT TEST EUROPE, P666, DOI 10.23919/DATE48585.2020.9116247
   Nesterov, 2018, LECT CONVEX OPTIMIZA, V137
   Nowak T, 2019, IEEE INT VEH SYM, P226, DOI 10.1109/IVS.2019.8814134
   OBrien Molly, 2020, P ENG DEP SEC MACH L, P126, DOI DOI 10.1007/978-3-030-62144-5_10
   Pan R, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1238, DOI 10.1145/3338906.3342502
   Park C, 2018, ARXIV PREPRINT ARXIV
   Pauli P, 2022, IEEE CONTR SYST LETT, V6, P121, DOI 10.1109/LCSYS.2021.3050444
   Pedreschi D., 2018, ARXIV PREPRINT ARXIV
   Pedroza G., 2019, P INT C SOFTW ENG KN, P391, DOI DOI 10.18293/SEKE2019-094
   Pei K., 2017, ARXIV171201785
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Peng WW, 2020, IEEE T IND ELECTRON, V67, P2283, DOI 10.1109/TIE.2019.2907440
   Postels J, 2019, IEEE I CONF COMP VIS, P2931, DOI 10.1109/ICCV.2019.00302
   Rahimi M, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P241, DOI 10.1109/REW.2019.00049
   Rajabli N, 2021, IEEE ACCESS, V9, P4797, DOI 10.1109/ACCESS.2020.3048047
   Rakin A.S., 2018, ARXIV PREPRINT ARXIV
   Ramanagopal MS, 2018, IEEE ROBOT AUTOM LET, V3, P3860, DOI 10.1109/LRA.2018.2857402
   Reeb David, 2018, P 32 INT C NEUR INF, P3341
   Remeli V, 2019, INT SYMP COMP INTELL, P175, DOI [10.1109/cinti-macro49179.2019.9105190, 10.1109/CINTI-MACRo49179.2019.9105190]
   Ren H, 2019, IEEEAAIA DIGIT AVION, DOI 10.1109/dasc43569.2019.9081635
   Ren J, 2019, 33 C NEURAL INFORM P, V32
   Ren K, 2020, ENGINEERING-PRC, V6, P346, DOI 10.1016/j.eng.2019.12.012
   Revay M, 2021, IEEE CONTR SYST LETT, V5, P1363, DOI 10.1109/LCSYS.2020.3038221
   Ribeiro MT, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1135, DOI 10.1145/2939672.2939778
   Richards S. M., 2018, Proc. Conf. Robot Learn., V87, P466
   Rodríguez-Dapena P, 1999, IEEE SOFTWARE, V16, P31, DOI 10.1109/52.776946
   Roh Y, 2021, IEEE T KNOWL DATA EN, V33, P1328, DOI 10.1109/TKDE.2019.2946162
   Ruan WJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P5944
   Rubies-Royo V., 2019, ARXIV PREPRINT ARXIV
   Rudolph A, 2018, 9 EUR C EMB REAL TIM
   Rusak E., 2020, CORR
   Salay R., 2018, ARXIV PREPRINT ARXIV
   Salay R, 2019, PROC INT SYMP SOFTW, P24, DOI 10.1109/ISSRE.2019.00013
   Scheel O., 2020, ARXIV PREPRINT ARXIV
   Sehwag V, 2020, Advances in Neural Information Processing Systems (NeurIPS)
   Sehwag Vikash, 2019, P 12 ACM WORKSH ART, DOI [10.1145/3338501.3357372, DOI 10.1145/3338501.3357372.URL]
   Sekhon J, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2019), P85, DOI 10.1109/ICSE-NIER.2019.00030
   Sena L.H., 2019, 2019 9 BRAZ S COMP S, P1
   Sheikholeslami Fatemeh, 2020, INF THEOR APPL WKS, P1, DOI DOI 10.1109/ita50056.2020.9244964
   Shwartz-Ziv R., 2017, ARXIV PREPRINT ARXIV
   Singh G., 2018, INT C LEARN REPR
   Sinha A., 2017, ARXIV171010571
   Smith M.T., 2019, ARXIV PREPRINT ARXIV
   Sohn J., 2019, arXiv
   Stanforth R., 2018, ABS181109300 CORR
   Steinhardt J, 2017, ADV NEUR IN, V30
   Sun YC, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P111, DOI 10.1109/ICSE-Companion.2019.00051
   Sun YC, 2019, ACM T EMBED COMPUT S, V18, DOI 10.1145/3358233
   Syriani E, 2018, COMPUT LANG SYST STR, V52, P43, DOI 10.1016/j.cl.2017.11.003
   Tian YC, 2020, PROC INT CONF SOFTW, P1122, DOI 10.1145/3377811.3380400
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Törnblom J, 2020, SCI COMPUT PROGRAM, V194, DOI 10.1016/j.scico.2020.102450
   Toubeh M., 2019, ARXIV PREPRINT ARXIV
   Tran HD, 2020, LECT NOTES COMPUT SC, V12224, P3, DOI 10.1007/978-3-030-53288-8_1
   Tran HD, 2019, FME WORKS FORM, P31, DOI 10.1109/FormaliSE.2019.00012
   Tuncali CE, 2018, IEEE INT VEH SYM, P1555
   Turchetta M., 2016, ADV NEURAL INFORM PR, P4312
   Udeshi S, 2020, IEEE INT CONF SOFTW, P448, DOI 10.1109/ICST46399.2020.00060
   Uesato J., 2018, ARXIV PREPRINT ARXIV
   Varghese S., 2020, P IEEECVF C COMPUTER, P336
   Vidot G., 2021, ARXIV210607221
   Vijaykeerthy D., 2018, ARXIV180201448
   Wabersich K.P., 2020, ARXIV PREPRINT ARXIV
   Wabersich K.P, 2020, Learning for Dynamics and Control, P455
   Wabersich KP., 2021, IEEE T AUTOMAT CONTR, V2021, P10
   Wagner J, 2019, PROC CVPR IEEE, P9089, DOI 10.1109/CVPR.2019.00931
   Wang JP, 2019, IEEE T VIS COMPUT GR, V25, P2168, DOI 10.1109/TVCG.2019.2903943
   Wang SQ, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1599
   Wang SQ, 2018, ADV NEUR IN, V31
   Wang T., 2018, ARXIV
   Wang WB, 2019, IEEE ACCESS, V7, P22328, DOI 10.1109/ACCESS.2019.2896108
   Wang YX, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3792
   Wang YZ, 2018, PR MACH LEARN RES, V80
   WATKINS CJCH, 1992, MACH LEARN, V8, P279, DOI 10.1007/BF00992698
   Wen JF, 2012, INFORM SOFTWARE TECH, V54, P41, DOI 10.1016/j.infsof.2011.09.002
   Wen M., 2020, IEEE T AUTOMAT CONTR, V66, P7
   WEYUKER EJ, 1982, COMPUT J, V25, P465, DOI 10.1093/comjnl/25.4.465
   Wicker M, 2018, LECT NOTES COMPUT SC, V10805, P408, DOI 10.1007/978-3-319-89960-2_22
   Wolschke C, 2017, IEEE INT SYMP SOFTW, P294, DOI 10.1109/ISSREW.2017.46
   Wu M, 2020, THEOR COMPUT SCI, V807, P298, DOI 10.1016/j.tcs.2019.05.046
   Xiang W., 2019, Safe, autonomous and intelligent vehicles, P123
   Xie XF, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P146, DOI 10.1145/3293882.3330579
   Xu H, 2019, I C DEPENDABLE SYST, P44, DOI 10.1109/DSN-W.2019.00016
   Yaghoubi S, 2019, PROCEEDINGS OF THE 2019 22ND ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (HSCC '19), P179, DOI 10.1145/3302504.3311814
   Yan M, 2020, IEEE ACCESS, V8, P3055, DOI 10.1109/ACCESS.2019.2962695
   Yan YS, 2019, IEEE ACCESS, V7, P179104, DOI 10.1109/ACCESS.2019.2958406
   Yang Feng, 2020, ISSTA '20: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, P177, DOI 10.1145/3395363.3397357
   Yang YL, 2020, INT J ROBUST NONLIN, V30, P3706, DOI 10.1002/rnc.4962
   Ye S., 2019, ARXIV190309769
   Youn WK, 2015, IEEE AERO EL SYS MAG, V30, P4, DOI 10.1109/MAES.2014.140109
   Youn W, 2014, COMPUT STAND INTER, V36, P889, DOI 10.1016/j.csi.2014.02.005
   Zhan W, 2017, IEEE IND ELEC, P4588, DOI 10.1109/IECON.2017.8216790
   Zhang J, 2019, ARXIV PREPRINT ARXIV
   Zhang Jesse, 2020, P 37 INT C MACHINE L, P11055
   Zhang JM, 2022, IEEE T SOFTWARE ENG, V48, P1, DOI 10.1109/TSE.2019.2962027
   Zhang J, 2020, INFORM SOFTWARE TECH, V123, DOI 10.1016/j.infsof.2020.106296
   Zhang M., 2019, INT C INF COMM SEC, P613
   Zhao CC, 2016, INT CONF COMP SCI ED, P69, DOI 10.1109/ICCSE.2016.7581557
NR 261
TC 13
Z9 14
U1 9
U2 33
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 38
DI 10.1007/s10515-022-00337-x
PG 74
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0N1IC
UT WOS:000782599100001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zhang, MD
   Sun, J
   Wang, JY
AF Zhang, Mengdi
   Sun, Jun
   Wang, Jingyi
TI Which neural network makes more explainable decisions? An approach
   towards measuring explainability
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Neural network testing; Model interpretability; Deep learning models
ID CLASSIFICATION
AB Neural networks are getting increasingly popular thanks to their exceptional performance in solving many real-world problems. At the same time, they are shown to be vulnerable to attacks, difficult to debug and subject to fairness issues. To improve people's trust in the technology, it is often necessary to provide some human-understandable explanation of neural networks' decisions, e.g., why is that my loan application is rejected whereas hers is approved? That is, the stakeholder would be interested to minimize the chances of not being able to explain the decision consistently and would like to know how often and how easy it is to explain the decisions of a neural network before it is deployed. In this work, we provide two measurements on the decision explainability of neural networks. Afterwards, we develop algorithms for evaluating the measurements of user-provided neural networks automatically. We evaluate our approach on multiple neural network models trained on benchmark datasets. The results show that existing neural networks' decisions often have low explainability according to our measurements. This is in line with the observation that adversarial samples can be easily generated through adversarial perturbation, which are often hard to explain. Our further experiments show that the decisions of the models trained with robust training are not necessarily easier to explain, whereas decisions of the models retrained with samples generated by our algorithms are easier to explain.
C1 [Zhang, Mengdi; Sun, Jun] Singapore Management Univ, Singapore, Singapore.
   [Wang, Jingyi] Zhejiang Univ, Hangzhou, Peoples R China.
C3 Singapore Management University; Zhejiang University
RP Sun, J (corresponding author), Singapore Management Univ, Singapore, Singapore.
EM mdzhang.2019@phdcs.smu.edu.sg; junsun@smu.edu.sg; wangjyee@zju.edu.cn
RI Wang, Jingyi/AHE-1352-2022
OI Wang, Jingyi/0000-0001-7113-7635; ZHANG, MENGDI/0000-0002-3239-4804
FU National Research Foundation, Singapore under its AI Singapore Programme
   (AISG) [AISG-RP-2019-012]
FX This research/project is supported by the National Research Foundation,
   Singapore under its AI Singapore Programme (AISG Award No:
   AISG-RP-2019-012).
CR Abadi M, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/3022670.2976746, 10.1145/2951913.2976746]
   Agarwal Alekh, 2018, P MACHINE LEARNING R, V80
   Bojarski M., 2016, IEEE T INTELL TRANSP, DOI DOI 10.1109/TITS.2018.2791533
   Carvalho DV, 2019, ELECTRONICS-SWITZ, V8, DOI 10.3390/electronics8080832
   Chen TQ, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P785, DOI 10.1145/2939672.2939785
   Clauset A, 2011, A brief primer on probability distributions
   Dabkowski P, 2017, ADV NEUR IN, V30
   Deshwal D, 2019, WIRELESS PERS COMMUN, V107, P2071, DOI 10.1007/s11277-019-06373-3
   DONALDSON D, 1980, J ECON THEORY, V22, P67, DOI 10.1016/0022-0531(80)90065-4
   Goodfellow I. J., 2015, 3 INT C LEARNING REP
   Guo P., 2018, ARXIV180507828
   Hofmann H., 1994, German Credit Dataset
   Huchard M., 2018, ASE: Automated Software Engineering
   Ke GL, 2017, ADV NEUR IN, V30
   Kim B, 2018, PR MACH LEARN RES, V80
   Kim B, 2014, ADV NEUR IN, V27
   Kohavi Ronny, 1996, UCI Machine Learning Repository
   Kurakin A., 2016, WORKSHOP TRACK P
   Kusner M, 2017, ADV NEUR IN, V30
   Lage Isaac, 2019, ARXIV190200006
   Lakkaraju H, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1675, DOI 10.1145/2939672.2939874
   Latif A, 2019, MATH PROBL ENG, V2019, DOI 10.1155/2019/9658350
   Lewis M, 2020, P 58 ANN M ASS COMP, P7871, DOI DOI 10.18653/V1/2020.ACL-MAIN.703
   Liao C., 2018, ARXIV180707501
   LLOYD SP, 1982, IEEE T INFORM THEORY, V28, P129, DOI 10.1109/TIT.1982.1056489
   Loh WY, 2011, WIRES DATA MIN KNOWL, V1, P14, DOI 10.1002/widm.8
   Lombrozo T, 2007, COGNITIVE PSYCHOL, V55, P232, DOI 10.1016/j.cogpsych.2006.09.006
   Lombrozo T, 2006, TRENDS COGN SCI, V10, P464, DOI 10.1016/j.tics.2006.08.004
   Lundberg SM, 2017, ADV NEUR IN, V30
   Mohammed MA, 2020, J SUPERCOMPUT, V76, P1086, DOI 10.1007/s11227-018-2587-z
   Montavon G, 2018, DIGIT SIGNAL PROCESS, V73, P1, DOI 10.1016/j.dsp.2017.10.011
   Moosavi-Dezfooli SM, 2016, PROC CVPR IEEE, P2574, DOI 10.1109/CVPR.2016.282
   Moro S, 2014, DECIS SUPPORT SYST, V62, P22, DOI 10.1016/j.dss.2014.03.001
   Murdoch WJ, 2019, P NATL ACAD SCI USA, V116, P22071, DOI 10.1073/pnas.1900654116
   Oaksford M, 2001, TRENDS COGN SCI, V5, P349, DOI 10.1016/S1364-6613(00)01699-5
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   PRAAGMAN J, 1985, EUR J OPER RES, V19, P144, DOI 10.1016/0377-2217(85)90321-2
   Schielzeth H, 2010, METHODS ECOL EVOL, V1, P103, DOI 10.1111/j.2041-210X.2010.00012.x
   Shore H, 1998, COMMUN STAT-SIMUL C, V27, P501, DOI 10.1080/03610919808813492
   Simonyan Karen, 2014, WORKSH P INT C LEARN
   Steinberg D, 2009, CH CRC DATA MIN KNOW, P179, DOI 10.1201/9781420089653.ch10
   Sundararajan M, 2017, PR MACH LEARN RES, V70
   Tran L, 2017, PROC CVPR IEEE, P1283, DOI 10.1109/CVPR.2017.141
   WALD A, 1948, ANN MATH STAT, V19, P326, DOI 10.1214/aoms/1177730197
   WALD A, 1945, ANN MATH STAT, V16, P117, DOI 10.1214/aoms/1177731118
   Yosinski J., 2015, ARXIV150606579, V2015, P12
   Zeiler MD, 2014, LECT NOTES COMPUT SC, V8689, P818, DOI 10.1007/978-3-319-10590-1_53
   Zhang M, 2021, GITHUB REPOSITORY
   Zhang PX, 2020, PROC INT CONF SOFTW, P949, DOI 10.1145/3377811.3380331
   Zhang P, 2009, PROCEEDINGS 32ND ANNUAL INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P107, DOI 10.1145/1571941.1571962
   Zhang QS, 2019, PROC CVPR IEEE, P6254, DOI 10.1109/CVPR.2019.00642
NR 52
TC 0
Z9 0
U1 0
U2 15
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2022
VL 29
IS 2
AR 39
DI 10.1007/s10515-022-00338-w
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0N3VX
UT WOS:000782770600001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Liguori, P
   Al-Hossami, E
   Cotroneo, D
   Natella, R
   Cukic, B
   Shaikh, S
AF Liguori, Pietro
   Al-Hossami, Erfan
   Cotroneo, Domenico
   Natella, Roberto
   Cukic, Bojan
   Shaikh, Samira
TI Can we generate shellcodes via natural language? An empirical study
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Automatic exploit generation; Software exploits; Shellcode; Neural
   machine translation; Assembly
ID EXPLOIT GENERATION
AB Writing software exploits is an important practice for offensive security analysts to investigate and prevent attacks. In particular, shellcodes are especially time-consuming and a technical challenge, as they are written in assembly language. In this work, we address the task of automatically generating shellcodes, starting purely from descriptions in natural language, by proposing an approach based on Neural Machine Translation (NMT). We then present an empirical study using a novel dataset (Shellcode_IA32), which consists of 3200 assembly code snippets of real Linux/x86 shellcodes from public databases, annotated using natural language. Moreover, we propose novel metrics to evaluate the accuracy of NMT at generating shellcodes. The empirical analysis shows that NMT can generate assembly code snippets from the natural language with high accuracy and that in many cases can generate entire shellcodes with no errors.
C1 [Liguori, Pietro; Cotroneo, Domenico; Natella, Roberto] Univ Naples Federico II, Naples, Italy.
   [Al-Hossami, Erfan; Cukic, Bojan; Shaikh, Samira] Univ North Carolina Charlotte, Charlotte, NC USA.
C3 University of Naples Federico II; University of North Carolina;
   University of North Carolina Charlotte
RP Liguori, P (corresponding author), Univ Naples Federico II, Naples, Italy.
EM pietro.liguori@unina.it; ealhossa@uncc.edu; cotroneo@unina.it;
   roberto.natella@unina.it; bcukic@uncc.edu; samirashaikh@uncc.edu
RI Cukic, Bojan/B-8287-2009; Liguori, Pietro/KIG-0258-2024; Natella,
   Roberto/AAT-7087-2020
OI Liguori, Pietro/0000-0001-5579-1696; Natella,
   Roberto/0000-0003-1084-4824
FU University of Naples Federico II
FX This work has been partially supported by the University of Naples
   Federico II in the frame of the Programme F.R.A., project id OSTAGE.
CR Alhuzali A, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P641, DOI 10.1145/2976749.2978380
   Alon U., 2018, INT C LEARN REPR
   Anley C., 2007, SHELLCODERS HDB DISC
   [Anonymous], 2016, ARXIV160504515
   [Anonymous], 2015, P 2015 C EMP METH NA, DOI DOI 10.18653/V1/D15-1166
   Arce I, 2004, IEEE SECUR PRIV, V2, P72, DOI 10.1109/MSP.2004.87
   Avgerinos T., 2011, NDSS
   Avgerinos T, 2014, COMMUN ACM, V57, P74, DOI 10.1145/2560217.2560219
   Bao T, 2017, P IEEE S SECUR PRIV, P824, DOI 10.1109/SP.2017.67
   Bengio Y., 2014, TECHNICAL REPORT
   Bird S., 2004, P ACL INTERACTIVE PO, P214
   Bojar O., 2016, P 1 C MACH TRANSL, V2, P131
   Brown T., 2020, P ADV NEUR INF PROC, V33, P1877
   Brumley D, 2008, P IEEE S SECUR PRIV, P143, DOI 10.1109/SP.2008.17
   Chen P., 2011, P 6 ACM S INF COMP C, P20
   Cho K., 2014, ARXIV14061078
   Costa-Jussà MR, 2014, ACM COMPUT SURV, V46, DOI 10.1145/2518130
   Dandamudi S, 2005, GUIDE ASSEMBLY LANGU
   Deckard J., 2005, BUFFER OVERFLOW ATTA
   Devlin J., 2018, BERT PRE TRAINING DE
   Ding WB, 2014, PROCEEDINGS OF THE 2014 9TH INTERNATIONAL CONFERENCE ON MALICIOUS AND UNWANTED SOFTWARE: THE AMERICAS (MALWARE), P18, DOI 10.1109/MALWARE.2014.6999408
   Dong L, 2018, PROCEEDINGS OF THE 56TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL), VOL 1, P731
   Dorr BJ, 1999, ADV COMPUT, V49, P1, DOI 10.1016/S0065-2458(08)60282-X
   Drosos I, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20)
   Duntemann J., 2000, ASSEMBLY LANGUAGE ST
   Duntemann J., 2000, ASSEMBLY LANGUAGE ST
   Eisenstein Jacob, 2018, Natural language processing
   Feng Z., 2020, EMNLP
   Foster James C, 2005, Sockets, Shellcode, Porting, and Coding: Reverse Engineering Exploits and Tool Coding for Security Professionals
   Gemmell C, 2020, PROCEEDINGS OF THE 43RD INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL (SIGIR '20), P2005, DOI 10.1145/3397271.3401215
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Hackerone, HACK BOUNT
   Han L., 2021, ARXIV210503311
   Han L., 2021, P 1 WORKSHOP MODELLI, P15
   Hanley Mike, UPDATES OUR POLICIES
   Hayati SA, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P925
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Hu H, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P177
   Huang SK, 2014, IEEE T RELIAB, V63, P270, DOI 10.1109/TR.2014.2299198
   Hung Phan, 2020, RL+SE&PL 2020: Proceedings of the 1st ACM SIGSOFT International Workshop on Representation Learning for Software Engineering and Program Languages, P3, DOI 10.1145/3416506.3423576
   Husain Hamel, 2019, ARXIV190909436CSSTAT
   Iyer S, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P2073
   Jamwal S, 2014, C PROGRAMMING
   Jiang SY, 2017, IEEE INT CONF AUTOM, P135, DOI 10.1109/ASE.2017.8115626
   Jung T.H, ARXIV PREPRINT ARXIV
   Kim Yoon, 2017, arXiv preprint, arXiv170200887, P2
   Kingma D. P., 2014, arXiv
   Kusswurm D., 2014, Modern X86 Assembly Language Programming
   Li Y, 2018, STUD BIG DATA, V26, P83, DOI 10.1007/978-3-319-53817-4_4
   Liguori P., ARXIV210900279
   Liguori P, 2021, NLP4PROG 2021: THE 1ST WORKSHOP ON NATURAL LANGUAGE PROCESSING FOR PROGRAMMING (NLP4PROG 2021), P58
   Lin XV, 2018, PROCEEDINGS OF THE ELEVENTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION (LREC 2018), P3107
   Lin Xi Victoria, 2017, UWCSE170301 U WASH D
   Lin Zhouhan, 2017, A structured self-attentive sentence embedding
   Ling W, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P599
   Liu Y, 2019, 57TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2019), P5070
   Liu ZX, 2018, IEEE INT CONF AUTOM, P373, DOI 10.1145/3238147.3238190
   Mason J, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P524
   McGraw G, 2004, IEEE SECUR PRIV, V2, P80, DOI 10.1109/MSECP.2004.1281254
   Megahed H., 2018, Penetration Testing with Shellcode: Detect, Exploit, and Secure Network-Level and Operating System Vulnerabilities
   Movshovitz-Attias Dana, 2013, ACL
   Neubig Graham, 2018, CoRR
   Neubig Graham, 2018, ARXIV180300188
   Tran N, 2019, INT C PROGRAM COMPRE, P165, DOI 10.1109/ICPC.2019.00034
   Oda Y, 2015, IEEE INT CONF AUTOM, P574, DOI 10.1109/ASE.2015.36
   Pan C, 2021, APPL SCI-BASEL, V11, DOI 10.3390/app11114793
   Papineni K, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P311, DOI 10.3115/1073083.1073135
   Pyeatt L. D., 2016, MODERN ASSEMBLY LANG
   Python, TOK
   Rabinovich M, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1139, DOI 10.18653/v1/P17-1105
   Radford Alec, 2018, IMPROVING LANGUAGE U, DOI DOI 10.18653/V1/N18-1202
   Ray D, 2012, ACM SIGPLAN NOTICES, V47, P179, DOI 10.1145/2103621.2103678
   Shellstorm, SHELLC DAT STUD CAS
   Shi K., 2020, ARXIV200309040
   Sutskever I, 2014, ADV NEUR IN, V27
   Tufano M, 2019, PROC INT CONF SOFTW, P25, DOI 10.1109/ICSE.2019.00021
   Tutorialspoint, ASS PROGR TUT
   Vaswani A, 2017, ADV NEUR IN, V30
   Wu Y., 2016, GOOGLES NEURAL MACHI
   Xu Frank F., 2020, P 58 ANN M ASS COMP, P6045, DOI 10.18653/v1/2020.acl-main.538
   Xu LH, 2018, 2018 IEEE 18TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY COMPANION (QRS-C), P463, DOI 10.1109/QRS-C.2018.00085
   Yin PC, 2018, CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018): PROCEEDINGS OF SYSTEM DEMONSTRATIONS, P7
   Yin PC, 2019, 57TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2019), P4553
   Yin PC, 2018, IEEE WORK CONF MIN S, P476, DOI 10.1145/3196398.3196408
   You W, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2139, DOI 10.1145/3133956.3134085
   Zhong Victor, 2017, ARXIV170900103
NR 86
TC 9
Z9 9
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 30
DI 10.1007/s10515-022-00331-3
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZN4KX
UT WOS:000765006300001
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Kong, PF
   Li, L
   Gao, J
   Riom, T
   Zhao, YJ
   Bissyandé, TF
   Klein, J
AF Kong, Pingfan
   Li, Li
   Gao, Jun
   Riom, Timothee
   Zhao, Yanjie
   Bissyande, Tegawende F.
   Klein, Jacques
TI ANCHOR: locating android framework-specific crashing faults
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Android crash; Crashing fault; Fault localization
ID RACE DETECTION; LOCALIZATION
AB Android framework-specific app crashes are hard to debug. Indeed, the callback-based event-driven mechanism of Android challenges crash localization techniques that are developed for traditional Java programs. The key challenge stems from the fact that the buggy code location may not even be listed within the stack trace. For example, our empirical study on 500 framework-specific crashes from an open benchmark has revealed that 37 percent of the crash types are related to bugs that are outside the stack traces. Moreover, Android programs are a mixture of code and extra-code artifacts such as the Manifest file. The fact that any artifact can lead to failures in the app execution creates the need to position the localization target beyond the code realm. In this paper, we propose ANCHOR , a two-phase suspicious bug location suggestion tool. ANCHOR specializes in finding crash-inducing bugs outside the stack trace. ANCHOR is lightweight and source code independent since it only requires the crash message and the apk file to locate the fault. Experimental results, collected via cross-validation and in-the-wild dataset evaluation, show that ANCHOR is effective in locating Android framework-specific crashing faults. Finally, we put our empirical study results openly accessible at https://github.com/anchor-locator/ anchor.
C1 [Kong, Pingfan; Gao, Jun; Riom, Timothee; Bissyande, Tegawende F.; Klein, Jacques] Univ Luxembourg, Esch Sur Alzette, Luxembourg.
   [Li, Li; Zhao, Yanjie] Monash Univ, Clayton, Vic, Australia.
C3 University of Luxembourg; Monash University
RP Li, L (corresponding author), Monash Univ, Clayton, Vic, Australia.
EM pingfan.kong@uni.lu; li.li@monash.edu; jun.gao@uni.lu;
   timothee.riom@uni.lu; yanjie.zhao@monash.edu;
   tegawende.bissyande@uni.lu; jacques.klein@uni.lu
RI Zhao, Yanjie/HNJ-6191-2023; Li, Li/AAR-3316-2020
OI Zhao, Yanjie/0000-0001-8793-5367; Klein, Jacques/0000-0003-4052-475X;
   Li, Li/0000-0003-2990-1614
FU Fonds National de la Recherche (FNR), Luxembourg, under CORE project
   CHARACTERIZE [C17/IS/11693861]; Fonds National de la Recherche (FNR),
   Luxembourg, under CORE project RECOMMEND [15/IS/10449467]; AFR-PhD
   project [11620657]
FX This work was supported by the Fonds National de la Recherche (FNR),
   Luxembourg, under CORE projects CHARACTERIZE C17/IS/11693861 and
   RECOMMEND 15/IS/10449467, and AFR-PhD project 11620657.
CR Abreu R, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P89, DOI 10.1109/TAIC.PART.2007.13
   Abreu R, 2009, IEEE INT CONF AUTOM, P88, DOI 10.1109/ASE.2009.25
   Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   Allix K, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P468, DOI [10.1145/2901739.2903508, 10.1109/MSR.2016.056]
   [Anonymous], 2012, P 5 IND SOFTW ENG C
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Bartel Alexandre, 2012, P ACM SIGPLAN INT WO, P27
   Bielik P, 2015, ACM SIGPLAN NOTICES, V50, P332, DOI [10.1145/2814270.2814303, 10.1145/2858965.2814303]
   Chen Sen, 2020, IEEE T SOFTWARE ENG
   Fan LL, 2018, IEEE INT CONF AUTOM, P486, DOI 10.1145/3238147.3238170
   Fan LL, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P408, DOI 10.1145/3180155.3180222
   Fraunhofer, 2020, COD TOOL FRAUNH COD TOOL FRAUNH
   Gómez M, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P88, DOI [10.1109/MobileSoft.2016.033, 10.1145/2897073.2897088]
   Gu YF, 2019, J SYST SOFTWARE, V148, P88, DOI 10.1016/j.jss.2018.11.004
   Hu ZD, 2014, IEEE INT SYMP POWER
   Huang YG, 2011, INT CONF CLOUD COMPU, P34
   Indi TS, 2016, INT CONF TEACH LEARN, P194, DOI 10.1109/LaTiCE.2016.9
   Jiang Y, 2015, 2015 INTERNATIONAL SYMPOSIUM ON BIOELECTRONICS AND BIOINFORMATICS (ISBB), P1, DOI 10.1109/ISBB.2015.7344908
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Kang H, 2016, J SUPERCOMPUT, V72, P2471, DOI 10.1007/s11227-015-1471-3
   Kim D, 2011, IEEE T SOFTWARE ENG, V37, P430, DOI 10.1109/TSE.2011.20
   Kong PF, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P78, DOI 10.1145/3293882.3330572
   Koyuncu A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P314, DOI 10.1145/3338906.3338935
   Li L, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P153, DOI 10.1145/3213846.3213857
   Li L, 2017, INFORM SOFTWARE TECH, V88, P67, DOI 10.1016/j.infsof.2017.04.001
   Li L, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P280, DOI 10.1109/ICSE.2015.48
   Li Li, 2017, ARXIV PREPRINT ARXIV
   Li Li, 2016, 2016 INT S SOFTW TES
   Li QW, 2016, ASIA PAC SOFWR ENG, P209, DOI [10.1109/APSEC.2016.038, 10.1109/APSEC.2016.41]
   Maiya P, 2014, ACM SIGPLAN NOTICES, V49, P316, DOI [10.1145/2666356.2594311, 10.1145/2594291.2594311]
   Maji AK., 2012, 2012 42nd Annual IEEE/IFIP International Conference on, P1
   Martin W, 2017, IEEE T SOFTWARE ENG, V43, P817, DOI 10.1109/TSE.2016.2630689
   Metsis V., 2006, CEAS, V17, P28
   MILLER R, 1982, BIOMETRICS, V38, P1011, DOI 10.2307/2529881
   Moran K, 2016, IEEE INT CONF SOFTW, P33, DOI 10.1109/ICST.2016.34
   Octeau D, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P77, DOI 10.1109/ICSE.2015.30
   Qin J., 2011, P 2011 ACM SIGMOD IN, P1033, DOI DOI 10.1145/1989323.1989431
   Rish I., 2001, IJCAI 2001 WORKSH EM, P41
   Schroter Adrian, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P118, DOI 10.1109/MSR.2010.5463280
   Shi Y., 2012, P 6 ACM C RECOMMENDE, P139, DOI [10.1145/2365952.2365981, DOI 10.1145/2365952.2365981]
   Shujuan Jiang, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P393, DOI 10.1109/QSIC.2010.23
   Sinha S, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P153
   Song W, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P362, DOI 10.1145/3338906.3338950
   Tan SH, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P187, DOI 10.1145/3180155.3180243
   Tang HY, 2016, IEEE INT CONF AUTOM, P648, DOI 10.1145/2970276.2970320
   Verge t, STOP FACEBOOKS IOS B
   Walton NA, 2010, BMC MED INFORM DECIS, V10, DOI 10.1186/1472-6947-10-68
   Wang J, 2018, SCI COMPUT PROGRAM, V163, P1, DOI 10.1016/j.scico.2018.03.008
   Wei LL, 2016, IEEE INT CONF AUTOM, P226, DOI 10.1145/2970276.2970312
   Wong CP, 2014, PROC IEEE INT CONF S, P181, DOI 10.1109/ICSME.2014.40
   Wong WE, 2016, IEEE T SOFTWARE ENG, V42, P707, DOI 10.1109/TSE.2016.2521368
   Wu TY, 2016, IEEE T SOFTWARE ENG, V42, P1054, DOI 10.1109/TSE.2016.2547385
   Yang SQ, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P89, DOI 10.1109/ICSE.2015.31
   Yang ZM, 2012, WOR CONG SOFTW ENG, P101, DOI 10.1109/WCSE.2012.26
   Yang Z, 2006, ISDA 2006: SIXTH INTERNATIONAL CONFERENCE ON INTELLIGENT SYSTEMS DESIGN AND APPLICATIONS, VOL 2, P861
   Zhao Y, 2019, PROC INT CONF SOFTW, P128, DOI 10.1109/ICSE.2019.00030
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
NR 57
TC 4
Z9 4
U1 1
U2 12
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 10
DI 10.1007/s10515-021-00290-1
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TH9YB
UT WOS:000672437600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nielebock, S
   Heumüller, R
   Schott, KM
   Ortmeier, F
AF Nielebock, Sebastian
   Heumueller, Robert
   Schott, Kevin Michael
   Ortmeier, Frank
TI Guided pattern mining for API misuse detection by change-based code
   analysis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE API misuses; Error detection; Change-based code analysis; Pattern mining
ID SEARCH; SPECIFICATIONS; GENERATION
AB Lack of experience, inadequate documentation, and sub-optimal API design frequently cause developers to make mistakes when re-using third-party implementations. Such API misuses can result in unintended behavior, performance losses, or software crashes. Therefore, current research aims to automatically detect such misuses by comparing the way a developer used an API to previously inferred patterns of the correct API usage. While research has made significant progress, these techniques have not yet been adopted in practice. In part, this is due to the lack of a process capable of seamlessly integrating with software development processes. Particularly, existing approaches do not consider how to collect relevant source code samples from which to infer patterns. In fact, an inadequate collection can cause API usage pattern miners to infer irrelevant patterns which leads to false alarms instead of finding true API misuses. In this paper, we target this problem (a) by providing a method that increases the likelihood of finding relevant and true-positive patterns concerning a given set of code changes and agnostic to a concrete static, intra-procedural mining technique and (b) by introducing a concept for just-in-time API misuse detection which analyzes changes at the time of commit. Particularly, we introduce different, lightweight code search and filtering strategies and evaluate them on two real-world API misuse datasets to determine their usefulness in finding relevant intra-procedural API usage patterns. Our main results are (1) commit-based search with subsequent filtering effectively decreases the amount of code to be analyzed, (2) in particular method-level filtering is superior to file-level filtering, (3) project-internal and project-external code search find solutions for different types of misuses and thus are complementary, (4) incorporating prior knowledge of the misused API into the search has a negligible effect.
C1 [Nielebock, Sebastian; Heumueller, Robert; Schott, Kevin Michael; Ortmeier, Frank] Otto Von Guericke Univ, Fac Comp Sci, Chair Software Engn, Magdeburg, Germany.
C3 Otto von Guericke University
RP Nielebock, S (corresponding author), Otto Von Guericke Univ, Fac Comp Sci, Chair Software Engn, Magdeburg, Germany.
EM sebastian.nielebock@ovgu.de; robert.heumueller@ovgu.de;
   kevin.schott@ovgu.de; frank.ortmeier@ovgu.de
RI Nielebock, Sebastian/HSE-7136-2023
OI Nielebock, Sebastian/0000-0002-0147-3526; Ortmeier,
   Frank/0000-0001-6186-4142; Heumuller, Robert/0000-0002-9906-0323
FU Projekt DEAL
FX Open Access funding enabled and organized by Projekt DEAL.
CR Agrawal A, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1050, DOI 10.1145/3180155.3180197
   Agrawal R., 1993, SIGMOD Record, V22, P207, DOI 10.1145/170036.170072
   Allamanis M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P472, DOI 10.1145/2635868.2635901
   Amann S., 2018, THESIS TECHNISCHE U
   Amann S, 2019, IEEE T SOFTWARE ENG, V45, P1170, DOI 10.1109/TSE.2018.2827384
   Amann S, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P464, DOI [10.1145/2901739.2903506, 10.1109/MSR.2016.055]
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   An L., 2015, Proceedings of the 11th International Conference on Predictive Models and Data Analytics in Software Engineering, P1, DOI DOI 10.1145/2810146.2810152
   [Anonymous], 2006, Proceedings of the 14th ACM SIGSOFT international symposium on Foundations of software engineering (SIGSOFT '06/FSE-14), DOI 10.1145/1181775.1181781
   [Anonymous], 2007, P 6 JOINT M EUR SOFT
   [Anonymous], 2007, 6th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE), DOI DOI 10.1145/1287624.1287632
   Asyrofi MH, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P637, DOI [10.1109/SANER48275.2020.9054809, 10.1109/saner48275.2020.9054809]
   Boya Sun, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P21, DOI 10.1109/ISSRE.2010.36
   Chan W., 2012, PROC ACM SIGSOFT 20, P1, DOI DOI 10.1145/2393596.2393606
   Chen CY, 2021, IEEE T SOFTWARE ENG, V47, P432, DOI 10.1109/TSE.2019.2896123
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Dyer R, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P422, DOI 10.1109/ICSE.2013.6606588
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Gabel M., 2008, SIGSOFT FSE, P339, DOI DOI 10.1145/1453101.1453150
   Gallardo-Valencia RE, 2009, 2009 ICSE WORKSHOP ON SEARCH-DRIVEN DEVELOPMENT-USERS, INFRASTRUCTURE, TOOLS AND EVALUATION, P49, DOI 10.1109/SUITE.2009.5070022
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Gu XD, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P933, DOI 10.1145/3180155.3180167
   Guo ZQ, 2020, EMPIR SOFTW ENG, V25, P1905, DOI 10.1007/s10664-020-09802-1
   Holmes R, 2005, PROC INT CONF SOFTW, P117
   Hou D, 2011, CONF PROC INT SYMP C, P91, DOI 10.1109/ICPC.2011.21
   Huang Q, 2018, IEEE INT CONF AUTOM, P293, DOI 10.1145/3238147.3238191
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Kang HJ, 2022, IEEE T SOFTWARE ENG, V48, P2761, DOI 10.1109/TSE.2021.3069978
   Kechagia M, 2021, IEEE T SOFTWARE ENG, V48, P2658, DOI 10.1109/TSE.2021.3067156
   Kim J, 2010, AAAI CONF ARTIF INTE, P1358
   Kim M, 2009, PROC INT CONF SOFTW, P309, DOI 10.1109/ICSE.2009.5070531
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Koschke Rainer, 2007, DUPLICATION REDUNDAN
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P175, DOI 10.1109/TSE.2011.5
   Le TDB, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P331, DOI 10.1109/SANER.2015.7081843
   Le XBD, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P213, DOI 10.1109/SANER.2016.76
   Lemos O.A.L., 2007, P 22 IEEE ACM INT C, P525, DOI 10.1145/1321631.1321726
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   Livshits V.B., 2005, ESEC SIGSOFT FSE, P296, DOI [DOI 10.1145/1095430.1081754, DOI 10.1145/1081706.1081754]
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Lv F, 2015, IEEE INT CONF AUTOM, P260, DOI 10.1109/ASE.2015.42
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   McMillan C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P111, DOI 10.1145/1985793.1985809
   Mockus A, 2000, BELL LABS TECH J, V5, P169, DOI 10.1002/bltj.2229
   Moreno L, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P880, DOI 10.1109/ICSE.2015.98
   Murali V, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P151, DOI 10.1145/3106237.3106284
   Nadi S, 2016, PROC INT CONF SOFTW, P935, DOI 10.1145/2884781.2884790
   Nguyen TT, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P383, DOI 10.1145/1595696.1595767
   Nielebock S., 2020, P 1 INT WORK AUT PRO, DOI [10.1145/3387940.3392171, DOI 10.1145/3387940.3392171]
   Nielebock S, 2021, IEEE WORK CONF MIN S, P535, DOI 10.1109/MSR52588.2021.00069
   Nielebock S, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2020), P73, DOI 10.1145/3377816.3381735
   Nielebock S, 2018, SOFTWAREMINING '18: PROCEEDINGS OF THE 7TH INTERNATIONAL WORKSHOP ON SOFTWARE MINING, P20, DOI 10.1145/3242887.3242890
   Ocariza Frolin  Jr., 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P55, DOI 10.1109/ESEM.2013.18
   Oliveira DS, 2018, PROCEEDINGS OF THE FOURTEENTH SYMPOSIUM ON USABLE PRIVACY AND SECURITY, P315
   Pasquier N, 1999, LECT NOTES COMPUT SC, V1540, P398
   PAUL S, 1994, IEEE T SOFTWARE ENG, V20, P463, DOI 10.1109/32.295894
   Pradel M, 2009, IEEE INT CONF AUTOM, P371, DOI 10.1109/ASE.2009.60
   Rahman MM, 2018, IEEE WORK CONF MIN S, P465, DOI 10.1145/3196398.3196425
   Rahman MM, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P349, DOI 10.1109/SANER.2016.80
   Reiss SP, 2009, PROC INT CONF SOFTW, P243, DOI 10.1109/ICSE.2009.5070525
   Robillard MP, 2013, IEEE T SOFTWARE ENG, V39, P613, DOI 10.1109/TSE.2012.63
   Robillard MP, 2011, EMPIR SOFTW ENG, V16, P703, DOI 10.1007/s10664-010-9150-8
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Sadowski C, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P191, DOI 10.1145/2786805.2786855
   Sahavechaphan N, 2006, ACM SIGPLAN NOTICES, V41, P413, DOI 10.1145/1167515.1167508
   Saied MA, 2020, INFORM SOFTWARE TECH, V119, DOI 10.1016/j.infsof.2019.106213
   Saini V, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P354, DOI 10.1145/3236024.3236026
   Sajnani H, 2016, PROC INT CONF SOFTW, P1157, DOI 10.1145/2884781.2884877
   Siegmund J, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P9, DOI 10.1109/ICSE.2015.24
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   Stolee KT, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2581377
   Sven Amann, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P265, DOI 10.1109/MSR.2019.00053
   Thummalapenta Suresh, 2007, Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering, ASE '07, P204
   Thung F, 2013, IEEE INT CONF AUTOM, P290, DOI 10.1109/ASE.2013.6693088
   Thung F, 2013, WORK CONF REVERSE EN, P182, DOI 10.1109/WCRE.2013.6671293
   Nguyen TD, 2017, PROC INT CONF SOFTW, P438, DOI 10.1109/ICSE.2017.47
   Vasudevan P, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P289, DOI 10.1109/SERA.2006.25
   Wasylkowski A, 2011, AUTOMAT SOFTW ENG, V18, P263, DOI 10.1007/s10515-011-0084-1
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   White M, 2016, IEEE INT CONF AUTOM, P87, DOI 10.1145/2970276.2970326
   Wu RX, 2018, EMPIR SOFTW ENG, V23, P2866, DOI 10.1007/s10664-017-9567-4
   Xia X, 2017, EMPIR SOFTW ENG, V22, P3149, DOI 10.1007/s10664-017-9514-4
   Xin Q, 2019, 2019 IEEE/ACM 6TH INTERNATIONAL WORKSHOP ON GENETIC IMPROVEMENT (GI@ICSE 2019), P10, DOI 10.1109/GI.2019.00012
   Xin Q, 2017, IEEE INT CONF AUTOM, P660, DOI 10.1109/ASE.2017.8115676
   Yang JL, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P340
   Yates F., 1934, JR STATIST SOC     S, V1, P217, DOI [https://doi.org/10.2307/2983604, DOI 10.2307/2983604]
   Zhong H, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P913, DOI 10.1109/ICSE.2015.101
   Zhong H, 2009, LECT NOTES COMPUT SC, V5653, P318, DOI 10.1007/978-3-642-03013-0_15
   Zhou Y, 2017, PROC INT CONF SOFTW, P27, DOI 10.1109/ICSE.2017.11
   Zibran M. F., 2011, 2011 18th Working Conference on Reverse Engineering, P151, DOI 10.1109/WCRE.2011.26
NR 93
TC 5
Z9 6
U1 1
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 15
DI 10.1007/s10515-021-00294-x
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UC6PW
UT WOS:000686646800001
OA hybrid
DA 2024-07-18
ER

PT J
AU Safdar, SA
   Yue, T
   Ali, S
   Lu, H
AF Safdar, Safdar Aqeel
   Yue, Tao
   Ali, Shaukat
   Lu, Hong
TI Using multi-objective search and machine learning to infer rules
   constraining product configurations
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Product line; Configuration; Rule mining; Multi-objective search;
   Machine learning; Interacting products
ID NONDOMINATED SORTING APPROACH; ALGORITHM
AB Modern systems are being developed by integrating multiple products within/across product lines that communicate with each other through information networks. Runtime behaviors of such systems are related to product configurations and information networks. Cost-effectively supporting Product Line Engineering (PLE) of such systems is challenging mainly because of lacking the support of automation of the configuration process. Capturing rules is the key for automating the configuration process in PLE. However, there does not exist explicitly-specified rules constraining configurable parameter values of such products and product lines. Manually specifying such rules is tedious and time-consuming. To address this challenge, in this paper, we present an improved version (named as SBRM+) of our previously proposed Search-based Rule Mining (SBRM) approach. SBRM+ incorporates two machine learning algorithms (i.e., C4.5 and PART) and two multi-objective search algorithms (i.e., NSGA-II and NSGA-III), employs a clustering algorithm (i.e., k means) for classifying rules as high or low confidence rules, which are used for defining three objectives to guide the search. To evaluate SBRM+ (i.e., SBRMNSGA-II+-C45, SBRMNSGA-III+\-C45, SBRMNSGA-II+-PART, and SBRMNSGA-III+-PART), we performed two case studies (Cisco and Jitsi) and conducted three types of analyses of results: difference analysis, correlation analysis, and trend analysis. Results of the analyses show that all the SBRM+ approaches performed significantly better than two Random Search-based approaches (RBRM+-C45 and RBRM+-PART) in terms of fitness values, six quality indicators, and 17 machine learning quality measurements (MLQMs). As compared to RBRM+ approaches, SBRM+ approaches have improved the quality of rules based on MLQMs up to 27% for the Cisco case study and 28% for the Jitsi case study.
C1 [Safdar, Safdar Aqeel; Yue, Tao; Ali, Shaukat; Lu, Hong] Simula Res Lab, Oslo, Norway.
   [Safdar, Safdar Aqeel] Univ Oslo, Oslo, Norway.
C3 University of Oslo
RP Safdar, SA (corresponding author), Simula Res Lab, Oslo, Norway.; Safdar, SA (corresponding author), Univ Oslo, Oslo, Norway.
EM safdar@simula.no; tao@simula.no; shaukat@simula.no; honglu@simula.no
RI yue, tao/H-6783-2013
OI Yue, Tao/0000-0003-3262-5577
CR Ali S, 2006, APPL SOFT COMPUT, V6, P119, DOI 10.1016/j.asoc.2004.12.002
   Ali S, 2017, MODELSWARD: PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P581, DOI 10.5220/0006216105810589
   Ali S, 2013, IEEE T SOFTWARE ENG, V39, P1376, DOI 10.1109/TSE.2013.17
   [Anonymous], 2013, P 17 INT SOFTW PROD, DOI [DOI 10.1145/2491627.2491635, 10.1145/2491627.2491635]
   [Anonymous], P VARIABILITY YOU WO
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], MULTIOBJECTIVE APPRO
   [Anonymous], P GEN EV COMP C 2016
   [Anonymous], EUCLIDEAN DISTANCE
   [Anonymous], 2015, P 19 INT C SOFTW PRO
   [Anonymous], 1993, C4.5: Programming for machine learning
   [Anonymous], 201805 RN SR LAB
   Arcuri A, 2011, LECT NOTES COMPUT SC, V6956, P33, DOI 10.1007/978-3-642-23716-4_6
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Baars A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P53, DOI 10.1109/ASE.2011.6100119
   Bagheri E, 2010, LECT NOTES COMPUT SC, V6287, P16, DOI 10.1007/978-3-642-15579-6_2
   Bakar NH, 2015, J SYST SOFTWARE, V106, P132, DOI 10.1016/j.jss.2015.05.006
   Becan G, 2015, SPLC, P1, DOI [10.1145/2791060.2791068, DOI 10.1145/2791060.2791068]
   Cohen W. W., 1995, Machine Learning. Proceedings of the Twelfth International Conference on Machine Learning, P115
   Czarnecki K, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P22, DOI 10.1109/SPLC.2008.49
   Davril Jean-Marc., 2013, JOINT M EUR SOFTW EN, P290, DOI DOI 10.1145/2491411.2491455
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deb K, 2014, IEEE T EVOLUT COMPUT, V18, P577, DOI 10.1109/TEVC.2013.2281535
   Dumitru H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P181, DOI 10.1145/1985793.1985819
   Durillo JJ, 2011, ADV ENG SOFTW, V42, P760, DOI 10.1016/j.advengsoft.2011.05.014
   Eiben AE, 2011, SWARM EVOL COMPUT, V1, P19, DOI 10.1016/j.swevo.2011.02.001
   Frank E., 1998, Machine Learning. Proceedings of the Fifteenth International Conference (ICML'98), P144
   Guerin J., 2017, ARXIV170307625
   Guo JM, 2019, SOFTW SYST MODEL, V18, P1447, DOI 10.1007/s10270-017-0610-0
   Han J, 2012, MOR KAUF D, P1
   Hariri N, 2013, IEEE T SOFTWARE ENG, V39, P1736, DOI 10.1109/TSE.2013.39
   Harman M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P5, DOI 10.1145/2648511.2648513
   Henard C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P517, DOI 10.1109/ICSE.2015.69
   Holl G, 2012, INFORM SOFTWARE TECH, V54, P828, DOI 10.1016/j.infsof.2012.02.002
   Holmes G, 1999, LECT NOTES ARTIF INT, V1747, P1
   Jain H, 2014, IEEE T EVOLUT COMPUT, V18, P602, DOI 10.1109/TEVC.2013.2281534
   Kollat JB, 2006, ADV WATER RESOUR, V29, P792, DOI 10.1016/j.advwatres.2005.07.010
   Konak A, 2006, RELIAB ENG SYST SAFE, V91, P992, DOI 10.1016/j.ress.2005.11.018
   Leimbach A, 2016, GENOME ANNOUNCEMENTS, V4, DOI 10.1128/genomeA.00753-16
   Li Yi, 2012, 2012 IEEE 20th International Requirements Engineering Conference (RE 2012), P141, DOI 10.1109/RE.2012.6345798
   LLOYD SP, 1982, IEEE T INFORM THEORY, V28, P129, DOI 10.1109/TIT.1982.1056489
   Lopez-Herrejon RE, 2015, INFORM SOFTWARE TECH, V61, P33, DOI 10.1016/j.infsof.2015.01.008
   Lu H, 2016, INFORM SOFTWARE TECH, V72, P68, DOI 10.1016/j.infsof.2015.12.004
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   Marler RT, 2004, STRUCT MULTIDISCIP O, V26, P369, DOI 10.1007/s00158-003-0368-6
   Mazo R., 2014, Recommendation Systems in Software Engineering, P511, DOI 10.1007/978-3-642-45135-5
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Mkaouer MW, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P61, DOI 10.1109/CMSBSE.2013.6605712
   Mkaouer W, 2014, GECCO'14: PROCEEDINGS OF THE 2014 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1263, DOI 10.1145/2576768.2598366
   Nadi S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P140, DOI 10.1145/2568225.2568283
   Nadi S, 2015, IEEE T SOFTWARE ENG, V41, P820, DOI 10.1109/TSE.2015.2415793
   Nie KM, 2013, LECT NOTES COMPUT SC, V8107, P370, DOI 10.1007/978-3-642-41533-3_23
   Ouni A, 2013, GECCO'13: PROCEEDINGS OF THE 2013 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1461
   Pradhan D, 2021, IEEE T SOFTWARE ENG, V47, P86, DOI 10.1109/TSE.2018.2882176
   Pradhan D, 2017, IEEE INT CONF SOFTW, P367, DOI 10.1109/ICST.2017.40
   Pradhan D, 2016, LECT NOTES COMPUT SC, V9976, P172, DOI 10.1007/978-3-319-47443-4_11
   Rosenmuller Marko., 2010, VAMOS, P123
   Safdar SA, 2017, PROCEEDINGS OF THE 2017 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE (GECCO'17), P1319, DOI 10.1145/3071178.3071261
   Safdar SA, 2016, LECT NOTES COMPUT SC, V9959, P1, DOI 10.1007/978-3-319-46613-2_1
   Sarro F, 2016, PROC INT CONF SOFTW, P619, DOI 10.1145/2884781.2884830
   Sayyad AS, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P492, DOI 10.1109/ICSE.2013.6606595
   Sayyad AS, 2013, IEEE INT CONF AUTOM, P465, DOI 10.1109/ASE.2013.6693104
   Sheskin DJ., 2003, HDB PARAMETRIC NONPA, DOI [10.1201/9781420036268, DOI 10.1201/9781420036268]
   Sokolova M, 2009, INFORM PROCESS MANAG, V45, P427, DOI 10.1016/j.ipm.2009.03.002
   Temple Paul, 2016, P 20 INT SYST SOFTW, P209
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Wang S, 2016, PROC INT CONF SOFTW, P631, DOI 10.1145/2884781.2884880
   Wang S, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P32, DOI 10.1145/2648511.2648515
   Wang S, 2015, J SYST SOFTWARE, V103, P370, DOI 10.1016/j.jss.2014.08.024
   Weng Y, 2006, PROCEEDINGS OF THE 2006 INTERNATIONAL CONFERENCE ON MANAGEMENT SCIENCE & ENGINEERING (13TH), VOLS 1-3, P827
   Witten I. H., 2005, DATA MINING PRACTICA
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Wu J, 2016, J SEISM EXPLOR, V25, P1
   Wu XD, 2008, KNOWL INF SYST, V14, P1, DOI 10.1007/s10115-007-0114-2
   Yu Yun-Chao., 2013, VLSI Test Symposium (VTS), 2013 IEEE 31st, P1, DOI DOI 10.1145/2532443.2532453
   Zhang B., 2013, P 7 INT WORKSH VAR M, P19
NR 76
TC 4
Z9 4
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2020
VL 27
IS 1-2
BP 1
EP 62
DI 10.1007/s10515-019-00266-2
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LU4VK
UT WOS:000537754800001
OA Green Published
DA 2024-07-18
ER

PT J
AU Richter, C
   Hüllermeier, E
   Jakobs, MC
   Wehrheim, H
AF Richter, Cedric
   Huellermeier, Eyke
   Jakobs, Marie-Christine
   Wehrheim, Heike
TI Algorithm selection for software validation based on graph kernels
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Algorithm selection; Software validation; Machine learning; Graph
   kernels; Verification; Testing
ID BENCHMARKING; METRICS
AB Algorithm selection is the task of choosing an algorithm from a given set of candidate algorithms when faced with a particular problem instance. Algorithm selection via machine learning (ML) has recently been successfully applied for various problem classes, including computationally hard problems such as SAT. In this paper, we study algorithm selection for software validation, i.e., the task of choosing a software validation tool for a given validation instance. A validation instance consists of a program plus properties to be checked on it. The application of machine learning techniques to this task first of all requires an appropriate representation of software. To this end, we propose a dedicated kernel function, which compares two programs in terms of their similarity, thus making the algorithm selection task amenable to kernel-based machine learning methods. Our kernel operates on a graph representation of source code mixing elements of control-flow and program-dependence graphs with abstract syntax trees. Thus, given two such representations as input, the kernel function yields a real-valued score that can be interpreted as a degree of similarity. We experimentally evaluate our kernel in two learning scenarios, namely a classification and a ranking problem: (1) selecting between a verification and a testing tool for bug finding (i.e., property violation), and (2) ranking several verification tools, from presumably best to worst, for property proving. The evaluation, which is based on data sets from the annual software verification competition SV-COMP, demonstrates our kernel to generalize well and to achieve rather high prediction accuracy, both for the classification and the ranking task.
C1 [Richter, Cedric; Huellermeier, Eyke; Wehrheim, Heike] Paderborn Univ, Paderborn, Germany.
   [Jakobs, Marie-Christine] Tech Univ Darmstadt, Dept Comp Sci, Darmstadt, Germany.
C3 University of Paderborn; Technical University of Darmstadt
RP Wehrheim, H (corresponding author), Paderborn Univ, Paderborn, Germany.
EM cedricr@mail.uni-paderborn.de; eyke@upb.de; jakobs@cs.tu-darmstadt.de;
   wehrheim@upb.de
OI Jakobs, Marie-Christine/0000-0002-5890-4673
FU Projekt DEAL
FX Open Access funding provided by Projekt DEAL.
CR Albarghouthi Aws, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P672, DOI 10.1007/978-3-642-31424-7_48
   ALLAMANIS M, 2017, ARXIV171100740 CORR
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   Amerise IL, 2015, J APPL STAT, V42, P2584, DOI 10.1080/02664763.2015.1043870
   [Anonymous], P 2014 INT SPIN S MO
   [Anonymous], 1984, The Interpretation of Ecological Data
   Apel Sven, 2013, Hardware and Software: Verification and Testing. 9th International Haifa Verification Conference, HVC 2013. Proceedings: LNCS 8244, P262, DOI 10.1007/978-3-319-03077-7_18
   Beyer Dirk, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Verification. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11245), P144, DOI 10.1007/978-3-030-03421-4_11
   BEYER D, 2011, LECT NOTES COMPUTER, V6806, P184, DOI DOI 10.1007/978-3-642-22110-1
   Beyer D, 2019, INT J SOFTW TOOLS TE, V21, P1, DOI 10.1007/s10009-017-0469-y
   Beyer D, 2017, LECT NOTES COMPUT SC, V10206, P331, DOI 10.1007/978-3-662-54580-5_20
   Beyer D, 2015, LECT NOTES COMPUT SC, V9232, P20, DOI 10.1007/978-3-319-23404-5_3
   Beyer Dirk., 2017, HARDWARE SOFTWARE VE, P99
   Bischl B, 2016, ARTIF INTELL, V237, P41, DOI 10.1016/j.artint.2016.04.003
   Borgwardt K. M., 2005, ICDM, DOI DOI 10.1109/ICDM.2005.132
   Boser B. E., 1992, Proceedings of the Fifth Annual ACM Workshop on Computational Learning Theory, P144, DOI 10.1145/130385.130401
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   CHALUPA M, 2017, LNCS, P385, DOI DOI 10.1007/978-3-662-54580-528
   Chen YF, 2016, PROC INT CONF SOFTW, P714, DOI 10.1145/2884781.2884860
   Czech Mike., 2017, Proceedings of the 3rd ACM SIGSOFT International Workshop on Software Analytics, SWAN 2017, P23, DOI DOI 10.1145/3121257.3121262
   de Borda JC, 1781, HIST ACAD ROYALE SCI
   Demyanova Y, 2017, FORM METHOD SYST DES, V50, P289, DOI 10.1007/s10703-016-0264-5
   Demyanova Y, 2015, LECT NOTES COMPUT SC, V9206, P561, DOI 10.1007/978-3-319-21690-4_39
   Fürnkranz J, 2002, J MACH LEARN RES, V2, P721, DOI 10.1162/153244302320884605
   Gadelha MR, 2018, IEEE INT CONF AUTOM, P888, DOI 10.1145/3238147.3240481
   Gärtner T, 2008, SER MACH PERCEPT ART, V72, P1
   Gamma Erich, 1995, DESIGN PATTERNS ELEM
   Gärtner T, 2003, LECT NOTES ARTIF INT, V2777, P129, DOI 10.1007/978-3-540-45167-9_11
   GREITSCHUS M, 2017, LNCS 2, P399, DOI DOI 10.1007/978-3-662-54580-5_31
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Habib A, 2018, TOPOGRAPHIC LASER RANGING AND SCANNING: PRINCIPLES AND PROCESSING, 2ND EDITION, P413
   Hamilton WL, 2017, ADV NEUR IN, V30
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Helmert Malte., 2011, International Conference on Automated Planning and Scheduling, P28
   HORWITZ S, 1992, 14TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING : PROCEEDINGS, P392
   Hüllermeier E, 2008, ARTIF INTELL, V172, P1897, DOI 10.1016/j.artint.2008.08.002
   Hüllermeier E, 2010, J COMPUT SYST SCI, V76, P49, DOI 10.1016/j.jcss.2009.05.005
   Kashima H., 2003, P 20 INT C MACHINE L, P321
   Kondor R. I., 2002, P 19 INT C MACH LEAR, P315
   Kotthoff L, 2012, AI COMMUN, V25, P257, DOI 10.3233/AIC-2012-0533
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   LAU T, 2001, THESIS
   Le T.-D. B., 2016, P 25 INT S SOFTW TES, P177, DOI DOI 10.1145/2931037.2931049
   Li WC, 2016, LECT NOTES COMPUT SC, V9679, P315, DOI 10.1007/978-3-319-35122-3_21
   MCTEAR M, 2016, CONVERSATIONAL INTER, P102
   Nutz Alexander, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P458, DOI 10.1007/978-3-662-46681-0_44
   PLATT J, 1999, ADV LARGE MARGIN CLA, P6
   Pradel M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276517
   Rakamaric Z, 2014, LECT NOTES COMPUT SC, V8559, P106, DOI 10.1007/978-3-319-08867-9_7
   Ralaivola L, 2005, NEURAL NETWORKS, V18, P1093, DOI 10.1016/j.neunet.2005.07.009
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P761, DOI 10.1145/2914770.2837671
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Rice J. R., 1976, Advances in computers, vol.15, P65, DOI 10.1016/S0065-2458(08)60520-3
   Richter C, 2019, LECT NOTES COMPUT SC, V11429, P229, DOI 10.1007/978-3-030-17502-3_19
   Rocha W, 2017, LECT NOTES COMPUT SC, V10206, P360, DOI 10.1007/978-3-662-54580-5_23
   Sahs J., 2012, 2012 European Intelligence and Security Informatics Conference (EISIC), P141, DOI 10.1109/EISIC.2012.34
   Scholkopf B., 2002, Learning with Kernels
   Schrammel P, 2016, LECT NOTES COMPUT SC, V9636, P905, DOI [10.1007/978-3-662-49674-9_56, 10.1007/97-3-662-49674-9_56]
   Shawe-Taylor John, 2004, KERNEL METHODS PATTE
   Shervashidze N, 2011, J MACH LEARN RES, V12, P2539
   Spearman C, 1904, AM J PSYCHOL, V15, P72, DOI 10.2307/1412159
   Tulsian Varun, 2014, P MSR ACM, P132, DOI [10.1145/2597073. 2597080, DOI 10.1145/2597073.2597080]
   Vembu S, 2010, PREFERENCE LEARNING, P45, DOI 10.1007/978-3-642-14125-6_3
   Wagner C, 2009, 2009 4TH INTERNATIONAL CONFERENCE ON MALICIOUS AND UNWANTED SOFTWARE (MALWARE 2009), P63, DOI 10.1109/MALWARE.2009.5403018
   Weisfeiler B., 1968, Nauchno-Technicheskaya Informatsiya, V2, P12
   Wendler P, 2013, LECT NOTES COMPUT SC, V7795, P613, DOI 10.1007/978-3-642-36742-7_45
   Wu Zonghan, 2019, ARXIV190100596 CORR
   Xu K, 2019, IEEE VTS VEH TECHNOL, DOI [10.1109/vtcfall.2019.8891597, 10.1109/biocas.2019.8918711]
   Xu L, 2008, J ARTIF INTELL RES, V32, P565, DOI 10.1613/jair.2490
   YEFET N, 2019, ARXIV191007517 CORR
NR 72
TC 14
Z9 14
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2020
VL 27
IS 1-2
BP 153
EP 186
DI 10.1007/s10515-020-00270-x
EA APR 2020
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LU4VK
UT WOS:000527457400001
OA hybrid
DA 2024-07-18
ER

PT J
AU Legunsen, O
   Al Awar, N
   Xu, XY
   Ul Hassan, W
   Rosu, G
   Marinov, D
AF Legunsen, Owolabi
   Al Awar, Nader
   Xu, Xinyue
   Ul Hassan, Wajih
   Rosu, Grigore
   Marinov, Darko
TI How effective are existing Java API specifications for finding bugs
   during runtime verification?
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Runtime verification; Monitoring-oriented programming; Specification
   quality; Software testing; Empirical study
ID MINING TEMPORAL SPECIFICATIONS; IMPROVE
AB Runtime verification can be used to find bugs early, during software development, by monitoring test executions against formal specifications (specs). The quality of runtime verification depends on the quality of the specs. While previous research has produced many specs for the Java API, manually or through automatic mining, there has been no large-scale study of their bug-finding effectiveness. Our conference paper presented the first in-depth study of the bug-finding effectiveness of previously proposed specs. We used JavaMOP to monitor 182 manually written and 17 automatically mined specs against more than 18K manually written and 2.1M automatically generated test methods in 200 open-source projects. The average runtime overhead was under 4.3x. We inspected 652 violations of manually written specs and (randomly sampled) 200 violations of automatically mined specs. We reported 95 bugs, out of which developers already fixed or accepted 76. However, most violations, 82.81% of 652 and 97.89% of 200, were false alarms. Based on our empirical results, we conclude that (1) runtime verification technology has matured enough to incur tolerable runtime overhead during testing, and (2) the existing API specifications can find many bugs that developers are willing to fix; however, (3) the false alarm rates are worrisome and suggest that substantial effort needs to be spent on engineering better specs and properly evaluating their effectiveness. We repeated our experiments on a different set of 18 projects and inspected all resulting 742 violations. The results are similar, and our conclusions are the same.
C1 [Legunsen, Owolabi; Xu, Xinyue; Ul Hassan, Wajih; Rosu, Grigore; Marinov, Darko] Univ Illinois, Urbana, IL 61801 USA.
   [Al Awar, Nader] Amer Univ Beirut, Beirut, Lebanon.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   American University of Beirut
RP Legunsen, O (corresponding author), Univ Illinois, Urbana, IL 61801 USA.
EM legunse2@illinois.edu; nma85@mail.aub.edu; silviaxxy@gmail.com;
   whassan3@illinois.edu; grosu@illinois.edu; marinov@illinois.edu
RI Xu, Xinyue/AAH-7693-2019
FU NSF [CCF-1421503, CCF-1421575, CCF-1438982, CCF-1439957, CNS-1646305,
   CNS-1740916, CCF-1763788]; Sohaib and Sara Abassi Fellowship
FX Karl Hajal, Milica Hadzi-Tanovic and Igor Lima helped with inspecting
   violations in our validation study and submitting pull requests. We
   thank Alex Gyori, Farah Hariri, Cosmin Radoi, and August Shi for
   feedback on early drafts of this paper, Rahul Gopinath for discussions
   and help with Randoop, and He Xiao and Yi Zhang for help with JavaMOP.
   We also thank all authors of papers who replied to our emails concerning
   their mined specs. This research was partially supported by the NSF
   Grants CCF-1421503, CCF-1421575, CCF-1438982, CCF-1439957, CNS-1646305,
   CNS-1740916, and CCF-1763788. Wajih Ul Hassan was partially supported by
   the Sohaib and Sara Abassi Fellowship. We gratefully acknowledge support
   for research on testing from Microsoft and Qualcomm.
CR Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   Nguyen AC, 2011, LECT NOTES COMPUT SC, V6991, P472, DOI 10.1007/978-3-642-24559-6_32
   [Anonymous], 2013, ISSTA 2013, P280
   [Anonymous], 2008, ISSTA
   [Anonymous], 2010, P 26 IEEE INT C SOFT, DOI DOI 10.1109/ICSM.2010.5609576
   Arnold M, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P143
   Beckman NE, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P211
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden E., 2012, RUNTIME VERIFICATION, P365
   Bodden E., 2008, P 16 ACM SIGSOFT INT, P36, DOI [10.1145/1453101.1453109, DOI 10.1145/1453101.1453109]
   Bodden E, 2007, LECT NOTES COMPUT SC, V4839, P22
   Bodden E, 2007, LECT NOTES COMPUT SC, V4609, P525
   Chen D., 2015, SEKE, P471
   Chen F., 2003, RUNTIME VERIFICATION, P108, DOI DOI 10.1016/S1571-0661
   Cochran W.G., 1977, Sampling techniques, V3rd ed.
   Dallmeier V., 2010, P 19 INT S SOFTWARE, P85, DOI [DOI 10.1145/1831708.1831719, 10.1145/1831708.1831719]
   Dwyer MB, 2010, LECT NOTES COMPUT SC, V6418, P36, DOI 10.1007/978-3-642-16612-9_4
   Emopers, 2015, CLOS OBJECTOUTPUTSTR
   Emopers, 2019, CHECK VAL INP LISTIT
   Forejt V., 2012, LNCS, V7687, P314, DOI DOI 10.1007/978-3-642-35632-2_
   Formal Systems Laboratory, 2014, JAVAMOP
   Formal Systems Laboratory, 2015, JAVAMOPAGENT DOC
   Formal Systems Laboratory, 2015, COLL SYNCHRONIZEDCOL
   Formal Systems Laboratory, 2016, FSL SPEC DAT
   Gabel M., 2010, ICSE, P15
   Gabel Mark., 2012, Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, P1
   Nguyen HA, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P166, DOI 10.1145/2635868.2635924
   Jin D., 2012, TECHNICAL REPORT
   Jin D, 2012, PROC INT CONF SOFTW, P1427, DOI 10.1109/ICSE.2012.6227231
   Jin D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P415
   Joda S, 2016, JODA TIME
   Karaorman M, 2005, ELECTRON NOTES THEOR, V113, P181, DOI 10.1016/j.entcs.2004.01.027
   Krka I, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P178, DOI 10.1145/2635868.2635890
   Le Goues C, 2009, LECT NOTES COMPUT SC, V5505, P292, DOI 10.1007/978-3-642-00768-2_26
   Lee C. M., 2012, TECHNICAL REPORT
   Lee C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P591, DOI 10.1145/1985793.1985874
   Legunsen O., 2016, SUPPLEMENTARY MAT TH
   Legunsen O, 2019, IEEE INT CONF SOFTW, P300, DOI 10.1109/ICST.2019.00037
   Legunsen O, 2017, IEEE INT CONF AUTOM, P949, DOI 10.1109/ASE.2017.8115710
   Legunsen O, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P583, DOI 10.1145/295029.2950361
   Legunsen O, 2016, IEEE INT CONF AUTOM, P602, DOI 10.1145/2970276.2970356
   Legunsen O, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P615, DOI 10.1109/ICSE.2015.206
   Lemieux C, 2015, IEEE INT CONF AUTOM, P81, DOI 10.1109/ASE.2015.71
   Lemieux C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P751, DOI 10.1109/ICSE.2015.238
   Ley M, 2015, COMPLETESEARCH DBLP
   Luo QZ, 2014, LECT NOTES COMPUT SC, V8734, P285, DOI 10.1007/978-3-319-11164-3_24
   Mao DY, 2019, IEEE INT CONF SOFTW, P160, DOI 10.1109/ICST.2019.00025
   MEREDITH P, 2008, AUTOMAT SOFTW ENG, P148
   Meredith P, 2013, IEEE INT CONF AUTOM, P70, DOI 10.1109/ASE.2013.6693067
   Navabpour S., 2012, Proceedings of the Second international conference on Runtime verification, RV'11, P208
   Oracle, 2015, JAV LANG MATH
   Oracle, 2015, JAV LANG INSTR
   Oracle, 2015, JAV UT COLL
   Oracle, 2015, JAV NET
   Pacheco C., 2007, OOPSLA 2007 COMPANIO, P815
   Pacheco C., 2016, RANDOOP
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Pradel M., 2009, Proceedings of the 24th ACM SIGPLAN Conference Companion on Object Oriented Programming Systems Languages and Applications, P773
   Pradel M, 2015, STAT CHECKING API PR
   Pradel M, 2012, PROC INT CONF SOFTW, P288, DOI 10.1109/ICSE.2012.6227185
   Pradel M, 2012, PROC INT CONF SOFTW, P925, DOI 10.1109/ICSE.2012.6227127
   Pradel M, 2009, IEEE INT CONF AUTOM, P371, DOI 10.1109/ASE.2009.60
   Qian Wu, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P233, DOI 10.1109/ASE.2011.6100058
   Reger G, 2013, IEEE INT CONF AUTOM, P658, DOI 10.1109/ASE.2013.6693129
   Robillard MP, 2013, IEEE T SOFTWARE ENG, V39, P613, DOI 10.1109/TSE.2012.63
   Shamshiri S, 2015, IEEE INT CONF AUTOM, P201, DOI 10.1109/ASE.2015.86
   Shin Hwei Tan, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P260, DOI 10.1109/ICST.2012.106
   Sun J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P698, DOI 10.1145/2786805.2786817
   The JaCoCo Team, 2018, JACOCO JAV COD COV L
   Thummalapenta S, 2009, IEEE INT CONF AUTOM, P283, DOI 10.1109/ASE.2009.72
   ULHUSSAIN S, 2012, PLAS, DOI DOI 10.5244/C.26.99
   Wasylkowski A, 2009, IEEE INT CONF AUTOM, P295, DOI 10.1109/ASE.2009.30
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   Wu CWW, 2013, LECT NOTES COMPUT SC, V8174, P304, DOI 10.1007/978-3-642-40787-1_18
   Zhang J, 2019, IEEE T SOFTWARE ENG, V45, P898, DOI 10.1109/TSE.2018.2809496
   Zhang Jie, 2016, P 25 INT S SOFTWARE, P342, DOI [10.1145/2931037, DOI 10.1145/2931037]
   Zhong H, 2009, IEEE INT CONF AUTOM, P307, DOI 10.1109/ASE.2009.94
NR 77
TC 3
Z9 3
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2019
VL 26
IS 4
SI SI
BP 795
EP 837
DI 10.1007/s10515-019-00267-1
EA NOV 2019
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JQ6FZ
UT WOS:000497826900001
DA 2024-07-18
ER

PT J
AU Li, CL
   Tang, JH
   Luo, YL
AF Li, Chunlin
   Tang, Jianhang
   Luo, Youlong
TI Cost-aware scheduling for ensuring software performance and reliability
   under heterogeneous workloads of hybrid cloud
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Hybrid cloud; Heterogeneous workloads; Job scheduling; Software
   performance
ID PLACEMENT; EDGE; OPTIMIZATION; STRATEGY
AB Cloud computing is a rapidly growing paradigm in software engineering that offers different services. The hybrid cloud is the best choice for the enterprise to benefit by taking resources on lease from the public cloud only if private cloud resources are not sufficient. However, the key is how to provide better cloud services and improve software performance in the hybrid cloud for software engineers. In this paper, the efficient job scheduling method in the private cloud is proposed by considering the heterogeneity of hybrid cloud resources to guarantee the software performance and reliability. The experimental results show that the efficient job scheduling method can effectively reduce the average job response time and improve the system throughput. Moreover, the task scheduling method based on BP neural network in the hybrid cloud is proposed by considering both the cost and deadline constraints to ensure the quality of service (QoS) for software. The experimental results show that the task scheduling method can improve the QoS, maximize the resources utilization of private cloud and minimize the cost of hybrid cloud resources.
C1 [Li, Chunlin; Tang, Jianhang; Luo, Youlong] Wuhan Univ Technol, Dept Comp Sci, Wuhan 430063, Hubei, Peoples R China.
   [Li, Chunlin] State Key Lab Digital Publishing Technol, Beijing, Peoples R China.
   [Li, Chunlin] Beihang Univ, State Key Lab Software Dev Environm, Beijing 100191, Peoples R China.
C3 Wuhan University of Technology; Beihang University
RP Li, CL (corresponding author), Wuhan Univ Technol, Dept Comp Sci, Wuhan 430063, Hubei, Peoples R China.; Li, CL (corresponding author), State Key Lab Digital Publishing Technol, Beijing, Peoples R China.; Li, CL (corresponding author), Beihang Univ, State Key Lab Software Dev Environm, Beijing 100191, Peoples R China.
EM chunlin74@aliyun.com
FU National Natural Science Foundation (NSF) [61672397, 61873341];
   Application Foundation Frontier Project of WuHan [2018010401011290];
   Fundamental Research Funds for the Central Universities (WUT)
   [2017-YB-029]; Opening Project of State Key Laboratory of Digital
   Publishing Technology, Beihang University; Opening Project of State Key
   Laboratory of Software Development Environment, Beihang University
FX The work was supported by the National Natural Science Foundation (NSF)
   under grants (No.61672397, No.61873341), Application Foundation Frontier
   Project of WuHan (No. 2018010401011290), the Fundamental Research Funds
   for the Central Universities (WUT No.2017-YB-029), the Opening Project
   of State Key Laboratory of Digital Publishing Technology, the Opening
   Project of State Key Laboratory of Software Development Environment,
   Beihang University. Any opinions, findings, and conclusions are those of
   the authors and do not necessarily reflect the views of the above
   agencies.
CR Abdi S, 2017, FUTURE GENER COMP SY, V71, P113, DOI 10.1016/j.future.2017.01.036
   Abrishami H, 2015, FIFTH INTERNATIONAL CONFERENCE ON THE INNOVATIVE COMPUTING TECHNOLOGY (INTECH 2015), P83, DOI 10.1109/INTECH.2015.7173369
   [Anonymous], COMPUT NETW
   [Anonymous], 2004, International Institute of Information Technology Tech Report
   Arantes L., 2017, INT C DISTR COMP NET, P2
   Balagoni Y., 2017, IEEE INT C COMP INT, P1
   Cao YH, 2017, LECT NOTES COMPUT SC, V10569, P259, DOI 10.1007/978-3-319-68783-4_18
   Chandra A. K., 1976, Theoretical Computer Science, V3, P293, DOI 10.1016/0304-3975(76)90048-7
   Chen KK, 2014, IEEE T PARALL DISTR, V25, P1403, DOI 10.1109/TPDS.2013.297
   Chen M., 2017, IEEE Transactions on Big Data PP, V7, p750 758 750, DOI [DOI 10.1109/TBDATA.2017.2717439, 10.1109/TBDATA.2017. 2717439]
   Chopra N, 2013, 2013 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI), P840, DOI 10.1109/ICACCI.2013.6637285
   Chunlin L, 2015, FUND INFORM, V138, P435, DOI 10.3233/FI-2015-1220
   Clemente-Castelló FJ, 2018, IEEE T PARALL DISTR, V29, P1794, DOI 10.1109/TPDS.2018.2802932
   Clemente-Castelló FJ, 2017, IEEE ACM INT SYMP, P858, DOI 10.1109/CCGRID.2017.146
   Clemente-Castelló FJ, 2015, INT CONF UTIL CLOUD, P290, DOI 10.1109/UCC.2015.47
   Cunha RLF, 2017, FUTURE GENER COMP SY, V67, P35, DOI 10.1016/j.future.2016.08.010
   Farokhi S, 2016, FUTURE GENER COMP SY, V65, P57, DOI 10.1016/j.future.2016.05.028
   Genez Thiago A. L., 2013, 2013 IEEE/ACM 6th International Conference on Utility and Cloud Computing (UCC), P411, DOI 10.1109/UCC.2013.82
   Hwang C. G., 2015, INT J SOFTWARE ENG I, V9, P67
   Kellerer H., 2004, The Multiple-Choice Knapsack Problem, P317, DOI DOI 10.1007/978-3-540-24777-7_11
   Kuhnle A, 2018, IEEE T COMPUT SOC SY, V5, P418, DOI 10.1109/TCSS.2018.2813262
   Li CL, 2019, J PARALLEL DISTR COM, V125, P93, DOI 10.1016/j.jpdc.2018.11.006
   Li CL, 2019, J SYST SOFTWARE, V148, P132, DOI 10.1016/j.jss.2018.11.005
   Li S, 2015, IEEE T SERV COMPUT, V8, P398, DOI 10.1109/TSC.2015.2390413
   Liu Y., 2015, J SOFTW ENG, V9, P33, DOI DOI 10.3923/JSE.2015.33.49
   Liu YH, 2016, INT CONF SOFTW ENG, P1, DOI 10.1109/ICSESS.2016.7883004
   Mell P, 2010, COMMUN ACM, V53, P50
   Patel CA, 2015, 2015 IEEE MTT-S INTERNATIONAL CONFERENCE ON NUMERICAL ELECTROMAGNETIC AND MULTIPHYSICS MODELING AND OPTIMIZATION (NEMO)
   Qiu XJ, 2015, IEEE T PARALL DISTR, V26, P3330, DOI 10.1109/TPDS.2014.2371831
   Rasooli A, 2014, FUTURE GENER COMP SY, V36, P1, DOI 10.1016/j.future.2014.01.002
   Shao YL, 2019, COMPUT NETW, V148, P46, DOI 10.1016/j.comnet.2018.10.017
   Taheri J, 2014, FUTURE GENER COMP SY, V37, P321, DOI 10.1016/j.future.2013.12.020
   Tang HL, 2019, COMPUT COMMUN, V134, P70, DOI 10.1016/j.comcom.2018.11.011
   Wang WJ, 2013, J SUPERCOMPUT, V66, P783, DOI 10.1007/s11227-013-0890-2
   Wei H., 2017, INT C CLOUD COMP, P734
   Weinman J, 2016, IEEE CLOUD COMPUT, V3, P18, DOI 10.1109/MCC.2016.27
   Zhang YY, 2016, 2016 INTERNATIONAL CONFERENCE ON ROBOTS & INTELLIGENT SYSTEM (ICRIS), P47, DOI 10.1109/ICRIS.2016.10
   Zhou YH, 2006, LECT NOTES COMPUT SC, V4288, P494
   Zuo LY, 2017, IEEE ACCESS, V5, P22067, DOI 10.1109/ACCESS.2016.2633288
   Zuo XQ, 2014, IEEE T AUTOM SCI ENG, V11, P564, DOI 10.1109/TASE.2013.2272758
NR 40
TC 5
Z9 6
U1 0
U2 16
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2019
VL 26
IS 1
BP 125
EP 159
DI 10.1007/s10515-019-00252-8
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HL4VT
UT WOS:000458723700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Lessenich, O
   Siegmund, J
   Apel, S
   Kästner, C
   Hunsen, C
AF Lessenich, Olaf
   Siegmund, Janet
   Apel, Sven
   Kastner, Christian
   Hunsen, Claus
TI Indicators for merge conflicts in the wild: survey and empirical study
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Version control; Merging; Merge conflicts; Distributed development
ID SOFTWARE
AB While the creation of new branches and forks is easy and fast with modern version-control systems, merging is often time-consuming. Especially when dealing with many branches or forks, a prediction of merge costs based on lightweight indicators would be desirable to help developers recognize problematic merging scenarios before potential conflicts become too severe in the evolution of a complex software project. We analyze the predictive power of several indicators, such as the number, size or scattering degree of commits in each branch, derived either from the version-control system or directly from the source code. Based on a survey of 41 developers, we inferred 7 potential indicators to predict the number of merge conflicts. We tested corresponding hypotheses by studying 163 open-source projects, including 21,488 merge scenarios and comprising 49,449,773 lines of code. A notable (negative) result is that none of the 7 indicators suggested by the participants of the developer survey has a predictive power concerning the frequency of merge conflicts. We discuss this and other findings as well as perspectives thereof.
C1 [Lessenich, Olaf; Siegmund, Janet; Apel, Sven; Hunsen, Claus] Univ Passau, Passau, Germany.
   [Kastner, Christian] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 University of Passau; Carnegie Mellon University
RP Lessenich, O (corresponding author), Univ Passau, Passau, Germany.
EM lessenic@fim.uni-passau.de; siegmunj@fim.uni-passau.de;
   apel@fim.uni-passau.de; kaestner@cs.cmu.edu; hunsen@fim.uni-passau.de
OI Lessenich, Olaf/0000-0002-8996-1996; Apel, Sven/0000-0003-3687-2233
FU German Research Foundation [AP 206/4, AP 206/5, AP 206/6]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1552944] Funding Source: National Science Foundation
FX We thank all survey participants for their insightful comments and
   suggestions. This work has been supported by the German Research
   Foundation (AP 206/4, AP 206/5, and AP 206/6).
CR Anderson T.W., 1996, NEW STAT ANAL DATA
   [Anonymous], 2013, JOINT M EUR SOFTW EN, DOI DOI 10.1145/2491411.2491446
   Antkiewicz M, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P532, DOI 10.1145/2591062.2591126
   Apel S., 2011, P 19 ACM SIGSOFT S 1, P190, DOI DOI 10.1145/2025113.2025141
   Berger Thorsten, 2013, 7 INT WORKSH VAR MOD, DOI DOI 10.1145/2430502.2430513
   Bettenburg Nicolas, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P124, DOI 10.1109/ICPC.2010.46
   Biehl JT, 2007, CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1 AND 2, P1313
   Bird C., 2012, P ACM SIGSOFT 20 INT, P1, DOI [10.1145/2393596.2393648, DOI 10.1145/2393596.2393648]
   Brun Y., 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European Conference on Foundations of Software Engineering (FSE'11), P168, DOI [10.1145/2025113.2025139, DOI 10.1145/2025113.2025139]
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Dewan P, 2007, ECSCW 2007: PROCEEDINGS OF THE 10TH EUROPEAN CONFERENCE ON COMPUTER-SUPPORTED COOPERATIVE WORK, P159, DOI 10.1007/978-1-84800-031-5_9
   Dig D, 2008, IEEE T SOFTWARE ENG, V34, P321, DOI 10.1109/TSE.2008.29
   Dubinsky Y, 2013, EUR CON SFTWR MTNCE, P25, DOI 10.1109/CSMR.2013.13
   Duszynski S., 2011, 2011 18th Working Conference on Reverse Engineering, P303, DOI 10.1109/WCRE.2011.44
   Emam KE, 2001, IEEE T SOFTWARE ENG, V27, P630, DOI 10.1109/32.935855
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   Guimaraes ML, 2012, PROC INT CONF SOFTW, P342, DOI 10.1109/ICSE.2012.6227180
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Hattori L., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P235, DOI 10.1145/1810295.1810339
   Hudson W., 2013, GUIDE ADV EMPIRICAL
   Jedlitschka A, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P92, DOI 10.1109/ISESE.2005.1541818
   Joblin M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P563, DOI 10.1109/ICSE.2015.73
   Kim M, 2007, PROC INT CONF SOFTW, P333
   Lessenich O., 2014, AUTOMAT SOFTW ENG, V22, P1
   Mahouachi R., 2013, P 15 ANN C COMPANION, P205, DOI [10.1145/2464576.2464680, DOI 10.1145/2464576.2464680]
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Muslu K., 2010, P ICSE, P334
   Nagappan N., 2010, MAKING SOFTWARE WHAT, P415
   Pinzger M., 2003, PFE 2003, P332, DOI DOI 10.1007/978-3-540-24667-1
   Potdar A., 2014, P ICSME
   Rubin J., 2013, SPLC, P101
   Ryssel U., 2010, GPCE '10, 9th International Conference on Generative Programming and Component Engineering, P23
   Sarma A, 2003, PROC INT CONF SOFTW, P444, DOI 10.1109/ICSE.2003.1201222
   Sarma A, 2012, IEEE T SOFTWARE ENG, V38, P889, DOI 10.1109/TSE.2011.64
   Siegmund J, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P9, DOI 10.1109/ICSE.2015.24
   Siegmund J, 2015, EMPIR SOFTW ENG, V20, P1159, DOI 10.1007/s10664-014-9318-8
   Stanciulescu S, 2015, PROC IEEE INT CONF S, P151, DOI 10.1109/ICSM.2015.7332461
   Staples M, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P176, DOI 10.1109/APSEC.2004.50
   Tian Y, 2012, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2012.6227176
NR 39
TC 23
Z9 25
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2018
VL 25
IS 2
BP 279
EP 313
DI 10.1007/s10515-017-0227-0
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GF3PN
UT WOS:000431868200004
DA 2024-07-18
ER

PT J
AU Heitmeyer, CL
   Pickett, M
   Leonard, EI
   Archer, MM
   Ray, I
   Aha, DW
   Trafton, JG
AF Heitmeyer, Constance L.
   Pickett, Marc
   Leonard, Elizabeth I.
   Archer, Myla M.
   Ray, Indrakshi
   Aha, David W.
   Trafton, J. Gregory
TI Building high assurance human-centric decision systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE High assurance; Formal models; Formal methods; Adaptive agents;
   Cognitive models; Formal model synthesis from scenarios; User model
   synthesis; User scenarios; System and software requirements
ID MODEL CHECKING; BEHAVIOR MODELS; REQUIREMENTS
AB Many future decision support systems will be human-centric, i.e., require substantial human oversight and control. Because these systems often provide critical services, high assurance is needed that they satisfy their requirements. This paper, the product of an interdisciplinary research team of experts in formal methods, adaptive agents, and cognitive science, addresses this problem by proposing a new process for developing high assurance human-centric decision systems. This process uses AI (artificial intelligence) methods-i.e., a cognitive model to predict human behavior and an adaptive agent to assist the human-to improve system performance, and software engineering methods-i.e., formal modeling and analysis-to obtain high assurance that the system behaves as intended. The paper describes a new method for synthesizing a formal system model from Event Sequence Charts, a variant of Message Sequence Charts, and a Mode Diagram, a specification of system modes and mode transitions. It also presents results of a new pilot study investigating the optimal level of agent assistance for different users in which the agent design was evaluated using synthesized user models. Finally, it reviews a cognitive model for predicting human overload in complex human-centric systems. To illustrate the development process and our new techniques, we describe a human-centric decision system for controlling unmanned vehicles.
C1 [Heitmeyer, Constance L.; Leonard, Elizabeth I.; Archer, Myla M.; Aha, David W.; Trafton, J. Gregory] Naval Res Lab, Washington, DC 20375 USA.
   [Pickett, Marc] Google Inc, Mountain View, CA 94043 USA.
   [Ray, Indrakshi] Colorado State Univ, Ft Collins, CO 80523 USA.
C3 United States Department of Defense; United States Navy; Naval Research
   Laboratory; Google Incorporated; Colorado State University
RP Heitmeyer, CL (corresponding author), Naval Res Lab, Washington, DC 20375 USA.
EM constance.heitmeyer@nrl.navy.mil; marcpickett1@gmail.com;
   elizabeth.leonard@nrl.navy.mil; myla.archer@nrl.navy.mil;
   iray@cs.colostate.edu; david.aha@nrl.navy.mil; greg.trafton@nrl.navy.mil
RI Heitmeyer, Constance/AAM-4686-2021
OI Heitmeyer, Constance/0000-0001-7942-9309
FU Office of Naval Research
FX We gratefully acknowledge the contributions of Len Breslow to the
   research on cognitive models, of Carolyn Gasarch of NRL who built the
   prototype model synthesis tool, and of Michael Thomas of the University
   of Maryland who applied the synthesis tool to the UGV applications. This
   research is supported by the Office of Naval Research.
CR Alspaugh T. A., 1992, NRL9194
   Alur R, 1999, LECT NOTES COMPUT SC, V1664, P114
   [Anonymous], 2013, NY TIMES
   [Anonymous], 2011, NY TIMES
   [Anonymous], MACHINE LEARNING /
   [Anonymous], 1996, Signal detection theory and ROC analysis in psychology and diagnostics: Collected papers
   Archer M, 2000, ANN MATH ARTIF INTEL, V29, P139, DOI 10.1023/A:1018913028597
   Bharadwaj R., 2000, P 19 DIG AV SYST C D
   Boussemart Y., 2008, P 1 INT C HUM OP UNM
   Breslow LA, 2014, IEEE T HUM-MACH SYST, V44, P30, DOI 10.1109/TSMC.2013.2293317
   Crandall JW, 2005, IEEE T SYST MAN CY A, V35, P438, DOI 10.1109/TSMCA.2005.850587
   Cummings ML, 2008, IEEE T SYST MAN CY A, V38, P451, DOI 10.1109/TSMCA.2007.914757
   Damas C, 2005, IEEE T SOFTWARE ENG, V31, P1056, DOI 10.1109/TSE.2005.138
   Damas C, 2009, PROC INT CONF SOFTW, P441, DOI 10.1109/ICSE.2009.5070543
   DSB: The role of autonomy in DoD systems, 2012, DSB ROL AUT DOD SYST
   Fawcett T, 2006, PATTERN RECOGN LETT, V27, P861, DOI 10.1016/j.patrec.2005.10.010
   Gargantini A, 1999, LECT NOTES COMPUT SC, V1687, P146, DOI 10.1145/318774.318939
   Gartenberg D., 2013, Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, Paris, France, P3121
   Giannakopoulou D., 2003, Software Engineering Notes, V28, P257, DOI 10.1145/949952.940106
   Gray WD, 2000, J EXP PSYCHOL-APPL, V6, P322, DOI 10.1037//1076-898X.6.4.322
   Hanke M, 2009, NEUROINFORMATICS, V7, P37, DOI 10.1007/s12021-008-9041-y
   Heitmeyer C, 1998, IEEE T SOFTWARE ENG, V24, P927, DOI 10.1109/32.730543
   Heitmeyer C, 2005, COMPUT SYST SCI ENG, V20, P19
   Heitmeyer C., 2013, Perspectives on the Future of Software Engineering, P49, DOI [10.1007/978-3-642-37395-4_4, DOI 10.1007/978-3-642-37395-4_4]
   Heitmeyer C., 2013, P 2 INT NSF SPONS WO
   Heitmeyer C., 2007, P IEEE AER C BIG SKY, P84
   Heitmeyer C. L., 1996, ACM Transactions on Software Engineering and Methodology, V5, P231, DOI 10.1145/234426.234431
   Heitmeyer CL, 2008, IEEE T SOFTWARE ENG, V34, P82, DOI 10.1109/TSE.2007.70772
   HENINGER KL, 1980, IEEE T SOFTWARE ENG, V6, P2, DOI 10.1109/TSE.1980.230208
   Jeffords R., 1998, Software Engineering Notes, V23, P56, DOI 10.1145/291252.288218
   Jeffords Ralph D., 2003, ESEC/FSE-11: Proceedings of the 9th European software engineering conference, with FSE, P28
   JUST MA, 1976, COGNITIVE PSYCHOL, V8, P441, DOI 10.1016/0010-0285(76)90015-3
   Kira K, 1992, P 9 INT WORKSH MACH, P249
   Leonard E. I., 2003, Higher-Order and Symbolic Computation, V16, P63, DOI 10.1023/A:1023072104553
   Leonard E. I., 2012, 2012 10th IEEE/ACM International Conference on Formal Methods and Models for Codesign (MEMOCODE 2012), P119, DOI 10.1109/MEMCOD.2012.6292308
   Pickett M., 2013, FLAIRS Conference, (Orlando, FL , USA), P112
   Ratwani RM, 2011, HUM-COMPUT INTERACT, V26, P205, DOI 10.1080/07370024.2011.601692
   Rayner K, 1998, PSYCHOL BULL, V124, P372, DOI 10.1037/0033-2909.124.3.372
   Rayner K., 1990, From eye to mind. Information acquisition in perception, search, P191
   Rothamel T., 2006, P ACM SIGPLAN SIGBED
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   Suc D, 2004, LECT NOTES COMPUT SC, V3201, P407
   Uchitel S, 2003, IEEE T SOFTWARE ENG, V29, P99, DOI 10.1109/TSE.2003.1178048
   Uchitel S, 2009, IEEE T SOFTWARE ENG, V35, P384, DOI 10.1109/TSE.2008.107
   Whittle J., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P314, DOI 10.1109/ICSE.2000.870422
NR 45
TC 8
Z9 8
U1 2
U2 26
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2015
VL 22
IS 2
SI SI
BP 159
EP 197
DI 10.1007/s10515-014-0157-z
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE0EI
UT WOS:000351476900003
DA 2024-07-18
ER

PT J
AU Canali, C
   Lancellotti, R
AF Canali, Claudia
   Lancellotti, Riccardo
TI Exploiting ensemble techniques for automatic virtual machine clustering
   in cloud systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Clustering; Clustering ensemble; Bhattacharyya distance; Cloud computing
ID MANAGEMENT
AB Cloud computing has recently emerged as a new paradigm to provide computing services through large-size data centers where customers may run their applications in a virtualized environment. The advantages of cloud in terms of flexibility and economy encourage many enterprises to migrate from local data centers to cloud platforms, thus contributing to the success of such infrastructures. However, as size and complexity of cloud infrastructures grow, scalability issues arise in monitoring and management processes. Scalability issues are exacerbated because available solutions typically consider each virtual machine (VM) as a black box with independent characteristics, which is monitored at a fine-grained granularity level for management purposes, thus generating huge amounts of data to handle. We claim that scalability issues can be addressed by leveraging the similarity between VMs in terms of resource usage patterns. In this paper, we propose an automated methodology to cluster similar VMs starting from their resource usage information, assuming no knowledge of the software executed on them. This is an innovative methodology that combines the Bhattacharyya distance and ensemble techniques to provide a stable evaluation of similarity between probability distributions of multiple VM resource usage, considering both system- and network-related data. We evaluate the methodology through a set of experiments on data coming from an enterprise data center. We show that our proposal achieves high and stable performance in automatic VMs clustering, with a significant reduction in the amount of data collected which allows to lighten the monitoring requirements of a cloud data center.
C1 [Canali, Claudia; Lancellotti, Riccardo] Univ Modena & Reggio Emilia, Dept Engn Enzo Ferrari, Modena, Italy.
C3 Universita di Modena e Reggio Emilia
RP Canali, C (corresponding author), Univ Modena & Reggio Emilia, Dept Engn Enzo Ferrari, Modena, Italy.
EM claudia.canali@unimore.it; riccardo.lancellotti@unimore.it
RI Lancellotti, Riccardo/K-8017-2015; Canali, Claudia/I-1589-2012
OI Lancellotti, Riccardo/0000-0002-9470-8784; Canali,
   Claudia/0000-0001-8448-7693
CR Amigó E, 2009, INFORM RETRIEVAL, V12, P461, DOI 10.1007/s10791-008-9066-8
   Andreolini M., 2011, P 11 IEEE INT C COMP
   [Anonymous], 2007, P 16 INT C WORLD WID
   Ardagna D, 2012, IEEE T SERV COMPUT, V5, P2, DOI 10.1109/TSC.2010.42
   Beloglazov A., 2010, P MGC 10 BANG IND
   Bhattacharyya Anil, 1943, B CALCUTTA MATH SOC, V35, P99
   Canali C., 2013, P INT WORKSH MULT CL
   Canali C., 2012, P 20 INT C SOFTW TEL
   Canali Claudia., 2012, COMMUNICATIONS SOFTW, V8, P102, DOI DOI 10.24138/JCOMSS.V8I4.164
   Castro M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRD SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '99), P173, DOI 10.1145/571637.571640
   Choi E, 2003, PATTERN RECOGN, V36, P1703, DOI 10.1016/S0031-3203(03)00035-9
   Chung WC, 2009, FUTURE GENER COMP SY, V25, P1, DOI 10.1016/j.future.2008.04.008
   Dhillon I. S., 2004, PROC ACM SIGKDD INT, P551, DOI DOI 10.1145/1014052.1014118
   diaeresis>tze Hinrich Schu<spacing, 2008, INTRO INFORM RETRIEV, V39
   Durkee D, 2010, COMMUN ACM, V53, P62, DOI 10.1145/1735223.1735242
   Filippone M, 2008, PATTERN RECOGN, V41, P176, DOI 10.1016/j.patcog.2007.05.018
   FREEDMAN D, 1981, Z WAHRSCHEINLICHKEIT, V57, P453, DOI 10.1007/BF01025868
   Gmach D, 2009, COMPUT NETW, V53, P2905, DOI 10.1016/j.comnet.2009.08.011
   Gong Z., 2010, P IEEE INT S MOD AN
   Gullo F., 2009, P 9 SIAM INT C DAT M
   Jain AK, 2010, PATTERN RECOGN LETT, V31, P651, DOI 10.1016/j.patrec.2009.09.011
   Karatzoglou A., 2004, J STAT SOFTW, V11, P1, DOI DOI 10.18637/JSS.V011.I09
   Kusic D, 2009, CLUSTER COMPUT, V12, P1, DOI 10.1007/s10586-008-0070-y
   Meng X., 2010, COMMUN COMPUT PHYS
   Ng AY, 2002, ADV NEUR IN, V14, P849
   Sanguinetti G, 2005, 2005 IEEE Workshop on Machine Learning for Signal Processing (MLSP), P55, DOI 10.1109/MLSP.2005.1532874
   SCOTT DW, 1979, BIOMETRIKA, V66, P605, DOI 10.1093/biomet/66.3.605
   Setzer T., 2010, P IEEE IFIP NETW OP
   Setzer T., 2011, P IFIP IEEE INT S IN
   Singh R., 2011, P 12 INT MIDDL C LIB
   Strehl A, 2002, EIGHTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-02)/FOURTEENTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-02), PROCEEDINGS, P93, DOI 10.1162/153244303321897735
   Tan J., 2011, P 31 INT C DISTR COM
   Tu C.Y., 2010, P 39 INT C PAR PROC
   von Luxburg U, 2007, STAT COMPUT, V17, P395, DOI 10.1007/s11222-007-9033-z
   Wood T., 2007, P 4 USENIX C NETW SY
NR 35
TC 10
Z9 11
U1 0
U2 23
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2014
VL 21
IS 3
SI SI
BP 319
EP 344
DI 10.1007/s10515-013-0134-y
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AI7OG
UT WOS:000337081800002
DA 2024-07-18
ER

PT J
AU Hughes, JRD
   Jones, CB
AF Hughes, John R. D.
   Jones, Cliff B.
TI Reasoning about programs via operational semantics: requirements for a
   support system
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Structural operational semantics; Proofs about programs; Tool support
AB Reasoning about programs using "axioms" is well established; in this paper we argue that reasoning about a program directly in terms of Structural Operational Semantic (SOS) language descriptions is a viable addition and that this is anyway necessary for the vast majority of languages where there is nothing like a full axiomatic description. Using an SOS description is likely to require detailed proofs whose acceptability to users will depend on suitable support systems. The paper presents a very simple example to illustrate how we can reason about (in fact, develop) a program to prove that it satisfies a specification. The main contribution is to use this trivial example to point out issues in designing an interactive proof system for constructing such proofs.
C1 [Hughes, John R. D.; Jones, Cliff B.] Univ Newcastle, Sch Comp Sci, Newcastle Upon Tyne, Tyne & Wear, England.
C3 Newcastle University - UK
RP Jones, CB (corresponding author), Univ Newcastle, Sch Comp Sci, Newcastle Upon Tyne, Tyne & Wear, England.
EM cliff.jones@ncl.ac.uk
RI Hughes, John/H-9687-2013
OI Jones, Cliff/0000-0002-0038-6623
FU EPSRC; EU FP7; EPSRC [EP/E035329/1] Funding Source: UKRI
FX Our research is supported by the EPSRC Platform Grant on "Trustworthy
   Ambient Systems" and EU FP7 "DEPLOY project".
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], 1980, Software Development: A Rigorous Approach
   [Anonymous], 1949, REPORT C HIGH SPEED
   Bicarregui JC., 1994, PROOF VDM PRACTITION
   CAMILLERI J, 1992, 265 U CAMBR COMP LAB
   COLEMAN JW, 2008, THESIS NEWCASTLE U
   DONAHUE JE, 1976, LECT NOTES COMPUTER, V42
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Hoare C. A. R., 1973, Acta Informatica, V2, P335, DOI 10.1007/BF00289504
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 1971, COMMUN ACM, V14, P39, DOI 10.1145/362452.362489
   HOARE CAR, 1969, COMMUN ACM, V12, P583
   Holt R.C., 1988, TURING PROGRAMMING L
   Jones CB, 2003, INFORM PROCESS LETT, V88, P27, DOI 10.1016/S0020-0190(03)00383-1
   Jones CB, 2003, IEEE ANN HIST COMPUT, V25, P26, DOI 10.1109/MAHC.2003.1203057
   JONES CB, 1979, ACTA INFORM, V11, P119, DOI 10.1007/BF00264020
   JONES CB, 2007, LECT NOTES COMPUTER, V4710, P177
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   JONES CB, 1991, R MURAL FORMAL DEV S
   King James Cornelius, 1969, A program verifier
   Klein G, 2003, THEOR COMPUT SCI, V298, P583, DOI 10.1016/S0304-3975(02)00869-1
   LAUER PE, 1971, THESIS QUEENS U BELF
   LEAVENS GT, 2006, 0621 IOW STAT U DEP
   LUCAS P, 1969, ANN REV AUTOMATIC PR, V6
   MCCARTHY J, 1966, FORMAL LANGUAGE DESC, P1
   MEHTA FD, 2008, THESIS ETH ZURICH
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P3, DOI 10.1016/j.jlap.2004.03.009
   Prensa Nieto L, 2001, THESIS TU MUNCHEN
NR 29
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 299
EP 312
DI 10.1007/s10515-008-0036-6
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800005
DA 2024-07-18
ER

PT J
AU Bernardi, S
   Gómez, A
   Merseguer, J
   Perez-Palacin, D
   Requeno, JI
AF Bernardi, Simona
   Gomez, Abel
   Merseguer, Jose
   Perez-Palacin, Diego
   Requeno, Jose, I
TI DICE simulation: a tool for <i>software performance</i> assessment at
   the design stage
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software performance; Reliability; UML; Software tool
ID MODEL
AB In recent years, we have seen many performance fiascos in the deployment of new systems, such as the US health insurance web. This paper describes the functionality and architecture, as well as success stories, of a tool that helps address these types of issues. The tool allows assessing software designs regarding quality, in particular performance and reliability. Starting from a UML design with quality annotations, the tool applies model-transformation techniques to yield analyzable models. Such models are then leveraged by the tool to compute quality metrics. Finally, quality results, over the design, are presented to the engineer, in terms of the problem domain. Hence, the tool is an asset for the software engineer to evaluate system quality through software designs. While leveraging the Eclipse platform, the tool uses UML and the MARTE, DAM and DICE profiles for the system design and the quality modeling.
C1 [Bernardi, Simona; Merseguer, Jose] Univ Zaragoza, Dept Informat & Ingn Sistemas, Zaragoza, Spain.
   [Gomez, Abel] Univ Oberta Catalunya UOC, Internet Interdisciplinary Inst IN3, Barcelona, Spain.
   [Perez-Palacin, Diego] Linnaeus Univ, Dept Comp Sci, Vaxjo, Sweden.
   [Requeno, Jose, I] Univ Complutense Madrid, Dept Sistemas Informat & Comp, Madrid, Spain.
C3 University of Zaragoza; UOC Universitat Oberta de Catalunya; Linnaeus
   University; Complutense University of Madrid
RP Merseguer, J (corresponding author), Univ Zaragoza, Dept Informat & Ingn Sistemas, Zaragoza, Spain.
EM simonab@unizar.es; agomezlla@uoc.edu; jmerse@unizar.es;
   diego.perez@lnu.se; jrequeno@ucm.es
RI Merseguer, Jose/A-6028-2012; Gómez, Abel/J-8652-2012; Requeno Jarabo,
   José Ignacio/GLT-6769-2022
OI Merseguer, Jose/0000-0001-5538-3553; Gómez, Abel/0000-0003-1344-8472;
   Requeno Jarabo, José Ignacio/0000-0001-5111-8357
FU EU [644869]; Spanish Ministry of Science and Innovation
   [PID2020-113969RB-I00];  [FAME-RTI2018-093608-B-C31];  [S2018/TCS-4314]
FX Open Access funding provided thanks to the CRUE-CSIC agreement with
   Springer Nature. The Simulation tool was developed under DICE project,
   EU H2020 Grant agreement ID: 644869. J. Merseguer and S. Bernardi have
   been funded by project PID2020-113969RB-I00 of the Spanish Ministry of
   Science and Innovation. A. Gomez by FAME-RTI2018-093608-B-C31). J.
   Requeno by FORTE-CM ref. S2018/TCS-4314.
CR AJMONE-MARSAN M., 1995, WILEY SERIES PARALLE
   Andrade Ermeson C., 2013, Computer Safety, Reliability and Security. 32nd International Conference, SAFECOMP 2013. Proceedings: LNCS 8153, P277, DOI 10.1007/978-3-642-40793-2_25
   [Anonymous], 2007, Unified modeling language: Superstructure
   [Anonymous], 2002, 4 INT S DISTR OBJ AP
   [Anonymous], 2012, Synthesis Lectures on Software Engineering, DOI [DOI 10.2200/S00751ED2V01Y201701SWE004, DOI 10.2200/S00441ED1V01Y201208SWE001]
   [Anonymous], 1991, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling
   [Anonymous], SIMULATION MONTE CAR
   Balbo G., 1998, PERFORMANCE MODELS D
   Becker S, 2009, J SYST SOFTWARE, V82, P3, DOI 10.1016/j.jss.2008.03.066
   Bernardi S., 2013, Model-Driven dependability assessment of software systems
   Bernardi S, 2018, EMPIR SOFTW ENG, V23, P3394, DOI 10.1007/s10664-018-9606-9
   Bernardi S, 2011, SOFTW SYST MODEL, V10, P313, DOI 10.1007/s10270-009-0128-1
   Bézivin J, 2006, INTEROPERABILITY OF ENTERPRISE SOFTWARE AND APPLICATIONS, P159, DOI 10.1007/1-84628-152-0_15
   Bezivin J, 2006, METAINFORMATICS S
   Billington J, 2003, LECT NOTES COMPUT SC, V2679, P483
   Boronat A, 2006, LECT NOTES COMPUT SC, V3922, P262
   Cabot Jordi, 2008, 2008 IEEE International Conference on Software Testing Verification and Validation Workshop (ICSTW), P73, DOI 10.1109/ICSTW.2008.54
   Casale G, 2015, 2015 IEEE/ACM 7TH INTERNATIONAL WORKSHOP ON MODELING IN SOFTWARE ENGINEERING, P78, DOI 10.1109/MiSE.2015.21
   Cortellessa V, 2011, MODEL-BASED SOFTWARE PERFORMANCE ANALYSIS, P1, DOI 10.1007/978-3-642-13621-4
   Curino Carlo, 2020, P 4 INT WORKSH DAT M, P1
   Dependability Management, 2003, APPL GUID AN TECHN D
   Dipartimento di informatica Universita di Torino, 2015, GRAPHICAL ED AN TIM
   Galvao I, 2007, IEEE INT ENTERP DIST, P313, DOI 10.1109/EDOC.2007.42
   Gansner Emden, 2015, Drawing graphs with dot
   Gómez A, 2018, LECT NOTES COMPUT SC, V11150, P105, DOI 10.1007/978-3-030-01042-3_7
   Guerra E, 2009, LECT NOTES COMPUT SC, V5563, P83, DOI 10.1007/978-3-642-02408-5_7
   Kross J, 2019, BIG DATA COGN COMPUT, V3, DOI 10.3390/bdcc3030047
   Li C, 2017, LECT NOTES COMPUT SC, V10503, P295, DOI 10.1007/978-3-319-66335-7_18
   McGraw G., 2006, Software security: building security in
   Merseguer J, 2017, AUTOMAT SOFTW ENG, V24, P71, DOI 10.1007/s10515-016-0201-2
   NEILSON JE, 1995, IEEE T SOFTWARE ENG, V21, P776, DOI 10.1109/32.464543
   Object Management Group (OMG), 2006, 20150607 OMG
   Object Management Group (OMG), 2008, MOF Model to Text Transformation Language; Version 1.0, Document Formal/2008-01-16
   OMG, 2013, MODELING ANAL REAL T
   OMG, 2011, MOF 2 0 QUER VIEW TR
   OMG, 2016, MOF COR VERS 2 5 1
   Ozkaya M, 2019, IET SOFTW, V13, P338, DOI 10.1049/iet-sen.2018.5409
   Perez-Palacin D, 2019, SOFTW SYST MODEL, V18, P3577, DOI 10.1007/s10270-019-00730-3
   Requeno JI, 2019, INFORM SYST FRONT, V21, P67, DOI 10.1007/s10796-018-9851-x
   Reussner R. H., 2016, PALLADIO APPROACH
   Rodriguez RJ, 2020, IEEE T SYST MAN CY-S, V50, P2834, DOI 10.1109/TSMC.2018.2837643
   Smith Connie U., 2003, UML REAL DES EMB REA, P343, DOI [10.1007/0-306-48738-1\16, 10.1007/0-306-48738-116, DOI 10.1007/0-306-48738-116]
   SMITH CU, 2002, PERFORMANCE SOLUTION
   Steinberg D, 2009, EMF ECLIPSE MODELING, V2nd
   The DICE Consortium, 2016, TRANSF AN MOD DEL D3
   The DICE Consortium, 2017, DICE SIM TOOLS FIN V
   The DICE Consortium, 2015, STAT ART AN DEL D1 1
   The Eclipse Foundation, 2021, ECL PLATF
   The Eclipse Foundation, 2012, DES US UML PROF PAP
   The Eclipse Foundation, 2010, SLID WAR TUT PAP US
   The Eclipse Foundation & Obeo, 2015, ACC
   The Object Management Group (OMG), 2018, MODEL DRIVEN ARCHITE
   Wang W., 2015, P 1 INT WORKSH QUAL, P31, DOI DOI 10.1145/2804371.2804379
   Woodside M, 2014, SOFTW SYST MODEL, V13, P1529, DOI 10.1007/s10270-013-0385-x
NR 54
TC 1
Z9 1
U1 1
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 36
DI 10.1007/s10515-022-00335-z
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0A4LW
UT WOS:000773928800001
OA hybrid
DA 2024-07-18
ER

PT J
AU Pattipati, DK
   Nasre, R
   Puligundla, SK
AF Pattipati, Dileep Kumar
   Nasre, Rupesh
   Puligundla, Sreenivasa Kumar
TI BOLD: an ontology-based log debugger for C programs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE SPARQL instrumentation; Execution trace triples; Ontology-based
   debugging; Program debug ontology
ID PROTOTYPE; DESIGN; TOOL
AB Program debugging is often an ad hoc activity, with a combination of manual and semi-automated processing. A challenge posed by debugging is the lack of standardized procedures for instrumenting, representing, and analyzing the execution trace. Further, debugging is often low level, getting into the nitty-gritty details of variables and their semantics-rather than at a high-level. The presence of libraries only exacerbates these issues. We propose BOLD, an Ontology-based Log Debugger, to unify various activities involved in the debugging of sequential C programs. The syntactical information of programs can be represented as Resource Description Framework (RDF) triples. BOLD automatically instruments programs by querying these triples. It represents the execution trace of the program also as RDF triples called trace triples. BOLD's novel high-level reasoning abstracts these triples as spans. A span gives a way of examining the values of a particular variable over certain portions of the program execution. The properties of the spans are defined formally as a Web Ontology Language ontology. A developer can debug a given buggy program by querying the trace triples and reasoning with the spans. To empirically assess BOLD, we debugged the programs in standard Software-artifact Infrastructure Repository. Experiments related to debugging through automated reasoning show improvement in conciseness of the developers' specifications and run time performance of BOLD compared to gdb-Python.
C1 [Pattipati, Dileep Kumar; Nasre, Rupesh; Puligundla, Sreenivasa Kumar] IIT Madras, Comp Sci & Engn, Chennai 600036, Tamil Nadu, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Madras
RP Pattipati, DK (corresponding author), IIT Madras, Comp Sci & Engn, Chennai 600036, Tamil Nadu, India.
EM dileepkumar_p@outlook.com; rupesh@iitm.ac.in; psk@iitm.ac.in
OI Pattipati, Dileep kumar/0000-0001-9073-8524
FU Ministry of Human Resource Development (IN)
FX The funding was provided by Ministry of Human Resource Development (IN).
CR Abreu R, 2006, 12TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P39
   [Anonymous], 2005, ADV IND CONTROL
   [Anonymous], 2006, Proceedings of the 14th ACM SIGSOFT international symposium on Foundations of software engineering (SIGSOFT '06/FSE-14), DOI 10.1145/1181775.1181781
   Antoniou G, 2003, IN HAND I S, P67
   Ashburner M, 2000, NAT GENET, V25, P25, DOI 10.1038/75556
   Atzeni M., 2017, INT SEM WEB C
   Auguston M, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P217, DOI 10.1109/ASE.2002.1115015
   Baader F, 2003, DESCRIPTION LOGIC HANDBOOK: THEORY, IMPLEMENTATION AND APPLICATIONS, P43
   BATES PC, 1995, ACM T COMPUT SYST, V13, P1, DOI 10.1145/200912.200913
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Bizer C, 2009, INT J SEMANT WEB INF, V5, P1, DOI 10.4018/jswis.2009081901
   Brickley D., 2004, RDF VOCABULARY DESCR
   Cao Q, 2008, SENSYS'08: PROCEEDINGS OF THE 6TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P85
   Dean Mike., 2003, Owl web ontology language reference
   DEVANBU P, 1990, 12TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P249, DOI 10.1109/ICSE.1990.63631
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Ducasse M., 1998, INT C SOFTW ENG
   Eberhart A., 2004, P MODELLIERUNG
   Engblom J., 2012, P 2012 SYSTEM SOFTWA
   Engblom J, 2010, PROCESSOR AND SYSTEM-ON-CHIP SIMULATION, P25, DOI 10.1007/978-1-4419-6175-4_3
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Ganapathi G., 2011, P WORLD C ENG 2011 W
   Gao Q, 2015, IEEE INT CONF AUTOM, P307, DOI 10.1109/ASE.2015.81
   Gavrilova S.S. T., 2006, International Journal "Information Theories Applications, V13, P303
   Geimer M, 2009, LECT NOTES COMPUT SC, V5545, P696, DOI 10.1007/978-3-642-01973-9_78
   Goldsmith S, 2005, ACM SIGPLAN NOTICES, V40, P385, DOI 10.1145/1103845.1094841
   Happel H.J., 2006, 2 SWESE HELD 5 INT S
   Hofer C., 2006, NODE GSEM
   Horrocks I, 2005, J WEB SEMANT, V3, P23, DOI 10.1016/j.websem.2005.05.003
   IMOP team, 2020, IMOP COMP INFR
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   KEMPF J, 2008, SOFTWARE INSTRUMENTA, P1, DOI DOI 10.1002/9780470050118.ECSE386
   Kernighan B. W., 1999, The Practice of Programming, V1st
   Phang KY, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P352, DOI 10.1109/ICSE.2013.6606581
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   Klyne G, 2004, Resource description framework (RDF): Concepts and abstract syntax
   Köb D, 2004, FRONT ARTIF INTEL AP, V110, P833
   Le Febvre E, 2012, MID EAST TODAY, P145
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Lewis Bil., 2003, DEBUGGING BACKWARDS
   Li H, 2016, IFIP ADV INF COMM TE, V471, P211, DOI 10.1007/978-3-319-33630-5_15
   Mahrenholz D., 2002, Proceedings Fifth IEEE International Symposium on Object-Oriented Real-Time Distributed Computing. ISIRC 2002, P249, DOI 10.1109/ISORC.2002.1003713
   Malone J, 2014, J BIOMED SEMANT, V5, DOI 10.1186/2041-1480-5-25
   Manola F., 2004, RDF PRIMER 1 0 REFER, V10
   Marceau G, 2007, AUTOMAT SOFTW ENG, V14, P59, DOI 10.1007/s10515-006-0003-z
   Marshall D., 2020, TIME TRAVEL DEBUGGIN
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Mateis C, 2000, FR ART INT, V54, P171
   Mayer W, 2004, FR ART INT, V110, P843
   Mayer W, 2002, FRONT ARTIF INTEL AP, V77, P417
   Mohr B, 2002, J SUPERCOMPUT, V23, P105, DOI 10.1023/A:1015741304337
   Motik B, 2005, J WEB SEMANT, V3, P41, DOI 10.1016/j.websem.2005.05.001
   Motik Boris, 2009, W3C recommendation, V27, P61
   Naish L, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000791.2000795
   Nguyen Tien N, 2010, Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering-Volume 1, ICSE '10, P315
   OLSSON RA, 1991, SOFTWARE PRACT EXPER, V21, P209, DOI 10.1002/spe.4380210207
   Pattipati DK, 2020, SOFTWARE PRACT EXPER, V50, P1425, DOI 10.1002/spe.2821
   Pearl J., 2009, CAUSALITY MODELS REA
   Planning S, 2002, The economic impacts of inadequate infrastructure for software testing
   Pothier G., 2007, P 22 ACM SIGPLAN C O, P535
   Prudhommeaux E., 2008, W3C RECOMMENDATION 1
   Schordan M, 2003, LECT NOTES COMPUT SC, V2789, P214
   Sirin E, 2007, J WEB SEMANT, V5, P51, DOI 10.1016/j.websem.2007.03.004
   Templer KS, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P249, DOI 10.1109/ASE.1998.732663
   Tenorth M, 2009, 2009 IEEE-RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS, P4261, DOI 10.1109/IROS.2009.5354602
   VESSEY I, 1986, IEEE T SYST MAN CYB, V16, P621, DOI 10.1109/TSMC.1986.289308
   Visan A.M., 2011, PLOS 11
   Wong WE, 2016, IEEE T SOFTWARE ENG, V42, P707, DOI 10.1109/TSE.2016.2521368
   Wotawa F, 2002, LECT NOTES ARTIF INT, V2358, P746
   Zhao Y., 2016, LIPICS, V56
NR 71
TC 0
Z9 0
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 2
DI 10.1007/s10515-021-00308-8
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XD7EW
UT WOS:000722868300004
DA 2024-07-18
ER

PT J
AU Purandhar, N
   Ayyasamy, S
   Kumar, NMS
AF Purandhar, N.
   Ayyasamy, S.
   Kumar, N. M. Saravana
TI Strategic real time framework for healthcare using fuzzy C-means systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Healthcare System (HcS); Wireless Body Area Networks (WBAN); Computing
   with Words (CWW); Fuzzy C Means (FCM); Improved framework using Fuzzy
   Brain Storm Optimization (FBSO) and Fuzzy Inference System (FIS) for
   healthcare (IFFFH)
ID BIG DATA
AB Having enhancement of automation of sensor, huge information such as the big data are examined and has become yet another worldview for huge scope of data handling. The is a requirement of continuous investigation for getting to and handling huge information in a quick manner. High health care costs and large infected population costs alongside the expansion of Information and correspondence innovation, prompted the improvement of the frameworks of health are monitored. The research article shows in the improvement of a novel cloud-based framework of a human service where the Wireless Body Area Networks (WBAN) gives out the total the information to an individual server. This server includes Fuzzy Brain Storm Optimization (FBSO) and Fuzzy Inference System (FIS) which is a distributed real-time computation system. This is used for processing large volumes of high-velocity data. It also is constant calculation framework and the Fuzzy induction framework. The proposed framework is said to be the Improved framework using Fuzzy Brain Storm Optimization (FBSO) and Fuzzy Inference System (FIS) for healthcare (IFFFH) are facilitated on a private cloud, along these lines security and versatility are guarantee. The stream examination is performed on the physiological information, where removal of non-basic information is done and the basic information are put away and a warning is sent to a doctor or the guardians of the person who is under monitorisation. Subsequently constant investigation along with the help of the cloud to improve the adequacy of the framework of the healthcare system (HcS) and personal satisfaction through the help of medical assistance. This can be used for future reference and by expanding the qualities in the dataset, in this manner expanding the quantity of records for preparing the fuzzy framework, the precision can be expanded.
C1 [Purandhar, N.] Res Scholar Anna Univ, Dr NGP Inst Technol, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India.
   [Ayyasamy, S.] REVA Univ, Sch Comp Sci & Engn, Bangalore, Karnataka, India.
   [Kumar, N. M. Saravana] M Kumarasamy Coll Engn, Dept AI & DS, Karur, India.
C3 Anna University; Anna University of Technology Coimbatore; REVA
   University; M.Kumarasamy College of Engineering
RP Purandhar, N (corresponding author), Res Scholar Anna Univ, Dr NGP Inst Technol, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India.
EM purandhar.n@gmail.com; ayyasamyphd@gmail.com;
   saravanakumaar2008@gmail.com
RI Kumar, N M Saravana/AAD-8116-2019; N, Purandhar/IUN-5724-2023
OI N, Purandhar/0000-0002-8236-8639; S, Ayyasamy/0000-0002-0910-8048;
   Saravana Kumar, N.M./0000-0002-6017-5115
CR Adam EEB., 2021, J ISMAC, V3, P16, DOI [10.36548/jismac.2021.1.002, DOI 10.36548/JISMAC.2021.1.002]
   [Anonymous], 2010, System Sciences, DOI DOI 10.1109/ICMSS.2010.5576827
   Belle A, 2015, BIOMED RES INT, V2015, DOI 10.1155/2015/370194
   Brüser C, 2013, IEEE J BIOMED HEALTH, V17, P162, DOI 10.1109/TITB.2012.2225067
   Chawla NV, 2013, J GEN INTERN MED, V28, pS660, DOI 10.1007/s11606-013-2455-8
   Chen D.J.I.Z., 2021, J. Electric. Eng. Automation, V3, P15
   Cheng CW, 2013, IEEE J TRANSL ENG HE, V1, DOI 10.1109/JTEHM.2013.2290113
   de Carvalho FDT, 2015, IEEE INT FUZZY SYST
   Denny JC, 2012, PLOS COMPUT BIOL, V8, DOI 10.1371/journal.pcbi.1002823
   Forkan A, 2014, FUTURE GENER COMP SY, V35, P114, DOI 10.1016/j.future.2013.07.009
   Gong YM, 2016, IEEE ACM T COMPUT BI, V13, P431, DOI 10.1109/TCBB.2016.2515610
   Havens TC, 2012, IEEE T FUZZY SYST, V20, P1130, DOI 10.1109/TFUZZ.2012.2201485
   Iong-Zong Chen, 2021, J ARTIFICIAL INTELLI, V3, P101, DOI DOI 10.36548/JAICN.2021.2.003
   Jee K, 2013, HEALTHC INFORM RES, V19, P79, DOI 10.4258/hir.2013.19.2.79
   Jensen PB, 2012, NAT REV GENET, V13, P395, DOI 10.1038/nrg3208
   Lopez D, 2015, ADV INTELL SYST, V415, P195, DOI 10.1007/978-3-319-27212-2_16
   McAfee A, 2012, HARVARD BUS REV, V90, P60
   Smys S., 2021, J ISMAC, V3, P96, DOI 10.36548/jismac.2021.2.003
   Stojanovic J, 2017, IEEE ACM T COMPUT BI, V14, P545, DOI 10.1109/TCBB.2016.2591523
   Sufi F, 2011, IEEE T INF TECHNOL B, V15, P33, DOI 10.1109/TITB.2010.2094197
   Suma V., 2021, J ARTIFICIAL INTELL, V3, P53, DOI DOI 10.36548/JAICN.2021.1.005
   Sungheetha A., 2021, J SOFT COMPUT PARADI, V3, P10, DOI DOI 10.36548/JSCP.2021.1.002
   Sungheetha Akey, 2021, J Trends Comp Sci Smart Technol, V3, P81, DOI [DOI 10.36548/JTCSST.2021.2.002, 10.36548/jtcsst.2021.2.002]
   Viceconti M, 2015, IEEE J BIOMED HEALTH, V19, P1209, DOI 10.1109/JBHI.2015.2406883
   Vijayakumar T., 2021, J. Artif. Intell., V3, P1, DOI [10.36548/jaicn.2021.1.001, DOI 10.36548/JAICN.2021.1.001]
NR 25
TC 0
Z9 0
U1 1
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 17
DI 10.1007/s10515-021-00302-0
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY6EY
UT WOS:000737064300004
DA 2024-07-18
ER

PT J
AU Wang, YC
   Hu, WJ
AF Wang, Yingchun
   Hu, Weijun
TI Intelligent software-driven immersive environment for online political
   guiding based on brain-computer interface and autonomous systems
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Network guiding; Autonomous systems; Immersion; Human-computer
   interaction; Cognitive model; Brain computer interface
AB Along with the rapid development of modern information society, the network has been widely used in social groups. However, the network is a double-edged sword, unhealthy information is easy to harm the psychology of college students. The use of network audio-visual culture to carry out political guiding in colleges ainto cyberspace has become an inevitable direction of development. As technology changes education, virtual reality technology also applies to education. Technology makes up for the defects. VR brings a new experience to education and skillfully avoids the defects of two-dimensional video materials. The immersive interactive environment changes the traditional scene into a virtual 3D scene, giving students an immersive learning experience. Cognitive model is a kind of psychological and thinking structure generated in the process of people's cognition of the objective world, which is composed of knowledge and their connection structure. Brain computer Interface (BCI) is a communication control system that does not depend on the normal output pathway of peripheral nerve and muscle tissue of the brain. It is a technology that uses brain signal processing technology to enhance the interaction between human and environment. Therefore, this paper studies an intelligent software-driven immersive environment for online political guiding based on brain-computer interface and autonomous systems. The designed framework is implemented through the data set testing.
C1 [Wang, Yingchun] Shaanxi Normal Univ, Sch Marxism, Xian, Peoples R China.
   [Wang, Yingchun] Xian Univ Posts & Telecommun, Sch Marxism, Xian, Peoples R China.
   [Hu, Weijun] Jilin Univ, Art Coll, Jilin, Jilin, Peoples R China.
C3 Shaanxi Normal University; Xi'an University of Posts &
   Telecommunications; Jilin University
RP Hu, WJ (corresponding author), Jilin Univ, Art Coll, Jilin, Jilin, Peoples R China.
EM weijun_hu@ksu.edu.bi
RI wang, yan/GSE-6489-2022; wang, yan/JBJ-7462-2023; Wang,
   Yiping/IZQ-2052-2023; wang, yingying/GRS-3058-2022; wang,
   yu/IUQ-6654-2023; wang, ying/GQY-5077-2022; wang,
   yingying/JCE-4984-2023; Wang, Ying/HJI-2509-2023
FU XUPT'S 2018 project of teaching reformation: Research on the Teaching
   Problem "the Overall Strategy for Building Socialism with Chinese
   Characteristics for New Era" [JGZ201835]
FX The research is supported by: The XUPT'S 2018 project of teaching
   reformation: Research on the Teaching Problem "the Overall Strategy for
   Building Socialism with Chinese Characteristics for New Era"(No.
   JGZ201835).
CR Abdellatif M, 2020, AUTOMAT SOFTW ENG, V27, P187, DOI 10.1007/s10515-020-00272-9
   Almhana R, 2021, AUTOMAT SOFTW ENG, V28, DOI 10.1007/s10515-020-00279-2
   Coyle S, 2004, PHYSIOL MEAS, V25, P815, DOI 10.1088/0967-3334/25/4/003
   Dan Q., 2013, HIGH EDU SOC SCI, V5, P66
   Dunbar J, 2020, J SAFETY RES, V74, P27, DOI 10.1016/j.jsr.2020.04.006
   Esteves G, 2020, AUTOMAT SOFTW ENG, V27, P369, DOI 10.1007/s10515-020-00277-4
   Feng C., 2004, JIANGHUAI FORUM
   Gao L., 2013, ENGINEERING, V5, P137, DOI [10.4236/eng.2013.510B028, DOI 10.4236/ENG.2013.510B028]
   Georgi P, COGNITIVE MODEL CONF
   Information Engineering Research Institute USA, 2013, P 2013 3 INT C SOC, V32, P6
   Jiang Z, 2006, SELECTED WORKS JIANG, P94
   Laiwalla F., 2021, BRAIN COMPUT INTERFA, V9, P39, DOI [10.1007/978-3-030-60460-8_4, DOI 10.1007/978-3-030-60460-8_4]
   Lalor EC, 2005, EURASIP J APPL SIG P, V2005, P3156, DOI 10.1155/ASP.2005.3156
   Lee S., 2013, ADV J COMMUN, V1, P26
   Lin Y, 2010, EC SOC DEV
   Liu M, 2000, J HENAN NORMAL U PHI
   McCreadie KA, 2014, IEEE T NEUR SYS REH, V22, P431, DOI 10.1109/TNSRE.2014.2312270
   McFarland DJ, 2010, J NEURAL ENG, V7, DOI 10.1088/1741-2560/7/3/036007
   Pan M., 2006, THEOR FRONT COLL U
   Parikh D, 2020, 2020 11TH IEEE ANNUAL UBIQUITOUS COMPUTING, ELECTRONICS & MOBILE COMMUNICATION CONFERENCE (UEMCON), P958, DOI 10.1109/UEMCON51285.2020.9298185
   Ramadan RA, 2017, NEUROCOMPUTING, V223, P26, DOI 10.1016/j.neucom.2016.10.024
   Rebai S, 2020, AUTOMAT SOFTW ENG, V27, P301, DOI 10.1007/s10515-020-00275-6
   Samaras H., 2006, AACE J, V14, P3
   Tang Y., 2012, J HUNAN U SOCIAL SCI
   Tang YC, 2020, 2020 INTERNATIONAL SYMPOSIUM ON AUTONOMOUS SYSTEMS (ISAS), P100, DOI 10.1109/ISAS49493.2020.9378873
   Teng SH, 1999, P HAW INT C SYST SCI, P18
   Vaughan T M, 1996, IEEE Trans Rehabil Eng, V4, P425, DOI 10.1109/86.547945
   Wang D., 2013, CREAT ED, V4, P470, DOI [10.4236/ce.2013.47068, DOI 10.4236/CE.2013.47068]
   Wang G., 2011, PARTY BUILDING IDEOL, DOI DOI 10.19865/J.CNKI.XXDJ.2021.09.018
   Wang XY, 2020, IEEE INT SYM MED MEA
   Wei J, 2003, SCH PARTY BUILD IDEO
   Wolpaw JR, 2004, P NATL ACAD SCI USA, V101, P17849, DOI 10.1073/pnas.0403504101
   Wolpaw JR, 2003, IEEE T NEUR SYS REH, V11, P204, DOI 10.1109/TNSRE.2003.814442
   Yaocan Z, 2001, MODERN IDEOLOGICAL P
   Zeng L, 2002, INTRO NETWORK IDEOLO, P32
   Zhang F, 2002, J IDEOL THEOR EDU
   Zhang Z, 2009, RES NETWORK IDEOLOGI, P226
NR 37
TC 1
Z9 1
U1 4
U2 41
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 19
DI 10.1007/s10515-021-00300-2
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY6EY
UT WOS:000737064300008
DA 2024-07-18
ER

PT J
AU Yang, SQ
   Wu, HW
   Zhang, HL
   Wang, Y
   Swaminathan, C
   Yan, DC
   Rountev, A
AF Yang, Shengqian
   Wu, Haowei
   Zhang, Hailong
   Wang, Yan
   Swaminathan, Chandrasekar
   Yan, Dacong
   Rountev, Atanas
TI Static window transition graphs for Android
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Android; Static analysis; GUI analysis
ID RESOURCE LEAKS
AB This work develops a static analysis to create a model of the behavior of an Android application's GUI. We propose the window transition graph (WTG), a model representing the possible GUI window sequences and their associated events and callbacks. A key component and contribution of our work is the careful modeling of the stack of currently-active windows, the changes to this stack, and the effects of callbacks related to these changes. To the best of our knowledge, this is the first detailed study of this important static analysis problem for Android. We develop novel analysis algorithms for WTG construction and traversal, based on this modeling of the window stack. We also propose WTG extensions to handle certain aspects of asynchronous control flow. We describe an application of the WTG for GUI test generation, using path traversals. The evaluation of the proposed algorithms indicates their effectiveness and practicality.
C1 [Yang, Shengqian; Yan, Dacong] Google Inc, Mountain View, CA 94043 USA.
   [Wu, Haowei; Zhang, Hailong; Wang, Yan; Swaminathan, Chandrasekar; Rountev, Atanas] Ohio State Univ, Columbus, OH 43210 USA.
C3 Google Incorporated; University System of Ohio; Ohio State University
RP Wu, HW (corresponding author), Ohio State Univ, Columbus, OH 43210 USA.
EM michyang.ysq@gmail.com; wuhaow@cse.ohio-state.edu; zhang.4858@osu.edu;
   wang10@cse.ohio-state.edu; swaminathan.42@osu.edu; dacong.yan@gmail.com;
   rountev@cse.ohio-state.edu
RI Zhang, Hailong/HKE-3562-2023; Yan, Dacong/D-7162-2014; Wang,
   Shan/JPX-1098-2023
OI Zhang, Hailong/0000-0003-4101-3943; 
FU U.S. National Science Foundation [CCF-1319695, CCF-1526459]; Google
   Faculty Research Award
FX This material is based upon work supported by the U.S. National Science
   Foundation under CCF-1319695 and CCF-1526459, and by a Google Faculty
   Research Award.
CR Amalfitano D, 2012, IEEE INT CONF AUTOM, P258, DOI 10.1145/2351676.2351717
   Anand S., 2012, ACM SIGSOFT INT S FD
   [Anonymous], 2012, INT S SOFTWARE TESTI
   [Anonymous], 2017, INFORM SOFTWARE TECH
   Arlt S., 2012, Proceedings of the 2012 IEEE 23rd International Symposium on Software Reliability Engineering (ISSRE), P301, DOI 10.1109/ISSRE.2012.25
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Azim T, 2013, ACM SIGPLAN NOTICES, V48, P641, DOI [10.1145/2509136.2509549, 10.1145/2544173.2509549]
   Baek YM, 2016, IEEE INT CONF AUTOM, P238, DOI [10.1145/2970276.2970313, 10.1145/2970276.2970310]
   Banerjee A., 2014, ACM SIGSOFT INT S FD, P588
   Bin Xiong, 2017, Cyberspace Safety and Security. 9th International Symposium, CSS 2017. Proceedings: LNCS 10581, P16, DOI 10.1007/978-3-319-69471-9_2
   Cai HP, 2017, PROC IEEE INT CONF S, P364, DOI 10.1109/ICSME.2017.31
   Chin E., 2011, P 9 INT C MOB SYST A, P239, DOI DOI 10.1145/1999995.2000018
   Choi W, 2013, ACM SIGPLAN NOTICES, V48, P623, DOI [10.1145/2544173.2509552, 10.1145/2509136.2509552]
   Choudhary SR, 2015, IEEE INT CONF AUTOM, P429, DOI 10.1109/ASE.2015.89
   Dubroy P., 2011, GOOGL I O DEV C
   Feng Y, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P576, DOI 10.1145/2635868.2635869
   Fuchs Adam P., 2009, Technical Report CS-TR-4991
   GATOR, 2017, GAT PROGR AN TOOLK A
   Google Inc, 2017, STOPP REST ACT DEV A
   Google Inc, 2017, INT INT FILT DEV AND
   Google Inc, 2017, ANDR DIAL DEV ANDR
   Google Inc, 2017, TASKS BACK STACK DEV
   Grace M., 2012, NETW DISTR SYST SEC
   Guo CR, 2013, IEEE INT CONF AUTOM, P389, DOI 10.1109/ASE.2013.6693097
   Hao S, 2014, MOBISYS'14: PROCEEDINGS OF THE 12TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES, P204, DOI 10.1145/2594368.2594390
   Huang JJ, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1036, DOI 10.1145/2568225.2568301
   Jensen C S, 2013, P 2013 INT S SOFTW T, P67, DOI [10.1145/2483760.2483777, DOI 10.1145/2483760.2483777]
   Lee YK, 2017, PROC INT CONF SOFTW, P312, DOI 10.1109/ICSE.2017.36
   Li D, 2013, P 2013 INT S SOFTW T, P78, DOI DOI 10.1145/2483760.2483780
   Li L, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P280, DOI 10.1109/ICSE.2015.48
   Liang S., 2013, Proceedings of the Third ACM workshop on Security and privacy in smartphones mobile devices, P21, DOI DOI 10.1145/2516760.2516769
   Lin Y, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P341, DOI 10.1145/2635868.2635903
   Liu YP, 2014, IEEE T SOFTWARE ENG, V40, P911, DOI 10.1109/TSE.2014.2323982
   Lu K., 2015, NETW DISTR SYST SEC
   Lu Long, 2012, P 2012 ACM C COMP CO, P229, DOI DOI 10.1145/2382196.2382223
   Machiry A., 2013, P 2013 9 JOINT M FDN, P224
   Mahmood R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P599, DOI 10.1145/2635868.2635896
   Memon A, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P260, DOI 10.1109/WCRE.2003.1287256
   Memon A. M., 2001, Software Engineering Notes, V26, P256, DOI 10.1145/503271.503244
   Memon AM, 2005, IEEE T SOFTWARE ENG, V31, P884, DOI 10.1109/TSE.2005.117
   Memon AM, 2007, SOFTW TEST VERIF REL, V17, P137, DOI 10.1002/stvr.364
   Min C, 2015, SENSYS'15: PROCEEDINGS OF THE 13TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P31, DOI 10.1145/2809695.2809728
   Octeau D., 2013, USENIX SEC S
   Octeau D, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P77, DOI 10.1109/ICSE.2015.30
   Oliner A. J., 2013, ACM C EMB NETW SENS
   Pathak A., 2012, INT C MOBILE SYSTEMS, P267
   Payet É, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P121, DOI 10.1145/2543728.2543748
   Payet É, 2012, INFORM SOFTWARE TECH, V54, P1192, DOI 10.1016/j.infsof.2012.05.003
   Robotium, 2016, ROBOTIUM ROBOTIUM TE
   Rountev Atanas, 2014, P ANN IEEEACM INT S, P143
   SCanDroid, 2015, SCANDROID SCANDROID
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Song W, 2017, IEEE INT CONF AUTOM, P27, DOI 10.1109/ASE.2017.8115615
   Soot, 2018, SOOT SOOT ANAL FRAME
   Takala T., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P377, DOI 10.1109/ICST.2011.11
   Tramontana P., 2013, ANDROID GUI RIPPER
   Tsutano Y, 2017, PROC INT CONF SOFTW, P324, DOI 10.1109/ICSE.2017.37
   Wang P, 2014, INT CONF COMM SYST, P1161, DOI 10.1109/CSNT.2014.236
   Wang Y., 2016, P 5 SIGPLAN INT WORK, P18
   Wang Y, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P48, DOI [10.1145/2897073.2897097, 10.1109/MobileSoft.2016.029]
   Wei FG, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1329, DOI 10.1145/2660267.2660357
   White L, 2000, 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P110, DOI 10.1109/ISSRE.2000.885865
   Wu H., 2018, IEEE ACM INT WORKSH
   Wu HW, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P185, DOI 10.1145/2892208.2892218
   Xie Q, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1416563.1416567
   Yan D., 2014, THESIS
   Yan DC, 2013, PROC INT SYMP SOFTW, P411, DOI 10.1109/ISSRE.2013.6698894
   Yang S, 2015, THESIS
   Yang SQ, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P89, DOI 10.1109/ICSE.2015.31
   Yang SQ, 2015, IEEE INT CONF AUTOM, P658, DOI 10.1109/ASE.2015.76
   Yang SQ, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON THE ENGINEERING OF MOBILE-ENABLED SYSTEMS (MOBS), P1, DOI 10.1109/MOBS.2013.6614215
   Yang W, 2013, LECT NOTES COMPUT SC, V7793, P250, DOI 10.1007/978-3-642-37057-1_19
   Yuan X, 2011, IEEE T SOFTWARE ENG, V37, P559, DOI 10.1109/TSE.2010.50
   Yuan X, 2010, IEEE T SOFTWARE ENG, V36, P81, DOI 10.1109/TSE.2009.68
   Zhang HL, 2016, 2016 IEEE/ACM 11TH INTERNATIONAL WORKSHOP IN AUTOMATION OF SOFTWARE TEST (AST), P64, DOI [10.1109/AST.2016.018, 10.1145/2896921.2896932]
   Zhang PY, 2012, PROC INT CONF SOFTW, P595, DOI 10.1109/ICSE.2012.6227157
   Zhang Sai., 2012, P 2012 INT S SOFTWAR, P243
   Zheng C., 2012, P 2 ACM WORKSHOP SEC, P93, DOI DOI 10.1145/2381934.2381950
NR 78
TC 39
Z9 41
U1 2
U2 8
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2018
VL 25
IS 4
SI SI
BP 833
EP 873
DI 10.1007/s10515-018-0237-6
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW9YB
UT WOS:000447363400006
DA 2024-07-18
ER

PT J
AU Fu, CL
   Yang, D
   Zhang, XH
   Hu, HB
AF Fu, Chunlei
   Yang, Dan
   Zhang, Xiaohong
   Hu, Haibo
TI An approach to translating OCL invariants into OWL 2 DL axioms for
   checking inconsistency
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE OCL inconsistency checking; Description logic; OWL 2 DL; Ontology design
   pattern
ID UML
AB Checking the design specification for contradictions at the early phase of the software development process is crucial to ensure that the design is implementable. However, the high expressivity of OCL makes manual inconsistency checking a difficult task. In addition, the developers cannot detect these problems by OCL itself due to its lack of automated reasoning support. We investigate an approach to translating OCL invariants into OWL 2 DL axioms. We do this where the OCL expression contained in an invariant is converted to the corresponding OWL 2 DL class expression in a compositional way. Our approach covers the OCL expressions including four: PrimaryExp, RelationalExp, LogicalExp and IfExp types. Considering the distinction between the CWA and OWA, we achieve correct translation from RelationalExp using closure axiom. Also, we employ an ontology design pattern to overcome the limitations of OWL 2 DL expressivity when translating IfExp. Then inconsistency checking is done through description logic reasoning by the OWL 2 DL high-performance reasoner. We construct an inductive proof to establish the correctness of our translation approach. Moreover, we evaluate our approach using the implemented TUCO tool prototype.
C1 [Fu, Chunlei; Yang, Dan; Zhang, Xiaohong; Hu, Haibo] Key Lab Minist Educ Dependable Serv Comp Cyber Ph, Chongqing, Peoples R China.
   [Fu, Chunlei; Yang, Dan; Zhang, Xiaohong; Hu, Haibo] Chongqing Univ, Sch Software Engn, Chongqing, Peoples R China.
C3 Chongqing University
RP Fu, CL (corresponding author), Key Lab Minist Educ Dependable Serv Comp Cyber Ph, Chongqing, Peoples R China.; Fu, CL (corresponding author), Chongqing Univ, Sch Software Engn, Chongqing, Peoples R China.
EM clfu@cqu.edu.cn
RI Hu, Haibo/AAS-5704-2020; YANG, Dan/HHD-2733-2022; Zhang,
   Xiaohong/A-3060-2015
OI Hu, Haibo/0000-0002-9008-2112; 
FU National Natural ScienceKey Foundation [91118005]; National Natural
   Science Foundation of China [61173131]; Fundamental Research Funds for
   the Central Universities of China [106112014CDJZR098801]
FX The authors sincerely thank the anonymous reviewers for their valuable
   comments that have led to the present improved version of the original
   manuscript. The work described in this paper was partially supported by
   the National Natural ScienceKey Foundation (Grant No. 91118005), the
   National Natural Science Foundation of China (Grant No. 61173131), and
   the Fundamental Research Funds for the Central Universities of China
   (Grant No. 106112014CDJZR098801).
CR [Anonymous], 2010, PELLET OWL DL REASON
   [Anonymous], P IJCAR WORKSH PREC
   [Anonymous], 2007, DESCRIPTION LOGIC HD, DOI DOI 10.1017/CBO9780511711787
   [Anonymous], 2012, OWL 2 SEMANTICS OWL
   [Anonymous], 2006, PROTEGE OWL API PROT
   [Anonymous], 2007, OCL2 PARSER DRESDEN
   [Anonymous], 2012, OWL 2 OWL 2 WEB ONTO
   [Anonymous], 2007, OCL2 TOOLKIT DRESDEN
   [Anonymous], 2006, OCL OBJECT CONSTRAIN
   [Anonymous], 2006, DIG 2 0 DIG DESCRIPT
   [Anonymous], THESIS
   Beckert Bernhard, 2002, DIKU TECHNICAL REPOR, P113
   Beckert Bernhard, 2007, Verification of Object-oriented Software: The KeY Approach, DOI DOI 10.1007/978-3-540-69061-0
   Berardi D, 2005, ARTIF INTELL, V168, P70, DOI 10.1016/j.artint.2005.05.003
   BERARDI D, 2001, P KI 2001 WORKSH APP
   Bottoni P, 2000, LECT NOTES COMPUT SC, V1939, P294
   Brucker A.D., 2006, 525 SWISS FED I TECH
   Cabot J, 2007, SCI COMPUT PROGRAM, V68, P179, DOI 10.1016/j.scico.2007.05.001
   Cabot J., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1196, DOI 10.1145/1141277.1141562
   Cabot J, 2010, INFORM SYST, V35, P417, DOI 10.1016/j.is.2008.12.002
   Calì A, 2002, LECT NOTES ARTIF INT, V2366, P503
   Egana-Aranguren M., 2009, THESIS
   Farré C, 2005, DATA KNOWL ENG, V53, P163, DOI 10.1016/j.datak.2004.08.002
   Farré C, 2004, LECT NOTES COMPUT SC, V3180, P77
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   Haase Peter, 2007, INT WORKSH ONT DYN, P97
   Li M, 2009, FIRST IITA INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, PROCEEDINGS, P175, DOI 10.1109/JCAI.2009.123
   Lukichev S., 2008, CEUR WORKSHOP PROC
   Mandel L, 1999, LECT NOTES COMPUT SC, V1708, P854
   MILANOVIC M, 2006, P 6 WORKSH OCL MET M, P81
   Queralt A, 2008, LECT NOTES COMPUT SC, V5074, P281
   Queralt A, 2006, LECT NOTES COMPUT SC, V4215, P497
   Queralt A, 2012, DATA KNOWL ENG, V73, P1, DOI 10.1016/j.datak.2011.09.004
   Queralt A, 2010, LECT NOTES COMPUT SC, V6412, P438, DOI 10.1007/978-3-642-16373-9_32
   Rector A, 2004, LECT NOTES COMPUT SC, V3257, P63
   Richters M., 1998, Conceptual Modeling - ER'98. 17th International Conference on Conceptual Modeling. Proceedings, P449
   Roe D., 2003, TECHNICAL REPORT
   Simmonds J., 2005, DCC20051 U CHIL DEP
   Simmonds J, 2008, INT J SOFTW ENG KNOW, V18, P713, DOI 10.1142/S0218194008003829
   Simmonds Jocelyn., 2005, ASE, P431
   Straeten R. V., 2003, P INT WORKSH DESCR L
   Straeten R. V., 2004, P KI 2004 WORKSH APP
   Van Der Straeten R, 2003, LECT NOTES COMPUT SC, V2863, P326
   van der Straeten Ragnhild, 2005, THESIS
   Weitl F., 2011, ELECT COMMUNICATIONS
NR 45
TC 3
Z9 3
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2017
VL 24
IS 2
BP 295
EP 339
DI 10.1007/s10515-017-0210-9
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ES3FH
UT WOS:000399413800002
DA 2024-07-18
ER

PT J
AU Zhang, ZW
   Jing, XY
   Wang, TJ
AF Zhang, Zhi-Wu
   Jing, Xiao-Yuan
   Wang, Tie-Jian
TI Label propagation based semi-supervised learning for software defect
   prediction
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software defect prediction; Semi-supervised learning; Nonnegative sparse
   graph; Label propagation; Nonnegative sparse graph based label
   propagation (NSGLP)
ID QUALITY; CLASSIFICATION
AB Software defect prediction can automatically predict defect-prone software modules for efficient software test in software engineering. When the previous defect labels of modules are limited, predicting the defect-prone modules becomes a challenging problem. In static software defect prediction, there exist the similarity among software modules, a software module can be approximated by a sparse representation of the other part of the software modules, and class-imbalance problem, the number of defect-free modules is much larger than that of defective ones. In this paper, we propose to use graph based semi-supervised learning technique to predict software defect. By using Laplacian score sampling strategy for the labeled defect-free modules, we construct a class-balance labeled training dataset firstly. And then, we use a nonnegative sparse algorithm to compute the nonnegative sparse weights of a relationship graph which serve as clustering indicators. Lastly, on the nonnegative sparse graph, we use a label propagation algorithm to iteratively predict the labels of unlabeled software modules. We thus propose a nonnegative sparse graph based label propagation approach for software defect classification and prediction, which uses not only few labeled data but also abundant unlabeled ones to improve the generalization capability. We vary the size of labeled software modules from 10 to 30 % of all the datasets in the widely used NASA projects. Experimental results show that the NSGLP outperforms several representative state-of-the-art semi-supervised software defect prediction methods, and it can fully exploit the characteristics of static code metrics and improve the generalization capability of the software defect prediction model.
C1 [Zhang, Zhi-Wu; Jing, Xiao-Yuan] Nanjing Univ Posts & Telecommun, Sch Comp, Nanjing 210003, Jiangsu, Peoples R China.
   [Jing, Xiao-Yuan; Wang, Tie-Jian] Wuhan Univ, Sch Comp, State Key Lab Software Engn, Wuhan 430072, Peoples R China.
C3 Nanjing University of Posts & Telecommunications; Wuhan University
RP Zhang, ZW (corresponding author), Nanjing Univ Posts & Telecommun, Sch Comp, Nanjing 210003, Jiangsu, Peoples R China.
EM zhangzw@njupt.edu.cn
RI He, Chen/JLM-5059-2023
FU NSFC [61272273, 61073113]; 333 Engineering of Jiangsu Province
   [BRA2011175]; Graduate Student Innovation Research Project of Jiangsu
   Province [CXZZ12_0478]
FX We would like to thank the anonymous reviewers for their valuable
   comments and suggestions to improve this paper. We also thank the staff
   of the NASA Metrics Data Program for making the software measurement
   data available. The work described in this paper was partially supported
   by the NSFC under Project Nos. 61272273, 61073113, 333 Engineering of
   Jiangsu Province under Project No. BRA2011175, the Graduate Student
   Innovation Research Project of Jiangsu Province under Grant No.
   CXZZ12_0478.
CR [Anonymous], 2005, ADV NEURAL INF PROCE
   [Anonymous], 2005, SEMISUPERVISED LEARN
   [Anonymous], 2013, P 23 INT JOINT C ART
   [Anonymous], Learning from labeled and unlabeled data with label propagation
   Batista G. E., 2004, ACM SIGKDD EXPL NEWS, V6, P20, DOI DOI 10.1145/1007730.1007735
   Belkin M, 2006, J MACH LEARN RES, V7, P2399
   Catal C, 2014, J INTELL SYST, V23, P75, DOI 10.1515/jisys-2013-0030
   Catal C, 2009, EXPERT SYST, V26, P458, DOI 10.1111/j.1468-0394.2009.00509.x
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Chan Y, 1997, PHYS THER, V77, P1755, DOI 10.1093/ptj/77.12.1755
   Chapelle O, 2005, P INT WORKSH ART INT, P57
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Culp M, 2008, IEEE T PATTERN ANAL, V30, P174, DOI 10.1109/TPAMI.2007.70765
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Gao K, 2011, SEKE 2011 P 23 INT C, P89
   Gao KH, 2014, INT J RELIAB QUAL SA, V21, DOI 10.1142/S0218539314500041
   Goldman S., 2000, ICML, P327
   Grandvalet Y, 2004, Advances in neural information processing systems, V17
   Gray David, 2011, 15th Annual Conference on Evaluation & Assessment in Software Engineering (EASE 2011), P96, DOI 10.1049/ic.2011.0012
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Jiang YA, 2011, J COMPUT SCI TECH-CH, V26, P328, DOI 10.1007/s11390-011-9439-0
   Jin Xu, 2011, Machine Learning and Data Mining in Pattern Recognition. Proceedings 7th International Conference, MLDM 2011, P253, DOI 10.1007/978-3-642-23199-5_19
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P414, DOI 10.1145/2568225.2568320
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P632, DOI 10.1145/2591062.2591151
   Joachims T, 1999, MACHINE LEARNING, PROCEEDINGS, P200
   Khoshgoftaar T. M., 2010, 2010 Proceedings of 22nd International Conference on Tools with Artificial Intelligence (ICTAI 2010), P137, DOI 10.1109/ICTAI.2010.27
   Kubat M., 1997, ADDRESSING CURSE IMB, V97, P179
   Lafferty J. D., 2003, P INT C MACH LEARN, P912, DOI DOI 10.5555/3041838.3041953
   Laradji IH, 2015, INFORM SOFTWARE TECH, V58, P388, DOI 10.1016/j.infsof.2014.07.005
   Li M, 2012, AUTOMAT SOFTW ENG, V19, P201, DOI 10.1007/s10515-011-0092-1
   Lu H., 2011, Proceedings of the 7th International Conference on Predictive Models in Software Engineering PROMISE '11, P1
   Lu HH, 2012, IEEE INT CONF AUTOM, P314, DOI 10.1145/2351676.2351734
   Lyu MR, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P153, DOI 10.1109/FOSE.2007.24
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Miller DJ, 1997, ADV NEUR IN, V9, P571
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Nigam K, 2000, MACH LEARN, V39, P103, DOI 10.1023/A:1007692713085
   Pelayo L, 2007, NAFIPS 2007 - 2007 ANNUAL MEETING OF THE NORTH AMERICAN FUZZY INFORMATION PROCESSING SOCIETY, P69, DOI 10.1109/NAFIPS.2007.383813
   Seliya N, 2007, SOFTWARE QUAL J, V15, P327, DOI 10.1007/s11219-007-9013-8
   Seliya N, 2007, IEEE T SYST MAN CY A, V37, P201, DOI 10.1109/TSMCA.2006.889473
   SHAHSHAHANI BM, 1994, IEEE T GEOSCI REMOTE, V32, P1087, DOI 10.1109/36.312897
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Sun ZB, 2012, IEEE T SYST MAN CY C, V42, P1806, DOI 10.1109/TSMCC.2012.2226152
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wang F, 2008, IEEE T KNOWL DATA EN, V20, P55, DOI 10.1109/TKDE.2007.190672
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Wright J, 2009, IEEE T PATTERN ANAL, V31, P210, DOI 10.1109/TPAMI.2008.79
   Zhou DY, 2004, ADV NEUR IN, V16, P321
   Zhou ZH, 2005, IEEE T KNOWL DATA EN, V17, P1529, DOI 10.1109/TKDE.2005.186
   Zhou ZH, 2007, IEEE T KNOWL DATA EN, V19, P1479, DOI [10.1109/TKDE.2007.190644, 10.1109/TKDE.2007.190644.]
NR 51
TC 80
Z9 89
U1 0
U2 56
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2017
VL 24
IS 1
BP 47
EP 69
DI 10.1007/s10515-016-0194-x
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EI2DM
UT WOS:000392296800002
DA 2024-07-18
ER

PT J
AU Ivancic, F
   Balakrishnan, G
   Gupta, A
   Sankaranarayanan, S
   Maeda, N
   Imoto, T
   Pothengil, R
   Hussain, M
AF Ivancic, Franjo
   Balakrishnan, Gogul
   Gupta, Aarti
   Sankaranarayanan, Sriram
   Maeda, Naoto
   Imoto, Takashi
   Pothengil, Rakesh
   Hussain, Mustafa
TI Scalable and scope-bounded software verification in VARVEL
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software model checking; Program analysis; Abstract interpretation;
   Scope bounding; Bug detection; Witness presentation
ID STATIC ANALYSIS; PREDICATE ABSTRACTION; CHECKING; FRAMEWORK; ANALYZER
AB Software model checking and static analysis have matured over the last decade, enabling their use in automated software verification. However, lack of scalability makes these tools hard to apply in industry practice. Furthermore, approximations in the models of program and environment lead to a profusion of false alarms. This paper proposes DC2, a verification framework using scope-bounding to address the issue of scalability, while retaining enough precision to avoid false alarms in practice. DC2 splits the analysis problem into manageable parts, relying on a combination of three automated techniques: (a) techniques to infer useful specifications for functions in the form of pre- and post-conditions; (b) stub inference techniques that infer abstractions to replace function calls beyond the verification scope; and (c) automatic refinement of pre- and post-conditions using counterexamples that are deemed to be false alarms by a user. The techniques enable DC2 to perform iterative reasoning over the calling environment of functions, to find non-trivial bugs and fewer false alarms. Based on the DC2 framework, we have developed a software model checking tool for C/C++ programs called Varvel, which has been in industrial use at NEC for a number of years. In addition to DC2, we describe other scalability and usability improvements in Varvel that have enabled its successful application on numerous large software projects. These include model simplifications, support for witness understanding to improve debugging assistance, and handling of C++ programs. We present experimental evaluations that demonstrate the effectiveness of DC2 and report on the usage of Varvel in NEC.
C1 [Ivancic, Franjo; Balakrishnan, Gogul; Gupta, Aarti] NEC Labs Amer, Princeton, NJ 08540 USA.
   [Sankaranarayanan, Sriram] Univ Colorado, Boulder, CO 80309 USA.
   [Maeda, Naoto; Imoto, Takashi] NEC Corp Ltd, Kawasaki, Kanagawa, Japan.
   [Pothengil, Rakesh; Hussain, Mustafa] NEC Technol India, Noida, UP, India.
C3 NEC Corporation; University of Colorado System; University of Colorado
   Boulder; NEC Corporation
RP Ivancic, F (corresponding author), NEC Labs Amer, Princeton, NJ 08540 USA.
EM ivancic@gmail.com; bgogul@gmail.com; gupta.aarti@gmail.com;
   srirams@colorado.edu; n-maeda@bp.jp.nec.com; t-imoto@ak.jp.nec.com;
   rakesh.pothengil@nectechnologies.in; mustafa.hussain@nectechnologies.in
OI Gupta, Aarti/0000-0001-6676-9400
CR Alur R, 2005, ACM SIGPLAN NOTICES, V40, P98, DOI 10.1145/1047659.1040314
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], VMCAI
   [Anonymous], 1977, POPL
   [Anonymous], JPL
   Babic D., 2007, LNCS
   Ball T., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P35
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Barnett M, 2011, COMMUN ACM, V54, P81, DOI 10.1145/1953122.1953145
   Beyer Dirk, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P25, DOI 10.1109/FMCAD.2009.5351147
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Clarisó R, 2004, LECT NOTES COMPUT SC, V3148, P312
   Clarke E., 2004, TACAS
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   COHEN E, 2009, TPHOLS
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Cousot P, 2012, ACM SIGPLAN NOTICES, V47, P213, DOI 10.1145/2398857.2384633
   Cousot Patrick., 1978, POPL
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Dor N., 2003, P PLDI
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Ganai M.K., 2009, MEMOCODE, P8
   GANAI MK, 2005, LNCS, V3340
   Goubault E, 2006, LECT NOTES COMPUT SC, V4134, P18
   Hackett B., 2006, ICSE
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Hovemeyer D, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P9, DOI 10.1145/1251535.1251537
   Ivancic F, 2005, PR IEEE COMP DESIGN, P297, DOI 10.1109/ICCD.2005.77
   Ivancic F., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P133, DOI 10.1109/ASE.2011.6100046
   Ivancic F, 2008, THEOR COMPUT SCI, V404, P256, DOI 10.1016/j.tcs.2008.03.013
   Jain H, 2006, LECT NOTES COMPUT SC, V4144, P137, DOI 10.1007/11817963_15
   Jhala R, 2005, ACM SIGPLAN NOTICES, V40, P38, DOI 10.1145/1064978.1065016
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Joshi S, 2012, ACM SIGPLAN NOTICES, V47, P19, DOI 10.1145/2103621.2103662
   Jr Clarke EM, 1999, MODEL CHECKING
   Jung YB, 2005, LECT NOTES COMPUT SC, V3672, P203
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Kremenek T, 2003, LECT NOTES COMPUT SC, V2694, P295
   Kurshan R.P., 1994, COMPUTER AIDED VERIF
   Lal Akash, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P427, DOI 10.1007/978-3-642-31424-7_32
   Lee W, 2012, LECT NOTES COMPUT SC, V7148, P299, DOI 10.1007/978-3-642-27940-9_20
   Loginov A., 2008, ISSTA
   Logozzo F., 2014, PLDI
   Miné A, 2001, LECT NOTES COMPUT SC, V2053, P155
   Mine A., 2001, WCRE
   Moya Y, 2010, J SYMB COMPUT, V45, P1184, DOI 10.1016/j.jsc.2010.06.004
   Prabhu P., 2011, LNCS, V6813
   ROSSIE JG, 1995, SIGPLAN NOTICES, V30, P187, DOI 10.1145/217839.217860
   Sankaranarayanan S, 2006, LECT NOTES COMPUT SC, V3855, P111
   Sankaranarayanan S., 2006, LNCS, V4134
   Sankaranarayanan S, 2007, LECT NOTES COMPUT SC, V4634, P366
   Shao D., 2009, FM
   Stroustrup B., 1989, Computing Systems, V2, P367
   Taghdiri M, 2007, AUTOMAT SOFTW ENG, V14, P87, DOI 10.1007/s10515-006-0005-x
   Tkachuk O, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P116, DOI 10.1109/ASE.2003.1240300
   Venet A, 2004, ACM SIGPLAN NOTICES, V39, P231, DOI 10.1145/996893.996869
   Wagner David., 2000, NETWORK DISTRIBUTED, P3
   Xie YC, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1232420.1232423
   Yang J., 2012, LNCS, V7210
   Zitser M., 2004, SIGSOFT FSE
NR 64
TC 10
Z9 14
U1 0
U2 7
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2015
VL 22
IS 4
SI SI
BP 517
EP 559
DI 10.1007/s10515-014-0164-0
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CR8KJ
UT WOS:000361600000004
DA 2024-07-18
ER

PT J
AU Huang, LG
   Ng, V
   Persing, I
   Chen, MR
   Li, ZH
   Geng, RL
   Tian, J
AF Huang, LiGuo
   Ng, Vincent
   Persing, Isaac
   Chen, Mingrui
   Li, Zeheng
   Geng, Ruili
   Tian, Jeff
TI AutoODC: Automated generation of orthogonal defect classifications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Orthogonal defect classification (ODC); Machine learning; Natural
   language processing; Text classification
AB Orthogonal defect classification (ODC), the most influential framework for software defect classification and analysis, provides valuable in-process feedback to system development and maintenance. Conducting ODC classification on existing organizational defect reports is human-intensive and requires experts' knowledge of both ODC and system domains. This paper presents AutoODC, an approach for automating ODC classification by casting it as a supervised text classification problem. Rather than merely applying the standard machine learning framework to this task, we seek to acquire a better ODC classification system by integrating experts' ODC experience and domain knowledge into the learning process via proposing a novel relevance annotation framework. We have trained AutoODC using two state-of-the-art machine learning algorithms for text classification, Naive Bayes (NB) and support vectormachine (SVM), and evaluated it on both an industrial defect report from the social network domain and a larger defect list extracted from a publicly accessible defect tracker of the open source system FileZilla. AutoODC is a promising approach: not only does it leverage minimal human effort beyond the human annotations typically required by standard machine learning approaches, but it achieves overall accuracies of 82.9 % (NB) and 80.7 % (SVM) on the industrial defect report, and accuracies of 77.5 % (NB) and 75.2 % (SVM) on the larger, more diversified open source defect list.
C1 [Huang, LiGuo; Chen, Mingrui; Li, Zeheng; Geng, Ruili; Tian, Jeff] So Methodist Univ, Dallas, TX 75275 USA.
   [Ng, Vincent; Persing, Isaac] Univ Texas Dallas, Richardson, TX 75083 USA.
C3 Southern Methodist University; University of Texas System; University of
   Texas Dallas
RP Li, ZH (corresponding author), So Methodist Univ, Dallas, TX 75275 USA.
EM lghuang@smu.edu; vince@hlt.utdallas.edu; persingq@hlt.utdallas.edu;
   mingruic@smu.edu; zehengl@smu.edu; rgeng@smu.edu; tian@smu.edu
OI Li, Zeheng/0000-0003-1118-0839; Huang, LiGuo/0000-0001-7790-0195
FU Direct For Computer & Info Scie & Enginr; Division Of Computer and
   Network Systems [1126747] Funding Source: National Science Foundation
CR Ahsan S. N., 2009, Proceedings of the 33rd Annual IEEE Software Engineering Workshop SEW-33 2009, P79, DOI 10.1109/SEW.2009.15
   Aizawa Akiko., 2001, Proceedings of the Sixth Natural Language Processing Pacific Rim Symposium (NLPRS2001), P307
   [Anonymous], 2004, Software Engineering and Knowledge Engineering
   Asuncion HU, 2010, 2010 ACM IEEE 32 INT, V1, P95
   Bellucci S., 2012, U.S. Patent, Patent No. [8 214 798, 8214798]
   Bridge N., 1998, SOFTW QUAL J, V3, P1
   Caropreso MF, 2001, TEXT DATABASES AND DOCUMENT MANAGEMENT: THEORY AND PRACTICE, P78
   Cherkassky V, 1997, IEEE Trans Neural Netw, V8, P1564, DOI 10.1109/TNN.1997.641482
   CHILLAREGE R, 1992, IEEE T SOFTWARE ENG, V18, P943, DOI 10.1109/32.177364
   Chillarege R., 1994, Proceedings. 5th International Symposium on Software Reliability Engineering (Cat. No.94TH8017), P282, DOI 10.1109/ISSRE.1994.341388
   Chillarege R., 1995, Handbook of Software Reliability Engineering, P359
   Emenecker J., 2010, P 32 ACM IEEE INT C, V1, P155, DOI DOI 10.1145/1806799.1806825
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI DOI 10.7551/MITPRESS/7287.001.0001
   Gegick Michael, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P11, DOI 10.1109/MSR.2010.5463340
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Hussain I, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P209
   Joachims Thorsten, 1998, EUROPEAN C MACHINE L, P137, DOI 10.1007/
   Kiekel P. A., 2002, Proceedings of the Human Factors and Ergonomics Society 46th Annual Meeting, P298
   Ko AJ, 2006, IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P127
   Kolcz A., 2004, ACM SIGKDD EXPLORATI, V6, P1, DOI [10.2973/odp.proc.ir.207.2004, DOI 10.1145/1007730.1007733]
   Lamkanfi Ahmed, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P1, DOI 10.1109/MSR.2010.5463284
   Lin ZH, 2014, NAT LANG ENG, V20, P151, DOI 10.1017/S1351324912000307
   Lutz RR, 2004, IEEE SOFTWARE, V21, P19, DOI 10.1109/MS.2004.1270757
   Lutz RR, 2004, IEEE T SOFTWARE ENG, V30, P172, DOI 10.1109/TSE.2004.1271171
   Ma L, 2003, LECT NOTES COMPUT SC, V2722, P314
   Ma L, 2007, J SYST SOFTWARE, V80, P795, DOI 10.1016/j.jss.2006.10.017
   MAYS RG, 1990, IBM SYST J, V29, P4, DOI 10.1147/sj.291.0004
   McCallum A., 1998, AAAI 98 WORKSH LEARN, V752, P41, DOI DOI 10.1109/TSMC.1985.6313426
   Menzies T., 2003, 15th International Conference on Software Engineering and Knowledge(SEKE '03), P607
   Menzies T, 2008, PROC IEEE INT CONF S, P346, DOI 10.1109/ICSM.2008.4658083
   Ormandjieva O., 2007, 4 INT WORKSH SOFTW Q, P39
   Pandita Rahul, 2013, USENIX SECURITY 13, P527
   Polpinij Jantima, 2008, 2008 International Conference on Computer Science and Software Engineering (CSSE 2008), P706, DOI 10.1109/CSSE.2008.1393
   Porter MF, 2006, PROGRAM-ELECTRON LIB, V40, P211, DOI [10.1108/00330330610681286, 10.1108/eb046814]
   Rennie J.D., 2003, Proceedings of the 20th International Conference on Machine Learning, P616
   Sebastiani F, 2005, ADV MANAG INFORM, V2, P109
   Swigger K., 2010, Proceedings of the 2010 Fifth IEEE International Conference Global Software Engineering (ICGSE 2010), P192, DOI 10.1109/ICGSE.2010.30
   Tamrawi A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P884, DOI 10.1145/1985793.1985934
   Thung F., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P205, DOI 10.1109/WCRE.2012.30
   Tong S, 2002, J MACH LEARN RES, V2, P45, DOI 10.1162/153244302760185243
   Tsochantaridis I., 2004, ICML, P104
   Yang CZ, 2012, ASIA PAC SOFWR ENG, P240, DOI 10.1109/APSEC.2012.144
   Zheng J, 2006, IEEE T SOFTWARE ENG, V32, P240, DOI 10.1109/TSE.2006.38
NR 43
TC 20
Z9 22
U1 2
U2 5
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2015
VL 22
IS 1
SI SI
BP 3
EP 46
DI 10.1007/s10515-014-0155-1
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE0EH
UT WOS:000351476800002
DA 2024-07-18
ER

PT J
AU Hwang, MS
   Lee, CC
   Sun, TH
AF Hwang, Min-Shiang
   Lee, Cheng-Chi
   Sun, Tsuei-Hung
TI Data error locations reported by public auditing in cloud storage
   service
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Cloud storage service; Public auditing; Data confidentiality; Error
   located; Security
AB Public auditing is an important issue in cloud storage service because a cloud service provider may try to hide management mistakes and system errors from users or even steal or tamper with a user's data for monetary reasons. Without the protection of a proper auditing mechanism, cloud users would have to run high risks of having their legal rights and interests spoiled without their knowledge. Therefore, many data integrity, assurance, and correctness schemes have been proposed for data auditing. Most of these schemes work by randomly sampling and aggregating signatures from bilinear maps (for more efficiency) to check whether the cloud storage service is honest and whether the data stored in the cloud is correct. Although aggregating signatures can reduce the auditor's computing overhead and time, unfortunately, none of these schemes have offered any workable solution to giving detailed information on where the errors are when the cloud data as a whole fails the auditing. To fix this problem, we shall propose a new public auditing scheme with a mechanism integrated into it especially to locate the problematic data blocks when they exist. With efficiency, the proposed scheme is capable not only of giving an accurate pass/fail report but also providing detailed information on the locations of the errors detected.
C1 [Hwang, Min-Shiang] Asia Univ, Dept Comp Sci & Informat Engn, Taichung 402, Taiwan.
   [Hwang, Min-Shiang] China Med Univ, Dept Hlth Serv Adm, Taichung 40402, Taiwan.
   [Lee, Cheng-Chi] Fu Jen Catholic Univ, Dept Lib & Informat Sci, New Taipei City 24205, Taiwan.
   [Sun, Tsuei-Hung] Natl Chung Hsing Univ, Dept Management Informat Syst, Taichung 402, Taiwan.
C3 Asia University Taiwan; China Medical University Taiwan; Fu Jen Catholic
   University; National Chung Hsing University
RP Lee, CC (corresponding author), Fu Jen Catholic Univ, Dept Lib & Informat Sci, 510 Zhongzheng Rd, New Taipei City 24205, Taiwan.
EM mshwang@asia.edu.tw; cclee@mail.fju.edu.tw; njpth24121@gmail.com
RI Lee, Cheng-Chi/AGH-0724-2022
OI Lee, Cheng-Chi/0000-0002-8918-1703
FU National Science Council, Taiwan, ROC [NSC102-2221-E-030-003]
FX The authors would like to express their appreciation to the anonymous
   referees for their valuable suggestions and comments. This research was
   partially supported by the National Science Council, Taiwan, ROC, under
   Contract No. NSC102-2221-E-030-003.
CR Abd Elminaam DiaaSalama., 2010, IJ NETWORK SECURITY, V10, P216
   [Anonymous], 2013, INDIAN J SCI TECHNOL
   [Anonymous], THESIS NATL CHUNG HS
   [Anonymous], IEEE T SERV COMPUT
   Ateniese G., 2006, ACM Transactions on Information and Systems Security, V9, P1, DOI 10.1145/1127345.1127346
   Ateniese G, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P598
   Boneh D, 2004, J CRYPTOL, V17, P297, DOI 10.1007/s00145-004-0314-9
   Cheng-Chi Lee, 2013, International Journal of Network Security, V15, P231
   Gura N, 2004, LECT NOTES COMPUT SC, V3156, P119
   Hongwei Liu, 2013, Journal of Networks, V8, P373, DOI 10.4304/jnw.8.2.373-380
   Kumar P. Syam, 2012, International Journal of Cloud Computing, V1, P167, DOI 10.1504/IJCC.2012.046719
   Li CT, 2010, INT J INNOV COMPUT I, V6, P5311
   Qin Liu, 2010, Proceedings of the 2010 IEEE 10th International Conference on Computer and Information Technology (CIT 2010), P922, DOI 10.1109/CIT.2010.171
   Rifà-Pous H, 2011, FUTURE INTERNET, V3, P31, DOI 10.3390/fi3010031
   Sankararaman S., 2009, ANN C PROGNOSTICS HL, P1
   Shacham H, 2008, LECT NOTES COMPUT SC, V5350, P90, DOI 10.1007/978-3-540-89255-7_7
   Shucheng Y., 2010, PROCEEDING 29 IEEE I, P1
   Subashini S, 2011, J NETW COMPUT APPL, V34, P1, DOI 10.1016/j.jnca.2010.07.006
   Wang DH, 2010, IEEE PEDG 2010: THE 2ND INTERNATIONAL SYMPOSIUM ON POWER ELECTRONICS FOR DISTRIBUTED GENERATION SYSTEMS, P1, DOI 10.1109/PEDG.2010.5545769
   Wang GJ, 2011, COMPUT SECUR, V30, P320, DOI 10.1016/j.cose.2011.05.006
   Wang G, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P735, DOI 10.1145/1866307.1866414
   Wang HD, 2006, LECT NOTES COMPUT SC, V4307, P519
   Wang QA, 2011, IEEE T PARALL DISTR, V22, P847, DOI 10.1109/TPDS.2010.183
   Yang K, 2012, WORLD WIDE WEB, V15, P409, DOI 10.1007/s11280-011-0138-0
   Zhu Y, 2012, J SYST SOFTWARE, V85, P1083, DOI 10.1016/j.jss.2011.12.024
NR 25
TC 3
Z9 5
U1 0
U2 30
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2014
VL 21
IS 3
SI SI
BP 373
EP 390
DI 10.1007/s10515-014-0142-6
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AI7OG
UT WOS:000337081800004
DA 2024-07-18
ER

PT J
AU Colombo-Mendoza, LO
   Alor-Hernández, G
   Rodríguez-gonzález, A
   Valencia-garcía, R
AF Omar Colombo-Mendoza, Luis
   Alor-Hernandez, Giner
   Rodriguez-gonzalez, Alejandro
   Valencia-garcia, Rafael
TI MobiCloUP!: a PaaS for cloud services-based mobile applications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Mobile Cloud Computing; Platform as a Service; Rich Internet
   Applications; Web 2.0 services
AB The integration of cloud computing and mobile computing has recently resulted in the Mobile Cloud Computing (MCC) paradigm which is defined as the availability of loud services over a mobile ecosystem. Platform as a Service (PaaS) is a model of cloud computing that refers to high-level software systems delivered over Internet. This model typically enables developers to deliver Web applications as Software as a Service. With the aim of providing support to the MCC, in this work a PaaS called MobiCloUP! is proposed for mobile Web and native applications based on third-party cloud services such as Netflix, Instagram and Pinterest, to mention but a few. Unlike other commercial solutions such as force.com, Google App Engine and other academic proposals like MOSAIC, MobiCloUP! implements an automatic code generation programming model targeting rich mobile applications based on both Web standards such as HTML5, CSS3 and AJAX and Rich Internet Application frameworks like Adobe Flex. The MobiCloUP! core is a wizard tool that covers design, publish/deployment, development and maintenance phases for mobile development life-cycle. In order to validate our proposal, Web 2.0 services-based Web and native mobile applications were developed and deployed to the Cloud using MobiCloUP!. Finally, a qualitative-comparative evaluation was performed in order to validate the legitimacy of our proposal against other similar commercial proposals.
C1 [Omar Colombo-Mendoza, Luis; Alor-Hernandez, Giner] Inst Tecnol Orizaba, Orizaba, Mexico.
   [Rodriguez-gonzalez, Alejandro] Univ Politecn Madrid, Madrid, Spain.
   [Valencia-garcia, Rafael] Univ Murcia, Murcia, Spain.
C3 Universidad Politecnica de Madrid; University of Murcia
RP Alor-Hernández, G (corresponding author), Inst Tecnol Orizaba, Orizaba, Mexico.
EM lcolombo@acm.org; galor@itorizaba.edu.mx; alejandro.rodriguezg@upm.es;
   valencia@um.es
RI Valencia-García, Rafael/I-7610-2019; González, Alejandro
   Rodríguez/AAT-2369-2020; Colombo-Mendoza, Luis Omar/Y-8104-2019;
   Valencia-Garcia, Rafael/L-4759-2014; Alor-Hernandez, Giner/U-9203-2017
OI Colombo-Mendoza, Luis Omar/0000-0003-3341-8422; Valencia-Garcia,
   Rafael/0000-0003-2457-1791; Alor-Hernandez, Giner/0000-0003-3296-0981;
   Rodriguez Gonzalez, Alejandro/0000-0001-8801-4762
FU General Council of Superior Technological Education of Mexico (DGEST);
   National Council of Science and Technology (CONACYT); Public Education
   Secretary (SEP) through PROMEP; Polytechnic University of Madrid;
   Ministry of Industry, Energy and Tourism through project OPEN-IDEA
   [TSI-020603-2012-219]; Spanish Ministry of Economy and Competitiveness;
   European Commission (FEDER/ERDF) through project SeCloud [TIN2010-18650]
FX This work was supported by the General Council of Superior Technological
   Education of Mexico (DGEST). Additionally, this work was sponsored by
   the National Council of Science and Technology (CONACYT) and the Public
   Education Secretary (SEP) through PROMEP. Additionally, this work was
   supported by the Isaac Peral Programme of Polytechnic University of
   Madrid being the work developed on Centre for Plant Biotechnology and
   Genomics UPM-INIA. Finally, this work has been supported by the Ministry
   of Industry, Energy and Tourism through project OPEN-IDEA
   (TSI-020603-2012-219) and by the Spanish Ministry of Economy and
   Competitiveness and the European Commission (FEDER/ERDF) through project
   SeCloud (TIN2010-18650).
CR [Anonymous], 2010, REST APPL PROGRAMMIN
   [Anonymous], 2012, INTRO WEB COMP
   [Anonymous], 1998, 924111 ISO
   [Anonymous], 2012, APPL PLATF OV WIND P
   [Anonymous], 2011, MIGR CLOUD WHICH APP
   [Anonymous], DESIGNING RICH APPL
   Antenna Inc, 2010, HARN POW MOB CLOUD
   Brooke John., 1996, Usability evaluation in industry, V189, P4, DOI DOI 10.1201/9781498710411
   Buyya R, 2010, LECT NOTES COMPUT SC, V6081, P13
   Colombo-Mendoza L. O., 2012, 2012 22nd International Conference on Electrical Communications and Computers (CONIELECOMP 2012), P361, DOI 10.1109/CONIELECOMP.2012.6189939
   Cox PrestonA., 2011, Mobile cloud computing Devices, Devices, trends, issues, and the enabling technologies
   Fernando N, 2013, FUTURE GENER COMP SY, V29, P84, DOI 10.1016/j.future.2012.05.023
   FORMAN GH, 1994, COMPUTER, V27, P38, DOI 10.1109/2.274999
   Gronli TM, 2011, LECT NOTES COMPUT SC, V6762, P427
   Haddad C, 2011, SELECTING CLOUD PLAT
   Hogberg D., 2012, APPL EVALUATION ASSE
   Hung SH, 2012, COMPUT MATH APPL, V63, P573, DOI 10.1016/j.camwa.2011.10.044
   Kao YW, 2012, COMPUT STAND INTER, V34, P212, DOI 10.1016/j.csi.2011.08.006
   Kitanov S, 2012, CLOUD COMPUTING, P99
   Kitchenham B., 1996, DESMET: A method for evaluating Software Engineering methods and tools
   Laszewski T., 2012, MIGRATING CLOUD, P45
   Li XH, 2009, LECT NOTES COMPUT SC, V5931, P301
   Likert R., 1932, ARCH PSYCHOL, V140, P55
   Liu HA, 2009, LECT NOTES COMPUT SC, V5931, P369
   Mao HJ, 2012, J PARALLEL DISTR COM, V72, P171, DOI 10.1016/j.jpdc.2011.10.017
   March V., 2011, Procedia Computer Science, V5, P618, DOI DOI 10.1016/J.PR0CS.2011.07.080
   Marin-Perianu R, 2005, CLASSIFICATION SERVI, P23
   Mishra J., 2012, Third International Conference, e-Democracy, P347, DOI [DOI 10.1007/978-3-642-27317-9_36, 10.1007/978-3-642-27317-9_36]
   Petcu D, 2013, FUTURE GENER COMP SY, V29, P1417, DOI 10.1016/j.future.2012.01.009
   Saripalli P., 2010, 2010 IEEE 3rd International Conference on Cloud Computing (CLOUD 2010), P280, DOI 10.1109/CLOUD.2010.22
   Srirama S.N., 2011, P COMPUT SCI, V5, P633, DOI [10.1016/j.procs.2011.07.082, DOI 10.1016/J.PROCS.2011.07.082]
   Tang W, 2011, PROCEDIA ENVIRON SCI, V11, P499, DOI 10.1016/j.proenv.2011.12.079
   Vodafone Group, 2010, CONN CLOUD
   Wasserman A.I., 2010, Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research, P397, DOI [DOI 10.1145/1882362.1882443, 10.1145/1882362.1882443]
   Weissman CD, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P889
   YANG F, 2012, MSRTR201234
   Zhang X., 2012, MOBILE COMPUTING APP, P373
NR 37
TC 21
Z9 21
U1 0
U2 42
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2014
VL 21
IS 3
SI SI
BP 391
EP 437
DI 10.1007/s10515-014-0143-5
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AI7OG
UT WOS:000337081800005
DA 2024-07-18
ER

PT J
AU Chebaro, O
   Cuoq, P
   Kosmatov, N
   Marre, B
   Pacalet, A
   Williams, N
   Yakobowski, B
AF Chebaro, Omar
   Cuoq, Pascal
   Kosmatov, Nikolai
   Marre, Bruno
   Pacalet, Anne
   Williams, Nicky
   Yakobowski, Boris
TI Behind the scenes in SANTE: a combination of static and dynamic analyses
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE C program verification; SANTE tool; Frama-C toolset; Static analysis;
   Program slicing; Test generation; Constraint solving
AB While the development of one software verification tool is often seen as a difficult task, the realization of a tool combining various verification techniques is even more complex. This paper presents an innovative tool for verification of C programs called Sante (Static ANalysis and TEsting). We show how several tools based on heterogeneous techniques such as abstract interpretation, dependency analysis, program slicing, constraint solving and test generation can be combined within one tool. We describe the integration of these tools and discuss particular aspects of each underlying tool that are beneficial for the whole combination.
C1 [Chebaro, Omar] Ecole Mines Nantes, ASCOLA, LINA, EMN INRIA, F-44307 Nantes, France.
   [Cuoq, Pascal; Kosmatov, Nikolai; Marre, Bruno; Williams, Nicky; Yakobowski, Boris] CEA, LIST, Software Reliabil Lab, F-91191 Gif Sur Yvette, France.
   [Pacalet, Anne] INRIA Sophia Antipolis, F-06902 Sophia Antipolis, France.
C3 IMT - Institut Mines-Telecom; IMT Atlantique; CEA; Universite Paris
   Saclay
RP Kosmatov, N (corresponding author), CEA, LIST, Software Reliabil Lab, PC 174, F-91191 Gif Sur Yvette, France.
EM omar.chebaro@mines-nantes.fr; pascal.cuoq@cea.fr;
   nikolai.kosmatov@cea.fr; bruno.marre@cea.fr;
   anne.pacalet@safe-river.com; nicky.williams@cea.fr;
   boris.yakobowski@cea.fr
RI Chebaro, Omar/GXN-3633-2022
CR [Anonymous], 2007, INT C AUTOMATED SOFT
   [Anonymous], 2006, P 13 ACM C COMPUTER
   [Anonymous], 2012, INT C SOFTWARE ENG F
   [Anonymous], 2008, NETW DISTR SYST SEC
   Ball T., 2004, Formal Methods for Components and Objects. Third International Symposium, FMCO 2004. Revised Lectures (Lecture Notes in Computer Science Vol. 3657), P1
   Bardin Sebastien, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P22, DOI 10.1109/ICST.2008.8
   Bardin S, 2010, LECT NOTES COMPUT SC, V6015, P84, DOI 10.1007/978-3-642-12002-2_7
   Baudin P., 2012, ACSL ANSI ISO C SPEC
   Beckman NelsE., 2008, Proceedings of the 2008 international symposium on Software testing and analysis, ISSTA '08, P3
   Berthome P., 2010, 5 ACM SIGPLAN WORKSH
   Beyer Dirk, 2007, International Journal on Software Tools for Technology Transfer, V9, P505, DOI 10.1007/s10009-007-0044-z
   Bonichon R, 2011, STUDIA INFORM UNIVER, V9, P5
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Canet G, 2009, IEEE INT WORK C SO, P123, DOI 10.1109/SCAM.2009.22
   Chebaro O., 2012, P SAC ACM, P1284, DOI DOI 10.1145/2245276.2231980
   Chebaro O., 2010, LNCS, P652
   Chebaro O, 2011, LECT NOTES COMPUT SC, V6706, P78, DOI 10.1007/978-3-642-21768-5_7
   CHOI JD, 1994, ACM T PROGR LANG SYS, V16, P1097, DOI 10.1145/183432.183438
   Cok DR, 2005, LECT NOTES COMPUT SC, V3362, P108
   Correnson L., 2012, FRAMA C USER MANUAL
   Correnson L, 2012, LECT NOTES COMPUT SC, V7437, P108, DOI 10.1007/978-3-642-32469-7_8
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Csallner C, 2004, SOFTWARE PRACT EXPER, V34, P1025, DOI 10.1002/spe.602
   Csallner C., 2006, 28th International Conference on Software Engineering Proceedings, P861, DOI 10.1145/1134285.1134435
   Cuoq Pascal, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P120, DOI 10.1007/978-3-642-28891-3_12
   Cuoq Pascal, 2011, International Journal on Software Tools for Technology Transfer, V13, P405, DOI 10.1007/s10009-011-0192-z
   Cuoq P., 2012, 8 INT C NUCL PLANT I
   Cuoq P., 2012, EMBEDDED REAL TIME S
   Cuoq P, 2009, ACM SIGPLAN NOTICES, V44, P281, DOI 10.1145/1631687.1596591
   Cuoq P, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P13
   Dragoi C., 2011, CELIA USER MANUAL
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Ge X, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P992, DOI 10.1145/1985793.1985971
   Gotlieb A., 2006, INT C SOFTW SYST ENG
   Gotlieb A., 2010, CP 2010 WORKSH CONST
   Gotlieb A, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P151, DOI 10.1109/ICST.2009.10
   GRANGER P, 1991, LECT NOTES COMPUT SC, V493, P169
   Grieskamp W, 2006, ELECTRON NOTES THEOR, V144, P3, DOI 10.1016/j.entcs.2006.01.002
   Gulavani B.S., 2006, P FSE ACM, P117, DOI DOI 10.1145/1181775.1181790
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   HORWITZ S, 1988, SIGPLAN NOTICES, V23, P35
   International Organization for Standardization, 2007, 9899TC3 ISOIEC
   Iosif R., 2013, FLATA C
   Kosmatov N, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P139, DOI 10.1109/ISSRE.2004.12
   Kosmatov Nikolai, 2008, 2008 IEEE International Symposium on Software Reliability Engineering, P147, DOI 10.1109/ISSRE.2008.25
   Kosmatov N., 2010, ONLINE VERSION PATHC
   Kosmatov N, 2009, 2009 TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE-PRACTICE AND RESEARCH TECHNIQUES, TAIC PART 2009, P144, DOI 10.1109/TAICPART.2009.26
   Leconte M., 2006, CP 2006 WORKSH CONST
   Lee CH, 1997, INT SYMP MICROARCH, P330, DOI 10.1109/MICRO.1997.645830
   Marre B, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P229, DOI 10.1109/ASE.2000.873667
   Marre B, 2010, LECT NOTES COMPUT SC, V6308, P360, DOI 10.1007/978-3-642-15396-9_30
   Marre B, 2005, ELECTRON NOTES THEOR, V111, P93, DOI 10.1016/j.entcs.2004.12.010
   Michel C., 2002, 7 INT S ART INT MATH
   Mouy Patricia, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P32, DOI 10.1109/ICST.2008.35
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Pariente  Dillon, 2010, INT C FORM VER OBJ O, P205
   Pasareanu CS, 2005, LECT NOTES COMPUT SC, V3576, P52
   Reps T., 1996, Partial Evaluation. International Seminar. Selected Papers, P409
   Schimpf J, 2012, THEOR PRACT LOG PROG, V12, P127, DOI 10.1017/S1471068411000469
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Signoles Julien, 2009, Studia Informatica, V7, P20
   Signoles Julien, 2011, JOURN FRANC LANG APP, P209
   Smaragdakis Y, 2007, LECT NOTES COMPUT SC, V4454, P1
   Tillmann N., 2008, LNCS, V4966, P133
   Tip F., 1995, J PROG LANG, V3
   WEISER M, 1982, COMMUN ACM, V25, P446, DOI 10.1145/358557.358577
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Williams N, 2005, LECT NOTES COMPUT SC, V3463, P281
   Williams N, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P290, DOI 10.1109/ASE.2004.1342749
   WILLIAMS N, 2005, 5 INT WORKSH WORST C
   Williams N, 2009, 2009 ICSE WORKSHOP ON AUTOMATION OF SOFTWARE TEST, P88, DOI 10.1109/IWAST.2009.5069045
   Yorsh G., 2006, ISSTA 06 P 2006 INT, P145
   Zuras D., 2008, 7542008 IEEE, V754-2008, P1, DOI [DOI 10.1109/IEEESTD.2008.4610935, DOI 10.1109/IEEESTD.2008.5976968]
NR 75
TC 10
Z9 10
U1 0
U2 1
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2014
VL 21
IS 1
BP 107
EP 143
DI 10.1007/s10515-013-0127-x
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AA3EG
UT WOS:000330975100005
DA 2024-07-18
ER

PT J
AU Thummalapenta, S
   Xie, T
AF Thummalapenta, Suresh
   Xie, Tao
TI Alattin: mining alternative patterns for defect detection
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Alternative patterns; Static defect detection; Mining software
   engineering data; Code search engine
AB To improve software quality, static or dynamic defect-detection tools accept programming rules as input and detect their violations in software as defects. As these programming rules are often not well documented in practice, previous work developed various approaches that mine programming rules as frequent patterns from program source code. Then these approaches use static or dynamic defect-detection techniques to detect pattern violations in source code under analysis. However, these existing approaches often produce many false positives due to various factors. To reduce false positives produced by these mining approaches, we develop a novel approach, called Alattin, that includes new mining algorithms and a technique for detecting neglected conditions based on our mining algorithm. Our new mining algorithms mine patterns in four pattern formats: conjunctive, disjunctive, exclusive-disjunctive, and combinations of these patterns. We show the benefits and limitations of these four pattern formats with respect to false positives and false negatives among detected violations by applying those patterns to the problem of detecting neglected conditions.
C1 [Thummalapenta, Suresh; Xie, Tao] N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA.
   [Thummalapenta, Suresh] IBM Res Corp, Bangalore, Karnataka, India.
C3 North Carolina State University
RP Thummalapenta, S (corresponding author), N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA.
EM sthumma@ncsu.edu; xie@csc.ncsu.edu
FU NSF [CCF-0725190, CCF-0845272, CNS-0958235, CCF-0915400]; ARO
   [W911NF-08-1-0443, W911NF-08-1-0105]; NCSU CACC
FX This work is supported in part by NSF grants CCF-0725190, CCF-0845272,
   CNS-0958235, and CCF-0915400, ARO grant W911NF-08-1-0443, ARO grant
   W911NF-08-1-0105 managed by NCSU Secure Open Systems Initiative (SOSI),
   and an NCSU CACC grant.
CR Acharya M, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P311
   Acharya Mithun, 2007, P 6 JOINT M EUROPEAN, P25, DOI [DOI 10.1145/1287624.1287630, 10.1145/1287624.1287630]
   Agrawal R., 1996, Advances in Knowledge Discovery and Data Mining, V12, P307, DOI DOI 10.1007/978-3-319-31750-2.
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], 2007, P 2007 INT S SOFTWAR
   Burdick D, 2001, PROC INT CONF DATA, P443, DOI 10.1109/ICDE.2001.914857
   Chang R.-Y., 2007, P 2007 INT S SOFTWAR, P163, DOI DOI 10.1145/1273463.1273486
   Engler Dawson R., 2001, Proceedings of the 18th ACM Symposium on Operating Systems Principles, P57
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   *GOOGL, 2006, GOOGL COD SEARCH ENG
   Han J., 2006, DATA MINING CONCEPTS
   *KOD, 2005, KOD SOURC COD SEARCH
   Lethbridge TC, 2003, IEEE SOFTWARE, V20, P35, DOI 10.1109/MS.2003.1241364
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   LIVSHITS VB, 2005, P 10 EUR SOFTW ENG C, P296, DOI DOI 10.1145/1095430.1081754
   Nanavati A. A., 2001, Proceedings of the 2001 ACM CIKM. Tenth International Conference on Information and Knowledge Management, P482, DOI 10.1145/502585.502666
   NGUYEN TT, 2009, P 7 JOINT M EUR SOFT, P383, DOI DOI 10.1145/1595696.1595767
   Ramanathan MK, 2007, PROC INT CONF SOFTW, P240
   SHIMIZU K, 2005, P MLDM, P376
   Srikant Ramakrishnan., 1996, EDBT, P3, DOI 10.1007/BFb0014140
   Thummalapenta S, 2009, IEEE INT CONF AUTOM, P283, DOI 10.1109/ASE.2009.72
   Thummalapenta S, 2009, PROC INT CONF SOFTW, P496, DOI 10.1109/ICSE.2009.5070548
   Thummalapenta Suresh, 2007, Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering, ASE '07, P204
   Vasudevan P, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P289, DOI 10.1109/SERA.2006.25
   Wasylkowski Andrzej, 2007, P 6 JOINT M EUROPEAN, P35, DOI [10.1145/1287624.1287632, DOI 10.1145/1287624.1287632]
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   Williams C., 2005, Preparing for long-term success, P1
   Zhao L., 2006, Proceedings of the Twelfth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD'06), P827, DOI DOI 10.1145/1150402.1150511
   2010, BIBLIO MINING SOFTWA
NR 29
TC 12
Z9 15
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2011
VL 18
IS 3-4
SI SI
BP 293
EP 323
DI 10.1007/s10515-011-0086-z
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 789YV
UT WOS:000292556500004
DA 2024-07-18
ER

PT J
AU Dhungana, D
   Grünbacher, P
   Rabiser, R
AF Dhungana, Deepak
   Gruenbacher, Paul
   Rabiser, Rick
TI The DOPLER meta-tool for decision-oriented variability modeling: a
   multiple case study
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Product line engineering; Decision models; Meta-tools
ID PRODUCT LINE VARIABILITY
AB The variability of a product line is typically defined in models. However, many existing variability modeling approaches are rigid and don't allow sufficient domain-specific adaptations. We have thus been developing a flexible and extensible approach for defining product line variability models. Its main purposes are to guide stakeholders through product derivation and to automatically generate product configurations. Our approach is supported by the DOPLER (Decision-Oriented Product Line Engineering for effective Reuse) meta-tool that allows modelers to specify the types of reusable assets, their attributes, and dependencies for their specific system and context. The aim of this paper is to investigate the suitability of our approach for different domains. More specifically, we explored two research questions regarding the implementation of variability and the utility of DOPLER for variability modeling in different domains. We conducted a multiple case study consisting of four cases in the domains of industrial automation systems and business software. In each of these case studies we analyzed variability implementation techniques. Experts from our industry partners then developed domain-specific meta-models, tool extensions, and variability models for their product lines using DOPLER. The four cases demonstrate the flexibility of the DOPLER approach and the extensibility and adaptability of the supporting meta tool.
C1 [Dhungana, Deepak] Vienna Univ Technol, Christian Doppler Lab Software Engn Integrat Flex, A-1040 Vienna, Austria.
   [Gruenbacher, Paul] Johannes Kepler Univ Linz, Inst Syst Engn & Automat, A-4040 Linz, Austria.
   [Rabiser, Rick] Johannes Kepler Univ Linz, Christian Doppler Lab Automated Software Engn, A-4040 Linz, Austria.
C3 Technische Universitat Wien; Johannes Kepler University Linz; Johannes
   Kepler University Linz
RP Dhungana, D (corresponding author), Vienna Univ Technol, Christian Doppler Lab Software Engn Integrat Flex, A-1040 Vienna, Austria.
EM deepak.dhungana@tuwien.ac.at; paul.gruenbacher@jku.at;
   rabiser@ase.jku.at
RI Grunbacher, Paul/C-2970-2013; Rabiser, Rick/B-8673-2017
OI Grunbacher, Paul/0000-0002-1951-5288; Dhungana,
   Deepak/0000-0001-9327-9896; Rabiser, Rick/0000-0003-3862-1112
FU Christian Doppler Forschungsgesellschaft, Austria; Siemens VAI Metals
   Technologies
FX This work has been supported by the Christian Doppler
   Forschungsgesellschaft, Austria and Siemens VAI Metals Technologies. We
   also want to thank BMD Systemhaus GmbH and FH Oberosterreich Research.
   The authors would like to thank Daniela Lettner for the careful review
   of the manuscript.
CR [Anonymous], LECT NOTES COMPUTER
   [Anonymous], AI EXPERT
   [Anonymous], 25 IEEE ACM INT C AU
   [Anonymous], 2 INT WORKSH VAR MOD
   [Anonymous], SAICSIT 05
   [Anonymous], 2009, P 42 IEEE ANN HAWAII
   [Anonymous], 2 INT WORKSH VAR MOD
   [Anonymous], RPC91122MC CONS SP
   [Anonymous], 11 INT SOFTW PROD LI
   [Anonymous], AS PAC SOFTW ENG C A
   [Anonymous], ASE
   [Anonymous], 2007, P 22 IEEE ACM INT C
   [Anonymous], INT C ADV INF SYST E
   [Anonymous], SOFTW SERV VAR MAN W
   [Anonymous], VISPLE 2008
   [Anonymous], 27 INT C SOFTW ENG I
   [Anonymous], 10 EUR SOFTW ENG C H
   [Anonymous], P 4 INT WORKSH VAR M
   [Anonymous], INTRO SYNTHESIS
   [Anonymous], 2007, SOFTWARE PRODUCT LIN
   [Anonymous], 3 SOFTW PROD LIN C S
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], 1995, LNCS
   [Anonymous], FDN SOFTWARE ENG
   [Anonymous], VISPLE 2007
   Asikainen T, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P31, DOI 10.1109/SPLINE.2006.1691575
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Berger T., 2010, P INT C AUT SOFTW EN, P73, DOI DOI 10.1145/1858996.1859010
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, P7, DOI 10.1002/spip.213
   Czarnecki K., 2006, GPCE, P211
   Czarnecki K, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P41, DOI 10.1109/SPLINE.2006.1691576
   Dashofy EM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P266, DOI 10.1109/ICSE.2002.1007974
   Dashofy EM, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P103, DOI 10.1109/WICSA.2001.948416
   Dhungana D, 2007, INT FED INFO PROC, V244, P238
   Dhungana D, 2010, J SYST SOFTWARE, V83, P1108, DOI 10.1016/j.jss.2010.02.018
   Froschauer R, 2009, IEEE INTL CONF IND I, P905, DOI 10.1109/INDIN.2009.5195923
   Froschauer R, 2008, PROCEEDINGS OF THE 34TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, P35, DOI 10.1109/SEAA.2008.21
   Gomaa H, 2002, IEEE INT C ENG COMP, P238, DOI 10.1109/ICECCS.2002.1181517
   Gomaa H., 2005, DESIGNING SOFTWARE P
   Grünbacher P, 2009, IEEE INT CONF AUTOM, P247, DOI 10.1109/ASE.2009.11
   Grundy J, 2006, IEEE INT CONF AUTOM, P25
   Kang Kyo C, 1990, Technical Report
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Robson C., 2002, Real world research
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Schmid K, 2004, SCI COMPUT PROGRAM, V53, P259, DOI 10.1016/j.scico.2003.04.002
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Sinnema M, 2007, INFORM SOFTWARE TECH, V49, P717, DOI 10.1016/j.infsof.2006.08.001
   Thiel S, 2002, IEEE SOFTWARE, V19, P66, DOI 10.1109/MS.2002.1020289
   Tolvanen Juha-Pekka., 2003, COMPANION 18 ANN ACM, P92
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
   Wolfinger R, 2008, SEVENTH INTERNATIONAL CONFERENCE ON COMPOSITION-BASED SOFTWARE SYSTEMS, PROCEEDINGS, P21, DOI 10.1109/ICCBSS.2008.30
   Yin R.K., 2011, Qualitative research from start to finish
   Zhu NP, 2007, J SYST SOFTWARE, V80, P1390, DOI 10.1016/j.jss.2006.10.028
NR 57
TC 71
Z9 73
U1 0
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2011
VL 18
IS 1
BP 77
EP 114
DI 10.1007/s10515-010-0076-6
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 702CV
UT WOS:000285873100004
DA 2024-07-18
ER

PT J
AU Ahmed, M
   Khan, SUR
   Alam, KA
AF Ahmed, Mohsin
   Khan, Saif Ur Rehman
   Alam, Khubaib Amjad
TI An NLP-based quality attributes extraction and prioritization framework
   in Agile-driven software development
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software quality attributes; NFRs requirements prioritization;
   Agile-based software development; Software quality assurance
ID NONFUNCTIONAL REQUIREMENTS
AB Software quality plays a significant role in ensuring the customer demands and expectations. Generally speaking, Quality of the software is a functional behaviour that heavily depends on the non-functional requirements. However, generally software engineer's pay relatively lesser attention to the non-functional requirements. Moreover, it is of vital importance to have a clear view of software's quality as early as possible, because it can affect the different artefacts of the software at later development stages including implementation, testing, and maintenance. The early-stage conformance of software quality is more important in agile-based software development where the requirements are more volatile than any other development environments. The early knowledge about the software quality can positively impact on the design decisions in agile-based software development context. Motivated by this, we propose a conceptual framework for automatic extraction and prioritization of quality attributes from the user stories in an agile-based development context. The proposed framework contains two main components including QAExtractor and QAPrioritiser. The core of this framework (QAExtractor) is based on natural language processing, which generalise the user stories for a specific quality attribute. In contrast, QAPrioritiser ranks the extracted quality attributes grounded on the frequency, roles impact, and criticality factor value. We validate the effectiveness of the proposed framework using two case studies. The results revealed that the proposed framework outperforms the existing technique in terms of precision, recall, and F measure.
C1 [Ahmed, Mohsin; Khan, Saif Ur Rehman] COMSATS Univ Islamabad, Dept Comp Sci, Islamabad, Pakistan.
   [Alam, Khubaib Amjad] Natl Univ Comp & Emerging Sci FAST NUCES, FAST Sch Comp, Software Engn Dept, Islamabad, Pakistan.
C3 COMSATS University Islamabad (CUI)
RP Alam, KA (corresponding author), Natl Univ Comp & Emerging Sci FAST NUCES, FAST Sch Comp, Software Engn Dept, Islamabad, Pakistan.
EM its.mohsin.ahmed@gmail.com; saif_rehman@comsats.edu.pk;
   khubaib.amjad@nu.edu.pk
RI Khan, Saif Ur Rehman/A-6299-2013; Khan, Saif/IQU-2754-2023; Khan, Saif
   Ur Rehman/HKO-1404-2023
OI Khan, Saif Ur Rehman/0000-0002-9643-6858; Khan, Saif Ur
   Rehman/0000-0002-9643-6858; Alam, Khubaib Amjad/0000-0002-9476-2940
CR Abad ZSH, 2017, INT REQUIR ENG CONF, P496, DOI 10.1109/RE.2017.36
   Al Imran MA, 2017, 2017 IEEE 8TH CONTROL AND SYSTEM GRADUATE RESEARCH COLLOQUIUM (ICSGRC), P174, DOI 10.1109/ICSGRC.2017.8070590
   Al Omran FNA, 2017, IEEE WORK CONF MIN S, P187, DOI 10.1109/MSR.2017.42
   Aljallabi BM, 2015, 2015 International Conference on Computing, Control, Networking, Electronics and Embedded Systems Engineering (ICCNEEE), P428, DOI 10.1109/ICCNEEE.2015.7381407
   [Anonymous], 2007, VAMOS
   Arvanitou EM, 2017, J SYST SOFTWARE, V127, P52, DOI 10.1016/j.jss.2017.01.026
   Bellomo S, 2013, 2013 2ND INTERNATIONAL WORKSHOP ON THE TWIN PEAKS OF REQUIREMENTS AND ARCHITECTURE (TWINPEAKS), P8, DOI 10.1109/TwinPeaks.2013.6614717
   Chung L, 2012, Non-Functional Requirements in Software Engineering, V5
   Chung L, 2009, LECT NOTES COMPUT SC, V5600, P363, DOI 10.1007/978-3-642-02463-4_19
   Collobert R, 2011, J MACH LEARN RES, V12, P2493
   Domah D., 2013, THESIS NOVA SE U FOR
   Farid WM, 2012, ASIA PAC SOFWR ENG, P322, DOI 10.1109/APSEC.2012.23
   Farid Weam M., 2012, 2012 P IEEE SOUTH, P1, DOI [10.1109/SECon.2012.6196989, DOI 10.1109/SECON.2012.6196989]
   Ferrari A, 2017, IEEE SOFTWARE, V34, P28, DOI 10.1109/MS.2017.4121207
   Gilson F, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE COMPANION (ICSA-C 2019), P129, DOI 10.1109/ICSA-C.2019.00031
   Hneif M, 2011, IEEE SOFTWARE, V28, P72, DOI 10.1109/MS.2010.157
   Jain P, 2016, INT CONF RELI INFO, P615
   Jawad ANA, 2015, 2015 INTERNATIONAL CONFERENCE ON INDUSTRIAL ENGINEERING AND OPERATIONS MANAGEMENT (IEOM)
   Kassab M, 2015, IEEE INT WORKS EMPIR, P1, DOI 10.1109/EmpiRE.2015.7431299
   Knauss Eric, 2014, Requirements Engineering: Foundation for Software Quality. 20th International Working Conference, REFSQ 2014. Proceedings: LNCS 8396, P39, DOI 10.1007/978-3-319-05843-6_4
   Kurtanovic Z, 2017, INT REQUIR ENG CONF, P490, DOI 10.1109/RE.2017.82
   Lu Mengmeng., 2017, P 21 INT C EVALUATIO, P344, DOI [10.1145/3084226.3084241, DOI 10.1145/3084226.3084241]
   Maiti RR, 2017, IEEE SOUTHEASTCON, DOI 10.1109/SECON.2017.7925365
   McCall J., 1977, Factors in software quality, V1
   .mendeley.com, MEND DAT REQ DAT SET
   Moreira A., 2002, SEKE 02 P 14 INT C S, V15 - 19, P167
   mountaingoatsoftware.com, US STOR US STOR EX M
   Petrov S, 2011, Arxiv, DOI arXiv:1104.2086
   Rehman Bisma, 2021, Proceedings of the First International Workshop on Intelligent Software Automation. ISEA 2020. Advances in Intelligent Systems and Computing (AISC 1347), P29, DOI 10.1007/978-981-16-1045-5_3
   Sanghoon Jeon, 2011, 2011 9th International Conference on Software Engineering Research, Management and Applications, P203, DOI 10.1109/SERA.2011.24
   Schön EM, 2017, COMPUT STAND INTER, V49, P79, DOI 10.1016/j.csi.2016.08.011
   Yin WP, 2017, Arxiv, DOI [arXiv:1702.01923, DOI 10.48550/ARXIV.1702.01923]
NR 32
TC 6
Z9 6
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2023
VL 30
IS 1
DI 10.1007/s10515-022-00371-9
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7T3EL
UT WOS:000911328100001
DA 2024-07-18
ER

PT J
AU AlOmar, EA
   Liu, JQ
   Addo, K
   Mkaouer, MW
   Newman, C
   Ouni, A
   Yu, Z
AF AlOmar, Eman Abdullah
   Liu, Jiaqian
   Addo, Kenneth
   Mkaouer, Mohamed Wiem
   Newman, Christian
   Ouni, Ali
   Yu, Zhe
TI On the documentation of refactoring types
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Refactoring; Software quality; Software engineering; Machine learning
ID CLASSIFICATION
AB Commit messages are the atomic level of software documentation. They provide a natural language description of the code change and its purpose. Messages are critical for software maintenance and program comprehension. Unlike documenting feature updates and bug fixes, little is known about how developers document their refactoring activities. Specifically, developers can perform multiple refactoring operations, including moving methods, extracting classes, renaming attributes, for various reasons, such as improving software quality, managing technical debt, and removing defects. Yet, there is no systematic study that analyzes the extent to which the documentation of refactoring accurately describes the refactoring operations performed at the source code level. Therefore, this paper challenges the ability of refactoring documentation, written in commit messages, to adequately predict the refactoring types, performed at the commit level. Our analysis relies on the text mining of commit messages to extract the corresponding features (i.e., keywords) that better represent each class (i.e., refactoring type). The extraction of text patterns, specific to each refactoring type (e.g., rename, extract, move, inline, etc.) allows the design of a model that verifies the consistency of these patterns with their corresponding refactoring. Such verification process can be achieved via automatically predicting, for a given commit, the method-level type of refactoring being applied, namely Extract Method, Inline Method, Move Method, Pull-up Method, Push-down Method, and Rename Method. We compared various classifiers, and a baseline keyword-based approach, in terms of their prediction performance, using a dataset of 5004 commits. Our main findings show that the complexity of refactoring type prediction varies from one type to another. Rename Method and Extract Method were found to be the best documented refactoring activities, while Pull-up Method, and Push-down Method were the hardest to be identified via textual descriptions. Such findings bring the attention of developers to the necessity of paying more attention to the documentation of these types.
C1 [AlOmar, Eman Abdullah; Mkaouer, Mohamed Wiem; Newman, Christian; Yu, Zhe] Rochester Inst Technol, Rochester, NY 14623 USA.
   [AlOmar, Eman Abdullah] Stevens Inst Technol, Hoboken, NJ 07030 USA.
   [Liu, Jiaqian] SUNY Buffalo, Buffalo, NY USA.
   [Addo, Kenneth] Univ Maryland, College Pk, MD 20742 USA.
   [Ouni, Ali] Univ Quebec, ETS Montreal, Montreal, PQ, Canada.
C3 Rochester Institute of Technology; Stevens Institute of Technology;
   State University of New York (SUNY) System; State University of New York
   (SUNY) Buffalo; University System of Maryland; University of Maryland
   College Park; University of Quebec; University of Quebec Montreal; Ecole
   de Technologie Superieure - Canada
RP AlOmar, EA (corresponding author), Rochester Inst Technol, Rochester, NY 14623 USA.; AlOmar, EA (corresponding author), Stevens Inst Technol, Hoboken, NJ 07030 USA.
EM eman.alomar@mail.rit.edu; jliu275@buffalo.edu; kaddo1@umbc.edu;
   mwmvse@rit.edu; cdnvse@rit.edu; ali.ouni@etsmtl.ca; zxyvse@rit.edu
RI AlOmar, Eman Abdullah/ABW-2622-2022; Mkaouer, Mohamed Wiem/N-7476-2017;
   Ouni, Ali/Y-8280-2019
OI AlOmar, Eman Abdullah/0000-0003-1800-9268; Mkaouer, Mohamed
   Wiem/0000-0001-6010-7561; Ouni, Ali/0000-0003-4708-0362
FU National Science Foundation [1757680]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1757680]
   Funding Source: National Science Foundation
FX This material is based on work supported by the National Science
   Foundation under Grant No. 1757680.
CR AlOmar E.A., 2021, SELF AFFIRMED REFACT
   Alomar EA, 2024, J SOFTW-EVOL PROC, V36, DOI 10.1002/smr.2395
   AlOmar EA, 2021, INFORM SOFTWARE TECH, V140, DOI 10.1016/j.infsof.2021.106675
   AlOmar EA, 2021, 2021 IEEE/ACM 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2021), P348, DOI 10.1109/ICSE-SEIP52600.2021.00044
   AlOmar EA, 2021, EXPERT SYST APPL, V167, DOI 10.1016/j.eswa.2020.114176
   AlOmar EA, 2020, LECT NOTES COMPUT SC, V12541, P261, DOI 10.1007/978-3-030-64694-3_16
   AlOmar EA, 2021, J SYST SOFTWARE, V171, DOI 10.1016/j.jss.2020.110821
   AlOmar EA, 2019, INT SYMP EMP SOFTWAR, P42
   AlOmar EA, 2019, 2019 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON REFACTORING (IWOR 2019), P51, DOI 10.1109/IWoR.2019.00017
   AlOmar Eman Abdullah, 2021, INNOV SYST SOFTW ENG, P1
   AlOmar EmanAbdullah., 2020, P IEEEACM 42 INT C S, P342, DOI [10.1145/3387940, DOI 10.1145/3387940]
   Alsolai H, 2020, INFORM SOFTWARE TECH, V119, DOI 10.1016/j.infsof.2019.106214
   Andrew G., 2007, P 24 INT C MACH LEAR, V24, P33, DOI [10.1145/1273496.1273501, DOI 10.1145/1273496.1273501]
   Aniche M., 2020, IEEE Transactions on Software Engineering
   [Anonymous], 2012, P 27 C UNCERTAINTY A
   Arnaoudova V, 2016, EMPIR SOFTW ENG, V21, P104, DOI 10.1007/s10664-014-9350-8
   Arnaoudova V, 2014, IEEE T SOFTWARE ENG, V40, P502, DOI 10.1109/TSE.2014.2312942
   Avgeriou P., 2016, DAGSTUHL SEMINAR 161, V6
   Bibiano AC, 2020, INT C PROGRAM COMPRE, P149, DOI 10.1145/3387904.3389264
   Chávez A, 2017, XXXI BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING (SBES 2017), P74, DOI 10.1145/3131151.3131171
   CHENOUARD N., 2008, P 2 WORKSH REF TOOLS, P1
   Collins M, 2002, PROCEEDINGS OF THE 2002 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING, P1
   Counsell S, 2018, LECT NOTES COMPUT SC, V11271, P159, DOI 10.1007/978-3-030-03673-7_12
   Counsell S, 2019, INT SYMP EMP SOFTWAR, P25
   Duda R. O., 2012, PATTERN CLASSIFICATI, DOI DOI 10.1007/978-3-319-57027-3_4
   Ebert F, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-020-09909-5
   Fakhoury S, 2020, EMPIR SOFTW ENG, V25, P2140, DOI 10.1007/s10664-019-09751-4
   Fakhoury S, 2019, INT C PROGRAM COMPRE, P2, DOI 10.1109/ICPC.2019.00014
   Fernández-Delgado M, 2014, J MACH LEARN RES, V15, P3133
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Friedman JH, 2001, ANN STAT, V29, P1189, DOI 10.1214/aos/1013203451
   Gallaba K, 2020, IEEE T SOFTWARE ENG, V46, P33, DOI 10.1109/TSE.2018.2838131
   Gharbi S, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P1760, DOI 10.1145/3297280.3297452
   HANSEN LK, 1990, IEEE T PATTERN ANAL, V12, P993, DOI 10.1109/34.58871
   Herbich R, 2001, J MACH LEARN RES, V1, P245, DOI 10.1162/153244301753683717
   Hindle A., 2011, P 8 WORK C MIN SOFTW, P163, DOI DOI 10.1145/1985441.1985466
   Hindle A, 2009, INT C PROGRAM COMPRE, P30, DOI 10.1109/ICPC.2009.5090025
   Hönel S, 2020, J SYST SOFTWARE, V168, DOI 10.1016/j.jss.2020.110673
   Hönel S, 2019, 2019 IEEE 19TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2019), P109, DOI 10.1109/QRS.2019.00027
   Jose Cijo, 2013, PMLR, P486
   Kim M, 2014, IEEE T SOFTWARE ENG, V40, P633, DOI 10.1109/TSE.2014.2318734
   Kim S, 2016, EMPIR SOFTW ENG, V21, P565, DOI 10.1007/s10664-015-9369-5
   Kochhar PS, 2014, IEEE INT C ENG COMP, P126, DOI 10.1109/ICECCS.2014.25
   Kowsari K, 2019, INFORMATION, V10, DOI 10.3390/info10040150
   Krasniqi R, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P512, DOI [10.1109/saner48275.2020.9054816, 10.1109/SANER48275.2020.9054816]
   Lane H., 2019, Natural Language Processing in Action: Understanding, Analyzing, and Generating Text With Python
   Le TDB, 2015, INT C PROGRAM COMPRE, P36, DOI 10.1109/ICPC.2015.13
   Levin S., 2019, ARXIV PREPRINT ARXIV
   Levin Stanislav, 2017, P 13 INT C PREDICTIV, P97
   Lin S., 2013, P SEKE, V13, P455
   Lorena AC, 2008, ARTIF INTELL REV, V30, P19, DOI 10.1007/s10462-009-9114-9
   Madrid, 2006, DISCRIMINATING DEV A
   Mahmoodian N., 2010, Proceedings of 2010 International Symposium on Information Technology (ITSim 2010), P693, DOI 10.1109/ITSIM.2010.5561540
   Manning C.D., 1999, FDN STAT NATURAL LAN
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   Marmolejos L, 2022, INNOV SYST SOFTW ENG, V18, P233, DOI 10.1007/s11334-021-00388-5
   Mauczka A, 2012, LECT NOTES COMPUT SC, V7212, P301, DOI 10.1007/978-3-642-28872-2_21
   McMillan C., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P343, DOI 10.1109/ICSM.2011.6080801
   Munaiah N, 2017, EMPIR SOFTW ENG, V22, P3219, DOI 10.1007/s10664-017-9512-6
   Mund Sumit., 2015, Microsoft azure machine learning
   Murphy KP, 2012, MACHINE LEARNING: A PROBABILISTIC PERSPECTIVE, P1
   Murphy-Hill E, 2012, IEEE T SOFTWARE ENG, V38, P5, DOI 10.1109/TSE.2011.41
   Naiya N, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P88, DOI 10.1109/SEAA.2015.42
   Ouni A, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2932631
   Pantiuchina J, 2018, PROC IEEE INT CONF S, P80, DOI 10.1109/ICSME.2018.00017
   Peruma A, 2020, J SYST SOFTWARE, V169, DOI 10.1016/j.jss.2020.110704
   Prinzie A, 2008, EXPERT SYST APPL, V34, P1721, DOI 10.1016/j.eswa.2007.01.029
   Ratzinger J., 2008, Proceedings of the 2008 international working conference on Mining software repositories, P35, DOI [10.1145/1370750.1370759, DOI 10.1145/1370750.1370759]
   Ratzinger J., 2005, IMPROVING EVOLVABILI
   Ratzinger J, 2007, THESIS
   Rebai S, 2020, INFORM SOFTWARE TECH, V126, DOI 10.1016/j.infsof.2020.106332
   Sabetta A, 2018, PROC IEEE INT CONF S, P579, DOI 10.1109/ICSME.2018.00058
   Saif H, 2014, LREC 2014 - NINTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P810
   Shotton J., 2013, Advances in Neural Information Processing Systems, V26, P234
   Silva D, 2017, IEEE WORK CONF MIN S, P269, DOI 10.1109/MSR.2017.14
   Silva D, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P858, DOI 10.1145/2950290.2950305
   Soares G., 2009, SAFEREFACTOR TOOL CH
   Soares G, 2013, J SYST SOFTWARE, V86, P1006, DOI 10.1016/j.jss.2012.10.040
   Soares Vinicius, 2020, SBES '20: Proceedings of the 34th Brazilian Symposium on Software Engineering, P788, DOI 10.1145/3422392.3422439
   Stroggylos K., 2007, P 5 INT WORKSH SOFTW, P10, DOI [10.1109/WOSQ.2007.11, DOI 10.1109/WOSQ.2007.11]
   Swanson E. B., 1976, 2nd International Conference on Software Engineering, P492
   Swidan A, 2018, ICER'18: PROCEEDINGS OF THE 2018 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P151, DOI 10.1145/3230977.3230995
   Tan CM, 2002, INFORM PROCESS MANAG, V38, P529, DOI 10.1016/S0306-4573(01)00045-0
   Tan Liang., 2019, SOFTWARE ENG WORKSHO, P100
   Treude C., 2020, ARXIV PREPRINT ARXIV
   Tsantalis N, 2022, IEEE T SOFTWARE ENG, V48, P930, DOI 10.1109/TSE.2020.3007722
   Tsantalis N, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P483, DOI 10.1145/3180155.3180206
   Ubayashi N, 2018, PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P429, DOI 10.5220/0006604804290437
   Veerappa Varsha, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P271, DOI 10.1109/ESEM.2013.37
   Wake WC., 2004, Refactoring Workbook
   Wu XD, 2008, KNOWL INF SYST, V14, P1, DOI 10.1007/s10115-007-0114-2
   Yamashita S, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P657, DOI [10.1109/SANER48275.2020.9054861, 10.1109/saner48275.2020.9054861]
   Zafar S, 2019, INT SYMP EMP SOFTWAR, P59, DOI 10.1109/esem.2019.8870174
   Zampetti F, 2020, EMPIR SOFTW ENG, V25, P1095, DOI 10.1007/s10664-019-09785-8
   Zhang D., 2018, PRELIMINARY INVESTIG, DOI [10.18293/SEKE2018-081, DOI 10.18293/SEKE2018-081]
NR 95
TC 11
Z9 20
U1 1
U2 11
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 9
DI 10.1007/s10515-021-00314-w
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XY1CF
UT WOS:000736718900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hussain, M
   Ali, N
   Hong, JE
AF Hussain, Manzoor
   Ali, Nazakat
   Hong, Jang-Eui
TI DeepGuard: a framework for safeguarding autonomous driving systems from
   inconsistent behaviour
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Autonomous driving systems; Anomaly detection; Deep learning; Safety
   guards; DNN
ID ANOMALY DETECTION
AB The deep neural networks (DNNs)-based autonomous driving systems (ADSs) are expected to reduce road accidents and improve safety in the transportation domain as it removes the factor of human error from driving tasks. The DNN-based ADS sometimes may exhibit erroneous or unexpected behaviours due to unexpected driving conditions which may cause accidents. Therefore, safety assurance is vital to the ADS. However, DNN-based ADS is a highly complex system that puts forward a strong demand for robustness, more specifically, the ability to predict unexpected driving conditions to prevent potential inconsistent behaviour. It is not possible to generalize the DNN model's performance for all driving conditions. Therefore, the driving conditions that were not considered during the training of the ADS may lead to unpredictable consequences for the safety of autonomous vehicles. This study proposes an autoencoder and time series analysis-based anomaly detection system to prevent the safety-critical inconsistent behaviour of autonomous vehicles at runtime. Our approach called DeepGuard consists of two components. The first component- the inconsistent behaviour predictor, is based on an autoencoder and time series analysis to reconstruct the driving scenarios. Based on reconstruction error (e) and threshold (theta), it determines the normal and unexpected driving scenarios and predicts potential inconsistent behaviour. The second component provides on-the-fly safety guards, that is, it automatically activates healing strategies to prevent inconsistencies in the behaviour. We evaluated the performance of DeepGuard in predicting the injected anomalous driving scenarios using already available open-sourced DNN-based ADSs in the Udacity simulator. Our simulation results show that the best variant of DeepGuard can predict up to 93% on the CHAUFFEUR ADS, 83% on DAVE-2 ADS, and 80% of inconsistent behaviour on the EPOCH ADS model, outperforming SELFORACLE and DeepRoad. Overall, DeepGuard can prevent up to 89% of all predicted inconsistent behaviours of ADS by executing predefined safety guards.
C1 [Hussain, Manzoor; Ali, Nazakat; Hong, Jang-Eui] Chungbuk Natl Univ, Sch Elect & Comp Engn, Cheongju, Chungbuk, South Korea.
C3 Chungbuk National University
RP Hong, JE (corresponding author), Chungbuk Natl Univ, Sch Elect & Comp Engn, Cheongju, Chungbuk, South Korea.
EM hussain@selab.cbnu.ac.kr; nazakatali@selab.cbnu.ac.kr;
   jehong@chungbuk.ac.kr
RI Hussain, Manzoor/JEO-4128-2023
OI Hussain, Manzoor/0000-0002-9131-0930; Ali, Nazakat/0000-0002-3875-812X
FU Korea National Research Foundation of the Ministry of ICT and Science
   [NRF2020R1A2C1007571]
FX This work is supported by the Korea National Research Foundation of the
   Ministry of ICT and Science (NRF2020R1A2C1007571).
CR An J., 2015, Special Lecture on IE, V2, P1
   [Anonymous], 2019, UN REAL TIM DEV PLAL
   [Anonymous], 2016, TEAM KOMANDA
   [Anonymous], 2014, SAN FRANCISCO PARKIN
   Azzalini D, 2021, IEEE ROBOT AUTOM LET, V6, P2985, DOI 10.1109/LRA.2021.3062597
   Bahavan N., 2020, ARXIV, V2006
   Bermad N., 2019, 2019 8 INT C PERF EV, P1
   Bojarski Mariusz, 2016, arXiv
   Bolte JA, 2019, IEEE INT VEH SYM, P438, DOI 10.1109/IVS.2019.8813817
   Borghesi A, 2019, ENG APPL ARTIF INTEL, V85, P634, DOI 10.1016/j.engappai.2019.07.008
   Campos GO, 2016, DATA MIN KNOWL DISC, V30, P891, DOI 10.1007/s10618-015-0444-8
   Cerf VG, 2018, COMMUN ACM, V61, P7, DOI 10.1145/3177753
   Chen TT, 2020, IEEE ACCESS, V8, P47072, DOI 10.1109/ACCESS.2020.2977892
   Chen ZM, 2018, WIREL TELECOMM SYMP
   Chong YS, 2017, LECT NOTES COMPUT SC, V10262, P189, DOI 10.1007/978-3-319-59081-3_23
   Cozzolino D, 2016, IEEE INT WORKS INFOR
   Davis Jesse, 2006, P 23 INT C MACH LEAR, P233, DOI [DOI 10.1145/1143844.1143874, 10.1145/1143844.1143874]
   Epoch Team, 2016, STEER ANGL MOD EP
   Gomes L., MIT TECHNOLOGY REV
   Greenblatt NA, 2016, IEEE SPECTRUM, V53, P46, DOI 10.1109/MSPEC.2016.7419800
   Gyawali S, 2020, IEEE T VEH TECHNOL, V69, P8871, DOI 10.1109/TVT.2020.2996620
   Henriksson J, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST), P27, DOI 10.1109/AITest.2019.00-12
   Hu J, 2017, IEEE T VEH TECHNOL, V66, P6645, DOI 10.1109/TVT.2017.2660497
   Jana S., 2018, P INT C SOFTW ENG
   Kusano KD, 2012, IEEE T INTELL TRANSP, V13, P1546, DOI 10.1109/TITS.2012.2191542
   NHTSA, 2020, AUT VEH SAF
   Patel N, 2018, IEEE INT C INT ROBOT, P6149, DOI 10.1109/IROS.2018.8593375
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Saito T, 2015, PLOS ONE, V10, DOI 10.1371/journal.pone.0118432
   Stocco A, 2020, PROC INT CONF SOFTW, P359, DOI 10.1145/3377811.3380353
   Tjonnås J, 2010, IEEE T CONTR SYST T, V18, P545, DOI 10.1109/TCST.2009.2023981
   Udacity, 2017, A self-driving car simulator built with Unity
   Ul Haq F, 2020, IEEE INT CONF SOFTW, P85, DOI 10.1109/ICST46399.2020.00019
   Unity, UN SCRIPT API PART
   Nguyen VL, 2020, IEEE T VEH TECHNOL, V69, P9417, DOI 10.1109/TVT.2020.2975822
   Wang X, 2020, IEEE T VEH TECHNOL, V69, P9497, DOI 10.1109/TVT.2020.3003933
   Wei XC, 2017, DES AUT CON, DOI 10.1145/306l639.3062207
   World Health Organization, 2018, Global status report on alcohol and health 2018
   Xu HW, 2018, WEB CONFERENCE 2018: PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE (WWW2018), P187, DOI 10.1145/3178876.3185996
   Zavrtanik V, 2021, PATTERN RECOGN, V112, DOI 10.1016/j.patcog.2020.107706
   Zhang MS, 2018, IEEE INT CONF AUTOM, P132, DOI 10.1145/3238147.3238187
   Zhang WL, 2020, IEEE T VEH TECHNOL, V69, P12807, DOI 10.1109/TVT.2020.3030863
NR 42
TC 14
Z9 14
U1 1
U2 8
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 1
DI 10.1007/s10515-021-00310-0
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XD7EW
UT WOS:000722868300001
DA 2024-07-18
ER

PT J
AU Liu, Y
   Ma, Y
   Yang, YS
AF Liu, Yang
   Ma, Yan
   Yang, Yongsheng
TI A three-valued model abstraction framework for PCTL* stochastic model
   checking
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Stochastic model checking; Three-valued model abstraction; Game;
   Abstraction-refinement; BPSO
ID SYMMETRY REDUCTION; SYMBOLIC VERIFICATION; WEAK BISIMULATION;
   REFINEMENT; SYSTEMS
AB Stochastic model checking can automatically verify and analyse the software-driven autonomous systems with stochastic behaviors, which is a formal verification technique based on system models. When coping with large-scale systems, it suffers from state space explosion problem very seriously. Model abstraction is a potential technique for mitigating this problem. At present, only a few properties specified by PCTL (Probabilistic Computation Tree Logic), such as probabilistic safety and probabilistic reachability, can be preserved in the practical model abstraction of stochastic model checking, which are the proper subset of PCTL* (Probabilistic Computation Tree Logic*) properties. For dealing with this, an effective and efficient three-valued model abstraction framework for full PCTL* stochastic model checking is proposed in this paper. We propose a new abstract model to preserve full PCTL* properties for nondeterministic and probabilistic system, which orthogonally integrates interval probability of transition and game for nondeterminism. A game-based three-valued PCTL* stochastic model checking algorithm is developed to verify abstract model, and a BPSO (binary particle swarm optimization) algorithm integrated with sample learning is designed to refine the indefinite result of three-valued PCTL* stochastic model checking abstract model. It is proved that full PCTL* properties are preserved when the result of three-valued stochastic model checking is definite, and the efficiency of this framework is demonstrated by some large cases.
C1 [Liu, Yang; Yang, Yongsheng] Shanghai Maritime Univ, Inst Logist Sci & Engn, Shanghai 201306, Peoples R China.
   [Ma, Yan] Nanjing Univ Finance & Econ, Sch Accounting, Nanjing 210023, Peoples R China.
   [Liu, Yang; Ma, Yan] Natl Univ Singapore, Sch Comp, Singapore 117417, Singapore.
C3 Shanghai Maritime University; Nanjing University of Finance & Economics;
   National University of Singapore
RP Ma, Y (corresponding author), Nanjing Univ Finance & Econ, Sch Accounting, Nanjing 210023, Peoples R China.; Ma, Y (corresponding author), Natl Univ Singapore, Sch Comp, Singapore 117417, Singapore.
EM yl.nus.sg@gmail.com; yanma_nus@126.com
RI Lang, Ming/HIK-0758-2022; Yang, YiChen/KEI-0140-2024
FU Singapore-UK Cyber Security of EPSRC [EP/N020170/1]; MOE Humanities and
   Social Sciences Foundation of China [20YJCZH102]
FX The work was supported by Singapore-UK Cyber Security of EPSRC under
   Grant Nos. EP/N020170/1, MOE Humanities and Social Sciences Foundation
   of China under Grant Nos. 20YJCZH102. We would like to extend our
   deepest respects to Professor Edmund M. Clarke at Carnegie Mellon
   University, USA, who received ACM Turing Award for his pioneering work
   of model checking and passed away on December 22, 2020. He inspired us a
   lot through his books and papers, especially the direct discussion about
   abstraction for stochastic model checking. Thanks to Professor Marta
   Kwiatkowska at University of Oxford, UK, for discussion with her about
   the game semantics for three-valued stochastic model checking.
CR Abraham Erika, 2014, Formal Methods for Executable Software Models. 14th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2014. Advanced Lectures: LNCS 8483, P65, DOI 10.1007/978-3-319-07317-0_3
   Albanese M, 2008, IEEE T MULTIMEDIA, V10, P1429, DOI 10.1109/TMM.2008.2010417
   [Anonymous], 1971, IJCAI
   [Anonymous], 1980, Lecture Notes in Computer Science
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Nguyen BH, 2017, PROC ADAPT LEARN OPT, V8, P319, DOI 10.1007/978-3-319-49049-6_23
   Baier C, 2005, INFORM COMPUT, V200, P149, DOI 10.1016/j.ic.2005.03.001
   Baier C, 2004, INT CONF QUANT EVAL, P230
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 1997, LECT NOTES COMPUT SC, V1254, P119
   Baier C, 2006, ELECTRON NOTES THEOR, V153, P97, DOI 10.1016/j.entcs.2005.10.034
   Belardinelli F, 2019, AAAI CONF ARTIF INTE, P6030
   Bernemann R., 2020, UNCERTAINTY REASONIN, P1
   BUCHHOLZ P, 1994, J APPL PROBAB, V31, P59, DOI 10.2307/3215235
   Chadha R, 2010, ACM T COMPUT LOG, V12, DOI 10.1145/1838552.1838553
   Chi T, 2019, WIREL NETW, V25, P805, DOI 10.1007/s11276-017-1593-z
   Christopher P., 2012, THESIS U GLASGOW SCO
   Ciesinski F., 2011, THESIS DRESDEN U TEC
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Clarke E., 2002, P C COMP AID VER COP
   Clarke EM, 2009, COMMUN ACM, V52, P75, DOI 10.1145/1592761.1592781
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Clarke EM, 1996, FORM METHOD SYST DES, V9, P77, DOI 10.1007/BF00625969
   D'Argenio PR, 2004, INT CONF QUANT EVAL, P240
   Dams D., 2018, HDB MODEL CHECKING
   de Alfaro L, 2007, LECT NOTES COMPUT SC, V4590, P325
   Dehnert C., 2018, THESIS RWTH AACHEN U
   Dehnert C, 2013, LECT NOTES COMPUT SC, V7737, P28
   Derisavi S, 2007, LECT NOTES COMPUT SC, V4424, P139
   Dey D, 2020, LECT NOTE DATA ENG, V44, P459, DOI 10.1007/978-3-030-37051-0_52
   Didier Frederic, 2010, Proceedings of the 2010 Seventh International Conference on the Quantitative Evaluation of Systems (QEST 2010), P193, DOI 10.1109/QEST.2010.33
   Donaldson AF, 2006, LECT NOTES COMPUT SC, V4218, P9
   Donaldson AF, 2009, INT CONF QUANT EVAL, P289, DOI 10.1109/QEST.2009.21
   Ebert C, 2019, IEEE SOFTWARE, V36, P15, DOI 10.1109/MS.2019.2921037
   Ejaz S, 2019, IEEE ACCESS, V7, P46646, DOI 10.1109/ACCESS.2019.2909356
   Emerson EA, 2005, ELECTRON NOTES THEOR, V130, P379, DOI 10.1016/j.entcs.2005.03.019
   Emerson EA, 2005, LECT NOTES COMPUT SC, V3440, P382
   Emerson EA, 2003, LECT NOTES COMPUT SC, V2860, P216
   Emerson EA, 1996, FORM METHOD SYST DES, V9, P105, DOI 10.1007/BF00625970
   Evangelidis A., 2020, THESIS U BIRMINGHAM
   Fecher H, 2006, LECT NOTES COMPUT SC, V3925, P71
   Fern'ndez-Diaz A., 2012, 2012 Ninth International Conference on Quantitative Evaluation of Systems (QEST 2012), P104, DOI 10.1109/QEST.2012.22
   Filieri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P341, DOI 10.1145/1985793.1985840
   Fioriti LMF, 2016, FORM ASP COMPUT, V28, P109, DOI 10.1007/s00165-016-0356-4
   Fremont DJ, 2020, LECT NOTES COMPUT SC, V12224, P122, DOI 10.1007/978-3-030-53288-8_6
   Gerth R., 1995, Proceedings Third Israel Symposium on the Theory of Computing and Systems, P130, DOI 10.1109/ISTCS.1995.377038
   Hahn EM, 2010, LECT NOTES COMPUT SC, V6015, P353
   Hansen H., 2011, Proceedings of the 2011 Eighth International Conference on Quantitative Evaluation of Systems (QEST 2011), P203, DOI 10.1109/QEST.2011.35
   Hansen H., 2011, 2011 11th International Conference on Application of Concurrency to System Design (ACSD), P36, DOI 10.1109/ACSD.2011.25
   Hark M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371105
   Hartmanns A., 2018, LNCS, V0805
   Hashemi V., 2013, ELECT COMMUN EASST, DOI [10.14279/tuj.eceasst.66.895, DOI 10.14279/TUJ.ECEASST.66.895]
   He F, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2907943
   He F, 2010, IEEE T COMPUT, V59, P116, DOI 10.1109/TC.2009.105
   Henzinger T.A., 2018, HDB MODEL CHECKING, DOI DOI 10.1007/978-3-319-10575-8
   Hermanns H, 2000, SCI COMPUT PROGRAM, V36, P97, DOI 10.1016/S0167-6423(99)00019-2
   Hermanns H., 2012, FSTTCS, P435
   Hermanns H, 2008, LECT NOTES COMPUT SC, V5123, P162
   Huang MZ, 2019, INFORM COMPUT, V268, DOI 10.1016/j.ic.2019.05.004
   Huynh D. T., 1992, Fundamenta Informaticae, V17, P211
   Ip CN, 1996, FORM METHOD SYST DES, V9, P41, DOI 10.1007/BF00625968
   Jonsson B., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P266, DOI 10.1109/LICS.1991.151651
   Kamaleson N., 2018, THESIS U BRIMINGHAM
   Katoen JP, 2017, LECT NOTES COMPUT SC, V10460, P426, DOI 10.1007/978-3-319-63121-9_21
   Katoen JP, 2012, J LOGIC ALGEBR PROGR, V81, P356, DOI 10.1016/j.jlap.2012.03.007
   Kattenbelt M, 2010, FORM METHOD SYST DES, V36, P246, DOI 10.1007/s10703-010-0097-6
   Kennedy J, 1995, 1995 IEEE INTERNATIONAL CONFERENCE ON NEURAL NETWORKS PROCEEDINGS, VOLS 1-6, P1942, DOI 10.1109/icnn.1995.488968
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M., 2022, ANN REV CONTROL ROBO, V5, P1
   Kwiatkowska M., 2019, 30 INT C CONCURRENCY, P1
   Kwiatkowska M, 2006, INT CONF QUANT EVAL, P157
   Kwiatkowska M, 2006, LECT NOTES COMPUT SC, V4144, P234, DOI 10.1007/11817963_23
   Kwiatkowska M, 2021, FORM METHOD SYST DES, V58, P188, DOI 10.1007/s10703-020-00356-y
   Kwiatkowska M, 2020, LECT NOTES COMPUT SC, V12225, P475, DOI 10.1007/978-3-030-53291-8_25
   Kwiatkowska M, 2017, LECT NOTES COMPUT SC, V10460, P289, DOI 10.1007/978-3-319-63121-9_15
   Lacerda B, 2019, INT J ROBOT RES, V38, P1098, DOI 10.1177/0278364919856695
   LARSEN KG, 1991, INFORM COMPUT, V94, P1, DOI 10.1016/0890-5401(91)90030-6
   Liu Y., 2019, 21 INT C FORM ENG ME
   Liu Y, 2016, J COMPUT SCI TECH-CH, V31, P198, DOI 10.1007/s11390-016-1621-y
   Liu Yang, 2015, Journal of Software, V26, P1853, DOI 10.13328/j.cnki.jos.004838
   Liu Y, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P190, DOI 10.1109/ISSRE.2011.19
   Ma Y, 2019, INT J SOFTW ENG KNOW, V29, P1465, DOI 10.1142/S0218194019500463
   Ma Y, 2019, IEEE ACCESS, V7, P83839, DOI 10.1109/ACCESS.2019.2924639
   Miller A, 2006, ACM COMPUT SURV, V38, DOI 10.1145/1132960.1132962
   Nguyen BH, 2021, IEEE T CYBERNETICS, V51, P589, DOI 10.1109/TCYB.2019.2944141
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   Paoli F, 2020, STUD LOGICA, V108, P779, DOI 10.1007/s11225-019-09876-z
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   Peled D., 1997, DIMACS SERIES DISCRE
   Peled D., 1996, P DIMACS WORKSH PART, P79
   Petri CA., 1979, LECT NOTES COMPUTER, V84, P1
   Pfeffer A, 2019, IEEE SOFTWARE, V36, P91, DOI 10.1109/MS.2018.2886815
   Philippou A., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P334
   Ryan M, 2020, IEEE CONF COMM NETW, P1, DOI DOI 10.1109/cns48642.2020.9162197
   Segala R., 1995, Nordic Journal of Computing, V2, P250
   Shivakumar S., 2020, 20 INT C RUNT VER RV
   Shoham S, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1297658.1297659
   Valmari A., 1992, Formal Methods in System Design, V1, P297, DOI 10.1007/BF00709154
   Vissat LL, 2017, LECT NOTES COMPUT SC, V10503, P317, DOI 10.1007/978-3-319-66335-7_22
   Wachter B, 2010, LECT NOTES COMPUT SC, V5944, P362
   Wahl T, 2008, LECT NOTES COMPUT SC, V4963, P459, DOI 10.1007/978-3-540-78800-3_34
   Wang JJ, 2020, IEEE COMMUN SURV TUT, V22, P1472, DOI 10.1109/COMST.2020.2965856
   Winterer L, 2021, IEEE T AUTOMAT CONTR, V66, P1040, DOI 10.1109/TAC.2020.2990140
   Winterer L, 2017, IEEE DECIS CONTR P, DOI 10.1109/CDC.2017.8263971
   Younes HLS, 2005, LECT NOTES COMPUT SC, V3576, P429
   Zhang L.J., 2008, THESIS SAARLAND U
   Zhang LJ, 2018, ACTA INFORM, V55, P461, DOI 10.1007/s00236-018-0313-1
   Zhang LJ, 2016, INFORM COMPUT, V249, P138, DOI 10.1016/j.ic.2016.04.002
   Zhang XQ, 2021, THE 12TH ASIA-PACIFIC SYMPOSIUM ON INTERNETWARE, INTERNETWARE 2020, P185, DOI 10.1145/3457913.3457937
NR 109
TC 0
Z9 0
U1 2
U2 11
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 29
DI 10.1007/s10515-022-00327-z
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ZL1HP
UT WOS:000763432000003
DA 2024-07-18
ER

PT J
AU Pachala, S
   Rupa, C
   Sumalatha, L
AF Pachala, Sunitha
   Rupa, Ch
   Sumalatha, L.
TI <i>I</i>-PEES-IMP: lightweight proxy re-encryption-based identity
   management protocol for enhancing privacy over multi-cloud environment
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Identity management protocol; Proxy re-encryption; Asymmetric;
   Symmetric; Computational overhead; Privacy; Security
ID SECURITY
AB The user authenticity with proper identification is a significant challenge where the defects on the authenticity scheme can directly influence the sensitive data over the multi-cloud data (environment). It leads to severe information breaches and data loss over the cloud environment. Thus, a cloud user identity management protocol has to be designed in a secured manner using the proxy-encryption scheme, i.e., proxy transmits a cipher to another with a different encryption key by preserving the plain text secrets. Therefore, the intervention of third-party is avoided efficiently. This research provides an identity management protocol based on a proxy re-encryption scheme, an improved version of the existing identity management protocol, and named Lightweight Proxy re-encryption-based identity management protocol (l-PEES-IMP). It resolves the computational overhead that occurs during the encryption operation performed by the data owners and decryption due to asymmetric mode. It integrates symmetric and asymmetric encryption to establish secure communication. It is applied over the multi-cloud environment to develop privacy and security among sensitive data to avoid data loss or data breaching. It is also a trustworthy identity protocol for service providers and users. It addresses the problem related to the reliance on a third party, commonly identified in existing identity management protocol. Finally, the evaluation of the proposed PEES-IMP is done with existing ECC, RSA, hybrid model and EIDM, and various metrics to guarantee privacy and security of the data. The simulation is performed using MATLAB environment and shows better outcomes compared to prevailing approaches. This model is flexible which can be adopted practically. The encryption time of l-PEES-IMP is 0.819 ms, decryption time is 3.872 ms and re-encryption time is 28.18 ms which is better compared to other approaches.
C1 [Pachala, Sunitha; Sumalatha, L.] JNTU Coll Engn, Dept CSE, Kakinada, Andhra Pradesh, India.
   [Pachala, Sunitha] Dhanekula Inst Engn & Technol, Dept CSE, Vijayawada, Andhra Pradesh, India.
   [Rupa, Ch] Velagapudi Ramakrishna Siddhartha Engn Coll, Dept CSE, Vijayawada, Andhra Pradesh, India.
C3 Jawaharlal Nehru Technological University - Kakinada; Velagapudi
   Ramakrishna Siddhartha Engineering College
RP Pachala, S (corresponding author), JNTU Coll Engn, Dept CSE, Kakinada, Andhra Pradesh, India.; Pachala, S (corresponding author), Dhanekula Inst Engn & Technol, Dept CSE, Vijayawada, Andhra Pradesh, India.
EM sunithamadhavi.patchala@gmail.com; rupamtech@gmail.com;
   sumalatha.lingamgunta@gmail.com
RI Pachala, Sunitha/GLU-5764-2022; Ch, Rupa/A-2571-2019
OI Ch, Rupa/0000-0002-7162-8909
CR A WEIS DEY., 2010, Hot topics in privacy enhancing technologies, P95
   Ateniese G., 2006, ACM Transactions on Information and Systems Security, V9, P1, DOI 10.1145/1127345.1127346
   Bertino E., 2009, IEEE DATA ENG B, V32, P21
   CHANDRAN N, 2014, REENCRYPTION FUNCTIO, V8383, P95
   Chow J., 2010, INT C CRYPT AFR SPRI, P316
   Chu CK, 2007, LECT NOTES COMPUT SC, V4779, P189
   Egorov, 2017, CRYPTOGRAPHY SECURIT
   Fan, 2019, PROXY REENCRYPTION R, P363
   FAN X, 2019, PROXY REENCRYPTION R, V1464, P363, DOI DOI 10.1007/978-3-030-21568-2_18
   Ge H, 2006, LECT NOTES COMPUT SC, V4307, P238
   Hanna J. K., 2018, U. S. Patent, Patent No. [10 078 758 B1, 10078758]
   Khalil I, 2014, COMPUT NETW, V65, P99, DOI 10.1016/j.comnet.2014.03.015
   Kim S, 2018, J AMB INTEL HUM COMP, V9, P1267, DOI 10.1007/s12652-017-0602-5
   Li JG, 2017, IEEE T SERV COMPUT, V10, P785, DOI 10.1109/TSC.2016.2520932
   Liang KT, 2014, THEOR COMPUT SCI, V539, P87, DOI 10.1016/j.tcs.2014.04.027
   Maitra S, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19112484
   Miao YB, 2019, IEEE T SERV COMPUT, V12, P772, DOI 10.1109/TSC.2018.2823309
   Mohd BJ, 2018, IEEE ACCESS, V6, P35966, DOI 10.1109/ACCESS.2018.2848586
   Phong L. T., 2016, IACR CRYPTOLOGY EPRI, P327
   Poomagal CT, 2020, WIRELESS PERS COMMUN, V113, P1359, DOI 10.1007/s11277-020-07285-3
   SHAIKH Z, 2013, INT J COMPUT APPL, V63
   Shaohua Z., 2011, Power and Energy Engineering Conference (APPEEC), 2011 Asia-Pacific, P1, DOI DOI 10.1109/APPEEC.2011
   Su Mang, 2015, Journal on Communications, V36, P73, DOI 10.11959/j.issn.1000-436x.2015217
   Sun MS, 2018, MULTIMED TOOLS APPL, V77, P10455, DOI 10.1007/s11042-017-4448-9
   Syalim A, 2011, COMM COM INF SC, V251, P259
   Weng J, 2010, SCI CHINA INFORM SCI, V53, P593, DOI 10.1007/s11432-010-0047-3
   Xu P, 2016, IEEE T COMPUT, V65, P66, DOI 10.1109/TC.2015.2417544
   Yu Y, 2019, IEEE NETWORK, V33, P20, DOI 10.1109/MNET.001.1800507
NR 28
TC 5
Z9 5
U1 1
U2 13
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2022
VL 29
IS 1
AR 4
DI 10.1007/s10515-021-00299-6
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XD7EW
UT WOS:000722868300002
DA 2024-07-18
ER

PT J
AU Jeong, J
   Kim, N
AF Jeong, Jongwook
   Kim, Neunghoe
TI Does sentiment help requirement engineering: exploring sentiments in
   user comments to discover informative comments
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE User feedback; User comments; Sentiment Analysis; Requirement
   Engineering; Information Retrieval
ID STRENGTH DETECTION
AB User comments are valuable resources for software improvement; however, owing to excessive volume, informative comments need to be selectively analyzed. We attempt to address this problem by sentiment analysis and expect sentiment can be a useful indicator for finding informative comments. In this study, we analyze the informative level according to the sentiment of the comment using sentiment analysis. To understand the sentiment in detail, we divide it into four groups and evaluate the characteristics of each group through experiments. Applying topic modeling, we evaluate the informative level of the extracted topic and evaluate the proportion of sentiments by sentiment analysis of the related comments. Additionally, we manually evaluate the informative score of the sample comments in each sentiment group to verify the tendencies observed in the experiments. We find that the probability of being associated with requirements is very low when positive, or when both positive and negative sentiments are weak. In contrast, it has been shown that informative comments are concentrated in negative or strongly negative and positive comments, which are very few among all comments. In particular, the comments observed as strongly positive and negative are highly informative, which is a characteristic that has been overlooked in previous studies. We propose a sentiment model that specifies the sentiment, and confirm sentiments that are highly related to informative comments through sentiment analysis methods and expert evaluations. From these results, it is expected that analyzing negative comments or strongly negative and positive comments can contribute to effective requirement engineering.
C1 [Jeong, Jongwook] Korea Mil Acad, Dept Comp Sci, Seoul, South Korea.
   [Kim, Neunghoe] Kunsan Natl Univ, Dept Software Convergence Engn, Gunsan, South Korea.
C3 Kunsan National University
RP Kim, N (corresponding author), Kunsan Natl Univ, Dept Software Convergence Engn, Gunsan, South Korea.
EM jwjeong55@gmail.com; nunghoi@kunsan.ac.kr
OI Jeong, jongwook/0000-0002-3307-0940
FU National Research Foundation of Korea (NRF) - Korea government (MSIT)
   [2020R1C1C1014611]
FX This work was supported by the National Research Foundation of Korea
   (NRF) grant funded by the Korea government (MSIT) (No.
   2020R1C1C1014611).
CR Abbasi A, 2014, LREC 2014 - NINTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P823
   [Anonymous], 2013, P 2 JOINT C LEX COMP
   AppBrain, RAT APPS GOOGL PLAY
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Bouazizi M, 2017, IEEE ACCESS, V5, P20617, DOI 10.1109/ACCESS.2017.2740982
   Carreño LVG, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P582, DOI 10.1109/ICSE.2013.6606604
   Chen N, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P767, DOI 10.1145/2568225.2568263
   Ferrari A, 2019, AUTOMAT SOFTW ENG, V26, P559, DOI 10.1007/s10515-019-00261-7
   Goul M., 2012, 2012 45th Hawaii International Conference on System Sciences (HICSS), P4168, DOI 10.1109/HICSS.2012.421
   Gu XD, 2015, IEEE INT CONF AUTOM, P760, DOI 10.1109/ASE.2015.57
   Guzman E., 2014, Association for Computing Machinery, P352
   Guzman E, 2014, INT REQUIR ENG CONF, P153, DOI 10.1109/RE.2014.6912257
   Harman M., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P108, DOI 10.1109/MSR.2012.6224306
   Hu M., 2004, P 10 ACM SIGKDD INT, P168, DOI DOI 10.1145/1014052.1014073
   Hu MQ, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P755
   Islam MR, 2017, IEEE WORK CONF MIN S, P203, DOI 10.1109/MSR.2017.9
   Jo Yohan, 2011, P 4 ACM INT C WEB SE, P815, DOI DOI 10.1145/1935826.1935932
   Jongeling R, 2017, EMPIR SOFTW ENG, V22, P2543, DOI 10.1007/s10664-016-9493-x
   Khalid H, 2015, IEEE SOFTWARE, V32, P70, DOI 10.1109/MS.2014.50
   Khalid H, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1474, DOI 10.1109/ICSE.2013.6606749
   Maalej W., 2011, Proceedings of the 2011 IEEE 9th International Conference on Dependable, Autonomic and Secure Computing (DASC 2011), P864, DOI 10.1109/DASC.2011.146
   Martin W, 2017, IEEE T SOFTWARE ENG, V43, P817, DOI 10.1109/TSE.2016.2630689
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   Mukhtar N, 2020, MEHRAN UNIV RES J EN, V39, P759, DOI 10.22581/muet1982.2004.08
   Mukhtar N, 2018, EXPERT SYST, V35, DOI 10.1111/exsy.12317
   Pagano D, 2013, S VIS LANG HUM CEN C, P125, DOI 10.1109/RE.2013.6636712
   Saif H, 2014, LREC 2014 - NINTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P810
   Santos R., 2019, 2 WORKSH NAT LANG PR
   Schofield A., 2016, Transactions of the Association for Computational Linguistics, V4, P287, DOI [DOI 10.1162/TACLA00099, https://doi.org/10.1162/tacl_a_00099]
   Thelwall M, 2012, J AM SOC INF SCI TEC, V63, P163, DOI 10.1002/asi.21662
   Thelwall M, 2010, J AM SOC INF SCI TEC, V61, P2544, DOI 10.1002/asi.21416
NR 31
TC 6
Z9 7
U1 6
U2 37
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD NOV
PY 2021
VL 28
IS 2
AR 18
DI 10.1007/s10515-021-00295-w
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UN7ZX
UT WOS:000694230700001
DA 2024-07-18
ER

PT J
AU Honsel, D
   Herbold, V
   Waack, S
   Grabowski, J
AF Honsel, Daniel
   Herbold, Verena
   Waack, Stephan
   Grabowski, Jens
TI Investigation and prediction of open source software evolution using
   automated parameter mining for agent-based simulation
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software evolution; Agent-based simulation; Software repository mining;
   Change coupling networks; Open source software
ID APACHE; MODEL
AB To guide software development, the estimation of the impact of decision making on the development process can be helpful in planning. For this estimation, often prediction models are used which can be learned from project data. In this paper, an approach for the usage of agent-based simulation for the prediction of software evolution trends is presented. The specialty of the proposed approach lies in the automated parameter estimation for the instantiation of project-specific simulation models. We want to assess how well a baseline model using average (commit) behavior of the agents (i.e., the developers) performs compared to models where different amount of project-specific data is fed into the simulation model. The approach involves the interplay between the mining framework and simulation framework. Parameters to be estimated include, e.g., file change probabilities of developers and the team constellation reflecting different developer roles. The structural evolution of software projects is observed using change coupling graphs based on common file changes. For the validation of simulation results, we compare empirical with simulated results. Our results showed that an average simulation model can mimic general project growth trends like the number of commits and files well and thus, can help project managers in, e.g., controlling the onboarding of developers. Besides, the simulated co-change evolution could be improved significantly using project-specific data.
C1 [Honsel, Daniel; Herbold, Verena; Waack, Stephan; Grabowski, Jens] Univ Gottingen, Inst Comp Sci, Gottingen, Germany.
C3 University of Gottingen
RP Herbold, V (corresponding author), Univ Gottingen, Inst Comp Sci, Gottingen, Germany.
EM dhonsel@cs.uni-goettingen.de; vherbold@cs.uni-goettingen.de;
   waack@informatik.uni-goettingen.de;
   grabowski@informatik.uni-goettingen.de
OI Honsel, Daniel/0000-0002-8397-354X
FU Projekt DEAL
FX Open Access funding enabled and organized by Projekt DEAL.
CR Alfayez R, 2017, 2017 IEEE 28TH ANNUAL SOFTWARE TECHNOLOGY CONFERENCE (STC)
   Ali SM, 2018, INFORM SOFTWARE TECH, V96, P126, DOI 10.1016/j.infsof.2017.11.013
   Amrit C, 2010, J INF TECHNOL, V25, P216, DOI 10.1057/jit.2010.7
   [Anonymous], 2009, INT ASS ADV ART INT
   Ball T., 1997, ICSE WORKSH PROC MOD
   Bhattacharya P, 2014, PROC IEEE INT CONF S, P11, DOI 10.1109/ICSME.2014.23
   Bhattacharya P, 2012, PROC INT CONF SOFTW, P419, DOI 10.1109/ICSE.2012.6227173
   Bird C., 2011, P 19 ACM SIGSOFT S 1, P4, DOI DOI 10.1145/2025113.2025119
   Bird Christian, 2006, P MSR, P137, DOI DOI 10.1145/1137983.1138016
   Blondel VD, 2008, J STAT MECH-THEORY E, DOI 10.1088/1742-5468/2008/10/P10008
   Caglayan B, 2013, 2013 6TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE), P33, DOI 10.1109/CHASE.2013.6614729
   Chavez C., 2010, SOFTW ENG SBES 2010
   Crowston K., 2006, Knowledge Technology & Policy, V18, P65, DOI 10.1007/s12130-006-1004-8
   D'Ambros M, 2009, WORK CONF REVERSE EN, P135, DOI 10.1109/WCRE.2009.19
   Fernandez-Ramil J., 2008, SOFTWARE EVOLUTION S
   Fortunato S, 2010, PHYS REP, V486, P75, DOI 10.1016/j.physrep.2009.11.002
   Gall H, 1998, PROC IEEE INT CONF S, P190, DOI 10.1109/ICSM.1998.738508
   García-García JA, 2020, COMPUT STAND INTER, V70, DOI 10.1016/j.csi.2020.103425
   Gîrba T, 2005, EIGHTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P113, DOI 10.1109/IWPSE.2005.21
   Godfrey MW, 2000, PROC IEEE INT CONF S, P131, DOI 10.1109/ICSM.2000.883030
   Goeminne M, 2013, SCI COMPUT PROGRAM, V78, P971, DOI 10.1016/j.scico.2011.11.004
   Gonzalez-Barahon J.u.M., 2006, P C SOFTW MAINT REEN
   Gousios G., 2008, P 2008 INT WORKING C, P129, DOI [DOI 10.1145/1370750.1370781, 10.1145/1370750.1370781]
   Herbold Steffen, 2019, ARXIV PREPRINT ARXIV
   Herbold V, 2020, ASEJ REPLICATION KIT
   Herbold V, 2019, THESIS GEORG AUGUST
   Herzig K, 2013, IEEE WORK CONF MIN S, P121, DOI 10.1109/MSR.2013.6624018
   Hindle A, 2009, INT C PROGRAM COMPRE, P30, DOI 10.1109/ICPC.2009.5090025
   Honsel D, 2020, SIMSE SIMULATION SOF
   Honsel D, 2020, SIMPARAMETER ESTIMAT
   Honsel D, 2019, THESIS GEORG AUGUST
   Honsel D, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962617
   Honsel V., 2016, 12 INT C PRED MOD DA
   Honsel V., 2015, 4 INT WORKSH SOFTW M
   Honsel V, 2014, 2014 IEEE INTERNATIONAL CONFERENCE ON DATA MINING WORKSHOP (ICDMW), P828, DOI 10.1109/ICDMW.2014.35
   Huang S.-K., 2005, SIGSOFT SOFTWARE ENG, P1
   Joblin M, 2017, PROC INT CONF SOFTW, P164, DOI 10.1109/ICSE.2017.23
   Khondhu J., 2013, OPEN SOURCE SOFTWARE
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Kocaguneli E, 2011, EUROMICRO CONF PROC, P419, DOI 10.1109/SEAA.2011.71
   Konopka M, 2015, 2015 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON CONTEXT FOR SOFTWARE DEVELOPMENT, P13, DOI 10.1109/CSD.2015.10
   Lamkanfi Ahmed, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P1, DOI 10.1109/MSR.2010.5463284
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Li Y, 2012, INFORM MANAGE-AMSTER, V49, P257, DOI 10.1016/j.im.2012.05.005
   Lima J, 2015, PROC IEEE INT CONF S, P536, DOI 10.1109/ICSM.2015.7332509
   Macal CM, 2005, PROCEEDINGS OF THE 2005 WINTER SIMULATION CONFERENCE, VOLS 1-4, P2, DOI 10.1109/WSC.2005.1574234
   Maria A, 1997, PROCEEDINGS OF THE 1997 WINTER SIMULATION CONFERENCE, P7, DOI 10.1145/268437.268440
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   de França BBN, 2016, EMPIR SOFTW ENG, V21, P1302, DOI 10.1007/s10664-015-9386-4
   North MJ, 2013, COMPLEX ADAPT SYST M, V1, DOI 10.1186/2194-3206-1-3
   Paulson JW, 2004, IEEE T SOFTWARE ENG, V30, P246, DOI 10.1109/TSE.2004.1274044
   Rahman F, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P491, DOI 10.1145/1985793.1985860
   Robles G, 2005, EIGHTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P165, DOI 10.1109/IWPSE.2005.17
   Sargent RG, 2010, WINT SIMUL C PROC, P166, DOI 10.1109/WSC.2010.5679166
   SHAFFER JP, 1995, ANNU REV PSYCHOL, V46, P561, DOI 10.1146/annurev.ps.46.020195.003021
   SHAPIRO SS, 1965, BIOMETRIKA, V52, P591, DOI 10.1093/biomet/52.3-4.591
   Shihab E, 2012, SER FSE 12, DOI [10.1145/2393596.2393670, DOI 10.1145/2393596.2393670]
   Smith N., 2006, SOFTWARE PROCESS IMP
   Trautsch F, 2018, EMPIR SOFTW ENG, V23, P1036, DOI 10.1007/s10664-017-9537-x
   Turski WM, 1996, IEEE T SOFTWARE ENG, V22, P599, DOI 10.1109/32.536959
   Wiese IS, 2015, IFIP ADV INF COMM TE, V451, P3, DOI 10.1007/978-3-319-17837-0_1
   Wilcoxon F., 1945, BIOMETRICS BULL
   Williams L., P 16 ACM SIGSOFT INT, DOI [10.1145/1453101.1453106(2008), DOI 10.1145/1453101.1453106(2008)]
   WILLMOTT CJ, 1982, B AM METEOROL SOC, V63, P1309, DOI 10.1175/1520-0477(1982)063<1309:SCOTEO>2.0.CO;2
   Xu B, 2013, 2013 THIRD INTERNATIONAL CONFERENCE ON INTELLIGENT SYSTEM DESIGN AND ENGINEERING APPLICATIONS (ISDEA), P934, DOI 10.1109/ISDEA.2012.223
   Yamauchi K., 2018, INT J NETWORK DISTRI, DOI [10.2991/ijndc.2018.6.3.1, DOI 10.2991/IJNDC.2018.6.3.1]
   YU L, 2007, P 4 INT WORKSH MIN S
NR 67
TC 1
Z9 1
U1 1
U2 4
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAY
PY 2021
VL 28
IS 1
AR 3
DI 10.1007/s10515-021-00280-3
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SC4EB
UT WOS:000650625500001
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Jannach, D
   Schmitz, T
   Hofer, B
   Schekotihin, K
   Koch, P
   Wotawa, F
AF Jannach, Dietmar
   Schmitz, Thomas
   Hofer, Birgit
   Schekotihin, Konstantin
   Koch, Patrick
   Wotawa, Franz
TI Fragment-based spreadsheet debugging
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Spreadsheets; Algorithmic testing and debugging; Artificial
   intelligence; Model-based diagnosis
ID DIAGNOSIS; SEE
AB Faults in spreadsheets can represent a major risk for businesses. To minimize such risks, various automated testing and debugging approaches for spreadsheets were proposed. In such approaches, often one main assumption is that the spreadsheet developer is able to indicate if the outcomes of certain calculations correspond to the intended values. This, however, might require that the user performs calculations manually, a process which can easily become tedious and error-prone for more complex spreadsheets. In this work, we propose an interactive spreadsheet algorithmic debugging method, which is based on partitioning the spreadsheet into fragments. Test cases can then be automatically or manually created for each of these smaller fragments, whose correctness or faultiness can be easier assessed by users than test cases that cover the entire spreadsheet. The annotated test cases are then fed into an algorithmic debugging technique, which returns a set of formulas that could have caused any observed failures, i.e., discrepancies between the expected and computed calculation outcomes. Simulation experiments demonstrate that the suggested decomposition approach can speed up the algorithmic debugging process and significantly reduce the number of fault candidates returned by the algorithm. An additional laboratory study shows that fragmenting a spreadsheet with our method furthermore reduces the time needed by users for creating test cases for a spreadsheet.
C1 [Jannach, Dietmar; Schekotihin, Konstantin; Koch, Patrick] AAU Klagenfurt, Klagenfurt, Austria.
   [Schmitz, Thomas] TU Dortmund, Dortmund, Germany.
   [Hofer, Birgit; Wotawa, Franz] Graz Univ Technol, Graz, Austria.
C3 Dortmund University of Technology; Graz University of Technology
RP Jannach, D (corresponding author), AAU Klagenfurt, Klagenfurt, Austria.
EM dietmar.jannach@aau.at; thomas.schmitz@tu-dortmund.de;
   bhofer@ist.tugraz.at; konstantin.schekotihin@aau.at;
   patrick.koch@aau.at; fwotawa@ist.tugraz.at
RI Schekotihin, Konstantin/IZN-7815-2023
OI Schekotihin, Konstantin/0000-0002-0286-0958; Wotawa,
   Franz/0000-0002-0462-2283; Hofer, Birgit/0000-0001-5144-059X
FU Austrian Science Fund (FWF); Austrian Science Fund (FWF) [I2144] Funding
   Source: Austrian Science Fund (FWF)
FX Open access funding provided by Austrian Science Fund (FWF).
CR Abraham R, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P37, DOI 10.1109/VLHCC.2005.42
   Abraham R, 2006, IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P43
   Abraham R, 2009, IEEE T SOFTWARE ENG, V35, P94, DOI 10.1109/TSE.2008.73
   Abreu R, 2015, SOFTWARE QUAL J, V23, P297, DOI 10.1007/s11219-014-9236-4
   Almeida L., 2016, P 1 BRAZ S SYST AUT
   AlTarawneh G., 2016, P ANN SPREADSH RISKS
   [Anonymous], 2013, P 2013 C CTR ADV STU
   [Anonymous], 2010, 9 JOINT C KNOWL BAS
   Burnett M, 2002, IEEE T SOFTWARE ENG, V28, P576, DOI 10.1109/TSE.2002.1010060
   Cunha J, 2012, LECT NOTES COMPUT SC, V7336, P202, DOI 10.1007/978-3-642-31128-4_15
   Felfernig A, 2004, ARTIF INTELL, V152, P213, DOI 10.1016/S0004-3702(03)00117-6
   Felfernig A., 2001, KI 2001: Advances in Artificial Intelligence. Joint German/ Austrian Conference on AI. Proceedings (Lecture Notes in Artificial Intelligence Vol.2174), P185
   HERMANS F, 2011, P 33 INT C SOFTW ENG, P451
   Hermans F, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P409, DOI 10.1109/ICSM.2012.6405300
   Hodnigg K., 2008, Proceedings of EuSpRIG 2008 Conference, P79
   Hofer B, 2017, LECT NOTES COMPUT SC, V10533, P71, DOI 10.1007/978-3-319-67549-7_5
   Hofer B, 2015, AUTOMAT SOFTW ENG, V22, P47, DOI 10.1007/s10515-014-0145-3
   Hofer B, 2014, PROC INT SYMP SOFTW, P112, DOI 10.1109/ISSRE.2014.23
   Hofer B, 2013, LECT NOTES COMPUT SC, V7793, P68, DOI 10.1007/978-3-642-37057-1_6
   Jannach D, 2016, AUTOMAT SOFTW ENG, V23, P105, DOI 10.1007/s10515-014-0141-7
   Jannach D, 2014, J SYST SOFTWARE, V94, P129, DOI 10.1016/j.jss.2014.03.058
   Mittermeir R, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P221, DOI 10.1109/WCRE.2002.1173080
   Panko RR, 2010, DECIS SUPPORT SYST, V49, P235, DOI 10.1016/j.dss.2010.02.009
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Poon PL, 2014, INFORM TECHNOL PEOPL, V27, P440, DOI 10.1108/ITP-01-2013-0004
   Reichwein J, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P25
   REITER R, 1987, ARTIF INTELL, V32, P57, DOI 10.1016/0004-3702(87)90062-2
   Rothermel G, 1998, PROC INT CONF SOFTW, P198, DOI 10.1109/ICSE.1998.671118
   Roy S, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P338, DOI 10.1109/SANER.2017.7884634
   Russell S, 2009, ARTIF INTELL, P126
   Rust A, 2006, LECT NOTES COMPUT SC, V4044, P209
   Ruthruff JR, 2005, J VISUAL LANG COMPUT, V16, P3, DOI 10.1016/j.jvlc.2004.07.001
   Scaffidi C, 2005, 2005 IEEE SYMPOSIUM ON VISUAL LANGUAGE AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P207, DOI 10.1109/VLHCC.2005.34
   Schmitz T., 2017, IEEE S VIS LANG HUM
   SCHMITZ T, 2017, P IEEE S VIS LANG HU
   Schmitz T, 2016, LECT NOTES COMPUT SC, V9946, P372, DOI 10.1007/978-3-319-50230-4_28
   Schmitz T, 2016, S VIS LANG HUM CEN C, P157, DOI 10.1109/VLHCC.2016.7739679
   Shchekotykhin K., 2016, P IJCAI 16, P1251
   Siddiqi S, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P581
   Tsong Yueh Chen, 2010, 2010 Fifth International Symposium on Service Oriented System Engineering (SOSE 2010), P1, DOI 10.1109/SOSE.2010.31
NR 40
TC 8
Z9 10
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2019
VL 26
IS 1
BP 203
EP 239
DI 10.1007/s10515-018-0250-9
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HL4VT
UT WOS:000458723700006
OA hybrid
DA 2024-07-18
ER

PT J
AU Naim, SM
   Damevski, K
   Hossain, MS
AF Naim, Sheikh Motahar
   Damevski, Kostadin
   Hossain, M. Shahriar
TI Reconstructing and evolving software architectures using a coordinated
   clustering framework
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software architecture; Coordinated clustering; Heterogeneous data
   clustering; Architecture recovery
ID INFORMATION; RECOVERY
AB During a long maintenance period, software projects experience architectural erosion and drift, making maintenance tasks more challenging to perform for software engineers unfamiliar with the code base. This paper presents a framework that assists software engineers in recovering a software project's architecture from its source code. The architectural recovery process is an iterative one that combines clustering based on contextual and structural information in the code base with incremental developer feedback. This process converges when the developer is satisfied with the proposed decomposition of the software, and, as an additional benefit, the framework becomes tuned to aid future evolution of the project. The paper provides both analytic and empirical evaluations of the obtained results; experimental results show a reasonably superior performance of our framework over alternative conventional methods. The proposed framework utilizes a novel compartmentalization technique Coordinated Clustering of Heterogeneous Datasets (CCHD) that relies on contextual and structural information in the code base, but, unlike most previous approaches, does not require specific weights for each information type, which allows it to adapt to different project types and domains.
C1 [Naim, Sheikh Motahar; Hossain, M. Shahriar] Univ Texas El Paso, Dept Comp Sci, El Paso, TX 79968 USA.
   [Naim, Sheikh Motahar] Virginia Commonwealth Univ, Dept Comp Sci, Med Coll Virginia Campus, Richmond, VA 23284 USA.
C3 University of Texas System; University of Texas El Paso; Virginia
   Commonwealth University
RP Naim, SM (corresponding author), Univ Texas El Paso, Dept Comp Sci, El Paso, TX 79968 USA.
EM snaim@miners.utep.edu; kdamevski@vcu.edu; mhossain@utep.edu
RI Damevski, Kostadin/F-4476-2014
OI Damevski, Kostadin/0000-0001-7799-2026
CR Andritsos P, 2005, IEEE T SOFTWARE ENG, V31, P150, DOI 10.1109/TSE.2005.25
   [Anonymous], 1993, Statistics for spatial data
   [Anonymous], J STAT SOFTW
   [Anonymous], 2008, INTRO INFORM RETRIEV, DOI DOI 10.1017/CBO9780511809071
   Bae E, 2006, IEEE DATA MINING, P53
   Banerjee A., 2004, KDD, P509, DOI DOI 10.1145/1014052.1014111
   Basu S, 2009, CH CRC DATA MIN KNOW, P1
   Bauer M, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P3, DOI 10.1109/CSMR.2004.1281401
   Bavota Gabriele, 2012, Search Based Software Engineering. Proceedings of the 4th International Symposium (SSBSE 2012), P75, DOI 10.1007/978-3-642-33119-0_7
   Bavota G, 2013, EMPIR SOFTW ENG, V18, P901, DOI 10.1007/s10664-012-9226-8
   Berkopec A, 2007, J DISCRET ALGORITHMS, V5, P341, DOI 10.1016/j.jda.2006.01.001
   Bohm Christian., 2006, P 12 ACM SIGKDD INT, P65
   Cai YF, 2011, 2011 24TH IEEE-CS CONFERENCE ON SOFTWARE ENGINEERING EDUCATION AND TRAINING (CSEET), P179, DOI 10.1109/CSEET.2011.5876085
   Cai Yuanfang, 2013, P 9 INT ACM SIGSOFT, P133
   Chaitin GJ., 1982, ALGORITHMIC INFORM T
   Christl A., 2005, 12 WORK C REV ENG IE, P10
   Corazza A, 2016, EMPIR SOFTW ENG, V21, P72, DOI 10.1007/s10664-014-9347-3
   Corazza A, 2010, EUR CON SFTWR MTNCE, P88, DOI 10.1109/CSMR.2010.36
   Dai WY, 2007, KDD-2007 PROCEEDINGS OF THE THIRTEENTH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P210
   Dhillon I. S., 2001, KDD-2001. Proceedings of the Seventh ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, P269, DOI 10.1145/502512.502550
   Dhillon IS, 2003, THIRD IEEE INTERNATIONAL CONFERENCE ON DATA MINING, PROCEEDINGS, P517, DOI 10.1109/ICDM.2003.1250966
   Dhillon IS, 2003, P 9 ACM SIGKDD INT C, P89, DOI DOI 10.1145/956750.956764
   Dunn J. C., 1973, J CYBERN
   Gao B., 2005, P 11 INT C KNOWLEDGE, P41, DOI DOI 10.1145/1081870.1081879
   Garcia J., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P552, DOI 10.1109/ASE.2011.6100123
   Garcia J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P901, DOI 10.1109/ICSE.2013.6606639
   Garcia J, 2013, IEEE INT CONF AUTOM, P486, DOI 10.1109/ASE.2013.6693106
   Gokcay E, 2002, IEEE T PATTERN ANAL, V24, P158, DOI 10.1109/34.982897
   Hossain M.S., 2010, Proceedings of the 16th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining KDD, P593
   Hossain MS, 2014, ACM T INTEL SYST TEC, V5, DOI 10.1145/2505270
   Hossain MS, 2012, PLOS ONE, V7, DOI 10.1371/journal.pone.0029509
   Koschke R, 2002, PROC IEEE INT CONF S, P478, DOI 10.1109/ICSM.2002.1167807
   Lutellier T, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P69, DOI 10.1109/ICSE.2015.136
   Mancoridis S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P50, DOI 10.1109/ICSM.1999.792498
   Maqbool O, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P15, DOI 10.1109/CSMR.2004.1281402
   Mises R., 1929, Z ANGEW MATH MECH, V9, P152, DOI DOI 10.1002/ZAMM.19290090206
   Misra J., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P113, DOI 10.1109/WCRE.2012.21
   Mohar B., 1991, GRAPH THEORY COMBINA, V2, P871
   Mohar B., 1997, SOME APPL LAPLACE EI
   Momtazpour M., 2012, P ACM SIGKDD INT WOR, P126
   Ng AY, 2002, ADV NEUR IN, V14, P849
   Pohlhausen E, 1921, Z ANGEW MATH MECH, V1, P28, DOI 10.1002/zamm.19210010104
   Praditwong K, 2011, IEEE T SOFTWARE ENG, V37, P264, DOI 10.1109/TSE.2010.26
   Scanniello G, 2011, CONF PROC INT SYMP C, P1, DOI 10.1109/ICPC.2011.13
   Shi JB, 2000, IEEE T PATTERN ANAL, V22, P888, DOI 10.1109/34.868688
   Shi N, 2010, 2010 THIRD INTERNATIONAL SYMPOSIUM ON INTELLIGENT INFORMATION TECHNOLOGY AND SECURITY INFORMATICS (IITSI 2010), P63, DOI 10.1109/IITSI.2010.74
   Shtern Mark, 2012, Advances in Software Engineering, DOI 10.1155/2012/792024
   Taylor Richard N., 2009, Software architecture: foundations, theory, and practice
   Tzerpos V, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P258
   von Luxburg U, 2007, STAT COMPUT, V17, P395, DOI 10.1007/s11222-007-9033-z
   Wen Z, 2004, PROG COMPREHEN, P194, DOI 10.1109/WPC.2004.1311061
   Yang CY, 2006, ICDM 2006: SIXTH IEEE INTERNATIONAL CONFERENCE ON DATA MINING, WORKSHOPS, P682
   Yoon HS, 2006, LECT NOTES COMPUT SC, V3916, P82
   Yue JC, 2005, COMMUN STAT-THEOR M, V34, P2123, DOI 10.1080/STA-200066418
   Zheng F., 2005, Proceedings of the 4th Australasian Data Mining conference, P141
   Zhu JL, 2013, INT J SOFTW ENG KNOW, V23, P559, DOI 10.1142/S0218194013500162
NR 56
TC 10
Z9 10
U1 0
U2 11
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2017
VL 24
IS 3
BP 543
EP 572
DI 10.1007/s10515-017-0211-8
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EW3KK
UT WOS:000402394000002
DA 2024-07-18
ER

PT J
AU Kim, D
   Gokhale, A
   Ganapathy, V
   Srivastava, A
AF Kim, Daeyoung
   Gokhale, Amruta
   Ganapathy, Vinod
   Srivastava, Abhinav
TI Detecting plagiarized mobile apps using API birthmarks
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Mobile apps; Plagiarism; API birthmarks
ID CLONE DETECTION
AB This paper addresses the problem of detecting plagiarized mobile apps. Plagiarism is the practice of building mobile apps by reusing code from other apps without the consent of the corresponding app developers. Recent studies on third-party app markets have suggested that plagiarized apps are an important vehicle for malware delivery on mobile phones. Malware authors repackage official versions of apps with malicious functionality, and distribute them for free via these third-party app markets. An effective technique to detect app plagiarism can therefore help identify malicious apps. Code plagiarism has long been a problem and a number of code similarity detectors have been developed over the years to detect plagiarism. In this paper we show that obfuscation techniques can be used to easily defeat similarity detectors that rely solely on statically scanning the code of an app. We propose a dynamic technique to detect plagiarized apps that works by observing the interaction of an app with the underlying mobile platform via its API invocations. We propose API birthmarks to characterize unique app behaviors, and develop a robust plagiarism detection tool using API birthmarks.
C1 [Kim, Daeyoung; Gokhale, Amruta; Ganapathy, Vinod] Rutgers State Univ, Piscataway, NJ 08854 USA.
   [Srivastava, Abhinav] AT&T Labs Res, Bedminster, NJ USA.
C3 Rutgers University System; Rutgers University New Brunswick; AT&T
RP Ganapathy, V (corresponding author), Rutgers State Univ, Piscataway, NJ 08854 USA.
EM vinodg@cs.rutgers.edu
FU NSF [0952128, 1117711, 1420815, 1441724, 1408803]; Direct For Computer &
   Info Scie & Enginr; Division Of Computer and Network Systems [1441724]
   Funding Source: National Science Foundation; Direct For Computer & Info
   Scie & Enginr; Division Of Computer and Network Systems [0952128,
   1117711, 1420815, 1408803] Funding Source: National Science Foundation
FX This work is supported in part by NSF Grants 0952128, 1117711, 1420815,
   1441724 and 1408803.
CR Baker Brenda S., 1995, WCRE
   Baxter Ira D., 1998, ICSM
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Christodorescu M., 2004, ISSTA
   Crussell J., 2013, ESORICS, P182
   Crussell J., 2012, ESORICS
   Ducasse S, 2006, J SOFTW MAINT EVOL-R, V18, P37, DOI 10.1002/smr.317
   Felt A. P., 2011, SPSM
   Gibler C., 2013, MOBISYS
   HANNA S., 2012, DIMVA
   Higo Y., 2002, PROFES
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kontogiannis K., 1995, WCRE
   Krinke Jens, 2001, WCRE
   Lim H.I., 2008, IEICE
   Liu Chao., 2006, KDD
   Machiry A., 2013, ESEC FSE 2013
   Myles G., 2005, SAC
   Myles G., 2004, ISC
   Rastogi Vaibhav., 2013, ASIACCS
   Schuler D., 2007, ASE
   Tamada H., 2004, ISFST
   Yeh T., 2009, UIST
   You I., 2010, BWCCA
   Zhang F., 2012, ISSTA
   ZHOU W., 2013, CODASPY
   Zhou Wu, 2012, CODASPY
   Zhou YJ, 2012, P IEEE S SECUR PRIV, P95, DOI 10.1109/SP.2012.16
NR 28
TC 8
Z9 13
U1 1
U2 26
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2016
VL 23
IS 4
BP 591
EP 618
DI 10.1007/s10515-015-0182-6
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DV1HD
UT WOS:000382670800004
DA 2024-07-18
ER

PT J
AU McIntosh, S
   Adams, B
   Nagappan, M
   Hassan, AE
AF McIntosh, Shane
   Adams, Bram
   Nagappan, Meiyappan
   Hassan, Ahmed E.
TI Identifying and understanding header file hotspots in C/C plus plus
   build processes
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Build systems; Performance analysis; Mining software repositories
ID TIME
AB Software developers rely on a fast build system to incrementally compile their source code changes and produce modified deliverables for testing and deployment. Header files, which tend to trigger slow rebuild processes, are most problematic if they also change frequently during the development process, and hence, need to be rebuilt often. In this paper, we propose an approach that analyzes the build dependency graph (i.e., the data structure used to determine the minimal list of commands that must be executed when a source code file is modified), and the change history of a software system to pinpoint header file hotspots-header files that change frequently and trigger long rebuild processes. Through a case study on the GLib, PostgreSQL, Qt, and Ruby systems, we show that our approach identifies header file hotspots that, if improved, will provide greater improvement to the total future build cost of a system than just focusing on the files that trigger the slowest rebuild processes, change the most frequently, or are used the most throughout the codebase. Furthermore, regression models built using architectural and code properties of source files can explain 32-57 % of these hotspots, identifying subsystems that are particularly hotspot-prone and would benefit the most from architectural refinement.
C1 [McIntosh, Shane] McGill Univ, Dept Elect & Comp Engn, Montreal, PQ, Canada.
   [Adams, Bram] Polytech Montreal, Lab Maintenance Construct & Intelligence Software, Montreal, PQ, Canada.
   [Nagappan, Meiyappan] Rochester Inst Technol, Dept Software Engn, Rochester, NY 14623 USA.
   [Hassan, Ahmed E.] Queens Univ, SAIL, Kingston, ON, Canada.
C3 McGill University; Universite de Montreal; Polytechnique Montreal;
   Rochester Institute of Technology; Queens University - Canada
RP McIntosh, S (corresponding author), McGill Univ, Dept Elect & Comp Engn, Montreal, PQ, Canada.
EM shanemcintosh@acm.org; bram.adams@polymtl.ca; mei@se.rit.edu;
   ahmed@cs.queensu.ca
RI Ali, Ahmed/HOF-4672-2023; KHALIFA, AHMED khalifa/HKF-2246-2023; Hassan,
   Ahmed/AAB-7241-2019
OI KHALIFA, AHMED khalifa/0000-0002-2918-7572; Adams,
   Bram/0000-0001-7213-4006
CR Adams B., 2008, ELECTR COMMUN, V8
   Adams B, 2007, PROC IEEE INT CONF S, P214
   Adams R., 1994, ACM Transactions on Software Engineering and Methodology, V3, P3, DOI 10.1145/174634.174637
   Al-Kofahi JM, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P150, DOI 10.1109/ICSM.2012.6405266
   Cataldo M, 2009, IEEE T SOFTWARE ENG, V35, P864, DOI 10.1109/TSE.2009.42
   Chambers J.M., 1992, STAT MODELS S, V4
   Dayani-Fard H, 2005, LECT NOTES COMPUT SC, V3442, P96, DOI 10.1007/978-3-540-31984-9_8
   FELDMAN SI, 1979, SOFTWARE PRACT EXPER, V9, P255, DOI 10.1002/spe.4380090402
   Fischer ARH, 2005, INT J HUM-COMPUT INT, V19, P163, DOI 10.1207/s15327590ijhc1902_1
   Hassan AE, 2006, IEEE INT CONF AUTOM, P189
   Hochstein L, 2011, INT SYMP EMP SOFTWAR, P384, DOI 10.1109/ESEM.2011.54
   Humble Jez, 2010, Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation
   Khomh F., 2011, 2011 18th Working Conference on Reverse Engineering, P261, DOI 10.1109/WCRE.2011.39
   Kumfert G., 2002, "Software in the doe: The hidden overhead of "the build","
   Kwan I, 2011, IEEE T SOFTWARE ENG, V37, P307, DOI 10.1109/TSE.2011.29
   Lakos J., 1996, LARGE SCALE C SOFTWA
   McIntosh S, 2012, EMPIR SOFTW ENG, V17, P578, DOI 10.1007/s10664-011-9169-5
   McIntosh S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P141, DOI 10.1145/1985793.1985813
   McIntosh Shane., 2015, Empirical Software Engineering, P1
   Mockus A, 2010, Proc. of the 18th Symposium on the Foundations of Software Engineering (FSE), P117
   Morgenthaler J.D., 2012, Proc. of the 3rd Int'l Workshop on Managing Technical Debt (MTD), P1, DOI DOI 10.1109/MTD.2012.6225994
   Nadi S., 2011, 2011 18th Working Conference on Reverse Engineering, P315, DOI 10.1109/WCRE.2011.46
   Nadi S, 2013, IEEE WORK CONF MIN S, P111, DOI 10.1109/MSR.2013.6624017
   Nadi S, 2012, EUR CON SFTWR MTNCE, P107, DOI 10.1109/CSMR.2012.21
   Neitsch A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P140, DOI 10.1109/ICSM.2012.6405265
   NELDER JA, 1972, J R STAT SOC SER A-G, V135, P370, DOI 10.2307/2344614
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Shihab E., 2010, Proceedings of the ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, P1
   Tamrawi A, 2012, PROC INT CONF SOFTW, P650, DOI 10.1109/ICSE.2012.6227152
   Tu Q, 2001, PROC IEEE INT CONF S, P398, DOI 10.1109/ICSM.2001.972753
   Vakilian M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P123, DOI 10.1109/ICSE.2015.34
   van der Storm T, 2007, THESIS
   van der Storm T, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P233
   Wolf T, 2009, PROC INT CONF SOFTW, P1, DOI 10.1109/ICSE.2009.5070503
   Yu Y., 2003, P 1 IND ACAD C ADV S, P343
   Yu YJ, 2005, PROC IEEE INT CONF S, P59
NR 36
TC 6
Z9 7
U1 0
U2 17
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2016
VL 23
IS 4
BP 619
EP 647
DI 10.1007/s10515-015-0183-5
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DV1HD
UT WOS:000382670800005
DA 2024-07-18
ER

PT J
AU Kim, KH
   Yavuz-Kahveci, T
   Sanders, BA
AF Kim, Kyung Hee
   Yavuz-Kahveci, Tuba
   Sanders, Beverly A.
TI JRF-E: using model checking to give advice on eliminating memory
   model-related bugs
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Data race; Relaxed memory model; Counterexample
ID VERIFICATION; PROGRAMS; ERRORS; RACE
AB According to modern relaxed memory models, programs that contain data races need not be sequentially consistent. Executions that are not sequentially consistent may exhibit surprising behavior such as operations on a thread occurring in a different order than indicated by the source code, or different threads having inconsistent views of updates of shared variables. Java Racefinder (JRF) is an extension of Java Pathfinder (JPF), a model checker for Java bytecode. JRF precisely detects data races as defined by the Java memory model and can thus be used to verify sequential consistency. We describe an extension to JRF, JRF-Eliminator (JRF-E), that analyzes information collected during model checking, specifically counterexample traces and acquiring histories, and provides advice to the programmer on how to eliminate detected data races from a program. Once data races have been eliminated, standard model checking and other verification techniques that implicitly assume sequential consistency can be soundly employed to verify additional properties.
C1 [Kim, Kyung Hee; Yavuz-Kahveci, Tuba; Sanders, Beverly A.] Univ Florida, Gainesville, FL 32611 USA.
C3 State University System of Florida; University of Florida
RP Kim, KH (corresponding author), Univ Florida, Gainesville, FL 32611 USA.
EM khkim@cise.ufl.edu; tyavuz@cise.ufl.edu; sanders@cise.ufl.edu
CR Aspinall D, 2007, LECT NOTES COMPUT SC, V4732, P22
   Ball T, 2003, ACM SIGPLAN NOTICES, V38, P97, DOI 10.1145/640128.604140
   Basu S, 2004, LECT NOTES COMPUT SC, V3235, P79
   Brun Y, 2004, PROC INT CONF SOFTW, P480, DOI 10.1109/ICSE.2004.1317470
   Burckhardt S, 2008, LECT NOTES COMPUT SC, V5123, P107
   De A., 2008, PASTE 08, P8, DOI [10.1145/1512475.1512478, DOI 10.1145/1512475.1512478]
   Elmas T, 2007, ACM SIGPLAN NOTICES, V42, P245, DOI 10.1145/1273442.1250762
   Flanagan C., 2009, PROGRAMMING LANGUAGE
   Flanagan C, 2008, ACM SIGPLAN NOTICES, V43, P293, DOI 10.1145/1379022.1375618
   Goetz B, 2006, JAVA CONCURRENCY PRA
   Gosling J., 2005, Java Language Specification, Vthird
   Groce A, 2003, LECT NOTES COMPUT SC, V2648, P121
   Herlihy M., 2008, ART MULTIPROCESSOR P
   Huynh TQ, 2007, FORM METHOD SYST DES, V31, P281, DOI 10.1007/s10703-007-0041-6
   Kim K.H., 2009, P 24 ACM IEEE C AUT
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Musuvathi Madan, 2007, MSRTR2007149
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Yavuz-Kahveci T., 2009, 2009480 U FLOR
NR 20
TC 6
Z9 6
U1 0
U2 5
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2012
VL 19
IS 4
SI SI
BP 491
EP 530
DI 10.1007/s10515-012-0109-4
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 988QT
UT WOS:000307506300005
DA 2024-07-18
ER

PT J
AU Deng, XH
   Lee, J
   Robby
AF Deng, Xianghua
   Lee, Jooyong
   Robby
TI Efficient and formal generalized symbolic execution
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Symbolic execution; Operational semantics; JVM; Soundness; Completeness
ID MODEL CHECKING; VERIFICATION
AB Programs that manipulate dynamic heap objects are difficult to analyze due to issues like aliasing. Lazy initialization algorithm enables the classical symbolic execution to handle such programs. Despite its successes, there are two unresolved issues: (1) inefficiency; (2) lack of formal study. For the inefficiency issue, we have proposed two improved algorithms that give significant analysis time reduction over the original lazy initialization algorithm. In this article, we formalize the lazy initialization algorithm and the improved algorithms as operational semantics of a core subset of the Java Virtual Machine (JVM) instructions, and prove that all algorithms are relatively sound and complete with respect to the JVM concrete semantics. Finally, we conduct a set of extensive experiments that compare the three algorithms and demonstrate the efficiency of the improved algorithms.
C1 [Deng, Xianghua] Penn State Univ Harrisburg, Middletown, PA 17057 USA.
   [Lee, Jooyong] Korea Univ, Seoul, South Korea.
   [Robby] Kansas State Univ, Manhattan, KS 66506 USA.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE);
   Pennsylvania State University; Korea University; Kansas State University
RP Deng, XH (corresponding author), Google Inc, Mountain View, CA 94043 USA.
EM wdeng@google.com; jlee@formal.korea.ac.kr; robby@ksu.edu
RI Yi, Jooyong/ACE-0654-2022
OI Yi, Jooyong/0000-0002-7215-0855
FU US National Science Foundation (NSF) [0709169, 0644288]; US Air Force
   Office of Scientific Research (AFOSR); Rockwell Collins; Engineering
   Research Center of Excellence Program of Korea Ministry of Education,
   Science and Technology (MEST) / National Research Foundation of Korea
   (NRF) [2010-0001727]; Korea University Grant; Direct For Computer & Info
   Scie & Enginr; Division Of Computer and Network Systems [0709169]
   Funding Source: National Science Foundation; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [0644288] Funding Source: National Science Foundation
FX This work was supported in part by the US National Science Foundation
   (NSF) award 0709169 and CAREER award 0644288, the US Air Force Office of
   Scientific Research (AFOSR), and Rockwell Collins. The second author was
   also partially supported by the Engineering Research Center of
   Excellence Program of Korea Ministry of Education, Science and
   Technology (MEST) / National Research Foundation of Korea (NRF) (Grant
   2010-0001727), and a Korea University Grant. We would also like to thank
   Kathy Brode for proofreading the draft of this article.
CR Alves-Foss Jim., 1999, LECT NOTES COMPUTER, V1523
   Anand S, 2006, LECT NOTES COMPUTER, V3925
   Anand S., 2007, TOOLS ALGORITHMS CON
   [Anonymous], ACM SIGSOFT SOFTW EN
   [Anonymous], ECMA335
   [Anonymous], 2006, YICES SMT SOLVER
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bertelsen P, 2000, FUTURE GENER COMP SY, V16, P841, DOI 10.1016/S0167-739X(99)00094-1
   Biere A, 2003, ADV COMPUT, V58, P117
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Boyapati C., 2002, Software Engineering Notes, V27, P123, DOI 10.1145/566171.566191
   BRAT G, 2000, P WORKSH ADV VER
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clarke Edmund M., 2001, Model Checking
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Darga PT, 2006, ACM SIGPLAN NOTICES, V41, P363, DOI 10.1145/1167515.1167504
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deng X., 2007, TEST AC IND C PRACT
   Deng X., 2010, SANTOSTR20100119 KAN
   Deng X., 2007, THESIS KANSAS STATE
   Deng XH, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P273, DOI 10.1109/SEFM.2007.33
   Deng XH, 2006, IEEE INT CONF AUTOM, P157
   DEUTSCH A, 1994, SIGPLAN NOTICES, V29, P230, DOI 10.1145/773473.178263
   Distefano D, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1449955.1449782
   Drossopoulou S., 1998, FORMAL SYNTAX SEMANT
   Geilen M., 2001, ELECT NOTES THEOR CO, V55
   Gligoric M., 2010, P 32 ACM IEEE INT C, P225, DOI 10.1145/1806799.1806835
   Grieskamp W., 2005, WORKSH SOFTW MOD CHE
   HANTLER SL, 1976, COMPUT SURV, V8, P331, DOI 10.1145/356674.356677
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jones N. D., 1979, P 6 ACM SIGACT SIGPL, P244
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Larus JamesR., 1988, ACM SIGPLAN Notices, V23, P24, DOI DOI 10.1145/53990.53993
   Leavens G.T., 1998, FORM UND JAV WORKSH
   Lev-Ami T, 2000, LECT NOTES COMPUT SC, V1824, P280
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Marinov D, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P22, DOI 10.1109/ASE.2001.989787
   McCarthy John., 1962, IFIP C, P21
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   Pasareanu CS, 2004, LECT NOTES COMPUT SC, V2989, P164
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Robby, 2008, SIREUM SOFTWARE ANAL
   Roberson M, 2010, ACM SIGPLAN NOTICES, V45, P4, DOI 10.1145/1932682.1869461
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Schmidt D., 2000, BINARY RELATIONS ABS
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Visser W., 2004, P 2004 ACM SIGSOFT I, P97, DOI [DOI 10.1145/1007512.1007526, 10.1145/1007512.1007526]
   Weiss M.A., 2006, Data Structures and Algorithm Analysis in C++, V3rd
   Xie YC, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1232420.1232423
   Zhang HT, 1997, LECT NOTES ARTIF INT, V1249, P272
NR 56
TC 9
Z9 11
U1 0
U2 6
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD SEP
PY 2012
VL 19
IS 3
BP 233
EP 301
DI 10.1007/s10515-011-0089-9
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 988QR
UT WOS:000307506100002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Liparas, D
   Angelis, L
   Feldt, R
AF Liparas, Dimitris
   Angelis, Lefteris
   Feldt, Robert
TI Applying the Mahalanobis-Taguchi strategy for software defect diagnosis
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Software defect prediction; Fault-proneness; Software testing;
   Mahalanobis-Taguchi strategy
ID PREDICTION; MODELS; SYSTEM; MTS
AB The Mahalanobis-Taguchi (MT) strategy combines mathematical and statistical concepts like Mahalanobis distance, Gram-Schmidt orthogonalization and experimental designs to support diagnosis and decision-making based on multivariate data. The primary purpose is to develop a scale to measure the degree of abnormality of cases, compared to "normal" or "healthy" cases, i.e. a continuous scale from a set of binary classified cases. An optimal subset of variables for measuring abnormality is then selected and rules for future diagnosis are defined based on them and the measurement scale. This maps well to problems in software defect prediction based on a multivariate set of software metrics and attributes. In this paper, the MT strategy combined with a cluster analysis technique for determining the most appropriate training set, is described and applied to well-known datasets in order to evaluate the fault-proneness of software modules. The measurement scale resulting from the MT strategy is evaluated using ROC curves and shows that it is a promising technique for software defect diagnosis. It compares favorably to previously evaluated methods on a number of publically available data sets. The special characteristic of the MT strategy that it quantifies the level of abnormality can also stimulate and inform discussions with engineers and managers in different defect prediction situations.
C1 [Feldt, Robert] Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
   [Liparas, Dimitris; Angelis, Lefteris] Aristotle Univ Thessaloniki, Dept Informat, Thessaloniki 54124, Greece.
C3 Chalmers University of Technology; Aristotle University of Thessaloniki
RP Feldt, R (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
EM dliparas@csd.auth.gr; lef@csd.auth.gr; robert.feldt@chalmers.se
OI Feldt, Robert/0000-0002-5179-4205; Liparas, Dimitris/0000-0001-9968-725X
CR Afzal W., 2009, EVOLUTIONARY COMPUTA, P94, DOI DOI 10.4018/978-1-61520-809-8.CH006
   [Anonymous], ASQ SOFTWARE QUALITY
   [Anonymous], 1999, ORTHOGONAL ARRAYS TH, DOI DOI 10.1007/978-1-4612-1478-6
   [Anonymous], 2000, SANKHYA INDIAN J S B
   [Anonymous], 1997, ICML
   [Anonymous], 1996, P ACM SIGMOD C MAN D
   [Anonymous], 2002, The Mahalanobis-Taguchi Strategy: A Pattern Technology System
   [Anonymous], 2005, LANG ENV STAT COMP
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Briand LC, 2002, IEEE T SOFTWARE ENG, V28, P706, DOI 10.1109/TSE.2002.1019484
   Chiu T., 2001, Proceedings of the 7th ACM SIGKDDD international conference on knowledge discovery and data mining, P263268
   Cudney E., 2008, Journal of Industrial and Systems Engineering, V1, P281
   Cudney EA, 2006, CONCURRENT ENG-RES A, V14, P343, DOI 10.1177/1063293X06073568
   Das P, 2007, COMP MATER SCI, V38, P671, DOI 10.1016/j.commatsci.2006.05.022
   Dolado JJ, 2001, INFORM SOFTWARE TECH, V43, P61, DOI 10.1016/S0950-5849(00)00137-3
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Fenton N, 2008, EMPIR SOFTW ENG, V13, P499, DOI 10.1007/s10664-008-9072-x
   Goel B, 2008, STUD COMPUT INTELL, V131, P255
   Huang CL, 2009, EXPERT SYST APPL, V36, P5475, DOI 10.1016/j.eswa.2008.06.120
   Huang ML, 2005, INVEST OPHTH VIS SCI, V46, P4121, DOI 10.1167/iovs.05-0069
   Johnson R.A., 2007, Applied multivariate statistial analysis, Vsixth
   Khoshgoftaar TM, 2006, SOFTWARE QUAL J, V14, P85, DOI 10.1007/s11219-006-7597-z
   Krzanowski WJ, 2009, MONOGR STAT APPL PRO, V111, P1
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Ma Yan., 2007, ADVANCES IN MACHINE LEARNING APPLICATIONS IN SOFTWARE ENGINEERING
   Mahalanobis P. C., 1936, P NATL I SCI INDIA, V2, P49
   Ohlsson N, 1996, IEEE T SOFTWARE ENG, V22, P886, DOI 10.1109/32.553637
   Pal A, 2010, EXPERT SYST APPL, V37, P1286, DOI 10.1016/j.eswa.2009.06.011
   Su CT, 2007, IEEE T KNOWL DATA EN, V19, P1321, DOI 10.1109/TKDE.2007.190623
   Su CT, 2009, IEEE T KNOWL DATA EN, V21, P192, DOI 10.1109/TKDE.2008.128
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Woodall WH, 2003, TECHNOMETRICS, V45, P1, DOI 10.1198/004017002188618626
   Zhou YM, 2006, IEEE T SOFTWARE ENG, V32, P771, DOI 10.1109/TSE.2006.102
NR 33
TC 21
Z9 24
U1 0
U2 14
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2012
VL 19
IS 2
SI SI
BP 141
EP 165
DI 10.1007/s10515-011-0091-2
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 872HA
UT WOS:000298798700002
DA 2024-07-18
ER

PT J
AU Ben Asher, Y
   Gal, T
   Haber, G
   Zalmanovici, M
AF Ben Asher, Yosi
   Gal, Tomer
   Haber, Gadi
   Zalmanovici, Marcel
TI Refactoring techniques for aggressive object inlining in Java
   applications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Refactoring; Java; Inlining; Eclipse
AB Object Inlining (OI) is a known optimization in object oriented programming in which referenced objects of class B are inlined into their referencing objects of class A by making all fields and methods of class B part of class A. The optimization saves all the new operations of B type objects from class A and at the same time replaces all indirect accesses, from A to fields of B, by direct accesses. To the best of our knowledge, in-spite of the significant performance potential of the OI optimization, reported performance measurements were relatively moderate. This is because an aggressive OI optimization requires complex analysis and code transformations to overcome problems like multiple references to the inlinable object, object references that escape their object scope, etc.
   To extract the full potential of OI, we propose a two-stage process. The first stage includes automatic analysis of the source code that informs the user, via comments in the IDE, about code transformations that are needed in order to enable or to maximize the potential of the OI optimization. In the second stage, the OI optimization is applied automatically on the source code as a code refactoring operation, or preferably, as part of the compilation process prior to javac run.
   We show that this half-automated technique helps to extract the full potential of OI. The proposed OI refactoring process also determines the order of applying the inlinings of the objects and enables us to apply inlinings of objects created inside a method; thus enabling us to reach better performance gain.
   In this work we also include an evaluation of the OI optimization effects on multithreaded applications running on multicore machines.
   The comments and the OI transformation were implemented in the Eclipse JDT (Java Development Tools) plugin. The system was then applied on the SPECjbb2000 source code along with profiling data collected by the Eclipse TPTP plugin. The proposed system achieved 46% improvement in performance.
C1 [Ben Asher, Yosi; Gal, Tomer] Univ Haifa, Dept Comp Sci, IL-31999 Haifa, Israel.
   [Haber, Gadi] Intel Dev Ctr, Haifa, Israel.
   [Zalmanovici, Marcel] IBM Res Labs Haifa, Haifa, Israel.
C3 University of Haifa; Intel Corporation
RP Ben Asher, Y (corresponding author), Univ Haifa, Dept Comp Sci, IL-31999 Haifa, Israel.
EM yosi@cs.haifa.ac.il; tomer@cs.haifa.ac.il; gadi.haber@intel.com;
   marcel@il.ibm.com
CR [Anonymous], PLDI 00
   Dolby J., 1998, Conference Proceedings OOPSLA'98. Conference on Object-Oriented Programming, Systems, Languages and Applications, P1
   DOLBY J, 1997, ACM SIGPLAN 1997 PLD, P7
   EADES P, 1993, INFORM PROCESS LETT, V47, P319, DOI 10.1016/0020-0190(93)90079-O
   GHEMAWAT S, 2000, ACM SIGPLAN C PROGR
   Karlsson M, 2003, NINTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P217, DOI 10.1109/HPCA.2003.1183540
   Keeton K, 1998, CONF PROC INT SYMP C, P15, DOI 10.1109/ISCA.1998.694759
   Laud Peeter., 2001, P JOSES WORKSHOP, P1
   LHOTAK O, 2002, JGI 02, P175
   SHUF Y, 2002, OOPSLA 02
   SHUF YSM, 2001, SIGMETRICS PERFORM E, V29
   Wimmer  C., 2007, VEE 07
   WIMMER C, 2008, CGO 08
NR 13
TC 3
Z9 4
U1 0
U2 3
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2012
VL 19
IS 1
BP 97
EP 136
DI 10.1007/s10515-011-0096-x
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 872GX
UT WOS:000298798400004
DA 2024-07-18
ER

PT J
AU Di Nitto, E
   Ghezzi, C
   Metzger, A
   Papazoglou, M
   Pohl, K
AF Di Nitto, Elisabetta
   Ghezzi, Carlo
   Metzger, Andreas
   Papazoglou, Mike
   Pohl, Klaus
TI A journey to highly dynamic, self-adaptive service-based applications
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE Service-oriented computing; Services; Adaptive systems; Self-adaptation
AB Future software systems will operate in a highly dynamic world. Systems will need to operate correctly despite of unespected changes in factors such as environmental conditions, user requirements, technology, legal regulations, and market opportunities. They will have to operate in a constantly evolving environment that includes people, content, electronic devices, and legacy systems. They will thus need the ability to continuously adapt themselves in an automated manner to react to those changes. To realize dynamic, self-adaptive systems, the service concept has emerged as a suitable abstraction mechanism. Together with the concept of the service-oriented architecture (SOA), this led to the development of technologies, standards, and methods to build service-based applications by flexibly aggregating individual services. This article discusses how those concepts came to be by taking two complementary viewpoints. On the one hand, it evaluates the progress in software technologies and methodologies that led to the service concept and SOA. On the other hand, it discusses how the evolution of the requirements, and in particular business goals, influenced the progress towards highly dynamic self-adaptive systems. Finally, based on a discussion of the current state of the art, this article points out the possible future evolution of the field.
C1 [Di Nitto, Elisabetta; Ghezzi, Carlo] Politecn Milan, DEI, I-20133 Milan, Italy.
   [Metzger, Andreas; Pohl, Klaus] Univ Duisburg Essen, SSE, D-45117 Essen, Germany.
   [Papazoglou, Mike] Tilburg Univ, INFOLAB, NL-5000 LE Tilburg, Netherlands.
C3 Polytechnic University of Milan; University of Duisburg Essen; Tilburg
   University
RP Di Nitto, E (corresponding author), Politecn Milan, DEI, Piazza Leonardo Vinci 32, I-20133 Milan, Italy.
EM dinitto@elet.polimi.it; ghezzi@elet.polimi.it;
   andreas.metzger@sse.uni-due.de; mikep@uvt.nl; klaus.pohl@sse.uni-due.de
RI Ghezzi, Carlo/A-9048-2010; Metzger, Andreas/AAC-7473-2019
OI Metzger, Andreas/0000-0002-4808-8297; Di Nitto,
   Elisabetta/0000-0003-3422-5171; Papazoglou, Michael/0000-0002-2482-2282
CR Abowd GD, 2003, IEEE PERVAS COMPUT, V2, P22, DOI 10.1109/MPRV.2003.1203749
   Andrews Tony., 2003, Business process execution language for web services
   [Anonymous], 2000, PROBLEM FRAMES ANAL
   [Anonymous], TEST ANAL WEB SERVIC
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2004, Service-oriented architecture
   [Anonymous], 2004, The Grid: Blueprint for a New Computing Infrastructure. Vol
   [Anonymous], TEST ANAL WEB SERVIC
   Anton AI, 1996, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, P136, DOI 10.1109/ICRE.1996.491438
   Arsanjani A., 2004, SERVICE ORIENTED MOD
   Babaoglu O, 2006, ACM T AUTON ADAP SYS, V1, P26, DOI 10.1145/1152934.1152937
   BAI X, 2007, 31 ANN INT COMP SOFT, V1, P368
   Bai XY, 2007, P INT COMP SOFTW APP, P233
   Baresi L, 2007, IET SOFTW, V1, P219, DOI 10.1049/iet-sen:20070027
   Baresi L, 2005, LECT NOTES COMPUT SC, V3826, P269
   BARESI L, 2007, TEST ANAL WEB SERVIC
   Baresi L, 2006, COMPUTER, V39, P36, DOI 10.1109/MC.2006.362
   Batini C, 2007, WORLD WIDE WEB, V10, P349, DOI 10.1007/s11280-007-0025-x
   BENBERNOU S, 2007, 5 INT C SERV OR COMP, P353
   Bertolino A, 2005, EUROMICRO-SEAA 2005: 31ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P134
   Bianculli D, 2007, IEEE INTERNATIONAL CONFERENCE ON SERVICE-ORIENTED COMPUTING AND APPLICATIONS, PROCEEDINGS, P13, DOI 10.1109/SOCA.2007.5
   BULTAN T, 2007, TEST ANAL WEB SERVIC, P57
   Burlton R., 2001, BUSINESS PROCESS MAN
   Canfora G., 2006, IT Professional, V8, P10, DOI 10.1109/MITP.2006.51
   Canfora G., 2006, INT WORKSHOP WEB SER, P3
   CHARFI A, 4 INT C SERV OR COMP
   Chhetri MB, 2006, 2006 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P90
   COLOMBO E, 3 INT C SERV OR COMP
   Colombo M, 2006, LECT NOTES COMPUT SC, V4294, P191
   Comuzzi M, 2005, NINTH IEEE INTERNATIONAL EDOC ENTERPRISE COMPUTING CONFERENCE, PROCEEDINGS, P70, DOI 10.1109/EDOC.2005.4
   Cugola G, 2001, IEEE T SOFTWARE ENG, V27, P827, DOI 10.1109/32.950318
   CURBERA F, 2007, IEEE COMPUT, V11, P74
   DAI G, 2007, 31 ANN INT COMP SOFT, V1, P517
   de Almeida LF, 2006, ICWS 2006: IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P717
   DEUSSEN P, 2003, 6 INT S AUT DEC SYST, P177
   DEVESCOVI D, 2007, 1 INT C AUT COMP COM, P1
   Dey AK, 2001, PERS UBIQUIT COMPUT, V5, P4, DOI 10.1007/s007790170019
   Di Nitto E., 2007, 5 INT C SERV OR COMP, P295
   Emmerich W, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/13487689.13487692
   Foster H., 2006, 28th International Conference on Software Engineering Proceedings, P771, DOI 10.1145/1134285.1134408
   Foster I.K., 2002, Global Grid Forum
   Fu X., 2004, P 13 INT C WORLD WID, P621
   FUGGETTA A, 1993, COMPUTER, V26, P25, DOI 10.1109/2.247645
   HAREL D, 1990, IEEE T SOFTWARE ENG, V16, P403, DOI 10.1109/32.54292
   Heckel R, 2005, LECT NOTES COMPUT SC, V3442, P34, DOI 10.1007/978-3-540-31984-9_4
   *IBM MB, 2008, IBM WEBSPH MESS BROK
   Jaeger MC, 2004, EIGHTH IEEE INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P149, DOI 10.1109/EDOC.2004.1342512
   JARKE M, 1993, 14 INT C INF SYST IC, P23
   Josuttis N.M., 2007, SOA in Practice: the Art of Distributed System Design
   Kavantzas N., 2004, WEB SERVICES CHOREOG
   Kaye D., 2003, Loosely coupled: the missing pieces of Web services
   KAZHAMIAKIN R, 2006, 15 INT C WORLD WID W
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kreger H, 2005, MANAGEMENT USING WEB
   Lazovik A, 2006, INT J DIGIT LIBRARIE, V6, P235, DOI 10.1007/s00799-006-0002-5
   Leymann F, 2006, CONCURR COMP-PRACT E, V18, P1201, DOI 10.1002/cpe.996
   Marzolla M, 2007, LECT NOTES COMPUT SC, V4880, P127
   Miller I., 2003, MDA GUIDE VERSION 1
   MYLOPOULOS J, 1990, ACM T INFORM SYST, V8, P325, DOI 10.1145/102675.102676
   Naur Peter., 1968, Software engineering-report on a conference sponsored by the nato science committee garimisch, germany
   PAPAZOGLOU M, 2008, IFIP WORLD COMP C C
   PAPAZOGLOU M, 2008, ADV INF SYST ENG C C
   Papazoglou M., 2007, Web Services: Principles and Technology
   PAPAZOGLOU M, 2008, 2 WORKSH HELD EUR CO
   Papazoglou MP, 2007, SERV ORIENTED COMPUT, V1, P51, DOI 10.1007/s11761-007-0002-3
   Papazoglou MP, 2003, COMMUN ACM, V46, P25, DOI 10.1145/944217.944233
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Pernici B., 2006, MOBILE INFORM SYSTEM
   PISTORE M, SPECIAL TRACK
   Pistore Marco., 2007, TEST ANAL WEB SERVIC, P307
   ROLLI D, 2004, 3 WORKSH E BUS WEB 2, P4
   Royce W.W., 1970, P IEEE WESCON IEEE, P1
   Rozinat A, 2008, INFORM SYST, V33, P64, DOI 10.1016/j.is.2007.07.001
   RUTH ME, 2007, 16 INT C WORLD WID W, P1265
   SOLANKI M, 13 INT C WORLD WID W
   Spanoudakis G, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P233
   TRAVERSO P, 3 INT SEM WEB C ISWC
   van der Aalst WMP, 2005, REQUIR ENG, V10, P198, DOI 10.1007/s00766-005-0001-x
   YANG J, 2004, INF SYST, V28
   ZACHOS K, 2007, 19 INT C ADV INF SYS, P142
NR 80
TC 117
Z9 128
U1 0
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD DEC
PY 2008
VL 15
IS 3-4
BP 313
EP 341
DI 10.1007/s10515-008-0032-x
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 367FV
UT WOS:000260538800006
DA 2024-07-18
ER

PT J
AU Davis, AM
AF Davis, Alan M.
TI Desert island column - Alone on sofutouea-jima
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article
DE DeMarco; Lister; Tufte; Desert island; Ries; Trout; Endres; Rombach;
   Dorner; Turnbull; Ik; Bambuti
AB The author has been marooned on a desert island and his only access to the outside world is via a coupon for seven free books from Amazon (don't ask how he will order the books). That doesn't sound too bad, except there is a catch: all seven books must be related to software engineering. What will the author do?.
C1 Univ Colorado, Colorado Springs, CO 80933 USA.
C3 University of Colorado System; University of Colorado at Colorado
   Springs
RP Davis, AM (corresponding author), Univ Colorado, 1420 Austin Bluffs Pkwy,POB 7150, Colorado Springs, CO 80933 USA.
EM adavis@uccs.edu
CR ABBOTT E, 1964, FLATLAND SIGNET CLAS
   [Anonymous], KITE RUNNER
   [Anonymous], 1972, THE MOUNTAIN PEOPLE
   Armstrong Karen., 2004, HIST GOD
   Armstrong Karen., 2001, The Battle for God
   Demarco T., 1995, WHY DOES SOFTWARE CO
   DeMarco T., 1999, PEOPLEWARE, V2nd
   DeMarco T., 1997, DEADLINE
   Dorner D., 1989, LOGIC FAILURE
   Endres A., 2003, A Handbook of Software and Systems Engineering: Empirical Observations, Laws, and Theories
   RIES A, 2005, FOCUS FUTURE YOUR CO
   Ries A., 1994, The 22 Immutable Laws of Marketing: Violate Them at Your Own Risk
   Riley Laura., 2005, Nature's Strongholds: The World's Great Wildlife Reserves
   Todd E., 2004, EMPIRE
   Tufte ER, 1990, Envisioning Information
   Turnbull C., 1961, The Forest People
NR 16
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI NEW YORK
PA 233 SPRING ST, NEW YORK, NY 10013 USA
SN 0928-8910
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2008
VL 15
IS 2
BP 251
EP 256
DI 10.1007/s10515-007-0021-5
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308YL
UT WOS:000256426700005
DA 2024-07-18
ER

PT J
AU Abi-Antoun, M
   Aldrich, J
   Nahas, N
   Schmerl, B
   Garlan, D
AF Abi-Antoun, Marwan
   Aldrich, Jonathan
   Nahas, Nagi
   Schmerl, Bradley
   Garlan, David
TI Differencing and merging of architectural views
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 21st IEEE International Conference on Automated Software Engineering
CY SEP 22, 2006
CL Tokyo, JAPAN
SP IEEE Comp Soc TCSE, ACM SIGSOFT, ACM SIGART, ACM, Japan Chapter, Informat Proc Soc Japan, ASE Program Comm, Natl Inst Informat Japan, Univ Toronto, CSK Holdings Corp, Hatachi Ltd, NEC Corp, NTT Data Corp, Toshiba Corp, Toshiba Informat Syst Corp
DE tree-to-tree correction; view synchronization; graph matching
ID ALGORITHM; RECOVERY
AB Differencing and merging architectural views is an important activity in software engineering. However, existing approaches are still based on restrictive assumptions, such as requiring view elements to have unique identifiers or exactly matching types, which is often not the case in many application domains.
   We propose an approach based on structural information. We generalize a published polynomial-time tree-to-tree correction algorithm that detects inserts, renames and deletes, into a novel algorithm that additionally detects restricted moves. Our algorithm also supports forcing and preventing matches between view elements.
   We incorporate the algorithm into tools to compare and merge Component-and-Connector (C&C) architectural views. We provide an empirical evaluation of the algorithm. We illustrate the tools using extended examples, and use them to detect and reconcile interesting differences between real architectural views.
C1 [Abi-Antoun, Marwan; Aldrich, Jonathan; Nahas, Nagi; Schmerl, Bradley; Garlan, David] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Abi-Antoun, M (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM marwan.abi-antoun@cs.cmu.edu
OI Schmerl, Bradley/0000-0001-7828-622X; Aldrich,
   Jonathan/0000-0003-0631-5591
CR Abi-Antoun M., 2005, ACM SIGSOFT Software Engineering Notes, V30, P1
   Abi-Antoun M, 2007, J SYST SOFTWARE, V80, P240, DOI 10.1016/j.jss.2006.10.036
   Alanen M, 2003, LECT NOTES COMPUT SC, V2863, P2
   Aldrich J, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P187, DOI 10.1109/ICSE.2002.1007967
   AMMANN MM, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P354, DOI 10.1109/ICSM.1994.336759
   [Anonymous], P WORKSH ARCH DEP SY
   [Anonymous], P ACM SIGMOD INT C M
   Apiwattanapong T, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P2, DOI 10.1109/ASE.2004.1342719
   CHEN P, 2003, P 5 INT WORSKH PROD, P269
   Clements P., 2003, SEI S SOFTW
   Conte D, 2004, INT J PATTERN RECOGN, V18, P265, DOI 10.1142/S0218001404003228
   Dashofy Eric M, 2002, P 1 WORKSH SELF HEAL, P21
   Dickinson PJ, 2004, PATTERN ANAL APPL, V7, P243, DOI [10.1007/s10044-004-0222-5, 10.1007/s10044-044-0222-5]
   Easterbrook S, 1996, SOFTWARE ENG J, V11, P31, DOI 10.1049/sej.1996.0004
   EGYED A, 2006, P 28 INT C SOFTW ENG, P381, DOI DOI 10.1145/1134285.1134339
   Eixelsberger W, 1998, PROC INT CONF SOFTW, P508, DOI 10.1109/ICSE.1998.671617
   ERDOGMUS H, 1998, P P 1998 C CTR ADV S, P159
   Garlan D, 2000, FDN COMPONENT BASED, P47
   HLAOUI A, 2002, P JOINT IAPR INT WOR, P391
   Jiang T., 1994, Proceedings of the 5th Annual Symposium on Combinatorial Pattern Matching, LNCS, 807, P75
   JIMENEZ AM, 2005, THESIS U QUEESLAND
   Krikhaar R., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P371, DOI 10.1109/ICSM.1999.792635
   Medvidovic N., 2006, Automated Software Engineering, V13, P225, DOI 10.1007/s10515-006-7737-5
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   MEDVIDOVIC N, 1996, JOINT P 2 INT SOFTW, P24, DOI [10.1145/243327.243340, DOI 10.1145/243327.243340]
   Mehra A., 2005, ASE, P204, DOI DOI 10.1145/1101908.1101940
   Melnik S, 2002, PROC INT CONF DATA, P117, DOI 10.1109/ICDE.2002.994702
   MESSMER B, 1996, THESIS U BERN
   MONROE R, 2001, CMUCS98163R CARN MEL
   Murphy GC, 2001, IEEE T SOFTWARE ENG, V27, P364, DOI 10.1109/32.917525
   *OBJ TECHN INT INC, 2003, ECL PLATF TECHN OVER
   OHST D, 2003, P 9 EUR SOFTW ENG C, P227
   Raghavan S, 2004, PROC IEEE INT CONF S, P188, DOI 10.1109/ICSM.2004.1357803
   Roshandel R, 2004, ACM T SOFTW ENG METH, V13, P240, DOI 10.1145/1018210.1018213
   RUSHBY J, 1998, IEEE T SOFTW ENG, V24
   Sartipi K, 2003, PROC IEEE INT CONF S, P224, DOI 10.1109/ICSM.2003.1235425
   Schmerl B, 2004, PROC INT CONF SOFTW, P704, DOI 10.1109/ICSE.2004.1317497
   Schmerl B, 2006, IEEE T SOFTWARE ENG, V32, P454, DOI 10.1109/TSE.2006.66
   SHASHA D, 1997, PATTERN MATCHING ALG
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   SPITZNAGEL B, 1998, P C SOFTWARE ENG KNO
   Sun DX, 2001, AAPS PHARMSCI, V3
   Telea A, 2002, PROG COMPREHEN, P3, DOI 10.1109/WPC.2002.1021303
   Torsello A, 2005, IEEE T PATTERN ANAL, V27, P1087, DOI 10.1109/TPAMI.2005.146
   VAN GORP P, 2005, P INT WORKSH GRAPH M
   VANDERWESTHUIZE.C, 2002, P WORK IFIP C SOFTW, P95
   WAGNER RA, 1974, J ACM, V21, P168, DOI 10.1145/321796.321811
   Wang Y, 2003, PROC INT CONF DATA, P519, DOI 10.1109/ICDE.2003.1260818
   Xing Z., 2005, Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering, P54
   ZHANG KZ, 1994, INFORM PROCESS LETT, V49, P249, DOI 10.1016/0020-0190(94)90062-0
   [No title captured]
NR 51
TC 14
Z9 15
U1 1
U2 3
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2008
VL 15
IS 1
BP 35
EP 74
DI 10.1007/s10515-007-0023-3
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 255PS
UT WOS:000252670500003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Murta, LGP
   van der Hoek, A
   Werner, CML
AF Murta, Leonardo G. P.
   van der Hoek, Andre
   Werner, Claudia M. L.
TI Continuous and automated evolution of architecture-to-implementation
   traceability links
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 21st IEEE International Conference on Automated Software Engineering
CY SEP 22, 2006
CL Tokyo, JAPAN
SP IEEE Comp Soc TCSE, ACM SIGSOFT, ACM SIGART, ACM, Japan Chapter, Informat Proc Soc Japan, ASE Program Comm, Natl Inst Informat Japan, Univ Toronto, CSK Holdings Corp, Hatachi Ltd, NEC Corp, NTT Data Corp, Toshiba Corp, Toshiba Informat Syst Corp
DE traceability; software architecture; configuration management; software
   evolution
ID CODE
AB A traditional obstacle in the use of multiple representations is the need to maintain traceability among the representations in the face of evolution. The introduction of software architecture, and architecture-based development, has brought this need to architectural descriptions and corresponding source code. Specifically, the task is to relate versions of architectural elements to versions of source code configuration items, and to update those relations as new versions of the architecture and source code are produced. We present ArchTrace, a new approach that we developed to address this problem. ArchTrace distinguishes itself by continuously updating traceability relations from architectural elements to code elements through a policy-based extensible infrastructure that allows a group of developers to choose a set of traceability management policies that best match their situational needs and/or working styles. We introduce the high-level approach of ArchTrace, discuss its extensible infrastructure, and present our current set of ten pluggable traceability management policies. We conclude with a retrospective analysis of data collected from a twenty month period of development and maintenance of Odyssey, a component-based software development environment comprised of over 50,000 lines of code. This analysis shows that our approach is promising: with respect to the ideal set of traceability links, the policies applied resulted in a precision of 95% and recall of 89%.
C1 [Murta, Leonardo G. P.; Werner, Claudia M. L.] Univ Fed Rio de Janeiro, COPPE Syst Engn & Comp Sci, BR-21945970 Rio De Janeiro, RJ, Brazil.
   [van der Hoek, Andre] Univ Calif Irvine, Dept Informat, Irvine, CA 92697 USA.
C3 Universidade Federal do Rio de Janeiro; University of California System;
   University of California Irvine
RP Murta, LGP (corresponding author), Univ Fed Rio de Janeiro, COPPE Syst Engn & Comp Sci, POB 68511, BR-21945970 Rio De Janeiro, RJ, Brazil.
EM murta@cos.ufrj.br; andre@ics.uci.edu; werner@cos.ufrj.br
RI Werner, Claudia/JZE-5245-2024
OI Lima Werner, Claudia Maria/0000-0002-4231-9621
CR ABIANTOUN M, 2005, WORKING IEEE IFIP C, P265
   Agrawal R., 1994, P INT VLDB C VLDB 94, P487, DOI DOI 10.5555/645920.672836
   Aldrich J, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P187, DOI 10.1109/ICSE.2002.1007967
   ANDERSON KM, 1994, C HYP HYP ED SCOTL S, P94
   [Anonymous], INT WORKSH TEST AN C
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Briand LC, 2003, PROC IEEE INT CONF S, P256, DOI 10.1109/ICSM.2003.1235428
   CHEN P, 2003, INT WORKSH PRODUCT F, V269
   Collins-Sussman B., 2004, VERSION CONTROL SUBV
   Conradi R, 1998, ACM COMPUT SURV, V30, P232, DOI 10.1145/280277.280280
   Dashofy EM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P266, DOI 10.1109/ICSE.2002.1007974
   Dashofy EM, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P103, DOI 10.1109/WICSA.2001.948416
   De Lucia A, 2004, PROC IEEE INT CONF S, P306, DOI 10.1109/ICSM.2004.1357816
   GARG A, 2003, ENV MANAGING EVOLVIN, P358
   Hayes JH, 2003, 11TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P138
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kruchten P., 2001, The Rational Unified Process: An introduction, VSecond
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   MEDVIDOVIC N, 1997, C DOMAIN SPECIFIC LA, P199
   Nentwich C, 2003, ACM T SOFTW ENG METH, V12, P28, DOI 10.1145/839268.839271
   NGUYEN TN, 2004, C HYP HYP SANT CRUS, P185
   Oreizy P, 1998, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.1998.671114
   Reiss SP, 2002, PROC IEEE INT CONF S, P162, DOI 10.1109/ICSM.2002.1167763
   RICHARDSON DJ, 1996, ISAW 2 JOINT P ACM S, P68
   Settimi R, 2004, 7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, P49, DOI 10.1109/IWPSE.2004.1334768
   SHAW M, 1995, IEEE T SOFTWARE ENG, V21, P314, DOI 10.1109/32.385970
   SHIRABAD JS, 2000, INT C SOFTW MAINT IC, P22
   van der Hoek A, 2004, SCI COMPUT PROGRAM, V53, P285, DOI 10.1016/j.scico.2003.04.003
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
   WALLS C, 2003, MANNING PUBLICATIONS
   Werner C, 2003, PROCEEDINGS OF THE 2003 IEEE INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION, P61, DOI 10.1109/IRI.2003.1251396
   WHITEHEAD EJ, 2000, THESIS U CALIFORNIA
   Ying ATT, 2004, IEEE T SOFTWARE ENG, V30, P574, DOI 10.1109/TSE.2004.52
   Zhao JJ, 2002, J SOFTW MAINT EVOL-R, V14, P317, DOI 10.1002/smr.258
   Zimmermann T, 2004, PROC INT CONF SOFTW, P563, DOI 10.1109/ICSE.2004.1317478
NR 37
TC 19
Z9 23
U1 1
U2 8
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD MAR
PY 2008
VL 15
IS 1
BP 75
EP 107
DI 10.1007/s10515-007-0020-6
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 255PS
UT WOS:000252670500004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Can, AB
   Bultan, T
   Lindvall, M
   Lux, B
   Topp, S
AF Can, Aysu Betin
   Bultan, Tevfik
   Lindvall, Mikael
   Lux, Benjamin
   Topp, Stefan
TI Eliminating synchronization faults in air traffic control software via
   design for verification with concurrency controllers
SO AUTOMATED SOFTWARE ENGINEERING
LA English
DT Article; Proceedings Paper
CT 20th International Conference on Automated Software Engineering (ASE
   2005)
CY 2005
CL Long Beach, CA
SP IEEE, ACM
DE model checking; concurrent programming; synchronization; design
   patterns; interfaces
AB The increasing level of automation in critical infrastructures requires development of effective ways for finding faults in safety critical software components. Synchronization in concurrent components is especially prone to errors and, due to difficulty of exploring all thread interleavings, it is difficult to find synchronization faults. In this paper we present an experimental study demonstrating the effectiveness of model checking techniques in finding synchronization faults in safety critical software when they are combined with a design for verification approach. We based our experiments on an automated air traffic control software component called the Tactical Separation Assisted Flight Environment (TSAFE). We first reengineered TSAFE using the concurrency controller design pattern. The concurrency controller design pattern enables a modular verification strategy by decoupling the behaviors of the concurrency controllers from the behaviors of the threads that use them using interfaces specified as finite state machines. The behavior of a concurrency controller is verified with respect to arbitrary numbers of threads using the infinite state model checking techniques implemented in the Action Language Verifier (ALV). The threads which use the controller classes are checked for interface violations using the finite state model checking techniques implemented in the Java Path Finder (JPF). We present techniques for thread isolation which enables us to analyze each thread in the program separately during interface verification. We conducted two sets of experiments using these verification techniques. First, we created 40 faulty versions of TSAFE using manual fault seeding. During this exercise we also developed a classification of faults that can be found using the presented design for verification approach. Next, we generated another 100 faulty versions of TSAFE using randomly seeded faults that were created automatically based on this fault classification. We used both infinite and finite state verification techniques for finding the seeded faults. The results of our experiments demonstrate the effectiveness of the presented design for verification approach in eliminating synchronization faults.
C1 Middle E Tech Univ, Inst Informat, TR-06531 Ankara, Turkey.
   Univ Calif Santa Barbara, Dept Comp Sci, Santa Barbara, CA 93106 USA.
   Fraunhofer Ctr Expt Software Engn, College Pk, MD 20742 USA.
C3 Middle East Technical University; University of California System;
   University of California Santa Barbara
RP Can, AB (corresponding author), Middle E Tech Univ, Inst Informat, TR-06531 Ankara, Turkey.
EM aysu@ii.metu.edu.tr; bultan@cs.ucsb.edu; mikli@fc-md.umd.edu;
   blux@fc-md.umd.edu; stopp@fc-md.umd.edu
RI Betin Can, Aysu/HTN-8580-2023
OI Betin Can, Aysu/0000-0002-4828-0190
CR AMMANN PE, 1998, ICFEM 98 P 2 IEEE IN
   [Anonymous], 1994, Lecture Notes in Computer Science
   BALL T, 2001, P 8 INT SPIN WORKSH, P103
   Betin-Can A, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P248, DOI 10.1109/ASE.2004.1342742
   Betin-Can A., 2005, P 14 INT WORLD WIDE, P750
   BETINCAN A, 2003, P WORKSH SOFTW MOD C, V89
   BETINCAN A, 2001, PROGRAM ANAL ALLEVIA
   BETINCAN A, 2006, HIGHLY DEPENDABLE CO, DOI DOI 10.1007/S00165-006-0017-0
   BUDD AT, 1981, COMPUTER PROGRAM TES, P129
   Bultan T, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P382, DOI 10.1109/ASE.2001.989834
   BULTAN T, 2005, P IFIP WORK C VER SO
   BULTAN T, 2000, P 22 INT C SOFTW ENG
   CARGILL T, 1996, P 16 IEEE INT C AUT
   Chaki S, 2003, PROC INT CONF SOFTW, P385, DOI 10.1109/ICSE.2003.1201217
   CHAKRABARTI A, 2002, P 14 INT C COMP AID, P428
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   Delzanno G., 2000, Computer Aided Verification, V1855, P53
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Dennis G.D., 2003, TSAFE: Building a trusted computing base for air traffic control software
   Do H, 2006, IEEE T SOFTWARE ENG, V32, P733, DOI 10.1109/TSE.2006.92
   *DOT, 1998, AV1998113 ADV AUT SY
   Dwyer MB, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P154, DOI 10.1109/ASE.2004.1342733
   ERZBERGER H, 2001, P USAEUR TRAFF MAN R
   ERZBERGER H, 2004, P 24 INT C AER SCI
   Flanagan C, 2003, LECT NOTES COMPUT SC, V2648, P213
   GODEFROID P, 1998, P 1998 ACM SIGPLAN C, P345
   *IEEE, 1993, IEEE STAND CLASS SOF
   KIM S, 2000, P FMES
   Lea Doug, 1999, Concurrent Programming in Java. Second Edition: Design Principles and Patterns, V2nd
   Linde K, 2001, BMC Complement Altern Med, V1, P3
   LONG B, 2003, P INT PAR DISTR PROC
   MEHLITZ PC, 2003, WORKSH COMP BAS SOFT
   Memon AM, 2005, IEEE T SOFTWARE ENG, V31, P884, DOI 10.1109/TSE.2005.117
   NEUMANN PG, 2004, ACM SOFTWARE ENG, V29, P7
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   SHARYGINA N, 2001, P 4 INT C FUND APPR, P318
   *SOOT, 2005, SOOT JAV OPT FRAM
   Stoller S. D., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P192
   Tkachuk O, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P116, DOI 10.1109/ASE.2003.1240300
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   VISSER W, 2004, P INT S SOFTW TEST
   XIE T, 2005, P 11 INT C ALG CONST
   YAVUZKAHVECI T, 2002, P INT S SOFTW TEST A, P169
   YAVUZKAHVECI T, 2005, P 17 INT C COMP AID, P413
NR 44
TC 11
Z9 12
U1 2
U2 10
PU SPRINGER
PI NEW YORK
PA ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES
SN 0928-8910
EI 1573-7535
J9 AUTOMAT SOFTW ENG
JI Automat. Softw. Eng.
PD JUN
PY 2007
VL 14
IS 2
BP 129
EP 178
DI 10.1007/s10515-007-0008-2
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 212HE
UT WOS:000249586000002
OA Green Submitted
DA 2024-07-18
ER

EF