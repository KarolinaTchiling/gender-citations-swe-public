FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Ganser, A
   Lichter, H
   Roth, A
   Rumpe, B
AF Ganser, Andreas
   Lichter, Horst
   Roth, Alexander
   Rumpe, Bernhard
TI Staged model evolution and proactive quality guidance for model
   libraries
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE UML; Model; Evolution; Quality; Libraries
ID UML; ENVIRONMENT; DESIGN
AB A variety of modeling approaches, including model-driven development, consider model reuse as one of their cornerstones, but lack support for model reuse. This may be due to the available model repositories that barely exceed support for enhanced versioning or collaborative work and disregard model evolution. We believe that current model evolution approaches do not consider reuse sufficiently and that model repositories for reuse purposes should act as model libraries. This requires new functionality, because models for reuse need to achieve and maintain high quality. Moreover, quality assessment and assurance, which are tasks often considered tedious, need to be as simple as putting away or maintaining artifacts for reuse. In this study, we propose an approach for model evolution in UML model libraries that differs from general model evolution, since it is aimless and triggered by new external requirements. Our approach is founded on graphs that are partitioned into three stages with respect to the level of reusability. Each stage is defined by quality characteristics that are manifestations of a quality model consisting of four essential quality dimensions: syntactic, semantic, pragmatic, and emotional. In order to achieve the next level of reusability, i.e., change the stage of a model, a quality gate needs to be passed. This can be supported by a proactive approach that guides the modeler through the enhancement process and offers additional recommendations based on the level of reusability. Since guidance cannot be fully automated, we implement a review mechanism founded on the idea of the six thinking hats to help maintain focus on the main aspects of a review. Finally, our approach is enhanced to support the evolution of generations, i.e., a group of several model snapshots, to ease reusability.
C1 [Ganser, Andreas; Lichter, Horst] Rhein Westfal TH Aachen, Software Construct, Ahornstr 55, D-52074 Aachen, Germany.
   [Roth, Alexander; Rumpe, Bernhard] Rhein Westfal TH Aachen, Software Engn, Ahornstr 55, D-52074 Aachen, Germany.
C3 RWTH Aachen University; RWTH Aachen University
RP Ganser, A (corresponding author), Rhein Westfal TH Aachen, Software Construct, Ahornstr 55, D-52074 Aachen, Germany.
EM ganser@swc.rwth-aachen.de; lichter@swc.rwth-aachen.de;
   roth@se.rwth-aachen.de; rumpe@se.rwth-aachen.de
RI Rumpe, Bernhard/S-8216-2016
OI Rumpe, Bernhard/0000-0002-2147-1966; Lichter, Horst/0000-0002-3440-1238
CR Allilaire F., 2006, LECT NOTES COMPUTER, V4067
   Altmanninger K., 2008, 1 INT WORKSH MOD COE, P1
   [Anonymous], 2012, AGILE MODELLIERUNG U
   [Anonymous], 2006, SOFTWARE EVOLUTION F
   Arendt T., 2010, P 9 BELG NETH SOFTW
   Arendt T., 2012, 5 WORKSH REF TOOLS W
   Arendt T, 2013, AUTOMAT SOFTW ENG, V20, P141, DOI 10.1007/s10515-012-0114-7
   Astels D., 2002, P INT C EXTREME PROG, P67
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Bascianidi F., 2014, MDEFORGE EXTENSIBLE
   Belaunde M, 1999, LECT NOTES COMPUT SC, V1723, P188
   Bézivin J, 2005, LECT NOTES COMPUT SC, V3599, P33
   Biehl M., 2010, THESIS KTH STOCKHOLM
   Boger M, 2003, LECT NOTES COMPUT SC, V2591, P366
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Bono E.d., 1999, Six Thinking Hats
   Briand LC, 2006, J SYST SOFTWARE, V79, P339, DOI 10.1016/j.jss.2005.05.001
   Brosch P, 2009, LECT NOTES COMPUT SC, V5795, P271, DOI 10.1007/978-3-642-04425-0_20
   Chaudron MRV, 2012, SOFTW SYST MODEL, V11, P571, DOI 10.1007/s10270-012-0278-4
   Dantas CR, 2005, Eighth International Workshop on Principles of Software Evolution, Proceedings, P144
   DeRemer F., 1975, SIGPLAN Notices, V10, P114, DOI 10.1145/390016.808431
   Dreyfus H. L., 1980, A five-stage model of mental activities involved in directed skill acquisition
   Dyck A., 2013, MDEBE, P12
   Dyck A, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P282
   Eclipse Foundation, 2014, COD REC
   Eclipse Foundation, 2014, MODISCO
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   Embley DW, 2011, HANDBOOK OF CONCEPTUAL MODELING: THEORY, PRACTICE AND RESEARCH CHALLENGES, P1, DOI 10.1007/978-3-642-15865-0
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Felfernig A, 2011, RECOMMENDER SYSTEMS HANDBOOK, P187, DOI 10.1007/978-0-387-85820-3_6
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   France R., 2006, Models in Software Engineering. Workshops and Symposia at MoDELS 2006. Reports and Revised Selected Papers (Lecture Notes in Computer Science Vol.4364), P311
   Ganser Andreas, 2013, MODELSWARD 2013. 1st International Conference on Model-Driven Engineering and Software Development. Proceedings, P135
   Ganser A., 2014, HERMES PROJECT HARVE
   Ganser A., 2014, HERMES PROJECT DEMO
   Ganser A., 2013, ME 2013 MODELS EVOLU, P50
   Ganser A., 2014, HERMES PROJECT ECLIP
   Garg A., 1995, Graph Drawing. DIMACS International Workshop, GD'94. Proceedings, P286
   Genero M, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P195, DOI 10.1109/ISESE.2002.1166940
   Golbandi N, 2010, P 19 ACM INT C INF K, P1805, DOI DOI 10.1145/1871437.1871734
   Herrmannsdoerfer M, 2011, LECT NOTES COMPUT SC, V6563, P163, DOI 10.1007/978-3-642-19440-5_10
   Herrmannsdoerfer M, 2010, LECT NOTES COMPUT SC, V6002, P205
   Herrmannsdorfer M., 2011, EVOLUTIONARY METAMOD
   Judson Sr, 2004, IEEE INT C ENG COMP, P128, DOI 10.1109/ICECCS.2004.1310911
   Keienburg F., 2001, Proceedings of the 34th Annual Hawaii International Conference on System Sciences, DOI 10.1109/HICSS.2001.927259
   Kim H., 2002, OBJ OR TECHN ECOOP 2, V2548
   Koegel M., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P307, DOI 10.1145/1810295.1810364
   Kogel M., 2011, OPERATION BASED MODE
   Lange C. F. J., 2006, 28th International Conference on Software Engineering Proceedings, P993, DOI 10.1145/1134285.1134472
   Lange C.F. J., 2007, Proceedings of the 40th Annual Hawaii International Conference on System Sciences (HICSS 2007), P289, DOI [DOI 10.1109/HICSS.2007.44, 10.1109/HICSS.2007.44]
   Lange CFJ, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P327
   Lange CFJ, 2006, 13TH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P7
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Levendovszky T, 2010, LECT NOTES COMPUT SC, V6100, P241, DOI 10.1007/978-3-642-16277-0_9
   LINDLAND OI, 1994, IEEE SOFTWARE, V11, P42, DOI 10.1109/52.268955
   Lucrédio D, 2012, SOFTW SYST MODEL, V11, P183, DOI 10.1007/s10270-010-0167-7
   McQuillan J. A., 2006, Models in Software Engineering. Workshops and Symposia at MoDELS 2006. Reports and Revised Selected Papers (Lecture Notes in Computer Science Vol.4364), P217
   Melnik Sergey, 2004, Lecture Notes in Computer Science, V2967
   Mens T, 1999, LECT NOTES COMPUT SC, V1618, P378
   Mens T., 2000, Automated Software Engineering, V7, P39, DOI 10.1023/A:1008765200695
   Mens T., 2003, LECT NOTES COMPUTER, V3031
   Mohagheghi P, 2009, WOSQ: 2009 ICSE WORKSHOP ON SOFTWARE QUALITY, P39, DOI 10.1109/WOSQ.2009.5071555
   Moody DL, 2005, DATA KNOWL ENG, V55, P243, DOI 10.1016/j.datak.2004.12.005
   Murta L, 2007, SCI COMPUT PROGRAM, V65, P249, DOI 10.1016/j.scico.2006.05.011
   Rajlich V, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P84, DOI 10.1109/ICSM.1997.624234
   Ramirez A., 2004, ARGOUML USER MANUAL
   Ricci F, 2011, RECOMMENDER SYSTEMS HANDBOOK, P1, DOI 10.1007/978-0-387-85820-3_1
   Roth A., 2012, THESIS
   Roth A., 2013, METRICS MAPPING SOUR
   Rothman A., 2013, Pathogenesis of Dengue Infection, P1
   Segal J, 2004, ELEVENTH ANNUAL INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P40
   Stachowiak H., 1973, ALLGEMEINE MODELLTHE
   Steinberg D., 2008, THE ECLIPSE SERIES
   Strüber D, 2014, LECT NOTES COMPUT SC, V8411, P47
   Sun Y, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P980, DOI 10.1145/1985793.1985966
   Sun Y, 2009, LECT NOTES COMPUT SC, V5795, P712, DOI 10.1007/978-3-642-04425-0_58
   Swanson E. B., 1976, 2nd International Conference on Software Engineering, P492
   Ujhelyi Z, 2015, SCI COMPUT PROGRAM, V98, P80, DOI 10.1016/j.scico.2014.01.004
   Van Deursen A., 2007, MODEL DRIVEN SOFTWAR
   van Enckevort T, 2009, P 24 ACM SIGPLAN C C
   Voigt K., 2011, STRUCTURAL GRAPH BAS
   Wedemeijer L., 2001, Database Schema Evolution and Meta-Modeling. 9th International Workshop on Foundations of Models and Languages for Data and Objects FoMLaDO/DEMM 2000. Selected Papers (Lecture Notes in Computer Science Vol.2065), P220
   Weimer Markus, 2009, P 3 ACM C REC SYST, P309
   Wenzel Sven, 2007, 2007 IEEE International Conference on Software Maintenance, P104, DOI 10.1109/ICSM.2007.4362623
   Wust J, 2014, SDMETRICS SOFTWARE D
NR 85
TC 1
Z9 1
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 675
EP 708
DI 10.1007/s11219-015-9298-y
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400010
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Meliá, S
   Cachero, C
   Hermida, JM
   Aparicio, E
AF Melia, Santiago
   Cachero, Cristina
   Hermida, Jesus M.
   Aparicio, Enrique
TI Comparison of a textual versus a graphical notation for the
   maintainability of MDE domain models: an empirical pilot study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE MDE; Maintainability; Analysability; Modifiability; Quasi-experiment;
   Notations
ID UML
AB Models are a useful tool to increase the developer's productivity and satisfaction when performing maintenance tasks. However, in order to maximise these advantages, the right selection of notations must be made. Unfortunately, the software engineering field lacks a body of empirical evidence that supports such selection. A suboptimal decision in this regard may have negative consequences over the maintenance process. The aim of the study was to compare a textual and a graphical notation with respect to the efficiency, effectiveness and satisfaction of junior software developers while performing analysability and modifiability tasks on two different applications. We have carried out a quasi-experiment with 86 third-year students of the Computer Engineering degree at the University of Alicante. Subjects were randomly classified into two groups, and each group performed 20 maintenance tasks with a textual and a graphical notation. We measured and compared the efficiency, effectiveness and satisfaction of subjects assigned to each treatment. The analysed data show that only the actual analysability coverage (AACov) and the actual modifiability efficiency (AMEffc) are affected by the type of notation used, regardless of the application. In both cases, subjects using the textual notation performed significantly better, although the effect size was low to moderate (AACov , AMEffc ). This is a pilot study, and it has been conducted to enhance the design of future studies in this area. Thus, it should be replicated to extend our conclusions to other subject profiles, different textual and graphical notations, and application types.
C1 [Melia, Santiago; Cachero, Cristina] Univ Alicante, DLSI, St Vicent Del Raspeig, Spain.
   [Hermida, Jesus M.] European Commiss, Joint Res Ctr, Ispra, Italy.
   [Aparicio, Enrique] Univ Alicante, St Vicent Del Raspeig, Spain.
C3 Universitat d'Alacant; European Commission Joint Research Centre; EC JRC
   ISPRA Site; Universitat d'Alacant
RP Meliá, S (corresponding author), Univ Alicante, DLSI, St Vicent Del Raspeig, Spain.
EM santi@dlsi.ua.es; ccachero@dlsi.ua.es; jesus.hermida@jrc.ec.europa.eu;
   eac9@alu.ua.es
RI Castro, Cristina Cachero/AAC-2213-2019; Meliá, Santiago/AAT-3532-2021
OI Castro, Cristina Cachero/0000-0001-6281-8287; Meliá,
   Santiago/0000-0003-3782-6626
CR Anda B, 2006, EMPIR SOFTW ENG, V11, P555, DOI 10.1007/s10664-006-9020-6
   Angyal L, 2009, EUROCON 2009: INTERNATIONAL IEEE CONFERENCE DEVOTED TO THE 150 ANNIVERSARY OF ALEXANDER S. POPOV, VOLS 1- 4, PROCEEDINGS, P420, DOI 10.1109/EURCON.2009.5167666
   [Anonymous], 2011, 25010 ISOIEC FCD
   [Anonymous], 4 INT WORKSH SOFTW L
   Blackwell A., 2003, HCI MODELS THEORIES, P103, DOI [DOI 10.1016/B978-155860808-5/50005-8, 10.1016/B978-155860808-5/50005-8]
   Chapin N, 2001, J SOFTW MAINT EVOL-R, V13, P3, DOI 10.1002/smr.220
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cohen J., 1992, Current Directions in Psychological Science, V1, P98, DOI [DOI 10.1111/1467-8721.EP10768783, 10.1111/1467-8721.ep10768783]
   Cook T. D., 1979, QUASIEXPERIMENTATION
   Dzidek WJ, 2008, IEEE T SOFTWARE ENG, V34, P407, DOI 10.1109/TSE.2008.15
   Manso ME, 2009, LECT NOTES COMPUT SC, V5421, P303, DOI 10.1007/978-3-642-01648-6_32
   Evans E., 2011, DOMAIN DRIVEN DESIGN
   Faul F, 2007, BEHAV RES METHODS, V39, P175, DOI 10.3758/BF03193146
   Forward A., 2010, CONVERGENCE MODELING
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jouault F., 2006, 5 INT C GEN PROGR CO, P249, DOI DOI 10.1145/1173706.1173744
   Kampenes VB, 2009, INFORM SOFTWARE TECH, V51, P71, DOI 10.1016/j.infsof.2008.04.006
   Kosar T, 2012, EMPIR SOFTW ENG, V17, P276, DOI 10.1007/s10664-011-9172-x
   Kosar T, 2010, COMPUT SCI INF SYST, V7, P247, DOI 10.2298/CSIS1002247K
   KOSSLYN SM, 1977, COGNITIVE PSYCHOL, V9, P52, DOI 10.1016/0010-0285(77)90004-4
   Leotta M, 2013, PROC IEEE INT CONF S, P428, DOI 10.1109/ICSM.2013.64
   Leung Felix., 2005, P P 38 ANN HAWAII IN, V7, P188
   Littell RamonC., 2006, SAS for Mixed Models
   Martínez Y, 2014, EMPIR SOFTW ENG, V19, P1887, DOI 10.1007/s10664-013-9269-5
   Martínez Y, 2013, INFORM SOFTWARE TECH, V55, P189, DOI 10.1016/j.infsof.2012.07.004
   Melia Santiago, 2008, 2008 8th International Conference on Web Engineering (ICWE), P13, DOI 10.1109/ICWE.2008.36
   Melia S., 2009, JISBD, P219
   Mellegård N, 2010, LECT NOTES COMPUT SC, V6156, P336, DOI 10.1007/978-3-642-13792-1_26
   Mohagheghi P, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P7
   Mohagheghi P., 2007, International Workshop on Modeling in Software Engineering, P6, DOI DOI 10.1109/MISE.2007.6
   Moody D. L., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P485, DOI 10.1145/1810295.1810442
   Moody DL, 2003, PROC INT CONF SOFTW, P295
   Myers B. A., 1990, Journal of Visual Languages and Computing, V1, P97, DOI 10.1016/S1045-926X(05)80036-9
   Norman G, 2010, ADV HEALTH SCI EDUC, V15, P625, DOI 10.1007/s10459-010-9222-y
   Norusis M.J., 2010, PASW statistics 18 guide to data analysis
   Nunnally JC, 1978, PSYCHOMETRIC THEORY
   Object Management Group (OMG), 2004, UML HUM US TEXT NOT
   Perry DE., 2000, P C FUT SOFTW ENG, P345, DOI DOI 10.1145/336512.336586
   PETRE M, 1995, COMMUN ACM, V38, P33, DOI 10.1145/203241.203251
   Scanniello G., 2010, P 2010 ACM IEEE INT, P52
   Scanniello G, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2491912
   SPOHRER JC, 1986, COMMUN ACM, V29, P624, DOI 10.1145/6138.6145
   VESSEY I, 1991, DECISION SCI, V22, P219, DOI 10.1111/j.1540-5915.1991.tb00344.x
   Volter M., 2013, MODEL DRIVEN SOFTWAR
   Zelkowitz MV, 2009, J SYST SOFTWARE, V82, P373, DOI 10.1016/j.jss.2008.06.040
NR 48
TC 24
Z9 25
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 709
EP 735
DI 10.1007/s11219-015-9299-x
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400011
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Grbac, TG
   Car, Z
   Huljenic, D
AF Grbac, Tihana Galinac
   Car, Zeljka
   Huljenic, Darko
TI A quality cost reduction model for large-scale software development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality cost; Verification; Control model; Fault detection; Large-scale
   software
ID REPLICATED QUANTITATIVE-ANALYSIS; FAULT DISTRIBUTIONS; INSPECTION
AB Understanding quality costs is recognized as a prerequisite for decreasing the variability of the success of software development projects. This paper presents an empirical quality cost reduction (QCR) model to support the decision-making process for additional investment in the early phases of software verification. The main idea of the QCR model is to direct additional investment into software units that have some fault-slip potential in their later verification phases, with the aim of reducing costs and increasing product quality. The fault-slip potential of a software unit within a system is determined by analogy with historical projects. After a preliminary study on a sample of software units, which proves that we can lower quality costs with additional investment into particular verification activities, we examine the effectiveness of the proposed QCR model using real project data. The results show that applying the model produces a positive business case, meaning that the model lowers quality costs and increases quality, resulting in economic benefit. The potential to reduce quality costs is growing significantly with the evolution of software systems and the reuse of their software units. The proposed model is the result of a research project performed at Ericsson.
C1 [Grbac, Tihana Galinac] Univ Rijeka, Fac Engn, Rijeka 51000, Croatia.
   [Car, Zeljka] Univ Zagreb, Fac Elect Engn & Comp, Zagreb 41000, Croatia.
   [Huljenic, Darko] Ericsson Nikola Tesla, Zagreb 10000, Croatia.
C3 University of Rijeka; University of Zagreb; Ericsson
RP Grbac, TG (corresponding author), Univ Rijeka, Fac Engn, Vukovarska 58, Rijeka 51000, Croatia.
EM tihana.galinac@riteh.hr
RI Galinac Grbac, Tihana/D-7048-2016; Grbac, Tihana Galinac/K-2439-2019;
   Huljenic, Darko/ADM-2763-2022; Grbac, Tihana Galinac/AAU-8704-2021
OI Galinac Grbac, Tihana/0000-0002-4351-4082; 
FU University of Rijeka [13.09.2.2.16]
FX The first author is partially supported by the University of Rijeka
   research grant 13.09.2.2.16.
CR Andersson C, 2007, IEEE T SOFTWARE ENG, V33, P273, DOI 10.1109/TSE.2007.1005
   Biffl S., 2006, Value-Based Software Engineering
   Boehm B., 1997, COCOMO II model definition manual
   Boehm BW., 1981, Software Engineering Economics
   Breyfogle FW., 1999, IMPLEMENTING 6 SIGMA, V2nd
   Campanella J., 1999, PRINCIPLES QUALITY C, V3rd
   Crosby P.B., 1996, QUALITY IS STILL FRE
   Damm LO, 2008, J SYST SOFTWARE, V81, P1968, DOI 10.1016/j.jss.2008.01.017
   Damm LO, 2004, LECT NOTES COMPUT SC, V3281, P138
   Deissenboeck F, 2009, WOSQ: 2009 ICSE WORKSHOP ON SOFTWARE QUALITY, P9, DOI 10.1109/WOSQ.2009.5071551
   Deming W. E., 1986, OUT CRISIS
   Ebenau R., 1994, Software Inspection Process
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Fenton E. N., 1998, SOFTWARE METRICS RIG
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Galinac T, 2007, LECT NOTES COMPUT SC, V4589, P51
   Gondra I, 2008, J SYST SOFTWARE, V81, P186, DOI 10.1016/j.jss.2007.05.035
   Grbac TG, 2012, IET SOFTW, V6, P249, DOI 10.1049/iet-sen.2011.0104
   Grbac TG, 2013, IEEE T SOFTWARE ENG, V39, P462, DOI 10.1109/TSE.2012.46
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Jorgensen M, 2009, IEEE SOFTWARE, V26, P14, DOI 10.1109/MS.2009.47
   Juran J.Godfrey., 1999, Quality handbook
   Karg LM, 2011, J SYST SOFTWARE, V84, P415, DOI 10.1016/j.jss.2010.11.904
   Khoshgoftaar TM, 2001, SOFTWARE QUAL J, V9, P9, DOI 10.1023/A:1016621219262
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Musa J. D., 1987, Software Reliability: Measure-ment, Prediction, Application
   Provost F., 2000, P LEARN IMB DAT SETS
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   Siy H, 2001, PROC IEEE INT CONF S, P281, DOI 10.1109/ICSM.2001.972741
   Slaughter SA, 1998, COMMUN ACM, V41, P67, DOI 10.1145/280324.280335
   Tosun A., 2009, P 5 INT C PRED MOD S, P1, DOI DOI 10.1145/1540438.1540446
   Villalba MT, 2010, IET SOFTW, V4, P1, DOI 10.1049/iet-sen.2009.0040
   Westland JC, 2004, DECIS SUPPORT SYST, V37, P229, DOI 10.1016/S0167-9236(03)00020-4
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
   Zimmermann T, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P531, DOI 10.1145/1368088.1368161
NR 35
TC 6
Z9 7
U1 0
U2 23
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2015
VL 23
IS 2
BP 363
EP 390
DI 10.1007/s11219-014-9240-8
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE2SN
UT WOS:000351667700006
DA 2024-07-18
ER

PT J
AU Ouni, A
   Kessentini, M
   Bechikh, S
   Sahraoui, H
AF Ouni, Ali
   Kessentini, Marouane
   Bechikh, Slim
   Sahraoui, Houari
TI Prioritizing code-smells correction tasks using chemical reaction
   optimization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Search-based software engineering; Refactoring, software quality;
   Code-smells; Chemical reaction optimization
AB The presence of code-smells increases significantly the cost of maintenance of systems and makes them difficult to change and evolve. To remove code-smells, refactoring operations are used to improve the design of a system by changing its internal structure without altering the external behavior. In large-scale systems, the number of code-smells to fix can be very large and not all of them can be fixed automatically. Thus, the prioritization of the list of code-smells is required based on different criteria such as the risk and importance of classes. However, most of the existing refactoring approaches treat the code-smells to fix with the same importance. In this paper, we propose an approach based on a chemical reaction optimization metaheuristic search to find the suitable refactoring solutions (i.e., sequence of refactoring operations) that maximize the number of fixed riskiest code-smells according to the maintainer's preferences/criteria. We evaluate our approach on five medium- and large-sized open-source systems and seven types of code-smells. Our experimental results show the effectiveness of our approach compared to other existing approaches and three different others metaheuristic searches.
C1 [Ouni, Ali; Sahraoui, Houari] Univ Montreal, DIRO, GEODES Lab, Montreal, PQ, Canada.
   [Ouni, Ali; Kessentini, Marouane; Bechikh, Slim] Univ Michigan, SBSE Michigan Lab, CIS, Ann Arbor, MI 48109 USA.
C3 Universite de Montreal; University of Michigan System; University of
   Michigan
RP Ouni, A (corresponding author), Univ Montreal, DIRO, GEODES Lab, Montreal, PQ, Canada.
EM ouniali@iro.umontreal.ca; marouane@umich.edu; slimb@umich.edu;
   sahraouh@iro.umontreal.ca
RI Ouni, Ali/Y-8280-2019; Bechikh, Slim/AAF-6435-2020
OI Ouni, Ali/0000-0003-4708-0362; Bechikh, Slim/0000-0003-1378-7415
CR AL BA E., 2005, P 6 MET INT C MIC 05, P13
   Alikacem H., 2006, ACT 12 C LMO
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], SOFTWARE TESTING VER
   [Anonymous], 2010, 2010 IEEE International Conference on Software Maintenance, DOI [10.1109/ICSM.2010.5609564, DOI 10.1109/ICSM.2010.5609564]
   [Anonymous], THESIS
   [Anonymous], 2012, INFUSION HYDROGEN DE
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Canfora G, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1069
   Cederqvist P., 2003, Version Management with CVS
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cinnéide MO, 2012, INT SYMP EMP SOFTWAR, P49, DOI 10.1145/2372251.2372260
   Cohen J., 1988, STAT POWER ANAL BEHA
   de Freitas FG, 2011, LECT NOTES COMPUT SC, V6956, P18, DOI 10.1007/978-3-642-23716-4_5
   Du Bois B, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P144, DOI 10.1109/WCRE.2004.33
   Erlikh L., 2000, IT Professional, V2, P17, DOI 10.1109/6294.846201
   Fatiregun D, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P65
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Fraser G, 2013, SOFTW TEST VERIF REL, V23, P553, DOI 10.1002/stvr.1495
   Glover F., 1998, Tabu Search
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1106
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Jensen A., 2010, P GECCO ACM JUL 2010
   Jiageng Yu, 2012, 2012 International Conference on Software Security and Reliability Companion, P1, DOI 10.1109/SERE-C.2012.26
   Joshi P, 2009, EUR CON SFTWR MTNCE, P237, DOI 10.1109/CSMR.2009.54
   Jourdan L, 2009, EUR J OPER RES, V199, P620, DOI 10.1016/j.ejor.2007.07.035
   Kataoka Y, 2001, PROC IEEE INT CONF S, P736, DOI 10.1109/ICSM.2001.972794
   Kennedy J, 1995, 1995 IEEE INTERNATIONAL CONFERENCE ON NEURAL NETWORKS PROCEEDINGS, VOLS 1-6, P1942, DOI 10.1109/icnn.1995.488968
   Kessentini M., 2010, P INT C AUT SOFTW EN
   Kessentini M, 2011, CONF PROC INT SYMP C, P81, DOI 10.1109/ICPC.2011.22
   Khomh F., 2009, P ICQS 09
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   Kilic H, 2011, LECT NOTES COMPUT SC, V6956, P271, DOI 10.1007/978-3-642-23716-4_26
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Lam AYS, 2013, IEEE T EVOLUT COMPUT, V17, P605, DOI 10.1109/TEVC.2012.2227973
   Lam AYS, 2012, IEEE T EVOLUT COMPUT, V16, P339, DOI 10.1109/TEVC.2011.2161091
   Lam AYS, 2012, IEEE CONF COMPUT, P85, DOI 10.1109/INFCOMW.2012.6193525
   Lam AYS, 2010, IEEE T EVOLUT COMPUT, V14, P381, DOI 10.1109/TEVC.2009.2033580
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Martin R. C., 2008, Clean Code: A Handbook of Agile Software Craftsmanship
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Moha N, 2008, P 4 INT C FORM CONC
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Munro M.J, 2005, P 11 INT SOFTW METR
   O'Keeffe M., 2006, J SYST SOFTWARE, V81, P502
   Olbrich S, 2009, INT SYMP EMP SOFTWAR, P391
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Otero F. E. B., 2010, SEARCH BAS SOFTW ENG
   Ouni A., 2013, P 17 EUR C SOFTW MAI
   Ouni A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P347, DOI 10.1109/ICSM.2012.6405292
   Ouni A, 2013, AUTOMAT SOFTW ENG, V20, P47, DOI 10.1007/s10515-011-0098-8
   Prete K, 2010, PROC IEEE INT CONF S
   Qayum F, 2009, 1ST INTERNATIONAL SYMPOSIUM ON SEARCH BASED SOFTWARE ENGINEERING, PROCEEDINGS, P43, DOI 10.1109/SSBSE.2009.27
   Ratiu D, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P223
   Riel AJ., 1996, Object-Oriented Design Heuristics
   Roberts D., 1999, THESIS
   Sahraoui HA, 2000, PROC IEEE INT CONF S, P154, DOI 10.1109/ICSM.2000.883034
   Seng O, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1909
   Sun Y., 2012, P IEEE C EV COMP CEC, P1, DOI DOI 10.1109/CEC.2012.6253003
   Tahvildari L, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P183, DOI 10.1109/CSMR.2003.1192426
   Tsantalis N, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P329
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   Xu J, 2011, IEEE T PARALL DISTR, V22, P1624, DOI 10.1109/TPDS.2011.35
   Zhang Y, 2008, LECT NOTES COMPUT SC, V5025, P88, DOI 10.1007/978-3-540-69062-7_8
NR 69
TC 35
Z9 37
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2015
VL 23
IS 2
BP 323
EP 361
DI 10.1007/s11219-014-9233-7
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE2SN
UT WOS:000351667700005
DA 2024-07-18
ER

PT J
AU Ullah, N
AF Ullah, Najeeb
TI A method for predicting open source software residual defects
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Open source software; Software reliability; Software reliability models;
   Software reliability growth models; Software selection
ID RELIABILITY-GROWTH; MODELS
AB Nowadays many commercial projects use open source applications or components (OSS). A recurring problem is therefore the selection of the most appropriate OSS for a project. A relevant criterion for selection is the reliability of the OSS. In this paper, we propose a method that selects the software reliability growth model (SRGM), which among several alternative models best predicts the reliability of the OSS, in terms of residual defects. Several methods exist for predicting residual defects in software, and a widely used method is SRGM. SRGM has underlying assumptions, which are often violated in practice, but empirical evidence has shown that many models are quite robust despite these assumption violations. However, within the SRGM family, many models are available, and it is often difficult to know which models are better to apply in a given context. We present an empirical method that applies various SRGMs iteratively on OSS defect data and selects the model which best predicts the residual defects of the OSS. We empirically validate the method by applying it to defect data collected from 21 different releases of 7 OSS projects. The results show that the method helps in selecting the best model among several alternative models. The method selects the best model 17 times out of 21. In the remaining 4, it selects the second best model.
C1 CECOS Univ IT & Emerging Sci, Peshawar, Kpk, Pakistan.
RP Ullah, N (corresponding author), CECOS Univ IT & Emerging Sci, Peshawar, Kpk, Pakistan.
EM najeeb.ullah@polito.it
RI Khan, Najeeb/H-5018-2019
OI Khan, Najeeb/0000-0003-3464-2135
CR ABDELGHALY AA, 1986, IEEE T SOFTWARE ENG, V12, P950, DOI 10.1109/TSE.1986.6313050
   [Anonymous], 1996, HDB SOFTWARE RELIABI
   [Anonymous], 16332008 IEEE
   Basili V.R., 1994, Encyclopedia of Software Engineering, P528532
   BROCKLEHURST S, 1990, IEEE T SOFTWARE ENG, V16, P458, DOI 10.1109/32.54297
   Brown S, 2004, IEE REVIEW, V50, P48
   Farber D., 2004, Six barriers to open source adoption
   Fenhzong Z., 2008, 19 AUSTR C SOFTW ENG
   Gaudoin O, 2003, IEEE T RELIAB, V52, P69, DOI 10.1109/TR.2002.805784
   GOEL AL, 1985, IEEE T SOFTWARE ENG, V11, P1411, DOI 10.1109/TSE.1985.232177
   Khoshgoftaar T.M., 1988, 8 S COMP STAT COMPST, P13
   Khoshgoftaar TM, 1989, P 27 ANN S E REG ACM, P419
   Khoshogoftaar TM., 1991, Proceedings of the international symposium on software reliability Engineering, P183
   LEE W, 2008, SECURE SYSTEM INTEGR, P226
   Li P., 2005, CMUISRI0512
   Li X, 2011, INFORM SOFTWARE TECH, V53, P929, DOI 10.1016/j.infsof.2011.04.005
   LYU MR, 1992, PROCEEDINGS OF THE FIFTH INTERNATIONAL WORKSHOP ON COMPUTER-AIDED SOFTWARE ENGINEERING, P264, DOI 10.1109/CASE.1992.200165
   Musa J.D., 1983, Proceedings of the Seventh International Conference on Software Engineering, Los Alamitos, Calif, P230
   Musa J. D., 1987, Software Reliability: Measure-ment, Prediction, Application
   Pham H, 2003, EUR J OPER RES, V149, P475, DOI 10.1016/S0377-2217(02)00498-8
   Rahmani Cobra, 2010, Journal of Software, V5, P1384, DOI 10.4304/jsw.5.12.1384-1394
   Rossi B, 2010, IFIP ADV INF COMM TE, V319, P268
   SCHICK GJ, 1978, IEEE T SOFTWARE ENG, V4, P104, DOI 10.1109/TSE.1978.231481
   Sharma K, 2010, IEEE T RELIAB, V59, P266, DOI 10.1109/TR.2010.2048657
   Stringfellow C., 2002, Empirical Software Engineering, V7, P319, DOI 10.1023/A:1020515105175
   STRINGFELLOW C, 2000, THESIS COLORADO STAT
   SUKERT AN, 1979, IEEE T RELIAB, V28, P199, DOI 10.1109/TR.1979.5220565
   Syed-Mohamad Sharifah Mashita, 2008, 2008 International Conference on Computer Science and Software Engineering (CSSE 2008), P662, DOI 10.1109/CSSE.2008.1085
   Ullah N, 2012, ASIA PAC SOFWR ENG, P356, DOI 10.1109/APSEC.2012.80
   Ullah N, 2012, IEEE ANNU SOFTW ENG, P187, DOI 10.1109/SEW.2012.26
   Wang WL, 2006, J SYST SOFTWARE, V79, P132, DOI 10.1016/j.jss.2005.09.004
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Xie M., 1991, SOFTWARE RELIABILITY
   ZEEPHONGSEKUL P, 1994, IEEE T RELIAB, V43, P408, DOI 10.1109/24.326435
   Zeng JT, 2010, 2010 THIRD INTERNATIONAL SYMPOSIUM ON INTELLIGENT INFORMATION TECHNOLOGY AND SECURITY INFORMATICS (IITSI 2010), P558, DOI 10.1109/IITSI.2010.90
   Zhou Y., 2005, ACM SIGSOFT SOFTWARE, V30, P1
NR 36
TC 10
Z9 11
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2015
VL 23
IS 1
BP 55
EP 76
DI 10.1007/s11219-014-9229-3
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC4TB
UT WOS:000350345400004
DA 2024-07-18
ER

PT J
AU Braione, P
   Denaro, G
   Mattavelli, A
   Vivanti, M
   Muhammad, A
AF Braione, Pietro
   Denaro, Giovanni
   Mattavelli, Andrea
   Vivanti, Mattia
   Muhammad, Ali
TI Software testing with code-based test generators: data and lessons
   learned from a case study with an industrial software component
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Structural testing; Automatic test generation; Experimental study
ID SYMBOLIC EXECUTION
AB Automatically generating effective test suites promises a significant impact on testing practice by promoting extensively tested software within reasonable effort and cost bounds. Code-based test generators rely on the source code of the software under test to identify test objectives and to steer the test case generation process accordingly. Currently, the most mature proposals on this topic come from the research on random testing, dynamic symbolic execution, and search-based testing. This paper studies the effectiveness of a set of state-of-the-research test generators on a family of industrial programs with nontrivial domain-specific peculiarities. These programs are part of a software component of a real-time and safety-critical control system and integrate in a control task specified in LabVIEW, a graphical language for designing embedded systems. The result of this study enhances the available body of knowledge on the strengths and weaknesses of test generators. The empirical data indicate that the test generators can truly expose subtle (previously unknown) bugs in the subject software and that there can be merit in using different types of test generation approaches in a complementary, even synergic fashion. Furthermore, our experiment pinpoints the support for floating point arithmetics and nonlinear computations as a major milestone in the path to exploiting the full potential of the prototypes based on symbolic execution in industry.
C1 [Braione, Pietro; Denaro, Giovanni] Univ Milano Bicocca, I-20126 Milan, Italy.
   [Mattavelli, Andrea; Vivanti, Mattia] Univ Svizzera Italiana, CH-6900 Lugano, Switzerland.
   [Muhammad, Ali] VTT Tech Res Ctr Finland, Tampere, Finland.
C3 University of Milano-Bicocca; Universita della Svizzera Italiana; VTT
   Technical Research Center Finland
RP Braione, P (corresponding author), Univ Milano Bicocca, Viale Sarca 336, I-20126 Milan, Italy.
EM braione@disco.unimib.it; denaro@disco.unimib.it;
   andrea.mattavelli@usi.ch; mattia.vivanti@usi.ch; ali.muhammad@vtt.fi
RI Muhammad, Ali/AGC-8893-2022; Braione, Pietro/P-4323-2014
OI Muhammad, Ali/0009-0004-6656-3639; Braione, Pietro/0000-0001-9307-6781;
   DENARO, GIOVANNI/0000-0002-7566-8051
FU European Community [PINCETTE 257647]
FX This work is partially supported by the European Community under the
   call FP7-ICT-2009-5-project PINCETTE 257647.
CR Anand S, 2007, LECT NOTES COMPUT SC, V4424, P134
   [Anonymous], 2006, YICES SMT SOLVER
   [Anonymous], 2006, P 13 ACM C COMPUTER
   [Anonymous], 2007, Software testing and analysis-process, principles and techniques
   Artzi Shay., 2008, P 2008 INT S SOFTWAR, P261, DOI [10.1145/1390630.1390662, DOI 10.1145/1390630.1390662]
   Ball T, 2003, MSRTR200386 MICR COR
   BALUDA M, 2010, P 5 INT WORKSH AUT S
   Baluda M, 2011, SOFTWARE QUAL J, V19, P725, DOI 10.1007/s11219-011-9150-y
   Braione P, 2012, LECT NOTES COMPUT SC, V7007, P158
   Burnim Jacob, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P443, DOI 10.1109/ASE.2008.69
   Cadar C., 2008, KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs
   Ciupa I, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P71, DOI 10.1145/1368088.1368099
   Csallner C, 2004, SOFTWARE PRACT EXPER, V34, P1025, DOI 10.1002/spe.602
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ferguson R., 1996, ACM Transactions on Software Engineering and Methodology, V5, P63, DOI 10.1145/226155.226158
   Fraser G, 2012, PROC INT CONF SOFTW, P178, DOI 10.1109/ICSE.2012.6227195
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2008, ACM SIGPLAN NOTICES, V43, P206, DOI 10.1145/1379022.1375607
   Honda T, 2002, FUSION ENG DES, V63-64, P507, DOI 10.1016/S0920-3796(02)00202-8
   Inkumsah Kobi, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P297, DOI 10.1109/ASE.2008.40
   Keilhacker M., 1997, 17 IEEE NPSS S FUS E, V2, P3
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   Lakhotia K., 2010, 2010 Proceedings of Second International Symposium on Search Based Software Engineering (SSBSE), P101, DOI 10.1109/SSBSE.2010.21
   Lakhotia K, 2009, 2009 TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE-PRACTICE AND RESEARCH TECHNIQUES, TAIC PART 2009, P95, DOI 10.1109/TAICPART.2009.15
   Majumdar R, 2007, PROC INT CONF SOFTW, P416
   McMillan KL, 2010, LECT NOTES COMPUT SC, V6174, P104, DOI 10.1007/978-3-642-14295-6_10
   Michael C, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P136, DOI 10.1109/ASE.1998.732605
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Miller W., 1976, IEEE Transactions on Software Engineering, VSE-2, P223, DOI 10.1109/TSE.1976.233818
   Muhammad A., 2007, P 10 SCAND INT C FLU, V3, P263
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Pargas R. P., 1999, Software Testing, Verification and Reliability, V9, P263, DOI 10.1002/(SICI)1099-1689(199912)9:4<263::AID-STVR190>3.0.CO;2-Y
   Pasareanu C. S., 2011, P 2011 INT S SOFTW T, P35
   Santelices Raul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P218, DOI 10.1109/ASE.2008.32
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Shimomura Y, 2004, J NUCL MATER, V329, P5, DOI 10.1016/j.jnucmat.2004.04.004
   STHAMER H, 1996, THESIS U GLAMORGAN P
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Tonella P., 2004, Software Engineering Notes, V29, P119, DOI 10.1145/1013886.1007528
   Xie T, 2009, I C DEPEND SYS NETWO, P359, DOI 10.1109/DSN.2009.5270315
NR 43
TC 12
Z9 13
U1 0
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2014
VL 22
IS 2
SI SI
BP 311
EP 333
DI 10.1007/s11219-013-9207-1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AF7TM
UT WOS:000334917700009
DA 2024-07-18
ER

PT J
AU Chu, PH
   Hsueh, NL
   Chen, HH
   Liu, CH
AF Chu, Peng-Hua
   Hsueh, Nien-Lin
   Chen, Hong-Hsiang
   Liu, Chien-Hung
TI A test case refactoring approach for pattern-based software development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test cases refactoring; Code refactoring; Design pattern; Test-driven
   development
ID DESIGN
AB In the current trend, Extreme Programing methodology is widely adopted by small and medium-sized projects for dealing with rapidly or indefinite changing requirements. Test-first strategy and code refactoring are the important practices of Extreme Programing for rapid development and quality support. The test-first strategy emphasizes that test cases are designed before system implementation to keep the correctness of artifacts during software development; whereas refactoring is the removal of "bad smell" code for improving quality without changing its semantics. However, the test-first strategy may conflict with code refactoring in the sense that the original test cases may be broken or inefficient for testing programs, which are revised by code refactoring. In general, the developers revise the test cases manually since it is not complicated. However, when the developers perform a pattern-based refactoring to improve the quality, the effort of revising the test cases is much more than that in simple code refactoring. In our observation, a pattern-based refactoring is composed of many simple and atomic code refactorings. If we have the composition relationship and the mapping rules between code refactoring and test case refactoring, we may infer a test case revision guideline in pattern-based refactoring. Based on this idea, in this research, we propose a four-phase approach to guide the construction of the test case refactoring for design patterns. We also introduce our approach by using some well-known design patterns and evaluate its feasibility by means of test coverage.
C1 [Chu, Peng-Hua; Hsueh, Nien-Lin; Chen, Hong-Hsiang] Feng Chia Univ, Dept Informat Engn & Comp Sci, Taichung 40724, Taiwan.
   [Liu, Chien-Hung] Natl Taipei Univ Technol, Comp Sci & Informat Engn Dept, Taipei, Taiwan.
   [Hsueh, Nien-Lin] Feng Chia Univ, CMMI Based Proc Improvement Project, Off Informat Technol, Taichung 40724, Taiwan.
C3 Feng Chia University; National Taipei University of Technology; Feng
   Chia University
RP Chu, PH (corresponding author), Feng Chia Univ, Dept Informat Engn & Comp Sci, Taichung 40724, Taiwan.
EM phchu@mail.fcu.edu.tw; nlhsueh@fcu.edu.tw; detpiston@gmail.com;
   cliu@ntut.edu.tw
FU Department of Industrial Technology, Ministry of Economic Affairs in
   Taiwan ROC [NSC98-2220-E-035-003]
FX This research was sponsored by Department of Industrial Technology,
   Ministry of Economic Affairs in Taiwan ROC under the Grant
   NSC98-2220-E-035-003. We would also like to thank deeply the anonymous
   reviewers for their valuable comments and feedbacks.
CR Ambler SW, 2007, IEEE SOFTWARE, V24, P37, DOI 10.1109/MS.2007.91
   [Anonymous], 2004, XP Ser
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2001, Proc. Second Int. Conf. Extreme Programming and Flexible Processes in Software Engineering, P84
   Baudry B, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P324, DOI 10.1109/ISSRE.2001.989486
   Chatzigeorgiou A., 2010, P 7 INT C QUAL INF C
   Cherfi S., 2008, LECT NOTES COMPUT SC, P142
   Cinneide M., 1998, P WORKSH FORM TECHN
   Dasiewicz P, 2005, EL COMP ENG 2005 CAN, P904
   Eclemma, 2011, TECH REP ECL COMM
   Enns R, 2004, REFACTORING ECLIPSE
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   France R, 2003, IEEE SOFTWARE, V20, P52, DOI 10.1109/MS.2003.1231152
   France RB, 2004, IEEE T SOFTWARE ENG, V30, P193, DOI 10.1109/TSE.2004.1271174
   Freeman E., 2004, Head First Design Patterns: A Brain-Friendly Guide
   Gamma Erich., 1994, DESIGN PATTERNS
   Guerra E. M., 2007, P INT C SOFTW ENG AD
   Hsueh N. L., 2009, WORKSH ACC TRAC GLOB
   Hsueh N. L., 2009, INT C ADV INF TECHN
   Hsueh NL, 2008, J SYST SOFTWARE, V81, P1430, DOI 10.1016/j.jss.2007.11.724
   Hsueh NL, 2009, SOFTW SYST MODEL, V8, P67, DOI 10.1007/s10270-007-0063-y
   Jeon SU, 2002, APSEC 2002: NINTH ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, P337, DOI 10.1109/APSEC.2002.1183003
   Kerievsky J., 2005, Refactoring to Patterns
   Khriss I, 2000, KNOWL-BASED SYST, V13, P403, DOI 10.1016/S0950-7051(00)00081-2
   Lippert M, 2003, COMPUTER, V36, P67, DOI 10.1109/MC.2003.1204377
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Meszaros G., 2006, XUNIT TEST PATTERNS
   Metsker Steven., 2006, DESIGN PATTERNS JAVA
   Moonen Leon, 2001, P 2 INT C EXTR PROGR
   Opdyke William F., 1992, THESIS
   PIPKA JU, 2002, P 3 INT C EXTR PROGR
   Poole C, 2001, IEEE SOFTWARE, V18, P42, DOI 10.1109/52.965801
   Soundarajan N, 2008, INNOV SYST SOFTW ENG, V4, P71, DOI 10.1007/s11334-007-0042-z
   Van Deursen A., 2002, PROC 3 INT C EXTREME, P71
   Widmer T, 2007, ECLIPSE MAGAZINE
   Winn T, 2002, IEEE SOFTWARE, V19, P59, DOI 10.1109/52.976942
NR 36
TC 8
Z9 10
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2012
VL 20
IS 1
BP 43
EP 75
DI 10.1007/s11219-011-9143-x
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 873ET
UT WOS:000298864600002
DA 2024-07-18
ER

PT J
AU Fouad, A
   Phalp, K
   Kanyaru, JM
   Jeary, S
AF Fouad, Ali
   Phalp, Keith
   Kanyaru, John Mathenge
   Jeary, Sheridan
TI Embedding requirements within Model-Driven Architecture
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE Requirements Engineering specification; Model-Driven Architecture;
   Business process modelling notation; Use Cases; Computation-Independent
   Model
ID MDA
AB Model-Driven Architecture (MDA) brings benefits to software development, among them the potential for connecting software models with the business domain. This paper focuses on the upstream or Computation-Independent Model (CIM) phase of MDA. Our contention is that, whilst there are many models and notations available within the CIM phase, those that are currently popular and supported by the Object Management Group (OMG) may not be the most useful notations for business analysts nor sufficient to fully support software requirements and specification. Therefore, with specific emphasis on the value of the Business Process Modelling Notation (BPMN) for business analysts, this paper provides an example of a typical CIM approach before describing an approach that incorporates specific requirements techniques. A framework extension to MDA is then introduced, which embeds requirements and specification within the CIM, thus further enhancing the utility of MDA by providing a more complete method for business analysis.
C1 [Fouad, Ali; Phalp, Keith; Kanyaru, John Mathenge; Jeary, Sheridan] Bournemouth Univ, Software Syst Res Ctr, Poole BH12 5BB, Dorset, England.
C3 Bournemouth University
RP Fouad, A (corresponding author), Bournemouth Univ, Software Syst Res Ctr, Poole BH12 5BB, Dorset, England.
EM afouad@bournemouth.ac.uk; kphalp@bournemouth.ac.uk;
   jkanyaru@bournemouth.ac.uk; sjeary@bournemouth.ac.uk
CR AMBLER SW, 2007, ROADMAP AGILE MDA
   [Anonymous], MDA VISION HOLE
   [Anonymous], BUS PROC MOD NOT V1
   [Anonymous], USING UML SOFTWARE E
   Beeson I, 2002, INFORM SYST FRONT, V4, P317, DOI 10.1023/A:1019910722321
   BERRISFORD G, 2004, 2 EUR WORKSH MOD DRI
   BRAHE S, 2006, ICSOC 2006 4 INT C W
   Bray I.K., 2002, INTRO REQUIREMENTS E
   Brown Alan., 2004, INTRO MODEL DRIVEN A
   FRANKEL DS, 2005, MDA J ECLIPSE MDA
   FRANKEL DS, 2004, MDA J DOMAIN SPECIFI
   Garrido JL, 2007, SCI COMPUT PROGRAM, V66, P25, DOI 10.1016/j.scico.2006.10.008
   GENOVA G, 2005, 1 INT WORKSH PHIL FD
   Greenspan S.J., 1982, P 6 INT C SOFTW ENG
   HANSZ D, 2003, MDA IMPL WORKSH SUCC
   HARMON P, 2005, BUSINESS PROCESS TRE, V3, P1
   Harrison-Broninski K., 2005, MODELING HUMAN INT 2
   HARRISONBRONINS.K, 2005, RADS UML
   HARRISONBRONINS.K, 2006, BPM ANYONE
   HARRISONBRONINS.K, 2006, FUTURE BPM
   HARRISONBRONINS.K, 2005, TECHNOLOGY HUMAN INT
   HENDRYX S, 2002, 3 WORKSH UML ENT APP
   INCE DC, 1993, INTRO SOFTWARE PROJE
   Jackson M., 1995, P 17 INT C SOFTW ENG
   JEARY S, 2008, 1 INT WORKSH BUS SUP
   JOUAULT F, 2006, P 2006 ACM S APPL CO
   KANYARU JM, 2008, SOFTWARE QUALITY MAN
   Kappelman LA, 2006, INFORM SYST MANAGE, V23, P31, DOI 10.1201/1078.10580530/46352.23.4.20060901/95110.4
   KAROW M, 2006, P 12 AM C INFORM SYS
   *KCL, 2002, SUPP MOD DRIV ARCH E
   KHERRAF S, 2008, P 19 AUSTR C SOFTW E
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   KOEHLER J, 2007, 3 INT WORKSH S APPL
   LEONARDI MC, 2004, AN WER04 WORKSH ENG
   MARTIN A, 2008, 1 INT WORKSH BUS SUP
   May L., 1998, CROSSTALK J DEF  JUL, P9
   Nuseibeh B., 2000, P C FUT SOFTW ENG LI
   OMG, 2003, MDA GUID VERS 1 0 1
   *OMG, 2005, BPMI ORG OMG ANN STR
   *OMG, 2007, COMM COMP THEIR PROD
   OSIS J, 2007, 10 INT C INF SYST IM
   OULD MA, 2004, BUSINESS PROCESS MAN
   PHALP KT, 2007, SOFTWARE QUALITY MAN
   POERNOMO I, 2008, 1 INT WORKSH BUS SUP
   RIVKIN W, 2008, CLOSING BUSINESS IT
   RODRIGUEZ A, 2007, 5 INT C BUS PROC MAN
   Shneiderman Ben., 2002, Leonardo's Laptop: Human Needs and the New Computing Technologies
   SILVER B, 2008, BPMS WATCH BRINGING
   SILVER B, 2008, WHATS WRONG THIS PIC
   SILVER B, 2008, BRUCE SILVERS BLOG 2
   SILVER B, 2008, BRUCE SILVERS BLOG B
   SILVER B, 2008, BRUCE SILVERS BLOG 3
   SLACK SE, 2008, BUSINESS ANAL MODEL
   SOLEY RM, 2006, MODELLING ALL WAY MO
   THANGARAJ S, 2004, CANC BIOMEDICAL INFO
   Thomas D, 2004, IEEE SOFTWARE, V21, P15, DOI 10.1109/MS.2004.1293067
   Uhl A, 2003, IEEE SOFTWARE, V20, P70, DOI 10.1109/MS.2003.1231155
   *VIDE, 2007, VIS ALL MOD DRIV PRO
   White S., 2004, PROCESS MODELING NOT
   WONG PYH, 2008, P 10 INT C FORM ENG
NR 60
TC 9
Z9 10
U1 0
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 411
EP 430
DI 10.1007/s11219-010-9122-7
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500008
OA Green Accepted, Green Submitted
DA 2024-07-18
ER

PT J
AU Guzmán, JG
   Mitre, HA
   Amescua, A
   Velasco, M
AF Garcia Guzman, Javier
   Mitre, Hugo A.
   Amescua, Antonio
   Velasco, Manuel
TI Integration of strategic management, process improvement and
   quantitative measurement for managing the competitiveness of software
   engineering organizations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Strategic management; Software process improvement; Quantitative
   measurement; Software engineering organizations; IT governance
ID IMPACT
AB Strategic management is a key discipline that permits companies to achieve their competitive goals. An effective and explicit alignment and integration of business strategy with SPI initiatives based on measurement is essential to prevent loss of income, customers and competitiveness. By integrating SPI models and measurement techniques in the strategy management process, an organization's investments will be better aligned with strategy, optimizing the benefits obtained as a result of an SPI program. In this paper, the authors propose BOQM (Balanced Objective-Quantifiers Methodology) that integrates properly strategic management, process improvement and quantitative measurement to manage the competitiveness of software engineering organizations. Finally, this paper presents and discusses the results from implementing BOQM in a software development organization.
C1 [Garcia Guzman, Javier; Mitre, Hugo A.; Amescua, Antonio; Velasco, Manuel] Univ Carlos III Madrid, Dept Comp Sci, Madrid 28911, Spain.
C3 Universidad Carlos III de Madrid
RP Guzmán, JG (corresponding author), Univ Carlos III Madrid, Dept Comp Sci, Av Univ 30, Madrid 28911, Spain.
EM jgarciag@inf.uc3m.es; hmitre@inf.uc3m.es; amescua@inf.uc3m.es;
   velasco@ia.uc3m.es
RI García-Guzmán, Javier/L-4666-2014
OI Amescua, Antonio/0000-0003-4355-6896; Mitre-Hernandez,
   Hugo/0000-0003-2840-3998; GARCIA GUZMAN, JAVIER/0000-0001-6039-795X;
   Velasco, Manuel/0000-0002-0764-3063
FU Spanish Ministry of Science and Technology [TIC2004-7083,
   TIN2009-10700]; Spanish Ministry of Industry [PPT-430000-2008-54];
   PROGRESION SMP [UC3M 2006/03617/ 001]
FX This work has been partially funded by the Spanish Ministry of Science
   and Technology through the TIC2004-7083 and TIN2009-10700 projects and
   the Spanish Ministry of Industry through project PPT-430000-2008-54.
   This work was also supported by PROGRESION SMP (UC3M 2006/03617/ 001).
   Moreover, we thank Dr. Victor R. Basili from Fraunhofer Center for
   Experimental Software Engineering, who reviewed this article.
CR [Anonymous], 2008, 90012008 ISOIEC
   [Anonymous], CMUSEI2004SR010
   [Anonymous], 2007, 159392007 ISOIEC
   ASGARKHANI M, 2006, IEEE INT C MAN INN T, DOI DOI 10.1109/ICMIT.2006.262205
   BASILI V, 2009, IEEE COMPUT IN PRESS
   Belk R.W., 2007, HDB QUALITATIVE RES
   Card DN, 2003, PROC INT CONF SOFTW, P738, DOI 10.1109/ICSE.2003.1201263
   CHASTEK JG, 2009, FORMULATION PRODUCTI
   Dybå T, 2005, IEEE T SOFTWARE ENG, V31, P410, DOI 10.1109/TSE.2005.53
   Ebert C., 2007, Software measurement: establish, extract, evaluate, execute
   El-Emam K., 2001, Empirical Software Engineering, V6, P207, DOI 10.1023/A:1011487332587
   ELEMAM K, 2007, DACS J, V10
   Fahey L., 2007, STRATEGY LEADERSHIP, V35, P4, DOI DOI 10.1108/SD.2007.05623DAD.003
   Goethert W., 2004, Applications of the indicator template for measurement and analysis
   GOETHERT W, 2003, DERIVING ENTERPRISE
   Gopal A, 2005, IEEE T SOFTWARE ENG, V31, P679, DOI 10.1109/TSE.2005.95
   Harjumaa L, 2008, LECT NOTES COMPUT SC, V5089, P230, DOI 10.1007/978-3-540-69566-0_20
   ISO/ IEC, 2004, 1550442004 ISOIEC
   Issac G, 2006, SOFTWARE QUAL J, V14, P291, DOI 10.1007/s11219-006-0037-2
   Kahraman C, 2007, EUR J INFORM SYST, V16, P284, DOI 10.1057/palgrave.ejis.3000679
   Kamel S, 2009, ELECTR J INF SYS DEV, V36
   Kanji G, 2007, TOTAL QUAL MANAG BUS, V18, P49, DOI 10.1080/14783360601043096
   KAPLAN R.S., 1997, Cost Effect, Using Integrated Systems to Drive Profitability and Performance
   Kaplan R.S., 2006, ALIGNMENT USING BALA
   KAPLAN RS, 2005, HARVARD BUS REV, DOI DOI 10.1225/R0510D
   KAPLAN RS, 2008, PLAN STRATEGY ALIGNI
   Kojima T, 2008, SOFTWARE QUAL J, V16, P361, DOI 10.1007/s11219-007-9040-5
   Kuppusamy M., 2008, American Journal of Applied Sciences, V5, P1676
   LAMB RB, 2008, COMPETITIVE STRATEGI
   Long J., 2008, ITIL VERSION 3 GLANC
   McGarry John., 2002, Practical Software Measurement: Objective Information for Decision Makers
   MCLOONE PJ, 2007, DACS J, V10
   Mehra S, 2004, PROD PLAN CONTROL, V15, P710, DOI 10.1080/09537280412331298247
   Mishra D, 2008, LECT NOTES COMPUT SC, V5089, P273, DOI 10.1007/978-3-540-69566-0_23
   OLIVEIRA SB, 2009, SOFTW QUAL J, DOI DOI 10.1007/S11219-009-9087-6
   PENG GCA, 2007, P 6 EUR C RES METH B, P229
   PORTER ME, 1979, HARVARD BUS REV, V57, P137
   QI LA, 2007, DACS J, V10
   Shull F, 2006, IEEE SOFTWARE, V23, P16, DOI 10.1109/MS.2006.33
   *SOFT ENV I, 2006, CMUSEI2006HB002
   Trienekens JJM, 2009, SOFTWARE QUAL J, V17, P231, DOI 10.1007/s11219-008-9063-6
   TUAN HW, 2006, HICSS 06 P 39 ANN HA
   Watson HJ, 2007, COMPUTER, V40, P96, DOI 10.1109/MC.2007.331
NR 43
TC 7
Z9 11
U1 0
U2 28
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2010
VL 18
IS 3
BP 341
EP 359
DI 10.1007/s11219-010-9094-7
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 607BI
UT WOS:000278472900002
DA 2024-07-18
ER

PT J
AU Stefani, A
   Xenos, M
AF Stefani, Antonia
   Xenos, Michalis
TI E-commerce system quality assessment using a model based on ISO 9126 and
   belief networks
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE quality assessment; e-commerce; ISO 9126; belief networks; theoretical
   framework; quality characteristics
ID SOFTWARE
AB As business transitions into the new economy, e-system successful use has become a strategic goal. Especially in business to consumer (e-commerce) applications, users highly evaluate the quality of their interactive shopping experience. However, quality is difficult to define and measure and most importantly, it is difficult to measure its impact on the end-user. Among the many research questions that arise, some of the most important concern the exact nature of the quality attributes that define an e-commerce system, and how one could model these attributes in order to increase its acceptance. Bearing in mind that e-commerce systems are actually user/data-intensive web-based software systems, this work performed a survey which resulted in a theoretical model that helps to measure such systems' dynamics through their decomposition into primary quality characteristics. The proposed model is based on Bayesian Networks and ISO 9126. Besides the emphasis on specific software quality attributes, it also provides a quality assessment process aiding developers to design and produce e-commerce systems of high quality. Using a Bayesian Network the model can be used to combine different types of evidences and provide reasoning from effect to cause and vice versa.
C1 [Stefani, Antonia; Xenos, Michalis] Hellen Open Univ, Patras 26222, Greece.
C3 Hellenic Open University
RP Stefani, A (corresponding author), Hellen Open Univ, 16 Sachtouri St, Patras 26222, Greece.
EM stefani@eap.gr; xenos@eap.gr
RI Stefani, Antonia/AAL-8360-2021
OI Stefani, Antonia/0000-0002-2873-5215
CR Abran A, 2003, SOFTWARE QUAL J, V11, P325, DOI 10.1023/A:1025869312943
   Adomavicius G, 2005, COMMUN ACM, V48, P83, DOI 10.1145/1089107.1089109
   [Anonymous], 2004, INFORM SCI INT J EME
   Barga Roger., 2004, ACM Trans. Interet Technol, V4, P289
   Ben Schafer J, 2001, DATA MIN KNOWL DISC, V5, P115, DOI 10.1023/A:1009804230409
   Bibi S., 2004, P 10 INT SOFTW METR
   BIDGOLI Hossein., 2002, Electronic Commerce Principles and Practice
   Chan H., 2001, E-Commerce Fundamentals and Applications
   Chen L., 2004, Data Base for Advances in Information Systems, V35, P8, DOI 10.1145/1007965.1007968
   Collins RW, 2002, IEEE SOFTWARE, V19, P74, DOI 10.1109/52.991367
   Côté MA, 2005, SOFTWARE QUAL J, V13, P17, DOI 10.1007/s11219-004-5259-6
   Elfriede D., 2001, QUALITY WEB SYSTEMS
   Fenton N, 2004, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2004.1317462
   Fenton N, 2002, IEEE SOFTWARE, V19, P116, DOI 10.1109/MS.2002.1020298
   Heckerman D., 1995, MSRTR9506 MICR RES
   Henfridsson O., 2003, DATA BASE ADV INF SY, V33, P38
   *ISO, 1991, INF TECHN EV SOFTW Q
   *ISO IEC 13335 1, 2004, INF TECHN SEC TECHN
   *ISO IEC 9126, 2001, SOFTW PROD EV QUAL C
   Jensen FV, 1996, INTRO BAYESIAN NETWO
   Johnson A, 2003, RES TECHNOL MANAGE, V46, P12, DOI 10.1080/08956308.2003.11671549
   Kadie C.M., 2001, MSRTR200167 MICR RES
   Kim YJ, 2005, COMMUN ACM, V48, P75, DOI 10.1145/1089107.1089108
   Lee HL, 2003, TAPPI J, V2, P3
   Lohse GL, 1998, COMMUN ACM, V41, P81, DOI 10.1145/278476.278491
   Losavio F, 2004, J SYST SOFTWARE, V72, P209, DOI 10.1016/S0164-1212(03)00114-6
   Moores T, 2005, COMMUN ACM, V48, P86, DOI 10.1145/1047671.1047674
   Nielsen J., 2006, ALERTBOX
   Nielsen Jakob, 2006, Designing Web Usability
   Pfleeger S.L., 2001, SOFTWARE ENG THEORY, V2nd
   Sauro J., 2005, P C HUMAN FACTORS CO, P401, DOI [10.1145/1054972.1055028, DOI 10.1145/1054972.1055028]
   Serva M., 2005, DATA BASE ADV INF SY, V36, P89, DOI DOI 10.1145/1080390.1080397
   Shaw N. C., 2002, Data Base for Advances in Information Systems, V33, P41
   Sopitkamol M., 2005, P 5 INT WORKSHOP SOF, P53
   SOPITKAMOL M, 2004, ACM SIG METRICS PERF, V32, P24
   Stamelos I, 2003, INFORM SOFTWARE TECH, V45, P51, DOI 10.1016/S0950-5849(02)00163-5
   STEFANI A, 2003, VECIMS 2003, V1, P13
   STEFANI A, 2004, ICETE 2004, V1, P26
   Storey VC, 2000, COMMUN ACM, V43, P117, DOI 10.1145/341852.341871
   Van Slyke C., 2004, Data Base for Advances in Information Systems, V35, P32, DOI 10.1145/1007965.1007969
   YEH H, 1993, SOFTWARE PROCESS QUA
   Zwass V., 1996, International Journal of Electronic Commerce, V1, P3
NR 42
TC 28
Z9 31
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2008
VL 16
IS 1
BP 107
EP 129
DI 10.1007/s11219-007-9032-5
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248QQ
UT WOS:000252169800006
DA 2024-07-18
ER

PT J
AU Khoshgoftaar, TM
   Seliya, N
   Sundaresh, N
AF Khoshgoftaar, Taghi M.
   Seliya, Naeem
   Sundaresh, Nandini
TI An empirical study of predicting software faults with case-based
   reasoning
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software quality; case-based reasoning; software fault prediction;
   similarity functions; solution algorithm; software metrics
ID QUALITY
AB The resources allocated for software quality assurance and improvement have not increased with the ever-increasing need for better software quality. A targeted software quality inspection can detect faulty modules and reduce the number of faults occurring during operations. We present a software fault prediction modeling approach with case-based reasoning (CBR), a part of the computational intelligence field focusing on automated reasoning processes. A CBR system functions as a software fault prediction model by quantifying, for a module under development, the expected number of faults based on similar modules that were previously developed. Such a system is composed of a similarity function, the number of nearest neighbor cases used for fault prediction, and a solution algorithm. The selection of a particular similarity function and solution algorithm may affect the performance accuracy of a CBR-based software fault prediction system. This paper presents an empirical study investigating the effects of using three different similarity functions and two different solution algorithms on the prediction accuracy of our CBR system. The influence of varying the number of nearest neighbor cases on the performance accuracy is also explored. Moreover, the benefits of using metric-selection procedures for our CBR system is also evaluated. Case studies of a large legacy telecommunications system are used for our analysis. It is observed that the CBR system using the Mahalanobis distance similarity function and the inverse distance weighted solution algorithm yielded the best fault prediction. In addition, the CBR models have better performance than models based on multiple linear regression.
C1 Florida Atlantic Univ, Dept Comp Sci & Engn, Empir Software Engn Lab, Boca Raton, FL 33431 USA.
C3 State University System of Florida; Florida Atlantic University
RP Khoshgoftaar, TM (corresponding author), Florida Atlantic Univ, Dept Comp Sci & Engn, Empir Software Engn Lab, Boca Raton, FL 33431 USA.
EM taghi@cse.fau.edu
CR AHA DW, 1994, WORKSH CAS BAS REAS
   [Anonymous], 1996, CASE BASED REASONING
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], J SYST SOFTWARE
   Bartsch-Spoerl B., 1995, Proceedings of 1st International Conference on Case-based Reasoning, P145
   BELL B, 1994, PROCEEDINGS OF THE SIXTEENTH ANNUAL CONFERENCE OF THE COGNITIVE SCIENCE SOCIETY, P33
   Berenson M.L., 1983, INTERMEDIATE STAT ME
   Briand L. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P377, DOI 10.1109/ICSE.2000.870428
   Dillon W.R., 1984, MULTIVARIATE ANAL ME
   Fayyad UM, 1996, IEEE EXPERT, V11, P20, DOI 10.1109/64.539013
   Ganesan K, 2000, INT J SOFTW ENG KNOW, V10, P139, DOI 10.1142/S0218194000000092
   Gokhale S.S., 1997, PROC 3 ISSAT INT C R, P31
   Gray A. R., 1999, Empirical Software Engineering, V4, P297, DOI 10.1023/A:1009849100780
   Hall MA, 1998, AUST COMP S, V20, P181
   Hudepohl JP, 1996, IEEE SOFTWARE, V13, P56, DOI 10.1109/52.536459
   Idri A, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P21, DOI 10.1109/METRIC.2002.1011322
   KADODA G, 2000, P 4 INT C EMP ASS SO, P23
   Khoshgoftaar T. M., 1995, Annals of Software Engineering, V1, P141, DOI 10.1007/BF02249049
   Khoshgoftaar TM, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P203, DOI 10.1109/METRIC.2002.1011339
   Khoshgoftaar TM, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P27, DOI 10.1109/ISSRE.1997.630845
   Khoshgoftaar TM, 2003, PROC INT C TOOLS ART, P47, DOI 10.1109/TAI.2003.1250169
   Khoshgoftaar TM, 2003, EMPIR SOFTW ENG, V8, P325, DOI 10.1023/A:1025316301168
   Khoshgoftaar TM, 2000, PROC INT C TOOLS ART, P54, DOI 10.1109/TAI.2000.889846
   KHOSHGOFTAAR TM, 2003, P 16 INT C CAS BAS R, V1689, P216
   Kolodner J.L., 1993, Case-Based Reasoning
   KOREL B, 1996, P INT S SOFTW TEST A, V21, P209
   KRIEGSMAN M, 1993, IEEE INTELL SYST APP, V8, P18, DOI 10.1109/64.248349
   Perry W.E., 2000, EFFECTIVE METHODS SO, V2nd
   Porter AA, 1997, IEEE T SOFTWARE ENG, V23, P329, DOI 10.1109/32.601071
   RAMAMOORTHY CV, 1993, FIFTH INTERNATIONAL CONFERENCE ON TOOLS WITH ARTIFICIAL INTELLIGENCE, TAI '93, PROCEEDINGS, P364, DOI 10.1109/TAI.1993.633982
   Schneidewind NF, 2002, COMPUTER, V35, P77, DOI 10.1109/2.982919
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Shepperd M, 2001, IEEE T SOFTWARE ENG, V27, P1014, DOI 10.1109/32.965341
   SMITH NT, 1995, P 4 SOFTW ENG RES FO, P193
   SUNDARESH N, 2001, THESIS FLORIDA ATLAN
   Troster J., 1995, Annals of Software Engineering, V1, P95, DOI 10.1007/BF02249047
   VOTTA LG, 1995, PROC INT CONF SOFTW, P277, DOI 10.1145/225014.225040
   WHITTEN IH, 2000, DATA MINING PRACTICA
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
NR 39
TC 49
Z9 54
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2006
VL 14
IS 2
BP 85
EP 111
DI 10.1007/s11219-006-7597-z
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 042EH
UT WOS:000237510200003
DA 2024-07-18
ER

PT J
AU Haoues, M
   Mokni, R
   Sellami, A
AF Haoues, Mariem
   Mokni, Raouia
   Sellami, Asma
TI Machine learning for mHealth apps quality evaluation An approach based
   on user feedback analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Machine learning; mHealth apps; Natural language processing; User
   feedback; Sentiment analysis; ISO; IEC 25010 quality model; Quality
   characteristics
AB Mobile apps for healthcare (mHealth apps for short) have been increasingly adapted to help users manage their health or to get healthcare services. User feedback analysis is a pertinent method that can be used to improve the quality of mHealth apps. The objective of this paper is to use supervised machine learning algorithms to evaluate the quality of mHealth apps according to the ISO/IEC 25010 quality model based on user feedback. For this purpose, a total of 1682 user reviews have been collected from 86 mHealth apps provided by Google Play Store. Those reviews have been classified initially into the ISO/IEC 25010 eight quality characteristics, and further into Negative, Positive, and Neutral opinions. This analysis has been performed using machine learning and natural language processing techniques. The best performances were provided by the Stochastic Gradient Descent (SGD) classifier with an accuracy of 82.00% in classifying user reviews according to the ISO/IEC 25010 quality characteristics. Moreover, Support Vector Machine (SVM) classified the collected user reviews into Negative, Positive, and Neutral with an accuracy of 90.50%. Finally, for each quality characteristic, we classified the collected reviews according to the sentiment polarity. The best performance results were obtained for the Usability, Security, and Compatibility quality characteristics using SGD classifier with an accuracy equal to 98.00%, 97.50%, and 96.00%, respectively. The results of this paper will be effective to assist developers in improving the quality of mHealth apps.
C1 [Haoues, Mariem] Prince Sattam Bin Abdulaziz Univ, Coll Comp Engn & Sci, Dept Software Engn, Al Kharj 11942, Saudi Arabia.
   [Haoues, Mariem; Sellami, Asma] Univ Sfax, Mircl Lab, ISIMS, BP 242, Sfax 3021, Tunisia.
   [Mokni, Raouia] Prince Sattam Bin Abdulaziz Univ, Coll Comp Engn & Sci, Dept Informat Syst, Al Kharj 11942, Saudi Arabia.
   [Mokni, Raouia] Univ Sfax, Sfax, Tunisia.
C3 Prince Sattam Bin Abdulaziz University; Universite de Sfax; Prince
   Sattam Bin Abdulaziz University; Universite de Sfax
RP Haoues, M (corresponding author), Prince Sattam Bin Abdulaziz Univ, Coll Comp Engn & Sci, Dept Software Engn, Al Kharj 11942, Saudi Arabia.; Haoues, M (corresponding author), Univ Sfax, Mircl Lab, ISIMS, BP 242, Sfax 3021, Tunisia.
EM m.haoues@psau.edu.sa; r.mokni@psau.edu.sa; sellami.asma@isims.usf.tn
FU Deputyship for Research & Innovation, Ministry of Education in Saudi
   Arabia [IF-PSAU-2021/01/17750]
FX AcknowledgementsThe authors extend their appreciation to the Deputyship
   for Research & Innovation, Ministry of Education in Saudi Arabia for
   funding this research work through the project number
   (IF-PSAU-2021/01/17750).
CR Agrawal V., 2020, 3 WAYS DIGITAL MARKE
   Al Kilani N, 2019, 2019 SIXTH INTERNATIONAL CONFERENCE ON SOCIAL NETWORKS ANALYSIS, MANAGEMENT AND SECURITY (SNAMS), P541, DOI [10.1109/SNAMS.2019.8931820, 10.1109/snams.2019.8931820]
   Al-Hawari A, 2021, SOFTWARE QUAL J, V29, P667, DOI 10.1007/s11219-020-09529-8
   Alpaydin E., 2020, INTRO MACHINE LEARNI, DOI DOI 10.7551/MITPRESS/13811.001.0001
   Appbot, 2021, APP REV RAT AN MOB T
   Araujo Adailton., 2020, Anais do Encontro Nacional de Inteligencia Artificial e Computacional (ENIAC), SBC, P378, DOI DOI 10.5753/ENIAC.2020.12144
   Aslam N, 2020, IEEE ACCESS, V8, P185619, DOI 10.1109/ACCESS.2020.3029634
   BankMyCell, 2021, MANY SMARTPHONES ARE
   Ben Messaoud M, 2019, LECT NOTES ARTIF INT, V11775, P805, DOI 10.1007/978-3-030-29551-6_71
   Davalbhakta S., 2020, MEDRXIV
   Falih N, 2019, 2019 INTERNATIONAL CONFERENCE ON INFORMATICS, MULTIMEDIA, CYBER AND INFORMATION SYSTEM (ICIMCIS), P195, DOI [10.1109/ICIMCIS48181.2019.8985222, 10.1109/icimcis48181.2019.8985222]
   Guzman E, 2015, IEEE INT CONF AUTOM, P771, DOI 10.1109/ASE.2015.88
   HEBB D. O., 1949
   Herrera M, 2010, LECT NOTES COMPUT SC, V6385s, P91, DOI 10.1007/978-3-642-16985-4_9
   Idri A., 11 INT C HLTH INF FU, p607 14
   Idri A, 2017, P INT COMP SOFTW APP, P262, DOI 10.1109/COMPSAC.2017.159
   ISO/IEC, 2016, 25022 SYST SOFTW ENG
   ISO/IEC, 2010, Technical report
   Lu Mengmeng., 2017, P 21 INT C EVALUATIO, P344, DOI [10.1145/3084226.3084241, DOI 10.1145/3084226.3084241]
   Maalej W, 2016, REQUIR ENG, V21, P311, DOI 10.1007/s00766-016-0251-9
   Maalej W, 2016, IEEE SOFTWARE, V33, P48, DOI 10.1109/MS.2015.153
   Medina C P., 2015, New Educational Review, V42, P40, DOI DOI 10.15804/TNER.2015.42.4.03
   Mobius MD, 2019, MED WORKFL CO 11 SUR
   Panichella S, 2015, PROC IEEE INT CONF S, P281, DOI 10.1109/ICSM.2015.7332474
   Pospieszny P, 2018, J SYST SOFTWARE, V137, P184, DOI 10.1016/j.jss.2017.11.066
   Rahmi Dewi Mutia, 2020, 2020 International Seminar on Application for Technology of Information and Communication (iSemantic), P530, DOI 10.1109/iSemantic50169.2020.9234283
   Ren JT, 2009, IEEE DATA MINING, P944, DOI 10.1109/ICDM.2009.90
   Singh Gurinder, 2019, 2019 International Conference on Automation, Computational and Technology Management (ICACTM). Proceedings, P593, DOI 10.1109/ICACTM.2019.8776800
   Tamjeed M., 2020, ACCESSIBILITY USER R
   Uddin G, 2021, IEEE T SOFTWARE ENG, V47, P522, DOI 10.1109/TSE.2019.2900245
   Vapnik V., 2013, The nature of statistical learning theory
   Yang C., 2022, 2022 IEEE INT C SOFT
   Zhang D, 2002, PROC INT C TOOLS ART, P22, DOI 10.1109/TAI.2002.1180784
   Zulfa Fatimatus, 2020, 2020 International Seminar on Application for Technology of Information and Communication (iSemantic), P537, DOI 10.1109/iSemantic50169.2020.9234241
NR 34
TC 0
Z9 0
U1 3
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1179
EP 1209
DI 10.1007/s11219-023-09630-8
EA MAY 2023
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY4P9
UT WOS:000992039400001
PM 38625157
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Juhnke, K
   Tichy, M
   Houdek, F
AF Juhnke, Katharina
   Tichy, Matthias
   Houdek, Frank
TI Challenges concerning test case specifications in automotive software
   testing: assessment of frequency and criticality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automotive software testing; Test case specification; Embedded systems;
   Challenges
AB Automotive test case specifications document test cases to be performed for a specific test object at a defined test level. They are a fundamental part of a structured automotive testing process, as required by the ISO 26262. The aim of our research is to identify challenges from a practitioner's point of view that lead to poor quality of test case specifications and thus negatively impact time, cost, and probability of defect detection. We designed an exploratory case study to systematically identify challenges focusing on (C) creation, (P) processing, and (Q) quality assurance related aspects of test case specifications. We conducted 17 semi-structured interviews covering a German OEM as well as three of its automotive suppliers and analyzed them qualitatively. We investigated causes and consequences arising from the challenges. Additionally, we conducted a descriptive survey to assess frequency and criticality. The identified challenges were summarized in a taxonomy consisting of nine main categories: (1) availability and (2) content-related problems with input artifacts, problems related to (3) a lack of knowledge, (4) the test case description, (5) the test case specification content, (6) processes, (7) communication, (8) quality assurance, and (9) tools. The challenges were assessed by 26 internal and 10 external employees. Hence, we identified differences between these groups in terms of access to documents, incomplete requirements, scope of model series, process, and tool-related aspects. Overall, the study results underline the necessity of quality assurance measures for test case specifications. Based on the assessments, our research indicates a broad range of test case description related challenges that are promising candidates for improving test case specification quality.
C1 [Juhnke, Katharina; Houdek, Frank] Daimler AG, Res Grp, MBC Dev, Ulm, Germany.
   [Juhnke, Katharina; Tichy, Matthias] Ulm Univ, Inst Software Engn & Programming Languages, Ulm, Germany.
C3 Daimler AG; Ulm University
RP Juhnke, K (corresponding author), Daimler AG, Res Grp, MBC Dev, Ulm, Germany.; Juhnke, K (corresponding author), Ulm Univ, Inst Software Engn & Programming Languages, Ulm, Germany.
EM katharina.juhnke@daimler.com; matthias.tichy@uni-ulm.de;
   frank.houdek@daimler.com
OI Juhnke, Katharina/0000-0001-8604-866X
FU Projekt DEAL
FX TOpen Access funding provided by Projekt DEAL.
CR [Anonymous], 2014, INFORM 2014
   [Anonymous], 2016, P 2016 12 IEEE INT C
   [Anonymous], 2015, STAND GLOSS TERMS US
   [Anonymous], 2013, 29119 ISO
   [Anonymous], 2011, ISO 262622011
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Blaikie N., 2003, ANAL QUANTITATIVE DA
   Bringmann Eckard, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P485, DOI 10.1109/ICST.2008.45
   Broy M., 2006, 28th International Conference on Software Engineering Proceedings, P33, DOI 10.1145/1134285.1134292
   Cohen J., 1988, STAT POWER ANAL BEHA
   Dresch A., 2015, Design Science Research, DOI 10.1007/978-3-319-07374-3
   Dreyfus H. L., 1980, A five-stage model of mental activities involved in directed skill acquisition
   Fisher RA, 1922, J R STAT SOC, V85, P87, DOI 10.2307/2340521
   Garousi V., 2017, P 21 INT C EV ASS SO, P65
   Grimm K, 2003, PROC INT CONF SOFTW, P498, DOI 10.1109/ICSE.2003.1201228
   Juhnke K, 2018, PROC IEEE ACM INT C, P131, DOI 10.1145/3183440.3195070
   Juhnke K, 2018, EUROMICRO CONF PROC, P33, DOI 10.1109/SEAA.2018.00015
   Kasoju A, 2013, INFORM SOFTWARE TECH, V55, P1237, DOI 10.1016/j.infsof.2013.01.005
   KNAPP TR, 1990, NURS RES, V39, P121
   Lachmann R., 2013, 11 WORKSH AUT SOFTW
   Norenberg R., 2010, LECT NOTES INFORM, P515
   Nulty DD, 2008, ASSESS EVAL HIGH EDU, V33, P301, DOI 10.1080/02602930701293231
   Petrenko AK, 2015, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.180
   Pretschner A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P55, DOI 10.1109/FOSE.2007.22
   Runeson Per, 2012, Case study research in software engineering: Guidelines and examples
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Spillner Andreas., 2014, SOFTWARE TESTING FDN
   Strauss A., 1990, BASICS QUALITATIVE R
   Sundmark D., 2011, 2011 6th IEEE International Symposium on Industrial Embedded Systems (SIES), P166, DOI 10.1109/SIES.2011.5953659
   VDA QMC Working Group 13 / Automotive SIG, 2016, AUT SPICE PROC REF M
   Weber J, 2009, AUTOMOTIVE DEVELOPMENT PROCESSES: PROCESSES FOR SUCCESSFUL CUSTOMER ORIENTED VEHICLE DEVELOPMENT, P1, DOI 10.1007/978-3-642-01253-2_1
NR 31
TC 17
Z9 17
U1 2
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2021
VL 29
IS 1
BP 39
EP 100
DI 10.1007/s11219-020-09523-0
EA NOV 2020
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QZ5CV
UT WOS:000590507100001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Rantala, L
   Mäntylä, M
AF Rantala, Leevi
   Mantyla, Mika
TI Predicting technical debt from commit contents: reproduction and
   extension with automated feature selection
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Natural language processing; Latent Dirichlet allocation; Logistic
   regression; Word embeddings; Topic modeling; Data mining
ID CLASSIFICATION; CURVES; MODELS; AREAS
AB Self-admitted technical debt refers to sub-optimal development solutions that are expressed in written code comments or commits. We reproduce and improve on a prior work by Yan et al. (2018) on detecting commits that introduce self-admitted technical debt. We use multiple natural language processing methods: Bag-of-Words, topic modeling, and word embedding vectors. We study 5 open-source projects. Our NLP approach uses logistic Lasso regression from Glmnet to automatically select best predictor words. A manually labeled dataset from prior work that identified self-admitted technical debt from code level commits serves as ground truth. Our approach achieves + 0.15 better area under the ROC curve performance than a prior work, when comparing only commit message features, and + 0.03 better result overall when replacing manually selected features with automatically selected words. In both cases, the improvement was statistically significant (p< 0.0001). Our work has four main contributions, which are comparing different NLP techniques for SATD detection, improved results over previous work, showing how to generate generalizable predictor words when using multiple repositories, and producing a list of words correlating with SATD. As a concrete result, we release a list of the predictor words that correlate positively with SATD, as well as our used datasets and scripts to enable replication studies and to aid in the creation of future classifiers.
C1 [Rantala, Leevi; Mantyla, Mika] Univ Oulu, M3S, ITEE, POB 4500, Oulu 90014, Finland.
C3 University of Oulu
RP Rantala, L (corresponding author), Univ Oulu, M3S, ITEE, POB 4500, Oulu 90014, Finland.
EM leevi.rantala@oulu.fi; mika.mantyla@oulu.fi
RI Mäntylä, Mika V/E-7644-2012
OI Rantala, Leevi/0000-0003-0258-8904
FU University of Oulu; Oulu University Hospital; Infotech Oulu; Academy of
   Finland [298020, 328058]; Academy of Finland (AKA) [328058] Funding
   Source: Academy of Finland (AKA)
FX Open access funding provided by University of Oulu including Oulu
   University Hospital. The authors have been supported by Infotech Oulu
   and Academy of Finland (grants 298020 and 328058).
CR AlOmar EA, 2019, 2019 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON REFACTORING (IWOR 2019), P51, DOI 10.1109/IWoR.2019.00017
   [Anonymous], 2018, EMPIR SOFTW ENG, DOI DOI 10.1007/s10664-017-9522-4
   Barua A, 2014, EMPIR SOFTW ENG, V19, P619, DOI 10.1007/s10664-012-9231-y
   Bavota G, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P315, DOI [10.1109/MSR.2016.040, 10.1145/2901739.2901742]
   Besker T, 2018, 2018 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT), P105, DOI 10.1145/3194164.3194178
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Bouchet-Valat M., 2015, PACKAGE SNOWBALLC
   Bouma G., 2009, P GSCL POTSD GERM, P31
   Cambria E, 2014, IEEE COMPUT INTELL M, V9, P48, DOI 10.1109/MCI.2014.2307227
   DELONG ER, 1988, BIOMETRICS, V44, P837, DOI 10.2307/2531595
   Demler OV, 2012, STAT MED, V31, P2577, DOI 10.1002/sim.5328
   Efstathiou V, 2018, IEEE WORK CONF MIN S, P38, DOI 10.1145/3196398.3196448
   Fan Y., 2018, IEEE T SOFTWARE ENG
   Fontana FA, 2016, EMPIR SOFTW ENG, V21, P1143, DOI 10.1007/s10664-015-9378-4
   Friedman J, 2010, J STAT SOFTW, V33, P1, DOI 10.18637/jss.v033.i01
   Fu Y, 2015, INFORM SOFTWARE TECH, V57, P369, DOI 10.1016/j.infsof.2014.05.017
   Genkin A, 2007, TECHNOMETRICS, V49, P291, DOI 10.1198/004017007000000245
   Guzman E., 2014, Association for Computing Machinery, P352
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Harris ZS, 1954, WORD, V10, P146, DOI 10.1080/00437956.1954.11659520
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   Hemmati H, 2017, SOFTW TEST VERIF REL, V27, DOI 10.1002/stvr.1609
   Herzig K, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P392, DOI 10.1109/ICSE.2013.6606585
   Kamei E.d.S., 2016, QUASOQ TDA APSEC, P68
   Laitila V, 2019, TECHNICAL DEBT ANAL
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Levy O, 2014, PROCEEDINGS OF THE 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 2, P302, DOI 10.3115/v1/p14-2050
   Liu Y., 2015, 29 AAAI C ART INT
   Loper E., 2002, P ACL WORKSH EFF TOO
   Maldonado ED, 2017, PROC IEEE INT CONF S, P238, DOI 10.1109/ICSME.2017.8
   Maldonado ED, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P9, DOI 10.1109/MTD.2015.7332619
   Maldonado ED, 2017, IEEE T SOFTWARE ENG, V43, P1044, DOI 10.1109/TSE.2017.2654244
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   Manning CD, 2014, PROCEEDINGS OF 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: SYSTEM DEMONSTRATIONS, P55, DOI 10.3115/v1/p14-5010
   Mantyla M.V., 2018, P 12 ACM IEEE INT S, P49
   Mensah S., 2016, Rework effort estimation of self-admitted technical debt
   MITRE, 2019, COMM WEAKN EN
   Moss H., 2018, P 27 INT C COMP LING, P2978
   Movshovitz-Attias Dana, 2013, ACL
   Mullen K.M., 2009, DEoptim: An R package for global optimization by differential evolution
   Newman D, 2011, Advances in Neural Information Processing Systems, P496, DOI DOI 10.5555/2986459.2986515
   Oliveira N, 2014, PROCEEDINGS OF THE 18TH INTERNATIONAL DATABASE ENGINEERING AND APPLICATIONS SYMPOSIUM (IDEAS14), P115, DOI 10.1145/2628194.2628235
   Pennington J, 2014, P 2014 C EMP METH NA, V2014, P1532, DOI DOI 10.3115/V1/D14-1162
   Potdar A, 2014, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2014.31
   Prati RC, 2011, IEEE T KNOWL DATA EN, V23, P1601, DOI 10.1109/TKDE.2011.59
   Robin X, 2011, BMC BIOINFORMATICS, V12, DOI 10.1186/1471-2105-12-77
   Röder M, 2015, WSDM'15: PROCEEDINGS OF THE EIGHTH ACM INTERNATIONAL CONFERENCE ON WEB SEARCH AND DATA MINING, P399, DOI 10.1145/2684822.2685324
   Sas D., 2019, SOFTW QUAL J, P1
   Selvaraj R, 2015, 2015 2ND INTERNATIONAL CONFERENCE ON ELECTRONICS AND COMMUNICATION SYSTEMS (ICECS), P15, DOI 10.1109/ECS.2015.7124837
   Seok M., 2016, INT J STW ENG APPL, V10, P93, DOI [DOI 10.14257/ijseia.2016.10.2.08, DOI 10.14257/IJSEIA.2016.10.2.08]
   Sinha V, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P520, DOI [10.1109/MSR.2016.069, 10.1145/2901739.2903501]
   SonarQube, 2019, RUL EXPL
   Song Y., 2009, INT C INF KNOWL MAN, P1757
   Sun XB, 2014, 2014 3RD INTERNATIONAL WORKSHOP ON EVIDENTIAL ASSESSMENT OF SOFTWARE TECHNOLOGIES (EAST), P32, DOI 10.1145/2627508.2627514
   Sun X, 2014, IEEE SIGNAL PROC LET, V21, P1389, DOI 10.1109/LSP.2014.2337313
   Thomas SW, 2014, EMPIR SOFTW ENG, V19, P182, DOI 10.1007/s10664-012-9219-7
   Thomas SW, 2010, IEEE INT WORK C SO, P55, DOI 10.1109/SCAM.2010.13
   Tom E, 2013, J SYST SOFTWARE, V86, P1498, DOI 10.1016/j.jss.2012.12.052
   Treude Christoph, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P84, DOI 10.1109/MSR.2019.00022
   Turian J, 2010, ACL 2010: 48TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P384
   Wehaibi S, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P179, DOI 10.1109/SANER.2016.72
   Wu X., 2020, SEISMOL RES LETT, P1
   Yan M., 2018, IEEE Trans. Softw. Eng.
   Yang XL, 2016, PROC INT SYMP SOFTW, P127, DOI 10.1109/ISSRE.2016.33
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
   Zhao WZ, 2015, BMC BIOINFORMATICS, V16, DOI 10.1186/1471-2105-16-S13-S8
   Zhou YQ, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P914, DOI 10.1145/3106237.3117771
NR 67
TC 6
Z9 7
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1551
EP 1579
DI 10.1007/s11219-020-09520-3
EA JUL 2020
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000545294200001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Spasic, M
   Janicic, MV
AF Spasic, Mirko
   Janicic, Milena Vujosevic
TI Verification supported refactoring of embeddedsql
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software verification; Embeddedsql; Regression verification; Bounded
   model checking; SMT solving
ID SYMBOLIC EXECUTION; FORMAL SEMANTICS; SQL; EQUIVALENCES; CHECKING;
   QUERIES
AB Improving code quality without changing its functionality, e.g., by refactoring or optimization, is an everyday programming activity. Good programming practice requires that each such change should be followed by a check if the change really preserves the code behavior. If such a check is performed by testing, it can be time consuming and still cannot guarantee the absence of differences in behavior between two versions of the code. Hence, tools that could automatically verify code equivalence would be of great help. An area that we are focused on is embeddedsqlprogramming. There are a number of approaches for dealing with equivalence of either pairs of imperative code fragments or pairs ofsqlstatements. However, in database-driven applications, simultaneous changes (changes that include bothsqland a host language code) are also present and important. Such changes can preserve the overall equivalence without preserving equivalence of these two parts considered separately. In this paper, we propose an automated approach for dealing with equivalence of programs after such changes, a problem that is hardly tackled in literature. Our approach uses our custom first-order logic modeling ofsqlqueries that corresponds to imperative semantics. The approach generates equivalence conditions that can be efficiently checked usingsmtsolvers or first-order logic provers. We implemented the proposed approach as a frameworksqlav, which is publicly available and open source.
C1 [Spasic, Mirko; Janicic, Milena Vujosevic] Univ Belgrade, Fac Math, Belgrade, Serbia.
C3 University of Belgrade
RP Spasic, M (corresponding author), Univ Belgrade, Fac Math, Belgrade, Serbia.
EM mirko@matf.bg.ac.rs; milena@matf.bg.ac.rs
RI Spasić, Mirko/GLS-3306-2022
OI Spasić, Mirko/0000-0002-9304-4007; Vujosevic Janicic,
   Milena/0000-0001-5396-0644
FU Serbian Ministry of Science [174021]; COST action [CA15123]
FX This work was partially supported by the Serbian Ministry of Science
   grant 174021 and by COST action CA15123.
CR Abiteboul Serge, 1995, FDN DATABASES LOGICA
   Altibase, 2020, ALT ENT GRAD OP SOUR
   Amtoft T, 2006, ACM SIGPLAN NOTICES, V41, P91, DOI 10.1145/1111320.1111046
   [Anonymous], 1998, BOOK FORMAL EQUIVALE, V12, DOI [10.1007/978-1-4615-5693-0, DOI 10.1007/978-1-4615-5693-0]
   [Anonymous], 2018, REFACTORING IMPROVIN
   Auerbach JS, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1555, DOI 10.1145/3035918.3035961
   Babic D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P211, DOI 10.1145/1368088.1368118
   Backes John, 2013, Model Checking Software. 20th International Symposium, SPIN 2013. Proceedings, P99, DOI 10.1007/978-3-642-39176-7_7
   Barnett Mike, 2005, PASTE, V31, P82, DOI [DOI 10.1145/1108792, DOI 10.1145/1108792.1108813]
   Barrett C., 2010, TECH REP
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Barthe Gilles, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P7, DOI 10.1007/978-3-642-35308-6_3
   Beaulieu Alan., 2009, Learning SQL
   BEN-GAN Itzik., 2012, Microsoft SQL Server 2012 T-SQL Fundamentals
   Benedikt M, 2017, PODS'17: PROCEEDINGS OF THE 36TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P37, DOI 10.1145/3034786.3034796
   Benzaken V, 2018, LECT NOTES COMPUT SC, V10895, P88, DOI 10.1007/978-3-319-94821-8_6
   Benzaken V, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P249, DOI 10.1145/3293880.3294107
   Bertot Y., 2004, TEXT THEORET COMP S
   Blome M., 2020, OPEN DATABASE CONNEC
   Brumm B., 2019, BEGINNING ORACLE SQL
   CERI S, 1985, IEEE T SOFTWARE ENG, V11, P324, DOI 10.1109/TSE.1985.232223
   Chandra A.K., 1977, P 9 ANN ACM S THEOR, P77, DOI [DOI 10.1145/800105.803397, 10.1145/800105.803397]
   Chaudhuri S., 1993, Optimization of real conjunctive queries, DOI 10.1145/153850.153856
   Chirkova R, 2016, J COMPUT SYST SCI, V82, P395, DOI 10.1016/j.jcss.2015.11.001
   Chu SM, 2018, PROC VLDB ENDOW, V11, P1482, DOI 10.14778/3236187.3236200
   Chu S, 2017, ACM SIGPLAN NOTICES, V52, P510, DOI [10.1145/3062341.3062348, 10.1145/3140587.3062348]
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clarke E.M., 2016, HDB MODEL CHECKING, DOI DOI 10.1007/978-3-319-10575-8_8
   COHEN S, 2006, PODS, P70
   Cohen S, 2009, VLDB J, V18, P765, DOI 10.1007/s00778-008-0122-1
   Cordeiro L, 2009, IEEE INT CONF AUTOM, P137, DOI 10.1109/ASE.2009.63
   Coronel C., 2009, Database Systems: Design, Implementation, and Management, VManagement
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DATE C.J., 2003, An Introduction to Database Systems, Veight
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Douglas G., 2016, P 31 ANN ACM S APPL, P961
   Ebel N, 2020, MANUALLY TRIGGER GIT
   Emmi M., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P151
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Fisher Maydene., 2003, JDBC API TUTORIAL RE
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Gao JQ, 2017, CONCURR COMP-PRACT E, V29, DOI 10.1002/cpe.3936
   Garbus I, 2015, BMC GENOMICS, V16, DOI 10.1186/s12864-015-1579-0
   Ghafoor MA, 2020, SOFTWARE QUAL J, V28, P853, DOI 10.1007/s11219-019-09453-6
   Godlin B, 2013, SOFTW TEST VERIF REL, V23, P241, DOI 10.1002/stvr.1472
   Gorg Carsten., 2005, MSR 05, P1, DOI DOI 10.1145/1083142.1083148
   Grossman S, 2017, LECT NOTES COMPUT SC, V10427, P282, DOI 10.1007/978-3-319-63390-9_15
   Guagliardo P, 2017, PROC VLDB ENDOW, V11, P27, DOI 10.14778/3151113.3151116
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huisman M., 2019, JBMC BOUNDED MODEL C
   IBM, 2012, DEV EMB SQL APPL
   IOANNIDIS YE, 1995, ACM T DATABASE SYST, V20, P288, DOI 10.1145/211414.211419
   ISO, 2016, 907512016 ISO ISOIEC
   ITTIA, 2016, BEN DAT EMB SYST IOT
   Janicic MV, 2020, COMPUT SCI INF SYST, V17, P205, DOI 10.2298/CSIS181220019V
   Jayram T. S., 2006, ACM PODS, P80
   Kim M, 2014, IEEE T SOFTWARE ENG, V40, P633, DOI 10.1109/TSE.2014.2318734
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Mahmood MS, 2016, IEEE INT CONF AUTOM, P519, DOI 10.1145/2970276.2970318
   Malecha G, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P237, DOI 10.1145/1706299.1706329
   Marcozzi M, 2015, SCI COMPUT PROGRAM, V105, P44, DOI 10.1016/j.scico.2015.03.005
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Merz Florian., 2012, LECT NOTES COMPUT SC, P146, DOI [10.1007/978-3-642-27705-4_12, DOI 10.1007/978-3-642-27705-4_12]
   microsoft, 2020, MICROSOFT SQL SERVER
   Murphy-Hill E, 2012, IEEE T SOFTWARE ENG, V38, P5, DOI 10.1109/TSE.2011.41
   NEGRI M, 1991, ACM T DATABASE SYST, V16, P513, DOI 10.1145/111197.111212
   Obe Regina O, 2017, POSTGRESQL RUNNING P
   Oracle, 2020, OR DAT DAT LIC INF U
   Pan K, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2491529
   Post H, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P31, DOI 10.1109/ICST.2009.39
   PostgreSQL, 2020, POSTGRESQL WORLDS MO
   Ramos David A., 2011, P 23 INT C COMP AID, P669, DOI [DOI 10.1007/978-3-642-22110-1_55, 10.1007/978-3-642]
   Riazanov A, 2002, AI COMMUN, V15, P91
   Rodchenko N., 2019, UOOS BLOCKCHAIN FRAM
   SAGIV Y, 1980, J ACM, V27, P633, DOI 10.1145/322217.322221
   Scheben C, 2014, LECT NOTES COMPUT SC, V8442, P579, DOI 10.1007/978-3-319-06410-9_39
   Schlaipfer M, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P631, DOI 10.1145/3132747.3132773
   Schmitt D, 2019, BUG 5673 OPTIMIZER C
   Spasi M., 2018, TYPES, P78
   Spasi M., 2020, GITHUB REPOSITORY SQ
   Stark MM, 1999, COMP GRAPH, P155, DOI 10.1145/311535.311552
   Strichman Ofer, 2005, Verified Software: Theories, Tools, Experiments. First IFIP TC 2/WG 2.3 Conference, VSTTE 2005. (Lecture Notes in Computer Science vol. 4171), P496
   Sulik M., 2013, BUG 70038 WRONG SELE
   Sybase S, 2020, RELATIONAL DATABASE
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   TRAKHTENBROT BA, 1950, DOKL AKAD NAUK SSSR+, V70, P569
   Veanes M, 2010, LECT NOTES ARTIF INT, V6355, P425, DOI 10.1007/978-3-642-17511-4_24
   Verdoolaege S, 2010, J ELECTRON TEST, V26, P279, DOI 10.1007/s10836-009-5140-4
   Vujoevi Janii M., 2020, TOOLS LAV SQLAV 2020
   Vujoevi Janii M, 2014, INFOM J INFORM TECHN, V49, P14
   Vujosevic-Janicic M, 2013, INFORM SOFTWARE TECH, V55, P1004, DOI 10.1016/j.infsof.2012.12.005
   Vujosevic-Janicic M, 2012, LECT NOTES COMPUT SC, V7152, P98, DOI 10.1007/978-3-642-27705-4_9
   Web L., 2020, 10 WAYS DATABASES RU
   Weidenbach C, 2009, LECT NOTES ARTIF INT, V5663, P140, DOI 10.1007/978-3-642-02959-2_10
   Weissgerber P, 2006, IEEE INT CONF AUTOM, P231
   Weissgerber Peter., 2006, Proceedings of the 2006 International Workshop on Mining Software Repositories, MSR '06, P112
   Welsch Y, 2014, SCI COMPUT PROGRAM, V92, P129, DOI 10.1016/j.scico.2013.10.002
   Yang PY, 2014, J UNIVERS COMPUT SCI, V20, P1488
NR 100
TC 2
Z9 2
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2021
VL 29
IS 3
SI SI
BP 629
EP 665
DI 10.1007/s11219-020-09517-y
EA JUN 2020
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UM3VY
UT WOS:000541195800001
DA 2024-07-18
ER

PT J
AU Lima, C
   Hora, A
AF Lima, Caroline
   Hora, Andre
TI What are the characteristics of popular APIs? A large-scale study on
   Java, Android, and 165 libraries
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software library; Framework; API popularity; API usage; Software
   evolution; Software repository mining
AB Software systems are commonly implemented with the support of libraries, which provide features via APIs. Ideally, APIs should have some characteristics, for example, they should be well documented and stable so that client systems can confidently rely on them. However, not all APIs are equal in number of clients: while some APIs are very popular and used worldwide, other may face much lower usage rates. In this context, one question appears: are there particular characteristics that differentiate popular APIs from ordinary APIs? Answering this question can uncover how worldwide APIs are actually implemented and maintained, revealing practices to better support both research and development on APIs. In this paper, we assess the characteristics of popular APIs, including their size, legibility, documentation, stability, and client adoption. We analyze 1491 APIs provided by Java, Android, and 165 libraries. We detect that popular APIs are distinct from ordinary ones, for example, often, popular APIs are larger, have more comments, and are more unstable than ordinary APIs. Finally, we provide a set of lessons learned from the popular APIs on factors that developers can control, such as the exposure of public methods and the API stability.
C1 [Lima, Caroline] UFMS, Fac Comp, Belo Horizonte, MG, Brazil.
   [Hora, Andre] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Mato Grosso do Sul; Universidade Federal de
   Minas Gerais
RP Hora, A (corresponding author), Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
EM caroline.correa@aluno.ufms.br; andrehora@dcc.ufmg.br
RI Hora, Andre/HTP-0699-2023
OI Hora, Andre/0000-0003-4900-1330
FU CAPES; CNPq
FX This research is financially supported by the CAPES and CNPq.
CR Ahmed M., 2013, INT C WEB SEARCH DAT
   Avelino G, 2016, 24 INT C PROGR COMPR, P110
   Barua A, 2014, EMPIR SOFTW ENG, V19, P619, DOI 10.1007/s10664-012-9231-y
   Bavota G, 2015, IEEE T SOFTWARE ENG, V41, P384, DOI 10.1109/TSE.2014.2367027
   Bloch J, 2006, SIGPLAN S OBJ OR PRO
   Bogart C., 2016, INT S FDN SOFTW ENG
   Borges H., 2016, INT C SOFTW MAINT EV
   Borges H., 2018, J SYSTEMS SOFTWARE
   Brito A., 2018, INT C SOFTW AN EV RE
   Brito G, 2018, J SYST SOFTWARE, V137, P306, DOI 10.1016/j.jss.2017.12.007
   Businge J., 2013, SOFTWARE QUALITY J
   Businge J., 2013, EUR C SOFTW MAINT RE
   Businge J., 2012, INT C SOFTW MAINT
   Chatzopoulou G., 2010, C COMP COMM WORKSH
   Couto C, 2014, J SYST SOFTWARE, V93, P24, DOI 10.1016/j.jss.2014.01.033
   Dagenais B., 2008, INT C SOFTW ENG
   De Roover C., 2013, INT C PROGR COMPR
   Dig D., 2005, INT C SOFTW MAINT
   Dyer R., 2013, INT C SOFTW ENG
   Eisenberg D.S., 2010, C HUM FACT COMP SYST
   Figueiredo F, 2014, ACM T INTERNET TECHN, V14, DOI 10.1145/2665065
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fritz T, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2512207
   Fritz Thomas, 2010, INT C SOFTW ENG
   Henning M., 2007, ACM Queue, V5, P25, DOI 10.1145/1255421.1255422
   Herbsleb J.D, 2007, FUTURE SOFTWARE ENG
   Hintze JL, 1998, AM STAT, V52, P181, DOI 10.2307/2685478
   Holmes R., 2007, OOPSLA WORKSH ECL TE
   Hora A., 2018, INT C SOFTW ENG
   Hora A., 2016, INT S FDN SOFTW ENG
   Hora A., 2015, INT C SOFTW MAINT EV
   Hora A, 2018, SOFTWARE QUAL J, V26, P161, DOI 10.1007/s11219-016-9344-4
   Konstantopoulos D., 2009, INT COMP SOFTW APPL
   Kula RG, 2018, EMPIR SOFTW ENG, V23, P384, DOI 10.1007/s10664-017-9521-5
   Kula RG, 2018, INFORM SOFTWARE TECH, V93, P186, DOI 10.1016/j.infsof.2017.09.007
   Lehmann J., 2012, INT C WORLD WID WEB
   Lethbridge TC, 2003, IEEE SOFTWARE, V20, P35, DOI 10.1109/MS.2003.1241364
   Ma ZY, 2013, J AM SOC INF SCI TEC, V64, P1399, DOI 10.1002/asi.22844
   Maalej W, 2013, IEEE T SOFTWARE ENG, V39, P1264, DOI 10.1109/TSE.2013.12
   Mastrangelo L, 2015, ACM SIGPLAN NOTICES, V50, P695, DOI [10.1145/2814270.2814313, 10.1145/2858965.2814313]
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   McDonnell T., 2013, INT C SOFTW MAINT
   Mileva Y.M., 2009, JOINT INT ANN ERCIM
   Mileva YM, 2011, LECT NOTES COMPUT SC, V6813, P105, DOI 10.1007/978-3-642-22655-7_6
   Mileva YM, 2010, LECT NOTES COMPUT SC, V6303, P173, DOI 10.1007/978-3-642-15585-7_17
   Mistrík I, 2010, COLLABORATIVE SOFTWARE ENGINEERING, P389, DOI 10.1007/978-3-642-10294-3_19
   Moser S, 1996, COMPUTER, V29, P45, DOI 10.1109/2.536783
   Myers BA, 2016, COMMUN ACM, V59, P62, DOI 10.1145/2896587
   Raemaekers S., 2012, INT C SOFTW MAINT
   Reddy Martin., 2011, API Design for C++
   Retherford R.D., 2011, Statistical Models for Causal Analysis
   Robbes Romain, 2012, P ACM SIGSOFT 20 INT, P1
   Robillard MP, 2009, IEEE SOFTWARE, V26, P27, DOI 10.1109/MS.2009.193
   Romano J., 2006, ANN M FLORIDA ASS IN
   Sawant A.A., 2016, 32 INT C SOFTW MAINT
   Sawant A.A., 2015, C MIN SOFTW REP
   Sawant A.A., 2017, FINE GRAPE FINE GRAI, V22
   Sawant Anand Ashok, 2017, EMPIRICAL SOFTWARE E
   Stylos J., 2007, S VIS LANG HUM CENTR
   Stylos J., 2006, WORKSH PSYCH PROGR I
   Swani K, 2017, IND MARKET MANAG, V62, P77, DOI 10.1016/j.indmarman.2016.07.006
   Thummalapenta S., 2008, INT WORK C MIN SOFTW
   Tian Y., 2014, INT C SOFTW MAINT EV
   Tufano M., 2015, INT C SOFTW ENG
   Wu W., 2010, INT C SOFTW ENG
   Xavier L., 2017, INT C SOFTW AN EV RE
   Zerouali A., 2017, INT C SOFTW AN EV RE
   Zibran M.F., 2011, WORK C REV ENG
   Zibran MF, 2008, INT J COMPUT SCI NET, V8, P255
NR 69
TC 11
Z9 13
U1 2
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 425
EP 458
DI 10.1007/s11219-019-09476-z
EA NOV 2019
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000499417700001
DA 2024-07-18
ER

PT J
AU Gergely, T
   Balogh, G
   Horváth, F
   Vancsics, B
   Beszédes, A
   Gyimóthy, T
AF Gergely, Tamas
   Balogh, Gergo
   Horvath, Ferenc
   Vancsics, Bela
   Beszedes, Arpad
   Gyimothy, Tibor
TI Differences between a static and a dynamic test-to-code traceability
   recovery method
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test-to-code traceability; Traceability link recovery; Unit testing;
   Code coverage; Structural test smells; Refactoring
ID UNIT TESTS
AB Recovering test-to-code traceability links may be required in virtually every phase of development. This task might seem simple for unit tests thanks to two fundamental unit testing guidelines: isolation (unit tests should exercise only a single unit) and separation (they should be placed next to this unit). However, practice shows that recovery may be challenging because the guidelines typically cannot be fully followed. Furthermore, previous works have already demonstrated that fully automatic test-to-code traceability recovery for unit tests is virtually impossible in a general case. In this work, we propose a semi-automatic method for this task, which is based on computing traceability links using static and dynamic approaches, comparing their results and presenting the discrepancies to the user, who will determine the final traceability links based on the differences and contextual information. We define a set of discrepancy patterns, which can help the user in this task. Additional outcomes of analyzing the discrepancies are structural unit testing issues and related refactoring suggestions. For the static test-to-code traceability, we rely on the physical code structure, while for the dynamic, we use code coverage information. In both cases, we compute combined test and code clusters which represent sets of mutually traceable elements. We also present an empirical study of the method involving 8 non-trivial open source Java systems.
C1 [Gergely, Tamas; Balogh, Gergo; Horvath, Ferenc; Vancsics, Bela; Beszedes, Arpad; Gyimothy, Tibor] Univ Szeged, Dept Software Engn, Szeged, Hungary.
   [Balogh, Gergo; Gyimothy, Tibor] Univ Szeged, MTA SZTE Res Grp Artificial Intelligence, Szeged, Hungary.
C3 Szeged University; Szeged University
RP Beszédes, A (corresponding author), Univ Szeged, Dept Software Engn, Szeged, Hungary.
EM gertom@inf.u-szeged.hu; geryxyz@inf.u-szeged.hu;
   hferenc@inf.u-szeged.hu; vancsics@inf.u-szeged.hu;
   beszedes@inf.u-szeged.hu; gyimothy@inf.u-szeged.hu
RI Vancsics, Béla/ABB-3957-2021; Gergely, Tamás/ABA-7259-2021; Balogh,
   Gergő/ABA-7560-2021
OI Vancsics, Béla/0000-0003-4584-3733; Gergely, Tamás/0000-0001-7504-3580;
   Balogh, Gergő/0000-0002-6781-5453; Beszedes, Arpad/0000-0002-5421-9302
FU Janos Bolyai Research Scholarship of the Hungarian Academy of Sciences
   [EFOP3.6.3-VEKOP-16-2017-0002]; European Social Fund
FX Arpad Beszedes was supported by the Janos Bolyai Research Scholarship of
   the Hungarian Academy of Sciences. Bela Vancsicses Tamas Gergely were
   supported by project number EFOP3.6.3-VEKOP-16-2017-0002, which is
   co-funded by the European Social Fund.
CR [Anonymous], 2007, COMP CLUSTERING OVER
   [Anonymous], 2012, ART SOFTWARE TESTING, DOI DOI 10.1002/9781119202486
   Anquetil N, 1998, PROC INT CONF SOFTW, P84, DOI 10.1109/ICSE.1998.671105
   Balogh G, 2016, IEEE INT WORK C SO, P137, DOI 10.1109/SCAM.2016.10
   Beck Kent L., 2003, Test Driven Development By Example
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Black R., 2012, FDN SOFTWARE TESTING
   Blondel VD, 2008, J STAT MECH-THEORY E, DOI 10.1088/1742-5468/2008/10/P10008
   Bóta A, 2011, ACTA CYBERN, V20, P35, DOI 10.14232/actacyb.20.1.2011.4
   Bouillon P, 2007, LECT NOTES COMPUT SC, V4536, P101
   Breugelmans M., 2008, WASDETT 1 1 INT WORK
   Bruntink M, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P136
   De Lucia A, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P21, DOI 10.1109/FOSM.2008.4659245
   Demeyer S., 2002, Object-Oriented Reengineering Patterns
   Feathers Michael, 2004, Working Effectively With Legacy Code: Work Effect Leg Code
   Fortunato S, 2010, PHYS REP, V486, P75, DOI 10.1016/j.physrep.2009.11.002
   Gaelli M, 2007, J OBJECT TECHNOL, V6, P71, DOI 10.5381/jot.2007.6.9.a4
   Gaelli Markus, 2005, P 13 INT SMALLT C IS
   Hamill Paul, 2004, Unit Test Frameworks: Tools for High-quality Software Development
   Hamilton J, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P579, DOI 10.1109/ICSM.2012.6405325
   Horvath Ferenc, 2015, P 14 S PROGR LANG SO, V1525, P46
   Kanstrén T, 2008, J SOFTW MAINT EVOL-R, V20, P59, DOI 10.1002/smr.362
   Meszaros G, 2007, UNIT TEST PATTERNS R
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Muller H. A., 1993, Journal of Software Maintenance: Research and Practice, V5, P181, DOI 10.1002/smr.4360050402
   Palla G, 2007, NATURE, V446, P664, DOI 10.1038/nature05670
   Pietrzak B, 2006, LECT NOTES COMPUT SC, V4044, P75
   Qusef A, 2014, J SYST SOFTWARE, V88, P147, DOI 10.1016/j.jss.2013.10.019
   Qusef Abdallah, 2010, 2010 IEEE International Conference on Software Maintenance. pp, P1
   SCHWANKE RW, 1991, 13TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P83, DOI 10.1109/ICSE.1991.130626
   Spanoudakis G, 2005, HANDBOOK OF SOFTWARE ENGINEERING AND KNOWLEDGE ENGINEERING, VOL 3: RECENT ADVANCES, P395, DOI 10.1142/9789812775245_0014
   Subelj L, 2011, PHYSICA A, V390, P2968, DOI 10.1016/j.physa.2011.03.036
   TENGERI D, 2015, P 8 IEEE INT C SOFTW, P1
   Tengeri D, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P225, DOI 10.1109/SANER.2016.61
   Tengeri D, 2014, IEEE INT WORK C SO, P47, DOI 10.1109/SCAM.2014.38
   van Deursen A., 2002, Extreme Programming Perspectives. Ed. by, P141
   Van Rompaey Bart, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering - Workshops, P11, DOI 10.1109/ASEW.2008.4686316
   Van Rompaey B, 2009, EUR CON SFTWR MTNCE, P209, DOI 10.1109/CSMR.2009.39
   Vidacs Laszlo, 2016, 2016 IEEE 23rd International Conference on Software Analysis, Evolution and Reengineering (SANER), P13, DOI 10.1109/SANER.2016.69
NR 39
TC 4
Z9 4
U1 2
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 797
EP 822
DI 10.1007/s11219-018-9430-x
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500012
OA Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Vale, G
   Fernandes, E
   Figueiredo, E
AF Vale, Gustavo
   Fernandes, Eduardo
   Figueiredo, Eduardo
TI On the proposal and evaluation of a benchmark-based threshold derivation
   method
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software metric; Threshold; Benchmark; Software product lines; Code
   smell
AB Software-intensive systems have been growing in both size and complexity. Consequently, developers need better support for measuring and controlling the software quality. In this context, software metrics aim at quantifying different software quality aspects. However, the effectiveness of measurement depends on the definition of reliable metric thresholds, i.e., numbers that characterize a metric value as critical given a quality aspect. In fact, without proper metric thresholds, it might be difficult for developers to indicate problematic software components for correction, for instance. Based on a literature review, we have found several existing methods for deriving metric thresholds and observed their evolution. Such evolution motivated us to propose a new method that incorporates the best of the existing methods. In this paper, we propose a novel benchmark-based method for deriving metric thresholds. We assess our method, called Vale's method, using a set of metric thresholds derived with the support of our method, aimed at composing detection strategies for two well-known code smells, namely god class and lazy class. For this purpose, we analyze three benchmarks composed of multiple software product lines. In addition, we demonstrate our method in practice by applying it to a benchmark composed of 103 Java open-source software systems. In the evaluation, we compare Vale's method to two state-of-the-practice threshold derivation methods selected as a baseline, which are Lanza's method and Alves' method. Our results suggest that the proposed method provides more realistic and reliable thresholds, with better recall and precision in the code smell detection, when compared to both baseline methods.
C1 [Vale, Gustavo; Fernandes, Eduardo; Figueiredo, Eduardo] Fed Univ Minas Gerais UFMG, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [Vale, Gustavo] Univ Passau, Dept Comp Sci, Passau, Germany.
   [Fernandes, Eduardo] Pontifical Catholic Univ Rio De Janeiro PUC Rio, Informat Dept, Rio De Janeiro, Brazil.
C3 Universidade Federal de Minas Gerais; University of Passau; Pontificia
   Universidade Catolica do Rio de Janeiro
RP Vale, G (corresponding author), Fed Univ Minas Gerais UFMG, Dept Comp Sci, Belo Horizonte, MG, Brazil.; Vale, G (corresponding author), Univ Passau, Dept Comp Sci, Passau, Germany.
EM vale@fim.uni-passau.de; eduardofernandes@dcc.ufmg.br;
   figueiredo@dcc.ufmg.br
RI Fernandes, Eduardo/F-8555-2017
OI Fernandes, Eduardo/0000-0002-1222-2247; Vale,
   Gustavo/0000-0002-8879-5797; Figueiredo, Eduardo/0000-0002-6004-2718
FU CAPES; CNPq [424340/2016-0, 290136/2015-6]; FAPEMIG [PPM-00651-17]
FX This work was partially supported by CAPES, CNPq (grant 424340/2016-0
   and 290136/2015-6), and FAPEMIG (grant PPM-00651-17).
CR Abilio R., 2014, P 21 BRAZ C SOFTW TO, P109
   Abilio R, 2016, INT WORKS EMERG TREN, P36, DOI [10.1145/2897695.2897701, 10.1109/WETSoM.2016.014]
   Abílio R, 2015, 2015 12TH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY - NEW GENERATIONS, P433, DOI 10.1109/ITNG.2015.76
   [Anonymous], 2010, IEEE INT C SOFTW MAI
   [Anonymous], 1994, Object-oriented software metrics: a practical guide
   Apel S, 2009, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2009.5070523
   Batory D, 1992, ACM T SOFTW ENG METH, V1, P335
   Brereton P, 2007, J SYST SOFTWARE, V80, P571, DOI 10.1016/j.jss.2006.07.009
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   COLEMAN D, 1995, J SYST SOFTWARE, V29, P3, DOI 10.1016/0164-1212(94)00125-7
   Concas G, 2007, IEEE T SOFTWARE ENG, V33, P687, DOI [10.1109/TSE.2007.1019, 10.1109/TSE.2007.1016]
   Dumke RR, 1997, FIFTH INTERNATIONAL SYMPOSIUM ON ASSESSMENT OF SOFTWARE TOOLS AND TECHNOLOGIES, PROCEEDINGS, P104, DOI 10.1109/AST.1997.599920
   Erni K, 1996, PROCEEDINGS OF THE 3RD INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, P64, DOI 10.1109/METRIC.1996.492444
   FENTON N, 1991, SOFTWARE METRICS RIG, P28
   Fernandes E, 2016, P 20 INT C EV ASS SO
   Fernandes E, 2017, LECT NOTES COMPUT SC, V10221, P48, DOI 10.1007/978-3-319-56856-0_4
   Ferreira KAM, 2012, J SYST SOFTWARE, V85, P244, DOI 10.1016/j.jss.2011.05.044
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261, DOI 10.1145/1368088.1368124
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   French V, 1999, P 4 INT WORKSH SOFTW
   Gamma G., 1995, Design Patterns: Elements of Reusable Object-Oriented Software
   Heitlager I, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P30, DOI 10.1109/QUATIC.2007.8
   Herbold S, 2011, EMPIR SOFTW ENG, V16, P812, DOI 10.1007/s10664-011-9162-z
   Kitchenham B., 2007, 23 EBSE, DOI DOI 10.1145/1134285.1134500
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Lima E. S., 2016, P 15 BRAZILIAN S COM, P1
   Louridas P, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391986
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mori A., 2018, INT C TECHN DEBT TEC
   Munro M, 2005, P 11 IEEE INT SOFTW, P1
   NEJMEH BA, 1988, COMMUN ACM, V31, P188, DOI 10.1145/42372.42379
   Oliveira P, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P254, DOI 10.1109/CSMR-WCRE.2014.6747177
   Padilha J., 2014, P 26 INT C ADV INF S
   Perkusich M, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1498, DOI 10.1145/2695664.2695749
   Riel J.A., 1996, OBJECT ORIENTED DESI
   Schulze S., 2010, GPCE, P103
   Ferreira GCS, 2014, SCI COMPUT PROGRAM, V93, P65, DOI 10.1016/j.scico.2013.10.010
   Spinellis D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P381, DOI 10.1145/1368088.1368140
   Tempero E, 2010, ASIA PAC SOFWR ENG, P336, DOI 10.1109/APSEC.2010.46
   Vale G., 2015, PROC INT SOFTWARE PR, P176
   Vale G, 2015, 2015 29TH BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, P110, DOI 10.1109/SBES.2015.9
   Vasa R, 2009, PROC IEEE INT CONF S, P179, DOI 10.1109/ICSM.2009.5306322
   Veado L, 2016, P 20 INT C EV ASS SO
NR 44
TC 13
Z9 14
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 275
EP 306
DI 10.1007/s11219-018-9405-y
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000008
DA 2024-07-18
ER

PT J
AU Chen, T
   Li, XQ
   Luo, XP
   Zhang, XS
AF Chen, Ting
   Li, Xiaoqi
   Luo, Xiapu
   Zhang, Xiaosong
TI System-level attacks against android by exploiting asynchronous
   programming
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Asynchronous programming; Android; IntentService; System-level attacks;
   Wi-Fi DoS; Telephone signal block; SIM card removal; Homescreen hiding;
   NFC state cheating
AB To avoid unresponsiveness, Android developers utilize asynchronous programming to schedule long-running tasks in the background. In this work, we conduct a systematic study on IntentService, one of the async constructs provided by Android using static program analysis, and find that in Android 6, 974 intents can be sent by third-party applications without protection. Based on this observation, we develop a tool, ATUIN, to demonstrate the feasibility of attacking a CPU automatically by exploiting the intents that can be handled by an Android system. Furthermore, by investigating the unprotected intents, we discover tens of critical vulnerabilities that have not been reported before, including Wi-Fi DoS, telephone signal blocking, SIM card removal, homescreen hiding, and NFC state cheating. Our study sheds light on research into protecting asynchronous programming from being exploited by hackers.
C1 [Chen, Ting; Zhang, Xiaosong] Univ Elect Sci & Technol China, Cybersecur Res Ctr, Chengdu, Sichuan, Peoples R China.
   [Li, Xiaoqi; Luo, Xiapu] Hong Kong Polytech Univ, Dept Comp, Kowloon, Hong Kong, Peoples R China.
C3 University of Electronic Science & Technology of China; Hong Kong
   Polytechnic University
RP Chen, T (corresponding author), Univ Elect Sci & Technol China, Cybersecur Res Ctr, Chengdu, Sichuan, Peoples R China.
EM brokendragon@uestc.edu.cn; csxqli@comp.polyu.edu.hk;
   csxluo@comp.polyu.edu.hk; johnsonzxs@uestc.edu.cn
RI Li, Xiaoqi/AAF-1992-2020; Li, Xiaoqi/I-2235-2014
OI Li, Xiaoqi/0000-0002-6012-9178; Li, Xiaoqi/0000-0002-6012-9178; Luo,
   Xiapu/0000-0002-9082-3208
FU Hong Kong GRF [PolyU 152279/16E]; HKPolyU Research Grants (G-YBJX);
   Shenzhen City Science and Technology RD Fund [JCYJ20150630115257892];
   National Natural Science Foundation of China [61402080, 61572115,
   61502086, 61572109]; China Postdoctoral Science Foundation [2014M562307]
FX This work is supported in part by the Hong Kong GRF (PolyU 152279/16E),
   the HKPolyU Research Grants (G-YBJX), Shenzhen City Science and
   Technology R&D Fund (No. JCYJ20150630115257892), the National Natural
   Science Foundation of China (Nos. 61402080, 61572115, 61502086, and
   61572109), and China Postdoctoral Science Foundation founded project
   (No. 2014M562307). We specially thank Dr. Yajuan Tang from College of
   Engineering, Shantou University for her assist in improving our paper.
CR [Anonymous], 2015, Proc. of the Annual International Conference on Mobile Systems, Applications, and Services MobiSys '15
   [Anonymous], 2014, 2014 DES AUT TEST EU
   Armando A, 2012, IFIP ADV INF COMM TE, V376, P13
   Bauer Michael, 2015, NANSA NO ATTRIBUTION
   Chen T., 2016, P GLOBECOM
   Eian M., 2012, P INFOCOM
   Fiore Ugo, 2014, 2014 IEEE 11th Consumer Communications and Networking Conference (CCNC), P145, DOI 10.1109/CCNC.2014.6866562
   Guo CR, 2013, IEEE INT CONF AUTOM, P389, DOI 10.1109/ASE.2013.6693097
   Huang HQ, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1236, DOI 10.1145/2810103.2813606
   Jindal A., 2013, P WORKSHOP POWER AWA, P1
   Jindal Abhilash., 2013, P 8 ACM EUROPEAN C C, P253
   Kang Y, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P410, DOI 10.1145/2950290.2950316
   Lee K., 2015, ANAL CLOUD GAMING PL, P151
   Lin Y, 2015, IEEE INT CONF AUTOM, P224, DOI 10.1109/ASE.2015.50
   Lin Y, 2014, PROC IEEE INT CONF S, P341, DOI 10.1109/ICSME.2014.56
   Linares-Vásquez M, 2015, PROC IEEE INT CONF S, P352, DOI 10.1109/ICSM.2015.7332486
   Liu YP, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1013, DOI 10.1145/2568225.2568229
   Nguyen D.T., 2015, PROC ANN INT C MOBIL, P287, DOI DOI 10.1145/2742647.2742661
   Pathak A., 2012, Mobisys, DOI DOI 10.1145/2307636.2307661
   Schartner P., 2012, TRSYSSEC1201 U KLAG
   Terada Takeshi., 2014, Attacking Android browsers via intent scheme
   Wang K., 2016, CCS 16, P92
   Xu G., 2012, P PLDI, P174
   Yang K, 2014, ASIA PACIF MICROWAVE, P531
   Yang SQ, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON THE ENGINEERING OF MOBILE-ENABLED SYSTEMS (MOBS), P1, DOI 10.1109/MOBS.2013.6614215
   Zhang LD, 2012, CODES+ISSS'12:PROCEEDINGS OF THE TENTH ACM INTERNATIONAL CONFERENCE ON HARDWARE/SOFTWARE-CODESIGN AND SYSTEM SYNTHESIS, P363
NR 26
TC 1
Z9 1
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 1037
EP 1062
DI 10.1007/s11219-017-9374-6
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000008
DA 2024-07-18
ER

PT J
AU Nanthaamornphong, A
   Carver, JC
AF Nanthaamornphong, Aziz
   Carver, Jeffrey C.
TI Test-Driven Development in scientific software: a survey
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software engineering; Test-Driven Development; Survey
AB Scientific software developers are increasingly employing various software engineering practices. Specifically, scientists are beginning to use Test-Driven Development (TDD). Even with this increasing use of TDD, the effect of TDD on scientific software development is not fully understood. To help scientific developers determine whether TDD is appropriate for their scientific projects, we surveyed scientific developers who use TDD to understand: (1) TDDs effectiveness, (2) the benefits and challenges of using TDD, and (3) the use of refactoring practices (an important part of the TDD process). Some key positive results include: (1) TDD helps scientific developers increase software quality, in particular functionality and reliability; and (2) TDD helps scientific developers reduce the number of problems in the early phase of projects. Conversely, some key challenges include: (1) TDD may not be effective for all types of scientific projects; and (2) Writing a good test is the most difficult task in TDD, particularly in a parallel computing environment. To summarize, TDD generally has a positive effect on the quality of scientific software, but it often requires a large effort investment. The results of this survey indicate the need for additional empirical evaluation of the use of TDD for the development of scientific software to help organizations make better decisions.
C1 [Nanthaamornphong, Aziz] Prince Songkla Univ, Dept Informat & Commun Technol, Phuket Campus, Phuket, Thailand.
   [Carver, Jeffrey C.] Univ Alabama, Dept Comp Sci, Tuscaloosa, AL 35487 USA.
C3 Prince of Songkla University; University of Alabama System; University
   of Alabama Tuscaloosa
RP Carver, JC (corresponding author), Univ Alabama, Dept Comp Sci, Tuscaloosa, AL 35487 USA.
EM aziz.n@phuket.psu.ac.th; carver@cs.ua.edu
RI Nanthaamornphong, Aziz/IZD-8599-2023; Nanthaamornphong,
   Aziz/W-3552-2019; Carver, Jeffrey/AFP-1987-2022; Carver,
   Jeffrey/AAM-8202-2020
OI Nanthaamornphong, Aziz/0000-0002-1618-6001; Nanthaamornphong,
   Aziz/0000-0002-1618-6001; Carver, Jeffrey/0000-0002-7824-9151; Carver,
   Jeffrey/0000-0002-7824-9151
FU NSF [1243887, 1445344]; Direct For Computer & Info Scie & Enginr; Div Of
   Information & Intelligent Systems [1243887] Funding Source: National
   Science Foundation; Direct For Computer & Info Scie & Enginr; Office of
   Advanced Cyberinfrastructure (OAC) [1445344] Funding Source: National
   Science Foundation
FX The authors gratefully thank all participants in the survey for their
   time and contributions. Jeffrey Carver would like to acknowledge partial
   support from NSF Grants 1243887 and 1445344.
CR Abdel-Hamid AN, 2013, 2013 AGILE CONFERENCE (AGILE), P129, DOI 10.1109/AGILE.2013.18
   [Anonymous], 2011, ISO 13314
   [Anonymous], 2004, XP Ser
   Beck Kent L., 2003, Test Driven Development By Example
   Carver J, 2011, J ORGAN END USER COM, V23, P1, DOI 10.4018/joeuc.2011100101
   Carver JC, 2007, PROC INT CONF SOFTW, P550
   Desai Chetan, 2008, SIGCSE Bulletin, V40, P97, DOI 10.1145/1383602.1383644
   Eclipse, 2013, PHOTR INT DEV ENV RE
   Erdogmus H, 2005, IEEE T SOFTWARE ENG, V31, P226, DOI 10.1109/TSE.2005.37
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Janzen D, 2005, COMPUTER, V38, P43, DOI 10.1109/MC.2005.314
   Kollanus S, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P403, DOI 10.1109/QUATIC.2010.73
   Koskela L., 2007, Test Driven: Practical TDD and Acceptance TDD for Java Developers
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Nanthaamornphong A, 2014, COMPUT SCI ENG, V16, P36, DOI 10.1109/MCSE.2014.33
   Nanthaamornphong A, 2013, 2013 5TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR COMPUTATIONAL SCIENCE AND ENGINEERING (SE-CSE), P9, DOI 10.1109/SECSE.2013.6615094
   Opdyke William F., 1992, THESIS
   Orchard D. A., 2013, P 2013 ACM WORKSH WO, P29, DOI [10.1145/2541348.2541356, DOI 10.1145/2541348.2541356]
   Overbey J., 2005, Proceedings of the second international workshop on Software engineering for high performance computing system applications, P37, DOI DOI 10.1145/1145319.1145331
   Overbey JL, 2009, 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING FOR COMPUTATIONAL SCIENCE AND ENGINEERING, P28, DOI 10.1109/SECSE.2009.5069159
   Rafique Y, 2013, IEEE T SOFTWARE ENG, V39, P835, DOI 10.1109/TSE.2012.28
   Ruparelia N. B., 2010, SIGSOFT Softw. Eng. Notes, V35, P8, DOI DOI 10.1145/1764810.1764814
   Sanchez JC, 2007, AGILE 2007, PROCEEDINGS, P5, DOI 10.1109/AGILE.2007.43
   Sanders R, 2008, IEEE SOFTWARE, V25, P21, DOI 10.1109/MS.2008.84
   Sletholt M.T., 2011, Proceedings of the 4th International Workshop on Software Engineering for Computational Science and Engineering, P1, DOI DOI 10.1145/1985782.1985784
   Sletholt MT, 2012, COMPUT SCI ENG, V14, P24, DOI 10.1109/MCSE.2011.113
   Strauss Anselm L., 1990, BASICS QUALITATIVE R
NR 28
TC 11
Z9 14
U1 3
U2 26
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 343
EP 372
DI 10.1007/s11219-015-9292-4
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU8EZ
UT WOS:000401271700001
DA 2024-07-18
ER

PT J
AU Assiri, FY
   Bieman, JM
AF Assiri, Fatmah Yousef
   Bieman, James M.
TI Fault localization for automated program repair: effectiveness,
   performance, repair correctness
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automated program repair; Brute-force; Fault localization technique;
   Effectiveness; Performance; Repair correctness
AB Automated program repair (APR) tools apply fault localization (FL) techniques to identify the locations of likely faults to be repaired. The effectiveness, performance, and repair correctness of APR depends in part on the FL method used. If FL does not identify the location of a fault, the application of an APR tool will not be effective-it will fail to repair the fault. If FL assigns the actual faulty statement a low priority for repair, APR performance will be reduced by increasing the time required to find a potential repair. In addition, the correctness of a generated repair will be decreased since APR will modify fault-free statements that are assigned a higher priority for repair than an actual faulty statement. We conducted a controlled experiment to evaluate the impact of ten FL techniques on APR effectiveness, performance, and repair correctness using a brute force APR tool applied to faulty versions of the Siemens Suite and two other large programs: space and sed. All FL techniques were effective in identifying all faults; however, Wong3 and Ample1 were the least effective FL techniques since they assigned the lowest priority for repair in more than 26 % of the trials. We obtained the worst APR performance significantly when Ample1 was used since it generated a large number of variants in 29.11 % of the trials, and took the longest time to produce potential repairs. Jaccard FL improved repair correctness by generating more validated repairs-potential repairs that pass a set of regression tests, and generating potential repairs that failed fewer regression tests. Also Jaccard's performance is noteworthy in that it never generated a large number of variants during the repair process compared to the alternatives.
C1 [Assiri, Fatmah Yousef; Bieman, James M.] Colorado State Univ, CS Dept, Ft Collins, CO 80523 USA.
C3 Colorado State University
RP Assiri, FY (corresponding author), Colorado State Univ, CS Dept, Ft Collins, CO 80523 USA.
EM fyassiri@gmail.com
OI Assiri, Fatmah/0000-0003-4959-5888
FU Ministry of Higher Education, Saudi Arabia
FX This project was supported by the Ministry of Higher Education, Saudi
   Arabia. The authors would like to thank Westley Weimer and his research
   group for sharing GenProg tool and Qi et al. (2013) for sharing the
   GenProg-FL tool.
CR Abreu R, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P89, DOI 10.1109/TAIC.PART.2007.13
   Abreu R, 2006, 12TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P39
   Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   Ackling T, 2011, GECCO-2011: PROCEEDINGS OF THE 13TH ANNUAL GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1427
   Agrawal H, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P143, DOI 10.1109/ISSRE.1995.497652
   [Anonymous], THESIS
   [Anonymous], 2013, P 2013 INT S SOFTW T
   [Anonymous], 2014, P 2014 ICST C ICST 1
   Arcuri A, 2011, APPL SOFT COMPUT, V11, P3494, DOI 10.1016/j.asoc.2011.01.023
   Arcuri A, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P1003
   Baah GK, 2010, IEEE T SOFTWARE ENG, V36, P528, DOI 10.1109/TSE.2009.87
   Brown H., 2015, Applied Mixed Models in Medicine, V3rd ed.
   Chen MY, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P595, DOI 10.1109/DSN.2002.1029005
   Chilimbi TM, 2009, PROC INT CONF SOFTW, P34, DOI 10.1109/ICSE.2009.5070506
   Dallmeier V, 2005, LECT NOTES COMPUT SC, V3586, P528
   Dallmeier V., 2007, P 22 IEEE ACM INT C, P433
   Debroy Vidroha, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P65, DOI 10.1109/ICST.2010.66
   Debroy V, 2014, J SYST SOFTWARE, V90, P45, DOI 10.1016/j.jss.2013.10.042
   Delamaro ME, 2001, KLUW INT S ADV DATA, V24, P91
   Forrest Stephanie, 2009, P 11 ANN C GEN EV CO, P947
   Hailpern B, 2002, IBM SYST J, V41, P4, DOI 10.1147/sj.411.0004
   Nguyen HDT, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P772, DOI 10.1109/ICSE.2013.6606623
   Jones J.A., 2001, Proceedings of ICSE 2001 Workshop on Software Visualization, Toronto, Ontario, Canada, P71
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   Le Goues C., 2012, IEEE Transactions on Software Engineering, V38, P54, DOI 10.1109/TSE.2011.104
   Le Goues C, 2012, PROCEEDINGS OF THE FOURTEENTH INTERNATIONAL CONFERENCE ON GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P959, DOI 10.1145/2330163.2330296
   Lee HJ, 2009, 2009 2ND IEEE INTERNATIONAL CONFERENCE ON COMPUTER SCIENCE AND INFORMATION TECHNOLOGY, VOL 4, P501, DOI 10.1109/ICCSIT.2009.5234512
   Lo D., 2010, Software Maintenance (ICSM), 2010 IEEE International Confer- ence on, P1, DOI DOI 10.1109/ICSM.2010.5609542
   Meyer AD, 2004, GENET MOL BIOL, V27, P83, DOI 10.1590/S1415-47572004000100014
   Naish L, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000791.2000795
   Pei Y, 2014, IEEE T SOFTWARE ENG, V40, P427, DOI 10.1109/TSE.2014.2312918
   Purushothaman R, 2005, IEEE T SOFTWARE ENG, V31, P511, DOI 10.1109/TSE.2005.74
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Weimer W, 2010, COMMUN ACM, V53, P109, DOI 10.1145/1735223.1735249
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Xie XY, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522924
NR 38
TC 29
Z9 32
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 171
EP 199
DI 10.1007/s11219-016-9312-z
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400007
DA 2024-07-18
ER

PT J
AU Lindholm, C
   Notander, JP
   Höst, M
AF Lindholm, Christin
   Notander, Jesper Pedersen
   Host, Martin
TI A case study on software risk analysis and planning in medical device
   development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Risk management; Risk analysis; Risk planning Software development;
   Medical device development
ID HEALTH-CARE
AB Software failures in medical devices can lead to catastrophic situations. Therefore, it is crucial to handle software-related risks when developing medical devices, and there is a need for further analysis of how this type of risk management should be conducted. The objective of this paper is to collect and summarise experiences from conducting risk management with an organisation developing medical devices. Specific focus is put on the first steps of the risk management process, i.e. risk identification, risk analysis, and risk planning. The research is conducted as action research, with the aim of analysing and giving input to the organisation's introduction of a software risk management process. First, the method was defined based on already available methods and then used. The defined method focuses on user risks, based on scenarios describing the expected use of the medical device in its target environment. During the use of the method, different stakeholders, including intended users, were involved. Results from the case study show that there are challenging problems in the risk management process with respect to definition of the system boundary and system context, the use of scenarios as input to the risk identification, estimation of detectability during risk analysis, and action proposals during risk planning. It can be concluded that the risk management method has potential to be used in the development organisation, although future research is needed with respect to, for example, context limitation and how to allow for flexible updates of the product.
C1 [Lindholm, Christin; Notander, Jesper Pedersen; Host, Martin] Lund Univ, Software Engn Res Grp, Dept Comp Sci, Fac Engn, S-22100 Lund, Sweden.
C3 Lund University
RP Lindholm, C (corresponding author), Lund Univ, Software Engn Res Grp, Dept Comp Sci, Fac Engn, Box 118, S-22100 Lund, Sweden.
EM christin.lindholm@cs.lth.se; jesper.notander@cs.lth.se;
   martin.host@cs.lth.se
RI Höst, Martin/KDN-4323-2024
OI Höst, Martin/0000-0002-9360-8693
FU Gyllenstiernska Krapperup-stiftelsen; Swedish Foundation for Strategic
   Research
FX The authors would like to gratefully acknowledge the persons involved in
   this case study. The authors would also like to acknowledge
   Gyllenstiernska Krapperup-stiftelsen for funding the research studies of
   Christin Lindholm. This work was also partly funded by The Swedish
   Foundation for Strategic Research under a grant to Lund University for
   ENGROSS-ENabling GROwing Software Systems. Prof. Boris Magnusson is
   acknowledged for the support in the study and the writing of this paper.
CR [Anonymous], FOOD DRUG COSM ACT S
   [Anonymous], IEEE INT C COMP SYST
   [Anonymous], P 4 SOFTW QUAL DAYS
   [Anonymous], P 2 INT C EB INF SYS
   [Anonymous], P REL MAINT S RAMS L
   [Anonymous], P 14 IEEE S COMP BAS
   [Anonymous], PHYSL MEASUREMENT
   [Anonymous], P INT C SOFTW ENG IC
   [Anonymous], P ACM INT C PERV SER
   [Anonymous], DO IT DES INTR HUM F
   [Anonymous], MED DEV US SAF INC H
   BOEHM BW, 1991, IEEE SOFTWARE, V8, P32, DOI 10.1109/52.62930
   Bovee MW, 2001, IEEE T ENG MANAGE, V48, P465, DOI 10.1109/17.969424
   Charette R. N., 1989, SOFTWARE ENG RISK AN
   Chiozza ML, 2009, CLIN CHIM ACTA, V404, P75, DOI 10.1016/j.cca.2009.03.015
   Crouhy Michel., 2006, ESSENTIALS RISK MANA
   Dey PK, 2007, IND MANAGE DATA SYST, V107, P284, DOI 10.1108/02635570710723859
   Dhillon B.S., 2008, Reliability Technology, Human Error, and Quality in Health Care
   Dhillon BS., 2000, MED DEVICE RELIABILI
   Fairley RE, 2005, IEEE SOFTWARE, V22, P101, DOI 10.1109/MS.2005.77
   Garde S, 2006, REQUIR ENG, V11, P265, DOI 10.1007/s00766-006-0029-6
   Habraken MMP, 2009, ERGONOMICS, V52, P809, DOI 10.1080/00140130802578563
   Hall E.M., 1998, Managing risk: Methods for software systems development
   Jones C., 1994, Assessment and control of software risks
   Leveson N.G., 1995, Safeware: System Safety and Computers
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Leveson NG, 2011, ENG SYST, P1
   Linberg K. R., 1993, Proceedings of Sixth Annual IEEE Symposium on Computer-Based Medical Systems (Cat. No.93CH3326-6), P278, DOI 10.1109/CBMS.1993.263006
   Mc Caffery F, 2010, SOFTWARE QUAL J, V18, P81, DOI 10.1007/s11219-009-9086-7
   McCaffery F, 2005, 12th IEEE International Conference and Workshops on the Engineering of Computer-Based Systems, Proceedings, P273, DOI 10.1109/ECBS.2005.13
   Rakitin SR, 2006, COMPUTER, V39, P40, DOI 10.1109/MC.2006.123
   Reason J., 1991, HUMAN ERROR
   Robson C., 2002, Real world research
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Schmuland C, 2005, IEEE T DEVICE MAT RE, V5, P488, DOI 10.1109/TDMR.2005.857860
   Schneider P., 1990, Proceedings of the 1990 Symposium on Applied Computing (Cat. No.90TH0307-9), P20, DOI 10.1109/SOAC.1990.82134
   Sommerville Ian, 2016, Software engineering 8
   Vishnuvajjala R. V., 1996, Proceedings. Ninth IEEE Symposium on Computer-Based Medical Systems (Cat. No.96CB35923), P18, DOI 10.1109/CBMS.1996.507119
   Yin R.K., 2011, Qualitative research from start to finish
NR 39
TC 5
Z9 10
U1 0
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2014
VL 22
IS 3
BP 469
EP 497
DI 10.1007/s11219-013-9222-2
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK6IH
UT WOS:000338530800005
DA 2024-07-18
ER

PT J
AU Korhonen, K
AF Korhonen, Kirsi
TI Evaluating the impact of an agile transformation: a longitudinal case
   study in a distributed context
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Agile software development; Agile transformation; Defect management;
   Distributed development; Agile adoption
ID SOFTWARE-DEVELOPMENT; TRANSITION; MANAGEMENT; QUALITY; DRIVEN
AB Many software-development organizations have recently started to adopt agile practices in order to benefit from the improvements they clearly bring, in terms of production speed and software quality, for example. However, in a large, distributed organization, such as Nokia Siemens Networks, an agile transformation may be a long-term, complex process, and therefore, evaluating the benefits achieved, and measuring the success of the change, can be difficult, especially in the early phases of the transformation. This paper is based on the results of a case study on the impact introducing agile practices actually had in a large, software-development organization, part of Nokia Siemens Networks. The impact of this agile transformation was evaluated in terms of how well it succeeded in achieving the goals set by the management before the transformation started. This longitudinal study included two separate analyses, made at 6 monthly intervals, which measured what agile practices were really in use in the organization, and what effects, if any, were visible in terms of the goals which had been set by the management The 6 monthly analyses included defect data metrics and opinion surveys of the personnel directly involved in the transformation. The study showed two things: firstly, that the introduction of agile practices does have the beneficial effects that one would expect, and secondly, that, using this kind of study, it is not only possible to evaluate the impact that the adoption of agile practices has in a large, established software-development company, but also that the effects are visible at a surprisingly early stage.
C1 Nokia Siemens Networks, Tampere 33100, Finland.
C3 Nokia Corporation; Siemens AG; Nokia Siemens Networks
RP Korhonen, K (corresponding author), Nokia Siemens Networks, Hatanpaanvaltatie 30, Tampere 33100, Finland.
EM kirsi.korhonen@nsn.com
FU Nokia Foundation
FX The author thanks Kai Koskimies and Maria Lahti for their comments, and
   Nokia Foundation for funding the manuscript writing.
CR Auvinen J., 2005, 716 TUCS
   Begel A, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P120
   Ceschi M, 2005, IEEE SOFTWARE, V22, P21, DOI 10.1109/MS.2005.75
   DeClue T., 2003, J COMPUTING SMALL CO, V18, P49
   Dymond R, 2006, P AG 2006, P128
   Goeschl S., 2010, P 1 WORKSH TEST OBJ
   Ileva S., 2004, P EUR C, P393
   Kettunen P., 2007, COMBINING AGILE SOFT
   Korhonen K., 2012, THESIS TAMPERE U TEC
   Korhonen K., 2008, P 19 INT S SOFTW REL, P213
   Korhonen K., 2011, SOFTWARE QUALITY PRO, V14, P23
   Korhonen K, 2010, LECT NOTES BUS INF, V48, P88
   Korhonen K, 2009, LECT NOTES BUS INF, V31, P73
   Laanti M, 2011, INFORM SOFTWARE TECH, V53, P276, DOI 10.1016/j.infsof.2010.11.010
   Laanti M, 2010, LECT NOTES BUS INF P, V65, P3, DOI 10.1007/978-3-642-16416-3_2
   Li J., 2010, P ACM IEEE INT S EMP, P1
   Lifshitz G, 2008, LECT NOTES BUS INF P, V9, P212
   Lindvall M, 2004, COMPUTER, V37, P26, DOI 10.1109/MC.2004.231
   McDowell C., 2002, SIGCSE Bulletin, V34, P38, DOI 10.1145/563517.563353
   Nagappan N, 2008, EMPIR SOFTW ENG, V13, P289, DOI 10.1007/s10664-008-9062-z
   Petersen K, 2010, EMPIR SOFTW ENG, V15, P654, DOI 10.1007/s10664-010-9136-6
   Poppendieck M., 2007, Lean software development, V1st
   Royce W.W., 1970, P IEEE WESCON IEEE, P1
   Schatz B, 2005, IEEE SOFTWARE, V22, P36, DOI 10.1109/MS.2005.74
   Schwaber K., 2002, AGILE SOFTWARE DEV S
   Sillitti A., 2005, P 11 IEEE INT SOFTWA, P17, DOI DOI 10.1109/METRICS.2005.29
   Stamelos I., 2010, P QUATIC 2010
   Van Solingen Rini, 1999, The Goal/ Question/ Metric Method: a practical guide for quality improvement of software development
   Vilkki K., 2009, FLEXI NEWSLETTER
   Whiston S.C., 1993, J CAREER DEV, V19, P175
NR 30
TC 24
Z9 33
U1 2
U2 56
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2013
VL 21
IS 4
BP 599
EP 624
DI 10.1007/s11219-012-9189-4
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 209FT
UT WOS:000323741000004
DA 2024-07-18
ER

PT J
AU Çalikli, G
   Bener, AB
AF Calikli, Gul
   Bener, Ayse Basar
TI Influence of confirmation biases of developers on software quality: an
   empirical study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Human factors; Software psychology; Defect prediction; Confirmation bias
ID DEFECT PREDICTION; PERFORMANCE; EXPERIENCE
AB The thought processes of people have a significant impact on software quality, as software is designed, developed and tested by people. Cognitive biases, which are defined as patterned deviations of human thought from the laws of logic and mathematics, are a likely cause of software defects. However, there is little empirical evidence to date to substantiate this assertion. In this research, we focus on a specific cognitive bias, confirmation bias, which is defined as the tendency of people to seek evidence that verifies a hypothesis rather than seeking evidence to falsify a hypothesis. Due to this confirmation bias, developers tend to perform unit tests to make their program work rather than to break their code. Therefore, confirmation bias is believed to be one of the factors that lead to an increased software defect density. In this research, we present a metric scheme that explores the impact of developers' confirmation bias on software defect density. In order to estimate the effectiveness of our metric scheme in the quantification of confirmation bias within the context of software development, we performed an empirical study that addressed the prediction of the defective parts of software. In our empirical study, we used confirmation bias metrics on five datasets obtained from two companies. Our results provide empirical evidence that human thought processes and cognitive aspects deserve further investigation to improve decision making in software development for effective process management and resource allocation.
C1 [Calikli, Gul] Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
   [Bener, Ayse Basar] Ryerson Univ, Ted Rogers Sch Informat Technol Management, Toronto, ON M5B 2K3, Canada.
C3 Bogazici University; Toronto Metropolitan University
RP Çalikli, G (corresponding author), Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
EM gul.calikli@boun.edu.tr; ayse.bener@ryerson.ca
RI Basar, Ayse/ABF-9265-2020
OI Basar, Ayse/0000-0003-4934-8326; Calikli, Gul/0000-0003-4578-1747
CR [Anonymous], P 17 INT S SOFTW REL
   [Anonymous], 2008, Proceedings of the 4th International Workshop on Predictor Models in Software Engineering, PROMISE '08
   Bell R., 2006, Proc. 2006 International Symposium on Software Testing and Analysis, P61
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Bullard LA, 2007, ICMLA 2007: SIXTH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS, PROCEEDINGS, P204, DOI 10.1109/ICMLA.2007.69
   Calikli G., 2010, P 32 INT C SOFTW ENG
   Calikli G., 2010, P 5 INT WORKSH PRED
   Calikli Gul, 2010, P WORKSH PSYCH PROGR
   CHENG PW, 1985, COGNITIVE PSYCHOL, V17, P391, DOI 10.1016/0010-0285(85)90014-3
   COHEN J, 1992, PSYCHOL BULL, V112, P155, DOI 10.1037/0033-2909.112.1.155
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cook T. D., 1979, QUASIEXPERIMENTATION
   COSMIDES L, 1989, COGNITION, V31, P187, DOI 10.1016/0010-0277(89)90023-1
   COX JR, 1982, MEM COGNITION, V10, P496, DOI 10.3758/BF03197653
   Drummond C., 2003, P 2 WORKSH LEARN IMB
   Evans J.St.B.T., 1993, Human reasoning: The psychology of deduction
   EVANS JSBT, 1973, BRIT J PSYCHOL, V64, P391, DOI 10.1111/j.2044-8295.1973.tb01365.x
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Griggs R. A., 1983, ROLE PROBLEM CONTENT
   GRIGGS RA, 1986, SOC STUD SCI, V16, P319, DOI 10.1177/0306312786016002007
   GRIGGS RA, 1982, BRIT J PSYCHOL, V73, P407, DOI 10.1111/j.2044-8295.1982.tb01823.x
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Harrold MaryJean., 2000, ICSE 00 P C FUTURE S, P61
   JACKSON SL, 1988, B PSYCHONOMIC SOC, V26, P327, DOI 10.3758/BF03337671
   Jiang Y., 2008, P 4 INT WORKSH PRED
   JOHNSONLAIRD PN, 1972, Q J EXP PSYCHOL, V24, P87, DOI 10.1080/14640747208400271
   JOHNSONLAIRD PN, 1970, COGNITIVE PSYCHOL, V1, P134, DOI 10.1016/0010-0285(70)90009-5
   Jorgensen M, 2007, INT J FORECASTING, V23, P449, DOI 10.1016/j.ijforecast.2007.05.008
   Jorgensen M, 2010, INFORM SOFTWARE TECH, V52, P506, DOI 10.1016/j.infsof.2009.12.002
   Kahneman D., 1982, JUDGMENT UNCERTAINTY, P201, DOI DOI 10.1017/CBO9780511809477
   Kamei Yasutaka, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P196
   Khoshgoftaar T. M., 2003, P GEN EV COMP C
   Khoshgoftaar T. M., 1999, P 4 IEEE INT S HIGH
   Khoshgoftaar TM, 2010, IEEE T NEURAL NETWOR, V21, P813, DOI 10.1109/TNN.2010.2042730
   Khoshgoftaar TM, 1996, IEEE T RELIAB, V45, P456, DOI 10.1109/24.537016
   Kocaguneli Ekrem, 2009, Proceedings 21st International Conference on Software Engineering & Knowledge Engineering (SEKE 2009), P637
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Mair C., 2011, P 2 INT WORKSH EM TR
   Manktelow K.I., 1990, INFERENCE UNDERSTAND
   MANKTELOW KI, 1979, BRIT J PSYCHOL, V70, P477, DOI 10.1111/j.2044-8295.1979.tb01720.x
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Meneely A., 2008, P 16 ACM SIGSOFT INT, P13, DOI DOI 10.1145/1453101.1453106
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Misirli T., 2011, Proceedings of 2nd International Workshop on Emerging Trends in Software Metrics, P45
   Mockus A, 2000, BELL LABS TECH J, V5, P169, DOI 10.1002/bltj.2229
   MUNSON JC, 1992, IEEE T SOFTWARE ENG, V18, P423, DOI 10.1109/32.135775
   Nagappan N, 2004, PROC INT CONF SOFTW, P60, DOI 10.1109/ICSE.2004.1317422
   Nagappan Nachiappan, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P364
   Nagappan N, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P521, DOI 10.1145/1368088.1368160
   Ostrand T. J., 2010, P 6 INT C PRED MOD S, P19, DOI [DOI 10.1145/1868328, 10.1145/1868328]
   Ostrand T.J., 2007, Proceedings of the 2007 international symposium on Software testing and analysis (ISSTA '07), P219
   Ostrand TJ., 2004, Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA '04, V29, P86, DOI [DOI 10.1145/1013886.1007524, 10.1145/1013886.1007524]
   Parsons J, 2004, IEEE T SOFTWARE ENG, V30, P873, DOI 10.1109/TSE.2004.94
   Pinzger M., 2008, P 16 ACM SIGSOFT INT, P13
   Poletiek F.H., 2001, HYPOTHESIS TESTING B
   REICH SS, 1982, BRIT J PSYCHOL, V73, P395, DOI 10.1111/j.2044-8295.1982.tb01822.x
   ROTH EM, 1979, BRIT J PSYCHOL, V70, P265, DOI 10.1111/j.2044-8295.1979.tb01684.x
   STACY W, 1995, COMMUN ACM, V38, P57, DOI 10.1145/203241.203256
   Tahat LH, 2001, P INT COMP SOFTW APP, P489, DOI 10.1109/CMPSAC.2001.960658
   Teasley B., 1993, P 5 WORKSH EMP STUD
   TEASLEY BE, 1994, J APPL PSYCHOL, V79, P142, DOI 10.1037/0021-9010.79.1.142
   Tosun A., 2008, P 2 INT S EMP SOFTW
   Tosun Aye, 2009, P 5 INT C PRED MOD S
   Turhan Burak, 2008, SEKE 2008. The 20th International Conference Proceedings on Software Engineering & Knowledge Engineering, P143
   Turhan B., 2008, P 34 INT EUROMICRO S
   Turhan B, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P231
   Turhan Burak., 2008, DEFECTS 08, P26, DOI [10.1145/1390817.1390824, DOI 10.1145/1390817.1390824]
   VALENTINE ER, 1975, BRIT J EDUC PSYCHOL, V45, P198, DOI 10.1111/j.2044-8279.1975.tb03244.x
   WASON PC, 1971, Q J EXP PSYCHOL, V23, P63, DOI 10.1080/00335557143000068
   WASON PC, 1968, Q J EXP PSYCHOL, V20, P273, DOI 10.1080/14640746808400161
   WASON PC, 1960, Q J EXP PSYCHOL, V12, P129, DOI 10.1080/17470216008416717
   Weyuker Elaine J., 2007, 2007 3rd International Workshop on Predictor Models in Software Engineering
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   Ye M., 2011, DOES GRADUALISM BUIL
   Zhao M, 1998, INFORM SOFTWARE TECH, V40, P801, DOI 10.1016/S0950-5849(98)00098-6
   Zimmermann T, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P227, DOI 10.1109/ISSRE.2007.19
NR 77
TC 23
Z9 26
U1 1
U2 25
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2013
VL 21
IS 2
BP 377
EP 416
DI 10.1007/s11219-012-9180-0
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 114MX
UT WOS:000316746700007
DA 2024-07-18
ER

PT J
AU Cavalcanti, YC
   Neto, PADS
   Lucrédio, D
   Vale, T
   de Almeida, ES
   Meira, SRD
AF Cavalcanti, Yguarata Cerqueira
   da Mota Silveira Neto, Paulo Anselmo
   Lucredio, Daniel
   Vale, Tassio
   de Almeida, Eduardo Santana
   de Lemos Meira, Silvio Romero
TI The bug report duplication problem: an exploratory study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Bug reports; Bug tracker; Bug reports duplication; Exploratory study;
   Software configuration management
AB Duplicate bug report entries in bug trackers have a negative impact on software maintenance and evolution. This is due, among other factors, to the increased time spent on report analysis and validation, which in some cases takes over 20 min. Therefore, a considerable amount of time is lost in duplicate bug report analysis. In order to understand the possible factors that cause bug report duplication and its impact on software development, this paper presents an exploratory study in which bug tracking data from private and open source projects were analyzed. The results show, for example, that all projects we investigated had duplicate bug reports and a considerable amount of time was wasted by this duplication. Furthermore, features such as project lifetime, staff size, and the number of bug reports do not seem to be significant factors for duplication, while others, such as the submitters' profile and the number of submitters, do seem to influence the bug report duplication.
C1 [Cavalcanti, Yguarata Cerqueira; Vale, Tassio; de Lemos Meira, Silvio Romero] Fed Univ Pernambuco CIn UFPE, Ctr Informat, Pernambuco, Brazil.
   [Cavalcanti, Yguarata Cerqueira; da Mota Silveira Neto, Paulo Anselmo; Lucredio, Daniel; Vale, Tassio; de Almeida, Eduardo Santana; de Lemos Meira, Silvio Romero] Reuse Software Engn RiSE, Recife, PE, Brazil.
   [Lucredio, Daniel] Fed Univ Sao Carlos DC UFSCar, Dept Comp, Sao Carlos, SP, Brazil.
C3 Universidade Federal de Pernambuco; Universidade Federal de Sao Carlos
RP Cavalcanti, YC (corresponding author), Fed Univ Pernambuco CIn UFPE, Ctr Informat, Pernambuco, Brazil.
EM ycc@cin.ufpe.br; pamsn@cin.ufpe.br; daniel@dc.ufscar.br;
   ceac@cin.ufpe.br; esa@dcc.ufba.br; srlm@cin.ufpe.br
RI cavalcanti, yguarata c./J-6381-2012; de Almeida, Eduardo/JJC-2493-2023;
   Lucredio, Daniel/I-1793-2012; Meira, Silvio/AAT-9381-2020; Silveira,
   Paulo/AFR-7826-2022; Lucredio, Daniel/AAN-3070-2021; Ines,
   INCT/J-9550-2013
OI Lucredio, Daniel/0000-0002-1360-4036; Lucredio,
   Daniel/0000-0002-1360-4036; 
FU National Institute of Science and Technology for Software Engineering;
   CNPq; FACEPE [573964/2008-4, APQ-1037-1.03/08]; CNPq [305968/2010-6,
   559997/2010-8, 474766/2010-1]
FX This work was partially supported by the National Institute of Science
   and Technology for Software Engineering (INES http://www.ines.org.br),
   funded by CNPq and FACEPE, grants 573964/2008-4 and APQ-1037-1.03/08 and
   CNPq grants 305968/2010-6, 559997/2010-8, 474766/2010-1.
CR da Cunha CEA, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P742
   [Anonymous], 2007, P 2014 WORKSH ECL TE, DOI 10.1145/1328279.1328284
   [Anonymous], 2006, THESIS U BRIT COLUMB
   [Anonymous], 2006, TEXT MINING HDB ADV
   [Anonymous], 1999, MORGAN KAUFMANN SERI
   Anvik J., 2007, 4 INT WORKSH MIN SOF, P2
   Anvik John, 2005, P 2005 OOPSLA WORKSH, P35
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   BASILI VR, 1986, IEEE T SOFTWARE ENG, V12, P733, DOI 10.1109/TSE.1986.6312975
   Bettenburg N., 2008, P 2008 INT WORKING C, P27
   Bettenburg N, 2008, PROC IEEE INT CONF S, P337, DOI 10.1109/ICSM.2008.4658082
   Canfora G., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1767, DOI 10.1145/1141277.1141693
   Canfora G., 2005, P 11 IEEE INT SOFTWA, P29, DOI [DOI 10.1109/METRICS2005.18, DOI 10.1109/METRICS.2005.28]
   Castro M, 2008, ACM SIGPLAN NOTICES, V43, P319, DOI 10.1145/1353536.1346322
   Cavalcanti Y. C., 2010, 14 S BRAS ENG SOFTW
   Cavalcanti YC, 2010, EUR CON SFTWR MTNCE, P264, DOI 10.1109/CSMR.2010.52
   D'Ambros M, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P227
   Efron B., 1993, INTRO BOOTSTRAP, VVolume 914, DOI DOI 10.1007/978-1-4899-4541-9
   Fischer M, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P90, DOI 10.1109/WCRE.2003.1287240
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Jalbert N, 2008, I C DEPEND SYS NETWO, P52, DOI 10.1109/DSN.2008.4630070
   Jeong G., 2009, P 7 JOINT M EUR SOFT
   Johnson JN, 2003, COMPUT SCI ENG, V5, P71, DOI 10.1109/MCISE.2003.1238707
   Ko AJ, 2006, IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P127
   Koponen T., 2006, Proceedings of the 2006 International Conference on Software Engineering Research and Practice and Conference on Programming Languages and Compilers SERP'06, P429
   Lancaster F.W., 1986, Vocabulary control for information retrieval, V2nd
   Podgurski A, 2003, PROC INT CONF SOFTW, P465, DOI 10.1109/ICSE.2003.1201224
   Runeson P, 2007, PROC INT CONF SOFTW, P499
   Sandusky R. J., 2004, "International Workshop on Mining Software Repositories (MSR 2004)" W17S Workshop - 26th International Conference on Software Engineering, P80, DOI 10.1049/ic:20040481
   Serrano N, 2005, IEEE SOFTWARE, V22, P11, DOI 10.1109/MS.2005.32
   Sommerville Ian, 2016, Software engineering 8
   Song QB, 2006, IEEE T SOFTWARE ENG, V32, P69, DOI 10.1109/TSE.2006.1599417
   Wang XY, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P461, DOI 10.1145/1368088.1368151
   Weiss C, 2007, P 4 INT WORKSH MIN S, P1, DOI [10.1109/MSR.2007.13, DOI 10.1109/MSR.2007.13]
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
NR 35
TC 24
Z9 30
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2013
VL 21
IS 1
BP 39
EP 66
DI 10.1007/s11219-011-9164-5
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074MB
UT WOS:000313815500003
OA Green Published
DA 2024-07-18
ER

PT J
AU Desharnais, JM
   Abran, A
   Suryn, W
AF Desharnais, Jean-Marc
   Abran, Alain
   Suryn, Witold
TI Identification and analysis of attributes and base measures within ISO
   9126
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE ISO 9126; Base measures; Attributes
AB The ISO 9126 quality model is a 4-part suite of documents presenting 10 characteristics of the quality of software products, 27 subcharacteristics, and an inventory of more than 250 derived measures proposed to quantify these quality characteristics and subcharacteristics. However, these measures are presented only at a fairly abstract level as formulae composed from a set of 80 base measures. As the base measures themselves lack detailed descriptions, including the attributes they are attempting to measure, they are highly susceptible to individual interpretation. Improving the design of the 80 base measures is a daunting task. The ISO 9126 standard is currently under revision by an ISO working group (ISO/IEC JTC1/SC7 WG6), and this paper proposes a process to determine which of these base measures should be improved in the timeliest fashion.
C1 [Desharnais, Jean-Marc] TAM Project, Istanbul, Turkey.
   [Abran, Alain; Suryn, Witold] Univ Quebec, Ecole Technol Super, Montreal, PQ H3C 1K3, Canada.
   [Desharnais, Jean-Marc] Bogazici Univ, Istanbul, Turkey.
C3 Bogazici University; University of Quebec; Ecole de Technologie
   Superieure - Canada; University of Quebec Montreal; Bogazici University
RP Desharnais, JM (corresponding author), Middle E Tech Univ, TR-06531 Ankara, Turkey.
EM desharnaisjm@gmail.com; alain.abran@etsmtl.ca; witold.suryn@etsmtl.ca
RI Abran, Alain/I-2493-2016
OI Abran, Alain/0000-0003-2670-9061
CR ABRAN A, 2005, INF MOD SOFTW QUAL M, P104
   ABRAN A, 2005, METRICS NEWS J SOFTW, V10, P35
   Abran Alain., 2010, Software Metrics and Software Metrology, P328
   ALQUTAISH RE, 2007, THESIS U QUEBEC
   [Anonymous], 15288 ISO
   [Anonymous], 9821 IEEE
   [Anonymous], 2001, 91261 ISO
   [Anonymous], 2004, INT VOC BAS GEN TERM
   [Anonymous], 2004, GUID PROJ MAN BOD KN, V3rd
   [Anonymous], 12207 ISO
   Habra N, 2008, J SYST SOFTWARE, V81, P633, DOI 10.1016/j.jss.2007.07.038
   *ISO, 24765 ISO
   *ISO, 2005, 25000 ISO
   *ISO IS, 2002, 15939 ISO IS
   *ISO TC211, 2003, 191152003 ISOTC211
   *ISO TR, 2008, 25021 ISO TR
   *ISO TR, 2004, 91264 ISO TR
   [No title captured]
NR 18
TC 4
Z9 5
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 447
EP 460
DI 10.1007/s11219-010-9124-5
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500010
DA 2024-07-18
ER

PT J
AU Davison, J
   Thompson, JB
   Deeks, DA
   Lejk, M
AF Davison, J
   Thompson, JB
   Deeks, DA
   Lejk, M
TI PisoSIA® a stakeholder approach to assist change in information systems
   development projects and aid process improvement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
ID SALIENCE
AB PISO(R) (Process Improvement for Strategic Objectives) is a method that engages system users in the redesign of their own work-based information systems. PisoSIA(R) (stakeholder identification and analysis) is an enhancement to the original method that helps in the identification of a system's stakeholders, analyses the impact they have on the system and also considers the effect of change upon those stakeholders. Overviews of the original and enhanced methods are provided and research investigations centred on four case studies are reported. Each of the case studies made use of the original PISO(R) method and two made use of the enhanced pisoSIA(R) method. These case studies demonstrate the worth of the enhanced approach. The stakeholder identification and subsequent analysis provides an effective complement to the original method and can clearly aid in change management within information system redesign.
C1 Univ Sunderland, Sch Comp Engn & Technol, Sunderland SR6 0DD, England.
C3 University of Sunderland
RP Univ Sunderland, Sch Comp Engn & Technol, Sunderland SR6 0DD, England.
EM barrie.thompson@sunderland.ac.uk
CR Agle BR, 1999, ACAD MANAGE J, V42, P507, DOI 10.5465/256973
   [Anonymous], 2019, INTRO QUALITATIVE RE
   Brugha R, 2000, HEALTH POLICY PLANN, V15, P239, DOI 10.1093/heapol/15.3.239
   Crabtree, 1999, DOING QUALITATIVE RE, P163, DOI DOI 10.1046/J.0966-0429.2001.00289.X
   Davison J, 2003, INTERNATIONAL CONFERENCE ON POLITICS AND INFORMATION SYSTEMS: TECHNOLOGIES AND APPLICATIONS, PROCEEDINGS, P126
   Davison J, 2002, 6TH WORLD MULTICONFERENCE ON SYSTEMICS, CYBERNETICS AND INFORMATICS, VOL VIII, PROCEEDINGS, P541
   DAVISON J, 2002, 7 INT C UK SYST SOC, P44
   DEEKS D, 2001, VISUAL SYSTEMS J DEC, P10
   EISENHARDT KM, 1989, ACAD MANAGE REV, V14, P532, DOI 10.2307/258557
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Holliday A., 2002, DOING WRITING QUALIT
   IVES B, 1983, COMMUN ACM, V26, P785, DOI 10.1145/358413.358430
   Jiang J. J., 2002, International Journal of Project Management, V20, P507, DOI 10.1016/S0263-7863(01)00049-7
   King N., 2020, Template Analysis
   Lejk M., 2002, INTRO SYSTEMS ANAL T
   Mitchell RK, 1997, ACAD MANAGE REV, V22, P853, DOI 10.2307/259247
   Mullins L.J., 1999, Management and organizational behavior, V5th
   Mumford E., 1995, Effective Systems Design and Requirements Analysis: The ETHICS Approach
   Munkvold BE, 2000, COMP SUPP COMP W SER, P13
   SCOTT M, 2002, EUR C RES METH BUS M, P345
NR 20
TC 7
Z9 7
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2006
VL 14
IS 1
BP 25
EP 36
DI 10.1007/s11219-006-5999-6
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 014NM
UT WOS:000235486900003
DA 2024-07-18
ER

PT J
AU Gokhale, SS
   Lyu, MR
   Trivedi, KS
AF Gokhale, SS
   Lyu, MR
   Trivedi, KS
TI Analysis of software fault removal policies using a non-homogeneous
   continuous time Markov chain
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software reliability; fault removal; non-homogeneous continuous time
   Markov chain
ID RELIABILITY MODEL; ERROR-DETECTION
AB Software reliability is an important metric that quantifies the quality of a software product and is inversely related to the residual number of faults in the system. Fault removal is a critical process in achieving desired level of quality before software deployment in the field. Conventional software reliability models assume that the time to remove a fault is negligible and that the fault removal process is perfect. In this paper we examine various kinds of fault removal policies, and analyze their effect on the residual number of faults at the end of the testing process, using a non-homogeneous continuous time Markov chain. The fault removal rate is initially assumed to be constant, and it is subsequently extended to cover time and state dependencies. We then extend the non-homogeneous continuous time Markov chain (NHCTMC) framework to include imperfections in the fault removal process. A method to compute the failure intensity of the software in the presence of explicit fault removal is also proposed. The fault removal scenarios can be easily incorporated using the state-space view of the non-homogeneous Poisson process.
C1 Univ Connecticut, Dept Comp Sci & Engn, Storrs, CT 06269 USA.
   Chinese Univ Hong Kong, Dept Comp Sci & Engn, Shatin, Hong Kong, Peoples R China.
   Duke Univ, Dept Elect & Comp Engn, Durham, NC 27708 USA.
C3 University of Connecticut; Chinese University of Hong Kong; Duke
   University
RP Gokhale, SS (corresponding author), Univ Connecticut, Dept Comp Sci & Engn, Storrs, CT 06269 USA.
EM ssg@engr.uconn.edu; lyu@cse.cuhk.edu.hk; kst@ee.duke.edu
RI Trivedi, Kishor/U-1977-2019
CR [Anonymous], 1995, Modeling and Analysis of Stochastic Systems
   DALAL SR, 1990, IEEE J SEL AREA COMM, V8, P169, DOI 10.1109/49.46868
   DEFAMIE M, 1999, P INT C SOFTW MAINT
   GOEL AL, 1979, IEEE T RELIAB, V28, P206, DOI 10.1109/TR.1979.5220566
   GOEL AL, 1985, IEEE T SOFTWARE ENG, V11, P1411, DOI 10.1109/TSE.1985.232177
   GOKHALE S, 2003, P 28 IEEE NASA WORKS
   GOKHALE S, 1996, P INT S SOFTW REL EN, P289
   GOKHALE S, 1997, P COMP ASS COMPASS 9, P105
   Gokhale SS, 1999, ANN SOFTW ENG, V8, P85, DOI 10.1023/A:1018923329647
   Gokhale SS, 1998, THIRD IEEE INTERNATIONAL HIGH-ASSURANCE SYSTEMS ENGINEERING SYMPOSIUM, PROCEEDINGS, P34, DOI 10.1109/HASE.1998.731593
   Jelinski Z., 1972, Statistical Computer Performance Evaluation, P465, DOI DOI 10.1016/B978-0-12-266950-7.50028-1
   KAPUR S, 1992, BIOL PSYCHIAT, V32, P1, DOI 10.1016/0006-3223(92)90137-O
   KENNEY GQ, 1993, IEEE T RELIAB, V42, P107, DOI 10.1109/24.210280
   KREMER W, 1983, IEEE T RELIAB, V32, P37, DOI 10.1109/TR.1983.5221472
   LEVENDEL Y, 1990, IEEE T SOFTWARE ENG, V16, P141, DOI 10.1109/32.44378
   Lyu M.R., 1996, Handbook of Software Reliability Engineering, P71
   LYU MR, 1992, CASE 92 P MONTR CAN, P264
   Ohba M., 1989, Proceedings. 11th International Conference on Software Engineering (Cat. No.89CH2718-5), P237, DOI 10.1145/74587.74619
   RAMANI S, 1998, 10 INT C MOD TECHN T, P27
   Sahner R., 1996, PERFORMANCE RELIABIL
   SCHEIDEWIND NF, 2003, P INT S SOFTW REL EN, P257
   Schneidewind NF, 2002, PROC IEEE INT CONF S, P238, DOI 10.1109/ICSM.2002.1167772
   SUMITA U, 1986, IEEE T RELIAB, V35, P459, DOI 10.1109/TR.1986.4335507
   Trivedi K.S., 2001, Probability and statistics with reliability, queueing, and computer science applications, V2nd
   Wood A, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P136, DOI 10.1109/ISSRE.1997.630858
   YAMADA S, 1983, IEEE T RELIAB, V32, P475, DOI 10.1109/TR.1983.5221735
NR 26
TC 49
Z9 51
U1 0
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2004
VL 12
IS 3
BP 211
EP 230
DI 10.1023/B:SQJO.0000034709.63615.8b
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 837EQ
UT WOS:000222611600003
DA 2024-07-18
ER

PT J
AU Zhuang, YY
   Yan, Y
   Delong, LA
   Yeh, MK
AF Zhuang, Yanyan
   Yan, Yu
   Delong, Lois Anne
   Yeh, Martin K.
TI Do developer perceptions have borders? Comparing C code responses across
   continents
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Code comprehension; Empirical studies; C code snippets; Programming
   languages
ID PROGRAM COMPREHENSION; COGNITIVE DOMAINS; LANGUAGE; DIFFERENCE;
   ATTENTION; KNOWLEDGE; THOUGHT
AB Recent studies have empirically validated the existence of small patterns in C code, named atoms of confusion (or atoms for short), that can interfere with program comprehension. The focus of this research is an attempt to see if these patterns in C would have a similar impact on a second group of participants who have similar levels of experience with C, but come from different places. We report on studies conducted with students from the USA and China. Both sets of participants were shown snippets of code and asked to predict the output. While performance measures (accuracy and speed) showed little difference in aggregate, a few individual atoms yielded surprising results. For example, we found examples where the clarified versions of code, with the atoms removed, were more confusing to the Chinese participants, despite the presence of atoms having much less impact on this group in general. These findings suggest that both the atoms themselves, and the processes used to remove them, may be viewed differently by individuals from different parts of the world. As such, developing insights on the "cross-border" applicability of coding practices could help create better pedagogical practices to prepare students for today's globally-integrated approach to software development.
C1 [Zhuang, Yanyan] Univ Colorado Colorado Springs, Dept Comp Sci, Colorado Springs, CO 80918 USA.
   [Yan, Yu] Univ Calif San Diego, Teaching Learning Commons, La Jolla, CA 92093 USA.
   [Delong, Lois Anne] NYU, Dept Comp Sci & Engn, Brooklyn, NY 11201 USA.
   [Yeh, Martin K.] Penn State Univ Brandywine, Coll Informat Sci & Technol, Media, PA 19063 USA.
C3 University of Colorado System; University of Colorado at Colorado
   Springs; University of California System; University of California San
   Diego; New York University; New York University Tandon School of
   Engineering; Pennsylvania Commonwealth System of Higher Education
   (PCSHE); Pennsylvania State University
RP Zhuang, YY (corresponding author), Univ Colorado Colorado Springs, Dept Comp Sci, Colorado Springs, CO 80918 USA.
EM yzhuang@uccs.edu; yuyan@ucsd.edu; lad278@nyu.edu; martin.yeh@psu.edu
FU Committee on Research and Creative Works (CRCW)
FX No Statement Available
CR Anderson S., 2021, INT STUDENTS REMAIN
   Boksem MAS, 2005, COGNITIVE BRAIN RES, V25, P107, DOI 10.1016/j.cogbrainres.2005.04.011
   Boroditsky L, 2001, COGNITIVE PSYCHOL, V43, P1, DOI 10.1006/cogp.2001.0748
   Brooks R., 1978, 3rd International Conference on Software Engineering, P196
   Brown A. B., 2004, ACM Queue, V2, P34, DOI 10.1145/1036474.1036497
   Casalnuovo C, 2019, EMPIR SOFTW ENG, V24, P1823, DOI 10.1007/s10664-018-9669-7
   Castor Fernando., 2018, Proceedings of the VI CBSoft Workshop on Visualization, Evolution, and Maintenance
   Chemnitz University of Technology, 2020, PROGRAMMINGLANGUAGEB
   Dasgupta S, 2017, PROCEEDINGS OF THE FOURTH (2017) ACM CONFERENCE ON LEARNING @ SCALE (L@S'17), P33, DOI 10.1145/3051457.3051464
   DAVIES SP, 1991, BEHAV INFORM TECHNOL, V10, P173, DOI 10.1080/01449299108924281
   Detienne F., 2001, Software design - Cognitive aspects, DOI [DOI 10.1007/978-1-4471-0111-6, 10.1007/978-1-4471-0111-6]
   Dijkstra E. W., 1982, SELECTED WRITINGS CO, V10, P978
   Dunsmore A, 2000, J SYST SOFTWARE, V52, P121, DOI 10.1016/S0164-1212(99)00138-7
   Durkalski VL, 2003, STAT MED, V22, P2417, DOI 10.1002/sim.1438
   GILMORE DJ, 1988, Q J EXP PSYCHOL-A, V40, P423, DOI 10.1080/02724988843000005
   Gopnik A., 1990, FIRST LANG, V10, P199, DOI [DOI 10.1177/014272379001003002, 10.1177/014272379001003002]
   Gopstein D., 2017, P 2017 11 JOINT M FD
   Gopstein D, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P605, DOI 10.1145/3368089.3409714
   Gopstein D, 2018, IEEE WORK CONF MIN S, P281, DOI 10.1145/3196398.3196432
   Guo PJ, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3173970
   Headlam C., 2013, PHD DISSERTATION
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Hoda R, 2017, IEEE T EDUC, V60, P173, DOI 10.1109/TE.2016.2624742
   Ivanova A. A., 2020, BIORXIV
   Jaakkola H, 2010, SOFTWARE QUAL J, V18, P299, DOI 10.1007/s11219-009-9091-x
   Joni S. N. A., 1986, Journal of Educational Computing Research, V2, P95, DOI 10.2190/6E5W-AR7C-NX76-HUT2
   Kaplan R., 2000, Discourse and society, P82
   Kienpointner M., 1996, ARGUMENTATION, V10, P475
   Ko A. J., 2017, COOPERATIVE SOFTWARE
   Kuwabara M, 2012, J EXP CHILD PSYCHOL, V113, P20, DOI 10.1016/j.jecp.2012.04.009
   Langhout C, 2021, INT C PROGRAM COMPRE, P25, DOI 10.1109/ICPC52881.2021.00012
   LaToza Thomas D., 2010, P 32 ACM IEEE INT C, P185, DOI DOI 10.1145/1806799.1806829
   LETOVSKY S, 1987, J SYST SOFTWARE, V7, P325, DOI 10.1016/0164-1212(87)90032-X
   Maalej W, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2622669
   Masuda T, 2001, J PERS SOC PSYCHOL, V81, P922, DOI 10.1037//0022-3514.81.5.922
   Matteson S., 2018, REPORT SOFTWARE FAIL
   McCulloch G., 2019, WIRED
   MCKEITHEN KB, 1981, COGNITIVE PSYCHOL, V13, P307, DOI 10.1016/0010-0285(81)90012-8
   McNemar Q, 1947, PSYCHOMETRIKA, V12, P153, DOI 10.1007/BF02295996
   Mendes W, 2022, PROC IEEE INT CONF S, P106, DOI 10.1109/ICSME55016.2022.00018
   NEELY JH, 1991, BASIC PROCESSES READ, P264, DOI DOI 10.4324/9780203052242-12
   Nisbett R. E., 2003, The geography of thought: How Asians and Westerners think differentlyand why
   Nisbett RE, 2001, PSYCHOL REV, V108, P291, DOI 10.1037//0033-295X.108.2.291
   Noll L. C., 2016, INT OBFUSCATED C COD
   Norman K.L., 2017, CYBERPSYCHOLOGY INTR
   O'Brien MP, 2004, J SOFTW MAINT EVOL-R, V16, P427, DOI 10.1002/smr.307
   Olejnik S, 2000, CONTEMP EDUC PSYCHOL, V25, P241, DOI 10.1006/ceps.2000.1040
   Peitek N, 2020, IEEE T SOFTWARE ENG, V46, P442, DOI 10.1109/TSE.2018.2863303
   PENNINGTON N, 1987, COGNITIVE PSYCHOL, V19, P295, DOI 10.1016/0010-0285(87)90007-7
   PinLing L., 2013, 14 INT C TRANSLATION
   Popper N., 2012, KNIGHT CAPITAL SAYS
   Rambally G. K., 1986, SIGCSE Bulletin, V18, P173, DOI 10.1145/953055.5702
   Rist R., 1986, Empirical Studies of Programmers
   Roehm T, 2012, PROC INT CONF SOFTW, P255, DOI 10.1109/ICSE.2012.6227188
   Scheepers C, 2019, COGNITION, V189, P155, DOI 10.1016/j.cognition.2019.03.021
   Scheepers C, 2014, Q J EXP PSYCHOL, V67, P1643, DOI 10.1080/17470218.2013.873815
   Scheepers C, 2011, PSYCHOL SCI, V22, P1319, DOI 10.1177/0956797611416997
   SEGAL J, 1992, J EDUC COMPUT RES, V8, P129, DOI 10.2190/KAPB-RA9P-VGJN-KMD0
   SHAFT TM, 1995, INFORM SYST RES, V6, P286, DOI 10.1287/isre.6.3.286
   Sharpe S, 1997, J COMPUT INFORM SYST, V38, P86
   SHNEIDERMAN B, 1979, INT J COMPUT INF SCI, V8, P219, DOI 10.1007/BF00977789
   Siegmund J, 2020, COMMUN ACM, V63, P30, DOI 10.1145/3347093
   Siegmund J, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 5, P13, DOI 10.1109/SANER.2016.35
   Sillito J., 2006, Proc. of the ACM SIGSOFT Int'l Symp. on Foundations of Software Engineering, P23, DOI DOI 10.1145/1181775.1181779
   So HJ, 2020, ASIA-PAC EDUC RES, V29, P1, DOI 10.1007/s40299-019-00494-w
   SOLOWAY E, 1984, IEEE T SOFTWARE ENG, V10, P595, DOI 10.1109/TSE.1984.5010283
   Somers J., 2015, MIT TECHNOL REV
   Taff J., 2017, MATH TEACHER, V111, P126, DOI [10.5951/mathteacher.111.2.0126, DOI 10.5951/MATHTEACHER.111.2.0126]
   Tahsin N., 2023, PREVALENCEATOMS CONF
   Thayer K, 2018, 2018 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING (VL/HCC), P115, DOI 10.1109/VLHCC.2018.8506556
   Tukey JW, 1970, EXPLORATORY DATA ANA
   von Mayrhauser A., 1993, Proceedings IEEE Second Workshop on Program Comprehension (Cat. No.93TH0551-2), P78, DOI 10.1109/WPC.1993.263903
   Wikipedia, 2020, LIST PROGRAMMING LAN
   Williams C., 2014, UPDATE YOUR MAC NOW
   Xia X, 2018, IEEE T SOFTWARE ENG, V44, P951, DOI 10.1109/TSE.2017.2734091
   Yeh MKC, 2022, BEHAV INFORM TECHNOL, V41, P2528, DOI 10.1080/0144929X.2021.1933182
   Zhao JC, 2015, J ACAD LIBR, V41, P712, DOI 10.1016/j.acalib.2015.09.010
NR 77
TC 1
Z9 1
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2024
VL 32
IS 2
BP 431
EP 457
DI 10.1007/s11219-023-09654-0
EA NOV 2023
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UX1Q1
UT WOS:001120033300001
DA 2024-07-18
ER

PT J
AU Arcuri, A
   Zhang, M
   Belhadi, A
   Marculescu, B
   Golmohammadi, A
   Galeotti, JP
   Seran, S
AF Arcuri, Andrea
   Zhang, Man
   Belhadi, Asma
   Marculescu, Bogdan
   Golmohammadi, Amid
   Galeotti, Juan Pablo
   Seran, Susruthan
TI Building an open-source system test generation tool: lessons learned and
   empirical analyses with EvoMaster
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; SBST; Tool; Fuzzing; Experimentation
ID SOFTWARE; INDUSTRY
AB Research in software testing often involves the development of software prototypes. Like any piece of software, there are challenges in the development, use and verification of such tools. However, some challenges are rather specific to this problem domain. For example, often these tools are developed by PhD students straight out of bachelor/master degrees, possibly lacking any industrial experience in software development. Prototype tools are used to carry out empirical studies, possibly studying different parameters of novel designed algorithms. Software scaffolding is needed to run large sets of experiments efficiently. Furthermore, when using AI-based techniques like evolutionary algorithms, care needs to be taken to deal with their randomness, which further complicates their verification. The aforementioned represent some of the challenges we have identified for this domain. In this paper, we report on our experience in building the open-source EvoMaster tool, which aims at system-level test case generation for enterprise applications. Many of the challenges we faced would be common to any researcher needing to build software testing tool prototypes. Therefore, one goal is that our shared experience here will boost the research community, by providing concrete solutions to many development challenges in the building of such kind of research prototypes. Ultimately, this will lead to increase the impact of scientific research on industrial practice.
C1 [Arcuri, Andrea; Zhang, Man; Belhadi, Asma; Marculescu, Bogdan; Golmohammadi, Amid; Seran, Susruthan] Kristiania Univ Coll, Oslo, Norway.
   [Galeotti, Juan Pablo] Univ Buenos Aires, CONICET, Buenos Aires, Argentina.
   [Arcuri, Andrea] Oslo Metropolitan Univ, Oslo, Norway.
C3 Kristiania University College; University of Buenos Aires; Oslo
   Metropolitan University (OsloMet)
RP Zhang, M (corresponding author), Kristiania Univ Coll, Oslo, Norway.
EM andrea.arcuri@kristiania.no; man.zhang@kristiania.no;
   bogdan.marculescu@kristiania.no; amid.golmohammadi@kristiania.no;
   jgaleotti@dc.uba.ar; susruthan.seran@kristiania.no
RI Zhang, Man/AGR-7496-2022
OI Zhang, Man/0000-0003-1204-9322
FU Kristiania University College; European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation programme
   [864972]; Secretaria de Ciencia y Tecnica, Universidad de Buenos Aires
   [UBACyT 2020 20020190100233BA]; Agencia Nacional de Promocion de la
   Investigacion, el Desarrollo Tecnologico y la Innovacion
   [PICT-2019-01793]; European Research Council (ERC) [864972] Funding
   Source: European Research Council (ERC)
FX Open access funding provided by Kristiania University College. This work
   is supported by the European Research Council (ERC) under the European
   Union's Horizon 2020 research and innovation programme (grant agreement
   no. 864972). Juan Pablo Galeotti is supported by the project (grant no.
   UBACyT 2020 20020190100233BA) funded by Secretaria de Ciencia y Tecnica,
   Universidad de Buenos Aires, and the project (grant no. PICT-2019-01793)
   funded by Agencia Nacional de Promocion de la Investigacion, el
   Desarrollo Tecnologico y la Innovacion.
CR Ahmed K, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1570, DOI 10.1145/3468264.3473123
   Arcaini P, 2021, IEEE INT CONF SOFTW, P442, DOI 10.1109/ICST49551.2021.00057
   Arcuri A., 2021, J. Open Source Softw., V6, P2153
   Arcuri A, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3477271
   Arcuri A, 2021, IEEE SOFTWARE, V38, P72, DOI 10.1109/MS.2020.3013820
   Arcuri A, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3391533
   Arcuri A, 2020, IEEE INT CONF SOFTW, P153, DOI 10.1109/ICST46399.2020.00025
   Arcuri A, 2019, PROCEEDINGS OF THE 2019 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE (GECCO'19), P1390, DOI 10.1145/3321707.3321732
   Arcuri A, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3293455
   Arcuri A, 2018, INFORM SOFTWARE TECH, V104, P195, DOI 10.1016/j.infsof.2018.05.003
   Arcuri A, 2018, EMPIR SOFTW ENG, V23, P1959, DOI 10.1007/s10664-017-9570-9
   Arcuri A, 2017, LECT NOTES COMPUT SC, V10452, P3, DOI 10.1007/978-3-319-66299-2_1
   Arcuri A, 2018, IEEE INT CONF SOFTW, P394, DOI 10.1109/ICST.2018.00046
   Arcuri A, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P9, DOI 10.1109/QRS.2017.11
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Arcuri A, 2013, EMPIR SOFTW ENG, V18, P594, DOI 10.1007/s10664-013-9249-9
   Arcuri A, 2012, IEEE T SOFTWARE ENG, V38, P258, DOI 10.1109/TSE.2011.121
   Atlidakis V, 2019, PROC INT CONF SOFTW, P748, DOI 10.1109/ICSE.2019.00083
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Belhadi A., 2022, GENETIC EVOLUTIONARY
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Bertolino A, 2020, IEEE INT CONF SOFTW, P454, DOI 10.1109/ICST46399.2020.00061
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Beyer D, 2019, INT J SOFTW TOOLS TE, V21, P1, DOI 10.1007/s10009-017-0469-y
   Borges NP, 2019, IEEE INT CONF SOFTW, P449, DOI 10.1109/ICST.2019.00054
   Brunetto M, 2021, J SYST SOFTWARE, V176, DOI 10.1016/j.jss.2021.110933
   Bures M, 2021, IEEE INT CONF SOFTW, P454, DOI 10.1109/ICST49551.2021.00059
   Bures M, 2020, IEEE INT CONF SOFTW, P442, DOI 10.1109/ICST46399.2020.00059
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cox H, 2021, IEEE INT CONF SOFTW, P424, DOI 10.1109/ICST49551.2021.00054
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Garousi V, 2019, EMPIR SOFTW ENG, V24, P2540, DOI 10.1007/s10664-019-09711-y
   github.com, EVOMASTER
   github.com, EVOMASTER BENCHMARK
   Gotz K., 2022, 2022 15 IEEE C SOFTW
   Brida SG, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1213, DOI 10.1109/ASE51524.2021.9678524
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Haryono SA, 2021, PROC IEEE ACM INT C, P1, DOI 10.1109/ICSE-Companion52605.2021.00021
   He SB, 2020, IEEE INT CONF SOFTW, P466, DOI 10.1109/ICST46399.2020.00063
   Herlim R.S, 2022, 2022 15 IEEE C SOFTW
   Heumüller R, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1505, DOI 10.1145/3468264.3473110
   Hodován R, 2018, IEEE INT CONF SOFTW, P416, DOI 10.1109/ICST.2018.00050
   Horlings E, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1590, DOI 10.1145/3468264.3473127
   Hou YH, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P674, DOI 10.1145/3460319.3469080
   Jendele L, 2019, IEEE INT CONF SOFTW, P457, DOI 10.1109/ICST.2019.00055
   Khaireddine B, 2019, IEEE INT CONF SOFTW, P465, DOI 10.1109/ICST.2019.00056
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   Leotta M., 2022, 2022 15 IEEE C SOFTW
   Marculescu B, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3491038
   Musco V, 2019, IEEE INT CONF SOFTW, P473, DOI 10.1109/ICST.2019.00057
   Natella R, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P662, DOI 10.1145/3460319.3469077
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Olianas D, 2021, IEEE INT CONF SOFTW, P460, DOI 10.1109/ICST49551.2021.00060
   Pacheco Carlos, 2007, COMPANION 22 ACM SIG, P815, DOI DOI 10.1145/1297846.1297902
   Paduraru C., 2022, 2022 15 IEEE C SOFTW
   Paduraru C, 2021, IEEE INT CONF SOFTW, P430, DOI 10.1109/ICST49551.2021.00055
   Paiva ACR, 2019, IEEE INT CONF SOFTW, P441, DOI 10.1109/ICST.2019.00053
   Panichella S, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P20, DOI 10.1109/SBST52555.2021.00011
   Pham HV, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1286, DOI 10.1109/ASE51524.2021.9678540
   Rapos EJ, 2018, IEEE INT CONF SOFTW, P410, DOI 10.1109/ICST.2018.00049
   Ren M, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P666, DOI 10.1145/3460319.3469078
   Ribeiro HL, 2018, IEEE INT CONF SOFTW, P404, DOI 10.1109/ICST.2018.00048
   Rizzi EF, 2016, PROC INT CONF SOFTW, P132, DOI 10.1145/2884781.2884835
   Romdhana A, 2021, IEEE INT CONF SOFTW, P417, DOI 10.1109/ICST49551.2021.00053
   Sahin O, 2021, APPL SOFT COMPUT, V104, DOI 10.1016/j.asoc.2021.107246
   Sartaj H, 2020, IEEE INT CONF SOFTW, P436, DOI 10.1109/ICST46399.2020.00058
   Slob FJ, 2021, IEEE INT CONF SOFTW, P448, DOI 10.1109/ICST49551.2021.00058
   Stallenberg D., 2021, ARXIV
   Sullivan A, 2018, IEEE INT CONF SOFTW, P398, DOI 10.1109/ICST.2018.00047
   Tzoref-Brill R., 2022, 2022 15 IEEE C SOFTW
   Udeshi S, 2020, IEEE INT CONF SOFTW, P448, DOI 10.1109/ICST46399.2020.00060
   Vadlamani A, 2021, PROC IEEE ACM INT C, P5, DOI 10.1109/ICSE-Companion52605.2021.00022
   Pham VT, 2020, IEEE INT CONF SOFTW, P460, DOI 10.1109/ICST46399.2020.00062
   Viglianisi E, 2020, IEEE INT CONF SOFTW, P142, DOI 10.1109/ICST46399.2020.00024
   Wang B, 2021, PROC IEEE ACM INT C, P17, DOI 10.1109/ICSE-Companion52605.2021.00025
   Weiss M, 2021, IEEE INT CONF SOFTW, P436, DOI 10.1109/ICST49551.2021.00056
   Xie S, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1262, DOI 10.1109/ASE51524.2021.9678934
   Yavuz T., 2022, 2022 15 IEEE C SOFTW
   Zhang M., 2021, ACM T SOFTW ENG METH, V31
   Zhang M., 2022, IN IEEE INT C SOFTW
   Zhang M, 2021, LECT NOTES COMPUT SC, V12914, P103, DOI 10.1007/978-3-030-88106-1_8
   Zhang M, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-020-09937-1
   Zhang M, 2019, PROCEEDINGS OF THE 2019 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE (GECCO'19), P1426, DOI 10.1145/3321707.3321815
   Zhang Mingyuan, 2022, arXiv
NR 84
TC 0
Z9 0
U1 2
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 947
EP 990
DI 10.1007/s11219-023-09620-w
EA MAR 2023
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000943685000001
PM 37692292
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Bhat, NA
   Farooq, SU
AF Bhat, Nayeem Ahmad
   Farooq, Sheikh Umar
TI An empirical evaluation of defect prediction approaches in
   within-project and cross-project context
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Cross-project defect prediction; Software quality assurance; Source code
   metrics; Process metrics; Churn of source code; Feature selection;
   Imbalance learning
ID STATIC CODE ATTRIBUTES; BORDERLINE-SMOTE; SOFTWARE; METRICS; FAULTS;
   VALIDATION; MODELS
AB The software defect prediction approaches are evaluated, in within-project context only, with only a few other approaches, according to distinct scenarios and performance indicators. So, we conduct various experiments to evaluate well-known defect prediction approaches using different performance indicators. The evaluations are performed in the scenario of ranking the entities - with and without considering the effort to review the entities and classifying entities in within-project as well as cross-project contexts. The effect of imbalanced datasets on the ranking of the approaches is also evaluated. Our results indicate that in within-project as well as cross-project context, process metrics, the churn of source code, and entropy of source code perform significantly better under the context of classification and ranking - with and without effort consideration. The previous defect metrics and other single metric approaches (like lines of code) perform worst. The ranking of the approaches is not changed by imbalanced datasets. We suggest using the process metrics, the churn of source code, and entropy of source code metrics as predictors in future defect prediction studies and taking care while using the single metric approaches as predictors. Moreover, different evaluation scenarios generate different ordering of approaches in within-project and cross-project contexts. Therefore, we conclude that each problem context has distinct characteristics, and conclusions of within-project studies should not be generalized to cross-project context and vice versa.
C1 [Bhat, Nayeem Ahmad; Farooq, Sheikh Umar] Univ Kashmir, Dept Comp Sci, North Campus, Srinagar, J&K, India.
C3 University of Kashmir
RP Bhat, NA (corresponding author), Univ Kashmir, Dept Comp Sci, North Campus, Srinagar, J&K, India.
EM bhat.nayeem2@gmail.com; suf.cs@uok.edu.in
CR Agrawal A., 2019, INT J INFORM TECHNOL
   Al Majzoub H, 2020, ARAB J SCI ENG, V45, P3205, DOI 10.1007/s13369-019-04336-1
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Arisholm E, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P215, DOI 10.1109/ISSRE.2007.22
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Barua S, 2014, IEEE T KNOWL DATA EN, V26, P405, DOI 10.1109/TKDE.2012.232
   Bashir K, 2020, J INTELL FUZZY SYST, V38, P917, DOI 10.3233/JIFS-179459
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Benni KE, 2018, IEEE T SOFTWARE ENG, V44, P534, DOI 10.1109/TSE.2017.2731766
   Bennin KE, 2022, IET SOFTW, V16, P185, DOI 10.1049/sfw2.12052
   Bennin KE, 2019, EMPIR SOFTW ENG, V24, P602, DOI 10.1007/s10664-018-9633-6
   Bennin KE, 2017, INT SYMP EMP SOFTWAR, P364, DOI 10.1109/ESEM.2017.50
   Bhat NA., 2021, INT J
   Bhat NA, 2022, ARAB J SCI ENG, V47, P1939, DOI 10.1007/s13369-021-06088-3
   Calvo B., 2015, Scmamp: Statistical Comparison of Multiple Algorithms in Multiple Problems
   Çatal Ç, 2016, TURK J ELECTR ENG CO, V24, P3714, DOI 10.3906/elk-1409-137
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Dar AW, 2022, INT J SOFTW SCI COMP, V14, DOI 10.4018/IJSSCI.301268
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Fawcett T, 2006, PATTERN RECOGN LETT, V27, P861, DOI 10.1016/j.patrec.2005.10.010
   Felix EA, 2017, IEEE ACCESS, V5, P21524, DOI 10.1109/ACCESS.2017.2759180
   Feng S, 2021, INFORM SOFTWARE TECH, V139, DOI 10.1016/j.infsof.2021.106662
   Feng S, 2021, INFORM SOFTWARE TECH, V129, DOI 10.1016/j.infsof.2020.106432
   García V, 2012, KNOWL-BASED SYST, V25, P13, DOI 10.1016/j.knosys.2011.06.013
   Goel L, 2019, INT J PARALLEL EMERG, DOI 10.1080/17445760.2019.1650039
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Guo HX, 2017, EXPERT SYST APPL, V73, P220, DOI 10.1016/j.eswa.2016.12.035
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Han H, 2005, LECT NOTES COMPUT SC, V3644, P878, DOI 10.1007/11538059_91
   HANLEY JA, 1982, RADIOLOGY, V143, P29, DOI 10.1148/radiology.143.1.7063747
   Hassan AE, 2005, PROC IEEE INT CONF S, P263
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   Henderi H., 2021, International Journal of Informatics and Information System, V4, P13, DOI [DOI 10.47738/IJIIS.V4I1.73, 10.47738/ijiis.v4i1.73]
   Hosseini S, 2018, INFORM SOFTWARE TECH, V95, P296, DOI 10.1016/j.infsof.2017.06.004
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Jain Y. K., 2011, International Journal of Computer Science and Information Technology Research, V2, P45
   Jiang Y, 2008, EMPIR SOFTW ENG, V13, P561, DOI 10.1007/s10664-008-9079-3
   Jie Xu, 2008, Journal of Computer Sciences, V4, P571, DOI 10.3844/jcssp.2008.571.577
   Kamei Y., 2010, Proceedings of the 26th International Conference on Software Maintenance, P1, DOI 10.1109/ICSM.2010.5609530
   Khoshgoftaar TM, 2003, SOFTWARE QUAL J, V11, P19, DOI 10.1023/A:1023632027907
   Khoshgoftaar TM, 1996, SEVENTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P364, DOI 10.1109/ISSRE.1996.558896
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li Y, 2017, IEEE ACCESS, V5, P25646, DOI 10.1109/ACCESS.2017.2771460
   Limsettho N, 2018, INFORM SOFTWARE TECH, V100, P87, DOI 10.1016/j.infsof.2018.04.001
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Malhotra R, 2022, PEERJ COMPUT SCI, V8, DOI 10.7717/peerj-cs.573
   Menardi G, 2014, DATA MIN KNOWL DISC, V28, P92, DOI 10.1007/s10618-012-0295-5
   Mende T., 2009, P 5 INT C PREDICTOR, P1, DOI [10.1145/1540438.1540448, DOI 10.1145/1540438.1540448]
   Mende T, 2010, EUR CON SFTWR MTNCE, P107, DOI 10.1109/CSMR.2010.18
   Mende T, 2009, EUR CON SFTWR MTNCE, P247, DOI 10.1109/CSMR.2009.55
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P637, DOI 10.1109/TSE.2007.70721
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P409, DOI 10.1007/s10515-010-0070-z
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Mpofu B, 2016, 2016 THIRD INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATION AND ENGINEERING (ICACCE 2016), P254, DOI 10.1109/ICACCE.2016.8073757
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Nagappan N, 2005, PROC INT CONF SOFTW, P580, DOI 10.1145/1062455.1062558
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Ohlsson N, 1996, IEEE T SOFTWARE ENG, V22, P886, DOI 10.1109/32.553637
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Patro S. K., 2015, ARXIV
   Peters F, 2013, IEEE WORK CONF MIN S, P409, DOI 10.1109/MSR.2013.6624057
   PUDIL P, 1994, PATTERN RECOGN LETT, V15, P1119, DOI 10.1016/0167-8655(94)90127-9
   Qiu SJ, 2019, APPL SCI-BASEL, V9, DOI 10.3390/app9132660
   Rahman F, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P432, DOI 10.1109/ICSE.2013.6606589
   Ryu D, 2017, SOFTWARE QUAL J, V25, P235, DOI 10.1007/s11219-015-9287-1
   Suhag Vikas, 2020, Soft Computing: Theories and Applications. Proceedings of SoCTA 2018. Advances in Intelligent Systems and Computing (AISC 1053), P713, DOI 10.1007/978-981-15-0751-9_66
   Sun ZB, 2021, APPL SOFT COMPUT, V99, DOI 10.1016/j.asoc.2020.106940
   Tomar D, 2016, APPL COMPUT INTELL S, V2016, DOI 10.1155/2016/7658207
   Tomar D, 2015, INT J COMPUT INT SYS, V8, P761, DOI 10.1080/18756891.2015.1061395
   Turhan B, 2012, EMPIR SOFTW ENG, V17, P62, DOI 10.1007/s10664-011-9182-8
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Xu Z, 2019, J COMPUT SCI TECH-CH, V34, P1039, DOI 10.1007/s11390-019-1959-z
   Yu Q, 2019, IEEE ACCESS, V7, P35710, DOI 10.1109/ACCESS.2019.2895614
   Zhang HY, 2007, IEEE T SOFTWARE ENG, V33, P635, DOI 10.1109/TSE.2007.70706
   Zhao Y., 2012, RAND DATA MINING EXA
   Zhou ZH, 2006, IEEE T KNOWL DATA EN, V18, P63, DOI 10.1109/TKDE.2006.17
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 83
TC 4
Z9 4
U1 3
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 917
EP 946
DI 10.1007/s11219-023-09615-7
EA MAR 2023
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000943644600001
DA 2024-07-18
ER

PT J
AU Azzeh, M
   Nassif, AB
   López-Martín, C
AF Azzeh, Mohammad
   Nassif, Ali Bou
   Lopez-Martin, Cuauhtemoc
TI Empirical analysis on productivity prediction and locality for use case
   points method
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Use case points; Productivity; Effort estimation; Data locality
ID SOFTWARE PROJECT EFFORT; MODELS; SIZE; COST
AB Use case points (UCP) method has been around for over two decades. Although there was a substantial criticism concerning the algebraic construction and factor assessment of UCP, it remains an efficient early size estimation method. Predicting software effort from UCP is still an ever-present challenge. The earlier version of UCP method suggested using productivity as a cost driver, where fixed or a few pre-defined productivity ratios have been widely agreed. While this approach was successful when not enough historical data is available, it is no longer acceptable because software projects are different in terms of development aspects. Therefore, it is better to understand the relationship between productivity and other UCP variables. This paper examines the impact of data locality approaches on productivity and effort prediction from multiple UCP variables. The environmental factors are used as partitioning factors to produce local homogeneous data either based on their influential levels or using clustering algorithms. Different machine learning methods, including solo and ensemble methods, are used to construct productivity and effort prediction models based on the local data. The results demonstrate that the prediction models that are created based on local data surpass models that use entire data. Also, the results show that conforming to the hypothetical assumption between productivity and environmental factors is not necessarily a requirement for the success of locality.
C1 [Azzeh, Mohammad] Appl Sci Private Univ, Dept Software Engn, Amman, Jordan.
   [Nassif, Ali Bou] Univ Sharjah, Dept Comp Engn, Sharjah, U Arab Emirates.
   [Lopez-Martin, Cuauhtemoc] Univ Guadalajara, Dept Informat Syst, Zapopan, Jalisco, Mexico.
C3 University of Sharjah; Universidad de Guadalajara
RP Azzeh, M (corresponding author), Appl Sci Private Univ, Dept Software Engn, Amman, Jordan.
EM m.y.azzeh@asu.edu.jo; anassif@sharjah.ac.ae; cuauhtemoc@cucea.udg.mx
RI Azzeh, Mohammad/G-5472-2017; Lopez-Martin, Cuauhtemoc/AAL-4768-2021
OI Azzeh, Mohammad/0000-0002-0323-6452; 
FU Applied Science Private University, Amman, Jordan; University of Sharjah
FX Mohammad Azzeh is grateful to the Applied Science Private University,
   Amman, Jordan, for the financial support granted to cover the
   publication fee of this research article. Ali Bou Nassif would like to
   thank the University of Sharjah for supporting this research. Cuauhtemoc
   Lopez-Martin would like to thank the CUCEA, Universidad de Guadalajara,
   Mexico for its support during the development of this research.
CR Ali A, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2211
   Alves L.M, 2013, PROC FRONT EDUC CONF, DOI 10.1109/FIE.2013.6684796
   Alves R., 2013, P 5 ACM SIGCHI S ENG, P287, DOI [10.1145/2494603.2480300, DOI 10.1145/2494603.2480300]
   [Anonymous], 1984, CLASSIFICATION REGRE, DOI DOI 10.1038/ng.142
   Azzeh M, 2018, IET SOFTW, V12, P19, DOI 10.1049/iet-sen.2016.0322
   Azzeh M, 2016, APPL SOFT COMPUT, V49, P981, DOI 10.1016/j.asoc.2016.05.008
   Azzeh M, 2015, IET SOFTW, V9, P39, DOI 10.1049/iet-sen.2013.0165
   Colomo-Palacios R, 2014, SOFTWARE QUAL J, V22, P3, DOI 10.1007/s11219-012-9191-x
   Gallego JJC, 2007, J COMPUT SCI TECH-CH, V22, P371, DOI 10.1007/s11390-007-9043-5
   Engels G, 2008, 11 INT C QUAL ENG SO
   Foss T, 2003, IEEE T SOFTWARE ENG, V29, P985, DOI 10.1109/TSE.2003.1245300
   Gautam SS, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1983
   HENDERSONSELLER.B, 2002, LECT NOTES COMPUT SC, P409
   Humphrey W.S., 2002, ENCY SOFTWARE ENG, DOI DOI 10.1002/0471028959.SOF238
   Kamal MW, 2011, COMM COM INF SC, V181, P735
   Karner G., 1993, OBJECTIVE SYSTEMS SF, V17, P1
   Kitchenham B, 2004, IEEE T SOFTWARE ENG, V30, P1023, DOI 10.1109/TSE.2004.104
   Kocaguneli E., 2009, 20 INT S SOFTW REL E
   Kocaguneli E, 2013, J SYST SOFTWARE, V86, P1879, DOI 10.1016/j.jss.2013.02.053
   Lagerström R, 2012, SOFTWARE QUAL J, V20, P395, DOI 10.1007/s11219-011-9137-8
   Masson MEJ, 2003, CAN J EXP PSYCHOL, V57, P203, DOI 10.1037/h0087426
   Mendes E, 2003, EMPIR SOFTW ENG, V8, P163, DOI 10.1023/A:1023062629183
   Minku LL, 2013, INFORM SOFTWARE TECH, V55, P1512, DOI 10.1016/j.infsof.2012.09.012
   Nassif A.B., 2010, Journal of Global Research in Computer Science, V1, P12
   Nassif AB, 2017, J SOFTWARE EVOLUTION
   Nassif AB, 2011, 3 INT C INTELLIGENT, P615
   Nassif AB, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P612, DOI 10.1145/2591062.2591141
   Nassif AB, 2013, J SYST SOFTWARE, V86, P144, DOI 10.1016/j.jss.2012.07.050
   Nassif AB, 2011, PROC INT C TOOLS ART, P393, DOI 10.1109/ICTAI.2011.64
   Ochodek M, 2011, INFORM SOFTWARE TECH, V53, P885, DOI 10.1016/j.infsof.2011.02.004
   Ochodek M, 2011, INFORM SOFTWARE TECH, V53, P200, DOI 10.1016/j.infsof.2010.10.005
   Ochodek M, 2008, LECT NOTES COMPUT SC, V5082, P55
   Petersen K, 2011, INFORM SOFTWARE TECH, V53, P317, DOI 10.1016/j.infsof.2010.12.001
   Robiolo G, 2008, INNOV SYST SOFTW ENG, V4, P31, DOI 10.1007/s11334-007-0043-y
   Robiolo G, 2009, INT SYMP EMP SOFTWAR, P423
   Rodríguez D, 2012, J SYST SOFTWARE, V85, P562, DOI 10.1016/j.jss.2011.09.009
   Satapathy S.M., 2014, ARXIV PREPRINT ARXIV, P1
   Schneider G., 2001, Applying Use Cases: A Practical Guide
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   Silhavy P, 2019, IEEE ACCESS, V7, P9618, DOI 10.1109/ACCESS.2019.2891878
   Silhavy R, 2018, INFORM SOFTWARE TECH, V97, P1, DOI 10.1016/j.infsof.2017.12.009
   Silhavy R, 2017, J SYST SOFTWARE, V125, P1, DOI 10.1016/j.jss.2016.11.029
   Vapnik Vladmir N., 1995, GOOGLE SCHOLAR GOOGL
NR 43
TC 7
Z9 7
U1 1
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 309
EP 336
DI 10.1007/s11219-021-09547-0
EA APR 2021
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000637464100001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Singh, V
   Bongiovanni, B
   Brandon, W
AF Singh, Vandana
   Bongiovanni, Brice
   Brandon, William
TI Codes of conduct in Open Source Software-for warm and fuzzy feelings or
   equality in community?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Open source software; Gender and IT; Women in open source; Code of
   conduct; Diversity and inclusion
AB This paper focuses on codes of conduct (CoC) of Free and Open Source Software (F/OSS) and their role in improving women's participation in online communities of OSS. We investigated 355 F/OSS software package websites for the presence of codes of conduct and then analyzed these for diversity elements. Qualitative content analysis of the websites shows that less than 10% (28) of the analyzed websites had some type of community rules such as CoC. In-depth analysis of the CoCs demonstrated many discrepancies in the terminology, length, enforcement, and adoption of codes of conduct. To investigate the usage of these CoCs, we investigate five women-focused OSS discussion forums. This analysis shows the value of creating/adopting a CoC and the impact CoC can have on the participation of women. We also present the challenges in the usage and enforcement of CoCs as discussed by women of these forums. We conclude with recommendations for better enforcement of CoC and reflection on the ethical underpinnings of CoC as a tool to improve diversity and inclusion in OSS.
C1 [Singh, Vandana; Bongiovanni, Brice; Brandon, William] Univ Tennessee, Sch Informat Sci, 1345 Circle Pk Dr,Suite 451, Knoxville, TN 37996 USA.
C3 University of Tennessee System; University of Tennessee Knoxville
RP Singh, V (corresponding author), Univ Tennessee, Sch Informat Sci, 1345 Circle Pk Dr,Suite 451, Knoxville, TN 37996 USA.
EM vandana@utk.edu; bbongiov@vols.utk.edu; wbrando1@vols.utk.edu
RI Singh, Vandana/IQV-5543-2023
OI Singh, Vandana/0000-0002-9800-0505
CR Aurora V., 2010, ITS NOT JUST NOIRIN
   Aurora V., 2010, DARK SIDE OPEN SOURC
   Blincoe K, 2019, IEEE SOFTWARE, V36, P51, DOI 10.1109/MS.2019.2917428
   Brandon W, 2019, P 15 INT C OP SOURC, P68, DOI [10.1007/978-3-030-20883-7_7, DOI 10.1007/978-3-030-20883-7_7]
   Burnett M, 2016, 34TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2016, P2586, DOI 10.1145/2858036.2858274
   Cakebread Caroline, 2017, You're not alone, no one reads terms of service agreements
   Carillo K, 2017, J STRATEGIC INF SYST, V26, P322, DOI 10.1016/j.jsis.2017.03.001
   Carillo KDA, 2014, P ANN HICSS, P3276, DOI 10.1109/HICSS.2014.406
   Catolino G, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN SOCIETY (ICSE-SEIS 2019), P11, DOI 10.1109/ICSE-SEIS.2019.00010
   Childs Sue, 2017, HLTH INFORM INTERNET, V57, P1
   Coelho J, 2017, P 2017 11 JOINT M EU
   Cohem, 2018, NEW YORKER      0919
   Cruz AGB, 2018, INFORM SOC, V34, P15, DOI 10.1080/01972243.2017.1391909
   Department of Labor, 2017, LAB FORC STAT CURR P
   Fiesler C, 2016, 34TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2016, P2574, DOI 10.1145/2858036.2858409
   Finley K., 2017, WIRED MAGAZINE
   Ford D, 2017, S VIS LANG HUM CEN C, P239, DOI 10.1109/VLHCC.2017.8103473
   Graziotin D, 2014, IEEE SOFTWARE, V31, P24, DOI 10.1109/MS.2014.94
   Herring S.C., 1999, Computer Media and Communication: A Reader, P241
   IRINEP, 2017, IS OP SOURC OP WOM
   Kapor Center, 2017, TECH LEAV STUD
   Karpf D, 2011, J INF TECHNOL POLITI, V8, P323, DOI 10.1080/19331681.2011.575020
   Lewis R, 2015, SOCIOL RES ONLINE, V20, DOI 10.5153/sro.3781
   Menezes, 2018, INT WORKSH COOP HUM, DOI [10.1145/3195836.3195857, DOI 10.1145/3195836.3195857]
   Michlmayr Martin, 2009, UPGRADE: The European Journal for the Informatics Professional, V10, P22
   Minichiello V., 1990, IN DEPTH INTERVIEWIN
   Nafus D, 2012, NEW MEDIA SOC, V14, P669, DOI 10.1177/1461444811422887
   NCWIT, 2016, NTR
   Nielsen J, 2020, PEOPLE READ ONLINE N
   Nishii LH, 2013, ACAD MANAGE J, V56, P1754, DOI 10.5465/amj.2009.0823
   Powers T. M., 2003, Ethics and Information Technology, V5, P191, DOI 10.1023/B:ETIN.0000017737.56971.20
   Raasch Christina, 2008, OPEN SOURCE INNOVATI
   Reagle Joseph, 2013, First Monday, V18, P1, DOI 10.5210/fm.v18i1.4291
   Robles G, 2016, IFIP ADV INF COMM TE, V472, P163, DOI 10.1007/978-3-319-39225-7_13
   Rock D., 2016, HARV BUS REV
   Scacchi W, 2010, COLLABORATIVE SOFTWARE ENGINEERING, P307, DOI 10.1007/978-3-642-10294-3_15
   Schilling J, 2006, EUR J PSYCHOL ASSESS, V22, P28, DOI 10.1027/1015-5759.22.1.28
   Singh, 2019, 2 WORKSH GEND EQ GE
   Singh V., 2020, P 53 HAW INT C SYST
   Squire M, 2015, P ANN HICSS, P5290, DOI 10.1109/HICSS.2015.623
   Svrluga S., 2019, Washington Post
   Taft D., 2017, AMIDST BIAS WOMEN WO
   Taylor V, 2011, COMMUN ACM, V54, P34, DOI 10.1145/2043174.2043187
   Terrell J, 2017, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.111
   Tourani P, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P24, DOI 10.1109/SANER.2017.7884606
   Vanacker B, 2012, CONVERGENCE-US, V18, P71, DOI 10.1177/1354856511419916
   Vasilescu B, 2015, P 33 ANN ACM C HUM F, P3789, DOI DOI 10.1145/2702123.2702549
   Weller M, 2007, COMPUT EDUC, V49, P148, DOI 10.1016/j.compedu.2005.04.015
   Zhang Y., 2009, Qualitative analysis of content
   2012, J SYST SOFTWARE, V85, P1467, DOI DOI 10.1016/j.jss.2011.06.071
NR 50
TC 6
Z9 6
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 581
EP 620
DI 10.1007/s11219-020-09543-w
EA FEB 2021
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000622663000001
DA 2024-07-18
ER

PT J
AU Barbosa, R
   Fonseca, A
   Araujo, F
AF Barbosa, Raul
   Fonseca, Alcides
   Araujo, Filipe
TI Reductions and abstractions for formal verification of distributed
   round-based algorithms
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model checking; Distributed algorithms; Formal verification
ID BOUNDED MODEL CHECKING
AB Model checking has advanced over the last decades to become an effective formal technique for verifying distributed and concurrent systems. As computers grew in memory and processing capacity, it became possible to exhaustively verify systems with billions of states, making it practical to model and verify real-world protocols and algorithms. However, writing a model is a manual task that potentially introduces defects which the model checker tool finds to fulfill the formal specification (e.g., an incorrect model that fulfills an incomplete specification). Furthermore, this kind of formal verification technique is limited by the well-known state-space explosion problem. This paper aims to provide a set of generic template models, appropriate for distributed round-based algorithms, to be used to focus modeling effort on algorithm-specific details. To mitigate state-space explosion, the paper proposes two reduction techniques, named partition symmetry reduction and message order reduction, that exploit symmetries in the state space to avoid expanding equivalent states. The reusable framework for verifying round-based algorithms and the two proposed reduction techniques provide the means for reducing by orders of magnitude the number of states required to analyze common distributed algorithms.
C1 [Barbosa, Raul; Fonseca, Alcides; Araujo, Filipe] Univ Coimbra, Dept Informat Engn, CISUC, P-3030290 Coimbra, Portugal.
C3 Universidade de Coimbra
RP Barbosa, R (corresponding author), Univ Coimbra, Dept Informat Engn, CISUC, P-3030290 Coimbra, Portugal.
EM rbarbosa@dei.uc.pt
RI Araujo, Filipe/H-3664-2019; Fonseca, Alcides/ABH-3614-2020
OI Araujo, Filipe/0000-0002-1663-1937; Fonseca,
   Alcides/0000-0002-0879-4015; Barbosa, Raul/0000-0002-2916-7571
FU FCT - Foundation for Science and Technology, I.P. [CISUC -
   UID/CEC/00326/2020]; European Social Fund, through the Regional
   Operational Program Centro 2020 [LASIGE - UIDB/00408/2020]; European
   Social Fund, through the AESOP project [P2020-31/SI/2017, 040004];
   European Social Fund, through the CMU-Portugal project CAMELOT
   [POCI-01-0247-FEDER-045915]
FX This work is funded by national funds through the FCT - Foundation for
   Science and Technology, I.P., within the scope of project CISUC -
   UID/CEC/00326/2020 and by European Social Fund, through the Regional
   Operational Program Centro 2020, project LASIGE - UIDB/00408/2020, the
   AESOP project (P2020-31/SI/2017, No. 040004) and through the
   CMU-Portugal project CAMELOT (POCI-01-0247-FEDER-045915).
CR Aminof B, 2018, LECT NOTES COMPUT SC, V10747, P1, DOI 10.1007/978-3-319-73721-8_1
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Ben-Or M., 1983, P 2 ANN ACM S PRINC, P27, DOI DOI 10.1145/800221.806707
   Bona M., 2002, WALK COMBINATORICS I
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Bosnacki D., 2002, International Journal on Software Tools for Technology Transfer, V4, P92, DOI 10.1007/s100090200074
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Chaouch-Saad M, 2009, LECT NOTES COMPUT SC, V5797, P93, DOI 10.1007/978-3-642-04420-5_10
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Clarke E., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P419
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Clarke E., 2000, Computer Aided Verification, P154
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke T.A., 2018, HDB MODEL CHECKING, DOI DOI 10.1007/978-3-319-10575-8
   Cristian F, 1999, IEEE T PARALL DISTR, V10, P642, DOI 10.1109/71.774912
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dean J., 2004, P 6 S OPERATING SYST
   Eisner C, 2002, LECT NOTES COMPUT SC, V2318, P230
   ELRAD T, 1982, SCI COMPUT PROGRAM, V2, P155, DOI 10.1016/0167-6423(83)90013-8
   EMERSON E, 1996, FORM METHOD SYST DES, V9
   Erdös P, 1942, ANN MATH, V43, P437, DOI 10.2307/1968802
   Fichte Johannes K., 2020, Principles and Practice of Constraint Programming. 26th International Conference, CP 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12333), P267, DOI 10.1007/978-3-030-58475-7_16
   Gafni E., 1998, Proceedings of the Seventeenth Annual ACM Symposium on Principles of Distributed Computing, P143, DOI 10.1145/277697.277724
   Garcia-Perez Alvaro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P912, DOI 10.1007/978-3-319-89884-1_32
   Hardy GH, 1918, P LOND MATH SOC, V17, P75
   HERLIHY M, 1991, ACM T PROGR LANG SYS, V13, P124, DOI 10.1145/114005.102808
   Hughes C., 2003, PARALLEL DISTRIBUTED
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   MINSKY ML, 1961, ANN MATH, V74, P437, DOI 10.2307/1970290
   Peled Doron., 1994, Proceedings of the 6th International Conference on Computer Aided Veri cation, CAV '94, P377, DOI DOI 10.1007/3-540-58179-0_69
   Raynal, 2018, FAULT TOLERANT MESSA, P173
   Raynal M, 2005, STRUCTURAL INFORM CO
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   SRIKANTH TK, 1987, DISTRIB COMPUT, V2, P80, DOI 10.1007/BF01667080
   Tsuchiya T, 2008, LECT NOTES COMPUT SC, V5218, P466, DOI 10.1007/978-3-540-87779-0_32
NR 37
TC 4
Z9 4
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2021
VL 29
IS 3
SI SI
BP 705
EP 731
DI 10.1007/s11219-020-09539-6
EA FEB 2021
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UM3VY
UT WOS:000621248100001
DA 2024-07-18
ER

PT J
AU Santos, A
   Vegas, S
   Uyaguari, F
   Dieste, O
   Turhan, B
   Juristo, N
AF Santos, Adrian
   Vegas, Sira
   Uyaguari, Fernando
   Dieste, Oscar
   Turhan, Burak
   Juristo, Natalia
TI Increasing validity through replication: an illustrative TDD case
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Experiment; Replication; Threats to validity; Moderator; TDD
ID SOFTWARE ENGINEERING EXPERIMENTS
AB Software engineering (SE) experiments suffer from threats to validity that may impact their results. Replication allows researchers building on top of previous experiments' weaknesses and increasing the reliability of the findings. Illustrating the benefits of replication to increase the reliability of the findings and uncover moderator variables. We replicate an experiment on test-driven development (TDD) and address some of its threats to validity and those of a previous replication. We compare the replications' results and hypothesize on plausible moderators impacting results. Differences across TDD replications' results might be due to the operationalization of the response variables, the allocation of subjects to treatments, the allowance to work outside the laboratory, the provision of stubs, or the task. Replications allow examining the robustness of the findings, hypothesizing on plausible moderators influencing results, and strengthening the evidence obtained.
C1 [Santos, Adrian] Univ Oulu, ITEE M3S, Oulu, Finland.
   [Vegas, Sira; Dieste, Oscar; Juristo, Natalia] Univ Politecn Madrid, Escuela Tecn Super Ingn Informat, Madrid, Spain.
   [Uyaguari, Fernando] ETAPA, Cuenca, Ecuador.
   [Turhan, Burak] Monash Univ, Dept Comp Sci, Melbourne, Vic, Australia.
C3 University of Oulu; Universidad Politecnica de Madrid; Monash University
RP Santos, A (corresponding author), Univ Oulu, ITEE M3S, Oulu, Finland.
EM adrian.santos.parrilla@oulu.fi; fuyaguari01@gmail.com;
   burak.turhan@monash.edu; natalia@fi.upm.es
RI Dieste, Oscar/K-6193-2014; Vegas, Sira/R-6742-2018; Turhan,
   Burak/G-7400-2011
OI Dieste, Oscar/0000-0002-3060-7853; Turhan, Burak/0000-0003-1511-2163
FU University of Oulu including Oulu University Hospital
FX Open access funding provided by University of Oulu including Oulu
   University Hospital.
CR Aniche Mauricio Finavaro, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P469, DOI 10.1109/ICSTW.2010.16
   [Anonymous], 2011, Understanding the New Statistics: Effect Sizes, Confidence Intervals, and Meta-Analysis
   Beck Kent L., 2003, Test Driven Development By Example
   Bezerra RMM, 2015, INT SYMP EMP SOFTWAR, P132, DOI 10.1109/ESEM.2015.7321213
   Borenstein M., 2009, INTRO METAANALYSIS
   BROOKS RE, 1980, COMMUN ACM, V23, P207, DOI 10.1145/358841.358847
   Carver J.C, 2010, 1ST INT WORKSHOP REP
   Cederqvist P., 2002, VERSION MANAGEMENT C
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cook T. D., 1979, Quasi-experimentation: Design analysis issues for field settings
   da Silva FQB, 2014, EMPIR SOFTW ENG, V19, P501, DOI 10.1007/s10664-012-9227-7
   de Magalhaes CVC, 2015, INFORM SOFTWARE TECH, V64, P76, DOI 10.1016/j.infsof.2015.02.001
   Eclipse Foundation I, 2016, IDE DOCUMENTATION
   Erdogmus H, 2005, IEEE T SOFTWARE ENG, V31, P226, DOI 10.1109/TSE.2005.37
   Field A., 2013, DISCOVERING STAT USI
   Fucci Davide, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P103, DOI 10.1109/ESEM.2013.15
   Fucci D., 2015, P 19 INT C EV ASS SO, P25
   George B, 2004, INFORM SOFTWARE TECH, V46, P337, DOI 10.1016/j.infsof.2003.09.011
   Gómez OS, 2014, INFORM SOFTWARE TECH, V56, P1033, DOI 10.1016/j.infsof.2014.04.004
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hedges LV., 2014, STAT METHODS META AN
   ISO/IEC, 2011, ISO/IEC 25010:2011 Systems and software engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality models
   Jorgensen E., 1998, How to obtain those nasty standard errors from transformed data - and why they should not be used. Biometry Research Unit-Internal Report 7
   Juristo N, 2009, INT SYMP EMP SOFTWAR, P357
   Kampenes VB, 2007, INFORM SOFTWARE TECH, V49, P1073, DOI 10.1016/j.infsof.2007.02.015
   Kitchenham B, 2008, EMPIR SOFTW ENG, V13, P219, DOI 10.1007/s10664-008-9061-0
   Martin C., 2001, ADV PRINCIPLES PATTE
   Massol Vincent., 2003, JUNIT ACTION
   Munir H., 2014, Proc. 18th Int. Conf. Eval. Assess. Softw. Eng. - EASE, V14, P1
   Munir H, 2014, INFORM SOFTWARE TECH, V56, P375, DOI 10.1016/j.infsof.2014.01.002
   Offutt J, 2018, SOFTW TEST VERIF REL, V28, DOI 10.1002/stvr.1670
   Oracle V, 2015, VIRTUALBOX US MAN 20
   Rafique Y, 2013, IEEE T SOFTWARE ENG, V39, P835, DOI 10.1109/TSE.2012.28
   Shepperd M, 2016, PERSPECTIVES ON DATA SCIENCE FOR SOFTWARE ENGINEERING, P289
   Shull F, 2004, EMPIR SOFTW ENG, V9, P111, DOI 10.1023/B:EMSE.0000013516.80487.33
   Shull F, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P7, DOI 10.1109/ISESE.2002.1166920
   Shull F, 2010, IEEE SOFTWARE, V27, P16, DOI 10.1109/MS.2010.152
   Vegas S, 2016, IEEE T SOFTWARE ENG, V42, P120, DOI 10.1109/TSE.2015.2467378
   West B.T., 2014, Linear mixed models a practical guide using statistical software, DOI 10.1201/b17198
NR 39
TC 3
Z9 5
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 371
EP 395
DI 10.1007/s11219-020-09512-3
EA MAR 2020
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000521916000001
OA Green Submitted, Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Sas, D
   Avgeriou, P
AF Sas, Darius
   Avgeriou, Paris
TI Quality attribute trade-offs in the embedded systems industry: an
   exploratory case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Embedded systems; Technical debt; Energy efficiency; Dependability;
   Trade-off; Empirical study
ID TECHNICAL DEBT; FRAMEWORK
AB The embedded systems domain has grown exponentially over the past years. The industry is forced by the market to rapidly improve and release new products to beat the competition. Frenetic development rhythms thus shape this domain and give rise to several new challenges for software design and development. One of them is dealing with trade-offs between run-time and design-time quality attributes. To study practices, processes and tools concerning the management of run-time and design-time quality attributes as well as the trade-offs among them from the perspective of embedded systems software engineers. An exploratory case study with two qualitative data collection steps, namely interviews and a focus group, involving six different companies from the embedded systems domain with a total of twenty participants. The interviewed subjects showed a preference for run-time over design-time qualities. Trade-offs between design-time and run-time qualities are very common, but they are often implicit, due to the lack of adequate monitoring tools and practices. Practitioners prefer to deal with trade-offs in the most lightweight way possible, by applying ad-hoc practices, thus avoiding any overhead incurred. Finally, practitioners have elaborated on how they envision the ideal tool support for dealing with trade-offs. Although it is notoriously difficult to deal with trade-offs, constantly monitoring the quality attributes of interest with automated tools is key in making explicit and prudent trade-offs and mitigating the risk of incurring technical debt.
C1 [Sas, Darius; Avgeriou, Paris] Univ Groningen, Fac Sci & Engn, Bernoulli Inst Math Comp Sci & Artificial Intelli, Nijenborgh 9, NL-9747 AG Groningen, Netherlands.
C3 University of Groningen
RP Sas, D (corresponding author), Univ Groningen, Fac Sci & Engn, Bernoulli Inst Math Comp Sci & Artificial Intelli, Nijenborgh 9, NL-9747 AG Groningen, Netherlands.
EM d.d.sas@rug.nl; p.avgeriou@rug.nl
OI Avgeriou, Paris/0000-0002-7101-0754; Sas, Darius/0000-0003-3383-3298
FU European Union [780572 SDK4ED]
FX This work was financially supported by the European Union's Horizon 2020
   research and innovation programme under grant agreement No. 780572
   SDK4ED (https://sdk4ed.eu/).
CR Ampatzoglou A, 2016, INT WORKSH MANAG TEC, P9, DOI 10.1109/MTD.2016.8
   Ampatzoglou A, 2015, INFORM SOFTWARE TECH, V64, P52, DOI 10.1016/j.infsof.2015.04.001
   [Anonymous], 2010, IEC 61508
   [Anonymous], 2011, 25010 ISOIEC
   Barbacci M., 1995, TECH REP
   Barney S, 2012, INFORM SOFTWARE TECH, V54, P651, DOI 10.1016/j.infsof.2012.01.008
   Bass L., 1997, SOFTWARE ARCHITECTUR
   Bellomo S, 2015, IEEE SOFTWARE, V32, P38, DOI 10.1109/MS.2015.35
   Boeije H, 2002, QUAL QUANT, V36, P391, DOI 10.1023/A:1020909529486
   Brereton P., 2008, P 12 INT C EV ASS SO, DOI [10.1145/2601248.2601276, DOI 10.1145/2601248.2601276]
   Clements P, 2003, EVALUATING SOFTWARE
   Correa Ulisses Brisolara, 2010, Proceedings of the 2010 IEEE 10th International Conference on Computer and Information Technology (CIT 2010), P2381, DOI 10.1109/CIT.2010.409
   Erlikh L., 2000, IT Professional, V2, P17, DOI 10.1109/6294.846201
   Falessi D, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1978802.1978812
   Feitosa D, 2015, QOSA'15 PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGSOFT CONFERENCE ON QUALITY OF SOFTWARE ARCHITECTURES, P113, DOI 10.1145/2737182.2737190
   Fowler Martin, 2014, Technical Debt Quadrant.
   Glaser BG., 1967, Nurs. Res., DOI [DOI 10.4324/9780203793206, 10.1097/00006199-196807000-00014]
   Institute of Electrical and Electronics Engineers, 1993, IEEE Std 1061-1992, P1, DOI [10.1109/IEEESTD.1993.115124, DOI 10.1109/IEEESTD.1993.115124]
   Knight JC, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P685, DOI 10.1109/ICSE.2002.1008029
   Kontio J., 2008, FOCUS GROUP METHOD E, P93, DOI [DOI 10.1007/978-1-84800-044-5_4, DOI 10.1007/978-1-84800-044-5]
   Koopman P, 2004, COMPUTER, V37, P95, DOI 10.1109/MC.2004.52
   Kruchten P, 2012, IEEE SOFTWARE, V29, P18, DOI 10.1109/MS.2012.167
   Laprie JC., 1992, Dependability: Basic Concepts and Terminology, DOI [10.1007/978-3-7091-9170-5, DOI 10.1007/978-3-7091-9170-5]
   Mallick DN, 2005, PROD OPER MANAG, V14, P142, DOI 10.1111/j.1937-5956.2005.tb00015.x
   Martini A, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P422, DOI 10.1109/SEAA.2015.78
   Mcdonagh D, 2000, I ENG DESIGNERS J
   Mentis A, 2009, 2009 35TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P237, DOI 10.1109/SEAA.2009.84
   Oliveira MFS, 2008, MOMPES 2008: PROCEEDINGS OF THE FIFTH INTERNATIONAL WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, P68, DOI 10.1109/MOMPES.2008.11
   Papadopoulos L, 2018, SCOPES '18: PROCEEDINGS OF THE 21ST INTERNATIONAL WORKSHOP ON SOFTWARE AND COMPILERS FOR EMBEDDED SYSTEMS, P62, DOI 10.1145/3207719.3207736
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   Rodríguez D, 2012, J SYST SOFTWARE, V85, P562, DOI 10.1016/j.jss.2011.09.009
   Runeson Per, 2012, Case study research in software engineering: Guidelines and examples
   Sherman T, 2008, Advances in Computer and Informatiom Sciences and Engineering, P536, DOI 10.1007/978-1-4020-8741-7_95
   van Heesch U, 2012, J SYST SOFTWARE, V85, P795, DOI 10.1016/j.jss.2011.10.017
   van Solingen R., 2002, Encyclopedia of Software Engineering, DOI [DOI 10.1002/0471028959.SOF142, 10.1002/0471028959.sof142]
   Wahler M, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ICSAW), P253, DOI 10.1109/ICSAW.2017.10
NR 36
TC 11
Z9 12
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 505
EP 534
DI 10.1007/s11219-019-09478-x
EA DEC 2019
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000500633200001
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Jafari, AJ
   Rasoolzadegan, A
AF Jafari, Abbas Javan
   Rasoolzadegan, Abbas
TI Quality-centric security pattern mutations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Security patterns; Software quality; Object-oriented metrics; Security
   evaluation; Refactoring
ID OF-THE-ART; SOFTWARE QUALITY; DESIGN PATTERNS; MODEL; REQUIREMENTS;
   ATTRIBUTES
AB Security patterns are a means to encapsulate and communicate proven security solutions. They are well-established approaches for integrating security into the software development process. The literature includes a large array of security patterns categorized into various catalogs, from which the designers can choose a pattern suitable to the problem at hand. Previous efforts to choose appropriate security patterns have only considered the different functionality of the patterns. However, the solution structure of the chosen pattern will integrate with the overall software design and therefore affect many quality attributes such as flexibility and security. Thus, non-functional requirements should also be considered when opting to add a pattern to an existing software design. This will allow the designers to choose between alternative solutions based not only on functionality but also on the quality requirements put forth by different stakeholders. We propose the concept of quality-centric security pattern mutations which are created by mutating current patterns using design refactoring rules. These mutations offer the same behavior as the initial pattern but with varying effects on quality attributes such as flexibility, reusability, extendibility, and security. We have selected two well-established access control patterns as our case studies. We have used both object-oriented quality metrics and design security assessment metrics for quality evaluation and utilized petri nets to analyze behavior preservation. Our assessments demonstrate that the newly created mutations offer varying levels of quality while preserving the original pattern functionality.
C1 [Jafari, Abbas Javan] Ferdowsi Univ Mashhad, Mashhad, Razavi Khorasan, Iran.
   [Rasoolzadegan, Abbas] Ferdowsi Univ Mashhad, Comp Engn Dept, Mashhad, Razavi Khorasan, Iran.
C3 Ferdowsi University Mashhad; Ferdowsi University Mashhad
RP Jafari, AJ (corresponding author), Ferdowsi Univ Mashhad, Mashhad, Razavi Khorasan, Iran.
EM a_javanj@encs.concordia.ca; rasoolzadegan@um.ac.ir
RI Rasoolzadegan, Abbas/A-1729-2017
OI Rasoolzadegan, Abbas/0000-0001-8668-5650
CR Abramov J, 2012, INFORM SOFTWARE TECH, V54, P1029, DOI 10.1016/j.infsof.2012.04.001
   Alshammari Bandar, 2010, Proceedings of the 21st Australian Software Engineering Conference (ASWEC 2010), P55, DOI 10.1109/ASWEC.2010.34
   Alshammari B, 2009, INT CONF QUAL SOFTW, P11, DOI 10.1109/QSIC.2009.11
   Alvi A. K., 2011, DEP AUT SEC COMP DAS, P113
   Ampatzoglou A, 2013, J SYST SOFTWARE, V86, P1945, DOI 10.1016/j.jss.2013.03.063
   Anderson R.J., 2010, Security Engineering: A guide to building dependable distributed systems
   [Anonymous], 2012, Non-functional requirements in software engineering
   [Anonymous], P 19 EUR C PATT LANG
   [Anonymous], P 21 EUR C PATT LANG
   [Anonymous], P 23 C PATT LANG PRO
   [Anonymous], P 19 EUR C PATT LANG
   Arvanitou EM, 2017, J SYST SOFTWARE, V127, P52, DOI 10.1016/j.jss.2017.01.026
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Barney S, 2012, INFORM SOFTWARE TECH, V54, P651, DOI 10.1016/j.infsof.2012.01.008
   Basin D, 2006, ACM T SOFTW ENG METH, V15, P39, DOI 10.1145/1125808.1125810
   Bernardi Simona., 2002, Proceedings of the 3rd international workshop on Software and performance, P35, DOI DOI 10.1145/584369.584376
   Blakley B., 2004, OPEN GROUP SECURITY
   Bunke M, 2015, PROCEEDINGS OF THE 20TH EUROPEAN CONFERENCE ON PATTERN LANGUAGES OF PROGRAMS (EUROPLOP 2015), DOI 10.1145/2855321.2855364
   Choppy Christine, 2011, ACM SIGSOFT SOFTW EN, V36, P1, DOI [10.1145/1921532.1921561, DOI 10.1145/1921532.1921561]
   de Muijnck-Hughes J., 2012, 2012 International Conference on Software Security and Reliability Companion, P27, DOI 10.1109/SERE-C.2012.34
   Ding ZH, 2016, IEEE T INTELL TRANSP, V17, P3330, DOI 10.1109/TITS.2016.2518745
   Dong J, 2010, INFORM SOFTWARE TECH, V52, P274, DOI 10.1016/j.infsof.2009.10.001
   Dougherty C., 2009, SECURE DESIGN PATTER
   Duncan I, 2014, 2014 IEEE 8TH INTERNATIONAL SYMPOSIUM ON SERVICE ORIENTED SYSTEM ENGINEERING (SOSE), P428, DOI 10.1109/SOSE.2014.61
   Elahi G, 2011, P INT COMP SOFTW APP, P314, DOI 10.1109/COMPSAC.2011.48
   Fernandez A, 2003, GEOL SOC SPEC PUBL, P381
   Fernandez E.B., 2009, OOPSLA MINIPLOP C OR
   Fernandez E.B., 2013, SECURITY PATTERNS PR
   Fernandez E.B., 2001, INT PLOP 2001 C MONT
   Fernandez-Perdomo Enrique., 2011, OCEANS, 2011 IEEE-Spain, P1
   Ferraiolo D. F., 2001, ACM Transactions on Information and Systems Security, V4, P224, DOI 10.1145/501978.501980
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fowler Martin, 2018, Refactoring
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GONDI V., 2010, P 17 C PATT LANG PRO, P1
   Hafiz M., 2012, PROC ACM INT S NEW I, P139
   Hafiz M, 2013, SOFTWARE PRACT EXPER, V43, P769, DOI 10.1002/spe.1131
   Hafiz Munawar., 2006, P 2006 C PATTERN LAN, P1, DOI [10.1145/1415472.1415481, DOI 10.1145/1415472.1415481]
   Haigh M, 2010, SOFTWARE QUAL J, V18, P361, DOI 10.1007/s11219-010-9098-3
   Halkidis ST, 2006, COMPUT SECUR, V25, P379, DOI 10.1016/j.cose.2006.03.002
   Hamid Brahim, 2013, SDL 2013: Model-Driven Dependability Engineering. 16th International SDL Forum. Proceedings: LNCS 7916, P72, DOI 10.1007/978-3-642-38911-5_5
   Hamid B., 2010, P INT WORKSH SEC DEP, P8
   Hashizume K., 2009, P 16 C PATT LANG PRO, P13
   Heyman T., 2007, Proceedings of the Third International Workshop on Software Engineering for Secure Systems (SESS), Minneapolis, MN, USA, P3, DOI DOI 10.1109/SESS.2007.4
   Howard M., 2003, Writing Secure Code
   Hu Zhaoxia, 2004, SEKE, P213
   Jafari A. J., 2019, SECURITY PATTE UNPUB
   Jasiul B, 2014, LECT NOTES COMPUT SC, V8838, P667, DOI 10.1007/978-3-662-45237-0_60
   Jiirjens Jan, 2007, International Journal on Software Tools for Technology Transfer, V9, P527, DOI 10.1007/s10009-007-0048-8
   Kienzle DarrellM., 2002, SECURITY PATTERNS RE
   Kobashi T., 2013, AV REL SEC ARES 2013, P62
   Koch Manuel., 2006, Software Systems Modeling, V5, P429, DOI DOI 10.1007/S10270-006-0030-Z
   Laverdiere Marc-Andre., 2006, Proceedings of the Canadian Conference on Electrical and Computer Engineering (CCECE), P1605, DOI [10.1109/CCECE.2006.277727, DOI 10.1109/CCECE.2006.277727]
   Li YS, 2010, IFERA AT CHINA 2010 FAMILY BUSINESS FORUM: OPPORTUNITIES AND CHALLENGES OF FAMILY BUSINESS, P1
   Mariani T, 2017, INFORM SOFTWARE TECH, V83, P14, DOI 10.1016/j.infsof.2016.11.009
   Mayvan BB, 2017, J SYST SOFTWARE, V125, P93, DOI 10.1016/j.jss.2016.11.030
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Misbhauddin M, 2015, EMPIR SOFTW ENG, V20, P206, DOI 10.1007/s10664-013-9283-7
   Mkaouer MW, 2016, EMPIR SOFTW ENG, V21, P2503, DOI 10.1007/s10664-015-9414-4
   Motii A., 2016, INT C COMP SAF REL S, P375
   Opdyke William F., 1992, THESIS
   Ortiz R, 2011, LECT NOTES BUS INF P, V83, P652
   Priebe T, 2004, INT FED INFO PROC, V144, P235
   Regnell B, 2008, IEEE SOFTWARE, V25, P42, DOI 10.1109/MS.2008.48
   Riaz M, 2015, INFORM SOFTWARE TECH, V65, P14, DOI 10.1016/j.infsof.2015.04.002
   Sandhu RS, 1996, COMPUTER, V29, P38, DOI 10.1109/2.485845
   Schumacher M., 2013, Security Patterns: Integrating Security and Systems Engineering
   Smith B, 2012, PROCEEDINGS OF THE 2012 COAL OPERATORS' CONFERENCE, P103
   Steel Chritopher., 2006, CORE SECURITY PATTER
   Sultana K. Z., 2017, SOFTW QUAL J, V27, P5
   Thierry-Mieg Y, 2008, INNOV SYST SOFTW ENG, V4, P293, DOI 10.1007/s11334-008-0065-0
   Uzunov AV, 2012, COMPUT SECUR, V31, P681, DOI 10.1016/j.cose.2012.04.005
   van den Berghe A, 2017, SOFTW SYST MODEL, V16, P809, DOI 10.1007/s10270-015-0486-9
   Yang NH, 2012, TELECOMMUN SYST, V51, P147, DOI 10.1007/s11235-011-9424-5
   Yin R.K., 2014, Applications of case study research, V2nd
   YODER J, 1997, 4 C PATT LANG PROGR
   Yskout K, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P292, DOI 10.1109/ICSE.2015.49
   Zhang C, 2012, IEEE T SOFTWARE ENG, V38, P1213, DOI 10.1109/TSE.2011.79
   Zhang F, 2017, IEEE T SOFTWARE ENG, V43, P476, DOI 10.1109/TSE.2016.2599161
   Zhu LM, 2005, SOFTWARE QUAL J, V13, P357, DOI 10.1007/s11219-005-4251-0
NR 80
TC 1
Z9 1
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2019
VL 27
IS 4
BP 1531
EP 1561
DI 10.1007/s11219-019-09454-5
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KP9TA
UT WOS:000516573400007
DA 2024-07-18
ER

PT J
AU van den Bos, P
   Janssen, R
   Moerman, J
AF van den Bos, Petra
   Janssen, Ramon
   Moerman, Joshua
TI n-Complete test suites for IOCO
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE IOCO; Model-based testing; Complete test suite; Distinguishing states
AB An n-complete test suite for automata guarantees to detect all faulty implementations with a bounded number of states. We propose a construction of such a test suite for ioco conformance on labeled transition systems, which we derive from construction methods for deterministic FSMs. Our resulting test suite poses no further restrictions on the implementations other than their number of states and fairness in test execution. This elevates restrictions made in existing methods. In particular, we address the problem of compatible states: specification states which can be implemented by a single state. Such states are forbidden by existing methods for ioco, as they complicate test suite construction.
C1 [van den Bos, Petra; Janssen, Ramon; Moerman, Joshua] Radboud Univ Nijmegen, Inst Comp & Informat Sci, Nijmegen, Netherlands.
C3 Radboud University Nijmegen
RP van den Bos, P (corresponding author), Radboud Univ Nijmegen, Inst Comp & Informat Sci, Nijmegen, Netherlands.
EM petra@cs.ru.nl; ramonjanssen@cs.ru.nl; joshua.moerman@cs.ru.nl
OI Moerman, Joshua/0000-0001-9819-8374
FU NWO project [13859]
FX Petra van den Bos and Ramon Janssen were supported by NWO project 13859
   (SUMBAT).
CR Aarts F, 2010, LECT NOTES COMPUT SC, V6269, P71, DOI 10.1007/978-3-642-15375-4_6
   [Anonymous], 2005, 2 INT C PERS TECHN, DOI DOI 10.1007/11759744N9
   Benes N, 2015, 2015 18th International ACM SIGSOFT Symposium on Component-Based Software Engineering (CBSE), P101, DOI 10.1145/2737166.2737175
   Bonchi F, 2015, COMMUN ACM, V58, P87, DOI 10.1145/2713167
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dorofeeva R, 2010, INFORM SOFTWARE TECH, V52, P1286, DOI 10.1016/j.infsof.2010.07.001
   Hierons RM, 2004, IEEE T COMPUT, V53, P1330, DOI 10.1109/TC.2004.85
   LEE D, 1994, IEEE T COMPUT, V43, P306, DOI 10.1109/12.272431
   Noroozi N., 2014, THESIS
   Paiva SC, 2016, FORM ASP COMPUT, V28, P65, DOI 10.1007/s00165-015-0350-2
   Petrenko A, 2011, LECT NOTES COMPUT SC, V7019, P162, DOI 10.1007/978-3-642-24580-0_12
   Simao A., 2014, ELECT P THEOR COMPUT, V141, P56, DOI DOI 10.4204/EPTCS.141.5
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Tretmans Jan., 1996, Test generation with inputs, outputs and repetitive quiescence
   van den Bos P, 2017, LECT NOTES COMPUT SC, V10533, P91, DOI 10.1007/978-3-319-67549-7_6
   Veanes Margus, 2012, International Journal on Software Tools for Technology Transfer, V14, P387, DOI 10.1007/s10009-011-0215-9
   Willemse T.A.C., 2006, LNCS, V4346, P132, DOI [10.1007/978-3-540-70952-79, DOI 10.1007/978-3-540-70952-79]
NR 17
TC 6
Z9 6
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 563
EP 588
DI 10.1007/s11219-018-9422-x
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500004
OA Green Submitted, Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Alférez, M
   Acher, M
   Galindo, JA
   Baudry, B
   Benavides, D
AF Alferez, Mauricio
   Acher, Mathieu
   Galindo, Jose A.
   Baudry, Benoit
   Benavides, David
TI Modeling variability in the video domain: language and experience report
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Variability modeling; Feature modeling; Software product line
   engineering; Configuration; Automated reasoning; Domain-specific
   languages; Video testing
AB In an industrial project, we addressed the challenge of developing a software-based video generator such that consumers and providers of video processing algorithms can benchmark them on a wide range of video variants. This article aims to report on our positive experience in modeling, controlling, and implementing software variability in the video domain. We describe how we have designed and developed a variability modeling language, called VM, resulting from the close collaboration with industrial partners during 2 years. We expose the specific requirements and advanced variability constructs; we developed and used to characterize and derive variations of video sequences. The results of our experiments and industrial experience show that our solution is effective to model complex variability information and supports the synthesis of hundreds of realistic video variants. From the software language perspective, we learned that basic variability mechanisms are useful but not enough; attributes and multi-features are of prior importance; meta-information and specific constructs are relevant for scalable and purposeful reasoning over variability models. From the video domain and software perspective, we report on the practical benefits of a variability approach. With more automation and control, practitioners can now envision benchmarking video algorithms over large, diverse, controlled, yet realistic datasets (videos that mimic real recorded videos)-something impossible at the beginning of the project.
C1 [Alferez, Mauricio] Univ Luxembourg, Interdisciplinary Ctr Secur Reliabil & Trust SnT, 2 Ave JF Kennedy, L-1855 Luxembourg, Luxembourg.
   [Acher, Mathieu] Univ Rennes, DiverSE Team Inria Rennes, IRISA, CNRS, Rennes, France.
   [Galindo, Jose A.; Benavides, David] Univ Seville, Dept Comp Languages & Syst, Seville, Spain.
   [Baudry, Benoit] Royal Inst Technol, EECS SCS, KTH, Stockholm, Sweden.
C3 University of Luxembourg; Centre National de la Recherche Scientifique
   (CNRS); Universite de Rennes; University of Sevilla; Royal Institute of
   Technology
RP Acher, M (corresponding author), Univ Rennes, DiverSE Team Inria Rennes, IRISA, CNRS, Rennes, France.
EM mauricio.alferez@siemens.com; mathieu.acher@irisa.fr; jagalindo@us.es;
   benoit.baudry@inria.fr; benavides@us.es
RI Benavides, David/K-2791-2014; salinas, edward mauricio
   alferez/AAI-6784-2020
OI Benavides, David/0000-0002-8449-3273; salinas, edward mauricio
   alferez/0000-0002-4321-3669; Acher, Mathieu/0000-0003-1483-3858
FU project MOTIV of the Direction Generale de l'Armement (DGA) - Ministere
   de la Defense, France; European Commission (FEDER); Spanish government
   under BELi project [TIN2015-70560-R]
FX This work was financed by the project MOTIV of the Direction Generale de
   l'Armement (DGA) - Ministere de la Defense, France. Also, by the
   European Commission (FEDER) and by the Spanish government under BELi
   (TIN2015-70560-R) project. We thank all participants of the project.
   Special thanks to Pierre Romenteau from InPixal (Rennes, France) for his
   continuous feedbacks and his joint development for synthesizing video
   variants.
CR Abele Andreas., 2010, Proceedings of the 4th International Workshop on Variability Modelling of Software-Intensive Systems (VaMoS'10), V37, P101
   Acher M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P142, DOI 10.1145/2648511.2648526
   Acher M, 2013, SCI COMPUT PROGRAM, V78, P657, DOI 10.1016/j.scico.2012.12.004
   Acher M, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P77, DOI 10.1109/ICECCS.2011.15
   Alferez M., 2014, RR8576 INRIA
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], VAMOS 13
   [Anonymous], 200916 TU BERL
   [Anonymous], 2013, P 17 INT SOFTWARE PR
   [Anonymous], 2010, VAMOS
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   Apel S., 2013, ICSE 13
   Bak K., 2010, P 3 INT C SOFTW LANG, P102
   Benavides D., 2013, SYSTEMS SOFTWARE VAR, P163
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Berger T, 2014, LECT NOTES COMPUT SC, V8767, P302, DOI 10.1007/978-3-319-11653-2_19
   Berger T, 2013, IEEE T SOFTWARE ENG, V39, P1611, DOI 10.1109/TSE.2013.34
   Beuche D., 2016, SPLC 16, P333
   Classen A, 2011, SCI COMPUT PROGRAM, V76, P1130, DOI 10.1016/j.scico.2010.10.005
   Cohen M.B., 2006, P ISSTA 2006 WORKSHO, P53, DOI DOI 10.1145/1147249.1147257
   Cordy M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P472, DOI 10.1109/ICSE.2013.6606593
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   Dumitrescu C., 2013, P 17 INT SOFTW PROD, P254
   Dumitrescu C., 2013, CSDM, P125
   Eichelberger H, 2015, INT J SOFTW TOOLS TE, V17, P559, DOI 10.1007/s10009-014-0362-x
   Eichelberger Holger., 2013, Proceedings of the 17th International Software Product Line Conference (SPLC'13), P12
   Fogdal T., 2016, P SPLC, P252
   Galindo J.A., 2014, P 2014 INT S SOFTWAR, P293, DOI [10.1145/2610384.2610411, DOI 10.1145/2610384.2610411]
   Galster M, 2014, IEEE T SOFTWARE ENG, V40, P282, DOI 10.1109/TSE.2013.56
   Gray Jeff., 2008, COMP 23 ACM SIGPLAN, P791
   Grochtmann M., 1993, Software Testing, Verification and Reliability, V3, P63, DOI 10.1002/stvr.4370030203
   Guo J., 2013, 28 IEEE ACM INT C AU
   Henard C, 2014, IEEE T SOFTWARE ENG, V40, P650, DOI 10.1109/TSE.2014.2327020
   Hervieu A, 2016, INFORM SOFTWARE TECH, V71, P129, DOI 10.1016/j.infsof.2015.11.007
   Hofman P., 2012, P 16 INT SOFTW PROD, P229
   Ida S., 2007, TECH REP
   Johansen Martin Fagereng, 2012, P 16 INT SOFTWARE PR, P46, DOI [10.1145/2362536.2362547, DOI 10.1145/2362536.2362547]
   Kang K. C., 1990, Technical Report
   Karatas AS, 2013, SCI COMPUT PROGRAM, V78, P2295, DOI 10.1016/j.scico.2012.06.004
   Krueger CharlesW., 2014, 18th International Software Product Lines Conference - Companion Volume for Workshop, Tools and Demo papers, SPLC'14, Florence, Italy, September 15-19, 2014, P121, DOI DOI 10.1145/2647908.2655976
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Moisan Sabine, 2011, Computer Vision Systems. Proceedings 8th International Conference (ICVS 2011), P203, DOI 10.1007/978-3-642-23968-7_21
   Mussbacher G, 2012, SOFTWARE QUAL J, V20, P645, DOI 10.1007/s11219-011-9153-8
   Nadi S, 2016, TENTH INTERNATIONAL WORKSHOP ON VARIABILITY MODELLING OF SOFTWARE-INTENSIVE SYSTEMS (VAMOS 2016), P105, DOI 10.1145/2866614.2866629
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Oh S., 2011, P CVPR, P3153, DOI DOI 10.1109/CVPR.2011.5995586
   Parker J. R., 2010, Algorithms for Image Processing and Computer Vision
   Perrouin Gilles, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P459, DOI 10.1109/ICST.2010.43
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Ponce J., 2011, COMPUTER, V16, P11
   Quinton Clement., 2013, P 17 INT SOFTWARE PR, P162
   Rosenmuller M, 2011, P 5 INT WORKSH VAR M, P11, DOI DOI 10.1145/1944892.1944894
   Savolainen Juha, 2011, Top Productivity through Software Reuse. Proceedings of the 12th International Conference on Software Reuse, ICSR 2011, P192, DOI 10.1007/978-3-642-21347-2_15
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   Segura S., 2012, Proceedings of the Sixth International Workshop on Variability Modeling of Software-Intensive Systems, P63, DOI DOI 10.1145/2110147.2110155
   Sepúlveda S, 2016, INFORM SOFTWARE TECH, V69, P16, DOI 10.1016/j.infsof.2015.08.007
   Siegmund N, 2012, SOFTWARE QUAL J, V20, P487, DOI 10.1007/s11219-011-9152-9
   Sobernig S, 2016, EMPIR SOFTW ENG, V21, P1670, DOI 10.1007/s10664-014-9336-6
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Temple P., 2016, SOFTW PROD LIN C SPL
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Van Deursen Arie, 2002, JOURNAL OF COMPUTING, V10.1, P1
   Voelter Markus, 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P70, DOI 10.1109/SPLC.2011.25
   Voelter M, 2013, DSL ENG DESIGNING IM
   Wang S, 2017, SOFTW SYST MODEL, V16, P417, DOI 10.1007/s10270-015-0462-4
   Wang S, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P32, DOI 10.1145/2648511.2648515
   Weber V, 2014, THESIS
   White J, 2010, J SYST SOFTWARE, V83, P1094, DOI 10.1016/j.jss.2010.02.017
   White J., 2009, P 13 INT SOFTW PROD, P11
   Yilmaz C, 2006, IEEE T SOFTWARE ENG, V32, P20, DOI 10.1109/TSE.2006.8
   Zhang H, 2008, COMPUT VIS IMAGE UND, V110, P260, DOI 10.1016/j.cviu.2007.08.003
   Zhang W, 2008, LECT NOTES COMPUT SC, V5030, P186, DOI 10.1007/978-3-540-68073-4_18
NR 73
TC 14
Z9 14
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 307
EP 347
DI 10.1007/s11219-017-9400-8
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ratiu, D
   Voelter, M
   Pavletic, D
AF Ratiu, Daniel
   Voelter, Markus
   Pavletic, Domenik
TI Automated testing of DSL implementationsexperiences from building mbeddr
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Domain specific languages; Testing; Quality assurance; Automation
ID DOMAIN
AB Domain-specific languages promise to improve productivity and quality of software development by providing problem-adequate abstractions to developers. Projectional language workbenches, in turn, allow the definition of modular and extensible domain specific languages, generators, and development environments. While recent advances in language engineering have enabled the definition of DSLs and tooling in a modular and cost-effective way, the quality assurance of their implementation is still challenging. In this paper, we discuss our work on testing different aspects of the implementation of domain specific languages and associated tools, and present several approaches to increase the automation of language testing. We illustrate these approaches with the Jetbrains MPS language workbench and our experience with testing mbeddr, a set of domain specific languages and tools on top of C tailored to embedded software development. Based on the experience gained from the mbeddr project, we extract generic lessons for practitioners as well as challenges which need more research.
C1 [Ratiu, Daniel] Siemens AG, Munich, Germany.
   [Voelter, Markus] Independent Itemis AG, Stuttgart, Germany.
   [Pavletic, Domenik] Itemis AG, Stuttgart, Germany.
C3 Siemens AG; Siemens Germany
RP Ratiu, D (corresponding author), Siemens AG, Munich, Germany.
EM daniel.ratiu@siemens.com; voelter@acm.org; pavletic@itemis.de
CR Amrani M, 2015, J OBJECT TECHNOL, V14, DOI 10.5381/jot.2015.14.1.a3
   [Anonymous], 2013, DSL ENG
   Campagne F., 2014, The MPS Language Workbench, VI.
   Chis A, 2015, COMPUT LANG SYST STR, V44, P89, DOI 10.1016/j.cl.2015.08.005
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Ellison Charles., 2012, A formal semantics of C with applications
   Erdweg S., 2013, LNCS
   Eysholdt M., 2014, EXECUTABLE SPECIFICA
   Fetscher B, 2015, MAKING RANDOM JUDGME, P383
   Free Software Foundation, 2015, GNU PROJ DEB
   Gargantini A, 2009, AUTOMAT SOFTW ENG, V16, P415, DOI 10.1007/s10515-009-0053-0
   Garousi V, 2013, J SYST SOFTWARE, V86, P1354, DOI 10.1016/j.jss.2012.12.051
   JetBrains, 2017, JETBRAINS MPS DOC
   Kats LCL, 2011, ACM SIGPLAN NOTICES, V46, P139, DOI 10.1145/2076021.2048080
   Lammel R., 2001, P 4 INT C FUND APPR
   Molotnikov Zaur., 2014, Proceedings of the 29th ACM/IEEE international conference on Automated software engineering, P539
   Palka Michal H, 2011, P 6 INT WORKSH AUT S, P91, DOI DOI 10.1145/1982595.1982615
   Pavletic Domenik, 2015, Reliable Software Technologies - Ada-Europe 2015. 20th Ada-Europe International Conference on Reliable Software Technologies. Proceedings: LNCS 9111, P33, DOI 10.1007/978-3-319-19584-1
   Pavletic D., 2015, CEUR WORKSHOP P, V1560, P34
   Pavletic D, 2013, SOFTWARETECHNIK TREN, V33, P2, DOI [10.1007/s40568-013-0044-y, DOI 10.1007/S40568-013-0044-Y]
   Ratiu Daniel, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P465, DOI 10.1007/978-3-642-38088-4_35
   Ratiu D., 2016, P 11 INT WORKSH AUT
   Ratiu D, 2012, P WORKSH FORM METH S
   Ratiu D., 2017, P 24 ACM SIGSOFT INT
   Tolvanen JP, 2016, PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2016), P711
   Voelter M., 2014, GEMOC MOD CEUR WORKS, V1236, P7
   Voelter M., 2015, Using C language extensions for developing embedded software: A case study, V50
   Voelter M, 2012, SPLASH 12
   Voelter M, 2011, LECT NOTES COMPUTER
   Voelter M., 2017, SOFTWARE SYSTEMS MOD
   Voelter M, 2013, AUTOMAT SOFTW ENG, V20, P339, DOI 10.1007/s10515-013-0120-4
   Wu H., 2012, METAMODEL INSTANCE G
   Wu H, 2009, LECT NOTES COMPUT SC, V5658, P125, DOI 10.1007/978-3-642-03034-5_7
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 34
TC 3
Z9 4
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1483
EP 1518
DI 10.1007/s11219-017-9390-6
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400010
DA 2024-07-18
ER

PT J
AU Metcalf, CA
   Yavuz, T
AF Metcalf, Chelsea A.
   Yavuz, Tuba
TI Detecting potential deadlocks through change impact analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Deadlocks; Static analysis; Regression analysis
ID JAVA PROGRAMS; MODEL CHECKING
AB This paper presents a static analysis-based regression analysis for multithreaded Java applications to help detect changes that may introduce potential deadlocks. Our approach leverages the correct/intended ordering of lock acquires and proposes to keep a watch list of lock type pairs that the developers may want to keep an eye on as the software evolves. The idea is to filter code changes that may employ the locks in the wrong order. We also present a heuristic that can automatically infer the intended order most of the time. Our experiments on several case studies with large code bases show that our approach is effective in pinpointing code changes that may introduce deadlocks and a cost-effective way of utilizing static analysis.
C1 [Metcalf, Chelsea A.] Univ Florida, CISE Dept, Gainesville, FL USA.
   [Yavuz, Tuba] Univ Florida, ECE Dept, Gainesville, FL 32611 USA.
C3 State University System of Florida; University of Florida; State
   University System of Florida; University of Florida
RP Yavuz, T (corresponding author), Univ Florida, ECE Dept, Gainesville, FL 32611 USA.
EM chelseametcalf@ufl.edu; tuba@ece.ufl.edu
CR Agarwal R, 2005, P PAR DISTR SYST TES
   Andersen L. O., 1994, Technical Report
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering (FSE'11), DOI [10.1145/2025113.2025121, DOI 10.1145/2025113.2025121]
   Bensalem S., 2006, PADTAD'06, P41, DOI DOI 10.1145/1147403.1147412
   Bensalem Saddek, 2005, P HAIF VER C, P208
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Cai Y., 2016, P 38 INT C SOFTW ENG
   Cai Y, 2012, PROC INT CONF SOFTW, P606, DOI 10.1109/ICSE.2012.6227156
   Demartini C, 1999, SOFTWARE PRACT EXPER, V29, P577, DOI 10.1002/(SICI)1097-024X(199906)29:7<577::AID-SPE246>3.0.CO;2-V
   Edelstein O, 2003, CONCURR COMP-PRACT E, V15, P485, DOI 10.1002/cpe.654
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Eslamimehr M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P353, DOI 10.1145/2635868.2635918
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Havelund K, 2000, LECT NOTES COMPUT SC, V1885, P245
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Jagannath Vilas., 2011, P 2011 INT S SOFTWAR, P133
   Joshi P, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P110, DOI 10.1145/1542476.1542489
   Joshi Pallavi, 2010, P 18 ACM SIGSOFT INT, P327, DOI 10.1145/1882291.1882339
   Marino D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P322, DOI 10.1109/ICSE.2013.6606578
   Naik M, 2009, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2009.5070538
   Pasareanu Corina S, 2010, P IEEE ACM INT C AUT, P179
   Terragni V, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P246, DOI 10.1109/ICSE.2015.45
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Wang HJ, 2017, IEEE T SOFTWARE ENG, V43, P252, DOI 10.1109/TSE.2016.2584063
   Williams A, 2005, LECT NOTES COMPUT SC, V3586, P602
   Yang GW, 2009, PROC IEEE INT CONF S, P115, DOI 10.1109/ICSM.2009.5306334
   Yu T., 2014, P 36 INT C SOFTW ENG, P4859
NR 27
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 1015
EP 1036
DI 10.1007/s11219-017-9377-3
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000007
DA 2024-07-18
ER

PT J
AU Ukic, N
   Maras, J
   Seric, L
AF Ukic, Nenad
   Maras, Josip
   Seric, Ljiljana
TI The influence of cyclomatic complexity distribution on the
   understandability of xtUML models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE XtUML; Understandability; Cyclomatic complexity; Distribution
AB Executable software models formalize functional software requirements. This means that the understandability of software models is of paramount importance. In this paper, we investigate the influence of cyclomatic complexity on the understandability of executable translatable unified modeling language (xtUML) models. We adapt traditional cyclomatic complexity metrics to different xtUML sub-models and present two different ways of measuring complexity distribution: horizontal, among elements of the same type, and vertical, among elements of different types. In order to test our hypothesis that cyclomatic complexity distribution influences the understandability of xtUML models, we have performed an experiment with student participants in which we have evaluated the understandability of three semantically equivalent xtUML models with different complexity distributions. Results indicate that a better distribution of cyclomatic complexity has a positive influence on model understandability.
C1 [Ukic, Nenad] Ericsson Nikola Tesla Dd, Poljicka Cesta 39, Split 21000, Croatia.
   [Maras, Josip; Seric, Ljiljana] Univ Split, Fac Elect Engn Mech Engn & Naval Architecture Spl, R Boskovica 32, Split 21000, Croatia.
C3 Ericsson; University of Split
RP Ukic, N (corresponding author), Ericsson Nikola Tesla Dd, Poljicka Cesta 39, Split 21000, Croatia.
EM nenad.ukic@ericsson.com; Josip.Maras@fesb.hr; Ljiljana.Seric@fesb.hr
RI Seric, Ljiljana/E-4885-2017
OI Seric, Ljiljana/0000-0002-6390-1899
CR Abran A., 2001, Guide to the software engineering body of knowledge: trial version
   Aggarwal KK, 2002, P A REL MAI, P235, DOI 10.1109/RAMS.2002.981648
   Albrech A., 1979, PROC JOINT SHAREGUID, P83
   [Anonymous], STAT DATA R APPL APP
   BERK RA, 1983, AM SOCIOL REV, V48, P386, DOI 10.2307/2095230
   Burden H, 2011, ASIA PAC SOFWR ENG, P114, DOI 10.1109/APSEC.2011.37
   CAMPBELL DT, 1957, PSYCHOL BULL, V54, P297, DOI 10.1037/h0040950
   Chen K., 2000, CASE STUDY FEATURE L
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cruz-Lemus J.A., 2010, INFORM SCI
   Danziger Shai, 2011, Proc Natl Acad Sci U S A, V108, P6889, DOI 10.1073/pnas.1018033108
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Dit B, 2013, J SOFTW-EVOL PROC, V25, P53, DOI 10.1002/smr.567
   Fisher R. A., 1946, Statistical methods for research workers.
   Fraenkel J.R., 2009, DESIGN EVALUATE RES, V7th Eds
   Gunning R., 1969, Journal of Business Communication, V6, P3, DOI [10.1177/002194366900600202, DOI 10.1177/002194366900600202]
   HENDERSONSELLERS B, 1994, SOFTWARE QUAL J, V3, P253, DOI 10.1007/BF00403560
   Henry S., 1981, Performance Evaluation Review, V10, P81, DOI 10.1145/1010627.807911
   Hofmann T, 1999, SIGIR'99: PROCEEDINGS OF 22ND INTERNATIONAL CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P50, DOI 10.1145/312624.312649
   Iversen G. R., 1987, ANAL OF VARIANCE, V1
   Khoshgoftaar T., 1990, IEEE J SELECTED AREA
   Kleppe A. G., 2003, MODEL DRIVEN ARCHITE
   Labrosse J., 2008, EMBEDDED SOFTWARE
   Laitinen K., 1996, Software Engineering Notes, V21, P81, DOI 10.1145/232069.232092
   Lavazza L., 2010, P 2010 ACM IEEE INT
   Li W., 1993, J SYSTEMS SOFTWARE
   Lippert M., 2006, Refactoring in large software projects: performing complex restructurings successfully
   Mattias Mohlin I., 2013, MODELING REAL TIME A
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mellor S., 2005, WHITEPAPERS CNET NET
   Mellor SJ, 2005, UML for SOC Design, P17, DOI 10.1007/0-387-25745-4_2
   Mellor SJ., 2002, EXECUTABLE UML FDN M
   Mellor StephenJ., 2004, MDA Distilled: Principles of Model-Driven Architecture
   Nazir M., 2010, ARXIV10044463
   Object Management Group O., 2016, MODEL DRIVEN ARCHITE
   OMG, 2013, OMG ALF STAND
   OMG, 2016, SEM FDN SUBS EX UML
   (OMG) O.M.G., 2014, AUT FUNCT POINTS
   OneFact, 2016, BRIDG FAQ
   OneFact, 2015, BRIDG TOOL
   OneFact, 2016, BRIDG XTUML TOOL
   Perisic Branko., 2014, Infoteh- Jahorina, V13, P1237
   Porter M., 2006, The porter stemming algorithm
   Porter MF, 2006, PROGRAM-ELECTRON LIB, V40, P211, DOI [10.1108/00330330610681286, 10.1108/eb046814]
   Poshyvanyk D, 2007, IEEE T SOFTWARE ENG, V33, P420, DOI [10.1109/TSE.2007.1016, 10.1109/TSE.2007.1016.]
   Raistrick Chris., 2004, MODEL DRIVEN ARCHITE
   Rajlich V, 2002, PROG COMPREHEN, P271, DOI 10.1109/WPC.2002.1021348
   Riaz M, 2009, INT SYMP EMP SOFTWAR, P368, DOI 10.1109/esem.2009.5314233
   Sarkar S., 2012, US Patent, Patent No. [8,146,058, 8146058]
   Selic Bran, 1994, REAL TIME OBJECT ORI, V2
   SHAPIRO SS, 1965, BIOMETRIKA, V52, P591, DOI 10.1093/biomet/52.3-4.591
   SHEPPERD M, 1988, SOFTWARE ENG J, V3, P30, DOI 10.1049/sej.1988.0003
   Shibata K, 2007, 13TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P35, DOI 10.1109/PRDC.2007.46
   Shlaer Sally., 1996, The shlaer-mellor method
   Ukic N., 2016, BITBUCKET PUBLIC REP
   Ukic N., 2011, WORKSH INF COMM TECH
   van Koten C, 2006, INFORM SOFTWARE TECH, V48, P59, DOI 10.1016/j.infsof.2005.03.002
   Welker KD, 1997, J SOFTW MAINT-RES PR, V9, P127, DOI 10.1002/(SICI)1096-908X(199705)9:3<127::AID-SMR149>3.0.CO;2-S
   WILDE N, 1995, J SOFTW MAINT-RES PR, V7, P49, DOI 10.1002/smr.4360070105
   Woodfield S. N., 1981, 5th International Conference on Software Engineering, P215
   XTUML, 2016, EX TRANSL UML
   Zhou Yuming, 2008, Wuhan University Journal of Natural Sciences, V13, P14, DOI 10.1007/s11859-008-0104-6
NR 62
TC 0
Z9 1
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 273
EP 319
DI 10.1007/s11219-016-9351-5
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200004
DA 2024-07-18
ER

PT J
AU Guerrouj, L
   Kermansaravi, Z
   Arnaoudova, V
   Fung, BCM
   Khomh, F
   Antoniol, G
   Guéhenéuc, YG
AF Guerrouj, Latifa
   Kermansaravi, Zeinab
   Arnaoudova, Venera
   Fung, Benjamin C. M.
   Khomh, Foutse
   Antoniol, Giuliano
   Gueheneuc, Yann-Gael
TI Investigating the relation between lexical smells and change- and
   fault-proneness: an empirical study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Lexical smells; Design smells; Change-proneness; Fault-proneness;
   Empirical study
ID IDENTIFIER NAMES; CODE SMELLS; BAD SMELLS
AB Past and recent studies have shown that design smells which are poor solutions to recurrent design problems make object-oriented systems difficult to maintain, and that they negatively impact the class change- and fault-proneness. More recently, lexical smells have been introduced to capture recurring poor practices in the naming, documentation, and choice of identifiers during the implementation of an entity. Although recent studies show that developers perceive lexical smells as impairing program understanding, no study has actually evaluated the relationship between lexical smells and software quality as well as their interaction with design smells. In this paper, we detect 29 smells consisting of 13 design smells and 16 lexical smells in 30 releases of three projects: ANT, ArgoUML, and Hibernate. We analyze to what extent classes containing lexical smells have higher (or lower) odds to change or to be subject to fault fixing than other classes containing design smells. Our results show and bring empirical evidence on the fact that lexical smells can make, in some cases, classes with design smells more fault-prone. In addition, we empirically demonstrate that classes containing design smells only are more change- and fault-prone than classes with lexical smells only.
C1 [Guerrouj, Latifa] Ecole Technol Super, Montreal, PQ, Canada.
   [Kermansaravi, Zeinab; Khomh, Foutse; Antoniol, Giuliano; Gueheneuc, Yann-Gael] Ecole Polytech, Montreal, PQ, Canada.
   [Arnaoudova, Venera] Washington State Univ, Pullman, WA 99164 USA.
   [Fung, Benjamin C. M.] McGill Univ, Montreal, PQ, Canada.
C3 University of Quebec; Ecole de Technologie Superieure - Canada;
   Universite de Montreal; Polytechnique Montreal; Washington State
   University; McGill University
RP Guerrouj, L (corresponding author), Ecole Technol Super, Montreal, PQ, Canada.
EM Latifa.Guerrouj@etsmtl.ca
RI Arnaoudova, Venera/X-6403-2019; Guéhéneuc, Yann-Gaël/K-9371-2019
CR Abbes M, 2011, EUR CON SFTWR MTNCE, P181, DOI 10.1109/CSMR.2011.24
   Abebe S. L., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P235, DOI 10.1109/WCRE.2012.33
   Abebe SL, 2013, EUR CON SFTWR MTNCE, P263, DOI 10.1109/CSMR.2013.35
   Abebe SL, 2011, IEEE INT WORK C SO, P125, DOI 10.1109/SCAM.2011.18
   [Anonymous], 2014, 11 WORKING C MINING, DOI [DOI 10.1145/2597073.2597076, DOI 10.1145/2597073]
   [Anonymous], 2000, HDB PARAMETRIC NONPA
   Arnaoudova V, 2016, EMPIR SOFTW ENG, V21, P104, DOI 10.1007/s10664-014-9350-8
   Arnaoudova V, 2013, EUR CON SFTWR MTNCE, P187, DOI 10.1109/CSMR.2013.28
   Bavota G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P104, DOI 10.1109/SCAM.2012.20
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Cardoso B., 2015, P ANN C BRAZ S INF S, V1, P347
   De Lucia A, 2011, IEEE T SOFTWARE ENG, V37, P205, DOI 10.1109/TSE.2010.89
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Fontana FA, 2016, EMPIR SOFTW ENG, V21, P1143, DOI 10.1007/s10664-015-9378-4
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Hall T, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2629648
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Lawrie D, 2007, INNOV SYST SOFTW ENG, V3, P303, DOI 10.1007/s11334-007-0031-2
   Li W, 2007, J SYST SOFTWARE, V80, P1120, DOI 10.1016/j.jss.2006.10.018
   McIntosh S, 2016, EMPIR SOFTW ENG, V21, P2146, DOI 10.1007/s10664-015-9381-9
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Olbrich S, 2009, INT SYMP EMP SOFTWAR, P391
   Palomba F, 2015, IEEE T SOFTWARE ENG, V41, P462, DOI 10.1109/TSE.2014.2372760
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Palomba F, 2013, IEEE INT CONF AUTOM, P268, DOI 10.1109/ASE.2013.6693086
   Peters R, 2012, EUR CON SFTWR MTNCE, P411, DOI 10.1109/CSMR.2012.79
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   SOLOWAY E, 1983, COMMUN ACM, V26, P853, DOI 10.1145/182.358436
   Suryanarayana G., 2014, Refactoring for Software Design Smells: Managing Technical Debt
   Taba SES, 2013, PROC IEEE INT CONF S, P270, DOI 10.1109/ICSM.2013.38
   Takang AA, 1996, J PROGRAM LANG, V4, P143
   Tan L, 2007, P 21 ACM S OP SYST P
   Tan L, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P11, DOI 10.1145/1985793.1985796
   Tan S. H., 2012, P 5 INT C SOFTW TEST
   Toutanova K, 2000, PROCEEDINGS OF THE 2000 JOINT SIGDAT CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND VERY LARGE CORPORA, P63, DOI 10.3115/1117794.1117802
   VONMAYRHAUSER A, 1995, COMPUTER, V28, P44, DOI 10.1109/2.402076
   Webster BruceF., 1995, PITFALLS OBJECT ORIE
   Yamashita A, 2013, WORK CONF REVERSE EN, P242, DOI 10.1109/WCRE.2013.6671299
NR 41
TC 9
Z9 9
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 641
EP 670
DI 10.1007/s11219-016-9318-6
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300002
DA 2024-07-18
ER

PT J
AU Alchimowicz, B
   Nawrocki, JR
AF Alchimowicz, Bartosz
   Nawrocki, Jerzy R.
TI The COCA quality model for user documentation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE User documentation; Quality model; Systematic evaluation; Documentation
   evaluation test
AB According to Pedraz-Delhaes, users evaluate both the product and the vendor on the basis of provided documentation. Thus, a question arises as to what quality characteristics should be taken into account when making a decision about accepting a given user manual. There are some proposals (e.g., ISO Std. 26513 and 26514), but they contain too many quality characteristics and lack orthogonality. The goal of this paper is to propose a simple quality model for user documentation, along with acceptance methods based on it. The model is to be orthogonal and complete. As a result, the COCA quality model is presented, which comprises four orthogonal quality characteristics: Completeness, Operability, Correctness, and Appearance. To check completeness, the proposed quality model has been compared with many other quality models that are directly or indirectly concerned with user documentation. Moreover, two acceptance methods are described in the paper: pure review based on ISO Std. 1028:2008, and documentation evaluation test (a type of browser evaluation test), which is aimed at assessing the operability of user documentation. Initial quality profiles have been empirically collected for both methods-they can be used when interpreting evaluation results obtained for a given user manual.
C1 [Alchimowicz, Bartosz; Nawrocki, Jerzy R.] Poznan Univ Tech, Inst Comp Sci, Ul Piotrowo 2, PL-60965 Poznan, Poland.
C3 Poznan University of Technology
RP Alchimowicz, B (corresponding author), Poznan Univ Tech, Inst Comp Sci, Ul Piotrowo 2, PL-60965 Poznan, Poland.
EM bartosz.alchimowicz@cs.put.poznan.pl; jerzy.nawrocki@put.poznan.pl
RI Alchimowicz, Bartosz/M-3842-2014; Nawrocki, Jerzy R/I-5690-2012
FU Polish National Science Centre [DEC-2011/03/N/ST6/03016]
FX We would like to thank Magdalena Deckert, Sylwia Kopczynska, Jakub
   Jurkiewicz, Michal Mackowiak, Miroslaw Ochodek, Konrad Siek and Wojciech
   Wojciechowicz for their help in performing the experiments. We are also
   thankful to the anonymous reviewers for helpful comments that allowed us
   to improve the paper. This work has been supported by the Polish
   National Science Centre based on the decisions DEC-2011/03/N/ST6/03016.
CR Allwood CM, 1997, BEHAV INFORM TECHNOL, V16, P43, DOI 10.1080/014492997120002
   [Anonymous], 2012, TECHNICAL COMMUNICAT
   [Anonymous], MULTIPLE CRITERIA DE
   [Anonymous], 2009, MAN SUCC PROJ PRINCE
   [Anonymous], 2008, 10282008 IEEE
   [Anonymous], 2005, 250002005 ISOIEC
   Cockburn A, 2001, Writing effective use cases, the crystal collection for software professionals
   Fisher J., 2001, AUSTRALASIAN J INFOR, V9
   Gunning R, 1952, TECHNIQUE CLEAR WRIT
   Hazlett R., 2003, CHI'03 extended abstracts on Human factors in computing systems, P734
   Huang S., 2003, P 21 ANN INT C DOCUM, P93
   IEEE Standards Association, 2010, 247652010 ISOIECIEEE
   ISO/IEC, 2011, ISO/IEC 25010:2011 Systems and software engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality models
   *ISO IEC, 2008, 265142008 ISOIEC
   ISO/IEC, 2001, Technical Report, V1st
   ISO/IEC, 2009, 265132009 ISOIEC
   ISO/IEC/IEEE, 2012, 265112012 ISOIECIEEE
   ISO/IEC/IEEE, 2012, 265152012 ISOIECIEEE
   ISO/IEC/IEEE, 2011, 265122011 ISOIECIEEE
   Jung HW, 2004, IEEE SOFTWARE, V21, P88, DOI 10.1109/MS.2004.1331309
   Kaiya H, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P596
   Khamis N, 2010, LECT NOTES COMPUT SC, V6177, P68, DOI 10.1007/978-3-642-13881-2_7
   McConnell S., 2006, Software Estimation: Demystifying the Black Art
   MCLAUGHLIN GH, 1969, J READING, V12, P639
   Novick D., 2006, P SPECIAL INTEREST G, P84, DOI DOI 10.1145/1166324.1166346
   Ortega M, 2003, SOFTWARE QUAL J, V11, P219, DOI 10.1023/A:1025166710988
   Pedraz-Delhaes A, 2010, CAN J ADM SCI, V27, P363, DOI 10.1002/CJAS.162
   Spencer C.J., 1995, TECH COMMUN-STC, V42, P52
   Steidl D, 2013, CONF PROC INT SYMP C, P83, DOI 10.1109/ICPC.2013.6613836
   Van Solingen Rini, 1999, The Goal/ Question/ Metric Method: a practical guide for quality improvement of software development
   Wellner P., 2005, CHI 92
   Zanakis SH, 1998, EUR J OPER RES, V107, P507, DOI 10.1016/S0377-2217(97)00147-1
NR 32
TC 0
Z9 0
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 205
EP 230
DI 10.1007/s11219-014-9252-4
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Rocha, ACO
   Ramalho, F
   Machado, PDL
AF Rocha, Anne Caroline O.
   Ramalho, Franklin
   Machado, Patricia D. L.
TI Automating test-based inspection of design models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software inspection; MDA; UML; Software testing; Action semantics
ID UML; PROGRAM
AB Software design is usually a highly creative and error-prone activity even if supported by patterns within a given domain. Therefore, inspection techniques are often needed to validate design models so that defects are not propagated to code and tests. However, traditional inspection techniques often focus on structural aspects of models, leaving behavior validation for testing that is performed later. Guided inspections combine both traditional inspection activities and testing to bring in the testing perspective earlier in the development process in order to more effectively uncover omission and nonconformity. This paper presents an automated solution, based on model-driven architecture concepts and technology, to the guided inspection technique focusing on Unified Modeling Language models. The automated technique, as observed from 3 case studies, can be reasonably effective to uncover defects of different types.
C1 [Rocha, Anne Caroline O.] Univ Fed Paraiba, Informat Technol Ctr NTI, Joao Pessoa, Paraiba, Brazil.
   [Ramalho, Franklin; Machado, Patricia D. L.] DSC UFCG, Software Practices Lab SPLab, Campina Grande, PB, Brazil.
C3 Universidade Federal da Paraiba
RP Machado, PDL (corresponding author), DSC UFCG, Software Practices Lab SPLab, Campina Grande, PB, Brazil.
EM caroline@nti.ufpb.br; franklin@computacao.ufcg.edu.br;
   patricia@computacao.ufcg.edu.br
RI Machado, Patricia/B-5346-2009
OI Machado, Patricia/0000-0002-0661-0067
FU CNPq [484643/2011-8, 560014/2010-4]; National Institute of Science and
   Technology for Software Engineering - CNPq/Brasil [573964/2008-4]; CNPq
FX This work was supported by CNPq Grants 484643/2011-8 and 560014/2010-4.
   Also, this work was partially supported by the National Institute of
   Science and Technology for Software Engineering,<SUP>4</SUP> funded by
   CNPq/Brasil, Grant 573964/2008-4. First author was also supported by
   CNPq.
CR Alves ELG, 2014, SOFTW SYST MODEL, V13, P1141, DOI 10.1007/s10270-012-0282-8
   [Anonymous], ATL TRANSF LANG
   [Anonymous], AD060903 OMG
   [Anonymous], P 22 IFIP INT C TEST
   [Anonymous], SOFTWARE INSPECTION
   [Anonymous], 2 EXP SOFTW ENG LAT
   [Anonymous], HIGH QUALITY LOW COS
   [Anonymous], THESIS OSAKA U JAPAN
   [Anonymous], MOFSCR US GUID
   [Anonymous], GETTING REQUIREMENTS
   [Anonymous], 14 BRAZ S SOFTW ENG
   [Anonymous], PTC070707 OMG
   [Anonymous], 3 S BRAS COMP ARQ RE
   [Anonymous], 070205 OMG
   [Anonymous], OBJECT TECHNOLOGY SE
   Dinh-Trong T, 2005, IEEE INT C ENG COMP, P519
   Egyed A, 2007, PROC INT CONF SOFTW, P292
   FAGAN ME, 1986, IEEE T SOFTWARE ENG, V12, P744, DOI 10.1109/TSE.1986.6312976
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   Laitenberger O, 2000, J SYST SOFTWARE, V53, P183, DOI 10.1016/S0164-1212(00)00052-2
   Laitenberger O., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P494, DOI 10.1109/ICSE.1999.841039
   Laitenberger O, 2000, J SYST SOFTWARE, V50, P5, DOI 10.1016/S0164-1212(99)00073-4
   Laitenberger O, 1997, INFORM SOFTWARE TECH, V39, P781, DOI 10.1016/S0950-5849(97)00030-X
   Lange C. F. J., 2006, 28th International Conference on Software Engineering Proceedings, P401, DOI 10.1145/1134285.1134341
   Lanubile F., 2003, Software Process Improvement and Practice, V8, P217, DOI 10.1002/spip.184
   Lyytinen K., 2009, DESIGN REQUIREMENTS
   Maldonado JC, 2006, EMPIR SOFTW ENG, V11, P119, DOI 10.1007/s10664-006-5967-6
   Sabaliauskaite G, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P148, DOI 10.1109/ISESE.2002.1166934
   Sauer C, 2000, IEEE T SOFTWARE ENG, V26, P1, DOI 10.1109/32.825763
   Shull F, 2000, COMPUTER, V33, P73, DOI 10.1109/2.869376
   Silva LFS, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P127
   Sommerville I., 2010, SOFTWARE ENG
   Thelin T, 2001, INFORM SOFTWARE TECH, V43, P925, DOI 10.1016/S0950-5849(01)00201-4
   Wai Ming Ho, 1999, 14th IEEE International Conference on Automated Software Engineering, P275, DOI 10.1109/ASE.1999.802320
   Winkler D., 2008, IMPROVEMENT DEFECT D
NR 37
TC 0
Z9 0
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2015
VL 23
IS 1
BP 3
EP 28
DI 10.1007/s11219-013-9219-x
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC4TB
UT WOS:000350345400002
DA 2024-07-18
ER

PT J
AU Acher, M
   Collet, P
   Gaignard, A
   Lahire, P
   Montagnat, J
   France, RB
AF Acher, Mathieu
   Collet, Philippe
   Gaignard, Alban
   Lahire, Philippe
   Montagnat, Johan
   France, Robert B.
TI Composing multiple variability artifacts to assemble coherent workflows
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software product lines; Feature models; Scientific workflows;
   Composition
ID SOFTWARE PRODUCT LINE; FEATURE MODELS; REUSE; FEATURES
AB The development of scientific workflows is evolving toward the systematic use of service-oriented architectures, enabling the composition of dedicated and highly parameterized software services into processing pipelines. Building consistent workflows then becomes a cumbersome and error-prone activity as users cannot manage such large-scale variability. This paper presents a rigorous and tooled approach in which techniques from Software Product Line (SPL) engineering are reused and extended to manage variability in service and workflow descriptions. Composition can be facilitated while ensuring consistency. Services are organized in a rich catalog which is organized as a SPL and structured according to the common and variable concerns captured for all services. By relying on sound merging techniques on the feature models that make up the catalog, reasoning about the compatibility between connected services is made possible. Moreover, an entire workflow is then seen as a multiple SPL (i.e., a composition of several SPLs). When services are configured within, the propagation of variability choices is then automated with appropriate techniques and the user is assisted in obtaining a consistent workflow. The approach proposed is completely supported by a combination of dedicated tools and languages. Illustrations and experimental validations are provided using medical imaging pipelines, which are representative of current scientific workflows in many domains.
C1 [Acher, Mathieu; Collet, Philippe; Gaignard, Alban; Lahire, Philippe; Montagnat, Johan] I3S Lab CNRS UNSA, F-06903 Sophia Antipolis, France.
   [France, Robert B.] Colorado State Univ, Dept Comp Sci, Ft Collins, CO 80523 USA.
C3 Centre National de la Recherche Scientifique (CNRS); Colorado State
   University
RP Acher, M (corresponding author), I3S Lab CNRS UNSA, Bat Euclide B,2000 Route Lucioles,BP 121, F-06903 Sophia Antipolis, France.
EM acher@i3s.unice.fr; collet@i3s.unice.fr; gaignard@i3s.unice.fr;
   lahire@i3s.unice.fr; johan@i3s.unice.fr; france@cs.colostate.edu
RI Gaignard, Alban/IZP-7997-2023; Gaignard, Alban/D-1333-2018
OI Gaignard, Alban/0000-0002-3597-8557; Gaignard, Alban/0000-0002-3597-8557
CR Acher Mathieu, 2009, Software Language Engineering. Second International Conference, SLE 2009. Revised Selected Papers, P62
   Acher M., 2011, 26 IEEE ACM INT C AU
   Acher M., 2011, 26 INT S APPL COMP S, P1333
   ACHER M, 2008, SERV OR ARCH SOFTW P
   Acher M, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P77, DOI 10.1109/ICECCS.2011.15
   Acher M, 2010, LECT NOTES COMPUT SC, V6144, P17, DOI 10.1007/978-3-642-14046-4_2
   Acher M, 2010, LECT NOTES COMPUT SC, V6138, P3, DOI 10.1007/978-3-642-13595-8_3
   Alves V., 2006, Proceedings of the 5th international conference on Generative Programming and Component Engineering, P201, DOI [10.1145/1173706, DOI 10.1145/1173706]
   [Anonymous], 2009, P 2009 17 IEEE INT R
   [Anonymous], SPLC INT C SOFTW PRO
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S, 2008, LECT NOTES COMPUT SC, V5140, P36
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Baniassad E, 2006, IEEE SOFTWARE, V23, P61, DOI 10.1109/MS.2006.8
   Baniassad E, 2004, PROC INT CONF SOFTW, P158, DOI 10.1109/ICSE.2004.1317438
   Batory D., 2003, Software Engineering Notes, V28, P48, DOI 10.1145/949952.940079
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Beuche D, 2004, SCI COMPUT PROGRAM, V53, P333, DOI 10.1016/j.scico.2003.04.005
   BOFFOLI N, 2008, SOAPL, P143
   Bosch Jan, 2009, 2009 13 INT SOFTW PR, V9, P111, DOI DOI 10.1145/1753235.1753251
   Boucher Q., 2010, Proc. of VaMoS10, P159
   Bühne S, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P41, DOI 10.1109/RE.2005.45
   Charfi A, 2007, WORLD WIDE WEB, V10, P309, DOI 10.1007/s11280-006-0016-3
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, P143, DOI 10.1002/spip.225
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Czarnecki K., 2006, GPCE, P211
   Czarnecki K, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P23, DOI 10.1109/SPLINE.2007.24
   Czarnecki K, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P41, DOI 10.1109/SPLINE.2006.1691576
   Dongsu Kang, 2010, 2010 IEEE/ACIS 9th International Conference on Computer and Information Science (ICIS 2010), P755, DOI 10.1109/ICIS.2010.33
   Dustdar S., 2005, International Journal of Web and Grid Services, V1, P1, DOI 10.1504/IJWGS.2005.007545
   Fantinato M, 2008, INT J COOP INF SYST, V17, P373, DOI 10.1142/S0218843008001889
   Foster I., 2002, D91 SECURESCM
   France R., 2003, 3 WORKSH AOM UML AOS
   Gil Y, 2007, COMPUTER, V40, P24, DOI 10.1109/MC.2007.421
   Glatard T, 2008, INT J HIGH PERFORM C, V22, P347, DOI 10.1177/1094342008096067
   Gottschalk F, 2008, INT J COOP INF SYST, V17, P177, DOI 10.1142/S0218843008001798
   Hartmann H, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P12, DOI 10.1109/SPLC.2008.15
   Hartmann Herman., 2009, Proceedings of the 13th International Software Product Line Conference, P191
   Heidenreich F, 2010, LECT NOTES COMPUT SC, V6210, P69
   Hubaux A, 2010, LECT NOTES COMPUT SC, V6182, P106, DOI 10.1007/978-3-642-14192-8_12
   Janota M., 2010, THESIS U COLL DUBLIN
   Jayaraman P, 2007, LECT NOTES COMPUT SC, V4735, P151
   Johansen M.F., 2010, SPLC 10, P163
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kang Kyo C, 1990, Technical Report
   KASTNER C, 2009, 31 INT C SOFTW ENG I, P611
   Lee J, 2010, IEEE SOFTWARE, V27, P35, DOI 10.1109/MS.2010.30
   Lorenzi M, 2010, MICC WORKSH SPAT TEM
   Maheshwari K., 2009, HEALTHGRID 09 BERL
   McPhillips T, 2009, FUTURE GENER COMP SY, V25, P541, DOI 10.1016/j.future.2008.06.013
   Mendonca M., 2009, THESIS U WATERLOO WA
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Mendonca M, 2010, SCI COMPUT PROGRAM, V75, P311, DOI 10.1016/j.scico.2009.12.004
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Montagnat J., 2009, WORKSH WORKFL SUPP L, P1
   Moreira A, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P285, DOI 10.1109/RE.2005.46
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   NUSEIBEH B, 1993, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.1993.346045
   Ogasawara E, 2009, LECT NOTES COMPUT SC, V5566, P264, DOI 10.1007/978-3-642-02279-1_20
   Ossher H., 1996, Theory and Practice of Object Systems, V2, P179, DOI 10.1002/(SICI)1096-9942(1996)2:3<179::AID-TAPO4>3.0.CO;2-R
   Pernod E., 2008, MULTIPLE SCLEROSIS B, P55
   Perrouin G, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P339, DOI 10.1109/SPLC.2008.38
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Reiser MO, 2007, REQUIR ENG, V12, P57, DOI 10.1007/s00766-007-0046-0
   Schnieders Puhlmann, 2007, TECHNOLOGIES BUSINES, P63, DOI DOI 10.1007/1-4020-5634-6_6
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Segura S, 2008, LECT NOTES COMPUT SC, V5235, P489, DOI 10.1007/978-3-540-88643-3_15
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Temal L, 2008, J BIOMED INFORM, V41, P766, DOI 10.1016/j.jbi.2008.03.002
   Thüm T, 2009, PROC INT CONF SOFTW, P254, DOI 10.1109/ICSE.2009.5070526
   van der Storm T, 2004, LECT NOTES COMPUT SC, V3107, P157
   van Ommering R, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P255, DOI 10.1109/ICSE.2002.1007973
   van Ommering R., 2002, LNCS, P31
   Voelter M, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P233, DOI 10.1109/SPLINE.2007.23
   Wada H, 2007, P IEEE I C SERV COMP, P187
   White J, 2010, J SYST SOFTWARE, V83, P1094, DOI 10.1016/j.jss.2010.02.017
   White J, 2009, IEEE SOFTWARE, V26, P47, DOI 10.1109/MS.2009.95
   ZIADI T, 2006, PRODUCT LINE ENG UML, P557
NR 80
TC 13
Z9 13
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2012
VL 20
IS 3-4
SI SI
BP 689
EP 734
DI 10.1007/s11219-011-9170-7
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 995IQ
UT WOS:000308001900008
DA 2024-07-18
ER

PT J
AU Guzmán, JG
   Ramos, JS
   Seco, AA
   Esteban, AS
AF Garcia Guzman, Javier
   Saldana Ramos, Javier
   Amescua Seco, Antonio
   Sanz Esteban, Ana
TI How to get mature global virtual teams: a framework to improve team
   process management in distributed software teams
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Geographically distributed software development; Management of IT
   function; Global distributed teams; Virtual team efficacy; Team
   processes maturity; Software team management
ID WORK
AB Managing global software development teams is not an easy task because of the additional problems and complexities that have to be taken into account. This paper defines VTManager, a methodology that provides a set of efficient practices for global virtual team management in software development projects. These practices integrate software development techniques in global environments with others such as explicit practices for global virtual team management, definition of skills and abilities needed to work in these teams, availability of collaborative work environments and shared knowledge management practices. The results obtained and the lessons learned from implementing VTManager in a pilot project to develop software tools for collaborative work in rural environments are also presented. This project was carried out by geographically distributed teams involving people from seven countries with a high level of virtualness.
C1 [Garcia Guzman, Javier; Saldana Ramos, Javier; Amescua Seco, Antonio; Sanz Esteban, Ana] Univ Carlos III Madrid, Dept Comp Sci, Madrid 28911, Spain.
C3 Universidad Carlos III de Madrid
RP Ramos, JS (corresponding author), Univ Carlos III Madrid, Dept Comp Sci, Avda Univ 30, Madrid 28911, Spain.
EM jgarciag@inf.uc3m.es; jsaldana@inf.uc3m.es; amescua@inf.uc3m.es;
   asanz@inf.uc3m.es
RI García-Guzmán, Javier/L-4666-2014; Ramos, Jonathan/KOC-8374-2024
OI GARCIA GUZMAN, JAVIER/0000-0001-6039-795X; Amescua,
   Antonio/0000-0003-4355-6896
FU European Commission [IST-2006-034921]; Directorate-General Information
   Society Technologies and Media (DG-INFSO); TRAGSA [UC3M/2008/00259/001,
   UC3M/2007/04245/001]
FX This contract is partially supported by the Integrated Research Project
   C@R-Collaboration at Rural (IST-2006-034921), funded by the European
   Commission, specifically the Directorate-General Information Society
   Technologies and Media (DG-INFSO). The research work for this paper has
   been also funded by TRAGSA under the projects UC3M/2008/00259/001 and
   UC3M/2007/04245/001.
CR [Anonymous], 2005, S HIGH PERF PROF TEA
   [Anonymous], 8301993 IEEE
   [Anonymous], 2004, PMBOK GUID PROJ MAN
   [Anonymous], 2004, Agile and Iterative Development
   Battin RD, 2001, IEEE SOFTWARE, V18, P70, DOI 10.1109/52.914750
   Braun A, 2007, Second IEEE International Conference on Global Software Engineering, Proceedings, P125
   *C R CONS, 2005, FP62005IST5034921
   Carmel E., 1999, GLOBAL SOFTWARE TEAM
   Casey Valentine, 2008, Software Process: Improvement and Practice, V13, P511, DOI 10.1002/spip.404
   COHEN SG, 2003, 18 ANN C SOC IND ORG
   COMI A, 2009, KNOW 09 SEMANTICS 09, P115
   Cramton CD, 2005, J BUS RES, V58, P758, DOI 10.1016/j.jbusres.2003.10.006
   DEKEL U, 2005, P 2005 WORKSH HUM SO
   Dowling KL, 2000, DECIS SUPPORT SYST, V29, P229, DOI 10.1016/S0167-9236(00)00073-7
   Ebert C, 2001, IEEE SOFTWARE, V18, P62, DOI 10.1109/52.914748
   EDWARDS HK, 2003, P 36 HAW INT C SYST
   EVA M, 1994, SSADM VERSION 4 USER
   Fuller MA, 2006, J MANAGE INFORM SYST, V23, P209, DOI 10.2753/MIS0742-1222230308
   Gaudes A., 2007, Journal of Eworking, V1, P83
   Herbsleb JD, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P188, DOI 10.1109/FOSE.2007.11
   Herbsleb JD, 2001, IEEE SOFTWARE, V18, P16, DOI 10.1109/52.914732
   Hertel G., 2005, Human Resources Management Review, V15, P69, DOI 10.1016/j.hrmr.2005.01.002
   Humphrey W.S., 2006, TSP: Coaching development teams
   Humphrey WattsS., 2000, Introduction to the team software process
   Hyrkkänen U, 2007, LECT NOTES COMPUT SC, V4566, P85
   *IPRC, 2007, PROC RES FRAM
   Jarvenpaa S. L., 1998, Journal of Management Information Systems, V14, P29
   Juristo N., 2013, BASICS SOFTWARE ENG
   Kankanhalli A, 2006, J MANAGE INFORM SYST, V23, P237, DOI 10.2753/MIS0742-1222230309
   Karolak D., 1999, Global Software Development: Managing Virtual Teams and Environments
   Kruchten P.., 2004, RATIONAL UNIFIED PRO
   Lee-Kelley Liz, 2008, International Journal of Project Management, V26, P51, DOI 10.1016/j.ijproman.2007.08.010
   *MAP, 2009, MET METRICA VERS 3
   Matloff N., 2005, IT Professional, V7, P39, DOI 10.1109/MITP.2005.96
   Petkovic D, 2006, PROC FRONT EDUC CONF, P117
   Powell A., 2004, Data Base for Advances in Information Systems, V35, P6, DOI 10.1145/968464.968467
   PRIKLADNICKI P, 2003, SOFTWARE PROCESS IMP, V8, P267, DOI DOI 10.1002/SPIP.188
   Ramasubbu N, 2005, IEEE SOFTWARE, V22, P80, DOI 10.1109/MS.2005.69
   Rosen B, 2007, ORGAN DYN, V36, P259, DOI 10.1016/j.orgdyn.2007.04.007
   SCHUMMER T, 2003, P 8 EUR C PATT LANG, P53
   Schwaber K., 2001, Agile software development with scrum
   SENGUPTA B, 2006, P 28 INT C SOFTW ENG, P73
   SMITH DR, 2004, P 37 ANN C AM AS SBO, P23
   Striukova L., 2008, International Journal Networking and Virtual Organizations, V5, P103, DOI DOI 10.1504/IJNVO.2008.016005
   Thomas DM, 2007, COMMUN ACM, V50, P85, DOI 10.1145/1297797.1297802
   Wallace S., 2007, The ePMbook
NR 46
TC 15
Z9 25
U1 0
U2 28
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2010
VL 18
IS 4
BP 409
EP 435
DI 10.1007/s11219-010-9096-5
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 642XH
UT WOS:000281254700001
DA 2024-07-18
ER

PT J
AU Heck, P
   Klabbers, M
   van Eekelen, M
AF Heck, Petra
   Klabbers, Martijn
   van Eekelen, Marko
TI A software product certification model
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software certification; Certification levels; Formal methods
AB Certification of software artifacts offers organizations more certainty and confidence about software. Certification of software helps software sales, acquisition, and can be used to certify legislative compliance or to achieve acceptable deliverables in outsourcing. In this article, we present a software product certification model. This model has evolved from a maturity model for product quality to a more general model with which the conformance of software product artifacts to certain properties can be assessed. Such a conformance assessment we call a 'software product certificate'. The practical application of the model is demonstrated in concrete software certificates for two software product areas that are on different ends of the software product spectrum (ranging from a requirements definition to an executable). For each certificate, a concrete case study has been performed. We evaluate the use of the model for these certificates. It will be shown that the model can be used satisfactorily for quite different kinds of certificates.
C1 [van Eekelen, Marko] Radboud Univ Nijmegen, LaQuSo, NL-6525 ED Nijmegen, Netherlands.
   [Heck, Petra] SQS, Geneva, Switzerland.
   [Klabbers, Martijn] Tech Univ Eindhoven, LaQuSo, NL-5600 MB Eindhoven, Netherlands.
   [van Eekelen, Marko] Open Univ, Heerlen, Netherlands.
C3 Radboud University Nijmegen; Eindhoven University of Technology; Open
   University Netherlands
RP van Eekelen, M (corresponding author), Radboud Univ Nijmegen, LaQuSo, NL-6525 ED Nijmegen, Netherlands.
EM petra.heck@sqs-group.ch; martijn@laquso.com; marko@cs.ru.nl
RI van Eekelen, Marko C.J.D./F-5757-2010
CR Alexander I. F., 2002, Writing Better Requirements
   ALEXANDER M, 2008, PROCESS ALGEBRA PARA, V2
   Alvaro A, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P298
   [Anonymous], 1997, Requirements engineering: a good practice guide
   [Anonymous], 2004, The Requirements Engineering Handbook
   [Anonymous], 2003, Software requirements
   BAMFORD R, 2004, ISO 9001 2000 SOFTWA
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   CLAYTON C, 1996, CROSSTALK, V9
   CMMI Product Team, 2001, CMUSEI2002TR001 CMMI
   *ESA, 1991, BOARD SOFTW STAND CO
   FDA, 2002, GEN PRINC SOFTW VAL
   Firesmith D., 2003, J OBJECT TECHNOL, V2, P77
   Firesmith D, 2005, J OBJECT TECHNOL, V4, P31, DOI 10.5381/jot.2005.4.9.c4
   FORSSTROM J, 1997, WHY CERTIFICATION ME, V47, P143
   Heck P., 2008, 0803 CS TU EINDH
   HECK P, 2008, P 3 INT C SOFTW ENG, P367
   Heck P.M., 2006, P INT WORKSH SOFTW C
   HECK PM, 2006, 0620 CS TU EINDH
   Hull E., 2002, Requirements Engineering
   Jakobsen A.B., 1999, P 10 EUR C SOFTW COS
   Kruchten P.., 2004, RATIONAL UNIFIED PRO
   LEE SW, 2007, SESS 07 ICSE WORKSH, P8
   Mazza C, 1996, SOFTWARE ENG GUIDES
   *MCRL2 DEV TEAM, 2009, MCRL2 TOOLS WEBP
   Nastro J., 1997, CROSSTALK, V10
   Niinimäki J, 1997, INT J MED INFORM, V47, P175, DOI 10.1016/S1386-5056(97)00101-9
   *STAND GROUP INT, 2000, INC CHAOS REP
   *STAND GROUP INT, 1998, INC CHAOS REP
   *STAND GROUP INT, 2002, INC CHAOS REP
   *STAND GROUP INT, 2006, INC CHAOS REP
   *STAND GROUP INT, 1996, INC CHAOS REP
   *STAND GROUP INT, 2004, INC CHAOS REP
   VANEEKELEN M, 2007, LECT NOTES COMPUTER
   VANEEKELEN M, 2006, P 12 NED TESTD NOV 1, P23
   WEGNER E, 1999, D52754 GMD NAT RES C, V20, P349
   Welzel D, 1997, J SYST SOFTWARE, V38, P71, DOI 10.1016/S0164-1212(97)00069-1
   Wiegers K.E., 2006, MORE SOFTWARE REQUIR
NR 38
TC 21
Z9 23
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2010
VL 18
IS 1
BP 37
EP 55
DI 10.1007/s11219-009-9080-0
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 546JH
UT WOS:000273806600003
OA hybrid
DA 2024-07-18
ER

PT J
AU Reddy, VK
   Dubey, A
   Lakshmanan, S
   Sukumaran, S
   Sisodia, R
AF Reddy, Vinay Kumar
   Dubey, Alpana
   Lakshmanan, Sala
   Sukumaran, Srihari
   Sisodia, Rajendra
TI Evaluating legacy assets in the context of migration to SOA
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Measurement; Migration; SOA
AB A key activity in the introduction of service oriented architecture (SOA) for an organization is to evaluate the suitability of existing assets for service orientation. We identify the core principles of SOA as the guide lines in evaluating the suitability of the existing assets. The existing metrics and guidelines that could be helpful in evaluating these principles are surveyed. This would benefit an organization in understanding the effort needed for migration and also to build proper services from the existing assets.
C1 [Reddy, Vinay Kumar; Dubey, Alpana; Lakshmanan, Sala; Sukumaran, Srihari; Sisodia, Rajendra] Philips Res Asia, Bangalore, Karnataka, India.
C3 Philips; Philips Research
RP Reddy, VK (corresponding author), Philips Res Asia, Bangalore, Karnataka, India.
EM vinay.reddy@philips.com; alpana.dubey@philips.com;
   sala.lakshmanan@philips.com; srihari.sukumaran@philips.com;
   rajendra.sisodia@philips.com
RI Dubey, Alpana/AAR-6771-2021
CR Alonso G., 2004, DAT SYS APP, DOI 10.1007/978-3-662-10876-5_5
   Bieman J. M., 1995, SIGSOFT Software Engineering Notes, P259, DOI 10.1145/223427.211856
   Boxall MAS, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P40, DOI 10.1109/ASWEC.2004.1290456
   BUCHHIRANO A, 2006, INT WORKSH WEB SERV
   CANFORA G, 2006, MIGRATING INTERACTIV, P24
   CHHABRA JK, 2006, ITNG, P155
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cho ES, 2001, APSEC 2001: EIGHTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P419
   Erl T, 2005, SERVICE ORIENTED ARC
   Henderson-Sellers B., 1996, Object-Oriented Metrics, measures of complexity
   KAMINSKY A, 2002, OOPSLA 02, P72
   KATKI F, 1991, IEEE STANDARD COMPUT
   MEIER JD, 2004, IMPROVING  NET APPL
   OTT LM, 1993, IEEE CS INT METR S, P71
   Patel S., 1992, International Conference on Software Engineering, P38, DOI 10.1109/ICSE.1992.753488
   Poulin J.S., 1993, ADV SOFTWARE REUSE, P152
   SCHMELZER R, 2007, SHOULD SERVICES BE S
   SCHMELZER R, 2007, WHAT BELONGS SERVICE
   SIMON F, 1999, DISTANCE BASED COHES
   Stevens WP, 1999, IBM SYST J, V38, P231, DOI 10.1147/sj.382.0231
   *SUN MICR, 1994, NFS NETW FIL SYST VE
   VANDERHOEK A, 2003, IEEE METRICS, P298
   Washizaki H, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P211, DOI 10.1109/METRIC.2003.1232469
   XIA F, 1996, MODULE COUPLING DESI, P44
NR 24
TC 6
Z9 7
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2009
VL 17
IS 1
BP 51
EP 63
DI 10.1007/s11219-008-9055-6
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 398AD
UT WOS:000262702700005
DA 2024-07-18
ER

PT J
AU Funkhouser, O
   Etzkorn, LH
   Hughes, WE
AF Funkhouser, Owen
   Etzkorn, Letha Hughes
   Hughes, William E., Jr.
TI A lightweight approach to software validation by comparing UML use cases
   with internal program documentation selected via call graphs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software engineering; UML use cases; software validation; program
   understanding
AB This research involves a methodology and associated proof of concept tool to partially automate software validation by comparing UML use cases with particular execution scenarios in source code. These execution scenarios are represented as the internal documentation (identifier names and comments) associated with sequences of execution in static call graphs. This methodology has the potential to reduce validation time and associated costs in many organizations, by enabling quick and easy validation of software relative to the use cases that describe the requirements. The proof of concept tool as it currently stands is intended as an aid to an IV&V software engineer, to assist in directing the software validation process. The approach is lightweight and easily implemented.
C1 [Etzkorn, Letha Hughes] Univ Alabama, Dept Comp Sci, Huntsville, AL 35899 USA.
   [Funkhouser, Owen] Dynetics Inc, Comp Applicat Dept, Huntsville, AL 35806 USA.
   [Hughes, William E., Jr.] USASMDC, Tech Interoperabil & Matrix Ctr, Huntsville, AL USA.
C3 University of Alabama System; University of Alabama Huntsville; United
   States Department of Defense; United States Army
RP Etzkorn, LH (corresponding author), Univ Alabama, Dept Comp Sci, Huntsville, AL 35899 USA.
EM Owen.Funkhouser@dynetics.com; letzkorn@cs.uah.edu;
   bill.hughes@smdc.army.mil
CR AHLOWALLA N, 2002, P INT C SOFTW TEST A
   ALEXANDER I, 2004, STORIES USE CASES
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Bairagi D, 1997, PROC INT CONF PARAL, P412, DOI 10.1109/ICPP.1997.622674
   BIGGERSTAFF TJ, 1994, COMMUN ACM, V37, P72, DOI 10.1145/175290.175300
   Chen KR, 2000, PROG COMPREHEN, P241, DOI 10.1109/WPC.2000.852498
   Egyed A, 2003, IEEE T SOFTWARE ENG, V29, P116, DOI 10.1109/TSE.2003.1178051
   ETZKORN L, 1997, THESIS U ALABAMA HUN
   ETZKORN L, 1999, NAT LANG ENG, V5, P219
   Etzkorn LH, 2001, J PRAGMATICS, V33, P1731, DOI 10.1016/S0378-2166(00)00068-0
   Etzkorn LH, 1997, COMPUTER, V30, P66, DOI 10.1109/2.625311
   Hayes JH, 2005, INT J SOFTW ENG KNOW, V15, P751, DOI 10.1142/S021819400500252X
   HEUMANN J, 2005, GENERATING TEST CASE
   Lawrie D, 2006, INT C PROGRAM COMPRE, P3, DOI 10.1109/ICPC.2006.51
   LIEBERHERR KJ, 1989, IEEE SOFTWARE, V6, P38, DOI 10.1109/52.35588
   Maletic JI, 2001, PROC INT CONF SOFTW, P103, DOI 10.1109/ICSE.2001.919085
   Marcus A, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P107, DOI 10.1109/ASE.2001.989796
   Marcus A, 2005, INT J SOFTW ENG KNOW, V15, P811, DOI 10.1142/S0218194005002543
   Marcus A, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P214, DOI 10.1109/WCRE.2004.10
   Murphy G. C., 1998, ACM Transactions on Software Engineering and Methodology, V7, P158, DOI 10.1145/279310.279314
   Poshyvanyk D, 2006, INT C PROGRAM COMPRE, P137, DOI 10.1109/ICPC.2006.17
   Rajlich V, 2002, PROG COMPREHEN, P271, DOI 10.1109/WPC.2002.1021348
   Remillard A, 1996, COMP MED SY, P36, DOI 10.1109/CBMS.1996.507122
   RICH C, 1990, IEEE SOFTWARE, V7, P82, DOI 10.1109/52.43053
   Salah M, 2005, PROC IEEE INT CONF S, P639
   SALAH M, 2005, P 21 IEEE INT C SOFT, P144
   SIMONS AJH, 1999, P TECH OBJECT ORIENT, P184
   WILDE N, 1995, J SOFTW MAINT-RES PR, V7, P49, DOI 10.1002/smr.4360070105
   [No title captured]
NR 29
TC 3
Z9 4
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2008
VL 16
IS 1
BP 131
EP 156
DI 10.1007/s11219-007-9034-3
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248QQ
UT WOS:000252169800007
DA 2024-07-18
ER

PT J
AU Trudel, S
   Lavoie, JM
   Paré, MC
   Suryn, W
AF Trudel, S
   Lavoie, JM
   Paré, MC
   Suryn, W
TI PEM:: The small company-dedicated software process quality evaluation
   method combining CMMI<SUP>SM</SUP> and ISO/IEC 14598
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
AB Many small software organizations have recognized the need to improve their software product. Evaluating the software product alone seems insufficient since it is known that its quality is largely dependant on the process that is used to create it. Thus, small organizations are asking for evaluation of their software processes and products. The ISO/IEC 14598-5 standard is already used as a methodology basis for evaluating software products. This article explores how it can be combined with the CMMI to produce a methodology that can be tailored for process evaluation in order to improve their software processes.
C1 CRIM, Software Test Ctr, Montreal, PQ H3A 1B9, Canada.
   Consultat Jean Marc Lavoie Inc, Brossard, PQ J4W 2C7, Canada.
   Motorola Canada Software Ctr, Montreal, PQ H3C 3S4, Canada.
   Ecole Technol Super, Dept Genie Logiciel & TI, Montreal, PQ H3C 1K3, Canada.
C3 Universite de Montreal; University of Quebec; Ecole de Technologie
   Superieure - Canada
RP Trudel, S (corresponding author), CRIM, Software Test Ctr, 550 Rue Sherbrooke Ouest,Bur 100, Montreal, PQ H3A 1B9, Canada.
EM strudel@crim.ca; jeanmarc.lavoie@videotron.ca;
   Marie-Claude.Pare@motorola.com; wsuryn@ele.etsmtl.ca
CR AVERILL E, 1993, SOFTWARE CAPABILITY
   Bloom B. S., 1956, TAXONOMY ED OBJECTIV
   *CARN MELL U SOFTW, 2001, STAND CMMI APPR METH
   *CMMI PROD TEAM, 2001, APPR REQ CMMISM VERS
   *CMMI TEAM, 2001, CAP MAT MOD INT SYST
   DONAWAY DK, 2001, CMM BASED APPRAISAL
   *ISO IEC, 2003, 155042 ISOIEC 2
   *ISO IEC, 1998, 145985 ISOIEC 5
   *ISO IEC, 2001, 91261 ISOIEC 1
   Paulk M., 1993, CAPABILITY MATURITY
NR 10
TC 9
Z9 12
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2006
VL 14
IS 1
BP 7
EP 23
DI 10.1007/s11219-006-5997-8
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 014NM
UT WOS:000235486900002
DA 2024-07-18
ER

PT J
AU Elbaum, S
   Rothermel, G
   Kanduri, S
   Malishevsky, AG
AF Elbaum, S
   Rothermel, G
   Kanduri, S
   Malishevsky, AG
TI Selecting a cost-effective test case prioritization technique
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE test case prioritization; regression testing; empirical studies
ID GENERATION; TREES
AB Regression testing is an expensive testing process used to validate modified software and detect whether new faults have been introduced into previously tested code. To reduce the cost of regression testing, software testers may prioritize their test cases so that those which are more important, by some measure, are run earlier in the regression testing process. One goal of prioritization is to increase a test suite's rate of fault detection. Previous empirical studies have shown that several prioritization techniques can significantly improve rate of fault detection, but these studies have also shown that the effectiveness of these techniques varies considerably across various attributes of the program, test suites, and modifications being considered. This variation makes it difficult for a practitioner to choose an appropriate prioritization technique for a given testing scenario. To address this problem, we analyze the fault detection rates that result from applying several different prioritization techniques to several programs and modified versions. The results of our analyses provide insights into which types of prioritization techniques are and are not appropriate under specific testing scenarios, and the conditions under which they are or are not appropriate. Our analysis approach can also be used by other researchers or practitioners to determine the prioritization techniques appropriate to other workloads.
C1 Univ Nebraska, Dept Comp Sci & Engn, Lincoln, NE 68588 USA.
   Oregon State Univ, Dept Comp Sci, Corvallis, OR 97331 USA.
C3 University of Nebraska System; University of Nebraska Lincoln; Oregon
   State University
RP Univ Nebraska, Dept Comp Sci & Engn, Lincoln, NE 68588 USA.
EM elbaum@cse.unl.edu; rothermel@cse.unl.edu; skanduri@cse.unl.edu;
   malishal@cs.orst.edu
OI Malishevsky, Alexey/0000-0002-8420-4339
CR AVRITZER A, 1995, IEEE T SOFTWARE ENG, V21, P705, DOI 10.1109/32.464549
   BALCER MJ, 1989, ACM SIGSOFT, V14, P210, DOI 10.1145/75309.75332
   Elbaum S, 2003, SOFTW TEST VERIF REL, V13, P65, DOI 10.1002/stvr.263
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Elbaum S, 2001, PROC INT CONF SOFTW, P329, DOI 10.1109/ICSE.2001.919106
   ELBAUM S, 2001, P 7 INT SOFTW METR S
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   JONES J, 2001, P INT C SOFTW MAINT
   Khoshgoftaar TM, 2002, IEEE T RELIAB, V51, P455, DOI 10.1109/TR.2002.804488
   KIM JM, 2002, P INT C SOFTW ENG MA
   MALISHEVSKY A, 2002, P INT C SOFTW MAINT
   NIKORA A, 1998, P 23 ANN SOFTW ENG W
   OSTRAND T, 1988, COMMUNICATIONS ACM, V31
   Porter A. A., 1990, Journal of Systems and Software, V12, P209, DOI 10.1016/0164-1212(90)90041-J
   RAMEY C, 1998, BASH REFERENCE MANUA
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Rothermel G, 1996, IEEE T SOFTWARE ENG, V22, P529, DOI 10.1109/32.536955
   Rothermel G., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P179, DOI 10.1109/ICSM.1999.792604
   ROTHERMEL G, 2002, P 24 INT C SOFTW ENG, P230
   SELBY RW, 1988, IEEE T SOFTWARE ENG, V14, P1743, DOI 10.1109/32.9061
   Srivastava A., 2002, Software Engineering Notes, V27, P97, DOI 10.1145/566171.566187
   Wang WE, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P264, DOI 10.1109/ISSRE.1997.630875
   Wong W. E., 1994, Proceedings. 5th International Symposium on Software Reliability Engineering (Cat. No.94TH8017), P230, DOI 10.1109/ISSRE.1994.341379
   WONG WE, 1995, PROC INT CONF SOFTW, P41, DOI 10.1145/225014.225018
NR 24
TC 115
Z9 133
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2004
VL 12
IS 3
BP 185
EP 210
DI 10.1023/B:SQJO.0000034708.84524.22
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 837EQ
UT WOS:000222611600002
DA 2024-07-18
ER

PT J
AU Giachetti, G
   de la Vara, JL
   Marín, B
AF Giachetti, Giovanni
   de la Vara, Jose Luis
   Marin, Beatriz
TI Model-driven gap analysis for the fulfillment of quality standards in
   software development processes
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality standards; Model-driven quality assurance; Gap analysis; Process
   configuration; ISO 9001; Quality knowledge
ID AGILE METHODS; IMPROVEMENT
AB Society today is moving towards rapid digitalization of almost every aspect of our lives. From healthcare and transport to work or entertainment, we depend on software products that need to function properly. The adequate construction of these software products can be evaluated and certified by means of quality standards. However, adopting quality standards is a complex and time-consuming task that requires experienced practitioners with advanced knowledge about standards and development practices. This presents a dichotomy for development companies that are transitioning to more agile schemes, where the necessary quality knowledge is scarce and poorly documented, and is slowly learnt and applied by novel practitioners. To overcome these issues, this paper presents a model-driven approach to automate the analysis of software development processes that must be aligned to quality standards. The approach has been implemented in an open-source tool and applied to a case study to automatically generate a gap analysis by reusing expert knowledge related to the ISO 9001 standard. The application has demonstrated it is possible to reduce the effort required from expert practitioners to perform the analysis and improve development processes to ensure the fulfillment of specific quality standards.
C1 [Giachetti, Giovanni] Univ Andres Bello, Fac Engn, Santiago, Chile.
   [de la Vara, Jose Luis] Univ Castilla La Mancha, Comp Syst Dept, Ciudad Real, Spain.
   [Giachetti, Giovanni] Univ Politecn Valencia, VRAIN Inst, Valencia, Spain.
   [Marin, Beatriz] Univ Politecn Valencia, Valencia, Spain.
C3 Universidad Andres Bello; Universidad de Castilla-La Mancha; Universitat
   Politecnica de Valencia; Universitat Politecnica de Valencia
RP Giachetti, G (corresponding author), Univ Andres Bello, Fac Engn, Santiago, Chile.; Giachetti, G (corresponding author), Univ Politecn Valencia, VRAIN Inst, Valencia, Spain.
EM Giovanni.giachetti@unab.cl
RI Giachetti, Giovanni/IWD-5481-2023; Tavoloni Marin,
   Beatriz/KIG-3299-2024; VARA, JOSE LUIS DE LA/A-7678-2018
OI VARA, JOSE LUIS DE LA/0000-0003-1813-398X
FU Horizon Europe - Pillar II [101097224] Funding Source: Horizon Europe -
   Pillar II
CR Al-Zewairi M., 2017, Journal of Computer and Communications, V5, P74, DOI [10.4236/jcc.2017.55007, DOI 10.4236/JCC.2017.55007]
   [Anonymous], 2006, CMMI FOR DEV
   [Anonymous], 2019, Business Process Management: Concepts, Languages, Architectures
   Ardila JPC, 2022, J SOFTW-EVOL PROC, V34, DOI 10.1002/smr.2440
   Ayyagari M. R., 2019, International Journal of Advanced Computer Science and Applications, V10
   Basri S., 2010, EUR C SOFTW PROC IMP
   Boulos Maged N Kamel, 2014, Online J Public Health Inform, V5, P229, DOI 10.5210/ojphi.v5i3.4814
   Campanelli AS, 2015, J SYST SOFTWARE, V110, P85, DOI 10.1016/j.jss.2015.08.035
   da Fonseca LMCM, 2019, J IND ENG MANAG-JIEM, V12, P27, DOI 10.3926/jiem.2745
   Dahar H., 2018, INT C EUR MIDDL E N
   Deguchi A., 2020, Society, V5, P1, DOI [10.1007/978-981-15-2989-4_1, DOI 10.1007/978-981-15-2989-4_1, 10.1007/978-981-15-2989-4]
   Digital ai, 2021, 15th annual-State of Agile Report
   Edison H, 2022, IEEE T SOFTWARE ENG, V48, P2709, DOI 10.1109/TSE.2021.3069039
   Engelen L, 2010, ELECTRON NOTES THEOR, V253, P105, DOI 10.1016/j.entcs.2010.08.035
   Ferreira A. I. F., 2007, 29 INT C SOFTW ENG I
   Fisher M, 2021, AUTON AGENT MULTI-AG, V35, DOI 10.1007/s10458-020-09487-2
   Frakes W, 1996, ACM COMPUT SURV, V28, P415, DOI 10.1145/234528.234531
   Fukuyama M., 2018, Hitachi, V27, P47
   Furtado A. P. C. C., 2012, 2012 12 INT C QUAL S
   García-Borgoñón L, 2014, INFORM SOFTWARE TECH, V56, P103, DOI 10.1016/j.infsof.2013.10.001
   Giachetti G, 2023, BUS INFORM SYST ENG+, V65, P103, DOI 10.1007/s12599-022-00785-5
   Gonzalez-Perez C, 2016, COMPUT STAND INTER, V48, P112, DOI 10.1016/j.csi.2016.04.007
   Gonzalez-Perez C, 2008, J SYST SOFTWARE, V81, P1288, DOI 10.1016/j.jss.2007.10.001
   Guerrero G., 2022, APPL TECHN 3 INT C I
   Hallstedt SI, 2020, SUSTAINABILITY-BASEL, V12, DOI 10.3390/su122310222
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Henriquez V, 2022, COMPUT STAND INTER, V82, DOI 10.1016/j.csi.2021.103610
   Ijaz Q., 2016, 2016 6 INT C INN COM
   Imoize A.L., 2019, World Scientific News, V122, P56
   International Organisation for Standardisation, 2015, ISO, 9001, 2015.
   International Organisation for Standardisation, 2000, ISO, P9001
   Jeffries R., 2001, XP magazine, P11
   Kurapati N., 2012, INT C AG SOFTW DEV
   Lee I, 2012, P IEEE, V100, P75, DOI 10.1109/JPROC.2011.2165270
   Leveson NG, 2009, SAFETY DESIGN FOR SPACE SYSTEMS, P475, DOI 10.1016/B978-0-7506-8580-1.00015-4
   López L, 2022, J SYST SOFTWARE, V186, DOI 10.1016/j.jss.2021.111187
   de la Vara JL, 2021, J SYST SOFTWARE, V171, DOI 10.1016/j.jss.2020.110812
   de la Vara JL, 2020, INFORM SOFTWARE TECH, V126, DOI 10.1016/j.infsof.2020.106351
   Machado E. M. M., 2022, EC SOCIAL DEV BOOK P, P29
   Mahanti A., 2006, Journal of Computing and Information Technology - CIT, V14, P197, DOI 10.2498/cit.2006.03.03
   Ming-Chang Lee, 2006, International Journal of Services and Standards, V2, P101, DOI 10.1504/IJSS.2006.008161
   Montoni Mariano Angel, 2009, Software Process: Improvement and Practice, V14, P289, DOI 10.1002/spip.428
   Munoz M., 2019, SYSTEMS SOFTWARE SER
   Munoz M., 2018, 2018 13 IB C INF SYS
   Mutafelija B., 2003, SYSTEMATIC PROCESS I
   Mylopoulos J., 1992, Conceptual Modelling Databases and CASE: An Integrated View of Information Systems Development, P49
   Object Management Group (OMG), 2011, Business Process Model and Notation (BPMN) Version 2.0. Business
   Ozkaya I, 2021, IEEE SOFTWARE, V38, P3, DOI 10.1109/MS.2021.3060552
   Pardo-Calvache César Jesús, 2019, Rev.fac.ing.univ. Antioquia, P105
   Pastor Oscar, 2008, Informatik Spektrum, V31, P394, DOI 10.1007/s00287-008-0275-8
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Poth A, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.1986
   Qumer A, 2008, J SYST SOFTWARE, V81, P1899, DOI 10.1016/j.jss.2007.12.806
   Rodriguez M, 2021, IT PROF, V23, P17, DOI 10.1109/MITP.2021.3067944
   Rodríguez M, 2012, IBER CONF INF SYST
   Runeson Per, 2012, Case study research in software engineering: Guidelines and examples
   Ruy F. B., 2014, FOIS
   Schwaber Ken, 2002, Series in agile software development, V1
   SEI, 2010, CMU/SEI-2010-TR-033
   Silva FS, 2015, INFORM SOFTWARE TECH, V58, P20, DOI 10.1016/j.infsof.2014.09.012
   Singh A., 2012, International Journal of Advanced Computer Science and Applications (IJACSA), V2
   Tomar D., 2020, Software Engineering, V9, P1
   Unterkalmsteiner M, 2012, IEEE T SOFTWARE ENG, V38, P398, DOI 10.1109/TSE.2011.26
   Valdes G., 2011, EUR C SOFTW PROC IMP
   Vieira J. K., 2020, Journal of Information Systems Engineering and Management, V5
   Walz J., 2011, 23 SYST SOFTW TECHN
NR 66
TC 1
Z9 1
U1 4
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 255
EP 282
DI 10.1007/s11219-023-09649-x
EA SEP 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:001072274600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Borg, M
   Henriksson, J
   Socha, K
   Lennartsson, O
   Lönegren, ES
   Bui, T
   Tomaszewski, P
   Sathyamoorthy, SR
   Brink, S
   Moghadam, MH
AF Borg, Markus
   Henriksson, Jens
   Socha, Kasper
   Lennartsson, Olof
   Lonegren, Elias Sonnsjo
   Bui, Thanh
   Tomaszewski, Piotr
   Sathyamoorthy, Sankar Raman
   Brink, Sebastian
   Moghadam, Mahshid Helali
TI Ergo, SMIRK is safe: a safety case for a machine learning component in a
   pedestrian automatic emergency brake system
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Machine learning safety; Safety standards; Safety case; Automotive
   demonstrator
ID DESIGN; INSPECTIONS
AB Integration of machine learning (ML) components in critical applications introduces novel challenges for software certification and verification. New safety standards and technical guidelines are under development to support the safety of ML-based systems, e.g., ISO 21448 SOTIF for the automotive domain and the Assurance of Machine Learning for use in Autonomous Systems (AMLAS) framework. SOTIF and AMLAS provide high-level guidance but the details must be chiseled out for each specific case. We initiated a research project with the goal to demonstrate a complete safety case for an ML component in an open automotive system. This paper reports results from an industry-academia collaboration on safety assurance of SMIRK, an ML-based pedestrian automatic emergency braking demonstrator running in an industry-grade simulator. We demonstrate an application of AMLAS on SMIRK for a minimalistic operational design domain, i.e., we share a complete safety case for its integrated ML-based component. Finally, we report lessons learned and provide both SMIRK and the safety case under an open-source license for the research community to reuse.
C1 [Borg, Markus; Socha, Kasper; Bui, Thanh; Tomaszewski, Piotr; Moghadam, Mahshid Helali] RISE Res Inst Sweden, Lund, Sweden.
   [Borg, Markus; Socha, Kasper] Lund Univ, Dept Comp Sci, Lund, Sweden.
   [Henriksson, Jens] Semcon AB, Gothenburg, Sweden.
   [Lennartsson, Olof; Lonegren, Elias Sonnsjo] Infotiv AB, Gothenburg, Sweden.
   [Sathyamoorthy, Sankar Raman] QRTECH AB, Gothenburg, Sweden.
   [Brink, Sebastian] Combitech AB, Gothenburg, Sweden.
C3 RISE Research Institutes of Sweden; Lund University; Semcon; Combitech
RP Borg, M (corresponding author), RISE Res Inst Sweden, Lund, Sweden.; Borg, M (corresponding author), Lund Univ, Dept Comp Sci, Lund, Sweden.
EM markus.borg@cs.lth.se; jens.henriksson@semcon.com; kasper.socha@ri.se;
   olof.lennartsson@infotiv.se; elias.sonnsjo@infotiv.se; thanh.bui@ri.se;
   piotr.tomaszewski@ri.se; sankar.sathyamoorthy@qrtech.se;
   sebastian.brink@combitech.com; mahshid.helali.moghadam@ri.se
RI Borg, Markus/F-3609-2010; Helali Moghadam, Mahshid/AAM-8026-2021
OI Borg, Markus/0000-0001-7879-4371; Helali Moghadam,
   Mahshid/0000-0003-3354-1463; Bui, Thanh Hai/0000-0002-5537-6430
CR Ali R, 2017, EXPERT SYST APPL, V71, P257, DOI 10.1016/j.eswa.2016.11.034
   Amorim T, 2017, LECT NOTES COMPUT SC, V10488, P329, DOI 10.1007/978-3-319-66266-4_22
   An J., 2015, Special Lecture on IE, V2, P1
   Ashmore R, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3453444
   Assurance Case Working Group, 2021, SCSC141C
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Arrieta AB, 2020, INFORM FUSION, V58, P82, DOI 10.1016/j.inffus.2019.12.012
   Ben Abdessalem R, 2018, IEEE INT CONF AUTOM, P143, DOI 10.1145/3238147.3238192
   Ben Abdessalem R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1016, DOI 10.1145/3180155.3180160
   Ben Abdessalem R, 2016, IEEE INT CONF AUTOM, P63, DOI 10.1145/2970276.2970311
   Bolya Daniel, 2020, Computer Vision - ECCV 2020. 16th European Conference. Proceedings. Lecture Notes in Computer Science (LNCS 12348), P558, DOI 10.1007/978-3-030-58580-8_33
   Borg Markus, 2021, 2021 IEEE/ACM 2nd International Workshop on Ethics in Software Engineering Research and Practice (SEthics), P5, DOI 10.1109/SEthics52569.2021.00009
   Borg M., 2019, J AUTOMOT SOFTW ENG, V1, P1, DOI DOI 10.2991/JASE.D.190131.001
   Borg M, 2021, IEEE INT CONF SOFTW, P383, DOI 10.1109/ICST49551.2021.00050
   Bosch J., 2021, Artificial Intelligence Paradigms for Smart Cyber-Physical Systems, P1, DOI 10.4018/978-1-7998-5101-1.ch001
   Chen LP, 2013, IEEE SOFTWARE, V30, P38, DOI 10.1109/MS.2012.174
   de la Vara J.L., 2019, Embedded World 2019
   Denney E, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P587, DOI 10.1109/ICSE.2015.199
   Denyer D, 2008, ORGAN STUD, V29, P393, DOI 10.1177/0170840607088020
   Dollár P, 2012, IEEE T PATTERN ANAL, V34, P743, DOI 10.1109/TPAMI.2011.155
   Ebadi H, 2021, THIRD IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST 2021), P103, DOI 10.1109/AITEST52744.2021.00030
   Engström E, 2020, EMPIR SOFTW ENG, V25, P2630, DOI 10.1007/s10664-020-09818-7
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Garousi V, 2020, EMPIR SOFTW ENG, V25, P1687, DOI 10.1007/s10664-020-09803-0
   Garousi V, 2016, INFORM SOFTWARE TECH, V79, P106, DOI 10.1016/j.infsof.2016.07.006
   Gauerhof Lydia, 2020, Computer Safety, Reliability, and Security. 39th International Conference, SAFECOMP 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12234), P197, DOI 10.1007/978-3-030-54549-9_13
   Hauer F, 2019, IEEE INT C INTELL TR, P2950, DOI 10.1109/ITSC.2019.8917326
   Hawkins R., 2021, GUIDANCE ASSURANCE M
   Henriksson J, 2021, 2021 47TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA 2021), P316, DOI 10.1109/SEAA53835.2021.00048
   Henriksson J, 2021, INFORM SOFTWARE TECH, V130, DOI 10.1016/j.infsof.2020.106409
   Henriksson J, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST), P27, DOI 10.1109/AITest.2019.00-12
   High-Level Expert Group on Artificial Intelligence, 2019, ETH GUID TRUSTW AI D
   Horkoff J, 2019, INT REQUIR ENG CONF, P386, DOI 10.1109/RE.2019.00050
   IEEE, 1998, 8301998 IEEE
   Jia Y., 2022, IEEE T EMERG TOP COM
   Käpyaho M, 2015, INT REQUIR ENG CONF, P334, DOI 10.1109/RE.2015.7320450
   Klaise J., 2020, P ICML WORKSHOP CHAL
   Koch P, 2015, APPL SOFT COMPUT, V29, P357, DOI 10.1016/j.asoc.2015.01.005
   KRUCHTEN PB, 1995, IEEE SOFTWARE, V12, P42, DOI 10.1109/52.469759
   Lin TY, 2014, LECT NOTES COMPUT SC, V8693, P740, DOI 10.1007/978-3-319-10602-1_48
   Liu S, 2018, PROC CVPR IEEE, P8759, DOI 10.1109/CVPR.2018.00913
   Masuda S, 2017, IEEE ICST WORKSHOP, P300, DOI 10.1109/ICSTW.2017.55
   MAXWELL JA, 1992, HARVARD EDUC REV, V62, P279, DOI 10.17763/haer.62.3.8323320856251826
   Mohseni S., 2020, P ARTIFICIAL INTELLI
   2012, MISRA C GUID US C LA
   Panichella A, 2015, 2015 IEEE/ACM 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE AND SYSTEMS TRACEABILITY, P15, DOI 10.1109/SST.2015.10
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Pelliccione P, 2020, SCI COMPUT PROGRAM, V191, DOI 10.1016/j.scico.2020.102414
   Petersson H, 2004, J SYST SOFTWARE, V72, P249, DOI 10.1016/S0164-1212(03)00090-6
   Picardi Chiara, 2020, P WORKSH ART INT SAF, P23
   Poucin F, 2021, IEEE INT CONF COMP V, P945, DOI 10.1109/ICCVW54120.2021.00110
   Preschern C., 2015, P 18 EUR C PATT LANG, P1
   Rajput M., 2020, YOLO V5 EXPLAINED DE
   Ralph P., 2020, ARXIV
   Redmon J., 2016, PROC CVPR IEEE, DOI [10.1109/CVPR.2016.91, DOI 10.1109/CVPR.2016.91]
   Riccio V, 2020, EMPIR SOFTW ENG, V25, P5193, DOI 10.1007/s10664-020-09881-0
   RISE Research Institutes of Sweden, 2022, SMIRK GITHUB REP
   Runeson Per, 2020, Contemporary Empirical Methods in Software Engineering, P127, DOI [DOI 10.1007/978-3-030-32489-6_5, DOI 10.1007/978-3-030-32489-65]
   Salay R., 2018, ANAL ISO 26262 MACHI
   Schwalbe Gesina, 2020, Computer Safety, Reliability, and Security. SAFECOMP 2020 Workshops. DECSoS 2020, DepDevOps 2020, USDAI 2020, and WAISE 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12235), P383, DOI 10.1007/978-3-030-55583-2_29
   Schwalbe G, 2020, P 10 EUR C EMB REAL, P1
   Schyllander J., 2014, MSB744 SWED CIV CONT
   Socha K, 2022, SOFTW IMPACTS, V13, DOI 10.1016/j.simpa.2022.100352
   Song Q., 2022, P 1 INT C ENG SOFTWA
   Stocco Andrea, 2022, IEEE T SOFTWARE ENG, P1, DOI [10.1109/TSE.2022.3202311, DOI 10.1109/TSE.2022.3202311]
   Tambon F, 2022, AUTOMAT SOFTW ENG, V29, DOI 10.1007/s10515-022-00337-x
   Tao JB, 2019, IEEE ICST WORKSHOP, P234, DOI 10.1109/ICSTW.2019.00058
   Thorn Eric, 2018, A framework for automated driving system testable cases and scenarios
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Tsilionis K, 2021, INT REQUIR ENG CONF, P454, DOI 10.1109/RE51729.2021.00067
   Ul Haq F, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P91, DOI 10.1145/3460319.3464802
   Ul Haq F, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09982-4
   van Aken JE, 2004, J MANAGE STUD, V41, P219, DOI 10.1111/j.1467-6486.2004.00430.x
   Weihang Wu, 2004, Proceedings of the 28th Annual International Computer Software and Applications Conference. COMPSAC 2004, P368, DOI 10.1109/CMPSAC.2004.1342860
   Weissensteiner P, 2022, ELECTRONICS-SWITZ, V11, DOI 10.3390/electronics11010072
   Wiegers K., 2008, K WIEGERS SOFTWARE R
   Wieringa Roelf J., 2014, Design science methodology for information systems and software engineering, DOI DOI 10.1007/978-3-662-43839-8
   Willers Oliver, 2020, Computer Safety, Reliability, and Security. SAFECOMP 2020 Workshops. DECSoS 2020, DepDevOps 2020, USDAI 2020, and WAISE 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12235), P336, DOI 10.1007/978-3-030-55583-2_25
   Wozniak Ernest, 2020, Computer Safety, Reliability, and Security. SAFECOMP 2020 Workshops. DECSoS 2020, DepDevOps 2020, USDAI 2020, and WAISE 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12235), P370, DOI 10.1007/978-3-030-55583-2_28
   Wu B, 2008, PROC CVPR IEEE, P3168
   Zablocki E, 2022, INT J COMPUT VISION, V130, P2425, DOI 10.1007/s11263-022-01657-x
   Zhang MS, 2018, IEEE INT CONF AUTOM, P132, DOI 10.1145/3238147.3238187
   Zimek Arthur, 2012, Statistical Analysis and Data Mining, V5, P363, DOI 10.1002/sam.11161
NR 83
TC 1
Z9 1
U1 6
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 335
EP 403
DI 10.1007/s11219-022-09613-1
EA MAR 2023
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000941898000002
PM 38625270
OA hybrid, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Catillo, M
   Del Vecchio, A
   Pecchia, A
   Villano, U
AF Catillo, Marta
   Del Vecchio, Andrea
   Pecchia, Antonio
   Villano, Umberto
TI Transferability of machine learning models learned from public intrusion
   detection datasets: the CICIDS2017 case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Denial of service; Machine learning; Transfer learning; Intrusion
   detection; Public intrusion datasets
AB Intrusion detection is a primary concern in any modern computer system due to the ever-growing number of intrusions. Machine learning represents an effective solution to detect and prevent network intrusions. Many existing intrusion detection approaches capitalize on machine learning models learned on the top of individual public datasets and achieve detection accuracy close to 1. These highly performing detectors strongly depend on the training data, which may not be representative of real-life production environments. This paper aims to explore this proposition in the context of denial of service attacks. Different intrusion detectors learned on the top of CICIDS2017 (an established public dataset widely used as a benchmark) are tested against an unseen, although closely related, dataset. The test dataset is based on the same mixture of denial of service attacks in CICIDS2017 and some additional variants. The results indicate that the perfect detection figures obtained in the context of a public dataset may not transfer in practice.
C1 [Catillo, Marta; Del Vecchio, Andrea; Pecchia, Antonio; Villano, Umberto] Univ Sannio, Dipartimento Ingn, Palzo Bosco Lucarelli Cso Garibaldi 107, I-82100 Benevento, Italy.
C3 University of Sannio
RP Catillo, M (corresponding author), Univ Sannio, Dipartimento Ingn, Palzo Bosco Lucarelli Cso Garibaldi 107, I-82100 Benevento, Italy.
EM marta.catillo@unisanno.it; andrea.delvecchio@unisannio.it;
   antonio.pecchia@unisannio.it; villano@unisannio.it
OI Catillo, Marta/0000-0002-5025-7969
FU "Orio Carlini" 2020 GARR Consortium Fellowship
FX Andrea Del Vecchio contributed to this work at the time he was hosted by
   the Department of Engineering at the University of Sannio under support
   by the "Orio Carlini" 2020 GARR Consortium Fellowship.
CR Ahmad Z, 2021, T EMERG TELECOMMUN T, V32, DOI 10.1002/ett.4150
   Ahmim A, 2019, IEEE INT CONF DISTR, P228, DOI 10.1109/DCOSS.2019.00059
   Ali O, 2018, 2018 9TH IEEE ANNUAL UBIQUITOUS COMPUTING, ELECTRONICS & MOBILE COMMUNICATION CONFERENCE (UEMCON), P229, DOI 10.1109/UEMCON.2018.8796637
   Resende PAA, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3178582
   Beer F., 2017, 10. DFN Forum Kommunikationstechnologien
   Bowen T, 2016, IEEE MILIT COMMUN C, P539, DOI 10.1109/MILCOM.2016.7795383
   Catillo M., 2021, QUALITY INFORM COMMU, P253
   Catillo M., 2021, P INT C DEP SYST NET, P1
   Catillo M, 2022, EXPERT SYST APPL, V191, DOI 10.1016/j.eswa.2021.116263
   Catillo M, 2021, COMPUT SECUR, V108, DOI 10.1016/j.cose.2021.102341
   de Lima FS, 2019, SECUR COMMUN NETW, V2019, DOI 10.1155/2019/1574749
   Engelen G, 2021, 2021 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2021), P7, DOI 10.1109/SPW53761.2021.00009
   Kayacik HG, 2005, LECT NOTES COMPUT SC, V3495, P362
   Kenyon A, 2020, COMPUT SECUR, V99, DOI 10.1016/j.cose.2020.102022
   Kshirsagar Deepak, 2021, ICT Express, V7, P371
   Lee J, 2019, IEEE ACCESS, V7, P165607, DOI 10.1109/ACCESS.2019.2953095
   Li XY, 2003, REAL-TIME SYSTEM SECURITY, P77
   Liu HY, 2019, APPL SCI-BASEL, V9, DOI 10.3390/app9204396
   Maciá-Fernández G, 2018, COMPUT SECUR, V73, P411, DOI 10.1016/j.cose.2017.11.004
   McHugh J., 2000, ACM Transactions on Information and Systems Security, V3, P262, DOI 10.1145/382912.382923
   Moustafa N, 2015, 2015 MILITARY COMMUNICATIONS AND INFORMATION SYSTEMS CONFERENCE (MILCIS)
   Nguyen S-N, 2018, P 2 INT C MACHINE LE, P34, DOI DOI 10.1145/3184066.3184089
   Pan SJ, 2010, IEEE T KNOWL DATA EN, V22, P1345, DOI 10.1109/TKDE.2009.191
   Qu XF, 2019, IEEE ACCESS, V7, P78434, DOI 10.1109/ACCESS.2019.2922737
   Ring M, 2019, COMPUT SECUR, V86, P147, DOI 10.1016/j.cose.2019.06.005
   Sacramento L, 2018, IEEE TRUST BIG, P567, DOI 10.1109/TrustCom/BigDataSE.2018.00086
   Sharawat IK, 2021, PEDIATR EMERG CARE, V37, pE60, DOI 10.1097/PEC.0000000000001555
   Shenfield A, 2018, ICT EXPRESS, V4, P95, DOI 10.1016/j.icte.2018.04.003
   Sommer R, 2010, P IEEE S SECUR PRIV, P305, DOI 10.1109/SP.2010.25
   Tavallaee M, 2009, 2009 IEEE S COMP INT, P1, DOI DOI 10.1109/CISDA.2009.5356528
   Tavallaee M, 2010, IEEE T SYST MAN CY C, V40, P516, DOI 10.1109/TSMCC.2010.2048428
   Valle Silva Joao Vitor, 2020, 2020 4th Conference on Cloud and Internet of Things (CIoT), P1, DOI 10.1109/CIoT50422.2020.9244289
   Verkerken M, 2022, J NETW SYST MANAG, V30, DOI 10.1007/s10922-021-09615-7
   Viegas EK, 2017, COMPUT NETW, V127, P200, DOI 10.1016/j.comnet.2017.08.013
   Wankhede S, 2018, 2018 FOURTH INTERNATIONAL CONFERENCE ON COMPUTING COMMUNICATION CONTROL AND AUTOMATION (ICCUBEA)
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
NR 36
TC 17
Z9 17
U1 3
U2 25
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2022
VL 30
IS 4
BP 955
EP 981
DI 10.1007/s11219-022-09587-0
EA MAR 2022
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6J7CW
UT WOS:000770737500002
DA 2024-07-18
ER

PT J
AU Ulan, M
   Löwe, W
   Ericsson, M
   Wingkvist, A
AF Ulan, Maria
   Lowe, Welf
   Ericsson, Morgan
   Wingkvist, Anna
TI Copula-based software metrics aggregation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality assessment; Quantitative methods; Software metrics; Aggregation;
   Multivariate statistical methods; Probabilistic models; Copula
ID QUALITY; MODEL
AB A quality model is a conceptual decomposition of an abstract notion of quality into relevant, possibly conflicting characteristics and further into measurable metrics. For quality assessment and decision making, metrics values are aggregated to characteristics and ultimately to quality scores. Aggregation has often been problematic as quality models do not provide the semantics of aggregation. This makes it hard to formally reason about metrics, characteristics, and quality. We argue that aggregation needs to be interpretable and mathematically well defined in order to assess, to compare, and to improve quality. To address this challenge, we propose a probabilistic approach to aggregation and define quality scores based on joint distributions of absolute metrics values. To evaluate the proposed approach and its implementation under realistic conditions, we conduct empirical studies on bug prediction of ca. 5000 software classes, maintainability of ca. 15000 open-source software systems, and on the information quality of ca. 100000 real-world technical documents. We found that our approach is feasible, accurate, and scalable in performance.
C1 [Ulan, Maria; Lowe, Welf; Ericsson, Morgan; Wingkvist, Anna] Linnaeus Univ, Ctr Data Intens Sci & Applicat, Data Driven Software & Informat Qual Grp, S-35195 Vaxjo, Sweden.
C3 Linnaeus University
RP Ulan, M (corresponding author), Linnaeus Univ, Ctr Data Intens Sci & Applicat, Data Driven Software & Informat Qual Grp, S-35195 Vaxjo, Sweden.
EM maria.ulan@lnu.se; welf.lowe@lnu.se; morgan.ericsson@lnu.se;
   anna.wingkvist@lnu.se
RI Ulan, Maria/GXZ-8607-2022
OI Ulan, Maria/0000-0002-3906-7611
FU Knowledge Foundation within the project "Software technology for
   self-adaptive systems" [20150088]
FX The authors thank Ericsson and Sigma Technology for providing real-world
   datasets and Softwerk for providing access to their Quality Monitor. The
   research was supported by The Knowledge Foundation within the project
   "Software technology for self-adaptive systems" (ref. number 20150088).
   We thank the anonymous reviewers whose comments and suggestions helped
   us improve and clarify the research onto paper.
CR Allamanis M, 2013, IEEE WORK CONF MIN S, P207, DOI 10.1109/MSR.2013.6624029
   Alves T. L., 2011, 2011 Proceedings of Joint Conf of 21st Int'l Workshop on Software Measurement and the 6th Int'l Conference on Software Process and Product Measurement (IWSM-MENSURA 2011), P20, DOI 10.1109/IWSM-MENSURA.2011.15
   Alves TL, 2010, PROC IEEE INT CONF S
   [Anonymous], 1990, IEEE Std 610.12-1990, V42, P112, DOI [10.1109/IEEESTD.1990.101064, DOI 10.1109/IEEESTD.1990.101064]
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Baggen R, 2012, SOFTWARE QUAL J, V20, P287, DOI 10.1007/s11219-011-9144-9
   Bakota T., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P243, DOI 10.1109/ICSM.2011.6080791
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Barkmann H, 2009, 2009 INTERNATIONAL CONFERENCE ON ADVANCED INFORMATION NETWORKING AND APPLICATIONS WORKSHOPS: WAINA, VOLS 1 AND 2, P1067, DOI 10.1109/WAINA.2009.190
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Binois M, 2015, INFORM SCIENCES, V324, P270, DOI 10.1016/j.ins.2015.06.037
   Bland JM, 1999, STAT METHODS MED RES, V8, P135, DOI 10.1177/096228029900800204
   Boehm B.W., 1978, Characteristics of Software Quality
   Borsboom D, 2003, PSYCHOL REV, V110, P203, DOI 10.1037/0033-295X.110.2.203
   Calvo T, 2002, STUD FUZZ SOFT COMP, V97, P3
   CARLSSON C, 1995, COMPUT OPER RES, V22, P251, DOI 10.1016/0305-0548(94)E0023-Z
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Correia JosePedro., 2008, P 2 INT WORKSHOP FDN, P35
   Crosby P., 1980, SIGNET
   Crutchfield JP, 2003, CHAOS, V13, P25, DOI 10.1063/1.1530990
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Dujmovic J, 2013, ADV INTELL SYST, V228, P5, DOI 10.1007/978-3-642-39165-1_2
   Ericsson M., 2012, INT J INFORM QUALITY, V3, P49, DOI DOI 10.1504/IJIQ.2012.050049
   Ericsson M, 2013, ASIA PAC SOFWR ENG, P55, DOI 10.1109/APSEC.2013.112
   FENTON N, 1994, IEEE T SOFTWARE ENG, V20, P199, DOI 10.1109/32.268921
   GARVIN DA, 1984, SLOAN MANAGE REV, V26, P25
   Gil Y, 2017, EMPIR SOFTW ENG, V22, P2585, DOI 10.1007/s10664-017-9513-5
   Grady R.B., 1987, SOFTWARE METRICS EST, V1
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Hald A., 2007, HIST PARAMETRIC STAT, V1713, P11
   Heitlager I, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P30, DOI 10.1109/QUATIC.2007.8
   Henderson-Sellers B., 1995, Object-oriented metrics: measures of complexity
   Hollander M., 2014, Nonparametric Statistical Methods, Solutions Manual, Vthird
   ISO/IEC, 2010, Technical report
   Jiarpakdee J, 2018, PROC IEEE INT CONF S, P92, DOI 10.1109/ICSME.2018.00018
   Juran J., 1999, Quality handbook, P173
   Kendall M. G., 1948, Rank correlation methods.
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   Letouzey Jean-Louis, 2010, Proceedings 2010 Second International Conference on Advances in System Testing and Validation Lifecycle (VALID), P43, DOI 10.1109/VALID.2010.31
   Mai JF, 2009, J MULTIVARIATE ANAL, V100, P1567, DOI 10.1016/j.jmva.2009.01.010
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   McCall J., 1977, Factors in software quality, V1
   Morasca S, 2009, INT SYMP EMP SOFTWAR, P44, DOI 10.1109/ESEM.2009.5316048
   Mordal K, 2013, J SOFTW-EVOL PROC, V25, P1117, DOI 10.1002/smr.1558
   Mordal-Manet K, 2009, PROC IEEE INT CONF S, P531, DOI 10.1109/ICSM.2009.5306381
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Nelsen R.B., 2007, An introduction to copulas, DOI DOI 10.1007/0-387-28678-0
   Oaksford M, 2009, BEHAV BRAIN SCI, V32, P69, DOI 10.1017/S0140525X09000284
   Oliveira P, 2014, PROC IEEE INT CONF S, P629, DOI 10.1109/ICSME.2014.112
   OMAN P, 1994, J SYST SOFTWARE, V24, P251, DOI 10.1016/0164-1212(94)90067-1
   Riaz M, 2009, INT SYMP EMP SOFTWAR, P368, DOI 10.1109/esem.2009.5314233
   Rudiger Lincke., 2008, International Symposium on Software Testing and Analysis, P131, DOI 10.1145/1390630.1390648
   Rüschendorf L, 2009, J STAT PLAN INFER, V139, P3921, DOI 10.1016/j.jspi.2009.05.030
   Serebrenik A, 2010, PROC IEEE INT CONF S
   SIEGEL S, 1960, J AM STAT ASSOC, V55, P429, DOI 10.2307/2281906
   Simon H. A, 1960, The new science of management decision, DOI 10.1037/13978-000
   Spearman C, 1904, AM J PSYCHOL, V15, P201, DOI 10.2307/1412107
   Strein D, 2007, IEEE T SOFTWARE ENG, V33, P592, DOI [10.1109/TSE.2007.70710, 10.1109/tse.2007.70710]
   Ulan Maria, 2018, 2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion). Proceedings, P216, DOI 10.1145/3183440.3195103
   Ulan M, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09984-2
   Vasa R, 2009, PROC IEEE INT CONF S, P179, DOI 10.1109/ICSM.2009.5306322
   Vasilescu Bogdan., 2011, Proceedings of the 2Nd International Workshop on Emerging Trends in Software Metrics, WETSoM '11, P23
   Vincke P., 1992, MULTICRITERIA DECISI
   Wagner S., 2013, SOFTWARE PRODUCT QUA
   Wagner S, 2015, INFORM SOFTWARE TECH, V62, P101, DOI 10.1016/j.infsof.2015.02.009
NR 66
TC 5
Z9 5
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2021
VL 29
IS 4
BP 863
EP 899
DI 10.1007/s11219-021-09568-9
EA AUG 2021
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XE8XW
UT WOS:000687914800001
OA hybrid
DA 2024-07-18
ER

PT J
AU Wang, R
   Ying, S
   Li, MY
   Jia, S
AF Wang, Rui
   Ying, Shi
   Li, Meiyan
   Jia, Shun
TI HSACMA: a hierarchical scalable adaptive cloud monitoring architecture
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Cloud monitoring; Hierarchy; Scalability; Adaptability
ID SERVICE
AB Monitoring for cloud is the key technology to know the status and the availability of the resources and services present in the current infrastructure. However, cloud monitoring faces a lot of challenges due to inefficient monitoring capability and enormous resource consumption. We study the adaptive monitoring for cloud computing platform, and focus on the problem of balancing monitoring capability and resource consumption. We proposed HSACMA, a hierarchical scalable adaptive monitoring architecture, that (1) monitors the physical and virtual infrastructure at the infrastructure layer, the middleware running at the platform layer, and the application services at the application layer; (2) achieves the scalability of the monitoring based on microservices; and (3) adaptively adjusts the monitoring interval and data transmission strategy according to the running state of the cloud computing system. Moreover, we study a case of real production system deployed and running on the cloud computing platform called CloudStack, to verify the effectiveness of applying our architecture in practice. The results show that HSACMA can guarantee the accuracy and real-time performance of monitoring and reduces resource consumption.
C1 [Wang, Rui; Li, Meiyan; Jia, Shun] Shandong Univ Sci & Technol, Coll Energy & Min Engn, Qingdao, Peoples R China.
   [Ying, Shi] Wuhan Univ, Sch Comp Sci, Wuhan 430072, Peoples R China.
C3 Shandong University of Science & Technology; Wuhan University
RP Ying, S (corresponding author), Wuhan Univ, Sch Comp Sci, Wuhan 430072, Peoples R China.
EM wangrui@sdust.edu.cn; yingshi@whu.edu.cn; limeiyanqdu@163.com;
   herojiashun@163.com
FU National Natural Science Foundation of China [61672392, 61373038];
   National Key Research and Development Program of China [2016YFC1202204]
FX This work is supported in part by the grants of the National Natural
   Science Foundation of China (Grant Nos. 61672392 and 61373038) and
   National Key Research and Development Program of China (No.
   2016YFC1202204).
CR Andreozzi S, 2005, FUTURE GENER COMP SY, V21, P559, DOI 10.1016/j.future.2004.10.005
   [Anonymous], 1998, PCL-The Performance Counter Library: A Common Interface to Access Hardware Performance Counters on Microprocessors
   [Anonymous], 1991, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling
   Barham P., 2003, Operating Systems Review, V37, P164, DOI 10.1145/1165389.945462
   Barth Wolfgang., 2008, NAGIOS SYSTEM NETWOR, V2nd
   Berman F, 2003, GRID COMPUTING MAKIN, V2, P945
   Bezemer CP, 2014, J SYST SOFTWARE, V87, P87, DOI 10.1016/j.jss.2013.09.013
   Chen G., 2011, PARALLEL COMPUTING S
   [陈林 Chen Lin], 2017, [计算机科学, Computer Science], V44, P7
   Chieu TC, 2009, ICEBE 2009: IEEE INTERNATIONAL CONFERENCE ON E-BUSINESS ENGINEERING, PROCEEDINGS, P281, DOI 10.1109/ICEBE.2009.45
   Cortellessa V, 2011, MODEL-BASED SOFTWARE PERFORMANCE ANALYSIS, P1, DOI 10.1007/978-3-642-13621-4
   George L., 2011, HBASE DEFINITIVE GUI
   Gogouvitis S, 2012, FUTURE GENER COMP SY, V28, P193, DOI 10.1016/j.future.2011.05.017
   Han H., 2009, RESTFUL APPROACH MAN
   Huang H, 2010, INT CONF COMP SCI, P802, DOI 10.1109/ICCSIT.2010.5563811
   Jiang GF, 2006, IEEE T DEPEND SECURE, V3, P312, DOI 10.1109/TDSC.2006.52
   Jones M.T., 2013, PROCESS REAL TIME BI
   Karau H., 2015, Learning Spark: Lightning-Fast Big Data Analysis
   Katsaros G, 2012, J SYST SOFTWARE, V85, P1029, DOI 10.1016/j.jss.2011.11.1043
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kimelfeld B., 2013, PROBABILISTIC XML MO
   König B, 2012, IET COMMUN, V6, P1306, DOI 10.1049/iet-com.2011.0200
   Liu ZH, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1247, DOI 10.1145/2588555.2595628
   MACKIEWICZ A, 1993, COMPUT GEOSCI, V19, P303, DOI 10.1016/0098-3004(93)90090-R
   Massie ML, 2004, PARALLEL COMPUT, V30, P817, DOI 10.1016/j.parco.2004.04.001
   Mell P, 2010, COMMUN ACM, V53, P50
   Meng SC, 2013, IEEE T COMPUT, V62, P1705, DOI 10.1109/TC.2012.165
   Papazoglou MP, 2007, VLDB J, V16, P389, DOI 10.1007/s00778-007-0044-3
   Patterson DA, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XVI), P185
   Povedano-Molina J, 2013, FUTURE GENER COMP SY, V29, P2041, DOI 10.1016/j.future.2013.04.022
   Rak M., 2011, Proceedings of the 2011 IEEE 3rd International Conference on Cloud Computing Technology and Science (CloudCom 2011), P758, DOI 10.1109/CloudCom.2011.117
   Reddy PVV, 2015, 2015 International Conference on Communication, Information & Computing Technology (ICCICT), DOI 10.1109/ICCICT.2015.7045680
   Schwartz B., 2012, High Performance MySQL: Optimization, Backups, and Replication
   Shao J., 2010, RUNTIME MODEL BASED
   Smith CU, 2002, IEEE SOFTWARE, V20, P103
   Tasquier L., 2012, AGENT BASED APPL TOO
   Thain D, 2005, CONCURR COMP-PRACT E, V17, P323, DOI 10.1002/cpe.938
   Wang R., 2017, 29 INT C SOFTW ENG K, P149
   Wang R, 2020, CONCURR COMP-PRACT E, V32, DOI 10.1002/cpe.5729
   Wang R, 2019, INT J SOFTW ENG KNOW, V29, P1245, DOI 10.1142/S0218194019500396
   Wang R, 2018, SOFTWARE PRACT EXPER, V48, P2000, DOI 10.1002/spe.2607
   Wang S, 2014, PROC VLDB ENDOW, V7, P529, DOI 10.14778/2732286.2732290
   Zanikolas S, 2005, FUTURE GENER COMP SY, V21, P163, DOI 10.1016/j.future.2004.07.002
NR 43
TC 3
Z9 3
U1 0
U2 32
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1379
EP 1410
DI 10.1007/s11219-020-09524-z
EA AUG 2020
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000562355000001
DA 2024-07-18
ER

PT J
AU Ferenc, R
   Tóth, Z
   Ladányi, G
   Siket, I
   Gyimóthy, T
AF Ferenc, Rudolf
   Toth, Zoltan
   Ladanyi, Gergely
   Siket, Istvan
   Gyimothy, Tibor
TI A public unified bug dataset for java and its assessment regarding
   metrics and bug prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Bug dataset; Code metrics; Static code analysis; Bug prediction
ID SOFTWARE; VALIDATION; QUALITY; FAULTS
AB Bug datasets have been created and used by many researchers to build and validate novel bug prediction models. In this work, our aim is to collect existing public source code metric-based bug datasets and unify their contents. Furthermore, we wish to assess the plethora of collected metrics and the capabilities of the unified bug dataset in bug prediction. We considered 5 public datasets and we downloaded the corresponding source code for each system in the datasets and performed source code analysis to obtain a common set of source code metrics. This way, we produced a unified bug dataset at class and file level as well. We investigated the diversion of metric definitions and values of the different bug datasets. Finally, we used a decision tree algorithm to show the capabilities of the dataset in bug prediction. We found that there are statistically significant differences in the values of the original and the newly calculated metrics; furthermore, notations and definitions can severely differ. We compared the bug prediction capabilities of the original and the extended metric suites (within-project learning). Afterwards, we merged all classes (and files) into one large dataset which consists of 47,618 elements (43,744 for files) and we evaluated the bug prediction model build on this large dataset as well. Finally, we also investigated cross-project capabilities of the bug prediction models and datasets. We made the unified dataset publicly available for everyone. By using a public unified dataset as an input for different bug prediction related investigations, researchers can make their studies reproducible, thus able to be validated and verified.
C1 [Ferenc, Rudolf; Toth, Zoltan; Ladanyi, Gergely; Siket, Istvan] Univ Szeged, Dept Software Engn, Szeged, Hungary.
   [Gyimothy, Tibor] MTA SZTE Res Grp Artificial Intelligence, Szeged, Hungary.
C3 Szeged University
RP Ferenc, R (corresponding author), Univ Szeged, Dept Software Engn, Szeged, Hungary.
EM ferenc@inf.u-szeged.hu; zizo@inf.u-szeged.hu; lgergely@inf.u-szeged.hu;
   siket@inf.u-szeged.hu; gyimothy@inf.u-szeged.hu
RI Tóth, Zoltán/L-8252-2018; Ferenc, Rudolf/A-1317-2008
FU EU-funded Hungarian national grant [GINOP-2.3.2-15-2016-00037,
   TUDFO/47138-1/2019-ITM]; Ministry for Innovation and Technology, Hungary
FX This research was supported by the EU-funded Hungarian national grant
   GINOP-2.3.2-15-2016-00037 titled "Internet of Living Things" and by
   grant TUDFO/47138-1/2019-ITM of the Ministry for Innovation and
   Technology, Hungary.
CR Adewumi A, 2016, SPRINGERPLUS, V5, DOI 10.1186/s40064-016-3612-4
   [Anonymous], 2016, ARXIV161203224
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Bowes David., 2016, Proceedings of the 25th International Symposium on Software Testing and Analysis, P330, DOI DOI 10.1145/2931037.2931039
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Catal C, 2011, EXPERT SYST APPL, V38, P4626, DOI 10.1016/j.eswa.2010.10.024
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Cellier Peggy., 2011, SEKE, P238
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cohen J., 1988, STAT POWER ANAL BEHA
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Dallmeier V., 2007, ASE, P433
   DURIEUX T, 2016, TECHNICAL REPORT
   El Emam K, 2001, J SYST SOFTWARE, V56, P63, DOI 10.1016/S0164-1212(00)00086-8
   Ferenc R, 2018, PROMISE'18: PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING, P12, DOI 10.1145/3273934.3273936
   Gray D, 2012, IET SOFTW, V6, P549, DOI 10.1049/iet-sen.2011.0132
   Gray David, 2011, 15th Annual Conference on Evaluation & Assessment in Software Engineering (EASE 2011), P96, DOI 10.1049/ic.2011.0012
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Hall M., 2009, SIGKDD EXPLORATIONS, V11, P10, DOI [10.1145/1656274.1656278, DOI 10.1145/1656274.1656278]
   Hall T, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2629648
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Harman M, 2014, LECT NOTES COMPUT SC, V8636, P240
   Herbold S, 2018, IEEE T SOFTWARE ENG, V44, P811, DOI 10.1109/TSE.2017.2724538
   HORNING JJ, 1974, OPERATING SYSTEMS, P171
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Jureczko M., 2011, Metody Informatyki Stosowanej, V5, P133
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Just R, 2014, P 2014 INT S SOFTW T, P437, DOI DOI 10.1145/2610384.2628055
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Li ZQ, 2018, IET SOFTW, V12, P161, DOI 10.1049/iet-sen.2017.0148
   Lin Derrick, 2017, P COMPANION 2017 ACM, P55, DOI [10.1145/3135932, DOI 10.1145/3135932, 10.1145/3135932.3135941]
   MADEIRAL F, 2019, ARXIV190106024
   MALHOTRA R., 2011, ACM SIGSOFT Software Engineering Notes, V36, P1, DOI DOI 10.1145/2020976.2020991
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   MOSER R, 2008, COMP ANAL EFFICIENCY
   MYLES H, 2014, NONPARAMETRIC STAT M
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Petric Jean., 2016, Proceedings of the 20th International Conference on Evaluation and Assessment in Software Engineering, page, P13
   Radjenovic D, 2013, INFORM SOFTWARE TECH, V55, P1397, DOI 10.1016/j.infsof.2013.02.009
   Randell B., 1975, IEEE Transactions on Software Engineering, VSE-1, P220, DOI 10.1109/TSE.1975.6312842
   ROBLES G, 2010, 2010 7 IEEE WORK C M, P171
   Rudiger Lincke., 2008, International Symposium on Software Testing and Analysis, P131, DOI 10.1145/1390630.1390648
   Saha RK, 2018, IEEE WORK CONF MIN S, P10, DOI 10.1145/3196398.3196473
   Sayyad Shirabad J., 2005, The PROMISE Repository of Software Engineering Databases
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Strate JD, 2013, IEEE T RELIAB, V62, P444, DOI 10.1109/TR.2013.2259204
   Subramanyam R, 2003, IEEE T SOFTWARE ENG, V29, P297, DOI 10.1109/TSE.2003.1191795
   Thomas Zimmermann., 2009, P THE 7 JOINT M EURO, P91, DOI DOI 10.1145/1595696.1595713
   Tóth Z, 2016, LECT NOTES COMPUT SC, V9789, P625, DOI 10.1007/978-3-319-42089-9_44
   Wahono R. S., 2015, Journal of Software Engineering, V1, P1
   Weyuker E. J., 2011, Proceedings of the 2011 Second International Workshop on Replication in Empirical Software Engineering Research (RESER 2011), P71, DOI 10.1109/RESER.2011.15
   Weyuker EJ, 2010, EMPIR SOFTW ENG, V15, P277, DOI 10.1007/s10664-009-9111-2
   Wohlin C, 2014, P 18 INT C EVALUATIO, DOI DOI 10.1145/2601248.2601268
   Wong WE, 2012, IEEE T SYST MAN CY C, V42, P378, DOI 10.1109/TSMCC.2011.2118751
   Xu ZW, 2000, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P281, DOI 10.1109/HASE.2000.895473
   2018, PROMISE REPOSITORY E
   2019, SOURCEMETER STATIC C
NR 60
TC 22
Z9 24
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1447
EP 1506
DI 10.1007/s11219-020-09515-0
EA JUN 2020
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000537689700001
OA hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Baldassarre, MT
   Barletta, VS
   Caivano, D
   Scalera, M
AF Baldassarre, Maria Teresa
   Barletta, Vita Santa
   Caivano, Danilo
   Scalera, Michele
TI Integrating security and privacy in software development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Privacy by Design; Security by design; Secure software development;
   Secure architecture; System re-engineering; Cybersecurity; Application
   security
AB As a consequence to factors such as progress made by the attackers, release of new technologies and use of increasingly complex systems, and threats to applications security have been continuously evolving. Security of code and privacy of data must be implemented in both design and programming practice to face such scenarios. In such a context, this paper proposes a software development approach, Privacy Oriented Software Development (POSD), that complements traditional development processes by integrating the activities needed for addressing security and privacy management in software systems. The approach is based on 5 key elements (Privacy by Design, Privacy Design Strategies, Privacy Pattern, Vulnerabilities, Context). The approach can be applied in two directions forward and backward, for developing new software systems or re-engineering an existing one. This paper presents the POSD approach in the backward mode together with an application in the context of an industrial project. Results show that POSD is able to discover software vulnerabilities, identify the remediation patterns needed for addressing them in the source code, and design the target architecture to be used for guiding privacy-oriented system re-engineering.
C1 [Baldassarre, Maria Teresa; Barletta, Vita Santa; Caivano, Danilo; Scalera, Michele] Univ Bari Aldo Moro, Dept Comp Sci, Via Orabona 4, I-70125 Bari, Italy.
C3 Universita degli Studi di Bari Aldo Moro
RP Barletta, VS (corresponding author), Univ Bari Aldo Moro, Dept Comp Sci, Via Orabona 4, I-70125 Bari, Italy.
EM mariateresa.baldassarre@uniba.it; vita.barletta@uniba.it;
   danilo.caivano@uniba.it; michele.scalera@uniba.it
RI Barletta, Vita Santa/ABB-6603-2021
OI Barletta, Vita Santa/0000-0002-0163-6786
FU Project "Digital Service Ecosystem" - Italian Minister of University and
   Research [PON03PE_00136_1]; Project "Auriga2020" - Apulia Region
   [T5LXK18]
FX This study has been partially funded by the Project "Digital Service
   Ecosystem" (Cod. PON03PE_00136_1) funded by Italian Minister of
   University and Research and Project "Auriga2020" - (Cod. T5LXK18),
   funded by Apulia Region.
CR [Anonymous], 2019, RES DOC
   [Anonymous], Owasp top ten 2017
   [Anonymous], RES DOC
   Ardimento P, 2004, LECT NOTES COMPUT SC, V3009, P159
   Ardimento P, 2008, J INF KNOWL MANAG, V7, P197, DOI 10.1142/S0219649208002081
   Baldassarre M.T., 2019, P ITASEC
   Baldassarre M. T., 2019, TARGET ARCHITECTURE
   Baldassarre M. T., 2013, P 17 INT C EV ASS SO, P144, DOI [10.1145/2460999.2461020, DOI 10.1145/2460999.2461020]
   Baldassarre MT, 2018, 2018 AEIT INTERNATIONAL ANNUAL CONFERENCE
   Baldassarre Maria Teresa, 2019, QUALITY INFORM COMMU, P18, DOI DOI 10.1007/978-3-030-29238-6_2
   Baldassarre MT, 2005, PROC IEEE INT CONF S, P283
   Black P. E., 2016, DRAMATICALLY REDUCIN, DOI [10.6028/NIST.IR.8151, DOI 10.6028/NIST.IR.8151]
   Caivano D, 2018, J SYST SOFTWARE, V144, P143, DOI 10.1016/j.jss.2018.06.026
   Cavoukian A, 2012, GLOBAL PRIVACY SECUR
   Cavoukian A, 2016, IEEE POTENTIALS, V35, P43, DOI 10.1109/MPOT.2016.2569741
   Center for Internet Security, 2019, CIS BENCHM RES DOC
   Colesky M, 2016, 2016 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2016), P33, DOI 10.1109/SPW.2016.23
   Diamantopoulou V, 2017, INT CONF RES CHAL, P187, DOI 10.1109/RCIS.2017.7956536
   Farhat A., 2018, P 21 SAUDI COMPUTER, P1
   Fernández-Sáez AM, 2016, EMPIR SOFTW ENG, V21, P212, DOI 10.1007/s10664-014-9354-4
   Fortify Static Code Analyze (SCA), 2019, RES DOC
   GDPR, 2016, Regulation (eu) 2016/679, general data protection regulation
   Halkidis ST, 2008, IEEE T DEPEND SECURE, V5, P129, DOI 10.1109/TDSC.2007.70240
   Hansen M, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P159, DOI 10.1109/SPW.2015.13
   Hatzivasilis G, 2016, IEEE SOFTWARE, V33, P46, DOI 10.1109/MS.2016.61
   Hilbrich M, 2017, 2017 IEEE 7TH INTERNATIONAL SYMPOSIUM ON CLOUD AND SERVICE COMPUTING (SC2 2017), P237, DOI 10.1109/SC2.2017.43
   Hoepman JH, 2014, IFIP ADV INF COMM TE, V428, P446
   Jaatun MG, 2015, LECT NOTES COMPUT SC, V9290, P120, DOI 10.1007/978-3-319-23318-5_7
   Kalloniatis C, 2008, REQUIR ENG, V13, P241, DOI 10.1007/s00766-008-0067-3
   Kissel R. L., 2008, SPECIAL PUBLICATION
   Liu YB, 2016, CHINA COMMUN, V13, P178, DOI 10.1109/CC.2016.7405735
   Moral-García S, 2010, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCES ON PERVASIVE PATTERNS AND APPLICATIONS (PATTERNS 2010), P66
   Morales -Trujillo M.E., 2018, Av. en Ing. Softw. a Niv. Iberoam. CIbSE, V22, P107
   Navarro-Machuca J, 2016, 2016 IEEE 2ND INTERNATIONAL CONFERENCE ON BIG DATA SECURITY ON CLOUD (BIGDATASECURITY), IEEE INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE AND SMART COMPUTING (HPSC), AND IEEE INTERNATIONAL CONFERENCE ON INTELLIGENT DATA AND SECURITY (IDS), P116, DOI 10.1109/BigDataSecurity-HPSC-IDS.2016.46
   Notario N, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P151, DOI 10.1109/SPW.2015.22
   Ortiz R, 2011, WOSIS 2011: SECURITY IN INFORMATION SYSTEMS, P59
   OWASP Testing Guide, 2016, RES DOC
   Spiekermann S, 2009, IEEE T SOFTWARE ENG, V35, P67, DOI 10.1109/TSE.2008.88
   Suphakul T, 2017, 2017 18TH IEEE/ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING (SNDP 2017), P369, DOI 10.1109/SNPD.2017.8022748
   Thomborson Clark, 2016, 2016 14 ANN C PRIV S, P656
   Tung Y.-H., 2016, 2016 18 ASIA PACIFIC, P1, DOI [DOI 10.1109/APNOMS.2016, DOI 10.1109/APNOMS.2016.7737238]
   Van Blarkom GW., 2003, The handbook of privacy and privacy enhancing technologies: the case of intelligent software agents
NR 42
TC 19
Z9 21
U1 0
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 987
EP 1018
DI 10.1007/s11219-020-09501-6
EA FEB 2020
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000517019000001
DA 2024-07-18
ER

PT J
AU Cavalcanti, A
   Simao, A
AF Cavalcanti, Ana
   Simao, Adenilso
TI Fault-based refinement-testing for CSP
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Formal testing; Process algebra; Test generation
AB The process algebra CSP has been studied as a notation for model-based testing. Theoretical and practical work has been developed using its trace and failure semantics, and their refinement notions as conformance relations. Two sets of tests have been defined and proved to be exhaustive, in the sense that they can identify any SUT that is non-conforming with respect to the relevant refinement relation. However, these sets are usually infinite, and in this case, it is obviously not possible to apply them to verify the conformity of an SUT. Some classical selection criteria based on models have been studied. In this paper, we propose a procedure for online test generation for selection of finite test sets for traces refinement from CSP models. It is based on the notion of fault domains, focusing on the set of faulty implementations of interest. We investigate scenarios where the verdict of a test campaign can be reached after a finite number of test executions. We illustrate the usage of the procedure with some case studies.
C1 [Cavalcanti, Ana] Univ York, York, N Yorkshire, England.
   [Simao, Adenilso] Univ Sao Paulo, Sao Paulo, Brazil.
C3 University of York - UK; Universidade de Sao Paulo
RP Cavalcanti, A (corresponding author), Univ York, York, N Yorkshire, England.
EM ana.cavalcanti@york.ac.uk; adenilso@icmc.usp.br
RI Simao, Adenilso S/E-9620-2011
OI Cavalcanti, Ana Lucia Caneca/0000-0002-0831-1976; Simao,
   Adenilso/0000-0002-1454-2607
FU Royal Society [NI150186]; FAPESP [2013/07375-0]; EPSRC [EP/M025756/1,
   EP/R025134/1]; Royal Academy of Engineering; EPSRC [EP/R025479/1,
   EP/M025756/1] Funding Source: UKRI
FX The authors would like to thank financial support from Royal Society
   (Grant NI150186), FAPESP (Grant 2013/07375-0), EPSRC (Grants
   EP/M025756/1 and EP/R025134/1), and the Royal Academy of Engineering.
CR Alberto A, 2017, INFORM SOFTWARE TECH, V81, P131, DOI 10.1016/j.infsof.2016.04.003
   Andrews Z, 2013, ANN IEEE SYST CONF, P356, DOI 10.1109/SysCon.2013.6549906
   Cavalcanti A., 2003, Formal Aspects of Computing, V15, P146, DOI 10.1007/s00165-003-0006-5
   Cavalcanti ALC, 1999, FORM ASP COMPUT, V10
   Cavalcanti A, 2007, LECT NOTES COMPUT SC, V4789, P151
   Cavalcanti A, 2017, LECT NOTES COMPUT SC, V10533, P21, DOI 10.1007/978-3-319-67549-7_2
   Cavalcanti A, 2014, LECT NOTES COMPUT SC, V8411, P415
   Cavalcanti A, 2015, THEOR COMPUT SCI, V563, P1, DOI 10.1016/j.tcs.2014.08.012
   Cavalcanti A, 2013, LECT NOTES COMPUT SC, V7793, P359, DOI 10.1007/978-3-642-37057-1_26
   Cavalcanti A, 2011, ACTA INFORM, V48, P97, DOI 10.1007/s00236-011-0133-z
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   El-Fakih KA, 2012, PROGRAM COMPUT SOFT+, V38, P201, DOI 10.1134/S0361768812040019
   FUJIWARA S, 1992, IFIP TRANS C, V3, P267
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Hierons RM, 2006, IEEE T COMPUT, V55, P618, DOI 10.1109/TC.2006.80
   Hierons RM, 2002, ACM T SOFTW ENG METH, V11, P427, DOI 10.1145/606612.606615
   Koufareva I, 1999, INT FED INFO PROC, V21, P217
   LUO G, 1994, IEEE T SOFTWARE ENG, V20, P149, DOI 10.1109/32.265636
   Milner A. J. R. G., 1980, CALCULUS COMMUNICATI, V92
   Moraes A, 2016, SCI COMPUT PROGRAM, V126, P52, DOI 10.1016/j.scico.2016.05.004
   MORELL LJ, 1990, IEEE T SOFTWARE ENG, V16, P844, DOI 10.1109/32.57623
   Morgan Carroll, 1994, Programming from specifications
   Mota Alexandre, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P235, DOI 10.1007/978-3-319-10431-7_17
   Nogueira S, 2014, FORM ASP COMPUT, V26, P441, DOI 10.1007/s00165-012-0258-z
   PELESKA J, 1996, LECT NOTES COMPUTER, V1051
   Petrenko A, 1996, COMPUT NETWORKS ISDN, V29, P81, DOI 10.1016/S0169-7552(96)00019-0
   Petrenko A., 2005, IEEE T COMPUTERS, V54
   PROBERT PJ, 1991, CONCURRENCY-PRACT EX, V3, P283, DOI 10.1002/cpe.4330030406
   Qin SC, 2003, LECT NOTES COMPUT SC, V2805, P321
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Schneider S., 2002, ZB 2002: Formal Specification and Development in Z and B. 2nd International Conference of B and Z Users. Proceedings (Lecture Notes in Computer Science Vol.2272), P416
   Schneider S, 2000, Concurrent and real-time systems
   Tretmans J., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P127
   Weiglhofer M., 2009, INT JU SOFTW INFORM, V3, P375
   Wen-ling Huang, 2013, Testing Software and Systems. 25th IFIP WG 6.1 International Conference, ICTSS 2013. Proceedings: LNCS 8254, P49, DOI 10.1007/978-3-642-41707-8_4
   Woodcock JCP., 1996, Using ZSpecification, refinement, and proof
   Yu YT, 2012, INFORM SOFTWARE TECH, V54, P179, DOI 10.1016/j.infsof.2011.09.005
NR 38
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 529
EP 562
DI 10.1007/s11219-018-9431-9
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500003
DA 2024-07-18
ER

PT J
AU Delgado-Pérez, P
   Rose, LM
   Medina-Bulo, I
AF Delgado-Perez, Pedro
   Rose, Louis M.
   Medina-Bulo, Inmaculada
TI Coverage-based quality metric of mutation operators for test suite
   improvement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Mutation testing; Quality metric; Test suite
   improvement; Test coverage
AB The choice of mutation operators is a fundamental aspect in mutation testing to guide the tester to an effective test suite. Designing a set of mutation operators is subject to a trade-off between effectiveness and computational cost: a larger mutation population might uncover more faults, but will take longer to analyse. With the aim of resolving this trade-off, several authors have defined an assortment of metrics to determine the most valuable operators. In this work, we extend an existing quality metric by incorporating an additional source of data and coverage information and therefore investigate the extent to which mutants that are often covered but rarely killed can improve the evaluation of mutation operators for the refinement of the test suite. As a case study, we analyse C++ class-level operators based on the new coverage-based quality metric to assess whether the original metric is enhanced. The results when selecting the best-valued operators show that this metric has great potential to help the tester in finding effective mutation operators. In comparison with the metric from which it is derived, the use of coverage data allows to reduce the number of mutants but often loses fewer test cases and, in addition, retains those that seem hard to design.
C1 [Delgado-Perez, Pedro; Medina-Bulo, Inmaculada] Univ Cadiz, Escuela Super Ingn, Campus Univ Puerto Real, Cadiz 11519, Spain.
   [Rose, Louis M.] Univ York, Dept Comp Sci, York, N Yorkshire, England.
C3 Universidad de Cadiz; University of York - UK
RP Delgado-Pérez, P (corresponding author), Univ Cadiz, Escuela Super Ingn, Campus Univ Puerto Real, Cadiz 11519, Spain.
EM pedro.delgado@uca.es; louis.rose@york.ac.uk; inmaculada.medina@uca.es
RI Medina-Bulo, Inmaculada/L-5523-2014; Delgado-Pérez, Pedro/N-4289-2018;
   Rose, Louis M/L-8892-2014
OI Medina-Bulo, Inmaculada/0000-0002-7543-2671; Delgado-Pérez,
   Pedro/0000-0003-1568-9288; 
FU Spanish Ministry of Economy and Competitiveness (National Program for
   Research, Development and Innovation), through the project DArDOS
   [TIN2015-65845-C3-3-R]; Excellence Network SEBASENet
   [TIN2015-71841-REDT]; University of Cadiz [PU-EPIF-FPI-PPI-BC 2012-037]
FX This paper was funded by the Spanish Ministry of Economy and
   Competitiveness (National Program for Research, Development and
   Innovation), through the project DArDOS (TIN2015-65845-C3-3-R
   (MINECO/FEDER)) and the Excellence Network SEBASENet
   (TIN2015-71841-REDT), and by the research scholarship PU-EPIF-FPI-PPI-BC
   2012-037 of the University of Cadiz.
CR Ahmed Z, 2010, INT CONF COMPUT AUTO, P614, DOI 10.1109/ICCAE.2010.5451692
   Ammann P, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P21, DOI 10.1109/ICST.2014.13
   [Anonymous], 2017, TINYXML2
   Banzi AS, 2012, EXPERT SYST APPL, V39, P12131, DOI 10.1016/j.eswa.2012.04.041
   Barbosa EF, 2001, SOFTW TEST VERIF REL, V11, P113, DOI 10.1002/stvr.226
   Delgado-Pérez P, 2017, SOFTW TEST VERIF REL, V27, DOI 10.1002/stvr.1630
   Delgado-Pérez P, 2017, INFORM SOFTWARE TECH, V81, P169, DOI 10.1016/j.infsof.2016.07.002
   Delgado-Pérez P, 2015, ANN TELECOMMUN, V70, P137, DOI 10.1007/s12243-014-0445-4
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Derezinska A, 2003, EUROMICRO CONF PROC, P417
   Derezinska A., 2007, ANN GDANSK U TECHNOL, V13, P389
   Derezinska A, 2006, INT CONF QUAL SOFTW, P227
   Derezinska A, 2014, IEEE ICST WORKSHOP, P156, DOI 10.1109/ICSTW.2014.24
   Derezinska A, 2012, LECT NOTES COMPUT SC, V7054, P229
   Derezinska A, 2012, LECT NOTES COMPUT SC, V7304, P42, DOI 10.1007/978-3-642-30561-0_5
   Estero-Botaro Antonia, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P142, DOI 10.1109/ICSTW.2010.36
   Estero-Botaro A, 2015, SOFTW TEST VERIF REL, V25, P536, DOI 10.1002/stvr.1528
   Gopinath R, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P216, DOI 10.1109/ISSRE.2015.7381815
   Inozemtseva L, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P435, DOI 10.1145/2568225.2568271
   Jingyu Hu, 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P334, DOI 10.1109/ICSTW.2011.47
   Just R, 2015, SOFTW TEST VERIF REL, V25, P490, DOI 10.1002/stvr.1561
   KMyMoney, 2017, KMYMONEY VERSION 4 6
   Kurtz B, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P571, DOI 10.1145/2950290.2950322
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Ma YS, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P352, DOI 10.1109/ISSRE.2002.1173287
   Ma YS, 2009, ETRI J, V31, P140, DOI 10.4218/etrij.09.0108.0356
   Matrix TCL Pro, 2017, MATR TCL PRO VERS 2
   Mresa E. S., 1999, SOFTW TEST VERIF REL, V9, P205, DOI DOI 10.1002/(SICI)1099-1689(199912)9:4
   MTTS, 2017, DOLPH CPAP
   Namin AS, 2015, SOFTW TEST VERIF REL, V25, P572, DOI 10.1002/stvr.1542
   Namin AS, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P351, DOI 10.1145/1368088.1368136
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   OFFUTT AJ, 1993, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.1993.346062
   Offutt J, 2011, INFORM SOFTWARE TECH, V53, P1098, DOI 10.1016/j.infsof.2011.03.007
   Papadakis M, 2014, SCI COMPUT PROGRAM, V95, P298, DOI 10.1016/j.scico.2014.05.012
   Papadakis M, 2011, SOFTWARE QUAL J, V19, P691, DOI 10.1007/s11219-011-9142-y
   QtDOM, 2017, QTDOM
   Mateo PR, 2015, SOFTW TEST VERIF REL, V25, P464, DOI 10.1002/stvr.1534
   Mateo PR, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P646, DOI 10.1109/ICSM.2012.6405344
   Schuler D, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P297, DOI 10.1145/1595696.1595750
   Segura S, 2011, INFORM SOFTWARE TECH, V53, P1124, DOI 10.1016/j.infsof.2011.03.006
   Smith BH, 2009, EMPIR SOFTW ENG, V14, P341, DOI 10.1007/s10664-008-9083-7
   Untch R. H., 1993, SIGSOFT Software Engineering Notes, V18, P139, DOI 10.1145/174146.154265
   Vincenzi A.M. R., 2006, J BRAZILIAN COMPUTER, V12, P49
   Wong W. E., 1993, REDUCING COST MUTATI
   XmlRPC, 2017, XMLRPC VERSION 0 7
   Yao XJ, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P919, DOI 10.1145/2568225.2568265
   Yue Jia, 2011, IEEE Transactions on Software Engineering, V37, P649, DOI 10.1109/TSE.2010.62
   Zhang L., 2012, Proceedings of the 2012 International Symposium on Software Testing and Analysis, ISSTA 2012, P331, DOI [10.1145/2338965.2336793, DOI 10.1145/2338965.2336793]
   Zheng H, 2010, 2ND IEEE INTERNATIONAL CONFERENCE ON ADVANCED COMPUTER CONTROL (ICACC 2010), VOL. 2, P431, DOI 10.1109/ICACC.2010.5486640
NR 50
TC 10
Z9 10
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 823
EP 859
DI 10.1007/s11219-018-9425-7
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500013
DA 2024-07-18
ER

PT J
AU Horváth, F
   Gergely, T
   Beszédes, A
   Tengeri, D
   Balogh, G
   Gyimóthy, T
AF Horvath, Ferenc
   Gergely, Tamas
   Beszedes, Arpad
   Tengeri, David
   Balogh, Gergo
   Gyimothy, Tibor
TI Code coverage differences of Java bytecode and source code
   instrumentation tools
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Code coverage; White-box testing; Java bytecode instrumentation; Source
   code instrumentation; Coverage tools; Empirical study
AB Many software testing fields, like white-box testing, test case generation, test prioritization, and fault localization, depend on code coverage measurement. If used as an overall completeness measure, the minor inaccuracies of coverage data reported by a tool do not matter that much; however, in certain situations, they can lead to serious confusion. For example, a code element that is falsely reported as covered can introduce false confidence in the test. This work investigates code coverage measurement issues for the Java programming language. For Java, the prevalent approach to code coverage measurement is using bytecode instrumentation due to its various benefits over source code instrumentation. As we have experienced, bytecode instrumentation-based code coverage tools produce different results than source code instrumentation-based ones in terms of the reported items as covered. We report on an empirical study to compare the code coverage results provided by tools using the different instrumentation types for Java coverage measurement on the method level. In particular, we want to find out how much a bytecode instrumentation approach is inaccurate compared to a source code instrumentation method. The differences are systematically investigated both in quantitative (how much the outputs differ) and in qualitative terms (what the causes for the differences are). In addition, the impact on test prioritization and test suite reduction-a possible application of coverage measurement-is investigated in more detail as well.
C1 [Horvath, Ferenc; Gergely, Tamas; Beszedes, Arpad; Tengeri, David; Gyimothy, Tibor] Univ Szeged, Dept Software Engn, Szeged, Hungary.
   [Balogh, Gergo; Gyimothy, Tibor] Univ Szeged, MTA SZTE Res Grp Artificial Intelligence, Szeged, Hungary.
C3 Szeged University; Szeged University
RP Horváth, F (corresponding author), Univ Szeged, Dept Software Engn, Szeged, Hungary.
EM hferenc@inf.u-szeged.hu; gertom@inf.u-szeged.hu;
   beszedes@inf.u-szeged.hu; dtengeri@inf.u-szeged.hu;
   geryxyz@inf.u-szeged.hu; gyimothy@inf.u-szeged.hu
RI Gergely, Tamás/ABA-7259-2021; Balogh, Gergő/ABA-7560-2021; Gyimothy,
   Tibor/M-3705-2018
OI Gergely, Tamás/0000-0001-7504-3580; Balogh, Gergő/0000-0002-6781-5453;
   Gyimothy, Tibor/0000-0002-2123-7387; Beszedes, Arpad/0000-0002-5421-9302
FU Janos Bolyai Research Scholarship of the Hungarian Academy of Sciences;
   EU [GINOP-2.3.2-15-2016-00037]
FX This work was partially supported by the Janos Bolyai Research
   Scholarship of the Hungarian Academy of Sciences and by the EU-funded
   Hungarian national grant GINOP-2.3.2-15-2016-00037 titled "Internet of
   Living Things." We are grateful to Semantic Designs, Inc. for providing
   a free research license for their tool.
CR Alemerien Khalid., 2014, INT J SOFTWARE ENG I, V8, P139
   [Anonymous], 1995, P 12 INT C TEST COMP
   Binder W., 2007, P 5 INT S PRINC PRAC, DOI DOI 10.1145/1294325.1294344
   Black R., 2012, FDN SOFTWARE TESTING
   Emanuelsson P, 2008, ELECTRON NOTES THEOR, V217, P5, DOI 10.1016/j.entcs.2008.06.039
   Fontana F. A., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P450, DOI 10.1109/ICSTW.2011.12
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Gonzalez-Sanchez A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P83, DOI 10.1109/ASE.2011.6100153
   Graves TL, 2001, ACM T SOFTW ENG METH, V10, P184, DOI 10.1145/367008.367020
   Harrold MJ, 1998, ACM SIGPLAN NOTICES, V33, P83, DOI 10.1145/277633.277647
   Inozemtseva L., 2014, P INT C SOFTW ENG
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Kajo-Mece E., 2012, BCI LOCAL, P72
   Kessis M., 2005, SEM 05, P39
   Li N, 2013, PROC INT SYMP SOFTW, P380, DOI 10.1109/ISSRE.2013.6698891
   Lingampally R., 2007, SYST SCI 2007 HICSS, p261b, DOI DOI 10.1109/HICSS.2007.24
   NTAFOS SC, 1988, IEEE T SOFTWARE ENG, V14, P868, DOI 10.1109/32.6165
   Ostrand T, 2002, ENCY SOFTWARE ENG
   Perez A., 2014, Proceedings of the 22nd International Conference on Program Comprehension, P37
   Pinto L.S., 2012, P ACM SIGSOFT 20 INT, P1
   Usaola MP, 2010, IEEE SOFTWARE, V27, P80, DOI 10.1109/MS.2010.79
   Raulamo-Jurvanen P., 2017, ACM SIGSOFT Software Engineering Notes, V41, P1, DOI [10.1145/3011286.3011304, DOI 10.1145/3011286.3011304]
   Rayadurgam S, 2001, EIGHTH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER BASED SYSTEMS, PROCEEDINGS, P83, DOI 10.1109/ECBS.2001.922409
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Rothermel G, 2002, SOFTW TEST VERIF REL, V12, P219, DOI 10.1002/stvr.256
   Tengeri D, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P225, DOI 10.1109/SANER.2016.61
   Tengeri D, 2014, IEEE INT WORK C SO, P47, DOI 10.1109/SCAM.2014.38
   Vidács L, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P204, DOI 10.1109/CSMR-WCRE.2014.6747172
   Yang Q, 2009, COMPUT J, V52, P589, DOI 10.1093/comjnl/bxm021
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yoo S., 2011, TECH REP
   Yoo S, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2491509.2491513
   Yue Jia, 2011, IEEE Transactions on Software Engineering, V37, P649, DOI 10.1109/TSE.2010.62
NR 33
TC 13
Z9 15
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 79
EP 123
DI 10.1007/s11219-017-9389-z
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000003
DA 2024-07-18
ER

PT J
AU Bertolino, A
   Calabro', A
   Di Giandomenico, F
   Lami, G
   Lonetti, F
   Marchetti, E
   Martinelli, F
   Matteucci, I
   Mori, P
AF Bertolino, Antonia
   Calabro', Antonello
   Di Giandomenico, Felicita
   Lami, Giuseppe
   Lonetti, Francesca
   Marchetti, Eda
   Martinelli, Fabio
   Matteucci, Ilaria
   Mori, Paolo
TI A tour of secure software engineering solutions for connected vehicles
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Connected vehicles; Security by design; Automotive systems; Software
   process development; Tool-chain
ID EMBEDDED SYSTEMS; ANNOUNCEMENT; ARCHITECTURE; INDUSTRY; VANETS; DESIGN;
   SAFETY
AB The growing number of vehicles daily moving on roads increases the need of protecting the safety and security of passengers, pedestrians, and vehicles themselves. This need is intensified when considering the pervasive introduction of Information and Communication Technologies (ICT) systems into modern vehicles, because this makes such vehicles potentially vulnerable from the point of view of security. The convergence of safety and security requirements is one of the main outstanding research challenges in software-intensive systems. This work reviews existing methodologies and solutions addressing security issues in the automotive domain with a focus on the integration between safety and security aspects. In particular, we identify the main security issues with vehicular communication technologies and existing gaps between state-of-the-art methodologies and their implementation in the real world. Starting from a literature survey and referring to widely accepted standards of the domain, such as AUTOSAR and ISO 26262, we discuss research challenges and set baselines for a holistic secure-by-design approach targeting safety and security aspects all along the different phases of the development process of automotive software.
C1 [Bertolino, Antonia; Calabro', Antonello; Di Giandomenico, Felicita; Lami, Giuseppe; Lonetti, Francesca; Marchetti, Eda] CNR, Ist Sci & Tecnol Informaz A Faedo, Via G Moruzzi 1, I-56124 Pisa, Italy.
   [Martinelli, Fabio; Matteucci, Ilaria; Mori, Paolo] CNR, Ist Informat & Telemat, Via G Moruzzi 1, I-56124 Pisa, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); Consiglio
   Nazionale delle Ricerche (CNR); Istituto di Informatica e Telematica
   (IIT-CNR)
RP Bertolino, A (corresponding author), CNR, Ist Sci & Tecnol Informaz A Faedo, Via G Moruzzi 1, I-56124 Pisa, Italy.
EM antonia.bertolino@isti.cnr.it; antonello.calabro@isti.cnr.it;
   felicita.digiandomenico@isti.cnr.it; giuseppe.lami@isti.cnr.it;
   francesca.lonetti@isti.cnr.it; eda.marchetti@isti.cnr.it;
   fabio.martinelli@iit.cnr.it; ilaria.matteucci@iit.cnr.it;
   paolo.mori@iit.cnr.it
RI Matteucci, Ilaria/AAX-2028-2020; mori, paolo/AAX-9974-2020; Bertolino,
   Antonia/ABD-6837-2020; Calabrò, Antonello/AAX-1028-2020; Matteucci,
   Ilaria/AAY-4767-2020; MARCHETTI, EDA/AAW-6509-2020; Lonetti,
   Francesca/AAM-5813-2021; Di Giandomenico, Felicita/AAY-7572-2020
OI Matteucci, Ilaria/0000-0002-5936-8470; Bertolino,
   Antonia/0000-0001-8749-1356; Calabrò, Antonello/0000-0001-5502-303X;
   MARCHETTI, EDA/0000-0003-4223-8036; Lonetti,
   Francesca/0000-0002-4864-2219; Mori, Paolo/0000-0002-6618-0388; LAMI,
   GIUSEPPE/0000-0003-2960-5241
FU GAUSS national research project (MIUR) [2015KWREMX]
FX This work has been partially supported by the GAUSS national research
   project (MIUR, PRIN 2015, Contract 2015KWREMX).
CR Adelard LLP, 2016, ASCE ASS SAF CAS ENV
   Administration N. H. T. S, 2005, S09S DOT HS
   Albinet A., 2008, 4 EUR C ERTS EMB REA
   Almefelt L, 2006, RES ENG DES, V17, P113, DOI 10.1007/s00163-006-0023-5
   [Anonymous], 2014, P 9 ANN CYBER INFORM
   [Anonymous], 2016, 1609 IEEE
   [Anonymous], 2006, P IST MOB WIR COMM S
   [Anonymous], 2016, 61508 IEC
   [Anonymous], 2013, Dependable Systems and Networks Workshop (DSN-W), 2013 43rd Annual IEEE/IFIP Conference on
   [Anonymous], 2010, CSIIRW
   [Anonymous], 2004, INT COMPUTER SCI SER
   ARTEMIS, 2016, JU CHESS PROJ
   ARTEMIS, 2016, SESAMO SEC SAF MOD
   Automotive S, 2010, AUT SPIC PROC REF MO
   Automotive S, 2010, AUT SPIC PROC ASS MO
   AUTOMOTIVE SPIN, 2016, 13 AUT SPIN IT WORKS
   AUTOSAR, 2016, AUTOMOTIVE OP SYST A
   Basin D., 2011, P 16 ACM S ACCESS CO, P1, DOI DOI 10.1145/1998441.1998443
   Becker B, 2010, LECT NOTES COMPUT SC, V6002, P83
   Berry G, 2000, SCI COMPUT PROGRAM, V36, P5, DOI 10.1016/S0167-6423(99)00015-5
   Bertolino A., 2014, ENG SECURE FUTURE IN, P266, DOI [10.1007/978-3-319-07452-8_11, DOI 10.1007/978-3-319-07452-8_11]
   Biehl M, 2010, ACM SIGPLAN NOTICES, V45, P125, DOI 10.1145/1755951.1755907
   Brooks RR, 2009, IEEE VEH TECHNOL MAG, V4, P53, DOI 10.1109/MVT.2009.932539
   Broy M., 2006, 28th International Conference on Software Engineering Proceedings, P33, DOI 10.1145/1134285.1134292
   Broy M, 2007, P IEEE, V95, P356, DOI 10.1109/JPROC.2006.888386
   Burton S., 2012, Proceedings of the First International Conference on Security of Internet of Things, SecurIT'12, P150, DOI DOI 10.1145/2490428
   Checkoway D., 2011, P USENIX SEC S SAN F, P6
   Chen LQ, 2011, IEEE J SEL AREA COMM, V29, P605, DOI 10.1109/JSAC.2011.110310
   Chou CM, 2009, MDM: 2009 10TH INTERNATIONAL CONFERENCE ON MOBILE DATA MANAGEMENT, P397, DOI 10.1109/MDM.2009.127
   Conrad M, 2013, MODEL BASED DESIGN U, P159
   Conrad Mirko., 2012, Em- bedded Real Time Software and Systems (ERTS2 2012)
   Cuenot P, 2010, LECT NOTES COMPUT SC, V6100, P297, DOI 10.1007/978-3-642-16277-0_11
   Danlaw Inc, 2016, MX SUIT
   dSPACE, 2016, TARGETLINK COD GEN
   EVITA, 2016, E SAF VEH INTR PROT
   FP-7, 2016, RAS COMP RISK ASS SE
   FP-7, 2016, NESSOS NETW EXC ENG
   Glas B., 2015, AUTOMOTIVE SAFETY SE
   Heisel M., 2014, ENG SECURE FUTURE IN
   Henniger O, 2009, P 9 INT C INT TRANSP
   Heumesser N, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P322
   HiP-HOPS, 2016, HIER PERF HAZ OR PRO
   Holtmann J., 2011, Software Engineering 2011 - Workshopband, P79
   IET, I ENG TECHN AUT CYB
   ikv++ Technologies, 2016, MED AN
   Intecs SpA, 2016, DIANA
   ISO, 2016, 26262 ISO
   ISO/IEC, 2016, 1540812009 ISOIEC
   ISO/IEC, 2016, 2703422015 ISOIEC
   ISO/IEC, 2016, 964671995 ISOIEC
   ITEA, 2016, DIAMONDS DEV IND APP
   Izerrouken N., 2010, Proceedings of the 1st Workshop on Critical Automotive applications: Robustness Safety, P53
   Kaur M., 2012, ADV COMPUTING INFORM, P757
   Koscher K, 2010, P IEEE S SECUR PRIV, P447, DOI 10.1109/SP.2010.34
   Kounga G, 2009, IEEE T VEH TECHNOL, V58, P2977, DOI 10.1109/TVT.2008.2010325
   Leinmuller Tim., 2010, Proceedings of 17th ITS World Congress, P1
   Lindlar Felix, 2008, 2008 6th IEEE International Conference on Industrial Informatics (INDIN), P1539, DOI 10.1109/INDIN.2008.4618349
   Macher G, 2015, ELEKTROTECH INFORMAT, V132, P142, DOI 10.1007/s00502-015-0301-x
   Malip A, 2014, SECUR COMMUN NETW, V7, P588, DOI 10.1002/sec.760
   MathWorks, 2016, EMB COD
   MathWorks, 2016, SIM SIM MOD BAS DES
   Miller C., 2014, SURVEY REMOTE AUTOMO
   Navet Nicolas., 2013, Industrial Communication Technology Handbook, V96, P1204
   Nolte T., 2005, 10th IEEE International Conference on Emerging Technologies and Factory Automation
   OMG, 2016, UML PROF MARTE MOD A
   OMG, 2016, SYST MOD LANG
   Open Garages, 2016, CAR HACK 2014 OWN MA
   Papadimitratos P, 2008, IEEE COMMUN MAG, V46, P100, DOI 10.1109/MCOM.2008.4689252
   Popov Peter, 2011, Software Engineering for Resilient Systems. Proceedings Third International Workshop (SERENE 2011), P1, DOI 10.1007/978-3-642-24124-6_1
   Prasad KV, 2010, P IEEE, V98, P510, DOI 10.1109/JPROC.2010.2041835
   Pretschner A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P55, DOI 10.1109/FOSE.2007.22
   Razzaque M., 2013, SECURITY PRIVACY VEH, P107, DOI DOI 10.1007/978-3-642-36169-2_4
   Sagstetter F, 2013, DES AUT TEST EUROPE, P458
   Schroeder J, 2015, 2015 FIRST INTERNATIONAL WORKSHOP ON AUTOMOTIVE SOFTWARE ARCHITECTURE (WASA), P39, DOI 10.1145/2752489.2752497
   Sikora E, 2012, REQUIR ENG, V17, P57, DOI 10.1007/s00766-011-0144-x
   Sporer H, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P177, DOI 10.1109/SEAA.2015.65
   Toeppe S., 1999, Proceedings of the 1999 IEEE International Symposium on Computer Aided Control System Design (Cat. No.99TH8404), P200, DOI 10.1109/CACSD.1999.808648
   Toom A., 2010, P 5 INT C EXH ERTS2
   TTCN-3, 2016, TEST TEST CONTR NOT
   Voget S, 2010, DES AUT TEST EUROPE, P259
   Wiedersheim B, 2009, ITST: 2009 9TH INTERNATIONAL CONFERENCE ON INTELLIGENT TRANSPORT SYSTEMS TELECOMMUNICATIONS, P658, DOI 10.1109/ITST.2009.5399274
   Wolff C., 2015, Project Management Development - Practice and Perspectives, V04, P432
NR 82
TC 8
Z9 10
U1 0
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1223
EP 1256
DI 10.1007/s11219-017-9393-3
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400002
DA 2024-07-18
ER

PT J
AU Miranda, B
   Bertolino, A
AF Miranda, Breno
   Bertolino, Antonia
TI An assessment of operational coverage as both an adequacy and a
   selection criterion for operational profile based testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Coverage testing; Operational coverage; Operational profile-based
   testing; Program Spectra; Relative coverage
ID SOFTWARE; RELIABILITY; STRATEGIES; SPECTRA
AB While the relation between code coverage measures and fault detection is actively studied, only few works have investigated the correlation between measures of coverage and of reliability. In this work, we introduce a novel approach to measuring code coverage, called the operational coverage, that takes into account how much the program's entities are exercised so to reflect the profile of usage into the measure of coverage. Operational coverage is proposed as (i) an adequacy criterion, i.e., to assess the thoroughness of a black box test suite derived from the operational profile, and as (ii) a selection criterion, i.e., to select test cases for operational profile-based testing. Our empirical evaluation showed that operational coverage is better correlated than traditional coverage with the probability that the next test case derived according to the user's profile will not fail. This result suggests that our approach could provide a good stopping rule for operational profile-based testing. With respect to test case selection, our investigations revealed that operational coverage outperformed the traditional one in terms of test suite size and fault detection capability when we look at the average results.
C1 [Miranda, Breno] Univ Fed Pernambuco, BR-50740540 Recife, PE, Brazil.
   [Miranda, Breno; Bertolino, Antonia] CNR, ISTI, Via Moruzzi 1, I-56124 Pisa, Italy.
C3 Universidade Federal de Pernambuco; Consiglio Nazionale delle Ricerche
   (CNR); Istituto di Scienza e Tecnologie dell'Informazione "Alessandro
   Faedo" (ISTI-CNR)
RP Miranda, B (corresponding author), Univ Fed Pernambuco, BR-50740540 Recife, PE, Brazil.; Miranda, B (corresponding author), CNR, ISTI, Via Moruzzi 1, I-56124 Pisa, Italy.
EM bafm@cin.ufpe.br; antonia.bertolino@isti.cnr.it
RI Bertolino, Antonia/ABD-6837-2020; Miranda, Breno/S-1248-2018
OI Bertolino, Antonia/0000-0001-8749-1356; Miranda,
   Breno/0000-0001-9608-9393
FU European Project ElasTest in the Horizon 2020 research and innovation
   program [731535]; MIUR National Project GAUSS under the PRIN 2015
   program [2015KWREMX]; CAPES (Coordination for the Improvement of Higher
   Education Personnel) [APQ-0826-1.03/16, BCT-0204-1.03/17]; FACEPE
   (Foundation for Science and Technology Development of the State of
   Pernambuco) [APQ-0826-1.03/16, BCT-0204-1.03/17]; H2020 - Industrial
   Leadership [731535] Funding Source: H2020 - Industrial Leadership
FX This research has been partly funded by the European Project ElasTest in
   the Horizon 2020 research and innovation program under Grant Agreement
   No. 731535, and by the MIUR National Project GAUSS under the PRIN 2015
   program (Contract 2015KWREMX). Breno Miranda wishes to thank the
   postdoctoral fellowship jointly sponsored by CAPES (Coordination for the
   Improvement of Higher Education Personnel) and FACEPE (Foundation for
   Science and Technology Development of the State of Pernambuco)
   (APQ-0826-1.03/16; BCT-0204-1.03/17).
CR Ammann P., 2016, INTRO SOFTWARE TESTI, DOI [10.1017/9781316771273, DOI 10.1017/9781316771273]
   [Anonymous], 1996, HDB SOFTWARE RELIABI
   Ball T., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P134, DOI 10.1145/268946.268958
   Bartolini C, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P161, DOI 10.1145/1595696.1595721
   BASILI VR, 1987, IEEE T SOFTWARE ENG, V13, P1278, DOI 10.1109/TSE.1987.232881
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Bertolino A, 2017, PROC INT CONF SOFTW, P541, DOI 10.1109/ICSE.2017.56
   DelFrate F, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P124, DOI 10.1109/ISSRE.1995.497650
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Elbaum S, 2005, IEEE T SOFTWARE ENG, V31, P312, DOI 10.1109/TSE.2005.50
   Erdogan G, 2014, INT J SOFTW TOOLS TE, V16, P627, DOI 10.1007/s10009-014-0330-5
   Felderer M, 2014, SOFTWARE QUAL J, V22, P543, DOI 10.1007/s11219-013-9226-y
   Frankl PG, 1998, IEEE T SOFTWARE ENG, V24, P586, DOI 10.1109/32.707695
   Gopinath R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P72, DOI 10.1145/2568225.2568278
   Harder M, 2003, PROC INT CONF SOFTW, P60, DOI 10.1109/ICSE.2003.1201188
   Harrold MJ, 1998, ACM SIGPLAN NOTICES, V33, P83, DOI 10.1145/277633.277647
   Inozemtseva L, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P435, DOI 10.1145/2568225.2568271
   Jin Wei., 2013, P 2013 INT S SOFTWAR, P213, DOI DOI 10.1145/2483760.2483763
   Kochhar PS, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P560, DOI 10.1109/SANER.2015.7081877
   Marick B., 1999, Proceedings of the 16th Interational Conference on Testing Computer Software, P16
   Miranda B, 2017, J SYST SOFTWARE, V131, P528, DOI 10.1016/j.jss.2016.06.058
   Miranda B, 2016, 2016 IEEE/ACM 11TH INTERNATIONAL WORKSHOP IN AUTOMATION OF SOFTWARE TEST (AST), P22, DOI [10.1145/2896921.2896934, 10.1109/AST.2016.012]
   Miranda B, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P27, DOI 10.1109/SEAA.2015.69
   Miranda Breno., 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, ASE'14, P899, DOI [10. 1145/2642937. 2653471, DOI 10.1145/2642937.2653471]
   Miranda Breno, 2016, THESIS
   Miranda Breno., 2014, 9th International Workshop on Automation of Software Test (AST), P22
   MUSA JD, 1993, IEEE SOFTWARE, V10, P14, DOI 10.1109/52.199724
   Orso A., 2003, Software Engineering Notes, V28, P128, DOI 10.1145/949952.940089
   Orso A., 2002, Software Engineering Notes, V27, P65, DOI 10.1145/566171.566182
   Orso Alessandro., 2010, P FSESDP WORKSHOP FU, P263
   Staats M, 2012, LECT NOTES COMPUT SC, V7212, P409, DOI 10.1007/978-3-642-28872-2_28
   VOAS J, 1991, IEEE SOFTWARE, V8, P41, DOI 10.1109/52.73748
   Wei Y, 2012, LECT NOTES COMPUT SC, V7007, P194
   Wong W. E., 1994, Proceedings. 5th International Symposium on Software Reliability Engineering (Cat. No.94TH8017), P230, DOI 10.1109/ISSRE.1994.341379
   Wong WE, 2016, IEEE T SOFTWARE ENG, V42, P707, DOI 10.1109/TSE.2016.2521368
   Xie T, 2005, IEEE T SOFTWARE ENG, V31, P869, DOI 10.1109/TSE.2005.107
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 37
TC 11
Z9 11
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1571
EP 1594
DI 10.1007/s11219-017-9388-0
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400013
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Ciccozzi, F
   Feljan, J
   Carlson, J
   Crnkovic, I
AF Ciccozzi, Federico
   Feljan, Juraj
   Carlson, Jan
   Crnkovic, Ivica
TI Architecture optimization: speed or accuracy? both!
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Architecture optimization; Software quality; Model-driven engineering;
   Model transformations; Back-propagation; Execution; Monitoring;
   Multicore; Embedded systems
AB Embedded systems are becoming more and more complex, thus demanding innovative means to tame their challenging development. Among others, early architecture optimization represents a crucial activity in the development of embedded systems to maximise the usage of their limited resources and to respect their real-time requirements. Typically, architecture optimization seeks good architecture candidates based on model-based analysis. Leveraging abstractions and estimates, this analysis usually produces approximations useful for comparing architecture candidates. Nonetheless, approximations do not provide enough accuracy in estimating crucial extra-functional properties. In this article, we provide an architecture optimization framework that profits from both the speed of model-based predictions and the accuracy of execution-based measurements. Model-based optimization rapidly finds a good architecture candidate, which is refined through optimization based on monitored executions of automatically generated code. Moreover, the framework enables the developer to leverage her optimization experience. More specifically, the developer can use runtime monitoring of generated code execution to manually adjust task allocation at modeling level, and commit the changes without halting execution. In the article, our architecture optimization mechanism is first described from a general point of view and then exploited for optimizing the allocation of software tasks to the processing cores of a multicore embedded system; we target extra-functional properties that can be concretely represented and automatically compared for different architectural alternatives (such as memory consumption, energy consumption, or response-time).
C1 [Ciccozzi, Federico; Feljan, Juraj; Carlson, Jan; Crnkovic, Ivica] Malardalen Univ, Sch Innovat Design & Engn, Box 883, S-72123 Vasteras, Sweden.
C3 Malardalen University
RP Ciccozzi, F (corresponding author), Malardalen Univ, Sch Innovat Design & Engn, Box 883, S-72123 Vasteras, Sweden.
EM federico.ciccozzi@mdh.se; juraj.feljan@mdh.se; jan.carlson@mdh.se;
   ivica.crnkovic@mdh.se
RI Carlson, Jan/D-4717-2012
OI ciccozzi, federico/0000-0002-0401-1036; Ivica,
   Crnkovic/0000-0002-5278-755X
FU Swedish Foundation for Strategic Research [IIS11-0060]; Knowledge
   Foundation [20140051, 20140218]; Swedish Foundation for Strategic
   Research (SSF) [IIS11-0060] Funding Source: Swedish Foundation for
   Strategic Research (SSF)
FX This work was supported by the Swedish Foundation for Strategic Research
   via the Ralf 3 project (IIS11-0060) and by the Knowledge Foundation
   through the projects SMARTCore (20140051) and ORION (20140218).
CR Aleti A., 2013, IEEE T SOFTWARE ENG
   [Anonymous], 2003, Eclipse Modeling Framework
   Bondarev E, 2005, EUROMICRO-SEAA 2005: 31ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P36
   Bucaioni A., 2015, INT WORKSH MOD AUT S
   Chapman R., 2006, P SCS
   Chodrow S. E., 1991, REAL TIM SYST S RTSS
   Ciccozzi F., 2013, P CBSE
   Ciccozzi F., 2014, P WATERS
   Ciccozzi F, 2013, INFORM SOFTWARE TECH, V55, P1085, DOI 10.1016/j.infsof.2012.07.014
   Czarnecki K., 2003, P OOPSLA
   Diaconescu A., 2005, 20 IEEE ACM INT C AU
   Feljan J., 2014, 40 EUR SOFTW ENG ADV
   Feljan J., 2015, 41 EUR SOFTW ENG ADV
   Feljan J, 2012, EUROMICRO CONF PROC, P117, DOI 10.1109/SEAA.2012.56
   Fredriksson J, 2005, LECT NOTES COMPUT SC, V3489, P49
   Gerard S., 2007, INT DAGST C MOD BAS, P361, DOI [DOI 10.1007/978-3-642-16277-019, 10.1007/978-3-642-16277-0\_19, DOI 10.1007/978-3-642-16277-0, DOI 10.1007/978-3-642-16277-0_19]
   Grunske L, 2007, LECT NOTES COMPUT SC, V4615, P188
   Huselius J, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P52, DOI 10.1109/CSMR.2005.39
   Intel, 2014, INT COR 2 DUO E6700
   Islam S., 2006, 9 IEEE INT S OBJ COM
   Johnson David S, 1973, THESIS, P6
   Kent S., 2002, 3 INT C INT FORM MET
   Koziolek H., 2010, PERFORMANCE EVALUATI
   Martens A, 2009, ELECTRON NOTES THEOR, V253, P77, DOI 10.1016/j.entcs.2009.09.029
   Medvidovic N., 2007, ESSPE '07 International workshop on Engineering of software services for pervasive environments: in conjunction with the 6th ESEC/FSE joint meeting, P47, DOI [10.1145/1294904.1294911, DOI 10.1145/1294904.1294911]
   Mos A., 2002, 3 INT WORKSH SOFTW P
   Moyer B., 2013, REAL WORLD MULTICORE
   OMG, 2014, UML PROF MARTE MOD A
   Opengroup, 2013, POSIX
   Parsons T., 2008, DETECTING PERFORMANC
   RT-linux, 2014, PREEMPT RT PATCH 201
   Saadatmand M., 2012, 4 INT C ENG SEC SOFT
   Sailer A, 2013, APPLIED ELECTRONICS, P247
   Sharma VS, 2005, LECT NOTES COMPUT SC, V3489, P66
   Wall A., 2003, 9 IEEE INT C EMB REA
   Xtend, 2014, XTEND PROGR LANG 201
   Zhu Q, 2012, ACM T EMBED COMPUT S, V11, DOI 10.1145/2362336.2362352
NR 37
TC 2
Z9 2
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 661
EP 684
DI 10.1007/s11219-016-9343-5
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200017
OA hybrid
DA 2024-07-18
ER

PT J
AU Vilkomir, S
AF Vilkomir, Sergiy
TI Multi-device coverage testing of mobile applications
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mobile testing; Device-specific faults; Android; Device selection
AB This paper evaluates the effectiveness of coverage approaches for selecting mobile devices (i.e., smartphones and tablets) to test mobile software applications. Due to the large number of such devices on the market and the variations in their characteristics, it is hard to guarantee that an application will work as intended on all devices. For this reason, multi-device testing is necessary. The goal of this research was to determine how many devices must be tested and which methods for device selection are best for revealing device-specific faults. We experimentally investigated a simple coverage of all values of each device's features separately and the each-choice coverage (i.e., the coverage of all device characteristics at the same time). To collect the experimental data, 15 Android applications were tested on 30 mobile devices and 24 device-specific faults were detected. Our research shows that a random selection of 13 devices achieved 100% effectiveness. However, coverage of device characteristics in the selection process yielded an acceptable 90% level of effectiveness with a set of only five devices. The most successful approaches were the coverage of different types of Android operating systems and the each-choice coverage. Our results include recommendations for increasing the effectiveness while decreasing the costs of mobile testing.
C1 [Vilkomir, Sergiy] East Carolina Univ, Dept Comp Sci, Greenville, NC 27858 USA.
C3 University of North Carolina; East Carolina University
RP Vilkomir, S (corresponding author), East Carolina Univ, Dept Comp Sci, Greenville, NC 27858 USA.
EM vilkomirs@ecu.edu
CR [Anonymous], 2015, ANDR FRAGM VIS
   [Anonymous], 2016, SILK MOBILE
   [Anonymous], 2016, ADOBE EDGE INSPECT
   Barksdale M., 2014, MOBILE PLATFORM FRAG
   Cutler K., 2012, DO TOP ANDROID DEV Q
   Dan Han, 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P83, DOI 10.1109/WCRE.2012.18
   Duggan M., 2013, CELL PHONE ACTIVITIE
   Gao J, 2014, COMPUTER, V47, P46, DOI 10.1109/MC.2013.445
   Grindal M, 2005, SOFTW TEST VERIF REL, V15, P167, DOI 10.1002/stvr.319
   Jun-fei Huang, 2014, 2014 2nd IEEE International Conference on Mobile Cloud Computing, Services and Engineering (MobileCloud), P85, DOI 10.1109/MobileCloud.2014.13
   Keynote Mobile Testing, 2016, KEYNOTE MOBILE TESTI
   Kuhn Rick, 2008, IT Professional, V10, P19, DOI 10.1109/MITP.2008.54
   Moore M. F., 2016, P 28 INT C SOFTW ENG
   Muccini H., 2012, P 7 IEEE ACM INT WOR
   Park J.H., 2013, P INT C INF SCI APPL
   Perez S., 2015, Consumers Spend 85% Of Time On Smartphones In Apps, But Only 5 Apps See Heavy Use
   Richard Kuhn D., 2013, Introduction to combinatorial testing
   Starov Oleksii, 2013, ICSOFT 2013. Proceedings of the 8th International Joint Conference on Software Technologies, P124
   Starov O., 2013, P 8 INT WORKSH AUT S
   Tao Chuanqi., 2014, Proceedings of the 2014 Workshop on Joining AcadeMiA and Industry Contributions to Test Automation and Model-Based Testing, P28
   Vilkomir S, 2015, 2ND ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS MOBILESOFT 2015, P44, DOI 10.1109/MobileSoft.2015.12
   Vilkomir S, 2014, IEEE ICST WORKSHOP, P78, DOI 10.1109/ICSTW.2014.9
   Zhang T, 2015, 9TH IEEE INTERNATIONAL SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING (SOSE 2015), P179, DOI 10.1109/SOSE.2015.35
NR 23
TC 12
Z9 13
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 197
EP 215
DI 10.1007/s11219-017-9357-7
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200001
DA 2024-07-18
ER

PT J
AU Ding, JH
   Hu, XH
AF Ding, Junhua
   Hu, Xin-Hua
TI Application of metamorphic testing monitored by test adequacy in a Monte
   Carlo simulation program
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Oracle problem; Metamorphic testing; Metamorphic relation; Test coverage
   criterion; Mutation testing; Monte Carlo method
ID TEST COVERAGE; METHODOLOGY; SOFTWARE
AB One of the grand challenges for adequately testing complex software is due to the oracle problem. Metamorphic Testing (MT) is a promising technique to alleviate the oracle problem through using one or multiple Metamorphic Relations (MRs) as test oracles. MT checks the satisfaction of every MR among the outputs of the MR-related tests instead of the correctness of individual test outputs. In practice, it is fairly easy to find MRs for testing any program, but it is very difficult to develop "good" MRs and evaluate their adequacy. A systematic approach for developing MRs and evaluating their adequacy in MT remains to be developed. In this paper, we propose a framework for evaluating MT and iteratively developing adequate MRs monitored by MT adequacy evaluation. The MT adequacy is measured by program coverages, mutation testing, and testing MRs with mutation tests. The MT evaluation results are used for guiding the iterative development of MRs, generating tests, and analyzing test outputs. We explain the framework through a testing example on an image processing program that is used for building the 3-dimensional structure of a biology cell based on its confocal image sections. In order to demonstrate the effectiveness of the proposed framework, we reported a case study of testing a complex scientific program: a Monte Carlo modeling program that simulates photon propagations in turbid tissue phantoms for accurate and efficient generation of reflectance images from biological tissues. The case study has shown the effectiveness of proposed MT framework for testing scientific software in general and the necessity of the MT enhancement in the development of adequate MRs. The case study results can be easily adapted for testing other software.
C1 [Ding, Junhua] East Carolina Univ, Dept Comp Sci, Greenville, NC 27858 USA.
   [Hu, Xin-Hua] East Carolina Univ, Dept Phys, Greenville, NC USA.
C3 University of North Carolina; East Carolina University; University of
   North Carolina; East Carolina University
RP Ding, JH (corresponding author), East Carolina Univ, Dept Comp Sci, Greenville, NC 27858 USA.
EM dingj@ecu.edu
RI Mensah, Nicholas Oppong/JQI-3804-2023; Hu, xinyue/JUF-1461-2023; Hu,
   Xin/JEP-4891-2023
FU National Science Foundation [1262933, 1560037]; Division of Computing
   and Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1262933] Funding Source: National Science Foundation
FX We thank Dr. Tong Wu for his implementation and testing of the Monte
   Carlo simulation program. This research is supported in part by Grant
   #1262933 and #1560037 from the National Science Foundation.
CR [Anonymous], 1998, HKUSTCS9801
   [Anonymous], J SOFTWARE TESTING V
   [Anonymous], 2007, Software testing and analysis-process, principles and techniques
   [Anonymous], THESIS
   Arridge SR, 1999, INVERSE PROBL, V15, pR41, DOI 10.1088/0266-5611/15/2/022
   Asrafi M., 2011, Proceedings of the 2011 Fifth International Conference on Secure Software Integration and Reliability Improvement (SSIRI 2011), P147, DOI 10.1109/SSIRI.2011.21
   Baresi L., 2001, CISTR0102 DEP COMP I
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Chan WK, 2007, INT J WEB SERV RES, V4, P61, DOI 10.4018/jwsr.2007040103
   Chen C, 2007, MED PHYS, V34, P2939, DOI 10.1118/1.2745241
   Chen T. Y., 2002, Software Engineering Notes, V27, P191, DOI 10.1145/566171.566202
   Chen T.Y., 2004, PROC 4 IBERO AM S SO, P569
   Chen TY, 2016, J SYST SOFTWARE, V116, P177, DOI 10.1016/j.jss.2015.07.037
   Chen TY, 2009, BMC BIOINFORMATICS, V10, DOI 10.1186/1471-2105-10-24
   Chen TY, 2002, P INT COMP SOFTW APP, P327, DOI 10.1109/CMPSAC.2002.1045022
   Ding J., 2016, 1 WORKSH MET TEST IC
   Ding J., 2016, 28 SEKE SEKE 2016
   Ding JH, 2009, INFORM SOFTWARE TECH, V51, P1520, DOI 10.1016/j.infsof.2009.06.014
   Farrell PE, 2011, GEOSCI MODEL DEV, V4, P435, DOI 10.5194/gmd-4-435-2011
   Gotlieb A., 1998, Software Engineering Notes, V23, P53, DOI 10.1145/271775.271790
   Gotlieb A, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P34, DOI 10.1109/CMPSAC.2003.1245319
   Guderlei R, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P404
   Hu P., 2006, Proc. of the 3rd International Workshop on Software Quality Assurance, P6
   Hu X., 2010, 4 IEEE INT C SEC SOF
   Jameel Tahir, 2015, P 16 IEEE ACIS INT C, P1
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Kanewala U, 2014, INFORM SOFTWARE TECH, V56, P1219, DOI 10.1016/j.infsof.2014.05.006
   KEIJZER M, 1989, LASER SURG MED, V9, P148, DOI 10.1002/lsm.1900090210
   Kelly Diane, 2008, P 3 ANN C ASS SOFTWA, P30
   Lindvall M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P129, DOI 10.1109/ICSE.2015.348
   Liu H, 2014, IEEE T SOFTWARE ENG, V40, P4, DOI 10.1109/TSE.2013.46
   Mayer J., 2005, Software Engineering 2005, Fachtagung des GI-Fachbereichs Softwaretechnik, P69
   Mayer J, 2006, INT CONF QUAL SOFTW, P85
   Mayer J, 2006, P INT COMP SOFTW APP, P475
   Murphy C., 2009, P 2 IEEE INT C SOFTW
   Murphy C., 2009, P 2009 ACM INT S SOF
   Murphy C., 2008, 20 INT C SOFTWARE EN, P867
   Nguyen-Hoan L., 2010, 2010 ACM INT S EMP S
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Obayashi M., 1998, ASSERTION BASED TEST
   Pacheco P., 1996, Parallel Programming with MPI
   Segura S, 2016, IEEE T SOFTWARE ENG, V42, P805, DOI 10.1109/TSE.2016.2532875
   Shan L., 2009, COMPUTER J, V52
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   WEYUKER EJ, 1982, COMPUT J, V25, P465, DOI 10.1093/comjnl/25.4.465
   Xie XY, 2011, J SYST SOFTWARE, V84, P544, DOI 10.1016/j.jss.2010.11.920
   Zhang Zhen-Yu, 2009, Journal of Software, V20, P2637, DOI 10.3724/SP.J.1001.2009.00578
   Zhou ZQ, 2016, IEEE T SOFTWARE ENG, V42, P264, DOI 10.1109/TSE.2015.2478001
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
   Zhu H, 2002, INFORM SOFTWARE TECH, V44, P473, DOI 10.1016/S0950-5849(02)00048-4
NR 50
TC 6
Z9 7
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 841
EP 869
DI 10.1007/s11219-016-9337-3
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300008
DA 2024-07-18
ER

PT J
AU Ma, L
   Zhang, C
   Yu, B
   Sato, H
AF Ma, Lei
   Zhang, Cheng
   Yu, Bing
   Sato, Hiroyuki
TI An empirical study on the effects of code visibility on program
   testability
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Software testability; Automated testing; Code
   coverage; Code visibility; Code accessibility; Fault detection
AB Software testability represents the degree of ease with which a software artifact supports testing. When it is easy to detect defects in a program through testing, the program has high testability; otherwise, the testability of the program is low. As an abstract property of programs, testability can be measured by various metrics, which are affected by different factors of design and implementation. In object-oriented software development, code visibility is important to support design principles, such as information hiding. It is widely believed that code visibility has some effects on testability. However, little empirical evidence has been shown to clarify whether and how software testability is influenced by code visibility. We have performed a comprehensive empirical study to shed light on this problem. We first use code coverage as a concrete proxy for testability. We select 27 real-world software programs as subjects and ran two state-of-the-art automated testing tools, Randoop and EvoSuite, on these programs to analyze their code coverage, in comparison with that of developer-written tests. The results show that code visibility does not necessarily have effects on code coverage, but can significantly affect automated tools. Developer-written tests achieve similar coverage on code areas with different visibility, while low code visibility often leads to low code coverage for automated tools. In addition, we have developed two enhanced variants of Randoop that implement multiple strategies to handle code visibility. The results on Randoop variants show that different treatments on code visibility can result in significant differences in code coverage for automated tools. In the second part, our study uses fault detection rate as another concrete measurement of testability. We apply the automated testing tools on 357 real faults. The result of our in-depth analysis is consistent with that of the first part, demonstrating the significant effects of code visibility on program testability.
C1 [Ma, Lei] Harbin Inst Technol, Harbin, Peoples R China.
   [Zhang, Cheng] Univ Waterloo, Waterloo, ON, Canada.
   [Yu, Bing] Waseda Univ, Tokyo, Japan.
   [Sato, Hiroyuki] Univ Tokyo, Tokyo, Japan.
C3 Harbin Institute of Technology; University of Waterloo; Waseda
   University; University of Tokyo
RP Ma, L (corresponding author), Harbin Inst Technol, Harbin, Peoples R China.
EM malei@hit.edu.cn; c16zhang@uwaterloo.ca; uhyou.yu@akane.waseda.jp;
   schuko@satolab.itc.u-tokyo.ac.jp
FU Fundamental Research Funds for the Central Universities
   [AUGA5710000816]; National High-tech R&D Program of China (863 Program)
   [2015AA020101, 2015AA020108]; Grants-in-Aid for Scientific Research
   [15H02783] Funding Source: KAKEN
FX We would like to thank Rene Just for sharing Defects4J and suggestions
   on its usage. We thank Michael Ernst and Sai Zhang for the discussion on
   Randoop. We thank Qingzhou Luo and Cyrille Artho for the discussion on
   JPF Symbolic PathFinder. We also thank Gordon Fraser and Jose Campos for
   the help on the configuration of running EvoSuite. This work was
   supported by the Fundamental Research Funds for the Central Universities
   AUGA5710000816, and the National High-tech R&D Program of China (863
   Program) 2015AA020101, 2015AA020108.
CR Anand S, 2007, LECT NOTES COMPUT SC, V4424, P134
   [Anonymous], 2000, HDB PARAMETRIC NONPA
   Artho Cyrille, 2016, 2016 IEEE 23rd International Conference on Software Analysis, Evolution and Reengineering (SANER), P29, DOI 10.1109/SANER.2016.32
   Baresi Luciano., 2001, Test Oracles
   Beust C., 2007, NEXT GENERATION JAVA
   BINDER RV, 1994, COMMUN ACM, V37, P87, DOI 10.1145/182987.184077
   Bruntink M., 2003, THESIS
   Budd T., 1997, INTRO OBJECT ORIENTE, Vsecond
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   El Emam K, 2001, J SYST SOFTWARE, V56, P63, DOI 10.1016/S0164-1212(00)00086-8
   Fraser G, 2014, ACM T SOFTW ENG METH, V24, DOI 10.1145/2685612
   Fraser G, 2013, IEEE T SOFTWARE ENG, V39, P276, DOI 10.1109/TSE.2012.14
   Gosling J., 2013, The Java Language Specification, V7
   Inozemtseva L, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P435, DOI 10.1145/2568225.2568271
   Ishii K, 2013, LECT NOTES COMPUT SC, V8118, P420
   Jaygarl H, 2009, P INT COMP SOFTW APP, P148, DOI 10.1109/COMPSAC.2009.29
   Jungmayr S., 2002, CONQUEST 2002. Conference on Quality Engineering in Software Technology. Proceedings, P57
   Jungmayr S., 1999, EUROSTAR, V99, P8
   Just R, 2014, P 2014 INT S SOFTW T, P437, DOI DOI 10.1145/2610384.2628055
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Ma L., 2014, P 2014 INT C GEN PRO, P49
   Ma L., 2016, 2016 IEEE 24 INT C P, P1, DOI [10.1109/ICNP.2016, DOI 10.1109/ICNP.2016]
   Ma L, 2015, IEEE INT CONF AUTOM, P212, DOI 10.1109/ASE.2015.49
   Ma L, 2015, 10TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST AST 2015, P80, DOI 10.1109/AST.2015.23
   Ma L, 2015, 2015 IEEE/ACM 8TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST), P48, DOI 10.1109/SBST.2015.19
   Ma L, 2015, IEEE INT CONF AUTOM, P842, DOI 10.1109/ASE.2015.102
   Massol V., 2003, JUNIT IN ACTION
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Payne J. E., 1997, Object Magazine, V7, P34
   Staats M, 2012, PROC INT CONF SOFTW, P870, DOI 10.1109/ICSE.2012.6227132
   Yu B, 2015, 2015 THIRD IEEE WORKSHOP ON HOT TOPICS IN WEB SYSTEMS AND TECHNOLOGIES (HOTWEB), P1, DOI 10.1109/HotWeb.2015.14
NR 32
TC 4
Z9 4
U1 0
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 951
EP 978
DI 10.1007/s11219-016-9340-8
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300011
DA 2024-07-18
ER

PT J
AU Mansoor, U
   Kessentini, M
   Wimmer, M
   Deb, K
AF Mansoor, Usman
   Kessentini, Marouane
   Wimmer, Manuel
   Deb, Kalyanmoy
TI Multi-view refactoring of class and activity diagrams using a
   multi-objective evolutionary algorithm
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Search-based software engineering; Software maintenance; Multi-objective
   optimization
ID MODEL; TRANSFORMATIONS
AB To improve the quality of software systems, one of the widely used techniques is refactoring defined as the process of improving the design of an existing system by changing its internal structure without altering the external behavior. The majority of existing refactoring work focuses mainly on the source code level. The suggestion of refactorings at the model level is more challenging due to the difficulty to evaluate: (a) the impact of the suggested refactorings applied to a diagram on other related diagrams to improve the overall system quality, (b) their feasibility, and (c) interdiagram consistency. We propose, in this paper, a novel framework that enables software designers to apply refactoring at the model level. To this end, we used a multi-objective evolutionary algorithm to find a trade-off between improving the quality of class and activity diagrams. The proposed multi-objective approach provides a multi-view for software designers to evaluate the impact of suggested refactorings applied to class diagrams on related activity diagrams in order to evaluate the overall quality, and check their feasibility and behavior preservation. The statistical evaluation performed on models extracted from four open-source systems confirms the efficiency of our approach.
C1 [Mansoor, Usman; Kessentini, Marouane] Univ Michigan, Dearborn, MI 48128 USA.
   [Wimmer, Manuel] Vienna Univ Technol, Vienna, Austria.
   [Deb, Kalyanmoy] Michigan State Univ, E Lansing, MI 48824 USA.
C3 University of Michigan System; University of Michigan; Technische
   Universitat Wien; Michigan State University
RP Kessentini, M (corresponding author), Univ Michigan, Dearborn, MI 48128 USA.
EM umansoor@umich.edu; marouane@umich.edu; wimmer@big.tuwien.ac.at;
   kdeb@egr.msu.edu
CR [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], CEUR WORKSHOP
   Arcelli D, 2012, P 8 INT ACM SIGSOFT, P33, DOI 10.1145/2304696.2304704
   Arendt T, 2013, AUTOMAT SOFTW ENG, V20, P141, DOI 10.1007/s10515-012-0114-7
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Biermann E, 2006, LECT NOTES COMPUT SC, V4199, P425
   BOCK C, 2003, J OBJECT TECHNOLOGY, V2, P41
   Boger M., 2002, Objects, components, architectures, services, and applications for a networked world, P366
   Bottoni P, 2003, LECT NOTES COMPUT SC, V3062, P220
   Cardoso J., 2006, BPM WORKSH
   Cicchetti A, 2009, LECT NOTES COMPUT SC, V5563, P35, DOI 10.1007/978-3-642-02408-5_4
   Cinnéide MO, 2012, INT SYMP EMP SOFTWAR, P49, DOI 10.1145/2372251.2372260
   Cohen J., 1988, STAT POWER ANAL BEHA
   Correa A, 2004, LECT NOTES COMPUT SC, V3273, P173
   Crane ML, 2008, LECT NOTES COMPUT SC, V5301, P675, DOI 10.1007/978-3-540-87875-9_47
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Eramo R., 2008, WODPEC 08
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   France R, 2003, IEEE SOFTWARE, V20, P52, DOI 10.1109/MS.2003.1231152
   Ghannem Adnane, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P96, DOI 10.1007/978-3-642-39742-4_9
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Grundy J, 1998, IEEE T SOFTWARE ENG, V24, P960, DOI 10.1109/32.730545
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1106
   Heimann J, 2010, LECT NOTES COMPUT SC, V6395, P78
   Kessentini M, 2011, CONF PROC INT SYMP C, P81, DOI 10.1109/ICPC.2011.22
   Kolovos DS, 2007, J OBJECT TECHNOL, V6, P53, DOI 10.5381/jot.2007.6.9.a3
   Ma HH, 2004, LECT NOTES COMPUT SC, V3273, P12
   Markovic S, 2008, SOFTW SYST MODEL, V7, P25, DOI 10.1007/s10270-007-0056-x
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Mens T., 2007, P 1 WORKSH REF TOOLS
   Mens T, 2007, SOFTW SYST MODEL, V6, P269, DOI 10.1007/s10270-006-0044-6
   Mens T, 2006, LECT NOTES COMPUT SC, V4143, P219
   Moghadam IH, 2012, EUR CON SFTWR MTNCE, P43, DOI 10.1109/CSMR.2012.15
   Moha N, 2009, LECT NOTES COMPUT SC, V5795, P628, DOI 10.1007/978-3-642-04425-0_50
   Mohamed M, 2009, J OBJECT TECHNOL, V8, P143, DOI 10.5381/jot.2009.8.6.a3
   Porres I., 2005, SOFTW SYST MODEL, V4, P368
   Rachmawati L, 2009, IEEE T EVOLUT COMPUT, V13, P810, DOI 10.1109/TEVC.2009.2017515
   Ráth I, 2009, LECT NOTES COMPUT SC, V5795, P342, DOI 10.1007/978-3-642-04425-0_26
   Sjoberg DIK, 2013, IEEE T SOFTWARE ENG, V39, P1144, DOI 10.1109/TSE.2012.89
   Steimann F, 2011, LECT NOTES COMPUT SC, V6981, P440, DOI 10.1007/978-3-642-24485-8_32
   Suny? G., 2001, LNCS, P134, DOI DOI 10.1007/3-540-45441-1_11
   Sunye G., 2001, P UML
   Van Der Straeten R, 2004, LECT NOTES COMPUT SC, V3273, P305
   Van Gorp P, 2003, LECT NOTES COMPUT SC, V2863, P144
   Van Kempen M., 2005, P SAICSIT 2005, P111
   von Pilgrim J, 2013, IEEE INT CONF AUTOM, P682, DOI 10.1109/ASE.2013.6693133
   Wimmer M, 2012, LECT NOTES COMPUT SC, V7304, P336, DOI 10.1007/978-3-642-30561-0_23
   Zhang J, 2005, MODEL-DRIVEN SOFTWARE DEVELOPMENT, P199, DOI 10.1007/3-540-28554-7_9
NR 48
TC 39
Z9 40
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 473
EP 501
DI 10.1007/s11219-015-9284-4
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU8EZ
UT WOS:000401271700005
DA 2024-07-18
ER

PT J
AU Gao, RZ
   Wong, WE
   Chen, ZY
   Wang, YB
AF Gao, Ruizhi
   Wong, W. Eric
   Chen, Zhenyu
   Wang, Yabin
TI Effective software fault localization using predicted execution results
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Program debugging; Software fault localization; Output verification;
   Statement suspiciousness; EXAM score
ID MUTATION
AB Software has become ubiquitous in our daily lives, and with its increasing functionality and complexity comes a frequently tedious and prolonged debugging process. Of the three activities in program debugging (failure detection, fault localization, and bug fixing), the focus of this paper is on the first, failure detection, under the condition that there is no test oracle that can be used to automatically determine the success or failure of all the executions. More precisely, the outputs for many executions have to be verified manually, or the expected outputs are not even available. We want to determine whether there is a solution to help programmers predict the execution results. How good are these predicted results when they are used to help programmers find the locations of bugs? A framework is proposed to reduce the effort on output verification using a strategy based on the Hamming distance or K-Means clustering to predict results of test executions. Such data and the statement coverage of each test case are used to compute the suspiciousness of each statement according to a fault localization technique and produce a ranking for examination to locate bugs. Case studies using 22 programs and seven fault localization techniques were conducted to evaluate the fault localization effectiveness of the proposed framework on 1203 faulty versions, some of which have a single bug and others with multiple bugs. A discussion on factors that may affect the accuracy of execution result prediction and the resulting fault localization effectiveness is also presented. Our data suggests that, in general, with respect to fault localization techniques using execution results verified against the expected outputs, those using predicted execution results can be even more effective than (by examining a smaller number of statements to locate the first faulty statement) or as good as the former (the verified).
C1 [Gao, Ruizhi; Wong, W. Eric] Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.
   [Chen, Zhenyu; Wang, Yabin] Nanjing Univ, Sch Software, Nanjing, Jiangsu, Peoples R China.
C3 University of Texas System; University of Texas Dallas; Nanjing
   University
RP Wong, WE (corresponding author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.
EM ewong@utdallas.edu
RI Wang, Yabin/HLG-3966-2023
OI Wang, Yabin/0000-0001-6816-4552
FU Direct For Computer & Info Scie & Enginr; Division Of Computer and
   Network Systems [1439718] Funding Source: National Science Foundation
CR Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   Afshan S, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P352, DOI 10.1109/ICST.2013.11
   AGRAWAL H, 1993, SOFTWARE PRACT EXPER, V23, P589, DOI 10.1002/spe.4380230603
   Agrawal H, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P143, DOI 10.1109/ISSRE.1995.497652
   Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], 1977, The analysis of contingency tables
   [Anonymous], 1998, CHISUDS US MAN
   [Anonymous], 2008, ISSTA
   Bookstein A, 2002, INFORM RETRIEVAL, V5, P353, DOI 10.1023/A:1020499411651
   Cleve H, 2005, PROC INT CONF SOFTW, P342
   Do H, 2006, IEEE T SOFTWARE ENG, V32, P733, DOI 10.1109/TSE.2006.92
   Freeman D.H., 1987, APPL CATEGORICAL DAT
   Goodman L.A., 1984, ANAL CROSS CLASSIFIC
   HAMMING RW, 1950, BELL SYST TECH J, V29, P147, DOI 10.1002/j.1538-7305.1950.tb00463.x
   Harman Mark, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P182, DOI 10.1109/ICSTW.2010.31
   Hartigan J. A., 1979, Applied Statistics, V28, P100, DOI 10.2307/2346830
   Hierons RM, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1538942.1538944
   Hierons RM, 2012, IEEE T SOFTWARE ENG, V38, P629, DOI 10.1109/TSE.2011.45
   Horgan J., 1991, INT S SOFTWARE TESTI, P87, DOI 10.1145/120807.120815
   Jeffrey D, 2009, PROC IEEE INT CONF S, P221, DOI 10.1109/ICSM.2009.5306303
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   JONES JA, 2007, P INT S SOFTW TEST A, P16, DOI DOI 10.1145/1273463.1273468
   Liu C, 2006, IEEE T SOFTWARE ENG, V32, P831, DOI 10.1109/TSE.2006.105
   Lyle J., 1987, Proceedings of the ICCEA, ICCEA'87, P877
   Machado PDL, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P415
   MacQueen J., 1967, P 5 BERK S MATH STAT, P281
   MCMINN P., 2010, Proceedings of the First International Workshop on Software Test Output Validation, P1
   Naish L, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000791.2000795
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   Ott R.L., 1993, An introduction to statistical methods and data analysis, V4th
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Santelices R, 2009, PROC INT CONF SOFTW, P56, DOI 10.1109/ICSE.2009.5070508
   Shahamiri SR, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ADVANCES (ICSEA 2009), P140, DOI 10.1109/ICSEA.2009.29
   Shali Yan, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P147, DOI 10.1109/ICST.2010.47
   WEISER M, 1982, COMMUN ACM, V25, P446, DOI 10.1145/358557.358577
   Wong WE, 2014, IEEE T RELIAB, V63, P290, DOI 10.1109/TR.2013.2285319
   Wong WE, 2012, IEEE T SYST MAN CY C, V42, P378, DOI 10.1109/TSMCC.2011.2118751
   Wong WE, 2012, IEEE T RELIAB, V61, P149, DOI 10.1109/TR.2011.2172031
   Wong WE, 2010, J SYST SOFTWARE, V83, P188, DOI 10.1016/j.jss.2009.09.037
   Wong WE, 1998, SOFTWARE PRACT EXPER, V28, P347, DOI 10.1002/(SICI)1097-024X(19980410)28:4<347::AID-SPE145>3.0.CO;2-L
   WONG WE, 1995, J SYST SOFTWARE, V31, P185, DOI 10.1016/0164-1212(94)00098-0
   WONG WE, 1995, SOFTWARE QUAL J, V4, P69, DOI 10.1007/BF00404650
   Xiangyu Zhang, 2006, 28th International Conference on Software Engineering Proceedings, P272, DOI 10.1145/1134285.1134324
   Xie XY, 2013, INFORM SOFTWARE TECH, V55, P866, DOI 10.1016/j.infsof.2012.08.008
   Yabin Wang, 2012, Proceedings of the 2012 IEEE Sixth International Conference on Software Security and Reliability (SERE 2012), P138, DOI 10.1109/SERE.2012.18
   Yu YB, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P201, DOI 10.1145/1368088.1368116
   Zhang XY, 2007, EMPIR SOFTW ENG, V12, P143, DOI 10.1007/s10664-006-9007-3
   Zhang ZY, 2010, J SYST SOFTWARE, V83, P174, DOI 10.1016/j.jss.2009.09.041
NR 49
TC 15
Z9 18
U1 1
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 131
EP 169
DI 10.1007/s11219-015-9295-1
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400006
DA 2024-07-18
ER

PT J
AU Grbac, TG
   Runeson, P
   HuljeniAç, D
AF Grbac, Tihana Galinac
   Runeson, Per
   Huljenic, Darko
TI A quantitative analysis of the unit verification perspective on fault
   distributions in complex software systems: an operational replication
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software fault distributions; Unit verification; Software metrics;
   Empirical research; Replication
ID CAPTURE-RECAPTURE; INSPECTIONS
AB Unit verification, including software inspections and unit tests, is usually the first code verification phase in the software development process. However, principles of unit verification are weakly explored, mostly due to the lack of data, since unit verification data are rarely systematically collected and only a few studies have been published with such data from industry. Therefore, we explore the theory of fault distributions, originating in the quantitative analysis by Fenton and Ohlsson, in the weakly explored context of unit verification in large-scale software development. We conduct a quantitative case study on a sequence of four development projects on consecutive releases of the same complex software product line system for telecommunication exchanges. We replicate the operationalization from earlier studies, analyzed hypotheses related to the Pareto principle of fault distribution, persistence of faults, effects of module size, and quality in terms of fault densities, however, now from the perspective of unit verification. The patterns in unit verification results resemble those of later verification phases, e.g., regarding the Pareto principle, and may thus be used for prediction and planning purposes. Using unit verification results as predictors may improve the quality and efficiency of software verification.
C1 [Grbac, Tihana Galinac] Univ Rijeka, Fac Engn, Rijeka, Croatia.
   [Runeson, Per] Lund Univ, Dept Comp Sci, Lund, Sweden.
   [Huljenic, Darko] Ericsson Nikola Tesla, Zagreb, Croatia.
C3 University of Rijeka; Lund University; Ericsson
RP Grbac, TG (corresponding author), Univ Rijeka, Fac Engn, Rijeka, Croatia.
EM tihana.galinac@riteh.hr
RI Grbac, Tihana Galinac/AAU-8704-2021; Galinac Grbac, Tihana/D-7048-2016;
   Runeson, Per/H-5113-2019; Grbac, Tihana Galinac/K-2439-2019
OI Galinac Grbac, Tihana/0000-0002-4351-4082; Runeson,
   Per/0000-0003-2795-4851; 
FU University of Rijeka [13.09.2.2.16]
FX The first author is partially supported by the University of Rijeka
   research Grant 13.09.2.2.16.
CR Andersson C, 2007, IEEE T SOFTWARE ENG, V33, P273, DOI 10.1109/TSE.2007.1005
   [Anonymous], SOFTWARE INSPECTION
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 1990, 610121990 IEEE
   [Anonymous], 2010, P 1 INT WORKSH REPL
   Aurum A, 2002, SOFTW TEST VERIF REL, V12, P133, DOI 10.1002/stvr.243
   BASILI VR, 1987, IEEE T SOFTWARE ENG, V13, P1278, DOI 10.1109/TSE.1987.232881
   BASILI VR, 1984, COMMUN ACM, V27, P42, DOI 10.1145/69605.2085
   Bhat T., 2006, Proceedings of the 2006 ACM/IEEE International Symposium on Empirical Software Engineering (ISESE '06), P356, DOI [DOI 10.1145/1159733.1159787, 10.1145/1159733.1159787]
   Biffl S., 2002, Empirical Software Engineering, V7, P257, DOI 10.1023/A:1016396232448
   Briand L, 1998, PROC INT CONF SOFTW, P340, DOI 10.1109/ICSE.1998.671387
   Briand LC, 2000, IEEE T SOFTWARE ENG, V26, P518, DOI 10.1109/32.852741
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Concas G, 2011, IEEE T SOFTWARE ENG, V37, P872, DOI 10.1109/TSE.2011.54
   El Emam K, 2000, J SYST SOFTWARE, V54, P119, DOI 10.1016/S0164-1212(00)00032-7
   Engström E, 2010, LECT NOTES COMPUT SC, V6156, P3, DOI 10.1007/978-3-642-13792-1_3
   Fagan M., 2002, DESIGN CODE INSPECTI
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Galinac Grbac T., 2011, LECT NOTES BUSINESS, V6759
   Gilb Tom, 1993, Software inspections
   Gómez OS, 2014, INFORM SOFTWARE TECH, V56, P1033, DOI 10.1016/j.infsof.2014.04.004
   Grbac TG, 2012, IET SOFTW, V6, P249, DOI 10.1049/iet-sen.2011.0104
   Grbac TG, 2015, SOFTWARE QUAL J, V23, P363, DOI 10.1007/s11219-014-9240-8
   Grbac TG, 2015, INFORM SOFTWARE TECH, V58, P250, DOI 10.1016/j.infsof.2014.06.014
   Grbac TG, 2013, IEEE T SOFTWARE ENG, V39, P462, DOI 10.1109/TSE.2012.46
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Hannay JE, 2007, IEEE T SOFTWARE ENG, V33, P87, DOI 10.1109/TSE.2007.12
   Hetzel W. C., 1976, THESIS
   Juristo N, 2004, EMPIR SOFTW ENG, V9, P7, DOI 10.1023/B:EMSE.0000013513.48963.1b
   Juristo N., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P330, DOI 10.1109/ICST.2012.113
   Juristo N, 2013, INFORM SOFTWARE TECH, V55, P215, DOI 10.1016/j.infsof.2012.07.016
   Kamsties E., 1995, Software Engineering - ESEC '95. 5th European Software Engineering Conference. Proceedings, P362
   Kitchenham B, 2008, EMPIR SOFTW ENG, V13, P219, DOI 10.1007/s10664-008-9061-0
   Koru AG, 2009, IEEE T SOFTWARE ENG, V35, P293, DOI 10.1109/TSE.2008.90
   Mäntylä MV, 2009, IEEE T SOFTWARE ENG, V35, P430, DOI 10.1109/TSE.2008.71
   Miller J, 2005, INFORM SOFTWARE TECH, V47, P233, DOI 10.1016/j.infsof.2004.08.005
   Munir H, 2014, INFORM SOFTWARE TECH, V56, P375, DOI 10.1016/j.infsof.2014.01.002
   Myers G. J., 1978, COMMUN ACM, V21
   Nagappan N, 2008, EMPIR SOFTW ENG, V13, P289, DOI 10.1007/s10664-008-9062-z
   Ohlsson N, 1996, IEEE T SOFTWARE ENG, V22, P886, DOI 10.1109/32.553637
   Petersson H, 2004, J SYST SOFTWARE, V72, P249, DOI 10.1016/S0164-1212(03)00090-6
   Runeson P, 2006, IEEE SOFTWARE, V23, P82, DOI 10.1109/MS.2006.89
   Runeson P, 2006, IEEE SOFTWARE, V23, P22, DOI 10.1109/MS.2006.91
   Runeson P, 2014, EMPIR SOFTW ENG, V19, P1781, DOI 10.1007/s10664-013-9262-z
   Shull FJ, 2008, EMPIR SOFTW ENG, V13, P211, DOI 10.1007/s10664-008-9060-1
   Siy H, 2001, PROC IEEE INT CONF S, P281, DOI 10.1109/ICSM.2001.972741
   SJOBERG D.I., 2008, BUILDING THEORIES SO
   Wohlin C., 2012, Experimentation in Software Engineering
   Wohlin C., 2006, P 20 INT C SOFTW ENG, P400
   Wood M, 1997, LECT NOTES COMPUT SC, V1301, P262, DOI 10.1145/267896.267915
   Zhang HY, 2008, IEEE T SOFTWARE ENG, V34, P301, DOI 10.1109/TSE.2007.70771
NR 52
TC 6
Z9 6
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2016
VL 24
IS 4
BP 967
EP 995
DI 10.1007/s11219-015-9273-7
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED6GL
UT WOS:000388954000006
DA 2024-07-18
ER

PT J
AU Riungu-Kalliosaari, L
   Taipale, O
   Smolander, K
   Richardson, I
AF Riungu-Kalliosaari, Leah
   Taipale, Ossi
   Smolander, Kari
   Richardson, Ita
TI Adoption and use of cloud-based testing in practice
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Cloud computing; Cloud-based testing; Cloud-based testing resources;
   Testing
AB This qualitative study addresses the adoption, utilization and effects of cloud-based testing in different organizational contexts. We approached the research problem by conducting thirty-five interviews with professionals in 20 organizations and applied grounded theory as the research method. The results indicate that cloud-based testing provides viable solutions to meet the testing needs within organizations. Cloud-based resources can be applied in performing various testing activities such as performance and multiplatform testing as well supporting practitioners in involving users during iterative development and testing. Cloud-based testing also adds value to practitioners by enabling easier management of the cloud-based testing resources and helping to produce improved end products. We use the results of the study to propose a strategy that can be used to assist practitioners in their decision-making processes towards adoption of cloud-based testing.
C1 [Riungu-Kalliosaari, Leah] Univ Helsinki, Dept Comp Sci, Gustaf Hallstromin Katu 2b,POB 68, FIN-00014 Helsinki, Finland.
   [Taipale, Ossi; Smolander, Kari] Lappeenranta Univ Technol, Dept Software Engn & Informat Management, POB 20, Lappeenranta 53851, Finland.
   [Richardson, Ita] Univ Limerick, Lero, Irish Software Engn Res Ctr, Limerick, Ireland.
C3 University of Helsinki; Lappeenranta-Lahti University of Technology LUT;
   University of Limerick
RP Riungu-Kalliosaari, L (corresponding author), Univ Helsinki, Dept Comp Sci, Gustaf Hallstromin Katu 2b,POB 68, FIN-00014 Helsinki, Finland.
EM leah.riungu-kalliosaari@cs.helsinki.fi; ossi.taipale@lut.fi;
   kari.smolander@lut.fi; ita.richardson@lero.ie
RI Smolander, Kari/B-4581-2015
OI Riungu-Kalliosaari, Leah M/0000-0002-0444-3728; Richardson,
   Ita/0000-0002-5493-2837
FU ESPA project - Finnish Funding Agency for Technology and Innovations
   (TEKES); STX project - Finnish Funding Agency for Technology and
   Innovations (TEKES); Graduate School on Software Systems and Engineering
   (SoSE); Lero - Irish Software Engineering Research Centre [10/CE/I1855]
FX This study was supported by the ESPA project
   (http://www.soberit.hut.fi/espa/) and STX project
   (http://www2.it.lut.fi/project/STX/); both are funded by the Finnish
   Funding Agency for Technology and Innovations (TEKES) and by the
   companies involved in the projects. It was also supported, in part, by
   the Graduate School on Software Systems and Engineering (SoSE) and Lero
   - the Irish Software Engineering Research Centre (http://www.lero.ie)
   grant 10/CE/I1855.
CR Armbrust M, 2010, COMMUN ACM, V53, P50, DOI 10.1145/1721654.1721672
   Buyya R, 2009, FUTURE GENER COMP SY, V25, P599, DOI 10.1016/j.future.2008.12.001
   Candea George, 2010, P 1 ACM S CLOUD COMP, P155, DOI DOI 10.1145/1807128.1807153
   Chana Inderveer., 2012, ACM SIGSOFT Software Engineering Notes, V37, P1
   Ciortea Liviu, 2009, Operating Systems Review, V43, P5, DOI 10.1145/1713254.1713257
   Coleman G, 2007, INFORM SOFTWARE TECH, V49, P654, DOI 10.1016/j.infsof.2007.02.011
   Creswell JW, 2000, THEOR PRACT, V39, P124, DOI 10.1207/s15430421tip3903_2
   Engineering Research Centre, 10CEI1855 ENG RES CT
   Gaisbauer S, 2008, INT CONF QUANT EVAL, P93, DOI 10.1109/QEST.2008.24
   Ganon Z, 2009, IEEE INT WORKSH COMP, P26
   Gao J, 2013, 2013 IEEE SEVENTH INTERNATIONAL SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING (SOSE 2013), P212, DOI 10.1109/SOSE.2013.66
   Gartner, 2009, BUSINESS MODELS GLOB
   Gasson S., 2004, The Handbook of Information Systems Research, P79, DOI DOI 10.4018/978-1-59140-144-5.CH006
   Hanawa Toshihiro, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P428, DOI 10.1109/ICSTW.2010.59
   Incki Koray, 2012, 2012 International Conference on Software Security and Reliability Companion, P18, DOI 10.1109/SERE-C.2012.32
   ISO/IEC, 2012, 29119 4 SYST SOFTW 4
   Jae Yoo Lee, 2009, 2009 7th ACIS International Conference on Software Engineering Research, Management and Applications (SERA 2009), P261, DOI 10.1109/SERA.2009.43
   Jenkins W., 2011, Proceedings of the 2011 International Conference on Cloud and Service Computing (CSC 2011), P134, DOI 10.1109/CSC.2011.6138511
   Jensen M, 2009, IEEE INT CONF CLOUD, P109, DOI 10.1109/CLOUD.2009.60
   Ji Wu, 2011, Proceedings of the 2011 International Conference on Cloud and Service Computing (CSC 2011), P87, DOI 10.1109/CSC.2011.6138558
   Khajeh-Hosseini A, 2012, SOFTWARE PRACT EXPER, V42, P447, DOI 10.1002/spe.1072
   Koong CS, 2013, 2013 SEVENTH INTERNATIONAL CONFERENCE ON COMPLEX, INTELLIGENT, AND SOFTWARE INTENSIVE SYSTEMS (CISIS), P467, DOI 10.1109/CISIS.2013.85
   Lian Yu, 2010, 2010 Fifth International Symposium on Service Oriented System Engineering (SOSE 2010), P181, DOI 10.1109/SOSE.2010.36
   Liu HA, 2009, WREN 2009, P93
   Marston S, 2011, DECIS SUPPORT SYST, V51, P176, DOI 10.1016/j.dss.2010.12.006
   Maxwell J. A., 2005, Qualitative research design: An interactive approach, V2nd
   Mell P, 2010, COMMUN ACM, V53, P50
   Mohammad A. F., 2011, PROCEDIA COMPUTER SC, V5, P513, DOI [10.1016/j.procs.2011.07.066, DOI 10.1016/J.PROCS.2011.07.066]
   Murthy MSN, 2014, ADV INTELL SYST, V248, P605, DOI 10.1007/978-3-319-03107-1_66
   Nordic council of ministers, 2012, NORD PUBL SECT CLOUD
   Ojala A, 2011, IEEE SOFTWARE, V28, P42, DOI 10.1109/MS.2011.51
   Oriol Manuel, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P434, DOI 10.1109/ICSTW.2010.68
   Parveen Tauhida, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P424, DOI 10.1109/ICSTW.2010.77
   Riungu L. M., 2010, Proceedings of the 2010 IEEE 2nd International Conference on Cloud Computing Technology and Science (CloudCom 2010), P557, DOI 10.1109/CloudCom.2010.58
   Riungu-Kalliosaari L., 2012, TESTING SERVICE PERS, P196
   Riungu-Kalliosaari L, 2012, IEEE SOFTWARE, V29, P46, DOI 10.1109/MS.2011.132
   Robinson P., 2011, Proceedings of the 2011 IEEE 3rd International Conference on Cloud Computing Technology and Science (CloudCom 2011), P454, DOI 10.1109/CloudCom.2011.67
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Strauss A., 1990, BASICS QUALITATIVE R
   Sultan NA, 2011, INT J INFORM MANAGE, V31, P272, DOI 10.1016/j.ijinfomgt.2010.08.001
   Timilsina U., 2012, NEW TECHNOLOGY LIB I, V28, P22
   Wang Jun, 2011, Proceedings of the 2011 International Conference on Internet Computing and Information Services (ICICIS 2011), P176, DOI 10.1109/ICICIS.2011.51
   Wilson Piers, 2011, Information Security Technical Report, V16, P97, DOI 10.1016/j.istr.2011.08.002
   Zardari S., 2011, P 2 INT WORKSHOP SOF, P29
   Zissis D, 2012, FUTURE GENER COMP SY, V28, P583, DOI 10.1016/j.future.2010.12.006
NR 46
TC 12
Z9 20
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 337
EP 364
DI 10.1007/s11219-014-9256-0
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100006
DA 2024-07-18
ER

PT J
AU Calikli, G
   Bener, A
AF Calikli, Gul
   Bener, Ayse
TI Empirical analysis of factors affecting confirmation bias levels of
   software engineers
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Confirmation bias; Human factors; Software psychology
ID SELECTION; EXPERIENCE; FAILURE
AB Confirmation bias is defined as the tendency of people to seek evidence that verifies a hypothesis rather than seeking evidence to falsify it. Due to the confirmation bias, defects may be introduced in a software product during requirements analysis, design, implementation and/or testing phases. For instance, testers may exhibit confirmatory behavior in the form of a tendency to make the code run rather than employing a strategic approach to make it fail. As a result, most of the defects that have been introduced in the earlier phases of software development may be overlooked leading to an increase in software defect density. In this paper, we quantify confirmation bias levels in terms of a single derived metric. However, the main focus of this paper is the analysis of factors affecting confirmation bias levels of software engineers. Identification of these factors can guide project managers to circumvent negative effects of confirmation bias, as well as providing guidance for the recruitment and effective allocation of software engineers. In this empirical study, we observed low confirmation bias levels among participants with logical reasoning and hypothesis testing skills.
C1 [Calikli, Gul] Open Univ, Fac Maths Comp & Technol, Comp & Commun, Milton Keynes MK7 6AA, Bucks, England.
   [Bener, Ayse] Ryerson Univ, Data Sci Lab Mech & Ind Engn, Toronto, ON, Canada.
C3 Open University - UK; Toronto Metropolitan University
RP Calikli, G (corresponding author), Open Univ, Fac Maths Comp & Technol, Comp & Commun, Milton Keynes MK7 6AA, Bucks, England.
EM gul.calikli@open.ac.uk; ayse.bener@ryerson.ca
RI Basar, Ayse/ABF-9265-2020
OI Basar, Ayse/0000-0003-4934-8326; Calikli, Gul/0000-0003-4578-1747
CR Allison PD., 1999, MULTIPLE REGRESSION
   [Anonymous], 2003, INFERENCE LEARNING A
   BORKOWSKI JG, 1987, INTELLIGENCE, V11, P61, DOI 10.1016/0160-2896(87)90027-4
   BRADLEY JV, 1978, BRIT J MATH STAT PSY, V31, P144, DOI 10.1111/j.2044-8317.1978.tb00581.x
   Calikli G., 2010, P 32 INT C SOFTW ENG
   Calikli G., 2010, P 5 INT WORKSH PRED
   Calikli G., 2010, P 4 INT S EMP SOFTW
   Calikli G., 2013, P 7 INT S EMP SOFTW
   Çalikli G, 2013, SOFTWARE QUAL J, V21, P377, DOI 10.1007/s11219-012-9180-0
   Calikli Gul, 2010, P WORKSH PSYCH PROGR
   CHENG PW, 1985, COGNITIVE PSYCHOL, V17, P391, DOI 10.1016/0010-0285(85)90014-3
   Cook T. D., 1979, Quasi-experimentation: Design analysis issues for field settings
   COSMIDES L, 1989, COGNITION, V31, P187, DOI 10.1016/0010-0277(89)90023-1
   COX JR, 1982, MEM COGNITION, V10, P496, DOI 10.3758/BF03197653
   DAWSON NV, 1993, CLIN CHEM, V39, P1468
   EINHORN HJ, 1978, PSYCHOL REV, V85, P395, DOI 10.1037/0033-295X.85.5.395
   Erdogmus H, 2005, IEEE T SOFTWARE ENG, V31, P226, DOI 10.1109/TSE.2005.37
   Evans J.St.B.T., 1993, Human reasoning: The psychology of deduction
   Garavan H, 1997, IRISH J PSYCHOL, V18, P267, DOI 10.1080/03033910.1997.10558147
   GLASS GV, 1972, REV EDUC RES, V42, P237, DOI 10.3102/00346543042003237
   Griggs R. A., 1983, ROLE PROBLEM CONTENT
   GRIGGS RA, 1986, SOC STUD SCI, V16, P319, DOI 10.1177/0306312786016002007
   GRIGGS RA, 1982, BRIT J PSYCHOL, V73, P407, DOI 10.1111/j.2044-8295.1982.tb01823.x
   Hirschi NW, 2002, RES ENG DES, V13, P123, DOI 10.1007/s00163-002-0011-3
   HOCH SJ, 1985, MEM COGNITION, V13, P453, DOI 10.3758/BF03198458
   Inglis M., 2004, P INT GROUP PSYCH MA
   JACKSON SL, 1988, B PSYCHONOMIC SOC, V26, P327, DOI 10.3758/BF03337671
   JOHNSONLAIRD PN, 1972, Q J EXP PSYCHOL, V24, P87, DOI 10.1080/14640747208400271
   Kahneman Daniel, 2011, Thinking, fast and slow (macmillan)
   Knauff M, 2010, PLOS ONE, V5, DOI 10.1371/journal.pone.0013483
   Kutner M., 2004, HLTH ENV RES ONLINE, Vfourth
   Mahoney M.J., 1977, COGNITIVE THER RES, V1, P229, DOI DOI 10.1007/BF01186796
   Mair C., 2011, 33 INT C SOFTW ENG I
   Manktelow K.I., 1990, INFERENCE UNDERSTAND
   MANKTELOW KI, 1979, BRIT J PSYCHOL, V70, P477, DOI 10.1111/j.2044-8295.1979.tb01720.x
   Merkhofer M. W., 1998, TOOLS AID ENV DECISI
   Murray J, 2010, EUR J PSYCHOL, V6, P150
   STACY W, 1995, COMMUN ACM, V38, P57, DOI 10.1145/203241.203256
   Tarling Roger., 2009, Statistical Modelling for Social Researchers: Principles and Practice
   Teasley B., 1993, P 5 WORKSH EMP STUD
   TEASLEY BE, 1994, J APPL PSYCHOL, V79, P142, DOI 10.1037/0021-9010.79.1.142
   WASON PC, 1971, Q J EXP PSYCHOL, V23, P63, DOI 10.1080/00335557143000068
   WASON PC, 1968, Q J EXP PSYCHOL, V20, P273, DOI 10.1080/14640746808400161
   WASON PC, 1960, Q J EXP PSYCHOL, V12, P129, DOI 10.1080/17470216008416717
NR 44
TC 16
Z9 18
U1 0
U2 20
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2015
VL 23
IS 4
BP 695
EP 722
DI 10.1007/s11219-014-9250-6
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA CU1CN
UT WOS:000363257000006
DA 2024-07-18
ER

PT J
AU Chatzipetrou, P
   Angelis, L
   Barney, S
   Wohlin, C
AF Chatzipetrou, Panagiota
   Angelis, Lefteris
   Barney, Sebastian
   Wohlin, Claes
TI An experience-based framework for evaluating alignment of software
   quality goals
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software; Quality; Global software development; Cluster analysis;
   Alignment; Different perspectives
ID REQUIREMENTS; KNOWLEDGE
AB Efficient quality management of software projects requires knowledge of how various groups of stakeholders involved in software development prioritize the product and project goals. Agreements or disagreements among members of a team may originate from inherent groupings, depending on various professional or other characteristics. These agreements are not easily detected by conventional practices (discussions, meetings, etc.) since the natural language expressions are often obscuring, subjective, and prone to misunderstandings. It is therefore essential to have objective tools that can measure the alignment among the members of a team; especially critical for the software development is the degree of alignment with respect to the prioritization goals of the software product. The paper proposes an experience-based framework of statistical and graphical techniques for the systematic study of prioritization alignment, such as hierarchical cluster analysis, analysis of cluster composition, correlation analysis, and closest agreement-directed graph. This framework can provide a thorough and global picture of a team's prioritization perspective and can potentially aid managerial decisions regarding team composition and leadership. The framework is applied and illustrated in a study related to global software development where 65 individuals in different roles, geographic locations and professional relationships with a company, prioritize 24 goals from individual perception of the actual situation and for an ideal situation.
C1 [Chatzipetrou, Panagiota; Angelis, Lefteris] Aristotle Univ Thessaloniki, Dept Informat, GR-54006 Thessaloniki, Greece.
   [Barney, Sebastian; Wohlin, Claes] Blekinge Inst Technol, Karlskrona, Sweden.
   [Barney, Sebastian] Univ New S Wales, Sch Informat Syst Technol & Management, Sydney, NSW, Australia.
C3 Aristotle University of Thessaloniki; Blekinge Institute Technology;
   University of New South Wales Sydney
RP Angelis, L (corresponding author), Aristotle Univ Thessaloniki, Dept Informat, GR-54006 Thessaloniki, Greece.
EM pchatzip@csd.auth.gr; lef@csd.auth.gr; sebastian@unswalumni.com;
   claes.wohlin@bth.se
OI Wohlin, Claes/0000-0003-0460-5253; Chatzipetrou,
   Panagiota/0000-0002-0311-1502
CR [Anonymous], SOFTWARE DEV TIMES
   [Anonymous], 2001, 9126 ISO 1
   Barney S., 2011, Proceedings of the 2011 6th IEEE International Conference on Global Software Engineering (ICGSE 2011), P146, DOI 10.1109/ICGSE.2011.13
   Barney S., 2010, P 14 INT C EV ASS SO
   Barney S., 2008, SOFTWARE PRODUCT QUA
   Barney S., 2009, SOFTWARE PRODUCT QUA
   Barney S, 2014, INFORM SOFTWARE TECH, V56, P20, DOI 10.1016/j.infsof.2013.06.004
   Barney S, 2009, LECT NOTES COMPUT SC, V5543, P256, DOI 10.1007/978-3-642-01680-6_24
   Berander P., 2006, INT S EMPIRICAL SOFT, P316
   Berander P, 2006, INT J SOFTW ENG KNOW, V16, P819, DOI 10.1142/S0218194006003026
   BOEHM BW, 1989, IEEE T SOFTWARE ENG, V15, P902, DOI 10.1109/32.29489
   BROWN SL, 1995, ACAD MANAGE REV, V20, P343, DOI 10.2307/258850
   Chan Y. E., 2002, MIS Quarterly Executive, V1, P97
   Chan YE, 2007, J INF TECHNOL, V22, P316, DOI 10.1057/palgrave.jit.2000111
   Chatzipetrou P., 2010, P 36 EUROMICRO C SOF
   Chatzipetrou P., 2011, P 37 EUROMICRO C IEE
   COHEN MD, 1972, ADMIN SCI QUART, V17, P1, DOI 10.2307/2392088
   Conchúir EO, 2009, COMMUN ACM, V52, P127, DOI 10.1145/1536616.1536648
   Damian D. E., 2003, Requirements Engineering, V8, P149, DOI 10.1007/s00766-003-0173-1
   Damian D, 2007, IEEE SOFTWARE, V24, P21, DOI 10.1109/MS.2007.55
   Espinosa JA, 2007, J MANAGE INFORM SYST, V24, P135, DOI 10.2753/MIS0742-1222240104
   Field A., 2009, Discovering statistics with SPSS, V3rd
   Johnson R.A., 2002, Applied Multivariate Statistical Analysis, V5th ed.
   Leffingwell D., 2003, Managing Software Requirements: A Use Case Approach
   McDonough EF, 2003, RES TECHNOL MANAGE, V46, P40, DOI 10.1080/08956308.2003.11671565
   Pinjani P, 2013, INFORM MANAGE-AMSTER, V50, P144, DOI 10.1016/j.im.2012.10.002
   Rovegård P, 2008, IEEE T SOFTWARE ENG, V34, P516, DOI 10.1109/TSE.2008.32
   Sahay S., 2003, GLOBAL IT OUTSOURCIN
   Sheskin David, 2011, Handbook of Parametric and Nonparametric Statistical Procedures
   Smite D, 2014, EMPIR SOFTW ENG, V19, P105, DOI 10.1007/s10664-012-9217-9
   Smite D, 2010, EMPIR SOFTW ENG, V15, P91, DOI 10.1007/s10664-009-9123-y
NR 31
TC 0
Z9 0
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2015
VL 23
IS 4
BP 567
EP 594
DI 10.1007/s11219-014-9251-5
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CU1CN
UT WOS:000363257000002
DA 2024-07-18
ER

PT J
AU Lazic, L
   Milinkovic, S
AF Lazic, Ljubomir
   Milinkovic, Stevan
TI Reducing software defects removal cost via design of experiments using
   Taguchi approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Test efficacy; Defect cost; Design of experiments;
   Taguchi method
ID QUALITY
AB There are a variety of models, methods and tools aimed at helping organizations in managing defects found in software development. Early estimation of project size, software quality (number of defects injected and fixed) and completion time is essential for successful project planning and tracking. In this paper, we suggest a strategy for the optimization of the action plans in the test process by applying the design of experiments to the testing of maturity model assessment procedure, which provides the step-by-step guidelines for improving organizational test processes. We are able to quantify process performance in terms of a defect containment matrix for each process stage. This is accomplished by the application of Taguchi's design of experiments and surface response methods in order to find parametric equations for the cost of quality, which is in turn related to defect removal efficacy.
C1 [Lazic, Ljubomir] State Univ Novi Pazar, Novi Pazar 36300, Serbia.
   [Milinkovic, Stevan] Union Univ, Sch Comp, Belgrade 11000, Serbia.
RP Lazic, L (corresponding author), State Univ Novi Pazar, Vuka Karadzica Bb, Novi Pazar 36300, Serbia.
EM llazic@np.ac.rs; smilinkovic@raf.edu.rs
RI Lazic, Ljubomir/O-7032-2019; Lazic, Ljubomir/AAR-5825-2021
FU Ministry of Science and Technological Development of the Republic of
   Serbia [TR-35026]
FX This work has been carried out within the project "Optimal Software
   Quality Management Framework," supported in part by the Ministry of
   Science and Technological Development of the Republic of Serbia under
   Project No. TR-35026.
CR [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], 1987, QUALITYRESOURCES DIV
   [Anonymous], 1999, USCCSE99510
   Briand LC, 1998, NINTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P32, DOI 10.1109/ISSRE.1998.730766
   Dromey RG, 2003, SOFTWARE QUAL J, V11, P197, DOI 10.1023/A:1025162610079
   Faizan M., 2012, INT J MODERN ED COMP, V3, P14
   Galin Daniel, 2004, Software quality assurance: from theory to implementation
   Gary A. G., 2010, IS SOFTWARE INSPECTI
   Gou L., 2008, SOFTWARE PROCESS IMP, V14, P227
   Hevner AR, 1997, INFORM SOFTWARE TECH, V39, P867, DOI 10.1016/S0950-5849(97)00050-5
   Jones C., 2000, Software Assessments, Benchmarks, and Best Practices
   Kan S. H., 2003, METRICS MODELS SOFTW
   Lazic Ljubomir, 2008, WSEAS Transactions on Computers, V7, P599
   Lazic Lj, 2013, P INFOTEH JAHORINA, V12, P572
   Lazic L, 2010, COMPUT SCI INF SYST, V7, P459, DOI 10.2298/CSIS090923008L
   Madhav S. P., 2006, 2006 ANN REL MAINT S
   Oh H, 2008, INT CONF QUAL SOFTW, P57, DOI 10.1109/QSIC.2008.19
   Phadke M.S., 1995, QUALITY ENG USING RO
NR 18
TC 4
Z9 4
U1 1
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2015
VL 23
IS 2
BP 267
EP 295
DI 10.1007/s11219-014-9234-6
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE2SN
UT WOS:000351667700003
DA 2024-07-18
ER

PT J
AU Chang, CW
   Tong, LI
AF Chang, Chih-Wei
   Tong, Lee-Ing
TI Monitoring the software development process using a short-run control
   chart
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software development process; Statistical process control; Control
   chart; Short production run; Q chart
ID STATISTICAL PROCESS-CONTROL; SPC-Q-CHARTS; PERFORMANCE; LIMITS
AB Techniques for statistical process control (SPC), such as using a control chart, have recently garnered considerable attention in the software industry. These techniques are applied to manage a project quantitatively and meet established quality and process-performance objectives. Although many studies have demonstrated the benefits of using a control chart to monitor software development processes (SDPs), some controversy exists regarding the suitability of employing conventional control charts to monitor SDPs. One major problem is that conventional control charts require a large amount of data from a homogeneous source of variation when constructing valid control limits. However, a large dataset is typically unavailable for SDPs. Aggregating data from projects with similar attributes to acquire the required number of observations may lead to wide control limits due to mixed multiple common causes when applying a conventional control chart. To overcome these problems, this study utilizes a Q chart for short-run manufacturing processes as an alternative technique for monitoring SDPs. The Q chart, which has early detection capability, real-time charting, and fixed control limits, allows software practitioners to monitor process performance using a small amount of data in early SDP stages. To assess the performance of the Q chart for monitoring SDPs, three examples are utilized to demonstrate Q chart effectiveness. Some recommendations for practical use of Q charts for SDPs are provided.
C1 [Chang, Chih-Wei; Tong, Lee-Ing] Natl Chiao Tung Univ, Dept Ind Engn & Management, Hsinchu 300, Taiwan.
C3 National Yang Ming Chiao Tung University
RP Chang, CW (corresponding author), Natl Chiao Tung Univ, Dept Ind Engn & Management, 1001 Daxue Rd, Hsinchu 300, Taiwan.
EM scott.iem95g@nctu.edu.tw; litong@cc.nctu.edu.tw
FU National Science Council of the Republic of China, Taiwan [NSC
   97-2221-E-009-111-MY3]
FX The authors would like to thank the National Science Council of the
   Republic of China, Taiwan, for financially supporting this research
   under Contract No. NSC 97-2221-E-009-111-MY3. The authors also would
   like to thank the Information and Communications Research Laboratories
   (ICL) of the Industrial Technology Research Institute (ITRI), ROC,
   Taiwan, for providing actual project data to enrich the application of
   this study.
CR Alemi Farrokh, 2004, Qual Manag Health Care, V13, P216
   [Anonymous], 2009, P INT MULT ENG COMP
   [Anonymous], 2010, CMMI DEV VERS 1 3
   Baldassarre T., 2007, P 11 INT C EV ASS S
   Baldassarre T., 2004, P 5 INT C PROD FOC S
   BARNARD J, 1994, IEEE SOFTWARE, V11, P59, DOI 10.1109/52.268958
   Bothe D. R., 1989, P 43 ANN QUAL C T TO
   Caivano D., 2005, P 9 EUR C SOFTW MAIN
   Celano G, 2011, QUAL RELIAB ENG INT, V27, P313, DOI 10.1002/qre.1121
   Chang CP, 2008, SOFTWARE QUAL J, V16, P377, DOI 10.1007/s11219-007-9042-3
   Cullen C. C., 1989, P NAT AER EL C
   DELCASTILLO E, 1994, QUAL RELIAB ENG INT, V10, P87, DOI 10.1002/qre.4680100203
   DelCastillo E, 1996, COMMUN STAT THEORY, V25, P2723, DOI 10.1080/03610929608831866
   Fagan ME, 1999, IBM SYST J, V38, P258, DOI 10.1147/sj.382.0258
   FLORAC WA, 1999, SEI S SOFTW, P1
   Garjani M, 2010, INT J ADV MANUF TECH, V51, P1023, DOI 10.1007/s00170-010-2672-9
   Jacob AL, 2003, IEEE SOFTWARE, V20, P50, DOI 10.1109/MS.2003.1196321
   Jalote P, 2002, IEEE T SOFTWARE ENG, V28, P1126, DOI 10.1109/TSE.2002.1158286
   Komuro M., 2006, P 28 INT C SOFTW ENG
   Kulpa M.K Johnson., 2008, INTERPRETING CMMI PR
   Leu SS, 2008, J CONSTR ENG M, V134, P813, DOI 10.1061/(ASCE)0733-9364(2008)134:10(813)
   Lipke W., 2000, J DEFENSE SOFTWARE E, V13, P16
   Lipke W., 2002, CROSSTALK J DEFENSE, V15, P15
   Manlove D., 2007, SOFTWARE QUALITY PRO, V9, P15
   Montgomery D.C., 2009, Introduction to Statistical Quality Control
   QUESENBERRY CP, 1991, J QUAL TECHNOL, V23, P296, DOI 10.1080/00224065.1991.11979345
   QUESENBERRY CP, 1991, J QUAL TECHNOL, V23, P239, DOI 10.1080/00224065.1991.11979329
   QUESENBERRY CP, 1991, J QUAL TECHNOL, V23, P213, DOI 10.1080/00224065.1991.11979327
   QUESENBERRY CP, 1993, J QUAL TECHNOL, V25, P237, DOI 10.1080/00224065.1993.11979470
   Raczynski B, 2008, IEEE SOFTWARE, V25, P49
   Radice R., 1998, P 10 SOFTW ENG PROC
   Sargut KU, 2006, SOFTWARE QUAL J, V14, P135, DOI 10.1007/s11219-006-7599-x
   Shewhart WA., 1926, BELL SYST TECH J, V5, P593, DOI DOI 10.1002/J.1538-7305.1926.TB00125.X
   Tarhan A, 2006, LECT NOTES COMPUT SC, V4257, P88
   Torng CC, 2008, COMMUN STAT-SIMUL C, V37, P1904, DOI 10.1080/03610910802263141
   Tukey J.W., 1977, EXPLORATORY DATA ANA, V2
   Tzong-Ru Tsai, 2004, International Journal on Information and Management Sciences, V15, P61
   Wang Q, 2006, LECT NOTES COMPUT SC, V3966, P348
   Weller E, 2008, IEEE SOFTWARE, V25, P48, DOI 10.1109/MS.2008.68
   Weller EF, 2000, IEEE SOFTWARE, V17, P48, DOI 10.1109/52.896249
   Zantek PF, 2009, NAV RES LOG, V56, P279, DOI 10.1002/nav.20330
   Zhang LY, 2009, QUAL RELIAB ENG INT, V25, P933, DOI 10.1002/qre.1012
NR 42
TC 5
Z9 5
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2013
VL 21
IS 3
BP 479
EP 499
DI 10.1007/s11219-012-9182-y
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 190LG
UT WOS:000322340900004
DA 2024-07-18
ER

PT J
AU Misra, SC
AF Misra, SC
TI Modeling design/coding factors that drive maintainability of software
   systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software quality; maintainability; metrics; regression; correlation;
   modeling
ID OBJECT-ORIENTED SOFTWARE; DESIGN METRICS; QUALITY; COMPLEXITY;
   MAINTENANCE; GUIDELINES; DEFECT
AB It is cost-effective for software practitioners to monitor and control quality of software systems from the early phases of development. Assessing and modeling the effects of design and coding factors on software system maintainability can help provide heuristics to human designers and programmers to reduce maintenance costs and improve quality. This paper presents a study based on intuitive and experimental analyses that use a suite of twenty design/code measures to obtain indications of their effect on maintainability. This paper lists several important contributions of the work, one of which is the investigation of an unprecedentedly large number of systems (fifty) in a single study. The previous related studies on the other hand, have investigated 2-8 systems. The results reported in this paper using experimental procedures are unique, many of which have not been empirically established in the previous literatures, and are interesting because they are not normally intuitively obvious in most cases. The study also serves to empirically validate those results that seem to be intuitive. The results of the study indicate a number of promising effects of design and coding factors on system maintainability. The use of the results from the relatively early phases of software development could significantly help practitioners to improve the quality of systems and thus optimize maintenance costs.
C1 Carleton Univ, Ottawa, ON, Canada.
C3 Carleton University
RP Carleton Univ, 1125 Colonel Dr, Ottawa, ON, Canada.
EM scmisra@connect.carleton.ca
CR ADAMOV R, 1990, J SYST SOFTWARE, V12, P55, DOI 10.1016/0164-1212(90)90066-U
   [Anonymous], 1994, Object-oriented software metrics: a practical guide
   [Anonymous], 1994, P 4 INT C SOFTWARE Q
   ARISOHM E, 2003, TRSCE0318 CARL U
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   BINKLEY AB, 1997, TR9705 VAND U COMP S
   Briand LC, 2000, J SYST SOFTWARE, V51, P245, DOI 10.1016/S0164-1212(99)00102-8
   Briand LC, 2001, IEEE T SOFTWARE ENG, V27, P963, DOI 10.1109/32.965338
   Briand LC, 2001, IEEE T SOFTWARE ENG, V27, P513, DOI 10.1109/32.926174
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P722, DOI 10.1109/32.815329
   Briand LC, 1998, FIFTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 1998, PROCEEDINGS, P246, DOI 10.1109/METRIC.1998.731251
   BRIAND LC, 1997, P ICSE 97 BOST US, P47
   Cartwright M, 2000, IEEE T SOFTWARE ENG, V26, P786, DOI 10.1109/32.879814
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Chidamber SR, 1998, IEEE T SOFTWARE ENG, V24, P629, DOI 10.1109/32.707698
   CHIDAMBER SR, 1991, P OOPSLA 91, P197
   DALY J, 1996, INT J, V1, P109
   Deligiannis I, 2004, J SYST SOFTWARE, V72, P129, DOI 10.1016/S0164-1212(03)00240-1
   Deligiannis I, 2003, J SYST SOFTWARE, V65, P127, DOI 10.1016/S0164-1212(02)00054-7
   El Emam K, 2002, IEEE T SOFTWARE ENG, V28, P494, DOI 10.1109/TSE.2002.1000452
   Emam KE, 2001, IEEE T SOFTWARE ENG, V27, P630, DOI 10.1109/32.935855
   HALSTEAD MH, 1997, ELEMENTS SOFTWARE SC
   HARRISON R, 2000, P ESCOM C, P449
   HARRISON R, 1991, P EMP ASS SOFTW ENG
   Henderson-Sellers B., 1996, Software Metrics
   Koru AG, 2003, J SYST SOFTWARE, V67, P153, DOI 10.1016/S0164-1212(02)00126-7
   LANNING DL, 1994, COMPUTER, V27, P35, DOI 10.1109/2.312036
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Misra S. C., 2003, SOFTWARE QUALITY PRO, V5, P33
   Misra SC, 2003, LECT NOTES COMPUT SC, V2667, P724
   MISRA SC, 2002, P 12 INT C SOFTW QUA
   MISRA SC, 2003, P 6 INT C BUS INF SY
   OMAN P, 1994, J SYST SOFTWARE, V24, P251, DOI 10.1016/0164-1212(94)90067-1
   Prechelt L, 2003, J SYST SOFTWARE, V65, P115, DOI 10.1016/S0164-1212(02)00053-5
   ROMBACH HD, 1987, IEEE T SOFTWARE ENG, V13, P344, DOI 10.1109/TSE.1987.233165
   Rosenberg J, 1998, FIFTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 1998, PROCEEDINGS, P181, DOI 10.1109/METRIC.1998.731244
   Succi G, 2003, J SYST SOFTWARE, V65, P1, DOI 10.1016/S0164-1212(02)00024-9
   Wake S., 1988, Proceedings of the Conference on Software Maintenance - 1988 (IEEE Cat. No.88CH2615-3), P382, DOI 10.1109/ICSM.1988.10191
   Welker K.D., 1995, Journal of Defense Software Engineering, V8, P19
   Welker KD, 1997, J SOFTW MAINT-RES PR, V9, P127, DOI 10.1002/(SICI)1096-908X(199705)9:3<127::AID-SMR149>3.0.CO;2-S
   [No title captured]
NR 42
TC 51
Z9 55
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2005
VL 13
IS 3
BP 297
EP 320
DI 10.1007/s11219-005-1754-7
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 946IW
UT WOS:000230566600006
DA 2024-07-18
ER

PT J
AU Klusener, AS
   Verhoef, C
AF Klusener, AS
   Verhoef, C
TI 9210: The zip code of another IT-soap
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 3rd IEEE International Workshop on Source Code Analysis and Manipulation
CY SEP 26-27, 2003
CL AMSTERDAM, NETHERLANDS
SP IEEE Comp Soc, TC Software Engn, Netherlands Org Sci Res, Royal Netherlands Acad Arts & Sci
DE software pasteurization; 9210-problem; bank account number portability;
   international bank account number (IBAN); software cost estimation;
   IT-portfolio analysis; automated program transformation; IT-portfolio
   transformation; IT-portfolio management
AB Nine-to-ten (9210) refers to the problem that the Dutch banks are running out of 9-digit bank account numbers and need to convert to 10-digit numbers. At the same time, the Dutch government wants bank account numbers to be portable to encourage competition; this may become European policy. A recent European standard for cross-border money transfers proposes totally nonportable bank account numbers. These orthogonal policies have such a high IT-soap caliber that we sometimes refer to it as 9210 Policy Nils. Whatever the plot of "nine-two-one-o," major challenges are at stake for European banks and other "number crunchers" like tax authorities, mail-order firms, etc. This paper gives insight in cost aspects, the possibilities, and impossibilities of 9210 and related problems.
C1 Software Improvement Grp, Amsterdam, Netherlands.
   Free Univ Amsterdam, Dept Comp Sci, Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Klusener, AS (corresponding author), Software Improvement Grp, Amsterdam, Netherlands.
EM steven@cs.vu.nl; x@cs.vu.nl
CR Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   Brooks Frederick P., 1995, The mythical man-month
   *ECBS, 2002, 201V2218 ECBS TR
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   Jones C., 1998, Estimating Software Cost
   JONES C, 1998, YEAR 2000 SOFTWARE P
   Jones C., 1996, APPL SOFTWARE MEASUR
   JORRITSMALEBBIN.A, 2002, GOVT STANDPOINT FINA
   KLUSENER AS, 2004, IN PRESS SCI COMPUTE
   KOSTER R, 2002, IMPLEMENTATION NUMBE
   MIERITZ L, 2002, PERFORMANCE MANAGEME
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VERHOEF C, 2004, IN PRESS SCI COMPUTE
   *WORK GROUP SWITCH, 2002, 32ME20 WORK GROUP SW
NR 14
TC 9
Z9 9
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2004
VL 12
IS 4
BP 297
EP 309
DI 10.1023/B:SQJO.0000039790.04885.13
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 850EE
UT WOS:000223593200003
DA 2024-07-18
ER

PT J
AU Berry, DM
AF Berry, DM
TI Requirements for maintaining Web access for hearing-impaired individuals
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 3rd International Workshop on Web Site Evolution (WSE 2001)
CY NOV 10, 2001
CL FLORENCE, ITALY
SP IEEE Comp Soc Tech Council Software Engn & Task Force IT Business Applicat, Alberta Software Engn Res Consortium, Univ Calif Riverside
DE access; closed captioning; e-mail; fax; hearing impaired; lipreading;
   lipsynching; movies; sight impaired; talking head; telephone; textual
   and graphical interfaces; TTY; TV; video telephone; voice and audio
   interfaces; voice synthesis
AB The current textual and graphical interfaces to computing, including the Web, is a dream come true for the hearing impaired. However, improved technology for voice and audio interface threaten to end this dream. Requirements are identified for continued access to computing for the hearing impaired. Consideration is given also to improving access to the sight impaired.
C1 Univ Waterloo, Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Univ Waterloo, Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM dberry@uwaterloo.ca
CR *3 WISH SOFTW, 2003, MAGP
   Berry D. M., 2001, 3 INT WORKSH WEB SIT, P33
   BOYD M, 2002, SUNDAY STAR     1110
   CHISHOLM W, 2001, ACM INTERACTIONS, V8, P35
   COMET MB, 2003, LIP SYNC MAKING CHAR
   *EASI, 2003, EQ ACC SOFTW INF
   FAINCHTEIN I, 2002, THESIS U WATERLOO WA
   *IBM, 2003, VIAVOICE
   *ICDRI, 2003, INT CTR DIS RES INT
   Leavitt N, 2003, COMPUTER, V36, P13, DOI 10.1109/MC.2003.1204316
   LINCOLN M, 2001, TESSA
   MARCUS A, 2003, ACM INTERACTIONS, V10, P23
   MARTIN GC, 2003, EXTENDED P BLAIR PHO
   Ross M, 2002, SOFTWARE QUAL J, V10, P285, DOI 10.1023/A:1022185920401
   *SIGNT INC, 2003, OP DOORW COMM
   *SIGNT INC, 2003, DEAF AM
   *SPEECHVIEW, 2003, YOUR LINK HEAR WORLD
   *SYS CONS LTD, 2003, TESS PROJ
   *TAP PROGR, 2002, CAN I US REG COMP MO
   *VISICAST, 2003, TESSA
   WANG J, 2003, ACM INTERACTIONS, V10, P88
   *WATCHF CORP, 2003, WELC BOBB
   WILLIAMS N, 1998, TTY BASICS TAP PROGR
NR 23
TC 2
Z9 4
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2004
VL 12
IS 1
BP 9
EP 28
DI 10.1023/B:SQJO.0000013356.15791.3d
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 767DE
UT WOS:000188424300002
DA 2024-07-18
ER

PT J
AU Rodriguez, A
   Gardey, JC
   Grigera, J
   Rossi, G
   Garrido, A
AF Rodriguez, Andres
   Gardey, Juan Cruz
   Grigera, Julian
   Rossi, Gustavo
   Garrido, Alejandra
TI UX debt in an agile development process: evidence and characterization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Technical debt; User experience; UX smells; Refactoring; User testing;
   A/B testing
ID TECHNICAL DEBT
AB The metaphor of technical debt (TD) has generated a conceptual framework on factors that weaken the quality of software and accumulate a repair cost. However, user-related aspects like user experience (UX) receive little consideration among TD types, for reasons like the substantial focus on code TD, some dynamics inherent to agile processes, and an apparent lack of cumulative cost over time. This article has two main goals: first, to present evidence of the existence of UXDebt as a type of TD, with a cumulative cost for the development team as well as stakeholders; second, to propose a definition and characterization of UXDebt that may serve as a frame for further research on methods and tools for continuous management within agile processes. For the first goal, we have compiled evidence on the current state of UXDebt from three sources: a literature review, a survey among software engineering professionals in agile teams, and the analysis of UX issues in GitHub. All sources have evidenced some form of UXDebt; surveyed practitioners have recognized its poor management with a cost for the entire team that accumulates over time. Moreover, issue tracking systems allow to visualize and measure a technical form of UXDebt. For the second goal, we have defined a conceptual model that characterizes UXDebt in terms of both technical and non-technical aspects. On the technical side, we propose the notion of UX smells which allows us to discuss concrete management activities.
C1 [Rodriguez, Andres; Gardey, Juan Cruz; Grigera, Julian; Rossi, Gustavo; Garrido, Alejandra] Univ Nac La Plata, Fac Informat, LIFIA, La Plata, Argentina.
   [Gardey, Juan Cruz; Grigera, Julian; Rossi, Gustavo; Garrido, Alejandra] Consejo Nacl Invest Cient & Tecn, Buenos Aires, Argentina.
   [Grigera, Julian] CICPBA, La Plata, Buenos Aires, Argentina.
C3 National University of La Plata; Consejo Nacional de Investigaciones
   Cientificas y Tecnicas (CONICET)
RP Rodriguez, A (corresponding author), Univ Nac La Plata, Fac Informat, LIFIA, La Plata, Argentina.
EM arodrig@lifia.info.unlp.edu.ar
RI Garrido, Alejandra/GRF-5135-2022
FU Argentinian National Agency for Scientific and Technical Promotion
   (ANPCyT) [PICT-2019-02485]
FX This research has been funded by the Argentinian National Agency for
   Scientific and Technical Promotion (ANPCyT), grant number
   PICT-2019-02485.
CR Alves NSR, 2016, INFORM SOFTWARE TECH, V70, P100, DOI 10.1016/j.infsof.2015.10.008
   Ampatzoglou A, 2015, INFORM SOFTWARE TECH, V64, P52, DOI 10.1016/j.infsof.2015.04.001
   [Anonymous], 2000, Software Cost Estimation with COCOMO II
   Avgeriou P, 2016, Dagstuhl reports, V6, DOI DOI 10.4230/DAGREP.6.4.110
   Baltes S., 2021, ARXIV
   Behutiye WN, 2017, INFORM SOFTWARE TECH, V82, P139, DOI 10.1016/j.infsof.2016.10.004
   Besker T, 2019, J SYST SOFTWARE, V156, P41, DOI 10.1016/j.jss.2019.06.004
   Besker T, 2017, PROC IEEE INT CONF S, P13, DOI 10.1109/ICSME.2017.42
   Blair J., 2013, Designing surveys: A guide to decisions and procedures, V3rd
   Brhel M, 2015, INFORM SOFTWARE TECH, V61, P163, DOI 10.1016/j.infsof.2015.01.004
   Bruun A, 2018, NORDICHI'18: PROCEEDINGS OF THE 10TH NORDIC CONFERENCE ON HUMAN-COMPUTER INTERACTION, P352, DOI 10.1145/3240167.3240213
   Chan V., 2017, HERES REVERSE 7 THIN
   Ciolkowski M, 2021, IEEE SOFTWARE, V38, P24, DOI 10.1109/MS.2021.3105625
   Cooper A., 2015, ESSENTIALS INTERACTI, P3
   Gardey JC, 2022, INT J HUM-COMPUT ST, V168, DOI 10.1016/j.ijhcs.2022.102919
   Cunningham W., 1992, ACM SIGPLAN OOPS MES, V4
   Curtis B., 2012, Proceedings 2012 Third International Workshop on Managing Technical Debt (MTD 2012), P49, DOI 10.1109/MTD.2012.6226000
   Da Silva T. S., 2011, AG 2011
   daFonsecaLage L., 2019, 2019 ACM IEEE INT S
   DaSilva T., 2018, INFORM SOFTWARE TECH, V102
   Djamasbi S., 2014, HCI BUSINESS
   Erdos F., 2019, 10 IEEE INT C COGN I
   Firmenich S, 2019, SOFTWARE QUAL J, V27, P203, DOI 10.1007/s11219-018-9413-y
   Fontana F., 2012, 2012 3 INT WORKSH MA
   Fowler Martin, 2009, Technical debt quadrant, 2009
   Gardey J. C., 2020, EICS, V4
   Gardey J. C., 2021, 11 BRAZ WORKSH AG ME
   Garrido A., 2017, 6 INT WORKSH SOFTW M
   Garrido A, 2011, IEEE SOFTWARE, V28, P60, DOI 10.1109/MS.2010.114
   Gothelf J., 2021, LEAN UX APPL LEAN PR
   Gregerson D., 2021, 7 STEPS BRIDGE USER
   Grigera J., 2017, INT J HUM-COMPUT ST, V97
   Hassenzahl M, 2006, BEHAV INFORM TECHNOL, V25, P91, DOI 10.1080/01449290500330331
   Hassenzahl M., 2021, USER EXPERIENCE IS A, P20
   Hassenzahl M., 2007, BEING DOING PERSPECT
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hinderks A, 2019, COMPUT STAND INTER, V65, P38, DOI 10.1016/j.csi.2019.01.007
   ISO, 2019, Ergonomics of human-system interaction-Part 210: human-centered design for interactive systems
   ISO/IEC, 2011, ISO/IEC 25010:2011 Systems and software engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality models
   Kaley A., 2018, UX DEBT IDENTIFY PRI
   Kohavi R, 2020, TRUSTWORTHY ONLINE CONTROLLED EXPERIMENTS: A PRACTICAL GUIDE TO A/B TESTING, P1, DOI 10.1017/9781108653985
   Kuusinen K, 2016, HUMAN COMPU, P205, DOI 10.1007/978-3-319-32165-3_9
   Lavazza L., 2018, P 2018 INT C TECHN D
   Law ELC, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P719
   Lee Y., 2003, Communications of the Association for Information Systems, V12, P752, DOI [DOI 10.17705/1CAIS.01250, 10.17705/1CAIS.01250]
   Lenarduzzi V., 2021, J SYSTEMS SOFTWARE, V171
   Li ZY, 2015, J SYST SOFTWARE, V101, P193, DOI 10.1016/j.jss.2014.12.027
   Martini A, 2020, ASIA PAC SOFWR ENG, P316, DOI [10.1109/APSEC51365.2020.00040, 10.1109/APSE051365.2020.00040]
   Maudet N., 2017, DESIGN BREAKDOWNS DE
   Nielsen J., 2020, 10 Usability Heuristics for User Interface Design
   Nielsen Jakob, 2005, Putting A/B testing in its place
   Potdar A, 2014, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2014.31
   RamirezLahti J., 2021, IEEE ACM INT C TECHN
   Rios N, 2018, INFORM SOFTWARE TECH, V102, P117, DOI 10.1016/j.infsof.2018.05.010
   Sauro J, 2012, QUANTIFYING THE USER EXPERIENCE: PRACTICAL STATISTICS FOR USER RESEARCH, P1
   Silva T. S. D., 2013, INT C DES US EXP US
   Storrle H., 2019, 45 EUR C SOFTW ENG A
   Tamburri DA, 2013, 2013 6TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE), P93, DOI 10.1109/CHASE.2013.6614739
   Theodoropoulos T., 2011, P 2 WORKSH MAN TECHN
   Tom E, 2013, J SYST SOFTWARE, V86, P1498, DOI 10.1016/j.jss.2012.12.052
   Tsoukalas D, 2018, 2018 9TH INTERNATIONAL CONFERENCE ON INTELLIGENT SYSTEMS (IS), P698, DOI 10.1109/IS.2018.8710521
   Tuch AN, 2012, COMPUT HUM BEHAV, V28, P1596, DOI 10.1016/j.chb.2012.03.024
   Twidale M., 2005, P 38 ANN HAW INT C S
   Wright A., 2013, USER EXPERIENCE DEBT
   Xavier L, 2020, IEEE WORK CONF MIN S, P137, DOI 10.1145/3379597.3387459
   Zazworka N., 2013, P 17 INT C EV ASS SO
NR 66
TC 0
Z9 0
U1 1
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1467
EP 1498
DI 10.1007/s11219-023-09652-2
EA OCT 2023
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001091891400001
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Alcon, M
   Tabani, H
   Abella, J
   Cazorla, FJ
AF Alcon, Miguel
   Tabani, Hamid
   Abella, Jaume
   Cazorla, Francisco J.
TI Dynamic and execution views to improve validation, testing, and
   optimization of autonomous driving software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE ISO 26262; Autonomous driving; Verification; Testing; Validation; MPSoC
AB The adoption of autonomous driving (AD) software executed on high-performance multi-processor systems on chip (MPSoCs) contributes to increasing the overall system's safety and efficiency. However, existing AD software frameworks are provided as complete implementations that do not follow any domain-specific safety-requirement centric development process. In this paper, we develop, for the first time, ISO 26262 dynamic views of a representative AD framework, Apollo. Dynamic views are a key element of software architectural design that links safety software requirements with their implementation, and are the basis to verify that all casuistics are properly considered in the design and tested in the validation tests. We also show that dynamic views miss key information of the execution parallelism of Apollo, needed to assess and improve execution efficiency to meet performance-related safety requirements and reduce resource utilization. We cover this gap by proposing execution views that capture the parallelism exploited by the analyzed application on the target MPSoC. Execution views improve greatly resource usage testing, which is required by ISO 26262, and allow better resource utilization contributing to the stringent cost-reduction requirements in automotive domains.
C1 [Alcon, Miguel; Tabani, Hamid; Abella, Jaume; Cazorla, Francisco J.] Barcelona Supercomp Ctr, Barcelona, Spain.
   [Alcon, Miguel] Univ Politecn Cataluna, Barcelona, Spain.
C3 Universitat Politecnica de Catalunya; Barcelona Supercomputer Center
   (BSC-CNS); Universitat Politecnica de Catalunya
RP Alcon, M (corresponding author), Barcelona Supercomp Ctr, Barcelona, Spain.; Alcon, M (corresponding author), Univ Politecn Cataluna, Barcelona, Spain.
EM miguel.alcon@bsc.es; hamid.tabani@bsc.es; jaume.abella@bsc.es;
   francisco.cazorla@bsc.es
RI ; Cazorla, Francisco J./D-7261-2016; Abella, Jaume/B-7422-2016
OI Alcon, Miguel/0000-0002-5372-6724; Cazorla, Francisco
   J./0000-0002-3344-376X; Abella, Jaume/0000-0001-7951-4028
FU Spanish Ministry of Science and Innovation (AEI) [PID2019-107255GBC21];
   European Research Council (ERC) [772773]; European Research Council
   (ERC) [772773] Funding Source: European Research Council (ERC)
FX This work has been supported by the Spanish Ministry of Science and
   Innovation under grant PID2019-107255GBC21/AEI/10.13039/501100011033 and
   the European Research Council (ERC) grant agreement no. 772773
   (SuPerCom).
CR Abdessalem R. B., 2018, INT C AUT SOFTW ENG
   Alcon M, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P1953, DOI 10.1145/3341105.3373938
   AMD, 2021, AMD RYZ 7 1800X PROC
   [Anonymous], 2019, VALGR DEV
   Apollo, 2018, OP AUT DRIV PLATF
   Autoware, 2016, OP AUT DRIV PLATF
   Behles C., 2020, THESIS U MEMPHIS
   BERGER K, 2015, INT WORK QUAL MULTIM, pNI183
   Broy Manfred, 2012, What is the Benefit of a Model-Based Design of Embedded Software Systems in the Car Industry?, P343, DOI [10.4018/978-1-61350-438-3.ch013, DOI 10.4018/978-1-61350-438-3.CH013]
   GAS Workgroup, 2015, STAND E GAS MON CONC
   International Electrotechnical Commission, 2009, 61508 IEC 1
   International Organization for Standardization, 2019, ISO/PAS 21448
   International Standards Organization, 2009, ISO/DIS 26262
   Jia YQ, 2014, PROCEEDINGS OF THE 2014 ACM CONFERENCE ON MULTIMEDIA (MM'14), P675, DOI 10.1145/2647868.2654889
   Khusainova, 2019, FASHION IS NEXT BATT
   Liu SS, 2019, P IEEE, V107, P1697, DOI 10.1109/JPROC.2019.2915983
   Nvidia, 2021, NVIDIA DRIV PX
   Nvidia, 2021, NVIDIA DRIV AGX DEV
   Nvidia, 2021, JETS TX2
   Nvidia, 2021, GEFORCE GTX 1080 TI
   Ochieng WY, 2002, TRANSPORT RES C-EMER, V10, P171, DOI 10.1016/S0968-090X(02)00008-6
   Paraver, 2021, FLEX PERF AN TOOL
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Powell M, 2000, ISLPED '00: PROCEEDINGS OF THE 2000 INTERNATIONAL SYMPOSIUM ON LOW POWER ELECTRONICS AND DESIGN, P90, DOI 10.1109/LPE.2000.876763
   Quigley M, 2009, IEEE INT CONF ROBOT, P3604
   Rajabli N, 2021, IEEE ACCESS, V9, P4797, DOI 10.1109/ACCESS.2020.3048047
   Rana R, 2014, COMM COM INF SC, V457, P164, DOI 10.1007/978-3-662-44920-2_11
   RapiTask, PROD RAP
   RapiTime, 2008, PROD RAP
   Redmon J, 2018, Arxiv, DOI [arXiv:1804.02767, DOI 10.1109/CVPR.2017.690, DOI 10.48550/ARXIV.1804.02767]
   Synopsys, 2017, CERT FUNCT QUAL SYST
NR 31
TC 0
Z9 0
U1 1
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 405
EP 439
DI 10.1007/s11219-022-09609-x
EA FEB 2023
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000936721900001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Yevtushenko, N
   Kuliamin, V
   Kushik, N
AF Yevtushenko, Nina
   Kuliamin, Victor
   Kushik, Natalia
TI Evaluating the complexity of deriving adaptive <i>S</i>'-homing and
   <i>S</i>′-synchronizing sequences for nondeterministic FSMs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Nondeterministic finite state machine (FSM); Adaptive S'-homing
   sequence; Adaptive S'-synchronizing sequence
ID FINITE-STATE MACHINES; CHECKING
AB Homing and synchronizing sequences (HSs and SSs) are used in Finite State Machine (FSM)-based testing for state identification when deriving a test suite with guaranteed fault coverage or when performing a non-intrusive (passive) testing or monitoring. However, such preset sequences do not always exist for nondeterministic FSMs or can be rather long if existing. Adaptive HSs and SSs are known to exist more often and can be much shorter which makes them attractive for deriving test suites and adaptive checking sequences. As nowadays, a number of specifications are represented by nondeterministic FSMs, there is a need for the deeper study of such sequences, their derivation strategies, and related complexity estimation / reduction. In this paper, given an FSM and a subset S' of its states, we are concerned with the existence check and derivation of S'-homing and S'-synchronizing adaptive sequences (test cases) which allow to reduce the uncertainty about the current state of the FSM up to a state of the subset S'. There are a number of research papers on evaluating the complexity of the existence check of adaptive HS / SS as well as on estimating the length of an HS / SS, and in the ICTSS'19 conference, we presented the complexity of their derivation for non-initialized complete nondeterministic FSMs. In this paper, we utilize the criteria of the ICTSS'19 paper to estimate the complexity of the existence check and derivation of S'-homing and S'-synchronizing test cases for non-initialized observable nondeterministic FSMs. Some sufficient conditions for weakly initialized FSMs to have adaptive S'-homing and S'-synchronizing test cases are also established.
C1 [Yevtushenko, Nina; Kuliamin, Victor] Russian Acad Sci, Ivannikov Inst Syst Programming, 25 Alexander Solzhenitsyn St, Moscow 109004, Russia.
   [Kushik, Natalia] Inst Polytech Paris, Telecom SudParis, CNRS, SAMOVAR, 9 Rue Charles Fourier, F-91000 Evry, France.
C3 Ivannikov Institute for System Programming of the RAS; Russian Academy
   of Sciences; IMT - Institut Mines-Telecom; Institut Mines-Telecom
   Business School; Centre National de la Recherche Scientifique (CNRS);
   Institut Polytechnique de Paris; Telecom SudParis
RP Kushik, N (corresponding author), Inst Polytech Paris, Telecom SudParis, CNRS, SAMOVAR, 9 Rue Charles Fourier, F-91000 Evry, France.
EM evtushenko@ispras.ru; kuliamin@ispras.ru;
   nalatia.kushik@telecom-sudparis.eu
RI Yevtushenko, Nina/HFZ-9351-2022; Kushik, Natalia G./P-1756-2014
OI Kushik, Natalia/0000-0002-8691-6655
FU RFBR [19-0700327/19]
FX The authors would like to thank Dr. Husnu Yenigun for fruitful
   discussions on the complexity of FSM state identification sequences;
   those discussions together with the joint results on the existence check
   of the related sequences were very helpful for moving forward to the
   complexity of the HTC and STC derivation, i.e., the results presented in
   this paper. This work is partly supported by RFBR project N
   19-0700327/19.
CR Alur R., 1995, Proceedings of the Twenty-Seventh Annual ACM Symposium on the Theory of Computing, P363, DOI 10.1145/225058.225161
   [Anonymous], 1964, 5 ANN S SWITCH CIRC, DOI DOI 10.1109/SWCT.1964.8
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Gill A., 1962, Introduction to the Theory of Finite-State Machines
   Hierons RM, 2002, IEEE T COMPUT, V51, P1111, DOI 10.1109/TC.2002.1032630
   Ito M, 2004, LECT NOTES COMPUT SC, V3113, P125
   Kushik Natalia, 2016, AMARETTO 2016. Proceedings of the International Workshop on Domain-Specific Model-Based Approaches to Verification and Validation, P83
   Kushik Natalia, 2013, Implementation and Application of Automata. 18th International Conference, CIAA 2013. Proceedings: LNCS 7982, P220, DOI 10.1007/978-3-642-39274-0_20
   Kushik Natalia, 2013, Testing Software and Systems. 25th IFIP WG 6.1 International Conference, ICTSS 2013. Proceedings: LNCS 8254, P33, DOI 10.1007/978-3-642-41707-8_3
   Kushik N, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P315, DOI 10.1109/QRS.2016.43
   Kushik N, 2016, INT J SOFTW TOOLS TE, V18, P251, DOI 10.1007/s10009-014-0357-7
   Kushik N, 2015, ELECTRON P THEOR COM, P73, DOI 10.4204/EPTCS.180.5
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   LEE D, 1994, IEEE T COMPUT, V43, P306, DOI 10.1109/12.272431
   Petrenko A, 2006, LECT NOTES COMPUT SC, V3997, P118
   Sandberg S, 2005, LECT NOTES COMPUT SC, V3472, P5
   Türker UC, 2014, FORM METHOD SYST DES, V44, P264, DOI 10.1007/s10703-014-0205-0
   von Bochmann G., 1994, SIGSOFT Software Engineering Notes, P109
   Yenigün H, 2017, INFORM PROCESS LETT, V127, P49, DOI 10.1016/j.ipl.2017.07.001
   Yevtushenko N, 2019, LECT NOTES COMPUT SC, V11812, P86, DOI 10.1007/978-3-030-31280-0_6
NR 20
TC 0
Z9 0
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 161
EP 180
DI 10.1007/s11219-021-09548-z
EA APR 2021
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000639696700001
DA 2024-07-18
ER

PT J
AU Roman, A
   Mnich, M
AF Roman, Adam
   Mnich, Michal
TI Test-driven development with mutation testing - an experimental study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE TDD; Test-driven development; Mutation testing; Test-first approach
ID SOFTWARE QUALITY; PAIR
AB Test-driven development (TDD) is a popular design approach used by the developers with testing being the important software development driving factor. On the other hand, mutation testing is considered one of the most effective testing techniques. However, there is not so much research on combining these two techniques together. In this paper, we propose a novel, hybrid approach called TDD+M which combines test-driven development process together with the mutation approach. The aim was to check whether this modified approach allows the developers to write a better quality code. We verify our approach by conducting a controlled experiment and we show that it achieves better results than the sole TDD technique. The experiment involved 22 computer science students split into eight groups. Four groups (TDD+M) were using our approach, the other four (TDD) - a normal TDD process. We performed a cross-experiment by measuring the code coverage and mutation coverage for each combination (code of group X, tests from group Y). The TDD+M tests achieved better coverage on the code from TDD groups than the TDD tests on their own code (53.3% vs. 33.5% statement coverage and 64.9% vs. 37.5% mutation coverage). The TDD+M tests also found more post-release defects in the TDD code than TDD tests in the TDD+M code. The experiment showed that adding mutation into the TDD process allows the developers to provide better, stronger tests and to write a better quality code.
C1 [Roman, Adam] Jagiellonian Univ, Inst Comp Sci & Computat Math, Krakow, Poland.
   [Mnich, Michal] Jagiellonian Univ, Fac Phys Astron & Appl Comp Sci, Krakow, Poland.
C3 Jagiellonian University; Jagiellonian University
RP Roman, A (corresponding author), Jagiellonian Univ, Inst Comp Sci & Computat Math, Krakow, Poland.
EM roman@ii.uj.edu.pl; michal.mnich@uj.edu.pl
OI Roman, Adam/0000-0002-1020-5128
CR Ahmed I, 2017, IEEE ICST WORKSHOP, P110, DOI 10.1109/ICSTW.2017.26
   Ahmed I, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P547, DOI 10.1145/2950290.2950324
   Aichernig BK, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P626
   Ammann P, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P21, DOI 10.1109/ICST.2014.13
   Ammann Paul, 2008, Introduction to software testing, V1st
   [Anonymous], 2018, STATE AGILE REPORT
   Astels Dave, 2003, Test-Driven Development: A Practical Guide
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   Beck K., 2002, TEST DRIVEN DEV
   Bhat T., 2006, Proceedings of the 2006 ACM/IEEE International Symposium on Empirical Software Engineering (ISESE '06), P356, DOI [DOI 10.1145/1159733.1159787, 10.1145/1159733.1159787]
   Çalikli G, 2013, SOFTWARE QUAL J, V21, P377, DOI 10.1007/s11219-012-9180-0
   Causevic A, 2012, LECT NOTES BUS INF P, V111, P138
   Chekam TT, 2017, PROC INT CONF SOFTW, P597, DOI 10.1109/ICSE.2017.61
   Cohen J., 1988, STAT POWER ANAL BEHA
   Coles H., 2016, P 25 INT S SOFTWARE, P449
   Crispin I, 2006, IEEE SOFTWARE, V23, P70, DOI 10.1109/MS.2006.157
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Derezinska A, 2015, ADV INTELL SYST, V365, P131, DOI 10.1007/978-3-319-19216-1_13
   Erdogmus H, 2005, IEEE T SOFTWARE ENG, V31, P226, DOI 10.1109/TSE.2005.37
   Flohr T, 2006, LECT NOTES COMPUT SC, V4034, P305
   Fucci D, 2017, IEEE T SOFTWARE ENG, V43, P597, DOI 10.1109/TSE.2016.2616877
   George B, 2004, INFORM SOFTWARE TECH, V46, P337, DOI 10.1016/j.infsof.2003.09.011
   Geras A, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P405, DOI 10.1109/METRIC.2004.1357925
   Gligoric M, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2660767
   Gopinath R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P72, DOI 10.1145/2568225.2568278
   Groce A, 2015, IEEE INT CONF AUTOM, P737, DOI 10.1109/ASE.2015.40
   Gupta Atul, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P285
   Huang L, 2009, INFORM SOFTWARE TECH, V51, P182, DOI 10.1016/j.infsof.2008.03.007
   ISO, 2005, 250002005 ISO ISOIEC
   Janzen D, 2005, P C OBJ OR PROGR SYS, P222, DOI [10.1145/1094855.1094945, DOI 10.1145/1094855.1094945]
   Janzen DS, 2008, IEEE SOFTWARE, V25, P77, DOI 10.1109/MS.2008.34
   Janzen DS, 2006, CONF SOFTW ENG EDUC, P141, DOI 10.1109/CSEET.2006.25
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Khanam Z., 2017, Internat. J. Appl. Eng. Res., V12, P7705
   Kim SW, 2001, SOFTW TEST VERIF REL, V11, P207, DOI 10.1002/stvr.238
   Kirk M, 2018, PIT MUTATION TESTING
   Li N, 2009, IEEE ICST WORKSHOP, P220, DOI 10.1109/ICSTW.2009.30
   Likert R., 1932, ARCH PSYCHOL, V22, P55
   Ma YS, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P352, DOI 10.1109/ISSRE.2002.1173287
   Madeyski L, 2005, FRONT ARTIF INTEL AP, V130, P113
   Madeyski L, 2010, TEST-DRIVEN DEVELOPMENT, P1, DOI 10.1007/978-3-642-04288-1_1
   Madeyski L, 2010, INFORM SOFTWARE TECH, V52, P169, DOI 10.1016/j.infsof.2009.08.007
   Muller M. M., 2002, IEE Proceedings-Software, V149, P131, DOI 10.1049/ip-sen:20020540
   Munir H, 2014, INFORM SOFTWARE TECH, V56, P375, DOI 10.1016/j.infsof.2014.01.002
   Panur M., 2003, EUROCON, P83
   PANUR M, 2011, INFORM SOFTWARE TECH, V53, P557
   Papadakis M, 2019, ADV COMPUT, V112, P275, DOI 10.1016/bs.adcom.2018.03.015
   Papadakis M, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P537, DOI 10.1145/3180155.3180183
   Ramler R., 2017, P S APPL COMP ACM NE, P1401, DOI [10.1145/3019612.3019830, DOI 10.1145/3019612.3019830]
   Sawilowsky SS, 2009, J MOD APPL STAT METH, V8, P597, DOI 10.22237/jmasm/1257035100
   SIMPSON EH, 1951, J ROY STAT SOC B, V13, P238
   Siniaalto Maria, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P275
   Tosun A, 2018, PROCEEDINGS OF THE 2018 INTERNATIONAL CONFERENCE ON SOFTWARE AND SYSTEM PROCESS (ICSSP 2018), P113, DOI 10.1145/3202710.3203153
   WILLSON VL, 1982, AM EDUC RES J, V19, P249, DOI 10.2307/1162568
NR 55
TC 3
Z9 4
U1 4
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2021
VL 29
IS 1
BP 1
EP 38
DI 10.1007/s11219-020-09534-x
EA NOV 2020
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QZ5CV
UT WOS:000590507100003
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Gualo, F
   Caballero, I
   Rodriguez, M
AF Gualo, Fernando
   Caballero, Ismael
   Rodriguez, Moises
TI Integrating security and privacy in software development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Privacy by Design; Security by design; Secure software development;
   Secure architecture; System re-engineering; Cybersecurity; Application
   security
ID DESIGN
AB As a consequence to factors such as progress made by the attackers, release of new technologies and use of increasingly complex systems, and threats to applications security have been continuously evolving. Security of code and privacy of data must be implemented in both design and programming practice to face such scenarios. In such a context, this paper proposes a software development approach, Privacy Oriented Software Development (POSD), that complements traditional development processes by integrating the activities needed for addressing security and privacy management in software systems. The approach is based on 5 key elements (Privacy by Design, Privacy Design Strategies, Privacy Pattern, Vulnerabilities, Context). The approach can be applied in two directions forward and backward, for developing new software systems or re-engineering an existing one. This paper presents the POSD approach in the backward mode together with an application in the context of an industrial project. Results show that POSD is able to discover software vulnerabilities, identify the remediation patterns needed for addressing them in the source code, and design the target architecture to be used for guiding privacy-oriented system re-engineering.
C1 [Gualo, Fernando; Caballero, Ismael; Rodriguez, Moises] DQTeam SL, Paseo Moledores S-N, Ciudad Real 13071, Spain.
   [Gualo, Fernando; Caballero, Ismael; Rodriguez, Moises] UCLM, Inst Tecnol & Sistemas Informac, Paseo Moledores S-N, Ciudad Real 13071, Spain.
   [Rodriguez, Moises] AQCLab, Paseo Moledores S-N, Ciudad Real 13071, Spain.
C3 Universidad de Castilla-La Mancha
RP Gualo, F (corresponding author), DQTeam SL, Paseo Moledores S-N, Ciudad Real 13071, Spain.; Gualo, F (corresponding author), UCLM, Inst Tecnol & Sistemas Informac, Paseo Moledores S-N, Ciudad Real 13071, Spain.
EM fgualo@dqteam.es; Caballero@uclm.es; mrodriguez@aqclab.es
RI Gualo, Fernando/AAL-3242-2020; Caballero, Ismael/A-1079-2010; Piattini,
   Mario/F-6271-2013; Rodriguez, Moises/N-3490-2016
OI Gualo, Fernando/0000-0002-7800-7902; Caballero,
   Ismael/0000-0002-5189-1427; Piattini, Mario/0000-0002-7212-8279;
   Rodriguez, Moises/0000-0003-2155-7409
CR [Anonymous], 2019, RES DOC
   [Anonymous], Owasp top ten 2017
   Ardimento P, 2004, LECT NOTES COMPUT SC, V3009, P159
   Ardimento P, 2008, J INF KNOWL MANAG, V7, P197, DOI 10.1142/S0219649208002081
   Baldassarre M.T., 2019, P ITASEC
   Baldassarre M. T., 2019, TARGET ARCHITECTURE
   Baldassarre M. T., 2013, P 17 INT C EV ASS SO, P144, DOI [10.1145/2460999.2461020, DOI 10.1145/2460999.2461020]
   Baldassarre MT, 2018, 2018 AEIT INTERNATIONAL ANNUAL CONFERENCE
   Baldassarre Maria Teresa, 2019, QUALITY INFORM COMMU, P18, DOI DOI 10.1007/978-3-030-29238-6_2
   Baldassarre MT, 2005, PROC IEEE INT CONF S, P283
   Black P. E., 2016, DRAMATICALLY REDUCIN, DOI [10.6028/NIST.IR.8151, DOI 10.6028/NIST.IR.8151]
   Caivano D, 2018, J SYST SOFTWARE, V144, P143, DOI 10.1016/j.jss.2018.06.026
   Cavoukian A., 2012, Operationalizing privacy by design: A guide to implementing
   Cavoukian A, 2016, IEEE POTENTIALS, V35, P43, DOI 10.1109/MPOT.2016.2569741
   Center for Internet Security, 2019, CIS BENCHM RES DOC
   Colesky M, 2016, 2016 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2016), P33, DOI 10.1109/SPW.2016.23
   Diamantopoulou V, 2017, INT CONF RES CHAL, P187, DOI 10.1109/RCIS.2017.7956536
   Farhat A., 2018, P 21 SAUDI COMPUTER, P1
   Fernández-Sáez AM, 2016, EMPIR SOFTW ENG, V21, P212, DOI 10.1007/s10664-014-9354-4
   Fortify Static Code Analyze (SCA), 2019, RES DOC MICR
   Halkidis ST, 2008, IEEE T DEPEND SECURE, V5, P129, DOI 10.1109/TDSC.2007.70240
   Hansen M, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P159, DOI 10.1109/SPW.2015.13
   Hatzivasilis G, 2016, IEEE SOFTWARE, V33, P46, DOI 10.1109/MS.2016.61
   Hilbrich M, 2017, 2017 IEEE 7TH INTERNATIONAL SYMPOSIUM ON CLOUD AND SERVICE COMPUTING (SC2 2017), P237, DOI 10.1109/SC2.2017.43
   Hoepman JH, 2014, IFIP ADV INF COMM TE, V428, P446
   Jaatun MG, 2015, LECT NOTES COMPUT SC, V9290, P120, DOI 10.1007/978-3-319-23318-5_7
   Kalloniatis C, 2008, REQUIR ENG, V13, P241, DOI 10.1007/s00766-008-0067-3
   Kissel R. L., 2008, SPECIAL PUBLICATION
   Liu YB, 2016, CHINA COMMUN, V13, P178, DOI 10.1109/CC.2016.7405735
   Moral-García S, 2010, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCES ON PERVASIVE PATTERNS AND APPLICATIONS (PATTERNS 2010), P66
   Morales -Trujillo M.E., 2018, Av. en Ing. Softw. a Niv. Iberoam. CIbSE, V22, P107
   Navarro-Machuca J, 2016, 2016 IEEE 2ND INTERNATIONAL CONFERENCE ON BIG DATA SECURITY ON CLOUD (BIGDATASECURITY), IEEE INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE AND SMART COMPUTING (HPSC), AND IEEE INTERNATIONAL CONFERENCE ON INTELLIGENT DATA AND SECURITY (IDS), P116, DOI 10.1109/BigDataSecurity-HPSC-IDS.2016.46
   Notario N, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P151, DOI 10.1109/SPW.2015.22
   Ortiz R, 2011, WOSIS 2011: SECURITY IN INFORMATION SYSTEMS, P59
   OWASP Testing Guide, 2016, RES DOC
   Privacy Patterns, PRIV PATT
   Spiekermann S, 2009, IEEE T SOFTWARE ENG, V35, P67, DOI 10.1109/TSE.2008.88
   Suphakul T, 2017, 2017 18TH IEEE/ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING (SNDP 2017), P369, DOI 10.1109/SNPD.2017.8022748
   Thomborson Clark, 2016, 2016 14 ANN C PRIV S, P656
   Tung Y.-H., 2016, 2016 18 ASIA PACIFIC, P1, DOI [DOI 10.1109/APNOMS.2016, DOI 10.1109/APNOMS.2016.7737238]
   Van Blarkom GW., 2003, The handbook of privacy and privacy enhancing technologies: the case of intelligent software agents
NR 41
TC 2
Z9 2
U1 1
U2 23
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1019
EP 1042
DI 10.1007/s11219-019-09495-w
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000567505300006
OA Green Published
DA 2024-07-18
ER

PT J
AU Zimmermann, M
   Wotawa, F
AF Zimmermann, Martin
   Wotawa, Franz
TI An adaptive system for autonomous driving
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Self-adaptive systems; Validation using simulation; Adaptive control
AB Having systems that can adapt themselves in case of faults or changing environmental conditions is of growing interest for industry and especially for the automotive industry considering autonomous driving. In autonomous driving, it is vital to have a system that is able to cope with faults in order to enable the system to reach a safe state. In this paper, we present an adaptive control method that can be used for this purpose. The method selects alternative actions so that given goal states can be reached, providing the availability of a certain degree of redundancy. The action selection is based on weight models that are adapted over time, capturing the success rate of certain actions. Besides the method, we present a Java implementation and its validation based on two case studies motivated by the requirements of the autonomous driving domain. We show that the presented approach is applicable both in case of environmental changes but also in case of faults occurring during operation. In the latter case, the methods provide an adaptive behavior very much close to the optimal selection.
C1 [Zimmermann, Martin; Wotawa, Franz] Graz Univ Technol, Inst Software Technol, Christian Doppler Lab Qual Assurance Methodol Cyb, Inffeldgasse 16b, A-8010 Graz, Austria.
C3 Graz University of Technology
RP Wotawa, F (corresponding author), Graz Univ Technol, Inst Software Technol, Christian Doppler Lab Qual Assurance Methodol Cyb, Inffeldgasse 16b, A-8010 Graz, Austria.
EM martin.zimmermann@tugraz.at; wotawa@ist.tugraz.at
OI Wotawa, Franz/0000-0002-0462-2283
FU Graz University of Technology; Austrian Federal Ministry for Digital and
   Economic Affairs; National Foundation for Research, Technology and
   Development; Christian Doppler Research Association
FX Open access funding provided by Graz University of Technology. The
   financial support by the Austrian Federal Ministry for Digital and
   Economic Affairs, the National Foundation for Research, Technology and
   Development and the Christian Doppler Research Association is gratefully
   acknowledged.
CR [Anonymous], THESIS
   Barna Cornel, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P65, DOI 10.1109/SEAMS.2017.12
   Brandsoetter M, 2007, 2007 IEEE/RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS, VOLS 1-9, P1209
   Caraffi C, 2012, IEEE INT C INTELL TR, P975, DOI 10.1109/ITSC.2012.6338748
   Computing A., 2006, IBM White Paper, 31, V31, P1
   Engel G, 2019, LECT NOTES ARTIF INT, V11606, P137, DOI 10.1007/978-3-030-22999-3_13
   FIKES RE, 1971, ARTIF INTELL, V2, P189, DOI 10.1016/0004-3702(71)90010-5
   Franz Wotawa, 2019, PREDICTIVE MAINTENAN, DOI [10.1007/978-3-030-05645-2, DOI 10.1007/978-3-030-05645-2]
   Huang SC, 2017, JOINT INT CONF SOFT
   Iftikhar M. Usman, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P76, DOI 10.1109/SEAMS.2017.21
   Jeong N, 2018, 2018 IEEE SENSORS APPLICATIONS SYMPOSIUM (SAS), P59
   Kalra N, 2016, TRANSPORT RES A-POL, V94, P182, DOI 10.1016/j.tra.2016.09.010
   Kawai S., 2012, 2012 12th International Conference on ITS Telecommunications (ITST 2012), P668, DOI 10.1109/ITST.2012.6425265
   Meinel HH, 2014, PROC EUR CONF ANTENN, P3107, DOI 10.1109/EuCAP.2014.6902486
   Nilsson NJ, 1993, J ARTIF INTELL RES, V1, P139, DOI 10.1613/jair.30
   Pell B., 1996, P SPIE C OPT SCI ENG
   Rasshofer RH, 2005, ADV RADIO SCI, V3, P205, DOI 10.5194/ars-3-205-2005
   Shevtsov S., 2017, HANDLING NEW CHANGIN
   Stamenkovic Z, 2012, INT CONF MICROELECTR, P383, DOI 10.1109/MIEL.2012.6222882
   Steinbaeck J, 2017, 2017 SENSOR DATA FUSION: TRENDS, SOLUTIONS, APPLICATIONS (SDF)
   Steinbauer G., 2013, LNCS, V7740
   Williams BC, 1997, INT JOINT CONF ARTIF, P1178
   Willibald K., 2009, LNEE, V38
   Willibald K., 2007, P AAAI WORKSH CONF, P19
   Willibald K., 2007, P INT WORKSH PRINC D, P314
   Wotawa F, 2018, 2018 IEEE 18TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY COMPANION (QRS-C), P519, DOI 10.1109/QRS-C.2018.00093
NR 26
TC 3
Z9 4
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1189
EP 1212
DI 10.1007/s11219-020-09519-w
EA JUL 2020
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000545294200002
OA hybrid
DA 2024-07-18
ER

PT J
AU Tjortjis, C
AF Tjortjis, Christos
TI Mining Association Rules from Code (MARC) to support legacy software
   management
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software management; Software quality; Program comprehension; Software
   analytics; Data mining; Association rules
ID COMPREHENSION; SYSTEMS
AB This paper presents a methodology for Mining Association Rules from Code (MARC), aiming at capturing program structure, facilitating system understanding and supporting software management. MARC groups program entities (paragraphs or statements) based on similarities, such as variable use, data types and procedure calls. It comprises three stages: code parsing/analysis, association rule mining and rule grouping. Code is parsed to populate a database with records and respective attributes. Association rules are then extracted from this database and subsequently processed to abstract programs into groups containing interrelated entities. Entities are then grouped together if their attributes participate to common rules. This abstraction is performed at the program level or even the paragraph level, in contrast to other approaches that work at the system level. Groups can then be visualised as collections of interrelated entities. The methodology was evaluated using real-life COBOL programs. Results showed that the methodology facilitates program comprehension by using source code only, where domain knowledge and documentation are either unavailable or unreliable.
C1 [Tjortjis, Christos] Int Hellen Univ, Sch Sci & Technol, 14th Km Thessaloniki Moudania, Thermi 57001, Greece.
RP Tjortjis, C (corresponding author), Int Hellen Univ, Sch Sci & Technol, 14th Km Thessaloniki Moudania, Thermi 57001, Greece.
EM c.tjortjis@ihu.edu.gr
RI Tjortjis, Christos/I-4112-2017; Tjortjis, Christos/P-3009-2019
OI Tjortjis, Christos/0000-0001-8263-9024
CR Agrawal R., P 20 INT C VERY LARG
   [Anonymous], 2016, SOFTWARE ENG
   [Anonymous], COB BLUE
   [Anonymous], P WORKSH EMP STUD PR
   [Anonymous], 1986, ESP 86
   [Anonymous], ACM INT C P SERIES
   [Anonymous], TECHNICAL REPORT
   [Anonymous], INT J ADV SOFTWARE
   [Anonymous], P ACM SIGPLAN C SYST
   BROOKS R, 1983, INT J MAN MACH STUD, V18, P543, DOI 10.1016/S0020-7373(83)80031-5
   Canfora G, 2001, INFORM SOFTWARE TECH, V43, P401, DOI 10.1016/S0950-5849(01)00149-5
   de Oca CM, 1998, PROC IEEE INT CONF S, P16, DOI 10.1109/ICSM.1998.738485
   Deng ZH, 2014, EXPERT SYST APPL, V41, P4505, DOI 10.1016/j.eswa.2014.01.025
   Ghafari SM, 2016, IFIP ADV INF COMM TE, V475, P242, DOI 10.1007/978-3-319-44944-9_21
   Ghafari SM, 2019, WIRES DATA MIN KNOWL, V9, DOI 10.1002/widm.1307
   Kanellopoulos Y, 2007, DATA KNOWL ENG, V61, P359, DOI 10.1016/j.datak.2006.06.002
   Khadka R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P36
   Kouris I. N., 2003, P 16 INT FLAIRS C, P309
   KUNZ T, 1995, IEEE T SOFTWARE ENG, V21, P515, DOI 10.1109/32.391378
   Lakhotia A, 1997, J SYST SOFTWARE, V36, P211, DOI 10.1016/0164-1212(95)00098-4
   Maqbool O, 2005, IEE P-SOFTW, V152, P281, DOI 10.1049/ip-sen:20050012
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P637, DOI 10.1109/TSE.2007.70721
   Misirli AT, 2011, SOFTWARE QUAL J, V19, P515, DOI 10.1007/s11219-010-9128-1
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Papas D, 2014, LECT NOTES ARTIF INT, V8445, P273, DOI 10.1007/978-3-319-07064-3_22
   Rousidis D, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P276, DOI 10.1109/CSMR.2005.16
   Sartipi K., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P129, DOI 10.1109/CSMR.2000.827321
   Shtern M, 2014, SOFTWARE PRACT EXPER, V44, P33, DOI 10.1002/spe.2147
   Silva J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187674
   Sobernig S, 2016, 2016 13TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P61, DOI 10.1109/WICSA.2016.9
   SOLOWAY E, 1984, IEEE T SOFTWARE ENG, V10, P595, DOI 10.1109/TSE.1984.5010283
   Tjortjis C, 2003, PROG COMPREHEN, P125
   Tjortjis C, 2002, P INT COMP SOFTW APP, P427, DOI 10.1109/CMPSAC.2002.1045039
   Tjortjis C, 2001, APSEC 2001: EIGHTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P281, DOI 10.1109/APSEC.2001.991489
   Tribus H., 2012, PROC INT C ADV DATA, P603
   Tzerpos V, 1998, NINTH INTERNATIONAL WORKSHOP ON DATABASE AND EXPERT SYSTEMS APPLICATIONS, PROCEEDINGS, P811, DOI 10.1109/DEXA.1998.707499
   Witten IH, 2011, MOR KAUF D, P1
   Yakhchi S, 2017, LECT NOTES ARTIF INT, V10412, P296, DOI 10.1007/978-3-319-63558-3_25
   Zhang DY, 2011, ISTM/2011: 9TH INTERNATIONAL SYMPOSIUM ON TEST AND MEASUREMENT, P55
   Zhang L, 2007, 2007 SECOND INTERNATIONAL CONFERENCE IN COMMUNICATIONS AND NETWORKING IN CHINA, VOLS 1 AND 2, P635
NR 40
TC 2
Z9 2
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 633
EP 662
DI 10.1007/s11219-019-09480-3
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000538379800010
DA 2024-07-18
ER

PT J
AU Leucker, M
   Sanchez, C
   Scheffel, T
   Schmitz, M
   Schramm, A
AF Leucker, Martin
   Sanchez, Cesar
   Scheffel, Torben
   Schmitz, Malte
   Schramm, Alexander
TI Runtime verification of real-time event streams under non-synchronized
   arrival
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Stream runtime verification; Monitoring; Real-time event streams; Formal
   methods; Parallel event processing
AB We study the problem of online runtime verification of real-time event streams. Our monitors can observe concurrent systems with a shared clock, but where each component reports observations as signals that arrive to the monitor at different speeds and with different and varying latencies. We start from specifications in a fragment of the TeSSLa specification language, where streams (including inputs and final verdicts) are not restricted to be Booleans but can be data from richer domains, including integers and reals with arithmetic operations and aggregations. Specifications can be used both for checking logical properties and for computing statistics and general numeric temporal metrics (and properties on these richer metrics). We present an online evaluation algorithm for the specification language and a concurrent implementation of the evaluation algorithm. The algorithm can tolerate and exploit the asynchronous arrival of events without synchronizing the inputs. Then, we introduce a theory of asynchronous transducers and show a formal proof of the correctness such that every possible run of the monitor implements the semantics. Finally, we report an empirical evaluation of a highly concurrent Erlang implementation of the monitoring algorithm.
C1 [Leucker, Martin; Scheffel, Torben; Schmitz, Malte] Univ Lubeck, Inst Software Engn & Programming Languages, Lubeck, Germany.
   [Sanchez, Cesar; Schramm, Alexander] IMDEA Software Inst, Madrid, Spain.
C3 University of Lubeck; IMDEA Software Institute
RP Scheffel, T (corresponding author), Univ Lubeck, Inst Software Engn & Programming Languages, Lubeck, Germany.
EM leucker@isp.uni-luebeck.de; cesar.sanchez@imdea.org;
   scheffel@isp.uni-luebeck.de; schmitz@isp.uni-luebeck.de;
   alexander.schramm@imdea.org
OI Leucker, Martin/0000-0002-3696-9222
FU BMBF project ARAMIS II [01 IS 16025]; EU H2020 project COEMS [731535];
   Madrid Regional Government [S2018/TCS-4339]; Spanish National Project
   "BOSCO" [PGC2018-102210-B-100]; EU H2020 project Elastest [731535];
   H2020 - Industrial Leadership [731535] Funding Source: H2020 -
   Industrial Leadership
FX This work was funded in part by the BMBF project ARAMIS II with funding
   ID 01 IS 16025, the EU H2020 project COEMS under no. 732016, the EU
   H2020 project Elastest under no. 731535, the Madrid Regional Government
   under project "S2018/TCS-4339 (BLOQUES-CM)" and the Spanish National
   Project "BOSCO (PGC2018-102210-B-100)".
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Alur R, 1996, J ACM, V43, P116, DOI 10.1145/227595.227602
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   Asarin E, 2002, J ACM, V49, P172, DOI 10.1145/506147.506151
   Barringer H, 2004, LECT NOTES COMPUT SC, V2937, P44
   BARTOCCI E, 2018, LNCS
   Bauer A, 2013, LECT NOTES COMPUT SC, V8174, P59, DOI 10.1007/978-3-642-40787-1_4
   Bauer A, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000800
   BAUMEISTER J, 2019, EMSOFT
   Berry G, 2000, FOUNDAT COMPUT, P425
   Bozzelli L, 2014, LECT NOTES COMPUT SC, V8734, P64, DOI 10.1007/978-3-319-11164-3_6
   Caspi P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P178, DOI 10.1145/41625.41641
   CASPI P, 1996, P 1 ACM SIGPLAN INT, P226
   Chase CM, 1998, DISTRIB COMPUT, V11, P191, DOI 10.1007/s004460050049
   CONVENT L, 2018, P LECT NOTES COMPUTE
   Cristian F, 1999, IEEE T PARALL DISTR, V10, P642, DOI 10.1109/71.774912
   D'Angelo B, 2005, 12TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P166, DOI 10.1109/TIME.2005.26
   DECKER N, 2017, 20 BRAZ S FORM METH
   Decker N., 2018, DATE
   Donze Alexandre, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P92, DOI 10.1007/978-3-642-33386-6_9
   Eisner C, 2003, LECT NOTES COMPUT SC, V2725, P27
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Faymonville P, 2019, LECT NOTES COMPUT SC, V11561, P421, DOI 10.1007/978-3-030-25540-4_24
   Faymonville P, 2016, LECT NOTES COMPUT SC, V10012, P152, DOI 10.1007/978-3-319-46982-9_10
   GAUTIER T, 1987, LECT NOTES COMPUT SC, V274, P257
   GOODLOE AE, 2010, TECH REP
   Gorostiaga F, 2018, LECT NOTES COMPUT SC, V11237, P282, DOI 10.1007/978-3-030-03769-7_16
   Havelund K, 2002, LECT NOTES COMPUT SC, V2280, P342
   Havelund K, 2008, LECT NOTES COMPUT SC, V4171, P374
   HEWITT C, 1973, IJCAI, P235
   Jaksic S, 2016, LECT NOTES COMPUT SC, V10012, P201, DOI 10.1007/978-3-319-46982-9_13
   Jaksic S, 2015, 2015 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CODESIGN (MEMOCODE), P218, DOI 10.1109/MEMCOD.2015.7340489
   LEUCKER M, 2018, P 33 S APPL COMP SAC, P18
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Leucker Martin., 2011, RV, V7186, P34
   Maler O, 2004, LECT NOTES COMPUT SC, V3253, P152, DOI 10.1007/978-3-540-30206-3_12
   PIKE L, 2010, LNCS, V6418
   Pnueli A, 2006, LECT NOTES COMPUT SC, V4085, P573
   REINBACHER T, 2014, LECT NOTES COMPUT SC, V8413, P357, DOI DOI 10.1007/978-3-642-54862-8
   ROU G, 2005, AUTOMAT SOFTW ENG, V12, P151
   Sánchez C, 2018, LECT NOTES COMPUT SC, V11237, P138, DOI 10.1007/978-3-030-03769-7_9
   Selyunin K, 2017, LECT NOTES COMPUT SC, V10426, P336, DOI 10.1007/978-3-319-63387-9_17
   Selyunin K, 2016, LECT NOTES COMPUT SC, V10012, P462, DOI 10.1007/978-3-319-46982-9_30
   Sen Koushik, 2003, Electronic Notes in Theoretical Computer Science, V89, P226, DOI [DOI 10.1016/S1571-0661(04)81051-XRV'2003, 10.1016/S1571-0661(04)81051-X, DOI 10.1016/S1571-0661(04)81051-X]
NR 44
TC 3
Z9 3
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 745
EP 787
DI 10.1007/s11219-019-09493-y
EA APR 2020
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000527449200002
OA hybrid
DA 2024-07-18
ER

PT J
AU Guggulothu, T
   Moiz, SA
AF Guggulothu, Thirupathi
   Moiz, Salman Abdul
TI Code smell detection using multi-label classification approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Code smells; Software quality; Code smell correlation; Multi-label
   classification; Code smells detection; Machine learning techniques;
   Refactoring
AB Code smells are characteristics of the software that indicates a code or design problem which can make software hard to understand, evolve, and maintain. There are several code smell detection tools proposed in the literature, but they produce different results. This is because smells are informally defined or subjective in nature. Machine learning techniques help in addressing the issues of subjectivity, which can learn and distinguish the characteristics of smelly and non-smelly source code elements (classes or methods). However, the existing machine learning techniques can only detect a single type of smell in the code element that does not correspond to a real-world scenario as a single element can have multiple design problems (smells). Further, the mechanisms proposed in the literature could not detect code smells by considering the correlation (co-occurrence) among them. To address these shortcomings, we propose and investigate the use of multi-label classification (MLC) methods to detect whether the given code element is affected by multiple smells or not. In this proposal, two code smell datasets available in the literature are converted into a multi-label dataset (MLD). In the MLD, we found that there is a positive correlation between the two smells (long method and feature envy). In the classification phase, the two methods of MLC considered the correlation among the smells and enhanced the performance (on average more than 95% accuracy) for the 10-fold cross-validation with the ten iterations. The findings reported help the researchers and developers in prioritizing the critical code elements for refactoring based on the number of code smells detected.
C1 [Guggulothu, Thirupathi; Moiz, Salman Abdul] Univ Hyderabad, Sch Comp & Informat Sci, Hyderabad, Telangana, India.
C3 University of Hyderabad
RP Guggulothu, T (corresponding author), Univ Hyderabad, Sch Comp & Informat Sci, Hyderabad, Telangana, India.
EM thirupathi.gugguloth@gmail.com; salman@uohyd.ac.in
RI Guggulothu, Thirupathi/AAR-9051-2020; Abdul Moiz, Salman/S-2473-2018
OI Abdul Moiz, Salman/0000-0001-9294-0275; guggulothu,
   thirupathi/0000-0002-9081-2816
CR Abdelmoez W., 2014, The International Conference on Computing Technology and Information Management (ICCTIM). Society of Digital Information and Wireless Communication, P148
   Amorim L, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P261, DOI 10.1109/ISSRE.2015.7381819
   [Anonymous], 2011, Proceedings of the Twenty-Second International Joint Conference on Artificial Intelligence, DOI DOI 10.5591/978-1-57735-516-8/IJCAI11-220
   Azeem MI, 2019, INFORM SOFTWARE TECH, V108, P115, DOI 10.1016/j.infsof.2018.12.009
   BOOCH G, 1980, OBJECT ORIENTED ANAL
   Boutell MR, 2004, PATTERN RECOGN, V37, P1757, DOI 10.1016/j.patcog.2004.03.009
   Bowes D, 2013, INT WORKS EMERG TREN, P62, DOI 10.1109/WETSoM.2013.6619338
   Charte F, 2015, NEUROCOMPUTING, V163, P3, DOI 10.1016/j.neucom.2014.08.091
   Ciupke O., 1999, Proceedings of Technology of Object-Oriented Languages and Systems - TOOLS 30 (Cat. No.PR00278), P18, DOI 10.1109/TOOLS.1999.787532
   Di Nucci D, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P612, DOI 10.1109/SANER.2018.8330266
   FERME V, 2013, THESIS
   Fontana FA, 2016, EMPIR SOFTW ENG, V21, P1143, DOI 10.1007/s10664-015-9378-4
   Fontana FA, 2017, KNOWL-BASED SYST, V128, P43, DOI 10.1016/j.knosys.2017.04.014
   Fontana FA, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P609, DOI 10.1109/SANER.2016.84
   Fontana FA, 2012, J OBJECT TECHNOL, V11, DOI 10.5381/jot.2012.11.2.a5
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Godbole S, 2004, LECT NOTES ARTIF INT, V3056, P22
   Hall T, 2011, IEEE SOFTWARE, V28, P96, DOI 10.1109/MS.2011.138
   Kessentini W, 2014, IEEE T SOFTWARE ENG, V40, P841, DOI 10.1109/TSE.2014.2331057
   Khomh F, 2011, J SYST SOFTWARE, V84, P559, DOI 10.1016/j.jss.2010.11.921
   Khomh F, 2009, INT CONF QUAL SOFTW, P305, DOI 10.1109/QSIC.2009.47
   Kreimer J, 2005, ELECTRON NOTES THEOR, V141, P117, DOI 10.1016/j.entcs.2005.02.059
   Li L, 2012, IEEE INT C CL COMP, P18, DOI 10.1109/CLUSTER.2012.45
   Maiga A, 2012, IEEE INT CONF AUTOM, P278, DOI 10.1145/2351676.2351723
   Maneerat N., 2011, Proceedings of the Eighth International Joint Conference on Computer Science and Software Engineering (JCSSE 2011), P331, DOI 10.1109/JCSSE.2011.5930143
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Marinescu R, 2005, PROC IEEE INT CONF S, P701
   MARINESCU R, 2002, IEEE INT C SOFTW MAI
   Moha N, 2010, FORM ASP COMPUT, V22, P345, DOI 10.1007/s00165-009-0115-x
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Murphy-Hill E, 2010, SOFTVIS 2010: PROCEEDINGS OF THE 2010 INTERNATIONAL SYMPOSIUM ON SOFTWARE VISUALIZATION, P5
   NONGPONG K, 2012, THESIS
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Palomba F, 2018, EMPIR SOFTW ENG, V23, P1188, DOI 10.1007/s10664-017-9535-z
   Palomba F, 2017, 2017 IEEE INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE), P8, DOI 10.1109/MALTESQUE.2017.7882010
   Palomba F, 2015, IEEE T SOFTWARE ENG, V41, P462, DOI 10.1109/TSE.2014.2372760
   Palomba F, 2013, IEEE INT CONF AUTOM, P268, DOI 10.1109/ASE.2013.6693086
   Pecorelli F, 2019, PROCEEDINGS OF THE 3RD ACM SIGSOFT INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE '19), P19, DOI 10.1145/3340482.3342744
   Pecorelli F, 2019, INT C PROGRAM COMPRE, P93, DOI 10.1109/ICPC.2019.00023
   Rao A., 2007, Detecting Bad Smells in Object Oriented Design Using Design Change Propagation Probability Matrix 1
   Rasool G, 2015, J SOFTW-EVOL PROC, V27, P867, DOI 10.1002/smr.1737
   Read J, 2016, J MACH LEARN RES, V17
   Read J, 2011, MACH LEARN, V85, P333, DOI 10.1007/s10994-011-5256-5
   Read J, 2008, IEEE DATA MINING, P995, DOI 10.1109/ICDM.2008.74
   Sheikh LM, 2004, INMIC 2004: 8th International Multitopic Conference, Proceedings, P641
   Sorower MohammadS., 2010, A literature survey on algorithms for multi-label learning, P18
   Tempero E, 2010, ASIA PAC SOFWR ENG, P336, DOI 10.1109/APSEC.2010.46
   Travassos G. H., 1999, SIGPLAN Notices, V34, P47, DOI 10.1145/320385.320389
   Tsantalis N, 2009, IEEE T SOFTWARE ENG, V35, P347, DOI 10.1109/TSE.2009.1
   Tsoumakas G., 2007, INT J DATA WAREHOUS, V3, P1, DOI DOI 10.4018/JDWM.2007070101
   Tsoumakas G, 2011, IEEE T KNOWL DATA EN, V23, P1079, DOI 10.1109/TKDE.2010.164
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
   Wang XY, 2012, IEEE INT CONF AUTOM, P170, DOI 10.1145/2351676.2351701
   White M, 2016, IEEE INT CONF AUTOM, P87, DOI 10.1145/2970276.2970326
   Yang J, 2015, EMPIR SOFTW ENG, V20, P1095, DOI 10.1007/s10664-014-9316-x
   Zaidi MA, 2019, LECT NOTES COMPUT SC, V11622, P418, DOI 10.1007/978-3-030-24305-0_31
   Zhang ML, 2014, IEEE T KNOWL DATA EN, V26, P1819, DOI 10.1109/TKDE.2013.39
NR 57
TC 30
Z9 31
U1 1
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1063
EP 1086
DI 10.1007/s11219-020-09498-y
EA APR 2020
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000523325900001
DA 2024-07-18
ER

PT J
AU Eda, R
   Do, H
AF Eda, Ravi
   Do, Hyunsook
TI An efficient regression testing approach for PHP Web applications using
   test selection and reusable constraints
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Regression testing; Test selection; Test reuse; PHP Web applications;
   Empirical studies
AB Web applications undergo frequent changes. These changes can be due to the addition of new features or the modification of existing features to support customer requests or to patch faults in the system. Given that Web applications have a large surface area subject to attack, changes often include security fixes either in response to malicious attacks or to forestall such attacks. Effective regression testing should ensure that any change does not disable existing features or compromise security. Executing the entire regression test suite takes time and consumes many resources. One approach is to focus regression test efforts only on code paths that were modified in the new version. Such code paths can be identified using tools such as PHP Analysis and Regression Testing Engine (PARTE). In this paper, we extend this approach to test selection where a subset of existing tests that cover the modified code paths can be detected. To further reduce the amount of regression testing needed, we used PARTE's reusable constraint value information to identify tests that can be reused against the new version without having to modify the input test values. We performed an empirical study to determine whether test selection data combined with reusable constraint values would further improve the turnaround time for regression tests. Results from the experiment conducted on four Hypertext Preprocessor (PHP) web applications demonstrate that this approach is effective in reducing the cost of regression testing of frequently patched Web applications.
C1 [Eda, Ravi] North Dakota State Univ, Fargo, ND 58105 USA.
   [Eda, Ravi] Microsoft Corp, Fargo, ND 58104 USA.
   [Do, Hyunsook] Univ North Texas, Dept Comp Sci & Engn, Denton, TX 76203 USA.
C3 North Dakota State University Fargo; Microsoft; University of North
   Texas System; University of North Texas Denton
RP Eda, R (corresponding author), North Dakota State Univ, Fargo, ND 58105 USA.; Eda, R (corresponding author), Microsoft Corp, Fargo, ND 58104 USA.
EM ravi.eda@microsoft.com
RI Eda, Ravi/GPK-0865-2022
FU NSF CAREER Award [CCF-1564238]
FX This work was supported, in part, by NSF CAREER Award CCF-1564238 to
   University of North Texas.
CR Alshahwan N., 2012, Proceedings of the 2012 International Symposium on Software Testing and Analysis - ISSTA 2012, P45
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], TECHNICAL REPORT
   [Anonymous], 2010, P ACM SIGSOFT INT S
   Apiwattanapong T, 2006, TAIC PART - TESTING: ACADEMIC & INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P137, DOI 10.1109/TAIC-PART.2006.18
   Arnold R. S., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P292, DOI 10.1109/ICSM.1993.366933
   Artzi Shay., 2010, P 32 ACMIEEE INT C S, P265
   Bell J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P433, DOI 10.1145/3180155.3180164
   Chen Y, 2007, FIFTEENTH COLOR IMAGING CONFERENCE: COLOR SCIENCE AND ENGINEERING SYSTEMS, TECHNOLOGIES, AND APPLICATIONS, FINAL PROGRAM AND PROCEEDINGS, P54
   Dallmeier Valentin, 2012, P WORKSH JAVASCRIPT, P11, DOI [10.1145/2307720.2307722, DOI 10.1145/2307720.2307722]
   Deng YT, 2005, PROC INT CONF SOFTW, P78, DOI 10.1145/1062455.1062486
   Do H, 2014, SOFTW TEST VERIF REL, V24, P367, DOI 10.1002/stvr.1540
   Elbaum S, 2001, PROC INT CONF SOFTW, P329, DOI 10.1109/ICSE.2001.919106
   Emmi M., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P151
   Engström E, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P22
   Halfond WGJ, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P285
   Herzig K, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P483, DOI 10.1109/ICSE.2015.66
   Hooimeijer Pieter., 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, P377, DOI DOI 10.1145/1858996.1859080
   Hossain M, 2014, IEEE ICST WORKSHOP, P312, DOI 10.1109/ICSTW.2014.35
   Jia XH, 2015, ADV SOC SCI EDUC HUM, V41, P177
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Kazmi R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3057269
   Kiezun A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2377656.2377662
   Kim Mijung., 2012, International Symposium on Software Testing and Analysis, P320
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Klarlund N, 1998, LECT NOTES COMPUT SC, V1414, P311, DOI 10.1007/BFb0028022
   Legunsen O, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P583, DOI 10.1145/295029.2950361
   LEUNG HKN, 1989, CONFERENCE ON SOFTWARE MAINTENANCE - 1989, PROCEEDINGS, P60
   Mirarab S, 2012, IEEE T SOFTWARE ENG, V38, P936, DOI 10.1109/TSE.2011.56
   Oqvist Jesper, 2016, 13 INT C PRINCIPLES, P1, DOI [10.1145/2972206.2972224, DOI 10.1145/2972206.2972224]
   Papadakis M, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P537, DOI 10.1145/3180155.3180183
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   Ricca F, 2001, PROC INT CONF SOFTW, P25, DOI 10.1109/ICSE.2001.919078
   ROTHERMEL G, 1994, PROC INT CONF SOFTW, P201, DOI 10.1109/ICSE.1994.296779
   Rothermel G, 1996, IEEE T SOFTWARE ENG, V22, P529, DOI 10.1109/32.536955
   Rothermel G., 1997, ACM Transactions on Software Engineering and Methodology, V6, P173, DOI 10.1145/248233.248262
   Rubinov K, 2012, PROC INT CONF SOFTW, P1433, DOI 10.1109/ICSE.2012.6227078
   Santelices R., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P11, DOI 10.1109/ICST.2011.46
   Shi A, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P237, DOI 10.1145/2786805.2786878
   Sun XB, 2015, J SYST SOFTWARE, V109, P137, DOI 10.1016/j.jss.2015.07.047
   Taneja K., 2011, Proceedings of ACM International Symposium on Software Testing and Analysis, P1, DOI DOI 10.1145/2001420.2001422
   Tonella P, 2003, IEEE T SOFTWARE ENG, V29, P495, DOI 10.1109/TSE.2003.1205178
   Visser W, 2012, P FSE, P58, DOI DOI 10.1145/2393596.2393665
   Wassermann G., 2008, P 2008 INT S SOFTW T, P249, DOI DOI 10.1145/1390630.1390661
   Wassermann G, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P32, DOI 10.1145/1250734.1250739
   Xu L., 2005, SIGSOFT SOFTW ENG NO, V30, P10
   Xu ZH, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P150, DOI 10.1109/ISSRE.2011.21
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Ziftci C, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P113, DOI 10.1109/ICSE-SEIP.2017.13
NR 49
TC 3
Z9 3
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2019
VL 27
IS 4
BP 1383
EP 1417
DI 10.1007/s11219-019-09449-2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KP9TA
UT WOS:000516573400002
DA 2024-07-18
ER

PT J
AU Aichernig, BK
   Bauerstätter, P
   Jöbstl, E
   Kann, S
   Korosec, R
   Krenn, W
   Mateis, C
   Schlick, R
   Schumi, R
AF Aichernig, Bernhard K.
   Bauerstaetter, Priska
   Joebstl, Elisabeth
   Kann, Severin
   Korosec, Robert
   Krenn, Willibald
   Mateis, Cristinel
   Schlick, Rupert
   Schumi, Richard
TI Learning and statistical model checking of system response times
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Statistical model checking; Property-based testing; Model-based testing;
   FsCheck; User profiles; Response time; Cost learning; Performance
   testing
AB Since computers have become increasingly more powerful, users are less willing to accept slow responses of systems. Hence, performance testing is important for interactive systems. However, it is still challenging to test if a system provides acceptable performance or can satisfy certain response-time limits, especially for different usage scenarios. On the one hand, there are performance-testing techniques that require numerous costly tests of the system. On the other hand, model-based performance analysis methods have a doubtful model quality. Hence, we propose a combined method to mitigate these issues. We learn response-time distributions from test data in order to augment existing behavioral models with timing aspects. Then, we perform statistical model checking with the resulting model for a performance prediction. Finally, we test the accuracy of our prediction with hypotheses testing of the real system. Our method is implemented with a property-based testing tool with integrated statistical model checking algorithms. We demonstrate the feasibility of our techniques in an industrial case study with a web-service application.
C1 [Aichernig, Bernhard K.; Schumi, Richard] Graz Univ Technol, Inst Software Technol, Graz, Austria.
   [Bauerstaetter, Priska; Krenn, Willibald; Mateis, Cristinel; Schlick, Rupert] Austrian Inst Technol, Vienna, Austria.
   [Joebstl, Elisabeth; Kann, Severin; Korosec, Robert] AVL List GmbH, Graz, Austria.
C3 Graz University of Technology; Austrian Institute of Technology (AIT);
   Anstalt fur Verbrennungskraftmaschinen List
RP Schumi, R (corresponding author), Graz Univ Technol, Inst Software Technol, Graz, Austria.
EM aichernig@ist.tugraz.at; Priska.Bauerstaetter@ait.ac.at;
   Elisabeth.Joebstl@avl.com; Severin.Kann@avl.com; Robert.Korosec@avl.com;
   Willibald.Krenn@ait.ac.at; Cristinel.Mateis@ait.ac.at;
   Rupert.Schlick@ait.ac.at; rschumi@ist.tugraz.at
RI Schlick, Rupert/A-3110-2013
OI Schlick, Rupert/0000-0002-5644-1679; Mateis,
   Cristinel/0000-0001-7502-0688; Aichernig, Bernhard/0000-0002-3484-5584
FU Austrian Research Promotion Agency (FFG) [845582]; Graz University of
   Technology
FX Open access funding provided by Graz University of Technology. This work
   was funded by the Austrian Research Promotion Agency (FFG), project no.
   845582 Trust via cost function driven model-based test case generation
   for non-functional properties of systems of systems (TRUCONF).
CR Aichernig B. K., 2017, SOFTWARE SYSTEMS MOD
   Aichernig BK, 2018, LECT NOTES COMPUT SC, V11024, P36, DOI 10.1007/978-3-319-99154-2_3
   Aichernig BK, 2017, IEEE INT CONF SOFTW, P390, DOI 10.1109/ICST.2017.42
   Aichernig BK, 2016, 2016 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR SYSTEM DESIGN (MEMOCODE), P71, DOI 10.1109/MEMCOD.2016.7797748
   Aichernig BK, 2016, IEEE ICST WORKSHOP, P219, DOI 10.1109/ICSTW.2016.24
   [Anonymous], 2006, LINEAR MIXED MODELS
   [Anonymous], 1973, Sequential analysis
   Arts T., 2014, ERLANG 2014, P25
   Ballarini Paolo, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P355, DOI 10.1007/978-3-642-40196-1_30
   Balsamo S, 2004, IEEE T SOFTWARE ENG, V30, P295, DOI 10.1109/TSE.2004.9
   Becker S, 2009, J SYST SOFTWARE, V82, P3, DOI 10.1016/j.jss.2008.03.066
   Book M, 2005, QSIC 2005: Fifth International Conference on Quality Software, Proceedings, P83
   Bulychev P, 2012, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.85.1
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P149
   Draheim D, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P55
   Govindarajulu Z., 2004, Sequential Statistics
   GRINCHTEIN O., 2008, THESIS
   Halili E. H., 2008, APACHE JMETER PRACTI
   Hastie T., 2009, ELEMENTS STAT LEARNI
   HOEFFDING W, 1963, J AM STAT ASSOC, V58, P13, DOI 10.2307/2282952
   Hughes J, 2007, LECT NOTES COMPUT SC, V4354, P1
   Hughes J, 2016, IEEE INT CONF SOFTW, P135, DOI 10.1109/ICST.2016.37
   Jaccard J., 2003, Interaction Effects in Multiple Regression
   Jinyuan C, 2012, COMPUTER DEV APPL, V5, P14
   Kalaji A, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P230, DOI 10.1109/ICST.2009.29
   Krishnamurthy D, 2006, IEEE T SOFTWARE ENG, V32, P868, DOI 10.1109/TSE.2006.106
   Legay A, 2014, 2014 THEORETICAL ASPECTS OF SOFTWARE ENGINEERING CONFERENCE (TASE), P139, DOI 10.1109/TASE.2014.20
   Legay A, 2010, LECT NOTES COMPUT SC, V6418, P122, DOI 10.1007/978-3-642-16612-9_11
   Lu Y, 2012, REAL TIM SYST SYMP P, P351, DOI 10.1109/RTSS.2012.85
   Menascé DA, 2002, IEEE INTERNET COMPUT, V6, P70, DOI 10.1109/MIC.2002.1020328
   Nilsson R., 2014, ScalaCheck: The Definitive Guide
   Norell Ulf, 2013, P 12 ACM SIGPLAN WOR, P87, DOI [10.1145/2505305.2505310, DOI 10.1145/2505305.2505310]
   Papadakis M, 2011, ERLANG 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN ERLANG WORKSHOP, P39
   Pooley R., 1999, IEE Proceedings-Software, V146, P2, DOI 10.1049/ip-sen:19990151
   Rencher A. C., 2012, WILEY SERIES PROBABI
   Schumi R, 2017, LECT NOTES COMPUT SC, V10533, P293, DOI 10.1007/978-3-319-67549-7_18
   Smith C. U, 1990, 16 INT COMP MEAS GRO, P1311
   Smith CU, 1997, LECT NOTES COMPUT SC, V1245, P135, DOI 10.1007/BFb0022203
   Tang J, 2014, I C NETWORK PROTOCOL, P374, DOI 10.1109/ICNP.2014.61
   Tyagi R.S., 2013, INT J ADV RES COMPUT, V3, P1300
   Verwer S, 2010, LECT NOTES ARTIF INT, V6339, P203, DOI 10.1007/978-3-642-15488-1_17
   Vinayak Hegde P. M. S, 2014, INT J SCI ENG RES IJ, V2
   Woodside M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P171, DOI 10.1109/FOSE.2007.32
   Wright S, 1920, J AGRIC RES, V20, P0557
NR 45
TC 7
Z9 7
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 757
EP 795
DI 10.1007/s11219-018-9432-8
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500011
OA hybrid
DA 2024-07-18
ER

PT J
AU Melo, SM
   de Souza, SDS
   Sarmanho, FS
   de Souza, PSL
AF Melo, Silvana Morita
   de Souza, Simone do Rocio Senger
   Sarmanho, Felipe Santos
   Lopes de Souza, Paulo Sergio
TI Contributions for the structural testing of multithreaded programs:
   coverage criteria, testing tool, and experimental evaluation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Multithreaded programs; Shared memory; PThreads; Structural testing;
   Coverage criteria; Experimental evaluation
ID DATA-FLOW; ALL-USES; MUTATION; COST
AB Concurrent software testing is a challenging activity due to factors that are not present in sequential programs, such as communication, synchronization, and non-determinism, and that directly affect the testing process. When we consider multithreaded programs, new challenges for the testing activity are imposed. In the context of structural testing, an important problem raised is how to deal with the coverage of shared variables in order to establish the association between def-use of shared variables. This paper presents results related to the structural testing of multithreaded programs, including testing criteria for coverage testing, a supporting tool, called ValiPthread testing tool and results of an experimental study. This study was conducted to evaluate the cost, effectiveness, and strength of the testing criteria. Also, the study evaluates the contribution of these testing criteria to test specific aspects of multithreaded programs. The experimental results show evidence that the testing criteria present lower cost and higher effectiveness when revealing some kinds of defects, such as deadlock and critical region block. Also, compared to sequential testing criteria, the proposed criteria show that it is important to establish specific coverage testing for multithreaded programs.
C1 [Melo, Silvana Morita; de Souza, Simone do Rocio Senger; Sarmanho, Felipe Santos; Lopes de Souza, Paulo Sergio] Univ Sao Paulo, ICMC, PO 668, BR-13560970 Sao Carlos, SP, Brazil.
C3 Universidade de Sao Paulo
RP Melo, SM (corresponding author), Univ Sao Paulo, ICMC, PO 668, BR-13560970 Sao Carlos, SP, Brazil.
EM morita@icmc.usp.br; srocio@icmc.usp.br; fsarmanho@gmail.com;
   pssouza@icmc.usp.br
RI Souza, Simone Senger R/G-7127-2011; Souza, Paulo S. L./F-5487-2011
OI Souza, Paulo/0000-0002-1560-2704; Souza, Simone
   Senger/0000-0001-9007-9821
FU State of Sao Paulo Research Foundation - FAPESP [2010/04042-1,
   2013/05046-9, 2013/01818-7, 2015/23653-5]; Fundacao de Amparo a Pesquisa
   do Estado de Sao Paulo (FAPESP) [13/01818-7, 15/23653-5, 10/04042-1]
   Funding Source: FAPESP
FX The authors acknowledge the State of Sao Paulo Research Foundation -
   FAPESP, for the financial support (under processes no. 2010/04042-1,
   2013/05046-9, 2013/01818-7 and 2015/23653-5) provided to this research.
CR [Anonymous], 2003, Introduction to parallel computing
   [Anonymous], 2014, GUIDE SOFTWARE ENG B
   Araújo ID, 2016, I BRAZILIAN SYMPOSIUM ON SYSTEMATIC AND AUTOMATED SOFTWARE TESTING (SAST 2016), DOI 10.1145/2993288.2993303
   Badlaney J., 2006, 22 N CAR STAT U
   Basili VR, 1996, PROC INT CONF SOFTW, P442, DOI 10.1109/ICSE.1996.493439
   Bradbury J S., 2009, Proc. of the 3rd International Workshop on Software Patterns and Quality (SPAQu'09), P6
   Brito M. A., 2015, SEKE, P182
   Brito MAS, 2013, PROCEDIA COMPUT SCI, V18, P250, DOI 10.1016/j.procs.2013.05.188
   CARVER RH, 1991, IEEE SOFTWARE, V8, P66, DOI 10.1109/52.73751
   Carver RH, 2010, CONCURR COMP-PRACT E, V22, P2445, DOI 10.1002/cpe.1573
   Chung CM, 1996, SEVENTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P122, DOI 10.1109/ISSRE.1996.558726
   Cordeiro L, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P331, DOI 10.1145/1985793.1985839
   Damodaran-Kamal S. K., 1993, SIGPLAN Notices, V28, P118, DOI 10.1145/174267.166789
   Neto FGD, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P575, DOI 10.1109/ICSE.2015.197
   De Souza, 2005, INT C SOFTW KNOWL SO, V2005, P386
   de Souza PL, 2008, LECT NOTES COMPUT SC, V5205, P257, DOI 10.1007/978-3-540-87475-1_35
   Denaro G, 2013, 2013 8TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST (AST), P132, DOI 10.1109/IWAST.2013.6595804
   do Rocio Simone, 2012, CLEIej, V15, P4
   Dourado GGM, 2016, PROCEDIA COMPUT SCI, V80, P2226, DOI 10.1016/j.procs.2016.05.387
   Edelstein O, 2003, CONCURR COMP-PRACT E, V15, P485, DOI 10.1002/cpe.654
   Edelstein O, 2002, 5 INT C ACH QUAL SOF
   Farchi E, 2003, IPDPS, P286
   FOREMAN LM, 1993, J SYST SOFTWARE, V21, P215, DOI 10.1016/0164-1212(93)90024-R
   Frankl FG, 1986, P WORKSH SOFTW TEST, P4
   Friedman M, 1937, J AM STAT ASSOC, V32, P675, DOI 10.2307/2279372
   Giacometti C., 2002, REIC REV ELETRONICA, VII
   Hong S, 2015, SOFTW TEST VERIF REL, V25, P334, DOI 10.1002/stvr.1539
   Hong S, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P232, DOI 10.1109/ICST.2013.32
   Host M., 2000, Empirical Software Engineering, V5, P201, DOI 10.1023/A:1026586415054
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Jalbert N., 2010, Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE'10, P57, DOI DOI 10.1145/1882291.1882302
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lei Y, 2006, IEEE T SOFTWARE ENG, V32, P382, DOI 10.1109/TSE.2006.56
   Li N, 2009, IEEE ICST WORKSHOP, P220, DOI 10.1109/ICSTW.2009.30
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Lu S, 2012, IEEE T SOFTWARE ENG, V38, P844, DOI 10.1109/TSE.2011.35
   Mathur A. P., 1994, Software Testing, Verification and Reliability, V4, P9, DOI 10.1002/stvr.4370040104
   Mathur A.P., 1993, SOFTW TEST VERIFIC R, V4, P9
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Melo SM, 2016, PROCEEDINGS OF SE-HPCCSE 2016: 4TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING OR HIGH PERFORMANCE COMPUTING IN COMPUTATIONAL SCIENCE AND ENGINEERING, P49, DOI [10.1109/SE-HPCCSE.2016.11, 10.1109/SE-HPCCSE.2016.011]
   Melo S. M., 2012, 24 INT C SOFTW ENG, V1-3, P476
   Melo S.M., 2015, P 6 INT WORKSH AUT T, P31, DOI [10.1145/2804322.2804328, DOI 10.1145/2804322.2804328]
   Mühlenfeld A, 2007, ELECTRON NOTES THEOR, V174, P5, DOI 10.1016/j.entcs.2007.04.004
   Musuvathi Madan, 2007, Technical Report MSR-TR-2007-149
   NTAFOS SC, 1988, IEEE T SOFTWARE ENG, V14, P868, DOI 10.1109/32.6165
   Offutt AJ, 1996, SOFTWARE PRACT EXPER, V26, P165, DOI 10.1002/(SICI)1097-024X(199602)26:2<165::AID-SPE5>3.0.CO;2-K
   RAPPS S, 1985, IEEE T SOFTWARE ENG, V11, P367, DOI 10.1109/TSE.1985.232226
   Rungta N, 2009, LECT NOTES COMPUT SC, V5394, P23
   Sarmanho FS, 2008, LECT NOTES COMPUT SC, V5101, P337, DOI 10.1007/978-3-540-69384-0_39
   Silva RA, 2012, P 13 LAT AM TEST WOR, P1, DOI DOI 10.1109/LATW.2012.6261240
   Simao A. S., 2003, CLEI ELECT J, V6
   Souza P. S. L., 2012, CONCURR COMP-PRACT E, V26, P21
   Souza PSL, 2013, PROCEDIA COMPUT SCI, V18, P149, DOI 10.1016/j.procs.2013.05.178
   Souza S., 2007, SOFTWARE TESTI UNPUB
   Souza SRS, 2008, CONCURR COMP-PRACT E, V20, P1893, DOI 10.1002/cpe.1297
   Souza SRS, 2015, SOFTW TEST VERIF REL, V25, P310, DOI 10.1002/stvr.1568
   Takahashi Juichi, 2008, 2008 28th International Conference on Distributed Computing Systems Workshops (ICDCS Workshops), P533, DOI 10.1109/ICDCS.Workshops.2008.76
   Tanenbaum Andrew S., 1995, Distributed Operating Systems
   TAYLOR RN, 1992, IEEE T SOFTWARE ENG, V18, P206, DOI 10.1109/32.126769
   Valgrind-Developers, 2014, VALGR 3 6 1
   Vegas S, 2005, EMPIR SOFTW ENG, V10, P437, DOI 10.1007/s10664-005-3862-1
   Vergilio S. R., 2006, J BRAZILIAN COMPUTER, V12, P73
   Vergilio SR, 2005, LATW 2005, P161
   Vos TEJ, 2012, INT CONF QUAL SOFTW, P230, DOI 10.1109/QSIC.2012.16
   Wang C, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P23, DOI 10.1145/1595696.1595702
   Wang HJ, 2017, IEEE T SOFTWARE ENG, V43, P252, DOI 10.1109/TSE.2016.2584063
   Wesonga Saint, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P624, DOI 10.1109/ASE.2011.6100141
   WEYUKER EJ, 1990, IEEE T SOFTWARE ENG, V16, P121, DOI 10.1109/32.44376
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Wong WE, 2005, IEEE INT C ENG COMP, P539
   Xiao XS, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P611, DOI 10.1145/1985793.1985876
   Yang C. S., 1997, P 14 INT C TEST COMP, P157
   Yang C.-S. D., 1998, Software Engineering Notes, V23, P153, DOI 10.1145/271775.271804
   Yang CSD, 2003, SOFTW TEST VERIF REL, V13, P3, DOI 10.1002/stvr.262
   YANG RD, 1992, INFORM SOFTWARE TECH, V34, P43, DOI 10.1016/0950-5849(92)90093-5
   Yang Y., 2014, INSPECT FRAMEWORK DY
   Yang Y, 2008, LECT NOTES COMPUT SC, V5156, P288, DOI 10.1007/978-3-540-85114-1_20
   Yastrebenetsky P, 2011, 18TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON ENGINEERING OF COMPUTER BASED SYSTEMS (ECBS 2011), P24, DOI 10.1109/ECBS.2011.7
   Zhu H, 1996, IEEE T SOFTWARE ENG, V22, P248, DOI 10.1109/32.491648
NR 80
TC 3
Z9 4
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 921
EP 959
DI 10.1007/s11219-017-9376-4
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000004
DA 2024-07-18
ER

PT J
AU Blondeau, V
   Etien, A
   Anquetil, N
   Cresson, S
   Croisy, P
   Ducasse, S
AF Blondeau, Vincent
   Etien, Anne
   Anquetil, Nicolas
   Cresson, Sylvain
   Croisy, Pascal
   Ducasse, Stephane
TI Test case selection in industry: an analysis of issues related to static
   approaches
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test selection; Dynamic; Static; Industrial case
AB Automatic testing constitutes an important part of everyday development practice. Worldline, a major IT company, is creating more and more tests to ensure the good behavior of its applications and gains in efficiency and quality. But running all these tests may take hours. This is especially true for large systems involving, for example, the deployment of a web server or communication with a database. For this reason, tests are not launched as often as they should be and are mostly run at night. The company wishes to improve its development and testing process by giving to developers rapid feedback after a change. An interesting solution is to reduce the number of tests to run by identifying only those exercising the piece of code changed. Two main approaches are proposed in the literature: static and dynamic. The static approach creates a model of the source code and explores it to find links between changed methods and tests. The dynamic approach records invocations of methods during the execution of test scenarios. Before deploying a test case selection solution, Worldline created a partnership with us to investigate the situation in its projects and to evaluate these approaches on three industrial, closed source, cases to understand the strengths and weaknesses of each solution. We propose a classification of problems that may arise when trying to identify the tests that cover a method. We give concrete examples of these problems and list some possible solutions. We also evaluate other issues such as the impact on the results of the frequency of modification of methods or considering groups of methods instead of single ones. We found that solutions must be combined to obtain better results, and problems have different impacts on projects. Considering commits instead of individual methods tends to worsen the results, perhaps due to their large size.
C1 [Blondeau, Vincent; Cresson, Sylvain; Croisy, Pascal] Worldline, ZI A Rue Pointe, F-59113 Seclin, France.
   [Blondeau, Vincent; Etien, Anne; Anquetil, Nicolas; Ducasse, Stephane] Univ Lille, CNRS, INRIA, Cent Lille,UMR CRIStAL 9189, F-59000 Lille, France.
C3 Inria; Universite de Lille; Centrale Lille; Centre National de la
   Recherche Scientifique (CNRS)
RP Blondeau, V (corresponding author), Worldline, ZI A Rue Pointe, F-59113 Seclin, France.; Blondeau, V (corresponding author), Univ Lille, CNRS, INRIA, Cent Lille,UMR CRIStAL 9189, F-59000 Lille, France.
EM Vincent.Blondeau@worldline.com; Anne.Etien@inria.fr;
   Nicolas.Anquetil@inria.fr; Sylvain.Cresson@worldline.com;
   Pascal.Croisy@worldline.com; Stephane.Ducasse@inria.fr
RI Etien, Anne/AAG-4675-2020
OI Etien, Anne/0000-0003-3034-873X; Ducasse, Stephane/0000-0001-6070-6599;
   Anquetil, Nicolas/0000-0003-1486-8399
FU Worldline; Ministry of Higher Education and Research; Nord-Pas de Calais
   Regional Council; CPER Nord-Pas de Calais/FEDER DATA Advanced data
   science and technologies
FX This work was supported by Worldline and by Ministry of Higher Education
   and Research, Nord-Pas de Calais Regional Council, CPER Nord-Pas de
   Calais/FEDER DATA Advanced data science and technologies 2015-2020.
CR Agrawal H, 1998, COMPUTER, V31, P64, DOI 10.1109/2.689678
   [Anonymous], 1989, INSIGHTS REGRESSION
   [Anonymous], INFORMATICA
   Badri L., 2005, Proceedings. 12th Asia-Pacific Software Engineering Conference
   Beszédes A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P46, DOI 10.1109/ICSM.2012.6405252
   Ducasse S., 2011, TECH REP
   DUCASSE S, 2000, P 2 INT S CONSTR SOF
   Ekelund E. D., 2015, INT C SOFTW MAINT EV
   Elbaum S., 2003, J SOFTWARE TESTING V
   Engström E, 2010, INFORM SOFTWARE TECH, V52, P14, DOI 10.1016/j.infsof.2009.07.001
   Engström E, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P22
   Ernst M.D., 2003, WODA 2003 ICSE WORKS, P24
   Gligoric M., 2015, P 2015 INT S SOFTWAR, P211, DOI 10.1145/2771783.2771784
   Gupta R., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P299, DOI 10.1109/ICSM.1992.242531
   Hsia P, 1997, J SOFTW MAINT-RES PR, V9, P217, DOI 10.1002/(SICI)1096-908X(199707/08)9:4<217::AID-SMR152>3.0.CO;2-2
   Jász J, 2008, PROC IEEE INT CONF S, P137, DOI 10.1109/ICSM.2008.4658062
   Lingampally R., 2007, SYST SCI 2007 HICSS, p261b, DOI DOI 10.1109/HICSS.2007.24
   Nanda A., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P21, DOI 10.1109/ICST.2011.60
   Parsai A, 2014, LECT NOTES BUS INF P, V199, P166
   Rothermel G., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P358, DOI 10.1109/ICSM.1993.366926
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Sheng Huang, 2011, 2011 IEEE 27th International Conference on Software Maintenance, P13, DOI 10.1109/ICSM.2011.6080768
   Soetens QD, 2013, EUR CON SFTWR MTNCE, P101, DOI 10.1109/CSMR.2013.20
   Tengeri D, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P225, DOI 10.1109/SANER.2016.61
   White L, 2005, PROC IEEE INT CONF S, P695
   White L. J., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P262, DOI 10.1109/ICSM.1992.242535
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Zheng J., 2 INT WORKSH INC COT, DOI [10.1109/iwicss.2007.8, DOI 10.1109/IWICSS.2007.8]
NR 28
TC 12
Z9 14
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2017
VL 25
IS 4
SI SI
BP 1203
EP 1237
DI 10.1007/s11219-016-9328-4
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FN4KA
UT WOS:000415973100005
DA 2024-07-18
ER

PT J
AU Karagöz, G
   Sözer, H
AF Karagoz, Gun
   Sozer, Hasan
TI Reproducing failures based on semiformal failure scenario descriptions
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Failure reproduction; Automated test case generation; Behavior-driven
   development; Industrial case study
AB Due to the increasing size and complexity of software systems, it becomes hard to test these systems exhaustively. As a result, some faults can be left undetected. Undetected faults can lead to failures in deployed systems. Such failures are usually reported by the users from the field or test engineers back to developers. It requires considerable time and effort to analyze and reproduce the reported failures because their descriptions are not always complete, structured and formal. In this paper, we introduce a novel approach for automatically reproducing failures to aid their debugging. Our approach relies on semi-structured failure scenario descriptions that employ a set of keywords. These descriptions are preprocessed and mapped to a set of predefined test case templates with valid input sets. Then, test cases are generated and executed to reproduce the reported failure scenarios. The approach is evaluated with an industrial case study performed in a company from the telecommunications domain. Several failures were successfully reproduced. The approach is also adopted in the quality assurance process of the company. After one-time preparation of reusable test case templates and training of test engineers, 24.9 % of the reported failures (and 40 % of those that were manually reproducible) could be reproduced without any manual effort.
C1 [Karagoz, Gun] PI Works HQ, Teknopk Istanbul Sanayi Mah Teknopk Bul 1-3A 103, TR-34906 Istanbul, Turkey.
   [Sozer, Hasan] Ozyegin Univ, Sch Engn, Nisantepe Mah Orman Sk 34-36, TR-34794 Istanbul, Turkey.
C3 Ozyegin University
RP Karagöz, G (corresponding author), PI Works HQ, Teknopk Istanbul Sanayi Mah Teknopk Bul 1-3A 103, TR-34906 Istanbul, Turkey.
EM gun.karagoz@piworks.net; hasan.sozer@ozyegin.edu.tr
RI Sözer, Hasan/AAR-8697-2020; Sözer, Hasan/A-4722-2015
OI Sözer, Hasan/0000-0002-2968-4763; Sözer, Hasan/0000-0002-2968-4763
FU P.I.Works
FX This work is partially supported by P.I.Works. We would like to thank
   software developers and software test engineers at P.I.Works for sharing
   their code base with us and supporting our case study.
CR Andrica S, 2011, I C DEPEND SYS NETWO, P403, DOI 10.1109/DSN.2011.5958253
   [Anonymous], 2012, CUCUMBER BOOK BEHAV
   Arya K. V., 2014, 2014 9th International Conference on Industrial and Information Systems (ICIIS), P1, DOI 10.1109/ICIINFS.2014.7036478
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Briand LC, 2009, INFORM SOFTWARE TECH, V51, P16, DOI 10.1016/j.infsof.2008.09.010
   Friedl J.E.F., 2006, Mastering Regular Expressions, V3rd Edn.
   Goknil A., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P385
   Grottke M, 2010, I C DEPEND SYS NETWO, P447, DOI 10.1109/DSN.2010.5544284
   Jie Hui, 2008, 2008 International Conference on Computer Science and Software Engineering (CSSE 2008), P719, DOI 10.1109/CSSE.2008.1036
   Jin W, 2012, PROC INT CONF SOFTW, P474, DOI 10.1109/ICSE.2012.6227168
   LERMAN J, 2013, MSDN MAGAZINE, V28, P12
   Mickens James., 2010, P 7 S NETWORKED SYST, P11, DOI [10.5555/1855711.1855722, DOI 10.5555/1855711.1855722]
   Naveen K., 2012, P PNSQC, P165
   North D., 2006, BEHAV MODIF, P27
   Pajunen T., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P242, DOI 10.1109/ICSTW.2011.39
   Rashmi,, 2012, INT J ADV COMPUT SC, V3, P8
   Sarma Monalisa, 2007, 10 INT C INFORM TECH, P196
   Soeken M, 2012, LECT NOTES COMPUT SC, V7304, P269, DOI 10.1007/978-3-642-30561-0_19
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Vikram K, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P173
   Yue T, 2011, LECT NOTES COMPUT SC, V6698, P115, DOI 10.1007/978-3-642-21470-7_9
NR 21
TC 6
Z9 8
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 111
EP 129
DI 10.1007/s11219-016-9310-1
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400005
DA 2024-07-18
ER

PT J
AU Hamill, M
   Goseva-Popstojanova, K
AF Hamill, Maggie
   Goseva-Popstojanova, Katerina
TI Exploring fault types, detection activities, and failure severity in an
   evolving safety-critical software system
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality assurance; Fault type; Detection activity; Failure
   severity; Evolutionary development
ID CLASSIFICATION; REPLICATIONS
AB Many papers have been published on analysis and prediction of software faults and/or failures, but few established the links from software faults (i.e., the root causes) to (potential or observed) failures and addressed multiple attributes. This paper aims at filling this gap by studying types of faults that caused software failures, activities taking place when faults were detected or failures were reported, and the severity of failures. Furthermore, it explores the associations among these attributes and the trends within releases (i.e., pre-release and post-release) and across releases. The results are based on the data extracted from a safety-critical NASA mission, which follows an evolutionary development process. In particular, we analyzed 21 large-scale software components, which together constitute over 8,000 files and millions of lines of code. The main insights include: (1) only a few fault types were responsible for the majority of failures pre-release and post-release, and across releases. Analysis and testing activities detected the majority of failures caused by each fault type. (2) The distributions of fault types differed for pre-release and post-release failures. (3) The percentage of safety-critical failures was small overall, and their relative contribution increased on-orbit. (4) Both post-release failures and safety-critical failures were more heavily associated with coding faults than with any other type of faults. (5) Components that experienced high number of failures in one release were not necessarily among high failure-prone components in the subsequent release. (6) Components that experienced more failures pre-release were more likely to fail post-release, overall and for each release.
C1 [Hamill, Maggie] No Arizona Univ, Dept Comp Sci & Elect Engn, Flagstaff, AZ 86011 USA.
   [Goseva-Popstojanova, Katerina] W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26506 USA.
C3 Northern Arizona University; West Virginia University
RP Goseva-Popstojanova, K (corresponding author), W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26506 USA.
EM Margaret.Hamill@nau.edu; Katerina.Goseva@mail.wvu.edu
OI Goseva-Popstojanova, Katerina/0000-0003-4683-672X
FU NASA Office of Safety and Mission Assurance; Software Assurance Research
   Program; National Science Foundation [0916284]; American Recovery and
   Reinvestment Act; WVU ADVANCE Sponsorship Program by the National
   Science Foundation ADVANCE IT Program [HRD-100797]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [0916284] Funding Source: National Science Foundation
FX This work was funded in part by the NASA Office of Safety and Mission
   Assurance, the Software Assurance Research Program under grant managed
   through NASA IV&V Facility in Fairmont, WV. Goseva-Popstojanova's work
   was also supported in part by the National Science Foundation Grant
   0916284 with funds from the American Recovery and Reinvestment Act of
   2009 and by the WVU ADVANCE Sponsorship Program funded by the National
   Science Foundation ADVANCE IT Program award HRD-100797. We thank the
   NASA personnel for their invaluable support: Jill Broadwater, Pete
   Cerna, Randolph Copeland, Susan Creasy, James Dalton, Bryan Fritch, Nick
   Guerra, John Hinkle, Lynda Kelsoe, Gary Lovstuen, Tom Macaulay, Debbie
   Miele, Lisa Montgomery, James Moon, Don Ohi, Chad Pokryzwa, David
   Pruett, Timothy Plew, Scott Radabaugh, David Soto, and Sarma Susarla.
   Any opinions, findings, and conclusions or recommendations expressed in
   this material are those of the authors and do not necessarily reflect
   the views of the NASA personnel and the funding agencies (NASA and NSF).
CR Andersson C, 2007, IEEE T SOFTWARE ENG, V33, P273, DOI 10.1109/TSE.2007.1005
   [Anonymous], NASAGB871913
   [Anonymous], 1988, Statistical power analysis for the behavioral sciences
   [Anonymous], 2003, ANAL QUANTITATIVE DA
   [Anonymous], 2010, 24765 ISOIECIEEE
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 2007, P ICSE 2007 WORK 3 I, DOI DOI 10.1109/PROMISE.2007.10
   [Anonymous], ACM SIGSOFT INT S SO
   [Anonymous], 2010 ACM IEEE INT S
   [Anonymous], 1987, How many subjects? Statistical power analysis in research
   Bell R., 2006, Proc. 2006 International Symposium on Software Testing and Analysis, P61
   Biyani S, 1998, NINTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P316, DOI 10.1109/ISSRE.1998.730896
   CHILLAREGE R, 1992, IEEE T SOFTWARE ENG, V18, P943, DOI 10.1109/32.177364
   Christmansson J, 1996, DIG PAP INT SYMP FAU, P304, DOI 10.1109/FTCS.1996.534615
   COCHRAN WG, 1954, BIOMETRICS, V10, P417, DOI 10.2307/3001616
   Duraes JA, 2006, IEEE T SOFTWARE ENG, V32, P849, DOI 10.1109/TSE.2006.113
   Eldh S, 2007, LECT NOTES COMPUT SC, V4581, P74
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Goseva-Popstojanova K, 2005, 16TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P43, DOI 10.1109/ISSRE.2005.25
   Grbac TG, 2013, IEEE T SOFTWARE ENG, V39, P462, DOI 10.1109/TSE.2012.46
   Hamill M, 2014, SOFTW TEST VERIF REL, V24, P684, DOI 10.1002/stvr.1518
   Hamill M, 2009, IEEE T SOFTWARE ENG, V35, P484, DOI 10.1109/TSE.2009.3
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kitchenham B, 2008, EMPIR SOFTW ENG, V13, P219, DOI 10.1007/s10664-008-9061-0
   Leszak M, 2002, J SYST SOFTWARE, V61, P173, DOI 10.1016/S0164-1212(01)00146-7
   Lutz RR, 2004, IEEE T SOFTWARE ENG, V30, P172, DOI 10.1109/TSE.2004.1271171
   Ostrand T. J., 2002, Software Engineering Notes, V27, P55, DOI 10.1145/566171.566181
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Petersen K, 2009, INT SYMP EMP SOFTWAR, P402
   Pighin M, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P206, DOI 10.1109/ISESE.2003.1237979
   Robson C., 2002, Real world research
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Seigel S., 1988, Nonparametric statistics for the behavioral sciences, V2nd
   Shull FJ, 2008, EMPIR SOFTW ENG, V13, P211, DOI 10.1007/s10664-008-9060-1
   Yin R.K, 2009, Case study research: Design and methods
   Yu WD, 1998, BELL LABS TECH J, V3, P3, DOI 10.1002/bltj.2101
   Zheng J, 2006, IEEE T SOFTWARE ENG, V32, P240, DOI 10.1109/TSE.2006.38
   Zhivich M, 2009, IEEE SECUR PRIV, V7, P87, DOI 10.1109/MSP.2009.56
NR 38
TC 18
Z9 20
U1 0
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2015
VL 23
IS 2
BP 229
EP 265
DI 10.1007/s11219-014-9235-5
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE2SN
UT WOS:000351667700002
DA 2024-07-18
ER

PT J
AU Chaikalis, T
   Chatzigeorgiou, A
   Examiliotou, G
AF Chaikalis, Theodore
   Chatzigeorgiou, Alexander
   Examiliotou, Georgina
TI Investigating the effect of evolution and refactorings on feature
   scattering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Feature identification; Feature scattering; Program understanding;
   Requirements traceability; Software evolution; Refactorings
ID TRACEABILITY LINKS; SOFTWARE; CODE
AB The implementation of a functional requirement is often distributed across several modules posing difficulties to software maintenance. In this paper, we attempt to quantify the extent of feature scattering and study its evolution with the passage of software versions. To this end, we trace the classes and methods involved in the implementation of a feature, apply formal approaches for studying variations across versions, measure whether feature implementation is uniformly distributed and visualize the reuse among features. Moreover, we investigate the impact of refactoring application on feature scattering in order to assess the circumstances under which a refactoring might improve the distribution of methods implementing a feature. The proposed techniques are exemplified for various features on several versions of four open-source projects.
C1 [Chaikalis, Theodore] Univ Macedonia, Dept Appl Informat, Thessaloniki, Greece.
   [Chatzigeorgiou, Alexander] Univ Macedonia, Dept Appl Informat, Software Engn, Thessaloniki, Greece.
   [Examiliotou, Georgina] Univ Macedonia, Thessaloniki, Greece.
C3 University of Macedonia; University of Macedonia; University of
   Macedonia
RP Chaikalis, T (corresponding author), Univ Macedonia, Dept Appl Informat, Thessaloniki, Greece.
EM chaikalis@uom.gr
RI Chatzigeorgiou, Alexandros/AAL-6077-2021
FU European Union (European Social Fund-ESF); Greek national funds through
   the Operational Program "Education and Lifelong Learning" of the
   National Strategic Reference Framework (NSRF)-Research Funding Program:
   Thalis-Athens University of Economics and Business-SOFTWARE ENGINEERING
   RESEARCH PLATFORM
FX This research has been co-financed by the European Union (European
   Social Fund-ESF) and Greek national funds through the Operational
   Program "Education and Lifelong Learning" of the National Strategic
   Reference Framework (NSRF)-Research Funding Program: Thalis-Athens
   University of Economics and Business-SOFTWARE ENGINEERING RESEARCH
   PLATFORM.
CR Adamic LA, 2000, SCIENCE, V287, DOI 10.1126/science.287.5461.2115a
   [Anonymous], 2007, QUANTITATIVE SOCIAL
   [Anonymous], J SOFTWARE MAINTENAN
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Bartholomew David, 2008, The analysis and interpretation of multivariate data for social scientists, V2
   BIGGERSTAFF TJ, 1994, COMMUN ACM, V37, P72, DOI 10.1145/175290.175300
   Chen C., 2008, HDB DATA VISUALIZATI
   Choi S.-S., 2010, Systemics, Cybernetics and Informatic, V8, P43
   Conejero JM, 2009, LECT NOTES BUS INF P, V33, P136
   EADDY M, 2007, P WORKSH ASS CONT MO
   Eaddy M, 2008, IEEE T SOFTWARE ENG, V34, P497, DOI 10.1109/TSE.2008.36
   Eisenbarth T, 2003, IEEE T SOFTWARE ENG, V29, P210, DOI 10.1109/TSE.2003.1183929
   Filho F.C., 2006, INT C FDN SOFTWARE E, P152
   Fisher M., 2003, P LARG SCAL IND SOFT, P110
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Ganter B., 1996, FORMAL CONCEPT ANAL
   Garcia A., 2005, AOSD 05, P3
   Gibbs C, 2005, LECT NOTES COMPUT SC, V3586, P241
   Gini C., 1921, ECON J, V31, P124, DOI [DOI 10.2307/2223319, 10.2307/2223319]
   Goeminne M., 2011, JOINT PORCEEDINGS 1, P74
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Greenwood P, 2007, LECT NOTES COMPUT SC, V4609, P176
   Greevy O, 2006, J SOFTW MAINT EVOL-R, V18, P425, DOI 10.1002/smr.340
   KOSCHKE R., 2005, ASE '05 Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering, P86
   Kothari J, 2006, WORK CONF REVERSE EN, P93
   Kuhn A, 2008, WORK CONF REVERSE EN, P209, DOI 10.1109/WCRE.2008.45
   Liu Dapeng, 2007, P 22 IEEEACM INT C A, P234, DOI 10.1145/1321631.1321667
   Lorenz MO, 1905, J AM STAT ASSOC, V9, P209
   Marcus A, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P214, DOI 10.1109/WCRE.2004.10
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Naseem R, 2011, EUR CON SFTWR MTNCE, P45, DOI 10.1109/CSMR.2011.9
   Poshyvanyk D, 2007, IEEE T SOFTWARE ENG, V33, P420, DOI [10.1109/TSE.2007.1016, 10.1109/TSE.2007.1016.]
   Poshyvanyk D, 2007, INT C PROGRAM COMPRE, P37
   Revelle M, 2011, EMPIR SOFTW ENG, V16, P773, DOI 10.1007/s10664-011-9159-7
   Riel AJ., 1996, Object-Oriented Design Heuristics
   Robillard MP, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189751
   Sharp A., 1997, SMALLTALK EXAMPLE DE
   Shepherd David, 2007, P 6 INT C ASP OR SOF, P212
   SIMPSON GG, 1960, AM J SCI, V258, P300
   Trifu M., 2010, THESIS KARLSRUHE I T
   Vasa R, 2009, PROC IEEE INT CONF S, P179, DOI 10.1109/ICSM.2009.5306322
   WILDE N, 1995, J SOFTW MAINT-RES PR, V7, P49, DOI 10.1002/smr.4360070105
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Wong WE, 2000, J SYST SOFTWARE, V54, P87, DOI 10.1016/S0164-1212(00)00029-7
   Wong WE, 1999, ASSET'99: 1999 IEEE SYMPOSIUM ON APPLICATION-SPECIFIC SYSTEMS AND SOFTWARE ENGINEERING & TECHNOLOGY - PROCEEDINGS, P194, DOI 10.1109/ASSET.1999.756769
   Zhao W, 2003, ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P68, DOI 10.1109/APSEC.2003.1254359
   Zhao W, 2004, PROC INT CONF SOFTW, P293, DOI 10.1109/ICSE.2004.1317452
   Zou X., 2009, EMPIR SOFTW ENG, V15, P119
NR 48
TC 2
Z9 2
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2015
VL 23
IS 1
BP 79
EP 105
DI 10.1007/s11219-013-9204-4
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC4TB
UT WOS:000350345400006
DA 2024-07-18
ER

PT J
AU Isa, MA
   Jawawi, DNA
   Zaki, MZM
AF Isa, Mohd Adham
   Jawawi, Dayang Norhayati Abang
   Zaki, Mohd Z. M.
TI Model-driven estimation approach for system reliability using integrated
   tasks and resources
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software modeling; Quality analysis; Reliability estimation; Timing
   failures
ID ARCHITECTURE-BASED SOFTWARE; PERFORMANCE; PREDICTION; CHALLENGES;
   FRAMEWORK
AB The increasing complexity of software systems in embedded systems or industrial business domains has led to the importance of reliability analysis for current systems. Reliability analysis has become a crucial part of the system development life cycle, and a new approach is needed to enable an early analysis for reliability estimation, especially for the system under design. However, the existing approach neglects the correlation between system resource and system task for estimating system reliability. This subsequently restricts accuracy of the estimation as well as causing difficulties in identifying critical resources and tasks during the design phase. This paper proposes a model-driven system reliability estimation using a scenario-based approach to estimate system reliability and identify its critical resources and system tasks during the design phase. This model is based on the PerFAM model, which can specifically view timing failures through a system scenario. The proposed approach is validated by the application of a sensitivity analysis into one case study. The case study demonstrates an essential relationship between system reliability, as well as both resources and tasks, which ultimately becomes the integral part for a system reliability estimation assessment.
C1 [Isa, Mohd Adham; Jawawi, Dayang Norhayati Abang; Zaki, Mohd Z. M.] Univ Teknol Malaysia, Fac Comp, Dept Software Engn, Johor Baharu, Malaysia.
C3 Universiti Teknologi Malaysia
RP Isa, MA (corresponding author), Univ Teknol Malaysia, Fac Comp, Dept Software Engn, Johor Baharu, Malaysia.
EM mohdadham@utm.my; dayang@utm.my; zulkiflizaki@utm.my
RI Zaki, Mohd Zulkifli Mohd/A-1707-2013; Isa, Mohd Adham/L-1690-2013;
   Jawawi, Dayang N. A./A-7251-2013; Isa, Mohd Adham/M-6026-2019
OI Isa, Mohd Adham/0000-0002-0049-8510; Isa, Mohd
   Adham/0000-0002-0049-8510; jawawi, dayang n. a./0000-0001-8300-8523
FU Malaysia Ministry of Higher Education
FX We would like to thank the Malaysia Ministry of Higher Education for
   sponsoring this research.
CR Amelunxen C, 2006, LECT NOTES COMPUT SC, V4066, P361
   [Anonymous], 2001, ISO91262
   Baier C, 2010, FORM METHOD SYST DES, V36, P1, DOI 10.1007/s10703-009-0088-7
   Balsamo S, 2004, IEEE T SOFTWARE ENG, V30, P295, DOI 10.1109/TSE.2004.9
   Becker S, 2009, J SYST SOFTWARE, V82, P3, DOI 10.1016/j.jss.2008.03.066
   Bernardi S, 2011, SOFTW SYST MODEL, V10, P313, DOI 10.1007/s10270-009-0128-1
   Bernardi S, 2011, IEEE T IND INFORM, V7, P90, DOI 10.1109/TII.2010.2098415
   Brosch F, 2012, IEEE T SOFTWARE ENG, V38, P1319, DOI 10.1109/TSE.2011.94
   Cortellessa V, 2007, LECT NOTES COMPUT SC, V4422, P57
   Daeeui Hong, 2011, 2011 5th International Conference on Secure Software Integration & Reliability Improvement Companion, P152, DOI 10.1109/SSIRI-C.2011.30
   Distefano S, 2011, IEEE T SOFTWARE ENG, V37, P65, DOI 10.1109/TSE.2010.10
   Eusgeld I, 2008, LECT NOTES COMPUT SC, V4909, P1
   Garousi V, 2009, SOFTW SYST MODEL, V8, P275, DOI 10.1007/s10270-008-0099-7
   Gokhale SS, 2004, PERFORM EVALUATION, V58, P391, DOI 10.1016/j.peva.2004.04.003
   Gokhale SS, 2007, IEEE T DEPEND SECURE, V4, P32, DOI 10.1109/TDSC.2007.4
   Gokhale SS, 2006, IEEE T RELIAB, V55, P578, DOI 10.1109/TR.2006.884587
   Goseva-Popstojanova K, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P307, DOI 10.1109/ISSRE.2003.1251052
   Goseva-Popstojanova K, 2001, PERFORM EVALUATION, V45, P179, DOI 10.1016/S0166-5316(01)00034-7
   Grassi V, 2007, J SYST SOFTWARE, V80, P528, DOI 10.1016/j.jss.2006.07.023
   Immonen A, 2008, SOFTW SYST MODEL, V7, P49, DOI 10.1007/s10270-006-0040-x
   Isa M. A., 2011, 2011 5th Malaysian Conference in Software Engineering (MySEC), P234, DOI 10.1109/MySEC.2011.6140676
   Isa M. A, 2013, INT J SOFTWARE ENG I, V7, P107
   Jawawi D. N. A., 2011, ROBOTIC WHEELCHAIR C, V2, P102
   Jedlicka M, 2011, INT PROC COMPUT SCI, V1, P258
   Jeske DR, 2005, J SYST SOFTWARE, V74, P85, DOI 10.1016/j.jss.2003.10.024
   Koziolek Heiko, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P279, DOI 10.1109/ISSRE.2010.15
   Krka I, 2009, LECT NOTES COMPUT SC, V5835, P202, DOI 10.1007/978-3-642-10248-6_9
   Lauer C., 2011, ACM SIGSOFT SOFTWARE, V36, P1
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Lyu MR, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P153, DOI 10.1109/FOSE.2007.24
   Mohamed A., 2010, Proc. of the 5-th ICSE Workshop on Sharing and Reusing Architectural Knowledge (SHARK'10), P44
   MUSA JD, 1993, IEEE SOFTWARE, V10, P14, DOI 10.1109/52.199724
   Petriu DB, 2007, SOFTW SYST MODEL, V6, P163, DOI 10.1007/s10270-006-0026-8
   Pietrantuono R, 2010, IEEE T SOFTWARE ENG, V36, P323, DOI 10.1109/TSE.2010.6
   Popic P., 2005, SOFTW REL ENG 2005 I
   Rivers JA, 2009, IEEE DES TEST COMPUT, V26, P62, DOI 10.1109/MDT.2009.153
   Rodrigues G, 2005, LECT NOTES COMPUT SC, V3442, P111, DOI 10.1007/978-3-540-31984-9_9
   Salfner F, 2010, ACM COMPUT SURV, V42, DOI 10.1145/1670679.1670680
   Schneidewind NF, 2009, INNOV SYST SOFTW ENG, V5, P243, DOI 10.1007/s11334-009-0097-0
   Schürr A, 2008, LECT NOTES COMPUT SC, V5214, P411, DOI 10.1007/978-3-540-87405-8_28
   Sharma VS, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P299
   Shousha M, 2012, IEEE T SOFTWARE ENG, V38, P354, DOI 10.1109/TSE.2010.107
   Singh L.K., 2011, J. Softw. Eng. Appl., V4, P181
   Su Xihong, 2011, Journal of Electronics (China), V28, P119, DOI 10.1007/s11767-011-0561-5
   Szulman P, 2009, ELECTRON NOTES THEOR, V203, P71, DOI 10.1016/j.entcs.2009.03.027
   Valis D., 2010, INT J PERFORMANCE EN, V6, P181
   Whittaker J. A., 1993, ACM Transactions on Software Engineering and Methodology, V2, P93, DOI 10.1145/151299.151326
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Williams BJ, 2010, INFORM SOFTWARE TECH, V52, P31, DOI 10.1016/j.infsof.2009.07.002
   Yacoub S, 2004, IEEE T RELIAB, V53, P465, DOI 10.1109/TR.2004.838034
   Yacoub SM, 2002, IEEE T SOFTWARE ENG, V28, P529, DOI 10.1109/TSE.2002.1010058
   Yang J, 2009, J SYST SOFTWARE, V82, P319, DOI 10.1016/j.jss.2008.06.039
   Zio E, 2009, RELIAB ENG SYST SAFE, V94, P125, DOI 10.1016/j.ress.2008.06.002
NR 53
TC 0
Z9 0
U1 0
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2014
VL 22
IS 4
BP 661
EP 697
DI 10.1007/s11219-013-9209-z
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AR8NQ
UT WOS:000343832100005
DA 2024-07-18
ER

PT J
AU Morrow, P
   Wilkie, FG
   McChesney, IR
AF Morrow, P.
   Wilkie, F. G.
   McChesney, I. R.
TI Function point analysis using NESMA: simplifying the sizing without
   simplifying the size
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software size estimation; NESMA; Function point analysis; Simplified
   estimation; Commercial projects
ID COST ESTIMATION; LIFE-CYCLE; SOFTWARE; IMPACT
AB This paper examines the trade-off between the utility of outputs from simplified functional sizing approaches, and the effort required by these sizing approaches, through a pilot study. The goal of this pilot study was to evaluate the quality of sizing output provided by NESMA's simplified size estimation methods, adapt their general principles to enhance their accuracy and extent of relevance, and empirically validate such an adapted approach using commercial software projects. A dataset of 11 projects was sized using this adapted approach, and these results compared with those of the established Indicative, Estimated and Full NESMA method approaches. The performances of these adaptations were evaluated against the NESMA approaches in three ways: (1) effort to perform; (2) the accuracy of the total function counts produced; and (3) the accuracy of the profiles of the function counts for each of the base functional component types. The adapted approach outperformed the Indicative NESMA in terms of sizing accuracy and generally performed as well as the Estimated NESMA across both datasets, and required only similar to 50 % of the effort incurred by the Estimated NESMA. This adapted approach, applied to varying levels of information presented in commercial requirements documentation, overcame some of the limitations of simplified functional sizing methods by providing more than simply the simplified 'indication' of overall functional size. The provision and refinement of the more detailed function profile enable a greater degree of validation and utility for the size estimate.
C1 [Morrow, P.; Wilkie, F. G.; McChesney, I. R.] Univ Ulster, Sch Comp & Math, Newtownabbey BT37 0QB, Antrim, North Ireland.
C3 Ulster University
RP Morrow, P (corresponding author), Univ Ulster, Sch Comp & Math, Newtownabbey BT37 0QB, Antrim, North Ireland.
EM Morrow-P4@email.ulster.ac.uk; fg.wilkie@ulster.ac.uk;
   ir.mcchesney@ulster.ac.uk
OI McChesney, Ian/0000-0002-5202-5360
FU Department for Employment and Learning
FX The research team gratefully acknowledges the access to staff and
   documentation, and participation of Equiniti-ICS in this project. In
   particular, the team expresses thanks to Charlie Tuxworth, Technical
   Director at Equiniti-ICS, for his commitment to this work. The authors
   gratefully acknowledge the feedback from reviewers, which provided a
   valuable contribution to the completion and presentation of our research
   study. The research team also gratefully acknowledges financial support
   from the Department for Employment and Learning.
CR Abran A., 2004, INT WORKSH SOFTW MEA, P195
   Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   [Anonymous], [No title captured]
   [Anonymous], 2002, 209682002 ISO IEC IS
   [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], 2009, 209262009 ISOIEC IS
   BOCK DB, 1992, J SYST SOFTWARE, V18, P245, DOI 10.1016/0164-1212(92)90101-O
   Boehm BW., 1981, Software Engineering Economics
   Buglione L, 2008, LECT NOTES COMPUT SC, V5089, P75, DOI 10.1007/978-3-540-69566-0_9
   Cândido EJD, 2004, WEBMEDIA & LA-WEB 2004, VOL 1, PROCEEDINGS, P98, DOI 10.1109/WEBMED.2004.1348154
   Desharnais J. M., 2003, P 13 INT WORKSH SOFT
   Forselius L., 2006, FASTER MORE ACCURATE
   Gencel C, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1363102.1363106
   Horgan G, 1998, INFORM SOFTWARE TECH, V40, P409, DOI 10.1016/S0950-5849(98)00074-3
   Information Technology, 2010, Standard ISO/IEC 29881:2010
   ISBSG, 2009, ISBSG EST BENCHM RES
   ISO/IEC, 2007, ISO/IEC 14143-1:2007 Information technology-Software measurement-Functional size measurement
   *ISO IEC, 2005, 245702005 ISOIEC IS
   Jorgensen M, 2007, INT J FORECASTING, V23, P449, DOI 10.1016/j.ijforecast.2007.05.008
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   KEMERER CF, 1993, COMMUN ACM, V36, P85, DOI 10.1145/151220.151230
   KITCHENHAM B, 1993, PROC INT CONF SOFTW, P477, DOI 10.1109/ICSE.1993.346018
   Kitchenham BA, 2007, IEEE T SOFTWARE ENG, V33, P316, DOI 10.1109/TSE.2007.1101
   Lokan C. J., 1999, Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403), P200, DOI 10.1109/METRIC.1999.809741
   Lokan CJ, 2000, INFORM SOFTWARE TECH, V42, P649, DOI 10.1016/S0950-5849(00)00108-7
   MacDonell S. G., 2007, P 1 INT S EMP SOFTW, P404
   Meli R., 1999, FESMA 99 C P AMST 4
   Meli R., 1997, IFPUG FALL C
   Molokken-Ostvold K, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P208, DOI 10.1109/METRIC.2004.1357904
   NESMA, 2004, 24570 NESMA ISOIEC
   Popovic J, 2012, COMPUT SCI INF SYST, V9, P455, DOI 10.2298/CSIS110316068P
   Santillo Luca, 2005, 11 IEEE INT SOFTW ME, P41
   Software Engineering, 2011, 197612011 ISOIEC
   Tichenor C, 2008, IFPUG METRICVIEWS WI
   Wang X., 2008, JISUANJI GONGCHENG, V34, P103
   Wilkie FG, 2011, INFORM SOFTWARE TECH, V53, P1236, DOI 10.1016/j.infsof.2011.05.008
   Wydenbach G., 1995, New Zealand Journal of Computing, V6, P317
   Yang D, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P253
   Zivkovic A, 2005, INFORMATICA-LITHUAN, V16, P295
NR 39
TC 5
Z9 5
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2014
VL 22
IS 4
BP 611
EP 660
DI 10.1007/s11219-013-9215-1
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AR8NQ
UT WOS:000343832100004
DA 2024-07-18
ER

PT J
AU Carino, S
   Andrews, JH
   Goulding, S
   Arunthavarajah, P
   Hertyk, J
AF Carino, Santo
   Andrews, James H.
   Goulding, Sheldon
   Arunthavarajah, Pradeepan
   Hertyk, Jakub
TI BlackHorse: creating smart test cases from brittle recorded tests
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Test recording and playback; Program generation
ID FEEDBACK
AB Testing software that has a GUI is difficult. Manual testing is costly and error-prone, but recorded test cases frequently "break" due to changes in the GUI. Test cases intended to test business logic must therefore be converted to a less "brittle" form to lengthen their useful lifespan. In this paper, we describe BlackHorse, an approach to doing this that converts a recorded test case to Java code that bypasses the GUI. The approach was implemented within the testing environment of Research In Motion. We describe the design of the toolset and discuss lessons learned during the course of the project.
C1 [Carino, Santo; Andrews, James H.] Univ Western Ontario, Dept Comp Sci, London, ON, Canada.
   [Goulding, Sheldon; Arunthavarajah, Pradeepan; Hertyk, Jakub] Res In Mot Waterloo, Waterloo, ON, Canada.
C3 Western University (University of Western Ontario)
RP Andrews, JH (corresponding author), Univ Western Ontario, Dept Comp Sci, London, ON, Canada.
EM scarino@csd.uwo.ca; andrews@csd.uwo.ca; sgoulding@rim.com;
   parunthavarajah@rim.com; jhertyk@rim.com
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
FX The authors would like to thank Mark Chatterley, Sebastian Elbaum, Ali
   Hesson, Johanne Leduc, and Lee Manchur for valuable discussions and
   comments. Thanks also to the anonymous referees of an earlier version of
   this paper. The work reported in this paper was supported by an
   Interaction grant and an Engage grant from the Natural Sciences and
   Engineering Research Council of Canada (NSERC).
CR Abdel Salam M. A., 2007, 2007 INT C COMP ENG, P313
   Andrews J.H., 2007, Proceedings of the Twenty-second IEEE/ACM International Conference on Automated Software Engineering. ASE'07, P144
   Baresi Luciano, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P185, DOI 10.1109/ICST.2010.54
   Carino S., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P89, DOI 10.1109/IWAST.2012.6228996
   Dustin E., 2009, IMPLEMENTING AUTOMAT
   Elbaum Sebastian, 2006, P 14 ACM SIGSOFT INT, P253
   Fraser G, 2012, IEEE T SOFTWARE ENG, V38, P278, DOI 10.1109/TSE.2011.93
   Gross F, 2012, PROC INT CONF SOFTW, P1423, DOI 10.1109/ICSE.2012.6227232
   Joshi Shrinivas, 2007, 2007 IEEE International Conference on Software Maintenance, P234, DOI 10.1109/ICSM.2007.4362636
   Memon A, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P260, DOI 10.1109/WCRE.2003.1287256
   Memon A, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P164, DOI 10.1109/ASE.2003.1240304
   Newmarch J. D., 1999, Proceedings Technology of Object-Oriented Languages and Systems (Cat. No.PR00393), P156, DOI 10.1109/TOOLS.1999.796479
   Orso Alessandro., 2005, SIGSOFT SOFTW ENG NO, V30, P1, DOI [10.1145/1082983.1083251, DOI 10.1145/1082983.1083251]
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Silva JC, 2010, EICS 2010: PROCEEDINGS OF THE 2010 ACM SIGCHI SYMPOSIUM ON ENGINEERING INTERACTIVE COMPUTING SYSTEMS, P181
   Xie Q, 2005, PROC IEEE INT CONF S, P473
   Xie Q, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P159
   Xie Q, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189752
   Yuan X., 2007, P INT C AUTOMATED SO, P405
   Yuan X, 2007, PROC INT CONF SOFTW, P396
NR 20
TC 4
Z9 4
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2014
VL 22
IS 2
SI SI
BP 293
EP 310
DI 10.1007/s11219-013-9203-5
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AF7TM
UT WOS:000334917700008
DA 2024-07-18
ER

PT J
AU Baggen, R
   Correia, JP
   Schill, K
   Visser, J
AF Baggen, Robert
   Correia, Jose Pedro
   Schill, Katrin
   Visser, Joost
TI Standardized code quality benchmarking for improving software
   maintainability
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software product quality; Benchmarking; Certification; Standardization
AB We provide an overview of the approach developed by the Software Improvement Group for code analysis and quality consulting focused on software maintainability. The approach uses a standardized measurement model based on the ISO/IEC 9126 definition of maintainability and source code metrics. Procedural standardization in evaluation projects further enhances the comparability of results. Individual assessments are stored in a repository that allows any system at hand to be compared to the industry-wide state of the art in code quality and maintainability. When a minimum level of software maintainability is reached, the certification body of TV Informationstechnik GmbH issues a Trusted Product Maintainability certificate for the software product.
C1 [Correia, Jose Pedro; Visser, Joost] Software Improvement Grp, Amsterdam, Netherlands.
   [Baggen, Robert; Schill, Katrin] TUV Informat Tech GmbH, Essen, Germany.
RP Correia, JP (corresponding author), Software Improvement Grp, Amsterdam, Netherlands.
EM r.baggen@tuvit.de; j.p.correia@sig.eu; k.schill@tuvit.de;
   j.visser@sig.eu
RI Visser, Joost/AAD-9423-2019
OI Visser, Joost/0000-0003-0158-3095
CR Alves T. L., 2010, 26 IEEE INT C SOFTW
   [Anonymous], 2010, 4 INT WORKSH SOFTW Q
   [Anonymous], 2006, 25051 ISOIEC
   [Anonymous], 1976, ICSE 76
   [Anonymous], 2005, ISO/IEC 17025: General requirements for the competence of testing and calibration laboratories
   [Anonymous], 2004, 15504 ISOIEC
   Bijlsma D., 2010, THESIS U AMSTERDAM
   Bouwers E., 2008, P 2 INT WOR IN PRESS
   Bouwers E, 2009, PROC IEEE INT CONF S, P73, DOI 10.1109/ICSM.2009.5306330
   Correia JP, 2009, PROC IEEE INT CONF S, P61, DOI 10.1109/ICSM.2009.5306346
   Correia JP, 2008, WORK CONF REVERSE EN, P297, DOI 10.1109/WCRE.2008.16
   Correia JosePedro., 2008, P 2 INT WORKSHOP FDN, P35
   Deprez J. C., 2008, PROFES
   Heck P., 2008, 0803 TU EINDH
   Heitlager I, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P30, DOI 10.1109/QUATIC.2007.8
   *INT ORG STAND, 2005, 15408 ISOIEC
   International Organization for Standardization, 1999, 145981 ISOIEC
   International Organization for Standardization, 2001, 91261 ISOIEC
   International Organization for Standardization, 2008, 9241 ISOIEC
   International Organization for Standardization, 1996, ISO IEC GUID 65 GEN
   Izquierdo-Cortazar D., 2010, P 6 INT C OP SOURC S
   Jones C., 2000, Software Assessments, Benchmarks, and Best Practices
   Kuipers T., 2007, P INT WORKSH TOOLS M
   Kuipers T., 2004, SOFTWARE AUDIT METRI, P118
   Lokan C, 2008, BENCHMARK RELEASE 10
   Open Source Initiative, 2005, OP SOURC DEF
   OpenBRRorg, 2005, BUS READ RAT OP SOUR, P1
   Origin Atos, 2006, METH QUAL SEL OP SOU
   Simon F., 2006, CODE QUALITY MANAGEM
   Software Improvement Group (SIG) and TU V Informationstechnik GmbH (TU ViT), 2009, SIG TUVIT EV CRIT TR
   van Deursen A, 2003, PROC IEEE INT CONF S, P385, DOI 10.1109/ICSM.2003.1235448
   van Hooren M, 2009, KAS BANK SIG LEGACY
   [No title captured]
NR 33
TC 77
Z9 89
U1 2
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2012
VL 20
IS 2
SI SI
BP 287
EP 307
DI 10.1007/s11219-011-9144-9
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 935GT
UT WOS:000303507800003
DA 2024-07-18
ER

PT J
AU Ivarsson, M
   Gorschek, T
AF Ivarsson, Martin
   Gorschek, Tony
TI Tool support for disseminating and improving development practices
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Postmortem review; Knowledge management; Software process improvement;
   Software; Engineering
ID SOFTWARE PROCESS IMPROVEMENT; KNOWLEDGE MANAGEMENT; GUIDE
AB Knowledge management in software engineering and software process improvement activities pose challenges as initiatives are deployed. Most existing approaches are either too expensive to deploy or do not take an organization's specific needs into consideration. There is thus a need for scalable improvement approaches that leverage knowledge already residing in the organizations. This paper presents tool support for an Experience Factory approach for disseminating and improving practices used in an organization. Experiences from using practices in development projects are captured in postmortems and provide iteratively improved decision support for identifying what practices work well and what needs improvement. An initial evaluation of using the tool for organizational improvement has been performed utilizing both academia and industry. The results from the evaluation indicate that organizational characteristics influence how practices and experiences can be used. Experiences collected in postmortems are estimated to have little effect on improvements to practices used throughout the organization. However, in organizations where different practices are used in different parts of the organization, making practices available together with experiences from use, as well as having context information, can influence decisions on what practices to use in projects.
C1 [Ivarsson, Martin] Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
   [Gorschek, Tony] Blekinge Inst Technol, Sch Comp, Sch Engn, S-37179 Karlskrona, Sweden.
C3 Chalmers University of Technology; Blekinge Institute Technology
RP Ivarsson, M (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
EM martin.ivarsson@chalmers.se; tony.gorschek@bth.se
RI Gorschek, Tony/E-3445-2013
CR Aaen I, 2003, IEEE SOFTWARE
   Abdel-Hamid T., 1991, SOFTWARE PROJECT DYN
   [Anonymous], EUROSPI 2000
   BASILI V, 1994, IEEE SOFTWARE, V11, P58, DOI 10.1109/52.300090
   BASILI V, 2001, P 26 ANN NASA GODD S
   Basili VR, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P69, DOI 10.1109/ICSE.2002.1007957
   Basili VR., 2002, ENCY SOFTWARE ENG
   Birk A, 2002, IEEE SOFTWARE, V19, P43, DOI 10.1109/MS.2002.1003452
   Bjornson F. O., 2005, P 7 INT WORKSH LEARN, P107
   Bjornson FO, 2008, INFORM SOFTWARE TECH, V50, P1055, DOI 10.1016/j.infsof.2008.03.006
   Broessler P, 1999, WORKSH LEARN SOFTW O
   Conradi R., 2001, Software Engineering Notes, V26, P268, DOI 10.1145/503271.503246
   Davis AM, 2006, REQUIR ENG, V11, P1, DOI 10.1007/s00766-004-0206-4
   Desouza K. C., 2005, Software Process Improvement and Practice, V10, P203, DOI 10.1002/spip.224
   Dingsoyr T, 2003, MANAGING SOFTWARE ENGINEERING KNOWLEDGE, P49
   Dingsoyr T, 2000, WORKSH LEARN SOFTW O, P55
   Dingsoyr T., 2002, INT J SOFTWARE ENG K
   Dingsoyr T, 2007, LECT NOTES COMPUT SC, V4764, P136
   Glass RL, 2002, IEEE SOFTWARE, V19, P112, DOI 10.1109/MS.2002.1032872
   Glass RL, 2002, COMMUN ACM, V45, P15
   Glass RL, 2001, IEEE SOFTWARE, V18, P112, DOI 10.1109/MS.2001.922739
   Gorschek T, 2004, SOFTWARE PRACT EXPER, V34, P1311, DOI 10.1002/spe.615
   Gorschek T, 2007, REQUIR ENG, V12, P163, DOI 10.1007/s00766-007-0047-z
   Jaakkola H, 2010, SOFTWARE QUAL J, V18, P299, DOI 10.1007/s11219-009-9091-x
   Kuilboer JP, 2000, INFORM SOFTWARE TECH, V42, P27, DOI 10.1016/S0950-5849(99)00054-3
   Kurniawati F, 2006, INFORM SOFTWARE TECH, V48, P566, DOI 10.1016/j.infsof.2005.06.002
   Lindvall M., 2001, Advances in Learning Software Organizations. Third International Workshop, LSO 2001. Proceedings (Lecture Notes in Computer Science Vol.2176), P106
   LINDVALL M, 2003, P 5 INT WORKSH LEARN, P59
   Lyytinen K, 1999, INFORM SYST J, V9, P85, DOI 10.1046/j.1365-2575.1999.00051.x
   McDermott R, 1999, CALIF MANAGE REV, V41, P103, DOI 10.2307/41166012
   Nolan AJ, 1999, IEEE SOFTWARE, V16, P97, DOI 10.1109/52.744576
   Pettersson F, 2008, J SYST SOFTWARE, V81, P972, DOI 10.1016/j.jss.2007.08.032
   Product Team C. M. M. I., 2002, CAP MAT MOD INT CMMI
   Reifer DJ, 2000, J SYST SOFTWARE, V50, P97, DOI 10.1016/S0164-1212(99)00119-3
   Rus I, 2002, IEEE SOFTWARE, V19, P26, DOI 10.1109/MS.2002.1003450
   Rus I., 2002, P 27 ANN NASA GODD S
   Schalken J., 2006, Software Process Improvement and Practice, V11, P35, DOI 10.1002/spip.251
   Schneider K., 2001, Software Process Improvement and Practice, V6, P85, DOI 10.1002/spip.140
   Schneider K., 2002, IEEE Software
   Schwaber Ken, 1995, OOPSLA 95 WORKSH BUS
   Scott L, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P162, DOI 10.1109/ISESE.2003.1237975
   Scott L., 2003, P 5 INT WORKSH LEARN, P79
   Swan J., P 7 EUR C INF SYST, P668
   Verner JM, 2005, IEEE SOFTWARE, V22, P86, DOI 10.1109/MS.2005.12
   Villalón JACM, 2002, SOFTWARE QUAL J, V10, P261, DOI 10.1023/A:1021638523413
   von Zedtwitz M, 2002, R&D MANAGE, V32, P255, DOI 10.1111/1467-9310.00258
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
NR 47
TC 13
Z9 13
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2012
VL 20
IS 1
BP 173
EP 199
DI 10.1007/s11219-011-9139-6
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 873ET
UT WOS:000298864600005
DA 2024-07-18
ER

PT J
AU Hammad, M
   Collard, ML
   Maletic, JI
AF Hammad, Maen
   Collard, Michael L.
   Maletic, Jonathan I.
TI Automatically identifying changes that impact code-to-design
   traceability during evolution
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software evolution; Design change; Software traceability; Commit
   analysis
ID SOFTWARE; LINKS; MODELS
AB An approach is presented that automatically determines if a given source code change impacts the design (i.e., UML class diagram) of the system. This allows code-to-design traceability to be consistently maintained as the source code evolves. The approach uses lightweight analysis and syntactic differencing of the source code changes to determine if the change alters the class diagram in the context of abstract design. The intent is to support both the simultaneous updating of design documents with code changes and bringing old design documents up to date with current code given the change history. An efficient tool was developed to support the approach and is applied to an open source system. The results are evaluated and compared against manual inspection by human experts. The tool performs better than (error prone) manual inspection. The developed approach and tool were used to empirically investigate and understand how changes to source code (i.e., commits) break code-to-design traceability during evolution and the benefits from such understanding. Commits are categorized as design impact or no impact. The commits of four open source projects over 3-year time durations are extracted and analyzed. The results of the study show that most of the code changes do not impact the design and these commits have a smaller number of changed files and changed less lines compared to commits with design impact. The results also show that most bug fixes do not impact design.
C1 [Hammad, Maen; Maletic, Jonathan I.] Kent State Univ, Dept Comp Sci, Kent, OH 44242 USA.
   [Collard, Michael L.] Univ Akron, Dept Comp Sci, Akron, OH 44325 USA.
C3 University System of Ohio; Kent State University; Kent State University
   Salem; Kent State University Kent; University System of Ohio; University
   of Akron
RP Hammad, M (corresponding author), Kent State Univ, Dept Comp Sci, Kent, OH 44242 USA.
EM mhammad@cs.kent.edu; collard@uakron.edu; jmaletic@kent.edu
FU U.S. National Science Foundation under NSF [CCF 08-11140]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [0811021] Funding Source: National Science Foundation
FX This research is funded in part by the U.S. National Science Foundation
   under NSF grant CCF 08-11140.
CR Alali A, 2008, INT C PROGRAM COMPRE, P182, DOI 10.1109/ICPC.2008.24
   [Anonymous], 2006, P 2006 INT WORKSH MI, DOI DOI 10.1145/1137983.1137999
   Antoniol G, 2004, 7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, P31, DOI 10.1109/IWPSE.2004.1334766
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Antoniol G, 2001, SOFTWARE PRACT EXPER, V31, P331, DOI 10.1002/spe.374
   Antoniol G, 2000, PROC IEEE INT CONF S, P40, DOI 10.1109/ICSM.2000.883003
   Antoniol G, 2000, ANN SOFTW ENG, V9, P35, DOI 10.1023/A:1018916522804
   Antoniol G, 2000, PROG COMPREHEN, P253, DOI 10.1109/WPC.2000.852502
   Apiwattanapong T, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P2, DOI 10.1109/ASE.2004.1342719
   Aversano Lerina., 2007, PROC THE 6 EUROPEAN, P385, DOI [DOI 10.1145/1287624.1287680, 10.1145/1287624.1287680.]
   Beyer D, 2005, PROG COMPREHEN, P259, DOI 10.1109/WPC.2005.12
   Collard ML, 2003, PROG COMPREHEN, P134
   Cysneiros G, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P71
   De Lucia A, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P839, DOI 10.1145/1368088.1368216
   Feilkas M, 2009, INT C PROGRAM COMPRE, P188, DOI 10.1109/ICPC.2009.5090042
   Fluri B, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P70, DOI 10.1109/WCRE.2007.21
   Fluri B, 2006, INT C PROGRAM COMPRE, P35, DOI 10.1109/ICPC.2006.16
   Hammad M, 2009, INT C PROGRAM COMPRE, P20, DOI 10.1109/ICPC.2009.5090024
   Hattori Lile P., 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering - Workshops, P63, DOI 10.1109/ASEW.2008.4686322
   Hayes JH, 2006, IEEE T SOFTWARE ENG, V32, P4, DOI 10.1109/TSE.2006.3
   Hindle Abram, 2008, P 2008 INT WORKING C, P99
   KAGDI H, 2007, J SOFTWARE MAINTENAN, P77
   Kim M, 2007, PROC INT CONF SOFTW, P333
   Maletic JI, 2004, PROC IEEE INT CONF S, P210, DOI 10.1109/ICSM.2004.1357805
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Mockus A, 2000, PROC IEEE INT CONF S, P120, DOI 10.1109/ICSM.2000.883028
   Murphy GC, 2001, IEEE T SOFTWARE ENG, V27, P364, DOI 10.1109/32.917525
   Nguyen T. N., 2005, P 12 INT WORKSH SOFT, P113
   Nguyen TN, 2006, P INT COMP SOFTW APP, P197
   NISTOR EC, 2005, P 12 INT WORKSH SOFT, P99
   Pan K, 2009, EMPIR SOFTW ENG, V14, P286, DOI 10.1007/s10664-008-9077-5
   Purushothaman R, 2005, IEEE T SOFTWARE ENG, V31, P511, DOI 10.1109/TSE.2005.74
   Raghavan S, 2004, PROC IEEE INT CONF S, P188, DOI 10.1109/ICSM.2004.1357803
   Ratzinger Jacek, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P354
   Ratzinger J., 2008, Proceedings of the 2008 international working conference on Mining software repositories, P35, DOI [10.1145/1370750.1370759, DOI 10.1145/1370750.1370759]
   Reiss SP, 2002, PROC IEEE INT CONF S, P162, DOI 10.1109/ICSM.2002.1167763
   Reiss SP, 2005, PROC IEEE INT CONF S, P113
   Sefika M, 1996, PROC INT CONF SOFTW, P387, DOI 10.1109/ICSE.1996.493433
   Weissgerber P, 2006, IEEE INT CONF AUTOM, P231
   Xing ZC, 2004, PROG COMPREHEN, P34, DOI 10.1109/WPC.2004.1311045
   Xing ZC, 2007, IEEE T SOFTWARE ENG, V33, P818, DOI 10.1109/TSE.2007.70747
   Xing Zhenchang., 2005, ASE 05, P54
   Zhao W, 2003, ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P68, DOI 10.1109/APSEC.2003.1254359
   ZHOU X, 2007, P 10 INT C FUND APPR, P412
NR 44
TC 19
Z9 19
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2011
VL 19
IS 1
SI SI
BP 35
EP 64
DI 10.1007/s11219-010-9103-x
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TY
UT WOS:000286465500003
DA 2024-07-18
ER

PT J
AU Ahmed, F
   Capretz, LF
AF Ahmed, Faheem
   Capretz, Luiz Fernando
TI An organizational maturity model of software product line engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software process assessment; Software engineering; Software process
   maturity; Software; Product Line; Software process improvement
AB Software product line engineering is an inter-disciplinary concept. It spans the dimensions of business, architecture, process, and the organization. Some of the potential benefits of this approach include cost reduction, improvements in product quality and a decrease in product development time. The increasing popularity of software product line engineering in the software industry necessitates a process maturity evaluation methodology. Accordingly, this paper presents an organizational maturity model of software product line engineering for evaluating the maturity of organizational dimension. The model assumes that organizational theories, behavior, and management play a critical role in the institutionalization of software product line engineering within an organization. Assessment questionnaires and a rating methodology comprise the framework of this model. The objective and design of the questionnaires are to collect information about the software product line engineering process from the dual perspectives of organizational behavior and management. Furthermore, we conducted two case studies and reported the assessment results using the organizational maturity model presented in this paper.
C1 [Ahmed, Faheem] United Arab Emirates Univ, Coll Informat Technol, Al Ain, U Arab Emirates.
   [Capretz, Luiz Fernando] Univ Western Ontario, Dept Elect & Comp Engn, London, ON N6A 5B9, Canada.
C3 United Arab Emirates University; Western University (University of
   Western Ontario)
RP Ahmed, F (corresponding author), United Arab Emirates Univ, Coll Informat Technol, POB 17551, Al Ain, U Arab Emirates.
EM f.ahmed@uaeu.ac.ae; lcapretz@eng.uwo.ca
RI Capretz, Luiz Fernando/K-5944-2013
OI Capretz, Luiz Fernando/0000-0001-6966-2369
CR Ahmed F, 2007, J SYST SOFTWARE, V80, P836, DOI 10.1016/j.jss.2006.09.010
   [Anonymous], LEARNING ORG
   [Anonymous], 1986, Applied multivariate statistics for the social sciences
   [Anonymous], 2000, SOFTWARE ARCHITECTUR
   [Anonymous], 1980, MEASURING ASSESSING
   [Anonymous], BIOMETRICS
   ARGYRIS C, 1977, HARVARD BUS REV, V55, P115
   Bayer J., 1999, SSR'99. Proceedings of the Fifth Symposium on Software Reusability. Bridging the Gap Between Research and Practice, P122, DOI 10.1145/303008.303063
   Beckhard R., 1987, Organizational Transitions: Managing Complex Change
   Birk A, 2003, IEEE SOFTWARE, V20, P52, DOI 10.1109/MS.2003.1241367
   Bosch J, 2001, PROC INT CONF SOFTW, P91, DOI 10.1109/ICSE.2001.919084
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   CAMPBELL DT, 1959, PSYCHOL BULL, V56, P81, DOI 10.1037/h0046016
   Cao Guangming., 2000, THE TQM MAGAZINE, V12, P186, DOI [10.1108/09544780010320241, DOI 10.1108/09544780010320241]
   CATTELL RB, 1966, MULTIVAR BEHAV RES, V1, P245, DOI 10.1207/s15327906mbr0102_10
   Clements P., 2002, Software product lines
   Clements PC, 2005, IEEE SOFTWARE, V22, P54, DOI 10.1109/MS.2005.133
   CLEMENTS PC, 2001, P 4 INT WORKSH SOFTW, P69
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Comrey A. L., 1992, A first course in factor analysis, DOI DOI 10.4324/9781315827506-16
   Crewson P.E., 1997, Journal of Public Administration Research and Theory, V7, P499, DOI DOI 10.1093/OXFORDJOURNALS.JPART.A024363
   Cronbach LJ, 1951, PSYCHOMETRIKA, V16, P297
   Dikel D, 1997, COMPUTER, V30, P49, DOI 10.1109/2.607064
   El Emam K., 1999, Empirical Software Engineering, V4, P113, DOI 10.1023/A:1009820201126
   Gordon J.R., 2002, ORG BEHAV DIAGNOSTIC
   Hames R., 1994, MANAGEMENT MYTH
   Hellriegel D., 1998, Organizational Behavior, V8th
   Jacobsen I., 1997, SOFTWARE REUSE ARCHI
   JEHN KA, 1995, ADMIN SCI QUART, V40, P256, DOI 10.2307/2393638
   KAISER HF, 1970, PSYCHOMETRIKA, V35, P401, DOI 10.1007/BF02291817
   KAISER HF, 1960, EDUC PSYCHOL MEAS, V20, P141, DOI 10.1177/001316446002000116
   Kilmann R.H., 1985, GAINING CONTROL CORP
   Koh E, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P589
   Kotter J.P., 1992, CORPORATE CULTURE PE
   Kottler J., 1994, Beyond Blame: A New Way of Resolving Conflicts in Relationships
   Kuvaja P., 1994, SOFTWARE PROCESS ASS
   Lee HY, 2001, SECOND ASIA-PACIFIC CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P341, DOI 10.1109/APAQS.2001.990039
   Macala RR, 1996, IEEE SOFTWARE, V13, P57, DOI 10.1109/52.493021
   MANNION M, 2002, P 10 INT WORKSH SOFT, P55
   Marquardt M., 1994, GLOBAL LEARNING ORG
   MATHIEU JE, 1990, PSYCHOL BULL, V108, P171, DOI 10.1037/0033-2909.108.2.171
   Medina F.J., 2005, J MANAGE PSYCHOL, V20, P219, DOI [10.1108/02683940510589019, DOI 10.1108/02683940510589019]
   Nunnally JC, 1978, PSYCHOMETRIC THEORY, V2nd
   OReilly CA, 1996, RES ORGAN BEHAV, V18, P157
   OSTERHOF A, 2001, CLASSROOM APPL ED ME
   PAULK MC, 1993, IEEE SOFTWARE, V10, P18, DOI 10.1109/52.219617
   Rosen R., 1995, Strategic management: An introduction
   Schein E.H., 1988, ORG PSYCHOL, V3nd
   Todd A, 1999, LONG RANGE PLANN, V32, P237, DOI 10.1016/S0024-6301(99)00022-9
   Toft P, 2000, KLUWER INT SER ENG C, V576, P111
   van der Linden F, 2004, LECT NOTES COMPUT SC, V3154, P110
   van der Linden F, 2002, IEEE SOFTWARE, V19, P41, DOI 10.1109/MS.2002.1020286
   Verlage M, 2005, PROC INT CONF SOFTW, P534
   Von Eye A., 2005, ANAL RATER AGREEMENT
   WALL JA, 1995, J MANAGE, V21, P515, DOI 10.1016/0149-2063(95)90018-7
   Wang Y., 2000, SOFTWARE ENG PROCESS
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
   WHITE DH, 1982, CONT PERSPECTIVES OR
   Wilson AM, 2001, EUR J MARKETING, V35, P353, DOI 10.1108/03090560110382066
   Wilson D.C., 1990, Managing organizations
   Witherspoon P.D., 1997, Communicating leadership. An organizational perspective
NR 61
TC 15
Z9 17
U1 0
U2 34
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2010
VL 18
IS 2
BP 195
EP 225
DI 10.1007/s11219-009-9088-5
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 584IX
UT WOS:000276746300002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Trienekens, JJM
   Kusters, R
   Kriek, D
   Siemons, P
AF Trienekens, Jos J. M.
   Kusters, Rob
   Kriek, Dirk
   Siemons, Paul
TI Entropy based software processes improvement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software process improvement; Entropy; Empirical research results
AB Actual results of software process improvement projects show different levels of success. Although many software development organisations have adopted improvement models such as CMMI, it appears to be difficult to improve software development processes in the right way, e.g. tuned to the actual needs of the organisation. This paper presents a new approach to determine the direction of improvement for an organisation. This approach is based on an elaboration of the concept of entropy. The approach is empirically validated by carrying out interviews in 11 software development organisations in The Netherlands. The results of the research show that software development organisations can be classified and can be positioned on the basis of their internal and external entropy, c.q. the level of (dis)order in the business system and its environment. Based on a possible out-of-balance situation between the internal and external entropy, directions for software process improvement can be discussed. As such the proposed approach can support the application of current software process improvement methodologies such as the CMMI.
C1 [Trienekens, Jos J. M.; Kusters, Rob] Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
   [Kriek, Dirk] Qual House BV, NL-3404 LL Ijsselstein, Netherlands.
C3 Eindhoven University of Technology
RP Trienekens, JJM (corresponding author), Eindhoven Univ Technol, Den Dolech 2, NL-5600 MB Eindhoven, Netherlands.
EM j.j.m.trienekens@tm.tue.nl; r.j.kusters@tm.tue.nl;
   d.kriek@qualityhouse.nl; paul.siemons@draugronth.nl
RI Kusters, Rob/B-3093-2010
OI Kusters, Rob/0000-0003-4069-5655
CR Balla K, 2001, SOFTWARE QUAL J, V9, P177, DOI 10.1023/A:1013301503616
   Boldyreff C, 1997, SOFTWARE QUAL J, V6, P99, DOI 10.1023/A:1018547615730
   BOLTZMANN L, 2000, ENTROPIE WARSCHEINLI, V286
   HABRA N, 2007, INFORM SOFT IN PRESS
   HUMPHREY WS, 2001, SOFTWARE PROCESS IMP, P53
   Kuilboer JP, 2000, INFORM SOFTWARE TECH, V42, P27, DOI 10.1016/S0950-5849(99)00054-3
   Ngwenyama O, 2003, IEEE T ENG MANAGE, V50, P100, DOI 10.1109/TEM.2002.808267
   PAULK MC, 1995, SEI SERIES SOFTWARE
   PAULK MC, 1993, CMUSEI93TR25
   Ruiz M, 2002, SOFTWARE QUAL J, V10, P181, DOI 10.1023/A:1020580008694
   *SEI, 2001, CMMI CAP MAT MOD INT
   von Wangenheim CG, 2006, IEEE SOFTWARE, V23, P91, DOI 10.1109/MS.2006.13
NR 12
TC 13
Z9 13
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2009
VL 17
IS 3
BP 231
EP 243
DI 10.1007/s11219-008-9063-6
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 460XE
UT WOS:000267224200002
OA hybrid
DA 2024-07-18
ER

PT J
AU Côté, MA
   Suryn, W
   Georgiadou, E
AF Cote, Marc-Alexis
   Suryn, Witold
   Georgiadou, Elli
TI In search for a widely applicable and accepted software quality model
   for software quality engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT Conference on Software Quality Management
CY APR, 2006
CL Southampton, ENGLAND
AB Software Quality Engineering is an emerging discipline that is concerned with improving the approach to software quality. It is important that this discipline be firmly rooted in a quality model satisfying its needs. In order to define the needs of this discipline, the meaning of quality is broadly defined by reviewing the literature on the subject. Software Quality Engineering needs a quality model that is usable throughout the software lifecycle and that it embraces all the perspectives of quality. The goal of this paper is to propose the characteristics of a quality model suitable for such a purpose, through the comparative evaluation of existing quality models and their respective support for Software Quality Engineering.
C1 Ubisoft Canada, Quebec City, PQ, Canada.
   Software & Informat Technol Engn Dept, Montreal, PQ, Canada.
   Middlesex Univ, London, England.
C3 Ubisoft Entertainment; Middlesex University
RP Côté, MA (corresponding author), Ubisoft Canada, Quebec City, PQ, Canada.
EM marc-alexis.cote@ubisoft.com; witold.suryn@etsmtl.ca;
   e.georgiadou@mdx.ac.uk
CR ADEY CA, 2000, QUALITY ISO 9000 MAR
   [Anonymous], 1998, 10611998 IEEE
   BAZZANA G, 1993, SOFT ENG STAND S
   BIEHL RE, 2001, IEEE SOFTWARE, V21, P68
   Boddie J, 2000, IEEE SOFTWARE, V17, P79, DOI 10.1109/52.877871
   Boehm B.W., 1978, Characteristics of Software Quality
   BOURQUE P, 2000, J SYST SOFTWARE, V62, P59
   Cote M.A., 2004, SOFTWARE QUALITY PRO, V6, P4
   CROSBY PB, 1979, QUALITY FREE ART MAK
   Diaz M, 1997, IEEE SOFTWARE, V14, P75, DOI 10.1109/52.605934
   Dromey RG, 1996, IEEE SOFTWARE, V13, P33, DOI 10.1109/52.476284
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   Georgiadou E, 2003, SOFTWARE QUAL J, V11, P313, DOI 10.1023/A:1025817312035
   GEORGIADOU E, 2003, INT J CYBERNETICS, V19, P172
   Haley TJ, 1996, IEEE SOFTWARE, V13, P33, DOI 10.1109/52.542292
   Highsmith J., 2002, Agile software development ecosystems
   *ISO IEC, 2003, 91262 ISO IEC TR
   *ISO IEC, 1999, 145981 ISO IEC
   *ISO IEC, 2003, 91263 ISO IEC TR
   *ISO IEC, 2001, 91262 ISO IEC DTR
   *ISO IEC, 1999, 90002000 ISOIEC
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   Laitinen M, 2000, IEEE SOFTWARE, V17, P78, DOI 10.1109/52.877870
   MARTIN RA, 1996, PROVIDING FRAMEWORK
   McCall J., 1977, Factors in software quality, V1
   Pfleeger S.L., 2001, SOFTWARE ENG THEORY, V2nd
   PRESSMAN RS, 2001, SOFTWARE ENV PRACTIO
   SIAKA KV, 2005, PERFUMES SCENT PRODU
   SIAKA KV, 1997, 7 WORLD C TOT QUAL Q
   SURYN W, 2003, COURSE NOTES SYS861
   Voas J, 2003, IEEE SOFTWARE, V20, P48, DOI 10.1109/MS.2003.1196320
NR 31
TC 26
Z9 29
U1 2
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2007
VL 15
IS 4
BP 401
EP 416
DI 10.1007/s11219-007-9029-0
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 232EK
UT WOS:000251000900005
DA 2024-07-18
ER

PT J
AU Phalp, KT
   Vincent, J
   Cox, K
AF Phalp, Keith Thomas
   Vincent, Jonathan
   Cox, Karl
TI Assessing the quality of use case descriptions
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE use case; use case description; text comprehension; requirements;
   specification; validation
AB Use cases have, for some years, been a popular approach to specification, as part of the Unified Modelling Language (UML). However, a number of authors have pointed to weaknesses with the approach, particularly in terms of the support offered to the writer of the use case description. This paper describes a Use Case Description Quality Checklist that acts as a check on the quality of the written description. The checklist is derived from theories of text comprehension, taken from the Discourse Processing community. The checklist approach has a number of benefits. First, the approach can be used to derive, or examine further, use case guidelines. That is, by considering whether such guidelines are likely to result in desirable qualities within the resulting description, one is able to make an informed judgement about the utility of those guidelines. Second, one can test for the desirable quality features in existing descriptions, thus enabling empirical validation. Third, as a minimum, the quality features can themselves be used as a checklist for the examination, and revision, of use case descriptions. To demonstrate applicability, the paper reports upon the use, and success, of the approach on an industrial case study.
C1 Bournemouth Univ, Software Syst Modelling Grp, Poole BH12 5BB, Dorset, England.
C3 Bournemouth University
RP Vincent, J (corresponding author), Bournemouth Univ, Software Syst Modelling Grp, Poole BH12 5BB, Dorset, England.
EM kphalp@bmth.ac.uk; jvincent@bmth.ac.uk; karl.cox@nicta.com.au
RI Vincent, Jonathan/HHY-9994-2022
CR ACHOUR C, 1999, REPORT SERIES, V9831
   ADOLPH S, 2003, PATTERNS EFFECTIVE U
   Alexander I., 2001, Requirements Engineering, V6, P252, DOI 10.1007/s766-002-8404-8
   Alexander I, 2003, IEEE SOFTWARE, V20, P58, DOI 10.1109/MS.2003.1159030
   Anda B, 2005, EMPIR SOFTW ENG, V10, P285, DOI 10.1007/s10664-005-1289-3
   ANDA B, 2001, LNCS, V2072, P402, DOI DOI 10.1007/3-540-45337-7.21
   [Anonymous], 1992, Object Oriented Software Engineering: A Use Case Driven Approach
   [Anonymous], 1998, Applying Use Cases: A Practical Guide
   [Anonymous], 2001, APPL USE CASE DRIVEN
   Arlow J., 1998, Requirements Engineering, V3, P150, DOI 10.1007/BF02919976
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   BRANSFORD JD, 1972, COGNITIVE PSYCHOL, V3, P193, DOI 10.1016/0010-0285(72)90003-5
   Bray I.K., 2002, INTRO REQUIREMENTS E
   Budgen D., 1994, SOFTWARE DESIGN
   Carroll JM, 2000, INTERACT COMPUT, V13, P43, DOI 10.1016/S0953-5438(00)00023-0
   Clark HH, 1997, DISCOURSE PROCESS, V23, P567, DOI 10.1080/01638539709545003
   Cockburn A., 2001, Writing effective use cases
   Cox K, 2004, J RES PRACT INF TECH, V36, P211
   Cox K., 2000, Empirical Software Engineering, V5, P245, DOI 10.1023/A:1026542700033
   Cox K, 2000, 11TH INTERNATIONAL WORKSHOP ON DATABASE AND EXPERT SYSTEMS APPLICATION, PROCEEDINGS, P995, DOI 10.1109/DEXA.2000.875148
   COX K, 2002, THESIS BOURNEMOUTH U
   Cox K., 2001, 7th Int. Workshop on Requirements Engineering, P101
   DAVIS A, 1991, SOFTWARE REQUIREMENT
   Davis A. M., 2002, Requirements Engineering, V7, P107, DOI 10.1007/s007660200007
   Fletcher C.R., 1996, MODELS UNDERSTANDING, P141
   Fowler M., 2000, UML Distilled, V2nd
   GALLIERS RD, 1987, COMMUN ACM, V30, P900
   Garnham A., 1996, MODELS UNDERSTANDING, P313
   Gause D.C., 1989, EXPLORING REQUIREMEN
   Gernsbacher M.A., 1996, MODELS UNDERSTANDING, P289, DOI DOI 10.1162/0898929053747658
   Gernsbacher MA, 1997, DISCOURSE PROCESS, V23, P265, DOI 10.1080/01638539709544994
   Goldman S.R., 1996, Models of Understanding Text, P73
   Goldman SR, 1999, NARRATIVE COMPREHENSION, CAUSALITY, AND COHERENCE, P1
   Graesser A.C., 1996, MODELS UNDERSTANDING, P341, DOI DOI 10.4324/9781315806143
   Graham I., 1998, REQUIREMENTS ENG RAP
   Halliday M.A.K., 1976, Cohesion in English, DOI 10.1677/ERC-09-0254
   HAM G, 1998, CROSSTALK        DEC
   Hsia P., 1988, Proceedings of the Twenty-First Annual Hawaii International Conference on System Sciences. Vol.II. Software Track (Cat. No.88TH0212-1), P455, DOI 10.1109/HICSS.1988.11837
   Insfran E., 2002, Requirements Engineering, V7, P61, DOI 10.1007/s007660200005
   Jackson M., 2001, Problem Frames
   Jackson M., 1995, SOFTWARE REQUIREMENT
   Jackson M. A., 1998, Requirements Engineering, V3, P73, DOI 10.1007/BF02919965
   Jarke M., 1998, Requirements Engineering, V3, P155, DOI 10.1007/s007660050002
   JROGENSEN JB, 2005, 13 IEEE INT REQ ENG
   Kaakinen JK, 2002, DISCOURSE PROCESS, V33, P159, DOI 10.1207/S15326950DP3302_03
   KAINDL H, 1998, PEOPLE COMPUTERS, V13, P101
   KANYARU J, 2005, 1 INT WORKSH REQ ENG
   KANYARU J, 2005, 11 INT WORKSH REQ EN
   KANYARU J, 2005, EASE 2005 KEEL U 11
   KORN J, 2000, IEE SEM SCEN SYST LI
   Kovitz BenjaminL., 1999, PRACTICAL SOFTWARE R
   Kulak D., 2000, USE CASES REQUIREMEN, V1st
   LEIBUNDGUT R, 2002, REQ ENG SPEC GROUP B
   Liang Y, 2003, INFORM SOFTWARE TECH, V45, P83, DOI 10.1016/S0950-5849(02)00164-7
   Magliano JP, 1999, NARRATIVE COMPREHENSION, CAUSALITY, AND COHERENCE, P55
   Mannes S., 1996, Models of understanding text, P115
   Mattingly L, 1998, J OBJECT-ORIENT PROG, V11, P77
   McNamara DS, 1996, DISCOURSE PROCESS, V22, P247, DOI 10.1080/01638539609544975
   O'Brien EJ, 1999, NARRATIVE COMPREHENSION, CAUSALITY, AND COHERENCE, P35
   *OMG, 2001, 010973 OMG
   Ozyurek A, 1997, DISCOURSE PROCESS, V23, P305, DOI 10.1080/01638539709544995
   Perfetti CA, 1997, DISCOURSE PROCESS, V23, P337, DOI 10.1080/01638539709544996
   PHALP K, 2002, 6 INT C EMP ASS SOFT
   PHALP KT, 2003, 7 INT C EMP ASS EV S
   PHALP KT, 2003, INT WORKSH SOFTW PRO
   POHL K, 2001, 7 INT WORKSH REQ ENG, P68
   Pooley R., 1999, Using UML: software engineering with objects and components
   POTTS C, 1993, IEEE SOFTWARE, V10, P19, DOI 10.1109/52.232392
   Ratcliffe M, 2005, INFORM SOFTWARE TECH, V47, P623, DOI 10.1016/j.infsof.2004.11.003
   Ratcliffe M, 2001, INFORM SOFTWARE TECH, V43, P365, DOI 10.1016/S0950-5849(00)00172-5
   REGNELL B, 1997, 3 INT WORKSH REQ ENG
   REGNELL B, 1995, 2 IEEE INT S REQ ENG, P40
   Roberts KD, 2001, CHINA ECON REV, V12, P15, DOI 10.1016/S1043-951X(01)00041-4
   Robertson S.P., 1995, Scenario-Based Design: Envisioning Work and Technology in System Development, P279
   Rosenberg D., 1999, AW OBJ TECHNOL S
   SOME S, 2005, INFORMATION SOFTWARE
   TRABASSO T, 1989, DISCOURSE PROCESS, V12, P1, DOI 10.1080/01638538909544717
   Traxler MJ, 1995, TYPOL ST L, V31, P215
   Turner A., 1996, MODELS UNDERSTANDING, P33
   VAN-DEN-BROEK P., 1996, MODELS UNDERSTANDING, P165
   WASON PC, 1979, Q J EXP PSYCHOL, V31, P591, DOI 10.1080/14640747908400750
   Whiston S.C., 1993, J CAREER DEV, V19, P175
   WIERINGA R, 2001, REQUIREMENTS ENG J, V6, P132, DOI DOI 10.1007/S007660170010
   Zuber-Skerritt O.)., 1996, New directions in action research
NR 84
TC 25
Z9 30
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2007
VL 15
IS 1
BP 69
EP 97
DI 10.1007/s11219-006-9006-z
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FD
UT WOS:000243927000006
DA 2024-07-18
ER

PT J
AU Moses, J
   Farrow, M
AF Moses, J
   Farrow, M
TI Assessing variation in development effort consistency using a data
   source with missing data
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Function Points; MCAR; MAR; Bayesian inference; Development Type;
   Language Type; linear regression models; deviance statistic; negative
   log likelihood statistic; RSQ Adjusted
ID SOFTWARE COST-ESTIMATION
AB In this study the authors analyse the International Software Benchmarking Standards Group data repository, Release 8.0. The data repository comprises project data from several different companies. However, the repository exhibits missing data, which must be handled in an appropriate manner, otherwise inferences may be made that are biased and misleading. The authors re-examine a statistical model that explained about 62% of the variability in actual software development effort ( Summary Work Effort) which was conditioned on a sample from the repository of 339 observations. This model exhibited covariates Adjusted Function Points and Maximum Team Size and dependence on Language Type ( which includes categories 2nd, 3rd, 4th Generation Languages and Application Program Generators) and Development Type ( enhancement, new development and redevelopment). The authors now use Bayesian inference and the Bayesian statistical simulation program, BUGS, to impute missing data avoiding deletion of observations with missing Maximum Team size and increasing sample size to 616. Providing that by imputing data distributional biases are not introduced, the accuracy of inferences made from models that fit the data will increase. As a consequence of imputation, models that fit the data and explain about 59% of the variability in actual effort are identified. These models enable new inferences to be made about Language Type and Development Type. The sensitivity of the inferences to alternative distributions for imputing missing data is also considered. Furthermore, the authors contemplate the impact of these distributions on the explained variability of actual effort and show how valid effort estimates can be derived to improve estimate consistency.
C1 Univ Sunderland, Sch Comp & Technol, Sunderland SR6 0DD, Durham, England.
C3 University of Sunderland
RP Moses, J (corresponding author), Univ Sunderland, Sch Comp & Technol, Sunderland SR6 0DD, Durham, England.
EM john.moses@sund.ac.uk
CR ABRAN A, 2003, MEASUREMENT MANUAL V
   Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Altman D, 1993, PRACTICAL STAT MED R
   Angelis L, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P4
   [Anonymous], 2001, BAYESIAN STAT MODELL
   [Anonymous], 1996, Bugs 0.5: Bayesian inference using Gibbs sampling, manual (version ii)
   Boehm BW., 1981, Software Engineering Economics
   Cartwright MH, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P154, DOI 10.1109/METRIC.2003.1232464
   DEKKER T, 2004, P 1 SOFTW MEAS EUR F, P63
   Gelman A., 1998, Bayesian data analysis
   Gilks Walter R., 1995, Markov chain Monte Carlo in practice
   Hughes RT, 1996, INFORM SOFTWARE TECH, V38, P67, DOI 10.1016/0950-5849(95)01045-9
   KITCHENHAM BA, 1992, INFORM SOFTWARE TECH, V34, P211, DOI 10.1016/0950-5849(92)90077-3
   LINDLEY DV, 2000, STATISTICIAN, V49, P293, DOI DOI 10.1111/1467-9884.00238
   Little R. J. A., 2019, Statistical Analysis with Missing Data, V793
   Little RJ, 1999, J AM STAT ASSOC, V94, P1130, DOI 10.2307/2669928
   MATSON JE, 1994, IEEE T SOFTWARE ENG, V20, P275, DOI 10.1109/32.277575
   Moses J, 2003, SOFTWARE QUAL J, V11, P283, DOI 10.1023/A:1025861011126
   MOSES J, 2004, P 1 SOFTW MEAS EUR F, P247
   MOSES J, 2001, P 7 IEEE S SOFTW MET, P112
   Myrtveit I, 2001, IEEE T SOFTWARE ENG, V27, P999, DOI 10.1109/32.965340
   Stensrud E, 2003, EMPIR SOFTW ENG, V8, P139, DOI 10.1023/A:1023010612345
   Strike K, 2001, IEEE T SOFTWARE ENG, V27, P890, DOI 10.1109/32.962560
   Symons C.R.:., 1991, Software Sizing and Estimating: Mk II FPA
   Walpole R.E., 1993, Probability and Statistics for Engineers and Scientists, V5
NR 26
TC 5
Z9 5
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2005
VL 13
IS 1
BP 71
EP 89
DI 10.1007/s11219-004-5261-z
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898MD
UT WOS:000227080000004
DA 2024-07-18
ER

PT J
AU Punter, T
   Kusters, R
   Trienekens, J
   Bemelmans, T
   Brombacher, A
AF Punter, T
   Kusters, R
   Trienekens, J
   Bemelmans, T
   Brombacher, A
TI The W-process for software product evaluation: A method for
   goal-oriented implementation of the ISO 14598 standard
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software product evaluation; ISO 14598; software quality; ISO 9126; ISO
   25000; Goal-Question-Metric paradigm
AB The importance of software product evaluations will grow with the awareness of the need for better software quality. The process to conduct such evaluations is crucial to get evaluation results that can be applied and meet customers' expectations. This paper reviews a well-known evaluation process: the ISO 14598 standard. The review focuses on the difficulties in selecting and evaluating the appropriate evaluation techniques. The review shows that the standard has problems in applying evaluation processes in practice due to insufficient attention to goal definition and to relationships between activities being implicit. Also, the standard ignores the trade-off between goals and resources and pays insufficient attention to feedback. To address these deficiencies, the W-process is proposed. It extends the standard through an improved process structure and additional guidelines.
C1 Fraunhofer IESE, D-67661 Kaiserslautern, Germany.
   Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Punter, T (corresponding author), Fraunhofer IESE, Sauerwiesen 6, D-67661 Kaiserslautern, Germany.
EM punter@iese.fraunhofer.de
RI Kusters, Rob/B-3093-2010
OI Kusters, Rob/0000-0003-4069-5655
CR *AF, 1996, SOFTW MAINT EV GUID
   [Anonymous], 1999, 14598 ISOIEC 1
   [Anonymous], 1995, SOFTWARE EVALUATION
   [Anonymous], 1991, 9126 ISOIEC
   AZUMA M, 2001, P EUR SOFTW CONTR ME, P337
   Bache R., 1994, SOFTWARE METRICS PRO
   BASILI VR, 1984, IEEE T SOFTWARE ENG, V10, P728, DOI 10.1109/TSE.1984.5010301
   Boegh J, 1999, IEEE SOFTWARE, V16, P69, DOI 10.1109/52.754056
   Briand L. C., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P475, DOI 10.1109/ICSM.1999.792645
   Cartwright M, 2000, IEEE T SOFTWARE ENG, V26, P786, DOI 10.1109/32.879814
   COLOMBO R, 2002, P ICSSEA 2002 INT C
   Dromey RG, 1996, IEEE SOFTWARE, V13, P33, DOI 10.1109/52.476284
   Fenton N., 1996, SOFTWARE METRICS RIG, VSecond
   HAUSEN H, 1993, 746 GMD
   HEEMSTRA F, 1994, QUALITY NEEDS QUALIT
   *IEEE, 2000, 1471 IEEE
   *ISO, 1994, 8402 ISOIEC
   *ISO FDIS, 1999, 14598 FDIS ISOIEC 6
   Kazman R, 1998, IEEE INT C ENG COMP, P68, DOI 10.1109/ICECCS.1998.706657
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   KOSHGOFTAAR TM, 1998, IEEE T SOFTWARE ENG, V24, P344
   Mayrand J, 1996, PROC INT CONF SOFTW, P210, DOI 10.1109/ICSE.1996.493417
   MILLER K, 1997, P 4 EUR C EV INF TEC, P47
   Park R.E., 1996, GOAL DRIVEN SOFTWARE
   PIVKA M, 1996, P INT C SOFTW QUAL
   PUNTER T, 2001, THESIS EINDHOVEN U T
   PUNTER T, 1998, P EUR SOFTW CONTR ME, P257
   PUNTER T, 1998, P C EMP ASS SOFTW EN
   PUNTER T, 1997, P 4 EUR C EV INF TEC, P57
   *SPAC UF CONS, 1998, SPAC UF METH US GUID
   Starlander Marianne, 2002, P 3 INT C LANG RES E, V1, P268
   Van Solingen Rini, 1999, The Goal/ Question/ Metric Method: a practical guide for quality improvement of software development
   VANDERZWAN M, 1995, THESIS EINDHOVEN U T
NR 33
TC 6
Z9 7
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2004
VL 12
IS 2
BP 137
EP 158
DI 10.1023/B:SQJO.0000024060.32026.a2
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 812OG
UT WOS:000220848200004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Lee, B
   Miller, J
AF Lee, B
   Miller, J
TI Multi-project management in Software Engineering using simulation
   modelling
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE multi-project management; critical chain project management; resource
   allocation; simulation modelling; System Dynamics; multi-project network
AB Multi-project management is crucial in Software Engineering as it draws the resources from common pools, affects the completion date of other projects, determines the priority of use of resources among various projects, involves the judgment of multi-tasking of a common resource, and eventually, determines the success or failure of the projects. Hence, this paper argues that a formal simulation model using System Dynamics principles should be built to study the dynamics of software multi-project management. However, System Dynamics modelling by itself lacks the capability to construct the multi-project network, and thus confines the use of simulation in a single project environment. Thus, this paper is proposing an integration of the System Dynamics model with a multi-project network constructing method, called Critical Chain Project Management ( CCPM). CCPM, not only constructs the network, but also recognizes the interdependencies of the multiple projects. However, the combination of these two principles does not simulate unexpected situations, change of policies and strategies that may be encountered during the project development. Hence, a Scenario model is proposed to be integrated with the System Dynamics and CCPM. With such integration, the project manager can identify the restraining factors in various possible scenarios in the multi-project environment, and provide feasible solutions to the senior management.
C1 Univ Alberta, Dept Elect & Comp Engn, Edmonton, AB T6G 2V4, Canada.
C3 University of Alberta
RP Univ Alberta, Dept Elect & Comp Engn, Edmonton, AB T6G 2V4, Canada.
EM blee@ece.ualberta.ca; jm@ece.ualberta.ca
CR Abdel-Hamid T., 1991, SOFTWARE PROJECT DYN
   BARROS M, 2000, P 2000 INT SYST DYN
   Coyle R. G., 1996, SYSTEM DYNAMICS MODE, P413
   Forrester JW, 1961, Industrial dynamics
   Lehman MeirM., 2001, PARADIGM BEHAV MODEL, P1
   LEHMAN MM, 1998, P INT WORKSH PRINC S, P6
   LEVARY RR, 1988, OMEGA-INT J MANAGE S, V16, P569, DOI 10.1016/0305-0483(88)90030-8
   Madachy RJ, 1996, PROC INT CONF SOFTW, P376, DOI 10.1109/ICSE.1996.493432
   MERRILL D, 1997, FRONT ED C 1997 FIE
   Miranda E, 2002, COMPUTER, V35, P73, DOI 10.1109/2.989933
   Payne J.H., 1995, INT J PROJ MANAG, V13, P163, DOI DOI 10.1016/0263-7863(94)00019-9
   PFAHL D, 2000, 03500E IESE, P1
   Turner J.Rodney, 2009, The handbook of project-based management', V3rd
   Turner RC, 2001, PROF ENG, V14, P17
   WALKER ED, 2001, P 12 ANN C PROD OP M
   WALKER ED, 2000, P SE DEC SCI I WILM, P208
   WALKER ED, 2000, P SE DEC SCI I WILM, P205
   Wiest J., 1977, A management guide to PERT/CPM
NR 18
TC 15
Z9 21
U1 2
U2 26
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2004
VL 12
IS 1
BP 59
EP 82
DI 10.1023/B:SQJO.0000013359.71560.47
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 767DE
UT WOS:000188424300005
DA 2024-07-18
ER

PT J
AU Dawson, R
   O'Neill, B
AF Dawson, R
   O'Neill, B
TI Simple metrics for improving software process performance and
   capability: A case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE performance; capability; process improvement; control diagrams; metrics
AB This paper presents a case study which describes the application of statistical process performance monitoring and capability assessment on a large process control software project. The process performance and capability monitoring used in the case study is part of a Quality Framework for Software Development (QFSD) devised for the development of control systems at Fisher-Rosemount Systems and provides a practical alternative to ISO9000 quality models. The process performance measurements were based on commonly available metrics that could be obtained with the minimum disruption to the processes being examined. The application of statistical methods were used to establish problem areas at the earliest opportunity allowing process adjustments to be made to improve the process performance. The processes used were defined in terms of work products which were categorized and evaluated for the level of completion. This allowed a process capability to be calculated. Those processes which were found to be at a lower capability level became the focus for the process improvement for the next project. In particular the capability measurement identified processes where questions needed to be raised about the relevance of the process, whether the techniques used were effective and whether the tools were adequate. It was found that achieving high performance and capability is a learning process with the development team improving with each new project. The benefits have been better managed, more cost and time effective projects producing higher quality software. Management and the development team have obtained a better understanding of the software development process and this continuing learning process has lead to a continuous improvement in both the development methodology and the resulting software. The paper presents examples of the real benefits that can be obtained by tracking process performance and assessing process capability at all stages, and shows that this can be achieved without the need to resort to complex procedures for process measurement, as most of the empirical data came from commonly available process data.
C1 Loughborough Univ Technol, Loughborough LE11 3TU, Leics, England.
   Fisher Rosemount Syst, Leicester, Leics, England.
C3 Loughborough University
RP Dawson, R (corresponding author), Loughborough Univ Technol, Loughborough LE11 3TU, Leics, England.
CR [Anonymous], 1931, EC CONTROL QUALITY M
   Burr A., 1996, STAT METHODS SOFTWAR
   *CARN MELL U, 1991, CMWSEI91TR24 CARN ME
   Day R.G., 1993, QUALITY FUNCTION DEP
   Hoyle D., 1998, ISO 9000 QUALITY SYS, V3rd
   *ISO IEC, 1998, 15504 ISOIEC
   ONEILL B, 1998, P 2 INT C PLANN MAIN
   ONEILL B, 1998, P INT C SOFTW PROC I
   PRIMATESTA F, 1994, P EUR C BRUSS OCT LO
NR 9
TC 4
Z9 5
U1 0
U2 4
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUL
PY 2003
VL 11
IS 3
BP 243
EP 258
DI 10.1023/A:1025118811896
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711KA
UT WOS:000184737100005
DA 2024-07-18
ER

PT J
AU Lima, OD
   Farias, PPM
   Belchior, AD
AF Lima, OD
   Farias, PPM
   Belchior, AD
TI Fuzzy modeling for function points analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE fuzzy sets; FPA; FFPA; metrics; software design
AB Function Point Analysis (FPA) is a largely used technique to estimate the size of development project, enhancement project or applications already installed. During the point counting process that represents the dimension of a project or an application, each function is classified according to its relative functional complexity. Several studies resulted in FPA extensions, and most of them are mainly aimed at achieving greater precision in the point assessment of systems of greater algorithmic complexity. This work proposes the use of concepts and properties from fuzzy set theory to extend FPA into FFPA (Fuzzy Function Point Analysis). Fuzzy theory seeks to build a formal quantitative structure capable of emulating the imprecision of human knowledge. With the function points generated by FFPA, the functionality of the project is better represented than it was through FPA. Thus, derived values such as costs and terms of development can be more precisely determined.
C1 UNIFOR, Mestrado Informat Aplicada, BR-60811341 Fortaleza, Ceara, Brazil.
C3 Universidade Fortaleza
RP Lima, OD (corresponding author), UNIFOR, Mestrado Informat Aplicada, Av Washington Soares 1321, BR-60811341 Fortaleza, Ceara, Brazil.
RI FARIAS, PEDRO porfirio Muniz/C-7978-2016; Farias, Pedro da
   Silva/JZD-3395-2024
OI FARIAS, PEDRO porfirio Muniz/0000-0002-6344-4448; 
CR ABRAN A, 1996, IEEE T SOFTWARE ENG, V22
   Albrecht A. J., 1983, IEEE T SOFTWARE ENG
   Albrecht A J, 1979, P IBM APPL DEV JOINT
   [Anonymous], PROGRAMMING LANGUAGE
   [Anonymous], 1992, Fuzzy Set Theory-and Its Applications
   [Anonymous], INFORM CONTR
   APRIL A, 1995, GUID SUMM 95 C SOL F
   BELCHIOR AD, 1997, THESIS UFRJ BRAZIL
   Boehm BW., 1981, Software Engineering Economics
   BOURQUE P, 1996, IFPUG SPRING C ATL A
   DESHARNAIS JM, 1990, P IFPUG SPRING C FLO
   DUBOIS D, 1991, IFSA SPECIAL MEMORIA, V25
   *FFP, 1997, FULL FUNCT POINTS CO
   *FPCPM, 1999, FUNCT POINT COUNT PR
   Grauel A, 1999, FUZZY SET SYST, V101, P205, DOI 10.1016/S0165-0114(98)00163-8
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   KANTROWITZ M, 1997, ANSWERS QUESTIONS FU
   KEMMERER CF, 1997, COMM ACM, V30
   KILT GJ, 1995, FUZZY SETS FUZZY LOG
   Leekwijck W.V., 1999, FUZZY SETS SYSTEMS, V108, P159, DOI DOI 10.1016/S0165-0114(97)00337-0
   LIMA OSJ, 2001, WESS FLOR IT
   LIMA OSJ, 2001, P 4 EUR C SOFTW MEAS
   MICCOLIS AG, 2001, P 4 EUR C SOFTW MEAS
   Pedrycz W., 1998, An introduction to fuzzy sets: analysis and design
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4
   SANTOS VRB, 1972, CURSO CALCULO NUMERI
   SMITH L, 1997, FUNCTION POINT ANAL
   Teodorescu HN, 1999, FUZZY SET SYST, V106, P1, DOI 10.1016/S0165-0114(98)00352-2
   TURKSEN IB, 1991, IFSA SPECIAL MEMORIA
   WANG P, 1997, SOFT COMPUT, V1, P35
   ZITOUNI M, 1996, P 6 INT C SOFTW QUAL
NR 31
TC 9
Z9 9
U1 0
U2 2
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2003
VL 11
IS 2
BP 149
EP 166
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 678DV
UT WOS:000182850500004
DA 2024-07-18
ER

PT J
AU Zhang, D
   Tsai, JJP
AF Zhang, D
   Tsai, JJP
TI Machine learning and software engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE machine learning; software engineering; learning algorithms
ID NEURAL-NETWORKS; PREDICTION; MODELS; REQUIREMENTS; COST
AB Machine learning deals with the issue of how to build programs that improve their performance at some task through experience. Machine learning algorithms have proven to be of great practical value in a variety of application domains. They are particularly useful for ( a) poorly understood problem domains where little knowledge exists for the humans to develop effective algorithms; ( b) domains where there are large databases containing valuable implicit regularities to be discovered; or ( c) domains where programs must adapt to changing conditions. Not surprisingly, the field of software engineering turns out to be a fertile ground where many software development and maintenance tasks could be formulated as learning problems and approached in terms of learning algorithms. This paper deals with the subject of applying machine learning in software engineering. In the paper, we first provide the characteristics and applicability of some frequently utilized machine learning algorithms. We then summarize and analyze the existing work and discuss some general issues in this niche area. Finally we offer some guidelines on applying machine learning methods to software engineering tasks and use some software development and maintenance tasks as examples to show how they can be formulated as learning problems and approached in terms of learning algorithms.
C1 Calif State Univ Sacramento, Dept Comp Sci, Sacramento, CA 95819 USA.
   Univ Illinois, Dept Comp Sci, Chicago, IL 60607 USA.
C3 California State University System; California State University
   Sacramento; University of Illinois System; University of Illinois
   Chicago; University of Illinois Chicago Hospital
RP Calif State Univ Sacramento, Dept Comp Sci, Sacramento, CA 95819 USA.
EM zhangd@ecs.csus.edu; tsai@cs.uic.edu
CR Abd-El-Hafiz S. K., 2000, Automated Software Engineering, V7, P239, DOI 10.1023/A:1008718105516
   AHA D, MACHINE LEARNING RES
   AHA D, CASE BASED REASONING
   [Anonymous], 1995, MYTHICAL MAN MONTH
   [Anonymous], READINGS ARTIFICIAL
   [Anonymous], 2000, AUTOMATIC REENGINEER
   Bailin S. C., 1991, P 6 INT C KNOWLEDGE, P198
   Basili VR, 1997, PROC INT CONF SOFTW, P282, DOI 10.1145/253228.253289
   Bergadano F., 1996, ACM Transactions on Software Engineering and Methodology, V5, P119, DOI 10.1145/227607.227611
   BERGADANO F, 1995, INDUCTIVE LOGIC PROG
   BHANSALI S, 1993, MACH LEARN, V10, P7
   Binder R. V., 1992, International Journal on Artificial Intelligence Tools (Architectures, Languages, Algorithms), V1, P503, DOI 10.1142/S021821309200003X
   Boehm B, 2000, COMPUTER, V33, P99, DOI 10.1109/2.869384
   BRATKO I, 1995, COMMUN ACM, V38, P65, DOI 10.1145/219717.219771
   BRATKO I, 1993, AI TECHNIQUES INFORM
   Briand L. C., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P313, DOI 10.1109/ICSE.1999.841022
   BRIAND LC, 1992, IEEE T SOFTWARE ENG, V18, P931, DOI 10.1109/32.177363
   BRIAND LC, 1993, IEEE T SOFTWARE ENG, V19, P1028, DOI 10.1109/32.256851
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Broy M, 2001, IEEE T SOFTWARE ENG, V27, P42, DOI 10.1109/32.895987
   Chancham P, 2001, J LIPOSOME RES, V11, P139, DOI 10.1081/LPR-100108458
   Choi S, 1998, 1998 ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P322, DOI 10.1109/APSEC.1998.733736
   Chulani S, 1999, IEEE T SOFTWARE ENG, V25, P573, DOI 10.1109/32.799958
   COHEN W, 1997, P 14 INT C MACH LEAR
   Cohen W. W., 1995, Automated Software Engineering, V2, P107, DOI 10.1007/BF00871824
   Cook J. E., 1998, ACM Transactions on Software Engineering and Methodology, V7, P215, DOI 10.1145/287000.287001
   Cristianini N., 2000, INTRO SUPPORT VECTOR
   de Almeida MA, 1998, PROC INT CONF SOFTW, P473, DOI 10.1109/ICSE.1998.671609
   DEALMEIDA M, 1999, P INT S METH INT SYS
   DEVANBU P, 1991, COMMUN ACM, V34, P34, DOI 10.1145/103167.103172
   Dietterich TG, 1997, AI MAG, V18, P97
   Dohi T, 1999, ANN SOFTW ENG, V8, P167, DOI 10.1023/A:1018962910992
   Dolado JJ, 2000, IEEE T SOFTWARE ENG, V26, P1006, DOI 10.1109/32.879821
   Drummong CG, 2000, IEEE T SOFTWARE ENG, V26, P1179, DOI 10.1109/32.888631
   El Emam K, 2001, J SYST SOFTWARE, V55, P301, DOI 10.1016/S0164-1212(00)00079-0
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   EVETT M, 1998, P 3 ANN GEN PROGR C, P60
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Finnie GR, 1997, J SYST SOFTWARE, V39, P281, DOI 10.1016/S0164-1212(97)00055-1
   Fouque G., 1992, Proceedings of the Seventh Knowledge-Based Software Engineering Conference (Cat. No.92TH0480-4), P90, DOI 10.1109/KBSE.1992.252905
   Ganesan K, 2000, INT J SOFTW ENG KNOW, V10, P139, DOI 10.1142/S0218194000000092
   GARG P, 1992, P INT C SOFTW ENG, P280
   Glass Robert L., 1988, SYSTEM DEV       JAN, P4
   Green C., 1986, Readings in Artificial Intelligence and Software Engineering, P377
   Hall R. J., 1995, Automated Software Engineering, V2, P131, DOI 10.1007/BF00871825
   Hall RJ, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P115
   Harandi M. T., 1991, P 6 ANN KNOWL BAS, P188
   Henninger S., 1997, Automated Software Engineering, V4, P319, DOI 10.1023/A:1008679010073
   HILL WL, 1987, P INT JOINT C ART IN, P338
   Hong ES, 1997, ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE AND INTERNATIONAL COMPUTER SCIENCE CONFERENCE, PROCEEDINGS, P23, DOI 10.1109/APSEC.1997.640158
   Jensen FV, 1996, INTRO BAYESIAN NETWO
   JORGENSEN M, 1995, IEEE T SOFTWARE ENG, V21, P674, DOI 10.1109/32.403791
   KARUNANITHI N, 1992, IEEE T SOFTWARE ENG, V18, P563, DOI 10.1109/32.148475
   Katalagarianos P., 1995, Automated Software Engineering, V2, P55, DOI 10.1007/BF00873409
   Khoshgoftaar T. M., 1995, Annals of Software Engineering, V1, P141, DOI 10.1007/BF02249049
   Khoshgoftaar TM, 1997, IEEE T NEURAL NETWOR, V8, P902, DOI 10.1109/72.595888
   Khoshgoftaar TM, 2000, 3RD IEEE SYMPOSIUM ON APPLICATION SPECIFIC SYSTEMS AND SOFTWARE ENGINEERING TECHNOLOGY, PROCEEDINGS, P57, DOI 10.1109/ASSET.2000.888032
   Kramer MD, 2000, P INT COMP SOFTW APP, V24, P614, DOI 10.1109/CMPSAC.2000.884788
   LANGDON WB, 1995, P 6 INT C GEN ALG, P295
   LANGLEY P, 1995, COMMUN ACM, V38, P55, DOI 10.1145/219717.219768
   Lanubile F, 1997, J SYST SOFTWARE, V38, P225, DOI 10.1016/S0164-1212(96)00153-7
   Leake DB, 2001, APPL INTELL, V14, P77, DOI 10.1023/A:1008307108914
   Lee BJ, 1998, 1998 ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P4, DOI 10.1109/APSEC.1998.733547
   Liu A., 1996, International Journal on Artificial Intelligence Tools (Architectures, Languages, Algorithms), V5, P167, DOI 10.1142/S0218213096000122
   LOWRY MR, 1992, AI MAG, V13, P71
   Mao YD, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P84, DOI 10.1109/ASE.1998.732582
   Mendonca M., 1999, MINING SOFTWARE ENG
   Menzies T, 2001, HDB SOFTWARE ENG KNO
   Michael C, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P136, DOI 10.1109/ASE.1998.732605
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Michalski R.S., 1998, MACHINE LEARNING DAT
   Minton S., 1994, Proceedings. The Ninth Knowledge-Based Software Engineering Conference (Cat. No.94TH0664-3), P31, DOI 10.1109/KBSE.1994.342680
   Mitchell T. M., 1997, MACHINE LEARNING
   Mitchell TM, 1997, AI MAG, V18, P11
   Mitchell TM, 1999, COMMUN ACM, V42, P30, DOI 10.1145/319382.319388
   MOSTOW J, 1985, IEEE T SOFTWARE ENG, V11, P1253, DOI 10.1109/TSE.1985.231876
   Ostertag E., 1992, ACM Transactions on Software Engineering and Methodology, V1, P205, DOI 10.1145/131736.131739
   PARNAS DL, 1979, IEEE T SOFTWARE ENG, V5, P128, DOI 10.1109/TSE.1979.234169
   PARTRIDGE D, 1998, ARTIFICIAL INTELLIGE
   PARTRIDGE D, 2001, 399 U EX SCH ENG COM
   Peters N, 1998, NEUROPATH APPL NEURO, V24, P3
   PORTER AA, 1990, IEEE SOFTWARE, V7, P46, DOI 10.1109/52.50773
   Provost F, 1998, MACH LEARN, V30, P127, DOI 10.1023/A:1007442505281
   QUINLAN JR, 1990, MACH LEARN, V5, P239, DOI 10.1007/BF00117105
   QURESHI A, 1996, RN964 U COLL LOND
   RYAN C, 1999, ADV GENETIC PROGRAMM, V3, P15
   Saitta L, 1998, MACH LEARN, V30, P133, DOI 10.1023/A:1007448122119
   SELBY RW, 1988, IEEE T SOFTWARE ENG, V14, P1743, DOI 10.1109/32.9061
   SELFRIDGE OG, 1993, AI MAG, V14, P36
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Shukla KK, 2000, INFORM SOFTWARE TECH, V42, P701, DOI 10.1016/S0950-5849(00)00114-2
   Sommerville I., 1996, Software Engineering, V5th
   SRINIVASAN K, 1995, IEEE T SOFTWARE ENG, V21, P126, DOI 10.1109/32.345828
   Sutton R., 1999, REINFORCEMENT LEARNI
   Tsai JJP, 1998, IEEE T KNOWL DATA EN, V10, P91, DOI 10.1109/69.667092
   TSAI JJP, 1993, KNOWLEDGE BASED SOFT
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P1089, DOI 10.1109/32.738341
   VICINANZA S, 1990, P 11 INT C INF SYST, P149
   WELTY C, 1995, AUTOMAT SOFTW ENG, V4, P255
   Zhang D, 2002, PROC INT C TOOLS ART, P22, DOI 10.1109/TAI.2002.1180784
   Zhang D., 2000, P 2000 MONT WORKSH M, P275
   Zhu H, 1996, IEEE T SOFTWARE ENG, V22, P248, DOI 10.1109/32.491648
   [No title captured]
NR 103
TC 89
Z9 107
U1 3
U2 65
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2003
VL 11
IS 2
BP 87
EP 119
DI 10.1023/A:1023760326768
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 678DV
UT WOS:000182850500002
DA 2024-07-18
ER

EF