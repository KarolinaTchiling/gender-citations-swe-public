FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Naghdipour, A
   Hasheminejad, SMH
AF Naghdipour, Ameneh
   Hasheminejad, Seyed Mohammad Hossein
TI Implications of semi-supervised learning for design pattern selection
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software design patterns; Design problems; Semi-supervised learning;
   Text categorization; Design pattern selection
ID SOFTWARE; CLASSIFICATION; MODELS
AB The significant impact of software design patterns on software design quality has led to conducting more research in this field. A design pattern is a proven solution based on software developers' experience to solve recurring problems, which is used to acquire quality software design. However, due to a large number of design patterns, selecting an appropriate one is quite difficult. To tackle this issue, researchers have proposed different methods to automatically suggest a suitable design pattern (DP) to the designer. Among the various proposed methods, the text classification-based approach has used supervised and unsupervised methods, which have certain issues such as the need for manual dataset labeling, the need for using separate classifiers for each design pattern class, and the multi-class problem. This study addresses the mentioned issues by providing a three-phase method for choosing the appropriate design pattern. The proposed method exploits the semi-supervised learning method. Subsequently, this study proposes an evaluation model using three widely used case studies and 109 real design problems to evaluate the effectiveness of the proposed method. The evaluation results indicate that the performance of the proposed method has improved compared to the supervised learning techniques of Naive Bayes and KNearestNeighbor.
C1 [Naghdipour, Ameneh; Hasheminejad, Seyed Mohammad Hossein] Alzahra Univ, Fac Engn, Dept Comp Engn, Tehran, Iran.
C3 Alzahra University
RP Hasheminejad, SMH (corresponding author), Alzahra Univ, Fac Engn, Dept Comp Engn, Tehran, Iran.
EM A.naghdipour@alzahra.ac.ir; SMH.Hasheminejad@alzahra.ac.ir
OI Naghdipour, Ameneh/0000-0001-9961-4819
CR Alpaydin E., 2010, Introduction to Machine Learning
   Baraki H, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P477, DOI 10.1109/ICSE.2015.180
   Booch G., 2006, HDB SOFTWARE ARCHITE
   Bou C, 2018, LECT NOTES ARTIF INT, V10751, P25, DOI 10.1007/978-3-319-75417-8_3
   Bouhours C, 2015, SOFTWARE QUAL J, V23, P661, DOI 10.1007/s11219-014-9249-z
   Douglass B., 2003, REAL TIME DESIGN PAT
   Du F, 2020, T GIS, V24, P315, DOI 10.1111/tgis.12598
   Galvin P. B., 2002, OPERATING SYSTEM CON
   Gamma Erich, 1995, DESIGN PATTERNS ELEM
   Gorriz JM, 2017, EXPERT SYST APPL, V90, P40, DOI 10.1016/j.eswa.2017.08.006
   Graves AR, 2000, IEEE T SYST MAN CY A, V30, P36, DOI 10.1109/3468.823479
   Hady MFA., 2013, HDB NEURAL INFORM PR, P215, DOI [10.1007/978-3-642-36657-4_7, DOI 10.1007/978-3-642-36657-4_7]
   Hamdy Abeer, 2018, Journal of Software, V13, P260, DOI 10.17706/jsw.13.4.260-268
   Hamdy A., 2018, P INT C GEOINF DAT A, P41
   Hasheminejad SMH, 2012, J SYST SOFTWARE, V85, P408, DOI 10.1016/j.jss.2011.08.031
   Hotho A., 2005, LDV FORUM, V20, P19, DOI DOI 10.1111/j.1365-2621.1978.tb09773.x
   Hsueh NL, 2009, SOFTW SYST MODEL, V8, P67, DOI 10.1007/s10270-007-0063-y
   Huang A., 2008, Proceedings of the sixth new zealand computer science research student conference (NZCSRSC2008), V4, P9
   Hussain S, 2019, APPL SOFT COMPUT, V75, P1, DOI 10.1016/j.asoc.2018.10.049
   Hussain S, 2018, J PARALLEL DISTR COM, V117, P256, DOI 10.1016/j.jpdc.2017.06.022
   Hussain S, 2018, ADV INTELL SYST, V611, P205, DOI 10.1007/978-3-319-61566-0_20
   Hussain S, 2017, APPL SOFT COMPUT, V58, P225, DOI 10.1016/j.asoc.2017.04.043
   Hussain S, 2016, P INT COMP SOFTW APP, P161, DOI 10.1109/COMPSAC.2016.226
   Issaoui Imene, 2015, Lecture Notes on Software Engineering, V3, P173, DOI 10.7763/LNSE.2015.V3.185
   Kim DK, 2008, SOFTWARE QUAL J, V16, P329, DOI 10.1007/s11219-008-9048-5
   Kim DK, 2007, J VISUAL LANG COMPUT, V18, P560, DOI 10.1016/j.jvlc.2007.02.009
   Kostopoulos G., 2015, P 19 PANHELLENIC C I, P38, DOI [10.1145/2801948.2802013, DOI 10.1145/2801948.2802013]
   Kostopoulos G, 2015, LECT NOTES COMPUT SC, V9344, P259, DOI 10.1007/978-3-319-23781-7_21
   Li ZY, 2017, EXPERT SYST APPL, V74, P105, DOI 10.1016/j.eswa.2017.01.011
   Livieris IE, 2019, J EDUC COMPUT RES, V57, P448, DOI 10.1177/0735633117752614
   Muangon W., 2013, INT J COMPUTER APPL, V70, P16, DOI DOI 10.5120/12231-8433
   Muangon W, 2009, 2009 2ND IEEE INTERNATIONAL CONFERENCE ON COMPUTER SCIENCE AND INFORMATION TECHNOLOGY, VOL 4, P424, DOI 10.1109/ICCSIT.2009.5234534
   Naghdipour A., 2021, P 2021 26 INT COMPUT, P1
   Nahar N., 2015, CEUR WORKSH P, P9
   Nahar N, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 4, P4, DOI 10.1109/SANER.2016.44
   Narayan R, 2018, ADV INTELL SYST, V719, P281, DOI 10.1007/978-981-10-3376-6_31
   Palma F., 2012, 2012 Third International Workshop on Recommendation Systems for Software Engineering (RSSE), P1, DOI 10.1109/RSSE.2012.6233399
   Pavlic L, 2014, COMPUT SCI INF SYST, V11, P645, DOI 10.2298/CSIS130824025P
   Porter MF, 2006, PROGRAM-ELECTRON LIB, V40, P211, DOI [10.1108/00330330610681286, 10.1108/eb046814]
   Prechelt L, 2001, IEEE T SOFTWARE ENG, V27, P1134, DOI 10.1109/32.988711
   Qureshi M. Rizwan Jameel, 2017, International Journal of Modern Education and Computer Science, V9, P43, DOI 10.5815/ijmecs.2017.05.06
   Rahmati R, 2019, 2019 9TH INTERNATIONAL CONFERENCE ON COMPUTER AND KNOWLEDGE ENGINEERING (ICCKE 2019), P345, DOI [10.1109/ICCKE48569.2019.8965221, 10.1109/iccke48569.2019.8965221]
   Roli F, 2006, LECT NOTES COMPUT SC, V4109, P560
   Sanyawong Nuttapon, 2014, 2014 International Computer Science and Engineering Conference (ICSEC), P134, DOI 10.1109/ICSEC.2014.6978183
   Schumacher M., 2005, Security Patterns: Integrating Security and Systems Engineering, V1st
   Schwenker F, 2014, PATTERN RECOGN LETT, V37, P4, DOI 10.1016/j.patrec.2013.10.017
   Sebastiani F, 2002, ACM COMPUT SURV, V34, P1, DOI 10.1145/505282.505283
   Seliya N, 2007, SOFTWARE QUAL J, V15, P327, DOI 10.1007/s11219-007-9013-8
   Shalloway A., 2005, Design Patterns Explained: A New Perspective on Object-Oriented Design, V2/E
   Sigdel Madhav, 2014, Proc IEEE Southeastcon, V2014, DOI 10.1109/SECON.2014.6950649
   Tandel SS, 2019, INT CONF ADVAN COMPU, P1022, DOI [10.1109/ICACCS.2019.8728547, 10.1109/icaccs.2019.8728547]
   Tanenbaum A. S., 2015, Modern operating systems, V4th
   Thabasum S. S., 2012, INT J COMPUT SCI NET, V2, P496
   Triguero I, 2015, KNOWL INF SYST, V42, P245, DOI 10.1007/s10115-013-0706-y
   Turney PD, 2010, J ARTIF INTELL RES, V37, P141, DOI 10.1613/jair.2934
   van Engelen JE, 2020, MACH LEARN, V109, P373, DOI 10.1007/s10994-019-05855-6
   Velasco-Elizondo P, 2016, SCI COMPUT PROGRAM, V121, P176, DOI 10.1016/j.scico.2015.12.007
   Zhu Xiaojin, 2010, Encyclopedia of Machine Learning, P892, DOI DOI 10.1007/978-0-387-30164-8_749
NR 58
TC 2
Z9 2
U1 2
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 809
EP 842
DI 10.1007/s11219-022-09610-4
EA JAN 2023
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000909470400001
DA 2024-07-18
ER

PT J
AU Alkharabsheh, K
   Crespo, Y
   Fernández-Delgado, M
   Viqueira, JR
   Taboada, JA
AF Alkharabsheh, Khalid
   Crespo, Yania
   Fernandez-Delgado, Manuel
   Viqueira, Jose R.
   Taboada, Jose A.
TI Exploratory study of the impact of project domain and size category on
   the detection of the God class design smell
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Design smell detection; Machine learning; Software metrics; Project
   context information; God class
ID BAD SMELLS; CODE; DERIVATION
AB Design smell detection has proven to be an efficient strategy to improve software quality and consequently decrease maintainability expenses. This work explores the influence of the information about project context expressed as project domain and size category information, on the automatic detection of the god class design smell by machine learning techniques. A set of experiments using eight classifiers to detect god classes was conducted on a dataset containing 12, 587 classes from 24 Java projects. The results show that classifiers change their behavior when they are used on datasets that differ in these kinds of project information. The results show that god class design smell detection can be improved by feeding machine learning classifiers with this project context information.
C1 [Alkharabsheh, Khalid] Al Balqa Appl Univ BAU, Dept Software Engn, As Salt 19117, Jordan.
   [Fernandez-Delgado, Manuel; Viqueira, Jose R.; Taboada, Jose A.] Univ Santiago Compostela, Ctr Singular Invest Tecnoloxias Intelixentes, CiTIUS, Santiago De Compostela 15782, Spain.
   [Crespo, Yania] Univ Valladolid, Dept Informat, Escuela Ingn Informat, Campus Miguel Delibes,Paseo Belen 15, Valladolid 47011, Spain.
C3 Al-Balqa Applied University; Universidade de Santiago de Compostela;
   Universidad de Valladolid
RP Crespo, Y (corresponding author), Univ Valladolid, Dept Informat, Escuela Ingn Informat, Campus Miguel Delibes,Paseo Belen 15, Valladolid 47011, Spain.
EM khalidkh@bau.edu.jo; yania@infor.uva.es; manuel.fernandez.delgado@usc.e;
   jrr.viqueira@usc.e; joseangel.taboada@usc.e
RI Alkharabsheh, Khalid/HGB-7962-2022; Viqueira, Jose R/L-5728-2014;
   Taboada, José Antonio Franco/F-2827-2016; González, José Ángel
   Taboada/L-5844-2014; Crespo, Yania/I-5609-2015
OI Alkharabsheh, Khalid/0000-0002-3182-418X; González, José Ángel
   Taboada/0000-0003-1897-1537; Fernandez Delgado,
   Manuel/0000-0001-5483-9424; Crespo, Yania/0000-0003-0639-0540
CR Alkharabsheh K., 2016, 21 JORN ING SOFTW BA, P143
   ALKHARABSHEH K, 2018, SOFTWARE QUAL J
   Alkharabsheh K., 2016, 21 JORN ING SOFTW BA, P159
   Alves TL, 2010, PROC IEEE INT CONF S
   [Anonymous], 2005, PMD applied
   [Anonymous], 2019, LARGE EMPIRICAL ASSE
   Azadi U, 2019, 2019 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT 2019), P88, DOI 10.1109/TechDebt.2019.00027
   Azeem MI, 2019, INFORM SOFTWARE TECH, V108, P115, DOI 10.1016/j.infsof.2018.12.009
   Bekkar M., 2013, J Inf Eng Appl, V3, P15, DOI DOI 10.5121/IJDKP.2013.3402
   Blackman NJM, 2000, STAT MED, V19, P723, DOI 10.1002/(SICI)1097-0258(20000315)19:5<723::AID-SIM379>3.0.CO;2-A
   Borland, 2008, TOGETHER
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Choinzon M, 2006, FRONT ARTIF INTEL AP, V140, P61
   Cortez, 2015, TUTORIAL USING MINER
   Counsell S, 2007, THIRD INTERNATIONAL IEEE WORKSHOP ON SOFTWARE EVOLVABILITY, PROCEEDINGS, P23, DOI 10.1109/SE.2007.13
   Crespo Y., 2006, P 10 ECOOP WORKSH QU, P109
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Di Nucci D, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P612, DOI 10.1109/SANER.2018.8330266
   Fernandes E, 2016, PROCEEDINGS OF THE 20TH INTERNATIONAL CONFERENCE ON EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING 2016 (EASE '16), DOI 10.1145/2915970.2915984
   FOKAEFS M, 2009, PROC IEEE INT CONF S
   Fontana FA, 2016, EMPIR SOFTW ENG, V21, P1143, DOI 10.1007/s10664-015-9378-4
   Fontana FA, 2015, INT WORKS EMERG TREN, P44, DOI 10.1109/WETSoM.2015.14
   Fontana FA, 2012, J OBJECT TECHNOL, V11, DOI 10.5381/jot.2012.11.2.a5
   Fontana FA, 2013, PROC IEEE INT CONF S, P260, DOI 10.1109/ICSM.2013.37
   Fontana FA, 2013, PROC IEEE INT CONF S, P396, DOI 10.1109/ICSM.2013.56
   Fourati R, 2011, STUD COMPUT INTELL, V364, P17
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Gronback R. C., 2003, Software Remodeling: Improving Design and Implementation Quality
   Guggulothu T, 2020, SOFTWARE QUAL J, V28, P1063, DOI 10.1007/s11219-020-09498-y
   Hall T, 2011, IEEE SOFTWARE, V28, P96, DOI 10.1109/MS.2011.138
   Hassaine S, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P343, DOI 10.1109/QUATIC.2010.61
   Herbold S, 2011, EMPIR SOFTW ENG, V16, P812, DOI 10.1007/s10664-011-9162-z
   Hollander M., 2013, Nonparametric statistical methods
   Khomh F, 2011, J SYST SOFTWARE, V84, P559, DOI 10.1016/j.jss.2010.11.921
   Kreimer J, 2005, ELECTRON NOTES THEOR, V141, P117, DOI 10.1016/j.entcs.2005.02.059
   Lanza M, 2007, Object-oriented Metrics in Practice: Using Software Metrics To Characterize, Evaluate, and Improve the Design of Object-oriented Systems
   Li W, 2007, J SYST SOFTWARE, V80, P1120, DOI 10.1016/j.jss.2006.10.018
   Linares-Vasquez M, 2014, P 22 INT C PROGR COM, P232
   Liu H, 2016, IEEE T SOFTWARE ENG, V42, P544, DOI 10.1109/TSE.2015.2503740
   Lopez Nozal, 2012, THESIS U VALLADOLID
   Maiga A., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P466, DOI 10.1109/WCRE.2012.56
   Maiga A, 2012, IEEE INT CONF AUTOM, P278, DOI 10.1145/2351676.2351723
   Maneerat N., 2011, Proceedings of the Eighth International Joint Conference on Computer Science and Software Engineering (JCSSE 2011), P331, DOI 10.1109/JCSSE.2011.5930143
   Marinescu C., 2005, IEEE INT C SOFTW MAI
   MATTHEWS BW, 1975, BIOCHIM BIOPHYS ACTA, V405, P442, DOI 10.1016/0005-2795(75)90109-9
   Mihancea PF, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P92, DOI 10.1109/CSMR.2005.53
   Mistrik I., 2015, Software quality assurance: In large scale and complex software-intensive systems, V1st
   Moha N., 2007, ACM SIGPLAN C OBJ OR, P949
   Moha N., 2007, ASE 07 2007 ACM IEEE, P527, DOI [10.1145/1321631.1321727, DOI 10.1145/1321631.1321727]
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Morales R, 2017, J SYST SOFTWARE, V128, P236, DOI 10.1016/j.jss.2016.05.042
   Mori A, 2018, 2018 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT), P41, DOI 10.1145/3194164.3194173
   Munro MJ, 2005, 2005 11th International Symposium on Software Metrics (METRICS), P124
   Paiva Thanis, 2017, Journal of Software Engineering Research and Development, V5, DOI 10.1186/s40411-017-0041-1
   Palomba F, 2015, IEEE T SOFTWARE ENG, V41, P462, DOI 10.1109/TSE.2014.2372760
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Palomba F, 2014, ADV COMPUT, V95, P201, DOI 10.1016/B978-0-12-800160-8.00004-8
   Pecorelli F, 2020, J SYST SOFTWARE, V169, DOI 10.1016/j.jss.2020.110693
   Pecorelli F, 2019, INT C PROGRAM COMPRE, P93, DOI 10.1109/ICPC.2019.00023
   Peiris M., 2014, ACM SIGSOFT Softw. Eng. Notes, V39, P1
   Powers DMW, 2020, J MACH LEARN TECHNOL, P37, DOI DOI 10.9735/2229-3981
   Rasool G, 2015, J SOFTW-EVOL PROC, V27, P867, DOI 10.1002/smr.1737
   Riel ArthurJ., 1996, OBJECT ORIENTED DESI, V335
   Santos Jose Amancio, 2013, P 17 INT C EV ASS SO, P48
   Santos JAM, 2018, J SYST SOFTWARE, V144, P450, DOI 10.1016/j.jss.2018.07.035
   Shatnawi R, 2015, J SOFTW-EVOL PROC, V27, P95, DOI 10.1002/smr.1702
   Simons Chris, 2015, Search-Based Software Engineering. 7th International Symposium, SSBSE 2015. Proceedings: LNCS 9275, P47, DOI 10.1007/978-3-319-22183-0_4
   Tahvildari L, 2004, J SOFTW MAINT EVOL-R, V16, P331, DOI 10.1002/smr.299
   Tempero E, 2010, ASIA PAC SOFWR ENG, P336, DOI 10.1109/APSEC.2010.46
   Tonello A, 2011, VER VAL WORKSH INT C, P450
   Tsantalis N, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P329
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Vale G, 2019, SOFTWARE QUAL J, V27, P275, DOI 10.1007/s11219-018-9405-y
   WASSERTHEIL S, 1970, BIOMETRICS, V26, P588, DOI 10.2307/2529115
   Witten IH, 2011, MOR KAUF D, P1
   Yamashita A, 2015, PROC IEEE INT CONF S, P121, DOI 10.1109/ICSM.2015.7332458
   Yamashita A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P682, DOI 10.1109/ICSE.2013.6606614
   Zhang M, 2011, J SOFTW MAINT EVOL-R, V23, P179, DOI 10.1002/smr.521
NR 79
TC 9
Z9 9
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 197
EP 237
DI 10.1007/s11219-021-09550-5
EA MAR 2021
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000635465800001
DA 2024-07-18
ER

PT J
AU Bouasker, T
   Langar, M
   Robbana, R
AF Bouasker, Taycir
   Langar, Mahjoub
   Robbana, Riadh
TI QoS monitor as a service
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality of service; Monitor; Web service; Requirements; User preferences
ID QUALITY ATTRIBUTES; WEB SERVICES
AB Quality of web service becomes more and more interesting as a distinguishing criterion to select a unique web service from all candidate ones. The quality assessment issue, especially regarding the volatility of the web services environment, is one among the main challenges in this context. In this paper, we propose a service-based system for web services monitoring. Compared with other efforts in this concern, our proposal is closer to the client's non-functional requirements, more accurate and extensible to support new quality attributes.
C1 [Bouasker, Taycir] Ecole Polytech Tunisie, Monji Slim, Hammamet, Tunisia.
   [Langar, Mahjoub] Ecole Natl Ingn Tunis, Ezzahra, Tunisia.
   [Robbana, Riadh] Ecole Polytech Tunisie, La Marsa, Tunisia.
C3 Universite de Carthage; Universite de Tunis-El-Manar; Ecole Nationale
   d'Ingenieurs de Tunis (ENIT); Universite de Carthage
RP Bouasker, T (corresponding author), Ecole Polytech Tunisie, Monji Slim, Hammamet, Tunisia.
EM bouasker.taycir@gmail.com; mahjoub.langar@gmail.com;
   riadh.robbana@gmail.com
RI Bouasker, Taycir/ISU-4159-2023
CR A-Masri E, 2007, IEEE IC COMP COM NET, P529
   Al-Moayed Ahmed, 2010, Proceedings Fifth International Conference on Software Engineering Advances (ICSEA 2010), P367, DOI 10.1109/ICSEA.2010.62
   Ameller D, 2016, SOFTWARE QUAL J, V24, P271, DOI 10.1007/s11219-015-9268-4
   Ameller D, 2008, SEVENTH INTERNATIONAL CONFERENCE ON COMPOSITION-BASED SOFTWARE SYSTEMS, PROCEEDINGS, P224, DOI 10.1109/ICCBSS.2008.13
   Anithadevi N, 2019, CLUSTER COMPUT, V22, P14231, DOI 10.1007/s10586-018-2279-8
   [Anonymous], 2015, INT J COMPUTER SCI I
   [Anonymous], 2003, SIGECOM EXCH
   [Anonymous], 2017, 2017 6 INT C COMMUNI
   Araban S., 2004, WSEAS Transactions on Computers, V3, P1136
   Artaiam N, 2008, PROCEEDINGS OF NINTH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING, P765, DOI 10.1109/SNPD.2008.157
   Asadollah SA, 2011, COMM COM INF SC, V164, P276
   Bartolini C, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P326, DOI 10.1109/ICST.2009.28
   Bartolini C, 2008, LECT NOTES COMPUT SC, V5364, P524, DOI 10.1007/978-3-540-89652-4_41
   Becha Hanane., 2012, Journal of Software, V7
   Ben Lakhal R, 2012, PROCEDIA COMPUT SCI, V10, P609, DOI 10.1016/j.procs.2012.06.078
   Bouasker T, 2016, I C COMP SYST APPLIC
   Bouasker T, 2016, 2016 IEEE SYMPOSIUM ON COMPUTERS AND COMMUNICATION (ISCC), P1032, DOI 10.1109/ISCC.2016.7543872
   Chen BB, 2015, CHIN CONT DECIS CONF, P1946, DOI 10.1109/CCDC.2015.7162238
   Chen Fu, 2004, Software Engineering Notes, V29, P23, DOI 10.1145/1013886.1007516
   CHERIAN R., 2010, INT J COMPUT APPL, V1, P79
   CodePlex, 2006, STORM
   Crosscheck, 2005, SOAP SON
   D'Ambrogio A, 2006, ICWS 2006: IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P789
   Dong Rong-sheng, 2010, 2010 International Conference on Intelligent Computing and Integrated Systems (ICISS 2010), P823, DOI 10.1109/ICISS.2010.5657088
   Galster M, 2008, IEEE CONGRESS ON SERVICES 2008, PT I, PROCEEDINGS, P345, DOI 10.1109/SERVICES-1.2008.51
   Hanna S, 2008, PROCEEDINGS OF THE FIFTH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, P471, DOI 10.1109/ITNG.2008.182
   iso, 2017, ISO25000
   Kaewbanjong K., 2015, J ADV MANAG SCI, V3
   Kim E, 2011, WEB SERVICES QUALITY
   Lina Yao, 2013, 2013 IEEE 20th International Conference on Web Services (ICWS), P42, DOI 10.1109/ICWS.2013.16
   Martin E, 2007, PROC INT CONF SOFTW, P65, DOI 10.1109/ICSECOMPANION.2007.84
   Michlmayr Anton., 2009, MWSOC 09 P 4 INT WOR, P1, DOI DOI 10.1145/1657755.1657756
   Neugebauer E, 2009, PAIN ORIG DIAGN TREA, P221
   Oriol M, 2014, INFORM SOFTWARE TECH, V56, P1167, DOI 10.1016/j.infsof.2014.03.012
   ParaSoft, 2014, SOATEST API TEST PAR
   Patro VM, 2015, T NETWORKS COMMUNICA, V3, P59, DOI [10.14738/tnc.31.958, DOI 10.14738/TNC.31.958]
   Pegoraro R, 2008, CSE 2008: PROCEEDINGS OF THE 11TH INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND ENGINEERING, P221, DOI 10.1109/CSEW.2008.59
   San-Yih Hwang, 2015, IEEE Transactions on Services Computing, V8, P467, DOI 10.1109/TSC.2014.2338851
   Saxena Neeraj, 2009, International Journal of Recent Trends in Engineering, V1, P600
   Sha M, 2013, INT J SCI ENG RES IJ, V13, P38
   SmartBear, 2008, SOAPUI PROJ
   Su K, 2017, KNOWL-BASED SYST, V115, P55, DOI 10.1016/j.knosys.2016.09.033
   Susila S., 2011, INT J COMPUTER APPL, V30, P47
   Tewari V., 2012, INT J COMPUTER APPL, V46, P8
   Tosic V, 2005, INFORM SYST, V30, P564, DOI 10.1016/j.is.2004.11.005
   Vadivel S, 2014, INT J WEB ENG, V3, P1
   Weiwei Qiu, 2013, 2013 IEEE International Conference on Services Computing (SCC), P41, DOI 10.1109/SCC.2013.43
   Xiao XC, 2012, PHYSCS PROC, V33, P1992, DOI 10.1016/j.phpro.2012.05.313
   Xu ZQ, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P249
   Yeom G, 2009, IEEE INT CON DIS, P306, DOI 10.1109/ICDCSW.2009.74
   Youcef S, 2010, INFORSID, P195
   Youngkon Lee, 2008, IEEE International Workshop on Semantic Computing and Applications (IWSCA 2008), P117, DOI 10.1109/IWSCA.2008.16
   Zadeh MH, 2010, INT CONF COMP SCI, P659, DOI 10.1109/ICCSIT.2010.5563998
   Zhang GQ, 2007, IITA 2007: WORKSHOP ON INTELLIGENT INFORMATION TECHNOLOGY APPLICATION, PROCEEDINGS, P59, DOI 10.1109/IITA.2007.83
   Zheng Zibin., 2010, P 32 ACMIEEE INT C S, V1, P35, DOI DOI 10.1145/1806799.1806809
   Zulzalil H, 2008, INT J COMPUT SCI NET, V8, P215
NR 56
TC 1
Z9 1
U1 1
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1279
EP 1301
DI 10.1007/s11219-020-09514-1
EA APR 2020
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000527449200001
DA 2024-07-18
ER

PT J
AU Corley, J
   Eddy, BP
   Syriani, E
   Gray, J
AF Corley, Jonathan
   Eddy, Brian P.
   Syriani, Eugene
   Gray, Jeff
TI Efficient and scalable omniscient debugging for model transformations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Omniscient debugging; Model-driven engineering; Model transformation;
   Empirical evaluation
AB This paper discusses a technique for supporting omniscient debugging for model transformations, which are used to define core operations on software and system models. Similar to software systems developed using general-purpose languages, model transformations are also subject to human error and may possess defects. Existing model-driven engineering tools provide stepwise execution to aid developers in locating and removing defects. In this paper, we describe our investigation into a technique and associated algorithms that support omniscient debugging features for model transformations. Omniscient debugging enables enhanced navigation and exploration features during a debugging session beyond those possible in a strictly stepwise execution environment. Finally, the execution time performance is comparatively evaluated against stepwise execution, and the scalability (in terms of memory usage) is empirically investigated.
C1 [Corley, Jonathan; Gray, Jeff] Univ Alabama, Dept Comp Sci, Tuscaloosa, AL 35487 USA.
   [Eddy, Brian P.] Univ West Florida, Dept Comp Sci, Pensacola, FL USA.
   [Syriani, Eugene] Univ Montreal, Dept Comp Sci, Montreal, PQ, Canada.
C3 University of Alabama System; University of Alabama Tuscaloosa; State
   University System of Florida; University of West Florida; Universite de
   Montreal
RP Corley, J (corresponding author), Univ Alabama, Dept Comp Sci, Tuscaloosa, AL 35487 USA.
EM corle001@crimson.ua.edu; beddy@uwf.edu; syriani@iro.umontreal.ca;
   gray@cs.ua.edu
RI Syriani, Eugene/AAI-5036-2020
OI Syriani, Eugene/0000-0001-6527-1651; Gray, Jeff/0000-0003-0082-6753
CR Androutsopoulos K, 2013, ACM COMPUT SURV, V45, DOI 10.1145/2501654.2501667
   [Anonymous], 2006, Software and Systems Modeling, DOI [10.1007/s10270-006-0027-7, DOI 10.1007/S10270-006-0027-7]
   [Anonymous], 2014, GLOBALIZING MODELING
   Basciani F., 2014, 2 INT WORKSH MOD DRI, V1242, P66
   Bousse E., 2015, P 8 INT C S IN PRESS
   Burgeno L., 2015, CEUR WORKSHOP P, P52
   Clinger W. D., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P124, DOI 10.1145/62678.62692
   Corley J., 2016, MODERN SOFTWARE ENG
   Corley J., 2014, P PSRC, P63
   Corley Jonathan., 2014, Proceedings of the 14th Workshop on Domain-Specific Modeling, P13
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Engblom J., 2012, P 2012 SYSTEM SOFTWA
   Ergin Huseyin., 2014, Seventh Transformation Tool Contest, P134
   Gray J., 2007, HDB DYNAMIC SYSTEM M
   Henkler S., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P267, DOI 10.1145/1810295.1810349
   Horn Tassilo., 2014, TTC at STAF, P93
   IEEE, 2002, 610121990 IEEE
   Jouault F, 2006, LECT NOTES COMPUT SC, V3844, P128
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Kolovos D., 2013, P 1 WORKSH SCAL MOD, P1
   Kolovos D S., 2013, Proceedings of the Workshop on Scalability in Model Driven Engineering. BigMDE'13, V2, P1
   Kuhne T., 2006, Softw Syst Model, V5, P369, DOI [DOI 10.1007/S10270-006-0017-9, 10.1007/s10270-006-0017-9]
   Lewis Bil., 2003, DEBUGGING BACKWARDS
   Lienhard A, 2008, LECT NOTES COMPUT SC, V5142, P592, DOI 10.1007/978-3-540-70592-5_25
   Lienhard A, 2009, LECT NOTES BUS INF P, V33, P272
   Lúcio L, 2016, SOFTW SYST MODEL, V15, P647, DOI 10.1007/s10270-014-0429-x
   Mannadiar R, 2011, LECT NOTES COMPUT SC, V6563, P276, DOI 10.1007/978-3-642-19440-5_17
   Pothier G, 2009, IEEE SOFTWARE, V26, P78, DOI 10.1109/MS.2009.169
   QVT, 2015, MET FAC MOF 2 0 QUER
   Schoenboeck Johannes, 2009, Models in Software Engineering. Workshops and Symposia at MODELS 2009. Reports and Revised Selected Papers, P5
   Schonbock J, 2012, THESIS
   Seifert M., 2008, Fujaba Days, P19
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   Steel J, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P151, DOI 10.1109/ISSRE.2004.23
   Stevens P, 2010, SOFTW SYST MODEL, V9, P7, DOI 10.1007/s10270-008-0109-9
   Syriani E., 2011, J SOFTWARE SYSTEMS M, V12, P387, DOI DOI 10.1007/s10270-011-0205-0
   Syriani E., 2013, JOINT P MODELS INV T
   Syriani E, 2015, SOFTW SYST MODEL, V14, P1215, DOI 10.1007/s10270-013-0370-4
   Szärnyas G, 2014, LECT NOTES COMPUT SC, V8767, P653, DOI 10.1007/978-3-319-11653-2_40
   Taentzer G, 2003, LECT NOTES COMPUT SC, V3062, P446
   Ujhelyi Zoltan, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P1, DOI 10.1109/ICST.2012.80
   Van Mierlo S., 2014, P DOCT S COL 17 INT
   Varró D, 2007, SCI COMPUT PROGRAM, V68, P214, DOI 10.1016/j.scico.2007.05.004
   ZELKOWITZ MV, 1973, COMMUN ACM, V16, P566, DOI 10.1145/362342.362360
NR 44
TC 5
Z9 5
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 7
EP 48
DI 10.1007/s11219-015-9304-4
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400002
DA 2024-07-18
ER

PT J
AU Hoffmann, M
   Ulbrich, P
   Dietrich, C
   Schirmeier, H
   Lohmann, D
   Schröder-Preikschat, W
AF Hoffmann, Martin
   Ulbrich, Peter
   Dietrich, Christian
   Schirmeier, Horst
   Lohmann, Daniel
   Schroeder-Preikschat, Wolfgang
TI Experiences with software-based soft-error mitigation using AN codes
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Fault injection; Arithmetic code; Dependability
ID FAULT
AB Arithmetic error coding schemes are a well-known and effective technique for soft-error mitigation. Although the underlying coding theory is generally a complex area of mathematics, its practical implementation is comparatively simple in general. However, compliance with the theory can be lost easily while moving toward an actual implementation, which finally jeopardizes the aspired fault-tolerance characteristics and effectiveness. In this paper, we present our experiences and lessons learned from implementing arithmetic error coding schemes (AN codes) in the context of our Combined Redundancy fault-tolerance approach. We focus on the challenges and pitfalls in the transition from maths to machine code for a binary computer from a systems perspective. Our results show that practical misconceptions (such as the use of prime numbers) and architecture-dependent implementation glitches occur at every stage of this transition. We identify typical pitfalls and describe practical measures to find and resolve them. This allowed us to eliminate all remaining silent data corruptions in the Combined Redundancy framework, which we validated by an extensive fault-injection campaign covering the entire fault space of 1-bit and 2-bit errors.
C1 [Hoffmann, Martin; Ulbrich, Peter; Dietrich, Christian; Lohmann, Daniel; Schroeder-Preikschat, Wolfgang] Univ Erlangen Nurnberg, Chair Distributed Syst & Operating Syst, D-91058 Erlangen, Germany.
   [Schirmeier, Horst] Tech Univ Dortmund, Dept Comp Sci 12, D-44221 Dortmund, Germany.
C3 University of Erlangen Nuremberg; Dortmund University of Technology
RP Hoffmann, M (corresponding author), Univ Erlangen Nurnberg, Chair Distributed Syst & Operating Syst, D-91058 Erlangen, Germany.
EM hoffmann@cs.fau.de
RI Dietrich, Christian/U-8964-2019; Ulbrich, Peter/D-7996-2016
OI Dietrich, Christian/0000-0001-9258-0513; Ulbrich,
   Peter/0000-0002-4224-9205; Lohmann, Daniel/0000-0001-8224-4161
FU Bavarian Ministry of State for Economics, Traffic, and Technology under
   the (EU EFRE funds) [0704/883 25]; German Research Foundation (DFG) [SPP
   1500, LO 1719/1-2, SP 968/5-2]
FX This work was partly supported by the Bavarian Ministry of State for
   Economics, Traffic, and Technology under the (EU EFRE funds) Grant No.
   0704/883 25 and the German Research Foundation (DFG) priority program
   SPP 1500 under grant no. LO 1719/1-2 and SP 968/5-2. Implementation and
   further experimental results: http://www4.cs.fau.de/Research/CoRed.
CR Aidemark J, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P210, DOI 10.1109/DSN.2002.1028902
   [Anonymous], 2005, ACM Trans. Archit. Code Optim
   [Anonymous], ATZELEKTRONIK WORLDW
   [Anonymous], LNCS
   [Anonymous], 2011, THESIS TU DRESDEN
   [Anonymous], SURVEY RESIDUE CODIN
   [Anonymous], S CONTR COMP COMM TR
   [Anonymous], P 8 WORKSH INT SOL E
   [Anonymous], 36 INT C DEP SYST NE
   [Anonymous], LECT NOTES INFORM
   AVIZIENIS A, 1971, IEEE T COMPUT, VC 20, P1312, DOI 10.1109/T-C.1971.223133
   Binkert Nathan, 2011, Computer Architecture News, V39, P1, DOI 10.1145/2024716.2024718
   Borkar S, 2005, IEEE MICRO, V25, P10, DOI 10.1109/MM.2005.110
   Cho Hyungmin., 2013, Design Automation Conference (DAC), 2013 50th ACM/EDAC/IEEE, P1, DOI DOI 10.1145/2463209.2488859
   Dodd PE, 2003, IEEE T NUCL SCI, V50, P583, DOI 10.1109/TNS.2003.813129
   FROHWERK RA, 1977, HEWLETT-PACKARD J, V28, P2
   Goloubeva O., 2006, SOFTWARE IMPLEMENTED
   HAMMING RW, 1950, BELL SYST TECH J, V29, P147, DOI 10.1002/j.1538-7305.1950.tb00463.x
   Hoffmann M, 2013, 2013 IEEE 19TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING (PRDC 2013), P120, DOI 10.1109/PRDC.2013.22
   Hoffmann M, 2014, IEEE HI ASS SYS ENGR, P33, DOI 10.1109/HASE.2014.14
   KANAWATI GA, 1995, IEEE T COMPUT, V44, P248, DOI 10.1109/12.364536
   Lawton KevinP., 1996, Linux Journal, V29es, P7
   Li X., 2007, 2007 USENIX ATC, P1
   Maiz J., 2003, INT EL DEV M IEDM 03, P2141, DOI [10.1109/IEDM.2003.1269335, DOI 10.1109/IEDM.2003.1269335]
   MANDELBAUM D, 1967, IEEE T INFORM THEORY, V13, P237, DOI 10.1109/TIT.1967.1054015
   Medwed M, 2009, LECT NOTES COMPUT SC, V5932, P51, DOI 10.1007/978-3-642-10838-9_5
   Oh N, 2002, IEEE T COMPUT, V51, P180, DOI 10.1109/12.980007
   Peterson W. W., 1972, ERROR CORRECTING COD
   Rao T.R. N., 1974, Error Coding for Arithmetic Processor
   Schiffel U, 2010, LECT NOTES COMPUT SC, V6351, P169, DOI 10.1007/978-3-642-15651-9_13
   Shye A, 2007, I C DEPEND SYS NETWO, P297, DOI 10.1109/DSN.2007.98
   Ulbrich P., 2011, Proceedings of the 26th ACM Symposium on Applied Computing (SAC'11). (TaiChung, P380
   Ulbrich P, 2012, 2012 NINTH EUROPEAN DEPENDABLE COMPUTING CONFERENCE (EDCC 2012), P49, DOI 10.1109/EDCC.2012.21
   Wappler U, 2007, LECT NOTES COMPUT SC, V4680, P356
NR 34
TC 0
Z9 1
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2016
VL 24
IS 1
SI SI
BP 87
EP 113
DI 10.1007/s11219-014-9260-4
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1VQ
UT WOS:000369006200006
DA 2024-07-18
ER

PT J
AU Pham, R
   Holzmann, H
   Schneider, K
   Brüggemann, C
AF Pham, Raphael
   Holzmann, Helge
   Schneider, Kurt
   Brueggemann, Christian
TI Tailoring video recording to support efficient GUI testing and debugging
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automated test; Graphical user interface; Video; Code tracing;
   Aspect-oriented programming
ID MULTIMEDIA APPLICATIONS; COMPRESSION; STANDARD; MPEG
AB Automated GUI tests typically comprise of several test steps that are executed on the GUI before reaching a point of assertion. Comparing a longer and complex execution of a GUI test to its test instructions for debugging is a laborious task: re-establish the test environment, slow down test execution for human perception, and locate the currently executed test step. Video documentation of GUI tests for debugging purposes is already present in several industry tools. However, it is not optimized for effective documentation of on-screen actions nor synched with the executed test instructions. We present a video-based documentation of automated GUI tests that links the executed test case instruction to the on-screen response of the application under test. Screen recording is optimized for speed and memory consumption while all relevant details are captured. Additional browsing capabilities for easier debugging are introduced. Concepts of aspect-oriented programming are adapted for tracing of pre-compiled test case scripts. Our concepts are evaluated by a working implementation, a series of performance measurements during a technical experiment, and industrial experience from 370 real-world test cases carried out in a large software company. The limits of our implementation regarding video capturing and code tracing are explored with a specialized test frame.
C1 [Pham, Raphael; Holzmann, Helge; Schneider, Kurt] Leibniz Univ Hannover, Software Engn Grp, D-30167 Hannover, Germany.
   [Brueggemann, Christian] Capgemini Deutschland GmbH, Applicat Lifecycle Serv Ctr, Hannover, Germany.
C3 Leibniz University Hannover; Capgemini
RP Pham, R (corresponding author), Leibniz Univ Hannover, Software Engn Grp, D-30167 Hannover, Germany.
EM Raphael.Pham@inf.uni-hannover.de; helge.holzmann@se.uni-hannover.de;
   kurt.schneider@inf.uni-hannover.de; christian.brueggemann@capgemini.com
OI Holzmann, Helge/0000-0003-4811-6902; Schneider, Kurt/0000-0002-7456-8323
CR Beck Kent L., 2003, Test Driven Development By Example
   Bodkin R., 2003, PRACTITIONER REPORTS
   Bollert K, 1999, P ECOOP 99 WORKSH AS
   Holzmann H, 2011, THESIS LEIBNIZ U HAN
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Laddad R, 2003, IEEE SOFTWARE, V20, P90, DOI 10.1109/MS.2003.1241372
   LEGALL D, 1991, COMMUN ACM, V34, P46, DOI 10.1145/103085.103090
   Memon AM, 2002, COMPUTER, V35, P87, DOI 10.1109/MC.2002.1023795
   Myers Glenford J., 2011, The Art of Software Testing
   Patel K., 1993, Proceedings ACM Multimedia 93, P75, DOI 10.1145/166266.166274
   Schneider K, 2007, ABENTEURE SOFTWAREQU
   Sikora T, 1997, IEEE SIGNAL PROC MAG, V14, P82, DOI 10.1109/79.618010
   Wiegand T, 2003, IEEE T CIRC SYST VID, V13, P560, DOI 10.1109/TCSVT.2003.815165
   Zimmermann T, 2010, IEEE T SOFTWARE ENG, V36, P618, DOI 10.1109/TSE.2010.63
NR 14
TC 4
Z9 4
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2014
VL 22
IS 2
SI SI
BP 273
EP 292
DI 10.1007/s11219-013-9206-2
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AF7TM
UT WOS:000334917700007
DA 2024-07-18
ER

PT J
AU Monperrus, M
   Baudry, B
   Champeau, J
   Hoeltzener, B
   Jézéquel, JM
AF Monperrus, M.
   Baudry, B.
   Champeau, J.
   Hoeltzener, B.
   Jezequel, J. M.
TI Automated measurement of models of requirements
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
ID VALIDATION
AB On way to formalize system requirements is to express them using the object-oriented paradigm. In this case, the class model representing the structure of requirements is called a requirements metamodel, and requirements themselves are object-based models of natural language requirements. In this paper, we show that such object-oriented requirements are well suited to support a large class of requirements metrics. We define a requirements metamodel and use an automated measurement approach proposed in our previous work to specify requirements metrics. We show that it is possible to integrate 78 metrics from 11 different papers in the proposed framework. The software that computes the requirements metric values is fully generated from the specification of metrics.
C1 [Monperrus, M.] Tech Univ Darmstadt, Software Technol Grp, Darmstadt, Germany.
   [Baudry, B.; Jezequel, J. M.] INRIA, Rennes, France.
   [Champeau, J.] ENSIETA, DTN Lab, Brest, France.
   [Hoeltzener, B.] ENSIETA, Res Lab E3I2 EA 3678, Brest, France.
   [Jezequel, J. M.] Univ Rennes, INRIA Res Team Triskell, Rennes, France.
C3 Technical University of Darmstadt; Inria; ENSTA Bretagne; ENSTA
   Bretagne; Universite de Rennes
RP Monperrus, M (corresponding author), Tech Univ Darmstadt, Software Technol Grp, Darmstadt, Germany.
EM martin.monperrus@gmail.com
RI Jezequel, Jean-Marc/AAF-3854-2019; Monperrus, Martin/I-3640-2012;
   monperrus, mathilde/B-7946-2009
OI Jezequel, Jean-Marc/0000-0002-0582-9745; Monperrus,
   Martin/0000-0003-3505-3383; monperrus, mathilde/0000-0002-6337-1672
CR [Anonymous], 2002, P SYST ENG TEST EV C
   [Anonymous], SOFTWARE MEASURES CA
   [Anonymous], 1998, 830 IEEE
   [Anonymous], 2010, P 14 INT C EV ASS SO
   Basili V.R., 1994, Encyclopedia of Software Engineering, P528532
   Berenbach B., 2006, 28th International Conference on Software Engineering Proceedings, P445, DOI 10.1145/1134285.1134348
   Brottier E, 2007, IEEE INT ENTERP DIST, P390, DOI 10.1109/EDOC.2007.44
   Brottier E, 2010, LECT NOTES COMPUT SC, V6144, P1, DOI 10.1007/978-3-642-14046-4_1
   Budinsky F., 2004, Eclipse modeling framework: a developer's guide
   Chen X., 2010, SERIALS REV
   COSTELLO RJ, 1995, J SYST SOFTWARE, V29, P39, DOI 10.1016/0164-1212(94)00127-9
   DAVIS A, 1993, P 1 INT SOFTW METR S
   Dhaussy P, 2009, LECT NOTES COMPUT SC, V5795, P438, DOI 10.1007/978-3-642-04425-0_34
   DOUGLASS B, 2004, COMPUTING MODEL COMP
   Dromey RG, 1996, IEEE SOFTWARE, V13, P33, DOI 10.1109/52.476284
   Gervasi V, 2002, SOFTWARE PRACT EXPER, V32, P113, DOI 10.1002/spc.430
   Goknil A, 2008, LECT NOTES COMPUT SC, V5095, P310, DOI 10.1007/978-3-540-69100-6_21
   Hammer T., 1997, P 3 IEEE INT S REQ E, P1411
   Henderson-Sellers B, 2002, LECT NOTES COMPUT SC, V2425, P409
   ISO/IEC, 2007, 25000 ISOIEC
   Kolde C., 2004, BASIC METRICS REQUIR
   Loconsole A., 2001, P 12 EUR SOFTW CONTR
   Lutowski R., 2005, Software Requirements: Encapsulation, Quality, And Reuse
   Marchesi M, 1998, SECOND EUROMICRO CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P67, DOI 10.1109/CSMR.1998.665739
   Modelware Project, 2006, D2 2 MDD ENG METR DE
   Monperrus M., 2010, SOFTWARE SYSTEMS MOD
   Monperrus M., 2009, SYSTEMS ENG J, V13
   Monperrus M., 2008, P ACM IEEE 11 INT C
   Mora MM, 2003, REQUIREMENTS METRICS
   Nebut C, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P85, DOI 10.1109/ISSRE.2003.1251033
   Neuhaus E., 2006, LIB ACAD, V6
   OMG, 2010, 12 OMG
   *OMG, 2004, UML 2 0 SUP
   Paulk M.C., 1993, KEY PRACTICES CAPABI
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Singh Y., 2004, International Journal on Information and Management Sciences, V15, P69
   Vicente-Chicote C, 2007, J OBJECT TECHNOL, V6, P437, DOI 10.5381/jot.2007.6.9.a22
   Young R. R., 2006, MANAGEMENT CONCEPTS
   Zave P, 1997, ACM COMPUT SURV, V29, P315, DOI 10.1145/267580.267581
NR 39
TC 3
Z9 3
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2013
VL 21
IS 1
BP 3
EP 22
DI 10.1007/s11219-011-9163-6
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074MB
UT WOS:000313815500001
DA 2024-07-18
ER

PT J
AU Saiedian, H
   Kannenberg, A
   Morozov, S
AF Saiedian, Hossein
   Kannenberg, Andrew
   Morozov, Serhiy
TI A streamlined, cost-effective database approach to manage requirements
   traceability
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Requirements traceability; Software requirements management; Requirement
   engineering; Software requirements; Traceability tools
AB Requirements traceability offers many benefits to software projects, and it has been identified as critical for successful development. However, numerous challenges exist in the implementation of traceability in the software engineering industry. Some of these challenges can be overcome through organizational policy and procedure changes, but the lack of cost-effective traceability models and tools remains an open problem. A novel, cost-effective solution for the traceability tool problem is proposed, prototyped, and tested in a case study using an actual software project. Metrics from the case study are presented to demonstrate the viability of the proposed solution for the traceability tool problem. The results show that the proposed method offers significant advantages over implementing traceability manually or using existing commercial traceability approaches.
C1 [Saiedian, Hossein] Univ Kansas, Lawrence, KS 66049 USA.
   [Kannenberg, Andrew] Innovat Syst, Mitchell, SD 57301 USA.
   [Morozov, Serhiy] Univ Detroit Mercy, Dept Comp Sci & Software Engn, Detroit, MI 48221 USA.
C3 University of Kansas; University of Detroit Mercy
RP Saiedian, H (corresponding author), Univ Kansas, Lawrence, KS 66049 USA.
EM saiedian@eecs.ku.edu
RI Saiedian, Hossein/C-5608-2014; Saiedian, Hossein/ACP-6828-2022
OI Saiedian, Hossein/0000-0001-5060-6332
CR Brown A., 2004, QUEUE, V2, P34, DOI DOI 10.1145/1036474.1036497
   Cleland-Huang J, 2003, IEEE T SOFTWARE ENG, V29, P796, DOI 10.1109/TSE.2003.1232285
   Cleland-Huang J, 2006, P INT COMP SOFTW APP, P41, DOI 10.1109/COMPSAC.2006.57
   Egyed A, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P163, DOI 10.1109/ASE.2002.1115010
   Gills M., 2005, SOFTWARE TESTING TRA
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Hayes J., 2005, P 3 INT WORKSHOP TRA, P20
   International Council on Systems Engineering, 2008, INCOSE REQ MAN TOOLS
   Jarke M, 1998, COMMUN ACM, V41, P32, DOI 10.1145/290133.290145
   Lempia D., 2006, 2006 NAT SOFTW COMPL
   Lungu N., 2004, CS041400 U CAP TOWN
   Munson E., 2005, P 3 INT WORKSHOP TRA, P62
   Naslavsky L., 2005, P 3 INT WORKSHOP TRA, P25, DOI DOI 10.1145/1107656.1107663
   Ramesh B, 2001, IEEE T SOFTWARE ENG, V27, P58, DOI 10.1109/32.895989
   Ramesh B, 1998, COMMUN ACM, V41, P37, DOI 10.1145/290133.290147
   Soto M, 2005, ECMDA TRAC WORKSH EC, P57
   Spanoudakis G, 2004, J SYST SOFTWARE, V72, P105, DOI 10.1016/S0164-1212(03)00242-5
   Telelogic, 2008, TEL DOORS REQ MAN AD
   Young R., 2006, CROSSTALK J DEFENSE, V19, P4
NR 19
TC 2
Z9 3
U1 0
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2013
VL 21
IS 1
BP 23
EP 38
DI 10.1007/s11219-011-9166-3
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074MB
UT WOS:000313815500002
DA 2024-07-18
ER

PT J
AU Trienekens, JJM
   Kusters, RJ
   Brussel, DC
AF Trienekens, Jos J. M.
   Kusters, Rob J.
   Brussel, Dennis C.
TI Quality specification and metrication, results from a case-study in a
   mission-critical software domain
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Specification; ISO 9126; AHP; Prioritization;
   Metrication
ID MODEL; PRIORITIZATION; REQUIREMENTS
AB Software quality is of increasing importance in mission-critical embedded software systems. Due to the fast growing complexity and accompanying risks of failures of these systems, software quality needs to be addressed explicitly by software developers, preferably with a systematic method for an optimal implementation of software qualities, such as reliability, time-behavior and usability. At the Centre of Automation of Mission-critical Systems (CAMS) of the Dutch Royal Navy, a new approach has been defined for software developers to improve the way that they deal with software quality in the process of mission-critical systems engineering. The stepwise approach is based on both an international quality standard for software product quality, i.e. ISO9126, and on Multi-Criteria Decision Making techniques, i.e. analytical hierarchy process (AHP). The stepwise approach has been validated in a case study. In particular, the tailoring of the ISO9126 standard toward the specific CAMS development situation, and the applicability of AHP techniques, from the perspective of software developers, has been investigated. The case study is carried out in a representative software development project, i.e. the software for combat management systems (CMS) of warships. Results of the case study show that software developers can explicitly deal with quality on the basis of both the ISO9126 standard and the AHP techniques, respectively regarding the specification, prioritization and metrication of software product quality.
C1 [Trienekens, Jos J. M.; Kusters, Rob J.] Eindhoven Univ Technol, NL-5600 MB Den Dolech 2, Netherlands.
   [Brussel, Dennis C.] Ctr Automat Mission Crit Syst, Den Helder, Netherlands.
C3 Eindhoven University of Technology
RP Trienekens, JJM (corresponding author), Eindhoven Univ Technol, NL-5600 MB Den Dolech 2, Netherlands.
EM j.j.m.trienekens@tue.nl; r.j.kusters@tue.nl
RI Kusters, Rob/B-3093-2010
OI Kusters, Rob/0000-0003-4069-5655
CR [Anonymous], 2002, DELPHI METHOD TECHNI
   [Anonymous], 2001, StandardISO/IEC9126
   Behkamal B, 2009, INFORM SOFTWARE TECH, V51, P599, DOI 10.1016/j.infsof.2008.08.001
   Boehm B.W., 1978, Characteristics of Software Quality
   Botella P, 2003, LECT NOTES COMPUT SC, V2693, P225
   BOTELLA P, 2004, P MPEC 04 ICSE 04
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   FRANCH X, 2002, P IEEE JOINT INT C
   HALL T, 1994, SOFTWARE QUAL J, V3, P195, DOI 10.1007/BF00403557
   Karlsson J, 1998, INFORM SOFTWARE TECH, V39, P939, DOI 10.1016/S0950-5849(97)00053-0
   KARLSSON L, 2004, P 8 C EMP ASS SOFTW
   Karydas DM, 2006, RELIAB ENG SYST SAFE, V91, P84, DOI 10.1016/j.ress.2004.11.016
   Kitchenham B, 1997, SOFTWARE QUAL J, V6, P211, DOI 10.1023/A:1018516103435
   Maiden NAM, 1996, SOFTWARE ENG J, V11, P183, DOI 10.1049/sej.1996.0024
   Mansar SL, 2009, EXPERT SYST APPL, V36, P3248, DOI 10.1016/j.eswa.2008.01.008
   Musa J., 1993, IEEE Software
   Roy B.M., 1996, MULTICRITERIA METHOD
   Royce W., 1970, P IEEE WESCON
   Saaty TL., 2001, INT SERIES OPERATION
   SVAHNBERG M, 2002, P 14 INT C SOFTW ENG
   TRIENEKENS JJM, 1999, QUALITY RELIABILITY
   Weil R, 2001, RELIAB ENG SYST SAFE, V74, P23, DOI 10.1016/S0951-8320(01)00064-3
   Wohlin C, 2005, SOFTWARE QUAL J, V13, P327, DOI 10.1007/s11219-005-4249-7
   Zhu LM, 2005, SOFTWARE QUAL J, V13, P357, DOI 10.1007/s11219-005-4251-0
   Zuse Horst., 1998, A framework of software measurement
NR 25
TC 7
Z9 8
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2010
VL 18
IS 4
BP 469
EP 490
DI 10.1007/s11219-010-9101-z
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 642XH
UT WOS:000281254700003
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Kim, DK
   Shen, WW
AF Kim, Dae-Kyoo
   Shen, Wuwei
TI Evaluating pattern conformance of UML models: a divide-and-conquer
   approach and case studies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 22nd ACM Symposium on Applied Computing
CY MAR 11-15, 2007
CL Seoul, SOUTH KOREA
SP ACM
DE design pattern; pattern conformance; RBML; UML
ID DESIGN PATTERNS
AB A design pattern is realized in various forms depending on the context of the applications. There has been intensive research on detecting pattern instances in models and in implementations. However, little work addresses variations of pattern realization. This paper describes an approach for evaluating conformance of pattern variations. This approach uses a divide-and-conquer strategy to evaluate the structural conformance of a UML class diagram to the solution of a design pattern. A design pattern is specified in an extension of the UML that defines the pattern in terms of roles. To demonstrate the approach, we use the Visitor pattern and two case studies of a price calculator and a word processor. We also present a prototype tool that supports the approach.
C1 [Kim, Dae-Kyoo] Oakland Univ, Dept Comp Sci & Engn, Rochester, MI 48309 USA.
   [Shen, Wuwei] Western Michigan Univ, Dept Comp Sci, Kalamazoo, MI 49008 USA.
C3 Oakland University; Western Michigan University
RP Kim, DK (corresponding author), Oakland Univ, Dept Comp Sci & Engn, Rochester, MI 48309 USA.
EM kim2@oakland.edu; wwshen@cs.wmich.edu
RI Kim, Daekyoo/HGE-1133-2022
OI Kim, Daekyoo/0000-0002-6123-2900
CR ALBANO A, 1993, P 19 INT C VER LARG, P39
   [Anonymous], P 40 ANN HAW INT C S
   Antoniol G, 1998, PROG COMPREHEN, P153, DOI 10.1109/WPC.1998.693342
   Aoyama M, 2000, INTERNATIONAL SYMPOSIUM ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P110, DOI 10.1109/ISPSE.2000.913228
   Aversano Lerina., 2007, PROC THE 6 EUROPEAN, P385, DOI [DOI 10.1145/1287624.1287680, 10.1145/1287624.1287680.]
   BACHMAN CW, 1977, INT C VERY LARGE DAT, P464
   Bergerot A, 2000, EUR J NEUROSCI, V12, P336
   Costagliola G, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P102, DOI 10.1109/CSMR.2005.23
   DAHCHOUR M, 2002, P 14 ADV INF SYST EN, P643
   Dong J, 2007, IEEE T SOFTWARE ENG, V33, P433, DOI 10.1109/TSE.2007.1012
   Eden A, 1999, THESIS U TEL AVIV IS
   France R, 2003, IEEE SOFTWARE, V20, P52, DOI 10.1109/MS.2003.1231152
   France RB, 2004, IEEE T SOFTWARE ENG, V30, P193, DOI 10.1109/TSE.2004.1271174
   Frank U., 2000, JOOP, V13, P13
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gottlob G, 1996, ACM T INFORM SYST, V14, P268, DOI 10.1145/230538.230540
   Grand M., 2002, PATTERNS JAVA, V1
   Halpin T., 1996, DATABASE PROGRAMMING, V9, P66
   Heuzeroth D, 2003, PROG COMPREHEN, P94
   Keller R. K., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P226, DOI 10.1109/ICSE.1999.841012
   KIM D, 2006, P PATT LANG PROGR C
   KIM D, 2007, DESIGN PATTERN FORMA
   Kim DK, 2007, J VISUAL LANG COMPUT, V18, P560, DOI 10.1016/j.jvlc.2007.02.009
   Kim DK, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P452, DOI 10.1109/CMPSAC.2003.1245379
   Kramer C, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P208, DOI 10.1109/WCRE.1996.558905
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LANO K, 1996, P 1 BCSFACS NO FORM
   Lauder A., 1998, Precise Visual Speci cation of Design Patterns, P114
   Le Guennec A, 2000, LECT NOTES COMPUT SC, V1939, P482
   MAI Y, 2001, P 8 ANN C PATT LANG
   Mikkonen T, 1998, PROC INT CONF SOFTW, P115, DOI 10.1109/ICSE.1998.671108
   Pernici, 1991, P C OFF INF SYST CAM, P25
   Philippow I., 2003, MODELLING VARIABILIT, P42
   Reenskaug Trygve., 1996, WORKING OBJECTS OORA
   Riehle D., 2003, Cutter IT Journal, V16, P22
   RIEHLE D, 2000, THESIS EIDGENOSSISCH
   *RM ODP, 2001, 15414 RMODP ISOIEC
   SCIORE E, 1989, ACM T INFORM SYST, V7, P103, DOI 10.1145/65935.65936
   SHEN W, 2005, P IASTED INT C SOFTW, P100
   SHULL F, 1996, UMIACSTR610
   Steimann F, 2000, DATA KNOWL ENG, V35, P83, DOI 10.1016/S0169-023X(00)00023-9
   Steimann F, 2001, JOOP, V14, P23
   STEIN LA, 1989, CS8942 BROWN U DEP C
   TOKUDA L, 1995, CSTR9506 U TEX
   Tsantalis N, 2006, IEEE T SOFTWARE ENG, V32, P896, DOI 10.1109/TSE.2006.112
   Vokác M, 2006, J OBJECT TECHNOL, V5, P139, DOI 10.5381/jot.2006.5.1.a6
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
   WENDEHALS L, 2003, P ICSE WORKSH DYN AN, P29
   WIERINGA R, 1991, 1R267 VRIJ U
   Zdun U., 2005, Proceedings of the 20th annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications, P133
   [No title captured]
   [No title captured]
   [No title captured]
NR 53
TC 29
Z9 32
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2008
VL 16
IS 3
BP 329
EP 359
DI 10.1007/s11219-008-9048-5
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330RE
UT WOS:000257959700004
DA 2024-07-18
ER

PT J
AU Wong, B
AF Wong, B
TI Understanding stakeholder values as a means of dealing with stakeholder
   conflicts
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE measurement; human factors; software evaluation; values; conflict
ID CHAIN
AB This paper reports on a quantitative study, which examines the link between software characteristics, sought after consequences and personal values in software evaluation, whilst investigating the stakeholders' understanding of software quality. The study involved a survey of 403 subjects, which were then analyzed quantitatively with bi-variate analysis, and multivariate analysis of variance. The research argues that trade-offs in software development projects are often experienced in software development because of conflicts. These conflicts involve schedules, priorities and are very much caused by the different stakeholder views of quality, different desired consequences sought by the different stakeholders and more importantly influenced by the desired values of the different stakeholders. The research finds that different classes of stakeholders have different views of software quality. The research also finds that certain values sought by the stakeholder influences their sought after consequences required in the developed software product. However, it is not just any values that affect the stakeholder, but rather, it is the values affected by the evaluated software, which influences the selection of characteristics and sought after consequences. Values, which are important, but are not affected by software use, do not influence the stakeholder. As such, these results help us gain a better understanding of what types of values influence the choice of characteristics in software evaluation, and the desired consequences in a software product, and why conflicts exist during software development life-cycle. The results provide a number of important insights and suggest several conclusions. The study showed (1) that stakeholders differ in their priorities in the sought after consequences of the software being developed; (2) that the desired values, which are perceived to be affected by the software differ between stakeholders and influence the choice of characteristic and consequence; (3) that the consequence, value relationship as described in the Software Evaluation Framework can be valuable to understand the conflicts and trade-offs fond in software development.
C1 Univ Technol Sydney, Fac Informat Technol, Broadway, NSW 2007, Australia.
C3 University of Technology Sydney
RP Univ Technol Sydney, Fac Informat Technol, POB 123, Broadway, NSW 2007, Australia.
EM bernard@it.uts.edu.au
CR ALRECK PL, 1996, SURVEY RES HDB
   ANDERSON T, 1968, BASIC COURSE STAT
   [Anonymous], 2001, PRACTICAL ASSESSMENT, DOI DOI 10.7275/404H-Z428
   [Anonymous], 1982, ASKING QUESTIONS
   [Anonymous], ANZMAC99 C MARK 3 MI
   [Anonymous], 1951, The art of asking questions
   Bagozzi RP, 2000, PSYCHOL MARKET, V17, P535, DOI 10.1002/(SICI)1520-6793(200007)17:7<535::AID-MAR1>3.0.CO;2-H
   Bagozzi RP, 1997, PSYCHOL MARKET, V14, P539, DOI 10.1002/(SICI)1520-6793(199709)14:6<539::AID-MAR1>3.0.CO;2-8
   Beatty S., 1985, PSYCHOL MARKET, V2, P181, DOI DOI 10.1002/MAR.4220020305
   BINDER A, 1984, J CRIM JUST, V12, P467, DOI 10.1016/0047-2352(84)90094-1
   COHEN J, 2001, CONSUMER DECISION MA
   Comrey A.L., 1973, 1 COURSE FACTOR ANAL
   Couper M.P., 1999, Journal of Official Statistics, V15, P39
   Dillman D.A., 2007, MAIL INTERNET SURVEY
   DILLMAN DA, 2001, IN PRESS RESPONSE RA
   DILLMAN DA, 1998, P JOINT STAT M DALL
   GUTMAN J, 1982, J MARKETING, V46, P60, DOI 10.2307/3203341
   Gutman J, 1997, PSYCHOL MARKET, V14, P545, DOI 10.1002/(SICI)1520-6793(199709)14:6<545::AID-MAR2>3.0.CO;2-7
   Gutman Jonathan., 1979, Attitude Research Under the SGAS, P128
   Howard J.A., 1977, Consumer behavior: Application of theory
   Jaccard J., 1996, LISREL approaches to interaction effects in multiple regression, P98, DOI DOI 10.4135/9781412984782
   KAHLE LR, 1986, J CONSUM RES, V13, P405, DOI 10.1086/209079
   Kim J.O., 1978, Introduction to factor analysis: What it is and how to do it
   KIM JO, 1975, AM J SOCIOL, V81, P261, DOI 10.1086/226074
   Kittleson MJ, 1997, AM J HEALTH BEHAV, V21, P193
   LABOVITZ S, 1967, SOC FORCES, V46, P151, DOI 10.2307/2574595
   LABOVITZ S, 1970, AM SOCIOL REV, V35, P515, DOI 10.2307/2092993
   LANG M, 2002, P EUR C RES METH BUS, P187
   Maddala G.S., 1992, INTRO ECONOMETRICS, V2nd
   Mazursky D., 1985, FORMING IMPRESSIONS
   Oppenheim A.N., 1992, QUESTIONNAIRE DESIGN
   REYNOLDS TJ, 1985, IMAGE REPRESENTATION
   Roscoe J.T., 1975, FUNDAMENTAL RES STAT
   THAMHAIN HJ, 1975, SLOAN MANAGEMENT SPR, P31
   Valette-Florence P, 1998, J BUS RES, V42, P161, DOI 10.1016/S0148-2963(97)00111-2
   VINSON DE, 1977, J MARKETING, V41, P44, DOI 10.2307/1250633
   Wong B, 2004, INFORM SOFTWARE TECH, V46, P1037, DOI 10.1016/j.infsof.2004.07.005
   Wong B, 2002, LECT NOTES COMPUT SC, V2559, P103
   Wong B., 2001, Product Focused Software Process Improvement. Third International Conference, PROFES 2001. Proceedings (Lecture Notes in Computer Science Vol.2188), P6
   Wong B, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P56, DOI 10.1109/ISESE.2002.1166926
   WONG B, 2003, P 2003 INT S EMP SOF
   Wong B., 2004, Journal of the Australian Institute of Project Management, V24, P28
   WONG B, 1996, PILOT STUDY STAKEHOL
   WONG B, 1995, P 2 AUSTR C SOFTW ME, P54
   YANKELOVICH D, 1981, PSYCHOL TODAY, P60
   YOUNG S, 1975, J MARKETING, V39, P72, DOI 10.2307/1250907
   ZUMBO BD, 1993, CAN PSYCHOL, V34, P390, DOI 10.1037/h0078865
   1968, ROKEACH BELIEFS ATTI
NR 48
TC 8
Z9 11
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2005
VL 13
IS 4
BP 429
EP 445
DI 10.1007/s11219-005-4254-x
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 984BC
UT WOS:000233276500006
DA 2024-07-18
ER

PT J
AU Leitao, AM
AF Leitao, AM
TI Detection of redundant code using R<SUP>2</SUP>D<SUP>2</SUP>
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 3rd IEEE International Workshop on Source Code Analysis and Manipulation
CY SEP 26-27, 2003
CL AMSTERDAM, NETHERLANDS
SP IEEE Comp Soc, TC Software Engn, Netherlands Org Sci Res, Royal Netherlands Acad Arts & Sci
ID PLAGIARISM; PROGRAMS
AB We present the (RD2)-D-2 redundancy detector. (RD2)-D-2 identifies redundant code fragments in large software systems written in Lisp. For each pair of code fragments, (RD2)-D-2 uses a combination of techniques ranging from syntax-based analysis to semantics-based analysis, that detects positive and negative evidences regarding the redundancy of the analyzed code fragments. These evidences are combined according to a well-defined model and sufficiently redundant fragments are reported to the user. (RD2)-D-2 explores several techniques and heuristics to operate within reasonable time and space bounds and is designed to be extensible.
C1 Univ Tecn Lisboa, INESC ID, P-1000029 Lisbon, Portugal.
C3 Universidade de Lisboa; INESC-ID
RP Univ Tecn Lisboa, INESC ID, Rua Alves Redol N9, P-1000029 Lisbon, Portugal.
EM antonio.leitao@dei.ist.utl.pt
RI Leitão, António/AAA-4548-2022; Leitao, Antonio/A-7936-2012
OI Leitao, Antonio/0000-0001-7216-4934
CR [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], 1985, Structure and Interpretation of Computer Programs
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bowdidge R. W., 1998, ACM Transactions on Software Engineering and Methodology, V7, P109, DOI 10.1145/279310.279312
   Charniak E., 1985, INTRO ARTIFICIAL INT
   Ducasse S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P109, DOI 10.1109/ICSM.1999.792593
   FAIDHI JAW, 1987, COMPUT EDUC, V11, P11, DOI 10.1016/0360-1315(87)90042-X
   Gabriel RichardP., 1991, COMMUN ACM, V34, P29
   Gamma E., 1996, DESIGN PATTERNS ELEM, P395
   Griswold W. G, 1991, THESIS U WASHINGTON
   JOHNSON JH, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P120, DOI 10.1109/ICSM.1994.336783
   Kamiya T, 2001, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2001.919197
   Keene S.E., 1989, OBJECT ORIENTED PROG
   Komondoor R, 2001, LECT NOTES COMPUT SC, V2028, P383
   Krinke J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P301, DOI 10.1109/WCRE.2001.957835
   Lague B, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P314, DOI 10.1109/ICSM.1997.624264
   MAIZEL JV, 1981, P NATL ACAD SCI-BIOL, V78, P7665, DOI 10.1073/pnas.78.12.7665
   Mayrand J, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P244, DOI 10.1109/ICSM.1996.565012
   MOON DA, 1986, SIGPLAN NOTICES, V21, P1, DOI 10.1145/960112.28698
   NORVIG P, 1991, SOFTWARE PRACT EXPER, V21, P231, DOI 10.1002/spe.4380210208
   Ottenstein K. J., 1976, ACM SIGCSE Bulletin, V8, P30, DOI [DOI 10.1145/382222.382462, 10.1145/382222.382462]
   Pettorossi A, 1996, ACM COMPUT SURV, V28, P360, DOI 10.1145/234528.234529
   Shapiro L H, 1995, Curr Opin Hematol, V2, P3
   Verco KL, 1996, COMPUT J, V39, P741, DOI 10.1093/comjnl/39.9.741
   WATERS RC, 1994, ACM T PROGR LANG SYS, V16, P102, DOI 10.1145/174625.174628
   Winston P.H., 1988, Lisp
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 41
TC 23
Z9 25
U1 1
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2004
VL 12
IS 4
BP 361
EP 382
DI 10.1023/B:SQJO.0000039793.31052.72
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 850EE
UT WOS:000223593200006
DA 2024-07-18
ER

PT J
AU Franco, EF
   Hirama, K
   Armenia, S
   dos Santos, JR
AF Franco, Eduardo Ferreira
   Hirama, Kechi
   Armenia, Stefano
   dos Santos, Joaquim Rocha
TI A systems interpretation of the software evolution laws and their impact
   on technical debt management and software maintainability
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software maintainability; Software evolution; Technical debt; System
   thinking
ID PROJECT-MANAGEMENT; DYNAMICS; INFORMATION; MODEL; FEEDBACK; THINKING;
   COMPLEX
AB The average lifetime of software systems has been growing steadily over the last few decades, and thus, they are demanding increasing resources to remain in operation while still meeting business needs. As a software system ages, it needs to be continuously modified and expanded to stay useful. Whether intentional or not, the various maintenance activities performed during the software's lifetime inevitably introduce quality violations, contributing to building up the software's technical debt. If these violations are not adequately addressed, they can negatively impact the software's maintainability and, thus, the software's capacity to adapt and evolve. In general terms, usually, the aim is to sustain satisfactory levels of technical quality characteristics of the software and, at the same time, preserve the maintenance costs and the tangible software asset itself at acceptable levels to organizations. The long-term impact of various maintenance investment decisions inevitability influences the software's evolutionary path, which goes through numerous iterations throughout its lifetime. This work uses the systems thinking approach to map the main concepts related to the software maintenance processes that account for this tradeoff analysis and decisions and describe their causal relationships. Moreover, it presents a systemic causal-effect relationship map capable of evidencing how some of the emergent behavior arising from long-term operating and maintaining software systems could be endogenously explained.
C1 [Franco, Eduardo Ferreira; Hirama, Kechi] Univ Sao Paulo, Dept Comp Engn, Sao Paulo, Brazil.
   [Armenia, Stefano] Link Campus Univ, Dept Res, Rome, Italy.
   [dos Santos, Joaquim Rocha] Univ Sao Paulo, Dept Naval Engn, Sao Paulo, Brazil.
C3 Universidade de Sao Paulo; Universidade de Sao Paulo
RP Franco, EF (corresponding author), Univ Sao Paulo, Dept Comp Engn, Sao Paulo, Brazil.
EM eduardo.franco@alumni.usp.br; kechi.hirama@usp.br; s.armenia@unilink.it;
   jrsantos@usp.br
RI Armenia, Stefano/K-2167-2017; Hirama, Kechi/N-6545-2015
OI Armenia, Stefano/0000-0002-0777-4004; Hirama, Kechi/0000-0002-8930-1293;
   Franco, Eduardo/0000-0001-5713-0090
CR Abdel-Hamid T., 1991, SOFTWARE PROJECT DYN
   Abdel-Hamid T.K., 1984, DYNAMICS SOFTWARE DE
   Abdel-Hamid T. K., 1982, 6 INT COMP SOFTW APP
   Abdel-Hamid TK, 1989, SYST DYNAM REV, V5, P93, DOI 10.1002/sdr.4260050202
   Abdel-Hamid TK, 1999, MIS QUART, V23, P531, DOI 10.2307/249488
   ABDELHAMID TK, 1991, SIMULATION, V56, P233, DOI 10.1177/003754979105600407
   ABDELHAMID TK, 1990, IEEE SOFTWARE, V7, P97, DOI 10.1109/52.43055
   ABDELHAMID TK, 1986, IEEE SOFTWARE, V3, P70, DOI 10.1109/MS.1986.234072
   ABDELHAMID TK, 1989, IEEE T SOFTWARE ENG, V15, P109, DOI 10.1109/32.21738
   ABDELHAMID TK, 1988, MIS QUART, V12, P395, DOI 10.2307/249206
   ABDELHAMID TK, 1988, J SYST SOFTWARE, V8, P319, DOI 10.1016/0164-1212(88)90015-5
   Allman E, 2012, COMMUN ACM, V55, P50, DOI 10.1145/2160718.2160733
   Ampatzoglou A, 2015, INFORM SOFTWARE TECH, V64, P52, DOI 10.1016/j.infsof.2015.04.001
   [Anonymous], 2008, Applied software measurement: Global analysis of productivity and quality
   [Anonymous], 2008, Software Evolution, DOI [10.1007/978-3-540-76440-311, DOI 10.1007/978-3-540-76440-311]
   [Anonymous], 2007, CROSSTALK J DEFENSE
   [Anonymous], SOFTWARE EVOLUTION S
   Arnold RD, 2015, PROCEDIA COMPUT SCI, V44, P669, DOI 10.1016/j.procs.2015.03.050
   Avgeriou P, 2016, Dagstuhl reports, V6, DOI DOI 10.4230/DAGREP.6.4.110
   Bakota T, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P316, DOI 10.1109/ICSM.2012.6405288
   Belady L., 1971, RC3546 IBM
   BELADY LA, 1976, IBM SYST J, V15, P225, DOI 10.1147/sj.153.0225
   BELADY LA, 1972, STAT COMPUTER PERFOR, P503
   Bennett K. H., 2000, P C FUT SOFTW ENG, P73
   Besker T, 2018, J SYST SOFTWARE, V135, P1, DOI 10.1016/j.jss.2017.09.025
   Bin Ali N, 2014, J SYST SOFTWARE, V97, P65, DOI 10.1016/j.jss.2014.06.059
   Cao L., 2010, ACM Transactions on Management Information Systems TMIS, V1, P5, DOI DOI 10.1145/1877725.1877730.[35]C
   Chapin N, 2001, J SOFTW MAINT EVOL-R, V13, P3, DOI 10.1002/smr.220
   Chatters B. W., 2000, Software Process Improvement and Practice, V5, P91, DOI 10.1002/1099-1670(200006/09)5:2/3<91::AID-SPIP123>3.0.CO;2-L
   Cook S, 2006, J SOFTW MAINT EVOL-R, V18, P1, DOI 10.1002/smr.314
   Cunningham W., 1993, OOPS MESSENGER, V4, P29, DOI DOI 10.1145/157710.157715
   Downs JS, 2014, P NATL ACAD SCI USA, V111, P13627, DOI 10.1073/pnas.1317502111
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Fowler Martin, 2009, Technical debt quadrant, 2009
   Franco EF, 2018, INFORM SOFTWARE TECH, V93, P58, DOI 10.1016/j.infsof.2017.08.013
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Georgantzas NC, 2008, SYST DYNAM REV, V24, P247, DOI 10.1002/sdr.420
   Glass R.L., 2005, IEEE Software, V22, P110
   Glass RL, 2006, COMMUN ACM, V49, P15, DOI 10.1145/1145287.1145301
   Godfrey MW, 2014, J SOFTW-EVOL PROC, V26, P613, DOI 10.1002/smr.1636
   Godfrey MW, 2000, PROC IEEE INT CONF S, P131, DOI 10.1109/ICSM.2000.883030
   Herraiz I, 2013, ACM COMPUT SURV, V46, DOI 10.1145/2543581.2543595
   Highsmith J. A., 2004, Agile Project Management: Creating Innovative Products
   Hofman-Bergholm M, 2022, SUSTAINABILITY-BASEL, V14, DOI 10.3390/su14052946
   ISO and IEC, 2011, ISO/IEC 25010:2011, P34
   Johnson, 2020, CHAOS2020 INFINITY
   Kahen G, 2001, J SYST SOFTWARE, V59, P271, DOI 10.1016/S0164-1212(01)00068-1
   Keating E.K., 1999, EUR MANAG J, V17, P120, DOI DOI 10.1016/S0263-2373(98)00072-3
   Kellner MI, 1999, J SYST SOFTWARE, V46, P91, DOI 10.1016/S0164-1212(99)00003-5
   Kruchten P, 2012, IEEE SOFTWARE, V29, P18, DOI 10.1109/MS.2012.167
   Lehman M. M., 1996, Software Process Technology. 5th European Workshop, EWSPT '96 Proceedings, P108, DOI 10.1007/BFb0017737
   Lehman MM, 2002, J SOFTW MAINT EVOL-R, V14, P335, DOI 10.1002/smr.259
   Lehman MM, 2001, ANN SOFTW ENG, V11, P15, DOI 10.1023/A:1012535017876
   Lehman MM, 1998, PROC IEEE INT CONF S, P208, DOI 10.1109/ICSM.1998.738510
   Lehman MM, 1998, FIFTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 1998, PROCEEDINGS, P84, DOI 10.1109/METRIC.1998.731229
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Lehman MM, 1996, INFORM SOFTWARE TECH, V38, P681, DOI 10.1016/0950-5849(96)01121-4
   Li ZY, 2015, J SYST SOFTWARE, V101, P193, DOI 10.1016/j.jss.2014.12.027
   Lin CY, 1997, J SYST SOFTWARE, V38, P263, DOI 10.1016/S0164-1212(96)00156-2
   Lyneis JM, 2007, SYST DYNAM REV, V23, P157, DOI 10.1002/sdr.377
   McConnell S., 1996, Rapid Development: Taming Wild Software Schedules
   Meadows D., 2008, THINKING SYSTEMS PRI
   Melville N, 2004, MIS QUART, V28, P283
   Mens T, 2005, EIGHTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P13, DOI 10.1109/IWPSE.2005.7
   Neamtiu I, 2013, J SOFTW-EVOL PROC, V25, P193, DOI 10.1002/smr.564
   Oliva R, 2001, MANAGE SCI, V47, P894, DOI 10.1287/mnsc.47.7.894.9807
   OMG, 2018, AUT TECHN DEBT MEAS
   PARNAS DL, 1994, PROC INT CONF SOFTW, P279, DOI 10.1109/ICSE.1994.296790
   Plate R, 2010, SYST DYNAM REV, V26, P19, DOI 10.1002/sdr.432
   Rahmandad H, 2016, STRATEGIC MANAGE J, V37, P649, DOI 10.1002/smj.2354
   Rahmandad H, 2009, SYST DYNAM REV, V25, P224, DOI 10.1002/sdr.425
   Ramasubbu N, 2015, IEEE SOFTWARE, V32, P22, DOI 10.1109/MS.2015.45
   Ramasubbu N, 2014, IEEE T SOFTWARE ENG, V40, P758, DOI 10.1109/TSE.2014.2327027
   Repenning NP, 2001, CALIF MANAGE REV, V43, P64, DOI 10.2307/41166101
   RICHMOND B, 1994, SYST DYNAM REV, V10, P135, DOI 10.1002/sdr.4260100204
   Rios N, 2018, INFORM SOFTWARE TECH, V102, P117, DOI 10.1016/j.infsof.2018.05.010
   Sauer C., 1993, WHY INFORM SYSTEMS F
   Senge P., 1990, The fifth discipline: the art and practice of the learning organization
   SENGUPTA K, 1993, MANAGE SCI, V39, P411, DOI 10.1287/mnsc.39.4.411
   Sengupta K, 1999, IEEE T SYST MAN CY A, V29, P77, DOI 10.1109/3468.736362
   Sengupta K, 1996, IEEE T SYST MAN CY A, V26, P177, DOI 10.1109/3468.485744
   Sterman, 2002, ESD WP 2003 0113 ESD, P29
   Stroh D.P., 2015, SYSTEMS THINKING SOC
   Sundin A, 2018, ENVIRON EVID, V7, DOI 10.1186/s13750-018-0116-4
   Swanson J, 2002, J OPER RES SOC, V53, P472, DOI 10.1057/palgrave.jors.2601336
   Turski WM, 2002, IEEE T SOFTWARE ENG, V28, P814, DOI 10.1109/TSE.2002.1027802
   WAESELYNCK H, 1994, SOFTWARE-CONC TOOL, V15, P162
   Walden D. D., 2015, Systems engineering handbook: A guide for system life cycle processes and activities
   Wernick P., 2002, Software Process Improvement and Practice, V7, P113, DOI 10.1002/spip.159
   Wernick P, 1999, J SYST SOFTWARE, V46, P193, DOI 10.1016/S0164-1212(99)00012-6
   Woodside C. M., 1980, Journal of Systems and Software, V1, P337, DOI 10.1016/0164-1212(79)90035-9
   Yeo K. T., 2002, International Journal of Project Management, V20, P241, DOI 10.1016/S0263-7863(01)00075-8
   Zhang H, 2008, LECT NOTES COMPUT SC, V5007, P345, DOI 10.1007/978-3-540-79588-9_30
   Zhang H, 2010, LECT NOTES COMPUT SC, V6195, P309, DOI 10.1007/978-3-642-14347-2_27
NR 95
TC 1
Z9 1
U1 1
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2023
VL 31
IS 1
BP 179
EP 209
DI 10.1007/s11219-022-09600-6
EA SEP 2022
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9N8JZ
UT WOS:000850383000002
DA 2024-07-18
ER

PT J
AU Niu, JW
   Li, ZQ
   Chen, HW
   Dong, XW
   Jing, XY
AF Niu, Jingwen
   Li, Zhiqiang
   Chen, Haowen
   Dong, Xiwei
   Jing, Xiao-Yuan
TI Data sampling and kernel manifold discriminant alignment for
   mixed-project heterogeneous defect prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Heterogeneous defect prediction; Mixed project; Data sampling; Kernel
   manifold discriminant alignment; Software quality assurance
AB Heterogeneous defect prediction (HDP) refers to identifying more likely defect-proneness of software modules in a target project using heterogeneous metric data from other source projects, which solves the heterogeneous metric problem in cross-project defect prediction. Recently, several mixed-project HDP methods have been presented. However, these models neglect to address the linear inseparability and cross-project class imbalance issues simultaneously. These limitations usually lead to the unsatisfactory performance of HDP. In this paper, we propose an improved transfer learning approach for mixed-project HDP to deal with the above limitations, called data sampling and kernel manifold discriminant alignment (DSKMDA). DSKMDA firstly applies data sampling technique to handle the class imbalance issue. Then it uses kernel manifold discriminant alignment technique to handle the linear inseparability issue. Extensive experiments on 13 projects from three public benchmark datasets with four evaluation measures demonstrate that DSKMDA can produce better or comparable results against a range of competing methods.
C1 [Niu, Jingwen; Li, Zhiqiang] Shaanxi Normal Univ, Sch Comp Sci, Xian 710119, Peoples R China.
   [Niu, Jingwen] Xinxiang Univ, Sch Comp & Informat Engn, Xinxiang 453003, Henan, Peoples R China.
   [Chen, Haowen; Jing, Xiao-Yuan] Wuhan Univ, Sch Comp Sci, Wuhan 430072, Peoples R China.
   [Dong, Xiwei] Jiujiang Univ, Sch Comp & Big Data Sci, Jiujiang 332005, Peoples R China.
   [Jing, Xiao-Yuan] Guangdong Univ Petrochem Technol, Sch Comp Sci, Maoming 525000, Peoples R China.
   [Jing, Xiao-Yuan] Guangdong Univ Petrochem Technol, Guangdong Prov Key Lab Petrochem Equipment Fault, Maoming 525000, Peoples R China.
   [Jing, Xiao-Yuan] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210023, Peoples R China.
C3 Shaanxi Normal University; Xinxiang University; Wuhan University;
   Jiujiang University; Guangdong University of Petrochemical Technology;
   Guangdong University of Petrochemical Technology; Nanjing University
RP Li, ZQ (corresponding author), Shaanxi Normal Univ, Sch Comp Sci, Xian 710119, Peoples R China.
EM niujw66@163.com; lizq@snnu.edu.cn; hwc_zzu@126.com; dxwdxw2005@126.com;
   jingxy_2000@126.com
RI liang, shuang/JOK-5869-2023; zheng, hao/JQI-4215-2023; LEE,
   YU/JXY-2338-2024; He, Chen/JLM-5059-2023; Niu, Jingwen/JSL-7380-2023;
   YE, Chen/KFR-3858-2024
FU National Natural Science Foundation of China [61902228, 62041603,
   62176069]; Natural Science Basic Research Program of Shaanxi Province
   [2020JQ-422]; Natural Science Foundation of Guangdong Province
   [2019A1515011076]; Innovation Group of Guangdong Education Department
   [2020KCXTD014, 2018KCXTD019]; 2019 Key Discipline project of Guangdong
   Province; Natural Science Foundation of Jiangxi Province
   [20202BABL202036]; Fundamental Research Funds for the Central
   Universities [GK202103083, GK202105006]; State Key Laboratory for Novel
   Software Technology [KFKT2021B29]
FX The authors would like to thank the editors and anonymous reviewers for
   their constructive comments and suggestions. This work was partially
   supported by the National Natural Science Foundation of China under
   Grant Nos. 61902228, 62041603 and 62176069, the Natural Science Basic
   Research Program of Shaanxi Province under Grant No. 2020JQ-422, the
   Natural Science Foundation of Guangdong Province under Grant No.
   2019A1515011076, the Innovation Group of Guangdong Education Department
   under Grant Nos. 2020KCXTD014 and 2018KCXTD019, the 2019 Key Discipline
   project of Guangdong Province, the Natural Science Foundation of Jiangxi
   Province under Grant No. 20202BABL202036, the Fundamental Research Funds
   for the Central Universities under Grant Nos. GK202103083 and
   GK202105006, and the project of State Key Laboratory for Novel Software
   Technology under Grant No. KFKT2021B29.
CR Canfora G, 2015, SOFTW TEST VERIF REL, V25, P426, DOI 10.1002/stvr.1570
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chen HW, 2021, IEEE T SOFTWARE ENG, V47, P2803, DOI 10.1109/TSE.2020.2968520
   Chen L, 2015, INFORM SOFTWARE TECH, V62, P67, DOI 10.1016/j.infsof.2015.01.014
   Chen X, 2021, INFORM SOFTWARE TECH, V130, DOI 10.1016/j.infsof.2020.106441
   Cheng M., 2016, P 28 INT C SOFTW ENG, P171
   Cheung S.-C., 2011, P 19 ACM SIGSOFT S 1, P15
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Fu W, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P72, DOI 10.1145/3106237.3106257
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Golub GH, 1996, J HOPKINS STUDIES MA
   Gönen M, 2011, J MACH LEARN RES, V12, P2211
   Gong L., 2019, J SOFTW-EVOL PROC, V31, P1
   Gong LN, 2020, IEEE T RELIAB, V69, P40, DOI 10.1109/TR.2019.2895462
   Gong LN, 2019, IEICE T INF SYST, VE102D, P537, DOI 10.1587/transinf.2018EDP7289
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Herbold S, 2018, IEEE T SOFTWARE ENG, V44, P811, DOI 10.1109/TSE.2017.2724538
   Huang Q, 2017, PROC IEEE INT CONF S, P159, DOI 10.1109/ICSME.2017.51
   Jiang Y, 2008, EMPIR SOFTW ENG, V13, P561, DOI 10.1007/s10664-008-9079-3
   Jing XY, 2017, IEEE T SOFTWARE ENG, V43, P321, DOI 10.1109/TSE.2016.2597849
   Jing XY, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P414, DOI 10.1145/2568225.2568320
   Jing XY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P496, DOI 10.1145/2786805.2786813
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Li ZQ, 2021, IEEE T RELIAB, V70, P996, DOI 10.1109/TR.2021.3074660
   Li ZQ, 2019, AUTOMAT SOFTW ENG, V26, P599, DOI 10.1007/s10515-019-00259-1
   Li ZQ, 2019, IEEE T SOFTWARE ENG, V45, P391, DOI 10.1109/TSE.2017.2780222
   Li ZQ, 2018, IET SOFTW, V12, P161, DOI 10.1049/iet-sen.2017.0148
   Li ZQ, 2018, AUTOMAT SOFTW ENG, V25, P201, DOI 10.1007/s10515-017-0220-7
   Li ZQ, 2018, SOFTW TEST VERIF REL, V28, DOI 10.1002/stvr.1658
   Li ZQ, 2017, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2017.19
   Limsettho N, 2018, INFORM SOFTWARE TECH, V100, P87, DOI 10.1016/j.infsof.2018.04.001
   Liu W, 2012, PROC CVPR IEEE, P2074, DOI 10.1109/CVPR.2012.6247912
   MATTHEWS BW, 1975, BIOCHIM BIOPHYS ACTA, V405, P442, DOI 10.1016/0005-2795(75)90109-9
   Menzie T., 2016, PROMISE REPOSITORY E
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Nam J, 2018, IEEE T SOFTWARE ENG, V44, P874, DOI 10.1109/TSE.2017.2720603
   Nam J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P508, DOI 10.1145/2786805.2786814
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Omri S, 2020, P IEEE ACM 42 INT C, P209
   Qiu SJ, 2019, INT J PATTERN RECOGN, V33, DOI 10.1142/S0218001419590377
   Romano J, 2006, ANN M FLOR ASS I RES, P1
   Ryu D, 2017, SOFTWARE QUAL J, V25, P235, DOI 10.1007/s11219-015-9287-1
   Ryu D, 2016, EMPIR SOFTW ENG, V21, P43, DOI 10.1007/s10664-014-9346-4
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Song QB, 2019, IEEE T SOFTWARE ENG, V45, P1253, DOI 10.1109/TSE.2018.2836442
   Sun Y, 2020, IET SOFTW, V14, P825, DOI 10.1049/iet-sen.2019.0389
   Tantithamthavorn C, 2020, IEEE T SOFTWARE ENG, V46, P1200, DOI 10.1109/TSE.2018.2876537
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   Tantithamthavorn C, 2017, IEEE T SOFTWARE ENG, V43, P1, DOI 10.1109/TSE.2016.2584050
   Tong HN, 2021, IEEE T SOFTWARE ENG, V47, P1886, DOI 10.1109/TSE.2019.2939303
   Turhan B, 2013, INFORM SOFTWARE TECH, V55, P1101, DOI 10.1016/j.infsof.2012.10.003
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wan ZY, 2020, IEEE T SOFTWARE ENG, V46, P1241, DOI 10.1109/TSE.2018.2877678
   Wang AL, 2020, IEEE ACCESS, V8, P32989, DOI 10.1109/ACCESS.2020.2973924
   Wang S, 2020, IEEE T SOFTWARE ENG, V46, P1267, DOI 10.1109/TSE.2018.2877612
   Wang TJ, 2016, SOFTW TEST VERIF REL, V26, P498, DOI 10.1002/stvr.1610
   Wang TJ, 2016, AUTOMAT SOFTW ENG, V23, P569, DOI 10.1007/s10515-015-0179-1
   Wu J, 2021, SOFTWARE QUAL J, V29, P405, DOI 10.1007/s11219-021-09553-2
   Xia X, 2016, IEEE T SOFTWARE ENG, V42, P977, DOI 10.1109/TSE.2016.2543218
   Xu Z, 2019, 2019 IEEE 19TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2019), P10, DOI 10.1109/QRS.2019.00015
   Xu Z, 2019, INFORM SOFTWARE TECH, V106, P182, DOI 10.1016/j.infsof.2018.10.004
   Xu Z, 2018, IEEE ACCESS, V6, P57597, DOI 10.1109/ACCESS.2018.2873755
   Yang YB, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P157, DOI 10.1145/2950290.2950353
   Yu Q, 2017, J SYST SOFTWARE, V132, P366, DOI 10.1016/j.jss.2017.06.070
   Zhang F, 2016, EMPIR SOFTW ENG, V21, P2107, DOI 10.1007/s10664-015-9396-2
   Zhou YM, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3183339
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 69
TC 3
Z9 3
U1 2
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2022
VL 30
IS 4
BP 917
EP 951
DI 10.1007/s11219-022-09588-z
EA APR 2022
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6J7CW
UT WOS:000780783900001
DA 2024-07-18
ER

PT J
AU Malhotra, R
   Lata, K
AF Malhotra, Ruchika
   Lata, Kusum
TI An empirical study on predictability of software maintainability using
   imbalanced data
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software maintainability prediction; Machine learning; Data resampling;
   Imbalanced learning
ID OBJECT-ORIENTED METRICS; DEFECT PREDICTION; NEURAL-NETWORKS; ENSEMBLE;
   SUITE; SMOTE; VALIDATION; CLASSIFIER; ATTRIBUTES; REGRESSION
AB In software engineering predictive modeling, early prediction of software modules or classes that possess high maintainability effort is a challenging task. Many prediction models are constructed to predict the maintainability of software classes or modules by applying various machine learning (ML) techniques. If the software modules or classes need high maintainability, effort would be reduced in a dataset, and there would be imbalanced data to train the model. The imbalanced datasets make ML techniques bias their predictions towards low maintainability effort or majority classes, and minority class instances get discarded as noise by the machine learning (ML) techniques. In this direction, this paper presents empirical work to improve the performance of software maintainability prediction (SMP) models developed with ML techniques using imbalanced data. For developing the models, the imbalanced data is pre-processed by applying data resampling methods. Fourteen data resampling methods, including oversampling, undersampling, and hybrid resampling, are used in the study. The study results recommend that the safe-level synthetic minority oversampling technique (Safe-Level-SMOTE) is a useful method to deal with the imbalanced datasets and to develop competent prediction models to forecast software maintainability.
C1 [Malhotra, Ruchika; Lata, Kusum] Delhi Technol Univ, Dept Comp Sci & Engn, Delhi 110042, India.
C3 Delhi Technological University
RP Lata, K (corresponding author), Delhi Technol Univ, Dept Comp Sci & Engn, Delhi 110042, India.
EM ruchikamalhotra2004@yahoo.com; kusumlata@dtu.ac.in
RI lata, kusum/JQX-1718-2023; Malhotra, Ruchika/ABC-3126-2020
OI Malhotra, Ruchika/0000-0003-3872-6213
CR Aggarwal KK, 2002, P A REL MAI, P235, DOI 10.1109/RAMS.2002.981648
   Ahmed MA, 2013, IET SOFTW, V7, P317, DOI 10.1049/iet-sen.2013.0046
   Al Dallal J, 2013, INFORM SOFTWARE TECH, V55, P2028, DOI 10.1016/j.infsof.2013.07.005
   Arisholm E, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P215, DOI 10.1109/ISSRE.2007.22
   ASH D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P154, DOI 10.1109/ICSM.1994.336779
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Batista G. E., 2004, ACM SIGKDD EXPL NEWS, V6, P20, DOI DOI 10.1145/1007730.1007735
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   Broomhead D. S., 1988, Complex Systems, V2, P321
   Bunkhumpornpat C, 2009, LECT NOTES ARTIF INT, V5476, P475, DOI 10.1007/978-3-642-01307-2_43
   Catolino G, 2018, 2018 IEEE WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE), P25, DOI 10.1109/MALTESQUE.2018.8368455
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   CHIDAMBER SR, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P197, DOI 10.1145/118014.117970
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Choeikiwong Teerawit, 2015, Information Science and Applications, P923, DOI 10.1007/978-3-662-46578-3_110
   Cleary S, 1995, EDUCATIONAL INNOVATION IN ECONOMICS AND BUSINESS ADMINISTRATION, P108
   COLEMAN D, 1994, COMPUTER, V27, P44, DOI 10.1109/2.303623
   COLEMAN D, 1995, J SYST SOFTWARE, V29, P3, DOI 10.1016/0164-1212(94)00125-7
   Cong Jin, 2010, Proceedings of the 2010 Second International Conference on Multimedia and Information Technology (MMIT 2010), P24, DOI 10.1109/MMIT.2010.10
   COVER TM, 1967, IEEE T INFORM THEORY, V13, P21, DOI 10.1109/TIT.1967.1053964
   Dagpinar M, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P155, DOI 10.1109/WCRE.2003.1287246
   Ebert C., 2007, Software measurement: establish, extract, evaluate, execute
   Elish MO, 2013, J SOFTW-EVOL PROC, V25, P407, DOI 10.1002/smr.1549
   Elish MO, 2009, EUR CON SFTWR MTNCE, P69, DOI 10.1109/CSMR.2009.57
   Eski S., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P566, DOI 10.1109/ICSTW.2011.43
   Fawcett T, 1997, DATA MIN KNOWL DISC, V1, P291, DOI 10.1023/A:1009700419189
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Gao Z, 2015, COMPUTING, CONTROL, INFORMATION AND EDUCATION ENGINEERING, P439
   Giger E., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P217, DOI 10.1109/MSR.2012.6224284
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Halstead M., 1977, ELEMENTS SOFTWARE SC, V7, P127
   Han H, 2005, LECT NOTES COMPUT SC, V3644, P878, DOI 10.1007/11538059_91
   HART PE, 1968, IEEE T INFORM THEORY, V14, P515, DOI 10.1109/TIT.1968.1054155
   He HB, 2009, IEEE T KNOWL DATA EN, V21, P1263, DOI 10.1109/TKDE.2008.239
   He HB, 2008, IEEE IJCNN, P1322, DOI 10.1109/IJCNN.2008.4633969
   Henderson-Sellers B., 1996, Object-Oriented Metrics, measures of complexity
   Kaur A, 2013, INT J SOFTW ENG KNOW, V23, P743, DOI 10.1142/S0218194013500198
   Kolcz A., 2004, ACM SIGKDD EXPLORATI, V6, P1, DOI [10.2973/odp.proc.ir.207.2004, DOI 10.1145/1007730.1007733]
   Kotsiantis SB, 2006, J COMPUT, V1, P30, DOI 10.4304/jcp.1.4.30-37
   Kpodjedo S, 2011, EMPIR SOFTW ENG, V16, P141, DOI 10.1007/s10664-010-9151-7
   Kubat M, 1998, MACH LEARN, V30, P195, DOI 10.1023/A:1007452223027
   Kumar L., 2015, Proceedings of the 8th India Software Engineering Conference, P100, DOI DOI 10.1145/2723742.2723752
   Kumar L, 2019, INT J SYST ASSUR ENG, V10, P1234, DOI 10.1007/s13198-019-00853-2
   Laradji IH, 2015, INFORM SOFTWARE TECH, V58, P388, DOI 10.1016/j.infsof.2014.07.005
   Laurikkala J, 2001, LECT NOTES ARTIF INT, V2101, P63, DOI 10.1007/3-540-48229-6_9
   le Cessie S., 1992, Applied Statistics, V41, P91
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   Lu HM, 2012, EMPIR SOFTW ENG, V17, P200, DOI 10.1007/s10664-011-9170-z
   Malhotra Ruchika, 2014, 2014 International Conference on Data Mining and Intelligent Computing (ICDMIC), DOI 10.1109/ICDMIC.2014.6954234
   Malhotra R, 2017, PROCEEDINGS OF THE 10TH INNOVATIONS IN SOFTWARE ENGINEERING CONFERENCE, P26, DOI 10.1145/3021460.3021463
   Malhotra R, 2017, EMPIR SOFTW ENG, V22, P2806, DOI 10.1007/s10664-016-9488-7
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   Maloof MA, 2003, INT C MACH LEARN WOR
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   MOLLER MF, 1993, NEURAL NETWORKS, V6, P525, DOI 10.1016/S0893-6080(05)80056-5
   Morasca S, 2009, INT SYMP EMP SOFTWAR, P44, DOI 10.1109/ESEM.2009.5316048
   Napierala K, 2010, LECT NOTES ARTIF INT, V6086, P158, DOI 10.1007/978-3-642-13529-3_18
   Olague HM, 2007, IEEE T SOFTWARE ENG, V33, P402, DOI 10.1109/TSE.2007.1015.
   Olatunji SO., 2013, ICTACT J SOFT COMPUT, V3, P514, DOI DOI 10.21917/ijsc.2013.0077
   OMAN P, 1994, J SYST SOFTWARE, V24, P251, DOI 10.1016/0164-1212(94)90067-1
   Oza NC, 2008, INFORM FUSION, V9, P4, DOI 10.1016/j.inffus.2007.07.002
   Pelayo L, 2007, NAFIPS 2007 - 2007 ANNUAL MEETING OF THE NORTH AMERICAN FUZZY INFORMATION PROCESSING SOCIETY, P69, DOI 10.1109/NAFIPS.2007.383813
   Peng Y, 2011, INT J INF TECH DECIS, V10, P187, DOI 10.1142/S0219622011004282
   Platt J, 1991, NEURAL COMPUT, V3, P213, DOI 10.1162/neco.1991.3.2.213
   Quinlan J. R., 1993, PROGRAMS MACHINE LEA
   Radjenovic D, 2013, INFORM SOFTWARE TECH, V55, P1397, DOI 10.1016/j.infsof.2013.02.009
   Rousseeuw P. J., 2005, Robust Regression and Outlier Detection
   Schnappinger M, 2019, INT C PROGRAM COMPRE, P243, DOI 10.1109/ICPC.2019.00043
   Schneberger SL, 1997, J SYST SOFTWARE, V37, P101, DOI 10.1016/S0164-1212(96)00107-0
   SCHNEIDEWIND NF, 1979, IEEE T RELIAB, V28, P192, DOI 10.1109/TR.1979.5220563
   Siers MJ, 2015, INFORM SYST, V51, P62, DOI 10.1016/j.is.2015.02.006
   Singh Y, 2010, SOFTWARE QUAL J, V18, P3, DOI 10.1007/s11219-009-9079-6
   Stefanowski J, 2008, LECT NOTES COMPUT SC, V5182, P283, DOI 10.1007/978-3-540-85836-2_27
   Sun ZB, 2012, IEEE T SYST MAN CY C, V42, P1806, DOI 10.1109/TSMCC.2012.2226152
   Tan M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P99, DOI 10.1109/ICSE.2015.139
   Thwin MMT, 2005, J SYST SOFTWARE, V76, P147, DOI 10.1016/j.jss.2004.05.001
   van Koten C, 2006, INFORM SOFTWARE TECH, V48, P59, DOI 10.1016/j.infsof.2005.03.002
   Wang Li-jin, 2009, 2009 1st International Conference on Information Science and Engineering (ICISE 2009), P3827, DOI 10.1109/ICISE.2009.845
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Wang XW, 2019, INT J UNCERTAIN FUZZ, V27, P841, DOI 10.1142/S0218488519500375
   Xu YW, 2011, IEEE T SYST MAN CY B, V41, P107, DOI 10.1109/TSMCB.2010.2046890
   Yoon K, 2005, HIS 2005: 5TH INTERNATIONAL CONFERENCE ON HYBRID INTELLIGENT SYSTEMS, PROCEEDINGS, P303
   Zhang W, 2015, AUTOMAT SOFTW ENG, V22, P111, DOI 10.1007/s10515-014-0161-3
   Zheng J, 2010, EXPERT SYST APPL, V37, P4537, DOI 10.1016/j.eswa.2009.12.056
   Zhou YM, 2007, J SYST SOFTWARE, V80, P1349, DOI 10.1016/j.jss.2006.10.049
NR 88
TC 9
Z9 9
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1581
EP 1614
DI 10.1007/s11219-020-09525-y
EA AUG 2020
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000556151000001
DA 2024-07-18
ER

PT J
AU Paiva, ACR
   Restivo, A
   Almeida, S
AF Paiva, Ana C. R.
   Restivo, Andre
   Almeida, Sergio
TI Test case generation based on mutations over user execution traces
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Mutation testing; Test case generation; Web testing;
   Software test automation
AB Automatic test case generation is usually based on models of the software under test. However, those models may not exist or may be outdated and so, the test case generation must resort to other artifacts. In a software maintenance context, test cases must adapt to software changes and should be improved continuously to test adequately the new versions of the software. Mutation testing is a fault-based testing technique that evaluates the quality of the tests by applying simple changes to the source code and checking afterwards if the tests are able to detects those changes. This paper presents a web testing approach in which test cases are generated from user execution traces as a way to deal with the absence of models. In addition, it applies mutation operators over those test cases to enrich the test suite. The mutation operators were designed so as to mimic possible real failures. The additional tests are analyzed, and those that generate different outcomes are kept because they exercise additional behavior of the web application under test. At the end, the overall approach is illustrated and validated in a case study.
C1 [Paiva, Ana C. R.; Restivo, Andre; Almeida, Sergio] Univ Porto, Fac Engn, Porto, Portugal.
   [Paiva, Ana C. R.] INESC TEC, Porto, Portugal.
   [Restivo, Andre] LIACC, Porto, Portugal.
C3 Universidade do Porto; INESC TEC; Universidade do Porto
RP Paiva, ACR (corresponding author), Univ Porto, Fac Engn, Porto, Portugal.; Paiva, ACR (corresponding author), INESC TEC, Porto, Portugal.
EM apaiva@fe.up.pt; arestivo@fe.up.pt
RI Restivo, André/A-4825-2009; Paiva, Ana/B-1136-2014
OI Restivo, André/0000-0002-1328-3391; Paiva, Ana/0000-0003-3431-8060
CR Almeida S., 2019, Communications in Computer and Information Science, V1010, P339
   Barbosa A., 2011, P 3 ACM SIGCHI S ENG, P175, DOI DOI 10.1145/1996461.1996516
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Esparteiro Garcia Jorge, 2018, Trends and Advances in Information Systems and Technologies. Advances in Intelligent Systems and Computing (AISC 746), P257, DOI 10.1007/978-3-319-77712-2_25
   Ferreira S.M.A, 2019, THESIS
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Koroglu Y, 2018, LECT NOTES COMPUT SC, V10802, P264, DOI 10.1007/978-3-319-89363-1_15
   Mahmood R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P599, DOI 10.1145/2635868.2635896
   Mao K., 2016, P 25 INT S SOFTW TES, P94
   Moreira RMLM, 2017, SOFTW TEST VERIF REL, V27, DOI 10.1002/stvr.1629
   Morgado IC, 2018, SOFTWARE QUAL J, V26, P1553, DOI 10.1007/s11219-017-9387-1
   Nabuco M, 2014, LECT NOTES COMPUT SC, V8584, P248, DOI 10.1007/978-3-319-09153-2_19
   POSTON RM, 1992, IEEE SOFTWARE, V9, P33, DOI 10.1109/52.136165
   Siavashi F., 2016, INT C SOFTW TECHN, P45
   Silva P, 2018, 2018 11TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P268, DOI 10.1109/QUATIC.2018.00047
NR 15
TC 6
Z9 10
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1173
EP 1186
DI 10.1007/s11219-020-09503-4
EA MAY 2020
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000529774000001
DA 2024-07-18
ER

PT J
AU Ma, CY
   Nie, CY
   Chao, WC
   Zhang, BW
AF Ma, Chunyan
   Nie, Chenyang
   Chao, Weicheng
   Zhang, Bowei
TI A vector table model-based systematic analysis of spectral fault
   localization techniques
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Testing; Debugging; Software fault localization; Performance measurement
ID RANKING METRICS
AB Spectral fault localization (SFL) is an automatic fault-localization technique, which uses risk evaluation formula to rank the risk of fault existence in each program entity after collecting the testing information dynamically. To provide insight into SFL techniques, the evaluation method is an important research topic. In this paper, we present a uniformly systematic investigation framework to evaluate and compare SFL techniques with fixed formulas considering both single-fault and multiple-fault scenarios. Particularly, we design a generic vector table model called VTM as a novel measurement model to thoroughly understand various SFL techniques. By defining different types of faulty statements and investigating suspiciousness factors' mathematical expression of statements on the basis of VTM, the effectiveness of different SFL techniques could be systematically analyzed and compared. Under the VTM-based evaluation framework, the latest formula D* and the optimal formula O considered before as examples are explored: (1) under a single-fault scenario, O has a better performance than D*, and O is the best SFL technique at present; (2) O shows stable performance and the performance of D* fluctuates in a range under double-fault scenarios: O outperforms D* in three cases, and the performance of O is between the worst performance and the best performance of D* in the other three cases that are less likely to happen; and (3) sample programs are presented to explain such observations. The VTM-based method overcomes the limitations of existing empirical and systematic approaches, which enables a systematic evaluation for SFL techniques with fixed formulas under both single-fault and multiple-fault cases.
C1 [Ma, Chunyan; Nie, Chenyang; Chao, Weicheng; Zhang, Bowei] Northwestern Polytech Univ, Dept Software Engn, Xian 710072, Shaanxi, Peoples R China.
C3 Northwestern Polytechnical University
RP Ma, CY (corresponding author), Northwestern Polytech Univ, Dept Software Engn, Xian 710072, Shaanxi, Peoples R China.
EM machunyan@nwpu.edu.cn
RI Ma, Chunyan/AAJ-2777-2020; Ma, Chunyan/HMP-3228-2023
OI Ma, Chunyan/0000-0002-0453-0450
FU National Natural Science Foundation of China [61103003]
FX This work was supported by National Natural Science Foundation of China
   (Program No. 61103003).
CR Abreu R, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P89, DOI 10.1109/TAIC.PART.2007.13
   Abreu R, 2009, IEEE INT CONF AUTOM, P88, DOI 10.1109/ASE.2009.25
   Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   [Anonymous], 2013, P 2013 INT S SOFTW T, DOI DOI 10.1145/2483760.2483767
   [Anonymous], 2012, ACSC
   Chen MY, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P595, DOI 10.1109/DSN.2002.1029005
   Choi S.-S., 2010, Systemics, Cybernetics and Informatic, V8, P43
   Debroy Vidroha, 2009, 2009 20th International Symposium on Software Reliability Engineering (ISSRE 2009), P165, DOI 10.1109/ISSRE.2009.14
   DiGiuseppe N., 2011, P 20 INT S SOFTW TES, P210, DOI DOI 10.1145/2001420.2001446
   Landi C., 2014, ECAI, P1053
   Lee HJ, 2009, 2009 2ND IEEE INTERNATIONAL CONFERENCE ON COMPUTER SCIENCE AND INFORMATION TECHNOLOGY, VOL 4, P501, DOI 10.1109/ICCSIT.2009.5234512
   Ma CY, 2014, INT CONF QUAL SOFTW, P315, DOI 10.1109/QSIC.2014.24
   Ma CY, 2013, P INT COMP SOFTW APP, P609, DOI 10.1109/COMPSAC.2013.99
   Naish L, 2013, IEEE AUS SOFT ENGR, P51, DOI 10.1109/ASWEC.2013.16
   Naish L, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000791.2000795
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   S.I.R, 2008, SOFTWARE INFRASTRUCT
   Wang XM, 2009, PROC INT CONF SOFTW, P45, DOI 10.1109/ICSE.2009.5070507
   Wong WE, 2007, P INT COMP SOFTW APP, P449
   Wong WE, 2014, IEEE T RELIAB, V63, P290, DOI 10.1109/TR.2013.2285319
   Wong WE, 2012, IEEE T SYST MAN CY C, V42, P378, DOI 10.1109/TSMCC.2011.2118751
   Xie XY, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522924
   Zheng Alice X., 2006, INT C MACH LEARN, P1105, DOI DOI 10.1145/1143844.1143983
NR 23
TC 3
Z9 5
U1 2
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 43
EP 78
DI 10.1007/s11219-018-9402-1
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000002
DA 2024-07-18
ER

PT J
AU Bejleri, A
   Mezini, M
   Eugster, P
   Domnori, E
AF Bejleri, Andi
   Mezini, Mira
   Eugster, Patrick
   Domnori, Elton
TI Cooperative decoupled processes
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Event-driven programming; Decoupling; Control flow; Aliasing; Linear
   type system
ID LANGUAGE
AB Event-driven programming has become a major paradigm in developing concurrent, distributed systems. Its benefits are often informally captured by the key tenet of "decoupling," a notion which roughly captures the ability of processes to join and leave (or fail) applications dynamically, and to be developed by independent parties. Programming models for event-driven programming either make it hard to globally reason about control flow, thus hampering sound execution, or sacrifice decoupling to aid in reasoning about control flow. This work fills the gap by introducing a programming model-dubbed cooperative decoupled processes-that achieves both decoupling and global reasoning about control flow. We introduce this programming model through an event calculus, loosely inspired by the Join calculus, that enables reasoning about cooperative decoupled processes through the concepts of pre- and postconditions. A linear type system controls aliasing of events to avoid a break of control flow and thus safe exchange of shared events. Fundamental properties of the type system such as subject reduction, migration safety, and progress are established.
C1 [Bejleri, Andi; Mezini, Mira; Eugster, Patrick] Tech Univ Darmstadt, Hsch Str 10, D-64289 Darmstadt, Germany.
   [Domnori, Elton] Epoka Univ, Rr Tirane Rinas Km12, Tirana 1039, Albania.
C3 Technical University of Darmstadt
RP Bejleri, A (corresponding author), Tech Univ Darmstadt, Hsch Str 10, D-64289 Darmstadt, Germany.
EM bejleri@cs.tu-darmstadt.de; mezini@cs.tu-darmstadt.de;
   peugster@cs.tu-darmstadt.de; edomnori@epoka.edu.al
OI Domnori, Elton/0000-0003-2194-8848
CR Adya A, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P289
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   [Anonymous], 1972, COMMUNICATIONS ACM
   [Anonymous], 2002, PROC 8 ANN INT C MOB
   [Anonymous], 1984, PROGRAM TRANSFORMATI
   Bejleri A., 2016, MODULARITY
   Bejleri A., 2006, FOOL WOOD 06
   Benton N, 2004, ACM T PROGR LANG SYS, V26, P769, DOI 10.1145/1018203.1018205
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   Bidinger P, 2003, LECT NOTES COMPUT SC, V2884, P109
   Bolosky WJ, 2000, PERF E R SI, V28, P34, DOI 10.1145/345063.339345
   Courtenage S, 2002, 22ND INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOP, PROCEEDINGS, P602, DOI 10.1109/ICDCSW.2002.1030836
   Cunningham R., 2005, HOTOS
   Cutsem T. V., 2008, COORDINATION
   Deniélou PM, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P435, DOI 10.1145/1926385.1926435
   Desai A., 2013, SIGPLAN NOTICES, V48
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   Fiege L, 2002, LECT NOTES COMPUT SC, V2374, P309
   Floyd S, 1997, IEEE ACM T NETWORK, V5, P784, DOI 10.1109/90.650139
   Foltzer A., 2012, SIGPLAN NOTICES, V47
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Fournet C., 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P406
   Fournet C, 1997, LECT NOTES COMPUT SC, V1243, P196
   Garcia Joshua., 2013, Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, P367, DOI DOI 10.1145/2491411.2491462
   Gasiunas Vaidas, 2011, P 10 INT C ASP OR SO, P227, DOI 10.1145/1960275.1960303
   Gelernter David, 1985, ACM T PROGR LANG SYS, V7, P1
   Germain Florence, 2002, ELEC NOT THEOR COMPU, V66, P145
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gustafsson A., 2005, QUEUE, V3
   Haller P., 2009, THEORETICAL COMPUTER, V410
   Hinze A, 2002, NINTH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P61, DOI 10.1109/TIME.2002.1027476
   Hu R., 2010, ECOOP
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Li P., 2007, PLDI
   Millstein T., 2006, ECOOP
   Odersky M., 2006, JMLC
   Ousterhout J. K., 1996, COMMUNICATION
   Padovani L., 2015, OOPSLA
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Sánchez C, 2003, LECT NOTES COMPUT SC, V2855, P323
   Schmitt A, 2003, ACM SIGPLAN NOTICES, V38, P50, DOI 10.1145/640128.604136
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sunshine J, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P713
   Van Heek J., 2014, 4th International Workshop on User-Centered Design of Pervasive Healthcare Applications, P205, DOI [10.4108/icst.pervasivehealth.2014, DOI 10.4108/ICST.PERVASIVEHEALTH.2014]
   von Behren R., 2003, HOTOS'03: Proceedings of the 9th conference on Hot Topics in Operating Systems, P4
   Welsh M., 2001, Operating Systems Review, V35, P230, DOI 10.1145/502059.502057
   Zdonik S., 1997, SIGPLAN NOTICES, V32
NR 48
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 1147
EP 1183
DI 10.1007/s11219-017-9366-6
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000012
DA 2024-07-18
ER

PT J
AU Rinsaka, K
   Dohi, T
AF Rinsaka, Koichiro
   Dohi, Tadashi
TI Toward high assurance software systems with adaptive fault management
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software reliability; Software aging; Software rejuvenation;
   Nonparametric predictive inference; Nonparametric estimation
ID PREVENTIVE MAINTENANCE; TOLERANT SOFTWARE; REJUVENATION; MODELS
AB In this paper, we develop an adaptive approach to estimate the optimal preventive rejuvenation schedule, which maximizes the steady-state system availability. We formulate the upper and lower bounds of the predictive system availability using the one-look ahead predictive survival function from system failure time data and derive the pessimistic and optimistic rejuvenation policies. Then, we derive adaptive rejuvenation policies from the original data together with a right-censored observation. In the simulation experiments, we show the usefulness of the adaptive nonparametric predictive inference approach proposed in this paper.
C1 [Rinsaka, Koichiro] Kobe Gakuin Univ, Fac Business Adm, Chuo Ku, 1-1-3 Minatojima, Kobe, Hyogo 6588586, Japan.
   [Dohi, Tadashi] Hiroshima Univ, Dept Informat Engn, 1-4-1 Kagamiyama, Higashihiroshima 7398527, Japan.
C3 Kobe Gakuin University; Hiroshima University
RP Dohi, T (corresponding author), Hiroshima Univ, Dept Informat Engn, 1-4-1 Kagamiyama, Higashihiroshima 7398527, Japan.
EM rinsaka@ba.kobegakuin.ac.jp; dohi@rel.hiroshima-u.ac.jp
RI Dohi, Tadashi/D-5882-2011
FU Grants-in-Aid for Scientific Research [25750132] Funding Source: KAKEN
CR ADAMS EN, 1984, IBM J RES DEV, V28, P2, DOI 10.1147/rd.281.0002
   [Anonymous], P 6 INT S SOFTW REL
   Avritzer A., 1997, Empirical Software Engineering, V2, P59, DOI 10.1023/A:1009794200077
   Avritzer A, 2006, I C DEPEND SYS NETWO, P435, DOI 10.1109/DSN.2006.58
   Bao YJ, 2005, IEEE T RELIAB, V54, P541, DOI 10.1109/TR.2005.853442
   Bao YJ, 2003, 2003 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P241
   Bobbio A, 2001, PERFORM EVALUATION, V46, P45, DOI 10.1016/S0166-5316(01)00037-2
   Castelli V, 2001, IBM J RES DEV, V45, P311, DOI 10.1147/rd.452.0311
   Chen XE, 2006, SOSE 2006: SECOND IEEE INTERNATIONAL SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING, PROCEEDINGS, P34
   Coolen FPA, 2004, J STAT PLAN INFER, V126, P25, DOI 10.1016/j.jspi.2003.07.004
   Coolen-Schrijner PC, 2004, J OPER RES SOC, V55, P1281, DOI 10.1057/palgrave.jors.2601764
   Dohi T, 2003, IEICE T COMMUN, VE86B, P2931
   Dohi T, 2001, COMPUT J, V44, P473, DOI 10.1093/comjnl/44.6.473
   Eto H., 2006, Journal of Computer Sciences, V2, P528, DOI 10.3844/jcssp.2006.528.534
   Garg S, 1998, IEEE T COMPUT, V47, P96, DOI 10.1109/12.656092
   Grottke M, 2006, IEEE T RELIAB, V55, P411, DOI 10.1109/TR.2006.879609
   HILL BM, 1968, J AM STAT ASSOC, V63, P677, DOI 10.2307/2284038
   HUANG YN, 1995, DIG PAP INT SYMP FAU, P381, DOI 10.1109/FTCS.1995.466961
   Pfening A, 1996, PERFORM EVALUATION, V27-8, P491, DOI 10.1016/S0166-5316(96)90042-5
   Reinecke P., 2004, Service Availability. First International Service Availability Symposium, ISAS 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol.3335), P86
   Rinsaka K, 2005, IEICE T INF SYST, VE88D, P2681, DOI 10.1093/ietisy/e88-d.12.2681
   Rinsaka K, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P247, DOI 10.1109/ISSRE.2007.13
   Rinsaka K, 2007, LECT NOTES COMPUT SC, V4526, P94
   Shereshevsky M, 2003, 2003 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P721, DOI 10.1109/DSN.2003.1209987
   SUZUKI H, 2002, ADV STOCHASTIC MODEL, P85
   Tai AT, 1999, PERFORM EVALUATION, V35, P215, DOI 10.1016/S0166-5316(99)00006-1
   Vaidyanathan K, 2005, IEEE T DEPEND SECURE, V2, P124, DOI 10.1109/TDSC.2005.15
   van Moorsel APA, 2006, IEEE T SOFTWARE ENG, V32, P547, DOI 10.1109/TSE.2006.73
   Wang DZ, 2007, PERFORM EVALUATION, V64, P247, DOI 10.1016/j.peva.2006.04.002
   Yurcik W, 2001, IEEE SOFTWARE, V18, P48, DOI 10.1109/MS.2001.936217
NR 30
TC 9
Z9 9
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2016
VL 24
IS 1
SI SI
BP 65
EP 85
DI 10.1007/s11219-014-9264-0
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1VQ
UT WOS:000369006200005
DA 2024-07-18
ER

PT J
AU Fang, CR
   Chen, ZY
   Wu, K
   Zhao, ZH
AF Fang, Chunrong
   Chen, Zhenyu
   Wu, Kun
   Zhao, Zhihong
TI Similarity-based test case prioritization using ordered sequences of
   program entities
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test case prioritization; Similarity; Ordered sequence; Edit distance;
   Farthest-first algorithm
AB Test suites often grow very large over many releases, such that it is impractical to re-execute all test cases within limited resources. Test case prioritization rearranges test cases to improve the effectiveness of testing. Code coverage has been widely used as criteria in test case prioritization. However, the simple way may not reveal some bugs, such that the fault detection rate decreases. In this paper, we use the ordered sequences of program entities to improve the effectiveness of test case prioritization. The execution frequency profiles of test cases are collected and transformed into the ordered sequences. We propose several novel similarity-based test case prioritization techniques based on the edit distances of ordered sequences. An empirical study of five open source programs was conducted. The experimental results show that our techniques can significantly increase the fault detection rate and be effective in detecting faults in loops. Moreover, our techniques are more cost-effective than the existing techniques.
C1 [Fang, Chunrong; Chen, Zhenyu; Wu, Kun; Zhao, Zhihong] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing 210093, Jiangsu, Peoples R China.
   [Fang, Chunrong; Chen, Zhenyu; Wu, Kun; Zhao, Zhihong] Nanjing Univ, Software Inst, Nanjing 210093, Jiangsu, Peoples R China.
C3 Nanjing University; Nanjing University
RP Chen, ZY (corresponding author), Nanjing Univ, Software Inst, Nanjing 210093, Jiangsu, Peoples R China.
EM zychen@software.nju.edu.cn
RI Fang, Chunrong/GPW-9872-2022
OI Fang, Chunrong/0000-0002-9930-7111
FU National Basic Research Program of China (973 Program) [2014CB340702];
   National Natural Science Foundation of China [61170067, 61373013];
   Scientific Research Foundation of Graduate School of Nanjing University
   [2013CL13]
FX The authors would like to thank the anonymous reviewers for their
   constructive comments. The work described in this article was partially
   supported by the National Basic Research Program of China (973 Program
   2014CB340702), the National Natural Science Foundation of China
   (61170067, 61373013) and the Scientific Research Foundation of Graduate
   School of Nanjing University (2013CL13).
CR Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   Carlson Ryan, 2011, 2011 IEEE 27th International Conference on Software Maintenance, P382, DOI 10.1109/ICSM.2011.6080805
   Chen ZY, 2011, INT J SOFTW ENG KNOW, V21, P759, DOI 10.1142/S0218194011005487
   Dickinson W., 2001, Software Engineering Notes, V26, P246, DOI 10.1145/503271.503243
   Do HS, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P113
   Do H, 2006, IEEE T SOFTWARE ENG, V32, P733, DOI 10.1109/TSE.2006.92
   Do H, 2010, IEEE T SOFTWARE ENG, V36, P593, DOI 10.1109/TSE.2010.58
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Fang CR, 2012, SCI CHINA INFORM SCI, V55, P2826, DOI 10.1007/s11432-012-4746-9
   Group G. R., 2009, SOFTWARE ARTIFACT IN
   Hemmati Hadi, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P141, DOI 10.1109/ISSRE.2010.9
   Hemmati H, 2010, LECT NOTES COMPUT SC, V6435, P63, DOI 10.1007/978-3-642-16573-3_6
   Irvine SA, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P169, DOI 10.1109/TAIC.PART.2007.38
   Jiang B, 2009, IEEE INT CONF AUTOM, P233, DOI 10.1109/ASE.2009.77
   Jones JA, 2003, IEEE T SOFTWARE ENG, V29, P195, DOI 10.1109/TSE.2003.1183927
   Kun Wu, 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P124, DOI 10.1109/IWAST.2012.6228980
   Leon D, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P442, DOI 10.1109/ISSRE.2003.1251065
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Lo D, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P557
   Malishevsky AG, 2002, PROC IEEE INT CONF S, P204, DOI 10.1109/ICSM.2002.1167767
   Marick B., 1994, The craft of software testing: Subsystem testing including object-based and object-oriented testing
   Masri W, 2007, IEEE T SOFTWARE ENG, V33, P454, DOI 10.1109/TSE.2007.1020
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Sampath Sreedevi, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P141, DOI 10.1109/ICST.2008.42
   Shali Yan, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P147, DOI 10.1109/ICST.2010.47
   Sumner W.N., 2011, Proceedings of ACM International Symposium on Software Testing and Analysis, P309
   WAGNER RA, 1974, J ACM, V21, P168, DOI 10.1145/321796.321811
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yoo S, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P201
   Zhang QQ, 2010, PROCEEDINGS OF 2010 INTERNATIONAL WORKSHOP ON DIFFUSE POLLUTION-MANAGEMENT MEASURES AND CONTROL TECHNIQUE, P171, DOI 10.1109/QSIC.2010.16
NR 31
TC 46
Z9 51
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2014
VL 22
IS 2
SI SI
BP 335
EP 361
DI 10.1007/s11219-013-9224-0
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AF7TM
UT WOS:000334917700010
DA 2024-07-18
ER

PT J
AU Sözer, H
   Tekinerdogan, B
   Aksit, M
AF Sozer, Hasan
   Tekinerdogan, Bedir
   Aksit, Mehmet
TI Optimizing decomposition of software architecture for local recovery
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software architecture design; Fault tolerance; Local recovery;
   Availability; Performance
ID RELIABILITY-ANALYSIS; FRAMEWORK; LANGUAGE
AB The increasing size and complexity of software systems has led to an amplified number of potential failures and as such makes it harder to ensure software reliability. Since it is usually hard to prevent all the failures, fault tolerance techniques have become more important. An essential element of fault tolerance is the recovery from failures. Local recovery is an effective approach whereby only the erroneous parts of the system are recovered while the other parts remain available. For achieving local recovery, the architecture needs to be decomposed into separate units that can be recovered in isolation. Usually, there are many different alternative ways to decompose the system into recoverable units. It appears that each of these decomposition alternatives performs differently with respect to availability and performance metrics. We propose a systematic approach dedicated to optimizing the decomposition of software architecture for local recovery. The approach provides systematic guidelines to depict the design space of the possible decomposition alternatives, to reduce the design space with respect to domain and stakeholder constraints and to balance the feasible alternatives with respect to availability and performance. The approach is supported by an integrated set of tools and illustrated for the open-source MPlayer software.
C1 [Sozer, Hasan] Ozyegin Univ, Dept Comp Sci, Istanbul, Turkey.
   [Tekinerdogan, Bedir] Bilkent Univ, Dept Comp Engn, Ankara, Turkey.
   [Aksit, Mehmet] Univ Twente, Dept Comp Sci, NL-7500 AE Enschede, Netherlands.
C3 Ozyegin University; Ihsan Dogramaci Bilkent University; University of
   Twente
RP Sözer, H (corresponding author), Ozyegin Univ, Dept Comp Sci, Istanbul, Turkey.
EM hasan.sozer@ozyegin.edu.tr; bedir@cs.bilkent.edu.tr; aksit@cs.utwente.nl
RI Sözer, Hasan/A-4722-2015; Tekinerdogan, Bedir/K-3639-2019; Sözer,
   Hasan/AAR-8697-2020
OI Sözer, Hasan/0000-0002-2968-4763; Tekinerdogan,
   Bedir/0000-0002-8538-7261; Sözer, Hasan/0000-0002-2968-4763
FU Netherlands Ministry of Economic Affairs under the Bsik program
FX This work has been carried out as part of the TRADER project (TRADER
   2011) under the responsibility of the Embedded Systems Institute. This
   project is partially supported by the Netherlands Ministry of Economic
   Affairs under the Bsik program.
CR Aleti A, 2009, MOMPES: 2009 ICSE WORKSHOP ON MODEL-BASED METHODOLOGIES FOR PERVASIVE AND EMBEDDED SOFTWARE, P61, DOI 10.1109/MOMPES.2009.5069138
   Alexander C., 1964, Notes on the Synthesis of Form
   [Anonymous], 2002, UCBCSD021175
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   Anquetil N., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P235, DOI 10.1109/WCRE.1999.806964
   Athan TW, 1996, ENG OPTIMIZ, V27, P155, DOI 10.1080/03052159608941404
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   BACHMAN F, 2003, CMUSEI2003TR004
   Boudali H, 2009, 2009 THIRD IEEE INTERNATIONAL CONFERENCE ON SECURE SOFTWARE INTEGRATION AND RELIABILITY IMPROVEMENT, PROCEEDINGS, P14, DOI 10.1109/SSIRI.2009.10
   Candea G, 2004, USENIX Association Proceedings of the Sixth Symposium on Operating Systems Design and Implementation (OSDE '04), P31
   Candea G, 2004, PERFORM EVALUATION, V56, P213, DOI 10.1016/j.peva.2003.07.007
   CLEMENTS P., 2002, EVALUATING SOFTWARE
   Clements P., 2002, DOCUMENTING SOFTWARE
   Dashofy EM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P266, DOI 10.1109/ICSE.2002.1007974
   Davey J, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P268, DOI 10.1109/WCRE.2000.891478
   DEVISSER I, 2008, THESIS TU EINDHOVEN
   Di Ruscio Davide, 2010, 32 INT C SOFTWARE EN, P85, DOI [10.1145/1806799.1806816, DOI 10.1145/1806799.1806816]
   Dobrica L, 2002, IEEE T SOFTWARE ENG, V28, P638, DOI 10.1109/TSE.2002.1019479
   Fenlason J, 2000, GNU GPROF GNU PROFIL
   Gokhale SS, 2007, IEEE T DEPEND SECURE, V4, P32, DOI 10.1109/TDSC.2007.4
   Grassi V, 2005, LECT NOTES COMPUT SC, V3712, P71
   Grunske L, 2007, LECT NOTES COMPUT SC, V4615, P188
   Harris J.M., 2000, COMBINATORICS GRAPH
   Herder JN, 2007, I C DEPEND SYS NETWO, P41, DOI 10.1109/DSN.2007.46
   Heyliger G., 1994, ENCY SOFTWARE ENG, P220
   Huang Y., 1995, SOFTWARE FAULT TOLER, P231
   Hunt G., 2007, Operating Systems Review, V41, P341, DOI 10.1145/1272998.1273032
   Jokiaho T., 2003, RTC MAGAZINE, P52
   Kang Kyo C, 1990, Technical Report
   Laprie J.C., 1995, SOFTWARE FAULT TOLER, P47
   Lung CH, 2007, INT J SOFTW ENG KNOW, V17, P599, DOI 10.1142/S0218194007003410
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Meedeniya I, 2011, J SYST SOFTWARE, V84, P835, DOI 10.1016/j.jss.2011.01.004
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Nguyen GT, 2002, LECT NOTES COMPUT SC, V2328, P369
   Object Management Group Fault tolerant CORBA, 2001, 20010929 OMG
   Pareto V., 1896, COURS EC POLITIQUE
   Ross S. M., 2014, INTRO PROBABILITY MO
   Ruskey F., 1993, Algorithms and Computation. 4th International Symposium, ISAAC '93 Proceedings, P201
   Ruskey F., 2003, CSC425520 U VICT
   Santos G, 2008, ARES 2008: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON AVAILABILITY, SECURITY AND RELIABILITY, P653, DOI 10.1109/ARES.2008.10
   Schmidt Douglas C., 2009, International Journal of Business Process Integration and Management, V4, P35, DOI 10.1504/IJBPIM.2009.026984
   Sözer H, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P167, DOI 10.1109/WICSA.2008.9
   Sozer H, 2009, SOFTWARE PRACT EXPER, V39, P869, DOI 10.1002/spe.916
   Teitelbaum Tim., 2000, ACM SIGSOFT Software Engineering Notes, V25, P99
   Tekinerdogan B, 2008, J SYST SOFTWARE, V81, P558, DOI 10.1016/j.jss.2007.10.029
   TRADER, 2011, TRAD PROJ
   Wiggerts TA, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P33, DOI 10.1109/WCRE.1997.624574
   Yacoub S, 2004, IEEE T RELIAB, V53, P465, DOI 10.1109/TR.2004.838034
NR 51
TC 14
Z9 14
U1 0
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2013
VL 21
IS 2
BP 203
EP 240
DI 10.1007/s11219-011-9171-6
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 114MX
UT WOS:000316746700001
DA 2024-07-18
ER

PT J
AU Lagerström, R
   von Würtemberg, LM
   Holm, H
   Luczak, O
AF Lagerstrom, Robert
   von Wurtemberg, Liv Marcks
   Holm, Hannes
   Luczak, Oscar
TI Identifying factors affecting software development cost and productivity
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Cost estimation; Software development cost; Software development
   productivity; Estimation models; Function points
ID SCIENCE
AB Software systems of today are often complex, making development costs difficult to estimate. This paper uses data from 50 projects performed at one of the largest banks in Sweden to identify factors that have an impact on software development cost. Correlation analysis of the relationship between factor states and project costs was assessed using ANOVA and regression analysis. Ten out of the original 31 factors turned out to have an impact on software development project cost at the Swedish bank including the: number of function points, involved risk, number of budget revisions, primary platform, project priority, commissioning body's unit, commissioning body, number of project participants, project duration, and number of consultants. In order to be able to compare projects of different size and complexity, this study also considers the software development productivity defined as the amount of function points per working hour in a project. The study at the bank indicates that the productivity is affected by factors such as performance of estimation and prognosis efforts, project type, number of budget revisions, existence of testing conductor, presentation interface, and number of project participants. A discussion addressing how the productivity factors relate to cost estimation models and their factors is presented. Some of the factors found to have an impact on cost are already included in estimation models such as COCOMO II, TEAMATe, and SEER-SEM, for instance function points and software platform. Thus, this paper validates these well-known factors for cost estimation. However, several of the factors found in this study are not included in established models for software development cost estimation. Thus, this paper also provides indications for possible extensions of these models.
C1 [Lagerstrom, Robert; von Wurtemberg, Liv Marcks; Holm, Hannes; Luczak, Oscar] Royal Inst Technol, S-10044 Stockholm, Sweden.
C3 Royal Institute of Technology
RP Lagerström, R (corresponding author), Royal Inst Technol, Osquldas Vag 12, S-10044 Stockholm, Sweden.
EM robertl@ics.kth.se; livm@ics.kth.se; hannesh@ics.kth.se;
   oscarl@ics.kth.se
OI Lagerstrom, Robert/0000-0003-3089-3885
CR ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   [Anonymous], 2009, CHAOS SUMM 2009
   [Anonymous], 2009, DESIGN ANAL EXPT
   Bailey J. W., 1981, 5th International Conference on Software Engineering, P107
   Boehm B, 2000, ANN SOFTW ENG, V10, P177, DOI 10.1023/A:1018991717352
   Boehm BW., 1981, Software Engineering Economics
   Common Software Measurement International Consortium (COSMIC), 2009, COSMIC FUNCT SIZ MEA
   Devnani-Chulani S., 1999, THESIS U SO CALIFORN
   Galorath Inc, 2010, SYST EV EST RES SOFT
   Institute P. M., 2009, PROJ MAN BOD KNOWL
   JENSEN RW, 1983, P INT SOC PAR AN, P96
   Jones C., 1997, APPL SOFTWARE MEASUR
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   KING G, 1986, AM J POLIT SCI, V30, P666, DOI 10.2307/2111095
   Lagerström R, 2010, SOFTWARE QUAL J, V18, P437, DOI 10.1007/s11219-010-9100-0
   Lagerstrom R., 2009, International Journal of Computer Science and Applications, V6, P89, DOI DOI 10.1007/S11219-010-9100-0
   Lagerström R, 2010, J SYST SOFTWARE, V83, P1387, DOI 10.1016/j.jss.2010.02.019
   Laird L., 2006, Software Measurement and Estimation: A Practical Approach
   Marxwell K. D., 2000, IEEE SOFTWARE, V17, P80
   MATSON JE, 1994, IEEE T SOFTWARE ENG, V20, P275, DOI 10.1109/32.277575
   Maylor H., 2003, PROJECT MANAGEMENT, V3rd
   Molokken-Ostvold K., 2007, COMBINING ESTIMATES
   MORRIS P.W. G., 1994, MANAGEMENT PROJECTS
   Park R., 1988, 4 COCOMO US GROUP M
   Premraj R., 2005, P INT SOFTW METR S, P341
   Putnam L., 1992, MEASURES EXCELLENCE
   Rubin H. A., 1983, SOFTFAIR C DEV TOOLS, P4
   *STAND GROUP INT I, 1995, CHAOS REP
   Tausworthe R. C., 1981, DEEP SPACE NETWORK S, P81
   The Standish Group, 2003, WHAT AR YOUR REQ
   Trendowicz A., 2008, INTEGRATED APPROACH
   Warner R.M., 2008, APPL STAT
NR 32
TC 19
Z9 23
U1 1
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2012
VL 20
IS 2
SI SI
BP 395
EP 417
DI 10.1007/s11219-011-9137-8
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 935GT
UT WOS:000303507800007
DA 2024-07-18
ER

PT J
AU Gao, KH
   Khoshgoftaar, TM
   Seliya, N
AF Gao, Kehan
   Khoshgoftaar, Taghi M.
   Seliya, Naeem
TI Predicting high-risk program modules by selecting the right software
   measurements
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Feature selection; Imbalanced data; Data sampling; Wrapper-based feature
   ranking; Performance metrics; Software quality classification
ID CLASSIFICATION; MODELS
AB A timely detection of high-risk program modules in high-assurance software is critical for avoiding the high consequences of operational failures. While software risk can initiate from external sources, such as management or outsourcing, software quality is adversely affected when internal software risks are realized, such as improper practice of standard software processes or lack of a defined software quality infrastructure. Practitioners employ various techniques to identify and rectify high-risk or low-quality program modules. Effectiveness of detecting such modules is affected by the software measurements used, making feature selection an important step during software quality prediction. We use a wrapper-based feature ranking technique to select the optimal set of software metrics to build defect prediction models. We also address the adverse effects of class imbalance (very few low-quality modules compared to high-quality modules), a practical problem observed in high-assurance systems. Applying a data sampling technique followed by feature selection is a relatively unique contribution of our work. We present a comprehensive investigation on the impact of data sampling followed by attribute selection on the defect predictors built with imbalanced data. The case study data are obtained from several real-world high-assurance software projects. The key results are that attribute selection is more efficient when applied after data sampling, and defect prediction performance generally improves after applying data sampling and feature selection.
C1 [Gao, Kehan] Eastern Connecticut State Univ, Willimantic, CT 06226 USA.
   [Khoshgoftaar, Taghi M.] Florida Atlantic Univ, Boca Raton, FL 33431 USA.
   [Seliya, Naeem] Univ Michigan, Dearborn, MI 48128 USA.
C3 Connecticut State University System; Eastern Connecticut State
   University; State University System of Florida; Florida Atlantic
   University; University of Michigan System; University of Michigan
RP Gao, KH (corresponding author), Eastern Connecticut State Univ, 83 Windham St, Willimantic, CT 06226 USA.
EM gaok@easternct.edu; khoshgof@fau.edu; nseliya@umich.edu
CR [Anonymous], MACHINE LEARNING
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1997, Lazy Learning
   [Anonymous], PATTERN RECOGNITION
   [Anonymous], 2000, Kluwer international series in software engineering
   [Anonymous], 2000, SUPPORT VECTOR MACHI
   [Anonymous], P 3 INT WORKSH PRED
   [Anonymous], P 2004 IEEE S COMP I
   [Anonymous], 2003, P 20 INT C MACH LEAR
   [Anonymous], J SYST SOFTWARE
   Arbela R, 2006, PATTERN RECOGN LETT, V27, P1619, DOI 10.1016/j.patrec.2006.03.008
   Barandela R, 2004, LECT NOTES COMPUT SC, V3138, P806
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Cieslak DA, 2006, 2006 IEEE INTERNATIONAL CONFERENCE ON GRANULAR COMPUTING, P732, DOI 10.1109/GRC.2006.1635905
   Davis Jesse, 2006, P 23 INT C MACH LEAR, P233, DOI [DOI 10.1145/1143844.1143874, 10.1145/1143844.1143874]
   Domingos P, 1997, MACH LEARN, V29, P103, DOI 10.1023/A:1007413511361
   Doraisamy Shyamala., 2008, International Society for Music Information Retrieval, P331
   Drummond Chris, 2003, WORKSH LEARN IMB DAT, V11, P1
   Elkan C., 2001, P 17 INT C MACHINE L, P239
   Engen V, 2008, INT J KNOWL-BASED IN, V12, P357
   Estabrooks A, 2004, COMPUT INTELL-US, V20, P18, DOI 10.1111/j.0824-7935.2004.t01-1-00228.x
   Forman G., 2003, Journal of Machine Learning Research, V3, P1289, DOI 10.1162/153244303322753670
   Gandhi R.A., 2007, 2 INT WORKSHOP REQUI, P6
   Guyon I., 2003, Journal of Machine Learning Research, V3, P1157, DOI 10.1162/153244303322753616
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   Haykin S., 1998, NEURAL NETWORKS COMP
   Hudepohl JP, 1996, IEEE SOFTWARE, V13, P56, DOI 10.1109/52.536459
   Ilczuk G, 2007, COMPUT CARDIOL, V34, P423, DOI 10.1109/CIC.2007.4745512
   Jansma PA, 2005, AEROSP CONF PROC, P4366
   John G. H., 1995, Uncertainty in Artificial Intelligence. Proceedings of the Eleventh Conference (1995), P338
   Kamal AHM, 2009, LECT N BIOINFORMAT, V5462, P259, DOI 10.1007/978-3-642-00727-9_25
   Khoshgoftaar TM, 2007, PROC INT C TOOLS ART, P310, DOI 10.1109/ICTAI.2007.46
   Khoshgoftaar TM, 2007, ICMLA 2007: SIXTH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS, PROCEEDINGS, P348, DOI 10.1109/ICMLA.2007.76
   Khoshgoftaar TM, 2005, INTELL DATA ANAL, V9, P347, DOI 10.3233/IDA-2005-9403
   Khoshgoftaar TM, 2009, INT J RELIAB QUAL SA, V16, P73, DOI 10.1142/S0218539309003307
   Khoshgoftaar TM, 2004, EMPIR SOFTW ENG, V9, P229, DOI 10.1023/B:EMSE.0000027781.18360.9b
   Kotsiantis S., 2006, Handling imbalanced datasets: A review. GESTS International Transactions on Computer Science and Engineering, V30
   LECESSIE S, 1992, APPL STAT-J ROY ST C, V41, P191
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Liu H, 2005, IEEE T KNOWL DATA EN, V17, P491, DOI 10.1109/TKDE.2005.66
   Liu H, 2004, ARTIF INTELL, V159, P49, DOI 10.1016/j.artint.2004.05.009
   Ping Yu, 2002, Proceedings of the Sixth European Conference on Software Maintenance and Reengineering, P99, DOI 10.1109/CSMR.2002.995794
   Platt J.C., 1999, FAST TRAINING SUPPOR, P185
   Rodriguez D, 2007, IRI 2007: PROCEEDINGS OF THE 2007 IEEE INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION, P667, DOI 10.1109/IRI.2007.4296696
   Runeson P., 2001, Product Focused Software Process Improvement. Third International Conference, PROFES 2001. Proceedings (Lecture Notes in Computer Science Vol.2188), P341
   Saeys Y, 2008, LECT NOTES ARTIF INT, V5212, P313, DOI 10.1007/978-3-540-87481-2_21
   Seiffert C, 2010, IEEE T SYST MAN CY A, V40, P185, DOI 10.1109/TSMCA.2009.2029559
   Seiffert C, 2009, INTEGR COMPUT-AID E, V16, P193, DOI 10.3233/ICA-2009-0314
   Sokolova M, 2006, LECT NOTES COMPUT SC, V4304, P1015
   Van Hulse J., 2007, P 24 INT C MACH LEAR, DOI [DOI 10.1145/1273496.1273614, 10.1145/1273496.1273614]
   Van Hulse J, 2009, DATA KNOWL ENG, V68, P1513, DOI 10.1016/j.datak.2009.08.005
   VOTTA LG, 1995, PROC INT CONF SOFTW, P277, DOI 10.1145/225014.225040
   WILSON DL, 1972, IEEE T SYST MAN CYB, VSMC2, P408, DOI 10.1109/TSMC.1972.4309137
   Witten I. H., 2005, DATA MINING PRACTICA
   Zhao XM, 2008, PROTEINS, V70, P1125, DOI 10.1002/prot.21870
NR 55
TC 30
Z9 32
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2012
VL 20
IS 1
BP 3
EP 42
DI 10.1007/s11219-011-9132-0
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 873ET
UT WOS:000298864600001
DA 2024-07-18
ER

PT J
AU Phalp, K
   Adlem, A
   Jeary, S
   Vincent, J
   Kanyaru, J
AF Phalp, Keith
   Adlem, Anita
   Jeary, Sheridan
   Vincent, Jonathan
   Kanyaru, John
TI The role of comprehension in requirements and implications for use case
   descriptions
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE Requirements; Comprehension; Discourse process; Use case; Specification;
   UML
ID PRONOUN RESOLUTION; PASSIVE VOICE; TEXT; COHERENCE; QUALITY; CHOICE;
   MODEL
AB Within requirements engineering, it is generally accepted that in writing specifications (or indeed any requirements phase document), one attempts to produce an artefact which will be simple to comprehend for the user. That is, whether the document is intended for customers to validate requirements, or engineers to understand what the design must deliver, comprehension is an important goal for the author. Indeed, advice on producing 'readable' or 'understandable' documents is often included in courses on requirements engineering. However, few researchers, particularly within the software engineering domain, have attempted either to define or to understand the nature of comprehension and its implications for guidance on the production of quality requirements. Therefore, this paper examines thoroughly the nature of textual comprehension, drawing heavily from research in discourse process, and suggests some implications for requirements (and other) software documentation. In essence, we find that the guidance on writing requirements, often prevalent within software engineering, may be based upon assumptions that are an oversimplification of the nature of comprehension. Hence, the paper examines guidelines which have been proposed, in this case for use case descriptions, and the extent to which they agree with discourse process theory, before suggesting refinements to the guidelines which attempt to utilise lessons learned from our richer understanding of the underlying discourse process theory. For example, we suggest subtly different sets of writing guidelines for the different tasks of requirements, specification and design.
C1 [Phalp, Keith; Adlem, Anita; Jeary, Sheridan; Vincent, Jonathan; Kanyaru, John] Bournemouth Univ, Software Syst Res Ctr, Poole BH12 5BB, Dorset, England.
C3 Bournemouth University
RP Phalp, K (corresponding author), Bournemouth Univ, Software Syst Res Ctr, Poole BH12 5BB, Dorset, England.
EM kphalp@bournemouth.ac.uk
RI Vincent, Jonathan/HHY-9994-2022
CR ACHOUR CB, 1999, 4 IEEE INT S REQ ENG
   ADLEM A, 2007, THESIS BOURNEMOUTH
   ANDA B, 2001, LNCS, V2072, P402, DOI DOI 10.1007/3-540-45337-7.21
   [Anonymous], 2003, HDB DISCOURSE PROCES
   BAMBERG M, 2003, HDB DISCOURSE PROCES
   Bray I.K., 2002, INTRO REQUIREMENTS E
   BRITTON BK, 1991, J EDUC PSYCHOL, V83, P329, DOI 10.1037/0022-0663.83.3.329
   COCKBURN A, 1995, J OBJECT ORIENTED PR
   Cockburn A., 2001, Writing effective use cases
   Cox K, 2004, J RES PRACT INF TECH, V36, P211
   COX K, 2001, 7 INT WORKSH REQ ENG
   Crystal D., 1997, CAMBRIDGE ENCY LANGU, V2nd
   CURTIS B, 1988, COMMUN ACM, V31, P1268, DOI 10.1145/50087.50089
   CURTIS B, 1989, 5 INT SOFTW PROC WOR
   FERREIRA F, 1994, J MEM LANG, V33, P715, DOI 10.1006/jmla.1994.1034
   Ferreira F, 2003, COGNITIVE PSYCHOL, V47, P164, DOI 10.1016/S0010-0285(03)00005-7
   Fletcher C.R., 1996, MODELS UNDERSTANDING, P141
   FOLTZ PW, 2003, HDB DISCOURSE PROCES, P289
   Gernsbacher M.A., 1996, MODELS UNDERSTANDING, P289, DOI DOI 10.1162/0898929053747658
   GIBBS R.W., 1996, MODELS UNDERSTANDING, P215
   Glass R.L., 1998, SOFTWARE RUNAWAYS
   Goldman S.R., 1996, Models of understanding text
   GORDON PC, 1995, MEM COGNITION, V23, P313, DOI 10.3758/BF03197233
   GORDON PC, 1993, COGNITIVE SCI, V17, P311, DOI 10.1207/s15516709cog1703_1
   GORDON PC, 1995, J MEM LANG, V34, P216, DOI 10.1006/jmla.1995.1010
   Graesser AC, 1997, ANNU REV PSYCHOL, V48, P163, DOI 10.1146/annurev.psych.48.1.163
   GRAESSER AC, 1994, PSYCHOL REV, V101, P371, DOI 10.1037/0033-295X.101.3.371
   GREENE SB, 1992, J EXP PSYCHOL LEARN, V18, P266, DOI 10.1037/0278-7393.18.2.266
   Harley Trevor., 2001, The Psychology of Language: From Data To Theory, V2nd
   JOHNSONLAIRD PN, 1968, BRIT J PSYCHOL, V59, P7, DOI 10.1111/j.2044-8295.1968.tb01110.x
   KINTSCH W, 1978, PSYCHOL REV, V85, P363, DOI 10.1037/0033-295X.85.5.363
   Kulak D., 2000, USE CASES REQUIREMEN, V1st
   Mannes B., 1987, COGNITION INSTRUCT, V4, P91, DOI [DOI 10.1207/S1532690XCI0402_2, https://doi.org/10.1207/s1532690xci04022, DOI 10.1207/S1532690XCI04022]
   Mannes S., 1996, Models of understanding text, P115
   McKoon G, 1996, J EXP PSYCHOL LEARN, V22, P919, DOI 10.1037/0278-7393.22.4.919
   McNamara DS, 1996, COGNITION INSTRUCT, V14, P1, DOI 10.1207/s1532690xci1401_1
   Moore JD, 2003, HANDBOOK OF DISCOURSE PROCESSES, P439
   PHALP K, 2010, APPL DISCOURSE PROCE
   PHALP K, 2007, SOFTWARE QUALITY J, V15
   PHALP K, 2002, 6 INT C EMP ASS SOFT
   Phalp KT, 2007, SOFTWARE QUAL J, V15, P69, DOI 10.1007/s11219-006-9006-z
   PHALP KT, 2003, 7 INT C EMP ASS EV S
   Rolland C, 1998, DATA KNOWL ENG, V25, P125, DOI 10.1016/S0169-023X(97)86223-4
   Schneider G., 2001, Applying Use Cases: A Practical Guide
   Stanfield RA, 2001, PSYCHOL SCI, V12, P153, DOI 10.1111/1467-9280.00326
   VAN-DEN-BROEK P., 1996, MODELS UNDERSTANDING, P165
   Zwaan RA, 2002, PSYCHOL SCI, V13, P168, DOI 10.1111/1467-9280.00430
   Zwaan RA, 2003, HANDBOOK OF DISCOURSE PROCESSES, P83
NR 48
TC 1
Z9 1
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 461
EP 486
DI 10.1007/s11219-010-9123-6
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500011
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Hämäläinen, N
   Markkula, J
AF Hamalainen, Niina
   Markkula, Jouni
TI Question framework for architectural description quality evaluation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Enterprise architecture; Software architecture; Architectural
   description; Documentation; Quality; Evaluation
ID STANDARD; MODELS
AB The challenges of architectural descriptions (AD), processes and practices have become increasingly important for enterprise information system and software developers. As the development and efficient usage of different architectures are highly dependent on the quality of their documentation, there is an evident need for practical means for AD evaluation. In this paper, we introduce a question framework for AD quality evaluation. The framework was developed in a joint study with industry and validated by the industry experts. This framework can be used as a practical tool for evaluating and further developing the quality of the AD within organisations.
C1 [Hamalainen, Niina] Aditro HRM Oy, Jyvaskyla 40101, Finland.
   [Markkula, Jouni] Univ Oulu, Dept Informat Proc Sci, Oulu 90014, Finland.
C3 University of Oulu
RP Hämäläinen, N (corresponding author), Aditro HRM Oy, POB 146, Jyvaskyla 40101, Finland.
EM Niina.Hamalainen@aditro.com; Jouni.Markkula@oulu.fi
RI Markkula, Jouni/D-1355-2014
FU Information Technology Research Institute (ITRI), University of
   Jyvaskyla; Finnish Funding Agency for Technology and Innovation (Tekes)
FX This paper is based on the work carried out during the AISA project
   (Quality Management of Enterprise and Software Architectures) organized
   by the Information Technology Research Institute (ITRI), University of
   Jyvaskyla. AISA project was financed by the Finnish Funding Agency for
   Technology and Innovation (Tekes) and participating companies: Elisa
   Oyj, OP Bank Group, IBM Finland, S Group, Tieturi, and A-Ware Oy. We
   wish to thank the participating companies for their co-operation. In
   addition, Tanja Ylimaki and Eetu Niemi participated in the validation of
   these results.
CR [Anonymous], 2007, 420102007 ISOIEC
   [Anonymous], P 14 INT C SOFTW ENG
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bernus P., 2003, Annual Reviews in Control, V27, P211, DOI 10.1016/j.arcontrol.2003.09.004
   Bolloju N, 2006, COMMUN ACM, V49, P108, DOI 10.1145/1139922.1139926
   Chapurlat V., 2003, Annual Reviews in Control, V27, P185, DOI 10.1016/j.arcontrol.2003.08.001
   CLAXTON JC, 2000, MEASURING QUALITY MO
   Clements P., 2002, DOCUMENTING SOFTWARE
   Fairbanks G, 2003, PROC INT CONF SOFTW, P548, DOI 10.1109/ICSE.2003.1201235
   Fu YJ, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P375
   Hargis G., 2004, Developing quality technical information: a handbook for writers and editors
   *IEEE, 14712000 IEEE
   International Organization for Standardization, 1994, 10746 ISOIEC
   Jonkers H, 2004, INT J COOP INF SYST, V13, P257, DOI 10.1142/S0218843004000985
   Kaisler S.H., 2005, HICSS'05, p224b, DOI DOI 10.1109/HICSS.2005.241
   KRUCHTEN PB, 1995, IEEE SOFTWARE, V12, P42, DOI 10.1109/52.469759
   Krueger RA, 2000, FOCUS GROUPS PRACTIC, V3rd
   Lankhorst M., 2005, ENTERPRISE ARCHITECT
   LI J, 2000, SOFTW QUAL J, V8, P241
   LINDLAND OI, 1994, IEEE SOFTWARE, V11, P42, DOI 10.1109/52.268955
   MAY N, 2005, P 6 AUSTR WORKSH SOF, P13
   McDavid DW, 1999, IBM SYST J, V38, P12, DOI 10.1147/sj.381.0012
   Nelson HJ, 2007, SOFTWARE QUAL J, V15, P213, DOI 10.1007/s11219-006-9011-2
   POLIKOFF I, 2005, J ENTERPRISE ARCHITE, V1, P45
   ROSEN M, 2006, CUTTER IT J, V19, P3
   Rozanski N., 2005, SOFTWARE SYSTEMS ARC
   Smart K. L., 2002, ACM Journal of Computer Documentation, V26, P130, DOI 10.1145/604228.604236
   Smolander K, 2002, NINTH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P131, DOI 10.1109/ECBS.2002.999831
   SONI D, 1995, PROC INT CONF SOFTW, P196, DOI 10.1145/225014.225033
   Steen MWA, 2004, EIGHTH IEEE INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P201, DOI 10.1109/EDOC.2004.1342516
   *TOGAF, 2007, OP GROUP ARCH FRAM V
   Worthen B., 1997, PROGRAM EVALUATION, V2nd
   Youngs R, 1999, IBM SYST J, V38, P32, DOI 10.1147/sj.381.0032
   ZACHMAN JA, 1987, IBM SYST J, V26, P276, DOI 10.1147/sj.263.0276
NR 34
TC 2
Z9 3
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2009
VL 17
IS 2
BP 215
EP 228
DI 10.1007/s11219-008-9068-1
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 428YB
UT WOS:000264886900008
DA 2024-07-18
ER

PT J
AU Zhang, ZY
   Kaipala, J
AF Zhang, Zheying
   Kaipala, Janne
TI A conceptual framework for component context specification and
   representation in a metaCASE environment
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Reuse; Component context; Design rationale; Hypertext; Metacase
AB A lack of design information can be a significant barrier for systems developers when developing and reusing a component. This paper tackles this problem by presenting and exemplifying the conceptual framework of component context and its hypertext representation in a metaCASE environment. It discusses the linking of contextual knowledge to components in systems analysis and design. The contextual knowledge includes the conceptual dependencies of component definition, reuse, and implementation, as well as the reasoning and rationale behind design and reuse processes. We also illustrate the hypertext approach to contextual knowledge representation that enables designers to express, record, explore, recognize, and negotiate their shared context within a metaCASE environment.
C1 [Zhang, Zheying] Univ Tampere, Dept Comp Sci, Tampere 33014, Finland.
   [Kaipala, Janne] HiQ Softplan, Espoo 02160, Finland.
C3 Tampere University
RP Zhang, ZY (corresponding author), Univ Tampere, Dept Comp Sci, Tampere 33014, Finland.
EM Zheying.Zhang@cs.uta.fi; Janne.Kaipala@hiq.fi
OI Zhang, Zheying/0000-0002-6205-4210
CR [Anonymous], 10 INT WORKSH SOFTW
   BAILIN S, 1992, KAPTUR TOOL PRESERVA
   BAILIN SC, 1990, P 5 ANN KNOWL BAS SO, P95
   BARBER KS, 1999, AUSTR J INFORMATION, V7, P75
   BARBER KS, 1999, 1999 INT C ART INT I
   Bratthall L, 2000, LECT NOTES COMPUT SC, V1840, P126
   Bubenko J. A.  Jr., 1995, Proceedings of the Second IEEE International Symposium on Requirements Engineering (Cat. No.95TH8040), P160, DOI 10.1109/ISRE.1995.512557
   CASTELLANI X, 1999, IFIP WG8 1 INT C INF, P235
   CONKLIN J, 1988, ACM T INFORM SYST, V6, P303, DOI 10.1145/58566.59297
   CREECH M, 1991, P HYP 91 C SAN ANT, P25
   EDWARDS A, 1997, P 8 ANN WORKSH I SOF
   FREITAG B, 1994, P 6 INT C ADV INF SY, P283
   Hooks I., 2001, Customer centered products: Creating successful products through smart requirements management
   Jarke M, 1998, COMMUN ACM, V41, P32, DOI 10.1145/290133.290145
   KAIPALA J, 1997, P C ADV INF SYST ENG
   Keller RK, 1998, PROC INT CONF SOFTW, P302, DOI 10.1109/ICSE.1998.671356
   Kelly S, 1996, LECT NOTES COMPUT SC, V1080, P1
   Kotonya G., 1998, Requirements engineering: processes and techniques
   LEE J, 1991, HUMAN COMPUTER INTER, V6, P251
   Lee J., 1990, Proceedings o f the 1990 ACM conference on Computer-supported cooperative work, P79
   LYYTINEN K, 1994, TR7 U JYV DEP COMP S
   Mann JJ, 1999, NEUROPSYCHOPHARMACOL, V21, pS99, DOI 10.1038/sj.npp.1395364
   MCCLURE C, 2001, SOFTWARE REUSE STAND
   MOHAN K, 2002, P 35 ANN HAW INT C S, P951
   MONK S, 1995, P 5 EUR SOFTW ENG C
   OinasKukkonen H, 1997, INFORM SOFTWARE TECH, V39, P391, DOI 10.1016/S0950-5849(97)00003-7
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Ramesh B, 2001, IEEE T SOFTWARE ENG, V27, P58, DOI 10.1109/32.895989
   ROBBINS JE, 1998, 1998 INT C INT US IN
   Rossi M, 2000, P 33 HAW INT C SYST
   SCHANK RC, 1972, COGNITIVE PSYCHOL, V3, P552, DOI 10.1016/0010-0285(72)90022-9
   SELVIN AM, 2000, KNOWLEDGE PROCESS MA, V9, P119
   SUTCLIFFE A, 1995, P S DES INT SYST PRO, P33
   Tracz W., 1993, SIGSOFT Software Engineering Notes, V18, P40, DOI 10.1145/159420.155837
   TRACZ W, 1995, P 7 ANN SOFTW TECHN
   TRACZ W, 1990, REUSE PRACTICE WORKS, P10
   WHITTLE B, 1995, ACM SIGSOFT SOFTWARE, V20, P76
   Zhang Z., 2001, Requirements Engineering, V6, P116, DOI 10.1007/s007660170009
   ZHANG Z, 2000, P 12 C ADV INF SYST, P340
   ZHANG Z, 2001, P WORKSH DOM SPEC VI
   ZHANG Z, 2003, P 2003 INF RES MAN A
   ZHANG Z, 2000, P 23 INF SYST RES SE, P523
NR 42
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2009
VL 17
IS 2
BP 151
EP 175
DI 10.1007/s11219-008-9069-0
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 428YB
UT WOS:000264886900004
DA 2024-07-18
ER

PT J
AU Lera, I
   Sancho, PP
   Juiz, C
   Puigjaner, R
   Zottl, J
   Haring, G
AF Lera, Isaac
   Sancho, Pere P.
   Juiz, Carlos
   Puigjaner, Ramon
   Zottl, Joachim
   Haring, Gunter
TI Performance assessment of intelligent distributed systems through
   software performance ontology engineering (SPOE)
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT International Conference on Software Engineering Research and Practice
   (SERP 05)
CY JUN 27-29, 2005
CL Las Vegas, NV
SP CSREA, Int Technol Inst, World Acad Sci & Informat Technol, HPCwire, GRIDtoday
DE performance engineering; ontology engineering; distributed systems
AB In the computer science community there is a growing interest in the field of Ambient Intelligent Systems. This systems surround their human users with computing and networking technology unobtrusively embedded in their environment. This technology is aimed to provide the users with useful information and to take action to make the environment more convenient for them. As the number of users increases the resources that make Ambient Intelligence possible can be easily saturated making the system unstable and projecting an image of poor QoS to the users. The main goal of this paper is to provide the means for the Ambient Intelligent Systems to monitor themselves and take corrective action automatically if performance starts to drop. Our approach uses a Performance Ontology that structures the knowledge about Software Performance Engineering, and a reasoning engine that acts like an expert system with the Performance Ontology as its foundation. The case study at the end shows the applicability of the developed techniques.
C1 Univ Illes Balears, Palma de Mallorca 07121, Spain.
   Univ Vienna, Inst Distributed & Multimedia Syst, A-1080 Vienna, Austria.
C3 Universitat de les Illes Balears; University of Vienna
RP Lera, I (corresponding author), Univ Illes Balears, Ctra Valldemossa,Km 7-5, Palma de Mallorca 07121, Spain.
EM isaac.lera@uib.es; perep.sancho@uib.es; cjuiz@uib.es; putxi@uib.es;
   joachim.zottl@univie.ac.at; guenter.haring@univie.ac.at
RI Lera, Isaac ILC/E-5467-2011; Juiz, Carlos/L-4018-2014
OI Lera, Isaac ILC/0000-0002-2826-5970; Juiz, Carlos/0000-0001-6517-5395
CR [Anonymous], 1991, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling
   Antoniou Grigoris, 2004, A Semantic Web Primer
   Beer W, 2003, LECT NOTES COMPUT SC, V2790, P1064
   Clements P., 2000, Tech. Rep. CMU/SEI-2000-TN-009
   Crowley J. L., 2002, UbiComp 2002: Ubiquitous Computing. 4th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2498), P117
   *DAML, 2002, OWS S SUPPL WEB SERV
   Davies J., 2002, SEMANTIC WEB ONTOLOG
   DESIMONE M, 1995, P CASCON 95 TOR CAN, P251
   Gomaa H., 1993, Software Design Methods for Concurrent and Real-Time Systems, V1st
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   HOBBS RJ, 2004, DAMLTIME
   *JADE, 2001, JAV AG DEV FRAM
   Kazman R, 1998, IEEE INT C ENG COMP, P68, DOI 10.1109/ICECCS.1998.706657
   KHEDR M, 2004, CONONTO
   KING PJB, 2000, TOOLS 00, P262
   MENASCE DA, 1998, WOSP 98, P63
   *OMG, 2002, UML PROF SCHED PERF
   *OMG, 2005, OBJ MAN GROUP OMG UN
   Sancho PP, 2004, LECT NOTES COMPUT SC, V3236, P278
   Uschold Michael, 1995, METHODOLOGY BUILDING
NR 20
TC 5
Z9 5
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2007
VL 15
IS 1
BP 53
EP 67
DI 10.1007/s11219-006-9004-1
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 132FD
UT WOS:000243927000005
DA 2024-07-18
ER

PT J
AU Abdollahpour, MM
   Ashtiani, M
   Bakhshi, F
AF Abdollahpour, Mohammad Mahdi
   Ashtiani, Mehrdad
   Bakhshi, Fatemeh
TI Automatic software code repair using deep learning techniques
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Code repair; Deep learning; Bug; Software defect; Bert; Transfer
   learning
AB In the multi-hundred-billion-dollar industry of software development, the debugging process is an expensive task for developers. So, much effort has been put into debugging automation. In the last decade, researchers have repaired codes according to predefined rules which are only effective in limited types of bugs. Through a lot of experiments, researchers have found that deep learning models are useful in code repair automation similar to the revolutionary results these approaches have produced in various other fields. To solve such a difficult problem, recent works focus on debugging bugs that appear on one line of code. It has been reported that this type of bug occurs at an average rate of 1 out of every 1600 lines of code in a software project, which is significant. The current research follows these approaches and introduces a novel automatic code-repair system. We have employed the transfer learning technique to reuse a pre-trained model on the problem. The proposed system is designed based on the encoder-decoder architecture. In the encoder, a new pre-trained Bert model named JavaBert is used. Then, the model was fine tuned. The decoder is a transformer with an autoregressive structure. ManySStuBs4J [1] dataset is used for evaluation purposes. The results of the evaluations show that the proposed system has higher accuracy and BLEU criteria than CodeBert and the baseline model. Baseline is a simple model that acts as a reference in machine learning studies and CodeBert is one of the most similar models to the proposed model. The bilingual evaluation understudy score (BLEU) improvement is between 0.04 and 0.16%, the accuracy improvement is between 0.64 and 5.81%, the recall improvement is between 1.08 and 9.2%, and the F-score improvement is between 3.27 and 6.18%.
C1 [Abdollahpour, Mohammad Mahdi; Ashtiani, Mehrdad; Bakhshi, Fatemeh] Iran Univ Sci & Technol, Sch Comp Engn, Tehran, Iran.
C3 Iran University Science & Technology
RP Ashtiani, M (corresponding author), Iran Univ Sci & Technol, Sch Comp Engn, Tehran, Iran.
EM m_abdollahpour@comp.iust.ac.ir; m_ashtiani@iust.ac.ir;
   fatemeh_bakhshi@comp.iust.ac.ir
CR Ahmed UZ, 2018, PROC INT CONF SOFTW, P78, DOI 10.1145/3183377.3183383
   Al-Ghamdi S, 2023, APPL SCI-BASEL, V13, DOI 10.3390/app13074225
   [Anonymous], 2003, KLUWER INT SER ENG C
   Anvik John, 2005, P 2005 OOPSLA WORKSH, P35
   Bahdanau D, 2016, Arxiv, DOI [arXiv:1409.0473, 10.48550/arXiv.1409.0473]
   Bengio Y., 2017, DEEP LEARNING
   Britton T, 2013, Reversible Debugging Software "Quantify the Time and Cost Saved Using Reversible Debuggers
   Carzaniga A., 2010, Proceedings of the eighteenth ACM SIGSOFT international symposium on Foundations of software engineering, P237
   Carzaniga A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P782, DOI 10.1109/ICSE.2013.6606624
   Chen ZM, 2021, IEEE T SOFTWARE ENG, V47, P1943, DOI 10.1109/TSE.2019.2940179
   De Sousa NT, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOPS (ASEW 2021), P90, DOI 10.1109/ASEW52652.2021.00028
   Debroy Vidroha, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P65, DOI 10.1109/ICST.2010.66
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   Gabel M, 2010, P ACM SIGSOFT S FDN, P147, DOI DOI 10.1145/1882291.1882315
   Ganaie MA, 2022, ENG APPL ARTIF INTEL, V115, DOI 10.1016/j.engappai.2022.105151
   Gupta R, 2017, AAAI CONF ARTIF INTE, P1345
   Jang Y, 2023, APPL SCI-BASEL, V13, DOI 10.3390/app13074614
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Karampatsis RM, 2020, IEEE WORK CONF MIN S, P573, DOI 10.1145/3379597.3387491
   Lamy-Poirier, 2021, ARXIV210602679
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Le X. B. D., 2016, 23 INT C SOFTWARE AN
   Liblit B, 2003, ACM SIGPLAN NOTICES, V38, P141, DOI 10.1145/780822.781148
   Liu Yinhan, 2019, ARXIV190711692
   Long F, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P727, DOI 10.1145/3106237.3106253
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Lutellier T., 2020, 29 ACM SIGSOFT INT S
   Mashhadi E, 2021, IEEE WORK CONF MIN S, P505, DOI 10.1109/MSR52588.2021.00063
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   Monperrus M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3105906
   Niu ZY, 2021, NEUROCOMPUTING, V452, P48, DOI 10.1016/j.neucom.2021.03.091
   Papineni K, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P311, DOI 10.3115/1073083.1073135
   Saha RK, 2017, IEEE INT CONF AUTOM, P648, DOI 10.1109/ASE.2017.8115675
   Sarker Iqbal H, 2021, SN Comput Sci, V2, P420, DOI 10.1007/s42979-021-00815-1
   Tassey G., 2002, EC IMPACTS INADEQUAT
   Tufano M, 2018, IEEE INT CONF AUTOM, P832, DOI 10.1145/3238147.3240732
   Vaswani A, 2017, ADV NEUR IN, V30
   Vrbancic G, 2020, IEEE ACCESS, V8, P196197, DOI 10.1109/ACCESS.2020.3034343
   Weiss C, 2007, P 4 INT WORKSH MIN S, P1, DOI [10.1109/MSR.2007.13, DOI 10.1109/MSR.2007.13]
   Wen M, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/3180155.3180233
   Xu QH, 2023, SENSORS-BASEL, V23, DOI 10.3390/s23083827
   Zhuang FZ, 2021, P IEEE, V109, P43, DOI 10.1109/JPROC.2020.3004555
NR 43
TC 0
Z9 0
U1 2
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2024
VL 32
IS 2
BP 361
EP 390
DI 10.1007/s11219-023-09653-1
EA NOV 2023
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UX1Q1
UT WOS:001096956000001
DA 2024-07-18
ER

PT J
AU Yilmaz, N
   Tarhan, AK
AF Yilmaz, Nebi
   Tarhan, Ayca Kolukisa
TI Matching terms of quality models and meta-models: toward a unified
   meta-model of OSS quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Quality evaluation; Quality measurement; Quality
   metrics; Meta-model; Quality model; Open-source software; OSS
ID OPEN-SOURCE SOFTWARE; MATURITY MODEL; FRAMEWORK; TRUSTWORTHINESS;
   TERMINOLOGY; SELECTION; OPENBRR
AB ContextIn the last two decades, open-source software (OSS) has gained increasing attention due to its voluntary supporters, growing community, and ease of accessibility in cloud repositories. Standardization in OSS quality is of vital importance as a communication vehicle for stakeholders in identifying and selecting high-quality products. Thus, meta-models help to define a standardized language and enable to propose quality models that can be used to perform comparable measurements.Objective Considering the lack of a comprehensive meta-model of OSS quality in the literature, there appears a need to see a more complete picture of OSS quality and to represent its concepts more formally. Therefore, in this study, it is aimed to develop a solid base for a comprehensive meta-model of OSS quality to create a common understanding among stakeholders.Method A systematic way has been followed toward developing a common structure, defining a consistent terminology and, finally, providing a meta-model of OSS quality. In this context, (1) the common structure of the quality models for OSS has been investigated, (2) the terms of the general-purpose meta-models of software quality have been analyzed based on the international standards, and (3) the terms of the quality models for OSS have been mapped with the elements of these meta-models.Results An initial meta-model of OSS quality, which employs a unified structure from the OSS quality models and eliminates the inconsistencies determined in the general-purpose meta-models of software quality, has been proposed and an implementation of this meta-model has been demonstrated.Conclusion This initial meta-model of OSS quality with a standard terminology can be taken as a guide by researchers who will propose or revise their OSS quality models. It will allow developing multiple OSS quality models with homogenous structure and terms, and also enable comparing the evaluation results obtained by these models.
C1 [Yilmaz, Nebi; Tarhan, Ayca Kolukisa] Hacettepe Univ, Software Engn Res Grp HUSE, Ankara, Turkey.
   [Yilmaz, Nebi] Hacettepe Univ Grad Sch Sci & Engn, Ankara, Turkey.
   [Tarhan, Ayca Kolukisa] Hacettepe Univ, Comp Engn Dept, Ankara, Turkey.
C3 Hacettepe University; Hacettepe University
RP Yilmaz, N (corresponding author), Hacettepe Univ, Software Engn Res Grp HUSE, Ankara, Turkey.; Yilmaz, N (corresponding author), Hacettepe Univ Grad Sch Sci & Engn, Ankara, Turkey.
EM yilmaz@cs.hacettepe.edu.tr
RI KOLUKISA, AYÇA/HKN-2117-2023
OI yilmaz, Nebi/0000-0002-0591-4667
CR Adewumi A, 2019, SOFTWARE PRACT EXPER, V49, P780, DOI 10.1002/spe.2682
   Adewumi A, 2016, SPRINGERPLUS, V5, DOI 10.1186/s40064-016-3612-4
   Adewumi A, 2013, IERI PROC, V4, P88, DOI 10.1016/j.ieri.2013.11.014
   Adnan Rawashdeh., 2006, J COMPUTER SCI, V2, P373, DOI DOI 10.3844/JCSSP.2006.373.381
   Ahmad N., 2013, Strategic Adoption of Technological Innovations, P50, DOI [10.4018/978-1-4666-2782-6.ch004, DOI 10.4018/978-1-4666-2782-6.CH004]
   AL-Badareen AB, 2011, COMM COM INF SC, V179, P46
   Al-dhaqm A, 2017, PLOS ONE, V12, DOI 10.1371/journal.pone.0170793
   Alfonzo O., 2008, 19 AUSTR C SOFTWARE, P26
   Alvaro A., 2010, ACM SIGSOFT Software Engineering Notes, V35, P1, DOI DOI 10.1145/1668862.1668863
   [Anonymous], 2019, 25020 ISOIEC
   [Anonymous], 2004, 155041 ISOIEC
   [Anonymous], 2008, 25010 ISOIEC
   [Anonymous], 2012, 141436 ISOIEC
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 2007, 15939 ISOIEC
   [Anonymous], 2002, 19761 ISOIEC
   [Anonymous], 4032012 WST
   [Anonymous], 1990, IEEE Std 610.12-1990, V42, P112, DOI [10.1109/IEEESTD.1990.101064, DOI 10.1109/IEEESTD.1990.101064]
   [Anonymous], 1999, 14598 ISOIEC
   Aversano L, 2013, INFORM SOFTWARE TECH, V55, P1260, DOI 10.1016/j.infsof.2013.01.007
   Barcellos M. P., 2013, P 28 ANN ACM S APPL, P311
   Barcellos MP, 2010, FRONT ARTIF INTEL AP, V209, P213, DOI 10.3233/978-1-60750-535-8-213
   Bertoa M., 2002, I D COMPUTACION, V1, P128
   Bertoa M., 2006, Ontologies for Software Engineering and Software Technology, P175, DOI DOI 10.1007/3-540-34518-3_6
   Beydoun G, 2009, IEEE T SOFTWARE ENG, V35, P841, DOI 10.1109/TSE.2009.34
   Boehm B. W., 1976, 2nd International Conference on Software Engineering, P592
   Briand LC, 2002, IEEE T SOFTWARE ENG, V28, P1106, DOI 10.1109/TSE.2002.1158285
   Chirinos L, 2005, J SYST SOFTWARE, V74, P207, DOI 10.1016/j.jss.2004.01.019
   Ciolkowski M, 2008, LECT NOTES COMPUT SC, V5338, P316
   Czarnacka-Chrobot B, 2009, FRONT ARTIF INTEL AP, V199, P187, DOI 10.3233/978-1-60750-049-0-187
   del Bianco V, 2009, INT FED INFO PROC, V299, P199
   Deprez JC, 2008, LECT NOTES COMPUT SC, V5089, P189, DOI 10.1007/978-3-540-69566-0_17
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   Duijnhouwer F. W., 2003, CAPGEMINI EXPERT LET
   Eghan EE, 2019, SOFTWARE QUAL J, V27, P969, DOI 10.1007/s11219-018-9428-4
   García F, 2007, INFORM SCIENCES, V177, P2570, DOI 10.1016/j.ins.2007.01.018
   García F, 2006, INFORM SOFTWARE TECH, V48, P631, DOI 10.1016/j.infsof.2005.07.001
   García F, 2009, KNOWL ENG REV, V24, P23, DOI 10.1017/S0269888909000125
   Georgiadou E, 2003, SOFTWARE QUAL J, V11, P313, DOI 10.1023/A:1025817312035
   Grady RB., 1992, PRACTICAL SOFTWARE M
   Haaland K., 2010, 4 FLOS INT WORKSH FR, P1
   Hasnain S, 2020, CASE STUD THERM ENG, V19, DOI 10.1016/j.csite.2020.100636
   Hauge O., 2009, ICSE WORKSHOP EMERGI
   HendersonSellers B, 1996, J OBJECT-ORIENT PROG, V9, P44
   IEEE, 1998, STAND SOFTW QUAL MET, P1061
   Isiklar G, 2007, COMPUT STAND INTER, V29, P265, DOI 10.1016/j.csi.2006.05.002
   ISO/IEC, 2008, 12207 ISOIEC
   Jadhav AS, 2011, J SYST SOFTWARE, V84, P1394, DOI 10.1016/j.jss.2011.03.034
   Karagiannis D, 2002, LECT NOTES COMPUT SC, V2455, P182
   Khatri SK, 2016, INT CONF RELI INFO, P114, DOI 10.1109/ICRITO.2016.7784936
   Khondoker R, 2014, 2014 WORLD CONGRESS ON COMPUTER APPLICATIONS AND INFORMATION SYSTEMS (WCCAIS), DOI 10.1109/wccais.2014.6916572
   Kim H. M., 1999, THESIS U TORONTO CAN
   Kitchenham BA, 2001, IEEE T SOFTWARE ENG, V27, P788, DOI 10.1109/32.950316
   Klas M., 2010, P 20 INT WORKSHOP SO
   Kuwata Y, 2014, PROCEDIA COMPUT SCI, V35, P1711, DOI 10.1016/j.procs.2014.08.264
   Lenarduzzi V, 2020, EUROMICRO CONF PROC, P437, DOI 10.1109/SEAA51224.2020.00076
   Maki-Asiala P, 2006, P INT COMP SOFTW APP, P189
   Mc Call J. A., 1977, FACTORS SOFTWARE QUA, VI
   McGarry John., 2002, Practical Software Measurement: Objective Information for Decision Makers
   Mens T, 2011, EUR CON SFTWR MTNCE, P351, DOI 10.1109/CSMR.2011.50
   Miguel J. P., 2014, ARXIV
   Mohagheghi, 2008, P NORDIC WORKSHOP MO
   Nistala P, 2019, 2019 IEEE/ACM INTERNATIONAL CONFERENCE ON SOFTWARE AND SYSTEM PROCESSES (ICSSP 2019), P125, DOI 10.1109/ICSSP.2019.00025
   Object Management Group (OMG) Meta Object Facility (MOF), 2019, COR SPEC VERS 2 5 1
   Orijin, 2006, METHOD QUALIFICATION
   Othman S. H., 2010, 21 AUSTRALASIAN C IN
   Othman SH, 2014, INFORM PROCESS MANAG, V50, P235, DOI 10.1016/j.ipm.2013.11.001
   Özcan EC, 2017, RENEW SUST ENERG REV, V78, P1410, DOI 10.1016/j.rser.2017.04.039
   Petrinja E, 2010, IFIP ADV INF COMM TE, V319, P224
   Raffoul E., 2008, P IASTED INT C SOFTW
   RAMAMOORTHY CV, 1984, COMPUTER, V17, P191, DOI 10.1109/MC.1984.1658970
   Raza A, 2012, COMPUT HUM BEHAV, V28, P1109, DOI 10.1016/j.chb.2012.01.018
   Rossi B, 2012, INFORM TECHNOL PEOPL, V25, P156, DOI 10.1108/09593841211232677
   Rout TP, 1999, PROC IEEE SOFTW ENGN, P67, DOI 10.1109/SESS.1999.766579
   Ruiz, 2003, C COMPUTER SCI OPERA
   Saaty T., 1980, The Analytic Hierarchy Process: Planning, Priority Setting, Resource Allocation
   Saaty T. L., 2008, INT J SERV SCI, V1, P83, DOI [10.1504/IJSSCI.2008.017590, DOI 10.1504/IJSSCI.2008.017590]
   Saaty TL., 2015, International Journal of the Analytic Hierarchy Process, V7, P589, DOI DOI 10.13033/IJAHP.V7I3.341
   Sadeghzadeh, 2017, J ELECT COMPUTER ENG, V6, P59, DOI DOI 10.22061/JECEI.2019.1076
   Samarthyam G, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P911, DOI 10.1109/ICSE.2013.6606640
   Samoladas I., 2008, IFIP INT C OPEN SOUR
   Sarrab M, 2014, ADV ENG SOFTW, V69, P1, DOI 10.1016/j.advengsoft.2013.12.001
   Siemens company, SIEMENS CO
   Software Engineering Institute, 2010, CMUSEI2010TR033
   Sohn H., 2015, INT J SOFT ENG APPL, V9, P1, DOI DOI 10.14257/IJSEIA.2015.9.6.01
   Soto M, 2009, INT SYMP EMP SOFTWAR, P499
   Stol K. J., 2010, P 3 INT WORKSHOP EME
   Suman M.W., 2014, INT J COMPUTER SCI I, V5, P5634
   Sung WJ, 2007, ALPIT 2007: PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON ADVANCED LANGUAGE PROCESSING AND WEB INFORMATION TECHNOLOGY, P515, DOI 10.1109/ALPIT.2007.81
   Taibi D, 2007, INT FED INFO PROC, V234, P173
   Tanriöver ÖÖ, 2011, COMPUT STAND INTER, V33, P448, DOI 10.1016/j.csi.2010.12.001
   Tassone Joseph, 2018, 2018 IEEE/ACIS 17th International Conference on Computer and Information Science (ICIS). Proceedings, P411, DOI 10.1109/ICIS.2018.8466436
   Thapar S. S., 2012, INT J COMPUTER APPL, V49
   Tzeng GH, 2011, MULTIPLE ATTRIBUTE DECISION MAKING: METHODS AND APPLICATIONS, P1
   Umm-e-Laila, 2017, PROCEDIA COMPUT SCI, V111, P348, DOI 10.1016/j.procs.2017.06.033
   Upadhyay N, 2011, COMM COM INF SC, V131, P398
   van Solingen R., 2002, Encyclopedia of Software Engineering, DOI [DOI 10.1002/0471028959.SOF142, 10.1002/0471028959.sof142]
   Wagner S., 2008, COST OPTIMISATION AN
   Wagner S, 2015, INFORM SOFTWARE TECH, V62, P101, DOI 10.1016/j.infsof.2015.02.009
   Wagner S, 2012, PROC INT CONF SOFTW, P1133, DOI 10.1109/ICSE.2012.6227106
   Wang XF, 2013, SCI WORLD J, DOI 10.1155/2013/202085
   Wang Y, 2020, SUSTAIN CITIES SOC, V52, DOI 10.1016/j.scs.2019.101861
   Wasserman A. I., 2017, IFIP INT C OPEN SOUR
   Wasserman M. P., 2006, 1 BRR RFC
   Yilmaz N., 2020, INT WORKSHOP SOFTWAR
   Yilmaz N, 2022, J SOFTW-EVOL PROC, V34, DOI 10.1002/smr.2458
NR 106
TC 1
Z9 1
U1 3
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 721
EP 773
DI 10.1007/s11219-022-09603-3
EA DEC 2022
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000900087500001
DA 2024-07-18
ER

PT J
AU Malgaonkar, S
   Licorish, SA
   Savarimuthu, BTR
AF Malgaonkar, Saurabh
   Licorish, Sherlock A.
   Savarimuthu, Bastin Tony Roy
TI Automatically generating taxonomy for grouping app reviews - a study of
   three apps
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE App reviews; Natural language processing; Contextual semantic
   similarity; Taxonomy; Classification
ID CLASSIFICATION
AB App reviews often reflect end-users' requests, issues or suggestions for supporting app maintenance and evolution. Hence, researchers have evaluated several classification approaches for identifying and classifying such app reviews. However, these classification approaches are driven by manually derived taxonomies. This is a limitation given the burden of human involvement, numerous app reviews and dependency on the availability of domain knowledge to perform classification. In this study, we develop and evaluate a novel approach towards the automatic generation of a dynamic taxonomy that groups related app reviews. Our approach uses natural language processing, feature engineering and word sense disambiguation to automatically generate the taxonomy. In a pilot study, we validated the feasibility of our proposed approach with app reviews extracted from the popular My Tracks app, where outcomes revealed a 72% match with a manual taxonomy generated from domain knowledge provided by humans. We then extended the scope of this study by validating the application of the automated taxonomy generation approach on app reviews belonging to TradeMe and Flutter apps. The outcomes revealed 80% and 71% match with the manual taxonomy of the latter two apps. Thus, our approach shows promise for rapidly supporting software maintenance and evolution.
C1 [Malgaonkar, Saurabh; Licorish, Sherlock A.; Savarimuthu, Bastin Tony Roy] Univ Otago, Dept Informat Sci, Dunedin, New Zealand.
C3 University of Otago
RP Malgaonkar, S (corresponding author), Univ Otago, Dept Informat Sci, Dunedin, New Zealand.
EM saurabhmalgaonkar@gmail.com; sherlock.licorish@otago.ac.nz;
   tony.savarimuthu@otago.ac.nz
OI Malgaonkar, Saurabh/0000-0001-6897-0335
FU Commerce Research Grant (CRG) at the Otago Business School
FX This work was partially funded by a Commerce Research Grant (CRG) at the
   Otago Business School.
CR Aggarwal Charu C, 2012, A survey of text clustering algorithms, P163, DOI [10.1007/978-1-4614-3223-4, DOI 10.1007/978-1-4614-3223-46]
   [Anonymous], 2009, P 12 C EUR CHAPT ASS, DOI DOI 10.3115/1609067.1609152
   Archak N, 2007, KDD-2007 PROCEEDINGS OF THE THIRTEENTH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P56
   Aslam N, 2020, IEEE ACCESS, V8, P185619, DOI 10.1109/ACCESS.2020.3029634
   Boehm B, 2001, PROC INT CONF SOFTW, P591, DOI 10.1109/ICSE.2001.919133
   Bollegala D, 2011, IEEE T KNOWL DATA EN, V23, P977, DOI 10.1109/TKDE.2010.172
   Boutkova E., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P303, DOI 10.1109/SPLC.2011.35
   Bruce, 1999, NAT LANG ENG, V5, P187, DOI 10.1017/S1351324999002181
   Brunetti G, 2000, COMPUT AIDED DESIGN, V32, P877, DOI 10.1016/S0010-4485(00)00076-2
   Bullinaria JA, 2007, BEHAV RES METHODS, V39, P510, DOI 10.3758/BF03193020
   Chaniotaki AM, 2021, IEEE WORK CONF MIN S, P190, DOI 10.1109/MSR52588.2021.00031
   Chen N, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P767, DOI 10.1145/2568225.2568263
   Ciurumelea A, 2018, PROC IEEE ACM INT C, P317, DOI 10.1145/3183440.3194988
   Cysneiros LM, 2004, IEEE T SOFTWARE ENG, V30, P328, DOI 10.1109/TSE.2004.10
   Dhinakaran VT, 2018, INT REQUIR ENG CONF, P170, DOI 10.1109/RE.2018.00026
   Di Sorbo A, 2017, PROC IEEE ACM INT C, P55, DOI 10.1109/ICSE-C.2017.5
   Di Sorbo A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P499, DOI 10.1145/2950290.2950299
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI [10.7551/mitpress/7287.001.0001, DOI 10.7551/MITPRESS/7287.001.0001]
   FLEISS JL, 1973, EDUC PSYCHOL MEAS, V33, P613, DOI 10.1177/001316447303300309
   Gao CY, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P35, DOI 10.1109/ISSRE.2015.7381797
   Gonzalez-Carvajal S., 2020, ARXIV PREPRINT ARXIV
   Illahi I, 2019, IEEE ACCESS, V7, P62042, DOI 10.1109/ACCESS.2019.2915604
   Jiang H, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3344158
   Jiang J, 1997, INTERNATIONAL CONFERENCE ON CONSUMER ELECTRONICS, 1997 DIGEST OF TECHNICAL PAPERS, P94
   Karov Y, 1998, COMPUT LINGUIST, V24, P41
   Kiremire A.R., 2011, The application of the Pareto principle in software engineering
   Ko Y., 2000, Proceedings of Twelfth International Conference on Software Engineering and Knowledge Engineering (SEKE 2000), Chicago, USA, P344
   Konkol M, 2015, EXPERT SYST APPL, V42, P3470, DOI 10.1016/j.eswa.2014.12.015
   KROPP RP, 1966, J EXP EDUC, V34, P69, DOI 10.1080/00220973.1966.11010940
   Licorish S. A., 2017, INT C EV ASS SOFTW E, P108
   Maalej W, 2016, REQUIR ENG, V21, P311, DOI 10.1007/s00766-016-0251-9
   Martinez-Gil J, 2014, ARTIF INTELL REV, V42, P935, DOI 10.1007/s10462-012-9349-8
   Mayring P., 2000, A companion to qualitative research, P266
   Mihalcea R., 2006, P 21 NAT C ART INT, V6, P775
   Minaee S, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3439726
   Pagano D, 2013, S VIS LANG HUM CEN C, P125, DOI 10.1109/RE.2013.6636712
   Panichella S, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P1023, DOI 10.1145/2950290.2983938
   Panichella S, 2015, PROC IEEE INT CONF S, P281, DOI 10.1109/ICSM.2015.7332474
   Pennington J., 2014, P 2014 C EMP METH NA, P1532
   Petrakis E. G. M., 2006, Journal of Digital Information Management, V4, P233
   Rohde D. L., 2006, COMMUN ACM, V8, P627
   Sánchez D, 2011, KNOWL-BASED SYST, V24, P297, DOI 10.1016/j.knosys.2010.10.001
   Sharma M, 2020, ALGO INTELL SY, P347, DOI 10.1007/978-981-15-0222-4_31
   Snijders R, 2014, INT CONF UTIL CLOUD, P614, DOI 10.1109/UCC.2014.96
   Vu, 2019, ARXIV190810816
   Yang Y., 1997, ICML, V97, P412
   Zhang M, 2019, IEEE ACCESS, V7, P30157, DOI 10.1109/ACCESS.2019.2892817
NR 47
TC 2
Z9 2
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 483
EP 512
DI 10.1007/s11219-021-09570-1
EA OCT 2021
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000712790900001
DA 2024-07-18
ER

PT J
AU Siavvas, M
   Kehagias, D
   Tzovaras, D
   Gelenbe, E
AF Siavvas, Miltiadis
   Kehagias, Dionysios
   Tzovaras, Dimitrios
   Gelenbe, Erol
TI A hierarchical model for quantifying software security based on static
   analysis alerts and software metrics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software Security; Software Quality Evaluation; Security Assessment
ID VULNERABILITIES; COMPLEXITY; DESIGN; TOOLS; BUGS
AB Despite the acknowledged importance of quantitative security assessment in secure software development, current literature still lacks an efficient model for measuring internal software security risk. To this end, in this paper, we introduce a hierarchical security assessment model (SAM), able to assess the internal security level of software products based on low-level indicators, i.e., security-relevant static analysis alerts and software metrics. The model, following the guidelines of ISO/IEC 25010, and based on a set of thresholds and weights, systematically aggregates these low-level indicators in order to produce a high-level security score that reflects the internal security level of the analyzed software. The proposed model is practical, since it is fully automated and operationalized in the form of a standalone tool and as part of a broader Computer-Aided Software Engineering (CASE) platform. In order to enhance its reliability, the thresholds of the model were calibrated based on a repository of 100 popular software applications retrieved from Maven Repository. Furthermore, its weights were elicited in a way to chiefly reflect the knowledge expressed by the Common Weakness Enumeration (CWE), through a novel weights elicitation approach grounded on popular decision-making techniques. The proposed model was evaluated on a large repository of 150 open-source software applications retrieved from GitHub and 1200 classes retrieved from the OWASP Benchmark. The results of the experiments revealed the capacity of the proposed model to reliably assess internal security at both product level and class level of granularity, with sufficient discretion power. They also provide preliminary evidence for the ability of the model to be used as the basis for vulnerability prediction. To the best of our knowledge, this is the first fully automated, operationalized and sufficiently evaluated security assessment model in the modern literature.
C1 [Siavvas, Miltiadis; Gelenbe, Erol] Imperial Coll London, London SW7 2AZ, England.
   [Siavvas, Miltiadis; Kehagias, Dionysios; Tzovaras, Dimitrios] Ctr Res & Technol Hellas, Thessaloniki, Greece.
   [Gelenbe, Erol] Polish Acad Sci, Inst Theoret & Appl Informat, Ul Baltycka 5, PL-44100 Gliwice, Poland.
C3 Imperial College London; Centre for Research & Technology Hellas; Polish
   Academy of Sciences; Institute of Theoretical & Applied Informatics of
   the Polish Academy of Sciences
RP Siavvas, M (corresponding author), Imperial Coll London, London SW7 2AZ, England.; Siavvas, M (corresponding author), Ctr Res & Technol Hellas, Thessaloniki, Greece.
EM m.siavvas16@imperial.ac.uk; diok@iti.gr; dimitrios.tzovaras@iti.gr;
   erol.gelenbe@imperial.ac.uk
RI Gelenbe, Erol/ABA-1077-2020; Tzovaras, Dimitrios/ABB-9576-2021;
   Kehagias, Dionysios/H-9091-2016
OI Tzovaras, Dimitrios/0000-0001-6915-6722; Kehagias,
   Dionysios/0000-0002-6912-3493
FU European Union's Horizon 2020 Research and Innovation Programme through
   SDK4ED project [780572]
FX This work is partially funded by the European Union's Horizon 2020
   Research and Innovation Programme through SDK4ED project under Grant
   Agreement No. 780572.
CR Abdulrazeg A. A., 2012, INT C CYB SEC CYB WA, P94, DOI DOI 10.1109/CYBERSEC.2012.6246129
   Alhazmi OH, 2007, COMPUT SECUR, V26, P219, DOI 10.1016/j.cose.2006.10.002
   Alshammari B., 2011, Proceedings of the 11th International Conference on Quality Software (QSIC 2011), P218, DOI 10.1109/QSIC.2011.31
   Alshammari Bandar, 2010, Proceedings of the 21st Australian Software Engineering Conference (ASWEC 2010), P55, DOI 10.1109/ASWEC.2010.34
   Alshammari B, 2009, INT CONF QUAL SOFTW, P11, DOI 10.1109/QSIC.2009.11
   Andress J, 2014, BASICS INFORM SECURI
   [Anonymous], 2008, The Cert C Secure Coding Standard. Sei
   Ansar SA, 2018, LECT NOTE DATA ENG, V4, P15, DOI 10.1007/978-981-10-4600-1_2
   Baggen R, 2012, SOFTWARE QUAL J, V20, P287, DOI 10.1007/s11219-011-9144-9
   Bagnara R, 2018, LECT NOTES COMPUT SC, V11002, P5, DOI 10.1007/978-3-319-99725-4_2
   Bakota T., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P243, DOI 10.1109/ICSM.2011.6080791
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Basso T, SOFTWARE ENG RESILIE, DOI [10.1007/978-3-030-30856-8_11, DOI 10.1007/978-3-030-30856-8_11]
   Beller M, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P470, DOI 10.1109/SANER.2016.105
   Boland T, 2012, COMPUTER, V45, P88, DOI 10.1109/MC.2012.345
   Carvalho M, 2014, IEEE SECUR PRIV, V12, P63, DOI 10.1109/MSP.2014.66
   Celik N, 2013, IEEE ANTENNAS PROP, P2016, DOI 10.1109/APS.2013.6711666
   Chess B, 2004, IEEE SECUR PRIV, V2, P76, DOI 10.1109/MSP.2004.111
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Chowdhury I., 2008, P 4 INT WORKSH SOFTW
   Chowdhury I., 2010, P 2010 ACM S APPL CO
   Chowdhury I, 2011, J SYST ARCHITECT, V57, P294, DOI 10.1016/j.sysarc.2010.06.003
   Cohen J., 1988, STAT POWER ANAL BEHA
   Colombo R.T., 2012, SIGSOFT SOFTW ENG NO, V37, P1, DOI DOI 10.1145/2382756.2382781
   Cunningham W., 1993, OOPS MESSENGER, V4, P29, DOI DOI 10.1145/157710.157715
   Dayanandan U, 2018, 3D RES, V9, DOI 10.1007/s13319-018-0183-x
   Deissenboeck F., 2009, P INT C SOFTW ENG
   DeMarco T, 1986, CONTROLLING SOFTWARE
   di Biase M, 2019, 2019 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT 2019), P113, DOI 10.1109/TechDebt.2019.00030
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   EDWARDS W, 1994, ORGAN BEHAV HUM DEC, V60, P306, DOI 10.1006/obhd.1994.1087
   Felderer M, 2016, ADV COMPUT, V101, P1, DOI 10.1016/bs.adcom.2015.11.003
   Ferenc R, 2019, INT WORK REAL ARTIF, P8, DOI 10.1109/RAISE.2019.00010
   Goseva-Popstojanova K, 2015, INFORM SOFTWARE TECH, V68, P18, DOI 10.1016/j.infsof.2015.08.002
   Hahn A, 2018, HELIYON, V4, DOI 10.1016/j.heliyon.2018.e00795
   Hatzivasilis G, 2016, IEEE SOFTWARE, V33, P46, DOI 10.1109/MS.2016.61
   Heckman S., 2013, P 9 INT C PRED MOD S
   Heckman S, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P161, DOI 10.1109/ICST.2009.45
   Heitlager I, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P30, DOI 10.1109/QUATIC.2007.8
   Dam HK, 2021, IEEE T SOFTWARE ENG, V47, P67, DOI 10.1109/TSE.2018.2881961
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Howard M, 2005, COMPUTER SECURITY IN THE 21ST CENTURY, P109, DOI 10.1007/0-387-24006-3_8
   Howard M., 2007, US patent, Patent No. [7299497 B2, 7299497]
   Howard M., 2010, 24 Deadly Sins of Software Security
   Howard M., 2006, SECURITY DEV LIFECYC
   ISO/IEC, 2011, ISO/IEC 25010:2011 Systems and software engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality models
   ISO/IEC, 2013, 270012013 ISOIEC
   Izurieta C., 2019, P 2 INT C TECHN DEBT
   Izurieta C, 2018, 2018 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT), P138, DOI 10.1145/3194164.3194167
   Jankovic M., 2019, 15 CHIN EUR INT S SO
   Jimenez M, 2016, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2016.15
   Jiménez M, 2019, ADV ENG MATER, V21, DOI 10.1002/adem.201801350
   Jin C, 2014, APPL SOFT COMPUT, V15, P113, DOI 10.1016/j.asoc.2013.10.016
   Johnson B, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P672, DOI 10.1109/ICSE.2013.6606613
   Kalouptsoglou I, 2020, LECT NOTES COMPUT SC, V12252, P877, DOI 10.1007/978-3-030-58811-3_62
   Kehagias Dionysios, 2021, SN Comput Sci, V2, P23, DOI 10.1007/s42979-020-00404-8
   Khurshid S., 2019, INT J INFORM TECHNOL
   Krsul I., 1998, THESIS
   Lai S. T., 2010, P 2010 2 WRI WORLD C
   Li BD, 2018, J SYST SOFTWARE, V140, P3, DOI 10.1016/j.jss.2018.02.040
   Luszcz J., 2018, NETWORK SECURITY, V2018, P5, DOI DOI 10.1016/S1353-4858(18)30005-9
   Manadhata PK, 2011, IEEE T SOFTWARE ENG, V37, P371, DOI 10.1109/TSE.2010.60
   McGraw G., 2006, 2006 17th IEEE International Symposium on Software Reliability Engineering
   McGraw G, 2008, COMPUTER, V41, P107, DOI 10.1109/MC.2008.514
   Medeiros N, 2018, IEEE PAC RIM INT SYM, P84, DOI 10.1109/PRDC.2018.00019
   Medeiros N, 2017, PROC INT SYMP SOFTW, P216, DOI 10.1109/ISSRE.2017.11
   Medeiros N, 2017, 2017 IEEE 1ST INTERNATIONAL CONFERENCE ON EDGE COMPUTING (IEEE EDGE), P220, DOI 10.1109/IEEE.EDGE.2017.39
   Mohammed NM, 2016, COMP STAND INTERF
   Morrison P, 2018, INFORM SOFTWARE TECH, V102, P146, DOI 10.1016/j.infsof.2018.05.011
   Moshtari S., 2016, P 31 ANN ACM S APPL, P1415, DOI DOI 10.1145/2851613.2851777
   Moshtari S, 2013, COMPUT FRAUD SECUR, P8, DOI 10.1016/S1361-3723(13)70045-9
   Mumtaz H, 2018, INFORM SOFTWARE TECH, V96, P112, DOI 10.1016/j.infsof.2017.11.010
   Munaiah N, 2017, EMPIR SOFTW ENG, V22, P1305, DOI 10.1007/s10664-016-9447-3
   Munaiah N, 2016, SPRO'16: PROCEEDINGS OF THE 2016 ACM WORKSHOP ON SOFTWARE PROTECTION, P3, DOI 10.1145/2995306.2995311
   Muske T, 2016, IEEE INT WORK C SO, P157, DOI 10.1109/SCAM.2016.25
   NIST, 2018, 800160 NIST SP
   Nunes P, 2019, COMPUTING, V101, P161, DOI 10.1007/s00607-018-0664-z
   Rindell K., 2019, INT WORKSH SEC SOFTW
   Rindell K, 2019, 14TH INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY (ARES 2019), DOI 10.1145/3339252.3340338
   Roumani Y, 2016, INT J INFORM MANAGE, V36, P987, DOI 10.1016/j.ijinfomgt.2016.05.016
   Ruthruff JR, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P341, DOI 10.1145/1368088.1368135
   Saaty T. L., 2008, INT J SERV SCI, V1, P83, DOI [10.1504/IJSSCI.2008.017590, DOI 10.1504/IJSSCI.2008.017590]
   Scandariato R, 2014, IEEE T SOFTWARE ENG, V40, P993, DOI 10.1109/TSE.2014.2340398
   Sentilles S., 2018, 6 INT WORKSH QUANT A
   Shin W, 2014, INT CONF DIGIT INFO, P275, DOI 10.1109/DICTAP.2014.6821695
   Shin Y., 2008, P 4 ACM WORKSH QUAL
   Shin Y, 2011, IEEE T SOFTWARE ENG, V37, P772, DOI 10.1109/TSE.2010.81
   Shin Y, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P315
   Siavvas M., 2017, QATCH ADAPTIVE FRAME
   Siavvas M., 2019, 9 INT C INF SOC TECH
   Siavvas M., 2018, 2018 IEEE 9 INT C IN
   Siavvas M., 2019, P 15 CHIN EUR INT S
   Siavvas M, 2020, LECT NOTES COMPUT SC, V12252, P1035, DOI 10.1007/978-3-030-58811-3_73
   Siavvas M, 2022, ENTERP INF SYST-UK, V16, DOI 10.1080/17517575.2020.1824017
   Siavvas M, 2017, PROCEEDINGS 2017 INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND COMPUTATIONAL INTELLIGENCE (CSCI), P916, DOI 10.1109/CSCI.2017.159
   Siavvas M, 2018, COMM COM INF SC, V821, P142, DOI 10.1007/978-3-319-95189-8_13
   Spearman C, 1904, AM J PSYCHOL, V15, P72, DOI 10.2307/1412159
   Stuckman J, 2017, IEEE T RELIAB, V66, P17, DOI 10.1109/TR.2016.2630503
   Sultana KZ, 2019, SOFTWARE QUAL J, V27, P5, DOI 10.1007/s11219-017-9397-z
   Sultana KZ, 2017, IEEE HI ASS SYS ENGR, P69, DOI 10.1109/HASE.2017.18
   Tang YM, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P27, DOI 10.1109/QRS.2015.15
   Theisen C, 2018, INFORM SOFTWARE TECH, V104, P94, DOI 10.1016/j.infsof.2018.07.008
   Vale G, 2019, SOFTWARE QUAL J, V27, P275, DOI 10.1007/s11219-018-9405-y
   Verendel V, 2009, NEW SECURITY PARADIGMS WORKSHOP 2009, PROCEEDINGS, P37
   Wagner S., 2013, SOFTWARE PRODUCT QUA
   Wagner S, 2015, INFORM SOFTWARE TECH, V62, P101, DOI 10.1016/j.infsof.2015.02.009
   Wagner S, 2012, PROC INT CONF SOFTW, P1133, DOI 10.1109/ICSE.2012.6227106
   Walden J, 2012, IEEE SECUR PRIV, V10, P32, DOI 10.1109/MSP.2012.1
   Walden J, 2009, INT SYMP EMP SOFTWAR, P546
   Whitman M. E., 2011, PRINCIPLES INFORM SE
   Wolff Eberhard, 2016, Microservices: Flexible Software Architecture
   Zafar S, 2015, SOFTWARE QUAL J, V23, P29, DOI 10.1007/s11219-013-9223-1
   Zhang MY, 2019, IEEE T INF FOREN SEC, V14, P2315, DOI 10.1109/TIFS.2019.2895963
NR 113
TC 11
Z9 12
U1 2
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 431
EP 507
DI 10.1007/s11219-021-09555-0
EA MAY 2021
PG 77
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000650822500001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gadelha, R
   Vieira, L
   Monteiro, D
   Vidal, F
   Maia, PH
AF Gadelha, Romulo
   Vieira, Lucas
   Monteiro, Davi
   Vidal, Felipe
   Maia, Paulo Henrique
TI Scen@rist: an approach for verifying self-adaptive systems using runtime
   scenarios
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Self-adaptive systems; Runtime scenarios; Runtime verification;
   Systematic mapping study; Model checking; Message sequence chart
ID QUANTITATIVE VERIFICATION; BEHAVIORAL-MODELS; SEQUENCE CHARTS;
   RECONFIGURATION; VALIDATION; RUN.TIME
AB Traditional runtime quantitative verification approaches for self-adaptive systems usually rely on the use of state-transition models to describe the system behaviour and check property violation at runtime. More recently, some approaches have advocated the use of scenarios as a strategy for representing both the normal and adaptive system behaviour. However, the use of scenarios as a runtime entity that drives the system adaptation is still a challenge since many research issues regarding the use of scenarios to support analysis for enabling self-adjustment at runtime in software systems remain open. The aim of this paper is twofold. Firstly, we investigate the use of scenario-based approaches in self-adaptive systems via a systematic mapping study. Secondly, we introduce Scen@rist, an approach that uses scenarios as runtime entities for verifying self-adaptive systems. The approach consists of monitoring a running self-adaptive system, annotating its scenario-based behaviour specification with the probability of transitions between scenarios, and then verifying whether a set of reachability properties hold. This is performed by translating the scenario-based models and properties in their probabilistic state-based counterparts and applying a model checking technique. The applicability of the proposed tool has been demonstrated by two self-adaptive service-based systems taken from the literature.
C1 [Gadelha, Romulo; Vieira, Lucas; Vidal, Felipe; Maia, Paulo Henrique] State Univ Ceara UECE, Fortaleza, Ceara, Brazil.
   [Monteiro, Davi] Univ Limerick, Lero, Limerick, Ireland.
C3 Universidade Estadual do Ceara; University of Limerick
RP Maia, PH (corresponding author), State Univ Ceara UECE, Fortaleza, Ceara, Brazil.
EM pauloh.maia@uece.br
RI Maia, Paulo/KJL-0896-2024
FU Coordination for the Improvement of Higher Education Personnel - Brazil
   (CAPES) [001]; CNPq/Brazil [Universal 438783/2018-2]; Science Foundation
   Ireland [13/RC/2094]; European Regional Development Fund through the
   Southern & Eastern Regional Operational Programme
FX This work was financed in part by the Coordination for the Improvement
   of Higher Education Personnel -Brazil (CAPES) - Finance Code 001. This
   work was also partially supported by CNPq/Brazil under grant Universal
   438783/2018-2 and by Science Foundation Ireland grant 13/RC/2094 and
   co-funded under the European Regional Development Fund through the
   Southern & Eastern Regional Operational Programme to Lero -the Irish
   Software Research
CR Abushark Y, 2017, J SYST SOFTWARE, V131, P266, DOI 10.1016/j.jss.2017.05.098
   Ali Nour, 2017, P S APPL COMP MARR M, P1102, DOI [10.1145/3019612.3019751, DOI 10.1145/3019612.3019751]
   Amyot D, 2003, TELECOMMUN SYST, V24, P61, DOI 10.1023/A:1025890110119
   Andersson Jesper, 2013, Software Engineering Processes Systems, P51, DOI DOI 10.1007/978-3-642-35813-53
   André P, 2017, LECT NOTES COMPUT SC, V10466, P124, DOI 10.1007/978-3-319-66176-6_9
   Aniculaesei A, 2018, PROCEEDINGS 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR AI IN AUTONOMOUS SYSTEMS (SEFAIAS), P23, DOI 10.1145/3194085.3194091
   [Anonymous], 2012, WEB INFORM SYSTEMS E
   [Anonymous], 1962, Schriften des IIM
   [Anonymous], 2013, SOFTWARE ENG SELF AD
   [Anonymous], 1999, PROBMIV 98 1 INT WOR
   [Anonymous], 2011, LONDON
   Arcaini P, 2017, ACM T AUTON ADAP SYS, V11, DOI 10.1145/3019598
   ATIR Y., 2007, P 2007 SUMMER COMPUT, P437, DOI [10.5555/1357910, DOI 10.5555/1357910]
   Baresi L, 2007, IET SOFTW, V1, P219, DOI 10.1049/iet-sen:20070027
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bencomo N, 2013, COMPUTING, V95, P167, DOI 10.1007/s00607-012-0224-x
   Berkman-Chardon A, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P161, DOI [10.1109/MobileSoft.2016.040, 10.1145/2897073.2897080]
   Blair G, 2009, COMPUTER, V42, P22, DOI 10.1109/MC.2009.326
   Braberman Victor A., 2015, P 1 INT WORKSH CONTR, P9, DOI [10.1145/2804337.2804339, DOI 10.1145/2804337.2804339]
   Brugali D, 2018, 2018 SECOND IEEE INTERNATIONAL CONFERENCE ON ROBOTIC COMPUTING (IRC), P129, DOI 10.1109/IRC.2018.00027
   Buhr R.J. A., 1996, USE CASE MAPS OBJECT
   Calinescu Radu, 2017, Software Engineering for Self-Adaptive Systems III. Assurances. International Seminar. Revised Selected and Invited Papers: LNCS 9640, P223, DOI 10.1007/978-3-319-74183-3_8
   Calinescu R, 2013, IEEE INT CONF AUTOM, P734, DOI 10.1109/ASE.2013.6693145
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Cámara J, 2017, LECT NOTES COMPUT SC, V10475, P3, DOI 10.1007/978-3-319-65831-5_1
   Caporuscio M, 2007, J SYST SOFTWARE, V80, P455, DOI 10.1016/j.jss.2006.07.039
   Carioni A, 2008, LECT NOTES COMPUT SC, V5238, P71
   Castañeda L, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P49, DOI 10.1145/2593929.2593942
   Chai M, 2014, LECT NOTES COMPUT SC, V8734, P48, DOI 10.1007/978-3-319-11164-3_5
   Cheng Betty H. C., 2014, Models@run.time. Foundations, Applications, and Roadmaps. LNCS: 8378, P101
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Clarke EM, 1999, MODEL CHECKING, P1
   Combes P, 2008, SOFTW SYST MODEL, V7, P157, DOI 10.1007/s10270-007-0069-5
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   de Lemos R., 2013, Lecture Notes in Computer Science, V7475, P1, DOI DOI 10.1007/978-3-642-35813-5_1
   Di Nitto E, 2008, AUTOMAT SOFTW ENG, V15, P313, DOI 10.1007/s10515-008-0032-x
   Ding ZH, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY COMPANION (QRS-C), P610, DOI 10.1109/QRS-C.2017.134
   Ding ZH, 2016, IEEE T INTELL TRANSP, V17, P3330, DOI 10.1109/TITS.2016.2518745
   Edwards R, 2018, 2018 IEEE/ACM 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P12, DOI 10.1145/3194133.3194142
   Eitan N, 2011, PROC INT C TOOLS ART, P685, DOI 10.1109/ICTAI.2011.109
   Fahland D, 2008, INFORM BERICHTE HUMB
   Fahland D, 2009, LECT NOTES COMPUT SC, V5606, P223, DOI 10.1007/978-3-642-02424-5_14
   Fikry A, 2013, 2013 IEEE BUSINESS ENGINEERING AND INDUSTRIAL APPLICATIONS COLLOQUIUM (BEIAC 2013), P34
   Filieri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P341, DOI 10.1145/1985793.1985840
   Fisher J., 2005, COMPUTATIONAL METHOD, P236
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Georgas J.C., 2008, Proceedings of the 2008 International Workshop on Software Engineering for Adaptive and Self- managing Systems, P105
   Ghezzi C., 2012, 2012 7th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, P145, DOI 10.1109/SEAMS.2012.6224401
   Go K., 2004, Interactions, V11, P45, DOI 10.1145/1029036.1029037
   Goldsby H.J., 2008, Proceedings of the 10th Annual Conference on Genetic and Evolutionary Computation, P1751, DOI DOI 10.1145/1389095.1389434
   Goldsby HJ, 2008, LECT NOTES COMPUT SC, V5002, P212
   Goldsby HJ, 2008, FIFTEENTH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P36, DOI 10.1109/ECBS.2008.22
   Goldsby HJ, 2008, LECT NOTES COMPUT SC, V5301, P568, DOI 10.1007/978-3-540-87875-9_40
   Gordon M, 2009, LECT NOTES COMPUT SC, V5449, P456, DOI 10.1007/978-3-642-00382-0_37
   Greenyer J., 2015, CEUR WORKSHOP P, V1474, P71
   Gulia S, 2016, 2016 6TH INTERNATIONAL CONFERENCE - CLOUD SYSTEM AND BIG DATA ENGINEERING (CONFLUENCE), P641, DOI 10.1109/CONFLUENCE.2016.7508197
   Harel D., 2003, UML for Real: Design of Embedded Real-Time Systems, P77, DOI [DOI 10.1007/0-306-48738-1_4, 10.1007/0-306-48738-1, DOI 10.1007/0-306-48738-1]
   Harel D, 2008, SOFTW SYST MODEL, V7, P237, DOI 10.1007/s10270-007-0054-z
   Hermans F, 2009, LECT NOTES COMPUT SC, V5795, P423, DOI 10.1007/978-3-642-04425-0_33
   Hinton A, 2006, LECT NOTES COMPUT SC, V3920, P441
   Horanyi G., 2013, SAFECOMP 2013 WORKSH
   Jiao WP, 2013, J SYST SOFTWARE, V86, P1891, DOI 10.1016/j.jss.2013.02.057
   Kam N, 2004, NAT COMPUT SER, P151
   Katoen JP, 2005, INT CONF QUANT EVAL, P243, DOI 10.1109/QEST.2005.2
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Khalastchi E, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3146389
   Kim D, 2009, 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P76, DOI 10.1109/SEAMS.2009.5069076
   Kitchenham Barbara, 2012, 16th International Conference on Evaluation & Assessment in Software Engineering (EASE 2012), P126, DOI 10.1049/ic.2012.0016
   Kitchenham B., 2015, Evidence-Based Software Engineering and Systematic Reviews
   Kitchenham B, 2013, INFORM SOFTWARE TECH, V55, P2049, DOI 10.1016/j.infsof.2013.07.010
   Kitchenham Barbara, 2007, TECH REP
   Kitchenham BA, 2011, INFORM SOFTWARE TECH, V53, P638, DOI 10.1016/j.infsof.2010.12.011
   Knauss A, 2017, PROC IEEE ACM INT C, P328, DOI 10.1109/ICSE-C.2017.67
   Kof L, 2008, INT REQUIR ENG CONF, P331, DOI 10.1109/RE.2008.12
   Krupitzer C, 2015, PERVASIVE MOB COMPUT, V17, P184, DOI 10.1016/j.pmcj.2014.09.009
   Kugler H, 2013, P IEEE INT C E-SCI, P317, DOI 10.1109/eScience.2013.41
   La Manna VP, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P63, DOI 10.1109/SEAMS.2013.6595493
   Letier E, 2005, PROC INT CONF SOFTW, P382
   Lu T, 2012, J COMPUT, V7, P207, DOI 10.4304/jcp.7.1.207-217
   Luckey Markus, 2011, PROCEEDING 6 INT S S, P30, DOI [10.1145/1988008.1988014, DOI 10.1145/1988008.1988014]
   Magee Jeff., 2006, CONCURRENCY STATE MO
   Maoz S, 2009, COMPUTER, V42, P28, DOI 10.1109/MC.2009.336
   Mason P. A. J., 2009, 2009 6th International Conference on Electrical Engineering/Electronics, Computer, Telecommunications and Information Technology (ECTI-CON), P722, DOI 10.1109/ECTICON.2009.5137149
   Matevska J, 2007, EUROMICRO CONF PROC, P137
   Monteiro Barbosa Davi, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P24, DOI 10.1109/SEAMS.2017.18
   Morin B, 2009, COMPUTER, V42, P44, DOI 10.1109/MC.2009.327
   Moshirpour Mohammad, 2010, 2010 IEEE International Conference on Information Reuse & Integration (IRI 2010), P63, DOI 10.1109/IRI.2010.5558962
   Muniz L. L., 2015, ICEIS
   Olaechea R, 2018, 2018 IEEE/ACM 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P69, DOI 10.1145/3194133.3194143
   OMG, 2017, OMG UN MOD LANG
   Oreizy P, 1999, IEEE INTELL SYST APP, V14, P54, DOI 10.1109/5254.769885
   Perez B, 2011, ELECTRON NOTES THEOR, V281, P113, DOI 10.1016/j.entcs.2011.11.029
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   Pike L., 2012, LNCS, P310, DOI DOI 10.1007/978-3-642-29860-8_23
   Rodrigues G, 2005, LECT NOTES COMPUT SC, V3442, P111, DOI 10.1007/978-3-540-31984-9_9
   Rolland C., 1998, Requirements Engineering, V3, P23, DOI 10.1007/BF02802919
   Sadot A, 2008, IEEE ACM T COMPUT BI, V5, P223, DOI 10.1109/TCBB.2007.1076
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Sarmiento Edgar, 2015, 17th International Conference on Enterprise Information Systems (ICEIS 2015). Proceedings, P494
   Sitou W, 2007, P INT COMP SOFTW APP, P593
   Szvetits M, 2016, SOFTW SYST MODEL, V15, P31, DOI 10.1007/s10270-013-0394-9
   Uchitel S, 2003, IEEE T SOFTWARE ENG, V29, P99, DOI 10.1109/TSE.2003.1178048
   Uchitel S, 2013, COMPUT SCI-RES DEV, V28, P279, DOI 10.1007/s00450-012-0233-1
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P1089, DOI 10.1109/32.738341
   Vogel T., 2009, PROC 6 INT C AUTONOM, P67
   Vrbaski Mira., 2012, P 7 WORKSHOP MODELS, P3, DOI DOI 10.1145/2422518.2422520
   Waignier G, 2009, LECT NOTES COMPUT SC, V5581, P1, DOI 10.1007/978-3-642-02351-4_1
   Wang YQ, 2009, AUTOMAT SOFTW ENG, V16, P3, DOI 10.1007/s10515-008-0042-8
   Weyns Danny, 2017, Software Engineering for Self-Adaptive Systems III. Assurances. International Seminar. Revised Selected and Invited Papers: LNCS 9640, P31, DOI 10.1007/978-3-319-74183-3_2
   Weyns D, 2015, 2015 IEEE/ACM 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P88, DOI 10.1109/SEAMS.2015.27
   Whittle J, 2004, NASA MONO SYST SOFTW, P159
   Zeng LZ, 2004, IEEE T SOFTWARE ENG, V30, P311, DOI 10.1109/TSE.2004.11
   Zhang PC, 2018, INT J SOFTW ENG KNOW, V28, P239, DOI 10.1142/S0218194018500080
   Zhang PC, 2011, SOFTWARE PRACT EXPER, V41, P841, DOI 10.1002/spe.1038
   Zhu YL, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P2
NR 115
TC 4
Z9 5
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1303
EP 1345
DI 10.1007/s11219-019-09486-x
EA JAN 2020
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000507371200001
DA 2024-07-18
ER

PT J
AU Fotrousi, F
   Fricker, SA
   Fiedler, M
AF Fotrousi, Farnaz
   Fricker, Samuel A.
   Fiedler, Markus
TI The effect of requests for user feedback on Quality of Experience
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality of experience; QoE; User feedback; User perception; Human
   factors
ID INVOLVEMENT; STATE
AB Companies are interested in knowing how users experience and perceive their products. Quality of Experience (QoE) is a measurement that is used to assess the degree of delight or annoyance in experiencing a software product. To assess QoE, we have used a feedback tool integrated into a software product to ask users about their QoE ratings and to obtain information about their rationales for good or bad QoEs. It is known that requests for feedback may disturb users; however, little is known about the subjective reasoning behind this disturbance or about whether this disturbance negatively affects the QoE of the software product for which the feedback is sought. In this paper, we present a mixed qualitative-quantitative study with 35 subjects that explore the relationship between feedback requests and QoE. The subjects experienced a requirement-modeling mobile product, which was integrated with a feedback tool. During and at the end of the experience, we collected the users' perceptions of the product and the feedback requests. Based on the users' rational for being disturbed by the feedback requests, such as "early feedback," "interruptive requests," "frequent requests," and "apparently inappropriate content," we modeled feedback requests. The model defines feedback requests using a set of five-tuple variables: "task," "timing" of the task for issuing the feedback requests, user's "expertise-phase" with the product, the "frequency" of feedback requests about the task, and the "content" of the feedback request. Configuration of these parameters might drive the participants' perceived disturbances. We also found that the disturbances generated by triggering user feedback requests have negligible impacts on the QoE of software products. These results imply that software product vendors may trust users' feedback even when the feedback requests disturb the users.
C1 [Fotrousi, Farnaz; Fricker, Samuel A.; Fiedler, Markus] Blekinge Inst Technol, SE-37179 Karlskrona, Sweden.
   [Fotrousi, Farnaz; Fricker, Samuel A.] Univ Appl Sci & Arts Northwestern Switzerland FHN, Sch Engn, CH-5210 Windisch, Switzerland.
C3 Blekinge Institute Technology; FHNW University of Applied Sciences &
   Arts Northwestern Switzerland
RP Fotrousi, F (corresponding author), Blekinge Inst Technol, SE-37179 Karlskrona, Sweden.; Fotrousi, F (corresponding author), Univ Appl Sci & Arts Northwestern Switzerland FHN, Sch Engn, CH-5210 Windisch, Switzerland.
EM Farnaz.fotrousi@bth.se; Samuel.fricker@bth.se; markus.fiedler@bth.se
RI Fotrousi, Farnaz/AAA-9611-2020
OI Fotrousi, Farnaz/0000-0001-5385-0381
CR Ames M, 2007, CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1 AND 2, P971
   [Anonymous], 2009, Proceedings of the 8th International Conference on Mobile and Ubiquitous Multimedia
   [Anonymous], SIGCHI C HUM FACT CO
   [Anonymous], 19 IEEE INT REQ ENG
   [Anonymous], FLEXISKETCH
   [Anonymous], 22 IEEE INT C REQ EN
   [Anonymous], CASE TRENDS DEC
   [Anonymous], 3 WORKSH PASS ACT ME
   [Anonymous], ITU T P 800 MEAN OP
   [Anonymous], 2012, EUROPEAN NETWORK QUA
   [Anonymous], 2003, HDB PSYCHOL
   [Anonymous], QOE PROBE ANDROID
   [Anonymous], 5 MULT WORKSH ADV PR
   [Anonymous], 2008, HDB EMOTIONS
   [Anonymous], SIGCHI C HUM FACT CO
   [Anonymous], 5 INT C MOB SYST APP
   [Anonymous], 2012, INT C MOBILE COMPUTI
   [Anonymous], 9 INT SOFTW METR S
   [Anonymous], RECENT ADV COMPUTER
   Antons JN, 2014, T-LAB SER TELECOMMUN, P109, DOI 10.1007/978-3-319-02681-7_8
   Bailey BP, 2001, HUMAN-COMPUTER INTERACTION - INTERACT'01, P593
   Barrett LF, 2011, CURR DIR PSYCHOL SCI, V20, P286, DOI 10.1177/0963721411422522
   Beyer J, 2014, T-LAB SER TELECOMMUN, P367, DOI 10.1007/978-3-319-02681-7_25
   Carreño LVG, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P582, DOI 10.1109/ICSE.2013.6606604
   Côté N, 2014, T-LAB SER TELECOMMUN, P165, DOI 10.1007/978-3-319-02681-7_12
   Elo S, 2008, J ADV NURS, V62, P107, DOI 10.1111/j.1365-2648.2007.04569.x
   Feiten B, 2014, T-LAB SER TELECOMMUN, P229, DOI 10.1007/978-3-319-02681-7_16
   Fiedler M, 2010, IEEE NETWORK, V24, P36, DOI 10.1109/MNET.2010.5430142
   Fricker SA, 2016, REQUIR ENG, V21, P521, DOI 10.1007/s00766-015-0231-5
   Garcia MN, 2014, T-LAB SER TELECOMMUN, P277, DOI 10.1007/978-3-319-02681-7_19
   Garland R., 1991, Marketing bulletin, V2, P66
   Golafshani N., 2003, QUAL REP, V8, P597, DOI DOI 10.46743/2160-3715/2003.1870
   Hak T., 2009, ENCY CASE STUDY RES, P663
   HERZOG AR, 1981, PUBLIC OPIN QUART, V45, P549, DOI 10.1086/268687
   Host M., 2000, Empirical Software Engineering, V5, P201, DOI 10.1023/A:1026586415054
   Hsieh HF, 2005, QUAL HEALTH RES, V15, P1277, DOI 10.1177/1049732305276687
   Ickin S, 2012, IEEE COMMUN MAG, V50, P48, DOI 10.1109/MCOM.2012.6178833
   Ivory MY, 2001, ACM COMPUT SURV, V33, P470, DOI 10.1145/503112.503114
   Jordan PW, 1998, APPL ERGON, V29, P25, DOI 10.1016/S0003-6870(97)00022-7
   Karapanos E., 2013, MODELING USERSEXPERI, P57, DOI [10.1007/978-3-642-31000-3_4., DOI 10.1007/978-3-642-31000-3_4]
   KENNEDY MM, 1979, EVALUATION QUART, V3, P661, DOI 10.1177/0193841X7900300409
   Kujala S, 2003, BEHAV INFORM TECHNOL, V22, P1, DOI 10.1080/0144929021000055530
   Kujala S, 2008, BEHAV INFORM TECHNOL, V27, P457, DOI 10.1080/01449290601111051
   Kujala S., 2013, P SIGCHI C HUM FACT, P1061, DOI DOI 10.1145/2470654.2466135
   Maule AJ, 2000, ACTA PSYCHOL, V104, P283, DOI 10.1016/S0001-6918(00)00033-0
   Mitra Karan., 2011, Proceedings of the 2011 ACM Symposium on Applied Computing, SAC'11, P419, DOI DOI 10.1145/1982185.1982276
   Pagano D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P953, DOI 10.1109/ICSE.2013.6606645
   Potter WJ, 1999, J APPL COMMUN RES, V27, P258, DOI 10.1080/00909889909365539
   Raake A, 2014, T-LAB SER TELECOMMUN, P11, DOI 10.1007/978-3-319-02681-7_2
   Reiter U, 2014, T-LAB SER TELECOMMUN, P55, DOI 10.1007/978-3-319-02681-7_4
   Roto V., 2011, DAGST SEM DEM US EXP
   Scherer KR, 2005, SOC SCI INFORM, V44, P695, DOI 10.1177/0539018405058216
   Schleicher R, 2014, T-LAB SER TELECOMMUN, P339, DOI 10.1007/978-3-319-02681-7_23
   Sjoberg DIK, 2003, LECT NOTES COMPUT SC, V2765, P24
   Strohmeier D, 2014, T-LAB SER TELECOMMUN, P329, DOI 10.1007/978-3-319-02681-7_22
   SZAJNA B, 1993, MIS QUART, V17, P493, DOI 10.2307/249589
   Tohidi Maryam, 2006, NordiCHI 2006, P105, DOI DOI 10.1145/1182475.1182487
   van der Ham Wim F. J., 2014, Emotion Modeling. Towards Pragmatic Computational Models of Affective Processes. LNCS 8750, P101, DOI 10.1007/978-3-319-12973-0_6
   Varela M, 2014, T-LAB SER TELECOMMUN, P85, DOI 10.1007/978-3-319-02681-7_6
   Wüest D, 2015, INT REQUIR ENG CONF, P186, DOI 10.1109/RE.2015.7320421
   Yin R. K., 2017, CASE STUDY RES DESIG
   Zhang JJ, 2011, IEEE COMMUN MAG, V49, P185, DOI 10.1109/MCOM.2011.5936172
   Zijlstra FRH, 1999, J OCCUP ORGAN PSYCH, V72, P163, DOI 10.1348/096317999166581
NR 63
TC 6
Z9 6
U1 0
U2 19
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 385
EP 415
DI 10.1007/s11219-017-9373-7
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA GH6AN
UT WOS:000433521200007
OA hybrid
DA 2024-07-18
ER

PT J
AU Ufuktepe, E
   Tuglular, T
AF Ufuktepe, Ekincan
   Tuglular, Tugkan
TI Estimating software robustness in relation to input validation
   vulnerabilities using Bayesian networks
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Robustness; Input validation vulnerabilities; Bayesian networks
ID SYSTEMS
AB Estimating the robustness of software in the presence of invalid inputs has long been a challenging task owing to the fact that developers usually fail to take the necessary action to validate inputs during the design and implementation of software. We propose a method for estimating the robustness of software in relation to input validation vulnerabilities using Bayesian networks. The proposed method runs on all program functions and/or methods. It calculates a robustness value using information on the existence of input validation code in the functions and utilizing common weakness scores of known input validation vulnerabilities. In the case study, ten well-known software libraries implemented in the JavaScript language, which are chosen because of their increasing popularity among software developers, are evaluated. Using our method, software development teams can track changes made to software to deal with invalid inputs.
C1 [Ufuktepe, Ekincan; Tuglular, Tugkan] Izmir Inst Technol, Dept Comp Engn, Izmir, Turkey.
C3 Izmir Institute of Technology
RP Tuglular, T (corresponding author), Izmir Inst Technol, Dept Comp Engn, Izmir, Turkey.
EM ekincanufuktepe@iyte.edu.tr; tugkantuglular@iyte.edu.tr
RI Tuglular, Tugkan/AAI-8008-2020; Ufuktepe, Ekincan/AAP-9620-2020
OI Tuglular, Tugkan/0000-0001-6797-3913; Ufuktepe,
   Ekincan/0000-0002-0156-4321
CR [Anonymous], OPEN SOFTWARE ENG J
   [Anonymous], 1145 U NEWC
   [Anonymous], 2010, GULFSTREAM INCEMENTA
   [Anonymous], OWASP TOP 10 2013
   [Anonymous], NIST WORKSH DEF STAT
   [Anonymous], 2014, THESIS
   [Anonymous], 1990, IEEE STD 610 121990
   [Anonymous], MSRTR9606
   [Anonymous], 2007, BAYESIAN NETWORKS
   Bobbio A, 2001, RELIAB ENG SYST SAFE, V71, P249, DOI 10.1016/S0951-8320(00)00077-6
   Dejaeger K, 2013, IEEE T SOFTWARE ENG, V39, P237, DOI 10.1109/TSE.2012.20
   Fenton Norman, 2012, Risk Assessment and Decision Analysis with Bayesian Networks
   Franke U, 2012, SOFTWARE QUAL J, V20, P369, DOI 10.1007/s11219-011-9141-z
   Frigault Marcel, 2008, 2008 IEEE 32nd International Computer Software and Applications Conference (COMPSAC), P698, DOI 10.1109/COMPSAC.2008.88
   Halfond J., 2006, Proceedings of the IEEE international symposium on secure software engineering, V1, P13
   Holm H, 2015, INFORM SOFTWARE TECH, V58, P304, DOI 10.1016/j.infsof.2014.07.001
   Jensen SH, 2009, LECT NOTES COMPUT SC, V5673, P238, DOI 10.1007/978-3-642-03237-0_17
   Kondakci Suleyman, 2010, Proceedings of the 2010 IEEE Second International Conference on Social Computing (SocialCom 2010). the Second IEEE International Conference on Privacy, Security, Risk and Trust (PASSAT 2010), P952, DOI 10.1109/SocialCom.2010.141
   Korb KB., 2010, COM SCI DAT
   Kuperman BA, 2005, COMMUN ACM, V48, P50, DOI 10.1145/1096000.1096004
   Okutan A, 2014, EMPIR SOFTW ENG, V19, P154, DOI 10.1007/s10664-012-9218-8
   Perkusich M, 2015, EXPERT SYST APPL, V42, P437, DOI 10.1016/j.eswa.2014.08.015
   Shahrokni A, 2013, INFORM SOFTWARE TECH, V55, P1, DOI 10.1016/j.infsof.2012.06.002
   Wagner S, 2010, INFORM SOFTWARE TECH, V52, P1230, DOI 10.1016/j.infsof.2010.03.016
   Weber P, 2012, ENG APPL ARTIF INTEL, V25, P671, DOI 10.1016/j.engappai.2010.06.002
NR 25
TC 4
Z9 5
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 455
EP 489
DI 10.1007/s11219-017-9359-5
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200009
DA 2024-07-18
ER

PT J
AU Tahat, L
   Korel, B
   Koutsogiannakis, G
   Almasri, N
AF Tahat, Luay
   Korel, Bogdan
   Koutsogiannakis, George
   Almasri, Nada
TI State-based models in regression test suite prioritization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE EFSM; Model dependence; System model; Heuristics; Model-based testing
ID SELECTION; MINIMIZATION; DEPENDENCE
AB Testing software products is very expensive and time consuming, especially for large software systems with extensive regression testing. During regression testing, a modified system is often re-tested using an existing test suite. Since test suites can be very large, testers are interested in detecting faults in the modified system as early as possible. Test prioritization tries to order test cases for execution in a way that increases the chances of the early detection of faults. Most of the existing test prioritization methods are based on the code of the system under test, but model-based test prioritization has been lately proposed. Most of the existing model-based test prioritization methods can be used only when models are modified during system maintenance. In this paper, we present model-based prioritization for a class of modifications for which models are not modified (only the source code is modified). After identifying the elements of the model related to the modified source code, information collected during the execution of the model is used to prioritize tests for execution. Here, we present and compare existing and new model-based test prioritization methods focused on this class of modifications. The major motivation for presenting these methods is to provide system developers with simple and yet effective test prioritization techniques for early fault detection. Statistical analysis of the empirical study, which compares the effectiveness of the presented methods in terms of early fault detection, show that compared to random ordering of test cases, model-based test prioritization significantly improve the effectiveness of test prioritization with respect to early fault detection.
C1 [Korel, Bogdan; Koutsogiannakis, George] IIT, Dept Comp Sci, Chicago, IL 60616 USA.
   [Tahat, Luay; Almasri, Nada] Gulf Univ Sci & Technol, Management Informat Syst, Mishref, Kuwait.
C3 Illinois Institute of Technology; Gulf University for Science &
   Technology (GUST)
RP Tahat, L (corresponding author), Gulf Univ Sci & Technol, Management Informat Syst, Mishref, Kuwait.
EM tahaway@iit.edu; korel@iit.edu; koutsogiannakis@iit.edu;
   almasri.n@gust.edu.kw
RI Almasri, Nada/AAC-1564-2020; Tahat, Luay/E-7547-2016
OI Almasri, Nada/0000-0001-8222-9180; Tahat, Luay/0000-0003-3413-2039
CR Androutsopoulos K., 2009, P 25 IEEE INT C SOFT
   Androutsopoulos K, 2009, LECT NOTES COMPUT SC, V5503, P216
   [Anonymous], 2013, PRACT ASSESS RES EVA
   [Anonymous], INT S SOFTW TEST AN
   [Anonymous], 2013, CNET
   Basanieri F., 2002, "UML" 2002 - Unified Modeling Language. Model Engineering, Concepts, and Tools. 5th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2460), P383
   Belina F., 1989, COMPUTER NETWORKS, V16, P11
   Briand LC, 2009, INFORM SOFTWARE TECH, V51, P16, DOI 10.1016/j.infsof.2008.09.010
   Briand LC, 2002, PROC IEEE INT CONF S, P252, DOI 10.1109/ICSM.2002.1167775
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   CHEN Y, 2007, P 4 INT WORKSH SOFTW, P62
   Chen Y., 2002, P C CTR ADV STUD COL
   Chen YP, 2009, J SOFTW MAINT EVOL-R, V21, P379, DOI 10.1002/smr.415
   CHENG KT, 1993, ACM IEEE D, P86
   Deng D., 2004, Proceedings. IEEE Sixth International Symposium on Multimedia Software, P278
   Dignan L., 2010, CBS NEWS
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Do H, 2006, IEEE T SOFTWARE ENG, V32, P733, DOI 10.1109/TSE.2006.92
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Elbaum S, 2001, PROC INT CONF SOFTW, P329, DOI 10.1109/ICSE.2001.919106
   Elbaum S., 2000, Prioritizing test cases for regression testing, V25
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fraser G, 2007, PROCEEDINGS OF THE IASTED INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P267
   Gupta R., 1992, P IEEE C SOFTW MAINT, P299
   Harrold MJ, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P99, DOI 10.1109/FOSM.2008.4659253
   Hemmati H, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430536.2430540
   Hong HS, 2000, SOFTW TEST VERIF BEH, V10, P203, DOI 10.1002/1099-1689(200012)10:4<203::AID-STVR212>3.0.CO;2-2
   Iqbal MuhammadZohaib Z., 2007, Proceedings of the 3rd international workshop on Advances in model-based testing, P44
   ITU- T Recommendation Standard Q. 931, 1998, DIG SUBSCR SIGN SYST
   Jia Y, 2011, IEEE T SOFT IN PRESS
   Jiang B, 2011, SOFTWARE PRACT EXPER, V41, P1073, DOI 10.1002/spe.1092
   Jiang B, 2009, IEEE INT CONF AUTOM, P233, DOI 10.1109/ASE.2009.77
   Kaur Preeti., 2012, Proceedings of the CUBE International Information Technology Conference, CUBE '12, P355
   Khoshgoftaar TM, 1997, IEEE T NEURAL NETWOR, V8, P902, DOI 10.1109/72.595888
   Kim JM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P119, DOI 10.1109/ICSE.2002.1007961
   KIRBY J, 1987, TR8707 WANG I GRAD S
   Korel B, 2002, PROC IEEE INT CONF S, P214, DOI 10.1109/ICSM.2002.1167768
   Korel B, 2005, PROC IEEE INT CONF S, P559
   Korel B., 2007, P 3 ACM WORKSH ADV M
   Korel B, 2009, 5 WORKSH ADV MOD BAS
   Korel B, 2008, PROC IEEE INT CONF S, P247, DOI 10.1109/ICSM.2008.4658073
   Kundu D, 2009, SOFTW TEST VERIF REL, V19, P297, DOI 10.1002/stvr.407
   Le Traon Y, 2000, IEEE T RELIAB, V49, P12, DOI 10.1109/24.855533
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Lilienthal D., 2011, TOP 4 FUN BOEING 787
   Mei H., 2011, IEEE Transactions on Software Engineering
   Mei LJ, 2015, IEEE T SERV COMPUT, V8, P658, DOI 10.1109/TSC.2014.2331683
   Mei LJ, 2011, J SYST SOFTWARE, V84, P603, DOI 10.1016/j.jss.2010.11.905
   Muccini H, 2005, P INT COMP SOFTW APP, P189
   Mueller C., 2003, THESIS
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   Orso A, 2007, SOFTW TEST VERIF REL, V17, P61, DOI 10.1002/stvr.344
   Paiva ACR, 2005, LECT NOTES COMPUT SC, V3785, P450
   Pilskalns O, 2006, PROC IEEE INT CONF S, P254
   Rothermel G, 1998, PROC IEEE INT CONF S, P34, DOI 10.1109/ICSM.1998.738487
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Rothermel G., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P179, DOI 10.1109/ICSM.1999.792604
   Rothermel G., 1997, ACM Transactions on Software Engineering and Methodology, V6, P173, DOI 10.1145/248233.248262
   Rothermel G, 1994, P IEEE INT C SOFTW M, P358
   Saadatmand M., 2014, 9 INT C SOFTW ENG AD, P247
   Sabharwal S., 2010, 2010 International Conference on Computer and Communication Technology (ICCCT 2010), P481, DOI 10.1109/ICCCT.2010.5640479
   Stevens W., 2001, TCP IP ILLUSTRATION
   Tahat L, 2012, SOFTW TEST VERIF REL, V22, P481, DOI 10.1002/stvr.461
   Thomas SW, 2014, EMPIR SOFTW ENG, V19, P182, DOI 10.1007/s10664-012-9219-7
   Ural H, 2013, J SOFTW-EVOL PROC, V25, P681, DOI 10.1002/smr.1559
   Vaysburg B., 2002, Software Engineering Notes, V27, P107, DOI 10.1145/566171.566188
   Walkinshaw N, 2008, SOFTW TEST VERIF REL, V18, P99, DOI 10.1002/stvr.380
   White L. J., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P338, DOI 10.1109/ICSM.1993.366928
   Wong W., 1997, P 8 INT S SOFTW REL, P230
   Wong WE, 1997, P INT COMP SOFTW APP, P522, DOI 10.1109/CMPSAC.1997.625062
   Ye W, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P133, DOI 10.1109/CSMR.2003.1192420
   Yenigün H, 2014, SOFTWARE QUAL J, V22, P701, DOI 10.1007/s11219-013-9213-3
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yoo S, 2009, TR0909 DEP COMP SCI
   Yoo S, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P201
   Zhai K, 2014, IEEE T SERV COMPUT, V7, P54, DOI 10.1109/TSC.2012.40
   [No title captured]
NR 77
TC 13
Z9 13
U1 0
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 703
EP 742
DI 10.1007/s11219-016-9330-x
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300004
DA 2024-07-18
ER

PT J
AU Yenigün, H
AF Yenigun, Husnu
TI Identifying the effects of modifications as data dependencies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Regression testing; Data dependence
ID REGRESSION; SELECTION
AB Dependence analysis on an extended finite state machine (EFSM) representation of the requirements of a system under test has been used in model-based regression testing for regression test suite (RTS) reduction (reducing the size of a given test suite by eliminating redundancies), for RTS prioritization (ordering test cases in a given test suite for early fault detection), or for RTS selection (selecting a subset of a test suite covering the identified dependencies). These particular uses of dependence analysis are based on the definitions of various types of control and data dependencies (between transitions in an EFSM) caused by a given set of modifications on the requirements. This paper considers the existing definitions of data dependencies for capturing the effects of the modifications, gives examples of their inaccuracy and incompleteness, proposes new definitions, and proves the soundness and completeness of these new definitions. Any previous work on regression testing using definitions of data dependencies capturing the effects of modifications can benefit from the proposed definitions.
C1 Sabanci Univ, Fac Engn & Nat Sci, TR-34956 Istanbul, Turkey.
C3 Sabanci University
RP Yenigün, H (corresponding author), Sabanci Univ, Fac Engn & Nat Sci, TR-34956 Istanbul, Turkey.
EM yenigun@sabanciuniv.edu
RI Yenigun, Husnu/L-3299-2013
FU Natural Sciences and Engineering Research Council of Canada; Ontario
   Centres of Excellence; Sabanci University
FX The author wishes to thank Prof. Hasan Ural and Dr. Yanping Chen for
   many useful discussions. This work was supported in part by grants from
   the Natural Sciences and Engineering Research Council of Canada, and the
   Ontario Centres of Excellence, and Sabanci University.
CR BELINA F, 1989, COMPUT NETWORKS ISDN, V16, P311, DOI 10.1016/0169-7552(89)90078-0
   Chen YP, 2009, J SOFTW MAINT EVOL-R, V21, P379, DOI 10.1002/smr.415
   Chen Yanping., 2007, Fourth international workshop on Software quality assurance: in conjunction with the 6th ESEC/FSE joint meeting, P62, DOI DOI 10.1145/1295074.1295086
   Chen Yanping., 2007, 3rd international workshop on Advances in model-based testing, P54, DOI 10.1145/1291535.1291541
   Douglass B. P., 1999, STATECHARTS
   Dssouli R, 1999, COMPUT NETW, V31, P1835, DOI 10.1016/S1389-1286(99)00063-8
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Korel B, 2002, PROC IEEE INT CONF S, P214, DOI 10.1109/ICSM.2002.1167768
   Korel B, 2008, PROC IEEE INT CONF S, P247, DOI 10.1109/ICSM.2008.4658073
   Rothermel G, 1996, IEEE T SOFTWARE ENG, V22, P529, DOI 10.1109/32.536955
   Rothermel G., 1997, ACM Transactions on Software Engineering and Methodology, V6, P173, DOI 10.1145/248233.248262
   Santelices R., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P11, DOI 10.1109/ICST.2011.46
   Santelices Raul, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P429, DOI 10.1109/ICST.2010.29
   Santelices Raul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P218, DOI 10.1109/ASE.2008.32
   Santelices R., 2007, P INT C AUT SOFTW EN, P343
   Santelices R.A., 2010, P 19 INT S SOFTW TES, P195, DOI [DOI 10.1145/1831708.1831733, 10.1145/1831708.1831733]
   Tahat L, 2012, SOFTW TEST VERIF REL, V22, P481, DOI 10.1002/stvr.461
   Ural H, 2013, J SOFTW-EVOL PROC, V25, P681, DOI 10.1002/smr.1559
   Vaysburg B., 2002, Software Engineering Notes, V27, P107, DOI 10.1145/566171.566188
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
NR 20
TC 3
Z9 3
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2014
VL 22
IS 4
BP 701
EP 716
DI 10.1007/s11219-013-9213-3
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AR8NQ
UT WOS:000343832100007
DA 2024-07-18
ER

PT J
AU Montagud, S
   Abrahao, S
   Insfran, E
AF Montagud, Sonia
   Abrahao, Silvia
   Insfran, Emilio
TI A systematic review of quality attributes and measures for software
   product lines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Software product lines; Quality; Measures; Quality attributes;
   Systematic literature review
ID REQUIREMENTS
AB It is widely accepted that software measures provide an appropriate mechanism for understanding, monitoring, controlling, and predicting the quality of software development projects. In software product lines (SPL), quality is even more important than in a single software product since, owing to systematic reuse, a fault or an inadequate design decision could be propagated to several products in the family. Over the last few years, a great number of quality attributes and measures for assessing the quality of SPL have been reported in literature. However, no studies summarizing the current knowledge about them exist. This paper presents a systematic literature review with the objective of identifying and interpreting all the available studies from 1996 to 2010 that present quality attributes and/or measures for SPL. These attributes and measures have been classified using a set of criteria that includes the life cycle phase in which the measures are applied; the corresponding quality characteristics; their support for specific SPL characteristics (e.g., variability, compositionality); the procedure used to validate the measures, etc. We found 165 measures related to 97 different quality attributes. The results of the review indicated that 92% of the measures evaluate attributes that are related to maintainability. In addition, 67% of the measures are used during the design phase of Domain Engineering, and 56% are applied to evaluate the product line architecture. However, only 25% of them have been empirically validated. In conclusion, the results provide a global vision of the state of the research within this area in order to help researchers in detecting weaknesses, directing research efforts, and identifying new research lines. In particular, there is a need for new measures with which to evaluate both the quality of the artifacts produced during the entire SPL life cycle and other quality characteristics. There is also a need for more validation (both theoretical and empirical) of existing measures. In addition, our results may be useful as a reference guide for practitioners to assist them in the selection or the adaptation of existing measures for evaluating their software product lines.
C1 [Montagud, Sonia; Abrahao, Silvia; Insfran, Emilio] Univ Politecn Valencia, Dept Comp Sci & Computat, Valencia 46022, Spain.
C3 Universitat Politecnica de Valencia
RP Montagud, S (corresponding author), Univ Politecn Valencia, Dept Comp Sci & Computat, Camino Vera S-N, Valencia 46022, Spain.
EM smontagud@dsic.upv.es; sabrahao@dsic.upv.es; einsfran@dsic.upv.es
RI Abrahão, Silvia/AAK-6976-2020; Insfran, Emilio/O-6934-2015
OI Abrahão, Silvia/0000-0003-3580-2014; Insfran, Emilio/0000-0003-0855-5564
FU Spanish Ministry of Science and Innovation under the MULTIPLE
   (Multimodeling Approach For Quality-Aware Software Product Lines)
   project [TIN2009-13838]
FX This research has been funded by the Spanish Ministry of Science and
   Innovation under the MULTIPLE (Multimodeling Approach For Quality-Aware
   Software Product Lines) project with ref. TIN2009-13838.
CR Abdelmoez W, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P384, DOI 10.1109/METRIC.2004.1357923
   Ajila SA, 2007, J SYST SOFTWARE, V80, P74, DOI 10.1016/j.jss.2006.05.034
   Aldekoa G., 2006, 25 JORN ING SOFTW BA
   Aldekoa G., 2008, QUANTIFYING MAINTANI, P243
   Alves V, 2010, INFORM SOFTWARE TECH, V52, P806, DOI 10.1016/j.infsof.2010.03.014
   [Anonymous], 13 INT SOFTW PROD LI
   [Anonymous], 2000, 9126 ISOIEC, V2000
   [Anonymous], 25010 ISOIEC
   [Anonymous], 1998, 10611998 IEEE
   [Anonymous], SOFTWARE ENG FORMAL
   [Anonymous], 2010, J CITATION REPORTS T
   [Anonymous], 2007, SOFTWARE PRODUCT LIN
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Briand L., 1996, Softw. Process, Improve-ment Pract., V2, P253
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   Calero C, 2005, ONLINE INFORM REV, V29, P227, DOI 10.1108/14684520510607560
   Clements P., 2002, Software product lines
   Crnkovic I., 2004, J ECONOMETRICS, P231
   Davis A, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P179
   de Oliveira Junior E.A., 2008, XXXIV Conferencia Latinaoamericana de Informatica (CLEI 2008), P489
   Filho EDS, 2008, LECT NOTES COMPUT SC, V5292, P50, DOI 10.1007/978-3-540-88030-1_6
   Engström E, 2011, INFORM SOFTWARE TECH, V53, P2, DOI 10.1016/j.infsof.2010.05.011
   Etxeberria L., 2008, J BRAZILIAN COMPUTER, V14
   Ganesan D., 2007, 11 INT SOFTW PROD LI, P74
   Gomez O., 2006, 1 INT C SOFTW DAT TE, P11
   Her JS, 2007, INFORM SOFTWARE TECH, V49, P740, DOI 10.1016/j.infsof.2006.08.008
   Inoki M., 2007, 22 ANN ACM S APPL CO
   Insfran E, 2008, LECT NOTES COMPUT SC, V5176, P81, DOI 10.1007/978-3-540-85200-1_10
   Johansson E., 2002, P 14 INT C SOFTW ENG, P249
   Khurum M., 2009, J SYSTEMS SOFTWARE
   Kim T, 2008, 2008 IEEE 8TH INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION TECHNOLOGY, VOLS 1 AND 2, P790, DOI 10.1109/CIT.2008.4594775
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   Kitchenham B., 2007, 23 EBSE, DOI DOI 10.1145/1134285.1134500
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   MENDES E, 2005, INT S EMP SOFTW ENG
   Meyer MH, 2002, J PROD INNOVAT MANAG, V19, P277, DOI 10.1016/S0737-6782(02)00145-5
   Montagud S., 2009, THESIS
   Montagud S., 2009, 13 INT SOFTW PROD LI
   Needham D., 2006, 22 INT C SOFTW MAINT
   Niemelä E, 2007, INFORM SOFTWARE TECH, V49, P1107, DOI 10.1016/j.infsof.2006.11.003
   Odia O. E., 2007, THESIS BLEKING I TEC
   Olumofin FG, 2007, INFORM SOFTWARE TECH, V49, P309, DOI 10.1016/j.infsof.2006.05.003
   Lamancha BP, 2009, ICSOFT 2009: PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL 1, P23
   Poels G, 2000, INFORM SOFTWARE TECH, V42, P35, DOI 10.1016/S0950-5849(99)00053-1
   Prehofer C., 2008, EMERGING METHODS TEC
   Rahman A., 2004, THESIS BLEKING I TEC
   Sethi K., 2009, JOINT WORK IEEE IFIP
   Shaik I., 2005, 5 WORK IEEE IFIP C S
   Siegmund N., 2008, 15 AS PAC SOFTW ENG
   Svahnberg M., 2000, 3 INT WORKSH SOFTW A
   Tao Zhang, 2008, 2008 International Conference on Computer Science and Software Engineering (CSSE 2008), P500, DOI 10.1109/CSSE.2008.500
   Van der Hoek A., 2003, 9 INT SOFTW METR S M
   Whitmire ScottA., 1997, OBJECT ORIENTED DESI
   Wnuk K., 2009, 17 IEEE INT REQ ENG
   Yoshimura Kentaro, 2006, P 2006 INT WORKSH SO, P61, DOI [10.1145/1138474.1138485, DOI 10.1145/1138474.1138485]
NR 55
TC 43
Z9 45
U1 0
U2 33
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2012
VL 20
IS 3-4
SI SI
BP 425
EP 486
DI 10.1007/s11219-011-9146-7
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 995IQ
UT WOS:000308001900002
DA 2024-07-18
ER

PT J
AU Siegmund, N
   Rosenmüller, M
   Kuhlemann, M
   Kästner, C
   Apel, S
   Saake, G
AF Siegmund, Norbert
   Rosenmueller, Marko
   Kuhlemann, Martin
   Kaestner, Christian
   Apel, Sven
   Saake, Gunter
TI SPL Conqueror: Toward optimization of non-functional properties in
   software product lines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software product lines; Non-functional properties; Feature-oriented
   software development; Measurement and optimization; SPL Conqueror
ID REQUIREMENTS; MODELS
AB A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e.g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e.g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming.
C1 [Siegmund, Norbert; Kuhlemann, Martin] Univ Magdeburg, Database Work Grp, Fac Comp Sci, D-39106 Magdeburg, Germany.
   [Kaestner, Christian] Univ Marburg, Marburg, Germany.
   [Apel, Sven] Univ Passau, Passau, Germany.
C3 Otto von Guericke University; Philipps University Marburg; University of
   Passau
RP Siegmund, N (corresponding author), Univ Magdeburg, Database Work Grp, Fac Comp Sci, D-39106 Magdeburg, Germany.
EM nsiegmun@ovgu.de; rosenmue@ovgu.de; mkuhlema@ovgu.de;
   kaestner@informatik.uni-marburg.de; apel@uni-passau.de; saake@ovgu.de
RI Siegmund, Norbert/U-1325-2019
OI Siegmund, Norbert/0000-0001-7741-7777; Apel, Sven/0000-0003-3687-2233;
   Kastner, Christian/0000-0002-4450-4572
FU German ministry of education and science BMBF [01IM10002B]; German
   research foundation [SA 465/34-1]; DFG [AP 206/2-1, AP 206/4-1];
   European Research Council [203099]
FX We would like to thank Janet Feigenspan and the anonymous reviewers for
   their constructive and helpful comments which substantially improved the
   quality of the paper. Norbert Siegmund is funded by the German ministry
   of education and science BMBF, number 01IM10002B. Marko Rosenmuller is
   funded by the German research foundation, project number SA 465/34-1.
   Apel's work is supported by the DFG projects #AP 206/2-1 and #AP
   206/4-1. Kastner's work is supported by the European Research Council
   (grand ScalPL #203099).
CR [Anonymous], 2000, Generative programming: methods, tools, and applications
   Antkiewicz M., 2004, Proc. of the Wksp on Eclipse Technology eXchange, P67, DOI DOI 10.1145/1066129.1066143
   Apel S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P421, DOI 10.1145/1985793.1985851
   Bagnall AJ, 2001, INFORM SOFTWARE TECH, V43, P883, DOI 10.1016/S0950-5849(01)00194-X
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Benavides D., 2007, PROCEEDING 1 INT WOR, P129
   Boegh J, 1999, IEEE SOFTWARE, V16, P69, DOI 10.1109/52.754056
   Boehm B., 1978, TRW SERIES SOFTWARE
   Botterweck G., 2007, P 1 INT WORKSH VIS S, P125
   Chung L., 1995, Proceedings of the Second IEEE International Symposium on Requirements Engineering (Cat. No.95TH8040), P132, DOI 10.1109/ISRE.1995.512554
   Chung L., 1999, NONFUNCTIONAL REQUIR
   Chung L, 2009, LECT NOTES COMPUT SC, V5600, P363, DOI 10.1007/978-3-642-02463-4_19
   Clements P., 2002, Software product lines
   Cooper KD, 2002, J SUPERCOMPUT, V23, P7, DOI 10.1023/A:1015729001611
   Czarnecki K, 2004, LECT NOTES COMPUT SC, V3154, P266
   Czarnecki K, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P41, DOI 10.1109/SPLINE.2006.1691576
   Fei YS, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1324969.1324971
   Floch J, 2006, IEEE SOFTWARE, V23, P62, DOI 10.1109/MS.2006.61
   Glinz M, 2007, INT REQUIR ENG CONF, P21, DOI 10.1109/RE.2007.45
   Gobel S., 2004, AOSD 04, P74
   Gotz S., 2009, P INT WORKSH HOT TOP, P1
   Hunleth F, 2002, ACM SIGPLAN NOTICES, V37, P38, DOI 10.1145/566225.513838
   International Organization for Standardization (ISO), 2001, JTC 1 SC 7 SOFTW SYS
   Kang Kyo C, 1990, Technical Report
   Karlsson J, 1998, INFORM SOFTWARE TECH, V39, P939, DOI 10.1016/S0950-5849(97)00053-0
   Kastner Christian., 2009, Proceedings of the 13th International Software Product Line Conference, P181, DOI DOI 10.1145/1753235.1753261
   Khoshgoftaar TM, 2003, EMPIR SOFTW ENG, V8, P255, DOI 10.1023/A:1024424811345
   Krueger CW, 2006, SPLC 2006: 10th International Software Product Line Conference, Proceedings, P95, DOI 10.1109/SPLINE.2006.1691581
   Li Y., 2002, FRAMEWORK ESTIMATING, P259
   Lincke R., 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P82, DOI 10.1109/QSIC.2010.9
   Lopez-Herrejon RE, 2007, LECT NOTES COMPUT SC, V4422, P423
   Marler RT, 2004, STRUCT MULTIDISCIP O, V26, P369, DOI 10.1007/s00158-003-0368-6
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mccall J. A., 1977, ADA049014, V1
   Pizzi NJ, 2002, IEEE IJCNN, P2405, DOI 10.1109/IJCNN.2002.1007518
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Pure-systems GmbH, 2004, TECHN WHIT PAP VAR M
   Rabiser R., 2007, WORKSH VIS SOFTW PRO, P119
   Rana Z. A., 2007, SURVEY MEASUREMENT B
   Robertson S, 2012, Mastering the requirements process: getting requirements right
   Saliu M.O., 2007, P 6 JOINT M EUROPEAN, P105, DOI DOI 10.1145/1287624.1287641
   Siegmund N., 2008, P WORKSH VAR MOD SOF, P25
   Siegmund N., 2010, VAMOS 10, P115
   Siegmund N., 2011, SOFTW PROD LIN C SPL
   Siegmund N, 2008, ASIA PAC SOFWR ENG, P187, DOI 10.1109/APSEC.2008.45
   Siegmund Norbert, 2010, P 2 INT WORKSHOP FEA, P2
   Sincero J., 2007, SOFTW PROD LIN C SPL, P167
   Sincero J, 2010, ASIA PAC SOFWR ENG, P147, DOI 10.1109/APSEC.2010.26
   STEVENS SS, 1946, SCIENCE, V103, P677, DOI 10.1126/science.103.2684.677
   Tiwari V., 1994, 1994 IEEE Symposium on Low Power Electronics. Digest of Technical Papers (Cat. No.94TH0669-2), P38, DOI 10.1109/LPE.1994.573195
   Trendowicz A., 2003, ECOOP WORKSH QUANT A
   van Lamsweerde A, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P249
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P908, DOI 10.1109/32.730542
   White J, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P129, DOI 10.1109/SPLINE.2007.19
   White J, 2009, J SYST SOFTWARE, V82, P1268, DOI 10.1016/j.jss.2009.02.011
   Yu ESK, 1997, RE '97 - PROCEEDINGS OF THE THIRD IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, P226, DOI 10.1109/ISRE.1997.566873
   Zhang YY, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1129
   Zubrow D., 2003, CMUSEI2003TN031
NR 60
TC 88
Z9 93
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2012
VL 20
IS 3-4
SI SI
BP 487
EP 517
DI 10.1007/s11219-011-9152-9
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 995IQ
UT WOS:000308001900003
DA 2024-07-18
ER

PT J
AU Chatzigeorgiou, A
   Stiakakis, E
AF Chatzigeorgiou, Alexander
   Stiakakis, Emmanouil
TI Benchmarking library and application software with Data Envelopment
   Analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Object-oriented design; Software metrics; Benchmarking; Data Envelopment
   Analysis; Efficiency
ID PERFORMANCE; SYSTEMS
AB Library software is generally believed to be well-structured and follows certain design guidelines due to the need of continuous evolution and stability of the respective APIs. We perform an empirical study to investigate whether the design of open-source library software is actually superior to that of application software. By analyzing certain design principles and heuristics that are considered important for API design, we extract a set of software metrics that are expected to reflect the improved nature of libraries. An initial comparison by conventional statistical analysis confirms the overall belief that products of different software size scale should not be compared by simply examining metric values in isolation. In this paper, we propose the use of Data Envelopment Analysis (DEA), borrowed from production economics, as a means of measuring and benchmarking the quality of different object-oriented software designs captured by software metrics and apply this approach to the comparison of library and application software. The advantages offered by DEA and the differences between the application of DEA in an economic and a technological context are discussed. Results of the approach are presented for 44 open-source projects, equally divided between libraries and applications.
C1 [Chatzigeorgiou, Alexander; Stiakakis, Emmanouil] Univ Macedonia, Dept Appl Informat, Thessaloniki 54006, Greece.
C3 University of Macedonia
RP Chatzigeorgiou, A (corresponding author), Univ Macedonia, Dept Appl Informat, 156 Egnatia Str, Thessaloniki 54006, Greece.
EM achat@uom.gr
RI Chatzigeorgiou, Alexandros/AAL-6077-2021
CR ANDA B, 2007, P 23 INT C SOFTW MAI, P204
   Anderson TR, 2004, INT SER OPER RES MAN, P443
   [Anonymous], 2003, ALAN APT SERIES
   [Anonymous], 1994, Object-oriented software metrics: a practical guide
   [Anonymous], 1995, Data envelopment analysis: Theory, methodology and applications
   [Anonymous], 2008, Practical API design: Confessions of a Java framework architect
   [Anonymous], 1991, 9126 ISOIEC
   Arisholm E, 2004, IEEE T SOFTWARE ENG, V30, P521, DOI 10.1109/TSE.2004.43
   Asmild M., 2006, Software Process Improvement and Practice, V11, P561, DOI 10.1002/spip.298
   BANKER RD, 1984, MANAGE SCI, V30, P1078, DOI 10.1287/mnsc.30.9.1078
   Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   BENESTAD HC, 2006, P 7 INT C PROD FOC S
   Bloch J., 2016, Effective Java
   Bloch Joshua, 2006, COMP 21 ACM SIGPLAN
   BOWMAN M, 2007, P 23 IEEE INT C SOFT, P124
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   CHARNES A, 1978, EUR J OPER RES, V2, P429, DOI 10.1016/0377-2217(78)90138-8
   Coelli T.J., 1997, INTRO EFFICIENCY PRO
   COOK WD, 1995, DATA ENVELOPMENT ANA, P195
   Cooper W., 2007, Data envelopement analysis. A comprehensive text with models, applications, V2nd
   Cooper W W., 2005, Introduction to data envelopment analysis and its uses: with DEA-solver software and references
   Criswell DR, 1996, SOL ENERGY, V56, P119, DOI 10.1016/0038-092X(95)00113-6
   Dyson RG, 2001, EUR J OPER RES, V132, P245, DOI 10.1016/S0377-2217(00)00149-1
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P17, DOI 10.1145/62139.62141
   Meyer B., 2000, OBJECT ORIENTED SOFT, V2nd
   O' Keeffe M, 2006, P 10 EUR C SOFTW MAI
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Riel AJ., 1996, Object-Oriented Design Heuristics
   Ruggiero J, 2004, INT SER OPER RES MAN, P323
   Seng O, 2006, P 8 ANN C GEN EV COM
   Stensrud E, 2003, IEEE T SOFTWARE ENG, V29, P398, DOI 10.1109/TSE.2003.1199070
   von Mayrhauser A., 2000, Empirical Software Engineering, V5, P125, DOI 10.1023/A:1009815306795
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   YAMASHITA AF, 2009, P 3 INT S EMP SOFTW
   Yang Z, 2009, J OPER RES SOC, V60, P771, DOI 10.1057/palgrave.jors.2602619
NR 37
TC 3
Z9 3
U1 0
U2 19
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2011
VL 19
IS 3
BP 553
EP 578
DI 10.1007/s11219-010-9113-8
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 775TK
UT WOS:000291486100005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Khoshgoftaar, TM
   Rebours, P
   Seliya, N
AF Khoshgoftaar, Taghi M.
   Rebours, Pierre
   Seliya, Naeem
TI Software quality analysis by combining multiple projects and learners
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Multiple software metrics repositories; Software quality classification
   model; Multiple learners; Cost of misclassification; Data mining;
   Majority voting
AB When building software quality models, the approach often consists of training data mining learners on a single fit dataset. Typically, this fit dataset contains software metrics collected during a past release of the software project that we want to predict the quality of. In order to improve the predictive accuracy of such quality models, it is common practice to combine the predictive results of multiple learners to take advantage of their respective biases. Although multi-learner classifiers have been proven to be successful in some cases, the improvement is not always significant because the information in the fit dataset sometimes can be insufficient. We present an innovative method to build software quality models using majority voting to combine the predictions of multiple learners induced on multiple training datasets. To our knowledge, no previous study in software quality has attempted to take advantage of multiple software project data repositories which are generally spread across the organization. In a large scale empirical study involving seven real-world datasets and seventeen learners, we show that, on average, combining the predictions of one learner trained on multiple datasets significantly improves the predictive performance compared to one learner induced on a single fit dataset. We also demonstrate empirically that combining multiple learners trained on a single training dataset does not significantly improve the average predictive accuracy compared to the use of a single learner induced on a single fit dataset.
C1 [Khoshgoftaar, Taghi M.; Rebours, Pierre] Florida Atlantic Univ, Boca Raton, FL 33431 USA.
   [Seliya, Naeem] Univ Michigan, Dearborn, MI 48128 USA.
C3 State University System of Florida; Florida Atlantic University;
   University of Michigan System; University of Michigan
RP Khoshgoftaar, TM (corresponding author), Florida Atlantic Univ, 777 Glades Rd, Boca Raton, FL 33431 USA.
EM taghi@cse.fau.edu; prebours@yahoo.com; nseliya@umich.edu
CR Alpaydin E, 1997, ARTIF INTELL REV, V11, P115, DOI 10.1023/A:1006563312922
   ALPAYDIN E, 1998, P ENG INT SYST C, V2
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1991, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling
   [Anonymous], P 15 INT C MACH LEAR
   [Anonymous], 2000, Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations
   Atkeson CG, 1997, ARTIF INTELL REV, V11, P11, DOI 10.1023/A:1006559212014
   Berenson M.L., 1983, INTERMEDIATE STAT ME
   Breiman L, 1996, MACH LEARN, V24, P123, DOI 10.1007/bf00058655
   Chen K, 1997, INT J PATTERN RECOGN, V11, P417, DOI 10.1142/S0218001497000196
   Cohen W.W., 1995, P 12 INT C MACH LEAR, P115, DOI [DOI 10.1016/B978-1-55860-377-6.50023-2, 10.1016/B978-1-55860-377-6.50023-2]
   COMPTON P, 1990, 2 AUSTR JOINT ART IN, P292
   Cuadrado-Gallego JJ, 2006, SOFTWARE QUAL J, V14, P339, DOI 10.1007/s11219-006-0039-0
   El Emam K, 2001, J SYST SOFTWARE, V55, P301, DOI 10.1016/S0164-1212(00)00079-0
   Frank E, 2000, MACH LEARN, V41, P5, DOI 10.1023/A:1007670802811
   Freund Y, 1999, MACHINE LEARNING, PROCEEDINGS, P124
   Gaines B. R., 1995, Journal of Intelligent Information Systems: Integrating Artificial Intelligence and Database Technologies, V5, P211, DOI 10.1007/BF00962234
   GAMBERGER D, 1996, ALGORITHMIC LEARNING, V1160, P199
   HANSEN LK, 1990, IEEE T PATTERN ANAL, V12, P993, DOI 10.1109/34.58871
   HO TK, 1994, IEEE T PATTERN ANAL, V16, P66, DOI 10.1109/34.273716
   HOLTE RC, 1993, MACH LEARN, V11, P63, DOI 10.1023/A:1022631118932
   Khoshgoftaar T., 1999, International Journal of Reliability, Quality and Safety Engineering, V6, P303
   Khoshgoftaar T. M., 2000, Empirical Software Engineering, V5, P313, DOI 10.1023/A:1009896203228
   Khoshgoftaar TM, 2006, INT J SOFTW ENG KNOW, V16, P53, DOI 10.1142/S0218194006002677
   Khoshgoftaar TM, 2004, PROCEEDINGS OF THE 2004 IEEE INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION (IRI-2004), P369, DOI 10.1109/IRI.2004.1431489
   Khoshgoftaar TM, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P119, DOI 10.1109/METRIC.2004.1357896
   Kohavi R, 1995, LECT NOTES ARTIF INT, V912, P174
   Krogh A., 1995, Advances in Neural Information Processing Systems 7, P231
   Mani G, 1991, NEURAL COMPUT, V3, P484, DOI 10.1162/neco.1991.3.4.484
   Meir R, 1995, ADV NEURAL INFORM PR
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   MUNSON JC, 1992, IEEE T SOFTWARE ENG, V18, P423, DOI 10.1109/32.135775
   Nikora A. P., 2004, Proceedings of the 28th Annual International Computer Software and Applications Conference. COMPSAC 2004, P192, DOI 10.1109/CMPSAC.2004.1342827
   Nikora AP, 2003, PROC IEEE INT CONF S, P83, DOI 10.1109/ICSM.2003.1235409
   Platt J.C., 1998, 9814 MICR RES
   Quinlan J. R., 1993, PROGRAMS MACHINE LEA
   Shepperd M, 2001, IEEE T SOFTWARE ENG, V27, P1014, DOI 10.1109/32.965341
   van der Meulen MJP, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P203, DOI 10.1109/ISSRE.2007.12
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   WOLPERT DH, 1992, NEURAL NETWORKS, V5, P241, DOI 10.1016/S0893-6080(05)80023-1
   Xing F, 2005, 16TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P213
   Yacoub S, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P203, DOI 10.1109/ISSRE.2003.1251043
NR 42
TC 30
Z9 35
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2009
VL 17
IS 1
BP 25
EP 49
DI 10.1007/s11219-008-9058-3
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 398AD
UT WOS:000262702700004
DA 2024-07-18
ER

PT J
AU Liu, F
   Noguchi, K
   Dhungana, A
   Srirangam, VVNSN
   Inuganti, P
AF Liu, F
   Noguchi, K
   Dhungana, A
   Srirangam, VVNSN
   Inuganti, P
TI A quantitative approach for setting technical targets based on impact
   analysis in software quality function deployment (SQFD)
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE quality planning; software quality function deployment (SQFD);
   benchmarking; linear regression; impact analysis
AB Target setting in software quality function deployment (SQFD) is very important since it is directly related to development of high quality products with high customer satisfaction. However target setting is usually done subjectively in practice, which is not scientific. Two quantitative approaches for setting target values: benchmarking and primitive linear regression have been developed and applied in the past to overcome this problem (Akao and Yoji, 1990). But these approaches cannot be used to assess the impact of unachieved targets on satisfaction of customers for customer requirements. In addition, both of them are based on linear regression and not very practical in many applications.
   In this paper, we present an innovative quantitative method of setting technical targets in SQFD to enable analysis of impact of unachieved target values on customer satisfaction. It is based on assessment of impact of technical attributes on satisfaction of customer requirements. In addition both linear and non linear regression techniques are utilized in our method, which certainly improves the existing quantitative methods which are based on only linear regression.
C1 Univ Missouri, Dept Comp Sci, Rolla, MO 65401 USA.
   Toshiba Co Ltd, Software Engn Ctr, Kawasaki, Kanagawa, Japan.
   Texas Tech Univ, Dept Comp Sci, Lubbock, TX 79409 USA.
C3 University of Missouri System; Missouri University of Science &
   Technology; Toshiba Corporation; Texas Tech University System; Texas
   Tech University
RP Liu, F (corresponding author), Univ Missouri, Dept Comp Sci, Rolla, MO 65401 USA.
EM fliu@umr.edu
CR Akao Y., 1990, QUALITY FUNCTION DEP
   Albright S.C., 1999, DATA ANAL DECISION M
   [Anonymous], 1988, NATL PROD REV
   Cohen L., 1997, Quality function deployment
   GEORGE H, 1995, SOFTWARE QUALITY MAN, V1, P429
   GREWAL BS, 2000, HIGHER ENG MATH
   Haag S, 1996, COMMUN ACM, V39, P41, DOI 10.1145/234173.234178
   LIU XQF, 2001, TRANSFORMATION ANAL
   MIZUNO S, 1994, CUSTOMER DRIVEN APPR
   MOSELEY J, 1991, T 3 S QUAL FUNCT DEP
   Roscoe J., 1969, FUNDAMENTAL RES STAT
   SHAIKH KI, 1991, ASI GOAL QPC NOVI
   SHARKEY AI, 1991, GEN APPROACH ADAPTIN
   THOMPSON DM, 1989, T 1 S QUAL FUNCT DEP, P279
NR 14
TC 14
Z9 15
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2006
VL 14
IS 2
BP 113
EP 134
DI 10.1007/s11219-006-7598-y
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 042EH
UT WOS:000237510200004
DA 2024-07-18
ER

PT J
AU Seffah, A
   Donyaee, M
   Kline, RB
   Padda, HK
AF Seffah, Ahmed
   Donyaee, Mohammad
   Kline, Rex B.
   Padda, Harkirat K.
TI Usability measurement and metrics: A consolidated model
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE usability; measurement; metrics; effectiveness; efficiency; user
   satisfaction; software engineering quality models
ID SOFTWARE; TRUST
AB Usability is increasingly recognized as an important quality factor for interactive software systems, including traditional GUIs-style applications, Web sites, and the large variety of mobile and PDA interactive services. Unusable user interfaces are probably the single largest reasons why encompassing interactive systems - computers plus people, fail in actual use. The design of this diversity of applications so that they actually achieve their intended purposes in term of ease of use is not an easy task. Although there are many individual methods for evaluating usability; they are not well integrated into a single conceptual framework that facilitate their usage by developers who are not trained in the filed of HCI. This is true in part because there are now several different standards (e.g., ISO 9241, ISO/IEC 9126, IEEE Std.610.12) or conceptual models (e.g., Metrics for Usability Standards in Computing [MUSiC]) for usability, and not all of these standards or models describe the same operational definitions and measures. This paper first reviews existing usability standards and models while highlighted the limitations and complementarities of the various standards. It then explains how these various models can be unified into a single consolidated, hierarchical model of usability measurement. This consolidated model is called Quality in Use Integrated Measurement (QUIM). Included in the QUIM model are 10 factors each of which corresponds to a specific facet of usability that is identified in an existing standard or model. These 10 factors are decomposed into a total of 26 sub-factors or measurable criteria that are furtherdecomposed into 127 specific metrics. The paper explains also how a consolidated model, such as QUIM, can help in developing a usability measurement theory.
C1 Concordia Univ, Dept Comp Sci & Software Engn, Human Ctr Software Engn Grp, Montreal, PQ H3G 1M8, Canada.
   Concordia Univ, Dept Psychol, Montreal, PQ H4B 1R6, Canada.
C3 Concordia University - Canada; Concordia University - Canada
RP Seffah, A (corresponding author), Concordia Univ, Dept Comp Sci & Software Engn, Human Ctr Software Engn Grp, 1455 De Maisonneuve Blvd W, Montreal, PQ H3G 1M8, Canada.
EM seffah@cs.concordia.ca; donyaee@cs.concordia.ca;
   rbkline@vax2.concordia.ca; padda@cs.concordia.ca
RI Brennan, Kathy/D-6118-2011
CR Ahuja V., 2000, IT Professional, V2, P61, DOI 10.1109/6294.846215
   [Anonymous], 1995, SOFTWARE QUALITY ASS
   [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], 2011, Handbook of usability testing: How to plan, design, and conduct effective tests
   [Anonymous], E COMM TRUST STUD
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 1991, 9126 ISOIEC
   [Anonymous], 1991, Human Factors for Informatics Usability, DOI DOI 10.1016/J.INTCOM.2009.04.007
   [Anonymous], P 4 C HUM FACT WEB B
   Atif Y, 2002, IEEE INTERNET COMPUT, V6, P18, DOI 10.1109/4236.978365
   Bevan N, 1997, THIRD IEEE INTERNATIONAL SOFTWARE ENGINEERING STANDARDS SYMPOSIUM AND FORUM (ISESS 97) - EMERGING INTERNATIONAL STANDARDS, PROCEEDINGS, P169, DOI 10.1109/SESS.1997.595963
   BEVAN N, 1994, BEHAV INFORM TECHNOL, V13, P132, DOI 10.1080/01449299408914592
   BEVAN N, 1995, SOFTWARE QUAL J, V4, P115, DOI 10.1007/BF00402715
   BEVAN N, 2001, P 1 INT C UN ACC HUM, P557
   CALDWELL B, 2004, WEB CONTENT ACCESSIB
   Constantine L.L., 1999, Software for Use: A Practical Guide to the Models and Methods of Usage-Centered Design
   CURTIS B, 1980, P IEEE, V68, P1144, DOI 10.1109/PROC.1980.11813
   Friedman B, 2000, COMMUN ACM, V43, P34, DOI 10.1145/355112.355120
   HYATT LE, 1996, SOFTWARE QUALITY MOD
   *I EL EL ENG, 1998, 10611998 I EL EL ENG
   *I EL EL ENG, 1990, 610121990 I EL EL EN
   *INT EL COMM, 2004, 6030039 IEC
   International Organization for Standardization, 1999, 134071999 ISO
   International Organization For Standardization, 1998, ISO 9241-11
   *ISO IEC, 2001, 91264 ISOIEC
   *ISO IEC, 1999, 145981 ISOIEC
   ISO/IEC, 1995, ISO/IEC 12207
   Ivory MY, 2001, ACM COMPUT SURV, V33, P470, DOI 10.1145/503112.503114
   Jarrar M, 2003, LECT NOTES COMPUT SC, V2800, P185
   John B.E., 1996, ACM T COMPUT-HUM INT, V3, P287
   KIRAKOWSKI J, 1993, BRIT J EDUC TECHNOL, V24, P210, DOI 10.1111/j.1467-8535.1993.tb00076.x
   LANDUAER TK, 1995, USABILITY PRODUCTIVI
   Lin HX, 1997, BEHAV INFORM TECHNOL, V16, P267, DOI 10.1080/014492997119833
   Macleod M, 1997, BEHAV INFORM TECHNOL, V16, P279, DOI 10.1080/014492997119842
   Macleod M., 1994, P NORW COMP SOC SOFT
   MACLEOD M, 1993, DEV DRUM SOFTWARE TO
   Mayhew D.J., 1999, USABILITY ENG LIFECY
   McCall J., 1977, Factors in software quality, V1
   Nunnally JC, 1978, PSYCHOMETRIC THEORY, V2nd
   Olsina L., 2001, Web engineerng. Managing diversity and complexity of web application development, P266
   PRRECE J, 1994, HUMAN COMPUTER INTER
   Schneiderman B., 1992, DESIGNING USER INTER
   SCHNEIDEWIND NF, 1992, IEEE T SOFTWARE ENG, V18, P410, DOI 10.1109/32.135774
   SCHOLTZ J, 1998, P 4 C HUM FACT WEB B
   SEARS A, 1995, P 8 ACM S US INT SOF, P101
   Stevens S.S., 1959, Measurement, P18
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   YAMADA S, 1995, ACM T COMPUT-HUM INT, V12, P410
   1978, CHARACTERISTICS SOFT
NR 49
TC 303
Z9 335
U1 0
U2 78
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2006
VL 14
IS 2
BP 159
EP 178
DI 10.1007/s11219-006-7600-8
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 042EH
UT WOS:000237510200006
DA 2024-07-18
ER

PT J
AU Marijan, D
AF Marijan, Dusica
TI Comparative study of machine learning test case prioritization for
   continuous integration testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Machine learning; Neural networks; Support vector regression; Gradient
   boosting; Learning to rank; Continuous integration; Software testing;
   Regression testing; Test prioritization; Test selection; Test
   optimization
AB There is a growing body of research indicating the potential of machine learning to tackle complex software testing challenges. One such challenge pertains to continuous integration testing, which is highly time-constrained, and generates a large amount of data coming from iterative code commits and test runs. In such a setting, we can use plentiful test data for training machine learning predictors to identify test cases able to speed up the detection of regression bugs introduced during code integration. However, different machine learning models can have different fault prediction performance depending on the context and the parameters of continuous integration testing, for example, variable time budget available for continuous integration cycles, or the size of test execution history used for learning to prioritize failing test cases. Existing studies on test case prioritization rarely study both of these factors, which are essential for the continuous integration practice. In this study, we perform a comprehensive comparison of the fault prediction performance of machine learning approaches that have shown the best performance on test case prioritization tasks in the literature. We evaluate the accuracy of the classifiers in predicting fault-detecting tests for different values of the continuous integration time budget and with different lengths of test history used for training the classifiers. In evaluation, we use real-world and augmented industrial datasets from a continuous integration practice. The results show that different machine learning models have different performance for different size of test history used for model training and for different time budgets available for test case execution. Our results imply that machine learning approaches for test prioritization in continuous integration testing should be carefully configured to achieve optimal performance.
C1 [Marijan, Dusica] Simula Res Lab, Oslo, Norway.
RP Marijan, D (corresponding author), Simula Res Lab, Oslo, Norway.
EM dusica@simula.no
FU Research Council of Norway [287329]
FX AcknowledgementsThis work is supported by the Research Council of
   Norway, grant no 287329.
CR Ali S, 2020, SOFTWARE QUAL J, V28, P397, DOI 10.1007/s11219-019-09463-4
   Bertolino A, 2020, PROC INT CONF SOFTW, P1, DOI 10.1145/3377811.3380369
   Busjaeger B, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P975, DOI 10.1145/2950290.2983954
   Calvo B, 2016, R J, V8, P248
   Chen JJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P656, DOI 10.1145/3236024.3236053
   Elbaum A.M.S, 2014, GOOGLE DATASET TESTI
   Elbaum S, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P235, DOI 10.1145/2635868.2635910
   Grano G, 2018, 2018 IEEE WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE), P19, DOI 10.1109/MALTESQUE.2018.8368454
   Hasnain M, 2019, ASIAPAC SIGN INFO PR, P96, DOI 10.1109/APSIPAASC47483.2019.9023052
   Hemmati H., 2017, PRIORITIZING MANUAL, P27
   Jahan H, 2019, J INTELL FUZZY SYST, V36, P6181, DOI 10.3233/JIFS-181998
   Khatibsyarbini M, 2018, INFORM SOFTWARE TECH, V93, P74, DOI 10.1016/j.infsof.2017.08.014
   Lachmann R, 2016, 2016 15TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2016), P361, DOI [10.1109/ICMLA.2016.0065, 10.1109/ICMLA.2016.163]
   Lemaître G, 2017, J MACH LEARN RES, V18
   Lima JAP, 2022, IEEE T SOFTWARE ENG, V48, P453, DOI 10.1109/TSE.2020.2992428
   Machalica M, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P91, DOI 10.1109/ICSE-SEIP.2019.00018
   Mandieh M, 2020, INFORM SOFTWARE TECH, V121, DOI 10.1016/j.infsof.2020.106269
   Marijan D, 2018, 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING - SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2018), P153, DOI 10.1145/3183519.3183532
   Marijan D, 2019, SOFTWARE PRACT EXPER, V49, P192, DOI 10.1002/spe.2661
   Marijan D, 2018, P INT COMP SOFTW APP, P22, DOI 10.1109/COMPSAC.2018.00012
   Marijan D, 2017, IEEE INT CONF SOFTW, P524, DOI 10.1109/ICST.2017.60
   Marijan D, 2017, IEEE HI ASS SYS ENGR, P100, DOI 10.1109/HASE.2017.26
   Marijan D, 2016, PROC IEEE INT CONF S, P568, DOI 10.1109/ICSME.2016.77
   Marijan D, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P157, DOI 10.1109/QRS.2015.31
   Marijan D, 2013, PROC IEEE INT CONF S, P540, DOI 10.1109/ICSM.2013.91
   Mirarab Siavash, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P278, DOI 10.1109/ICST.2008.57
   Niu N, 2018, IEEE SOFTWARE, V35, P86, DOI 10.1109/MS.2018.1661332
   Parnin C, 2017, IEEE SOFTWARE, V34, P86, DOI 10.1109/MS.2017.86
   Rosenbauer Lukas, 2020, GECCO'20. Proceedings of the 2020 Genetic and Evolutionary Computation Conference Companion, P1798, DOI 10.1145/3377929.3398128
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Savor T, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P21, DOI 10.1145/2889160.2889223
   Sharif A, 2021, PROC IEEE INT CONF S, P525, DOI 10.1109/ICSME52107.2021.00053
   Shi A, 2019, PROC INT SYMP SOFTW, P228, DOI 10.1109/ISSRE.2019.00031
   Shi TT, 2020, PR INT CONF DATA SC, P663, DOI 10.1109/DSAA49011.2020.00076
   Srikanth H, 2016, J SYST SOFTWARE, V119, P122, DOI 10.1016/j.jss.2016.06.017
NR 35
TC 3
Z9 3
U1 10
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1415
EP 1438
DI 10.1007/s11219-023-09646-0
EA JUL 2023
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001037580800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Brito, MAS
   Souza, SRS
   Souza, PSL
AF Brito, Maria A. S.
   Souza, Simone R. S.
   Souza, Paulo S. L.
TI Integration testing for robotic systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Integration testing; Test scenarios; Testing criteria;
   Robotic system; Experimental study
ID CONCURRENT PROGRAMS
AB Conventional approaches for the validation of robotic systems include simulations and functional software testing. Although these approaches are interesting, they do not offer coverage information to guide the testing activity. In this sense, the introduction of coverage testing to the validation of mobile robotic systems seems to promise. This paper proposes a integration testing approach for robotic systems in a simulation environment. The approach is composed of test scenarios, constructed based on functional testing, and structural testing towards revealing defects and providing a better systematization of the testing activity in this application domain. The proposed approach focuses on systems developed in ROS, the robot operating system, in which communication can be established through a publish/subscribe interaction schema. The paper provides an example of the way the integration testing approach can be applied to robotic systems. An experimental study conducted with developers of mobile robotic systems evaluated the gains and proved the applicability of the approach to the industry. The results confirmed its advantages for the integration testing of mobile robotic systems. It can check functional behavior (test scenarios), or reach a high structural coverage (coverage criteria), and reveal common defects in mobile robotic systems.
C1 [Brito, Maria A. S.] Univ Fed Lavras, Dept Ciencia Comp, Lavras, Brazil.
   [Souza, Simone R. S.; Souza, Paulo S. L.] Univ Sao Paulo, Inst Ciencias Matemat & Comp, Sao Carlos, Brazil.
C3 Universidade Federal de Lavras; Universidade de Sao Paulo
RP Brito, MAS (corresponding author), Univ Fed Lavras, Dept Ciencia Comp, Lavras, Brazil.
EM maria.brito@ufla.br; srocio@icmc.usp.br; pssouza@icmc.usp.br
RI Souza, Paulo S. L./F-5487-2011
OI Souza, Paulo/0000-0002-1560-2704; Brito, Maria/0000-0002-6157-0563
FU Brazilian agency FAPESP [2013/03459-4, 2019/06937-0]
FX The authors acknowledge Brazilian funding agency FAPESP, under processes
   2013/03459-4 and 2019/06937-0 for the financial support provided for
   this research.
CR Abdelgawad M, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SIMULATION, MODELING, AND PROGRAMMING FOR AUTONOMOUS ROBOTS (SIMPAR), P162, DOI 10.1109/SIMPAR.2016.7862391
   Ammann Paul, 2008, Introduction to software testing, V1st
   [Anonymous], 2014, P JOINT C ISR 2014 4
   Baresi L, 2006, ELECTRON NOTES THEOR, V148, P89, DOI 10.1016/j.entcs.2005.12.014
   Belli F, 2009, 2009 THIRD IEEE INTERNATIONAL CONFERENCE ON SECURE SOFTWARE INTEGRATION AND RELIABILITY IMPROVEMENT, PROCEEDINGS, P387, DOI 10.1109/SSIRI.2009.50
   Blondeau V, 2017, SOFTWARE QUAL J, V25, P1203, DOI 10.1007/s11219-016-9328-4
   Brito MAS, 2017, THESIS
   Brito MAS., 2015, INT C SOFTW ENG KNOW
   Brito PHS, 2009, J COMPUT SCI TECH-CH, V24, P212, DOI 10.1007/s11390-009-9219-2
   Carlson J, 2004, IEEE INT CONF ROBOT, P4987, DOI 10.1109/ROBOT.2004.1302508
   Chen QC, 2009, LECT NOTES COMPUT SC, V5503, P425
   Damm W, 2011, DES AUT TEST EUROPE, P1023
   De Oliveira Neves V., 2013, Proc. Int. Conf. Softw. Eng. Knowl. Eng. SEKE, V2013, P200
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   Fernandes LC, 2013, J SYSTEMS ARCHITECTU
   Frankl F., 1986, P WORKSH SOFTW TEST, P4
   Garlan D, 2003, LECT NOTES COMPUT SC, V2648, P166
   Jeong-Seok Kang, 2011, 2011 8th International Conference on Ubiquitous Robots and Ambient Intelligence (URAI 2011), P647, DOI 10.1109/URAI.2011.6145901
   Kaner C, 2003, TECH REP
   Kang JS, 2012, UBICOMP'12: PROCEEDINGS OF THE 2012 ACM INTERNATIONAL CONFERENCE ON UBIQUITOUS COMPUTING, P852
   Kang SS, 2010, INTERNATIONAL CONFERENCE ON CONTROL, AUTOMATION AND SYSTEMS (ICCAS 2010), P1781
   Kim D, 2018, SOFTWARE QUAL J, V26, P491, DOI 10.1007/s11219-016-9346-2
   Kramer J, 2007, AUTON ROBOT, V22, P101, DOI 10.1007/s10514-006-9013-8
   Lee N, 2002, INT C SOFTW ENG KNOW, V27, P369
   LEUNG HKN, 1990, CONFERENCE ON SOFTWARE MAINTENANCE 1990, P290
   Lim JH, 2009, LECT NOTES COMPUT SC, V5899, P198
   Lima LP, 1997, TESTING OF COMMUNICATING SYSTEMS, VOL 10, P288
   Lu X, 2011, TRANSPORT RES REC, P89, DOI 10.3141/2243-11
   Lucas C, 2012, ACM SIGPLAN NOTICES, V47, P915, DOI 10.1145/2398857.2384683
   Lussier B., 2004, 3 ARPIEEE RASEURON J
   Matias LPN, 2015, 2015 12TH LATIN AMERICAN ROBOTICS SYMPOSIUM AND 2015 3RD BRAZILIAN SYMPOSIUM ON ROBOTICS (LARS-SBR), P320, DOI 10.1109/LARS-SBR.2015.31
   Mattiello-Francisco F, 2012, J SYST SOFTWARE, V85, P3, DOI 10.1016/j.jss.2011.02.034
   Melo SM, 2018, SOFTWARE QUAL J, V26, P921, DOI 10.1007/s11219-017-9376-4
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Pakala H., 2010, INT C POW CONTR EMB
   Pakala HGM, 2011, COMM COM INF SC, V133, P200
   Park H, 2012, SITAF SIMULATION BAS, P453
   Planthaber S., 2011, INT C ROB BIOM IEEE, P232
   Prado RR, 2016, ADV INTELL SYST, V448, P581, DOI 10.1007/978-3-319-32467-8_51
   Pressman R.S., 2005, Software engineering: a Practitioner's Approach
   RAPPS S, 1985, IEEE T SOFTWARE ENG, V11, P367, DOI 10.1109/TSE.1985.232226
   Siegwart R., 2004, INTRO AUTONOMOUS MOB
   SON JR, 2011, INF SCI APPL ICISA 2, P1
   Sotiropoulos T, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P150, DOI 10.1109/QRS.2017.25
   Souza PSL, 2014, CONCURR COMP-PRACT E, V26, P21, DOI 10.1002/cpe.2937
   Souza SRS, 2008, CONCURR COMP-PRACT E, V20, P1893, DOI 10.1002/cpe.1297
   Söylemez M, 2018, SOFTWARE QUAL J, V26, P779, DOI 10.1007/s11219-016-9334-6
   Steinbauer G., 2013, ROBOCUP 2012 ROBOT S, P344, DOI DOI 10.1007/978-3-642-39250-4_31
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Tzafestas S.G., 2014, Introduction to Mobile Robot Control
NR 50
TC 4
Z9 5
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 3
EP 35
DI 10.1007/s11219-020-09535-w
EA NOV 2020
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000590507100002
DA 2024-07-18
ER

PT J
AU Ali, S
   Hafeez, Y
   Hussain, S
   Yang, SK
AF Ali, Sadia
   Hafeez, Yaser
   Hussain, Shariq
   Yang, Shunkun
TI Enhanced regression testing technique for agile software development and
   continuous integration strategies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Regression testing; Agile methodology; Agile environment; Test case
   prioritization; Test suite selection; Frequency of change
ID TEST-CASE PRIORITIZATION; SELECTION; COVERAGE; DESIGN
AB To survive in competitive marketplaces, most organizations have adopted agile methodologies to facilitate continuous integration and faster application delivery and rely on regression testing during application development to validate the quality and reliability of the software after changes have been made. Consequently, for large projects with cost and time constraints, it is extremely difficult to determine which test cases to run at the end of each release. In this paper, a test case prioritization and selection approach is proposed to improve the quality of releases. From existing literature, we analyzed prevailing problems and proposed solution relevant to regression testing in agile practices. The proposed approach is based on two phases. First, test cases are prioritized by clustering those test cases that frequently change. In case of a tie, test cases are prioritized based on their respective failure frequencies and coverage criteria. Second, test cases with a higher frequency of failure or coverage criteria are selected. The proposed technique was validated by an empirical study on three industrial subjects. The results show that the method successfully selects an optimal test suite and increases the fault detection rate (i.e., more than 90% in the case of proposed technique and less than 50% in other techniques), which reduces the number of irrelevant test cases and avoids detecting duplicate faults. The results of evaluation metrics illustrate that the proposed technique significantly outperform (i.e., between 91 and 97%) as compared to other existing regression testing techniques (i.e., between 52 and 68%). Therefore, our model enhances the test case prioritization and selection with the ability for earlier and high fault detection. Thus, pruning out irrelevant test cases and redundant faults and enhancing the regression testing process for agile applications.
C1 [Ali, Sadia; Hafeez, Yaser] Pir Mehr Ali Shah Arid Agr Univ, Univ Inst Informat Technol, Rawalpindi, Pakistan.
   [Hussain, Shariq] Fdn Univ Islamabad, Dept Software Engn, Rawalpindi Campus, Rawalpindi, Pakistan.
   [Yang, Shunkun] Beihang Univ, Sch Reliabil & Syst Engn, Beijing, Peoples R China.
C3 Arid Agriculture University; Beihang University
RP Yang, SK (corresponding author), Beihang Univ, Sch Reliabil & Syst Engn, Beijing, Peoples R China.
EM sadiaalief@gmail.com; yasir@uaar.edu.pk; shariq@fui.edu.pk;
   ysk@buaa.edu.cn
RI Hussain, Shariq/K-5047-2013
OI Hussain, Shariq/0000-0003-2093-7274
CR Abu Hasan M, 2017, COMM COM INF SC, V750, P269, DOI 10.1007/978-981-10-6544-6_25
   Agren SM, 2018, INT REQUIR ENG CONF, P17, DOI 10.1109/RE.2018.00-55
   Al-Hajjaji M, 2019, SOFTW SYST MODEL, V18, P499, DOI 10.1007/s10270-016-0569-2
   Alkharabsheh K, 2019, SOFTWARE QUAL J, V27, P1069, DOI 10.1007/s11219-018-9424-8
   Almasri N, 2017, SOFTWARE QUAL J, V25, P601, DOI 10.1007/s11219-016-9316-8
   Aman H, 2018, IEEE ICST WORKSHOP, P392, DOI 10.1109/ICSTW.2018.00079
   Anand RV, 2017, COMPUT ELECTR ENG, V61, P126, DOI 10.1016/j.compeleceng.2017.06.022
   Anderson J., 2014, P 11 WORK C MIN SOFT, P142
   Anita, 2014, IEEE INT ADV COMPUT, P1454, DOI 10.1109/IAdCC.2014.6779540
   Ansari A, 2016, PROCEDIA COMPUT SCI, V79, P152, DOI 10.1016/j.procs.2016.03.020
   Arafeen MJ, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P312, DOI 10.1109/ICST.2013.12
   Azizi M, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1560, DOI 10.1145/3167132.3167299
   Bin Noor T, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P58, DOI 10.1109/ISSRE.2015.7381799
   Chen JF, 2018, J SYST SOFTWARE, V135, P107, DOI 10.1016/j.jss.2017.09.031
   del Sagrado J, 2018, SOFTWARE QUAL J, V26, P585, DOI 10.1007/s11219-017-9362-x
   Do H, 2016, ADV COMPUT, V103, P53, DOI 10.1016/bs.adcom.2016.04.004
   Elbaum S, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P235, DOI 10.1145/2635868.2635910
   Felderer M, 2019, SOFTWARE QUAL J, V27, P125, DOI 10.1007/s11219-018-9407-9
   Fischer S, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P2034, DOI 10.1145/3167132.3167350
   Flemström D, 2018, SOFTWARE QUAL J, V26, P1421, DOI 10.1007/s11219-017-9401-7
   Gultepe E, 2018, HUM-CENT COMPUT INFO, V8, DOI 10.1186/s13673-018-0148-3
   Gupta A, 2015, LECT NOTES ELECTR EN, V315, P437, DOI 10.1007/978-3-319-07674-4_43
   Haghighatkhah A, 2018, J SYST SOFTWARE, V146, P80, DOI 10.1016/j.jss.2018.08.061
   Heck P, 2018, SOFTWARE QUAL J, V26, P127, DOI 10.1007/s11219-016-9336-4
   Hettiarachchi C, 2016, INFORM SOFTWARE TECH, V69, P1, DOI 10.1016/j.infsof.2015.08.008
   Horváth F, 2019, SOFTWARE QUAL J, V27, P79, DOI 10.1007/s11219-017-9389-z
   Huang YC, 2012, J SYST SOFTWARE, V85, P626, DOI 10.1016/j.jss.2011.09.063
   Kandil P., 2015, INDIAN J PEDIATR, P1, DOI [10.1109/ICTA.2015.7426903, DOI 10.1109/ICTA.2015.7426903]
   Kandil P, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1794
   Kandil P, 2014, 2014 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P132, DOI 10.1109/ISSREW.2014.96
   Knauss E, 2015, 2015 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON RAPID CONTINUOUS SOFTWARE ENGINEERING (RCOSE), P19, DOI 10.1109/RCoSE.2015.11
   Lachmann R., 2015, P 19 INT C SOFTW PRO, P81
   Li XL, 2018, EMPIR SOFTW ENG, V23, P1, DOI 10.1007/s10664-016-9494-9
   Lin CT, 2013, IEEE INT C ENG COMP, P171, DOI 10.1109/ICECCS.2013.33
   Lu YF, 2016, PROC INT CONF SOFTW, P535, DOI 10.1145/2884781.2884874
   Ma CL, 2017, IEEE INT CON AUTO SC, P944, DOI 10.1109/COASE.2017.8256225
   Ma T, 2019, SOFTWARE QUAL J, V27, P615, DOI 10.1007/s11219-018-9437-3
   Magalhaes C, 2017, II BRAZILIAN SYMPOSIUM ON SYSTEMATIC AND AUTOMATED SOFTWARE TESTING (SAST 2017), DOI 10.1145/3128473.3128478
   Mahali P, 2018, INT J SYST ASSUR ENG, V9, P1063, DOI 10.1007/s13198-018-0736-7
   Miranda B, 2018, SOFTWARE QUAL J, V26, P1571, DOI 10.1007/s11219-017-9388-0
   Miranda B, 2017, J SYST SOFTWARE, V131, P528, DOI 10.1016/j.jss.2016.06.058
   Ni C, 2017, J COMPUT SCI TECH-CH, V32, P1090, DOI 10.1007/s11390-017-1785-0
   Ouni A, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1843
   Ouriques JFS, 2018, SOFTWARE QUAL J, V26, P1451, DOI 10.1007/s11219-017-9398-y
   Özdagoglu G, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2162
   Panichella A, 2015, IEEE T SOFTWARE ENG, V41, P358, DOI 10.1109/TSE.2014.2364175
   Rosero RH, 2017, IEEE ACCESS, V5, P18419, DOI 10.1109/ACCESS.2017.2749502
   Rosero RH, 2016, INT J SOFTW ENG KNOW, V26, P675, DOI 10.1142/S0218194016300013
   Shin SY, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P49, DOI 10.1145/3213846.3213852
   Silva D, 2016, IEEE C EVOL COMPUTAT, P4508, DOI 10.1109/CEC.2016.7744363
   Souto S., 2017, ARXIV170203457CS
   Spieker H, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P12, DOI 10.1145/3092703.3092709
   Thangiah M, 2016, 2016 3RD INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION SCIENCES (ICCOINS), P600, DOI 10.1109/ICCOINS.2016.7783283
   Wang XL, 2019, MOB INF SYST, V2019, DOI 10.1155/2019/9083956
   Wang XL, 2016, INTERNATIONAL WORKSHOP ON CONTINUOUS SOFTWARE EVOLUTION AND DELIVERY, CSED 2016, P41, DOI [10.1145/2896941.2896949, 10.1109/CSED.2016.016]
   Wang X, 2014, CHANDOS ASIAN STUD, P1, DOI 10.1007/s00382-014-2387-y
   Zhao DD, 2019, SOFTWARE QUAL J, V27, P1045, DOI 10.1007/s11219-018-9435-5
NR 57
TC 18
Z9 20
U1 5
U2 30
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 397
EP 423
DI 10.1007/s11219-019-09463-4
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000538379800002
DA 2024-07-18
ER

PT J
AU Salva, S
   Blot, E
AF Salva, Sebastien
   Blot, Elliott
TI Model generation of component-based systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model learning; Formal models; Reverse engineering; Component-based
   systems
ID STATE MACHINES; INFERENCE; SOFTWARE
AB This paper presents COnfECt, a model learning approach, which aims at recovering the functioning of a component-based system from its execution traces. We refer here to non concurrent systems whose internal interactions among components are not observable from the environment. COnfECt is specialised into the detection of components of a black-box system and in the inference of models called systems of labelled transition systems (LTS). COnfECt tries to detect components and their specific behaviours in traces, then it generates LTS for every component discovered, which captures its behaviours. Besides, it synchronises the LTSs together to express the functioning of the whole system. COnfECt relies on machine learning techniques to build models: it uses the notion of correlation among actions in traces to detect component behaviours and exploits a clustering technique to merge similar LTSs and synchronise them. We describe the three steps of COnfECt and the related algorithms in this paper. Then, we present some preliminary experimentations.
C1 [Salva, Sebastien] Univ Clermont Auvergne, IUT Clermont Ferrand, F-63000 Clermont Ferrand, France.
   [Blot, Elliott] Univ Clermont Auvergne, F-63000 Clermont Ferrand, France.
C3 Universite Clermont Auvergne (UCA); Universite Clermont Auvergne (UCA)
RP Salva, S (corresponding author), Univ Clermont Auvergne, IUT Clermont Ferrand, F-63000 Clermont Ferrand, France.
EM sebastien.salva@uca.fr; elliott.blot@uca.fr
FU French Project VASOC (Auvergne-Rhone-Alpes Region)
FX Research supported by the French Project VASOC (Auvergne-Rhone-Alpes
   Region) https://vasoc.limos.fr/
CR Aichernig BK, 2017, LECT NOTES COMPUT SC, V10227, P19, DOI 10.1007/978-3-319-57288-8_2
   Alur R, 2005, ACM SIGPLAN NOTICES, V40, P98, DOI 10.1145/1047659.1040314
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   Antunes J., 2011, 2011 18th Working Conference on Reverse Engineering, P169, DOI 10.1109/WCRE.2011.28
   Berg T, 2006, LECT NOTES COMPUT SC, V3922, P107
   BESCHASTNIKH I, 2011, P 19 ACM SIGSOFT S 1, P267, DOI DOI 10.1145/2025113.2025151
   Beschastnikh I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P468, DOI 10.1145/2568225.2568246
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   Cohen W.W., 2003, IJCAI WORKSH INF INT, P73, DOI DOI 10.5555/3104278.3104293
   Dallmeier V, 2012, IEEE T SOFTWARE ENG, V38, P243, DOI 10.1109/TSE.2011.105
   Dupont P., 1996, Grammatical Inference: Learning Syntax from Sentences. Third International Colloquium, ICGI-96 Proceedings, P222, DOI 10.1007/BFb0033357
   Durand W, 2015, 2015 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CODESIGN (MEMOCODE), P138, DOI 10.1109/MEMCOD.2015.7340480
   Ernst M. D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P213, DOI 10.1109/ICSE.1999.841011
   Falcone Y, 2011, LECT NOTES COMPUT SC, V7041, P204, DOI 10.1007/978-3-642-24690-6_15
   Fu QA, 2009, IEEE DATA MINING, P149, DOI 10.1109/ICDM.2009.60
   Groz R, 2008, LECT NOTES COMPUT SC, V5047, P216, DOI 10.1007/978-3-540-68524-1_16
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   Hossen K, 2014, IEEE ICST WORKSHOP, P22, DOI 10.1109/ICSTW.2014.47
   Howar F, 2012, LECT NOTES COMPUT SC, V7148, P251, DOI 10.1007/978-3-642-27940-9_17
   Krka I., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P179, DOI 10.1145/1810295.1810324
   Lo D, 2012, J SYST SOFTWARE, V85, P2063, DOI 10.1016/j.jss.2012.04.001
   Lorenzoli D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P501, DOI 10.1145/1368088.1368157
   Makanju A, 2012, IEEE T KNOWL DATA EN, V24, P1921, DOI 10.1109/TKDE.2011.138
   Mariani Leonardo, 2008, 2008 IEEE International Symposium on Software Reliability Engineering, P117, DOI 10.1109/ISSRE.2008.48
   Mariani L, 2007, IEEE SOFTWARE, V24, P76, DOI 10.1109/MS.2007.138
   Mariani L, 2017, IEEE T SOFTWARE ENG, V43, P715, DOI 10.1109/TSE.2016.2623623
   Meinke K, 2011, LECT NOTES COMPUT SC, V6706, P134, DOI 10.1007/978-3-642-21768-5_11
   Messaoudi S, 2018, INT C PROGRAM COMPRE, P167, DOI 10.1145/3196321.3196340
   Ohmann T., 2014, P IEEE ACM INT C AUT, P19, DOI [10.1145/2642937.2642988, DOI 10.1145/2642937.2642988, 10.1145/2642937, DOI 10.1145/2642937]
   Pastore F, 2017, IEEE INT CONF SOFTW, P401, DOI 10.1109/ICST.2017.43
   Petrenko A, 2017, LECT NOTES COMPUT SC, V10533, P126, DOI 10.1007/978-3-319-67549-7_8
   Pradel M, 2009, IEEE INT CONF AUTOM, P371, DOI 10.1109/ASE.2009.60
   Raffelt Harald, 2005, P 10 INT WORKSH FORM, P62, DOI [10.1145/1081180.1081189, DOI 10.1145/1081180.1081189]
   SALVA S, 2018, P 13 INT C SOFTW TEC, P298, DOI DOI 10.5220/0006848302980305
   Salva S, 2018, LECT NOTES COMPUT SC, V11146, P142, DOI 10.1007/978-3-319-99927-2_12
   Shahbaz M, 2014, SOFTW TEST VERIF REL, V24, P253, DOI 10.1002/stvr.1491
   Tan P. N., 2005, Introduction to Data Mining
   Tappler M, 2017, IEEE INT CONF SOFTW, P276, DOI 10.1109/ICST.2017.32
   Vaarandi R, 2015, INT CONF NETW SER, P1, DOI 10.1109/CNSM.2015.7367331
   van der Bijl M, 2004, LECT NOTES COMPUT SC, V2931, P86
   WILLETT P, 1988, INFORM PROCESS MANAG, V24, P577, DOI 10.1016/0306-4573(88)90027-1
   Yoon K., 1995, Multiple Attribute Decision Making-An 1069 Introduction, DOI [10.1007/978-3-642-48318-9, DOI 10.4135/9781412985161]
   ZHU JM, 2019, ARXIV181103509, P121
NR 44
TC 1
Z9 1
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 789
EP 819
DI 10.1007/s11219-019-09485-y
EA JAN 2020
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000505345000001
DA 2024-07-18
ER

PT J
AU Raza, M
   Faria, JP
   Salazar, R
AF Raza, Mushtaq
   Faria, Joao Pascoal
   Salazar, Rafael
TI Assisting software engineering students in analyzing their performance
   in software development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Performance analysis; Software engineering education; Controlled
   experiment; Personal software process
AB Collecting product and process measures in software development projects, particularly in education and training environments, is important as a basis for assessing current performance and opportunities for improvement. However, analyzing the collected data manually is challenging because of the expertise required, the lack of benchmarks for comparison, the amount of data to analyze, and the time required to do the analysis. ProcessPAIR is a novel tool for automated performance analysis and improvement recommendation; based on a performance model calibrated from the performance data of many developers, it automatically identifies and ranks potential performance problems and root causes of individual developers. In education and training environments, it increases students' autonomy and reduces instructors' effort in grading and feedback. In this article, we present the results of a controlled experiment involving 61 software engineering master students, half of whom used ProcessPAIR in a Personal Software Process (PSP) performance analysis assignment, and the other half used a traditional PSP support tool (Process Dashboard) for performing the same assignment. The results show significant benefits in terms of students' satisfaction (average score of 4.78 in a 1-5 scale for ProcessPAIR users, against 3.81 for Process Dashboard users), quality of the analysis outcomes (average grades achieved of 88.1 in a 0-100 scale for ProcessPAIR users, against 82.5 for Process Dashboard users), and time required to do the analysis (average of 252 min for ProcessPAIR users, against 262 min for Process Dashboard users, but with much room for improvement).
C1 [Raza, Mushtaq; Faria, Joao Pascoal] Univ Porto, Fac Engn, INESC TEC, Rua Dr Roberto Frias S-N, P-4200465 Porto, Portugal.
   [Salazar, Rafael] Tecnol Monterrey, Ave Eugenio Garza Sada 2501 Col Tecnol, Monterrey 64849, Nuevo Leon, Mexico.
C3 Universidade do Porto; INESC TEC; Tecnologico de Monterrey
RP Raza, M (corresponding author), Univ Porto, Fac Engn, INESC TEC, Rua Dr Roberto Frias S-N, P-4200465 Porto, Portugal.
EM mushtaq.raza@fe.up.pt; jpf@fe.up.pt; rafael.salazar@itesm.mx
RI , Mushtaq/C-8529-2017; Hakami, Halemah/KCL-5084-2024; Raza,
   Mushtaq/N-6763-2019; Faria, Joao/B-5496-2012
OI , Mushtaq/0000-0003-2890-8072; Faria, Joao/0000-0003-3825-3954
FU ERDF - European Regional Development Fund through the Operational
   Programme for Competitiveness and Internationalisation - COMPETE 2020
   Programme [POCI-01-0145-FEDER-006961]; National Funds through the FCT -
   Fundacao para a Ciencia e a Tecnologia [UID/EEA/50014/2013,
   SFRH/BD/85174/2012]
FX This work is partially financed by the ERDF - European Regional
   Development Fund through the Operational Programme for Competitiveness
   and Internationalisation - COMPETE 2020 Programme within the project
   POCI-01-0145-FEDER-006961, and by National Funds through the FCT -
   Fundacao para a Ciencia e a Tecnologia as part of project
   UID/EEA/50014/2013 and research grant SFRH/BD/85174/2012.
CR Alperowitz L, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P323, DOI 10.1145/2889160.2889183
   Alves G, 2010, CHEM ENG METHOD TECH, P1
   ALVES TS., 2012, THESIS
   [Anonymous], 2004, XP Ser
   Basili VR, 2007, LECT NOTES COMPUT SC, V4336, P33
   Breiman L., 1983, CLASSIFICATION REGRE
   Campbell, 2002, EXPT QUASIEXPERIMENT
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Humphrey W. S., 2009, SOFTWARE QUALITY PRO
   Humphrey WattsS., 2005, PSPSM A Self-Improvement Process for Software Engineers
   Jedlitschka A., 2008, REPORTING EXPT SOFTW
   Ko AJ, 2015, EMPIR SOFTW ENG, V20, P110, DOI 10.1007/s10664-013-9279-3
   Kumar V., 2015, LECT NOTES ED TECHNO, P27, DOI [10. 1007/978-3-662-44447-4_2, DOI 10.1007/978-3-662-44447-4_2]
   Raza M, 2016, J SOFTW-EVOL PROC, V28, P254, DOI 10.1002/smr.1759
   Raza M., 2016, 28 INT C SOFTW ENG K, DOI [10. 18293/SEKE2016-205, DOI 10.18293/SEKE2016-205]
   Raza M., 2017, 39 INT C SOFTW ENG I
   Raza M., 2017, THESIS
   Raza M, 2016, IEEE INT CONF AUTOM, P798, DOI 10.1145/2970276.2970284
   Rong GP, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P364, DOI 10.1145/2889160.2889189
   Saltelli A., 2008, SENSITIVITY ANAL
   Shalizi C., 2009, Classification and regression trees
   Shin H, 2007, LECT NOTES COMPUT SC, V4470, P73
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   Thisuk S, 2014, 2014 11TH INTERNATIONAL CONFERENCE ON ELECTRICAL ENGINEERING/ELECTRONICS, COMPUTER, TELECOMMUNICATIONS AND INFORMATION TECHNOLOGY (ECTI-CON)
   Tuma Solutions LLC, 2015, PROC DASHB
   Visser J., 2015, Building Maintainable Software
NR 26
TC 4
Z9 5
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1209
EP 1237
DI 10.1007/s11219-018-9433-7
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400010
DA 2024-07-18
ER

PT J
AU Sulaman, SM
   Beer, A
   Felderer, M
   Höst, M
AF Sulaman, Sardar Muhammad
   Beer, Armin
   Felderer, Michael
   Host, Martin
TI Comparison of the FMEA and STPA safety analysis methods-a case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Hazard analysis; Safety analysis; Critical systems; Failure mode and
   effect analysis; System theoretic process analysis
ID USER ACCEPTANCE; COMPLEX
AB As our society becomes more and more dependent on IT systems, failures of these systems can harm more and more people and organizations. Diligently performing risk and hazard analysis helps to minimize the potential harm of IT system failures on the society and increases the probability of their undisturbed operation. Risk and hazard analysis is an important activity for the development and operation of critical software intensive systems, but the increased complexity and size puts additional requirements on the effectiveness of risk and hazard analysis methods. This paper presents a qualitative comparison of two hazard analysis methods, failure mode and effect analysis (FMEA) and system theoretic process analysis (STPA), using case study research methodology. Both methods have been applied on the same forward collision avoidance system to compare the effectiveness of the methods and to investigate what are the main differences between them. Furthermore, this study also evaluates the analysis process of both methods by using a qualitative criteria derived from the technology acceptance model (TAM). The results of the FMEA analysis were compared to the results of the STPA analysis, which were presented in a previous study. Both analyses were conducted on the same forward collision avoidance system. The comparison shows that FMEA and STPA deliver similar analysis results.
C1 [Sulaman, Sardar Muhammad; Host, Martin] Lund Univ, Dept Comp Sci, Lund, Sweden.
   [Beer, Armin] Beer Test Consulting, Baden, Switzerland.
   [Felderer, Michael] Univ Innsbruck, Dept Comp Sci, Innsbruck, Austria.
   [Felderer, Michael] Blekinge Inst Technol, Dept Software Engn, Karlskrona, Sweden.
C3 Lund University; University of Innsbruck; Blekinge Institute Technology
RP Sulaman, SM (corresponding author), Lund Univ, Dept Comp Sci, Lund, Sweden.
EM Sardar@cs.lth.se
RI Felderer, Michael/AAF-4909-2020; Höst, Martin/KDN-4323-2024
OI Höst, Martin/0000-0002-9360-8693
FU Swedish Civil Contingencies Agency; Austrian Research Promotion Agency
   (FFG) [FFG 822740]
FX This work was funded by the Swedish Civil Contingencies Agency under a
   grant for PRIVAD, Program for Risk and Vulnerability Analysis
   Development, as well as by the Austrian Research Promotion Agency (FFG)
   under a grant for QE LaB-Living Models for Open Systems (FFG 822740).
CR [Anonymous], 1999, Proceedings of the 17th International Systems Safety Conference
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], INF SYST J
   [Anonymous], 2013, P 17 INT C EVALUATIO
   Becker J.C., 1996, Proceedings of the High-Assurance Systems Engineering Workshop, P228
   Coelingh Erik, 2010, 2010 13th International IEEE Conference on Intelligent Transportation Systems (ITSC 2010), P155, DOI 10.1109/ITSC.2010.5625077
   DAVIS FD, 1989, MANAGE SCI, V35, P982, DOI 10.1287/mnsc.35.8.982
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   Erdogan G, 2014, INT J SOFTW TOOLS TE, V16, P627, DOI 10.1007/s10009-014-0330-5
   Felderer M, 2014, INT J SOFTW TOOLS TE, V16, P559, DOI 10.1007/s10009-014-0332-3
   Fleming CH, 2013, SAFETY SCI, V55, P173, DOI 10.1016/j.ssci.2012.12.005
   Grunske L, 2007, INT CONF QUANT EVAL, P119, DOI 10.1109/QEST.2007.18
   IEC, 2006, 608122006 IEC
   Ishimatsu T., 2010, NASA 2010 4 5 ANN WO
   Ishimatsu T, 2014, J SPACECRAFT ROCKETS, V51, P509, DOI 10.2514/1.A32449
   Jacobs S., 2013, 2013 P ANN REL MAINT, P1, DOI [10.1109/SECON.2013.6567494, DOI 10.1109/RAMS.2013.6517710]
   Lethbridge TC, 2005, EMPIR SOFTW ENG, V10, P311, DOI 10.1007/s10664-005-1290-x
   Leveson NG, 2012, SAE INT J AEROSP, V5, P233, DOI 10.4271/2012-01-2134
   Leveson NG, 2012, ENG SAFER WORLD SYST
   MCDERMID JA, 1995, COMPASS '95 - PROCEEDINGS OF THE TENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P37, DOI 10.1109/CMPASS.1995.521885
   McDermott R.E., 2008, The basics of FMEA
   McDonald M., 2008, The Practical Guide to Defect Prevention
   Nakao Haruka, 2011, Proceedings of the 5th IAASS Conference - A Safer Space for a Safer World, P497
   Peischl B, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P254, DOI 10.1109/QRS.2016.37
   Pries K.H., 1998, FAILURE MODE EFFECTS
   Ramler R, 2015, LECT NOTES COMPUT SC, V9459, P355, DOI 10.1007/978-3-319-26844-6_26
   Raspotnig C, 2013, J SYST SOFTWARE, V86, P1124, DOI 10.1016/j.jss.2012.12.002
   Redmill F., 2002, Engineering Management Journal, V12, P91, DOI 10.1049/em:20020206
   Redmill F., 1999, SYSTEM SAFETY HAZOP
   Schmittner C, 2014, LECT NOTES COMPUT SC, V8666, P310, DOI 10.1007/978-3-319-10506-2_21
   Sindre G, 2005, REQUIR ENG, V10, P34, DOI 10.1007/s00766-004-0194-4
   Stålhane T, 2007, LECT NOTES COMPUT SC, V4801, P423
   Suiran Yu, 2011, Proceedings of 2011 9th International Conference on Reliability, Maintainability and Safety (ICRMS 2011), P954, DOI 10.1109/ICRMS.2011.5979423
   Sulaman S. M., 2014, ISCRAM 2014 C P 11 I, P424
   Thomas J., 2011, P 29 INT SYST SAF C, P1
   *US DEP DEF, 1980, MILSTD1629A US DEP D
   Yin R.K., 2011, Qualitative research from start to finish
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 44
TC 50
Z9 52
U1 2
U2 31
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 349
EP 387
DI 10.1007/s11219-017-9396-0
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000010
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Nguyen, T
   Zhao, XH
AF Nguyen, Tai
   Zhao, Xinghui
TI Performance tuning for actor programs through decoupled concurrency
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Performance tuning; Programmability; Concurrency; Actors
ID THREAD-LEVEL PARALLELISM
AB Recent advances in hardware architectures, particularly multicore and many-core processors, implicitly require programmers to write concurrent programs that can be executed in parallel on multiple cores. However, writing correct and efficient concurrent programs is challenging. The traditional way of writing concurrent programs mixes concurrency and functionality code. As a result, in order to fully exploit the potentials that the underlying hardware provides, the code must be changed to utilize the more advanced hardware resources. To address this challenge, we propose a new parallel programming paradigm which separates programs' concurrency from their functionality code, harnessing the notable programmability of the Actor model. Specifically, the level of concurrency of an actor system can be dynamically tuned at run-time based on predefined tuning policies, which are programmable and reusable. We have developed two tuning policies, and experimental results show that our approach is effective in achieving high performance on high-end computing architectures, yet it does not introduce extra overhead on the hardware which does not support high level of concurrency. This can be done without extra effort from the programmers. This approach also opens up many opportunities for programming concurrency tuning policies for different purposes without changing the code of the actual computations.
C1 [Nguyen, Tai; Zhao, Xinghui] Washington State Univ Vancouver, Sch Engn & Comp Sci, 14204 NE Salmon Creek Ave, Vancouver, WA 98686 USA.
C3 Washington State University
RP Zhao, XH (corresponding author), Washington State Univ Vancouver, Sch Engn & Comp Sci, 14204 NE Salmon Creek Ave, Vancouver, WA 98686 USA.
EM tai.t.nguyen@wsu.edu; x.zhao@wsu.edu
FU WSU New Faculty Seed Grant
FX This work is supported in part by a WSU New Faculty Seed Grant.
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Andrews GregR., 1999, Foundations of parallel and distributed programming
   [Anonymous], 2000, THE E LANGUAGE
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   Asanovic K, 2009, COMMUN ACM, V52, P56, DOI 10.1145/1562764.1562783
   Astley M., 1998, TECH REP
   Blake G, 2010, CONF PROC INT SYMP C, P302, DOI 10.1145/1816038.1816000
   Campanoni S, 2012, IEEE MICRO, V32, P8, DOI 10.1109/MM.2012.50
   Costanza P., 2010, P ACM INT C OBJ OR P, P377
   Garcia S, 2012, IEEE MICRO, V32, P42, DOI 10.1109/MM.2012.52
   Gropp William D, 1999, USING MPI PORTABLE P, V1
   Haller P, 2007, LECT NOTES COMPUT SC, V4467, P171
   Hylands C., 2003, TECH REP
   Jang M., 2004, TECH REP
   KAFURA D, 1990, J OBJECT-ORIENT PROG, V3, P25
   Karmani R. K., 2009, P 7 INT C PRINC PRAC
   Kasahara H., 2001, Languages and Compilers for Parallel Computing, P189, DOI [10.1007/3-540-45574-4_13, DOI 10.1007/3-540-45574-4_13]
   KIM W, 1997, THESIS
   Microsoft Corporation, 2008, AX PROGR LANG
   Srinivasan S, 2008, LECT NOTES COMPUT SC, V5142, P104, DOI 10.1007/978-3-540-70592-5_6
   STURMAN DC, 1994, 13TH SYMPOSIUM ON RELIABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P148, DOI 10.1109/RELDIS.1994.336900
   Sutter H., 2005, ACM Queue, V3, P54, DOI 10.1145/1095408.1095421
   Varela C, 2001, ACM SIGPLAN NOTICES, V36, P20, DOI 10.1145/583960.583964
   Zhao X., 2016, P 31 ACM S APPL COMP, P1358
   Zhao XY, 2013, J ANAL METHODS CHEM, V2013, DOI 10.1155/2013/581093
NR 25
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 1097
EP 1117
DI 10.1007/s11219-017-9371-9
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000010
DA 2024-07-18
ER

PT J
AU Corazza, A
   Maggio, V
   Scanniello, G
AF Corazza, Anna
   Maggio, Valerio
   Scanniello, Giuseppe
TI Coherence of comments and method implementations: a dataset and an
   empirical investigation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Comment coherence; Maintenance; Experimental protocol; Dataset; Lexical
   information; Classification
ID SOURCE CODE; INFORMATION; AGREEMENT; LOCATION; SEARCH
AB In this paper, we present the results of a manual assessment on the coherence between the comments and the implementation of 3636 methods in three open source software applications (for one of these applications, we considered two different subsequent versions) implemented in Java. The results of this assessment have been collected in a dataset we made publicly available on the Web. The creation of this dataset is based on a protocol that is detailed in this paper. We present that protocol to let researchers evaluate the goodness of our dataset and to ease its future possible extensions. Another contribution of this paper consists in preliminarily investigating on the effectiveness of adopting a Vector Space Model (VSM) with the tf-idf schema to discriminate coherent and non-coherent methods. We observed that the lexical similarity alone is not sufficient for this distinction, while encouraging results have been obtained by applying an Support Vector Machine (SVM) classifier on the whole vector space.
C1 [Corazza, Anna] Univ Naples Federico II, Dept Elect Engn & Informat Technol, Naples, Italy.
   [Maggio, Valerio] Fdn Bruno Kessler, MPBA Grp, Trento, Italy.
   [Scanniello, Giuseppe] Univ Basilicata, Dept Math Informat Technol & Econ, Potenza, Italy.
C3 University of Naples Federico II; Fondazione Bruno Kessler; University
   of Basilicata
RP Corazza, A (corresponding author), Univ Naples Federico II, Dept Elect Engn & Informat Technol, Naples, Italy.
EM anna.corazza@unina.it; vmaggio@fbk.eu; giuseppe.scanniello@unibas.it
CR [Anonymous], 2012, EXPT SOFTWARE ENG CO
   Antoniol G, 2000, PROC IEEE INT CONF S, P40, DOI 10.1109/ICSM.2000.883003
   Bergstra J, 2012, J MACH LEARN RES, V13, P281
   Binkley D., 2013, DATASET EVALUATING I
   Bishop Christopher M, 2006, PATTERN RECOGN, V128, P1
   Campbell I., 2011, LEARNING SUPPORT VEC
   Caprile B, 2000, PROC IEEE INT CONF S, P97, DOI 10.1109/ICSM.2000.883022
   Cherkassky V, 1997, IEEE Trans Neural Netw, V8, P1564, DOI 10.1109/TNN.1997.641482
   COHEN J, 1968, PSYCHOL BULL, V70, P213, DOI 10.1037/h0026256
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Corazza A, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P76, DOI 10.1109/SEAA.2015.20
   Corazza A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P233, DOI 10.1109/ICSM.2012.6405277
   Corazza A, 2011, EUR CON SFTWR MTNCE, P35, DOI 10.1109/CSMR.2011.8
   de Souza S.C.B., 2005, P 23 ANN INT C DES C, P68, DOI [10.1145/1085313, 10.1145/1085313.1085331]
   DeLine Robert., 2005, SOFTVIS 05, P183, DOI [10.1145/1056018.1056044, DOI 10.1145/1056018.1056044]
   diaeresis>tze Hinrich Schu<spacing, 2008, INTRO INFORM RETRIEV, V39
   Dit B, 2013, J SOFTW-EVOL PROC, V25, P53, DOI 10.1002/smr.567
   Fluri B, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P70, DOI 10.1109/WCRE.2007.21
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Freund R.J., 2003, STAT METHODS
   Jiang Zhen Ming, 2006, MSR '06: Proceedings of the 2006 international workshop on Mining software repositories, P179, DOI DOI 10.1145/1137983.1138030
   Keyes J., 2002, Software engineering handbook
   Kuhn A, 2007, INFORM SOFTWARE TECH, V49, P230, DOI 10.1016/j.infsof.2006.10.017
   LaToza T. D., 2006, 28th International Conference on Software Engineering Proceedings, P492, DOI 10.1145/1134285.1134355
   Lawrie Dawn, 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P3, DOI 10.1109/WCRE.2010.10
   McMillan C, 2012, IEEE T SOFTWARE ENG, V38, P1069, DOI 10.1109/TSE.2011.84
   Robillard MP, 2004, IEEE T SOFTWARE ENG, V30, P889, DOI 10.1109/TSE.2004.101
   Roehm T, 2012, PROC INT CONF SOFTW, P255, DOI 10.1109/ICSE.2012.6227188
   Salviulo F., 2014, P INT C EV ASS SOFTW, P423
   Scanniello G, 2015, EMPIR SOFTW ENG, V20, P1666, DOI 10.1007/s10664-014-9327-7
   Shin Hwei Tan, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P260, DOI 10.1109/ICST.2012.106
   Singer Janice, 1997, Proceedings of the 1997 Conference of the Centre for Advanced Studies on Collaborative Research. CASCON '97, P21
   SOLOWAY E, 1984, IEEE T SOFTWARE ENG, V10, P595, DOI 10.1109/TSE.1984.5010283
   Steidl D, 2013, CONF PROC INT SYMP C, P83, DOI 10.1109/ICPC.2013.6613836
   Tan L., 2007, ICOMMENT BUGS BAD CO
   van der Maaten L, 2014, J MACH LEARN RES, V15, P3221
NR 36
TC 12
Z9 12
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 751
EP 777
DI 10.1007/s11219-016-9347-1
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200019
DA 2024-07-18
ER

PT J
AU Foidl, H
   Felderer, M
AF Foidl, Harald
   Felderer, Michael
TI Integrating software quality models into risk-based testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Risk-based testing; Software quality models; Software testing; Software
   quality; Software risk management; Test management; Test process
   improvement; Software process improvement; Case study
ID OBJECT-ORIENTED METRICS; FAULT PREDICTION
AB Risk-based testing is a frequently used testing approach which utilizes identified risks of a software system to provide decision support in all phases of the testing process. Risk assessment, which is a core activity of every risk-based testing process, is often done in an ad hoc manual way. Software quality assessments, based on quality models, already describe the product-related risks of a whole software product and provide objective and automation-supported assessments. But so far, quality models have not been applied for risk assessment and risk-based testing in a systematic way. This article tries to fill this gap and investigates how the information and data of a quality assessment based on the open quality model QuaMoCo can be integrated into risk-based testing. We first present two generic approaches showing how quality assessments based on quality models can be integrated into risk-based testing and then provide the concrete integration on the basis of the open quality model QuaMoCo. Based on five open source products, a case study is performed. Results of the case study show that a risk-based testing strategy outperforms a lines of code-based testing strategy with regard to the number of defects detected. Moreover, a significant positive relationship between the risk coefficient and the associated number of defects was found.
C1 [Foidl, Harald] Univ Innsbruck, Comp Sci, Innsbruck, Austria.
   [Felderer, Michael] Univ Innsbruck, Inst Comp Sci, Innsbruck, Austria.
C3 University of Innsbruck; University of Innsbruck
RP Felderer, M (corresponding author), Univ Innsbruck, Inst Comp Sci, Innsbruck, Austria.
EM harald.foidl@uibk.ac.at; michael.felderer@uibk.ac.at
RI Felderer, Michael/AAF-4909-2020
FU University of Innsbruck; Medical University of Innsbruck; project QE LaB
   - Living Models for Open Systems - Austrian Federal Ministry of
   Economics (Bundesministerium fur Wirtschaft und Arbeit)
FX Open access funding provided by University of Innsbruck and Medical
   University of Innsbruck. This work has been supported by the project QE
   LaB - Living Models for Open Systems (www.qe-lab.at) funded by the
   Austrian Federal Ministry of Economics (Bundesministerium fur Wirtschaft
   und Arbeit). We thank Stefan Wagner for providing us with infos
   regarding QuaMoCo.
CR Al-Qutaish R.E., 2010, J AM SCI, V6, P166
   [Anonymous], 2011, ISO 13314
   [Anonymous], 1992, PRACTICAL SOFTWARE M
   [Anonymous], 1978, SIGMETRICS PERFORM E, DOI DOI 10.1145/1007775.811113
   [Anonymous], 2015, STAND GLOSS TERMS US
   [Anonymous], P 4 INT WORKSH PRED
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 29119 ISOIECIEEE
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Basili V. R., 1995, CSTR3443 U MAR DEP C
   Bissyande T. F., 2013, 24 INT S SOFTW REL E
   Boehm B.W., 1978, Characteristics of Software Quality
   Catal C, 2007, LECT NOTES COMPUT SC, V4589, P300
   Chacon Scott., 2014, Pro GIT - Everything you need to know about GIT, Vsecond
   Deissenboeck F., 2007, 2007 IEEE International Conference on Software Maintenance, P184, DOI 10.1109/ICSM.2007.4362631
   Deissenboeck F, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1007, DOI 10.1145/1985793.1985977
   Deissenboeck F, 2009, WOSQ: 2009 ICSE WORKSHOP ON SOFTWARE QUALITY, P9, DOI 10.1109/WOSQ.2009.5071551
   Dixon M., 2008, TECHNICAL REPORT
   Erdogan G, 2014, INT J SOFTW TOOLS TE, V16, P627, DOI 10.1007/s10009-014-0330-5
   Felderer M., 2015, SWQD 2015 LNBIP, P32
   Felderer M., 2016, SOFTWARE QUALITY J
   Felderer M, 2014, INT J SOFTW TOOLS TE, V16, P609, DOI 10.1007/s10009-014-0328-z
   Felderer M, 2014, INT J SOFTW TOOLS TE, V16, P559, DOI 10.1007/s10009-014-0332-3
   Felderer M, 2014, LECT NOTES COMPUT SC, V8803, P274, DOI 10.1007/978-3-662-45231-8_19
   Felderer M, 2014, LECT NOTES COMPUT SC, V8803, P292, DOI 10.1007/978-3-662-45231-8_21
   Felderer M, 2014, SOFTWARE QUAL J, V22, P543, DOI 10.1007/s11219-013-9226-y
   Felderer M, 2012, LECT NOTES BUS INF P, V94, P159
   FindBugs, 2003, FINDBUGS FIND BUGS J
   Franch X, 2003, IEEE SOFTWARE, V20, P34, DOI 10.1109/MS.2003.1159027
   Gerrard P., 2002, Risk-Based E-Business Testing
   Git, 2005, GIT DISTR EV IF YOUR
   GitHub Inc., 2008, CLOS ISS VIA COMM ME
   Google Inc, 2005, GOOGL AN AN TOOLS
   Graham D, 2008, FDN SOFTWARE TESTING
   Grzegorzewski P, 2011, LECT NOTES ARTIF INT, V7022, P342, DOI 10.1007/978-3-642-24764-4_30
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Huang F, 2013, J SOFTWARE ENG, V7, P114, DOI DOI 10.3923/JSE.2013
   Jureczko M., 2011, APPL SCI, V1, P86, DOI DOI 10.3390/APP9132764
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   Krusko A., 2003, THESIS
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   McCall J., 1977, Factors in software quality, V1
   McDonald J. H., 2014, HDB BIOL STAT
   Miguel JP., 2014, Int. J. Softw. Eng. Appl, V5, P31, DOI [DOI 10.5121/IJSEA.2014.5603, 10.5121/ijsea.2014, DOI 10.5121/IJSEA.2014]
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Neubauer J, 2014, INT J SOFTW TOOLS TE, V16, P569, DOI 10.1007/s10009-014-0321-6
   Orsini L., 2013, GitHub for beginners: don't get scared, get started
   Perry W.E., 1997, Surviving the top ten challenges of software testing: A people-oriented approach
   Pressman R. S., 2010, Software Engineering: A Practitioner's Approach
   Pries K. H., 2010, TESTING COMPLEX EMBE
   Radjenovic D, 2013, INFORM SOFTWARE TECH, V55, P1397, DOI 10.1016/j.infsof.2013.02.009
   Redmill F, 2005, SOFTW TEST VERIF REL, V15, P3, DOI 10.1002/stvr.310
   Redmill F, 2004, SOFTW TEST VERIF REL, V14, P3, DOI 10.1002/stvr.288
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Sharma A.K., 2005, Text Book of Correlations and Regression
   Singh P., 2011, International Journal of Computer Applications, V28, P13, DOI DOI 10.5120/3409-4756
   Spearman C, 1904, AM J PSYCHOL, V15, P72, DOI 10.2307/1412159
   TAYLOR R, 1990, J DIAGN MED SONOG, V6, P35, DOI 10.1177/875647939000600106
   Van Veenendaal E., 2009, PRACTICAL RISK BASED
   van Veenendaal Erik, 2012, PRISMA APPROACH PRAC
   Wagner S., 2012, TUMI129 I INF
   Wagner S., 2013, SOFTWARE PRODUCT QUA
   Wagner S. etal., 2012, Tech. Rep. TUM-I128
   Wagner S, 2015, INFORM SOFTWARE TECH, V62, P101, DOI 10.1016/j.infsof.2015.02.009
   Wagner S, 2012, PROC INT CONF SOFTW, P1133, DOI 10.1109/ICSE.2012.6227106
   Windmuller S., 2013, P 16 INT ACM SIGS S, P111, DOI [10.1145/2465449.2465469, DOI 10.1145/2465449.2465469]
   Zeiss B., 2007, SOFTWARE ENG, V15, P231
   Zhang HY, 2009, PROC IEEE INT CONF S, P274, DOI 10.1109/ICSM.2009.5306304
   Zhang Q, 2006, P INT COMP SOFTW APP, P121
   Zimmermann T., 2008, PREDICTING BUGS HIST, P69, DOI [10.1007/978-3-540-76440-3_4, DOI 10.1007/978-3-540-76440-3_4]
NR 70
TC 11
Z9 14
U1 0
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 809
EP 847
DI 10.1007/s11219-016-9345-3
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200021
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Carvalho, RM
   Andrade, RMD
   de Oliveira, KM
   Santos, ID
   Bezerra, CIM
AF Carvalho, Rainara Maia
   de Castro Andrade, Rossana Maria
   de Oliveira, Kathia Marcal
   Santos, Ismayle de Sousa
   Moreira Bezerra, Carla Ilane
TI Quality characteristics and measures for human-computer interaction
   evaluation in ubiquitous systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Ubiquitous systems; Human-computer interaction; Quality model; Quality
   characteristics; Software measures; Systematic mapping study
ID FRAMEWORK
AB The advent of ubiquitous systems places even more focus on users, since these systems must support their daily activities in such a transparent way that does not disturb them. Thus, much more attention should be provided to human-computer interaction (HCI) and, as a consequence, to its quality. Dealing with quality issues implies first the identification of the quality characteristics that should be achieved and, then, which software measures should be used to evaluate them in a target system. Therefore, this work aims to identify what quality characteristics and measures have been used for the HCI evaluation of ubiquitous systems. In order to achieve our goal, we performed a large literature review, using a systematic mapping study, and we present our results in this paper. We identified 41 pertinent papers that were deeply analyzed to extract quality characteristics and software measures. We found 186 quality characteristics, but since there were divergences on their definitions and duplicated characteristics, an analysis of synonyms by peer review based on the equivalence of definitions was also done. This analysis allowed us to define a final suitable set composed of 27 quality characteristics, where 21 are generic to any system but are particularized for ubiquitous applications and 6 are specific for this domain. We also found 218 citations of measures associated with the characteristics, although the majority of them are simple definitions with no detail about their measurement functions. Our results provide not only an overview of this area to guide researchers in directing their efforts but also it can help practitioners in evaluating ubiquitous systems using these measures.
C1 [Carvalho, Rainara Maia; de Castro Andrade, Rossana Maria; Santos, Ismayle de Sousa; Moreira Bezerra, Carla Ilane] Univ Fed Ceara, Comp Sci Dept DC, Grp Comp Networks Software Engn & Syst GREat, Fortaleza, Ceara, Brazil.
   [de Oliveira, Kathia Marcal] UVHC, CNRS UMR 8201, Lab Automat Control Mech & Comp Sci Ind & Human M, Valenciennes, France.
C3 Universidade Federal do Ceara; Centre National de la Recherche
   Scientifique (CNRS); Universite Polytechnique Hauts-de-France
RP Carvalho, RM (corresponding author), Univ Fed Ceara, Comp Sci Dept DC, Grp Comp Networks Software Engn & Syst GREat, Fortaleza, Ceara, Brazil.
EM rainaracarvalho@great.ufc.br; rossana@great.ufc.br;
   kathia.oliveira@univ-valenciennes.fr; ismaylesantos@great.ufc.br;
   carlabezerra@great.ufc.br
RI Andrade, Rossana M C/K-1790-2015
OI Maria de Castro Andrade, Rossana/0000-0002-0186-2994; Marcal de
   Oliveira, Kathia/0000-0001-8146-5966
FU FUNCAP (Ceara State Foundation for Support of Scientific and
   Technological Development, Brazil); CNRS (Centre National de la
   Recherche Scientifique, France) [INC-0064-00012.01.00/12]; CAPES; CNPq
FX We thank FUNCAP (Ceara State Foundation for Support of Scientific and
   Technological Development, Brazil) and CNRS (Centre National de la
   Recherche Scientifique, France) for the financial support of this work,
   which is a result of the Maximum Project-A Measurement-based Approach
   for the Quality Evaluation of Human-Computer Interaction in Ubiquitous
   Systems, under grant number INC-0064-00012.01.00/12. We also thank CAPES
   for sponsoring Rainara Maia Carvalho and Ismayle de Sousa Santos with
   PhD scholarships, and CNPq for sponsoring Rossana Maria de Castro
   Andrade with a Researcher Scholarship - DT Level 2.
CR Abi-Char P. E., 2010, P AG FRIENDL TECHN H
   Ammar L., 2015, SOFTW QUAL J, P1
   [Anonymous], 2009, Human-Computer Interaction Fundamentals
   [Anonymous], 2014, 25000 ISOEIC
   [Anonymous], 2001, 9126 ISOIEC
   [Anonymous], INT J DIGITAL SOC
   Bezerra C. I. M., 2014, INTERACTION HOMME MA
   Cappiello I, 2009, FIRST INTERNATIONAL WORKSHOP ON NEAR FIELD COMMUNICATION, PROCEEDINGS, P9, DOI 10.1109/NFC.2009.16
   Carvalho R. M., 2015, HCI INT
   Chalmers Dan, 1999, IEEE Communications Surveys & Tutorials, V2, P2, DOI 10.1109/COMST.1999.5340514
   Chang Y.-H., 2011, INT C COMPL INT SOFT
   da Silva C.M.R., 2013, ARXIV13036782
   Damián-Reyes P, 2011, WIRELESS PERS COMMUN, V56, P37, DOI 10.1007/s11277-009-9882-1
   De Moor K, 2010, MOBILE NETW APPL, V15, P378, DOI 10.1007/s11036-010-0223-0
   Dey AK, 2001, PERS UBIQUIT COMPUT, V5, P4, DOI 10.1007/s007790170019
   Evers C, 2014, FUTURE GENER COMP SY, V34, P110, DOI 10.1016/j.future.2013.12.010
   Evers V, 2010, STUD COMPUT INTELL, V281, P299
   Fenton N., 1997, PWS PUB
   Haapalainen E., 2010, P 12 ACM INT C UB CO
   Hernandes E., 2012, CLEI ELECT J, V15, P3, DOI DOI 10.19153/CLEIEJ.15.1.2
   International Organization For Standardization, 1998, ISO 9241-11
   Iqbal R., 2005, P 23 INT C DES COMM
   *ISO, 1999, 14598 ISOIEC
   ISO/IEC, 2011, ISO/IEC 25010:2011 Systems and software engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality models
   Jafari S., 2010, INT C INT TECHN SEC
   Jia L., 2009, 3 INT C MOB UB COMP
   Karaiskos D., 2009, BLED 2009 P, P12
   Karvonen H., 2014, 5 INT C APPL HUM FAC
   Kemp E. A., 2008, P 9 ACM SIGCHI NZ CH
   Kim H. J., 2008, P 3 INT C CONV HYBR
   Kim Y, 2006, 2006 INTERNATIONAL CONFERENCE ON HYBRID INFORMATION TECHNOLOGY, VOL 2, PROCEEDINGS, P576
   Kitchenham B., 2007, 2007001 EBSE
   Kitchenham BA., 2010, P EV ASS SOFTW ENG E, DOI [10.14236/ewic/EASE2010.4, DOI 10.14236/EWIC/EASE2010.4, 10.14236/EWIC/EASE2010.4]
   Ko I.-Y., 2010, ADV TECHNIQUES WEB I
   Kourouthanassis P. E., 2008, PAN HELL C INF PCI
   Kryvinska N., 2011, 5 INT C INN MOB INT
   Lee J., 2012, IEEE INT C MAN INN T
   Lee J., 2008, AS PAC C APCHI
   Liampotis N., 2009, INT C COMP SCI ENG
   Montagud S., 2012, SOFTWARE QUALITY J, V20
   Nielsen, 1994, USABILITY ENG
   Novais RL, 2013, INFORM SOFTWARE TECH, V55, P1860, DOI 10.1016/j.infsof.2013.05.008
   Oriol M, 2014, INFORM SOFTWARE TECH, V56, P1167, DOI 10.1016/j.infsof.2014.03.012
   Petersen K, 2008, P INT C EV ASS SOFTW, P1
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   Petersen K, 2013, 2013 JOINT CONFERENCE OF THE 23RD INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2013 EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA), P81, DOI 10.1109/IWSM-Mensura.2013.22
   Poppe R, 2007, LECT NOTES COMPUT SC, V4451, P234
   Ranganathan A., 2005, INT C PERV COMP COMM
   Reis R. A. C., 2015, USABILITY EVALUATION
   Rocha L. S., 2011, BRAZ S SOFTW ENG
   Ross T., 2001, INT J HUMAN COMPUTER
   Rubio JML, 2007, ELECT ROBOT AUTO MEC, P701, DOI 10.1109/CERMA.2007.4367769
   Ryu H., 2006, RES LETT INFORM MATH, V9, P13
   Sanchez-pi N., 2012, 3 INT S AMB INT ISAM
   Santos R. M., 2013, LAT AM C HUM COMP IN
   Scholtz J., 2004, IEEE PERVASIVE COMPU
   Silveira P. A. M., 2011, INFORM SOFTWARE TECH
   Song J., 2009, WORLD C SERV
   Sousa B., 2011, WIRED WIRELESS INTER
   Spinola R. O., 2012, INFORM SOFTWARE TECH
   Strope B., 2010, ADV SPEECH RECOGNITI
   Sun T., 2008, INT C ADV INF NETW A
   Tahir T., 2011, Proceedings of the 2011 Frontiers of Information Technology (FIT 2011), P39, DOI 10.1109/FIT.2011.15
   Thompson S. G., 2004, BT TECHNOLOGY J
   Toch E., 2011, ACM INT WORKSH CONT
   Viana J. R. M., 2014, BRAZ S COMP GAM DIG
   Wagner S., 2012, INT C PERV COMP TECH
   Waibel A., 2010, HDB AMBIENT INTELLIG
   Weihong-Guo A., 2008, IET INTELLIGENT TRAN
   WEISER M, 1991, SCI AM, V265, P94, DOI 10.1038/scientificamerican0991-94
   Wieringa R., 2005, REQUIREMENTS ENG
   Wohlin C, 2014, P 18 INT C EVALUATIO, DOI DOI 10.1145/2601248.2601268
   Wohlin C, 2013, J SYST SOFTWARE, V86, P2594, DOI 10.1016/j.jss.2013.04.076
   Wu CL, 2012, IEEE T SYST MAN CY A, V42, P15, DOI 10.1109/TSMCA.2011.2159584
   Zhang Y., 2006, INT C UB INT COMP
NR 75
TC 22
Z9 22
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 743
EP 795
DI 10.1007/s11219-016-9320-z
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300005
DA 2024-07-18
ER

PT J
AU Mansoor, U
   Kessentini, M
   Maxim, BR
   Deb, K
AF Mansoor, Usman
   Kessentini, Marouane
   Maxim, Bruce R.
   Deb, Kalyanmoy
TI Multi-objective code-smells detection using good and bad design examples
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Search-based software engineering; Software maintenance; Software
   metrics
AB Code-smells are identified, in general, by using a set of detection rules. These rules are manually defined to identify the key symptoms that characterize a code-smell using combinations of mainly quantitative (metrics), structural, and/or lexical information. We propose in this work to consider the problem of code-smell detection as a multi-objective problem where examples of code-smells and well-designed code are used to generate detection rules. To this end, we use multi-objective genetic programming (MOGP) to find the best combination of metrics that maximizes the detection of code-smell examples and minimizes the detection of well-designed code examples. We evaluated our proposal on seven large open-source systems and found that, on average, most of the different five code-smell types were detected with an average of 87 % of precision and 92 % of recall. Statistical analysis of our experiments over 51 runs shows that MOGP performed significantly better than state-of-the-art code-smell detectors.
C1 [Mansoor, Usman; Kessentini, Marouane; Maxim, Bruce R.] Univ Michigan, Dearborn, MI 48128 USA.
   [Deb, Kalyanmoy] Michigan State Univ, E Lansing, MI 48824 USA.
C3 University of Michigan System; University of Michigan; Michigan State
   University
RP Kessentini, M (corresponding author), Univ Michigan, Dearborn, MI 48128 USA.
EM marouane@umich.edu; kdeb@egr.msu.edu
RI Maxim, Bruce/ISV-0470-2023; Maxim, Bruce/AAU-1200-2021
OI Maxim, Bruce/0000-0002-0979-7787
CR Abbes M, 2011, EUR CON SFTWR MTNCE, P181, DOI 10.1109/CSMR.2011.24
   Abreu F., 1995, P 5 ICSQ
   Aghezzaf B, 2000, J GLOBAL OPTIM, V18, P91, DOI 10.1023/A:1008321026317
   Al Dallal J, 2015, INFORM SOFTWARE TECH, V58, P231, DOI 10.1016/j.infsof.2014.08.002
   [Anonymous], 2014, AUTOM SOFTW ENG, DOI DOI 10.1007/S10515-014-0175-X
   [Anonymous], EMPIR SOFTW ENG
   [Anonymous], P 20 INT C AUT SOFTW
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Bavota G, 2015, J SYST SOFTWARE, V107, P1, DOI 10.1016/j.jss.2015.05.024
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Concas G., 2013, MICROPATTERNS AGILE
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deb K., 2010, MULTIOBJECTIVE OPTIM
   Destefanis G, 2012, EUROMICRO CONF PROC, P302, DOI 10.1109/SEAA.2012.63
   Dhambri K, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P279
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Fontana FA, 2016, EMPIR SOFTW ENG, V21, P1143, DOI 10.1007/s10664-015-9378-4
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gil J. Y., 2005, ACM SIGPLAN NOTICES, V40
   Gong M, 2008, EVOLUTIONARY COMPUTA, V6, P225
   Hall T, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2629648
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Kessentini M., 2010, P 25 IEEE ACM INT C, P141
   Kessentini M, 2011, CONF PROC INT SYMP C, P81, DOI 10.1109/ICPC.2011.22
   Khomh F., 2009, P ICQS 09
   Kothari SC, 2004, SOFTWARE QUAL J, V12, P99, DOI 10.1023/B:SQJO.0000024058.90885.6a
   Kreimer J, 2005, ELECTRON NOTES THEOR, V141, P117, DOI 10.1016/j.entcs.2005.02.059
   Langdon WB, 2008, STUD COMPUT INTELL, V115, P927
   Maggioni S., 2010, P 2010 ICSE WORKSH E
   Maiga A., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P466, DOI 10.1109/WCRE.2012.56
   Manteghi M., 2010, 2010 IEEE Antennas and Propagation Society International Symposium, 11-17 July 2010, P1, DOI DOI 10.1109/APS.2010.5562223
   Mäntylä MV, 2006, EMPIR SOFTW ENG, V11, P395, DOI 10.1007/s10664-006-9002-8
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Munro M.J, 2005, P 11 INT SOFTW METR
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Palomba F, 2013, IEEE INT CONF AUTOM, P268, DOI 10.1109/ASE.2013.6693086
   Rasool G, 2015, J SOFTW-EVOL PROC, V27, P867, DOI 10.1002/smr.1737
   Sahin D, 2014, ACM T SOFTW ENG METH, V24, DOI 10.1145/2675067
   Salehie M., 2006, P 14 IEEE ICPC 06
   Sjoberg DIK, 2013, IEEE T SOFTWARE ENG, V39, P1144, DOI 10.1109/TSE.2012.89
   Travassos G. H., 1999, SIGPLAN Notices, V34, P47, DOI 10.1145/320385.320389
   Tufano M., 2015, ICSE
   van Emden E, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P97, DOI 10.1109/WCRE.2002.1173068
   Yamashita A, 2013, INFORM SOFTWARE TECH, V55, P2223, DOI 10.1016/j.infsof.2013.08.002
   Yamashita A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P306, DOI 10.1109/ICSM.2012.6405287
   Zitzler E, 2003, IEEE T EVOLUT COMPUT, V7, P117, DOI 10.1109/TEVC.2003.810758
NR 48
TC 38
Z9 42
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 529
EP 552
DI 10.1007/s11219-016-9309-7
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU8EZ
UT WOS:000401271700007
DA 2024-07-18
ER

PT J
AU Slivnik, B
AF Slivnik, Bostjan
TI Measuring the complexity of domain-specific languages developed using
   MDD
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-driven development; Domain-specific languages; Metamodel quality;
   Quality metrics
AB The standard ISO/IEC 25010 (SQuaRE) defines appropriateness as one of the three components of functional suitability, the other two components being completeness and correctness. As users of domain-specific language (DSL) are quite often domain experts with limited programming skills, a DSL might be considered appropriate if the resulting domain-specific programs do not contain an excessive amount of nondomain-related programming elements. This paper describes a metric for measuring the appropriateness of DSLs that are developed using model-driven development (MDD), its evaluation and use. The metric measures the depth of the deepest domain-specific command within abstract syntax trees generated by a DSL. It is aimed at being used during the development of a new DSL and for comparing different DSLs defined over the same domain. It is assumed that during MDD, the metamodel describes the domain-independent part of the DSL, while the model supplies the domain-specific part. This resembles the implementation of DSLs using existing metaprogramming tools that provide off-the-shelf implementations of programming constructs but require manual implementation of the domain-specific language elements.
C1 [Slivnik, Bostjan] Univ Ljubljana, Fac Comp & Informat Sci, Vecna Pot 113, Ljubljana 1000, Slovenia.
C3 University of Ljubljana
RP Slivnik, B (corresponding author), Univ Ljubljana, Fac Comp & Informat Sci, Vecna Pot 113, Ljubljana 1000, Slovenia.
EM bostjan.slivnik@fri.uni-lj.si
CR [Anonymous], [No title captured]
   [Anonymous], P WORKSH EMP STUD MO
   [Anonymous], 2009, 250103 ISOIEC
   Barisic A., 2012, ELECTR COMMUN, V50, P1
   Barisic A, 2012, 2012 EIGHTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC 2012), P342, DOI 10.1109/QUATIC.2012.63
   Bastarrica M., 2007, P 10 ACM IEEE INT C, P36
   Bertoa M. F., 2010, P 13 TOOLS WORKSH QU
   Cadavid J., 2011, P EESSMOD WORKSH MOD
   Chomsky Noam, 1959, Studies in Logic and the Foundations of Mathematics, V26, P118, DOI [10.1016/S0049-237X(09)70104-1, DOI 10.1016/S0049-237X(09)70104-1]
   Dupuy-Chessa S, 2009, INT CONF RES CHAL, P343, DOI 10.1109/RCIS.2009.5089298
   Falleri J.-R., 2008, P 1 WORKSH EMP STUD, P21
   Frey A.G., 2011, P 3 ACM SIGCHI S ENG, P265
   Gerpheide C.M., 2014, P 9 INT C QUAL INF C
   Guizzardi G, 2005, LECT NOTES COMPUT SC, V3713, P691, DOI 10.1007/11557432_51
   Hermans F, 2009, LECT NOTES COMPUT SC, V5795, P423, DOI 10.1007/978-3-642-04425-0_33
   Karsai G., 2008, P 9 OOPSLA WORKSH DO, P7
   Kolovos D.S., 2006, P ECOOP WORKSH DOM S
   Kosar T, 2010, COMPUT SCI INF SYST, V7, P247, DOI 10.2298/CSIS1002247K
   Krogstie J., 2003, UML and the unified process, P1
   Lange CFJ, 2006, 13TH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P7
   Malik J., 2009, INT J ELECT COMPUTER, V1, P2486
   Mellor StephenJ., 2004, MDA Distilled: Principles of Model-Driven Architecture
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Mohagheghi P., 2007, International Workshop on Modeling in Software Engineering, P6, DOI DOI 10.1109/MISE.2007.6
   Mohagheghi P., 2007, WORKSH QUAL MOD, P3
   MOHAGHEGHI P, 2008, P NORD WORKSH MOD DR, P51
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Mohagheghi P, 2009, WOSQ: 2009 ICSE WORKSHOP ON SOFTWARE QUALITY, P39, DOI 10.1109/WOSQ.2009.5071555
   Olival K.J., 2008, Population genetic structure and phylogeography of Southeast Asian flying foxes: implications for conservation and disease ecology, P1
   Open Management Group, 2014, OBJ CONSTR LANG VERS
   Open Management Group, 2014, OMG MET OBJ FAC MOF
   Paloque-Berges C, 2009, POETIQUE CODES RESEA
   Pilgrim J, 2008, MEASURING LEVEL ABST
   Porubän J, 2010, COMPUT SCI INF SYST, V7, P291, DOI 10.2298/CSIS1002291P
   Raiter Brian., 1993, Brainfuck: An eight-instruction turing-complete programming language
   Rozanc I, 2014, 2014 9TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P190, DOI 10.1109/QUATIC.2014.33
   Tratt L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1391956.1391958
   Voelter M, 2012, PROC INT CONF SOFTW, P1449, DOI 10.1109/ICSE.2012.6227070
   Wu Y., 2010, P 10 WORKSH DOM SPEC
NR 39
TC 0
Z9 0
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 737
EP 753
DI 10.1007/s11219-015-9279-1
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400012
DA 2024-07-18
ER

PT J
AU Syed, Z
   Banerjee, S
   Cukic, B
AF Syed, Zahid
   Banerjee, Sean
   Cukic, Bojan
TI Normalizing variations in feature vector structure in keystroke dynamics
   authentication systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Keystroke dynamics; Authentication; Biometrics; Continual authentication
AB Usernames and passwords stubbornly remain the most prevalent authentication mechanism. Password secrecy ensures that only genuine users are granted access. If the secret is breached, impostors gain the access too. One method of strengthening password authentication is through keystroke dynamics. Keystroke dynamics algorithms typically constrain the authentication entry to one valid sequence of key presses. In this paper, we introduce the concept of event sequences. We explore the nature of variations between multiple valid key-entry sequences and propose a scheme that effectively represents these variations. We test the efficacy of the new authentication method in distinguishing users. The experimental results show that typing proficiency of individuals is not the only determining authentication factor. We show that typing sequence variations contain sufficient discriminatory information to warrant their inclusion into user authentication methods. Based on these results, we present a novel strategy to create feature vectors for keystroke dynamics-based authentication. The proposed approach ensures that the feature vector's length and structure are related only to the length of the password, independent of its content or the order of keys pressed. This normalization of feature vector structure has multiple advantages including leveraging the discriminatory power of event sequences, faster search-and-retrieval in n-graph-based authentication systems, and simplicity. The proposed authentication scheme is applicable to both static and continual authentication systems.
C1 [Syed, Zahid] Univ Michigan, Dept Comp Sci Engn & Phys, Flint, MI 48502 USA.
   [Banerjee, Sean] Carnegie Mellon Univ, Inst Robot, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Cukic, Bojan] Univ N Carolina, 9201 Univ City Blvd, Charlotte, NC 28223 USA.
C3 University of Michigan System; University of Michigan Flint; University
   of Michigan; Carnegie Mellon University; University of North Carolina;
   University of North Carolina Charlotte
RP Syed, Z (corresponding author), Univ Michigan, Dept Comp Sci Engn & Phys, Flint, MI 48502 USA.
EM zahsyed@umflint.edu; sanjib@andrew.cmu.edu; bcukic@uncc.edu
RI Cukic, Bojan/B-8287-2009
OI Cukic, Bojan/0000-0001-7130-9054; Syed, Zahid/0000-0002-6553-2003
CR Acquisti A., 2005, Proceedings of WPES05, P71
   [Anonymous], WIND KEYB LAYOUTS
   [Anonymous], THESIS SO METHODIST
   [Anonymous], YOUNG J
   [Anonymous], INT S SOFTW RELIAB E
   [Anonymous], ANSIINCITS1541988
   [Anonymous], JISX60021980
   [Anonymous], 16 C ARG CIENC COMP
   [Anonymous], MICR KEYB LAYOUT CRE
   [Anonymous], ISOIEC999532010
   Banerjee SP, 2012, J PATTERN RECOGNIT R, V7, P116, DOI 10.13176/11.427
   BLEHA S, 1990, IEEE T PATTERN ANAL, V12, P1217, DOI 10.1109/34.62613
   Bortz J., 2000, VERTEILUNGSFREIE MET
   Crenshaw A., 2009, Changing your mac address in window xp/vista, linux and mac os x
   Friedman M, 1937, J AM STAT ASSOC, V32, P675, DOI 10.2307/2279372
   Giot R, 2009, 2009 IEEE 3RD INTERNATIONAL CONFERENCE ON BIOMETRICS: THEORY, APPLICATIONS AND SYSTEMS, P419
   Killourhy KS, 2009, I C DEPEND SYS NETWO, P125, DOI 10.1109/DSN.2009.5270346
   Montalvao J, 2006, PROCEEDINGS OF THE IEEE INTERNATIONAL TELECOMMUNICATIONS SYMPOSIUM, VOLS 1 AND 2, P560
   Ross A, 2004, LECT NOTES COMPUT SC, V3087, P134
   Syed Z., 2011, Proceedings of the 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), P352, DOI 10.1109/HASE.2011.16
   Vu K.-P.L., 2003, P 47 ANN M HUMAN FAC, P1331
NR 21
TC 5
Z9 6
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2016
VL 24
IS 1
SI SI
BP 137
EP 157
DI 10.1007/s11219-014-9263-1
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1VQ
UT WOS:000369006200008
DA 2024-07-18
ER

PT J
AU Bouhours, C
   Leblanc, H
   Percebois, C
AF Bouhours, Cedric
   Leblanc, Herve
   Percebois, Christian
TI Spoiled patterns: how to extend the GoF
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Design patterns; Spoiled patterns; Best practices; Bad smells;
   Anti-patterns; Pattern teaching
ID DESIGN PATTERNS
AB Design patterns were popularized by the GoF catalog in 1995. This catalog contains 23 design patterns which concern 23 design problems. Each pattern is detailed with its structure, its intent, and some information including applicability conditions and some possible variations which enable it to be re-used. In 1995, they were the cutting edge thought processes. We consider that design patterns have two major features. First, they are the result of emergent conceptions validated by a community through a well-defined acceptance process. They are a field of expert knowledge. Secondly, they must be as abstract as needed to be able to maximize their reusability. They constitute a compilation of best practices concerning object codes and designs. We propose to extend the GoF with a new concept that we have named "spoiled patterns". They are midway between bad smells in design necessary to go ahead with a refactoring and a necessary learned lesson in order to explain anti-patterns. Each design pattern corresponds to some spoiled patterns. In this paper, we present how we have compiled the first spoiled patterns catalog, by carrying out several experiments with a lot of young inexperienced designers.
C1 [Bouhours, Cedric] Univ Auvergne, LIMOS, Clermont Ferrand, France.
   [Leblanc, Herve; Percebois, Christian] Univ Toulouse, IRIT, Toulouse, France.
C3 Universite Clermont Auvergne (UCA); Universite Federale Toulouse
   Midi-Pyrenees (ComUE); Universite de Toulouse; Institut National
   Polytechnique de Toulouse; Universite Toulouse III - Paul Sabatier
RP Bouhours, C (corresponding author), Univ Auvergne, LIMOS, Clermont Ferrand, France.
EM cedric.bouhours@udamail.fr; leblanc@irit.fr; percebois@irit.fr
CR Albin-Amiot H, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P166, DOI 10.1109/ASE.2001.989802
   Albin-Amiot H., 2001, P 1 EUR C OBJ OR PRO
   Baroni A. L., 2003, 0303INFO EC MIN NANT
   Bouhours C., 2011, INT C PATT LANG PROG
   Bouhours C, 2010, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCES ON PERVASIVE PATTERNS AND APPLICATIONS (PATTERNS 2010), P34
   Bouhours C, 2009, J OBJECT TECHNOL, V8, P43, DOI 10.5381/jot.2009.8.3.c5
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Cinneide M. O., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P463, DOI 10.1109/ICSM.1999.792644
   Dewan P., 2005, SIGCSE Bulletin, V37, P482, DOI 10.1145/1047124.1047498
   Dietrich J, 2005, 2005 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P243, DOI 10.1109/ASWEC.2005.6
   Dodani MH, 2006, J OBJECT TECHNOL, V5, P29, DOI 10.5381/jot.2006.5.6.c4
   Dong J., 2007, P 19 INT C SOFTW ENG, P473
   Duell M., 1997, OOPSLA 97 ADDENDUM, P120, DOI DOI 10.1145/274567.274592
   Eden AH, 1997, AUTOMATED SOFTWARE ENGINEERING, 12TH IEEE INTERNATIONAL CONFERENCE, PROCEEDINGS, P143, DOI 10.1109/ASE.1997.632834
   El-Boussaidi G, 2008, LECT NOTES COMPUT SC, V5301, P189, DOI 10.1007/978-3-540-87875-9_14
   Fagan M., 2002, Software Pioneers, P575
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   France R, 2003, IEEE SOFTWARE, V20, P52, DOI 10.1109/MS.2003.1231152
   GAMMA E, 1995, DESIGN PATTERNS
   Gibbon C, 1996, ACM SIGPLAN NOTICES, V31, P12, DOI 10.1145/381841.381844
   Gibbon C. A., 1996, Proceedings. 1996 Asia-Pacific Software Engineering Conference, P110, DOI 10.1109/APSEC.1996.566746
   Harb D, 2009, LECT NOTES COMPUT SC, V5421, P318, DOI 10.1007/978-3-642-01648-6_34
   Jiménez-Díaz G, 2008, INT J ENG EDUC, V24, P717
   Kampffmeyer H, 2007, LECT NOTES COMPUT SC, V4735, P211
   Kerievsky J., 2005, Refactoring to Patterns
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Larman C., 2002, APPL UML PATTERNS, V2nd
   Le Guennec A, 2000, LECT NOTES COMPUT SC, V1939, P482
   Mak JKH, 2004, PROC INT CONF SOFTW, P252, DOI 10.1109/ICSE.2004.1317447
   Mili H, 2005, LECT NOTES COMPUT SC, V3713, P186, DOI 10.1007/11557432_14
   PECINOVSKY R., 2006, ACM SIGCSE Bulletin, V38, P188
   Richle D, 2011, LECT NOTES COMPUT SC, V6510, P1, DOI 10.1007/978-3-642-19432-0_1
   Riehle D, 1997, ACM SIGPLAN NOTICES, V32, P218, DOI 10.1145/263700.263739
   Sendall S., 2002, WORKSH KILL EX DES P
   Siddle J, 2011, LECT NOTES COMPUT SC, V6510, P16, DOI 10.1007/978-3-642-19432-0_2
   YACOUB SM, 2003, PATTERN ORIENTED ANA
NR 36
TC 9
Z9 9
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2015
VL 23
IS 4
BP 661
EP 694
DI 10.1007/s11219-014-9249-z
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CU1CN
UT WOS:000363257000005
DA 2024-07-18
ER

PT J
AU Gleirscher, M
   Golubitskiy, D
   Irlbeck, M
   Wagner, S
AF Gleirscher, Mario
   Golubitskiy, Dmitriy
   Irlbeck, Maximilian
   Wagner, Stefan
TI Introduction of static quality analysis in small- and medium-sized
   software enterprises: experiences from technology transfer
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Small- and medium-sized software enterprises; Static
   analysis; Code clone detection; Bug pattern detection; Architecture
   conformance analysis; Quality models
ID FAULT-DETECTION; TOOLS; MODEL
AB Today, small- and medium-sized enterprises (SMEs) in the software industry face major challenges. Their resource constraints require high efficiency in development. Furthermore, quality assurance (QA) measures need to be taken to mitigate the risk of additional, expensive effort for bug fixes or compensations. Automated static analysis (ASA) can reduce this risk because it promises low application effort. SMEs seem to take little advantage of this opportunity. Instead, they still mainly rely on the dynamic analysis approach of software testing. In this article, we report on our experiences from a technology transfer project. Our aim was to evaluate the results static analysis can provide for SMEs as well as the problems that occur when introducing and using static analysis in SMEs. We analysed five software projects from five collaborating SMEs using three different ASA techniques: code clone detection, bug pattern detection and architecture conformance analysis. Following the analysis, we applied a quality model to aggregate and evaluate the results. Our study shows that the effort required to introduce ASA techniques in SMEs is small (mostly below one person-hour each). Furthermore, we encountered only few technical problems. By means of the analyses, we could detect multiple defects in production code. The participating companies perceived the analysis results to be a helpful addition to their current QA and will include the analyses in their QA process. With the help of the Quamoco quality model, we could efficiently aggregate and rate static analysis results. However, we also encountered a partial mismatch with the opinions of the SMEs. We conclude that ASA and quality models can be a valuable and affordable addition to the QA process of SMEs.
C1 [Gleirscher, Mario; Irlbeck, Maximilian] Tech Univ Munich, Inst Informat, Munich, Germany.
   [Golubitskiy, Dmitriy] Roland Berger Strategy Consultants Holding GmbH, Munich, Germany.
   [Wagner, Stefan] Univ Stuttgart, Inst Software Technol, D-70174 Stuttgart, Germany.
C3 Technical University of Munich; University of Stuttgart
RP Gleirscher, M (corresponding author), Tech Univ Munich, Inst Informat, Munich, Germany.
EM gleirsch@in.tum.de; Dmitriy.Golubitskiy@rolandberger.com;
   irlbeck@in.tum.de; Stefan.Wagner@informatik.uni-stuttgart.de
RI Wagner, Stefan/A-5200-2018
OI Wagner, Stefan/0000-0002-5256-8429; Gleirscher,
   Mario/0000-0002-9445-6863
CR Ahsan SN, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ADVANCES (ICSEA 2009), P210, DOI 10.1109/ICSEA.2009.41
   Al-Kilidar H, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P122, DOI 10.1109/ISESE.2005.1541821
   [Anonymous], 2008, P 2008 WORKSHOP DEFE, DOI DOI 10.1145/1390817.1390829
   [Anonymous], 2009, SAC 2009
   [Anonymous], 2007, SURVEY SOFTWARE CLON
   [Anonymous], 2003, Official Journal of the European Union L, V124, P36
   [Anonymous], 2003, 9126 ISOIEC, V2003
   [Anonymous], 1990, Software testing techniques {
   [Anonymous], 2011, 25010 ISO IEC
   Ayewah N, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P1, DOI 10.1145/1251535.1251536
   Ayewah N, 2008, IEEE SOFTWARE, V25, P22, DOI 10.1109/MS.2008.130
   Baca D, 2008, PLAS'08: PROCEEDINGS OF THE ACM SIGPLAN THIRD WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P79, DOI 10.1145/1375696.1375707
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Bijlsma D, 2012, SOFTWARE QUAL J, V20, P265, DOI 10.1007/s11219-011-9140-0
   Boehm B.W., 1978, Characteristics of Software Quality
   Boogerd C, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P41, DOI 10.1109/MSR.2009.5069479
   Chandra P, 2006, IEEE SECUR PRIV, V4, P80, DOI 10.1109/MSP.2006.77
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   de Moor O, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P3, DOI 10.1109/SCAM.2007.31
   DEISSENBOECK F, 2010, P 32 ACM IEEE INT C, V2, P247, DOI DOI 10.1145/1810295.1810343
   Deissenboeck F., 2007, P IEEE INT C SOFTW M
   DEISSENBOECK F, 2010, CONQAT BOOK
   DEISSENBOECK F, 2011, P 33 INT C SOFTW ENG
   DEISSENBOECK F, 2012, CSMR, P299
   Deissenboeck F., 2009, P ICSE WORKSH SOFTW
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   Feilkas M, 2009, INT C PROGRAM COMPRE, P188, DOI 10.1109/ICPC.2009.5090042
   Ferzund J, 2008, LECT NOTES COMPUT SC, V5338, P331
   Fiutem R., 1998, P INT C SOFTW MAINT
   Foster JS, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P83, DOI 10.1145/1251535.1251549
   Gleirscher M, 2012, LECT NOTES BUS INF P, V94, P14
   HEITLAGER I, 2007, P 6 INT C QUAL INF C
   Hofer C, 2002, EUROMICRO CONF PROC, P361, DOI 10.1109/EURMIC.2002.1046219
   JUERGENS E, 2011, THESIS TU MUENCHEN
   Juergens E., 2010, P 4 INTERNATIONALWOR, P1
   Juergens E, 2009, PROC INT CONF SOFTW, P603, DOI 10.1109/ICSE.2009.5070566
   Juergens E, 2009, PROC INT CONF SOFTW, P485, DOI 10.1109/ICSE.2009.5070547
   Kautz K., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P626, DOI 10.1109/ICSE.2000.870456
   Kautz K, 1999, IEEE SOFTWARE, V16, P14, DOI 10.1109/52.754047
   Kienle HM, 2012, SOFTWARE QUAL J, V20, P337, DOI 10.1007/s11219-011-9138-7
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   Knodel Jens, 2007, 2007 WORKING IEEEIFI, P12, DOI 10.1109/wicsa.2007.1
   Koschke Rainer, 2007, DAGST SEM P
   KREMENEK T, 2008, THESIS STANFORD U
   Lague B, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P314, DOI 10.1109/ICSM.1997.624264
   Lakhotia A, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P368, DOI 10.1109/WCRE.2003.1287269
   Lanubile F, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P379, DOI 10.1109/CSMR.2003.1192447
   Leavens Gary T., 2012, JSCTRACKER SEMANTIC
   Littlewood B, 2000, IEEE T SOFTWARE ENG, V26, P1157, DOI 10.1109/32.888629
   LOCHMANN K, 2010, P 15 INT C ENG COMPL
   Lochmann K., 2011, P 8 INT WORKSH SOFTW
   LOCHMANN K, 2012, P 9 INT WORKSH SOFTW
   MATTSSON A, 2007, P 2 WORKSH SHAR REUS, DOI DOI 10.1109/SHARK-ADI.2007.7
   McCall J., 1977, Factors in software quality, V1
   MISHRA A, 2006, INT J INFORM TECHNOL, V5, P4
   Passos L, 2010, IEEE SOFTWARE, V27, P82, DOI 10.1109/MS.2009.117
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Plösch R, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P370, DOI 10.1109/QUATIC.2010.68
   PLOSCH R, 2009, TAGUNGSBAND 2
   Pusatli OT, 2011, TEH VJESN, V18, P447
   Richardson I, 2007, IEEE SOFTWARE, V24, P18, DOI 10.1109/MS.2007.12
   Rosik J, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P80
   Ruthruff JR, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P341, DOI 10.1145/1368088.1368135
   Sangal N, 2005, ACM SIGPLAN NOTICES, V40, P167, DOI 10.1145/1103845.1094824
   Sjoberg DIK, 2012, INT SYMP EMP SOFTWAR, P107, DOI 10.1145/2372251.2372269
   von Wangenheim CG, 2006, IEEE SOFTWARE, V23, P91, DOI 10.1109/MS.2006.13
   Wagner S, 2005, LECT NOTES COMPUT SC, V3502, P40
   WAGNER S, 2009, P 3 INT S EMP SOFTW, DOI DOI 10.1109/ESEM.2009.5316003
   WAGNER S, 2013, PRACTICAL PRODUCT QU
   WAGNER S, 2008, P 1 INT C SOFTW TEST, P248
   WAGNER S, 2012, TUMI129 TU I INF
   Wagner S., 2012, P 34 INT C SOFTW ENG
   Zheng J, 2006, IEEE T SOFTWARE ENG, V32, P240, DOI 10.1109/TSE.2006.38
NR 74
TC 17
Z9 20
U1 0
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2014
VL 22
IS 3
BP 499
EP 542
DI 10.1007/s11219-013-9217-z
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK6IH
UT WOS:000338530800006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bertolino, A
   Daoudagh, S
   Lonetti, F
   Marchetti, E
   Martinelli, F
   Mori, P
AF Bertolino, Antonia
   Daoudagh, Said
   Lonetti, Francesca
   Marchetti, Eda
   Martinelli, Fabio
   Mori, Paolo
TI Testing of PolPA-based usage control systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Authorization systems; PolPA language; Usage control; History-based
   access control; Testing; Test case generation
AB The implementation of an authorization system is a critical and error-prone activity that requires a careful verification and testing process. As a matter of fact, errors in the authorization system code could grant accesses that should instead be denied, thus jeopardizing the security of the protected system. In this paper, we address the testing of the implementation of the Policy Decision Point (PDP) within the PolPA authorization system that enables history-based and usage-based control of accesses. Accordingly, we propose two testing strategies specifically conceived for validating the history-based access control and the usage control functionalities of the PolPA PDP. The former is based on a fault model able to highlight the problems and vulnerabilities that could occur during the PDP implementation. The latter combines the standard technique for conditions coverage with a methodology for simulating the continuous control of the PDP during the runtime execution. Both strategies are implemented within a testing framework supporting the automatic generation and execution of security test suites. Results produced by the application of this testing framework to a real case study are presented.
C1 [Bertolino, Antonia; Daoudagh, Said; Lonetti, Francesca; Marchetti, Eda] CNR, Ist Sci & Tecnol Informaz A Faedo, I-56124 Pisa, Italy.
   [Martinelli, Fabio; Mori, Paolo] CNR, Ist Informat & Telemat, I-56124 Pisa, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); Consiglio
   Nazionale delle Ricerche (CNR); Istituto di Informatica e Telematica
   (IIT-CNR)
RP Bertolino, A (corresponding author), CNR, Ist Sci & Tecnol Informaz A Faedo, Via G Moruzzi, I-56124 Pisa, Italy.
EM antonia.bertolino@isti.cnr.it; said.daoudagh@isti.cnr.it;
   francesca.lonetti@isti.cnr.it; eda.marchetti@isti.cnr.it;
   fabio.martinelli@iit.cnr.it; paolo.mori@iit.cnr.it
RI Daoudagh, Said/N-5618-2016; Lonetti, Francesca/AAM-5813-2021; MARCHETTI,
   EDA/AAW-6509-2020; mori, paolo/AAX-9974-2020; Bertolino,
   Antonia/ABD-6837-2020
OI Daoudagh, Said/0000-0002-3073-6217; Lonetti,
   Francesca/0000-0002-4864-2219; MARCHETTI, EDA/0000-0003-4223-8036;
   Bertolino, Antonia/0000-0001-8749-1356; Mori, Paolo/0000-0002-6618-0388
FU Network of Excellence on Engineering Secure Future Internet Software
   Services and Systems (NESSoS) FP7 Project [256980]
FX This work has been partially funded by the Network of Excellence on
   Engineering Secure Future Internet Software Services and Systems
   (NESSoS) FP7 Project contract n. 256980.
CR Bailey C, 2012, PROC INT CONF SOFTW, P1495, DOI 10.1109/ICSE.2012.6227053
   Bertolino A., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P8, DOI 10.1109/IWAST.2012.6228997
   Bertolino A., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P842, DOI 10.1109/ICST.2012.185
   Bertolino A., 2013, P 8 INT WORKSH MUT A
   Bertolino A, 2010, EUROMICRO CONF PROC, P3, DOI 10.1109/SEAA.2010.58
   Bücher M, 2011, LECT NOTES COMPUT SC, V6706, P69, DOI 10.1007/978-3-642-21768-5_6
   Castrucci A, 2008, LECT NOTES COMPUT SC, V5308, P256, DOI 10.1007/978-3-540-88625-9_17
   Colombo M., 2011, INT J COMPUTER NETWO, V3, P133
   Colombo M, 2010, GRIDS, P2P AND SERVICES COMPUTING, P133, DOI 10.1007/978-1-4419-6794-7_11
   Martin E., 2006, P 17 INT S SOFTW R S
   Martin E., 2007, P 16 INT C WORLD WID, P667, DOI DOI 10.1145/1242572.1242663
   Martin E., 2007, P 3 INT WORKSH SOFTW, P5
   Martinelli F, 2010, FUTURE GENER COMP SY, V26, P1032, DOI 10.1016/j.future.2009.12.005
   MATHUR AP, 2008, FDN SOFTWARE TESTING
   Mouelhiv Tejeddine, 2008, 2008 IEEE International Conference on Software Testing Verification and Validation Workshop (ICSTW), P278, DOI 10.1109/ICSTW.2008.2
   Nyre A. A., 2011, USAGE CONTROL ENFORC, P38
   Park J., 2004, ACM Transactions on Information and Systems Security, V7, P128, DOI 10.1145/984334.984339
   Petrenko A., 2001, Modeling and verification of parallel processes, P196
   Pretschner Alexander, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P338, DOI 10.1109/ICST.2008.44
   Shan L., 2007, COMPUT J, V52, P571
   Xinwen Zhang, 2005, ACM Transactions on Information and Systems Security, V8, P351, DOI 10.1145/1108906.1108908
   Yue Jia, 2011, IEEE Transactions on Software Engineering, V37, P649, DOI 10.1109/TSE.2010.62
NR 22
TC 16
Z9 16
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2014
VL 22
IS 2
SI SI
BP 241
EP 271
DI 10.1007/s11219-013-9216-0
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AF7TM
UT WOS:000334917700006
DA 2024-07-18
ER

PT J
AU Yu, LG
   Chen, K
   Ramaswamy, S
AF Yu, Liguo
   Chen, Kai
   Ramaswamy, Srini
TI Multiple-parameter coupling metrics for layered component-based software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Metrics; Coupling; Coupling distance; Dependency; Component-based
   software
ID QUALITY; MAINTAINABILITY; REUSE
AB Coupling represents the degree of interdependence between two software components. Understanding software dependency is directly related to improving software understandability, maintainability, and reusability. In this paper, we analyze the difference between component coupling and component dependency, introduce a two-parameter component coupling metric and a three-parameter component dependency metric. An important parameter in both these metrics is coupling distance, which represents the relevance of two coupled components. These metrics are applicable to layered component-based software. These metrics can be used to represent the dependencies induced by all types of software coupling. We show how to determine coupling and dependency of all scales of software components using these metrics. These metrics are then applied to Apache HTTP, an open-source web server. The study shows that coupling distance is related to the number of modifications of a component, which is an important indicator of component fault rate, stability and subsequently, component complexity.
C1 [Yu, Liguo] Indiana Univ, Dept Comp & Informat Sci, South Bend, IN 46634 USA.
   [Chen, Kai] Google Inc, Mountain View, CA USA.
   [Ramaswamy, Srini] Univ Arkansas, Dept Comp Sci, Little Rock, AR 72204 USA.
C3 Indiana University System; Indiana University South Bend; Google
   Incorporated; University of Arkansas System; University of Arkansas
   Little Rock; University of Arkansas Fayetteville
RP Yu, LG (corresponding author), Indiana Univ, Dept Comp & Informat Sci, 1700 Mishawaka Ave,POB 7111, South Bend, IN 46634 USA.
EM ligyu@iusb.edu; kachen@google.com; srini@ieee.org
RI chen, kai/IWV-0528-2023
FU National Science Foundation [CNS-0619069, EPS-0701890, OISE 0650939];
   Acxiom Corporation [281539]; NASA EPSCoR Arkansas Space [UALR 16804]
FX This work was based in part, upon research supported by the National
   Science Foundation (CNS-0619069, EPS-0701890 and OISE 0650939), Acxiom
   Corporation (# 281539) and NASA EPSCoR Arkansas Space Grant Consortium
   (# UALR 16804). Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author(s)
   and do not necessarily reflect the views of the funding agencies. The
   authors would like to thank Professor Stephen R. Schach of Vanderbilt
   University for his many suggestions. The authors would also like to
   thank the anonymous reviewers for their valuable comments and
   suggestions which greatly improved the earlier version of this paper.
CR ABDURAZIK A, 2007, THESIS G MASON U
   BANKER RD, 1993, COMMUN ACM, V36, P81, DOI 10.1145/163359.163375
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   BERNS GM, 1984, COMMUN ACM, V27, P14, DOI 10.1145/69605.357965
   Biggerstaff TedJ., 1989, Software reusability: vol. 1, V1
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   BRIAND LC, 1994, COMPUTER SCI TECHNIC
   BROWN AW, 1997, BACKGROUND INFORM CB, V1
   Bruegge B., 2009, OBJECT ORIENTED SOFT
   Card DavidN., 1990, MEASURING SOFTWARE D
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Dandashi F., 2002, Proceedings of the 2002 ACM Symposium on Applied Computing, P997
   Frakes WB, 2001, J SYST SOFTWARE, V57, P99, DOI 10.1016/S0164-1212(00)00121-7
   GIBSON VR, 1989, COMMUN ACM, V32, P347, DOI 10.1145/62065.62073
   Harrison R, 2000, J SYST SOFTWARE, V52, P173, DOI 10.1016/S0164-1212(99)00144-2
   Hassoun Y, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P339, DOI 10.1109/CSMR.2004.1281436
   JONGE MD, 2004, 2 GRON WORKSH SOFTW
   KAFURA D, 1981, J SYST SOFTWARE, V2, P121, DOI 10.1016/0164-1212(81)90032-7
   Leavens G.T., 2000, FDN COMPONENT BASED
   LIM WC, 1994, IEEE SOFTWARE, V11, P23, DOI 10.1109/52.311048
   Luer C., 2001, Proceedings of the 4th International Workshop on Principles of Software Evolution (IWPSE), P134
   MEI H, 2001, ACM SIGSOFT SOFTWARE, V26, P53
   Nolan B., 1994, Data analysis: an introduction
   OFFUTT AJ, 1993, J SYST SOFTWARE, V20, P295, DOI 10.1016/0164-1212(93)90072-6
   Page-Jones M., 1980, The practical guide to structured systems design
   Prichard SS, 1997, NEPHROL DIAL TRANSPL, V12, P22
   SELBY RW, 1991, IEEE T SOFTWARE ENG, V17, P141, DOI 10.1109/32.67595
   Simon H. A., 1969, ARCHITECTURE COMPLEX
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   TROY DA, 1981, J SYST SOFTWARE, V2, P113, DOI 10.1016/0164-1212(81)90031-5
   Yu LG, 2004, IEEE T SOFTWARE ENG, V30, P694, DOI 10.1109/TSE.2004.58
   Yu L, 2007, EMPIR SOFTW ENG, V12, P123, DOI 10.1007/s10664-006-9000-x
   Yu Liguo, 2007, P 45 ACM SE C WINST, P419
NR 33
TC 7
Z9 8
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2009
VL 17
IS 1
BP 5
EP 24
DI 10.1007/s11219-008-9052-9
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 398AD
UT WOS:000262702700003
DA 2024-07-18
ER

PT J
AU Serrano, MA
   Calero, C
   Sahraoui, HA
   Piattini, M
AF Serrano, Manuel Angel
   Calero, Coral
   Sahraoui, Houari A.
   Piattini, Mario
TI Empirical studies to assess the understandability of data warehouse
   schemas using structural metrics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE data warehouse; quality; metrics; empirical studies
AB Data warehouses are powerful tools for making better and faster decisions in organizations where information is an asset of primary importance. Due to the complexity of data warehouses, metrics and procedures are required to continuously assure their quality. This article describes an empirical study and a replication aimed at investigating the use of structural metrics as indicators of the understandability, and by extension, the cognitive complexity of data warehouse schemas. More specifically, a four-step analysis is conducted: (1) check if individually and collectively, the considered metrics can be correlated with schema understandability using classical statistical techniques, (2) evaluate whether understandability can be predicted by case similarity using the case-based reasoning technique, (3) determine, for each level of understandability, the subsets of metrics that are important by means of a classification technique, and assess, by means of a probabilistic technique, the degree of participation of each metric in the understandability prediction. The results obtained show that although a linear model is a good approximation of the relation between structure and understandability, the associated coefficients are not significant enough. Additionally, classification analyses reveal respectively that prediction can be achieved by considering structure similarity, that extracted classification rules can be used to estimate the magnitude of understandability, and that some metrics such as the number of fact tables have more impact than others.
C1 [Serrano, Manuel Angel; Calero, Coral; Sahraoui, Houari A.; Piattini, Mario] Univ Castilla La Mancha, Dept Informat Technol & Syst, Alarcos Res Grp, E-13071 Ciudad Real, Spain.
   [Sahraoui, Houari A.] Univ Montreal, Dept Informat & Rech Operat, Montreal, PQ H3C 3J7, Canada.
C3 Universidad de Castilla-La Mancha; Universite de Montreal
RP Serrano, MA (corresponding author), Univ Castilla La Mancha, Dept Informat Technol & Syst, Alarcos Res Grp, Paseo Univ 4, E-13071 Ciudad Real, Spain.
EM Manuel.Serrano@uclm.es; Coral.Calero@uclm.es; sahraouh@iro.umontreal.ca;
   Mario.piattini@uclm.es
RI Serrano, Manuel/N-8266-2013; Piattini, Mario/F-6271-2013; Calero,
   Coral/D-4319-2011
OI Serrano, Manuel/0000-0003-0962-5659; Piattini,
   Mario/0000-0002-7212-8279; Calero, Coral/0000-0003-0728-4176
CR Anahory S., 1997, Data Warehousing in the Real World
   [Anonymous], 1999, DISTANCE FRAMEWORK S
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], INFORM DATABASE QUAL
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   BRIAND L, 1998, ISERN9829 FRAUNH I E
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   Calero C., 2001, INT WORKSH DES MAN D
   Carver J, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P239
   Debevoise N.T., 1999, DATA WAREHOUSE METHO
   Flach P, 1999, LECT NOTES ARTIF INT, V1634, P92
   GODIN R, 1995, INT J SOFTW ENG KNOW, V5, P119, DOI 10.1142/S0218194095000071
   Grosser D, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P252, DOI 10.1109/METRIC.2003.1232472
   HORST M, 2000, 4 C EMP ASS EV SOFTW
   Huang K., 1999, Quality Information and Knowledge
   IMMON WH, 1997, BUILDING DATA WAREHO
   *ISO, 2001, SOFTW PROD EV QUAL C
   Jarke Matthias., 2000, FUNDAMENTALS DATA WA
   Kimball R., 1998, The data warehouse lifecycle toolkit: expert methods for designing, developing, and deploying data warehouses
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Piattini M, 2005, INT J DATA WAREHOUS, V1, P1, DOI 10.4018/jdwm.2005100101
   RAMONI M, 1999, INTRO INTELLIGENT DA
   Schneidewind NF, 2002, COMPUTER, V35, P77, DOI 10.1109/2.982919
   Serrano M., 2002, IEE Proceedings-Software, V149, P161, DOI 10.1049/ip-sen:20020697
   Wilson DR, 1997, J ARTIF INTELL RES, V6, P1, DOI 10.1613/jair.346
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zuse Horst., 1998, A framework of software measurement
NR 27
TC 28
Z9 30
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2008
VL 16
IS 1
BP 79
EP 106
DI 10.1007/s11219-007-9030-7
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248QQ
UT WOS:000252169800005
DA 2024-07-18
ER

PT J
AU Elliott, M
   Dawson, R
   Edwards, J
AF Elliott, Michael
   Dawson, Ray
   Edwards, Janet
TI An analysis of software quality management at AWE plc.
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT Conference on Software Quality Management
CY APR, 2006
CL Southampton, ENGLAND
DE ISO900 : 2001; audit; implementation; culture
AB A detailed question set is required to test and measure the true extent that a software quality management system is adopted and implemented across a large company like Atomic Weapons Establishment (AWE) plc. The analysis of the gathered data reveals specific topics of weakness that can also reflect the cultural acceptance or resistance that management groups have towards the adoption of quality systems. Having identified detailed problems and barriers, effective strategies and programmes can be deployed to improve the level of implementation and, therefore, the effectiveness of a software quality management system. This paper presents the question set used and the subsequent results obtained from the implementation assessment for 55 software systems at AWE plc. The data is collated into management groups and the associated cultures discussed. The topics of weakness are highlighted together with the very specific actions that are least undertaken. A range of improvement actions is also presented.
C1 Univ Loughborough, Dept Comp Sci, Loughborough, Leics, England.
   AWE plc, Reading, Berks, England.
C3 Loughborough University
RP Dawson, R (corresponding author), Univ Loughborough, Dept Comp Sci, Loughborough, Leics, England.
EM R.J.Dawson@lboro.ac.uk
CR [Anonymous], 2001, EXTR CHAOS
   [Anonymous], 2000, 9001 ISO
   *CARN MELL U, 2001, CAP MAT MOD INT
   CROSBY P, 1979, QUALITY FREE
   CURTIS B, 1990, HUMAN ELEMENT SOFTWA
   ELLIOTT M, 2006, SOFTWARE QUALITY J, V14
   Galin Daniel, 2004, Software quality assurance: from theory to implementation
   Horch J. W., 1996, PRACTICAL GUIDE SOFT
   Humphrey W.S., 1989, MANAGING SOFTWARE PR
   PARZINGER M, 2001, SOFTWARE QUALITY DEC, P253
   RADICE RA, 1985, IBM SYST J, V24, P91, DOI 10.1147/sj.242.0091
   Siakas KV, 2002, SOFTWARE QUAL J, V10, P169, DOI 10.1023/A:1020528024624
   SPENCER LM, 1992, AM PSYCH ASS ANN C B
   Standish Group Int, 1994, Technical Report
   WAGNER H, 1999, PSYCHOB HUM MOT
   WEINBERG G, 1993, QUAL SOFTW MAN, V1
NR 16
TC 1
Z9 1
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2007
VL 15
IS 4
BP 347
EP 363
DI 10.1007/s11219-007-9027-2
PG 17
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 232EK
UT WOS:000251000900002
OA Green Published
DA 2024-07-18
ER

PT J
AU Deissenboeck, F
   Pizka, M
AF Deissenboeck, Florian
   Pizka, Markus
TI Concise and consistent naming
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 13th International Workshop on Program Comprehension
CY MAY 15-16, 2005
CL St Louis, MO
SP IEEE Comp Soc, TC Software Engn
AB Approximately 70% of the source code of a software system consists of identifiers. Hence, the names chosen as identifiers are of paramount importance for the readability of computer programs and therewith their comprehensibility. However, virtually every programming language allows programmers to use almost arbitrary sequences of characters as identifiers which far too often results in more or less meaningless or even misleading naming. Coding style guides somehow address this problem but are usually limited to general and hard to enforce rules like "identifiers should be self-describing". This paper renders adequate identifier naming far more precisely. A formal model, based on bijective mappings between concepts and names, provides a solid foundation for the definition of precise rules for concise and consistent naming. The enforcement of these rules is supported by a tool that incrementally builds and maintains a complete identifier dictionary while the system is being developed. The identifier dictionary explains the language used in the software system, aids in consistent naming, and supports programmers by proposing suitable names depending on the current context.
C1 Tech Univ Munich, Inst Informat, D-85748 Garching, Germany.
C3 Technical University of Munich
RP Deissenboeck, F (corresponding author), Tech Univ Munich, Inst Informat, Boltzmannstr 3, D-85748 Garching, Germany.
EM deissenb@in.tum.de; pizka@in.tum.de
CR ALLEN FW, 1982, COMPUT SURV, V14, P245, DOI 10.1145/356876.356882
   Anderson J.R., 1995, COGNITIVE PSYCHOL IT
   [Anonymous], 1982, ATLANTIC MONTHLY
   Anquetil N., 1998, Conference of the Centre for Advanced Studies on Collaborative Research, P4
   ARAB M, 1992, SIGPLAN NOTICES, V27, P37, DOI 10.1145/130973.130975
   Baxter I.D., 1998, CLONE DETECTION USIN
   BIGGERSTAFF TJ, 1993, ICSE 93
   Chen KR, 2000, PROG COMPREHEN, P241, DOI 10.1109/WPC.2000.852498
   Costello F. J., 2002, P 24 ANN C COGN SCI, P232
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Henricson M., 1992, Programming in C++, rules and recommendations
   Hunt Andrew, 1999, The Pragmatic Programmer: From Journeyman to Master, V1
   LEHMAN M, 2003, 9 INT STEV AW HOST I
   Low D., 1998, CROSSROADS, V4, P21
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   O'Grady W., 1996, CONT LINGUISTICS, P132
   OMAN PW, 1990, ACM COMMUNICATIONS, V33
   Pigoski TM., 1996, Practical Software Maintenance: Best Practices for Managing Your Software Investment
   Rajlich V, 2002, PROG COMPREHEN, P271, DOI 10.1109/WPC.2002.1021348
   ROBERTSON J, 2004, VOLERE TEMPLATE V10
   Sneed HM, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P169, DOI 10.1109/WCRE.1996.558901
   *SUN MICR COD, 1999, SUN MICR COD CONV JA
   Tschirner E., 2004, Electronic Journal of Foreign Language Teaching, V1, P27
   VANRYSSELBERGHE F, 2003, ELISA 03, P25
   WILDE N, 1995, J SOFTW MAINT-RES PR, V7, P49, DOI 10.1002/smr.4360070105
NR 26
TC 129
Z9 142
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2006
VL 14
IS 3
BP 261
EP 282
DI 10.1007/s11219-006-9219-1
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 067KL
UT WOS:000239300800005
DA 2024-07-18
ER

PT J
AU Kazman, R
   Bass, L
   Klein, M
   Lattanze, T
   Northrop, L
AF Kazman, R
   Bass, L
   Klein, M
   Lattanze, T
   Northrop, L
TI A basis for analyzing software architecture analysis methods
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software architecture; analysis methods; quality attributes;
   architecture analysis
AB A software architecture is a key asset for any organization that builds complex software-intensive systems. Because of an architecture's central role as a project blueprint, organizations should analyze the architecture before committing resources to it. An analysis helps to ensure that sound architectural decisions are made. Over the past decade a large number of architecture analysis methods have been created, and at least two surveys of these methods have been published. This paper examines the criteria for analyzing architecture analysis methods, and suggests a new set of criteria that focus on the essence of what it means to be an architecture analysis method. These criteria could be used to compare methods, to help understand the suitability of a method, or to improve a method. We then examine two methods-the Architecture Tradeoff Analysis Method and Architecture-level Modifiability Analysis-in light of these criteria, and provide some insight into how these methods can be improved.
C1 Univ Hawaii, Dept Informat Technol Management, Honolulu, HI 96822 USA.
   Carnegie Mellon Univ, Inst Software Engn, Pittsburgh, PA 15213 USA.
   Carnegie Mellon Univ, Inst Software Res Int, Pittsburgh, PA 15213 USA.
C3 University of Hawaii System; Carnegie Mellon University; Software
   Engineering Institute; Carnegie Mellon University
RP Kazman, R (corresponding author), Univ Hawaii, Dept Informat Technol Management, Honolulu, HI 96822 USA.
EM kazman@sei.cmu.edu; ljb@sei.cmu.edu; mk@sei.cmu.edu;
   lattanze@cs.cmu.edu; lmn@sei.cmu.edu
CR [Anonymous], 1988, Principles of software engineering management
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   Babar MA, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P309, DOI 10.1109/ASWEC.2004.1290484
   BACHMANN F, 2000, CMUSEI2000TR001
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bengtsson P, 2004, J SYST SOFTWARE, V69, P129, DOI 10.1016/S0164-1212(03)00080-3
   Bengtsson P, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P139, DOI 10.1109/CSMR.1999.756691
   BENGTSSON PO, 1998, P 5 INT C SOFTW REUS
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Clements P., 2001, EVALUATING SOFTWARE
   Dobrica L, 2002, IEEE T SOFTWARE ENG, V28, P638, DOI 10.1109/TSE.2002.1019479
   DUENAS JC, 1998, P 2 INT ESPRIT ARES, P148
   IANNINO A, 1994, SOFTWARE RELIABILITY, V2, P1237
   KAZMAN R, 1994, PROC INT CONF SOFTW, P81, DOI 10.1109/ICSE.1994.296768
   Kazman R., 1999, Automated Software Engineering, V6, P107, DOI 10.1023/A:1008781513258
   Kazman R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P54, DOI 10.1109/ICSE.1999.840995
   Kazman R., 2000, Tech. Rep. CMU/SEI-2000-TR-004
   Klein M.H., 1993, PRACTITIONERS HDB RE
   Klein MH, 1999, INT FED INFO PROC, V12, P225
   Lassing N, 2002, J SYST SOFTWARE, V61, P47, DOI 10.1016/S0164-1212(01)00113-3
   LASSING N, 1999, 6 AS PAC SOFTW ENG C, P238
   Lung C., 1997, P CASCON 97
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   SONI D, 2000, APPL SOFTWARE ARCHIT
   [No title captured]
NR 25
TC 27
Z9 29
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2005
VL 13
IS 4
BP 329
EP 355
DI 10.1007/s11219-005-4250-1
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 984BC
UT WOS:000233276500002
DA 2024-07-18
ER

PT J
AU Liu, Q
   Mintram, R
AF Liu, Q
   Mintram, R
TI Preliminary data analysis methods in software estimation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE data analysis in software engineering; software cost estimating models
ID MODELS; TREES
AB Software is quite often expensive to develop and can become a major cost factor in corporate information systems' budgets. With the variability of software characteristics and the continual emergence of new technologies the accurate prediction of software development costs is a critical problem within the project management context.
   In order to address this issue a large number of software cost prediction models have been proposed. Each model succeeds to some extent but they all encounter the same problem, i.e., the inconsistency and inadequacy of the historical data sets. Often a preliminary data analysis has not been performed and it is possible for the data to contain non-dominated or confounded variables. Moreover, some of the project attributes or their values are inappropriately out of date, for example the type of computer used for project development in the COCOMO 81 (Boehm, 1981) data set.
   This paper proposes a framework composed of a set of clearly identified steps that should be performed before a data set is used within a cost estimation model. This framework is based closely on a paradigm proposed by Maxwell (2002). Briefly, the framework applies a set of statistical approaches, that includes correlation coefficient analysis, Analysis of Variance and Chi-Square test, etc., to the data set in order to remove outliers and identify dominant variables.
   To ground the framework within a practical context the procedure is used to analyze the ISBSG (International Software Benchmarking Standards Group data-Release 8) data set. This is a frequently used accessible data collection containing information for 2,008 software projects. As a consequence of this analysis, 6 explanatory variables are extracted and evaluated.
C1 Northumbria Univ, Sch Informat, Newcastle Upon Tyne NE1 8ST, Tyne & Wear, England.
C3 Northumbria University
RP Liu, Q (corresponding author), Northumbria Univ, Sch Informat, Newcastle Upon Tyne NE1 8ST, Tyne & Wear, England.
CR [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], 2002, Applied Statistics for Software Managers
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   BASILI VR, 1985, P 1 PAN PAC COMP C
   Boehm BW., 1981, Software Engineering Economics
   Boetticher G., 2001, P MOD BAS REQ WORKSH, P17
   Briand L., 1992, IEEE T SOFTWARE ENG, V18
   BRIAND LC, 1998, ISERN9827 FRAUNH I E
   BRIAND LC, 1999, 07399E IESE
   Burr A., 1996, STAT METHODS SOFTWAR
   Chulani S, 1999, IEEE T SOFTWARE ENG, V25, P573, DOI 10.1109/32.799958
   Fenton N., 2000, INT C SOFTWARE ENG, P357, DOI DOI 10.1145/336512.336588
   Finnie G. R., 1997, Australian Journal of Information Systems, V4, P39
   Gravetter F., 1996, STAT BEHAV SCI 1 COU
   *IFPUG, 1994, COUNT PRACT MAN REL
   KARUNANITHI N, 1992, IEEE SOFTWARE, V9, P53, DOI 10.1109/52.143107
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Kitchenham B, 1998, IEEE T SOFTWARE ENG, V24, P278, DOI 10.1109/32.677185
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   MAXWELL K, 1996, IEEE T SOFTWARE ENG, V22, P704
   Pfleeger SL, 1997, IEEE SOFTWARE, V14, P33, DOI 10.1109/52.582973
   PORTER AA, 1990, IEEE SOFTWARE, V7, P46, DOI 10.1109/52.50773
   Putnam L., 1992, MEASURES EXCELLENCE
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   Samson B, 1997, INFORM SOFTWARE TECH, V39, P55, DOI 10.1016/0950-5849(96)01124-X
   SELBY RW, 1988, IEEE T SOFTWARE ENG, V14, P1743, DOI 10.1109/32.9061
   SRINIVASAN K, 1995, IEEE T SOFTWARE ENG, V21, P126, DOI 10.1109/32.345828
NR 27
TC 15
Z9 19
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2005
VL 13
IS 1
BP 91
EP 115
DI 10.1007/s11219-004-5262-y
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898MD
UT WOS:000227080000005
DA 2024-07-18
ER

PT J
AU Rosqvist, T
   Koskela, M
   Harju, H
AF Rosqvist, T
   Koskela, M
   Harju, H
TI Software quality evaluation based on expert judgement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software quality; software measurement; expert judgement
ID RELIABILITY; METRICS
AB A method using expert judgement for the evaluation of software quality is presented. The underlying principle of the approach is the encoding of experts' tacit knowledge into probabilistic measures associated with the achievement level of software quality attributes. An aggregated quality measure is obtained based on preference statements related to the quality attributes. The technical objectives of the paper are
   to develop of a generic and operationally feasible measurement technique to transform the tacit knowledge of a software expert to a probability distribution depicting his/her uncertainty of the level of achievement related to a quality attribute;
   to develop rules for the construction of a consensus probability measure based on expert-specific probability measures;
   to derive a framework for specifying software quality strategy and for evaluating the acceptance of a software produced in a software development process;
   The above technical developments are used to support group decision-making regarding
   the launch or implementation decision of a software version;
   the allocation of resources during the software development process.
C1 VTT Ind Syst, Espoo 02044, Finland.
C3 VTT Technical Research Center Finland
RP Rosqvist, T (corresponding author), VTT Ind Syst, Espoo 02044, Finland.
CR [Anonymous], 1991, EXPERTS UNCERTAINTY
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   BAUMERT JH, 1992, CMUSEI92TR25
   BUTLER RW, 1993, IEEE T SOFTWARE ENG, V19, P3, DOI 10.1109/32.210303
   Fenton NE, 1999, J SYST SOFTWARE, V47, P149, DOI 10.1016/S0164-1212(99)00035-7
   FOWLER M, 1997, ADDISON WESLEY OBJEC
   GARVIN DA, 1984, SLOAN MANAGE REV, V26, P25
   ISO, 1991, ISO 9126
   JARVINEN J, 2000, VTT PUBLICATIONS, V426
   KEILLER PA, 1991, RELIAB ENG SYST SAFE, V32, P95, DOI 10.1016/0951-8320(91)90049-D
   Kelly G., 1955, Personal construct psychology
   Kilpi T, 2001, IEEE SOFTWARE, V18, P72, DOI 10.1109/52.965808
   LITTLEWOOD B, 1993, COMMUN ACM, V36, P69, DOI 10.1145/163359.163373
   MASON D, 1998, P 1998 WORKSH SOFTW
   McCall J. A., 1994, ENCY SOFTWARE ENG
   MUSA JD, 1993, IEEE SOFTWARE, V10, P14, DOI 10.1109/52.199724
   *NRC, 1998, NUREG1150
   *PAL CORP, 1996, RISK ADV RISK AN SPR
   PULKKINEN U, 1993, RELIAB ENG SYST SAFE, V40, P111, DOI 10.1016/0951-8320(93)90101-4
   RAUMBAUGH J, 1998, ADDISON WESLEY OBJEC
   SAATY TL, 1994, INTERFACES, V24, P19, DOI 10.1287/inte.24.6.19
   Tervonen I, 1996, IEEE SOFTWARE, V13, P44, DOI 10.1109/52.476285
NR 23
TC 36
Z9 39
U1 0
U2 3
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAY
PY 2003
VL 11
IS 1
BP 39
EP 55
DI 10.1023/A:1023741528816
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 674WP
UT WOS:000182660400005
DA 2024-07-18
ER

PT J
AU Jäntti, M
   Aho, M
AF Jantti, Marko
   Aho, Markus
TI Quality aspects of digital forest service management: a case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Digital transformation; IT quality; Information system; Forestry
AB Forest industry plays a critical role for many remote rural regions in Nordic countries. Despite the increasing number of various digital transformation initiatives, many forestry organizations still use very traditional non-digitalized work practices in harvesting, logging, and support operations. Unfortunately, digital transformation is often performed as an ad hoc activity without a holistic approach to ensure ICT quality control. In this paper, we aim to answer the research problem of how digital transformation affects the quality of a forest machine operator's operational processes and service systems. A case study research method with a single case structure was used in this study. The main contribution of the paper is to show that digital transformation shall benefit not only the forest machine operator organization but also their surrounding ecosystem by increasing transparency of operations, reducing travel costs, increasing productivity, and creating a more proactive operating model. Both sociological and technical aspects of digital transformation are discussed in the context of forest service management. Additionally, we show that in order to succeed in digital transformation, forestry organizations must pay attention to various quality aspects holistically: hardware quality, software quality, service quality, data quality, and process/project quality.
C1 [Jantti, Marko] Kajaani Univ Appl Sci, CEMIS Ctr, Ketunpolku 1, Kajaani 87101, Finland.
   [Aho, Markus] Funlus Oy, Sepontie 15, Nilsia 73300, Finland.
   [Aho, Markus] Univ Eastern Finland, UEF Business Sch, Yliopistokatu 2, Joensuu 80100, Finland.
   [Jantti, Marko] Univ Eastern Finland, Sch Comp, Kuopio, Finland.
C3 Kajaani University of Applied Sciences; University of Eastern Finland;
   University of Eastern Finland
RP Jäntti, M (corresponding author), Kajaani Univ Appl Sci, CEMIS Ctr, Ketunpolku 1, Kajaani 87101, Finland.; Jäntti, M (corresponding author), Univ Eastern Finland, Sch Comp, Kuopio, Finland.
EM marko.jantti@cemis.fi; markus.aho@funlus.org
OI Aho, Markus/0000-0003-0603-583X
FU Development of AIKA Ecosystem in Kainuu project (Regional Council of
   Kainuu) [A78688]; DIH-World (Horizon 2020 Framework Programme of the EU)
   [952176]; H2020 - Industrial Leadership [952176] Funding Source: H2020 -
   Industrial Leadership
FX This work was supported by the Development of AIKA Ecosystem in Kainuu
   project (Regional Council of Kainuu, A78688) and DIH-World (co-funded by
   the Horizon 2020 Framework Programme of the EU under grant agreement No
   952176).
CR Aaen J, 2022, EUR J INFORM SYST, V31, P288, DOI 10.1080/0960085X.2021.1947753
   Ahmed BS, 2019, IEEE ACCESS, V7, P13758, DOI 10.1109/ACCESS.2019.2893493
   [Anonymous], 2012, 1550482012 ISOIEC TC
   [Anonymous], 2011, 25010 ISOIEC JTC1SC7
   [Anonymous], 2018, 2000012018 ISOIEC JT
   [Anonymous], 2019, 200002 ISOIEC JTC
   [Anonymous], 2010, Capability maturity model integration: overview
   [Anonymous], 2011, ITIL SERVICE OPERATI
   Axelos, 2017, PRINCE2 HDB MAN SUCC
   Blake R., 2011, Journal of Data and Information Quality JDIQ, V2
   COBIT5, 2012, CONTR OBJ INF REL TE
   Duffy K., 2008, AMCIS08 P 14 AM C IN
   EISENHARDT KM, 1989, ACAD MANAGE REV, V14, P532, DOI 10.2307/258557
   Ferrari A, 2022, INFORM SOFTWARE TECH, V145, DOI 10.1016/j.infsof.2021.106816
   Gabrys J, 2020, BIG DATA SOC, V7, DOI 10.1177/2053951720904871
   Hinze A., 2022, Smart Health, DOI 10.1016/j.smhl.2021.100225
   Jäntti M, 2022, COMM COM INF SC, V1621, P175, DOI 10.1007/978-3-031-14179-9_12
   Khanna A, 2020, WIRELESS PERS COMMUN, V114, P1687, DOI 10.1007/s11277-020-07446-4
   Lim N. K., 2021, P 2021 INT C GREEN E, P1
   Maglio PP, 2008, J ACAD MARKET SCI, V36, P18, DOI 10.1007/s11747-007-0058-9
   Marcu AE, 2019, 2019 42ND INTERNATIONAL CONFERENCE ON TELECOMMUNICATIONS AND SIGNAL PROCESSING (TSP), P629, DOI [10.1109/tsp.2019.8768835, 10.1109/TSP.2019.8768835]
   Mohammed Sadman Kabir, 2019, 2019 IEEE 5th International Conference on Computer and Communications (ICCC), P2152, DOI 10.1109/ICCC47050.2019.9064058
   MOSHELL M, 1993, COMPUTER, V26, P81, DOI 10.1109/2.192003
   Rivera B, 2016, J WEB ENG, V15, P433
   Rönnqvist M, 2015, ANN OPER RES, V232, P11, DOI 10.1007/s10479-015-1907-4
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Satava RM, 1996, IEEE ENG MED BIOL, V15, P94, DOI 10.1109/51.486724
   Shrestha A., 2014, CCIS, V477, P165, DOI DOI 10.1007/978-3-319-13036-1_15
   Sommerville Ian, 2016, Software engineering 8
   Spohrer J., 2008, 41st Annual Hawaii International Conference on System Science, p, P104
   Vianez A, 2022, INT J ENV RES PUB HE, V19, DOI 10.3390/ijerph19010464
   Westerberg S, 2013, J HUM-ROBOT INTERACT, V2, P84, DOI 10.5898/JHRI.2.3.Westerberg
   Yin R., 1994, CASE STUDY RES DESIG
   Yixiong Wang, 2013, 2013 IEEE International Conference on Green Computing and Communications (GreenCom) and IEEE Internet of Things (iThings) and IEEE Cyber, Physical and Social Computing (CPSCom), P366, DOI 10.1109/GreenCom-iThings-CPSCom.2013.80
   Zhang L.-J., 2007, Services computing
NR 35
TC 0
Z9 0
U1 3
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 75
EP 94
DI 10.1007/s11219-023-09635-3
EA MAY 2023
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:000992348200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Lombardi, F
   Fanton, A
AF Lombardi, Federico
   Fanton, Alberto
TI From DevOps to DevSecOps is not enough. CyberDevOps: an extreme
   shifting-left architecture to bring cybersecurity within software
   security lifecycle pipeline
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE DevOps; DevSecOps; Vulnerability assessment; Compliance
ID DELIVERY
AB Software engineering is evolving quickly leading to an urgency to discover more efficient development models. DevOps and its security-oriented extension DevSecOps promised to speed up the development process while ensuring more robust code. However, many third-party libraries and infrastructure vulnerabilities may still pose security flaws. Besides, regulatory compliance and standards go beyond secure software asking for comprehensive security and accurate infrastructure hardening. Thus, we may wonder: is DevSecOps enough? In this paper, we propose CyberDevOps, a novel architecture which integrates cybersecurity within DevSecOps. Specifically, (i) we revise software composition analysis to deal with nondeterministic environments and (ii) we incorporate vulnerability assessment and compliance within a further pipeline step. To assess the effectiveness of CyberDevOps, we conduct an experimental evaluation. Specifically, we attack a web application and we show how CyberDevOps is able to detect hidden defects while a standard DevSecOps pipeline fails. Furthermore, we assess code quality and security by comparing DevOps, DevSecOps, and CyberDevOps by monitoring two Conio code bases over a year. The results show that CyberDevOps helps to fix up to 100% of known bugs and vulnerabilities and improve significantly the code quality.
C1 [Lombardi, Federico; Fanton, Alberto] Conio Inc, San Francisco, CA 94105 USA.
RP Lombardi, F (corresponding author), Conio Inc, San Francisco, CA 94105 USA.
EM federico.lombardi@conio.com; alberto.fanton@conio.com
CR AICPA, 1997, SYST ORG CONTR SOC S
   Aniello L., 2016, INT C SOFTWARE ENG D, V717, P53
   [Anonymous], 2021, Shift left devops
   [Anonymous], 2017, 27001 ISOIEC
   [Anonymous], 1999, NATL I STANDARDS TEC
   Aqua Security, 2019, TRIVY
   Artifex, 1998, ABOUT US
   Atlassian, 2020, ATL SURV 2020 DEVOPS
   AWSLabs, 2016, GIT SECR
   Baldoni R, 2014, LECT NOTES COMPUT SC, V8696, P350, DOI 10.1007/978-3-319-10557-4_38
   Bass L, 2015, 2015 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON RELEASE ENGINEERING, P4, DOI 10.1109/RELENG.2015.11
   Bird J., 2016, DEVOPSSEC DELIVERING
   Bosch J., 2014, CONTINUOUS SOFTWARE, P3
   Carter K, 2017, IEEE SOFTWARE, V34, P93, DOI 10.1109/MS.2017.3571578
   Casey K., 2018, BUILD STRONG DEVSECO
   Cash S, 2016, IBM J RES DEV, V60, DOI 10.1147/JRD.2016.2515418
   Center for Internet Security, 2017, CIS OR LIN 6 BENCHM
   Chaillan N., 2019, Waterfall to DevSecOps in DoD
   Chickowski E., 2018, Seven winning devsecops metrics security should track
   Ciccotelli C, 2015, IEEE PAC RIM INT SYM, P11, DOI 10.1109/PRDC.2015.22
   Collins R., 2017, PEP 508 DEPENDENCY S
   Conio Inc, 2018, CON GIT REP
   Crouch A., 2018, DEVSECOPS INCORPORAT
   Desai Rajavi, 2021, Journal of Physics: Conference Series, DOI 10.1088/1742-6596/1964/4/042045
   Digkas G., 2020, IEEE T SOFTWARE ENG
   Dimov A., 2021, INFORM SYSTEMS GRID
   Ecik H., 2021, 2021 INT C INF SEC C, P87, DOI [10.1109/ISCTURKEY53027.2021.9654331, DOI 10.1109/ISCTURKEY53027.2021.9654331]
   Falcon, 2023, SPOTLIGHT
   Fanton A., 2022, VULNERABLE PILLOW WR
   Farroha BS, 2014, IEEE MILIT COMMUN C, P288, DOI 10.1109/MILCOM.2014.54
   Fitzgerald B, 2017, J SYST SOFTWARE, V123, P176, DOI 10.1016/j.jss.2015.06.063
   Foo D., 2019, ARXIV
   Fredrik L., 2016, PILLOW
   GhostScript, 1998, DOC
   Google, 2004, ABOUT US
   Greenbone, 2006, ABOUT US
   Hejase HJ., 2020, Journal of Economics and Economic Education Research, V21, P1, DOI 10.13140/RG.2.2.17011.35369
   Hsu Tony Hsiang-Chih, 2018, Hands-On Security in DevOps: Ensure Continuous Security, Deployment, and Delivery with DevSecOps
   Hudson M., 2012, ABOUT US
   Humphrey A., 2018, ARMOR
   Hutchins E, 2011, PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON INFORMATION WARFARE AND SECURITY, P113
   Ibrahim A., 2022, 2022 2nd International Mobile, Intelligent, and Ubiquitous Computing Conference (MIUCC), P284, DOI DOI 10.1109/MIUCC55081.2022.9781709
   Imtiaz N., 2021, P 15 ACMIEEE INT S E, P1
   Jerbi A., 2018, INFOWORLD
   Jose F., 2018, EFFECTIVE DEVSECOPS
   Kawaguchi K., 2015, JENKINS
   Leite L, 2020, ACM COMPUT SURV, V52, DOI 10.1145/3359981
   Leppanen Marko, 2015, IEEE Software, V32, P64, DOI 10.1109/MS.2015.50
   Leppänen T, 2022, LECT NOTES BUS INF P, V453, P200, DOI 10.1007/978-3-031-11510-3_12
   Letouzey J., 2010, SQALE MODELS ASSESSI
   Lianping Chen, 2015, IEEE Software, V32, P50, DOI 10.1109/MS.2015.27
   Lombardi F., 2022, CDO DATASET
   Lombardi F, 2019, FUTURE GENER COMP SY, V98, P342, DOI 10.1016/j.future.2019.03.003
   Malware Tips, 2013, MALWAREHUB
   Martorella C., 2015, IEEE T AERO ELEC SYS
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MITRE, 2000, CVE VULN DAT
   MITRE, 2018, CVE201816509
   Mohan V, 2016, PROCEEDINGS OF 2016 11TH INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY, (ARES 2016), P542, DOI 10.1109/ARES.2016.92
   Nath K, 2014, PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON RELIABILTY, OPTIMIZATION, & INFORMATION TECHNOLOGY (ICROIT 2014), P86, DOI 10.1109/ICROIT.2014.6798297
   Offsec Services Ltd, 2009, ABOUT US
   OWASP, 2020, OWASP DEP CHECK
   OWASP, 2016, OWASP ZED ATT PROX Z
   OWASP, 2020, OWASP MODSECURITY CO
   Paule C., 2018, Securing DevOps - Detection of vulnerabilities in CD pipelines
   PCI Security Standard Council, 2006, PAYM CARD IND DAT SE
   PortSwigger, 2003, BURP SUIT
   Prates L, 2019, LECT NOTES BUS INF P, V359, P77, DOI 10.1007/978-3-030-29608-7_7
   PuppetLabs, 2014, STAT DEVOPS REP
   PuppetLabs, 2019, STAT DEVOPS REP
   PyCQA, 2018, BAND
   Pyup, 2017, SAFETY
   Rahman AAU, 2016, INTERNATIONAL WORKSHOP ON CONTINUOUS SOFTWARE EVOLUTION AND DELIVERY, CSED 2016, P70, DOI [10.1109/CSED.2016.021, 10.1145/2896941.2896946]
   Rajapakse RN, 2022, INFORM SOFTWARE TECH, V141, DOI 10.1016/j.infsof.2021.106700
   Rapid7, 2003, MET FRAM
   Raynaud F., 2017, DEVSECOPS WHITEPAPER
   Reitz K., 2020, ABOUT US
   Sallin M, 2021, LECT NOTES BUS INF P, V419, P103, DOI 10.1007/978-3-030-78098-2_7
   Schermann G., 2016, PEERJ PREPRINTS, V4, DOI DOI 10.7287/PEERJ.PREPRINTS.1889V1
   Shahin M, 2019, EMPIR SOFTW ENG, V24, P1061, DOI 10.1007/s10664-018-9651-4
   Shahin M, 2017, IEEE ACCESS, V5, P3909, DOI 10.1109/ACCESS.2017.2685629
   Shodan, 2013, SHODAN SEARCH ENGINE
   SM7 Software, 2013, ABOUT US
   Sojan A, 2021, 2021 IEEE 6TH INTERNATIONAL CONFERENCE ON SMART CLOUD (SMARTCLOUD 2021), P125, DOI 10.1109/SmartCloud52277.2021.00029
   SonarSource S. A., 2018, METRICS DEFINITION
   SonarSource S. A., 2013, ABOUT US
   Stahl Daniel, 2017, 2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P440, DOI 10.1109/SEAA.2017.8114695
   Synopsys Software, 2021, BSIMM12 2021 INS TRE
   Sysdig, 2015, ABOUT US
   TheHive Project, 2020, CORTEX
   Tiangolo, 2019, ABOUT US
   Vijayan J., 2019, 6 DEVSECOPS BEST PRA
   Wazuh, 2008, OP SOURC SEC PLATF
   Wazuh, 2019, DEF AL LEV THRESH
   Woodward S., 2018, DEVSECOPS METRICS AP
   Zahedi Mansooreh, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P41, DOI 10.1145/3383219.3383224
NR 96
TC 0
Z9 2
U1 7
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 619
EP 654
DI 10.1007/s11219-023-09619-3
EA APR 2023
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000977189400001
DA 2024-07-18
ER

PT J
AU Elekes, M
   Molnár, V
   Micskei, Z
AF Elekes, Marton
   Molnar, Vince
   Micskei, Zoltan
TI Assessing the specification of modelling language semantics: a study on
   UML PSSM
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE UML; Modelling language; Semantics; State machine; Testing; Conformance
ID EXECUTION
AB Modelling languages play a central role in developing complex, critical systems. A precise, comprehensible, and high-quality modelling language specification is essential to all stakeholders using, implementing, or extending the language. Many good practices can be found that improve the understandability or consistency of the languages' semantics. However, designing a modelling language intended for a large audience is still challenging. In this paper, we investigate the challenges and typical issues with assessing the specifications of behavioural modelling language semantics. Our key insight is that the various stakeholder's understandings of the language's semantics are often misaligned, and the semantics defined in various artefacts (simulators, test suites) are inconsistent. Therefore assessment of semantics should focus on identifying and resolving these inconsistencies. To illustrate these challenges and techniques, we assessed parts of a state-of-the-art specification for a general-purpose modelling language, the Precise Semantics of UML State Machines (PSSM). We reviewed the text of the specification, analysed and executed PSSM's conformance test suite, and categorised our experiences according to questions generally relevant to modelling languages. Finally, we made recommendations for improving the development of future modelling languages by representing the semantic domain and traces more explicitly, applying diverse test design techniques to obtain conformance test suites, and using various tools to support early-phase language design.
C1 [Elekes, Marton; Molnar, Vince; Micskei, Zoltan] Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Muegyetem Rkp 3, H-1111 Budapest, Hungary.
C3 Budapest University of Technology & Economics
RP Micskei, Z (corresponding author), Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Muegyetem Rkp 3, H-1111 Budapest, Hungary.
EM elekes@mit.bme.hu; molnarv@mit.bme.hu; micskeiz@mit.bme.hu
RI ; Micskei, Zoltan/G-8351-2012
OI Elekes, Marton/0000-0002-3558-147X; Micskei, Zoltan/0000-0003-1846-261X
FU Budapest University of Technology and Economics; National Research,
   Development and Innovation Fund of Hungary
   [2019-2.1.1-EUREKA-2019-00001]; European Union [823788]; Marie Curie
   Actions (MSCA) [823788] Funding Source: Marie Curie Actions (MSCA)
FX Open access funding provided by Budapest University of Technology and
   Economics. This work was partially supported by the National Research,
   Development and Innovation Fund of Hungary, financed under the
   2019-2.1.1-EUREKA-2019-00001 funding scheme, and by the European Union's
   Horizon 2020 program under the Marie Sklodowska-Curie grant agreement
   No. 823788.
CR Abdelhalim Islam, 2013, International Journal on Software Tools for Technology Transfer, V15, P375, DOI 10.1007/s10009-012-0243-0
   André É, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3579821
   [Anonymous], 2012, PROC 7 WORKSHOP MODE, DOI DOI 10.1145/2422518.2422527
   [Anonymous], 2014, The Java Language Specification, Java SE
   Bork D, 2021, SOFTW SYST MODEL, V20, P939, DOI 10.1007/s10270-021-00895-w
   Bork D, 2020, INFORM SYST, V87, DOI 10.1016/j.is.2019.101425
   Bouskela D, 2022, REQUIR ENG, V27, P1, DOI 10.1007/s00766-021-00359-z
   Brambilla M., 2012, MODEL DRIVEN SOFTWAR, DOI [10.1007/978-3-031-02546-4, DOI 10.1007/978-3-031-02546-4]
   Broy M, 2011, SOFTW SYST MODEL, V10, P441, DOI 10.1007/s10270-011-0207-y
   Budgen D, 2011, SOFTWARE PRACT EXPER, V41, P363, DOI 10.1002/spe.1009
   Ciccozzi F, 2019, SOFTW SYST MODEL, V18, P2313, DOI 10.1007/s10270-018-0675-4
   Cook S, 2012, SOFTW SYST MODEL, V11, P471, DOI 10.1007/s10270-012-0256-x
   Craciun F, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P485, DOI 10.1109/ICST.2013.67
   Crane Michelle L., 2005, 2005501 QUEENS U SCH
   Czech G, 2020, SOFTWARE QUAL J, V28, P663, DOI 10.1007/s11219-019-09466-1
   Elekes M., 2021, 10 LATIN AM S DEPEND, P1, DOI [10.1109/LADC53747.2021.9672570, DOI 10.1109/LADC53747.2021.9672570]
   Friedenthal Sanford, 2018, INSIGHT, V21, P21, DOI 10.1002/inst.12186
   Gabmeyer S, 2019, SOFTW SYST MODEL, V18, P473, DOI 10.1007/s10270-017-0591-z
   Graics B, 2020, SOFTW SYST MODEL, V19, P1483, DOI 10.1007/s10270-020-00806-5
   Grosser K, 2022, SOFTW SYST MODEL, V21, P2133, DOI 10.1007/s10270-021-00958-y
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D, 2004, COMPUTER, V37, P64, DOI 10.1109/MC.2004.172
   Hojaji F, 2019, SOFTW SYST MODEL, V18, P3461, DOI 10.1007/s10270-019-00724-1
   Horvath B., 2020, PROC MODELS COMPANIO, DOI [10.1145/3417990.3421407, DOI 10.1145/3417990.3421407]
   IEEE, 2012, 625312012E IEEE, DOI [10.1109/IEEESTD.2012.6228486, DOI 10.1109/IEEESTD.2012.6228486]
   *ISO IEC, 1994, 9646 ISOIEC
   ISO/IEC/IEEE, 2018, 291482018 ISOIECIEEE
   Lima L, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102497
   Lund M. S., 2007, LECT NOTES COMPUT SC, V6100, P77, DOI [10.1007/978-3-642-16277-0_4, DOI 10.1007/978-3-642-16277-0_4]
   Makedonski P, 2019, SOFTWARE QUAL J, V27, P885, DOI 10.1007/s11219-018-9423-9
   Micskei Z., 2014, OSS4MDE MODELS, V1290, P31
   Micskei Z, 2011, SOFTW SYST MODEL, V10, P489, DOI 10.1007/s10270-010-0157-9
   Moody DL, 2009, IEEE T SOFTWARE ENG, V35, P756, DOI 10.1109/TSE.2009.67
   Object Management Group (OMG), 2021, Semantics of a Foundational Subset for Executable UML Models
   omg, 2017, OMG UN MOD LANG UML
   OMG, 2019, Precise semantics of UML state machines
   OMG, 2011, SEM FDN SUBS EX UML
   PNUELI A, 1991, LECT NOTES COMPUT SC, V526, P244
   Posse E, 2016, SOFTW SYST MODEL, V15, P179, DOI 10.1007/s10270-014-0399-z
   Purchase H. C., 2001, Graph Drawing. 8th International Symposium, GD 2000. Proceedings (Lecture Notes in Computer Science Vol.1984), P5
   Ratiu D, 2018, SOFTWARE QUAL J, V26, P1483, DOI 10.1007/s11219-017-9390-6
   Richard Kuhn D., 2013, Introduction to combinatorial testing
   Romero AG, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P5
   Seidewitz E, 2003, IEEE SOFTWARE, V20, P26, DOI 10.1109/MS.2003.1231147
   Seidewitz E., 2015, P 15 INT WORKSH OCL, V1512, P105
   Seidewitz Ed., 2014, HILT, P61, DOI [10.1145/2663171.2663187, DOI 10.1145/2663171.2663187]
   Selic Bran, 2012, Formal Methods for Model-Driven Engineering. 12th International School of Formal Methods for the Design of Computer, Communication and Software Systems (SFM 2012). Advanced Lectures, P1, DOI 10.1007/978-3-642-30982-3_1
   Selic BV, 2004, LECT NOTES COMPUT SC, V3185, P181
   Semeráth O, 2021, SOFTW SYST MODEL, V20, P1713, DOI 10.1007/s10270-021-00884-z
   Sondergaard H, 2017, CONCURR COMP-PRACT E, V29, DOI 10.1002/cpe.4071
   Störrle H, 2014, LECT NOTES COMPUT SC, V8767, P518, DOI 10.1007/978-3-319-11653-2_32
   Nguyen T, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P123, DOI 10.1109/REW.2019.00027
   Pham VC, 2017, MODELSWARD: PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P208, DOI 10.5220/0006274502080219
   Wiesmayr B, 2021, 24TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2021), P297, DOI 10.1109/MODELS50736.2021.00037
   Zschaler S, 2023, SOFTW SYST MODEL, V22, P1319, DOI 10.1007/s10270-022-01073-2
NR 55
TC 1
Z9 1
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 575
EP 617
DI 10.1007/s11219-023-09617-5
EA MAR 2023
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000941898000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Amalfitano, D
   De Simone, V
   Scala, S
   Fasolino, AR
AF Amalfitano, Domenico
   De Simone, Vincenzo
   Scala, Stefano
   Fasolino, Anna Rita
TI A model-driven engineering approach for supporting questionnaire-based
   gap analysis processes through application lifecycle management systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Gap analysis; Software process assessment; Application lifecycle
   management; Model-driven engineering; Industrial case study
AB Gap analysis is a common approach in industry to evaluate the gaps between the implemented software processes and the requirements of process quality frameworks or standard norms. Gap analysis processes are usually executed by means of questionnaires that need to be crafted ad hoc according to specific appraisal goals. The approaches used for developing, compiling and evaluating the answers given to these questionnaires usually do not follow well-defined methodologies or processes, and lack adequate tool support. This paper aims at investigating novel approaches for the execution of questionnaire-based gap analysis (QBGA) processes in industrial practices. We propose the adoption of state-of-the-art software engineering technologies and methodologies like application lifecycle management (ALM) and model-driven engineering (MDE) to support these processes. We perform an industrial survey for understanding the main issues affecting questionnaire-based gap analysis processes in industrial practices. We exploit model-driven engineering for building an ALM-based tool that supports the QBGA process execution and allows us to overcome the emerged process issues. We implement the GADGET tool to apply the MDE approach we use for developing the ALM-based tool. The feasibility of the proposed approach has been evaluated by a case study conducted in the automotive industrial domain. Two different QBGA processes have been configured and implemented in an ALM system with the support of the GADGET tool. The resulting ALM tool was used to perform the gap analysis processes. Semi-structured interviews with the involved industrial personnel were conducted to carry out a qualitative evaluation. The case study results show that the introduction of ALM improves the quality of the questionnaire-based gap analysis processes. Moreover, the adoption of model-driven engineering approach implemented by the GADGET tool provides a viable solution for configuring application lifecycle management systems and supporting the process execution.
C1 [Amalfitano, Domenico; De Simone, Vincenzo; Fasolino, Anna Rita] Univ Naples Federico II, Via Claudio 21, I-80125 Naples, Italy.
   [Scala, Stefano] Fiat Chrysler Automobiles, Via Ex Aeroporto, Pomigliano Darco, Italy.
C3 University of Naples Federico II; Stellantis N.V.; Stellantis Italy
RP Fasolino, AR (corresponding author), Univ Naples Federico II, Via Claudio 21, I-80125 Naples, Italy.
EM domenico.amalfitano@unina.it; vincenzo.desimone2@unina.it;
   stefano.scala@fcagroup.com; annarita.fasolino@unina.it
RI Amalfitano, Domenico/HJH-4638-2023; Fasolino, Anna Rita/V-4582-2019
OI Amalfitano, Domenico/0000-0002-4761-4443; Fasolino, Anna
   Rita/0000-0001-7116-019X
FU Italian Ministry for University and Research (MIUR) [PON03PE_00159_3]
FX This work was carried out in the context of the research project
   APPS4SAFETY (Active Preventive Passive Solutions for Safety -
   PON03PE_00159_3), partially funded by the Italian Ministry for
   University and Research (MIUR).
CR Al-Mayahi I., 2012, WORLDCOMP 2012 P WOR
   Alegria Hurtado., 2011, Proc. of the 2011 International Conference on Software and Systems Process, P43
   Amalfitano D, 2018, EUROMICRO CONF PROC, P1, DOI 10.1109/SEAA.2018.00010
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 2006, 623042006 IEC
   [Anonymous], 2008, INTERNET MAIL MIXED
   [Anonymous], 2011, 262622011 ISO
   [Anonymous], 2011, 61513 IEC
   Bolstorff P., 2007, Supply Chain Excellence: A Handbook for Dramatic Improvement Using the SCOR Model
   Bornstein MH, 2013, DEV REV, V33, P357, DOI 10.1016/j.dr.2013.08.003
   Ceccarelli Andrea, 2015, Computer Safety, Reliability and Security. SAFECOMP 2015 Workshops, ASSURE, DECSoS, ISSE, ReSA4CI and SASSUR. Proceedings: LNCS 9338, P303, DOI 10.1007/978-3-319-24249-1_26
   Ciccozzi F, 2016, IEEE ACCESS, V4, P6451, DOI 10.1109/ACCESS.2016.2613642
   Conrad M., 2012, Lecture Notes in Informatics, VP-208, P807
   De Lucia A, 2001, PROC IEEE INT CONF S, P642, DOI 10.1109/ICSM.2001.972781
   Dybå T, 2011, EMPIR SOFTW ENG, V16, P425, DOI 10.1007/s10664-011-9163-y
   Falessi D, 2012, IEEE SOFTWARE, V29, P64, DOI 10.1109/MS.2011.116
   Ferry N, 2014, INT CONF UTIL CLOUD, P269, DOI 10.1109/UCC.2014.36
   Fuggetta A., 2014, Proceedings of the on Future of Software Engineering, P1, DOI [10.1145/2593882.2593883, DOI 10.1145/2593882.2593883]
   Gatrell M, 2016, IEEE SOFTWARE, V33, P103, DOI 10.1109/MS.2016.109
   Amaral LMG, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P424, DOI 10.1109/QUATIC.2010.78
   Karabacak B, 2006, COMPUT SECUR, V25, P413, DOI 10.1016/j.cose.2006.05.001
   Kent S., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P286
   Lacheiner H, 2011, EUROMICRO CONF PROC, P286, DOI 10.1109/SEAA.2011.51
   de la Vara JL, 2016, INFORM SOFTWARE TECH, V72, P16, DOI 10.1016/j.infsof.2015.11.008
   McMahon P.E., 2010, Integrating CMMI and Agile Development.Case Studies and Proven Techniques for Faster Performance Improvement
   Min Cao, 2010, 2010 IEEE International Conference on Management of Innovation & Technology (ICMIT 2010), P894, DOI 10.1109/ICMIT.2010.5492810
   Moratalla J., 2012, Proceedings of the 2012 Annual SRII Global Conference (SRII), P343, DOI 10.1109/SRII.2012.45
   Nguyen DK, 2009, GAMBUSE GAP ANAL MET, P293
   Palmer N., 2007, TECH REP
   Panesar-Walawege Rajwinder Kaur, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P335, DOI 10.1109/ICST.2010.12
   Panesar-Walawege RK, 2013, INFORM SOFTWARE TECH, V55, P836, DOI 10.1016/j.infsof.2012.11.009
   PARASURAMAN A, 1985, J MARKETING, V49, P41, DOI 10.2307/1251430
   Picha P, 2016, 2016 42ND EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA), P1, DOI 10.1109/SEAA.2016.37
   Postina M, 2009, 2009 13TH ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE WORKSHOPS (EDOCW 2009), P274, DOI 10.1109/EDOCW.2009.5331980
   Saris WE., 2007, Wiley series in survey methodology. Design, evaluation, DOI DOI 10.1002/9780470165195
   Sommerville I, 2006, INT COMPUTER SCI
   Valdevit T, 2010, ICEIS 2010: PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 3: INFORMATION SYSTEMS ANALYSIS AND SPECIFICATION, P413
   Wieringa R, 2015, SCI COMPUT PROGRAM, V101, P136, DOI 10.1016/j.scico.2014.11.013
   Wilson C., 2007, Interactions, V14, P48, DOI DOI 10.1145/1189976
NR 39
TC 1
Z9 1
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 535
EP 565
DI 10.1007/s11219-019-09479-w
EA JAN 2020
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000507679100001
DA 2024-07-18
ER

PT J
AU Eghan, EE
   Alqahtani, SS
   Forbes, C
   Rilling, J
AF Eghan, Ellis E.
   Alqahtani, Sultan S.
   Forbes, Christopher
   Rilling, Juergen
TI API trustworthiness: an ontological approach for software library
   adoption
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Trustworthiness; Code reuse; License violations; API
   breaking changes; Software security vulnerabilities
ID SEMANTIC WEB; PATTERNS
AB The globalization of the software industry has led to an emerging trend where software systems depend increasingly on the use of external open-source external libraries and application programming interfaces (APIs). While a significant body of research exists on identifying and recommending potentially reusable libraries to end users, very little is known on the potential direct and indirect impact of these external library recommendations on the quality and trustworthiness of a client's project. In our research, we introduce a novel Ontological Trustworthiness Assessment Model (OntTAM), which supports (1) the automated analysis and assessment of quality attributes related to the trustworthiness of libraries and APIs in open-source systems and (2) provides developers with additional insights into the potential impact of reused libraries and APIs on the quality and trustworthiness of their project. We illustrate the applicability of our approach, by assessing the trustworthiness of libraries in terms of their API breaking changes, security vulnerabilities, and license violations and their potential impact on client projects.
C1 [Eghan, Ellis E.; Alqahtani, Sultan S.; Forbes, Christopher; Rilling, Juergen] Concordia Univ, Dept Comp Sci & Software Engn, Montreal, PQ, Canada.
C3 Concordia University - Canada
RP Rilling, J (corresponding author), Concordia Univ, Dept Comp Sci & Software Engn, Montreal, PQ, Canada.
EM e_eghan@encs.concordia.ca; s_alqaht@encs.concordia.ca;
   c_forb@encs.concordia.ca; juergen.rilling@concordia.ca
OI Eghan, Ellis E./0000-0003-0186-9173; Saud, Sultan/0000-0001-9399-1971
CR Alqahtani S. S., 2017, 10 IEEE INT C SOFTW
   Alqahtani SS, 2016, PROC INT SYMP SOFTW, P219, DOI 10.1109/ISSRE.2016.12
   [Anonymous], 2006, META MODELLING ONTOL
   Artho C., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P141, DOI 10.1109/MSR.2012.6224274
   Ayala C, 2013, DEV SOFTWARE OPEN SO, P167
   Bergel A, 2009, EUR CON SFTWR MTNCE, P285, DOI 10.1109/CSMR.2009.13
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Boland T., 2010, PRELIMINARY FRAMEWOR, P1
   Cadariu M, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P516, DOI 10.1109/SANER.2015.7081868
   Cingolani P, 2012, IEEE INT CONF FUZZY
   Cossette B.E., 2012, P ACM SIGSOFT 20 INT, p55:1, DOI DOI 10.1145/2393596.2393661
   Decan A, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P493, DOI 10.1109/SANER.2016.12
   del Bianco V., 2009, QUALITY OPEN SOURCE, P199
   Di Penta Massimiliano, 2010, P 32 ACMIEEE INT C S, P145, DOI [10.1145/1806799.1806824, DOI 10.1145/1806799.1806824]
   Dig D, 2006, J SOFTW MAINT EVOL-R, V18, P83, DOI 10.1002/smr.328
   DuCharme B., 2011, LEARNING SPARQL
   F. S. Foundation, 2014, VAR LIC COMM THEM
   Gao JZ, 1999, COMPUTER, V32, P38, DOI 10.1109/2.762791
   German DM, 2009, PROC INT CONF SOFTW, P188, DOI 10.1109/ICSE.2009.5070520
   Hemel A., 2011, P 8 WORK C MIN SOFTW, P63
   Henderson-Sellers B, 2011, J SYST SOFTWARE, V84, P301, DOI 10.1016/j.jss.2010.10.025
   Hmood A., 2012, Proceedings of the 2012 IEEE 36th IEEE Annual Computer Software and Applications Conference Workshops (COMPSACW), P334, DOI 10.1109/COMPSACW.2012.67
   Hmood A., 2010, ONTEQAM METHODOLOGY, V8
   Hora A, 2015, PROC IEEE INT CONF S, P321, DOI 10.1109/ICSM.2015.7332478
   I. E. Commission, 2000, PROGR CONTR 7
   Jezek K, 2015, INFORM SOFTWARE TECH, V65, P129, DOI 10.1016/j.infsof.2015.02.014
   Jiang H, 2017, PROC INT CONF SOFTW, P38, DOI 10.1109/ICSE.2017.12
   Kagdi H., 2006, P 2006 INT WORKSH MI, P47, DOI [DOI 10.1145/1137983.1137996, 10.1145/1137983.1137996]
   Kagdi Huzefa., 2007, MSR 07, P20
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kapur P, 2010, ACM SIGPLAN NOTICES, V45, P726, DOI 10.1145/1932682.1869518
   Keivanloo I., 2011, P 3 INT WORKSHOP SEA, P25
   Kuhn B. M., 2016, THE LESSER GPL
   Land R, 2009, LECT NOTES COMPUT SC, V5791, P150
   Larson D., 2005, IT Professional, V7, P9, DOI 10.1109/MITP.2005.42
   Maalej W, 2013, IEEE T SOFTWARE ENG, V39, P1264, DOI 10.1109/TSE.2013.12
   Mann C. J. H., 2003, Kybernetes, V32, DOI [10.1108/k.2003.06732iae.006, DOI 10.1108/K.2003.06732IAE.006]
   McCall J. A., 1977, FACTORS SOFTWARE QUA, VI
   McCarey F, 2005, ARTIF INTELL REV, V24, P253, DOI 10.1007/s10462-005-9012-8
   McGuinness D. L., 2004, OWL WEB ONTOLOGY LAN, DOI DOI 10.2004-03
   Mileva YM, 2009, IWPSE-EVOL 09: ERCIM WORKSHOP ON SOFTWARE EVOLUTION (EVOL) AND INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE), P57
   Mileva YM, 2010, LECT NOTES COMPUT SC, V6303, P173, DOI 10.1007/978-3-642-15585-7_17
   Monden A, 2011, IEEE SOFTWARE, V28, P42, DOI 10.1109/MS.2010.159
   Nguyen VH, 2016, EMPIR SOFTW ENG, V21, P2268, DOI 10.1007/s10664-015-9408-2
   PARNAS DL, 1994, PROC INT CONF SOFTW, P279, DOI 10.1109/ICSE.1994.296790
   PFLEEGER SL, 1992, IEEE SPECTRUM, V29, P56, DOI 10.1109/6.144538
   Plate H, 2015, PROC IEEE INT CONF S, P411, DOI 10.1109/ICSM.2015.7332492
   Raemaekers S, 2014, IEEE INT WORK C SO, P215, DOI 10.1109/SCAM.2014.30
   Raemaekers S, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P378, DOI 10.1109/ICSM.2012.6405296
   Rahman MM, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P349, DOI 10.1109/SANER.2016.80
   Rhodes T, 2010, J RES NATL INST STAN, V115, P209, DOI 10.6028/jres.115.013
   Robbes R., 2012, P ACM SIGSOFT 20 INT, P1, DOI 10.1145/2393596.2393662
   Samoladas I, 2008, INT FED INFO PROC, V275, P237
   Seedorf S, 2006, 2 INT WORKSH SEM WEB
   Seneviratne O., 2009, WWW2009
   Taibi D., 2008, P 3 INT DR S EMP SOF, P4
   Tan T, 2008, PROCEEDINGS OF THE 9TH INTERNATIONAL CONFERENCE FOR YOUNG COMPUTER SCIENTISTS, VOLS 1-5, P2366, DOI 10.1109/ICYCS.2008.484
   Teyton C., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P289, DOI 10.1109/WCRE.2012.38
   Thung F, 2013, WORK CONF REVERSE EN, P182, DOI 10.1109/WCRE.2013.6671293
   Williams J, 2012, UNFORTUNATE REALITY, P1
   Witte R, 2007, LECT NOTES COMPUT SC, V4519, P37
   Wu YH, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P324, DOI 10.1109/MSR.2015.37
   Würsch M, 2012, COMPUTING, V94, P857, DOI 10.1007/s00607-012-0204-1
   Xavier L, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P138, DOI 10.1109/SANER.2017.7884616
   Yang Y, 2009, LECT NOTES COMPUT SC, V5543, P389, DOI 10.1007/978-3-642-01680-6_35
   ZADEH LA, 1975, INFORM SCIENCES, V8, P199, DOI 10.1016/0020-0255(75)90046-8
   Zhang Y, 2008, IET SOFTW, V2, P185, DOI 10.1049/iet-sen:20070062
   Zhong H., 2017, IEEE T SOFTW ENG, V1
NR 68
TC 4
Z9 4
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 969
EP 1014
DI 10.1007/s11219-018-9428-4
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400004
DA 2024-07-18
ER

PT J
AU Timo, ON
   Petrenko, A
   Ramesh, S
AF Timo, Omer Nguena
   Petrenko, Alexandre
   Ramesh, S.
TI Fault model-driven testing from FSM with symbolic inputs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Extended FSM; Conformance testing; Mutation testing; Fault model-based
   test generation; Constraint solving
AB Test generation based on one-by-one analysis of potential implementations in fault models is challenging; it is indeed impossible or inefficient to enumerate each and every implementation, even when a fault model defines a finite but a significant number of implementations. We propose an approach for fault model and constraint solving-based testing from a particular type of extended finite state machines called a symbolic input finite state machine (SIFSM). Transitions in SIFSMs are labeled with symbolic inputs, which are predicates on input variables having possibly infinite domains. Its implementations, mutants, are also represented by SIFSMs. The generated tests are complete in a given fault domain which is a set of mutants specified with a so-called mutation machine. We define a well-formed mutation SIFSM for describing various types of faults. Given a mutation SIFSM, we develop methods for evaluating the adequacy of a test suite and generating complete tests. Experimental results with the prototype tool we have developed indicate that the approach is applicable to industrial-like systems.
C1 [Timo, Omer Nguena; Petrenko, Alexandre] CRIM, 405 Ave Ogilvy,Suite 101, Montreal, PQ H3N 1M3, Canada.
   [Ramesh, S.] GM Global R&D, Warren, MI 48092 USA.
C3 Universite de Montreal; General Motors
RP Timo, ON (corresponding author), CRIM, 405 Ave Ogilvy,Suite 101, Montreal, PQ H3N 1M3, Canada.
EM omer.nguena-timo@crim.ca; petrenko@crim.ca; ramesh.s@gm.com
OI Nguena Timo, Omer/0000-0002-8336-6600; Petrenko,
   Alexandre/0000-0002-2938-1666
FU NSERC of Canada; MESI (Ministere de l'Economie, Science et Innovation)
   of Gouvernement du Quebec
FX work is supported in part by GM, NSERC of Canada and MESI (Ministere de
   l'Economie, Science et Innovation) of Gouvernement du Quebec.
CR Araujo H, 2017, IEEE ICST WORKSHOP, P46, DOI 10.1109/ICSTW.2017.15
   Batth SS, 2007, LECT NOTES COMPUT SC, V4574, P50
   Bessayah F, 2010, LECT NOTES COMPUT SC, V6303, P137, DOI 10.1007/978-3-642-15585-7_13
   Cavalcanti A, 2017, LECT NOTES COMPUT SC, V10533, P21, DOI 10.1007/978-3-319-67549-7_2
   CHENG KT, 1993, ACM IEEE D, P86
   D'Silva V, 2008, IEEE T COMPUT AID D, V27, P1165, DOI 10.1109/TCAD.2008.923410
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delamaro M. E., 2001, Empirical Software Engineering, V6, P111, DOI 10.1023/A:1011429104252
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Een N., 2004, THEORY APPL SATISFIA, P333
   El-Fakih Khaled, 2016, Engineering Research and Development, V4, DOI 10.1186/s40411-016-0027-4
   El-Fakih Khaled, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P308, DOI 10.1109/ICST.2008.16
   Huang WL, 2017, FORM ASP COMPUT, V29, P335, DOI 10.1007/s00165-016-0402-2
   Huang WL, 2016, INT J SOFTW TOOLS TE, V18, P265, DOI 10.1007/s10009-014-0356-8
   Hubner F., 2017, P 9 INT C TESTS PROO, P155
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Nguena Timo O., 2017, P 29 IFIP WG 6 1 INT, P36
   Parr T., 2013, The Definitive ANTLR 4 Reference
   Pasareanu Corina S., 2009, International Journal on Software Tools for Technology Transfer, V11, P339, DOI 10.1007/s10009-009-0118-1
   Petrenko A, 2013, IEEE ICST WORKSHOP, P198, DOI 10.1109/ICSTW.2013.31
   Petrenko A, 2001, LECT NOTES COMPUTER, V2067
   Petrenko A., 1999, IFIP ADV INFORM COMM, V28
   Petrenko A, 2016, LECT NOTES COMPUT SC, V9976, P36, DOI 10.1007/978-3-319-47443-4_3
   Petrenko A, 2016, IEEE ICST WORKSHOP, P229, DOI 10.1109/ICSTW.2016.9
   Petrenko A, 2016, LECT NOTES COMPUT SC, V9688, P222, DOI 10.1007/978-3-319-39570-8_15
   Petrenko A, 2015, LECT NOTES COMPUT SC, V9447, P3, DOI 10.1007/978-3-319-25945-1_1
   Pretschner A, 2017, NATO SCI PEAC SECUR, V50, P141, DOI 10.3233/978-1-61499-810-5-141
   Scaife N., 2004, Proceedings of the 4th ACM International Conference on Embedded Software, EMSOFT '04, P259
   Taromirad M, 2017, LECT NOTES COMPUT SC, V10522, P228, DOI 10.1007/978-3-319-68972-2_15
   Timo Omer Nguena, 2010, 2010 8th IEEE International Workshop on Factory Communication Systems (WFCS 2010), P241, DOI 10.1109/WFCS.2010.5548628
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Wen-ling Huang, 2013, Testing Software and Systems. 25th IFIP WG 6.1 International Conference, ICTSS 2013. Proceedings: LNCS 8254, P49, DOI 10.1007/978-3-642-41707-8_4
   Yue Jia, 2011, IEEE Transactions on Software Engineering, V37, P649, DOI 10.1109/TSE.2010.62
NR 33
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 501
EP 527
DI 10.1007/s11219-019-9440-3
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500002
DA 2024-07-18
ER

PT J
AU Garousi, V
   Tarhan, A
   Pfahl, D
   Coskunçay, A
   Demirörs, O
AF Garousi, Vahid
   Tarhan, Ayca
   Pfahl, Dietmar
   Coskuncay, Ahmet
   Demirors, Onur
TI Correlation of critical success factors with success of software
   projects: an empirical investigation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software engineering; Project management; Software projects; Success and
   failure; Critical success factors; Empirical studies
ID TESTING PRACTICES; AGILE; PRACTITIONERS; INDUSTRIAL; FAILURES; THINK;
   MODEL
AB Software engineering researchers have, over the years, proposed different critical success factors (CSFs) which are believed to be critically correlated with the success of software projects. To conduct an empirical investigation into the correlation of CSFs with success of software projects, we adapt and extend in this work an existing contingency fit model of CSFs. To archive the above objective, we designed an online survey and gathered CSF-related data for 101 software projects in the Turkish software industry. Among our findings is that the top three CSFs having the most significant associations with project success were: (1) team experience with the software development methodologies, (2) team's expertise with the task, and (3) project monitoring and controlling. A comprehensive correlation analysis between the CSFs and project success indicates positive associations between the majority of the factors and variables, however, in most of the cases at non-significant levels. By adding to the body of evidence in this field, the results of the study will be useful for a wide audience. Software managers can use the results to prioritize the improvement opportunities in their organizations w.r.t. the discussed CSFs. Software engineers might use the results to improve their skills in different dimensions, and researchers might use the results to prioritize and conduct follow-up in-depth studies on those factors.
C1 [Garousi, Vahid] Wageningen Univ, Informat Technol Grp, Wageningen, Netherlands.
   [Tarhan, Ayca] Hacettepe Univ, Dept Comp Engn, Software Engn Res Grp, Ankara, Turkey.
   [Pfahl, Dietmar] Univ Tartu, Inst Comp Sci, Tartu, Estonia.
   [Pfahl, Dietmar] Univ Calgary, Dept Elect & Comp Engn, Calgary, AB, Canada.
   [Coskuncay, Ahmet] Bilgi Grubu Ltd, Ankara, Turkey.
   [Demirors, Onur] Izmir Inst Technol, Comp Engn, Izmir, Turkey.
   [Demirors, Onur] Univ New South Wales, Sydney, NSW, Australia.
C3 Wageningen University & Research; Hacettepe University; University of
   Tartu; University of Calgary; Bilgi Information Systems; Izmir Institute
   of Technology; University of New South Wales Sydney
RP Garousi, V (corresponding author), Wageningen Univ, Informat Technol Grp, Wageningen, Netherlands.
EM vahid.garousi@wur.nl; atarhan@hacettepe.edu.tr; dietmar.pfahl@ut.ee;
   ahmet.coskuncay@bg.com.tr; onurdemirors@iyte.edu.tr
RI Coskuncay, Ahmet/M-5099-2019; KOLUKISA, AYÇA/HKN-2117-2023; Pfahl,
   Dietmar Alfred Paul Kurt/H-3084-2015
OI Coskuncay, Ahmet/0000-0002-7411-310X; Pfahl, Dietmar Alfred Paul
   Kurt/0000-0003-2400-501X; Demirors, Onur/0000-0001-6601-3937; Garousi,
   Vahid/0000-0001-6590-7576
FU Estonian Research Council [IUT20-55]
FX The authors would like to acknowledge the help of Ozge Gurbuz, Rahime
   Belen Saglam, Deniz Akdur, Fatma Akinci, Elif Alecakir, Betul Aygun,
   Kemal Dincer, Mehmet Soylemez, and Rana Ozakinci during the survey
   piloting phase, and all the practitioners from the industry who
   voluntarily participated in the survey and helped us in the publicity of
   our survey. The survey used in this study received ethics approval from
   Hacettepe University's Research Ethics Board, prior to its execution.
   Dietmar Pfahl was supported by the institutional research grant IUT20-55
   of the Estonian Research Council.
CR Agarwal N., 2006, International Journal of Project Management, V24, P358, DOI 10.1016/j.ijproman.2005.11.009
   Ahimbisibwe A, 2015, J ENTERP INF MANAG, V28, P7, DOI 10.1108/JEIM-08-2013-0060
   Akdur D., 2015, P TURK NAT SOFTW ENG
   Akkaya M. U., 2012, SOFTWARE SECTOR TURK
   [Anonymous], 2001, CENGAGE LEARNING
   Belle G., 2002, Statistical Rules of Thumb
   Berntsson-Svensson R., 2006, P ACM IEEE INT S EMP
   Boehm B, 2006, VALUE-BASED SOFTWARE ENGINEERING, P15, DOI 10.1007/3-540-29263-2_2
   Butler T., 2001, Journal of End User Computing, V13, P12, DOI 10.4018/joeuc.2001010102
   Caralli RA., 2004, The critical success factor method: Establishing a foundation for enterprise security management
   Cerpa N, 2010, INFORM SOFTWARE TECH, V52, P934, DOI 10.1016/j.infsof.2010.03.011
   Chandrasekaran V, 2011, CORRELATION CAUSATIO
   Chow T, 2008, J SYST SOFTWARE, V81, P961, DOI 10.1016/j.jss.2007.08.020
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cruzes D.S., 2010, P 2010 ACM IEEE INT, P1
   Davis K, 2014, INT J PROJ MANAG, V32, P189, DOI 10.1016/j.ijproman.2013.02.006
   Ellis C, 2005, WHY CUSTOMER SATISFA
   Fortune J., 2006, International Journal of Project Management, V24, P53, DOI 10.1016/j.ijproman.2005.07.004
   Garousi G, 2015, INFORM SOFTWARE TECH, V57, P664, DOI 10.1016/j.infsof.2014.08.003
   Garousi Vahid, 2017, Software Quality Journal, V25, P1091, DOI 10.1007/s11219-016-9319-5
   Garousi V., 2016, INT C EV ASS SOFTW E, P277
   Garousi V., 2016, SURVEY PROJECT CHARA, DOI [10.6084/m9.figshare.4009692, DOI 10.6084/M9.FIGSHARE.4009692]
   Garousi V., 2018, Balk. J. Electr. Comput. Eng., V6, P64, DOI [10.17694/bajece.419645, DOI 10.17694/BAJECE.419645]
   Garousi V, 2017, IEEE SOFTWARE, V34, P38, DOI 10.1109/MS.2017.3641116
   Garousi V, 2016, IEEE INT CONF SOFTW, P213, DOI 10.1109/ICST.2016.7
   Garousi V, 2016, J SYST SOFTWARE, V111, P49, DOI 10.1016/j.jss.2015.09.013
   Garousi V, 2015, J SYST SOFTWARE, V108, P148, DOI 10.1016/j.jss.2015.06.036
   Garousi V, 2013, J SYST SOFTWARE, V86, P1354, DOI 10.1016/j.jss.2012.12.051
   Garousi V, 2010, J SYST SOFTWARE, V83, P2251, DOI 10.1016/j.jss.2010.07.012
   Garvin D.A., 1988, MANAGING QUALITY STR
   Gates L. P, 2010, CMUSEI2010TR037
   Groves R.M., 2009, Survey Methodology, V2nd
   Hashim Rabia, 2013, 2013 Science and Information Conference (SAI), P282
   Hatfield J., 2006, TEACHING PSYCHOL
   Hoegl M, 2001, ORGAN SCI, V12, P435, DOI 10.1287/orsc.12.4.435.10635
   Howell DC, 2012, CENGAGE LEARNING
   Karapicak C. M., 2013, SOFTWARE PROCESS IMP, V349, P120
   Lehtinen TOA, 2014, INFORM SOFTWARE TECH, V56, P623, DOI 10.1016/j.infsof.2014.01.015
   Linaker J., 2015, 5366801 LUND U
   Lunsford T.K., 1995, J PROSTHET ORTHOT, V7, P105
   LYYTINEN K, 1987, OXFORD SURV INF TECH, V4, P257
   Malhotra Ruchika, 2016, Empirical Research in Software Engineering: Concepts, Analysis, and Applications
   McLeod L, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1978802.1978803
   Nasir M.H. N., 2011, Scientific Research and Essays, V6, P2174, DOI [DOI 10.5897/SRE10.1171, 10.5897/SRE10.1171]
   Nielsen M, 2012, CORRELATION DOESNT I
   Novella Steven., 2009, Evidence in Medicine: Correlation and Causation Posted in: Science and Medicine
   Pereira J, 2008, J SYST SOFTWARE, V81, P897, DOI 10.1016/j.jss.2007.07.032
   Pinto J.K., 2000, Projects as Business Constituents and Guiding Motives, P103
   Poulymenakou A, 1996, EUR J INFORM SYST, V5, P34, DOI 10.1057/ejis.1996.10
   Procaccino JD, 2005, J SYST SOFTWARE, V78, P194, DOI 10.1016/j.jss.2004.12.011
   Procaccino JD, 2002, INFORM SOFTWARE TECH, V44, P53, DOI 10.1016/S0950-5849(01)00217-8
   Punter T, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P80, DOI 10.1109/ISESE.2003.1237967
   Reel JS, 1999, IEEE SOFTWARE, V16, P18, DOI 10.1109/52.765782
   ROCKART JF, 1979, HARVARD BUS REV, V57, P81
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Savolainen P, 2012, INT J PROJ MANAG, V30, P458, DOI 10.1016/j.ijproman.2011.07.002
   Scott JE, 2002, COMMUN ACM, V45, P74, DOI 10.1145/505248.505249
   Sjoberg D. I. K., 2008, Guide to Advanced Empirical Software Engineering, P312
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   Stankovic D, 2013, J SYST SOFTWARE, V86, P1663, DOI 10.1016/j.jss.2013.02.027
   Subiyakto A, 2013, INT CONF RES INNOV, P342, DOI 10.1109/ICRIIS.2013.6716733
   Sudhakar GP, 2012, J ENTERP INF MANAG, V25, P537, DOI 10.1108/17410391211272829
   Tessem J, 2007, LECT NOTES COMPUT SC, V4536, P54
   Thompson T.L., 2008, The Relationship Between Job Satisfaction and Project Success: A Quantitative Study of Project Managers in Houston, Texas, Proquest
   Torchiano M, 2017, IEEE-ACM INT WKSP CO, P33, DOI 10.1109/CESI.2017.5
   Weber R, 2003, LECT NOTES ARTIF INT, V2689, P595
   Whitney KM, 2013, PROCEDIA COMPUT SCI, V20, P325, DOI 10.1016/j.procs.2013.09.280
   Wieringa R, 2015, SCI COMPUT PROGRAM, V101, P136, DOI 10.1016/j.scico.2014.11.013
   Wohlin C., 2012, EXPT SOFTWARE ENG IN
NR 69
TC 16
Z9 22
U1 1
U2 27
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 429
EP 493
DI 10.1007/s11219-018-9419-5
PG 65
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000012
OA hybrid
DA 2024-07-18
ER

PT J
AU Pernstål, J
   Feldt, R
   Gorschek, T
   Florén, D
AF Pernstal, J.
   Feldt, R.
   Gorschek, T.
   Floren, D.
TI FLEX-RCA: a lean-based method for root cause analysis in software
   process improvement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Organizational management and coordination; Communication; Software
   engineering; Software-intensive systems; Automotive industry; Case
   study; Lean product development; Agile; Process improvement
AB Software process improvement (SPI) is an instrument to increase the productivity of, and the quality of work, in software organizations. However, a majority of SPI frameworks are too extensive or provide guidance and potential improvement areas at a high level, indicating only the symptoms, not the causes. Motivated by the industrial need of two Swedish automotive companies to systematically uncover the underlying root causes of high-level improvement issues identified in an SPI project-assessing inter-departmental interactions in large-scale software systems development-this paper advances a root cause analysis (RCA) method building on Lean Six Sigma, called Flex-RCA. Flex-RCA is used to delve deeper into challenges identified to find root causes as a part of the evaluation and subsequent improvement activities. We also demonstrate and evaluate Flex-RCA's industrial applicability in a case study. An overall conclusion is that the use of Flex-RCA was successful, showing that it had the desired effect of both producing a broad base of causes on a high level and, more importantly, enabling an exploration of the underlying root causes.
C1 [Pernstal, J.] Volvo Cars, Mfg Engn Automot Software, Interact Funct Prod Dev & Mfg Automot Software De, SE-40531 Gothenburg, Sweden.
   [Floren, D.] Volvo Cars, Mfg Strategies SW & Elect, SE-40531 Gothenburg, Sweden.
   [Feldt, R.] Chalmers Univ Technol, Software Engn, SE-41290 Gothenburg, Sweden.
   [Gorschek, T.] Blekinge Inst Technol, Software Engn, SE-37179 Karlskrona, Sweden.
C3 Volvo; Volvo; Chalmers University of Technology; Blekinge Institute
   Technology
RP Pernstål, J (corresponding author), Volvo Cars, Mfg Engn Automot Software, Interact Funct Prod Dev & Mfg Automot Software De, SE-40531 Gothenburg, Sweden.
EM jpernsta@volvocars.com; robert.feldt@chalmers.se; tony.gorschek@bth.se;
   dfloren@volvocars.com
OI Pernstal, Joakim/0000-0001-5329-6560
CR ABG, 1994, V MOD DEV STAND IT S
   [Abran A. IEEE Computer Society IEEE Computer Society], 2004, GUIDE SOFTWARE ENG B
   Almefelt L, 2006, RES ENG DES, V17, P113, DOI 10.1007/s00163-006-0023-5
   Andersen B, 2000, ROO1 CAUSE ANAL SIMP
   [Anonymous], 2010, AUT SPICE PROC ASS M
   [Anonymous], P 25 INT C SOFTW ENG
   [Anonymous], 2016, VOLVO TRUCKS
   [Anonymous], 1998, 15504 ISOIEC 1
   [Anonymous], 1998, Software process improvement
   [Anonymous], 2016, VOLVO CARS
   [Anonymous], 1994, The Capability Maturity Model: Guidelines for Improving the Software Process
   [Anonymous], 2001, CMUSEI2001HB001, P245
   Basili V.R., 1985, QUANTITATIVE EVALUAT
   Beck K., 2000, EXTREME PROGRAMMING
   Breyfogle FW., 1999, IMPLEMENTING 6 SIGMA, V2nd
   Broy M, 2007, P IEEE, V95, P356, DOI 10.1109/JPROC.2006.888386
   Card DN, 1998, IEEE SOFTWARE, V15, P56, DOI 10.1109/52.646883
   Charfi F., 2004, P 2004 I E INT C IND
   CMMI, 2010, CMUSEI2010TR033 CMMI
   Conradi R, 2002, IEEE SOFTWARE, V19, P92, DOI 10.1109/MS.2002.1020295
   DYBA T, JOURNAL OF INFORMATI, V50, P833, DOI DOI 10.1016/J.INFSOF.2008.01.006
   El Emam K.D., 2001, EMPIR SOFTW ENG, V6, P207
   Gorschek T, 2004, SOFTWARE PRACT EXPER, V34, P1311, DOI 10.1002/spe.615
   Gorschek T, 2003, IDENTIFICATION IMPRO
   Hoerl RW, 1998, QUAL PROG, V31, P35
   Humphrey W.S., 1989, MANAGING SOFTWARE PR
   Jalote P, 2005, USING DEFECT ANAL FE, P701
   Kotonya G., 1998, Requirements engineering: processes and techniques
   KRAUT RE, 1995, COMMUN ACM, V38, P69, DOI 10.1145/203330.203345
   Kuilboer JP, 2000, INFORM SOFTWARE TECH, V42, P27, DOI 10.1016/S0950-5849(99)00054-3
   Leszak M., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P428, DOI 10.1109/ICSE.2000.870433
   MAYS RG, 1990, IEEE J SEL AREA COMM, V8, P164, DOI 10.1109/49.46867
   Morgan J., 2009, Lean Six Sigma for Dummies
   Morgan J., 2020, The Toyota Product Development System: integrating People, Process, and Technology
   Pernstål J, 2013, J SYST SOFTWARE, V86, P2797, DOI 10.1016/j.jss.2013.06.035
   Pernstål J, 2012, INT J SOFTW ENG KNOW, V22, P965, DOI 10.1142/S0218194012500271
   Pernstål J, 2013, LECT NOTES COMPUT SC, V7983, P93, DOI 10.1007/978-3-642-39259-7_10
   Petersen K, 2008, SYSTEMATIC MAPPING S, P71
   Pettersson F, 2008, J SYST SOFTWARE, V81, P972, DOI 10.1016/j.jss.2007.08.032
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Pino FJ, 2010, J SYST SOFTWARE, V83, P1662, DOI 10.1016/j.jss.2010.03.077
   Poppendieck M., 2003, Lean Software Development: An Agile Tollkit
   Prasad KV, 2010, P IEEE, V98, P510, DOI 10.1109/JPROC.2010.2041835
   Robson C., 2002, Real World Research, V2nd
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Schwaber K., 2001, Agile software development with scrum
   Sivie J., 2004, CMUSEI2004TR018 CARN
   Sumantran V., 2004, International Journal of Manufacturing Technology and Management, V6, P361, DOI 10.1504/IJMTM.2004.005424
   Unterkalmsteiner M, 2012, IEEE T SOFTWARE ENG, V38, P398, DOI 10.1109/TSE.2011.26
   Vanden Heuvel LeeN., 2008, ROOT CAUSE ANAL HDB
   Villalón JACM, 2002, SOFTWARE QUAL J, V10, P261, DOI 10.1023/A:1021638523413
   von Wangenheim CG, 2006, INFORM SOFTWARE TECH, V48, P890, DOI 10.1016/j.infsof.2005.12.010
   Wheelwright S., 1992, Revolutionizing Product Development
   Wilson P.F., 1993, ROOT CAUSE ANAL TOOL
   Yin R.K., 2003, CASE STUDY RES DESIG
NR 55
TC 5
Z9 5
U1 1
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 389
EP 428
DI 10.1007/s11219-018-9408-8
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000011
DA 2024-07-18
ER

PT J
AU Flemström, D
   Potena, P
   Sundmark, D
   Afzal, W
   Bohlin, M
AF Flemstrom, Daniel
   Potena, Pasqualina
   Sundmark, Daniel
   Afzal, Wasif
   Bohlin, Markus
TI Similarity-based prioritization of test case automation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software-testing; Test-case automation; Prioritization; Reuse; Effort
ID ALGORITHMS
AB The importance of efficient software testing procedures is driven by an ever increasing system complexity as well as global competition. In the particular case of manual test cases at the system integration level, where thousands of test cases may be executed before release, time must be well spent in order to test the system as completely and as efficiently as possible. Automating a subset of the manual test cases, i.e, translating the manual instructions to automatically executable code, is one way of decreasing the test effort. It is further common that test cases exhibit similarities, which can be exploited through reuse when automating a test suite. In this paper, we investigate the potential for reducing test effort by ordering the test cases before such automation, given that we can reuse already automated parts of test cases. In our analysis, we investigate several approaches for prioritization in a case study at a large Swedish vehicular manufacturer. The study analyzes the effects with respect to test effort, on four projects with a total of 3919 integration test cases constituting 35,180 test steps, written in natural language. The results show that for the four projects considered, the difference in expected manual effort between the best and the worst order found is on average 12 percentage points. The results also show that our proposed prioritization method is nearly as good as more resource demanding meta-heuristic approaches at a fraction of the computational time. Based on our results, we conclude that the order of automation is important when the set of test cases contain similar steps (instructions) that cannot be removed, but are possible to reuse. More precisely, the order is important with respect to how quickly the manual test execution effort decreases for a set of test cases that are being automated.
C1 [Flemstrom, Daniel; Afzal, Wasif] Malardalen Univ, Vasteras, Sweden.
   [Sundmark, Daniel] Malardalen Univ, Comp Sci, Vasteras, Sweden.
   [Potena, Pasqualina; Bohlin, Markus] RISE SICS Vasteras, Vasteras, Sweden.
C3 Malardalen University; Malardalen University; RISE Research Institutes
   of Sweden
RP Flemström, D (corresponding author), Malardalen Univ, Vasteras, Sweden.
EM daniel.flemstrom@mdh.se; pasqualina.potena@ri.se;
   daniel.sundmark@mdh.se; wasif.afzal@mdh.se; markus.bohlin@ri.se
OI Flemstrom, Daniel/0000-0001-8096-3592
FU Swedish Innovation Agency (VINNOVA) [2014-03397]; Knowledge Foundation
   (KKS) [20130085, 20160139]; Vinnova [2014-03397] Funding Source: Vinnova
FX This work was supported by the Swedish Innovation Agency (VINNOVA)
   through grant 2014-03397 (IMPRINT) and the Knowledge Foundation (KKS)
   through the projects 20130085 (TOCSYC) and 20160139 (TESTMINE).
CR Alspaugh S, 2007, P 1 ACM INT WORKSH E, P13, DOI 10.1145/1353673.1353676
   Amannejad Y, 2014, IEEE ICST WORKSHOP, P302, DOI 10.1109/ICSTW.2014.34
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Asaithambi Suriya Priya R., 2013, Safe and Secure Software Reuse. 13th International Conference on Software Reuse, ICSR 2013. Proceedings: LNCS 7925, P49, DOI 10.1007/978-3-642-38977-1_4
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Basit HA, 2009, IEEE T SOFTWARE ENG, V35, P497, DOI 10.1109/TSE.2009.16
   Bin Noor T, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P58, DOI 10.1109/ISSRE.2015.7381799
   Do H, 2010, IEEE T SOFTWARE ENG, V36, P593, DOI 10.1109/TSE.2010.58
   Do Hyunsook., 2006, P ACM SIGSOFT INT S, P141, DOI DOI 10.1145/1181775.1181793
   Engström E, 2013, INFORM SOFTWARE TECH, V55, P581, DOI 10.1016/j.infsof.2012.04.009
   Epitropakis M. G., 2015, P INT S SOFTW TEST A, P234, DOI [DOI 10.1145/2771783.2771788, 10.1145/2771783.2771788]
   Feldt R., 2015, ARXIV150603482
   Flemstrom D., 2015, P 41 EUR C SOFTW ENG
   Flemstrom D., 2016, P 42 EUR C SOFTW ENG
   Garousi Vahid, 2015, J SOFTWARE EVOLUTION, V28, P272
   Gorschek T, 2006, IEEE SOFTWARE, V23, P88, DOI 10.1109/MS.2006.147
   Greiler M, 2012, LECT NOTES COMPUT SC, V7304, P91, DOI 10.1007/978-3-642-30561-0_8
   Hemmati H, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430536.2430540
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Marijan D, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P157, DOI 10.1109/QRS.2015.31
   Ramler R., 2006, P 2006 INT WORKSHOP, P85, DOI DOI 10.1145/1138929.1138946
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Roy CK, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P18, DOI 10.1109/CSMR-WCRE.2014.6747168
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Shi QK, 2016, IEEE T RELIAB, V65, P19, DOI 10.1109/TR.2015.2434953
   Strandberg P. E., 2016, 27 IEEE INT S SOFTW
   Tahvili S., 2016, COST BENEFIT ANAL US
   Thomas SW, 2014, EMPIR SOFTW ENG, V19, P182, DOI 10.1007/s10664-012-9219-7
   Walcott K.R., 2006, P INT S SOFTW TEST A, P1, DOI DOI 10.1145/1146238.1146240
   Wang R., 2015, P 12 INT C SOFTW ENG, P358
   Wang S, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P182, DOI 10.1145/2889160.2889240
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Zhang L, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P213
NR 34
TC 8
Z9 8
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1421
EP 1449
DI 10.1007/s11219-017-9401-7
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400008
OA hybrid
DA 2024-07-18
ER

PT J
AU Söylemez, M
   Tarhan, A
AF Soylemez, Mehmet
   Tarhan, Ayca
TI Challenges of software process and product quality improvement:
   catalyzing defect root-cause investigation by process enactment data
   analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Causal analysis; Software defect; Orthogonal defect classification;
   Process enactment; Product quality; Software process; Process
   improvement
ID FRAMEWORK
AB It is claimed by software quality management that the quality of a software product is highly influenced by the quality of the software process followed to develop it. Since measurement of the software process is a challenging task, it is frequently the defects in the software product that are used to measure development quality. By extracting semantic information from defect records, practitioners can investigate and address root causes of software defects to improve development process and product quality. Investigating root causes requires effort for a detailed analysis into the components of the development process that originated the software defects, and is therefore encouraged only at higher maturity levels by most known process improvement models such as Capability Maturity Model Integration (CMMI). This practice, however, postpones the benefits that root-cause analysis would bring in gaining process awareness to improve the software development process and product quality in emergent organizations or organizations residing at lower maturity levels (MLs). In this article, we present a method for and results from applying root-cause analysis for software defects recorded in a software-intensive project of a CMMI ML3 certified institute. The suggested method combines process enactment data collection and analysis with Orthogonal Defect Classification which is a known technique in defect root-cause analysis. Prior to and after implementing the method in the study, defect attributes were analyzed and compared in order to understand any improvements in development performance and product quality. The results of the comparison indicate that the suggested method was efficient in the effort it required and effective in improving development performance and product quality. Defect triggers have become more active in identifying software defects in the earlier phases of software development, and the cost of quality due to software defects has decreased in consequence.
C1 [Soylemez, Mehmet] TUBITAK BILGEM Software Technol Res Inst, TR-06100 Ankara, Turkey.
   [Tarhan, Ayca] Hacettepe Univ, Dept Comp Engn, Beytepe Kampusu, TR-06800 Ankara, Turkey.
C3 Turkiye Bilimsel ve Teknolojik Arastirma Kurumu (TUBITAK); Hacettepe
   University
RP Tarhan, A (corresponding author), Hacettepe Univ, Dept Comp Engn, Beytepe Kampusu, TR-06800 Ankara, Turkey.
EM mehmet.soylemez@tubitak.gov.tr; atarhan@cs.hacettepe.edu.tr
RI KOLUKISA, AYÇA/HKN-2117-2023; AydÄ±n, Ebru/D-1403-2010; Tarhan,
   Ayca/D-6138-2013
CR Andersen Bjorn, 2006, Root cause analysis: simplified tools and techniques
   [Anonymous], MEASURING SOFTWARE P
   [Anonymous], SOFTWARE QUALITY
   [Anonymous], UNCOVERING ESSENTIAL
   [Anonymous], 2008, P 2008 WORKSHOP DEFE, DOI DOI 10.1145/1390817.1390829
   [Anonymous], 2002, Metrics and Models in Software Quality Engineering
   [Anonymous], 2015, 9001 ISO
   [Anonymous], 2010, CMMI DEV VERS 1 3
   [Anonymous], P 5 IND SOFTW ENG C
   [Anonymous], P MENSURA
   [Anonymous], THESIS
   [Anonymous], P 2 INT C SOFTW PROC
   [Anonymous], 2014, P 8 ACM IEEE INT S E
   [Anonymous], P ANN SEM C DAC NOID
   [Anonymous], P 26 C SPAC TT C TEC
   [Anonymous], DEV USING DEFECT CLA
   [Anonymous], HDB SOFTWARE RELIABI
   [Anonymous], SOFTWARE ENG RES MAN
   [Anonymous], 2006, P INT C SOFTW DAT TE
   Bassin KA, 1998, IEEE SOFTWARE, V15, P66, DOI 10.1109/52.730846
   Bassin KA, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING - CASE STUDIES, PROCEEDINGS, P103, DOI 10.1109/CSSRE.1997.637852
   BOEHM BW, 1984, IEEE T SOFTWARE ENG, V10, P4, DOI 10.1109/TSE.1984.5010193
   Butcher M, 2002, IBM SYST J, V41, P31, DOI 10.1147/sj.411.0031
   CHILLAREGE R, 1992, IEEE T SOFTWARE ENG, V18, P943, DOI 10.1109/32.177364
   Chillarege R, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P669, DOI 10.1109/DSN.2002.1029012
   Chillarege R, 2013, 2013 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P45, DOI 10.1109/ISSREW.2013.6688862
   Feiler P. H., 1993, Second International Conference on the Software Process. Continuous Software Process Improvement (Cat. No.93TH0509-0), P28, DOI 10.1109/SPCON.1993.236824
   Grundy JC, 1997, AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE - PROCEEDINGS, P127, DOI 10.1109/ASWEC.1997.623764
   Huang LG, 2015, AUTOMAT SOFTW ENG, V22, P3, DOI 10.1007/s10515-014-0155-1
   Humphrey W.S., 1989, MANAGING SOFTWARE PR
   Huo M, 2006, ASPEC 2006: 13TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P401
   IEEE, 1990, IEEE STANDARD GLOSSA, V121990
   Ishikawa Kaoru., 1986, Guide to Quality Control
   Jalote P, 2005, ENABLING TECHNOLOGIES FOR THE NEW KNOWLEDGE SOCIETY, P703
   JONES C, 2008, APPL SOFTWARE MEASUR
   Kabbaj M, 2008, LECT NOTES COMPUT SC, V5007, P186, DOI 10.1007/978-3-540-79588-9_17
   Kalinowski M, 2012, IEEE SOFTWARE, V29, P16, DOI 10.1109/MS.2012.72
   Kuhrmann M, 2014, SCI COMPUT PROGRAM, V79, P172, DOI 10.1016/j.scico.2012.03.007
   Kumaresh S., 2010, International Journal of Computers and Applications, V8, P42, DOI DOI 10.5120/1218-1759
   Li ZB, 2011, PROCEDIA ENVIRON SCI, V10, P765, DOI 10.1016/j.proenv.2011.09.124
   Poncin W, 2011, EUR CON SFTWR MTNCE, P5, DOI 10.1109/CSMR.2011.5
   Rubin V, 2007, LECT NOTES COMPUT SC, V4470, P169
   Shenvi AA, 2009, ISEC 2009 - PROCEEDINGS OF THE 2ND INDIA SOFTWARE ENGINEERING CONFERENCE, P83
   Söylemez M, 2013, 2013 JOINT CONFERENCE OF THE 23RD INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2013 EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA), P120, DOI 10.1109/IWSM-Mensura.2013.27
   Tarhan A, 2012, IEEE SOFTWARE, V29, P77, DOI 10.1109/MS.2011.91
   Tarhan A, 2011, SOFTWARE QUAL J, V19, P615, DOI 10.1007/s11219-011-9129-8
   van der Aalst WMP, 2004, COMPUT IND, V53, P231, DOI 10.1016/j.compind.2003.10.001
   Yin D.R. K., 2017, Case Study Research and Applications: Design and Methods
NR 48
TC 9
Z9 10
U1 1
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 779
EP 807
DI 10.1007/s11219-016-9334-6
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200020
DA 2024-07-18
ER

PT J
AU Górski, J
   Kaminski, M
AF Gorski, Janusz
   Kaminski, Marek
TI Towards automation of IT systems repairs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE IT systems monitoring and repair; Repair automation; System helpdesk;
   Maintenance of IT systems
AB Monitoring and repair are two sides of the on-the-fly maintenance of IT systems. Monitoring is well supported by automatic tools. In contrast, repairs involve much higher human intervention which negatively affects reliability and efficiency. The paper introduces a method of automating repairs of IT systems which can be integrated with any of the existing monitoring mechanisms. The method is described as a collection of models and algorithms. The monitored system is modelled as a multi-hierarchy of components, and predicates are used to detect problems and to trigger the corresponding repairs. Repair procedures are represented using flow diagrams. Graphical notations are used to specify the architecture of the runnable component of the proposed method and the corresponding repair API. Formal notation (the Z language) is used to provide for precision and unambiguity of the specifications. The formal specification facilitates reuse of the method in different target environments. For validation purposes, the method has been instantiated (using the PERL language) in an industrial helpdesk supporting the operation of several hundred IT systems. The validation data demonstrate the significant positive impact of the proposed method on the efficiency of the performed repairs.
C1 [Gorski, Janusz; Kaminski, Marek] Gdansk Univ Technol, Ul Narutowicza 11-12, PL-80233 Gdansk, Poland.
C3 Fahrenheit Universities; Gdansk University of Technology
RP Górski, J (corresponding author), Gdansk Univ Technol, Ul Narutowicza 11-12, PL-80233 Gdansk, Poland.
EM janusz.gorski@eti.pg.gda.pl
RI Górski, Janusz/A-1817-2013
OI Gorski, Janusz/0000-0002-7397-9403
FU Polish Ministry of Science and Higher Education
   [B01/030765/K05-204/1/K01]
FX This work was partially supported by the statutory Grant
   B01/030765/K05-204/1/K01 by Polish Ministry of Science and Higher
   Education.
CR About. com, 2015, HOP DEF
   Albrand S., 2005, METADATA MONITORING, P3
   Ansible, 2015, OP SOURC IT AUT SOFT
   Aslett M., 2006, TECHNEWS
   Barth W., 2008, NAGIOS SYSTEM NETWOR, P619
   Bauer K., 2009, AUTOMATING LINUX UNI
   CA technologies, 2006, INGR MDB HOUS REC
   Cacheda F., 2007, P IADIS INT C TEL NE, P67
   Ceccanti A, 2004, THIRTEENTH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES, PROCEEDINGS, P255, DOI 10.1109/ENABL.2004.20
   Cottrell L., 2000, NETWORK MONITORING T
   Davis J.H., 1996, Understanding group behavior: Consensual action by small groups, P1
   Gerlan D., 2003, INCREASING SYSTEM DE, P61
   Goettsche L.D., 2005, Maintenance of Instruments and Systems
   Ingres Corporation, 2006, INGR 2006 SYST ADM G, P35
   Jones B., 2004, SYSADMIN SYSADMIN SE
   Josephsen D., 2007, BUILDING MONITORING, P23
   Opsview, 2015, PUPP MOD
   Pervila M., 2007, SPRING SEMINAR SELF, P1
   Radic B., 2004, P 6 CARNET US C ZAGR
   Retkowski G., 2006, BUILDING SELF HEALIN
   Saaltink M., 1997, ZUM '97: The Z Formal Specification Notation. 10th International Conference of Z Users Proceedings, P72, DOI 10.1007/BFb0027284
   Saaltink M., 1999, Z EVES 20 USERS GUID
   Savage S, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND USENIX SYMPOSIUM ON INTERNET TECHNOLOGIES AND SYSTEMS (USITS'99), P71
   Sellens J., 2000, LOGIN MAGAZINE USENI, V25
   The PostgreSQL Global Development Group, 2013, POSTGRESQL 8323 DOCU
   Turnbull J., 2006, PRO NAGIOS 20
   Whalen E., 2006, ORACLE DATABASE 10G
   Zabbix, 2008, ZABBIX MANUAL V16, p[36, 159]
   Zanikolas S, 2005, FUTURE GENER COMP SY, V21, P163, DOI 10.1016/j.future.2004.07.002
NR 29
TC 0
Z9 0
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2018
VL 26
IS 1
BP 67
EP 96
DI 10.1007/s11219-016-9335-5
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FX1AL
UT WOS:000425779200003
OA hybrid
DA 2024-07-18
ER

PT J
AU Gopinath, R
   Ahmed, I
   Alipour, MA
   Jensen, C
   Groce, A
AF Gopinath, Rahul
   Ahmed, Iftekhar
   Alipour, Mohammad Amin
   Jensen, Carlos
   Groce, Alex
TI Does choice of mutation tool matter?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mutation analysis; Empirical analysis; Software testing
ID OPERATORS
AB Though mutation analysis is the primary means of evaluating the quality of test suites, it suffers from inadequate standardization. Mutation analysis tools vary based on language, when mutants are generated (phase of compilation), and target audience. Mutation tools rarely implement the complete set of operators proposed in the literature and mostly implement at least a few domain-specific mutation operators. Thus different tools may not always agree on the mutant kills of a test suite. Few criteria exist to guide a practitioner in choosing the right tool for either evaluating effectiveness of a test suite or for comparing different testing techniques. We investigate an ensemble of measures for evaluating efficacy of mutants produced by different tools. These include the traditional difficulty of detection, strength of minimal sets, and the diversity of mutants, as well as the information carried by the mutants produced. We find that mutation tools rarely agree. The disagreement between scores can be large, and the variation due to characteristics of the project-even after accounting for difference due to test suites-is a significant factor. However, the mean difference between tools is very small, indicating that no single tool consistently skews mutation scores high or low for all projects. These results suggest that experiments yielding small differences in mutation score, especially using a single tool, or a small number of projects may not be reliable. There is a clear need for greater standardization of mutation analysis. We propose one approach for such a standardization.
C1 [Gopinath, Rahul] Oregon State Univ, Dept EECS, Corvallis, OR 97331 USA.
   [Ahmed, Iftekhar; Alipour, Mohammad Amin; Jensen, Carlos; Groce, Alex] Oregon State Univ, Corvallis, OR 97331 USA.
C3 Oregon State University; Oregon State University
RP Gopinath, R (corresponding author), Oregon State Univ, Dept EECS, Corvallis, OR 97331 USA.
EM gopinatr@oregonstate.edu
RI Gopinath, Rahul/O-3230-2019; Alipour, Mohammad Amin/V-2011-2018
OI Gopinath, Rahul/0000-0001-9953-0930; Alipour, Mohammad
   Amin/0000-0002-6479-7202; Ahmed, Iftekhar/0000-0001-8221-5352
CR Ammann P., 2015, PROBLEMS WITH JESTER
   Ammann P, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P21, DOI 10.1109/ICST.2014.13
   Ammann Paul., 2015, INT C SOFTW TEST VER
   Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], 2015, 8 IEEE INT C SOFTWAR
   [Anonymous], 1980, THESIS
   [Anonymous], 1980, Order No. 8025191
   [Anonymous], 2001, Proc. Second Int. Conf. Extreme Programming and Flexible Processes in Software Engineering, P84
   [Anonymous], 1979, HEURISTICS DETERMINI
   Apache Software Foundation, 2016, AP COMM
   Barbosa EF, 2001, SOFTW TEST VERIF REL, V11, P113, DOI 10.1002/stvr.226
   Budd T.A., 1980, POPL '80: Proceedings of the 7th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, (New York, NY, USA), P220
   Budd T.A., 1979, Mutation Analysis
   BUDD TA, 1985, COMPUT LANG, V10, P63, DOI 10.1016/0096-0551(85)90011-6
   Cai X., 2005, Proceedings of the 1st International Workshop on Advances in Model-based Testing, P1, DOI DOI 10.1145/1083274.1083288
   Chevalley P., 2003, International Journal on Software Tools for Technology Transfer, V5, P90, DOI 10.1007/s10009-002-0099-9
   Coles H., 2016, PIT MUTATION TESTING
   Coles H., 2016, PIT MUTATORS
   Coles H., 2016, MUTATION TESTING SYS
   Daran M., 1996, SIGSOFT Software Engineering Notes, V21, P158, DOI [10.1145/229000.226313, 10.1145/226295.226313]
   Delahaye M, 2013, INT CONF QUAL SOFTW, P187, DOI 10.1109/QSIC.2013.47
   DeMillo R. A., 1988, Proceedings of the Second Workshop on Software Testing, Verification, and Analysis (Cat. No.88TH0225-3), P142, DOI 10.1109/WST.1988.5369
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Derezinska A, 2014, ADV INTELL SYST, V286, P155, DOI 10.1007/978-3-319-07013-1_15
   Do H, 2006, IEEE T SOFTWARE ENG, V32, P733, DOI 10.1109/TSE.2006.92
   Duraes J, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P329, DOI 10.1109/ISSRE.2002.1173283
   GitHub Inc, 2016, SOFTW REP
   Gligoric Milos, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P55, DOI 10.1109/ICST.2010.33
   Gligoric M., 2013, ACM SIGSOFT INT S SO
   Gopinath R., 2015, OFTWARE QUA IN PRSSS
   Gopinath R., 2014, INT C SOFTW ENG
   Gopinath R., 2015, REPLICATION DATA DOE
   GOPINATH R, 2015, INT S SOFTW REL ENG
   Gopinath R, 2014, PROC INT SYMP SOFTW, P189, DOI 10.1109/ISSRE.2014.40
   Gopinath Rahul, 2016, P 38 INT C SOFTW ENG
   Harder M, 2003, PROC INT CONF SOFTW, P60, DOI 10.1109/ICSE.2003.1201188
   Harder M., 2001, SPECIFICATION COVERA
   Henard C, 2015, IEEE ICST WORKSHOP
   Irvine SA, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P169, DOI 10.1109/TAIC.PART.2007.38
   Ji Z, 2014, INT RELIAB PHY SYM
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Jia Y, 2008, TACI PART 2008:TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P94, DOI 10.1109/TAIC-PART.2008.18
   Just R., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P720, DOI 10.1109/ICST.2012.162
   Just R., 2014, P 2014 INT S SOFTW T, P433
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Kintis M, 2010, ASIA PAC SOFWR ENG, P300, DOI 10.1109/APSEC.2010.42
   Kurtz B, 2014, IEEE ICST WORKSHOP, P176, DOI 10.1109/ICSTW.2014.20
   Kusano M, 2013, IEEE INT CONF AUTOM, P722, DOI 10.1109/ASE.2013.6693142
   Langdon WB, 2010, J SYST SOFTWARE, V83, P2416, DOI 10.1016/j.jss.2010.07.027
   Le Duc., 2014, P 2014 INT S SOFTWAR, P429
   Lipton R.J., 1971, FAULT DIAGNOSIS COMP
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Ma YS, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P352, DOI 10.1109/ISSRE.2002.1173287
   MA YS, 2006, ICSE 06, P827
   Macedo M. G., 2016, MUTATOR
   Madeyski L, 2010, IET SOFTW, V4, P32, DOI 10.1049/iet-sen.2008.0038
   Mathur A. P., 1991, Proceedings of the Fifteenth Annual International Computer Software and Applications Conference (Cat. No.91CH3023-9), P604, DOI 10.1109/CMPSAC.1991.170248
   Mathur A. P., 1994, Software Testing, Verification and Reliability, V4, P9, DOI 10.1002/stvr.4370040104
   Namin AS, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P57
   Namin AS, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P351, DOI 10.1145/1368088.1368136
   Nica S, 2012, ELECTRON PROC THEOR, P1
   Nimmer J. W., 2002, Software Engineering Notes, V27, P232, DOI 10.1145/566171.566213
   Offut A. J., 1997, Software Testing, Verification and Reliability, V7, P165, DOI 10.1002/(SICI)1099-1689(199709)7:3<165::AID-STVR143>3.0.CO;2-U
   Offut J., 2016, PROBLEMS PARASOFT IN
   Offut J., 2016, PROBLEMS WITH JESTER
   Offutt A. J., 1992, ACM Transactions on Software Engineering and Methodology, V1, P5, DOI 10.1145/125489.125473
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   Offutt A. J., 1994, Software Testing, Verification and Reliability, V4, P131, DOI 10.1002/stvr.4370040303
   Offutt A. J., 1996, Technical Report ISSE-TR-96-01
   OFFUTT AJ, 1989, ACM SIGSOFT, V14, P131, DOI 10.1145/75309.75324
   OFFUTT AJ, 1993, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.1993.346062
   OFFUTT AJ, 2000, MUTATION TESTING NEW, P34
   Offutt J., 2016, INSURE CRITIQUE
   Okun Vadim, 2004, THESIS
   Parasoft, 2015, INS MUT AN
   Parasoft, 2014, INS
   Mateo PR, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P646, DOI 10.1109/ICSM.2012.6405344
   Schuler D, 2013, SOFTW TEST VERIF REL, V23, P353, DOI 10.1002/stvr.1473
   Schuler D, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P297, DOI 10.1145/1595696.1595750
   Schuler D, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P69
   SHANNON CE, 1948, BELL SYST TECH J, V27, P623, DOI 10.1002/j.1538-7305.1948.tb00917.x
   Singh Pradeep Kumar, 2014, International Journal of Modern Education and Computer Science, V6, P1, DOI 10.5815/ijmecs.2014.11.01
   Smith BH, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P193, DOI 10.1109/TAIC.PART.2007.12
   Sridharan Mohan, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P378, DOI 10.1109/ISSRE.2010.16
   Untch R. H., 2009, ANN SE REG C ACM SE
   Wah KSHT, 2000, SOFTW TEST VERIF REL, V10, P3, DOI 10.1002/(SICI)1099-1689(200003)10:1<3::AID-STVR196>3.0.CO;2-P
   Wah KSHT, 2003, SCI COMPUT PROGRAM, V48, P119, DOI 10.1016/S0167-6423(03)00022-4
   WATANABE S, 1960, IBM J RES DEV, V4, P66, DOI 10.1147/rd.41.0066
   Wong W. E., 1993, THESIS
   WONG WE, 1995, J SYST SOFTWARE, V31, P185, DOI 10.1016/0164-1212(94)00098-0
   Yao XJ, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P919, DOI 10.1145/2568225.2568265
   Zhang L., 2013, IEEE ACM AUTOMATED S
   Zheng H, 2010, 2ND IEEE INTERNATIONAL CONFERENCE ON ADVANCED COMPUTER CONTROL (ICACC 2010), VOL. 2, P431, DOI 10.1109/ICACC.2010.5486640
   Zhou CX, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P396, DOI 10.1109/ICST.2009.43
NR 95
TC 9
Z9 9
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 871
EP 920
DI 10.1007/s11219-016-9317-7
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300009
DA 2024-07-18
ER

PT J
AU Perscheid, M
   Siegmund, B
   Taeumel, M
   Hirschfeld, R
AF Perscheid, Michael
   Siegmund, Benjamin
   Taeumel, Marcel
   Hirschfeld, Robert
TI Studying the advancement in debugging practice of professional software
   developers
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Debugging; Literature review; Field study; Online survey
AB In 1997, Henry Lieberman stated that debugging is the dirty little secret of computer science. Since then, several promising debugging technologies have been developed such as back-in-time debuggers and automatic fault localization methods. However, the last study about the state-of-the-art in debugging is still more than 15 years old and so it is not clear whether these new approaches have been applied in practice or not. For that reason, we investigate the current state of debugging in a comprehensive study. First, we review the available literature and learn about current approaches and study results. Second, we observe several professional developers while debugging and interview them about their experiences. Third, we create a questionnaire that serves as the basis for a larger online debugging survey. Based on these results, we present new insights into debugging practice that help to suggest new directions for future research.
C1 [Perscheid, Michael] SAP Innovat Ctr, Potsdam, Germany.
   [Siegmund, Benjamin; Taeumel, Marcel; Hirschfeld, Robert] Univ Potsdam, Hasso Plattner Inst, Potsdam, Germany.
C3 University of Potsdam
RP Perscheid, M (corresponding author), SAP Innovat Ctr, Potsdam, Germany.
EM michael.perscheid@sap.com; robert.hirschfeld@hpi.de
OI Taeumel, Marcel/0000-0002-7559-6035
CR Agans D.J., 2002, DEBUGGING 9 INDISPEN
   Agrawal H, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P143, DOI 10.1109/ISSRE.1995.497652
   Ahmadzadeh M., 2005, SIGCSE Bulletin, V37, P84, DOI 10.1145/1151954.1067472
   [Anonymous], 2009, UTDCS45 U TEX DALL
   [Anonymous], J COMPUTING SCI COLL
   [Anonymous], 2004, DEBUGGING THINKING M
   [Anonymous], 2010, ISSTA
   [Anonymous], ELEMENTS PROGRAMMING
   [Anonymous], 2010, ICSE
   [Anonymous], THESIS
   [Anonymous], ON THE FLY QUERY BAS
   [Anonymous], DEV GUIDE DEBUGGING
   [Anonymous], 2008, ISSTA
   Artzi Shay., 2010, P 32 ACMIEEE INT C S, P265
   Ballou M.C., 2008, IMPROVING SOFTWARE Q
   Chmiel R., 2004, SIGCSE Bulletin, V36, P17, DOI 10.1145/1028174.971310
   Cleve H, 2005, PROC INT CONF SOFTW, P342
   Dallmeier V, 2005, LECT NOTES COMPUT SC, V3586, P528
   Eisenstadt M, 1997, COMMUN ACM, V40, P30, DOI 10.1145/248448.248456
   GOULD JD, 1974, HUM FACTORS, V16, P258, DOI 10.1177/001872087401600308
   GOULD JD, 1975, INT J MAN MACH STUD, V7, P151, DOI 10.1016/S0020-7373(75)80005-8
   Gupta N., 2005, Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering, New York, NY, USA: Association for Computing Machinery, ASE'05, P263, DOI 10.1145/1101908.1101948
   Hailpern B, 2002, IBM SYST J, V41, P4, DOI 10.1147/sj.411.0004
   Hanks Brian, 2009, SIGCSE Bulletin, V41, P24, DOI 10.1145/1539024.1508876
   Janssem T, 2009, IEEE INT CONF AUTOM, P662, DOI 10.1109/ASE.2009.27
   Jiang Lingxiao., 2007, International Conference on Automated Software Engineering, P184
   Jones J A., 2007, Debugging in parallel, P16
   LaToza Thomas D., 2010, P 32 ACM IEEE INT C, P185, DOI DOI 10.1145/1806799.1806829
   Lewis B., 2003, P 5 WORKSHOP AUTOMAT, P225
   Liblit B, 2005, ACM SIGPLAN NOTICES, V40, P15, DOI 10.1145/1064978.1065014
   Lieberman H, 1997, COMMUN ACM, V40, P27
   Liu C., 2005, P EUR SOFTW ENG C HE, V30, P286
   Murphy L, 2008, SIGCSE'08: PROCEEDINGS OF THE 39TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P163, DOI 10.1145/1352322.1352191
   Park S, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P645
   Pearson K., 1895, P R SOC LOND, V58, P240, DOI 10.1098/rspl.1895.0041
   Pearson K, 1900, PHILOS MAG, V50, P157, DOI 10.1080/14786440009463897
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   VESSEY I, 1985, INT J MAN MACH STUD, V23, P459, DOI 10.1016/S0020-7373(85)80054-7
   WEISER M, 1982, COMMUN ACM, V25, P446, DOI 10.1145/358557.358577
   Xiangyu Zhang, 2006, 28th International Conference on Software Engineering Proceedings, P272, DOI 10.1145/1134285.1134324
   Yilmaz C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P81, DOI 10.1145/1368088.1368100
   Zeller A, 2009, WHY PROGRAMS FAIL: A GUIDE TO SYSTEMATIC DEBUGGING, 2ND EDITION
   Zeller A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/605466.605468
NR 43
TC 46
Z9 51
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 83
EP 110
DI 10.1007/s11219-015-9294-2
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400004
DA 2024-07-18
ER

PT J
AU Galindo, JA
   Turner, H
   Benavides, D
   White, J
AF Galindo, Jose A.
   Turner, Hamilton
   Benavides, David
   White, Jules
TI Testing variability-intensive systems using automated analysis: an
   application to Android
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Testing; Software product lines; Automated analysis; Feature models;
   Android
AB Software product lines are used to develop a set of software products that, while being different, share a common set of features. Feature models are used as a compact representation of all the products (e.g., possible configurations) of the product line. The number of products that a feature model encodes may grow exponentially with the number of features. This increases the cost of testing the products within a product line. Some proposals deal with this problem by reducing the testing space using different techniques. However, a daunting challenge is to explore how the cost and value of test cases can be modeled and optimized in order to have lower-cost testing processes. In this paper, we present TESting vAriAbiLity Intensive Systems (TESALIA), an approach that uses automated analysis of feature models to optimize the testing of variability-intensive systems. We model test value and cost as feature attributes, and then we use a constraint satisfaction solver to prune, prioritize and package product line tests complementing prior work in the software product line testing literature. A prototype implementation of TESALIA is used for validation in an Android example showing the benefits of maximizing the mobile market share (the value function) while meeting a budgetary constraint.
C1 [Galindo, Jose A.; Benavides, David] Univ Seville, Dept Lenguajes & Sistemas Informat, Avda Reina Mercedes S-N, E-41012 Seville, Spain.
   [Turner, Hamilton; White, Jules] Virginia Tech, Bradley Dept Elect & Comp Engn, Blacksburg, VA 24060 USA.
   [White, Jules] Vanderbilt Univ, Dept Elect Engn & Comp Sci, Nashville, TN 37212 USA.
C3 University of Sevilla; Virginia Polytechnic Institute & State
   University; Vanderbilt University
RP Galindo, JA (corresponding author), Univ Seville, Dept Lenguajes & Sistemas Informat, Avda Reina Mercedes S-N, E-41012 Seville, Spain.
EM jagalindo@us.es; hamiltont@vt.edu; benavides@us.es;
   jules@dre.vanderbilt.edu
RI Benavides, David/K-2791-2014; Galindo, Jose A/F-7232-2010
OI Benavides, David/0000-0002-8449-3273; Galindo, Jose
   A/0000-0001-9293-9784
FU European commission (FEDER); Spanish government under TAPAS
   [TIN2012-32273]; Andalusian government under Talentia program, THEOS
   [TIC-5906]; Andalusian government under COPAS [TIC-1867]
FX This work has been partially supported by the European commission
   (FEDER), by the Spanish government under TAPAS (TIN2012-32273) project
   and the Andalusian government under Talentia program, THEOS (TIC-5906)
   projects and COPAS (TIC-1867).
CR Acher M., 2014, 18 INT SOFTW PROD LI
   Akbar MM, 2001, LECT NOTES COMPUT SC, V2074, P659
   Alferez M., 2014, RR8576 INRIA
   [Anonymous], 2013, P 17 INT SOFTW PROD, DOI [DOI 10.1145/2491627.2491635, 10.1145/2491627.2491635]
   [Anonymous], 1996, APPROXIMATION ALGORI
   [Anonymous], 1990, FEATURE ORIENTED DOM
   [Anonymous], 1996, CMUSEI96TR010
   [Anonymous], 1990, Software testing techniques {
   [Anonymous], 2003, TEST DRIVEN DEV EXAM
   [Anonymous], 2007, SOFTWARE PRODUCT LIN
   Batory D, 2006, COMMUN ACM, V49, P45, DOI 10.1145/1183236.1183264
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Bertolino A., 2003, Software Engineering Notes, V28, P355, DOI 10.1145/949952.940120
   Binkley D, 1997, IEEE T SOFTWARE ENG, V23, P498, DOI 10.1109/32.624306
   Boehm B.W., 2000, International Conference on Software Engineering. Proceedings of the Conference on The Future of Software Engineering, P319
   Boehm B, 2006, VALUE-BASED SOFTWARE ENGINEERING, P109, DOI 10.1007/3-540-29263-2_6
   Coello CAC, 2006, IEEE COMPUT INTELL M, V1, P28, DOI 10.1109/MCI.2006.1597059
   Cohen M.B., 2006, P ISSTA 2006 WORKSHO, P53, DOI DOI 10.1145/1147249.1147257
   Cohen MB, 2008, IEEE T SOFTWARE ENG, V34, P633, DOI 10.1109/TSE.2008.50
   Colanzi TE, 2013, J ELECTRON TEST, V29, P9, DOI 10.1007/s10836-012-5343-y
   Cordy M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P472, DOI 10.1109/ICSE.2013.6606593
   Dalal S. R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P285, DOI 10.1109/ICSE.1999.841019
   Deb K., 2001, WIL INT S SYS OPT
   Dougherty B, 2012, FUTURE GENER COMP SY, V28, P371, DOI 10.1016/j.future.2011.05.009
   Galindo J.A., 2014, P 2014 INT S SOFTWAR, P293, DOI [10.1145/2610384.2610411, DOI 10.1145/2610384.2610411]
   Galindo Jose Angel, 2010, Towards Automated Analysis, P29
   Garcia-Galan J., 2013, 3 INT C CLOUD COMP S
   Hartman A, 2005, GRAPH THEORY, COMBINATORICS AND ALGORITHMS: INTERDISCIPLINARY APPLICATIONS, P237
   Johansen M. F., 2012, GENERATING BETTER PA, P269
   Johansen Martin Fagereng, 2012, P 16 INT SOFTWARE PR, P46, DOI [10.1145/2362536.2362547, DOI 10.1145/2362536.2362547]
   Kastner C., 2012, Proc. of FOSD'12, P1
   Kuhn DR, 2004, IEEE T SOFTWARE ENG, V30, P418, DOI 10.1109/TSE.2004.24
   Lopez-Herrejon Roberto Erick, 2012, Search Based Software Engineering. Proceedings of the 4th International Symposium (SSBSE 2012), P168, DOI 10.1007/978-3-642-33119-0_13
   Lotufo R, 2010, LECT NOTES COMPUT SC, V6287, P136, DOI 10.1007/978-3-642-15579-6_10
   Machado I.C., 2012, ACM SIGSOFT SOFTWARE, V37, P1, DOI DOI 10.1145/2382756.2382783
   Martello Silvano, 1990, Knapsack Problems: Algorithms and Computer Implementations
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Muccini H., 2003, ELECT NOTES THEOR CO, V82, P99
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Olaechea R., 2012, Proceedings of the Fourth International Workshop on Nonfunctional System Properties in Domain Specific Modeling Languages, p2:1, DOI DOI 10.1145/2420942.2420944
   Oster S, 2010, LECT NOTES COMPUT SC, V6287, P196, DOI 10.1007/978-3-642-15579-6_14
   Passos L., 2011, STUDY NONBOOLEAN CON
   Lamancha BP, 2010, LECT NOTES COMPUT SC, V6435, P111, DOI 10.1007/978-3-642-16573-3_9
   Perrouin Gilles, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P459, DOI 10.1109/ICST.2010.43
   Perrouin G, 2012, SOFTWARE QUAL J, V20, P605, DOI 10.1007/s11219-011-9160-9
   Pohl K, 2006, COMMUN ACM, V49, P78, DOI 10.1145/1183236.1183271
   Roos-Frantz F, 2012, SOFTWARE QUAL J, V20, P519, DOI 10.1007/s11219-011-9156-5
   Rothermel G., 1997, EFCIENT REGRESSION T, V2, P1
   Sayyad AS, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P492, DOI 10.1109/ICSE.2013.6606595
   Segura S., 2012, Proceedings of the Sixth International Workshop on Variability Modeling of Software-Intensive Systems, P63, DOI DOI 10.1145/2110147.2110155
   She S., 2010, VaMoS, P45
   She S, 2014, INFORM SOFTWARE TECH, V56, P1122, DOI 10.1016/j.infsof.2014.01.012
   Sinnema M, 2007, INFORM SOFTWARE TECH, V49, P717, DOI 10.1016/j.infsof.2006.08.001
   Smith B., 2000, Proceedings of the Fifth International Conference on Artificial Intelligence Planning and Scheduling, P254
   Sneed HM, 2009, 2009 TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE-PRACTICE AND RESEARCH TECHNIQUES, TAIC PART 2009, P157, DOI 10.1109/TAICPART.2009.13
   Spillner A., 2011, SOFTWARE TESTING FDN
   Srikanth H, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P62, DOI 10.1109/ISESE.2005.1541815
   Tang Q. Y., 2007, ADV LITHOGRAPHY INT, P65
   Thüm T, 2009, PROC INT CONF SOFTW, P254, DOI 10.1109/ICSE.2009.5070526
   White J, 2014, J SYST SOFTWARE, V87, P119, DOI 10.1016/j.jss.2013.10.010
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 61
TC 19
Z9 19
U1 0
U2 22
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 365
EP 405
DI 10.1007/s11219-014-9258-y
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bauch, P
   Havel, V
   Barnat, J
AF Bauch, Petr
   Havel, Vojtech
   Barnat, Jiri
TI Accelerating temporal verification of Simulink diagrams using
   satisfiability modulo theories
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Formal verification; Model checking; Circuit analysis; Satisfiability
   modulo theories
ID MODEL CHECKING; SYSTEMS; LANGUAGE
AB Automatic verification of programs and computer systems with input variables represents a significant and well-motivated challenge. The case of Simulink diagrams is especially difficult, because there the inputs are read iteratively, and the number of input variables is in theory unbounded. We apply the techniques of explicit model checking to account for the temporal (control) aspects of verification and use set-based representation of data, thus handling both sources of non-determinism present in the verification. Two different representations of sets are evaluated in scalability with respect to the range of input variables. Explicit (enumerating) sets are very fast for small ranges but fail to scale. Symbolic sets, represented as first-order formulas in the bit-vector theory and compared using satisfiability modulo theory solvers, scale well to arbitrary (though still bounded) range of input variables. To leverage the combined strengths of explicit and symbolic representations, we have designed a hybrid representation which we showed to outperform both pure representations. Thus, the proposed method allows complete automatic verification without the need to limit the non-determinism of input. Moreover, the principle underlying the hybrid representation entails inferring knowledge about the system under verification, which the developers did not explicitly include in the system, and which can significantly accelerate the verification process.
C1 [Bauch, Petr; Havel, Vojtech; Barnat, Jiri] Masaryk Univ, Fac Informat, Bot 68a, Brno, Czech Republic.
C3 Masaryk University Brno
RP Bauch, P (corresponding author), Masaryk Univ, Fac Informat, Bot 68a, Brno, Czech Republic.
EM xbauch@fi.muni.cz; xhavel1@fi.muni.cz; barnat@fi.muni.cz
RI Barnat, Jiří/J-3212-2013
OI Barnat, Jiri/0000-0003-2044-2861
FU European Unions Seventh Framework Program [332830]
FX The research leading to these results has received funding from the
   European Unions Seventh Framework Program (FP7/2007-2013) for CRYSTAL
   Critical System Engineering Acceleration Joint Undertaking under grant
   agreement Number 332830 and from specific national programs and/or
   funding authorities.
CR [Anonymous], 1986, P 1 S LOG COMP SCI L
   [Anonymous], P CAL ACAD SCI
   [Anonymous], 2008, P 2008 INT C FORM ME, DOI DOI 10.1109/FMCAD.2008.ECP.19
   Armando A, 2006, LECT NOTES COMPUT SC, V3925, P146
   Barnat Jiri, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P863, DOI 10.1007/978-3-642-39799-8_60
   Barnat J., 2013, TECHNICAL REPORT
   Barnat J, 2014, IEEE HI ASS SYS ENGR, P81, DOI 10.1109/HASE.2014.20
   Barnat J, 2012, LECT NOTES COMPUT SC, V7437, P78, DOI 10.1007/978-3-642-32469-7_6
   Barrett Clark W., 2010, P 8 INT WORKSH SAT M
   Biere A., 1999, Proceedings 1999 Design Automation Conference (Cat. No. 99CH36361), P317, DOI 10.1109/DAC.1999.781333
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Braione P., 2008, P BYT, P1
   BRYANT RE, 1991, IEEE T COMPUT, V40, P205, DOI 10.1109/12.73590
   BRYANT RE, 1995, DES AUT CON, P535
   Bultan T, 1997, LECT NOTES COMPUT SC, V1254, P400
   Bultan T., 1998, Software Engineering Notes, V23, P113, DOI 10.1145/271775.271799
   Cimatti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P359
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Duret-Lutz A, 2011, LECT NOTES COMPUT SC, V6996, P336, DOI 10.1007/978-3-642-24372-1_24
   Godefroid P, 2003, LECT NOTES COMPUT SC, V2855, P223
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Huimin Lin, 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P50
   Hungar H, 1995, LECT NOTES COMPUT SC, V987, P1
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kroening D., 2010, DECISION PROCEDURES
   Kupferman O., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P75
   McMillan KennethLauchlin., 1992, SYMBOLIC MODEL CHECK
   Meenakshi B, 2006, LECT NOTES COMPUT SC, V4260, P606
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Sebastiani R., 2005, LNCS, V3576, P100, DOI [10.1007/11513988_35, DOI 10.1007/11513988_35]
   Williams P. F., 2000, Lecture Notes in Computer Science, V1855, P124
   Wintersteiger CM, 2013, FORM METHOD SYST DES, V42, P3, DOI 10.1007/s10703-012-0156-2
   Xie T, 2005, LECT NOTES COMPUT SC, V3440, P365
   Yang ZJ, 2006, FOURTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P17
NR 36
TC 3
Z9 3
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2016
VL 24
IS 1
SI SI
BP 37
EP 63
DI 10.1007/s11219-014-9259-x
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1VQ
UT WOS:000369006200004
DA 2024-07-18
ER

PT J
AU Parsa, S
   Vahidi-Asl, M
   Asadi-Aghbolaghi, M
AF Parsa, Saeed
   Vahidi-Asl, Mojtaba
   Asadi-Aghbolaghi, Maryam
TI Hierarchy-Debug: a scalable statistical technique for fault localization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Statistical bug localization; Hierarchical clustering; Lasso method;
   Fault relevant predicates; Majority voting; Faulty sub-paths; Multiple
   bugs
ID CLUSTER-ANALYSIS; SELECTION; SUPPORT
AB Considering the fact that faults may be revealed as undesired mutual effect of program predicates on each other, a new approach for localizing latent bugs, namely Hierarchy-Debug, is presented in this paper. To analyze the vertical effect of predicates on each other and on program termination status, the predicates are fitted into a logistic lasso model. To support scalability, a hierarchical clustering algorithm is applied to cluster the predicates according to their presence in different executions. Considering each cluster as a pseudo-predicate, a distinct lasso model is built for intermediate levels of the hierarchy. Then, we apply a majority voting technique to score the predicates according to their lasso coefficients at different levels of the hierarchy. The predicates with relatively higher scores are ranked as fault relevant predicates. To provide the context of failure, faulty sub-paths are identified as sequences of fault relevant predicates. The grouping effect of Hierarchy-Debug helps programmers to detect multiple bugs. Four case studies have been designed to evaluate the proposed approach on three well-known test suites, Space, Siemens, and Bash. The evaluations show that Hierarchy-Debug produces more precise results compared with prior fault localization techniques on the subject programs.
C1 [Parsa, Saeed; Vahidi-Asl, Mojtaba; Asadi-Aghbolaghi, Maryam] Iran Univ Sci & Technol, Inst Comp Engn, Tehran, Iran.
C3 Iran University Science & Technology
RP Vahidi-Asl, M (corresponding author), Iran Univ Sci & Technol, Inst Comp Engn, Tehran, Iran.
EM parsa@iust.ac.ir; m_vahidi_asl@iust.ac.ir; m_asadi@comp.iust.ac.ir
RI parsa, Saeed/S-8982-2019; parsa, saeed/S-9536-2018
OI parsa, saeed/0000-0003-4381-2773; Asadi, Maryam/0000-0001-5289-6708
CR Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   [Anonymous], P 18 INT S SOFTW TES
   [Anonymous], 2004, Ph.D. dissertation
   [Anonymous], 2010, ICSE
   [Anonymous], 2006, Why programs fail-a guide to systematic debugging
   Chatterjee S., 2006, Regression Analysis by Example, V4th, P317
   Chilimbi TM, 2009, PROC INT CONF SOFTW, P34, DOI 10.1109/ICSE.2009.5070506
   Cleve H, 2005, PROC INT CONF SOFTW, P342
   COLLOFELLO JS, 1989, J SYST SOFTWARE, V9, P191, DOI 10.1016/0164-1212(89)90039-3
   Dickinson W, 2001, PROC INT CONF SOFTW, P339, DOI 10.1109/ICSE.2001.919107
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Eisen MB, 1998, P NATL ACAD SCI USA, V95, P14863, DOI 10.1073/pnas.95.25.14863
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Friedman J, 2010, J STAT SOFTW, V33, P1, DOI 10.18637/jss.v033.i01
   Gupta N., 2008, P 20 IEEE ACM INT C, P263
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   Hastie T., 2009, ELEMENTS STAT LEARNI
   Hwa-You Hsu, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P439, DOI 10.1109/ASE.2008.68
   Jiang Lingxiao., 2007, International Conference on Automated Software Engineering, P184
   Jones JA, 2005, P 20 IEEE ACM INT C, P273
   Liblit B, 2005, ACM SIGPLAN NOTICES, V40, P15, DOI 10.1145/1064978.1065014
   Liblit B, 2003, ACM SIGPLAN NOTICES, V38, P141, DOI 10.1145/780822.781148
   Liu C., 2005, P EUR SOFTW ENG C HE, V30, P286
   Nainar P.A., 2007, ISSTA, P5, DOI DOI 10.1145/1273463.1273467
   Park MY, 2007, BIOSTATISTICS, V8, P212, DOI 10.1093/biostatistics/kxl002
   Parsa S, 2008, PROCEEDINGS OF NINTH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING, P873, DOI 10.1109/SNPD.2008.133
   Parsa S, 2011, LECT NOTES ARTIF INT, V7002, P251, DOI 10.1007/978-3-642-23881-9_32
   Parsa S, 2009, 2009 SECOND INTERNATIONAL CONFERENCE ON THE APPLICATIONS OF DIGITAL INFORMATION AND WEB TECHNOLOGIES (ICADIWT 2009), P802, DOI 10.1109/ICADIWT.2009.5273934
   Parsa S, 2009, COMM COM INF SC, V59, P127
   Podgurski A, 2003, PROC INT CONF SOFTW, P465, DOI 10.1109/ICSE.2003.1201224
   Pytlik Brock., 2003, Proceedings of AADEBUG'03, P273
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Tibshirani R, 1996, J ROY STAT SOC B, V58, P267, DOI 10.1111/j.2517-6161.1996.tb02080.x
   VESSEY I, 1985, INT J MAN MACH STUD, V23, P459, DOI 10.1016/S0020-7373(85)80054-7
   Vokolos FI, 1998, PROC IEEE INT CONF S, P44, DOI 10.1109/ICSM.1998.738488
   Xiangyu Zhang, 2006, 28th International Conference on Software Engineering Proceedings, P272, DOI 10.1145/1134285.1134324
   Zeller A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/605466.605468
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
   Zhang XY, 2007, SOFTWARE PRACT EXPER, V37, P935, DOI 10.1002/spe.795
   Zhang X, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1133981.1134002
   Zhang ZG, 2003, PROC INT CONF SOFTW, P319
   Zhang ZY, 2011, J SYST SOFTWARE, V84, P885, DOI 10.1016/j.jss.2010.12.048
   Zhang ZY, 2009, INFORM SOFTWARE TECH, V51, P1573, DOI 10.1016/j.infsof.2009.06.013
   Zheng Alice X., 2006, INT C MACH LEARN, P1105, DOI DOI 10.1145/1143844.1143983
   Zou H, 2005, J R STAT SOC B, V67, P301, DOI 10.1111/j.1467-9868.2005.00503.x
NR 45
TC 10
Z9 12
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2014
VL 22
IS 3
BP 427
EP 466
DI 10.1007/s11219-013-9199-x
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK6IH
UT WOS:000338530800003
DA 2024-07-18
ER

PT J
AU Sanz-Rodriguez, J
   Dodero, JM
   Sanchez-Alonso, S
AF Sanz-Rodriguez, Javier
   Manuel Dodero, Juan
   Sanchez-Alonso, Salvador
TI Metrics-based evaluation of learning object reusability
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Reusability; Learning objects; Metadata; Metrics
AB This paper aims to help in the selection of reusable educational materials from repositories on the web, developing an indicator of the reusability of learning objects. For this purpose, our research will be carried out in three stages. The first, based on previous studies in this area, will determine those aspects that influence reusability. The second will define a set of metrics that measure those aspects using metadata. The third will propose different methods of aggregation in order to obtain a single resulting value and evaluate the efficiency of the model by analyzing a significant set of learning objects obtained from the eLera and Merlot repositories. The results obtained suggest that the proposed indicator could provide useful information when searching for learning objects in repositories. This reusability measurement could constitute an indicator of quality, which would allow search results to be ordered, with those with the greatest possibility of being reused taking priority. Furthermore, the proposed reusability indicator could be calculated automatically or in an assisted way if metadata elements satisfy the minimum quality requisites identified.
C1 [Sanz-Rodriguez, Javier] Univ Carlos III Madrid, Madrid 28911, Spain.
   [Manuel Dodero, Juan] Univ Cadiz, Cadiz 1003, Spain.
   [Sanchez-Alonso, Salvador] Univ Alcala de Henares, Madrid 28871, Spain.
C3 Universidad Carlos III de Madrid; Universidad de Cadiz; Universidad de
   Alcala
RP Sanz-Rodriguez, J (corresponding author), Univ Carlos III Madrid, Av Univ 30, Madrid 28911, Spain.
EM javier.sanz.rodriguez@uc3m.es; juanma.dodero@uca.es;
   salvador.sanchez@uah.es
RI Dodero, Juan Manuel/D-4143-2009; Sanchez-Alonso, Salvador/M-2950-2014
OI Dodero, Juan Manuel/0000-0002-4105-5679; Sanchez-Alonso,
   Salvador/0000-0002-9949-4797; SANZ, JAVIER/0000-0002-2068-0854
CR [Anonymous], 2003, J DIGITAL INF
   [Anonymous], 610121990 IEEE
   Barnard J, 1998, SOFTWARE QUAL J, V7, P35, DOI 10.1023/A:1008892825725
   Barzilai J, 1997, J OPER RES SOC, V48, P1226, DOI 10.1057/palgrave.jors.2600474
   Benneker F., 2006, QUICK SCAN POSSIBILI
   Boyle T., 2003, Australian Journal of Educational Technology, V19, P46
   Cafolla R., 2006, Journal of Technology and Teacher Education, V14, P313
   Campbell L., 2003, Reusing online resources, P35
   Cervera JF, 2009, METADATA AND SEMANTICS, P135, DOI 10.1007/978-0-387-77745-0_13
   CHANG K, 2006, LEARNING OBJECTS DRA
   Conte S. D., 1989, SOFTWARE ENG METRICS
   CUADRADOGALLEGO JJ, 2005, P INT C INT TECHN AP
   Currier S, 2002, P AUSTR SOC COMP LEA
   Daniel BK, 2004, IEEE INTERNATIONAL CONFERENCE ON ADVANCED LEARNING TECHNOLOGIES, PROCEEDINGS, P56, DOI 10.1109/ICALT.2004.1357374
   Downes S., 2001, INT REV RES OPEN DIS, V2
   Duval E, 2001, COMMUN ACM, V44, P72, DOI 10.1145/374308.374346
   Duval E., 2004, ComSIS, V1, P33
   Etzkorn LH, 2001, INFORM SOFTWARE TECH, V43, P295, DOI 10.1016/S0950-5849(00)00169-5
   Fenton N.E., 1997, SOFTWARE METRICS
   Friesen N, 2009, INT REV RES OPEN DIS, V10
   García-Barriocanal E, 2009, COMM COM INF SC, V46, P108
   GLASS RL, 1995, J SYST SOFTWARE, V28, P3, DOI 10.1016/0164-1212(94)00077-Z
   HUDDLESTONE J, 2005, IEE MOD HFI DTC S PE
   *IEEE LEARN TECHN, 2002, STAND LEARN OBJ MET
   Kay RH, 2007, OPEN LEARN, V22, P5, DOI 10.1080/02680510601100135
   Kelty CM, 2008, P IEEE, V96, P1000, DOI 10.1109/JPROC.2008.921613
   Koper R., 2003, REUSING ONLINE RESOU, P46
   Kumar V, 2005, 5TH IEEE INTERNATIONAL CONFERENCE ON ADVANCED LEARNING TECHNOLOGIES, PROCEEDINGS, P685, DOI 10.1109/ICALT.2005.230
   MARGARITOPOULOS T, 2009, P 3 INT C MET SEM RE, P83
   Marichal JL, 2000, IEEE T FUZZY SYST, V8, P800, DOI 10.1109/91.890347
   MASSART D, 2009, ADOPTING STANDARDS S
   Nesbit J., 2006, Journal on Systemics, Cybernetics and Informatics, V3, P102
   Nesbit J. C., 2004, ONLINE ED USING LEAR
   Ochoa X, 2008, LECT NOTES COMPUT SC, V5192, P322
   Ochoa X, 2007, LECT NOTES COMPUT SC, V4753, P262
   Ochoa X, 2009, IEEE T LEARN TECHNOL, V2, P226, DOI 10.1109/TLT.2009.28
   OMOSULE S, 2008, 3 INT C DIG INF MAN, P411
   Palmer K., 2004, 11 INT C ASS LEARN T
   Pitkänen SH, 2004, IEEE INTERNATIONAL CONFERENCE ON ADVANCED LEARNING TECHNOLOGIES, PROCEEDINGS, P246, DOI 10.1109/ICALT.2004.1357412
   Poulin J. S., 1996, Measuring Software Reuse-Principles, Practices and Economic Models
   Riaz M, 2009, INT SYMP EMP SOFTWAR, P368, DOI 10.1109/esem.2009.5314233
   RICHARDS G, 2007, 1 INT WORKSH LEARN O
   Rodríguez-Ardura I, 2009, INT J TECHNOL ENHANC, V1, P286, DOI 10.1504/IJTEL.2009.030779
   Sicilia M., 2003, The International Review of Research in Open and Distance Learning, V4
   SICILIA MA, 2004, P 1 PLUR S DES EV DE
   Sosteric M., 2002, The International Review of Research in Open and Distance Learning, V3
   Tabachnick, 2013, Using multivariate statistics, V6th
   TZIKOPOULOS A, 2007, LEARNING OBJECTS INS, P44
   VANASSCHE F, 2009, MELT FINAL REPORT TE
   Vargo John, 2003, INT J COMPUTERS APPL, V25
   Vinoski S, 2005, IEEE INTERNET COMPUT, V9, P72, DOI 10.1109/MIC.2005.131
   Wiley D.A., 2002, The instructional use of learning objects: Online version
   Yang DH, 2005, Seventh International Conference on Electronic Commerce, Vols 1 and 2, Selected Proceedings, P765
   Zimmermann B., 2007, Proceedings of the first international workshop on learning object discovery and exchange, V311, P46
NR 54
TC 20
Z9 22
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2011
VL 19
IS 1
SI SI
BP 121
EP 140
DI 10.1007/s11219-010-9108-5
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TY
UT WOS:000286465500006
DA 2024-07-18
ER

PT J
AU Al-Khanjari, ZA
   Woodward, MR
   Ramadhan, H
   Kutti, NS
AF Al-Khanjari, ZA
   Woodward, MR
   Ramadhan, H
   Kutti, NS
TI The efficiency of critical slicing in fault localization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE mutation testing; strong and weak mutations; dead; live and equivalent
   mutants; static and dynamic slicing; critical slicing; mutation
   operator; statement deletion (Sdl); Mothra Mutation Testing System;
   Fortran-77
ID PROGRAMS
AB In software testing, developing effective debugging strategies is important to guarantee the reliability of software under testing. A heuristic technique is to cause failure and therefore expose faults. Based on this approach mutation testing has been found very useful technique in detecting faults. However, it suffers from two problems with successfully testing programs: (1) requires extensive computing resources and (2) puts heavy demand on human resources. Later, empirical observations suggest that critical slicing based on Statement Deletion (Sdl) mutation operator has been found the most effective technique in reducing effort and the required computing resources in locating the program faults. The second problem of mutation testing may be solved by automating the program testing with the help of software tools. Our study focuses on determining the effectiveness of the critical slicing technique with the help of the Mothra Mutation Testing System in detecting program faults. This paper presents the results showing the performance of Mothra Mutation Testing System through conducting critical slicing testing on a selected suite of programs.
C1 Sultan Qaboos Univ, Comp Sci Dept, Al Khoud 123, Oman.
   Univ Liverpool, Dept Comp Sci, Liverpool L69 7ZF, Merseyside, England.
C3 Sultan Qaboos University; University of Liverpool
RP Sultan Qaboos Univ, Comp Sci Dept, POB 36, Al Khoud 123, Oman.
EM zuhoor@squ.edu.om; m.r.woodward@csc.liv.ac.uk; haider@squ.edu.om;
   nskutti@squ.edu.om
RI Al-Khanjari, Zuhoor Abdullah Salim/JNR-9615-2023
CR Acree A. T., 1980, On Mutation
   Acree AT., 1979, MUTATION ANAL
   AGARWAL H, SERCTR41P PURD U
   ALKHANIJARI ZA, 1995, THESIS LIVERPOOL U U
   ALKHANJARI ZA, 2002, 2002 INT MULT COMP S
   [Anonymous], 1980, THESIS YALE U NEW HA
   Binkley D, 2000, PROG COMPREHEN, P161, DOI 10.1109/WPC.2000.852490
   BINKLEY DW, 1996, ADV COMPUTER, V43
   Canfora G, 1998, INFORM SOFTWARE TECH, V40, P595, DOI 10.1016/S0950-5849(98)00086-X
   CHOI JD, 1988, 786 U WISC MAD
   De Lucia A, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P142, DOI 10.1109/SCAM.2001.972675
   DeMillo R. A., 1989, Proceedings. 11th International Conference on Software Engineering (Cat. No.89CH2718-5), P355, DOI 10.1145/74587.74634
   DeMillo R. A., 1988, Proceedings of the Second Workshop on Software Testing, Verification, and Analysis (Cat. No.88TH0225-3), P142, DOI 10.1109/WST.1988.5369
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   DEMILLO RA, 1996, C P ISSTA SAN DIEG C
   FIELD J, 1995, 22 ACM S PRINC PROGR, P379
   FLEYSHGAKKER VN, 1994, P INT S SOFTW TEST A, P185
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   HAMLET RG, 1977, IEEE T SOFTWARE ENG, V3, P279, DOI 10.1109/TSE.1977.231145
   Harman M, 1997, PROG COMPREHEN, P70, DOI 10.1109/WPC.1997.601266
   HARMAN M, 1995, J SOFTWARE TESTING V, V5, P143
   HARMAN M, 2001, SOFTWARE FOCUS, V2, P85
   HORWITZ S, 1989, ACM T PROGR LANG SYS, V11, P345, DOI 10.1145/65979.65980
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   HOWDEN WE, 1982, IEEE T SOFTWARE ENG, V8, P371, DOI 10.1109/TSE.1982.235571
   KING KN, 1991, SOFTWARE PRACT EXPER, V21, P685, DOI 10.1002/spe.4380210704
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Korel B., 1988, Proceedings of the Second Workshop on Software Testing, Verification, and Analysis (Cat. No.88TH0225-3), P13, DOI 10.1109/WST.1988.5350
   Korel B, 1998, INFORM SOFTWARE TECH, V40, P647, DOI 10.1016/S0950-5849(98)00089-5
   Longworth H. D., 1986, Proceedings 10th Anniversary COMSAC '86. The IEEE Computer Society's Tenth Annual International Computer Software and Applications Conference (Cat. No.86CH2356-4), P383
   Myers Glenford J., 2011, The Art of Software Testing
   OFFUTT AJ, 1994, C P SOFTW TEST VER R, V4, P131
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   OTTENSTEIN LM, 1992, CS928 MIHC TECHN U
   OTTENSTEIN LM, 1992, P 10 ANN SOFTW REL S, P16
   PAN H, 1991, SERCTR105P PURD U
   REPS T, 1989, LECT NOTES COMPUT SC, V352, P360
   REPS T, 1994, P ACM SIGSOFT 94 S F
   TIP F, 1995, J PROGRAM LANG, V3, P121
   TIP F, 1995, ILLC DISSERTATION SE
   UNTCH R, 1993, P 1993 INT S SOFTW T, P139, DOI DOI 10.1145/154183.154265
   VENKATESH GA, 1991, SIGPLAN NOTICES, V26, P107, DOI 10.1145/113446.113455
   VESSEY I, 1985, INT J MAN MACH STUD, V23, P459, DOI 10.1016/S0020-7373(85)80054-7
   WEISER M, 1982, COMMUN ACM, V25, P446, DOI 10.1145/358557.358577
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser Mark., 1981, Proceedings of the 5th International Conference on Software Engineering, P439
   Weiser MD., 1979, PROGRAM SLICES FORMA
   WEISS SN, 1993, P INT S SOFTW TEST A, P149
   WOODWARD MR, 1993, INFORM SOFTWARE TECH, V35, P163, DOI 10.1016/0950-5849(93)90053-6
NR 50
TC 7
Z9 9
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2005
VL 13
IS 2
BP 129
EP 153
DI 10.1007/s11219-005-6214-x
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 918NP
UT WOS:000228549200003
DA 2024-07-18
ER

PT J
AU Krasniqi, R
   Do, H
AF Krasniqi, Rrezarta
   Do, Hyunsook
TI Towards semantically enhanced detection of emerging quality-related
   concerns in source code
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality concerns; Keyword extraction; Feature analyses; Semantic
   analyses; Structural analyses
ID REQUIREMENTS; CONFLICTS
AB Quality concerns defined by ISO/IEC 9126 that focus on the quality aspect of the product, such as efficiency, usability, and security, among other, tend to be neglected until they are retrofitted later at the implementation level. This retrofitted strategy poses a major challenge and hinders developers from efficiently detecting and understanding quality concerns because they are frequently implemented with no particular structure and are bound to low cohesion (qualities scattered across the codebase). To address these problems, we propose an alternative approach for detecting scattered quality-related content in the codebase. We introduce SoftQualDetector, a lightweight framework that combines three unsupervised techniques for extracting a rich set of logical text units from the code from the context of semantics, importance, and textual features to detect quality-related classes and generate short keyword summaries pertaining to quality-related classes. SoftQualDetector also provides a 3D visualization for monitoring automated detected quality-related concerns across the codebase so that developers can easily locate the emerging quality concerns and the associated classes. Our evaluation of 1248 annotated Java classes shows that SoftQualDetector outperforms several state-of-the-art methods.
C1 [Krasniqi, Rrezarta; Do, Hyunsook] Univ North Texas, Dept Comp Sci & Engn, Denton, TX 76203 USA.
C3 University of North Texas System; University of North Texas Denton
RP Krasniqi, R (corresponding author), Univ North Texas, Dept Comp Sci & Engn, Denton, TX 76203 USA.
EM Rrezarta.Krasniqi@unt.edu; Hyunsook.Do@unt.edu
OI Krasniqi, Rrezarta/0000-0001-6884-6131
CR Abran A, 2003, SOFTWARE QUAL J, V11, P325, DOI 10.1023/A:1025869312943
   Agrawal A, 2018, INFORM SOFTWARE TECH, V98, P74, DOI 10.1016/j.infsof.2018.02.005
   Ahmad A, 2019, IEEE ACCESS, V7, P61145, DOI 10.1109/ACCESS.2019.2914429
   Aho A.V., 1986, COMPILERS PRINCIPLES
   Allamanis M., 2017, arXiv
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Allamanis M, 2015, PR MACH LEARN RES, V37, P2123
   Alshamari M., 2016, International Journal of Communications, Network and System Sciences, V9, P413
   Ameller D., 2012, Proceedings from RE: The 20th International Requirements Engineering Conference, P41, DOI DOI 10.1109/RE.2012.6345838
   Ameller D, 2021, IEEE T SOFTWARE ENG, V47, P818, DOI 10.1109/TSE.2019.2904476
   Ameller D, 2013, IEEE SOFTWARE, V30, P61, DOI 10.1109/MS.2012.176
   Ameller D, 2010, LECT NOTES COMPUT SC, V6182, P276, DOI 10.1007/978-3-642-14192-8_25
   ANNIE TT YING., 2013, P 2013 9 JOINT M FDN, P655
   [Anonymous], 1993, Software Requirements-objects, Functions and States
   Anquetil N., 1998, Conference of the Centre for Advanced Studies on Collaborative Research, P4
   Bavota G, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2559935
   Baysal O., 2007, PROC 4 INT WORKSHOP, P7
   BIGGERSTAFF TJ, 1993, PROC INT CONF SOFTW, P482, DOI 10.1109/ICSE.1993.346017
   Binkley D, 2011, Proceedings of the Working Conference on Mining Software Repositories (MSR), P203
   Blanco R, 2012, INFORM RETRIEVAL, V15, P54, DOI 10.1007/s10791-011-9172-x
   Boehm B. W., 1976, 2nd International Conference on Software Engineering, P592
   Bordoloi M, 2020, MULTIMED TOOLS APPL, V79, P31467, DOI 10.1007/s11042-020-09335-1
   Braubach L, 2014, 2014 INTERNATIONAL CONFERENCE ON CLOUD AND AUTONOMIC COMPUTING (ICCAC 2014), P83, DOI 10.1109/ICCAC.2014.32
   Brockschmidt M., 2018, ARXIV
   Burges C. J., 2007, ADV NEURAL INFORM PR, P193, DOI DOI 10.1007/S10994-010-5185-8
   Burges Christopher J. C., 2010, Learning, V11, P81
   Buse R.P., 2008, Proceedings of the 2008 International Symposium on Software Testing and Analysis, ISSTA '08, P273
   Buse Raymond P. L., 2010, P 25 IEEE ACM INT C, P33, DOI DOI 10.1145/1858996.1859005
   Campos R, 2020, INFORM SCIENCES, V509, P257, DOI 10.1016/j.ins.2019.09.013
   Cartwright M., 1999, SOFTW TEST VERIF REL, V11, P198, DOI DOI 10.1002/STVR.230
   Catolino G, 2019, J SYST SOFTWARE, V152, P165, DOI 10.1016/j.jss.2019.03.002
   Chen HH, 2002, KLUW S INF, V12, P243
   Chiticariu L., 2013, P 2013 C EMP METH NA, P827
   CHUNG L, 1995, PROC INT CONF SOFTW, P25, DOI 10.1145/225014.225017
   Daneva Maya, 2013, Requirements Engineering: Foundation for Software Quality. 19th International Working Conference, REFSQ 2013. Proceedings, P1, DOI 10.1007/978-3-642-37422-7_1
   De La Torre F., 2005, ACM PROC ICML, P177
   Deissenboeck F, 2006, SOFTWARE QUAL J, V14, P261, DOI 10.1007/s11219-006-9219-1
   Egyed A, 2004, IEEE SOFTWARE, V21, P50, DOI 10.1109/MS.2004.40
   Egyed A., 2003, 2 INT WORKSHOP TRACE
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   Etikan I., 2017, Biometrics Biostatistics International Journal, V5, P00149, DOI [DOI 10.15406/BBIJ.2017.05.00149, https://doi.org/10.15406/bbij.2017.05.00149]
   Falessi D, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2491509.2491515
   Fan X., 2020, INT C MACHINE LEARNI, V119, P2996
   Fellbaum C., 1998, WORDNET ELECT LEXICA, DOI [10.7551/mitpress/7287.001.0001, DOI 10.7551/MITPRESS/7287.001.0001]
   Cortés-Coy LF, 2014, IEEE INT WORK C SO, P275, DOI 10.1109/SCAM.2014.14
   FEURER M, 2019, HYPERPARAMETER OPTIM, P3, DOI DOI 10.1007/978-3-030-05318-5_1
   Figueiredo E, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P261, DOI 10.1109/WICSA.2009.5290815
   FLEISS JL, 1971, PSYCHOL BULL, V76, P378, DOI 10.1037/h0031619
   Fowkes J, 2017, IEEE T SOFTWARE ENG, V43, P1095, DOI 10.1109/TSE.2017.2664836
   Fowkes J, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P649, DOI 10.1145/2889160.2889171
   Ghaleb TA, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1965
   Granka L. A., 2004, Proceedings of Sheffield SIGIR 2004. The Twenty-Seventh Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P478, DOI 10.1145/1008992.1009079
   Grant S, 2008, WORK CONF REVERSE EN, P138, DOI 10.1109/WCRE.2008.49
   GundagathiManjunath S., 2011, THESIS U DELAWARE
   Gupta S, 2013, CONF PROC INT SYMP C, P3, DOI 10.1109/ICPC.2013.6613828
   Haiduc S., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P35, DOI 10.1109/WCRE.2010.13
   Han S, 2009, IEEE INT CONF AUTOM, P332, DOI 10.1109/ASE.2009.64
   Herzig K, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P392, DOI 10.1109/ICSE.2013.6606585
   Hill E, 2009, PROC INT CONF SOFTW, P232, DOI 10.1109/ICSE.2009.5070524
   Hindle A., 2011, P 8 WORK C MIN SOFTW, P163, DOI DOI 10.1145/1985441.1985466
   Hindle A, 2009, PROC IEEE INT CONF S, P339, DOI 10.1109/ICSM.2009.5306310
   Hoskinson C., 2011, Politico
   Howard MJ, 2013, IEEE WORK CONF MIN S, P377, DOI 10.1109/MSR.2013.6624052
   Jelodar H, 2019, MULTIMED TOOLS APPL, V78, P15169, DOI 10.1007/s11042-018-6894-4
   Jha N, 2019, EMPIR SOFTW ENG, V24, P3659, DOI 10.1007/s10664-019-09716-7
   Jin W, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P807, DOI 10.1145/1244002.1244182
   Jinqiu Yang, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P161, DOI 10.1109/MSR.2012.6224276
   Kawaguchi S, 2006, J SYST SOFTWARE, V79, P939, DOI 10.1016/j.jss.2005.06.044
   Khanzode K.C. A., 2020, International Journal of Library Information Science (IJLIS), V9, P3
   Koch P, 2018, KDD'18: PROCEEDINGS OF THE 24TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P443, DOI 10.1145/3219819.3219837
   Krasniqi R., 2020, ACM COMPUT SURV
   Krasniqi R, 2021, P INT COMP SOFTW APP, P812, DOI 10.1109/COMPSAC51774.2021.00114
   Krasniqi R, 2021, 2021 IEEE/ACM INTERNATIONAL WORKSHOP ON AUTOMATED PROGRAM REPAIR (APR 2021), P31, DOI 10.1109/APR52552.2021.00014
   Krasniqi R, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021), P12, DOI 10.1109/SANER50967.2021.00011
   Krasniqi R, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P512, DOI [10.1109/saner48275.2020.9054816, 10.1109/SANER48275.2020.9054816]
   Kuhn A, 2007, INFORM SOFTWARE TECH, V49, P230, DOI 10.1016/j.infsof.2006.10.017
   L'Heureux A, 2017, IEEE ACCESS, V5, P7776, DOI 10.1109/ACCESS.2017.2696365
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   Lidwell William, 2010, Universal Principles of Design, Revised and Updated: 125 Ways to Enhance Usability, Influence Perception, Increase Appeal, Make Better Design Decisions, and Teach through Design
   Linares-Vásquez M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P709, DOI 10.1109/ICSE.2015.229
   Linstead E., 2007, P 22 IEEE ACM INT C, P461, DOI [10.1145/1321631.1321709, DOI 10.1145/1321631.1321709]
   Linstead E, 2008, SEVENTH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS, PROCEEDINGS, P813, DOI 10.1109/ICMLA.2008.47
   Lu Mengmeng., 2017, P 21 INT C EVALUATIO, P344, DOI [10.1145/3084226.3084241, DOI 10.1145/3084226.3084241]
   Lu Yao, 2019, 2019 IEEE/ACIS 18th International Conference on Computer and Information Science (ICIS). Proceedings, P452
   Lukins SK, 2010, INFORM SOFTWARE TECH, V52, P972, DOI 10.1016/j.infsof.2010.04.002
   Lutowski R., 2016, SOFTWARE REQUIREMENT, DOI [10.1201/9781420031317, DOI 10.1201/9781420031317]
   Maalej W, 2015, INT REQUIR ENG CONF, P116, DOI 10.1109/RE.2015.7320414
   Mairiza Dewi, 2013, 2013 IEEE 12th International Conference on Intelligent Software Methodologies, Tools and Techniques (SoMeT 2013), P83, DOI 10.1109/SoMeT.2013.6645645
   Mairiza Dewi, 2010, 2010 Third International Workshop on Managing Requirements Knowledge (MARK 2010), P1, DOI 10.1109/MARK.2010.5623814
   Mairiza D, 2011, COMM COM INF SC, V230, P31
   Marcus A, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P214, DOI 10.1109/WCRE.2004.10
   Maskeri G., 2008, ISEC 08, P113, DOI 10.1145/1342211.1342234
   Mc Call J. A., 1977, FACTORS SOFTWARE QUA, VI
   Meditskos G., 2009, Handbook of Research on Emerging Rule-Based Languages and Technologies: Open Solutions and ApproachesAnonymous IGI Global, P124
   Mihalcea, 2004, P EMNLP, P401, DOI DOI 10.3115/1219044.1219064
   Mizuyama H, 2013, IFIP ADV INF COMM TE, V415, P435
   Mo YH, 2015, SYST REV-LONDON, V4, DOI 10.1186/s13643-015-0117-0
   Moreno L, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P484, DOI 10.1145/2635868.2635870
   Nazar N, 2016, FRONT COMPUT SCI-CHI, V10, P504, DOI 10.1007/s11704-015-4409-2
   Nuseibeh B, 2001, COMPUTER, V34, P115, DOI 10.1109/2.910904
   Ohba Masaru., 2005, MSR 05 P 2005 INT WO, P1, DOI [10.1145/1083142.1083151, DOI 10.1145/1082983.1083151]
   Omar M, 2015, J INF SCI, V41, P662, DOI 10.1177/0165551515587839
   Ortu M, 2015, Proceedings of the 11th International Conference on Predictive Models and Data Analytics in Software Engineering, PROMISE'15, P1, DOI DOI 10.1145/2810146.2810147
   Page L., 1999, PAGERANK CITATION RA, DOI DOI 10.1109/IISWC.2012.6402911
   Paleyes, 2020, CHALLENGES DEPLOYING
   Panichella A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P522, DOI 10.1109/ICSE.2013.6606598
   Panichella S, 2018, 2018 IEEE 2ND INTERNATIONAL WORKSHOP ON VALIDATION, ANALYSIS AND EVOLUTION OF SOFTWARE TESTS (VST), P1, DOI 10.1109/VST.2018.8327148
   Paucar LHG, 2016, 2016 IEEE 24TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW), P32, DOI [10.1109/REW.2016.38, 10.1109/REW.2016.020]
   Poshyvanyk D, 2007, IEEE T SOFTWARE ENG, V33, P420, DOI [10.1109/TSE.2007.1016, 10.1109/TSE.2007.1016.]
   Poshyvanyk D, 2007, INT C PROGRAM COMPRE, P37
   Rajput S., 2020, 17 INT C NAT LANG PR, P9
   Rastkar S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1193, DOI 10.1109/ICSE.2013.6606676
   Rath M, 2019, LECT NOTES COMPUT SC, V11412, P229, DOI 10.1007/978-3-030-15538-4_17
   Rath M, 2017, INT REQUIR ENG CONF, P516, DOI 10.1109/RE.2017.18
   Riaz M, 2009, COMM COM INF SC, V59, P119
   Robertson S, 2012, Mastering the requirements process: getting requirements right
   Robillard MP, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189751
   Sadana V, 2007, P INT COMP SOFTW APP, P215
   Sai Zhang, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P63, DOI 10.1109/ASE.2011.6100145
   SALTON G, 1988, INFORM PROCESS MANAG, V24, P513, DOI 10.1016/0306-4573(88)90021-0
   Savage T, 2010, PROC IEEE INT CONF S
   Shah U, 2021, INT J UNCERTAIN FUZZ, V29, P435, DOI 10.1142/S0218488521500197
   Shahbazian A, 2018, 2018 IEEE 15TH INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE (ICSA), P95, DOI 10.1109/ICSA.2018.00019
   Sharma P., 2016, INT J THEORY APPL, V9, P9005
   Siegmund J, 2015, EMPIR SOFTW ENG, V20, P1159, DOI 10.1007/s10664-014-9318-8
   Souza G., 2004, 12 I INT REQ ENG C
   Sridhara G., 2010, P IEEE ACM INT C AUT, P43, DOI DOI 10.1145/1858996.1859006
   Sridhara G, 2011, CONF PROC INT SYMP C, P71, DOI 10.1109/ICPC.2011.28
   Sridhara G, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P101, DOI 10.1145/1985793.1985808
   Sulir M., 2015, 12 IEEE INT REQUIREM, P283
   Sullivan Gail M, 2012, J Grad Med Educ, V4, P279, DOI 10.4300/JGME-D-12-00156.1
   Tabassum M., 2014, 2014 International Conference on Computational Science Technology (ICCST), P1, DOI [10.1109/ICCST.2014.7045194, DOI 10.1109/ICCST.2014.7045194]
   TAHERDOOST H, 2016, SSRN ELECT J
   Thomas SW, 2010, IEEE INT WORK C SO, P55, DOI 10.1109/SCAM.2010.13
   Trifu M, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P193
   Van der Ven JS, 2006, RATIONAL MANAGEMENT IN SOFTWARE ENGINEERING, P329, DOI 10.1007/3-5403-0998-5_16
   Vanciu R., 2010, Proceedings of IEEE International Conference on Software Maintenance, P1
   Waltl B., 2018, Jusletter IT, V4, P1
   Wang YP, 2018, 2018 IEEE/ACIS 16TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATION (SERA), P19, DOI 10.1109/SERA.2018.8477196
   Wang Z., 2016, INT J SIMULATION SYS, V17, P11
   Wettel R, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P551, DOI 10.1145/1985793.1985868
   Wettel R, 2007, INT C PROGRAM COMPRE, P231
   Wettel R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P921
   Wood J, 2017, PROC INT CONF DATA, P411, DOI 10.1109/ICDE.2017.99
   Ye X, 2016, IEEE T SOFTWARE ENG, V42, P379, DOI 10.1109/TSE.2015.2479232
   Yu ZF, 2001, PROG COMPREHEN, P293, DOI 10.1109/WPC.2001.921739
   Zhang CY, 2022, SYMMETRY-BASEL, V14, DOI 10.3390/sym14030471
   Zhang X, 2019, IEEE ACCESS, V7, P156463, DOI 10.1109/ACCESS.2019.2949218
   Zhao F, 2016, FUTURE GENER COMP SY, V65, P196, DOI 10.1016/j.future.2015.10.012
   Zhou J., 2019, APPL RES COMPUTERS, V36
   Zhu Y., 2019, ARXIV
   Zou J, 2017, INFORM SOFTWARE TECH, V84, P19, DOI 10.1016/j.infsof.2016.12.003
   Zou J, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P446, DOI 10.1109/MSR.2015.60
NR 154
TC 2
Z9 2
U1 1
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 865
EP 915
DI 10.1007/s11219-023-09614-8
EA FEB 2023
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000933971700001
DA 2024-07-18
ER

PT J
AU Oliveira, GP
   Moura, AFC
   Batista, NA
   Brandao, MA
   Hora, A
   Moro, MM
AF Oliveira, Gabriel P.
   Moura, Ana Flavia C.
   Batista, Natercia A.
   Brandao, Michele A.
   Hora, Andre
   Moro, Mirella M.
TI How do developers collaborate? Investigating GitHub heterogeneous
   networks
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Collaborative software development; Social coding; Social network
   metrics; Software quality; Mining software repositories
ID PULL-REQUESTS; SOFTWARE; RECOMMENDATION; METRICS; BUG
AB Assessing the collaboration among developers is important to understand different aspects of software lifecycle including code smell intensity, bug fixes, and software quality. This kind of collaboration can be obtained from social networks, which represent interactions between individuals in different contexts. In this paper, we model GitHub developers' collaborations in a heterogeneous network by considering three aspects: social collaboration, collaboration time in a repository and technical features. Then, we explore the GitHub network from different perspectives: size, relevance, and potential applications. The results show the considered metrics are not correlated, bringing new information about the collaborations. We also show that such information is useful for social developer ranking, an actual task which is often part of different applications, such as team formation, community detection and pair programming. Finally, as software quality is intrinsic to the people who code it, our methodology and analyses represent initial steps towards people-centered software quality analysis, as further discussed throughout this article.
C1 [Oliveira, Gabriel P.; Moura, Ana Flavia C.; Batista, Natercia A.; Hora, Andre; Moro, Mirella M.] Univ Fed Minas Gerais, Comp Sci Dept, Belo Horizonte, MG, Brazil.
   [Brandao, Michele A.] Inst Fed Minas Gerais, Ribeirao Das Neves, Brazil.
C3 Universidade Federal de Minas Gerais; Instituto Federal de Educacao,
   Ciencia e Tecnologia de Minas Gerais (IFMG)
RP Moro, MM (corresponding author), Univ Fed Minas Gerais, Comp Sci Dept, Belo Horizonte, MG, Brazil.
EM gabrielpoliveira@dcc.ufmg.br; anaciriaco@dcc.ufmg.br;
   natercia@dcc.ufmg.br; michele.brandao@ifmg.edu.br;
   andrehora@dcc.ufmg.br; mirella@dcc.ufmg.br
RI Moro, Mirella Moura/O-6281-2017; Oliveira, Gabriel Pereira
   de/AGO-7712-2022; Hora, Andre/HTP-0699-2023
OI Moro, Mirella Moura/0000-0002-0545-2001; Oliveira, Gabriel Pereira
   de/0000-0002-7210-6408; Hora, Andre/0000-0003-4900-1330; Brandao,
   Michele/0000-0001-7808-9357
FU Coordenacao de Aperfeicoamento de Pessoal de Nivel Superior (CAPES);
   Conselho Nacional de Desenvolvimento Cientifico e Tecnologico (CNPq),
   Brazil
FX This work was supported by Coordenacao de Aperfeicoamento de Pessoal de
   Nivel Superior (CAPES) and Conselho Nacional de Desenvolvimento
   Cientifico e Tecnologico (CNPq), Brazil.
CR Adamic LA, 2003, SOC NETWORKS, V25, P211, DOI 10.1016/S0378-8733(03)00009-1
   Aggarwal C.C., 2016, Wirtschaftsinformatik, DOI DOI 10.1007/978-3-319-29659-3
   Almarimi N, 2020, KNOWL-BASED SYST, V204, DOI 10.1016/j.knosys.2020.106201
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Avelino Guilherme, 2017, IFIP INT C OPEN SOUR, P151, DOI DOI 10.1007/978-3-319-57735-7_15
   Avelino Guilherme, 2016, Proceedings of IEEE 24th International Conference on Program Comprehension (ICPC), P1
   Bagley CA, 2007, ITICSE 2007: 12TH ANNUAL CONFERENCE ON INNOVATION & TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P211, DOI 10.1145/1269900.1268846
   Barabasi AL, 2016, NETWORK SCIENCE, P1
   Barabási AL, 1999, SCIENCE, V286, P509, DOI 10.1126/science.286.5439.509
   Batista NA, 2017, 2017 IEEE/WIC/ACM INTERNATIONAL CONFERENCE ON WEB INTELLIGENCE (WI 2017), P170, DOI 10.1145/3106426.3106480
   Baysal O, 2009, INT C PROGRAM COMPRE, P297, DOI 10.1109/ICPC.2009.5090066
   Bhasin T, 2021, 2021 IEEE/ACM 13TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE 2021), P81, DOI 10.1109/CHASE52884.2021.00017
   Blincoe K, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P202, DOI 10.1109/MSR.2015.26
   Borges H, 2018, J SYST SOFTWARE, V146, P112, DOI 10.1016/j.jss.2018.09.016
   Borges H, 2016, PROC IEEE INT CONF S, P334, DOI 10.1109/ICSME.2016.31
   Brandao Michele A., 2017, Journal of the Brazilian Computer Society, V23, DOI 10.1186/s13173-017-0055-x
   Brin S, 1998, COMPUT NETWORKS ISDN, V30, P107, DOI 10.1016/S0169-7552(98)00110-X
   Çaglayan B, 2016, J SYST SOFTWARE, V118, P288, DOI 10.1016/j.jss.2016.03.055
   Colakoglu FN, 2021, IEEE ACCESS, V9, P44647, DOI 10.1109/ACCESS.2021.3054730
   Constantinou E, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P34, DOI 10.1109/SANER.2017.7884607
   Costa A, 2020, IEEE ACCESS, V8, P145687, DOI 10.1109/ACCESS.2020.3015017
   Dalla Palma S, 2020, J SYST SOFTWARE, V170, DOI 10.1016/j.jss.2020.110726
   Easley D., 2010, Networks, Crowds, and Markets: Reasoning about a highly connected world, V8
   Emerson P, 2013, SOC CHOICE WELFARE, V40, P353, DOI 10.1007/s00355-011-0603-9
   Garousi V, 2019, SOFTWARE QUAL J, V27, P429, DOI 10.1007/s11219-018-9419-5
   Gousios G., 2014, Proceedings of the 11th working conference on mining software repositories, Ved, P384, DOI [DOI 10.1145/2597073.2597126, 10.1145/2597073]
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Jere S., 2017, AMC INT C P SERIEC F, P461, DOI [10.1145/3055635.3056575, DOI 10.1145/3055635.3056575]
   Jiang J, 2019, J SYST SOFTWARE, V154, P196, DOI 10.1016/j.jss.2019.04.055
   Joblin M, 2017, PROC INT CONF SOFTW, P164, DOI 10.1109/ICSE.2017.23
   Leibzon W, 2016, PROCEEDINGS OF THE 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON ADVANCES IN SOCIAL NETWORKS ANALYSIS AND MINING ASONAM 2016, P1374, DOI 10.1109/ASONAM.2016.7752419
   Lenhard J, 2019, SOFTWARE QUAL J, V27, P241, DOI 10.1007/s11219-018-9404-z
   Li HX, 2020, IEEE T DEPEND SECURE, V17, P350, DOI 10.1109/TDSC.2017.2754249
   Lima A., 2014, 8 INT AAAI C WEBL SO, DOI [10.1609/icwsm.v8i1.14552, DOI 10.1609/ICWSM.V8I1.14552]
   Madeyski L, 2015, SOFTWARE QUAL J, V23, P393, DOI 10.1007/s11219-014-9241-7
   Majumder S., 2020, ARXIV
   Malhotra R, 2013, LECT NOTES ENG COMP, VI, P61
   Meneely A., 2008, P 16 ACM SIGSOFT INT, P13, DOI DOI 10.1145/1453101.1453106
   Meneely A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P281, DOI 10.1145/1985793.1985832
   Montandon JE, 2021, INFORM SOFTWARE TECH, V129, DOI 10.1016/j.infsof.2020.106429
   Nguyen PT, 2020, SOFTWARE QUAL J, V28, P595, DOI 10.1007/s11219-019-09483-0
   Oliveira GP, 2018, WEBMEDIA'18: PROCEEDINGS OF THE 24TH BRAZILIAN SYMPOSIUM ON MULTIMEDIA AND THE WEB, P363, DOI 10.1145/3243082.3243101
   Palomba F, 2018, IEEE T SOFTWARE ENG
   Qiaona Hong, 2011, 2011 IEEE 27th International Conference on Software Maintenance, P323, DOI 10.1109/ICSM.2011.6080799
   Rahman F, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P432, DOI 10.1109/ICSE.2013.6606589
   Rahman M.M., 2014, P 11 WORKING C MININ, P364, DOI DOI 10.1145/2597073.2597121
   Rocha L. M. A., 2016, BRAZILIAN S DATABASE, P103
   Sarma A, 2016, INT CONF GLOBAL SOFT, P1, DOI 10.1109/ICGSE.2016.35
   Singh PV, 2010, ACM T SOFTW ENG METH, V20, DOI 10.1145/1824760.1824763
   Storey Margaret-Anne, 2013, P 2013 C COMPUTER SU, P103
   Tamburri DA, 2019, EMPIR SOFTW ENG, V24, P1369, DOI 10.1007/s10664-018-9659-9
   Torres N., 2015, Harvard Business Review
   Wang SW, 2018, EMPIR SOFTW ENG, V23, P800, DOI 10.1007/s10664-017-9533-1
   YOUNG HP, 1988, AM POLIT SCI REV, V82, P1231, DOI 10.2307/1961757
   Yu Y., 2014, P 1 INT WORKSH CROWD, P31
   Yu Y, 2016, INFORM SOFTWARE TECH, V74, P204, DOI 10.1016/j.infsof.2016.01.004
   Yu Y, 2014, PROC IEEE INT CONF S, P609, DOI 10.1109/ICSME.2014.107
   Zhang Y, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P13, DOI 10.1109/SANER.2017.7884605
   Zhou C, 2018, 2018 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING (VL/HCC), P319, DOI 10.1109/VLHCC.2018.8506577
NR 59
TC 2
Z9 2
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2023
VL 31
IS 1
BP 211
EP 241
DI 10.1007/s11219-022-09598-x
EA SEP 2022
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9N8JZ
UT WOS:000850756400001
DA 2024-07-18
ER

PT J
AU Özakinci, R
   Tarhan, AK
AF Ozakinci, Rana
   Tarhan, Ayca Kolukisa
TI A decision analysis approach for selecting software defect prediction
   method in the early phases
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Early; Defect prediction; Software defect; Software quality; Prediction
   method; Multi-criteria; Decision analysis; Decision tree; Fuzzy TOPSIS
ID MACHINE LEARNING TECHNIQUES; FAULT PREDICTION; ATTRIBUTES; TOPSIS
AB One of the most important quality indicators of a software product is its defect rates. In this regard and also with the proliferation in methods and tools supporting prediction in software engineering, the interest in software defect prediction (SDP) is increasing. Eventually, it becomes important for stakeholders to build the desired SDP model as early as possible and use it throughout the software development lifecycle. We aim to present a two-phase decision analysis approach, which is structured using decision tree and multi-criteria decision analysis (MCDA), in order to select the best-fit SDP method. To do this, we specify and use criteria to evaluate SDP methods according to the dataset characteristics and stakeholder needs that are elicited via a questionnaire in the early phases of the development lifecycle. We systematically determine the alternatives to be evaluated in the decision analysis and the criteria that may have an impact on the decision. In doing so, we conduct two different expert opinion studies to formulate the decision analysis. We also present case studies with selected SDP methods using public datasets, and investigate the trustworthiness of the proposed approach. The most convenient methods proposed by the decision analysis are naive Bayes (NB), decision tree (DT), and fuzzy logic for the case studies. It is inferred that the results of the decision analysis are consistent with the results of the empirical evidence that we present. The presented approach could be useful in helping software practitioners decide which SDP method is advantageous by revealing their specific requirements for the software projects and associated defect data. While our results provide guidance for future research on the context of early software defect prediction (ESDP), further studies on real software projects are necessary in order to expand knowledge prior to having decisions that are more reliable.
C1 [Ozakinci, Rana; Tarhan, Ayca Kolukisa] Hacettepe Univ, Dept Comp Engn, Software Engn Res Grp, Ankara, Turkey.
C3 Hacettepe University
RP Özakinci, R (corresponding author), Hacettepe Univ, Dept Comp Engn, Software Engn Res Grp, Ankara, Turkey.
EM ranaozakinci@hacettepe.edu.tr; atarhan@hacettepe.edu.tr
RI KOLUKISA, AYÇA/HKN-2117-2023
OI Ozakinci, Rana/0000-0002-7803-453X
CR ABTS C, 1998, COCOMO 2 MODEL DEFIN
   Alan Oral, 2009, 2009 24th International Symposium on Computer and Information Sciences (ISCIS), P567, DOI 10.1109/ISCIS.2009.5291882
   [Anonymous], 2016, FUZZY LOGIC TOOLBOX
   [Anonymous], 2000, APPL OPTIMIZAT
   Baker D., 2001, Guidebook to decision-making methods
   Balogun A.O., 2018, J. Eng. Technol., V3, P50
   Bellman R. E., 1971, Decision-making in a fuzzy environment, DOI 10.1287/mnsc.17.4.B141
   Belton Valerie., 2002, Multiple Criteria Decision Analysis: An Integrated Approach, DOI DOI 10.1007/978-1-4615-1495-4
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Brans JP, 2005, INT SER OPER RES MAN, V78, P163, DOI 10.1007/b100605
   Catal C, 2011, EXPERT SYST APPL, V38, P4626, DOI 10.1016/j.eswa.2010.10.024
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Catal C, 2009, INFORM SCIENCES, V179, P1040, DOI 10.1016/j.ins.2008.12.001
   Challagulla VUB, 2008, INT J ARTIF INTELL T, V17, P389, DOI 10.1142/S0218213008003947
   Chatterjee S, 2016, SOFT COMPUT, V20, P4023, DOI 10.1007/s00500-015-1738-x
   Chen CT, 2006, INT J PROD ECON, V102, P289, DOI 10.1016/j.ijpe.2005.03.009
   Chen CT, 2000, FUZZY SET SYST, V114, P1, DOI 10.1016/S0165-0114(97)00377-1
   Chen SJ., 1992, Fuzzy multiple attribute decision making: methods and applications, DOI [10.1007/978-3-642-46768-4, DOI 10.1007/978-3-642-46768-4]
   COLLOFELLO JS, 1989, J SYST SOFTWARE, V9, P191, DOI 10.1016/0164-1212(89)90039-3
   das Dores Silvia N., 2016, SAC 16, P1486, DOI DOI 10.1145/2851613.2851788
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Dodgson J., 2009, Multi-criteria Analysis: A Manual
   Fenton N., 2014, Software Metrics: A Rigorous and Practical Approach, V3rd, DOI DOI 10.1201/B17461
   Fenton N, 2008, EMPIR SOFTW ENG, V13, P499, DOI 10.1007/s10664-008-9072-x
   Fenton Norman., 2007, Proceedings of the 29th International Conference on Software Engineering Workshops, P69
   Figueira J. R., 2016, MULTIPLE CRITERIA DE, P155, DOI [DOI 10.1007/978-1-4939-3094-4, 10.1007/978-1-4939-3094-4_5, DOI 10.1007/978-1-4939-3094-4_5, DOI 10.1007/978-1-4939-3094-45]
   Frank E, 2016, The WEKA workbench. Online appendix for data mining: practical machine learning tools and techniques
   Friedman M, 1940, ANN MATH STAT, V11, P86, DOI 10.1214/aoms/1177731944
   Fu W, 2016, INFORM SOFTWARE TECH, V76, P135, DOI 10.1016/j.infsof.2016.04.017
   Fulop J., 2005, INTRO DECISION MAKIN
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Goh W. A., 2010, THESIS BLEKINGE I TE
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Han J, 2012, MOR KAUF D, P1
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Hwang CL, 1981, Multiple attribute decision making: Methods and applications a state-ofthe-art survey, DOI [DOI 10.1007/978-3-642-48318-93, 10.1007/978-3-642-48318-93, DOI 10.1007/978-3-642-48318-9]
   Iqbal A, 2019, INT J ADV COMPUT SC, V10, P300
   Jiang Y., 2013, 3 INT C INFORM SCI T, DOI [10.1109/SCC.2014.108, DOI 10.1109/SCC.2014.108]
   Jones Capers, 2011, The Economics of Software Quality
   Kleber A, 2013, DEVEL SEDIM, V66, P1, DOI 10.1016/B978-0-444-53118-6.00001-5
   Klir G. J., 1995, Fuzzy Sets and Fuzzy Logic: Theory and Applications
   Kou G, 2012, STUD INFORM CONTROL, V21, P117
   Ma Y, 2014, INFORM PROCESS LETT, V114, P469, DOI 10.1016/j.ipl.2014.03.012
   Mahdavi I, 2009, INT J ADV MANUF TECH, V45, P406, DOI 10.1007/s00170-009-1971-5
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Menzies T., 2012, The PROMISE Repository of empirical software engineering data
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Minitab, 2017, STAT SOFTW VERS 18 1
   MOTRO A, 1996, UNCERTAINTY MANAGEME, P9, DOI DOI 10.1080/03639040801928762
   Murdoch WJ, 2019, P NATL ACAD SCI USA, V116, P22071, DOI 10.1073/pnas.1900654116
   Nadaban S, 2016, PROCEDIA COMPUT SCI, V91, P823, DOI 10.1016/j.procs.2016.07.088
   Ozakinci R., 2021, DECISION ANAL APPROA, DOI [10.5281/zenodo.6478564, DOI 10.5281/ZENODO.6478564]
   Özakinci R, 2019, EUROMICRO CONF PROC, P199, DOI 10.1109/SEAA.2019.00040
   Özakinci R, 2018, J SYST SOFTWARE, V144, P216, DOI 10.1016/j.jss.2018.06.025
   Ozakinci R, 2016, COMM COM INF SC, V609, P287, DOI 10.1007/978-3-319-38980-6_21
   Pandey A. K., 2013, STUD FUZZ SOFT COMPU, V303, DOI [10.1007/978-81-322-1176-1, DOI 10.1007/978-81-322-1176-1]
   Pandey A.K., 2009, International Journal of Electronics Engineering, V1, P239
   Peng Y, 2011, INT J INF TECH DECIS, V10, P187, DOI 10.1142/S0219622011004282
   Pereira DG, 2015, COMMUN STAT-SIMUL C, V44, P2636, DOI 10.1080/03610918.2014.931971
   Pohlert T, 2018, PMCMRPLUS CALCULATE
   Portugal Ivens, 2018, Expert Systems with Applications, V97, P205, DOI 10.1016/j.eswa.2017.12.020
   QUINLAN JR, 1990, IEEE T SYST MAN CYB, V20, P339, DOI 10.1109/21.52545
   Radjenovic D, 2013, INFORM SOFTWARE TECH, V55, P1397, DOI 10.1016/j.infsof.2013.02.009
   Rana R., 2015, THESIS, DOI [10.13140/RG.2.1.1452.8160, DOI 10.13140/RG.2.1.1452.8160]
   Rathore SS, 2017, COMPUTING, V99, P255, DOI 10.1007/s00607-016-0489-6
   SAATY TL, 1986, MANAGE SCI, V32, P841, DOI 10.1287/mnsc.32.7.841
   Sandhu P.S., 2012, INT J COMPUT THEORY, V4, P298, DOI DOI 10.7763/IJCTE.2012.V4.470
   Shepperd M., 2013, NASA MDP DATASET BAC
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Singh P., 2014, INT J COMPUTER ELECT, V9, P800, DOI [10.5370/JEET.2014.9.4.742, DOI 10.5370/JEET.2014.9.4.742]
   Singh P, 2014, J ELECTR ENG TECHNOL, V9, P1739, DOI 10.5370/JEET.2014.9.5.1739
   Sitorus F, 2019, EXPERT SYST APPL, V121, P393, DOI 10.1016/j.eswa.2018.12.001
   Sodhi B, 2012, ARXIV
   Song QB, 2011, IEEE T SOFTWARE ENG, V37, P356, DOI 10.1109/TSE.2010.90
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   Wahono R. S., 2015, Journal of Software Engineering, V1, P1
   Wahyudin D., 2008, SOFTWARE ENG TECHNIQ, P261
   Watróbski J, 2019, OMEGA-INT J MANAGE S, V86, P107, DOI 10.1016/j.omega.2018.07.004
   Witten I.H., 2011, Data Mining - Pratical Machine Learning Tools and Techniques, VThird, DOI 10.1002/1521-3773(20010316)40:63.3.CO;2-C
   Wu, 2015, INT J MANAGEMENT SCI, V2, P13
   Yadav D., 2012, International journal of performability engineering, V8, P399, DOI DOI 10.23940/IJPE.12.4.P399.MAG
   Yin R. K., 2018, Case Study Research and Applications: Design and Methods, DOI DOI 10.1016/J.TECHFORE.2018.10.013
   Zhang W., 2011, INT C PRED MOD SOFTW, P4, DOI [10.1145/2020390.2020394, DOI 10.1145/2020390.2020394]
   Zhou Y., 2013, P 23 INT JOINT C ART, P3249
NR 86
TC 2
Z9 2
U1 1
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2023
VL 31
IS 1
BP 121
EP 177
DI 10.1007/s11219-022-09595-0
EA SEP 2022
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9N8JZ
UT WOS:000850383000001
DA 2024-07-18
ER

PT J
AU Sotomayor, JP
   Allala, SC
   Santiago, D
   King, TM
   Clarke, PJ
AF Sotomayor, Juan P.
   Allala, Sai Chaithra
   Santiago, Dionny
   King, Tariq M.
   Clarke, Peter J.
TI Comparison of open-source runtime testing tools for microservices
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Microservices; Open-source testing tools; Software testing; Testing
   levels; Microservices testing
AB In recent years, there has been an increase in the number of software applications developed using the microservices architectural pattern. This trend is due to the benefits derived from the more traditional N-tier architectural patterns that use monolithic designs for each tier. The value of using the microservices architectural pattern, particularly in the cloud, has been pioneered by companies such as Netflix and Google. These companies have created protocols and tools to support the development of cloud-based applications. However, the testing of microservices applications continues to be challenging due to the added complexity of network communication between the collaborating services. In addition, an increasing number of tools are being used to test microservices-based applications, which makes selecting the most appropriate tool(s) a challenging task. In this article, we compare several open-source tools used to support the testing of microservices based on testing levels, the scaffolding required, languages used for test cases, and the type of interface used to interact with the applications under test. We describe a prototype for a microservices-based application called Rideshare that allows users to reserve rides from available drivers. Using the Rideshare application, we performed a study using a subset of selected open-source tools to determine the overhead added by these tools. We present the results of the study and describe our experiences in configuring the tools to test the Rideshare application using different testing approaches.
C1 [Sotomayor, Juan P.; Allala, Sai Chaithra; Santiago, Dionny; Clarke, Peter J.] Florida Int Univ, Sch Comp & Informat Sci, 11200 SW 8th St, Miami, FL 33199 USA.
   [King, Tariq M.] Testai, Res & Dev, 340 Brannan St,Suite 100, San Francisco, CA 94107 USA.
C3 State University System of Florida; Florida International University
RP Sotomayor, JP (corresponding author), Florida Int Univ, Sch Comp & Informat Sci, 11200 SW 8th St, Miami, FL 33199 USA.
EM jsoto128@cis.fiu.edu; salla010@cis.fiu.edu; dsant005@cis.fiu.edu;
   tariq@test.ai; clarkep@cis.fiu.edu
RI Sotomayor, Juan P./KPB-8260-2024
OI Sotomayor, Juan P./0000-0002-2086-2551; Clarke,
   Peter/0000-0003-0892-1907; King, Tariq/0009-0006-0368-8201; Santiago,
   Dionny/0000-0003-0480-5773
FU Ultimate Kronos Group (UKG)
FX This work is supported in part by Test.ai and Ultimate Kronos Group
   (UKG). Any opinions, findings, and conclusions, or recommendations
   expressed in this material are those of the author(s) and do not
   necessarily reflect the views of Test.ai and UKG. The authors would like
   to thank the teams at Test.ai and UKG for the contributions, feedback,
   and insight provided in preparing this manuscript.
CR Ammann Paul, 2008, Introduction to software testing, V1st
   [Anonymous], 2014, TEST AUTOMATION PYRA
   [Anonymous], 2009, MTR090026 MITRE CORP
   [Anonymous], ICSR WORKSH COMP BAS
   [Anonymous], 2011, soapUI
   [Anonymous], 2021, Google
   Apache JMeter, 2019, JMETER
   Arquillian Project, ARQ
   Arquillian Project, 2019, SHRINKWRAP
   Bertolino A, 2018, PROC IEEE ACM INT C, P17, DOI 10.1145/3183440.3183497
   Beust Cedric, 2019, TESTNG
   Bozkurt M., 2010, Testing Web Services: A Survey
   Bueno AS., 2018, TESTING JAVA MICROSE
   Byars B, 2020, MOUNTEBANK
   CFIR Research Team, 2021, CONS FRAM IMPL RES
   Clemson T., 2014, TESTING STRATEGIES M
   Colantonio J, 2020, TOP API TESTING TOOL
   Community O, 2019, OAUTH 2 0
   Cucumber Developer Team, 2021, GHERK SYNT
   Cucumber Developer Team, 2019, CUC
   Dehghani Zhamak., 2018, How to break a Monolith into Microservices
   Docker Development Team, 2018, DOCK COMM ED
   EC, 2019, ESDN Rep.
   Fat N, 2016, 2016 Zooming Innovation in Consumer Electronics International Conference (ZINC), P76, DOI 10.1109/ZINC.2016.7513659
   Forsgren N., 2019, Accelerate State of DevOps Report
   Fowler M., 2018, MICROSERVICES DEFINI
   GARLAN D, 1995, IEEE T SOFTWARE ENG, V21, P269
   Gatling Corp, 2019, GATL
   Ghani I, 2019, INT J ADV COMPUT SC, V10, P443
   *GOOGL, 2019, GOOGL MAPS PLATF
   Google, 2019, GO PROGR LANG
   Google, MIN
   Google, ANG JS
   Gremlin B., 2003, GREML
   Habl A, 2017, IEEE INTL CONF IND I, P861, DOI 10.1109/INDIN.2017.8104885
   Haleby J, 2020, REST ASSURED
   Heckel R, 2005, ELECTRON NOTES THEOR, V116, P145, DOI 10.1016/j.entcs.2004.02.073
   Heorhiadi V, 2016, INT CON DISTR COMP S, P57, DOI 10.1109/ICDCS.2016.11
   Hussain Shariq, 2013, Applied Mechanics and Materials, V427-429, P2951, DOI 10.4028/www.scientific.net/AMM.427-429.2951
   IBM Cloud Team, 2021, SOA VS MICR WHATS DI
   Java Development Journal, 2019, TEST SPRING BOOT
   Jenkins Development team, 2020, JENK
   JS Foundation, 2019, APP
   Katalon LLC, 2019, KAT STUD
   Kieffer, 2019, WRITING INTEGRATION
   King T. M., 2014, HDB RES ARCHITECTURA
   Lewis J., 2014, Microservices: A definition of this new architectural term
   Meszaros G., 2007, Xunit test patterns: refactoring test code
   Mikowski, 2019, TESTING REST APIS HO
   Nagy T., 2008, P 7 ACM SIGPLAN WORK, P2128, DOI [10.1145/1411273.1411277, DOI 10.1145/1411273.1411277]
   Netflix Development Team, NETFL
   Netflix Development Team, EUREKA
   Newman S., 2015, BUILDING MICROSERVIC
   Niclausse N, 2019, TSUNG
   Oracle, 2020, AP
   Palantir Technologies, 2018, DOCK COMP RUL LIB
   Pivotal Software Inc, 2019, SPRING BOOT
   Pivotal Software Inc, 2019, SPRING CLOUD CONTR
   Postman Neil., 1994, The Disappearance of Childhood
   Richards M, 2015, Software Architecture Patterns
   Rimal Bhaskar Prasad, 2009, Proceedings of the 2009 Fifth International Joint Conference on INC, IMS and IDC, P44, DOI 10.1109/NCM.2009.218
   RStudio Team, 2020, INT DEV R
   Russo D, 2017, PROCEDIA COMPUT SCI, V109, P929, DOI 10.1016/j.procs.2017.05.426
   Selenium, 2021, SEL IDE
   Sheppard P.J., 1999, Telepresence
   Singh I., 2014, INT J INF COMPUT TEC, V4, P1507
   Situ T, 2016, CONSUMER DRIVEN CONT
   Software Test Help, 2021, TOP 15 MOST POP WEB
   Software Testing Help, 2021, CHOOS BEST AUT TEST
   Software Testing Help, 2019, 20 BEST OP SOURC AUT
   Soldani J, 2018, J SYST SOFTWARE, V146, P215, DOI 10.1016/j.jss.2018.09.082
   SonarSource SA, 2019, SONARQUBE
   Sotomayor JP, 2019, P INT COMP SOFTW APP, P356, DOI 10.1109/COMPSAC.2019.10232
   SpectoLabs, 2019, HOV
   SpectoLabs, 2018, HOV
   Stolberg S, 2009, AGILE 2009 CONFERENCE, P369, DOI 10.1109/AGILE.2009.16
   Suliman D, 2006, P INT COMP SOFTW APP, P171
   Sundar A, 2018, INSIGHT MICROSERVICE
   Taibi D, 2017, IEEE CLOUD COMPUT, V4, P22, DOI 10.1109/MCC.2017.4250931
   Tal L, 2019, COMPREHENSIVE GUIDE
   Team R., 2016, RStudio
   Team R, 2012, SIK
   The AngularJS Team-Google, 2019, PROTR
   The AngularJS Team-Google, 2021, KARMA
   The JUnit Team, 2019, JUNIT
   The LUVOIR Team L., 2019, NUNIT
   Toledo A., 2019, DIREITO INT BIOPIRAT
   Typhoeus Community, 2021, TYPH
   UNFCCC, 2021, GLASG CLIM CHANG C U
   US Census Bureau, 2021, AM COMMUNITY SURVEY
   VCR Development Team, 2019, VCR
   VCR Development Team, 2021, REL PROJ VCR 6 0 0
   VMware Inc, 2020, RABBITMQ
   Waseem M, 2020, ASIA PAC SOFWR ENG, P119, DOI 10.1109/APSEC51365.2020.00020
   Watir Development Team, 2019, WAT
   Whedon Joss., 2005, Serenity
NR 96
TC 4
Z9 4
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2023
VL 31
IS 1
BP 55
EP 87
DI 10.1007/s11219-022-09583-4
EA MAY 2022
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9N8JZ
UT WOS:000805521000001
DA 2024-07-18
ER

PT J
AU Bunke, M
   Sohr, K
AF Bunke, Michaela
   Sohr, Karsten
TI Towards supporting software assurance assessments by detecting security
   patterns
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software assessment; Android; Security patterns; Static program analysis
ID DESIGN PATTERNS; STATIC ANALYSIS
AB Today, many tools exist that attempt to find possible vulnerabilities in Android applications, e.g., FlowDroid, Fortify, or AppScan. However, all these tools aim to detect vulnerabilities or (sometimes) tainted flows and present the reviewer detected possible issues of an analyzed Android application. None of these tools supports the identification of implemented security features in code, although this aspect is also relevant to developers as well as reviewers. To address this open problem, we present a program comprehension approach based on connected object process graphs (COPGs) containing interacting objects described by security patterns in this paper. The feasibility of our approach is evaluated qualitatively with 25 security-critical Android applications from Google Play with almost 7 million lines of code. We currently support 17 security pattern variants with about 199 correctly detected pattern instances in the apps. We also define a benchmark of non-trivial, security-critical Android apps, which can also be used for other security analysis tasks based on the static analysis framework Soot. With this benchmark, our analysis yields a precision of 99% and a recall of 80%. Finally, we discussed our approach and the developed tool with six software security experts from the SAFECode organization to obtain additional feedback.
C1 [Bunke, Michaela; Sohr, Karsten] Univ Bremen, Bibliothekstr 1, D-28359 Bremen, Germany.
C3 University of Bremen
RP Bunke, M (corresponding author), Univ Bremen, Bibliothekstr 1, D-28359 Bremen, Germany.
EM mbunke@tzi.de; sohr@tzi.de
OI Sohr, Karsten/0000-0001-6781-4226
FU German Research Foundation (DFG) [SO 515/8-1]
FX Karsten Sohr was supported in part by the German Research Foundation
   (DFG) under the grant SO 515/8-1.
CR Alvi AK, 2017, PROCEEDINGS 2017 INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND ASSURANCE (ICSSA), P38, DOI 10.1109/ICSSA.2017.24
   Ampatzoglou A, 2013, J SYST SOFTWARE, V86, P1945, DOI 10.1016/j.jss.2013.03.063
   [Anonymous], 1997, 4 PATT LANG PROGR C
   [Anonymous], 2010, P USENIX S OP SYST D
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Balebako R, 2014, P WORKSH US SEC, P1
   Balzarotti D, 2010, IEEE T SOFTWARE ENG, V36, P453, DOI 10.1109/TSE.2009.53
   *BAYR LAND DAT DUS, 2014, OR DAT APP ENTW APP
   BELK M, 2011, TECH REP
   BLAKLEY B, 2004, MEMBERS OPEN GROUP S
   BODDEN E, 2017, DROIDBENCH BENCHMARK
   BUNKE M, 2014, P EUR C PATT LANG PR
   Bunke M, 2015, PROCEEDINGS OF THE 20TH EUROPEAN CONFERENCE ON PATTERN LANGUAGES OF PROGRAMS (EUROPLOP 2015), DOI 10.1145/2855321.2855364
   Bunke M, 2011, LECT NOTES COMPUT SC, V6542, P156, DOI 10.1007/978-3-642-19125-1_12
   Bunke Michaela., 2012, International Journal on Advances in Security, V5, P46
   Chess B, 2004, IEEE SECUR PRIV, V2, P76, DOI 10.1109/MSP.2004.111
   Chin E., 2011, P 9 INT C MOB SYST A, P239, DOI DOI 10.1145/1999995.2000018
   COATS M, 2013, OWASP FRAMEWORK SECU
   CUI X, 2015, P 8 ACM C SEC PRIV W
   Dong J, 2009, INT J SOFTW ENG KNOW, V19, P823, DOI 10.1142/S021819400900443X
   Edmundson Anne, 2013, Engineering Secure Software and Systems. 5th International Symposium, ESSoS 2013. Proceedings, P197, DOI 10.1007/978-3-642-36563-8_14
   Egele M., 2013, P 2013 ACM SIGSAC C, P73
   Eisenbarth T, 2005, J SYST SOFTWARE, V77, P263, DOI 10.1016/j.jss.2004.04.028
   EISENBARTH T, 2002, WORK C REV ENG
   Enck William., 2011, Proc. of the USENIX conference on Security, P21
   *ENISA, 2011, SMARTPH SEC DEV GUID
   Fahl S., 2012, ACM CCS 12, P50, DOI DOI 10.1145/2382196.2382205
   *GOOGL INC, 2017, RUN APPS ANDR EM
   *GOOGL INC, 2015, SEC TIPS
   *GOOGL INC, 2017, GUIC
   *GOOGL INC, 2017, ANDR DEV
   *GOOGL INC, 2017, MAN PROJ OV
   *GOOGL INC, 2017, APPL
   *GOOGL INC, 2016, MAN PROJ OV
   *GOOGL INC, 2018, FRAGMENTS
   *GOOGL INC, 2017, INT INT FILT
   Gordon MI, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23089
   Gravino Carmine, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P185, DOI 10.1007/978-3-642-33666-9_13
   HAFIZ M, 2005, P ACM SIGPLAN C OBJ, P142
   HAFIZ M, 2004, P C PATT LANG PROGR, P1
   Heaps H. S., 1978, Information retrieval: Computational and theoretical aspects
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Huang JJ, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1036, DOI 10.1145/2568225.2568301
   *ICO, 2013, PRIV MOB APPS GUID A
   *IFASEC, 2014, GUID SICH APPS
   JANSSEN KU, 2018, ANDROID ANNOTATIONS
   KITCHENHAM B, 1995, IEEE SOFTWARE, V12, P52, DOI 10.1109/52.391832
   KLIEBER W., 2014, Proceedings of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis, P1
   Kramer C, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P208, DOI 10.1109/WCRE.1996.558905
   Krishnan P., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P545, DOI 10.1109/ICSTW.2011.10
   Laverdière MA, 2006, CAN CON EL COMP EN, P2086
   Lhotak Ondrej, 2013, Dagstuhl Reports, V3, P91, DOI DOI 10.4230/DAGREP.3.4.91
   Li L, 2017, INFORM SOFTWARE TECH, V88, P67, DOI 10.1016/j.infsof.2017.04.001
   Li L, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P280, DOI 10.1109/ICSE.2015.48
   LIVSHITS B, 2017, STANFORD SECURIBENCH
   McGraw G., 2006, Software security: building security in
   McGraw G, 2008, COMPUTER, V41, P107, DOI 10.1109/MC.2008.514
   *MICR CORP, 2005, GLANC SEC COD REV
   Mirzaei N, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P461, DOI 10.1109/ISSRE.2015.7381839
   *MITE CORP, 2013, US AUT STAT AN TOOLS
   Octeau Damien, 2013, P 22 USENIX SECURITY, P543
   *OR INC, 2015, JAV SEC DOC
   QUANTE J, 2009, THESIS
   Quante J, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P219, DOI 10.1109/WCRE.2007.24
   Quante J, 2008, J SYST SOFTWARE, V81, P481, DOI 10.1016/j.jss.2007.06.005
   Quante J, 2008, INT C PROGRAM COMPRE, P73, DOI 10.1109/ICPC.2008.15
   Rasool G., 2011, IJCSI International Journal of Computer Science Issues, V8, P251
   RAVITCH T, 2014, P 4 PROGR PROT REV E
   Roehm T, 2012, PROC INT CONF SOFTW, P255, DOI 10.1109/ICSE.2012.6227188
   *SAFECODE MEMB, 2017, TEL C 29 09 2017
   Scholz B., 2011, 2011 18th Working Conference on Reverse Engineering, P251, DOI 10.1109/WCRE.2011.38
   Schumacher M., 2005, Security Patterns: Integrating Security and Systems Engineering, V1st
   Shen F., 2014, P 29 ACMIEEE INT C A, P515, DOI DOI 10.1145/2642937.2643018
   Dong S, 2007, 2007 5TH INTERNATIONAL CONFERENCE ON MICROWAVE AND MILLIMETER WAVE TECHNOLOGY PROCEEDINGS, P621
   *SKYL, 2016, JADX DEX JAV DEC
   Sridharan M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P112, DOI 10.1145/1250734.1250748
   Steel C., 2005, CORE SECURITY PATTER
   SUFATRIO CTW, 2015, ACCURATE SPECIFICATI, P355
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   Vallee-Rai R., 1999, Proceedings of the 1999 conference of the Centre for Advanced Studies on Collaborative research. CASCON'99, P13, DOI DOI 10.1145/1925805.1925818
   VANHILST M, 2007, P INT WORKSH SOFTW P, P25
   Wang DJ, 2012, 2012 INTERNATIONAL CONFERENCE ON CONTROL ENGINEERING AND COMMUNICATION TECHNOLOGY (ICCECT 2012), P1029, DOI 10.1109/ICCECT.2012.267
   Wei FG, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1329, DOI 10.1145/2660267.2660357
   Weiser Mark., 1981, Proceedings of the 5th International Conference on Software Engineering, P439
   Wheeler D., 2012, Sloccount
   Yang SQ, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P89, DOI 10.1109/ICSE.2015.31
   Yang SQ, 2015, IEEE INT CONF AUTOM, P658, DOI 10.1109/ASE.2015.76
   Zhou Y., 2012, Android malware genome project
   2012, SOOT LIST SPARK ALIA
   2018, USING GEOMETRIC ENCO
   2015, SOOT LIST PROBLEM MA
NR 91
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1711
EP 1753
DI 10.1007/s11219-019-09492-z
EA MAY 2020
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000530618600001
DA 2024-07-18
ER

PT J
AU Tramontana, P
   Amalfitano, D
   Amatucci, N
   Fasolino, AR
AF Tramontana, Porfirio
   Amalfitano, Domenico
   Amatucci, Nicola
   Fasolino, Anna Rita
TI Automated functional testing of mobile applications: a systematic
   mapping study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mobile applications; Testing automation; Functional testing; Systematic
   mapping
ID RACE DETECTION; ANDROID APPS; CONTEXT; FRAMEWORK; RESTART; TOOL
AB Context Testing is a critical and costly activity in the life cycle of a mobile application, due to the growing request of new applications and to the rapid evolution of mobile devices and frameworks. Testing automation may represent an effective solution to improve the quality of mobile applications and to reduce testing costs. Objective We have performed a systematic mapping study to find, analyze, and classify papers in the scientific literature that are related to the automation of functional testing of mobile applications with the aim to provide a classification scheme useful for researchers and practitioners to have a clear view of the state of the art and to easily find existing solutions to their issues. Method We have conducted the study on the basis of a set of 18 research questions. Search queries have been formulated and applied to 7 search engines and the resulting papers have been filtered by considering sets of inclusion and exclusion criteria. The selected papers have been systematically classified and, in addition, a bibliometric analysis has been performed. Results A systematic map including 131 papers has been obtained and is publicly available. The papers have been classified on the basis of the supported testing activities, the characteristics of the techniques and tools they present, and the evaluation methodologies adopted to validate them. The bibliometric analysis has allowed the identification of the most active researchers, the most attractive venues, and the most influential papers. Conclusions The analysis of the systematic mapping has allowed the identification of some research trends and gaps in this field of study. For example, we have observed a strong prevalence of Android-based approaches, a lack of contributions from industry, and the absence of specific venues and journals focused on mobile testing automation.
C1 [Tramontana, Porfirio; Amalfitano, Domenico; Amatucci, Nicola; Fasolino, Anna Rita] Univ Naples Federico II, Dept Elect Engn & Informat Technol, Naples, Italy.
C3 University of Naples Federico II
RP Tramontana, P (corresponding author), Univ Naples Federico II, Dept Elect Engn & Informat Technol, Naples, Italy.
EM ptramont@unina.it; domenico.amalfitano@unina.it;
   nicola.amatucci@unina.it; fasolino@unina.it
RI Amatucci, Nicola/JMC-5038-2023; Amalfitano, Domenico/HJH-4638-2023;
   Tramontana, Porfirio/I-1570-2019; Fasolino, Anna Rita/V-4582-2019
OI Amatucci, Nicola/0000-0001-8971-9641; Amalfitano,
   Domenico/0000-0002-4761-4443; Tramontana, Porfirio/0000-0003-3264-185X;
   Fasolino, Anna Rita/0000-0001-7116-019X
CR Adams C, 2015, PRINCIPLES OF HORTICULTURE: LEVEL 2, P83
   Amalfitano D., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P252, DOI 10.1109/ICSTW.2011.77
   Amalfitano D, 2017, J SYST SOFTWARE, V125, P322, DOI 10.1016/j.jss.2016.12.017
   Amalfitano D, 2015, IEEE SOFTWARE, V32, P53, DOI 10.1109/MS.2014.55
   Amalfitano D, 2013, IEEE ICST WORKSHOP, P126, DOI 10.1109/ICSTW.2013.22
   Amalfitano D, 2013, ADV COMPUT, V89, P1, DOI 10.1016/B978-0-12-408094-2.00001-1
   Amalfitano D, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P650, DOI 10.1109/ICSM.2012.6405345
   Anand Saswat, 2012, Automated Concolic Testing of Smartphone Apps (FSE)
   [Anonymous], DETECTING INCONSISTE
   [Anonymous], SIG DROID AUTOMATED
   [Anonymous], ANDROID BASED APPROA
   [Anonymous], MOBILETEST TOOL SUPP
   [Anonymous], MOBILE APPL VERIFICA
   [Anonymous], DYNALDROID SYSTEM AU
   [Anonymous], AGRIPPIN NOVEL SEARC
   [Anonymous], P 2013 ACM WORKSH MO
   [Anonymous], 2015, RECURSIVE CRAWLER AL
   [Anonymous], DATA DRIVEN ARCHITEC
   [Anonymous], MOBIPLAY REMOTE EXEC
   [Anonymous], ASE 12
   [Anonymous], EXCEPTION FAULT LOCA
   [Anonymous], 2 INT C MOB SOFTW EN
   [Anonymous], VERIDROID AUTOMATING
   [Anonymous], 6 INT WORKSH TEST TE
   [Anonymous], TESTING APPROACH MOB
   [Anonymous], PROC INT CONF SOFTW
   [Anonymous], MODEL BASED GUI TEST
   [Anonymous], TESTING METHOD BASED
   [Anonymous], 2015, GENERATING VARIOUS C
   [Anonymous], GUI BUG FINDING FRAM
   [Anonymous], THESIS
   [Anonymous], DROID MATE ROBUST EX
   [Anonymous], MODERN APPL SCI
   [Anonymous], 2010, 2010 2 INT C COMP EN
   [Anonymous], REGRESSION TEST SELE
   [Anonymous], AUTOMATED TESTING TO
   [Anonymous], FUZZY CROSS APP REPL
   [Anonymous], REPROD CONTEXT SENSI
   [Anonymous], CRITERIA SELECTING M
   [Anonymous], TESTDROID AUTOMATED
   [Anonymous], MODEL BASED REPLAY T
   [Anonymous], 2007, EBSE200701 KEEL U DE
   [Anonymous], INT J NEW COMPUTER A
   [Anonymous], INT J APPL ENG RES
   [Anonymous], 2014, INT J MULTIDISCIP AP
   [Anonymous], TEST AUTOMATION MOBI
   [Anonymous], INT J ADV SOFTWARE
   [Anonymous], AUTOMATING UI TESTS
   [Anonymous], IEEE T SOFTWARE ENG, DOI DOI 10.1109/TSE.2014.2372785
   [Anonymous], IMPERIAL J INTERDISC
   [Anonymous], TECHNICAL REPORT
   [Anonymous], BUILDING TEST AUTOMA
   [Anonymous], MODELING TEST CASE G
   [Anonymous], VERSATILE YET LIGHTW
   [Anonymous], INT J SOFTW INFORM
   [Anonymous], ACCESS
   [Anonymous], P 7 INT WORKSH AUT T
   [Anonymous], SCALABLE RACE DETECT
   [Anonymous], MZOLTAR AUTOMATIC DE
   [Anonymous], P 2 ACM INT C MOB SO
   Arnatovich YL, 2016, ASIA PAC SOFWR ENG, P193, DOI [10.1109/APSEC.2016.036, 10.1109/APSEC.2016.36]
   Azim T, 2013, ACM SIGPLAN NOTICES, V48, P641, DOI [10.1145/2509136.2509549, 10.1145/2544173.2509549]
   Baek YM, 2016, IEEE INT CONF AUTOM, P238, DOI [10.1145/2970276.2970313, 10.1145/2970276.2970310]
   Basili V.R., 1994, Encyclopedia of Software Engineering, P528532
   Canfora G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P66, DOI 10.1109/ICST.2013.16
   Choi W, 2013, ACM SIGPLAN NOTICES, V48, P623, DOI [10.1145/2544173.2509552, 10.1145/2509136.2509552]
   Choudhary SR, 2015, IEEE INT CONF AUTOM, P429, DOI 10.1109/ASE.2015.89
   Corral L, 2015, COMPUTING, V97, P1001, DOI 10.1007/s00607-014-0395-8
   Costa P, 2014, 2014 9TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P66, DOI 10.1109/QUATIC.2014.16
   Crispin L., 2009, AGILE TESTING PRACTI
   Da Zun, 2016, 2016 4th International Conference on Cloud Computing and Intelligence Systems (CCIS). Proceedings, P82, DOI 10.1109/CCIS.2016.7790229
   Delamaro M.E., 2006, AST'06, Proceedings of the 2006 International Workshop on Automation of Software Test, P118
   Dev R, 2012, ADV COMPUT, V85, P65, DOI 10.1016/B978-0-12-396526-4.00002-3
   Dutia S. N., 2015, P 4 ANN ACM C RES IN, P43
   Farto GD, 2015, ELECTRON NOTES THEOR, V314, P3, DOI 10.1016/j.entcs.2015.05.002
   Fazzini M, 2017, IEEE INT CONF SOFTW, P149, DOI 10.1109/ICST.2017.21
   Gao J, 2014, COMPUTER, V47, P46, DOI 10.1109/MC.2013.445
   Garousi V, 2016, INFORM SOFTWARE TECH, V76, P92, DOI 10.1016/j.infsof.2016.04.015
   Garousi V, 2013, INFORM SOFTWARE TECH, V55, P1374, DOI 10.1016/j.infsof.2013.02.006
   Gomez L, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P72, DOI 10.1109/ICSE.2013.6606553
   Griebe T., 2014, Proceedings of the 29th Annual ACM Symposium on Applied Computing, P420
   Griebe T, 2016, FRONT ARTIF INTEL AP, V286, P85, DOI 10.3233/978-1-61499-674-3-85
   Griebe Tobias., 2015, International Conference on Intelligent Software Methodologies, Tools, and Techniques, P3
   Gudmundsson V, 2016, ELECTRON P THEOR COM, P16, DOI 10.4204/EPTCS.208.2
   Hao S, 2014, MOBISYS'14: PROCEEDINGS OF THE 12TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES, P204, DOI 10.1145/2594368.2594390
   Holl K, 2016, 15TH INTERNATIONAL CONFERENCE ON MOBILE AND UBIQUITOUS MULTIMEDIA (MUM 2016), P101, DOI 10.1145/3012709.3012718
   Hsiao CH, 2014, ACM SIGPLAN NOTICES, V49, P326, DOI [10.1145/2666356.2594330, 10.1145/2594291.2594330]
   Hu Cuixiong, 2011, Proceedings of the 6th International Workshop on Automation of Software Test, P77
   Hu G., 2014, P ACM EUROSYS, p18:1
   Hu Y, 2016, ADV SOC SCI EDUC HUM, V70, P377
   Imparato G, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P760, DOI 10.1109/ICSE.2015.241
   ISO-Standards, 2013, ISO 29022, V1, P1, DOI [DOI 10.1109/IEEESTD.2013.6588537, 10.1109/IEEESTD.2013.6588537]
   Jabbarvand R, 2015, 2015 IEEE/ACM FOURTH INTERNATIONAL WORKSHOP ON GREEN AND SUSTAINABLE SOFTWARE (GREENS), P8, DOI 10.1109/GREENS.2015.9
   Jensen C S, 2013, P 2013 INT S SOFTW T, P67, DOI [10.1145/2483760.2483777, DOI 10.1145/2483760.2483777]
   Jiang B, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P21, DOI 10.1109/QRS.2017.12
   Jiang B, 2016, IEEE T RELIAB, V65, P1223, DOI 10.1109/TR.2015.2481601
   Kirubakaran B, 2013, 2013 INTERNATIONAL CONFERENCE ON PATTERN RECOGNITION, INFORMATICS AND MEDICAL ENGINEERING (PRIME)
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kochhar P. S., 2015, ICST'15, P1
   Li A, 2014, INT CONF SOFTW SECUR, P68, DOI 10.1109/SERE.2014.20
   Li QW, 2016, ASIA PAC SOFWR ENG, P209, DOI [10.1109/APSEC.2016.038, 10.1109/APSEC.2016.41]
   Li YC, 2017, PROC IEEE ACM INT C, P23, DOI 10.1109/ICSE-C.2017.8
   Liang CJM, 2014, PROCEEDINGS OF THE 20TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE COMPUTING AND NETWORKING (MOBICOM '14), P519, DOI 10.1145/2639108.2639131
   Lin YD, 2014, IEEE T SOFTWARE ENG, V40, P957, DOI 10.1109/TSE.2014.2331982
   Linares-Vásquez M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P111, DOI 10.1109/MSR.2015.18
   Linares-Vásquez M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P763, DOI 10.1109/ICSE.2015.242
   Liu CH, 2015, FRONT ARTIF INTEL AP, V274, P1865, DOI 10.3233/978-1-61499-484-8-1865
   Liu CH, 2014, 2014 INTERNATIONAL SYMPOSIUM ON COMPUTER, CONSUMER AND CONTROL (IS3C 2014), P1129, DOI 10.1109/IS3C.2014.293
   Liu P, 2017, PROC INT CONF SOFTW, P643, DOI 10.1109/ICSE.2017.65
   Lu L, 2012, WOR CONG SOFTW ENG, P37, DOI 10.1109/WCSE.2012.15
   Ma X, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY COMPANION (QRS-C 2016), P159, DOI 10.1109/QRS-C.2016.25
   Machiry A., 2013, P 2013 9 JOINT M FDN, P224
   Mahmood R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P599, DOI 10.1145/2635868.2635896
   Maiya P, 2014, ACM SIGPLAN NOTICES, V49, P316, DOI [10.1145/2666356.2594311, 10.1145/2594291.2594311]
   Maji AK., 2012, 2012 42nd Annual IEEE/IFIP International Conference on, P1
   Mao K., 2016, P 25 INT S SOFTW TES, P94
   Matalonga S, 2017, J SYST SOFTWARE, V131, P1, DOI 10.1016/j.jss.2017.05.048
   Mendez-Porras A., 2015, CIBSE 2015 18 IB AM, P195
   Méndez-Porras A, 2015, LECT NOTES COMPUT SC, V9454, P37, DOI 10.1007/978-3-319-26401-1_4
   Meng Zhanshuai., 2015, Proceedings of the 7th Asia-Pacific Symposium on Internetware, Internetware '15, P166
   Mirzaei Nariman, 2012, ACM SIGSOFT Software Engineering Notes, V37, P1, DOI DOI 10.1145/2382756.2382798
   Moran K, 2017, PROC IEEE ACM INT C, P505, DOI 10.1109/ICSE-C.2017.166
   Moran K, 2016, IEEE INT CONF SOFTW, P33, DOI 10.1109/ICST.2016.34
   Morgado IC, 2016, PROCEDIA COMPUT SCI, V83, P284, DOI 10.1016/j.procs.2016.04.127
   Muccini H., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P29, DOI 10.1109/IWAST.2012.6228987
   Nagowah L., 2012, Proceedings of the 2012 International Conference on Computer & Information Science (ICCIS), P924, DOI 10.1109/ICCISci.2012.6297158
   Nguyen C.D., 2012, Proceedings of the 2012 International Symposium on Software Testing and Analysis, P100, DOI 10.1145/04000800.2336765
   Paulovsky F, 2017, 2017 IEEE/ACM 12TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TESTING (AST), P52, DOI 10.1109/AST.2017.6
   Petersen K, 2008, 12 INT C EV ASS SOFT, P1, DOI 10.5555/2227115.2227123
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   Prathibhan CM, 2014, 2014 INTERNATIONAL CONFERENCE ON ADVANCED COMMUNICATION CONTROL AND COMPUTING TECHNOLOGIES (ICACCCT), P1216, DOI 10.1109/ICACCCT.2014.7019292
   Puspika BN, 2015, 5TH INTERNATIONAL CONFERENCE ON ELECTRICAL ENGINEERING AND INFORMATICS 2015, P445, DOI 10.1109/ICEEI.2015.7352542
   Qin Y, 2016, J SYST SOFTWARE, V120, P70, DOI 10.1016/j.jss.2016.07.002
   Ravindranath L, 2014, MOBISYS'14: PROCEEDINGS OF THE 12TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES, P190, DOI 10.1145/2594368.2594377
   Salihu I. A., 2016, P 14 INT C ADV MOB C, P50
   San Miguel JL, 2016, MOBILE!'16: PROCEEDINGS OF THE 1ST INTERNATIONAL WORKSHOP ON MOBILE DEVELOPMENT, P43, DOI 10.1145/3001854.3001865
   Santos ID, 2017, INFORM SOFTWARE TECH, V88, P1, DOI 10.1016/j.infsof.2017.03.008
   Shabaan MM, 2017, 2017 IEEE/ACIS 15TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS (SERA), P297, DOI 10.1109/SERA.2017.7965741
   Shan ZY, 2016, ACM SIGPLAN NOTICES, V51, P864, DOI 10.1145/3022671.2984011
   She S, 2009, IEEE AUS SOFT ENGR, P121, DOI 10.1109/ASWEC.2009.17
   Silva Danilo., 2016, 24th International Symposium on the Foundations of Software Engineering (FSE), P1, DOI [10.1109/CLEI.2016.7833334, DOI 10.1109/CLEI.2016.7833334]
   Su T, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P689, DOI 10.1145/2889160.2891043
   Sun CL, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P298, DOI 10.1109/QRS.2016.41
   Takala T., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P377, DOI 10.1109/ICST.2011.11
   Tang HY, 2016, IEEE INT CONF AUTOM, P648, DOI 10.1145/2970276.2970320
   van der Merwe H, 2012, SIGSOFT SOFTW ENG NO, V37, P1, DOI DOI 10.1145/2382756.2382797
   Vilkomir S, 2015, 2ND ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS MOBILESOFT 2015, P44, DOI 10.1109/MobileSoft.2015.12
   Vilkomir S, 2014, IEEE ICST WORKSHOP, P78, DOI 10.1109/ICSTW.2014.9
   Wang P, 2014, INT CONF COMM SYST, P1161, DOI 10.1109/CSNT.2014.236
   Wen HL, 2015, P INT COMP SOFTW APP, P210, DOI 10.1109/COMPSAC.2015.80
   White M, 2015, INT C PROGRAM COMPRE, P48, DOI 10.1109/ICPC.2015.14
   Wu XY, 2016, ASIA PAC SOFWR ENG, P201, DOI 10.1109/APSEC.2016.39
   Xiujiang Li, 2014, 2014 21st Asia-Pacific Software Engineering Conference (APSEC), P27, DOI 10.1109/APSEC.2014.13
   Yang W, 2013, LECT NOTES COMPUT SC, V7793, P250, DOI 10.1007/978-3-642-37057-1_19
   Ye Hui, 2013, 11 INT C ADV MOB COM, P68
   Yeh CC, 2014, 2014 IEEE EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY - COMPANION (SERE-C 2014), P140, DOI 10.1109/SERE-C.2014.32
   Yoo H, 2017, IEEE INT CONF MOB DA, P394, DOI 10.1109/MDM.2017.71
   Yu S, 2016, MOBILE!'16: PROCEEDINGS OF THE 1ST INTERNATIONAL WORKSHOP ON MOBILE DEVELOPMENT, P41, DOI 10.1145/3001854.3001864
   Zaeem RN, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P183, DOI 10.1109/ICST.2014.31
   Zein S, 2016, J SYST SOFTWARE, V117, P334, DOI 10.1016/j.jss.2016.03.065
   Zeng X, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P987, DOI 10.1145/2950290.2983958
   Zhang AM, 2016, IEEE IPCCC
   Zhang SB, 2015, 9TH IEEE INTERNATIONAL SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING (SOSE 2015), P315, DOI 10.1109/SOSE.2015.27
   Zhang T, 2015, 9TH IEEE INTERNATIONAL SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING (SOSE 2015), P179, DOI 10.1109/SOSE.2015.35
   Zhauniarovich Y, 2015, PROCEEDINGS 10TH INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY ARES 2015, P501, DOI 10.1109/ARES.2015.70
   Zheng HB, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P253, DOI 10.1109/ICSE-SEIP.2017.32
   Zhu HW, 2015, P INT COMP SOFTW APP, P248, DOI 10.1109/COMPSAC.2015.77
NR 167
TC 34
Z9 36
U1 0
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 149
EP 201
DI 10.1007/s11219-018-9418-6
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000005
DA 2024-07-18
ER

PT J
AU Budnik, C
   Fraser, G
   Lonetti, F
   Zhu, H
AF Budnik, Christof
   Fraser, Gordon
   Lonetti, Francesca
   Zhu, Hong
TI Special issue on automation of software testing: improving practical
   applicability
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
C1 [Budnik, Christof] Siemens Corp, Architecture & Verificat Intelligent Syst Res Grp, Corp Technol, Princeton, NJ 08540 USA.
   [Fraser, Gordon] Univ Passau, Comp Sci, Passau, Germany.
   [Lonetti, Francesca] CNR, ISTI, I-56127 Pisa, Italy.
   [Zhu, Hong] Oxford Brookes Univ, Comp Sci, Oxford, England.
   [Zhu, Hong] Oxford Brookes Univ, Appl Formal Methods Res Grp, Oxford, England.
C3 Siemens AG; University of Passau; Consiglio Nazionale delle Ricerche
   (CNR); Istituto di Scienza e Tecnologie dell'Informazione "Alessandro
   Faedo" (ISTI-CNR); Oxford Brookes University; Oxford Brookes University
RP Budnik, C (corresponding author), Siemens Corp, Architecture & Verificat Intelligent Syst Res Grp, Corp Technol, Princeton, NJ 08540 USA.
EM christof.budnik@siemens.com; gordon.fraser@uni-passau.de;
   francesca.lonetti@isti.cnr.it; hzhu@brookes.ac.uk
RI Lonetti, Francesca/AAM-5813-2021; Zhu, Hong/B-3231-2011
OI Lonetti, Francesca/0000-0002-4864-2219; Zhu, Hong/0000-0001-9393-5005
CR Garousi V, 2017, IEEE SOFTWARE, V34, P90, DOI 10.1109/MS.2017.34
   Garousi V, 2016, INFORM SOFTWARE TECH, V76, P92, DOI 10.1016/j.infsof.2016.04.015
   Graham D., 2012, EXPERIENCES TEST AUT
   Raulamo-Jurvanen P., 2017, ACM SIGSOFT Software Engineering Notes, V41, P1, DOI [10.1145/3011286.3011304, DOI 10.1145/3011286.3011304]
   Thummalapenta S, 2012, PROC INT CONF SOFTW, P881, DOI 10.1109/ICSE.2012.6227131
NR 5
TC 2
Z9 2
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1415
EP 1419
DI 10.1007/s11219-018-9410-1
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400007
OA Bronze
DA 2024-07-18
ER

PT J
AU Patel, K
   Hierons, RM
AF Patel, Krishna
   Hierons, Robert M.
TI A mapping study on testing non-testable systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Software testing; Oracle problem; Non-testable; Test oracles; Mapping
   study; Survey
ID PATTERN-CLASSIFICATION APPROACH; FAULT LOCALIZATION; SOFTWARE; ORACLES;
   VERIFICATION; PROGRAM; SLICE
AB The terms Oracle Problem and Non-testable system interchangeably refer to programs in which the application of test oracles is infeasible. Test oracles are an integral part of conventional testing techniques; thus, such techniques are inoperable in these programs. The prevalence of the oracle problem has inspired the research community to develop several automated testing techniques that can detect functional software faults in such programs. These techniques include N-Version testing, Metamorphic Testing, Assertions, Machine Learning Oracles, and Statistical Hypothesis Testing. This paper presents a Mapping Study that covers these techniques. The Mapping Study presents a series of discussions about each technique, from different perspectives, e.g. effectiveness, efficiency, and usability. It also presents a comparative analysis of these techniques in terms of these perspectives. Finally, potential research opportunities within the non-testable systems problem domain are highlighted within the Mapping Study. We believe that the aforementioned discussions and comparative analysis will be invaluable for new researchers that are attempting to familiarise themselves with the field, and be a useful resource for practitioners that are in the process of selecting an appropriate technique for their context, or deciding how to apply their selected technique. We also believe that our own insights, which are embedded throughout these discussions and the comparative analysis, will be useful for researchers that are already accustomed to the field. It is our hope that the potential research opportunities that have been highlighted by the Mapping Study will steer the direction of future research endeavours.
C1 [Patel, Krishna; Hierons, Robert M.] Brunel Univ, Dept Comp Sci, Uxbridge UB8 3PH, Middx, England.
C3 Brunel University
RP Patel, K (corresponding author), Brunel Univ, Dept Comp Sci, Uxbridge UB8 3PH, Middx, England.
EM cspgkkp@brunel.ac.uk; rob.hierons@brunel.ac.uk
OI Hierons, Robert/0000-0002-4771-1446; Patel, Krishna/0000-0002-4503-0372
FU Department of Computer Science (CEDPS) at Brunel University
FX We would like to thank Professors Martin Shepperd and Tracy Hall for
   their insightful discussions on Mapping Studies. We would also like to
   express our gratitude to all of the authors of the papers that were
   processed by this Mapping Study, who assisted us through email
   correspondence. Finally, we would like to thank the reviewers for their
   helpful comments. This work was funded by the Department of Computer
   Science (CEDPS) at Brunel University.
CR Abou Assi R, 2016, SOFTW TEST VERIF REL, V26, P460, DOI 10.1002/stvr.1607
   ALFONSO LOZANO Raul, 2010, THESIS
   Androutsopoulos K, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P573, DOI 10.1145/2568225.2568314
   [Anonymous], 2005, 2nd International Conference on Electicatl Engineering/Electronics, Computer, Telecommunications, and Information Technology
   [Anonymous], P 2 INT C INF SCI EN
   [Anonymous], 2011, SOFTWARE ENG TECHNIQ
   [Anonymous], 2011, SEHC
   [Anonymous], 2012, PROC ADV COMPUT SCI
   Araujo W, 2014, IEEE T SOFTWARE ENG, V40, P971, DOI 10.1109/TSE.2014.2339829
   Arcaini P, 2013, IEEE ICST WORKSHOP, P178, DOI 10.1109/ICSTW.2013.29
   Asrafi M., 2011, Proceedings of the 2011 Fifth International Conference on Secure Software Integration and Reliability Improvement (SSIRI 2011), P147, DOI 10.1109/SSIRI.2011.21
   Atkinson C, 2011, SEARCH ENHANCED TEST
   BARESI L, 2001, CISTR0102 U OR
   Barnett-Page E, 2009, BMC MED RES METHODOL, V9, DOI 10.1186/1471-2288-9-59
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Batra G, 2011, COMM COM INF SC, V141, P180
   Brilliant S. S., 1990, Digest of Papers. Fault-Tolerant Computing: 20th International Symposium (Cat. No.90CH2877-9), P408, DOI 10.1109/FTCS.1990.89395
   Cao YX, 2013, INT CONF QUAL SOFTW, P153, DOI 10.1109/QSIC.2013.43
   Chan F., 1998, P IASTED INT C SOFTW, P191
   Chan WK, 2007, INT J WEB SERV RES, V4, P61, DOI 10.4018/jwsr.2007040103
   Chan WK, 2006, P INT COMP SOFTW APP, P429
   Chan WK, 2013, INT CONF QUAL SOFTW, P245, DOI 10.1109/QSIC.2013.16
   Chan WK, 2010, SOFTW TEST VERIF REL, V20, P89, DOI 10.1002/stvr.408
   Chan WK, 2009, J SYST SOFTWARE, V82, P422, DOI 10.1016/j.jss.2008.07.019
   Charters S., 2007, GUIDELINES PERFORMIN
   Chen Huo Yan, 1999, IEEE SMC'99 Conference Proceedings. 1999 IEEE International Conference on Systems, Man, and Cybernetics (Cat. No.99CH37028), P928, DOI 10.1109/ICSMC.1999.814216
   Chen HY, 2000, INFORM SOFTWARE TECH, V42, P677, DOI 10.1016/S0950-5849(00)00112-9
   Chen LL, 2012, 2012 6TH INTERNATIONAL CONFERENCE ON NEW TRENDS IN INFORMATION SCIENCE, SERVICE SCIENCE AND DATA MINING (ISSDM2012), P439
   Chen T., 2004, P 8 AS PAC ORCH C AP, P128
   Chen TY, 2009, 2009 14TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P23, DOI 10.1109/ICECCS.2009.28
   Chen T.Y., 2004, PROC 4 IBERO AM S SO, P569
   Chen T. Y., 1998, Technical Report hkust-cs98-01
   Chen TY, 2016, J SYST SOFTWARE, V116, P177, DOI 10.1016/j.jss.2015.07.037
   Chen TY, 2012, INT CONF QUAL SOFTW, P285, DOI 10.1109/QSIC.2012.21
   Chen TY, 2011, IEEE T SOFTWARE ENG, V37, P109, DOI 10.1109/TSE.2010.23
   Chen TY, 2009, BMC BIOINFORMATICS, V10, DOI 10.1186/1471-2105-10-24
   Chen TY, 2009, LECT NOTES COMPUT SC, V5522, P243, DOI 10.1007/978-3-642-02138-1_19
   Chen TY, 2004, ELEVENTH ANNUAL INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P94
   Chen TY, 2002, P INT COMP SOFTW APP, P327, DOI 10.1109/CMPSAC.2002.1045022
   Chen TY, 2003, INFORM SOFTWARE TECH, V45, P1, DOI 10.1016/S0950-5849(02)00129-5
   Chen TY, 2011, TESTING SOFTWARE BAS
   Clark D, 2012, INFORM PROCESS LETT, V112, P335, DOI 10.1016/j.ipl.2012.01.004
   Cruzes DS, 2011, INT SYMP EMP SOFTWAR, P275, DOI 10.1109/ESEM.2011.36
   Da Silva Fabio Q. B., 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P153, DOI 10.1109/ESEM.2013.11
   Davis M. D., 1981, P ACM 81 C, P254, DOI DOI 10.1145/800175.809889
   Delamaro ME, 2013, SOFTW TEST VERIF REL, V23, P171, DOI 10.1002/stvr.463
   Di Nardo D, 2013, IEEE INT CONF AUTOM, P540, DOI 10.1109/ASE.2013.6693111
   Ding J, 2012, P 24 INT C SOFTW ENG, P363
   Ding JH, 2011, PROD PLAN CONTROL, V22, P282, DOI 10.1080/09537287.2010.498606
   Dong GW, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P292
   Dong Guowei, 2008, Journal of Southeast University (English Edition), V24, P437
   Frounchi K, 2011, INFORM SOFTWARE TECH, V53, P1337, DOI 10.1016/j.infsof.2011.06.009
   Gagandeep, 2012, COMM COM INF SC, V306, P152
   Gore R., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P492, DOI 10.1109/ASE.2011.6100107
   Gotlieb A, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P365, DOI 10.1109/ISSRE.2003.1251058
   Gotlieb A, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P34, DOI 10.1109/CMPSAC.2003.1245319
   Guderlei R., 2007, P 4 INT WORKSHOP SOF, P46, DOI [10.1145/1295074.1295084, DOI 10.1145/1295074.1295084]
   Guderlei R, 2007, INT J SOFTW ENG KNOW, V17, P757, DOI 10.1142/S0218194007003471
   Guderlei R, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P404
   Guowei Dong, 2013, 2013 IEEE 4th International Conference on Software Engineering and Service Science (ICSESS), P193, DOI 10.1109/ICSESS.2013.6615286
   Harman M., 2013, TR0903 U SHEFF
   Higgins J, 2012, COCHRANE DB SYST REV, DOI 10.1002/14651858.ED000049
   Hoffman D., 1999, Software Testing Quality Engineering Magazine, P29
   Huang S, 2012, APPL MECH MATER, V121-126, P1961, DOI 10.4028/www.scientific.net/AMM.121-126.1961
   Hui ZW, 2013, MATH PROBL ENG, V2013, DOI 10.1155/2013/381389
   Hummel O, 2006, TECH REP
   Huo Yan Chen, 1998, ACM Transactions on Software Engineering and Methodology, V7, P250, DOI 10.1145/287000.287004
   Janjic Werner, 2011, P 3 INT WORKSH SEARC, P21, DOI [10.1145/1985429.1985435, DOI 10.1145/1985429.1985435]
   Jiang M., 2014, SEKE, P94
   Jing Chen, 2014, Journal of Software, V9, P2267, DOI 10.4304/jsw.9.9.2267-2275
   Junhua Ding, 2010, Proceedings 2010 Fourth IEEE International Conference on Secure Software Integration and Reliability Improvement (SSIRI 2010), P190, DOI 10.1109/SSIRI.2010.25
   Just R, 2011, SOFTWARE QUAL J, V19, P753, DOI 10.1007/s11219-011-9151-x
   Kamensky D, 2011, WINT SIMUL C PROC, P2798, DOI 10.1109/WSC.2011.6147984
   Kanewala U, 2014, J SOFTWARE TESTING V, P1
   Kanewala U, 2014, INFORM SOFTWARE TECH, V56, P1219, DOI 10.1016/j.infsof.2014.05.006
   Kanewala U, 2013, PROC INT SYMP SOFTW, P1, DOI 10.1109/ISSRE.2013.6698899
   Kanewala U, 2013, 2013 5TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR COMPUTATIONAL SCIENCE AND ENGINEERING (SE-CSE), P48, DOI 10.1109/SECSE.2013.6615099
   Khosla T, 2011, INT J COMPUTER SCI T, V2, P576
   Kim-Park DS, 2009, 2009 TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE-PRACTICE AND RESEARCH TECHNIQUES, TAIC PART 2009, P13, DOI 10.1109/TAICPART.2009.27
   Kim-Park DaeS., 2010, Proceedings of the First International Workshop on Software Test Output Validation, STOV '10, P5
   Kuo FC, 2010, IET SOFTW, V4, P294, DOI 10.1049/iet-sen.2009.0084
   Kuo F.-C., 2011, SAC, P1482
   Kwan Yong Sim, 2014, Journal of Software, V9, P298, DOI 10.4304/jsw.9.2.298-312
   Lei Y, 2013, INT CONF QUAL SOFTW, P212, DOI 10.1109/QSIC.2013.45
   Liu H, 2009, P IADIS INT C APPL C, P299
   Liu H, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P420, DOI 10.1145/2591062.2591109
   Liu H, 2014, IEEE T SOFTWARE ENG, V40, P4, DOI 10.1109/TSE.2013.46
   Liu H, 2012, INT CONF QUAL SOFTW, P59, DOI 10.1109/QSIC.2012.10
   Manolache LI, 2001, SOFTWARE PRACT EXPER, V31, P1211, DOI 10.1002/spe.409
   Martignoni L., 2010, P 19 INT S SOFTWARE, DOI [10.1145/1831708.1831730, DOI 10.1145/1831708.1831730]
   Mayer J, 2004, P 1 INT WORKSH SOFTW, P179
   Mayer J., 2005, Software Engineering 2005, Fachtagung des GI-Fachbereichs Softwaretechnik, P69
   Mayer J, 2006, P INT COMP SOFTW APP, P475
   McMinn P., 2009, PROC 11 ANN C GENET, P1689, DOI [10.1145/1569901.1570127, DOI 10.1145/1569901.1570127]
   Merkel R, 2011, INT J SOFTW ENG KNOW, V21, P289, DOI 10.1142/S021819401100527X
   Mingyue Jiang, 2013, 2013 IEEE 4th International Conference on Software Engineering and Service Science (ICSESS), P530, DOI 10.1109/ICSESS.2013.6615365
   Mishra KS, 2013, CUCS02213 COL U
   Monisha T.R., 2013, COMP COMM NETW TECHN, P1
   Murphy C, 2013, CUCS02313 COL U
   Murphy C, 2009, CUCS04209 COL U
   Murphy C, 2008, CUCS04908 COL U
   Murphy C., 2008, 20 INT C SOFTWARE EN, P867
   Murphy C, 2010, CUCS02710 COL U
   Murphy C, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P189
   Murphy C, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P436, DOI 10.1109/ICST.2009.19
   Nardi PA, 2011, 362 RT U SAO PAUL
   Núñez A, 2015, ANN TELECOMMUN, V70, P127, DOI 10.1007/s12243-014-0442-7
   Oliveira RAP, 2014, ADV COMPUT, V95, P113, DOI 10.1016/B978-0-12-800160-8.00003-6
   Oliveira RAP, 2011, TECH REP
   OLIVEIRA RAP, 2014, P 26 INT C SOFTW ENG, P199
   Padgham L, 2013, IEEE T SOFTWARE ENG, V39, P1230, DOI 10.1109/TSE.2013.10
   Paleari Roberto, 2010, P 19 INT S SOFTW TES, P265, DOI [10.1145/1831708.1831741, DOI 10.1145/1831708.1831741]
   Patel K, 2015, TECH REP
   Pezzè M, 2014, ADV COMPUT, V95, P1, DOI 10.1016/B978-0-12-800160-8.00001-2
   Poon PL, 2014, INFORM TECHNOL PEOPL, V27, P440, DOI 10.1108/ITP-01-2013-0004
   Popay J., A product from the ESRC methods programme Version
   Poutakidis D., 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P960
   Poutakidis D., 2009, Multi-Agent Programming: Languages, Tools and Applications, P215
   Pullum LL, 2012, 2012 ASE INTERNATIONAL CONFERENCE ON BIOMEDICAL COMPUTING (BIOMEDCOM), P62, DOI 10.1109/BioMedCom.2012.17
   Rao PF, 2013, INT CONF QUAL SOFTW, P260, DOI 10.1109/QSIC.2013.18
   Roper M, 2009, 2009 TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE-PRACTICE AND RESEARCH TECHNIQUES, TAIC PART 2009, P125, DOI 10.1109/TAICPART.2009.36
   Sadi MS, 2011, J BIOINF COMPUT BIOL, V9, P729, DOI 10.1142/S021972001100563X
   Sanchez AB, 2012, TECH REP
   Satpathy M, 2007, LECT NOTES COMPUT SC, V4454, P95
   Segura S, 2013, SA2013TR03 U SEV
   Segura S, 2011, INFORM SOFTWARE TECH, V53, P245, DOI 10.1016/j.infsof.2010.11.002
   Sevcikova H., 2006, Proceedings of the 2006 international symposium on Software testing and analysis, ISSTA'06, P215
   Shepperd M., 2013, SOFTWARE ENG, P46
   Shin Yoo, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P192, DOI 10.1109/ICSTW.2010.26
   Sim K.Y., 2013, Int. J. Innov. Manag. Technol, V4, P6
   Tao QM, 2010, ASIA PAC SOFWR ENG, P270, DOI 10.1109/APSEC.2010.39
   Tiwari S., 2011, Proceedings of the 2011 Eighth International Conference on Information Technology: New Generations (ITNG), P191, DOI 10.1109/ITNG.2011.40
   Tse TH, 2007, COMMUN ACM, V50, P78, DOI 10.1145/1278201.1278210
   Tse TH, 2000, FIRST ASIA-PACIFIC CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P89, DOI 10.1109/APAQ.2000.883782
   Tse TH, 2005, P 29 ANN INT COMP SO, P1
   Tsong Yueh Chen, 2010, 2010 Fifth International Symposium on Service Oriented System Engineering (SOSE 2010), P1, DOI 10.1109/SOSE.2010.31
   Weyuker E.J., 1980, 13th Int'l Conf on System Sciences, P44
   WEYUKER EJ, 1982, COMPUT J, V25, P465, DOI 10.1093/comjnl/25.4.465
   Wu P, 2005, P INT COMP SOFTW APP, P19
   Wu Peng, 2005, Journal of Software, V16, P1210, DOI 10.1360/jos161210
   Wujie Zheng, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P408, DOI 10.1109/ASE.2011.6100085
   Xiao-li Lu, 2010, 2010 Proceedings of 7th International Conference on Ubiquitous Intelligence & Computing and 7th International Conference on Autonomic & Trusted Computing (UIC/ATC 2010), P272, DOI 10.1109/UIC-ATC.2010.75
   Xie XY, 2011, J SYST SOFTWARE, V84, P544, DOI 10.1016/j.jss.2010.11.920
   Xie XY, 2013, INFORM SOFTWARE TECH, V55, P866, DOI 10.1016/j.infsof.2012.08.008
   Yao Y, 2013, 2013 FOURTH INTERNATIONAL CONFERENCE ON INTELLIGENT SYSTEMS DESIGN AND ENGINEERING APPLICATIONS, P488, DOI 10.1109/ISDEA.2013.516
   Zhang Jing, 2011, Journal of Electronics (China), V28, P623, DOI 10.1007/s11767-012-0743-9
   Zhang Zhen-Yu, 2009, Journal of Software, V20, P2637, DOI 10.3724/SP.J.1001.2009.00578
   Zhou Z. Q., 2004, P 8 INT S FUT SOFTW, P1
   Zhou Z. Q., 2007, TR200706 U HONG KONG
NR 149
TC 14
Z9 14
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1373
EP 1413
DI 10.1007/s11219-017-9392-4
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400006
OA Green Submitted, Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Seijas, PL
   Thompson, S
   Francisco, MA
AF Seijas, Pablo Lamela
   Thompson, Simon
   Angel Francisco, Miguel
TI Model extraction and test generation from JUnit test suites
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model inference; JUnit; Test generation; Property inference; Web
   services; Property-based testing; James; QuickCheck
ID FINITE-STATE MACHINES; BEHAVIOR
AB In this paper, we describe how to infer state machine models of systems from legacy unit test suites and how to generate new tests from those models. The novelty of our approach is to combine control dependencies and data dependencies in the same model, in contrast to most other work in this area. Combining both kinds of dependencies helps us to build more expressive models, which in turn allows us to produce smarter tests. We illustrate those techniques with real examples produced by our implementation, the James tool, designed to apply these techniques in practice to Java code and tests.
C1 [Seijas, Pablo Lamela] Univ Kent, Sch Comp, Canterbury, Kent, England.
   [Thompson, Simon] Univ Kent, Sch Comp, Log & Computat, Canterbury, Kent, England.
   [Angel Francisco, Miguel] Interoud Innovat SL, La Coruna, Spain.
C3 University of Kent; University of Kent
RP Seijas, PL (corresponding author), Univ Kent, Sch Comp, Canterbury, Kent, England.
EM pl240@kent.ac.uk; sjt@kent.ac.uk; miguel.francisco@madsgroup.org
OI Lamela Seijas, Pablo/0000-0002-1730-1219
FU European Commission [317820]
FX The authors would like to thank the European Commission for their
   support of this work through the project PROWESS,
   http://www.prowess-project.eu/, grant number 317820.
CR Androutsopoulos K, 2013, ACM COMPUT SURV, V45, DOI 10.1145/2501654.2501667
   [Anonymous], 2006, P 2006 ACM SIGPLAN W
   Arts T, 2011, ERLANG 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN ERLANG WORKSHOP, P62
   Berg T, 2006, LECT NOTES COMPUT SC, V3922, P107
   Bertolino A, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P141, DOI 10.1145/1595696.1595719
   Biermann A. W., 1976, IEEE Transactions on Software Engineering, VSE-2, P141, DOI 10.1109/TSE.1976.233812
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   Bogdanov K., 2009, STATECHUM
   Cassel S, 2016, FORM ASP COMPUT, V28, P233, DOI 10.1007/s00165-016-0355-5
   Cesarini Francesco, 2009, Erlang Programming: A Concurrent Approach to Software Development
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Dallmeier V., 2006, P 2006 INT WORKSH DY, P17, DOI DOI 10.1145/1138912.1138918
   Dupont P, 2008, APPL ARTIF INTELL, V22, P77, DOI 10.1080/08839510701853200
   Hatcliff J., 2000, Higher-Order and Symbolic Computation, V13, P315, DOI 10.1023/A:1026599015809
   Isberner M, 2015, THESIS
   Javed F., 2004, PROC ACM 42 SE C ACM, P404, DOI DOI 10.1145/986537.986635
   Lamela Seijas P, 2014, JAVA ERLANG BRIDGE
   Lang K. J., 1998, Grammatical Inference. 4th International Colloquium, ICGI-98. Proceedings, P1, DOI 10.1007/BFb0054059
   Lo D, 2011, CH CRC DATA MIN KNOW, P1
   Lorenzoli D., 2006, P INT WORKSH DYN AN, P25
   Marchetto Alessandro, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P121, DOI 10.1109/ICST.2008.22
   Naur P., 1969, ENG SOFTWARE REPORT
   Pradel M, 2009, IEEE INT CONF AUTOM, P371, DOI 10.1109/ASE.2009.60
   Seijas PL, 2016, 2016 IEEE/ACM 11TH INTERNATIONAL WORKSHOP IN AUTOMATION OF SOFTWARE TEST (AST), P8, DOI [10.1109/AST.2016.010, 10.1145/2896921.2896927]
   Shahbaz M, 2007, LECT NOTES COMPUT SC, V4581, P319
   Tip F, 1994, SURVEY PROGRAM SLICI
   Walkinshaw N, 2016, EMPIR SOFTW ENG, V21, P811, DOI 10.1007/s10664-015-9367-7
   Walkinshaw N, 2013, EMPIR SOFTW ENG, V18, P791, DOI 10.1007/s10664-012-9210-3
   Wyard P, 1993, IEE C GRAMM INF THEO, P514
NR 30
TC 4
Z9 4
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1519
EP 1552
DI 10.1007/s11219-017-9399-x
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400011
DA 2024-07-18
ER

PT J
AU Domínguez-Mayo, FJ
   García-García, JA
   Escalona, MJ
   Mejías, M
   Urbieta, M
   Rossi, G
AF Jose Dominguez-Mayo, Francisco
   Alberto Garcia-Garcia, Julian
   Jose Escalona, Maria
   Mejias, Manuel
   Urbieta, Matias
   Rossi, Gustavo
TI A framework and tool to manage Cloud Computing service quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality management; Software quality; SQA; Quality concepts; Offshore
   outsourcing; Cloud Computing
AB Cloud Computing has generated considerable interest in both companies specialized in Information and Communication Technology and business context in general. The Sourcing Capability Maturity Model for service (e-SCM) is a capability model for offshore outsourcing services between clients and providers that offers appropriate strategies to enhance Cloud Computing implementation. It intends to achieve the required quality of service and develop an effective working relationship between clients and providers. Moreover, quality evaluation framework is a framework to control the quality of any product and/or process. It offers a tool support that can generate software artifacts to manage any type of product and service efficiently and effectively. Thus, the aim of this paper was to make this framework and tool support available to manage Cloud Computing service quality between clients and providers by means of e-SCM.
C1 [Jose Dominguez-Mayo, Francisco; Alberto Garcia-Garcia, Julian; Jose Escalona, Maria; Mejias, Manuel] Univ Seville, Dept Comp Languages & Syst, Seville, Spain.
   [Urbieta, Matias; Rossi, Gustavo] UNLP, Fac Informat, LIFIA, La Plata, Buenos Aires, Argentina.
C3 University of Sevilla; National University of La Plata
RP Domínguez-Mayo, FJ (corresponding author), Univ Seville, Dept Comp Languages & Syst, Seville, Spain.
EM fjdominguez@us.es; julian.garcia@iwt2.org; mjescalona@us.es;
   risoto@us.es; murbieta@lifia.info.unlp.edu.ar;
   gustavo@lifia.info.unlp.edu.ar
RI Mejias-Risoto, Manuel/N-8708-2014; Escalona, María José/G-3900-2010;
   Rossi, Gustavo/AAE-4736-2020; García García, Julián Alberto/J-6081-2013;
   Mayo, Francisco José Domínguez/A-8121-2009
OI Mejias-Risoto, Manuel/0000-0002-0353-6391; Escalona, María
   José/0000-0002-6435-1497; García García, Julián
   Alberto/0000-0003-2680-1327; Mayo, Francisco José
   Domínguez/0000-0003-3502-8858; Urbieta, Mario Matias/0000-0002-4508-1209
FU MeGUS (Mecanismos Guiados en etapas tempranas para la Mejora de
   Software), Ministerio de Ciencia e Innovacion [TIN2013-46928-C3-3-R];
   NDTQ-Framework project of Junta de Andalucia (Spain) [TIC-5789]; FEDER
   of European Union
FX This research has been supported by the MeGUS (Mecanismos Guiados en
   etapas tempranas para la Mejora de Software), Ministerio de Ciencia e
   Innovacion (TIN2013-46928-C3-3-R), by the NDTQ-Framework project
   (TIC-5789) of Junta de Andalucia (Spain) and by the FEDER of European
   Union for financial support via project "THOT. Proyecto de innovacion de
   la gestion documental aplicada a expedientes de contratacion de
   servicios y obras de infraestructuras de transporte" of the "Programa
   Operativo FEDER de Andalucia 2007-2013''. We also thank all the Staff
   and Researches of the Regional Government of Andalucia Agency of Public
   Work for their dedication and professionalism.
CR [Anonymous], REV CLOUD COMPUTING
   Brinkkemper S, 2012, TECHNOL WORK GLOB, P1
   Buyya R, 2009, FUTURE GENER COMP SY, V25, P599, DOI 10.1016/j.future.2008.12.001
   Domínguez-Mayo FJ, 2012, INFORM SOFTWARE TECH, V54, P1265, DOI 10.1016/j.infsof.2012.06.007
   Domínguez-Mayo FJ, 2012, COMPUT STAND INTER, V34, P396, DOI 10.1016/j.csi.2012.01.004
   Dudin EB, 2011, SCI TECH INF PROCESS, V38, P280, DOI 10.3103/S0147688211040083
   Fei Hu, 2011, Journal of Computing and Information Technology - CIT, V19, P25, DOI 10.2498/cit.1001864
   Haider W., 2011, COMPUT ENG INTELL SY, V2, P206
   Hughes G., 2011, 2011 6th International Conference for Internet Technology and Secured Transactions (ICITST), P128
   *ISO, 159392007 ISOIEC
   John C.Roberts., 2011, Proceedings of the 2011 Information Security Curriculum Development Conference, InfoSecCD '11, P15, DOI [10.1145/2047456.2047458, DOI 10.1145/2047456.2047458]
   Kitchenham B., 2007, Guidelines for performing systematic literature reviews in software engineering
   Lian-xiang H. U., 2011, J LIB INFORM SCI AGR
   Marta F. C., 2011, P 6 IB C INF SYST TE
   Monaco A., 2012, A View inside the Cloud
   Nazareno F, 2010, IEEE INT C BIO BIO W, P864, DOI 10.1109/BIBMW.2010.5703948
   Rebollo O, 2012, J UNIVERS COMPUT SCI, V18, P798
   Samimi P., 2011, ISCI 2011 2011 IEEE
   Song Y, 2011, INT C COMP AID IND D, P1, DOI 10.1109/HICSS.2011.323
   Sugang Ma, 2012, Journal of Networks, V7, P305, DOI 10.4304/jnw.7.2.305-310
   Timmermans J., 2010, Proceedings of the 2010 IEEE 2nd International Conference on Cloud Computing Technology and Science (CloudCom 2010), P614, DOI 10.1109/CloudCom.2010.59
   Vats K., 2012, INT J ADV RES COMPUT, V2
   Yang H., 2009, ACIS 2009 Proceedings - 20th Australasian Conference on Information Systems, P807
   Zhao Wei, 2010, Proceedings 2010 Second International Conference on Multimedia Information Networking and Security (MINES 2010), P324, DOI 10.1109/MINES.2010.75
NR 24
TC 6
Z9 8
U1 0
U2 29
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2015
VL 23
IS 4
BP 595
EP 625
DI 10.1007/s11219-014-9248-0
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CU1CN
UT WOS:000363257000003
DA 2024-07-18
ER

PT J
AU Poon, PL
   Tse, TH
   Tang, SF
   Kuo, FC
AF Poon, Pak-Lok
   Tse, T. H.
   Tang, Sau-Fun
   Kuo, Fei-Ching
TI Contributions of tester experience and a checklist guideline to the
   identification of categories and choices for software testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Black-box testing; Choice relation framework; Classification-tree
   methodology; Software testing
ID SPECIFICATION; FRAMEWORK; STRATEGY
AB An early step for most black-box testing methods is to identify a set of categories and choices (or their equivalents) from the specification. The identification is often performed in an ad hoc manner, thus the quality of categories and choices is in doubt. Poorly identified categories and choices will affect the comprehensiveness of test cases. In this paper, we describe several comparative studies using three commercial specifications and discuss the major results. The objectives of our studies are (a) to investigate the differences in the types and amounts of mistakes made between inexperienced and experienced software testers in an ad hoc identification approach and (b) to determine the extent of mistake reduction after discussing the mistakes with the software testers and providing them with an identification checklist.
C1 [Poon, Pak-Lok] Hong Kong Polytech Univ, Sch Accounting & Finance, Kowloon, Hong Kong, Peoples R China.
   [Tse, T. H.] Univ Hong Kong, Dept Comp Sci, Pokfulam, Hong Kong, Peoples R China.
   [Tang, Sau-Fun; Kuo, Fei-Ching] Swinburne Univ Technol, Fac Informat & Commun Technol, Hawthorn, Vic 3122, Australia.
C3 Hong Kong Polytechnic University; University of Hong Kong; Swinburne
   University of Technology
RP Poon, PL (corresponding author), Hong Kong Polytech Univ, Sch Accounting & Finance, Kowloon, Hong Kong, Peoples R China.
EM afplpoon@inet.polyu.edu.hk; thtse@cs.hku.hk;
   s.tang6@pgrad.unimelb.edu.au; dkuo@swin.edu.au
RI Tse, T.H./C-6590-2008; Poon, Pak-Lok/ADQ-5493-2022
OI Tse, T.H./0000-0002-0460-8377; POON, Pak Lok/0000-0003-2840-2418
FU Research Grants Council of Hong Kong [717308]; Australian Research
   Council [DP09847600]; Hong Kong Polytechnic University [1-ZV2H]
FX We are grateful to the 16 anonymous software practitioners for their
   invaluable time and effort in participating in the studies. We are also
   grateful to the associate editor and the two reviewers for their
   constructive comments of the paper. This work is supported in part by
   the General Research Fund of the Research Grants Council of Hong Kong
   (project no. 717308), a Discovery Grant of the Australian Research
   Council (project no. DP09847600), and a Departmental General Research
   Fund of The Hong Kong Polytechnic University (project no. 1-ZV2H)
CR AMLA N, 1992, COMPASS 92 : PROCEEDINGS OF THE SEVENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P3, DOI 10.1109/CMPASS.1992.235766
   [Anonymous], 1995, The Capability Maturity Model: Guidelines for Improving the Software Process
   [Anonymous], REAL WORLD RES RESOU
   [Anonymous], 1990, Software testing techniques {
   BACHE R, 1990, SOFTWARE ENG J, V5, P86, DOI 10.1049/sej.1990.0011
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Cain A, 2004, LECT NOTES COMPUT SC, V3026, P225
   Carver JC, 2008, IEEE T SOFTWARE ENG, V34, P800, DOI 10.1109/TSE.2008.49
   Chen TY, 2005, QSIC 2005: Fifth International Conference on Quality Software, Proceedings, P55
   Chen TY, 2004, INFORM SOFTWARE TECH, V46, P887, DOI 10.1016/j.infsof.2004.03.005
   Chen TY, 2003, IEEE T SOFTWARE ENG, V29, P577, DOI 10.1109/TSE.2003.1214323
   Chen TY, 2000, INT J SOFTW ENG KNOW, V10, P647, DOI 10.1142/S0218194000000353
   CHEN TY, 1998, IS AUDIT CONTROL J, V5, P31
   DALARIVA C, 2006, P INT C SOFTW ENG AD
   Grochtmann M., 1993, Software Testing, Verification and Reliability, V3, P63, DOI 10.1002/stvr.4370030203
   Grottke M, 2007, COMPUTER, V40, P107, DOI 10.1109/MC.2007.55
   Hartmann J, 2005, INNOV SYST SOFTW ENG, V1, P12, DOI 10.1007/s11334-005-0006-0
   Hierons RM, 2003, LECT NOTES COMPUT SC, V2651, P388
   LaMacchia B, 2007, LECT NOTES COMPUT SC, V4784, P1
   Lau MF, 2005, ACM T SOFTW ENG METH, V14, P247, DOI 10.1145/1072997.1072998
   Lei Y, 1998, THIRD IEEE INTERNATIONAL HIGH-ASSURANCE SYSTEMS ENGINEERING SYMPOSIUM, PROCEEDINGS, P254, DOI 10.1109/HASE.1998.731623
   MILLER KW, 1992, IEEE T SOFTWARE ENG, V18, P33, DOI 10.1109/32.120314
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   National Research Council, 1991, COMP RISK SAF COMP I
   NEUMANN PG, 1991, SYSTEMS INTEGRITY SO, P5
   OSTRAND TJ, 1988, COMMUN ACM, V31, P676, DOI 10.1145/62959.62964
   Perry W.E., 2006, EFFECTIVE METHODS SO, VThird
   Poon PL, 2010, COMMUN ACM, V53, P113, DOI 10.1145/1721654.1721687
   Porter AA, 1997, IEEE T SOFTWARE ENG, V23, P129, DOI 10.1109/32.585501
   Sanders J., 1994, SOFTWARE QUALITY FRA
   Shepard T, 2001, COMMUN ACM, V44, P103, DOI 10.1145/376134.376180
   Singh H, 1997, FIRST IEEE INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P81, DOI 10.1109/ICFEM.1997.630406
   Tai KC, 2002, IEEE T SOFTWARE ENG, V28, P109, DOI 10.1109/32.979992
   Tai KC, 1996, IEEE T SOFTWARE ENG, V22, P552, DOI 10.1109/32.536956
   Tichy WF, 1998, COMPUTER, V31, P32, DOI 10.1109/2.675631
   WORDSWORTH J, 1992, INT COMPUTER SCI SER
   Yu YT, 2001, INT J SOFTW ENG KNOW, V11, P113, DOI 10.1142/S0218194001000475
NR 37
TC 15
Z9 19
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2011
VL 19
IS 1
SI SI
BP 141
EP 163
DI 10.1007/s11219-010-9109-4
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TY
UT WOS:000286465500007
OA Green Published, hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Alshraideh, M
   Bottaci, L
   Mahafzah, BA
AF Alshraideh, Mohammad
   Bottaci, Leonardo
   Mahafzah, Basel A.
TI Using program data-state scarcity to guide automatic test data
   generation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automatic test data generation; Search-based testing; Data state
   scarcity; Data state sampling; Fitness function
ID SOFTWARE; TESTABILITY
AB Finding test data to cover structural test coverage criteria such as branch coverage is largely a manual and hence expensive activity. A potential low cost alternative is to generate the required test data automatically. Search-based test data generation is one approach that has attracted recent interest. This approach is based on the definition of an evaluation or cost function that is able to discriminate between candidate test cases with respect to achieving a given test goal. The cost function is implemented by appropriate instrumentation of the program under test. The candidate test is then executed on the instrumented program. This provides an evaluation of the candidate test in terms of the "distance'' between the computation achieved by the candidate test and the computation required to achieve the test goal. Providing the cost function is able to discriminate reliably between candidate tests that are close or far from covering the test goal and the goal is feasible, a search process is able to converge to a solution, i.e., a test case that satisfies the coverage goal. For some programs, however, an informative cost function is difficult to define. The operations performed by these programs are such that the cost function returns a constant value for a very wide range of inputs. A typical example of this problem arises in the instrumentation of branch predicates that depend on the value of a Boolean-valued (flag) variable although the problem is not limited to programs that contain flag variables. Although methods are known for overcoming the problems of flag variables in particular cases, the more general problem of a near constant cost function has not been tackled. This paper presents a new heuristic for directing the search when the cost function at a test goal is not able to differentiate between candidate test inputs. The heuristic directs the search toward test cases that produce rare or scarce data states. Scarce inputs for the cost function are more likely to produce new cost values. The proposed method is evaluated empirically for a number of example programs for which existing methods are inadequate.
C1 [Alshraideh, Mohammad; Mahafzah, Basel A.] Univ Jordan, Dept Comp Sci, Amman 11942, Jordan.
   [Bottaci, Leonardo] Univ Hull, Dept Comp Sci, Kingston Upon Hull HU6 7RX, N Humberside, England.
C3 University of Jordan; University of Hull
RP Alshraideh, M (corresponding author), Univ Jordan, Dept Comp Sci, Amman 11942, Jordan.
EM mshridah@ju.edu.jo; L.Bottaci@hull.ac.uk; b.mahafzah@ju.edu.jo
RI Mahafzah, Basel/D-1296-2015; Alshraideh, Mohammad A/C-8113-2015;
   Mahafzah, Basel A./E-1203-2018
OI Mahafzah, Basel/0000-0003-3979-1076; Alshraideh, Mohammad
   A/0000-0002-2724-9290; Mahafzah, Basel A./0000-0003-3979-1076
CR Alshraideh M, 2006, SOFTW TEST VERIF REL, V16, P175, DOI 10.1002/stvr.354
   [Anonymous], P 7 INT C HYBR INT S
   [Anonymous], 1987, P 2 INT C GENETIC AL
   [Anonymous], 1982, THESIS U MICHIGAN AN
   [Anonymous], 1998, GENETIC PROGRAMMING
   Baresel A., 2004, Proceedings of the International Symposium on Software Testing and Analysis, P108, DOI DOI 10.1145/1007512.1007527
   Bottaci L, 2003, LECT NOTES COMPUT SC, V2724, P2455
   BOTTACI L, 2005, P UK SOFTW TEST WORK, P151
   Bottaci L., 2002, P GENETIC EVOLUTIONA, P1337
   Bueno P. M., 2007, P 2 INT WORKSH RAND, P10
   Chen TY, 2010, J SYST SOFTWARE, V83, P60, DOI 10.1016/j.jss.2009.02.022
   Collins R., 1991, PROC 4 INTNATL C GEN, P249
   COWARD PD, 1991, INFORM SOFTWARE TECH, V33, P53, DOI 10.1016/0950-5849(91)90024-6
   Davis L., 1991, Handbook of Genetic Algorithms
   de Halleux J, 2008, LECT NOTES COMPUT SC, V4966, P171
   DEB K, 1989, PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON GENETIC ALGORITHMS, P42
   deJong E., 2001, PROC GECCO 01, P11
   DEJONG LA, 1975, THESIS U MICHIGAN AN
   DURAN JW, 1984, IEEE T SOFTWARE ENG, V10, P438, DOI 10.1109/TSE.1984.5010257
   Ferguson R., 1996, ACM Transactions on Software Engineering and Methodology, V5, P63, DOI 10.1145/226155.226158
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Harman M, 2004, IEEE T SOFTWARE ENG, V30, P3, DOI 10.1109/TSE.2004.1265732
   HARMAN M, 2002, P GEN EV COMP C GECC, P1351
   James M., 1967, PROC BERKELEY S MATH, V1, P281, DOI DOI 10.1007/S11665-016-2173-6
   Jones BF, 1996, SOFTWARE ENG J, V11, P299, DOI 10.1049/sej.1996.0040
   KEIJZER M, 1996, ADV GENETIC PROGRAMM, V2, P259
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   Korel B, 2005, 16TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P245, DOI 10.1109/ISSRE.2005.16
   KOZA JR, 1994, STAT COMPUT, V4, P87, DOI 10.1007/BF00175355
   Malaiya YK, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/ISSRE.1995.497647
   Mattiussi C, 2004, EVOL COMPUT, V12, P495, DOI 10.1162/1063656043138923
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   MCMINN P., 2006, Proceedings of the 2006 international symposium on Software testing and analysis, P13, DOI [10.1145/1146238.1146241, DOI 10.1145/1146238.1146241]
   OReilly UM, 1997, IEEE SYS MAN CYBERN, P4092, DOI 10.1109/ICSMC.1997.637337
   ROPER M, 1997, P 10 INT SOFTW QUAL, P27
   Rosea J.P., 1995, P WORKSHOP GENETIC P, P23
   Smite D, 2008, 2008 3RD IEEE INTERNATIONAL CONFERENCE GLOBAL SOFTWARE ENGINEERING, PROCEEDINGS, P173, DOI 10.1109/ICGSE.2008.22
   VOAS JM, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.382180
   Wappler S, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P23, DOI 10.1109/TAIC.PART.2007.25
   Wegener J, 2001, INFORM SOFTWARE TECH, V43, P841, DOI 10.1016/S0950-5849(01)00190-2
   Wu SH, 2008, VLSI DES, DOI 10.1155/2008/165709
NR 41
TC 12
Z9 13
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2010
VL 18
IS 1
BP 109
EP 144
DI 10.1007/s11219-009-9083-x
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 546JH
UT WOS:000273806600006
DA 2024-07-18
ER

PT J
AU Kollanus, S
AF Kollanus, Sami
TI Experiences from using ICMM in inspection process assessment
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software inspection; Maturity model; Inspection Capability Maturity
   Model (ICMM)
AB Inspection Capability Maturity Model (ICMM) is a new tool for the assessment and improvement of software inspection practices in an organization. This paper presents the first experiences in using ICMM. The model structure and usability is evaluated based on the data collected from eight case organizations. The major findings support the conclusion that ICMM worked well in identifying weaknesses in the current inspection practices. First, the perceived inspection quality in the organizations was compared with the assessment results. Second, the identified weaknesses appear to be related to the problems faced in inspection practices. Finally, the collected experiences provided some useful improvement suggestions for ICMM.
C1 Univ Jyvaskyla, Dept Comp Sci & Informat Syst, Jyvaskyla 40014, Finland.
C3 University of Jyvaskyla
RP Kollanus, S (corresponding author), Univ Jyvaskyla, Dept Comp Sci & Informat Syst, POB 35 Agora, Jyvaskyla 40014, Finland.
EM sami.kollanus@jyu.fi
CR [Anonymous], P IASTED INT C SOFTW
   [Anonymous], P 8 EUR C SOFTW MAIN
   [Anonymous], SOFTWARE QUALITY PRO
   BASILI VR, 1987, IEEE T SOFTWARE ENG, V13, P1278, DOI 10.1109/TSE.1987.232881
   Ciolkowski M, 2003, IEEE SOFTWARE, V20, P46, DOI 10.1109/MS.2003.1241366
   DOOLAN EP, 1992, SOFTWARE PRACT EXPER, V22, P173, DOI 10.1002/spe.4380220205
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Gilb Tom, 1993, Software inspections
   GRADY RB, 1994, IEEE SOFTWARE, V11, P46, DOI 10.1109/52.300084
   HARJUMAA L, 2001, P AS PAC C QUAL SOFT
   Johnson PM, 1998, COMMUN ACM, V41, P49, DOI 10.1145/269012.269020
   Kerzner Harold., 2002, Strategic Planning for Project Management using a Project Management Maturity Model
   Kollanus S, 2005, LECT NOTES COMPUT SC, V3547, P429
   Kollanus S, 2006, LECT NOTES COMPUT SC, V4034, P377
   McGarry F, 2002, IEEE SOFTWARE, V19, P87, DOI 10.1109/MS.2002.1049397
   Porter A., 1998, Empirical Software Engineering, V3, P355, DOI 10.1023/A:1009776104355
   Porter AA, 1997, IEEE T SOFTWARE ENG, V23, P129, DOI 10.1109/32.585501
   RUSSELL GW, 1991, IEEE SOFTWARE, V8, P25, DOI 10.1109/52.62929
   *SEI, 2006, CAP MAT MOD INT VERS
NR 19
TC 4
Z9 5
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2009
VL 17
IS 2
BP 177
EP 187
DI 10.1007/s11219-008-9067-2
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 428YB
UT WOS:000264886900005
DA 2024-07-18
ER

PT J
AU Caro, A
   Calero, C
   Caballero, I
   Piattini, M
AF Caro, Angelica
   Calero, Coral
   Caballero, Ismael
   Piattini, Mario
TI A proposal for a set of attributes relevant for Web portal data quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Data quality; Web portal; Data quality attributes; Data consumer
ID INFORMATION
AB Data Quality is a critical issue in today's interconnected society. Advances in technology are making the use of the Internet an ever-growing phenomenon and we are witnessing the creation of a great variety of applications such as Web Portals. These applications are important data sources and/or means of accessing information which many people use to make decisions or to carry out tasks. Quality is a very important factor in any software product and also in data. As quality is a wide concept, quality models are usually used to assess the quality of a software product. From the software point of view there is a widely accepted standard proposed by ISO/IEC (the ISO/IEC 9126) which proposes a quality model for software products. However, until now a similar proposal for data quality has not existed. Although we have found some proposals of data quality models, some of them working as "de facto" standards, none of them focus specifically on web portal data quality and the user's perspective. In this paper, we propose a set of 33 attributes which are relevant for portal data quality. These have been obtained from a revision of literature and a validation process carried out by means of a survey. Although these attributes do not conform to a usable model, we think that it might be considered as a good starting point for constructing one.
C1 [Caro, Angelica] Univ Bio Bio, Dept Comp Sci & Informat Technol, Chillan, Chile.
   [Calero, Coral; Caballero, Ismael; Piattini, Mario] Univ Castilla La Mancha, Alarcos Res Grp, Informat Syst & Technol Dept, E-13071 Ciudad Real, Spain.
C3 Universidad del Bio-Bio; Universidad de Castilla-La Mancha
RP Caro, A (corresponding author), Univ Bio Bio, Dept Comp Sci & Informat Technol, Chillan, Chile.
EM mcaro@ubiobio.cl; Coral.Calero@uclm.es; Ismael.Caballero@uclm.es;
   Mario.Piattini@uclm.es
RI Piattini, Mario/F-6271-2013; Caballero, Ismael/A-1079-2010; Calero,
   Coral/D-4319-2011; Caro, Angelica/R-3631-2017
OI Piattini, Mario/0000-0002-7212-8279; Caballero,
   Ismael/0000-0002-5189-1427; Calero, Coral/0000-0003-0728-4176; Caro,
   Angelica/0000-0002-2066-7131
FU Direccion General de Investigacion del Ministerio de Ciencia y
   Tecnologia (Spain) [TIC2006-15175-C05-05]; Ministerio de Educacion y
   Ciencia (Spain) [TIN20005-24055-E]; FEDER [PBC-05-012-1]; "Consejeria de
   Educacion y Ciencia, Junta de Comunidades de Castilla-La Mancha"
   (Spain); CYTED [506AC0287]
FX This research is part of the following projects: ESFINGE
   (TIC2006-15175-C05-05) granted by the Direccion General de Investigacion
   del Ministerio de Ciencia y Tecnologia (Spain), CALIPSO
   (TIN20005-24055-E) supported by the Ministerio de Educacion y Ciencia
   (Spain), DIMENSIONS (PBC-05-012-1) supported by FEDER and by the
   "Consejeria de Educacion y Ciencia, Junta de Comunidades de Castilla-La
   Mancha" (Spain) and COMPETISOFT (506AC0287) financed by CYTED.
CR ABOELMEGED M, 2000, 5 C INF QUAL, P318
   [Anonymous], 2004, PROCEDURES PERFORMIN
   [Anonymous], 9 INT SOFTW METR S M
   [Anonymous], 2014, Software engineering: a practitioner's approach
   Bouzeghoub M., 2004, P 2004 INT WORKSHOP, P59, DOI [DOI 10.1145/1012453.1012464, 10.1145/1012453.1012464]
   BOUZEGHOUB M, 2001, INFORM DATABASE QUAL
   Burgess M.S. E., 2004, 9 INT C INFORM QUALI, P373
   Cappiello C., 2004, IQIS, P68, DOI [DOI 10.1145/1012453.1012465, 10.1145/1012453.1012465]
   Caro A., 2005, IADIS International Conference WWW/Internet, V2, P364
   Carol A, 2006, LECT NOTES COMPUT SC, V4255, P363
   COLLINS H, 2001, CORPORATE PORTAL DEF
   EPPLER M, 2003, 8 INT C INF QUAL, P108
   Eppler M.J., 2002, P 7 INT C INFORM QUA, P187
   Eppler M.J., 2001, Proc. sixth international conference on information quality, P329
   Fugini M., 2002, Data quality in cooperative web information systems
   GERTZ M, 2004, SIGMOD REC, V33, P127
   GRAEFE G, 2003, 8 INT C INF QUAL, P133
   Host M., 2000, Empirical Software Engineering, V5, P201, DOI 10.1023/A:1026586415054
   KATERATTANAKUL P, 2001, INFORM DATABASE QUAL, P45
   Katerattanakul P., 1999, 21 ICIS P, P279
   Kitchenham B., 2002, SOFTWARE ENG NOTES, V27, P18
   Kitchenharn B., 2003, Software Engineering Notes, V28, P24, DOI 10.1145/638750.638758
   KNIGHT SA, 2005, INFORM SCI J, V8, P159
   KOPCSO D, 2000, 5 INT C INF QUAL, P97
   Krosnick JA, 1999, ANNU REV PSYCHOL, V50, P537, DOI 10.1146/annurev.psych.50.1.537
   Lee YW, 2002, INFORM MANAGE-AMSTER, V40, P133, DOI 10.1016/S0378-7206(02)00043-5
   MAHDAVI M, 2004, P 15 C AUSTR DAT, V27, P181
   Marchetti C, 2003, FOURTH INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS ENGINEERING, PROCEEDINGS, P329
   MELKAS H, 2004, 9 INT C INF QUAL, P74
   Moraga A, 2006, ONLINE INFORM REV, V30, P555, DOI 10.1108/14684520610706424
   MOUSTAKIS V, 2004, 9 INT C INF QUAL, P59
   NAUMANN F, 2000, 5 C INF QUAL CAMBR M, P148
   Nelson RR, 2005, J MANAGE INFORM SYST, V21, P199, DOI 10.1080/07421222.2005.11045823
   PERNICI B, 2002, 21 INT C CONC MOD, P397
   Pfleeger S.L., 2001, SIGSOFT Softw. Eng. Notes., V26, P16, DOI [10.1145/505532.505535, DOI 10.1145/505532.505535]
   Redman T., 2000, DATA QUALITY FIELD G
   REEVES CA, 1994, ACAD MANAGE REV, V19, P419, DOI 10.2307/258934
   Strong DM, 1997, COMMUN ACM, V40, P103, DOI 10.1145/253769.253804
   Wang R. Y., 1996, Journal of Management Information Systems, V12, P5
   Winkler WE, 2004, INFORM SYST, V29, P531, DOI 10.1016/j.is.2003.12.003
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Yang Z., 2004, INFORM MANAGE, V42, P575
   ZHU Y, 2002, 3 INT C WEB INF SYST, P149
NR 43
TC 39
Z9 45
U1 2
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2008
VL 16
IS 4
BP 513
EP 542
DI 10.1007/s11219-008-9046-7
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 379QY
UT WOS:000261412500004
DA 2024-07-18
ER

PT J
AU Abran, A
   Khelifi, A
   Suryn, W
   Seffah, A
AF Abran, A
   Khelifi, A
   Suryn, W
   Seffah, A
TI Usability meanings and interpretations in ISO standards
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT International Software Quality Management Conference
CY APR, 2003
CL GLASGOW, SCOTLAND
SP British Comp Soc
DE software usability; software measures; usability; ISO 9126; ISO 9241;
   software quality; usability models
AB The usability of a software product has recently become a key software quality factor. The International Organization for Standardization (ISO) has developed a variety of models to specify and measure software usability but these individual models do not support all usability aspects. Furthermore, they are not yet well integrated into current software engineering practices and lack tool support. The aim of this research is to survey the actual representation (meanings and interpretations) of usability in ISO standards, indicate some of existing limitations and address them by proposing an enhanced, normative model for the evaluation of software usability.
C1 Ecole Technol Super, Montreal, PQ, Canada.
   Concordia Univ, Human Ctr Software Engn Grp, Montreal, PQ, Canada.
C3 University of Quebec; Ecole de Technologie Superieure - Canada;
   Concordia University - Canada
RP Abran, A (corresponding author), Ecole Technol Super, Montreal, PQ, Canada.
RI Abran, Alain/I-2493-2016
OI Abran, Alain/0000-0003-2670-9061
CR [Anonymous], 1999, 13407 ISO
   [Anonymous], 1993, Usability Engineering
   [Anonymous], 1994, Human-Computer Interaction
   [Anonymous], P 6 INT C HUM COMP I
   [Anonymous], 2001, StandardISO/IEC9126
   BEVAN N, 2001, PROPOSED STANDARD CO
   BEVAN N, 1997, EAGLES EV GROUP WORK
   Bevan N., 1991, P 4 INT C HCI
   Boehm B.W., 1978, Characteristics of Software Quality
   Dix A, 2004, HUM-COMPUT INTERACT
   *FAA, 1998, STAND TERM AUT REPL
   Gilb T, 1996, IEEE SOFTWARE, V13, P97, DOI 10.1109/52.476291
   Gore Al, 1998, COMMON GROUND, V8, P1
   HYATT LE, 1996, SOFTW PROD ASS WORKS
   *ISO, 1992, 9241 ISO
   *ISO IEC, 2001, 14598 ISOIEC
   *ISO TR, 2000, 18529 ISO TR
   Jones C., 1997, Software Quality Analysis and Guidelines for Success, P492
   Jordan P. W., 1996, Industry
   *KANBRIEF, 1998, KOMM ARB NORM
   Schneiderman Ben., 1998, Designing the User Interface, VThird
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   WIXON D, 1997, HDB HUMAN COMPUTER I, P665
NR 23
TC 215
Z9 266
U1 3
U2 25
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD NOV
PY 2003
VL 11
IS 4
BP 325
EP 338
DI 10.1023/A:1025869312943
PG 14
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 724YV
UT WOS:000185516600006
DA 2024-07-18
ER

PT J
AU Schach, SR
   Jin, B
   Wright, DR
   Heller, GZ
   Offutt, J
AF Schach, SR
   Jin, B
   Wright, DR
   Heller, GZ
   Offutt, J
TI Quality impacts of clandestine common coupling
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE clandestine coupling; common coupling; coupling; dependencies; Linux;
   open-source software
ID SYSTEM
AB The increase in maintenance of software and the increased amounts of reuse are having major positive impacts on the quality of software, but are also introducing some rather subtle negative impacts on the quality. Instead of talking about existing problems (faults), developers now discuss "potential problems," that is, aspects of the program that do not affect the quality initially, but could have deleterious consequences when the software goes through some maintenance or reuse. One type of potential problem is that of common coupling, which unlike other types of coupling can be clandestine. That is, the number of instances of common coupling between a module M and the other modules can be changed without any explicit change to M. This paper presents results from a study of clandestine common coupling in 391 versions of Linux. Specifically, the common coupling between each of 5332 kernel modules and the rest of the product as a whole was measured. In more than half of the new versions, a change in common coupling was observed, even though none of the modules themselves was changed. In most cases where this clandestine common coupling was observed, the number of instances of common coupling increased. These results provide yet another reason for discouraging the use of common coupling in software products.
C1 George Mason Univ, Dept Informat & Software Engn, Fairfax, VA 22030 USA.
   Vanderbilt Univ, Dept Elect Engn & Comp Sci, Nashville, TN USA.
   Macquarie Univ, Dept Stat, Sydney, NSW 2109, Australia.
C3 George Mason University; Vanderbilt University; Macquarie University
RP George Mason Univ, Dept Informat & Software Engn, Fairfax, VA 22030 USA.
EM srs@vuse.vanderbilt.edu; bo.jin@vanderbilt.edu;
   davidwrightnyc@hotmail.com; gheller@efs.mq.edu.au; ofut@ise.gmu.edu
OI Heller, Gillian/0000-0003-1270-1499
CR Binkley AB, 1998, PROC INT CONF SOFTW, P452, DOI 10.1109/ICSE.1998.671604
   Briand LC, 1998, FIFTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 1998, PROCEEDINGS, P246, DOI 10.1109/METRIC.1998.731251
   KAFURA D, 1981, J SYST SOFTWARE, V2, P121, DOI 10.1016/0164-1212(81)90032-7
   OFFUTT AJ, 1993, J SYST SOFTWARE, V20, P295, DOI 10.1016/0164-1212(93)90072-6
   Page-Jones M., 1980, The practical guide to structured systems design
   Schach StephenR., 2002, Object-oriented and classical software engineering
   SELBY RW, 1991, IEEE T SOFTWARE ENG, V17, P141, DOI 10.1109/32.67595
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   TROY DA, 1981, J SYST SOFTWARE, V2, P113, DOI 10.1016/0164-1212(81)90031-5
   WULF W, 1973, SIGPLAN NOTICES, V8, P28, DOI DOI 10.1145/953353.953355
   2000, WHAT IS LINUX LINUX
NR 11
TC 14
Z9 15
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUL
PY 2003
VL 11
IS 3
BP 211
EP 218
DI 10.1023/A:1025114726917
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711KA
UT WOS:000184737100003
DA 2024-07-18
ER

PT J
AU Shukla, S
   Kumar, S
AF Shukla, Suyash
   Kumar, Sandeep
TI Towards ensemble-based use case point prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Effort estimation; Issue reports; Regression techniques; Story points
ID MEAN ABSOLUTE ERROR; SOFTWARE; METRICS; MODEL
AB Early-stage software effort estimation (SEE) is crucial for successfully completing any software project since it helps in project bidding and efficient resource allocation. Most SEE models consider software size as a key metric for estimating effort. Consequently, software size becomes vital for early-stage SEE. Recently, use case points (UCP), derived from use case diagrams, gained popularity among the research community. The researchers used different classical and learning models for UCP prediction. Although learning models performed better than the classical models, it is difficult to conclude which learning model is superior. Ensembling is considered one probable solution when the individual models are not performing well. However, the ensemble models are not explored for UCP prediction till now. Motivated by this, the current work presents an ensemble-based framework for UCP prediction and investigates different ensemble models. We conducted an experimental analysis over two publicly available UCP estimation datasets by implementing different ensemble models. The results show that the ensemble models outperformed the base learners used in this work. Further, we compared the best performing ensemble learner with the existing UCP prediction models in the literature and found an improvement in UCP prediction performance.
C1 [Shukla, Suyash; Kumar, Sandeep] Indian Inst Technol Roorkee, Dept Comp Sci & Engn, Roorkee, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Roorkee
RP Kumar, S (corresponding author), Indian Inst Technol Roorkee, Dept Comp Sci & Engn, Roorkee, India.
EM suyashshukla2811@gmail.com; sandeep.garg@cs.iitr.ac.in
RI Kumar, Dr Sandeep/AAW-6313-2020
OI Kumar, Dr Sandeep/0000-0003-0747-6776
CR Ali A, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2211
   [Anonymous], 2008, 11 INT C QUAL ENG SO
   Azzeh M, 2021, SOFTWARE QUAL J, V29, P309, DOI 10.1007/s11219-021-09547-0
   Azzeh M, 2021, SCI COMPUT PROGRAM, V204, DOI 10.1016/j.scico.2020.102596
   Azzeh M, 2018, 2018 17TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P1427, DOI 10.1109/ICMLA.2018.00232
   Badri M, 2017, INNOV SYST SOFTW ENG, V13, P143, DOI 10.1007/s11334-016-0285-7
   Braz MR, 2006, P INT COMP SOFTW APP, P221
   Dietterich TG, 2000, LECT NOTES COMPUT SC, V1857, P1, DOI 10.1007/3-540-45014-9_1
   Fan GS, 2019, ASIA PAC SOFWR ENG, P244, DOI 10.1109/APSEC48747.2019.00041
   Gautam SS, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1983
   Pham H, 2019, COMPUT INTELL-US, V35, P184, DOI 10.1111/coin.12198
   Nhung HLTK, 2019, ADV INTELL SYST COMP, V1046, P484, DOI 10.1007/978-3-030-30329-7_44
   Ho T.K., 2002, Hybrid Methods in Pattern Recognition, P171, DOI DOI 10.1142/9789812778147_0007
   Iraji M.S., 2012, INT J INTELLIGENT SY, V4, P14, DOI [DOI 10.5815/IJISA.2012.06.02, 10.5815/ijisa.2012.06.02]
   Johnson K, 2020, TRUMPS PROMISED OIL
   Karner G., 1993, OBJECTIVE SYSTEMS SF, V17, P1
   Kim HC, 2003, PATTERN RECOGN, V36, P2757, DOI 10.1016/S0031-3203(03)00175-4
   Kirmani MM, 2015, INT J ADV COMPUT SC, V6, P65
   Kocaguneli E, 2013, J SYST SOFTWARE, V86, P1879, DOI 10.1016/j.jss.2013.02.053
   Krauss C, 2017, EUR J OPER RES, V259, P689, DOI 10.1016/j.ejor.2016.10.031
   Langdon WB, 2016, INFORM SOFTWARE TECH, V73, P16, DOI 10.1016/j.infsof.2016.01.003
   Lavazza L., 2010, P 2010 ACM IEEE INT, P1, DOI DOI 10.1145/1868328.1868338
   Lee J, 2011, IEEE INT CONF FUZZY, P2702
   Mendes-Moreira J, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379786
   Mohagheghi P, 2005, PROC INT CONF SOFTW, P303
   Nassif AB, 2013, J SYST SOFTWARE, V86, P144, DOI 10.1016/j.jss.2012.07.050
   Nassif AB, 2011, PROC INT C TOOLS ART, P393, DOI 10.1109/ICTAI.2011.64
   Neill CJ, 2003, IEEE SOFTWARE, V20, P40, DOI 10.1109/MS.2003.1241365
   Ochodek M, 2011, INFORM SOFTWARE TECH, V53, P200, DOI 10.1016/j.infsof.2010.10.005
   Prokopova Z, 2017, ADV INTELL SYST, V575, P479, DOI 10.1007/978-3-319-57141-6_51
   Rathore SS, 2021, APPL INTELL, V51, P3615, DOI 10.1007/s10489-020-01935-6
   Rathore SS, 2017, KNOWL-BASED SYST, V119, P232, DOI 10.1016/j.knosys.2016.12.017
   Robiolo G, 2009, INT SYMP EMP SOFTWAR, P423
   Sagi O, 2018, WIRES DATA MIN KNOWL, V8, DOI 10.1002/widm.1249
   Seo YS, 2013, EMPIR SOFTW ENG, V18, P659, DOI 10.1007/s10664-012-9207-y
   Sewell M., 2008, Ensemble Learning. RN, V11, P1
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   Silhavy R, 2018, INFORM SOFTWARE TECH, V97, P1, DOI 10.1016/j.infsof.2017.12.009
   Silhavy R, 2017, ADV INTELL SYST, V575, P1, DOI 10.1007/978-3-319-57141-6_1
   Silhavy R, 2017, J SYST SOFTWARE, V125, P1, DOI 10.1016/j.jss.2016.11.029
   Silhavy R, 2015, PLOS ONE, V10, DOI 10.1371/journal.pone.0141887
   Subriadi Apol Pribadi, 2014, Journal of Theoretical and Applied Information Technology, V59, P735
   Verner J, 2007, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON RESEARCH CHALLENGES IN INFORMATION SCIENCE: RCIS 2008, P71
   Wang F., 2009, P INT C COMP INT SOF, P1, DOI 10.1109/cise.2009.5364706
   Wang G, 2014, DECIS SUPPORT SYST, V57, P77, DOI 10.1016/j.dss.2013.08.002
   Willmott CJ, 2005, CLIMATE RES, V30, P79, DOI 10.3354/cr030079
NR 46
TC 0
Z9 0
U1 2
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 843
EP 864
DI 10.1007/s11219-022-09612-2
EA JAN 2023
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000913961300001
DA 2024-07-18
ER

PT J
AU Sultana, KZ
   Williams, BJ
   Bhowmik, T
AF Sultana, Kazi Zakia
   Williams, Byron J.
   Bhowmik, Tanmay
TI A study examining relationships between micro patterns and security
   vulnerabilities
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software security; Software vulnerabilities; Micro patterns; Software
   quality
ID COMPLEXITY; METRICS
AB Software security is an integral part of software quality and reliability. Software vulnerabilities make the software susceptible to attacks which violates software security. Metric-based software vulnerability prediction is one way to evaluate vulnerabilities beforehand so that developers can take preventative measures against attacks. In this study, we explore the correlation between software vulnerabilities and code-level constructs called micro patterns. These code patterns characterize class-level object-oriented program features. Existing research addressed micro pattern correlation with software defects. We analyzed the correlation between vulnerabilities and micro patterns from different viewpoints and explored whether they are related. We studied the distribution of micro patterns and their associations with vulnerable classes in 42 versions of the Apache Tomcat and three Java web applications. This study shows that certain micro patterns are frequently present in vulnerable classes. We also show that there is a high correlation between certain patterns that coexist in a vulnerable class.
C1 [Sultana, Kazi Zakia; Williams, Byron J.; Bhowmik, Tanmay] Mississippi State Univ, Dept Comp Sci & Engn, Starkville, MS 39762 USA.
C3 Mississippi State University
RP Sultana, KZ (corresponding author), Mississippi State Univ, Dept Comp Sci & Engn, Starkville, MS 39762 USA.
EM ks2190@msstate.edu
RI Sultana, Kazi Zakia/U-7122-2019
CR Alshammari B, 2009, INT CONF QUAL SOFTW, P11, DOI 10.1109/QSIC.2009.11
   [Anonymous], 2010, INT WORKSH SEC MEAS
   [Anonymous], 2000, HDB PARAMETRIC NONPA
   Batarseh F., 2010, P 48 ANN SE REG C NE
   Bau J, 2010, P IEEE S SECUR PRIV, P332, DOI 10.1109/SP.2010.27
   Bunke M, 2015, P 20 EUR C PATT LANG, P08
   Camilo F, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P269, DOI 10.1109/MSR.2015.32
   Chowdhury I., 2008, Proceedings of the fourth international workshop on Software engineering for secure systems, P57, DOI DOI 10.1145/1370905.1370913
   Chowdhury I., 2010, P 2010 ACM S APPL CO, P22
   Chowdhury I, 2011, J SYST ARCHITECT, V57, P294, DOI 10.1016/j.sysarc.2010.06.003
   Cramer H., 1946, MATH METHODS STAT, P282
   Deo A., 2015, P 24 INT C SOFTW ENG, P12
   Destefanis G., 2012, THESIS
   Destefanis G, 2012, EUROMICRO CONF PROC, P302, DOI 10.1109/SEAA.2012.63
   Ekstrom Joakim, 2011, The phi-coefficient, the tetrachoric correlation coefficient, and the pearsonyule debate
   Fontana FA, 2013, REFTEST 2013 WORKSH
   Gil J., 2005, P 20 ANN ACM SIGPLAN, P16
   Gopalakrishna R., 2005, VULNERABILITY LIKELI, P2005
   Graff M. G., 2003, SECURE CODING PRINCI, P99
   HALKIDIS ST, 2009, COMPUTERS AND SECURI, V25, P379, DOI DOI 10.1016/J.COSE.2006.03.002
   Howard M., 2002, Writing secure code
   Kim S., 2006, Proceedings of the 2006 International Workshop on Mining Software Repositories, P40
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Livshits VB, 2004, ANN COMP SEC APPL C
   Maggioni S., 2010, Proceedings of the 2010 ICSE Workshop on Emerging Trends in Software Metrics, P39
   Moshtari S, 2013, COMPUT FRAUD SECUR, P8, DOI 10.1016/S1361-3723(13)70045-9
   Nagappan N., 2005, P INT C SOFTW ENG, P15
   Neuhaus S, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P529
   Oaks Scott., 2001, JAVA SECURITY
   Scandariato R, 2014, IEEE T SOFTWARE ENG, V40, P993, DOI 10.1109/TSE.2014.2340398
   SCHUMACHER M, 2001, 8 C PATT LANG PROGR
   Seacord R.C., 2006, Secure coding in C and C++
   Shin Y., 2008, 3 INT DOCTORAL S EMP
   Shin Y., 2008, P 4 ACM WORKSH QUAL, P27
   Shin Y, 2013, EMPIR SOFTW ENG, V18, P25, DOI 10.1007/s10664-011-9190-8
   Shin Y, 2011, IEEE T SOFTWARE ENG, V37, P772, DOI 10.1109/TSE.2010.81
   Shin Y, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P315
   Singer J, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P67, DOI 10.1109/SCAM.2008.23
   Singer J, 2010, ELECTRON NOTES THEOR, V253, P191, DOI 10.1016/j.entcs.2010.08.042
   Smith B., 2012, Proceedings of the 2012 IEEE Sixth International Conference on Software Security and Reliability (SERE 2012), P108, DOI 10.1109/SERE.2012.23
   Sultana K. Z., 2016, P 40 IEEE COMP SOC I, P10
   Sultana K. Z., 2017, P 18 IEEE INT S HIGH, P12
   Walden J, 2014, PROC INT SYMP SOFTW, P23, DOI 10.1109/ISSRE.2014.32
   Wheeler David A., 1999, Secure programming for linux and unix HOWTO
   Wysopal C., 2006, ART SOFTWARE SECURIT
   Yoder J., 1997, Architectural patterns for enabling application security
   Yoshioka Nobukazu, 2008, Progress in Informatics, P35, DOI 10.2201/NiiPi.2008.5.5
   Zimmermann Thomas, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P421, DOI 10.1109/ICST.2010.32
NR 48
TC 3
Z9 3
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 5
EP 41
DI 10.1007/s11219-017-9397-z
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000001
DA 2024-07-18
ER

PT J
AU Immonen, A
   Ovaska, E
   Paaso, T
AF Immonen, Anne
   Ovaska, Eila
   Paaso, Tuomas
TI Towards certified open data in digital service ecosystems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality of data; Quality policy; Digital service ecosystem; Semantics;
   Interoperability; Knowledge sharing
ID SOFTWARE ARCHITECTURE; DATA QUALITY; REQUIREMENTS; INFORMATION;
   KNOWLEDGE; STRATEGY; SYSTEMS; WEB
AB The opportunities of open data have been recently recognized among companies in different domains. Digital service providers have increasingly been interested in the possibilities of innovating new ideas and services around open data. Digital service ecosystems provide several advantages for service developers, enabling the service co-innovation and co-creation among ecosystem members utilizing and sharing common assets and knowledge. The utilization of open data in digital services requires new innovation practices, service development models, and a collaboration environment. These can be provided by the ecosystem. However, since open data can be almost anything and originate from different kinds of data sources, the quality of data becomes the key issue. The new challenge for service providers is how to guarantee the quality of open data. In the ecosystems, uncertain data quality poses major challenges. The main contribution of this paper is the concept of the Evolvable Open Data based digital service Ecosystem (EODE), which defines the kinds of knowledge and services that are required for validating open data in digital service ecosystems. Thus, the EODE provides business potential for open data and digital service providers, as well as other actors around open data. The ecosystem capability model, knowledge management models, and the taxonomy of services to support the open data quality certification are described. Data quality certification confirms that the open data is trustworthy and its quality is good enough to be accepted for the usage of the ecosystem's services. The five-phase open data quality certification process, according to which open data is brought to the ecosystem and certified for the usage of the digital service ecosystem members using the knowledge models and support services of the ecosystem, is also described. The initial experiences of the still ongoing validation steps are summarized, and the concept limitations and future development targets are identified.
C1 [Immonen, Anne; Ovaska, Eila; Paaso, Tuomas] VTT Tech Res Ctr Finland Digital Syst & Serv, POB 1100, FI-90571 Oulu, Finland.
RP Immonen, A (corresponding author), VTT Tech Res Ctr Finland Digital Syst & Serv, POB 1100, FI-90571 Oulu, Finland.
EM anne.immonen@vtt.fi; eila.ovaska@vtt.fi; tuomas.paaso@vtt.fi
CR Agichtein E., 2008, INT C WEB SEARCH DAT
   [Anonymous], 2007, IN IEEE INT C DIG EC
   [Anonymous], 2011, COM20110 EUR COMM
   [Anonymous], 20 INT C WORLD WID W
   [Anonymous], 2009, 13 INT SOFTW PROD LI
   [Anonymous], 2015, DATA SCI J
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], THESIS
   [Anonymous], 2012, P WORLD ACAD SCI ENG
   [Anonymous], 2012, 4 INT WORKSH SOFTW E
   Antunes F, 2012, ADV HUM-COMPUT INTER, V2012, DOI 10.1155/2012/574276
   Aubonnet T, 2015, J INTERNET SERV APPL, V6, DOI 10.1186/s13174-015-0031-7
   Auer S, 2007, LECT NOTES COMPUT SC, V4825, P722, DOI 10.1007/978-3-540-76298-0_52
   Baroni A., 2014, IEEE IFIP C SOFTW AR
   Behkamal B, 2014, J THEOR APPL EL COMM, V9, P64, DOI 10.4067/S0718-18762014000200006
   Bertino E., 2010, LECT NOTES COMPUTER, V6358
   Bhatia S., 2013, IEEE ACM INT C ADV S
   Bizer C., 2007, THESIS
   Bizer C, 2009, J WEB SEMANT, V7, P1, DOI 10.1016/j.websem.2008.02.005
   Chan C. M. L., 2013, 46 HAW INT C SYST SC
   Chen M, 2009, IEEE COMPUT GRAPH, V29, P12, DOI 10.1109/MCG.2009.6
   Chesbrough HW, 2007, CALIF MANAGE REV, V50, P57, DOI 10.2307/41166416
   Daga E, 2015, LECT NOTES COMPUT SC, V9341, P257, DOI 10.1007/978-3-319-25639-9_41
   Dai C., 2008, LECT NOTES COMPUTER, V5159
   Dobrica L, 2002, IEEE T SOFTWARE ENG, V28, P638, DOI 10.1109/TSE.2002.1019479
   Fabijan A, 2015, LECT NOTES BUS INF P, V210, P139, DOI 10.1007/978-3-319-19593-3_12
   Ferrando-LIopis R., 2013, IEEE INT C BIG DAT S
   García F, 2006, INFORM SOFTWARE TECH, V48, P631, DOI 10.1016/j.infsof.2005.07.001
   Gil Y, 2007, J WEB SEMANT, V5, P227, DOI 10.1016/j.websem.2007.09.005
   Gorton I, 2015, IEEE SOFTWARE, V32, P78, DOI 10.1109/MS.2014.51
   Guessi M., 2015, 30 ACM S APPL COMP A
   Hanssen G. K., 2012, P 4 INT WORKSH SOFTW
   Heimstadt M., 2014, P INT C E DEM OP GOV, P1
   Heimstadt M., 2014, eJournal of eDemocracy Open Government, V6, P123, DOI DOI 10.29379/jedem.v6i2.330
   HM Government Cabinet Office, 2012, OP DAT WHIT PAP UNL
   Iansiti M, 2004, HARVARD BUS REV, V82, P68
   Immonen A, 2013, INT J RES BUSINESS T, V4, P286, DOI [10.0001/ijrbt.v4i1.197, DOI 10.0001/IJRBT.V4I1.197]
   Immonen A, 2008, SOFTW SYST MODEL, V7, P49, DOI 10.1007/s10270-006-0040-x
   Immonen A, 2016, SERV ORIENTED COMPUT, V10, P151, DOI 10.1007/s11761-015-0175-0
   Immonen A, 2015, IEEE ACCESS, V3, P2028, DOI 10.1109/ACCESS.2015.2490723
   Immonen A, 2014, IEEE ACCESS, V2, P88, DOI 10.1109/ACCESS.2014.2302872
   *ISO IEC, 2003, 91262 ISOIEC TR
   ISO/IEC, 2008, 25012 ISOIEC
   Kantorovitch J., 2008, ENCY INFORM SCI TECH
   Kazman R., 2000, 4 IEEE INT C ENG COM
   Kett  H., 2008, P 18 INT RESER C STU
   Khriyenko O, 2012, P IADIS INT C COLL T
   Li S., 2011, 3 INT C ADV COMP CON
   Madnick S.E., 2009, Data Inf. Quality, V1, P1, DOI DOI 10.1145/1515693.1516680
   Mecella M, 2002, LECT NOTES COMPUT SC, V2519, P486
   Naumann F., 2002, Quality-driven query answering for integrated information systems
   Naumann F., 2000, 5 INT C INF QUAL BOS
   Niemela E., 2008, P 3 INT C EV NOV APP
   Niemelä E, 2007, INFORM SOFTWARE TECH, V49, P1107, DOI 10.1016/j.infsof.2006.11.003
   Niskanen I., 2014, INTELLI 2014 3 INT C
   Nurse J. R., 2011, INT C COMP APPL NETW
   Nurse J. R. C., 2013, 12 IEEE INT C TRUST
   Otto Boris, 2016, CISC VIS NETW IND GL, DOI [10.13140/RG.2.1.2673.0649, DOI 10.13140/RG.2.1.2673.0649]
   Ovaska E., 2012, ADV DESIGN APPROACHE
   Ovaska E, 2014, IEEE ACCESS, V2, P199, DOI 10.1109/ACCESS.2014.2309396
   Ovaska E, 2010, INFORM SOFTWARE TECH, V52, P577, DOI 10.1016/j.infsof.2009.11.008
   Pantsar-Syvaniemi S., 2011, LECT NOTES COMPUTER, V7096
   Pantsar-Syväniemi S, 2012, J AMB INTEL SMART EN, V4, P491, DOI 10.3233/AIS-2012-0179
   PIPINO L, 2005, DEV MEASUREMENT SCAL
   Pipino LL., 2002, Communications of the ACM, V45, P211, DOI [DOI 10.1145/505248.506010, 10.1145/505248.506010]
   Poikola Antti, 2011, PUBLIC DATA INTRO OP
   Pollock R., 2011, BUILDING OPEN DATA E
   Rahman S. S., 2011, LECT NOTES COMPUTER, V7170
   Ramaswamy L., 2013, IEEE INT C BIG DAT S
   Ruokolainen T., 2011, IEEE 15 INT ENT DIST
   Ruokolainen T., 2009, 13 ENT DISTR OBJ COM
   Sande M.Vander, 2013, P W3C WORKSH OP DAT
   Stathel S., 2008, 18 INT RESER C STUTT
   W3C, 2007, WEB SERV POL 1 5 FRA
   Wand Y, 1996, COMMUN ACM, V39, P86, DOI 10.1145/240455.240479
   Wang R. Y., 1996, Journal of Management Information Systems, V12, P5
   Wiesner S., 2012, C IND PROD SERV SYST
   Zhang J., 2010, IEEE INT C SERV OR C
   Zhou J, 2011, MODERN SOFTWARE ENG
NR 79
TC 18
Z9 19
U1 4
U2 36
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1257
EP 1297
DI 10.1007/s11219-017-9378-2
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400003
OA hybrid
DA 2024-07-18
ER

PT J
AU del Sagrado, J
   del Aguila, IM
AF del Sagrado, Jose
   del Aguila, Isabel M.
TI Stability prediction of the software requirements specification
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 11th International Conference on Predictive Models and Data Analytics in
   Software Engineering (PROMISE)
CY OCT 21, 2015
CL Beijing, PEOPLES R CHINA
DE Requirements engineering; Software requirements specification; CASE
   tools; Bayesian network
ID BAYESIAN NETWORKS
AB Complex decision-making is a prominent aspect of Requirements Engineering. This work presents the Bayesian network Requisites that predicts whether the requirements specification documents have to be revised. We test Requisites' suitability by means of metrics obtained from a large complex software project. Furthermore, this Bayesian network has been integrated into a software tool by defining a communication interface inside a multilayered architecture. In this way, we add a new decision-making functionality that provides requirements engineers with a feature to explore software requirement specification by combining requirement metrics and the probability values estimated by the Bayesian network.
C1 [del Sagrado, Jose; del Aguila, Isabel M.] Univ Almeria, Dept Informat, Ctra Sacramento S-N, Almeria 04120, Spain.
C3 Universidad de Almeria
RP del Aguila, IM (corresponding author), Univ Almeria, Dept Informat, Ctra Sacramento S-N, Almeria 04120, Spain.
EM jsagrado@ual.es; imaguila@ual.es
RI del Sagrado, Jose/F-9504-2016; del Aguila, Isabel/A-9740-2015
OI del Sagrado, Jose/0000-0002-5616-056X; del Aguila,
   Isabel/0000-0001-9896-7196
FU Spanish Ministry of Economy and Competitiveness [TIN2013-46638-C3-1-P,
   TIN2015-71841-REDT]; Data, Knowledge and Software Engineering (DKSE)
   research group of the University of Almeria [TIC-181]
FX This research has been financed by the Spanish Ministry of Economy and
   Competitiveness under projects TIN2013-46638-C3-1-P, TIN2015-71841-REDT
   and partially supported by the Data, Knowledge and Software Engineering
   (DKSE) research group (TIC-181) of the University of Almeria.
CR [Abran A. IEEE Computer Society IEEE Computer Society], 2004, GUIDE SOFTWARE ENG B
   Alexander I., 2009, SPECIFY PRODUCTS SER
   [Anonymous], 2013, SOFTWARE REQUIREMENT
   Bagnall AJ, 2001, INFORM SOFTWARE TECH, V43, P883, DOI 10.1016/S0950-5849(01)00194-X
   Borland Software Corporation, 2016, CAL MAN AG REQ VIS C
   Canadas J., 2009, P C AS ESP INT ART C, P9
   de Gea JMC, 2012, INFORM SOFTWARE TECH, V54, P1142, DOI 10.1016/j.infsof.2012.04.005
   Castro-Herrera C, 2009, PROCEEDINGS OF THE 2009 17TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, P37, DOI 10.1109/RE.2009.20
   Consortium E., 2002, Proceedings of First European Workshop on Probabilistic Graphical Models, P222
   de Freitas FG, 2011, LECT NOTES COMPUT SC, V6956, P18, DOI 10.1007/978-3-642-23716-4_5
   del Aguila IM, 2016, REQUIR ENG, V21, P461, DOI 10.1007/s00766-015-0225-3
   del Sagrado J., 2010, BAYESIAN NETWORK PRE, P106
   del Sagrado J, 2015, EMPIR SOFTW ENG, V20, P577, DOI 10.1007/s10664-013-9287-3
   del Sagrado J, 2012, FRONT ARTIF INTEL AP, V242, P1009, DOI 10.3233/978-1-61499-098-7-1009
   del Sagrado J, 2011, LECT NOTES ARTIF INT, V7023, P213, DOI 10.1007/978-3-642-25274-7_22
   Dumitru H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P181, DOI 10.1145/1985793.1985819
   Greer D, 2004, INFORM SOFTWARE TECH, V46, P243, DOI 10.1016/j.infsof.2003.07.002
   Harman M., 2012, 2012 Proceedings of the First International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering (RAISE 2012), P1, DOI 10.1109/RAISE.2012.6227961
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   IBM, 2012, RAT DOORS
   Jensen F. V., 2007, INFORM SCI STAT BAYE
   Karlsson J, 1997, IEEE SOFTWARE, V14, P67, DOI 10.1109/52.605933
   Kastro Y, 2008, SOFTWARE QUAL J, V16, P543, DOI 10.1007/s11219-008-9053-8
   Kjærulff UB, 2008, INFORM SCI STAT, P3
   Korb KB., 2010, COM SCI DAT
   Kotonya G., 1998, Requirements engineering: processes and techniques
   Lim SL, 2012, IEEE T SOFTWARE ENG, V38, P707, DOI 10.1109/TSE.2011.36
   del Aguila IM, 2010, ICSOFT 2010: PROCEEDINGS OF THE FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL 2, P456, DOI 10.5220/0003007904560461
   Del Aguila IM, 2011, INT J SOFTW ENG KNOW, V21, P167, DOI 10.1142/S0218194011005219
   Menzies T, 2012, EMPIR SOFTW ENG, V17, P1, DOI 10.1007/s10664-011-9193-5
   Meziane F., 2010, ARTIF INTELL
   Misirli AT, 2014, IEEE T SOFTWARE ENG, V40, P533, DOI 10.1109/TSE.2014.2321179
   Misirli AT, 2011, SOFTWARE QUAL J, V19, P515, DOI 10.1007/s11219-010-9128-1
   Nicolás J, 2009, INFORM SOFTWARE TECH, V51, P1291, DOI 10.1016/j.infsof.2009.04.001
   Orellana FJ, 2008, ICEIS 2008: PROCEEDINGS OF THE TENTH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL ISAS-1, P326
   Shirabad JS, 2005, PROC INT CONF SOFTW, P692
   Sommerville I., 2011, Software engineering
   Standish Group, 2008, CHAOS REP
   Tosun A., 2015, SOFTW QUAL J, P1
   Visure Solutions, 2012, VIS REQ SOFTW REQ EN
   Wen JF, 2012, INFORM SOFTWARE TECH, V54, P41, DOI 10.1016/j.infsof.2011.09.002
   Zhang Y., 2012, The SBSE repository: A repository and analysis of authors and research articles on search based software engineering
NR 42
TC 13
Z9 13
U1 3
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 585
EP 605
DI 10.1007/s11219-017-9362-x
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA GH6AN
UT WOS:000433521200014
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Eden, AH
   Gasparis, E
   Nicholson, J
   Kazman, R
AF Eden, A. H.
   Gasparis, E.
   Nicholson, J.
   Kazman, R.
TI Round-trip engineering with the Two-Tier Programming Toolkit
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Design verification; Tool support; Software evolution; Java; Codecharts
ID VERIFICATION
AB A major impediment to the long-term quality of large and complex programs is inconsistency between design and implementation. Conflicts between intent and execution are common because detecting them is laborious, error-prone, and poorly supported, and because the costs of continuously maintaining design documents outweigh immediate gains. A growing inconsistency between design and implementation results in software that is unpredictable and poorly understood. Round-trip engineering tools support an iterative process of detecting conflicts and resolving them by changing either the design or the implementation. We describe a Toolkit which supports a round-trip engineering of native Java programs without interfering with any existing practices, tools, or development environments, thereby posing a minimal barrier on adoption. The Toolkit includes a user-guided software visualization and design recovery tool, which generates Codecharts from source code. A "round-trip" process is possible because Codecharts visualizing source code can be edited to reflect the intended design, and the Verifier can detect conflicts between the intended and as-implemented design. We demonstrate each stage in this process, showing how the Toolkit effectively helps to close the gap between design and implementation, recreate design documentation, and maintaining consistency between intent and execution.
C1 [Eden, A. H.] Sapience Org, London, England.
   [Gasparis, E.] Singular Labs, Voudouri St, Chalkida 34100, Evia, Greece.
   [Nicholson, J.] ZiNET Data Solut, 25 Russell St, Hastings TN34 1QU, England.
   [Kazman, R.] Carnegie Mellon Univ, Inst Software Engn, Fifth Ave, Pittsburgh, PA 15213 USA.
   [Kazman, R.] Univ Hawaii, Maile Way, Honolulu, HI 96822 USA.
C3 Carnegie Mellon University; Software Engineering Institute; University
   of Hawaii System
RP Eden, AH (corresponding author), Sapience Org, London, England.
EM eden@sapience.org
FU Research Promotion Fund; Knowledge Transfer Innovation Fund, University
   of Essex; EPSRC
FX The authors wish to thank Raymond Turner for extending considerable
   support throughout this research; the Research Promotion Fund, the
   Knowledge Transfer Innovation Fund, University of Essex, and the EPSRC
   for funding various parts of this project. We also wish to thank Olumide
   Iyaniwura, Gu Bo, Maple Tao Liang, Dimitrious Fragkos, Omololu Ayodeji,
   Xu Yi, and Christina Maniati for their contributions to this research.
CR Alzahrani A. A. H., 2015, WORLD C INF TECHN CO
   Alzahrani A. A. H., 2015, MODELLING AUTOMATED
   [Anonymous], 2006, JAVA 3D
   Assmann U., 2003, ELECT NOTES THEOR CO, V82, P33
   Barringer H., 2004, LECT NOTES COMPUTER, V55, P277
   Biggerstaff T J, 1989, IEEE COMPUT, V22, P36
   Chen F, 2007, ACM SIGPLAN NOTICES, V42, P569, DOI 10.1145/1297105.1297069
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   Demeyer S, 1999, LECT NOTES COMPUT SC, V1723, P630
   Eden AH, 2013, FORM METHOD SYST DES, V43, P1, DOI 10.1007/s10703-012-0181-1
   Eden A.H., 2011, CODECHARTS ROADMAPS
   Fischer T., 1999, LNCS, P296
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gasparis E., 2008, 15 WORK C REV ENG WC
   Gasparis E., 2008, TOOL DEM P 30 IEEE I
   Gasparis E., 2010, THESIS
   Goldman M, 2010, 2010 ICSE WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE 2010), P13, DOI 10.1109/SwSTE.2010.13
   GUEHENEUC Y.-G., 2004, Proceedings of the 14th IBM Centers for Advanced Studies Conference (CASCON), P28
   GUTTAG J, 1982, SCI COMPUT PROGRAM, V2, P53, DOI 10.1016/0167-6423(82)90004-1
   Henriksson A., 2003, DEFINITION ROUND TRI
   Hettel T, 2008, LECT NOTES COMPUT SC, V5063, P31, DOI 10.1007/978-3-540-69927-9_3
   Jackson M, 2008, AUTOMAT SOFTW ENG, V15, P275, DOI 10.1007/s10515-008-0034-8
   Kazman R., 1999, Automated Software Engineering, V6, P107, DOI 10.1023/A:1008781513258
   Koschke R., 2001, REVISED LECT SOFTWAR, P138
   Mo R, 2015, 2015 12TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P51, DOI 10.1109/WICSA.2015.12
   Muller H., 1988, P ICSE 1988, P80
   Muller H., 2000, Proceedings of the Future of Software Engineering, P47, DOI [10.1145/336512.336526, DOI 10.1145/336512.336526]
   Nicholson J.C., 2011, Design of Wind Turbine Tower and Foundation Systems: Optimization Approach
   Nicholson J, 2014, SCI COMPUT PROGRAM, V80, P211, DOI 10.1016/j.scico.2013.05.007
   Nickel U. A., 2000, 2 WORKSH SOFTW REENG
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   QUATRANI T, 1998, VISUAL MODELING RATI
   Ryoo J., 2012, SOFTWARE SECUTIRY RE
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Sendall S., 2004, TAMING MODEL ROUND T
   Shneiderman B, 1996, IEEE SYMPOSIUM ON VISUAL LANGUAGES, PROCEEDINGS, P336, DOI 10.1109/VL.1996.545307
   Sipser M., 2013, Introduction to the theory of computation, V3
   Van Paesschen E, 2005, LECT NOTES COMPUT SC, V3713, P633, DOI 10.1007/11557432_47
   Wassermann R., 2003, PATTERN LANGUAGES PR
   WING JM, 1990, COMPUTER, V23, P8, DOI 10.1109/2.58215
   Xiao L, 2016, PROC INT CONF SOFTW, P488, DOI 10.1145/2884781.2884822
   Yoder J., 2000, PATTERN LANGUAGES PR
NR 42
TC 3
Z9 3
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 249
EP 271
DI 10.1007/s11219-017-9363-9
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200003
DA 2024-07-18
ER

PT J
AU Giraldo, FD
   España, S
   Pastor, O
   Giraldo, WJ
AF Giraldo, Faber D.
   Espana, Sergio
   Pastor, Oscar
   Giraldo, William J.
TI Considerations about quality in model-driven engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-driven engineering; Modeling languages; Quality; Quality
   categories; Quality issues; Open quality challenges
ID BUSINESS PROCESS MODELS; SOFTWARE-DEVELOPMENT; EVALUATING QUALITY; UML;
   FRAMEWORK; MDE; INDUSTRY; STATE; VERIFICATION; EXPERIENCES
AB The virtue of quality is not itself a subject; it depends on a subject. In the software engineering field, quality means good software products that meet customer expectations, constraints, and requirements. Despite the numerous approaches, methods, descriptive models, and tools, that have been developed, a level of consensus has been reached by software practitioners. However, in the model-driven engineering (MDE) field, which has emerged from software engineering paradigms, quality continues to be a great challenge since the subject is not fully defined. The use of models alone is not enough to manage all of the quality issues at the modeling language level. In this work, we present the current state and some relevant considerations regarding quality in MDE, by identifying current categories in quality conception and by highlighting quality issues in real applications of the model-driven initiatives. We identified 16 categories in the definition of quality in MDE. From this identification, by applying an adaptive sampling approach, we discovered the five most influential authors for the works that propose definitions of quality. These include (in order): the OMG standards (e.g., MDA, UML, MOF, OCL, SysML), the ISO standards for software quality models (e.g., 9126 and 25,000), Krogstie, Lindland, and Moody. We also discovered families of works about quality, i.e., works that belong to the same author or topic. Seventy-three works were found with evidence of the mismatch between the academic/research field of quality evaluation of modeling languages and actual MDE practice in industry. We demonstrate that this field does not currently solve quality issues reported in industrial scenarios. The evidence of the mismatch was grouped in eight categories, four for academic/research evidence and four for industrial reports. These categories were detected based on the scope proposed in each one of the academic/research works and from the questions and issues raised by real practitioners. We then proposed a scenario to illustrate quality issues in a real information system project in which multiple modeling languages were used. For the evaluation of the quality of this MDE scenario, we chose one of the most cited and influential quality frameworks; it was detected from the information obtained in the identification of the categories about quality definition for MDE. We demonstrated that the selected framework falls short in addressing the quality issues. Finally, based on the findings, we derive eight challenges for quality evaluation in MDE projects that current quality initiatives do not address sufficiently.
C1 [Giraldo, Faber D.; Giraldo, William J.] Univ Quindio, SINFOCI Res Grp, Cra 15 Calle 12N, Armenia 630004, Quindio, Colombia.
   [Espana, Sergio] Univ Utrecht, Dept Informat & Comp Sci, Off Buys Ballotgebouw BBL 580,POB 80-089, NL-3508 TB Utrecht, Netherlands.
   [Giraldo, Faber D.; Pastor, Oscar] Univ Politecn Valencia, PROS Res Ctr, Camino Vera S-N, E-46022 Valencia, Spain.
C3 Universidad del Quindio; Utrecht University; Universitat Politecnica de
   Valencia
RP Giraldo, FD (corresponding author), Univ Quindio, SINFOCI Res Grp, Cra 15 Calle 12N, Armenia 630004, Quindio, Colombia.; Giraldo, FD (corresponding author), Univ Politecn Valencia, PROS Res Ctr, Camino Vera S-N, E-46022 Valencia, Spain.
EM fdgiraldo@uniquindio.edu.co; s.espana@uu.nl; opastor@pros.upv.es;
   wjgiraldo@uniquindio.edu.co
RI Giraldo, Fáber D./Q-1135-2018; España, Sergio/B-1171-2010; Pastor Lopez,
   Oscar/S-4216-2016
OI Giraldo, Fáber D./0000-0002-6111-3055; España,
   Sergio/0000-0001-7343-4270; Pastor Lopez, Oscar/0000-0002-1320-8471;
   Giraldo Orozco, William Joseph/0000-0002-3914-3215
FU COLCIENCIAS (Colombia) [512-2010]; Gene-ralitat Valenciana
   [PROMETEOII/2014/039]; European Commission [611351]; ERDF structural
   funds
FX F.G, would like to thank COLCIENCIAS (Colombia) for funding this work
   through the Colciencias Grant call 512-2010. This work has been
   supported by the Gene-ralitat Valenciana Project IDEO
   (PROMETEOII/2014/039), the European Commission FP7 Project CaaS
   (611351), and ERDF structural funds.
CR [Anonymous], MEASURING QUALITY MO
   [Anonymous], SURVEY TRACEABILITY
   [Anonymous], 2007, IIS
   [Anonymous], ADV SOFTWARE ENG
   [Anonymous], QUALITE LANGAGES MOD
   [Anonymous], 2014, MDA GUID REV 2 0
   [Anonymous], SIMPLE PRACTICAL MOD
   [Anonymous], 2015 34 INT C CHIL C
   [Anonymous], EA MDE WHAT AFF SUCC
   [Anonymous], 201017 SIM RES LAB
   [Anonymous], 2012, P IEEE 1 INT WORKSH
   [Anonymous], MODEL DRIVEN ENG VS
   [Anonymous], ARXIV160602025
   [Anonymous], MATURE IS MODEL DRIV
   [Anonymous], TECHNICAL REPORT
   [Anonymous], IS UML STILL WID US
   [Anonymous], QUALITY OF MODELS
   [Anonymous], 2011, ISO/IEC TR 29110-5-1-2, DOI DOI 10.1109/IEEESTD.2011.6129467
   [Anonymous], THESIS
   [Anonymous], SPECIALISATIONS SEQU
   [Anonymous], SUPPORT QUALITY METR
   [Anonymous], IS UML TRIV
   [Anonymous], 58071985E ISO
   [Anonymous], DEFINICION LENGUAJES
   [Anonymous], 2012 38 C LAT INF CL
   [Anonymous], MODELS SOFTWARE ENG
   [Anonymous], WHY HAS UML US DECL
   [Anonymous], LNCS
   [Anonymous], 2014, 2014 JOINT IEEE INT, DOI DOI 10.1109/ISAF.2014.6922972
   [Anonymous], 2005, P MET S
   [Anonymous], SOFTWARE SYSTEMS MOD
   [Anonymous], RELATING SYSTEM QUAL
   [Anonymous], BUSINESS PROCESS QUA
   [Anonymous], DRIVING COMPONENT BA
   [Anonymous], WHAT DO YOU THINK MO
   [Anonymous], WHY DID MDE MISS BOA
   [Anonymous], PON S SYSTEMATIC APP
   [Anonymous], DO YOU USE MDA MDD M
   [Anonymous], MODEL DRIVEN ARCHITE
   [Anonymous], 8 REASONS WHY MODEL
   [Anonymous], MODELING COMMUNITY A
   [Anonymous], MODELING WILL BE COM
   [Anonymous], MANAGING COUPLED EVO
   [Anonymous], UML BE EJECTED MICRO
   [Anonymous], MODEL DRIVEN DEV 2
   [Anonymous], MODEL DRIVEN DEV MIS
   [Anonymous], 2003, MDA GUIDE VERSION 1
   [Anonymous], RIGHT TOOL RIGHT JOB
   [Anonymous], SOFTWARE QUALITY J
   [Anonymous], MEASURING MODELS
   [Anonymous], SERIE CIENTIFICA
   [Anonymous], QUALITY MODEL QUALIT
   [Anonymous], NEW DEV MODEL DRIVEN
   [Anonymous], RIGHT TOOL RIGHT JOB
   [Anonymous], IS UML PRACTICAL
   [Anonymous], 2013, P 2 WORKSH GRAPH MOD
   [Anonymous], 4 FRAMEWORK USABILIT
   [Anonymous], STRATEGIC MANAGEMENT
   [Anonymous], WORKING PAPERS FACUL
   [Anonymous], WHY ARENT WE ALL DOI
   [Anonymous], 2013, The Stanford Encyclopedia of Philosophy
   [Anonymous], 2000, RATIONAL UNIFIED PRO
   [Anonymous], PRIMER PARCIAL MDA M
   [Anonymous], CURRENT LIMITATIONS
   [Anonymous], 2014, P 8 ACMIEEE INT S EM
   [Anonymous], 2012, Model-based development and evolution of information systems a quality approach
   [Anonymous], INT J INFORM SYSTEMS
   [Anonymous], ECLIPSE DIAGRAM EDIT
   [Anonymous], WHAT AR BEN RISKS MO
   [Anonymous], WHY THERE IS NO FUTU
   [Anonymous], INCOMPLETENESS UML D
   [Anonymous], 2000, MODELING LANGUAGES 1
   [Anonymous], 2014, 11 WORKSH MOD DRIV E
   [Anonymous], MODEL DRIVEN CONSTRA
   [Anonymous], 2001, StandardISO/IEC9126
   [Anonymous], HAS MDA BEEN ABANDON
   [Anonymous], WORKSH MOD DRIV ENG
   [Anonymous], QUALITY MODELLING LA
   [Anonymous], EXECUTING DEBUGGING
   [Anonymous], DEALING MAP SHOCK SY
   [Anonymous], 19759 IEEE ISOIEC TR
   Aranda Jorge, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P692, DOI 10.1007/978-3-642-33666-9_44
   Arendt T, 2013, AUTOMAT SOFTW ENG, V20, P141, DOI 10.1007/s10515-012-0114-7
   Baker P, 2005, LECT NOTES COMPUT SC, V3713, P476, DOI 10.1007/11557432_36
   Barisic A., Proceedings of the 3rd ACM SIGPLAN workshop on Evaluation and usability of programming languages and tools (PLATEAU) at SPLASH. PLATEAU '11 (2011), P65, DOI DOI 10.1145/2089155.2089170
   Beckers J., 2010, 2010 IEEE 37th International Conference on Plasma Sciences (ICOPS 2010), DOI 10.1109/PLASMA.2010.5534165
   Bernardo-Quintero Juan, 2011, Ing. Univ., V15, P219
   Brambilla M, 2014, SCI COMPUT PROGRAM, V89, P71, DOI 10.1016/j.scico.2013.03.010
   Bruel JM, 2015, PROCEDIA COMPUT SCI, V51, P660, DOI 10.1016/j.procs.2015.05.182
   Budgen D, 2011, SOFTWARE PRACT EXPER, V41, P363, DOI 10.1002/spe.1009
   Challenger M, 2016, SOFTWARE QUAL J, V24, P755, DOI 10.1007/s11219-015-9291-5
   Chaudron MRV, 2012, SOFTW SYST MODEL, V11, P571, DOI 10.1007/s10270-012-0278-4
   Clark T, 2012, SOFTW SYST MODEL, V11, P481, DOI 10.1007/s10270-012-0260-1
   Costal D, 2011, LECT NOTES COMPUT SC, V6998, P189, DOI 10.1007/978-3-642-24606-7_15
   Cruz-Lemus JA, 2010, INFORM SCIENCES, V180, P2209, DOI 10.1016/j.ins.2010.01.026
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   Davies I, 2006, DATA KNOWL ENG, V58, P358, DOI 10.1016/j.datak.2005.07.007
   Davies J, 2015, SCI COMPUT PROGRAM, V103, P88, DOI 10.1016/j.scico.2014.11.004
   Dijkman RM, 2008, INFORM SOFTWARE TECH, V50, P1281, DOI 10.1016/j.infsof.2008.02.006
   Espinilla M, 2011, ADV INTEL SOFT COMPU, V123, P685
   Fabra J, 2012, J SYST SOFTWARE, V85, P607, DOI 10.1016/j.jss.2011.09.022
   Fettke P, 2012, LECT NOTES BUS INF P, V113, P406
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   Genero M, 2011, J DATABASE MANAGE, V22, P46, DOI 10.4018/jdm.2011070103
   Giraldo FD, 2015, INT CONF RES CHAL, P64, DOI 10.1109/RCIS.2015.7128864
   González CA, 2014, INFORM SOFTWARE TECH, V56, P821, DOI 10.1016/j.infsof.2014.03.003
   Gorschek T, 2014, J SYST SOFTWARE, V95, P176, DOI 10.1016/j.jss.2014.03.082
   Grobshtein Y, 2011, SYSTEMS ENG, V14, P327, DOI 10.1002/sys.20181
   Haan J.D., 2008, 8 reasons why model-driven approaches (will) fail
   Harel D, 2004, COMPUTER, V37, P64, DOI 10.1109/MC.2004.172
   Hebig R., 2014, P 2014 INT C SOFTWAR, P164, DOI [10.1145/2600821.2600846, DOI 10.1145/2600821.2600846]
   Heidari F, 2014, INT J ACCOUNT INF SY, V15, P193, DOI 10.1016/j.accinf.2013.09.002
   Heymans P, 2008, IET SOFTW, V2, P281, DOI 10.1049/iet-sen:20070055
   Hindawi M, 2009, LECT NOTES COMPUT SC, V5421, P291, DOI 10.1007/978-3-642-01648-6_31
   Hutchinson J, 2014, SCI COMPUT PROGRAM, V89, P144, DOI 10.1016/j.scico.2013.03.017
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P633, DOI 10.1145/1985793.1985882
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   Izurieta C, 2015, QOSA'15 PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGSOFT CONFERENCE ON QUALITY OF SOFTWARE ARCHITECTURES, P31, DOI 10.1145/2737182.2737193
   Jalali S, 2012, INT SYMP EMP SOFTWAR, P29, DOI 10.1145/2372251.2372257
   Domínguez-Mayo FJ, 2011, INT J HUM CAP INF TE, V2, P11, DOI 10.4018/jhcitp.2011100102
   Kahraman G., 2013, Software & Systems Modeling, P1
   Kessentini M, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P51, DOI 10.1109/CMSBSE.2013.6604438
   Kitchenham B., 2007, Joint Report
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kolovos D S., 2013, Proceedings of the Workshop on Scalability in Model Driven Engineering. BigMDE'13, V2, P1
   Krogstie J., 1995, Information System Concepts. Towards a Consolidation of Views. Proceedings of the IFIP International Working Conference on Information System Concepts, 1995, P216
   Kruchten P, 2012, IEEE SOFTWARE, V29, P18, DOI 10.1109/MS.2012.167
   Kulkarni V, 2010, LECT NOTES COMPUT SC, V6395, P331
   Laguna MA, 2010, J UNIVERS COMPUT SCI, V16, P2313
   Lange C. F. J., 2006, 28th International Conference on Software Engineering Proceedings, P401, DOI 10.1145/1134285.1134341
   Lange CFJ, 2007, LECT NOTES COMPUT SC, V4364, P211
   Lange CFJ, 2006, 13TH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P7
   Lange CFJ, 2006, LECT NOTES COMPUT SC, V4199, P27
   LINDLAND OI, 1994, IEEE SOFTWARE, V11, P42, DOI 10.1109/52.268955
   Lukman T, 2013, CONTROL ENG PRACT, V21, P1078, DOI 10.1016/j.conengprac.2013.03.013
   Maes A, 2007, DATA KNOWL ENG, V63, P701, DOI 10.1016/j.datak.2007.04.008
   Marín B, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P541
   Marín B, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2491509.2491520
   Matinlassi M, 2006, 5th Working IEEE/IFIP Conference on Software Architecture, Proceedings, P199
   Mayerhofer T, 2012, PROC INT CONF SOFTW, P1579, DOI 10.1109/ICSE.2012.6227032
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Mohagheghi P., 2007, International Workshop on Modeling in Software Engineering, P6, DOI DOI 10.1109/MISE.2007.6
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   Mohagheghi P, 2013, SOFTW SYST MODEL, V12, P619, DOI 10.1007/s10270-011-0219-7
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Mohagheghi P, 2009, LECT NOTES COMPUT SC, V5421, P54, DOI 10.1007/978-3-642-01648-6_6
   Molina F, 2009, ADV ENG SOFTW, V40, P1306, DOI 10.1016/j.advengsoft.2009.01.018
   Moody DL, 2009, IEEE T SOFTWARE ENG, V35, P756, DOI 10.1109/TSE.2009.67
   Moody DL, 2005, DATA KNOWL ENG, V55, P243, DOI 10.1016/j.datak.2004.12.005
   Moody DL, 2002, LECT NOTES COMPUT SC, V2503, P380
   Moody DL, 2003, INFORM SYST, V28, P619, DOI 10.1016/S0306-4379(02)00043-1
   Morais Francisco, 2015, 17th International Conference on Enterprise Information Systems (ICEIS 2015). Proceedings, P311
   Moreno-Montes de Oca I, 2015, INFORM SOFTWARE TECH, V58, P187, DOI 10.1016/j.infsof.2014.07.011
   Mussbacher G, 2014, LECT NOTES COMPUT SC, V8767, P183, DOI 10.1007/978-3-319-11653-2_12
   Nelson HJ, 2012, SOFTWARE QUAL J, V20, P201, DOI 10.1007/s11219-011-9136-9
   Nelson HJ, 2005, DATA KNOWL ENG, V55, P237, DOI 10.1016/j.datak.2004.12.004
   Nugroho A, 2009, INFORM SOFTWARE TECH, V51, P1670, DOI 10.1016/j.infsof.2009.04.007
   Opdahl A. L., 2002, Software and Systems Modeling, V1, P43
   Panach JI, 2015, INFORM SOFTWARE TECH, V62, P164, DOI 10.1016/j.infsof.2015.02.012
   Panach JI, 2015, INFORM SOFTWARE TECH, V58, P338, DOI 10.1016/j.infsof.2014.07.002
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   Planas E, 2016, COMPUT LANG SYST STR, V46, P66, DOI 10.1016/j.cl.2016.07.002
   Porubän J, 2014, ACSIS-ANN COMPUT SCI, V2, P1647
   Rios E, 2006, LECT NOTES COMPUT SC, V4066, P78
   Ruiz M, 2014, LECT NOTES COMPUT SC, V8484, P332, DOI 10.1007/978-3-319-07881-6_23
   Saghafi A, 2014, P ANN HICSS, P4609, DOI 10.1109/HICSS.2014.567
   Cuadrado JS, 2014, SCI COMPUT PROGRAM, V89, P176, DOI 10.1016/j.scico.2013.04.007
   Seddon PB, 1997, INFORM SYST RES, V8, P240, DOI 10.1287/isre.8.3.240
   Siau K, 2010, J DATABASE MANAGE, V21, pI
   Silva FS, 2015, INFORM SOFTWARE TECH, V58, P20, DOI 10.1016/j.infsof.2014.09.012
   Singh Yashwant, 2009, 2009 IEEE International Advance Computing Conference. IACC 2009, P1644, DOI 10.1109/IADCC.2009.4809264
   Staron M, 2006, LECT NOTES COMPUT SC, V4199, P57
   Störrle H, 2013, LECT NOTES COMPUT SC, V8107, P104, DOI 10.1007/978-3-642-41533-3_7
   Teppola Susanna, 2009, Proceedings of the 2009 Fourth International Conference on Software Engineering Advances (ICSEA), P15, DOI 10.1109/ICSEA.2009.11
   Thompson S.K., 1996, ADAPTIVE SAMPLING
   Tom E, 2013, J SYST SOFTWARE, V86, P1498, DOI 10.1016/j.jss.2012.12.052
   Tomassetti Federico, 2012, 16th International Conference on Evaluation & Assessment in Software Engineering (EASE 2012), P91, DOI 10.1049/ic.2012.0012
   Torchiano M, 2013, J SYST SOFTWARE, V86, P2110, DOI 10.1016/j.jss.2013.03.084
   Vallecillo A, 2010, LECT NOTES COMPUT SC, V6138, P305, DOI 10.1007/978-3-642-13595-8_24
   van Amstel MF, 2009, LECT NOTES COMPUT SC, V5563, P239, DOI 10.1007/978-3-642-02408-5_17
   Van Der Straeten R, 2009, LECT NOTES COMPUT SC, V5421, P35, DOI 10.1007/978-3-642-01648-6_4
   Vara JM, 2012, J SYST SOFTWARE, V85, P2368, DOI 10.1016/j.jss.2012.04.080
   Wehrmeister MA, 2014, MECHATRONICS, V24, P844, DOI 10.1016/j.mechatronics.2013.12.008
   Whittle J, 2017, SOFTW SYST MODEL, V16, P313, DOI 10.1007/s10270-015-0487-8
   Whittle J, 2014, IEEE SOFTWARE, V31, P79, DOI 10.1109/MS.2013.65
   Whittle J, 2013, LECT NOTES COMPUT SC, V8107, P1, DOI 10.1007/978-3-642-41533-3_1
   Agner LTW, 2013, J SYST SOFTWARE, V86, P997, DOI 10.1016/j.jss.2012.11.023
   WOHLIN Claes, 2014, P 18 INT C EVALUATIO, DOI [10.1145/2601248.2601268.10, 10.1145/2601248.2601268]
NR 188
TC 16
Z9 16
U1 2
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 685
EP 750
DI 10.1007/s11219-016-9350-6
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200018
DA 2024-07-18
ER

PT J
AU Ghannem, A
   El Boussaidi, G
   Kessentini, M
AF Ghannem, Adnane
   El Boussaidi, Ghizlane
   Kessentini, Marouane
TI On the use of design defect examples to detect model refactoring
   opportunities
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Search-based software engineering; Design defects; Detection by example;
   Genetic algorithm
AB Design defects are symptoms of design decay, which can lead to several maintenance problems. To detect these defects, most of existing research is based on the definition of rules that represent a combination of software metrics. These rules are sometimes not enough to detect design defects since it is difficult to find the best threshold values; the rules do not take into consideration the programming context, and it is challenging to find the best combination of metrics. As an alternative, we propose in this paper to identify design defects using a genetic algorithm based on the similarity/distance between the system under study and a set of defect examples without the need to define detection rules. We tested our approach on four open-source systems to identify three potential design defects. The results of our experiments confirm the effectiveness of the proposed approach.
C1 [Ghannem, Adnane; El Boussaidi, Ghizlane] Ecole Technol Super, Software Engn & IT Dept, Montreal, PQ, Canada.
   [Kessentini, Marouane] Univ Michigan, CIS Dept, SBSE Res Lab, Ann Arbor, MI 48109 USA.
C3 University of Quebec; Ecole de Technologie Superieure - Canada;
   University of Michigan System; University of Michigan
RP Ghannem, A (corresponding author), Ecole Technol Super, Software Engn & IT Dept, Montreal, PQ, Canada.
EM Adnane.ghannem.1@ens.etsmtl.ca; ghizlane.elboussaidi@etsmtl.ca;
   marouane@umich.edu
CR Alikacem H., 2006, ACT 12 C LMO
   [Anonymous], P 23 INT C SOFTW ENG
   ben Fadhel A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P212, DOI 10.1109/ICSM.2012.6405274
   Brown JW, 1998, ANTIPATTERNS REFACTO, V336
   Du Bois B, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P144, DOI 10.1109/WCRE.2004.33
   El Boussaidi G, 2012, SOFTWARE PRACT EXPER, V42, P1495, DOI 10.1002/spe.1145
   Erni K, 1996, PROCEEDINGS OF THE 3RD INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, P64, DOI 10.1109/METRIC.1996.492444
   Fenton N.E., 1998, Software Metrics: A Rigorous and Practical Approach, P656
   Fowler M., 1999, P 2 XP UNIVERSE 1 AG, P256
   Genero M, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P195, DOI 10.1109/ISESE.2002.1166940
   Ghannem Adnane., 2011, P C CTR ADV STUDIES, P175
   Goldberg D.E., 1989, Genetic Algorithms in Search, Optimization and Machine Learning, P372, DOI DOI 10.1023/A:1022602019183
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1106
   Jensen und A.C., 2010, Proceedings of the 12th Annual Conference on Genetic and Evolutionary Computation. GECCO '10, P1341
   Kessentini M., 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, P113
   Kessentini M, 2011, LECT NOTES COMPUT SC, V6603, P401, DOI 10.1007/978-3-642-19811-3_28
   Kessentini M, 2008, LECT NOTES COMPUT SC, V5301, P159, DOI 10.1007/978-3-540-87875-9_12
   Kessentini W, 2014, IEEE T SOFTWARE ENG, V40, P841, DOI 10.1109/TSE.2014.2331057
   Khomh F, 2009, INT CONF QUAL SOFTW, P305, DOI 10.1109/QSIC.2009.47
   Koza J. R., 1992, GENETIC PROGRAMMING, P680
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Mens T., 2007, P 1 WORKSH REF TOOLS
   Moha N, 2008, IEEE T, V36, P20
   O'Keeffe M, 2008, J SOFTW MAINT EVOL-R, V20, P345, DOI 10.1002/smr.378
   Ouni A, 2013, AUTOMAT SOFTW ENG, V20, P47, DOI 10.1007/s10515-011-0098-8
   Palomba F, 2013, IEEE INT CONF AUTOM, P268, DOI 10.1109/ASE.2013.6693086
   Seng O, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1909
   v Kempen M., 2005, P THE2005 ANN RES C, P252
   Van Der Straeten R, 2007, SOFTW SYST MODEL, V6, P139, DOI 10.1007/s10270-006-0025-9
   Zhang J, 2005, MODEL-DRIVEN SOFTWARE DEVELOPMENT, P199, DOI 10.1007/3-540-28554-7_9
NR 30
TC 28
Z9 28
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2016
VL 24
IS 4
BP 947
EP 965
DI 10.1007/s11219-015-9271-9
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED6GL
UT WOS:000388954000005
DA 2024-07-18
ER

PT J
AU Gerpheide, CM
   Schiffelers, RRH
   Serebrenik, A
AF Gerpheide, Christine M.
   Schiffelers, Ramon R. H.
   Serebrenik, Alexander
TI Assessing and improving quality of QVTo model transformations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; QVTo; Model transformations; Quality model; Developer
   tooling; Test coverage
AB We investigate quality improvement in QVT operational mappings (QVTo) model transformations, one of the languages defined in the OMG standard on model-to-model transformations. Two research questions are addressed. First, how can we assess quality of QVTo model transformations? Second, how can we develop higher-quality QVTo transformations? To address the first question, we utilize a bottom-up approach, starting with a broad exploratory study including QVTo expert interviews, a review of existing material, and introspection. We then formalize QVTo transformation quality into a QVTo quality model. The quality model is validated through a survey of a broader group of QVTo developers. We find that although many quality properties recognized as important for QVTo do have counterparts in general purpose languages, a number of them are specific to QVTo or model transformation languages. To address the second research question, we leverage the quality model to identify developer support tooling for QVTo. We then implemented and evaluated one of the tools, namely a code test coverage tool. In designing the tool, code coverage criteria for QVTo model transformations are also identified. The primary contributions of this paper are a QVTo quality model relevant to QVTo practitioners and an open-source code coverage tool already usable by QVTo transformation developers. Secondary contributions are a bottom-up approach to building a quality model, a validation approach leveraging developer perceptions to evaluate quality properties, code test coverage criteria for QVTo, and numerous directions for future research and tooling related to QVTo quality.
C1 [Gerpheide, Christine M.; Serebrenik, Alexander] Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands.
   [Schiffelers, Ramon R. H.] ASML NV, Run 6501, NL-5504 DR Veldhoven, Netherlands.
C3 Eindhoven University of Technology; ASML Holding
RP Gerpheide, CM (corresponding author), Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM christine.ger@phei.de; r.r.h.schiffelers@tue.nl; a.serebrenik@tue.nl
OI Serebrenik, Alexander/0000-0002-1418-0095
CR Ab Rahim L, 2015, SOFTW SYST MODEL, V14, P1003, DOI 10.1007/s10270-013-0358-0
   Amrani Moussa., 2012, P 1 WORKSHOP ANAL MO, P3
   [Anonymous], 2011, ISO 13314
   [Anonymous], 2014, EC PLUG MEAS QVTO TE
   [Anonymous], 2010, THESIS
   [Anonymous], 2005, 11 IEEE INT S
   [Anonymous], 2005, ENCY STAT BEHAV SCI, DOI DOI 10.1002/0470013192.BSA313
   [Anonymous], 2014, CONTR FLOW AN JAV ME
   [Anonymous], 2014, ECL COMM FOR QVT OML
   [Anonymous], 2014, PATCH QVTOS ENGINE A
   Barendrecht P. J., 2010, THESIS
   Barnette JJ, 2000, EDUC PSYCHOL MEAS, V60, P361, DOI 10.1177/00131640021970592
   Beck K., 2011, MANIFESTO AGILE SOFT
   Ciancone A, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P97, DOI 10.1109/QUATIC.2010.15
   Del Fabro MD, 2009, SOFTW SYST MODEL, V8, P305, DOI 10.1007/s10270-008-0094-z
   Easterbrook S., 2008, GUIDE ADV EMPIRICAL, P285, DOI [DOI 10.1007/978-1-84800-044-5_11, DOI 10.1007/978-1-84800-044-511]
   Ehrig H, 2005, LECT NOTES COMPUT SC, V3442, P49, DOI 10.1007/978-3-540-31984-9_5
   Ergin H., 2013, ACM SE REG C
   Ferenc Rudolf., 2014, Evolving Software Systems, P65, DOI DOI 10.1007/978-3-642-45398-4_3
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   France Telecom, 2014, SMARTQVT
   Gerpheide C. M., 2014, 0014 9 INT C QUAL IN
   Gerpheide C.M., 2014, THESIS
   Gerpheide CM, 2014, ERCIM NEWS, P32
   Gniesser P., 2012, THESIS
   Guana V, 2014, LECT NOTES COMPUT SC, V8568, P146
   Guduric P, 2009, PROCEEDINGS OF THE 2009 SIXTH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, VOLS 1-3, P266, DOI 10.1109/ITNG.2009.156
   Hall T, 1997, IEEE SOFTWARE, V14, P55, DOI 10.1109/52.582975
   ISO/IEC, 2014, ISO/IEC 25000 Systems and software engineering-Systems and software Quality Requirements and Evaluation (SQuaRE)
   Johns R., 2010, LIKERT ITEMS SCALES
   Kapová L, 2010, LECT NOTES COMPUT SC, V6093, P151, DOI 10.1007/978-3-642-13821-8_12
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   Kitchenham B., 2004, ARXIV
   Kitchenham B. A., 1996, SIGSOFT Software Engineering Notes, V21, P11, DOI 10.1145/381790.381795
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kolandouz-Rahimi S, 2014, SCI COMPUT PROGRAM, V85, P5, DOI 10.1016/j.scico.2013.07.013
   Kusel A., 2013, 2 WORKSH AN MOD TRAN, P1077
   Lehrig S., 2012, THESIS
   Lin YH, 2005, MODEL-DRIVEN SOFTWARE DEVELOPMENT, P219, DOI 10.1007/3-540-28554-7_10
   McQuillan J.A., 2009, 1 INT WORKSH MOD TRA
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Mohagheghi P., 2007, WORKSH QUAL MOD, P3
   Moody Daniel L., 2003, P 11 EUR C INF SYST, P1337
   Moody DL, 2005, DATA KNOWL ENG, V55, P243, DOI 10.1016/j.datak.2004.12.005
   Mordal K, 2013, J SOFTW-EVOL PROC, V25, P1117, DOI 10.1002/smr.1558
   Nolte Siegfried, 2010, QVT OPERATIONAL MAPP
   Oliveira P, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P254, DOI 10.1109/CSMR-WCRE.2014.6747177
   OMG, 2011, MOF 2 0 QUER VIEW TR
   OMG, 2012, OBJ CONSTR LANG
   Orejas F, 2009, LECT NOTES COMPUT SC, V5728, P383, DOI 10.1007/978-3-642-03741-2_26
   Paige RF, 2012, SOFTW SYST MODEL, V11, P527, DOI 10.1007/s10270-012-0257-9
   Planas Elena, 2011, 3 INT WORKSH MOD TRA
   Ramamoorthy C. V., 1975, SIGPLAN Notices, V10, P382, DOI 10.1145/390016.808461
   Rentschler Andreas, 2013, Theory and Practice of Model Transformations. 6th International Conference, ICMT 2013. Proceedings: LNCS 7909, P141, DOI 10.1007/978-3-642-38883-5_14
   Rose LM, 2014, SOFTW SYST MODEL, V13, P323, DOI 10.1007/s10270-012-0245-0
   Santiago I, 2013, COMM COM INF SC, V417, P229
   Schiffelers R.R.H., 2012, P 6 INT WORKSH MULT, P55
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Selim G.M., 2012, Proceedings of the First Workshop on the Analysis of Model Transformations, P21
   Selim G. M., 2012, TECHNICAL REPORT
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   Syriani E., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P929, DOI 10.1109/ICST.2012.198
   van Amstel Marcel F., 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P152, DOI 10.1007/978-3-642-30476-7_10
   van Amstel Marcel F., 2011, Theory and Practice of Model Transformations. Proceedings of the 4th International Conference, ICMT 2011, P108, DOI 10.1007/978-3-642-21732-6_8
   van Amstel M.M., 2012, THESIS
   van Amstel Marcel F, 2010, P 9 BELG NETH SOFTW
   van Dongen M, 2012, THESIS
   Vasilescu Bogdan., 2011, Proceedings of the 2Nd International Workshop on Emerging Trends in Software Metrics, WETSoM '11, P23
   Vidmar G, 2007, COMPUTATION STAT, V22, P499, DOI 10.1007/s00180-007-0057-9
   Vignaga A, 2009, TECHNICAL REPORT
   Voelter M, 2009, J OBJECT TECHNOL, V8, P79, DOI 10.5381/jot.2009.8.6.c6
   Volter Markus., 2006, ECLIPSE SUMMIT EUROP, P27
NR 72
TC 17
Z9 17
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 797
EP 834
DI 10.1007/s11219-015-9280-8
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400014
OA hybrid, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Güldali, B
   Funke, H
   Sauer, S
   Engels, G
AF Gueldali, Baris
   Funke, Holger
   Sauer, Stefan
   Engels, Gregor
TI TORC: test plan optimization by requirements clustering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Linguistic analysis; Requirements clustering; Acceptance testing; Test
   planning; Acceptance criteria
AB Acceptance testing is a time-consuming task for complex software systems that have to fulfill a large number of requirements. To reduce this effort, we have developed a widely automated method for deriving test plans from requirements that are expressed in natural language. It consists of three stages: annotation, clustering, and test plan specification. The general idea is to exploit redundancies and implicit relationships in requirements specifications. Multi-viewpoint techniques based on RM-ODP (Reference Model for Open Distributed Processing) are employed for specifying the requirements. We then use linguistic analysis techniques, requirements clustering algorithms, and pattern-based requirements collection to reduce the total effort of testing against the requirements specification. In particular, we use linguistic analysis for extracting and annotating the actor, process and object of a requirements statement. During clustering, a similarity function is computed as a measure for the overlap of requirements. In the test plan specification stage, our approach provides capabilities for semi-automatically deriving test plans and acceptance criteria from the clustered informal textual requirements. Two patterns are applied to compute a suitable order of test activities. The generated test plans consist of a sequence of test steps and asserts that are executed or checked in the given order. We also present the supporting prototype tool TORC, which is available open source. For the evaluation of the approach, we have conducted a case study in the field of acceptance testing of a national electronic identification system. In summary, we report on lessons learned how linguistic analysis and clustering techniques can help testers in understanding the relations between requirements and for improving test planning.
C1 [Gueldali, Baris; Sauer, Stefan; Engels, Gregor] Univ Gesamthsch Paderborn, S Lab Software Qual Lab, D-33098 Paderborn, Germany.
   [Funke, Holger] HJP Consulting GmbH, D-33178 Borchen, Germany.
C3 University of Paderborn
RP Güldali, B (corresponding author), Univ Gesamthsch Paderborn, S Lab Software Qual Lab, Warburger Str 100, D-33098 Paderborn, Germany.
EM bguldali@s-lab.upb.de; holger.funke@hjp-consulting.com;
   sauer@s-lab.upb.de; engels@s-lab.upb.de
CR ABBOTT RJ, 1983, COMMUN ACM, V26, P882, DOI 10.1145/182.358441
   Al-Otaiby T. N., 2005, P 43 ANN SE REG C, P223
   [Anonymous], 1979, WORD MEANING MONTAGU, DOI DOI 10.1007/978-94-009-9473-7
   [Anonymous], 2000, P 8 EUR INT C SOFTW
   *ANSI IEEE, 8301984 ANSIIEEE
   Bradner S, 1997, 14 BCP
   *CERN, 1999, EUR ORG NUCL RES COL
   Chen K, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P31
   Dustin E., 1999, AUTOMATED SOFTWARE T
   Engels G, 2010, LECT NOTES COMPUT SC, V5765, P411, DOI 10.1007/978-3-642-17322-6_18
   Fewster M., 1999, Software test automation: effective use of test execution tools
   GEISSER M, 2007, 22007 U MANNH
   Goldin L., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P84, DOI 10.1109/ICRE.1994.292399
   Güldali B, 2009, IEEE INT CONF AUTOM, P29, DOI 10.1109/ASE.2009.86
   Guldali B., 2010, P 5 WORKSHOP AUTOMAT, P119
   *HJP CONS, 2005, GLOBALTESTER FRAM TE
   HSIA P, 1998, P 12 INT 5 7 OCT, P75
   HSIA P, 1992, SYST INT 1992 ICSI 9, P137, DOI DOI 10.1109/ICSI.1992.217275
   *INT CIV AV ORG, 2006, 9303 INT CIV AV OR 1, V1
   *INT CIV AV ORG, 2006, 9303 INT CIV AV OR 1, V2
   *ISO IEC, 107461199812 ISOIEC
   *ISO IEC, 107463199609 ISOIEC
   *ISO IEC, 107462199609 ISOIEC
   *ISO IEC, 107464199812 ISOIEC
   Jain AK, 1999, ACM COMPUT SURV, V31, P264, DOI 10.1145/331499.331504
   LI Z, 2007, P AN WER07 WORKSH EN, P92
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   MULLER T, 2007, CERTIFIED TESTER FDN
   *OBJ MAN GROUP, 2007, UML SPEC V2 1 1
   Rupp C., 2007, REQUIREMENTS ENG MAN, V4
   Salger Frank, 2010, Proceedings of the 2010 Fifth IEEE International Conference Global Software Engineering (ICGSE 2010), P336, DOI 10.1109/ICGSE.2010.46
   SNEED H, 2008, AUTOMATED REQUIREMEN
   Utting M., 2007, PRACTICAL MODEL BASE
   Wiggerts TA, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P33, DOI 10.1109/WCRE.1997.624574
   WINKELHANE P, 2010, THESIS U PADERBORN
   2008, STANFORD LEXICALIZED
NR 36
TC 2
Z9 4
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2011
VL 19
IS 4
SI SI
BP 771
EP 799
DI 10.1007/s11219-011-9149-4
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 814RN
UT WOS:000294474900008
DA 2024-07-18
ER

PT J
AU Bakir, A
   Turhan, B
   Bener, AB
AF Bakir, Ayse
   Turhan, Burak
   Bener, Ayse B.
TI A new perspective on data homogeneity in software cost estimation: a
   study in the embedded systems domain
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Application domain; Cost estimation; Data homogeneity; Embedded
   software; Machine learning
ID DESIGN; MODEL
AB Cost estimation and effort allocation are the key challenges for successful project planning and management in software development. Therefore, both industry and the research community have been working on various models and techniques to accurately predict the cost of projects. Recently, researchers have started debating whether the prediction performance depends on the structure of data rather than the models used. In this article, we focus on a new aspect of data homogeneity, "cross-versus within-application domain'', and investigate what kind of training data should be used for software cost estimation in the embedded systems domain. In addition, we try to find out the effect of training dataset size on the prediction performance. Based on our empirical results, we conclude that it is better to use cross-domain data for embedded software cost estimation and the optimum training data size depends on the method used.
C1 [Bakir, Ayse; Bener, Ayse B.] Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
   [Turhan, Burak] Natl Res Council Canada, Inst Informat Technol, Software Engn Grp, Ottawa, ON K1A 0R6, Canada.
C3 Bogazici University; National Research Council Canada
RP Bakir, A (corresponding author), Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
EM ayse.bakir@boun.edu.tr; Burak.Turhan@nrc-cnrc.gc.ca; bener@boun.edu.tr
RI Basar, Ayse/ABF-9265-2020; Turhan, Burak/G-7400-2011
OI Basar, Ayse/0000-0003-4934-8326; Turhan, Burak/0000-0003-1511-2163
FU Bogazici University [BAP 06HA104]; Tubitak [EEEAG 108E014]
FX This research is supported in part by Bogazici University research fund
   under grant number BAP 06HA104 and by Tubitak EEEAG 108E014.
CR Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   Alpaydin E, 2004, INTRO MACHINE LEARNI
   Alpaydin E., 1998, Proceedings of Engineering of Intelligent Systems, V2, P6
   ANGELIS L, 2000, J EMPIRICAL SOFTWARE, V5, P35, DOI DOI 10.1023/A:1009897800559
   [Anonymous], 2007, The promise repository of empirical software engineering data
   BASKELES B, 2007, SOFTWARE EFFORT ESTI, P1
   BOEHM BW, 1999, COCOMO 2 COQUALMO DA
   BOEHM BW, 1981, SOFTWARE ENG EC ADV
   BOEHM BW, 2009, COCOMO 2 MODEL DEFIN
   BOETTICHER GD, 2001, 1 INT WORKSH MOD BAS, P17
   BRIAND LC, 1992, IEEE T SOFTWARE ENG, V18, P931, DOI 10.1109/32.177363
   Debardelaben JA, 1997, IEEE DES TEST COMPUT, V14, P24, DOI 10.1109/54.605989
   Fausett L., 1994, FUNDAMENTALS NEURAL
   Foss T, 2003, IEEE T SOFTWARE ENG, V29, P985, DOI 10.1109/TSE.2003.1245300
   Gunn S. R., 1998, SUPPORT VECTOR MACHI
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   Kitchenham BA, 2007, IEEE T SOFTWARE ENG, V33, P316, DOI 10.1109/TSE.2007.1101
   KORTE M, 2008, CONFIDENCE SOFTWARE, P63, DOI DOI 10.1145/1370788.1370804
   LEUNG H, 2001, HDB SOFTWARE ENG KNO
   Lokan C, 2001, IEEE SOFTWARE, V18, P26, DOI 10.1109/52.951491
   MASON AK, 1992, P 3 ANN ART INT S
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2006, IEEE T SOFTWARE ENG, V32, P883, DOI 10.1109/TSE.2006.114
   OHSUGI N, 2007, 1 INT S EMP SOFTW EN
   OLIVEIRA MN, 2004, PATMOS 2004 INT WORK, V3254, P362
   PEREL RJ, 1994, P REG TECHN C SOC PL
   PREMRAJ R, 2007, ESEM 07, P393
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   Ragan D, 2002, DES AUT CON, P269, DOI 10.1109/DAC.2002.1012634
   SHALABI LA, 2006, IEEE P INT C DEP COM
   SHEPPERD MJ, 1996, P ICSE, V18, P170
   Smola A.J., 2003, TUTORIAL SUPPORT VEC
   SRINIVASAN K, 1995, IEEE T SOFTWARE ENG, V21, P126, DOI 10.1109/32.345828
   STENSRUD E, 1998, P 5 INT METR S
   Tiwari V., 1994, IEEE Transactions on Very Large Scale Integration (VLSI) Systems, V2, P437, DOI 10.1109/92.335012
   Vahid F., 2002, EMBEDDED SYSTEM DESI
   WALSTON CE, 1977, IBM SYST J, V16, P54, DOI 10.1147/sj.161.0054
   ZOTOS K, 2005, P ACIT AUTOMATION CO, V483
NR 38
TC 24
Z9 25
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2010
VL 18
IS 1
BP 57
EP 80
DI 10.1007/s11219-009-9081-z
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 546JH
UT WOS:000273806600004
DA 2024-07-18
ER

PT J
AU Seliya, N
   Khoshgoftaar, TM
AF Seliya, Naeem
   Khoshgoftaar, Taghi M.
TI Software quality estimation with limited fault data: a semi-supervised
   learning perspective
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Tools with Artificial Intelligence
CY NOV 15-17, 2004
CL Boca Raton, FL
SP IEEE Comp Soc, Informat Technol Res Inst, Wright State Univ, Florida Atlantic Univ
DE semi-supervised learning; software quality estimation; unlabeled data;
   software metrics; Expectation Maximization
ID CLASSIFICATION
AB We addresses the important problem of software quality analysis when there is limited software fault or fault-proneness data. A software quality model is typically trained using software measurement and fault data obtained from a previous release or similar project. Such an approach assumes that fault data is available for all the training modules. Various issues in software development may limit the availability of fault-proneness data for all the training modules. Consequently, the available labeled training dataset is such that the trained software quality model may not provide predictions. More specifically, the small set of modules with known fault-proneness labels is not sufficient for capturing the software quality trends of the project. We investigate semi-supervised learning with the Expectation Maximization (EM) algorithm for software quality estimation with limited fault-proneness data. The hypothesis is that knowledge stored in software attributes of the unlabeled program modules will aid in improving software quality estimation. Software data collected from a large NASA software project is used during the semi-supervised learning process. The software quality model is evaluated with multiple test datasets collected from other NASA software projects. Compared to software quality models trained only with the available set of labeled program modules, the EM-based semi-supervised learning scheme improves generalization performance of the software quality models.
C1 Univ Michigan, Dearborn, MI 48128 USA.
   Florida Atlantic Univ, Boca Raton, FL 33431 USA.
C3 University of Michigan System; University of Michigan; State University
   System of Florida; Florida Atlantic University
RP Seliya, N (corresponding author), Univ Michigan, 4901 Evergreen Rd, Dearborn, MI 48128 USA.
EM nseliya@umich.edu; taghi@cse.fau.edu
CR [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1996, HDB SOFTWARE RELIABI
   [Anonymous], J SYST SOFTWARE
   Blum A., 1998, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, P92, DOI 10.1145/279943.279962
   Brodley CE, 1999, J ARTIF INTELL RES, V11, P131, DOI 10.1613/jair.606
   Demirez A., 2000, APPL ALGORITHMS COMP
   Fung G, 2001, OPTIM METHOD SOFTW, V15, P29, DOI 10.1080/10556780108805809
   Ghahramani Z., 1994, ADV NEURAL INFORM PR, P120
   Gokhale S.S., 1997, PROC 3 ISSAT INT C R, P31
   Goldman SallyA., 2000, Proceedings of the Seventeenth International Conference on Machine Learning. ICML'00, P327
   Gray A. R., 1999, Empirical Software Engineering, V4, P297, DOI 10.1023/A:1009849100780
   Guo L, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P249, DOI 10.1109/ASE.2003.1240314
   Khoshgoftaar T. M., 2000, Empirical Software Engineering, V5, P313, DOI 10.1023/A:1009896203228
   Khoshgoftaar TM, 2005, INTELL DATA ANAL, V9, P3, DOI 10.3233/IDA-2005-9102
   Khoshgoftaar TM, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P203, DOI 10.1109/METRIC.2002.1011339
   Khoshgoftaar TM, 2003, EMPIR SOFTW ENG, V8, P325, DOI 10.1023/A:1025316301168
   KHOSHGOFTAAR TM, 2004, P 16 INT C SOFTW ENG, P226
   KHOSHGOFTAAR TM, 2003, P 15 INT C TOOLS ART
   Little R. J. A., 2019, Statistical Analysis with Missing Data, V793
   McCallum A., 1998, Proceedings of ICML-98, 15th International Conference on Machine Learning, P350
   Mitchell T. M., 1999, P 6 INT COLL COGN SC
   Nigam K., 2000, Proceedings of the Ninth International Conference on Information and Knowledge Management. CIKM 2000, P86, DOI 10.1145/354756.354805
   Nigam K, 1998, FIFTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-98) AND TENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICAL INTELLIGENCE (IAAI-98) - PROCEEDINGS, P792
   Ohlsson MC, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P217, DOI 10.1109/METRIC.2002.1011340
   Pizzi NJ, 2002, IEEE IJCNN, P2405, DOI 10.1109/IJCNN.2002.1007518
   Schneidewind NF, 2002, COMPUTER, V35, P77, DOI 10.1109/2.982919
   Schneidewind NF, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P328, DOI 10.1109/METRIC.2001.915540
   Seeger M., 2001, LEARNING LABELED UNL
   Suárez A, 1999, IEEE T PATTERN ANAL, V21, P1297, DOI 10.1109/34.817409
   WHITTEN IH, 2000, DATA MINING PRACTICA
NR 30
TC 48
Z9 65
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2007
VL 15
IS 3
BP 327
EP 344
DI 10.1007/s11219-007-9013-8
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 203OI
UT WOS:000248983500007
DA 2024-07-18
ER

PT J
AU Hall, GA
   Tao, WY
   Munson, JC
AF Hall, GA
   Tao, WY
   Munson, JC
TI Measurement and validation of module coupling attributes
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE coupling; software measurement; software metrics; modules; software
   design; measurement domains; principal component analysis
ID SYSTEM; FAILURES; QUALITY; METRICS
AB Module coupling is an important criterion for evaluating the quality of a software design. While the benefits of reduced module coupling are widely agreed upon, it has been difficult to measure coupling and thus understand it empirically. This study argues the definition of coupling, defines a set of coupling metrics based on the measurement of connections of a module within its running environment, and validates the set using principal component analysis. In an empirical study, the results indicate that these coupling metrics capture three distinct attributes of module coupling. These three attributes represent sources of variation not accounted for in the set of metric primitives and are appropriate for evaluating the coupling complexity of software. This study provides a set of validated measurements of the coupling complexity of software and a new way to evaluate module coupling measurements.
C1 Texas State Univ, Dept Comp Sci, San Marcos, TX 78666 USA.
   Univ Idaho, Dept Comp Sci, Moscow, ID 83844 USA.
C3 Texas State University System; Texas State University San Marcos; Idaho;
   University of Idaho
RP Texas State Univ, Dept Comp Sci, San Marcos, TX 78666 USA.
EM gh10@txstate.edu; jmunson@cs.uidaho.edu
CR Abreu FB, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P47, DOI 10.1109/CSMR.2001.914968
   Arisholm E, 2004, IEEE T SOFTWARE ENG, V30, P491, DOI 10.1109/TSE.2004.41
   Binkley AB, 1998, PROC INT CONF SOFTW, P452, DOI 10.1109/ICSE.1998.671604
   Briand L, 1997, PROC INT CONF SOFTW, P412, DOI 10.1145/253228.253367
   BRIAND L, 1999, IEEE INT C SOFTW MAI, P475, DOI DOI 10.1109/ICSM.1999.792645
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   FENTON N, 1990, J SYST SOFTWARE, V12, P177, DOI 10.1016/0164-1212(90)90038-N
   Fenton N.E., 1997, SOFTWARE METRICS
   Harrison R, 1998, FIFTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 1998, PROCEEDINGS, P150, DOI 10.1109/METRIC.1998.731240
   Hassoun Y, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P339, DOI 10.1109/CSMR.2004.1281436
   HUTCHENS DH, 1985, IEEE T SOFTWARE ENG, V11, P749, DOI 10.1109/TSE.1985.232524
   Jin ZY, 1996, SECOND IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS, P10, DOI 10.1109/ICECCS.1996.558321
   KAFURA D, 1981, J SYST SOFTWARE, V2, P121, DOI 10.1016/0164-1212(81)90032-7
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   LOHSE JB, 1984, J SYST SOFTWARE, V4, P301, DOI 10.1016/0164-1212(84)90029-3
   Ma CS, 2001, P INT COMP SOFTW APP, P538, DOI 10.1109/CMPSAC.2001.960665
   Munson J. C., 1989, Proceedings. 11th International Conference on Software Engineering (Cat. No.89CH2718-5), P245, DOI 10.1145/74587.74620
   MUNSON JC, 1993, J SYST SOFTWARE, V20, P217, DOI 10.1016/0164-1212(93)90065-6
   Munson JC, 1996, INFORM SOFTWARE TECH, V38, P687, DOI 10.1016/0950-5849(96)01117-2
   MUNSON JC, 1992, IEEE SOFTWARE    NOV, P48
   Myers G., 1974, Reliable Software Through Composite Design
   OFFUTT AJ, 1993, J SYST SOFTWARE, V20, P295, DOI 10.1016/0164-1212(93)90072-6
   Page-Jones M., 1980, The practical guide to structured systems design
   ROTENSTREICH S, 1994, SOFTWARE ENG J, V9, P83, DOI 10.1049/sej.1994.0011
   SELBY RW, 1991, IEEE T SOFTWARE ENG, V17, P141, DOI 10.1109/32.67595
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   TROY DA, 1981, J SYST SOFTWARE, V2, P113, DOI 10.1016/0164-1212(81)90031-5
   TURNER R, 1984, SOFTWARE ENG METHODO
   Xia F., 1996, Proceedings. 1996 Asia-Pacific Software Engineering Conference, P44, DOI 10.1109/APSEC.1996.566739
NR 29
TC 7
Z9 7
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2005
VL 13
IS 3
BP 281
EP 296
DI 10.1007/s11219-005-1753-8
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 946IW
UT WOS:000230566600005
DA 2024-07-18
ER

PT J
AU Georgiadou, E
   Berki, E
   Cordero, MD
   Ross, M
   Staples, G
AF Georgiadou, E
   Berki, E
   Cordero, MD
   Ross, M
   Staples, G
TI Towards formalised guidelines for migrating structured designs to UML: A
   case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE re-engineering; structured designs; OO; UML; isomorphic models; reuse;
   testing
AB This paper provides evidence that it is possible to migrate structured system designs to UML models. Legacy structured designs can be converted to object-oriented systems without losing data or functionality. The reason for choosing UML is that it is the new standard notation, which tries to build on and integrate object-oriented notations. Extracts from a case study are presented together with the proposed guidelines for the reengineering process.
C1 Middlesex Univ, Sch Comp Sci, London N14 4YZ, England.
   Univ Jyvaskyla, Dept Comp Sci & Informat Syst, FIN-40014 Jyvaskyla, Finland.
   Univ Valladolid, Fac Sci, High Tech Sch Comp Engn, Dept Informat, Valladolid, Spain.
   Southampton Inst, Fac Syst Engn, Southampton SO14 0YN, Hants, England.
C3 Middlesex University; University of Jyvaskyla; Universidad de
   Valladolid; Solent University
RP Georgiadou, E (corresponding author), Middlesex Univ, Sch Comp Sci, Trent Pk,Bramley Rd, London N14 4YZ, England.
EM e.georgiadou@mdx.ac.uk; eleni.berki@cc.jyu.fi;
   margaret.ross@solent.ac.uk
CR Allen Paul., 1998, Component-based development for enterprise systems: Applying the SE- LECT Perspective
   BERKI E, 1997, P INT S SOFTW ENG U
   BERKI E, 1996, P 5 SOFTW QUAL C U A
   BERKI E, 2001, THESIS U N LONDON
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Coad P., 1995, OBJECT MODELS STRATE
   EZRAN M, 2001, PRACTICAL SOFTWARE R
   GEORGIADOU E, 1995, P 3 INT C SOFTW QUAL
   HENDERSONSELLER B, 1996, P OOIS, P211
   JACKSON M, 1994, SOFTWARE ENG J, V11, P57
   Jayaratna N., 1994, Understanding and Evaluating Methodologies
   LAW D, 1992, P BCS  C CASE CURR P
   LAW D, 1998, METHODS COMP METHODS
   MANNINEN A, 2004, P 13 SQM C CANT
   MOHAMEDBAKRY W, 1909, P BITWORLD 99 S AFR
   PRESUMAN RS, 2004, SOFTWARE ENG PRACTIT
   ROSS M, 1997, TEMPORARY AWARENESS
   Sutcliffe AG, 1999, INT J HUM-COMPUT ST, V50, P213, DOI 10.1006/ijhc.1999.0245
   VISON DE, 1995, INFORMATION SYSTEMS
   WILKIE G, 1993, OBJECT ORIENTED SOFT
   Yourdon E., 1988, MODERN STRUCTURED AN
NR 21
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2005
VL 13
IS 1
BP 31
EP 69
DI 10.1007/s11219-004-5260-0
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898MD
UT WOS:000227080000003
DA 2024-07-18
ER

PT J
AU Krinke, J
AF Krinke, J
TI Slicing, chopping, and path conditions with barriers
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 3rd IEEE International Workshop on Source Code Analysis and Manipulation
CY SEP 26-27, 2003
CL AMSTERDAM, NETHERLANDS
SP IEEE Comp Soc, TC Software Engn, Netherlands Org Sci Res, Royal Netherlands Acad Arts & Sci
DE program slicing; program dependence graph; path conditions
ID PROGRAM; SOFTWARE
AB One of the critiques on program slicing is that slices presented to the user are hard to understand. This is mainly related to the problem that slicing 'dumps' the results onto the user without any explanation. This work will present an approach that can be used to 'filter' slices. This approach basically introduces 'barriers' which are not allowed to be passed during slice computation. An earlier filtering approach is chopping which is also extended to obey such a barrier. The barrier variants of slicing and chopping provide filtering possibilities for smaller slices and better comprehensibility. The concept of barriers is then applied to path conditions, which provide necessary conditions under which an influence between the source and target criterion exists. Barriers make those conditions more precise.
C1 Fernuniversitat, Hagen, Germany.
C3 Fern University Hagen
RP Krinke, J (corresponding author), Fernuniversitat, Hagen, Germany.
RI Krinke, Jens/E-9011-2011
OI Krinke, Jens/0000-0003-1009-2861
CR Anderson P., 2001, WORKSH INSP SOFTW EN
   [Anonymous], 1995, P 3 ACM SIGSOFT S FD
   Bates S., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P384, DOI 10.1145/158511.158694
   BECK J, 1993, PROC INT CONF SOFTW, P509, DOI 10.1109/ICSE.1993.346015
   BIEMAN JM, 1994, IEEE T SOFTWARE ENG, V20, P644, DOI 10.1109/32.310673
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   BINKLEY D, 1992, P IEEE C SOFTW MAINT, P41
   Canfora G, 1998, INFORM SOFTWARE TECH, V40, P595, DOI 10.1016/S0950-5849(98)00086-X
   Danicic S, 2000, PROC IEEE INT CONF S, P216, DOI 10.1109/ICSM.2000.883049
   De Lucia A, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P363, DOI 10.1109/CSMR.2003.1192445
   DeLucia A, 1996, FOURTH WORKSHOP ON PROGRAM COMPREHENSION, PROCEEDINGS, P9, DOI 10.1109/WPC.1996.501116
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fox C, 2004, SOFTWARE PRACT EXPER, V34, P15, DOI 10.1002/spe.556
   GALLAGHER K, 1997, SOFTW VIS WORKSH, P113
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Gallagher KB, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P52, DOI 10.1109/ICSM.1996.564988
   GRISWOLD WG, 2001, PASTE 01
   Gupta R., 1992, P IEEE C SOFTW MAINT, P299
   HARMAN M, 1995, J SOFTWARE TESTING V, V5, P143
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   JACKSON D, 1994, P 2 ACM SIGSOFT S FD, P2
   Krinke J, 1998, INFORM SOFTWARE TECH, V40, P661, DOI 10.1016/S0950-5849(98)00090-1
   Krinke J, 2002, PROC IEEE INT CONF S, P22, DOI 10.1109/ICSM.2002.1167744
   KRINKE J, 2004, INT C SOFTW MAINT
   Krinke J., 2003, THESIS U PASSAU
   Lyle J., 1987, Proceedings of the ICCEA, ICCEA'87, P877
   ORSO A, 2003, P 11 EUR SOFTW ENG C
   ORSO A, 2001, INT C SOFTW MAINT
   Ott L. M., 1989, Proceedings. 11th International Conference on Software Engineering (Cat. No.89CH2718-5), P198, DOI 10.1145/74587.74614
   Ott LM, 1998, INFORM SOFTWARE TECH, V40, P691, DOI 10.1016/S0950-5849(98)00092-5
   REPS T, 1994, P ACM SIGSOFT 94 S F, P11
   Robschink T, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P478, DOI 10.1109/ICSE.2002.1007992
   Snelting G., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P332
   SNELTING G, 2003, UNPUB EFFICIENT PATH
   Steindl C, 1998, LECT NOTES COMPUT SC, V1383, P264
   STEINDL C, 1999, WORKSH PROGR AN SOFT
   STURM T, 1998, AUTOMATED DEDUCTION, P58
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser MD., 1979, PROGRAM SLICES FORMA
NR 39
TC 19
Z9 22
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2004
VL 12
IS 4
BP 339
EP 360
DI 10.1023/B:SQJO.0000039792.93414.a5
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 850EE
UT WOS:000223593200005
DA 2024-07-18
ER

PT J
AU Chang, WK
   Chuang, MH
AF Chang, WK
   Chuang, MH
TI Performance monitoring of remote websites using mobile agents
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software quality assurance; mobile agent; load testing; stress testing;
   robustness; performance evaluation
AB In this paper, a mobile agent based approach is investigated to provide the underlying framework for monitoring the performance tests at a remote website. Mobile agents are autonomous and dynamic entities that can migrate between various nodes in the network. They offer many advantages over traditional design methodologies, including: reduction in network load, overcoming network latency and disconnected operations. This research aims to explore the adaptability of the mobile agent approach for website performance testing. It analyses the applicability of mobile agents in carrying out a monitoring task. We have designed and implemented the monitoring framework. The performance of mobile agents is compared with the non-agent approach. Analyzing the results for the same purpose and environments, the mobile agent approach performs better in reducing the load on the host server and saving communication bandwidth than the traditional approaches.
CR Chang W.-K., 2001, TUNGHAI SCI, V3, P97
   CHANG WK, 2001, 4 ROC S REL MAINT TA, P193
   Chao KM, 2001, P ANN INT IEEE EMBS, V23, P3484, DOI 10.1109/IEMBS.2001.1019582
   *CONC, 2002, JAV MOB AG TECHN
   d'Inverno M., 2001, SPRI SER AG TECHNOL, DOI 10.1007/978-3-662-04607-4
   DANIEL MJ, 2000, CLIENT SERVER SOFTWA
   Griss ML, 2001, COMPUTER, V34, P37, DOI 10.1109/2.920610
   *IBM, 2003, AGL SOFTW DEV KIT HO
   Menascé DA, 2002, IEEE INTERNET COMPUT, V6, P70, DOI 10.1109/MIC.2002.1020328
   Mich L, 2003, IEEE MULTIMEDIA, V10, P34, DOI 10.1109/MMUL.2003.1167920
   Milojicic D, 1999, IEEE CONCURR, V7, P80, DOI 10.1109/MCC.1999.788786
   Murch R., 1998, Intelligent Software Agents
   Probert RL, 2001, ACS/IEEE INTERNATIONAL CONFERENCE ON COMPUTER SYSTEMS AND APPLICATIONS, PROCEEDINGS, P474, DOI 10.1109/AICCSA.2001.934047
   Queloz PA, 2001, AUTON AGENT MULTI-AG, V4, P311, DOI 10.1023/A:1012711025262
   SPLAINE S, 2001, WEB TESTING HDB SOFT
   WALTON GH, 1995, SOFTWARE PRACT EXPER, V25, P97, DOI 10.1002/spe.4380250106
   *WEB PERF INC, 2003, WEB PERF TEST TOOLS
   *WEB PERF ORG, 2003, WEB PERF MON
NR 18
TC 6
Z9 6
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2004
VL 12
IS 2
BP 159
EP 176
DI 10.1023/B:SQJO.0000024061.17122.91
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 812OG
UT WOS:000220848200005
DA 2024-07-18
ER

PT J
AU Nadim, M
   Roy, B
AF Nadim, Md
   Roy, Banani
TI Utilizing source code syntax patterns to detect bug inducing commits
   using machine learning models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Bug inducing commit; Classification; Just in time (JIT) defect
   prediction; Source code syntax pattern; Token pattern; Token sequence;
   Deep belief network; Explainability of bug detection
ID DEVELOPERS
AB Detecting Bug Inducing Commit (BIC) or Just in Time (JIT) defect prediction using Machine Learning (ML) based models requires tabulated feature values extracted from the source code or historical maintenance data of a software system. Existing studies have utilized meta-data from source code repositories (we named them GitHub Statistics or GS), n-gram-based source code text processing, and developer's information (e.g., the experience of a developer) as the feature values in ML-based bug detection models. However, these feature values do not represent the source code syntax styles or patterns that a developer might prefer over available valid alternatives provided by programming languages. This investigation proposed a method to extract features from its source code syntax patterns to represent software commits and investigate whether they are helpful in detecting bug proneness in software systems. We utilize six manually and two automatically labeled datasets from eight open-source software projects written in Java, C++, and Python programming languages. Our datasets contain 642 manually labeled and 4014 automatically labeled buggy and non-buggy commits from six and two subject systems, respectively. The subject systems contain a diverse number of revisions, and they are from various application domains. Our investigation shows the inclusion of the proposed features increases the performance of detecting buggy and non-buggy software commits using five different machine learning classification models. Our proposed features also perform better in detecting buggy commits using the Deep Belief Network generated features and classification model. This investigation also implemented a state-of-the-art tool to compare the explainability of predicted buggy commits using our proposed and traditional features and found that our proposed features provide better reasoning about buggy commit detection compared to the traditional features. The continuation of this study can lead us to enhance software effectiveness by identifying, minimizing, and fixing software bugs during its maintenance and evolution.
C1 [Nadim, Md] USASK, Dept Comp Sci, Software Res Lab SRLab, Saskatoon, SK, Canada.
   [Roy, Banani] USASK, Dept Comp Sci, Saskatoon, SK, Canada.
C3 University of Saskatchewan; University of Saskatchewan
RP Nadim, M (corresponding author), USASK, Dept Comp Sci, Software Res Lab SRLab, Saskatoon, SK, Canada.
EM mdn769@usask.ca; banani.roy@usask.ca
OI Nadim, Md/0000-0003-1765-2462
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
   Discovery; NSERC Collaborative Research and Training Experience (CREATE)
FX This research is supported in part by the Natural Sciences and
   Engineering Research Council of Canada (NSERC) Discovery grants, and by
   an NSERC Collaborative Research and Training Experience (CREATE) grant.
CR albertbup, 2017, PYTH IMPL DEEP BEL N
   [Anonymous], 2006, Proceedings of the 14th ACM SIGSOFT international symposium on Foundations of software engineering (SIGSOFT '06/FSE-14), DOI 10.1145/1181775.1181781
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering (FSE'11), DOI [10.1145/2025113.2025121, DOI 10.1145/2025113.2025121]
   Asaduzzaman M., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P116, DOI 10.1109/MSR.2012.6224267
   Asaduzzaman M., 2011, IWSC, P77
   Asaduzzaman M, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P516, DOI [10.1145/2901739.2903500, 10.1109/MSR.2016.068]
   Aversano L., 2007, IWPSE 07 9 INT WORKS, P19
   Bavota G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P104, DOI 10.1109/SCAM.2012.20
   Bernardi ML, 2012, EUR CON SFTWR MTNCE, P139, DOI 10.1109/CSMR.2012.24
   Borg M, 2019, PROCEEDINGS OF THE 3RD ACM SIGSOFT INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE '19), P7, DOI 10.1145/3340482.3342742
   Brownlee J, 2017, A gentle introduction to the bag-of-words model [Online]. [Accessed 3 Feb. 2018]. Available at
   Canfora G., 2011, 2011 18th Working Conference on Reverse Engineering, P191, DOI 10.1109/WCRE.2011.31
   Casalnuovo C., 2019, DO PEOPLE PREFER NAT
   Cavnar W.B., 1994, Proceedings of SDAIR-94, 3rd Annual Symposium on Document Analysis and Information Retrieval, V48113, P161
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   da Costa DA, 2017, IEEE T SOFTWARE ENG, V43, P641, DOI 10.1109/TSE.2016.2616306
   Davies S, 2014, J SOFTW-EVOL PROC, V26, P107, DOI 10.1002/smr.1619
   Developers.Google, 2020, CLASS PREC REC MACH
   Developers.Google, 2020, CLASS ROC CURV AUC M
   Ell J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1471, DOI 10.1109/ICSE.2013.6606748
   Eyolfson J., 2011, WORKING C MINING SOF, P153, DOI DOI 10.1145/1985441.1985464
   Fukushima T., 2014, Proceedings of the 11th Working Conference on Mining Software Repositories, MSR 2014, P172, DOI DOI 10.1145/2597073.2597075
   Gu Z., 2010, ICSE 10, V1, P55, DOI DOI 10.1145/1806799.1806812
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Hinton GE, 2006, SCIENCE, V313, P504, DOI 10.1126/science.1127647
   Hinton GE, 2007, TRENDS COGN SCI, V11, P428, DOI 10.1016/j.tics.2007.09.004
   Hinton GE, 2006, NEURAL COMPUT, V18, P1527, DOI 10.1162/neco.2006.18.7.1527
   Hoang T, 2020, PROC INT CONF SOFTW, P518, DOI 10.1145/3377811.3380361
   Jeffrey D, 2009, INT C PROGRAM COMPRE, P70, DOI 10.1109/ICPC.2009.5090029
   Jiang JJ, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P298, DOI 10.1145/3213846.3213871
   Jimenez M, 2018, PROC IEEE INT CONF S, P437, DOI 10.1109/ICSME.2018.00053
   Kamei Y, 2016, EMPIR SOFTW ENG, V21, P2072, DOI 10.1007/s10664-015-9400-x
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   Kim S, 2006, Proceedings of the 2006 international workshop on Mining software repositories, P173
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Kim S, 2006, IEEE INT CONF AUTOM, P81
   Kirch W., 2008, ENCY PUBLIC HLTH, P1090, DOI [DOI 10.1007/978-1-4020-5614-7_2569, 10.1007/978-1-4020-5614-72569]
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Le Quoc V., 2014, P INT C MACH LEARN I
   Li K, 2020, PROC INT CONF SOFTW, P566, DOI 10.1145/3377811.3380360
   Liu K, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P31, DOI 10.1145/3293882.3330577
   liwerski J, 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [10.1145/1082983.1083147, DOI 10.1145/1083142.1083147, DOI 10.1145/1082983.1083147]
   Martinez M, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P492, DOI 10.1145/2591062.2591114
   Martínez M, 2015, EMPIR SOFTW ENG, V20, P176, DOI 10.1007/s10664-013-9282-8
   Mizuno Osamu, 2013, International Journal of Reliability and Safety, V7, P17
   Nadim M, 2020, THESIS U SASKATCHEWA
   Nadim M, 2020, INT WORKS SOFTW CLON, P15, DOI [10.1109/IWSC50091.2020.9047639, 10.1109/iwsc50091.2020.9047639]
   Nayrolles M, 2018, IEEE WORK CONF MIN S, P153, DOI 10.1145/3196398.3196438
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Pei Y, 2014, LECT NOTES COMPUT SC, V8411, P246
   Pornprasit C, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P407, DOI 10.1109/ASE51524.2021.9678763
   Pornprasit C, 2021, IEEE WORK CONF MIN S, P369, DOI 10.1109/MSR52588.2021.00049
   Rahman MM, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P621, DOI 10.1145/3236024.3236065
   Rosen C, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P966, DOI 10.1145/2786805.2803183
   Rosner B, 2006, BIOMETRICS, V62, P185, DOI 10.1111/j.1541-0420.2005.00389.x
   Shivaji S, 2013, IEEE T SOFTWARE ENG, V39, P552, DOI 10.1109/TSE.2012.43
   Sliwerski J., 2005, P 5 JOINT M EUROPEAN, P107
   Spearman C., 2008, Spearman Rank Correlation Coefficient, P502, DOI [DOI 10.1007/978-0-387-32833-1_379, 10.1007/978-0-387-32833-1_379]
   Tabassum S, 2020, PROC INT CONF SOFTW, P554, DOI 10.1145/3377811.3380403
   TAN M, 2015, P 37 IEEE ACM INT C, P99
   Taunk K, 2019, PROCEEDINGS OF THE 2019 INTERNATIONAL CONFERENCE ON INTELLIGENT COMPUTING AND CONTROL SYSTEMS (ICCS), P1255, DOI [10.1109/iccs45141.2019.9065747, 10.1109/ICCS45141.2019.9065747]
   Thong Hoang, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P34, DOI 10.1109/MSR.2019.00016
   Vieira R, 2019, 15TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING (PROMISE'19), P80, DOI 10.1145/3345629.3345639
   Virtanen P, 2020, NAT METHODS, V17, P261, DOI 10.1038/s41592-019-0686-2
   Wen M, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2020), P77, DOI 10.1145/3377816.3381743
   Wen M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P326, DOI 10.1145/3338906.3338962
   Wen M, 2016, IEEE INT CONF AUTOM, P262, DOI 10.1145/2970276.2970359
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Wu RX, 2018, EMPIR SOFTW ENG, V23, P2866, DOI 10.1007/s10664-017-9567-4
   Xin Q, 2019, 2019 IEEE/ACM 6TH INTERNATIONAL WORKSHOP ON GENETIC IMPROVEMENT (GI@ICSE 2019), P10, DOI 10.1109/GI.2019.00012
   Yang XL, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P17, DOI 10.1109/QRS.2015.14
   Yi Li, 2020, 2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE), P602, DOI 10.1145/3377811.3380345
   Yue RR, 2017, PROC IEEE INT CONF S, P422, DOI 10.1109/ICSME.2017.16
   Zeng ZR, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P427, DOI 10.1145/3460319.3464819
   Zhao R, 2018, IEEE T FUZZY SYST, V26, P794, DOI 10.1109/TFUZZ.2017.2690222
   Zibran M. F., 2012, P 27 ANN ACM S APPL, P1235
NR 78
TC 0
Z9 0
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 775
EP 807
DI 10.1007/s11219-022-09611-3
EA DEC 2022
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000906098100001
DA 2024-07-18
ER

PT J
AU Stray, V
   Florea, R
   Paruch, L
AF Stray, Viktoria
   Florea, Raluca
   Paruch, Lucas
TI Exploring human factors of the agile software tester
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Human traits; Soft skills; Agile software development;
   Agile tester
ID KNOWLEDGE; SKILLS
AB Although extensive research has been conducted on the characteristics of the agile developer, little attention has been given to the features of the software-testing role. This paper explores the human factors of the software testers working in agile projects through a qualitative study focusing on how these factors are perceived. We interviewed 22 agile software practitioners working in three international companies: 14 testers, five developers, and three designers. Additionally, we observed 11 meetings and daily work of 13 participants in one of the companies. Our findings show that the views on the human factors shaping the agile software tester's role were crystallized into seven traits, which the agile team members saw as central for the software-testing role: the ability to see the whole picture, good communication skills, detail-orientation, structuredness, creativeness, curiosity, and adaptability. The testers spent half their day communicating and learned how to mitigate the fact that they had to bring bad news to other project members. They also facilitated communication between the business side and development. Based on our results, we propose the seven traits as dimensions to consider for organizations recruiting agile software testers, as well as a reference for IT and non-IT professionals considering a software-testing career.
C1 [Stray, Viktoria; Florea, Raluca; Paruch, Lucas] Univ Oslo, Dept Informat, Oslo, Norway.
   [Stray, Viktoria] SINTEF Digital, Trondheim, Norway.
C3 University of Oslo; SINTEF
RP Stray, V (corresponding author), Univ Oslo, Dept Informat, Oslo, Norway.; Stray, V (corresponding author), SINTEF Digital, Trondheim, Norway.
EM stray@ifi.uio.no
RI Stray, Viktoria/E-9563-2016
OI Stray, Viktoria/0000-0002-6032-2074; Paruch, Lucas/0000-0003-3726-1231
FU Research Council of Norway [309344]
FX We would like to thank all the participants for their generous and
   thoughtful collaboration on this study and for allowing us to observe
   and conduct interviews. We extend a special thanks to the companies for
   making the collaboration setup possible and to the Research Council of
   Norway for their support through grant 309344.
CR Ahmed F, 2012, IT PROF, V14, P44, DOI 10.1109/MITP.2012.7
   [Anonymous], 2010, P 2010 ACM IEEE INT
   Bai A., 2017, INT J ADV SOFTWARE, V10
   Becker Howard S., 1998, Tricks of the trade: How to think about your research while you're doing it
   Braun V., 2012, APA HDB RES METHODS, P57, DOI [https://doi.org/10.1037/13620-004, 10.1007/978-981-10-2779-6_103-1, 10.1037/13620-004]
   Braun V., 2006, QUAL RES PSYCHOL, V3, P77, DOI [DOI 10.1191/1478088706QP063OA, 10.1191/1478088706qp063oa]
   Byrd TA, 2001, DECISION SCI, V32, P21, DOI 10.1111/j.1540-5915.2001.tb00952.x
   Calefato F., 2020, IEEE ACM INT C GLOB
   Capretz LF, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P262, DOI 10.1109/ICSE-Companion.2019.00105
   Capretz LF, 2015, COMPUT HUM BEHAV, V52, P373, DOI 10.1016/j.chb.2015.05.050
   Capretz LF, 2010, IT PROF, V12, P6, DOI 10.1109/MITP.2010.33
   Cavin JD, 2015, PROCEDIA MANUF, V3, P1535, DOI 10.1016/j.promfg.2015.07.416
   Cohn M, 2003, COMPUTER, V36, P74, DOI 10.1109/MC.2003.1204378
   Davidov M. B., 2010, GOOGLE PATENTS
   Deak A., 2013, Softw. Eng., V796
   Deak A, 2016, INFORM SOFTWARE TECH, V73, P1, DOI 10.1016/j.infsof.2016.01.002
   Deak A, 2014, LECT NOTES COMPUT SC, V8892, P1, DOI 10.1007/978-3-319-13835-0_1
   Deak A, 2014, LECT NOTES COMPUT SC, V8763, P161, DOI 10.1007/978-3-662-44857-1_11
   Dhir S, 2019, ADV INTELL SYST, V731, P691, DOI 10.1007/978-981-10-8848-3_67
   Dingsoyr T, 2019, IEEE SOFTWARE, V36, P30, DOI 10.1109/MS.2018.2884884
   Ebert C, 2001, IEEE SOFTWARE, V18, P62, DOI 10.1109/52.914748
   Ekwoge OM, 2017, P INT COMP SOFTW APP, P208, DOI 10.1109/COMPSAC.2017.232
   Faraj S, 2000, MANAGE SCI, V46, P1554, DOI 10.1287/mnsc.46.12.1554.12072
   Farnsworth V, 2016, BRIT J EDUC STUD, V64, P139, DOI 10.1080/00071005.2015.1133799
   Florea Raluca, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P299, DOI 10.1145/3383219.3383252
   Florea R, 2018, LECT NOTES BUS INF P, V314, P54, DOI 10.1007/978-3-319-91602-6_4
   Garousi V, 2020, IEEE SOFTWARE, V37, P68, DOI 10.1109/MS.2018.2880823
   Ghobadi S, 2016, INFORM SYST J, V26, P95, DOI 10.1111/isj.12053
   Goncalves W. F., 2017, P 2017 12 IB C INF S, P1, DOI DOI 10.23919/CISTI.2017.7975873
   ISTQB, 2019, FDN LEV SYLL VERS 20
   Itkonen J, 2013, IEEE T SOFTWARE ENG, V39, P707, DOI 10.1109/TSE.2012.55
   Jiang J, 2000, J SYST SOFTWARE, V52, P3, DOI 10.1016/S0164-1212(99)00128-4
   Juristo N, 2006, IEEE SOFTWARE, V23, P19, DOI 10.1109/MS.2006.104
   Kanij T, 2015, 2015 IEEE/ACM 8TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING CHASE 2015, P1, DOI 10.1109/CHASE.2015.7
   Kanij T, 2013, IEEE AUS SOFT ENGR, P180, DOI 10.1109/ASWEC.2014.32
   Karlström D, 2005, SOFTW TEST VERIF REL, V15, P145, DOI 10.1002/stvr.317
   Kettunen V., 2010, P 19 INT S SOFTW TES, P231, DOI [10.1145/1831708.1831737, DOI 10.1145/1831708.1831737]
   Kitchenham B., 2007, GUIDELINES PERFORMIN
   Korhonen K, 2013, SOFTWARE QUAL J, V21, P599, DOI 10.1007/s11219-012-9189-4
   Lethbridge TC, 2000, COMPUTER, V33, P44, DOI 10.1109/2.841783
   Li J, 2010, P 2010 IEEE INT S AP, P3, DOI [DOI 10.1109/ICIECS.2010.5678245, 10.1109/ISAF.2010.5712271, DOI 10.1109/ISAF.2010.5712271, 10.1145/1852786.1852804, DOI 10.1145/1852786.1852804]
   Li PL, 2020, EMPIR SOFTW ENG, V25, P322, DOI 10.1007/s10664-019-09773-y
   Lindstrom L, 2004, INFORM SYST MANAGE, V21, P41, DOI 10.1201/1078/44432.21.3.20040601/82476.7
   Lizama Y., 2020, ADV RAMS ENG, P185
   Mahmud J, 2014, SOFTW TEST VERIF REL, V24, P61, DOI 10.1002/stvr.1484
   Mathur S., 2010, Int. J. Comput. Appl, V1, P29, DOI 10.5120/266
   Matturro G, 2013, 2013 6TH INTERNATIONAL WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE), P133, DOI 10.1109/CHASE.2013.6614749
   Novet Jordan., 2021, CNBC
   Paruch Lucas, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P371, DOI 10.1145/3383219.3383270
   Paruch L., 2020, INT C QUAL INF COMM, P474, DOI DOI 10.1007/978-3-030-58793-2_38
   Patton M. Q., 2002, QUALITATIVE RES EVAL
   Perez Renteria y Hernandez Tabata, 2014, Proceedings of the 9th International Conference on Software Engineering and Applications ICSOFT-EA 2014, P305
   Rafi D. M., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P36, DOI 10.1109/IWAST.2012.6228988
   Runeson Per, 2012, Case study research in software engineering: Guidelines and examples
   Saiedian H, 2000, INFORM SOFTWARE TECH, V42, P419, DOI 10.1016/S0950-5849(99)00101-9
   Salman I, 2019, EMPIR SOFTW ENG, V24, P1727, DOI 10.1007/s10664-018-9668-8
   Sanchez-Gordon M., 2020, 42 INT C SOFTW ENG W, P161
   Santos dos A. M., 2011, IN 2011 12 LAT AM TE, P1, DOI [10.1109/LATW.2011.5985897, DOI 10.1109/LATW.2011.5985897]
   Santos RES, 2017, INT SYMP EMP SOFTWAR, P95, DOI 10.1109/ESEM.2017.16
   Shah H, 2010, 2010 ICSE WORKSHOP ON COOPERATIVE AND HUMAN ASPECTS OF SOFTWARE ENGINEERING (CHASE 2010), P102
   Stray V, 2020, J SYST SOFTWARE, V170, DOI 10.1016/j.jss.2020.110717
   Yang C, 2016, J SYST SOFTWARE, V111, P157, DOI 10.1016/j.jss.2015.09.028
   Yin R. K., 2018, Case Study Research and Applications: Design and Methods, DOI DOI 10.1016/J.TECHFORE.2018.10.013
NR 63
TC 8
Z9 9
U1 4
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 455
EP 481
DI 10.1007/s11219-021-09561-2
EA JUN 2021
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000661785200001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Moghadam, MH
   Saadatmand, M
   Borg, M
   Bohlin, M
   Lisper, B
AF Moghadam, Mahshid Helali
   Saadatmand, Mehrdad
   Borg, Markus
   Bohlin, Markus
   Lisper, Bjorn
TI An autonomous performance testing framework using self-adaptive fuzzy
   reinforcement learning
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Performance testing; Stress testing; Test case generation; Reinforcement
   learning; Autonomous testing
ID WORKLOAD; SYSTEMS
AB Test automation brings the potential to reduce costs and human effort, but several aspects of software testing remain challenging to automate. One such example is automated performance testing to find performance breaking points. Current approaches to tackle automated generation of performance test cases mainly involve using source code or system model analysis or use-case-based techniques. However, source code and system models might not always be available at testing time. On the other hand, if the optimal performance testing policy for the intended objective in a testing process instead could be learned by the testing system, then test automation without advanced performance models could be possible. Furthermore, the learned policy could later be reused for similar software systems under test, thus leading to higher test efficiency. We propose SaFReL, a self-adaptive fuzzy reinforcement learning-based performance testing framework. SaFReL learns the optimal policy to generate performance test cases through an initial learning phase, then reuses it during a transfer learning phase, while keeping the learning running and updating the policy in the long term. Through multiple experiments in a simulated performance testing setup, we demonstrate that our approach generates the target performance test cases for different programs more efficiently than a typical testing process and performs adaptively without access to source code and performance models.
C1 [Moghadam, Mahshid Helali; Saadatmand, Mehrdad; Borg, Markus] RISE Res Inst Sweden, Vasteras, Sweden.
   [Moghadam, Mahshid Helali; Saadatmand, Mehrdad; Borg, Markus] RISE Res Inst Sweden, Lund, Sweden.
   [Moghadam, Mahshid Helali; Bohlin, Markus; Lisper, Bjorn] Malardalen Univ, Hgsk Plan 1, S-72220 Vasteras, Sweden.
C3 RISE Research Institutes of Sweden; RISE Research Institutes of Sweden;
   Malardalen University
RP Moghadam, MH (corresponding author), RISE Res Inst Sweden, Vasteras, Sweden.; Moghadam, MH (corresponding author), RISE Res Inst Sweden, Lund, Sweden.; Moghadam, MH (corresponding author), Malardalen Univ, Hgsk Plan 1, S-72220 Vasteras, Sweden.
EM mahshid.helali.moghadam@ri.se; mehrdad.saadatmand@ri.se;
   markus.borg@ri.se; markus.bohlin@mdh.se; bjorn.lisper@mdh.se
RI Helali Moghadam, Mahshid/AAM-8026-2021; Borg, Markus/F-3609-2010
OI Helali Moghadam, Mahshid/0000-0003-3354-1463; Borg,
   Markus/0000-0001-7879-4371
FU RISE Research Institutes of Sweden
FX Open access funding provided by RISE Research Institutes of Sweden.
CR Adamoli A, 2011, SOFTWARE QUAL J, V19, P801, DOI 10.1007/s11219-011-9135-x
   Ahmad T, 2019, EUROMICRO CONF PROC, P156, DOI 10.1109/SEAA.2019.00032
   [Anonymous], 2019, 25000 ISO
   [Anonymous], 2012, Non-functional requirements in software engineering
   [Anonymous], 2008, SCHOLARPEDIA, DOI DOI 10.4249/scholarpedia.2925
   Apte Varsha., 2017, Proceedings of the 8th ACM/SPEC on International Conference on Performance Engineering, P115, DOI DOI 10.1145/3030207.3030222
   Ayala-Rivera V, 2018, PROCEEDINGS OF THE 2018 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '18), P211, DOI 10.1145/3184407.3184418
   Babovic ZB, 2016, IEEE ACCESS, V4, P6974, DOI 10.1109/ACCESS.2016.2615181
   Briand LC, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1021
   Brunnert A., 2015, Performance-oriented DevOps: A research agenda
   Cortellessa V, 2011, MODEL-BASED SOFTWARE PERFORMANCE ANALYSIS, P1, DOI 10.1007/978-3-642-13621-4
   Costa Leandro T., 2012, SEKE, P112
   de Sousa Santos I., 2011, Proceedings of the 23rd International Conference on Software Engineering Knowledge Engineering (SEKE 2011), P258
   Denaro G., 2004, Software Engineering Notes, V29, P94, DOI 10.1145/974043.974059
   Di Penta M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1090
   Draheim D, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P55
   Ferme V, 2018, PROCEEDINGS OF THE 2018 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '18), P261, DOI 10.1145/3184407.3184417
   Ferme V, 2017, ICPE'17: COMPANION OF THE 2017 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING, P159, DOI 10.1145/3053600.3053636
   Fowler K, 2010, MISSION-CRITICAL AND SAFETY-CRITICAL SYSTEMS HANDBOOK: DESIGN AND DEVELOPMENT FOR EMBEDDED APPLICATIONS, P1
   Garousi V., 2008, 10 ANN C GENETIC EVO, P1743
   Garousi V, 2008, J SYST SOFTWARE, V81, P161, DOI 10.1016/j.jss.2007.05.037
   Garousi V, 2010, IEEE T SOFTWARE ENG, V36, P778, DOI 10.1109/TSE.2010.5
   Glinz M, 2007, INT REQUIR ENG CONF, P21, DOI 10.1109/RE.2007.45
   Grechanik M, 2012, PROC INT CONF SOFTW, P156, DOI 10.1109/ICSE.2012.6227197
   Gregg B., 2013, SYSTEMS PERFORMANCE, V1st, DOI DOI 10.5555/2568162
   Grinshpan Leonid., 2012, Solving enterprise applications performance puzzles: queuing models to the rescue
   Gu YY, 2009, WISM: 2009 INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS AND MINING, PROCEEDINGS, P320, DOI 10.1109/WISM.2009.73
   Harchol-Balter Mor, 2013, Performance modeling and design of computer systems: queueing theory in action
   Hill JH, 2010, IEEE SOFTWARE, V27, P65, DOI 10.1109/MS.2009.197
   Ibidunmoye O, 2017, PROCEEDINGS OF THE 10TH INTERNATIONAL CONFERENCE ON UTILITY AND CLOUD COMPUTING (UCC' 17), P19, DOI 10.1145/3147213.3147225
   Ibidunmoye O, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2791120
   Jamshidi P, 2016, 2016 12TH INTERNATIONAL ACM SIGSOFT CONFERENCE ON QUALITY OF SOFTWARE ARCHITECTURES (QOSA), P70, DOI 10.1109/QoSA.2016.13
   Jennings B, 2015, J NETW SYST MANAG, V23, P567, DOI 10.1007/s10922-014-9307-7
   Jiang ZM, 2015, IEEE T SOFTWARE ENG, V41, P1091, DOI 10.1109/TSE.2015.2445340
   Jindal A, 2019, PROCEEDINGS OF THE 2019 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '19), P25, DOI 10.1145/3297663.3310309
   Kant K., 1992, Introduction to computer system performance evaluation
   Kolesnikov S, 2019, SOFTW SYST MODEL, V18, P2265, DOI 10.1007/s10270-018-0662-9
   Koo J, 2019, IEEE INT CONF SOFTW, P136, DOI 10.1109/ICST.2019.00023
   Lutteroth C, 2008, IEEE INT ENTERP DIST, P149, DOI 10.1109/EDOC.2008.40
   Maddodi G, 2018, PROCEEDINGS OF THE 2018 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '18), P200, DOI 10.1145/3184407.3184432
   Malik H, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1012, DOI 10.1109/ICSE.2013.6606651
   Malik H, 2010, EUR CON SFTWR MTNCE, P222, DOI 10.1109/CSMR.2010.39
   MathWorks, 2019, FUZZ INF PROC
   Menasce D A., 2002, Computer Measurement Group (CMG) Conference, P271
   Michael N., 2017, Proc. 8th ACM/SPEC Intl. Conf. Performance Engineering, P189, DOI DOI 10.1145/3030207
   Moghadam MH, 2019, IEEE ICST WORKSHOP, P164, DOI 10.1109/ICSTW.2019.00046
   Moghadam MH, 2018, 2018 IEEE/ACM 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P217, DOI 10.1145/3194133.3194153
   Morabito R, 2017, IEEE ACCESS, V5, P8835, DOI 10.1109/ACCESS.2017.2704444
   NS8, 2018, DID YOU KNOW SLOW WE
   Prasad NR, 2009, CMC-COMPUT MATER CON, V14, P1, DOI 10.1145/1541880.1541882
   Schulz H, 2019, PROCEEDINGS OF THE 2019 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '19), P265, DOI 10.1145/3297663.3309674
   Shams M., 2006, SOQUA 06, P54, DOI DOI 10.1145/1188895.1188909
   Sutton RS, 2018, ADAPT COMPUT MACH LE, P1
   Syer M. D., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P83, DOI 10.1109/ICSM.2011.6080775
   Taheri J, 2016, LECT NOTES COMPUT SC, V9846, P18, DOI 10.1007/978-3-319-44482-6_2
   Veni T., 2016, International Journal of Big Data Intelligence, V3, P145
   Venkataraman S, 2016, 13TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI '16), P363
   Vogele Christian, 2018, Softw Syst Model, V17, P443, DOI 10.1007/s10270-016-0566-5
   Walter J, 2016, PROCEEDINGS OF THE 2016 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE'16), P91, DOI 10.1145/2851553.2858662
   Weyuker EJ, 2000, IEEE T SOFTWARE ENG, V26, P1147, DOI 10.1109/32.888628
   Yang C.-S. D., 1996, SIGSOFT Software Engineering Notes, V21, P201, DOI 10.1145/226295.226318
   Zhang J, 2002, SOFTWARE PRACT EXPER, V32, P1411, DOI 10.1002/spe.487
   Zhang P, 2012, P 2012 INT S SOFTW T, P89, DOI DOI 10.1145/2338965.2336764
   ZHANG P, 2011, ASE, P43
NR 64
TC 3
Z9 4
U1 2
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 127
EP 159
DI 10.1007/s11219-020-09532-z
EA MAR 2021
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000627215600001
OA hybrid
DA 2024-07-18
ER

PT J
AU da Silva, CD
   de Vasconcelos, AML
AF da Silva, Cristiano Domingues
   Lins de Vasconcelos, Alexandre Marcos
TI Using the IDEAL model for the construction of a deployment framework of
   IT Service Desks at the Brazilian Federal Institutes of Education
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE IT service center; Service Desk; IT service management; IDEAL model; IT
   quality of service
AB Brazilian Federal Institutes of Education, Science and Technology (FIs) have expanded through multicampi structure, which has led to profound changes in their administrative and academic organization. As consequence of this expansion, the demand for services, systems, and information technology (IT) solutions has increased; and the support service's provision has become much more relevant. However, a diagnosis of the quality of the IT support services, performed with the FI's CIOs, has shown that the service's provision in these institutions is below required. There are several problems encountered, such as political and cultural issues, lack of stakeholder involvement, insufficient staff, resistance to change, lack of priorities, excessive demands, lack of knowledge of best practices, and the use of inappropriate tools. So, there is a clear need to develop a proposal to help the FIs to improve their IT support services. The Service Desk is an alternative, since it implements a unique interface between users and the IT sector, however, with a broader role than just the technical support, as it embraces processes, people, and technologies geared to IT management. This work aimed to develop a framework, with a practical approach on "how to do," which guides the implementation and/or the improvement of Service Desks of the Federal Institutes. The proposal sought incorporates several practices related to Service Desk, identified in ITIL, ISO 20000, CMMI-SVC, and MR-MPS-SV models, creating a deployment and/or improvement approach through a life cycle framework, based on the IDEAL model, and a process toolbox, structured according to the seven dimensions of the EPMF. The research is relevant due to the lack of guidelines for the implementation and/or improvement of Service Desks from a practical point of view, since the main models found focus on "what has to be done," and little on "how to do." The IT support service's current situation diagnosis in the IFs showed that the service provisioning was less than expected. The need to develop a proposal to help the FIs to improve the IT support service became evident, and the QoS-IT framework emerged. After the framework's development, it was evaluated by IFs specialists and, posteriorly, it was used and evaluated in the context of a specific Federal Institute. Finally, a gap analysis was done between user satisfaction surveys, comparing the results obtained before and after the Service Desk deployment at the Federal Institute, which presented evidences of a positive impact on the service provision after using the framework.
C1 [da Silva, Cristiano Domingues; Lins de Vasconcelos, Alexandre Marcos] Univ Fed Pernambuco UFPE, Ctr Informat, Ave Prof Luis Freire S-N, BR-50740546 Recife, Pe, Brazil.
   [da Silva, Cristiano Domingues] Inst Fed Educ Ciencia & Tecnol Goias IFG, Ave C-198,Qd 500, BR-74270040 Goiania, Go, Brazil.
C3 Universidade Federal de Pernambuco; Instituto Federal de Goias (IFG)
RP de Vasconcelos, AML (corresponding author), Univ Fed Pernambuco UFPE, Ctr Informat, Ave Prof Luis Freire S-N, BR-50740546 Recife, Pe, Brazil.
EM cristiano.silva@ifg.edu.br; amlv@cin.ufpe.br
CR ABNT, 2011, 2000012011 ABNT NBR
   ABPMP, 2013, BPM CBOK GUIA GER PR
   [Anonymous], 2010, TECHNICAL REPORT
   Brasil, 2016, EXP ED SUP PROF TECN
   Brigano G.U., 2010, 4 WORKSH AN MPS CAMP
   Cougo P.S, 2013, ITIL GUIA IMPLANTACA
   De Araujo L.L., 2014, 8 S BRAS QUAL SOFTW
   Elephant P, 2019, ITIL PROCESS IMPLEME
   Feigenbaum A.V., 1961, Total Quality Control
   Fernandes A.A., 2014, Implantando a Governanca de TI, V4a
   Foidl H, 2018, SOFTWARE QUAL J, V26, P809, DOI 10.1007/s11219-016-9345-3
   Halcsik A.G., 2011, GARANTIA QUALIDADE S
   Ishikawa K., 1993, Controle de qualidade total a maneira Japonesa
   Jantti M., 2012, INT J ADV SYSTEMS ME, V5, P203
   Juran J., 1992, A Qualidade desde o Projeto: Novos Passos para o Planejamento da Qualidade em Produtos e Servicos
   Keller A, 2010, IEEE IFIP NETW OPER, P685, DOI 10.1109/NOMS.2010.5488378
   Kitchenham B., 2007, 2007001 EBSE
   Kruchten P, 2003, INTRO AO RUP RATIONA
   Likert R., 1932, TECHNIQUE MEASUREMEN, DOI 1933-01885-001
   Marconi M.A., 2010, FUNDAMENTOS METODOLO, V7A
   Mcfeeley B, 1996, SOFTWARE ENG I HDB
   Montesi M, 2008, J SYST SOFTWARE, V81, P1694, DOI 10.1016/j.jss.2007.11.723
   OGC, 2007, ITIL OFF INTR ITIL S
   PARASURAMAN A, 1988, J RETAILING, V64, P12
   PMBOK, 2013, GUIA CONH GER PROJ
   Rodrigues G.R., 2013, 4 WORKSH AN MPS CAMP
   Rudd C., 2010, ITIL V3 PLANNING IMP
   Silva C.D., 2017, 16 S BRAS QUAL SOFTW
   SOFTEX, 2015, ASS PROM EXC SOFTW B
   Tang X., 2013, TECHNOLOGY INVESTMEN, V4
   Taylor S. J., 2016, INTRO QUALITATIVE RE
   YIN R.K., 2005, ESTUDO CASO PLANEJAM
NR 32
TC 2
Z9 4
U1 4
U2 20
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 895
EP 929
DI 10.1007/s11219-020-09499-x
EA MAR 2020
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000562489700001
DA 2024-07-18
ER

PT J
AU Batarseh, FA
   Gonzalez, AJ
AF Batarseh, Feras A.
   Gonzalez, Avelino J.
TI Predicting failures in agile software development through data analytics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Data Analytics; Agile; Context; Artificial intelligence
ID VALIDATION
AB Artificial intelligence-driven software development paradigms have been attracting much attention in academia, industry and the government. More specifically, within the last 5 years, a wave of data analytics is affecting businesses from all domains, influencing engineering management practices in many industries and making a difference in academic research. Several major software vendors have been adopting a form of "intelligent" development in one or more phases of their software development processes. Agile for example, is a well-known example of a lifecycle used to build intelligent and analytical systems. The agile process consists of multiple sprints; in each sprint a specific software feature is developed, tested, refined and documented. However, because agile development depends on the context of the project, testing is performed differently in every sprint. This paper introduces a method to predict software failures in the subsequent agile sprints. That is achieved by utilizing analytical and statistical methods (such as using Mean Time between Failures and modelling regression). The novel method is called: analytics-driven testing (ADT). ADT predicts errors and their locations (with a certain statistical confidence level). That is done by continuously measuring MTBF for software components, and using a forecasting regression model for estimating where and what types of software system failures are likely to occur. ADT is presented and evaluated.
C1 [Batarseh, Feras A.] George Mason Univ, Coll Sci, 4400 Univ Dr, Fairfax, VA 22030 USA.
   [Gonzalez, Avelino J.] Univ Cent Florida, Dept Elect Engn & Comp Sci, Intelligent Syst Lab, 4000 Cent Florida Blvd, Orlando, FL 32816 USA.
C3 George Mason University; State University System of Florida; University
   of Central Florida
RP Batarseh, FA (corresponding author), George Mason Univ, Coll Sci, 4400 Univ Dr, Fairfax, VA 22030 USA.
EM feras_batarseh@yahoo.com; avelino.gonzalez@ucf.edu
OI Batarseh, Feras/0000-0002-6062-2747
CR Afzal Wasif, 2010, 2010 Proceedings of Second International Symposium on Search Based Software Engineering (SSBSE), P79, DOI 10.1109/SSBSE.2010.19
   Afzal W., 2009, Journal of Information and Software Technology, V51
   Alqurashi M., 2014, LIFE SCI J, V11, P443
   [Anonymous], 2002, RTI PROJECT
   [Anonymous], 1950, MIND, DOI 10.1093/mind/LIX.236.433
   Bach J., 2013, HEURISTIC TEST PLANN
   Batarseh F. A., 2013, P 8 INT INT C MOD CO
   Batarseh F. A., 2012, IEEE T SYST MAN CYB
   Batarseh FA, 2014, CONTEXT IN COMPUTING, P25
   Batarseh FA, 2015, ARTIF INTELL REV, V43, P485, DOI 10.1007/s10462-013-9396-9
   Gunga V, 2013, P INT J SOFTW ENG AP, V4
   Herzig K., 2014, 25 IEEE INT S SOFTW
   Kalliosaari L., 2012, IEEE SOFTW MAG
   Kenett RS, 2010, PROCESS IMPROVEMENT AND CMMI FOR SYSTEMS AND SOFTWARE, P1, DOI 10.1201/9781420060515
   Kennett R., 2013, IMPLEMENTING SCRUM U
   LEE S, 1994, IEEE T SYST MAN CYB, V24, P643, DOI 10.1109/21.286384
   Mende T., 2010, 14 EUR C SOFTW MAINT
   Meziane F., 2010, ARTIF INTELL
   Mosqueira-Rey E, 2000, EXPERT SYST APPL, V18, P1, DOI 10.1016/S0957-4174(99)00045-7
   Musa J. D., 1988, SOFTWARE RELIABILITY, V4
   Onoyama T, 2000, TENCON IEEE REGION, P394, DOI 10.1109/TENCON.2000.893696
   Rafi S. M., 2012, 2012 CSI 6 INT C SOF, P1, DOI [10.1109/CONSEG.2012.6349508, DOI 10.1109/CONSEG.2012.6349508]
   Rao R., 2014, 10 CLOUD BASED TESTI
   Reed W., 2010, J APPL STAT, V8, P1
   Richmond B., 2006, Introduction to Data Analysis Handbook
   Sommerville I., 2007, SOFTWARE ENG
   Speaks S., 2000, CISC VIS NETW IND GL
   Sykes A., 2014, INTRO REGRESSION ANA
   Vermesan A., 1999, P 5 EUR S VAL VER KN, P343
   WEIBULL W, 1951, J APPL MECH-T ASME, V18, P293
NR 30
TC 12
Z9 15
U1 4
U2 50
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2018
VL 26
IS 1
BP 49
EP 66
DI 10.1007/s11219-015-9285-3
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FX1AL
UT WOS:000425779200002
DA 2024-07-18
ER

PT J
AU Arrieta, A
   Sagardui, G
   Etxeberria, L
   Zander, J
AF Arrieta, Aitor
   Sagardui, Goiuria
   Etxeberria, Leire
   Zander, Justyna
TI Automatic generation of test system instances for configurable
   cyber-physical systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Configurable cyber-physical systems; Test system generation; Test
   automation
ID METHODOLOGY; SEARCH
AB Cyber-physical systems (CPSs) are ubiquitous systems that integrate digital technologies with physical processes. These systems are becoming configurable to respond to the different needs that users demand. As a consequence, their variability is increasing, and they can be configured in many system variants. To ensure a systematic test execution of CPSs, a test system must be elaborated encapsulating several sources such as test cases or test oracles. Manually building a test system for each configuration is a non-systematic, time-consuming, and error-prone process. To overcome these problems, we designed a test system for testing CPSs and we analyzed the variability that it needed to test different configurations. Based on this analysis, we propose a methodology supported by a tool named ASTERYSCO that automatically generates simulation-based test system instances to test individual configurations of CPSs. To evaluate the proposed methodology, we selected different configurations of a configurable Unmanned Aerial Vehicle, and measured the time required to generate their test systems. On average, around 119 s were needed by our tool to generate the test system for 38 configurations. In addition, we compared the process of generating test system instances between the method we propose and a manual approach. Based on this comparison, we believe that the proposed tool allows a systematic method of generating test system instances. We believe that our approach permits an important step toward the full automation of testing in the field of configurable CPSs.
C1 [Arrieta, Aitor; Sagardui, Goiuria; Etxeberria, Leire; Zander, Justyna] Goiru 2, Arrasate Mondragon 20500, Spain.
RP Arrieta, A (corresponding author), Goiru 2, Arrasate Mondragon 20500, Spain.
EM aarrieta@mondragon.edu; gsagardui@mondragon.edu;
   letxeberria@mondragon.edu; dr.justyna.zander@ieee.org
RI Etxeberria, Leire/R-6402-2017; Sagardui, Goiuria/ABH-5263-2020; Zander,
   Justyna/C-8207-2013
OI Etxeberria, Leire/0000-0002-4846-2007; Zander,
   Justyna/0000-0001-7215-0962; Sagardui, Goiuria/0000-0003-1002-456X
FU Department of Education, Universities and Research of the Basque
   Government
FX This work was developed by the embedded systems group of Mondragon Goi
   Eskola Politektnikoa, supported by the Department of Education,
   Universities and Research of the Basque Government.
CR Ali S., 2015, 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST), P1
   [Anonymous], 2015, P 19 INT C SOFTW PRO
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Arrieta A., 2014, VAL 2014 6 INT C ADV, P79
   Bak K, 2016, SOFTW SYST MODEL, V15, P811, DOI 10.1007/s10270-014-0441-1
   Behjati R, 2013, INFORM SOFTWARE TECH, V55, P607, DOI 10.1016/j.infsof.2012.09.006
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Berger Thorsten, 2013, 7 INT WORKSH VAR MOD, DOI DOI 10.1145/2430502.2430513
   Briand L, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P789, DOI 10.1145/2889160.2889212
   Bringmann Eckard, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P485, DOI 10.1109/ICST.2008.45
   Bristeau Pierre-Jean, 2011, IFAC Proc., V44, P1477, DOI DOI 10.3182/20110828-6-IT-1002.02327
   Chvatal V., 1979, Mathematics of Operations Research, V4, P233, DOI 10.1287/moor.4.3.233
   Derler P, 2012, P IEEE, V100, P13, DOI 10.1109/JPROC.2011.2160929
   Dukaczewski M, 2013, 2013 4TH INTERNATIONAL WORKSHOP ON PRODUCT LINE APPROACHES IN SOFTWARE ENGINEERING (PLEASE), P49, DOI 10.1109/PLEASE.2013.6608665
   Dziobek C., 2008, FUNCTIONAL VARIANTS
   Eidson JC, 2012, P IEEE, V100, P45, DOI 10.1109/JPROC.2011.2161237
   Garvin BJ, 2011, EMPIR SOFTW ENG, V16, P61, DOI 10.1007/s10664-010-9135-7
   Jensen JC, 2011, INT WIREL COMMUN, P1666, DOI 10.1109/IWCMC.2011.5982785
   Johansen Martin Fagereng, 2012, P 16 INT SOFTWARE PR, P46, DOI [10.1145/2362536.2362547, DOI 10.1145/2362536.2362547]
   Kane A, 2014, I C DEPEND SYS NETWO, P148, DOI 10.1109/DSN.2014.28
   Khakpour Narges, 2015, LIPIcs, V42, P18, DOI 10.
   Kuhn R, 2009, COMPUTER, V42, P94, DOI 10.1109/MC.2009.253
   Lee EA, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P363, DOI 10.1109/ISORC.2008.25
   Lee EdwardA., 2015, INTRO EMBEDDED SYSTE, VSecond
   Lee EdwardA., 2007, Computing foundations and practice for cyber-physical systems: A preliminary report
   Lity S., 2012, 2012 Proceedings of the 3rd International Workshop on Product LinE Approaches in Software Engineering (PLEASE 2012), P53, DOI 10.1109/PLEASE.2012.6229772
   Lopez-Herrejon RE, 2015, INFORM SOFTWARE TECH, V61, P33, DOI 10.1016/j.infsof.2015.01.008
   Lu H., 2016, IEEE INT C SOFTW TES
   Lu H, 2016, INFORM SOFTWARE TECH, V72, P68, DOI 10.1016/j.infsof.2015.12.004
   Lu Z., 2015, COMMUNICATING PROCES, P143
   Manz C., 2014, WORKSH EM ID TRENDS
   Matinnejad R, 2016, PROC INT CONF SOFTW, P595, DOI 10.1145/2884781.2884797
   Mjeda A., 2013, THESIS
   Mohaqeqi M., 2014, ECEASST, V70, P1
   Mosterman PJ, 2016, SOFTW SYST MODEL, V15, P5, DOI 10.1007/s10270-015-0469-x
   Mosterman PJ, 2014, ANNU REV CONTROL, V38, P259, DOI 10.1016/j.arcontrol.2014.09.008
   Mueller W, 2012, ASIA S PACIF DES AUT, P219, DOI 10.1109/ASPDAC.2012.6164948
   Nie KM, 2013, LECT NOTES COMPUT SC, V8107, P370, DOI 10.1007/978-3-642-41533-3_23
   Lamancha BP, 2009, PROC IEEE INT CONF S, P511, DOI 10.1109/ICSM.2009.5306324
   Lamancha BP, 2009, 2009 ICSE WORKSHOP ON AUTOMATION OF SOFTWARE TEST, P10, DOI 10.1109/IWAST.2009.5069036
   Perrouin Gilles, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P459, DOI 10.1109/ICST.2010.43
   Piketec, 2015, TPT MODEL BASED TEST
   Polzer A, 2012, INNOV SYST SOFTW ENG, V8, P35, DOI 10.1007/s11334-011-0174-z
   Robinson WN, 2010, COMPUTER, V43, P64, DOI 10.1109/MC.2009.373
   Sánchez AB, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P41, DOI 10.1109/ICST.2014.15
   Shi J, 2011, IND COMMER POWER
   Shokry H, 2009, COMPUTER, V42, P53, DOI 10.1109/MC.2009.125
   Thiel S., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P130
   Thüma T, 2014, SCI COMPUT PROGRAM, V79, P70, DOI 10.1016/j.scico.2012.06.002
   Tidwell T, 2009, PROCEEDINGS OF THE 12TH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, P37, DOI 10.1109/ISORC.2009.41
   Wan JF, 2011, PROCEDIA ENGINEER, V24, P123, DOI 10.1016/j.proeng.2011.11.2613
   Wang S, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P32, DOI 10.1145/2648511.2648515
   Wang S, 2016, EMPIR SOFTW ENG, V21, P1586, DOI 10.1007/s10664-014-9345-5
   Wang S, 2015, J SYST SOFTWARE, V103, P370, DOI 10.1016/j.jss.2014.08.024
   Wang S, 2013, LECT NOTES COMPUT SC, V8107, P237, DOI 10.1007/978-3-642-41533-3_15
   Wang SA, 2013, GECCO'13: PROCEEDINGS OF THE 2013 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1493
   Wetter M., 2008, 2008 SIMBUILD 3 NATL, P69
   Zander-Nowicka J., 2007, P 5 WORKSH SYST TEST, P45
   Zander-Nowicka J., 2008, THESIS
   Zhang M., 2016, UNDERSTANDING UNCERT
NR 60
TC 22
Z9 22
U1 0
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 1041
EP 1083
DI 10.1007/s11219-016-9341-7
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300014
DA 2024-07-18
ER

PT J
AU Börstler, J
   Caspersen, ME
   Nordstrom, M
AF Borstler, Jurgen
   Caspersen, Michael E.
   Nordstrom, Marie
TI Beauty and the Beast: on the readability of object-oriented example
   programs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Object-oriented programming; Quality; Measurement; Software readability;
   Programming education
ID INSTRUCTIONAL-DESIGN; COMPREHENSION
AB Some solutions to a programming problem are more elegant or more simple than others and thus more understandable for students. We review desirable properties of example programs from a cognitive and a measurement point of view. Certain cognitive aspects of example programs are captured by common software measures, but they are not sufficient to capture a key aspect of understandability: readability. We propose and discuss a simple readability measure for software, SRES, and apply it to object-oriented textbook examples. Our results show that readability measures correlate well with human perceptions of quality. Compared with other readability measures, SRES is less sensitive to commenting and whitespace. These results also have implications for software maintainability measures.
C1 [Borstler, Jurgen] Blekinge Inst Technol, Karlskrona, Sweden.
   [Caspersen, Michael E.] Aarhus Univ, Aarhus, Denmark.
   [Nordstrom, Marie] Umea Univ, Umea, Sweden.
C3 Blekinge Institute Technology; Aarhus University; Umea University
RP Börstler, J (corresponding author), Blekinge Inst Technol, Karlskrona, Sweden.
EM jubo@acm.org; mec@cse.au.dk; marie@cs.umu.se
RI Börstler, Jürgen/IWE-4001-2023
OI Börstler, Jürgen/0000-0003-0639-4234
CR Abbas N., 2010, THESIS UMEA U UMEA
   [Anonymous], P 18 INT C EV ASS SO
   Armstrong DJ, 2006, COMMUN ACM, V49, P123, DOI 10.1145/1113034.1113040
   Ben-Ari M, 2010, COMMUN ACM, V53, P32, DOI [10.1145/1810891.1B10905, 10.1145/1810891.1810905]
   Benjamin RG, 2012, EDUC PSYCHOL REV, V24, P63, DOI 10.1007/s10648-011-9181-8
   Borstler Jurgen, 2009, SIGCSE Bulletin, V41, P126, DOI 10.1145/1709424.1709458
   Borstler J., 2007, UMINF0723 UM U DEP C
   Borstler J., 2011, ACM T COMPUT EDUC, V11, P3
   Burkhardt J.-M., 2002, Empirical Software Engineering, V7, P115, DOI 10.1023/A:1015297914742
   Buse RPL, 2010, IEEE T SOFTWARE ENG, V36, P546, DOI 10.1109/TSE.2009.70
   Butler S, 2010, EUR CON SFTWR MTNCE, P156, DOI 10.1109/CSMR.2010.27
   CACM, 2002, COMMUN ACM, V45, P11
   Cadwell Patrick, 2008, THESIS DUBLIN CITY U
   CANT SN, 1995, INFORM SOFTWARE TECH, V37, P351, DOI 10.1016/0950-5849(95)91491-H
   Clancy M, 2004, COMPUTER SCIENCE EDUCATION RESEARCH, P85
   Clark R., 2005, EFFICIENCY LEARNING
   CURTIS B, 1979, IEEE T SOFTWARE ENG, V5, P96, DOI 10.1109/TSE.1979.234165
   De Lucia A, 2011, IEEE T SOFTWARE ENG, V37, P205, DOI 10.1109/TSE.2010.89
   Deimel L., 1990, CMUSEI90EM3
   Deissenboeck F, 2006, SOFTWARE QUAL J, V14, P261, DOI 10.1007/s11219-006-9219-1
   Dodani M. H., 2003, J OBJECT TECHNOLOGY, V2, P23
   DuBay W, 2004, The principles of readability
   Eshkevarti L., 2010, PROC IEEE INT CONF S, DOI 10.1109/ICSM.2010.5609748
   FITZSIMMONS A, 1978, COMPUT SURV, V10, P3, DOI 10.1145/356715.356717
   Flesch R, 1948, J APPL PSYCHOL, V32, P221, DOI 10.1037/h0057532
   Flower Martin, 1999, REFACTORING IMPROVIN
   Foster J. R., 1993, THESIS U DURHAM UK
   Gellenbeck E. M., 1991, Empirical Studies of Programmers: Fourth Workshop, P65
   Glass R., 2003, FACTS FALLACIES SOFT
   Gobet F, 2001, TRENDS COGN SCI, V5, P236, DOI 10.1016/S1364-6613(00)01662-4
   Haiduc S, 2008, INT C PROGRAM COMPRE, P113, DOI 10.1109/ICPC.2008.29
   Halstead M.H., 1975, ACM 1975 ANN C, P222, DOI 10.1145/800181
   Hargis G., 2000, ACM Journal of Computer Documentation, V24, P122, DOI 10.1145/344599.344634
   Host EW, 2009, LECT NOTES COMPUT SC, V5653, P294, DOI 10.1007/978-3-642-03013-0_14
   Jabangwe R, 2015, EMPIR SOFTW ENG, V20, P640, DOI 10.1007/s10664-013-9291-7
   Kramer J., 2007, Communications of the ACM, V50, P36, DOI 10.1145/1232743.1232745
   Lanza Michele., 2005, Object-Oriented Metrics in Practice
   LaToza T. D., 2006, 28th International Conference on Software Engineering Proceedings, P492, DOI 10.1145/1134285.1134355
   Lawrie D, 2006, INT C PROGRAM COMPRE, P3, DOI 10.1109/ICPC.2006.51
   Liblit Ben, 2006, PPIG, P53
   Liz B, 2006, PME CONFERENCE PROCE, P126
   Marcus A, 2008, IEEE T SOFTWARE ENG, V34, P287, DOI 10.1109/TSE.2007.70768
   Martin J., 1993, PRINCIPLES OBJECT OR
   Mason J., 1984, Educational Studies in Mathematics, V15, P277
   Mayer RE, 2004, AM PSYCHOL, V59, P14, DOI 10.1037/0003-066X.59.1.14
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MILLER GA, 1956, PSYCHOL REV, V63, P81, DOI 10.1037/h0043158
   Nguyen V, 2010, P 26 INT C SOFTW MAI, P1, DOI DOI 10.1109/ICSM.2010.5609554
   Paas F, 2003, EDUC PSYCHOL, V38, P1, DOI 10.1207/S15326985EP3801_1
   Posnett D, 2011, P 8 WORKING C MINING, P73
   Ragonis N, 2005, COMPUT SCI EDUC, V15, P203, DOI 10.1080/08993400500224310
   Reimann P, 1996, EDUC PSYCHOL, V31, P123, DOI 10.1207/s15326985ep3102_4
   Relf P.A., 2005, Int'l Symp. on Empirical Software Engineering, Noosa Heads, Queensland, P53
   Riel AJ., 1996, Object-Oriented Design Heuristics
   Shaft TM, 2006, MIS QUART, V30, P29
   Sweller J, 1985, COGNITION INSTRUCT, V2, P59, DOI [DOI 10.1207/S1532690XCI0201_3, 10.1007/978-1-4419-8126-4]
   TENNYSON RD, 1986, REV EDUC RES, V56, P40, DOI 10.3102/00346543056001040
   Trafton J.G., 1993, STUDYING EXAMPLES SO
   Tryggeseth E., 1997, THESIS NORWEGIAN U S
   VanLehn K, 1996, ANNU REV PSYCHOL, V47, P513, DOI 10.1146/annurev.psych.47.1.513
   Watson A., 2002, P 26 C INT GROUP PSY, V4, P377
   Welker K. D, 2001, CROSSTALK, V14, P18
   Welker KD, 1997, J SOFTW MAINT-RES PR, V9, P127, DOI 10.1002/(SICI)1096-908X(199705)9:3<127::AID-SMR149>3.0.CO;2-S
   Westfall R, 2001, COMMUN ACM, V44, P129, DOI 10.1145/383845.383874
   Woodfield S. N., 1981, 5th International Conference on Software Engineering, P215
   Yip S. W. L., 1994, Proceedings. 1994 First Asia-Pacific Software Engineering Conference, P70, DOI 10.1109/APSEC.1994.465272
NR 66
TC 9
Z9 11
U1 1
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 231
EP 246
DI 10.1007/s11219-015-9267-5
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100002
DA 2024-07-18
ER

PT J
AU Ebad, SA
   Ahmed, MA
AF Ebad, Shouki A.
   Ahmed, Moataz A.
TI Functionality-based software packaging using sequence diagrams
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Search-based software engineering; Automatic software packaging;
   Software modularization; Software architecture; Packaging metric;
   Package functionality
AB Modular software design is characterized by partitioning the system into discrete scalable, reusable modules consisting of isolated, self-contained functional elements. Software architects use modularity to allow independent offerings and reuse. Moreover, modularity allows dealing with changing customer demands, as it offers software architectures that are stable and more adaptive to changes. There have been some attempts at automatic partitioning of object-oriented classes into modules (i.e., packages). However, all these attempts are based on source code, i.e., they occur late in the development process at the implementation stage. In this paper, we present a metric and a search-based mechanism to allow automatic functionality-based system partitioning during the architecture design phase using requirements conceptual sequence diagrams. The metric is validated against applicable theoretical properties and also experimentally against hypothetical and real-case studies using different search techniques. Results suggest that the metric together with the partitioning mechanism is promising and can be used in effectively partitioning system conceptual classes into packages.
C1 [Ebad, Shouki A.] Northern Border Univ, Fac Comp & IT, Rafha 91911, Saudi Arabia.
   [Ahmed, Moataz A.] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia.
C3 Northern Border University; King Fahd University of Petroleum & Minerals
RP Ebad, SA (corresponding author), Northern Border Univ, Fac Comp & IT, Rafha 91911, Saudi Arabia.
EM shouki100@yahoo.com; moataz@kfupm.edu.sa
RI Ebad, Shouki A./P-8759-2018
OI Ebad, Shouki A./0000-0003-1043-2774; Ahmed, Moataz/0000-0003-0042-8819
CR Abdeen H., 2011, 2011 18th Working Conference on Reverse Engineering, P394, DOI 10.1109/WCRE.2011.55
   Abdeen H, 2009, WORK CONF REVERSE EN, P103, DOI 10.1109/WCRE.2009.13
   Alkhalid A, 2011, IET SOFTW, V5, P274, DOI 10.1049/iet-sen.2010.0070
   [Anonymous], 6 INT C SOFTW ENG AD
   [Anonymous], 1992, Object Oriented Software Engineering: A Use Case Driven Approach
   [Anonymous], 1978, COMBINATORIAL ALGORI
   Bauer M, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P3, DOI 10.1109/CSMR.2004.1281401
   Bell D., 2004, UML basics: The sequence diagram
   Bonja C., 2006, ACM SE 44 P 44 ANN S, P91
   Briand L. C., 1998, Empirical Software Engineering, V3, P65, DOI 10.1023/A:1009783721306
   CHIRICOTA Y, 2003, 11 IEEE INT WORKSH P
   Clarke J., 2003, IEE Proceedings-Software, V150, P161, DOI 10.1049/ip-sen:20030559
   Doval D., 1999, SOFTW TECHN ENG PRAC
   Ebad S, 2012, P INT C ADV INF TECH
   Ebad S., 2012, THESIS FAHD U PETROL
   Ebad S., 2011, P 2 INT C FUT INF TE
   Ebad SA, 2011, LECT NOTES COMPUT SC, V6903, P438, DOI 10.1007/978-3-642-23798-0_44
   Falkenauer E., 1998, Genetic algorithms and grouping problems, chichester
   Fowler M, 2001, IEEE SOFTWARE, V18, P102, DOI 10.1109/MS.2001.936226
   Garud R., 2002, MANAGING MODULAR AGR
   Harman M., 2004, P 10 INT S SOFTW MET
   Liu X, 2001, P GEN EV COMP C GECC
   Lung CH, 2006, J SYST SOFTWARE, V79, P1261, DOI 10.1016/j.jss.2006.02.037
   Mancoridis S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P50, DOI 10.1109/ICSM.1999.792498
   Mancoridis S, 1998, PROG COMPREHEN, P45, DOI 10.1109/WPC.1998.693283
   Mitchell B, 2002, P GEN EV COMP C GECC
   Object Management Group, 2010, OMG UN MOD LANG OMG
   Räihä O, 2010, COMPUT SCI REV, V4, P203, DOI 10.1016/j.cosrev.2010.06.001
   Russell S., 2010, ARTIF INTELL, V3rd
   Sait S.M., 1999, ITERATIVE COMPUTER A
   Seng O, 2005, P GEN EV COMP C GECC
   *US GOV, 2007, GLOSS MOD DES
   Walpole R., 2010, Probability and statistics for engineers and scientists, V9th
NR 33
TC 2
Z9 3
U1 0
U2 21
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2015
VL 23
IS 3
BP 453
EP 481
DI 10.1007/s11219-014-9245-3
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG8PX
UT WOS:000353572800004
DA 2024-07-18
ER

PT J
AU Dolado, JJ
   Otero, MC
   Harman, M
AF Javier Dolado, Jose
   Carmen Otero, Mari
   Harman, Mark
TI Equivalence hypothesis testing in experimental software engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Equivalence hypothesis testing; Bioequivalence analysis; Program
   comprehension; Side-effect free programs; Crossover design; Experimental
   software engineering
ID CONFIDENCE-INTERVALS; MODEL VALIDATION; POWER; DIFFERENCE
AB This article introduces the application of equivalence hypothesis testing (EHT) into the Empirical Software Engineering field. Equivalence (also known as bioequivalence in pharmacological studies) is a statistical approach that answers the question "is product T equivalent to some other reference product R within some range ?." The approach of "null hypothesis significance test" used traditionally in Empirical Software Engineering seeks to assess evidence for differences between T and R, not equivalence. In this paper, we explain how EHT can be applied in Software Engineering, thereby extending it from its current application within pharmacological studies, to Empirical Software Engineering. We illustrate the application of EHT to Empirical Software Engineering, by re-examining the behavior of experts and novices when handling code with side effects compared to side-effect free code; a study previously investigated using traditional statistical testing. We also review two other previous published data of software engineering experiments: a dataset compared the comprehension of UML and OML specifications, and the last dataset studied the differences between the specification methods UML-B and B. The application of EHT allows us to extract additional conclusions to the previous results. EHT has an important application in Empirical Software Engineering, which motivate its wider adoption and use: EHT can be used to assess the statistical confidence with which we can claim that two software engineering methods, algorithms of techniques, are equivalent.
C1 [Javier Dolado, Jose] UPV EHU Univ Basque Country, Fac Informat, San Sebastian, Spain.
   [Carmen Otero, Mari] UPV EHU Univ Basque Country, Escuela Univ Ingn Vitoria Gasteiz, Vitoria, Spain.
   [Harman, Mark] UCL, CREST, London WC1E 6BT, England.
C3 University of Basque Country; University of Basque Country; University
   of London; University College London
RP Dolado, JJ (corresponding author), UPV EHU Univ Basque Country, Fac Informat, San Sebastian, Spain.
EM javier.dolado@ehu.es; mariacarmen.otero@ehu.es; m.harman@cs.ucl.ac.uk
RI Dolado, José Javier/I-5402-2015
OI Dolado, José Javier/0000-0002-3301-5650; Harman,
   Mark/0000-0002-5864-4488; Otero Vidal, Mari Carmen/0000-0002-5321-9271
CR [Anonymous], 2009, Design and Analysis of Bioavailability and Bioequivalence Studies
   [Anonymous], 2010, Testing statistical hypotheses of equivalence and noninferiority
   [Anonymous], 2011, P INT WORKSH MACH LE
   Chen DG, 2011, CH CRC BIOSTAT SER, P1
   Chow SC, 2001, J PHARMACOKINET PHAR, V28, P155, DOI 10.1023/A:1011503032353
   Chow SL, 1998, BEHAV BRAIN SCI, V21, P169, DOI 10.1017/S0140525X98001162
   Cole R, 2004, MAR ECOL PROG SER, V279, P63, DOI 10.3354/meps279063
   Cribbie RA, 2004, J CLIN PSYCHOL, V60, P1, DOI 10.1002/jclp.10217
   Dolado JJ, 2003, IEEE T SOFTWARE ENG, V29, P665, DOI 10.1109/TSE.2003.1214329
   Ennis DM, 2010, FOOD QUAL PREFER, V21, P253, DOI 10.1016/j.foodqual.2009.06.005
   Ennis DM, 2009, COMMUN STAT-THEOR M, V38, P1792, DOI 10.1080/03610920802460787
   European Medicines Agency, 2010, Guideline on the investigation of bioequivalence (CPMP/QWP/EWP/1401/98 Rev. 1)
   Garrett KA, 1997, PHYTOPATHOLOGY, V87, P372, DOI 10.1094/PHYTO.1997.87.4.372
   Harman M, 2002, PROC IEEE INT CONF S, P2, DOI 10.1109/ICSM.2002.1167742
   Harman M, 2001, PROG COMPREHEN, P310, DOI 10.1109/WPC.2001.921741
   Harman M, 2010, IEEE INT WORK C SO, P7, DOI 10.1109/SCAM.2010.28
   Hauschke D., 2007, Bioequivalence Studies in Drug Development: Methods and Applications
   Hintze J., 2000, PASS 2000 NCSS LLC
   Hoenig JM, 2001, AM STAT, V55, P19, DOI 10.1198/000313001300339897
   HYSLOP T, 2001, P ANN M AM STAT ASS
   Lakhotia K, 2009, 2009 TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE-PRACTICE AND RESEARCH TECHNIQUES, TAIC PART 2009, P95, DOI 10.1109/TAICPART.2009.15
   McBride G. B., 2005, USING STAT MEHTODS W
   Mecklin C.J., 2003, Journal of Modern Applied Statistical Methods, V2, P329, DOI [DOI 10.22237/JMASM/1067645160, 10.22237/jmasm/1067645160]
   Meyners M, 2012, FOOD QUAL PREFER, V26, P231, DOI 10.1016/j.foodqual.2012.05.003
   Miller J, 1997, INFORM SOFTWARE TECH, V39, P285, DOI 10.1016/S0950-5849(96)01139-1
   Miranda BR, 2009, LANDSCAPE ECOL, V24, P587, DOI 10.1007/s10980-009-9343-y
   Ngatia M, 2010, J ENVIRON MONITOR, V12, P172, DOI [10.1039/B912098J, 10.1039/b912098j]
   Ogungbenro K, 2008, EUR J CLIN PHARMACOL, V64, P705, DOI 10.1007/s00228-008-0493-7
   Otero MC, 2005, J SYST SOFTWARE, V77, P91, DOI 10.1016/j.jss.2004.11.022
   Piaggio G, 2006, JAMA-J AM MED ASSOC, V295, P1152, DOI 10.1001/jama.295.10.1152
   Piaggio G, 2001, STAT MED, V20, P3571, DOI 10.1002/sim.1078
   Pikounis B, 2001, APPLIED STATISTICS IN THE PHARMACEUTICAL INDUSTRY: WITH CASE STUDIES USING S-PLUS, P153
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Rani S., 2004, Indian Journal of Pharmacology, V36, P209
   Razali R, 2008, THESIS U SOUTHAMPTON
   Razali R., 2007, Proceedings of the 11th international conference on Evaluation and Assessment in Software Engineering, P1
   Razali R., 2007, P 1 ACM INT WORKSH E, P25
   Razali R, 2006, PROC WRLD ACAD SCI E, V16, P338
   Robinson AP, 2005, TREE PHYSIOL, V25, P903, DOI 10.1093/treephys/25.7.903
   Robinson AP, 2004, ECOL MODEL, V176, P349, DOI 10.1016/j.ecolmodel.2004.01.013
   ROGERS JL, 1993, PSYCHOL BULL, V113, P553, DOI 10.1037/0033-2909.113.3.553
   SCHUIRMANN DJ, 1987, J PHARMACOKINET BIOP, V15, P657, DOI 10.1007/BF01068419
   Siqueira AL, 2005, PHARM STAT, V4, P233, DOI 10.1002/pst.183
   Stegner BL, 1996, EVAL PROGRAM PLANN, V19, P193, DOI 10.1016/0149-7189(96)00011-0
   Stein J., 1999, Qual. Engin, V12, P105, DOI 10.1080/08982119908962563
   Tempelman R.J., 2004, Journal of Animal Science, V82, pE162, DOI [DOI 10.2527/2004.8213_SUPPLE162X, 10.2527/2004.8213supplE162x, DOI 10.2527/2004.8213SUPPLE162X]
   Tryon WW, 2001, PSYCHOL METHODS, V6, P371, DOI 10.1037//1082-989X.6.4.371
   Van Peer A, 2010, BASIC CLIN PHARMACOL, V106, P146, DOI 10.1111/j.1742-7843.2009.00485.x
   Waldhoer T, 2011, INT J HEALTH GEOGR, V10, DOI 10.1186/1476-072X-10-3
   WESTLAKE WJ, 1976, BIOMETRICS, V32, P741, DOI 10.2307/2529259
   Yue L Q, 1998, J Biopharm Stat, V8, P577, DOI 10.1080/10543409808835261
NR 51
TC 6
Z9 10
U1 0
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2014
VL 22
IS 2
SI SI
BP 215
EP 238
DI 10.1007/s11219-013-9196-0
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AF7TM
UT WOS:000334917700004
DA 2024-07-18
ER

PT J
AU Perrouin, G
   Oster, S
   Sen, S
   Klein, J
   Baudry, B
   le Traon, Y
AF Perrouin, Gilles
   Oster, Sebastian
   Sen, Sagar
   Klein, Jacques
   Baudry, Benoit
   le Traon, Yves
TI Pairwise testing for software product lines: comparison of two
   approaches
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based engineering and testing; Test generation; t-wise and
   pairwise; Software product lines; Alloy
ID COMBINATORIAL; MODELS
AB Software Product Lines (SPL) are difficult to validate due to combinatorics induced by variability, which in turn leads to combinatorial explosion of the number of derivable products. Exhaustive testing in such a large products space is hardly feasible. Hence, one possible option is to test SPLs by generating test configurations that cover all possible t feature interactions (t-wise). It dramatically reduces the number of test products while ensuring reasonable SPL coverage. In this paper, we report our experience on applying t-wise techniques for SPL with two independent toolsets developed by the authors. One focuses on generality and splits the generation problem according to strategies. The other emphasizes providing efficient generation. To evaluate the respective merits of the approaches, measures such as the number of generated test configurations and the similarity between them are provided. By applying these measures, we were able to derive useful insights for pairwise and t-wise testing of product lines.
C1 [Perrouin, Gilles] Univ Namur, PReCISE, B-5000 Namur, Belgium.
   [Oster, Sebastian] Tech Univ Darmstadt, Real Time Syst Grp, Darmstadt, Germany.
   [Sen, Sagar] INRIA Sophia Antipolis, F-06902 Sophia Antipolis, France.
   [Klein, Jacques; le Traon, Yves] Univ Luxembourg, SnT, Luxembourg, Luxembourg.
   [Klein, Jacques; le Traon, Yves] Univ Luxembourg, LASSY, Luxembourg, Luxembourg.
   [Baudry, Benoit] IRISA INRIA Rennes Bretagne Atlantique, Triskell Team, Rennes, France.
C3 University of Namur; Technical University of Darmstadt; University of
   Luxembourg; University of Luxembourg; Universite de Rennes
RP Perrouin, G (corresponding author), Univ Namur, PReCISE, B-5000 Namur, Belgium.
EM gilles.perrouin@fundp.ac.be; sebastian.oster@es.tu-darmstadt.de;
   sagar.sen@sop.inria.fr; jacques.klein@uni.lu; bbaudry@irisa.fr;
   yves.letraon@uni.lu
RI Perrouin, Gilles/I-1621-2019; LE TRAON, Yves/T-2911-2019; Sen,
   Sagar/H-3126-2017
OI Perrouin, Gilles/0000-0002-8431-0377; Klein,
   Jacques/0000-0003-4052-475X; Sen, Sagar/0000-0002-5784-7355; LE TRAON,
   Yves/0000-0002-1045-4861
FU NAPLES project, the Walloon Region (Belgium)
FX The authors would like to thank Professor Andy Schurr for his valuable
   comments on the paper. This research was partly funded by the NAPLES
   project funded by the Walloon Region (Belgium).
CR [Anonymous], THESIS TU MUNICH
   [Anonymous], 2003, Eclipse Modeling Framework
   [Anonymous], 1995, QUALITY ENG USING RO
   [Anonymous], 2004, SIGSOFT SOFTWARE ENG
   [Anonymous], P 22 IEEE ACM INT C
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   BATORY D, 2006, COMMUNICATIONS ACM
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Bennaceur H, 2004, CONSTRAINTS, V9, P123, DOI 10.1023/B:CONS.0000024048.03454.c0
   Berger T., 2010, P IEEE ACM INT C AUT
   Bryce RC, 2006, INFORM SOFTWARE TECH, V48, P960, DOI 10.1016/j.infsof.2006.03.004
   Bryce RC, 2009, SOFTW TEST VERIF REL, V19, P37, DOI 10.1002/stvr.393
   Calvagna A, 2008, LECT NOTES COMPUT SC, V4966, P66
   Calvagna A, 2009, LECT NOTES COMPUT SC, V5668, P27
   Cartaxo EG, 2011, SOFTW TEST VERIF REL, V21, P75, DOI 10.1002/stvr.413
   Classen A, 2008, LECT NOTES COMPUT SC, V4961, P16, DOI 10.1007/978-3-540-78743-3_2
   Cohen DM, 1997, IEEE T SOFTWARE ENG, V23, P437, DOI 10.1109/32.605761
   Cohen M., 2007, INT S SOFTW TEST AN, V4961, P129
   Cohen M.B., 2006, P ISSTA 2006 WORKSHO, P53, DOI DOI 10.1145/1147249.1147257
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Czarnecki K, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P23, DOI 10.1109/SPLINE.2007.24
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   Ganesan D, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P74, DOI 10.1109/SPLINE.2007.21
   Gheyi Rohit., 2006, 1st Alloy workshop, P71
   Griss ML, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P76, DOI 10.1109/ICSR.1998.685732
   HARALICK RM, 1980, ARTIF INTELL, V14, P263, DOI 10.1016/0004-3702(80)90051-X
   Hemmati H., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P327, DOI 10.1109/ICST.2011.12
   Hemmati Hadi, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P141, DOI 10.1109/ISSRE.2010.9
   Hemmati H, 2010, LECT NOTES COMPUT SC, V6435, P63, DOI 10.1007/978-3-642-16573-3_6
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kang Kyo C, 1990, Technical Report
   Kuhn DR, 2004, IEEE T SOFTWARE ENG, V30, P418, DOI 10.1109/TSE.2004.24
   Kuhn Rick, 2008, IT Professional, V10, P19, DOI 10.1109/MITP.2008.54
   Kumar V., 2006, Introduction to Data Mining
   Lei Y, 1998, THIRD IEEE INTERNATIONAL HIGH-ASSURANCE SYSTEMS ENGINEERING SYMPOSIUM, PROCEEDINGS, P254, DOI 10.1109/HASE.1998.731623
   Lei Y, 2008, SOFTW TEST VERIF REL, V18, P125, DOI 10.1002/stvr.381
   Mahajan Y.S., 2004, P 7 INT C THEORY APP, P360, DOI [DOI 10.1007/1152769527, 10.1007/11527695 27]
   McGregor J., 2001, ESCTR2001022 CMUSEI
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Mendonca Marcilio, 2009, SPLC' 09, P231
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Monasson R, 1999, NATURE, V400, P133, DOI 10.1038/22055
   MoSo-PoLiTe, 2011, MOSO POLITE
   Muller P. A., 2005, MODELS UML
   Niklas E., 2005, SAT 2005
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Oster S., 2011, MODEL BASED TESTING
   Oster S, 2010, LECT NOTES COMPUT SC, V6287, P196, DOI 10.1007/978-3-642-15579-6_14
   Perrouin Gilles, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P459, DOI 10.1109/ICST.2010.43
   Perrouin G, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P339, DOI 10.1109/SPLC.2008.38
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Uzuncaova Engin, 2008, 2008 IEEE International Symposium on Software Reliability Engineering, P249, DOI 10.1109/ISSRE.2008.56
   Westphal M, 2009, 21ST INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-09), PROCEEDINGS, P628
   White J, 2009, J SYST SOFTWARE, V82, P1268, DOI 10.1016/j.jss.2009.02.011
   ZIADI T, 2006, FAMILIES RES BOOK
NR 59
TC 63
Z9 64
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2012
VL 20
IS 3-4
SI SI
BP 605
EP 643
DI 10.1007/s11219-011-9160-9
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 995IQ
UT WOS:000308001900006
DA 2024-07-18
ER

PT J
AU Finne, A
AF Finne, Auvo
TI Towards a quality meta-model for information systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality meta-model; Quality attribute; Quality attribute meta-model;
   Quality design; Quality-driven development; Requirements
ID REQUIREMENTS
AB All models of information system (IS) quality postulate two constructs, namely 'quality' and 'model'. These concepts are seldom explicitly discussed and defined in connection with IS. Together, they constitute an information system quality meta-model. Compared to lower level models, a meta-model is likely to be more applicable in a wider variety of contexts. This article aims, firstly, to validate and develop further an initial IS quality meta-model that emerged from two previous studies. Secondly, it is an account of a real quality modeling process, in connection with the development of an Education Management Information System (EMIS) in Tanzania, and one that can be referenced by other researchers. This case is used to discover how the meta-model can be used as part of system development process, with a view to instantiating system- and attribute-specific quality models. The study supports the general validity of a two-part and three-level quality meta-model. It further suggests that quality is by its nature relative and that the essence of quality is embodied in relationships between the information system and its context. The meta-model functions well as a safeguard that can prevent developers from neglecting important aspects of quality design. In addition, it generates relevant questions for future research.
C1 Univ Jyvaskyla, Dept Comp Sci & Informat Syst, CoMaS Grad Sch, Jyvaskyla, Finland.
C3 University of Jyvaskyla
RP Finne, A (corresponding author), Univ Jyvaskyla, Dept Comp Sci & Informat Syst, CoMaS Grad Sch, Jyvaskyla, Finland.
EM auvo.finne@jyu.fi
CR [Anonymous], 1996, SCI ARTIFICAL
   [Anonymous], RES METHODS
   [Anonymous], SOFTW ENG PROD QUA 1
   BASILI V, 1993, P 10 ANN CSR CTR SOF
   Basili1 Victor R, 1994, Encyclopedia of software engineering, V1994, P528
   Berki E, 2004, SOFTWARE QUAL J, V12, P265, DOI 10.1023/B:SQJO.0000034711.87241.f0
   Boehm B.W., 1978, Characteristics of Software Quality
   CHUNG L, 2000, NONFUNCTIONALREQUIRE
   Côté MA, 2007, SOFTWARE QUAL J, V15, P401, DOI 10.1007/s11219-007-9029-0
   Crispin I, 2006, IEEE SOFTWARE, V23, P70, DOI 10.1109/MS.2006.157
   Cysneiros LM, 2004, IEEE T SOFTWARE ENG, V30, P328, DOI 10.1109/TSE.2004.10
   de Bruin H, 2003, J SYST SOFTWARE, V66, P269, DOI 10.1016/S0164-1212(02)00079-1
   Denger C, 2007, IEEE SOFTWARE, V24, P79, DOI 10.1109/MS.2007.31
   Dromey RG, 1996, IEEE SOFTWARE, V13, P33, DOI 10.1109/52.476284
   Egyed A, 2004, IEEE SOFTWARE, V21, P50, DOI 10.1109/MS.2004.40
   FINNE A, 2006, P 4 IEEE INT WORKSH
   FINNE A, 2005, P INF SYST RES SEM S, V28
   Huang LG, 2006, IEEE SOFTWARE, V23, P88, DOI 10.1109/MS.2006.127
   Jacobson Ivar., 1999, AW OBJ TECHNOL S
   Kazman R, 2005, SOFTWARE QUAL J, V13, P329, DOI 10.1007/s11219-005-4250-1
   KINREICH I, 2004, INSIDE MINDS SOFTWAR, P111
   Losavio Francisca., 2003, J OBJECT TECHNOL, V2, P133
   Mc Call J. A., 1977, FACTORS SOFTWARE QUA, VI
   Ortega M, 2003, SOFTWARE QUAL J, V11, P219, DOI 10.1023/A:1025166710988
   Saaty T.L., 1980, ANAL HIERARCHY PROCE
   Shull F, 2006, IEEE SOFTWARE, V23, P16, DOI 10.1109/MS.2006.33
   Svahnberg M, 2005, EMPIR SOFTW ENG, V10, P149, DOI 10.1007/s10664-004-6190-y
   Svahnberg M, 2003, INT J SOFTW ENG KNOW, V13, P547, DOI 10.1142/S0218194003001421
   Tian J, 2004, IEEE SOFTWARE, V21, P84, DOI 10.1109/MS.2004.1293078
   Voas J, 2004, IEEE SOFTWARE, V21, P14, DOI 10.1109/MS.2004.54
   Wand Y, 1996, COMMUN ACM, V39, P86, DOI 10.1145/240455.240479
NR 31
TC 2
Z9 2
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2011
VL 19
IS 4
SI SI
BP 663
EP 688
DI 10.1007/s11219-011-9131-1
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 814RN
UT WOS:000294474900003
DA 2024-07-18
ER

PT J
AU Lin, LC
   Li, TS
AF Lin, Lie-Chien
   Li, Tzu-Su
TI An integrated framework for supply chain performance measurement using
   six-sigma metrics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Performance measurement; Six-sigma; Supply chain
ID ORGANIZATIONAL PERFORMANCE; BALANCED SCORECARD; MANAGEMENT; SYSTEM;
   INFORMATION; IMPROVE; FORCES; DESIGN; ISSUES
AB Developing a sound performance measurement model is a critical task for a supply chain and its members in order to examine their current status and identify improvement opportunities for steering their future direction. This research proposes an integrated framework for supply chain performance measurement. It adopts the six-sigma metrics and includes three components (i.e., team structure measurement, supply chain process measurement, and output measurement) to provide a more complete coverage of performance requisites, which has not been adequately addressed in relevant literatures before. Also, a case is applied to demonstrate the feasibility of the model. Complying with the application of this framework, the whole chain or individual members in a supply chain can advance the performance in a more effective way.
C1 [Li, Tzu-Su] Natl Kaohsiung First Univ Sci & Technol, Grad Inst Management, Rente Township 71751, Tainan County, Taiwan.
   [Lin, Lie-Chien] Natl Kaohsiung First Univ Sci & Technol, Dept Logist Management, Kaohsiung 81164, Taiwan.
C3 National Kaohsiung University of Science & Technology; National
   Kaohsiung University of Science & Technology
RP Li, TS (corresponding author), Natl Kaohsiung First Univ Sci & Technol, Grad Inst Management, 7 Aly 5 Ln 2,Paohua Rd, Rente Township 71751, Tainan County, Taiwan.
EM wjvali@anet.net.tw
CR AVERY S, 2001, LINKING SUPPLY CHAIN
   Beamon BM, 1998, INT J PROD ECON, V55, P281, DOI 10.1016/S0925-5273(98)00079-6
   Beamon BM, 1999, INT J OPER PROD MAN, V19, P275, DOI 10.1108/01443579910249714
   Bhagwat R, 2007, PROD PLAN CONTROL, V18, P666, DOI 10.1080/09537280701614407
   Bhagwat R, 2007, COMPUT IND ENG, V53, P43, DOI 10.1016/j.cie.2007.04.001
   CAMPION MA, 1993, PERS PSYCHOL, V46, P823, DOI 10.1111/j.1744-6570.1993.tb01571.x
   Chan FTS, 2003, SUPPLY CHAIN MANAG, V8, P209, DOI 10.1108/13598540310484618
   Chen IJ, 2004, J OPER MANAG, V22, P119, DOI 10.1016/j.jom.2003.12.007
   Clegg CW, 2002, HUM FACTORS ERGONOM, V12, P171, DOI 10.1002/hfm.10006
   CRAGO MG, 2000, PATIENT SAFETY 6 SIG
   Dasgupta T, 2003, TOTAL QUAL MANAG BUS, V14, P355, DOI 10.1080/1478336032000046652
   De Cenzo D.A., 1996, HUMAN RESOURCE MANAG
   Dixon J.R., 1990, IRWIN APICS SERIES P
   FERGUSON BR, 2000, PRODUCTION INVENTORY, V22, P64
   FONTENOT G, 1994, QUAL PROG, V27, P73
   GLOBERSON S, 1985, INT J PROD RES, V23, P639, DOI 10.1080/00207548508904734
   Green KW, 2007, PROD PLAN CONTROL, V18, P274, DOI 10.1080/09537280701243926
   Gunasekaran A, 2004, INT J PROD ECON, V87, P333, DOI 10.1016/j.ijpe.2003.08.003
   Gunasekaran A, 2001, INT J OPER PROD MAN, V21, P71, DOI 10.1108/01443570110358468
   HAKANSON B, 1999, LOGISTICS Q, V5
   HARA M, 2002, AUTOMOT IND, V182, P44
   Harry M. J., 1997, VISION 6 SIGMA ROADM, V1
   Huan SH, 2004, SUPPLY CHAIN MANAG, V9, P23, DOI 10.1108/13598540410517557
   Janz T., 1993, TOTAL QUAL MANAGE, V4, P275
   Johnson A, 2002, RES TECHNOL MANAGE, V45, P12, DOI 10.1080/08956308.2002.11671487
   Kanji GK, 2001, TOTAL QUAL MANAGE, V12, P259, DOI 10.1080/09544120120025311
   KAPLAN RS, 1992, HARVARD BUS REV, V70, P71
   Keegan D.P., 1989, MANAGEMENT ACCOUNTIN, V70, P45
   Kennerley M, 2003, INT J OPER PROD MAN, V23, P213, DOI 10.1108/01443570310458465
   Kennerley M, 2002, INT J OPER PROD MAN, V22, P1222, DOI 10.1108/01443570210450293
   Lambert D.M., 1998, INT J LOGIST MANAG, V9, P1, DOI [https://doi.org/10.1108/09574099810805807, DOI 10.1108/09574099810805807, 10.1108/09574099810805807]
   Lambert D.M., 2001, INT J LOGIST MANAG, V12, P1, DOI DOI 10.1108/09574090110806190
   Lambert DM, 2000, IND MARKET MANAG, V29, P65, DOI 10.1016/S0019-8501(99)00113-3
   Li SH, 2005, J OPER MANAG, V23, P618, DOI 10.1016/j.jom.2005.01.002
   LIN LC, 2008, CONTINUAL IMPROVEMEN
   Lynch R L., 1995, Measure up: yardsticks for continuous improvement, V2a Edicao
   *MIN INC, 2000, MIN STAT SOFTW REL 1
   Neely A, 1995, INT J OPER PROD MAN, V15, P80, DOI 10.1108/01443579510083622
   Pande P.S., 2000, The Six Sigma Way-How GE, Motorola, and Other Top Companies Are Honing Their Performance
   ROSE KH, 1995, PERFORMANCE MEASUREM
   Saaty T.L., 1980, ANAL HIERARCHY PROCE
   *SCC, 1999, OV SCOR MOD V2 0
   Sharma MK, 2008, PROD PLAN CONTROL, V19, P12, DOI 10.1080/09537280701737059
   Sharma MK, 2007, MEAS BUS EXCELL, V11, P57, DOI 10.1108/13683040710820755
   Shepherd C, 2006, INT J PRODUCT PERFOR, V55, P242, DOI 10.1108/17410400610653219
   Stephens S, 2001, INFORM SYST FRONT, V3, P471, DOI 10.1023/A:1012881006783
   Storey R., 1989, TEAM BUILDING MANUAL
   Thomas J., 1999, LOGISTICS MANAGEMENT, V38, P42
   Waggoner DB, 1999, INT J PROD ECON, V60-1, P53, DOI 10.1016/S0925-5273(98)00201-1
   Wang FK, 2004, TOTAL QUAL MANAG BUS, V15, P1217, DOI 10.1080/1478336042000255596
   Webster M, 2002, INT J MANAG REV, V4, P353, DOI 10.1111/1468-2370.00092
   Wyper B, 2000, TOTAL QUAL MANAGE, V11, pS720
   ZIGON J, 1994, PERS J, V73, P46
NR 53
TC 33
Z9 36
U1 1
U2 26
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2010
VL 18
IS 3
BP 387
EP 406
DI 10.1007/s11219-010-9099-2
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 607BI
UT WOS:000278472900004
DA 2024-07-18
ER

PT J
AU Rafla, T
   Robillard, PN
   Desmarais, M
AF Rafla, Tamer
   Robillard, Pierre N.
   Desmarais, Michel
TI A method to elicit architecturally sensitive usability requirements: its
   integration into a software development process
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE usability requirements; software architecture; software process; QAW
AB In the Human-Computer Interaction (HCI) community, software usability has primarily been concerned with the presentation of information, more precisely with the user interface. However, some usability problems can prove costly to fix if the changes require modifications that reach beyond the presentation layer, namely those that cannot be easily accommodated by the software architecture. Taking into account some usability requirements earlier in the software development cycle, specifically prior to the architectural design phase, can reduce the cost of these modifications. There is a scarcity of methods and guidelines with the scope to direct users in eliciting the usability requirements that can impact the software architecture.
   This paper proposes a usability-driven adaptation of the quality attribute workshop (QAW) to assist software development organizations in discovering and documenting usability requirements. It shows how this method can be integrated into a software development process, by discussing how the existing software framework workflows can be adjusted to take this new activity into consideration. A preliminary exercise was conducted to help discern the utility and the limits of the proposed method. Participants with different levels of knowledge of usability and comprehension of the system being developed found the method constructive, as it guided them in identifying the architecturally relevant usability requirements. It also helped determine the usability aspects that would not necessarily have been defined if this technique had not been employed.
C1 Ecole Polytech MOntreal, Software Engn Res Lab, Montreal, PQ H3C 3A7, Canada.
C3 Universite de Montreal; Polytechnique Montreal
RP Rafla, T (corresponding author), Ecole Polytech MOntreal, Software Engn Res Lab, POB 6079,Stn Ctr Ville, Montreal, PQ H3C 3A7, Canada.
RI Robillard, Pierre-Yves/I-4932-2019
CR Abran A, 2003, SOFTWARE QUAL J, V11, P325, DOI 10.1023/A:1025869312943
   [Anonymous], 1984, Smalltalk-80: The Interactive Programming Environment
   [Anonymous], 2003, QUAL ATTR WORKSH QAW
   ARTIM JM, 1997, ACM SIG CHI B, V30
   Bass L, 2003, J SYST SOFTWARE, V66, P187, DOI 10.1016/S0164-1212(02)00076-6
   BASS L, 2001, CMUSEITR2001005
   Beck K., 2000, EXTREME PROGRAMMING
   BEVAN N, 1995, SOFTWARE QUAL J, V4, P115, DOI 10.1007/BF00402715
   Cockburn A., 2002, AGILE SOFTWARE DEV
   CONSTANTINE L, 2003, P 2003 INT C SOFTW E, P106
   Ferrazzi E, 2001, ULTRASOUND OBST GYN, V18, P1, DOI 10.1046/j.1469-0705.2001.00491.x
   Ferre X., 2003, Integration of Usability Techniques into the Software Development Process, P28
   Folmer E, 2004, J SYST SOFTWARE, V70, P61, DOI 10.1016/S0164-1212(02)00159-0
   FOLMER E, 2003, P 10 INT C HCI CRET, P93
   FOLMER E, 2003, IN PRESS SOFTWARE PR
   *ISO IEC, 1999, 13407 ISO IEC
   *ISO IEC, 1998, 924111 ISO IEC 11
   JOHN BE, 2003, P 10 INT C HCI CRET
   JURISTO N, 2001, IEEE SOFTWARE, V18
   KRUTCHEN P, 2001, USER INTERFACE DESIG, P131
   KRUTCHEN P, 2000, RATIONAL UNIFIED PRO
   Landauer T.K., 1996, TROUBLE COMPUTERS US
   Pfaff G.E., 1985, USER INTERFACE MANAG
   PHANOURIOU C, 2000, THESIS VIRGINIA POLY
   Rafla T, 2006, J SYST SOFTWARE, V79, P415, DOI 10.1016/j.jss.2005.10.014
   RAFLA T, 2004, P IASTED 8 INT C SOF, P150
   Robillard P.N., 2003, Software engineering process with the UPEDU
   SEFFAH A, 1999, LNCS, V1241, P2401
   Seffah A., 2005, HUMAN CTR SOFTWARE E, P17
   Sousa K., 2003, P INT C SOFTWARE ENG, P41
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
NR 31
TC 10
Z9 13
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2007
VL 15
IS 2
BP 117
EP 133
DI 10.1007/s11219-006-9009-9
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 149CA
UT WOS:000245123000002
DA 2024-07-18
ER

PT J
AU Wong, K
   Sun, DB
AF Wong, Kenny
   Sun, Dabo
TI On evaluating the layout of UML diagrams for program comprehension
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 13th International Workshop on Program Comprehension
CY MAY 15-16, 2005
CL St Louis, MO
SP IEEE Comp Soc, TC Software Engn
AB UML class and sequence diagrams are helpful for understanding the static structure and dynamic behavior of a software system. Algorithms and tools have been developed to generate these UML diagrams automatically for program understanding purposes. Many tools, however, often ignore perceptual factors in the layout of these diagrams. Therefore, users still have to spend much time and effort rearranging boxes and lines to make the diagram understandable. This article presents key criteria and guidelines for the effective layout of UML class and sequence diagrams from the perspective of perceptual theories. Two UML tools are evaluated to illustrate how the criteria can be applied to assess the readability of their generated diagrams.
C1 Univ Alberta, Dept Comp Sci, Edmonton, AB T6G 2M7, Canada.
C3 University of Alberta
RP Wong, K (corresponding author), Univ Alberta, Dept Comp Sci, Edmonton, AB T6G 2M7, Canada.
EM kenw@cs.ualberta.ca; dabo@cs.ualberta.ca
CR AMBLER SW, 2006, MODELING STYLE GUIDE
   Ambler SW., 2003, ELEMENTS UML STYLE
   AMBLER SW, 2006, INTRO UML 2 SEQUENCE
   Andriyevska O, 2005, 3RD IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEEDINGS, P14
   [Anonymous], 2001, P AUSTRALASIAN S INF
   [Anonymous], 1999, GRAPH DRAWING ALGORI
   [Anonymous], 2004, P 22 ANN INT C DES C
   Benjafield J.G., 1997, COGNITION, V2nd
   Boff K.R., 1986, HDB PERCEPTION HUMAN, VII
   Díaz J, 2002, ACM COMPUT SURV, V34, P313, DOI 10.1145/568522.568523
   DWYER T, 2001, CRPITS 01 AUSTR S IN, P77
   Eichelberger H, 2002, VISSOFT 2002: FIRST INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEDINGS, P23, DOI 10.1109/VISSOF.2002.1019791
   Eichelberger Holger., 2003, SOFTVIS 03 PROC 2003, P159, DOI DOI 10.1145/774833.774857
   Eiglsperger M., 2003, Soft Vis 2003: Proceedings of the 2003 ACM Symposium on Software Visualization, P189, DOI DOI 10.1145/774833.774860
   Gibson J., 1979, The ecological approach to visual perception
   Goldstein B., 2002, Sensation and perception, V6th
   Gutwenger C., 2003, SOFTVIS 03, P179
   Herman I, 2000, IEEE T VIS COMPUT GR, V6, P24, DOI 10.1109/2945.841119
   HIMSOLT M, 1995, J VISUAL LANG COMPUT, V6, P255, DOI 10.1006/jvlc.1995.1015
   Hou DQ, 2005, PROG COMPREHEN, P87
   Kimchi R., 2003, PERCEPTUAL ORG VISIO
   Marr D., 1982, Visual perception
   MOORE P, 1993, J TECH WRIT COMMUN, V23, P137, DOI 10.2190/G748-BY68-L83T-X02J
   PETRE M, 1995, COMMUN ACM, V38, P33, DOI 10.1145/203241.203251
   Petre M, 1998, SOFTWARE VISUALIZATION, P453
   Poranene T., 2003, Proc. of the 8th Symp. on Programming Languages and Software Tools, P91
   Purchase H., 1997, Graph Drawing. 5th International Symposium, GD '97. Proceedings, P248, DOI 10.1007/3-540-63938-1_67
   Purchase H. C., 2002, Journal of Graph Algorithms and Applications, V6, DOI 10.7155/jgaa.00054
   Purchase HC, 1996, LECT NOTES COMPUT SC, V1027, P435, DOI 10.1007/BFb0021827
   PURCHASE HC, 2001, CRPITS 01 AUSTR S IN, P113
   Schiffman HarveyRichard., 2001, SENSATION PERCEPTION
   SUN D, 2004, ACSE 04 P 4 INT WORK, P51
   TAMASSIA R, 1988, IEEE T SYST MAN CYB, V18, P61, DOI 10.1109/21.87055
   Tilley S., 2003, Proceedings of the 21st Annual International Conference on Documentation, P184
   Wampler BruceE., 2002, The Essence of Object-Oriented Programming with Java and UML
   Ware C., 2002, Information Visualization, V1, P103, DOI 10.1057/palgrave.ivs.95000/3
   WARE C, 2000, INFORMATION VISUALIZ
NR 37
TC 20
Z9 23
U1 1
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2006
VL 14
IS 3
BP 233
EP 259
DI 10.1007/s11219-006-9218-2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 067KL
UT WOS:000239300800004
DA 2024-07-18
ER

PT J
AU Moses, J
   Farrow, M
   Parrington, N
   Smith, P
AF Moses, J
   Farrow, M
   Parrington, N
   Smith, P
TI A productivity benchmarking case study using Bayesian credible intervals
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
AB A productivity benchmarking case study is presented. Empirically valid evidence exists to suggest that certain project factors, such as development type and language type, influence project effort and productivity and a comparison is made taking into account these and other factors. The case study identifies a reasonably comparable set of data that was taken from a large benchmarking data repository by using the factors. This data set was then compared with the small data set presented by a company for benchmarking. The study illustrates how productivity rates might be misleading unless these factors are taken into account. Further, rather than simply giving a ratio for the company's productivity performance against the benchmark, the study shows how confidence about the company's performance can be expressed in terms of Bayesian confidence (credible) intervals for the ratio of the arithmetic means of the two data sets.
C1 Univ Sunderland, Sch Comp & Technol, Sunderland SR6 0DD, England.
   Univ Newcastle Upon Tyne, Dept Math & Stat, Newcastle Upon Tyne NE1 7RU, Tyne & Wear, England.
C3 University of Sunderland; Newcastle University - UK
RP Moses, J (corresponding author), Univ Sunderland, Sch Comp & Technol, Sunderland SR6 0DD, England.
EM john.moses@sund.ac.uk; malcolm.farrow@ncl.ac.uk
CR Altman D, 1993, PRACTICAL STAT MED R
   DEKKERS C, 2000, IT METRICS STRAT, V6, P1
   Gelman A., 1998, Bayesian data analysis
   *ISBSG, 2003, DAT REP REL 8
   KITCHENHAM BA, 1992, INFORM SOFTWARE TECH, V34, P211, DOI 10.1016/0950-5849(92)90077-3
   Moses J, 2005, SOFTWARE QUAL J, V13, P71, DOI 10.1007/s11219-004-5261-z
   MOSES J, 2004, 1 SOFTW MEAS EUR FOR, P247
   PUTNAM LH, 1996, FAMILIEAR METRIC MAN
   Reifer D.J., 2002, J DEFENSE SOFTWARE E, V15, P1
   SPIEGELHALTER DJ, 1996, BUGS 0 5 BAYESIAN IN
NR 10
TC 8
Z9 9
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2006
VL 14
IS 1
BP 37
EP 52
DI 10.1007/s11219-006-6000-4
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 014NM
UT WOS:000235486900004
DA 2024-07-18
ER

PT J
AU Beecham, S
   Hall, T
   Rainer, A
AF Beecham, S
   Hall, T
   Rainer, A
TI Defining a requirements process improvement model
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE requirements engineering (RE); requirements engineering process;
   software process improvement; RE process improvement; Software
   Capability Maturity Model (SW CMM); goal-question-metric
ID SOFTWARE PROCESS IMPROVEMENT; MATURITY; PROJECT; ORGANIZATIONS; CMM
AB Both software organisations and the academic community are aware that the requirements phase of software development is in need of further support. We address this problem by creating a specialised Requirements Capability Maturity Model (R-CMM1). The model focuses on the requirements engineering process as defined within the established Software Engineering Institute's (SEI's) software process improvement framework. Our empirical work with software practitioners is a primary motivation for creating this requirements engineering process improvement model. Although all organisations in our study were involved in software process improvement (SPI), they all showed a lack of control over many requirement engineering activities.
   This paper describes how the requirements engineering (RE) process is decomposed and prioritised in accordance with maturity goals set by the SEI's Software Capability Maturity Model (SW CMM). Our R-CMM builds on the SEI's framework by identifying and defining recommended RE sub-processes that meet maturity goals. This new focus will help practitioners to define their RE process with a view to setting realistic goals for improvement.
C1 Univ Hertfordshire, Dept Comp Sci, Hatfield A10 9AB, Herts, England.
C3 University of Hertfordshire
RP Univ Hertfordshire, Dept Comp Sci, Coll Lane, Hatfield A10 9AB, Herts, England.
EM s.beecham@herts.ac.uk; t.hall@herts.ac.uk; a.w.rainer@herts.ac.uk
RI Beecham, Simon C/M-1544-2016
OI Rainer, Austen/0000-0001-8868-263X; Hall, Tracy/0000-0002-2728-9014
CR [Anonymous], 1995, The Capability Maturity Model: Guidelines for Improving the Software Process
   [Anonymous], 1997, INTRO PERSONAL SOFTW
   [Anonymous], 1990, SYSTEM SOFTWARE REQU
   [Anonymous], 1997, Requirements engineering: a good practice guide
   [Anonymous], SOFTWARE ENG ENG APP
   [Anonymous], CHAOS REP
   [Anonymous], 1996, IDEAL USERS GUIDE SO
   [Anonymous], 1998, IEEE RECOMMENDED PRA, P830
   Arisholm E, 2000, J SYST SOFTWARE, V53, P3, DOI 10.1016/S0164-1212(00)00003-0
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   BASILI VR, 1995, SOFTWARE QUALITY ASS
   Beecham S, 2003, EMPIR SOFTW ENG, V8, P7, DOI 10.1023/A:1021764731148
   BEECHAM S, 2003, DEFINING REQUIREMENT
   BEECHAM S, 2004, EUROSPI 2004 TRONDH
   Beecham S., 2003, Building a requirements process improvement model
   BEECHAM S, 2005, IN PRESS J SYSTEMS S
   BOEHM B, 2001, USING WIN WIN REQUIR
   BRITTON C, 2000, OBJECT ORIENTED SYST
   BRODMAN JG, 1994, 16 INT C SOFTW ENG S
   BURNSTEIN I, 1996, CROSSTALK J DEFENSE
   Christie AM, 1999, J SYST SOFTWARE, V46, P107, DOI 10.1016/S0164-1212(99)00004-7
   *CMMI, 2001, CAP MAT MOD INT CMMI
   Cresswell J., 1998, QUALITY INQUIRY RES
   Curtis B., 1995, PEOPLE CAPABILITY MA
   DASKALANTONAKIS MK, 1994, IEEE SOFTWARE, V11
   DAVID A, 2000, EUROPEAN J OPERATION, V134, P459
   DAVIS A, 1988, J SYST SOFTWARE, P297
   DAVIS A, 1993, P 1 INT SOFTW METR S
   Deming W.E., 1982, QUALITY PRODUCTIVITY
   Dooley K, 2001, RES ENG DES, V13, P23, DOI 10.1007/s001630100003
   Dorfman Merlin, 1997, SOFTWARE ENG
   El Emam K., 1996, Requirements Engineering, V1, P4, DOI 10.1007/BF01235763
   ELEMAM K, 1995, 2 IEEE INT S REQ ENG
   ELEMAM K, 1995, RELIABILITY MEASURIN
   Fayad ME, 1997, COMMUN ACM, V40, P101, DOI 10.1145/260750.260783
   Gause D.C., 1989, EXPLORING REQUIREMEN
   Gilb T, 1996, IEEE SOFTWARE, V13, P97, DOI 10.1109/52.476291
   Gross D., 2001, Requirements Engineering, V6, P18, DOI 10.1007/s007660170013
   Hackos JT, 1997, TECH COMMUN, V44, P369
   HALL T, 2002, EASE 2002 6 INT C EM
   HALL T, 2002, IEE P SOFTWARE
   Hayes W., 1995, Moving On Up: Data and Experience Doing CMM-Based Software Process Improvement (No. CMU/SEI-95-TR-008)
   Hofmann HF, 2001, IEEE SOFTWARE, V18, P58, DOI 10.1109/MS.2001.936219
   Humphrey W.S., 1989, MANAGING SOFTWARE PR
   Humphrey WattsS., 2000, Introduction to the team software process
   Humphrey WS, 2002, ANN SOFTW ENG, V14, P39, DOI 10.1023/A:1020593305601
   IBANEZ M, 1996, EUROPEAN USER SURVEY
   *IEEE, 1999, IEEE STAND SOFTW ENG
   Jalote Pankaj., 1997, An Integrated Approach to Software Engineering
   Lauesen S., 2001, Requirements Engineering, V6, P37, DOI 10.1007/PL00010355
   LINDLAND OI, 1994, IEEE SOFTWARE, V11, P42, DOI 10.1109/52.268955
   Loucopoulos P., 1995, SYSTEM REQUIREMENTS
   LUBARS M, 1993, P IEEE INT S REQ ENG
   MADHAVJI NH, 1991, SOFTWARE ENG J, V6, P234, DOI 10.1049/sej.1991.0027
   Moynihan T, 2000, J SYST SOFTWARE, V53, P99, DOI 10.1016/S0164-1212(00)00049-2
   NEISSINK F, 2002, IT SERVICE CAPABILIT, P127
   Ngwenyama O, 2003, IEEE T ENG MANAGE, V50, P100, DOI 10.1109/TEM.2002.808267
   PAULK MC, 2000, NOV 1999 HIGH MAT WO
   PERRY DE, 1994, IEEE SOFTWARE, V11, P36, DOI 10.1109/52.300082
   PFLEEGER SL, 1995, J SYST SOFTWARE, V31, P143, DOI 10.1016/0164-1212(94)00094-4
   POTTER N, 2001, PRACTICAL CMM SOFTWA
   PRESSMAN R, 2001, SOFTWARE ENG 5 EDITI
   Reifer DJ, 2000, J SYST SOFTWARE, V50, P97, DOI 10.1016/S0164-1212(99)00119-3
   RIFKIN S, 2001, IEEE SOFTWARE
   Robertson S, 2012, Mastering the requirements process: getting requirements right
   ROGOWAY P, 1998, REAP BUSINESS BENEFI
   ROSS S, 1999, INT C PROD FOC SOFTW
   SAWYER P, 1997, SOFTWARE PROCESS IMP, V3
   *SEI, 2002, PROC MAT PROF SOFTW
   *SEI, 1996, DESCR SYST ENG CAP
   Solingen R. V., 1999, GOAL QUESTION METRIC
   Sommerville I, 2001, Software Engineering
   WATKINS R, 1994, IEEE SOFTWARE, V11, P104, DOI 10.1109/52.300100
   WIEGERS K, 1998, SOFTWARE DEV, V6
   WIEGERS K, 1998, IEEE SOFTWARE, V15
   YU ESK, 1997, INT C ENT INT MOD TE
NR 76
TC 32
Z9 39
U1 2
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2005
VL 13
IS 3
BP 247
EP 279
DI 10.1007/s11219-005-1752-9
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 946IW
UT WOS:000230566600004
DA 2024-07-18
ER

PT J
AU Voas, J
AF Voas, J
TI Trusted software's holy grail
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software quality; metrics; measurement; quality of service; adaptive
   software quality
AB In this paper, I discuss what I believe is the grand challenge facing the software quality research community: the ability to accurately determine, in the very earliest stages of development, the techniques that will be needed to achieve desired levels of non-functional attributes such as: reliability, availability, fault tolerance, testability, maintainability, performance, software safety, and software security. I will further consider the associated technical and economic tradeoffs that must be made in order to: (1) achieve these desired qualities, and (2) to certify that these qualities will be exhibited when the software is deployed. And I will also take into account the fact that satisfying a particular level of each attribute requires specific expenditures, some of these attributes conflict with each other, and when the environment or usage profile of the software is modified, all guarantees or claims of quality should be viewed suspiciously until additional evidence is provided.
C1 Cigital Inc, Dulles, VA 20165 USA.
RP Voas, J (corresponding author), Cigital Inc, 21351 Ridgetop Circle,Suite 400, Dulles, VA 20165 USA.
CR MORELL LJ, 1993, J SYST SOFTWARE, V20, P245, DOI 10.1016/0164-1212(93)90068-9
   Viega J., 2001, BUILDING SECURE SOFT
   Voas J, 2000, IEEE SOFTWARE, V17, P20, DOI 10.1109/52.877855
   Voas J, 2001, IEEE SOFTWARE, V18, P96, DOI 10.1109/52.922733
   Voas J, 1998, IEEE SOFTWARE, V15, P22, DOI 10.1109/52.687940
   Voas J, 1997, IEEE SOFTWARE, V14, P93, DOI 10.1109/MS.1997.595964
   Voas J, 2000, COMPUTER, V33, P32, DOI 10.1109/2.863965
   Voas JM, 1998, COMPUTER, V31, P53, DOI 10.1109/2.683008
   VOAS JM, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.382180
NR 9
TC 8
Z9 16
U1 0
U2 4
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAY
PY 2003
VL 11
IS 1
BP 9
EP 17
DI 10.1023/A:1023679926998
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 674WP
UT WOS:000182660400003
DA 2024-07-18
ER

PT J
AU Marinho, EH
   Ferreira, F
   Diniz, JP
   Figueiredo, E
AF Marinho, Euler Horta
   Ferreira, Fischer
   Diniz, Joao P.
   Figueiredo, Eduardo
TI Evaluating testing strategies for resource related failures in mobile
   applications
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mobile applications; Software testing; Sampling strategies; Resource
   interactions
ID FRAMEWORK
AB Mobile applications have been used for multiple purposes from entertainment to critical domains. As a consequence, the quality of mobile applications has become a crucial aspect, for instance, by promoting the use of testing as a quality assurance practice. The diversity of mobile platforms is pervaded by several resources related to communication capabilities, sensors, and user-controlled options. As a result, applications can present unexpected behaviors and resource interactions can introduce failures that manifest themselves in specific resource combinations. These failures can compromise the mobile application quality and harm the user experience. We evaluate the failure-detection capability and effectiveness of five sampling testing strategies (Random, One-Enabled, One-Disabled, Most-Enabled-Disabled, and Pairwise) in the context of resource related failures in 15 mobile applications. We focus on 14 common resources of the Android platform and analyze the resource interactions more likely to cause failures. Random had great percentages of failing test cases, followed by One-Enabled, Most-Enabled-Disabled, and Pairwise. We observe that One-Enabled and One-Disabled are the most effective testing strategies for six and four applications, respectively. Surprisingly, resource pairs have more influence on failures than other resource combinations, varying widely among the applications.
C1 [Marinho, Euler Horta; Diniz, Joao P.; Figueiredo, Eduardo] Univ Fed Minas Gerais, Comp Sci Dept, Av Antonio Carlos,6627 Pampulha, BR-31270901 Belo Horizonte, MG, Brazil.
   [Marinho, Euler Horta] Univ Fed Ouro Preto, Comp & Syst Dept, Rua Trinta & Seis 115 Loanda, BR-35931008 Joao Monlevade, MG, Brazil.
   [Ferreira, Fischer] Univ Fed Ceara, Sobral campus, Rua Coronel Estanislau Frota 563, BR-62010560 Sobral, Ceara, Brazil.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Ouro
   Preto; Universidade Federal do Ceara
RP Marinho, EH (corresponding author), Univ Fed Minas Gerais, Comp Sci Dept, Av Antonio Carlos,6627 Pampulha, BR-31270901 Belo Horizonte, MG, Brazil.; Marinho, EH (corresponding author), Univ Fed Ouro Preto, Comp & Syst Dept, Rua Trinta & Seis 115 Loanda, BR-35931008 Joao Monlevade, MG, Brazil.
EM eulerhm@dcc.ufmg.br; fischer.ferreira@sobral.ufc.br; jpaulo@dcc.ufmg.br;
   figueiredo@dcc.ufmg.br
FU CAPES; CNPq
FX This work was partially supported by Brazilian funding agencies: CAPES
   and CNPq.
CR Abal I., 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, ASE '14, P421
   Agrawal R., 1993, SIGMOD Record, V22, P207, DOI 10.1145/170036.170072
   Agrawal R., 1994, P INT VLDB C VLDB 94, P487, DOI DOI 10.5555/645920.672836
   Al-Hajjaji M, 2017, ACM SIGPLAN NOTICES, V52, P144, DOI [10.1145/2993236.2993253, 10.1145/3093335.2993253]
   Amalfitano D, 2017, J SYST SOFTWARE, V125, P322, DOI 10.1016/j.jss.2016.12.017
   [Anonymous], 2012, EXPT SOFTWARE ENG, DOI DOI 10.1007/978-3-642-29044-2
   Apel Sven, 2013, Feature-Oriented Software Product Lines-Concepts and Implementation, DOI DOI 10.1007/978-3-642-37521-7
   Apel Sven., 2013, P 5 INT WORKSHOP FEA, P1, DOI [10.1145/2528265.2528267, DOI 10.1145/2528265.2528267]
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Bertolino A, 2019, ACM COMPUT SURV, V52, DOI 10.1145/3331447
   Borges H, 2018, J SYST SOFTWARE, V146, P112, DOI 10.1016/j.jss.2018.09.016
   Bowen T. F., 1989, Seventh International Conference on Software Engineering for Telecommunication Switching Systems: SETSS 89 (Conf. Publ. No.306), P59
   Cai HP, 2021, IEEE T SOFTWARE ENG, V47, P2934, DOI 10.1109/TSE.2020.2975176
   Coelho J, 2020, INFORM SOFTWARE TECH, V122, DOI 10.1016/j.infsof.2020.106274
   Cohen M.B., 2007, P 2007 INT S SOFTW T, P129
   Escobar-Velásquez C, 2022, IEEE T SOFTWARE ENG, V48, P186, DOI 10.1109/TSE.2020.2982638
   Ferreira F, 2021, J SYST SOFTWARE, V179, DOI 10.1016/j.jss.2021.110990
   Galindo JA, 2016, SOFTWARE QUAL J, V24, P365, DOI 10.1007/s11219-014-9258-y
   Hornik Kurt, 2005, Journal of Statistical Software, V14, DOI DOI 10.18637/JSS.V014.I15
   Júnior MC, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3507903
   Kong PF, 2019, IEEE T RELIAB, V68, P45, DOI 10.1109/TR.2018.2865733
   Lam W, 2020, PROC INT SYMP SOFTW, P403, DOI 10.1109/ISSRE5003.2020.00045
   Lu Y, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P268, DOI 10.1145/3338906.3338980
   Luo C, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3372788
   Marinho E. H., 2021, INT C QUAL INF COMM, P49
   Mateus BG, 2019, EMPIR SOFTW ENG, V24, P3356, DOI 10.1007/s10664-019-09727-4
   Medeiros F, 2016, PROC INT CONF SOFTW, P643, DOI 10.1145/2884781.2884793
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Parry O, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3476105
   Pecorelli F., 2022, EMPIR SOFTW ENG, V27
   Silva DB, 2018, INFORM SOFTWARE TECH, V101, P32, DOI 10.1016/j.infsof.2018.05.006
   Souto S, 2017, PROC INT CONF SOFTW, P632, DOI 10.1109/ICSE.2017.64
   Sun JL, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P204, DOI 10.1145/3460319.3464806
   Thüma T, 2014, SCI COMPUT PROGRAM, V79, P70, DOI 10.1016/j.scico.2012.06.002
   Tramontana P, 2019, SOFTWARE QUAL J, V27, P149, DOI 10.1007/s11219-018-9418-6
   Vilkomir S, 2018, SOFTWARE QUAL J, V26, P197, DOI 10.1007/s11219-017-9357-7
   Villanes IK, 2022, INT J COMPUT APPL T, V69, P173, DOI 10.1504/IJCAT.2022.126886
   Wei LL, 2020, IEEE T SOFTWARE ENG, V46, P1176, DOI 10.1109/TSE.2018.2876439
NR 38
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1121
EP 1147
DI 10.1007/s11219-023-09627-3
EA APR 2023
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY4P9
UT WOS:000972780000001
DA 2024-07-18
ER

PT J
AU Shao, Q
   Gou, XD
   Huang, TT
   Yang, SK
AF Shao, Qi
   Gou, Xiaodong
   Huang, Tingting
   Yang, Shunkun
TI Anti-aging analysis for software reliability design modes in the context
   of single-event effect
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software aging; Reliability design modes; Software rejuvenation;
   Probabilistic model checking; Single-event effect
ID REJUVENATION POLICIES; SYSTEM
AB Software aging is a risk associated with the continuous operation of software, and it is essential and meaningful to develop anti-aging technology to offset or mitigate the aging phenomenon. While considerable attention has been devoted to software aging and anti-aging techniques, few studies have focused on single-event effect as a software-aging reason in the context of a space environment. In this study, aiming at the software-aging problem caused by the specific reason above, besides the classic software rejuvenation, we further explore the anti-aging effects and rules of software reliability design modes, including triple modular redundancy (TMR) and logical partitioning. Reliability and availability are used as aging indicators, and the anti-aging effect of reliability design modes and rejuvenation policy is quantitatively analyzed through probabilistic model checking. The simulation and theoretical results show that the reliability design mode can alleviate software aging. However, the TMR mode is time-sensitive. It is found that the application of the rejuvenation policy makes time-sensitivity disappear. A combination of reliability design modes and rejuvenation policy can obtain the best anti-aging effect. The analysis and discussion in this paper can provide useful insights for software researchers to instantiate different software anti-aging inventions or new applications.
C1 [Shao, Qi; Gou, Xiaodong; Huang, Tingting; Yang, Shunkun] Beihang Univ, Sch Reliabil & Syst Engn, XueYuan Rd 37, Beijing 100083, Peoples R China.
C3 Beihang University
RP Yang, SK (corresponding author), Beihang Univ, Sch Reliabil & Syst Engn, XueYuan Rd 37, Beijing 100083, Peoples R China.
EM ysk@buaa.edu.cn
FU National Natural Science Foundation of China [61672080]; National
   Aerospace Science Foundation of China [2016ZD51031, ZFYY41402020502,
   JSZL2017601B005]
FX We thank the National Natural Science Foundation of China (Grant Nos.
   61672080) and National Aerospace Science Foundation of China (Grant Nos.
   2016ZD51031) for their support. This work is also partially supported by
   ZFYY41402020502 and JSZL2017601B005.
CR ADELL P, 2008, ASSESSING MITIGATING
   Andrzejak A, 2007, 2007 10TH IFIP/IEEE INTERNATIONAL SYMPOSIUM ON INTEGRATED NETWORK MANAGEMENT (IM 2009), VOLS 1 AND 2, P159, DOI 10.1109/INM.2007.374780
   Avritzer A, 2010, J SYST SOFTWARE, V83, P1568, DOI 10.1016/j.jss.2010.05.026
   Bolchini C, 2010, IEEE EMBED SYST LETT, V2, P107, DOI 10.1109/LES.2010.2073441
   CAO J, 2006, INTRO RELIABILITY MA, P182
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Cotroneo D, 2014, ACM J EMERG TECH COM, V10, DOI 10.1145/2539117
   Das A, 2009, PROCEEDINGS OF THE 2009 INTERNATIONAL CONFERENCE ON SOFTWARE TECHNOLOGY AND ENGINEERING, P189, DOI 10.1142/9789814289986_0035
   Eto H, 2006, LECT NOTES COMPUT SC, V4328, P17
   Gaillard R, 2011, FRONT ELECTRON TEST, V41, P27, DOI 10.1007/978-1-4419-6993-4_2
   Garg S, 1998, IEEE T COMPUT, V47, P96, DOI 10.1109/12.656092
   GOSSETT CA, 1993, IEEE T NUCL SCI, V40, P1845, DOI 10.1109/23.273471
   Grottke M, 2007, COMPUTER, V40, P107, DOI 10.1109/MC.2007.55
   Gunneflo U., 1989, 19 INT S FAULT TOLER, P340, DOI DOI 10.1109/FTCS.1989.105590
   Heijmen T, 2011, FRONT ELECTRON TEST, V41, P1, DOI 10.1007/978-1-4419-6993-4_1
   HUANG YN, 1995, DIG PAP INT SYMP FAU, P381, DOI 10.1109/FTCS.1995.466961
   Jiang LT, 2007, J SYST SOFTWARE, V80, P590, DOI 10.1016/j.jss.2006.06.029
   Kourai K, 2011, IEEE T DEPEND SECURE, V8, P839, DOI 10.1109/TDSC.2010.20
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2007, LECT NOTES COMPUT SC, V4486, P220
   LESEA A, 2008, WP286 XIL INC
   Machida F., 2012, Proceedings of the 2012 IEEE 23rd International Symposium on Software Reliability Engineering (ISSRE), P131, DOI 10.1109/ISSRE.2012.19
   Machida F, 2017, IEEE T RELIAB, V66, P123, DOI 10.1109/TR.2016.2615880
   Matias R, 2014, SYM REL DIST SYST, P311, DOI 10.1109/SRDS.2014.38
   McMurtrey D., 2008, Estimating TMR Reliability on FPGAs Using Markov Models
   Ning GR, 2016, IEEE T RELIAB, V65, P1630, DOI 10.1109/TR.2016.2570539
   Okamura H, 2014, QUAL TECHNOL QUANT M, V11, P335, DOI 10.1080/16843703.2014.11673349
   Okamura H., 2011, Proceedings of the 2011 IEEE Third International Workshop on Software Aging and Rejuvenation (WoSAR 2011), P14, DOI 10.1109/WoSAR.2011.11
   Okamura H, 2013, 2013 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P281, DOI 10.1109/ISSREW.2013.6688907
   Okamura H, 2013, PERFORM EVALUATION, V70, P197, DOI 10.1016/j.peva.2012.07.004
   PARNAS DL, 1994, PROC INT CONF SOFTW, P279, DOI 10.1109/ICSE.1994.296790
   Pratt Brian, 2008, Proceedings of the 2008 International Conference on Engineering of Reconfigurable Systems & Algorithms (ERSA 2008), P153
   QIAO Y, 2018, IEEE T RELIABILITY
   QIN F, 2018, IEEE T RELIAB, P1
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   Rahme J, 2015, INT J SOFTW ENG KNOW, V25, P1491, DOI 10.1142/S021819401540029X
   Santos H, 2015, J SYST SOFTWARE, V104, P41, DOI 10.1016/j.jss.2015.02.017
   Nguyen TA, 2014, SCI WORLD J, DOI 10.1155/2014/165316
   VALENTIM NA, 2016, IEEE INT S SOFTW REL
   von Neumann J., 1956, Annals of Mathematics Studies, V34, P43
   Wang A, 2009, IEEE ICC, P497
   Xie W, 2005, RELIAB ENG SYST SAFE, V87, P13, DOI 10.1016/j.ress.2004.02.011
   XIN W, 2010, E PRODUCT E SERVICE, P1
   Yang MH, 2014, COMPUTING, V96, P503, DOI 10.1007/s00607-014-0385-x
   Zhao J, 2014, IEEE T DEPEND SECURE, V11, P130, DOI 10.1109/TDSC.2013.38
NR 45
TC 2
Z9 2
U1 2
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 221
EP 243
DI 10.1007/s11219-019-09464-3
EA OCT 2019
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000489921100001
DA 2024-07-18
ER

PT J
AU Mahmud, N
AF Mahmud, Nidhal
TI A minimization algorithm for automata generated fault trees with
   priority gates
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Fault trees; Failure expressions; Automata; Dynamic behavior; Model
   reduction
ID OPTIMIZATION
AB Fault tree analysis is still widely practiced in high-hazard industries. We propose in this article an algorithm for the reduction of fault tree expressions that are generated from automata representations of failure behaviors. Automata formalisms are increasingly being used to describe systems exhibiting sequence-dependent failures-i.e., the overall outcome like a total failure of the system can depend on the order in which events occur. A set of paths leading to a safety-relevant state is encoded as a standard sum of product canonical form, and without any loss of the significance of the sequencing of events. That is, the corresponding fault tree expression is basically a Boolean formula which is extended with the necessary temporal features (event occurrence priority). Such expressions can then be reduced into minimal canonical forms by using the Boolean methods together with the required temporal logic calculus. Since minimal failure sequences can be determined from the obtained reduced models, the proposed approach can improve the analysis of the dynamic effects of the sequencing of faults and propagated errors in such models. As a consequence, it can have a positive impact on the design of failure prevention measures. A fault tolerant example system exhibiting dynamic behavior is used to highlight the benefits of the approach.
C1 [Mahmud, Nidhal] Univ Hull, Cottingham Rd, Kingston Upon Hull HU6 7RX, N Humberside, England.
C3 University of Hull
RP Mahmud, N (corresponding author), Univ Hull, Cottingham Rd, Kingston Upon Hull HU6 7RX, N Humberside, England.
EM nidhal.mahmud@gmail.com
RI Mahmud, Nidhal/G-3361-2016
OI Mahmud, Nidhal/0000-0003-0908-5963
CR [Anonymous], 2010, EAST ADL DOM MOD SPE
   Boudali H, 2010, IEEE T DEPEND SECURE, V7, P128, DOI 10.1109/TDSC.2009.45
   Chen D., 2013, IFAC Proc., V46, P91
   Crouzen P, 2008, LECT NOTES COMPUT SC, V5201, P295, DOI 10.1007/978-3-540-85361-9_25
   Dehlinger J, 2008, NUCL ENG TECHNOL, V40, P365, DOI 10.5516/NET.2008.40.5.365
   DUGAN JB, 1992, IEEE T RELIAB, V41, P363, DOI 10.1109/24.159800
   Joshi A., 2007, WORKSH ARCH DEP SYST
   Kolagari Ramin Tavakoli, 2015, International Journal of Conceptual Structures and Smart Applications, V3, P25, DOI 10.4018/IJCSSA.2015070103
   Konak A, 2006, RELIAB ENG SYST SAFE, V91, P992, DOI 10.1016/j.ress.2005.11.018
   Mahmud Nidhal, 2012, Performance Evaluation Review, V39, P79, DOI 10.1145/2185395.2185444
   Mahmud N., 2010, 2010 International Conference on Dependable Systems and Networks Workshops (DSN-W), P45, DOI 10.1109/DSNW.2010.5542620
   Mahmud N., 2017, 63 ANN REL MAINT S R
   Mahmud N., 2015, SAFETY RELIABILITY C, P1635, DOI [10.1201/b19094-213, DOI 10.1201/B19094-213]
   Mahmud N., 2012, THESIS
   Mahmud N, 2014, SAFETY, RELIABILITY AND RISK ANALYSIS: BEYOND THE HORIZON, P2741
   Merle G, 2010, IEEE T RELIAB, V59, P250, DOI 10.1109/TR.2009.2035793
   Mian ZB, 2015, ADV INTELL SYST, V307, P91, DOI 10.1007/978-3-319-08964-5_6
   Mitsubishi Heavy Industries, 2010, TECHNICAL REV, V47
   Hidalgo EMP, 2013, PROCEEDINGS OF THE ASME 32ND INTERNATIONAL CONFERENCE ON OCEAN, OFFSHORE AND ARCTIC ENGINEERING - 2013, VOL 2B
   Rauzy A, 2003, RELIAB ENG SYST SAFE, V79, P33, DOI 10.1016/S0951-8320(02)00165-5
   Rauzy A, 2002, RELIAB ENG SYST SAFE, V78, P1, DOI 10.1016/S0951-8320(02)00042-X
   Vesely W.E., 1981, Fault tree handbook
   Vesely William, 2002, Fault Tree Handbook with Aerospace Applications
   Walker M, 2009, CONTROL ENG PRACT, V17, P1115, DOI 10.1016/j.conengprac.2008.10.003
NR 24
TC 2
Z9 2
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1015
EP 1043
DI 10.1007/s11219-019-09444-7
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400005
DA 2024-07-18
ER

PT J
AU Makedonski, P
   Adamis, G
   Käärik, M
   Kristoffersen, F
   Carignani, M
   Ulrich, A
   Grabowski, J
AF Makedonski, Philip
   Adamis, Gusztav
   Kaarik, Martti
   Kristoffersen, Finn
   Carignani, Michele
   Ulrich, Andreas
   Grabowski, Jens
TI Test descriptions with ETSI TDL
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Test description language; Domain-specific
   modelling; Test methodology; Testing in standardisation
AB To address the need for abstract, high-level test descriptions that can be shared among different stakeholders, the European Telecommunications Standards Institute (ETSI) commissioned the design of the Test Description Language (TDL). TDL is designed as a domain-specific language for testing, consisting of a standardised abstract syntax (meta-model) and concrete syntaxes for textual specification, graphical design, and model exchange between tools. Its main purpose is to support a test methodology that is followed in the standardisation work for software-intense systems at ETSI and is applicable in industrial projects as well. TDL enables the formal specification of both test objectives derived from system requirements and test descriptions refining the test objectives. The latter serve as blueprint for the implementation of executable tests. A standardised mapping of TDL specifications to test scripts in the standardised test execution language TTCN-3 widens the reach of TDL to ensure compatibility and consistency of generated executable tests. An open-source toolset has been developed as a common platform to accelerate the adoption of TDL and lower the barrier to entry for users and tool vendors. Reports from pilot applications within three ETSI standardisation groups demonstrate the practicality of the chosen approach.
C1 [Makedonski, Philip; Grabowski, Jens] Univ Gottingen, Inst Comp Sci, Gottingen, Germany.
   [Adamis, Gusztav] Ericsson Hungary Ltd, Test Competence Ctr, Budapest, Hungary.
   [Kaarik, Martti] Elvior OU, Tallinn, Estonia.
   [Kristoffersen, Finn] Cinderella ApS, Tool Vendor, Copenhagen, Denmark.
   [Carignani, Michele] European Telecommun Stand Inst, Ctr Testing & Interoperabil, Sophia Antipolis, France.
   [Ulrich, Andreas] Siemens AG, Corp Technol, Munich, Germany.
C3 University of Gottingen; Ericsson; Siemens AG; Siemens Germany
RP Makedonski, P (corresponding author), Univ Gottingen, Inst Comp Sci, Gottingen, Germany.
EM makedonski@cs.uni-goettingen.de; gusztav.adamis@ericsson.com;
   martti.kaarik@elvior.com; finn@cinderella.dk;
   michele.carignani@etsi.org; andreas.ulrich@siemens.com;
   grabowski@cs.uni-goettingen.de
OI Makedonski, Philip/0000-0001-7752-0029
FU European Telecommunications Standards Institute (ETSI)
FX The work on Test Description Language (TDL) has been partially funded by
   the European Telecommunications Standards Institute (ETSI) in the
   context of the Specialist Task Force (STF) projects 454, 476, 492, and
   522 between 2013 and 2017.
CR [Anonymous], 2013, 291193 ISOIECIEEE
   [Anonymous], 2017, 202786 ETSI ES
   [Anonymous], 2015, 202782 ETSI ES
   [Anonymous], 2011, 202951 ETSI ES
   [Anonymous], 2011, 102840 ETSI TR
   [Anonymous], 2018, 2031196 ETSI ES
   [Anonymous], 1998, Z120 ITUT
   [Anonymous], 2018, 2031195 ETSI ES
   [Anonymous], 1994, 96461 ISOIEC
   [Anonymous], 2016, 2018731 ETSI ES
   [Anonymous], 2018, 2031194 ETSI ES
   [Anonymous], 2009, 202553 ETSI ES
   [Anonymous], 2013, 203130 ETSI EG
   [Anonymous], 2018, 2031193 ETSI ES
   [Anonymous], 2018, 2031197 ETSI ES
   [Anonymous], 2018, 2031191 ETSI ES
   [Anonymous], 2018, 2031192 ETSI ES
   ASAM ATX, 2012, AUT TEST EXCH FORM A
   Bouquet F., 2007, Proceedings of the 3rd International Workshop on Advances in Modelbased Testing, P95
   Grossmann J, 2006, P 2 INT S LEV APPL F, P441
   Guduvan Alexandru-Robert, 2013, MODELSWARD 2013. 1st International Conference on Model-Driven Engineering and Software Development. Proceedings, P5
   Hammond S., 2012, Proceedings of the 50th Annual Southeast Regional Conference (ACM-SE '12), P158, DOI DOI 10.1145/2184512.2184550
   ISO, 2011, Road vehicles-Open Test sequence eXchange format (OTX)-ISO 13209
   ITU-T, 2011, Recommendation Z.120
   Kaner C, 2003, SOFTWARE TESTING QUA, P16
   Kanstrén T, 2012, 2012 IEEE INTERNATIONAL CONFERENCE ON INDUSTRIAL TECHNOLOGY (ICIT), P319, DOI 10.1109/ICIT.2012.6209957
   Kolovos DS, 2009, LECT NOTES COMPUT SC, V5115, P204, DOI 10.1007/978-3-642-11447-2_13
   Micskei Z, 2011, SOFTW SYST MODEL, V10, P489, DOI 10.1007/s10270-010-0157-9
   OMG MOF, 2014, FORMAL20140405 OMG M
   OMG OCL, 2012, FORMAL20120509 OMG O
   OMG UML, 2015, FORMAL20150301 OMG U
   OMG UTP, 2013, FORMAL20130403 OMG U
   OMG XMI, 2014, FORMAL20140406 OMG U
   OMG-MARTE, 2011, UML PROF MARTE MOD A
   Pajunen T, 2011, 4 IEEE INT C SOFTW T, P242
   Razorcat, 2014, CCDL WHIT RAZ TECHN
   Solís C, 2011, EUROMICRO CONF PROC, P383, DOI 10.1109/SEAA.2011.76
   Trautsch F, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P97, DOI [10.1109/MSR.2016.019, 10.1145/2901739.2901753]
   Ulrich A, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P601
NR 39
TC 6
Z9 6
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 885
EP 917
DI 10.1007/s11219-018-9423-9
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500015
DA 2024-07-18
ER

PT J
AU Kulkarni, N
   Varma, V
AF Kulkarni, Naveen
   Varma, Vasudeva
TI Supporting comprehension of unfamiliar programs by modeling cues
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Program comprehension; Cues; Information scent; Integrated development
   environment; Developer interaction; Summarization
ID SOFTWARE MAINTENANCE; COMPUTER-PROGRAMS; BEHAVIOR; INFORMATION
AB Developers need to comprehend a program before modifying it. In such cases, developers use cues to establish the relevance of a piece of information with a task. Being familiar with different kinds of cues will help the developers to comprehend a program faster. But unlike the experienced developers, novice developers fail to recognize the relevant cues, because (a) there are many cues and (b) they might be unfamiliar with the artifacts. However, not much is known about the developers' choice of cue. Hence, we conducted two independent studies to understand the kind of cues used by the developers and how a tool influences their cue selection. First, from our user study on two common comprehension tasks, we found that developers actively seek the cues and their cue source choices are similar but task dependent. In our second exploratory study, we investigated whether an integrated development environment (IDE) influences a developer's cue choices. By observing their interaction history while fixing bugs in Eclipse IDE, we found that the IDE's influence on their cue choices was not statistically significant. Finally, as a case in point, we propose a novel task-specific program summarization approach to aid novice developers in comprehending an unfamiliar program. Our approach used developers cue choices to synthesize the summaries. A comparison of the synthesized summaries with the summaries recorded by the developers shows both had similar content. This promising result encourages us to explore task-specific cue models, which can aid novice developers to accomplish complex comprehension tasks faster.
C1 [Kulkarni, Naveen; Varma, Vasudeva] Int Inst Informat Technol IIIT H, Software Engn Res Ctr, Hyderabad 500032, Andhra Pradesh, India.
   [Kulkarni, Naveen] Infosys Ltd, Bengaluru, India.
C3 International Institute of Information Technology Hyderabad; Infosys
   Limited
RP Kulkarni, N (corresponding author), Int Inst Informat Technol IIIT H, Software Engn Res Ctr, Hyderabad 500032, Andhra Pradesh, India.; Kulkarni, N (corresponding author), Infosys Ltd, Bengaluru, India.
EM naveen.kulkarni@research.iiit.ac.in; vv@iiit.ac.in
RI Varma, Vasudeva/AIB-4832-2022
OI Varma, Vasudeva/0000-0003-1923-1725
CR Ali N, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P191, DOI 10.1109/ICSM.2012.6405271
   [Anonymous], 1986, ESP 86
   Bednarik R., 2006, Proceedings. ETRA 2006. Symposium on Eye Tracking Research and Applications, P125, DOI 10.1145/1117309.1117356
   Biggers L. R., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P492, DOI 10.1109/ICSM.2011.6080816
   BIGGERSTAFF TJ, 1993, PROC INT CONF SOFTW, P482, DOI 10.1109/ICSE.1993.346017
   BROOKS R, 1983, INT J MAN MACH STUD, V18, P543, DOI 10.1016/S0020-7373(83)80031-5
   BROOKS RE, 1980, COMMUN ACM, V23, P207, DOI 10.1145/358841.358847
   CORBI TA, 1989, IBM SYST J, V28, P294, DOI 10.1147/sj.282.0294
   Crosby Martha E, 2002, 14 WORKSH PSYCH PROG, P58
   Deissenboeck F, 2006, SOFTWARE QUAL J, V14, P261, DOI 10.1007/s11219-006-9219-1
   Fritz T., 2007, ESEC-FSE '07: Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering September 2007, P341, DOI [10.1145/ 1287624.1287673, DOI 10.1145/1287624.1287673]
   Geer D, 2005, COMPUTER, V38, P16
   Gellenbeck Edward M., 1991, TECHNICAL REPORT
   Gu Z., 2014, ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P83
   Haiduc S., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P223, DOI 10.1145/1810295.1810335
   Hamou-Lhadj A, 2006, INT C PROGRAM COMPRE, P181, DOI 10.1109/ICPC.2006.45
   Hesse W, 2005, LECT NOTES ARTIF INT, V3626, P288
   Karahasanovic A, 2007, J SYST SOFTWARE, V80, P1541, DOI 10.1016/j.jss.2006.10.041
   Katragadda R., 2009, CLIAWS3 '09: Proceedings of the 3rd International Workshop on Cross Lingual Information Access, P46
   Kersten Mik, 2006, P 14 ACM SIGSOFT INT, P1
   Ko AJ, 2006, IEEE T SOFTWARE ENG, V32, P971, DOI 10.1109/TSE.2006.116
   LaToza T. D., 2006, 28th International Conference on Software Engineering Proceedings, P492, DOI 10.1145/1134285.1134355
   LaToza Thomas D., 2007, P ESECFSE 2007 DUBR, P361, DOI [DOI 10.1145/1287624.1287675, 10.1145/1287624.1287675]
   Lawrance J, 2008, CHI 2008: 26TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS VOLS 1 AND 2, CONFERENCE PROCEEDINGS, P1323
   Moreno L, 2013, CONF PROC INT SYMP C, P23, DOI 10.1109/ICPC.2013.6613830
   Murphy GC, 2006, IEEE SOFTWARE, V23, P76, DOI 10.1109/MS.2006.105
   Nenkova A, 2004, HLT-NAACL 2004: HUMAN LANGUAGE TECHNOLOGY CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE MAIN CONFERENCE, P145
   PENNINGTON N, 1987, COGNITIVE PSYCHOL, V19, P295, DOI 10.1016/0010-0285(87)90007-7
   Pirolli P, 1999, PSYCHOL REV, V106, P643, DOI 10.1037/0033-295X.106.4.643
   Pirolli P., 1997, CHI 97, P3
   Rastkar S., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P103, DOI 10.1109/ICSM.2011.6080777
   Robillard MP, 2004, IEEE T SOFTWARE ENG, V30, P889, DOI 10.1109/TSE.2004.101
   Roehm T, 2012, PROC INT CONF SOFTW, P255, DOI 10.1109/ICSE.2012.6227188
   Sharif Bonita, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P196, DOI 10.1109/ICPC.2010.41
   Singer Janice., 1997, P 1997 C CTR ADV STU, P209
   SOLOWAY E, 1984, IEEE T SOFTWARE ENG, V10, P595, DOI 10.1109/TSE.1984.5010283
   Sridhara G, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P101, DOI 10.1145/1985793.1985808
   Stefik A, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2534973
   Storey M-A, 2007, 2007 IEEE International Conference on Software Maintenance, P265, DOI 10.1109/ICSM.2007.4362639
   Storey MA, 2006, SOFTWARE QUAL J, V14, P187, DOI 10.1007/s11219-006-9216-4
   Vlasenko J., 2011, P ACM INT C COMP OBJ, P219
   vonMayrhauser A, 1997, J SOFTW MAINT-RES PR, V9, P299, DOI 10.1002/(SICI)1096-908X(199709/10)9:5<299::AID-SMR157>3.0.CO;2-S
   VONMAYRHAUSER A, 1995, COMPUTER, V28, P44, DOI 10.1109/2.402076
   Wiedenbeck S., 1989, Designing and Using Human-Computer Interfaces and Knowledge Based Systems. Proceedings of the Third International Conference on Human Computer Interaction. Vol.II, P82
   Ying ATT, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P460, DOI 10.1145/2635868.2635877
NR 45
TC 2
Z9 2
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 307
EP 340
DI 10.1007/s11219-015-9303-5
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400012
DA 2024-07-18
ER

PT J
AU Ben Ammar, L
   Trabelsi, A
   Mahfoudhi, A
AF Ben Ammar, Lassaad
   Trabelsi, Abdelwaheb
   Mahfoudhi, Adel
TI A model-driven approach for usability engineering of interactive systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Usability evaluation; Model transformation; Parameterized
   transformation; Empirical validation
ID EMPIRICAL VALIDATION; INSPECTION; STATE
AB Usability is considered to be one of the most important quality factors that determine the success/failure in the actual use of an interactive system. This can explain the ever-increasing number of publications addressing the problem of usability evaluation. However, most of these proposals only consider usability evaluations after the application is fully implemented and deployed. Some others are based on reviewing usability principles in intermediate artifacts with regard to their conformance with a set of guidelines. Since the traceability between these artifacts and the final application is not well established, performing usability evaluations by considering these artifacts as input may not ensure the usability of the final application. This problem may be alleviated by using a model-driven engineering (MDE) approach due to its intrinsic traceability mechanisms that are established by the transformation processes. The present paper aims to delineate a method for evaluating usability throughout an MDE development life cycle by considering conceptual models as input. To do this, two main contributions are proposed. The first one, called usability-driven model transformation, aims to ensure that an intermediate artifact with the required level of usability is generated. It controls the model transformation process according to a set of usability attributes. The second contribution, called early usability evaluation, performs the usability evaluation from the conceptual models by defining metrics based on conceptual primitives that constitute the conceptual models. This evaluation would be a significant advantage with regard to saving time and resources. The early usability evaluation is empirically validated by comparing the usability measure obtained by our proposal and the level of usability perceived by the end-users.
C1 [Ben Ammar, Lassaad; Trabelsi, Abdelwaheb; Mahfoudhi, Adel] Univ Sfax, ENIS, CES Lab, Soukra Rd Km 3-5,BP 1173-3000, Sfax, Tunisia.
C3 Universite de Sfax; Ecole Nationale dIngenieurs de Sfax (ENIS)
RP Ben Ammar, L (corresponding author), Univ Sfax, ENIS, CES Lab, Soukra Rd Km 3-5,BP 1173-3000, Sfax, Tunisia.
EM benammar_lassaad@hotmail.com; abdelwaheb.trabelsi@fss.rnu.tn;
   adel.mahfoudhi@ceslab.org
RI Ben Ammar, Lassaad/GQQ-8110-2022; Ammar, Lassaad Ben/T-6760-2017
OI Ammar, Lassaad Ben/0000-0002-4698-3693
CR Abrahao S, 2006, INT CONF QUAL SOFTW, P287
   Abrahao S, 2008, HUM-COMPUT INT-SPRIN, P3, DOI 10.1007/978-1-84628-941-5_1
   Abran A, 2003, SOFTWARE QUAL J, V11, P325, DOI 10.1023/A:1025869312943
   [Anonymous], 2004, Designing the User Interface: Strategies for Eff ective Human-Computer Interaction
   [Anonymous], 2006, IEEE COMPUTER
   [Anonymous], 2001, StandardISO/IEC9126
   Aquino N., 2010, P 2010 ACM IEEE INT, P30
   Basili V.R., 1994, Encyclopedia of Software Engineering, P528532
   Bass L., 2000, CHI 00 HUM FACT COMP, P171
   Bastien J. C., 1993, RT0156 INRIA
   Ben Ammar L, 2013, ICEIS: PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS - VOL 3, P23, DOI 10.5220/0004411200230030
   Ben Ammar L, 2013, C HUM SYST INTERACT, P110, DOI 10.1109/HSI.2013.6577810
   Berti S., 2004, CHI'04 extended abstracts on Human factors in computing systems, P793, DOI DOI 10.1145/985921.985939
   Bouchelligua W, 2010, LECT NOTES BUS INF P, V63, P143
   C Fonseca J.M., 2010, Model-based ui xg final report
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   CAMPBELL DT, 1959, PSYCHOL BULL, V56, P81, DOI 10.1037/h0046016
   Carvajal L, 2013, IEEE T SOFTWARE ENG, V39, P1582, DOI 10.1109/TSE.2013.29
   Fernandez A., 2009, CEUR WORKSHOP P, V490
   Fernandez A, 2013, LECT NOTES COMPUT SC, V8107, P740, DOI 10.1007/978-3-642-41533-3_45
   Fernandez A, 2013, J SYST SOFTWARE, V86, P161, DOI 10.1016/j.jss.2012.07.043
   Fernandez A, 2009, LECT NOTES COMPUT SC, V5802, P497, DOI 10.1007/978-3-642-04409-0_49
   Fleurey F, 2004, SIVOES-MODEVA 2004, PROCEEDINGS, P29, DOI 10.1109/MODEVA.2004.1425846
   Garcia Josefina Guerrero, 2008, International Journal of Web Engineering and Technology, V4, P163, DOI 10.1504/IJWET.2008.018096
   Gonzalez-Huerta J., 2010, P 11 INT C PROD FOC, P28
   Hariri M., 2008, THESIS
   Holzinger A, 2005, COMMUN ACM, V48, P71, DOI 10.1145/1039539.1039541
   Hussmann H., 2011, STUDIES COMPUTATIONA, V340
   Panach JI, 2014, SCI COMPUT PROGRAM, V86, P74, DOI 10.1016/j.scico.2013.06.008
   Panach JI, 2013, COMPUT SCI INF SYST, V10, P999, DOI 10.2298/CSIS120213016P
   Panach JI, 2011, INT J SOFTW ENG KNOW, V21, P339, DOI 10.1142/S0218194011005311
   *ISO IEC, 1998, 9241 ISOIEC
   Ivory MY, 2001, ACM COMPUT SURV, V33, P470, DOI 10.1145/503112.503114
   Kermeta, KERN MET FRAM
   LACOB ME, 2003, READABILITY USABILIT
   LEAVIT M, 2006, RES BASED WEB DESIGN
   Molina F, 2009, ADV ENG SOFTW, V40, P1306, DOI 10.1016/j.advengsoft.2009.01.018
   Moody DL, 2005, DATA KNOWL ENG, V55, P243, DOI 10.1016/j.datak.2004.12.005
   Murata M, 2001, LECT NOTES COMPUT SC, V2004, P43
   Panach Navarrete Jose Ignacio, 2012, Conceptual Modeling. Proceedings 31st International Conference, ER 2012, P525, DOI 10.1007/978-3-642-34002-4_41
   Seffah A, 2004, COMMUN ACM, V47, P71, DOI 10.1145/1035134.1035136
   Seffah A, 2006, SOFTWARE QUAL J, V14, P159, DOI 10.1007/s11219-006-7600-8
   Sottet JS, 2008, LECT NOTES COMPUT SC, V4940, P140
   Vale S., 2008, P 1 INT WORKSH MOD D, V340, P121
   Van Der Straeten R, 2009, LECT NOTES COMPUT SC, V5421, P35, DOI 10.1007/978-3-642-01648-6_4
   VANDERDONCKT JM, 1993, HUMAN FACTORS IN COMPUTING SYSTEMS, P424
   Zhao X., 2007, P MODELS 2007 WORKSH
NR 47
TC 10
Z9 10
U1 0
U2 37
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 301
EP 335
DI 10.1007/s11219-014-9266-y
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100005
DA 2024-07-18
ER

PT J
AU Coutinho, AEVB
   Cartaxo, EG
   Machado, PDD
AF Victor Barbosa Coutinho, Ana Emilia
   Cartaxo, Emanuela Gadelha
   de Lima Machado, Patricia Duarte
TI Analysis of distance functions for similarity-based test suite reduction
   in the context of model-based testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test suite reduction; Model-based testing; Distance functions
ID SELECTION
AB Test suite reduction strategies aim to produce a smaller and representative suite that presents the same coverage as the original one but is more cost-effective. In the model-based testing (MBT) context, reduction is crucial since automatic generation algorithms may blindly produce several similar test cases. In order to define the degree of similarity between test cases, researchers have investigated a number of distance functions. However, there is still little or no knowledge on whether and how they influence on the performance of reduction strategies, particularly when considering MBT practices. This paper investigates the effectiveness of distance functions in the scope of a MBT reduction strategy based on the similarity degree of test cases. We discuss six distance functions and apply them to three empirical studies. The first two studies are controlled experiments focusing on two real-world applications (and real faults) and ten synthetic specifications automatically generated from the configuration of each application (and faults randomly generated). In the third study, we also apply the reduction strategy to two subsequent versions of an industrial application by considering real faults detected. Results show that the choice of a distance function has little influence on the size of the reduced test suite. However, as reduced suites are different depending on the distance function applied, the choice can significantly affect the fault coverage. Moreover, it can also affect the stability of the reduction strategy regarding coverage of different sets of faults on different executions.
C1 [Victor Barbosa Coutinho, Ana Emilia; Cartaxo, Emanuela Gadelha; de Lima Machado, Patricia Duarte] Fed Univ Campina Grande UFCG, Software Practices Lab SPLab, Campina Grande, PB, Brazil.
C3 Universidade Federal de Campina Grande
RP Machado, PDD (corresponding author), Fed Univ Campina Grande UFCG, Software Practices Lab SPLab, Campina Grande, PB, Brazil.
EM ana@copin.ufcg.edu.br; emanuela@copin.ufcg.edu.br;
   patricia@computacao.ufcg.edu.br
RI Machado, Patricia/B-5346-2009
OI Machado, Patricia/0000-0002-0661-0067
FU CNPq [484643/2011-8, 560014/2010-4]; National Institute of Science and
   Technology for Software Engineering; CNPq/Brasil [573964/2008-4]; Center
   of Human and Exact Sciences (State University of Paraiba)
FX This work was supported by CNPq grants (Processes 484643/2011-8 and
   560014/2010-4). Also, this work was partially supported by the National
   Institute of Science and Technology for Software Engineering
   (www.ines.org.br), funded by CNPq/Brasil, Grant 573964/2008-4. This work
   was developed in the context of a cooperation between UFCG and Ingenico
   do Brasil Ltda (Ingenico/UFCG 01/2013) incentivated by the Brazilian
   Informatics Law no. 8.248, 1991. First author is supported by Center of
   Human and Exact Sciences (State University of Paraiba).
CR Akleman E, 1999, SHAPE MODELING INTERNATIONAL '99 - INTERNATIONAL CONFERENCE ON SHAPE MODELING AND APPLICATIONS, PROCEEDINGS, P72, DOI 10.1109/SMA.1999.749326
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], 2000, EXPT SOFTWARE ENG IN
   [Anonymous], 1980, J. Algorithms, DOI [DOI 10.1016/0196-6774(80)90016-4, 10.1016/0196-6774(80)90016-4.1, DOI 10.1016/0196-6774(80)90016-4.1]
   [Anonymous], 7 BRAZ WORKSH SYST A
   [Anonymous], 2007, Software testing and analysis-process, principles and techniques
   [Anonymous], 1991, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling
   Arafeen MJ, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P312, DOI 10.1109/ICST.2013.12
   Araujo J. D. S., 2012, 6 BRAZ WORKSH SYST A
   Bertolino A., 2010, INT C TEST SOFTW SYS, P13
   Cartaxo E. G., 2011, THESIS U FEDERAL CAM
   Cartaxo EG, 2011, SOFTW TEST VERIF REL, V21, P75, DOI 10.1002/stvr.413
   Cartaxo EG, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P1540
   Chen TY, 2010, J SYST SOFTWARE, V83, P60, DOI 10.1016/j.jss.2009.02.022
   Chen TY, 2004, LECT NOTES COMPUT SC, V3321, P320
   Chen TY, 1998, INFORM SOFTWARE TECH, V40, P777, DOI 10.1016/S0950-5849(98)00094-9
   Chen TY, 1998, INFORM SOFTWARE TECH, V40, P347, DOI 10.1016/S0950-5849(98)00050-0
   Chen Yanping., 2007, Fourth international workshop on Software quality assurance: in conjunction with the 6th ESEC/FSE joint meeting, P62, DOI DOI 10.1145/1295074.1295086
   Chvatal V., 1979, Mathematics of Operations Research, V4, P233, DOI 10.1287/moor.4.3.233
   Ciupa I, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P71, DOI 10.1145/1368088.1368099
   Cook T. D., 1979, QUASIEXPERIMENTATION
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Fang CR, 2014, SOFTWARE QUAL J, V22, P335, DOI 10.1007/s11219-013-9224-0
   Felipe J. C., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1398, DOI 10.1145/1141277.1141600
   Felipe JC, 2003, COMP MED SY, P175
   Ferreira F., 2010, CBSOFT 2010 TOOLS SE
   Fraser G, 2007, LECT NOTES COMPUT SC, V4422, P291
   Harrold M. J., 1993, ACM Transactions on Software Engineering and Methodology, V2, P270, DOI 10.1145/152388.152391
   Hemmati Hadi, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P141, DOI 10.1109/ISSRE.2010.9
   Hemmati H, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430536.2430540
   Hess A, 2006, LECT NOTES COMPUT SC, V4011, P19
   Jaccard P., 1901, B SOCIT VAUDOISE SCI, V37, P547, DOI [10.5169/seals-266440, DOI 10.5169/SEALS-266440]
   JARO MA, 1989, J AM STAT ASSOC, V84, P414, DOI 10.2307/2289924
   Jiang B, 2009, IEEE INT CONF AUTOM, P233, DOI 10.1109/ASE.2009.77
   Korel B, 2002, PROC IEEE INT CONF S, P214, DOI 10.1109/ICSM.2002.1167768
   Kovács G, 2009, LECT NOTES COMPUT SC, V5719, P82, DOI 10.1007/978-3-642-04554-7_6
   Ledru Y, 2012, AUTOMAT SOFTW ENG, V19, P65, DOI 10.1007/s10515-011-0093-0
   Ledru Y, 2009, IEEE INT CONF AUTOM, P510, DOI 10.1109/ASE.2009.23
   Leon D, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P442, DOI 10.1109/ISSRE.2003.1251065
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   Nogueira Sidney, 2007, 1 BRAZ WORKSH SYST A
   Oliveira Neto F. G., 2013, P 1 INT WORKSH COMB
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Rogstad E, 2013, INFORM SOFTWARE TECH, V55, P1781, DOI 10.1016/j.infsof.2013.04.004
   Sapna PG, 2009, 2009 1ST INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE, COMMUNICATION SYSTEMS AND NETWORKS(CICSYN 2009), P271, DOI 10.1109/CICSYN.2009.74
   Simao AD, 2006, P INT COMP SOFTW APP, P93
   Thakur A.S., 2013, INT J EMERGING TECHN, V3, P587
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Utting M., 2007, PRACTICAL MODEL BASE
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Vinson A. R., 2007, P 9 ANN ACM INT WORK, P17, DOI [10.1145/1316902.1316906, DOI 10.1145/1316902.1316906]
   Winkler W. E., 1999, Technical report
   Xie XY, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522924
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yoo S, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P201
   Zhi Quan Zhou, 2010, IEEE 34th Annual Computer Software and Applications Conference Workshops (COMPSACW 2010), P208, DOI 10.1109/COMPSACW.2010.43
NR 56
TC 16
Z9 16
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 407
EP 445
DI 10.1007/s11219-014-9265-z
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100008
DA 2024-07-18
ER

PT J
AU Blanchette, JC
AF Blanchette, Jasmin Christian
TI Relational analysis of (co)inductive predicates, (co)algebraic
   datatypes, and (co)recursive functions
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model finding; Higher-order logic; First-order relational logic
ID TERMINATION PROOFS; HOL
AB We present techniques for applying a finite relational model finder to logical specifications that involve high-level definitional principles such as (co)inductive predicates, (co)algebraic datatypes, and (co)recursive functions. In contrast to previous work, which focused on algebraic datatypes and restricted occurrences of unbounded quantifiers in formulas, we can handle arbitrary formulas by means of a three-valued Kleene logic. The techniques form the basis of the counterexample generator Nitpick for Isabelle/HOL. As case studies, we consider formulas about an inductively defined context-free grammar, a functional implementation of AA trees, and a coalgebraic list datatype.
C1 Tech Univ Munich, Inst Informat, Theorem Proving Grp, Munich, Germany.
C3 Technical University of Munich
RP Blanchette, JC (corresponding author), Tech Univ Munich, Inst Informat, Theorem Proving Grp, Munich, Germany.
RI Blanchette, Jasmin/AAN-9622-2021
FU Deutsche Forschungsgemeinschaft [Ni 491/11-1]
FX I want to thank Sascha Bohme, Lukas Bulwahn, Andreas Lochbihler, Tobias
   Nipkow, Mark Summerfield, and the anonymous reviewers for suggesting
   many improvements to this article, and Alexander Krauss for helping to
   structure it. This work is supported by the Deutsche
   Forschungsgemeinschaft grant Ni 491/11-1.
CR Ahrendt W., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P211
   Andersson A., 1993, LNCS, V709, P61
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], ARCH FORMAL PROOFS
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   BALSER M, 2000, LNCS, V1783
   Berghofer S, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P230, DOI 10.1109/SEFM.2004.1347524
   Berghofer S, 1999, LECT NOTES COMPUT SC, V1690, P19
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Blanchette JC, 2010, LECT NOTES ARTIF INT, V6173, P91, DOI 10.1007/978-3-642-14203-1_8
   Blanchette JC, 2010, LECT NOTES COMPUT SC, V6172, P131, DOI 10.1007/978-3-642-14052-5_11
   Bulwahn L, 2007, LECT NOTES COMPUT SC, V4732, P38
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Claessen K, 2009, LECT NOTES ARTIF INT, V5663, P388, DOI 10.1007/978-3-642-02959-2_29
   Claessen Koen, 2003, MODEL
   Dunets A, 2008, LECT NOTES COMPUT SC, V4966, P99
   Giesl J, 2006, LECT NOTES ARTIF INT, V4130, P281
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   GUNTER EL, 1993, IFIP TRANS A, V20, P561
   Harrison J, 1996, LECT NOTES COMPUT SC, V1166, P265, DOI 10.1007/BFb0031814
   Harrison J., 1995, Higher Order Logic Theorem Proving and Its Applications. 8th International Workshop. Proceedings, P200
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jacobs B., 1997, Bulletin of the European Association for Theoretical Computer Science, P222
   Kleene S., 1938, J. Symb. Log., V3, P150, DOI [10.2307/2267778, DOI 10.2307/2267778]
   Kleene S., 1956, AUTOMATA STUDIES, P3
   Kozen DC., 1997, Automata and Computability. Undergraduate Texts in Computer Science
   Krauss A, 2010, J AUTOM REASONING, V44, P303, DOI 10.1007/s10817-009-9157-2
   KUNCAK V, 2005, ESEC FSE 2005
   Lochbihler A., 2009, COMMUNICATION
   McCune William, 1994, TECHNICAL REPORT
   Paulson L. C., 1994, Automated Deduction - CADE-12. 12th International Conference on Automated Deduction. Proceedings, P148
   Ramananandro T, 2008, FORM ASP COMPUT, V20, P21, DOI 10.1007/s00165-007-0058-z
   Schumann Johann M., 2001, Automated theorem proving in software engineering
   Slind K, 2008, LECT NOTES COMPUT SC, V5170, P28, DOI 10.1007/978-3-540-71067-7_6
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   WEBER T, 2008, THESIS TU MUNCHEN
   Wenzel M., 1997, Theorem Proving in Higher Order Logics. 10th International Conference, TPHOLs'97 Proceedings, P307, DOI 10.1007/BFb0028402
NR 37
TC 4
Z9 4
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2013
VL 21
IS 1
BP 101
EP 126
DI 10.1007/s11219-011-9148-5
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074MB
UT WOS:000313815500006
DA 2024-07-18
ER

PT J
AU Tarhan, A
   Demirors, O
AF Tarhan, Ayca
   Demirors, Onur
TI Investigating the effect of variations in the test development process:
   a case from a safety-critical system
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software measurement; Quantitative management; Statistical process
   control; Control chart
ID STATISTICAL PROCESS-CONTROL; SOFTWARE
AB Variation is inherent to a process, and process management demands understanding the nature of variation in quantitative terms, for evaluation and prediction purposes. This understanding requires the identification of process indicators that build the system of variation. To utilize quantitative techniques to understand and improve a software process, more indicators are needed than in a manufacturing process. The need to identify the indicators of a software process and the lack of a generic approach to assess the ability of a software process for quantitative management encouraged us to carry out a sequence of studies that resulted in the development of an Assessment Approach for Quantitative Process Management (A(2)QPM). This paper explains an application of the A(2)QPM to the test development process of an avionics software project and presents the results. The study aimed at understanding the effect of the test design stage and the effect of internal reviews as verification activities in test development, with respect to process productivity and product quality measures. The measurement data collected during the execution of the processes were analyzed by control charts to observe the evidence of process stability. The mean values of measurement data were utilized to make performance comparisons between the various executions of the test development process. The results showed that process productivity was unaffected, but the test procedure quality was positively influenced by the application of test design and internal reviews. The utilization of the A(2)QPM as a guide for the quantitative implementation enabled the systematic evaluation of the test development process and measures prior to analysis. This resulted in the identification of process clusters having stable variation.
C1 [Tarhan, Ayca] Hacettepe Univ, Dept Comp Engn, TR-06532 Ankara, Turkey.
   [Demirors, Onur] Middle E Tech Univ, Inst Informat, TR-06531 Ankara, Turkey.
C3 Hacettepe University; Middle East Technical University
RP Tarhan, A (corresponding author), Hacettepe Univ, Dept Comp Engn, Beytepe Kampusu, TR-06532 Ankara, Turkey.
EM atarhan@cs.hacettepe.edu.tr; demirors@metu.edu.tr
RI Tarhan, Ayca/D-6138-2013; KOLUKISA, AYÇA/HKN-2117-2023
OI Demirors, Onur/0000-0001-6601-3937
CR [Anonymous], 1992, RTCA. DO-178B
   [Anonymous], 1990, 61012 IEEE
   [Anonymous], SOFTW ENG BOD KNOWL
   BALDASSARRE MT, 2007, P 11 INT C EV ASS SO
   Baldassarre T, 2004, LECT NOTES COMPUT SC, V3009, P30
   BARNARD J, 1999, P NAT SEPG C PITTSB
   Burgess S., 1996, ITBG TESTING CAPABIL
   BURNSTEEIN I, 1996, CROSSTALK        AUG, P21
   BURNSTEIN I, 1996, CROSSTALK        SEP, P19
   CARD D, 1994, IEEE SOFTWARE, V11, P95, DOI 10.1109/52.281722
   Card DN, 2008, IEEE SOFTWARE, V25, P37, DOI 10.1109/MS.2008.66
   CARD DN, 1989, J SYST SOFTWARE, V10, P159, DOI 10.1016/0164-1212(89)90029-0
   DEMMY WS, 1989, P AER EL C, V4, P1585
   Do Hyunsook., 2008, Proceedings of the International Symposium on Software Testing and Analysis (ISSTA), P51
   Do Hyunsook., 2006, P ACM SIGSOFT INT S, P141, DOI DOI 10.1145/1181775.1181793
   EBENAU RG, 1994, CROSSTALK, V7
   Ebert C., 2007, Software measurement: establish, extract, evaluate, execute
   Ericson T., 1997, Software Testing, Verification and Reliability, V7, P229, DOI 10.1002/(SICI)1099-1689(199712)7:4<229::AID-STVR149>3.0.CO;2-M
   Farooq A, 2008, INMIC: 2008 INTERNATIONAL MULTITOPIC CONFERENCE, P333, DOI 10.1109/INMIC.2008.4777759
   Florac A.William., 1999, MEASURING SOFTWARE P
   Florac WA, 2000, IEEE SOFTWARE, V17, P97, DOI 10.1109/52.854075
   GELPERIN D, 1996, SOFTWARE TESTABILITY
   Holzmann GJ, 2001, ACM SIGPLAN NOTICES, P80
   *IEEE SOFTW, 2000, PROCESS DIVERSITY, V17
   IEEE Std. 1012, 2004, 1012 IEEE
   ITKONEN J, 2005, P INT C AG, P201
   Jacob AL, 2003, IEEE SOFTWARE, V20, P50, DOI 10.1109/MS.2003.1196321
   Jalote P, 2002, IEEE T SOFTWARE ENG, V28, P1126, DOI 10.1109/TSE.2002.1158286
   JALOTE P, 2000, P 2 WORLD QUAL C SOF
   Karlström D, 2005, SOFTW TEST VERIF REL, V15, P145, DOI 10.1002/stvr.317
   Kasurinen J, 2009, ASIA PAC SOFWR ENG, P309, DOI 10.1109/APSEC.2009.17
   Kettunen V., 2010, P 19 INT S SOFTW TES, P231, DOI [10.1145/1831708.1831737, DOI 10.1145/1831708.1831737]
   KIRBAS S, 2007, P SPICE C SEOUL KOR
   Koomen T., 1999, TEST PROCESS IMPROVE
   KRAUSE ME, 1994, MED DEVICE DIAGNOSTI
   Lantzy M., 1992, P 9 WASH AD S EMP SO, P113
   LEE C, 2009, P 2 INT C INT SCI IN, V403, P1372
   MONTEIRO LFS, 2010, J SOFTWARE MAINTENAN, DOI DOI 10.1002/SPIP.435
   PAULK MC, 1993, CMUSEI93TR024ESCTR93
   Sargut KU, 2006, SOFTWARE QUAL J, V14, P135, DOI 10.1007/s11219-006-7599-x
   Shewhart W.A., 1986, STAT METHOD VIEWPOIN
   SWINKELS R, 2000, COMP TMM OTHER TEST
   Talby D, 2006, IEEE SOFTWARE, V23, P30, DOI 10.1109/MS.2006.93
   TARHAN A, 2006, LNCS, V4257, P87
   Tarhan A, 2008, LECT NOTES COMPUT SC, V4895, P102
   WELLER E, 2000, ASQ SOFTWARE QUALITY, V3
   Weller EF, 2000, IEEE SOFTWARE, V17, P48, DOI 10.1109/52.896249
   Wheeler D.J., 1995, ADV TOPICS STAT PROC
NR 48
TC 5
Z9 5
U1 0
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2011
VL 19
IS 4
SI SI
BP 615
EP 642
DI 10.1007/s11219-011-9129-8
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 814RN
UT WOS:000294474900001
DA 2024-07-18
ER

PT J
AU Giffhorn, D
AF Giffhorn, Dennis
TI Advanced chopping of sequential and concurrent programs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE Chopping; Slicing; Program analysis; Concurrency; Threads
AB A chop for a source statement s and a target statement t reveals the program parts involved in conveying effects from s to t. While precise chopping algorithms for sequential programs are known, no chopping algorithm for concurrent programs has been reported at all. This work introduces six chopping algorithms for concurrent programs, which offer different degrees of precision, ranging from imprecise over context-sensitive to time-sensitive. Our evaluation on concurrent Java programs shows that context-sensitive and time-sensitive chopping reduces chop sizes significantly. We further present an extensive evaluation of chopping algorithms for sequential programs and describe a new, easy-to-implement chopping technique for sequential programs that computes fast and almost context-sensitive chops.
C1 Karlsruhe Inst Technol, Programming Paradigms Grp, Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Giffhorn, D (corresponding author), Karlsruhe Inst Technol, Programming Paradigms Grp, Adenauerring 20A, Karlsruhe, Germany.
EM dennis.giffhorn@kit.edu
CR Anderson P, 2003, IEEE T SOFTWARE ENG, V29, P721, DOI 10.1109/TSE.2003.1223646
   [Anonymous], THESIS U KARLSRUHE
   Barik R, 2006, LECT NOTES COMPUT SC, V4339, P152, DOI 10.1007/978-3-540-69330-7_11
   Binkley D, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290523
   Brumley D, 2006, P IEEE S SECUR PRIV, P2, DOI 10.1109/SP.2006.41
   Chen ZQ, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/375431.375420
   Chen ZQ, 2000, FIRST ASIA-PACIFIC CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P39, DOI 10.1109/APAQ.2000.883776
   Cheng J., 1993, Automated and Algorithmic Debugging. First International Workshop, AADEBUG '93 Proceedings, P223, DOI 10.1007/BFb0019411
   CHENG J, 1997, INT C ADV PAR DISTR, P395
   Giffhorn D, 2009, IEEE INT WORK C SO, P13, DOI 10.1109/SCAM.2009.11
   Giffhorn D, 2009, AUTOMAT SOFTW ENG, V16, P197, DOI 10.1007/s10515-009-0048-x
   Graf J., 2009, IMPROVING EVALUATING
   Hammen C, 2004, PSYCHOLOGICAL TREATMENT OF BIPOLAR DISORDER, P17, DOI 10.1145/996821.996830
   Hammer C, 2009, INT J INF SECUR, V8, P399, DOI 10.1007/s10207-009-0086-1
   Hatcliff J, 1999, LECT NOTES COMPUT SC, V1694, P1
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Jackson D., 1994, SIGSOFT Software Engineering Notes, V19, P2, DOI 10.1145/195274.195281
   Krinke J, 2002, PROC IEEE INT CONF S, P22, DOI 10.1109/ICSM.2002.1167744
   Krinke J., 2003, Software Engineering Notes, V28, P178, DOI 10.1145/949952.940096
   Krinke J, 1998, ACM SIGPLAN NOTICES, V33, P35, DOI 10.1145/277633.277638
   Krinke J., 2003, THESIS U PASSAU
   Krinke J., 2003, IEEE WORKSH SOURC CO
   Liu H, 2008, INFORM SOFTWARE TECH, V50, P449, DOI 10.1016/j.infsof.2007.05.004
   MULLER-OLM M., 2001, P 33 ACM S THEOR COM, P647, DOI DOI 10.1145/380752.380864
   Nanda M. G., 2000, Software Engineering Notes, V25, P180, DOI 10.1145/347636.349121
   Nanda MG, 2006, ACM T PROGR LANG SYS, V28, P1088, DOI 10.1145/1186632.1186636
   Naumovich G, 1999, LECT NOTES COMPUT SC, V1687, P338, DOI 10.1145/318774.319252
   Qi XF, 2006, INT J COMPUT SCI NET, V6, P29
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Reps T., 1995, SIGSOFT SOFTW ENG NO, P41, DOI [10.1145/222124.222138, DOI 10.1145/222124.222138]
   Ruf E, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/358438.349327
   Shacham O, 2007, J PARALLEL DISTR COM, V67, P536, DOI 10.1016/j.jpdc.2007.01.006
   Snelting G, 2006, ACM T SOFTW ENG METH, V15, P410, DOI 10.1145/1178625.1178628
   Zhao JJ, 1999, PROG COMPREHEN, P126, DOI 10.1109/WPC.1999.777751
NR 34
TC 4
Z9 5
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 239
EP 294
DI 10.1007/s11219-010-9114-7
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500002
DA 2024-07-18
ER

PT J
AU Lagerström, R
   Johnson, P
   Ekstedt, M
AF Lagerstroem, Robert
   Johnson, Pontus
   Ekstedt, Mathias
TI Architecture analysis of enterprise systems modifiability: a metamodel
   for software change cost estimation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Enterprise architecture; Software modifiability; Metamodel;
   Probabilistic relational models
AB Enterprise architecture models can be used in order to increase the general understanding of enterprise systems and specifically to perform various kinds of analysis. The present paper proposes a metamodel for enterprise systems modifiability analysis, i.e. assessing the cost of making changes to enterprise-wide systems. The enterprise architecture metamodel is formalized using probabilistic relational models, which enables the combination of regular entity-relationship modeling aspects with means to perform enterprise architecture analysis. The content of the presented metamodel is validated based on survey and workshop data and its estimation capability is tested with data from 21 software change projects. To illustrate the applicability of the metamodel an instantiated architectural model based on a software change project conducted at a large Nordic transportation company is detailed.
C1 [Lagerstroem, Robert; Johnson, Pontus; Ekstedt, Mathias] Royal Inst Technol, S-10044 Stockholm, Sweden.
C3 Royal Institute of Technology
RP Lagerström, R (corresponding author), Royal Inst Technol, Osquldas Vag 12, S-10044 Stockholm, Sweden.
EM robertl@ics.kth.se; pj101@ics.kth.se; mek101@ics.kth.se
RI Johnson, Pontus/G-8951-2011; Ekstedt, Mathias/U-7557-2019; Johnson,
   Pontus/C-5796-2014
OI Lagerstrom, Robert/0000-0003-3089-3885; Johnson,
   Pontus/0000-0002-3293-1681
CR Allen R.J., 1997, A Formal Approach to Software Architecture
   [Anonymous], 2007, Control Objectives for Information and Related technology
   [Anonymous], 2000, ATAM: Method for Architecture Evaluation
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], SOFTWARE ARCHITECTUR
   [Anonymous], P 16 INT JOINT C ART
   [Anonymous], IEEE STAND GLOSS SOF
   [Anonymous], 2005, Secure Systems Development with UML
   April A., 2008, SOFTWARE MAINTENANCE
   Bengtsson P, 2002, THESIS BLEKINGE I TE
   Boehm B, 2000, ANN SOFTW ENG, V10, P177, DOI 10.1023/A:1018991717352
   Boehm BW., 1981, Software Engineering Economics
   Brinkkemper S, 1996, INFORM SOFTWARE TECH, V38, P275, DOI 10.1016/0950-5849(95)01059-9
   Brinkkemper S, 2000, INFORMATION SYSTEMS ENGINEERING, P123
   CHAN T, 1996, IEEE T SOFTWARE ENG, V22
   Chulani S, 1999, IEEE T SOFTWARE ENG, V25, P573, DOI 10.1109/32.799958
   Department of Defense Architecture Framework Working Group, 2007, DOD ARCH FRAM VERS 1
   Franke U., 2009, PROC 42 ANN SIMULATI, P209
   GranjaAlvarez JC, 1997, J SOFTW MAINT-RES PR, V9, P161, DOI 10.1002/(SICI)1096-908X(199705)9:3<161::AID-SMR148>3.0.CO;2-8
   Grubb P., 2003, Software Maintenance: Concepts and Practice, V2.
   Jarzabek S, 2007, Effective software maintenance and evolution: A reuse-based approach
   Jensen F. V., 2007, Bayesian networks and decision graphs
   JOHNSON P, 2007, INFORM SYSTEMS FRONT, V9
   Johnson P., 2007, Enterprise Architecture: Models and Analyses for Information Systems Decision Making
   Kan S. H., 2003, METRICS MODELS SOFTW
   Kazman R, 2001, PROC INT CONF SOFTW, P297, DOI 10.1109/ICSE.2001.919103
   Lagerstrom R., 2009, International Journal of Computer Science and Applications, V6, P89, DOI DOI 10.1007/S11219-010-9100-0
   Lagerstrom R., 2008, P 20 INT C ADV INF S, V344, P25
   Lagerström R, 2009, LECT NOTES BUS INF P, V29, P381
   Laird L., 2006, Software Measurement and Estimation: A Practical Approach
   Lankhorst M., 2005, ENTERPRISE ARCHITECT
   MATSON JE, 1994, IEEE T SOFTWARE ENG, V20, P275, DOI 10.1109/32.277575
   Molokken-Ostvold K, 2008, J SYST SOFTWARE, V81, P2106, DOI 10.1016/j.jss.2008.03.058
   Neapolitan R., 2003, Learning Bayesian networks, P543
   Pigoski ThomasM., 1997, PRACTICAL SOFTWARE M
   PUTNAM LH, 2003, 5 CORE METRICS
   Ross J.W., 2006, Enterprise architecture as strategy: Creating a foundation for business execution
   Smith D., 1999, DESIGNING MAINTAINAB
   Tekinerdogan B, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P5, DOI 10.1109/WICSA.2004.1310685
   The-Open-Group, 2009, OP GROUP ARCH FRAM T
   Warner R., 2013, Applied Statistics: From Bivariate through Multivariate Techniques, V2nd
   Winter R., 2006, P IEEE INT ENTERPRIS, DOI [DOI 10.1109/EDOCW.2006.33, 10.1109/EDOCW.2006.33]
   ZACHMAN JA, 1987, IBM SYST J, V26, P276, DOI 10.1147/sj.263.0276
   Zuse Horst., 1997, A Framework of Software Measurement
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 73
TC 17
Z9 17
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2010
VL 18
IS 4
BP 437
EP 468
DI 10.1007/s11219-010-9100-0
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 642XH
UT WOS:000281254700002
DA 2024-07-18
ER

PT J
AU Evans, WS
   Fraser, CW
   Ma, F
AF Evans, William S.
   Fraser, Christopher W.
   Ma, Fei
TI Clone detection via structural abstraction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 14th Working Conference on Reverse Engineering
CY OCT 28-31, 2007
CL Vancouver, CANADA
SP Reengn Forum, IEEE Comp Soc, Techn Council Ctr Software, Res Ctr Software Technol, German Soc Comp Sci, Software Reengn Interest Grp, Modelsoft Corp Inc, Kent State Univ
DE Clone detection; Procedural abstraction; Refactoring
ID CODE
AB This paper describes the design, implementation, and application of a new algorithm to detect cloned code. It operates on the abstract syntax trees formed by many compilers as an intermediate representation. It extends prior work by identifying clones even when arbitrary subtrees have been changed. These subtrees may represent structural rather than simply lexical code differences. In several hundred thousand lines of Java and C# code, 20-50% of the clones that we find involve these structural changes, which are not accounted for by previous methods. Our method also identifies cloning in declarations, so it is somewhat more general than conventional procedural abstraction.
C1 [Evans, William S.] Univ British Columbia, Dept Comp Sci, Vancouver, BC V6T 1Z4, Canada.
   [Ma, Fei] Microsoft Corp, Redmond, WA 98052 USA.
C3 University of British Columbia; Microsoft
RP Evans, WS (corresponding author), Univ British Columbia, Dept Comp Sci, Vancouver, BC V6T 1Z4, Canada.
EM will@cs.ubc.ca; cwfraser@gmail.com; Fei.Ma@microsoft.com
CR [Anonymous], 1991, SOFTWARE-PRACTICE AND EXPERIENCE, DOI DOI 10.1002/SPE.4380210706
   Badros GJ, 2000, COMPUT NETW, V33, P159, DOI 10.1016/S1389-1286(00)00037-2
   Baker BS, 2007, IEEE T SOFTWARE ENG, V33, P608, DOI 10.1109/TSE.2007.70720
   Baker BS, 1998, PROCEEDINGS OF THE USENIX 1998 ANNUAL TECHNICAL CONFERENCE, P179
   Baker BS, 1997, SIAM J COMPUT, V26, P1343, DOI 10.1137/S0097539793246707
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bellon S., 2002, THESIS U STUTTGART
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   CHEUNG W, 2003, P 7 INT WORKSH SOFTW, P17
   Chi Y, 2005, FUND INFORM, V66, P161
   Church K., 1993, J AM STAT ASSOC, V2, P153, DOI [DOI 10.1080/10618600.1993, 10.2307/1390697, DOI 10.2307/1390697]
   COOPER KD, 1999, ACM C PROGR LANG DES, P139
   De Sutter B, 2002, ACM SIGPLAN NOTICES, V37, P275, DOI 10.1145/583854.582445
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   Ducasse S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P109, DOI 10.1109/ICSM.1999.792593
   Evans WS, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P150, DOI 10.1109/WCRE.2007.15
   FRASER C, 1984, P ACM SIGPLAN S COMP, V19, P117
   GRISWOLD RE, 1996, COMMUNICATIONS
   Griswold W. G., 1993, ACM Transactions on Software Engineering and Methodology, V2, P228, DOI 10.1145/152388.152389
   Hanson DR, 2004, SOFTWARE PRACT EXPER, V34, P1211, DOI 10.1002/spe.610
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Komondoor R, 2001, LECT NOTES COMPUT SC, V2126, P40
   Kontogiannis K. A., 1996, Automated Software Engineering, V3, P77, DOI 10.1007/BF00126960
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   MA F, 2006, THESIS U BRIT COLUMB
   Mayrand J, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P244, DOI 10.1109/ICSM.1996.565012
   Seal D., 2001, ARM ARCHITECTURE REF
   ZAKI MJ, 2002, P 8 ACM SIGKDD INT C, P71, DOI DOI 10.1145/775047.775058
   [No title captured]
NR 31
TC 32
Z9 42
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2009
VL 17
IS 4
SI SI
BP 309
EP 330
DI 10.1007/s11219-009-9074-y
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 490VR
UT WOS:000269536600002
DA 2024-07-18
ER

PT J
AU Allen, EB
   Gottipati, S
   Govindarajan, R
AF Allen, Edward B.
   Gottipati, Sampath
   Govindarajan, Rajiv
TI Measuring size, complexity, and coupling of hypergraph abstractions of
   software: An information-theory approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software metrics; size; complexity; coupling; properties of metrics;
   measurement theory; information theory; entropy; excess entropy; C plus
   plus case studies
ID ENGINEERING MEASUREMENT; MEASUREMENT VALIDATION; ADDITIVITY PROPERTIES;
   FORMAL THEORY; FRAMEWORK; METRICS
AB Software development is fundamentally based on cognitive processes. Our motivating hypothesis is that amounts of various kinds of information in software artifacts may have useful statistical relationships with software-engineering attributes. This paper proposes measures of size, complexity and coupling in terms of the amount of information, building on formal definitions of these software-metric families proposed by Briand, Morasca, and Basili.
   Ordinary graphs represent relationships between pairs of nodes. We extend prior work with ordinary graphs to hypergraphs representing relationships among sets of nodes. Some software engineering abstractions, such as set-use relations for public variables, are better represented as hypergraphs than ordinary (binary) graphs.
   Traditional software metrics are based on counting. In contrast, we adopt information theory as the basis for measurement, because the design decisions embodied by software are information. This paper proposes software metrics of size, complexity, and coupling based on information in the pattern of incident hyperedges. For comparison, we also define corresponding counting-based metrics.
   Three exploratory case studies illustrate some of the distinctive features of the proposed metrics. The case studies found that information theory-based software metrics make distinctions that counting metrics do not, which may be relevant to software engineering quality and process. We also identify situations when information theory-based metrics are simply proportional to corresponding counting metrics.
C1 Mississippi State Univ, Dept Comp Sci & Engn, Mississippi State, MS 39762 USA.
   TEchnat Software Consulting Inc, Sioux Falls, SD 57104 USA.
   Peri Software, Warrenville, NJ USA.
C3 Mississippi State University
RP Allen, EB (corresponding author), Mississippi State Univ, Dept Comp Sci & Engn, Box 9637, Mississippi State, MS 39762 USA.
EM edward.allen@computer.org; sampath@tnscinc.com;
   rajiv.govindarajan@citigroup.com
CR Abd-El-Hafiz SK, 2001, PROC IEEE INT CONF S, P110, DOI 10.1109/ICSM.2001.972721
   Allen E.B., 2001, PROC 7 INT SOFTWARE, P124
   Allen E. B., 1995, THESIS FLORIDA ATLAN
   Allen EB, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P182, DOI 10.1109/METRIC.2002.1011337
   Allen EG, 1999, PARIS REV, P119, DOI 10.1109/METRIC.1999.809733
   Andersson C, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P174, DOI 10.1109/ISESE.2003.1237976
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1949, MATH MODEL COMMUNICA
   [Anonymous], P ASIA PACIFIC SOFTW
   Bansiya J, 1999, THEOR PRACT OBJ SYST, V5, P111, DOI 10.1002/(SICI)1096-9942(1999)5:2<111::AID-TAPO4>3.0.CO;2-0
   *BELL CAN, 2000, DATR METR REF MAN
   *BELL CAN, 2000, DATR ABSTR SEM GRAPH
   BIROV L, 1999, P 5 INT C PAR COMP T
   BRIAND L, 1996, EMPIR SOFTW ENG, V1, P1
   Briand LC, 1997, IEEE T SOFTWARE ENG, V23, P196, DOI 10.1109/TSE.1997.585509
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Briand LC, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P43, DOI 10.1109/METRIC.1997.637164
   BRIAND LC, 1997, EMPIR SOFTW ENG, V2, P317
   CHAITIN GJ, 1975, J ACM, V22, P329, DOI 10.1145/321892.321894
   CHAITIN GJ, 1966, J ACM, V13, P547, DOI 10.1145/321356.321363
   Chapin N, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P173, DOI 10.1109/METRIC.2002.1011336
   CHEN Y, 2000, THESIS FLORIDA ATLAN
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cover Thomas A., 1991, ELEM INF THEORY, DOI 10.1002/047174882X
   DAVIS JS, 1988, IEEE T SOFTWARE ENG, V14, P1366, DOI 10.1109/32.6179
   DEAN T, 2001, P WORK C REV ENG STU
   Emam KE, 2001, IEEE T SOFTWARE ENG, V27, P630, DOI 10.1109/32.935855
   Evanco WM, 2003, IEEE T SOFTWARE ENG, V29, P670, DOI 10.1109/TSE.2003.1214331
   GOTTIPATI S, 2003, THESIS MISSISSIPPI S
   GOVINDARAJAN R, 2004, THESIS MISSISSIPPI S
   Hatton L, 1997, IEEE SOFTWARE, V14, P89, DOI 10.1109/52.582978
   Hilgard E., 1971, INTRO PSYCHOL, V5th
   KHOSHGOFTAAR TM, 1994, SOFTWARE QUAL J, V3, P79, DOI 10.1007/BF00213632
   Kitchenham B, 1997, IEEE T SOFTWARE ENG, V23, P189, DOI 10.1109/TSE.1997.585507
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   Kolmogorov A. N., 1968, International Journal of Computer Mathematics, V2, P157, DOI 10.1080/00207166808803030
   KOLMOGOROV AN, 1968, IEEE T INFORM THEORY, V14, P662, DOI 10.1109/TIT.1968.1054210
   Kunert A., 2008, ACM SIGSOFT SOFTWARE, V211, P111
   LEW KS, 1988, IEEE T SOFTWARE ENG, V14, P1645, DOI 10.1109/32.9052
   Li M., 1988, Proceedings: Structure in Complexity Theory Third Annual Conference (Cat. No.88CH2542-9), P80, DOI 10.1109/SCT.1988.5265
   Mayrand J, 1996, PROC INT CONF SOFTW, P210, DOI 10.1109/ICSE.1996.493417
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MILLER GA, 1956, PSYCHOL REV, V63, P81, DOI 10.1037/h0043158
   MOHANTY SN, 1979, COMPUT SURV, V11, P251, DOI 10.1145/356778.356783
   MOHANTY SN, 1981, J SYST SOFTWARE, V2, P39, DOI 10.1016/0164-1212(81)90045-5
   Morasca S, 1997, IEEE T SOFTWARE ENG, V23, P187, DOI 10.1109/32.585506
   Morasca S, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P119, DOI 10.1109/METRIC.1997.637172
   Munson J. C., 1989, Proceedings. 11th International Conference on Software Engineering (Cat. No.89CH2718-5), P245, DOI 10.1145/74587.74620
   Oviedo E.I., 1980, Proc. IEEE COMPSAC, Chicago, P146
   Poels G, 1997, IEEE T SOFTWARE ENG, V23, P190, DOI 10.1109/32.585508
   Runeson P, 2006, IEEE SOFTWARE, V23, P82, DOI 10.1109/MS.2006.89
   SCHUTT D, 1977, COMPCON 77 FALL WASH, P295
   Shereshevsky M, 2001, P INT COMP SOFTW APP, P151, DOI 10.1109/CMPSAC.2001.960611
   SOLOMONOFF RJ, 1964, INFORM CONTROL, V7, P224, DOI 10.1016/S0019-9958(64)90131-7
   SOLOMONOFF RJ, 1964, INFORM CONTROL, V7, P1, DOI 10.1016/S0019-9958(64)90223-2
   *U WAT, 2004, CPPX OP SOURC CPLUSP
   van Emden M. H., 1970, MACH INTELL, V5, P361
   van Emden M.H., 1971, Mathematical Centre Tracts, V35
   Visaggio G, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P92, DOI 10.1109/ICSM.1997.624235
   WATANABE S, 1960, IBM J RES DEV, V4, P66, DOI 10.1147/rd.41.0066
   WEYUKER EJ, 1988, IEEE T SOFTWARE ENG, V14, P1357, DOI 10.1109/32.6178
   Zuse H., 1997, Empirical Software Engineering, V2, P313, DOI 10.1023/A:1009772101672
   Zuse H, 1997, IEEE T SOFTWARE ENG, V23, P533, DOI 10.1109/32.624309
   Zuse Horst., 1997, A Framework of Software Measurement
NR 65
TC 17
Z9 19
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2007
VL 15
IS 2
BP 179
EP 212
DI 10.1007/s11219-006-9010-3
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 149CA
UT WOS:000245123000005
DA 2024-07-18
ER

PT J
AU van Dinter, R
   Catal, C
   Giray, G
   Tekinerdogan, B
AF van Dinter, Raymon
   Catal, Cagatay
   Giray, Goerkem
   Tekinerdogan, Bedir
TI Just-in-time defect prediction for mobile applications: using shallow or
   deep learning?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Just-in-time defect prediction; Shallow learning; XGBoost; Deep
   learning; Imbalanced learning
ID SOFTWARE; FRAMEWORK; MODELS
AB Just-in-time defect prediction (JITDP) research is increasingly focused on program changes instead of complete program modules within the context of continuous integration and continuous testing paradigm. Traditional machine learning-based defect prediction models have been built since the early 2000s, and recently, deep learning-based models have been designed and implemented. While deep learning (DL) algorithms can provide state-of-the-art performance in many application domains, they should be carefully selected and designed for a software engineering problem. In this research, we evaluate the performance of traditional machine learning algorithms and data sampling techniques for JITDP problems and compare the model performance with the performance of a DL-based prediction model. Experimental results demonstrated that DL algorithms leveraging sampling methods perform significantly worse than the decision tree-based ensemble method. The XGBoost-based model appears to be 116 times faster than the multilayer perceptron-based (MLP) prediction model. This study indicates that DL-based models are not always the optimal solution for software defect prediction, and thus, shallow, traditional machine learning can be preferred because of better performance in terms of accuracy and time parameters.
C1 [van Dinter, Raymon; Tekinerdogan, Bedir] Wageningen Univ & Res, Informat Technol Grp, Wageningen, Netherlands.
   [van Dinter, Raymon] Sioux Technol, Apeldoorn, Netherlands.
   [Catal, Cagatay] Qatar Univ, Dept Comp Sci & Engn, Doha, Qatar.
C3 Wageningen University & Research; Qatar University
RP Catal, C (corresponding author), Qatar Univ, Dept Comp Sci & Engn, Doha, Qatar.
EM raymon.vandinter@wur.nl; ccatal@qu.edu.qa; gorkemgiray@gmail.com;
   bedir.tekinerdogan@wur.nl
RI Tekinerdogan, Bedir/K-3639-2019; Catal, Cagatay/AAF-3929-2019; Giray,
   Gorkem/AAW-9845-2021
OI Tekinerdogan, Bedir/0000-0002-8538-7261; Catal,
   Cagatay/0000-0003-0959-2930; Giray, Gorkem/0000-0002-7023-9469
FU Qatar National Library
FX Open Access funding provided by the Qatar National Library.
CR Alan O, 2011, EXPERT SYST APPL, V38, P3440, DOI 10.1016/j.eswa.2010.08.130
   [Anonymous], 2017, Machine Learning Yearning
   Arik S. O., 2020, TABNET AI PLATFORM H
   Arik SO, 2021, AAAI CONF ARTIF INTE, V35, P6679
   Benni KE, 2018, IEEE T SOFTWARE ENG, V44, P534, DOI 10.1109/TSE.2017.2731766
   Bennin KE, 2019, EMPIR SOFTW ENG, V24, P602, DOI 10.1007/s10664-018-9633-6
   Brownlee J., 2019, Machine Learning Mastery
   Catal C, 2008, LECT NOTES COMPUT SC, V5089, P244, DOI 10.1007/978-3-540-69566-0_21
   Catal C, 2014, J INTELL SYST, V23, P75, DOI 10.1515/jisys-2013-0030
   Catal C, 2009, EXPERT SYST, V26, P458, DOI 10.1111/j.1468-0394.2009.00509.x
   Catal Cagatay., 2010, Electronic Engineering and Computing Technology, volume 60 of Lecture Notes in Electrical Engineering, V60, P189, DOI DOI 10.1007/978-90-481-8776-8_17
   Catolino G, 2019, 2019 IEEE/ACM 6TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2019), P99, DOI 10.1109/MOBILESoft.2019.00023
   Catolino G, 2018, J SYST SOFTWARE, V143, P14, DOI 10.1016/j.jss.2018.05.003
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chen Tianqi, 2015, R package version 0.4-2 1.4, V1, P1
   Cheng T, 2022, FRONT COMPUT SCI-CHI, V16, DOI 10.1007/s11704-021-1013-5
   Giray G, 2023, J SYST SOFTWARE, V195, DOI 10.1016/j.jss.2022.111537
   Giray G, 2021, J SYST SOFTWARE, V180, DOI 10.1016/j.jss.2021.111031
   He H, 2013, IMBALANCED LEARNING: FOUNDATIONS, ALGORITHMS, AND APPLICATIONS, P1, DOI 10.1002/9781118646106
   Huang QG, 2024, CONCURR COMP-PRACT E, V36, DOI 10.1002/cpe.7664
   Jin C, 2021, EXPERT SYST APPL, V171, DOI 10.1016/j.eswa.2021.114637
   Jingxiu Yao, 2020, EASE2020. Proceedings of the Evaluation and Assessment in Software Engineering, P120, DOI 10.1145/3383219.3383232
   Jorayeva M, 2022, SENSORS-BASEL, V22, DOI 10.3390/s22134734
   Jorayeva M, 2022, SENSORS-BASEL, V22, DOI 10.3390/s22072551
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Kaur Arvinder, 2015, 2015 4th International Conference on Reliability, Infocom Technologies and Optimization (ICRITO) (Trends and Future Directions), P1, DOI 10.1109/ICRITO.2015.7359220
   Kaur A, 2016, ADV INTELL SYST, V433, P81, DOI 10.1007/978-81-322-2755-7_10
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li WW, 2020, INFORM SOFTWARE TECH, V126, DOI 10.1016/j.infsof.2020.106364
   Mahmoodzadeh Zahra, 2015, 2015 IEEE Power & Energy Society General Meeting, P1, DOI 10.1109/PESGM.2015.7286219
   Malhotra R, 2016, APPL SOFT COMPUT, V49, P1034, DOI 10.1016/j.asoc.2016.04.032
   Mockus A, 2000, BELL LABS TECH J, V5, P169, DOI 10.1002/bltj.2229
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Ricky MY, 2016, PROCEEDINGS 2016 IEEE SYMPOSIUM ON SERVICE-ORIENTED SYSTEM ENGINEERING SOSE 2016, P307, DOI 10.1109/SOSE.2016.25
   Scandariato R., 2012, Proceedings of the 4th international workshop on Security measurements and metrics, P11
   Song QB, 2019, IEEE T SOFTWARE ENG, V45, P1253, DOI 10.1109/TSE.2018.2836442
   Statista Research Department, 2021, Average Number of New Android App Releases via Google Play per Month from March 2019 to November 2021
   Statistica, 2020, NUMB APPS AV LEAD AP
   Sun Y, 2021, INT J SOFTW ENG KNOW, V31, P889, DOI 10.1142/S0218194021500273
   Tantithamthavorn C, 2020, IEEE T SOFTWARE ENG, V46, P1200, DOI 10.1109/TSE.2018.2876537
   Wang KC, 2021, NEURAL COMPUT APPL, V33, P8249, DOI 10.1007/s00521-020-04960-1
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   Wu F, 2017, PROC IEEE ACM INT C, P195, DOI 10.1109/ICSE-C.2017.72
   Xu Z, 2022, IEEE T RELIAB, V71, P204, DOI 10.1109/TR.2021.3066170
   Xu Z, 2019, J SYST SOFTWARE, V158, DOI 10.1016/j.jss.2019.110402
   Yang XL, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P17, DOI 10.1109/QRS.2015.14
   Zeng ZR, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P427, DOI 10.1145/3460319.3464819
   Zhang ZW, 2017, AUTOMAT SOFTW ENG, V24, P47, DOI 10.1007/s10515-016-0194-x
   Zhao K., 2021, ARXIV
   Zhao KS, 2021, 36TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, SAC 2021, P1447, DOI 10.1145/3412841.3442019
   Zhao YH, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3567550
NR 52
TC 2
Z9 2
U1 3
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1281
EP 1302
DI 10.1007/s11219-023-09629-1
EA JUN 2023
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY4P9
UT WOS:001003925400001
OA hybrid
DA 2024-07-18
ER

PT J
AU Soto-Sánchez, O
   Maes-Bermejo, M
   Gallego, M
   Gortázar, F
AF Soto-Sanchez, Oscar
   Maes-Bermejo, Michel
   Gallego, Micael
   Gortazar, Francisco
TI A dataset of regressions in web applications detected by end-to-end
   tests
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Dataset; Testing; End-to-end tests
ID TEST-CASE PRIORITIZATION
AB End-to-end tests present many challenges in the industry. The long-running times of these tests make it unsuitable to apply research work on test case prioritization or test case selection, for instance, on them, as most works on these two problems are based on datasets of unit tests. These ones are fast to run, and time is not usually a considered criterion. This is because there is no dataset of end-to-end tests, due to the infrastructure needs for running this kind of tests, the complexity of the setup and the lack of proper characterization of the faults and their fixes. Therefore, running end-to-end tests for any research work is hard and time-consuming, and the availability of a dataset containing regression bugs, documentation and logs for these tests might foster the usage of end-to-end tests in research works. This paper presents a) a dataset for this kind of tests, including six well-documented manually injected regression bugs and their corresponding fixes in three web applications built using Java and the Spring framework; b) tools for easing the execution of these tests no matter the infrastructure; and c) a comparative study with two well-known datasets of unit tests. The comparative study shows that there are important differences between end-to-end and unit tests, such as their execution time and the amount of resources they consume, which are much higher in the end-to-end tests. End-to-end testing deserves some attention from researchers. Our dataset is a first effort toward easing the usage of end-to-end tests in research works.
C1 [Soto-Sanchez, Oscar; Maes-Bermejo, Michel; Gallego, Micael; Gortazar, Francisco] Univ Rey Juan Carlos, Mostoles 28933, Spain.
C3 Universidad Rey Juan Carlos
RP Maes-Bermejo, M (corresponding author), Univ Rey Juan Carlos, Mostoles 28933, Spain.
EM oscar.soto@urjc.es; michel.maes@urjc.es; micael.gallego@urjc.es;
   francisco.gortazar@urjc.es
RI Soto-Sánchez, Óscar/AEL-0690-2022; Bermejo, Michel Maes/AEO-7928-2022;
   Gallego, Micael/I-1390-2015; Gortázar, Francisco/H-8219-2015
OI Soto-Sánchez, Óscar/0000-0002-6318-2134; Bermejo, Michel
   Maes/0000-0002-8138-9702; Gortázar, Francisco/0000-0002-2183-0869
FU Government of Spain through project "BugBirth" [RTI2018-101963-B-100];
   Regional Government of Madrid (CM) through project Cloud4BigData - FSE
   [S2013/ICE-2894]; Regional Government of Madrid (CM) through project
   Cloud4BigData - FEDER [S2013/ICE-2894]; European Commission through
   European Project H2020 [822717: MICADO]
FX This work has been supported by the Government of Spain through project
   "BugBirth" (RTI2018-101963-B-100), the Regional Government of Madrid
   (CM) through project Cloud4BigData (S2013/ICE-2894) cofunded by FSE &
   FEDER and the European Commission through European Project H2020 822717:
   MICADO.
CR Bertolino A, 2018, PROC IEEE ACM INT C, P17, DOI 10.1145/3183440.3183497
   Biswas Sumon, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P577, DOI 10.1109/MSR.2019.00086
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   Dallmeier V., 2007, P 22 IEEE ACM INT C, P433
   Dao T, 2017, INT C PROGRAM COMPRE, P241, DOI 10.1109/ICPC.2017.29
   DeMarco F, 2014, P 6 INT WORKSHOP CON, P30, DOI 10.1145/2593735.2593740
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Durieux T, 2015, Automatic repair of real bugs: An experience report on the defects4j dataset
   Gortazar F., 2020, QUALITY INFORM COMMU, P1266
   Gortazar F., 2018, ELASTEST PLATFORM SU
   Gortázar F, 2017, 2017 IEEE CONFERENCE ON NETWORK FUNCTION VIRTUALIZATION AND SOFTWARE DEFINED NETWORKS (NFV-SDN), P202
   Gyimesi P, 2019, IEEE INT CONF SOFTW, P90, DOI 10.1109/ICST.2019.00019
   Hao D, 2016, FRONT COMPUT SCI-CHI, V10, P769, DOI 10.1007/s11704-016-6112-3
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Just R, 2014, P 2014 INT S SOFTW T, P437, DOI DOI 10.1145/2610384.2628055
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Liang JJ, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P688, DOI 10.1145/3180155.3180213
   Memon A, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P233, DOI 10.1109/ICSE-SEIP.2017.16
   Miranda B, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P222, DOI 10.1145/3180155.3180210
   Monperrus J, 2015, IEEE T SOFTWARE ENG
   Myers EW, 1986, ALGORITHMICA, V1, P251, DOI 10.1007/BF01840446
   Neelofar, 2012, 2012 Sixth International Conference on Complex, Intelligent, and Software Intensive Systems (CISIS), P414, DOI 10.1109/CISIS.2012.132
   Nir D., 2007, PROC 3 INT HAIFA 146, P218
   Pingclasai N, 2013, ASIA PAC SOFWR ENG, P13, DOI 10.1109/APSEC.2013.105
   Qi Zichao, 2015, P 2015 INT S SOFTW T, P24, DOI DOI 10.1145/2771783.2771791
   Saha RK, 2018, IEEE WORK CONF MIN S, P10, DOI 10.1145/3196398.3196473
   Sarro F, 2018, PROCEEDINGS 2018 IEEE/ACM 11TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST), P1, DOI 10.1145/3194718.3194730
   Spacco J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083149
   Sun XL, 2020, COMPANION OF THE 2020 IEEE 20TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY, AND SECURITY (QRS-C 2020), P65, DOI 10.1109/QRS-C51114.2020.00022
   Widyasari R, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1556, DOI 10.1145/3368089.3417943
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Zhou J, 2012, PROC INT CONF SOFTW, P14, DOI 10.1109/ICSE.2012.6227210
NR 32
TC 1
Z9 1
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 425
EP 454
DI 10.1007/s11219-021-09566-x
EA OCT 2021
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000712790900004
OA hybrid
DA 2024-07-18
ER

PT J
AU Bozic, J
AF Bozic, Josip
TI Ontology-based metamorphic testing for chatbots
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Ontologies; Metamorphic testing; Functional testing; Chatbots
AB Modern-day demands for services often require an availability on a 24/7 basis as well as online accessibility around the globe. For this sake, personalized virtual assistants, called chatbots, are implemented. Such systems offer services, goods or information in natural language. These natural language processing (NLP) programs respond to the user in real time and offer an intuitive and simple interface to interact with. Advantages like these make them increasingly popular. Therefore, ensuring correct functionality of chatbots is of increasing importance. However, since different implementations and user behaviour result in unpredictable results, the chatbot's input and output data are difficult to predict and classify as well. Under such circumstances, test cases can be inferred from the domain of possible inputs of a system under test (SUT). Ontologies are concepts used in AI to provide formal representations of knowledge for a specific domain. Such ontological models contain structured information that is used for test generation. On the other hand, testing of chatbots represents a challenge because of the absence of a test oracle. In this paper, both challenges are addressed by conceptualizing ontologies for input generation and output processing in form of a metamorphic testing approach. In this scenario, both concepts are applied for automated testing of chatbots. The approach is demonstrated on a real system from the tourism domain, thereby discussing the obtained results.
C1 [Bozic, Josip] Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
C3 Graz University of Technology
RP Bozic, J (corresponding author), Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
EM jbozic@ist.tugraz.at
OI Bozic, Josip/0000-0001-6086-8846
FU Graz University of Technology
FX Open Access funding provided by Graz University of Technology
CR [Anonymous], 1950, MIND, DOI 10.1093/mind/LIX.236.433
   [Anonymous], 1987, Logical Foundations of Artificial Intelligence
   [Anonymous], SYNTHESIS LECT HUMAN
   BATEMAN J.A., 1990, A General Organization of Knowledge for Natural Language Processing : the Penman Upper Model
   Boalim T., 2019, REV ELETRONICA INICI, V17
   Bots Chatter, AAAI 94, V1, P16
   Bozic J, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST), P37, DOI 10.1109/AITest.2019.00-10
   Chen T.Y., 1998, Metamorphic testing: a new approach for generating next test cases
   Chen TY, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3143561
   Chen TY, 2016, COMPUTER, V49, P48, DOI 10.1109/MC.2016.176
   dos Santos, 2017, P 16 BRAZ S HUM FACT
   Folstad A., 2017, interactions, V24, P38, DOI [DOI 10.1145/3085558, 10.1145/3085558]
   Folstad A, 2017, P 4 INT C INT SCI IN
   Gruber T.R., 1992, TECHNICAL REPORT KSL
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Grudin J, 2019, CHI 2019: PROCEEDINGS OF THE 2019 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3290605.3300439
   Guarino N, 2005, APPL ONTOL, V1, P1
   GuEmez-Purez, 1999, ONTOLOGICAL ENG STAT, V2
   GUICHARD J, 2019, ASSESSING ROBUSTNESS, P55
   Issa, 2011, P 4 INT S INN INF CO
   Jung H, 2020, J INTELL INF SYST, V55, P501, DOI 10.1007/s10844-019-00589-2
   Lara, 2020, P 13 INT C QUAL INF
   Lenat D., 1985, AI Magazine, V6
   Ma PC, 2020, PROCEEDINGS OF THE TWENTY-NINTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P458
   Moltmann F., 2017, The Oxford encyclopedia of linguistics
   Musen Mark A, 2015, AI Matters, V1, P4
   Nagel D, 2013, P 14 EUR WORKSH NAT
   Nirenburg, 1990, CMUCMT90121
   Noy N., 2001, ONTOLOGY DEV
   Pereira, 2016, COMPUTER LANGUAGES S, V45
   Pesu D, 2018, 2018 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON METAMORPHIC TESTING (MET 2018), P38, DOI 10.1145/3193977.3193980
   Pontelli, 2019, P INT S PARCT ASP DE
   Riss Ruth Hagengruber Uwe, 2014, PHILOS COMPUTING INF
   Ruane E, 2018, COMPANION OF THE 23RD INTERNATIONAL CONFERENCE ON INTELLIGENT USER INTERFACES (IUI'18), DOI 10.1145/3180308.3180373
   Segura S, 2018, IEEE T SOFTWARE ENG, V44, P1083, DOI 10.1109/TSE.2017.2764464
   Segura S, 2016, IEEE T SOFTWARE ENG, V42, P805, DOI 10.1109/TSE.2016.2532875
   Segura S, 2015, SOFTW TEST VERIF REL, V25, P138, DOI 10.1002/stvr.1566
   WEYUKER EJ, 1982, COMPUT J, V25, P465, DOI 10.1093/comjnl/25.4.465
   Yamada, 1995, P INT JOINT C ART IN
   Zhou Z.Q, 2019, P 4 INT WORKSH MET T
NR 40
TC 4
Z9 5
U1 5
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 227
EP 251
DI 10.1007/s11219-020-09544-9
EA APR 2021
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000644734500002
OA hybrid
DA 2024-07-18
ER

PT J
AU Galvan-Cruz, S
   Mora, M
   Laporte, CY
   Duran-Limon, H
AF Galvan-Cruz, Sergio
   Mora, Manuel
   Laporte, Claude Y.
   Duran-Limon, Hector
TI Reconciliation of scrum and the project management process of the
   ISO/IEC 29110 standard-Entry profile-an experimental evaluation through
   usability measures
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Agility-rigor reconciliation problem; Scrum; ISO; IEC 29110
   standard-Entry profile; Project Management process; Electronic Process
   Guide; Within-subjects experiment design
ID SOFTWARE PROCESS IMPROVEMENT; INFORMATION-SYSTEMS; AGILE METHODOLOGIES;
   DESIGN SCIENCE; CMMI; IMPLEMENTATION; ORGANIZATIONS; PRODUCTIVITY;
   ACCEPTANCE; IMPACTS
AB Software process standards and models are used in large- and medium-sized organizations to reach the Iron Triangle. In contrast, small and very small entities either ignore them or cannot apply them because these standards and models are technically and economically not affordable. Consequently, agile software development practices are usually used by small and very small organizations. The ISO/IEC 29110 series of standards and guides are now available for very small organizations, but their utilization with agile practices represents an agility-rigor reconciliation problem. In this research, we report the experimental evaluation of Scrum + EPG (a reconciled agile-rigorous software Project Management process from Scrum, and the Project Management process of the ISO/IEC 29110 series-Entry profile, documented in an Electronic Process Guide). Scrum + EPG was compared to Scrum EPG (a non-modified Scrum process also documented in an Electronic Process Guide). Thirty-two international academicians and practitioners, including experts and novices on agile practices, from Latin America, North America, and Asia-Pacific regions, evaluated six metrics of usability. A within-subjects design and Wilcoxon matched-pairs signed-rank tests were applied for collecting and analyzing the experimental data. The statistical results support the claim that the Scrum + EPG was considered a high-quality conciliated agile-rigorous software Project Management process for the Entry profile. Given the scarcity of similar studies and the need for reconciling agile-rigorous software development practices, this study contributes to a plausible solution for very small organizations. Finally, further empirical research is encouraged to confirm, update, and extend the results reported in this investigation.
C1 [Galvan-Cruz, Sergio; Mora, Manuel] Autonomous Univ Aguascalientes, Ave Univ 940, Aguascalientes 20131, Ags, Mexico.
   [Laporte, Claude Y.] Ecole Technol Super, 1100 Notre Dame St, Montreal, PQ H3C 1K3, Canada.
   [Duran-Limon, Hector] Univ Guadalajara, Perif Nte 799, Zapopan 45130, Jal, Mexico.
C3 Universidad Autonoma de Aguascalientes; University of Quebec; Ecole de
   Technologie Superieure - Canada; Universidad de Guadalajara
RP Mora, M (corresponding author), Autonomous Univ Aguascalientes, Ave Univ 940, Aguascalientes 20131, Ags, Mexico.
EM jose.mora@edu.uaa.mx
OI GALVAN-CRUZ, SERGIO/0000-0001-7453-3115; Duran-Limon,
   Hector/0000-0002-2069-4711; Mora, Manuel/0000-0003-1631-5931
CR Abad ZSH, 2012, STUD COMPUT INTELL, V430, P141
   Abrahamsson P, 2010, AGILE SOFTWARE DEVELOPMENT: CURRENT RESEARCH AND FUTURE DIRECTIONS, P31, DOI 10.1007/978-3-642-12575-1_3
   Agarwal N., 2006, International Journal of Project Management, V24, P358, DOI 10.1016/j.ijproman.2005.11.009
   Ahimbisibwe A, 2017, J ENTERP INF MANAG, V30, P400, DOI 10.1108/JEIM-06-2015-0056
   ANDERSON JR, 1993, AM PSYCHOL, V48, P35, DOI 10.1037/0003-066X.48.1.35
   [Anonymous], 2015, CHAOS REPORT 2015
   [Anonymous], P 5 INT C PROC SOFTW
   Banerjee, 2013, J INT TECHNOLOGY INF, V22, P78
   Basili VR, 1996, COMMUN ACM, V39, P104, DOI 10.1145/236156.236184
   Beck K, 1999, COMPUTER, V32, P70, DOI 10.1109/2.796139
   Beck K., 2000, EXTREME PROGRAMMING
   Becker-Kornstaedt U, 2000, P ICSE WORKSH SE OV, P1
   Berger P.D., 2018, Experimental Design With applications in Management, Engineering, and the Sciences
   Bloch M., 2012, Delivering Large-Scale IT Projects on Time, on Budget, and on Value, P1, DOI [10.1017/cbo9780511607646.002, DOI 10.1017/CBO9780511607646.002]
   Boehm B, 2005, IEEE SOFTWARE, V22, P30, DOI 10.1109/MS.2005.129
   Boehm B, 2004, PROC INT CONF SOFTW, P718, DOI 10.1109/ICSE.2004.1317503
   Boehm B, 2003, COMPUTER, V36, P57, DOI 10.1109/MC.2003.1204376
   Brereton P, 2007, J SYST SOFTWARE, V80, P571, DOI 10.1016/j.jss.2006.07.009
   Briand LC, 2001, IEEE T SOFTWARE ENG, V27, P513, DOI 10.1109/32.926174
   Buchalcevova A, 2019, COMPUT STAND INTER, V65, P103, DOI 10.1016/j.csi.2019.03.001
   Calvo-Manzano, 2017, TRENDS APPL SOFTWARE, P13
   Cayola L, 2018, INFORM SOFTWARE TECH, V97, P163, DOI 10.1016/j.infsof.2018.01.010
   Chin W.W., 2009, HDB PARTIAL LEAST SQ, P655, DOI DOI 10.1007/978-3-540-32827-8_29
   Clarke P, 2013, J SOFTW-EVOL PROC, V25, P981, DOI 10.1002/smr.1580
   CMMI &REG; Institute, 2019, CMMI DEV V20
   Coleman G, 2008, J SYST SOFTWARE, V81, P772, DOI 10.1016/j.jss.2007.07.027
   Conradi R., 2004, P 11 NORW C INF SYST, P10
   Ebert C, 2007, J SYST SOFTWARE, V80, P850, DOI 10.1016/j.jss.2006.09.017
   Eclipse Foundation, 2019, SCRUM EPG VERSION 15
   Fowler M., 2001, SOFTWARE DEV, V9, P35
   Galvan-Cruz S., 2021, ADV INTELLIGENT SYST, V1297
   Galvan-Cruz S, 2017, INT J INF TECHNOL SY, V10, P75, DOI 10.4018/IJITSA.2017010105
   García F, 2011, IEEE SOFTWARE, V28, P15, DOI 10.1109/MS.2011.40
   Garzás J, 2013, J SOFTW-EVOL PROC, V25, P1325, DOI 10.1002/smr.1605
   Ghanadbashi S, 2016, IET SOFTW, V10, P27, DOI 10.1049/iet-sen.2014.0223
   Glass RL, 2004, COMMUN ACM, V47, P89, DOI 10.1145/990680.990686
   Gregor S, 2013, MIS QUART, V37, P337, DOI 10.25300/MISQ/2013/37.2.01
   Haumer P., 2007, ECLIPSE PROCESS FRAM
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Henriques Vaughan, 2017, Interdisciplinary Journal of Information, Knowledge, and Management, V12, P53
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Hoda R, 2018, IEEE SOFTWARE, V35, P58, DOI 10.1109/MS.2018.290111318
   Hong W, 2011, J MANAGE INFORM SYST, V28, P235, DOI 10.2753/MIS0742-1222280108
   Humphrey, 1999, 6 INTERACTIVE, V2, P1
   HUMPHREY W., 2000, The Team Software Process (TSP)
   ISO IEC, 2012, ISOIEC T 29110 5 1 1
   ISO IEC, 2015, ISOIEC 330042015 INF
   ISO IEC, 2017, ISOIECIEEE 122072017
   Jakobsen CR, 2008, AGILE 2008, PROCEEDINGS, P212, DOI 10.1109/Agile.2008.10
   Jedlitschka A., 2008, Guide to advanced empirical software engineering, P201, DOI DOI 10.1007/978-1-84800-044-5_8
   Jirapanthong, 2019, J INFORM SCI TECHNOL, V9, P63
   Johanson A, 2017, EMPIR SOFTW ENG, V22, P2206, DOI 10.1007/s10664-016-9483-z
   Karahanna E, 1999, MIS QUART, V23, P183, DOI 10.2307/249751
   Klotins Eriks, 2019, Empirical Software Engineering, V24, P68, DOI 10.1007/s10664-018-9620-y
   Koolmanojwong S., 2008, USC CSSE TECHNICAL R, V2008-832, P1
   Laporte, 2019, DEPLOYMENT PACKAGES
   Laporte C Y., 2017, Cross Talk, P23
   Laporte C.Y., 2013, ISO FOCUS, V4, P32
   Laporte C Y., 2013, Cross Talk, P28
   Laporte C.Y., 2018, P INT C SOFTW PROC, P88
   Larrucea X, 2019, COMPUT STAND INTER, V65, P159, DOI 10.1016/j.csi.2019.03.005
   Leuser J., 2009, P 13 INT C EV ASS SO, P1
   Magdaleno AM, 2012, J SYST SOFTWARE, V85, P351, DOI 10.1016/j.jss.2011.08.028
   Majchrowski A, 2016, J SOFTW-EVOL PROC, V28, P990, DOI 10.1002/smr.1829
   Marques R., 2017, Proceedings of the 25th European Conference on Information Systems (ECIS), P2445
   Moe N. B., 2006, Software Process Improvement and Practice, V11, P21, DOI 10.1002/spip.250
   Mora M, 2016, INT J INFORM MANAGE, V36, P73, DOI 10.1016/j.ijinfomgt.2015.10.001
   Moradi M, 2009, PUBLIC HEALTH NUTR, V12, P59, DOI 10.1017/S1368980008001924
   Niazi M, 2005, J SYST SOFTWARE, V74, P155, DOI 10.1016/j.jss.2003.10.017
   Niazi M, 2015, J SOFTW-EVOL PROC, V27, P700, DOI 10.1002/smr.1704
   O'Connor RV, 2017, INT J INF TECHNOL SY, V10, P1, DOI 10.4018/IJITSA.2017010101
   O'Connor RV, 2009, AUSTRALAS J INF SYST, V16, P7
   Pai DR, 2015, INFORM TECHNOL MANAG, V16, P235, DOI 10.1007/s10799-015-0234-4
   Pesado P., 2013, P 18 C ARG CIENS, P898
   Pessoa M., 2016, P INT C SOFTW PROC I, P57
   Petersen K, 2008, 12 INT C EV ASS SOFT, P1, DOI 10.5555/2227115.2227123
   Pikkarainen M, 2009, LECT NOTES BUS INF P, V32, P401
   Pino FJ, 2010, J SYST SOFTWARE, V83, P1662, DOI 10.1016/j.jss.2010.03.077
   Richardson I, 2007, IEEE SOFTWARE, V24, P18, DOI 10.1109/MS.2007.12
   Riemenschneider CK, 2002, IEEE T SOFTWARE ENG, V28, P1135, DOI 10.1109/TSE.2002.1158287
   Savolainen P, 2012, INT J PROJ MANAG, V30, P458, DOI 10.1016/j.ijproman.2011.07.002
   Schwaber K., 2017, The Scrum Guide: The Definitive The Rules of the Game, DOI [10.1053/j.jrn.2009.08.012, DOI 10.1053/J.JRN.2009.08.012]
   Schwaber K., 1997, BUSINESS OBJECT DESI, DOI [10.1007/978-1-4471-0947-1_11, DOI 10.1007/978-1-4471-0947-1_11]
   Sheskin D. J., 2000, Handbook of Parametric and Nonparametric Statistical Procedures
   Silva FS, 2015, INFORM SOFTWARE TECH, V58, P20, DOI 10.1016/j.infsof.2014.09.012
   SIMON HA, 1971, AM PSYCHOL, V26, P145, DOI 10.1037/h0030806
   Slaughter SA, 1998, COMMUN ACM, V41, P67, DOI 10.1145/280324.280335
   Staples M, 2007, J SYST SOFTWARE, V80, P883, DOI 10.1016/j.jss.2006.09.008
   Suteeca K., 2016, 2016 INT COMP SCI EN, P1, DOI [10.1109/ICSEC.2016.7859884, DOI 10.1109/ICSEC.2016.7859884]
   Sutherland J., 2008, P 41 ANN HAWAII INT
   Sutherland J., 2010, Scrum Handbook
   Takeuchi M., 2014, J SOFTW-EVOL PROC, V26, P312
   Thiry M., 2008, 15 EUROSPI C EUR SYS, P1
   Torrecilla-Salinas CJ, 2016, INFORM SOFTWARE TECH, V71, P92, DOI 10.1016/j.infsof.2015.11.002
   Unterkalmsteiner M, 2012, IEEE T SOFTWARE ENG, V38, P398, DOI 10.1109/TSE.2011.26
   Vegas S, 2016, IEEE T SOFTWARE ENG, V42, P120, DOI 10.1109/TSE.2015.2467378
   VersionOne, 2018, 12 ANN STATE AGILE S
   von Wangenheim CG, 2009, EMPIR SOFTW ENG, V14, P418, DOI 10.1007/s10664-008-9092-6
NR 98
TC 2
Z9 2
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 239
EP 273
DI 10.1007/s11219-021-09552-3
EA APR 2021
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA SN3KT
UT WOS:000636423200001
DA 2024-07-18
ER

PT J
AU Giraldo, FD
   Chicaiza, AJ
   España, S
   Pastor, O
AF Giraldo, Faber D.
   Chicaiza, Angela J.
   Espana, Sergio
   Pastor, Oscar
TI Empirical validation of a quality framework for evaluating modelling
   languages in MDE environments
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality; Model-driven engineering; Quality frameworks; Empirical
   evaluation; The MMQEF method
ID PHYSICS
AB In previous research, we proposed the multiple modelling quality evaluation framework (MMQEF), which is a method and tool for evaluating modelling languages in model-driven engineering (MDE) environments. Rather than being exclusive, MMQEF attempts to complement other methods of evaluation of quality such as SEQUAL. However, to date, MMQEF has not been validated beyond some concept proofs. This paper evaluates the applicability of the MMQEF method in comparison with other existing methods. We performed an evaluation in which the subjects had to detect quality issues in modelling languages. A group of expert professionals and two experimental objects (i.e. two combinations of different modelling languages based on real industrial practices) were used. To analyse the results, we applied quantitative approaches, i.e. statistical tests on the results of the performance measures and the perception of subjects. We ran four replications of the experiment in Colombia between 2016 and 2019, with a total of 50 professionals. The results of the quantitative analysis show a low performance for all of the methods, but a positive perception of MMQEF.Conclusions: The application of modelling language quality evaluation methods within MDE settings is indeed tricky, and subjects did not succeed in identifying all quality problems. This experiment paves the way for additional investigation on the trade-offs between the methods and potential situational guidelines (i.e. circumstances under which each method is convenient). We encourage further inquiries on industrial applications to incrementally improve the method and tailor it to the needs of professionals working in real industrial environments.
C1 [Giraldo, Faber D.; Chicaiza, Angela J.] Univ Quindio, SINFOCI Res Grp, Cra 15 Calle 12N, Armenia Quindio 630004, Colombia.
   [Espana, Sergio] Univ Utrecht, Dept Informat & Comp Sci, Off Buys Ballotgebouw BBL 580,POB 80-089, NL-3508 TB Utrecht, Netherlands.
   [Giraldo, Faber D.; Pastor, Oscar] Univ Politecn Valencia, PROS Res Ctr, Camino Vera S-N Valencia, Velencia 46022, Spain.
C3 Universidad del Quindio; Utrecht University; Universitat Politecnica de
   Valencia
RP Chicaiza, AJ (corresponding author), Univ Quindio, SINFOCI Res Grp, Cra 15 Calle 12N, Armenia Quindio 630004, Colombia.
EM fdgiraldo@uniquindio.edu.co; ajchicaizao@uqvirtual.edu.co;
   s.espana@uu.nl; opastor@pros.upv.es
RI López, Oscar Pastor/S-4216-2016; España, Sergio/B-1171-2010; Giraldo,
   Faber D./Q-1135-2018
OI España, Sergio/0000-0001-7343-4270; Giraldo, Faber
   D./0000-0002-6111-3055
CR Alaca OF, 2021, COMPUT STAND INTER, V76, DOI 10.1016/j.csi.2021.103513
   [Anonymous], 2003, INFORM SYST J
   [Anonymous], 2013, P 2 WORKSH GRAPH MOD
   [Anonymous], 2012, MODEL BASED DEV EVOL, DOI DOI 10.1007/978-1-4471-2936-3
   [Anonymous], 2014, 11 WORKSH MOD DRIV E
   Arslan S, 2020, COMPUT IND, V115, DOI 10.1016/j.compind.2019.103179
   Asici TZ, 2021, J COMPUT LANG, V62, DOI 10.1016/j.cola.2020.101020
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   Teixeira MDD, 2016, LECT NOTES BUS INF P, V248, P432, DOI 10.1007/978-3-319-39429-9_27
   Espinilla M, 2011, ADV INTEL SOFT COMPU, V123, P685
   Fischer M., 2018, BIBLIO EVALUATING CO
   Giraldo FD, 2019, SOFTWARE QUAL J, V27, P1239, DOI 10.1007/s11219-018-9434-6
   Giraldo FD, 2018, INFORM SYST, V77, P48, DOI 10.1016/j.is.2018.06.002
   Giraldo FD, 2018, SOFTWARE QUAL J, V26, P685, DOI 10.1007/s11219-016-9350-6
   Giraldo FD, 2014, INT CONF RES CHAL
   Gregor S, 2006, MIS QUART, V30, P611
   Grobshtein Y, 2011, SYSTEMS ENG, V14, P327, DOI 10.1002/sys.20181
   Heggset M., 2015, Complex Syst. Informatics Model. Quart., V5, P1, DOI [10.7250/csimq.2015-5.01, DOI 10.7250/CSIMQ.2015-5.01]
   Hindawi M, 2009, LECT NOTES COMPUT SC, V5421, P291, DOI 10.1007/978-3-642-01648-6_31
   ISO/IEC/(IEEE), 2011, 420102011 ISOIECIEEE, V12
   Jedlitschka A., 2008, Guide to advanced empirical software engineering, P201, DOI DOI 10.1007/978-1-84800-044-5_8
   Kardas G., 2015, SOFTWARE QUAL J, P1
   Khalajzadeh H, 2020, J COMPUT LANG, V58, DOI 10.1016/j.cola.2020.100964
   Krogstie J., 2012, MODEL BASED DEV EVOL, P249
   Krogstie John, 2012, ModelBased Development and Evolution of Information Systems, P205
   Lange CFJ, 2006, 13TH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P7
   Maes A, 2007, DATA KNOWL ENG, V63, P701, DOI 10.1016/j.datak.2007.04.008
   Merilinna J., 2005, THESIS VTT TECHNICAL
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Miranda T, 2019, LECT NOTES ARTIF INT, V11375, P55, DOI 10.1007/978-3-030-25693-7_4
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Moody DL, 2009, IEEE T SOFTWARE ENG, V35, P756, DOI 10.1109/TSE.2009.67
   Panach JI, 2015, INFORM SOFTWARE TECH, V62, P164, DOI 10.1016/j.infsof.2015.02.012
   Santos F, 2020, SIMUL MODEL PRACT TH, V104, DOI 10.1016/j.simpat.2020.102126
   Shin SS, 2019, SOFTW SYST MODEL, V18, P3083, DOI 10.1007/s10270-018-00711-y
   Siau K, 1998, P ANN HICSS, P314, DOI 10.1109/HICSS.1998.648327
   SOWA JF, 1992, IBM SYST J, V31, P590, DOI 10.1147/sj.313.0590
   Wohlin C., 2012, Experimentation in Software Engineering
   Wohlin C., 2012, Planning. Exp. Softw. Eng.., P89, DOI [10.1007/978-3-642-29044-28, DOI 10.1007/978-3-642-29044-28]
   Wohlin C., 2012, OPERATION, P117
   Wortmann A, 2020, SOFTW SYST MODEL, V19, P67, DOI 10.1007/s10270-019-00757-6
   ZACHMAN JA, 1987, IBM SYST J, V26, P276, DOI 10.1147/sj.263.0276
NR 43
TC 2
Z9 2
U1 16
U2 21
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 275
EP 307
DI 10.1007/s11219-021-09554-1
EA APR 2021
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000636423200002
DA 2024-07-18
ER

PT J
AU Du, XT
   Zhou, ZH
   Yin, BB
   Xiao, GP
AF Du, Xiaoting
   Zhou, Zenghui
   Yin, Beibei
   Xiao, Guanping
TI Cross-project bug type prediction based on transfer learning
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Bug prediction; Cross-project; Bug report; Transfer learning
AB The prediction of bug types provides useful insights into the software maintenance process. It can improve the efficiency of software testing and help developers adopt corresponding strategies to fix bugs before releasing software projects. Typically, the prediction tasks are performed through machine learning classifiers, which rely heavily on labeled data. However, for a software project that has insufficient labeled data, it is difficult to train the classification model for predicting bug types. Although labeled data of other projects can be used as training data, the results of the cross-project prediction are often poor. To solve this problem, this paper proposes a cross-project bug type prediction framework based on transfer learning. Transfer learning breaks the assumption of traditional machine learning methods that the training set and the test set should follow the same distribution. Our experiments show that the results of cross-project bug type prediction have significant improvement by adopting transfer learning. In addition, we have studied the factors that influence the prediction results, including different pairs of source and target projects, and the number of bug reports in the source project.
C1 [Du, Xiaoting; Zhou, Zenghui; Yin, Beibei; Xiao, Guanping] Beihang Univ, Sch Automat Sci & Elect Engn, Beijing, Peoples R China.
C3 Beihang University
RP Du, XT (corresponding author), Beihang Univ, Sch Automat Sci & Elect Engn, Beijing, Peoples R China.
EM xiaoting_2015@buaa.edu.cn; zhouzenghui@buaa.edu.cn;
   yinbeibei@buaa.edu.cn; gpxiao@buaa.edu.cn
RI zhou, zenghui/JPX-1165-2023; Xiao, Guanping/O-3514-2016
OI Xiao, Guanping/0000-0002-9419-4058
CR [Anonymous], IEEE T RELIABILITY
   [Anonymous], INT WORKSH MIN UNSTR
   [Anonymous], 28 AAAI C ART INT
   Antoniol G, 2008, P 2008 C CTR ADV STU, P304
   Asadollah SA, 2017, J INTERNET SERV APPL, V8, DOI 10.1186/s13174-017-0055-2
   Bhattacharya Pamela., 2011, PROCEEDING 8 WORKING, P207, DOI DOI 10.1145/1985441.1985472
   Bird S., 2006, P COLING ACL INT PRE, P69, DOI DOI 10.3115/1118108.1118117
   Blitzer J., 2006, PROC C EMPIRICAL MET, P120, DOI DOI 10.3115/1610075.1610094
   Cavezza DG, 2014, PROC INT SYMP SOFTW, P267, DOI 10.1109/ISSRE.2014.19
   Chen TR, 2012, IEEE IJCNN
   Cotroneo D, 2013, PROC INT SYMP SOFTW, P178, DOI 10.1109/ISSRE.2013.6698917
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Dai WY, 2007, KDD-2007 PROCEEDINGS OF THE THIRTEENTH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P210
   Dai Wenyuan, 2007, P 24 INT C MACHINE L, P193
   Du XT, 2017, IEEE INT SYMP SOFTW, P259, DOI 10.1109/ISSREW.2017.28
   Feng Y, 2018, INT C PROGRAM COMPRE, P86, DOI 10.1145/3196321.3196343
   Frattini F, 2016, SPRINGER SER RELIAB, P551, DOI 10.1007/978-3-319-30599-8_21
   Freund Y, 1997, J COMPUT SYST SCI, V55, P119, DOI 10.1006/jcss.1997.1504
   Friedman JH, 2001, ANN STAT, V29, P1189, DOI 10.1214/aos/1013203451
   Gharibi G, 2018, IEEE INT CONF BIG DA, P4016, DOI 10.1109/BigData.2018.8622426
   Grottke M., 2005, The Journal of Reliability Engineering Association of Japan, V27, P425
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   Jing XY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P496, DOI 10.1145/2786805.2786813
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Mikolov Tomas, 2013, EFFICIENT ESTIMATION
   Mikolov Tomas, 2013, Advances in Neural Information Processing Systems, P3111, DOI DOI 10.48550/ARXIV.1310.4546
   Nam J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P508, DOI 10.1145/2786805.2786814
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Pan SJ, 2010, IEEE T KNOWL DATA EN, V22, P1345, DOI 10.1109/TKDE.2009.191
   Pedregosa F, 2011, J MACH LEARN RES, V2830
   Pingclasai N, 2013, ASIA PAC SOFWR ENG, P13, DOI 10.1109/APSEC.2013.105
   Plisson Jol., 2004, Proceedings of IS, Vvolume 3, P83
   QIAO Y, 2018, IEEE T RELIABILITY
   Qin FY, 2017, IEEE PAC RIM INT SYM, P135, DOI 10.1109/PRDC.2017.27
   Raina R, 2006, P 23 INT C MACH LEAR, P713
   Silva C, 2003, IEEE IJCNN, P1661
   Sokolova M, 2006, LECT NOTES COMPUT SC, V4304, P1015
   Sui Y., 2018, IEEE T SOFTWARE ENG, P1
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Trivedi KS, 2011, 2011 IEEE 17TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING (PRDC), P224, DOI 10.1109/PRDC.2011.34
   Weiss Karl, 2016, Journal of Big Data, V3, DOI 10.1186/s40537-016-0043-6
   Wen W, 2016, PROC INT SYMP SOFTW, P150, DOI 10.1109/ISSRE.2016.29
   Wu F, 2018, IEEE T RELIAB, V67, P581, DOI 10.1109/TR.2018.2804922
   Wu XD, 2008, KNOWL INF SYST, V14, P1, DOI 10.1007/s10115-007-0114-2
   Xia X, 2014, IEEE INT C ENG COMP, P39, DOI 10.1109/ICECCS.2014.14
   Xiao GP, 2017, PROC INT SYMP SOFTW, P101, DOI 10.1109/ISSRE.2017.21
   Xu YH, 2019, J SYST SOFTWARE, V147, P172, DOI 10.1016/j.jss.2018.09.091
   Yang Q, 2006, INT J INF TECH DECIS, V5, P597, DOI 10.1142/S0219622006002258
   Yang XL, 2016, PROC INT SYMP SOFTW, P127, DOI 10.1109/ISSRE.2016.33
   Zadrozny B., 2002, P 8 ACM SIGKDD INT C, P694, DOI [10.1145/775047.775151, DOI 10.1145/775047.775151]
   Zhang XY, 2018, J SYST SOFTWARE, V136, P278, DOI 10.1016/j.jss.2017.07.027
   Zhou Y, 2016, J SOFTW-EVOL PROC, V28, P150, DOI 10.1002/smr.1770
NR 52
TC 11
Z9 11
U1 1
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 39
EP 57
DI 10.1007/s11219-019-09467-0
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500003
DA 2024-07-18
ER

PT J
AU Wu, XX
   Zheng, W
   Pu, MC
   Chen, J
   Mu, DJ
AF Wu, Xiaoxue
   Zheng, Wei
   Pu, Minchao
   Chen, Jie
   Mu, Dejun
TI Invalid bug reports complicate the software aging situation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software aging; Invalid bug report; Performance-related bug report;
   Aging related bug report; Text mining
AB Symptoms of software aging include performance degradation and failure occurrence increasing when software systems run for a period of time. Therefore, software aging is closely related to system performance. Understanding and analyzing performance issues in the software system is critical to mastering software aging information. Instead of focusing on normal valid bug reports (VBRs), this paper advocates the usage of invalid bug reports (IBRs) to capture software aging signals. We use performance bugs that are highly related to software aging as an example to construct a binary classification model for bug report classification. We conduct a rigorous evaluation of the constructed models via different performance measures (i.e., recall, precision, F1-score, AUC). Then, the model is used to predict the performance bug reports (PBRs) in IBRs, and a manual analysis of the prediction results is conducted to identify aging-related bug reports (ABRs). The final results show that the ratio of PBRs in IBRs ranges from 4.9 to 42.18% for the two real open-source projects HDFS and HBase when considering five different classifiers. Among these five classifiers, Support Vector Machine (SVM) classifier can achieve the best performance. The ratios of PBRs in IBRs by using this classifier are 11.1% and 15.35% for these two datasets and the performances in terms of F1-score are 85% and 74%. Further analysis of the predicted PBRs of IBRs in the project HDFS is conducted through a manual user case study; some surprising findings revealing the relationship between IBRs, PBRs, and ABRs are presented: (1) Around 50% of the PBRs in IBRs are related to software aging; (2) components that undertake major tasks are more prone to aging problems; (3) more than 50% ARBs lead to timeout, 33% ARBs are caused by improper control of memory or threats, and 29% ARBs are caused by inappropriate management of file operation or disk usage; (4) hard to reproduce is the major reason that ARBs are usually closed as invalid because many aging-related bugs would temporarily disappear by restarting the system.
C1 [Wu, Xiaoxue; Zheng, Wei; Pu, Minchao; Chen, Jie; Mu, Dejun] Northwestern Polytech Univ, Xian, Peoples R China.
C3 Northwestern Polytechnical University
RP Zheng, W (corresponding author), Northwestern Polytech Univ, Xian, Peoples R China.
EM zhengweizr@gmail.com
OI Zheng, Wei/0000-0003-2905-7193
CR Agrawal A, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1050, DOI 10.1145/3180155.3180197
   [Anonymous], ATLASSIAN JIRA
   [Anonymous], HDFS ARCHITECTURE
   [Anonymous], 2019, DIMENSIONALITY REDUC
   [Anonymous], P INT C DAT ENG COMM
   [Anonymous], IAPR WORKSH ART NEUR
   [Anonymous], INT S FAULT TOL COMP
   [Anonymous], CL CI
   [Anonymous], 2012, TECHNOMETRICS
   [Anonymous], SELECTFROMMODEL
   [Anonymous], P INT C ARCH SUPP PR
   [Anonymous], IEEE COMP SOFTW APPL
   [Anonymous], IEEE IPCCC
   [Anonymous], IEEE 2 INT WORKSH AG
   [Anonymous], 2018, ARXIV180101275
   [Anonymous], IEEE PAC RIM INT S D
   [Anonymous], 2018, IEEE T RELIABILITY
   [Anonymous], P 33 ACM IEEE INT C
   [Anonymous], 2011, ACM T INTEL SYST TEC, DOI DOI 10.1145/1961189.1961199
   Bao YJ, 2005, IEEE T RELIAB, V54, P541, DOI 10.1109/TR.2005.853442
   Breiman L., 2001, Mach. Learn., V45, P5
   Bueno PC, 2017, TRANSPORT RES A-POL, V99, P1, DOI 10.1016/j.tra.2017.02.009
   CORTES C, 1995, MACH LEARN, V20, P273, DOI 10.1007/BF00994018
   Cotroneo D, 2016, J SYST SOFTWARE, V113, P27, DOI 10.1016/j.jss.2015.11.021
   Cotroneo D, 2013, PERFORM EVALUATION, V70, P163, DOI 10.1016/j.peva.2012.09.004
   Domingos P, 1997, MACH LEARN, V29, P103, DOI 10.1023/A:1007413511361
   Fan RE, 2008, J MACH LEARN RES, V9, P1871
   Gardner MW, 1998, ATMOS ENVIRON, V32, P2627, DOI 10.1016/S1352-2310(97)00447-0
   Ghoneim SA, 2003, SOFTWARE QUAL J, V11, P57, DOI 10.1023/A:1023636112886
   Goseva-Popstojanova K, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2018), P344, DOI 10.1109/QRS.2018.00047
   Grottke M, 2016, IEEE T RELIAB, V65, P70, DOI 10.1109/TR.2015.2452933
   Gunawi Haryadi S., 2014, P ACM S CLOUD COMP, P1
   Hao L, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON MECHATRONICS, ROBOTICS AND AUTOMATION (ICMRA), P17, DOI 10.1109/ICMRA.2018.8490577
   Kotsiantis S., 2006, International Journal of Computer Science, V1, P111
   Kumar L, 2018, ISEC'18: PROCEEDINGS OF THE 11TH INNOVATIONS IN SOFTWARE ENGINEERING CONFERENCE, DOI 10.1145/3172871.3172872
   Li YK, 2018, 2018 15TH IEEE INTERNATIONAL CONFERENCE ON ADVANCED VIDEO AND SIGNAL BASED SURVEILLANCE (AVSS), P1
   Ng AndrewY., 2004, ICML'04, DOI DOI 10.1145/1015330.1015435
   QIAO Y, 2018, IEEE T RELIABILITY
   Romano J., 2006, ANN M FLORIDA ASS IN
   Shu R., 2019, INT C AUTOMATED SOFT, P1
   Storn R, 1997, J GLOBAL OPTIM, V11, P341, DOI 10.1023/A:1008202821328
   Wang Z, 2018, IEEE T SOFTWARE ENG, V44, P1112, DOI 10.1109/TSE.2017.2752158
   Yang XL, 2017, J COMPUT SCI TECH-CH, V32, P181, DOI 10.1007/s11390-017-1713-3
NR 43
TC 13
Z9 14
U1 1
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 195
EP 220
DI 10.1007/s11219-019-09481-2
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500009
DA 2024-07-18
ER

PT J
AU Sundararajan, S
   Marath, B
   Vijayaraghavan, PK
AF Sundararajan, Srikrishnan
   Marath, Bhasi
   Vijayaraghavan, Pramod K.
TI Variation of risk profile across software life cycle in IS outsourcing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Global software development; Software risk; Software quality; Software
   maintenance; Software modernization; Software project management
ID PROJECT RISKS; TEAMS; MODEL
AB Global software development (GSD) is an area that receives much attention from researchers today. In this context, we undertook an investigation of the variation of risk profile in offshore-outsourced software projects, across the software life cycle. The scope of the investigation was limited to risks associated with technical aspects, methods, and procedures used in software development. Based on literature survey, we developed a questionnaire to measure the risks and outcomes in software projects. Using the questionnaire, we conducted a survey of 145 software projects executed by global IT companies. We built a structural equation model showing the interdependence of underlying risk factors and their influence on project outcome. We further explored how the risk profile varied across the software life cycle stages such as development, maintenance, and modernization.
C1 [Sundararajan, Srikrishnan] Agni Coll Technol, Dept Comp Sci & Engn, Chennai, Tamil Nadu, India.
   [Marath, Bhasi] Cochin Univ Sci & Technol, Sch Management Studies, Kochi, Kerala, India.
   [Vijayaraghavan, Pramod K.] Cochin Univ Sci & Technol, Dept Comp Applicat, Kochi, Kerala, India.
C3 Cochin University Science & Technology; Cochin University Science &
   Technology
RP Sundararajan, S (corresponding author), Agni Coll Technol, Dept Comp Sci & Engn, Chennai, Tamil Nadu, India.
EM sri-sun@hotmail.com; drbhasi@yahoo.com; pramodkv4@gmail.com
OI MARATH, BHASI/0000-0002-8032-5889
CR Addison T., 2002, Proceedings of SAICSIT, P128
   Ahuja M., 2013, J INFORM TECHNOLOGY, V13
   BOEHM BW, 1991, IEEE SOFTWARE, V8, P32, DOI 10.1109/52.62930
   Carr M., 1993, TAXONOMY BASED RISK, P1
   Colomo-Palacios R, 2014, SOFTWARE QUAL J, V22, P3, DOI 10.1007/s11219-012-9191-x
   Hair JF, 2010, Multivariate data analysis
   Iacovou CL, 2008, COMMUN ACM, V51, P89, DOI 10.1145/1349026.1349044
   Jain DM, 2013, BUS PROCESS MANAG J, V19, P54, DOI 10.1108/14637151311294868
   Jones CM, 2007, WORLD HAPTICS 2007: SECOND JOINT EUROHAPTICS CONFERENCE AND SYMPOSIUM ON HAPTIC INTERFACES FOR VIRTUAL ENVIRONMENT AND TELEOPERATOR SYSTEMS, PROCEEDINGS, P557
   Kerzner H., 2017, RISK MANAGEMENT, P743
   Kotler, 2013, Marketing Management
   Lacity M., 2008, Offshore outsourcing of IT work. Offshore Outsourcing of IT Work, P1, DOI DOI 10.1057/9780230582965_1
   Lehman M. M., 1980, Journal of Systems and Software, V1, P213, DOI 10.1016/0164-1212(79)90022-0
   Madhani P. M., 2008, ICFAIAN J MANAGEMENT, V7, P61
   Martens B., 2009, ECIS 2009 P
   NIDUMOLU S, 1995, INFORM SYST RES, V6, P191, DOI 10.1287/isre.6.3.191
   Oz E, 2000, J COMPUT INFORM SYST, V41, P66
   Persson JS, 2009, IEEE T ENG MANAGE, V56, P508, DOI 10.1109/TEM.2009.2013827
   Pressman R. S., 2009, SOFTWARE TESTING STR, P449
   Schmidt R, 2001, J MANAGE INFORM SYST, V17, P5, DOI 10.1080/07421222.2001.11045662
   Team C. P., 2010, CMUSEI2010TR033
   Thomas S, 2012, INT J INF TECHNOL PR, V3, P41, DOI 10.4018/jitpm.2012100103
   Vlaar PWL, 2008, MIS QUART, V32, P227
   Wallace L, 2004, COMMUN ACM, V47, P68, DOI 10.1145/975817.975819
   Zhang SL, 2012, ELECTRON MARK, V22, P37, DOI 10.1007/s12525-011-0082-y
NR 25
TC 1
Z9 2
U1 1
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2019
VL 27
IS 4
BP 1563
EP 1582
DI 10.1007/s11219-019-09451-8
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KP9TA
UT WOS:000516573400008
DA 2024-07-18
ER

PT J
AU Honfi, D
   Micskei, Z
AF Honfi, David
   Micskei, Zoltan
TI Classifying generated white-box tests: an exploratory study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; White-box test generation; Empirical study; Test
   classification
ID SOFTWARE
AB White-box test generation analyzes the code of the system under test, selects relevant test inputs, and captures the observed behavior of the system as expected values in the tests. However, if there is a fault in the implementation, this fault could get encoded in the assertions (expectations) of the tests. The fault is only recognized if the developer, who is using test generation, is also aware of the real expected behavior. Otherwise, the fault remains silent both in the test and in the implementation. A common assumption is that developers using white-box test generation techniques need to inspect the generated tests and their assertions, and to validate whether the tests encode any fault or represent the real expected behavior. Our goal is to provide insights about how well developers perform in this classification task. We designed an exploratory study to investigate the performance of developers. We also conducted an internal replication to increase the validity of the results. The two studies were carried out in a laboratory setting with 106 graduate students altogether. The tests were generated in four open-source projects. The results were analyzed quantitatively (binary classification metrics and timing measurements) and qualitatively (by observing and coding the activities of participants from screen captures and detailed logs). The results showed that participants tend to incorrectly classify tests encoding both expected and faulty behavior (with median misclassification rate 20%). The time required to classify one test varied broadly with an average of 2 min. This classification task is an essential step in white-box test generation that notably affects the real fault detection capability of such tools. We recommended a conceptual framework to describe the classification task and suggested taking this problem into account when using or evaluating white-box test generators.
C1 [Honfi, David; Micskei, Zoltan] Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Budapest, Hungary.
C3 Budapest University of Technology & Economics
RP Honfi, D (corresponding author), Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Budapest, Hungary.
EM honfi@mit.bme.hu; micskeiz@mit.bme.hu
RI Honfi, David/J-2720-2015; Micskei, Zoltan/G-8351-2012
OI Honfi, David/0000-0001-5217-828X; Micskei, Zoltan/0000-0003-1846-261X
FU Budapest University of Technology and Economics (BME); BME-Artificial
   Intelligence FIKP grant of EMMI (BME FIKP-MI/SC); Pro Progressio
   Foundation
FX Open access funding provided by Budapest University of Technology and
   Economics (BME). This work was partially supported by the BME-Artificial
   Intelligence FIKP grant of EMMI (BME FIKP-MI/SC) and a scholarship from
   Pro Progressio Foundation.
CR Almaghairbe R, 2016, SOFTW QUAL J, V25, P1
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], EXPERIMENTATION IN S
   [Anonymous], 2008, GUIDE ADV EMPIRICAL
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   BASILI VR, 1987, IEEE T SOFTWARE ENG, V13, P1278, DOI 10.1109/TSE.1987.232881
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   Bounimova E, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P122, DOI 10.1109/ICSE.2013.6606558
   CHILLAREGE R, 1992, IEEE T SOFTWARE ENG, V18, P943, DOI 10.1109/32.177364
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Daka E, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P57, DOI 10.1145/3092703.3092727
   Dieste O, 2017, EMPIR SOFTW ENG, V22, P2457, DOI 10.1007/s10664-016-9471-3
   Duraes JA, 2006, IEEE T SOFTWARE ENG, V32, P849, DOI 10.1109/TSE.2006.113
   Enoiu E, 2017, IEEE INT CONF SOFTW, P412, DOI 10.1109/ICST.2017.44
   Enoiu EP, 2016, IEEE INT CONF SOFTW, P1, DOI 10.1109/ICST.2016.15
   Falessi D, 2018, EMPIR SOFTW ENG, V23, P452, DOI 10.1007/s10664-017-9523-3
   Fraser G, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2699688
   Fraser G, 2013, IEEE T SOFTWARE ENG, V39, P276, DOI 10.1109/TSE.2012.14
   Friard O, 2016, METHODS ECOL EVOL, V7, P1325, DOI 10.1111/2041-210X.12584
   Jia Yue, 2016, P 25 INT S SOFTWARE, P354
   Juristo N, 2004, EMPIR SOFTW ENG, V9, P7, DOI 10.1023/B:EMSE.0000013513.48963.1b
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Ko AJ, 2015, EMPIR SOFTW ENG, V20, P110, DOI 10.1007/s10664-013-9279-3
   Kracht JS, 2014, INT CONF QUAL SOFTW, P256, DOI 10.1109/QSIC.2014.33
   MathNET, 2017, MATH NET NUMERICS
   MCMINN P., 2010, Proceedings of the First International Workshop on Software Test Output Validation, P1
   MYERS GJ, 1978, COMMUN ACM, V21, P760, DOI 10.1145/359588.359602
   Nguyen C.D., 2013, ESEC/SIGSOFT FSE'13, P136
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Panichella S, 2016, PROC INT CONF SOFTW, P547, DOI 10.1145/2884781.2884847
   Pastore F, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P66, DOI 10.1109/ICSE.2015.29
   Pastore F, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P342, DOI 10.1109/ICST.2013.13
   Powers DMW, 2020, J MACH LEARN TECHNOL, P37, DOI DOI 10.9735/2229-3981
   Prado MP, 2018, J SYST SOFTWARE, V141, P66, DOI 10.1016/j.jss.2018.03.052
   Raats M. M., 1991, Food Quality and Preference, V3, P89, DOI 10.1016/0950-3293(91)90028-D
   Ramler R, 2012, EUROMICRO CONF PROC, P286, DOI 10.1109/SEAA.2012.42
   Rojas J.M., 2015, Automated Unit Test Generation During Software Development: A Controlled Experiment and Think-aloud Observations, P338
   Shahrokni A, 2013, INFORM SOFTWARE TECH, V55, P1, DOI 10.1016/j.infsof.2012.06.002
   Shamshiri S., 2018, INT C SOFTW TEST VER
   Shamshiri S, 2015, IEEE INT CONF AUTOM, P201, DOI 10.1109/ASE.2015.86
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   Staats M., 2012, P 2012 INT S SOFTW T, P188, DOI [DOI 10.1145/2338965.2336776, 10.1145/2338965.2336776]
   Tillmann N., 2014, P 29 ACMIEEE INT C A, P385, DOI [10.1145/2642937, DOI 10.1145/2642937]
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Tillmann Nikolai., 2005, SIGSOFT Softw. Eng. Notes, V30, P253
   Wang Xiaoyin., 2015, P 2015 INT S SOFTWAR, P199
   Wohlin C, 2015, EMPIR SOFTW ENG, V20, P1427, DOI 10.1007/s10664-014-9319-7
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
NR 48
TC 4
Z9 5
U1 1
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1339
EP 1380
DI 10.1007/s11219-019-09446-5
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400014
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Nguyen, TH
   Vo, BQ
   Lumpe, M
   Grundy, J
AF Tuong Huan Nguyen
   Bao Quoc Vo
   Lumpe, Markus
   Grundy, John
TI KBRE: a framework for knowledge-based requirements engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Requirements engineering; Inconsistencies; Identification; Description
   logics; Manchester OWL Syntax; Ontology
ID GOAL; REPRESENTATION; INCONSISTENCY; SPECIFICATION; CONFLICTS
AB Detecting inconsistencies is a critical part of requirements engineering (RE) and has been a topic of interest for several decades. Domain knowledge and semantics of requirements not only play important roles in elaborating requirements but are also a crucial way to detect conflicts among them. In this paper, we present a novel knowledge-based RE framework (KBRE) in which domain knowledge and semantics of requirements are central to elaboration, structuring, and management of captured requirements. Moreover, we also show how they facilitate the identification of requirements inconsistencies and other-related problems. In our KBRE model, description logic (DL) is used as the fundamental logical system for requirements analysis and reasoning. In addition, the application of DL in the form of Manchester OWL Syntax brings simplicity to the formalization of requirements while preserving sufficient expressive power. A tool has been developed and applied to an industrial use case to validate our approach.
C1 [Tuong Huan Nguyen; Bao Quoc Vo; Lumpe, Markus; Grundy, John] Swinburne Univ Technol, Fac Informat & Commun Technol, Melbourne, Vic, Australia.
C3 Swinburne University of Technology
RP Nguyen, TH (corresponding author), Swinburne Univ Technol, Fac Informat & Commun Technol, Melbourne, Vic, Australia.
EM huan.nguyentuong@gmail.com; bvo@swin.edu.au; mlumpe@swin.edu.au;
   jgrundy@swin.edu.au
RI Nguyen, Huan/HHS-7093-2022; Nguyen, Bao Quoc Vo/E-4464-2010; Grundy,
   John/AAF-1716-2019
OI Grundy, John/0000-0003-4928-7076; Bao, Vo Nguyen
   Quoc/0000-0002-1791-6467
FU ARC [DP0987380]; Australian Research Council [DP0987380] Funding Source:
   Australian Research Council
FX We thank the anonymous reviewers for the helpful discussions and
   comments. This work is supported by the ARC Grant DP0987380.
CR [Anonymous], TON ONT REP
   [Anonymous], REASONING WEB
   [Anonymous], 2006, EVEN MORE IRRESISTIB
   [Anonymous], WEB SEMANTICS SCI SE
   [Anonymous], MANCHESTER OWL SYNTA
   [Anonymous], 2001, KNOWLEDGE SYSTEMS LA
   [Anonymous], OBJECT ORIENTED MODE
   [Anonymous], 1997, Requirements engineering: a good practice guide
   [Anonymous], 2011, C NAME 10 INT SEMANT
   [Anonymous], P 5 MED C INF SYST
   [Anonymous], SOFTWARE QUALITY PRO
   [Anonymous], 2007, HDB KNOWLEDGE REPRES
   [Anonymous], PELL OWL 2 REAS
   [Anonymous], STANDISH GROUP CHAOS
   [Anonymous], P OWLED 2007 WORKSH
   [Anonymous], ACM T COMPU IN PRESS
   Anton AI, 1996, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, P136, DOI 10.1109/ICRE.1996.491438
   BOEHM B, 1995, PROC INT CONF SOFTW, P243, DOI 10.1145/225014.225037
   Breaux TD, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1416563.1416565
   Brockmans S, 2004, LECT NOTES COMPUT SC, V3298, P198
   Corcho O, 2000, LECT NOTES ARTIF INT, V1937, P80
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   Dardenne A., 1991, Proceedings of the Sixth International Workshop on Software Specification and Design (Cat. No.91TH0388-9), P14, DOI 10.1109/IWSSD.1991.213081
   DeMarco T., 1979, STRUCTURED ANAL SYST
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Dwyer M. B., 1998, Proceedings of FMSP'98. Second Workshop on Formal Methods in Software Practice, P7, DOI 10.1145/298595.298598
   Egyed A, 2004, IEEE SOFTWARE, V21, P50, DOI 10.1109/MS.2004.40
   Fuxman A, 2004, REQUIR ENG, V9, P132, DOI 10.1007/s00766-004-0191-7
   Goldin L., 1997, Automated Software Engineering, V4, P375, DOI 10.1023/A:1008617922496
   Greenspan S., 1994, ICSE-16. 16th International Conference on Software Engineering (Cat. No.94CH3409-0), P135, DOI 10.1109/ICSE.1994.296773
   Grundy J, 1998, IEEE T SOFTWARE ENG, V24, P960, DOI 10.1109/32.730545
   Guarino N., 2009, HDB ONTOLOGIES, P1, DOI [DOI 10.1007/978-3-540-92673-30, 10.1007/978-3-540-92673-3_0, DOI 10.1007/978-3-540-92673-3_0]
   Henderson P., 2006, ACM Trans. Program. Lang. Syst, V15, P795
   Horridge Matthew., 2009, OWL 2 WEB ONTOLOGY L
   Kaiya H, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P223
   Kaiya H, 2010, ASIA PAC SOFWR ENG, P3, DOI 10.1109/APSEC.2010.11
   Kalyanpur A, 2006, J WEB SEMANT, V4, P144, DOI 10.1016/j.websem.2005.10.001
   Kamalrudin M., 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P327, DOI 10.1109/COMPSAC.2010.40
   KAZAKOV Y., 2008, Riq and sroiq shoiq
   Lauenroth K, 2008, INT REQUIR ENG CONF, P193, DOI 10.1109/RE.2008.21
   LEE JT, 1991, 13TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P114, DOI 10.1109/ICSE.1991.130629
   Maedche A, 2001, IEEE INTELL SYST APP, V16, P72, DOI 10.1109/5254.920602
   Mostow J., 1985, AI Magazine, V6, P44
   MYLOPOULOS J, 1992, IEEE T SOFTWARE ENG, V18, P483, DOI 10.1109/32.142871
   MYLOPOULOS J, 1990, ACM T INFORM SYST, V8, P325, DOI 10.1145/102675.102676
   Noy Natalya F, 2003, AMIA Annu Symp Proc, P953
   OMadadhain J., 2005, Journal of Statistical Software, V10, P1
   Pratt-Hartmann I., 2003, Journal of Logic, Language and Information, V12, P13, DOI 10.1023/A:1021149027971
   Pressman R.S., 2005, Software engineering: a Practitioner's Approach
   Robinson WN, 1999, IEEE T SOFTWARE ENG, V25, P816, DOI 10.1109/32.824411
   Ross DouglasT., 1977, IEEE T SOFTWARE ENG, VSE3
   Schwitter R, 2002, 13TH INTERNATIONAL WORKSHOP ON DATABASE AND EXPERT SYSTEMS APPLICATIONS, PROCEEDINGS, P228
   Schwitter Rolf., 2008, 4th OWL Experiences and Directions Workshop (OWLED 2008 DC), P1
   SISTLA AP, 1985, J ACM, V32, P733, DOI 10.1145/3828.3837
   Sommerville I., 2011, Software engineering
   Spanoudakis G, 2001, HDB SOFTWARE ENG KNO, VI, P329
   TSAI JJP, 1992, IEEE T SOFTWARE ENG, V18, P1076, DOI 10.1109/32.184762
   van Lamsweerde A, 2003, PROC INT CONF SOFTW, P744, DOI 10.1109/ICSE.2003.1201266
   van Lamsweerde A, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P249
   van Lamsweerde A., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P5, DOI 10.1109/ICSE.2000.870392
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P908, DOI 10.1109/32.730542
   Weston N, 2009, REQUIR ENG, V14, P247, DOI 10.1007/s00766-009-0083-y
   Yu E., 1993, PROC 1 IEEE INT S RE, P34
   Jaramillo CMZ, 2006, LECT NOTES ARTIF INT, V4293, P27
   Zave P., 1997, ACM Transactions on Software Engineering and Methodology, V6, P1, DOI 10.1145/237432.237434
NR 65
TC 31
Z9 32
U1 1
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2014
VL 22
IS 1
SI SI
BP 87
EP 119
DI 10.1007/s11219-013-9202-6
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB2SX
UT WOS:000331643500006
DA 2024-07-18
ER

PT J
AU Kessentini, M
   Mahaouachi, R
   Ghedira, K
AF Kessentini, Marouane
   Mahaouachi, Rim
   Ghedira, Khaled
TI What you like in design use to correct bad-smells
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software maintenance; Genetic algorithm; Refactoring
ID QUALITY
AB Over the past decades, many techniques and tools have been developed to support maintenance activities in order to improve software quality. One of the most efficient ones is software refactoring to eliminate bad-smells. A majority of existing work propose "standard" refactoring solutions that can be applied by hand for each kind of defect. However, it is difficult to prove or ensure the generality of these solutions to any kind of bad-smells or software codes. In this paper, we propose an approach to correct bad-smells using well-designed code. We use genetic algorithms to generate correction solutions defined as a combination of refactoring operations that maximize, as much as possible, the similarity between the corrected bad-smells and examples of well-designed code. We report the results of an evaluation of our approach using four open-source projects. Our proposal achieved high correction scores by fixing the majority of expected bad-smells.
C1 [Kessentini, Marouane] Missouri Univ Sci & Technol, CS, Rolla, MO USA.
   [Kessentini, Marouane] Missouri Univ Sci & Technol, Dept Comp Sci, Rolla, MO USA.
   [Mahaouachi, Rim; Ghedira, Khaled] Univ Tunis, SOIE, Tunis, Tunisia.
   [Ghedira, Khaled] Univ Tunis, ISG, Tunis, Tunisia.
C3 University of Missouri System; Missouri University of Science &
   Technology; University of Missouri System; Missouri University of
   Science & Technology; Universite de Tunis; Universite de Tunis
RP Kessentini, M (corresponding author), Missouri Univ Sci & Technol, CS, Rolla, MO USA.
EM kessentiniglp@yahoo.fr; rim.mahouachi@gmail.com;
   khaled.ghedira@isg.rnu.tn
CR Alikacem H., 2006, ACT 12 C LMO
   Belle T.V., 2002, GECCO 02, P1383
   BRATKO I, 1995, COMMUN ACM, V38, P65, DOI 10.1145/219717.219771
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Brudno M., 2004, THESIS STANFORD CA
   Dhambri K, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P279
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   Grant S, 2003, 1 INT WORKSHOP REFAC, P30
   Guéhéneuc YG, 2001, TOOLS, V39, P296, DOI 10.1109/TOOLS.2001.941682
   Harman M, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P58, DOI 10.1109/METRIC.2004.1357891
   HECKEL R, 1995, THESIS TU BERLIN
   Hong-hai Liu, 2012, 2012 International Conference on Systems and Informatics (ICSAI 2012), P265, DOI 10.1109/ICSAI.2012.6223612
   Izurieta C, 2013, SOFTWARE QUAL J, V21, P289, DOI 10.1007/s11219-012-9175-x
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kataoka Y, 2001, PROC IEEE INT CONF S, P736, DOI 10.1109/ICSM.2001.972794
   Kessentini M., 2010, P INT C AUT SOFTW EN
   Kessentini M, 2011, CONF PROC INT SYMP C, P81, DOI 10.1109/ICPC.2011.22
   Kessentini M, 2011, LECT NOTES COMPUT SC, V6603, P401, DOI 10.1007/978-3-642-19811-3_28
   Khomh F., 2009, P ICQS 09
   Kim Miryung, 2005, ESEC/FSE- 13), P187, DOI [10.1145/1081706.1081737, DOI 10.1145/1081706.1081737]
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Kothari SC, 2004, SOFTWARE QUAL J, V12, P99, DOI 10.1023/B:SQJO.0000024058.90885.6a
   Koza J.R., 1992, GENETIC PROGRAMMING, VVolume 1
   Lewerentz C., 1996, P IEEE S SOFTW METR
   Mantyla M., 2003, P ICSM 03 IEEE COMP
   Marinescu R., 2011, P ICM 04, P350
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Moha N., 2009, T SOFTWARE ENG TSE, P16
   Nanni L, 2008, EXPERT SYST APPL, V35, P1463, DOI 10.1016/j.eswa.2007.08.028
   O'Keeffe M, 2008, J SOFTW MAINT EVOL-R, V20, P345, DOI 10.1002/smr.378
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Raedt D., 1996, ADV INDUCTIVE LOGIC
   Sahraoui HA, 2000, PROC IEEE INT CONF S, P154, DOI 10.1109/ICSM.2000.883034
   Simon F, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P30, DOI 10.1109/CSMR.2001.914965
   Tahvildari L, 2004, J SOFTW MAINT EVOL-R, V16, P331, DOI 10.1002/smr.299
NR 36
TC 22
Z9 22
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2013
VL 21
IS 4
BP 551
EP 571
DI 10.1007/s11219-012-9187-6
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 209FT
UT WOS:000323741000002
DA 2024-07-18
ER

PT J
AU Vos, TEJ
   Lindlar, FF
   Wilmes, B
   Windisch, A
   Baars, AI
   Kruse, PM
   Gross, H
   Wegener, J
AF Vos, Tanja E. J.
   Lindlar, Felix F.
   Wilmes, Benjamin
   Windisch, Andreas
   Baars, Arthur I.
   Kruse, Peter M.
   Gross, Hamilton
   Wegener, Joachim
TI Evolutionary functional black-box testing in an industrial setting
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Evolutionary computation; Functional testing; Empirical assessment; Case
   study; Industrial practice; Test data generation
ID TEST-DATA GENERATION; SOFTWARE TEST
AB During the past years, evolutionary testing research has reported encouraging results for automated functional (i.e. black-box) testing. However, despite promising results, these techniques have hardly been applied to complex, real-world systems and as such, little is known about their scalability, applicability, and acceptability in industry. In this paper, we describe the empirical setup used to study the use of evolutionary functional testing in industry through two case studies, drawn from serial production development environments at Daimler and Berner & Mattner Systemtechnik, respectively. Results of the case studies are presented, and research questions are assessed based on them. In summary, the results indicate that evolutionary functional testing in an industrial setting is both scalable and applicable. However, the creation of fitness functions is time-consuming. Although in some cases, this is compensated by the results, it is still a significant factor preventing functional evolutionary testing from more widespread use in industry.
C1 [Vos, Tanja E. J.; Baars, Arthur I.] Univ Politecn Valencia, Res Ctr Software Prod Methods, Valencia, Spain.
   [Lindlar, Felix F.; Wilmes, Benjamin; Windisch, Andreas] Berlin Inst Technol, Daimler Ctr Automot IT Innovat, Berlin, Germany.
   [Kruse, Peter M.; Gross, Hamilton; Wegener, Joachim] Berner & Mattner Syst Tech GmbH, Berlin, Germany.
C3 Universitat Politecnica de Valencia; Daimler AG; Technical University of
   Berlin
RP Vos, TEJ (corresponding author), Univ Politecn Valencia, Res Ctr Software Prod Methods, Valencia, Spain.
EM tvos@pros.upv.es
FU EU [IST-33472]
FX This work is supported by EU grant IST-33472 (EvoTest). For their
   support and help, we would like to thank Mark Harman, Kiran Lakhotia and
   Youssef Hassoun from Kings College London; Marc Schoenauer and Luis da
   Costa from INRIA; Jochen Hansel from Fraunhofer FIRST; Dimitar Dimitrov
   and Ivaylo Spasov from RILA; and Dimitris Togias from European Dynamics.
CR [Anonymous], 2009, P GENETIC EVOLUTIONA
   [Anonymous], 1990, Software testing techniques {
   Arcuri A, 2008, LECT NOTES COMPUT SC, V5361, P61
   Baresel A, 2003, LECT NOTES COMPUT SC, V2724, P2428
   Briand Lionel C., 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P1
   Bühler O, 2008, COMPUT OPER RES, V35, P3144, DOI 10.1016/j.cor.2007.01.015
   Buhler O., 2004, J SOC AUTOMOTIVE ENG, P115, DOI 10.4271/2004-01-0459
   Chan B, 2004, IEEE C EVOL COMPUTAT, P125, DOI 10.1109/CEC.2004.1330847
   DaCosta L., 2008, P 10 ANN C GENETIC E, P913, DOI [DOI 10.1145/1389095.1389272, 10.1145/1389095.1389272]
   Fewster M., 1999, Software test automation: effective use of test execution tools
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Grochtmann M., 1998, P 2 INT SOFTW QUAL W
   Gros H. G., 2003, P INT C INF TECHN PR, V1, P8
   Gross H, 2009, IEEE ICST WORKSHOP, P111, DOI 10.1109/ICSTW.2009.38
   Harman M., 2002, P GEN EV COMP C GECC, P1233
   Holland J.H., 1992, Adaptation in Natural and Artificial Systems, DOI DOI 10.7551/MITPRESS/1090.001.0001
   Jones BF, 1996, SOFTWARE ENG J, V11, P299, DOI 10.1049/sej.1996.0040
   Juristo N, 2004, EMPIR SOFTW ENG, V9, P7, DOI 10.1023/B:EMSE.0000013513.48963.1b
   Keijzer M., 2001, EA 01 EVOLUTION ARTI, P231
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Klimke A., 2003, ACCESS MATLAB JAVA
   Kruse P.M., 2009, Proceedings of the 11th Annual conference on Genetic and evolutionary computation, P1545, DOI DOI 10.1145/1569901.1570108
   Lethbridge TC, 2005, EMPIR SOFTW ENG, V10, P311, DOI 10.1007/s10664-005-1290-x
   Lindlar Felix, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P163, DOI 10.1109/ICSTW.2010.10
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   McMinn P., 2011, P 4 INT WORKSH SEARC
   Mueller F, 1998, FOURTH IEEE REAL-TIME TECHNOLOGY AND APPLICATIONS SYMPOSIUM - PROCEEDINGS, P144, DOI 10.1109/RTTAS.1998.683198
   PARGAS RP, 1999, J SOFTWARE TESTING V, V9, P263
   Perry D. E., 2005, P 29 ANN IEEE NASA S, P96
   Perry DE., 2000, P C FUT SOFTW ENG, P345, DOI DOI 10.1145/336512.336586
   Pochhammer L., 1876, J FTUR REINE ANGEW M, V81, P324
   Sthamer H., 2002, P 2 AS PAC C SOFTW T
   Tfili M, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1917
   Tlili M., 2006, P C EV COMP CEC, P3227
   Tracey N, 2000, SOFTWARE PRACT EXPER, V30, P61, DOI 10.1002/(SICI)1097-024X(200001)30:1<61::AID-SPE292>3.0.CO;2-9
   Vos Tanja E. J., 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P175, DOI 10.1109/ICST.2010.24
   Wegener J., 1996, P 4 EUR INT C SOFTW
   Wegener J., 2002, P GENETIC EVOLUTIONA, P1233
   Windisch A, 2009, IEEE ICST WORKSHOP, P121, DOI 10.1109/ICSTW.2009.16
NR 39
TC 33
Z9 34
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2013
VL 21
IS 2
BP 259
EP 288
DI 10.1007/s11219-012-9174-y
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 114MX
UT WOS:000316746700003
DA 2024-07-18
ER

PT J
AU Shubati, A
   Dawson, CW
   Dawson, R
AF Shubati, Ahmad
   Dawson, Christian W.
   Dawson, Ray
TI Artefact generation in second life with case-based reasoning
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE Second life; Development methodology; Case-based reasoning
AB Launched in 2003, Second Life is a computer-based pseudo-environment accessed via the Internet. Although a number of individuals and companies have developed a presence (lands) in Second Life, there is no appropriate methodology in place for undertaking such developments. While some existing methods have been adapted by users to their individual needs, this paper explores the development of a method for developing lands specifically within Second Life. This method is based on case-based reasoning (CBR) as this method has a number of similarities with Second Life itself. A system was designed based on CBR with some modifications to work in accordance with Second Life. In this paper, the system and its modifications are discussed and its application to the development of space within Second Life is evaluated. From tracking its progress against previous specifications and future activity, an updated version of the CBR web tool component covering the latest changes and improvements in the tool is introduced here.
C1 [Shubati, Ahmad; Dawson, Christian W.; Dawson, Ray] Univ Loughborough, Dept Comp Sci, Loughborough, Leics, England.
C3 Loughborough University
RP Shubati, A (corresponding author), Univ Loughborough, Dept Comp Sci, Loughborough, Leics, England.
EM S.Ahmad@lboro.ac.uk
RI Dawson, Christian/A-8223-2018
OI Dawson, Christian/0000-0003-2357-0105; Shubita,
   Ahmad/0000-0001-7343-3649
CR AMODT A, 1994, ARTIF INTELL, V7, P39
   [Anonymous], CASE STUDIES
   [Anonymous], 2008, 7 things you should know about lecture capture
   Arens W., 2007, CONT ADVERTISING
   AZZARA M, 2007, VIRTUAL WORLDS  1101
   Cheetham W, 2007, AI MAG, V28, P89
   DEHUGO A, 2003, POST DOC
   Hobson N., 2007, Knowledge Management Review, V10, P5
   Kowalski Z, 2005, EXPERT SYST APPL, V29, P256, DOI 10.1016/j.eswa.2005.03.002
   MEISALO V, 2005, HAS PASSED TEXTBOOKS, V15
   POLISCHUK P, 2007, 2 LIFE OPTIONS OPPOR
   Rosen Yigal, 2007, Journal of Educational Computing Research, V36, P1, DOI 10.2190/R8M4-7762-282U-554J
NR 12
TC 1
Z9 1
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 431
EP 446
DI 10.1007/s11219-010-9125-4
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500009
DA 2024-07-18
ER

PT J
AU Kastro, Y
   Bener, AB
AF Kastro, Yomi
   Bener, Ayse Basar
TI A defect prediction method for software versioning
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software defects; Defect prediction; Neural networks
ID FAULTS; CRITIQUE; MODEL
AB New methodologies and tools have gradually made the life cycle for software development more human-independent. Much of the research in this field focuses on defect reduction, defect identification and defect prediction. Defect prediction is a relatively new research area that involves using various methods from artificial intelligence to data mining. Identifying and locating defects in software projects is a difficult task. Measuring software in a continuous and disciplined manner provides many advantages such as the accurate estimation of project costs and schedules as well as improving product and process qualities. This study aims to propose a model to predict the number of defects in the new version of a software product with respect to the previous stable version. The new version may contain changes related to a new feature or a modification in the algorithm or bug fixes. Our proposed model aims to predict the new defects introduced into the new version by analyzing the types of changes in an objective and formal manner as well as considering the lines of code (LOC) change. Defect predictors are helpful tools for both project managers and developers. Accurate predictors may help reducing test times and guide developers towards implementing higher quality codes. Our proposed model can aid software engineers in determining the stability of software before it goes on production. Furthermore, such a model may provide useful insight for understanding the effects of a feature, bug fix or change in the process of defect detection.
C1 [Kastro, Yomi; Bener, Ayse Basar] Bogazici Univ, Dept Comp Engn, TR-34342 Bebek, Turkey.
C3 Bogazici University
RP Kastro, Y (corresponding author), Bogazici Univ, Dept Comp Engn, TR-34342 Bebek, Turkey.
EM kastro@boun.edu.tr; bener@boun.edu.tr
RI Basar, Ayse/ABF-9265-2020
OI Basar, Ayse/0000-0003-4934-8326
FU Bogazici University [BAP-06HA104]
FX This work is supported in part by the Bogazici University research fund
   under grant number BAP-06HA104. Special thanks to our colleague Burak
   Turhan for his valuable comments on the manuscript. We would also thank
   Ms Cigdem Aksoy Fromm who has done the final editing of the manuscript.
CR Alpaydin E, 2004, INTRO MACHINE LEARNI
   [Anonymous], 2004, P WORKSH PRED SOFTW
   BARRY M. J., 1997, DATA MINING TECHNIQU
   Bishop C. M., 1995, NEURAL NETWORKS PATT
   Boehm B., 1995, Annals of Software Engineering, V1, P57, DOI 10.1007/BF02249046
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Boehm B, 2000, COMPUTER, V33, P27, DOI 10.1109/MC.2000.841781
   BOWEN JP, 1995, IEEE SOFTWARE, V12, P34, DOI 10.1109/52.391826
   BRILLIANT SS, 1990, IEEE T SOFTWARE ENG, V16, P238, DOI 10.1109/32.44387
   BRUN Y, 2004, 26 INT C SOFTW ENG
   CEYLAN E, 2006, 32 EUR C SOFTW ENG A
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Coppit D, 2005, IEEE T SOFTWARE ENG, V31, P328, DOI 10.1109/TSE.2005.52
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Gregoriades A, 2005, IEEE T SOFTWARE ENG, V31, P392, DOI 10.1109/TSE.2005.59
   GROCE P, 2003, 10 INT SPIN WORKSH M, P121
   Harrold M. J., 2000, P C FUT SOFTW ENG LI
   Inoue K, 2005, IEEE T SOFTWARE ENG, V31, P213, DOI 10.1109/TSE.2005.38
   Jensen FV, 1996, INTRO BAYESIAN NETWO
   Johnson PM, 2005, IEEE SOFTWARE, V22, P76, DOI 10.1109/MS.2005.95
   Jorgensen M, 2005, IEEE SOFTWARE, V22, P57, DOI 10.1109/MS.2005.73
   Khoshgoftaar T. M., 1999, Empirical Software Engineering, V4, P159, DOI 10.1023/A:1009876418873
   Koru AG, 2005, IEEE SOFTWARE, V22, P23, DOI 10.1109/MS.2005.149
   KUNG D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P202, DOI 10.1109/ICSM.1994.336774
   Menzies T., 2002, P 27 NASA SEL WORKSH
   MENZIES T, 2003, P 9 INT SOFTW METR S
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Mitchell T. M., 1997, MACHINE LEARNING
   MUNSON JC, 1990, INFORM SOFTWARE TECH, V32, P106, DOI 10.1016/0950-5849(90)90109-5
   NAGAPPAN N, 2005, STATIC ANAL TOOLS EA
   NAGAPPAN N, 2005, INT S SOFTW REL ENG
   Nagappan N., 2005, USE RELATIVE CODE CH
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Padberg F, 2004, IEEE T SOFTWARE ENG, V30, P17, DOI 10.1109/TSE.2004.1265733
   Pendharkar PC, 2005, IEEE T SOFTWARE ENG, V31, P615, DOI 10.1109/TSE.2005.75
   PODGURSKI D, 2003, AUTOMATED SUPPORT CL
   PORTER A, 2004, EMPIR SOFTW ENG, V3, P355
   SARLE W, 1996, NEURAL NETS FAQ
   SHEPPERD M, 1994, J SYST SOFTWARE, V26, P197, DOI 10.1016/0164-1212(94)90011-6
   Song QB, 2006, IEEE T SOFTWARE ENG, V32, P69, DOI 10.1109/TSE.2006.1599417
   SONTAG ED, 1992, IEEE T NEURAL NETWOR, V3, P981, DOI 10.1109/72.165599
   Swingler K., 1996, Applying neural networks: a practical guide
   Tahat LH, 2001, P INT COMP SOFTW APP, P489, DOI 10.1109/CMPSAC.2001.960658
   Vaidyanathan K, 2005, IEEE T DEPEND SECURE, V2, P124, DOI 10.1109/TDSC.2005.15
   Zhang D, 2000, P 2000 MONT WORKSH M
NR 46
TC 20
Z9 26
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2008
VL 16
IS 4
BP 543
EP 562
DI 10.1007/s11219-008-9053-8
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 379QY
UT WOS:000261412500005
DA 2024-07-18
ER

PT J
AU Kuo, FC
   Chen, TY
   Liu, H
   Chan, WK
AF Kuo, Fei-Ching
   Chen, Tsong Yueh
   Liu, Huai
   Chan, Wing Kwong
TI Enhancing adaptive random testing for programs with high dimensional
   input domains or failure-unrelated parameters
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 22nd ACM Symposium on Applied Computing
CY MAR 11-15, 2007
CL Seoul, SOUTH KOREA
SP ACM
DE software testing; random testing; adaptive random testing;
   fixed-sized-candidate-set ART; high dimension problem; failure-unrelated
   parameters
AB Adaptive random testing (ART), an enhancement of random testing (RT), aims to both randomly select and evenly spread test cases. Recently, it has been observed that the effectiveness of some ART algorithms may deteriorate as the number of program input parameters (dimensionality) increases. In this article, we analyse various problems of one ART algorithm, namely fixed-sized-candidate-set ART (FSCS-ART), in the high dimensional input domain setting, and study how FSCS-ART can be further enhanced to address these problems. We propose to add a filtering process of inputs into FSCS-ART to achieve a more even-spread of test cases and better failure detection effectiveness in high dimensional space. Our study shows that this solution, termed as FSCS-ART-FE, can improve FSCS-ART not only in the case of high dimensional space, but also in the case of having failure-unrelated parameters. Both cases are common in real life programs. Therefore, we recommend using FSCS-ART-FE instead of FSCS-ART whenever possible. Other ART algorithms may face similar problems as FSCS-ART; hence our study also brings insight into the improvement of other ART algorithms in high dimensional space.
C1 [Kuo, Fei-Ching; Chen, Tsong Yueh; Liu, Huai] Swinburne Univ Technol, Fac Informat & Commun Technol, Hawthorn, Vic 3122, Australia.
   [Chan, Wing Kwong] City Univ Hong Kong, Dept Comp Sci, Hong Kong, Hong Kong, Peoples R China.
C3 Swinburne University of Technology; City University of Hong Kong
RP Kuo, FC (corresponding author), Swinburne Univ Technol, Fac Informat & Commun Technol, Hawthorn, Vic 3122, Australia.
EM dkuo@ict.swin.edu.au
RI Chan, Wah Kheong/AGA-6636-2022; Liu, Huai/M-4871-2019; Liu,
   Huai/E-2060-2013
OI Chan, Wah Kheong/0000-0002-9105-5837; Liu, Huai/0000-0003-3125-4399;
   Liu, Huai/0000-0003-3125-4399; Chan, Wing Kwong/0000-0001-7726-6235;
   Chen, Tsong/0000-0003-3578-0994
CR AMMANN PE, 1988, IEEE T COMPUT, V37, P418, DOI 10.1109/12.2185
   [Anonymous], 2005, P 17 INT C SOFTW ENG
   Bellman R., 1957, Dynamic programming
   BIRD DL, 1983, IBM SYST J, V22, P229, DOI 10.1147/sj.223.0229
   Bishop P. G., 1993, P 23 INT S FAULT TOL, P98
   Branicky MS, 2001, IEEE INT CONF ROBOT, P1481, DOI 10.1109/ROBOT.2001.932820
   Chan KP, 2006, INT J SOFTW ENG KNOW, V16, P553, DOI 10.1142/S0218194006002926
   Chen T. Y., 2007, P 9 INT C SOFTW ENG, P141
   Chen TY, 2006, J SYST SOFTWARE, V79, P591, DOI 10.1016/j.jss.2005.05.029
   Chen TY, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1363102.1363107
   Chen TY, 2004, INFORM SOFTWARE TECH, V46, P1001, DOI 10.1016/j.infsof.2004.07.004
   Chen TY, 2001, J SYST SOFTWARE, V58, P65, DOI 10.1016/S0164-1212(01)00028-0
   COBB RH, 1990, IEEE SOFTWARE, V7, P44, DOI 10.1109/52.60601
   Dabóczi TL, 2003, IEEE IMTC P, P441
   FINELLI GB, 1991, RELIAB ENG SYST SAFE, V32, P155, DOI 10.1016/0951-8320(91)90052-9
   Forrester JE, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE 4TH UNSENIX WINDOWS SYSTEMS SYMPOSIUM, P59
   Godefroid Patrice, 2005, ACM SIGPLAN NOTICES, P213, DOI DOI 10.1145/1064978.1065036
   Hamlet Richard., 2002, Encyclopedia of software Engineering
   KUO FC, 2007, P 22 ANN ACM S APPL, P1467
   MAK IK, 1997, THESIS U MELBOURNE
   Matsumoto M., 1998, ACM Transactions on Modeling and Computer Simulation, V8, P3, DOI 10.1145/272991.272995
   Mayer J., 2005, P 20 IEEEACM INT C A, P333, DOI DOI 10.1145/1101908
   MILLER BARTON., 1995, FUZZ revisited: A reexamination of the reliability of UNIX utilities and services
   MILLER BP, 1990, COMMUN ACM, V33, P32, DOI 10.1145/96267.96279
   MILLER E, 2005, WEBSITE TESTING
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   NYMAN N, DEFENSE MONKEY TESTI
   Regehr J, 2005, P 5 ACM INT C EMB SO, P290
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Slutz D., 1998, Proceedings of the Twenty-Fourth International Conference on Very-Large Databases, P618
   Yoshikawa T, 2003, THIRD INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P20, DOI 10.1109/QSIC.2003.1319081
NR 31
TC 14
Z9 15
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2008
VL 16
IS 3
BP 303
EP 327
DI 10.1007/s11219-008-9047-6
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330RE
UT WOS:000257959700003
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Jia, XP
   Steele, A
   Qin, L
   Liu, HM
   Jones, C
AF Jia, Xiaoping
   Steele, Adam
   Qin, Lizhang
   Liu, Hongming
   Jones, Chris
TI Executable visual software modeling - the ZOOM approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT International Conference on Software Engineering Research and Practice
   (SERP 05)
CY JUN 27-29, 2005
CL Las Vegas, NV
SP CSREA, Int Technol Inst, World Acad Sci & Informat Technol, HPCwire, GRIDtoday
DE visual modeling; UML; model integration; model animation
AB In this paper, we introduce a new executable visual software modeling approach called ZOOM (Z-Based Object Oriented Modeling). ZOOM extends a subset of UML-2 notations by providing UI modeling notations and a formal integration mechanism. ZOOM allows software modeling using both graphical and textual views for its structural, behavioral and UI models. Through a pre-defined event model, ZOOM integrates these models, and provides the runtime execution semantics for both code generation and software animation.
C1 Depaul Univ, Sch Comp Sci Telecommun & Informat Syst, Chicago, IL 60604 USA.
C3 DePaul University
RP Jia, XP (corresponding author), Depaul Univ, Sch Comp Sci Telecommun & Informat Syst, Chicago, IL 60604 USA.
EM xjia@cs.depaul.edu; asteele@cs.depaul.edu; lqin@cs.depaul.edu;
   jordan@cs.depaul.edu; cjones@cs.depaul.edu
CR AGRAWAL A, 2002, OOPSLA WORKSH GEN TE
   [Anonymous], 1992, The Z Notation
   [Anonymous], 1997, Object-oriented software construction
   Buschmann Frank., PATTERN ORIENTED SOF
   CARLSEN NV, 1989, PROCEEDINGS OF THE ACM SIGGRAPH SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P133, DOI 10.1145/73660.73677
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   da Silva PP, 2003, IEEE SOFTWARE, V20, P62, DOI 10.1109/MS.2003.1207457
   DUPUY S, 1997, P BCS FACS EROS ROOM
   FRANCE RB, 1997, P 2 IFIP C FORM METH, P247
   Ho WM, 2000, TECHNOLOGY OF OBJECT-ORIENTED LANGUAGES - TOOLS 33, PROCEEDINGS, P324, DOI 10.1109/TOOLS.2000.848772
   JIA X, 2004, ZOOM NOTATION REFERE
   Jia XP, 1995, P INT COMP SOFTW APP, P108, DOI 10.1109/CMPSAC.1995.524767
   Kohler H. J., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P241, DOI 10.1109/ICSE.2000.870415
   LOPES C, 1995, SEPARATION TECHNICAL
   MEYER B, 1992, APPL DESIGN CONTRACT, V25, P40
   MILLER J, 2001, MOD DRIV ARCH MDA
   *OBJ MAN GROUP, UML 2 0 SUP SPEC
   ROBERT BFG, 2006, COMPUTER, V39, P59
   Rumbaugh J., 1991, OBJECT ORIENTED MODE
   STEPHEN M, 2002, EXECUTABLE UML FDN M
   Warmer J., 1999, AW OBJ TECHNOL S
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   WORDSWORTH JB, 1992, SOFTWARE DEV Z
NR 23
TC 9
Z9 12
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2007
VL 15
IS 1
BP 27
EP 51
DI 10.1007/s11219-006-9002-3
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 132FD
UT WOS:000243927000004
DA 2024-07-18
ER

PT J
AU Antoniol, G
   Di Penta, M
   Masone, G
   Villano, U
AF Antoniol, G
   Di Penta, M
   Masone, G
   Villano, U
TI Compiler hacking for source code analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 3rd IEEE International Workshop on Source Code Analysis and Manipulation
CY SEP 26-27, 2003
CL AMSTERDAM, NETHERLANDS
SP IEEE Comp Soc, TC Software Engn, Netherlands Org Sci Res, Royal Netherlands Acad Arts & Sci
DE source code analysis tools; gcc; XML; GXL
AB Many activities related to software quality assessment and improvement, such as empirical model construction, data flow analysis, testing or reengineering, rely on static source code analysis as the first and fundamental step for gathering the necessary input information. In the past, two different strategies have been adopted to develop tool suites. There are tools encompassing or implementing the source parse step, where the parser is internal to the toolkit, and is developed and maintained with it. A different approach builds tools on the top of external already-available components such as compilers that output the program abstract syntax tree, or that make it available via an API.
   This paper discusses techniques, issues and challenges linked to compiler patching or wrapping for analysis purposes. In particular, different approaches for accessing the compiler parsing information are compared, and the techniques used to decouple the parsing front end from the analysis modules are discussed.
   Moreover, the paper presents an approach and a tool, XOgastan, developed exploiting the gcc/g++ ability to save a representation of the intermediate abstract syntax tree. XOgastan translates the gcc/g++ dumped abstract syntax tree format into a Graph eXchange Language representation, which makes it possible to take advantage of currently available XML tools for any subsequent analysis step. The tool is illustrated and its design discussed, showing its architecture and the main implementation choices made.
C1 Univ Sannio, Res Ctr Software Technol, Dept Engn, I-82100 Benevento, Italy.
   Telsey Telecommun SpA, I-82100 Benevento, Italy.
C3 University of Sannio
RP Univ Sannio, Res Ctr Software Technol, Dept Engn, Via Traiano, I-82100 Benevento, Italy.
EM antoniol@ieee.org; dipenta@unisannio.it; gianluca.masone@telsey.it;
   villano@unisannio.it
RI Di Penta, Massimiliano/AAF-9656-2021
OI Di Penta, Massimiliano/0000-0002-0340-9747
CR AIGNER G, 1999, BASIC SUIF PROGRAMMI
   [Anonymous], 1998, Modern Compiler Implementation in C
   Antoniol G, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P173, DOI 10.1109/SCAM.2003.1238043
   Antoniol G, 2003, PROG COMPREHEN, P13
   Antoniol G, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P72, DOI 10.1109/ICSM.1997.624233
   AVERSANO L, 2002, INT WORKSH SOURC COD, P83
   BAXTER ID, 1992, COMMUNICATIONS ASS, V35
   *BELL CAN, 1995, DATR TOOL SOFTW EV
   Chen YF, 1998, IEEE T SOFTWARE ENG, V24, P682, DOI 10.1109/32.713323
   CIMPRICH P, 2002, STREAMING TRANSFORMA
   Collard ML, 2003, PROG COMPREHEN, P134
   CORDY JR, 1996, INFORMATION SOFTWARE, V44, P27
   CORDY JR, 1988, INT C COMP LANG, P280
   DEAN TR, 2001, P IEEE WORK C REV EN
   Ferenc R, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P49, DOI 10.1109/WCRE.2001.957809
   FERENC R, 2001, S PROGR LANG SOFTW T, P16
   FERENC R, 2001, P IEEE WORK C REV EN
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Hanson D.R., 1995, A Retargetable C Compiler: Design and Implementation
   HENDREN LJ, 1992, LECT NOTES COMPU AUG, P406
   Hennessy M, 2003, PROG COMPREHEN, P298
   HOLT R, 2000, P IEEE WORK C REV EN
   Hu Y, 2000, PROC IEEE INT CONF S, P196
   KARASICK M, 1998, ACM SIGSOFT SOFTWARE, V23, P131
   KOSCHKE R, P IEEE WORK C REV EN
   KOUTSOFIOS E, 1994, EDITING GRAPHS DOTTY
   Lague B, 1998, PROG COMPREHEN, P37, DOI 10.1109/WPC.1998.693281
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   LIEFKE H, 2000, XMILL EFFICIENT COMP
   LYLE JR, 1995, 5691 NISTIR US DEP C
   Mamas E, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P172, DOI 10.1109/WCRE.2000.891464
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   *OBJ MAN GROUP, 2001, OBJ CONSTR LANG SPEC
   *REAS SYST, 1993, REF US GUID
   REISS SP, 2004, CPPP PROJECT
   SHAVOR S, 1995, JAVA DEV GUIDE ECLIP
   WARD M, 1989, THESIS OXFORD U
   WINTER A, 2001, 92001 U KOBL LAND I
NR 38
TC 5
Z9 8
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2004
VL 12
IS 4
BP 383
EP 406
DI 10.1023/B:SQJO.0000039794.29432.7e
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 850EE
UT WOS:000223593200007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Batool, I
   Khan, TA
AF Batool, Iqra
   Khan, Tamim Ahmed
TI Software fault prediction using deep learning techniques
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software fault prediction; LSTM; BILSTM; RBFN; Performance evaluation
   metrics
ID ARTIFICIAL NEURAL-NETWORK; DEFECT PREDICTION; FEATURE-SELECTION;
   METRICS; LSTM; ALGORITHMS; IMPACT
AB Software fault prediction (SFP) techniques identify faults at the early stages of the software development life cycle (SDLC). We find machine learning techniques commonly used for SFP compared to deep learning methods, which can produce more accurate results. Deep learning offers exceptional results in various domains, such as computer vision, natural language processing, and speech recognition. In this study, we use three deep learning methods, namely, long short-term memory (LSTM), bidirectional LSTM (BILSTM), and radial basis function network (RBFN) to predict software faults and compare our results with existing models to show how our results are more accurate. Our study uses Chidamber and Kemerer (CK) metrics-based datasets to conduct experiments and test our proposed algorithm. We conclude that LSTM and BILSTM perform better, whereas RBFN is faster in producing the required results. We use k-fold cross-validation to do the model evaluation. Our proposed models provide software developers with a more accurate and efficient SFP mechanism.
C1 [Batool, Iqra; Khan, Tamim Ahmed] Bahria Univ, Dept Software Engn, Islamabad, Pakistan.
RP Khan, TA (corresponding author), Bahria Univ, Dept Software Engn, Islamabad, Pakistan.
EM 01-241201-006@student.bahria.edu.pk; tamim@bahria.edu.pk
OI Khan, Tamim/0000-0002-8209-6100; Batool, Iqra/0000-0003-1518-0334
CR Akour M., 2020, Indonesian Journal of Electrical Engineering and Computer Science, V19, P387
   Al Qasem Osama, 2019, International Journal of Open Source Software and Processes, V10, P1, DOI 10.4018/IJOSSP.2019100101
   Al Qasem O, 2020, IEEE ACCESS, V8, P63945, DOI 10.1109/ACCESS.2020.2985290
   Ali A, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2367
   Ali Haad, 2019, 2019 International Conference on Frontiers of Information Technology (FIT), P357, DOI 10.1109/FIT47737.2019.00073
   Phan AV, 2017, 2017 21ST ASIA PACIFIC SYMPOSIUM ON INTELLIGENT AND EVOLUTIONARY SYSTEMS (IES), P37, DOI 10.1109/IESYS.2017.8233558
   Aziz SR, 2021, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.563
   Aziz SR, 2020, IEEE ACCESS, V8, P170548, DOI 10.1109/ACCESS.2020.3022087
   Aziz SR, 2019, IEEE ACCESS, V7, P85262, DOI 10.1109/ACCESS.2019.2924040
   Batool I, 2022, COMPUT ELECTR ENG, V100, DOI 10.1016/j.compeleceng.2022.107886
   Borandag E, 2019, COMPUT SCI INF SYST, V16, P515, DOI 10.2298/CSIS180312039B
   Boucher A, 2018, INFORM SOFTWARE TECH, V96, P38, DOI 10.1016/j.infsof.2017.11.005
   Bowes D, 2018, SOFTWARE QUAL J, V26, P525, DOI 10.1007/s11219-016-9353-3
   Cai XJ, 2020, CONCURR COMP-PRACT E, V32, DOI 10.1002/cpe.5478
   Catal C, 2011, EXPERT SYST APPL, V38, P2347, DOI 10.1016/j.eswa.2010.08.022
   Chao MA, 2019, INT J PROGN HEALTH M, V10
   Chatterjee S, 2017, NEURAL COMPUT APPL, V28, pS1221, DOI 10.1007/s00521-016-2437-y
   Dam H. K., 2018, ARXIV
   Erturk E, 2016, APPL SOFT COMPUT, V49, P1020, DOI 10.1016/j.asoc.2016.08.025
   Fan GS, 2019, SCI PROGRAMMING-NETH, V2019, DOI 10.1155/2019/6230953
   Farhadi F., 2017, Learning activation functions in deep neural networks
   Gao KH, 2011, SOFTWARE PRACT EXPER, V41, P579, DOI 10.1002/spe.1043
   Han J., 2022, Data mining: concepts and techniques
   Huda S, 2018, IEEE ACCESS, V6, P2844, DOI 10.1109/ACCESS.2017.2785445
   Jayanthi R, 2019, CLUSTER COMPUT, V22, P77, DOI 10.1007/s10586-018-1730-1
   Jin C, 2012, IET SOFTW, V6, P479, DOI 10.1049/iet-sen.2011.0138
   Jin C, 2015, APPL SOFT COMPUT, V35, P717, DOI 10.1016/j.asoc.2015.07.006
   Jones Capers, 2011, The Economics of Software Quality
   Jothi R, 2018, PROCEEDINGS OF THE 2018 SECOND INTERNATIONAL CONFERENCE ON INTELLIGENT COMPUTING AND CONTROL SYSTEMS (ICICCS), P741, DOI 10.1109/ICCONS.2018.8663154
   Karlik B., 2011, INT J ARTIF INTELL E, V1, P111, DOI DOI 10.1088/1742-6596/1237/2/022030
   Kingma D. P., 2014, arXiv
   Li J, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P318, DOI 10.1109/QRS.2017.42
   Li Xiang, 2023, IEEE/CAA Journal of Automatica Sinica, P121, DOI 10.1109/JAS.2022.105935
   Liang HL, 2019, IEEE ACCESS, V7, P83812, DOI 10.1109/ACCESS.2019.2925313
   Lin GJ, 2018, IEEE T IND INFORM, V14, P3289, DOI 10.1109/TII.2018.2821768
   Malhotra R, 2015, EXPERT SYST, V32, P203, DOI 10.1111/exsy.12078
   Malhotra R, 2012, J INF PROCESS SYST, V8, P241, DOI 10.3745/JIPS.2012.8.2.241
   Manjula C, 2019, CLUSTER COMPUT, V22, pS9847, DOI 10.1007/s10586-018-1696-z
   Mercioni M. A., 2019, IJACSA INT J ADV COM, V10
   Nevendra M, 2021, ACTA POLYTECH HUNG, V18, P173
   Padhy N, 2018, SMART INNOV SYST TEC, V77, P431, DOI 10.1007/978-981-10-5544-7_42
   Peng SL, 2017, WIRELESS OPTIC COMM
   Pornprasit Chanathip, 2022, IEEE Transactions on Software Engineering
   Radjenovic D, 2013, INFORM SOFTWARE TECH, V55, P1397, DOI 10.1016/j.infsof.2013.02.009
   Rathore Santosh Singh, 2016, ACM SIGSOFT Software Engineering Notes, V41, P1, DOI 10.1145/2853073.2853083
   Rosli M. M., 2011, INT C COMP SOFTW MOD, P71
   Rusk N, 2016, NAT METHODS, V13, P35, DOI 10.1038/nmeth.3707
   Sandhu PS., 2010, WORLD ACAD SCI ENG T, V72, P654
   Schmidhuber J, 2015, NEURAL NETWORKS, V61, P85, DOI 10.1016/j.neunet.2014.09.003
   Shaik A., 2012, INT J COMPUTER APPL, V37, P6
   Sharma A., 2012, GLOBAL J COMPUTER SC, V12, P47
   Siami-Namini S, 2019, IEEE INT CONF BIG DA, P3285, DOI 10.1109/BigData47090.2019.9005997
   Singh P., 2011, International Journal of Computer Applications, V28, P13, DOI DOI 10.5120/3409-4756
   Singh P, 2017, IEEE T SYST MAN CY-S, V47, P826, DOI 10.1109/TSMC.2016.2521840
   Singh Y., 2011, SOFTWARE TESTING, DOI [10.1017/CBO9781139196185, DOI 10.1017/CBO9781139196185]
   Snuverink I., 2017, THESIS FACULTY MECH
   Srivastava N, 2014, J MACH LEARN RES, V15, P1929
   Suresh Y., 2014, INT SCHOLARLY RES NO, V2014
   Suresh Y, 2012, PROC TECH, V1, P420, DOI 10.1016/j.protcy.2012.10.050
   Suri Bharti, 2015, 2015 4th International Conference on Reliability, Infocom Technologies and Optimization (ICRITO) (Trends and Future Directions), P1, DOI 10.1109/ICRITO.2015.7359254
   Thong Hoang, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P34, DOI 10.1109/MSR.2019.00016
   Turabieh H, 2019, EXPERT SYST APPL, V122, P27, DOI 10.1016/j.eswa.2018.12.033
   Uddin MN, 2022, SOFT COMPUT, V26, P7877, DOI 10.1007/s00500-022-06830-5
   Verma S, 2020, ADV INTELL SYST COMP, V978, P161, DOI 10.1007/978-3-030-36056-6_16
   Wahono RS, 2014, ADV SCI LETT, V20, P239, DOI 10.1166/asl.2014.5283
   Wan ZY, 2020, IEEE T SOFTWARE ENG, V46, P1241, DOI 10.1109/TSE.2018.2877678
   Wang H, 2021, IEEE T RELIAB, V70, P711, DOI 10.1109/TR.2020.3047396
   Wang S, 2020, IEEE T SOFTWARE ENG, V46, P1267, DOI 10.1109/TSE.2018.2877612
   Wu Y., 2012, INT SCHOLARLY RES NO
   Xu JZ, 2021, IMPACT ASSESS PROJ A, V39, P429, DOI [10.1109/TR.2020.3040191, 10.1080/14615517.2020.1848242]
   Yo Liguo., 2012, I.J. Information Technology and Computer Science, V8, P63
   Yu Q, 2019, IEEE ACCESS, V7, P35710, DOI 10.1109/ACCESS.2019.2895614
   Yu Y, 2019, NEURAL COMPUT, V31, P1235, DOI 10.1162/neco_a_01199
   Zhang C., 2019, IEEE COMMUNICATIONS, V1
   Zhang W, 2023, RELIAB ENG SYST SAFE, V229, DOI 10.1016/j.ress.2022.108885
   Zheng J, 2010, EXPERT SYST APPL, V37, P4537, DOI 10.1016/j.eswa.2009.12.056
NR 76
TC 3
Z9 3
U1 8
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1241
EP 1280
DI 10.1007/s11219-023-09642-4
EA JUN 2023
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001000757600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Granata, D
   Rak, M
AF Granata, Daniele
   Rak, Massimiliano
TI Systematic analysis of automated threat modelling techniques: Comparison
   of open-source tools
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Security; Automated threat modelling; Security assessment; Threat
   modelling tools
AB Companies face increasing pressure to protect themselves and their customers from security threats. Security by design is a proactive approach that builds security into all aspects of a system from the ground up, rather than adding it on as an afterthought. By taking security into account at every stage of development, organizations can create systems that are more resistant to attacks and better able to recover from them if they do occur. One of the most relevant practices is threat modelling, i.e. the process of identifying and analysing the security threat to an information system, application, or network. These processes require security experts with high skills to anticipate possible issues: therefore, it is a costly task and requires a lot of time. To face these problems, many different automated threat modelling methodologies are emerging. This paper first carries out a systematic literature review (SLR) aimed at both having an overview of the automated threat modelling techniques used in literature and enumerating all the tools that implement these techniques. Then, an analysis was carried out considering four open-source tools and a comparison with our threat modelling approach using a simple, but significant case study: an e-commerce site developed on top of WordPress.
C1 [Granata, Daniele; Rak, Massimiliano] Univ Campania Luigi Vanvitelli, Dept Engn, Via Roma 29, I-81031 Aversa, CE, Italy.
C3 Universita della Campania Vanvitelli
RP Granata, D (corresponding author), Univ Campania Luigi Vanvitelli, Dept Engn, Via Roma 29, I-81031 Aversa, CE, Italy.
EM daniele.granata@unicampania.it; massimiliano.rak@unicampania.it
RI Rak, Massimiliano/A-5332-2009; Granata, Daniele/JYQ-5981-2024
OI Rak, Massimiliano/0000-0001-6708-4032; Granata,
   Daniele/0000-0002-6776-9485
FU Universita degli Studi della Campania Luigi Vanvitelli within the
   CRUI-CARE Agreement; University of Campania
FX Open access funding provided by Universita degli Studi della Campania
   Luigi Vanvitelli within the CRUI-CARE Agreement. This work was partially
   supported by project SSeCeGOV funded by University of Campania under
   program Valere 2020
CR Abela R., 2020, STAT SHOW WHY WORDPR
   AbuEmera E. A., 2022, 2022 2 INT C CONS EL, P605, DOI [10.1109/ICCECE54139.2022.9712770, DOI 10.1109/ICCECE54139.2022.9712770]
   Almubairik NA, 2016, INT CONF INTERNET, P413, DOI 10.1109/ICITST.2016.7856742
   Althar RR, 2022, IEEE ACCESS, V10, P90597, DOI 10.1109/ACCESS.2022.3185069
   Alwaheidi MKS, 2022, SENSORS-BASEL, V22, DOI 10.3390/s22155726
   [Anonymous], 2020, THREAT AG
   [Anonymous], 2012, P 27 ANN ACM S APPL
   Ansari MTJ, 2022, J KING SAUD UNIV-COM, V34, P191, DOI 10.1016/j.jksuci.2018.12.005
   ASIF M, 2021, 2021 SUSTAINABLE LEA, P1, DOI DOI 10.1109/SLAE54202.2021.9788081
   Bernsmed K, 2022, J SYST SOFTWARE, V183, DOI 10.1016/j.jss.2021.111090
   Bhattacharya D., 2020, OWASP THREAT DRAGON
   Brown S., 2022, SN COMPUTER SCI, V3, DOI [10.1007/s42979-022-01021-3, DOI 10.1007/S42979-022-01021-3]
   Casola V, 2021, PROCEEDINGS OF THE 2021 IEEE INTERNATIONAL CONFERENCE ON CYBER SECURITY AND RESILIENCE (IEEE CSR), P135, DOI 10.1109/CSR51186.2021.9527937
   Casola V, 2019, INTERNET THINGS-NETH, V7, DOI 10.1016/j.iot.2019.100056
   Chen YT, 2019, INVENTIONS-BASEL, V4, DOI 10.3390/inventions4030053
   Chen YT, 2018, IEEE INT C SM E GR E, P128, DOI 10.1109/SEGE.2018.8499431
   Curzi S., 2020, THREAT MANAGER STUDI
   Danielis P, 2020, P INT COMP SOFTW APP, P499, DOI 10.1109/COMPSAC48688.2020.0-203
   De Faveri C, 2016, PROC INT SYMP SOFTW, P264, DOI 10.1109/ISSRE.2016.44
   DeMarco T., 1979, STRUCTURED ANAL SYST
   Ding Jianguo, 2017, ACM SIGMETRICS Performance Evaluation Review, V45, P129, DOI 10.1145/3152042.3152080
   DOMINIC D, 2016, RISK ASSESSMENT COOP, P47, DOI DOI 10.1145/2994487.2994499
   Fabbri S, 2016, PROCEEDINGS OF THE 20TH INTERNATIONAL CONFERENCE ON EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING 2016 (EASE '16), DOI 10.1145/2915970.2916013
   Faily S., 2018, DESIGNING USABLE SEC
   Ficco M., 2021, Quality of Information and Communications Technology, P282
   FraserScott M. R., 2019, ABOUT US
   Frydman M, 2014, SCI WORLD J, DOI 10.1155/2014/805856
   Goodwin M., 2020, OWASP THREAT DRAGON
   Granata D., 2021, SECURITY IOT PAIRING, V2490, P207
   Granata D, 2022, COMM COM INF SC, V1621, P250, DOI 10.1007/978-3-031-14179-9_17
   Granata D, 2021, CLOSER: PROCEEDINGS OF THE 11TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING AND SERVICES SCIENCE, P87, DOI 10.5220/0010455200870098
   Haitao Z., 2022, 2022 7 IEEE INT C DA, P102, DOI [10.1109/DSC55868.2022.00021, DOI 10.1109/DSC55868.2022.00021]
   Haji S., 2019, Int. J. Adv. Trends Comput. Sci. Eng, V8, P100, DOI [10.30534/ijatcse/2019/1981.12019, DOI 10.30534/IJATCSE/2019/1981.12019]
   Hasan R, 2021, CONSUM COMM NETWORK, DOI 10.1109/CCNC49032.2021.9369505
   HOQUE MA, 2019, THREAT MODEL VEHICUL, P1051
   Hussain S., 2014, THREAT MODELLING MET, V26, P1607
   Ivanova ND, 2023, J COMPUT VIROL HACKI, V19, P367, DOI 10.1007/s11416-022-00440-3
   Jamil Ameerah-Muhsinah, 2021, 2021 International Conference on Software Engineering & Computer Systems and 4th International Conference on Computational Science and Information Management (ICSECS-ICOCSIM), P614, DOI 10.1109/ICSECS52883.2021.00118
   JointTask Force Interagency Working Group, 2020, NIST SPECIAL PUBLICA, DOI DOI 10.6028/NIST.SP.800-53R5
   Khan R, 2017, IEEE PES INNOV SMART
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kornecki A. J., 2015, CROSSTALK, V21
   Kosachenko T., 2021, INT C FUT TRENDS NET, P296, DOI [10.1007/978-981-16-1483-5_27, DOI 10.1007/978-981-16-1483-5_27]
   Leander B, 2019, IEEE INT C EMERG, P1035, DOI [10.1109/ETFA.2019.8869162, 10.1109/etfa.2019.8869162]
   LINDDUN, 2020, LINDDUN PRIV ENG
   Mahak Mahapara, 2021, Proceedings of Second International Conference on Computing, Communications, and Cyber-Security. IC4S 2020. Lecture Notes in Networks and Systems (LNNS 203), P293, DOI 10.1007/978-981-16-0733-2_21
   Mahmood S, 2022, VEH COMMUN, V35, DOI 10.1016/j.vehcom.2022.100468
   Mani P., 2017, ELECT GOVT INT J, V14, P1, DOI [10.1504/EG.2017.10008841, DOI 10.1504/EG.2017.10008841]
   Martins Goncalo, 2015, 2015 Resilience Week (RWS). Proceedings, P1, DOI 10.1109/RWEEK.2015.7287428
   Meland Per Hakon, 2014, International Journal of Secure Software Engineering, V5, P1, DOI 10.4018/ijsse.2014040101
   Messe N, 2020, IEEE INT CONF TRUST, P491, DOI 10.1109/TrustCom50675.2020.00073
   Microsoft, 2018, MICR THREAT MOD TOOL
   MONTEUUIS JP, 2018, SARA SECURITY AUTOMO, P3, DOI DOI 10.1145/3198458.3198465
   Naagas M., 2018, THREAT DRIVEN APPROA, DOI [10.1145/3193092.3193096, DOI 10.1145/3193092.3193096]
   Nweke LO, 2020, INT J ADV COMPUT SC, V11, P1
   Omotunde H., 2015, REV THREAT MODELLING
   OWASP, OWASP AUT THREATS WE
   pyTM, 2019, US
   Radoglou-Grammatikis P, 2022, IEEE T IND INFORM, V18, P2041, DOI 10.1109/TII.2021.3093905
   Rak M., 2020, SYSTEMATIC IOT PENET, V2597, P190
   Rak M, 2022, COMPUT ELECTR ENG, V99, DOI 10.1016/j.compeleceng.2022.107721
   Rak M, 2019, LECT NOTE DATA ENG, V24, P265, DOI 10.1007/978-3-030-02607-3_24
   Ramazanzadeh MA, 2022, IET COMPUT DIGIT TEC, V16, P141, DOI 10.1049/cdt2.12045
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   Saatkamp K, 2019, PROCEEDINGS OF THE 2019 INTERNATIONAL CONFERENCE ON NETWORKED SYSTEMS (NETSYS 2019), P19
   Salzillo G., 2020, 13 INT C SEC INF NET
   Schlegel R, 2015, IEEE INTL CONF IND I, P197, DOI 10.1109/INDIN.2015.7281734
   Shelupanov A., 2019, INT J EMERG TRENDS E, V7, P283, DOI [10.30534/ijeter/2019/11792019, DOI 10.30534/IJETER/2019/11792019]
   Shi ZP, 2022, IEEE SECUR PRIV, V20, P29, DOI 10.1109/MSEC.2021.3125229
   SION L, 2018, SPARTA SECURITY PRIV, P89, DOI DOI 10.1109/ICSA-C.2018.00032
   Sion L, 2021, 2021 IEEE SECURE DEVELOPMENT CONFERENCE (SECDEV 2021), P30, DOI 10.1109/SecDev51306.2021.00021
   Sion L, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (EUROS&PW 2018), P79, DOI 10.1109/EuroSPW.2018.00017
   Tan Kristen, 2022, An Analysis of Open-source Automated Threat Modeling Tools and Their Extensibility from Security into Privacy
   Tatam M, 2021, HELIYON, V7, DOI 10.1016/j.heliyon.2021.e05969
   Valenza F, 2023, IEEE T DEPEND SECURE, V20, P4403, DOI 10.1109/TDSC.2022.3213577
   Vallant H, 2021, APPL SCI-BASEL, V11, DOI 10.3390/app11115149
   Verreydt S, 2022, 3RD INTERNATIONAL WORKSHOP ON ENGINEERING AND CYBERSECURITY OF CRITICAL SYSTEMS (ENCYCRIS 2022), P41, DOI 10.1145/3524489.3527303
   von der Assen J, 2022, 2022 IEEE INTERNATIONAL CONFERENCE ON CYBER SECURITY AND RESILIENCE (IEEE CSR), P189, DOI 10.1109/CSR54599.2022.9850283
   Wirtz R., 2020, RISK IDENTIFICATION, P385, DOI [10.5220/0008935803850396, DOI 10.5220/0008935803850396]
   Wuyts K, 2020, 2020 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (EUROS&PW 2020), P302, DOI 10.1109/EuroSPW51379.2020.00047
   Wuyts K, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1175, DOI 10.1145/3167132.3167414
   Zeinali M., 2018, 2018 IEEE INT C COMM, P1, DOI [10.1109/ISCISC.2018.8546868, DOI 10.1109/SMARTGRIDCOMM.2018.8587541]
NR 82
TC 6
Z9 6
U1 2
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 125
EP 161
DI 10.1007/s11219-023-09634-4
EA MAY 2023
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:000994973300001
OA hybrid
DA 2024-07-18
ER

PT J
AU Bushehrian, O
   Ghane, Z
AF Bushehrian, Omid
   Ghane, Ziba
TI Code quality control by bug report classification
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software maintainability; Quality control; Convolutional neural network;
   Time series
ID MAINTAINABILITY; PREDICTION
AB Software maintenance phase involves successive code changes due to the reported bugs causing the emergence of bad smells in the code. Gradual code deterioration is the result of such practice and brings about hard to maintain code by affecting the code quality adversely. The purpose is to alert the project manager to the presumptive quality critical bugs (QCB) as soon as the bug reports are recorded in the issue tracking system (ITS) and help treat them more carefully by assigning those to the more experienced developers to be fixed or by prioritizing those QCBs in the quality control list. One-phased and two-phased bug classification models are proposed in this paper. The former makes the predictions using a convolutional neural network and the latter is based on the bug localization algorithms (as the first step) and time series prediction techniques (as the second step). Using four large-size open-source Apache products, it was observed that the two-phased approach could reach 78% prediction accuracy. The two-phased method was able to identify unpredictable bug reports by analyzing the time series of its target classes. The two-phased method outperformed the one-phased method in products involving highly predictable classes' time series. In contrast, the simpler one-phased method performed comparable to the two-phased method in low-predictable products. Code quality control (CQC) is a vital task over bug-fixing process to delay the code deterioration by refactoring activities. Bug classification techniques have already been applied in the bug severity prediction and bug triaging areas but not in the CQC applications.
C1 [Bushehrian, Omid; Ghane, Ziba] Shiraz Univ Technol, Dept Comp Engn & Informat Technol, Shiraz, Iran.
C3 Shiraz University of Technology
RP Bushehrian, O (corresponding author), Shiraz Univ Technol, Dept Comp Engn & Informat Technol, Shiraz, Iran.
EM bushehrian@sutech.ac.ir; z.ghane@sutech.ac.ir
CR Bán D, 2014, LECT NOTES COMPUT SC, V8583, P337, DOI 10.1007/978-3-319-09156-3_25
   Chen C, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2018), P226, DOI 10.1109/QRS.2018.00036
   Fontana FA, 2017, KNOWL-BASED SYST, V128, P43, DOI 10.1016/j.knosys.2017.04.014
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Guo SK, 2020, NEURAL PROCESS LETT, V51, P2589, DOI 10.1007/s11063-020-10213-y
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Kim D, 2013, IEEE T SOFTWARE ENG, V39, P1597, DOI 10.1109/TSE.2013.24
   Kramer O., 2013, Intelligent systems reference library, V1st, DOI [DOI 10.1007/978-3-642-38652-7, 10.1007/978-3-642-38652-7]
   Limsettho N, 2016, INT J SOFTW ENG KNOW, V26, P1027, DOI 10.1142/S0218194016500352
   Malhotra R, 2016, INT J SOFTW ENG KNOW, V26, P1221, DOI 10.1142/S0218194016500431
   Mamone S., 1994, SIGSOFT Software Engineering Notes, V19, P75, DOI 10.1145/181610.181623
   Manning Christopher D., 2008, INTRO INFORM RETRIEV
   Mushtaq R., 2011, SSRN Electronic Journal
   Palomba F, 2019, IEEE T SOFTWARE ENG, V45, P194, DOI 10.1109/TSE.2017.2770122
   Palomba F, 2018, EMPIR SOFTW ENG, V23, P1188, DOI 10.1007/s10664-017-9535-z
   Piotrowski P., 2020, DATA CENTRIC BUSINES, V4, P77, DOI 10.1007/978-3-030-34706-2_5
   Le Q, 2014, PR MACH LEARN RES, V32, P1188
   Ramay WY, 2019, IEEE ACCESS, V7, P46846, DOI 10.1109/ACCESS.2019.2909746
   Sayari, 2021, INT SYMP EMP SOFTWAR, V15, P1
   Taba SES, 2013, PROC IEEE INT CONF S, P270, DOI 10.1109/ICSM.2013.38
   Ubayawardana GM, 2018, INT CONF ADV ICT, P70, DOI 10.1109/ICTER.2018.8615550
   Vidal SA, 2016, AUTOMAT SOFTW ENG, V23, P501, DOI 10.1007/s10515-014-0175-x
   Wang, 2020, IEEE T SERV COMPUT
   Yang L, 2020, NEUROCOMPUTING, V415, P295, DOI 10.1016/j.neucom.2020.07.061
   Yu L., 2005, 2005 International Symposium on Empirical Software Engineering (IEEE Cat. No. 05EX1213)
   Zaidi SFA, 2020, IEEE ACCESS, V8, P213729, DOI 10.1109/ACCESS.2020.3040065
   Zhang XF, 2017, 2017 ANNUAL CONFERENCE ON SOFTWARE ANALYSIS, TESTING AND EVOLUTION (SATE 2017), P1, DOI 10.1109/SATE.2017.9
NR 27
TC 0
Z9 0
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 991
EP 1007
DI 10.1007/s11219-023-09623-7
EA MAR 2023
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000945747100001
DA 2024-07-18
ER

PT J
AU Butler, S
   Gamalielsson, J
   Lundell, B
   Brax, C
   Mattsson, A
   Gustavsson, T
   Feist, J
   Kvarnström, B
   Lönroth, E
AF Butler, Simon
   Gamalielsson, Jonas
   Lundell, Bjorn
   Brax, Christoffer
   Mattsson, Anders
   Gustavsson, Tomas
   Feist, Jonas
   Kvarnstrom, Bengt
   Lonroth, Erik
TI On business adoption and use of reproducible builds for open and closed
   source software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Reproducible builds; Software integrity; Software engineering; Open
   source software
AB Reproducible builds (R-Bs) are software engineering practices that reliably create bit-for-bit identical binary executable files from specified source code. R-Bs are applied in some open source software (OSS) projects and distributions to allow verification that the distributed binary has been built from the released source code. The use of R-Bs has been advocated in software maintenance and R-Bs are applied in the development of some OSS security applications. Nonetheless, industry application of R-Bs appears limited, and we seek to understand whether awareness is low or if significant technical and business reasons prevent wider adoption. Through interviews with software practitioners and business managers, this study explores the utility of applying R-Bs in businesses in the primary and secondary software sectors and the business and technical reasons supporting their adoption. We find businesses use R-Bs in the safety-critical and security domains, and R-Bs are valuable for traceability and support collaborative software development. We also found that R-Bs are valued as engineering processes and are seen as a badge of software quality, but without a tangible value proposition. There are good engineering reasons to use R-Bs in industrial software development, and the principle of establishing correspondence between source code and binary offers opportunities for the development of further applications.
C1 [Butler, Simon; Gamalielsson, Jonas; Lundell, Bjorn] Univ Skovde, Sch Informat, Hgsk Vagen,Box 408, SE-54128 Skovde, Sweden.
   [Brax, Christoffer] Combitech AB, Univ Vagen 14, SE-58015 Linkoping, Sweden.
   [Mattsson, Anders] Husqvarna AB, Drottninggatan 2, SE-56182 Huskvarna, Sweden.
   [Gustavsson, Tomas] PrimeKey Solut AB, Plan A8,Sundbybergsvagen 1, SE-17173 Solna, Sweden.
   [Feist, Jonas] RedBridge AB, Gamla Brogatan, SE-11120 Stockholm, Sweden.
   [Kvarnstrom, Bengt] Saab AB, Broderna Ugglas Gata, SE-58188 Linkoping, Sweden.
   [Lonroth, Erik] Scania CV AB, Vagnmakarvagen 1, SE-15187 Sodertalje, Sweden.
C3 University of Skovde; Combitech; Saab Group; Scania
RP Butler, S (corresponding author), Univ Skovde, Sch Informat, Hgsk Vagen,Box 408, SE-54128 Skovde, Sweden.
EM simon.butler@his.se; jonas.gamalielsson@his.se; bjorn.lundell@his.se;
   christoffer.brax@combitech.com; anders.mattsson@husqvarnagroup.com;
   tomas.gustavsson@primekey.com; jonas.feist@redbridge.se;
   bengt@kvarnstrom.eu; erik@dwellir.com
RI Butler, Simon/AAC-2125-2020
OI Butler, Simon/0000-0002-6215-3753
FU University of Skovde; Swedish Knowledge Foundation (KK-stiftelsen)
FX Open access funding provided by University of Skovde. This research has
   been financially supported by the Swedish Knowledge Foundation
   (KK-stiftelsen) and participating partner organisations in the LIM-IT
   project.
CR ACT, 2020, US
   Agerfalk P., 2005, P 1 INT C OPEN SOURC, P82
   Alpine Linux, 2020, US
   Apache Maven, 2022, CONF REPR BUILDS
   Bazel, 2020, BAZ FAST SCAL MULT E
   Bitcoin Project, 2022, BITCOIN CORE
   Braa K., 1999, ACCOUNTING MANAGEMEN, V9, P25, DOI [DOI 10.1016/S0959-8022(98)00018-6, 10.1016/S0959-8022(98)00018-6]
   Braun V., 2006, QUAL RES PSYCHOL, V3, P77, DOI [DOI 10.1191/1478088706QP063OA, 10.1191/1478088706qp063oa]
   Bressers, 2016, TRUSTING TRUSTING TR
   Chen R., 2018, WHY ARE MODULE TIMES
   Courtes, 2019, CONNECTING REPRODUCI
   Courtes L, 2020, GUIX UNIFYING PROVIS
   Courtès L, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P41, DOI 10.1145/3136040.3136045
   Courtès L, 2015, LECT NOTES COMPUT SC, V9523, P579, DOI 10.1007/978-3-319-27308-2_47
   Courtes Ludovic, 2013, P ELS 2013 6 EUR LIS, P4
   de Carnavalet Xavierde Carne., 2014, Proceedings of the 30th Annual Computer Security Applications Conference, P16, DOI [10.1145/2664243.2664288, DOI 10.1145/2664243.2664288]
   Dolstra E, 2010, J FUNCT PROGRAM, V20, P577, DOI 10.1017/S0956796810000195
   Dong C, 2019, BITCOIN BUILD SYSTEM
   Edge, 2019, BACKDOOR POPULAR RUB
   Egts D., 2021, DAVE GUNNAR SHOW EPI
   Enck W, 2022, IEEE SECUR PRIV, V20, P96, DOI 10.1109/MSEC.2022.3142338
   European Commission, 2021, PROP REG EUR PARL CO
   Fitzgerald A, 2019, ENG FREELIBRE OP ENS, P83, DOI [10.1007/978-981-13-7099-1_5, DOI 10.1007/978-981-13-7099-1_5]
   Fowler, 2010, REPRODUCIBLEBUILD
   Gallagher R., 2014, NSA PLANS INFECT MIL
   GCC, 2020, C PREPR SECT 13 ENV
   Geyer-Blaumeiser L., 2019, ENSURING OPEN SOURCE
   GNU Guix, 2019, GNU GUIX GNUS ADV DI
   Google Cloud, 2020, BIN AUTH BORG GOOGL
   GReAT AMR, 2019, OP SHADOWHAMMER HIGH
   Greenberg, 2018, MYSTERIOUS HACKER GR
   Greenberg A., 2017, SOFTWARE HAS SERIOUS
   Guix-HPC, 2020, GUIX HPC REPR SOFTW
   Hemel A., 2020, DOCKER CONTAINERS LE
   Hurst R., 2021, VERIFIABLE DESIGN MO
   Ivankovic M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P955, DOI 10.1145/3338906.3340459
   Jacomet, 2020, PROTECTING YOURSELF
   Johnson, 2020, HR6216 NATL ARTIFICI
   Kang Y., 2015, XcodeGhost S: A New Breed Hits the US
   Kuhn B. M., 2020, DOES CAREFUL INVENTO
   Lamb C., 2017, SOURCE DATE EPOCH SP
   Lamb C, 2022, IEEE SOFTWARE, V39, P62, DOI 10.1109/MS.2021.3073045
   Leija OSN, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P167, DOI 10.1145/3373376.3378519
   Levsen, 2016, REPRODUCIBLE BUILDS
   Levsen H., 2019, OVERVIEW VARIOUS STA
   Linderud M., 2019, THESIS U BERGEN
   Lundell B, 2017, 2017 IEEE/ACM 4TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING RESEARCH AND INDUSTRIAL PRACTICE (SER&IP 2017), P24, DOI 10.1109/SER-IP.2017..4
   McDonald Nora, 2019, Proceedings of the ACM on Human-Computer Interaction, V3, DOI 10.1145/3359174
   Nesbitt A., 2019, MANIFEST EPISODE 14
   NixOS, 2020, NIXOS LIN
   Ohm Marc, 2020, Detection of Intrusions and Malware, and Vulnerability Assessment. 17th International Conference, DIMVA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12223), P23, DOI 10.1007/978-3-030-52683-2_2
   P. Regulation, 2016, OFFICIAL J EUROPEAN, V679, P2016
   Peachey, 2022, POSTOFFICE SCANDAL W
   Perry M., 2014, REPRODUCIBLE BUILDS
   Perry M., 2013, REPRODUCIBLE BUILDS
   Piotrowski, 2018, REPRODUCIBLEBUILDS
   Porup J. M, 2016, MAKE LINUX MORE TRUS
   Pothon F., 2017, ADACORE TECHNOLOGIES
   Potvin R, 2016, COMMUN ACM, V59, P78, DOI 10.1145/2854146
   Ramakrishna, 2021, NEW FINDINGS OUR INV
   Ren ZL, 2022, PROC INT CONF SOFTW, P200, DOI 10.1145/3510003.3510102
   Ren ZL, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P527, DOI 10.1109/ASE.2019.00056
   Ren ZL, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P71, DOI 10.1145/3180155.3180224
   Reproducible Builds, 2022, REPR
   Reproducible Builds Project, 2019, DEF
   Reproducible Builds Project, 2019, REPR BUILDS SET SOFT
   Reproducible Builds Project, 2022, DIFF IND COMP FIL AR
   Rousseau G, 2020, EMPIR SOFTW ENG, V25, P2930, DOI 10.1007/s10664-020-09828-5
   RTCA, 2011, DO-178C Software Considerations in Airborne Systems and Equipment Certification
   Rudin C, 2019, NAT MACH INTELL, V1, P206, DOI 10.1038/s42256-019-0048-x
   Secure Systems Lab, 2022, INT FRAM SEC INT SOF
   Shaulov Michael, 2016, Network Security, V2016, P5, DOI 10.1016/S1353-4858(16)30006-X
   Shi YX, 2022, IEEE T CYBERNETICS, V52, P12551, DOI 10.1109/TCYB.2021.3072139
   Smith JaredK., 2011, Security incident on Fedora infrastructure on 23 Jan 2011
   Software Heritage, 2019, US
   SPDX Workgroup, 2021, SOFTW PACK DAT EXCH
   Tapas N, 2019, 2019 IEEE 18TH INTERNATIONAL SYMPOSIUM ON NETWORK COMPUTING AND APPLICATIONS (NCA), P267, DOI 10.1109/nca.2019.8935014
   THOMPSON K, 1984, COMMUN ACM, V27, P761, DOI 10.1145/358198.358210
   Tor Project, 2022, TOR PROJ AN ONL
   Torres-Arias S, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1393
   vander Burg S., 2014, P 29 ACM IEEE INT C, P731, DOI [10.1145/2642937.2643013, DOI 10.1145/2642937.2643013]
   Vinet J., 2022, ARCH LINUX
   Wang JW, 2020, IEEE INT CONF AUTOM, P138, DOI 10.1145/3324884.3416585
   Wheeler DA, 2005, 21ST ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P28
   Wheeler David A., 2009, THESIS G MASON U
   Xiao C., 2015, MORE DETAILS XCODEGH
   Yocto Project, 2021, REPR BUILDS
   Zerouali A, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P491, DOI [10.1109/saner.2019.8668013, 10.1109/SANER.2019.8668013]
NR 88
TC 3
Z9 3
U1 3
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 687
EP 719
DI 10.1007/s11219-022-09607-z
EA NOV 2022
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000889385000001
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Chen, X
   Yu, HH
   Yu, DJ
   Chen, J
   Sun, XX
AF Chen, Xin
   Yu, Haihua
   Yu, Dongjin
   Chen, Jie
   Sun, Xiaoxiao
TI Predicting Android malware combining permissions and API call sequences
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Android malware; Malware detection; Permission; API call sequence; CNN
ID FRAMEWORK
AB Malware detection is an important task in software maintenance. It can effectively protect user information from the attack of malicious developers. Existing studies mainly focus on leveraging permission information and API call information to identify malware. However, many studies pay attention to the API call without considering the role of API call sequences. In this study, we propose a new method by combining both the permission information and the API call sequence information to distinguish malicious applications from benign applications. First, we extract features of permission and API call sequence with a decompiling tool. Then, one-hot encoding and Word2Vec are adopted to represent the permission feature and the API call sequence feature for each application, respectively. Based on this, we leverage Random Forest (RF) and Convolutional Neural Networks (CNN) to train a permission-based classifier and an API call sequence-based classifier, respectively. Finally, we design a linear strategy to combine the outputs of these two classifiers to predict the labels of newly arrived applications. By an evaluation with 15,198 malicious applications and 15,129 benign applications, our approach achieves 98.84% in terms of precision, 98.17% in terms of recall, 98.50% in terms of F1-score, and 98.52% in terms of accuracy on average, and outperforms the state-of-art method Malscan by 2.12%, 0.27%, 1.20%, and 1.24%, respectively. In addition, we demonstrate that the method combining two features achieves better performance than the methods based on a single feature.
C1 [Chen, Xin; Yu, Haihua; Yu, Dongjin; Chen, Jie; Sun, Xiaoxiao] Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou 310018, Peoples R China.
C3 Hangzhou Dianzi University
RP Yu, DJ (corresponding author), Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou 310018, Peoples R China.
EM chenxin4391@hdu.edu.cn; yuhaihua@hdu.edu.cn; yudj@hdu.edu.cn;
   cjie@hdu.edu.cn; sunxiaoxiao@hdu.edu.cn
RI Sun, Xiaoxiao/JQJ-6420-2023
OI Yu, Dongjin/0000-0001-8919-1613
FU Natural Science Foundation of Zhejiang Province [LY21F020020]; National
   Natural Science Foundation of China [61902096]; Key Project of Science
   and Technology of Zhejiang Province [2020C01165]
FX This work was supported in part by the Natural Science Foundation of
   Zhejiang Province under Grant LY21F020020, in part by the National
   Natural Science Foundation of China under Grant 61902096, and in part by
   Key Project of Science and Technology of Zhejiang Province under Grant
   2020C01165.
CR Aafer Y, 2013, L N INST COMP SCI SO, V127, P86
   Alazab M, 2020, FUTURE GENER COMP SY, V107, P509, DOI 10.1016/j.future.2020.02.002
   Allix K, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P468, DOI [10.1145/2901739.2903508, 10.1109/MSR.2016.056]
   Arp D, 2014, 21ST ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2014), DOI 10.14722/ndss.2014.23247
   Bottou L., 1998, ONLINE LEARNING NEUR, V17, P142
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   Burguera I., 2011, P 1 ACM WORKSH SEC P, P15, DOI DOI 10.1145/2046614.2046619
   Chen K., 2013, EFFICIENT ESTIMATION, P2
   Garg S, 2019, COMPUT ELECTR ENG, V77, P12, DOI 10.1016/j.compeleceng.2019.04.019
   Han B, 2014, SCI WORLD J, DOI [10.1155/2014/724804, 10.1155/2014/132713]
   Harris D., 2010, DIGITAL DESIGN COMPU
   Herley C. E., 2015, GOOGLE PATENTS
   Hui TW, 2021, IEEE T PATTERN ANAL, V43, P2555, DOI 10.1109/TPAMI.2020.2976928
   Jerbi M, 2020, COMPUT SECUR, V92, DOI 10.1016/j.cose.2020.101743
   Karbab EB, 2018, DIGIT INVEST, V24, pS48, DOI 10.1016/j.diin.2018.01.007
   Karbab EB, 2016, 2016 11TH INTERNATIONAL CONFERENCE ON MALICIOUS AND UNWANTED SOFTWARE (MALWARE), P139, DOI 10.1109/MALWARE.2016.7888739
   Kingma D. P., 2014, arXiv
   Kohavi R., 1995, STUDY CROSS VALIDATI, DOI DOI 10.1067/MOD.2000.109031
   LANDWEHR CE, 1994, ACM COMPUT SURV, V26, P211, DOI 10.1145/185403.185412
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Mercaldo F, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P744, DOI 10.1145/2889160.2892656
   Mikolov Tomas, 2013, Advances in Neural Information Processing Systems, P3111, DOI DOI 10.48550/ARXIV.1310.4546
   Nash T., 2005, An undirected attack against critical infrastructure
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Peiravian N, 2013, PROC INT C TOOLS ART, P300, DOI 10.1109/ICTAI.2013.53
   Pektas A, 2020, SOFT COMPUT, V24, P1027, DOI 10.1007/s00500-019-03940-5
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Shao YR, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23046
   Srinivasa-Desikan B., 2018, Natural Language Processing and Computational Linguistics
   Vapnik V., 2013, The nature of statistical learning theory
   Vasan D, 2020, COMPUT NETW, V171, DOI 10.1016/j.comnet.2020.107138
   Wang W, 2014, IEEE T INF FOREN SEC, V9, P1869, DOI 10.1109/TIFS.2014.2353996
   Wu DJ, 2012, ASIA JT CONF INF SEC, P62, DOI 10.1109/AsiaJCIS.2012.18
   Wu YM, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P139, DOI 10.1109/ASE.2019.00023
   Xu LF, 2018, LECT NOTE NETW SYST, V16, P702, DOI 10.1007/978-3-319-56991-8_51
   Young A, 1996, P IEEE S SECUR PRIV, P129, DOI 10.1109/SECPRI.1996.502676
   Zhou YJ, 2012, P IEEE S SECUR PRIV, P95, DOI 10.1109/SP.2012.16
   Zhu HJ, 2018, NEURAL COMPUT APPL, V30, P3353, DOI 10.1007/s00521-017-2914-y
NR 38
TC 1
Z9 1
U1 2
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2023
VL 31
IS 3
BP 655
EP 685
DI 10.1007/s11219-022-09602-4
EA NOV 2022
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q3BW3
UT WOS:000885209600001
DA 2024-07-18
ER

PT J
AU Becker, P
   Papa, MF
   Tebes, G
   Olsina, L
AF Becker, Pablo
   Fernanda Papa, Maria
   Tebes, Guido
   Olsina, Luis
TI Discussing the applicability of a process core ontology and aspects of
   its internal quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Process; Core ontology; Foundational ontology; Domain ontology; Semantic
   enrichment; Ontological internal quality
AB A well-engineered strategy should specify and integrate three capabilities: process, method, and domain terminology specifications. The domain terminology of different strategies should be based on reference vocabularies. Thus, a process ontology should be a common reference since it considers cross-cutting concerns for different domains. This paper defines and represents the main concepts of a process ontology. This process ontology is placed at the core level in the context of a five-tier ontological architecture, where at the top of it there is a single foundational ontology. The practical use of a foundational ontology is to semantically enrich the lower-level ontologies. For example, an ontology at the foundational level can enrich a process core ontology. In turn, the ontologies at the lower level of a core one, such as those at the domain level, can benefit from reusing and extending the core concepts. Therefore, a process core ontology can be considered as a reusable resource to semantically enrich domain ontologies. In an attempt to discuss the applicability of the developed process core ontology, this paper illustrates the semantic enrichment of two top-domain ontologies. By using the process ontology-and other core ontologies-as common terminological references, the domain ontologies used in the different strategies are conceptually harmonized. In this way, strategies ensure terminological uniformity and consistency, thus facilitating the understanding of process and method specifications. In addition, the built process core ontology is compared with another process core ontology concerning its ontological internal quality. Then, recommendations and actions for improvement were performed.
C1 [Becker, Pablo; Fernanda Papa, Maria; Tebes, Guido; Olsina, Luis] UNLPam, GIDIS Web, Engn Sch, Gen Pico, LP, Argentina.
RP Olsina, L (corresponding author), UNLPam, GIDIS Web, Engn Sch, Gen Pico, LP, Argentina.
EM beckerp@ing.unlpam.edu.ar; pmfer@ing.unlpam.edu.ar;
   guido_tebes@ing.unlpam.edu.ar; olsinal@ing.unlpam.edu.ar
RI Becker, Pablo/IAO-2503-2023
OI Olsina, Luis/0000-0001-8969-4376
FU Engineering School at Universidad Nacional de La Pampa, Argentina
FX This line of research is supported partially by the Engineering School
   at Universidad Nacional de La Pampa, Argentina, in the project named
   "Family of Strategies for Functional and Non-Functional Software Testing
   considering Different Test Goal Purposes."
CR [Anonymous], 2010, 24774 ISOIEC TR
   [Anonymous], 2005, Ontological foundations for structural conceptual models
   [Anonymous], 2010, Capability maturity model integration (CMMI) for development v1.3
   [Anonymous], 2015, CLEI ELECT J, DOI DOI 10.19153/CLEIEJ.18.1.2
   [Anonymous], 2017, 20 C IB SOFTW ENG CI
   Arp R, 2015, BUILDING ONTOLOGIES WITH BASIC FORMAL ONTOLOGY, P1
   Becker P., 2021, CCIS 1439, P183
   Bringuente A.C.O., 2011, J INF DATA MANAG, V2, P511
   Calero C., 2006, ONTOLOGIES SOFTWARE, DOI DOI 10.1007/3-540-34518-3
   Clarke P, 2016, COMM COM INF SC, V609, P351, DOI 10.1007/978-3-319-38980-6_25
   Corcho O, 2003, DATA KNOWL ENG, V46, P41, DOI 10.1016/S0169-023X(02)00195-7
   CURTIS B, 1992, COMMUN ACM, V35, P75, DOI 10.1145/130994.130998
   d'Aquin M, 2011, APPL ONTOL, V6, P165, DOI 10.3233/AO-2011-0093
   de Almeida Falbo Ricardo, 2009, International Journal of Business Process Integration and Management, V4, P239, DOI 10.1504/IJBPIM.2009.032281
   Dujmovic JJ, 2007, IEEE T FUZZY SYST, V15, P1082, DOI 10.1109/TFUZZ.2007.902041
   Fensel D, 2004, ONTOLOGIES SILVER BU, DOI [10.1007/978-3-662-09083-1, DOI 10.1007/978-3-662-09083-1]
   Garanina NO, 2019, AUTOM CONTROL COMPUT, V53, P584, DOI 10.3103/S0146411619070058
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   Guarino N., 2002, CONCEPTUAL MODELINGE, V2503, DOI [10.1007/3-540-45816-6_6, DOI 10.1007/3-540-45816-6_6]
   Guizzardi G., 2008, 1 IB WORKSH REQ ENG
   Henderson-Sellers B, 2014, COMPUT STAND INTER, V36, P563, DOI 10.1016/j.csi.2013.11.001
   Herre H, 2010, THEORY AND APPLICATIONS OF ONTOLOGY: COMPUTER APPLICATIONS, P297, DOI 10.1007/978-90-481-8847-5_14
   Horsch T., 2021, PRAGMATIC INTEROPERA, DOI [10.5281/zenodo.4749106, DOI 10.5281/ZENODO.4749106]
   Iacovelli A, 2011, IFIP ADV INF COMM TE, V351, P77
   ISO/IEC, 218381 ISOIEC 1
   ISO/IEC, 2008, 12207 ISOIEC
   Masolo C., 2002, The wonderweb library of foundational ontologies
   Morales-Trujillo M, 2018, COMPUT INFORM, V37, P109, DOI 10.4149/cai_2018_1_109
   Morales-Trujillo Miguel Ehécatl, 2019, J. appl. res. technol, V17, P28
   Olsina L, 2021, PROCEEDINGS OF THE 13TH INTERNATIONAL JOINT CONFERENCE ON KNOWLEDGE DISCOVERY, KNOWLEDGE ENGINEERING AND KNOWLEDGE MANAGEMENT (KEOD), VOL 2, P111, DOI 10.5220/0010641000003064
   *OMG, 2008, SOFTW SYST PROC ENG
   Renault LDC, 2015, PROCEEDINGS OF THE 17TH BRAZILIAN SYMPOSIUM ON SOFTWARE QUALITY (SBQS), P220, DOI 10.1145/3275245.3275269
   Rodríguez D, 2010, INT J SOFTW ENG KNOW, V20, P533, DOI 10.1142/S0218194010004876
   Ruiz F., 2006, ONTOLOGIES SOFTWARE, P49
   Ruy FB, 2016, LECT NOTES COMPUT SC, V10024, P527, DOI 10.1007/978-3-319-49004-5_34
   Tebes G, 2021, J COMPUT SCI TECHNOL, V21, P126, DOI 10.24215/16666038.21.e12
   vanHeijst G, 1997, INT J HUM-COMPUT ST, V46, P183, DOI 10.1006/ijhc.1996.0090
NR 37
TC 2
Z9 2
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2022
VL 30
IS 4
BP 1003
EP 1038
DI 10.1007/s11219-022-09592-3
EA MAY 2022
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6J7CW
UT WOS:000800978000001
DA 2024-07-18
ER

PT J
AU Yin, HS
   Pfahl, D
AF Yin, Huishi
   Pfahl, Dietmar
TI Application of the OIRE method-tool support and initial feedback from
   two chinese companies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE OIRE; OIRE-S; Kano model; Kano-like model
ID KANO-MODEL; CUSTOMER SATISFACTION; PRODUCT DEVELOPMENT; MANAGEMENT; QFD
AB To (semi-)automatically classify user needs that are collected from online open sources, we propose the Open Innovation in Requirements Engineering (OIRE) method. OIRE is mimicking the well-known Kano model exclusively using data from online reviews instead of conducting interviews with select focus groups. In our previous research, we introduced the design, implementation and preliminary validation of the applicability of the OIRE method. In this article, we introduce the tool support for the OIRE method, OIRE-System (OIRE-S), and evaluate the usefulness of the OIRE method using OIRE-S in an industry setting. For that purpose, we conducted one case study with two Chinese companies that plan to have software apps developed by suppliers. In addition, we conducted interviews about the case study with two addition stakeholders. Based on the analysis results of the case study and the interview study, we conclude that the OIRE method provides helpful information for stakeholders and, thus, is useful to decision-makers in industry, in particular as a complement to existing requirements elicitation and analysis activities.
C1 [Yin, Huishi; Pfahl, Dietmar] Univ Tartu, Inst Comp Sci, Tartu, Estonia.
C3 University of Tartu
RP Yin, HS (corresponding author), Univ Tartu, Inst Comp Sci, Tartu, Estonia.
EM huishi@ut.ee
RI Pfahl, Dietmar Alfred Paul Kurt/H-3084-2015
OI Pfahl, Dietmar Alfred Paul Kurt/0000-0003-2400-501X
CR Al-Subaihin AA, 2021, IEEE T SOFTWARE ENG, V47, P300, DOI 10.1109/TSE.2019.2891715
   Aly M., 2005, NEURAL NETWORKS, V19, P9
   Berger C., 1993, Center for Quality Management Journal, V2, P3, DOI DOI 10.4236/OJPM.2014
   Borgianni Y, 2015, TOTAL QUAL MANAG BUS, V26, P263, DOI 10.1080/14783363.2013.791119
   Chen CC, 2008, INT J PROD ECON, V114, P667, DOI 10.1016/j.ijpe.2008.02.015
   Chesbrough H. W., 2003, OPEN INNOVATION NEW
   Das S, 2001, P AS PAC FIN ASS ANN, V35, P43
   Dasgupta Sajib, 2009, Proceedings of the Joint Conference ACL-IJCNLP, P701
   Dewi DRS, 2017, IOP CONF SER-MAT SCI, V277, DOI 10.1088/1757-899X/277/1/012009
   Ek FI, 2015, TOTAL QUAL MANAG BUS, V26, P400, DOI 10.1080/14783363.2013.835898
   Engstrom E., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P367, DOI 10.1109/ICST.2011.27
   Fabijan A, 2016, LECT NOTES COMPUT SC, V10027, P517, DOI 10.1007/978-3-319-49094-6_37
   Garibay C, 2010, J ACAD LIBR, V36, P125, DOI 10.1016/j.acalib.2010.01.002
   Herzberg F., 1959, MOTIVATION WORK
   Huaming Song, 2018, 2018 IEEE 3rd International Conference on Big Data Analysis (ICBDA), P76, DOI 10.1109/ICBDA.2018.8367654
   Jiao JX, 2006, CONCURRENT ENG-RES A, V14, P173, DOI 10.1177/1063293X06068357
   Kano N., 1984, Journal of The Japanese Society for Quality Control, V31, P147, DOI [DOI 10.20684/QUALITY.14.2_147, 10.20684/quality.14.2_147]
   Ku Lun-Wei., 2005, P NTCIR 5 WORKSHOP, P513
   Lo SM, 2017, TOTAL QUAL MANAG BUS, V28, P1584, DOI 10.1080/14783363.2016.1151780
   Matzler K, 1998, TECHNOVATION, V18, P25, DOI 10.1016/S0166-4972(97)00072-2
   Morinaga S., 2002, P 8 ACM SIGKDD INT C, P341, DOI [DOI 10.1145/775047.775098, 10.1145/775047.775098]
   Nascimento P., 2012, 2012 Proceedings of IEEE 16th International Conference on Computer Supported Cooperative Work in Design (CSCWD 2012), P387, DOI 10.1109/CSCWD.2012.6221847
   Nasukawa T., 2003, P 2 INT C KNOWLEDGE, P70, DOI DOI 10.1145/945645.945658
   Nickerson R. S., 1998, REV GEN PSYCHOL, V2, P175, DOI DOI 10.1037/1089-2680.2.2.175
   Pang B, 2002, PROCEEDINGS OF THE 2002 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING, P79, DOI 10.3115/1118693.1118704
   Reagan A.J., 2015, ARXIV PREPRINT ARXIV
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Shugang Li, 2018, 2018 2nd IEEE Advanced Information Management, Communicates, Electronic and Automation Control Conference (IMCEC). Proceedings, P2226, DOI 10.1109/IMCEC.2018.8469724
   Socher R., 2013, P 2013 C EMP METH NA, V2013, P1631, DOI DOI 10.1371/JOURNAL.PONE.0073791
   Tong RichardM., 2001, WORKING NOTES ACM SI, P1
   Tontini G, 2007, TOTAL QUAL MANAG BUS, V18, P599, DOI 10.1080/14783360701349351
   Turney PD, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P417
   Ullah AMMS, 2011, SYSTEMS ENG, V14, P154, DOI 10.1002/sys.20168
   Wang H., 2017, SOCIAL SCI THEORY, V2017, P140
   Wei, 2015, CHINA SCI TECHNOLOGY, Vz4, P133
   Wiebe JM, 2000, SEVENTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-2001) / TWELFTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-2000), P735
   Wilson T, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P761
   Wnuk K, 2013, LECT NOTES BUS INF P, V150, P48
   Yang K., 2007, VOICE CUSTOMER CAPTU
   Yin HS, 2019, EUROMICRO CONF PROC, P56, DOI 10.1109/SEAA.2019.00017
   Yin HS, 2018, ASIA PAC SOFWR ENG, P1, DOI 10.1109/APSEC.2018.00014
   Yin HS, 2017, INT CONF SOFTW ENG, P5, DOI 10.1109/ICSESS.2017.8342852
   Yin HS, 2017, LECT NOTES COMPUT SC, V10611, P237, DOI 10.1007/978-3-319-69926-4_17
   Yin HS, 2016, LECT NOTES COMPUT SC, V10027, P539, DOI 10.1007/978-3-319-49094-6_39
   Yu H, 2003, PROCEEDINGS OF THE 2003 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING, P129
   Zacarias, 2016, COMPLETE GUIDE KANO
   Zhai Li-li, 2011, 2011 Proceedings of International Conference on Information Management, Innovation Management and Industrial Engineering (ICIII 2011), P518, DOI 10.1109/ICIII.2011.132
   Zhang F.L., 2017, PACKAGING ENG
NR 48
TC 0
Z9 0
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2021
VL 29
IS 4
BP 783
EP 815
DI 10.1007/s11219-021-09562-1
EA JUN 2021
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XE8XW
UT WOS:000663487200001
DA 2024-07-18
ER

PT J
AU Lima, I
   Silva, J
   Miranda, B
   Pinto, G
   d'Amorim, M
AF Lima, Igor
   Silva, Jefferson
   Miranda, Breno
   Pinto, Gustavo
   d'Amorim, Marcelo
TI Exposing bugs in JavaScript engines through test transplantation and
   differential testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test transplantation; Differential testing; JavaScript
ID COVERAGE
AB JavaScript is a popular programming language today with several implementations competing for market dominance. Although a specification document and a conformance test suite exist to guide engine development, bugs occur and have important practical consequences. Implementing correct engines is challenging because the spec is intentionally incomplete and evolves frequently. This paper investigates the use of test transplantation and differential testing for revealing functional bugs in JavaScript engines. The former technique runs the regression test suite of a given engine on another engine. The latter technique fuzzes existing inputs and then compares the output produced by different engines with a differential oracle. We conducted experiments with engines from five major players-Apple, Facebook, Google, Microsoft, and Mozilla-to assess the effectiveness of test transplantation and differential testing. Our results indicate that both techniques revealed several bugs, many of which are confirmed by developers. We reported 35 bugs with test transplantation (23 of these bugs confirmed and 19 fixed) and reported 24 bugs with differential testing (17 of these confirmed and 10 fixed). Results indicate that most of these bugs affected two engines-Apple's JSC and Microsoft's ChakraCore (24 and 26 bugs, respectively). To summarize, our results show that test transplantation and differential testing are easy to apply and very effective in finding bugs in complex software, such as JavaScript engines.
C1 [Lima, Igor; Miranda, Breno; d'Amorim, Marcelo] Univ Fed Pernambuco, Recife, PE, Brazil.
   [Silva, Jefferson; Pinto, Gustavo] Fed Univ Para, Recife, PE, Brazil.
C3 Universidade Federal de Pernambuco; Universidade Federal do Para
RP Miranda, B (corresponding author), Univ Fed Pernambuco, Recife, PE, Brazil.
EM isol2@cin.ufpe.br; jefferson.alves.silva@icen.ufpa.br; bafm@cin.ufpe.br;
   gpinto@ufpa.br; damorim@cin.ufpe.br
RI Miranda, Breno/S-1248-2018; d'Amorim, Marcelo/D-1703-2017
OI Miranda, Breno/0000-0001-9608-9393; d'Amorim,
   Marcelo/0000-0002-1323-8769
FU FACEPE fellowship [IBPG-0123-1.03/17]; INES 2.0; FACEPE [PRONEX APQ
   0388-1.03/14, APQ-0399-1.03/17]; CNPq [465614/2014-0]
FX Igor is supported by the FACEPE fellowship IBPG-0123-1.03/17. This
   research was partially funded by INES 2.0, FACEPE grants PRONEX APQ
   0388-1.03/14 and APQ-0399-1.03/17, and CNPq grant 465614/2014-0.
CR [Anonymous], 2020, OBJECT VALUEOF DOCUM
   [Anonymous], 2019, Mozilla
   [Anonymous], 2016, CHROMIUM
   [Anonymous], 2018, UND BEH
   [Anonymous], 2020, AM FUZZ LOOP
   [Anonymous], 2020, LITHIUM
   [Anonymous], 2019, GETTING STARTED LIBF
   [Anonymous], 2020, UNARY PLUS ES6 SPECI
   Apple, 2018, SEV LEV WEBK BUGS JA
   Argyros G, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1690, DOI 10.1145/2976749.2978383
   Babel, 2020, BAB PROJ
   BlogEngine.Net, 2020, BLOGENGINE NET PROJ
   Brian T, 2020, ESCLI HOST
   BRUMLEY D., 2007, P 16 USENIX SEC S US
   Chen C, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P859, DOI 10.1145/3180155.3180226
   Chen JJ, 2017, PROC INT CONF SOFTW, P700, DOI 10.1109/ICSE.2017.70
   Chen YT, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P793, DOI 10.1145/2786805.2786835
   Chen YT, 2016, ACM SIGPLAN NOTICES, V51, P85, DOI [10.1145/2980983.2908095, 10.1145/2908080.2908095]
   Chromium, 2020, CHROMIUM
   Daniel B., 2007, P THE 6 JOINT M EURO, P185, DOI 10.1145/1287624.1287651
   de Ciencias de la Informacion y de Sistemas C.I.F.A, 2017, CIENCIAS INFORMACION
   Donaldson Alastair F., 2017, Proceedings of the ACM on Programming Languages, V1, DOI 10.1145/3133917
   Ecma Internacional, 2019, STAT SEM EARL ERRR
   Ecma Internacional, 2020, CHANG EVALDECLARATIO
   Ecma Internacional, 2019, NUMB PREC SPEC
   ES, 2014, ARR NEW ATTR CAUS BU
   Eshkevari L., 2014, Proceedings of the 22nd International Conference on Program Comprehension (ICPC'14), P157, DOI [10.1145/2597008.2597153, DOI 10.1145/2597008.2597153]
   Facebook, 2015, REACT NAT
   Google, 2016, LIBFUZZER TUT
   Google Chrome Lab, 2017, JSVU JAVASCRIPT ENG
   Grieco G, 2016, ACM SIGPLAN NOTICES, V51, P13, DOI [10.1145/2976002.2976017, 10.1145/3241625.2976017]
   Helin A, 2020, RADAMSA FUZZER
   Hermes, 2020, HERM PROJ
   Hodovan R, 2018, GRAMMARINATOR
   Holler Christian, 2012, P 21 USENIX C SEC S, P445
   Nguyen HV, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P907, DOI 10.1145/2568225.2568300
   JerryScript, 2018, JERRYSCRIPT PROJ
   Joe B, 2018, MICROSOFT EDGE MAKIN
   Kangax, 2015, ECMASCRIPT6 COMP
   Kapus T, 2017, IEEE INT CONF AUTOM, P590, DOI 10.1109/ASE.2017.8115669
   Kim S, 2017, IEEE INT CONF AUTOM, P353, DOI 10.1109/ASE.2017.8115648
   Kusner MJ, 2015, PR MACH LEARN RES, V37, P957
   Lämmel R, 2006, LECT NOTES COMPUT SC, V3964, P19
   Lehmann D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P610, DOI 10.1145/3236024.3236037
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   LLVM, 2020, CLANG DOC
   Manès VJM, 2021, IEEE T SOFTWARE ENG, V47, P2312, DOI 10.1109/TSE.2019.2946563
   Microsoft, 2018, SEVERITY LEVELS CHAK
   Microsoft, 2018, CHAKRACORE
   Mikolov Tomas, 2013, Advances in Neural Information Processing Systems, P3111, DOI DOI 10.48550/ARXIV.1310.4546
   Miller B.P, 2020, FUZZ TESTING
   MIRANDA B, 2020, P 13 IEEE INT C SOFT
   Mozilla, 2018, SPIDERMONKEY PROJECT
   Mozilla, 2018, TRIAGE PROCESS FIREF
   Mozilla, 2007, JSFUNFUZZ MOZILLA
   Mozilla, 2007, JSFUNFUZZ
   Paleari Roberto, 2010, P 19 INT S SOFTW TES, P265, DOI [10.1145/1831708.1831741, DOI 10.1145/1831708.1831741]
   Patra J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P741, DOI 10.1145/3180155.3180184
   Petsios T, 2017, P IEEE S SECUR PRIV, P615, DOI 10.1109/SP.2017.27
   Pradel M, 2016, TECHNICAL REPORT
   Purdom P., 1972, BIT (Nordisk Tidskrift for Informationsbehandling), V12, P366, DOI 10.1007/BF01932308
   RedMonk, 2018, REDMONK PROGR LANG R
   Resig J, 2018, JAVASCRIPT CHROME
   Rumelhart D.E., 2013, Learning internal representations by error propagation, P399, DOI [10.1016/b978-1-4832-1446-7.50035-2, 10.1016/B978-1-4832-1446-7.50035-2]
   Simply Technologies, 2018, WHY IS JAVASCRIPT SO
   Sivakorn S, 2017, P IEEE S SECUR PRIV, P521, DOI 10.1109/SP.2017.46
   Stackify, 2008, MOST POP INFL PROGR
   StackOverflow community, 2018, EL ORD LOOP
   TC39, 2018, TYPECONVERSION TOIND
   TC39, 2018, ECMA262 REP
   TC39, 2018, ECMA262 SPEC
   TC39, 2018, ARR SORT
   TC39, 2018, OFF ECMA262 CONF TES
   TC39, 2018, TC39 GITHUB REP
   The Chromium Project, 2018, CHROMIUM BUG LABELS
   The Node.js Foundation, 2009, NODE JS
   Tiny-js, 2020, TINY JS
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   WebKit, 2018, WEBKIT PROJECT
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhang TY, 2017, PROC INT CONF SOFTW, P665, DOI 10.1109/ICSE.2017.67
NR 81
TC 3
Z9 4
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2021
VL 29
IS 1
BP 129
EP 158
DI 10.1007/s11219-020-09537-8
EA JAN 2021
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QZ5CV
UT WOS:000605922100001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Verdugo, J
   Rodríguez, M
AF Verdugo, Javier
   Rodriguez, Moises
TI Assessing data cybersecurity using ISO/IEC 25012
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Data cybersecurity; Data evaluation; Data certification; ISO; IEC 25012;
   GDPR
AB Data is of ever-growing importance and is widely considered to be a company's most valuable asset. Since data is becoming the main driver of business value, data quality and, specifically, data security are of paramount importance to companies. Various regulations related to data cybersecurity have been drawn up, such as the GDPR and the Cybersecurity Act, thus proving the importance placed on data cybersecurity by influential legislative institutions. Several standards related to security have emerged in recent years, most notably those of the ISO/IEC 27000 series. They are, however, focused on management systems and security infrastructure and ignore the security of the data itself. Other standards related to data quality, such as ISO 8000, also fail to address data security in depth. This paper, therefore, proposes a framework for the evaluation of data cybersecurity, consisting of a quality model, an evaluation process, and a tool for the visualization of the assessment results. This evaluation framework has been employed as the basis for a data cybersecurity certification scheme, which complements other certifiable standards related to data and security, such as ISO/IEC 27001 and ISO 8000. This work additionally presents the results of a pilot project in which the data cybersecurity of a commercial product was evaluated. The results of this pilot application allowed us to validate the feasibility of the evaluation framework defined.
C1 [Verdugo, Javier; Rodriguez, Moises] AQCLab, Camino Moledores, Ciudad Real 13005, Spain.
   [Verdugo, Javier; Rodriguez, Moises] Univ Castilla La Mancha, Inst Technol & Informat Syst, Alarcos Res Grp, Paseo Univ 4, Ciudad Real 13071, Spain.
C3 Universidad de Castilla-La Mancha
RP Verdugo, J (corresponding author), AQCLab, Camino Moledores, Ciudad Real 13005, Spain.; Verdugo, J (corresponding author), Univ Castilla La Mancha, Inst Technol & Informat Syst, Alarcos Res Grp, Paseo Univ 4, Ciudad Real 13071, Spain.
EM jverdugo@aqclab.es
RI Rodriguez, Moises/N-3490-2016
OI Rodriguez, Moises/0000-0003-2155-7409
FU CDTI;ECD project by "Torres Quevedo" Program of the Spanish Ministry of
   Economy, Industry and Competitiveness [INNO-20171086, PT3Q-16-08504];
   CYBERDATA project by Consejeria de Economia, Empresas y Empleo JCCM
   [(ISO/IEC 14598-1 1999)/17/IN/013]; FEDER (Fondo Europeo de Desarrollo
   Regional); ECLIPSE project (Ministerio de Ciencia, Innovacion y
   Universidades); ECLIPSE project (Fondo Europeo de Desarrollo Regional
   FEDER) [RTI2018-094283-B-C31]; TESTIMO project (Consejeria de Educacion,
   Cultura y Deportes de la Junta de Comunidades de Castilla La Mancha);
   TESTIMO project (Fondo Europeo de Desarrollo Regional FEDER)
   [SBPLY/17/180501/000503]
FX This research is part of the DQIoT project (INNO-20171086), funded by
   CDTI;ECD project (PT3Q-16-08504), funded by the "Torres Quevedo" Program
   of the Spanish Ministry of Economy, Industry and Competitiveness; the
   CYBERDATA project (REF: (ISO/IEC 14598-1 1999)/17/IN/013) funded by
   Consejeria de E conomia, Empresas y Empleo JCCM and FEDER (Fondo Europeo
   de Desarrollo Regional); the ECLIPSE project (Ministerio de Ciencia,
   Innovacion y Universidades, and Fondo Europeo de Desarrollo Regional
   FEDER, RTI2018-094283-B-C31); and the TESTIMO project (Consejeria de
   Educacion, Cultura y Deportes de la Junta de Comunidades de Castilla La
   Mancha, and the Fondo Europeo de Desarrollo Regional FEDER,
   SBPLY/17/180501/000503).
CR [Anonymous], 2017, 800060 ISOTS
   [Anonymous], 2017, 25011 ISOIEC TS
   [Anonymous], 2008, 25012 ISOIEC
   [Anonymous], 2016, 25023 ISOIEC
   [Anonymous], MEASURING SOFTWARE P
   [Anonymous], 2016, 25022 ISOIEC
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 25010 ISOIEC
   [Anonymous], 2014, 25051 ISOIEC
   [Anonymous], 2012, 25041 ISOIEC
   [Anonymous], 2007, 25020 ISOIEC
   [Anonymous], 2011, 25040 ISOIEC
   [Anonymous], 2015, 25024 ISOIEC
   [Anonymous], 2016, ASCSM 1 0 AUT SOURC
   Carretero AG, 2017, COMPUT STAND INTER, V54, P139, DOI 10.1016/j.csi.2016.11.008
   *ISO IEC, 1999, 145981 ISOIEC
   ISO/IEC, 2018, ISO/IEC 27000
   ISO/IEC, 2014, ISO/IEC 25000 Systems and software engineering-Systems and software Quality Requirements and Evaluation (SQuaRE)
   Rivas B, 2017, COMPUT STAND INTER, V54, P94, DOI 10.1016/j.csi.2016.10.004
   Rodriguez M., 2015, Quality Progress, V48, P30
   Rodriguez M., 2016, Software Quality Professionals, V18, P18
   Rodríguez M, 2019, IEEE SOFTWARE, V36, P13, DOI 10.1109/MS.2018.2883354
NR 22
TC 2
Z9 3
U1 1
U2 28
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 965
EP 985
DI 10.1007/s11219-019-09494-x
EA APR 2020
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000529321800003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Huang, WL
   Özoguz, S
   Peleska, J
AF Huang, Wen-ling
   Oezoguz, Sadik
   Peleska, Jan
TI Safety-complete test suites
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Complete testing theories; Safety
AB In this paper, a novel safety-related variant of complete test suites for finite state machines is introduced. Under certain hypotheses which are similar to the ones used in the well-known W-Method and its improved versions, the new method guarantees to uncover every violation of safety properties from a certain well-defined class, while erroneous behaviour without safety relevance may remain undetected. While the method can be based on any of the known complete strategies for FSM testing, its most effective variant is based on the H-method, and this variant is presented in detail, denoted as the Safety-complete H-Method. It is guaranteed that application of the Safety-complete H-Method always results in less or equally many test cases than when applying the original H-Method. In well-defined situations that can be pre-determined from the reference model, the Safety-complete H-Method leads to a substantial reduction of test cases in comparison to the size of the analogous H test suites. We advocate this new test suite for situations, where exhaustive testing of the complete system is too expensive. In these cases, strong guarantees with respect to fault coverage should only be given for the errors representing safety violations, while it may be considered as acceptable if less critical errors remain undetected.
C1 [Huang, Wen-ling; Oezoguz, Sadik; Peleska, Jan] Univ Bremen, Dept Math & Comp Sci, Bremen, Germany.
C3 University of Bremen
RP Peleska, J (corresponding author), Univ Bremen, Dept Math & Comp Sci, Bremen, Germany.
EM huang@cs.uni-bremen.de; sadik@cs.uni-bremen.de; jp@cs.uni-bremen.de
CR Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dorofeeva R, 2005, LECT NOTES COMPUT SC, V3731, P204
   Fernandez J. -C., 2003, LNCS, P147
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   Haxthausen AE, 2000, IEEE T SOFTWARE ENG, V26, P687, DOI 10.1109/32.879808
   Huang W. L., 2014, D343 COMPASS
   Huang WL, 2017, LECT NOTES COMPUT SC, V10533, P145, DOI 10.1007/978-3-319-67549-7_9
   Huang WL, 2017, FORM ASP COMPUT, V29, P335, DOI 10.1007/s00165-016-0402-2
   Jorgensen P.C., 2017, The Craft of Model-Based Testing
   Li S., 2004, LNI, V58, P191
   LUO G, 1994, IEEE T SOFTWARE ENG, V20, P149, DOI 10.1109/32.265636
   Luo G, 1995, SELECTING TEST SEQUE, P95
   Machado PDL, 2007, ELECTRON NOTES THEOR, V184, P3, DOI 10.1016/j.entcs.2007.06.001
   Peleska J., 2017, TEST AUTOMATION FDN
   Petrenko A., 1993, IFIP Transactions C (Communication Systems), VC-19, P363
   Prasad Sistla A., 1994, Formal Aspects of Computing, V6, P495, DOI 10.1007/BF01211865
   Safra S., 1988, 29th Annual Symposium on Foundations of Computer Science (IEEE Cat. No.88CH2652-6), P319, DOI 10.1109/SFCS.1988.21948
   Simao A, 2012, SOFTW TEST VERIF REL, V22, P435, DOI 10.1002/stvr.452
   Vasilevskii M. P., 1973, Cybernetics, V9, P653, DOI 10.1007/BF01068590
NR 20
TC 4
Z9 4
U1 1
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 589
EP 613
DI 10.1007/s11219-018-9421-y
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Lenhard, J
   Blom, M
   Herold, S
AF Lenhard, Jorg
   Blom, Martin
   Herold, Sebastian
TI Exploring the suitability of source code metrics for indicating
   architectural inconsistencies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Architectural inconsistencies; Software architecture degradation;
   Reflexion modeling; Source code metrics; Code anomalies; Multi-case
   study
ID SOFTWARE ARCHITECTURE; DESIGN; CHECKING; EROSION
AB Software architecture degradation is a phenomenon that frequently occurs during software evolution. Source code anomalies are one of the several aspects that potentially contribute to software architecture degradation. Many techniques for automating the detection of such anomalies are based on source code metrics. It is, however, unclear how accurate these techniques are in identifying the architecturally relevant anomalies in a system. The objective of this paper is to shed light on the extent to which source code metrics on their own can be used to characterize classes contributing to software architecture degradation. We performed a multi-case study on three open-source systems for each of which we gathered the intended architecture and data for 49 different source code metrics taken from seven different code quality tools. This data was analyzed to explore the links between architectural inconsistencies, as detected by applying reflexion modeling, and metric values indicating potential design problems at the implementation level. The results show that there does not seem to be a direct correlation between metrics and architectural inconsistencies. For many metrics, however, classes more problematic as indicated by their metric value seem significantly more likely to contribute to inconsistencies than less problematic classes. In particular, the fan-in, a classes' public API, and method counts seem to be suitable indicators. The fan-in metric seems to be a particularly interesting indicator, as class size does not seem to have a confounding effect on this metric. This finding may be useful for focusing code restructuring efforts on architecturally relevant metrics in case the intended architecture is not explicitly specified and to further improve architecture recovery and consistency checking tool support.
C1 [Lenhard, Jorg; Blom, Martin; Herold, Sebastian] Karlstad Univ, Dept Math & Comp Sci, Karlstad, Sweden.
C3 Karlstad University
RP Lenhard, J (corresponding author), Karlstad Univ, Dept Math & Comp Sci, Karlstad, Sweden.
EM joerg.lenhard@kau.se; martin.blom@kau.se; sebastian.herold@kau.se
RI Herold, Sebastian/N-3557-2015
OI Herold, Sebastian/0000-0002-3180-9182; Lenhard, Jorg/0000-0002-0107-2108
CR Ali N., 2012, P 8 INT ACM SIGSOFT, P23
   Ali N, 2018, EMPIR SOFTW ENG, V23, P224, DOI 10.1007/s10664-017-9515-3
   [Anonymous], 2012, P 11 ANN INT C ASP O
   [Anonymous], 2003, ALAN APT SERIES
   [Anonymous], 2016, R LANG ENV STAT COMP
   Bachmann F, 2005, IEE P-SOFTW, V152, P153, DOI 10.1049/ip-sen:20045037
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Barros MD, 2015, INFORM SOFTWARE TECH, V57, P684, DOI 10.1016/j.infsof.2014.07.015
   Bholanath R, 2015, THESIS
   Brewer MB, 2014, HANDBOOK OF RESEARCH METHODS IN SOCIAL AND PERSONALITY PSYCHOLOGY, SECOND EDITION, P11
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Brunet J., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P257, DOI 10.1109/WCRE.2012.35
   Brunet J, 2015, IEEE SOFTWARE, V32, P30, DOI 10.1109/MS.2014.106
   Buckley J., 2013, P 35 INT C SOFTW ENG
   Buckley J, 2015, INFORM SOFTWARE TECH, V61, P107, DOI 10.1016/j.infsof.2015.01.011
   Campbell G., 2013, SONARQUBE IN ACTION
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Dalgarno M., 2009, METHODS TOOLS, V17, P27
   Daniel Wayne W., 1990, Applied Nonparametric Statistics, V2nd, P358
   de Moor O, 2008, QL OBJECT ORIENTED Q, P78
   de Silva L, 2012, J SYST SOFTWARE, V85, P132, DOI 10.1016/j.jss.2011.07.036
   Deiters C, 2009, IEEE INT ENTERP DIST, P183, DOI 10.1109/EDOC.2009.15
   Ding W, 2014, IEEE INT C ENG COMP, P136, DOI 10.1109/ICECCS.2014.26
   DOBRICA L, 1951, IEEE TRANSACTIONS ON, V28, P638
   Duszynski S, 2009, EUR CON SFTWR MTNCE, P323, DOI 10.1109/CSMR.2009.52
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   Emam KE, 2001, IEEE T SOFTWARE ENG, V27, P630, DOI 10.1109/32.935855
   Ericsson M., 2012, INT J INFORM QUALITY, V3, P49, DOI DOI 10.1504/IJIQ.2012.050049
   Farago C., 2015, 8 INT C ADV SOFTW EN
   Fontana FA, 2015, INT WORKS EMERG TREN, P44, DOI 10.1109/WETSoM.2015.14
   Foster JS, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P83, DOI 10.1145/1251535.1251549
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Garcia J, 2009, CATALOGUE ARCHITECTU, P146
   Godfrey MichaelW., 2000, P 2000 INT S CONSTR, P15
   Hall GA, 2000, J SYST SOFTWARE, V54, P111, DOI 10.1016/S0164-1212(00)00031-5
   Herold S, 2016, ACM PROCEEDINGS OF THE 10TH EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ECSA-W), DOI 10.1145/2993412.3003396
   Herold S, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P565, DOI 10.1109/SANER.2015.7081878
   Herold S, 2013, 2013 5TH INTERNATIONAL WORKSHOP ON MODELING IN SOFTWARE ENGINEERING (MISE), P24, DOI 10.1109/MiSE.2013.6595292
   Hochstein L, 2005, INFORM SOFTWARE TECH, V47, P643, DOI 10.1016/j.infsof.2004.11.005
   IEEE, 1998, 10611998R2009 IEEE
   Knodel J, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P43
   Knodel Jens, 2007, 2007 WORKING IEEEIFI, P12, DOI 10.1109/wicsa.2007.1
   Lanza Michele., 2005, Object-Oriented Metrics in Practice
   LENHARD J, 2017, P 11 EUR C SOFTW, pNI143, DOI DOI 10.1145/3129790.3129808
   Letouzey JL, 2012, 3 INT WORKSH MAN TEC
   Macia I., 2012, 16 EUR C SOFTW MAIN
   Mair Matthias, 2014, P WICSA 2014 COMP VO
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Mattsson A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2089116.2089120
   Murphy GC, 2001, IEEE T SOFTWARE ENG, V27, P364, DOI 10.1109/32.917525
   Oizumi Willian, 2016, 38 IEEE INT C SOFTW
   OLSSON T, 2017, P 11 EUR C SOFTW, pNI157, DOI DOI 10.1145/3129790.3129810
   Passos L, 2010, IEEE SOFTWARE, V27, P82, DOI 10.1109/MS.2009.117
   Perry D. E., 1992, SIGSOFT Software Engineering Notes, V17, P40, DOI 10.1145/141874.141884
   Raza A., 2006, BAUHAUS TOOL SUITE P, P71
   Rosik J, 2011, SOFTWARE PRACT EXPER, V41, P63, DOI 10.1002/spe.999
   Rozanski N., 2005, SOFTWARE SYSTEMS ARC
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Sangal N, 2005, ACM SIGPLAN NOTICES, V40, P167, DOI 10.1145/1103845.1094824
   Sarkar S, 2009, IEEE SOFTWARE, V26, P28, DOI 10.1109/MS.2009.42
   SHAPIRO S, 2011, BIOMETRIKA, V52, P591
   Sommerville I., 2010, SOFTWARE ENG
   Spinellis D, 2005, IEEE SOFTWARE, V22, P9, DOI 10.1109/MS.2005.111
   Spinellis D, 2012, IEEE SOFTWARE, V29, P100, DOI 10.1109/MS.2012.61
   Taylor Richard N., 2009, Software architecture: foundations, theory, and practice
   UPTON GJG, 1992, J ROY STAT SOC A STA, V155, P395, DOI 10.2307/2982890
   van Gurp J, 2005, J SOFTW MAINT EVOL-R, V17, P277, DOI 10.1002/smr.313
   van Gurp J, 2002, J SYST SOFTWARE, V61, P105, DOI 10.1016/S0164-1212(01)00152-2
NR 68
TC 17
Z9 18
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 241
EP 274
DI 10.1007/s11219-018-9404-z
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000007
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Mendes, E
   Rodriguez, P
   Freitas, V
   Baker, S
   Atoui, MA
AF Mendes, Emilia
   Rodriguez, Pilar
   Freitas, Vitor
   Baker, Simon
   Atoui, Mohamed Amine
TI Towards improving decision making and estimating the value of decisions
   in value-based software engineering: the VALUE framework
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 11th International Conference on Predictive Models and Data Analytics in
   Software Engineering (PROMISE)
CY OCT 21, 2015
CL Beijing, PEOPLES R CHINA
DE Value-based software engineering (VBSE); Value estimation;
   Decision-making; Bayesian networks; Stakeholders value propositions;
   Decision-making tool
ID BAYESIAN NETWORKS; PRODUCT VALUE; PREDICTION; VALIDATION; MODEL
AB To sustain growth, maintain competitive advantage and to innovate, companies must make a paradigm shift in which both short- and long-term value aspects are employed to guide their decision-making. Such need is clearly pressing in innovative industries, such as ICT, and is also the core of Value-based Software Engineering (VBSE). The goal of this paper is to detail a framework called VALUE-improving decision-making relating to software-intensive products and services development-and to show its application in practice to a large ICT company in Finland. The VALUE framework includes a mixed-methods approach, as follows: to elicit key stakeholders' tacit knowledge regarding factors used during a decision-making process, either transcripts from interviews with key stakeholders are analysed and validated in focus group meetings or focus-group meeting(s) are directly applied. These value factors are later used as input to a Web-based tool (Value tool) employed to support decision making. This tool was co-created with four industrial partners in this research via a design science approach that includes several case studies and focus-group meetings. Later, data on key stakeholders' decisions gathered using the Value tool, plus additional input from key stakeholders, are used, in combination with the Expert-based Knowledge Engineering of Bayesian Network (EKEBN) process, coupled with the weighed sum algorithm (WSA) method, to build and validate a company-specific value estimation model. The application of our proposed framework to a real case, as part of an ongoing collaboration with a large software company (company A), is presented herein. Further, we also provide a detailed example, partially using real data on decisions, of a value estimation Bayesian network (BN) model for company A. This paper presents some empirical results from applying the VALUE Framework to a large ICT company; those relate to eliciting key stakeholders' tacit knowledge, which is later used as input to a pilot study where these stakeholders employ the Value tool to select features for one of their company's chief products. The data on decisions obtained from this pilot study is later applied to a detailed example on building a value estimation BN model for company A. We detail a framework-VALUE framework-to be used to help companies improve their value-based decisions and to go a step further and also estimate the overall value of each decision.
C1 [Mendes, Emilia] Univ Oulu, Oulu, Finland.
   [Rodriguez, Pilar; Freitas, Vitor; Atoui, Mohamed Amine] Univ Oulu, Dept Informat Proc Sci, Oulu, Finland.
   [Mendes, Emilia; Atoui, Mohamed Amine] Blekinge Inst Technol, Oulu, Finland.
   [Baker, Simon] Univ Cambridge, Comp Lab, Cambridge, England.
   [Atoui, Mohamed Amine] Univ Cambridge, Cambridge, England.
C3 University of Oulu; University of Oulu; University of Cambridge;
   University of Cambridge
RP Mendes, E (corresponding author), Univ Oulu, Oulu, Finland.; Mendes, E (corresponding author), Blekinge Inst Technol, Oulu, Finland.
EM emilia.mendes@oulu.fi; pilar.rodriguez@oulu.fi; vitor.freitas@oulu.fi;
   simon.baker@cl.cam.ac.uk; amine.atoui@gmail.com
RI Atoui, M. Amine/KBC-3851-2024; Rodriguez, Pilar/HSE-9989-2023; Mendes,
   Maria E/B-4207-2015
OI Baker, Simon/0000-0002-0998-438X; Mendes, Emilia/0000-0003-0449-5322
FU Tekes
FX We would like to thank company A for its commitment and for the in-kind
   time that has been provided thus far as part of our collaboration. We
   would also like to thank the reviewers for their very insightful
   comments and suggestions. This work is funded by Tekes under the FiDiPro
   VALUE project.
CR Achimugu P, 2014, INFORM SOFTWARE TECH, V56, P568, DOI 10.1016/j.infsof.2014.02.001
   Alegroth E., 2013, P SEKE 2013, P1
   [Anonymous], HARVARD BUSINESS REV
   [Anonymous], 2002, Numerical Analysis: Mathematics of Scientific Computing
   Arent J., 2000, P 33 ANN HAW INT C S, P1
   Aurum A., 2003, Managing Software Engineering Knowledge
   Baker S., 2009, CONSTRUCTION LARGE B
   Baker S, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P319
   Barney S., 2006, SEAA 06 32 EUROMICRO
   Barney S, 2008, J SYST ARCHITECT, V54, P576, DOI 10.1016/j.sysarc.2007.12.004
   Barney S, 2009, IEEE SOFTWARE, V26, P84, DOI 10.1109/MS.2009.89
   Biffl S., 2005, Value-Based Software Engineering
   Boehm B., 2003, ACM SIGSOFT Software Engineering Notes, V28, P3, DOI DOI 10.1145/638750.638775
   Castro Oscar, 2012, Product-Focused Software Process Improvement. Proceedings 13th International Conference (PROFES 2012), P74, DOI 10.1007/978-3-642-31063-8_7
   Chermack T., 2003, ADV DEV HUM RESOUR, V5, P408, DOI [10.1177/1523422303257373, DOI 10.1177/1523422303257373]
   Chin KS, 2009, EXPERT SYST APPL, V36, P9879, DOI 10.1016/j.eswa.2009.02.019
   Darwiche A, 2010, COMMUN ACM, V53, P80, DOI 10.1145/1859204.1859227
   Das B., 2004, GENERATING CONDITION
   Davern M, 2013, HEALTH SERV RES, V48, P905, DOI 10.1111/1475-6773.12070
   del Aguila IM, 2016, REQUIR ENG, V21, P461, DOI 10.1007/s00766-015-0225-3
   Drost E. A., 2011, ED RES PERSPECTIVES, V38, P105, DOI [10.3316/ielapa.491551710186460, DOI 10.3316/INFORMIT.491551710186460]
   Dybå T, 2003, MANAGING SOFTWARE ENGINEERING KNOWLEDGE, P95
   Easterbrook S., 2008, GUIDE ADV EMPIRICAL, P285, DOI [DOI 10.1007/978-1-84800-044-5_11, DOI 10.1007/978-1-84800-044-511]
   Fabri J.A., 2011, P ICTON JUN, P1
   Fenton N, 2004, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2004.1317462
   Fenton N., 2005, RES REPORT
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Fenton NE, 2007, IEEE T KNOWL DATA EN, V19, P1420, DOI 10.1109/TKDE.2007.1068
   Fogelstrom N.D., 2010, THESIS
   Foos T., 2006, Journal of Knowledge Management, V10, P6, DOI 10.1108/13673270610650067
   Fouad A, 2011, SOFTWARE QUAL J, V19, P411, DOI 10.1007/s11219-010-9122-7
   Freitas V., 2016, P EUR 2016 UNPUB
   Garvin D., 1998, HARVARD BUSINESS REV
   Ghazinoory S, 2014, J INTELL FUZZY SYST, V26, P625, DOI 10.3233/IFS-120755
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Hamzah Muzaffar, 2010, 2010 2nd IEEE International Conference on Information Management and Engineering (ICIME 2010), P267, DOI 10.1109/ICIME.2010.5477827
   Hayes JH, 2006, EMPIR SOFTW ENG, V11, P493, DOI 10.1007/s10664-006-9025-1
   Heckerman D, 1996, IEEE T SYST MAN CY A, V26, P826, DOI 10.1109/3468.541341
   Heckerman D., 1995, MSRTR9506
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Holland S, 2011, SOFTWARE QUAL J, V19, P393, DOI 10.1007/s11219-010-9121-8
   Jan Najeeb, 2010, THESIS
   Jensen FV, 1996, INTRO BAYESIAN NETWO
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   Khurum M, 2012, J SOFTWARE EVOLUTION, V25, P711
   Kopec JA, 2010, BMC PUBLIC HEALTH, V10, DOI 10.1186/1471-2458-10-710
   Lempert R, 2004, CLIMATIC CHANGE, V65, P1, DOI 10.1023/B:CLIM.0000037561.75281.b3
   Lindgren M., 2008, P 9 INT C PROD FOC S
   Lindgren M, 2008, ASWEC 2008: 19TH AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P320, DOI 10.1109/ASWEC.2008.32
   McElroy T, 2007, JUDGM DECIS MAK, V2, P48
   Mendes E., 2015, P PROMISE 15
   Mendes E, 2012, PROC INT CONF SOFTW, P1112, DOI 10.1109/ICSE.2012.6227108
   Mendes E, 2008, IEEE T SOFTWARE ENG, V34, P723, DOI 10.1109/TSE.2008.64
   Mendes Emilia., 2014, PRACTITIONERS KNOWLE
   Misirli AT, 2014, IEEE T SOFTWARE ENG, V40, P533, DOI 10.1109/TSE.2014.2321179
   Mohamed SI, 2008, IN C IND ENG ENG MAN, P2196, DOI 10.1109/IEEM.2008.4738261
   Nageswarao M., 2016, INT J COMPUTER APPL, V134
   Neil M., 2003, Software Engineering with Computational Intelligence
   Neil M, 1996, P 21 ANN SOFTW ENG W, P217
   Nonaka I., 2003, Knowledge Management Research & Practice, V1, P2, DOI 10.1057/palgrave.kmrp.8500001
   Pearl J., 1988, PROBABILISTIC REASON
   Perry DE., 2000, P C FUT SOFTW ENG, P345, DOI DOI 10.1145/336512.336586
   Radlinski Lukasz, 2010, International Journal of Software Engineering and Computing, V2, P95
   Ramos MCP, 2015, VALUE HEALTH, V18, P512, DOI 10.1016/j.jval.2014.12.014
   Read Jesse, 2010, THESIS
   Rodriguez P., 2016, IDENTIFYING KE UNPUB
   Sargent RG, 2013, J SIMUL, V7, P12, DOI [10.1109/WSC.1998.744907, 10.1057/jos.2012.20]
   Schneider K., 2009, Experience and knowledge management in software engineering
   Shadbolt N.R., 2015, Evaluation of Human Work, V4th, DOI DOI 10.1201/B18362
   Shaw M., 2003, P ICSE 2003
   Shen-Hsieh A., 2002, P C HUM FACT COMP SY, P1
   Steiger David M., 2010, International Journal of Business Intelligence Research, V1, P29, DOI 10.4018/jbir.2010071703
   Steiger D.M, 2007, SYST SCI HICSS 2007, p204a
   Strauss E, 1998, CLIN ORTHOP RELAT R, P2
   Tang Z, 2007, J COMPUT CIVIL ENG, V21, P265, DOI 10.1061/(ASCE)0887-3801(2007)21:4(265)
   Tosun A., 2015, SOFTW QUAL J, P1
   TVERSKY A, 1974, SCIENCE, V185, P1124, DOI 10.1126/science.185.4157.1124
   Tversky A., 1982, JUDGMENT UNCERTAINTY, V1982
   Tversky A., 1982, Judgment under uncertainty: Heuristics and biases, P84, DOI DOI 10.21236/ADA099502
   Urquhart C., 2013, Grounded Theory for Qualitative Research: A PracticalGuide
   van der Gaag LC, 1999, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, PROCEEDINGS, P647
   Weinstein MC, 2003, VALUE HEALTH, V6, P9, DOI 10.1046/j.1524-4733.2003.00234.x
   Wieringa RJ, 2006, REQUIR ENG, V11, P295, DOI 10.1007/s00766-006-0037-6
   Wnuk K., 2015, P KKIO 2015
   Wohlin C, 2006, VALUE-BASED SOFTWARE ENGINEERING, P179, DOI 10.1007/3-540-29263-2_9
   Woodberry O, 2004, LECT NOTES ARTIF INT, V3339, P1101
   Zhou Y., 2015, THESIS
NR 87
TC 12
Z9 14
U1 2
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 607
EP 656
DI 10.1007/s11219-017-9360-z
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA GH6AN
UT WOS:000433521200015
OA hybrid
DA 2024-07-18
ER

PT J
AU Stocco, A
   Leotta, M
   Ricca, F
   Tonella, P
AF Stocco, Andrea
   Leotta, Maurizio
   Ricca, Filippo
   Tonella, Paolo
TI APOGEN: automatic page object generator for web testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Web testing; End-to-end testing; Page object pattern; Reverse
   engineering; Selenium WebDriver; Clustering
AB Modern web applications are characterized by ultra-rapid development cycles, and web testers tend to pay scant attention to the quality of their automated end-to-end test suites. Indeed, these quickly become hard to maintain, as the application under test evolves. As a result, end-to-end automated test suites are abandoned, despite their great potential for catching regressions. The use of the Page Object pattern has proven to be very effective in end-to-end web testing. Page objects are fa double dagger ade classes abstracting the internals of web pages into high-level business functions that can be invoked by the test cases. By decoupling test code from web page details, web test cases are more readable and maintainable. However, the manual development of such page objects requires substantial coding effort, which is paid off only later, during software evolution. In this paper, we describe a novel approach for the automatic generation of page objects for web applications. Our approach is implemented in the tool Apogen, which automatically derives a testing model by reverse engineering the target web application. It combines clustering and static analysis to identify meaningful page abstractions that are automatically turned into Java page objects for Selenium WebDriver. Our evaluation on an open-source web application shows that our approach is highly promising: Automatically generated page object methods cover most of the application functionalities and result in readable and meaningful code, which can be very useful to support the creation of more maintainable web test suites.
C1 [Stocco, Andrea; Leotta, Maurizio; Ricca, Filippo] Univ Genoa, DIBRIS, Genoa, Italy.
   [Tonella, Paolo] Fdn Bruno Kessler, Trento, Italy.
C3 University of Genoa; Fondazione Bruno Kessler
RP Stocco, A (corresponding author), Univ Genoa, DIBRIS, Genoa, Italy.
EM andrea.stocco@dibris.unige.it; maurizio.leotta@unige.it;
   filippo.ricca@unige.it; tonella@fbk.eu
RI Stocco, Andrea/GVT-6917-2022; Ricca, Filippo/ABB-3276-2020; Stocco,
   Andrea/I-7081-2019; Leotta, Maurizio/I-8145-2014; Tonella,
   Paolo/C-1702-2015
OI Stocco, Andrea/0000-0001-8956-3894; Stocco, Andrea/0000-0001-8956-3894;
   Leotta, Maurizio/0000-0001-5267-0602; ricca,
   filippo/0000-0002-3928-5408; Tonella, Paolo/0000-0003-3088-0339
CR AKAIKE H, 1981, J ECONOMETRICS, V16, P3, DOI 10.1016/0304-4076(81)90071-3
   [Anonymous], 2015, 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST)
   [Anonymous], 2007, SOC IND APPL MATH
   [Anonymous], 2011, P 20 INT C WORLD WID
   Binder R. V., 1996, Software Testing, Verification and Reliability, V6, P125, DOI 10.1002/(SICI)1099-1689(199609/12)6:3/4<125::AID-STVR121>3.0.CO;2-X
   Choudhary S. R., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P171, DOI 10.1109/ICST.2012.97
   Choudhry S, 2010, PHARMACOGENET GENOM, V20, P351, DOI 10.1097/FPC.0b013e328337f992
   Christophe L., 2014, P 30 INT C SOFTW MAI
   Crescenzi V, 2005, DATA KNOWL ENG, V54, P279, DOI 10.1016/j.datak.2004.11.004
   De Lucia A, 2009, J WEB ENG, V8, P346
   Di Lucca GA, 2004, J SOFTW MAINT EVOL-R, V16, P71, DOI 10.1002/smr.281
   Dyutiman Choudhary Dyutiman Choudhary, 2011, Pro-poor value chain development for high value products in mountain regions: Indian Bay Leaf
   Fewster M., 1999, Software test automation: effective use of test execution tools
   Fowler M, 2013, Pageobject
   Gao ZB, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P565, DOI 10.1109/ISSRE.2015.7381848
   Hammoudi M., 2016, P 24 ACM SIGSOFT INT
   Hammoudi Mouna, 2016, P 9 INT C SOFTW TEST
   Kaufman L., 2009, FINDING GROUPS DATA
   Ketchen DJ, 2008, ORGAN RES METHODS, V11, P643, DOI 10.1177/1094428108319843
   Leotta M, 2016, ADV COMPUT, V101, P193, DOI 10.1016/bs.adcom.2015.11.007
   Leotta M, 2016, J SOFTW-EVOL PROC, V28, P177, DOI 10.1002/smr.1771
   Leotta M, 2014, 2014 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P449, DOI 10.1109/ISSREW.2014.17
   Leotta M, 2014, LECT NOTES COMPUT SC, V8541, P322, DOI 10.1007/978-3-319-08245-5_19
   Leotta M, 2013, IEEE ICST WORKSHOP, P108, DOI 10.1109/ICSTW.2013.19
   Leotta M, 2013, WORK CONF REVERSE EN, P272, DOI 10.1109/WCRE.2013.6671302
   Marchetto Alessandro, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P121, DOI 10.1109/ICST.2008.22
   Mesbah A, 2012, ACM T WEB, V6, DOI 10.1145/2109205.2109208
   Mesbah A, 2012, IEEE T SOFTWARE ENG, V38, P35, DOI 10.1109/TSE.2011.28
   Mesbah A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P561, DOI 10.1145/1985793.1985870
   Nguyen BN, 2014, AUTOMAT SOFTW ENG, V21, P65, DOI 10.1007/s10515-013-0128-9
   Ramler R., 2006, P 2006 INT WORKSHOP, P85, DOI DOI 10.1145/1138929.1138946
   Ricca F, 2004, PROC IEEE INT CONF S, P474, DOI 10.1109/ICSM.2004.1357838
   Ricca F, 2001, PROC INT CONF SOFTW, P25, DOI 10.1109/ICSE.2001.919078
   Ricca F, 2008, J SOFTW MAINT EVOL-R, V20, P1, DOI 10.1002/smr.360
   ROUSSEEUW PJ, 1987, J COMPUT APPL MATH, V20, P53, DOI 10.1016/0377-0427(87)90125-7
   Sacramento C, 2014, 2014 9TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P105, DOI 10.1109/QUATIC.2014.20
   Sampath S, 2012, ADV COMPUT, V86, P87, DOI 10.1016/B978-0-12-396535-6.00003-X
   SCHWARZ G, 1978, ANN STAT, V6, P461, DOI 10.1214/aos/1176344136
   Stocco A, 2016, LECT NOTES COMPUT SC, V9671, P132, DOI 10.1007/978-3-319-38791-8_8
   Stocco A, 2015, 10TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST AST 2015, P70, DOI 10.1109/AST.2015.26
   Thummalapenta S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1002, DOI 10.1109/ICSE.2013.6606650
   Tombros A, 2005, LECT NOTES COMPUT SC, V3408, P487
   Tonella P, 2003, FIFTH IEEE INTERNATIONAL WORKSHOP ON WEB SITE EVOLUTION THEME: ARCHITECTURE, PROCEEDINGS, P41, DOI 10.1109/WSE.2003.1234007
   Tonella P, 2003, FIFTH IEEE INTERNATIONAL WORKSHOP ON WEB SITE EVOLUTION THEME: ARCHITECTURE, PROCEEDINGS, P33, DOI 10.1109/WSE.2003.1234006
   Tonella P, 2014, ADV COMPUT, V93, P1, DOI 10.1016/B978-0-12-800162-2.00001-4
   van Deursen A., 2015, QUEUE, V13
   Van Deursen A, 2015, COMMUN ACM, V58, P36, DOI 10.1145/2755501
   Witten I. H., 2011, ROBUST TEST AUTOMATI
NR 48
TC 34
Z9 35
U1 0
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 1007
EP 1039
DI 10.1007/s11219-016-9331-9
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300013
DA 2024-07-18
ER

PT J
AU Goulao, M
   Amaral, V
   Mernik, M
AF Goulao, Miguel
   Amaral, Vasco
   Mernik, Marjan
TI Quality in model-driven engineering: a tertiary study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality; Model-driven engineering; Tertiary study
ID SYSTEMATIC LITERATURE-REVIEWS; CODE GENERATION; UML; MDE
AB Model-driven engineering (MDE) is believed to have a significant impact in software quality. However, researchers and practitioners may have a hard time locating consolidated evidence on this impact, as the available information is scattered in several different publications. Our goal is to aggregate consolidated findings on quality in MDE, facilitating the work of researchers and practitioners in learning about the coverage and main findings of existing work as well as identifying relatively unexplored niches of research that need further attention. We performed a tertiary study on quality in MDE, in order to gain a better understanding of its most prominent findings and existing challenges, as reported in the literature. We identified 22 systematic literature reviews and mapping studies and the most relevant quality attributes addressed by each of those studies, in the context of MDE. Maintainability is clearly the most often studied and reported quality attribute impacted by MDE. Eighty out of 83 research questions in the selected secondary studies have a structure that is more often associated with mapping existing research than with answering more concrete research questions (e.g., comparing two alternative MDE approaches with respect to their impact on a specific quality attribute). We briefly outline the main contributions of each of the selected literature reviews. In the collected studies, we observed a broad coverage of software product quality, although frequently accompanied by notes on how much more empirical research is needed to further validate existing claims. Relatively, little attention seems to be devoted to the impact of MDE on the quality in use of products developed using MDE.
C1 [Goulao, Miguel; Amaral, Vasco] Univ Nova Lisboa, Dept Informat, NOVA LINCS, Lisbon, Portugal.
   [Mernik, Marjan] Univ Maribor, Fac Elect Engn & Comp Sci, Maribor, Slovenia.
C3 Universidade Nova de Lisboa; University of Maribor
RP Goulao, M (corresponding author), Univ Nova Lisboa, Dept Informat, NOVA LINCS, Lisbon, Portugal.
EM mgoul@fct.unl.pt; vma@fct.unl.pt; marjan.mernik@um.si
RI Goulão, Miguel/AAB-8223-2020; Mernik, Marjan/A-1147-2008; Amaral,
   Vasco/A-7031-2010
OI Goulão, Miguel/0000-0002-5356-5203; Mernik, Marjan/0000-0002-2775-0667;
   Amaral, Vasco/0000-0003-3791-5151
FU FCT/MEC NOVA LINCS [PEst UID/CEC/04516/2013]
FX The authors would like to thank FCT/MEC NOVA LINCS PEst
   UID/CEC/04516/2013 for the financial support to this work.
CR [Anonymous], 1 INT WORKSH HUM FAC
   [Anonymous], 2007, GUIDELINES PERFORMIN
   [Anonymous], SOFTWARE DATA TECHNO
   [Anonymous], 2014, 2014 JOINT IEEE INT, DOI DOI 10.1109/ISAF.2014.6922972
   [Anonymous], 3 WORKSH EXTR MOD XM
   [Anonymous], 2007, P 2014 EUR C SOFTW A, DOI DOI 10.1145/2642803.2642825
   [Anonymous], 2013, IFIP INT C OPEN SOUR
   [Anonymous], 2008, SYSTEMATIC REV SOCIA
   [Anonymous], 2008, PROC 12 INT C EVAL A
   [Anonymous], 23 IEEE INT REQ ENG
   [Anonymous], 2005, ESELAW
   [Anonymous], 2010, 5 WORKSH COD CENTR M
   Brereton P, 2007, J SYST SOFTWARE, V80, P571, DOI 10.1016/j.jss.2006.07.009
   Budgen D, 2011, SOFTWARE PRACT EXPER, V41, P363, DOI 10.1002/spe.1009
   Budgen D, 2008, EMPIR SOFTW ENG, V13, P435, DOI 10.1007/s10664-008-9075-7
   Cruzes DS, 2011, INFORM SOFTWARE TECH, V53, P440, DOI 10.1016/j.infsof.2011.01.004
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   Domínguez E, 2012, INFORM SOFTWARE TECH, V54, P1045, DOI 10.1016/j.infsof.2012.04.008
   Dybå T, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P178
   Fernández-Sáez AM, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P292, DOI 10.1109/MODELS.2015.7338260
   Genero M, 2011, J DATABASE MANAGE, V22, P46, DOI 10.4018/jdm.2011070103
   Giachetti G., 2012, Research Challenges in Information Science (RCIS), 2012 Sixth International Conference on, P1
   Giraldo FD, 2015, INT CONF RES CHAL, P64, DOI 10.1109/RCIS.2015.7128864
   González CA, 2014, INFORM SOFTWARE TECH, V56, P821, DOI 10.1016/j.infsof.2014.03.003
   Hirsch JE, 2005, P NATL ACAD SCI USA, V102, P16569, DOI 10.1073/pnas.0507655102
   Hutchinson J, 2014, SCI COMPUT PROGRAM, V89, P144, DOI 10.1016/j.scico.2013.03.017
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   ISO and IEC, 2011, ISO/IEC 25010:2011, P34
   Jensen J., 2011, 2011 Sixth International Conference on Availability, Reliability and Security, P704, DOI 10.1109/ARES.2011.110
   Kitchenham BA, 2004, PROC INT CONF SOFTW, P273
   Kitchenham B, 2010, INFORM SOFTWARE TECH, V52, P792, DOI 10.1016/j.infsof.2010.03.006
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kitchenham BA, 2011, INFORM SOFTWARE TECH, V53, P638, DOI 10.1016/j.infsof.2010.12.011
   Loniewski G, 2010, LECT NOTES COMPUT SC, V6395, P213, DOI 10.1007/978-3-642-16129-2_16
   Lucas FJ, 2009, INFORM SOFTWARE TECH, V51, P1631, DOI 10.1016/j.infsof.2009.04.009
   Malavolta I, 2014, EUROMICRO CONF PROC, P149, DOI 10.1109/SEAA.2014.61
   Mehmood A, 2013, INFORM SOFTWARE TECH, V55, P395, DOI 10.1016/j.infsof.2012.09.003
   Misbhauddin M, 2015, EMPIR SOFTW ENG, V20, P206, DOI 10.1007/s10664-013-9283-7
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   Mohagheghi P, 2007, EMPIR SOFTW ENG, V12, P471, DOI 10.1007/s10664-007-9040-x
   Mohagheghi P, 2013, EMPIR SOFTW ENG, V18, P89, DOI 10.1007/s10664-012-9196-x
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Nguyen PH, 2013, ASIA PAC SOFWR ENG, P432, DOI 10.1109/APSEC.2013.64
   OMG, 2015, OMG document number formal/2015-03-01
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   Sánchez Cuadrado J, 2006, LECT NOTES COMPUT SC, V4066, P158
   Cuadrado JS, 2014, SCI COMPUT PROGRAM, V89, P176, DOI 10.1016/j.scico.2013.04.007
   Santiago I, 2012, INFORM SOFTWARE TECH, V54, P1340, DOI 10.1016/j.infsof.2012.07.008
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Szvetits M, 2016, SOFTW SYST MODEL, V15, P31, DOI 10.1007/s10270-013-0394-9
   Torchiano M, 2013, J SYST SOFTWARE, V86, P2110, DOI 10.1016/j.jss.2013.03.084
   Whittle J, 2017, SOFTW SYST MODEL, V16, P313, DOI 10.1007/s10270-015-0487-8
   Agner LTW, 2013, J SYST SOFTWARE, V86, P997, DOI 10.1016/j.jss.2012.11.023
   WOHLIN Claes, 2014, P 18 INT C EVALUATIO, DOI [10.1145/2601248.2601268.10, 10.1145/2601248.2601268]
   Yu PP, 2015, INT CONF ASIC
   Yue T, 2011, REQUIR ENG, V16, P75, DOI 10.1007/s00766-010-0111-y
NR 56
TC 21
Z9 21
U1 2
U2 20
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 601
EP 633
DI 10.1007/s11219-016-9324-8
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400008
DA 2024-07-18
ER

PT J
AU Bayona-Oré, S
   Calvo-Manzano, JA
   Cuevas, G
   San-Feliu, T
AF Bayona-Ore, Sussy
   Calvo-Manzano, Jose A.
   Cuevas, Gonzalo
   San-Feliu, Tomas
TI Critical success factors taxonomy for software process deployment
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Critical success factors; Taxonomy; Process deployment; CMMI
ID PROCESS IMPROVEMENT; MOTIVATORS
AB Many organizations have adopted methods, models, and standards to improve their software processes. However, despite these efforts, they can still find it difficult to deploy processes throughout the organization because most of them focus more on the technical rather than human aspects. This paper proposes a taxonomy of critical success factors for software process deployment. A method to create this taxonomy was developed and applied based on a systematic review of existing literature and is complemented with industry experiences where software processes have been deployed or implemented. Finally, the categories, subcategories, and items of this taxonomy are presented.
C1 [Bayona-Ore, Sussy; Calvo-Manzano, Jose A.; Cuevas, Gonzalo; San-Feliu, Tomas] Univ Politecn Madrid, Fac Informat, Dept Lenguajes & Sistemas Informat & Ingn Softwar, E-28660 Madrid, Spain.
C3 Universidad Politecnica de Madrid
RP Bayona-Oré, S (corresponding author), Univ Politecn Madrid, Fac Informat, Dept Lenguajes & Sistemas Informat & Ingn Softwar, Campus Montegancedo, E-28660 Madrid, Spain.
EM sbayonao@hotmail.com; joseantonio.calvomanzano@upm.es;
   gcuevas@fi.upm.es; tomas.sanfeliu@upm.es
RI Calvo-Manzano, Jose A./K-9426-2013; San Feliu, Tomas/B-4515-2011
OI Calvo-Manzano, Jose A./0000-0002-2864-2203; San Feliu,
   Tomas/0000-0002-6104-7430
FU everis Foundation; Universidad Politecnica de Madrid through the
   Research Chair in Software Process Improvement for Spain and Latin
   American Region
FX This work was sponsored by everis Foundation and Universidad Politecnica
   de Madrid through the Research Chair in Software Process Improvement for
   Spain and Latin American Region.
CR [Anonymous], 1998, Software process improvement
   Ayala C., 2006, P 3 DOCT CONS 18 C A
   Baddoo N., 2002, Empirical Software Engineering, V7, P93, DOI 10.1023/A:1015203013834
   Baddoo N, 2003, J SYST SOFTWARE, V66, P23, DOI 10.1016/S0164-1212(02)00060-2
   Baddoo N, 2002, J SYST SOFTWARE, V62, P85, DOI 10.1016/S0164-1212(01)00125-X
   Bayona S., 2010, REV ESPANOLA INNOVAC, V6, P6
   Beecham S, 2003, EMPIR SOFTW ENG, V8, P7, DOI 10.1023/A:1021764731148
   Biolchini J, 2005, RTES67905 SOFTW ENG
   BRUNO D, 2003, INFORM MANAGEMENT J, V37, P48
   Bruno D., 2003, INFORM MANAGEMENT J, V37, P52
   Busch J., 2008, TEACHING TAXONOMY ME
   Centelles M., 2005, TAXONOMIAS CATEGORIZ
   Charters S., 2007, GUIDELINES PERFORMIN
   Chrissis M., 2007, CMMI 2 EDITION GUIDE
   Craig S., 2007, TAXONOMY INFORM SYST
   Crandall M., 2000, USING TAXONOMIES EFF
   Debar H, 2000, ANN TELECOMMUN, V55, P361
   Dybå T, 2005, IEEE T SOFTWARE ENG, V31, P410, DOI 10.1109/TSE.2005.53
   Dyba T., 2000, Empirical Software Engineering, V5, P357, DOI 10.1023/A:1009800404137
   El-Emam K., 2001, Empirical Software Engineering, V6, P207, DOI 10.1023/A:1011487332587
   GOLDENSON DR, 1995, CMUSEI95TR009
   Graef J., 2001, MANAGING TAXONOMIES
   Guerrero F, 2004, IEEE SOFTWARE, V21, P29, DOI 10.1109/MS.2004.3
   Hall T., 2002, Software Process Improvement and Practice, V7, P3, DOI 10.1002/spip.150
   Humphrey W., 1998, MANAGING SOFTWARE PR
   Kaltio T., 2000, Software Process Improvement and Practice, V5, P65, DOI 10.1002/(SICI)1099-1670(200003)5:1<65::AID-SPIP112>3.0.CO;2-R
   Lepasaar M., 2001, Product Focused Software Process Improvement. Third International Conference, PROFES 2001. Proceedings (Lecture Notes in Computer Science Vol.2188), P68
   Sussy BL, 2008, STUD COMPUT INTELL, V131, P147
   MacDonell S, 2010, IEEE T SOFTWARE ENG, V36, P676, DOI 10.1109/TSE.2010.28
   McDermid J. A., 1999, IEE Proceedings-Software, V146, P179, DOI 10.1049/ip-sen:19990618
   Messnarz Richard, 2008, Software Process: Improvement and Practice, V13, P355, DOI 10.1002/spip.397
   Montoni M, 2006, LECT NOTES COMPUT SC, V4034, P249
   Niazi M., 2006, Software Process Improvement and Practice, V11, P193, DOI 10.1002/spip.261
   Niazi M, 2005, J SYST SOFTWARE, V78, P204, DOI 10.1016/j.jss.2004.09.001
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Rainer A, 2002, J SYST SOFTWARE, V62, P71, DOI 10.1016/S0164-1212(01)00122-4
   Regli T., 2005, TAXONOMIES META DATA
   Stelzer D., 1998, Software Process Improvement and Practice, V4, P227, DOI 10.1002/(SICI)1099-1670(199812)4:4<227::AID-SPIP106>3.0.CO;2-1
   Valerio G., 2003, DESARROLLO TAXONOMIA
   Verity, 2004, CLASS TAX YOU
   Whittaker M., 2008, P WORLD LIB INF C 74
   Wilson D., 2007, J SYST SOFTWARE, V59, P135
NR 42
TC 33
Z9 37
U1 0
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2014
VL 22
IS 1
SI SI
BP 21
EP 48
DI 10.1007/s11219-012-9190-y
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB2SX
UT WOS:000331643500003
DA 2024-07-18
ER

PT J
AU Lämmel, R
   Zaytsev, V
AF Laemmel, Ralf
   Zaytsev, Vadim
TI Recovering grammar relationships for the Java Language Specification
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE Grammar convergence; Grammar transformation; Grammar recovery; Grammar
   extraction; Language documentation
ID TRANSFORMATION; SYNTAX; RULES; XML
AB Grammar convergence is a method that helps in discovering relationships between different grammars of the same language or different language versions. The key element of the method is the operational, transformation-based representation of those relationships. Given input grammars for convergence, they are transformed until they are structurally equal. The transformations are composed from primitive operators; properties of these operators and the composed chains provide quantitative and qualitative insight into the relationships between the grammars at hand. We describe a refined method for grammar convergence, and we use it in a major study, where we recover the relationships between all the grammars that occur in the different versions of the Java Language Specification (JLS). The relationships are represented as grammar transformation chains that capture all accidental or intended differences between the JLS grammars. This method is mechanized and driven by nominal and structural differences between pairs of grammars that are subject to asymmetric, binary convergence steps. We present the underlying operator suite for grammar transformation in detail, and we illustrate the suite with many examples of transformations on the JLS grammars. We also describe the extraction effort, which was needed to make the JLS grammars amenable to automated processing. We include substantial metadata about the convergence process for the JLS so that the effort becomes reproducible and transparent.
C1 [Laemmel, Ralf; Zaytsev, Vadim] Univ Koblenz Landau, Software Languages Team, Koblenz, Germany.
C3 University of Koblenz & Landau
RP Zaytsev, V (corresponding author), Univ Koblenz Landau, Software Languages Team, Koblenz, Germany.
EM laemmel@uni-koblenz.de; zaytsev@uni-koblenz.de
RI Zaytsev, Vadim/E-6712-2011
OI Zaytsev, Vadim/0000-0001-7764-4224; Lammel, Ralf/0000-0001-9946-4363
CR Alves TL, 2009, LECT NOTES COMPUT SC, V5452, P285, DOI 10.1007/978-3-642-00434-6_18
   Alves TL, 2005, LECT NOTES COMPUT SC, V3582, P399
   BARNARD D, 1981, 81125 QUEENS U, P23
   BARNARD DT, 1982, INT J COMPUT INF SCI, V11, P231, DOI 10.1007/BF00999442
   Berdaguer P, 2007, LECT NOTES COMPUT SC, V4354, P290
   Bouwers E, 2008, ELECTRON NOTES THEOR, V203, P85, DOI 10.1016/j.entcs.2008.03.046
   Cervelle Julien, 2009, Proceedings of the 2009 International Multiconference on Computer Science and Information Technology (IMCSIT), P651, DOI 10.1109/IMCSIT.2009.5352768
   Cicchetti A, 2008, IEEE INT ENTERP DIST, P222, DOI 10.1109/EDOC.2008.44
   Cleve A, 2006, LECT NOTES COMPUT SC, V4143, P409
   Cordy JR, 2003, PROG COMPREHEN, P144
   Crepinsek M, 2005, ACM SIGPLAN NOTICES, V40, P39, DOI 10.1145/1064165.1064172
   CUNHA J, 2008, PEPM 2009, P179
   de Jonge M, 2001, PROC IEEE INT CONF S, P240, DOI 10.1109/ICSM.2001.972737
   DEAN T, 2005, P INT SUMM SCH GEN T, P29
   DEAN T, 2002, P SOURC COD AN MAN S
   DEAN TR, 2003, J AUTOMATED SOFTWARE, V10, P311
   Di Penta M, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P241, DOI 10.1109/CSMR.2005.52
   Di Penta M, 2008, SOFT COMPUT, V12, P51, DOI 10.1007/s00500-007-0216-5
   Do HH, 2007, INFORM SYST, V32, P857, DOI 10.1016/j.is.2006.09.002
   Dubey A, 2008, IET SOFTW, V2, P223, DOI 10.1049/iet-sen:20070061
   Dubey A, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P217, DOI 10.1109/CSMR.2005.5
   DUBEY A, 2006, SAC 06, P1631, DOI DOI 10.1145/1141277.1141659.
   Dubey A, 2006, LECT NOTES ARTIF INT, V4201, P201
   Duffy EB, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P11, DOI 10.1109/WCRE.2007.11
   Falleri JR, 2008, LECT NOTES COMPUT SC, V5301, P326, DOI 10.1007/978-3-540-87875-9_24
   Gosling J., 2005, Java Language Specification, Vthird
   Gosling J., 2000, The Java Language Specification
   Gosling James, 1996, The Java Language Specification
   HAINAUT JL, 1994, LECT NOTES COMPUTER, V823, P364
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Jouault F., 2006, 5 INT C GEN PROGR CO, P249, DOI DOI 10.1145/1173706.1173744
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Klusener S, 2003, PROC IEEE INT CONF S, P179, DOI 10.1109/ICSM.2003.1235420
   KLUSENER S, 2005, ISO IEC JTC1 SC22 DO
   KORT J, 2002, P LANG DESCR TOOLS A, V65, P7
   Kraft NA, 2009, IEEE T SOFTWARE ENG, V35, P780, DOI 10.1109/TSE.2009.65
   Lämmel R, 2009, LECT NOTES COMPUT SC, V5423, P246
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   LAMMEL R, 2001, P LANG DESCR TOOLS A, V44
   LAMMEL R, 2001, LNCS, V2021, P550
   LAMMEL R, 2005, POSTPR 2 INT WORKSH
   Lammel R., 2004, 1 INT WORKSH SOFTW E
   LAMMEL R, 2001, P 7 INT C REV ENG IN, V155, P113
   Lämmel R, 2006, LECT NOTES COMPUT SC, V4143, P169
   MALLOY B, 2002, P C S AFR I COMP SCI, P75
   Mernik M., 2003, PROC ACM S APPL COMP, P1063, DOI DOI 10.1145/952532.952740
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   MOONEN L, 2002, P INT WORKSH PROGR C
   Morgan C, 1990, PROGRAMMING SPECIFIC
   Nierstrasz O, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P275
   Oliveira JN, 2008, LECT NOTES COMPUT SC, V5235, P134, DOI 10.1007/978-3-540-88643-3_4
   Rahm E, 2001, VLDB J, V10, P334, DOI 10.1007/s007780100057
   Sellink A., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P151, DOI 10.1109/CSMR.2000.827323
   Synytskyy Nikita., 2003, 2003 C CTR ADV STUDI, P149
   THOMAS D, 2003, J OBJECT TECHNOLOGY, V2, P7, DOI DOI 10.5381/JOT.2003.2.1.C1
   Vermolen S, 2008, LECT NOTES COMPUT SC, V5301, P630, DOI 10.1007/978-3-540-87875-9_44
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Wachsmuth G, 2007, LECT NOTES COMPUT SC, V4609, P600
   Wenzel S, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P831, DOI 10.1145/1368088.1368214
   Wile DS, 1997, PROC INT CONF SOFTW, P472, DOI 10.1145/253228.253388
   Xing ZC, 2006, WORK CONF REVERSE EN, P263
NR 62
TC 10
Z9 10
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 333
EP 378
DI 10.1007/s11219-010-9116-5
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500004
DA 2024-07-18
ER

PT J
AU Chang, CP
   Chu, CP
AF Chang, Ching-Pao
   Chu, Chih-Ping
TI Improvement of causal analysis using multivariate statistical process
   control
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 22nd ACM Symposium on Applied Computing
CY MAR 11-15, 2007
CL Seoul, SOUTH KOREA
SP ACM
DE multivariate statistical process control; causal analysis; software
   process improvement
ID QUALITY-CONTROL; CLASSIFICATION; PROJECT; CHARTS
AB Statistical process control (SPC) is a conventional means of monitoring software processes and detecting related problems, where the causes of detected problems can be identified using causal analysis. Determining the actual causes of reported problems requires significant effort due to the large number of possible causes. This study presents an approach to detect problems and identify the causes of problems using multivariate SPC. This proposed method can be applied to monitor multiple measures of software process simultaneously. The measures which are detected as the major impacts to the out-of-control signals can be used to identify the causes where the partial least squares (PLS) and statistical hypothesis testing are utilized to validate the identified causes of problems in this study. The main advantage of the proposed approach is that the correlated indices can be monitored simultaneously to facilitate the causal analysis of a software process.
C1 [Chang, Ching-Pao; Chu, Chih-Ping] Natl Cheng Kung Univ, Dept Comp Sci & Informat Engn, Tainan 701, Taiwan.
C3 National Cheng Kung University
RP Chang, CP (corresponding author), Natl Cheng Kung Univ, Dept Comp Sci & Informat Engn, Taiwan 1,Ta Hsueh Rd, Tainan 701, Taiwan.
EM chingpao@ms28.hinet.net; chucp@csie.ncku.edu.tw
CR [Anonymous], 1990, Design sensitivity: Statistical power for experimental research
   [Anonymous], 1962, MATH STAT
   [Anonymous], 2014, Software engineering: a practitioner's approach
   Antoniol G., 2004, Software Process Improvement and Practice, V9, P33, DOI 10.1002/spip.183
   Baldassarre MT, 2005, PROC IEEE INT CONF S, P273
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   BENBASAT I, 1987, MIS QUART, V11, P369, DOI 10.2307/248684
   BOEHM B, 1993, ACM SIGSOFT, V28, P1
   Boehm BW., 1981, Software Engineering Economics
   BOX GEP, 1964, J ROY STAT SOC B, V26, P211, DOI 10.1111/j.2517-6161.1964.tb00553.x
   Briand LC, 2002, IEEE T SOFTWARE ENG, V28, P1106, DOI 10.1109/TSE.2002.1158285
   BRODMAN JG, 1996, CROSSTALK        APR, P23
   CARD DN, 1993, IEEE SOFTWARE, V10, P98, DOI 10.1109/52.219639
   CHILLAREGE R, 1992, IEEE T SOFTWARE ENG, V18, P943, DOI 10.1109/32.177364
   CHRISSIS MB, 2003, CMMI GUIDELINES PROC, P143
   Christensen D.S., 1993, NAT CON MAN J, V25, P17
   Cohen J., 1988, STAT POWER ANAL BEHA
   COHEN J, 1996, EXPLORING PSYCHOL ST
   CROSIER RB, 1988, TECHNOMETRICS, V30, P291, DOI 10.2307/1270083
   D'Agostino RB., 1986, GOODNESS OF FIT TECH
   Doppke J. C., 1998, ACM Transactions on Software Engineering and Methodology, V7, P1, DOI 10.1145/268411.268415
   Fenton N, 2002, IEEE SOFTWARE, V19, P116, DOI 10.1109/MS.2002.1020298
   Fenton N., 1996, SOFTWARE METRICS RIG, VSecond
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Fleming Q. W., 1988, Cost/schedule control systems criteria: The management guide to C/SCSC
   FLEMING QW, 1998, J DEFENSE SOFTWARE E, V10, P19
   FLORAC WA, 1999, SEI S SOFTW, P1
   GELADI P, 1986, ANAL CHIM ACTA, V185, P1, DOI 10.1016/0003-2670(86)80028-9
   HARTER HL, 1960, ANN MATH STAT, V31, P1122, DOI 10.1214/aoms/1177705684
   HELLAND IS, 1990, SCAND J STAT, V17, P97
   HENDERSON K, 2003, MEASURABLE NEWS  SUM
   HIHN J, 1991, 13TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P276, DOI 10.1109/ICSE.1991.130653
   Hoskuldsson A., 1988, J. Chemom., V2, P211, DOI DOI 10.1002/CEM.1180020306
   Hotelling H, 1931, ANN MATH STAT, V2, P360, DOI 10.1214/aoms/1177732979
   Hotelling H., 1947, TECHNIQUES STAT ANAL, P111
   HUNTER JS, 1986, J QUAL TECHNOL, V18, P203
   Jacob AL, 2003, IEEE SOFTWARE, V20, P50, DOI 10.1109/MS.2003.1196321
   Jalote P., 2000, CMM PRACTICE PROCESS
   Kan S. H., 2003, METRICS MODELS SOFTW
   Khoshgoftaar TM, 2000, IEEE T RELIAB, V49, P4, DOI 10.1109/24.855532
   KOURTI T, 1995, CHEMOMETR INTELL LAB, V28, P3, DOI 10.1016/0169-7439(94)00079-X
   LANE JA, 1997, P ICSE 97 BOST MA
   Lavazza L, 2000, IEEE SOFTWARE, V17, P56, DOI 10.1109/52.896250
   Lawler J, 2003, IEEE SOFTWARE, V20, P68, DOI 10.1109/MS.2003.1196324
   Leszak M, 2002, J SYST SOFTWARE, V61, P173, DOI 10.1016/S0164-1212(01)00146-7
   LIPKE W, 2003, MEASURABLE NEWS 0310
   LOWRY CA, 1992, TECHNOMETRICS, V34, P46, DOI 10.2307/1269551
   MACGREGOR JF, 1990, J QUAL TECHNOL, V22, P255, DOI 10.1080/00224065.1990.11979256
   Mahalanobis P. C., 1936, P NATL I SCI INDIA, V2, P49
   Mason RL, 1997, J QUAL TECHNOL, V29, P396, DOI 10.1080/00224065.1997.11979791
   McGarry J., 2001, PRACTICAL SOFTWARE M
   MEYER AD, 2002, OPERATIONS MANAGEMEN, V43, P60
   Mohapatra S, 2001, PROC IEEE INT CONF S, P260, DOI 10.1109/ICSM.2001.972739
   Nijhuis A, 1997, CHEMOMETR INTELL LAB, V38, P51, DOI 10.1016/S0169-7439(97)00054-3
   NOMIKOS P, 1995, TECHNOMETRICS, V37, P41, DOI 10.2307/1269152
   Ortiz-Estarelles O, 2001, CHEMOMETR INTELL LAB, V56, P93, DOI 10.1016/S0169-7439(01)00114-9
   PAGE ES, 1954, BIOMETRIKA, V41, P100, DOI 10.1093/biomet/41.1-2.100
   Rencher A.C., 1998, MULTIVARIATE STAT IN
   RUBIN HA, 1993, PROC INT CONF SOFTW, P468, DOI 10.1109/ICSE.1993.346019
   SHAFFER JP, 1995, ANNU REV PSYCHOL, V46, P561, DOI 10.1146/annurev.ps.46.020195.003021
   Shewhart W. A., 1939, STAT METHOD VIEWPOIN
   TAYNTOR CB, 2002, 6 SIGMA SOFTWARE DEV
   TRACY ND, 1992, J QUAL TECHNOL, V24, P88, DOI 10.1080/00224065.1992.12015232
   Walpole R.E., 2012, PROBABILITY STAT ENG, V9th
   Weller EF, 2000, IEEE SOFTWARE, V17, P48, DOI 10.1109/52.896249
   Wold H, 1966, MULTIVARIATE ANAL, V1, DOI DOI 10.1007/S00423-022-02505-9
   Yin R. K., 2017, CASE STUDY RES DESIG
NR 67
TC 6
Z9 6
U1 1
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2008
VL 16
IS 3
BP 377
EP 409
DI 10.1007/s11219-007-9042-3
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330RE
UT WOS:000257959700006
DA 2024-07-18
ER

PT J
AU Gupta, M
   Fu, JC
   Bastani, FB
   Khan, LR
   Yen, IL
AF Gupta, Manish
   Fu, Jicheng
   Bastani, Farokh B.
   Khan, Latifur R.
   Yen, I.-Ling
TI Rapid goal-oriented automated software testing using MEA-graph planning
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Tools with Artificial Intelligence
CY NOV 15-17, 2004
CL Boca Raton, FL
SP IEEE Comp Soc, Informat Technol Res Inst, Wright State Univ, Florida Atlantic Univ
DE AI Planning; Planning graph; MEA-Graphplan; Automated software testing
ID KNOWLEDGE
AB With the rapid growth in the development of sophisticated modern software applications, the complexity of the software development process has increased enormously, posing an urgent need for the automation of some of the more time-consuming aspects of the development process. One of the key stages in the software development process is system testing. In this paper, we evaluate the potential application of AI planning techniques in automated software testing. The key contributions of this paper include the following: (1) A formal model of software systems from the perspective of software testing that is applicable to important classes of systems and is amenable to automation using AI planning methods. (2) The design of a framework for an automated planning system (APS) for applying AI planning techniques for testing software systems. (3) Assessment of the test automation framework and a specific AI Planning algorithm, namely, MEA-Graphplan (Means-Ends Analysis Graphplan), algorithm to automatically generate test data. (4) A case study is presented to evaluate the proposed automated testing method and compare the performance of MEA-Graphplan with that of Graphplan. The empirical results show that for software testing, the MEA-Graphplan algorithm can perform computationally more efficiently and effectively than the basic Graph Planning algorithm.
C1 Univ Texas, Dept Comp Sci, Richardson, TX 75083 USA.
C3 University of Texas System; University of Texas Dallas
RP Gupta, M (corresponding author), Univ Texas, Dept Comp Sci, Richardson, TX 75083 USA.
EM manishg@utdallas.edu; jxf024000@utdallas.edu; bastani@utdallas.edu;
   lkhan@utdallas.edu; ilyen@utdallas.edu
RI gupta, manish/HIK-2539-2022
OI Khan, Latifur/0000-0002-9300-1576
CR Anderson C., 1995, P INT TEST C
   Anderson C, 1998, P 4 INT C AI PLANN S
   ANDERSON JS, 1993, THESIS U OREGON
   AVILA HM, 2001, IJCAI2001
   Bacchus F, 2000, ARTIF INTELL, V116, P123, DOI 10.1016/S0004-3702(99)00071-5
   Bacchus F, 1996, FR ART INT, V31, P141
   Bacchus F., 2001, IJCAI 2001, P417
   BARRET A, 1994, P AAIA 94
   Blum AL, 1997, ARTIF INTELL, V90, P281, DOI 10.1016/S0004-3702(96)00047-1
   Chilenski J. J., 1994, Proceedings. The Ninth Knowledge-Based Software Engineering Conference (Cat. No.94TH0664-3), P59, DOI 10.1109/KBSE.1994.342677
   Deason W. H., 1991, IEEE Transactions on Knowledge and Data Engineering, V3, P108, DOI 10.1109/69.75894
   ELMANZALAWY Y, 2006, EFFICIENT PLANNING I
   Erol K, 1994, INT C AI PLANN SYST, P249
   Estlin TA, 1996, FR ART INT, V31, P129
   FICKAS S, 1992, IEEE T SOFTWARE ENG, V18, P470, DOI 10.1109/32.142870
   FICKAS S, 1988, CISTR8815 U OREG DEP
   FIKES RE, 1971, ARTIF INTELL, V2, P189, DOI 10.1016/0004-3702(71)90010-5
   GARAGNANI M, 2000, P 19 WORKSH UK PLANN, P275
   Gupta M, 2004, PROC INT C TOOLS ART, P174
   Howell A, 1997, ENDOCR-RELAT CANCER, V4, P1, DOI 10.1677/erc.0.0040001
   HUFF K, 1992, WORK NOT AAAI 92 SPR, P63
   HUFF K, 1998, ACM SIGSOFT SIGPLAN
   KAMBHAMPATI R, 1997, P 4 EUR C PLANN
   KOEHLER J, 1997, P 4 EUR C PLANN, P273
   MAAYRHAUSER A, 2000, P 11 INT S SOFTW REL, P186
   MAYRHAUSER A, 1993, P 4 INT SOFTW REL EN, P6
   MAYRHAUSER A, 1994, P INT C SOFTW MAINT, P26
   McAllester D., 1991, P 9 NAT C ART INT
   McDermott D., 1996, Proceedings. Third International Conference on Artificial Intelligence Planning Systems, P142
   Memon AM, 2001, IEEE T SOFTWARE ENG, V27, P144, DOI 10.1109/32.908959
   MINTON S, 1989, ARTIF INTELL, V40, P63, DOI 10.1016/0004-3702(89)90047-7
   Mraz RT, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P96, DOI 10.1109/ISSRE.1995.497648
   MUNOZAVILA H, 1997, P ECP 97 REC ADV AI
   MUNOZAVILA H, 1998, INTEGRATING TWOFOLD
   Nau D., 1999, SHOP SIMPLE HIERARCH, P968
   NEBEL B, 1997, P 4 EUR C PLANNING
   PARKER E, 1999, RECEN ADV AI PLANNIN, P333
   PENBERTHY JS, 1992, 3RD P INT C PRINC KN, P103
   RIST RS, 1992, WORK NOT AAAI 92 SPR
   Scheetz M., 1999, Proceedings 10th International Symposium on Software Reliability Engineering (Cat. No.PR00443), P250, DOI 10.1109/ISSRE.1999.809330
   VELOSO M, 1995, J EXP THEOR ARTIF IN, V7, P81, DOI 10.1080/09528139508953801
   VELOSO MM, 1994, PROCEEDINGS OF THE TWELFTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P595
   VELOSO MM, 1994, P 2 INT C AI PLANN S, P170
   Weld D. S., 1999, AI Magazine, V20, P93
   WELD DS, 1994, AI MAG, V15, P27
   YANG Q, 1990, COMPUT INTELL, V6, P12, DOI DOI 10.1111/J.1467-8640.1990.TB00126.X
   YEN IL, 2002, P 14 IEEE INT C TOOL
   ZEIL SJ, 1993, TR9314 OLD DOM U
   [No title captured]
NR 49
TC 3
Z9 6
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2007
VL 15
IS 3
BP 241
EP 263
DI 10.1007/s11219-007-9018-3
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 203OI
UT WOS:000248983500003
DA 2024-07-18
ER

PT J
AU Yu, DJ
   Li, SC
   Chen, X
   Sun, T
AF Yu, Dongjin
   Li, Sicheng
   Chen, Xin
   Sun, Tian
TI Identifying the severity of technical debt issues based on semantic and
   structural information
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Technical debt; Technical debt issues; Severity identification; Semantic
   information; Structural information; Code analysis
ID SMOTE
AB Technical debt (TD) refers to the phenomenon that developers choose a compromise solution from a short-term benefit perspective during design or architecture selection. TD-related issues, such as code smells, may have a critical impact on important non-functional requirements. Different severity levels of TD issues require different measures to be taken by developers in the future. Existing studies mainly focus on detecting TD in software projects through source code or comments, but usually ignore the severity degree of TD issues. As a matter of fact, it is very important to identify the severity of TD issues and clarify which TD should be prioritized. In this paper, we propose an approach that combines the semantic and structural information of the code snippets to identify their severity at method level. In the approach, we first transform each method affected by TD issues into an abstract syntax tree (AST) and use the paths in the AST to represent its semantic information. Then, we extract different code metrics to measure the size, coupling, and complexity of methods affected by TD issues to represent their structural information. Finally, we build a stacking ensemble model to identify the severity of TD issues by using Random Forest (RF) and eXtreme Gradient Boosting (XGBoost) for the base classifiers and Support Vector Machine (SVM) for the meta-classifier. The evaluation results on the real dataset show that our approach achieves 65.77% in terms of precision, 68.18% in terms of recall, and 65.84% in terms of F1-score on average. In addition, the experimental results also demonstrate that the strategy of combining the semantic and structural information of code snippets is effective in improving the effectiveness of our approach.
C1 [Yu, Dongjin; Chen, Xin; Sun, Tian] Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou, Peoples R China.
   [Li, Sicheng] Hangzhou Dianzi Univ, HDU ITMO Joint Inst, Hangzhou, Peoples R China.
C3 Hangzhou Dianzi University; Hangzhou Dianzi University
RP Yu, DJ (corresponding author), Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou, Peoples R China.
EM yudj@hdu.edu.cn; sichengluis@hdu.edu.cn; chenxin4391@hdu.edu.cn;
   suntian@hdu.edu.cn
RI 李, 思城/IAN-3299-2023
OI 李, 思城/0000-0002-9459-3577
FU National Natural Science Foundation of China [62372145, 61902096];
   Natural Science Foundation of Zhejiang Province [LY21F020020]; Key
   Research and Development Program of Zhejiang Province [2023C03200,
   2023C03179]
FX This work was supported by the National Natural Science Foundation of
   China under Grants 62372145 and 61902096, the Natural Science Foundation
   of Zhejiang Province under Grant LY21F020020, and the Key Research and
   Development Program of Zhejiang Province under Grants 2023C03200 and
   2023C03179.
CR Alfayez R, 2019, 2019 IEEE 19TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2019), P434, DOI 10.1109/QRS.2019.00060
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Amanatidis T, 2020, EMPIR SOFTW ENG, V25, P4161, DOI 10.1007/s10664-020-09869-w
   Aniche M., 2015, Tech. Rep.
   Avgeriou P, 2021, IEEE SOFTWARE, V38, P61, DOI 10.1109/MS.2020.3024958
   Boutaib S, 2021, EXPERT SYST APPL, V166, DOI 10.1016/j.eswa.2020.114076
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   Chatzigeorgiou A, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P53, DOI 10.1109/MTD.2015.7332625
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chen Tianqi, 2015, R package version 0.4-2 1.4, V1, P1
   Chen X, 2022, IEEE T RELIAB, V71, P1309, DOI 10.1109/TR.2021.3087864
   Conejero JM, 2018, J SYST SOFTWARE, V142, P92, DOI 10.1016/j.jss.2018.04.035
   Corinna C., 1995, MACH LEARN, V20, P273, DOI [DOI 10.1007/BF00994018, 10.1007/BF00994018. S2CID 206787478]
   Cunningham W., 1993, OOPS MESSENGER, V4, P29, DOI DOI 10.1145/157710.157715
   de Almeida RR, 2018, PROC IEEE INT CONF S, P655, DOI 10.1109/ICSME.2018.00075
   de Lima BS, 2022, SOFTWARE QUAL J, V30, P729, DOI 10.1007/s11219-021-09578-7
   deLima B. S., 2020, ARXIV
   Detofeno T, 2022, 36TH BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, SBES 2022, P230, DOI 10.1145/3555228.3555238
   Digkas G, 2017, LECT NOTES COMPUT SC, V10475, P51, DOI 10.1007/978-3-319-65831-5_4
   Falessi D, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P1, DOI 10.1109/MTD.2015.7332618
   Fernández A, 2018, J ARTIF INTELL RES, V61, P863, DOI 10.1613/jair.1.11192
   Flisar J, 2018, EUROMICRO CONF PROC, P230, DOI 10.1109/SEAA.2018.00045
   Fontana FA, 2017, KNOWL-BASED SYST, V128, P43, DOI 10.1016/j.knosys.2017.04.014
   Guggulothu T, 2020, SOFTWARE QUAL J, V28, P1063, DOI 10.1007/s11219-020-09498-y
   He HB, 2009, IEEE T KNOWL DATA EN, V21, P1263, DOI 10.1109/TKDE.2008.239
   Huang Q, 2018, EMPIR SOFTW ENG, V23, P418, DOI 10.1007/s10664-017-9522-4
   Japkowicz N., 2002, Intelligent Data Analysis, V6, P429
   Kamei E.d.S., 2016, QUASOQ TDA APSEC, P68
   Lenarduzzi Valentina, 2020, Proceedings of 6th International Conference in Software Engineering for Defence Applications (SEDA 2018). Advances in Intelligent Systems and Computing (AISC 925), P165, DOI 10.1007/978-3-030-14687-0_15
   Lenarduzzi V, 2017, PROC IEEE ACM INT C, P146, DOI 10.1109/ICSE-C.2017.122
   Letouzey JL, 2012, IEEE SOFTWARE, V29, P44, DOI 10.1109/MS.2012.129
   Li ZM, 2014, PROCEEDINGS OF THE 2014 9TH INTERNATIONAL CONFERENCE ON SYSTEM OF SYSTEMS ENGINEERING (SOSE 2014), P119, DOI 10.1109/SYSOSE.2014.6892474
   Li ZY, 2015, J SYST SOFTWARE, V101, P193, DOI 10.1016/j.jss.2014.12.027
   Liu XY, 2009, IEEE T SYST MAN CY B, V39, P539, DOI 10.1109/TSMCB.2008.2007853
   Maipradit R, 2020, EMPIR SOFTW ENG, V25, P3770, DOI 10.1007/s10664-020-09854-3
   Maldonado ED, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P9, DOI 10.1109/MTD.2015.7332619
   Maldonado ED, 2017, IEEE T SOFTWARE ENG, V43, P1044, DOI 10.1109/TSE.2017.2654244
   Martini A, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1877
   Mensah S, 2018, J SYST SOFTWARE, V135, P37, DOI 10.1016/j.jss.2017.09.026
   Ramac R, 2022, J SYST SOFTWARE, V184, DOI 10.1016/j.jss.2021.111114
   Ren XX, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3324916
   Ribeiro LF, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 1 (ICEIS), P572, DOI 10.5220/0005914605720579
   Rios N, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3268917
   Rios N, 2018, INFORM SOFTWARE TECH, V102, P117, DOI 10.1016/j.infsof.2018.05.010
   Sae-Lim N, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1886
   Tan J, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2319
   Tsoukalas D, 2022, INTERNATIONAL CONFERENCE ON TECHNICAL DEBT 2022 (TECHDEBT 2022), P76, DOI 10.1145/3524843.3528094
   Vassallo C, 2020, EMPIR SOFTW ENG, V25, P1419, DOI 10.1007/s10664-019-09750-5
   Wang X, 2020, IEEE INT CONF AUTOM, P871, DOI 10.1145/3324884.3416583
   Wehaibi S, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P179, DOI 10.1109/SANER.2016.72
   Wilson DR, 2000, MACH LEARN, V38, P257, DOI 10.1023/A:1007626913721
   WOLPERT DH, 1992, NEURAL NETWORKS, V5, P241, DOI 10.1016/S0893-6080(05)80023-1
   Xia X, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962606
   Yan M, 2019, IEEE T SOFTWARE ENG, V45, P1211, DOI 10.1109/TSE.2018.2831232
   Yli-Huumo J, 2016, J SYST SOFTWARE, V120, P195, DOI 10.1016/j.jss.2016.05.018
   Yu DJ, 2021, FRONT COMPUT SCI-CHI, V15, DOI 10.1007/s11704-020-9281-z
   Zampetti F, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P355, DOI [10.1109/SANER48275.2020.9054868, 10.1109/saner48275.2020.9054868]
   Zampetti F, 2017, PROC IEEE INT CONF S, P216, DOI 10.1109/ICSME.2017.44
NR 58
TC 0
Z9 0
U1 2
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1499
EP 1526
DI 10.1007/s11219-023-09651-3
EA OCT 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001081192000001
DA 2024-07-18
ER

PT J
AU Olianas, D
   Leotta, M
   Ricca, F
AF Olianas, Dario
   Leotta, Maurizio
   Ricca, Filippo
TI SleepReplacer: a novel tool-based approach for replacing thread sleeps
   in selenium WebDriver test code
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Web testing; Thread sleeps; Explicit waits; Test code; Selenium
   WebDriver
AB Assuring quality of web applications is fundamental, given their relevance in the today's world. A possible way to reach this goal is through end-to-end (E2E) testing, an approach in which a web application is automatically tested by performing the actions that a user would do. With modern web applications (for example, single-page applications), it is of great importance to properly handle asynchronous calls in the test suite. In E2E Selenium WebDriver test suites, asynchronous calls are usually managed in two ways: using thread sleeps or explicit waits. The first is easier to use, but is inefficient and can lead to instability (also called flakiness, a problem often present in test suites that makes us lose confidence in the testing phase), while the second is usually more efficient but harder to use because, if the correct kind of wait is not carefully selected, it can introduce flakiness too. To help Testers, who often opt for the first strategy, we present in this work a tool-based approach to automatically replace thread sleeps with explicit waits in an E2E Selenium WebDriver test suite without introducing new flakiness. We empirically validated our tool named SleepReplacer on four different test suites, and we found that it can correctly replace in an automatic way from 81 to 100% of thread sleeps, leading to a significant reduction of the total execution time of the test suite (i.e., from 13 to 71%).
C1 [Olianas, Dario; Leotta, Maurizio; Ricca, Filippo] Univ Genoa, Dipartimento Informat Bioingn Robot & Ingn Sistem, Genoa, Italy.
C3 University of Genoa
RP Leotta, M (corresponding author), Univ Genoa, Dipartimento Informat Bioingn Robot & Ingn Sistem, Genoa, Italy.
EM maurizio.leotta@unige.it
RI Leotta, Maurizio/I-8145-2014
OI Leotta, Maurizio/0000-0001-5267-0602
FU Universita degli Studi di Genova within the CRUI-CARE Agreement
FX Open access funding provided by Universita degli Studi di Genova within
   the CRUI-CARE Agreement.
CR Ahmad A., 2019, ARXIV
   [Anonymous], PAGE OBJECT MODEL
   Bell J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P433, DOI 10.1145/3180155.3180164
   Biagiola M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P154, DOI 10.1145/3338906.3338948
   bin Ali N, 2019, EMPIR SOFTW ENG, V24, P2020, DOI 10.1007/s10664-018-9670-1
   Camara Bruno, 2021, SAST'21: Brazilian Symposium on Systematic and Automated Software Testing, P46, DOI 10.1145/3482909.3482916
   Cerioli M, 2023, J SOFTW-EVOL PROC, V35, DOI 10.1002/smr.2396
   Chang TH, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1535
   Deursen A., 2001, Refactoring Test Code
   Eck M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P830, DOI 10.1145/3338906.3338945
   Eda R, 2019, SOFTWARE QUAL J, V27, P1383, DOI 10.1007/s11219-019-09449-2
   Ekelund ED, 2015, PROC IEEE INT CONF S, P449, DOI 10.1109/ICSM.2015.7332496
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   García B, 2020, ELECTRONICS-SWITZ, V9, DOI 10.3390/electronics9071067
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hossain M, 2014, IEEE ICST WORKSHOP, P312, DOI 10.1109/ICSTW.2014.35
   Ikhsan IN, 2018, PROCEEDINGS OF 2018 5TH INTERNATIONAL CONFERENCE ON DATA AND SOFTWARE ENGINEERING (ICODSE)
   Lam W, 2020, PROC INT CONF SOFTW, P1471, DOI 10.1145/3377811.3381749
   Leotta M, 2021, SOFTW TEST VERIF REL, V31, DOI 10.1002/stvr.1767
   Leotta M, 2020, IEEE INT CONF SOFTW, P263, DOI 10.1109/ICST46399.2020.00035
   Leotta M, 2018, SOFTW TEST VERIF REL, V28, DOI 10.1002/stvr.1665
   Leotta M, 2015, IEEE ICST WORKSHOP
   Leotta M, 2016, ADV COMPUT, V101, P193, DOI 10.1016/bs.adcom.2015.11.007
   Leotta M, 2016, J SOFTW-EVOL PROC, V28, P177, DOI 10.1002/smr.1771
   Leotta M, 2013, IEEE ICST WORKSHOP, P108, DOI 10.1109/ICSTW.2013.19
   Leotta M, 2013, WORK CONF REVERSE EN, P272, DOI 10.1109/WCRE.2013.6671302
   Luo QZ, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P643, DOI 10.1145/2635868.2635920
   Maim J, 2020, INT WORKSH AUTOMAT, P81, DOI 10.1145/3387903.3389320
   Ming Ying, 2011, 2011 18th Working Conference on Reverse Engineering, P367, DOI 10.1109/WCRE.2011.51
   Morán J, 2020, J WEB ENG, V19, P267, DOI 10.13052/jwe1540-9589.1927
   Olianas D., 2021, INT C QUAL INF COMM, P3
   Olianas D, 2022, SOFTWARE QUAL J, V30, P389, DOI 10.1007/s11219-021-09565-y
   Olianas D, 2021, IEEE INT CONF SOFTW, P460, DOI 10.1109/ICST49551.2021.00060
   Palomba F, 2019, BENEVOL
   Presler-Marshall K, 2019, INT WORKSH AUTOMAT, P7, DOI 10.1109/AST.2019.000-1
   Raghavendra S., 2021, WAITS, P129, DOI [10.1007/978-1-4842-6249-8_10, DOI 10.1007/978-1-4842-6249-8_10]
   Ricca Filippo, 2021, SOFSEM 2021: Theory and Practice of Computer Science. 47th International Conference on Current Trends in Theory and Practice of Computer Science (SOFSEM 2021). Proceedings. Lecture Notes in Computer Science (LNCS 12607), P472, DOI 10.1007/978-3-030-67731-2_35
   Ricca F, 2001, PROC INT CONF SOFTW, P25, DOI 10.1109/ICSE.2001.919078
   SeleniumHQ, 2021, WEB BROWS AUT
   Shi A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P545, DOI 10.1145/3338906.3338925
   Shukla S., 2021, PROTRACTOR HDB, DOI [10.1007/978-1-4842-7289-3, DOI 10.1007/978-1-4842-7289-3]
   Stocco A, 2017, SOFTWARE QUAL J, V25, P1007, DOI 10.1007/s11219-016-9331-9
   Zhu LM, 2016, IEEE SOFTWARE, V33, P32, DOI 10.1109/MS.2016.81
NR 43
TC 3
Z9 3
U1 2
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2022
VL 30
IS 4
BP 1089
EP 1121
DI 10.1007/s11219-022-09596-z
EA AUG 2022
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6J7CW
UT WOS:000840069000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Digkas, G
   Ampatzoglou, A
   Chatzigeorgiou, A
   Avgeriou, P
AF Digkas, George
   Ampatzoglou, Apostolos
   Chatzigeorgiou, Alexander
   Avgeriou, Paris
TI The temporality of technical debt introduction on new code and
   confounding factors
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE TD temporality; Case study; New code debt; Metrics fluctuation
ID SMELLS; EVOLUTION
AB Code Technical Debt (TD) is intentionally or unintentionally created when developers introduce inefficiencies in the codebase. This can be attributed to various reasons such as heavy workload, tight delivery schedule, or developers' lack of experience. Since a software system grows mostly through the addition of new code, it is interesting to study how TD fluctuates along this process. Specifically, in this paper, we investigate: (a) the temporality of code TD introduction in new code, i.e., whether the introduction of TD is stable across the lifespan of the project, or if its evolution presents spikes; and (b) the relation of TD introduction to the development team's workload in a given period, as well as to the experience of the development team. To answer these questions, we have performed a case study on 47 open-source projects from two well-known ecosystems (Apache and Eclipse) as well as additional isolated projects from GitHub (not selected from a specific ecosystem) and inspected the number of TD issues introduced in 6-month sliding temporal windows. The results of the study suggested that: (a) overall, the number of TD issues introduced through new code is a stable measure, although it presents spikes; and (b) the number of commits performed, as well as developers' experience are not strongly correlated to the number of introduced TD issues.
C1 [Digkas, George; Avgeriou, Paris] Univ Groningen, Inst Math & Comp Sci, Groningen, Netherlands.
   [Ampatzoglou, Apostolos; Chatzigeorgiou, Alexander] Univ Macedonia, Dept Appl Informat, Macedonia, Greece.
C3 University of Groningen; University of Macedonia
RP Ampatzoglou, A (corresponding author), Univ Macedonia, Dept Appl Informat, Macedonia, Greece.
EM g.digkas@rug.nl; a.ampatzoglou@uom.edu.gr; achat@uom.edu.gr;
   paris@cs.rug.nl
RI Chatzigeorgiou, Alexandros/AAL-6077-2021
OI Avgeriou, Paris/0000-0002-7101-0754
FU European Union's Horizon 2020 research and innovation programme
   [801015]; ITEA3 [17038]; RVO [17038]
FX Work reported in this paper has received funding from the European
   Union's Horizon 2020 research and innovation programme under grant
   agreement No 801015 (project EXA2PRO) regarding the contribution of A.
   Chatzigeorgiou and A. Ampatzoglou, as well as from ITEA3 and RVO under
   grant agreement No. 17038 (VISDOM), regarding the contribution of P.
   Avgeriou.
CR AlOmar E, P IEEE ACM 42 INT C
   Alves V, 2010, INFORM SOFTWARE TECH, V52, P806, DOI 10.1016/j.infsof.2010.03.014
   Amanatidis T, 2020, EMPIR SOFTW ENG, V25, P4161, DOI 10.1007/s10664-020-09869-w
   Ampatzoglou A, 2016, INT WORKSH MANAG TEC, P9, DOI 10.1109/MTD.2016.8
   [Anonymous], 2012, 2012 3rd International Workshop on Managing Technical Debt, MTD 2012-Proceedings, DOI [10.1109/MTD.2012.6225997, DOI 10.1109/MTD.2012.6225997]
   Arvanitou EM, 2016, INFORM SOFTWARE TECH, V72, P110, DOI 10.1016/j.infsof.2015.12.010
   Avgeriou P, 2020, IEEE SOFTWARE
   Chatzigeorgiou A, 2014, INNOV SYST SOFTW ENG, V10, P3, DOI 10.1007/s11334-013-0205-z
   Dieste O, 2017, EMPIR SOFTW ENG, V22, P2457, DOI 10.1007/s10664-016-9471-3
   Digkas G, 2020, IEEE T SOFTWARE ENG, V1
   Digkas G., 2020, 13 INT C QUALITY INF, V1266, P68, DOI DOI 10.1007/978-3-030-58793-2_6
   Digkas G, 2017, LECT NOTES COMPUT SC, V10475, P51, DOI 10.1007/978-3-319-65831-5_4
   Dueñas JC, 2007, IEEE SOFTWARE, V24, P90, DOI 10.1109/MS.2007.157
   Falleri Jean-Remy, 2014, P 29 ACM IEEE INT C, P313
   Field A., 2013, DISCOVERING STAT USI
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   Kazman R, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P179, DOI 10.1109/ICSE.2015.146
   Krutz Daniel E., 2017, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). Proceedings, P165, DOI 10.1109/MOBILESoft.2017.5
   Lehman M. M., 1996, Software Process Technology. 5th European Workshop, EWSPT '96 Proceedings, P108, DOI 10.1007/BFb0017737
   Li ZY, 2015, J SYST SOFTWARE, V101, P193, DOI 10.1016/j.jss.2014.12.027
   Martini A, 2015, INFORM SOFTWARE TECH, V67, P237, DOI 10.1016/j.infsof.2015.07.005
   Olbrich S, 2009, INT SYMP EMP SOFTWAR, P391
   Pérez B, 2019, P INT C CHIL COMPUT, DOI 10.1109/sccc49216.2019.8966424
   Peters R, 2012, EUR CON SFTWR MTNCE, P411, DOI 10.1109/CSMR.2012.79
   Ramac R, 2020, EUROMICRO CONF PROC, P354, DOI 10.1109/SEAA51224.2020.00065
   Rios N, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3268917
   Runeson Per, 2012, Case study research in software engineering: Guidelines and examples
   Siegmund J, 2014, EMPIR SOFTW ENG, V19, P1299, DOI 10.1007/s10664-013-9286-4
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
NR 29
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 283
EP 305
DI 10.1007/s11219-021-09569-8
EA NOV 2021
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000720811200001
DA 2024-07-18
ER

PT J
AU Baqais, AAB
   Alshayeb, M
AF Baqais, Abdulrahman Ahmed Bobakr
   Alshayeb, Mohammad
TI Automatic software refactoring: a systematic literature review
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Search-based; Refactoring; Systematic review; Automatic refactoring
ID CODE
AB Refactoring a software artifact is an embedded task in the maintenance phase of the software life cycle. To reduce the time and effort required for this task, researchers proposed methods to automate the software refactoring process at the design and code levels. In this paper, we conducted a systematic literature review of papers that suggest, propose, or implement an automated refactoring process. Using different phases, setting several quality measures, and snowballing, only 41 papers passed to the last stage to be analyzed and reviewed. We observe an increase in the number of papers that propose automatic refactoring. The results show that while most of the papers discuss code refactoring, only a few recent papers are focused on model refactoring. Search-based refactoring is gaining more popularity, and several researchers have used it to perform refactoring in a quick and efficient manner.
C1 [Baqais, Abdulrahman Ahmed Bobakr; Alshayeb, Mohammad] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia.
C3 King Fahd University of Petroleum & Minerals
RP Alshayeb, M (corresponding author), King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia.
EM baqais@kfupm.edu.sa; alshayeb@kfupm.edu.sa
RI Alshayeb, Mohammad/B-5941-2015
OI Alshayeb, Mohammad/0000-0001-7950-0099
FU King Fahd University of Petroleum and Minerals
FX The authors acknowledge the support of King Fahd University of Petroleum
   and Minerals in the development of this work.
CR Abebe Mesfin., 2014, INT J SOFTWARE ENG I, V8, P299, DOI [10.14257/ijseia.2014.8.6.24, DOI 10.14257/IJSEIA.2014.8.6.24]
   Al Dallal J, 2015, INFORM SOFTWARE TECH, V58, P231, DOI 10.1016/j.infsof.2014.08.002
   Alkhalid A, 2011, J RES PRACT INF TECH, V43, P285
   Amal B, 2014, LECT NOTES COMPUT SC, V8636, P31
   [Anonymous], 2003, ALAN APT SERIES
   [Anonymous], 2005, SYSTEMATIC REV SOCIA
   [Anonymous], 2014, SEARCH BASED SOFTWAR, DOI [DOI 10.1007/978-3-642-45398-4_4, 10.1007/978-3-642-45398-4_4]
   [Anonymous], 2018, REFACTORING IMPROVIN
   Babar MA, 2009, INT SYMP EMP SOFTWAR, P347
   Boussaïd I, 2017, AUTOMAT SOFTW ENG, V24, P233, DOI 10.1007/s10515-017-0215-4
   Brereton P, 2007, J SYST SOFTWARE, V80, P571, DOI 10.1016/j.jss.2006.07.009
   Dermeval D, 2016, REQUIR ENG, V21, P405, DOI 10.1007/s00766-015-0222-6
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kessentini M, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON COMBINING MODELLING AND SEARCH-BASED SOFTWARE ENGINEERING (CMSBSE), P51, DOI 10.1109/CMSBSE.2013.6604438
   Kessentini W, 2014, IEEE T SOFTWARE ENG, V40, P841, DOI 10.1109/TSE.2014.2331057
   Kitchenham B., 2007, Joint Report
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Mahmood S, 2017, INFORM SOFTWARE TECH, V91, P102, DOI 10.1016/j.infsof.2017.06.009
   Mahouachi Rim, 2013, Search Based Software Engineering. 5th International Symposium, SSBSE 2013. Proceedings: LNCS 8084, P126, DOI 10.1007/978-3-642-39742-4_11
   Mahouachi R., 2013, P 15 ANN C COMP GEN
   Mariani T, 2017, INFORM SOFTWARE TECH, V83, P14, DOI 10.1016/j.infsof.2016.11.009
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Misbhauddin M, 2015, EMPIR SOFTW ENG, V20, P206, DOI 10.1007/s10664-013-9283-7
   Mkaouer MW, 2016, EMPIR SOFTW ENG, V21, P2503, DOI 10.1007/s10664-015-9414-4
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Mohan Michael, 2018, Journal of Software Engineering Research and Development, V6, DOI 10.1186/s40411-018-0046-4
   Opdyke William F., 1992, THESIS
   Ouni A, 2015, SOFTWARE QUAL J, V23, P323, DOI 10.1007/s11219-014-9233-7
   Räihä O, 2010, COMPUT SCI REV, V4, P203, DOI 10.1016/j.cosrev.2010.06.001
   Ramírez A, 2019, IEEE T CYBERNETICS, V49, P1224, DOI 10.1109/TCYB.2018.2798163
   Ramirez A, 2019, J SYST SOFTWARE, V149, P382, DOI 10.1016/j.jss.2018.12.015
   Rochimah S., 2015, International Journal of Software Engineering and Its Applications, V9, P197
   Singh S, 2018, AIN SHAMS ENG J, V9, P2129, DOI 10.1016/j.asej.2017.03.002
   Staples M, 2007, J SYST SOFTWARE, V80, P1425, DOI 10.1016/j.jss.2006.09.046
   Tsantalis N, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P329
   Wohlin C, 2014, 18 INT C EV ASS SOFT, P1, DOI DOI 10.1145/2601248.2601268
NR 36
TC 36
Z9 40
U1 4
U2 29
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 459
EP 502
DI 10.1007/s11219-019-09477-y
EA DEC 2019
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000500304200001
DA 2024-07-18
ER

PT J
AU Alkharabsheh, K
   Crespo, Y
   Manso, E
   Taboada, JA
AF Alkharabsheh, Khalid
   Crespo, Yania
   Manso, Esperanza
   Taboada, Jose A.
TI Software Design Smell Detection: a systematic mapping study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE DesignSmell; Antipatterns; Detection tools; Quality models; Systematic
   mapping study
ID EVOLUTION
AB Design Smells are indicators of situations that negatively affect software quality attributes such as understandability, testability, extensibility, reusability, and maintainability in general. Improving maintainability is one of the cornerstones of making software evolution easier. Hence, Design Smell Detection is important in helping developers when making decisions that can improve software evolution processes. After a long period of research, it is important to organize the knowledge produced so far and to identify current challenges and future trends. In this paper, we analyze 18 years of research into Design Smell Detection. There is a wide variety of terms that have been used in the literature to describe concepts which are similar to what we have defined as "Design Smells," such as design defect, design flaw, anomaly, pitfall, antipattern, and disharmony. The aim of this paper is to analyze all these terms and include them in the study. We have used the standard systematic literature review method based on a comprehensive set of 395 articles published in different proceedings, journals, and book chapters. We present the results in different dimensions of Design Smell Detection, such as the type or scope of smell, detection approaches, tools, applied techniques, validation evidence, type of artifact in which the smell is detected, resources used in evaluation, supported languages, and relation between detected smells and software quality attributes according to a quality model. The main contributions of this paper are, on the one hand, the application of domain modeling techniques to obtain a conceptual model that allows the organization of the knowledge on Design Smell Detection and a collaborative web application built on that knowledge and, on the other, finding how tendencies have moved across different kinds of smell detection, as well as different approaches and techniques. Key findings for future trends include the fact that all automatic detection tools described in the literature identify Design Smells as a binary decision (having the smell or not), which is an opportunity to evolve to fuzzy and prioritized decisions. We also find that there is a lack of human experts and benchmark validation processes, as well as demonstrating that Design Smell Detection positively influences quality attributes.
C1 [Alkharabsheh, Khalid; Taboada, Jose A.] Univ Santiago de Compostela, Dept Elect & Comp Sci, Santiago De Compostela, Spain.
   [Crespo, Yania] Univ Valladolid, Comp Sci Dept, UVA, Valladolid, Spain.
   [Manso, Esperanza] Univ Valladolid, Comp Sci Dept, Valladolid, Spain.
C3 Universidade de Santiago de Compostela; Universidad de Valladolid;
   Universidad de Valladolid
RP Alkharabsheh, K (corresponding author), Univ Santiago de Compostela, Dept Elect & Comp Sci, Santiago De Compostela, Spain.
EM khalid.alkharabsheh@usc.es; yania@infor.uva.es; manso@infor.uva.es;
   joseangel.taboada@usc.es
RI González, José Ángel Taboada/L-5844-2014; Crespo, Yania/AAC-7691-2020;
   Alkharabsheh, Khalid/HGB-7962-2022
OI González, José Ángel Taboada/0000-0003-1897-1537; Crespo,
   Yania/0000-0003-0639-0540; Alkharabsheh, Khalid/0000-0002-3182-418X
FU Consellera de Cultura, Educacin e Ordenacin Universitaria [ED431G/08];
   European Regional Development Fund (ERDF)
FX This work has received financial support from the Consellera de Cultura,
   Educacin e Ordenacin Universitaria (accreditation 2016-2019, ED431G/08)
   and the European Regional Development Fund (ERDF). The authors would
   like to thank Irene Lavin from Universidad de Valladolid for her work in
   validating the database, checking integrity, and in the implementation
   of the web app (smellswisdom).
CR Alkharabsheh K., 2016, 21 JORN ING SOFTW BA, P143
   Alkharabsheh K., 2016, 21 JORN ING SOFTW BA, P159
   [Anonymous], 2003, ALAN APT SERIES
   [Anonymous], 2007, 6th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE), DOI DOI 10.1145/1287624.1287632
   Bavota G, 2015, J SYST SOFTWARE, V107, P1, DOI 10.1016/j.jss.2015.05.024
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Budgen D., 2008, INT C EV ASS SOFTW E, P88
   Charters S., 2007, GUIDELINES PERFORMIN
   Chiari BM, 2016, BRAZ J PHYS THER, V20, P1, DOI 10.1590/bjpt-rbf.2014.0150
   Dyba Tore, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P225
   Fokaefs Marios, 2007, 2007 IEEE International Conference on Software Maintenance, P519, DOI 10.1109/ICSM.2007.4362679
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Ganter B., 1999, FORMAL CONCEPT ANAL
   Gupta A, 2017, SYSTEMATIC LIT REV C
   Hassaine S, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P343, DOI 10.1109/QUATIC.2010.61
   Jung HW, 2004, IEEE SOFTWARE, V21, P88, DOI 10.1109/MS.2004.1331309
   Kitchenham B., 2006, P 10 INT C EV ASS SO, P81
   Laguna MA, 2013, SCI COMPUT PROGRAM, V78, P1010, DOI 10.1016/j.scico.2012.05.003
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Líska P, 2011, 2011 2ND EASTERN EUROPEAN REGIONAL CONFERENCE ON THE ENGINEERING OF COMPUTER BASED SYSTEMS (ECBS-EERC), P163, DOI 10.1109/ECBS-EERC.2011.39
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Moha N., 2007, 22 ACM SIGPLAN C OBJ, P949
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Novais RL, 2013, INFORM SOFTWARE TECH, V55, P1860, DOI 10.1016/j.infsof.2013.05.008
   Perez J., 2011, 201101 GIRO RES GROU
   Perez-Garcia F. J., 2011, THESIS
   Polasek I, 2012, INES 2012 IEEE 16 IN, P115
   Rasool G, 2015, J SOFTW-EVOL PROC, V27, P867, DOI 10.1002/smr.1737
   Rattan D, 2013, INFORM SOFTWARE TECH, V55, P1165, DOI 10.1016/j.infsof.2013.01.008
   Salehie M, 2006, INT C PROGRAM COMPRE, P159, DOI 10.1109/ICPC.2006.6
   Singh S., 2017, AIN SHAMS ENG J
   Suryanarayana G., 2014, Refactoring for Software Design Smells: Managing Technical Debt
   Vasconcellos FJS, 2017, J SYST SOFTWARE, V123, P45, DOI 10.1016/j.jss.2016.09.030
   Wohlin C., 2012, INT SERIES
   WOHLIN Claes, 2014, P 18 INT C EVALUATIO, DOI [10.1145/2601248.2601268.10, 10.1145/2601248.2601268]
   Yamashita A, 2013, J SYST SOFTWARE, V86, P2639, DOI 10.1016/j.jss.2013.05.007
   Zazworka Nico, 2011, P 2 WORKSH MAN TECHN, P17, DOI 10.1145/1985362.1985366
   Zhang M, 2011, J SOFTW MAINT EVOL-R, V23, P179, DOI 10.1002/smr.521
NR 38
TC 39
Z9 41
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1069
EP 1148
DI 10.1007/s11219-018-9424-8
PG 80
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400007
DA 2024-07-18
ER

PT J
AU Zhao, DD
   Lin, H
   Ran, LJ
   Han, MS
   Tian, J
   Lu, LP
   Xiong, SW
   Xiang, JW
AF Zhao, Dongdong
   Lin, Hong
   Ran, Linjun
   Han, Mushuai
   Tian, Jing
   Lu, Liping
   Xiong, Shengwu
   Xiang, Jianwen
TI CVSkSA: cross-architecture vulnerability search in firmware based on
   kNN-SVM and attributed control flow graph
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Firmware security; Cross-architecture; kNN-SVM; Bipartite matching
ID CODE
AB To prevent the same known vulnerabilities from affecting different firmware, searching known vulnerabilities in binary firmware across different architectures is crucial. Because the accuracy of existing cross-architecture vulnerability search methods is not high, we propose a staged approach based on support vector machine (SVM) and attributed control flow graph (ACFG) at the function level to improve the accuracy using prior knowledge. Furthermore, for efficiency, we utilize the k-nearest neighbor (kNN) algorithm to prune and SVM to refine in the function prefilter stage. Although the accuracy of the proposed method using kNN-SVM approach is slightly lower than the accuracy of the method using only SVM, its efficiency is significantly enhanced. We have implemented our approach CVSkSA to search several vulnerabilities in real-world firmware images. The experimental results show that the accuracy of the proposed method using kNN-SVM approach is close to the accuracy of the method using only SVM in most cases, while the former is approximately four times faster than the latter.
C1 [Zhao, Dongdong; Lin, Hong; Ran, Linjun; Han, Mushuai; Tian, Jing; Lu, Liping; Xiong, Shengwu; Xiang, Jianwen] Wuhan Univ Technol, Sch Comp Sci & Technol, Hubei Key Lab Transportat Internet Things, Wuhan 430070, Hubei, Peoples R China.
C3 Wuhan University of Technology
RP Xiang, JW (corresponding author), Wuhan Univ Technol, Sch Comp Sci & Technol, Hubei Key Lab Transportat Internet Things, Wuhan 430070, Hubei, Peoples R China.
EM jwxiang@whut.edu.cn
RI Xiang, Jianwen/AAX-3801-2021; Xiong, Shou-Mei/A-4225-2009
FU National Natural Science Foundation of China [61672398, 61702386,
   61806151]; Key Natural Science Foundation of Hubei Province of China
   [2017CFA012]; Major Technical Innovation Program of Hubei Province
   [2017AAA122]; Applied Fundamental Research of Wuhan [2016010101010004]
FX This work was partially supported by the National Natural Science
   Foundation of China (Grant No. 61672398, 61702386, 61806151), the Key
   Natural Science Foundation of Hubei Province of China (Grant No.
   2017CFA012), the Major Technical Innovation Program of Hubei Province
   (Grant No. 2017AAA122), and the Applied Fundamental Research of Wuhan
   (Grant No. 2016010101010004).
CR Adelstein F, 2002, 18TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P403, DOI 10.1109/CSAC.2002.1176312
   [Anonymous], 2013, R21676 DDWRT
   [Anonymous], 2013, BUSYBOX V1 21
   [Anonymous], 2014, NETGEAR READYNAS V6
   [Anonymous], 2013, OPENSSL V1 0 1 E
   [Anonymous], 2014, OPENSSL V1 0 1F
   [Anonymous], 2014, DIR 815 FIRMWARE IMA
   [Anonymous], 2016, NDSS
   [Anonymous], OSDI
   [Anonymous], 2002, Computer Science, DOI DOI 10.1007/978-3-642-27733-7299-3
   [Anonymous], 2013, DIR 645 FIRMWARE IMA
   [Anonymous], 2014, P 2014 NETW DISTR SY
   [Anonymous], 2014, DIR 300 FIRMWARE IMA
   [Anonymous], 2013, P 2 ACM SIGPLAN PROG
   [Anonymous], P NETW DISTR SYST SE
   [Anonymous], 2013, DIR 600 FIRMWARE IMA
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   BOURGEOIS F, 1971, COMMUN ACM, V14, P802, DOI 10.1145/362919.362945
   [常青 Chang Qing], 2016, [计算机研究与发展, Journal of Computer Research and Development], V53, P2288
   Choue A., 2017, DETECTING HEARTBLEED
   Costin A, 2014, USENIX SEC S, P95
   David Y, 2014, ACM SIGPLAN NOTICES, V49, P349, DOI [10.1145/2594291.2594343, 10.1145/2666356.2594343]
   Diestel R, 1997, MATH GAZETTE, V173, P67
   Egele M, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P303
   Eschweiler S., 2016, P 23 S NETW DISTR SY, P381
   Feldt R, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P374
   Feng Q., 2016, P 2016 ACM SIGSAC C, P480, DOI [10.1145/2976749.2978370, DOI 10.1145/2976749.2978370]
   Gao DB, 2008, LECT NOTES COMPUT SC, V5308, P238
   Guifanow I., 2016, FAST LIB IDENTIFICAT
   Hsu CC, 2005, LECT NOTES ARTIF INT, V3801, P550
   Jang JY, 2012, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2012.13
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Jin W, 2012, 2012 11TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2012), VOL 1, P386, DOI 10.1109/ICMLA.2012.70
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Knownsec, 2017, STAT AN REP BACK DOO
   Kolbitsch C, 2012, P IEEE S SECUR PRIV, P443, DOI 10.1109/SP.2012.48
   Kolter Jeremy Z, 2004, P 10 ACM SIGKDD INT, P470, DOI DOI 10.1145/1014052.1014105
   Lin H, 2017, 2017 FOURTH INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND THEIR APPLICATIONS (DSA 2017), P35, DOI 10.1109/DSA.2017.15
   Ming J, 2012, PROCEEDINGS OF THE NINTH INTERNATIONAL FORUM - INTERNATIONAL TRADE AND INVESTMENT, P92
   Myles G., 2005, ACM S APPL COMP, P314
   Ng BH, 2013, P INT COMP SOFTW APP, P492, DOI 10.1109/COMPSAC.2013.83
   Pewny J., 2014, P 30 ANN COMP SEC AP, P406, DOI [10.1145/2664243.2664269, DOI 10.1145/2664243.2664269]
   Pewny J, 2015, P IEEE S SECUR PRIV, P709, DOI 10.1109/SP.2015.49
   Tabrizi SS, 2016, PROCEDIA COMPUT SCI, V102, P588, DOI 10.1016/j.procs.2016.09.447
   Yamaguchi F, 2014, P IEEE S SECUR PRIV, P590, DOI 10.1109/SP.2014.44
   Yusof A. R. A., 2016, INT C IND ENG OTH AP, P550
   Zhang H., 2006, 2006 IEEE COMP SOC C, V2, P2126, DOI DOI 10.1109/CVPR.2006.301
NR 47
TC 12
Z9 12
U1 0
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1045
EP 1068
DI 10.1007/s11219-018-9435-5
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400006
OA hybrid
DA 2024-07-18
ER

PT J
AU Morgado, IC
   Paiva, ACR
AF Morgado, Ines Coimbra
   Paiva, Ana C. R.
TI Mobile GUI testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mobile testing; Android; Reverse engineering; Case study; UI patterns
AB This paper presents a tool (iMPAcT) that automates testing of mobile applications based on the presence of recurring behaviour, UI Patterns. It combines reverse engineering, pattern matching and testing. The reverse engineering process is responsible for crawling the application, i.e. analysing the state of the application and interacting with it by firing events. The pattern matching tries to identify the presence of UI patterns based on a catalogue of patterns. When a UI Pattern from the catalogue is detected, a test strategy is applied (testing). These test strategies are called UI Test Patterns. These three phases work in an iterative way: the patterns are identified and tested between firing of events, i.e. the process alternates between exploring the application and testing the UI Patterns. The process is dynamic and fully automatic not requiring any previous knowledge about the application under test. This paper presents the results of an experiment studying the reliability of the results obtained by iMPAcT. The experiment involved 25 applications found on Google Play Store and concludes that iMPAcT is successful in identifying failures in the tested patterns and that the degree of certainty of an identified failure being an actual failure is high.
C1 [Morgado, Ines Coimbra; Paiva, Ana C. R.] Univ Porto, Fac Engn, Dept Informat Engn, Porto, Portugal.
   [Morgado, Ines Coimbra] INESC TEC, Porto, Portugal.
   [Paiva, Ana C. R.] INESC TEC, Software Engn Area, Porto, Portugal.
C3 Universidade do Porto; INESC TEC; INESC TEC
RP Paiva, ACR (corresponding author), Univ Porto, Fac Engn, Dept Informat Engn, Porto, Portugal.; Paiva, ACR (corresponding author), INESC TEC, Software Engn Area, Porto, Portugal.
EM apaiva@fe.up.pt
RI Paiva, Ana/B-1136-2014
OI Paiva, Ana/0000-0003-3431-8060
CR Alexander C., 1977, PATTERN LANGUAGE TOW
   Amalfitano D, 2015, IEEE SOFTWARE, V32, P53, DOI 10.1109/MS.2014.55
   Android G, 2015, ANDR NAV DRAW
   Android G, 2015, RUNN MAT DES
   [Anonymous], 2011, ISO/IEC 25010:2011
   Avancini A, 2013, 2013 8TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST (AST), P57, DOI 10.1109/IWAST.2013.6595792
   Batyuk L., 2011, 2011 6th International Conference on Malicious and Unwanted Software, P66, DOI 10.1109/MALWARE.2011.6112328
   Coimbra Morgado I., 2015, 20 EUR C PATT LANG P
   Coimbra Morgado I., 2015, 6 INT WORKSH TEST TE
   Coimbra Morgado I., 2015, 30 IEEE ACM INT C AU
   Dar MA, 2014, 2014 INTERNATIONAL CONFERENCE ON CONTROL, INSTRUMENTATION, COMMUNICATION AND COMPUTATIONAL TECHNOLOGIES (ICCICCT), P728, DOI 10.1109/ICCICCT.2014.6993055
   Fowler M., 1997, ANAL PATTERNS REUSAB
   Franke D., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P241, DOI 10.1109/ICST.2012.104
   Gorla A, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1025, DOI 10.1145/2568225.2568276
   Ingraham N., 2013, Apple announces 1 million apps in the App Store, more than 1 billion songs played on iTunes radio
   Moran K, 2016, IEEE INT CONF SOFTW, P33, DOI 10.1109/ICST.2016.34
   Moreira RMLM, 2017, SOFTW TEST VERIF REL, V27, DOI 10.1002/stvr.1629
   Morgado IC, 2017, THESIS U PORTO
   Morgado IC, 2016, PROCEDIA COMPUT SCI, V83, P284, DOI 10.1016/j.procs.2016.04.127
   Muccini H., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P29, DOI 10.1109/IWAST.2012.6228987
   Nguyen C.D., 2012, Proceedings of the 2012 International Symposium on Software Testing and Analysis, P100, DOI 10.1145/04000800.2336765
   Ravitch T., 2014, PPREW
   Zhu HW, 2015, P INT COMP SOFTW APP, P248, DOI 10.1109/COMPSAC.2015.77
NR 23
TC 9
Z9 12
U1 1
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1553
EP 1570
DI 10.1007/s11219-017-9387-1
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400012
DA 2024-07-18
ER

PT J
AU Jabangwe, R
   Börstler, J
   Petersen, K
AF Jabangwe, Ronald
   Borstler, Jurgen
   Petersen, Kai
TI Handover of managerial responsibilities in global software development:
   a case study of source code evolution and quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Global software development; Distributed development; Source code
   analysis; Software transfers; Object-oriented measures; Case study
AB Studies report on the negative effect on quality in global software development (GSD) due to communication and coordination-related challenges. However, empirical studies reporting on the magnitude of the effect are scarce. This paper presents findings from an embedded explanatory case study on the change in quality over time, across multiple releases, for products that were developed in a GSD setting. The GSD setting involved periods of distributed development between geographically dispersed sites as well as a handover of project management responsibilities between the involved sites. Investigations were performed on two medium-sized products from a company that is part of a large multinational corporation. Quality is investigated quantitatively using defect data and measures that quantify two source code properties, size and complexity. Observations were triangulated with subjective views from company representatives. There were no observable indications that the distribution of work or handover of project management responsibilities had an impact on quality on both products. Among the product-, process- and people-related success factors, we identified well-designed product architectures, early handover planning and support from the sending site to the receiving site after the handover and skilled employees at the involved sites. Overall, these results can be useful input for decision-makers who are considering distributing development work between globally dispersed sites or handing over project management responsibilities from one site to another. Moreover, our study shows that analyzing the evolution of size and complexity properties of a product's source code can provide valuable information to support decision-making during similar projects. Finally, the strategy used by the company to relocate responsibilities can also be considered as an alternative for software transfers, which have been linked with a decline in efficiency, productivity and quality.
C1 [Jabangwe, Ronald; Borstler, Jurgen; Petersen, Kai] Blekinge Inst Technol, S-37179 Karlskrona, Sweden.
C3 Blekinge Institute Technology
RP Petersen, K (corresponding author), Blekinge Inst Technol, S-37179 Karlskrona, Sweden.
EM ronald.jabangwe@bth.se; jurgen.borstler@bth.se; kai.petersen@bth.se
RI Börstler, Jürgen/IWE-4001-2023; Jabangwe, Ronald/P-1049-2018
OI Börstler, Jürgen/0000-0003-0639-4234; Jabangwe,
   Ronald/0000-0002-2305-6352; Petersen, Kai/0000-0002-1532-8223
FU Swedish Knowledge Foundation [2009/0249]
FX This work was funded by the Swedish Knowledge Foundation under the
   research grant 2009/0249. We thank Professor Claes Wohlin and Dr. Darja
   Smite, at Software Engineering Research Lab (SERL), for their valuable
   comments on the paper.
CR [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 2011, REAL WORLD RES
   Hongmin Lu, 2012, Empirical Software Engineering, V17, P200, DOI 10.1007/s10664-011-9170-z
   Mens T., 2008, Software Evolution
   Mockus A, 2001, IEEE SOFTWARE, V18, P30, DOI 10.1109/52.914737
   Nagappan N, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P521, DOI 10.1145/1368088.1368160
   Nidhra S, 2013, INT J INFORM MANAGE, V33, P333, DOI 10.1016/j.ijinfomgt.2012.11.004
   Nurdiani I., 2011, 2011 Sixth IEEE International Conference on Global Software Engineering Workshop, P36, DOI 10.1109/ICGSE-W.2011.16
   Petersen K, 2013, 2013 JOINT CONFERENCE OF THE 23RD INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2013 EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA), P81, DOI 10.1109/IWSM-Mensura.2013.22
   Petersen K, 2010, J SYST SOFTWARE, V83, P1275, DOI 10.1016/j.jss.2010.02.005
   Petersen K, 2009, INT SYMP EMP SOFTWAR, P402
   Ramasubbu Narayan., 2007, Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering, P125
   Rudiger Lincke., 2008, International Symposium on Software Testing and Analysis, P131, DOI 10.1145/1390630.1390648
   Singh Y, 2009, INT J COMPUT APPL T, V35, P183, DOI 10.1504/IJCAT.2009.026595
   Singh Y, 2010, SOFTWARE QUAL J, V18, P3, DOI 10.1007/s11219-009-9079-6
   Smite D, 2008, 2008 3RD IEEE INTERNATIONAL CONFERENCE GLOBAL SOFTWARE ENGINEERING, PROCEEDINGS, P173, DOI 10.1109/ICGSE.2008.22
   Smite D, 2013, J SYST SOFTWARE, V86, P1054, DOI 10.1016/j.jss.2012.10.003
   Smite D, 2012, J SOFTW-EVOL PROC, V24, P605, DOI 10.1002/smr.550
   Smite D, 2011, IEEE SOFTWARE, V28, P60, DOI 10.1109/MS.2010.112
   Smite D, 2010, EMPIR SOFTW ENG, V15, P91, DOI 10.1007/s10664-009-9123-y
   Spinellis D., 2006, GSD 06, P73
   Verner J. M., 2012, 16th International Conference on Evaluation & Assessment in Software Engineering (EASE 2012), P2, DOI 10.1049/ic.2012.0001
   Wieringa R., 2013, 25 INT C ADV INF SYS, pxii
   Wohlin C., 2012, EXPT SOFTWARE ENG IN
   Wohlin C, 2012, ASIA PAC SOFWR ENG, P828, DOI 10.1109/APSEC.2012.137
NR 25
TC 7
Z9 8
U1 1
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2015
VL 23
IS 4
BP 539
EP 566
DI 10.1007/s11219-014-9247-1
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CU1CN
UT WOS:000363257000001
DA 2024-07-18
ER

PT J
AU Fawaz, K
   Zaraket, F
   Masri, W
   Harkous, H
AF Fawaz, Kassem
   Zaraket, Fadi
   Masri, Wes
   Harkous, Hamza
TI PBCOV: a property-based coverage criterion
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Coverage criteria; Property-based coverage; State
   space coverage; Specification-based coverage; Test suite evaluation;
   Reachability analysis; Logic synthesis
ID ABSTRACTION
AB Coverage criteria aim at satisfying test requirements and compute metrics values that quantify the adequacy of test suites at revealing defects in programs. Typically, a test requirement is a structural program element, and the coverage metric value represents the percentage of elements covered by a test suite. Empirical studies show that existing criteria might characterize a test suite as highly adequate, while it does not actually reveal some of the existing defects. In other words, existing structural coverage criteria are not always sensitive to the presence of defects. This paper presents PBCOV, a Property-Based COVerage criterion, and empirically demonstrates its effectiveness. Given a program with properties therein, static analysis techniques, such as model checking, leverage formal properties to find defects. PBCOV is a dynamic analysis technique that also leverages properties and is characterized by the following: (a) It considers the state space of first-order logic properties as the test requirements to be covered; (b) it uses logic synthesis to compute the state space; and (c) it is practical, i.e., computable, because it considers an over-approximation of the reachable state space using a cut-based abstraction.We evaluated PBCOV using programs with test suites comprising passing and failing test cases. First, we computed metrics values for PBCOV and structural coverage using the full test suites. Second, in order to quantify the sensitivity of the metrics to the absence of failing test cases, we computed the values for all considered metrics using only the passing test cases. In most cases, the structural metrics exhibited little or no decrease in their values, while PBCOV showed a considerable decrease. This suggests that PBCOV is more sensitive to the absence of failing test cases, i.e., it is more effective at characterizing test suite adequacy to detect defects, and at revealing deficiencies in test suites.
C1 [Fawaz, Kassem] Univ Michigan, Ann Arbor, MI 48109 USA.
   [Zaraket, Fadi; Masri, Wes] Amer Univ Beirut, Elect & Comp Engn Dept, Beirut, Lebanon.
   [Harkous, Hamza] Swiss Fed Inst Technol Lausanne EPFL, Lausanne, Switzerland.
C3 University of Michigan System; University of Michigan; American
   University of Beirut; Swiss Federal Institutes of Technology Domain;
   Ecole Polytechnique Federale de Lausanne
RP Zaraket, F (corresponding author), Amer Univ Beirut, Beirut, Lebanon.
EM kmfawaz@umich.edu; fz11@aub.edu.lb; wm13@aub.edu.lb;
   hamza.harkous@epfl.ch
RI Masri, Wes/A-1786-2013
OI Zaraket, Fadi/0000-0001-5909-6375
FU NSF [0819987]; AUB University Research Board; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [0819987] Funding Source: National Science Foundation
FX This paper builds on the short position paper (2 pages) entitled:
   "Property-based Coverage Criterion," presented at the DEFECTS Workshop,
   Chicago, IL, July 2009. This research was supported in part by NSF
   (Grant# 0819987) and by the AUB University Research Board.
CR Ammann P., 2001, INT J RELIABILITY QU, V8, P239
   Ammann Paul, 2008, Introduction to software testing, V1st
   [Anonymous], ABC BERK LOG SYNTH V
   Ball T., 2004, Formal Methods for Components and Objects. Third International Symposium, FMCO 2004. Revised Lectures (Lecture Notes in Computer Science Vol. 3657), P1
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Ball T, 2011, COMMUN ACM, V54, P68, DOI 10.1145/1965724.1965743
   Barr A., 2004, FIND BUG IOOK INCORR
   Baudin P., 2009, ACSL ANSI C SPECIFIC
   Boyapati C., 2002, Software Engineering Notes, V27, P123, DOI 10.1145/566171.566191
   Burnim Jacob, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P443, DOI 10.1109/ASE.2008.69
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clarke EM, 1999, MODEL CHECKING, P1
   Coen-Porisini A., 2001, Software Engineering Notes, V26, P142, DOI 10.1145/503271.503230
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Dutertre Bruno., 2006, COMPUTER AIDED VERIF
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Ford LR., 1956, CAN J MATH, V8, P399, DOI [10.4153/CJM-1956-045-5, DOI 10.4153/CJM-1956-045-5.12R]
   Gligoric M., 2010, INT C SOFTW ENG ACM
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Gough Brian., 2005, An Introduction to GCC
   Harder M, 2003, PROC INT CONF SOFTW, P60, DOI 10.1109/ICSE.2003.1201188
   Heimdahl MPE, 2004, LECT NOTES COMPUT SC, V2931, P42
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Horgan J., 1991, INT S SOFTWARE TESTI, P87, DOI 10.1145/120807.120815
   Jaygarl H., 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P127, DOI 10.1109/COMPSAC.2010.19
   Khurshid S., 2004, Automated Software Engineering, V11, P403, DOI 10.1023/B:AUSE.0000038938.10589.b9
   Linz P., 2012, An Introduction to Formal Languages and Automata, V5th
   Martinian E, 2010, RED BLACK TREE C COD
   Masri W., 2010, INT C SOFTW TEST VER
   Masri W, 2007, IEEE T SOFTWARE ENG, V33, P454, DOI 10.1109/TSE.2007.1020
   Masri W, 2010, SOFTW TEST VERIF REL, V20, P121, DOI 10.1002/stvr.409
   McMillan K. L., 1998, TECHNICAL REPORT
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Rapps S., 1982, Sixth International Conference on Software Engineering, P272
   Santelices Raul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P218, DOI 10.1109/ASE.2008.32
   Schuler D., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P90, DOI 10.1109/ICST.2011.32
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
   Yang Jinlin., 2004, P 5 ACM SIGPLAN SIGS, P23, DOI DOI 10.1145/996821.996832
   Yang XJ, 2010, COMPUT J, V53, P37, DOI 10.1093/comjnl/bxn075
   Zaraket F., 2009, INT WORKSH DEF LARG, P27
NR 44
TC 3
Z9 4
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2015
VL 23
IS 1
BP 171
EP 202
DI 10.1007/s11219-014-9237-3
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC4TB
UT WOS:000350345400009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zazworka, N
   Vetro', A
   Izurieta, C
   Wong, S
   Cai, YF
   Seaman, C
   Shull, F
AF Zazworka, Nico
   Vetro', Antonio
   Izurieta, Clemente
   Wong, Sunny
   Cai, Yuanfang
   Seaman, Carolyn
   Shull, Forrest
TI Comparing four approaches for technical debt identification
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Technical debt; Software maintenance; Software quality; Source code
   analysis; Modularity violations; Grime; Code smells; ASA
AB Software systems accumulate technical debt (TD) when short-term goals in software development are traded for long-term goals (e.g., quick-and-dirty implementation to reach a release date versus a well-refactored implementation that supports the long-term health of the project). Some forms of TD accumulate over time in the form of source code that is difficult to work with and exhibits a variety of anomalies. A number of source code analysis techniques and tools have been proposed to potentially identify the code-level debt accumulated in a system. What has not yet been studied is if using multiple tools to detect TD can lead to benefits, that is, if different tools will flag the same or different source code components. Further, these techniques also lack investigation into the symptoms of TD "interest" that they lead to. To address this latter question, we also investigated whether TD, as identified by the source code analysis techniques, correlates with interest payments in the form of increased defect- and change-proneness. Comparing the results of different TD identification approaches to understand their commonalities and differences and to evaluate their relationship to indicators of future TD "interest." We selected four different TD identification techniques (code smells, automatic static analysis issues, grime buildup, and Modularity violations) and applied them to 13 versions of the Apache Hadoop open source software project. We collected and aggregated statistical measures to investigate whether the different techniques identified TD indicators in the same or different classes and whether those classes in turn exhibited high interest (in the form of a large number of defects and higher change-proneness). The outputs of the four approaches have very little overlap and are therefore pointing to different problems in the source code. Dispersed Coupling and Modularity violations were co-located in classes with higher defect-proneness. We also observed a strong relationship between Modularity violations and change-proneness. Our main contribution is an initial overview of the TD landscape, showing that different TD techniques are loosely coupled and therefore indicate problems in different locations of the source code. Moreover, our proxy interest indicators (change- and defect-proneness) correlate with only a small subset of TD indicators.
C1 [Zazworka, Nico] Elsevier Informat Syst GmbH, Frankfurt, Germany.
   [Zazworka, Nico; Vetro', Antonio; Seaman, Carolyn; Shull, Forrest] Fraunhofer CESE, College Pk, MD USA.
   [Vetro', Antonio] Politecn Torino, Automat & Informat Dept, Turin, Italy.
   [Izurieta, Clemente] Montana State Univ, Dept Comp Sci, Bozeman, MT 59717 USA.
   [Wong, Sunny] Siemens Healthcare, Hlth Serv, Malvern, PA USA.
   [Cai, Yuanfang] Drexel Univ, Dept Comp Sci, Philadelphia, PA 19104 USA.
   [Seaman, Carolyn] UMBC, Dept Informat Syst, Baltimore, MD USA.
C3 Reed Elsevier; Elsevier; Polytechnic University of Turin; Montana State
   University System; Montana State University Bozeman; Siemens AG; Drexel
   University; University System of Maryland; University of Maryland
   Baltimore County
RP Zazworka, N (corresponding author), Elsevier Informat Syst GmbH, Frankfurt, Germany.
EM zazworka@gmail.com; antonio.vetro@polito.it;
   clemente.izurieta@cs.montana.edu; sunny.wong@siemens.com;
   yfcai@cs.drexel.edu; cseaman@umbc.edu; fshull@fc-md.umd.edu
RI Vetrò, Antonio/M-9042-2019; Shull, Forrest/GZK-6750-2022
OI Vetrò, Antonio/0000-0003-2027-3308; Zazworka, Nico/0000-0001-6549-453X;
   Izurieta, Clemente/0000-0002-1002-3906
FU Direct For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [0916699, 1116980] Funding Source: National
   Science Foundation; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1065189] Funding Source:
   National Science Foundation
CR Altman DG, 1991, PRACTICAL STAT MED R
   [Anonymous], 2010, 2010 IEEE International Conference on Software Maintenance, DOI [10.1109/ICSM.2010.5609564, DOI 10.1109/ICSM.2010.5609564]
   [Anonymous], P 27 INT C SOFTW ENG
   Ayewah N., 2010, Proceedings of the 19th international symposium on Software testing and analysis, P241
   BASILI VR, 1984, IEEE T SOFTWARE ENG, V10, P728, DOI 10.1109/TSE.1984.5010301
   Bieman JM, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P40, DOI 10.1109/METRIC.2003.1232454
   Boogerd C, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P41, DOI 10.1109/MSR.2009.5069479
   Brown Nanette, 2010, P FSE SDP WORKSH FUT, P47
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   CAST, 2010, CAST WORLDW APPL SOF
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cunningham W., 1993, OOPS MESSENGER, V4, P29, DOI DOI 10.1145/157710.157715
   D'Ambros Marco, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P23, DOI 10.1109/QSIC.2010.58
   El Emam K, 1998, NINTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P322, DOI 10.1109/ISSRE.1998.730897
   Evans J.D., 1996, Straightforward statistics for the behavioral sciences
   Fenton N, 2007, INFORM SOFTWARE TECH, V49, P32, DOI 10.1016/j.infsof.2006.09.001
   FLEISS JL, 1973, EDUC PSYCHOL MEAS, V33, P613, DOI 10.1177/001316447303300309
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gat Israel, 2011, WORKSH MAN TECHN DEB, P24, DOI [10.1145/1985362.1985368, DOI 10.1145/1985362.1985368]
   Guéhéneuc YG, 2001, TOOLS, V39, P296, DOI 10.1109/TOOLS.2001.941682
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Izurieta Clemente, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P171, DOI 10.1109/ICST.2008.27
   Izurieta Clemente, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P449
   Izurieta C, 2013, SOFTWARE QUAL J, V21, P289, DOI 10.1007/s11219-012-9175-x
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   Kim S, 2007, P 6 JOINT M EUR SOFT, P45, DOI DOI 10.1145/1287624.1287633
   Kim S., 2007, 4 INT WORKSHOP MININ, P27, DOI DOI 10.1109/MSR.2007.26
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Muthanna S, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P248, DOI 10.1109/WCRE.2000.891476
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Nugroho A, 2011, P 2 WORKSH MAN TECHN, P1
   Park HM, 2003, THIRD INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P308
   Riaz M, 2009, INT SYMP EMP SOFTWAR, P368, DOI 10.1109/esem.2009.5314233
   Schumacher J., 2010, SER ESEM10, DOI [10.1145/-1852786.1852797, DOI 10.1145/-1852786.1852797]
   SHULL F, 2011, IEEE SOFTWARE, V28, P4
   Vetro Antonio, 2011, 15th Annual Conference on Evaluation & Assessment in Software Engineering (EASE 2011), P144, DOI 10.1049/ic.2011.0018
   Vetro' Antonio, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P110, DOI 10.1109/MSR.2010.5463283
   Wagner S, 2005, LECT NOTES COMPUT SC, V3502, P40
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Wong S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P411, DOI 10.1145/1985793.1985850
   Zazworka Nico, 2011, P 2 WORKSH MAN TECHN, P17, DOI 10.1145/1985362.1985366
NR 43
TC 60
Z9 70
U1 1
U2 19
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2014
VL 22
IS 3
BP 403
EP 426
DI 10.1007/s11219-013-9200-8
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK6IH
UT WOS:000338530800002
DA 2024-07-18
ER

PT J
AU Colomo-Palacios, R
   Casado-Lumbreras, C
   Soto-Acosta, P
   García-Peñalvo, FJ
   Tovar, E
AF Colomo-Palacios, Ricardo
   Casado-Lumbreras, Cristina
   Soto-Acosta, Pedro
   Jose Garcia-Penalvo, Francisco
   Tovar, Edmundo
TI Project managers in global software development teams: a study of the
   effects on productivity and performance
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Global software development; Software project managers; Efficiency
ID DECISION-MAKING; VIRTUAL TEAMS; COMMUNICATION
AB Globalization is having a deep impact on today's world economy. One of the most affected industries is the software industry. Recently, global software development (GSD) has gained a lot of attention. This new trend of producing software is influencing all software processes, including human resource management. The aim of this study is to provide an overview of the implications of GSD for software project managers by analyzing project performance from different perspectives such as the 360-degree feedback evaluation. Results show that performance of GSD projects is lower than in-house projects, but apart from that, this study reveals that there are also negative consequences for software project managers, which need to be taken into account. For instance, the experiment revealed a lack of attention to tasks by software project managers and, as a consequence of this, performance losses. The main conclusions of this research may be valuable for software development organizations.
C1 [Colomo-Palacios, Ricardo; Casado-Lumbreras, Cristina; Soto-Acosta, Pedro; Jose Garcia-Penalvo, Francisco; Tovar, Edmundo] Ricardo Colomo Palacios, Madrid, Spain.
RP Colomo-Palacios, R (corresponding author), Ricardo Colomo Palacios, Madrid, Spain.
EM ricardo.colomo@uc3m.es
RI Colomo-Palacios, Ricardo/E-5139-2010; GARCÍA-PEÑALVO, Francisco
   José/D-5445-2013; Casado-Lumbreras, Cristina/KIK-5336-2024; Soto-Acosta,
   Pedro/B-3927-2011
OI Colomo-Palacios, Ricardo/0000-0002-1555-9726; GARCÍA-PEÑALVO, Francisco
   José/0000-0001-9987-5584; Tovar, Edmundo/0000-0003-2929-659X;
   Soto-Acosta, Pedro/0000-0003-4308-9781
FU Fundacion Cajamurcia
FX We thank Fundacion Cajamurcia for the financial support provided.
CR ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   [Anonymous], MACWORLD AUG
   [Anonymous], ACM T INTERNET TECHN
   Atwater LE, 2005, J VOCAT BEHAV, V66, P532, DOI 10.1016/j.jvb.2004.05.003
   Avritzer A, 2010, J SYST SOFTWARE, V83, P1881, DOI 10.1016/j.jss.2010.05.070
   Babar MA, 2007, J SYST SOFTWARE, V80, P1438, DOI [10.1016/j.jss.2006.10.038, 10.1016/j.jss.2006.12.038]
   Beehr TA, 2001, J ORGAN BEHAV, V22, P775, DOI 10.1002/job.113
   BOEHM BW, 1989, IEEE T SOFTWARE ENG, V15, P902, DOI 10.1109/32.29489
   Bosch J, 2010, J SYST SOFTWARE, V83, P67, DOI 10.1016/j.jss.2009.06.051
   Brutus S., 1998, J MANAG DEV, V17, P177, DOI DOI 10.1108/EUM0000000004487
   Carmel E, 2001, IEEE SOFTWARE, V18, P22, DOI 10.1109/52.914734
   Carmel E., 2005, Offshoring Information Technology: Sourcing and Outsourcing to a Global Workforce
   Casey Valentine, 2009, Software Process: Improvement and Practice, V14, P247, DOI 10.1002/spip.422
   Casey Valentine, 2008, Software Process: Improvement and Practice, V13, P511, DOI 10.1002/spip.404
   Church A.H., 2000, Consulting Psychology Journal: Practice and Research, V52, P99
   Clott C.B., 2004, Business and Society Review, V109, P153
   Colazo JA, 2010, J ASSOC INF SYST, V11, P684
   Colomo-Palacios R, 2012, J GLOB INF TECH MAN, V15, P30, DOI 10.1080/1097198X.2012.10845617
   Colomo-Palacios R, 2011, J UNIVERS COMPUT SCI, V17, P1281
   Conchuir Eoin O, 2009, Software Process: Improvement and Practice, V14, P201, DOI 10.1002/spip.417
   CROW G, 2003, COMMUNICATIONS INT I, V3, P25
   Cusumano M, 2008, COMMUN ACM, V51, P15, DOI 10.1145/1314215.1314218
   D'Mello Marisa, 2007, Information and Organization, V17, P162, DOI 10.1016/j.infoandorg.2007.04.001
   Damian D, 2006, IEEE SOFTWARE, V23, P17, DOI 10.1109/MS.2006.126
   Dweiri FT, 2006, DECIS SUPPORT SYST, V42, P712, DOI 10.1016/j.dss.2005.04.001
   Ebert Christof., 2012, Global Software and IT: A guide to Distributed Development, Projects and Outsourcing
   Guzmán JG, 2010, SOFTWARE QUAL J, V18, P409, DOI 10.1007/s11219-010-9096-5
   Guzmán JG, 2011, INT J HUM CAP INF TE, V2, P48, DOI 10.4018/jhcitp.2011040105
   García-Crespo A, 2010, INFORM SYST MANAGE, V27, P247, DOI 10.1080/10580530.2010.493839
   Gefen D, 2008, MIS QUART, V32, P367
   Gupta A, 2009, J STRATEGIC INF SYST, V18, P147, DOI 10.1016/j.jsis.2009.07.001
   Gupta A, 2009, COMMUN ACM, V52, P122, DOI 10.1145/1516046.1516078
   Herbsleb JD, 2003, IEEE T SOFTWARE ENG, V29, P481, DOI 10.1109/TSE.2003.1205177
   Herbsleb JD, 2001, IEEE SOFTWARE, V18, P16, DOI 10.1109/52.914732
   Hernandez-Lopez Adrian, 2010, International Journal of Knowledge Society Research, V1, P65, DOI 10.4018/jksr.2010010105
   Hernández-López A, 2010, INT J HUM CAP INF TE, V1, P32, DOI 10.4018/jhcitp.2010070103
   Jalote P, 2006, J SYST SOFTWARE, V79, P904, DOI 10.1016/j.jss.2005.06.040
   Jiang J, 2000, J SYST SOFTWARE, V52, P3, DOI 10.1016/S0164-1212(99)00128-4
   Khan SU, 2011, J SYST SOFTWARE, V84, P686, DOI 10.1016/j.jss.2010.12.010
   Kommeren R, 2007, EMPIR SOFTW ENG, V12, P647, DOI 10.1007/s10664-007-9047-3
   Krishna S, 2004, COMMUN ACM, V47, P62, DOI 10.1145/975817.975818
   Kunda D, 2000, INFORM SOFTWARE TECH, V42, P715, DOI 10.1016/S0950-5849(00)00115-4
   Layman L, 2006, INFORM SOFTWARE TECH, V48, P781, DOI 10.1016/j.infsof.2006.01.004
   Martins LL, 2004, J MANAGE, V30, P805, DOI 10.1016/j.jm.2004.05.002
   Massingham P, 2011, J INTELLECT CAP, V12, P43, DOI 10.1108/14691931111097917
   Milewski Allen E., 2008, Software Process: Improvement and Practice, V13, P477, DOI 10.1002/spip.403
   Muhairat M., 2010, European Journal of Scientific Research, V46, P221
   Noll J., 2011, ACM INROADS, V1, P66, DOI [10.1145/1835428.1835445, DOI 10.1145/1835428.1835445]
   Oisen R.P., 1971, Project Management Quarterly, Project Management Institute (PMI), V2, P12
   Oza NV, 2006, INFORM SOFTWARE TECH, V48, P345, DOI 10.1016/j.infsof.2005.09.011
   Prikladnicki R., 2003, Software Process Improvement and Practice, V8, P267, DOI 10.1002/spip.188
   Prikladnicki R, 2010, INFORM SOFTWARE TECH, V52, P779, DOI 10.1016/j.infsof.2010.03.009
   Ramasubbu N, 2005, IEEE SOFTWARE, V22, P80, DOI 10.1109/MS.2005.69
   Ramasubbu Narayan., 2007, Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering, P125
   Robinson M., 2004, Offshore Outsourcing: Business Models, ROI and Best Practices
   Rogers P, 2005, BEHAV INFORM TECHNOL, V24, P151, DOI 10.1080/01449290410001723472
   Rose J, 2007, INFORM SOFTWARE TECH, V49, P605, DOI 10.1016/j.infsof.2007.02.005
   Smite D, 2011, IEEE SOFTWARE, V28, P60, DOI 10.1109/MS.2010.112
   Smite D, 2010, EMPIR SOFTW ENG, V15, P91, DOI 10.1007/s10664-009-9123-y
   Sooraj P., 2008, Strategic Outsourcing, V1, P122, DOI 10.1108/17538290810897147
NR 60
TC 55
Z9 68
U1 4
U2 30
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2014
VL 22
IS 1
SI SI
BP 3
EP 19
DI 10.1007/s11219-012-9191-x
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB2SX
UT WOS:000331643500002
DA 2024-07-18
ER

PT J
AU Izurieta, C
   Bieman, JM
AF Izurieta, Clemente
   Bieman, James M.
TI A multiple case study of design pattern decay, grime, and rot in
   evolving software systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Design concepts; Object-oriented design methods; Design patterns;
   Software evolution; Decay; Grime; Technical debt; Multiple case study
ID EMPIRICAL-ASSESSMENT; METRICS; CHANGEABILITY
AB Software designs decay as systems, uses, and operational environments evolve. Decay can involve the design patterns used to structure a system. Classes that participate in design pattern realizations accumulate grime-non-pattern-related code. Design pattern realizations can also rot, when changes break the structural or functional integrity of a design pattern. Design pattern rot can prevent a pattern realization from fulfilling its responsibilities, and thus represents a fault. Grime buildup does not break the structural integrity of a pattern but can reduce system testability and adaptability. This research examined the extent to which software designs actually decay, rot, and accumulate grime by studying the aging of design patterns in three successful object-oriented systems. We generated UML models from the three implementations and employed a multiple case study methodology to analyze the evolution of the designs. We found no evidence of design pattern rot in these systems. However, we found considerable evidence of pattern decay due to grime. Dependencies between design pattern components increased without regard for pattern intent, reducing pattern modularity, and decreasing testability and adaptability. The study of decay and grime showed that the grime that builds up around design patterns is mostly due to increases in coupling.
C1 [Izurieta, Clemente] Montana State Univ, Bozeman, MT 59717 USA.
   [Bieman, James M.] Colorado State Univ, Dept Comp Sci, Ft Collins, CO 80523 USA.
C3 Montana State University System; Montana State University Bozeman;
   Colorado State University
RP Izurieta, C (corresponding author), Montana State Univ, Dept Comp Sci, Bozeman, MT 59717 USA.
EM clemente.izurieta@cs.montana.edu
OI Izurieta, Clemente/0000-0002-1002-3906
CR [Anonymous], 2008, PATT TOOL
   [Anonymous], 2008, JDEPENDS OPEN SOURCE
   [Anonymous], 1988, Principles of software engineering management
   [Anonymous], 2009, DESIGN PATTERN FINDE
   [Anonymous], 2008, JREFACTORY OPEN SOUR
   [Anonymous], 2009, JAVANCSS
   [Anonymous], 2009, JDEPENDS OPEN SOURCE
   [Anonymous], 2008, JAVANCSS
   [Anonymous], 2008, DESIGN PATTERN FINDE
   [Anonymous], 2008, EXIST DAT
   [Anonymous], 2006, ALT UM
   Arisholm E, 2000, J SYST SOFTWARE, V53, P3, DOI 10.1016/S0164-1212(00)00003-0
   Arisholm E, 2004, IEEE T SOFTWARE ENG, V30, P491, DOI 10.1109/TSE.2004.41
   Arisholm E, 2006, INFORM SOFTWARE TECH, V48, P1046, DOI 10.1016/j.infsof.2006.01.002
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Baudry B, 2004, IWOTA 2004: 1ST INTERNATIONAL WORKSHOP ON TESTABILITY ASSESSMENT, PROCEEDINGS, P70
   Baudry B, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P50, DOI 10.1109/METRIC.2003.1232455
   Baudry B, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P54, DOI 10.1109/METRIC.2002.1011325
   Baudry B, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P324, DOI 10.1109/ISSRE.2001.989486
   Belady L. A., 1971, TECHNICAL REPORT
   Bieman JM, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P40, DOI 10.1109/METRIC.2003.1232454
   Binder R.V., 2000, AW OBJ TECHNOL S
   Briand L. C., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P475, DOI 10.1109/ICSM.1999.792645
   Briand L. C., 1997, P INT C SOFTW ENG IC
   Brown N., 2010, MANAGING TECHNICAL D
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Cain J. W., 2002, P 26 ANN INT COMP SO
   CHIDAMBER SR, 1991, SIGPLAN NOTICES, V26, P197
   Cunningham W., 1992, OOPSLA 92 EXP
   Eick SG, 2001, IEEE T SOFTWARE ENG, V27, P1, DOI 10.1109/32.895984
   Fenton N., 1996, SOFTWARE METRICS RIG, VSecond
   France R.E. S., 2002, Metarole-Based Modeling Lanugage (RBML) Specification V1.0
   France RB, 2004, IEEE T SOFTWARE ENG, V30, P193, DOI 10.1109/TSE.2004.1271174
   Freeman E., 2004, Head First Design Patterns: A Brain-Friendly Guide
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Godfrey M., 2000, P 2000 INT C SOFTW M
   Guéhéneuc YG, 2001, TOOLS, V39, P296, DOI 10.1109/TOOLS.2001.941682
   Guo Y., 2010, ICSE 10 MAY 2 8 CAP
   HENRY S, 1984, SOFTWARE PRACT EXPER, V14, P561, DOI 10.1002/spe.4380140606
   Izurieta C., 2007, 1 ACM IEEE INT S EMP
   Izurieta C., 2008, 1 ACM IEEE INT C SOF
   Khomh F., 2009, P 25 IEEE INT C SOFT
   Kim DK, 2008, SOFTWARE QUAL J, V16, P329, DOI 10.1007/s11219-008-9048-5
   Kouskouras KG, 2008, J SYST SOFTWARE, V81, P1725, DOI 10.1016/j.jss.2007.12.807
   Lehman M. M., 1998, P 1998 INT C SOFTW M
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   McNatt WB, 2001, P INT COMP SOFTW APP, P574, DOI 10.1109/CMPSAC.2001.960670
   Offutt J., 2008, INTRO SOFTWARE TESTI, P27
   Ott R.L., 2015, INTRO STAT METHODS D
   PARNAS DL, 1994, PROC INT CONF SOFTW, P279, DOI 10.1109/ICSE.1994.296790
   Pree W., 1994, Object-Oriented Programming. 8th European Conference, ECOOP '94. Proceedings, P150, DOI 10.1007/BFb0052181
   ROMBACH HD, 1990, IEEE SOFTWARE, V7, P17, DOI 10.1109/52.50770
   Schull F., 1996, CSTR3597 UMCPCSD
   Schumacher J., 2010, ESEM 10 SEPT 16 17 2
   van Gurp J, 2002, J SYST SOFTWARE, V61, P105, DOI 10.1016/S0164-1212(01)00152-2
   Yin R.K., 2011, Qualitative research from start to finish
   [No title captured]
NR 59
TC 23
Z9 32
U1 0
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2013
VL 21
IS 2
BP 289
EP 323
DI 10.1007/s11219-012-9175-x
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 114MX
UT WOS:000316746700004
DA 2024-07-18
ER

PT J
AU Roos-Frantz, F
   Benavides, D
   Ruiz-Cortés, A
   Heuer, A
   Lauenroth, K
AF Roos-Frantz, Fabricia
   Benavides, David
   Ruiz-Cortes, Antonio
   Heuer, Andre
   Lauenroth, Kim
TI Quality-aware analysis in product line engineering with the orthogonal
   variability model
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality modelling; Software product lines; Quality-aware analysis;
   Automated analysis; Orthogonal variability model
AB Software product line engineering is about producing a set of similar products in a certain domain. A variability model documents the variability amongst products in a product line. The specification of variability can be extended with quality information, such as measurable quality attributes (e.g., CPU and memory consumption) and constraints on these attributes (e.g., memory consumption should be in a range of values). However, the wrong use of constraints may cause anomalies in the specification which must be detected (e.g., the model could represent no products). Furthermore, based on such quality information, it is possible to carry out quality-aware analyses, i.e., the product line engineer may want to verify whether it is possible to build a product that satisfies a desired quality. The challenge for quality-aware specification and analysis is threefold. First, there should be a way to specify quality information in variability models. Second, it should be possible to detect anomalies in the variability specification associated with quality information. Third, there should be mechanisms to verify the variability model to extract useful information, such as the possibility to build a product that fulfils certain quality conditions (e.g., is there any product that requires less than 512 MB of memory?). In this article, we present an approach for quality-aware analysis in software product lines using the orthogonal variability model (OVM) to represent variability. We propose to map variability represented in the OVM associated with quality information to a constraint satisfaction problem and to use an off-the-shelf constraint programming solver to automatically perform the verification task. To illustrate our approach, we use a product line in the automotive domain which is an example that was created in a national project by a leading car company. We have developed a prototype tool named FaMa-OVM, which works as a proof of concepts. We were able to identify void models, dead and false optional elements, and check whether the product line example satisfies quality conditions.
C1 [Roos-Frantz, Fabricia; Benavides, David; Ruiz-Cortes, Antonio] Univ Seville, Dept Comp Languages & Syst, E-41012 Seville, Spain.
   [Heuer, Andre; Lauenroth, Kim] Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, D-45127 Essen, Germany.
C3 University of Sevilla; University of Duisburg Essen
RP Roos-Frantz, F (corresponding author), Univ Seville, Dept Comp Languages & Syst, Avda Reina Mercedes S-N, E-41012 Seville, Spain.
EM fabriciaroos@us.es; benavides@us.es; aruiz@us.es;
   andre.heuer@paluno.uni-due.de; kim.lauenroth@paluno.uni-due.de
RI Lauenroth, Kim/JQJ-2746-2023; Cortés, Antonio Ruiz/B-9056-2008;
   Benavides, David/K-2791-2014; Roos-Frantz, Fabricia/Y-6059-2018
OI Lauenroth, Kim/0009-0008-9197-0809; Cortés, Antonio
   Ruiz/0000-0001-9827-1834; Benavides, David/0000-0002-8449-3273;
   Roos-Frantz, Fabricia/0000-0001-9514-6560
FU European Commission (FEDER); Spanish Government under CICYT project SETI
   [TIN2009-07366]; Andalusian Government under ISABEL project [TIC-2533];
   Andalusian Government under THEOS project [TIC-5906]; Evangelischer
   Entwicklungsdienst e.V. (EED); DFG [PO 607/2-1 IST-SPL]
FX We would like to thank Silvia Abrahao and Isidro Ramos for their helpful
   comments in earlier versions of this article. We also would like to
   thank Jose Galindo for his work on implementing FaMa-OVM tool. This work
   has been partially supported by the European Commission (FEDER) and
   Spanish Government under CICYT project SETI (TIN2009-07366), by the
   Andalusian Government under ISABEL (TIC-2533) and THEOS (TIC-5906)
   projects, by Evangelischer Entwicklungsdienst e.V. (EED) and by the DFG
   under grant PO 607/2-1 IST-SPL.
CR [Anonymous], SOFTW PROD LIN 14 IN
   [Anonymous], 1993, Foundations of Constraint Satisfaction
   [Anonymous], SPLC INT C SOFTW PRO
   Bagheri E, 2010, LECT NOTES COMPUT SC, V6287, P16, DOI 10.1007/978-3-642-15579-6_2
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Batory D, 2006, COMMUN ACM, V49, P45, DOI 10.1145/1183236.1183264
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Berre D. L., 2010, SAT4J SOLVER
   Chen L., 2009, P 13 INT SOFTWARE PR, P81
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   Dhungana D., 2007, 22 IEEE ACM INT C AU, P533, DOI DOI 10.1145/1321631.1321730
   Dhungana D., 2010, 4 INT WORKSH VAR MOD, P29
   Felfernig A, 2000, INT J SOFTW ENG KNOW, V10, P449, DOI 10.1142/S0218194000000249
   Finkel R, 2011, AI EDAM, V25, P163, DOI 10.1017/S0890060410000600
   Foundation E., 2011, XTEXT LANG DEV FRAM
   García F, 2006, INFORM SOFTWARE TECH, V48, P631, DOI 10.1016/j.infsof.2005.07.001
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kang Kyo C, 1990, Technical Report
   Karatas AS, 2010, LECT NOTES COMPUT SC, V6287, P286, DOI 10.1007/978-3-642-15579-6_20
   Laburthe F., 2010, CHOCO SOLVER
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Metzger A, 2007, PROC INT CONF SOFTW, P186, DOI 10.1109/ICSECOMPANION.2007.83
   Montagud S., 2009, Proceedings of the International Software Product Line Conference, P91
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Sinnema M, 2004, LECT NOTES COMPUT SC, V3154, P197
   Sinnema M, 2007, INFORM SOFTWARE TECH, V49, P717, DOI 10.1016/j.infsof.2006.08.001
   Trinidad P, 2008, J SYST SOFTWARE, V81, P883, DOI 10.1016/j.jss.2007.10.030
   Trinidad P, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P359, DOI 10.1109/SPLC.2008.50
   White J, 2009, J SYST SOFTWARE, V82, P1268, DOI 10.1016/j.jss.2009.02.011
NR 30
TC 25
Z9 27
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2012
VL 20
IS 3-4
SI SI
BP 519
EP 565
DI 10.1007/s11219-011-9156-5
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 995IQ
UT WOS:000308001900004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bakir, A
   Turhan, B
   Bener, A
AF Bakir, Ayse
   Turhan, Burak
   Bener, Ayse
TI A comparative study for estimating software development effort intervals
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software effort estimation; Interval prediction; Classification; Cluster
   analysis; Machine learning
ID EFFORT PREDICTION; COST ESTIMATION
AB Software cost/effort estimation is still an open challenge. Many researchers have proposed various methods that usually focus on point estimates. Until today, software cost estimation has been treated as a regression problem. However, in order to prevent overestimates and underestimates, it is more practical to predict the interval of estimations instead of the exact values. In this paper, we propose an approach that converts cost estimation into a classification problem and that classifies new software projects in one of the effort classes, each of which corresponds to an effort interval. Our approach integrates cluster analysis with classification methods. Cluster analysis is used to determine effort intervals while different classification algorithms are used to find corresponding effort classes. The proposed approach is applied to seven public datasets. Our experimental results show that the hit rate obtained for effort estimation are around 90-100%, which is much higher than that obtained by related studies. Furthermore, in terms of point estimation, our results are comparable to those in the literature although a simple mean/median is used for estimation. Finally, the dynamic generation of effort intervals is the most distinctive part of our study, and it results in time and effort gain for project managers through the removal of human intervention.
C1 [Bakir, Ayse] Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
   [Turhan, Burak] Univ Oulu, Dept Informat Proc Sci, Oulu 90014, Finland.
   [Bener, Ayse] Ryerson Univ, Ted Rogers Sch Informat Technol Management, Toronto, ON M5B 2K3, Canada.
C3 Bogazici University; University of Oulu; Toronto Metropolitan University
RP Bakir, A (corresponding author), Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
EM ayse.bakir@boun.edu.tr; burak.turhan@oulu.fi; ayse.bener@ryerson.ca
RI Basar, Ayse/ABF-9265-2020; Turhan, Burak/G-7400-2011
OI Basar, Ayse/0000-0003-4934-8326; Turhan, Burak/0000-0003-1511-2163
FU Tubitak [EEEAG108E014]
FX This research is supported in part by Tubitak under grant number
   EEEAG108E014.
CR Alpaydin E, 2004, INTRO MACHINE LEARNI
   Angelis L., 2000, Empirical Software Engineering, V5, P35, DOI 10.1023/A:1009897800559
   [Anonymous], 2007, The promise repository of empirical software engineering data
   [Anonymous], 1986, Software Engineering Metrics and Models
   BAKAR ZA, 2005, PERFORMANCE ANAL PAR
   BASKELES B, 2007, P 22 INT S COMP INF, P126
   BIBI S, 2004, 1 SOFTW MEAS EUR FOR
   Boehm B., 2000, ANN SOFTWARE ENG
   BOEHM BW, 1999, COCOMO II COQUALMO D
   BOEHM BW, 1981, ADV COMPUTER SCI TEC
   BOETTICHER GD, 2001, 1 INT WORKSH MOD BAS, P17
   BRIAND LC, 1992, IEEE T SOFTWARE ENG, V18, P931, DOI 10.1109/32.177363
   Gallego JJC, 2007, J COMPUT SCI TECH-CH, V22, P371, DOI 10.1007/s11390-007-9043-5
   Draper N. R., 2014, Applied regression analysis
   Jorgensen M, 2003, INFORM SOFTWARE TECH, V45, P123, DOI 10.1016/S0950-5849(02)00188-X
   Jorgensen M., 2002, Empirical Software Engineering, V7, P375, DOI 10.1023/A:1020571206993
   JORGENSEN M, 2002, INT C PROJ MAN PROMA, P343
   Lee A, 1998, INFORM MANAGE-AMSTER, V34, P1, DOI 10.1016/S0378-7206(98)00041-X
   LEUNG H, 2001, HDB SOFTWARE ENG KNO
   Lum Karen., 2003, Handbook for Software Cost Estimation
   Menzies T, 2006, IEEE SOFTWARE, V23, P64
   MIYAZAKI Y, 1994, J SYST SOFTWARE, V27, P3, DOI 10.1016/0164-1212(94)90110-4
   *NASA, 1990, MAN HDB SOFTW DEV
   Quinlan J. R., 1993, PROGRAMS MACHINE LEA
   Sentas P, 2005, INFORM SOFTWARE TECH, V47, P17, DOI 10.1016/j.infsof.2004.05.001
   SENTAS P, 2003, 9 PANH C INF THESS
   SHALABI LA, 2006, IEEE P INT C DEP COM
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   *SOFTLAB, 2009, SOFTW RES LAB
   SRINIVASAN K, 1995, IEEE T SOFTWARE ENG, V21, P126, DOI 10.1109/32.345828
   Stamelos I, 2001, INFORM SOFTWARE TECH, V43, P759, DOI 10.1016/S0950-5849(01)00183-5
   Stamelos I, 2003, INFORM SOFTWARE TECH, V45, P51, DOI 10.1016/S0950-5849(02)00163-5
   STENSRUD E, 2003, FURTHER EMPIRICAL IN
   Tadayon N, 2005, ITCC 2005: INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: CODING AND COMPUTING, VOL 2, P815, DOI 10.1109/ITCC.2005.210
NR 34
TC 8
Z9 12
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2011
VL 19
IS 3
BP 537
EP 552
DI 10.1007/s11219-010-9112-9
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 775TK
UT WOS:000291486100004
DA 2024-07-18
ER

PT J
AU Parnin, C
   Rugaber, S
AF Parnin, Chris
   Rugaber, Spencer
TI Resumption strategies for interrupted programming tasks
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Interruption; Resumption strategies; Task context; Task knowledge
ID SYNAPTIC PLASTICITY; MEMORY; INFORMATION; RECOVERY
AB Interrupted and blocked tasks are a daily reality for professional programmers. Unfortunately, the strategies programmers use to recover lost knowledge and rebuild context when resuming work have not yet been well studied. In this paper, we describe an exploratory analysis performed on 10,000 recorded sessions of 86 programmers and a survey of 414 programmers to understand the various strategies and coping mechanisms developers use to manage interrupted programming tasks. Based on the analysis, we propose a framework for understanding these strategies and suggest how task resumption might be better supported in future development tools. The results suggest that task resumption is a frequent and persistent problem for developers. For example, we find that only 10% of the sessions have programming activity resume in less than 1 min after an interruption, only 7% of the programming sessions involve no navigation to other locations prior to editing. We also found that programmers use multiple coping mechanisms to recover task context when resuming work.
C1 [Parnin, Chris; Rugaber, Spencer] Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology
RP Parnin, C (corresponding author), Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
EM chris.parnin@gatech.edu; spencer@cc.gatech.edu
CR Adamczyk Piotr D., 2004, P SIGCHI C HUMAN FAC, P271, DOI DOI 10.1145/985692.985727
   ALLWOOD CM, 1984, COGNITIVE SCI, V8, P413, DOI 10.1016/S0364-0213(84)80009-9
   Altmann EM, 2002, COGNITIVE SCI, V26, P39, DOI 10.1207/s15516709cog2601_2
   Altmann EM, 2004, P 26 ANN C COGN SCI
   Altmann EM, 2007, PSYCHON B REV, V14, P1079, DOI 10.3758/BF03193094
   ANDERSON JR, 1984, COGNITIVE SCI, V8, P87, DOI 10.1016/S0364-0213(84)80013-0
   Anderson JR, 2004, PSYCHOL REV, V111, P1036, DOI 10.1037/0033-295x.111.4.1036
   [Anonymous], 1974, The psychology of learning and motivation, DOI DOI 10.1016/S0079-7421(08)60452-1
   [Anonymous], 2005, CHI 05 EXTENDED ABST, DOI DOI 10.1145/1056808.1056948
   [Anonymous], USER CTR SYSTEM DESI
   [Anonymous], 2001, Notification, Disruption, and Memory: Effects of Messaging Interruptions on Memory and Performance
   Atkinson R. C., 1968, Psychology of learning and motivation, V2, P89, DOI [10.1016/S0079-7421(08)60422-3, DOI 10.1016/S0079-7421(08)60422-3, DOI 10.1017/CBO9781316422250.025]
   BANNON L, 1983, CHI 83, P54
   Bellotti V., 2004, P SIGCHI C HUMAN FAC, P735
   BORST JP, 2007, ICCM 07, P133
   Brush AJB, 2007, CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1 AND 2, P947
   Chase W.G., 1982, PSYCHOL LEARNING MOT, P1, DOI [10.1016/S0079-7421, DOI 10.1016/S0079-7421]
   CHASE WG, 1973, COGNITIVE PSYCHOL, V4, P55, DOI 10.1016/0010-0285(73)90004-2
   Cherubini M, 2007, CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1 AND 2, P557
   Cowan N, 2001, BEHAV BRAIN SCI, V24, P87, DOI 10.1017/S0140525X01003922
   Czerwinski Mary, 2004, P SIGCHI C HUM FACT, P175, DOI [10.1145/985692.985715, DOI 10.1145/985692.985715]
   Dekel U, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P1011
   DELINE R, 2006, VLHCC 06, P11
   *ECL FDN, 2009, US DAT COLL RES
   Ericsson K.A., 1989, COMPLEX INFORM PROCE, P235
   ERICSSON KA, 1995, PSYCHOL REV, V102, P211, DOI 10.1037/0033-295X.102.2.211
   FOGARTY J, 2005, CHI 2005, P331
   Gilboa A, 2006, HIPPOCAMPUS, V16, P966, DOI 10.1002/hipo.20226
   GILLIE T, 1989, PSYCHOL RES-PSYCH FO, V50, P243, DOI 10.1007/BF00309260
   Hodgetts HM, 2006, J EXP PSYCHOL LEARN, V32, P1120, DOI 10.1037/0278-7393.32.5.1120
   Kersten Mik, 2006, P 14 ACM SIGSOFT INT, P1
   Ko AJ, 2005, PROC INT CONF SOFTW, P126
   Ko AJ, 2007, PROC INT CONF SOFTW, P344
   LATOZA TD, 2006, ICSE 06, P492
   Lethbridge TC, 2005, EMPIR SOFTW ENG, V10, P311, DOI 10.1007/s10664-005-1290-x
   Mark G., 2005, P SIGCHI C HUM FACT, P321, DOI [10.1145/1054972.1055017, DOI 10.1145/1054972.1055017]
   MAYRHAUSER AV, 1997, ICSM 97, P12
   McFarlane DC, 2002, HUM-COMPUT INTERACT, V17, P1, DOI 10.1207/S15327051HCI1701_1
   McKinney F, 1935, J COMP PSYCHOL, V19, P265, DOI 10.1037/h0056005
   MILLER GA, 1994, PSYCHOL REV, V101, P343
   MILNER B, 1991, NEUROPSYCHOLOGIA, V29, P601, DOI 10.1016/0028-3932(91)90013-X
   MONK CA, 2004, P HUM FACT ERG SOC 4
   Monk CA, 2008, J EXP PSYCHOL-APPL, V14, P299, DOI 10.1037/a0014402
   Morris RGM, 2006, EUR J NEUROSCI, V23, P2829, DOI 10.1111/j.1460-9568.2006.04888.x
   Morris RGM, 1997, PHILOS T ROY SOC B, V352, P1489, DOI 10.1098/rstb.1997.0136
   Murphy GC, 2006, IEEE SOFTWARE, V23, P76, DOI 10.1109/MS.2006.105
   O'Brien MP, 2005, PROG COMPREHEN, P125, DOI 10.1109/WPC.2005.24
   OConaill B., 1995, C COMP HUM FACT COMP, P262, DOI [10.1145/223355.223665., DOI 10.1145/223355.223665, 10.1145/223355.223665]
   Offner M., 1911, Mental Fatigue
   Parnin C, 2006, INT C PROGRAM COMPRE, P13, DOI 10.1109/ICPC.2006.14
   Parnin C, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P93
   Pennington N., 1990, The Psychology of Programming, P45
   Ratwani RM, 2008, VIS COGN, V16, P1001, DOI 10.1080/13506280802025791
   Renaud Karen., 2004, P 2004 ANN RES C S A, P115
   Robbes R, 2007, INT C PROGRAM COMPRE, P155
   Safer Izzet, 2007, P 2007 C CTR ADV STU, P229, DOI 10.1145/1321211.1321235
   Salvucci DD, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1819
   Singer J, 2005, PROC IEEE INT CONF S, P325
   SINHA V, 2006, VLHCC 06, P187
   Squire LR, 2004, NEUROBIOL LEARN MEM, V82, P171, DOI 10.1016/j.nlm.2004.06.005
   Storey MA, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P251, DOI 10.1145/1368088.1368123
   Storey Margaret-Anne., 2002, CHI 02, P520
   Trafton JG, 2003, INT J HUM-COMPUT ST, V58, P583, DOI 10.1016/S1071-5819(03)00023-5
   TRAFTON JG, 2005, P HUM FACT ERG SOC 4
   TULVING E, 1973, PSYCHOL REV, V80, P352, DOI 10.1037/h0020071
   Tulving E, 1972, ORG MEMORY, P381, DOI DOI 10.1017/S0140525X00047257
   van Solingen R, 1998, IEEE SOFTWARE, V15, P97, DOI 10.1109/52.714843
   Winograd E., 1988, PRACTICAL ASPECTS ME, V1, P348
   Zeigarnik B, 1927, PSYCHOL FORSCH, V9, P1
   Zijlstra FRH, 1999, J OCCUP ORGAN PSYCH, V72, P163, DOI 10.1348/096317999166581
   Zou LJ, 2006, WORK CONF REVERSE EN, P71
NR 71
TC 51
Z9 57
U1 2
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2011
VL 19
IS 1
SI SI
BP 5
EP 34
DI 10.1007/s11219-010-9104-9
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 709TY
UT WOS:000286465500002
DA 2024-07-18
ER

PT J
AU Kojima, T
   Hasegawa, T
   Misumi, M
   Nakamura, T
AF Kojima, Tsutomu
   Hasegawa, Toru
   Misumi, Munechika
   Nakamura, Tsuyoshi
TI Risk analysis of software process measurements
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 22nd ACM Symposium on Applied Computing
CY MAR 11-15, 2007
CL Seoul, SOUTH KOREA
SP ACM
DE logistic model; risk assessment; software process; statistical analysis;
   Yore; Temodori
ID QUALITY
AB Quantitative process management (QPM) and causal analysis and resolution (CAR) are requirements of capability maturity model (CMM) levels 4 and 5, respectively. They indicate the necessity of process improvement based on objective evidence obtained from statistical analysis of metrics. However, it is difficult to achieve these requirements in practice, and only a few companies have done so successfully. Evidence-based risk-management methods have been proposed for the control of software processes, but are not fully appreciated, compared to clinical practice in medicine. Furthermore, there is no convincing answer as to why these methods are difficult to incorporate in software processes, despite the fact that they are well established in some business enterprises and industries. In this article, we challenge this issue, point out a problem peculiar to software processes, and develop a generally applicable method for identifying the risk of failure for a project in its early stages. The proposed method is based on statistical analyses of process measurements collected continuously throughout a project by a risk assessment and tracking system (RATS). Although this method may be directly applicable to only a limited number of process types, the fundamental idea might be useful for a broader range of applications.
C1 [Nakamura, Tsuyoshi] Nagasaki Univ, Grad Sch Sci & Technol, Dept Biostat, Nagasaki 8528521, Japan.
   [Kojima, Tsutomu; Hasegawa, Toru] Software Res Associates Inc, Div Software Proc Engn, Toshima Ku, Tokyo 1718513, Japan.
   [Misumi, Munechika] N Carolina State Univ, Dept Stat, Raleigh, NC 27695 USA.
C3 Nagasaki University; North Carolina State University
RP Nakamura, T (corresponding author), Nagasaki Univ, Grad Sch Sci & Technol, Dept Biostat, Nagasaki 8528521, Japan.
EM naka@nagasaki-u.ac.jp
RI Nakamura, Tsuyoshi/AAC-8655-2020
OI Misumi, Munechika/0000-0003-2698-4880
CR [Anonymous], J AEROSPACE COMPUTIN
   BARNETT V, 1998, ENCY BIOSTATISTICS, V4, P2920
   Bieman J, 2004, SOFTWARE QUAL J, V12, P7, DOI 10.1023/B:SQJO.0000013408.06186.a6
   *CYT STAT EP RES C, 2006, LOGXACT STAT SOFTW
   De Lacalle LN, 2002, INT J PROD RES, V40, P2789, DOI 10.1080/00207540210140068
   Ellis R. C. T., 2004, Engineering Construction and Architectural Management, V11, P358, DOI 10.1108/09699980410558557
   Hirayama M, 2004, IEICE T INF SYST, VE87D, P2733
   Hosmer D W., 2004, Applied Logistic Regression
   Kang B, 2005, Third ACIS International Conference on Software Engineering Research, Managment and Applications, Proceedings, P160
   Khoshgoftaar TM, 2006, SOFTWARE QUAL J, V14, P85, DOI 10.1007/s11219-006-7597-z
   KHOSHGOFTAAR TM, 1994, SOFTWARE QUAL J, V3, P137, DOI 10.1007/BF00402294
   Kitchenham B, 2004, IEEE T SOFTWARE ENG, V30, P1023, DOI 10.1109/TSE.2004.104
   KOJIMA T, 2005, P SEPG JAP
   Liu F, 2006, SOFTWARE QUAL J, V14, P113, DOI 10.1007/s11219-006-7598-y
   MAYDL W, 2004, P 8 IASTED INT C SOF, P331
   Moore D.S., 1998, Introduction to the Practice of Statistics
   Pfahl D, 2003, EMPIR SOFTW ENG, V8, P367, DOI 10.1023/A:1025320418915
   *SAS I, 2006, JMP STAT SOFTW
   WILLIAMS M, 2005, COMPUTERWORLD   1101
NR 19
TC 3
Z9 6
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2008
VL 16
IS 3
BP 361
EP 376
DI 10.1007/s11219-007-9040-5
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330RE
UT WOS:000257959700005
DA 2024-07-18
ER

PT J
AU Chang, CW
   Wu, CR
   Lin, HL
AF Chang, Che-Wei
   Wu, Cheng-Ru
   Lin, Hung-Lung
TI Integrating fuzzy theory and hierarchy concepts to evaluate software
   quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 2nd Workshop on Advances in Model-based Software Testing
CY NOV 06, 2006
CL Raleigh, NC
DE software quality characteristics; software quality model; evaluating the
   software quality; fuzzy analytic hierarchy process; FMADM
AB This study proposes a software quality evaluation model and its computing algorithm. Existing software quality evaluation models examine multiple characteristics and are characterized by factorial fuzziness. The relevant criteria of this model are derived from the international norm ISO. The main objective of this paper is to propose a novel Analytic Hierarchy Process (AHP) approach for addressing uncertainty and imprecision in service evaluation during pre-negotiation stages, where comparative judgments of decision makers are represented as fuzzy triangular numbers. A new fuzzy prioritization method, which derives crisp priorities from consistent and inconsistent fuzzy comparison matrices, is proposed. The Fuzzy Analytic Hierarchy Process (FAHP)-based decision-making method can provide decision makers or buyers with a valuable guideline for evaluating software quality. Importantly, the proposed model can aids users and developers in assessing software quality, making it highly applicable for academic and commercial purposes.
C1 [Chang, Che-Wei] Yuanpei Univ, Dept Informat & Management, Hsinchu 300, Taiwan.
   [Wu, Cheng-Ru] Yuanpei Univ, Grad Inst Business Management, Hsinchu 300, Taiwan.
   [Lin, Hung-Lung] Natl Cent Univ, Dept Business Adm, Jhongli 320, Taoyuan County, Taiwan.
C3 National Central University
RP Chang, CW (corresponding author), Yuanpei Univ, Dept Informat & Management, 306 Yuanpei St, Hsinchu 300, Taiwan.
EM tjmccw@xuite.net; alexru00@ms41.hinet.net; hsa8936.hsa8936@msa.hinet.net
RI Lin, Hung-Lung/AFW-7024-2022
OI Lin, Hung-Lung/0000-0001-8904-7750; cheng ru, wu/0009-0008-0097-1313
CR [Anonymous], 2014, Software engineering: a practitioner's approach
   BUCKLEY JJ, 1985, FUZZY SET SYST, V17, P233, DOI 10.1016/0165-0114(85)90090-9
   CESAR GP, 2005, SOFTW QUAL J, V13, P195
   Deng HP, 1999, INT J APPROX REASON, V21, P215, DOI 10.1016/S0888-613X(99)00025-0
   DEUTSCH MS, 1998, SOFTWARE QUALITY ENG
   *ISO IEC, 2001, IEOIEC91261
   Issac G, 2006, SOFTWARE QUAL J, V14, P291, DOI 10.1007/s11219-006-0037-2
   Kazman R, 2005, SOFTWARE QUAL J, V13, P329, DOI 10.1007/s11219-005-4250-1
   Khoshgoftaar TM, 2006, SOFTWARE QUAL J, V14, P85, DOI 10.1007/s11219-006-7597-z
   Khoshgoftaar TM, 2006, SOFTWARE QUAL J, V14, P309, DOI 10.1007/s11219-006-0038-1
   KIMA SS, 2005, BUILD ENVIRON, V40, P1103
   LIOU TS, 1992, FUZZY SET SYST, V50, P247, DOI 10.1016/0165-0114(92)90223-Q
   Liu F, 2006, SOFTWARE QUAL J, V14, P113, DOI 10.1007/s11219-006-7598-y
   NGAI EWT, 2003, INFORM MANAGE, V46, P669
   Ossadnik W, 1999, EUR J OPER RES, V118, P578, DOI 10.1016/S0377-2217(98)00321-X
   Rafla T, 2007, SOFTWARE QUAL J, V15, P117, DOI 10.1007/s11219-006-9009-9
   Saaty T.L., 1988, Multi-criteria decision making: The analytical hierarchy process
   Saaty T.L., 1980, ANAL HIERARCHY PROCE
   SAATY TL, 1990, EUR J OPER RES, V48, P9, DOI 10.1016/0377-2217(90)90057-I
   SCHULMEYER GG, 1996, TOTAL QUALITY MANAGE
   Word W. A., 1999, P 37 ANN SE REG C AP
   ZADEH LA, 1965, INFORM CONTROL, V8, P338, DOI 10.1016/S0019-9958(65)90241-X
   Zhu LM, 2005, SOFTWARE QUAL J, V13, P357, DOI 10.1007/s11219-005-4251-0
NR 23
TC 48
Z9 57
U1 1
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2008
VL 16
IS 2
BP 263
EP 276
DI 10.1007/s11219-007-9035-2
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 286MP
UT WOS:000254850300006
DA 2024-07-18
ER

PT J
AU Nelson, HJ
   Monarchi, DE
AF Nelson, H. James
   Monarchi, David E.
TI Ensuring the quality of conceptual representations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE quality; conceptual representation; modeling process
ID MODEL; COMPREHENSION; KNOWLEDGE; TEXT
AB High quality data and process representations are critical to the success of system development efforts. Despite this importance, quantitative methods for evaluating the quality of a representation are virtually nonexistent. This is a major shortcoming. However, there is another approach. Instead of evaluating the quality of the final representation, the representation process itself can be evaluated. This paper views the modeling process as a communication channel. In a good communication channel, sufficient error prevention, error detection, and error correction mechanisms exist to ensure that the output message matches the input message. A good modeling process will also have mechanisms for preventing, detecting, and correcting errors at each step from observation to elicitation to analysis to final representation. This paper describes a theoretically-based set of best practices for ensuring that each step of the process is performed correctly, followed by a proof of concept experiment demonstrating the utility of the method for producing a representation that closely reflects the real world.
C1 So Illinois Univ, Coll Business & Adm, Carbondale, IL 62901 USA.
   Univ Colorado, Syst Div, Leeds Sch Business, Boulder, CO 80309 USA.
C3 Southern Illinois University System; Southern Illinois University;
   University of Colorado System; University of Colorado Boulder
RP Nelson, HJ (corresponding author), So Illinois Univ, Coll Business & Adm, Rehn Hall 206A,Mail Code 4627, Carbondale, IL 62901 USA.
EM nelson.j@cba.siu.edu; monarchi@colorado.edu
CR Adler P.A., 1994, HDB QUALITATIVE RES, P377, DOI DOI 10.1016/J.RBMO.2010.02.012
   Adler PatriciaA., 1987, Membership Roles in Field Research, V6
   [Anonymous], 1990, QUALITATIVE EVALUATI, DOI DOI 10.1002/NUR.4770140111
   [Anonymous], 1995, The Capability Maturity Model: Guidelines for Improving the Software Process
   [Anonymous], ADV QUASI EXPT DESIG
   [Anonymous], CONCEPTUAL MODELLING
   Batini C, 1991, CONCEPTUAL DATABASE
   Bloor M., 1997, CONTEXT METHOD QUALI
   BORGIDA A, 1985, COMPUTER, V18, P82, DOI 10.1109/MC.1985.1662870
   Bunge M., 1979, Ontology II, V4
   BUNGE MA, 1977, ONTOLOGY 1, V3
   Cai DC, 2001, INT J IND ERGONOM, V27, P9, DOI 10.1016/S0169-8141(00)00035-4
   Deming W.E., 1982, QUALITY PRODUCTIVITY
   Deming W. E., 1986, OUT CRISIS
   Douglas J.D., 1976, INVESTIGATIVE SOCIAL
   Dreyfus Hubert., 1990, BEING WORLD COMMENTA
   Ericsson K. A., 1993, PROTOCOL ANAL VERBAL
   Gemino A, 2003, COMMUN ACM, V46, P79, DOI 10.1145/944217.944243
   Glaser B. G., 1967, DISCOV GROUNDED THEO
   Heidegger Martin, 1962, BEING TIME
   Hickey AM, 2004, J MANAGE INFORM SYST, V20, P65, DOI 10.1080/07421222.2004.11045786
   Humphrey W S, 1995, A discipline for software engineering
   JORGENSEN DL, 1989, METHODOLOGY HUMAN ST, V15
   KINTSCH W, 1990, J MEM LANG, V29, P133, DOI 10.1016/0749-596X(90)90069-C
   KINTSCH W, 1988, PSYCHOL REV, V95, P163, DOI 10.1037/0033-295X.95.2.163
   KINTSCH W, 1978, PSYCHOL REV, V85, P363, DOI 10.1037/0033-295X.85.5.363
   Krogstie J, 2006, EUR J INFORM SYST, V15, P91, DOI 10.1057/palgrave.ejis.3000598
   KROGSTIE J, 1995, INT C ADV INF SYST E
   KROGSTIE J, 2004, INTERACTIVE MODELS S
   KROGSTIE J, 2003, INFORMATION SYSTEMS
   Krueger RA, 2009, FOCUS GROUPS PRACTIC, DOI DOI 10.4172/2155-9880.1000373
   Lincoln Y. S., 1985, NATURALISTIC INQUIRY
   LINDLAND OI, 1994, IEEE SOFTWARE, V11, P42, DOI 10.1109/52.268955
   Ling J, 2002, DISPLAYS, V23, P223, DOI 10.1016/S0141-9382(02)00041-0
   Miles M. B., 1984, Qualitative data analysis: An expanded sourcebook
   MILES MB, 1988, DRAWING VALID MEANIN
   MILLS CB, 1987, COMPUT SURV, V19, P329, DOI 10.1145/45075.46162
   MOODY DL, 1998, 17 INT C CONC MOD SI
   Newell A., 1972, HUMAN PROBLEM SOLVIN, V104
   POELS G, 2005, AIS SIGHCI LAS VEG N
   REINGRUBER MC, 1994, DATA MODELLING HDB B
   SAUNDERS M, 1998, RES METHODS BUSINESS
   SHRIVER KA, 1989, IEEE T PROFESSIONAL, V32, P238
   Simon H., 1989, Foundations of cognitive science, P1
   Spradley J. P., 1979, ETHNOGRAPHIC INTERVI
   Strauss A., 1990, BASICS QUALITATIVE R
   Van Dijk T., 1983, STRATEGIES DISCOURSE
   WAND Y, 1995, INFORM SYST J, V5, P203, DOI 10.1111/j.1365-2575.1995.tb00108.x
   WAND Y, 1990, IEEE T SOFTWARE ENG, V16, P1282, DOI 10.1109/32.60316
   Wand Y, 1996, COMMUN ACM, V39, P86, DOI 10.1145/240455.240479
   Wand Y, 2002, INFORM SYST RES, V13, P363, DOI 10.1287/isre.13.4.363.69
   WAND Y, 1988, INT C INF SYST ICIS
   Yin R., 1994, CASE STUDY RES DESIG
NR 53
TC 7
Z9 9
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2007
VL 15
IS 2
BP 213
EP 233
DI 10.1007/s11219-006-9011-2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 149CA
UT WOS:000245123000006
DA 2024-07-18
ER

PT J
AU Storey, MA
AF Storey, Margaret-Anne
TI Theories, tools and research methods in program comprehension:: <i>past,
   present and future</i>
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 13th International Workshop on Program Comprehension
CY MAY 15-16, 2005
CL St Louis, MO
SP IEEE Comp Soc, TC Software Engn
DE program comprehension; cognitive models; software tools; research
   methods; software navigation; software visualization; collaborative
   software engineering
ID MENTAL REPRESENTATIONS; SOFTWARE-DEVELOPMENT; DESIGN; SUPPORT; MODEL
AB Program comprehension research can be characterized by both the theories that provide rich explanations about how programmers understand software, as well as the tools that are used to assist in comprehension tasks. In this paper, I review some of the key cognitive theories of program comprehension that have emerged over the past thirty years. Using these theories as a canvas, I then explore how tools that are commonly used today have evolved to support program comprehension. Specifically, I discuss how the theories and tools are related and reflect on the research methods that were used to construct the theories and evaluate the tools. The reviewed theories and tools are distinguished according to human characteristics, program characteristics, and the context for the various comprehension tasks. Finally, I predict how these characteristics will change in the future and speculate on how a number of important research directions could lead to improvements in program comprehension tool development and research methods.
C1 Univ Victoria, Dept Comp Sci, Victoria, BC V8W 2Y2, Canada.
C3 University of Victoria
RP Storey, MA (corresponding author), Univ Victoria, Dept Comp Sci, Victoria, BC V8W 2Y2, Canada.
EM mstorey@uvic.ca
RI Jolugbo, Olajide/D-3216-2017
OI Jolugbo, Olajide/0000-0001-6512-4117
CR AHO AV, 2000, COMPILERS PRINCIPLES
   [Anonymous], P WORKSH EMP STUD PR
   [Anonymous], P 2004 ACM C COMP SU
   Ball T, 1996, COMPUTER, V29, P33, DOI 10.1109/2.488299
   Balzer B, 2004, PROC INT CONF SOFTW, P748, DOI 10.1109/ICSE.2004.1317517
   Balzer R, 2003, PROC INT CONF SOFTW, P789, DOI 10.1109/ICSE.2003.1201287
   Bellay B, 1998, J SOFTW MAINT-RES PR, V10, P305, DOI 10.1002/(SICI)1096-908X(199809/10)10:5<305::AID-SMR175>3.0.CO;2-7
   Beyer Hugh., 1997, Contextual design: A customer-centered approach to systems designs
   BIGGERSTAFF TJ, 1993, PROC INT CONF SOFTW, P482, DOI 10.1109/ICSE.1993.346017
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   BROOKS R, 1983, INT J MAN MACH STUD, V18, P543, DOI 10.1016/S0020-7373(83)80031-5
   BULL RI, 2005, VISUALIZATION SUPPOR
   Burkhardt JM, 1998, PROG COMPREHEN, P82, DOI 10.1109/WPC.1998.693294
   CHALMERS M, 1998, P 7 INT C WORLD WID
   CLAYTON R, 1998, 5 IEEE WORK C REV EN
   Cordy JR, 2002, INFORM SOFTWARE TECH, V44, P827, DOI 10.1016/S0950-5849(02)00104-0
   Corritore CL, 1999, INT J HUM-COMPUT ST, V50, P61, DOI 10.1006/ijhc.1998.0236
   Creswell J. W., RES DESIGN QUALITATI
   CUBRANIC D, 2006, IN PRESS IEEE T SOFT
   CURTIS B, 1981, P IEEE, V69, P846, DOI 10.1109/PROC.1981.12088
   Curtis B., 1986, EMPIRICAL STUDIES PR, P256
   Davies S. P., 1993, Empirical Studies of Programmers: Fifth Workshop, P42
   Dean TR, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P59, DOI 10.1109/WCRE.2001.957810
   DeLine Robert., 2005, SOFTVIS 05, P183, DOI [10.1145/1056018.1056044, DOI 10.1145/1056018.1056044]
   Detienne Francoise, 2001, Software design cognitive aspects.
   Eisenbarth T, 2003, IEEE T SOFTWARE ENG, V29, P210, DOI 10.1109/TSE.2003.1183929
   Eisenbarth T, 2001, PROC IEEE INT CONF S, P602, DOI 10.1109/ICSM.2001.972777
   Erdos K, 1998, PROG COMPREHEN, P98, DOI 10.1109/WPC.1998.693322
   Exton C, 2002, PROG COMPREHEN, P281, DOI 10.1109/WPC.2002.1021349
   Ferenc R, 2004, PROC IEEE INT CONF S, P60, DOI 10.1109/ICSM.2004.1357790
   Findlater Leah., 2004, P SIGCHI C HUMAN FAC, P89, DOI [DOI 10.1145/985692.985704, 10.1145/985692.985704]
   Francel MA, 1999, PROG COMPREHEN, P106, DOI 10.1109/WPC.1999.777749
   Froehlich J, 2004, PROC INT CONF SOFTW, P387, DOI 10.1109/ICSE.2004.1317461
   GERMAN DM, 2006, J SOFTWARE PROCESS I, V8, P201
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Grudin J., 2001, P CHI 01 C HUMAN FAC, P458
   Hammond T, 2005, D LIB MAGAZINE, V2, P1082
   Hamou-Lhadj Abdelwahab., 2004, CASCON, P42
   HANNEMANN J, 2001, OVEASOC WORKSH ICSE
   Hohmann L, 1996, JOURNEY SOFTWARE PRO
   Holmes R, 2005, PROC INT CONF SOFTW, P117
   HUPFER S, 2004, P ACM C COMP SUPP CO, P444
   Kersten M, 2005, P 2005 INT C ASP OR, P159, DOI DOI 10.1145/1052898.1052912
   Koschke R, 2000, PROG COMPREHEN, P201, DOI 10.1109/WPC.2000.852494
   LAITENBERGER O, 1995, ISERN9501 U KAIS
   LANZA M, 2001, P OOPSLA 2001, P300
   LETOVSKY S, 1986, P 1 WORKSH EMP STUD, P58
   MANDELIN D, 2005, PLDI 05, P48, DOI [10.1145/1065010.1065018, DOI 10.1145/1065010.1065018]
   Marcus A, 2003, PROG COMPREHEN, P105
   Margaret-Anne D.Storey., 2005, SOFTVIS, P193, DOI DOI 10.1145/1056018.1056045
   MATHIAS KS, 1999, P 37 ANN SE REG C AC, P37
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   MUELLER F., 2003, 2003 OOPSLA Workshop on Eclipse Technology Exchange, P65
   MULLER HA, 1988, P 10 INT C SOFTW ENG, P850
   Murphy G.C., 1995, Proceedings of the 3rd ACM SIGSOFT symposium on Foundations of software engineering, P18
   *NATO, 1968, SOFTW ENG C GARM GER
   O'Reilly C., 2005, ACM S SOFTWARE VISUA, P57
   Pacione MJ, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P70, DOI 10.1109/WCRE.2004.7
   PENNINGTON N, 1987, COGNITIVE PSYCHOL, V19, P295, DOI 10.1016/0010-0285(87)90007-7
   PENNY DA, 1992, THESIS U TORONTO
   Petre M, 1998, SOFTWARE VISUALIZATION, P453
   Prechelt L, 2002, IEEE T SOFTWARE ENG, V28, P595, DOI 10.1109/TSE.2002.1010061
   Reiss SP, 2001, ACM SIGPLAN NOTICES, P2
   RICH C, 1990, IEEE SOFTWARE, V7, P82, DOI 10.1109/52.43053
   ROBBINS JE, 1996, P CAL SOFTW S LOS AN
   Robillard MP, 2003, PROC INT CONF SOFTW, P822, DOI 10.1109/ICSE.2003.1201304
   SHNEIDERMAN B, 1979, INT J COMPUT INF SCI, V8, P219, DOI 10.1007/BF00977789
   Sim SE, 2003, PROC INT CONF SOFTW, P74, DOI 10.1109/ICSE.2003.1201189
   Sim SE, 2002, PROG COMPREHEN, P114, DOI 10.1109/WPC.2002.1021331
   Singer J, 2005, PROC IEEE INT CONF S, P325
   Singer Janice., 1997, P 1997 C CTR ADV STU, P209
   SOLOWAY E, 1984, IEEE T SOFTWARE ENG, V10, P595, DOI 10.1109/TSE.1984.5010283
   STOREY MA, 2003, DESIGNING SOFTWARE E
   STOREY MA, 2003, ACM APPL COMPUTI SPR, P18
   STOREY MA, 2003, P 2003 OOPSLA WORKSH, P35
   Storey MAD, 1999, J SYST SOFTWARE, V44, P171, DOI 10.1016/S0164-1212(98)10055-9
   Storey MAD, 2000, SCI COMPUT PROGRAM, V36, P183, DOI 10.1016/S0167-6423(99)00036-2
   Systä T, 2001, SOFTWARE PRACT EXPER, V31, P371, DOI 10.1002/spe.386
   Tilley S. R., 1996, CMUSEI96TR019
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Tonella P, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P112, DOI 10.1109/WCRE.2004.13
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   VANDEURSEN A, 2003, 1 INT WORKSH REFACTO
   VESSEY I, 1985, INT J MAN MACH STUD, V23, P459, DOI 10.1016/S0020-7373(85)80054-7
   VONMAYRHAUSER A, 1993, PROCEEDINGS OF THE SIXTH INTERNATIONAL WORKSHOP ON COMPUTER-AIDED SOFTWARE ENGINEERING - CASE 93, P230, DOI 10.1109/CASE.1993.634824
   Walenstein A, 2003, PROG COMPREHEN, P185
   WEISER M, 1982, COMMUN ACM, V25, P446, DOI 10.1145/358557.358577
   WEXELBLAT A, 1999, P CHI PITTSB PA
   WEXELBLAT A, 1998, LECT NOTES COMPUTER, V1519, P281
   WONG K, 1995, IEEE SOFTWARE, V12, P46, DOI 10.1109/52.363166
   WONG K, 2000, THESIS U VICTORIA
   ZIMMERMANN T, 2004, P INT C SOFTW ENG GL
NR 93
TC 64
Z9 79
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2006
VL 14
IS 3
BP 187
EP 208
DI 10.1007/s11219-006-9216-4
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 067KL
UT WOS:000239300800002
DA 2024-07-18
ER

PT J
AU Arul, K
   Kohli, H
AF Arul, K
   Kohli, H
TI Six Sigma for software application of hypothesis tests to software data
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE ANOVA (Analysis of Variance); categorical analysis; comparative methods;
   correspondence analysis; cost of quality; cost of poor quality; Global
   Software Group (GSG); hypothesis test; JMP - The Statistical Discovery
   Software (TM) (from SAS Institute); PPM - parts per million; Six-Sigma
AB The article discusses statistical analysis on Release data from a mature Global Software Group (GSG) with three business domains with an aim to ascertain if any correlation can be established between the data collected after release and the benefits to the centre from the outcome of the analysis. Thus re-evaluating the process involved in creating and delivering software products to our customers. This article will strive to explain some of the Six Sigma methodologies and tools used in comparing groups ( ANOVA method) and categorical data analysis techniques on software data. The paper will also discuss in detail normal distribution, tests for normality and comparative methods along with Contingency Table Analysis ( Mosaic plots) and Correspondence Analysis. The application of statistics for SOFTWARE process improvement is increasing in the industry; we present how these techniques can be applied in practice.
C1 Motorola Technol Ctr, Global Software Grp, Edinburgh EH54 7EG, Midlothian, Scotland.
   Motorola Inc, Global Software Grp, Deer Pk, IL 60010 USA.
RP Arul, K (corresponding author), Motorola Technol Ctr, Global Software Grp, Alba Campus, Edinburgh EH54 7EG, Midlothian, Scotland.
EM krishna.arul@motorola.com; h.kohli@motorola.com
CR AGRESTI A, 1996, WILEY SERIES PROBABI
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   DOVICH AR, 1992, QUALITY ENG STAT
   *JMP, 2001, STAT DISC SOFTW JUN
   *MU, 2000, MOT U CIC 102 COMP M
   *RATH STRONG, 2002, RATH STRONGS 6 SIGM
NR 6
TC 5
Z9 5
U1 0
U2 3
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2004
VL 12
IS 1
BP 29
EP 42
DI 10.1023/B:SQJO.0000013357.75406.91
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 767DE
UT WOS:000188424300003
DA 2024-07-18
ER

PT J
AU Moses, J
   Farrow, M
AF Moses, J
   Farrow, M
TI A procedure for assessing the influence of problem domain on effort
   estimation consistency
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT International Software Quality Management Conference
CY APR, 2003
CL GLASGOW, SCOTLAND
SP British Comp Soc
DE effort estimates; COCOMO; Hierarchical Bayesian inference;
   hyperparameters; dependence; interactions with random effects; linear
   regression models; model fit and checking; deviance statistic;
   informative and non-informative priors
AB By and large, given the inherent subjectivity in defining and measuring factors used in algorithmic effort estimation methods, when algorithmic methods produce consistent estimates it seems reasonable to assume that this is in part due to estimator experience. Further, software development factors are usually assumed to have different degrees of influence on actual effort. For example, no specific allowances for program language or problem domain were made in the original COCOMO model or in Albrecht's Function Points, whilst allowances for development mode in COCOMO and function type complexity for Albrecht's Function Points are crucial. However, work has been conducted that concluded that 4GLs are associated with higher productivity than 3GLs. Clearly, we can support such conclusions about productivity, since, for example, it usually requires less effort to develop a database using a purposely designed DBMS product than it does using a 3GL. However, in general, for a given problem domain an appropriate development language and platform will be selected. Hence, we might feel that an appropriate development language will not be a factor that influences estimate consistency unduly, given that an estimator has experience of the problem domain. However, algorithmic methods usually require calibration to different problem domains. Calibration may be needed because the method was originally designed using data from another type of domain. Furthermore, estimators' estimation consistency within problem domains may be affected for one or more reasons. Intuitively, reasons might include: estimators lack estimation experience in some domains; or the development team(s) may have different levels of experience in different domains, which the estimator finds difficult to take into account. We demonstrate how, in general, the influence of problem domain may be assessed using a Hierarchical Bayesian inference procedure. We also show how values can be derived to account for variations in estimate consistency in problem domains.
C1 Univ Sunderland, Sch Comp & Technol, Sunderland SR6 0DD, Tyne & Wear, England.
C3 University of Sunderland
RP Univ Sunderland, Sch Comp & Technol, Sunderland SR6 0DD, Tyne & Wear, England.
CR Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Altman D, 1993, PRACTICAL STAT MED R
   ANGELIS L, 2001, IEEE METR 2001 C P L, P4
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1983, MONOGRAPHS STAT APPL
   [Anonymous], 1996, Bugs 0.5: Bayesian inference using Gibbs sampling, manual (version ii)
   Boehm BW., 1981, Software Engineering Economics
   Chulani S, 1999, IEEE T SOFTWARE ENG, V25, P573, DOI 10.1109/32.799958
   Gelman A., 1998, Bayesian data analysis
   Gilks W. R., 1996, MARKOV MONTE CARLO P
   Hughes RT, 1996, INFORM SOFTWARE TECH, V38, P67, DOI 10.1016/0950-5849(95)01045-9
   *INT SOFTW BENCHM, 2003, DAT REP SIT
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   KITCHENHAM BA, 1992, INFORM SOFTWARE TECH, V34, P211, DOI 10.1016/0950-5849(92)90077-3
   Lindley DV, 2000, J ROY STAT SOC D-STA, V49, P293, DOI 10.1111/1467-9884.00238
   MATSON JE, 1994, IEEE T SOFTWARE ENG, V20, P275, DOI 10.1109/32.277575
   MILLER J, 1999, 6 IEEE INT S SOFTW M, P152
   Morris C., 1992, BAYESIAN STAT, V4, P321
   Moses J, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P112, DOI 10.1109/METRIC.2001.915520
   Moses J, 2000, P INT COMP SOFTW APP, V24, P522, DOI 10.1109/CMPSAC.2000.884776
   Moses J, 2000, INFORM SOFTWARE TECH, V42, P533, DOI 10.1016/S0950-5849(00)00097-5
   MOSES J, 2000, EUROSPI 2000 PRACT I
   Myers R.H., 1990, The Duxbury advanced series in statistics and decision sciences, V2nd
   Symons C.R.:., 1991, Software Sizing and Estimating: Mk II FPA
   Walpole R.E., 1993, Probability and Statistics for Engineers and Scientists, V5
   Western B, 1998, AM J POLIT SCI, V42, P1233, DOI 10.2307/2991856
NR 27
TC 6
Z9 7
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD NOV
PY 2003
VL 11
IS 4
BP 283
EP 300
DI 10.1023/A:1025861011126
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 724YV
UT WOS:000185516600003
DA 2024-07-18
ER

PT J
AU Barboni, M
   Morichetta, A
   Polini, A
   Casoni, F
AF Barboni, Morena
   Morichetta, Andrea
   Polini, Andrea
   Casoni, Francesco
TI ReSuMo: a regression strategy and tool for mutation testing of solidity
   smart contracts
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mutation testing; Regression mutation testing; Smart contract testing;
   Ethereum blockchain; Continuous integration
AB Mutation testing is a powerful test adequacy assessment technique that can guarantee the deployment of deeply scrutinized and more reliable Smart Contract code. However, regularly evaluating the test suite during the evolution of a project can be unfeasible due to the high costs of the assessment. This paper presents ReSuMo, the first regression mutation testing approach and tool for Solidity Smart Contracts. ReSuMo uses a static and file-level technique to select a subset of Smart Contracts to mutate, and a subset of test files to re-run during a regression mutation testing campaign. After each mutation testing run, ReSuMo incrementally updates the results using the test outcomes registered on the previous program revision. In this way, it can speed up the mutation testing process for evolving projects, while providing a comprehensive adequacy assessment of the whole test suite.
C1 [Barboni, Morena; Morichetta, Andrea; Polini, Andrea; Casoni, Francesco] Univ Camerino, I-62032 Camerino, Italy.
C3 University of Camerino
RP Barboni, M (corresponding author), Univ Camerino, I-62032 Camerino, Italy.
EM morena.barboni@unicam.it; andrea.morichetta@unicam.it;
   andrea.polini@unicam.it; francesco.casoni@unicam.it
CR Andesta Erfan, 2020, Proceedings of the 10th International Conference on Computer and Knowledge Engineering (ICCKE 2020), P405, DOI 10.1109/ICCKE50421.2020.9303670
   Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   Barboni M, 2022, J SYST SOFTWARE, V193, DOI 10.1016/j.jss.2022.111445
   Barboni M, 2022, COMM COM INF SC, V1621, P61, DOI 10.1007/978-3-031-14179-9_5
   Buterin V., 2014, ETHEREUM NEXT GENERA, V3, P2
   Cachia MA, 2013, ELECTRON NOTES THEOR, V294, P2, DOI 10.1016/j.entcs.2013.02.012
   Chakraborty P, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3240298
   Chapman P, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN (BLOCKCHAIN 2019), P319, DOI 10.1109/Blockchain.2019.00050
   Chen LC, 2018, IEEE INT CONF SOFTW, P58, DOI 10.1109/ICST.2018.00016
   Corradini F, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P1470, DOI 10.1145/3341105.3373988
   Corradini F, 2021, BLOCKCHAIN-RES APPL, V2, DOI 10.1016/j.bcra.2021.100018
   Frankl PG, 1997, J SYST SOFTWARE, V38, P235, DOI 10.1016/S0164-1212(96)00154-9
   Gligoric M, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P713, DOI 10.1109/ICSE.2015.230
   Hartel P, 2020, LECT NOTES COMPUT SC, V12165, P23, DOI 10.1007/978-3-030-50995-8_2
   Honig JJ, 2019, LECT NOTES COMPUT SC, V11737, P289, DOI 10.1007/978-3-030-31500-9_19
   Inozemtseva L, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P435, DOI 10.1145/2568225.2568271
   Legunsen O, 2017, IEEE INT CONF AUTOM, P949, DOI 10.1109/ASE.2017.8115710
   Li ZX, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1198, DOI 10.1109/ASE.2019.00136
   Lingming Zhang, 2011, 2011 IEEE 27th International Conference on Software Maintenance, P23, DOI 10.1109/ICSM.2011.6080769
   Palechor L, 2022, 3RD ACM/IEEE INTERNATIONAL CONFERENCE ON AUTOMATION OF SOFTWARE TEST (AST 2022), P165, DOI 10.1145/3524481.3527228
   Papadakis M, 2019, ADV COMPUT, V112, P275, DOI 10.1016/bs.adcom.2018.03.015
   Papadakis M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P936, DOI 10.1109/ICSE.2015.103
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Sánchez AB, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10177-8
   Shi A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P112, DOI 10.1145/3293882.3330568
   Tengeri D, 2016, IEEE ICST WORKSHOP, P174, DOI 10.1109/ICSTW.2016.25
   Vacca A, 2021, J SYST SOFTWARE, V174, DOI 10.1016/j.jss.2020.110891
   Wei Ma, 2020, 2020 IEEE International Conference on Software Maintenance and Evolution (ICSME), P394, DOI 10.1109/ICSME46990.2020.00045
   Zhang L., 2012, Proceedings of the 2012 International Symposium on Software Testing and Analysis, ISSTA 2012, P331, DOI [10.1145/2338965.2336793, DOI 10.1145/2338965.2336793]
NR 29
TC 2
Z9 2
U1 1
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 225
EP 253
DI 10.1007/s11219-023-09637-1
EA JUN 2023
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:001009372900001
DA 2024-07-18
ER

PT J
AU Aldalur, I
   Arrieta, A
   Agirre, A
   Sagardui, G
   Arratibel, M
AF Aldalur, Inigo
   Arrieta, Aitor
   Agirre, Aitor
   Sagardui, Goiuria
   Arratibel, Maite
TI A microservice-based framework for multi-level testing of cyber-physical
   systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Cyber-Physical Systems; Elevators; Testing
ID AUTOMATIC-GENERATION; DEPENDABILITY; SEARCH; DESIGN
AB In the last years, the use of microservice architectures is spreading in Cyber-Physical Systems (CPSs) and Internet of Things (IoT) domains. CPSs are systems that integrate digital cyber computations with physical processes. The development of software for CPSs demands a constant maintenance to support new requirements, bug fixes, and deal with hardware obsolescence. The key in this process is code testing and more if the code is fragmented during the development of CPSs. It is important to remark that this process is challenging and time-consuming. In this paper, we report on the experience of instantiating of the microservice-based architecture for DevOps of CPSs to test elevator dispatching algorithms across different test levels (i.e., SiL, HiL and Operation). Such an architecture allows for a continuous deployment, monitoring and validation of CPSs. By integrating the approach with a real industrial case study, we demonstrate that our approach reduces significantly the time needed in the testing process and consequently, reduces the economic cost of the entire process.
C1 [Aldalur, Inigo; Arrieta, Aitor; Sagardui, Goiuria] Mondragon Unibertsitatea, Arrasate Mondragon, Spain.
   [Agirre, Aitor] Ikerlan, Arrasate Mondragon, Spain.
   [Arratibel, Maite] Orona, Hernani, Spain.
C3 Mondragon Unibertsitatea
RP Aldalur, I (corresponding author), Mondragon Unibertsitatea, Arrasate Mondragon, Spain.
EM ialdalur@mondragon.edu; aarrieta@mondragon.edu; aagirre@ikerlan.es;
   gsagardui@mondragon.edu; marratibel@orona-group.com
RI Aldalur, Iñigo/AAJ-4386-2021
OI Aldalur, Iñigo/0000-0003-4840-8884
FU Springer Nature; European Union's Horizon 2020 research and innovation
   program [871319]; Department of Education, Universities and Research of
   the Basque Government [IT519-22]; H2020 - Industrial Leadership [871319]
   Funding Source: H2020 - Industrial Leadership
FX Open Access funding provided thanks to the CRUE-CSIC agreement with
   Springer Nature. This publication is part of a project that has received
   funding from the European Union's Horizon 2020 research and innovation
   program under grant agreement no. 871319. Inigo Aldalur, Aitor Arrieta
   and Goiuria Sagar-dui are part of the Software and Systems Engineering
   research group of Mondragon Unibertsitatea (IT519-22), supported by the
   Department of Education, Universities and Research of the Basque
   Government.
CR Armengaud E, 2018, LECT N MOBIL, P151, DOI 10.1007/978-3-319-66972-4_13
   Arrieta A., 2022, 13 S LIFT ESC TECHN, V13, P41
   Arrieta A, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3532182
   Arrieta A, 2019, INFORM SOFTWARE TECH, V114, P137, DOI 10.1016/j.infsof.2019.06.009
   Arrieta A, 2019, J SYST SOFTWARE, V149, P1, DOI 10.1016/j.jss.2018.09.055
   Arrieta A, 2018, IEEE T IND INFORM, V14, P1055, DOI 10.1109/TII.2017.2788019
   Arrieta A, 2017, SOFTWARE QUAL J, V25, P1041, DOI 10.1007/s11219-016-9341-7
   Arrieta A, 2017, IEEE C EVOL COMPUTAT, P688, DOI 10.1109/CEC.2017.7969377
   ASAMRef, AS XIL
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Ayerdi J, 2023, IEEE T RELIAB, V72, P827, DOI 10.1109/TR.2022.3193070
   Ayerdi J, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1264, DOI 10.1145/3468264.3473920
   Ayerdi J, 2020, PROC INT SYMP SOFTW, P104, DOI 10.1109/ISSRE5003.2020.00019
   Ayerdi J, 2020, INT REQUIR ENG CONF, P280, DOI 10.1109/RE48521.2020.00038
   Bataev AV, 2020, 2020 9TH INTERNATIONAL CONFERENCE ON INDUSTRIAL TECHNOLOGY AND MANAGEMENT (ICITM 2020), P265, DOI [10.1109/icitm48982.2020.9080378, 10.1109/ICITM48982.2020.9080378]
   Birchler C., 2022, ARXIV
   Briand L, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P789, DOI 10.1145/2889160.2889212
   Bruyninckx H, 2008, IEEE ROBOT AUTOM MAG, V15, P9, DOI 10.1109/M-RA.2008.915411
   Gartziandia A, 2021, 36TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, SAC 2021, P135, DOI 10.1145/3412841.3441894
   Gartziandia A, 2021, PROC IEEE ACM INT C, P147, DOI 10.1109/ICSE-Companion52605.2021.00062
   Goknil A., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P385
   González-Nalda P, 2017, INT J INTERACT DES M, V11, P949, DOI 10.1007/s12008-016-0313-8
   He ZJ, 2019, PROC INT CONF SOFTW, P116, DOI 10.1109/ICSE.2019.00029
   Hu TT, 2020, COMPUT STAND INTER, V70, DOI 10.1016/j.csi.2020.103424
   Humeniuk D, 2022, INFORM SOFTWARE TECH, V149, DOI 10.1016/j.infsof.2022.106936
   Khatiri S., 2023, 16 IEEE INT C SOFTW
   Lampke S, 2015, SAE INT J PASSENG CA, V8, P106, DOI 10.4271/2015-01-0168
   Lee EA, 2017, INTRODUCTION TO EMBEDDED SYSTEMS: A CYBER-PHYSICAL SYSTEMS APPROACH, 2ND EDITION, P1
   Masin M, 2017, DES AUT TEST EUROPE, P740, DOI 10.23919/DATE.2017.7927088
   Matinnejad R, 2019, IEEE T SOFTWARE ENG, V45, P919, DOI 10.1109/TSE.2018.2811489
   Menghi C, 2020, PROC INT CONF SOFTW, P372, DOI 10.1145/3377811.3380370
   Menghi C, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P27, DOI 10.1145/3338906.3338920
   Miele A, 2014, MICROPROCESS MICROSY, V38, P567, DOI 10.1016/j.micpro.2014.05.008
   Neema H, 2019, PROCEEDINGS OF THE WORKSHOP ON DESIGN AUTOMATION FOR CPS AND IOT (DESTION '19), P10, DOI 10.1145/3313151.3313169
   Nejati S, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1015, DOI 10.1145/3338906.3340444
   Pérez AM, 2009, 2009 TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE-PRACTICE AND RESEARCH TECHNIQUES, TAIC PART 2009, P184, DOI 10.1109/TAICPART.2009.22
   Sadri-Moshkenani Z, 2022, SOFTW TEST VERIF REL, V32, DOI 10.1002/stvr.1794
   Sanislav T, 2016, MICROPROCESS MICROSY, V41, P67, DOI 10.1016/j.micpro.2015.11.021
   Shin SY, 2021, J SYST SOFTWARE, V171, DOI 10.1016/j.jss.2020.110813
   Shin SY, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P49, DOI 10.1145/3213846.3213852
   SIIKONEN ML, 1993, SIMULATION, V61, P257, DOI 10.1177/003754979306100409
   Stankovic John A., 2017, ACM Transactions on Cyber-Physical Systems, V1, DOI 10.1145/2899006
   Sundharam SM, 2018, SENSORS-BASEL, V18, DOI 10.3390/s18020628
   UMLTestingProfile, 2018, UML TESTING PROFILE
   Veledar O, 2019, COMM COM INF SC, V1060, P415, DOI 10.1007/978-3-030-28005-5_32
   Zander-Nowicka J, 2006, IEEE AUTOTESTCON, P770
NR 46
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 193
EP 223
DI 10.1007/s11219-023-09639-z
EA MAY 2023
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:000999280800001
OA hybrid
DA 2024-07-18
ER

PT J
AU Yang, FY
   Fan, YJ
   Xiao, P
   Du, Q
AF Yang, Feng-yu
   Fan, Yong-jian
   Xiao, Peng
   Du, Qing
TI Test data generation method based on multiple convergence direction
   adaptive PSO
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test data generation; Critical path; Multiple convergence direction
   adaptive particle swarm optimization; Fine-grained fitness function
ID ANT COLONY OPTIMIZATION; EVOLUTION
AB Automated test data generation is a traditional technique for reducing the cost and time of software testing. Various metaheuristic techniques have been successfully applied for this task. In contrast to the typical metaheuristic algorithms applied for branch and path coverage, this study focused on low resource consumption and efficient information coverage for critical path coverage. First, we combined the characteristics of branch coverage and path coverage to determine a critical path based on quantified path scores. As a result, we constructed a fine-grained fitness function based on the uniform scale branch distance. Second, we proposed an adaptive particle swarm optimization (MCD-APSO) algorithm with multiple convergence directions to accelerate convergence and escape from local optima. The proposed MCD-APSO algorithm improved the global search ability by enriching the diversity of the particle swarm and enhancing the current evolutionary information use of the particles. Finally, to validate the performance of the MCD-APSO algorithm, we compared the proposed algorithm with six test-data generation algorithms on six normal-scale and six large-scale benchmark programs. The results showed that the MCD-APSO algorithm outperforms the benchmark programs regarding the mean number of iterations, total running time, and coverage failure probability.
C1 [Yang, Feng-yu] Nanjing Univ Aeronaut & Astronaut, Coll Aerosp Engn, Nanjing 210016, Jiangsu, Peoples R China.
   [Yang, Feng-yu; Fan, Yong-jian; Xiao, Peng; Du, Qing] Nanchang Hangkong Univ, Sch Software, Nanchang 330063, Jiangxi, Peoples R China.
C3 Nanjing University of Aeronautics & Astronautics; Nanchang Hangkong
   University
RP Fan, YJ (corresponding author), Nanchang Hangkong Univ, Sch Software, Nanchang 330063, Jiangxi, Peoples R China.
EM 2394145793@qq.com
RI qi, li/JFE-7167-2023; Yu, ZH/KBC-6889-2024; Zhang, Yanyan/JFA-9161-2023;
   Yang, Jing/JFK-4046-2023; Xiao, Peng/KBA-6524-2024; Yang,
   Mei/JNS-2225-2023; Zhang, Han/JMR-0670-2023; liu, lin/JFK-3401-2023; li,
   yurong/JMQ-8540-2023; Wang, Han/JJF-2614-2023
OI Yang, Jing/0009-0004-8274-9863; 
FU National Natural Science Foundation of China [61867004]
FX This work was supported by the National Natural Science Foundation of
   China under Grant No. 61867004.
CR Aghdam ZK, 2017, INT J SOFTW ENG KNOW, V27, P951, DOI 10.1142/S0218194017500358
   Ahmed MA, 2008, COMPUT OPER RES, V35, P3107, DOI 10.1016/j.cor.2007.01.012
   [Anonymous], 2012, ACM SIGSOFT SOFTWARE, DOI DOI 10.1145/2347696.2347707
   [Anonymous], 1990, Software testing techniques {
   Bidgoli AM, 2020, J SYST SOFTWARE, V161, DOI 10.1016/j.jss.2019.110495
   Dai XH, 2021, COMPUT IND ENG, V156, DOI 10.1016/j.cie.2021.107290
   DALAL S, 2018, INDIAN J SCI TECHNOL, V8
   Ghaemi A, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2228
   Ghiduk AS, 2007, 14TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P41, DOI 10.1109/ASPEC.2007.73
   Grano G, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2158
   Huang H, 2018, IEEE T IND INFORM, V14, P5005, DOI 10.1109/TII.2018.2856881
   Huang H, 2017, IEEE COMPUT INTELL M, V12, P46, DOI 10.1109/MCI.2017.2670462
   Kumar Sumit, 2017, International Journal of Advanced Intelligence Paradigms, V9, P278
   Lakshminarayana P, 2021, J INTELL SYST, V30, P59, DOI 10.1515/jisys-2019-0051
   Lv XW, 2018, IET SOFTW, V12, P306, DOI 10.1049/iet-sen.2017.0260
   McMinn P., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P153, DOI 10.1109/ICSTW.2011.100
   Palak P., 2019, INT J ELECTR COMPUT, V9, P4898, DOI DOI 10.11591/IJECE.V9I6.PP49898-4903
   Sahoo Rajesh Ku, 2017, International Journal of Information Technology and Computer Science, V9, P77, DOI 10.5815/ijitcs.2017.10.08
   Sahoo Rajesh Ku, 2017, International Journal of Intelligent Systems and Applications, V9, P43, DOI 10.5815/ijisa.2017.06.05
   Sahoo RR, 2020, J KING SAUD UNIV-COM, V32, P479, DOI 10.1016/j.jksuci.2019.09.010
   Sahoo RR, 2018, J INF TECHNOL RES, V11, P158, DOI 10.4018/JITR.2018010110
   Salahirad A, 2019, SOFTW TEST VERIF REL, V29, DOI 10.1002/stvr.1701
   Sharifipour H, 2018, SWARM EVOL COMPUT, V40, P76, DOI 10.1016/j.swevo.2017.12.009
   [史娇娇 Shi Jiaojiao], 2013, [电子学报, Acta Electronica Sinica], V41, P1555
   Tao Xin-Min, 2012, Journal of Software, V23, P1805, DOI 10.3724/SP.J.1001.2012.04128
   Varshney Sapna, 2013, Software Engineering Notes, V38, P146, DOI 10.1145/2492248.2492277
   Xiao-mei Zhu, 2010, Proceedings 2010 International Conference on Computational and Information Sciences (ICCIS 2010), P1300, DOI 10.1109/ICCIS.2010.321
NR 27
TC 2
Z9 2
U1 3
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2023
VL 31
IS 1
BP 279
EP 303
DI 10.1007/s11219-022-09605-1
EA NOV 2022
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9N8JZ
UT WOS:000884929200001
DA 2024-07-18
ER

PT J
AU de Lima, BS
   Garcia, RE
   Eler, DM
AF de Lima, Bruno Santos
   Garcia, Rogerio Eduardo
   Eler, Danilo Medeiros
TI Toward prioritization of self-admitted technical debt: an approach to
   support decision to payment
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Self-Admitted Technical Debt; Technical Debt Prioritization; Technical
   Debt Managing; Software Maintenance; Software quality
ID MANAGEMENT
AB Technical Debt (TD) is a metaphor that describes the cost-benefit relationship between postponing technical development activities and the consequences of this long-term postponement. The lack of TD Management compromises the Software's internal quality. It makes its maintenance complex and costly. TD instances are called Self-Admitted Technical Debt (SATD) when intentionally committed and documented through comments in the source code. Several studies explore the identification of SATD, but approaches to support the payment stage are lacking, particularly approaches to indicate which SATD priority for payment. This paper presents an approach to support the prioritization activity in SATD payment. The Prioritization Approach focuses on creating associations between SATD associations and problems found in the source code, identified by Automatic Static Analysis. The results demonstrate that using the issues found on source code and SATD description (found in comments) has greater precision to establish the priority among the SATD compared to the SATD description on comments. We applied the approach proposed to different software projects, and the results support developers' prioritization.
C1 [de Lima, Bruno Santos; Garcia, Rogerio Eduardo; Eler, Danilo Medeiros] Sao Paulo State Univ UNESP, Fac Sci & Technol, Dept Math & Comp Sci, Presidente Prudente, SP, Brazil.
C3 Universidade Estadual Paulista
RP de Lima, BS (corresponding author), Sao Paulo State Univ UNESP, Fac Sci & Technol, Dept Math & Comp Sci, Presidente Prudente, SP, Brazil.
EM bruno.s.lima@unesp.br; rogerio.garcia@unesp.br; danilo.eler@unesp.br
RI Garcia, Rogerio Eduardo/ABA-6490-2020
OI Garcia, Rogerio Eduardo/0000-0003-1248-528X; Lima, Bruno Santos
   de/0000-0003-0634-3218
FU Coordination of Superior Level Staff Improvement (CAPES)
FX We are grateful to the Coordination of Superior Level Staff Improvement
   (CAPES) for financial support to develop this work. We are also grateful
   to SAo Paulo State University (UNESP), Faculty of Science and Technology
   and Laboratory of Software Engineering Research and Applications
   (LaPESA) for the infrastructure provided.
CR Alves NSR, 2016, INFORM SOFTWARE TECH, V70, P100, DOI 10.1016/j.infsof.2015.10.008
   Bavota G, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P315, DOI [10.1109/MSR.2016.040, 10.1145/2901739.2901742]
   Brown Nanette, 2010, P FSE SDP WORKSH FUT, P47
   Cunningham W., 1993, OOPS MESSENGER, V4, P29, DOI DOI 10.1145/157710.157715
   de Jesus JS, 2017, CONF BUS INFORM, V1, P444, DOI 10.1109/CBI.2017.62
   deFreitasFarias M. A., 2020, INFORM SOFTWARE TECH, V121
   Digkas G, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P153, DOI 10.1109/SANER.2018.8330205
   Digkas G, 2017, LECT NOTES COMPUT SC, V10475, P51, DOI 10.1007/978-3-319-65831-5_4
   Griffith I, 2014, WINT SIMUL C PROC, P1014, DOI 10.1109/WSC.2014.7019961
   Guo Y., 2011 27 IEEE INT C S, P528, DOI 10.1109/ICSM.2011.6080824
   Guo YP, 2016, EMPIR SOFTW ENG, V21, P159, DOI 10.1007/s10664-014-9351-7
   Huang Q, 2018, EMPIR SOFTW ENG, V23, P418, DOI 10.1007/s10664-017-9522-4
   Izurieta Clemente, 2012, Proceedings 2012 Third International Workshop on Managing Technical Debt (MTD 2012), P23, DOI 10.1109/MTD.2012.6225995
   Kamei E.d.S., 2016, QUASOQ TDA APSEC, P68
   Kruchten Philippe, 2013, ACM SIGSOFT Software Engineering Notes, V38, P51
   Li ZY, 2015, J SYST SOFTWARE, V101, P193, DOI 10.1016/j.jss.2014.12.027
   Lim E, 2012, IEEE SOFTWARE, V29, P22, DOI 10.1109/MS.2012.130
   Liu ZX, 2018, PROC IEEE ACM INT C, P9, DOI 10.1145/3183440.3183478
   Maldonado ED, 2017, PROC IEEE INT CONF S, P238, DOI 10.1109/ICSME.2017.8
   Maldonado ED, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P9, DOI 10.1109/MTD.2015.7332619
   Maldonado ED, 2017, IEEE T SOFTWARE ENG, V43, P1044, DOI 10.1109/TSE.2017.2654244
   Martini A, 2018, SCI COMPUT PROGRAM, V163, P42, DOI 10.1016/j.scico.2018.03.007
   Mensah S, 2018, J SYST SOFTWARE, V135, P37, DOI 10.1016/j.jss.2017.09.026
   Mensah Solomon, 2016, PROC CEUR WORKSHOP P, V1771, P72
   Nugroho A, 2011, P 2 WORKSH MAN TECHN, P1
   Potdar A, 2014, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2014.31
   Rios N, 2018, INFORM SOFTWARE TECH, V102, P117, DOI 10.1016/j.infsof.2018.05.010
   Seaman C., 2012, Proceedings 2012 Third International Workshop on Managing Technical Debt (MTD 2012), P45, DOI 10.1109/MTD.2012.6225999
   Seaman C, 2011, ADV COMPUT, V82, P25, DOI 10.1016/B978-0-12-385512-1.00002-5
   Sierra G, 2019, J SYST SOFTWARE, V152, P70, DOI 10.1016/j.jss.2019.02.056
   SonarSource S.A., 2016, SONARQUBE DOCUMENTAT
   Wehaibi S, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P179, DOI 10.1109/SANER.2016.72
   Zampetti F, 2018, IEEE WORK CONF MIN S, P526, DOI 10.1145/3196398.3196423
   Zampetti F, 2017, PROC IEEE INT CONF S, P216, DOI 10.1109/ICSME.2017.44
NR 34
TC 2
Z9 2
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2022
VL 30
IS 3
BP 729
EP 755
DI 10.1007/s11219-021-09578-7
EA JAN 2022
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W2CB
UT WOS:000744944300001
DA 2024-07-18
ER

PT J
AU Markiegi, U
   Arrieta, A
   Etxeberria, L
   Sagardui, G
AF Markiegi, Urtzi
   Arrieta, Aitor
   Etxeberria, Leire
   Sagardui, Goiuria
TI Dynamic test prioritization of product lines: An application on
   configurable simulation models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test prioritization; Software product lines; Simulation-based testing;
   Cyber-Physical systems
ID SYSTEMS; SEARCH; GENERATION; SELECTION
AB Product line testing is challenging due to the potentially huge number of configurations. Several approaches have tackled this challenge; most of them focused on reducing the number of tested products by selecting a representative subset. However, little attention has been paid to product line test optimization using test results, while tests are executed. This paper aims at optimizing the testing process of product lines by increasing the fault detection rate. To this end we propose a dynamic test prioritization approach. In contrast to traditional static test prioritization, our dynamic test prioritization leverages information of tests being executed in specific products. Processing this information, the initially prioritized tests are rearranged in order to find non-discovered faults. The proposed approach is valid for any kind of product lines, but we have adapted it to the context of configurable simulation models, an area where testing is especially time-consuming and optimization methods are paramount. The approach was empirically evaluated by employing two case studies. The results of this evaluation reveal that the proposed test prioritization approach improves both the static prioritization algorithm and the selected baseline technique. The results provide a basis for suggesting that the proposed dynamic test prioritization approach is appropriate to optimize the testing process of product lines.
C1 [Markiegi, Urtzi; Arrieta, Aitor; Etxeberria, Leire; Sagardui, Goiuria] Mondragon Unibertsitatea, Arrasate Mondragon, Spain.
C3 Mondragon Unibertsitatea
RP Markiegi, U (corresponding author), Mondragon Unibertsitatea, Arrasate Mondragon, Spain.
EM umarkiegi@mondragon.edu; aarrieta@mondragon.edu;
   letxeberria@mondragon.edu; gsagardui@mondragon.edu
RI Etxeberria, Leire/R-6402-2017
OI Etxeberria, Leire/0000-0002-4846-2007; Sagardui,
   Goiuria/0000-0003-1002-456X; Arrieta, Aitor/0000-0001-7507-5080
FU Basque Government through the Elkartek program under the DIGITAL project
   [KK/2019-00095]; Department of Education, Universities and Research of
   the Basque Government [IT1326-19]
FX This work has been partially supported by the Basque Government through
   the Elkartek program under the DIGITAL project (Grant agreement
   no.KK/2019-00095). The authors are part of the Software and Systems
   Engineering research group of Mondragon Unibertsitatea (IT1326-19),
   supported by the Department of Education, Universities and Research of
   the Basque Government.
CR Acher M, 2017, ACM T COMPUT EDUC, V18, DOI 10.1145/3088440
   Al-Hajjaji Mustafa, 2019, Software & Systems Modeling, V18, P499, DOI 10.1007/s10270-016-0569-2
   Al-Hajjaji M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P197, DOI 10.1145/2648511.2648532
   [Anonymous], 2016, ENCY MACHINE LEARNIN
   [Anonymous], 2012, How Google Tests Software
   [Anonymous], 2015, SOFTW SYST MODEL
   [Anonymous], 2016, FEATURE ORIENTED SOF, DOI DOI 10.1007/978-3-642-37521-7
   Arcuri A, 2010, LECT NOTES COMPUT SC, V6435, P95, DOI 10.1007/978-3-642-16573-3_8
   Arrieta A., 2016, P 20 INT SYST SOFTW, P297, DOI 10.1145/2934466.2946046
   Arrieta A, 2019, INFORM SOFTWARE TECH, V114, P137, DOI 10.1016/j.infsof.2019.06.009
   Arrieta A, 2018, GECCO'18: PROCEEDINGS OF THE 2018 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1411, DOI 10.1145/3205455.3205490
   Arrieta A, 2019, J SYST SOFTWARE, V149, P1, DOI 10.1016/j.jss.2018.09.055
   Arrieta A, 2016, GECCO'16: PROCEEDINGS OF THE 2016 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1053, DOI 10.1145/2908812.2908871
   Asadollah SA, 2015, LECT NOTES COMPUT SC, V9447, P194, DOI 10.1007/978-3-319-25945-1_12
   Baller H, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P303, DOI 10.1109/ICST.2014.43
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Ben Abdessalem R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1016, DOI 10.1145/3180155.3180160
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Berger T, 2013, IEEE T SOFTWARE ENG, V39, P1611, DOI 10.1109/TSE.2013.34
   Berger Thorsten, 2013, 7 INT WORKSH VAR MOD, DOI DOI 10.1145/2430502.2430513
   Bin Noor T, 2015, 2015 IEEE 1ST INTERNATIONAL WORKSHOP ON SOFTWARE ANALYTICS (SWAN), P13, DOI 10.1109/SWAN.2015.7070482
   Bin Noor T, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P58, DOI 10.1109/ISSRE.2015.7381799
   Briand L, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P789, DOI 10.1145/2889160.2889212
   Busjaeger B, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P975, DOI 10.1145/2950290.2983954
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   Chowdhury SA, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P981, DOI 10.1145/3180155.3180231
   Cohen MB, 2008, IEEE T SOFTWARE ENG, V34, P633, DOI 10.1109/TSE.2008.50
   Neto PADS, 2011, INFORM SOFTWARE TECH, V53, P407, DOI 10.1016/j.infsof.2010.12.003
   Devroey X, 2014, 8 INT WORKSH VAR MOD, p10:1, DOI [10.1145/2556624.2556635, DOI 10.1145/2556624.2556635]
   Di Nardo D, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P302, DOI 10.1109/ICST.2013.27
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Elbaum S, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P235, DOI 10.1145/2635868.2635910
   Engstrom E., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P367, DOI 10.1109/ICST.2011.27
   Engström E, 2011, INFORM SOFTWARE TECH, V53, P2, DOI 10.1016/j.infsof.2010.05.011
   Ensan A., 2011, Proceedings of the 2011 Eighth International Conference on Information Technology: New Generations (ITNG), P291, DOI 10.1109/ITNG.2011.58
   Epitropakis M. G., 2015, P INT S SOFTW TEST A, P234, DOI [DOI 10.1145/2771783.2771788, 10.1145/2771783.2771788]
   Fang CR, 2014, SOFTWARE QUAL J, V22, P335, DOI 10.1007/s11219-013-9224-0
   Feldt R, 2016, IEEE INT CONF SOFTW, P223, DOI 10.1109/ICST.2016.33
   Fujikata J, 2015, IEEE INT CONF GROUP, P13, DOI 10.1109/Group4.2015.7305930
   Hajri I, 2020, EMPIR SOFTW ENG, V25, P3711, DOI 10.1007/s10664-020-09853-4
   Hao D, 2016, IEEE T SOFTWARE ENG, V42, P490, DOI 10.1109/TSE.2015.2496939
   Hemmati H, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430536.2430540
   Henard C, 2016, PROC INT CONF SOFTW, P523, DOI 10.1145/2884781.2884791
   Henard C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P517, DOI 10.1109/ICSE.2015.69
   Henard C, 2014, IEEE T SOFTWARE ENG, V40, P650, DOI 10.1109/TSE.2014.2327020
   Heradio R, 2016, INFORM SOFTWARE TECH, V72, P1, DOI 10.1016/j.infsof.2015.11.004
   Huang YC, 2012, J SYST SOFTWARE, V85, P626, DOI 10.1016/j.jss.2011.09.063
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Jiang B, 2015, J SYST SOFTWARE, V105, P91, DOI 10.1016/j.jss.2015.03.066
   Johansen Martin Fagereng, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P269, DOI 10.1007/978-3-642-33666-9_18
   Johansen M. F., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P266, DOI 10.1109/ICSTW.2011.53
   Jones JA, 2003, IEEE T SOFTWARE ENG, V29, P195, DOI 10.1109/TSE.2003.1183927
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Kang K. C., 1990, Technical Report
   Khalilian A, 2012, SCI COMPUT PROGRAM, V78, P93, DOI 10.1016/j.scico.2012.01.006
   Khatibsyarbini M, 2018, INFORM SOFTWARE TECH, V93, P74, DOI 10.1016/j.infsof.2017.08.014
   Kim JM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P119, DOI 10.1109/ICSE.2002.1007961
   Korel B, 2005, PROC IEEE INT CONF S, P559
   Korel B, 2008, PROC IEEE INT CONF S, P247, DOI 10.1109/ICSM.2008.4658073
   Kuhn R, 2009, COMPUTER, V42, P94, DOI 10.1109/MC.2009.253
   Lachmann R., 2015, P 19 INT C SOFTW PRO, P81
   Lackner H., 2014, P 18 INT SOFTWARE PR, P62
   Hanh LTM, 2016, J SYST SOFTWARE, V120, P17, DOI 10.1016/j.jss.2016.07.001
   Le Thi My Hanh, 2014, International Journal of Computer and Information Technology, V3, P763
   Le Thi My Hanh, 2012, 2012 Fourth International Conference on Knowledge and Systems Engineering (KSE), P54, DOI 10.1109/KSE.2012.22
   Ledru Y, 2012, AUTOMAT SOFTW ENG, V19, P65, DOI 10.1007/s10515-011-0093-0
   Lee J, 2020, INFORM SOFTWARE TECH, V122, DOI 10.1016/j.infsof.2020.106272
   Lee Jihyun, 2012, P 16 INT SOFTW PROD, P31
   Lin CT, 2013, IEEE INT C ENG COMP, P171, DOI 10.1109/ICECCS.2013.33
   Liu B, 2019, EMPIR SOFTW ENG, V24, P444, DOI 10.1007/s10664-018-9611-z
   Liu B, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P359, DOI 10.1109/SANER.2017.7884636
   Liu B, 2016, SOFTW TEST VERIF REL, V26, P431, DOI 10.1002/stvr.1605
   Lopez-Herrejon R. E., 2015, 8 IEEE INT C SOFTW T, P1, DOI DOI 10.1109/ICSTW.2015.7107435
   Lopez-Herrejon RE, 2015, INFORM SOFTWARE TECH, V61, P33, DOI 10.1016/j.infsof.2015.01.008
   Luo Q, 2019, IEEE T SOFTWARE ENG, V45, P1054, DOI 10.1109/TSE.2018.2822270
   Luo Q, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P559, DOI 10.1145/2950290.2950344
   Machado ID, 2014, INFORM SOFTWARE TECH, V56, P1183, DOI 10.1016/j.infsof.2014.04.002
   Marijan D, 2013, PROC IEEE INT CONF S, P540, DOI 10.1109/ICSM.2013.91
   MARKIEGI U, 2019, P 23 INT SYST SOFTW, VB
   Markiegi U, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P2362, DOI 10.1145/3297280.3297512
   Markiegi U, 2017, 21ST INTERNATIONAL SYSTEMS & SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2017), VOL 1, P123, DOI 10.1145/3106195.3106210
   Matinnejad, 2015, SIMULINK FAULT PATTE
   Matinnejad R, 2019, IEEE T SOFTWARE ENG, V45, P919, DOI 10.1109/TSE.2018.2811489
   Matinnejad R, 2016, PROC INT CONF SOFTW, P595, DOI 10.1145/2884781.2884797
   Matinnejad R, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P84, DOI 10.1145/2786805.2786818
   Miranda B, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P222, DOI 10.1145/3180155.3180210
   Nilsson R, 2006, ELECTRON NOTES THEOR, V164, P97, DOI 10.1016/j.entcs.2006.10.010
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Papadakis M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P936, DOI 10.1109/ICSE.2015.103
   Parache Y.I., 2019, APPROXIMATION REFINE
   Parejo JA, 2016, J SYST SOFTWARE, V122, P287, DOI 10.1016/j.jss.2016.09.045
   Lamancha BP, 2009, ICSOFT 2009: PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL 1, P23
   Perrouin Gilles, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P459, DOI 10.1109/ICST.2010.43
   Perrouin G, 2012, SOFTWARE QUAL J, V20, P605, DOI 10.1007/s11219-011-9160-9
   Petrovic G, 2021, PROC INT CONF SOFTW, P910, DOI 10.1109/ICSE43902.2021.00087
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Polzer A, 2012, INNOV SYST SOFTW ENG, V8, P35, DOI 10.1007/s11334-011-0174-z
   Pradhan D, 2019, J SYST SOFTWARE, V153, P86, DOI 10.1016/j.jss.2019.03.064
   Pradhan D, 2018, IEEE INT CONF SOFTW, P46, DOI 10.1109/ICST.2018.00015
   Rogstad E, 2013, INFORM SOFTWARE TECH, V55, P1781, DOI 10.1016/j.infsof.2013.04.004
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Rothermel G., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P179, DOI 10.1109/ICSM.1999.792604
   Sagardui G, 2017, IEEE INT SYMP SOFTW, P16, DOI 10.1109/ISSREW.2017.9
   Sahak Muhammad., 2017, Journal of Telecommunication, Electronic and Computer Engineering (JTEC), V9, P177
   Sánchez AB, 2017, SOFTW SYST MODEL, V16, P173, DOI 10.1007/s10270-015-0459-z
   Sánchez AB, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P41, DOI 10.1109/ICST.2014.15
   Sankaranarayanan Sriram, 2012, Computational Methods in Systems Biology. Proceedings of the 10th International Conference, CMSB 2012, P322, DOI 10.1007/978-3-642-33636-2_19
   Shin SY, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P49, DOI 10.1145/3213846.3213852
   Shokry H, 2009, COMPUTER, V42, P53, DOI 10.1109/MC.2009.125
   Spieker H, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P12, DOI 10.1145/3092703.3092709
   Srikanth H, 2016, J SYST SOFTWARE, V119, P122, DOI 10.1016/j.jss.2016.06.017
   Thomas SW, 2014, EMPIR SOFTW ENG, V19, P182, DOI 10.1007/s10664-012-9219-7
   van der Linden F. J., 2007, Software Product Lines in Action: the Best Industrial Practice in Product Line Engineering
   Voelter M, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P233, DOI 10.1109/SPLINE.2007.23
   Walcott K.R., 2006, P INT S SOFTW TEST A, P1, DOI DOI 10.1145/1146238.1146240
   Wang S, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P32, DOI 10.1145/2648511.2648515
   Wang S, 2015, J SYST SOFTWARE, V103, P370, DOI 10.1016/j.jss.2014.08.024
   Wang S, 2013, LECT NOTES COMPUT SC, V8107, P237, DOI 10.1007/978-3-642-41533-3_15
   Wang SA, 2013, GECCO'13: PROCEEDINGS OF THE 2013 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1493
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Zave P., 1999, FAQ SHEET FEATURE IN
   Zhang LM, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P192, DOI 10.1109/ICSE.2013.6606565
NR 122
TC 2
Z9 3
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2021
VL 29
IS 4
BP 943
EP 988
DI 10.1007/s11219-021-09571-0
EA OCT 2021
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XE8XW
UT WOS:000709293300001
DA 2024-07-18
ER

PT J
AU Chehida, S
   Baouya, A
   Bensalem, S
   Bozga, M
AF Chehida, Salim
   Baouya, Abdelhakim
   Bensalem, Saddek
   Bozga, Marius
TI Learning and analysis of sensors behavior in IoT systems using
   statistical model checking
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE IoT; Sensor Behavior; Stochastic Automata; Statistical Model Checking;
   LTL; BIP
AB Analyzing the behavior of sensors is becoming one of the key challenges due to their increasing use for decision making in IoT systems. The paper proposes an approach for a formal specification and analysis of such behavior starting from existing sensor traces. A model that embodies the sensor measurements over time in the form of stochastic automata is built, then temporal properties are fed to Statistical Model Checker to simulate the learned model and to perform analysis. LTL properties are employed to predict sensors' readings in time and to check the conformity of sensed data with the sensor traces in order to detect any abnormal behavior. We also use LTL properties to analyze the collective behavior of a set of sensors and build a formal model that checks the conformity of a combination of sensors' readings in time.
C1 [Chehida, Salim; Baouya, Abdelhakim; Bensalem, Saddek; Bozga, Marius] Univ Grenoble Alpes, VERIMAG, CNRS, F-38000 Grenoble, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS)
RP Chehida, S (corresponding author), Univ Grenoble Alpes, VERIMAG, CNRS, F-38000 Grenoble, France.
EM Salim.Chehida@univ-grenoble-alpes.fr
RI BAOUYA, ABDELHAKIM/AAV-8176-2021
OI BAOUYA, ABDELHAKIM/0000-0003-2182-7501; chehida,
   salim/0000-0002-5070-2591
FU European Union through the BRAIN-IoT project H2020-EU.2.1.1 [780089];
   H2020 Societal Challenges Programme [780089] Funding Source: H2020
   Societal Challenges Programme
FX The research leading to these results has been supported by the European
   Union through the BRAIN-IoT project H2020-EU.2.1.1. Grant agreement ID:
   780089.
CR Agha G, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3158668
   Al-Turjman F, 2019, SUSTAIN CITIES SOC, V49, DOI 10.1016/j.scs.2019.101608
   ALUR R, 1993, INFORM COMPUT, V104, P35, DOI 10.1006/inco.1993.1025
   Alvarez Carmona Miguel A., 2013, 2013 32nd International Conference of the Chilean Computer Science Society (SCCC). Proceedings, P54, DOI 10.1109/SCCC.2013.11
   Ballarini P, 2015, PERFORM EVALUATION, V90, P53, DOI 10.1016/j.peva.2015.04.003
   Barbier M, 2019, IEEE INT VEH SYM, P252, DOI 10.1109/IVS.2019.8813793
   Basu A, 2011, IEEE SOFTWARE, V28, P41, DOI 10.1109/MS.2011.27
   Beaulaton D, 2019, LECT NOTES COMPUT SC, V11720, P68, DOI 10.1007/978-3-030-36537-0_5
   Breunig M. M., 2000, SIGMOD Record, V29, P93, DOI 10.1145/335191.335388
   Chehida S., 2020, APPLIED STAT MODEL C, P399, DOI DOI 10.1007/978-3-030_32
   COSMOS, 2015, COSM TOOL
   Daissaoui A, 2020, PROCEDIA COMPUT SCI, V170, P161, DOI 10.1016/j.procs.2020.03.021
   David A, 2015, INT J SOFTW TOOLS TE, V17, P351, DOI [10.1007/s10009-014-0361-y, 10.1007/s10009-014-0323-4]
   Dougherty J, 1995, P 12 INT C MACH LEAR, P194, DOI DOI 10.1016/B978-1-55860-377-6.50032-3
   Franco JM, 2016, J SYST SOFTWARE, V115, P42, DOI 10.1016/j.jss.2016.01.026
   Giannoni F., 2018, Anomaly detection models for iot time series data. arXiv
   He ZY, 2003, PATTERN RECOGN LETT, V24, P1641, DOI 10.1016/S0167-8655(03)00003-5
   Hérault T, 2004, LECT NOTES COMPUT SC, V2937, P73
   Hill DJ, 2009, WATER RESOUR RES, V45, DOI 10.1029/2008WR006956
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Malhotra P., 2015, ESANN, V89, P89
   Mediouni BL, 2018, LECT NOTES COMPUT SC, V11138, P536, DOI 10.1007/978-3-030-01090-4_33
   Mercaldo F, 2019, IEEE ENABL TECHNOL, P231, DOI 10.1109/WETICE.2019.00057
   MRMC, 2011, MRMC TOOL
   Naskos A, 2016, IEEE CLOUD COMPUT, V3, P26, DOI 10.1109/MCC.2016.108
   Nouri Ayoub, 2018, International Journal of Critical Computer-Based Systems, V8, P340
   Nouri A, 2015, INT J SOFTW TOOLS TE, V17, P171, DOI 10.1007/s10009-014-0313-6
   Park C, 2018, TELEMAT INFORM, V35, P2355, DOI 10.1016/j.tele.2018.10.005
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Saives J, 2015, IEEE T AUTOM SCI ENG, V12, P1211, DOI 10.1109/TASE.2015.2471842
   Shahid N, 2015, ARTIF INTELL REV, V43, P515, DOI 10.1007/s10462-013-9395-x
   Stewart W. J., 2009, Probability, Markov Chains, Queues, and Simulation: the Mathematical Basis of Performance Modeling
   Xie Y, 2009, IEEE ACM T NETWORK, V17, P54, DOI 10.1109/TNET.2008.923716
   Yang Y, 2010, DATA MINING AND KNOWLEDGE DISCOVERY HANDBOOK, SECOND EDITION, P101, DOI 10.1007/978-0-387-09823-4_6
   Younes H. L. S., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P223
   Younes HLS, 2005, LECT NOTES COMPUT SC, V3576, P429
   Yu Yufeng, 2014, Journal of Computer Applications, V34, P2217, DOI 10.11772/j.issn.1001-9081.2014.08.2217
   Zhang T, 2020, COMPUT COMMUN, V150, P547, DOI 10.1016/j.comcom.2019.12.006
NR 38
TC 3
Z9 3
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 367
EP 388
DI 10.1007/s11219-021-09559-w
EA JUN 2021
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000663243500002
DA 2024-07-18
ER

PT J
AU Augusto, C
   Morán, J
   Bertolino, A
   de la Riva, C
   Tuya, J
AF Augusto, Cristian
   Moran, Jesus
   Bertolino, Antonia
   de la Riva, Claudio
   Tuya, Javier
TI RETORCH: an approach for resource-aware orchestration of end-to-end test
   cases
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Continuous integration; Continuous testing; Testing in
   the Cloud; End-to-end testing; Test orchestration
ID MINIMIZATION
AB Continuous integration practice mandates to continuously introduce incremental changes into code, but doing so may introduce new faults too. These faults could be detected automatically through regression testing, but this practice becomes prohibitive as the cost of executing the tests grows. This problem is preponderant in end-to-end testing where the whole system is requested for test execution. However, some of these test cases could be executed with fewer resources (e.g., memory, web services, computation, Cloud instances, among others), by deploying only the subsystems needed by each test. This paper is focused on the optimization of the resources employed in end-to-end testing by means of a resource-aware test orchestration technique in the context of continuous integration practices in the Cloud. The RETORCH approach proposes a novel way to identify the resources required by end-to-end test cases and to use this information to group together those tests requiring equivalent resources. Besides, the approach proposes to deploy the grouped tests in isolated and elastic environments, so that their execution can be scheduled in parallel on several machines. RETORCH is exemplified with a real-world application, and its performance evaluation shows promising savings in terms of resource usage and time.
C1 [Augusto, Cristian; Moran, Jesus; de la Riva, Claudio; Tuya, Javier] Univ Oviedo, Comp Sci Dept, Gijon, Spain.
   [Bertolino, Antonia] CNR, ISTI, Pisa, Italy.
C3 University of Oviedo; Consiglio Nazionale delle Ricerche (CNR); Istituto
   di Scienza e Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR)
RP Augusto, C (corresponding author), Univ Oviedo, Comp Sci Dept, Gijon, Spain.
EM augustocristian@uniovi.es; moranjesus@uniovi.es;
   antonia.bertolino@isti.cnr.it; claudio@uniovi.es; tuya@uniovi.es
RI Morán, Jesús/AAA-4871-2019; Augusto Alonso, Cristian/U-9487-2019;
   Bertolino, Antonia/ABD-6837-2020; Riva Alvarez, Claudio de
   la/L-5014-2014; Tuya, Javier/L-6850-2014
OI Morán, Jesús/0000-0002-7544-3901; Augusto Alonso,
   Cristian/0000-0001-6140-1375; Bertolino, Antonia/0000-0001-8749-1356;
   Riva Alvarez, Claudio de la/0000-0001-5592-9683; Tuya,
   Javier/0000-0002-1091-934X
FU Spanish Ministry of Economy and Competitiveness under TestEAMoS project
   [TIN2016-76956-C3-1-R]; ERDF funds; European Project ElasTest in the
   Horizon 2020 research and innovation program [731535]; H2020 -
   Industrial Leadership [731535] Funding Source: H2020 - Industrial
   Leadership
FX This work was supported in part by the Spanish Ministry of Economy and
   Competitiveness under TestEAMoS (TIN2016-76956-C3-1-R) project and ERDF
   funds and by the European Project ElasTest in the Horizon 2020 research
   and innovation program (GA No. 731535).
CR [Anonymous], 2019, About mysql
   Augusto C., 2019, Communications in Computer and Information Science, V1010, P297, DOI [10.1007/978-3-030-29238-6_22, DOI 10.1007/978-3-030-29238-6_22]
   Bell J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P770, DOI 10.1145/2786805.2786823
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Bertolino A, 2019, ACM COMPUT SURV, V52, DOI 10.1145/3331447
   Bertolino A, 2018, PROC IEEE ACM INT C, P17, DOI 10.1145/3183440.3183497
   Burns B, 2016, COMMUN ACM, V59, P50, DOI 10.1145/2890784
   Casalicchio E, 2017, VALUETOOLS 2016, P287
   Chakraborty Soham Sundar, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P488, DOI 10.1109/ASE.2011.6100106
   Chien-Hung Liu, 2017, 2017 International Conference on Applied System Innovation (ICASI). Proceedings, P199, DOI 10.1109/ICASI.2017.7988384
   de Brito MS, 2017, 2017 SECOND INTERNATIONAL CONFERENCE ON FOG AND MOBILE EDGE COMPUTING (FMEC), P127, DOI 10.1109/FMEC.2017.7946419
   Docker Inc, 2017, OV DOCK COMP DOCK DO
   Docker Inc, 2019, SWARM MOD OV DOCK DO
   Draft W, 2014, TOSCA SIMPLE PROFILE, P1
   ElasTest Developers Team, 2017, ELASTEST FULL TEACH
   ElasTest Developers Team, 2018, ELASTEST FULLTEACHIN
   Engström E, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P22
   Esfahani H, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P11, DOI 10.1145/2889160.2889222
   Fitzgerald B, 2017, J SYST SOFTWARE, V123, P176, DOI 10.1016/j.jss.2015.06.063
   Gambi A, 2018, IEEE INT CONF SOFTW, P1, DOI 10.1109/ICST.2018.00011
   Gambi A, 2017, IEEE INT CONF SOFTW, P454, DOI 10.1109/ICST.2017.51
   García B, 2018, 2018 11TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P38, DOI 10.1109/QUATIC.2018.00016
   Giotis Kostas., 2015, 1st IEEE Conference on Network Softwarization (NetSoft), P1
   Guha S, 2001, INFORM SYST, V26, P35, DOI 10.1016/S0306-4379(01)00008-4
   Gyori Alex., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P223
   Harman M., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P111, DOI 10.1109/ICSTW.2011.60
   Herzig K, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P483, DOI 10.1109/ICSE.2015.66
   Lachmann R, 2016, 2016 15TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2016), P361, DOI [10.1109/ICMLA.2016.0065, 10.1109/ICMLA.2016.163]
   Memon A, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P233, DOI 10.1109/ICSE-SEIP.2017.16
   Meyer M, 2014, IEEE SOFTWARE, V31, P14, DOI 10.1109/MS.2014.58
   Microsoft, ORCH OV MICR DOC
   Perez P. F., 2017, FULLTEACHING WEB APP
   Rothermel G, 2002, SOFTW TEST VERIF REL, V12, P219, DOI 10.1002/stvr.256
   Shull F, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P249, DOI 10.1109/METRIC.2002.1011343
   Singh S, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2843889
   Technologies K, 2014, TECHN K
   Toczé K, 2018, WIREL COMMUN MOB COM, DOI 10.1155/2018/7476201
   Uberti J., 2018, WEBRTC HOME
   University R. J. C, 2017, OPENVIDU
   Velasquez K, 2018, J INTERNET SERV APPL, V9, DOI 10.1186/s13174-018-0086-3
   Velasquez K, 2017, 2017 IEEE 5TH INTERNATIONAL CONFERENCE ON FUTURE INTERNET OF THINGS AND CLOUD (FICLOUD 2017), P329, DOI 10.1109/FiCloud.2017.49
   Wong WE, 1998, SOFTWARE PRACT EXPER, V28, P347, DOI 10.1002/(SICI)1097-024X(19980410)28:4<347::AID-SPE145>3.0.CO;2-L
   Xie PZ, 2017, 2017 INTERNATIONAL CONFERENCE ON COMPUTER SYSTEMS, ELECTRONICS AND CONTROL (ICCSEC), P1311, DOI 10.1109/ICCSEC.2017.8446709
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yu L, 2009, ASIA PAC SOFWR ENG, P323, DOI 10.1109/APSEC.2009.27
   Zhang Z, 2014, PROC VLDB ENDOW, V7, P1393, DOI 10.14778/2733004.2733012
NR 46
TC 3
Z9 3
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1147
EP 1171
DI 10.1007/s11219-020-09505-2
EA MAR 2020
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000526051900001
DA 2024-07-18
ER

PT J
AU Daoudagh, S
   Lonetti, F
   Marchetti, E
AF Daoudagh, Said
   Lonetti, Francesca
   Marchetti, Eda
TI XACMET: XACML Testing & Modeling An automated model-based testing
   solution for access control systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Access control; Testing; Request generation; Automated oracle derivation
ID CHANGE-IMPACT ANALYSIS; COVERAGE
AB In the context of access control systems, testing activity is among the most adopted means to assure that sensible information or resources are correctly accessed. In XACML-based access control systems, incoming access requests are transmitted to the policy decision point (PDP) that grants or denies the access based on the defined XACML policies. The criticality of a PDP component requires an intensive testing activity consisting in probing such a component with a set of requests and checking whether its responses grant or deny the requested access as specified in the policy. Existing approaches for improving manual derivation of test requests such as combinatorial ones do not consider policy function semantics and do not provide a verdict oracle. In this paper, we introduce XACMET, a novel approach for systematic generation of XACML requests as well as automated model-based oracle derivation. The main features of XACMET are as follows: (i) it defines a typed graph, called the XAC-Graph, that models the XACML policy evaluation; (ii) it derives a set of test requests via full-path coverage of this graph; (iii) it derives automatically the expected verdict of a specific request execution by executing the corresponding path in such graph; (iv) it allows us to measure coverage assessment of a given test suite. Our validation of the XACMET prototype implementation confirms the effectiveness of the proposed approach.
C1 [Daoudagh, Said; Lonetti, Francesca; Marchetti, Eda] CNR, ISTI, Via G Moruzzi 1, Pisa 56124, Italy.
   [Daoudagh, Said] Univ Pisa, Dept Comp Sci, Largo B Pontecorvo 3, Pisa 56127, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); University
   of Pisa
RP Daoudagh, S (corresponding author), CNR, ISTI, Via G Moruzzi 1, Pisa 56124, Italy.; Daoudagh, S (corresponding author), Univ Pisa, Dept Comp Sci, Largo B Pontecorvo 3, Pisa 56127, Italy.
EM said.daoudagh@isti.cnr.it; francesca.lonetti@isti.cnr.it;
   eda.marchetti@isti.cnr.it
RI MARCHETTI, EDA/AAW-6509-2020; Daoudagh, Said/N-5618-2016; Lonetti,
   Francesca/AAM-5813-2021
OI MARCHETTI, EDA/0000-0003-4223-8036; Daoudagh, Said/0000-0002-3073-6217;
   Lonetti, Francesca/0000-0002-4864-2219
CR Alecu CS, 2006, INTEGRATING BIOMEDICAL INFORMATION: FROM E-CELL TO E-PATIENT, P139
   [Anonymous], 2003, Principles of Constraint Programming
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Bertolino A, 2018, INT WORKSH AUTOMAT, P2, DOI 10.1145/3194733.3194743
   Bertolino A, 2014, IEEE ICST WORKSHOP, P12, DOI 10.1109/ICSTW.2014.49
   Bertolino A, 2014, SOFTWARE QUAL J, V22, P241, DOI 10.1007/s11219-013-9216-0
   Bertolino A, 2013, IET SOFTW, V7, P203, DOI 10.1049/iet-sen.2012.0101
   Bertolino A, 2010, EUROMICRO CONF PROC, P3, DOI 10.1109/SEAA.2010.58
   Calabro Antonello, 2017, Computer Safety, Reliability and Security, SAFECOMP 2017: Workshops ASSURE, DECSoS, SASSUR, TELERISE and TIPS. Proceedings: LNCS 10489, P373, DOI 10.1007/978-3-319-66284-8_31
   Daoudagh S., 2019, P 5 INT C INF SYST S
   Daoudagh S, 2015, MODELSWARD 2015 PROCEEDINGS OF THE 3RD INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P411
   Daoudagh S, 2015, 2015 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON TECHNICAL AND LEGAL ASPECTS OF DATA PRIVACY AND SECURITY TELERISE 2015, P8, DOI 10.1109/TELERISE.2015.10
   Fisler K, 2005, PROC INT CONF SOFTW, P196
   Hu VincentC., 2017, NIST SPECIAL PUBLICA, V800, P192
   Hwang J., 2011, ENCY SOFTWARE ENG, P673
   JeeHyun Hwang, 2010, Proceedings 2010 IEEE International Symposium on Policies for Distributed Systems and Networks (POLICY 2010), P40, DOI 10.1109/POLICY.2010.22
   Kuchcinski K., 2013, CP SOLVERS MODELING
   Li A, 2015, IEEE MILIT COMMUN C, P366, DOI 10.1109/MILCOM.2015.7357470
   Li BX, 2013, SOFTW TEST VERIF REL, V23, P613, DOI 10.1002/stvr.1475
   Li N., 2008, P TAV WEB, P27, DOI DOI 10.1145/1390832.1390837
   Li Y., 2014, P ASME 8 INT C ENERG, P217
   Lonetti F., 2018, ON LINE TRACING XACM
   Martin E., 2007, P 16 INT C WORLD WID, P667, DOI DOI 10.1145/1242572.1242663
   Martin E., 2006, SUPPL P ISSRE
   Martin E, 2006, LECT NOTES COMPUT SC, V4307, P139
   Martin ME, 2007, LAT COMMUNITIES, P5
   OASIS, 2005, XACML 2 0 CONF TESTS
   *OASIS, 2005, EXTENSIBLE ACC CONTR
   Papadakis M., 2017, ADV COMPUTERS
   Pina Ros S., 2012, Proceedings of the 2012 17th ACM Symposium on Access Control Models and Technologies (SACMAT), Newark, NJ, USA, June 20-22, 2012, P83
   Pretschner Alexander, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P338, DOI 10.1109/ICST.2008.44
   Shahid M., 2011, STUDY TEST COVERAGE
   Turkmen Fatih, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P115, DOI 10.1007/978-3-662-46666-7_7
   Xu D., 2016, P 21 ACM S ACC CONTR, P137, DOI DOI 10.1145/2914642.2914653
   Xu DX, 2018, SACMAT'18: PROCEEDINGS OF THE 23RD ACM SYMPOSIUM ON ACCESS CONTROL MODELS & TECHNOLOGIES, P3, DOI 10.1145/3205977.3205979
   Xu DX, 2014, 2014 IEEE EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY - COMPANION (SERE-C 2014), P41, DOI 10.1109/SERE-C.2014.21
   Xu DX, 2015, IEEE T COMPUT, V64, P2490, DOI 10.1109/TC.2014.2375189
   Yu-Seung Ma, 2006, 28th International Conference on Software Engineering Proceedings, P827
   Zhang N, 2005, LECT NOTES COMPUT SC, V3650, P446
   Zhang YP, 2017, IEEE INT CONF CON AU, P160, DOI 10.1109/ICCA.2017.8003052
NR 40
TC 8
Z9 8
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 249
EP 282
DI 10.1007/s11219-019-09470-5
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500012
DA 2024-07-18
ER

PT J
AU Nguyen, PT
   Di Rocco, J
   Rubei, R
   Di Ruscio, D
AF Nguyen, Phuong T.
   Di Rocco, Juri
   Rubei, Riccardo
   Di Ruscio, Davide
TI An automated approach to assess the similarity of GitHub repositories
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mining software repositories; Software similarity; Software quality;
   SimRank
ID CLONE DETECTION; WEB
AB Open source software (OSS) allows developers to study, change, and improve the code free of charge. There are several high-quality software projects which deliver stable and well-documented products. Most OSS forges typically sustain active user and expert communities which in turn provide decent levels of support both with respect to answering user questions as well as to repairing reported software bugs. Code reuse is an intrinsic feature of OSS, and developing a new system by leveraging existing open source components can reduce development effort, and thus it can be beneficial to at least two phases of the software life cycle, i.e., implementation and maintenance. However, to improve software quality, it is essential to develop a system by learning from well-defined, mature projects. In this sense, the ability to find similar projects that facilitate the undergoing development activities is of high importance. In this paper, we address the issue of mining open source software repositories to detect similar projects, which can be eventually reused by developers. We propose CrossSim as a novel approach to model the OSS ecosystem and to compute similarities among software projects. An evaluation on a dataset collected from GitHub shows that our proposed approach outperforms three well-established baselines.
C1 [Nguyen, Phuong T.; Di Rocco, Juri; Rubei, Riccardo; Di Ruscio, Davide] Univ Aquila, Dept Informat Engn Comp Sci & Math, Via Vetoio 2, I-67100 Laquila, Italy.
C3 University of L'Aquila
RP Di Ruscio, D (corresponding author), Univ Aquila, Dept Informat Engn Comp Sci & Math, Via Vetoio 2, I-67100 Laquila, Italy.
EM phuong.nguyen@univaq.it; juri.dirocco@univaq.it;
   riccardo.rubei@univaq.it; davide.diruscio@univaq.it
RI Di Ruscio, Davide/AAG-4674-2020; Di Rocco, Juri/HSE-7230-2023; Nguyen,
   Phuong/ABE-3890-2021
OI Di Ruscio, Davide/0000-0002-5077-6793; Nguyen,
   Phuong/0000-0002-3666-4162; Di Rocco, Juri/0000-0002-7909-3902; Rubei,
   Riccardo/0000-0001-9622-5949
FU EU Horizon 2020 Research and Innovation Programme [732223]
FX The research described in this paper has been carried out as part of the
   CROSSMINER Project, EU Horizon 2020 Research and Innovation Programme,
   grant agreement No. 732223. We thank our project partners for the help
   with the user evaluation presented in this paper. Furthermore, we thank
   the anonymous reviewers for their valuable comments and suggestions that
   help us improve our paper.
CR Bagnato A, 2018, LECT NOTES COMPUT SC, V10748, P375, DOI 10.1007/978-3-319-74730-9_33
   Baltes S, 2018, IEEE WORK CONF MIN S, P319, DOI 10.1145/3196398.3196430
   Behnamghader P, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P251, DOI 10.1109/QRS.2017.36
   Bhandari Upasna, 2013, Information Retrieval Technology. 9th Asia Information Retrieval Societies Conference, AIRS 2013. Proceedings: LNCS 8281, P440, DOI 10.1007/978-3-642-45068-6_38
   Bizer C, 2009, INT J SEMANT WEB INF, V5, P1, DOI 10.4018/jswis.2009081901
   Blondel VD, 2004, SIAM REV, V46, P647, DOI 10.1137/S0036144502415960
   Borges H, 2016, PROC IEEE INT CONF S, P334, DOI 10.1109/ICSME.2016.31
   Chen N, 2015, WSDM'15: PROCEEDINGS OF THE EIGHTH ACM INTERNATIONAL CONFERENCE ON WEB SEARCH AND DATA MINING, P305, DOI 10.1145/2684822.2685305
   Collobert R, 2011, J MACH LEARN RES, V12, P2493
   Crussell J., 2013, European Symposium on Research in Computer Security, P182
   Di Noia T., 2012, P 8 INT C SEM SYST, P1, DOI [DOI 10.1145/2362499.2362501, 10.1145/2362499.2362501]
   EAGLEN RH, 1985, AM J PHYS ANTHROPOL, V66, P307, DOI 10.1002/ajpa.1330660308
   Evans WS, 2009, SOFTWARE QUAL J, V17, P309, DOI 10.1007/s11219-009-9074-y
   Ghose S., 2001, J TARGETING MEASUREM, V10, P26, DOI [DOI 10.1057/palgrave.jt.5740031, 10.1057/palgrave.jt.5740031]
   Gitchell D., 1999, SIGCSE Bulletin, V31, P266, DOI 10.1145/384266.299783
   Herlocker JL, 2004, ACM T INFORM SYST, V22, P5, DOI 10.1145/963770.963772
   Jeh G., 2002, P 8 ACM SIGKDD INT C, P538, DOI DOI 10.1145/775047.775126
   Jiang J, 2017, EMPIR SOFTW ENG, V22, P547, DOI 10.1007/s10664-016-9436-6
   Kawaguchi S, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P184, DOI 10.1109/APSEC.2004.69
   Kendall MG, 1938, BIOMETRIKA, V30, P81, DOI 10.2307/2332226
   Khan SUR, 2016, INT J INFORM MANAGE, V36, P963, DOI 10.1016/j.ijinfomgt.2016.05.025
   Kobilarov G, 2009, LECT NOTES COMPUT SC, V5554, P723, DOI 10.1007/978-3-642-02121-3_53
   Kollias G, 2014, J PARALLEL DISTR COM, V74, P2400, DOI 10.1016/j.jpdc.2013.12.010
   Landauer T.K, 2006, LATENT SEMANTIC ANAL
   Landauer TK, 1998, DISCOURSE PROCESS, V25, P259, DOI 10.1080/01638539809545028
   Leitao AM, 2004, SOFTWARE QUAL J, V12, P361, DOI 10.1023/B:SQJO.0000039793.31052.72
   Linares -Vasquez M., 2016, 2016 IEEE 24 INT C P, P1
   Liu Chao, 2006, Proc. 12th ACMSIGKDD Int'l Con. on Knowledge Discovery and Data Mining (KDD 06), P872, DOI DOI 10.1145/1150402.1150522
   MAAREK YS, 1991, IEEE T SOFTWARE ENG, V17, P800, DOI 10.1109/32.83915
   McMillan C, 2012, PROC INT CONF SOFTW, P848, DOI 10.1109/ICSE.2012.6227134
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   Nassar H, 2018, WEB CONFERENCE 2018: PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE (WWW2018), P619, DOI 10.1145/3178876.3186128
   Nguyen PT, 2019, PROCEEDINGS OF EASE 2019 - EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING, P326, DOI 10.1145/3319008.3319353
   Nguyen PT, 2019, PROC INT CONF SOFTW, P1050, DOI 10.1109/ICSE.2019.00109
   Nguyen PT, 2018, EUROMICRO CONF PROC, P388, DOI 10.1109/SEAA.2018.00069
   Nguyen PT, 2015, WWW'15 COMPANION: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB, P1477, DOI 10.1145/2740908.2742141
   NGUYEN PT, 2018, CROSSSIM TOOL EVALUA
   NGUYEN PT, 2018, P 1 WORKSH KNOWL AW, V2018
   NGUYEN PT, 2018, P 9 IT INF RETR WORK
   Pettigrew S, 2008, QUAL MARK RES, V11, P331, DOI 10.1108/13522750810879048
   Ponzanelli L., 2014, P 11 WORK C MIN SOFT, P102
   Ragkhitwetsagul C, 2018, EMPIR SOFTW ENG, V23, P2464, DOI 10.1007/s10664-017-9564-7
   Ragkhitwetsagul C, 2018, INT WORKS SOFTW CLON, P44, DOI 10.1109/IWSC.2018.8327318
   Rattan D, 2013, INFORM SOFTWARE TECH, V55, P1165, DOI 10.1016/j.infsof.2013.01.008
   Spearman C, 1904, AM J PSYCHOL, V15, P72, DOI 10.2307/1412159
   Spinellis D, 2004, IEEE SOFTWARE, V21, P28, DOI 10.1109/MS.2004.1259204
   Stadler C, 2012, SEMANT WEB, V3, P333, DOI 10.3233/SW-2011-0052
   Thung F, 2013, WORK CONF REVERSE EN, P182, DOI 10.1109/WCRE.2013.6671293
   Thung F, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P600, DOI 10.1109/ICSM.2012.6405331
   Tiarks R, 2011, SOFTWARE QUAL J, V19, P295, DOI 10.1007/s11219-010-9115-6
   Turney PD, 2010, J ARTIF INTELL RES, V37, P141, DOI 10.1613/jair.2934
   TVERSKY A, 1977, PSYCHOL REV, V84, P327, DOI 10.1037/h0026750
   Ugurel S, 2002, P 8 ACM SIGKDD INT C, P632, DOI DOI 10.1145/775047.775141
   Coutinho AEVB, 2016, SOFTWARE QUAL J, V24, P407, DOI 10.1007/s11219-014-9265-z
   Walenstein A., 2006, DUPLICATION REDUNDAN
   Wang M, 2015, PROC VLDB ENDOW, V8, P998, DOI 10.14778/2794367.2794370
   Xia X, 2013, IEEE WORK CONF MIN S, P287, DOI 10.1109/MSR.2013.6624040
   Zhang D, 2015, INT CONF COMPUT ADV
   Zhang Y, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P13, DOI 10.1109/SANER.2017.7884605
   2018, CLAN EVALUATION DATA
NR 60
TC 19
Z9 20
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 595
EP 631
DI 10.1007/s11219-019-09483-0
EA FEB 2020
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000516123200001
DA 2024-07-18
ER

PT J
AU Qin, FY
   Wan, XH
   Yin, BB
AF Qin, Fangyun
   Wan, Xiaohui
   Yin, Beibei
TI An empirical study of factors affecting cross-project aging-related bug
   prediction with TLAP
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Aging-related bugs; Software aging; Cross-project; Empirical study
ID SOFTWARE; COMPLEXITY; FAULTS
AB Software aging is a phenomenon in which long-running software systems show an increasing failure rate and/or progressive performance degradation. Due to their nature, Aging-Related Bugs (ARBs) are hard to discover during software testing and are also challenging to reproduce. Therefore, automatically predicting ARBs before software release can help developers reduce ARB impact or avoid ARBs. Many bug prediction approaches have been proposed, and most of them show effectiveness in within-project prediction settings. However, due to the low presence and reproducing difficulty of ARBs, it is usually hard to collect sufficient training data to build an accurate prediction model. A recent work proposed a method named Transfer Learning based Aging-related bug Prediction (TLAP) for performing cross-project ARB prediction. Although this method considerably improves cross-project ARB prediction performance, it has been observed that its prediction result is affected by several key factors, such as the normalization methods, kernel functions, and machine learning classifiers. Therefore, this paper presents the first empirical study to examine the impact of these factors on the effectiveness of cross-project ARB prediction in terms of single-factor pattern, bigram pattern, and triplet pattern and validates the results with the Scott-Knott test technique. We find that kernel functions and classifiers are key factors affecting the effectiveness of cross-project ARB prediction, while normalization methods do not show statistical influence. In addition, the order of values in three single-factor patterns is maintained in three bigram patterns and one triplet pattern to a large extent. Similarly, the order of values in the three bigram patterns is also maintained in the triplet pattern.
C1 [Qin, Fangyun; Wan, Xiaohui; Yin, Beibei] Beihang Univ, State Key Lab Software Dev Environm, Beijing, Peoples R China.
   [Qin, Fangyun; Wan, Xiaohui; Yin, Beibei] Beihang Univ, Sch Automat Sci & Elect Engn, Beijing, Peoples R China.
C3 Beihang University; Beihang University
RP Qin, FY (corresponding author), Beihang Univ, State Key Lab Software Dev Environm, Beijing, Peoples R China.; Qin, FY (corresponding author), Beihang Univ, Sch Automat Sci & Elect Engn, Beijing, Peoples R China.
EM fangyunqin@buaa.edu.cn; xhwan@buaa.edu.cn; yinbeibei@buaa.edu.cn
OI Wan, Xiaohui/0000-0001-6498-8570
FU State Key Laboratory of Software Development Environment
   [SKLSDE-2018ZX-09]; National Natural Science Foundation of China
   [61772055, 61872169]; Technical Foundation Project of Ministry of
   Industry and Information Technology of China [JSZL2016601B003]
FX This work was supported by the State Key Laboratory of Software
   Development Environment under Grant SKLSDE-2018ZX-09, National Natural
   Science Foundation of China under Grant 61772055 and Grant 61872169, and
   the Technical Foundation Project of Ministry of Industry and Information
   Technology of China under Grant JSZL2016601B003.
CR Al Shalabi L, 2006, DEPCOS-RELCOMEX 2006, P207
   [Anonymous], 2014, Int. J. Comput. Inf. Syst. Ind. Manag. Appl.
   Avritzer A., 1997, Empirical Software Engineering, V2, P59, DOI 10.1023/A:1009794200077
   Carrozza G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P262, DOI 10.1109/ICST.2013.21
   Cassidy KJ, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P478, DOI 10.1109/DSN.2002.1028933
   Castelli V, 2001, IBM J RES DEV, V45, P311, DOI 10.1147/rd.452.0311
   Catal C, 2011, EXPERT SYST APPL, V38, P4626, DOI 10.1016/j.eswa.2010.10.024
   Chen L, 2015, INFORM SOFTWARE TECH, V62, P67, DOI 10.1016/j.infsof.2015.01.014
   Corazza A., 2010, Proceedings of the 6th international conference on predictive models in software engineering, P4
   Cotroneo D., 2010 IEEE 2 INT WORK, V2010, P1
   Cotroneo D, 2013, PROC INT SYMP SOFTW, P178, DOI 10.1109/ISSRE.2013.6698917
   Cotroneo D, 2013, PERFORM EVALUATION, V70, P163, DOI 10.1016/j.peva.2012.09.004
   Di Martino Sergio, 2011, Product-Focused Software Process Improvement. Proceedings 12th International Conference, PROFES 2011, P247, DOI 10.1007/978-3-642-21843-9_20
   Gao KH, 2012, 2012 11TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2012), VOL 2, P281, DOI 10.1109/ICMLA.2012.145
   Graf A. B. A., 2001, Pattern Recognition. 23rd DAGM Symposium. Proceedings (Lecture Notes in Computer Science Vol.2191), P277
   Grottke M., 2008, 19 INT S SOFTWARE RE, P1, DOI DOI 10.1109/ISSREW.2008.5355512
   Grottke M, 2006, IEEE T RELIAB, V55, P411, DOI 10.1109/TR.2006.879609
   Grottke M, 2010, I C DEPEND SYS NETWO, P447, DOI 10.1109/DSN.2010.5544284
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Han J, 2012, MOR KAUF D, P1
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   He P, 2015, INFORM SOFTWARE TECH, V59, P170, DOI 10.1016/j.infsof.2014.11.006
   Herbold S., 2017, ARXIV170506429
   Herbold S., 2013, P 9 INT C PREDICTIVE, P1
   HUANG YN, 1995, DIG PAP INT SYMP FAU, P381, DOI 10.1109/FTCS.1995.466961
   Jelihovschi E.G., 2014, TEMA (São Carlos), V15, P3
   Khoshgoftaar TM, 2010, PROC INT C TOOLS ART, DOI 10.1109/ICTAI.2010.27
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Kotsiantis SB, 2006, PROC WRLD ACAD SCI E, V12, P278
   Kumar L, 2018, ISEC'18: PROCEEDINGS OF THE 11TH INNOVATIONS IN SOFTWARE ENGINEERING CONFERENCE, DOI 10.1145/3172871.3172872
   Li M, 2012, AUTOMAT SOFTW ENG, V19, P201, DOI 10.1007/s10515-011-0092-1
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   MARSHALL E, 1992, SCIENCE, V255, P1347, DOI 10.1126/science.255.5050.1347
   Matias R, 2006, P INT COMP SOFTW APP, P189
   Matias R, 2010, IEEE T RELIAB, V59, P102, DOI 10.1109/TR.2009.2034292
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Nam J, 2018, IEEE T SOFTWARE ENG, V44, P874, DOI 10.1109/TSE.2017.2720603
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Pan SJ, 2011, IEEE T NEURAL NETWOR, V22, P199, DOI 10.1109/TNN.2010.2091281
   Pan SJ, 2010, IEEE T KNOWL DATA EN, V22, P1345, DOI 10.1109/TKDE.2009.191
   Peters F, 2013, IEEE T SOFTWARE ENG, V39, P1054, DOI 10.1109/TSE.2013.6
   QIAO Y, 2018, IEEE T RELIABILITY
   Qin FY, 2019, IEEE T RELIAB, V68, P1134, DOI 10.1109/TR.2018.2864960
   Qin FY, 2017, IEEE PAC RIM INT SYM, P135, DOI 10.1109/PRDC.2017.27
   Qin FY, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P43, DOI 10.1109/QRS.2015.17
   Ren JS, 2014, J APPL MATH, DOI 10.1155/2014/785435
   Ryu D, 2017, SOFTWARE QUAL J, V25, P235, DOI 10.1007/s11219-015-9287-1
   Ryu D, 2016, EMPIR SOFTW ENG, V21, P43, DOI 10.1007/s10664-014-9346-4
   SCOTT AJ, 1974, BIOMETRICS, V30, P507, DOI 10.2307/2529204
   Shen Y, 2013, IEEE IMTC P, P1045
   Tai AT, 1997, THIRD INTERNATIONAL WORKSHOP ON OBJECT-ORIENTED REAL-TIME DEPENDABLE SYSTEMS, PROCEEDINGS, P40, DOI 10.1109/WORDS.1997.609924
   Turhan B, 2013, INFORM SOFTWARE TECH, V55, P1101, DOI 10.1016/j.infsof.2012.10.003
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Vaidyanathan K, 2005, IEEE T DEPEND SECURE, V2, P124, DOI 10.1109/TDSC.2005.15
   Watanabe S., 2008, P 4 INT WORKSH PRED, P19
   Weiss Karl, 2016, Journal of Big Data, V3, DOI 10.1186/s40537-016-0043-6
   Xiao GP, 2017, PROC INT SYMP SOFTW, P101, DOI 10.1109/ISSRE.2017.21
   Zhao J, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P260, DOI 10.1109/ISSRE.2011.24
   Zhao L, 2008, 2008 INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE FOR MODELLING CONTROL & AUTOMATION, VOLS 1 AND 2, P327, DOI 10.1109/CIMCA.2008.113
   Zhou Z.-H., 2016, Machine Learning
NR 62
TC 7
Z9 7
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 107
EP 134
DI 10.1007/s11219-019-09460-7
EA OCT 2019
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000490893300001
DA 2024-07-18
ER

PT J
AU Kiraç, MF
   Aktemur, B
   Sözer, H
   Gebizli, CS
AF Kirac, M. Furkan
   Aktemur, Baris
   Sozer, Hasan
   Gebizli, Ceren Sahin
TI Automatically learning usage behavior and generating event sequences for
   black-box testing of reactive systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test case generation; Black-box testing; Recurrent neural networks; Long
   short-term memory networks; Learning usage behavior
ID MODEL
AB We propose a novel technique based on recurrent artificial neural networks to generate test cases for black-box testing of reactive systems. We combine functional testing inputs that are automatically generated from a model together with manually-applied test cases for robustness testing. We use this combination to train a long short-term memory (LSTM) network. As a result, the network learns an implicit representation of the usage behavior that is liable to failures. We use this network to generate new event sequences as test cases. We applied our approach in the context of an industrial case study for the black-box testing of a digital TV system. LSTM-generated test cases were able to reveal several faults, including critical ones, that were not detected with existing automated or manual testing activities. Our approach is complementary to model-based and exploratory testing, and the combined approach outperforms random testing in terms of both fault coverage and execution time.
C1 [Kirac, M. Furkan; Aktemur, Baris; Sozer, Hasan] Ozyegin Univ, Comp Sci, Istanbul, Turkey.
   [Gebizli, Ceren Sahin] Vestel Elect, Manisa, Turkey.
C3 Ozyegin University; Zorlu Holding
RP Kiraç, MF (corresponding author), Ozyegin Univ, Comp Sci, Istanbul, Turkey.
EM furkan.kirac@ozyegin.edu.tr; baris.aktemur@ozyegin.edu.tr;
   hasan.sozer@ozyegin.edu.tr; ceren.sahin@vestel.com.tr
RI Sözer, Hasan/AAR-8697-2020; Kirac, Furkan/A-4844-2015; Sözer,
   Hasan/A-4722-2015
OI Sözer, Hasan/0000-0002-2968-4763; Kirac, Furkan/0000-0001-9177-0489;
   Sözer, Hasan/0000-0002-2968-4763
CR Agruss C., 2000, FLORIDA I TECHNOLOGY, P68
   Amalfitano D, 2015, IEEE SOFTWARE, V32, P53, DOI 10.1109/MS.2014.55
   [Anonymous], 2006, QUALITY ASSURANCE I
   [Anonymous], 2019, NEURAL NETWORK DESIG
   [Anonymous], 2007, Reactive Systems: Modelling, Specification and Verification
   Bach J., 2003, TECH REP
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Belli F, 2006, SOFTW TEST VERIF REL, V16, P3, DOI 10.1002/stvr.335
   Belli F, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P34, DOI 10.1109/ISSRE.2001.989456
   Berner S, 2005, PROC INT CONF SOFTW, P571
   Bottou L., 2012, Neural networks: Tricks of the trade, P421, DOI DOI 10.1007/978-3-642-35289-8_25
   Cho K., 2014, ARXIV14061078
   Cotter A., 2011, Advances in Neural Information Processing Systems, V24, P1647
   Dalal S. R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P285, DOI 10.1109/ICSE.1999.841019
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   Elbaum S, 2005, IEEE T SOFTWARE ENG, V31, P187, DOI 10.1109/TSE.2005.36
   Entin V., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P572, DOI 10.1109/ICSTW.2011.13
   Fard A. M., 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, ASE'14, P67, DOI 10.1145/2642937.2642991
   Ferguson R., 1996, ACM Transactions on Software Engineering and Methodology, V5, P63, DOI 10.1145/226155.226158
   Gebizli CS, 2017, SOFTWARE QUAL J, V25, P979, DOI 10.1007/s11219-016-9338-2
   Gebizli CS, 2014, 2014 38TH ANNUAL IEEE INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSACW 2014), P656, DOI 10.1109/COMPSACW.2014.110
   Gers FA, 2001, IEEE T NEURAL NETWOR, V12, P1333, DOI 10.1109/72.963769
   Gers FA, 2000, IEEE IJCNN, P189, DOI 10.1109/IJCNN.2000.861302
   Graves A., 2013, GENERATING SEQUENCES
   Greff K, 2017, IEEE T NEUR NET LEAR, V28, P2222, DOI 10.1109/TNNLS.2016.2582924
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Itkonen Juha, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P61
   Itkonen J., 2011, THESIS
   Karpathy Andrej, 2015, char-rnn
   Kingma D. P., 2014, arXiv
   Kiraç MF, 2018, J SYST SOFTWARE, V136, P266, DOI 10.1016/j.jss.2017.06.023
   Le Guen N, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P54, DOI 10.1109/ISSRE.2004.33
   Lukac Z, 2012, 2012 IEEE INTERNATIONAL CONFERENCE ON CONSUMER ELECTRONICS (ICCE), P325, DOI 10.1109/ICCE.2012.6161889
   Marijan D, 2010, IEEE T CONSUM ELECTR, V56, P125, DOI 10.1109/TCE.2010.5439135
   Meinke K, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P447, DOI 10.1109/ICST.2013.62
   Memon A. M., 2001, Software Engineering Notes, V26, P256, DOI 10.1145/503271.503244
   Memon A, 2013, WORK CONF REVERSE EN, P11, DOI 10.1109/WCRE.2013.6671275
   Mesbah A, 2012, IEEE T SOFTWARE ENG, V38, P35, DOI 10.1109/TSE.2011.28
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Nair V., 2010, P 27 INT C MACHINE L, P807
   Nguyen BN, 2014, IEEE T SOFTWARE ENG, V40, P216, DOI 10.1109/TSE.2014.2300857
   Nguyen BN, 2014, AUTOMAT SOFTW ENG, V21, P65, DOI 10.1007/s10515-013-0128-9
   Pacheco C., 2006, P 29 INT C SOFTW ENG, P396
   Pekovi V., 2010, CONSUMER ELECT ISCE, P1, DOI [10.1109/ISCE.2010.5523721., DOI 10.1109/ISCE.2010.5523721]
   Rafi D. M., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P36, DOI 10.1109/IWAST.2012.6228988
   ROBINSON H, 1999, P SOFTW TEST AN REV
   Robinson H., 2000, SOFTWARE TESTING QUA, P24
   Sak H, 2014, INTERSPEECH, P338
   Sivaraman G., 2001, IEEE INT C MULT EXP, P784
   Sprenkle Sara., 2005, AUTOMAT SOFTW ENG, P253, DOI DOI 10.1145/1101908.1101947
   Stefanovic J, 2000, ADV SOFT COMP, P56
   Tinkham A., 2003, P SOFTW TEST AN REV
   Tretmans J, 2011, FORMAL METHODS ETERN
   WERBOS PJ, 1990, P IEEE, V78, P1550, DOI 10.1109/5.58337
   WHITTAKER JA, 1994, IEEE T SOFTWARE ENG, V20, P812, DOI 10.1109/32.328991
   Wong WE, 2012, IEEE T RELIAB, V61, P149, DOI 10.1109/TR.2011.2172031
   Wong WE, 2009, INT J SOFTW ENG KNOW, V19, P573, DOI 10.1142/S021819400900426X
   Wu Y., 2016, GOOGLES NEURAL MACHI
   Xie T., 2006, Automated Software Engineering, V13, P345, DOI 10.1007/s10851-006-8530-6
NR 61
TC 2
Z9 2
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 861
EP 883
DI 10.1007/s11219-018-9439-1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500014
DA 2024-07-18
ER

PT J
AU Gario, A
   Andrews, A
   Hagerman, S
AF Gario, Ahmed
   Andrews, Anneliese
   Hagerman, Seana
TI Fail-safe testing of safety-critical systems: a case study and
   efficiency analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE CEFSM; Finite-state machine; Safety-critical; Testing; FTA; Behavioral
   model; Fault model; Integration
ID FINITE-STATE MACHINES; FAULT-TREES; BAYESIAN NETWORKS; VERIFICATION;
   GENERATION; MODEL
AB This paper proposes an approach for testing of safety-critical systems. It is based on a behavioral and a fault model. The two models are analyzed for compatibility, and necessary changes are identified to make them compatible. Then, transformation rules are used to transform the fault model into the same model type as the behavioral model. Integration rules define how to combine them. This approach results in an integrated model which then can be used to generate tests using a variety of testing criteria. The paper illustrates this general framework using a CEFSM for the behavioral model and a fault tree for the fault model. We apply the technique to an aerospace launch system. We also investigate the scalability of the approach and compare its efficiency with integrating a state chart and a fault tree.
C1 [Gario, Ahmed; Andrews, Anneliese; Hagerman, Seana] Univ Denver, Dept Comp Sci, Denver, CO 80208 USA.
C3 University of Denver
RP Gario, A (corresponding author), Univ Denver, Dept Comp Sci, Denver, CO 80208 USA.
EM agario@du.edu; andrews@cs.du.edu; seana.l.hagerman@lmco.com
FU NSF [0934413, 1127947, 1332078]; Directorate For Engineering; Div Of
   Industrial Innovation & Partnersh [1127947] Funding Source: National
   Science Foundation; Division Of Computer and Network Systems; Direct For
   Computer & Info Scie & Enginr [1332078, 0934413] Funding Source:
   National Science Foundation
FX This work was partially supported by NSF Grant Numbers 0934413, 1127947,
   and 1332078.
CR Amberkar S., 2001, COMPREHENSIVE HAZARD
   Angeletti D, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P303, DOI 10.1109/ICST.2009.22
   [Anonymous], ARG S SOFTW ENG BUEN
   Bobbio A, 2001, RELIAB ENG SYST SAFE, V71, P249, DOI 10.1016/S0951-8320(00)00077-6
   Boroday S., 2002, Testing of Communicating Systems XIV. Application to Internet Technologies and Services. IFIP TC6/WG6.1 Fourteenth International Conference on Testing of Communicating Systems (TestCom 2002), P355
   Boudali H, 2005, RELIAB ENG SYST SAFE, V87, P337, DOI 10.1016/j.ress.2004.06.004
   Bourhfir C, 2001, COMPUT COMMUN, V24, P319, DOI 10.1016/S0140-3664(00)00220-6
   Bourhfir C, 1999, SDL'99: THE NEXT MILLENNIUM, P405, DOI 10.1016/B978-044450228-5/50027-8
   Bourhfir C., 1998, P IFIP TC6 11 INT WO, P275
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Buchacker K, 1999, PROCEEDINGS OF THE HIGH PERFORMANCE COMPUTING SYMPOSIUM - HPC '99, P439
   Byun Y, 2006, J INF SCI ENG, V22, P315
   Byun Y., 2001, P 8 C PATT LANG PROG
   Byun Y., 2005, SAC, P1524
   Byun Y., 2003, THESIS
   CHENG KT, 1993, ACM IEEE D, P86
   Czerny B. J., 2005, ENGINEERING, V1
   Dalal S. R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P285, DOI 10.1109/ICSE.1999.841019
   Danhua Wang, 2010, 2010 International Conference on Computer Design and Applications (ICCDA 2010), P153, DOI 10.1109/ICCDA.2010.5541008
   Di Giorgio Alessandro, 2011, 2011 19th Mediterranean Conference on Control & Automation (MED 2011), P791
   Ek A, 1997, SDL '97 - TIME FOR TESTING, P245, DOI 10.1016/B978-044482816-3/50017-4
   El Ariss O, 2011, IEEE T SYST MAN CY A, V41, P610, DOI 10.1109/TSMCA.2010.2093889
   Ericson CA, 2005, HAZARD ANALYSIS TECHNIQUES FOR SYSTEM SAFETY, P1, DOI 10.1002/0471739421
   Flammini F, 2005, Ninth IEEE International Symposium on High-Assurance Systems Engineering, P163, DOI 10.1109/HASE.2005.26
   Flammini F, 2014, INT J RELIAB QUAL SA, V21, DOI 10.1142/S0218539314500016
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   Garavel H, 2013, ELECTRON NOTES THEOR, V296, P145, DOI 10.1016/j.entcs.2013.07.010
   Garavel Hubert., 2009, MEMOCODE, P46, DOI DOI 10.1109/MEMCOD.2009.5185377
   Gario Ahmed, 2014, 23rd Australian Software Engineering Conference (ASWEC 2014), P190, DOI 10.1109/ASWEC.2014.19
   Gario A., 2014, AER C 2014 IEEE, P1
   Gario A., 2014, THESIS, P11
   Ghazel M, 2014, TRANSPORT RES C-EMER, V42, P60, DOI 10.1016/j.trc.2014.02.002
   Henniger O., 2004, FORMAL APPROACHES SO, P1105
   Hessel A, 2007, ELECTRON NOTES THEOR, V190, P47, DOI 10.1016/j.entcs.2007.08.005
   Kaiser B, 2005, P REL MAINT S, P468, DOI 10.1109/RAMS.2005.1408407
   Kaiser B., 2003, SOFTWARETECHNIK TREN, V23, P33
   Kaiser B, 2007, RELIAB ENG SYST SAFE, V92, P1521, DOI 10.1016/j.ress.2006.10.010
   Kaiser Bernhard., 2003, Safety Critical Systems and Software 2003, Eigth Australian Workshop on Safety-Related Programmable Systems, V33, P37
   KELLER RM, 1976, COMMUN ACM, V19, P371, DOI 10.1145/360248.360251
   Kim H, 2010, ASIA PAC SOFWR ENG, P196, DOI 10.1109/APSEC.2010.31
   Kloos J., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P26, DOI 10.1109/ICSTW.2011.90
   Kovacs G., 2002, Acta Cybernetica, V15, P583
   Leaphart E. G., 2005, ENGINEERING, V1
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   LEVESON NG, 1983, IEEE T SOFTWARE ENG, V9, P569, DOI 10.1109/TSE.1983.235116
   Li JJ, 2002, ISORC 2002: FIFTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P181, DOI 10.1109/ISORC.2002.1003693
   Marrone S, 2014, INT J SOFTW TOOLS TE, V16, P669, DOI 10.1007/s10009-014-0320-7
   Medikonda B.S., 2011, Glob. J. Comput. Sci. Technol, V11, P57
   Montani S, 2008, RELIAB ENG SYST SAFE, V93, P922, DOI 10.1016/j.ress.2007.03.013
   Nazier R, 2012, PROC INT SYMP SOFTW, P213, DOI 10.1109/ISSREW.2012.22
   Ortmeier Frank, 2007, P 1 IFAC WORKSH DEP
   Petricic A., 2008, 8 C SOFTW ENG RES PR
   Petricic A., 2009, P 14 INT WORKSH COMP
   Raiteri DC, 2004, 2004 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P659
   Savage P, 1997, 1997 IEEE AEROSPACE CONFERENCE PROCEEDINGS, VOL 4, P293, DOI 10.1109/AERO.1997.577516
   Sinha A, 2006, EMPIR SOFTW ENG, V11, P173, DOI 10.1007/s10664-006-6401-9
   Teradyne Software and Systems Test, 1999, TESTM US GUID
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Tribble AC, 2004, IEEE AERO EL SYS MAG, V19, P21, DOI 10.1109/MAES.2004.1365014
   Utting M., 2007, PRACTICAL MODEL BASE
   Vaos J. M., 1998, SOFTWARE FAULT INJEC
   VASY, CADP CAES ALD DEV PA
   Vesely William, 2002, Fault Tree Handbook with Aerospace Applications
   Wada H., 2005, P 9 WORLD MULT SYST
   Xiang JW, 2004, PROCEEDINGS OF THE IASTED INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P378
   [No title captured]
NR 67
TC 3
Z9 4
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2018
VL 26
IS 1
BP 3
EP 48
DI 10.1007/s11219-015-9283-5
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FX1AL
UT WOS:000425779200001
DA 2024-07-18
ER

PT J
AU Garousi, V
   Eskandar, MM
   Herkiloglu, K
AF Garousi, Vahid
   Eskandar, Matt M.
   Herkiloglu, Kadir
TI Industry-academia collaborations in software testing: experience and
   success stories from Canada and Turkey
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Industry-academia collaborations; Software engineering; Software
   testing; Empirical study; Experience report; Evidence; Challenges;
   Success factors (patterns); Anti-patterns
ID ENGINEERING-EDUCATION; TECHNOLOGY-TRANSFER; UNIVERSITY; PROJECTS; AGILE;
   MODEL
AB Collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research. However, many researchers and practitioners believe that the level of joint industry-academia collaborations (IAC) in software engineering (SE) is still relatively very low, compared to the amount of activity in each of the two communities. The goal of the empirical study reported in this paper is to characterize a set of collaborative industry-academia R&D projects in the area of software testing conducted by the authors (based in Canada and Turkey) with respect to a set of challenges, patterns and anti-patterns identified by a recent Systematic Literature Review study, with the aim of contributing to the body of evidence in the area of IAC, for the benefit of SE researchers and practitioners in conducting successful IAC projects in software testing and in software engineering in general. To address the above goal, a pool of ten IAC projects (six completed, two failed and two ongoing) all in the area of software testing, which the authors have led or have had active roles in, were selected as objects of study and were analyzed (both quantitatively and qualitatively) with respect to the set of selected challenges, patterns and anti-patterns. As outputs, the study presents a set of empirical findings and evidence-based recommendations, e.g.: it has been observed that even if an IAC project may seem perfect from many aspects, one single major challenge (e.g., disagreement in confidentiality agreements) can lead to its failure. Thus, we recommend that both parties (academics and practitioners) consider all the challenges early on and proactively work together to eliminate the risk of challenges in IAC projects. We furthermore report correlation and interrelationship of challenges, patterns and anti-patterns with project success measures. This study hopes to encourage and benefit other SE researchers and practitioners in conducting successful IAC projects in software testing and in software engineering in general in the future.
C1 [Garousi, Vahid] Hacettepe Univ, Dept Comp Engn, Software Engn Res Grp, Ankara, Turkey.
   [Garousi, Vahid] Maral Software Engn Consulting Corp, Calgary, AB, Canada.
   [Eskandar, Matt M.] MR Control Syst Int Inc, Calgary, AB, Canada.
   [Herkiloglu, Kadir] HAVELSAN AS, Qual Test & Proc Management Directorate, Ankara, Turkey.
C3 Hacettepe University; Havelsan AS
RP Garousi, V (corresponding author), Hacettepe Univ, Dept Comp Engn, Software Engn Res Grp, Ankara, Turkey.; Garousi, V (corresponding author), Maral Software Engn Consulting Corp, Calgary, AB, Canada.
EM vahid.garousi@hacettepe.edu.tr
FU Hacettepe University; Scientific and Technological Research Council of
   Turkey (TUBITAK)
FX Vahid Garousi was partially supported by several internal grants by the
   Hacettepe University and the Scientific and Technological Research
   Council of Turkey (TUBITAK).
CR Adler M., 1996, Gazing Into the Oracle: The Delphi Method and Its Application to Social Policy and Public Health
   Ahimbisibwe A, 2015, J ENTERP INF MANAG, V28, P7, DOI 10.1108/JEIM-08-2013-0060
   Akdur D., 2015, INT C MOD DRIV ENG S, P11
   Amannejad Y, 2014, IEEE ICST WORKSHOP, P302, DOI 10.1109/ICSTW.2014.34
   Ankrah S, 2015, SCAND J MANAG, V31, P387, DOI 10.1016/j.scaman.2015.02.003
   [Anonymous], 2012, MODELLING QUALITY RE
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 2014, P 2014 INT WORKSH LO, DOI DOI 10.1145/2647648.2647651
   Avison D, 1999, COMMUN ACM, V42, P94, DOI 10.1145/291469.291479
   Baldassarre M.T., 2013, P INT C EV ASS SOFTW
   Biffl S., 2006, Value-Based Software Engineering
   Briand L. C., 2011, 2011 IEEE 27th International Conference on Software Maintenance, DOI 10.1109/ICSM.2011.6080766
   Briand L, 2012, IEEE SOFTWARE, V29, P96, DOI 10.1109/MS.2012.86
   Charette RN, 2005, IEEE SPECTRUM, V42, P42, DOI 10.1109/MSPEC.2005.1502528
   Chow T, 2008, J SYST SOFTWARE, V81, P961, DOI 10.1016/j.jss.2007.08.020
   Connor AM, 2009, PROCEEDINGS OF THE 2009 SIXTH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, VOLS 1-3, P678, DOI 10.1109/ITNG.2009.134
   Cruzes DS, 2011, INFORM SOFTWARE TECH, V53, P440, DOI 10.1016/j.infsof.2011.01.004
   DEUTSCH MS, 1991, IEEE T ENG MANAGE, V38, P365, DOI 10.1109/17.97444
   Eldh S, 2013, IEEE-ACM INT WKSP CO, P69, DOI 10.1109/CESI.2013.6618476
   Enoiu E.P., 2014, P INT WORKSH LONG TE
   Fairhurst M., 2013, Biometric Technology Today, P10, DOI [10.1016/S0969-4765(13)70016-X, DOI 10.1016/S0969-4765(13)70016-X]
   Garousi V., 2008, 10 ANN C GENETIC EVO, P1743
   Garousi V., 2015, TECHNICAL REPORT
   Garousi V., 2015, WILEY J SOFTWARE EVO
   Garousi V., 2013, P TURK NAT SOFTW ENG
   Garousi V., 2012, SUCCESS STORIES IND
   Garousi V, 2008, J SYST SOFTWARE, V81, P161, DOI 10.1016/j.jss.2007.05.037
   Garousi V, 2015, J SYST SOFTWARE, V108, P148, DOI 10.1016/j.jss.2015.06.036
   Garousi V, 2013, J SYST SOFTWARE, V86, P1354, DOI 10.1016/j.jss.2012.12.051
   Garousi V, 2011, 2011 24TH IEEE-CS CONFERENCE ON SOFTWARE ENGINEERING EDUCATION AND TRAINING (CSEET), P396, DOI 10.1109/CSEET.2011.5876112
   Garousi V, 2010, J SYST SOFTWARE, V83, P2251, DOI 10.1016/j.jss.2010.07.012
   Garousi V, 2010, CONF SOFTW ENG EDUC, P177, DOI 10.1109/CSEET.2010.40
   Garousi V, 2010, IEEE T SOFTWARE ENG, V36, P778, DOI 10.1109/TSE.2010.5
   Glass R.L., 2006, SOFTWARE CREATIVITY
   Glass R.L., 2006, SOFTWARE CONFLICT 2
   Gorschek T, 2006, IEEE SOFTWARE, V23, P88, DOI 10.1109/MS.2006.147
   Grünbacher P, 2013, IEEE-ACM INT WKSP CO, P27, DOI 10.1109/CESI.2013.6618466
   Guruprasad K, 2013, EVOLVING CORPORATE EDUCATION STRATEGIES FOR DEVELOPING COUNTRIES: THE ROLE OF UNIVERSITIES, P90, DOI 10.4018/978-1-4666-2845-8.ch007
   Harrigan MT, 2003, BIOCHEM MOL BIOL EDU, V31, P142, DOI 10.1002/bmb.2003.494031020195
   Jain S, 2013, IEEE-ACM INT WKSP CO, P9, DOI 10.1109/CESI.2013.6618463
   Jolly S. A., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P400, DOI 10.1109/ICST.2012.52
   Jugdev K., 2005, Project Management Journal, V36, P19, DOI [10.1177/875697280503600403, DOI 10.1177/875697280503600403]
   Kaindia H., 2002, Requirements Engineering, V7, P113, DOI 10.1007/s007660200008
   Kanso A., 2014, P INT WORKSH LONG TE
   Kato Y., 2005, AIST TODAY INT EDITI, P11
   Krishnan P, 2009, CONF SOFTW ENG EDUC, P117, DOI 10.1109/CSEET.2009.22
   Lamprecht S. J., 2012, Proceedings of the 2012 4th Software Engineering Colloquium (SE), P11, DOI 10.1109/SE.2012.6242350
   Leszak M, 2002, J SYST SOFTWARE, V61, P173, DOI 10.1016/S0164-1212(01)00146-7
   Lunsford T.K., 1995, J PROSTHET ORTHOT, V7, P105
   Martinez-Fernandez S, 2014, P INT WORKSH COND EM
   Maxwell JohnC., 2013, INFLUENCE PEOPLE MAK
   Misirli A.T., 2014, P INT WORKSH COND EM
   Morris P, 1998, THIRD INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING - PROCEEDINGS, P130, DOI 10.1007/BF02919966
   Mujumdar AS, 2010, DRY TECHNOL, V28, P431, DOI 10.1080/07373931003609427
   MULLINS CB, 1985, CIRCULATION, V72, P8
   O'Leary C, 2006, CONF SOFTW ENG EDUC, P115, DOI 10.1109/CSEET.2006.16
   Osterweil LJ, 2008, COMPUTER, V41, P39, DOI 10.1109/MC.2008.85
   Palkar Shrikant, 2013, ACM Inroads, V4, P56, DOI 10.1145/2537753.2537773
   Perkmann M, 2013, RES POLICY, V42, P423, DOI 10.1016/j.respol.2012.09.007
   Petersen K, 2014, P INT WORKSH LONG TE
   Petersen K., 2014, P 2014 INT WORKSH LO, P55
   Pfleeger SL, 1999, J SYST SOFTWARE, V47, P111, DOI 10.1016/S0164-1212(99)00031-X
   Pinheiro C, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P186
   Reel JS, 1999, IEEE SOFTWARE, V16, P18, DOI 10.1109/52.765782
   Rombach D, 2008, ACM SIGSOFT SOFTW EN, V33, P26
   Rombach DH, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P29, DOI 10.1109/FOSE.2007.16
   Runeson P., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P872, DOI 10.1109/ICST.2012.190
   Sahaf Z., 2014, PROC INT C SOFTW SYS, P149, DOI [10.1145/2600821.2600832, DOI 10.1145/2600821.2600832]
   Sandberg AB, 2011, IEEE SOFTWARE, V28, P74, DOI 10.1109/MS.2011.49
   Solingen R. V., 1999, GOAL QUESTION METRIC
   Subrahmanyam GVB, 2009, CONF SOFTW ENG EDUC, P248, DOI 10.1109/CSEET.2009.8
   Sullivan Gail M, 2013, J Grad Med Educ, V5, P541, DOI 10.4300/JGME-5-4-18
   Thomas CJ, 2014, CURR TOP MED CHEM, V14, P291, DOI 10.2174/1568026613666131127125351
   Wiederseiner C., 2012, AUTOBBUT AUTOMATED C
   Wiederseiner C, 2011, IEEE INT CONF TRUST, P1109, DOI 10.1109/TrustCom.2011.151
   Wiederseiner C, 2010, LECT NOTES COMPUT SC, V6303, P118, DOI 10.1007/978-3-642-15585-7_11
   Wohlin C, 1999, J SYST SOFTWARE, V49, P125, DOI 10.1016/S0164-1212(99)00085-0
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Wohlin C, 2013, P INT JOINT C SOFTW
   Wohlin C, 2013, IEEE-ACM INT WKSP CO, P43, DOI 10.1109/CESI.2013.6618469
   Wohlin C, 2012, IEEE SOFTWARE, V29, P67, DOI 10.1109/MS.2011.92
   Yeo K. T., 2002, International Journal of Project Management, V20, P241, DOI 10.1016/S0263-7863(01)00075-8
NR 82
TC 20
Z9 20
U1 1
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2017
VL 25
IS 4
SI SI
BP 1091
EP 1143
DI 10.1007/s11219-016-9319-5
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FN4KA
UT WOS:000415973100002
DA 2024-07-18
ER

PT J
AU Sözer, H
   Stoelinga, M
   Boudali, H
   Aksit, M
AF Sozer, Hasan
   Stoelinga, Marielle
   Boudali, Hichem
   Aksit, Mehmet
TI Availability analysis of software architecture decomposition
   alternatives for local recovery
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Dependability; Availability; Fault tolerance; Local recovery; Software
   architecture evaluation
ID FAULT-TOLERANT SYSTEMS; DEPENDABILITY; RELIABILITY; FRAMEWORK; MODELS;
   AADL
AB We present an efficient and easy-to-use methodology to predict-at design time-the availability of systems that support local recovery. Our analysis techniques work at the architectural level, where the software designer simply inputs the software modules' decomposition annotated with failure and repair rates. From this decomposition, we automatically generate an analytical model (a continuous-time Markov chain), from which an availability measure is then computed, in a completely automated way. A crucial step is the use of intermediate models in the input/output interactive Markov chain formalism, which makes our techniques efficient, mathematically rigorous, and easy to adapt. In particular, we use aggressive minimization techniques to keep the size of the generated state spaces small. We have applied our methodology on a realistic case study, namely the MPlayer open-source software. We have investigated four different decomposition alternatives and compared our analytical results with the measured availability on a running MPlayer. We found that our predicted results closely match the measured ones.
C1 [Sozer, Hasan] Ozyegin Univ, Sch Engn, Antepe Mah Orman Sk 34-36, TR-34794 Istanbul, Turkey.
   [Stoelinga, Marielle] Univ Twente, Dept Comp Sci, Formal Methods & Tools Grp, Enschede, Netherlands.
   [Boudali, Hichem] European Space Agcy, European Space Res & Technol Ctr, Noordwijk, Netherlands.
   [Aksit, Mehmet] Univ Twente, Dept Comp Sci, Software Engn Grp, Enschede, Netherlands.
C3 Ozyegin University; University of Twente; European Space Agency;
   University of Twente
RP Sözer, H (corresponding author), Ozyegin Univ, Sch Engn, Antepe Mah Orman Sk 34-36, TR-34794 Istanbul, Turkey.
EM hasan.sozer@ozyegin.edu.tr
RI Sözer, Hasan/A-4722-2015; Sözer, Hasan/AAR-8697-2020
OI Sözer, Hasan/0000-0002-2968-4763; Sözer, Hasan/0000-0002-2968-4763;
   Stoelinga, Marielle/0000-0001-6793-8165
FU Dutch Ministry of Economic Affairs under the BSIK program; Netherlands
   Organization for Scientific Research (NWO) under FOCUS/BRICKS Grant
   [642.000.505]; EU [IST-004527, FP7-ICT-2007-1]; EPSRC [EP/P016456/1]
   Funding Source: UKRI
FX We thank Pepijn Crouzen for his help using CADP and Boudewijn Haverkort
   for his comments on an earlier version of this paper. This work has been
   carried out as a part of the TRADER project under the responsibilities
   of the Embedded Systems Institute. This work is partially supported by
   the Dutch Ministry of Economic Affairs under the BSIK program; by the
   Netherlands Organization for Scientific Research (NWO) under
   FOCUS/BRICKS Grant Number 642.000.505 (MOQS); and by the EU under Grants
   Numbers IST-004527 (ARTIST2) and FP7-ICT-2007-1 (QUASIMODO).
CR Alvarez GA, 1997, INT CON DISTR COMP S, P78, DOI 10.1109/ICDCS.1997.597856
   [Anonymous], 1989, CWI Q.
   [Anonymous], 2002, LECT NOTES COMPUTER
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Bernardi S, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379778
   Bernardi S, 2011, SOFTW SYST MODEL, V10, P313, DOI 10.1007/s10270-009-0128-1
   Boudali H, 2008, I C DEPEND SYS NETWO, P512, DOI 10.1109/DSN.2008.4630122
   Boudali H, 2007, I C DEPEND SYS NETWO, P708, DOI 10.1109/DSN.2007.37
   Bowles JB, 2004, QUAL RELIAB ENG INT, V20, P679, DOI 10.1002/qre.577
   Bozzano M, 2011, COMPUT J, V54, P754, DOI 10.1093/comjnl/bxq024
   Brosch F, 2012, IEEE T SOFTWARE ENG, V38, P1319, DOI 10.1109/TSE.2011.94
   Candea G, 2004, USENIX Association Proceedings of the Sixth Symposium on Operating Systems Design and Implementation (OSDE '04), P31
   Candea G, 2004, PERFORM EVALUATION, V56, P213, DOI 10.1016/j.peva.2003.07.007
   Das O, 1998, IEEE INTERNATIONAL COMPUTER PERFORMANCE AND DEPENDABILITY SYMPOSIUM -PROCEEDINGS, P132, DOI 10.1109/IPDS.1998.707716
   Dashofy EM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P266, DOI 10.1109/ICSE.2002.1007974
   Devroye L., 1986, Non-Uniform Random Variate Generation
   Dugan J., 1995, SOFTWARE FAULT TOLER, P109
   Duraes JA, 2006, IEEE T SOFTWARE ENG, V32, P849, DOI 10.1109/TSE.2006.113
   Franco J. M., 2012, 2012 Joint Working IEEE/IFIP Conference on Software Architecture (WICSA 2012) & European Conference on Software Architecture (ECSA 2012), P302, DOI 10.1109/WICSA-ECSA.212.50
   Franco JM, 2014, 2014 9TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P282, DOI 10.1109/QUATIC.2014.45
   Garavel H, 2001, INT FED INFO PROC, V69, P377, DOI 10.1007/0-306-47003-9_24
   Garavel H, 2007, LECT NOTES COMPUT SC, V4590, P158
   Garlan D., 1997, P CASCON, V97, P169
   Garlan David, 2010, SEI Series in Software Engineering, Vsecond
   Garland S., 2004, TECH REP
   GEIST R, 1990, COMPUTER, V23, P52, DOI 10.1109/2.56852
   Hermanns H, 2000, SCI COMPUT PROGRAM, V36, P97, DOI 10.1016/S0167-6423(99)00019-2
   Hunt G., 2007, Operating Systems Review, V41, P341, DOI 10.1145/1272998.1273032
   Immonen A, 2008, SOFTW SYST MODEL, V7, P49, DOI 10.1007/s10270-006-0040-x
   Kuntz M., 2008, TRCTIT0839
   Lai CD, 2002, INFORM SOFTWARE TECH, V44, P343, DOI 10.1016/S0950-5849(02)00007-1
   Maier MW, 2001, COMPUTER, V34, P107, DOI 10.1109/2.917550
   Majzik I, 2002, LECT NOTES COMPUT SC, V2485, P121
   Monnet S, 2007, LECT NOTES COMPUT SC, V4395, P610
   Rugina AE, 2007, LECT NOTES COMPUT SC, V4615, P14
   Sozer H., 2009, THESIS
   Sözer H, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P167, DOI 10.1109/WICSA.2008.9
   Sözer H, 2013, SOFTWARE QUAL J, V21, P203, DOI 10.1007/s11219-011-9171-6
   Sozer H, 2009, SOFTWARE PRACT EXPER, V39, P869, DOI 10.1002/spe.916
   Tokar JL, 2007, LECT NOTES COMPUT SC, V4615, P1, DOI 10.1109/AFRCON.2007.4401459
   Vaidyanathan K, 2005, IEEE T DEPEND SECURE, V2, P124, DOI 10.1109/TDSC.2005.15
NR 41
TC 4
Z9 4
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 553
EP 579
DI 10.1007/s11219-016-9315-9
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU8EZ
UT WOS:000401271700008
DA 2024-07-18
ER

PT J
AU Tosun, A
   Bener, AB
   Akbarinasaji, S
AF Tosun, Ayse
   Bener, Ayse Basar
   Akbarinasaji, Shirin
TI A systematic literature review on the applications of Bayesian networks
   to predict software quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Software reliability prediction; Systematic literature
   review; Bayesian network; Applications of AI
ID DECISION-MAKING; HEALTH-CARE; AGREEMENT; MODELS
AB Bayesian networks (BN) have been used for decision making in software engineering for many years. In other fields such as bioinformatics, BNs are rigorously evaluated in terms of the techniques that are used to build the network structure and to learn the parameters. We extend our prior mapping study to investigate the extent to which contextual and methodological details regarding BN construction are reported in the studies. We conduct a systematic literature review on the applications of BNs to predict software quality. We focus on more detailed questions regarding (1) dataset characteristics, (2) techniques used for parameter learning, (3) techniques used for structure learning, (4) use of tools, and (5) model validation techniques. Results on ten primary studies show that BNs are mostly built based on expert knowledge, i.e. structure and prior distributions are defined by experts, whereas authors benefit from BN tools and quantitative data to validate their models. In most of the papers, authors do not clearly explain their justification for choosing a specific technique, and they do not compare their proposed BNs with other machine learning approaches. There is also a lack of consensus on the performance measures to validate the proposed BNs. Compared to other domains, the use of BNs is still very limited and current publications do not report enough details to replicate the studies. We propose a framework that provides a set of guidelines for reporting the essential contextual and methodological details of BNs. We believe such a framework would be useful to replicate and extend the work on BNs.
C1 [Tosun, Ayse] Istanbul Tech Univ, Fac Comp Engn & Informat, TR-34469 Istanbul, Turkey.
   [Bener, Ayse Basar; Akbarinasaji, Shirin] Ryerson Univ, Dept Mech & Ind Engn, Data Sci Lab, Toronto, ON, Canada.
C3 Istanbul Technical University; Toronto Metropolitan University
RP Tosun, A (corresponding author), Istanbul Tech Univ, Fac Comp Engn & Informat, TR-34469 Istanbul, Turkey.
EM tosunmisirli@itu.edu.tr; ayse.bener@ryerson.ca;
   Shirin.akbarinasaji@ryerson.ca
RI Basar, Ayse/ABF-9265-2020; Tosun, Ayse/B-4794-2014
OI Basar, Ayse/0000-0003-4934-8326; Tosun, Ayse/0000-0003-1859-7872
CR Abran A., 2001, Guide to the software engineering body of knowledge: trial version
   [Anonymous], 1998, TUTORIAL LEARNING BA
   [Anonymous], 2007, GUIDELINES PERFORMIN
   Clifton D. A., 2012, 2012 Proceedings of the First International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering (RAISE 2012), P37, DOI 10.1109/RAISE.2012.6227968
   Daly R, 2011, KNOWL ENG REV, V26, P99, DOI 10.1017/S0269888910000251
   Darwiche A, 2010, COMMUN ACM, V53, P80, DOI 10.1145/1859204.1859227
   Doguc O, 2009, RELIAB ENG SYST SAFE, V94, P542, DOI 10.1016/j.ress.2008.06.009
   Febrero F, 2014, INFORM SOFTWARE TECH, V56, P839, DOI 10.1016/j.infsof.2014.03.006
   Fenton N, 2004, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2004.1317462
   Fenton N., 2008, Proceedings of the Institution of Mechanical Engineers, Part O (Journal of Risk and Reliability), V222, P701, DOI 10.1243/1748006XJRR161
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Fenton Norman, 2012, Risk Assessment and Decision Analysis with Bayesian Networks
   Fineman M., 2009, COMPUTATIONAL INTELL, P1
   FLEISS JL, 1971, PSYCHOL BULL, V76, P378, DOI 10.1037/h0031619
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Harman M, 2012, IEEE INT CONF AUTOM, P1, DOI 10.1145/2351676.2351678
   Kitchenham BA, 2011, INFORM SOFTWARE TECH, V53, P638, DOI 10.1016/j.infsof.2010.12.011
   Kitchenham BA, 2012, INFORM SOFTWARE TECH, V54, P804, DOI 10.1016/j.infsof.2011.11.008
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   LITTLEWOOD B, 1993, COMMUN ACM, V36, P69, DOI 10.1145/163359.163373
   Littlewood B., 1973, Applied Statistics, V22, P332, DOI 10.2307/2346781
   Lucas PJF, 2004, ARTIF INTELL MED, V30, P201, DOI 10.1016/j.artmed.2003.11.001
   Lunn DJ, 2000, STAT COMPUT, V10, P325, DOI 10.1023/A:1008929526011
   Mendes E., 2007, P EV ASS SOFTW ENG, P83
   Mendes E, 2008, IEEE T SOFTWARE ENG, V34, P723, DOI 10.1109/TSE.2008.64
   Misirli A. T., 2014, RAISE 2014 P 3 INT W, P7
   Misirli AT, 2014, IEEE T SOFTWARE ENG, V40, P533, DOI 10.1109/TSE.2014.2321179
   Musa J., 1983, ELECT SYSTEMS EFFECT, P395
   Neil M, 2008, RELIAB ENG SYST SAFE, V93, P933, DOI 10.1016/j.ress.2007.03.009
   Neil M, 2007, STAT COMPUT, V17, P219, DOI 10.1007/s11222-007-9018-y
   Radlinski Lukasz, 2010, International Journal of Software Engineering and Computing, V2, P95
   Schutt R., 2012, 10 IMPORTANT DATA SC
   Spiegelhalter DJ, 2002, J R STAT SOC B, V64, P583, DOI 10.1111/1467-9868.00353
   Wilkinson DJ, 2007, BRIEF BIOINFORM, V8, P109, DOI 10.1093/bib/bbm007
   Winkler RL, 2001, INT J TECHNOL ASSESS, V17, P56, DOI 10.1017/S026646230110406X
NR 35
TC 19
Z9 21
U1 0
U2 20
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 273
EP 305
DI 10.1007/s11219-015-9297-z
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400011
DA 2024-07-18
ER

PT J
AU Caglayan, B
   Misirli, AT
   Bener, AB
   Miranskyy, A
AF Caglayan, Bora
   Misirli, Ayse Tosun
   Bener, Ayse Basar
   Miranskyy, Andriy
TI Predicting defective modules in different test phases
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Testing phase; Defect prediction
ID SOFTWARE; CLASSIFICATION; NUMBER; FAULTS
AB Defect prediction is a well-established research area in software engineering . Prediction models in the literature do not predict defect-prone modules in different test phases. We investigate the relationships between defects and test phases in order to build defect prediction models for different test phases. We mined the version history of a large-scale enterprise software product to extract churn and static code metrics. We used three testing phases that have been employed by our industry partner, namely function, system and field, to build a learning-based model for each testing phase. We examined the relation of different defect symptoms with the testing phases. We compared the performance of our proposed model with a benchmark model that has been constructed for the entire test phase (benchmark model). Our results show that building a model to predict defect-prone modules for each test phase significantly improves defect prediction performance and shortens defect detection time. The benefit analysis shows that using the proposed model, the defects are detected on the average 7 months earlier than the actual. The outcome of prediction models should lead to an action in a software development organization. Our proposed model gives a more granular outcome in terms of predicting defect-prone modules in each testing phase so that managers may better organize the testing teams and effort.
C1 [Caglayan, Bora] Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
   [Misirli, Ayse Tosun] Oulu Univ, Dept Informat Proc Sci, Oulu, Finland.
   [Bener, Ayse Basar] Ryerson Univ, Dept Mech & Ind Engn, Data Sci Lab, Toronto, ON M5B 2K3, Canada.
   [Miranskyy, Andriy] Ryerson Univ, Dept Comp Sci, Toronto, ON M5B 2K3, Canada.
C3 Bogazici University; University of Oulu; Toronto Metropolitan
   University; Toronto Metropolitan University
RP Caglayan, B (corresponding author), Bogazici Univ, Dept Comp Engn, PK 2, TR-34342 Istanbul, Turkey.
EM bora.caglayan@boun.edu.tr; ayse.tosunmisirli@oulu.fi;
   ayse.bener@ryerson.ca; avm@ryerson.ca
RI Tosun, Ayse/B-4794-2014; Basar, Ayse/ABF-9265-2020
OI Tosun, Ayse/0000-0003-1859-7872; Basar, Ayse/0000-0003-4934-8326
FU Turkish State Planning Organization (DPT) [2007K120610]; NSERC
   [402003-2012]
FX This research is supported in part by Turkish State Planning
   Organization (DPT) under the Project Number 2007K120610 and by NSERC
   Project number 402003-2012. We would like to thank IBM Canada Lab -
   Toronto site for making their development data available for research
   and strategic help during all phases of this research. The opinions
   expressed in this paper are those of the authors and not necessarily of
   IBM Corporation.
CR Alpaydin E, 2004, INTRO MACHINE LEARNI
   [Anonymous], 2006, Data Analysis using Regression and Multilevel/Hierarchical Models, DOI DOI 10.1017/CBO9780511790942
   [Anonymous], 2007, Proceedings of the 3rd International Workshop on Predictor Models in Software Engineering
   [Anonymous], P 22 IEEE ACM INT C
   [Anonymous], 2006, ISESE '06: Proceedings of the 5th International Symposium on Empirical Software Engineering. Volume II: Short Papers and Posters, DOI DOI 10.1145/1159733.1159739.
   [Anonymous], 1991, IEEE Std.
   [Anonymous], 2006, P 28 INT C SOFTW ENG
   Bener A, 2012, AUTOMAT SOFTW ENG, V19, P137, DOI 10.1007/s10515-011-0095-y
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Brooks Frederick P., 1995, The mythical man-month
   Caglayan B., 2014, DSL 2014 02 METRIC D
   Caglayan B, 2010, P 6 INT C PRED MOD S
   Çaglayan B, 2009, 2009 ICSE WORKSHOP ON EMERGING TRENDS IN FREE-LIBRE-OPEN SOURCE SOFTWARE RESEARCH AND DEVELOPMENT, P31, DOI 10.1109/FLOSS.2009.5071357
   CHILLAREGE R, 1992, IEEE T SOFTWARE ENG, V18, P943, DOI 10.1109/32.177364
   Cotroneo D, 2013, J SYST SOFTWARE, V86, P1613, DOI 10.1016/j.jss.2013.02.020
   Cotroneo D, 2013, PERFORM EVALUATION, V70, P163, DOI 10.1016/j.peva.2012.09.004
   Di Fatta G., 2006, P 3 INT WORKSHOP SOF, P62, DOI DOI 10.1145/1188895.1188910
   Fagan ME, 1999, IBM SYST J, V38, P258, DOI 10.1147/sj.382.0258
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Jiang Y., 2008, DEFECTS 08 P 2008 WO, P16, DOI [DOI 10.1145/1390817.1390822, 10.1145/1390817.1390822]
   Kocaguneli Ekrem, 2009, Proceedings 21st International Conference on Software Engineering & Knowledge Engineering (SEKE 2009), P637
   Koru AG, 2010, IEEE SOFTWARE, V27, P81, DOI 10.1109/MS.2010.58
   Koru AG, 2009, IEEE T SOFTWARE ENG, V35, P293, DOI 10.1109/TSE.2008.90
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Leszak M, 2002, J SYST SOFTWARE, V61, P173, DOI 10.1016/S0164-1212(01)00146-7
   Li N., 2010, 2010 2 INT WORKSHOP, P1, DOI 10.1109/IWISA.2010.5473578
   Maloof M.A., 2003, WORKSHOP LEARNING IM
   Meneely A., 2008, P 16 ACM SIGSOFT INT, P13, DOI DOI 10.1145/1453101.1453106
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Misirli AT, 2013, IEEE SOFTWARE, V30, P54, DOI 10.1109/MS.2013.93
   Misirli AT, 2011, AI MAG, V32, P57, DOI 10.1609/aimag.v32i2.2348
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Nagappan Nachiappan, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P364
   Ostrand T.J., 2007, Proceedings of the 2007 international symposium on Software testing and analysis (ISSTA '07), P219
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Ostrand TJ., 2004, Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA '04, V29, P86, DOI [DOI 10.1145/1013886.1007524, 10.1145/1013886.1007524]
   Pressman R. S., 2010, Software Engineering: A Practitioner's Approach
   Ratzinger J, 2007, LECT NOTES COMPUT SC, V4422, P12
   Shull F, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P249, DOI 10.1109/METRIC.2002.1011343
   Stringfellow C, 2002, SOFTW TEST VERIF REL, V12, P93, DOI 10.1002/stvr.235
   Tosun A., 2009, P 5 INT C PRED MOD S, P1, DOI DOI 10.1145/1540438.1540446
   Turhan B, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P231
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Zimmermann T., 2007, PROMISE 07
   Zimmermann T, 2009, INT SYMP EMP SOFTWAR, P436
   Zimmermann T, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P531, DOI 10.1145/1368088.1368161
NR 49
TC 11
Z9 15
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2015
VL 23
IS 2
BP 205
EP 227
DI 10.1007/s11219-014-9230-x
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE2SN
UT WOS:000351667700001
DA 2024-07-18
ER

PT J
AU Bardsiri, VK
   Jawawi, DNA
   Hashim, SZM
   Khatibi, E
AF Bardsiri, Vahid Khatibi
   Jawawi, Dayang Norhayati Abang
   Hashim, Siti Zaiton Mohd
   Khatibi, Elham
TI A PSO-based model to increase the accuracy of software development
   effort estimation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Development effort estimation; Analogy-based estimation; Particle swarm
   optimization; Software project
ID PARTICLE SWARM OPTIMIZATION; GREY RELATIONAL ANALYSIS; COST ESTIMATION
   MODELS; GENETIC ALGORITHM; PROJECT EFFORT; FUZZY-LOGIC; ANALOGY; SEARCH;
   SELECTION
AB Development effort is one of the most important metrics that must be estimated in order to design the plan of a project. The uncertainty and complexity of software projects make the process of effort estimation difficult and ambiguous. Analogy-based estimation (ABE) is the most common method in this area because it is quite straightforward and practical, relying on comparison between new projects and completed projects to estimate the development effort. Despite many advantages, ABE is unable to produce accurate estimates when the importance level of project features is not the same or the relationship among features is difficult to determine. In such situations, efficient feature weighting can be a solution to improve the performance of ABE. This paper proposes a hybrid estimation model based on a combination of a particle swarm optimization (PSO) algorithm and ABE to increase the accuracy of software development effort estimation. This combination leads to accurate identification of projects that are similar, based on optimizing the performance of the similarity function in ABE. A framework is presented in which the appropriate weights are allocated to project features so that the most accurate estimates are achieved. The suggested model is flexible enough to be used in different datasets including categorical and non-categorical project features. Three real data sets are employed to evaluate the proposed model, and the results are compared with other estimation models. The promising results show that a combination of PSO and ABE could significantly improve the performance of existing estimation models.
C1 [Bardsiri, Vahid Khatibi; Jawawi, Dayang Norhayati Abang; Hashim, Siti Zaiton Mohd] Univ Technol Malaysia, Dept Software Engn, Skudai 81310, Johor Bahru, Malaysia.
   [Khatibi, Elham] Islamic Azad Univ, Bardsir Branch, Dept Comp Engn, Kerman, Iran.
C3 Universiti Teknologi Malaysia; Islamic Azad University
RP Jawawi, DNA (corresponding author), Univ Technol Malaysia, Dept Software Engn, Skudai 81310, Johor Bahru, Malaysia.
EM khatibi78@yahoo.com; dayang@utm.my
RI Bardsiri, Vahid Khatibi/A-5812-2013; Hashim, Siti Zaiton
   Mohd/AAE-5401-2020; Jawawi, Dayang N. A./A-7251-2013
OI Bardsiri, Vahid Khatibi/0000-0003-0694-956X; jawawi, dayang n.
   a./0000-0001-8300-8523
CR Abran A, 1996, IEEE T SOFTWARE ENG, V22, P895, DOI 10.1109/32.553638
   Ahmed MA, 2005, INFORM SOFTWARE TECH, V47, P31, DOI 10.1016/j.infsof.2004.05.004
   Alba E, 2007, INFORM SCIENCES, V177, P2380, DOI 10.1016/j.ins.2006.12.020
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Angelis L., 2000, Empirical Software Engineering, V5, P35, DOI 10.1023/A:1009897800559
   [Anonymous], 2010, INT J ENG SCI TECHNO
   [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], INT COMP S ICS TAIW
   [Anonymous], ROUGH SET THEORETICA
   [Anonymous], 7 ANN C EV PROGR
   [Anonymous], P ICNN 95 INT C NEUR
   [Anonymous], WORLD APPL SCI J
   Antoniol G, 2005, PROC IEEE INT CONF S, P240
   Attarzadeh I, 2011, COMM COM INF SC, V134, P18
   Azzeh M, 2010, EMPIR SOFTW ENG, V15, P60, DOI 10.1007/s10664-009-9113-0
   Bai Qinghai, 2010, COMPUTER INFORM SCI, V3, P180, DOI DOI 10.5539/CIS.V3N1P180
   Bakir A, 2011, SOFTWARE QUAL J, V19, P537, DOI 10.1007/s11219-010-9112-9
   Bakir A, 2010, SOFTWARE QUAL J, V18, P57, DOI 10.1007/s11219-009-9081-z
   Boehm BW, 2008, IEEE SOFTWARE, V25, P74, DOI 10.1109/MS.2008.133
   Boehm BW., 1981, Software Engineering Economics
   Breiman L, 1998, BIOMETRICS, DOI [10.1201/9781315139470, DOI 10.2307/2530946]
   Chiu NH, 2007, J SYST SOFTWARE, V80, P628, DOI 10.1016/j.jss.2006.06.006
   Clark JA, 2001, INFORM SOFTWARE TECH, V43, P891, DOI 10.1016/S0950-5849(01)00195-1
   DALKEY N, 1963, MANAGE SCI, V9, P458, DOI 10.1287/mnsc.9.3.458
   DENG JL, 1982, SYST CONTROL LETT, V1, P288, DOI 10.1016/S0167-6911(82)80025-X
   Ferrucci Filomena, 2010, 2010 Proceedings of Second International Symposium on Search Based Software Engineering (SSBSE), P89, DOI 10.1109/SSBSE.2010.20
   Greer D, 2004, INFORM SOFTWARE TECH, V46, P243, DOI 10.1016/j.infsof.2003.07.002
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Hayes W.L., 1994, Statistics, V5th
   Hsu CJ, 2011, SOFTWARE QUAL J, V19, P165, DOI 10.1007/s11219-010-9110-y
   Huang SJ, 2008, EUR J OPER RES, V188, P898, DOI 10.1016/j.ejor.2007.07.002
   Huang SJ, 2006, INFORM SOFTWARE TECH, V48, P1034, DOI 10.1016/j.infsof.2005.12.020
   Jianfeng W., 2009, INT C SOFTW ENG
   Jones C., 2007, Estimating Software Costs: Bringing Realism To Estimating
   Jorgensen M, 2003, J SYST SOFTWARE, V68, P253, DOI 10.1016/S0164-1212(03)00066-9
   Jorgensen M, 2010, J SYST SOFTWARE, V83, P29, DOI 10.1016/j.jss.2009.03.076
   Kadoda G., 2000, EXP US CAS BAS REAS
   Kennedy J., 2001, SWARM INTELLIGENCE
   Keung JW, 2008, IEEE T SOFTWARE ENG, V34, P471, DOI 10.1109/TSE.2008.34
   Khatibi Bardsiri V., 2012, SOFTWARE DEV EFFORT
   Khatibi V., 2011, Journal of Emerging Trends in Computing and Information Sciences, V2, P21
   Li JZ, 2008, INT J SOFTW ENG KNOW, V18, P1, DOI 10.1142/S0218194008003532
   Li JZ, 2008, EMPIR SOFTW ENG, V13, P63, DOI 10.1007/s10664-007-9054-4
   Li JZ, 2007, EMPIR SOFTW ENG, V12, P65, DOI 10.1007/s10664-006-7552-4
   Li YF, 2009, EMPIR SOFTW ENG, V14, P603, DOI 10.1007/s10664-008-9104-6
   Li YF, 2009, J SYST SOFTWARE, V82, P241, DOI 10.1016/j.jss.2008.06.001
   Li YF, 2008, 4 IEEE INT C MAN INN
   Li YF, 2007, INT C IND ENG ENG MA
   MATSON JE, 1994, IEEE T SOFTWARE ENG, V20, P275, DOI 10.1109/32.277575
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Mendes E, 2003, EMPIR SOFTW ENG, V8, P163, DOI 10.1023/A:1023062629183
   Mittas N, 2010, EMPIR SOFTW ENG, V15, P523, DOI 10.1007/s10664-010-9128-6
   Molokken-Ostvold K, 2005, EMPIR SOFTW ENG, V10, P7, DOI 10.1023/B:EMSE.0000048321.46871.2e
   Oliveira ALI, 2010, INFORM SOFTWARE TECH, V52, P1155, DOI 10.1016/j.infsof.2010.05.009
   Reddy P., 2011, INT J SOFTW ENG KNOW, V1, P12
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Sheta AF, 2010, INT J BIO-INSPIR COM, V2, P365, DOI 10.1504/IJBIC.2010.037016
   SHI YH, 1999, IEEE C EV COMP
   Song QB, 2011, EXPERT SYST APPL, V38, P7302, DOI 10.1016/j.eswa.2010.12.005
   Stepanek G., 2005, SOFTWARE PROJECT SEC
   Trelea IC, 2003, INFORM PROCESS LETT, V85, P317, DOI 10.1016/S0020-0190(02)00447-7
   Walkerden F., 1999, Empirical Software Engineering, V4, P135, DOI 10.1023/A:1009872202035
   Walkerden F., 1997, ADV COMPUT, V44, P59, DOI DOI 10.1016/S0065-2458(08)60337-X
NR 63
TC 51
Z9 52
U1 1
U2 25
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2013
VL 21
IS 3
BP 501
EP 526
DI 10.1007/s11219-012-9183-x
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 190LG
UT WOS:000322340900005
DA 2024-07-18
ER

PT J
AU Papadakis, M
   Malevris, N
AF Papadakis, Mike
   Malevris, Nicos
TI Automatically performing weak mutation with the aid of symbolic
   execution, concolic testing and search-based testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mutation testing; Weak mutation; Automated test case generation; Mutant
   schemata; Symbolic execution; Concolic execution; Search-based testing
AB Automating software testing activities can increase the quality and drastically decrease the cost of software development. Toward this direction, various automated test data generation tools have been developed. The majority of existing tools aim at structural testing, while a quite limited number aim at a higher level of testing thoroughness such as mutation. In this paper, an attempt toward automating the generation of mutation-based test cases by utilizing existing automated tools is proposed. This is achieved by reducing the killing mutants' problem into a covering branches one. To this extent, this paper is motivated by the use of state of the art techniques and tools suitable for covering program branches when performing mutation. Tools and techniques such as symbolic execution, concolic execution, and evolutionary testing can be easily adopted toward automating the test input generation activity for the weak mutation testing criterion by simply utilizing a special form of the mutant schemata technique. The propositions made in this paper integrate three automated tools in order to illustrate and examine the method's feasibility and effectiveness. The obtained results, based on a set of Java program units, indicate the applicability and effectiveness of the suggested technique. The results advocate that the proposed approach is able to guide existing automating tools in producing test cases according to the weak mutation testing criterion. Additionally, experimental results with the proposed mutation testing regime show that weak mutation is able to speedup the mutant execution time by at least 4.79 times when compared with strong mutation.
C1 [Papadakis, Mike; Malevris, Nicos] Athens Univ Econ & Business, Dept Informat, Athens, Greece.
C3 Athens University of Economics & Business
RP Malevris, N (corresponding author), Athens Univ Econ & Business, Dept Informat, Athens, Greece.
EM mpapad@aueb.gr; ngm@aueb.gr
OI Papadakis, Mike/0000-0003-1852-2547
CR Ammann Paul, 2008, Introduction to software testing, V1st
   Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], SOFTWARE
   [Anonymous], 2007, P 2007 INT S SOFTW T, DOI DOI 10.1145/1273463.1273475
   Ayari K, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1074
   Baluda Mauro., 2010, Proceedings of the 5th Workshop on Automation of Software Test (AST), P59
   Baresi Luciano, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P185, DOI 10.1109/ICST.2010.54
   Bottaci L., 2001, P INT WORKSH SOFTW E, P3
   Burnim Jacob., 2008, Proceedings of the 23rd IEEE/ACM International Conference on Automated Software Engineering, P443, DOI DOI 10.1109/ASE.2008.69
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   FRASER G, 2010, P 19 INT S SOFTW TES, P147, DOI DOI 10.1145/1831708.1831728
   HAMLET RG, 1977, IEEE T SOFTWARE ENG, V3, P279, DOI 10.1109/TSE.1977.231145
   HARROLD J, 2010, SIEMENS PROGRAMS
   HOWDEN WE, 1982, IEEE T SOFTWARE ENG, V8, P371, DOI 10.1109/TSE.1982.235571
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   KING KN, 1991, SOFTWARE PRACT EXPER, V21, P685, DOI 10.1002/spe.4380210704
   Lakhotia K., 2010, 2010 Proceedings of Second International Symposium on Search Based Software Engineering (SSBSE), P101, DOI 10.1109/SSBSE.2010.21
   LI N, 2009, P 4 INT WORKSH MUT A, P220, DOI DOI 10.1109/ICSTW.2009.30
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Maldonado JC, 2001, KLUW INT S ADV DATA, V24, P113
   MASTORANTONAKIS M, 2003, P IASTED INT C SOFTW, V7, P252
   Offutt A. J., 1992, ACM Transactions on Software Engineering and Methodology, V1, P5, DOI 10.1145/125489.125473
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   Offutt AJ, 2001, KLUW INT S ADV DATA, V24, P34
   OFFUTT AJ, 1994, IEEE T SOFTWARE ENG, V20, P337, DOI 10.1109/32.286422
   Offutt AJ, 1999, SOFTWARE PRACT EXPER, V29, P167, DOI 10.1002/(SICI)1097-024X(199902)29:2<167::AID-SPE225>3.0.CO;2-V
   Offutt J., 1996, SUBSUMPTION CONDITIO
   Papadakis Mike, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P121, DOI 10.1109/ISSRE.2010.38
   Papadakis Mike, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P90, DOI 10.1109/ICSTW.2010.50
   Papadakis M, 2009, ASIA PAC SOFWR ENG, P422, DOI 10.1109/APSEC.2009.68
   Papadakis Mike, 2010, P 5THWORKSHOP AUTOMA, P111, DOI DOI 10.1145/1808266.1808283
   Pasareanu Corina S., 2008, P 2008 INT S SOFTW T, P15, DOI [DOI 10.1145/1390630.1390635, DOI 10.1145/1390630]
   Polo M, 2009, SOFTW TEST VERIF REL, V19, P111, DOI 10.1002/stvr.392
   Schuler David, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P45, DOI 10.1109/ICST.2010.30
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Smith BH, 2009, EMPIR SOFTW ENG, V14, P341, DOI 10.1007/s10664-008-9083-7
   Tonella P., 2004, Software Engineering Notes, V29, P119, DOI 10.1145/1013886.1007528
   UNTCH R, 1993, P 1993 INT S SOFTW T, P139, DOI DOI 10.1145/154183.154265
   Visser W., 2004, P 2004 ACM SIGSOFT I, P97, DOI [DOI 10.1145/1007512.1007526, 10.1145/1007512.1007526]
   YATES DF, 1989, ACM SIGSOFT, V14, P48, DOI 10.1145/75309.75315
NR 43
TC 52
Z9 65
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2011
VL 19
IS 4
SI SI
BP 691
EP 723
DI 10.1007/s11219-011-9142-y
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 814RN
UT WOS:000294474900005
DA 2024-07-18
ER

PT J
AU Hsu, CJ
   Huang, CY
AF Hsu, Chao-Jung
   Huang, Chin-Yu
TI Comparison of weighted grey relational analysis for software effort
   estimation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software effort estimation; Grey relational analysis (GRA); Weighted
   assignment; Software development effort; Software cost
ID COST ESTIMATION; ANALOGY; SELECTION
AB In recent years, grey relational analysis (GRA), a similarity-based method, has been proposed and used in many applications. However, we found that most traditional GRA methods only consider nonweighted similarity for predicting software development effort. In fact, nonweighted similarity may cause biased predictions, because each feature of a project may have a different degree of relevance to the development effort. Therefore, this paper proposes six weighted methods, including nonweighted, distance-based, correlative, linear, nonlinear, and maximal weights, to be integrated into GRA for software effort estimation. Numerical examples and sensitivity analyses based on four public datasets are used to show the performance of the proposed methods. The experimental results indicate that the weighted GRA can improve estimation accuracy and reliability from the nonweighted GRA. The results also demonstrate that the weighted GRA performs better than other estimation techniques and published results. In summary, we can conclude that weighted GRA can be a viable and alternative method for predicting software development effort.
C1 [Hsu, Chao-Jung; Huang, Chin-Yu] Natl Tsing Hua Univ, Dept Comp Sci, Hsinchu 30043, Taiwan.
C3 National Tsing Hua University
RP Huang, CY (corresponding author), Natl Tsing Hua Univ, Dept Comp Sci, Hsinchu 30043, Taiwan.
EM cyhuang@cs.nthu.edu.tw
FU National Science Council, Taiwan [NSC 97-2221-E-007-052-MY3, NSC
   98-2221-E-007-067]; Ministry of Economic Affairs of Taiwan
   [98-EC-17-A-02-S2-0097]
FX The work described in this paper was supported by the National Science
   Council, Taiwan, under Grant NSC 97-2221-E-007-052-MY3 and NSC
   98-2221-E-007-067, and also substantially supported by a grant from the
   Ministry of Economic Affairs of Taiwan (Project No.
   98-EC-17-A-02-S2-0097). The authors would like to thank several
   anonymous reviewers for their critical reviews and in-depth comments
   that helped to improve this paper. Thanks are also given to Amber Tsai,
   Prof. Nan-Hsing Chiu, and Prof. Swe-Kai Chen of National Tsing Hua
   University for their comments to enhance the quality of the paper.
CR Agrawal M, 2007, IEEE T SOFTWARE ENG, V33, P145, DOI 10.1109/TSE.2007.29
   [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], P 3 INT C MAN INN TE
   [Anonymous], SOFTWARE METRICS DIS
   [Anonymous], CMUSEI2002TR011
   [Anonymous], P 22 INT ANN FOR COC
   [Anonymous], P 14 AS PAC SOFTW EN
   [Anonymous], THESIS U MONTREAL QC
   [Anonymous], DAT REP
   [Anonymous], P 11 INT S SOFTW MET
   [Anonymous], P 5 INT S EMP SOFTW
   [Anonymous], TR0001 BOURN U EMP S
   [Anonymous], THEORY APPROACH GREY
   [Anonymous], 2008, Proceedings of the 4th international workshop on Predictor models in software engineering, DOI [DOI 10.1145/1370788.1370804, 10.1145/1370788.1370804]
   [Anonymous], P 7 INT S SOFTW METR
   [Anonymous], P 14 AS PAC SOFTW EN
   [Anonymous], APPL MATLAB GREY SYS
   [Anonymous], P 11 INT S SOFTW MET
   [Anonymous], 1995, ANN SOFTW ENG
   Auer M, 2006, IEEE T SOFTWARE ENG, V32, P83, DOI 10.1109/TSE.2006.1599418
   Benediktsson O, 2003, SOFTWARE QUAL J, V11, P265, DOI 10.1023/A:1025809010217
   Boehm BW., 1981, Software Engineering Economics
   Briand L. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P377, DOI 10.1109/ICSE.2000.870428
   Chen ZH, 2005, IEEE SOFTWARE, V22, P38, DOI 10.1109/MS.2005.151
   Chiu NH, 2007, J SYST SOFTWARE, V80, P628, DOI 10.1016/j.jss.2006.06.006
   Cuadrado-Gallego JJ, 2006, SOFTWARE QUAL J, V14, P339, DOI 10.1007/s11219-006-0039-0
   DENG JL, 1982, SYST CONTROL LETT, V1, P288, DOI 10.1016/S0167-6911(82)80025-X
   Deng Julong, 1989, Journal of Grey Systems, V1, P1
   Dolado JJ, 2001, INFORM SOFTWARE TECH, V43, P61, DOI 10.1016/S0950-5849(00)00137-3
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Foss T, 2003, IEEE T SOFTWARE ENG, V29, P985, DOI 10.1109/TSE.2003.1245300
   Freedman D., 1997, Statistics, V3rd
   Hogg RV, 1995, INTRO MATH STAT
   Huang SJ, 2006, INFORM SOFTWARE TECH, V48, P1034, DOI 10.1016/j.infsof.2005.12.020
   Jeffery R, 2000, INFORM SOFTWARE TECH, V42, P1009, DOI 10.1016/S0950-5849(00)00153-1
   Jorgensen M, 2003, J SYST SOFTWARE, V68, P253, DOI 10.1016/S0164-1212(03)00066-9
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Leung H. K. N., 2002, Empirical Software Engineering, V7, P157, DOI 10.1023/A:1015202115651
   Li JZ, 2007, EMPIR SOFTW ENG, V12, P65, DOI 10.1007/s10664-006-7552-4
   Li YF, 2009, EXPERT SYST APPL, V36, P5921, DOI 10.1016/j.eswa.2008.07.062
   Li YF, 2009, J SYST SOFTWARE, V82, P241, DOI 10.1016/j.jss.2008.06.001
   Lima OD, 2003, SOFTWARE QUAL J, V11, P149, DOI 10.1023/A:1023716628585
   Liu Q, 2008, SOFTWARE QUAL J, V16, P411, DOI 10.1007/s11219-007-9041-4
   Liu S., 2006, GREY INFORM THEORY P
   Marir F., 1994, Knowledge Engineering Review, V9, P355, DOI 10.1017/S0269888900007104
   Mendes E, 2002, P INT COMP SOFTW APP, P393, DOI 10.1109/CMPSAC.2002.1045034
   Mendes E, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P131, DOI 10.1109/METRIC.2002.1011332
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Port D, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P51
   Samson B, 1997, INFORM SOFTWARE TECH, V39, P55, DOI 10.1016/0950-5849(96)01124-X
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   SRINIVASAN K, 1995, IEEE T SOFTWARE ENG, V21, P126, DOI 10.1109/32.345828
   Walkerden F., 1999, Empirical Software Engineering, V4, P135, DOI 10.1023/A:1009872202035
NR 54
TC 43
Z9 44
U1 2
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2011
VL 19
IS 1
SI SI
BP 165
EP 200
DI 10.1007/s11219-010-9110-y
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TY
UT WOS:000286465500008
DA 2024-07-18
ER

PT J
AU Guéhéneuc, YG
   Guyomarc'h, JY
   Sahraoui, H
AF Gueheneuc, Yann-Gael
   Guyomarc'h, Jean-Yves
   Sahraoui, Houari
TI Improving design-pattern identification: a new approach and an
   exploratory study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Program understanding; Design patterns; Explanation-based constraint
   programming; Metrics; Exploratory study
ID SOFTWARE
AB The identification of occurrences of design patterns in programs can help maintainers to understand the program design and implementation. It can also help them to make informed changes. Current identification approaches are limited to complete occurrences, are time- and resource-consuming, and lead to many false positives. We propose to combine a structural and a numerical approach to improve the identification of complete and incomplete occurrences of design patterns. We develop a structural approach using explanation-based constraint programming and we enhance this approach using experimentally built numerical signatures. We show that the use of numerical signatures improves the identification of complete and incomplete occurrences in terms of performance and precision.
C1 [Gueheneuc, Yann-Gael] Ecole Polytech, Ptidej Team, Montreal, PQ H3C 3A7, Canada.
   [Guyomarc'h, Jean-Yves; Sahraoui, Houari] Univ Montreal, GEODES, DIRO, Montreal, PQ, Canada.
C3 Universite de Montreal; Polytechnique Montreal; Universite de Montreal
RP Guéhéneuc, YG (corresponding author), Ecole Polytech, Ptidej Team, Montreal, PQ H3C 3A7, Canada.
EM yann-gael.gueheneuc@polymtl.ca; jy.guyomarch@gmail.com;
   sahraouh@iro.umontreal.ca
RI Guéhéneuc, Yann-Gaël/K-9371-2019
CR Albin-Amiot H, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P166, DOI 10.1109/ASE.2001.989802
   [Anonymous], 1994, Object-oriented software metrics: a practical guide
   Antoniol G, 1998, PROG COMPREHEN, P153, DOI 10.1109/WPC.1998.693342
   Bansiya J., 1998, DOBBS J
   Bayardo RJ, 1996, PROCEEDINGS OF THE THIRTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE EIGHTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE, VOLS 1 AND 2, P298
   Beyer D, 2005, IEEE T SOFTWARE ENG, V31, P137, DOI 10.1109/TSE.2005.23
   Bieman JM, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P40, DOI 10.1109/METRIC.2003.1232454
   BOEHM BW, 1976, IEEE T COMPUT, V25, P1226, DOI 10.1109/TC.1976.1674590
   Briand L, 1997, PROC INT CONF SOFTW, P412, DOI 10.1145/253228.253367
   Briand LC, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P43, DOI 10.1109/METRIC.1997.637164
   BROWN K, 1996, TR9607 U ILL URB DEP
   Chidamber Shyam R., 1993, E53315 MIT SLOAN SCH
   Ciupke O., 1999, Proceedings of Technology of Object-Oriented Languages and Systems - TOOLS 30 (Cat. No.PR00278), P18, DOI 10.1109/TOOLS.1999.787532
   CORBI TA, 1989, IBM SYST J, V28, P294, DOI 10.1147/sj.282.0294
   EPPSTEIN D, 1995, PROCEEDINGS OF THE SIXTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P632
   Fabry J, 2004, COMPUT LANG SYST STR, V30, P21, DOI 10.1016/j.cl.2003.09.002
   Frank E., 1999, Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations
   Gamma Erich., 1994, DESIGN PATTERNS
   Gamma Erich, 1998, JHOTDRAW
   Guéhéneuc YG, 2008, IEEE T SOFTWARE ENG, V34, P667, DOI 10.1109/TSE.2008.48
   Guéhéneuc YG, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P172, DOI 10.1109/WCRE.2004.21
   Guéhéneuc YG, 2001, TOOLS, V39, P296, DOI 10.1109/TOOLS.2001.941682
   GUEHENEUC YG, 2001, P 1 IJCAI WORKSH MOD, P57
   GUEHENEUC YG, 2004, P 19 C OBJ OR PROGR, P301
   HEUZEROTH D, 2002, P 6 WORLD C INT DES
   Hitz M., 1995, International Symposium on Applied Corporate Computing, P25
   JAHNKE JH, 1997, P 1 ESEC FSE WORKSH
   JUNKER U, 2001, QUICKXPLAIN CONFLICT
   JUSSIEN N, 2000, P TRICS TECHN IMPL C, P118
   Keller R. K., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P226, DOI 10.1109/ICSE.1999.841012
   Kohavi R., 1995, P 14 INT JOINT C ART, P1137
   Koskinen Jussi, 2004, SOFTWARE MAINTENANCE
   Kramer C, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P208, DOI 10.1109/WCRE.1996.558905
   LABUTHE F, 2000, P 1 WORKSH TECHN IMP
   NG KY, 2007, P 3 INT WORKSH PROGR, P34
   Quilici A, 1997, J AUTOMATED SOFTWARE, V5, P347
   SCHEGLOV K, 2004, ECLIPSE PROFILER
   Schiex T., 1994, International Journal on Artificial Intelligence Tools (Architectures, Languages, Algorithms), V3, P187, DOI 10.1142/S0218213094000108
   Spinellis D., 2003, Code Reading: The Open Source Perspective
   STONE M, 1974, J R STAT SOC B, V36, P111, DOI 10.1111/j.2517-6161.1974.tb00994.x
   STRAW GB, 2004, THESIS COLORADO STAT
   TEGARDEN DP, 1995, DECIS SUPPORT SYST, V13, P241, DOI 10.1016/0167-9236(93)E0045-F
   Tsantalis N, 2006, IEEE T SOFTWARE ENG, V32, P896, DOI 10.1109/TSE.2006.112
   WILDE N, 1994, CSE301
   Wuyts R, 1998, TOOLS 26 - TECHNOLOGY OF OBJECT-ORIENTED LANGUAGES - PROCEEDINGS, P112, DOI 10.1109/TOOLS.1998.711007
NR 45
TC 31
Z9 42
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2010
VL 18
IS 1
BP 145
EP 174
DI 10.1007/s11219-009-9082-y
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 546JH
UT WOS:000273806600007
DA 2024-07-18
ER

PT J
AU Fluri, B
   Würsch, M
   Giger, E
   Gall, HC
AF Fluri, Beat
   Wuersch, Michael
   Giger, Emanuel
   Gall, Harald C.
TI Analyzing the co-evolution of comments and source code
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 14th Working Conference on Reverse Engineering
CY OCT 28-31, 2007
CL Vancouver, CANADA
SP Reengn Forum, IEEE Comp Soc, Techn Council Ctr Software, Res Ctr Software Technol, German Soc Comp Sci, Software Reengn Interest Grp, Modelsoft Corp Inc, Kent State Univ
DE Software evolution analysis; Software repositories; Source code changes;
   Comment changes; Comment quality; Software maintenance
ID PROGRAM READABILITY
AB Source code comments are a valuable instrument to preserve design decisions and to communicate the intent of the code to programmers and maintainers. Nevertheless, commenting source code and keeping comments up-to-date is often neglected for reasons of time or programmers obliviousness. In this paper, we investigate the question whether developers comment their code and to what extent they add comments or adapt them when they evolve the code. We present an approach to associate comments with source code entities to track their co-evolution over multiple versions. A set of heuristics are used to decide whether a comment is associated with its preceding or its succeeding source code entity. We analyzed the co-evolution of code and comments in eight different open source and closed source software systems. We found with statistical significance that (1) the relative amount of comments and source code grows at about the same rate; (2) the type of a source code entity, such as a method declaration or an if-statement, has a significant influence on whether or not it gets commented; (3) in six out of the eight systems, code and comments co-evolve in 90% of the cases; and (4) surprisingly, API changes and comments do not co-evolve but they are re-documented in a later revision. As a result, our approach enables a quantitative assessment of the commenting process in a software system. We can, therefore, leverage the results to provide feedback during development to increase the awareness of when to add comments or when to adapt comments because of source code changes.
C1 [Fluri, Beat; Wuersch, Michael; Giger, Emanuel; Gall, Harald C.] Univ Zurich, Dept Informat, Zurich, Switzerland.
C3 University of Zurich
RP Fluri, B (corresponding author), Univ Zurich, Dept Informat, Zurich, Switzerland.
EM fluri@ifi.uzh.ch
OI Gall, Harald/0000-0002-3874-5628
CR Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Baresi L, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1276933.1276936
   Bevan J., 2005, P 10 EUR SOFTW ENG C, P177, DOI DOI 10.1145/1081706.1081736
   Demeyer S., 2003, OBJECT ORIENTED REEN
   des Riviéres J, 2004, IBM SYST J, V43, P371, DOI 10.1147/sj.432.0371
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   ELSHOFF JL, 1982, COMMUN ACM, V25, P512, DOI 10.1145/358589.358596
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Fluri B, 2007, IEEE T SOFTWARE ENG, V33, P725, DOI 10.1109/TSE.2007.70731
   Fluri B, 2006, INT C PROGRAM COMPRE, P35, DOI 10.1109/ICPC.2006.16
   GOLDBERG A, 1987, IEEE SOFTWARE, V4, P62, DOI 10.1109/MS.1987.231775
   HYATT L, 1996, ESA 1996 PROD ASS S, P209
   JIANG ZM, 2006, P 2006 INT WORKSH MI, P179
   KAELBLING MJ, 1988, SIGPLAN NOTICES, V23, P59, DOI 10.1145/51607.51609
   LAKHOTIA A, 1993, J SYST SOFTWARE, V23, P269, DOI 10.1016/0164-1212(93)90101-3
   Lawrie DJ, 2006, INT C PROGRAM COMPRE, P149, DOI 10.1109/ICPC.2006.34
   Lucia A. D., 2007, ACM T SOFTW ENG METH, V16, P50
   LUCIA AD, 2006, P 14 INT C PROGR COM, P317
   Marchal D, 2003, J STRUCT GEOL, V25, P135, DOI 10.1016/S0191-8141(02)00011-1
   Marcus A, 2005, PROC IEEE INT CONF S, P133
   Schreck D., 2007, 9 INT WORKSHOP PRINC, P4
   Spinellis D., 2006, Code Quality: The Open Source Perspective
   Tan Lin., 2007, P 21 ACM SIGOPS S OP, P145, DOI DOI 10.1145/1294261.1294276
   TENNY T, 1988, IEEE T SOFTWARE ENG, V14, P1271, DOI 10.1109/32.6171
   Van de Vanter ML, 2002, INFORM SOFTWARE TECH, V44, P767, DOI 10.1016/S0950-5849(02)00103-9
   Witte R, 2007, LECT NOTES COMPUT SC, V4519, P37
   Yin R.K., 2011, Qualitative research from start to finish
   Ying A. T., 2005, ACM SIGSOFT software engineering notes, V30, P1
   Zimmermann T, 2005, IEEE T SOFTWARE ENG, V31, P429, DOI 10.1109/TSE.2005.72
NR 29
TC 47
Z9 54
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2009
VL 17
IS 4
SI SI
BP 367
EP 394
DI 10.1007/s11219-009-9075-x
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 490VR
UT WOS:000269536600004
DA 2024-07-18
ER

PT J
AU Moses, J
AF Moses, John
TI Should we try to measure software quality attributes directly?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Subjective software quality attributes; Direct measurement; Consistent
   measurement; Distribution principle; Minimum rejection principle;
   Bayesian inference; Statistical theory for subjective measurement
AB Most external software quality attributes are conceptually subjective. For example, maintainability is an external software quality attribute, and it is subjective because interpersonally agreed definitions for the attribute include the phrase 'the ease with which maintenance tasks can be performed'. Subjectivity clearly makes measurement of the attributes and validation of prediction systems for the attributes problematic. In fact, in spite of the definitions, few statistically valid attempts at determining the predictive capability of prediction systems for external quality attributes have been published. When validations have been attempted, one approach used is to ask experts to indicate if the values provided by the prediction system informally agree with the experts' intuition. These attempts are undertaken without determining, independently of the prediction system, whether the experts are capable of direct consistent measurement of the attribute. Hence, a statistically valid and unbiased estimate of the predictive capability of the prediction system cannot be obtained (because the experts' measurement process is not independent of the prediction system's values). In this paper, it is argued that the problem of subjective measurement of quality attributes should not be ignored if quality is to be introduced into software in a controlled way. Further, it is argued that direct measurement of quality attributes should be encouraged and that in fact such measurement can be quantified to establish consistency using an existing approach. However, the approach needs to be made more accessible to promote its use. In so doing, it would be possible to decide whether consistent independent estimates of the true values of software quality attributes can be assigned and prediction systems for quality attributes developed.
C1 [Moses, John] Univ Teesside, Middlesbrough, Cleveland, England.
   [Moses, John] Univ Humberside, Kingston Upon Hull HU6 7TR, N Humberside, England.
   [Moses, John] Univ Sunderland, Sunderland SR2 7EE, Durham, England.
C3 University of Teesside; University of Lincoln; University of Sunderland
RP Moses, J (corresponding author), Univ Teesside, Middlesbrough, Cleveland, England.
EM johnmoses@acm.org
CR Altman DG., 1996, PRACTICAL STAT MED R, V7th
   [Anonymous], 1996, Bugs 0.5: Bayesian inference using Gibbs sampling, manual (version ii)
   BAKER AL, 1990, J SYST SOFTWARE, V12, P277, DOI 10.1016/0164-1212(90)90050-V
   Bland JM, 1997, BRIT MED J, V314, P572, DOI 10.1136/bmj.314.7080.572
   Boehm B.W., 1978, Characteristics of Software Quality
   CONIAM SW, 1995, PRACTICAL PAIN MANAG
   Cronbach LJ, 1951, PSYCHOMETRIKA, V16, P297
   Dawid A. P., 1979, J ROY STAT SOC C, V28, P20, DOI DOI 10.2307/2346806
   Domhoff GW, 1999, DREAMING, V9, P115, DOI 10.1023/A:1021325331276
   FENTON N, 1994, IEEE T SOFTWARE ENG, V20, P199, DOI 10.1109/32.268921
   Fenton NE, 1998, IEEE T SOFTWARE ENG, V24, P1002, DOI 10.1109/32.730547
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Gilb T., 1977, SOFTWARE METRICS
   Hughes RT, 1996, INFORM SOFTWARE TECH, V38, P67, DOI 10.1016/0950-5849(95)01045-9
   ISO/IEC, 2001, Technical Report, V1st
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   Kitchenham B., 2003, ACM SIGSOFT SOFTW EN, V28, P24, DOI DOI 10.1145/638750.638758
   KITCHENHAM BA, 1989, SOFTWARE ENG J, V4, P2, DOI 10.1049/sej.1989.0001
   Kyburg HenryE., 1984, THEORY MEASUREMENT
   Little R. J. A., 2019, Statistical Analysis with Missing Data, V793
   McCall J.A., 1977, CONCEPTS DEFINITIONS, Vi
   MELTON A, 1990, IEE BCS SOFTWARE ENG, V5, P246
   Moses J, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P112, DOI 10.1109/METRIC.2001.915520
   Moses J, 2000, INFORM SOFTWARE TECH, V42, P533, DOI 10.1016/S0950-5849(00)00097-5
   Moses J, 2008, EMPIR SOFTW ENG, V13, P261, DOI 10.1007/s10664-007-9058-0
   Moses J, 2007, SOFTWARE QUAL J, V15, P449, DOI 10.1007/s11219-007-9025-4
   Pendharkar PC, 2005, IEEE T SOFTWARE ENG, V31, P615, DOI 10.1109/TSE.2005.75
   ROBERTS FS, 1979, MEASUREMENT THEORY E, V7
   ROSENBERG J, 1997, J EMPIRICAL SOFTWARE, V2, P173
   West Ryan., 2006, P SIGCHI C HUMAN FAC, P631
   WILSON ME, 1980, BRIT MED J, V280, P509, DOI 10.1136/bmj.280.6213.509
   Yu LG, 2004, IEEE T SOFTWARE ENG, V30, P694, DOI 10.1109/TSE.2004.58
   [No title captured]
NR 33
TC 8
Z9 11
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2009
VL 17
IS 2
BP 203
EP 213
DI 10.1007/s11219-008-9071-6
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 428YB
UT WOS:000264886900007
DA 2024-07-18
ER

PT J
AU Torre, D
   Genero, M
   Labiche, Y
   Elaasar, M
AF Torre, Damiano
   Genero, Marcela
   Labiche, Yvan
   Elaasar, Maged
TI How consistency is handled in model-driven software engineering and UML:
   an expert opinion survey
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-driven software engineering; Unified modelling language; MDSE
   consistency; UML consistency rules; Personal opinion survey; Empirical
   study
ID VERIFICATION; CHECKING
AB Model-driven software engineering (MDSE) is an established approach for developing complex software systems. The unified modelling language (UML) is one of the most used model languages for applying the MDSE approach. UML has 14 diagram types that describe different perspectives of a software system under development. These diagrams are strongly dependent on each other and must be consistent with one another. The main objectives of this paper are as follows: (1) to understand (i) how aware experts are of model consistency issues and (ii) how relevant these issues are to experts, in order to understand model consistency in the MDSE/UML contexts, and more importantly, (2) to validate a set of 116 UML consistency rules that was systematically collected from the literature, so as to identify the rules that should always be enforced. We conducted a personal opinion survey with 106 experts in SE and MDSE, by means of an online questionnaire. The survey results describe an overview of how the topic of MDSE/UML consistency is handled by experts in the field. In addition, this survey identified a set of 52 UML consistency rules which should always be checked in every UML diagram. The majority of these 52 rules were understood by the majority of respondents and are general-purpose rules that are involved in the Design software development phase. This subset of 52 rules could be considered to be (1) added to the UML standard, (2) used as a reference to researchers who study UML/MDSE, and (3) used as a practical example for teaching purposes.
C1 [Torre, Damiano] A&M Univ Cent Texas, Killeen, TX 76549 USA.
   [Genero, Marcela] Univ Castilla La Mancha, Ciudad Real, Spain.
   [Labiche, Yvan; Elaasar, Maged] Carleton Univ, Ottawa, ON, Canada.
C3 Universidad de Castilla-La Mancha; Carleton University
RP Torre, D (corresponding author), A&M Univ Cent Texas, Killeen, TX 76549 USA.
EM damiano.torre@tamuct.edu; marcela.genero@uclm.es;
   yvanlabiche@cunet.carleton.ca; melaasar@gmail.com
RI Torre, Damiano/KHC-4702-2024
OI Torre, Damiano/0000-0002-1656-3057
FU Natural Sciences and Engineering Research Council of Canada; GEMA
   project ("Consejeria de Educacion, Cultura y Deporte de la Direccion
   General de Universidades, Investigacion e Innovacion de la JCCM)
   [SBPLY/17/180501/000293, PID2020-112540RB-C42]; 
   [MCIN/AEI/10.13039/501100011033/]
FX This research has been funded by the Natural Sciences and Engineering
   Research Council of Canada as well as the GEMA project ("Consejeria de
   Educacion, Cultura y Deporte de la Direccion General de Universidades,
   Investigacion e Innovacion de la JCCM", SBPLY/17/180501/000293),
   PID2020-112540RB-C42, AETHER-UCLM (A smart data holistic approach for
   context-aware data analytics), funded by
   MCIN/AEI/10.13039/501100011033/.
CR Ahmad M. A., 2010, 6 INT C EM TECHN ISL
   Akdur D., 2015, TECHNICAL REPORT MET
   Allaki Driss, 2017, Journal of Software, V12, P454, DOI 10.17706/jsw.12.6.454-471
   [Anonymous], 2005, SOFTWARE EVOLUTION U
   [Anonymous], 2005, UML 2 0 UNIFIED PROC
   [Anonymous], 2010, 5 WORKSH COD CENTR M
   Briand L. C., 2008, 1 WORKSH EMP STUD MO
   Briand LC, 2003, PROC IEEE INT CONF S, P256, DOI 10.1109/ICSM.2003.1235428
   Burgueño L, 2019, SOFTW SYST MODEL, V18, P3193, DOI 10.1007/s10270-019-00746-9
   Cabot J., 2016, MODEL DRIVEN SOFTWAR, V2nd
   Cicchetti A, 2019, SOFTW SYST MODEL, V18, P3207, DOI 10.1007/s10270-018-00713-w
   Dobing B, 2006, COMMUN ACM, V49, P109, DOI 10.1145/1125944.1125949
   Dragomir I., 2015, CEUR WORKSHOP PROC, V1508
   Elaasar M., 2020, 8 INT C FORM METH SO
   Engels G., 2001, Software Engineering Notes, V26, P186, DOI 10.1145/503271.503235
   Engels G., 2002, INTEGRATED DESIGN PR
   Eun-suk K., 2008, ADV SOFTW ENG ITS AP
   Fernández-Sáez AM, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P292, DOI 10.1109/MODELS.2015.7338260
   Frankel D.S., 2003, Model Driven Architecture: Applying MDA to Enterprise Computing
   Genero M, 2011, J DATABASE MANAGE, V22, P46, DOI 10.4018/jdm.2011070103
   Groves R.M., 2009, Survey Methodology, V2nd
   Gutbrod R., 2012, SOFTWARE DILEMMA BAL
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Heckel R., 2001, 4 INT C UN MOD LANG
   Hunt J., 2003, Guide to the unified process featuring UML, Java, and design patterns
   Hutchinson J, 2014, SCI COMPUT PROGRAM, V89, P144, DOI 10.1016/j.scico.2013.03.017
   Huzar Z, 2005, LECT NOTES COMPUT SC, V3297, P1
   Ibrahim N., 2011, International Journal of Software Engineering and Its Applications, V5, P119
   *IEEE, 1992, 10121986 IEEE
   Jedlitschka A., 2007, INT S EMP SOFTW ENG
   Kalibatiene D, 2013, LECT NOTES BUS INF P, V161, P1
   Kitchenham B., 2015, Evidence-Based Software Engineering and Systematic Reviews
   Kitchenham B., 2007, GUIDELINES PERFORMIN
   Kitchenham BA, 2008, Guide to advanced empirical software engineering, P63, DOI [DOI 10.1007/978-1-84800-044-5_3, 10.1007/ 978-1-84800-044-5_3]
   Knapp, 2018, GRAPH TRANSFORMATION, V10800
   Krosnick JA, 1999, ANNU REV PSYCHOL, V50, P537, DOI 10.1146/annurev.psych.50.1.537
   Labiche Y, 2009, LECT NOTES COMPUT SC, V5421, P375, DOI 10.1007/978-3-642-01648-6_39
   Lethbridge T., 2015, 18 ACM IEEE INT C MO
   Linaker J., 2015, TR5366801 LUND U
   Lucas FJ, 2009, INFORM SOFTWARE TECH, V51, P1631, DOI 10.1016/j.infsof.2009.04.009
   Maxwell JA, 2010, QUAL INQ, V16, P475, DOI 10.1177/1077800410364740
   Mukerji J., 2003, OVERVIEW GUIDE OMGS
   Muskens J, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P169
   NATO, 1968, C SPONS NATO SCI COM
   OMG, 2015, OMG UN MOD LANGUAGET
   OMG, 2016, OBJ MAN GROUP OCL
   Paige RF, 2005, ELECTRON NOTES THEOR, V137, P151, DOI 10.1016/j.entcs.2005.04.029
   Panesar-Walawege RK, 2013, INFORM SOFTWARE TECH, V55, P836, DOI 10.1016/j.infsof.2012.11.009
   Pap Z, 2005, RELIAB ENG SYST SAFE, V87, P89, DOI 10.1016/j.ress.2004.04.011
   Pender T., 2003, UML BIBLE
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   Pilskalns O, 2006, P INT COMP SOFTW APP, P351
   Pinsonneault A., 1993, Journal of Management Information Systems, V10, P75
   Punter T, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P80, DOI 10.1109/ISESE.2003.1237967
   Qu HY, 2016, ROBOT AUTON SYST, V83, P44, DOI 10.1016/j.robot.2016.06.005
   Reggio G., 2013, EESSMOD@ MoDELS, V1078
   Rodríguez P, 2012, INT SYMP EMP SOFTWAR, P139, DOI 10.1145/2372251.2372275
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   Scanniello G, 2010, ICEIS 2010: PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 3: INFORMATION SYSTEMS ANALYSIS AND SPECIFICATION, P141
   Song I-Y., 2008, 27 INT C CONC MOD BA
   Spanoudakis G., 2001, HDB SOFTWARE ENG KNO, V1, P329
   Thomas D, 2004, IEEE SOFTWARE, V21, P15, DOI 10.1109/MS.2004.1293067
   Torre, 2014, DOCT S 18 INT C EV A
   Torre D., 2016, SIGSOFT SOFTW ENG NO, V41, P34, DOI [10.1145/2894784.2894801, DOI 10.1145/2894784]
   Torre D., 2014, 18 INT C EV ASS SOFT
   Torre D, 2016, IEEE INT SYMP SOFTW, P53, DOI 10.1109/ISSREW.2016.32
   Torre D, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2019), P1, DOI 10.1109/MODELS.2019.00-20
   Torre D, 2018, J SYST SOFTWARE, V144, P121, DOI 10.1016/j.jss.2018.06.029
   Torres W, 2021, SOFTW SYST MODEL, V20, P897, DOI 10.1007/s10270-020-00834-1
   Van Der Straeten Ragnhild., 2004, J SERIE LOBJET LOGIC, P231, DOI [10.3166/objet.10.2-3.231-244, DOI 10.3166/OBJET.10.2-3.231-244]
   Agner LTW, 2013, J SYST SOFTWARE, V86, P997, DOI 10.1016/j.jss.2012.11.023
   Wohlin C., 2000, Experimentation in Software Engineering: An Introduction, V1, DOI DOI 10.1007/978-1-4615-4625-2
   Yang J, 2009, FCST 2009: PROCEEDINGS OF THE 4TH INTERNATIONAL CONFERENCE ON FRONTIER OF COMPUTER SCIENCE AND TECHNOLOGY, P408, DOI 10.1109/FCST.2009.72
NR 74
TC 2
Z9 2
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2023
VL 31
IS 1
BP 1
EP 54
DI 10.1007/s11219-022-09585-2
EA APR 2022
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9N8JZ
UT WOS:000785929400001
DA 2024-07-18
ER

PT J
AU Ferreira, M
   Mombach, T
   Valente, MT
   Ferreira, K
AF Ferreira, Mivian
   Mombach, Thais
   Valente, Marco Tulio
   Ferreira, Kecia
TI Algorithms for estimating truck factors: a comparative study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Truck factor; Code ownership; Core developers; Developer turnover;
   Mining software repositories
AB Software development is a knowledge-intensive industry. For this reason, concentration of knowledge in software projects tends to be very risky, which increases the relevance of strategies that reveal how source code knowledge is distributed among team members. The truck factor (also known as the bus factor) is an increasingly popular concept-proposed by practitioners-that indicates the minimal number of developers that have to be hit by a truck (or leave the team) before a project is incapacitated. Therefore, it is a measure that reveals the concentration of knowledge and the key developers in a project. Due to the importance of this concept, algorithms have been proposed to automatically compute truck factors, using maintenance activity data extracted from version control systems. However, we still lack large studies that assess the results of truck factor algorithms. To fulfill this gap in the literature, this paper describes the results of three empirical studies. In the first study, we validate the results produced by three algorithms to estimate truck factors. To this purpose, we build an oracle of truck factors, gathered via a survey with 35 open-source project teams. In the second study, we provide a comparison between truck factors and core developers, a related concept commonly used to denote the key developers of open-source projects. Our results indicate that truck factor developers are in most cases a subset of core developers. Finally, as the algorithms proposed so far are based in commit data, in the third study, we investigate other factors that may impact the computation of truck factors.
C1 [Ferreira, Mivian; Mombach, Thais; Valente, Marco Tulio] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [Ferreira, Kecia] CEFET MG, Dept Comp, Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Minas Gerais
RP Ferreira, M (corresponding author), Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
EM mivian.ferreira@dcc.ufmg.br
OI Valente, Marco Tulio/0000-0002-8180-7548; Ferreira,
   Mivian/0000-0001-6038-7102
FU FAPEMIG; CAPES; CNPq
FX This research is supported by grants from FAPEMIG, CAPES, and CNPq.
CR [Anonymous], 2004, XP Ser
   Avelino G, 2019, 2019 ACM IEEE INT S, P1
   Avelino G, 2019, SCI COMPUT PROGRAM, V176, P14, DOI 10.1016/j.scico.2019.03.001
   Avelino Guilherme, 2016, Proceedings of IEEE 24th International Conference on Program Comprehension (ICPC), P1
   Bird C., 2011, P 19 ACM SIGSOFT S 1, P4, DOI DOI 10.1145/2025113.2025119
   Borges H, 2018, J SYST SOFTWARE, V146, P112, DOI 10.1016/j.jss.2018.09.016
   Borges H, 2016, PROC IEEE INT CONF S, P334, DOI 10.1109/ICSME.2016.31
   Bowler M, 2016, HERMENEUTICAL HEIDEGGER, P3
   Coelho J, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P186, DOI 10.1145/3106237.3106246
   Cosentino V, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P499, DOI 10.1109/SANER.2015.7081864
   Ferreira M, 2017, INT C PROGRAM COMPRE, P207, DOI 10.1109/ICPC.2017.35
   Foucault Matthieu, 2014, P 18 INT C EV ASS SO, P1
   Fritz T., 2010, P 32 ACMIEEE INT C S, P385
   Fritz T, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2512207
   Joblin M, 2017, PROC INT CONF SOFTW, P164, DOI 10.1109/ICSE.2017.23
   Mens T, 2016, PROC IEEE INT CONF S, P1, DOI 10.1109/ICSME.2016.19
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Mockus A, 2010, Proc. of the 18th Symposium on the Foundations of Software Engineering (FSE), P117
   Rahman F, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P491, DOI 10.1145/1985793.1985860
   Ricca F., 2010, 4 INT S EMP SOFTW EN, P1
   Rigby PC, 2016, PROC INT CONF SOFTW, P1006, DOI 10.1145/2884781.2884851
   Torchiano M, 2011, INT SYMP EMP SOFTWAR, P372, DOI 10.1109/ESEM.2011.51
   Torchiano Marco, 2011, P 2 INT WORKSH EM TR, P12, DOI [DOI 10.1145/1985374, 10.1145/1985374.1985379., DOI 10.1145/1985374.1985379]
   Williams Laurie A., 2003, Pair programming illuminated
   Yamashita K, 2015, 14TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE 2015), P46, DOI 10.1145/2804360.2804366
   Ye YW, 2003, PROC INT CONF SOFTW, P419
   Zazworka N., 2010, 4th International Symposium on Empirical Software Engineering and Measurement (ESEM), P1, DOI DOI 10.1145/1852786.1852805
NR 27
TC 7
Z9 8
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2019
VL 27
IS 4
BP 1583
EP 1617
DI 10.1007/s11219-019-09457-2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KP9TA
UT WOS:000516573400009
DA 2024-07-18
ER

PT J
AU Ji, HJ
   Huang, S
   Wu, YN
   Hui, ZW
   Zheng, CY
AF Ji, Haijin
   Huang, Song
   Wu, Yaning
   Hui, Zhanwei
   Zheng, Changyou
TI A new weighted naive Bayes method based on information diffusion for
   software defect prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software defect prediction; Naive Bayes; Feature weighting; Information
   diffusion
ID FAULT-PRONENESS; EMPIRICAL-ANALYSIS
AB Software defect prediction (SDP) plays a significant part in identifying the most defect-prone modules before software testing and allocating limited testing resources. One of the most commonly used classifiers in SDP is naive Bayes (NB). Despite the simplicity of the NB classifier, it can often perform better than more complicated classification models. In NB, the features are assumed to be equally important, and the numeric features are assumed to have a normal distribution. However, the features often do not contribute equivalently to the classification, and they usually do not have a normal distribution after performing a Kolmogorov-Smirnov test; this may harm the performance of the NB classifier. Therefore, this paper proposes a new weighted naive Bayes method based on information diffusion (WNB-ID) for SDP. More specifically, for the equal importance assumption, we investigate six weight assignment methods for setting the feature weights and then choose the most suitable one based on the F-measure. For the normal distribution assumption, we apply the information diffusion model (IDM) to compute the probability density of each feature instead of the acquiescent probability density function of the normal distribution. We carry out experiments on 10 software defect data sets of three types of projects in three different programming languages provided by the PROMISE repository. Several well-known classifiers and ensemble methods are included for comparison. The final experimental results demonstrate the effectiveness and practicability of the proposed method.
C1 [Ji, Haijin] Huaiyin Normal Univ, Sch Comp Sci & Technol, Huaian 223300, Peoples R China.
   [Ji, Haijin; Huang, Song; Wu, Yaning; Hui, Zhanwei; Zheng, Changyou] Army Engn Univ PLA, Command & Control Engn Coll, Nanjing 210007, Jiangsu, Peoples R China.
C3 Huaiyin Normal University; Army Engineering University of PLA
RP Huang, S (corresponding author), Army Engn Univ PLA, Command & Control Engn Coll, Nanjing 210007, Jiangsu, Peoples R China.
EM hs0317@163.com
RI hui, zhan-wei/J-8049-2013
FU National Natural Science Foundation of China [61702544]; Natural Science
   Foundation of Jiangsu Province of China [BK20160769]
FX This work is supported by the National Natural Science Foundation of
   China (Grant No. 61702544) and the Natural Science Foundation of Jiangsu
   Province of China (Grant No. BK20160769).
CR Aman H, 2015, IEICE T INF SYST, VE98D, P2218, DOI 10.1587/transinf.2015EDP7107
   [Anonymous], 2007, The promise repository of empirical software engineering data
   Arar ÖF, 2017, APPL SOFT COMPUT, V59, P197, DOI 10.1016/j.asoc.2017.05.043
   Bai CZ, 2015, INT J GEN SYST, V44, P601, DOI 10.1080/03081079.2014.980242
   Bai CZ, 2018, J ATMOS OCEAN TECH, V35, P247, DOI 10.1175/JTECH-D-17-0109.1
   Bai CZ, 2017, NAT HAZARDS, V87, P899, DOI 10.1007/s11069-017-2801-y
   Bai CZ, 2014, J HYDROMETEOROL, V15, P2236, DOI 10.1175/JHM-D-13-0184.1
   Bicer M. S., 2015, 21 INT C INF SOFTW T
   Biçer S, 2016, APPL SOFT COMPUT, V49, P1078, DOI 10.1016/j.asoc.2016.05.038
   Bowes David., 2016, Proceedings of the 25th International Symposium on Software Testing and Analysis, P330, DOI DOI 10.1145/2931037.2931039
   Chen X, 2018, INFORM SOFTWARE TECH, V93, P1, DOI 10.1016/j.infsof.2017.08.004
   Cong Jin, 2010, Proceedings of the 2010 Second International Conference on Multimedia and Information Technology (MMIT 2010), P24, DOI 10.1109/MMIT.2010.10
   Feng YQ, 2003, 2003 INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND CYBERNETICS, VOLS 1-5, PROCEEDINGS, P2085, DOI 10.1109/ICMLC.2003.1259848
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Hall T, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2629648
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Hand DJ, 2001, INT STAT REV, V69, P385, DOI 10.1111/j.1751-5823.2001.tb00465.x
   He P, 2015, INFORM SOFTWARE TECH, V59, P170, DOI 10.1016/j.infsof.2014.11.006
   Herbold S, 2017, EMPIR SOFTW ENG, V22, P1866, DOI 10.1007/s10664-016-9468-y
   Hosseini S, 2018, INFORM SOFTWARE TECH, V95, P296, DOI 10.1016/j.infsof.2017.06.004
   Huang C., 2012, EFFICIENT FUZZY INFO, V99
   Huang CF, 1997, FUZZY SET SYST, V91, P69, DOI 10.1016/S0165-0114(96)00257-6
   Huang CF, 2002, INFORM SCIENCES, V142, P37, DOI 10.1016/S0020-0255(02)00156-1
   Jagannathan G, 2009, INT CONF DAT MIN WOR, P114, DOI 10.1109/ICDMW.2009.93
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Kaufman A, 2011, J OBESITY, V2012, P1
   Khoshgoftaar TM, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P203, DOI 10.1109/METRIC.2002.1011339
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   KIRA K, 1992, MACHINE LEARNING /, P249
   Kononenko I., 1994, EUR C MACH LEARN, V94, P171, DOI DOI 10.1007/3-540-57868-4_57
   Lee T, 2016, IEEE T SOFTWARE ENG, V42, P1015, DOI 10.1109/TSE.2016.2550458
   Lenz AR, 2013, ENG APPL ARTIF INTEL, V26, P1631, DOI 10.1016/j.engappai.2013.01.008
   Li H., 2012, STAT LEARNING METHOD
   Liang XS, 2014, PHYS REV E, V90, DOI 10.1103/PhysRevE.90.052150
   Ma WWY, 2016, INFORM SOFTWARE TECH, V69, P50, DOI 10.1016/j.infsof.2015.09.001
   Ma Y, 2016, 2016 10TH INTERNATIONAL CONFERENCE ON INNOVATIVE MOBILE AND INTERNET SERVICES IN UBIQUITOUS COMPUTING (IMIS), P313, DOI 10.1109/IMIS.2016.83
   Macias D, 2016, OCEAN DYNAM, V66, P137, DOI 10.1007/s10236-015-0914-y
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Miholca DL, 2018, INFORM SCIENCES, V441, P152, DOI 10.1016/j.ins.2018.02.027
   Olague HM, 2007, IEEE T SOFTWARE ENG, V33, P402, DOI 10.1109/TSE.2007.1015.
   Pelayo L, 2007, NAFIPS 2007 - 2007 ANNUAL MEETING OF THE NORTH AMERICAN FUZZY INFORMATION PROCESSING SOCIETY, P69, DOI 10.1109/NAFIPS.2007.383813
   PLACKETT RL, 1983, INT STAT REV, V51, P59, DOI 10.2307/1402731
   Quinlan J.R., 1993, C4 5 PROGRAMS MACHIN
   Rathore SS, 2017, KNOWL-BASED SYST, V119, P232, DOI 10.1016/j.knosys.2016.12.017
   Razali N. M., 2011, J. Stat. Model. and Anal., V2, P21, DOI DOI 10.1515/BILE-2015-0008
   Robnik-Sikonja M, 2003, MACH LEARN, V53, P23, DOI 10.1023/A:1025667309714
   Shirakawa M, 2015, IEEE T EMERG TOP COM, V3, P205, DOI 10.1109/TETC.2015.2418716
   Song QB, 2011, IEEE T SOFTWARE ENG, V37, P356, DOI 10.1109/TSE.2010.90
   Tang B, 2016, IEEE T KNOWL DATA EN, V28, P2508, DOI 10.1109/TKDE.2016.2563436
   Tantithamthavorn C, 2017, IEEE T SOFTWARE ENG, V43, P1, DOI 10.1109/TSE.2016.2584050
   Tong HN, 2018, INFORM SOFTWARE TECH, V96, P94, DOI 10.1016/j.infsof.2017.11.008
   Turhan B, 2007, ICSOFT 2007: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL SE, P244
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Turhan B, 2009, DATA KNOWL ENG, V68, P278, DOI 10.1016/j.datak.2008.10.005
   Vitello G, 2014, 2014 EIGHTH INTERNATIONAL CONFERENCE ON COMPLEX, INTELLIGENT AND SOFTWARE INTENSIVE SYSTEMS (CISIS),, P155, DOI 10.1109/CISIS.2014.23
   Witten LH, 2011, ACM SIGSOFT SOFTWARE, P90
   Wong TT, 2012, PATTERN RECOGN, V45, P2321, DOI 10.1016/j.patcog.2011.12.014
   Wu YN, 2018, KNOWL-BASED SYST, V144, P1, DOI 10.1016/j.knosys.2017.12.015
   Xia X, 2016, IEEE T SOFTWARE ENG, V42, P977, DOI 10.1109/TSE.2016.2543218
   Yang TD, 2016, 2016 IEEE 2ND INTERNATIONAL CONFERENCE ON BIG DATA SECURITY ON CLOUD (BIGDATASECURITY), IEEE INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE AND SMART COMPUTING (HPSC), AND IEEE INTERNATIONAL CONFERENCE ON INTELLIGENT DATA AND SECURITY (IDS), P129, DOI 10.1109/BigDataSecurity-HPSC-IDS.2016.38
   Yang XX, 2015, IEEE T RELIAB, V64, P234, DOI 10.1109/TR.2014.2370891
   Yang XL, 2017, INFORM SOFTWARE TECH, V87, P206, DOI 10.1016/j.infsof.2017.03.007
   Yu Q, 2017, J SYST SOFTWARE, V132, P366, DOI 10.1016/j.jss.2017.06.070
   Zaidi NA, 2013, J MACH LEARN RES, V14, P1947
   Zhang H, 2005, P 4 IEEE INT C DAT M, P567
   Zhao YY, 2017, AUTOMAT SOFTW ENG, V24, P393, DOI 10.1007/s10515-016-0198-6
   Zhao YY, 2015, INFORM SOFTWARE TECH, V57, P186, DOI 10.1016/j.infsof.2014.09.006
   Zheng F., 2005, Proceedings of the 4th Australasian Data Mining conference, P141
   Zheng J, 2010, EXPERT SYST APPL, V37, P4537, DOI 10.1016/j.eswa.2009.12.056
   Zhou L, 2017, FRONT PHARMACOL, V8, P1, DOI 10.3389/fphar.2017.00075
NR 72
TC 20
Z9 21
U1 0
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 923
EP 968
DI 10.1007/s11219-018-9436-4
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400003
DA 2024-07-18
ER

PT J
AU Ouriques, JFS
   Cartaxo, EG
   Machado, PDL
AF Ouriques, Joao Felipe S.
   Cartaxo, Emanuela G.
   Machado, Patricia D. L.
TI Test case prioritization techniques for model-based testing: a
   replicated study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Test case prioritization; Fault detection;
   Empirical evaluation
AB Recently, several test case prioritization (TCP) techniques have been proposed to order test cases for achieving a goal during test execution, particularly, revealing faults sooner. In the model-based testing (MBT) context, such techniques are usually based on heuristics related to structural elements of the model and derived test cases. In this sense, techniques' performance may vary due to a number of factors. While empirical studies comparing the performance of TCP techniques have already been presented in literature, there is still little knowledge, particularly in the MBT context, about which factors may influence the outcomes suggested by a TCP technique. In a previous family of empirical studies focusing on labeled transition systems, we identified that the model layout, i.e., amount of branches, joins, and loops in the model, alone may have little influence on the effectiveness of TCP techniques investigated, whereas characteristics of test cases that actually fail definitely influences this aspect. However, we considered only synthetic artifacts in the study, which reduced the ability of representing properly the reality. In this paper, we present a replication of one of these studies, now with a larger and more representative selection of techniques and considering test suites from industrial systems as experimental objects. Our objective is to find out whether the results remain while increasing the validity in comparison to the original study. Results reinforce that there is no best performer among the investigated techniques and characteristics of test cases that fail represent an important factor, although adaptive random-based techniques are less affected by it.
C1 [Ouriques, Joao Felipe S.] Univ Fed Campina Grande, 882 Aprigio Veloso, Campina Grande, Brazil.
   [Cartaxo, Emanuela G.] Univ Fed Campina Grande, Software Practices Lab, 882 Aprigio Veloso, Campina Grande, Brazil.
   [Machado, Patricia D. L.] Univ Fed Campina Grande, Comp & Syst Dept, 882 Aprigio Veloso, Campina Grande, Brazil.
C3 Universidade Federal de Campina Grande; Universidade Federal de Campina
   Grande; Universidade Federal de Campina Grande
RP Ouriques, JFS (corresponding author), Univ Fed Campina Grande, 882 Aprigio Veloso, Campina Grande, Brazil.
EM jfelipe@copin.ufcg.edu.br; emanuela@copin.ufcg.edu.br;
   patricia@computacao.ufcg.edu.br
RI Ouriques, João Felipe S/E-3840-2017; Machado, Patricia/B-5346-2009
OI Machado, Patricia/0000-0002-0661-0067
FU National Institute of Science and Technology for Software Engineering -
   CNPq/Brasil [573964/2008-4]; CNPq [141215/2012-7]
FX This work was partially supported by the National Institute of Science
   and Technology for Software Engineering (2015), funded by CNPq/Brasil,
   grant 573964/2008-4. First author was also supported by CNPq grant
   141215/2012-7.
CR [Anonymous], 2006, SOFTWARE ENG
   [Anonymous], IEEE T SOFTWARE ENG
   [Anonymous], PROC INT CONF SOFTW
   [Anonymous], J SOFTWARE ENG RES D
   [Anonymous], 2010, P 1 INT WORKSH REPL
   [Anonymous], 1991, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Belli F, 2007, LECT NOTES COMPUT SC, V4746, P95
   Belli F, 2010, COMM COM INF SC, V117, P130
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   de Vries R., 2000, INT J SOFTW TOOLS TE, V2, P382
   Do H, 2010, IEEE T SOFTWARE ENG, V36, P593, DOI 10.1109/TSE.2010.58
   Elbaum S, 2004, SOFTWARE QUAL J, V12, P185, DOI 10.1023/B:SQJO.0000034708.84524.22
   Gökçe N, 2006, LECT NOTES COMPUT SC, V4263, P1060
   Gómez OS, 2014, INFORM SOFTWARE TECH, V56, P1033, DOI 10.1016/j.infsof.2014.04.004
   Gomez Omar S., 2010, P 1 INT WORKSHOP REP
   Hao D, 2016, IEEE T SOFTWARE ENG, V42, P490, DOI 10.1109/TSE.2015.2496939
   Hemmati H., 2015, 2015 IEEE 8 INT C SO, P1
   Henard C, 2016, PROC INT CONF SOFTW, P523, DOI 10.1145/2884781.2884791
   Jeffrey D, 2008, J SYST SOFTWARE, V81, P196, DOI 10.1016/j.jss.2007.05.006
   Jiang B, 2009, IEEE INT CONF AUTOM, P233, DOI 10.1109/ASE.2009.77
   Juristo N., 2013, BASICS SOFTWARE ENG
   Kaur Preeti., 2012, Proceedings of the CUBE International Information Technology Conference, CUBE '12, P355
   Korel B, 2005, PROC IEEE INT CONF S, P559
   Korel B, 2008, PROC IEEE INT CONF S, P247, DOI 10.1109/ICSM.2008.4658073
   Korel Bogdan., 2007, Proceedings of the 3rd International Workshop on Advances in Model-Based Testing, P34
   Kundu D, 2009, SOFTW TEST VERIF REL, V19, P297, DOI 10.1002/stvr.407
   Ledru Y, 2012, AUTOMAT SOFTW ENG, V19, P65, DOI 10.1007/s10515-011-0093-0
   Lima Lucas, 2009, 2009 3rd International Symposium on Empirical Software Engineering and Measurement (ESEM), P279, DOI 10.1109/ESEM.2009.5315980
   Nejad FM, 2016, 2016 1ST CONFERENCE ON SWARM INTELLIGENCE AND EVOLUTIONARY COMPUTATION (CSIEC 2016), P142, DOI 10.1109/CSIEC.2016.7482129
   Poulding S, 2010, IEEE T SOFTWARE ENG, V36, P763, DOI 10.1109/TSE.2010.24
   RAJU S, 2012, EUR J SCI RES, V74, P389
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Rothermel G., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P179, DOI 10.1109/ICSM.1999.792604
   Sabharwal S., 2010, 2010 International Conference on Computer and Communication Technology (ICCCT 2010), P481, DOI 10.1109/ICCCT.2010.5640479
   Sapna PG, 2009, 2009 1ST INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE, COMMUNICATION SYSTEMS AND NETWORKS(CICSYN 2009), P271, DOI 10.1109/CICSYN.2009.74
   Utting M., 2007, PRACTICAL MODEL BASE
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Coutinho AEVB, 2016, SOFTWARE QUAL J, V24, P407, DOI 10.1007/s11219-014-9265-z
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Yoo S., 2007, SOFTW TEST VERIF REL, V22, P1, DOI DOI 10.1002/000.PUBLISHED
   Yoo S, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P201
   Yu-Chi Huang, 2010, 2010 IEEE Proceedings of 34th Annual Computer Software and Applications Conference (COMPSAC 2010), P413, DOI 10.1109/COMPSAC.2010.66
   Zhi Quan Zhou, 2012, 2012 45th Hawaii International Conference on System Sciences (HICSS), P5584, DOI 10.1109/HICSS.2012.454
   Zhi Quan Zhou, 2010, IEEE 34th Annual Computer Software and Applications Conference Workshops (COMPSACW 2010), P208, DOI 10.1109/COMPSACW.2010.43
NR 45
TC 19
Z9 19
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1451
EP 1482
DI 10.1007/s11219-017-9398-y
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Li, GQ
   Liu, L
   Fukuda, A
AF Li, Guoqiang
   Liu, Li
   Fukuda, Akira
TI Asynchronous multi-process timed automata
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Asynchronous multi-process timed automata; Coverability; Read-arc timed
   Petri nets; Timed automata
ID RECURSIVE STATE MACHINES; PETRI NETS; DECIDABILITY; VERIFICATION;
   SYSTEMS; EXPRESSIVENESS; SCHEDULABILITY
AB High-quality asynchronous programs are needed urgently to exploit multi-core hardware and cloud platforms. However, in real-time systems, formal models such as timed automata (TAs) are limited to concurrent programs where the number of processes is constant and no process is triggered on-the-fly. To better support the verification of asynchronous programs, we propose a new model called asynchronous multi-process timed automata (APTAs) based on TAs. Processes are abstracted as process timed automata (PTAs), which are almost the same as TAs except some states are for triggering new processes. A multiset is used to buffer triggered instances. The model is sufficiently expressive to describe real-time asynchronous programs with dynamic process creation. We show that the coverability problem, which is used for checking safety property of programs, is decidable by encoding it into read-arc timed Petri nets (RTPNs). We then propose an algorithm for the coverability problem and provide a proof of the termination and correctness.
C1 [Li, Guoqiang; Liu, Li] Shanghai Jiao Tong Univ, Sch Software, Shanghai 200240, Peoples R China.
   [Fukuda, Akira] Kyushu Univ, Grad Sch Informat Sci & Elect Engn, Fukuoka 8190395, Japan.
C3 Shanghai Jiao Tong University; Kyushu University
RP Li, GQ (corresponding author), Shanghai Jiao Tong Univ, Sch Software, Shanghai 200240, Peoples R China.
EM li.g@sjtu.edu.cn; lee.liu@sjtu.edu.cn; fukuda@f.ait.kyushu-u.ac.jp
RI Li, Guoqiang/GSD-3263-2022
FU National Natural Science Foundation of China [61672340, 61472238,
   61472240]; Grants-in-Aid for Scientific Research [15H05708] Funding
   Source: KAKEN
FX This study is supported by the National Natural Science Foundation of
   China (Nos. 61672340, 61472238, and 61472240).
CR Abdulla P. A., 2001, Applications and Theory of Petri Nets 2001. 22nd International Conference, ICATPN 2001. Proceedings (Lecture Notes in Computer Science Vol.2075), P53
   Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   Abdulla PA, 2001, THEOR COMPUT SCI, V256, P145, DOI 10.1016/S0304-3975(00)00105-5
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Benerecetti Massimo, 2010, Proceedings of the 2010 17th International Symposium on Temporal Representation and Reasoning (TIME 2010), P61, DOI 10.1109/TIME.2010.10
   Benerecetti M, 2016, THEOR COMPUT SCI, V625, P85, DOI 10.1016/j.tcs.2016.02.021
   Bengtsson J., 2003, LECT CONCURRENCY PET, P87
   Bérard B, 2005, LECT NOTES COMPUT SC, V3829, P211
   Bérard B, 2012, FORM METHOD SYST DES, V40, P41, DOI 10.1007/s10703-011-0140-2
   Berthomieu B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P41
   BERTHOMIEU B, 1991, IEEE T SOFTWARE ENG, V17, P259, DOI 10.1109/32.75415
   Bouyer P., 2006, P 6 INT C APPL CONC, P91
   Bouyer P, 2008, INFORM COMPUT, V206, P73, DOI 10.1016/j.ic.2007.10.004
   Byg J, 2009, LECT NOTES COMPUT SC, V5885, P698, DOI 10.1007/978-3-642-10373-5_36
   Cassez F, 2006, J SYST SOFTWARE, V79, P1456, DOI 10.1016/j.jss.2005.12.021
   Esparza J., 1997, Fundamenta Informaticae, V31, P13
   Fang BB, 2016, LECT NOTES COMPUT SC, V9984, P147, DOI 10.1007/978-3-319-47677-3_10
   Fersman E, 2002, LECT NOTES COMPUT SC, V2280, P67
   Fersman E, 2007, INFORM COMPUT, V205, P1149, DOI 10.1016/j.ic.2007.01.009
   Guoqiang Li, 2013, Formal Modeling and Analysis of Timed Systems. Proceedings of 11th International Conference (FORMATS 2013): LNCS 8053, P168, DOI 10.1007/978-3-642-40229-6_12
   Hopcroft J., 1979, Theoretical Computer Science, V8, P135, DOI 10.1016/0304-3975(79)90041-0
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Li GQ, 2015, LECT NOTES COMPUT SC, V9268, P189, DOI 10.1007/978-3-319-22975-1_13
   Nan Guan, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P3, DOI 10.1007/978-3-662-46681-0_1
   Norstrom C., 1999, Proceedings Sixth International Conference on Real-Time Computing Systems and Applications. RTCSA'99 (Cat. No.PR00306), P182, DOI 10.1109/RTCSA.1999.811218
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P300, DOI 10.1007/11817963_29
   Srba J, 2005, LECT NOTES COMPUT SC, V3536, P385
   Trivedi A, 2010, LECT NOTES COMPUT SC, V6252, P306
   Valero Ruiz V., 1999, Proceedings 8th International Workshop on Petri Nets and Performance Models (Cat. No.PR00331), P188, DOI 10.1109/PNPM.1999.796565
NR 32
TC 1
Z9 1
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 961
EP 989
DI 10.1007/s11219-017-9380-8
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000005
DA 2024-07-18
ER

PT J
AU Ferreira, KAM
   Bigonha, MAS
   Bigonha, RS
   de Lima, BN
   Gomes, BM
   Mendes, LFO
AF Ferreira, Kecia A. M.
   Bigonha, Mariza A. S.
   Bigonha, Roberto S.
   de Lima, Bernardo N.
   Gomes, Barbara M.
   Mendes, Luiz Felipe O.
TI A model for estimating change propagation in software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Change propagation; Change impact analysis (CIA); Software maintenance;
   Software metrics; Comparing programs; Stochastic process; Markov Chain
AB A major issue in software maintenance is change propagation. A software engineer should be able to assess the impact of a change in a software system, so that the effort to accomplish the maintenance may be properly estimated. We define a novel model, named K3B, for estimating change propagation impact. The model aims to predict how far a set of changes will propagate throughout the system. K3B is a stochastic model that has input parameters about the system and the number of modules which will be initially changed. K3B returns the estimated number of change steps, considering that a module may be changed more than once during a modification process. We provide the implementation of K3B for object-oriented programs. We compare our implementation with data from an artificial scenario, given by simulation, as well as with data from a real scenario, given by historical data. We found strong correlation between the results given by K3B and the results observed in the simulation, as well as with historical data of change propagation. K3B may be used for comparing software systems from the viewpoint of change impact. The model may aid software engineers in allocating proper resources to the maintenance tasks.
C1 [Ferreira, Kecia A. M.; Gomes, Barbara M.] CEFET MG, Dept Comp, Belo Horizonte, MG, Brazil.
   [Bigonha, Mariza A. S.; Bigonha, Roberto S.; Mendes, Luiz Felipe O.] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [de Lima, Bernardo N.] Univ Fed Minas Gerais, Dept Math, Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Minas
   Gerais
RP Ferreira, KAM (corresponding author), CEFET MG, Dept Comp, Belo Horizonte, MG, Brazil.
EM kecia@decom.cefetmg.br; mariza@dcc.ufmg.br
RI Bigonha, Mariza/ABE-3200-2020; Bigonha, Mariza/AAK-5829-2020
OI Bigonha, Mariza/0000-0002-3471-0452; Mendes, Luiz
   Felipe/0009-0003-8976-0638
FU FAPEMIG - Fundacao de Amparo a Pesquisa do Estado de Minas Gerais
FX The authors would like to thank FAPEMIG - Fundacao de Amparo a Pesquisa
   do Estado de Minas Gerais, which has sponsored Barbara M. Gomes
   (CEFET-MG) and Luiz F.O. Mendes (UFMG) as undergraduated students.
CR [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1994, P 4 INT C SOFTWARE Q
   Bieman J. M., 1995, SIGSOFT Software Engineering Notes, P259, DOI 10.1145/223427.211856
   Brudaru I. I., 2008, P 2008 INT WORKSHOP, P30
   Chaumun MA, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P130, DOI 10.1109/CSMR.1999.756690
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Dagenais B, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000805
   Ferreira K. A. M., 2011, 10 BRAZ S SOFTW QUAL, P9
   Ferreira K. A. M., 2008, REV INFORM TEORICA A, V15, P155
   Ferreira KM, 2011, THESIS
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Geipel MM, 2012, IEEE T SOFTWARE ENG, V38, P1432, DOI 10.1109/TSE.2011.91
   German DM, 2009, INFORM SOFTWARE TECH, V51, P1394, DOI 10.1016/j.infsof.2009.04.018
   Grinstead C.M., 1991, Introduction to Probability, Vsecond
   Hassan AE, 2004, PROC IEEE INT CONF S, P284, DOI 10.1109/ICSM.2004.1357812
   Herzig K. S., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P393, DOI 10.1145/1810295.1810401
   Herzig K, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P60, DOI 10.1109/ISSRE.2011.16
   Hitz M., 1995, INT S APPL, P1
   Kawrykow D, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P351, DOI 10.1145/1985793.1985842
   Li BX, 2013, SOFTW TEST VERIF REL, V23, P613, DOI 10.1002/stvr.1475
   Li L, 2009, 2009 WRI WORLD CONGRESS ON SOFTWARE ENGINEERING, VOL 4, PROCEEDINGS, P28, DOI 10.1109/WCSE.2009.22
   Lin Li, 2010, Proceedings of the 2010 IEEE 10th International Conference on Computer and Information Technology (CIT 2010), P1364, DOI 10.1109/CIT.2010.244
   Mirarab S, 2007, INT C PROGRAM COMPRE, P177
   Myers Glenford J., 1975, Reliable Software through Composite Design
   Petrov V., 2003, TEORI PROBABILIDADES
   Pressman R., 2009, Software Engineering: A Practitioner's Approach, V7th
   Rajlich V, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P84, DOI 10.1109/ICSM.1997.624234
   Robillard MP, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/13487689.13487691
   Sommerville I., 2011, Software Engineering 9
   Zimmermann T, 2005, IEEE T SOFTWARE ENG, V31, P429, DOI 10.1109/TSE.2005.72
NR 30
TC 2
Z9 2
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 217
EP 248
DI 10.1007/s11219-017-9358-6
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200002
DA 2024-07-18
ER

PT J
AU Stevenson, J
   Wood, M
AF Stevenson, Jamie
   Wood, Murray
TI Recognising object-oriented software design quality: a
   practitioner-based questionnaire survey
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software; Design; Quality; Object-oriented; Survey; Questionnaire;
   Industry; Practitioner; Maintenance
ID MAINTAINABILITY; GUIDELINES; METRICS; MODELS
AB Design quality is vital if software is to be maintainable. What practices do developers actually use to achieve design quality in their day-to-day work and which of these do they find most useful? To discover the extent to which practitioners concern themselves with object-oriented design quality and the approaches used when determining quality in practice, a questionnaire survey of 102 software practitioners, approximately half from the UK and the remainder from elsewhere around the world was used. Individual and peer experience are major contributors to design quality. Classic design guidelines, well-known lower level practices, tools and metrics all can also contribute positively to design quality. There is a potential relationship between testing practices and design quality. Inexperience, time pressures, novel problems, novel technology, and imprecise or changing requirements may have a negative impact on quality. Respondents with most experience are more confident in their design decisions, place more value on reviews by team leads and are more likely to rate design quality as very important. For practitioners, these results identify the techniques and tools that other practitioners find effective. For researchers, the results highlight a need for more work investigating the role of experience in the design process and the contribution experience makes to quality. There is also the potential for more in-depth studies of how practitioners are actually using design guidance, including Clean Code. Lastly, the potential relationship between testing practices and design quality merits further investigation.
C1 [Stevenson, Jamie; Wood, Murray] Univ Strathclyde, Dept Comp & Informat Sci, Livingstone Tower,Richmond St, Glasgow G1 1XH, Lanark, Scotland.
C3 University of Strathclyde
RP Wood, M (corresponding author), Univ Strathclyde, Dept Comp & Informat Sci, Livingstone Tower,Richmond St, Glasgow G1 1XH, Lanark, Scotland.
EM jamie.stevenson@strath.ac.uk; murray.wood@strath.ac.uk
OI Wood, Murray/0000-0002-9449-1036
CR Al Dallal J, 2014, EMPIR SOFTW ENG, V19, P775, DOI 10.1007/s10664-012-9239-3
   Al Dallal J, 2013, INFORM SOFTWARE TECH, V55, P2028, DOI 10.1016/j.infsof.2013.07.005
   Al Dallal J, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2089116.2089118
   [Anonymous], 2003, ALAN APT SERIES
   [Anonymous], PMD APPL EASY TO USE
   [Anonymous], 2002, ACM SIGSOFT SOFTW EN, DOI DOI 10.1145/571681.571686
   [Anonymous], 2004, Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development
   [Anonymous], 2015, CODING MANUAL QUALIT
   [Anonymous], 2003, TEST DRIVEN DEV EXAM
   [Anonymous], P 32 INT C SOFTW MAI
   Ayewah N, 2008, IEEE SOFTWARE, V25, P22, DOI 10.1109/MS.2008.130
   Bajeh Amos Orenyi, 2015, Information Science and Applications, P915, DOI 10.1007/978-3-662-46578-3_109
   Baker A, 2012, IEEE SOFTWARE, V29, P28, DOI 10.1109/MS.2011.155
   Beck K., 2014, JAVAZONE 2014 C
   BECK LL, 1983, IEEE T SOFTWARE ENG, V9, P541, DOI 10.1109/TSE.1983.235114
   Begel Andrew, 2008, P 4 INT WORKSH COMP, P3, DOI [DOI 10.1145/RESEARCH(ICER'1404520.1404522, 10.1145/Research(ICER'1404520.1404522]
   Boehm B., 2003, BALANCING AGILITY DI
   Booch G, 2011, IEEE SOFTWARE, V28, P6, DOI 10.1109/MS.2011.4
   Briand LC, 2002, ADV COMPUT, V56, P97, DOI 10.1016/S0065-2458(02)80005-5
   Briand LC, 2001, IEEE T SOFTWARE ENG, V27, P513, DOI 10.1109/32.926174
   Brooks Jr F., 2010, DESIGN DESIGN ESSAYS
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   BSI, 2011, SYST SOFTW ENG SYST
   Buse R., 2012, P 34 INT C SOFTW ENG
   Campbell G., 2013, SONARQUBE IN ACTION
   Carver JC, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962597
   Cass S., 2015, IEEE SPECTRUM
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cinnéide MO, 2012, INT SYMP EMP SOFTWAR, P49, DOI 10.1145/2372251.2372260
   Coad P., 1991, OBJECT ORIENTED DESI, V92
   Conley C.A., 2009, System Sciences, P1
   Cunningham W., 1993, OOPS Messenger, V4, P29
   Daly J., 1996, Empirical Software Engineering, V1, P109, DOI 10.1007/BF00368701
   Devanbu P., 2016, P 38 INT C SOFTWARE, P108, DOI [DOI 10.1590/0103, 10.1145/2884781, DOI 10.1145/2884781]
   Dyba T, 2005, IEEE SOFTWARE, V22, P58, DOI 10.1109/MS.2005.6
   Ferreira KAM, 2012, J SYST SOFTWARE, V85, P244, DOI 10.1016/j.jss.2011.05.044
   Fontana FA, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P609, DOI 10.1109/SANER.2016.84
   Fowler M, 2003, IEEE SOFTWARE, V20, P11, DOI 10.1109/MS.2003.1231144
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fowler M, 2004, INVERSION CONTROL CO
   Gamma Erich., 1994, DESIGN PATTERNS
   Garousi V, 2015, J SYST SOFTWARE, V108, P148, DOI 10.1016/j.jss.2015.06.036
   Garousi V, 2013, J SYST SOFTWARE, V86, P1354, DOI 10.1016/j.jss.2012.12.051
   Gorschek T, 2014, J SYST SOFTWARE, V95, P176, DOI 10.1016/j.jss.2014.03.082
   Hitz M, 1996, IEEE T SOFTWARE ENG, V22, P267, DOI 10.1109/32.491650
   Hitz M., 1995, PROC INT S APPL CORP
   Jabangwe R, 2015, EMPIR SOFTW ENG, V20, P640, DOI 10.1007/s10664-013-9291-7
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Kitchenham B., 2002, Software Engineering Notes, V27, P20, DOI 10.1145/638574.638580
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   Kitchenham B.A., 2002, ACM SIGSOFT Software Engineering Notes, V27, P18, DOI [DOI 10.1145/566493.566495, 10.1145/566493.566495]
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kitchenham B, 2010, J SYST SOFTWARE, V83, P37, DOI 10.1016/j.jss.2009.06.041
   LIEBERHERR K, 1988, SIGPLAN NOTICES, V23, P323, DOI 10.1145/62084.62113
   Linaker J., 2015, Guidelines for Conducting Surveys in Software Engineering
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Marinescu R, 2012, IBM J RES DEV, V56, DOI 10.1147/JRD.2012.2204512
   Martin R. C., 2005, PRINCIPLES OF OOD
   Martin Robert C, 2009, Clean Code: a Handbook of Agile Software Craftsmanship
   Mayer T, 1999, SOFTWARE QUAL J, V8, P97, DOI 10.1023/A:1008900825849
   McLaughlin Brett., 2006, Head First: Object-Oriented Analysis and Design
   Mills H. D., 1971, 715108 IBM FSC FED S
   NEJMEH BA, 1988, COMMUN ACM, V31, P188, DOI 10.1145/42372.42379
   O Cinneide M., 2016, EMPIR SOFTW ENG, P1
   Pfleeger Shari Lawrence, 2001, ACM SIGSOFT Software Engineering Notes, V26, P16, DOI DOI 10.1145/505532.505535
   Pressman R. S., 2014, SOFTWARE ENG, V8th
   Radjenovic D, 2013, INFORM SOFTWARE TECH, V55, P1397, DOI 10.1016/j.infsof.2013.02.009
   Riaz M, 2009, INT SYMP EMP SOFTWAR, P368, DOI 10.1109/esem.2009.5314233
   Riel AJ., 1996, Object-Oriented Design Heuristics
   Shull F., 2008, Guide to advanced empirical software engineering, Band, V93
   Simons Chris, 2015, Search-Based Software Engineering. 7th International Symposium, SSBSE 2015. Proceedings: LNCS 9275, P47, DOI 10.1007/978-3-319-22183-0_4
   Sjoberg DIK, 2013, IEEE T SOFTWARE ENG, V39, P1144, DOI 10.1109/TSE.2012.89
   Sjoberg DIK, 2012, INT SYMP EMP SOFTWAR, P107, DOI 10.1145/2372251.2372269
   Sommerville I, 2010, INT COMPUTER SCI SER
   Stavru S, 2014, J SYST SOFTWARE, V94, P87, DOI 10.1016/j.jss.2014.03.041
   Suryanarayana G., 2014, Refactoring for Software Design Smells: Managing Technical Debt
   Timothy Lister TomDeMarco., 1987, Peopleware: productive projects and teams, Vsecond
   Torchiano M, 2013, J SYST SOFTWARE, V86, P2110, DOI 10.1016/j.jss.2013.03.084
   Van Solingen R., 2002, ENCY SOFTWARE ENG
   Veerappa Varsha, 2013, 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), P271, DOI 10.1109/ESEM.2013.37
   Agner LTW, 2013, J SYST SOFTWARE, V86, P997, DOI 10.1016/j.jss.2012.11.023
   Wu YS, 2014, INT CONF SOFTW SECUR, P11, DOI 10.1109/SERE.2014.14
   Yamashita A, 2013, WORK CONF REVERSE EN, P242, DOI 10.1109/WCRE.2013.6671299
   Yamashita A, 2013, INFORM SOFTWARE TECH, V55, P2223, DOI 10.1016/j.infsof.2013.08.002
   Zhang C, 2013, INFORM SOFTWARE TECH, V55, P822, DOI 10.1016/j.infsof.2012.11.003
   Zhang C, 2012, IEEE T SOFTWARE ENG, V38, P1213, DOI 10.1109/TSE.2011.79
NR 86
TC 10
Z9 12
U1 1
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 321
EP 365
DI 10.1007/s11219-017-9364-8
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200005
OA Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Musco, V
   Monperrus, M
   Preux, P
AF Musco, Vincenzo
   Monperrus, Martin
   Preux, Philippe
TI A large-scale study of call graph-based impact prediction using mutation
   testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Change impact analysis; Call graphs; Mutation testing
AB In software engineering, impact analysis involves predicting the software elements (e.g., modules, classes, methods) potentially impacted by a change in the source code. Impact analysis is required to optimize the testing effort. In this paper, we propose an evaluation technique to predict impact propagation. Based on 10 open-source Java projects and 5 classical mutation operators, we create 17,000 mutants and study how the error they introduce propagates. This evaluation technique enables us to analyze impact prediction based on four types of call graph. Our results show that graph sophistication increases the completeness of impact prediction. However, and surprisingly to us, the most basic call graph gives the best trade-off between precision and recall for impact prediction.
C1 [Musco, Vincenzo; Monperrus, Martin; Preux, Philippe] Univ Lille, INRIA, CRIStAL, Villeneuve Dascq, France.
C3 Universite de Lille; Centrale Lille; Inria
RP Musco, V (corresponding author), Univ Lille, INRIA, CRIStAL, Villeneuve Dascq, France.
EM vincenzo.musco@inria.fr; martin.monperrus@univ-lille1.fr;
   philippe.preux@univ-lille3.fr
RI Monperrus, Martin/I-3640-2012; Preux, Pierre-Marie/N-3538-2019
OI Monperrus, Martin/0000-0003-3505-3383; Preux,
   Pierre-Marie/0000-0002-2171-2977
CR Acharya M., 2012, P 20 INT S FDN SOFTW, DOI 10.1145/2393596.2393610
   Antoniol G., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P227, DOI 10.1109/CSMR.2000.827331
   Arnold R. S., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P292, DOI 10.1109/ICSM.1993.366933
   Binkley D, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P109, DOI 10.1145/2635868.2635893
   Binkley D, 2015, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2015.7335396
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Bohner SA, 2002, PROC IEEE INT CONF S, P263, DOI 10.1109/ICSM.2002.1167777
   Cai HP, 2014, IEEE INT WORK C SO, P165, DOI 10.1109/SCAM.2014.25
   Challet D, 2004, PHYS REV E, V70, DOI 10.1103/PhysRevE.70.046109
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Do H, 2005, PROC IEEE INT CONF S, P411
   Gethers M, 2012, PROC INT CONF SOFTW, P430, DOI 10.1109/ICSE.2012.6227172
   Grove D, 1997, ACM SIGPLAN NOTICES, V32, P108, DOI 10.1145/263700.264352
   Hattori L, 2008, 7TH IEEE/ACIS INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION SCIENCE IN CONJUNCTION WITH 2ND IEEE/ACIS INTERNATIONAL WORKSHOP ON E-ACTIVITY, PROCEEDINGS, P513, DOI 10.1109/ICIS.2008.104
   KING KN, 1991, SOFTWARE PRACT EXPER, V21, P685, DOI 10.1002/spe.4380210704
   Law J, 2003, PROC INT CONF SOFTW, P308, DOI 10.1109/ICSE.2003.1201210
   Lehnert S., 2011, PROC 12 INT WORKSHOP, P41, DOI DOI 10.1145/2024445.2024454
   Li BX, 2013, SOFTW TEST VERIF REL, V23, P613, DOI 10.1002/stvr.1475
   Loyall J. P., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P282, DOI 10.1109/ICSM.1993.366934
   Michael CC, 1997, COMPASS '97 - ARE WE MAKING PROGRESS TOWARDS COMPUTER ASSURANCE?, P68, DOI 10.1109/CMPASS.1997.613237
   MORICONI M, 1990, IEEE T SOFTWARE ENG, V16, P980, DOI 10.1109/32.58785
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   Pawlak R, 2016, SOFTWARE PRACT EXPER, V46, P1155, DOI 10.1002/spe.2346
   Ramanathan MK, 2006, IEEE INT CONF AUTOM, P241
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   Robillard MP, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P406, DOI 10.1109/ICSE.2002.1007986
   Seo H, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P724, DOI 10.1145/2568225.2568255
   Shu G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P408, DOI 10.1109/ICST.2013.57
   Shu G, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P124, DOI 10.1109/ICST.2013.31
   Strug Joanna, 2012, Testing Software and Systems. 24th IFIP WG 6.1 International Conference (ICTSS 2012). Proceedings, P200, DOI 10.1007/978-3-642-34691-0_15
   Walker RJ, 2006, P 2006 INT WORKSHOP, P98, DOI [10.1145/1137983.1138008, DOI 10.1145/1137983.1138008]
   Yue Jia, 2011, IEEE Transactions on Software Engineering, V37, P649, DOI 10.1109/TSE.2010.62
   Zimmermann T, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P531, DOI 10.1145/1368088.1368161
NR 33
TC 11
Z9 13
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 921
EP 950
DI 10.1007/s11219-016-9332-8
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300010
DA 2024-07-18
ER

PT J
AU Peischl, B
   Ferk, M
   Holzinger, A
AF Peischl, Bernhard
   Ferk, Michaela
   Holzinger, Andreas
TI The fine art of user-centered software development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE User-centered design; Software engineering process; Usability; Mobile
   software quality; Mobile usability
ID USABILITY EVALUATION; METRICS; DESIGN
AB In this article, we report on the user-centered development of a mobile medical app under limited resources. We discuss (non-functional) quality attributes that we used to choose the platform for development of the medical app. As the major contribution, we show how to integrate user-centered design in an early stage of mobile app development under the presence of limited resources. Moreover, we present empirical results gained from our two-stage testing procedure including recommendations to provide both a useful and useable business app.
C1 [Peischl, Bernhard] Softnet Austria, Void, A-8010 Graz, Austria.
   [Ferk, Michaela] FERK Syst, A-8010 Graz, Austria.
   [Holzinger, Andreas] Med Univ Graz, A-8036 Graz, Austria.
C3 Medical University of Graz
RP Peischl, B (corresponding author), Softnet Austria, Void, Inffeldgasse 16b-2, A-8010 Graz, Austria.
EM bernhard.peischl@soft-net.at; michaela.ferk@ferk-systems.com;
   andreas.holzinger@medunigraz.at
RI Holzinger, Andreas/E-9530-2010
OI Holzinger, Andreas/0000-0002-6786-5194; Peischl,
   Bernhard/0000-0002-5440-7223
CR Alshamari M, 2009, IETE TECH REV, V26, P402, DOI 10.4103/0256-4602.57825
   [Anonymous], SEVERITY RATINGS USA
   [Anonymous], 2014, LNICST, DOI DOI 10.1007/978-3-319-05452-04
   [Anonymous], 1991, LEARN INDIVID DIFFER, DOI [DOI 10.1016/1041-6080(91)90011-O, 10.1016/1041-6080(91)90011-O]
   [Anonymous], INT CLASS DIS ICD
   Apple, 2012, IOS SEC
   Bahrami A, 2006, P IEEE I C SERV COMP, P406, DOI 10.1109/SCC.2006.105
   Bastien JMC, 2010, INT J MED INFORM, V79, pE18, DOI 10.1016/j.ijmedinf.2008.12.004
   Bender D., 2010, VORAUSSETZUNGEN NACH
   Bloice Marcus, 2011, Information Quality in e-Health. Proceedings 7th Conference of the Workgroup Human-Computer Interaction and Usability Engineering of the Austrian Computer Society, USAB 2011, P211, DOI 10.1007/978-3-642-25364-5_17
   Boivie I, 2003, INTERACT COMPUT, V15, P623, DOI 10.1016/S0953-5438(03)00055-9
   Borsci S, 2013, ACM T COMPUT-HUM INT, V20, DOI 10.1145/2506210
   Chisnell D., 2008, Handbook of usability testing: How to plan, design, and conduct effective tests, V2nd
   Cooke L, 2005, IEEE T PROF COMMUN, V48, P296, DOI 10.1109/TPC.2005.853938
   Dolan P. L., 2011, DOCTORS CITE EASE US
   Faily S., 2013, P 5 ACM SIGCHI S ENG, P69, DOI [DOI 10.1145/2494603.2480318, 10.1145/2480296.2480318]
   Ferk M, 2013, THESIS GRAZ U TECHNO
   Flood D., 2013, S CHI 2013 INT C HUM
   Flood D, 2013, J ORGAN END USER COM, V25, P43, DOI 10.4018/joeuc.2013010103
   Garcia Eva, 2011, Information Quality in e-Health. Proceedings 7th Conference of the Workgroup Human-Computer Interaction and Usability Engineering of the Austrian Computer Society, USAB 2011, P379, DOI 10.1007/978-3-642-25364-5_27
   Google, 2012, NOT IMPL ENCR ANDR 3
   Google, 2012, STOR OPT
   Greamo C, 2011, IEEE SECUR PRIV, V9, P79, DOI 10.1109/MSP.2011.36
   Harrison R., 2013, J INTERACTION SCI, V1, P1, DOI [10.1186/2194-0827-1-1, DOI 10.1186/2194-0827-1-1]
   Holzinger Andreas, 2007, Universal Access in the Information Society, V6, P31, DOI 10.1007/s10209-007-0074-z
   Holzinger A, 2005, COMMUN ACM, V48, P71, DOI 10.1145/1039539.1039541
   Holzinger Andreas, 2012, Multidisciplinary Research and Practice for Information Systems. International Cross-Domain Conference and Workshop on Availability, Reliability and Security (CD-ARES 2012). Proceedings, P108, DOI 10.1007/978-3-642-32498-7_9
   Holzinger A., 2006, INFORMATIK SPEKTRUM, V29, P91
   Holzinger A, 2003, HUMAN COMPUTER INTER, V1, P123
   Holzinger A., 2008, P 22 BRIT HCI GROUP, V2, P217
   Holzinger A, 2008, LECT NOTES COMPUT SC, V5105, P98, DOI 10.1007/978-3-540-70540-6_13
   Horsky J, 2010, J BIOMED INFORM, V43, P782, DOI 10.1016/j.jbi.2010.05.010
   IDC, 2012, ANDR IOS SURG NEW SM
   Inostroza R., 2012, Proceedings of the 2012 Ninth International Conference on Information Technology: New Generations (ITNG), P662, DOI 10.1109/ITNG.2012.134
   Kangas E, 2005, COMMUN ACM, V48, P55, DOI 10.1145/1070838.1070866
   Karat J, 1997, COMMUN ACM, V40, P33, DOI 10.1145/256175.256181
   Kurosu M, 2007, LECT NOTES COMPUT SC, V4550, P579
   Larusdottir MK, 2011, LECT NOTES COMPUT SC, V6949, P430, DOI 10.1007/978-3-642-23768-3_50
   Liu C, 2011, J SYST SOFTWARE, V84, P2022, DOI 10.1016/j.jss.2011.06.049
   Mayhew D.J., 1991, Principles and guidelines in software user interface design
   NIELSEN J, 1994, INT J HUM-COMPUT ST, V41, P385, DOI 10.1006/ijhc.1994.1065
   NIELSEN J, 1993, HUMAN FACTORS IN COMPUTING SYSTEMS, P206
   Nielsen J., 2012, MANY TEST USERS USAB
   Nielsen Jakob, 2000, WHY YOU ONLY NEED TE
   Norman D.A., 1986, USER CTR SYSTEM DESI, DOI 10.1201/b15703
   Peischl B, 2013, PROCEEDINGS OF THE 10TH INTERNATIONAL CONFERENCE ON E-BUSINESS (ICE-B 2013), P185
   Pilgrim M., 2011, DIVE HTML5 NO 7 PRES
   R2G, 2010, GLOB MHEALTH DEV SUR
   Raggett D., 2014, SYSTEM APPL WORKING
   Rousset D., 2013, INTRO HTML5 WEB WORK
   Seffah A, 2006, SOFTWARE QUAL J, V14, P159, DOI 10.1007/s11219-006-7600-8
   Spool J., 2001, CHI 01 EXTENDED ABST, P285, DOI 10.1145/634067.634236
   Thimbleby H, 2007, LECT NOTES COMPUT SC, V4799, P1
   Turisco F., 2013, HARNESSING VALUE MHE
   Virzi R., 1990, P HUMAN FACTORS SOC, P291
   VIRZI RA, 1992, HUM FACTORS, V34, P457, DOI 10.1177/001872089203400407
   Vredenburg Karel., 2001, An Integrated Approach
   Wasserman A.I., 2010, Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research, P397, DOI [DOI 10.1145/1882362.1882443, 10.1145/1882362.1882443]
   Weippl E, 2006, ELEKTROTECH INFORMAT, V123, P156, DOI 10.1007/s00502-006-0336
   *WHO, 2010, ICF APPL TRAIN TOOLS
NR 60
TC 15
Z9 17
U1 1
U2 49
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2015
VL 23
IS 3
BP 509
EP 536
DI 10.1007/s11219-014-9239-1
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG8PX
UT WOS:000353572800007
DA 2024-07-18
ER

PT J
AU Lu, JJ
   Gokhale, SS
AF Lu, Jijun
   Gokhale, Swapna S.
TI Hierarchical availability analysis of multi-tiered Web applications
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Web applications; Multi-tier architecture; TPC-W; Availability
ID E-COMMERCE; PERFORMANCE; PERFORMABILITY
AB Multi-tiered Web applications must offer their services with superior availability in order to encourage customers to choose online services over the traditional brick-and-mortar options. A systematic, quantitative analysis is the first step in ensuring that multi-tiered Web applications meet their high availability expectations. This paper proposes a hierarchical, model-based methodology to assess the availability of multi-tiered Web applications. The hierarchical approach partitions the analysis into three levels, which allows a systematic consideration of several factors that are relevant to application availability without encountering the issues of model complexity and intractability. We illustrate the approach via experimentation using the TPC-W benchmark. We also demonstrate how the approach could be used to guide resource provisioning decisions.
C1 [Lu, Jijun; Gokhale, Swapna S.] Univ Connecticut, Dept Comp Sci & Engn, Storrs, CT 06269 USA.
C3 University of Connecticut
RP Gokhale, SS (corresponding author), Univ Connecticut, Dept Comp Sci & Engn, Storrs, CT 06269 USA.
EM jijun.lu@engr.uconn.edu; ssg@engr.uconn.edu
FU CAREER award from the National Science Foundation [CNS-064371]
FX The research at the University of Connecticut is supported by a CAREER
   award from the National Science Foundation (#CNS-064371).
CR Abraham S, 2005, INT CONF E BUS ENG, P352, DOI 10.1109/ICEBE.2005.62
   Amza C, 2005, PROC INT CONF DATA, P230
   *AP SOFTW FDN, AP TOMC CONN
   Bain L.J., 1980, INTRO PROBABILITY MA
   Bakos Y, 1998, COMMUN ACM, V41, P35, DOI 10.1145/280324.280330
   BALLOCCA G, 2003, P CMG 03
   Bezenek T, 2000, P 3 WORKSH COMP ARCH
   Birman K, 2004, PROC INT CONF SOFTW, P17, DOI 10.1109/ICSE.2004.1317410
   Cain HW, 2001, HPCA: SEVENTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTING ARCHITECTURE, PROCEEDINGS, P229, DOI 10.1109/HPCA.2001.903266
   Claburn T., AMAZON S3 CRASH RAIS
   Cunningham D, 2004, P IEEE AER C
   Datla V, 2005, INT CONF E BUS ENG, P305, DOI 10.1109/ICEBE.2005.85
   Diao Y, 2003, INT FED INFO PROC, V118, P157, DOI 10.1109/INM.2003.1194178
   Dias DM, 1996, DIGEST OF PAPERS: COMPCON SPRING 96, FORTY-FIRST IEEE COMPUTER SOCIETY INTERNATIONAL CONFERENCE - INTELLECTUAL LEVERAGE, P85, DOI 10.1109/CMPCON.1996.501753
   Foglia P., 2001, P 34 ANN HAW INT C S
   Gao L, 2005, IEEE T KNOWL DATA EN, V17, P106, DOI 10.1109/TKDE.2005.10
   Gokhale SS, 2005, INT J RELIAB QUAL SA, V12, P267, DOI 10.1142/S0218539305001768
   Gokhale SS, 2006, P INT COMP SOFTW APP, P495
   Goseva-Postojanova K., 2006, P INT C DEP SYST NET
   Hecht M, 2001, P A REL MAI, P176, DOI 10.1109/RAMS.2001.902463
   Kaâniche M, 2003, 2003 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P709
   King R., 2009, How cloud computing is changing the world
   Liu X, 2005, MASCOTS 2005:13TH IEEE INTERNATIONAL SYMPOSIUM ON MODELING, ANALYSIS, AND SIMULATION OF COMPUTER AND TELECOMMUNICATION SYSTEMS, P307
   Lu J., 2008, IEEE JOINT C E COMM
   Lu J, 2008, DISSERTATION
   Martinello M, 2005, RELIAB ENG SYST SAFE, V89, P6, DOI 10.1016/j.ress.2004.08.003
   Menasce D.A., 2002, CAPACITY PLANNING WE
   Menascé DA, 2002, IEEE INTERNET COMPUT, V6, P83, DOI 10.1109/MIC.2002.1003136
   Merzbacher M, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P473, DOI 10.1109/DSN.2002.1028932
   MEYER JF, 1980, IEEE T COMPUT, V29, P720, DOI 10.1109/TC.1980.1675654
   Pfening A., 1996, PERFORMANCE EVALUATI
   Pramanick I., 2002, 817090510 SUN MICR
   Rinard M, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P303
   Robinson P, 2003, 23RD INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOPS, P300
   SCHMIDT DC, 2001, C NETWORK PROGRAMMIN, V1
   Shim SSY, 2000, COMPUTER, V33, P40, DOI 10.1109/2.876291
   SMITH RM, 1988, IEEE T COMPUT, V37, P406, DOI 10.1109/12.2184
   Sun Microsystems, JAV DAT CONN JDBC
   Sun Microsystems, JAV SERVL TECHN
   Tang D, 2004, 2004 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P669
   Trivedi K.S., 2001, Probability and statistics with reliability, queueing, and computer science applications, V2nd
   Wang X., 2009, P 23 INT C ADV INF N
   Xie W, 2003, 2003 IEEE INTERNATIONAL CONFERENCE ON COMMUNICATIONS, VOLS 1-5, P1796
NR 43
TC 4
Z9 6
U1 3
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2013
VL 21
IS 2
BP 355
EP 376
DI 10.1007/s11219-012-9176-9
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 114MX
UT WOS:000316746700006
DA 2024-07-18
ER

PT J
AU Ahn, KY
   Denney, E
AF Ahn, Ki Yung
   Denney, Ewen
TI A framework for testing first-order logic axioms in program verification
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Program verification; Automated theorem proving;
   Property-based testing; Constraint solving
AB Program verification systems based on automated theorem provers rely on user-provided axioms in order to verify domain-specific properties of code. However, formulating axioms correctly (that is, formalizing properties of an intended mathematical interpretation) is non-trivial in practice, and avoiding or even detecting unsoundness can sometimes be difficult to achieve. Moreover, speculating soundness of axioms based on the output of the provers themselves is not easy since they do not typically give counterexamples. We adopt the idea of model-based testing to aid axiom authors in discovering errors in axiomatizations. To test the validity of axioms, users define a computational model of the axiomatized logic by giving interpretations to the function symbols and constants in a simple declarative programming language. We have developed an axiom testing framework that helps automate model definition and test generation using off-the-shelf tools for meta-programming, property-based random testing, and constraint solving. We have experimented with our tool to test the axioms used in AUTO-CERT, a program verification system that has been applied to verify aerospace flight code using a first-order axiomatization of navigational concepts, and were able to find counterexamples for a number of axioms.
C1 [Ahn, Ki Yung] Portland State Univ, Dept Comp Sci, Portland, OR 97201 USA.
   [Denney, Ewen] NASA, Ames Res Ctr, Moffett Field, CA 94035 USA.
C3 Portland State University; National Aeronautics & Space Administration
   (NASA); NASA Ames Research Center
RP Ahn, KY (corresponding author), Portland State Univ, Dept Comp Sci, Portland, OR 97201 USA.
EM kya@pdx.edu; Ewen.Denney@nasa.gov
RI Ahn, Ki Yung/A-9713-2016
OI Ahn, Ki Yung/0000-0002-7171-7979
CR [Anonymous], 2006, YICES SMT SOLVER
   BECKER M, 2005, VERIFICATION VALIDAT
   Berghofer S, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P230, DOI 10.1109/SEFM.2004.1347524
   Blaine L, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P270, DOI 10.1109/ASE.1998.732672
   Bradley AR, 2006, LECT NOTES COMPUT SC, V3855, P427
   Carlier M, 2008, LECT NOTES COMPUT SC, V4966, P84
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   CLAESSEN K, 2009, SIMPLE TYPE SYSTEM F
   Claessen K, 2008, LECT NOTES COMPUT SC, V4966, P48
   Denney E., 2008, IEEE AER C
   Denney E, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P77
   Dybjer P, 2003, LECT NOTES COMPUT SC, V2758, P188
   Fontaine P., 2007, CEUR WORKSHOP P, V259
   GREEN C, 1969, THESIS STANFORD U
   Kuipers J.B., 1999, Quaternions and rotation sequences: a primer with applications to orbits, aerospace, and virtual reality, DOI DOI 10.1515/9780691211701
   McCarthy John., 1967, P S APPL MATH VOLUME, V19, P33
   Paulson Lawrence C., 1994, LECT NOTES COMPUTER, V828, DOI [10.1007/BFb0030541, DOI 10.1007/BFB0030541]
   Perez J. A. N., 2007, SAT SPRINGER LECT NO, V4501, P3
   Piskac R, 2010, J AUTOM REASONING, V44, P401, DOI 10.1007/s10817-009-9161-6
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sutcliffe G, 2000, LECT NOTES ARTIF INT, V1831, P406
   SUTCLIFFE G, 2005, P CADE 20 WORKSH EMP
   Sutcliffe G, 2009, J AUTOM REASONING, V43, P337, DOI 10.1007/s10817-009-9143-8
   Vallado D. A., 2001, FUNDAMENTALS ASTRODY
   WEYHRAUCH RW, 1980, ARTIF INTELL, V13, P133, DOI 10.1016/0004-3702(80)90015-6
NR 25
TC 2
Z9 2
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2013
VL 21
IS 1
BP 159
EP 200
DI 10.1007/s11219-011-9168-1
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074MB
UT WOS:000313815500008
DA 2024-07-18
ER

PT J
AU Baluda, M
   Braione, P
   Denaro, G
   Pezzè, M
AF Baluda, Mauro
   Braione, Pietro
   Denaro, Giovanni
   Pezze, Mauro
TI Enhancing structural software coverage by incrementally computing branch
   executability
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Structural testing; Concolic execution; Automatic test generation
AB Structural code coverage criteria have been studied since the early seventies, and now they are well supported by commercial and open-source tools and are commonly embedded in several advanced industrial processes. Most industrial applications still refer to simple criteria, like statement and branch coverage, and consider complex criteria, like modified condition decision coverage, only rarely and often driven by the requirements of certification agencies. The industrial value of structural criteria is limited by the difficulty of achieving high coverage, due to both the complexity of deriving test cases that execute specific uncovered elements and the presence of many infeasible elements in the code. In this paper, we propose a technique that both generates test cases that execute yet uncovered branches and identifies infeasible branches that can be eliminated from the computation of the branch coverage. In this way, we can increase branch coverage to closely approximate full coverage, thus improving its industrial value. The algorithm combines symbolic analysis, abstraction refinement, and a novel technique named coarsening, to execute unexplored branches, identify infeasible ones, and mitigate the state space explosion problem. In the paper, we present the technique and illustrate its effectiveness through a set of experimental results obtained with a prototype implementation.
C1 [Braione, Pietro; Denaro, Giovanni; Pezze, Mauro] Univ Milano Bicocca, I-20126 Milan, Italy.
   [Baluda, Mauro; Pezze, Mauro] Univ Svizzera Italiana, CH-6900 Lugano, Switzerland.
C3 University of Milano-Bicocca; Universita della Svizzera Italiana
RP Braione, P (corresponding author), Univ Milano Bicocca, Viale Sarca 336, I-20126 Milan, Italy.
EM mauro.baluda@usi.ch; braione@disco.unimib.it; denaro@disco.unimib.it;
   mauro.pezze@usi.ch
RI Braione, Pietro/P-4323-2014
OI Braione, Pietro/0000-0001-9307-6781; DENARO,
   GIOVANNI/0000-0002-7566-8051; PEZZE, MAURO/0000-0001-5193-7379
FU European Community [FP7-ICT-2009-5, PINCETTE 257647]; Swiss National
   Science Foundation [200021_132666]; Swiss National Science Foundation
   (SNF) [200021_132666] Funding Source: Swiss National Science Foundation
   (SNF)
FX This work is partially supported by the European Community under the
   call FP7-ICT-2009-5-project PINCETTE 257647 and by the Swiss National
   Science Foundation AVATAR project-SNF grant nr. 200021_132666
CR [Anonymous], STTT
   [Anonymous], 2007, Software testing and analysis-process, principles and techniques
   Ball T, 2004, LECT NOTES COMPUT SC, V2999, P1
   BALL T, 2003, MSRTR200386
   BALUDA M, 2010, P 5 INT WORKSH AUT S
   Beckman NE, 2010, IEEE T SOFTWARE ENG, V36, P495, DOI 10.1109/TSE.2010.49
   Beyer D, 2004, PROC INT CONF SOFTW, P326, DOI 10.1109/ICSE.2004.1317455
   Boyer R. S., 1975, SIGPLAN Notices, V10, P234, DOI 10.1145/390016.808445
   BUCUR S, 2011, P EUROSYS 2011
   Burnim Jacob., 2008, Proceedings of the 23rd IEEE/ACM International Conference on Automated Software Engineering, P443, DOI DOI 10.1109/ASE.2008.69
   Cadar C., 2008, KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs
   Cadar C., 2006, CCS '06: Proceedings of the 13th ACM conference on Computer and communications security, New York, NY, USA, P322
   CALLAHAN J, 1996, P 1996 SPIN WORKSH S
   Chipounov V, 2011, ACM SIGPLAN NOTICES, V46, P265, DOI [10.1145/1961296.1950396, 10.1145/1961295.1950396]
   Clarke L. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P215, DOI 10.1109/TSE.1976.233817
   Csallner C, 2005, PROC INT CONF SOFTW, P422
   Csallner C, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348254
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Ferguson R., 1996, ACM Transactions on Software Engineering and Methodology, V5, P63, DOI 10.1145/226155.226158
   FRANKL PG, 1988, IEEE T SOFTWARE ENG, V14, P1483, DOI 10.1109/32.6194
   Fraser G, 2009, SOFTW TEST VERIF REL, V19, P215, DOI 10.1002/stvr.402
   Godefroid Patrice, 2005, ACM SIGPLAN NOTICES, P213, DOI DOI 10.1145/1064978.1065036
   Godefroid Patrice, 2008, NDSS, V8, P151
   GULAVANI BS, 2006, P 14 ANN S FDN SOFTW, P117
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Korel B., 1992, Software Testing, Verification and Reliability, V2, P203, DOI 10.1002/stvr.4370020405
   Majumdar R, 2007, PROC INT CONF SOFTW, P416
   NAMIN AS, 2009, P INT S SOFTW TEST A, P57
   *RTCA INC, 1993, RTCADO178B US DEP TR
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Staats M., 2010, ISSTA, P183
   Visser W., 2004, P 2004 ACM SIGSOFT I, P97, DOI [DOI 10.1145/1007512.1007526, 10.1145/1007512.1007526]
   WEYUKER EJ, 1988, COMMUN ACM, V31, P668, DOI 10.1145/62959.62963
   Xie T, 2009, I C DEPEND SYS NETWO, P359, DOI 10.1109/DSN.2009.5270315
   YATES DF, 1989, ACM SIGSOFT, V14, P48, DOI 10.1145/75309.75315
NR 35
TC 14
Z9 15
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2011
VL 19
IS 4
SI SI
BP 725
EP 751
DI 10.1007/s11219-011-9150-y
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 814RN
UT WOS:000294474900006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, TY
   Lau, MF
   Sim, KY
   Sun, CA
AF Chen, T. Y.
   Lau, M. F.
   Sim, K. Y.
   Sun, C. A.
TI On detecting faults for Boolean expressions
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Black-box testing; Boolean specification; Fault based testing; Fault
   detection; MUMCUT strategy; Software testing; Specification based
   testing
ID SPECIFICATION
AB Fault based testing aims at detecting hypothesized faults based on specifications or program source. There are some fault based techniques for testing Boolean expressions which are commonly used to model conditions in specifications as well as logical decisions in program source. The MUMCUT strategy has been proposed to generate test cases from Boolean expressions. Moreover, it detects eight common types of hypothesized faults provided that the original expression is in irredundant disjunctive normal form, IDNF. Software practitioners are more likely to write the conditions and logical decisions in general form rather than IDNF. Hence, it is interesting to investigate the fault detecting capability of the MUMCUT strategy with respect to general form Boolean expressions. In this article, we perform empirical studies to investigate the fault detection capability of the MUMCUT strategy with respect to general form Boolean expressions as well as mutated expressions. A mutated expression can be obtained from the original given Boolean expression by making a syntactic change based on a particular type of fault.
C1 [Lau, M. F.] Swinburne Univ Technol, Fac Informat & Commun Technol, Hawthorn, Vic 3122, Australia.
   [Sim, K. Y.] Swinburne Univ Technol, Kuching, Malaysia.
   [Sun, C. A.] Beijing JiaoTong Univ, Beijing, Peoples R China.
C3 Swinburne University of Technology; Swinburne University of Technology
   Sarawak; Swinburne University of Technology; Beijing Jiaotong University
RP Lau, MF (corresponding author), Swinburne Univ Technol, Fac Informat & Commun Technol, Hawthorn, Vic 3122, Australia.
EM elau@swin.edu.au
RI Sim, Kwan Yong/AAJ-4108-2020
OI Sim, Kwan Yong/0000-0002-7291-0922; Chen, Tsong/0000-0003-3578-0994
FU Australian Research Council [DP0558597]; Swinburne University of
   Technology; Science and Technology of Beijing Jiaotong University
   [2007RC099]; Australian Research Council [DP0558597] Funding Source:
   Australian Research Council
FX The work is supported in part from the Australian Research Council
   (Discovery Project ID: DP0558597), the Swinburne University of
   Technology (Research Development Scheme 2006), and the Science and
   Technology of Beijing Jiaotong University (Grant No. 2007RC099).
CR [Anonymous], P INT COMP ENG C ICE
   Chen T. Y., 2001, Reliable Software Technologies - Ada-Europea 2001. 6th Ada-Europe International Conference on Reliable Software Technologies. Proceedings (Lecture Notes in Computer Science Vol.2043), P253
   Chen TY, 2001, SOFTW TEST VERIF REL, V11, P165, DOI 10.1002/stvr.221
   CHILENSKI JJ, 1994, SOFTWARE ENG J, V9, P193, DOI 10.1049/sej.1994.0025
   Chilenski John J., 2001, DOTFAAAR0118 US DEP
   Dupuy Arnaud, 2000, 19 DASC 19 DIG AV SY
   FOSTER KA, 1980, IEEE T SOFTWARE ENG, V6, P258, DOI 10.1109/TSE.1980.234487
   FOSTER KA, 1984, ACM SIGSOFT SOFTWARE, V9, P120
   Kobayashi N, 2002, INFORM SOFTWARE TECH, V44, P113, DOI 10.1016/S0950-5849(01)00222-1
   Kuhn DR, 1999, ACM T SOFTW ENG METH, V8, P411, DOI 10.1145/322993.322996
   Lau MF, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P117
   Lau MF, 2006, P INT COMP SOFTW APP, P403
   Lau MF, 2007, LECT NOTES COMPUT SC, V4498, P55
   Lau MF, 2005, ACM T SOFTW ENG METH, V14, P247, DOI 10.1145/1072997.1072998
   LEVESON NG, 1994, IEEE T SOFTWARE ENG, V20, P684, DOI 10.1109/32.317428
   Mano M.M., 1991, Digital Design
   MORELL LJ, 1990, IEEE T SOFTWARE ENG, V16, P844, DOI 10.1109/32.57623
   Myers Glenford J., 2011, The Art of Software Testing
   Offutt A. J., 1992, ACM Transactions on Software Engineering and Methodology, V1, P5, DOI 10.1145/125489.125473
   SUN CA, 2006, P 6 IEEE INT C COMP
   Tai K.-C., 1987, Proceedings of COMPSAC 87. The Eleventh Annual International Computer Software and Applications Conference (Cat. No.87CH2447-1), P278
   Tai KC, 1996, IEEE T SOFTWARE ENG, V22, P552, DOI 10.1109/32.536956
   Wah KSHT, 2000, SOFTW TEST VERIF REL, V10, P3, DOI 10.1002/(SICI)1099-1689(200003)10:1<3::AID-STVR196>3.0.CO;2-P
   WEYUKER E, 1994, IEEE T SOFTWARE ENG, V20, P353, DOI 10.1109/32.286420
   YU YT, 2006, J SYST SOFTWARE, V79, P577, DOI DOI 10.1016/J.JSS.2005.05.030
   Yu YT, 2006, J SYST SOFTWARE, V79, P820, DOI 10.1016/j.jss.2005.08.016
NR 26
TC 9
Z9 12
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2009
VL 17
IS 3
BP 245
EP 261
DI 10.1007/s11219-008-9064-5
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 460XE
UT WOS:000267224200003
DA 2024-07-18
ER

PT J
AU Moraga, MA
   Calero, C
   Piattini, M
   Diaz, O
AF Moraga, Ma Angeles
   Calero, Coral
   Piattini, Mario
   Diaz, Oscar
TI Improving a portlet usability model
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Web portal; portlet; quality; usability; model
AB Second-generation portals are far from being monolithic pieces of software. Their complexity calls for a component-based approach where portlets are the technical enabler. That being the case nowadays portals tend to be constructed by means of portlets, i.e. a multi-step, user-facing application to be delivered through a Web application. The proposal for and ample support given to the WSRP (Web Services for Remote Portlets) portlet standard predict an emerging portlet market. A main requirement for the blossoming of this market is the existence of portlet quality models that assist portal developers to select the appropriate portlet. This paper focuses on usability. The aim, therefore, is to develop a usability model for portlets. The paper presents such a model and its realisation for a sample case.
C1 Univ Castilla La Mancha, Escuela Super Informat, Ciudad Real 13071, Spain.
   Univ Basque Country, Dept Comp Sci, ONEKIN Res Grp, Bilbao, Spain.
   Univ Castilla La Mancha, Dept Informat Syst & Technol, Alarcos Res Grp, E-13071 Ciudad Real, Spain.
C3 Universidad de Castilla-La Mancha; University of Basque Country;
   Universidad de Castilla-La Mancha
RP Moraga, MA (corresponding author), Univ Castilla La Mancha, Escuela Super Informat, Paseo Univ 4, Ciudad Real 13071, Spain.
EM MariaAngeles.moraga@uclm.es; coral.calero@uclm.es;
   mario.piattini@uclm.es; oscar.diaz@ehu.es
RI Diaz, Oscar/T-7269-2019; Piattini, Mario/F-6271-2013; Calero,
   Coral/D-4319-2011; Moraga/G-2615-2015
OI Diaz, Oscar/0000-0003-1334-4761; Piattini, Mario/0000-0002-7212-8279;
   Calero, Coral/0000-0003-0728-4176; Moraga/0000-0001-9165-7144
CR Bertoa M., 2002, 6 ECOOP WORKSHOP QUA, P54
   CALERO C, 2004, 4 INT C WEB ENG MUN, V147
   COLLINS H, 2001, CORPORTATE PORTALS
   Conallen J., 2000, BUILDING WEB APPL UM
   CONSTANTINE L, 2005, USAGE CTR ENG WEB AP
   Díaz O, 2005, 2005 SYMPOSIUM ON APPLICATIONS AND THE INTERNET, PROCEEDINGS, P31, DOI 10.1109/SAINT.2005.66
   DIAZ O, 2004, ICSOC 2004, P11
   FRATERNALI P, 2004, WWW 2004, P342
   GRANOLLERS T, 2003, P HCI INT 03 CRET GR
   *IEC CDB, 2000, 61997 IEC CDB TR
   *ISO IEC, 2000, 14915 ISO IEC
   ISO/IEC, 2001, ISO/IEC 9126-1
   *ISO IEC, 2000, 16071 ISO IEC DTS
   *ISO IEC, 2001, 9126 ISO IEC
   *ISO IEC, 1999, 9241 ISO IEC
   *JAV COMM PROC, 2003, JSR 168 PORTL SPEC
   LINWOOD J, 2004, BUILDING PORTALS JAV
   MAHDAVI M, 2004, P 15 C AUSTR DAT, V27, P181
   Moraga MA, 2005, LECT NOTES COMPUT SC, V3807, P21
   *OASIS, 2003, WEB SERV REM PORT WS
   *OASIS, 2005, WEB SERV REM PORT WS
   Offutt J, 2002, IEEE SOFTWARE, V19, P25, DOI 10.1109/52.991329
   Ricca F, 2004, PROC IEEE INT CONF S, P474, DOI 10.1109/ICSM.2004.1357838
   Smith MA, 2004, COMMUN ACM, V47, P93, DOI 10.1145/1022594.1022600
   WASHIZAKI H, 2004, 9 INT, P211
   ZHANG X, 2003, 9 AM C INF SYST
   [No title captured]
NR 27
TC 6
Z9 6
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2007
VL 15
IS 2
BP 155
EP 177
DI 10.1007/s11219-006-9008-x
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 149CA
UT WOS:000245123000004
DA 2024-07-18
ER

PT J
AU Côté, MA
   Suryn, W
   Laporte, C
   Martin, R
AF Côté, MA
   Suryn, W
   Laporte, C
   Martin, R
TI The evolution path for industrial software quality evaluation methods
   applying ISO/IEC 9126:2001 quality model:: Example of MITRE's SQAE
   method
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE assessment; measurement; quality factors; quality models; risk
   management; quality standards
AB This paper examines how the industrial applicability of both ISO/IEC 9126:2001 and MITRE Corporation's Software Quality Assessment Exercise (SQAE) can be bolstered by migrating SQAE's quality model to ISO/IEC 9126:2001. The migration of the quality model is accomplished through the definition of an abstraction layer. The consolidated quality model is examined and further improvements to enrich the assessment of quality are enumerated.
C1 Ecole Technol Super, IQUAL, Montreal, PQ, Canada.
   Mitre Corp, Bedford, MA 01730 USA.
C3 University of Quebec; Ecole de Technologie Superieure - Canada; MITRE
   Corporation
RP Côté, MA (corresponding author), Ecole Technol Super, IQUAL, 1100,Rue Notre Dame Ouest, Montreal, PQ, Canada.
EM marcalexis_cote@yahoo.ca; wsuryn@ele.etsmtl.ca; claporte@ele.etsmtl.ca;
   ramartin@mitre.org
CR [Anonymous], 1998, 10611998 IEEE
   [Anonymous], 2014, Software engineering: a practitioner's approach
   BAZZANA G, 1993, SOFTW ENG STAND S
   CROSBY PB, 1979, QUALITY FREE ART MAK
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   *ISO IEC, 2001, SOFTW ENG SOFTW PR 4
   *ISO IEC, 1999, SOFTW ENG SOFTW PR 1
   *ISO IEC, 2003, SOFTW ENG SOFTW PR 3
   *ISO IEC, 2003, SOFTW ENG SOFTW PR 2
   MANNA M, 1993, DATAMATION, P53
   MARTIN RA, 2003, PROVIDING FRAMEWORK
   McCall J., 1977, Factors in software quality, V1
   Norman Don, 2013, The design of everyday things
   OEHM BW, 1978, CHARACTERISTICS SOFT
   OSBOURNE WM, 1990, IEEE SOFTWARE    JAN, P10
   Pfleeger S.L., 2001, SOFTWARE ENG THEORY, V2nd
NR 16
TC 9
Z9 9
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2005
VL 13
IS 1
BP 17
EP 30
DI 10.1007/s11219-004-5259-6
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898MD
UT WOS:000227080000002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Lappi, V
   Tirronen, V
   Itkonen, J
AF Lappi, Vilma
   Tirronen, Ville
   Itkonen, Jonne
TI A replication study on the intuitiveness of programming language syntax
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Program comprehension; Syntax; Programming languages; Novice
   programmers; Native language in programming
AB In this article, we present a replication of an empirical experiment that evaluates intuitiveness and comprehensibility of keywords relating to different concepts in programming languages, originally conducted by Stefik and Gellenbeck. Novice programmers face many barriers when learning programming. One of these barriers is syntax, which for many languages is not designed based on empirical evidence. The purpose of the experiment was to provide more empirical evidence on the subject, to find out if the results of the original experiment can be replicated and if conducting the experiment in an environment where English is not the native language affects the results. The results of our experiment replicated most of the findings of the original study and provided further evidence that some syntactic choices in many popular programming languages are unintuitive for novice programmers. Our results suggest that the native language of participants who otherwise had good English skills had little effect when compared to the original study. These results may support programming language designers in making evidence-based design decisions and teachers of introductory programming courses in identifying some of the barriers novice programmers face.
C1 [Lappi, Vilma; Tirronen, Ville; Itkonen, Jonne] Univ Jyvaskyla, Fac Informat Technol, Jyvaskyla, Finland.
C3 University of Jyvaskyla
RP Itkonen, J (corresponding author), Univ Jyvaskyla, Fac Informat Technol, Jyvaskyla, Finland.
EM jonne.itkonen@jyu.fi
FU University of Jyvaeskylae (JYU)
FX Open Access funding provided by University of Jyvaeskylae (JYU).
CR Aarts AA, 2015, SCIENCE, V349, DOI 10.1126/science.aac4716
   [Anonymous], 2020, Common European Framework of Reference for Languages: Learning, Teaching, Assessment - Companion Volume
   [Anonymous], 2016, SIGCSE '16, DOI [10.1145/2839509.2844584, DOI 10.1145/2839509.2844584]
   Begley CG, 2012, NATURE, V483, P531, DOI 10.1038/483531a
   Bosse Y., 2017, ACM SIGSOFT Software Engineering Notes, V41, P1, DOI [10.1145/3011286.3011301, DOI 10.1145/3011286.3011301]
   Brown NCC, 2018, ICER'18: PROCEEDINGS OF THE 2018 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P196, DOI 10.1145/3230977.3230991
   Brown NCC, 2017, ACM T COMPUT EDUC, V17, DOI 10.1145/2994154
   Dasgupta S, 2017, PROCEEDINGS OF THE FOURTH (2017) ACM CONFERENCE ON LEARNING @ SCALE (L@S'17), P33, DOI 10.1145/3051457.3051464
   Denny P., 2014, Proceedings of the 2014 conference on Innovation technology in computer science education ss, P273, DOI DOI 10.1145/2591708.2591748
   Denny P., 2011, P 16 ANN JOINT C INN, P208, DOI [10.1145/1999747.1999807, DOI 10.1145/1999747.1999807]
   Denny Paul, 2012, P 17 ACM ANN C INN T, P75, DOI [10.1145/2325296.2325318, DOI 10.1145/2325296.2325318]
   Department for Education (UK), 2013, NAT CURR ENGL COMP P
   Devanbu P, 2016, PROC INT CONF SOFTW, P108, DOI 10.1145/2884781.2884812
   Feijóo-García PG, 2020, 2020 IEEE STCBP RESEARCH ON EQUITY AND SUSTAINED PARTICIPATION IN ENGINEERING, COMPUTING, AND TECHNOLOGY (RESPECT), VOL 1, P206, DOI 10.1109/respect49803.2020.9272513
   Finnish National Agency for Education, 2014, Perusopetuksen Opetussuunnitelman Perusteet National Core Curricula for Education in Finland from
   Guo PJ, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3173970
   Hao Q, 2019, ACM T COMPUT EDUC, V19, DOI 10.1145/3345328
   Hermans F, 2018, INT C PROGRAM COMPRE, P308, DOI 10.1145/3196321.3196355
   Hornbæk K, 2014, 32ND ANNUAL ACM CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2014), P3523, DOI 10.1145/2556288.2557004
   Kaijanaho A.-J., 2015, Evidence-Based Programming Language Design: A Philosophical and Methodological Exploration
   Kendall MG, 1945, BIOMETRIKA, V33, P239, DOI 10.2307/2332303
   Ko AJ, 2015, EMPIR SOFTW ENG, V20, P110, DOI 10.1007/s10664-013-9279-3
   LYKKEN DT, 1968, PSYCHOL BULL, V70, P151, DOI 10.1037/h0026141
   Makel MC, 2014, EDUC RESEARCHER, V43, P304, DOI 10.3102/0013189X14545513
   Marceau G, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P499
   Marceau Guillaume., 2011, Proceedings of the 10th SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software, ONWARD '11, P3
   Pears Arnold, 2007, SIGCSE Bulletin, V39, P204, DOI 10.1145/1345375.1345441
   Pettit R, 2017, PROCEEDINGS OF THE 2017 ACM SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'17), P465, DOI 10.1145/3017680.3017768
   Piech Chris, 2020, L@S '20. Proceedings of the Seventh ACM Conference on Learning @ Scale, P167, DOI 10.1145/3386527.3405916
   Reestman K, 2019, ICER '19 - PROCEEDINGS OF THE 2019 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P249, DOI 10.1145/3291279.3339423
   Schmidt S, 2009, REV GEN PSYCHOL, V13, P90, DOI 10.1037/a0015108
   Siegfried Robert M., 2008, Proceedings of the 2008 International Conference on Frontiers in Education: Computer Science & Computer Engineering (FECS 2008), P18
   Siegmund J, 2014, EMPIR SOFTW ENG, V19, P1299, DOI 10.1007/s10664-013-9286-4
   Stefik A., 2014, P 2014 ACM INT S NEW, P283
   Stefik A, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2534973
   Stefik A, 2011, SOFTWARE QUAL J, V19, P65, DOI 10.1007/s11219-010-9106-7
   Stefik Andreas., 2014, P 22 INT C PROGRAM C, P223, DOI [10.1145/2597008.2597154, DOI 10.1145/2597008.2597154]
   Tirronen V, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000179
   Webropol, 2020, WEBR SURV TOOL WEBS
   Wiersma W., 2013, Oxf. Internet Inst, V18, P321
NR 40
TC 0
Z9 0
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1211
EP 1240
DI 10.1007/s11219-023-09631-7
EA MAY 2023
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:000994973300003
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Olsina, L
   Lew, P
   Becker, P
AF Olsina, Luis
   Lew, Philip
   Becker, Pablo
TI Comparative analysis of the syntactic and semantic consistency of terms
   in software testing glossaries
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Glossary; Terms; Consistency; Software testing; ISO; IEC; IEEE 29119-1;
   TMMi; ISTQB; Training
ID ONTOLOGY
AB This paper addresses terminological consistency issues of three software testing glossaries used in academia and industry. The evaluation focus mainly deals with a sub-characteristic of information quality such as consistency, which includes syntactic and semantic consistency. To systematically conduct this study, we have established a set of activities or steps. These include defining the evaluation goal and scope, selecting the glossaries, conceiving the terminological categories, classifying the glossary terms into categories, calculating syntactic and semantic similarities, analyzing consistency, and making recommendations. For instance, for the testing domain, eight terminological categories were conceived, in which, for each selected glossary, a corresponding term is included in a category, considering the semantics intended by the authors of these standard documents. To count the occurrence frequency of a term in the glossaries, a tool was built that also takes into account the matching of synonyms. Then, a comparative analysis of syntactic and semantic consistency was carried out for all the terms ending in the word "testing," which enables us to give recommendations. This exploratory study identifies some inconsistencies that might deserve further attention and efforts to promote agreement and harmonization among the authors/editors of these glossaries in order to provide their readers with the most consistent and easiest way to understand and learn software testing concepts.
C1 [Olsina, Luis; Becker, Pablo] UNLPam, Fac Ingn, GIDIS Web, Gen Pico, La Pampa, Argentina.
   [Lew, Philip] XBOSoft, Woodbridge, VA USA.
RP Olsina, L (corresponding author), UNLPam, Fac Ingn, GIDIS Web, Gen Pico, La Pampa, Argentina.
EM olsinal@ing.unlpam.edu.ar; philiplew@gmail.com;
   beckerp@ing.unlpam.edu.ar
FU Engineering School at Universidad Nacional de La Pampa, Argentina
   [09-F079]
FX This line of research is supported partially by the Engineering School
   at Universidad Nacional de La Pampa, Argentina, in project 09-F079.
CR [Anonymous], 2022, 291191 ISOIECIEEE
   Arnicane V, 2016, FRONT ARTIF INTEL AP, V291, P313, DOI 10.3233/978-1-61499-714-6-313
   Becker P, 2022, SOFTWARE QUAL J, V30, P1003, DOI 10.1007/s11219-022-09592-3
   de Souza ÉF, 2017, APPL ONTOL, V12, P59, DOI 10.3233/AO-170177
   Henderson-Sellers B, 2014, COMPUT STAND INTER, V36, P563, DOI 10.1016/j.csi.2013.11.001
   International Software Testing Qualifications Board, 2022, STAND GLOSS TERMS US
   International Software Testing Qualifications Board, 2021, STAND GLOSS TERMS US
   ISO-Standards, 2013, ISO 29022, V1, P1, DOI [DOI 10.1109/IEEESTD.2013.6588537, 10.1109/IEEESTD.2013.6588537]
   Kulesovs I, 2013, BALT J MOD COMPUT, V1, P210
   Olsina L, 2022, COMM COM INF SC, V1621, P140, DOI 10.1007/978-3-031-14179-9_10
   Olsina L, 2012, J WEB ENG, V11, P209
   Rout TP, 1999, PROC IEEE SOFTW ENGN, P67, DOI 10.1109/SESS.1999.766579
   Souza EF., 2013, 6 SEM ONT RES BRAZ, V1041, P71
   Tebes G, 2021, J COMPUT SCI TECHNOL, V21, P126, DOI 10.24215/16666038.21.e12
   Tebes G, 2020, INFORM SOFTWARE TECH, V123, DOI 10.1016/j.infsof.2020.106298
   TMMi Foundation, 2018, TEST MAT MOD INT TMM
NR 16
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 27
EP 52
DI 10.1007/s11219-023-09638-0
EA MAY 2023
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:000988421000001
DA 2024-07-18
ER

PT J
AU Olianas, D
   Leotta, M
   Ricca, F
AF Olianas, Dario
   Leotta, Maurizio
   Ricca, Filippo
TI MATTER: A tool for generating end-to-end IoT test scripts
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE IoT testing; Model-based test Generation; Empirical study
ID MUTATION; IMPACT
AB In the last few years, Internet of Things (IoT) systems have drastically increased their relevance in many fundamental sectors. For this reason, assuring their quality is of paramount importance, especially in safety-critical contexts. Unfortunately, few quality assurance proposals for assuring the quality of these complex systems are present in the literature. In this paper, we extended and improved our previous approach for semi-automated model-based generation of executable test scripts. Our proposal is oriented to system-level acceptance testing of IoT systems. We have implemented a prototype tool taking in input a UML model of the system under test and some additional artefacts, and producing in output a test suite that checks if the system's behaviour is compliant with such a model. We empirically evaluated our tool employing two IoT systems: a mobile health IoT system for diabetic patients and a smart park management system part of a smart city project. Both systems involve sensors or actuators, smartphones, and a remote cloud server. Results show that the test suites generated with our tool have been able to kill 91% of the overall 260 generated mutants (i.e. artificial bugged versions of the two considered systems). Moreover, the optimisation introduced in this novel version of our prototype, based on a minimisation post-processing step, allowed to reduce the time required for executing the entire test suites (about -20/25%) with no adverse effect on the bug-detection capability.
C1 [Olianas, Dario; Leotta, Maurizio; Ricca, Filippo] Univ Genoa, Dipartimento Informat Bioingn Robot & Ingn Sistem, Genoa, Italy.
C3 University of Genoa
RP Leotta, M (corresponding author), Univ Genoa, Dipartimento Informat Bioingn Robot & Ingn Sistem, Genoa, Italy.
EM dario.olianas@dibris.umge.it; maurizio.leotta@unige.it;
   filippo.ricca@unige.it
RI Leotta, Maurizio/I-8145-2014
OI Leotta, Maurizio/0000-0001-5267-0602
FU Universita degli Studi di Genova within the CRUI-CARE Agreement
FX Open access funding provided by Universita degli Studi di Genova within
   the CRUI-CARE Agreement.
CR Ammann P., 2016, INTRO SOFTWARE TESTI, DOI [10.1017/9781316771273, DOI 10.1017/9781316771273]
   [Anonymous], 2010, ISOMECIEEE 24765:2010, P1, DOI [DOI 10.1109/IEEESTD.2010.5733835, 10.1109/IEEESTD.2010.5733835]
   Bashir MF, 2008, 2008 INTERNATIONAL CONFERENCE ON EMERGING TECHNOLOGIES, PROCEEDINGS, P277
   Ben Braiek H, 2020, J SYST SOFTWARE, V164, DOI 10.1016/j.jss.2020.110542
   Bourhfir C, 1997, TESTING OF COMMUNICATING SYSTEMS, VOL 10, P75
   Briand LC, 2004, PROC INT CONF SOFTW, P86, DOI 10.1109/ICSE.2004.1317431
   Chekam TT, 2020, INT WORKSH AUTOMAT, P97, DOI 10.1145/3387903.3389316
   Dustin E., 1999, AUTOMATED SOFTWARE T
   Eck M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P830, DOI 10.1145/3338906.3338945
   Edvardsson Jon, 2002, A Survey on Automatic Test Data Generation
   Escobar-Velásquez C, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1611, DOI 10.1145/3368089.3417942
   Friedman G., 2002, Software Engineering Notes, V27, P134, DOI 10.1145/566171.566192
   Gantait A., 2011, Proceedings of the Second International Conference on Emerging Applications of Information Technology (EAIT 2011), P345, DOI 10.1109/EAIT.2011.63
   Grieskamp W, 2006, LECT NOTES COMPUT SC, V4262, P1
   Grün BJM, 2009, IEEE ICST WORKSHOP, P192, DOI 10.1109/ICSTW.2009.37
   Hartman A, 2005, LECT NOTES COMPUT SC, V3297, P277
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Heuillard T, 2003, P 1 EUR C MOD DRIV S, P192
   Istepanian RSH, 2011, IEEE ENG MED BIO, P5264, DOI 10.1109/IEMBS.2011.6091302
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Kaminski G, 2011, INFORM SOFTWARE TECH, V53, P1137, DOI 10.1016/j.infsof.2011.03.009
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   Leotta M, 2021, SOFTW TEST VERIF REL, V31, DOI 10.1002/stvr.1767
   Leotta M, 2019, PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING (ENASE), P434, DOI 10.5220/0007745604340441
   Leotta M, 2020, SOFTWARE QUAL J, V28, P1113, DOI 10.1007/s11219-020-09507-0
   Leotta M, 2018, IET SOFTW, V12, P430, DOI 10.1049/iet-sen.2017.0344
   Leotta M, 2016, ADV COMPUT, V101, P193, DOI 10.1016/bs.adcom.2015.11.007
   McMinn P., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P153, DOI 10.1109/ICSTW.2011.100
   Mesbah A, 2009, PROC INT CONF SOFTW, P210, DOI 10.1109/ICSE.2009.5070522
   Myers GJ, 2012, ART OF SOFTWARE TESTING, 3RD EDITION, P1
   Nagin K, 1999, P 12 INT SOFTW QUAL, V445, P450
   Offutt AJ, 2001, KLUW INT S ADV DATA, V24, P34
   Olianas D., 2020, P INT C QUAL INF COM, P383
   Parasoft, 2017, TECHNICAL REPORTS
   Pohl K, P 3 INT WORKSH AUT S, P67
   Reggio G, 2020, INTERNET THINGS-NETH, V12, DOI 10.1016/j.iot.2020.100313
   Ricca F, 2018, EMPIR SOFTW ENG, V23, P1743, DOI 10.1007/s10664-017-9563-8
   Samek M, 2008, PRACTICAL UML STATEC, DOI [10.1007/s10664-017-9563-8, DOI 10.1007/S10664-017-9563-8]
   Sanchez L, 2014, COMPUT NETW, V61, P217, DOI 10.1016/j.bjp.2013.12.020
   Shafique M, 2015, INT J SOFTW TOOLS TE, V17, P59, DOI 10.1007/s10009-013-0291-0
   Shalev-Shwartz S, 2012, FOUND TRENDS MACH LE, V4, P107, DOI 10.1561/2200000018
   SmartSantander working document 4, 2012, 4 SMARTSANTANDER
   Thimbleby H, 2003, SOFTWARE PRACT EXPER, V33, P1081, DOI 10.1002/spe.540
   Torreborre E, 2006, MODEL BASED TESTING, V94, P223
   Tracey N, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P285, DOI 10.1109/ASE.1998.732680
   Tuya J., 2006, P 2 WORKSH MUT AN MU, P1, DOI DOI 10.1109/MUTATION.2006.13
   Tuya J., 2008, ACM SIGSOFT Software Engineering Notes, V33, P1
   Tuya J, 2007, INFORM SOFTWARE TECH, V49, P398, DOI 10.1016/j.infsof.2006.06.009
   Utting M., 2007, PRACTICAL MODEL BASE
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   YEN JY, 1971, MANAGE SCI, V17, P712, DOI 10.1287/mnsc.17.11.712
NR 51
TC 7
Z9 7
U1 1
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 389
EP 423
DI 10.1007/s11219-021-09565-y
EA AUG 2021
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000680799100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Magalhaes, C
   Mota, A
   Momente, L
AF Magalhaes, Claudio
   Mota, Alexandre
   Momente, Luis
TI UI Test case prioritization on an industrial setting: A search for the
   best criteria
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE UI Test case prioritization; Historical data; Constraint satisfaction
AB This work was developed in an industrial setting towards UI regression testing, where we do not have access to source code and the majority of test cases are manually executed (and only part of the regression-based test cases can be executed due to limited resources). Test case prioritization (TCP) is indicated for such a scenario. But characteristic of many TCP techniques is that they rely on source code coverage information, whereas we just have access to test cases, change requests, and their features. Thus, our goal is to investigate which criteria is the most relevant for prioritization. Thus, according to the literature we create an optimization model based on historical data. This model is embedded in a constraint solver designed for optimization. Our optimization function is based on the APFD (Average of the Percentage of Faults Detected) metric, but other metrics can be used as well. We have found that our partner already uses an appropriate criterion to identify failures which is statistically equivalent to other criteria used in experiments using our optimization model.
C1 [Magalhaes, Claudio; Mota, Alexandre] Univ Fed Pernambuco UFPE, Ctr Informat, Recife, PE, Brazil.
   [Momente, Luis] Motorola Mobil, Chicago, IL USA.
C3 Universidade Federal de Pernambuco; Legend Holdings; Lenovo
RP Magalhaes, C (corresponding author), Univ Fed Pernambuco UFPE, Ctr Informat, Recife, PE, Brazil.
EM cjasm@cin.ufpe.br; acm@cin.ufpe.br; momente@motorola.com
OI Magalhaes, Claudio/0000-0002-9394-251X
FU Motorola Mobility; CIn-UFPE
FX We would like to thank Alice Arashiro, Eliot Maia, and Viviana Toledo
   from Motorola Mobility, as well as Virginia Viana from the collaboration
   between CIn and Motorola Mobility. This work was funded by Motorola
   Mobility in a research cooperation project with the CIn-UFPE.
CR [Anonymous], 2014, SOFTWARE TESTING FDN
   Busjaeger B, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P975, DOI 10.1145/2950290.2983954
   Campos J, 2013, PROCEEDINGS OF THE 2013 10TH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, P317, DOI 10.1109/ITNG.2013.51
   Campos J, 2013, INT CONF QUAL SOFTW, P253, DOI 10.1109/QSIC.2013.17
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dubois, TESTS PROOFS, P43
   Elbaum S, 2001, PROC INT CONF SOFTW, P329, DOI 10.1109/ICSE.2001.919106
   Gonzalez-Sanchez A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P83, DOI 10.1109/ASE.2011.6100153
   Gonzalez-Sanchez A, 2011, SOFTWARE PRACT EXPER, V41, P1105, DOI 10.1002/spe.1065
   Iyoda J., 2009, SAST, P1
   Kavitha R., 2010, INT J COMPUT SCI ENG, V2, P1462, DOI 10.24297/ijct.v9i3.6814
   Khalilian A, 2012, SCI COMPUT PROGRAM, V78, P93, DOI 10.1016/j.scico.2012.01.006
   Kim JM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P119, DOI 10.1109/ICSE.2002.1007961
   Lin JW, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1039, DOI 10.1145/3180155.3180174
   Magalhaes, 2016, 28 INT C SOFTW ENG K, P1, DOI [10.1016/j.jss.2019.110430, DOI 10.1016/J.JSS.2019.110430]
   Magalhaes C, 2020, J SYST SOFTWARE, V159, DOI 10.1016/j.jss.2019.110430
   Magalhaes C, 2016, I BRAZILIAN SYMPOSIUM ON SYSTEMATIC AND AUTOMATED SOFTWARE TESTING (SAST 2016), DOI 10.1145/2993288.2993299
   Mahmood MH, 2017, INT CONF SOFTW ENG, P899, DOI 10.1109/ICSESS.2017.8343055
   Marijan D, 2013, PROC IEEE INT CONF S, P540, DOI 10.1109/ICSM.2013.91
   Najafi A, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P213, DOI 10.1109/ICSE-SEIP.2019.00031
   Park H, 2008, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON INFORMATION SECURITY AND ASSURANCE, P32
   Paterson D, 2019, IEEE INT CONF SOFTW, P346, DOI 10.1109/ICST.2019.00041
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Rothermel G, 1996, IEEE T SOFTWARE ENG, V22, P529, DOI 10.1109/32.536955
   Rothermel G., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P179, DOI 10.1109/ICSM.1999.792604
   Tinelli, TOOLS ALGORITHMS CON, P194
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yu Z, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P883, DOI 10.1145/3338906.3340448
NR 28
TC 3
Z9 3
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 381
EP 403
DI 10.1007/s11219-021-09549-y
EA APR 2021
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000640440000001
DA 2024-07-18
ER

PT J
AU Souza, J
   Pimenta, D
   Caballero, I
   Freitas, A
AF Souza, Julio
   Pimenta, Diana
   Caballero, Ismael
   Freitas, Alberto
TI Measuring data credibility and medical coding: a case study using a
   nationwide Portuguese inpatient database
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Data quality; Diagnosis-related groups; Clinical coding; Hospital
   administration; Data credibility; Support vector machine
ID HOSPITALS RESPOND; DATA QUALITY; SYSTEM; REIMBURSEMENT; PNEUMONIA;
   ACCURACY
AB Some countries have adopted the diagnosis-related groups (DRG) system to pay hospitals according to the number and complexity of patients they treat. Translating diseases and procedures into medical codes based on international standards such as ICD-9-CM or ICD-10-CM/PCS is at the core of the DRG systems. However, certain types of coding errors undermine this system, namely, upcoding, in which data is manipulated by deliberately using medical codes that increase patient's complexity, resulting in higher reimbursements. In this sense, ensuring data credibility in the context of upcoding is critical for an effectively functioning DRG system. We developed a method to measure data credibility in the context of upcoding through a case study using data on pneumonia-related hospitalizations from six public hospitals in Portugal. Frequencies of codes representing pneumonia-related diagnosis and comorbidities were compared between hospitals and support vector machine models to predict DRGs were employed to verify whether codes with discrepant frequencies were related to upcoding. Data were considered not credible if codes with discrepant frequencies were responsible for increasing DRG complexity. Six pneumonia-related diagnoses and fifteen comorbidities presented a higher-than-expected frequency in at least one hospital and a link between increased DRG complexity, and these targeted codes was found. However, overall credibility was very high for nearly all conditions, except for renal disease, which presented the highest percentage of potential upcoding. The main contribution of this paper is a generic and reproducible method that can be employed to monitor data credibility in the context of upcoding in DRG databases.
C1 [Souza, Julio; Pimenta, Diana; Freitas, Alberto] Univ Porto, Fac Med, MEDCIDS Dept Community Med Informat & Hlth Decis, Alameda Prof Hernani Monteiro, P-4200319 Porto, Portugal.
   [Souza, Julio; Freitas, Alberto] CINTESIS Ctr Hlth Technol & Serv Res, R Dr Placido da Costa, P-4200450 Porto, Portugal.
   [Caballero, Ismael] Univ Castilla La Mancha, Informat Syst & Technol Inst ITSI, C Moledores S-N, Ciudad Real 13071, Spain.
C3 Universidade do Porto; Universidad de Castilla-La Mancha
RP Souza, J (corresponding author), Univ Porto, Fac Med, MEDCIDS Dept Community Med Informat & Hlth Decis, Alameda Prof Hernani Monteiro, P-4200319 Porto, Portugal.; Souza, J (corresponding author), CINTESIS Ctr Hlth Technol & Serv Res, R Dr Placido da Costa, P-4200450 Porto, Portugal.
EM juliobsouza@med.up.pt
RI Souza, Julio/AAQ-5915-2021; Freitas, Alberto/C-1972-2012; Caballero,
   Ismael/A-1079-2010; Freitas, Alberto/AAH-3193-2019
OI Freitas, Alberto/0000-0003-2113-9653; Caballero,
   Ismael/0000-0002-5189-1427; Freitas, Alberto/0000-0003-2113-9653; Souza,
   Julio/0000-0002-8576-1903; Pimenta, Diana/0000-0002-8290-6089
FU project GEMA: Generation and Evaluation of Models for Data Quality
   [SBPLY/17/180501/000293]; Master Program in Medical Informatics of the
   Faculty of Medicine and Faculty of Sciences of the University of Porto;
   Spanish Ministry of Science, Innovation and Universities
   [RTI2018-094283-B-C31]; Fundo Europeu de Desenvolvimento Regional
   (FEDER) funds [RTI2018-094283-B-C31]
FX The authors would like to thank the Central Authority for Health
   Services, I.P. (ACSS) for providing access to the data. We would also
   like to thank to project GEMA: Generation and Evaluation of Models for
   Data Quality (Ref.: SBPLY/17/180501/000293) and the Master Program in
   Medical Informatics of the Faculty of Medicine and Faculty of Sciences
   of the University of Porto for financial support. Finally, we thank the
   project ECLIPSE (RTI2018-094283-B-C31), co-funded by the Spanish
   Ministry of Science, Innovation and Universities and Fundo Europeu de
   Desenvolvimento Regional (FEDER) funds.
CR AdministracAo Central do Sistema de Saude, 2014, AGR GDH ALL PAT REF
   AdministracAo Central do Sistema de Saude, 2019, BENCHM HOSP GRUP I
   Aelvoet WH, 2009, REV EPIDEMIOL SANTE, V57, P169, DOI 10.1016/j.respe.2009.02.206
   Aiello FA, 2017, J VASC SURG, V66, P1621, DOI 10.1016/j.jvs.2017.08.030
   Alonso V, 2020, HEALTH INF MANAG J, V49, P28, DOI 10.1177/1833358319826351
   [Anonymous], 2014, INT CLASS DIS
   [Anonymous], 1998, FAST TRAINING SUPPOR
   [Anonymous], 2019, INT CLASS DIS
   [Anonymous], 1999, PRACTICE STAT
   Averill R., 2013, 3M APR DRG CLASSIFIC
   Barros P, 2017, HEALTH ECON, V26, P600, DOI 10.1002/hec.3335
   Carter G.M., 1991, Has DRG Creep Crept Up?
   CARTER GM, 1990, J HEALTH ECON, V9, P411, DOI 10.1016/0167-6296(90)90003-L
   Chong WF, 2011, BMC HEALTH SERV RES, V11, DOI 10.1186/1472-6963-11-105
   Chu A, 2008, ARTIF INTELL MED, V42, P247, DOI 10.1016/j.artmed.2007.10.003
   Dafny LS, 2005, AM ECON REV, V95, P1525, DOI 10.1257/000282805775014236
   Di Giacomo M, 2017, HEALTH ECON, V26, P23, DOI 10.1002/hec.3541
   Feder SL, 2018, WESTERN J NURS RES, V40, P753, DOI 10.1177/0193945916689084
   Freitas A., 2016, ADV INTELLIGENT SYST, V445
   Goodpasture Hewitt, 2004, Jt Comm J Qual Saf, V30, P335
   Hebert PL, 2005, MED CARE RES REV, V62, P560, DOI 10.1177/1077558705279310
   HSIA DC, 1990, JAMA-J AM MED ASSOC, V264, P59, DOI 10.1001/jama.264.1.59
   HSIA DC, 1992, JAMA-J AM MED ASSOC, V268, P896, DOI 10.1001/jama.268.7.896
   ISO/IEC, 2019, 25012 ISOIEC
   Januleviciute J, 2016, HEALTH ECON, V25, P620, DOI 10.1002/hec.3179
   Jarman B, 1999, BMJ-BRIT MED J, V318, P1515, DOI 10.1136/bmj.318.7197.1515
   Lau EC, 2011, CLIN EPIDEMIOL, V3, P259, DOI DOI 10.2147/CLEP.S23690]
   Lüngen M, 2000, DEUT MED WOCHENSCHR, V125, P852, DOI 10.1055/s-2000-7019
   Mathauer I, 2013, B WORLD HEALTH ORGAN, V91, P746, DOI 10.2471/BLT.12.115931
   Pimenta D., 2019, COMMUNICATIONS COMPU, V1010
   Pongpirul K, 2013, ASIAN BIOMED, V7, P301, DOI 10.5372/1905-7415.0703.180
   Psaty BM, 1999, AM J CARDIOL, V84, P108, DOI 10.1016/S0002-9149(99)00205-2
   Quan HD, 2005, MED CARE, V43, P1130, DOI 10.1097/01.mlr.0000182534.19832.83
   Rea Susan, 2013, AMIA Jt Summits Transl Sci Proc, V2013, P214
   Reid B, 2000, HLTH INF MANAG, V29, P113, DOI DOI 10.1177/183335830002900307
   Reid Beth A, 2005, Health Inf Manag, V34, P34, DOI 10.1177/183335830503400204
   Scott I, 2004, QUAL SAF HEALTH CARE, V13, P32, DOI 10.1136/qshc.2002.003996
   Silverman E, 2004, J HEALTH ECON, V23, P369, DOI 10.1016/j.jhealeco.2003.09.007
   Singh A, 2016, PROCEEDINGS OF THE 10TH INDIACOM - 2016 3RD INTERNATIONAL CONFERENCE ON COMPUTING FOR SUSTAINABLE GLOBAL DEVELOPMENT, P1310
   Sjoding MW, 2015, CRIT CARE MED, V43, P989, DOI 10.1097/CCM.0000000000000862
   Souza Julio, 2018, Trends and Advances in Information Systems and Technologies. Advances in Intelligent Systems and Computing (AISC 746), P1198, DOI 10.1007/978-3-319-77712-2_115
   Spangler William E, 2002, J Med Syst, V26, P255, DOI 10.1023/A:1015014402846
   Strong DM, 1997, COMPUTER, V30, P38, DOI 10.1109/2.607057
   Vapnik V., 1999, NATURE STAT LEARNING
   Verplancke T, 2008, BMC MED INFORM DECIS, V8, DOI 10.1186/1472-6947-8-56
   Weiskopf NG, 2013, J AM MED INFORM ASSN, V20, P144, DOI 10.1136/amiajnl-2011-000681
   Yang CW, 2010, 2010 THE 3RD INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE AND INDUSTRIAL APPLICATION (PACIIA2010), VOL VIII, P65
NR 47
TC 2
Z9 2
U1 7
U2 21
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1043
EP 1061
DI 10.1007/s11219-020-09504-3
EA JUN 2020
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA NL6EA
UT WOS:000551454700001
OA Green Published
DA 2024-07-18
ER

PT J
AU Bozic, J
   Wotawa, F
AF Bozic, Josip
   Wotawa, Franz
TI Planning-based security testing of web applications with attack grammars
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Planning; Security testing; Model-based testing; Web applications
AB Web applications are deployed on machines around the globe and offer almost universal accessibility. These applications assure functional interconnectivity between different components on a 24/7 basis. One of the most important requirements is data confidentiality and secure authentication. However, implementation flaws and unfulfilled requirements often result in security leaks that malicious users eventually exploited. In this context, the application of different testing methods is of utmost importance in order to detect software defects during development and to prevent unauthorized access in advance. In this paper, we contribute to test automation for web applications. In particular, we focus on using planning for testing where we introduce underlying models covering attacks and their use in testing of web applications. The planning model offers a high degree of extendibility and configurability and as well overcomes limits of traditional graphical representations. New testing possibilities emerge that eventually lead to better vulnerability detection, therefore ensuring more secure web services and applications.
C1 [Bozic, Josip; Wotawa, Franz] Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
C3 Graz University of Technology
RP Bozic, J (corresponding author), Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
EM jbozic@ist.tugraz.at; wotawa@ist.tugraz.at
OI Bozic, Josip/0000-0001-6086-8846; Wotawa, Franz/0000-0002-0462-2283
CR Anderson J.S., 1989, P 5 INT WORKSH SOFTW
   [Anonymous], 2018, XSS FILTER EVASION C
   [Anonymous], 2018, JSOUP JAVA HTML PARS
   [Anonymous], 2018, OWASP MUTILLIDAE 2 P
   [Anonymous], 2018, OWASP TOP 10 PROJECT
   [Anonymous], 2018, GOOGLE GRUYERE APP E
   [Anonymous], 2018, SQL INJECTION BYPASS
   [Anonymous], 2018, HTML TUTORIAL
   [Anonymous], 2018, GRAMMAR SOLVER
   [Anonymous], 2018, BODGEIT STORE
   [Anonymous], 2017, JAVAGP JAVA IMPLEMEN
   Appelt D., 2014, P 2014 INT S SOFTW T
   Backes M., 2017, ARXIV170505088
   Backus J., 1959, IFIP Congress, P125
   Blum A. L., 1995, IJCAI-95. Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, P1636
   Bozic J., 2018, P 13 INT WORKSH AUT
   Bozic J, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY - COMPANION (QRS-C 2015), P46, DOI 10.1109/QRS-C.2015.19
   Bozic Josip., 2012, Proceedings of the 9th Workshop on Systems Testing and Validation (STV?12), P9
   Buchler M., 2012, IEEE 6 INT C SOFTW S
   CLARKE J., 2012, SQL INJECTION ATTACK
   Duchene Fabien., 2014, P 4 ACM C DATA APPL, P37, DOI DOI 10.1145/2557547.2557550
   Durkota K., 2014, 7 EUR START AI RES S
   Felderer M., 2016, SOFTWARE TESTING VER, V26
   FIKES RE, 1971, ARTIF INTELL, V2, P189, DOI 10.1016/0004-3702(71)90010-5
   Fogie S., 2007, XSS At- tacks: Cross Site Scripting Exploits and Defense
   Ghallab M., 2004, AUTOMATED PLANNING T
   Godefroid P, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P206, DOI 10.1145/1375581.1375607
   Hoffmann J., 2005, P 15 INT C AUT PLANN
   Kramer A., 2016, MODEL BASED TESTING
   Kuhn D.R., 2015, ADV COMPUTERS, V99
   McDermott D., 1998, The AIPS-98 Planning Competition Comitee
   Naur P., 1960, COMMUN ACM, V3, P299
   Raunak M. S., 2017, 2017 IEEE INT C SOFT
   Russell S., 1995, Prentice Hall series in artificial intelligence, V25, P27
   Shameli-Sendi A., 2017, COMPUTER COMMUNICATI
   Shmaryahu D., 2018, P 28 INT C AUT PLANN
   Simos D.E., 2018, SOFTWARE QUALITY J
   Simos D.E., 2016, IFIP INT C TEST SOFT
   Stephens N, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23368
   Su ZD, 2006, ACM SIGPLAN NOTICES, V41, P372, DOI 10.1145/1111320.1111070
   Sudhodanan A., 2016, NDSS 16
   Wotawa F, 2014, LECT NOTES COMPUT SC, V8763, P48, DOI 10.1007/978-3-662-44857-1_4
NR 42
TC 9
Z9 9
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 307
EP 334
DI 10.1007/s11219-019-09469-y
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500013
OA hybrid
DA 2024-07-18
ER

PT J
AU Wu, HW
   Zhang, HL
   Wang, Y
   Rountev, A
AF Wu, Haowei
   Zhang, Hailong
   Wang, Yan
   Rountev, Atanas
TI Sentinel: generating GUI tests for sensor leaks in Android and Android
   wear apps
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Android; GUI; Android Wear; Smartwatch; Energy; Sensor; Static analysis;
   Testing
AB Due to the widespread use of Android devices and apps, it is important to develop tools and techniques to improve app quality and performance. Our work focuses on a problem related to hardware sensors on Android devices: the failure to disable unneeded sensors, which leads to sensor leaks and thus battery drain. We propose the Sentinel testing tool to uncover such leaks. The tool performs static analysis of app code and produces a model which maps GUI events to callback methods that affect sensor behavior. Edges in the model are labeled with symbols representing the acquiring/releasing of sensors and the opening/closing of UI windows. The model is traversed to identify paths that are likely to exhibit sensor leaks during run-time execution based on two context-free languages over the symbol alphabet. The reported paths are then used to generate test cases. The execution of each test case tracks the run-time behavior of sensors and reports observed leaks. This approach has been applied to both open-sourced and closed-sourced regular Android applications as well as watch faces for Android Wear smartwatches. Our experimental results indicate that Sentinel effectively detects sensor leaks, while focusing the testing efforts on a very small subset of possible GUI event sequences.
C1 [Wu, Haowei; Wang, Yan] Google Inc, Mountain View, CA 94043 USA.
   [Zhang, Hailong; Rountev, Atanas] Ohio State Univ, Columbus, OH 43210 USA.
C3 Google Incorporated; University System of Ohio; Ohio State University
RP Zhang, HL (corresponding author), Ohio State Univ, Columbus, OH 43210 USA.
EM haowei@google.com; zhang.4858@osu.edu; wysnow7@gmail.com;
   rountev@cse.ohio-state.edu
RI Wang, Shan/JPX-1098-2023
CR Alshahwan N, 2018, LECT NOTES COMPUT SC, V11036, P3, DOI 10.1007/978-3-319-99241-9_1
   Amalfitano D, 2015, IEEE SOFTWARE, V32, P53, DOI 10.1109/MS.2014.55
   Amalfitano D, 2012, IEEE INT CONF AUTOM, P258, DOI 10.1145/2351676.2351717
   Anandan S, 2012, MATER SCI FORUM, V712, P1, DOI 10.4028/www.scientific.net/MSF.712.1
   [Anonymous], 1991, Ph.D. dissertation
   APKPure, 2018, APKP FREE APKS ONL
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Azim T, 2013, ACM SIGPLAN NOTICES, V48, P641, DOI [10.1145/2509136.2509549, 10.1145/2544173.2509549]
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   Banerjee A, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P127, DOI [10.1109/MobileSoft.2016.037, 10.1145/2897073.2897085]
   Banerjee A, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P139, DOI [10.1109/MobileSoft.2016.038, 10.1145/2897073.2897086]
   Banerjee A, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P588, DOI 10.1145/2635868.2635871
   Choi W, 2013, ACM SIGPLAN NOTICES, V48, P623, DOI [10.1145/2544173.2509552, 10.1145/2509136.2509552]
   Choudhary SR, 2015, IEEE INT CONF AUTOM, P429, DOI 10.1109/ASE.2015.89
   Corral L., INT C MOB WEB INF SY
   Corral L, 2015, 2ND ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS MOBILESOFT 2015, P22, DOI 10.1109/MobileSoft.2015.10
   Cruz Luis, 2017, 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems (MOBILESoft). Proceedings, P46, DOI 10.1109/MOBILESoft.2017.19
   d'Heureuse N, 2012, MOB COMPUT COMMUN RE, V16, P16, DOI 10.1145/2396756.2396759
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Fazzini M, 2017, IEEE INT CONF SOFTW, P149, DOI 10.1109/ICST.2017.21
   Garcia J, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P661, DOI 10.1145/3106237.3106286
   GATOR, 2017, GATOR PROGR AN TOOLK
   Google, 2018, FIR TEST LAB ROB TES
   Google, 2017, MONK UI APPL EX ANDR
   Google, 2018, ANDR WEAR
   Google, 2018, OPT WATCH FAC MOV EX
   Google, 2018, DUMPS
   Google, 2018, ANDR DEB BRIDG ADB
   Google, 2017, UI AUT TEST FRAM
   Google, 2018, MONKEYRUNNER
   Google, 2018, BEST PRACT ACC US SE
   Grano G, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P72, DOI 10.1109/SANER.2018.8330198
   Grove D, 2001, ACM T PROGR LANG SYS, V23, P685, DOI 10.1145/506315.506316
   Hao S, 2014, MOBISYS'14: PROCEEDINGS OF THE 12TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES, P204, DOI 10.1145/2594368.2594390
   He Xiaocong, 2018, PYTHON WRAPPER ANDRO
   Jabbarvand R., 2016, P 25 INT S SOFTWARE, P425, DOI DOI 10.1145/2931037.2931067
   Jabbarvand R, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P208, DOI 10.1145/3106237.3106244
   Jensen C S, 2013, P 2013 INT S SOFTW T, P67, DOI [10.1145/2483760.2483777, DOI 10.1145/2483760.2483777]
   Jiang H, 2017, LECT NOTES COMPUT SC, V10610, P192, DOI 10.1007/978-3-319-68690-5_12
   Lhotak O, 2002, THESIS
   Li L, 2017, INFORM SOFTWARE TECH, V88, P67, DOI 10.1016/j.infsof.2017.04.001
   Li X, 2017, IEEE INT CONF SOFTW, P161, DOI 10.1109/ICST.2017.22
   Linares-Vásquez M, 2017, PROC IEEE INT CONF S, P399, DOI 10.1109/ICSME.2017.27
   Liu X, 2017, MOBISYS'17: PROCEEDINGS OF THE 15TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES, P385, DOI 10.1145/3081333.3081351
   Liu YP, 2014, IEEE T SOFTWARE ENG, V40, P911, DOI 10.1109/TSE.2014.2323982
   Liu YP, 2013, INT CONF PERVAS COMP, P2, DOI 10.1109/PerCom.2013.6526708
   Liu Yepang., 2016, ACM SIGSOFT INT S FD, P296
   Ma J, 2017, P INT COMP SOFTW APP, P23, DOI 10.1109/COMPSAC.2017.161
   Machiry A., 2013, P 2013 9 JOINT M FDN, P224
   Mahmood R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P599, DOI 10.1145/2635868.2635896
   Mao K., 2016, P 25 INT S SOFTW TES, P94
   Mao K, 2017, IEEE SOFTWARE, V34, P11, DOI 10.1109/MS.2017.49
   Min C, 2015, ISWC 2015: PROCEEDINGS OF THE 2015 ACM INTERNATIONAL SYMPOSIUM ON WEARABLE COMPUTERS, P11, DOI 10.1145/2802083.2802085
   Mirzaei N, 2016, PROC INT CONF SOFTW, P559, DOI 10.1145/2884781.2884853
   Moran K, 2016, IEEE INT CONF SOFTW, P33, DOI 10.1109/ICST.2016.34
   Pathak A., 2012, Mobisys, DOI DOI 10.1145/2307636.2307661
   Poyraz E., 2016, IISWC, P1
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Rountev Atanas, 2014, P ANN IEEEACM INT S, P143
   Ryder BG, 2003, LECT NOTES COMPUT SC, V2622, P126
   Sadeghi A, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P220, DOI 10.1145/3106237.3106250
   Skylot, 2018, JADX DEX JAV DEC
   Wang Y., 2016, UNSOUNDNESS STATIC A
   Wu HW, 2018, INT WORKSH AUTOMAT, P27, DOI 10.1145/3194733.3194734
   Wu HW, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P185, DOI 10.1145/2892208.2892218
   Wu TY, 2016, IEEE INT CONF AUTOM, P762, DOI 10.1145/2970276.2970278
   Yang SY, 2018, J AM COLL HEALTH, V66, P693, DOI 10.1080/07448481.2018.1454930
   Yang SQ, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P89, DOI 10.1109/ICSE.2015.31
   Yang SQ, 2015, IEEE INT CONF AUTOM, P658, DOI 10.1109/ASE.2015.76
   Yang W, 2013, LECT NOTES COMPUT SC, V7793, P250, DOI 10.1007/978-3-642-37057-1_19
   Zhang H., 2017, ICSE, P64
   Zhang HL, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P691, DOI 10.1145/3236024.3236073
   Zhang HL, 2016, 2016 IEEE/ACM 11TH INTERNATIONAL WORKSHOP IN AUTOMATION OF SOFTWARE TEST (AST), P64, DOI [10.1109/AST.2016.018, 10.1145/2896921.2896932]
NR 73
TC 7
Z9 7
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 335
EP 367
DI 10.1007/s11219-019-09484-z
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500014
DA 2024-07-18
ER

PT J
AU Kudjo, PK
   Chen, JF
   Mensah, S
   Amankwah, R
   Kudjo, C
AF Kudjo, Patrick Kwaku
   Chen, Jinfu
   Mensah, Solomon
   Amankwah, Richard
   Kudjo, Christopher
TI The effect of Bellwether analysis on software vulnerability severity
   prediction models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Bellwether; Software vulnerability; Feature selection; Machine learning
   algorithms; Severity
ID EMPIRICAL-ANALYSIS; FEATURE-SELECTION; IMPACT; ALGORITHM; METRICS;
   SYSTEM; VRSS
AB Vulnerability severity prediction (VSP) models provide useful insight for vulnerability prioritization and software maintenance. Previous studies have proposed a variety of machine learning algorithms as an important paradigm for VSP. However, to the best of our knowledge, there are no other existing research studies focusing on investigating how a subset of features can be used to improve VSP. To address this deficiency, this paper presents a general framework for VSP using theBellwetheranalysis (i.e.,exemplary data). First, we apply the natural language processing techniques to the textual descriptions of software vulnerability. Next, we developed an algorithm termedBellvulto identify and select an exemplary subset of data (referred to asBellwether) to be considered as the training set to yield improved prediction accuracy against thegrowing portfolio, within-project cases, and thek-fold cross-validation subset. Finally, we assessed the performance of four machine learning algorithms, namely, deep neural network, logistic regression, k-nearest neighbor, and random forest using the sampled instances. The prediction results of the suggested models and the benchmark techniques were assessed based on the standard classification evaluation metrics such as precision, recall, and F-measure. The experimental result shows that theBellwetherapproach achieves F-measure ranging from 14.3% to 97.8%, which is an improvement over the benchmark techniques. In conclusion, the proposed approach is a promising research direction for assisting software engineers when seeking to predict instances of vulnerability records that demand much attention prior to software release.
C1 [Kudjo, Patrick Kwaku; Chen, Jinfu; Amankwah, Richard] Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
   [Mensah, Solomon] Univ Ghana, Dept Comp Sci, Accra, Ghana.
   [Kudjo, Christopher] Valley View Univ, Sch Grad Studies, Accra, Ghana.
C3 Jiangsu University; University of Ghana
RP Chen, JF (corresponding author), Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
EM jinfuchen@ujs.edu.cn
FU National Natural Science Foundation of China (NSFC) [U1836116, 61502205,
   61762040, 61872167]; Project of Jiangsu Provincial Six Talent Peaks
   [XYDXXJS-016]; Graduate Research Innovation Project of Jiangsu Province
   [KYCX17 1807]; Postdoctoral Science Foundation of China [2015 M571687,
   2015 M581739]
FX This study was funded by the National Natural Science Foundation of
   China (NSFC grant numbers: U1836116, 61502205, 61762040, and 61872167),
   the Project of Jiangsu Provincial Six Talent Peaks (Grant numbers:
   XYDXXJS-016), the Graduate Research Innovation Project of Jiangsu
   Province (Grant numbers: KYCX17 1807), and the Postdoctoral Science
   Foundation of China (Grant numbers: 2015 M571687 and 2015 M581739).
CR Amasaki S, 2016, LECT NOTES COMPUT SC, V10027, P627, DOI 10.1007/978-3-319-49094-6_49
   Arora A, 2010, INFORM SYST RES, V21, P115, DOI 10.1287/isre.1080.0226
   Baldwin L., 2018, Research concepts for the practitioner of educational leadership, DOI DOI 10.1163/9789004365155_008
   Bayoud HA, 2021, COMMUN STAT-SIMUL C, V50, P4442, DOI 10.1080/03610918.2019.1643883
   Belsley D. A., 1991, Computer Science in Economics and Management, V4, P33
   Brankovic A, 2018, IEEE T CYBERNETICS, V48, P1151, DOI 10.1109/TCYB.2017.2682418
   Chandra P., 2017, Investment Analysis and Portfolio Management
   Chen B.-C., 2006, Proceeding of the 32nd International Conference on Very Large Data Bases (VLDB'06), P655
   Chen BC, 2009, ACM T KNOWL DISCOV D, V3, DOI 10.1145/1497577.1497582
   Chen CM, 2015, J MATER CHEM C, V3, P33, DOI 10.1039/c4tc02355b
   Cheng PS, 2012, SYM REL DIST SYST, P31, DOI 10.1109/SRDS.2012.4
   COOK RD, 1977, TECHNOMETRICS, V19, P15, DOI 10.2307/1268249
   Debole F, 2004, STUD FUZZ SOFT COMP, V138, P81
   Delacre M, 2017, INT REV SOC PSYCHOL, V30, P92, DOI 10.5334/irsp.82
   Derrick B., 2018, J APPL QUANTITATIVE, V13, P36, DOI DOI 10.20982/TQMP.13.2.P120
   Dhillon I. S., 2003, Journal of Machine Learning Research, V3, P1265, DOI 10.1162/153244303322753661
   Feutrill A, 2018, INT SYMPOS COMPUT NE, P1, DOI 10.1109/CANDAR.2018.00009
   Frost & Sullivan, VULNERABILITY RES MA
   Gastwirth JL, 2009, STAT SCI, V24, P343, DOI 10.1214/09-STS301
   Gu Q, 2009, COMM COM INF SC, V51, P461, DOI 10.1007/978-3-642-04962-0_53
   HAGAN MT, 1994, IEEE T NEURAL NETWOR, V5, P989, DOI 10.1109/72.329697
   Han ZB, 2017, PROC IEEE INT CONF S, P125, DOI 10.1109/ICSME.2017.52
   Holm H, 2012, IEEE T DEPEND SECURE, V9, P825, DOI 10.1109/TDSC.2012.66
   Houmb SH, 2009, 2009 INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY, AND SECURITY (ARES), VOLS 1 AND 2, P718, DOI 10.1109/ARES.2009.151
   Huang SG, 2010, INT C COMPUT ENG APP, P295, DOI 10.1109/ICCEA.2010.209
   Jimenez M, 2016, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2016.15
   Khazaei A, 2016, J INTELL FUZZY SYST, V30, P89, DOI 10.3233/IFS-151733
   Khoshgoftaar TM, 2007, PROC INT C TOOLS ART, P310, DOI 10.1109/ICTAI.2007.46
   Kim T-H., 2004, Financ Res Lett, V1, P56, DOI [DOI 10.1016/S1544-6123(03)00003-5, 10.1016/s1544-6123, DOI 10.1016/S1544-6123, 10.1016/s1544-6123(03)00003-5]
   Kitchenham B, 2017, EMPIR SOFTW ENG, V22, P579, DOI 10.1007/s10664-016-9437-5
   Kondo M, 2019, EMPIR SOFTW ENG, V24, P1925, DOI 10.1007/s10664-018-9679-5
   Krishna R, 2019, IEEE T SOFTWARE ENG, V45, P1081, DOI 10.1109/TSE.2018.2821670
   Krishna R, 2016, IEEE INT CONF AUTOM, P122, DOI 10.1145/2970276.2970339
   Kuwahara E, 2006, SOUTH CALIF LAW REV, V80, P997
   Lamkanfi A, 2011, EUR CON SFTWR MTNCE, P249, DOI 10.1109/CSMR.2011.31
   Last D, 2015, 2015 RESILIENCE WEEK (RSW), P120
   Li XX, 2017, FRONT SUSTAIN FOOD S, V1, DOI 10.3389/fsufs.2017.00002
   Liu QX, 2012, J SYST SOFTWARE, V85, P1699, DOI 10.1016/j.jss.2012.03.057
   Liu QX, 2011, COMPUT COMMUN, V34, P264, DOI 10.1016/j.comcom.2010.04.006
   Liu SL, 2014, P INT COMP SOFTW APP, P426, DOI 10.1109/COMPSAC.2014.66
   Lokan C, 2017, EMPIR SOFTW ENG, V22, P716, DOI 10.1007/s10664-016-9446-4
   Mell P, 2006, IEEE SECUR PRIV, V4, P85, DOI 10.1109/MSP.2006.145
   Mensah S, 2018, IEEE T RELIAB, V67, P1176, DOI 10.1109/TR.2018.2839718
   Mensah S, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P340, DOI 10.1109/QRS.2017.44
   Menzies T, 2017, EMPIR SOFTW ENG, V22, P2658, DOI 10.1007/s10664-016-9472-2
   Munaiah N, 2016, SPRO'16: PROCEEDINGS OF THE 2016 ACM WORKSHOP ON SOFTWARE PROTECTION, P3, DOI 10.1145/2995306.2995311
   Neuhaus S, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P529
   O'Donnell L, 2019, WINDOWS USERS RISK H
   Osman H, 2017, 2017 IEEE INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE), P27, DOI 10.1109/MALTESQUE.2017.7882013
   Pang YF, 2017, CONF TECHNOL APPL, P62, DOI 10.1109/TAAI.2017.42
   Pelleg D., 2000, P 17 INT C MACH LEAR, DOI DOI 10.1007/3-540-44491-2_3
   Porter MF, 2006, PROGRAM-ELECTRON LIB, V40, P211, DOI [10.1108/00330330610681286, 10.1108/eb046814]
   Rahimi S, 2013, IEEE T RELIAB, V62, P395, DOI 10.1109/TR.2013.2257052
   Romano D., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P437, DOI 10.1109/WCRE.2012.53
   Roumani Y, 2015, COMPUT SECUR, V51, P32, DOI 10.1016/j.cose.2015.03.003
   Sahin SE, 2019, PROCEEDINGS OF EASE 2019 - EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING, P244, DOI 10.1145/3319008.3319033
   Scandariato R, 2014, IEEE T SOFTWARE ENG, V40, P993, DOI 10.1109/TSE.2014.2340398
   Seo YS, 2013, EMPIR SOFTW ENG, V18, P659, DOI 10.1007/s10664-012-9207-y
   SHAPIRO SS, 1965, BIOMETRIKA, V52, P591, DOI 10.1093/biomet/52.3-4.591
   Shar LK, 2013, INFORM SOFTWARE TECH, V55, P1767, DOI 10.1016/j.infsof.2013.04.002
   Sharma G, 2015, PROCEDIA COMPUT SCI, V70, P632, DOI 10.1016/j.procs.2015.10.059
   Shin Y, 2011, IEEE T SOFTWARE ENG, V37, P772, DOI 10.1109/TSE.2010.81
   Sibal R, 2017, LIFE CYCLE RELIAB SA, V6, P57, DOI [10.1007/s41872-017-0006-8, DOI 10.1007/S41872-017-0006-8]
   Spanos G., 2013, P 17 PANH C INF, P83, DOI DOI 10.1145/2491845.2491871
   Spanos G, 2018, J SYST SOFTWARE, V146, P152, DOI 10.1016/j.jss.2018.09.039
   Spanos G, 2015, INF SECUR J, V24, P57, DOI 10.1080/19393555.2015.1051675
   Spanos Georgios, 2017, Pan-Hellenic conference on informatics, P1
   Stuckman J, 2017, IEEE T RELIAB, V66, P17, DOI 10.1109/TR.2016.2630503
   Tang XC, 2019, EXPERT SYST APPL, V120, P207, DOI 10.1016/j.eswa.2018.11.018
   Telang R, 2007, IEEE T SOFTWARE ENG, V33, P544, DOI [10.1109/TSE.2007.70712, 10.1109/TSE.2007.1015]
   Toloudis D, 2016, LECT NOTES BUS INF P, V249, P231, DOI 10.1007/978-3-319-39564-7_22
   Valdivia-Garcia H, 2018, J SYST SOFTWARE, V143, P44, DOI 10.1016/j.jss.2018.03.053
   Woo S.-W., 2006, P 10 IASTED SEA, V6, P13
   Xu Z, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P370, DOI 10.1109/SANER.2016.34
   Younis A, 2016, IFIP ADV INF COMM TE, V471, P62, DOI 10.1007/978-3-319-33630-5_5
   Younis A, 2016, SOFTWARE QUAL J, V24, P159, DOI 10.1007/s11219-015-9274-6
   Younis AA, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P252, DOI 10.1109/QRS.2015.44
   Zhang F, 2013, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2013.46
   Zhang S, 2011, Database and expert systems applications, P217, DOI DOI 10.1007/978-3-642-23088-215
   Zhu XL, 2017, APPL INTELL, V47, P828, DOI 10.1007/s10489-017-0925-0
NR 80
TC 13
Z9 14
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1413
EP 1446
DI 10.1007/s11219-019-09490-1
EA JAN 2020
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000574053600001
DA 2024-07-18
ER

PT J
AU Nikravan, E
   Parsa, S
AF Nikravan, Esmaeel
   Parsa, Saeed
TI Improving dynamic domain reduction test data generation method by
   Euler/Venn reasoning system
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Domain coverage; Domain reduction; Test data generation; Euler; Venn
   diagram
AB Test data adequacy is a major challenge in software testing literature. The difficulty is to provide sufficient test data to assure the correctness of the program under test. Especially, in the case of latent faults, the fault does not reveal itself unless specific combinations of input values are used to run the program. In this respect, detection of subdomains of the input domain that cover a specific execution path seems promising. A subdomain covers an execution path provided that each test data taken from the subdomain satisfies the path constraint. Dynamic Domain Reduction, or DDR in short, is a very well-known test data generation procedure, targeted at detection of the subdomains of the input domain that satisfy a given path constraint. In this paper, an improved version of DDR called Rapid Dynamic Domain Reduction, or RDDR in short, is introduced. RDDR is intended to explore subdomains of a program input domain, satisfying a given path constraint. For each feasible path, there is a distinct subdomain of the input domain that causes the program to execute the path. Hereby, we introduce a new metric named domain coverage, to qualify input data sets, in terms of the percentage of the subdomain of a feasible path covered by the data set. The main inspiration behind the domain coverage metric is to support test data adequacy. Our empirical results based on some well-known case studies confirms that RDDR significantly outperforms DDR in terms of speed and accuracy.
C1 [Nikravan, Esmaeel; Parsa, Saeed] Iran Univ Sci & Technol, Sch Comp Engn, Tehran, Iran.
C3 Iran University Science & Technology
RP Nikravan, E (corresponding author), Iran Univ Sci & Technol, Sch Comp Engn, Tehran, Iran.
EM nikravan@comp.iust.ac.ir; parsa@iust.ac.ir
RI parsa, saeed/S-9536-2018
OI parsa, saeed/0000-0003-4381-2773
CR Ammann P., 2016, INTRO SOFTWARE TESTI, DOI [10.1017/9781316771273, DOI 10.1017/9781316771273]
   Anand S., 2007, INT C TOOLS ALG CONS
   [Anonymous], 2004, J SOFTWARE SYSTEM MO
   [Anonymous], 2012, ART SOFTWARE TESTING, DOI DOI 10.1002/9781119202486
   Barwise J., 1995, Cognitive Studies: Bulletin of the Japanese Cognitive Science Society, V2, P7, DOI [10.11225/jcss.2.4_7, DOI 10.11225/JCSS.2.4_7]
   Bjorner N., 2008, TOOLS ALGORITHMS CON
   Chow S., 2003, INT S GRAPH DRAW
   Craig R.D., 2002, SYSTEMATIC SOFTWARE
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   Gotlieb Arnaud., 2006, RT 06, P28
   Offutt AJ, 1999, SOFTWARE PRACT EXPER, V29, P167, DOI 10.1002/(SICI)1097-024X(199902)29:2<167::AID-SPE225>3.0.CO;2-V
   Stapleton G, 2005, ELECTRON NOTES THEOR, V134, P127, DOI 10.1016/j.entcs.2005.02.022
   Swoboda N, 2002, IMPLEMENTING EULER V, P371
   Tillmann N, 2008, INT C TESTS PROOFS
   White L. J., 1981, Computer Program Testing. Proceedings of the Summer School on Computer Program Testing, P103
   WHITE LJ, 1980, IEEE T SOFTWARE ENG, V6, P247, DOI 10.1109/TSE.1980.234486
NR 16
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 823
EP 851
DI 10.1007/s11219-019-09471-4
EA NOV 2019
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000498143100002
DA 2024-07-18
ER

PT J
AU Akiki, PA
AF Akiki, Pierre A.
TI To var or not to var: how do C# developers use and misuse implicit and
   explicit typing?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE C#; Code analysis; Implicit and explicit typing; Readability;
   Consistency
ID JAVA
AB When implicit typing with the "var" keyword was introduced into C#, it prompted contradictory opinions among developers. This paper starts by explaining the difference between implicit and explicit typing and then provides an overview of developers' opinions and guidelines that are available online. This paper then reports on the results of a study that investigated how C# developers use and misuse implicit and explicit typing. This study involved analyzing the source code of 10 different open-source software projects including more than 16,500,000 lines of code and more than 930,000 variables. This study investigated to what extent developers use a form of typing that affects the readability of a variable's type and the length of its declaration. It also investigated whether or not there is an adoption of a consistent set of guidelines in general and across each software project. A tool called "Code Analysis and Refactoring Engine for C#" (Care#) was developed and used to conduct the code analysis for this study.
C1 [Akiki, Pierre A.] Notre Dame Univ Louaize, Dept Comp Sci, NDU, Zouk Mosbeh, Lebanon.
C3 Notre Dame University Lebanon
RP Akiki, PA (corresponding author), Notre Dame Univ Louaize, Dept Comp Sci, NDU, Zouk Mosbeh, Lebanon.
EM pakiki@ndu.edu.lb
CR Al Dallal J, 2018, IEEE T SOFTWARE ENG, V44, P44, DOI 10.1109/TSE.2017.2658573
   Albahari J., 2016, C 6 0 NUTSHELL
   Binkley D, 2007, FoSE 2007: Future of Software Engineering, P104, DOI 10.1109/FOSE.2007.27
   Butler S, 2015, PROC IEEE INT CONF S, P41, DOI 10.1109/ICSM.2015.7332450
   Butler S, 2010, EUR CON SFTWR MTNCE, P156, DOI 10.1109/CSMR.2010.27
   Cabral B, 2007, LECT NOTES COMPUT SC, V4609, P151
   Cacho N, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P584, DOI 10.1145/2568225.2568308
   Cacho N, 2014, PROC IEEE INT CONF S, P31, DOI 10.1109/ICSME.2014.25
   Callaú O, 2013, EMPIR SOFTW ENG, V18, P1156, DOI 10.1007/s10664-012-9203-2
   Capek P, 2015, 2015 INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND COMPUTATIONAL INTELLIGENCE (CSCI), P865, DOI 10.1109/CSCI.2015.90
   Channel9, 2010, MUCH YOU DO YOU USE
   COLEMAN D, 1994, COMPUTER, V27, P44, DOI 10.1109/2.303623
   Deissenboeck F, 2006, SOFTWARE QUAL J, V14, P261, DOI 10.1007/s11219-006-9219-1
   Deitel P., 2018, VISUAL C PROGRAM
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Ge X, 2012, PROC INT CONF SOFTW, P211, DOI 10.1109/ICSE.2012.6227192
   Ghosh S., 2011, International Journal on Computer Science Engineering, V3, P3763
   Griswold W. G., 1993, ACM Transactions on Software Engineering and Methodology, V2, P228, DOI 10.1145/152388.152389
   Griswold W.G., 1991, Program restructuring as an aid to software maintenance
   Hashim K., 1996, Malaysian Journal of Computer Science, V9, P92
   Hejlsberg A., 2008, A HEJLSBERG TALKS C
   IC#Code, 2016, SHARPDEVELOP
   JetBrains, 2018, RESHARPER VAR KEYW
   JetBrains, 2018, RESHARPER
   Kim D, 2013, J OBJECT TECHNOL, V12, DOI 10.5381/jot.2013.12.4.a1
   Lawrie D, 2007, EMPIR SOFTW ENG, V12, P359, DOI 10.1007/s10664-006-9032-2
   Lientz B P., 1980, Software Maintenance Management
   Lippert E., 2011, USES MISUSES IMPLICI
   Ma L, 2017, SOFTWARE QUAL J, V25, P951, DOI 10.1007/s11219-016-9340-8
   Marcus A, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P107, DOI 10.1109/ASE.2001.989796
   Martin Robert C, 2009, Clean Code: a Handbook of Agile Software Craftsmanship
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Microsoft, 2015, C COD CONV C PROGR G
   Microsoft, 2017, ROSL
   Microsoft, 2017, NET COR
   Microsoft, 2015, IMPL TYP LOC VAR C P
   Microsoft, 2015, VAR C REF
   Murphy-Bill E, 2008, IEEE SOFTWARE, V25, P38, DOI 10.1109/MS.2008.123
   Okur S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1117, DOI 10.1145/2568225.2568309
   Okur Semih., 2012, Proceedings of FSE'12, P1, DOI 10.1145/2393596.2393660
   Oliveira J, 2018, J SYST SOFTWARE, V136, P1, DOI 10.1016/j.jss.2017.10.032
   Opdyke W.F., 1992, Refactoring: A Program Restructuring Aid in Designing Object-Oriented Application Frameworks
   Parr T., 2018, ANTLR
   PEERCY DE, 1981, IEEE T SOFTWARE ENG, V7, P343, DOI 10.1109/TSE.1981.234534
   Poole C., 2017, NUNIT
   Shore J., 2004, DESIGN DEBT SOFTWARE
   Soares G, 2010, IEEE SOFTWARE, V27, P52, DOI 10.1109/MS.2010.63
   Szoke G, 2015, IEEE INT WORK C SO, P253, DOI 10.1109/SCAM.2015.7335422
   TIOBE, 2017, TIOBE PROGR COMM IND
   Various, 2014, DEBATE TYPING UNITY
   Vidal SA, 2016, AUTOMAT SOFTW ENG, V23, P501, DOI 10.1007/s10515-014-0175-x
NR 51
TC 0
Z9 1
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1175
EP 1207
DI 10.1007/s11219-018-9426-6
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400009
DA 2024-07-18
ER

PT J
AU Ryu, D
   Jang, JI
   Baik, J
AF Ryu, Duksan
   Jang, Jong-In
   Baik, Jongmoon
TI A transfer cost-sensitive boosting approach for cross-project defect
   prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Boosting; Class imbalance; Cost-sensitive learning; Cross-project defect
   prediction; Software defect prediction; Transfer learning
AB Software defect prediction has been regarded as one of the crucial tasks to improve software quality by effectively allocating valuable resources to fault-prone modules. It is necessary to have a sufficient set of historical data for building a predictor. Without a set of sufficient historical data within a company, cross-project defect prediction (CPDP) can be employed where data from other companies are used to build predictors. In such cases, a transfer learning technique, which extracts common knowledge from source projects and transfers it to a target project, can be used to enhance the prediction performance. There exists the class imbalance problem, which causes difficulties for the learner to predict defects. The main impacts of imbalanced data under cross-project settings have not been investigated in depth. We propose a transfer cost-sensitive boosting method that considers both knowledge transfer and class imbalance for CPDP when given a small amount of labeled target data. The proposed approach performs boosting that assigns weights to the training instances with consideration of both distributional characteristics and the class imbalance. Through comparative experiments with the transfer learning and the class imbalance learning techniques, we show that the proposed model provides significantly higher defect detection accuracy while retaining better overall performance. As a result, a combination of transfer learning and class imbalance learning is highly effective for improving the prediction performance under cross-project settings. The proposed approach will help to design an effective prediction model for CPDP. The improved defect prediction performance could help to direct software quality assurance activities and reduce costs. Consequently, the quality of software can be managed effectively.
C1 [Ryu, Duksan; Jang, Jong-In; Baik, Jongmoon] Korea Adv Inst Sci & Technol, Sch Comp, 291 Daehak Ro,373-1 Guseong Dong, Daejeon 305701, South Korea.
C3 Korea Advanced Institute of Science & Technology (KAIST)
RP Ryu, D (corresponding author), Korea Adv Inst Sci & Technol, Sch Comp, 291 Daehak Ro,373-1 Guseong Dong, Daejeon 305701, South Korea.
EM dsryu@kaist.ac.kr; forestar0719@kaist.ac.kr; jbaik@kaist.ac.kr
RI Ryu, Duksan/AAY-6819-2020; Baik, Jongmoon/C-1780-2011
OI Ryu, Duksan/0000-0002-9556-0873; 
FU National Research Foundation of Korea (NRF) - Korea government (Ministry
   of Science, ICT and Future Planning (MSIP)) [NRF-2013R1A1A2006985];
   Institute for Information & communications Technology Promotion (IITP) -
   Korea government (MSIP) [R0101-15-0144]; Ministry of Public Safety &
   Security (MPSS), Republic of Korea [R0101-15-0144] Funding Source: Korea
   Institute of Science & Technology Information (KISTI), National Science
   & Technology Information Service (NTIS)
FX This work was partly supported by the National Research Foundation of
   Korea (NRF) grant funded by the Korea government (Ministry of Science,
   ICT and Future Planning (MSIP)) (No. NRF-2013R1A1A2006985) and Institute
   for Information & communications Technology Promotion (IITP) grant
   funded by the Korea government (MSIP) (No. R0101-15-0144, Development of
   Autonomous Intelligent Collaboration Framework for Knowledge Bases and
   Smart Devices).
CR [Anonymous], 2010, Proceedings of 2010 IEEE Conference on Computer Vision and Pattern Recognition, DOI DOI 10.1109/CVPR.2010.5539857
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chen L, 2015, INFORM SOFTWARE TECH, V62, P67, DOI 10.1016/j.infsof.2015.01.014
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Dai Wenyuan, 2007, P 24 INT C MACHINE L, P193
   Dejaeger K, 2013, IEEE T SOFTWARE ENG, V39, P237, DOI 10.1109/TSE.2012.20
   Eaton E., 2011, SELECTIVE TRANSFER L, P337
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Fan W., 1999, ICML
   Freund Y, 1997, J COMPUT SYST SCI, V55, P119, DOI 10.1006/jcss.1997.1504
   Grbac T., 2013, SQAMIA
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   Henderson-Sellers B., 1995, Object-oriented metrics: measures of complexity
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Jureczko M., 2010, Model Methods Syst Dependability Oficyna Wydawnicza Politech Wroclawskiej, P69
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Martin R., 1994, ANAL DEPENDENCIES, V12, P151
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mei-Huei Tang, 1999, Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403), P242, DOI 10.1109/METRIC.1999.809745
   Menzies T., 2012, The PROMISE Repository of empirical software engineering data
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P637, DOI 10.1109/TSE.2007.70721
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Ryu D, 2016, EMPIR SOFTW ENG, V21, P43, DOI 10.1007/s10664-014-9346-4
   Shi XX, 2008, LECT NOTES ARTIF INT, V5212, P342
   Singh Y, 2010, SOFTWARE QUAL J, V18, P3, DOI 10.1007/s11219-009-9079-6
   Tan Pang-Ning., 2005, Journal of School Psychology, V19, P51
   Thomas Zimmermann., 2009, P THE 7 JOINT M EURO, P91, DOI DOI 10.1145/1595696.1595713
   TOMEK I, 1976, IEEE T SYST MAN CYB, V6, P769, DOI 10.1109/tsmc.1976.4309452
   Turhan B, 2013, INFORM SOFTWARE TECH, V55, P1101, DOI 10.1016/j.infsof.2012.10.003
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Vargha A, 2000, J EDUC BEHAV STAT, V25, P101, DOI 10.3102/10769986025002101
   Wang BX, 2010, KNOWL INF SYST, V25, P1, DOI 10.1007/s10115-009-0198-y
   Wang S., 2010, P INT JOINT C NEUR N, P1, DOI [DOI 10.1109/IJCNN.2010.5596702, 10.1109/ISPACS.2010.5704770]
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
NR 42
TC 88
Z9 103
U1 3
U2 21
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 235
EP 272
DI 10.1007/s11219-015-9287-1
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400010
DA 2024-07-18
ER

PT J
AU Madeyski, L
   Jureczko, M
AF Madeyski, Lech
   Jureczko, Marian
TI Which process metrics can significantly improve defect prediction
   models? An empirical study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software metrics; Product metrics; Process metrics; Defect prediction
   models; Software defect prediction
ID SOFTWARE; FAULTS; HISTORY; VALIDATION; NUMBER
AB The knowledge about the software metrics which serve as defect indicators is vital for the efficient allocation of resources for quality assurance. It is the process metrics, although sometimes difficult to collect, which have recently become popular with regard to defect prediction. However, in order to identify rightly the process metrics which are actually worth collecting, we need the evidence validating their ability to improve the product metric-based defect prediction models. This paper presents an empirical evaluation in which several process metrics were investigated in order to identify the ones which significantly improve the defect prediction models based on product metrics. Data from a wide range of software projects (both, industrial and open source) were collected. The predictions of the models that use only product metrics (simple models) were compared with the predictions of the models which used product metrics, as well as one of the process metrics under scrutiny (advanced models). To decide whether the improvements were significant or not, statistical tests were performed and effect sizes were calculated. The advanced defect prediction models trained on a data set containing product metrics and additionally Number of Distinct Committers (NDC) were significantly better than the simple models without NDC, while the effect size was medium and the probability of superiority (PS) of the advanced models over simple ones was high (, , ), which is a substantial finding useful in defect prediction. A similar result with slightly smaller PS was achieved by the advanced models trained on a data set containing product metrics and additionally all of the investigated process metrics (, , ). The advanced models trained on a data set containing product metrics and additionally Number of Modified Lines (NML) were significantly better than the simple models without NML, but the effect size was small (, ). Hence, it is reasonable to recommend the NDC process metric in building the defect prediction models.
C1 [Madeyski, Lech; Jureczko, Marian] Wroclaw Univ Technol, PL-50370 Wroclaw, Poland.
C3 Wroclaw University of Science & Technology
RP Madeyski, L (corresponding author), Wroclaw Univ Technol, Wyb Wyspianskiego 27, PL-50370 Wroclaw, Poland.
EM Lech.Madeyski@pwr.edu.pl; Marian.Jureczko@pwr.edu.pl
RI Madeyski, Lech/D-4986-2012; Jureczko, Marian/ABD-6609-2020
OI Madeyski, Lech/0000-0003-3907-3357; 
CR [Anonymous], 2007, Proceedings of the 3rd International Workshop on Predictor Models in Software Engineering
   [Anonymous], USING OBJECT ORIENTE
   [Anonymous], 2012, EFFECT SIZES RES UNI
   [Anonymous], 2006, ISESE '06: Proceedings of the 5th International Symposium on Empirical Software Engineering. Volume II: Short Papers and Posters, DOI DOI 10.1145/1159733.1159739.
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Antoniol G, 2008, P 2008 C CTR ADV STU, P304
   Arisholm E., 2006, ISESE 06 P 2006 ACMI, P8
   Bacchelli A, 2010, LECT NOTES COMPUT SC, V6013, P59
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Bell R., 2006, Proc. 2006 International Symposium on Software Testing and Analysis, P61
   BOEHM BW, 1988, IEEE T SOFTWARE ENG, V14, P1462, DOI 10.1109/32.6191
   Campbell, 2002, EXPT QUASIEXPERIMENT
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cook T., 1979, Quasi experimental design and analysis
   D'Ambros Marco, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P23, DOI 10.1109/QSIC.2010.58
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Denaro G, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P241, DOI 10.1109/ICSE.2002.1007972
   Dunlap WP, 1996, PSYCHOL METHODS, V1, P170, DOI 10.1037/1082-989X.1.2.170
   Endres A., 2003, A Handbook of Software and Systems Engineering: Empirical Observations, Laws, and Theories
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Fenton Norman., 2007, Proceedings of the 29th International Conference on Software Engineering Workshops, P69
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Giger E, 2011, P 8 WORK C MIN SOFTW, P83, DOI [10.1145/1985441.1985456, DOI 10.1145/1985441.1985456]
   Giger Emanuel., 2011, P 12 INT WORKSHOP PR, P51
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   Henderson-Sellers B., 1996, Object-Oriented Metrics, measures of complexity
   Illes-Seifert T, 2010, INFORM SOFTWARE TECH, V52, P539, DOI 10.1016/j.infsof.2009.11.010
   Jureczko M., 2011, Metody Informatyki Stosowanej, V5, P133
   Jureczko M., 2011, 12014 SPR WROCL U TE
   Jureczko M., 2011, 22014 SPR WROCL U TE
   Jureczko M., 2010, P 6 INT C PREDICTIVE
   Jureczko M., 2012, J THEORETICAL APPL S, V6, P35
   Kalinowski M, 2012, IEEE SOFTWARE, V29, P16, DOI 10.1109/MS.2012.72
   Kampenes VB, 2007, INFORM SOFTWARE TECH, V49, P1073, DOI 10.1016/j.infsof.2007.02.015
   Khoshgoftaar TM, 1998, COMPUTER, V31, P66, DOI 10.1109/2.666844
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Kitchenham B, 2010, J SYST SOFTWARE, V83, P37, DOI 10.1016/j.jss.2009.06.041
   Layman L, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P206
   Madeyski L, 2010, TEST-DRIVEN DEVELOPMENT, P197, DOI 10.1007/978-3-642-04288-1_10
   Martin R., 1994, An Analysis of Dependencies, V12, P151
   Matsumoto S, 2010, P 6 INT C PREDICTIVE, P1, DOI DOI 10.1145/1868328.1868356
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mei-Huei Tang, 1999, Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403), P242, DOI 10.1109/METRIC.1999.809745
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Nagappan Nachiappan, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P364
   Nagappan N., 2010, TECHNICAL REPORT
   Nagappan N, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P521, DOI 10.1145/1368088.1368160
   Ostrand T. J., 2002, Software Engineering Notes, V27, P55, DOI 10.1145/566171.566181
   Ostrand T. J., 2010, P 6 INT C PRED MOD S, P19, DOI [DOI 10.1145/1868328, 10.1145/1868328]
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Ostrand TJ., 2004, Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA '04, V29, P86, DOI [DOI 10.1145/1013886.1007524, 10.1145/1013886.1007524]
   PETROSKI H, 1985, ENG HUMAN ROLE FAILU
   Purao S, 2003, ACM COMPUT SURV, V35, P191, DOI 10.1145/857076.857090
   Purushothaman R, 2005, IEEE T SOFTWARE ENG, V31, P511, DOI 10.1109/TSE.2005.74
   Ratzinger J, 2007, LECT NOTES COMPUT SC, V4422, P12
   Rosenthal R, 2001, ANNU REV PSYCHOL, V52, P59, DOI 10.1146/annurev.psych.52.1.59
   Rosenthal R., 1991, METAANALYTIC PROCEDU
   Shihab E., 2010, Proceedings of the ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, P1
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   Wahyudin D, 2008, PROCEEDINGS OF THE 34TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, P207, DOI 10.1109/SEAA.2008.36
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   Weyuker ElaineJ., 2006, Proceedings of the Second International Promise Workshop, P1, DOI DOI 10.1145/857076.857090
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 71
TC 116
Z9 119
U1 1
U2 29
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2015
VL 23
IS 3
BP 393
EP 422
DI 10.1007/s11219-014-9241-7
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG8PX
UT WOS:000353572800002
OA hybrid
DA 2024-07-18
ER

PT J
AU Suominen, M
   Mäkinen, T
AF Suominen, Mika
   Makinen, Timo
TI On the applicability of capability models for small software
   organizations: does the use of standard processes lead to a better
   achievement of business goals?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE ISO/IEC 15504; Software process improvement; Standard processes; Small
   software organizations; Business goals; Complexity
ID SIGNALING THEORY
AB The ISO/IEC 15504 standard implies that the use of its level-based capability model for software process development leads to a better business performance. At capability level 3, this would mean that there is not only a positive correlation but also a causal relation from the use of standard processes to better achievement of business goals. In this paper, we make this claim explicit and challenge it with a counterargument in the context of small software organizations. We argue that in most part, the way the software is designed is what determines the business success in software development, and when application domains are complex socio-technical systems, relying on a standard process instead of human expertise not only fails to answer the promise of process stability but also presents business risks related to poor design, a loss of diversity, and reduced adaptability. With reasons to believe that the standard's claim is weak in this context, we come up with alternative explanations for why some small software organizations nevertheless use standard processes. Through these hypotheses, we argue that the reasons are not necessarily process-related. In closing, we suggest further studies on how the standard's notion of process capability and business goals relate to each other when the application domain is not just complicated but complex.
C1 [Suominen, Mika] Elinar Oy Ltd, Pori, Finland.
   [Makinen, Timo] Tampere Univ Technol, Pori, Finland.
C3 Tampere University
RP Suominen, M (corresponding author), Elinar Oy Ltd, Pori, Finland.
EM mika.suominen@elinar.fi; timo.makinen@tut.fi
CR [Anonymous], 2002, 155042 ISOIEC FDIS, P26
   [Anonymous], 2004, 155041 ISOIEC FDIS, P20
   [Anonymous], 2003, 155044 ISOIEC FDIS, P33
   Bird RB, 2005, CURR ANTHROPOL, V46, P221, DOI 10.1086/427115
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Bostrom RP., 1977, MIS Quarterly, V1, P11, DOI [10.2307/248710, DOI 10.2307/249019, DOI 10.2307/248710, 10.2307/249019]
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Connelly BL, 2011, J MANAGE, V37, P39, DOI 10.1177/0149206310388419
   Holland J. H., 2006, Journal of Systems Science and Complexity, V19, P1, DOI 10.1007/s11424-006-0001-z
   Kahneman D., 2011, THINKING FAST SLOW, P499
   McKelvey B., 2005, Strategic Organization, V3, P219, DOI 10.1177/1476127005052700
   Page S.E., 2010, DIVERSITY COMPLEXITY, P296
   Relyea D. B., 2011, PRACTICAL APPL PROCE, P153
   Searle J., 2010, Making the Social World, P224
   Searle J. R., 2011, PHILOS SOC
   Spence M, 2002, AM ECON REV, V92, P434, DOI 10.1257/00028280260136200
   Suominen M., 2011, THESIS TAMPERE U TEC, P73
   Taleb NN., 2007, BLACK SWAN IMPACT HI, P366
   Trienekens JJM, 2009, SOFTWARE QUAL J, V17, P231, DOI 10.1007/s11219-008-9063-6
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
   Vasconcelos F.C., 2009, J BUS RES, V64, P236
NR 21
TC 1
Z9 2
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2014
VL 22
IS 4
BP 579
EP 591
DI 10.1007/s11219-013-9201-7
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA AR8NQ
UT WOS:000343832100002
DA 2024-07-18
ER

PT J
AU Lochau, M
   Oster, S
   Goltz, U
   Schürr, A
AF Lochau, Malte
   Oster, Sebastian
   Goltz, Ursula
   Schuerr, Andy
TI Model-based pairwise testing for feature interaction coverage in
   software product line engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software product lines; Model-based engineering and testing; Test
   generation and coverage; Combinatorial testing; Feature interaction
ID STATECHARTS
AB Testing software product lines (SPLs) is very challenging due to a high degree of variability leading to an enormous number of possible products. The vast majority of today's testing approaches for SPLs validate products individually using different kinds of reuse techniques for testing. Because of their reusability and adaptability capabilities, model-based approaches are suitable to describe variability and are therefore frequently used for implementation and testing purposes of SPLs. Due to the enormous number of possible products, individual product testing becomes more and more infeasible. Pairwise testing offers one possibility to test a subset of all possible products. However, according to the best of our knowledge, there is no contribution discussing and rating this approach in the SPL context. In this contribution, we provide a mapping between feature models describing the common and variable parts of an SPL and a reusable test model in the form of statecharts. Thereby, we interrelate feature model-based coverage criteria and test model-based coverage criteria such as control and data flow coverage and are therefore able to discuss the potentials and limitations of pairwise testing. We pay particular attention to test requirements for feature interactions constituting a major challenge in SPL engineering. We give a concise definition of feature dependencies and feature interactions from a testing point of view, and we discuss adequacy criteria for SPL coverage under pairwise feature interaction testing and give a generalization to the T-wise case. The concept and implementation of our approach are evaluated by means of a case study from the automotive domain.
C1 [Oster, Sebastian; Schuerr, Andy] Tech Univ Darmstadt, Real Time Syst Grp, Darmstadt, Germany.
   [Lochau, Malte; Goltz, Ursula] TU Braunschweig, Inst Programming & React Syst, Braunschweig, Germany.
C3 Technical University of Darmstadt; Braunschweig University of Technology
RP Oster, S (corresponding author), Tech Univ Darmstadt, Real Time Syst Grp, Darmstadt, Germany.
EM lochau@ips.cs.tu-bs.de; oster@es.tu-darmstadt.de; goltz@ips.cs.tu-bs.de;
   schuerr@es.tu-darmstadt.de
CR [Anonymous], VAMOS 08
   [Anonymous], MODEL BASED TESTING
   [Anonymous], THESIS G MASON U
   [Anonymous], CMUSEI2001TR022
   [Anonymous], 2004, SIGSOFT SOFTWARE ENG
   [Anonymous], 2004, P INT WORKSHOP SOFTW
   Belli F, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P718
   Bogdanov K, 1999, LECT NOTES COMPUT SC, V1641, P107
   Calder M, 2003, COMPUT NETW, V41, P115, DOI 10.1016/S1389-1286(02)00352-3
   Cichos H., 2011, LECT NOTES COMPUTER
   Cohen DavidM., 1994, Proc. Fifth International Symposium on Software Reliability Engineering, P303, DOI [10.1109/ISSRE.1994.341392, DOI 10.1109/ISSRE.1994.341392]
   Cohen M.B., 2007, P 2007 INT S SOFTW T, P129
   Cohen M.B., 2006, P ISSTA 2006 WORKSHO, P53, DOI DOI 10.1145/1147249.1147257
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, P7, DOI 10.1002/spip.213
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, P143, DOI 10.1002/spip.225
   Czarnecki K, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P22, DOI 10.1109/SPLC.2008.49
   Dominguez A. L. J., 2008, INT WORKSHOP MODELIN, P45
   Dziobek C., 2009, MBEES, P36
   Ferber S., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P235
   Gronniger H., 2008, MODELLIERUNG
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Heymans P, 2008, IET SOFTW, V2, P281, DOI 10.1049/iet-sen:20070055
   Hong HS, 2000, SOFTW TEST VERIF BEH, V10, P203, DOI 10.1002/1099-1689(200012)10:4<203::AID-STVR212>3.0.CO;2-2
   Kang K. C., 1990, D91 SECURESCM
   Kishi T., 2004, SOFTWARE PRODUCT LIN, P19
   Kolb R., 2003, Proceedings of the 7th Conference on Quality Engineering in Software Technology, CONQUEST, P81
   Lei Y, 1998, THIRD IEEE INTERNATIONAL HIGH-ASSURANCE SYSTEMS ENGINEERING SYMPOSIUM, PROCEEDINGS, P254, DOI 10.1109/HASE.1998.731623
   Lochau M., 2010, P 6 INT WORKSH MOD B
   Luna C, 2008, P INT C CHIL COMPUT, P32, DOI 10.1109/SCCC.2008.19
   MASIERO PC, 1994, INFORM SOFTWARE TECH, V36, P615, DOI 10.1016/0950-5849(94)90021-3
   Metzger A, 2005, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VIII, P198
   Metzger A, 2004, COMPUT NETW, V45, P625, DOI 10.1016/j.comnet.2004.03.002
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Muller T., 2009, 06 TU BS
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   OMG, 2009, VERSION 2 2 OMG SPEC
   Oster S., 2009, P INT SOFTW PROD LIN
   Oster S, 2010, LECT NOTES COMPUT SC, V6287, P196, DOI 10.1007/978-3-642-15579-6_14
   Oster Sebastian., 2011, P 5 WORKSHOP VARIABI, DOI [DOI 10.1145/1944892.1944901, 10.1145/1944892.1944901]
   Perrouin Gilles, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P459, DOI 10.1109/ICST.2010.43
   Pohl K., 2005, Software Product Line Engineering: Foundations, Principles and Techniques, V1, DOI [10.1007/3-540-28901-1, DOI 10.1007/3-540-28901-1]
   Pretschner A., 2004, Methodological Issues in Model-Based Testing, P281
   Reuys A, 2005, LECT NOTES COMPUT SC, V3520, P519
   Souza S., 2000, P LAT AM C INF, P167
   Stevens B., 1998, P C CTR ADV STUD COL
   Utting M., 2007, PRACTICAL MODEL BASE
   van Glabbeek R, 2001, ACTA INFORM, V37, P229, DOI 10.1007/s002360000041
   von der Beeck M., 1994, Formal Techniques in Real-Time and Fault-Tolerant Systems. Third International Symposium Proceedings. ProCoS, P128
   Weissleder S., 2008, P 1 WORKSH MOD BAS T
   White J, 2009, J SYST SOFTWARE, V82, P1268, DOI 10.1016/j.jss.2009.02.011
NR 52
TC 26
Z9 28
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2012
VL 20
IS 3-4
SI SI
BP 567
EP 604
DI 10.1007/s11219-011-9165-4
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 995IQ
UT WOS:000308001900005
DA 2024-07-18
ER

PT J
AU Franke, U
   Johnson, P
   König, J
   von Würtemberg, LM
AF Franke, Ulrik
   Johnson, Pontus
   Konig, Johan
   von Wurtemberg, Liv Marcks
TI Availability of enterprise IT systems: an expert-based Bayesian
   framework
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Systems availability; High availability; Downtime; Bayesian networks;
   Noisy-OR; Expert elicitation
AB Ensuring the availability of enterprise IT systems is a challenging task. The factors that can bring systems down are numerous, and their impact on various system architectures is difficult to predict. At the same time, maintaining high availability is crucial in many applications, ranging from control systems in the electric power grid, over electronic trading systems on the stock market to specialized command and control systems for military and civilian purposes. This paper describes a Bayesian decision support model, designed to help enterprise IT system decision-makers evaluate the consequences of their decisions by analyzing various scenarios. The model is based on expert elicitation from 50 experts on IT systems availability, obtained through an electronic survey. The Bayesian model uses a leaky Noisy-OR method to weigh together the expert opinions on 16 factors affecting systems availability. Using this model, the effect of changes to a system can be estimated beforehand, providing decision support for improvement of enterprise IT systems availability. The Bayesian model thus obtained is then integrated within a standard, reliability block diagram-style, mathematical model for assessing availability on the architecture level. In this model, the IT systems play the role of building blocks. The overall assessment framework thus addresses measures to ensure high availability both on the level of individual systems and on the level of the entire enterprise architecture. Examples are presented to illustrate how the framework can be used by practitioners aiming to ensure high availability.
C1 [Franke, Ulrik; Johnson, Pontus; Konig, Johan; von Wurtemberg, Liv Marcks] Royal Inst Technol, Stockholm, Sweden.
C3 Royal Institute of Technology
RP Franke, U (corresponding author), Royal Inst Technol, Stockholm, Sweden.
EM ulrikf@ics.kth.se; pj101@ics.kth.se; johank@ics.kth.se; livm@ics.kth.se
RI ; Johnson, Pontus/C-5796-2014
OI Franke, Ulrik/0000-0003-2017-7914; Johnson, Pontus/0000-0002-3293-1681
CR [Anonymous], 1991, EXPERTS UNCERTAINTY
   [Anonymous], 2003, Blueprints for High Availability
   Ashrafi N., 2002, IEEE T RELIAB, V43, P344
   Askaker J., 2008, MILJARDAFFARER GICK, P6
   Baecher G., 1988, JUDGEMENTAL PROBABIL
   Blaxter L., 2006, RESEARCH, V3rd
   Campbell K., 2003, Journal of Computer Security, V11, P431
   Chen L., 1978, FTCS-8. The Eighth Annual International Conference on Fault-Tolerant Computing, P3
   Czaja R., 2005, DESIGNING SURVEYS, V2nd
   Druzdzel MJ, 1999, J AM MED INFORM ASSN, P1206
   Fenton N.E., 1997, SOFTWARE METRICS
   Fowler F., 2013, Survey research methods, V5th
   Franke U., 2010, P 5 TRENDS ENT ARCH
   Franke U., 2010, P 4 INT WORKSH SOFTW
   Friedman N, 2000, J COMPUT BIOL, V7, P601, DOI 10.1089/106652700750050961
   Friedman N., 1999, GRAPH MODELS, P421
   Garthwaite PH, 2005, J AM STAT ASSOC, V100, P680, DOI 10.1198/016214505000000105
   Henrion M., 1989, Proceedings of the 3rd Conference on Uncertainty in Artificial Intelligence, P161
   IBM Global Services, 1998, IMPR SYST AV
   Jensen F. V., 2007, Bayesian networks and decision graphs
   Johansson F, 2006, 2006 9 INT C INF FUS, P1
   Lagerstrom R., 2009, International Journal of Computer Science and Applications, V6, P89, DOI DOI 10.1007/S11219-010-9100-0
   Lagerstrom R., 2009, 3 INT WORKSH SOFTW Q
   Laird L., 2006, Software Measurement and Estimation: A Practical Approach
   Malek M, 2008, LECT NOTES COMPUT SC, V5017, P207
   Malik B., 2009, Q A MUCH SOES HOUR D
   Mangione T.W., 1995, Mail surveys: Improving the quality, V40
   Milanovic N, 2008, IEEE CONGRESS ON SERVICES 2008, PT I, PROCEEDINGS, P315, DOI 10.1109/SERVICES-1.2008.9
   Musa J., 1999, SOFTWARE RELIABILITY
   Neapolitan R., 2003, Learning Bayesian networks, P543
   Onisko A, 2001, INT J APPROX REASON, V27, P165, DOI 10.1016/S0888-613X(01)00039-1
   Pearl J., 1988, PROBABILISTIC REASON
   Pham H., 2000, SOFTWARE RELIABILITY
   Rausand M, 2004, SYSTEM RELIABILITY T
   Renooij S., 2001, THESIS UTRECHT U UTR
   Sallak M., 2006, WORKSH ADV CONTR DIA
   Scott D., 2009, ASSESS YOUR IT SERVI
   SHACHTER RD, 1988, OPER RES, V36, P589, DOI 10.1287/opre.36.4.589
   Woodberry O., 2005, ADV ARTIFICIAL INTEL, P1101
   Zhang R., 2009, WORKSH AN SYST LOGS
   Zhang XM, 2000, J SYST SOFTWARE, V50, P43, DOI 10.1016/S0164-1212(99)00075-8
   [No title captured]
NR 42
TC 21
Z9 25
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2012
VL 20
IS 2
SI SI
BP 369
EP 394
DI 10.1007/s11219-011-9141-z
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 935GT
UT WOS:000303507800006
DA 2024-07-18
ER

PT J
AU Just, R
   Schweiggert, F
AF Just, Rene
   Schweiggert, Franz
TI Automating unit and integration testing with partial oracles
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test automation; Partial oracles; Metamorphic testing; Integration
   testing; Mutation analysis; Random testing
ID MUTATION
AB The oracle problem is an essential part in current research on automating software tests. Partial oracles seem to be a viable solution, but their suitability for different testing steps and general applicability for various systems remains still to be shown. This paper presents a study in which partial oracles are applied in order to automatically test a jpeg2000 encoder as an example for a modular software system with several integrated units and components. The effectiveness of the partial oracles is measured by means of mutation analysis to determine their adequacy for both unit and integration testing. Additionally, the paper presents possibilities of improving the effectiveness as well as the efficiency of the employed partial oracles. It shows how the knowledge of certain characteristics of the system to be tested, such as linearity or time-invariance, may lead to a better choice of partial oracles and thus to an improved effectiveness and efficiency.
C1 [Just, Rene; Schweiggert, Franz] Univ Ulm, Dept Appl Informat Proc, D-89069 Ulm, Germany.
C3 Ulm University
RP Just, R (corresponding author), Univ Ulm, Dept Appl Informat Proc, D-89069 Ulm, Germany.
EM rene.just@uni-ulm.de; franz.schweiggert@uni-ulm.de
CR Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], SOFTWARE
   [Anonymous], 1999, Testing Object-Oriented Systems: Models, Patterns, and Tools
   [Anonymous], P 8 INT S FUT SOFTW
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Budd T., 1980, THESIS YALE U
   Chen TS, 2004, 2004 IEEE INTERNATIONAL CONFERNECE ON E-TECHNOLOGY, E-COMMERE AND E-SERVICE, PROCEEDINGS, P567
   Chen TY, 2003, INFORM SOFTWARE TECH, V45, P1, DOI 10.1016/S0950-5849(02)00129-5
   Christopoulos C, 2000, IEEE T CONSUM ELECTR, V46, P1103, DOI 10.1109/30.920468
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Guderlei Ralph, 2008, 2008 IEEE International Conference on Software Testing Verification and Validation Workshop (ICSTW), P360, DOI 10.1109/ICSTW.2008.11
   Just Rene., 2010, Proceedings of the 5th Workshop on Automation of Software Test, AST '10, P91
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Ma YS, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P352, DOI 10.1109/ISSRE.2002.1173287
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   Skodras A, 2001, IEEE SIGNAL PROC MAG, V18, P36, DOI 10.1109/79.952804
   Visser W., 2004, P 2004 ACM SIGSOFT I, P97, DOI [DOI 10.1145/1007512.1007526, 10.1145/1007512.1007526]
   VOAS JM, 1992, IEEE T SOFTWARE ENG, V18, P717, DOI 10.1109/32.153381
   WEYUKER EJ, 1982, COMPUT J, V25, P465, DOI 10.1093/comjnl/25.4.465
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 21
TC 9
Z9 13
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2011
VL 19
IS 4
SI SI
BP 753
EP 769
DI 10.1007/s11219-011-9151-x
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 814RN
UT WOS:000294474900007
DA 2024-07-18
ER

PT J
AU dos Santos, RP
   de Oliveira, KM
   da Silva, WP
AF dos Santos, Rodrigo Pinheiro
   de Oliveira, Kathia Marcal
   da Silva, Wander Pereira
TI Evaluating the service quality of software providers appraised in
   CMM/CMMI
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Capability Maturity Model (CMM); Capability Maturity Model Integration
   (CMMI); Service quality assessment; SERVQUAL
ID REASSESSMENT; EXPECTATIONS
AB Recently, several companies have decided to adopt maturity models such as the CMM/CMMI to ensure quality software processes. The state year report of the Software Engineering Institute (SEI) showed that more than three thousand CMMI appraisals have been conducted since 2002. Many of these were performed at software providers, i.e. companies that develop software for other companies. Although the costs of the implementation and appraisal of CMM/CMMI are high for the software providers, there is no formal study investigating whether this investment pays off or, in other words, whether their customers are measurably satisfied with the quality of the service provided. This article presents the results of a formal evaluation of customer perception of the service quality offered by the software providers appraised in CMM/CMMI. We developed an instrument based on a widely used service quality evaluation model (SERVQUAL) and applied this instrument to several customers of software providers appraised in CMM/CMMI. The results show a considerable discrepancy between customers' expectations and their perceptions of the services provided.
C1 Univ Catolica Brasilia, BR-70 79016 Brasilia, DF, Brazil.
   [dos Santos, Rodrigo Pinheiro; de Oliveira, Kathia Marcal; da Silva, Wander Pereira] Univ Catolica Brasilia, SGAN 916 Norte Av W5, BR-70790160 Brasilia, DF, Brazil.
C3 Universidade Catolica de Brasilia; Universidade Catolica de Brasilia
RP de Oliveira, KM (corresponding author), Univ Catolica Brasilia, SGAN 916 Norte Av W5, BR-70790160 Brasilia, DF, Brazil.
EM rodpinst@gmail.com; Kathia@ucb.br; wander@ucb.br
OI Marcal de Oliveira, Kathia/0000-0001-8146-5966
CR AHREN DM, 2003, CMMI DISTILLED PRACT
   [Anonymous], 2002, CAP MAT MOD INT CMMI
   [Anonymous], 155042 ISOIEC
   Bevan N, 1999, J SYST SOFTWARE, V49, P89, DOI 10.1016/S0164-1212(99)00070-9
   CRONIN JJ, 1992, J MARKETING, V56, P55, DOI 10.2307/1252296
   Gronroos C., 1990, Service Management and Marketing: Managing the Moments of Truth in Service Competition
   Kang H., 2002, International Journal of Accounting Information Systems, V3, P151, DOI DOI 10.1016/S1467-0895(02)00031-3
   Kettinger WJ, 1997, MIS QUART, V21, P223, DOI 10.2307/249421
   Lin FJ, 2004, PROCEEDINGS OF THE IEEE INTERNATIONAL CONFERENCE ON E-COMMERCE TECHNOLOGY FOR DYNAMIC E-BUSINESS, P226
   MALHOTRA NK, 1995, MARKETING RES APPL O
   PARASURAMAN A, 1988, J RETAILING, V64, P12
   PARASURAMAN A, 1991, SLOAN MANAGE REV, V32, P39
   PARASURAMAN A, 1994, J MARKETING, V58, P111, DOI 10.1177/002224299405800109
   PARASURAMAN A, 1985, J MARKETING, V49, P41, DOI 10.2307/1251430
   Park JY, 2005, INFORM MANAGE-AMSTER, V42, P261, DOI 10.1016/j.im.2003.08.005
   PAULK MC, 1993, IEEE SOFTWARE, V10, P18, DOI 10.1109/52.219617
   Slack N., 1996, Administracao da producao
   Smidts C, 2002, J SYST SOFTWARE, V61, P213, DOI 10.1016/S0164-1212(01)00149-2
   *SOFTW ENG I, 2005, CAP MAT MOD INT
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
NR 20
TC 2
Z9 5
U1 6
U2 28
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2009
VL 17
IS 3
BP 283
EP 301
DI 10.1007/s11219-008-9065-4
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 460XE
UT WOS:000267224200005
DA 2024-07-18
ER

PT J
AU Elliott, M
   Dawson, R
   Edwards, J
AF Elliott, M
   Dawson, R
   Edwards, J
TI Towards real process improvement from internal auditing - A case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
AB The analysis of audit findings should prove useful in uncovering the problems practitioners have in implementing a software quality management regime. The understanding gained from this analysis could then be used to solve the issues involved, and make software management, e.g. development or procurement, more effective. This case study presents an initial analysis of audit findings that led to the need to review some of the approaches taken in gathering audit data. This review included the techniques used and the motivation of auditors. A detailed implementation rating system was devised to further investigate and accurately identify specific problems. It was also used to test and validate initial conclusions and highlight problems with audit sampling. Without proper management, particularly for the analysis of audit findings, the internal audit process can be an ineffective use of resources. The recommendations made by this paper can provide practical solutions to making internal auditing a cost-effective, problem solving, management tool.
C1 AWE Plc, Reading, Berks, England.
   Univ Loughborough, Dept Comp Sci, Loughborough, Leics, England.
C3 Loughborough University
RP Elliott, M (corresponding author), AWE Plc, Reading, Berks, England.
CR Arter D., 1989, QUALITY AUDITS IMPRO
   Davidson A., 2004, Managerial Auditing Journal, V19, P859, DOI DOI 10.1108/02686900410549475
   *DEP ED TASM, 2004, INT AUD SAMPL TECHN
   iso, ISO 9001:2015 Quality Management Systems
   TAORMINA T, 1999, SUCCESSFUL INTERNAL
NR 5
TC 3
Z9 3
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2006
VL 14
IS 1
BP 53
EP 64
DI 10.1007/s11219-006-6001-3
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 014NM
UT WOS:000235486900005
DA 2024-07-18
ER

PT J
AU Saunders, S
   Ross, M
   Staples, G
   Wellington, S
AF Saunders, S
   Ross, M
   Staples, G
   Wellington, S
TI The software quality challenges of service oriented architectures in
   e-commerce
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
AB Web Services technologies and their supporting collection of de facto standards are now reaching the point of maturity where they are appearing in production software systems. Service Oriented Architectures (SOAs) using Web Services as an enabling technology are also being discussed widely in the IT press. However, despite the numerous and real advantages of these architectural patterns there are still many software quality challenges that remain unresolved. This is particularly true as we consider more advanced architectures that exploit the technology to its maximum advantage: utility computing and on-demand service discovery and composition, grid computing and multi-agent systems will only become pervasive once the software quality challenges of real-world industrial applications have been addressed. In this paper potential quality issues such as performance, reliability and availability are addressed in terms of the quality assurances that might need to be provided to consumers of services. Proposed XML-based Service Level Agreement (SLA) languages are reviewed as a means of providing these quality assurances in machine-readable ways. We also discuss how SLAs might be automatically negotiated to enable automated, on-demand service discovery and composition. The next section of this paper addresses quality issues from a service provider's perspective. The providers of such services will need to ensure that SLA commitments are met and this poses interesting problems in terms of application management. Network quality of service is currently addressed through such means as IntServ and DiffServ. Research proposals to introduce similar techniques at an application level are described. From the service consumer's perspective, interesting research proposals for proactively ensuring that good quality of service is obtained are also reviewed. These could be particularly important for creating confidence, from a consumer's perspective, in these architectures. Finally, the paper evaluates the challenges and suggests areas where further research is most urgently required.
C1 Southampton Solent Univ, Fac Technol, Southampton SO14 ORD, Hants, England.
RP Saunders, S (corresponding author), Southampton Solent Univ, Fac Technol, E Pk Terrace, Southampton SO14 ORD, Hants, England.
EM shelly_saunders@bcs.org.uk
RI Novoa, Kevin/J-2867-2014
CR Abdelzaher TF, 2002, IEEE T PARALL DISTR, V13, P80, DOI 10.1109/71.980028
   ANDERSSON M, 2003, P INF TECHN COMM ITC
   Andrieux A., 2004, WEB SERVICES AGREEME
   [Anonymous], 2004, Service-oriented architecture
   *BEA SYST INV, 2004, NEW MOM TOD SERV DRI
   BENJAMIN AC, 2004, INDEPENDENTLY AUDITI
   BRYSON J, 2002, AGENT BASED COMPOSIT
   CARLSTROM J, 2002, IEEE INF 25 27 JUN 2
   Chen Z, 2003, ICWS'03: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON WEB SERVICES, P171
   Dan A, 2004, IBM SYST J, V43, P136, DOI 10.1147/sj.431.0136
   Dan A., 2003, Web Services Differentiation with Service Level Agreement
   DIAO Y, 2002, P NETW OP MAN S NOMS
   DIETZEN S, 2004, STANDARDS SERVICE OR
   GREINER U, 2004, P EAI WORKSH 2004 EN, P11
   Hung P.C.K., 2004, 37 ANN HAW INT C SYS
   *IBM, 2004, IBM SYSTEMS J SPECIA, V43
   Kamra A, 2004, INT WORKSH QUAL SERV, P47
   Keller A., 2003, Journal of Network and Systems Management, V11, P57, DOI 10.1023/A:1022445108617
   Khoshafian S., 2002, WEB SERVICES VIRTUAL
   Lamanna DD, 2003, NINTH IEEE WORKSHOP ON FUTURE TRENDS OF DISTRIBUTED COMPUTING SYSTEMS, PROCEEDINGS, P100, DOI 10.1109/FTDCS.2003.1204317
   Ludwig H., 2003, WEB SERVICE LEVEL AG
   Mani A, 2002, UNDERSTANDING QUALIT
   MCGOUGH S, 2004, P UK E SCI ALL HANDS
   Pacifici G., 2003, PERFORMANCE MANAGEME
   Paolucci M, 2002, INT SEM WEB C, P333
   Patel C, 2004, IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P480, DOI 10.1109/ICWS.2004.1314773
   Sahai A., 2002, AUTOMATED SLA MONITO
   TIAN M, 2003, 1 WEB SERV QUAL WORK, P149
   Tosic V, 2003, ICWS'03: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON WEB SERVICES, P375
   TOSIC V, 2004, P NOMS IEEE IFIP NET
   YOUNG L, 2003, P UK E SCI ALL HANDS
NR 31
TC 9
Z9 10
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2006
VL 14
IS 1
BP 65
EP 75
DI 10.1007/s11219-006-6002-2
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 014NM
UT WOS:000235486900006
DA 2024-07-18
ER

PT J
AU Münch, J
   Pfahl, D
   Rus, I
AF Münch, J
   Pfahl, D
   Rus, I
TI Virtual software engineering laboratories in support of trade-off
   analyses
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE decision support; software engineering laboratories; software process
   modeling; software process simulation; trade-off-analyses
ID SYSTEM DYNAMICS APPROACH; PROCESS SIMULATION; PROJECT-MANAGEMENT
AB Due to demanding customer needs and evolving technology, software organizations are forced to trade individual functional and non-functional product quality profiles against other factors such as cost, time, or productivity. The ability to influence or even control these factors requires a deep understanding of the complex relations between process and product attributes in relevant contexts. Based on such understanding, decision support is needed to adjust processes so that they match the product quality goals without violating given project constraints. We propose to use a Virtual Software Engineering Laboratory (VSEL) to establish such decision support cost-effectively. VSELs can be considered as being complementary to existing (empirical) Software Engineering Laboratories. This paper gives an introduction into the cornerstones of VSELs, discusses how they complement traditional empirically based Software Engineering Laboratories (SELs), and illustrates with the help of case examples from industrial and research environments, how to use them in support of product-focused trade-off analyses.
C1 Fraunhofer Inst Expt Software Engn IESE, D-67663 Kaiserslautern, Germany.
   Univ Calgary, Schulich Sch Engn, Calgary, AB T2N 1N4, Canada.
   Fraunhofer Ctr Maryland, College Pk, MD USA.
C3 Fraunhofer Gesellschaft; University of Calgary
RP Fraunhofer Inst Expt Software Engn IESE, Fraunhofer Pl 1, D-67663 Kaiserslautern, Germany.
EM muench@iese.fraunhofer.de; pfahl@iese.fraunhofer.de; irus@fc-md.umd.edu
RI Pfahl, Dietmar Alfred Paul Kurt/H-3084-2015; Münch, Jürgen/ABC-2316-2020
OI Pfahl, Dietmar Alfred Paul Kurt/0000-0003-2400-501X; Münch,
   Jürgen/0000-0003-0327-8094
CR Abdel-Hamid T., 1991, SOFTWARE PROJECT DYN
   Angkasaputra N., 2004, P 5 INT WORKSH SOFTW, P222
   Basili V. R., 1996, Empirical Software Engineering, V1, P133, DOI 10.1007/BF00368702
   BASILI VR, 1984, IEEE T SOFTWARE ENG, V10, P728, DOI 10.1109/TSE.1984.5010301
   BASILI VR, 1986, IEEE T SOFTWARE ENG, V12, P733, DOI 10.1109/TSE.1986.6312975
   Basili VR, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P69, DOI 10.1109/ICSE.2002.1007957
   Briand L., 1996, Softw. Process, Improve-ment Pract., V2, P253
   CARTWRIGHT M, 1999, PROJECT CONTROL SOFT
   Christie AM, 1999, J SYST SOFTWARE, V46, P107, DOI 10.1016/S0164-1212(99)00004-7
   CHRISTIE AM, 1999, CROSSTALK J DEFENSE
   CIOLKOWSKI M, 1997, 04897E FRAUNH I EXP
   Drappa A, 1999, J SYST SOFTWARE, V46, P113, DOI 10.1016/S0164-1212(99)00005-9
   Forrester JW, 1961, Industrial dynamics
   Höst M, 2001, J SYST SOFTWARE, V59, P323, DOI 10.1016/S0164-1212(01)00072-3
   Houston DX, 2001, J SYST SOFTWARE, V59, P247, DOI 10.1016/S0164-1212(01)00066-8
   JENSEN C, 2003, P 4 PROC SIM MOD WOR
   Judd C.M., 1991, Research methods in social relations, V6th
   Kellner MI, 1999, J SYST SOFTWARE, V46, P91, DOI 10.1016/S0164-1212(99)00003-5
   Krahl D, 2000, PROCEEDINGS OF THE 2000 WINTER SIMULATION CONFERENCE, VOLS 1 AND 2, P280, DOI 10.1109/WSC.2000.899730
   Lee B, 2004, SOFTWARE QUAL J, V12, P59, DOI 10.1023/B:SQJO.0000013359.71560.47
   Lin CY, 1997, J SYST SOFTWARE, V38, P263, DOI 10.1016/S0164-1212(96)00156-2
   Madachy R., 2000, Software Process Improvement and Practice, V5, P133, DOI 10.1002/1099-1670(200006/09)5:2/3<133::AID-SPIP117>3.0.CO;2-M
   Madachy RJ, 1996, PROC INT CONF SOFTW, P376, DOI 10.1109/ICSE.1996.493432
   MISIC VB, 2004, P PROSIM04 WORKSH SO, P237
   Münch J, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P18, DOI 10.1109/ISESE.2003.1237961
   MUNCH J, 2003, P 4 INT WORKSH SOFTW
   Neu H, 2002, LECT NOTES COMPUT SC, V2559, P78
   Pfahl D, 2000, INFORM SOFTWARE TECH, V42, P1001, DOI 10.1016/S0950-5849(00)00152-X
   Pfahl D., 2002, Software Process Improvement and Practice, V7, P189, DOI 10.1002/spip.164
   Pfahl D, 2001, J SYST SOFTWARE, V59, P283, DOI 10.1016/S0164-1212(01)00069-3
   Pfahl D, 2000, INT J SOFTW ENG KNOW, V10, P487, DOI 10.1142/S0218194000000213
   Pfahl D, 2000, LECT NOTES COMPUT SC, V1840, P88
   Powell A, 1999, J SYST SOFTWARE, V46, P151, DOI 10.1016/S0164-1212(99)00008-4
   RAFFO D., 1999, Journal of Empirical Software Engineering, V4, P353, DOI DOI 10.1023/A:1009817721252
   Raffo DM, 1999, J SYST SOFTWARE, V46, P163, DOI 10.1016/S0164-1212(99)00009-6
   RAFFO DM, 2004, P 5 INT WORKSH SOFTW, P197
   RAFFO DM, 2003, P 4 PROC SIM MOD WOR
   Roehling S. T., 2000, Software Process Improvement and Practice, V5, P169, DOI 10.1002/1099-1670(200006/09)5:2/3<169::AID-SPIP124>3.0.CO;2-F
   Rombach HD, 1993, LECT NOTES COMPUTER
   Rombach HD, 1999, P NASAS 24 ANN SOFTW
   Ruiz M, 2004, LECT NOTES COMPUT SC, V3009, P568
   Rus I, 1999, J SYST SOFTWARE, V46, P173, DOI 10.1016/S0164-1212(99)00010-2
   RUS I, 2002, P 13 INT S SOFTW REL
   RUS I, 2002, P 1 INT WORKSH SOFTW
   Rus Ioana, 2003, P 2003 INT WORKSH SO
   Stallinger F, 2001, J SYST SOFTWARE, V59, P311, DOI 10.1016/S0164-1212(01)00071-1
   WAESELYNCK H, 1994, SOFTWARE-CONC TOOL, V15, P162
   WERNICK P, 2004, P 5 INT WORKSH SOFTW, P149
   Williford J, 1999, J SYST SOFTWARE, V46, P203, DOI 10.1016/S0164-1212(99)00013-8
NR 49
TC 5
Z9 6
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2005
VL 13
IS 4
BP 407
EP 428
DI 10.1007/s11219-005-4253-y
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 984BC
UT WOS:000233276500005
DA 2024-07-18
ER

PT J
AU Gray, E
   Sampaio, A
   Benediktsson, O
AF Gray, E
   Sampaio, A
   Benediktsson, O
TI An incremental approach to software process assessment and improvement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software process improvement; software process assessment; SPICE; EFQM;
   improvement path
AB This paper considers assessment techniques based on the use of questionnaires, assessment matrices, workshops, and pro-forma assessment schemas; together with people issues such as motivation and involvement. With strong reference to SPICE process capability levels and the European Foundation for Quality Management (EFQM) Excellence Model, the authors suggest a novel framework containing a possible sequence of improvement steps towards the Established Level 3. The main conclusion in this paper is that an incremental improvement path can be defined using process assessment that commences with questionnaires, then goes on to matrices, workshops, and finally reaches pro-formas. Furthermore, it seems quite plausible that all four types of assessment techniques should be employed on an ongoing basis in a staged fashion.
C1 Glasgow Caledonian Univ, Sch Comp & Math Sci, Glasgow G4 0BA, Lanark, Scotland.
   Inst Super Engn Porto, Dept Informat Engn, P-4200 Oporto, Portugal.
   Univ Iceland, IS-101 Reykjavik, Iceland.
C3 Glasgow Caledonian University; Instituto Politecnico do Porto;
   University of Iceland
RP Glasgow Caledonian Univ, Sch Comp & Math Sci, Glasgow G4 0BA, Lanark, Scotland.
EM egra@gcal.ac.uk; as@dei.isep.ipp.pt
RI Sampaio, Alberto/AFM-9815-2022
OI Sampaio, Alberto/0000-0002-4698-6544
CR BISANT DB, 1989, IEEE T SOFTWARE ENG, V15, P1294, DOI 10.1109/TSE.1989.559782
   EFQM, 2003, EUR FDN QUAL MAN EXC
   Humphrey W S, 1995, A discipline for software engineering
   HUMPHREY WS, 1987, CMUSEI87TR23
   *ISO IEC DTR, 15504 ISO IEC DTR
   ROUT T, 2000, P SPICE 2000 INT C L
   *SEI, 2000, CMUSEI2000TR011
NR 7
TC 3
Z9 4
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2005
VL 13
IS 1
BP 7
EP 16
DI 10.1007/s11219-004-5258-7
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898MD
UT WOS:000227080000001
DA 2024-07-18
ER

PT J
AU Benediktsson, O
   Dalcher, D
   Reed, K
   Woodman, M
AF Benediktsson, O
   Dalcher, D
   Reed, K
   Woodman, M
TI COCOMO-based effort estimation for iterative and incremental software
   development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT International Software Quality Management Conference
CY APR, 2003
CL GLASGOW, SCOTLAND
SP British Comp Soc
DE software effort estimation; incremental software development; software
   project management; COCOMO-based estimation; effort in increments
AB Incremental software development and delivery have been used in software projects in many ways for many years. Justifications for incremental approaches include risk amelioration, the management of evolving requirements, and end-user involvement. Incremental development, including iterative, incremental delivery, has become a norm in many sectors. However, there has been little work on modelling the effort in such development and hence a dearth of comparative analyses of cost models for incremental development/delivery. We attempt to rectify this by proposing a COCOMO-style effort model for incremental development/delivery and explore the relationship between effort and the number of increments, thereby providing new insights into the economic impact of incremental approaches to software projects.
C1 Univ Iceland, Div Comp Sci, Reykjavik, Iceland.
   Middlesex Univ, London N14 4YZ, England.
   La Trobe Univ, Dept Comp Sci & Comp Engn, Bundoora, Vic 3083, Australia.
C3 University of Iceland; Middlesex University; La Trobe University
RP Univ Iceland, Div Comp Sci, Reykjavik, Iceland.
OI Dalcher, Darren/0000-0001-8447-0453
CR [Anonymous], 1988, Principles of software engineering management
   [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], IBM SYSTEMS J
   Basili V. R., 1975, IEEE Transactions on Software Engineering, VSE-1, P390, DOI 10.1109/TSE.1975.6312870
   Beck K., 2000, EXTREME PROGRAMMING
   BENNINGTON HD, 1995, ANN HIST COMPUT, V5, P350
   Berrisford T, 1979, MIS QUART, V3, P14
   BOEHM B, 2002, IEEE CS COMPUTER, V35
   Boehm BW., 1981, Software Engineering Economics
   Booch G., 1996, OBJECT SOLUTIONS MAN
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Brooks Fred, 1975, The Mythical Man-Month
   CLARK B, 1998, P ICSE 1998
   CONSTANTINE LL, 1978, STRUCTURED DESIGN
   Cusumano M.A., 1995, Microsoft secrets how the world's most powerful software company creates technology, shapes markets, and manages people
   Cusumano MA, 1999, COMPUTER, V32, P60, DOI 10.1109/2.796110
   DALCHER D, 2002, PROJECT MANAGEMENT P
   Elssamadisy A, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P617, DOI 10.1109/ICSE.2002.1008006
   GIDDINGS RV, 1984, COMMUN ACM, V27, P428, DOI 10.1145/358189.358066
   GILB T, 1997, UNPUB EVO EVOLUTIONA
   GOLDBERG A, 1995, SUCCEEDING OBJECTS
   GRAHAM DR, 1989, INFORMATION SOFTWARE, V31
   GRAHAM S, 1992, FOCUS EXCEPT CHILD, V25, P1
   HESS W, 1996, LECT NOTES COMPUTER, V1149, P241
   Jones TC, 1998, Estimating software costs
   KRUTCHEN P, 2000, RATIONAL UNIFIED PRO
   KRZANIK L, 1988, ACM SIGSOFT SOFTWARE, V14, P4
   Lehman M. M., 1985, Program Evolution: Processes of Software Change
   LEHMAN MM, 2000, FEAST 2000, P53
   LEHMAN MM, 2001, P INT WORKSH PRINC S
   Mills H. D., 1976, IEEE Transactions on Software Engineering, VSE-2, P265, DOI 10.1109/TSE.1976.233831
   Mills H.D., 1971, Debugging techniques in large systems, P41
   MILLS HD, 1987, IEEE SOFTWARE, V4, P19, DOI 10.1109/MS.1987.231413
   Munson JC, 1998, PROC IEEE INT CONF S, P24, DOI 10.1109/ICSM.1998.738486
   MUSA JD, 1993, IEEE SOFTWARE, V10, P14, DOI 10.1109/52.199724
   PARNAS DL, 1979, IEEE T SOFTWARE ENG, V5, P128, DOI 10.1109/TSE.1979.234169
   PODALSKY JL, 1977, DATAMATION       NOV, P162
   ROYCE W, 1990, 12TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P2, DOI 10.1109/ICSE.1990.63598
   Royce W., 1990, Proceedings TRI-Ada '90, P551, DOI 10.1145/255471.255606
   Royce W.E., 1998, AW OBJ TECHNOL S
   ROYCE WW, 1970, P IEEE WESCON 1970
   Stapleton J., 1997, DSDM DYNAMIC SYSTEMS
   Zahran S, 1997, SOFTWARE PROCESS IMP
NR 43
TC 32
Z9 39
U1 3
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD NOV
PY 2003
VL 11
IS 4
BP 265
EP 281
DI 10.1023/A:1025809010217
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 724YV
UT WOS:000185516600002
DA 2024-07-18
ER

PT J
AU Chen, CY
   Hsu, PY
   Vu, HN
AF Chen, Chung-Yang
   Hsu, Ping-Yu
   Vu, Hong-Ngoc
TI Collaborative process tailoring in evolutionary software development: a
   teamwork-quality perspective
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Information system development; Software process tailoring; Teamwork
   quality; Member autonomy; Team reflexivity
ID AFTER-EVENT REVIEWS; INDIVIDUAL AUTONOMY; SELF-MANAGEMENT; TASK
   INTERDEPENDENCE; PROJECT SUCCESS; AGILE PRACTICES; MENTAL MODELS;
   PLS-SEM; PERFORMANCE; CONFLICT
AB This study highlighted the importance of software process tailoring (SPT) in modern software projects characterized by dynamic and evolutionary development. SPT is a collaborative practice, and the existing literature has focused on team-based knowledge aspects in performing SPT, whereas the quality of team interactions has rarely been discussed to address its conflictual nature. This study examined the teamwork quality (TWQ) framework with two team behavioral factors, namely team reflexivity and member autonomy, and developed a research model to explore how TWQ fits in the SPT's conflicting context and how autonomy and reflexivity affect TWQ to promote SPT. The results showed that TWQ is essential for dealing with challenging tasks in SPT. The results also supported the evidence that reflexivity positively affects TWQ while member autonomy harms TWQ. When examining the mediating effect to see how TWQ operationalizes as an intermediate in the relationship between the two factors and SPT performance, this study found that reflexivity directly and indirectly boosts SPT performance. Member autonomy and SPT performance are independent when TWQ is the mediator. However, without TWQ, member autonomy negatively impacts SPT effectiveness and efficiency.
C1 [Chen, Chung-Yang] Natl Cent Univ, Dept Informat Management, Zhongda Rd 300, Taoyuan 32001, Taiwan.
   [Hsu, Ping-Yu; Vu, Hong-Ngoc] Natl Cent Univ, Dept Business Adm, Taoyuan, Taiwan.
C3 National Central University; National Central University
RP Chen, CY (corresponding author), Natl Cent Univ, Dept Informat Management, Zhongda Rd 300, Taoyuan 32001, Taiwan.
EM cychen@mgt.ncu.edu.tw
OI Chen, Chung-Yang/0000-0003-0146-3202
CR Akbar R, 2019, IEEE ACCESS, V7, P139852, DOI 10.1109/ACCESS.2019.2944122
   Andres HP, 2001, J MANAGE INFORM SYST, V18, P41
   Basirati MR, 2020, INFORM SOFTWARE TECH, V126, DOI 10.1016/j.infsof.2020.106331
   Benitez J, 2020, INFORM MANAGE-AMSTER, V57, DOI 10.1016/j.im.2019.05.003
   Boothe A, 2018, NURSE LEAD, V16, P121, DOI 10.1016/j.mnl.2017.10.008
   Campanelli AS, 2018, J SYST SOFTWARE, V137, P366, DOI 10.1016/j.jss.2017.12.012
   Campanelli AS, 2015, J SYST SOFTWARE, V110, P85, DOI 10.1016/j.jss.2015.08.035
   Carrion G.C., 2017, PARTIAL LEAST SQUARE, DOI [DOI 10.1007/978-3-319-64069-3_8, 10.1007/978-3-319-64069-38, DOI 10.1007/978-3-319-64069-38]
   Casciaro T, 2008, ADMIN SCI QUART, V53, P655, DOI 10.2189/asqu.53.4.655
   Cenfetelli RT, 2009, MIS QUART, V33, P689
   Chen C.J., 2021, IN PRESS
   Clarke P, 2015, IEEE T SOFTWARE ENG, V41, P1169, DOI 10.1109/TSE.2015.2467388
   Cole MS, 2013, J APPL PSYCHOL, V98, P962, DOI 10.1037/a0034269
   Dayan M, 2009, EUR J INNOV MANAG, V12, P129, DOI 10.1108/14601060910928201
   De Dreu CKW, 2007, J APPL PSYCHOL, V92, P628, DOI 10.1037/0021-9010.92.3.628
   de Oliveira EA, 2016, EUR BUS REV, V28, P405, DOI 10.1108/EBR-01-2016-0014
   Gonzalez RVD, 2021, TOTAL QUAL MANAG BUS, V32, P794, DOI 10.1080/14783363.2019.1636640
   Dooley RS, 1999, ACAD MANAGE J, V42, P389, DOI 10.5465/257010
   Easley RF, 2003, J MANAGE INFORM SYST, V19, P247
   Ellis S, 2005, J APPL PSYCHOL, V90, P857, DOI 10.1037/0021-9010.90.5.857
   Ellis S, 2010, J APPL PSYCHOL, V95, P122, DOI 10.1037/a0017867
   Fay MJ, 2011, J APPL COMMUN RES, V39, P144, DOI 10.1080/00909882.2011.556136
   Fitzgerald B, 2003, COMMUN ACM, V46, P64, DOI 10.1145/641205.641206
   Gallina B, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2212
   Gemunden H. G., 2005, International Journal of Project Management, V23, P366, DOI 10.1016/j.ijproman.2005.03.004
   Ginsberg M., 1995, CMUSEI94TR024
   Gustavsson T, 2022, IJISPM-INT J INF SYS, V10, P29, DOI 10.12821/ijispm100102
   Hackman J.R., 1974, JOB DIAGNOSTIC SURVE
   Hackman J. R., 1987, HDB ORG BEHAV, P315, DOI DOI 10.1016/0090-2616(78)90031-1
   Hair JF, 2014, EUR BUS REV, V26, P106, DOI 10.1108/EBR-10-2013-0128
   Hair JF, 2019, EUR BUS REV, V31, P2, DOI 10.1108/EBR-11-2018-0203
   Hedman E, 2016, LEADERSHIP ORG DEV J, V36, P1012, DOI 10.1108/LODJ-04-2014-0074
   Hirst G, 2009, ACAD MANAGE J, V52, P280, DOI 10.5465/AMJ.2009.37308035
   Hoda R, 2016, J SYST SOFTWARE, V117, P245, DOI 10.1016/j.jss.2016.02.049
   Hoda R, 2013, IEEE T SOFTWARE ENG, V39, P422, DOI 10.1109/TSE.2012.30
   Hoda R, 2012, EMPIR SOFTW ENG, V17, P609, DOI 10.1007/s10664-011-9161-0
   Hoegl M, 2001, ORGAN SCI, V12, P435, DOI 10.1287/orsc.12.4.435.10635
   Hoegl M, 2006, HUM RESOURCE MANAGE, V45, P67, DOI 10.1002/hrm.20092
   Hoegl M, 2003, J ENG TECHNOL MANAGE, V20, P281, DOI 10.1016/j.jengtecman.2003.08.001
   Hu J, 2018, J APPL PSYCHOL, V103, P313, DOI 10.1037/apl0000277
   Hüffmeier J, 2011, J MANAGE PSYCHOL, V26, P185, DOI 10.1108/02683941111112631
   Hummel M, 2013, BUS INFORM SYST ENG+, V5, P343, DOI 10.1007/s12599-013-0282-4
   Alegría JAH, 2014, J SOFTW-EVOL PROC, V26, P386, DOI 10.1002/smr.1576
   Janz BD, 1997, PERS PSYCHOL, V50, P877, DOI 10.1111/j.1744-6570.1997.tb01486.x
   Jonsson T, 2013, INT J HUM RESOUR MAN, V24, P78, DOI 10.1080/09585192.2012.672448
   Kakar A.K., 2016, Journal of Information Technology Theory and Application, V17, P5
   Kakar AKS, 2018, INT J HUM-COMPUT ST, V111, P1, DOI 10.1016/j.ijhcs.2017.11.001
   Ketchen DJ, 2013, LONG RANGE PLANN, V46, P184, DOI 10.1016/j.lrp.2013.01.002
   Klaic A, 2020, J OCCUP ORGAN PSYCH, V93, P942, DOI 10.1111/joop.12316
   Kock N, 2018, INFORM SYST J, V28, P227, DOI 10.1111/isj.12131
   Kubicek B., 2017, Job demands in a changing world of work, P45, DOI [10.1007/978-3-319-54678-04, DOI 10.1007/978-3-319-54678-04, 10.1007/978-3-319-54678-0_4, DOI 10.1007/978-3-319-54678-0_4]
   Kude T., 2015, P ACAD MANAGEMENT, V2015, DOI [10.5465/ambpp.2015.286, DOI 10.5465/AMBPP.2015.286]
   Langfred CW, 2007, ACAD MANAGE J, V50, P885, DOI 10.5465/AMJ.2007.26279196
   Langfred CW, 2016, GROUP ORGAN MANAGE, V41, P629, DOI 10.1177/1059601116668971
   Langfred CW, 2004, ACAD MANAGE J, V47, P385, DOI [10.5465/20159588, 10.2307/20159588]
   Langfred CW, 2000, J ORGAN BEHAV, V21, P563, DOI 10.1002/1099-1379(200008)21:5<563::AID-JOB31>3.0.CO;2-H
   Lee JC, 2022, INFORM TECHNOL PEOPL, V35, P1009, DOI 10.1108/ITP-02-2020-0063
   Lee JC, 2021, INFORM SYST J, V31, P120, DOI 10.1111/isj.12303
   Lee JC, 2020, J SYST SOFTWARE, V164, DOI 10.1016/j.jss.2020.110545
   Lee JC, 2019, INFORM DEV, V35, P6, DOI 10.1177/0266666917724194
   Lee-Kelley L, 2005, INT J INNOV LEARN, V2, P11, DOI 10.1504/IJIL.2005.006080
   Lehtinen TOA, 2017, EMPIR SOFTW ENG, V22, P2409, DOI 10.1007/s10664-016-9464-2
   Levi D., 2001, Group dynamics for teams
   Liang TP, 2010, IEEE T ENG MANAGE, V57, P477, DOI 10.1109/TEM.2009.2033049
   Lindsjorn Y, 2016, J SYST SOFTWARE, V122, P274, DOI 10.1016/j.jss.2016.09.028
   Litchfield RC, 2018, J PROD INNOVAT MANAG, V35, P350, DOI 10.1111/jpim.12410
   Madhavji N.H., 2006, Software evolution and feedback
   Man DC, 2003, J ORGAN BEHAV, V24, P979, DOI 10.1002/job.227
   Moe NB, 2013, LECT NOTES BUS INF P, V149, P76
   Moe NB, 2010, INFORM SOFTWARE TECH, V52, P480, DOI 10.1016/j.infsof.2009.11.004
   Moe NB, 2009, IEEE SOFTWARE, V26, P20, DOI 10.1109/MS.2009.182
   Mohammed S, 2013, ORGAN BEHAV HUM DEC, V122, P244, DOI 10.1016/j.obhdp.2013.08.004
   Moreland RL, 2010, ADV GROUP PROCESS, V27, P63, DOI 10.1108/S0882-6145(2010)0000027006
   NEDERHOF AJ, 1985, EUR J SOC PSYCHOL, V15, P263, DOI 10.1002/ejsp.2420150303
   Nitzl C, 2017, J MANAG CONTROL, V28, P137, DOI 10.1007/s00187-017-0249-6
   Park S, 2006, EXPERT SYST APPL, V30, P179, DOI 10.1016/j.eswa.2005.06.023
   Park SH, 2013, IET SOFTW, V7, P47, DOI 10.1049/iet-sen.2011.0192
   Park S, 2011, J SYST SOFTWARE, V84, P528, DOI 10.1016/j.jss.2010.11.919
   Parker SH, 2018, GROUP ORGAN MANAGE, V43, P504, DOI 10.1177/1059601118768022
   Peng Xu, 2008, IT Professional, V10, P39, DOI 10.1109/MITP.2008.81
   Pikkarainen M, 2008, EMPIR SOFTW ENG, V13, P303, DOI 10.1007/s10664-008-9065-9
   Pillat RM, 2015, INFORM SOFTWARE TECH, V57, P95, DOI 10.1016/j.infsof.2014.09.004
   Podsakoff PM, 2003, J APPL PSYCHOL, V88, P879, DOI 10.1037/0021-9010.88.5.879
   Raes E, 2015, J WORKPLACE LEARN, V27, P476, DOI 10.1108/JWL-01-2015-0006
   Rigdon EE, 2016, EUR MANAG J, V34, P598, DOI 10.1016/j.emj.2016.05.006
   Romero HL, 2015, INFORM SOFTWARE TECH, V63, P31, DOI 10.1016/j.infsof.2015.03.004
   Salameh A, 2019, LECT NOTES BUS INF P, V364, P20, DOI 10.1007/978-3-030-30126-2_3
   Salas E, 2008, HUM FACTORS, V50, P540, DOI 10.1518/001872008X288457
   Salas E, 2015, HUM RESOUR MANAGE-US, V54, P599, DOI 10.1002/hrm.21628
   Santos CM, 2016, LEADERSHIP QUART, V27, P574, DOI 10.1016/j.leaqua.2015.12.002
   Sarstedt M, 2016, J BUS RES, V69, P3998, DOI 10.1016/j.jbusres.2016.06.007
   Sawyer S, 2001, INFORM SYST J, V11, P155, DOI 10.1046/j.1365-2575.2001.00100.x
   Schippers MC, 2008, HUM RELAT, V61, P1593, DOI 10.1177/0018726708096639
   Schippers MC, 2015, J MANAGE, V41, P769, DOI 10.1177/0149206312441210
   Schoenherr T, 2017, PROD OPER MANAG, V26, P667, DOI 10.1111/poms.12671
   Sharp H, 2010, AGILE SOFTWARE DEVELOPMENT: CURRENT RESEARCH AND FUTURE DIRECTIONS, P61, DOI 10.1007/978-3-642-12575-1_4
   Shin SJ, 2012, ACAD MANAGE J, V55, P197, DOI 10.5465/amj.2010.0270
   Slaughter SA, 2006, MIS QUART, V30, P891
   Söllner M, 2018, J INF TECHNOL-UK, V33, P233, DOI 10.1057/s41265-017-0046-6
   Song M, 2006, J ACAD MARKET SCI, V34, P341, DOI 10.1177/0092070306286705
   Tannenbaum SI, 2013, HUM FACTORS, V55, P231, DOI 10.1177/0018720812448394
   Tripp JF, 2018, J COMPUT INFORM SYST, V58, P170, DOI 10.1080/08874417.2016.1220240
   van Ginkel WP, 2009, ORGAN BEHAV HUM DEC, V108, P218, DOI 10.1016/j.obhdp.2008.10.003
   VAZQUEZINGELMO A, 2019, IEEE ACCESS, V7, P9673
   Vlietland J, 2016, J SYST SOFTWARE, V113, P418, DOI 10.1016/j.jss.2015.11.010
   von Bonsdorff ME, 2015, INT J HUM RESOUR MAN, V26, P1098, DOI 10.1080/09585192.2014.934881
   Wei JC, 2010, INT J INFORM MANAGE, V30, P220, DOI 10.1016/j.ijinfomgt.2009.08.007
   Weimar E., 2017, ARXIV
   West MA, 2000, ADV INT ST, V5, P1
   Widmer P.S., 2009, PSYCHOL EVERYDAY ACT, V2, P2, DOI DOI 10.1177/2F0149206312441210
   Willems T, 2020, INT J PROJ MANAG, V38, P215, DOI 10.1016/j.ijproman.2020.03.004
   Wu GD, 2017, INT J PROJ MANAG, V35, P1466, DOI 10.1016/j.ijproman.2017.08.006
   Wubuli A., 2020, ACAD MANAGEMENT P, V2020, P16438, DOI [10.5465/AMBPP.2020.16438abstract, DOI 10.5465/AMBPP.2020.16438ABSTRACT]
   Xiang CJ, 2013, BEHAV INFORM TECHNOL, V32, P1024, DOI 10.1080/0144929X.2012.745901
   Yang MX, 2020, FRONT PSYCHOL, V10, DOI 10.3389/fpsyg.2019.03044
   Yu XD, 2014, INFORM SOFTWARE TECH, V56, P911, DOI 10.1016/j.infsof.2014.02.010
   Yuan FR, 2015, J ORGAN BEHAV, V36, P990, DOI 10.1002/job.2022
   Zhao XS, 2010, J CONSUM RES, V37, P197, DOI 10.1086/651257
NR 118
TC 1
Z9 1
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2023
VL 31
IS 1
BP 89
EP 119
DI 10.1007/s11219-022-09597-y
EA AUG 2022
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9N8JZ
UT WOS:000839498700001
DA 2024-07-18
ER

PT J
AU Barbareschi, M
   Barone, S
   Carbone, R
   Casola, V
AF Barbareschi, Mario
   Barone, Salvatore
   Carbone, Riccardo
   Casola, Valentina
TI Scrum for safety: an agile methodology for safety-critical software
   systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Agile software development; Agile processes; Software development;
   Safety-critical software systems
AB In the last years, agile methodologies are gaining substantial momentum, becoming increasingly popular in a broad plethora of industrial contexts. Unfortunately, many obstacles have been met while pursuing adoption in secure and safe systems, where different standards and operational constraints apply. In this paper, we propose a novel agile methodology for the development and innovation of safety-critical systems. In particular, we developed an extension of the well-known Scrum methodology and discussed the complete workflow. We finally validated the applicability of the proposed methodology over a real case study from the railway domain.
C1 [Barone, Salvatore; Carbone, Riccardo; Casola, Valentina] Univ Naples Federico II, Dept Elect Engn & Informat Technol, Via Claudio 21, I-80125 Naples, Italy.
   [Barbareschi, Mario] Rete Ferroviaria Italiana SpA, Res & Dev, Piazza Croce Rossa 1, I-00161 Rome, Italy.
C3 University of Naples Federico II
RP Carbone, R (corresponding author), Univ Naples Federico II, Dept Elect Engn & Informat Technol, Via Claudio 21, I-80125 Naples, Italy.
EM m.barbareschi@rfi.it; salvatore.barone@unina.it;
   riccardo.carbone@unina.it; valentina.casola@unina.it
RI Casola, Valentina/I-6967-2013
OI CASOLA, Valentina/0000-0003-0964-7014; Carbone,
   Riccardo/0000-0003-0680-8863; BARONE, SALVATORE/0000-0003-2007-3744
FU Universita degli Studi di Napoli Federico II within the CRUI-CARE
   Agreement
FX Open access funding provided by Universita degli Studi di Napoli
   Federico II within the CRUI-CARE Agreement.
CR [Anonymous], 1999, RAILWAY APPL SPECIFI
   [Anonymous], 2011, ISO26262
   [Anonymous], 2013, P 28 ANN ACM S APPL
   Benedicenti L, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P725, DOI 10.1145/2889160.2892652
   Boehm B., 2003, BALANCING AGILITY DI
   Casola V, 2020, J SYST SOFTWARE, V163, DOI 10.1016/j.jss.2020.110537
   Cawley O, 2010, LECT NOTES BUS INF P, V65, P31, DOI 10.1007/978-3-642-16416-3_4
   CENELEC, 2011, EN 50128:2011
   Cockburn A., 2006, AGILE SOFTWARE DEV C
   Comite europeen de normalisation en electronique eten electrotechnique C., 2003, RAILWAY APPL COMMUNI
   Drobka J, 2004, IEEE SOFTWARE, V21, P70, DOI 10.1109/MS.2004.47
   Fitzgerald Brian, 2013, 2013 35th International Conference on Software Engineering (ICSE), P863, DOI 10.1109/ICSE.2013.6606635
   Fowler M., 2001, Software Development, V9, P28
   Gary K, 2011, SOFTWARE PRACT EXPER, V41, P945, DOI 10.1002/spe.1075
   Górski J, 2013, LECT NOTES COMPUT SC, V8166, P48, DOI 10.1007/978-3-642-40894-6_4
   Grenning J, 2001, IEEE SOFTWARE, V18, P27, DOI 10.1109/52.965799
   Hajou A, 2014, 2014 14TH INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND ITS APPLICATIONS (ICCSA), P40, DOI 10.1109/ICCSA.2014.19
   Hanssen Geir Kjetil, 2018, SafeScrum-Agile Development of Safety -Critical Software, DOI DOI 10.1007/978-3-319-99334-8
   IEC 61508, 2010, 61508 IEC, V2nd ed.
   Jonsson H, 2012, PROC INT SYMP SOFTW, P355, DOI 10.1109/ISSREW.2012.80
   McCaffery F, 2016, COMM COM INF SC, V609, P417, DOI 10.1007/978-3-319-38980-6_30
   McHugh M, 2012, COMM COM INF SC, V290, P141
   Messina A., 2016, CrossTalk, V29, P25
   Misra SC, 2010, INT J QUAL RELIAB MA, V27, P451, DOI 10.1108/02656711011035147
   Myklebust, 2015, ESREL C SAFETY RELIA
   Nerur S, 2005, COMMUN ACM, V48, P72, DOI 10.1145/1060710.1060712
   Paige RF, 2008, LECT NOTES COMPUT SC, V5219, P30, DOI 10.1007/978-3-540-87698-4_6
   Rubin Kenneth S., 2012, Essential Scrum: A practical guide to the most popular Agile process, V1st
   Schwaber K., 2016, The Scrum guide: The definitive guide to Scrum: The rules of the game
   SMITH J, 2019, AEROSP CONF PROC
   Sommerville I., 2011, Software engineering
   Stalhane T., 2012, P 11 INT PROB SAF AS, P6052
   VanderLeest SH, 2009, IEEEAAIA DIGIT AVION, P1562
   Vogel D., 2006, DesignFax Online, P1
   Wolff S., 2012, 2012 Proceedings of First International Workshop on Formal Methods in Software Engineering: Rigorous and Agile Approaches (FormSERA 2012), P23, DOI 10.1109/FormSERA.2012.6229784
   Xiaocheng Ge, 2010, Proceedings of the 2010 Agile Conference (AGILE 2010), P35, DOI 10.1109/AGILE.2010.10
NR 36
TC 3
Z9 3
U1 2
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2022
VL 30
IS 4
BP 1067
EP 1088
DI 10.1007/s11219-022-09593-2
EA JUL 2022
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6J7CW
UT WOS:000830310700001
OA hybrid
DA 2024-07-18
ER

PT J
AU Roncero, E
   Silva, A
AF Roncero, Enrique
   Silva, Andres
TI TeqReq: a new family of test-related requirements attributes
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Testing; Testing costs; Requirement attributes; Requirement management;
   Effort estimation; Estimation deviations
ID SOFTWARE; PRIORITIZATION
AB Testing is a complex and expensive process that may absorb more than 50% of the project costs. Methods aimed to estimate testing costs require, to be really effective, a degree of detail that is not always available at the initial stages. The cost of testing, as a consequence, is not adequately dealt with, giving rise to problematic deviations. To address this issue, an approach named "TeqReq" is proposed. The main objective of TeqReq is the integration of requirements with information about testing and testing costs, since the earliest project phases. This integration is achieved by applying a new family of test-related requirement management attributes. The goal of these attributes is to direct the focus of the project team towards analyzing and qualifying the requirements from a testing effort point of view, starting as soon as possible. The proposed approach was validated in an industrial case study involving several real-world projects. The results obtained are compared against results from similar projects where the proposed solution was not applied. The findings lead to confirm that TeqReq had a positive impact on the estimations of the testing effort and, indirectly, on the quality of the final product. In addition, other interesting and unexpected effects emerged from the application of TeqReq, like an increase in the quality of the relationships between the different stakeholders involved, or improvements in the acquisition of requirement-related knowledge. All these findings are analyzed and discussed throughout the paper.
C1 [Roncero, Enrique] Salesland, Av Secundino Zuazo 98,1-B, Madrid 28055, Spain.
   [Silva, Andres] Univ Politecn Madrid, Escuela Tecn Super Ingn Informat, Campus Montegancedo, Boadilla Del Monte 28660, Spain.
C3 Universidad Politecnica de Madrid
RP Roncero, E (corresponding author), Salesland, Av Secundino Zuazo 98,1-B, Madrid 28055, Spain.
EM e.roncerom@alumnos.upm.es; asilva@fi.upm.es
RI ; Silva, Andres/D-4373-2012
OI Roncero, Enrique/0000-0001-8507-5818; Silva, Andres/0000-0002-7273-0526
CR Abedallah Z., 2008, ISSUES SOFTWARE COST, DOI 10.1109/ICSE.2012.6227203
   Abhilasha, 2013, TEST EFFORT ESTIMATI, DOI 10.1109/MITE.2013.6756364
   Ali S, 2020, SOFTWARE QUAL J, V28, P397, DOI 10.1007/s11219-019-09463-4
   [Anonymous], 2018, ISO/IEC/IEEE 29148:2018(E), P1, DOI 10.1109/IEEESTD.2018.8559686
   [Anonymous], 2011, CMMI FOR DEV
   [Anonymous], 1983, 8291983 IEEE
   Arora M, 2016, FAR E J ELECT COMMUN, V3, P741, DOI [10.17654/ECSV3PII16741, DOI 10.17654/ECSV3PII16741]
   BENBASAT I, 1987, MIS QUART, V11, P369, DOI 10.2307/248684
   Bjarnason E, 2016, INFORM SOFTWARE TECH, V70, P204, DOI 10.1016/j.infsof.2015.05.004
   Blokpoel S. B., 2005, UNCERTAINTY MANAGEME
   Boehm BW, 2008, IEEE SOFTWARE, V25, P74, DOI 10.1109/MS.2008.133
   Buglione L., 2007, P 4 SOFTW MEAS EUR F, P265
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   Charette RN, 2005, IEEE SPECTRUM, V42, P42, DOI 10.1109/MSPEC.2005.1502528
   FIPSP, 1984, GUID LIF VAL VER TES
   Fowler M., 2001, Software Development, V9, P28
   Garousi Vahid, 2021, BMJ HEALTH CARE INFO
   Haiderzai MD., 2019, INT J ENG COMPUTER S, DOI 10.13140/RG.2.2.17617.48480
   Hailpern B, 2002, IBM SYST J, V41, P4, DOI 10.1147/sj.411.0004
   IEEE, 1998, STD 1219 1998 IEEE S, DOI 10.1109/IEEESTD.1998.88278
   Kandil P, 2015, 2015 5TH INTERNATIONAL CONFERENCE ON INFORMATION & COMMUNICATION TECHNOLOGY AND ACCESSIBILITY (ICTA)
   Khan SUR, 2018, IEEE ACCESS, V6, P11816, DOI 10.1109/ACCESS.2018.2809600
   Khatibi V., 2011, J EMERGING TRENDS CO
   Kotonya G., 1998, Requirements engineering: processes and techniques
   Labuschagne A, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P821, DOI 10.1145/3106237.3106288
   Laksono MAT, 2019, PROCEEDINGS OF THE 2019 2ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND INFORMATION MANAGEMENT (ICSIM 2019) / 2019 2ND INTERNATIONAL CONFERENCE ON BIG DATA AND SMART COMPUTING (ICBDSC 2019), P110, DOI 10.1145/3305160.3305203
   Li JJ, 2020, SOFTWARE QUAL J, V28, P245, DOI 10.1007/s11219-019-09472-3
   López-Martínez J, 2016, 2016 FOURTH INTERNATIONAL CONFERENCE IN SOFTWARE ENGINEERING RESEARCH AND INNOVATION - CONISOFT 2016, P141, DOI 10.1109/CONISOFT.2016.30
   Miller G., 2013, PMI GLOB C
   Nageswaran S., 2001, TEST EFFORT ESTIMATI, V6, P1
   Ng SP, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P116, DOI 10.1109/ASWEC.2004.1290464
   Ngah A., 2017, Journal of Telecommunication, Electronic and Computer Engineering, V9, P45
   Nguyen CD, 2012, AUTON AGENT MULTI-AG, V25, P260, DOI 10.1007/s10458-011-9175-4
   Putnam-Majarian C., 2015, MOST COMMON REASONS
   Raghuvirkamath, 2010, TPA TEST POINT AN ME
   Rahikkala J., 2015, ACCOUNTING TESTING S, DOI 10.13140/rg.2.1.1907.7841
   Ramachandran M, 2003, EUROMICRO CONF PROC, P94, DOI 10.1109/EURMIC.2003.1231572
   Ramasubbu N, 2012, PROC INT CONF SOFTW, P91, DOI 10.1109/ICSE.2012.6227203
   Robson C., 2002, Real World Research, V2nd
   Roman A, 2021, SOFTWARE QUAL J, V29, P1, DOI 10.1007/s11219-020-09534-x
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   SAP, 2019, BUS BLUEPR
   Sharma C., 2013, Int. J. Comput. Sci. Issues, V10, P381
   Srikanth H, 2014, SOFTW TEST VERIF REL, V24, P320, DOI 10.1002/stvr.1500
   Sutherland J., 2012, SOFTWARE 30 DAYS, P133, DOI [10.1002/9781119203278, DOI 10.1002/9781119203278]
   SwarmOnline, 2018, DO WAT AG PROJ EST D
   Tanveer B, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2165
   Taviloglu O., 2018, ICATCES 2018
   Veenendaal E., 1997, ACHIEVING SOFTWARE P, P145
   Wegener J, 2005, LECT NOTES COMPUT SC, V3777, P82
   Whyte G, 2011, PROCEEDINGS OF THE 2ND INTERNATIONAL CONFERENCE ON INFORMATION MANAGEMENT AND EVALUATION, P450
   Xiao P, 2018, J SYST SOFTWARE, V143, P159, DOI 10.1016/j.jss.2018.05.029
   Xu DX, 2015, IEEE T RELIAB, V64, P247, DOI 10.1109/TR.2014.2354172
   Yin R. K., 2017, CASE STUDY RES DESIG
   Yizama Y., 2020, SPRINGER SERIES RELI, DOI 10.1007/978-3-030-36518-9_7
NR 55
TC 1
Z9 1
U1 1
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2022
VL 30
IS 3
BP 809
EP 851
DI 10.1007/s11219-021-09577-8
EA JAN 2022
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W2CB
UT WOS:000750279300001
DA 2024-07-18
ER

PT J
AU Mendonça, DS
   Kalinowski, M
AF Mendonca, Diogo S.
   Kalinowski, Marcos
TI An empirical investigation on the challenges of creating custom static
   analysis rules for defect localization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Custom static analysis rules; Code defect patterns; Pattern-Driven
   Maintenance; Observational study
AB Custom static analysis rules, i.e., rules specific for one or more applications, have been successfully applied to perform corrective and preventive software maintenance. Pattern-driven maintenance (PDM) is a method designed to support the creation of such rules during software maintenance. However, as PDM was recently proposed, few maintainers have reported on its usage. Hence, the challenges and skills needed to apply PDM properly are unknown. In this paper, we investigate the challenges faced by maintainers on applying PDM for creating custom static analysis rules for defect localization. We conducted an observational study on novice maintainers creating custom static analysis rules by applying PDM. The study was divided into three tasks: (i) identifying a defect pattern, (ii) programming a static analysis rule to locate instances of the pattern, and (iii) verifying the located instances. We analyzed the efficiency and acceptance of maintainers on applying PDM and their comments on task challenges. We observed that previous knowledge on debugging, the subject software, and related technologies influenced the performance of maintainers as well as the time to learn the technology involved in rule programming. The results strengthen our confidence that PDM can help maintainers in producing custom static analysis rules for locating defects. However, a proper selection and training of maintainers is needed to apply PDM effectively. Also, using a higher level of abstraction can ease static analysis rule programming for novice maintainers.
C1 [Mendonca, Diogo S.] Ctr Fed Educ Tecnol Celso Suckow Fonseca, CEFET RJ, Rio De Janeiro, Brazil.
   [Kalinowski, Marcos] Pontificia Univ Catolica Rio de Janeiro PUC Rio, Rio De Janeiro, Brazil.
C3 Centro Federal de Educacao Tecnologica Celso Suckow da Fonseca
   (CEFET-RJ)
RP Mendonça, DS (corresponding author), Ctr Fed Educ Tecnol Celso Suckow Fonseca, CEFET RJ, Rio De Janeiro, Brazil.
EM diogo.mendonca@cefet-rj.br; kalinowski@inf.puc-rio.br
RI Mendonça, Diogo Silveira/AGR-7337-2022
OI Mendonca, Diogo Silveira/0000-0003-4357-2888
FU CNPq [141345/2015-2]
FX This work was partially supported by the CNPq grant 141345/2015-2.
CR Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   Beller M, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P470, DOI 10.1109/SANER.2016.105
   Bourque Pierre, 2014, SWEBOK: Guide to the Software Engineering Body of Knowledge, V3rd
   Christakis M, 2016, IEEE INT CONF AUTOM, P332, DOI 10.1145/2970276.2970347
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Heckman S, 2011, INFORM SOFTWARE TECH, V53, P363, DOI 10.1016/j.infsof.2010.12.007
   InfoEther Inc, 2020, PMD
   Jedlitschka A., 2008, Guide to advanced empirical software engineering, P201, DOI DOI 10.1007/978-1-84800-044-5_8
   Jones Capers, 2011, The Economics of Software Quality
   Mendonca D., 2020, P S BRAS QUAL SOFTW, P10
   Mendonça DS, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3268924
   Muske T, 2016, IEEE INT WORK C SO, P157, DOI 10.1109/SCAM.2016.25
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Shull F., 2001, Software Engineering Notes, V26, P288, DOI 10.1145/503271.503248
   Silva D., 2021, 35 BRAZ S SOFTW ENG, P127, DOI [10.1145/3474624.3476017, DOI 10.1145/3474624.3476017]
   SonarSource, 2008, SonarQube
   Tymchuk Y, 2018, INT C PROGRAM COMPRE, P64, DOI 10.1145/3196321.3196327
NR 18
TC 2
Z9 2
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2022
VL 30
IS 3
BP 781
EP 808
DI 10.1007/s11219-021-09580-z
EA JAN 2022
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W2CB
UT WOS:000749012900001
PM 38624969
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Pietrantuono, R
   Russo, S
AF Pietrantuono, Roberto
   Russo, Stefano
TI A survey on software aging and rejuvenation in the cloud
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software aging; Rejuvenation; Cloud; Performance; Virtualization;
   Virtual machine; Survey; Literature review
ID VIRTUALIZED SYSTEM; ENERGY-CONSUMPTION; MODEL; PERFORMANCE; RELIABILITY
AB The adoption of cloud computing for providing resource and delivering services is an irreversible trend. For most IT companies, the quality of provided services is strongly dependent on reliability and performance of the underlying cloud technologies. A widely studied problem that can greatly affect the user experience is runtime software aging, whose main countermeasure is a proactive maintenance action known as rejuvenation. This article reviews the effort conducted so far by the software aging and rejuvenation (SAR) community in the cloud domain. A set of 105 papers has been examined from three source digital libraries in order to have a clear view of the state of the art. The paper characterizes the cloud-related SAR literature according to four dimensions: the publication trends, the aging analysis methods and metrics, the rejuvenation solutions, the validation approach. Results witness an increasing interest in this area (with 58% of the studies published in the last 5 years), an equivalent role of measurement-based and model-based solutions for aging analysis (42 and 40 studies, respectively) and a prevalent interest for rejuvenation (76/105 of the studies deals with rejuvenation).
C1 [Pietrantuono, Roberto; Russo, Stefano] Univ Napoli Federico II, Dipartimento Ingn Elettr & Tecnol Informaz, Via Claudio 21, I-80125 Naples, Italy.
C3 University of Naples Federico II
RP Pietrantuono, R (corresponding author), Univ Napoli Federico II, Dipartimento Ingn Elettr & Tecnol Informaz, Via Claudio 21, I-80125 Naples, Italy.
EM roberto.pietrantuono@unina.it; stefano.russo@unina.it
RI Russo, Stefano/H-7723-2013
OI Russo, Stefano/0000-0002-8747-3446; Pietrantuono,
   Roberto/0000-0003-2449-1724
CR Alonso J, 2013, PERFORM EVALUATION, V70, P231, DOI 10.1016/j.peva.2012.09.002
   Alonso J, 2012, PROC INT SYMP SOFTW, P299, DOI 10.1109/ISSREW.2012.96
   Araujo J., 2011, Proceedings of the 2011 IEEE Third International Workshop on Software Aging and Rejuvenation (WoSAR 2011), P38, DOI 10.1109/WoSAR.2011.18
   Araujo J, 2014, ACM J EMERG TECH COM, V10, DOI 10.1145/2539122
   Avresky DR, 2015, 2015 IEEE 14TH INTERNATIONAL SYMPOSIUM ON NETWORK COMPUTING AND APPLICATIONS (NCA), P114, DOI 10.1109/NCA.2015.36
   Bartoletti D, 2019, PREDICTIONS 2019 CLO
   Bovenzi A, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P240, DOI 10.1109/ISSRE.2011.18
   Bruneo D, 2013, IEEE T COMPUT, V62, P1072, DOI 10.1109/TC.2013.30
   Cavezza DG, 2014, PROC INT SYMP SOFTW, P267, DOI 10.1109/ISSRE.2014.19
   Chang XL, 2016, C LOCAL COMPUT NETW, P611, DOI 10.1109/LCN.2016.104
   Chen Z, 2018, COMPUT J, V61, P1296, DOI 10.1093/comjnl/bxx116
   Columbus L., 2018, Forrester's 10 Cloud Computing Predictions For
   Cotroneo D, 2016, PROC INT SYMP SOFTW, P478, DOI 10.1109/ISSRE.2016.25
   Cotroneo D, 2014, ACM J EMERG TECH COM, V10, DOI 10.1145/2539117
   Cotroneo D, 2013, SOFTW TEST VERIF REL, V23, P199, DOI 10.1002/stvr.467
   Cotroneo D, 2013, PERFORM EVALUATION, V70, P163, DOI 10.1016/j.peva.2012.09.004
   Dabrowsk C., 2011, Proceedings of the 2011 IEEE 3rd International Conference on Cloud Computing Technology and Science (CloudCom 2011), P554, DOI 10.1109/CloudCom.2011.84
   DeCelles S, 2016, IEEE INT CONF CLOUD, P303, DOI [10.1109/CLOUD.2016.46, 10.1109/CLOUD.2016.0048]
   Escheikh M, 2017, J SYST SOFTWARE, V125, P365, DOI 10.1016/j.jss.2016.12.037
   Escheikh M, 2016, IEEE INT SYMP SOFTW, P111, DOI 10.1109/ISSREW.2016.31
   Fang Liu, 2013, Applied Mechanics and Materials, V392, P779, DOI 10.4028/www.scientific.net/AMM.392.779
   Ficco M, 2018, FUTURE GENER COMP SY, V86, P975, DOI 10.1016/j.future.2017.08.051
   Grottke M., 2008, IEEE INT C SOFTW REL
   Han L, 2013, J COMPUT INF SYST, V9, P8389
   Hla Myint May Tar, 2010, Proceedings 2010 Fourth IEEE International Conference on Secure Software Integration and Reliability Improvement (SSIRI 2010), P156, DOI 10.1109/SSIRI.2010.19
   Huang T., 2016, IEEE T CLOUD COMPUTI
   Jian Xu, 2014, Journal of Software, V9, P129, DOI 10.4304/jsw.9.1.129-139
   Kadirvel S., 2010, Proceedings of the 2010 IEEE 2nd International Conference on Cloud Computing Technology and Science (CloudCom 2010), P433, DOI 10.1109/CloudCom.2010.83
   Kitchenham B, 2013, INFORM SOFTWARE TECH, V55, P2049, DOI 10.1016/j.infsof.2013.07.010
   Kourai K., 2010, 2010 International Conference on Dependable Systems and Networks Workshops (DSN-W), P86, DOI 10.1109/DSNW.2010.5542614
   Kourai K., 2015, P 6 AS PAC WORKSH SY
   Kourai K, 2007, I C DEPEND SYS NETWO, P245, DOI 10.1109/DSN.2007.6
   Kourai K, 2011, IEEE T DEPEND SECURE, V8, P839, DOI 10.1109/TDSC.2010.20
   Le MX, 2012, COLLABORATECOM, P11, DOI 10.4108/icst.collaboratecom.2012.250467
   Liu YX, 2015, AD HOC NETW, V35, P37, DOI 10.1016/j.adhoc.2015.07.009
   Machida F., 2012, Proceedings of the 2012 IEEE 23rd International Symposium on Software Reliability Engineering (ISSRE), P131, DOI 10.1109/ISSRE.2012.19
   Machida F., 2011, Proceedings of the 2011 IEEE Third International Workshop on Software Aging and Rejuvenation (WoSAR 2011), P44, DOI 10.1109/WoSAR.2011.10
   Machida F., 2010, 2 INT WORKSH SOFTW A
   Machida F, 2014, ACM J EMERG TECH COM, V10, DOI 10.1145/2539121
   Machida F, 2013, PERFORM EVALUATION, V70, P212, DOI 10.1016/j.peva.2012.09.003
   Machida F, 2012, 2012 9TH INTERNATIONAL CONFERENCE ON UBIQUITOUS INTELLIGENCE & COMPUTING AND 9TH INTERNATIONAL CONFERENCE ON AUTONOMIC & TRUSTED COMPUTING (UIC/ATC), P486, DOI 10.1109/UIC-ATC.2012.52
   Melo M, 2013, I C DEPEND SYS NETWO
   Melo M, 2013, IEEE SYS MAN CYBERN, P4110, DOI 10.1109/SMC.2013.701
   Mohan G., 2015, Proceedings of the Multidisciplinary Academic Conference, P1
   Okamura H, 2014, QUAL TECHNOL QUANT M, V11, P335, DOI 10.1080/16843703.2014.11673349
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   Pietrantuono R, 2018, IEEE INT SYMP SOFTW, P257, DOI [10.1109/1SSREW.2018.00016, 10.1109/ISSREW.2018.00016]
   Rahme J, 2015, INT J SOFTW ENG KNOW, V25, P1491, DOI 10.1142/S021819401540029X
   Rezaei A, 2010, FIFTH INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY, AND SECURITY: ARES 2010, PROCEEDINGS, P289, DOI 10.1109/ARES.2010.69
   Silva LM, 2009, IEEE T COMPUT, V58, P1525, DOI 10.1109/TC.2009.119
   Simeonov D, 2010, L N INST COMP SCI SO, V34, P186
   Sudhakar C, 2014, 2014 INTERNATIONAL CONFERENCE ON PARALLEL, DISTRIBUTED AND GRID COMPUTING (PDGC), P230, DOI 10.1109/PDGC.2014.7030747
   Sukhwani H, 2017, IEEE INT SYMP SOFTW, P266, DOI 10.1109/ISSREW.2017.65
   Tan Y., 2010, 2 INT C INF ENG COMP
   Thein T, 2008, INT J COMPUT SCI NET, V8, P72
   Thein T, 2009, J COMPUT SCI TECH-CH, V24, P339, DOI 10.1007/s11390-009-9228-1
   Torquato M, 2018, J SUPERCOMPUT, V74, P4817, DOI 10.1007/s11227-018-2485-4
   Torquato M, 2017, IBER CONF INF SYST
   Nguyen TA, 2014, SCI WORLD J, DOI 10.1155/2014/165316
   Umesh IM, 2017, ADV INTELL SYST, V469, P779, DOI 10.1007/978-981-10-1678-3_75
   Umesh IM, 2016, INDONESIAN J ELECT E, V3, P572, DOI DOI 10.11591/ijeecs.v3.i3.pp572-578
   Villalobos JJ, 2014, 2014 INTERNATIONAL CONFERENCE ON CLOUD AND AUTONOMIC COMPUTING (ICCAC 2014), P3, DOI 10.1109/ICCAC.2014.27
   Wohlin C, 2013, J SYST SOFTWARE, V86, P2594, DOI 10.1016/j.jss.2013.04.076
   Wu HM, 2015, 2015 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P125, DOI 10.1109/ISSREW.2015.7392057
   Xia YN, 2014, INT C ADV MECH SYST, P139, DOI 10.1109/ICAMechS.2014.6911639
   Xu J, 2014, 2014 IEEE WORKSHOP ON ELECTRONICS, COMPUTER AND APPLICATIONS, P782, DOI 10.1109/IWECA.2014.6845739
   Zhao J, 2014, 2014 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P426, DOI 10.1109/ISSREW.2014.38
NR 67
TC 11
Z9 11
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 7
EP 38
DI 10.1007/s11219-019-09448-3
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500002
DA 2024-07-18
ER

PT J
AU Torquato, M
   Maciel, P
   Vieira, M
AF Torquato, Matheus
   Maciel, Paulo
   Vieira, Marco
TI Availability and reliability modeling of VM migration as rejuvenation on
   a system under varying workload
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software aging and rejuvenation; VM migration; Availability;
   Reliability; Cloud computing
ID SERVER VIRTUALIZED SYSTEM; SOFTWARE REJUVENATION; POLICIES
AB Cloud computing serves as a platform for diverse types of applications, from low-priority to critical. Some of these applications require high levels of system availability and reliability. Developing methods for cloud computing availability and reliability evaluation is of utmost importance. In this paper, we propose a set of models for availability and reliability evaluation of a virtualized system with VMM software rejuvenation enabled by VM migration scheduling. To improve models fidelity with a real environment, we added a specific sub-model to represent the aspects of workload variation. Our main goal is to find the proper VM migration schedule to maximize system availability and to analyze the impact of such a schedule on the system reliability. Our results include the following: (1) the appropriate rejuvenation schedule to maximize availability in each proposed scenario; (2) downtime reduction when comparing the system with and without rejuvenation; and (3) reliability analysis of different scenarios of workload variation considering the proper rejuvenation schedules. The evaluation results comprise from systems without high workload demand (peakDuration = 0 h per day) to systems with only high workload demand (peakDuration = 24 h per day). Our results show a significant improvement in availability and reliability due to VM migration scheduling. In scenarios with a heavy workload, the downtime avoidance caused by software rejuvenation surpasses 3.39 days, and the reliability gain passes 86%.
C1 [Torquato, Matheus; Vieira, Marco] Univ Coimbra CISUC, Ctr Informat & Syst, Dept Informat Engn, Coimbra, Portugal.
   [Torquato, Matheus] Fed Inst Alagoas IFAL, Campus Arapiraca, Arapiraca, Brazil.
   [Maciel, Paulo] Univ Fed Pernambuco CIn UFPE, Ctr Informat, Recife, PE, Brazil.
C3 Universidade de Coimbra; Instituto Federal de Alagoas (IFAL)
RP Torquato, M (corresponding author), Univ Coimbra CISUC, Ctr Informat & Syst, Dept Informat Engn, Coimbra, Portugal.; Torquato, M (corresponding author), Fed Inst Alagoas IFAL, Campus Arapiraca, Arapiraca, Brazil.
EM mdmelo@dei.uc.pt; prmm@cin.ufpe.br; mvieira@dei.uc.pt
RI Vieira, Marco/L-4087-2014
OI Vieira, Marco/0000-0001-5103-8541; Melo, Matheus D'Eca Torquato
   de/0000-0003-3211-7951
CR [Anonymous], 2014, J INFORM COMPUTATION
   [Anonymous], 2001, INT S SOFTW REL ENG
   [Anonymous], P IEEE WESCON LOS AN
   [Anonymous], 2010, MOL BIOL INT
   [Anonymous], 1994, Communications in Reliability, Maintainability and Serviceability
   [Anonymous], INT J COMPUTER SCI N
   [Anonymous], 2001, Fundamental Concepts of Dependability
   [Anonymous], 2018, J INF SYST ENG MANAG
   Araujo J, 2011, IEEE SYS MAN CYBERN, P1411, DOI 10.1109/ICSMC.2011.6083867
   Araujo Jean, 2011, P MIDDLEWARE 2011 IN, DOI [10.1145/2090181.2090185, DOI 10.1145/2090181.2090185]
   Avizienis A, 2004, IEEE T DEPEND SECURE, V1, P11, DOI 10.1109/TDSC.2004.2
   Bovenzi A, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P240, DOI 10.1109/ISSRE.2011.18
   Ciardo G., 1993, IMA VOLUMES MATH ITS, V48, P145
   Clark C, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND SYMPOSIUM ON NETWORKED SYSTEMS DESIGN & IMPLEMENTATION (NSDI '05), P273
   Constantinescu C, 2005, IEEE T RELIAB, V54, P468, DOI 10.1109/TR.2005.853038
   Cotroneo D, 2014, ACM J EMERG TECH COM, V10, DOI 10.1145/2539117
   Dantas J, 2012, IEEE SYS MAN CYBERN, P1664, DOI 10.1109/ICSMC.2012.6377976
   Dohi T, 2018, RELIAB ENG SYST SAFE, V180, P463, DOI 10.1016/j.ress.2018.08.009
   Fricks RB, 2017, P REL MAINT S
   Grottke M., 2005, The Journal of Reliability Engineering Association of Japan, V27, P425
   Grottke M, 2007, COMPUTER, V40, P107, DOI 10.1109/MC.2007.55
   HUANG YN, 1995, DIG PAP INT SYMP FAU, P381, DOI 10.1109/FTCS.1995.466961
   Kim DS, 2009, IEEE 15TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P365, DOI 10.1109/PRDC.2009.64
   Langner F, 2013, 2013 IFIP/IEEE INTERNATIONAL SYMPOSIUM ON INTEGRATED NETWORK MANAGEMENT (IM 2013), P896
   Machida F, 2013, PERFORM EVALUATION, V70, P212, DOI 10.1016/j.peva.2012.09.003
   MALHOTRA M, 1995, IEEE T RELIAB, V44, P428, DOI 10.1109/24.406578
   MALHOTRA M, 1994, IEEE T RELIAB, V43, P493, DOI 10.1109/24.326452
   Malhotra M., 1993, COMMUN STAT STOCHAST, V9, P473, DOI [DOI 10.1080/15326349308807278, 10.1080/15326349308807278]
   Marsan M.A., 1995, MODELLING GEN STOCHA, V292
   Matos R, 2012, PROC INT SYMP SOFTW, P293, DOI 10.1109/ISSREW.2012.82
   Matos RD, 2012, IEEE T RELIAB, V61, P994, DOI 10.1109/TR.2012.2220711
   Melo M, 2013, I C DEPEND SYS NETWO
   Melo M, 2013, IEEE SYS MAN CYBERN, P4110, DOI 10.1109/SMC.2013.701
   Mural I., 1999, Dependable Computing for Critical Applications 7, P319, DOI 10.1109/DCFTS.1999.814303
   Okamura H, 2014, QUAL TECHNOL QUANT M, V11, P335, DOI 10.1080/16843703.2014.11673349
   PARNAS DL, 1994, PROC INT CONF SOFTW, P279, DOI 10.1109/ICSE.1994.296790
   Suzuki H, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P479, DOI 10.1109/ISSRE.2003.1251068
   Thein T, 2009, J COMPUT SCI TECH-CH, V24, P339, DOI 10.1007/s11390-009-9228-1
   Torquato deMelo., 2017, J ADV THEORETICAL AP, V3, P31
   Torquato M., 2018, J SUPERCOMPUT, P1
   Torquato M, 2018, IEEE INT SYMP SOFTW, P300, DOI [10.1109/ISSREW.2018.00022, 10.1109/1SSREW.2018.00022]
   Torquato M, 2017, IBER CONF INF SYST
   Trivedi K. S., 1993, Performance Evaluation of Computer and Communication Systems. Joint Tutorial Papers Performance '93 and Sigmetrics '93, P587, DOI 10.1007/BFb0013869
   Trivedi K. S., 2000, Proceedings 33rd Annual Simulation Symposium (SS 2000), P270, DOI 10.1109/SIMSYM.2000.844925
   Vaidyanathan K, 2005, IEEE T DEPEND SECURE, V2, P124, DOI 10.1109/TDSC.2005.15
   Vaidyanathan K., 1999, Proceedings 10th International Symposium on Software Reliability Engineering (Cat. No.PR00443), P84, DOI 10.1109/ISSRE.1999.809313
   Wajid RA, 2006, PAK J STAT OPER RES, V2, P127, DOI 10.18187/pjsor.v2i2.96
   Wang DZ, 2007, PERFORM EVALUATION, V64, P247, DOI 10.1016/j.peva.2006.04.002
   Xie W, 2004, 10TH IEEE PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P122
   Zimmermann A, 2017, LECT NOTES COMPUT SC, V10503, P300, DOI 10.1007/978-3-319-66335-7_19
NR 50
TC 11
Z9 11
U1 1
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 59
EP 83
DI 10.1007/s11219-019-09474-1
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500004
DA 2024-07-18
ER

PT J
AU Schramme, M
   Macías, JA
AF Schramme, Maximilian
   Macias, Jose A.
TI Analysis and measurement of internal usability metrics through code
   annotations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Internal software-product quality; Usability metric; Code annotation;
   User-centered development; Human-computer interaction
ID QUALITY
AB Nowadays, usability can be meant as an important quality characteristic to be considered throughout the software development process. A great variety of usability techniques have been proposed so far, mostly intended to be applied during analysis, design, and final testing phases in software projects. However, little or no attention has been paid to the analysis and measurement of usability in the implementation phase. Most of the time, usability testing is traditionally executed in advanced stages. However, the detection of usability flaws during the implementation is of utmost importance to foresee and prevent problems in the utilization of the software and avoid significant cost increases. In this paper, we propose a feasible solution to analyze and measure usability metrics during the implementation phase. Specifically, we have developed a framework featuring code annotations that provides a systematic evaluation of the usability throughout the source code. These annotations are interpreted by an annotation processor to obtain valuable information and automatically calculate usability metrics at compile time. In addition, an evaluation with 32 participants has been carried out to demonstrate the effectiveness and efficiency of our approach in comparison with the manual process of analyzing and measuring internal usability metrics. Perceived satisfaction was also evaluated, demonstrating that our approach can be considered as a valuable tool for dealing with usability metrics during the implementation phase.
C1 [Schramme, Maximilian] Tech Univ Munich, Dept Business Informat, Munich, Germany.
   [Macias, Jose A.] Univ Autonoma Madrid, Comp Engn Dept, Madrid, Spain.
C3 Technical University of Munich; Autonomous University of Madrid
RP Macías, JA (corresponding author), Univ Autonoma Madrid, Comp Engn Dept, Madrid, Spain.
EM maximilian.schramme@tum.de; j.macias@uam.es
RI Macias, Jose Antonio/B-5397-2014
OI Macias, Jose Antonio/0000-0001-5071-0076
FU Madrid Research Council [P2018/TCS-4314]
FX This work was partially supported by the Madrid Research Council
   (P2018/TCS-4314).
CR Abran A, 2003, SOFTWARE QUAL J, V11, P325, DOI 10.1023/A:1025869312943
   [Anonymous], P IEEE INT C GLOB SO
   [Anonymous], P HUM FACT WEB 6 C
   [Anonymous], P INT C HUM CTR DES
   [Anonymous], P ACM SIGCHI S ENG I
   [Anonymous], 912632003 ISO IEC TR
   [Anonymous], 2013, MEASURING USER EXPER
   [Anonymous], P INT C HUM CTR SOFT
   [Anonymous], P 8 INT C INT US INT
   [Anonymous], P SOFTW EV WEEK IEEE
   [Anonymous], ECL DEV FRAM
   [Anonymous], P NORD C HUM COMP IN
   [Anonymous], 250232016 ISO IEC
   [Anonymous], CUICS9217 U COL
   [Anonymous], P INT C HUM COMP INT
   [Anonymous], P HUM CTR SOFTW ENG
   [Anonymous], P ENG INT SYST
   [Anonymous], JAV DEV KIT
   [Anonymous], 1990, P SIGCHI C HUM FACT
   [Anonymous], P INT C COMP AID SYS
   [Anonymous], 912622002 ISO IEC TR
   [Anonymous], 145982006 ISO IEC
   [Anonymous], P INT C ENT INF SYST
   [Anonymous], NETBEANS DEV FRAM
   [Anonymous], 2008, 1028 IEEE
   [Anonymous], P INT C HUM CTR DES
   [Anonymous], P IWWOST
   [Anonymous], PSYCHOL HUMAN COMPUT
   Briand LC, 2002, ADV COMPUT, V56, P97, DOI 10.1016/S0065-2458(02)80005-5
   Carvalho RM, 2017, SOFTWARE QUAL J, V25, P743, DOI 10.1007/s11219-016-9320-z
   Cayola L, 2018, INFORM SOFTWARE TECH, V97, P163, DOI 10.1016/j.infsof.2018.01.010
   Dix A., 2004, Human-computer interaction
   Dubey S.K., 2011, ACM SIGSOFT SOFTW EN, V36, P1, DOI [10.1145/1943371.1943382, DOI 10.1145/1943371.1943382]
   Faulkner L, 2003, BEHAV RES METH INS C, V35, P379, DOI 10.3758/BF03195514
   Han WM, 2018, SOFTWARE QUAL J, V26, P367, DOI 10.1007/s11219-017-9365-7
   Hwang W, 2010, COMMUN ACM, V53, P130, DOI 10.1145/1735223.1735255
   Panach JI, 2011, INT J SOFTW ENG KNOW, V21, P339, DOI 10.1142/S0218194011005311
   ISO, 2005, IEC 25000 Software and system engineering-Software product Quality Requirements and Evaluation (SQuaRE)-Guide to SQuaRE
   ISO/IEC, 2011, ISO/IEC 25010:2011 Systems and software engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality models
   ISO/IEC, 2001, Technical Report, V1st
   Jabangwe R, 2015, SOFTWARE QUAL J, V23, P539, DOI 10.1007/s11219-014-9247-1
   Kanellopoulos Y., 2010, International Journal of Software Engineering and Applications, V1, P17, DOI [DOI 10.5121/IJSEA.2010.1302, 10.5121/ijsea.2010.1302]
   Lund A M., 2001, USABILITY INTERFACE, V8, P3, DOI DOI 10.1177/1078087402250360
   Macías JA, 2008, WORLD WIDE WEB, V11, P253, DOI 10.1007/s11280-008-0043-3
   NIELSEN J, 1993, HUMAN FACTORS IN COMPUTING SYSTEMS, P206
   Orehovacki T, 2013, J SYST SOFTWARE, V86, P3039, DOI 10.1016/j.jss.2013.05.071
   Perlman G., 2015, USER INTERFACE USABI
   Sánchez E, 2019, REQUIR ENG, V24, P181, DOI 10.1007/s00766-017-0282-x
   Seffah A, 2006, SOFTWARE QUAL J, V14, P159, DOI 10.1007/s11219-006-7600-8
   Singh Y, 2010, SOFTWARE QUAL J, V18, P3, DOI 10.1007/s11219-009-9079-6
   Tomas P, 2013, COMPUT STAND INTER, V36, P244, DOI 10.1016/j.csi.2013.08.006
   Veral R, 2019, INT J HUM-COMPUT ST, V122, P184, DOI 10.1016/j.ijhcs.2018.09.012
NR 52
TC 2
Z9 2
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2019
VL 27
IS 4
BP 1505
EP 1530
DI 10.1007/s11219-019-09455-4
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KP9TA
UT WOS:000516573400006
OA Green Published
DA 2024-07-18
ER

PT J
AU Jin, WX
   Liu, T
   Qu, Y
   Zheng, QH
   Cui, D
   Chi, JL
AF Jin, Wuxia
   Liu, Ting
   Qu, Yu
   Zheng, Qinghua
   Cui, Di
   Chi, Jianlei
TI Dynamic structure measurement for distributed software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Dynamic metric; Calling network; Distributed software; Structure
   measurement
ID OBJECT-ORIENTED DESIGN; COHESION; SYSTEMS; METRICS; IMPACT
AB With the advent of network technologies and the ultra-fast increasing of computing ability, the distributed architecture has become a necessity for the majority of software systems. However, it is difficult for current architecture measurements to evaluate distributed systems, such as cohesion and coupling. Most current methods focus on the relations among various classes or packages but barely consider the structure at component level, which has a serious impact on change impact analysis, fault diagnosis, or other maintenance activities. In this paper, we propose a dynamic structure measurement for distributed software. The intra-component and inter-component dependencies are introduced into a Calling Network model to further represent distributed software. More importantly, based on the Kieker monitoring framework, the measurement methods are proposed and implemented for distributed software. Two structural quality attributes cohesion factor of component (CHC) and coupling factor of component (CPC) are measured. Finally, case studies are conducted on two open-source distributed systems: RSS Reader Recipes and the distributed version of iBATIS JPetStore. By applying the proposed methods and comparing with the existing ones, the features of CHC and CPC can be assessed and observed for distributed software.
C1 [Jin, Wuxia; Liu, Ting; Qu, Yu; Zheng, Qinghua; Cui, Di; Chi, Jianlei] Xi An Jiao Tong Univ, Minist Educ, Key Lab Intelligent Networks & Network Secur, Xian, Shaanxi, Peoples R China.
C3 Xi'an Jiaotong University
RP Jin, WX (corresponding author), Xi An Jiao Tong Univ, Minist Educ, Key Lab Intelligent Networks & Network Secur, Xian, Shaanxi, Peoples R China.
EM wx_jin@stu.xjtu.edu.cn; tingliu@mail.xjtu.edu.cn;
   quyuxjtu@mail.xjtu.edu.cn; qhzheng@mail.xjtu.edu.cn;
   cuidi@sei.xjtu.edu.cn; chijianlei7@sei.xjtu.edu.cn
RI Qu, Yu/AAD-9426-2020
OI Qu, Yu/0000-0002-1400-6740
FU National Natural Science Foundation of China [91218301, U1301254,
   91418205, 61472318, 61428206, 61532015, 61602369]; Fok Ying-Tong
   Education Foundation [151067]; Key Project of the National Research
   Program of China [2013BAK09B01]; Ministry of Education Innovation
   Research Team [IRT13035]; Fundamental Research Funds for the Central
   Universities
FX This work was supported by the National Natural Science Foundation of
   China (91218301, U1301254, 91418205, 61472318, 61428206, 61532015,
   61602369), Fok Ying-Tong Education Foundation (151067), Key Project of
   the National Research Program of China (2013BAK09B01), Ministry of
   Education Innovation Research Team (IRT13035), and the Fundamental
   Research Funds for the Central Universities.
CR Al Dallal J., 2010, INT J COMPUTER SCI, V4, P45
   Al Dallal J, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2089116.2089118
   Allen E.B., 2001, Proceedings Seventh International Software Metrics Symposium, IEEE, P124
   [Anonymous], 2016, IEEE INT CONF AUTOM
   [Anonymous], ACM SIGSOFT SOFTWARE
   [Anonymous], 2010, IEEE INT C SOFTWARE
   [Anonymous], P 3 INT S PRINC PRAC
   Arisholm E., 2002, IEEE T SOFTWARE ENG, V30, P33
   Athanasopoulos D., 2014, IEEE T SERV COMPUT, V8, P1
   Bavota G, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P692, DOI 10.1109/ICSE.2013.6606615
   BIEMAN JM, 1994, IEEE T SOFTWARE ENG, V20, P644, DOI 10.1109/32.310673
   Briand L., 1998, P 4 INT SOFTW METR S, V3, P43
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P722, DOI 10.1109/32.815329
   Cai HP, 2016, IEEE INT CONF AUTOM, P344, DOI 10.1145/2970276.2970352
   Chidamber S. R., 1991, P C OOPSLA 91 SIGPL
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Coulouris G., 2012, Distributed Systems: Concepts and Design
   Counsell S, 2006, ACM T SOFTW ENG METH, V15, P123, DOI 10.1145/1131421.1131422
   Desouky A. F., 2014, ACM SE REG C, P1
   Elish Mahmoud O., 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P144, DOI 10.1109/ICPC.2010.43
   Fernandez G., 1998, DISTRIBUTED APPL ENG
   Geetika Rani, 2014, ACM SIGSOFT Software Engineering Notes, V39, P1, DOI [10.1145/2557833.2557847, DOI 10.1145/2557833.2557847]
   Gupta V, 2011, J SYST ARCHITECT, V57, P452, DOI 10.1016/j.sysarc.2010.05.008
   Nguyen H, 2013, INT CON DISTR COMP S, P21, DOI 10.1109/ICDCS.2013.26
   LEE YS, 1995, P INT C SOFTW QUAL
   Lin Y., 2016, P 2016 24 ACM SIGSOF
   Marwede N, 2009, EUR CON SFTWR MTNCE, P47, DOI 10.1109/CSMR.2009.15
   Mathur R, 2011, PROCEEDINGS OF THE 49TH ANNUAL ASSOCIATION FOR COMPUTING MACHINERY SOUTHEAST CONFERENCE (ACMSE '11), P255
   Nayrolles M, 2013, WORK CONF REVERSE EN, P321, DOI 10.1109/WCRE.2013.6671307
   Perepletchikov M, 2007, 2007 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P329, DOI 10.1109/ASWEC.2007.17
   Perepletchikov M, 2011, IEEE T SOFTWARE ENG, V37, P449, DOI 10.1109/TSE.2010.61
   Poshyvanyk D, 2006, PROC IEEE INT CONF S, P469
   Poshyvanyk D, 2009, EMPIR SOFTW ENG, V14, P5, DOI 10.1007/s10664-008-9088-2
   Qu YY, 2015, NEUROCHEM RES, V40, P1, DOI 10.1007/s11064-014-1456-2
   Qu Y, 2015, J SYST SOFTWARE, V108, P193, DOI 10.1016/j.jss.2015.06.015
   Sellers B. H., 1995, OBJECT ORIENTED METR
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   Tahir A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P326, DOI 10.1109/ICSM.2012.6405289
   Tanenbaum A. S., 2002, DISTRIBUTED SYSTEMS, P279
   Thönes J, 2015, IEEE SOFTWARE, V32, P116, DOI 10.1109/MS.2015.11
   Tian Z., 2017, IEEE T SOFTWARE ENG
   Van Hoorn A., 2012, P 3 ACM SPEC INT C P, P247, DOI DOI 10.1145/2188286.2188326
   Wang HJ, 2017, IEEE T SOFTWARE ENG, V43, P252, DOI 10.1109/TSE.2016.2584063
   Yacoub S. M., 1999, Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403), P50, DOI 10.1109/METRIC.1999.809725
   Ying ATT, 2004, IEEE T SOFTWARE ENG, V30, P574, DOI 10.1109/TSE.2004.52
NR 45
TC 6
Z9 6
U1 0
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 1119
EP 1145
DI 10.1007/s11219-017-9369-3
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000011
DA 2024-07-18
ER

PT J
AU Lu, W
   Yang, Y
   Wang, LQ
   Xing, WW
   Che, XP
   Chen, L
AF Lu, Wei
   Yang, Yong
   Wang, Liqiang
   Xing, Weiwei
   Che, Xiaoping
   Chen, Lei
TI A fault tolerant election-based deadlock detection algorithm in
   distributed systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Deadlock detection; Fault tolerance; Leader election; Distributed
   system; Generalized deadlock
ID GENERALIZED-MODEL; RESOLUTION; DATABASES
AB Deadlock detection in a distributed system without shared memory is important to ensure the reliability of the system. It becomes more complex when multiple deadlock detection algorithm instances execute concurrently in the system. In addition, the problem of communication disconnection between computing nodes or processes makes deadlock detection more difficult. Existing centralized algorithms suffer from single point failure of the central controller (due to communication disconnection), and they are performance-inefficient in the case of concurrent execution. In this paper, we extend our previous work (Lu et al. 2016) and propose a fault tolerant deadlock detection algorithm in distributed systems. The extended proposed algorithm can tolerate a certain extent of communication disconnection between computing nodes or processes. A central controller is used to collect requesting conditions, construct a wait-for graph, and detect deadlocks. The proposed algorithm can select a new central controller if the current central leader fails due to communication disconnections. The liveness and safety properties of the proposed algorithm are proved in this paper. Experimental results show that the proposed algorithm provides better performance than most of existing algorithms in terms of message number, data traffic, and execution time. In addition, the proposed algorithm provides additional fault tolerance compared to existing deadlock detection algorithms in the case of communication disconnection.
C1 [Lu, Wei; Yang, Yong; Xing, Weiwei; Che, Xiaoping; Chen, Lei] Beijing Jiaotong Univ, Sch Software Engn, Beijing 100044, Peoples R China.
   [Wang, Liqiang] Univ Cent Florida, Dept Comp Sci, Orlando, FL 32816 USA.
C3 Beijing Jiaotong University; State University System of Florida;
   University of Central Florida
RP Yang, Y (corresponding author), Beijing Jiaotong Univ, Sch Software Engn, Beijing 100044, Peoples R China.
EM 12112088@bjtu.edu.cn; lwang@cs.ucf.edu
OI yang, yong/0000-0002-0172-4890
FU National Natural Science Foundation of China [61272353, 61370128,
   61428201, 61502028]; National Science Foundation of USA [1622292];
   Program for New Century Excellent Talents in University [NCET-13-0659];
   Beijing Higher Education Young Elite Teacher Project [YETP-0583]; Office
   of Advanced Cyberinfrastructure (OAC); Direct For Computer & Info Scie &
   Enginr [1622292] Funding Source: National Science Foundation
FX This work is supported in part by the National Natural Science
   Foundation of China (Nos. 61272353, 61370128, 61428201, and 61502028),
   the National Science Foundation of USA (No. 1622292), Program for New
   Century Excellent Talents in University (NCET-13-0659), Beijing Higher
   Education Young Elite Teacher Project (YETP-0583).
CR Agarwal R, 2010, IBM J RES DEV, V54, DOI 10.1147/JRD.2010.2060276
   Agarwal R., 2006, P PAR DISTR SYST TES, V5503, P425
   [Anonymous], INT J COMPUT APPL
   BRACHA G, 1987, DISTRIB COMPUT, V2, P127, DOI 10.1007/BF01782773
   Brzezinski J, 1995, J PARALLEL DISTR COM, V31, P112, DOI 10.1006/jpdc.1995.1150
   Chen SG, 1996, INT CON DISTR COMP S, P613, DOI 10.1109/ICDCS.1996.508012
   CIDON I, 1987, IEEE T COMMUN, V35, P1139, DOI 10.1109/TCOM.1987.1096699
   Gupta S., 2013, INT J COMPUTER APPL, V74, P41
   HO GS, 1982, IEEE T SOFTWARE ENG, V8, P554, DOI 10.1109/TSE.1982.235884
   Holt R. C., 1972, Computing Surveys, V4, P179, DOI 10.1145/356603.356607
   Huang H, 2012, PROCEDIA COMPUT SCI, V9, P76, DOI 10.1016/j.procs.2012.04.009
   KNAPP E, 1987, COMPUT SURV, V19, P303, DOI 10.1145/45075.46163
   KSHEMKALYANI AD, 1994, IEEE T SOFTWARE ENG, V20, P43, DOI 10.1109/32.263754
   Kshemkalyani AD, 1999, IEEE T KNOWL DATA EN, V11, P880, DOI 10.1109/69.824601
   Kshemkalyani AD, 1997, INT CON DISTR COMP S, P553, DOI 10.1109/ICDCS.1997.603415
   Lee S, 2004, IEEE T SOFTWARE ENG, V30, P561, DOI 10.1109/TSE.2004.51
   Lee SJ, 2001, INT CON DISTR COMP S, P47, DOI 10.1109/ICDSC.2001.918932
   Lu W., 2016, P 1 INT WORKSH SPEC, P12
   Lu W., 2015, NOVEL CONCURRENT GEN, P479
   LUO KCK, 1993, IEEE INFOCOM SER, P994, DOI 10.1109/INFCOM.1993.253266
   Ma HY, 2013, PROC INT CONF PARAL, P510, DOI 10.1109/ICPP.2013.63
   MENASCE DA, 1979, IEEE T SOFTWARE ENG, V5, P195, DOI 10.1109/TSE.1979.234181
   Raynal M, 2014, 2014 EIGHTH INTERNATIONAL CONFERENCE ON COMPLEX, INTELLIGENT AND SOFTWARE INTENSIVE SYSTEMS (CISIS),, P273, DOI 10.1109/CISIS.2014.38
   Singh S., 2012, INT J COMPUTER APPL, V48, P28
   Srinivasan S, 2012, INT J PARALLEL EMERG, V27, P205, DOI 10.1080/17445760.2011.629999
   Srinivasan S, 2011, DISTRIB PARALLEL DAT, V29, P261, DOI 10.1007/s10619-011-7078-7
   Tao Z, 2014, 2014 IEEE 17TH INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND ENGINEERING (CSE), P735, DOI 10.1109/CSE.2014.152
   Tomar Parul, 2015, ADV COMPUTER SCI INF, V2, P63
   Wang LQ, 2009, FUTURE GENER COMP SY, V25, P568, DOI 10.1016/j.future.2008.06.007
NR 29
TC 2
Z9 2
U1 2
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 991
EP 1013
DI 10.1007/s11219-017-9379-1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000006
DA 2024-07-18
ER

PT J
AU Heck, P
   Zaidman, A
AF Heck, Petra
   Zaidman, Andy
TI A systematic literature review on quality criteria for agile
   requirements specifications
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Agile requirement; Just-in-time; Quality assessment; Systematic
   literature review; Quality criteria; Correctness
ID ENGINEERING PRACTICES
AB The quality of requirements is typically considered as an important factor for the quality of the end product. For traditional up-front requirements specifications, a number of standards have been defined on what constitutes good quality : Requirements should be complete, unambiguous, specific, time-bounded, consistent, etc. For agile requirements specifications, no new standards have been defined yet, and it is not clear yet whether traditional quality criteria still apply. To investigate what quality criteria for assessing the correctness of written agile requirements exist, we have conducted a systematic literature review. The review resulted in a list of 16 selected papers on this topic. These selected papers describe 28 different quality criteria for agile requirements specifications. We categorize and analyze these criteria and compare them with those from traditional requirements engineering. We discuss findings from the 16 papers in the form of recommendations for practitioners on quality assessment of agile requirements. At the same time, we indicate the open points in the form of a research agenda for researchers working on this topic .
C1 [Heck, Petra] Fontys Appl Univ, Software Engn, Eindhoven, Netherlands.
   [Zaidman, Andy] Delft Univ Technol, Software Engn, Delft, Netherlands.
   [Zaidman, Andy] Delft Univ Technol, Software Engn Res Grp, Delft, Netherlands.
C3 Delft University of Technology; Delft University of Technology
RP Heck, P (corresponding author), Fontys Appl Univ, Software Engn, Eindhoven, Netherlands.
EM p.heck@fontys.nl
RI Zaidman, Andy/O-6542-2014
OI Zaidman, Andy/0000-0003-2413-3935
CR [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 2004, TECHNICAL REPORT
   AUGER C.P., 1994, INFORM SOURCES GREY
   Beck K., 2011, MANIFESTO AGILE SOFT
   Beck Kent L., 2003, Test Driven Development By Example
   Belsis P, 2014, REQUIR ENG, V19, P213, DOI 10.1007/s00766-013-0172-9
   Bhasin S., 2012, Proceedings of the 2012 AGILE India Conference, P64, DOI 10.1109/AgileIndia.2012.18
   Bjarnason E, 2015, LECT NOTES BUS INF P, V212, P27, DOI 10.1007/978-3-319-18612-2_3
   Brereton P, 2007, J SYST SOFTWARE, V80, P571, DOI 10.1016/j.jss.2006.07.009
   Cornelissen B, 2009, IEEE T SOFTWARE ENG, V35, P684, DOI 10.1109/TSE.2009.28
   Davis A., 1993, Proceedings First International Software Metrics Symposium (Cat. No.93TH0518-1), P141, DOI 10.1109/METRIC.1993.263792
   Davis A, 2009, LECT NOTES COMPUT SC, V5512, P175, DOI 10.1007/978-3-642-02050-6_15
   De Lucia A., 2010, J EMERGING TECHNOLOG, V2, P309
   Desharnais J.-M, 2011, 2011 Proceedings of Joint Conf of 21st Int'l Workshop on Software Measurement and the 6th Int'l Conference on Software Process and Product Measurement (IWSM-MENSURA 2011), P269, DOI 10.1109/IWSM-MENSURA.2011.45
   Dingsoyr T, 2008, AGILE 2008, PROCEEDINGS, P83, DOI 10.1109/Agile.2008.50
   Dumas-Monette Jean-Francois, 2014, 2014 Joint Conference of the International Workshop on Software Measurement and the International Conference on Software Process and Product Measurement. (IWSM-MENSURA). Proceedings, P222, DOI 10.1109/IWSM.Mensura.2014.43
   Duncan R, 2001, CROSSTALK, V19, P22
   Dybå T, 2008, INFORM SOFTWARE TECH, V50, P833, DOI 10.1016/j.infsof.2008.01.006
   Eberlein Armin., 2002, Proceedings of the International Workshop on Time-Constrained Requirements Engineering (TCRE-02), P4
   Ernst N. A., 2012, Proceedings of the 2012 IEEE Second International Workshop on Empirical Requirements Engineering (EmpiRE), P25, DOI 10.1109/EmpiRE.2012.6347678
   Farid W.M., 2013, Proceedings of IEEE: Southeastcon, P1, DOI [10.1109/SECON.2013.6567413, DOI 10.1109/SECON.2013.6567413]
   Firesmith D, 2005, J OBJECT TECHNOL, V4, P27, DOI 10.5381/jot.2005.4.1.c3
   Gottesdiener E., 2010, BETTER SOFTW MAG, V4, P16
   Grau R., 2014, REQUIREMENTS ENG AGI
   Heck P., 2014, TUDSERG2014006 DELFT
   Heck P., 2016, REQUIR ENG, P1
   IEEE, 1998, 8301998 IEEE
   Inayat I, 2015, COMPUT HUM BEHAV, V51, P915, DOI 10.1016/j.chb.2014.10.046
   Kabbedijk J, 2015, J SYST SOFTWARE, V100, P139, DOI 10.1016/j.jss.2014.10.034
   Kassab M, 2014, EUROMICRO CONF PROC, P254, DOI 10.1109/SEAA.2014.77
   Kitchenham B., 2007, Guidelines for performing systematic literature reviews in software engineering
   Koo JYM, 2003, PSYCHOCUTANEOUS MED, P17
   Leffingwell D., 2011, Agile software requirements: Lean requirements practices for teams, programs, and the enterprise
   Liskin O, 2014, LNBIP, V179, P110, DOI [10.1007/978-3-319-06862-6_8, DOI 10.1007/978-3-319-06862-6]
   Liskin O., 2014, P 7 INT WORKSH COOP, P56, DOI DOI 10.1145/2593702.2593707
   Melnik G., 2006, AGILE 2006
   Ming Huo, 2004, Proceedings of the 28th Annual International Computer Software and Applications Conference. COMPSAC 2004, P520, DOI 10.1109/CMPSAC.2004.1342889
   North D., 2006, BETTER SOFTWARE, V2006, P4
   Paetsch F, 2003, TWELFTH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES, PROCEEDINGS, P308
   Patel Chetankumar, 2009, Journal of Software, V4, P422, DOI 10.4304/jsw.4.5.422-435
   Power K., 2014, AGIL PROCESS SOFTW E, P312
   Ramesh B, 2010, INFORM SYST J, V20, P449, DOI 10.1111/j.1365-2575.2007.00259.x
   Sfetsos P, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P44, DOI 10.1109/QUATIC.2010.17
   SILLITTI A, 2005, REQUIREMENTS ENG AGI, P309, DOI DOI 10.1007/3-540-28244-0_14
   Srinivasan J, 2009, PROCEEDINGS OF THE 2009 SIXTH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, VOLS 1-3, P1415, DOI 10.1109/ITNG.2009.334
   Staples M, 2007, J SYST SOFTWARE, V80, P1425, DOI 10.1016/j.jss.2006.09.046
   Wake B., 2003, INVEST in Good Stories, and SMART Tasks
   Wieringa R, 2006, REQUIR ENG, V11, P102, DOI 10.1007/s00766-005-0021-6
   WOHLIN Claes, 2014, P 18 INT C EVALUATIO, DOI [10.1145/2601248.2601268.10, 10.1145/2601248.2601268]
NR 49
TC 26
Z9 28
U1 3
U2 31
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2018
VL 26
IS 1
BP 127
EP 160
DI 10.1007/s11219-016-9336-4
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FX1AL
UT WOS:000425779200005
DA 2024-07-18
ER

PT J
AU Hora, A
   Robbes, R
   Valente, MT
   Anquetil, N
   Etien, A
   Ducasse, S
AF Hora, Andre
   Robbes, Romain
   Valente, Marco Tulio
   Anquetil, Nicolas
   Etien, Anne
   Ducasse, Stephane
TI How do developers react to API evolution? A large-scale empirical study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE API evolution; API deprecation; Software ecosystem; Empirical study
AB Software engineering research now considers that no system is an island, but it is part of an ecosystem involving other systems, developers, and users. When a framework or a library evolves, its clients often must adapt. For example, client developers might need to adapt to functionalities, client systems might need to be adapted to a new API, and client users might need to adapt to a new user interface. The consequences of these changes are yet unclear: what proportion of the ecosystem might be expected to react, how long might it take for a change to diffuse in the ecosystem, do all clients react in the same way? This paper reports an exploratory study aimed at observing API evolution and its impact on a large software ecosystem, Pharo, which has about 3600 distinct systems, and 6 years of evolution. We analyze 118 API changes in the context of method replacement and suggestion, and answer research questions regarding the magnitude, duration, extension, and consistency of such changes in the ecosystem. The results of this study help to characterize the impact of API evolution in large software ecosystems and provide the basis to better understand how such impact can be alleviated.
C1 [Hora, Andre] Univ Fed Mato Grosso do Sul, FACOM, Campo Grande, Brazil.
   [Valente, Marco Tulio] Univ Fed Minas Gerais, Dept Comp Sci DCC, ASERG Grp, Belo Horizonte, MG, Brazil.
   [Robbes, Romain] Univ Chile, Dept Comp Sci DCC, PLEIAD Lab, Santiago, Chile.
   [Anquetil, Nicolas; Etien, Anne; Ducasse, Stephane] INRIA, RMoD Team, Lille, France.
C3 Universidade Federal de Mato Grosso do Sul; Universidade Federal de
   Minas Gerais; Universidad de Chile; Inria
RP Hora, A (corresponding author), Univ Fed Mato Grosso do Sul, FACOM, Campo Grande, Brazil.
EM hora@facom.ufms.br; rrobbes@dcc.uchile.cl; mtov@dcc.ufmg.br;
   nicolas.anquetil@inria.fr; anne.etien@inria.fr;
   stephane.ducasse@inria.fr
RI Etien, Anne/AAG-4675-2020; Hora, Andre/HTP-0699-2023; Robbes,
   Romain/H-3771-2013
OI Etien, Anne/0000-0003-3034-873X; Hora, Andre/0000-0003-4900-1330;
   Anquetil, Nicolas/0000-0003-1486-8399; Valente, Marco
   Tulio/0000-0002-8180-7548
FU CNPq; FAPEMIG; Fundect-MS [007/2015]; ANR [ANR-2010-BLAN-0219-01]
FX This research was supported by CNPq, FAPEMIG, Fundect-MS (007/2015), and
   ANR (ANR-2010-BLAN-0219-01).
CR [Anonymous], 2009, Reverse engineering software ecosystems
   Bavota G., 2015, IEEE T SOFTWARE ENG, V41
   Bavota G., 2013, INT C SOFTW MAINT
   Boulanger J., 2006, INT C SOFTW MAINT
   Brito G., 2016, INT C SOFTW ANAL EV
   Businge J., 2013, SOFTWARE QUALITY J
   Chow K., 1996, INT C SOFTW MAINT
   Cossette B.E., 2012, P ACM SIGSOFT 20 INT, p55:1
   Dagenais B., 2008, INT C SOFTW ENG
   Dig D., 2005, INT C SOFTW MAINT
   German D. M., 2013, EUR C SOFTW MAINT RE
   Gokhale A., 2013, INT C SOFTW ENG
   Gonzalez-Barahona J. M., 2009, EMPIRICAL SOFTWARE E, V14
   Haenni N., 2014, EUR C SOFTW ARCH WOR
   Henkel J, 2005, PROC INT CONF SOFTW, P274
   Hora A., 2012, INT C SOFTW MAINT
   Hora A., 2016, INT S FDN SOFTW ENG
   Hora A., 2015, J SYSTEMS SOFTWARE, V109
   Hora A., 2014, SOFTW EV WEEK EUR C
   Hora A., 2015, INT C SOFTW MAINT EV
   Jansen S, 2013, SOFTWARE ECOSYSTEMS: ANALYZING AND MANAGING BUSINESS NETWORKS IN THE SOFTWARE INDUSTRY, P1, DOI 10.4337/9781781955635
   Jergensen C., 2011, EUR C FDN SOFTW ENG
   Kim M., 2007, INT C SOFTW ENG
   Kim M, 2009, PROC INT CONF SOFTW, P309, DOI 10.1109/ICSE.2009.5070531
   Linares-Vasquez M., 2014, INT C PROGR COMPRH
   Lungu M., 2010, SCI COMPUTER PROGRAM, V75
   Lungu M., 2010, INT C AUT SOFTW ENG
   McDonnell T., 2013, INT C SOFTW MAINT
   Meng S., 2012, INT C SOFTW ENG
   Messerschmitt D. G., 2005, MIT PRESS BOOKS, V1
   Nguyen H. A., 2010, INT C OBJ OR PROG SY
   Robbes R., 2012, P ACM SIGSOFT 20 INT, P1, DOI 10.1145/2393596.2393662
   Schafer T., 2008, INT C SOFTW ENG
   Schwarz N., 2012, INT C SOFTW ENG
   Serebrenik A., 2014, EVOLVING SOFTWARE SY, V1st
   Wu W., 2016, EMPIRICAL SOFTWARE E
   Wu W., 2010, INT C SOFTWARE ENG
   Zaki M., 2012, FUNDAMENTALS DATA MI
   Zhong H., 2010, INT C SOFTW ENG
NR 39
TC 37
Z9 40
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2018
VL 26
IS 1
BP 161
EP 191
DI 10.1007/s11219-016-9344-4
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FX1AL
UT WOS:000425779200006
DA 2024-07-18
ER

PT J
AU Noyer, A
   Iyenghar, P
   Engelhardt, J
   Pulvermueller, E
   Bikker, G
AF Noyer, Arne
   Iyenghar, Padma
   Engelhardt, Joachim
   Pulvermueller, Elke
   Bikker, Gert
TI A model-based framework encompassing a complete workflow from
   specification until validation of timing requirements in embedded
   software systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Requirements Interchange Format (ReqIF); Model-Driven Development;
   Timing requirements; Unified Modeling Language (UML); Modeling and
   Analysis of Real Time and Embedded systems (MARTE); Requirements
   traceability
AB Embedded software engineering very often involves development of complex, mission critical software; wherein it is imperative that the developed software fulfills its requirements to achieve high quality. In such cases, there are several advantages of using specialized Requirements Management (RM) tools for managing the requirements. Critical timing requirements are among the foremost non-functional (quality) requirements to be fulfilled by increasingly complex embedded software. Further, a correct and effective timing behavior is among the characteristics of high-quality software. On the other hand, Model-Driven Development (MDD) is considered as the next paradigm shift to address the increasing complexity in embedded software development and to achieve high-quality standards. Similarly, there are specialized tools for validating and analyzing the timing behavior of the embedded software. However, such tools are used very late in the development process, when the actual timing errors occur. Thus, it is intuitive to perceive that an integrated model-based framework encompassing a complete workflow from specification until validation of timing requirements in embedded software systems is very beneficial for high-quality software development, nevertheless is still missing. Addressing the aforementioned gap, this paper proposes an approach toward a complete workflow for managing timing requirements in RM tools, specifying timing behavior in MDD tools and their validation in specialized tools for timing analyses. A prototype implementation of the proposed framework and its experimental evaluation are discussed.
C1 [Noyer, Arne; Iyenghar, Padma; Pulvermueller, Elke] Univ Osnabrueck, Inst Comp Sci, Postfach 4469, D-49069 Osnabruck, Germany.
   [Engelhardt, Joachim; Bikker, Gert] Ostfalia Univ, Inst Distributes Syst, Salzdahlumer Str 46-48, D-38302 Wolfenbuttel, Germany.
C3 University Osnabruck
RP Noyer, A (corresponding author), Univ Osnabrueck, Inst Comp Sci, Postfach 4469, D-49069 Osnabruck, Germany.
EM anoyer@uni-osnabrueck.de
RI Bikker, Gert/JGM-7101-2023
FU Federal ministry of Economics and Technology (BMWi), Germany
FX This project is supported by a grant from the Federal ministry of
   Economics and Technology (BMWi), Germany. This project work is carried
   out in cooperation with Willert Software Tools GmbH, Symtavision GmbH,
   Ostfalia University of Applied Sciences and the University of
   Osnabrueck.
CR Albinet A., 2008, 4 EUR C ERTS EMB REA
   [Anonymous], 2008, P MODELS 08 WORKSHOP
   [Anonymous], 2006, COMP 21 ACM SIGPLAN, DOI DOI 10.1145/1176617.1176691
   [Anonymous], 2015, OMG unified modeling language (OMG UML) version 2.5
   [Anonymous], 2011, 250102011 ISOIEC
   ATESST Consortium, 2008, TECHNICAL REPORT
   Burke P. W., 2007, 20 SYST SOFTW TECHN
   Cansell D, 2007, LECT NOTES COMPUT SC, V4355, P140
   Delgado N, 2004, IEEE T SOFTWARE ENG, V30, P859, DOI 10.1109/TSE.2004.91
   Eclipse Foundation, 2015, ATL TRANSF LANG ATL
   Eclipse Foundation, 2015, REQ MAN ECL REQ MOD
   Eclipse Foundation, 2015, PROR REQ ENG PLATF W
   Eclipse Foundation, 2015, PAY UML WEBS
   Ellidiss Software, 2015, AADL INSP WEBS
   Event- B, 2016, EV B ROD PLATF
   Fischmeister S, 2010, IEEE T IND INFORM, V6, P652, DOI 10.1109/TII.2010.2068304
   France RB, 2006, COMPUTER, V39, P59, DOI 10.1109/MC.2006.65
   Ganssle J, 2008, ART OF DESIGNING EMBEDDED SYSTEMS, 2ND EDITION, P1
   Gerard S., 2002, Advances in Object-Oriented Information Systems. OOIS 2002 Workshops. Proceedings (Lecture Notes in Computer Science Vol.2426), P260
   Graf P, 2007, P IEEE RAP SYST PROT, P130
   Hagner M., 2010, Proceedings 2010 International Multiconference on Computer Science and Information Technology (IMCSIT 2010), P797
   Hagner M., 2008, MARTE WORKSH DATE 08, P41
   Henia R, 2005, IEE P-COMPUT DIG T, V152, P148, DOI 10.1049/ip-cdt:20045088
   IBM, 2015, RAT DOORS WEBS
   IBM, 2015, RAT DOORS NEXT GEN W
   IBM, 2015, RAT RHAPS FAM WEBS
   IBM, 2009, RAT RHAPS API REF MA
   IBM, 2010, IBM RAT RHAPS GAT AD
   Iyenghar P., 2011, Proceedings of the 2011 9th IEEE International Conference on Industrial Informatics (INDIN 2011), P889, DOI 10.1109/INDIN.2011.6035011
   Iyenghar P., 2010, P 10 ACM INT C EMB S, P69, DOI DOI 10.1145/1879021
   Iyenghar P., 2015, INT C MOD DRIV ENG S
   Iyenghar P, 2013, IEEE INTL CONF IND I, P506, DOI 10.1109/INDIN.2013.6622936
   Karlsson D., 2012, ITEA 2 MAGAZINE, V14, P24
   Le Dang H, 2008, INNOV SYST SOFTW ENG, V4, P189, DOI 10.1007/s11334-008-0053-4
   Medina J.L., 2011, SIGBED Rev, V8, P64
   Mraidha C., 2011, ACM SIGSOFT Softw Eng Notes, V36, P1, DOI [10.1145/1921532.1921555, DOI 10.1145/1921532.1921555]
   Noyer Arne, 2014, 2014 9th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE), P1
   Noyer A., 2015, 10 IEEE INT S IND EM, P1
   Object Management Group, 2012, SYSML SPEC VERS 1 3
   Object Management Group, 2013, REQ INT FORM REQIF V
   Object Management Group, 2011, UML PROF MARTE MOD A
   PLATTNER B, 1984, IEEE T SOFTWARE ENG, V10, P756, DOI 10.1109/TSE.1984.5010304
   Roemer E., 2014, RXF CERTIFICATION PA
   Selic B., 2013, Modeling and analysis of real-time and embedded systems with UML and MARTE: Developing cyber-physical systems
   Sparx Systems, 2010, ENT ARCH SOFTW DEV K
   Sparx Systems, 2015, ENT ARCH WEBS
   Symtavision, 2015, SYMTA S TRAC WEBS
   Ul Haq E., 2013, THESIS
   University of Cantabria, 2015, MOD AN SUIT REAL TIM
   Walderhaug S., 2008, DESIGNING SOFTWARE I, P133, DOI DOI 10.4018/978-1-59904-699-0.CH006
   Watterson C, 2007, IET SOFTW, V1, P172, DOI 10.1049/iet-sen:20060076
   Winkler S, 2010, SOFTW SYST MODEL, V9, P529, DOI 10.1007/s10270-009-0145-0
   Xiaowan Huang, 2012, International Journal on Software Tools for Technology Transfer, V14, P327, DOI 10.1007/s10009-010-0184-4
NR 53
TC 5
Z9 5
U1 1
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 671
EP 701
DI 10.1007/s11219-016-9323-9
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300003
DA 2024-07-18
ER

PT J
AU Ameller, D
   Galster, M
   Avgeriou, P
   Franch, X
AF Ameller, David
   Galster, Matthias
   Avgeriou, Paris
   Franch, Xavier
TI A survey on quality attributes in service-based systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality attributes; Service-based systems; Software design; Survey;
   Empirical study
ID SOFTWARE; DECISIONS
AB Service-based systems have become popular in the software industry. In software engineering, it is widely acknowledged that requirements on quality attributes (e.g., performance, security, reliability) significantly impact the design of software systems. This study explores the role of quality attributes during the design of service-based systems. We investigate the significance of quality attributes when designing service-based systems and how quality attributes are addressed through design decisions, across application domains, and related to other aspects of software development, e.g., architecture documentation. We conducted a descriptive survey. The survey was done as an online questionnaire targeting practitioners. Furthermore, we included researchers with practical design experience. We obtained 56 valid responses. Most survey participants consider quality attributes and functionality as equally important and treat quality attributes explicitly rather than implicitly. Furthermore, dependability is the most relevant quality attribute in service-based systems; we do not find quality attributes that are particularly important in specific application domains. Most quality attributes are addressed by ad hoc decisions, rather than established architecture or design patterns or technologies. Only few decision alternatives are considered when making architectural decisions to address quality attributes. Our results partially confirm anecdotal evidence from current literature, but also strengthen previous claims by providing empirical evidence. Our results point to future research directions (e.g., exploring the impact of decision types on how well quality attributes can be achieved) and implications for practitioners (e.g., training makes a difference to how quality attributes are treated).
C1 [Ameller, David; Franch, Xavier] Univ Politecn Cataluna, Dept Serv Engn & Informat Syst, Barcelona, Spain.
   [Galster, Matthias] Univ Canterbury, Dept Comp Sci & Software Engn, Christchurch 1, New Zealand.
   [Avgeriou, Paris] Univ Groningen, Dept Math & Comp Sci, Groningen, Netherlands.
C3 Universitat Politecnica de Catalunya; University of Canterbury;
   University of Groningen
RP Ameller, D (corresponding author), Univ Politecn Cataluna, Dept Serv Engn & Informat Syst, Barcelona, Spain.
EM dameller@essi.upc.edu; mgalster@ieee.org; paris@cs.rug.nl;
   franch@essi.upc.edu
RI Franch, Xavier/A-8588-2008
OI Avgeriou, Paris/0000-0002-7101-0754
FU NWO SaS-LeG [638.000.000.07N07];  [TIN2013-44641-P]
FX We would like to thank the reviewers of SQJ journal for their valuable
   comments. This research has been partially sponsored by the Spanish
   Project TIN2013-44641-P and NWO SaS-LeG, Contract No. 638.000.000.07N07.
CR Al-Kilidar H, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P122, DOI 10.1109/ISESE.2005.1541821
   Ameller D., 2013, 7 EUR C SOFTW ARCH E, P200
   [Anonymous], 2006, Technical Report
   [Anonymous], 2005, Dictionary of statistics and methodology
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], 2003, QUAL ATTR WORKSH QAW
   [Anonymous], TECHNICAL REPORT
   Bachmann F, 2005, IEE P-SOFTW, V152, P153, DOI 10.1049/ip-sen:20045037
   Bachmann F, 2001, PROC INT CONF SOFTW, P745
   Balasubramaniam S, 2009, PESOS: 2009 ICSE WORKSHOP ON PRINCIPLES OF ENGINEERING SERVICE ORIENTED SYSTEMS, P103, DOI 10.1109/PESOS.2009.5068829
   Basili1 Victor R, 1994, Encyclopedia of software engineering, V1994, P528
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Becha Hanane, 2012, Journal of Software, V7, P575, DOI 10.4304/jsw.7.3.575-587
   Bennett C, 2011, PLOS MED, V8, DOI 10.1371/journal.pmed.1001069
   Bosch J, 2004, LECT NOTES COMPUT SC, V3047, P194
   Ciolkowski M, 2003, LECT NOTES COMPUT SC, V2765, P104
   Cohen S., 2010, MANAGING VARIATION S
   Creswell J. W., 2014, RES DESIGN QUALITATI, P246
   de Oliveira Cavalcanti R., 2011, P JOINT ACM SIGSOFT, P159, DOI DOI 10.1145/2000259.2000286
   Erl T, 2005, SERVICE ORIENTED ARC
   Ferrari RN, 2008, INFORM SOFTWARE TECH, V50, P53, DOI 10.1016/j.infsof.2007.10.012
   Franch X, 2003, IEEE SOFTWARE, V20, P34, DOI 10.1109/MS.2003.1159027
   Gehlert A., 2009, QUALITY REFERENCE MO
   Gray DE., 2009, DOING RES REAL WORLD, V2nd
   Gu Q, 2009, SERV ORIENTED COMPUT, V3, P171, DOI 10.1007/s11761-009-0046-7
   Harrison NB, 2007, IEEE SOFTWARE, V24, P38, DOI 10.1109/MS.2007.124
   IEEE Computer Society Software Engineering Standards Committee, 1990, 610121990 IEEE
   ISO, 2001, Stan-dard ISO/IEC 9126-1
   ISO/IEC, 2003, SOFTW ENG PROD QUA 3, P62
   ISO/IEC, 2003, SOFTW ENG PROD QUA 2, P86
   ISO/IEC3, 2004, SOFTW ENG PROD QUA 4, P59
   Jansen A, 2009, J SYST SOFTWARE, V82, P1232, DOI 10.1016/j.jss.2009.04.052
   Kim S, 2009, J SYST SOFTWARE, V82, P1211, DOI 10.1016/j.jss.2009.03.102
   Kitchenham B., 2002, Software Engineering Notes, V27, P20, DOI 10.1145/638574.638580
   Kitchenham B., 2002, ACM SIGSOFT Softw. Eng. Notes, V27, P17
   Kitchenham B., 2008, EMPIR SOFTW ENG, V13, P37
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kitchenharn B., 2003, Software Engineering Notes, V28, P24, DOI 10.1145/638750.638758
   Kontogogos A, 2009, IEEE ENABL TECHNOL, P254, DOI 10.1109/WETICE.2009.44
   Krippendorff K., 2018, CONTENT ANAL INTRO I
   Kruchten P., 2004, GRON WORKSH SOFTW VA, P54
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Mack N., 2005, QUALITATIVE RES METH
   Miles M. B., 1984, Qualitative data analysis: An expanded sourcebook
   Neill CJ, 2003, IEEE SOFTWARE, V20, P40, DOI 10.1109/MS.2003.1241365
   O'Brien L., 2007, INT WORKSH SYST DEV, P1
   O'Brien Liam., 2005, Quality Attributes and Service-Oriented Architectures
   Papazoglou M., 2007, Web Services: Principles and Technology
   Pfleeger Shari Lawrence, 2001, ACM SIGSOFT Software Engineering Notes, V26, P16, DOI DOI 10.1145/505532.505535
   Poort Eltjo R., 2012, Requirements Engineering: Foundation for Software Quality. Proceedings 18th International Working Conference, REFSQ 2012, P37, DOI 10.1007/978-3-642-28714-5_4
   Shim B, 2008, ASIA PAC SOFWR ENG, P403, DOI 10.1109/APSEC.2008.32
   Sindhgatta R, 2009, LECT NOTES COMPUT SC, V5900, P485, DOI 10.1007/978-3-642-10383-4_36
   Svensson RB, 2012, IEEE T SOFTWARE ENG, V38, P923, DOI 10.1109/TSE.2011.47
   Svensson RB, 2009, LECT NOTES COMPUT SC, V5512, P218, DOI 10.1007/978-3-642-02050-6_19
   Tofan D, 2014, INFORM SOFTWARE TECH, V56, P850, DOI 10.1016/j.infsof.2014.03.009
   Tyree J, 2005, IEEE SOFTWARE, V22, P19, DOI 10.1109/MS.2005.27
   van Heesch U, 2011, 2011 9TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P260, DOI 10.1109/WICSA.2011.42
   van Heesch U, 2010, LECT NOTES COMPUT SC, V6285, P24, DOI 10.1007/978-3-642-15114-9_5
   Voelz D, 2010, IEEE INT ENTERP DIST, P47, DOI 10.1109/EDOC.2010.27
   Wohlin C, 2003, LECT NOTES COMPUT SC, V2765, P7
   Wojcik Rob, 2006, TECHNICAL REPORT
NR 61
TC 26
Z9 27
U1 4
U2 21
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 271
EP 299
DI 10.1007/s11219-015-9268-4
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100004
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Younis, A
   Malaiya, YK
   Ray, I
AF Younis, Awad
   Malaiya, Yashwant K.
   Ray, Indrajit
TI Assessing vulnerability exploitability risk using software properties
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Risk assessment; Software vulnerability; Software security metrics;
   Attack surface; CVSS metrics; Source code analysis
AB Attacks on computer systems are now attracting increased attention. While the current trends in software vulnerability discovery indicate that the number of newly discovered vulnerabilities continues to be significant, the time between the public disclosure of vulnerabilities and the release of an automated exploit is shrinking. Thus, assessing the vulnerability exploitability risk is critical because this allows decision-makers to prioritize among vulnerabilities, allocate resources to patch and protect systems from these vulnerabilities, and choose between alternatives. Common vulnerability scoring system (CVSS) metrics have become the de facto standard for assessing the severity of vulnerabilities. However, the CVSS exploitability measures assign subjective values based on the views of experts. Two of the factors in CVSS, Access Vector and Authentication, are the same for almost all vulnerabilities. CVSS does not specify how the third factor, Access Complexity, is measured, and hence it is unknown whether it considers software properties as a factor. In this work, we introduce a novel measure, Structural Severity, which is based on software properties, namely attack entry points, vulnerability location, the presence of the dangerous system calls, and reachability analysis. These properties represent metrics that can be objectively derived from attack surface analysis, vulnerability analysis, and exploitation analysis. To illustrate the proposed approach, 25 reported vulnerabilities of Apache HTTP server and 86 reported vulnerabilities of Linux Kernel have been examined at the source code level. The results show that the proposed approach, which uses more detailed information, can objectively measure the risk of vulnerability exploitability and results can be different from the CVSS base scores.
C1 [Younis, Awad; Malaiya, Yashwant K.; Ray, Indrajit] Colorado State Univ, Dept Comp Sci, 1873 Campus Delivery, Ft Collins, CO 80523 USA.
C3 Colorado State University
RP Younis, A (corresponding author), Colorado State Univ, Dept Comp Sci, 1873 Campus Delivery, Ft Collins, CO 80523 USA.
EM younis@cs.colostate.edu; malaiya@cs.colostate.edu;
   indrajit@cs.colostate.edu
CR Alhazmi OH, 2007, COMPUT SECUR, V26, P219, DOI 10.1016/j.cose.2006.10.002
   Alhazmi OH, 2005, 16TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P129, DOI 10.1109/ISSRE.2005.30
   Allodi L, 2013, IEEE CS SECURITY AND PRIVACY WORKSHOPS (SPW 2013), P165, DOI 10.1109/SPW.2013.16
   [Anonymous], 2009, OPERATING SYSTEMCONC
   [Anonymous], METASPLOIT DATABASE
   [Anonymous], PROV CYB DAT SEC PRO
   [Anonymous], SCI TOOLWORKS UNDERS
   [Anonymous], EXPLOITS DATABASE
   [Anonymous], ARXIV13011275 CORRN
   [Anonymous], IMPR SOFTW SEC AN US
   [Anonymous], 2012, P 2012 ACM WORKSH BU
   [Anonymous], 2012 INT C INT COMP
   Arbaugh WA, 2000, COMPUTER, V33, P52, DOI 10.1109/2.889093
   Avgerinos T, 2014, COMMUN ACM, V57, P74, DOI 10.1145/2560217.2560219
   Bernaschi M., 2002, ACM Transactions on Information and Systems Security, V5, P36, DOI 10.1145/504909.504911
   Bhattacharya P, 2012, PROC INT CONF SOFTW, P419, DOI 10.1109/ICSE.2012.6227173
   Bozorgi M., 2010, Proceedings of of 16th International Conference of on Knowledge discovery and data mining, P105
   Brenneman D., 2012, Improving software security by identifying and securing paths linking attack surfaces to attack targets
   Evans D, 2002, IEEE SOFTWARE, V19, P42, DOI 10.1109/52.976940
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Frei S., 2008, 0-day patch-exposing vendors(in) security performance
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Howard M, 2005, COMPUTER SECURITY IN THE 21ST CENTURY, P109, DOI 10.1007/0-387-24006-3_8
   Jansen W., 2009, DIRECTIONS SECURITY
   Joh HyunChul, 2011, Proceedings of the 2011 International Conference on Security & Management (SAM 2011), P10
   KUCK DJ, 1972, IEEE T COMPUT, VC 21, P1293, DOI 10.1109/T-C.1972.223501
   Manadhata Pratyusa., 2006, Proceedings of the Workshop on Quality of Protection, P3
   Manadhata PK, 2011, IEEE T SOFTWARE ENG, V37, P371, DOI 10.1109/TSE.2010.60
   Mell P, 2007, 1 FOR INC RESP SEC T
   Pfleeger C.P., 2006, Security in Computing, VFourth
   Ponemon Institute, 2013, 2013 COST DAT BREACH
   Sparks S, 2007, TWENTY-THIRD ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P477, DOI 10.1109/ACSAC.2007.27
NR 32
TC 24
Z9 37
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2016
VL 24
IS 1
SI SI
BP 159
EP 202
DI 10.1007/s11219-015-9274-6
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1VQ
UT WOS:000369006200009
DA 2024-07-18
ER

PT J
AU Le Goues, C
   Forrest, S
   Weimer, W
AF Le Goues, Claire
   Forrest, Stephanie
   Weimer, Westley
TI Current challenges in automatic software repair
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automatic program repair; Software engineering; Evolutionary computation
ID GENETIC ALGORITHMS; SPECIFICATIONS
AB The abundance of defects in existing software systems is unsustainable. Addressing them is a dominant cost of software maintenance, which in turn dominates the life cycle cost of a system. Recent research has made significant progress on the problem of automatic program repair, using techniques such as evolutionary computation, instrumentation and run-time monitoring, and sound synthesis with respect to a specification. This article serves three purposes. First, we review current work on evolutionary computation approaches, focusing on GenProg, which uses genetic programming to evolve a patch to a particular bug. We summarize algorithmic improvements and recent experimental results. Second, we review related work in the rapidly growing subfield of automatic program repair. Finally, we outline important open research challenges that we believe should guide future research in the area.
C1 [Le Goues, Claire; Weimer, Westley] Univ Virginia, Charlottesville, VA 22904 USA.
   [Forrest, Stephanie] Univ New Mexico, Albuquerque, NM 87131 USA.
C3 University of Virginia; University of New Mexico
RP Weimer, W (corresponding author), Univ Virginia, Charlottesville, VA 22904 USA.
EM legoues@cs.virginia.edu; forrest@cs.unm.edu; weimer@cs.virginia.edu
OI Le Goues, Claire/0000-0002-3931-060X; Forrest,
   Stephanie/0000-0002-5904-1646
FU Direct For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [0905373] Funding Source: National Science
   Foundation; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [0905236, 0954024] Funding Source:
   National Science Foundation
CR Abreu R, 2006, 12TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P39
   Ackling T, 2011, GECCO-2011: PROCEEDINGS OF THE 13TH ANNUAL GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1427
   Adamopoulos K, 2004, LECT NOTES COMPUT SC, V3103, P1338
   Al-Ekram Raihan., 2005, C CTR ADV STUDIES CO, P1
   Alba E, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1066
   Albertsson L, 2000, 8TH INTERNATIONAL SYMPOSIUM ON MODELING, ANALYSIS AND SIMULATION OF COMPUTER AND TELECOMMUNICATION SYSTEMS, PROCEEDINGS, P191, DOI 10.1109/MASCOT.2000.876444
   [Anonymous], 2008, BBC NEWS
   [Anonymous], 1922, GENETIC PROGRAMMING
   [Anonymous], FDN SOFTWARE ENG
   [Anonymous], INT S SOFTW TEST AN
   [Anonymous], AUTOMATED SOFTWARE E
   [Anonymous], EVOLUTIONARY COMPUTA
   [Anonymous], 2003, Modernizing Legacy Systems: Software Technologies, Engineering Processes,and Business Practices
   [Anonymous], NETW DISTR SYST SEC
   [Anonymous], WORKSH FUT SOFTW ENG
   [Anonymous], ABS12044224 CORR
   [Anonymous], P IEEE C EV COMP BAR
   [Anonymous], EUR C OBJ OR PROGR
   [Anonymous], 2010, P IEEE ACM INT C AUT
   [Anonymous], 1810, PLANTES RECUEILLIES, DOI [DOI 10.5962/BHL.TITLE.168134, DOI 10.1109/GCE.2010.5676126]
   [Anonymous], T SOFTWARE ENG
   [Anonymous], 1999, Testing Object-Oriented Systems: Models, Patterns, and Tools
   [Anonymous], SYSTEMS INFORM SECUR
   [Anonymous], 2006, P 13 ACM C COMPUTER
   [Anonymous], YESTERDAY MY PROGRAM
   [Anonymous], S OP SYST PRINC
   [Anonymous], PROGRAMMING LANGUAGE
   [Anonymous], 2013, ARCHITECTURAL SUPPOR
   [Anonymous], INT C SOFTW ENG
   [Anonymous], IEEE T SOFTWARE ENG
   [Anonymous], GEN EV COMP C
   [Anonymous], S OP SYST PRINC
   [Anonymous], 2011, Proceedings of the 2011 International Symposium on Software Testing and Analysis, ISSTA'11
   [Anonymous], AWARDS HUMAN COMPETI
   [Anonymous], IEEE WORK C O MIN SO
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Arcuri A, 2011, APPL SOFT COMPUT, V11, P3494, DOI 10.1016/j.asoc.2011.01.023
   Arcuri A, 2008, IEEE C EVOL COMPUTAT, P162, DOI 10.1109/CEC.2008.4630793
   Ashok B, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P373
   Ball T, 2003, ACM SIGPLAN NOTICES, V38, P97, DOI 10.1145/640128.604140
   Barrantes E.G., 2003, P 10 ACM C COMPUTER, P281
   Barreto A, 2008, COMPUT OPER RES, V35, P3073, DOI 10.1016/j.cor.2007.01.010
   Beck K., 2000, EXTREME PROGRAMMING
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bradbury J.S., 2010, International Symposium on Search Based Software Engineering - Fast Abstracts, P1
   Buse R.P., 2008, Proceedings of the 2008 International Symposium on Software Testing and Analysis, P121
   Chaki S., 2004, Software Engineering Notes, V29, P73, DOI 10.1145/1041685.1029908
   Chen MY, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P595, DOI 10.1109/DSN.2002.1029005
   Dallmeier V, 2009, IEEE INT CONF AUTOM, P550, DOI 10.1109/ASE.2009.15
   Debroy Vidroha, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P65, DOI 10.1109/ICST.2010.66
   Elkarablieh B, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P855, DOI 10.1145/1368088.1368222
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Fast E., 2010, Conference on Genetic and Evolutionary Computation, P965
   FORREST S, 1993, SCIENCE, V261, P872, DOI 10.1126/science.8346439
   Forrest Stephanie, 2009, P 11 ANN C GEN EV CO, P947
   Fraser G, 2012, IEEE T SOFTWARE ENG, V38, P278, DOI 10.1109/TSE.2011.93
   Fry Z.P., 2012, INT S SOFTWARE TESTI, P177, DOI 10.1145/04000800.2336775
   Gabel Mark., 2012, Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, P1
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Gopinath D, 2011, LECT NOTES COMPUT SC, V6605, P173, DOI 10.1007/978-3-642-19835-9_15
   Groce A, 2005, ELECTRON NOTES THEOR, V119, P67, DOI 10.1016/j.entcs.2004.12.023
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Harman M, 2010, COMMUN ACM, V53, P108, DOI 10.1145/1735223.1735248
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1098
   He HF, 2004, LECT NOTES COMPUT SC, V2984, P267
   Nguyen HDT, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P772, DOI 10.1109/ICSE.2013.6606623
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Jeffrey D, 2009, INT C PROGRAM COMPRE, P70, DOI 10.1109/ICPC.2009.5090029
   Jhala R, 2005, ACM SIGPLAN NOTICES, V40, P38, DOI 10.1145/1064978.1065016
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Jones Terry, 1995, P 6 INT C GEN ALG, V95, P184
   Kim D., 2013, INT C SOFWARE ENG
   Le Goues C., 2012, IEEE Transactions on Software Engineering, V38, P54, DOI 10.1109/TSE.2011.104
   Le Goues C, 2012, PROCEEDINGS OF THE FOURTEENTH INTERNATIONAL CONFERENCE ON GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P959, DOI 10.1145/2330163.2330296
   Le Goues C, 2012, PROC INT CONF SOFTW, P3, DOI 10.1109/ICSE.2012.6227211
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P175, DOI 10.1109/TSE.2011.5
   Liblit B, 2005, ACM SIGPLAN NOTICES, V40, P15, DOI 10.1145/1064978.1065014
   Liblit B, 2003, ACM SIGPLAN NOTICES, V38, P141, DOI 10.1145/780822.781148
   Liu P, 2012, PROC INT CONF SOFTW, P299, DOI 10.1109/ICSE.2012.6227184
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Miller BL, 1996, EVOL COMPUT, V4, P113, DOI 10.1162/evco.1996.4.2.113
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Orlov Michael., 2009, Proceedings of the 11th Annual conference on Genetic and evolutionary computation, P1043
   Palshikar GK, 2001, IEEE SOFTWARE, V18, P89, DOI 10.1109/52.965810
   Pei Y, 2014, IEEE T SOFTWARE ENG, V40, P427, DOI 10.1109/TSE.2014.2312918
   Rinard M, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P303
   Sen K, 2007, P 22 IEEE ACM INT C, P571, DOI DOI 10.1145/1321631.1321746
   Seng O, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1909
   Sidiroglou S, 2005, LECT NOTES COMPUT SC, V3650, P1
   Sidiroglou S, 2005, IEEE SECUR PRIV, V3, P41, DOI 10.1109/MSP.2005.144
   Sitthi-amorn P, 2011, ACM T GRAPHIC, V30, DOI 10.1145/2024156.2024186
   Nguyen T, 2012, PROC INT CONF SOFTW, P683, DOI 10.1109/ICSE.2012.6227149
   Wappler S, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1925
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Weimer Westley, 2006, Proceedings of the 5th International Conference on Generative Programming and Component Engineering (GPCE'06), P181, DOI DOI 10.1145/1173706.1173734
   White DR, 2011, IEEE T EVOLUT COMPUT, V15, P515, DOI 10.1109/TEVC.2010.2083669
   Wilkerson J.L., 2011, P GECCO 2011 GENETIC, P123
   Wilkerson JL, 2012, PROCEEDINGS OF THE FOURTEENTH INTERNATIONAL CONFERENCE ON GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1229, DOI 10.1145/2330163.2330333
   Yin X, 2009, I C DEPEND SYS NETWO, P53, DOI 10.1109/DSN.2009.5270355
NR 101
TC 121
Z9 140
U1 1
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2013
VL 21
IS 3
BP 421
EP 443
DI 10.1007/s11219-013-9208-0
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 190LG
UT WOS:000322340900002
DA 2024-07-18
ER

PT J
AU de Santiago, VA
   Vijaykumar, NL
AF de Santiago Junior, Valdivino Alexandre
   Vijaykumar, Nandamudi Lankalapalli
TI Generating model-based test cases from natural language requirements for
   space application software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Natural language requirements; Semantic translation
   model; Word sense disambiguation; Statecharts
ID STATECHARTS; SPECIFICATIONS; COVERAGE
AB Natural Language (NL) deliverables suffer from ambiguity, poor understandability, incompleteness, and inconsistency. Howewer, NL is straightforward and stakeholders are familiar with it to produce their software requirements documents. This paper presents a methodology, SOLIMVA, which aims at model-based test case generation considering NL requirements deliverables. The methodology is supported by a tool that makes it possible to automatically translate NL requirements into Statechart models. Once the Statecharts are derived, another tool, GTSC, is used to generate the test cases. SOLIMVA uses combinatorial designs to identify scenarios for system and acceptance testing, and it requires that a test designer defines the application domain by means of a dictionary. Within the dictionary there is a Semantic Translation Model in which, among other features, a word sense disambiguation method helps in the translation process. Using as a case study a space application software product, we compared SOLIMVA with a previous manual approach developed by an expert under two aspects: test objectives coverage and characteristics of the Executable Test Cases. In the first aspect, the SOLIMVA methodology not only covered the test objectives associated to the expert's scenarios but also proposed a better strategy with test objectives clearly separated according to the directives of combinatorial designs. The Executable Test Cases derived in accordance with the SOLIMVA methodology not only possessed similar characteristics with the expert's Executable Test Cases but also predicted behaviors that did not exist in the expert's strategy. The key benefits from applying the SOLIMVA methodology/tool within a Verification and Validation process are the ease of use and, at the same time, the support of a formal method consequently leading to a potential acceptance of the methodology in complex software projects.
C1 [de Santiago Junior, Valdivino Alexandre; Vijaykumar, Nandamudi Lankalapalli] INPE, BR-12227010 Sao Jose Dos Campos, SP, Brazil.
C3 Instituto Nacional de Pesquisas Espaciais (INPE)
RP de Santiago, VA (corresponding author), INPE, Av Astronautas 1758, BR-12227010 Sao Jose Dos Campos, SP, Brazil.
EM valdivino@das.inpe.br
RI Santiago Junior, Valdivino Alexandre de/C-7309-2016
OI Santiago Junior, Valdivino Alexandre de/0000-0002-4277-021X
CR Abrial J. -R., 2006, 28th International Conference on Software Engineering Proceedings, P761, DOI 10.1145/1134285.1134406
   Ambriola V, 1997, AUTOMATED SOFTWARE ENGINEERING, 12TH IEEE INTERNATIONAL CONFERENCE, PROCEEDINGS, P36, DOI 10.1109/ASE.1997.632822
   Ambriola V., 2006, Automated Software Engineering, V13, P107, DOI 10.1007/s10515-006-5468-2
   Ambrosio AM, 2007, LECT NOTES COMPUT SC, V4746, P170
   [Anonymous], J LANGUAGE COMPUTATI
   [Anonymous], INPE16677RPQ850
   [Anonymous], P 18 ACM S APPL COMP
   [Anonymous], P 11 LAT AM TEST WOR
   [Anonymous], THESIS I NACL PESQUI
   [Anonymous], SOFTW ENG PRACTITION
   [Anonymous], 1999, Testing Object-Oriented Systems: Models, Patterns, and Tools
   [Anonymous], 1997, P 10 RES COMPUTATION
   [Anonymous], P 19 INT C SOFTW ENG
   [Anonymous], AN 26 C SOC BRAS COM
   [Anonymous], 2009, ECSSEST1006C
   [Anonymous], 2000, THESIS U SAO PAULO
   [Anonymous], ECSSSST00C
   [Anonymous], 1993, Proceedings of the 3rd DARPA Worshop on Human Language Technology
   [Anonymous], OMG UN MOD LANG OMG
   Antoniol G, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P269, DOI 10.1109/ISSRE.2002.1173268
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   BALCER MJ, 1989, ACM SIGSOFT, V14, P210, DOI 10.1145/75309.75332
   Basili V. R., 1996, Empirical Software Engineering, V1, P133, DOI 10.1007/BF00368702
   Bertolino A., 2003, Software Engineering Notes, V28, P355, DOI 10.1145/949952.940120
   Bresciani P, 2004, AUTON AGENT MULTI-AG, V8, P203, DOI 10.1023/B:AGNT.0000018806.20944.ef
   Briand LC, 2004, PROC INT CONF SOFTW, P86, DOI 10.1109/ICSE.2004.1317431
   BRIAND LC, 2002, SOFTW SYST MODEL, V1, P10, DOI [10.1007/s10270-002-0004-8, DOI 10.1007/S10270-002-0004-8]
   Chih-Wei Lu, 2008, 2008 IEEE 32nd International Computer Software and Applications Conference (COMPSAC), P712, DOI 10.1109/COMPSAC.2008.232
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Clarke EM, 2007, J UNIVERS COMPUT SCI, V13, P639
   Cristia M, 2009, LECT NOTES COMPUT SC, V5885, P167, DOI 10.1007/978-3-642-10373-5_9
   El-Far I.K., 2001, ENCY SOFTWARE ENG
   Fantechi A., 2003, Requirements Engineering, V8, P161, DOI 10.1007/s00766-003-0174-0
   Fantechi A., 2005, P 8 WORKSH REQ ENG W, P245
   FRASER MD, 1991, IEEE T SOFTWARE ENG, V17, P454, DOI 10.1109/32.90448
   Fröhlich P, 2000, LECT NOTES COMPUT SC, V1850, P472
   Fuchs NE, 1999, LECT NOTES COMPUT SC, V1559, P1, DOI 10.1007/3-540-48958-4_1
   Gervasi V, 2005, ACM T SOFTW ENG METH, V14, P277, DOI 10.1145/1072997.1072999
   Harel D., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P54
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hierons R. M., 1997, Software Testing, Verification and Reliability, V7, P19, DOI 10.1002/(SICI)1099-1689(199703)7:1<19::AID-STVR124>3.0.CO;2-N
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Hoare CAR., 1985, Communicating Sequential Processes
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Howden W. E., 1976, IEEE Transactions on Software Engineering, VSE-2, P208, DOI 10.1109/TSE.1976.233816
   IEEE, 1990, IEEE STD 610 121990
   Jianhong Liang, 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P180, DOI 10.1109/ICRE.1994.292387
   Kim HY, 2004, SOFTWARE QUAL J, V12, P231, DOI 10.1023/B:SQJO.0000034710.86897.16
   Leacock C, 1998, LANG SPEECH & COMMUN, P265
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   Lei Y, 1998, THIRD IEEE INTERNATIONAL HIGH-ASSURANCE SYSTEMS ENGINEERING SYMPOSIUM, PROCEEDINGS, P254, DOI 10.1109/HASE.1998.731623
   Lei Y, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P549
   LESK Michael, 1986, P 5 ANN INT C SYST D, V5, P24, DOI 10.1145/318723.318728
   Marcus M. P., 1993, Computational Linguistics, V19, P313, DOI DOI 10.21236/ADA273556
   MASIERO PC, 1994, INFORM SOFTWARE TECH, V36, P615, DOI 10.1016/0950-5849(94)90021-3
   MATHUR AP, 2008, FDN SOFTWARE TESTING
   Mich L, 2004, REQUIR ENG, V9, P40, DOI 10.1007/s00766-003-0179-8
   Mich L., 1996, Natural Language Engineering, V2, P161, DOI 10.1017/S1351324996001337
   Miller GA, 1998, LANG SPEECH & COMMUN, P23
   Morgan R., 1995, P 6 MESSAGE UNDERSTA, P71
   Navigli R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459355
   Offutt J, 1999, LECT NOTES COMPUT SC, V1723, P416
   OSTRAND TJ, 1988, COMMUN ACM, V31, P676, DOI 10.1145/62959.62964
   Pedersen Ted., 2004, DEMONSTRATION PAPERS, P38
   Petrenko A, 2005, IEEE T COMPUT, V54, P1154, DOI 10.1109/TC.2005.152
   Pimont S., 1976, 2nd International Conference on Software Engineering, P486
   Santiago Valdivino, 2008, 2008 IEEE International Conference on Software Testing Verification and Validation Workshop (ICSTW), P63, DOI 10.1109/ICSTW.2008.7
   Santiago Valdivino, 2008, 2008 Second IEEE International Conference on Secure System Integration and Reliability Improvement (SSIRI), P81, DOI 10.1109/SSIRI.2008.49
   Santiago V, 2006, P INT COMP SOFTW APP, P183
   Sarma M, 2009, INFORM SOFTWARE TECH, V51, P418, DOI 10.1016/j.infsof.2008.05.002
   SIDHU DP, 1989, IEEE T SOFTWARE ENG, V15, P413, DOI 10.1109/32.16602
   Sinha R, 2007, ICSC 2007: INTERNATIONAL CONFERENCE ON SEMANTIC COMPUTING, PROCEEDINGS, P363, DOI 10.1109/ICSC.2007.87
   Sleator Daniel D. K., 1993, P 3 INT WORKSH PARS, P277
   Sneed HM, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P380
   Spivey J. M., 1989, The Z Notation: A Reference Manual
   Toutanova K, 2003, HLT-NAACL 2003: HUMAN LANGUAGE TECHNOLOGY CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE MAIN CONFERENCE, P252, DOI 10.3115/1073445.1073478
NR 76
TC 29
Z9 34
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2012
VL 20
IS 1
BP 77
EP 143
DI 10.1007/s11219-011-9155-6
PG 67
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 873ET
UT WOS:000298864600003
DA 2024-07-18
ER

PT J
AU Dong, J
   Zhao, YJ
   Sun, YT
AF Dong, Jing
   Zhao, Yajing
   Sun, Yongtao
TI Design pattern evolutions in QVT
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Design pattern evolution; Model transformation; UML; QVT; Model-driven
   architecture
AB One of the main goals of design patterns is to design for change. Many design patterns leave some room for future changes and evolutions. The application of design patterns leads to adaptable software since the design pattern instances could be changed with minimal impact on other parts of the system. Such changes, called the evolution of a design pattern instance in this paper, typically involve the addition or removal of a group of model elements, such as classes, attributes, operations, and relationships. However, the possible evolutions of each design pattern are often not explicitly documented. Missing a part of the evolution process may result in inconsistent evolutions. In this paper, we present our approach to assist the evolution processes of design patterns by model transformation technology. We provide a formal foundation for our approach by defining the predicates that can be used to describe the properties of each design pattern, software system design, and design pattern evolutions. We also provide tool support to automate the evolution processes based on the Query, View, and Transformation standard. A case study of a large open-source software system is conducted to illustrate and evaluate our approach.
C1 [Dong, Jing; Zhao, Yajing] Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.
   [Sun, Yongtao] Amer Airlines Inc, Ft Worth, TX 76155 USA.
C3 University of Texas System; University of Texas Dallas
RP Dong, J (corresponding author), Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.
EM jdong@ieee.org
CR Alencar P., 1999, Proceedings. Twenty-Third Annual International Computer Software and Applications Conference (Cat. No.99CB37032), P160, DOI 10.1109/CMPSAC.1999.812694
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   Antoniol G, 1998, PROG COMPREHEN, P153, DOI 10.1109/WPC.1998.693342
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Cinneide M. O., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P463, DOI 10.1109/ICSM.1999.792644
   CINNEIDE MO, 2001, P 4 INT WORKSH PRINC, P162
   Clocksin W., 1987, PROGRAMMING PROLOG
   DAMBROGIO A, 2005, P 5 INT WORKSH SOFTW
   Dong F, 2006, 13TH ANNUAL IEEE INTERNATIONAL SYMPOSIUM AND WORKSHOP ON ENGINEERING OF COMPUTER BASED SYSTEMS, PROCEEDINGS, P80
   DONG J, 2005, P 9 IASTED INT C SOF, P344
   Dong J, 2007, IEEE T SOFTWARE ENG, V33, P433, DOI 10.1109/TSE.2007.1012
   Dong J, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P371
   Dong J, 2006, IASTED INT CONF INTE, P16
   Dong J, 2007, J OBJECT TECHNOL, V6, P95, DOI 10.5381/jot.2007.6.10.a3
   Dong J, 2009, IEEE T SYST MAN CY A, V39, P1271, DOI 10.1109/TSMCA.2009.2028012
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   JUDSON SR, 2003, P WORKSH SOFTW MOD E
   Kalnins A, 2005, FR ART INT, V118, P169
   Kalnins A., 2004, P MOD DRIV ARCH FDN, V3599, P14
   KEIENBURG F, 2001, P INT C HAW INT C SY, P3
   Kim DK, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1404
   Kim DK, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P452, DOI 10.1109/CMPSAC.2003.1245379
   Kobayashi T., 1999, Proceedings Sixth Asia Pacific Software Engineering Conference (ASPEC'99) (Cat. No.PR00509), P18, DOI 10.1109/APSEC.1999.809580
   Kovse J, 2002, LECT NOTES COMPUT SC, V2425, P192
   LENGYEL L, 2007, P INT C COMP TOOL WA, P2200
   MAZON JN, 2005, P 8 ACM INT WORKSH D
   MULLER PA, 2005, P INRIA WORKSH MOD T
   Niere J, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P338, DOI 10.1109/ICSE.2002.1007980
   Noda Natsuko, 2001, P 4 INT WORKSH PRINC, P158
   Tsantalis N, 2006, IEEE T SOFTWARE ENG, V32, P896, DOI 10.1109/TSE.2006.112
   Warmer J.B., 1998, OBJECT CONSTRAINT LA
   Xue-Bin W., 2007, Computing in the Global Information Technology, P24, DOI [10.7666/d.Y1057065, DOI 10.1109/ICCGI.2007.52]
NR 32
TC 5
Z9 7
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2010
VL 18
IS 2
BP 269
EP 297
DI 10.1007/s11219-009-9093-8
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 584IX
UT WOS:000276746300004
DA 2024-07-18
ER

PT J
AU Mc Caffery, F
   Burton, J
   Richardson, I
AF Mc Caffery, Fergal
   Burton, John
   Richardson, Ita
TI Risk management capability model for the development of medical device
   software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software risk management; Software quality; Software engineering;
   Software process improvement; Software reliability; Software design;
   Computing methodologies; Medical devices; United States Food and Drug
   Administration
ID FRAMEWORK
AB Failure of medical device (MD) software can have potentially catastrophic effects, leading to injury of patients or even death. Therefore, regulators penalise MD manufacturers who do not demonstrate that sufficient attention is devoted to the areas of hazard analysis and risk management (RM) throughout the software lifecycle. This paper has two main objectives. The first objective is to compare how thorough current MD regulations are with relation to the Capability Maturity Model Integration (CMMI (R)) in specifying what RM practices MD companies should adopt when developing software. The second objective is to present a Risk Management Capability Model (RMCM) for the MD software industry, which is geared towards improving software quality, safety and reliability. Our analysis indicates that 42 RM sub-practices would have to be performed in order to satisfy MD regulations and that only an additional 8 sub-practices would be required in order to satisfy all the CMMI (R) level 1 requirements. Additionally, MD companies satisfying the CMMI (R) goals of the RM process area by performing the CMMI (R) RM practices will not meet the requirements of the MD software RM regulations as an additional 20 MD-specific sub-practices have to be added to meet the objectives of RMCM.
C1 [Mc Caffery, Fergal] Dundalk Inst Technol & Lero, Dundalk, Ireland.
   [Burton, John] Vitalograph Ltd, Ennis, Co Clare, Ireland.
   [Richardson, Ita] Univ Limerick, Irish Software Engn Res Ctr, Limerick, Ireland.
C3 Dundalk Institute of Technology; University of Limerick
RP Mc Caffery, F (corresponding author), Dundalk Inst Technol & Lero, Dundalk, Ireland.
EM fergal.mccaffery@dkit.ie; john.burton@vitalograph.ie;
   ita.richardson@ul.ie
OI Mc Caffery, Fergal/0000-0002-0839-8362; Richardson,
   Ita/0000-0002-5493-2837
FU Science Foundation Ireland (SFI) [03/IN3/1408C]; SFI [07/SK/I1299,
   08/IN.1/I2030]
FX This research is supported by the Science Foundation Ireland (SFI)
   funded project, Global Software Development in Small to Medium Sized
   Enterprises (GSD for SMEs) grant number 03/IN3/1408C within Lero-the
   Irish Software Engineering Research Centre, University of Limerick
   (http://www.lero.ie) and also through the SFI Stokes Lectureship
   Programme, grant number 07/SK/I1299 and SFI Principal Investigator
   Award, grant number 08/IN.1/I2030. We would also like to acknowledge the
   work of the Software Quality Journal reviewers.
CR *AAMI, 2005, NEW GUIDANCE OFFERED, V40
   *AAMI, 2004, TIR322004 AAMI
   *AAMI, 2001, SW682001 AAMI ANSI
   *AUT SIG, 2005, AUT SPICE PROC REF M
   Bassen H., 1985, Proceedings of the Seventh Annual Conference of the IEEE/Engineering in Medicine and Biology Society. Frontiers of Engineering and Computing in Health Care - 1985 (Cat. No. 85CH2198-0), P180
   Bates DW, 1999, AM J MED, V106, P144, DOI 10.1016/S0002-9343(98)00410-0
   Bovee MW, 2001, IEEE T ENG MANAGE, V48, P465, DOI 10.1109/17.969424
   *BS EN, 2000, 60601142000
   BURTON J, 2006, 4 WORKSH SOFTW QUAL, P3
   Burton J, 2008, LECT NOTES COMPUT SC, V5007, P24, DOI 10.1007/978-3-540-79588-9_4
   CASS A, 2000, SPICE 2000 C P
   CIARKOWSKI AA, 2000, P AM CONTR C CHIC IL, V5, P3497
   Crumpler ES, 1997, FOOD DRUG LAW J, V52, P511
   EAGLES S, 2001, MED DEVICE SOFTWARE
   Elahi B. J., 1993, Proceedings of Sixth Annual IEEE Symposium on Computer-Based Medical Systems (Cat. No.93CH3326-6), P10, DOI 10.1109/CBMS.1993.262997
   *EN, 2008, 50128 EN
   *FDA, 2007, FDAS MISS STAT
   *FDA CDRH, 2005, GUID CONT PREM SUBM
   *FDA CDRH, 1999, GUID OFF THE SHELF S
   *FDA CDRH, 2000, GUID IND FDA PREM DE
   *FDA CDRH, 2002, GEN PRINC SOFTW VAL
   *IEC, 1985, 60812 IEC FMEA
   *IEC, 1998, 15026 IECISO
   *IEC, 2006, 61508 IEC
   *IEC, 2006, 623042006 ANSIAAMIIE
   *IEEE, 2000, 1471200 IEEE
   *ISO, 2007, ANSIAAMIISO14971
   *ISO IEC, 2003, 15504 ISOIEC JTC1SC7
   *ISPE, 2001, 4 ISPE GAMP
   Johnson CM, 2005, J BIOMED INFORM, V38, P75, DOI 10.1016/j.jbi.2004.11.005
   Kim P. T. H., 1993, Proceedings of Sixth Annual IEEE Symposium on Computer-Based Medical Systems (Cat. No.93CH3326-6), P1, DOI 10.1109/CBMS.1993.262999
   Kohn L, 2000, To err is human: Building a safer health system
   Leveson N.G., 1995, Safeware: System Safety and Computers
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   McCaffery F., 2007, INT REV COMPUTERS SO, V2, P10
   MCCAFFERY F, 2005, P INT C SOFTW DEV SW, P92
   McCaffery Fergal, 2005, Stud Health Technol Inform, V117, P117
   MCDERMID J, 1993, SAFETY CRITICAL SYST, P16
   *MED DEV TOD, 2007, CDRH SOFTW FOR LAB A
   *MOD, 2004, 00563 MOD
   Munsey R R, 1995, Food Drug Law J, V50 Spec, P163
   MUNZER RF, 1988, SPEC S MAT TECHN EM, P48
   RADOS C, 2003, MED DEVICE CONSU JUL
   RTCA, 1992, DO-178B Software Considerations in Airborne Systems and Equipment Certification
   RUDOLPH H, 2003, DO WE NEED MED DEVIC
   Sayre K, 2001, COMP MED SY, P445, DOI 10.1109/CBMS.2001.941760
   Schmuland C, 2005, IEEE T DEVICE MAT RE, V5, P488, DOI 10.1109/TDMR.2005.857860
   SEI, 2006, CAP MAT MOD INT DEV
   *SEI, 2007, CMUSEI2007TN006
   TANG PC, 1994, INT J BIOMED COMPUT, V34, P139, DOI 10.1016/0020-7101(94)90017-5
   THEISEN TW, 2004, SQP, V6
   TIERNEY WM, 1987, ANN INTERN MED, V107, P569, DOI 10.7326/0003-4819-107-4-569
   *US DEP HHS, 1992, SOFTW REL REC FISC Y
   *US GEN ACC OFF, 1997, GAOHEHS9721
   Voas J., 1993, Proceedings of Sixth Annual IEEE Symposium on Computer-Based Medical Systems (Cat. No.93CH3326-6), P64, DOI 10.1109/CBMS.1993.262989
   Wallace D.R., 2001, International Journal of Reliability, Quality, and Safety Engineering, V8
   WOOD BJ, 1999, SOFTWARE RISK MANAGE
NR 57
TC 15
Z9 18
U1 1
U2 25
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2010
VL 18
IS 1
BP 81
EP 107
DI 10.1007/s11219-009-9086-7
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 546JH
UT WOS:000273806600005
DA 2024-07-18
ER

PT J
AU Hall, T
   Jagielska, D
   Baddoo, N
AF Hall, Tracy
   Jagielska, Dorota
   Baddoo, Nathan
TI Motivating developer performance to improve project outcomes in a high
   maturity organization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT Conference on Software Quality Management
CY APR, 2006
CL Southampton, ENGLAND
DE software developers; performance; project success; motivation
ID SOFTWARE PROCESS IMPROVEMENT; SUCCESS FACTORS; MANAGEMENT; QUALITY
AB In this paper we discuss the impact software developer performance has on project outcomes. Project performance remains unreliable in the software industry with many compromised software systems reported in the press. We investigate the impact that developer performance has on aspects of project success and explore how developer performance is motivated. We present interview, focus group and questionnaire data collected from a team of developers working in a software organization that has been assessed at CMM level 5. Our main findings are that developers value technical skills in their colleagues, but appreciate these especially when supplemented with good human skills. Software developers with a proactive, flexible, adaptable approach who are prepared to share knowledge and follow good practice are said to be the best developers. Motivators for these developers are pay and benefits, recognition and opportunities for achievement in their work. Overall, we found that technical competence, interpersonal skills and adherence to good practices are thought to have the biggest impact on software project success.
EM t.hall@herts.ac.uk; rejudja@ucl.ac.uk; n.baddoo@herts.ac.uk
OI Hall, Tracy/0000-0002-2728-9014
CR AHUJA S, 1999, 4 ANN SOFTW ENG EUR, pC303
   [Anonymous], 1986, INQUIRING MAN PSYCHO
   [Anonymous], 2004, CONTENT ANAL INTRO I
   [Anonymous], 2001, HAWAII INT C SYSTEM
   [Anonymous], COMPUTER PERSONNEL
   Baddoo N, 2002, J SYST SOFTWARE, V62, P85, DOI 10.1016/S0164-1212(01)00125-X
   BADDOO N, 2002, J SOFTWARE PROCESS I, V7, P17
   BADDOO N, 2005, P EUR SOFTW PROC IMP, P9
   BOHEM B, 1988, IEEE T SOFTWARE ENG, V14, P1462
   COUGER JD, 1988, J SYST MANAGE, V39, P36
   COUGER JD, 1994, EUROPEAN J INFORM SY, V3, P258
   Denzin NormanK., 1989, The Research Act: A Theoretical Introduction to Sociological Methods, V3rd
   Dyba T., 2000, Empirical Software Engineering, V5, P357, DOI 10.1023/A:1009800404137
   DYBA T, 1997, IEEE SOFTWARE ARCH, V14, P75
   El Emam K, 2000, IEEE T SOFTWARE ENG, V26, P541, DOI 10.1109/32.852742
   FITZENZ J, 1978, DATAMATION       SEP, P125
   Goldenson D., 1995, APPRAISAL SYSTEMATIC
   Greene J. C., 1989, EDUC EVAL POLICY AN, V11, P255, DOI [10.3102/01623737011003255, DOI 10.3102/01623737011003255, https://doi.org/10.3102/01623737011003255]
   Hall T., 1997, IEE Proceedings-Software Engineering, V144, P111, DOI 10.1049/ip-sen:19971072
   HARRISON R, 1999, EMPIRICAL SOFTWARE E, V4
   Hertel G, 2003, RES POLICY, V32, P1159, DOI 10.1016/S0048-7333(03)00047-7
   Krueger RA, 2000, FOCUS GROUPS PRACTIC, V3rd
   McDermid J. A., 1999, IEE Proceedings-Software, V146, P179, DOI 10.1049/ip-sen:19990618
   Mellis W, 1998, SOFTWARE QUAL J, V7, P277, DOI 10.1023/A:1008987423699
   Morgan DL, 1993, SUCCESSFUL FOCUS GRO, DOI 10.4135/9781483349008
   Pitterman B, 2000, IEEE SOFTWARE, V17, P89, DOI 10.1109/52.854074
   Preece J., 2002, INTERACTION DESIGN H
   Rainer A, 2002, J SYST SOFTWARE, V62, P71, DOI 10.1016/S0164-1212(01)00122-4
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   SHAH M, 2003, SOFTWARE ENG PROJECT
   Shenhar AJ, 2002, R&D MANAGE, V32, P111, DOI 10.1111/1467-9310.00244
   *STAND GROUP INT I, 1999, CHAOS REC SUCC
   Stewart V., 1981, BUSINESS APPL REPERT
   TOLEDO RAM, 1985, COMPUTER PERSONNEL, V10, P1
   TURLEY RT, 1995, J SYSTEMS SOFTWARE, V28
   Verner JM, 2005, IEEE SOFTWARE, V22, P86, DOI 10.1109/MS.2005.12
   WARDEN R, 1995, SOFTWARE QUALITY MAN, V24, P24
   WILLIS RR, 1998, HUGHES ARICRAFT WIDE
   WILSON D, 2000, SOFTWARE QUALITY MAN, V8, P97
   Wilson DN, 1998, SOFTWARE QUAL J, V7, P67, DOI 10.1023/B:SQJO.0000042060.88173.fe
   Wohlin C, 2001, SOFTWARE QUAL J, V9, P43, DOI 10.1023/A:1016673203332
   Wohlin Claes., 2002, P 14 INT C SOFTWARE, P393, DOI [10.1145/568760.568829, DOI 10.1145/568760.568829]
NR 42
TC 11
Z9 15
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2007
VL 15
IS 4
BP 365
EP 381
DI 10.1007/s11219-007-9028-1
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 232EK
UT WOS:000251000900003
DA 2024-07-18
ER

PT J
AU Cuadrado-Gallego, JJ
   Fernández-Sanz, L
   Sicilia, MA
AF Cuadrado-Gallego, Juan J.
   Fernandez-Sanz, Luis
   Sicilia, Miguel-Angel
TI Enhancing input value selection in parametric software cost estimation
   models through second level cost drivers
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE parametric estimation models; cost drivers; software projects; COCOMO
   II; empirical adjustment
ID AGGREGATION
AB Parametric cost estimation models are widely used effort prediction tools for software development projects. These models are based on mathematical models that use as inputs specific values for relevant cost drivers. The selection of these inputs is, in many cases, driven by public prescriptive rules that determine the selection of the values. Nonetheless, such selection may in some cases be restrictive and somewhat contradictory with empirical evidence, in other cases the selection procedure is somewhat subject to ambiguity. This paper presents an approach to improve the quality of the selection of adequate cost driver values in parametric models through a process of adjustment to bodies of empirical evidence. The approach has two essential elements. Firstly, it proceeds by analyzing the diverse factors potentially affecting the values a cost driver input might adopt for a given project. And secondly, an aggregation mechanism device for the selection of input variables based on existing data is explicitly devised. This paper describes the rationale for the overall approach and provides evidence of its appropriateness through a concrete empirical study that analyses the COCOMO II DOCU cost driver.
C1 Univ Europa Madrid, Dep Sistemas Informat, Madrid 28670, Spain.
   EU Politecn, Madrid 28871, Spain.
C3 European University of Madrid
RP Fernández-Sanz, L (corresponding author), Univ Europa Madrid, Dep Sistemas Informat, C Tajo S-N, Madrid 28670, Spain.
EM jjcg@uah.es; luis.fernandez@uem.es; msicilia@uah.es
RI Sicilia, Miguel-Angel/F-5002-2012; Fernandez-Sanz, Luis/J-4895-2012;
   Fernandez, Luis/KHX-5442-2024
OI Fernandez-Sanz, Luis/0000-0003-0778-0073; Miguel Angel, Sicilia
   Urban/0000-0003-3067-4180
CR [Anonymous], 2002, DELPHI METHOD TECHNI
   [Anonymous], ADA049014015055 NAT
   Baik J, 2002, IEEE T SOFTWARE ENG, V28, P1009, DOI 10.1109/TSE.2002.1049401
   BAIK J, 2000, P 15 INT FOR COCOMO
   BAYLEI J, 1981, P 5 INT C SOFTW ENG, P107
   BOEHM B, 2000, USCCSE2000505
   BOEHM B, 1995, ANN SOFTW ENG, V1, P45
   Boehm BW., 2000, SOFTWARE COST ESTIMA, VII
   Boehm BW., 1981, Software Engineering Economics
   Chulani S, 1999, IEEE T SOFTWARE ENG, V25, P573, DOI 10.1109/32.799958
   CHULANI S, 1998, P 20 ANN C INT SOC P
   CHULANI S, 1999, P 21 ANN C INT SOC P
   Crespo J., 2004, P 10 INT C INF PROC, P1255
   CUADRADOGALLEGO JJ, 2000, P 15 INT FOR COCOMO
   CUADRADOGALLEGO JJ, 2005, J COST ANAL MANA SUM, P12
   *DOD, 1999, PAR EST HDB
   ESA, 1991, PSS050 ESA
   FARR L, 1965, P ICC S EC AUT DAT P
   FERENS D, 1999, J PARAMETRICS, V14, P33
   FISCHMAN L, 1997, P ARMS C
   Herd J., 1977, RADCTR77220 DOT ASS
   Jensen Randall., 1983, 5 ISPA C, P88
   MERTES K, 1999, J COST ANAL MANAGEME, P35
   *NASA, 1996, SOFTW ENG LAB SER
   *NASA, 1995, SOFTW ENG LAB SER
   *NASA, 1990, SOFTW ENG LAB SER
   *PEI, 1999, PAR EST HDB
   Prather RE, 1995, ACM COMPUT SURV, V27, P497, DOI 10.1145/234782.234784
   Putnam L., 1992, MEASURES EXCELLENCE
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   RUBIN H, 1983, P SOFTFAIR C DEV TOO
   SHRUM T, 1997, THESIS AIR FORCE I T
   Sicilia MA, 2005, KYBERNETIKA, V41, P249
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   van Welie M, 1999, HUMAN-COMPUTER INTERACTION - INTERACT '99, P613
   YAGER RR, 1988, IEEE T SYST MAN CYB, V18, P183, DOI 10.1109/21.87068
NR 36
TC 5
Z9 6
U1 3
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2006
VL 14
IS 4
BP 339
EP 357
DI 10.1007/s11219-006-0039-0
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 093JA
UT WOS:000241163400005
DA 2024-07-18
ER

PT J
AU Amasaki, S
   Yoshitomi, T
   Mizuno, O
   Takagi, Y
   Kikuno, T
AF Amasaki, S
   Yoshitomi, T
   Mizuno, O
   Takagi, Y
   Kikuno, T
TI A new challenge for applying time series metrics data to software
   quality estimation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software testing; software quality; time series data; statistical
   analysis
ID INSPECTION
AB In typical software development, a software reliability growth model (SRGM) is applied in each testing activity to determine the time to finish the testing. However, there are some cases in which the SRGM does not work correctly. That is, the SRGM sometimes mistakes quality for poor quality products. In order to tackle this problem, we focussed on the trend of time series data of software defects among successive testing phases and tried to estimate software quality using the trend. First, we investigate the characteristics of the time series data on the detected faults by observing the change of the number of detected faults. Using the rank correlation coefficient, the data are classified into four kinds of trends. Next, with the intention of estimating software quality, we investigate the relationship between the trends of the time series data and software quality. Here, software quality is defined by the number of faults detected during six months after shipment. Finally, we find a relationship between the trends and metrics data collected in the software design phase. Using logistic regression, we statistically show that two review metrics in the design and coding phase can determine the trend.
C1 Osaka Univ, Grad Sch Informat Sci & Technol, Osaka, Japan.
C3 Osaka University
RP Osaka Univ, Grad Sch Informat Sci & Technol, Osaka, Japan.
EM amasaki@ist.osaka-u.ac.jp; o-mizuno@ist.osaka-u.ac.jp
OI Mizuno, Osamu/0000-0001-8061-7657
CR BASIN SL, 1973, ESTIMATION SOFTWARE
   BISANT DB, 1989, IEEE T SOFTWARE ENG, V15, P1294, DOI 10.1109/TSE.1989.559782
   Broekman Bart., 2002, Testing Embedded Software
   COMPTON BT, 1990, J SYST SOFTWARE, V12, P199, DOI 10.1016/0164-1212(90)90040-S
   FAGAN ME, 1986, IEEE T SOFTWARE ENG, V12, P744, DOI 10.1109/TSE.1986.6312976
   GOEL AL, 1985, IEEE T SOFTWARE ENG, V11, P1411, DOI 10.1109/TSE.1985.232177
   Hochberg Yosef, 1987, Multiple comparison procedures
   Horch J., 2003, Practical guide to software quality management, V2nd
   *INT STAND ORG, 1990, IEEE STAND GLOSS SOF
   Kendall M., 1990, Correlation methods
   Khoshgoftaar TM, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P203, DOI 10.1109/METRIC.2002.1011339
   KYU MR, 1996, HDB SOFTWARE RELIABI
   Lehmann Erich Leo, 1975, Nonparametrics: statistical methods based on ranks
   Marick B., 1995, CRAFT SOFTWARE TESTI
   MARKS DM, 1992, TESTING VERY BIG SYS
   Mizuno O, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P139, DOI 10.1109/ISSRE.2002.1173234
   Morgan JA, 1996, SEVENTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P87, DOI 10.1109/ISSRE.1996.558706
   MUNSON JC, 1992, IEEE T SOFTWARE ENG, V18, P423, DOI 10.1109/32.135775
   Musa J. D., 1987, Software Reliability: Measure-ment, Prediction, Application
   Muto S., 1995, STAT ANAL HDB
   Padberg F, 2004, IEEE T SOFTWARE ENG, V30, P17, DOI 10.1109/TSE.2004.1265733
   PAULK MC, 1993, IEEE SOFTWARE, V10, P18, DOI 10.1109/52.219617
   Schneidewind NF, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P402, DOI 10.1109/ISSRE.1997.630888
   Smidts C, 1996, SEVENTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P132, DOI 10.1109/ISSRE.1996.558733
   Takagi Y, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P34, DOI 10.1109/ISSRE.1995.497641
   TANAKA T, 1995, PROC INT CONF SOFTW, P123, DOI 10.1145/225014.225026
   Yokoyama Y, 1998, PROC INT CONF SOFTW, P465, DOI 10.1109/ICSE.1998.671607
NR 27
TC 12
Z9 13
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2005
VL 13
IS 2
BP 177
EP 193
DI 10.1007/s11219-005-6216-8
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 918NP
UT WOS:000228549200005
DA 2024-07-18
ER

PT J
AU Trienekens, JJM
   Bouman, JJ
   Van der Zwan, M
AF Trienekens, JJM
   Bouman, JJ
   Van der Zwan, M
TI Specification of Service Level Agreements: Problems, principles and
   practices
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Service Level Agreements; service object; service process; quality
   characteristics; case study results
AB Software intensive systems (SIS) increasingly influence the ability of enterprises to be competitive in continuously changing market situations. The integration of these systems into organizations, and in particular the subsequent exploitation, maintenance and service activities, have become of utmost importance. Unfortunately the area of exploitation and operation, also known as service management, is still rather immature. Service management covers services such as performance and availability support, end-user and help desk support, education, and maintenance. One of the main concepts of service management is the Service Level Agreement (SLA). The goal of an SLA is to bridge the gap between service provider and users or customers. However, there exist many problems and unsolved questions regarding the specification and the quantification of SLAs. This paper addresses the specification of SLAs on the basis of three well-founded service management principles, respectively: 'continuity in service management,' the pit/shell principle of a service, and the principle of specifying the quality of both a service process and a service object. Finally, the paper addresses the validation of these principles in practice.
C1 Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
EM j.j.m.trienekens@tm.tue.nl
CR BOEHM BW, 1989, IEEE T SOFTWARE ENG, V15, P902, DOI 10.1109/32.29489
   BOUMAN JJ, 1999, P 9 INT WORKSH SOFTW, P103
   *CCTA, 1987, INF TECHN INFR LIB
   CROSS GA, 2000, J BUS COMMUN, V37, P77
   Herzwurm G, 2000, JOINT REQUIREMENTS E
   *ISO IEC, 2001, 91261 ISOIEC 1
   MCBRIDE D, 1998, SUCCESSFULL DEPLOYME
   Parasuraman A., 1986, SERVQUAL MULTIPLE IT
   PASSMORE D, 1996, BUSINESS COMMUNICATI, V26, P20
   RENKEMA TJ, 1997, INVESTMENTS INFORMAT
   Robertson S, 2012, Mastering the requirements process: getting requirements right
   RODRIGUEZDAPENA P, 2001, NONFUNCTIONAL REQUIR
   RUIJS L, 2000, MATURE SERVICE MANAG
   SASSER W, 1978, MANAGEMENT SERVICES
   SIEGEL J, 2002, ESERVICESCAPABILITY
   STEINKE S, 1997, NETWORK, V12, P77
   TRIENEKENS JJM, 1992, IFIP TRANS A, V8, P315
   TRIENEKENS JJM, 1997, SERVICE LEVEL SPECIF, P23
   TRIENEKENS JJM, 1997, SOFTWARE QUALITY BUS
   Van Solingen Rini, 1999, The Goal/ Question/ Metric Method: a practical guide for quality improvement of software development
   VANSOLINGEN R, 2000, J INFORMATION SYSTEM
NR 21
TC 50
Z9 55
U1 1
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2004
VL 12
IS 1
BP 43
EP 57
DI 10.1023/B:SQJO.0000013358.61395.96
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 767DE
UT WOS:000188424300004
DA 2024-07-18
ER

PT J
AU Peters, JF
   Ramanna, S
AF Peters, JF
   Ramanna, S
TI Towards a software change classification system: A rough set approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE classification learning; computational intelligence; data mining;
   genetic algorithm; paired t-test; rough sets; software change
   classification; software quality; ten-fold cross validation
ID QUALITY; METRICS
AB The basic contribution of this paper is the presentation of two methods that can be used to design a practical software change classification system based on data mining methods from rough set theory. These methods incorporate recent advances in rough set theory related to coping with the uncertainty in making change decisions either during software development or during post-deployment of a software system. Two well-known software engineering data sets have been used as means of benchmarking the proposed classification methods, and also to facilitate comparison with other published studies on the same data sets. Two technologies in computation intelligence (CI) are used in the design of the software change classification systems described in this paper, namely, rough sets ( a granular computing technology) and genetic algorithms. Using 10-fold cross validated paired t-test, this paper also compares the rough set classification learning method with the Waikato Environment for Knowledge Analysis (WEKA) classification learning method. The contribution of this paper is the presentation of two models for software change classification based on two CI technologies.
C1 Univ Manitoba, Dept Elect & Comp Engn, Winnipeg, MB R3T 5V6, Canada.
C3 University of Manitoba
RP Univ Manitoba, Dept Elect & Comp Engn, Winnipeg, MB R3T 5V6, Canada.
EM jfpeters@ee.umanitoba.ca; ramanna@ee.umanitoba.ca
CR [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1968, Handbook of Tables for Probability and Statistics
   [Anonymous], COMPUTATIONAL INTELL
   [Anonymous], INTELLIGENT DECISION
   [Anonymous], 2000, Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations
   BASILI VR, 1984, IEEE T SOFTWARE ENG, V10, P728, DOI 10.1109/TSE.1984.5010301
   Bazan J., 2001, LNCS LNAI, V2005, P106, DOI DOI 10.1007/3-540-45554-X_12
   Bazan JG, 2002, LECT NOTES ARTIF INT, V2475, P397
   Bazan JG, 2000, STUD FUZZ SOFT COMP, V56, P49
   BELADY LA, 1980, IBM SYST J, V19, P542, DOI 10.1147/sj.194.0542
   BELADY LA, 1981, J SYST SOFTWARE, V2, P23, DOI 10.1016/0164-1212(81)90043-1
   BELADY LA, 1979, TH00679 IEEE, P90
   BRIAND LC, 1992, IEEE T SOFTWARE ENG, V18, P931, DOI 10.1109/32.177363
   Cusumano M., 1991, JAPANS SOFTWARE FACT
   Dietterich TG, 1998, NEURAL COMPUT, V10, P1895, DOI 10.1162/089976698300017197
   FENTON NE, 1987, INFORM SOFTWARE TECH, V29, P301, DOI 10.1016/0950-5849(87)90029-2
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Hogg Robert V., 1977, PROBABILITY STAT INF
   HUSSEIN A, 1992, P 9 CAN C ART INT VA, P38
   ICHINO M, 1984, IEEE T SYST MAN CYB, V14, P737, DOI 10.1109/TSMC.1984.6313294
   JENSEN HA, 1985, IEEE T SOFTWARE ENG, V11, P231, DOI 10.1109/TSE.1985.232199
   JOHNSON DS, 1974, J COMPUT SYST SCI, V9, P256, DOI 10.1016/S0022-0000(74)80044-9
   KHOSHGOFTAAR TM, 1992, IEEE T SOFTWARE ENG, V18, P979, DOI 10.1109/32.177367
   KHOSHGOFTAAR TM, 1990, PROCEEDINGS : THE FOURTEENTH ANNUAL INTERNATIONAL COMPUTER SOFTWARE & APPLICATIONS CONFERENCE, P408, DOI 10.1109/CMPSAC.1990.139396
   KHOSHGOFTAAR TM, 1994, SOFTWARE QUAL J, V3, P137, DOI 10.1007/BF00402294
   KHOSHGOFTAAR TM, 1994, INT J RELIABILITY QU, V1, P303
   KITCHENHAM B, 1987, SOFTWARE ENG J, V2, P114, DOI 10.1049/sej.1987.0015
   Komorowski J., 1999, Rough Fuzzy Hybridization: A New Trend in Decision Making, P3
   KOZA JR, 1994, STAT COMPUT, V4, P87, DOI 10.1007/BF00175355
   LIND RK, 1989, IEEE T SOFTWARE ENG, V15, P649, DOI 10.1109/32.24715
   MAYER A, 1992, SOFTWARE QUAL J, V1, P209, DOI 10.1007/BF01885771
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MITCHELL T, 1989, ANNU REV COMPUT SCI, V4, P417
   MODRZEJEWSKI M, 1993, P EUR C MACH LEARN, P213
   MUNSON JC, 1990, INFORM SOFTWARE TECH, V32, P106, DOI 10.1016/0950-5849(90)90109-5
   NGUYEN SH, 1998, FUNDAM INFORM, V34, P1
   Ohrn A., 1999, THESIS NORWEGIAN U S
   PAGALLO G, 1990, MACH LEARN, V5, P71, DOI 10.1023/A:1022611825350
   PAO YH, 1986, COUPLING SYMBOLIC NU, P69
   PAWLAK Z, 2002, ROUGH SETS GRANULAR
   PAWLAK Z, 2001, ROUGH SET THEORY GRA, V5, P177
   Pawlak Z., 1994, Advances in the Dempster Shafer Theory of Evidence, P251
   Pawlak Z., 1991, ROUGH SETS THEORETIC
   Pedrycz W, 2001, NEUROCOMPUTING, V36, P149, DOI 10.1016/S0925-2312(00)00340-4
   Pedrycz W, 1997, 1997 CANADIAN CONFERENCE ON ELECTRICAL AND COMPUTER ENGINEERING, CONFERENCE PROCEEDINGS, VOLS I AND II, P253, DOI 10.1109/CCECE.1997.614837
   Pedrycz W., 1998, Computational Intelligence: An Introduction
   Peters JF, 2002, INT J INTELL SYST, V17, P109, DOI 10.1002/int.10010
   Peters JF, 2003, PATTERN RECOGN LETT, V24, P911, DOI 10.1016/S0167-8655(02)00203-9
   Peters JF, 2000, STUD FUZZ SOFT COMP, V40, P392
   PETERS JF, 1999, ENCY ELECT ELECT ENG
   PETERS JF, 1999, ROUGH FUZZY HYBRIDIZ, P349
   Polkowski L., 1998, Rough Sets in Knowledge Discovery: Methodology and Applications, V2
   POLKOWSKI L, 1998, LECT NOTES ARTIFICIA, V1424
   Polkowski L., 1998, Rough Sets in Knowledge Discovery: Methodology and Applications, V1
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   SAL J, 2001, JMP START STAT GUIDE
   SKOWRON A, 2002, ROUGH NEURO COMPUTIN, P636
   SKOWRON A, 2001, P INT WORKSH ROUGH S, P135
   SKOWRON A, 2002, ROUGH SETS GRANULAR
   SKOWRON A, 1997, ROUGH SETS DATA MINI, P259
   Wroblewski J., 1995, Proceedings of the International Workshop on Rough Sets Soft Computing at Second Annual Joint Conference on Information Sciences, P186
   Zuse H., 1990, SOFTWARE COMPLEXITY
   Zuse Horst., 1998, A framework of software measurement
NR 64
TC 13
Z9 13
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2003
VL 11
IS 2
BP 121
EP 147
DI 10.1023/A:1023764510838
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 678DV
UT WOS:000182850500003
DA 2024-07-18
ER

PT J
AU Ghoreshi, M
   Haghighi, H
AF Ghoreshi, M.
   Haghighi, H.
TI Object coverage criteria for supporting object-oriented testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Object-oriented testing; Test adequacy criteria; Code coverage criteria;
   Inheritance; Polymorphism
AB Code coverage criteria are widely used in object-oriented (OO) domains as test quality indicators. However, these criteria are based on the procedural point of view, and therefore do not address the specific features of OO programs. In this article, we extend the code coverage criteria and introduce a new set of criterion, called "object coverage criteria," which cope with OO features like object instantiation, inheritance, polymorphism, and dynamic binding. Unlike previous criteria, the new criteria regard the actual type of the object under test and some inherited codes from the parent/ancestor classes that represent the object's states and behaviors. The new criteria have been implemented in a prototype tool called OCov4J for the Java language. Using this tool and conducting an empirical study on 270 classes (with about 50 k lines of code without blank lines and comments) from several large and widely used open source projects, we have found a considerable positive correlation between the object coverage level (defined via the new proposed criteria) and the number of detected specific OO failures. Not only do the proposed criteria provide ease of use, high automation, and low execution cost, but also they can effectively be applied to real-world OO programs.
C1 [Ghoreshi, M.; Haghighi, H.] Shahid Beheshti Univ, Fac Comp Sci & Engn, Tehran, Iran.
C3 Shahid Beheshti University
RP Haghighi, H (corresponding author), Shahid Beheshti Univ, Fac Comp Sci & Engn, Tehran, Iran.
EM m_ghoreshi@sbu.ac.ir; h_haghighi@sbu.ac.ir
CR Alexander RT, 2010, SOFTW TEST VERIF REL, V20, P291, DOI 10.1002/stvr.417
   Alexander RT, 2002, IEEE INT C ENG COMP, P193, DOI 10.1109/ICECCS.2002.1181512
   Alexander RT, 2000, 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P15, DOI 10.1109/ISSRE.2000.885857
   Ammann Paul, 2008, Introduction to software testing, V1st
   Aziz SR, 2019, IEEE ACCESS, V7, P85262, DOI 10.1109/ACCESS.2019.2924040
   Binder R.V., 2000, AW OBJ TECHNOL S
   Bloch J., 2008, EFFECTIVE JAVA JAVA
   Braione P, 2019, 2019 IEEE/ACM 12TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2019), P25, DOI 10.1109/SBST.2019.00016
   Coles H., 2016, P 25 INT S SOFTWARE, P449
   Denaro G, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P947, DOI 10.1109/ICSE.2015.104
   Devroey X., 2020, P IEEEACM 42 INT C S, P545, DOI DOI 10.1145/3387940.3392265
   Fraser G, 2015, EMPIR SOFTW ENG, V20, P611, DOI 10.1007/s10664-013-9288-2
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Gamma Erich, 1995, DESIGN PATTERNS ELEM
   Gay G, 2015, IEEE T SOFTWARE ENG, V41, P803, DOI 10.1109/TSE.2015.2421011
   Ghoreshi M, 2016, INFORM SOFTWARE TECH, V78, P1, DOI 10.1016/j.infsof.2016.05.005
   Gopinath R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P72, DOI 10.1145/2568225.2568278
   HARROLD MJ, 1992, 14TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING : PROCEEDINGS, P68
   Hemmati H, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P151, DOI 10.1109/QRS.2015.30
   Huang XG, 2014, 2014 14TH INTERNATIONAL SYMPOSIUM ON COMMUNICATIONS AND INFORMATION TECHNOLOGIES (ISCIT), P60
   Just R, 2014, P 2014 INT S SOFTW T, P437, DOI DOI 10.1145/2610384.2628055
   Kifetew F, 2019, 2019 IEEE/ACM 12TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2019), P15, DOI 10.1109/SBST.2019.00014
   Kim SW, 2001, SOFTW TEST VERIF REL, V11, P207, DOI 10.1002/stvr.238
   Liu B., 2019, P 2019 9 INT C COMM, P20
   Madeyski L, 2010, IET SOFTW, V4, P32, DOI 10.1049/iet-sen.2008.0038
   Mcheick H., 2010, P INT C COMP SYST AP, P1
   Najumudheen E. S. F., 2019, P 12 INN SOFTW ENG C, P1
   Offutt J, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P84, DOI 10.1109/ISSRE.2001.989461
   Offutt Jeff., 2006, Proceedings of the 2006 International Workshop on Automation of Software Test, P78, DOI DOI 10.1145/1138929.1138945
   Orso A., 1999, P 16 INT C TEST COMP
   Pacheco Carlos, 2007, COMPANION 22 ACM SIG, P815, DOI DOI 10.1145/1297846.1297902
   Papadakis M, 2019, ADV COMPUT, V112, P275, DOI 10.1016/bs.adcom.2018.03.015
   PERRY DE, 1990, J OBJECT-ORIENT PROG, V2, P13
   Prasetya ISWB, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P950, DOI 10.1145/2786805.2803182
   Razali N. M., 2011, J. Stat. Model. and Anal., V2, P21, DOI DOI 10.1515/BILE-2015-0008
   Molina UR, 2018, PROCEEDINGS 2018 IEEE/ACM 11TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST), P22, DOI 10.1145/3194718.3194728
   Saha RK, 2018, IEEE WORK CONF MIN S, P10, DOI 10.1145/3196398.3196473
   Schwartz A, 2018, J SYST SOFTWARE, V144, P106, DOI 10.1016/j.jss.2018.06.024
   Segura S, 2011, INFORM SOFTWARE TECH, V53, P1124, DOI 10.1016/j.infsof.2011.03.006
   Smith G, 2012, The Object-Z Specification Language, V1
   Smith M. D., 1990, Proceedings. Conference on Software Maintenance 1990 (Cat. No.90CH2921-5), P272, DOI 10.1109/ICSM.1990.131372
   Su T, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3020266
   Yu-Seung Ma, 2006, 28th International Conference on Software Engineering Proceedings, P827
NR 43
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1369
EP 1414
DI 10.1007/s11219-023-09643-3
EA JUN 2023
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001020104100001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, J
   Yu, DJ
   Hu, HY
AF Chen, Jie
   Yu, Dongjin
   Hu, Haiyang
TI Towards an understanding of memory leak patterns: an empirical study in
   Python
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Memory leak; Circular reference; Code pattern
ID JAVA
AB Memory leaks, an important and difficult issue in software development, occur when an object is inadvertently retained longer than necessary. Programming languages provide a variety of dynamic memory management methods to support programmers in preventing the introduction of defects that cause memory leaks. However, it is not yet possible to completely free programmers from the work of memory management. Indeed, runtime leak detection is time consuming and usually done after the fact, while manual code inspection requires rich developer experience. Understanding the common patterns of memory leaks can help developers be mindful of leaks or avoid them at an earlier stage during the development process and may further inspire future research. Eight code patterns are found in our case study specifically for memory leaks caused by circular references in Python. The observed patterns can explain 91.64% of the memory leaks in the studied projects. Our work can guide important decisions about the possibility of identifying memory leaks with static code analysis.
C1 [Chen, Jie; Yu, Dongjin; Hu, Haiyang] Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou 310018, Zhejiang, Peoples R China.
C3 Hangzhou Dianzi University
RP Chen, J (corresponding author), Hangzhou Dianzi Univ, Sch Comp Sci & Technol, Hangzhou 310018, Zhejiang, Peoples R China.
EM cjie@hdu.edu.cn; yudj@hdu.edu.cn; hhy@hdu.edu.cn
FU National Science Foundation of China [61702144]; Zhejiang Provincial
   National Science Foundation of China [LQ17F020003]
FX This work was supported by the National Science Foundation of China (No.
   61702144), the Zhejiang Provincial National Science Foundation of China
   (No. LQ17F020003).
CR [Anonymous], 2010, P ACM IEEE 32 INT C, DOI DOI 10.1145/1806799.1806874
   [Anonymous], 2008, PYTHON PROGRAMMING L
   Campos EC, 2017, INT SYMP EMP SOFTWAR, P404, DOI 10.1109/ESEM.2017.55
   Cherem S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P480, DOI 10.1145/1250734.1250789
   CHRISTOPHER TW, 1984, SOFTWARE PRACT EXPER, V14, P503, DOI 10.1002/spe.4380140602
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   Distefano D, 2010, LECT NOTES COMPUT SC, V6013, P278, DOI 10.1007/978-3-642-12029-9_20
   Fan G, 2019, PROC INT CONF SOFTW, P72, DOI 10.1109/ICSE.2019.00025
   Ghanavati M, 2020, EMPIR SOFTW ENG, V25, P678, DOI 10.1007/s10664-019-09731-8
   github, about us
   Hanam Q, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P144, DOI 10.1145/2950290.2950308
   Hu M., 2020, 2020 IEEE 27 INT C S
   Jump M, 2007, ACM SIGPLAN NOTICES, V42, P31, DOI 10.1145/1190215.1190224
   Jung C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P825, DOI 10.1145/2568225.2568311
   Liu TP, 2016, PROC INT CONF SOFTW, P911, DOI 10.1145/2884781.2884784
   Lo D, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P415, DOI 10.1145/2786805.2786809
   MCBETH JH, 1963, COMMUN ACM, V6, P575, DOI 10.1145/367593.367649
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   Orlovich M, 2006, LECT NOTES COMPUT SC, V4134, P405
   Pan K, 2009, EMPIR SOFTW ENG, V14, P286, DOI 10.1007/s10664-008-9077-5
   Shaham R, 2000, LECT NOTES COMPUT SC, V1781, P50
   Sor V, 2014, J SYST SOFTWARE, V96, P139, DOI 10.1016/j.jss.2014.06.005
   Sui YL, 2014, IEEE T SOFTWARE ENG, V40, P107, DOI 10.1109/TSE.2014.2302311
   Sun X., 2018, IEEE COMP SOFTW APPL
   Tan L, 2014, EMPIR SOFTW ENG, V19, P1665, DOI 10.1007/s10664-013-9258-8
   Xu GQ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P270
   Xu GQ, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P151, DOI 10.1145/1368088.1368110
   Yan D., 2014, P ANN IEEE ACM INT S, P87
   Zhong H, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P913, DOI 10.1109/ICSE.2015.101
NR 29
TC 0
Z9 0
U1 3
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1303
EP 1330
DI 10.1007/s11219-023-09641-5
EA JUN 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001009372900002
DA 2024-07-18
ER

PT J
AU Pérez-Castillo, R
   Jiménez-Navajas, L
   Piattini, M
AF Perez-Castillo, Ricardo
   Jimenez-Navajas, Luis
   Piattini, Mario
TI QRev: migrating quantum code towards hybrid information systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quantum computing; Quantum programming; Reverse engineering; KDM; QRev
ID SUPREMACY
AB Quantum computing is now a reality, and its incomparable computational power has led companies to show a great interest in being able to work with quantum software in order to support part of their current and future business operations. However, the quantum computing paradigm differs significantly from its classical counterparts, which has brought about the need to revolutionise how the future software is designed, built, and operated in order to work with quantum computers. Since companies cannot discard all their current (and probably mission-critical) information systems, they must adapt their classical information systems to new specific quantum applications, thus evolving towards hybrid information systems. Unfortunately, there are no specific methods with which to deal with this challenge. We believe that reengineering, and more specifically, software modernisation using model-driven engineering principles, could be useful as regard migrating classical systems and existing quantum programs towards hybrid information systems. This paper, therefore, presents QRev, a reverse engineering tool that analyses quantum programs developed in Q# in order to identify its components and interrelationships, and then generates abstract models that can be used in software modernisation processes. The platform-independent models are generated according to the Knowledge Discovery Metamodel (KDM) standard. QRev is validated in a case study involving five quantum programs in order to demonstrate its effectiveness and scalability. The main implication of the study is that QRev can be used in order to attain KDM models, which can subsequently be employed to restructure or add new quantum functionality at a higher abstraction level, i.e. independently of the specific quantum technology.
C1 [Perez-Castillo, Ricardo; Jimenez-Navajas, Luis; Piattini, Mario] Univ Castilla La Mancha, Informat Technol & Syst Inst ITSI, Paseo Univ 4, Ciudad Real 13071, Spain.
   [Perez-Castillo, Ricardo] Univ Castilla La Mancha, Fac Social Sci & IT, Avd Real Fabr Seda,Talavera Reina, S-N, Ciudad Real 45600, Spain.
C3 Universidad de Castilla-La Mancha; Universidad de Castilla-La Mancha
RP Pérez-Castillo, R (corresponding author), Univ Castilla La Mancha, Informat Technol & Syst Inst ITSI, Paseo Univ 4, Ciudad Real 13071, Spain.; Pérez-Castillo, R (corresponding author), Univ Castilla La Mancha, Fac Social Sci & IT, Avd Real Fabr Seda,Talavera Reina, S-N, Ciudad Real 45600, Spain.
EM ricardo.pdelcastillo@uclm.es
RI Piattini, Mario/F-6271-2013; Perez-Castillo, Ricardo/A-3033-2011
OI Piattini, Mario/0000-0002-7212-8279; Jimenez Navajas,
   Luis/0000-0001-6257-7153; Perez-Castillo, Ricardo/0000-0002-9271-3184
FU CRUE-CSIC agreement; Springer Nature
FX Open Access funding provided thanks to the CRUE-CSIC agreement with
   Springer Nature.
CR Aaronson S, 2008, SCI AM, V298, P62, DOI 10.1038/scientificamerican0308-62
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   [Anonymous], 2002, LEGACY SYSTEMS TRANS
   [Anonymous], 2011, QUANTUM COMPUTING GE, DOI DOI 10.1063/PT.3.1442
   Arute F, 2019, NATURE, V574, P505, DOI 10.1038/s41586-019-1666-5
   BENNETT CH, 1993, PHYS REV LETT, V70, P1895, DOI 10.1103/PhysRevLett.70.1895
   Boixo S, 2018, NAT PHYS, V14, P595, DOI 10.1038/s41567-018-0124-x
   Bozzo-Rey M., 2019, Proceedings of the 29th Annual International Conference on Computer Science and Software Engineering, P393
   Brunelière H, 2014, INFORM SOFTWARE TECH, V56, P1012, DOI 10.1016/j.infsof.2014.04.007
   Canfora G., 2007, NEW FRONTIERS REVERS
   Cross Andrew W, 2017, Open quantum assembly language
   Einstein A, 1935, PHYS REV, V47, P0777, DOI 10.1103/PhysRev.47.777
   Garhwal S, 2021, ARCH COMPUT METHOD E, V28, P289, DOI 10.1007/s11831-019-09372-6
   Gartner, 2019, CIOS GUID QUANT COMP
   Gayrard R, 2019, QUANTUM COMPUTING RE
   Geller Alan, 2020, Introducing quantum intermediate representation (QIR)
   Horodecki R, 2009, REV MOD PHYS, V81, P865, DOI 10.1103/RevModPhys.81.865
   IBM, 2020, IBM Q EXP
   Jimenez-Navajas L., 2020, INT C QUAL INF COMM, P249
   Jimenez-Navajas L, QREV CASE STUDY MAT
   JimenezNavajas s.L., ANTLR Q SHARP GRAMMA
   Kay A., 2020, TUTORIAL QUANTIKZ PA
   Kazman R, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P154, DOI 10.1109/WCRE.1998.723185
   KDL`, 2020, SOFTW DEV LIF RES SO
   Lamhaddab K, 2019, MOB INF SYST, V2019, DOI 10.1155/2019/4324871
   Microsoft, 2020, QUANT COD SAMPL
   Microsoft QDK, 2020, CREAT RAND NUMB QUAN
   Microsoft QDK, 2020, SIMPL QUANT ALG SAMP
   Microsoft QDK, 2020, MEAS QUB
   Microsoft QDK, 2020, QUANTUM TELEPORTATIO
   MIT Quantua Group, 2020, QUANT CIRC VIEW QAS
   Mueck L, 2017, NATURE, V549, P171, DOI 10.1038/549171a
   OMG, 2016, ARCH DRIV MOD ADM KN
   Perez-Castillo R., 2011, Modern Software Engineering Concepts and Practices: Advanced Approaches, P75
   Perez-Castillo R, 2012, P 27 ANN ACM S APPL, P1095
   Pérez-Castillo R, 2021, ADV ENG SOFTW, V151, DOI 10.1016/j.advengsoft.2020.102933
   Pérez-Castillo R, 2011, INFORM SOFTWARE TECH, V53, P1023, DOI 10.1016/j.infsof.2011.05.006
   Pérez-Castillo R, 2011, COMPUT STAND INTER, V33, P519, DOI 10.1016/j.csi.2011.02.007
   Piattini Mario, 2020, ACM SIGSOFT Software Engineering Notes, V45, P12, DOI 10.1145/3402127.3402131
   Piattini M, 2021, IT PROF, V23, P62, DOI 10.1109/MITP.2020.3019522
   Piattini Mario, 2020, QANSWER, P1
   Quantastica, 2019, QUANT PROGR STUD
   quiskit.org, 2020, QUISKIT SDK
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Schrödinger E, 1935, NATURWISSENSCHAFTEN, V23, P807, DOI 10.1007/BF01491891
   Sneed HM, 2005, WCRE: 12TH WORKING CONFERENCE ON REVERSE ENGINEERING 2005, PROCEEDINGS, P111
   Svore KM, 2006, COMPUTER, V39, P74, DOI 10.1109/MC.2006.4
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Tucci M, 2007, EMERGING METHODS TEC, P1
   Ulrich WM, 2010, INFORMATION SYSTEMS TRANSFORMATION: ARCHITECTURE-DRIVEN MODERNIZATION CASE STUDIES, pXII
   Vernacchia S., 2019, WORLD GOVT SUMMIT
   Wong H. A., 2000, P C FURT SOFTW ENG
NR 52
TC 3
Z9 3
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 551
EP 580
DI 10.1007/s11219-021-09574-x
EA OCT 2021
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000712790900003
OA hybrid
DA 2024-07-18
ER

PT J
AU Lahami, M
   Krichen, M
AF Lahami, Mariam
   Krichen, Moez
TI A survey on runtime testing of dynamically adaptable and distributed
   systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Runtime testing; Dynamic and adaptable systems; Resource awareness;
   Distributed systems
ID ADAPTIVE SYSTEMS; SOFTWARE; SELECTION; FRAMEWORK; VERIFICATION;
   TESTABILITY; CHALLENGES
AB This article addresses the need of applying testing activities with the purpose of checking the consistency and the correctness of distributed and dynamically adaptable systems whose structure and behavior evolve dynamically at runtime. We identified in the literature a number of studies that used some traditional testing techniques (e.g., regression testing) applied at development time and runtime verification techniques (e.g., runtime monitoring) to ensure the trustworthiness of software systems. Since traditional testing techniques are no longer adequate for dynamically adaptable systems because some behavioral/structural evolutions are unknown at development time, the runtime testing was introduced (Brenner et al., 2007). It is defined as any testing method that has to be carried out on the final execution environment by performing tests during deployment or in-service time. However, there is a lack of recent comprehensive survey on this emerging verification an validation technique. To fill this gap, we conduct a survey to investigate research done in this area. A list of 43 research studies are deeply discussed to address answers of eight research questions. In particular, this work gives the runtime testing taxonomy, challenges and introduces several approaches dealing with such technique and discusses challenges as well as recent advances in this area. Moreover, it also points out some future directions.
C1 [Lahami, Mariam; Krichen, Moez] Univ Sfax, ReDCAD Lab, Sfax, Tunisia.
   [Krichen, Moez] Al Baha Univ, Fac CSIT, Al Baha, Saudi Arabia.
C3 Universite de Sfax; Ecole Nationale dIngenieurs de Sfax (ENIS); Al Baha
   University
RP Krichen, M (corresponding author), Univ Sfax, ReDCAD Lab, Sfax, Tunisia.; Krichen, M (corresponding author), Al Baha Univ, Fac CSIT, Al Baha, Saudi Arabia.
EM mariam.lahami@redcad.org; moez.krichen@redcad.org
RI Krichen, Moez/AAH-5074-2020
OI Krichen, Moez/0000-0001-8873-9755; Lahami, Mariam/0000-0002-2231-6917
CR Akour M, 2011, 18TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON ENGINEERING OF COMPUTER BASED SYSTEMS (ECBS 2011), P89, DOI 10.1109/ECBS.2011.23
   Alkawaz Mohammed Hazim, 2019, 2019 IEEE 7th Conference on Systems, Process and Control (ICSPC), P59, DOI 10.1109/ICSPC47137.2019.9068003
   Alroobaea, 2019, INT J AUTONOMOUS ADA, V12, P264, DOI [10.1504/IJAACS.2019.10022473, DOI 10.1504/IJAACS.2019.10022473]
   [Anonymous], 2006, P 6 INT WORKSH SOFTW
   [Anonymous], 2010, PRINCIPLES APPL DIST
   [Anonymous], 2003, P 6 INT S AUT DEC SY
   [Anonymous], 1990, IEEE Std 610.12-1990, V42, P112, DOI [10.1109/IEEESTD.1990.101064, DOI 10.1109/IEEESTD.1990.101064]
   [Anonymous], 1992, Dependability: Basic Concepts and Terminology
   Arai E., 2019, ENTERPRISE INTEROPER, VVIII, P167
   Bai XY, 2006, FOURTH IEEE WORKSHOP ON SOFTWARE TECHNOLOGIES FOR FUTURE EMBEDDED AND UBIQUITOUS SYSTEMS AND THE SECOND INTERNATIONAL WORKSHOP ON COLLABORATIVE COMPUTING, INTEGRATION, AND ASSURANCE, PROCEEDINGS, P205
   Bai XY, 2007, P INT COMP SOFTW APP, P368
   Barnat, 2018, MODEL CHECKING RUNTI
   Beese J, 2019, BUS INFORM SYST ENG+, V61, P503, DOI 10.1007/s12599-018-0529-1
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Bekesiene S., 2019, 2019 INT C MIL TECHN, P1
   Bershadsky A, 2019, COMM COM INF SC, V1084, P122, DOI 10.1007/978-3-030-29750-3_10
   Bertolino Antonia, 2019, From Software Engineering to Formal Methods and Tools, and Back: Essays Dedicated to Stefania Gnesi on the Occasion of Her 65th Birthday. Lecture Notes in Computer Science (LNCS 11865), P56, DOI 10.1007/978-3-030-30985-5_5
   Beszédes A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P46, DOI 10.1109/ICSM.2012.6405252
   Biswas S, 2011, INFORM-J COMPUT INFO, V35, P289
   Bradatsch C., 2011, 2011 6th IEEE International Symposium on Industrial Embedded Systems (SIES), P55, DOI 10.1109/SIES.2011.5953679
   Bradley, 2019, EFFECTIVE MODEL BASE, P405
   Brenner D, 2007, INFORM SYST FRONT, V9, P151, DOI 10.1007/s10796-007-9029-4
   Briand LC, 2009, INFORM SOFTWARE TECH, V51, P16, DOI 10.1016/j.infsof.2008.09.010
   Bruneton E, 2004, LECT NOTES COMPUT SC, V3054, P7
   Buranapanichkit Dujdow, 2019, 2019 16th International Conference on Electrical Engineering/Electronics, Computer, Telecommunications and Information Technology (ECTI-CON). Proceedings, P834, DOI 10.1109/ECTI-CON47248.2019.8955416
   Cámara J, 2017, IEEE T DEPEND SECURE, V14, P50, DOI 10.1109/TDSC.2015.2429128
   Chaari T, 2012, 2012 9TH INTERNATIONAL CONFERENCE ON UBIQUITOUS INTELLIGENCE & COMPUTING AND 9TH INTERNATIONAL CONFERENCE ON AUTONOMIC & TRUSTED COMPUTING (UIC/ATC), P415, DOI 10.1109/UIC-ATC.2012.82
   Chaki J., 2019, IEEE T IMAGE PROCESS, VPP, P1
   Chen Yanping., 2007, 3rd international workshop on Advances in model-based testing, P54, DOI 10.1145/1291535.1291541
   Cheng Betty H. C., 2014, Models@run.time. Foundations, Applications, and Roadmaps. LNCS: 8378, P101
   Chu LK, 2005, IEEE INFOCOM SER, P796
   Cristea, 2009, P 21 IFIP INT C TEST
   De Angelis F, 2014, LECT NOTES COMPUT SC, V8829, P107, DOI 10.1007/978-3-319-11737-9_8
   deSousaSantos, 2020, INFORM SOFTWARE TECH, P106482
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   Din G, 2006, LECT NOTES COMPUT SC, V3964, P177
   Eberhardinger B, 2017, 2017 IEEE/ACM 12TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TESTING (AST), P34, DOI 10.1109/AST.2017.1
   Eberhardinger B, 2015, 2015 IEEE NINTH INTERNATIONAL CONFERENCE ON SELF-ADAPTIVE AND SELF-ORGANIZING SYSTEMS WORKSHOPS (SASOW), P140, DOI 10.1109/SASOW.2015.28
   Elqortobi M., 2018, Lecture notes of the institute for computer sciences, social-informatics and telecommunications engineering, V206, P129
   Engström E, 2010, LECT NOTES COMPUT SC, V6156, P3, DOI 10.1007/978-3-642-13792-1_3
   ETSI, 2005, METH TEST SPEC MTS T
   Felderer M, 2020, LECT NOTES BUS INF P, V371, P3, DOI 10.1007/978-3-030-35510-4_1
   Firouzi F., 2020, Intelligent Internet of Things From Device to Fog and Cloud, P173, DOI DOI 10.1007/978-3-030-30367-94
   Firouzi Farshad., 2020, Intelligent internet of things, P3, DOI DOI 10.1007/978-3-030-30367-9_1
   Fourneret E., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P125, DOI 10.1109/ICSTW.2011.95
   Fredericks Erik M., 2015, 2015 IEEE/ACM 10th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS), P157, DOI 10.1109/SEAMS.2015.15
   Fredericks EM, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P17, DOI 10.1145/2593929.2593937
   Fredericks EM, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P169, DOI 10.1109/SEAMS.2013.6595504
   Gao LH, 2017, INT CONF SOFTW ENG, P308, DOI 10.1109/ICSESS.2017.8342921
   Giese, 2015, ABS180507354 CORR
   González A, 2008, 2008 23RD IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOPS, PROCEEDINGS, P41, DOI 10.1109/ASEW.2008.4686292
   Granja I, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P2, DOI 10.1109/CSMR.1999.756677
   Graves TL, 2001, ACM T SOFTW ENG METH, V10, P184, DOI 10.1145/367008.367020
   Greiler Michaela, 2010, P 2 INT WORKSHOP PRI, P36
   Hansel Joachim, 2017, 2017 IEEE/ACM 2nd International Workshop on Variability and Complexity in Software Design (VACE). Proceedings, P9, DOI 10.1109/VACE.2017.5
   Harrold M. J., 1998, WORKSH ROL ARCH TEST, P73
   Harrold MaryJean., 2000, ICSE 00 P C FUTURE S, P61
   Hellwagner, 2019, IEEE T KNOWL DATA EN, P1
   Hielscher J, 2008, LECT NOTES COMPUT SC, V5377, P122, DOI 10.1007/978-3-540-89897-9_11
   Huang S, 2019, 2019 COMPANION OF THE 19TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS-C 2019), P534, DOI 10.1109/QRS-C.2019.00111
   Inverardi P., 2011, P 8 WORKSH ASS SELF, P5
   Jansen K, 2009, PROCEEDINGS OF THE TWENTIETH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P665
   Johnsen E., 2018, PRINCIPLED SOFTWARE, P147
   Jussien Narendra., 2008, Open-Source Software for Integer and Contraint Programming, OSSICP'08, P1
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kim JU, 2019, INFORM SYST FRONT, V21, P1385, DOI 10.1007/s10796-018-9838-7
   King Tariq M., 2011, Autonomic and Trusted Computing. Proceedings 8th International Conference (ATC 2011), P31, DOI 10.1007/978-3-642-23496-5_3
   King TM, 2011, 2011 8TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON ENGINEERING OF AUTONOMIC AND AUTONOMOUS SYSTEMS (EASE), P59, DOI 10.1109/EASe.2011.16
   King TM, 2007, J COMPUT, V2, P37, DOI 10.4304/jcp.2.9.37-49
   Korel B, 2002, PROC IEEE INT CONF S, P214, DOI 10.1109/ICSM.2002.1167768
   Korel B., 1998, Software Engineering Notes, V23, P143, DOI 10.1145/271775.271803
   KRAMER J, 1985, IEEE T SOFTWARE ENG, V11, P424, DOI 10.1109/TSE.1985.232231
   Krichen Moez, 2018, International Journal of Critical Computer-Based Systems, V8, P282
   Krichen M., 2018, INT C ENT INF SYST C, P130
   Krichen M, 2020, EAI SPRINGER INNOVAT, P589, DOI 10.1007/978-3-030-13705-2_24
   Krichen M, 2019, PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING (ENASE), P570, DOI 10.5220/0007830605700577
   Krichen M, 2020, EAI SPRINGER INNOVAT, P629, DOI 10.1007/978-3-030-13705-2_26
   Krichen M, 2023, MOBILE NETW APPL, V28, P732, DOI 10.1007/s11036-019-01369-6
   Krupitzer C, 2015, PERVASIVE MOB COMPUT, V17, P184, DOI 10.1016/j.pmcj.2014.09.009
   Kuru K, 2020, IEEE ACCESS, V8, P18615, DOI 10.1109/ACCESS.2020.2967777
   Lahami, 2019, 21 INT C ENT INF SYS, V1
   Lahami Mariam, 2012, Testing Software and Systems. 24th IFIP WG 6.1 International Conference (ICTSS 2012). Proceedings, P103, DOI 10.1007/978-3-642-34691-0_9
   Lahami Mariam, 2012, Testing Software and Systems. 24th IFIP WG 6.1 International Conference (ICTSS 2012). Proceedings, P71, DOI 10.1007/978-3-642-34691-0_7
   Lahami M, 2018, 2018 INTERNATIONAL CONFERENCE ON CONTROL, AUTOMATION AND DIAGNOSIS (ICCAD)
   Lahami M, 2016, SCI COMPUT PROGRAM, V122, P1, DOI 10.1016/j.scico.2016.02.002
   Lahami M, 2015, LECT NOTES COMPUT SC, V9447, P224, DOI 10.1007/978-3-319-25945-1_14
   Lahami M, 2013, IEEE ENABL TECHNOL, P377, DOI 10.1109/WETICE.2013.62
   Leal L, 2019, P INT COMP SOFTW APP, P495, DOI 10.1109/COMPSAC.2019.00076
   LEUNG HKN, 1989, CONFERENCE ON SOFTWARE MAINTENANCE - 1989, PROCEEDINGS, P60
   Lou YL, 2019, ADV COMPUT, V113, P1, DOI 10.1016/bs.adcom.2018.10.001
   Maalej A.J., 2018, ICEIS 2, P29
   Maalej AJ, 2015, INT J COMPUT APPL T, V51, P283, DOI 10.1504/IJCAT.2015.070491
   Macías-Escrivá FD, 2013, EXPERT SYST APPL, V40, P7267, DOI 10.1016/j.eswa.2013.07.033
   Mao CY, 2007, P INT COMP SOFTW APP, P547
   Marathe S., 2019, PROC INT C VIS EMERG, P1
   Mendoza I, 2019, LECT NOTES BUS INF P, V338, P33, DOI 10.1007/978-3-030-05767-1_3
   Mendoza I, 2019, LECT NOTES COMPUT SC, V11376, P324, DOI 10.1007/978-3-030-10801-4_26
   Mezghani E, 2012, IEEE ENABL TECHNOL, P95, DOI 10.1109/WETICE.2012.81
   Mishra, 2020, SYSTEM ON CHIP SECUR, P273
   Moreno GA, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P1, DOI 10.1145/2786805.2786853
   Morin B, 2009, COMPUTER, V42, P44, DOI 10.1109/MC.2009.327
   Muccini H, 2006, J SYST SOFTWARE, V79, P1379, DOI 10.1016/j.jss.2006.02.059
   Murphy C, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P111, DOI 10.1109/ICST.2009.18
   Neidhardt E, 2019, 2019 15TH INTERNATIONAL CONFERENCE ON TELECOMMUNICATIONS (CONTEL), DOI 10.1109/contel.2019.8848566
   Nguyen TT, 2020, IEEE INT SYMP INFO, P37, DOI 10.1109/ISIT44484.2020.9174430
   Niebuhr D., 2007, SAV CBS 07, P101, DOI [10.1145/1292316.1292330, DOI 10.1145/1292316.1292330]
   Niebuhr D, 2009, INT CONF SELF SELF, P186, DOI 10.1109/SASO.2009.40
   Niebuhr D, 2009, 4TH ACM INTERNATIONAL WORKSHOP ON SERVICES INTEGRATION IN PERVASIVE ENVIRONMENTS-SIPE 09, P7
   Nimara S, 2019, INT CONF SYST THEO, P774, DOI [10.1109/ICSTCC.2019.8885799, 10.1109/icstcc.2019.8885799]
   Panasiuk O, 2019, LECT NOTES COMPUT SC, V11964, P223, DOI 10.1007/978-3-030-37487-7_19
   Pant YV, 2019, LECT NOTES COMPUT SC, V11460, P355, DOI 10.1007/978-3-030-20652-9_24
   Piel É, 2010, LECT NOTES COMPUT SC, V6435, P79, DOI 10.1007/978-3-642-16573-3_7
   Piel É, 2009, SINTER 09, P3
   Pilskalns O, 2006, PROC IEEE INT CONF S, P254
   Powell B, 2019, ADV ANAL DATA SCI, P51, DOI 10.1007/978-3-319-93299-6_4
   Prabhakar N, 2019, ADV INTELL SYST, V731, P497, DOI 10.1007/978-981-10-8848-3_47
   Rahman A, 2019, 2019 1ST INTERNATIONAL CONFERENCE ON ROBOTICS, ELECTRICAL AND SIGNAL PROCESSING TECHNIQUES (ICREST), P378, DOI [10.1109/ICREST.2019.8644065, 10.1109/icrest.2019.8644065]
   Ramirez Alain., 2008, ACM SE 46, P304
   Rashid, 2011, INVESTIGATING TESTIN
   Regan, 2019, CONCISE GUIDE SOFTWA
   Reif, 2017, TEST CASE SELECTION
   Rothermel G., 1997, ACM Transactions on Software Engineering and Methodology, V6, P173, DOI 10.1145/248233.248262
   Ruzicka J, 2019, 2019 MODERN SAFETY TECHNOLOGIES IN TRANSPORTATION (MOSATT), P134, DOI [10.1109/MOSATT48908.2019.8944093, 10.1109/mosatt48908.2019.8944093]
   Sánchez C, 2019, FORM METHOD SYST DES, V54, P279, DOI 10.1007/s10703-019-00337-w
   Santos ID, 2017, IEEE SOFTWARE, V34, P72
   Santos ID, 2017, INFORM SOFTWARE TECH, V88, P1, DOI 10.1016/j.infsof.2017.03.008
   Schieferdecker I., 2005, International Journal on Software Tools for Technology Transfer, V7, P351, DOI 10.1007/s10009-004-0165-6
   Schulz S., 2002, Testing of Communicating Systems XIV. Application to Internet Technologies and Services. IFIP TC6/WG6.1 Fourteenth International Conference on Testing of Communicating Systems (TestCom 2002), P425
   Serbanescu DA, 2008, LECT NOTES COMPUT SC, V5047, P283, DOI 10.1007/978-3-540-68524-1_20
   Shevtsov Stepan., 2019, Engineering Adaptive Software Systems, P35
   Siddalingaiah, 2006, P INT WORKSH AUT SOF, P104
   Siqueira BR, 2016, I BRAZILIAN SYMPOSIUM ON SYSTEMATIC AND AUTOMATED SOFTWARE TESTING (SAST 2016), DOI 10.1145/2993288.2993294
   Sotomayor JP, 2019, P INT COMP SOFTW APP, P356, DOI 10.1109/COMPSAC.2019.10232
   Spaseski, 2017, SURVEY MODEL BASED T, P77, DOI [10.1007/978-3-319-71734-07, DOI 10.1007/978-3-319-71734-07]
   Stepien Bernard, 2008, International Journal on Software Tools for Technology Transfer, V10, P371, DOI 10.1007/s10009-008-0082-1
   Strandberg PE, 2019, IEEE ACCESS, V7, P46434, DOI 10.1109/ACCESS.2019.2909093
   Suleiman Dima, 2017, 2017 8th International Conference on Information Technology (ICIT). Proceedings, P854, DOI 10.1109/ICITECH.2017.8079958
   Suliman D, 2006, P INT COMP SOFTW APP, P171
   Tabei F, 2020, IEEE ACCESS, V8, P11534, DOI 10.1109/ACCESS.2020.2965082
   Tamura G., 2013, SOFTWARE ENG SELF AD
   Tebes G., 2019, QUALITY INFORM COMMU, VVolume 1010, DOI [10.1007/978-3-030-29238-6_11, DOI 10.1007/978-3-030-29238-6_11]
   Thai My Josee, 2019, COMPUTATIONAL INTELL, P321
   Torjusen A.B., 2014, P 8 EUR C SOFTW ARCH, P1
   Travassos, 2015, CHALLENGES TESTING C, DOI 10.13140/RG.2.1.3361.6080
   Türk EC, 2019, 2019 MEDICAL TECHNOLOGIES CONGRESS (TIPTEKNO), P176, DOI 10.1109/tiptekno.2019.8895063
   Utting M., 2006, Practical Model-Based Testing
   Vassiliou-Gioles, 2003, P 15 IFIP INT C TEST
   Vieira, 2014, J BRAZILIAN COMPUTER, V20, DOI 10.1186/1678-4804-20-1
   Vincent J, 2002, SOFTWARE QUAL J, V10, P115, DOI 10.1023/A:1020571806877
   Wang YX, 1999, ANN SOFTW ENG, V7, P283, DOI 10.1023/A:1018990322378
   Ying Li, 2011, AM J ENG TECHNOLOGY, V11, P3686
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   yves Cunin, 2002, P INT C SOFTW ENG RE
   Zarrad Anis, 2015, Journal of Software, V10, P971, DOI 10.17706/jsw.10.8.971-990
   Zhou GJ, 2020, IEEE ACCESS, V8, P8056, DOI 10.1109/ACCESS.2020.2964391
NR 155
TC 10
Z9 10
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 555
EP 593
DI 10.1007/s11219-021-09558-x
EA MAY 2021
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000654822500002
DA 2024-07-18
ER

PT J
AU Ghafoor, MA
   Mahmood, MS
   Siddiqui, JH
AF Ghafoor, Maryam Abdul
   Mahmood, Muhammad Suleman
   Siddiqui, Junaid Haroon
TI Extending symbolic execution for automated testing of stored procedures
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automated testing; Symbolic execution; Stored procedures; Database
ID GENERATION; COVERAGE; CODE
AB Stored procedures in database management systems are often used to implement complex business logic. Correctness of these procedures is critical for flawless working of the system. However, testing them remains difficult due to many possible database states and constraints on data. This leads to mostly manual testing. Newer tools offer automated execution for unit testing of stored procedures but the test cases are still written manually. We propose an approach of using dynamic symbolic execution for generating automated test cases and corresponding database states for stored procedures. We model the constraints on data imposed by the schema and the SQL statements, treating values in database tables as symbolic. We use SMT solver to find values that will drive the stored procedure on a particular execution path. We instrument the internal execution plans generated by PostgreSQL to extract constraints. We use Z3 to generate test cases consisting of table data and procedure inputs. Our evaluation using stored procedures from a large business application and various GitHub repositories quantifies the evidence of effectiveness of our technique by generating test cases that lead to schema constraint violations and user-defined exceptions.
C1 [Ghafoor, Maryam Abdul; Siddiqui, Junaid Haroon] Lahore Univ Management Sci, Lahore, Pakistan.
   [Mahmood, Muhammad Suleman] Univ Illinois, Champaign, IL USA.
C3 Lahore University of Management Sciences; University of Illinois System;
   University of Illinois Urbana-Champaign
RP Ghafoor, MA (corresponding author), Lahore Univ Management Sci, Lahore, Pakistan.
EM 15030036@lums.edu.pk; msm6@illinois.edu; junaid.siddiqui@lums.edu.pk
CR [Anonymous], 2006, P 13 ACM C COMPUTER
   [Anonymous], 2010, Proceedings of the 19th international symposium on Software testing and analysis, DOI 10.1145/1831708.1831732
   [Anonymous], 2007, P INT C DAT ENG, DOI DOI 10.1109/ICDE.2007.367896
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Bush WR, 2000, SOFTWARE PRACT EXPER, V30, P775, DOI 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H
   Cadar C, 2005, LECT NOTES COMPUT SC, V3639, P2
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Castelein J., 2018, ACM IEEE INT C SOFTW, P1230
   Chan M.Y., 1999, Proceedings of the 2nd International Symposium on Cooperative Database Systems for Advanced Applications, P363
   Chen T, 2013, FUTURE GENER COMP SY, V29, P1758, DOI 10.1016/j.future.2012.02.006
   Clarke L. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P215, DOI 10.1109/TSE.1976.233817
   Clarke L.A, 1976, THESIS
   de la Riva C., 2010, AST, P67
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deng YT, 2005, PROC INT CONF SOFTW, P78, DOI 10.1145/1062455.1062486
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Elkarablieh Bassem., 2007, ASE 07 P 22 IEEEACM, P64
   Emmi M., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P151
   Ghafoor MA, 2016, IEEE INT CONF SOFTW, P146, DOI 10.1109/ICST.2016.25
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P47
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Suárez-Cabal MJ, 2017, AUTOMAT SOFTW ENG, V24, P719, DOI 10.1007/s10515-017-0212-7
   Khalek S. A., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P50, DOI 10.1109/ICST.2011.21
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Li C, 2010, P 3 INT WORKSH TEST
   Mahmood MS, 2016, IEEE INT CONF AUTOM, P519, DOI 10.1145/2970276.2970318
   Marcozzi M., 2014, P 6 INT WORKSH CONST, P12
   Marcozzi M, 2015, SCI COMPUT PROGRAM, V105, P44, DOI 10.1016/j.scico.2015.03.005
   Marcozzi M, 2013, IEEE INT WORK C SO, P179, DOI 10.1109/SCAM.2013.6648200
   Matthew N.e., 2005, Beginning Databases with PostgreSQL - From Novice to Professional, VSecond
   McMinn P., 2015, TECH REP
   Mohamed Mohamed A., 2014, International Journal of Computer and Information Technology, V3, P598
   Pan K., 2011, DBTEST, P4
   Pan K, 2015, AUTOMAT SOFTW ENG, V22, P439, DOI 10.1007/s10515-014-0158-y
   Pan K, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2491529
   Person S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P504
   Ramos David A., 2011, P 23 INT C COMP AID, P669, DOI [DOI 10.1007/978-3-642-22110-1_55, 10.1007/978-3-642]
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Seo C, 2008, LECT NOTES COMPUT SC, V5282, P97
   Siddiqui J. H., 2010, 2010 2nd International Conference on Software Technology and Engineering (ICSTE 2010), P405, DOI 10.1109/ICSTE.2010.5608866
   Siddiqui JH, 2012, P 27 S APPL COMP SAC
   Siddiqui JH, 2012, P 27 ANN C OBJ OR PR
   Silberschatz A., 1997, Database system concepts, V4
   Tsumura K, 2016, IEEE ICST WORKSHOP, P92, DOI 10.1109/ICSTW.2016.19
   Tuya J, 2010, SOFTW TEST VERIF REL, V20, P237, DOI 10.1002/stvr.424
   Veanes M, 2009, LECT NOTES COMPUT SC, V5885, P49, DOI 10.1007/978-3-642-10373-5_3
   Wei K, 2006, 2006 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P191
   Yang G., 2012, P 2012 INT S SOFTW T, P144, DOI DOI 10.1145/2338965.2336771
   Zhang B, 2001, P INT COMP SOFTW APP, P161, DOI 10.1109/CMPSAC.2001.960612
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 52
TC 3
Z9 3
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 853
EP 887
DI 10.1007/s11219-019-09453-6
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000538379800018
DA 2024-07-18
ER

PT J
AU Guidara, I
   Guermouche, N
   Chaari, T
   Jmaiel, M
AF Guidara, Ikbel
   Guermouche, Nawal
   Chaari, Tarak
   Jmaiel, Mohamed
TI Time-aware selection approach for service composition based on pruning
   and improvement techniques
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Service selection; QoS constraints; Temporal constraints; Optimization;
   Pruning; Time-dependent QoS
ID QOS-AWARE; DECOMPOSITION
AB In service-oriented environments, abstract business processes can be implemented by concrete services to build complex applications. Given global user constraints, service selection allows to identify the best combination of services with respect to the business constraints. Generally, the selection problem is challenging, but it is particularly complex when dealing with QoS (quality of service) values, which can change during the time associated with temporal constraints. Indeed, these constraints make the selection problem heavily constrained, which can present a barrier for enabling effective service selection. Unlike static QoS values which have been deeply studied in the existing service selection approaches, time-dependent QoS associated with temporal constraints are insufficiently taken into consideration. Moreover, existing approaches cannot handle heavily constrained problems and usually do not provide strategies to detect the source of failure in order to enhance the selection problem in case there is no solution. In this paper, we introduce a new service selection approach, while considering time-dependent QoS values associated with temporal constraints. First, pruning techniques are proposed. The aim of the pruning process is twofold: (1) it allows for reducing the search space and thus, enhancing the efficiency of the selection process; (2) it allows for improving the selection problem by detecting at earlier stages the possible causes of failure, even before the selection process. Second, based on the pruning phase, improvement techniques are proposed to identify possible actions for finding a solution. Third, an exact and an approximate service selection algorithms under several constraints are given. Finally, we demonstrate the effectiveness of our approach through experimental results.
C1 [Guidara, Ikbel] Claude Bernard Lyon 1 Univ, LIRIS, Lyon, France.
   [Guermouche, Nawal] Univ Toulouse, INSA, UT1, LAAS,CNRS, Toulouse, France.
   [Chaari, Tarak] Univ Sfax, Natl Sch Engineers Sfax, ReDCAD, Sfax, Tunisia.
   [Jmaiel, Mohamed] Digital Res Ctr Sfax, Sfax, Tunisia.
C3 Universite Claude Bernard Lyon 1; Institut National des Sciences
   Appliquees de Lyon - INSA Lyon; Universite Federale Toulouse
   Midi-Pyrenees (ComUE); Universite de Toulouse; Institut National des
   Sciences Appliquees de Toulouse; Centre National de la Recherche
   Scientifique (CNRS); Universite Toulouse 1 Capitole; Universite de Sfax;
   Ecole Nationale dIngenieurs de Sfax (ENIS); Universite de Sfax; Centre
   de Recherche en Numerique de Sfax (CRNS)
RP Guidara, I (corresponding author), Claude Bernard Lyon 1 Univ, LIRIS, Lyon, France.
EM ikbel.guidara@liris.cnrs.fr; nawal.guermouche@laas.fr;
   tarak.chaari@redcad.org; mohamed.jmaiel@enis.rnu.tn
CR [Anonymous], 2010, P 19 INT C WORLD WID, DOI DOI 10.1145/1772690.1772693
   Arbab F., 2013, P WEB SERV FORM METH, V7843, P118
   Arbab F., 2012, INT WORKSH SEM SEARC, P2
   Ardagna D, 2007, IEEE T SOFTWARE ENG, V33, P369, DOI 10.1109/TSE.2007.1011.
   Barakat L., 2011, Proceedings of the 2011 IEEE International Conference on Web Services (ICWS 2011), P227, DOI 10.1109/ICWS.2011.25
   Ben Hassine A, 2006, LECT NOTES COMPUT SC, V4273, P130
   Canfora G, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1069
   Cheikhrouhou S, 2014, 2014 IEEE 23RD INTERNATIONAL WETICE CONFERENCE (WETICE), P326, DOI 10.1109/WETICE.2014.75
   Chen LL, 2011, LECT NOTES COMPUT SC, V7084, P532, DOI 10.1007/978-3-642-25535-9_38
   Chen LH, 2016, IMMUNOTHERAPY-UK, V8, P223, DOI 10.2217/imt.15.105
   Chen Y, 2015, IEEE T SERV COMPUT, V8, P384, DOI 10.1109/TSC.2014.2381493
   Comuzzi M, 2005, NINTH IEEE INTERNATIONAL EDOC ENTERPRISE COMPUTING CONFERENCE, PROCEEDINGS, P70, DOI 10.1109/EDOC.2005.4
   Guermouche N, 2012, COLLABORATECOM, P117, DOI 10.4108/icst.collaboratecom.2012.250441
   Guidara I, 2015, INT J WEB SERV RES, V12, P1, DOI 10.4018/IJWSR.2015040101
   Guidara I, 2014, 2014 IEEE 21ST INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS 2014), P9, DOI 10.1109/ICWS.2014.15
   Guidara I, 2012, IEEE ENABL TECHNOL, P411, DOI 10.1109/WETICE.2012.46
   He Q, 2014, IEEE T SOFTWARE ENG, V40, P192, DOI 10.1109/TSE.2013.2297911
   Ivanovic D, 2014, LECT NOTES COMPUT SC, V8831, P394, DOI 10.1007/978-3-662-45391-9_29
   Jiuyun Xu, 2008, 2008 IEEE International Conference on Web Services (ICWS), P238, DOI 10.1109/ICWS.2008.16
   Kattepur A, 2011, LECT NOTES COMPUT SC, V7084, P77, DOI 10.1007/978-3-642-25535-9_6
   Klöpper B, 2010, LECT NOTES COMPUT SC, V6470, P635, DOI 10.1007/978-3-642-17358-5_49
   Lécué F, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P469, DOI 10.1109/ICWS.2009.88
   Li J, 2011, ENRGY PROCED, V4, P2824, DOI 10.1016/j.egypro.2011.02.187
   Liang HL, 2013, LECT NOTES COMPUT SC, V8181, P309, DOI 10.1007/978-3-642-41154-0_23
   Lianyong Qi, 2010, 2010 IEEE International Conference on Web Services (ICWS), P34, DOI 10.1109/ICWS.2010.62
   Ma H, 2013, IEEE T SERV COMPUT, V6, P20, DOI 10.1109/TSC.2011.21
   Mardukhi F, 2013, APPL SOFT COMPUT, V13, P3409, DOI 10.1016/j.asoc.2012.12.033
   Ponge J, 2010, ACM T SOFTW ENG METH, V19, DOI 10.1145/1734229.1734230
   Pop CB, 2011, INT SYMP SYMB NUMERI, P449, DOI 10.1109/SYNASC.2010.35
   Rapti E, 2016, P IEEE I C SERV COMP, P868, DOI 10.1109/SCC.2016.126
   Risse T., 2009, P 18 INT C WORLD WID, P881, DOI DOI 10.1145/1526709.1526828
   Rosenberg F, 2009, IEEE INT ENTERP DIST, P151, DOI 10.1109/EDOC.2009.14
   San-Yih Hwang, 2008, IEEE Transactions on Services Computing, V1, P104, DOI 10.1109/TSC.2008.2
   Suleiman B, 2009, 2009 IEEE CONGRESS ON SERVICES (SERVICES-1 2009), VOLS 1 AND 2, P392, DOI 10.1109/SERVICES-I.2009.15
   Sun SX, 2012, INFORM SCIENCES, V199, P138, DOI 10.1016/j.ins.2012.02.061
   Trummer I, 2014, IEEE T SOFTWARE ENG, V40, P167, DOI 10.1109/TSE.2013.61
   Wagner F., 2012, Proceedings of the 2012 IEEE 19th International Conference on Web Services (ICWS), P234, DOI 10.1109/ICWS.2012.40
   YOON K.P., 1995, QUANTITATIVE APPL SO
   Yu Q, 2010, IEEE T SERV COMPUT, V3, P16, DOI 10.1109/TSC.2010.7
   Yu T, 2007, ACM T WEB, V1, DOI 10.1145/1232722.1232728
   Zemni MA, 2010, LECT NOTES COMPUT SC, V6470, P596, DOI 10.1007/978-3-642-17358-5_44
   Zeng LZ, 2004, IEEE T SOFTWARE ENG, V30, P311, DOI 10.1109/TSE.2004.11
NR 42
TC 4
Z9 4
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1245
EP 1277
DI 10.1007/s11219-019-09473-2
EA DEC 2019
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000504616900001
DA 2024-07-18
ER

PT J
AU Florea, R
   Stray, V
AF Florea, Raluca
   Stray, Viktoria
TI The skills that employers look for in software testers
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software-testingskills; Software-testingskill requirements; Software
   industry needs; Empirical software engineering; Human aspects of
   software engineering
ID TESTING PRACTICES; FRAMEWORK
AB Software testing is an integral part of software development that provides better-quality products and user experiences and helps build the reputation of software companies. Though software testers perform a role that requires specific tasks and skills, in-depth studies of software testers lag behind research studies of other roles within software development teams. In this paper, we aim to create a profile of testers by presenting an empirical analysis of the skills the industry currently needs. We analysed data from 400 job adverts in 33 countries. We mapped the skills on a taxonomy comprising test-related, technical, and domain-specific skills. In addition, we looked at the demand for educational attainment, relevant certifications, and previous experience requirements. Our findings show that employers are mostly interested in skills related to test planning and design, test automation, functional testing, performance testing, and progress reporting. One third of the job advertisers were interested in people with the skills to operate test execution tools. Selenium was the testing tool most in demand. The testers must have strong technical abilities, including programming skills in Java, C#, and SQL. Also, they must handle project management tasks such as estimation, risk management, and quality assurance. Employers do not emphasise domain-specific knowledge, which indicates that they consider testing skills portable across industries. One in seven job adverts asks for a software testing certification. Our study helps clarify the complexity of the testing job and outlines the capabilities one needs to fulfil a software tester's responsibilities.
C1 [Florea, Raluca; Stray, Viktoria] Univ Oslo, Gaustadalleen 23 B, N-0373 Oslo, Norway.
C3 University of Oslo
RP Florea, R (corresponding author), Univ Oslo, Gaustadalleen 23 B, N-0373 Oslo, Norway.
EM ralucamf@ifi.uio.no; stray@ifi.uio.no
RI Stray, Viktoria/E-9563-2016
OI Stray, Viktoria/0000-0002-6032-2074
CR Ahmed F, 2012, IT PROF, V14, P44, DOI 10.1109/MITP.2012.7
   [Anonymous], P 7 INT WORKSH AUT S
   [Anonymous], P 22 ACM SIGSOFT INT
   Aranda J., 2009, P 31 INT C SOFTW ENG
   Association I.S., 1990, 6101990IEEE ASS IS
   Avritzer A, 1996, SOFTWARE PRACT EXPER, V26, P613, DOI 10.1002/(SICI)1097-024X(199606)26:6<613::AID-SPE23>3.0.CO;2-5
   Babinet E., 2008, AGILE 08 C
   Bergersen GR, 2014, IEEE T SOFTWARE ENG, V40, P1163, DOI 10.1109/TSE.2014.2348997
   Black R., 2009, ADV SOFTWARE TESTING, V1, P978
   Black R., 2009, ADV SOFTWARE TESTING, V2, P978
   Byrd TA, 2001, DECISION SCI, V32, P21, DOI 10.1111/j.1540-5915.2001.tb00952.x
   Capretz L.F., 2010, MAKING SENSE SOFTWAR, V12
   Capretz LF, 2015, COMPUT HUM BEHAV, V52, P373, DOI 10.1016/j.chb.2015.05.050
   Cohn M, 2003, COMPUTER, V36, P74, DOI 10.1109/MC.2003.1204378
   Collins E., 2012, GLOB SOFTW ENG ICGSE
   Commision I.E, 2010, 247652010 ISOIECIEEE
   DAVIS FD, 1993, INT J MAN MACH STUD, V38, P475, DOI 10.1006/imms.1993.1022
   Dias-Neto AC, 2017, SOFTWARE QUAL J, V25, P1145, DOI 10.1007/s11219-016-9329-3
   Dietrich C., 2012, P 2012 WORKSH MOD SY
   Dromey RG, 2003, SOFTWARE QUAL J, V11, P197, DOI 10.1023/A:1025162610079
   Easterbrook S, 2000, ICSE 00 P C FUT SOFT
   Ebert C, 2001, IEEE SOFTWARE, V18, P62, DOI 10.1109/52.914748
   Ebert C, 2009, IEEE SOFTWARE, V26, P88, DOI 10.1109/MS.2009.144
   EDWARDS RC, 1976, J HUM RESOUR, V11, P51, DOI 10.2307/145073
   Faraj S, 2000, MANAGE SCI, V46, P1554, DOI 10.1287/mnsc.46.12.1554.12072
   Florea R., 2018, INT C AG SOFTW DEV
   Florea R., 2019, P 14 INT C GLOB SOFT
   Flottau J., 2019, AIRLINES STRUGGLE MI
   Forward A., 2002, P 2002 ACM S DOC ENG
   Garousi V., 2017, P 21 INT C EV ASS SO
   Garousi V, 2013, J SYST SOFTWARE, V86, P1354, DOI 10.1016/j.jss.2012.12.051
   Glass RL, 2006, IEEE SOFTWARE, V23, P55, DOI 10.1109/MS.2006.113
   Goodhart CAE, 2013, INT J CENT BANK, V9, P109
   ISO/IEC, 2013, 2911912013 ISOIECIEE
   ISTQB, 2015, GLOSS TEST TERMS
   ISTQB F, 2011, FDN LEV SYLL VERS 2
   Jain A., 2014, IJEMS, V1, P8
   Jiang J, 2000, J SYST SOFTWARE, V52, P3, DOI 10.1016/S0164-1212(99)00128-4
   Juristo N, 2006, IEEE SOFTWARE, V23, P19, DOI 10.1109/MS.2006.104
   Karlström D, 2005, SOFTW TEST VERIF REL, V15, P145, DOI 10.1002/stvr.317
   Kassab M, 2017, IEEE SOFTWARE, V34, P46, DOI 10.1109/MS.2017.3571582
   Kasurinen Jussi, 2010, Advances in Software Engineering, DOI 10.1155/2010/620836
   Kettunen V., 2010, P 19 INT S SOFTW TES
   Laporte C.Y., 2014, QUALITY INFORM COMMU
   Lee J, 2012, IET SOFTW, V6, P275, DOI 10.1049/iet-sen.2011.0066
   Lethbridge TC, 2000, COMPUTER, V33, P44, DOI 10.1109/2.841783
   Lindstrom L, 2004, INFORM SYST MANAGE, V21, P41, DOI 10.1201/1078/44432.21.3.20040601/82476.7
   Mahmud J, 2014, SOFTW TEST VERIF REL, V24, P61, DOI 10.1002/stvr.1484
   Mathur S, 2010, INT J COMPUT APPL, V1, P29
   Moe, 2016, INT C PROD FOC SOFTW
   Moe N.B., 2015, GLOBAL SOFTWARE ENG
   Neely S., 2013, AG C AGILE 2013
   Nguyen H.Q., 2001, TESTING APPL WEB TES
   Nirpal P. B., 2011, INT J COMPUTER SCI E, V3, P204
   Norris G., 2019, AVIATION WEEK SPACE
   Ortu Marco, 2015, P 11 INT C PRED MOD, P1
   Patel B., 2014, INT J CURR ENG TECHN, V4, P3642
   Pham N. C., 2019, WAS BOEINGS COMPENSA
   Pinkster I., 2006, SUCCESSFUL TEST MANA
   Poon PL, 2011, SOFTWARE QUAL J, V19, P141, DOI 10.1007/s11219-010-9109-4
   Reidy, 2007, STAT MATHS PSYCHOL
   Rosenkranz P., 2015, P 2015 WORKSH IOT CH
   Shahamiri S.R., 2009, SOFTW ENG ADV ICSEA
   Stevenson J, 2018, SOFTWARE QUAL J, V26, P321, DOI 10.1007/s11219-017-9364-8
   Stray V., 2017, INT C AG SOFTW DEV
   Stray V.G., 2013, 2013 ACM IEEE INT S
   Stray V.G., 2011, INT C AG SOFTW DEV
   Strode D.E., 2012, ACIS 2012 LOCATION L
   Tankard Colin, 2016, Network Security, V2016, P5, DOI 10.1016/S1353-4858(16)30056-3
   Toroi T., 2013, SOFTW MAINT ICSM 29
   Wiklund K., 2013, INT C PROD FOC SOFTW
   Wiklund K., 2014, SOFTWARE TESTING VER
   Yeatts D.E., 1998, High-performing self-managed work teams: A comparison of theory to practice
   [No title captured]
NR 74
TC 14
Z9 15
U1 2
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2019
VL 27
IS 4
BP 1449
EP 1479
DI 10.1007/s11219-019-09462-5
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA KP9TA
UT WOS:000516573400004
DA 2024-07-18
ER

PT J
AU Menezes, J
   Gusmao, C
   Moura, H
AF Menezes, Julio, Jr.
   Gusmao, Cristine
   Moura, Hermano
TI Risk factors in software development projects: a systematic literature
   review
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Software risk management; Risk factors; Project management; Systematic
   literature review
ID MANAGEMENT; PERFORMANCE; QUALITY; SUCCESS; IMPACT
AB Risks are an inherent part of any software project. The presence of risks in environments of software development projects requires the perception so that the associated factors do not lead projects to failure. The correct identification and monitoring of these factors can be decisive for the success of software development projects and software quality. However, in practice, risk management in software development projects is still often neglected and one of the reasons is due to the lack of knowledge of risk factors that promoted a low perception of them in the environment. This paper aims to identify and to map risk factors in environments of software development projects. We conducted a systematic literature review through a database search, as well as we performed an assessment of quality of the selected studies. All this process was conducted through a research protocol. We identified 41 studies. In these works, we extracted and classified risk factors according to the software development taxonomy developed by Software Engineering Institute (SEI). In total, 148 different risk factors were categorized. The found evidences suggest that risk factors relating to software requirements are the most recurrent and cited. In addition, we highlight that the most mentioned risk factors were the lack of technical skills by the staff. Therefore, the results converged to the need for more studies on these factors as fundamental items for reduction of failure level of a software development project.
C1 [Menezes, Julio, Jr.; Moura, Hermano] Fed Univ Pernambuco UFPE, Ctr Informat CIn, Recife, PE, Brazil.
   [Gusmao, Cristine] Fed Univ Pernambuco UFPE, CTG, Dept Biomed Engn DEBM, Recife, PE, Brazil.
C3 Universidade Federal de Pernambuco; Universidade Federal de Pernambuco
RP Menezes, J (corresponding author), Fed Univ Pernambuco UFPE, Ctr Informat CIn, Recife, PE, Brazil.
EM jvmj@cin.ufpe.br
RI Jr., Julio Menezes/AAR-7599-2021
OI Martins Gomes de Gusmao, Cristine/0000-0001-8831-217X; Menezes Junior,
   Julio/0000-0002-2460-1148
FU Brazilian Ministry of Health
FX The authors would like to thank the Brazilian Ministry of Health for the
   support given to this work.
CR Ai-guo Tang, 2010, 2010 International Conference on Computer and Communication Technologies in Agriculture Engineering (CCTAE 2010), P328, DOI 10.1109/CCTAE.2010.5544587
   Alam A. U., 2012, International Journal of Digital Content Technology and its Applications, V6, P27
   [Anonymous], INT C INF SYST TECHN
   [Anonymous], CMUSEI93TR06
   [Anonymous], CONTECSI INT C INF S
   [Anonymous], RISK MAN GUID DOD AC
   [Anonymous], SCIMAGO J COUNTRY RA
   [Anonymous], 2007, GUIDELINES PERFORMIN
   [Anonymous], MANAGING RISK METHOD
   [Anonymous], RISK MANAGEMENT GUID
   [Anonymous], J THEORETICAL APPL I
   [Anonymous], PROPOSTA TRATAMENTO
   [Anonymous], COCHRANE HDB SYSTEMA
   [Anonymous], 2001, SOFTWARE ENG RISK MA
   [Anonymous], 1989, Software risk management tutorial
   [Anonymous], SOLID SOFTWARE
   [Anonymous], 2017, Google Scholar Citation
   [Anonymous], UNDERSTANDING PARETO
   [Anonymous], METODO BRASILIANO AV
   Bannerman PL, 2015, INT HANDB INFORM SYS, P1119, DOI 10.1007/978-3-319-05915-0_20
   Biolchini J., 2005, Systematic review in software engineering(05)
   BOEHM BW, 1991, IEEE SOFTWARE, V8, P32, DOI 10.1109/52.62930
   Charette R. N., 1989, SOFTWARE ENG RISK AN
   Charette RN, 2005, IEEE SPECTRUM, V42, P42, DOI 10.1109/MSPEC.2005.1502528
   de Bakker K, 2010, INT J PROJ MANAG, V28, P493, DOI 10.1016/j.ijproman.2009.07.002
   DeMarco T., 1997, The deadline: A novel about project management
   Dorofee A., 1996, CONTINUOUS RISK MANA
   FAIRLEY R, 1994, IEEE SOFTWARE, V11, P57, DOI 10.1109/52.281716
   Fan CF, 2004, J SYST SOFTWARE, V73, P193, DOI 10.1016/j.jss.2003.12.032
   Fu Y, 2012, INT J PROJ MANAG, V30, P363, DOI 10.1016/j.ijproman.2011.08.004
   Gerrard P., 2002, Risk-Based E-Business Testing
   Han WM, 2007, J SYST SOFTWARE, V80, P42, DOI 10.1016/j.jss.2006.04.030
   Heldman K., 2010, Project Manager's Spotlight on Risk Management
   Hillson D., 2002, 5 EUROPEAN PROJECT M, P1
   Ivarsson M, 2011, EMPIR SOFTW ENG, V16, P365, DOI 10.1007/s10664-010-9146-4
   Jiang J, 2000, J SYST SOFTWARE, V52, P3, DOI 10.1016/S0164-1212(99)00128-4
   Jiang JJ, 2001, IEEE T ENG MANAGE, V48, P46, DOI 10.1109/17.913165
   Jorgensen M, 1999, ADV ENG SOFTW, V30, P907, DOI 10.1016/S0965-9978(99)00015-0
   Kerzner H., 2017, PROJECT MANAGEMENT S
   Khan Amjad Ali, 2014, Case Rep Pathol, V2014, P509086, DOI 10.1155/2014/509086
   López C, 2012, PROC TECH, V5, P437, DOI 10.1016/j.protcy.2012.09.048
   MARCH JG, 1987, MANAGE SCI, V33, P1404, DOI 10.1287/mnsc.33.11.1404
   Munir H, 2016, EMPIR SOFTW ENG, V21, P684, DOI 10.1007/s10664-015-9380-x
   Neves SM, 2014, INT J PROJ MANAG, V32, P125, DOI 10.1016/j.ijproman.2013.02.007
   Nurdiani I., 2011, 2011 Sixth IEEE International Conference on Global Software Engineering Workshop, P36, DOI 10.1109/ICGSE-W.2011.16
   Pang QH, 2009, ICCSSE 2009: PROCEEDINGS OF 2009 4TH INTERNATIONAL CONFERENCE ON COMPUTER SCIENCE & EDUCATION, P538, DOI 10.1109/ICCSE.2009.5228371
   Pressman R.S., 2005, Software engineering: a Practitioner's Approach
   Raz T, 2002, R&D MANAGE, V32, P101, DOI 10.1111/1467-9310.00243
   Reeves JD, 2013, ENG MANAG J, V25, P3, DOI 10.1080/10429247.2013.11431970
   Salmeron JL, 2012, IEEE T SOFTWARE ENG, V38, P439, DOI 10.1109/TSE.2011.8
   Sarigiannidis L, 2014, INT J PROJ MANAG, V32, P1073, DOI 10.1016/j.ijproman.2013.11.001
   Savolainen P, 2012, INT J PROJ MANAG, V30, P458, DOI 10.1016/j.ijproman.2011.07.002
   Subramanian GH, 2007, J SYST SOFTWARE, V80, P616, DOI 10.1016/j.jss.2006.06.014
   van Loon Han, 2007, IT Professional, V9, P30, DOI 10.1109/MITP.2007.104
   Vasconcellos FJS, 2017, J SYST SOFTWARE, V123, P45, DOI 10.1016/j.jss.2016.09.030
   Wallace L, 2004, INFORM MANAGE-AMSTER, V42, P115, DOI 10.1016/j.im.2003.12.007
   Wallace L, 2004, DECISION SCI, V35, P289, DOI 10.1111/j.00117315.2004.02059.x
   Wallace L, 2004, COMMUN ACM, V47, P68, DOI 10.1145/975817.975819
   Wysocki R.K., 2011, EFFECTIVE PROJECT MA
   Zhang H, 2011, INFORM SOFTWARE TECH, V53, P625, DOI 10.1016/j.infsof.2010.12.010
NR 60
TC 25
Z9 28
U1 6
U2 72
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1149
EP 1174
DI 10.1007/s11219-018-9427-5
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA IZ5MS
UT WOS:000487128400008
DA 2024-07-18
ER

PT J
AU Ma, T
   Ali, S
   Yue, T
   Elaasar, M
AF Ma, Tao
   Ali, Shaukat
   Yue, Tao
   Elaasar, Maged
TI Testing self-healing cyber-physical systems under uncertainty: a
   fragility-oriented approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Cyber-physical systems; Uncertainty; Self-healing; Model execution;
   Reinforcement learning
AB As an essential feature of smart cyber-physical systems (CPSs), self-healing behaviors play a major role in maintaining the normality of CPSs in the presence of faults and uncertainties. It is important to test whether self-healing behaviors can correctly heal faults under uncertainties to ensure their reliability. However, the autonomy of self-healing behaviors and impact of uncertainties make it challenging to conduct such testing. To this end, we devise a fragility-oriented testing approach, which is comprised of two novel algorithms: fragility-oriented testing (FOT) and uncertainty policy optimization (UPO). The two algorithms utilize the fragility, obtained from test executions, to learn the optimal policies for invoking operations and introducing uncertainties, respectively, to effectively detect faults. We evaluated their performance by comparing them against a coverage-oriented testing (COT) algorithm and a random uncertainty generation method (R). The evaluation results showed that the fault detection ability of FOT+UPO was significantly higher than the ones of FOT+R, COT+UPO, and COT+R, in 73 out of 81 cases. In the 73 cases, FOT+UPO detected more than 70% of faults, while the others detected 17% of faults, at the most.
C1 [Ma, Tao; Ali, Shaukat; Yue, Tao] Simula Res Lab, POB 134, N-1325 Lysaker, Norway.
   [Ma, Tao] Univ Oslo, POB 1072, N-0316 Oslo, Norway.
   [Elaasar, Maged] Carleton Univ, 1125 Colonel By Dr, Ottawa, ON K1S 5B6, Canada.
C3 University of Oslo; Carleton University
RP Yue, T (corresponding author), Simula Res Lab, POB 134, N-1325 Lysaker, Norway.
EM taoma@simula.no; shaukat@simula.no; tao@simula.no; melaasar@gmail.com
RI yue, tao/H-6783-2013
OI Yue, Tao/0000-0003-3262-5577
FU Research Council of Norway (RCN) under MBT4CPS project [240013/O70]; RCN
   [240024/F20]; RFF Hovedstaden [239063]; Certus SFI; EU [645463]; H2020 -
   Industrial Leadership [645463] Funding Source: H2020 - Industrial
   Leadership
FX This research is funded by the Research Council of Norway (RCN) under
   MBT4CPS project (grant no. 240013/O70). Tao Yue and Shaukat Ali are also
   supported by the RCN funded ZenConfigurator project (grant no.
   240024/F20), RFF Hovedstaden funded MBE-CR project (grant no number.
   239063), and Certus SFI and EU Horizon 2020 funded U-Test project (grant
   no. 645463).
CR Ali S, 2013, IEEE T SOFTWARE ENG, V39, P1376, DOI 10.1109/TSE.2013.17
   [Anonymous], P 3 WORKSH MOD DRIV
   [Anonymous], 2015, SIGSOFT SOFTW ENG NO
   [Anonymous], 2011, DAGST SEM P
   [Anonymous], 2016 ECLIPSECON EUR
   [Anonymous], 2018, SOFTW SYST MODEL
   [Anonymous], ROY SOC CH
   [Anonymous], 2017, TECHNICAL REPORT
   Anzai Y., 2012, Pattern recognition machine learning
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Aronson J.E., 2005, DECIS SUPPORT SYST, V4
   Arulkumaran Kai, 2017, ARXIV PREPRINT ARXIV
   Asadollah SA, 2015, LECT NOTES COMPUT SC, V9447, P194, DOI 10.1007/978-3-319-25945-1_12
   de Vries R., 2000, INT J SOFTW TOOLS TE, V2, P382
   Demuth Birgit., 2009, Proceedings of the Russian-German Workshop Innovation Information Technologies: theory and practice, P687
   Duan Y, 2016, PR MACH LEARN RES, V48
   Enoiu EP, 2016, IEEE INT CONF SOFTW, P1, DOI 10.1109/ICST.2016.15
   Esfahani Naeem, 2013, Uncertainty in SelfAdaptive Software Systems, P214, DOI [DOI 10.1007/978-3-642-35813-59, DOI 10.1007/978-3-642-35813-5_9]
   Fredericks EM, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P17, DOI 10.1145/2593929.2593937
   GLYNN PW, 1989, MANAGE SCI, V35, P1367, DOI 10.1287/mnsc.35.11.1367
   Groce A., 2012, Proceedings of the 2012 IEEE 23rd International Symposium on Software Reliability Engineering (ISSRE), P161, DOI 10.1109/ISSRE.2012.1
   HESTENES MR, 1952, J RES NAT BUR STAND, V49, P409, DOI 10.6028/jres.049.044
   Kaelbling LP, 1996, J ARTIF INTELL RES, V4, P237, DOI 10.1613/jair.301
   Kakade S. M., 2002, INT C MACH LEARN
   Larsen K. G., 2004, Formal Approaches to Software Testing. 4th International Workshop, FATES 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol.3395), P79
   Li Y., 2017, ARXIV
   Ma T, 2017, LECT NOTES COMPUT SC, V10533, P3, DOI 10.1007/978-3-319-67549-7_1
   Mooney C. Z., 1993, Bootstrapping: A Nonparametric Approach to Statistical Inference
   Schulman J, 2015, PR MACH LEARN RES, V37, P1889
   Schupp S, 2015, LECT NOTES COMPUT SC, V9361, P8, DOI 10.1007/978-3-319-25141-7_2
   Sutton R., 1998, Reinforcement Learning: An Introduction
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Veanes M, 2006, LECT NOTES COMPUT SC, V4262, P240
   Wohlin C., 2012, Experimentation in Software Engineering
   Yang Wenhua., 2014, Proceedings of the 29th ACM/IEEE international conference on Automated software engineering, P199
   Yegnanarayana B., 2009, ARTIFICIAL NEURAL NE
   Zhang MS, 2015, SPRINGERPLUS, V4, DOI 10.1186/s40064-015-1192-3
   Zheng X, 2015, 2015 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR SMART CYBER-PHYSICAL SYSTEMS (SESCPS), P15, DOI 10.1109/SEsCPS.2015.11
NR 38
TC 13
Z9 14
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 615
EP 649
DI 10.1007/s11219-018-9437-3
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500006
DA 2024-07-18
ER

PT J
AU Barbour, L
   An, L
   Khomh, F
   Zou, Y
   Wang, SH
AF Barbour, Liliane
   An, Le
   Khomh, Foutse
   Zou, Ying
   Wang, Shaohua
TI An investigation of the fault-proneness of clone evolutionary patterns
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Clone genealogies; Fault-proneness; Metrics
ID CODE; SYSTEM; SUITE
AB Two identical or similar code fragments form a clone pair. Previous studies have identified cloning as a risky practice. Therefore, a developer needs to be aware of any clone pairs in order to properly propagate any changes between clones. A clone pair may experience many changes during the creation and maintenance of a software system. A change can either maintain or remove the similarity between clones in a clone pair. If a change maintains the similarity between clones, the clone pair is left in a consistent state. When a change makes the clones no longer similar, the clone pair is left in an inconsistent state. The set of states and changes experienced by clone pairs over time form an evolution history known as a clone genealogy. In this paper, we examine clone genealogies to identify fault-prone patterns of states and changes. We explore the use of clone genealogy information in fault prediction. We conduct a quasi-experiment with four long-lived software systems (i.e., Apache Ant, ArgoUML, JEdit, Maven) and identify clones using the NiCad and iClones clone detection tools. Overall, we find that the size of the clone can impact the fault-proneness of a clone pair. However, there is no clear impact of the time interval between changes to a clone pair on the fault-proneness of the clone pair. We also discover that adding clone genealogy information can increase the explanatory power of fault prediction models.
C1 [Barbour, Liliane; Zou, Ying] Queens Univ, Dept Elect & Comp Engn, Kingston, ON, Canada.
   [An, Le; Khomh, Foutse] Ecole Polytech Montreal, SWAT, Montreal, PQ, Canada.
   [Wang, Shaohua] Queens Univ, Sch Comp, Kingston, ON, Canada.
C3 Queens University - Canada; Universite de Montreal; Polytechnique
   Montreal; Queens University - Canada
RP Khomh, F (corresponding author), Ecole Polytech Montreal, SWAT, Montreal, PQ, Canada.
EM l.barbour@queensu.ca; le.an@polymtl.ca; foutse.khomh@polymtl.ca;
   ying.zou@queensu.ca; shaohua@cs.queensu.ca
RI Zou, Ying/KLC-9380-2024; Wang, Shaohua/AAF-7235-2019
OI wang, shaohua/0000-0001-5777-7759
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
FX The authors would like to thank the anonymous reviewers for their
   detailed feedback and useful suggestions that greatly contributed to
   improving this paper. This work has been partially supported by the
   Natural Sciences and Engineering Research Council of Canada (NSERC).
CR An L., 2015, Proceedings of the 11th International Conference on Predictive Models and Data Analytics in Software Engineering, P5
   [Anonymous], 2007, P ICSE 2007 WORK 3 I, DOI DOI 10.1109/PROMISE.2007.10
   Arisholm E., 2006, ISESE 06 P 2006 ACMI, P8
   Aversano L, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P81
   Barbour L., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P273, DOI 10.1109/ICSM.2011.6080794
   Barbour L, 2013, J SOFTW-EVOL PROC, V25, P1139, DOI 10.1002/smr.1597
   Bernstein A., 2007, 9 INT WORKSHOP PRINC, P11
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Cataldo M, 2009, IEEE T SOFTWARE ENG, V35, P864, DOI 10.1109/TSE.2009.42
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Corley C. S, 2016, WHATTHEPATCH PYTHONS
   Dmitrienko A., 2005, ANAL CLIN TRIALS USI
   El Emam K, 2001, J SYST SOFTWARE, V56, P63, DOI 10.1016/S0164-1212(00)00086-8
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Fowler M., 2009, Refactoring: improving the design of existing code
   Gode N., 2011, PROC 5 INT WORKSHOP, P14
   Gode N, 2011, P 15 EUR C SOFTW MAI
   Göde N, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P311, DOI 10.1145/1985793.1985836
   Göde N, 2009, EUR CON SFTWR MTNCE, P219, DOI 10.1109/CSMR.2009.20
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Harrell F.E., 2013, REGRESSION MODELING
   Hassan AE, 2009, P 31 INT C SOFTW ENG
   Juergens E, 2009, PROC INT CONF SOFTW, P485, DOI 10.1109/ICSE.2009.5070547
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kapser C, 2006, WORK CONF REVERSE EN, P19
   Khoshgoftaar TM, 1996, SEVENTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P364, DOI 10.1109/ISSRE.1996.558896
   Kim Miryung, 2005, ESEC/FSE- 13), P187, DOI [10.1145/1081706.1081737, DOI 10.1145/1081706.1081737]
   Kononenko O, 2015, PROC IEEE INT CONF S, P111, DOI 10.1109/ICSM.2015.7332457
   Krinke J, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P170, DOI 10.1109/WCRE.2007.7
   Kutner M. H., 2004, APPL LINEAR REGRESSI
   Lakhotia A, 2003, PROG COMPREHEN, P285
   liwerski J, 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [10.1145/1082983.1083147, DOI 10.1145/1083142.1083147, DOI 10.1145/1082983.1083147]
   McIntosh S., 2015, Empirical Software Engineering
   Mondal M, 2016, SOFTWARE QUAL J, V24, P883, DOI 10.1007/s11219-016-9305-y
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Rahman F, 2012, EMPIR SOFTW ENG, V17, P503, DOI 10.1007/s10664-011-9195-3
   Rogerson P., 2010, Statistical methods for geography, V3rd
   Roy CK, 2008, INT C PROGRAM COMPRE, P172, DOI 10.1109/ICPC.2008.41
   Roy J. R., 2007, QUEENS SCH COMPUTING, V541, P64
   Sheskin DJ., 2003, HDB PARAMETRIC NONPA, DOI [10.1201/9781420036268, DOI 10.1201/9781420036268]
   Svajlenko J, 2014, PROC IEEE INT CONF S, P321, DOI 10.1109/ICSME.2014.54
   Thummalapenta S, 2010, EMPIR SOFTW ENG, V15, P1, DOI 10.1007/s10664-009-9108-x
   Wheeler D. A, 2016, SLOCCOUNT
   Wikipedia, 2017, C FAM PROGR LANG
   Xie S, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P94, DOI 10.1109/CSMR-WCRE.2014.6747229
   Xie S, 2013, IEEE WORK CONF MIN S, P149, DOI 10.1109/MSR.2013.6624022
   Yin R. K., 2017, CASE STUDY RES DESIG
NR 49
TC 5
Z9 7
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1187
EP 1222
DI 10.1007/s11219-017-9375-5
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400001
DA 2024-07-18
ER

PT J
AU Chen, L
   Fang, B
   Shang, ZW
   Tang, YY
AF Chen, Lin
   Fang, Bin
   Shang, Zhaowei
   Tang, Yuanyan
TI Tackling class overlap and imbalance problems in software defect
   prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software defect prediction; Class imbalance; Class overlap; Machine
   learning
ID MACHINE; QUALITY
AB Software defect prediction (SDP) is a promising solution to save time and cost in the software testing phase for improving software quality. Numerous machine learning approaches have proven effective in SDP. However, the unbalanced class distribution in SDP datasets could be a problem for some conventional learning methods. In addition, class overlap increases the difficulty for the predictors to learn the defective class accurately. In this study, we propose a new SDP model which combines class overlap reduction and ensemble imbalance learning to improve defect prediction. First, the neighbor cleaning method is applied to remove the overlapping non-defective samples. The whole dataset is then randomly under-sampled several times to generate balanced subsets so that multiple classifiers can be trained on these data. Finally, these individual classifiers are assembled with the AdaBoost mechanism to build the final prediction model. In the experiments, we investigated nine highly unbalanced datasets selected from a public software repository and confirmed that the high rate of overlap between classes existed in SDP data. We assessed the performance of our proposed model by comparing it with other state-of-the-art methods including conventional SDP models, imbalance learning and data cleaning methods. Test results and statistical analysis show that the proposed model provides more reasonable defect prediction results and performs best in terms of G-mean and AUC among all tested models.
C1 [Chen, Lin; Fang, Bin; Shang, Zhaowei] Chongqing Univ, Dept Comp Sci, Chongqing 400030, Peoples R China.
   [Tang, Yuanyan] Univ Macau, Fac Sci & Technol, Macau, Peoples R China.
C3 Chongqing University; University of Macau
RP Chen, L (corresponding author), Chongqing Univ, Dept Comp Sci, Chongqing 400030, Peoples R China.
EM chenlincqu@cqu.edu.cn; fb@cqu.edu.cn; szw@cqu.edu.cn; yytang@umac.mo
RI chen, lin/ACN-2583-2022
OI chen, lin/0000-0002-2290-1630
FU National Key Basic Research Program of China (973 program)
   [2013CB329103, 2013CB329100]; Program for Natural Science Foundation of
   China [61672120, 61472053, 91118005]; Doctoral Program of Higher
   Education [20120191110027]; Natural Science Foundation of Chongqing
   [CSTC2010BB2217, cstc2012jjA40017]
FX This paper is supported by National Key Basic Research Program of China
   (973 program 2013CB329103 of 2013CB329100), the Program for Natural
   Science Foundation of China (No. 61672120, No. 61472053, No. 91118005),
   the Doctoral Program of Higher Education (20120191110027) and Natural
   Science Foundation of Chongqing (No. CSTC2010BB2217, No.
   cstc2012jjA40017).
CR [Anonymous], PROC INT CONF SOFTW
   [Anonymous], PATTERN RECOGNITION
   [Anonymous], 1977, Elements of software science
   Arar ÖF, 2015, APPL SOFT COMPUT, V33, P263, DOI 10.1016/j.asoc.2015.04.045
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Chawla NV, 2003, LECT NOTES ARTIF INT, V2838, P107, DOI 10.1007/978-3-540-39804-2_12
   CONOVER WJ, 1981, AM STAT, V35, P124, DOI 10.2307/2683975
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Denil M, 2010, LECT NOTES ARTIF INT, V6085, P220
   Drown DJ, 2009, IEEE T SYST MAN CY A, V39, P1097, DOI 10.1109/TSMCA.2009.2020804
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Freund Y, 1997, J COMPUT SYST SCI, V55, P119, DOI 10.1006/jcss.1997.1504
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   Gondra I, 2008, J SYST SOFTWARE, V81, P186, DOI 10.1016/j.jss.2007.05.035
   Gray David, 2011, 15th Annual Conference on Evaluation & Assessment in Software Engineering (EASE 2011), P96, DOI 10.1049/ic.2011.0012
   Haibo He, 2009, IEEE Transactions on Knowledge and Data Engineering, V21, P1263, DOI 10.1109/TKDE.2008.239
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Japkowicz N., 2002, Intelligent Data Analysis, V6, P429
   Jing XY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P496, DOI 10.1145/2786805.2786813
   Kampenes VB, 2007, INFORM SOFTWARE TECH, V49, P1073, DOI 10.1016/j.infsof.2007.02.015
   Khoshgoftaar T. M., 2010, 2010 Proceedings of 22nd International Conference on Tools with Artificial Intelligence (ICTAI 2010), P137, DOI 10.1109/ICTAI.2010.27
   Kim S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P481, DOI 10.1145/1985793.1985859
   Kubat M., 1997, ADDRESSING CURSE IMB, V97, P179
   Laurikkala J., 2001, IMPROVING IDENTIFICA
   Lewis D. D., 1998, Machine Learning: ECML-98. 10th European Conference on Machine Learning. Proceedings, P4, DOI 10.1007/BFb0026666
   Liu MX, 2014, IEEE T RELIAB, V63, P676, DOI 10.1109/TR.2014.2316951
   Liu XY, 2009, IEEE T SYST MAN CY B, V39, P539, DOI 10.1109/TSMCB.2008.2007853
   López V, 2013, INFORM SCIENCES, V250, P113, DOI 10.1016/j.ins.2013.07.007
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Menzies T., 2012, The PROMISE Repository of empirical software engineering data
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Menzies T, 2013, IEEE T SOFTWARE ENG, V39, P822, DOI 10.1109/TSE.2012.83
   Nam J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P508, DOI 10.1145/2786805.2786814
   Pelayo L, 2007, NAFIPS 2007 - 2007 ANNUAL MEETING OF THE NORTH AMERICAN FUZZY INFORMATION PROCESSING SOCIETY, P69, DOI 10.1109/NAFIPS.2007.383813
   Pelayo L, 2012, IEEE T RELIAB, V61, P516, DOI 10.1109/TR.2012.2183912
   Prati RC, 2004, LECT NOTES COMPUT SC, V2972, P312
   Ryu D, 2016, EMPIR SOFTW ENG, V21, P43, DOI 10.1007/s10664-014-9346-4
   Ryu Duksan, 2015, Software Quality Journal, P1
   Seiffert C, 2010, IEEE T SYST MAN CY A, V40, P185, DOI 10.1109/TSMCA.2009.2029559
   Seiffert C, 2009, IEEE T SYST MAN CY A, V39, P1283, DOI 10.1109/TSMCA.2009.2027131
   SHEPPERD M, 1994, J SYST SOFTWARE, V26, P197, DOI 10.1016/0164-1212(94)90011-6
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Siers MJ, 2015, INFORM SYST, V51, P62, DOI 10.1016/j.is.2015.02.006
   Song QB, 2011, IEEE T SOFTWARE ENG, V37, P356, DOI 10.1109/TSE.2010.90
   SRINIVASAN K, 1995, IEEE T SOFTWARE ENG, V21, P126, DOI 10.1109/32.345828
   Tan M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P99, DOI 10.1109/ICSE.2015.139
   Tang W, 2004, PROC INT C TOOLS ART, P373
   Turhan B, 2013, INFORM SOFTWARE TECH, V55, P1101, DOI 10.1016/j.infsof.2012.10.003
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Wang S, 2013, IEEE T RELIAB, V62, P434, DOI 10.1109/TR.2013.2259203
NR 52
TC 62
Z9 67
U1 4
U2 31
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2018
VL 26
IS 1
BP 97
EP 125
DI 10.1007/s11219-016-9342-6
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FX1AL
UT WOS:000425779200004
DA 2024-07-18
ER

PT J
AU Pino, FJ
   García, F
   Piattini, M
   Oktaba, H
AF Pino, Francisco J.
   Garcia, Felix
   Piattini, Mario
   Oktaba, Hanna
TI A research framework for building SPI proposals in small organizations:
   the COMPETISOFT experience
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Qualitative methods; Action research; Case study; Software process
   improvement; Small organizations; SME; COMPETISOFT
ID SOFTWARE PROCESS IMPROVEMENT; PRINCIPLES
AB Establishing a research strategy that is suitable for undertaking research on software engineering is vital if we are to guarantee that research products are developed and validated following a systematic and coherent method. We took this into account as we carried out the COMPETISOFT research project, which investigated software process improvement (SPI) in the context of Latin American small companies. That experience has enabled us to develop a research strategy based on the integrated use of action research and case study methods. This paper introduces the proposed research strategy and provides extensive discussion of its application for: (1) developing the Methodological framework of COMPETISOFT for SPI, (2) putting this framework into practice in eight small software companies, and (3) refine the Methodological framework due to the practice feedback. The use of this research strategy allowed us to observe that it was suitable for developing, refining, improving, applying, and validating COMPETISOFT's Methodology framework. Furthermore, having seen it applied, we believe that this strategy offers a successful integration of action research and case study, which can be useful for conducting research in other software engineering areas which address needs of small software companies.
C1 [Pino, Francisco J.] Univ Cauca, Elect & Telecommun Engn Fac, IDIS Res Grp, Calle 5 4-70, Popayan, Colombia.
   [Garcia, Felix; Piattini, Mario] Univ Castilla La Mancha, Informat Syst & Technol Dept, ALARCOS Res Grp, Paseo Univ 4, E-13071 Ciudad Real, Spain.
   [Oktaba, Hanna] Univ Nacl Autonoma Mexico, Fac Ciencias, KUALI KAANS Res Grp, Ciudad Univ, Mexico City 04510, DF, Mexico.
C3 Universidad del Cauca; Universidad de Castilla-La Mancha; Universidad
   Nacional Autonoma de Mexico
RP Pino, FJ (corresponding author), Univ Cauca, Elect & Telecommun Engn Fac, IDIS Res Grp, Calle 5 4-70, Popayan, Colombia.
EM fjpino@unicauca.edu.co; Felix.Garcia@uclm.es; Mario.Piattini@uclm.es;
   Hanna.Oktaba@ciencias.unam.mx
RI Piattini, Mario/F-6271-2013; Pino Correa, Francisco José/GNP-2495-2022;
   Garcia, Felix/D-4299-2011
OI Piattini, Mario/0000-0002-7212-8279; Pino Correa, Francisco
   José/0000-0003-0668-4485; Garcia, Felix/0000-0001-6460-0353
FU Ministerio de Economia y Competitividad; Fondo Europeo de Desarrollo
   Regional FEDER [TIN2012-37493-C03-01]; Consejeria de Educacion, Ciencia
   y Cultura y Fondo Europeo de Desarrollo Regional FEDER
   [PEII11-0291-5274]; Universidad del Cauca [VRI3930]
FX This work has been funded by: (1) the GEODAS-BC project (Ministerio de
   Economia y Competitividad and Fondo Europeo de Desarrollo Regional
   FEDER, TIN2012-37493-C03-01), (2) the GLOBALIA project (Consejeria de
   Educacion, Ciencia y Cultura y Fondo Europeo de Desarrollo Regional
   FEDER, PEII11-0291-5274), and (3) LATIn Project (Universidad del Cauca,
   VRI3930). Francisco J. Pino acknowledges the contribution of the
   University of Cauca, where he works as a Full Professor.
CR [Anonymous], 2006, P 1 INT RES WORKSH P
   [Anonymous], COMPETISOFT METHODOL
   [Anonymous], SOFTW ENG S 9 MEX IN
   [Anonymous], LNCS
   [Anonymous], 1997, ACM SIGICE B
   [Anonymous], 18 ANN INT S INCOSE
   [Anonymous], 29110 ISOIEC
   [Anonymous], 13 EUR C INF SYST TU
   [Anonymous], THESIS
   [Anonymous], SOFTWARE PROCESS IMP
   [Anonymous], 2 INT C THEOR PRACT
   [Anonymous], ELEMENTS SOFTWARE PR
   [Anonymous], 2001, SCANDINAVIAN J INFOR
   Avison D, 1999, COMMUN ACM, V42, P94, DOI 10.1145/291469.291479
   Baskerville R, 1998, EUR J INFORM SYST, V7, P90, DOI 10.1057/palgrave.ejis.3000298
   Baskerville R., 1999, Communications of the Association for Information Systems, V19
   Baskerville R., 1997, J SYSTEMS INFORM TEC, V1, P25, DOI [10.1108/13287269780000733, DOI 10.1108/13287269780000733]
   BENBASAT I, 1987, MIS QUART, V11, P369, DOI 10.2307/248684
   Braa K., 1999, ACCOUNTING MANAGEMEN, V9, P25, DOI [DOI 10.1016/S0959-8022(98)00018-6, 10.1016/S0959-8022(98)00018-6]
   Brereton Pearl., 2008, Proceedings of the 12th International Conference on Evaluation and Assessment in Software Engineering, P41
   Casey V., 2004, Software Process Improvement and Practice, V9, P123, DOI 10.1002/spip.201
   Checkland P., 1991, INFORM SYSTEMS RES C, P397
   Chiasson M, 2009, INFORM SYST J, V19, P31, DOI 10.1111/j.1365-2575.2008.00297.x
   Coghlan D, 2001, MANAGE LEARN, V32, P49, DOI 10.1177/1350507601321004
   Cruz Mendoza Ricardo, 2009, Proceedings of the Tenth Mexican International Conference on Computer Science (ENC 2009), P221, DOI 10.1109/ENC.2009.33
   Davison R, 2004, INFORM SYST J, V14, P65, DOI 10.1111/j.1365-2575.2004.00162.x
   Dittrich Y, 2008, EMPIR SOFTW ENG, V13, P231, DOI 10.1007/s10664-007-9057-1
   French W.L., 1999, ORG DEV BEHAV SCI IN
   Garzás J, 2013, COMPUT STAND INTER, V35, P616, DOI 10.1016/j.csi.2013.04.002
   Glass RL, 2002, INFORM SOFTWARE TECH, V44, P491, DOI 10.1016/S0950-5849(02)00049-6
   GUSTAVSEN B, 1993, HUM RELAT, V46, P1361, DOI 10.1177/001872679304601105
   Host Martin, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P479
   Iversen J, 2003, INFORM SYST J, V13, P3, DOI 10.1046/j.1365-2575.2003.00136.x
   Iversen JH, 2004, MIS QUART, V28, P395
   Kauppinen M, 2004, INFORM SOFTWARE TECH, V46, P937, DOI 10.1016/j.infsof.2004.04.002
   Kock N., 1997, J SYSTEMS INFORM TEC, V7, P1, DOI [10.1108/13287269780000732, DOI 10.1108/13287269780000732]
   Laporte CY, 2008, COMM COM INF SC, V16, P129
   LEVIN M, 1993, HUM RELAT, V46, P193, DOI 10.1177/001872679304600204
   Martínez-Ruiz T, 2009, COMM COM INF SC, V47, P187
   Mathiassen L., 2002, Information Technology & People, V15, P321, DOI 10.1108/09593840210453115
   Mathiassen L., 2002, IMPROVING SOFTWARE O
   McKay J., 2001, Information Technology & People, V14, P46, DOI 10.1108/09593840110384771
   MCTAGGART R, 1991, ADULT EDUC QUART, V41, P168, DOI 10.1177/0001848191041003003
   Dos Santos PSM, 2011, ADV COMPUT, V83, P205, DOI 10.1016/B978-0-12-385510-7.00005-9
   Mejia R, 2007, COMPUT IND, V58, P329, DOI 10.1016/j.compind.2006.07.009
   Montesi M, 2008, J SYST SOFTWARE, V81, P1694, DOI 10.1016/j.jss.2007.11.723
   Moody D.L., 2000, Proceedings of the Twenty First International Conference on Information Systems, P351
   Oktaba H, 2007, COMPUTER, V40, P21, DOI 10.1109/MC.2007.361
   Phillips PA, 1998, MED J AUSTRALIA, V168, P260, DOI 10.5694/j.1326-5377.1998.tb140155.x
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Pino FJ, 2009, COMM COM INF SC, V42, P213
   Polo M, 2002, SOFTWARE PRACT EXPER, V32, P1239, DOI 10.1002/spe.481
   Richardson I., 2001, Software Process Improvement and Practice, V6, P157, DOI 10.1002/spip.144
   Robson C., 2002, Real world research
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   Staples M, 2007, J SYST SOFTWARE, V80, P883, DOI 10.1016/j.jss.2006.09.008
   Travassos GH, 2008, IEEE INT C ENG COMP, P193, DOI 10.1109/ICECCS.2008.30
   Wadsworth Y., 1998, WHAT IS PARTICIPATOR
   Walsham G., 1993, INTERPRETING INFORM
   Wohlin C, 2005, INFORM SOFTWARE TECH, V47, P957, DOI 10.1016/j.infsof.2005.09.002
   Wood-Harper A.T., 1985, RES METHODS INFORM S, P169
   Wouters M, 2009, EUR MANAG J, V27, P64, DOI 10.1016/j.emj.2008.06.006
   Yin R.K., 2011, Qualitative research from start to finish
   Zannier C., 2006, 28th International Conference on Software Engineering Proceedings, P341, DOI 10.1145/1134285.1134333
   Zelkowitz MV, 2009, J SYST SOFTWARE, V82, P373, DOI 10.1016/j.jss.2008.06.040
NR 66
TC 3
Z9 4
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 489
EP 518
DI 10.1007/s11219-015-9278-2
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400003
DA 2024-07-18
ER

PT J
AU Aljumaily, H
   Cuadra, D
   Martínez, P
AF Aljumaily, Harith
   Cuadra, Dolores
   Martinez, Paloma
TI Applying black-box testing to UML/OCL database models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Class diagram testing; Class diagram validation; Black-box testing;
   Software testing
ID VALIDATING UML; SOFTWARE; ENVIRONMENT
AB Most Unified Modeling Language (UML) computer-aided software engineering tools have been insufficient in the development process because they provide little support for conceptual model testing. Model testing aims to ensure the correctness of a UML/OCL class diagram, or, in other words, that a given class diagram can perfectly meet the user's requirements. This study proposes the validation of class diagrams with black-box testing, a technique used to test software without focusing on the software's implementation or structure. An approach is proposed for the automatic transformation of the constraints of a UML/OCL class diagram into test cases. Following the creation of the test cases, they are executed with JUnit and the results produced are shown to the tester. To demonstrate the applicability of this approach, an effectiveness evaluation and an efficiency evaluation are performed here. Evaluation studies show that all faults included in a class diagram have been detected within an efficient time.
C1 [Aljumaily, Harith; Cuadra, Dolores; Martinez, Paloma] Univ Carlos III Madrid, Dept Comp Sci, Madrid 28911, Spain.
C3 Universidad Carlos III de Madrid
RP Aljumaily, H (corresponding author), Univ Carlos III Madrid, Dept Comp Sci, Av Univ 30, Madrid 28911, Spain.
EM haljumai@inf.uc3m.es; dcuadra@inf.uc3m.es; pmf@inf.uc3m.es
RI CUADRA, MARIA DOLORES/S-2084-2019; Martínez, Paloma/AAE-5501-2020
OI CUADRA, MARIA DOLORES/0000-0002-0414-7849; MARTINEZ,
   PALOMA/0000-0003-3013-3771
FU project Thuban: Natural Interaction Platform for Virtual Attending in
   Real Environments [TIN2008-02711]
FX We sincerely thank the anonymous referees for their valuable
   suggestions, which have improved the paper. This work has been partially
   supported by the project Thuban: Natural Interaction Platform for
   Virtual Attending in Real Environments (TIN2008-02711).
CR Al-Jumaily HT, 2008, J SYST SOFTWARE, V81, P2299, DOI 10.1016/j.jss.2008.04.027
   [Anonymous], P INT C SOFTW ENG
   [Anonymous], P 25 INT C SOFTW ENG
   [Anonymous], SYST SCI P 25 HAW IN
   [Anonymous], 2 WORKSH MUT AN RAL
   [Anonymous], P 28 ANN INT C COMP
   [Anonymous], 2004, HDB MATH
   [Anonymous], DRESD OCL TOOLK
   [Anonymous], 100 JAV DAT
   [Anonymous], ACM SIGSOFT INT S SO
   [Anonymous], P 9 INT C QUAL SOFTW
   [Anonymous], MORGAN KAUFAMNN SERI
   [Anonymous], P WORKSH GRAPH TRANS
   [Anonymous], P 25 EUROMICRO 99 C
   [Anonymous], 2000, P 8 EUR INT C SOFTW
   [Anonymous], 2000, Fundamentals of Database Systems
   [Anonymous], P 9 S ABSTR REF APPR
   [Anonymous], P 15 IEEE INT WORKSH
   [Anonymous], THESIS U POLITECNICA
   [Anonymous], OBJ SQL DES US GUID
   [Anonymous], 9075 ISOIEC
   Blaha M., 1998, Object-Oriented Modeling and Design for Database Applications
   Chan WK, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P187
   Chernak Y, 2001, IEEE SOFTWARE, V18, P81, DOI 10.1109/52.903172
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Egyed A., 2006, 28th International Conference on Software Engineering Proceedings, P381, DOI 10.1145/1134285.1134339
   Egyed A, 2007, PROC INT CONF SOFTW, P292
   ELMSTROM R, 1994, SIGPLAN NOTICES, V29, P77, DOI 10.1145/185009.185028
   Giraudo G, 2003, EMPIR SOFTW ENG, V8, P59, DOI 10.1023/A:1021720916127
   GOGOLLA M, 1995, IEEE T KNOWL DATA EN, V7, P505, DOI 10.1109/69.390254
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   GORDON VS, 1995, IEEE SOFTWARE, V12, P85, DOI 10.1109/52.363162
   Heumann Jim., 2001, The Rational Edge, V6
   Larman C., 2001, Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and the Unified Process, V2nd
   Mei Hong, 2010, 2010 2nd International Workshop on Education Technology and Computer Science (ETCS), P533, DOI 10.1109/ETCS.2010.554
   Meyer B, 2008, COMPUTER, V41, P99, DOI 10.1109/MC.2008.306
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Offutt A. J., 1996, SIGSOFT Software Engineering Notes, V21, P195, DOI [10.1145/229000.226317, 10.1145/226295.226317]
   Overmyer S. P., 1991, Human Aspects in Computing. Design and Use of Interactive Systems and Work with Terminals. Proceedings of the Fourth International Conference on Human-Computer Interaction, P303
   Pin-Shan Chen P., 1976, ACM Transactions on Database Systems, V1, P9, DOI 10.1145/320434.320440
   Pressman R.S., 2005, Software engineering: a Practitioner's Approach
   Purchase HC, 2004, INT J HUM-COMPUT ST, V61, P187, DOI 10.1016/j.ijhcs.2004.01.003
   Reder A, 2010, P IEEE ACM INT C AUT, P347, DOI DOI 10.1145/1858996.1859069
   Richters M, 2000, LECT NOTES COMPUT SC, V1939, P265
   Sommerville Ian, 2016, Software engineering 8
   Tort A, 2011, LECT NOTES COMPUT SC, V6999, P349, DOI 10.1007/978-3-642-24574-9_48
   Tort A, 2010, DATA KNOWL ENG, V69, P598, DOI 10.1016/j.datak.2010.02.002
   Vincenzi AMR, 2003, LECT NOTES COMPUT SC, V2693, P99
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 50
TC 5
Z9 6
U1 1
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2014
VL 22
IS 2
SI SI
BP 153
EP 184
DI 10.1007/s11219-012-9192-9
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AF7TM
UT WOS:000334917700002
DA 2024-07-18
ER

PT J
AU Afzal, W
   Torkar, R
   Feldt, R
   Gorschek, T
AF Afzal, Wasif
   Torkar, Richard
   Feldt, Robert
   Gorschek, Tony
TI Prediction of faults-slip-through in large software projects: an
   empirical evaluation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Prediction; Empirical; Faults-slip-through; Search-based
ID DEFECT PREDICTION; MODELS
AB A large percentage of the cost of rework can be avoided by finding more faults earlier in a software test process. Therefore, determination of which software test phases to focus improvement work on has considerable industrial interest. We evaluate a number of prediction techniques for predicting the number of faults slipping through to unit, function, integration, and system test phases of a large industrial project. The objective is to quantify improvement potential in different test phases by striving toward finding the faults in the right phase. The results show that a range of techniques are found to be useful in predicting the number of faults slipping through to the four test phases; however, the group of search-based techniques (genetic programming, gene expression programming, artificial immune recognition system, and particle swarm optimization-based artificial neural network) consistently give better predictions, having a representation at all of the test phases. Human predictions are consistently better at two of the four test phases. We conclude that the human predictions regarding the number of faults slipping through to various test phases can be well supported by the use of search-based techniques. A combination of human and an automated search mechanism (such as any of the search-based techniques) has the potential to provide improved prediction results.
C1 [Afzal, Wasif] Bahria Univ, Dept Comp Sci, Islamabad 44000, Pakistan.
   [Torkar, Richard; Feldt, Robert] Chalmers Univ Technol, Dept Comp Sci & Engn, S-41296 Gothenburg, Sweden.
   [Torkar, Richard; Feldt, Robert; Gorschek, Tony] Blekinge Inst Technol, Sch Comp, S-37179 Karlskrona, Sweden.
C3 Chalmers University of Technology; Blekinge Institute Technology
RP Afzal, W (corresponding author), Bahria Univ, Dept Comp Sci, Shangrilla Rd,Sect E-8, Islamabad 44000, Pakistan.
EM wasif.afzal@gmail.com; richard.torkar@chalmers.se;
   robert.feldt@chalmers.se; tony.gorschek@bth.se
CR Afzal Wasif, 2010, 2010 Proceedings of Second International Symposium on Search Based Software Engineering (SSBSE), P79, DOI 10.1109/SSBSE.2010.19
   AHA DW, 1991, MACH LEARN, V6, P37, DOI 10.1023/A:1022689900470
   [Anonymous], THESIS SWISS FEDERAL
   [Anonymous], CLASS REPTREE TREE
   [Anonymous], P 10 IEEE WORKSH OBJ
   [Anonymous], P 30 JUB INT CONV MI
   [Anonymous], HDB SOFTWARE RELIABI
   [Anonymous], TECHNICAL REPORT
   [Anonymous], 12 INT C MACH LEARN
   [Anonymous], STAT ANAL INTERDISCI
   [Anonymous], SVM KERNEL METHODS T
   [Anonymous], IEEE T SOFTWARE ENG
   [Anonymous], 122072008 IEEE
   [Anonymous], BLEKINGE I TECHNOLOG
   [Anonymous], P WORKSH US MULT APP
   [Anonymous], P 6 INT C PRED MOD S
   [Anonymous], THESIS U WAIKATO NZ
   [Anonymous], COMPLEX SYSTEMS
   [Anonymous], P 31 JUB INT CONV MI
   [Anonymous], P 21 AS PAC SOFTW EN
   [Anonymous], P 3 INT C SOFTW ENG
   [Anonymous], P 27 INT C SOFTW ENG
   [Anonymous], PSO BASED NEURAL NET
   [Anonymous], IP LETT
   [Anonymous], IEEE T SOFT IN PRESS
   [Anonymous], 1990, IEEE Std 610.12-1990, V42, P112, DOI [10.1109/IEEESTD.1990.101064, DOI 10.1109/IEEESTD.1990.101064]
   [Anonymous], 2008, ARTIFICIAL INTELLIGE
   [Anonymous], P ACM IEEE INT S EMP
   [Anonymous], 2008, P 30 INT C SOFTW ENG
   [Anonymous], P 26 INT C SOFTW ENG
   [Anonymous], 2004, P 8 IEEE INT S HIGH
   [Anonymous], P 6 INT SOFTW METR S
   [Anonymous], P SIAM INT C DAT MIN
   [Anonymous], THESIS BLEKINGE I TE
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Breiman L., 2001, Mach. Learn., V45, P5
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Damm L.-O., 2006, Software Process Improvement and Practice, V11, P47, DOI 10.1002/spip.253
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Hall M., 2009, ACM SIGKDD Explor. Newsl, V11, P18, DOI DOI 10.1145/1656274.1656278
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Hughes RT, 1996, INFORM SOFTWARE TECH, V38, P67, DOI 10.1016/0950-5849(95)01045-9
   Ioannidis JPA, 2005, PLOS MED, V2, P696, DOI 10.1371/journal.pmed.0020124
   Juristo N., 2013, BASICS SOFTWARE ENG
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Poli R., 2008, A Field Guide to Genetic Programming
   Rakitin StevenR., 2001, ART H COMP SCI LIBR, V2nd
   Rodríguez JJ, 2006, IEEE T PATTERN ANAL, V28, P1619, DOI 10.1109/TPAMI.2006.211
   Runeson P, 2006, IEEE SOFTWARE, V23, P82, DOI 10.1109/MS.2006.89
   Shepperd M., 2000, Empirical Software Engineering, V5, P175, DOI 10.1023/A:1026582314146
   Staron M, 2008, INFORM SOFTWARE TECH, V50, P782, DOI 10.1016/j.infsof.2007.10.001
   Tian J, 2004, IEEE SOFTWARE, V21, P84, DOI 10.1109/MS.2004.1293078
   Tomaszewski P, 2007, J SYST SOFTWARE, V80, P1227, DOI 10.1016/j.jss.2006.12.548
   Veevers A., 1994, Software Testing, Verification and Reliability, V4, P3, DOI 10.1002/stvr.4370040103
   Watkins A., 2004, Genetic Programming and Evolvable Machines, V5, P291, DOI 10.1023/B:GENP.0000030197.83685.94
   Weyuker EJ, 2010, EMPIR SOFTW ENG, V15, P277, DOI 10.1007/s10664-009-9111-2
   Witten I. H., 2005, DATA MINING PRACTICA
NR 61
TC 2
Z9 2
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2014
VL 22
IS 1
SI SI
BP 51
EP 86
DI 10.1007/s11219-013-9205-3
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB2SX
UT WOS:000331643500005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Rocha, H
   Couto, C
   Maffort, C
   Garcia, R
   Simoes, C
   Passos, L
   Valente, MT
AF Rocha, Henrique
   Couto, Cesar
   Maffort, Cristiano
   Garcia, Rogel
   Simoes, Clarisse
   Passos, Leonardo
   Valente, Marco Tulio
TI Mining the impact of evolution categories on object-oriented metrics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software evolution categories; Patterns of evolution; Object-oriented
   metrics; CK metrics; Evolution matrix
ID SOFTWARE
AB Despite the relevance of the software evolution phase, there are few characterization studies on recurrent evolution growth patterns and on their impact on software properties, such as coupling and cohesion. In this paper, we report a study designed to investigate whether the software evolution categories proposed by Lanza can be used to explain not only the growth of a system in terms of lines of code (LOC), but also in terms of metrics from the Chidamber and Kemerer (CK) object-oriented metrics suite. Our results show that high levels of recall (ranging on average from 52 to 72 %) are achieved when using LOC to predict the evolution of coupling and size. For cohesion, we have achieved smaller recall rates (< 27 % on average).
C1 [Rocha, Henrique; Couto, Cesar; Maffort, Cristiano; Garcia, Rogel; Simoes, Clarisse; Valente, Marco Tulio] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [Couto, Cesar; Maffort, Cristiano] CEFET MG, Dept Comp, Belo Horizonte, MG, Brazil.
   [Passos, Leonardo] Univ Waterloo, Dept Elect & Comp Engn, Waterloo, ON N2L 3G1, Canada.
C3 Universidade Federal de Minas Gerais; University of Waterloo
RP Valente, MT (corresponding author), Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
EM hrocha@dcc.ufmg.br; cesarfmc@dcc.ufmg.br; maffort@dcc.ufmg.br;
   rogelgarcia@dcc.ufmg.br; lpassos@gsd.uwaterloo.ca; mtov@dcc.ufmg.br
OI Valente, Marco Tulio/0000-0002-8180-7548; Rocha,
   Henrique/0000-0002-9154-0277
FU FUNDEP/Santander; CAPES; FAPEMIG; CNPq
FX This research has been supported by the grants from FUNDEP/Santander,
   CAPES, FAPEMIG, and CNPq. We thank Marco D'Ambros for making the dataset
   with the historical values of the OO metrics publicly available and
   Andre Hora and Nicolas Anquetil for helping us with the Moose platform.
CR Araújo JEM, 2011, IET SOFTW, V5, P366, DOI 10.1049/iet-sen.2009.0083
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Couto C., SOFTWARE QU IN PRESS
   Couto C, 2012, EUR CON SFTWR MTNCE, P223, DOI 10.1109/CSMR.2012.31
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Emam KE, 2001, IEEE T SOFTWARE ENG, V27, P630, DOI 10.1109/32.935855
   Godfrey MW, 2000, PROC IEEE INT CONF S, P131, DOI 10.1109/ICSM.2000.883030
   Gonzalez-Barahona JM, 2009, EMPIR SOFTW ENG, V14, P262, DOI 10.1007/s10664-008-9100-x
   Herraiz I., 2007, Proceedings of the International Workshop on Mining Software Repositories, P21
   Hora A, 2012, EUR CON SFTWR MTNCE, P523, DOI 10.1109/CSMR.2012.68
   Israeli A, 2010, J SYST SOFTWARE, V83, P485, DOI 10.1016/j.jss.2009.09.042
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Lanza M., 2001, Proceedings of the 4th International Workshop on Principles of Software Evolution, P37
   Lehman MM, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P20, DOI 10.1109/METRIC.1997.637156
   Lehman MM, 1998, PROC IEEE INT CONF S, P208, DOI 10.1109/ICSM.1998.738510
   Lo AW, 2000, J FINANC, V55, P1705, DOI 10.1111/0022-1082.00265
   Mens T, 2008, PROC IEEE INT CONF S, P386, DOI 10.1109/ICSM.2008.4658087
   Pagel M, 1999, NATURE, V401, P877, DOI 10.1038/44766
   Stebbins G. L., 1950, VARIATION EVOLUTION, DOI DOI 10.7312/STEB94536
   Subramanyam R, 2003, IEEE T SOFTWARE ENG, V29, P297, DOI 10.1109/TSE.2003.1191795
NR 21
TC 0
Z9 0
U1 1
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2013
VL 21
IS 4
BP 529
EP 549
DI 10.1007/s11219-012-9186-7
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 209FT
UT WOS:000323741000001
DA 2024-07-18
ER

PT J
AU Dogsa, T
   Batic, D
AF Dogsa, Tomaz
   Batic, David
TI The effectiveness of test-driven development: an industrial case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test-driven development; Testing and debugging; Testing strategies;
   Productivity; Maintainability; Software quality/SQA; Software
   engineering process
ID SOFTWARE; CODE
AB Test-driven development (TDD) is a software development practice, where test cases are incrementally written before implementing the production code. This paper presents the results of a multi-case study investigating the effectiveness of TDD within an industrial environment. Three comparable medium-sized projects were observed during their development cycle. Two projects were driven without TDD practice, while the third one introduced TDD into the development process. The effectiveness of TDD was expressed in terms of external code quality, productivity, and maintainability. Our results indicate that the TDD developers produced higher quality code that is easier to maintain, although we did observe a reduction in productivity.
C1 [Batic, David] Agileon Doo, Div 51, SI-2000 Maribor, Slovenia.
   [Dogsa, Tomaz] Univ Maribor, Fac Elect Engn & Comp Sci, Ctr Verificat & Validat Syst, SI-2000 Maribor, Slovenia.
C3 University of Maribor
RP Batic, D (corresponding author), Agileon Doo, Div 51, Cesta 14, SI-2000 Maribor, Slovenia.
EM batic@agileon.eu
CR ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   [Anonymous], 2003, TEST DRIVEN DEV EXAM
   Beck K, 2001, IEEE SOFTWARE, V18, P87, DOI 10.1109/52.951502
   Bhat T., 2006, Proceedings of the 2006 ACM/IEEE International Symposium on Empirical Software Engineering (ISESE '06), P356, DOI [DOI 10.1145/1159733.1159787, 10.1145/1159733.1159787]
   Campbell, 2002, EXPT QUASIEXPERIMENT
   Crispin I, 2006, IEEE SOFTWARE, V23, P70, DOI 10.1109/MS.2006.157
   Cusumano M, 1997, COMMUN ACM, V40, P53, DOI 10.1145/255656.255698
   Damm LO, 2006, J SYST SOFTWARE, V79, P1001, DOI 10.1016/j.jss.2005.10.015
   EDWARDS SH, 2003, P INT C ED INF SYST
   Erdogmus H, 2005, IEEE T SOFTWARE ENG, V31, P226, DOI 10.1109/TSE.2005.37
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   GEORGE B, 2003, ACM S APPL COMP SAC
   Janzen DS, 2008, IEEE SOFTWARE, V25, P77, DOI 10.1109/MS.2008.34
   JEFFRIES R, 1999, SOFTWARE TESTING QUA, V1, P23
   JEFFRIES R, 2007, IEEE SOFTWARE    MAY
   JOVANOVIC D, 2003, CONTEL 2003, V2, P587
   KITCHENHAM B, 1995, IEEE SOFTWARE, V12, P52, DOI 10.1109/52.391832
   Madeyski L, 2007, LECT NOTES COMPUT SC, V4764, P200
   Madeyski L, 2005, FRONT ARTIF INTEL AP, V130, P113
   MALIK S, 1999, 95314A CARL U
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   MAURER F, 2002, PRODUCTIVITY AGILE S
   Maximilien EM, 2003, PROC INT CONF SOFTW, P564, DOI 10.1109/ICSE.2003.1201238
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Muller M. M., 2002, IEE Proceedings-Software, V149, P131, DOI 10.1049/ip-sen:20020540
   Newkirk J., 2004, Test-driven development in microsoft NET
   PFLEEGER S.L., 2006, Software Engineering, Theory and Practice
   SANCHEZ J, 2007, AGILE 2007 C AGILE 2
   SINIAALTO M, 2007, P 1 INT S EMP SOFTW, P275, DOI DOI 10.1109/ESEM.2007.2
   STEPHENS M, 2004, DOBBS J          MAY
NR 32
TC 10
Z9 11
U1 1
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2011
VL 19
IS 4
SI SI
BP 643
EP 661
DI 10.1007/s11219-011-9130-2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 814RN
UT WOS:000294474900002
DA 2024-07-18
ER

PT J
AU Misirli, AT
   Bener, AB
   Turhan, B
AF Misirli, Ayse Tosun
   Bener, Ayse Basar
   Turhan, Burak
TI An industrial case study of classifier ensembles for locating software
   defects
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Defect prediction; Ensemble of classifiers; Static code attributes;
   Embedded software
ID STATIC CODE ATTRIBUTES; QUALITY ESTIMATION; DESIGN; FAULTS
AB As the application layer in embedded systems dominates over the hardware, ensuring software quality becomes a real challenge. Software testing is the most time-consuming and costly project phase, specifically in the embedded software domain. Misclassifying a safe code as defective increases the cost of projects, and hence leads to low margins. In this research, we present a defect prediction model based on an ensemble of classifiers. We have collaborated with an industrial partner from the embedded systems domain. We use our generic defect prediction models with data coming from embedded projects. The embedded systems domain is similar to mission critical software so that the goal is to catch as many defects as possible. Therefore, the expectation from a predictor is to get very high probability of detection (pd). On the other hand, most embedded systems in practice are commercial products, and companies would like to lower their costs to remain competitive in their market by keeping their false alarm (pf) rates as low as possible and improving their precision rates. In our experiments, we used data collected from our industry partners as well as publicly available data. Our results reveal that ensemble of classifiers significantly decreases pf down to 15% while increasing precision by 43% and hence, keeping balance rates at 74%. The cost-benefit analysis of the proposed model shows that it is enough to inspect 23% of the code on local datasets to detect around 70% of defects.
C1 [Misirli, Ayse Tosun] Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
   [Bener, Ayse Basar] Ryerson Univ, Ted Rogers Sch Informat Technol Management, Toronto, ON M5B 2K3, Canada.
   [Turhan, Burak] Univ Oulu, Dept Informat Proc Sci, Oulu, Finland.
C3 Bogazici University; Toronto Metropolitan University; University of Oulu
RP Misirli, AT (corresponding author), Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey.
EM ayse.tosun@boun.edu.tr; ayse.bener@ryerson.ca; burak.turhan@oulu.fi
RI Basar, Ayse/ABF-9265-2020; Tosun, Ayse/B-4794-2014; Turhan,
   Burak/G-7400-2011
OI Basar, Ayse/0000-0003-4934-8326; Tosun, Ayse/0000-0003-1859-7872;
   Turhan, Burak/0000-0003-1511-2163
FU Turkish State Planning Organization (DPT) [2007K120610]
FX This research is supported in part by Turkish State Planning
   Organization (DPT) under project number 2007K120610.
CR Alpaydin E, 2004, INTRO MACHINE LEARNI
   Amasaki S, 2005, IEICE T INF SYST, VE88D, P1134, DOI 10.1093/ietisy/e88-d.6.1134
   [Anonymous], 2007, The promise repository of empirical software engineering data
   [Anonymous], 2002, ADV COMPUTERS
   [Anonymous], ANAL DEFECT PREDICTI
   [Anonymous], ANAL DEFECT PREDICTI
   [Anonymous], METRICS 02
   [Anonymous], P 15 INT C ADV NEUR
   [Anonymous], 2002, Metrics and Models in Software Quality Engineering
   [Anonymous], 61012 ANSIIEEE
   [Anonymous], ISCIS 07 P 22 INT S
   [Anonymous], LNCS
   [Anonymous], ACM COMPUTING SURVEY
   [Anonymous], HASE 99
   [Anonymous], P INT C SOFTW ENG
   [Anonymous], XP 07
   [Anonymous], ISESE 03
   Arisholm E., 2006, ISESE 06 P 2006 ACMI, P8
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Basili VR, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P69, DOI 10.1109/ICSE.2002.1007957
   Brooks Frederick P., 1995, The mythical man-month
   Demiroz G, 1997, LECT NOTES ARTIF INT, V1224, P85
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Fenton N, 2007, INFORM SOFTWARE TECH, V49, P32, DOI 10.1016/j.infsof.2006.09.001
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   Heeger D., 1998, SIGNAL DETECTION THE
   Jiang Y., 2008, DEFECTS 08 P 2008 WO, P16, DOI [DOI 10.1145/1390817.1390822, 10.1145/1390817.1390822]
   Khoshgoftaar TM, 2006, PROC INT C TOOLS ART, P651
   Khoshgoftaar TM, 2005, INTELL DATA ANAL, V9, P3, DOI 10.3233/IDA-2005-9102
   Khoshgoftaar TM, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P119, DOI 10.1109/METRIC.2004.1357896
   Khoshgoftaar TM, 2003, EMPIR SOFTW ENG, V8, P255, DOI 10.1023/A:1024424811345
   Khoshgoftaar TM, 1996, IEEE T RELIAB, V45, P456, DOI 10.1109/24.537016
   Kittler J, 1998, IEEE T PATTERN ANAL, V20, P226, DOI 10.1109/34.667881
   Koru AG, 2009, IEEE T SOFTWARE ENG, V35, P293, DOI 10.1109/TSE.2008.90
   Kuncheva L. I., 2004, COMBINING PATTERN CL, V390, P413
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Li Q., 2003, REAL TIME CONCEPTS E
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P637, DOI 10.1109/TSE.2007.70721
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   MUNSON JC, 1992, IEEE T SOFTWARE ENG, V18, P423, DOI 10.1109/32.135775
   Ohlsson N.N., 1998, FAILURE LESSONS LEAR, V2, P163
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Padberg F, 2004, IEEE T SOFTWARE ENG, V30, P17, DOI 10.1109/TSE.2004.1265733
   Runeson P., 2001, Product Focused Software Process Improvement. Third International Conference, PROFES 2001. Proceedings (Lecture Notes in Computer Science Vol.2188), P341
   Shull F, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P249, DOI 10.1109/METRIC.2002.1011343
   Shull FJ, 2008, EMPIR SOFTW ENG, V13, P211, DOI 10.1007/s10664-008-9060-1
   Tosun A., 2009, PROMISE'09
   Tosun A, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P318
   Turhan B, 2007, ICSOFT 2007: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL SE, P244
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Turhan B, 2009, DATA KNOWL ENG, V68, P278, DOI 10.1016/j.datak.2008.10.005
   Twala B, 2010, INTELL DATA ANAL, V14, P299, DOI 10.3233/IDA-2010-0423
   Verbrugge S, 2003, FOURTH INTERNATIONAL WORKSHOP ON DESIGN OF RELIABLE COMMUNICATION NETWORKS - (DRCN 2003), PROCEEDINGS, P317, DOI 10.1109/DRCN.2003.1275372
   Xu W., 2009, P INT C COMPUTATIONA, P1
   Zhang HY, 2007, IEEE T SOFTWARE ENG, V33, P635, DOI 10.1109/TSE.2007.70706
NR 56
TC 47
Z9 49
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2011
VL 19
IS 3
BP 515
EP 536
DI 10.1007/s11219-010-9128-1
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 775TK
UT WOS:000291486100003
DA 2024-07-18
ER

PT J
AU Sener, Z
   Karsak, EE
AF Sener, Zeynep
   Karsak, E. Ertugrul
TI A fuzzy regression and optimization approach for setting target levels
   in software quality function deployment
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality function deployment; Fuzzy regression; Quality function
   deployment; House of quality
ID INTERNET SEARCH ENGINES; LINEAR-REGRESSION; PROGRAMMING-MODEL;
   DECISION-MAKING; DESIGN; REQUIREMENTS; SYSTEMS
AB With the rapid development of the software industry, improving the quality of software development has gained increasing importance. Software manufacturers have recently applied quality improvement techniques to software development to respond to the needs for software quality. Software quality function deployment (SQFD), as a technique for improving the quality of the software development process to create products responsive to customer expectations, is used to maximize customer satisfaction. This paper presents a fuzzy regression and optimization approach to determine target levels in SQFD. The inherent fuzziness of relationships in SQFD modeling justifies the use of fuzzy regression. Fuzzy regression is used to identify the functional relationships between customer requirements and technical attributes, and among technical attributes. Then, a mathematical programming model is developed to determine target levels of technical attributes using the functional relationships obtained by fuzzy regression. A search engine quality improvement problem is presented to illustrate the application of the proposed approach.
C1 [Sener, Zeynep; Karsak, E. Ertugrul] Galatasaray Univ, Dept Ind Engn, TR-80840 Istanbul, Turkey.
C3 Galatasaray University
RP Karsak, EE (corresponding author), Galatasaray Univ, Dept Ind Engn, TR-80840 Istanbul, Turkey.
EM zsener@gsu.edu.tr; ekarsak@gsu.edu.tr
RI sener, zeynep/AAC-8406-2020; Karsak, E. Ertugrul/AAB-2947-2020
OI sener, zeynep/0000-0002-8264-0890; Karsak, E.
   Ertugrul/0000-0002-3921-6189
CR Akao Y., 1997, P INT S QFD 97 LINK
   [Anonymous], QUALITY ENG
   Barnett W.D., 1995, International Journal of Quality Reliability Management, V12, P24
   Büyüközkan G, 2005, COMPUT IND ENG, V48, P427, DOI 10.1016/j.cie.2005.01.007
   Chan LK, 2002, EUR J OPER RES, V143, P463, DOI 10.1016/S0377-2217(02)00178-9
   Chen Y, 2004, INT J PROD RES, V42, P1009, DOI 10.1080/00207540310001619623
   Chen YZ, 2006, INT J ADV MANUF TECH, V28, P1175, DOI 10.1007/s00170-004-2466-z
   Elboushi MI, 1997, J SYST SOFTWARE, V38, P133, DOI 10.1016/S0164-1212(96)00117-3
   Fung RYK, 2006, FUZZY SET SYST, V157, P98, DOI 10.1016/j.fss.2005.05.032
   Fung RYK, 2005, ENG OPTIMIZ, V37, P633, DOI 10.1080/03052150500132646
   Haag S, 1996, COMMUN ACM, V39, P41, DOI 10.1145/234173.234178
   HAAG SE, 1992, THESIS U TEXAS ARLIN
   HAUSER JR, 1988, HARVARD BUS REV, V66, P63
   Herring SD, 1999, J AM SOC INFORM SCI, V50, P358, DOI 10.1002/(SICI)1097-4571(1999)50:4<358::AID-ASI14>3.0.CO;2-7
   Herzwunn G., 2003, International Journal of Quality Reliability Management, V20, P36, DOI 10.1108/02656710310453809
   Ip B, 2006, TOTAL QUAL MANAG BUS, V17, P835, DOI 10.1080/14783360600595245
   Jureta IJ, 2009, SOFTWARE QUAL J, V17, P65, DOI 10.1007/s11219-008-9059-2
   Karlsson J, 1997, SOFTWARE QUAL J, V6, P311, DOI 10.1023/A:1018580522999
   Karsak EE, 2004, INT J PROD RES, V42, P3957, DOI 10.1080/00207540410001703998
   Karsak EE, 2003, COMPUT IND ENG, V44, P171, DOI 10.1016/S0360-8352(02)00191-2
   KEKRE S, 1995, MANAGE SCI, V41, P1456, DOI 10.1287/mnsc.41.9.1456
   Kim KJ, 2000, EUR J OPER RES, V121, P504, DOI 10.1016/S0377-2217(99)00048-X
   Kim KJ, 1996, EUR J OPER RES, V92, P417, DOI 10.1016/0377-2217(94)00352-1
   Liu F, 2006, SOFTWARE QUAL J, V14, P113, DOI 10.1007/s11219-006-7598-y
   Liu XF, 2000, IEEE POTENTIALS, V19, P14
   Liu XQF, 2006, TOTAL QUAL MANAG BUS, V17, P149, DOI 10.1080/14783360500450475
   MOSKOWITZ H, 1993, FUZZY SET SYST, V58, P303, DOI 10.1016/0165-0114(93)90505-C
   Pai WC, 2002, INFORM SYST MANAGE, V19, P20, DOI 10.1201/1078/43201.19.3.20020601/37166.3
   Ramires J, 2005, LECT NOTES COMPUT SC, V3706, P308
   REDDEN DT, 1994, FUZZY SET SYST, V64, P361, DOI 10.1016/0165-0114(94)90159-7
   Richardson I, 2002, SOFTWARE QUAL J, V10, P101, DOI 10.1023/A:1020519822806
   Shillito M.L., 1994, Advanced QFD: linking technology to market and company needs
   TANAKA H, 1988, FUZZY SET SYST, V27, P275, DOI 10.1016/0165-0114(88)90054-1
   TANAKA H, 1982, IEEE T SYST MAN CYB, V12, P903
   Wang H, 1999, J INF SCI, V25, P499, DOI 10.1177/016555159902500606
   XIE M, 1998, J INFORMATION SCI, V24, P87
   Yilmaz M.R., 1997, Business Horizon, V40, P51, DOI [DOI 10.1016/S0007-6813(97)90068-9, 10.1016/S0007-6813(97)90068-9]
   ZADEH LA, 1965, INFORM CONTROL, V8, P338, DOI 10.1016/S0019-9958(65)90241-X
   ZULTNER RE, 1993, COMMUN ACM, V36, P78
NR 39
TC 12
Z9 15
U1 1
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2010
VL 18
IS 3
BP 323
EP 339
DI 10.1007/s11219-010-9095-6
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 607BI
UT WOS:000278472900001
DA 2024-07-18
ER

PT J
AU Koschke, R
   Frenzel, P
   Breu, APJ
   Angstmann, K
AF Koschke, Rainer
   Frenzel, Pierre
   Breu, Andreas P. J.
   Angstmann, Karsten
TI Extending the reflexion method for consolidating software variants into
   product lines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 14th Working Conference on Reverse Engineering
CY OCT 28-31, 2007
CL Vancouver, CANADA
SP Reengn Forum, IEEE Comp Soc, Techn Council Ctr Software, Res Ctr Software Technol, German Soc Comp Sci, Software Reengn Interest Grp, Modelsoft Corp Inc, Kent State Univ
DE Architecture reconstruction; Software variants; Reverse engineering;
   Software product lines
ID LEGACY COMPONENT; OBJECTS; DESIGN; MODELS; REUSE
AB Software variants emerge from ad-hoc copying in-the-large with adaptations to a specific context. As the number of variants increases, maintaining such software variants becomes more and more difficult and expensive. In contrast to such ad-hoc reuse, software product lines offer organized ways of reuse, taking advantage of similarities of different products. To re-gain control, software variants may be consolidated as organized software product lines. In this paper, we describe a method and supporting tools to compare software variants at the architectural level extending the reflexion method to software variants. Murphy's reflexion method allows one to reconstruct the module view, a static architectural view describing the static components, their interfaces and dependencies and their grouping as layers and subsystems. The method consists of the specification of the module view and the mapping of implementation components onto the module view. An automatic analysis determines differences between the module view and its implementation. We extend the reflexion method from single systems to software variants. Because software variants share a very large amount of code, we can expect components of one variant to re-occur in the other variant either identically or at least similarly. We use similarity metrics to determine this type of correspondence among implementation components between two variants. Because the similarity metrics are expensive to compute, we use clone detection techniques to reduce the number of candidate pairs of implementation components for which the similarity is computed. The correspondence is then used to transfer as much as possible of the mapping for the analyzed variants to the next variant to be analyzed. Furthermore, we describe how to unify the individual product architectures into a software product line architecture.
C1 [Koschke, Rainer; Frenzel, Pierre] Univ Bremen, Bremen, Germany.
   [Breu, Andreas P. J.; Angstmann, Karsten] Robert Bosch GmbH, Stuttgart, Germany.
C3 University of Bremen; Bosch
RP Koschke, R (corresponding author), Univ Bremen, Bremen, Germany.
EM koschke@informatik.uni-bremen.de; saint@informatik.uni-bremen.de;
   Andreas.Breu@de.bosch.com; Karsten.Angstmann@de.bosch.com
CR ABREU FB, 2000, EUR C SOFTW MAINT RE
   [Anonymous], 2001, SOFTWARE PRODUCT LIN
   Anquetil N, 1998, PROC INT CONF SOFTW, P84, DOI 10.1109/ICSE.1998.671105
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   Balazinska M, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P98, DOI 10.1109/WCRE.2000.891457
   Bayer J., 1999, SSR'99. Proceedings of the Fifth Symposium on Software Reusability. Bridging the Gap Between Research and Practice, P122, DOI 10.1145/303008.303063
   Bayer J, 1999, LECT NOTES COMPUT SC, V1687, P446, DOI 10.1145/318774.319262
   BELADY LA, 1981, J SYST SOFTWARE, V2, P23, DOI 10.1016/0164-1212(81)90043-1
   BERGEY J, 2002, LECT NOTES COMPUTER, V2379, P316
   Bojic D, 2000, EUR C SOFTW MAINT RE
   Canfora G, 1996, SOFTWARE PRACT EXPER, V26, P25, DOI 10.1002/(SICI)1097-024X(199601)26:1<25::AID-SPE994>3.0.CO;2-T
   Canfora G., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P200, DOI 10.1109/ICSM.1993.366942
   Canfora G, 1999, PROG COMPREHEN, P136, DOI 10.1109/WPC.1999.777752
   CHOI SC, 1990, IEEE SOFTWARE, V7, P66, DOI 10.1109/52.43051
   Christl A, 2005, WCRE: 12TH WORKING CONFERENCE ON REVERSE ENGINEERING 2005, PROCEEDINGS, P89
   Christl A, 2007, INFORM SOFTWARE TECH, V49, P255, DOI 10.1016/j.infsof.2006.10.015
   CIMITILE A, 1995, J SYST SOFTWARE, V28, P117, DOI 10.1016/0164-1212(94)00049-S
   Clements P., 2002, DOCUMENTING SOFTWARE
   de Oca CM, 1998, WORK C REV ENG
   EISENBARTH T, 2003, IEEE COMPUTER SOC T, V29
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   Feijs L, 1998, SOFTWARE PRACT EXPER, V28, P371, DOI 10.1002/(SICI)1097-024X(19980410)28:4<371::AID-SPE154>3.0.CO;2-1
   Frenzel P, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P160, DOI 10.1109/WCRE.2007.28
   GALL H, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P208, DOI 10.1109/WCRE.1995.514709
   Garey M. R., 1974, P 6 ANN ACM S THEORY, P47
   Girard J-F, 1997, INT C AUT SOFTW ENG
   Girard J-F, 1997, INT C SOFTW MAINT
   GIRARD JF, 1999, J AUTOMATED SOFTWARE, V6
   Gomaa H., 2005, DESIGNING SOFTWARE P
   GRAUDEJUS H, 1998, IMPLEMENTING CONCEPT
   Guo GYB, 1999, INT FED INFO PROC, V12, P15
   Hofmeister C, 2000, APPL SOFTWARE ARCHIT
   Holt RC, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P210, DOI 10.1109/WCRE.1998.723191
   HUTCHENS DH, 1985, IEEE T SOFTWARE ENG, V11, P749, DOI 10.1109/TSE.1985.232524
   Kazman R, 1996, IEEE SOFTWARE, V13, P47, DOI 10.1109/52.542294
   Kolb R, 2005, PROC IEEE INT CONF S, P369
   Kolb R, 2006, J SOFTW MAINT EVOL-R, V18, P109, DOI 10.1002/smr.329
   Koschke R, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P36, DOI 10.1109/WCRE.2003.1287235
   KOSCHKE R, 2005, REKONSTRUKTION SOFTW, V19
   Koschke R., 2008, SOFTWARE EVOLUTION, P15, DOI DOI 10.1007/978-3-540-76440-3_2
   KOSCHKE R, 2008, FRONTIERS SOFTWARE M
   KOSCHKE R, 2008, INT SUMMER SCH SOFTW
   Koschke Rainer, 2007, DAGST SEM P
   KRUCHTEN PB, 1995, IEEE SOFTWARE, V12, P42, DOI 10.1109/52.469759
   Lindig C, 1997, PROC INT CONF SOFTW, P349, DOI 10.1145/253228.253354
   LIU SS, 1990, INT C SOFTW MAINT, P249
   LIVADAS PE, 1994, J SOFTW MAINT-RES PR, V6, P249, DOI 10.1002/smr.4360060503
   MACCARI A, 2001, P 4 INT WORKSH PROD, P63
   Mahdavi K, 2003, PROC IEEE INT CONF S, P315, DOI 10.1109/ICSM.2003.1235437
   Mancoridis S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P50, DOI 10.1109/ICSM.1999.792498
   Mancoridis S., 1998, INT WORKSH PROGR COM
   Maqbool O, 2004, CSMR 2004: EIGHTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P15, DOI 10.1109/CSMR.2004.1281402
   MENDE T, 2008, EUR C SOFTW MAINT EE
   Mende T, 2009, J SOFTW MAINT EVOL-R, V21, P143, DOI 10.1002/smr.402
   MENS K, 2000, THESIS VRIJE U BRUSS
   MULLER HA, 1992, P 5 ACM SIGSOFT S SO, P88
   MULLER HA, 1985, INT C SOFTW ENG, P80
   Murphy GC, 1997, COMPUTER, V30, P29, DOI 10.1109/2.607045
   Murphy GC, 2001, IEEE T SOFTWARE ENG, V27, P364, DOI 10.1109/32.917525
   Murphy GC, 2001, IEEE COMPUTER SOC T, V27
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   OGANDO RM, 1994, J SOFTW MAINT-RES PR, V6, P261, DOI 10.1002/smr.4360060504
   Patel S., 1992, International Conference on Software Engineering, P38, DOI 10.1109/ICSE.1992.753488
   POLLET D, 2007, EUR C SOFTW MAINT RE, P137
   Postma A, 2003, INFORM SOFTWARE TECH, V45, P171, DOI 10.1016/S0950-5849(02)00193-3
   RIVA C, 2004, THESIS VIENNA U TECH
   RIVA C, 2002, IEEE IFIP WORK C SOF
   Roy C. K., 2007, 541 QUEENS U
   Saeed M, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P301, DOI 10.1109/CSMR.2003.1192438
   Sahraoui HA, 1997, AUTOMATED SOFTWARE ENGINEERING, 12TH IEEE INTERNATIONAL CONFERENCE, PROCEEDINGS, P210, DOI 10.1109/ASE.1997.632841
   Sartipi K, 2003, PROC IEEE INT CONF S, P224, DOI 10.1109/ICSM.2003.1235425
   Sartipi K, 2001, PROC IEEE INT CONF S, P408, DOI 10.1109/ICSM.2001.972754
   Sartipi K, 2001, PROG COMPREHEN, P115, DOI 10.1109/WPC.2001.921721
   Sartipi K, 2000, EUR C SOFTW MAINT RE
   SARTIPI K, 2000, INT WORKSH PROGR COM
   SCHWANKE RW, 1994, MACH LEARN, V15, P137, DOI 10.1007/BF00993275
   Schwanke RW, 1992, INT C SOFTW ENG
   Shokoufandeh A, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P3, DOI 10.1109/WCRE.2002.1173059
   Siff M, 1999, IEEE T SOFTWARE ENG, V25, P749, DOI 10.1109/32.824377
   Siff M, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P170, DOI 10.1109/ICSM.1997.624243
   Stoermer C, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P35, DOI 10.1109/WICSA.2001.948405
   Tonella P, 2001, IEEE T SOFTWARE ENG, V27, P351, DOI 10.1109/32.917524
   Tzerpos V, 1997, WORK C REV ENG
   Valasareddi RR, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P50, DOI 10.1109/WCRE.1998.723175
   van der Linden F, 2002, IEEE SOFTWARE, V19, P41, DOI 10.1109/MS.2002.1020286
   van Deursen A., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P246, DOI 10.1109/ICSE.1999.841014
   Weidl J, 1998, P 22 COMP SOFTW APPL
   WIGGERT TA, 1998, WORK C REV ENG, P33
   Xing ZC, 2004, PROC IEEE INT CONF S, P242
   YEH AS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P227, DOI 10.1109/WCRE.1995.514711
   Zou LJ, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P146
   [No title captured]
NR 92
TC 41
Z9 46
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2009
VL 17
IS 4
SI SI
BP 331
EP 366
DI 10.1007/s11219-009-9077-8
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 490VR
UT WOS:000269536600003
DA 2024-07-18
ER

PT J
AU Liu, Q
   Qin, WZ
   Mintram, R
   Ross, M
AF Liu, Qin
   Qin, Wen Zhong
   Mintram, Robert
   Ross, Margaret
TI Evaluation of preliminary data analysis framework in software cost
   estimation based on ISBSG R9 Data
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 22nd ACM Symposium on Applied Computing
CY MAR 11-15, 2007
CL Seoul, SOUTH KOREA
SP ACM
DE software engineering data analysis; software cost estimation; ISBSG data
   R9
ID MODEL
AB Previous research has argued that preliminary data analysis is necessary for software cost estimation. In this paper, a framework for such analysis is applied to a substantial corpus of historical project data (ISBSG R9 data), selected without explicit bias. The consequent analysis yields sets of dominant variables, which are then used to construct project effort estimation models. Performance of the predictors on the raw variables and the extracted sets of variables is then measured in terms of Mean Magnitude of Relative Error (MMRE), Median of Magnitude of Relative Error (MdMRE) and prediction at levels 0.05, 0.1, and 0.25. The results from the comparative evaluation suggest that more accurate prediction models can be constructed for the selected prediction techniques. The framework processed predictor variables are statistically significant, at the 95% confidence level for both parametric techniques and one non-parametric technique. The results are also compared with the latest published results obtained by other research based on the same data set. The comparison indicates that, the models constructed using framework processed data are generally more accurate.
C1 [Liu, Qin; Qin, Wen Zhong] Tongji Univ, Sch Software Engn, Shanghai 200092, Peoples R China.
   [Mintram, Robert] Bournemouth Univ, Sch Design Engn & Comp, Bournemouth, Dorset, England.
   [Ross, Margaret] Southampton Solent Univ, Fac Technol, Southampton, Hants, England.
C3 Tongji University; Bournemouth University; Solent University
RP Liu, Q (corresponding author), Tongji Univ, Sch Software Engn, Shanghai 200092, Peoples R China.
EM qin.liu@mail.tongji.edu.cn; wenzhongq@mail.tongji.edu.cn;
   robert.mintram@bournemouth.co.uk; Margaret.ross@solent.ac.uk
CR Angelis L., 2000, Empirical Software Engineering, V5, P35, DOI 10.1023/A:1009897800559
   [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], 1993, Cluster Analysis
   [Anonymous], 1991, Multivariate statistical analysis: A conceptual introduction
   [Anonymous], 1990, Robust estimation and testing
   [Anonymous], 2002, Applied Statistics for Software Managers
   BAILEY JW, 1981, P 5 INT C SOFTW ENG, P107
   Barnett V., 1985, OUTLIERS STAT DATA, V2nd
   BISIO R, 1995, P 1 INT C CAS BAS RE
   Blewitt ME, 2008, NAT GENET, V40, P663, DOI 10.1038/ng.142
   Boehm BW., 1981, Software Engineering Economics
   BREIMAN L, 1992, INT STAT REV, V60, P291, DOI 10.2307/1403680
   Briand L. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P377, DOI 10.1109/ICSE.2000.870428
   Briand LC, 1999, P 21 INT C SOFTW ENG, DOI DOI 10.1145/302405.302647
   Chatfield C., 1983, STAT TECHNOLOGY COUR, V3rd
   COOK D, 1994, WILEY SERIES
   Dalgaard P., 2002, INTRO STAT R
   Dillon W.R., 1984, MULTIVARIATE ANAL ME
   FERENS DV, 1992, IEEE NAT AER EL C NA, V2, P625
   Foss T, 2003, IEEE T SOFTWARE ENG, V29, P985, DOI 10.1109/TSE.2003.1245300
   Hair J.F., 1995, MULTIVARIATE DATA AN
   JEFFERY DR, 1990, SOFTWARE ENG J, V5, P215, DOI 10.1049/sej.1990.0024
   Jeffery R, 2000, INFORM SOFTWARE TECH, V42, P1009, DOI 10.1016/S0950-5849(00)00153-1
   JEFFERY R, 2001, P 7 METRICS 2001, P239
   Judd C.M., 1991, Research methods in social relations, V6th
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Kitchenham B, 1998, IEEE T SOFTWARE ENG, V24, P278, DOI 10.1109/32.677185
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   KOHAVI R, 1995, P INT JOINT C ART IN, P223
   Liu Q, 2005, SOFTWARE QUAL J, V13, P91, DOI 10.1007/s11219-004-5262-y
   LIU Q, 2005, THESIS NORTHUMBRIA U
   LIU Q, 2005, P INT C COMP SCI INF
   Lokan C. J., 1999, Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403), P200, DOI 10.1109/METRIC.1999.809741
   MAROUANE R, 1989, INFORM SOFTWARE TECH, V31, P251, DOI 10.1016/0950-5849(89)90004-9
   Maxwell KD, 1996, IEEE T SOFTWARE ENG, V22, P706, DOI 10.1109/32.544349
   MIYAZAKI Y, 1991, INFORM SOFTWARE TECH, V33, P239, DOI 10.1016/0950-5849(91)90139-3
   Moses J, 2005, SOFTWARE QUAL J, V13, P71, DOI 10.1007/s11219-004-5261-z
   MUKHOPADHYAY T, 1992, MIS QUART, V16, P155, DOI 10.2307/249573
   OJA E, 1992, NEURAL NETWORKS, V5, P927, DOI 10.1016/S0893-6080(05)80089-9
   OJA E, 1982, J MATH BIOL, V15, P267, DOI 10.1007/BF00275687
   OLIGNY S, 1997, P IFPUG 1997 FALL C
   OLIGNY S, 1997, P 8 EUR SOFTW CONTR, P9
   PARE D, 2005, METRICS NEWS, V10, P28
   Putnam L., 1992, MEASURES EXCELLENCE
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   SHEPPERD MJ, 1996, P ICSE, V18, P170
   SRINIVASAN K, 1995, IEEE T SOFTWARE ENG, V21, P126, DOI 10.1109/32.345828
   STEPHEN AD, 1997, FORECASTING PRINCIPL
   STONE M, 1974, J R STAT SOC B, V36, P111, DOI 10.1111/j.2517-6161.1974.tb00994.x
   Wittig G, 1997, INFORM SOFTWARE TECH, V39, P469, DOI 10.1016/S0950-5849(97)00004-9
NR 50
TC 7
Z9 9
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2008
VL 16
IS 3
BP 411
EP 458
DI 10.1007/s11219-007-9041-4
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330RE
UT WOS:000257959700007
DA 2024-07-18
ER

PT J
AU Niazi, M
   Cox, K
   Verner, J
AF Niazi, Mahmood
   Cox, Karl
   Verner, June
TI A measurement framework for assessing the maturity of requirements
   engineering process
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 2nd Workshop on Advances in Model-based Software Testing
CY NOV 06, 2006
CL Raleigh, NC
DE process maturity; process improvement; requirements engineering
ID SOFTWARE PROCESS IMPROVEMENT; USER ACCEPTANCE; IMPLEMENTATION; COMPANIES
AB Because requirements engineering (RE) problems are widely acknowledged as having a major impact on the effectiveness of the software development process, Sommerville et al. have developed a requirements maturity model. However, research has shown that the measurement process within Sommerville's model is ambiguous, and implementation of his requirements maturity model leads to confusion. Hence, the objective of our research is to propose a new RE maturity measurement framework (REMMF) based on Sommerville's model and to provide initial validation of REMMF. The main purpose of proposing REMMF is to allow us to more effectively measure the maturity of the RE processes being used within organisations and to assist practitioners in measuring the maturity of their RE processes. In order to evaluate REMMF, two organisations implemented the measurement framework within their IT divisions, provided us with an assessment of their requirements process and gave feedback on the REMMF measurement process. The results show that our measurement framework is clear, easy to use and provides an entry point through which the practitioners can effectively judge the strengths and weakness of their RE processes. When an organisation knows where it is, it can more effectively plan for improvement.
C1 [Niazi, Mahmood] Keele Univ, Sch Comp & Math, Keele, Staffs, England.
   [Cox, Karl; Verner, June] Natl ICT Australia, Empir Software Engn, Sydney, NSW, Australia.
C3 Keele University; NICTA
RP Niazi, M (corresponding author), Keele Univ, Sch Comp & Math, Keele, Staffs, England.
EM mkniazi@cs.keele.ac.uk; karl.cox@nicta.com.au; june.verner@nicta.com.au
RI Niazi, Mahmood/C-8873-2015
OI Niazi, Mahmood/0000-0001-7318-7644
CR Alexander I. F., 2002, Writing Better Requirements
   [Anonymous], 1995, Chaos, P1
   [Anonymous], 1997, Requirements engineering: a good practice guide
   [Anonymous], 2003, Software requirements
   [Anonymous], CHAOS REC SUCC
   Beecham S, 2003, EMPIR SOFTW ENG, V8, P7, DOI 10.1023/A:1021764731148
   BEECHAM S, 2003, 378 U HERTF DEP COMP
   BEECHAM S, 2003, EXPERT PANEL QUESTIO
   BOEHM BW, 1987, COMPUTER, V20, P43, DOI 10.1109/MC.1987.1663694
   Briand L. C., 2001, Empirical Software Engineering, V6, P11, DOI 10.1023/A:1009815306478
   Chatzoglou P. D., 1996, Requirements Engineering, V1, P75, DOI 10.1007/BF01235903
   Cooper D.R., 2001, BUSINESS RES METHODS
   DASKALANTONAKIS MK, 1994, IEEE SOFTWARE, V11, P17, DOI 10.1109/52.300079
   DAVIS FD, 1989, MANAGE SCI, V35, P982, DOI 10.1287/mnsc.35.8.982
   DAVIS FD, 1989, MIS QUART, V13, P319, DOI 10.2307/249008
   Diaz M, 1997, IEEE SOFTWARE, V14, P75, DOI 10.1109/52.605934
   ELEMAM K, 1995, 2 INT S REQ ENG, P68
   Gorschek T., 2003, P REQ ENG FDN SOFTW, P83
   Hall T., 2002, IEE Proceedings-Software, V149, P153, DOI 10.1049/ip-sen:20020694
   Hofmann HF, 2001, IEEE SOFTWARE, V18, P58, DOI 10.1109/MS.2001.936219
   Humphrey WS, 2002, ANN SOFTW ENG, V14, P39, DOI 10.1023/A:1020593305601
   Kamsties E., 1998, Requirements Engineering, V3, P84, DOI 10.1007/BF02919967
   KAUPPINEN M, 2002, P 7 EUR C SOFTW QUAL, P45
   MacDonell SG, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P73, DOI 10.1109/METRIC.2003.1232457
   MARJO K, 2001, P 11 ANN INT S INT C
   Neill CJ, 2003, IEEE SOFTWARE, V20, P40, DOI 10.1109/MS.2003.1241365
   Ngwenyama O, 2003, IEEE T ENG MANAGE, V50, P100, DOI 10.1109/TEM.2002.808267
   Niazi M, 2005, J SYST SOFTWARE, V78, P204, DOI 10.1016/j.jss.2004.09.001
   Niazi M, 2005, LECT NOTES COMPUT SC, V3547, P574
   Niazi M, 2005, J SYST SOFTWARE, V74, P155, DOI 10.1016/j.jss.2003.10.017
   NIAZI M, 2005, 14 INT C INF SYST DE
   Niazi M, 2004, THESIS U TECHNOLOGY
   NIAZI M, 2003, IEEE INT MULT C INMI, P402
   Niazi M., 2005, The 17th International Conference on Software Engineering and Knowledge Engineering, July 14-16, 2005, P396
   Nikula U., 2000, P 5 AUSTR WORKSH REQ, P81
   Nuseibeh B., 2000, P C FUTURE SOFTWARE, P35, DOI [10.1145/336512.336523, DOI 10.1145/336512.336523]
   Regnell B., 2000, Empirical Software Engineering, V5, P331, DOI 10.1023/A:1009848320066
   Sawyer P., 1997, SOFTWARE PROCESS IMP, V3, P19, DOI [DOI 10.1002/(SICI)1099, 10.1002/(SICI)1099-1670(199703)3:13.0.CO;2-X, DOI 10.1002/(SICI)1099-1670(199703)3:1<19::AID-]
   *SCAMPI, 2001, CMUSEI2001BH001
   Siddiqi J, 1996, IEEE SOFTWARE, V13, P15, DOI 10.1109/MS.1996.506458
   Sommerville I, 2005, ACM T SOFTW ENG METH, V14, P85, DOI 10.1145/1044834.1044837
   Sommerville I, 1998, THIRD INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING - PROCEEDINGS, P74, DOI 10.1109/ICRE.1998.667811
   Sommerville I., 1996, Software Engineering, V5th
   *STAND GROUP, 2003, CHAOS STAT SOFTW IND
   VERNER J, 2005, IN PRESS AUSTR J SEP
   Verner JM, 2005, IEEE SOFTWARE, V22, P86, DOI 10.1109/MS.2005.12
   Yin RobertK., 1993, Applications of Case Study Research
NR 47
TC 16
Z9 18
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2008
VL 16
IS 2
BP 213
EP 235
DI 10.1007/s11219-007-9033-4
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 286MP
UT WOS:000254850300004
DA 2024-07-18
ER

PT J
AU Robinson-Mallett, C
   Hierons, RM
   Poore, J
   Liggesmeyer, P
AF Robinson-Mallett, Christopher
   Hierons, Robert M.
   Poore, Jesse
   Liggesmeyer, Peter
TI Using communication coverage criteria and partial model generation to
   assist software integration testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 2nd Workshop on Advances in Model-based Software Testing
CY NOV   06, 2006
CL Raleigh, NC
DE integration testing; distributed systems; coverage criteria; timed
   state-based specifications
ID DISTRIBUTED SYSTEMS
AB This paper considers the problem of integration testing the components of a timed distributed software system. We assume that communication between the components is specified using timed interface automata and use computational tree logic (CTL) to define communication-based coverage criteria that refer to send- and receive-statements and communication paths. The proposed method enables testers to focus during component integration on such parts of the specification, e.g. behaviour specifications or Markovian usage models, that are involved in the communication between components to be integrated. A more specific application area of this approach is the integration of test-models, e.g. a transmission gear can be tested based on separated models for the driver behaviour, the engine condition, and the mechanical and hydraulical transmission states. Given such a state-based specification of a distributed system and a concrete coverage goal, a model checker is used in order to determine the coverage or generate test sequences that achieve the goal. Given the generated test sequences we derive a partial test-model of the components from which the test sequences were derived. The partial model can be used to drive further testing and can also be used as the basis for producing additional partial models in incremental integration testing. While the process of deriving the test sequences could suffer from a combinatorial explosion, the effort required to generate the partial model is polynomial in the number of test sequences and their length. Thus, where it is not feasible to produce test sequences that achieve a given type of coverage it is still possible to produce a partial model on the basis of test sequences generated to achieve some other criterion. As a result, the process of generating a partial model has the potential to scale to large industrial software systems. While a particular model checker, UPPAAL, was used, it should be relatively straightforward to adapt the approach for use with other CTL based model checkers. A potential additional benefit of the approach is that it provides a visual description of the state-based testing of distributed systems, which may be beneficial in other contexts such as education and comprehension.
C1 [Robinson-Mallett, Christopher] Berner & Mattner Syst Tech GmbH, Berlin, Germany.
   [Hierons, Robert M.] Brunel Univ, Uxbridge UB8 3PH, Middx, England.
   [Poore, Jesse] Univ Tennessee, Knoxville, TN USA.
   [Liggesmeyer, Peter] Univ Kaiserslautern, Kaiserslautern, Germany.
C3 Brunel University; University of Tennessee System; University of
   Tennessee Knoxville; University of Kaiserslautern
RP Robinson-Mallett, C (corresponding author), Berner & Mattner Syst Tech GmbH, Berlin, Germany.
EM robinson-mallett@berner-mattner.com; rob.hierons@brunel.ac.uk;
   poore@cs.utk.edu; liggesmeyer@informatik.uni-kl.de
OI Hierons, Robert/0000-0002-4771-1446
CR Aizenbud-Reshef N, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P276, DOI 10.1109/ISSRE.2001.989481
   ALUR R, 1994, THEORETICAL COMPUTER, V126, P235
   [Anonymous], 1981, P WORKSHOP LOGIC PRO
   BENGTSSON J, 1995, UPPAAL TOOL SUITE AU
   CARDELLOLIVER R, 2002, P INT S SOFTW TEST A, P159
   Clarke Edmund M., 2001, Model Checking
   De Alfaro L, 2002, LECT NOTES COMPUT SC, V2491, P108
   DEALFARO L, 2001, P 9 ANN S FDN SOFTW, P109
   Glässer U, 2004, IEEE T SOFTWARE ENG, V30, P458, DOI 10.1109/TSE.2004.25
   HARROLD MJ, 1994, P S FDN SOFTW ENG AC
   Hong HS, 2003, PROC INT CONF SOFTW, P232
   Hong HS, 2002, INT C TOOLS ALG CONS
   HUHN M, 2004, TESTING COMMUNICATIO
   Khoumsi A, 2002, IEEE T SOFTWARE ENG, V28, P1085, DOI 10.1109/TSE.2002.1049406
   LIU W, 2001, CAN C EL COMP ENG, V1, P41
   MOORE EF, 1956, ANN MATH STUDIES, V34
   OFFUTT AJ, 1999, P 5 INT C ENG COMPL
   Prowell SJ, 2004, J SYST SOFTWARE, V73, P219, DOI [10.1016/S0164-1212(03)00241-3, 10.1016/s0164-1212(03)00241-3]
   PROWELL SJ, 2003, P 36 HAW INT C SYST
   Robinson-Mallett C, 2006, INFORM SOFTWARE TECH, V48, P981, DOI 10.1016/j.infsof.2006.03.006
   ROBINSONMALLETT C, 2005, WORKSH ADV MOD BAS S
   ROBINSONMALLETT C, 2006, WORKSH ADV MOD BAS T
   ROBINSONMALLETT C, 2007, IASTED INT C SOFTW E
   VANBOCHMANN G, 1994, P 1994 INT S SOFTW T, P109
NR 24
TC 6
Z9 7
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2008
VL 16
IS 2
BP 185
EP 211
DI 10.1007/s11219-007-9036-1
PG 27
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 286MP
UT WOS:000254850300003
DA 2024-07-18
ER

PT J
AU Kwon, S
   Ryu, D
   Baik, J
AF Kwon, Sunjae
   Ryu, Duksan
   Baik, Jongmoon
TI An effective approach to improve the performance of eCPDP (early
   cross-project defect prediction) via data-transformation and parameter
   optimization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE CPDP; Transfer learning; SVD; Unit testing phase
ID SOFTWARE DEFECTS
AB Cross-project defect prediction (CPDP) utilizes other finished projects (i.e., source project) data to predict defects of the current working project. Transfer learning (TL) has been mainly applied at CPDP to improve prediction performance by alleviating the data distribution discrepancy between different projects. However, existing TL-based CPDP techniques are not applicable at the unit testing phase since they require the entire historical target project data. As a result, they lose the chance to increase the product's reliability in the early phase by applying the prediction results. The objective of the present study is to increase the product's reliability in the early phase by proposing a novel TL-based CPDP technique applicable at the unit testing phase (i.e., eCPDP). We utilize singular value decomposition (SVD), which only requires source project data for TL. eCPDP performs similarly or better than the 8 state-of-the-art TL-based CPDP techniques on 9 different performance metrics over 24 projects. In conclusion, (1) we show that eCPDP is an applicable CPDP model at the unit testing phase. (2) It can help practitioners find and fix defects in an earlier phase than other TL-based CPDP techniques.
C1 [Kwon, Sunjae; Baik, Jongmoon] Korea Adv Inst Sci & Technol, Daejeon, South Korea.
   [Ryu, Duksan] Jeonbuk Natl Univ, Jeonju, South Korea.
C3 Korea Advanced Institute of Science & Technology (KAIST); Jeonbuk
   National University
RP Baik, J (corresponding author), Korea Adv Inst Sci & Technol, Daejeon, South Korea.
EM cadet6465@kaist.ac.kr; duksan.ryu@jbnu.ac.kr; jbaik@kaist.ac.kr
RI Baik, Jongmoon/C-1780-2011
CR Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Bennin KE, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2016), P214, DOI 10.1109/QRS.2016.33
   Brunton SL, 2019, Data-driven science and engineering, DOI DOI 10.1017/9781108380690
   Chen L, 2015, INFORM SOFTWARE TECH, V62, P67, DOI 10.1016/j.infsof.2015.01.014
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cruz AEC, 2009, INT SYMP EMP SOFTWAR, P461
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Friedman M, 1940, ANN MATH STAT, V11, P86, DOI 10.1214/aoms/1177731944
   Gong LN, 2020, IEEE T RELIAB, V69, P40, DOI 10.1109/TR.2019.2895462
   Gretton A, 2012, J MACH LEARN RES, V13, P723
   Han J, 2012, MOR KAUF D, P1
   He Z., 2012, AUTOMAT SOFTW ENG, V1
   Herbold S., 2013, P 9 INT C PREDICTIVE, P1
   Herbold S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1063, DOI 10.1145/3180155.3182542
   Hosseini S, 2018, INFORM SOFTWARE TECH, V95, P296, DOI 10.1016/j.infsof.2017.06.004
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Kang J, 2021, APPL SCI-BASEL, V11, DOI 10.3390/app11052002
   Kawata K, 2015, 3RD INTERNATIONAL CONFERENCE ON APPLIED COMPUTING AND INFORMATION TECHNOLOGY (ACIT 2015) 2ND INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND INTELLIGENCE (CSI 2015), P2, DOI 10.1109/ACIT-CSI.2015.104
   Kwon S, 2021, IEEE INT C S Q R S, P470, DOI 10.1109/QRS54544.2021.00058
   Li K, 2020, PROC INT CONF SOFTW, P566, DOI 10.1145/3377811.3380360
   Li K, 2020, IEEE INT CONF AUTOM, P573, DOI 10.1145/3324884.3416617
   Li ZQ, 2021, IEEE T RELIAB, V70, P996, DOI 10.1109/TR.2021.3074660
   Li ZQ, 2017, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2017.19
   Limsettho N, 2018, INFORM SOFTWARE TECH, V100, P87, DOI 10.1016/j.infsof.2018.04.001
   Liu C, 2019, INFORM SOFTWARE TECH, V107, P125, DOI 10.1016/j.infsof.2018.11.005
   Mende T, 2010, EUR CON SFTWR MTNCE, P107, DOI 10.1109/CSMR.2010.18
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P637, DOI 10.1109/TSE.2007.70721
   Misra S., 2017, COMM COM INF SC, P309
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   NEMENYI P, 1962, BIOMETRICS, V18, P263
   Ni C, 2017, P INT COMP SOFTW APP, P51, DOI 10.1109/COMPSAC.2017.127
   Panichella A, 2016, GECCO'16: PROCEEDINGS OF THE 2016 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1077, DOI 10.1145/2908812.2908938
   Pascarella L, 2019, J SYST SOFTWARE, V150, P22, DOI 10.1016/j.jss.2018.12.001
   Planning S., 2002, EC IMP IN INFR SOFTW
   Qilong Ba, 2013, 2013 IEEE 4th International Conference on Software Engineering and Service Science (ICSESS), P963, DOI 10.1109/ICSESS.2013.6615466
   Reddy M. S., 2014, COMP COMM INF ICCCI, P1, DOI DOI 10.1109/ICCCI.2014.6921744
   Shin Y, 2011, IEEE T SOFTWARE ENG, V37, P772, DOI 10.1109/TSE.2010.81
   Sun ZB, 2021, APPL SOFT COMPUT, V99, DOI 10.1016/j.asoc.2020.106940
   Tantithamthavorn C, 2019, IEEE T SOFTWARE ENG, V45, P683, DOI 10.1109/TSE.2018.2794977
   Thomas Zimmermann., 2009, P THE 7 JOINT M EURO, P91, DOI DOI 10.1145/1595696.1595713
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Xia X, 2016, IEEE T SOFTWARE ENG, V42, P977, DOI 10.1109/TSE.2016.2543218
   Xu Z, 2019, J COMPUT SCI TECH-CH, V34, P1039, DOI 10.1007/s11390-019-1959-z
   Yatish S, 2019, PROC INT CONF SOFTW, P654, DOI 10.1109/ICSE.2019.00075
   Yuan XF, 2019, KNOWL-BASED SYST, V163, P485, DOI 10.1016/j.knosys.2018.09.011
   Zhang F, 2017, EMPIR SOFTW ENG, V22, P3186, DOI 10.1007/s10664-017-9516-2
   Zhang H., 2013, P 2013 9 JOINT M FDN, P643, DOI DOI 10.1145/2491411.2494581
   Zhou YM, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3183339
NR 51
TC 0
Z9 0
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1009
EP 1044
DI 10.1007/s11219-023-09624-6
EA MAR 2023
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY4P9
UT WOS:000949286800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Sharifi, E
   Abdolahzadeh-Barforoosh, A
AF Sharifi, Ehsan
   Abdolahzadeh-Barforoosh, Ahmad
TI Quality attribute traceability based on Clone Microtactics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Traceability; Quality attributes; Architectural tactic; Clone
   Microtactics
ID FRAMEWORK; CODE
AB Traceability is a technique that allows the validation and verification of product requirements. Traceability is more important in safety-critical systems. Safety-critical standards, such as automotive ISO 26262 and avionics DO-178C, mandate traceability. Tracing functional requirements is a relatively mature field of research that involves multiple studies. However, the traceability of quality attributes remains a challenge. Quality attributes have a wide range of effects on a system and are achieved from various architectural perspectives. Architectural patterns and tactics are commonly used to obtain quality attributes. An architectural tactic is a fine-grained design decision to achieve specified quality attributes in source code. Therefore, identifying architectural tactics in the source code makes it possible to trace quality attributes. This paper introduces a new quality attribute traceability approach based on Clone Microtactics. A Microtactic is a microstructure associated with an architectural tactic that is automatically identifiable in the conceptual representation of the source code. The concept of Clone Microtactics is inspired by semantic code clones. Clone Microtactics are similar in behavior and context, although they do not have the same structure. The proposed approach identifies architectural tactics in the source code based on Clone Microtactics. Identifying architectural tactics also enables quality attribute traceability in the source code. The proposed method is a process in three main phases. In the first phase, a reference model of the Microtactics is created manually. This model is generated once at the beginning of the process. In the second phase, a conceptual model of the modified part of the source code is created. This step is repeated for each change in the source code. In the third phase, using the hybrid similarity method, Clone Microtactics are identified. The proposed approach is implemented on ten architectural tactics related to availability, performance, and security. Also, the results of this approach have been evaluated on the Hadoop framework. The evaluation results show that the proposed approach provides acceptable results compared with other methods in this field.
C1 [Sharifi, Ehsan; Abdolahzadeh-Barforoosh, Ahmad] Amirkabir Univ, Comp Engn Coll, Tehran, Iran.
C3 Amirkabir University of Technology
RP Abdolahzadeh-Barforoosh, A (corresponding author), Amirkabir Univ, Comp Engn Coll, Tehran, Iran.
EM esharif@aut.ac.ir; ahmad@aut.ac.ir
CR [Anonymous], 2000, ATAM: Method for Architecture Evaluation
   Atzeni M, 2017, LECT NOTES COMPUT SC, V10588, P20, DOI 10.1007/978-3-319-68204-4_2
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Chung L, 2012, Non-Functional Requirements in Software Engineering, V5
   Cleland-Huang J, 2005, PROC INT CONF SOFTW, P362
   Cleland-Huang J., 2003, Requirements Engineering, V8, P171, DOI 10.1007/s00766-003-0175-z
   Cleland-Huang J., 2014, SOFTWARE TRACEABILIT
   Cleland-Huang J, 2013, 2013 7TH INTERNATIONAL WORKSHOP ON TRACEABILITY IN EMERGING FORMS OF SOFTWARE ENGINEERING (TEFSE), P5, DOI 10.1109/TEFSE.2013.6620147
   Decker S, 2000, IEEE INTERNET COMPUT, V4, P68, DOI 10.1109/4236.895018
   Gil J, 2005, ACM SIGPLAN NOTICES, V40, P97, DOI 10.1145/1103845.1094819
   Gotel O., 2012, SOFTWARE SYSTEMS TRA, P3, DOI [DOI 10.1007/978-1-4471-2239-5_1, 10.1007/978-1-4471-2239-5_1]
   Harrison NB, 2010, J SYST SOFTWARE, V83, P1735, DOI 10.1016/j.jss.2010.04.067
   Hofmeister C., 2000, APPL SOFTWARE ARCHIT
   Keim J, 2020, LECT NOTES COMPUT SC, V12292, P220, DOI 10.1007/978-3-030-58923-3_15
   Kim D.-K., 2007, Design Pattern Formalization Techniques, P183
   Kim S, 2009, J SYST SOFTWARE, V82, P1211, DOI 10.1016/j.jss.2009.03.102
   Kumar N., 2013, Computing, Communications and Networking Technologies (ICCCNT),2013 Fourth International Conference on, P1
   Maggioni, 2010, DESIGN PATTERN DETEC
   Maggioni S., 2006, P DPD4RE WORKSH COL
   Mahmoud A, 2016, REQUIR ENG, V21, P357, DOI 10.1007/s00766-016-0252-8
   Mirakhorli M., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P123, DOI 10.1109/ICSM.2011.6080779
   Mirakhorli M., 2014, THESIS COLL COMPUTIN
   Mirakhorli M., 2012, Software and systems traceability, P299, DOI DOI 10.1007/978-1-4471-2239-5_14
   Mirakhorli M, 2016, IEEE T SOFTWARE ENG, V42, P206, DOI 10.1109/TSE.2015.2479217
   Mirakhorli M, 2012, PROC INT CONF SOFTW, P639, DOI 10.1109/ICSE.2012.6227153
   Page-Jones Meilir., 1999, Fundamentals of Object-Oriented Design in UML
   Shahbazi Z, 2022, SOFTWARE QUAL J, V30, P651, DOI 10.1007/s11219-021-09576-9
   Sheneamer A, 2018, EXPERT SYST APPL, V97, P405, DOI 10.1016/j.eswa.2017.12.040
   Sudhamani M, 2019, EXPERT SYST APPL, V132, P63, DOI 10.1016/j.eswa.2019.04.045
   Wang WT, 2018, IEEE T IND INFORM, V14, P342, DOI 10.1109/TII.2016.2637166
   WU ZB, 1994, 32ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P133
   Yu ESK, 1997, RE '97 - PROCEEDINGS OF THE THIRD IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, P226, DOI 10.1109/ISRE.1997.566873
   Zanoni M, 2015, J SYST SOFTWARE, V103, P102, DOI 10.1016/j.jss.2015.01.037
NR 33
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 533
EP 573
DI 10.1007/s11219-022-09606-0
EA NOV 2022
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000886844100001
DA 2024-07-18
ER

PT J
AU Shahbazi, Z
   Rasoolzadegan, A
   Purfallah, Z
   Horestani, SJ
AF Shahbazi, Zeinab
   Rasoolzadegan, Abbas
   Purfallah, Zahra
   Horestani, Somayeh Jafari
TI A new method for detecting various variants of GoF design patterns using
   conceptual signatures
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Reverse engineering; Design pattern; Pattern detection; Conceptual
   signatures
ID INSTANCES; RECOVERY; TOOL
AB Software design patterns are well-known solutions for solving commonly occurring problems in software design. Detecting design patterns used in the code can help to understand the structure and behavior of the software, evaluate the quality of the software, and trace important design decisions. To develop and maintain a software system, we need sufficient knowledge of design decisions and software implementation processes. However, the acquisition of knowledge related to design patterns used in complex software systems is a challenging, time-consuming, and costly task. Therefore, using a suitable method to detect the design patterns used in the code reduces software development and maintenance costs. In this paper, we proposed a new method based on conceptual signatures to improve the accuracy of design pattern detection. So we used the conceptual signatures based on the purpose of patterns to detect the patterns' instances that conform to the standard structure of patterns, and cover more instances of patterns' variants and implementation versions of the patterns and improve the accuracy of pattern detection. The proposed method is a specific process in two main phases. In the first phase, the conceptual signature and detection formula for each pattern is determined manually. Then in the second phase, each pattern in the code is detected in a semi-automatic process using the conceptual signature and pattern detection formula. To implement the proposed method, we focused on GoF design patterns and their variants. We evaluated the accuracy of our proposed method on five open-source projects, namely, Junit v3.7, JHotDraw v5.1, QuickUML 2001, JRefactory v2.6.24, and MapperXML v1.9.7. Also, we performed our experiments on a set of source codes containing the instances of GoF design patterns' variants for a comprehensive and fair evaluation. The evaluation results indicate that the proposed method has improved the accuracy of design pattern detection in the code.
C1 [Shahbazi, Zeinab; Rasoolzadegan, Abbas; Purfallah, Zahra] Ferdowsi Univ Mashhad, Comp Engn Dept, Software Qual Lab, Mashhad, Razavi Khorasan, Iran.
   [Horestani, Somayeh Jafari] Ferdowsi Univ Mashhad, Comp Engn Dept, Mashhad, Razavi Khorasan, Iran.
C3 Ferdowsi University Mashhad; Ferdowsi University Mashhad
RP Rasoolzadegan, A (corresponding author), Ferdowsi Univ Mashhad, Comp Engn Dept, Software Qual Lab, Mashhad, Razavi Khorasan, Iran.
EM zeynab.shabbazi@mail.um.ac.ir; rasoolzadegan@um.ac.ir;
   zahra.purfallah@mail.um.ac.ir; Somayeh_mz@yahoo.com
RI Rasoolzadegan, Abbas/A-1729-2017
OI Rasoolzadegan, Abbas/0000-0001-8668-5650
CR Al-Obeidallah MG, 2018, INT J SOFTW INNOV, V6, P36, DOI 10.4018/IJSI.2018070103
   Alnusair A, 2014, INT J SOFTW TOOLS TE, V16, P315, DOI 10.1007/s10009-013-0292-z
   Bernardi M. L., 2015, CAISE FORUM
   Bernardi ML, 2014, J SOFTW-EVOL PROC, V26, P1233, DOI 10.1002/smr.1674
   Binun A., 2012, THESIS U LANDESBIBLI
   Blewitt A., 2005, INT C AUTOMATED SOFT, P224
   CHIHADA A, 2014, APPL SOFT COMPUT
   Cutting D., 2016, THESIS U E ANGLIA UE
   Cutting D., 2014, P 9 INT C SOFTW ENG, P584, DOI [10.13140/2.1.3032.9127, DOI 10.13140/2.1.3032.9127]
   De Lucia A, 2018, ACM T SOFTW ENG METH, V26, DOI 10.1145/3176643
   De Lucia A, 2010, EUR CON SFTWR MTNCE, P176, DOI 10.1109/CSMR.2010.16
   De Lucia A, 2009, J SYST SOFTWARE, V82, P1177, DOI 10.1016/j.jss.2009.02.012
   De Lucia A, 2009, EUR CON SFTWR MTNCE, P99, DOI 10.1109/CSMR.2009.29
   De Lucia Andrea., 2010, Proceedings of the IEEE International Conference on Software Maintenance, ICSM, P1, DOI DOI 10.1109/ICSM.2010.5609707
   Dong J, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P371
   Dong J, 2009, INT J SOFTW ENG KNOW, V19, P823, DOI 10.1142/S021819400900443X
   Dong J, 2009, IEEE T SYST MAN CY A, V39, P1271, DOI 10.1109/TSMCA.2009.2028012
   Dong J, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P765
   Dwivedi AK, 2019, INNOV SYST SOFTW ENG, V15, P87, DOI 10.1007/s11334-019-00329-3
   Dwivedi AK, 2018, FRONT COMPUT SCI-CHI, V12, P908, DOI 10.1007/s11704-017-6424-y
   Fontana FA, 2011, J SYST SOFTWARE, V84, P2334, DOI 10.1016/j.jss.2011.07.006
   Fontana FA, 2011, J OBJECT TECHNOL, V10, DOI 10.5381/jot.2011.10.1.a4
   Fontana FA, 2013, J SOFTW-EVOL PROC, V25, P27, DOI 10.1002/smr.547
   Gamma Erich, 1995, DESIGN PATTERNS ELEM
   Gueheneuc Y.-G., 2007, 1 EUROPLOP FOCUS GRO
   Guéhéneuc YG, 2008, IEEE T SOFTWARE ENG, V34, P667, DOI 10.1109/TSE.2008.48
   Guéhéneuc YG, 2010, SOFTWARE QUAL J, V18, P145, DOI 10.1007/s11219-009-9082-y
   Hayashi S, 2008, IEICE T INF SYST, VE91D, P933, DOI 10.1093/ietisy/e91-d.4.933
   Issaoui I, 2015, INNOV SYST SOFTW ENG, V11, P39, DOI 10.1007/s11334-014-0241-3
   Jonkers H, 2006, INFORM SYST FRONT, V8, P63, DOI 10.1007/s10796-006-7970-2
   Kaczor O, 2010, INFORM SOFTWARE TECH, V52, P152, DOI 10.1016/j.infsof.2009.08.006
   Liu C, 2018, PROCEEDINGS OF THE 13TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, P65, DOI 10.5220/0006688000650076
   Maggioni S., 2010, THESIS U STUDI MILAN
   Mayvan BB, 2019, INFORM SOFTWARE TECH, V109, P60, DOI 10.1016/j.infsof.2019.01.007
   Mayvan BB, 2017, J SYST SOFTWARE, V125, P93, DOI 10.1016/j.jss.2016.11.030
   Mayvan BB, 2017, KNOWL-BASED SYST, V120, P211, DOI 10.1016/j.knosys.2017.01.007
   Pettersson N, 2010, IEEE T SOFTWARE ENG, V36, P575, DOI 10.1109/TSE.2009.92
   Philippow I., 2005, Software System Model, V4, P55
   Philippow I., 2003, MODELLING VARIABILIT, P42
   Quatrani T., 2000, VISUAL MODELLING RAT
   Rasool, 2019, 2019 INT C FRONT INF
   Rasool G., 2011, THESIS TU ILMENAU GE
   Rasool G., 2013, WORLD APPL SCI J, V28, P1316, DOI [10.5829/idosi.wasj.2013.28.09.1284, DOI 10.5829/IDOSI.WASJ.2013.28.09.1284]
   Rasool G, 2010, ADV ENG SOFTW, V41, P519, DOI 10.1016/j.advengsoft.2009.10.014
   Roeder, 2017, PRECISION RECALL F1
   Romano S., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P500, DOI 10.1109/ICSM.2011.6080818
   Shi N, 2006, IEEE INT CONF AUTOM, P123
   Thaller H, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P207, DOI [10.1109/saner.2019.8667978, 10.1109/SANER.2019.8667978]
   Thongrak Malisa, 2014, 2014 International Computer Science and Engineering Conference (ICSEC), P97, DOI 10.1109/ICSEC.2014.6978176
   Tsantalis N, 2006, IEEE T SOFTWARE ENG, V32, P896, DOI 10.1109/TSE.2006.112
   von Detten Markus., 2011, Proceedings of the joint ACM SIGSOFT conference - QoSA and ACM SIGSOFT symposium - ISARCS on Quality of software architectures - QoSA and architecting critical systems - ISARCS, QoSA-ISARCS '11, P23
   Wierda A, 2008, COMM COM INF SC, V22, P141
   Wu Ren, 2012, Proceedings of the 2012 IEEE International Conference on Computer Science and Automation Engineering (CSAE 2012), P544, DOI 10.1109/CSAE.2012.6273011
   Xiong RH, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P163, DOI [10.1109/saner.2019.8668031, 10.1109/SANER.2019.8668031]
   Yu DJ, 2018, J SYST SOFTWARE, V142, P35, DOI 10.1016/j.jss.2018.04.015
   Yu DJ, 2015, J SYST SOFTWARE, V103, P1, DOI 10.1016/j.jss.2015.01.019
   Yu DJ, 2013, P INT COMP SOFTW APP, P579, DOI 10.1109/COMPSAC.2013.92
   Zanoni M., 2012, THESIS U STUDI MILAN
   Zanoni M, 2015, J SYST SOFTWARE, V103, P102, DOI 10.1016/j.jss.2015.01.037
   Zhang P, 2017, ASIA PAC SOFWR ENG, P179, DOI 10.1109/APSEC.2017.24
   Zhu H, 2009, P INT COMP SOFTW APP, P228, DOI 10.1109/COMPSAC.2009.37
   ZIMMER W, 1995, PATTERN LANGUAGES OF PROGRAM DESIGN, P345
NR 62
TC 4
Z9 4
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2022
VL 30
IS 3
BP 651
EP 686
DI 10.1007/s11219-021-09576-9
EA NOV 2021
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W2CB
UT WOS:000723497100001
DA 2024-07-18
ER

PT J
AU Bessghaier, N
   Ouni, A
   Mkaouer, MW
AF Bessghaier, Narjes
   Ouni, Ali
   Mkaouer, Mohamed Wiem
TI A longitudinal exploratory study on code smells in server side web
   applications
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
ID IMPACT; ANTIPATTERNS; PROGRAM
AB Modern web applications have become one of the largest parts of the current software market over years, bringing cross-platform compatibility and data integration advantages that encouraged businesses to shift toward their adoption. Like any software application, code smells can be manifested as violations of implementation and design standards which could impact the maintainability, comprehensibility and performance of web applications. While there have been extensive studies on traditional code smells recently, little knowledge is available on code smells in web-based applications (web apps). As web applications are split into their client and server sides, we present in this study a first step in exploring the code smells diffuseness and effect on the server side of web applications. To this end, we conduct an exploratory study on a total of 430 releases from 10 long-lived open-source web-based applications on 12 common code smell types. We aim to better understand and gain insights into the diffuseness of code smells, their co-occurrences and effects on the change- and fault-proneness in server side code. Our study delivers several important findings. First, code smells are not equally diffused in web apps server side, among which smells related to complex, and large code components display high diffuseness and frequency rates. Second, the co-occurrence phenomenon is highly common, but the association degree between code smell pairs is weak. Code smells related to large size and high complexity exhibit a higher degree of co-occurrences. Third, smelly files are more likely to change than smell-free files, whereas not all smell types are likely to cause equal change sizes in the code base. Fourth, smelly files are more vulnerable to faults than smell-free files, and 86% of smelly files are more likely to manifest more faults than other files. Hence, developers should be aware of the existence of code smells in their web applications and consider detecting and refactoring them from their code bases, using appropriate tools.
C1 [Bessghaier, Narjes; Ouni, Ali] Univ Quebec, ETS Montreal, Montreal, PQ, Canada.
   [Mkaouer, Mohamed Wiem] Rochester Inst Technol, Rochester, NY 14623 USA.
C3 University of Quebec; Ecole de Technologie Superieure - Canada;
   University of Quebec Montreal; Rochester Institute of Technology
RP Ouni, A (corresponding author), Univ Quebec, ETS Montreal, Montreal, PQ, Canada.
EM narjes.bessghaier.1@ens.etsmtl.ca; ali.ouni@etsmtl.ca; mwmvse@rit.edu
RI Ouni, Ali/Y-8280-2019; Mkaouer, Mohamed Wiem/N-7476-2017
OI Ouni, Ali/0000-0003-4708-0362; Mkaouer, Mohamed Wiem/0000-0001-6010-7561
CR Abbes M, 2011, EUR CON SFTWR MTNCE, P181, DOI 10.1109/CSMR.2011.24
   Agrawal R., 1993, SIGMOD Record, V22, P207, DOI 10.1145/170036.170072
   Agrawal R., 1994, P INT VLDB C VLDB 94, P487, DOI DOI 10.5555/645920.672836
   [Anonymous], 2010, 1152009 IEEE, P1, DOI [DOI 10.1109/IEEESTD.2010.5439063, 10.1109/IEEESTD.2010.5439063]
   [Anonymous], 2010, 2010 IEEE International Conference on Software Maintenance, DOI [10.1109/ICSM.2010.5609564, DOI 10.1109/ICSM.2010.5609564]
   [Anonymous], 2007, WEB ENG MODELLING IM
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   [Anonymous], 1998, Practical nonparametric statistics
   Antoniol G, 2008, P 2008 C CTR ADV STU, P304
   Bessghaier Narjes, 2020, Services Computing - SCC 2020. 17th International Conference Held as Part of the Services Conference Federation, SCF 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12409), P67, DOI 10.1007/978-3-030-59592-0_5
   Borg M, 2019, PROCEEDINGS OF THE 3RD ACM SIGSOFT INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE '19), P7, DOI 10.1145/3340482.3342742
   Brin S., 1997, SIGMOD Record, V26, P255, DOI [10.1145/253262.253327, 10.1145/253262.253325]
   Chatzigeorgiou A, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P106, DOI 10.1109/QUATIC.2010.16
   Cho Thet Mon, 2019, 2019 IEEE 8th Global Conference on Consumer Electronics (GCCE), P929, DOI 10.1109/GCCE46687.2019.9015229
   CONOVER WJ, 1973, J AM STAT ASSOC, V68, P985, DOI 10.2307/2284536
   Cousineau TM, 2007, BEST PRACT RES CL OB, V21, P293, DOI 10.1016/j.bpobgyn.2006.12.003
   Cramer H., 1946, Mathematical Methods of Statistics, P500
   da Costa DA, 2017, IEEE T SOFTWARE ENG, V43, P641, DOI 10.1109/TSE.2016.2616306
   Delchev M., 2015, Fullscale Software Engineering, P31
   Fontana FA, 2015, 2015 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON SOFTWARE ARCHITECTURE AND METRICS (SAM), P1, DOI 10.1109/SAM.2015.8
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Garg A., 2016, P INT C INFORM COMMU, P39, DOI [10.1007/978-981-10-0767-5_5, DOI 10.1007/978-981-10-0767-5_5]
   Grissom R. J., 2005, EFFECT SIZES RES BRO
   Habchi S, 2019, 2019 IEEE/ACM 6TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2019), P87, DOI 10.1109/MOBILESoft.2019.00022
   Hamdi O, 2021, 2021 IEEE/ACM 8TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2021), P28, DOI 10.1109/MobileSoft52590.2021.00010
   Hecht G, 2015, IEEE INT CONF AUTOM, P236, DOI 10.1109/ASE.2015.46
   Hosmer DW, 2000, APPL LOGISTIC REGRES
   Kampstra P., 2008, Journal of Statistical Software, V28, P1, DOI [10.18637/jss.v028.c01, DOI 10.18637/JSS.V028.C01, 10.18637/jss.v028.c01.papers3://publication/uuid/692988CE-7E10-498E-96EC-E7A0CE3620A3]
   Kendall MG, 1938, BIOMETRIKA, V30, P81, DOI 10.2307/2332226
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   Kienle HolgerM., 2014, EVOLVING SOFTWARE SY
   Kim S, 2006, IEEE INT CONF AUTOM, P81
   Lenarduzzi V., 2020, INT C PROGR COMPR IC
   Lenarduzzi V, 2019, 15TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING (PROMISE'19), P2, DOI 10.1145/3345629.3345630
   Liu X., 2017, INT C MACH MAT COMP
   Macbeth G, 2011, UNIV PSYCHOL, V10, P545, DOI 10.11144/Javeriana.upsy10-2.cdcp
   Mannan UA, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P225, DOI [10.1109/MobileSoft.2016.048, 10.1145/2897073.2897094]
   Martin Robert C, 2009, Clean Code: a Handbook of Agile Software Craftsmanship
   Mazinanian D, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P496, DOI 10.1145/2635868.2635879
   McHugh ML, 2013, BIOCHEM MEDICA, V23, P143, DOI 10.11613/BM.2013.018
   Mon C.T, 2015, 13 INT C COMP APPL
   Muse B. A., 2020, INT C MIN SOFTW RESP
   Olbrich S, 2009, INT SYMP EMP SOFTWAR, P391
   Ouni A, 2017, IEEE T SERV COMPUT, V10, P603, DOI 10.1109/TSC.2015.2502595
   Ouni A, 2016, ACM T SOFTW ENG METH, V25, DOI 10.1145/2932631
   Ouni A, 2015, J SYST SOFTWARE, V105, P18, DOI 10.1016/j.jss.2015.03.040
   Ouni A, 2015, SOFTWARE QUAL J, V23, P323, DOI 10.1007/s11219-014-9233-7
   Palomba F, 2019, INFORM SOFTWARE TECH, V105, P43, DOI 10.1016/j.infsof.2018.08.004
   Palomba F, 2018, EMPIR SOFTW ENG, V23, P1188, DOI 10.1007/s10664-017-9535-z
   Palomba F, 2018, INFORM SOFTWARE TECH, V99, P1, DOI 10.1016/j.infsof.2018.02.004
   Palomba F, 2017, 2017 IEEE INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE), P8, DOI 10.1109/MALTESQUE.2017.7882010
   Pecorelli F, 2020, IEEE WORK CONF MIN S, P220, DOI 10.1145/3379597.3387457
   PHPMD, 2021, PHP MESS DET
   Piatetsky-Shapiro G., 1991, Knowledge discovery in databases, P229
   Planning S, 2002, The economic impacts of inadequate infrastructure for software testing
   Rio A., 2019, 12 INT C QUALITY INF, P263, DOI [10.1007/978-3-030-29238-6_19, DOI 10.1007/978-3-030-29238-6_19]
   Rodríguez-Pérez G, 2020, EMPIR SOFTW ENG, V25, P1294, DOI 10.1007/s10664-019-09781-y
   Rodríguez-Pérez G, 2018, INFORM SOFTWARE TECH, V99, P164, DOI 10.1016/j.infsof.2018.03.009
   Saboury A, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P294, DOI 10.1109/SANER.2017.7884630
   Saidani I, 2021, INFORM SOFTWARE TECH, V138, DOI 10.1016/j.infsof.2021.106618
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   Spadini D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P908, DOI 10.1145/3236024.3264598
   Spadini D, 2018, PROC IEEE INT CONF S, P1, DOI 10.1109/ICSME.2018.00010
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Williams C, 2008, P 2008 WORKSHOP DEFE, P32
   Yulianto SV, 2014, 2014 International Conference on Data and Software Engineering (ICODSE)
NR 67
TC 2
Z9 2
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2021
VL 29
IS 4
BP 901
EP 941
DI 10.1007/s11219-021-09567-w
EA AUG 2021
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XE8XW
UT WOS:000691064500001
DA 2024-07-18
ER

PT J
AU Niedermaier, S
   Zelenik, T
   Heisse, S
   Wagner, S
AF Niedermaier, Sina
   Zelenik, Thommy
   Heisse, Stefan
   Wagner, Stefan
TI Evaluate and control service and transaction dependability of complex
   IoT systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
AB Observing and controlling the dependability of service provision of complex IoT systems is challenging. In practice, many organizations struggle to derive consumer needs related to quality and to observe and quantify the service provision in the context of the dynamic behavior of a complex distributed system. In this paper, we present an approach to define and evaluate the dependability of complex IoT systems. Our approach is an adaptation of the ISO/IEC 25040, an international standard for the evaluation process for system and software quality, which is part of the systems and software quality requirements and evaluation (SQuaRE) series. Our approach was designed and evaluated with action research in an industrial study at Robert Bosch GmbH. Based on the framework of the SQuaRE series, we integrated different elements of site reliability engineering (SRE) and combined them with distributed tracing as a promising measurement method. Our approach introduces the IoT transaction concept to reduce modeling and observation efforts while increasing operationalization to measure performance against dependability targets. Our adaption was effectively applied, consumer-centricity along different system stakeholders were enhanced, and negative consequences of organizational silos were reduced. This has improved the dependability evaluation of service provision to enable fast feedback cycles for service performance control and improvement.
C1 [Niedermaier, Sina; Wagner, Stefan] Univ Stuttgart, Inst Software Engn, Stuttgart, Germany.
   [Zelenik, Thommy] Univ Stuttgart, Stuttgart, Germany.
   [Heisse, Stefan] Bosch Engn GmbH, Abstatt, Germany.
C3 University of Stuttgart; University of Stuttgart; Bosch
RP Niedermaier, S (corresponding author), Univ Stuttgart, Inst Software Engn, Stuttgart, Germany.
EM sina.niedermaier@iste.uni-stuttgart.de; t.zelenik@live.de;
   stefan.heisse@de.bosch.com; stefan.wagner@iste.uni-stuttgart.de
RI Wagner, Stefan/A-5200-2018
OI Wagner, Stefan/0000-0002-5256-8429
FU Projekt DEAL
FX Open Access funding enabled and organized by Projekt DEAL.
CR [Anonymous], 2011, 25010 ISOIEC
   [Anonymous], 2020, Jaeger: open-source, end-to-end distributed tracing
   BEVAN N, 1995, SOFTWARE QUAL J, V4, P115, DOI 10.1007/BF00402715
   Beyer B., 2016, Site reliability engineering: How Google runs production systems
   Blumen R, 2019, IEEE SOFTWARE, V36, P98, DOI 10.1109/MS.2018.2880598
   Davison R, 2004, INFORM SYST J, V14, P65, DOI 10.1111/j.1365-2575.2004.00162.x
   Esteban P., 2019, 2019 IEEE INT SYST C, P1
   Foundation A. S., 2020, INTERVIEW GUIDE QUAL
   Gray Jim, 1992, TRANSACTION PROCESSI
   IEC, 2015, IEC 60050 192
   IEEE, 2012, IEEE STD 24774
   IEEE, 2008, IEEE STD 15939
   ISO/IEC, 2011, ISOIEC 20000 12011
   ISO/IEC, 2019, ISOIEC 25030
   ISO/IEC, 2018, ISOIEC 20000 12018
   ISO/IEC, 2017, ISOIEC TS 25011
   ISO/IEC, 2011, ISOIEC 25040
   ISO/IEC, 2016, ISOIEC 25023
   ISO/IEC, 2011, ISOIEC 25022
   ISO/IEC, 2012, ISOIEC 25021
   ISO/IEC, 2014, ISOIEC 25000
   ISO/IEC/IEE, 2017, ISOIECIEE 24765
   Kontio J., 2008, Guide to Advanced Empirical Software Engineering, P93, DOI [DOI 10.1007/978-1-84800-044-5_4, 10.1007/978-1-84800-044-54, DOI 10.1007/978-1-84800-044-54]
   Lai AW, 1995, ADV CONSUM RES, V22, P381
   Mayring P., 2004, Qualitative content analysis: theoretical foundation, basic procedures and software solution, V1, P159
   Netflix, 2020, ZUUL
   NewRelic, 2020, DISTRIBUTED TRACING
   Niedermaier S., 2020, INTERVIEW GUIDE QUAL, DOI [10.5281/zenodo.3826099, DOI 10.5281/ZENODO.3826099]
   Niedermaier S, 2019, LECT NOTES COMPUT SC, V11895, P36, DOI 10.1007/978-3-030-33702-5_3
   OpenTracing, 2020, OPEN TRACING SEMANTI
   Plösch R, 2015, P INT COMP SOFTW APP, P326, DOI 10.1109/COMPSAC.2015.47
   Reason P., 2001, HDB ACTION RES PARTI
   Sambasivan RR, 2016, PROCEEDINGS OF THE SEVENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC 2016), P401, DOI 10.1145/2987550.2987568
   Sigelman Benjamin H., 2010, Dapper, a large-scale distributed systems tracing infrastructure
   Staron M, 2019, LECT NOTES COMPUT SC, V11376, P39, DOI 10.1007/978-3-030-10801-4_4
   W3C, 2020, TRACE CONTEXT
   Wagner S., 2013, SOFTWARE PRODUCT QUA
   Wagner S, 2015, INFORM SOFTWARE TECH, V62, P101, DOI 10.1016/j.infsof.2015.02.009
   Whitmore R., 2019, UNDERSTAND DISTRIBUT
NR 39
TC 1
Z9 1
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 337
EP 366
DI 10.1007/s11219-021-09556-z
EA MAY 2021
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000646539200001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Aragao, BS
   Andrade, RMC
   Santos, IS
   Castro, RNS
   Lelli, V
   Darin, TGR
AF Aragao, Bruno S.
   Andrade, Rossana M. C.
   Santos, Ismayle S.
   Castro, Rute N. S.
   Lelli, Valeria
   Darin, Ticianne G. R.
TI TestDCat 3.0: catalog of test debt subtypes and management activities
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Technical Debt; Test Debt; TD management activity
ID TECHNICAL DEBT
AB When deadlines and resources of software projects become scarce, testing is usually in the first row to have its activities aborted or reduced; however, if defects cannot be found, product quality can be affected. In the software development process, aborted or reduced activities that can bring short-term benefits, but can be harmful to the project in the long run, are considered Technical Debt (TD) and, when the TDs impact testing activities, they are called Test Debt. Although there are several studies dealing with Test Debt, current solutions often deal with specific types of tests (e.g., exploratory and automated tests) and do not address the whole software testing process. Aiming to fill these gaps, this work then proposes a Test Debt Catalog, called TestDCat, with subtypes of Test Debts and Technical Debt management activities. This catalog is built based on the results of an empirical study, a literature review and semi-structured interviews conducted with practitioners who perform testing activities on five projects from industry. For the TestDCat evaluation, a case study is conducted in real projects in order to identify if the catalog is user-friendly and if its use helps the Test Debt management during the execution of test activities in these software development projects.
C1 [Aragao, Bruno S.; Andrade, Rossana M. C.; Santos, Ismayle S.; Castro, Rute N. S.; Lelli, Valeria; Darin, Ticianne G. R.] Fed Univ Ceara UFC, Grp Comp Networks Software Engn & Syst GREat, Fortazela, Ceara, Brazil.
RP Aragao, BS (corresponding author), Fed Univ Ceara UFC, Grp Comp Networks Software Engn & Syst GREat, Fortazela, Ceara, Brazil.
EM aragaobs@gmail.com; rossana@great.ufc.br; ismaylesantos@great.ufc.br;
   rute@great.ufc.br; valerialelly@great.ufc.br; ticiannedarin@great.ufc.br
RI Andrade, Rossana M C/K-1790-2015; Darin, Ticianne/AGR-5433-2022
OI Darin, Ticianne/0000-0003-3617-5462
CR Alves NSR, 2016, INFORM SOFTWARE TECH, V70, P100, DOI 10.1016/j.infsof.2015.10.008
   Andrade R.M.C., 2017, ICEIS
   Andrade RMC, 2017, 2017 IEEE/ACM 4TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING RESEARCH AND INDUSTRIAL PRACTICE (SER&IP 2017), P10, DOI 10.1109/SER-IP.2017..2
   Aragao BS, 2019, LECT NOTES COMPUT SC, V11812, P279, DOI 10.1007/978-3-030-31280-0_18
   Aragao BS, 2019, SBQS: PROCEEDINGS OF THE 18TH BRAZILIAN SYMPOSIUM ON SOFTWARE QUALITY, P296, DOI 10.1145/3364641.3364676
   Bangor A, 2008, INT J HUM-COMPUT INT, V24, P574, DOI 10.1080/10447310802205776
   Brooke J, 1996, USABILITY EVALUATION, V189, P4
   Chung L, 2012, Non-Functional Requirements in Software Engineering, V5
   Cunningham W., 1993, OOPS MESSENGER, V4, P29, DOI DOI 10.1145/157710.157715
   Fernandes FA, 2013, LECT NOTES ENG COMP, P634
   Gorschek T, 2006, IEEE SOFTWARE, V23, P88, DOI 10.1109/MS.2006.147
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Kruchten Philippe, 2012, Software Engineering Notes, V37, P36, DOI 10.1145/2347696.2347698
   Krueger R.A., 2002, DESIGNING CONDUCTING
   Lazic Ljubomir, 2008, WSEAS Transactions on Computers, V7, P599
   Li ZY, 2015, J SYST SOFTWARE, V101, P193, DOI 10.1016/j.jss.2014.12.027
   Ozkaya Ipek, 2011, Software Engineering Notes, V36, P33, DOI 10.1145/2020976.2020979
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Samarthyam G, 2017, Trends in software testing, P1
   Seela, 2017, 64 ESSENTIAL TESTING
   Shah SMA, 2014, IT PROF, V16, P44, DOI 10.1109/MITP.2013.21
   Sousa, 2016, THESIS U FEDERAL PER
   Standard I., 1998, 9241111998 ISO
   Wiklund K., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P887, DOI 10.1109/ICST.2012.192
   Wiklund K, 2017, SOFTW TEST VERIF REL, V27, DOI 10.1002/stvr.1639
   Wohlin C, 2014, P 18 INT C EVALUATIO, DOI DOI 10.1145/2601248.2601268
NR 26
TC 4
Z9 4
U1 1
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 181
EP 225
DI 10.1007/s11219-020-09533-y
EA JAN 2021
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000608380200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zheng, JJ
   Okamura, H
   Dohi, T
AF Zheng, Junjun
   Okamura, Hiroyuki
   Dohi, Tadashi
TI A transient interval reliability analysis for software rejuvenation
   models with phase expansion
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software rejuvenation; Transient analysis; Interval reliability; Phase
   expansion; Markov regenerative process; Pointwise availability
ID AVAILABILITY ANALYSIS; NUMERICAL INVERSION; VIRTUALIZED SYSTEM; LAPLACE
   TRANSFORMS; POLICIES; DISTRIBUTIONS
AB The phenomenon of software aging refers to the continuing degradation of software system performance with the operation time and is usually caused by the aging-related bugs such as the memory leak and the accumulation of round-off errors. Software rejuvenation acts as one of the proactive fault management techniques against the software aging. In this paper, we evaluate the interval reliability for two basic stochastic models with periodic software rejuvenation by Garg et al. (1995) and Suzuki et al. (2002a, b). The interval reliability is one of the most generalized dependability measures that involve commonly used reliability function and steady-state availability as the special cases, and is helpful for the system design during a fixed mission period. From the mathematical point of view, the interval reliability for the software rejuvenation models leads to the transient analysis. We focus on the phase expansion approach for solving the transient solutions for the basic software rejuvenation models. The phase expansion is an approximate technique that replaces arbitrary probability distributions by the phase-type (PH) distributions. Benefiting from the phase expansion, we can numerically derive the transient interval reliability for two software rejuvenation models. In numerical examples, we discuss the accuracy of the phase expansion and also reveal quantitative properties of the interval reliability measures.
C1 [Zheng, Junjun] Ritsumeikan Univ, 1-1-1 Nojihigashi, Kusatsu 5258577, Japan.
   [Okamura, Hiroyuki; Dohi, Tadashi] Hiroshima Univ, 1-4-1 Kagamiyama, Higashihiroshima 7398527, Japan.
C3 Ritsumeikan University; Hiroshima University
RP Zheng, JJ (corresponding author), Ritsumeikan Univ, 1-1-1 Nojihigashi, Kusatsu 5258577, Japan.
EM jzheng@asl.cs.ritsumei.ac.jp; okamu@hiroshima-u.ac.jp;
   dohi@hiroshima-u.ac.jp
RI Zheng, Junjun/AAD-4042-2019; Okamura, Hiroyuki/D-6066-2011; Dohi,
   Tadashi/D-5882-2011
OI Zheng, Junjun/0000-0002-5529-1429; 
CR [Anonymous], 1965, MATH THEORY RELIABIL
   [Anonymous], P 6 INT S SOFTW REL
   [Anonymous], 1995, Modeling and Analysis of Stochastic Systems
   ASMUSSEN S, 1993, J APPL PROBAB, V30, P365, DOI 10.2307/3214845
   Bao YJ, 2005, IEEE T RELIAB, V54, P541, DOI 10.1109/TR.2005.853442
   Bobbio A, 2005, STOCH MODELS, V21, P303, DOI 10.1081/STM-200056210
   Bruneo D, 2013, IEEE T COMPUT, V62, P1072, DOI 10.1109/TC.2013.30
   Dohi T, 2000, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P25, DOI 10.1109/HASE.2000.895436
   Dohi T, 2000, 2000 PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P77, DOI 10.1109/PRDC.2000.897287
   Dohi T, 2001, COMPUT J, V44, P473, DOI 10.1093/comjnl/44.6.473
   Dohi T., 2016, Journal of the Operations Research Society of Japan, V59, P270
   Dohi T., 2010, P 4 AS PAC INT S ADV, P169
   Dohi T, 2018, RELIAB ENG SYST SAFE, V180, P463, DOI 10.1016/j.ress.2018.08.009
   Dohi T, 2012, 2012 9TH INTERNATIONAL CONFERENCE ON UBIQUITOUS INTELLIGENCE & COMPUTING AND 9TH INTERNATIONAL CONFERENCE ON AUTONOMIC & TRUSTED COMPUTING (UIC/ATC), P478, DOI 10.1109/UIC-ATC.2012.111
   DUBNER H, 1968, J ACM, V15, P115, DOI 10.1145/321439.321446
   DURBIN F, 1974, COMPUT J, V17, P371, DOI 10.1093/comjnl/17.4.371
   HOSFORD JE, 1960, OPER RES, V8, P53, DOI 10.1287/opre.8.1.53
   HUANG YN, 1995, DIG PAP INT SYMP FAU, P381, DOI 10.1109/FTCS.1995.466961
   Machida F, 2013, PERFORM EVALUATION, V70, P212, DOI 10.1016/j.peva.2012.09.003
   Okamura H, 2014, QUAL TECHNOL QUANT M, V11, P335, DOI 10.1080/16843703.2014.11673349
   Okamura H, 2001, IEICE T INF SYST, VE84D, P1368
   Okamura H, 2016, IEEE INT SYMP SOFTW, P98, DOI 10.1109/ISSREW.2016.53
   Okamura H, 2016, SPRINGER SER RELIAB, P49, DOI 10.1007/978-3-319-30599-8_3
   Okamura H, 2015, LECT NOTES COMPUT SC, V9259, P105, DOI 10.1007/978-3-319-22264-6_7
   Okamura H, 2011, PERFORM EVALUATION, V68, P938, DOI 10.1016/j.peva.2011.04.001
   Osogami T, 2006, PERFORM EVALUATION, V63, P524, DOI 10.1016/j.peva.2005.06.002
   Rezaei A, 2010, FIFTH INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY, AND SECURITY: ARES 2010, PROCEEDINGS, P289, DOI 10.1109/ARES.2010.69
   RUBINO G, 1992, PERFORM EVALUATION, V14, P257, DOI 10.1016/0166-5316(92)90008-5
   Suzuki H, 2002, IEICE T FUND ELECTR, VE85A, P2923
   SUZUKI H, 2002, ADV STOCHASTIC MODEL, P85
   Thein T, 2009, J COMPUT SCI TECH-CH, V24, P339, DOI 10.1007/s11390-009-9228-1
   Trivedi K. S., 2000, Proceedings 33rd Annual Simulation Symposium (SS 2000), P270, DOI 10.1109/SIMSYM.2000.844925
   Vaidyanathan K, 2005, IEEE T DEPEND SECURE, V2, P124, DOI 10.1109/TDSC.2005.15
   Xie W, 2005, RELIAB ENG SYST SAFE, V87, P13, DOI 10.1016/j.ress.2004.02.011
   Zheng JJ, 2017, IEEE T RELIAB, V66, P1157, DOI 10.1109/TR.2017.2741526
NR 35
TC 6
Z9 7
U1 1
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 173
EP 194
DI 10.1007/s11219-019-09458-1
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500008
DA 2024-07-18
ER

PT J
AU Patel, K
   Hierons, RM
AF Patel, Krishna
   Hierons, Robert M.
TI A partial oracle for uniformity statistics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Uniformity statistics; Oracle problem; Non-testable systems; Metamorphic
   testing; Regression model-based metamorphic relation; Metamorphic
   relation
ID SOFTWARE
AB This paper investigates the problem of testing implementations of uniformity statistics. In this paper, we used metamorphic testing to address the oracle problem of checking the output of one or more test executions, for uniformity statistics. We defined a partial oracle that uses regression analysis (a regression model-based metamorphic relation). We investigated the effectiveness of our partial oracle. We found that the technique can achieve mutation scores ranging from 77.78 to 100% and tends towards higher mutation scores in this range. These results are promising and suggest that the regression model-based metamorphic relation approach is a viable method of alleviating the oracle problem in implementations of uniformity statistics, and potentially other classes of statistics, e.g. correlation statistics.
C1 [Patel, Krishna; Hierons, Robert M.] Univ Sheffield, Dept Comp Sci, 211 Portobello, Sheffield S1 4DP, S Yorkshire, England.
C3 University of Sheffield
RP Patel, K (corresponding author), Univ Sheffield, Dept Comp Sci, 211 Portobello, Sheffield S1 4DP, S Yorkshire, England.
EM krishna.patel@sheffield.ac.uk; r.hierons@sheffield.ac.uk
OI Hierons, Robert/0000-0002-4771-1446
FU Engineering and Physical Sciences Research Council (EPSRC)
   [EP/P006116/1]; EPSRC [EP/P006116/1, EP/P006116/2] Funding Source: UKRI
FX This work was funded by the Engineering and Physical Sciences Research
   Council (EPSRC) grant EP/P006116/1, InfoTestSS: Information Theory and
   Test Suite Selection.
CR Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   Androutsopoulos K, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P573, DOI 10.1145/2568225.2568314
   [Anonymous], ISA16TR02 U SEV
   [Anonymous], 2013, P 30 INT C MACH LEAR
   [Anonymous], BMC BIOINFORMATICS
   [Anonymous], SOFTWARE QUALITY J
   [Anonymous], 2015, IBM SPSS statistics
   [Anonymous], P 10 INT C QUAL SOFT
   [Anonymous], R PROJECT STAT COMPU
   [Anonymous], J SOFTWARE TESTING V
   [Anonymous], P 40 INT C SOFTW ENG
   [Anonymous], TECHNICAL REPORT
   Cao YX, 2013, INT CONF QUAL SOFTW, P153, DOI 10.1109/QSIC.2013.43
   Chan WK, 2007, INT J WEB SERV RES, V4, P61, DOI 10.4018/jwsr.2007040103
   Chan WK, 2006, P INT COMP SOFTW APP, P429
   Chan WK, 2010, SOFTW TEST VERIF REL, V20, P89, DOI 10.1002/stvr.408
   Chen TY, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3143561
   Chen TY, 2004, LECT NOTES COMPUT SC, V3321, P320
   Chen TY, 2003, INFORM SOFTWARE TECH, V45, P1, DOI 10.1016/S0950-5849(02)00129-5
   Chen X, 2015, SCI CHINA TECHNOL SC, V58, P1, DOI 10.1007/s11431-014-5741-8
   Chockler H, 2007, FMCAD 2007: FORMAL METHODS IN COMPUTER AIDED DESIGN, PROCEEDINGS, P101, DOI 10.1109/.19
   Claessen K, 2014, LECT NOTES COMPUT SC, V8475, P18, DOI 10.1007/978-3-319-07151-0_2
   Guderlei R, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P404
   Harrison Robert L, 2010, AIP Conf Proc, V1204, P17
   Kanewala U, 2013, 2013 5TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR COMPUTATIONAL SCIENCE AND ENGINEERING (SE-CSE), P48, DOI 10.1109/SECSE.2013.6615099
   Liu H, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P420, DOI 10.1145/2591062.2591109
   Liu H, 2014, IEEE T SOFTWARE ENG, V40, P4, DOI 10.1109/TSE.2013.46
   Marhuenda Y, 2005, STATISTICS-ABINGDON, V39, P315, DOI 10.1080/02331880500178562
   Mayer J., 2005, Software Engineering 2005, Fachtagung des GI-Fachbereichs Softwaretechnik, P69
   McMinn P., 2009, PROC 11 ANN C GENET, P1689, DOI [10.1145/1569901.1570127, DOI 10.1145/1569901.1570127]
   Offutt A. J., 1992, ACM Transactions on Software Engineering and Methodology, V1, P5, DOI 10.1145/125489.125473
   Pallant J., 2001, SPSS SURVIVAL MANUAL
   Segura S, 2016, IEEE T SOFTWARE ENG, V42, P805, DOI 10.1109/TSE.2016.2532875
   Smite D, 2008, 2008 3RD IEEE INTERNATIONAL CONFERENCE GLOBAL SOFTWARE ENGINEERING, PROCEEDINGS, P173, DOI 10.1109/ICGSE.2008.22
   Steele M, 2005, MODSIM 2005: INTERNATIONAL CONGRESS ON MODELLING AND SIMULATION: ADVANCES AND APPLICATIONS FOR MANAGEMENT AND DECISION MAKING, P1300
   WEYUKER EJ, 1982, COMPUT J, V25, P465, DOI 10.1093/comjnl/25.4.465
   Wu Peng, 2005, Journal of Software, V16, P1210, DOI 10.1360/jos161210
   Zhang Zhen-Yu, 2009, Journal of Software, V20, P2637, DOI 10.3724/SP.J.1001.2009.00578
   Zhou Z.H., 2004, Multi-Instance Learning: A Survey, P1
NR 39
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2019
VL 27
IS 4
BP 1419
EP 1447
DI 10.1007/s11219-019-09459-0
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KP9TA
UT WOS:000516573400003
OA hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Gebizli, CS
   Sözer, H
AF Gebizli, Ceren Sahin
   Sozer, Hasan
TI Automated refinement of models for model-based testing using exploratory
   testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Exploratory testing; Automated model refinement;
   Software test automation; Industrial case study
ID DESIGN
AB Model-based testing relies on models of the system under test to automatically generate test cases. Consequently, the effectiveness of the generated test cases depends on models. In general, these models are created manually, and as such, they are subject to errors like omission of certain system usage behavior. Such omitted behaviors are also omitted by the generated test cases. In practice, these faults are usually detected with exploratory testing. However, exploratory testing mainly relies on the knowledge and manual activities of experienced test engineers. In this paper, we introduce an approach and a toolset, ARME, for automatically refining system models based on recorded testing activities of these engineers. ARME compares the recorded execution traces with respect to the possible execution paths in test models. Then, these models are automatically refined to incorporate any omitted system behavior and update model parameters to focus on the mostly executed scenarios. The refined models can be used for generating more effective test cases. We applied our approach in the context of 3 industrial case studies to improve the models for model-based testing of a digital TV system. In all of these case studies, several critical faults were detected after generating test cases based on the refined models. These faults were not detected by the initial set of test cases. They were also missed during the exploratory testing activities.
C1 [Gebizli, Ceren Sahin] Vestel Elect, Manisa, Turkey.
   [Sozer, Hasan] Ozyegin Univ, Sch Engn, Nisantepe Mah Orman Sk 34-36, TR-34794 Istanbul, Turkey.
C3 Zorlu Holding; Ozyegin University
RP Sözer, H (corresponding author), Ozyegin Univ, Sch Engn, Nisantepe Mah Orman Sk 34-36, TR-34794 Istanbul, Turkey.
EM ceren.sahin@vestel.com.tr; hasan.sozer@ozyegin.edu.tr
RI Sözer, Hasan/A-4722-2015; Sözer, Hasan/AAR-8697-2020
OI Sözer, Hasan/0000-0002-2968-4763; Sözer, Hasan/0000-0002-2968-4763
FU Vestel Electronics; Turkish Ministry of Science, Industry and Technology
   [909.STZ.2015]
FX This work is supported by the joint grant of Vestel Electronics and the
   Turkish Ministry of Science, Industry and Technology (909.STZ.2015). The
   contents of this article reflect the ideas and positions of the authors
   and do not necessarily reflect the ideas or positions of Vestel
   Electronics and the Turkish Ministry of Science, Industry and
   Technology. We would like to thank software developers and test
   engineers at Vestel Electronics for supporting our case study.
CR [Anonymous], 2006, QUALITY ASSURANCE I
   [Anonymous], 2009, PROC IEEE 13 INT MUL
   Bach J., 2003, TECHNICAL REPORT
   Belli F, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P34, DOI 10.1109/ISSRE.2001.989456
   Belli F, 2014, SOFTWARE PRACT EXPER, V44, P201, DOI 10.1002/spe.2161
   BRIAND LC, 2002, SOFTW SYST MODEL, V1, P10, DOI [10.1007/s10270-002-0004-8, DOI 10.1007/S10270-002-0004-8]
   Chander A., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P140, DOI 10.1109/ICST.2011.64
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dalal S. R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P285, DOI 10.1109/ICSE.1999.841019
   Dallmeier V, 2012, IEEE T SOFTWARE ENG, V38, P243, DOI 10.1109/TSE.2011.105
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   Dustin E., 1999, AUTOMATED SOFTWARE T
   Entin V., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P572, DOI 10.1109/ICSTW.2011.13
   Felderer M, 2014, INT J SOFTW TOOLS TE, V16, P559, DOI 10.1007/s10009-014-0332-3
   Ferguson R., 1996, ACM Transactions on Software Engineering and Methodology, V5, P63, DOI 10.1145/226155.226158
   Gebizli C. S., 2015, P 9 WORKSH TEST AC I, P1
   Gebizli CS, 2016, IEEE ICST WORKSHOP, P263, DOI 10.1109/ICSTW.2016.10
   Gebizli CS, 2014, 2014 38TH ANNUAL IEEE INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSACW 2014), P656, DOI 10.1109/COMPSACW.2014.110
   GONENC G, 1970, IEEE T COMPUT, VC 19, P551, DOI 10.1109/T-C.1970.222975
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hetzel W.C., 1991, COMPLETE GUIDE SOFTW
   Itkonen J, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P82, DOI 10.1109/ISESE.2005.1541817
   Itkonen Juha, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P61
   Itkonen J., 2011, THESIS
   Itkonen J, 2013, IEEE T SOFTWARE ENG, V39, P707, DOI 10.1109/TSE.2012.55
   Joye C., 2014, MATELO TEST CASE GEN
   Keränen JS, 2012, IET SOFTW, V6, P364, DOI 10.1049/iet-sen.2011.0111
   Le Guen N, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P54, DOI 10.1109/ISSRE.2004.33
   Lorenzoli D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P501, DOI 10.1145/1368088.1368157
   Mariani L, 2015, ADV COMPUT, V99, P157, DOI 10.1016/bs.adcom.2015.04.002
   Mariani L, 2014, SOFTW TEST VERIF REL, V24, P341, DOI 10.1002/stvr.1538
   Meinke K, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P447, DOI 10.1109/ICST.2013.62
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   NAITO S, 1981, P IEEE FAULT TOL COM, P238
   Nguyen BN, 2014, IEEE T SOFTWARE ENG, V40, P216, DOI 10.1109/TSE.2014.2300857
   Pacheco C., 2006, P 29 INT C SOFTW ENG, P396
   PRETSCHNER A, 2005, P INT S FORM METH EU, P537, DOI DOI 10.1007/B27882
   ROBINSON H, 1999, P SOFTW TEST AN REV
   Robinson H., 2000, SOFTWARE TESTING QUA, P24
   Tinkham A., 2003, P PAC NW SOFTW QUAL
   Tinkham A., 2003, P SOFTW TEST AN REV
   Tretmans J, 2011, LECT NOTES COMPUT SC, V6659, P297, DOI 10.1007/978-3-642-21455-4_9
   Utting M., 2007, PRACTICAL MODEL BASE
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Whittaker J. A., 2009, Exploratory software testing: tips, tricks, tours, and techniques to guide test design
   WHITTAKER JA, 1994, IEEE T SOFTWARE ENG, V20, P812, DOI 10.1109/32.328991
   Xie T., 2006, Automated Software Engineering, V13, P345, DOI 10.1007/s10851-006-8530-6
   Yuan X, 2010, IEEE T SOFTWARE ENG, V36, P81, DOI 10.1109/TSE.2009.68
   Zuo Z., 2015, THESIS
NR 50
TC 17
Z9 17
U1 1
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 979
EP 1005
DI 10.1007/s11219-016-9338-2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300012
DA 2024-07-18
ER

PT J
AU Chen, CT
   Gross, HG
   Zaidman, A
AF Chen, Cuiting
   Gross, Hans-Gerhard
   Zaidman, Andy
TI Analysis of service diagnosis improvement through increased monitoring
   granularity
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Residual defect; Fault localization; Online monitoring; Simulator;
   Service framework
ID FAULT; MAINTENANCE
AB Due to their loosely coupled and highly dynamic nature, service-oriented systems offer many benefits for realizing fault tolerance and supporting trustworthy computing. They enable automatic system reconfiguration when a faulty service is detected. Spectrum-based fault localization (SFL) is a statistics-based diagnosis technique that can be effectively applied to pinpoint problematic services. However, SFL exhibits poor performance in diagnosing services which are tightly interacted. Previous research suggests that an increase in the number of monitoring locations may improve the diagnosability for tight interaction. In this paper, we analyze the trade-offs between the diagnosis improvement through increased monitoring granularity and the overhead caused by the introduction of more monitors, when diagnosing tightly interacted faulty services. We apply SFL in a service-based system, for which we show that 100 % correct identification of faulty services can be achieved through the increased monitoring granularity. We assess the overhead with increased monitoring granularity and compare this with the original monitoring setup. Our experimental results show that the monitoring at the service communication level causes relatively high overhead, whereas the monitoring overhead at a finer level of granularity, i.e., at the service implementation level, is much lower, but highly dependent on the number of monitors deployed.
C1 [Chen, Cuiting; Zaidman, Andy] Delft Univ Technol, Software Engn Res Grp, Mekelweg 4, NL-2628 CD Delft, Netherlands.
   [Gross, Hans-Gerhard] Esslingen Univ, Fac Informat Technol, Flandernstr 101, D-73732 Esslingen, Germany.
C3 Delft University of Technology
RP Chen, CT (corresponding author), Delft Univ Technol, Software Engn Res Grp, Mekelweg 4, NL-2628 CD Delft, Netherlands.
EM cuiting.chen@tudelft.nl; hans-gerhard.gross@hs-esslingen.de;
   a.e.zaidman@tudelft.nl
RI Zaidman, Andy/O-6542-2014
OI Zaidman, Andy/0000-0003-2413-3935
FU NWO [638.001.212]
FX We would like to acknowledge NWO for sponsoring this research through
   the Jacquard ScaleItUp Project (Number 638.001.212). Also many thanks to
   our industrial partners Adyen and Exact.
CR Abreu R, 2006, 12TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P39
   Abreu R, 2009, J SYST SOFTWARE, V82, P1780, DOI 10.1016/j.jss.2009.06.035
   [Anonymous], P INT C ART INT AAAI
   [Anonymous], 2007, STUDIES COMPUTATIONA
   [Anonymous], INT WORKSH PRINC DIA
   Baresi Luciano, 2013, 2013 IEEE 20th International Conference on Web Services (ICWS), P83, DOI 10.1109/ICWS.2013.21
   Bennett K, 2000, SEVENTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P214, DOI 10.1109/APSEC.2000.896702
   Canfora G., 2006, IT Professional, V8, P10, DOI 10.1109/MITP.2006.51
   Chatzigiannakis V, 2007, IEEE SENS J, V7, P637, DOI 10.1109/JSEN.2007.894147
   Chen CZ, 2012, INT J PHOTOENERGY, V2012, DOI 10.1155/2012/768605
   Chen CT, 2013, INT CONF SOFTW SECUR, P129, DOI [10.1109/ICCIS.2013.42, 10.1109/SERE.2013.13]
   Chen MY, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P595, DOI 10.1109/DSN.2002.1029005
   Di Nitto E, 2008, AUTOMAT SOFTW ENG, V15, P313, DOI 10.1007/s10515-008-0032-x
   Espinha T, 2012, EUR CON SFTWR MTNCE, P391, DOI 10.1109/CSMR.2012.49
   Feldman A, 2010, J ARTIF INTELL RES, V38, P371, DOI 10.1613/jair.3025
   Gonzalez-Sanchez Alberto, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P42, DOI 10.1109/QSIC.2010.28
   Heward Garth, 2010, Proceedings of the 21st Australian Software Engineering Conference (ASWEC 2010), P192, DOI 10.1109/ASWEC.2010.28
   Jing Zhang, 2012, Proceedings of the 2012 IEEE 19th International Conference on Web Services (ICWS), P82, DOI 10.1109/ICWS.2012.38
   Keller A., 2003, Journal of Network and Systems Management, V11, P57, DOI 10.1023/A:1022445108617
   Lin KJ, 2009, IEEE INTERNET COMPUT, V13, P16, DOI 10.1109/MIC.2009.28
   Mayer W, 2012, FRONT ARTIF INTEL AP, V242, P582, DOI 10.3233/978-1-61499-098-7-582
   Mayer W, 2010, LECT NOTES COMPUT SC, V6470, P334, DOI 10.1007/978-3-642-17358-5_23
   Mohamed A, 2008, INT CONF QUAL SOFTW, P402, DOI 10.1109/QSIC.2008.46
   Mosincat Adina, 2011, International Journal on Software Tools for Technology Transfer, V13, P167, DOI 10.1007/s10009-010-0181-7
   Repp N, 2007, WHITESTEIN SER SOFTW, P21, DOI 10.1007/978-3-7643-8448-7_3
   Reps T, 1997, LECT NOTES COMPUT SC, V1301, P432, DOI 10.1145/267896.267925
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   WEYUKER EJ, 1982, COMPUT J, V25, P465, DOI 10.1093/comjnl/25.4.465
   Wong WE, 2010, J SYST SOFTWARE, V83, P188, DOI 10.1016/j.jss.2009.09.037
   Yan YH, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P51
   Yan YH, 2009, INT J WEB SERV RES, V6, P87, DOI 10.4018/jwsr.2009092205
   Zhang J., 2009, P INT C SERVICEORIEN, P1
   Zoeteweij P, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P213
   Zulkernine Farhana H., 2008, 2008 IEEE Congress on Services Part II (SERVICES-2), P149, DOI 10.1109/SERVICES-2.2008.10
NR 34
TC 0
Z9 0
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 437
EP 471
DI 10.1007/s11219-015-9286-2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU8EZ
UT WOS:000401271700004
OA hybrid, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU de Souza, EF
   de Santiago, VA
   Vijaykumar, NL
AF de Souza, Erica Ferreira
   de Santiago Junior, Valdivino Alexandre
   Vijaykumar, Nandamudi Lankalapalli
TI H-Switch Cover: a new test criterion to generate test case from finite
   state machines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Model-based testing; FSM test criteria; H-Switch Cover
ID SOFTWARE; MODEL
AB Test cases generation based on Finite State Machines (FSMs) has been addressed for quite some time. Model-based testing has drawn attention from researchers and practitioners as one of the approaches to support software verification and validation. Several test criteria have been proposed in the literature to generate test cases based on formal methods, such as FSM. However, there is still a lot to be done on this aspect in order to clearly direct a test designer to choose a test criterion most suitable to generate test cases for a certain application domain. This work presents a new test criterion for model-based test case generation based on FSM, H-Switch Cover. H-Switch Cover relies on the traditional Switch Cover test criterion, but H-Switch Cover uses new heuristics to improve its performance, for example, adoption of rules to optimize graph balancing and traverse the graph for test cases generation. We conducted an investigation of cost and efficiency of this new test criterion by comparing it with unique input/output and distinguishing sequence. We used two embedded software products (space application software products) and mutation analysis for assessing efficiency. In general, for the case studies proposed in this paper in terms of cost (amount of events) and efficiency (mutation score), H-Switch Cover test criterion presented an average and a standard deviation better than the other two test criteria.
C1 [de Souza, Erica Ferreira] Univ Tecnol Fed Parana UTFPR, Dept Comp, Av Alberto Carazzai 1640, BR-86300000 Cornelio Procopio, PR, Brazil.
   [de Santiago Junior, Valdivino Alexandre; Vijaykumar, Nandamudi Lankalapalli] Inst Nacl Pesquisas Espaciais, Lab Assoc Comp & Matemat Aplicada LAC, Av Astronautas 1758, BR-12227010 Sao Jose Dos Campos, SP, Brazil.
C3 Universidade Tecnologica Federal do Parana; Instituto Nacional de
   Pesquisas Espaciais (INPE)
RP de Souza, EF (corresponding author), Univ Tecnol Fed Parana UTFPR, Dept Comp, Av Alberto Carazzai 1640, BR-86300000 Cornelio Procopio, PR, Brazil.
EM ericasouza@utfpr.edu.br; valdivino.santiago@inpe.br; vijay.nl@inpe.br
RI Souza, Erica/IVV-7492-2023; Santiago Junior, Valdivino Alexandre
   de/C-7309-2016
OI Santiago Junior, Valdivino Alexandre de/0000-0002-4277-021X
CR Aho A.V., 1988, P IEEE 8 INT S PROT, P75
   AMARAL Adriana, 2005, THESIS
   Andrade J, 2013, INFORM SOFTWARE TECH, V55, P18, DOI 10.1016/j.infsof.2012.03.003
   Andrews A, 2005, SOFTWARE SYSTEMS MOD, V4, P326, DOI DOI 10.1007/S10270-004-0077-7
   [Anonymous], INPE16677RPQ850
   [Anonymous], 2008, Springer Series: Graduate Texts in Mathematics
   [Anonymous], 1998, 829 IEEE
   Antoniol G, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P269, DOI 10.1109/ISSRE.2002.1173268
   Arantes A., 2008, THESIS
   Arantes AO, 2008, 2008 INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE FOR MODELLING CONTROL & AUTOMATION, VOLS 1 AND 2, P163, DOI 10.1109/CIMCA.2008.143
   Bang-Jensen J, 2009, SPRINGER MONOGR MATH, P1, DOI 10.1007/978-1-84800-998-1_1
   Binder R. V., 2005, TESTING OBJECT ORIEN
   Bo Yang, 1990, Computer Communication Review, V20, P118, DOI 10.1145/99517.99543
   Briand LC, 2004, PROC INT CONF SOFTW, P86, DOI 10.1109/ICSE.2004.1317431
   Broy M., 2005, Springer LNCS
   Burguillo J., 2002, FMICS 02, V66, P50
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   de Bruijn N.G., 1949, PROC KONINKLIJKE NED, VA49, P758
   de Santiago VA, 2012, SOFTWARE QUAL J, V20, P77, DOI 10.1007/s11219-011-9155-6
   Demillo R. A., 1993, ACM Transactions on Software Engineering and Methodology, V2, P109, DOI 10.1145/151257.151258
   Dorofeeva R, 2005, LECT NOTES COMPUT SC, V3731, P204
   Dorofeeva R, 2010, INFORM SOFTWARE TECH, V52, P1286, DOI 10.1016/j.infsof.2010.07.001
   El-Fakih K, 2014, IEEE ICST WORKSHOP, P222, DOI 10.1109/ICSTW.2014.25
   El-Far I.K., 2001, ENCY SOFTWARE ENG
   Endo A. T., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P549, DOI 10.1109/ICST.2012.140
   Endo A. T., 2011, 2011 Proceedings of IEEE International Conference on Services Computing (SCC 2011), P432, DOI 10.1109/SCC.2011.77
   Endo Andre Takeshi, 2010, Proceedings of the 2010 Fourth IEEE International Conference on Secure Software Integration and Reliability Improvement Companion (SSIRI-C 2010), P62, DOI 10.1109/SSIRI-C.2010.24
   Endo AT, 2013, INFORM SOFTWARE TECH, V55, P1045, DOI 10.1016/j.infsof.2013.01.001
   European Space Agency (ESA), 2015, ESA B, V89
   Ferreira É, 2008, 2008 INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE FOR MODELLING CONTROL & AUTOMATION, VOLS 1 AND 2, P157, DOI 10.1109/CIMCA.2008.147
   Fraser G, 2007, LECT NOTES COMPUT SC, V4422, P291
   Fraser G, 2009, 2009 ICSE WORKSHOP ON AUTOMATION OF SOFTWARE TEST, P18, DOI 10.1109/IWAST.2009.5069037
   FRASER MD, 1991, IEEE T SOFTWARE ENG, V17, P454, DOI 10.1109/32.90448
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   Gill A., 1962, Introduction to the Theory of Finite-State Machines
   GONENC G, 1970, IEEE T COMPUT, VC 19, P551, DOI 10.1109/T-C.1970.222975
   Grieskamp W, 2011, SOFTW TEST VERIF REL, V21, P55, DOI 10.1002/stvr.427
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hierons R. M., 1997, Software Testing, Verification and Reliability, V7, P19, DOI 10.1002/(SICI)1099-1689(199703)7:1<19::AID-STVR124>3.0.CO;2-N
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Lipschutz S., 1997, MATEMATICA DISCRETA
   Luo G., 1995, Protocol Test Systems. 7th Workshop. 7th IFIP WG 6.1 International Workshop on Protocol Test Systems, P95
   Martins E, 1999, SOFTWARE QUAL J, V8, P303, DOI 10.1023/A:1008930105477
   MATHUR AP, 2008, FDN SOFTWARE TESTING
   Naito S., 1981, FTCS-11. The Eleventh Annual International Symposium on Fault-Tolerant Computing, P238
   NASA jet propulsion laboratory, 2014, TECHNICAL REPORT
   Neumann F, 2004, IEEE C EVOL COMPUTAT, P904, DOI 10.1109/CEC.2004.1330957
   Nguyen C. D., 2012, INT S SOFTW TEST AN, P15
   Oishi M., 2003, NASATM2003212803
   Oliveira Arantes Alessandro, 2014, International Journal of Web Engineering and Technology, V9, P62, DOI 10.1504/IJWET.2014.063041
   Peterson J.L., 1977, ACM Comput. Surv, V9, P223
   Petrenko A, 2005, IEEE T COMPUT, V54, P1154, DOI 10.1109/TC.2005.152
   Pimont S., 1976, 2nd International Conference on Software Engineering, P486
   Pinheiro AC, 2014, J AEROSP TECHNOL MAN, V6, P447, DOI 10.5028/jatm.v6i4.369
   Pontes RP, 2014, EMPIR SOFTW ENG, V19, P39, DOI 10.1007/s10664-012-9215-y
   Pretschner A, 2005, PROC INT CONF SOFTW, P392
   Robinson-Mallett C., 2006, SOFTWARE ENG, P131
   SABNANI K, 1988, COMPUT NETWORKS ISDN, V15, P285, DOI 10.1016/0169-7552(88)90064-5
   Santiago Junior V. A, 2011, THESIS
   Santiago Junior V. A., 2012, TOOLS SESS 3 BRAZ C, P25
   Santiago Valdivino, 2008, 2008 IEEE International Conference on Software Testing Verification and Validation Workshop (ICSTW), P63, DOI 10.1109/ICSTW.2008.7
   Santiago V, 2006, P INT COMP SOFTW APP, P183
   Schur M., 2014, P 2014 INT S SOFTW T, P413
   Shen Y. N., 1984, INT S PROT SPEC TEST, P131
   Shirole M., 2011, 4 IND SOFTW ENG C IS, P23
   Sidhu D. P., 1989, FORMAL METHODS PROTO, V13, P413
   Simao A, 2009, IET SOFTW, V3, P91, DOI 10.1049/iet-sen.2008.0018
   Simao A, 2010, COMPUT J, V53, P1508, DOI 10.1093/comjnl/bxp073
   Soucha M., 2014, FINITE STATE MACHINE
   Souza EC, 2010, THESIS
   Souza S. R. S., 2000, THESIS
   Sun HP, 2001, 2001 4TH INTERNATIONAL CONFERENCE ON ASIC PROCEEDINGS, P628, DOI 10.1109/ICASIC.2001.982642
   Utting M., 2006, Practical Model-Based Testing
   Wu C., 2013, 5 INT C SERV SCI INN, P29
   Xiaojun Shen, 1992, Applied Computing: Technological Challenges of the 1990's. Proceedings of the 1992 ACM/SIGAPP Symposium on Applied Computing, P75, DOI 10.1145/143559.143591
   Xiaojun Shen, 1991, 1991 Symposium on Applied Computing (Cat. No.91TH0355-8), P284, DOI 10.1109/SOAC.1991.143890
   Yue Jia, 2011, IEEE Transactions on Software Engineering, V37, P649, DOI 10.1109/TSE.2010.62
   Zander J., 2011, COMPUTATIONAL ANAL S
   Zhang XC, 2011, INFORMATICA-LITHUAN, V22, P447
NR 81
TC 11
Z9 12
U1 1
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 373
EP 405
DI 10.1007/s11219-015-9300-8
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU8EZ
UT WOS:000401271700002
DA 2024-07-18
ER

PT J
AU Marín, B
   Gallardo, C
   Quiroga, D
   Giachetti, G
   Serral, E
AF Marin, Beatriz
   Gallardo, Carlos
   Quiroga, Diego
   Giachetti, Giovanni
   Serral, Estefania
TI Testing of model-driven development applications
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Model-driven development; Abstract test case;
   Concrete test case
AB Human resource management practices are key for the success of software development projects. Practices that promote knowledge sharing and organizational learning are positively related to development-effort curves, and thus software companies are looking for different alternatives oriented to promoting these practices. The model-driven development (MDD) paradigm is positioned as one of the best alternatives for reutilization of development knowledge. In particular, this paradigm considers the specification of conceptual models that can be used as input for automatic code generation to different target platforms. However, testing of applications developed through MDD solutions is still performed by the manual definition and execution of test cases by testers, which negatively impacts in the time reduction obtained from automatic code generation and the reutilization of knowledge generated during the MDD project execution. To address this issue, this paper presents a testing approach that automatically generates executable test cases for software developed by using MDD technologies.
C1 [Marin, Beatriz; Gallardo, Carlos; Quiroga, Diego] Univ Diego Portales, Escuela Informat & Telecomunicac, Fac Ingn, Ejercito 441, Santiago, Chile.
   [Giachetti, Giovanni] Univ Andres Bello, Escuela Ingn Informat, Fac Ingn, Santiago, Chile.
   [Serral, Estefania] Katholieke Univ Leuven, Fac Econ & Business, Dept Decis Sci & Informat Management, Louvain, Belgium.
C3 University Diego Portales; Universidad Andres Bello; KU Leuven
RP Marín, B (corresponding author), Univ Diego Portales, Escuela Informat & Telecomunicac, Fac Ingn, Ejercito 441, Santiago, Chile.
EM beatriz.marin@mail.udp.cl; carlos.gallardo@mail.udp.cl;
   diego.quiroga@mail.udp.cl; giovanni.giachetti@unab.cl;
   estefania.serralasensio@kuleuven.be
RI Serral, Estefanía/I-8123-2018; Marín, Beatriz/Z-5032-2019; Giachetti,
   Giovanni/IQW-1538-2023; Giachetti, Giovanni/IWD-5481-2023
OI Serral, Estefanía/0000-0001-7579-910X; Marín,
   Beatriz/0000-0001-8025-0023; Giachetti, Giovanni/0000-0003-2809-5120
FU Universidad Diego Portales; FONDECYT [TESTMODE 11121395, AMoDDI
   11130583]
FX This work has been developed with the support of Universidad Diego
   Portales and FONDECYT under the project TESTMODE 11121395 and the
   project AMoDDI 11130583.
CR Amalfitano D, 2015, IEEE SOFTWARE, V32, P53, DOI 10.1109/MS.2014.55
   [Anonymous], IEEE 16 C EM TECHN F
   [Anonymous], P NAT COMP C EXP AFI
   [Anonymous], 5 INT C RES CHALL IN
   [Anonymous], NATO SCI PEACE SEC D
   [Anonymous], IEEE 830 GUID SOFTW
   [Anonymous], DATA FACTORY
   [Anonymous], P 1 EUR WORKSH BEH M
   [Anonymous], 35 ASEE IEEE FRONT E
   [Anonymous], UN MOD LANG UML 2 4
   Berkenkötter K, 2008, ELECTRON NOTES THEOR, V217, P203, DOI 10.1016/j.entcs.2008.06.050
   Bigot C, 2003, LECT NOTES COMPUT SC, V2619, P591
   Blanco Raquel, 2015, P 6 INT WORKSHOP AUT, P8, DOI [10.1145/2804322.2804324, DOI 10.1145/2804322.2804324]
   Botteck Martin, 2008, International Journal on Software Tools for Technology Transfer, V10, P285, DOI 10.1007/s10009-008-0077-y
   Brambilla M., 2012, MODELDRIVEN SOFTWARE, DOI [10.2200/S00441ED1V01Y201208SWE001, DOI 10.2200/S00441ED1V01Y201208SWE001]
   Brucker AD., 2011, International conference models in software engineering, P334
   Castillos Kalou Cabrera, 2011, International Journal on Software Tools for Technology Transfer, V13, P431, DOI 10.1007/s10009-011-0189-7
   Chen RF, 2013, 2013 IEEE/ACIS 12TH INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION SCIENCE (ICIS), P341, DOI 10.1109/ICIS.2013.6607864
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   Dalal S. R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P285, DOI 10.1109/ICSE.1999.841019
   de Sousa Santos I., 2011, Proceedings of the 23rd International Conference on Software Engineering Knowledge Engineering (SEKE 2011), P258
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   Fanping Zeng, 2009, 2009 1st International Conference on Information Science and Engineering (ICISE 2009), P5055, DOI 10.1109/ICISE.2009.965
   Farooq U, 2009, IEEE ICST WORKSHOP, P141, DOI 10.1109/ICSTW.2009.27
   Fourneret E., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P125, DOI 10.1109/ICSTW.2011.95
   France RB, 2006, COMPUTER, V39, P59, DOI 10.1109/MC.2006.65
   Fujiwara S, 2011, INNOV SYST SOFTW ENG, V7, P275, DOI 10.1007/s11334-011-0162-3
   Gutierrez JJ, 2009, INT CONF RES CHAL, P303, DOI 10.1109/RCIS.2009.5089294
   Koopman P, 2008, LECT NOTES COMPUT SC, V4902, P299
   Lasalle J, 2011, INNOV SYST SOFTW ENG, V7, P247, DOI 10.1007/s11334-011-0164-1
   LOPEZ OP, 1992, LECT NOTES COMPUT SC, V593, P348
   Marin Beatriz, 2013, MODELSWARD 2013. 1st International Conference on Model-Driven Engineering and Software Development. Proceedings, P257
   Marín B, 2008, LECT NOTES COMPUT SC, V5089, P215, DOI 10.1007/978-3-540-69566-0_19
   Marín B, 2010, DATA KNOWL ENG, V69, P472, DOI 10.1016/j.datak.2010.01.001
   Mlynarski Michael, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P327, DOI 10.1109/ICST.2010.35
   Moreno N, 2007, IET SOFTW, V1, P67, DOI 10.1049/iet-sen:20060067
   Nylund K., 2011, Proceedings of the 2011 IEEE 35th IEEE Annual Computer Software and Applications Conference Workshops (COMPSACW 2011). Volume II: Workshops, P174, DOI 10.1109/COMPSACW.2011.38
   Opdahl AL, 2005, DATA KNOWL ENG, V55, P277, DOI 10.1016/j.datak.2004.12.007
   Pastor O, 2001, INFORM SYST, V26, P507, DOI 10.1016/S0306-4379(01)00035-7
   Pastor O., 2004, ERCIM NEWS
   Lamancha BP, 2013, INFORM SOFTWARE TECH, V55, P301, DOI 10.1016/j.infsof.2012.08.009
   Reza H, 2008, PROCEEDINGS OF THE FIFTH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, P183
   Rui Yang, 2011, Proceedings of the 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), P17, DOI 10.1109/HASE.2011.12
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Seifert D, 2008, LECT NOTES COMPUT SC, V5256, P45, DOI 10.1007/978-3-540-88194-0_6
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   Slaughter SA, 1998, COMMUN ACM, V41, P67, DOI 10.1145/280324.280335
   Utting M., 2007, PRACTICAL MODEL BASE
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Wieczorek S, 2008, TACI PART 2008:TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P82, DOI 10.1109/TAIC-PART.2008.17
   Xu DX, 2015, IEEE T COMPUT, V64, P2490, DOI 10.1109/TC.2014.2375189
   Yuan QL, 2008, IEEE INTL SYMPOS WEB, P41, DOI 10.1109/WSE.2008.4655394
NR 52
TC 7
Z9 8
U1 2
U2 19
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 407
EP 435
DI 10.1007/s11219-016-9308-8
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU8EZ
UT WOS:000401271700003
DA 2024-07-18
ER

PT J
AU Asadollah, SA
   Sundmark, D
   Eldh, S
   Hansson, H
   Afzal, W
AF Asadollah, Sara Abbaspour
   Sundmark, Daniel
   Eldh, Sigrid
   Hansson, Hans
   Afzal, Wasif
TI 10 Years of research on debugging concurrent and multicore software: a
   systematic mapping study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Concurrent; Parallel; Multicore; Debugging process; Bugs; Fault;
   Failure; Systematic mapping study
ID MULTITHREADED PROGRAMS; RACE DETECTION; ATOMICITY; MEMORY; DEADLOCK;
   CHECKING; REPLAY; DESIGN; SMT
AB Debugging-the process of identifying, localizing and fixing bugs-is a key activity in software development . Due to issues such as non-determinism and difficulties of reproducing failures, debugging concurrent software is significantly more challenging than debugging sequential software. A number of methods, models and tools for debugging concurrent and multicore software have been proposed, but the body of work partially lacks a common terminology and a more recent view of the problems to solve. This suggests the need for a classification, and an up-to-date comprehensive overview of the area. This paper presents the results of a systematic mapping study in the field of debugging of concurrent and multicore software in the last decade (2005-2014). The study is guided by two objectives: (1) to summarize the recent publication trends and (2) to clarify current research gaps in the field. Through a multi-stage selection process, we identified 145 relevant papers. Based on these, we summarize the publication trend in the field by showing distribution of publications with respect to year, publication venues, representation of academia and industry, and active research institutes. We also identify research gaps in the field based on attributes such as types of concurrency bugs, types of debugging processes, types of research and research contributions. The main observations from the study are that during the years 2005-2014: (1) there is no focal conference or venue to publish papers in this area; hence, a large variety of conferences and journal venues (90) are used to publish relevant papers in this area; (2) in terms of publication contribution, academia was more active in this area than industry; (3) most publications in the field address the data race bug; (4) bug identification is the most common stage of debugging addressed by articles in the period; (5) there are six types of research approaches found, with solution proposals being the most common one; and (6) the published papers essentially focus on four different types of contributions, with "methods" being the most common type. We can further conclude that there are still quite a number of aspects that are not sufficiently covered in the field, most notably including (1) exploring correction and fixing bugs in terms of debugging process; (2) order violation, suspension and starvation in terms of concurrency bugs; (3) validation and evaluation research in the matter of research type; (4) metric in terms of research contribution. It is clear that the concurrent, parallel and multicore software community needs broader studies in debugging. This systematic mapping study can help direct such efforts.
C1 [Asadollah, Sara Abbaspour; Sundmark, Daniel; Eldh, Sigrid; Afzal, Wasif] Malardalen Univ, Vasteras, Sweden.
   [Hansson, Hans] Malardalen Univ, Real Time Syst, Vasteras, Sweden.
   [Eldh, Sigrid] Ericsson AB, Kista, Sweden.
C3 Malardalen University; Malardalen University; Ericsson
RP Asadollah, SA (corresponding author), Malardalen Univ, Vasteras, Sweden.
EM sara.abbaspour@mdh.se; daniel.sundmark@mdh.se; sigrid.eldh@ericsson.com;
   hans.hansson@mdh.se; wasif.afzal@mdh.se
RI Eldh, Sigrid/AAB-2260-2022; Eldh, Sigrid/JVO-0074-2024
OI Eldh, Sigrid/0000-0002-5070-9312; Eldh, Sigrid/0000-0002-5070-9312;
   Abbaspour Asadollah, Sara/0000-0002-5058-7351
FU Swedish Foundation for Strategic Research (SSF) via the SYNOPSIS Project
FX This research is supported by Swedish Foundation for Strategic Research
   (SSF) via the SYNOPSIS Project.
CR Adalid D, 2014, J SYST SOFTWARE, V90, P61, DOI 10.1016/j.jss.2013.10.056
   Agarwal Rahul, 2006, P 2006 WORKSH PAR DI, P51
   Altekar G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P193
   [Anonymous], P 2007 ACM WORKSH PA
   [Anonymous], P 7 WORKSH PAR DISTR
   [Anonymous], P 2012 19 AS PAC SOF
   [Anonymous], P 29 ACM IEEE INT C
   [Anonymous], SCI COMPUTING
   [Anonymous], IPDPS 2008
   [Anonymous], DIG AV SYST C DASC 2
   [Anonymous], P 24 ACM SIGPL SIG S
   [Anonymous], IEEE INT S PAR DISTR
   [Anonymous], P IEEE INT C REC ADV
   [Anonymous], P 2006 ACM IEEE C SU
   [Anonymous], P 35 ACM SIGPLAN C P
   [Anonymous], P INT C HIGH PERF CO
   [Anonymous], P 7 WORKSH PAR DISTR
   [Anonymous], P 6 WORKSH PAR DISTR
   [Anonymous], INT J SOFTWARE ENG I
   [Anonymous], P 1 INT WORKSH COMPL
   [Anonymous], P 6 WORKSH PAR DISTR
   [Anonymous], P 24 ACM S OP SYST P
   [Anonymous], INT J SOFTWARE ENG A
   [Anonymous], CONCURRENT SOFTWARE
   [Anonymous], P 2013 INT S SOFTW T
   [Anonymous], P 2012 WORKSH PAR DI
   [Anonymous], P 35 ACM SIGPLAN C P
   [Anonymous], P 7 INT WORKSH DYN A
   [Anonymous], P 14 INT C COMP SYST
   [Anonymous], P 7 WORKSH PAR DISTR
   [Anonymous], ASPLOS 16 16 INT C
   [Anonymous], 2010, P 8 WORKSH PAR DISTR
   [Anonymous], P 35 ACM SIGPLAN C P
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Arulraj J, 2013, ACM SIGPLAN NOTICES, V48, P101, DOI 10.1145/2499368.2451128
   Ball T, 2009, PROC INT CONF SOFTW, P403, DOI 10.1109/ICSE-COMPANION.2009.5071033
   Berger ED, 2009, ACM SIGPLAN NOTICES, V44, P81, DOI 10.1145/1639949.1640096
   Bond MD, 2013, ACM SIGPLAN NOTICES, V48, P693, DOI [10.1145/2509136.2509519, 10.1145/2544173.2509519]
   Buttigieg V, 2011, IEEE INT SYMP INFO, P1579, DOI 10.1109/ISIT.2011.6033810
   Chen Feng., 2008, ICSE 08, P221
   Chen HY, 2005, IEEE SYS MAN CYBERN, P146
   Chen JLZ, 2007, ELE COM ENG, P313, DOI 10.1145/1321631.1321678
   Chen YF, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2517327.2442537
   Chiu YC, 2011, PARALLEL COMPUT, V37, P11, DOI 10.1016/j.parco.2010.09.002
   Copty S, 2007, ELECTRON NOTES THEOR, V174, P151, DOI 10.1016/j.entcs.2007.04.001
   Dantas Ayla, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P521, DOI 10.1109/ICST.2008.38
   Gallardo MD, 2006, J INTEGR DES PROCESS, V10, P55
   DeSouza J., 2005, Proceedings of the Second International Workshop on Software Engineering for High Performance Computing System Applications, P78, DOI DOI 10.1145/1145319.1145342
   Devietti J, 2010, IEEE MICRO, V30, P40, DOI 10.1109/MM.2010.14
   Eichinger F, 2014, CONCURR COMP-PRACT E, V26, P1, DOI 10.1002/cpe.2918
   Eichinger F, 2010, LECT NOTES COMPUT SC, V6303, P56, DOI 10.1007/978-3-642-15585-7_7
   Engström E, 2011, INFORM SOFTWARE TECH, V53, P2, DOI 10.1016/j.infsof.2010.05.011
   Feng Yong, 2014, P 29 ACM IEEE INT C, P611, DOI 10.1145
   Flanagan C, 2010, ACM SIGPLAN NOTICES, V45, P244, DOI 10.1145/1809028.1806625
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Fonseca P, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P215
   Francesca G, 2011, P INT COMP SOFTW APP, P108, DOI 10.1109/COMPSAC.2011.22
   Gesbert L., 2010, Proceedings 2010 11th International Conference on Parallel and Distributed Computing, Applications and Technologies (PDCAT 2010), P334, DOI 10.1109/PDCAT.2010.86
   Gottschlich J, 2013, INT CONFER PARA, P331, DOI 10.1109/PACT.2013.6618829
   Gupta S., 2009, INTERDISCIP PERSPECT, V2009, DOI 10.1155/2009/190354.
   Ha O.-K., 2012, Proceedings of the 2012 Workshop on Parallel and Distributed Systems: Testing, Analysis, and Debugging, PADTAD 2012, P1, DOI 10.1145/2338967.2336808
   Hong S, 2013, J SYST SOFTWARE, V86, P377, DOI 10.1016/j.jss.2012.08.063
   Hongyi Ma, 2012, 2012 41st International Conference on Parallel Processing Workshops (ICPPW 2012), P590, DOI 10.1109/ICPPW.2012.83
   Hower DR, 2008, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2008.26
   Huang JQ, 2013, ADV PUB ENV OCCUP H, V2, P53
   Huang R., 2013, Proceedings of the 40th Annual International Symposium on Computer Architecture, ISCA '13, P655
   Jalali S, 2012, INT SYMP EMP SOFTWAR, P29, DOI 10.1145/2372251.2372257
   Jannesari A, 2014, IEEE T PARALL DISTR, V25, P2606, DOI 10.1109/TPDS.2013.209
   Jiageng Yu, 2012, 2012 IEEE Workshops of International Conference on Advanced Information Networking and Applications (WAINA), P429, DOI 10.1109/WAINA.2012.124
   Jin GL, 2011, ACM SIGPLAN NOTICES, V46, P389, DOI 10.1145/1993316.1993544
   Joshi Pallavi, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P288, DOI 10.1109/ASE.2008.39
   Kahlon Vineet, 2013, International Journal on Software Tools for Technology Transfer, V15, P321, DOI 10.1007/s10009-013-0274-1
   Kahlon V, 2007, LECT NOTES COMPUT SC, V4590, P226
   Kahlon V, 2012, Proceedings of the 12th Conference on Formal Methods in Computer-Aided Design (FMCAD 2012), P16
   Keele S, 2007, GUIDELINES PERFORMIN
   Kelly T, 2009, COMPUTER, V42, P52, DOI 10.1109/MC.2009.391
   Khoshavi N, 2012, INT CONF MICROELECTR, P371, DOI 10.1109/MIEL.2012.6222877
   Kiefer KE, 2013, SOFTWARE PRACT EXPER, V43, P1261, DOI 10.1002/spe.1094
   Kim BC, 2010, COMM COM INF SC, V117, P228
   Kim YJ, 2007, LECT NOTES COMPUT SC, V4459, P310
   Kim YJ, 2007, LECT NOTES COMPUT SC, V4671, P230
   Kistler M, 2011, INT SYM PERFORM ANAL, P207, DOI 10.1109/ISPASS.2011.5762737
   Li H, 2014, SCI CHINA INFORM SCI, V57, DOI 10.1007/s11432-014-5150-4
   Liqiang Wang, 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P137, DOI 10.1145/1122971.1122993
   Liu P, 2012, PROC INT CONF SOFTW, P299, DOI 10.1109/ICSE.2012.6227184
   Lonnberg J., 2011, VIS SOFTW UND AN VIS, P1
   Lu K, 2013, ACM SIGPLAN NOTICES, V48, P297, DOI 10.1145/2517327.2442553
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Lu Shan., 2007, P 6 JOINT M EUROPEAN, P533
   Lucia Brandon, 2009, Proceedings of the 2009 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 2009), P553, DOI 10.1145/1669112.1669181
   Lucia B, 2010, CONF PROC INT SYMP C, P222, DOI 10.1145/1816038.1815988
   Machado N., 2012, 2012 42 ANN IEEE IFI, P1
   Martin JP, 2010, ACM SIGPLAN NOTICES, V45, P457, DOI 10.1145/1707801.1706351
   Dinh MN, 2014, J COMPUT SCI-NETH, V5, P126, DOI 10.1016/j.jocs.2013.12.002
   Moiseev M, 2013, IEEE INT SYMP DESIGN, P54, DOI 10.1109/DDECS.2013.6549788
   Montesinos P, 2008, CONF PROC INT SYMP C, P289, DOI 10.1109/ISCA.2008.36
   Mozaffari-Kermani M, 2014, IEEE T VLSI SYST, V22, P995, DOI 10.1109/TVLSI.2013.2260570
   Nan Wang, 2012, 2012 IEEE 7th International Conference on Networking, Architecture, and Storage (NAS), P189, DOI 10.1109/NAS.2012.28
   Nanz S, 2013, INFORM SOFTWARE TECH, V55, P1304, DOI 10.1016/j.infsof.2012.08.013
   Ossner C, 2013, INT J PARALLEL PROG, V41, P570, DOI 10.1007/s10766-012-0237-2
   Park C.-S., 2008, FSE, P135
   Park CS, 2012, ACM SIGPLAN NOTICES, V47, P331, DOI 10.1145/2370036.2145880
   Park HD, 2012, COMM COM INF SC, V351, P165
   Park MY, 2008, 2008 IEEE 8TH INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION TECHNOLOGY, VOLS 1 AND 2, P261, DOI 10.1109/CIT.2008.4594684
   Park MY, 2007, GRC: 2007 IEEE INTERNATIONAL CONFERENCE ON GRANULAR COMPUTING, PROCEEDINGS, P745, DOI 10.1109/GrC.2007.120
   Peng Wang, 2012, Proceedings of the 2012 8th International Conference on Information Science and Digital Content Technology (ICIS and IDCTA), P139
   Petersen K., 2008, EASE
   Prvulovic M, 2006, INT S HIGH PERF COMP, P236, DOI 10.1109/HPCA.2006.1598132
   Pun KI, 2014, J LOG ALGEBR METHODS, V83, P400, DOI 10.1016/j.jlamp.2014.07.003
   Qi S., 2012, 2012 IEEE 18 INT S H, P1
   Qichang Chen, 2009, 2009 33rd Annual IEEE International Computer Software and Applications Conference (COMPSAC 2009), P676, DOI 10.1109/COMPSAC.2009.105
   Raychev V, 2013, ACM SIGPLAN NOTICES, V48, P151, DOI [10.1145/2544173.2509538, 10.1145/2509136.2509538]
   Rister BD, 2007, IEEE INT CONF ROBOT, P2227, DOI 10.1109/ROBOT.2007.363651
   Sack P., 2006, Proceedings of the 1st Workshop on Architectural and System Support for Improving Software Dependability, ASID '06, P34
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Sangmin Park, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P51, DOI 10.1109/ICST.2012.85
   Schuppan V, 2005, ELECTRON NOTES THEOR, V113, P85, DOI 10.1016/j.entcs.2004.01.032
   Sen K, 2008, ACM SIGPLAN NOTICES, V43, P11, DOI 10.1145/1379022.1375584
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, WBIA'09, P62, DOI DOI 10.1145/1791194.1791203
   Shimomura Takao, 2013, 2013 Science and Information Conference (SAI), P45
   Shousha M, 2012, IEEE T SOFTWARE ENG, V38, P354, DOI 10.1109/TSE.2010.107
   Shousha M, 2009, LECT NOTES COMPUT SC, V5795, P47, DOI 10.1007/978-3-642-04425-0_5
   Tallam S, 2008, PROC IEEE INT CONF S, P97, DOI 10.1109/ICSM.2008.4658058
   Tan L., 2013, PROC INT C CLUSTER C, P1
   Tchamgoue GM, 2010, COMM COM INF SC, V120, P238
   Tian C, 2009, SOFTWARE PRACT EXPER, V39, P947, DOI 10.1002/spe.922
   Torrellas J, 2009, COMMUN ACM, V52, P58, DOI 10.1145/1610252.1610271
   Uhrig S., 2011, Proceedings of the 2011 IEEE 35th IEEE Annual Computer Software and Applications Conference Workshops (COMPSACW 2011). Volume II: Workshops, P516, DOI 10.1109/COMPSACW.2011.94
   Ur S., 2007, P 2007 INT S SOFTW T, P27
   Veeraraghavan K, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P369
   Viennot N, 2013, ACM SIGPLAN NOTICES, V48, P127, DOI 10.1145/2499368.2451130
   Vo Anh., 2010, P 2010 ACMIEEE INT C, P1
   Wang JY, 2007, PR IEEE COMP DESIGN, P514
   Wang LQ, 2006, IEEE T SOFTWARE ENG, V32, P93, DOI 10.1109/TSE.2006.1599419
   Wang T, 2014, KSII T INTERNET INF, V8, P965, DOI 10.3837/tiis.2014.03.014
   Wang Y, 2012, IEEE DECIS CONTR P, P7230, DOI 10.1109/CDC.2012.6426112
   Weeratunge D., 2010, P 19 INT S SOFTW TES, P253
   Weeratunge D, 2010, ACM SIGPLAN NOTICES, V45, P155, DOI 10.1145/1735971.1736039
   Wei Wang Binxing Fang, 2005, WSEAS Transactions on Computers, V4, P750
   Wen CN, 2012, IEEE T COMPUT, V61, P199, DOI 10.1109/TC.2010.254
   Wen CN, 2009, 2009 10TH INTERNATIONAL SYMPOSIUM ON PERVASIVE SYSTEMS, ALGORITHMS, AND NETWORKS (ISPAN 2009), P86, DOI 10.1109/I-SPAN.2009.123
   Wen Y, 2011, IEEE INT CONF TRUST, P1600, DOI 10.1109/TrustCom.2011.222
   Wester B, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499368.2451120
   Wieringa R, 2006, REQUIR ENG, V11, P102, DOI 10.1007/s00766-005-0021-6
   Xueguang Wu, 2013, 2013 IEEE Seventh International Conference on Software Security and Reliability Companion (SERE-C), P204, DOI 10.1109/SERE-C.2013.33
   Yang Q, 2012, IEEE SYS MAN CYBERN, P1, DOI 10.1109/ICSMC.2012.6377667
   Yoshiura Noriaki, 2014, Internet and Distributed Computing Systems. 7th International Conference, IDCS 2014, Calabria, Italy, September 22-24, 2014. Proceedings: LNCS 8729, P161, DOI 10.1007/978-3-319-11692-1_14
   Young Wn Song, 2014, 2014 IEEE International Parallel & Distributed Processing Symposium (IPDPS), P679, DOI 10.1109/IPDPS.2014.76
   Yuan D, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P143
   Zeller A, 2009, WHY PROGRAMS FAIL: A GUIDE TO SYSTEMATIC DEBUGGING, 2ND EDITION
   Zhang W, 2013, ACM SIGPLAN NOTICES, V48, P113, DOI 10.1145/2499368.2451129
   Zhou P, 2007, INT S HIGH PERF COMP, P121
   Zyulkyarov F, 2010, ACM SIGPLAN NOTICES, V45, P57, DOI 10.1145/1837853.1693463
NR 153
TC 17
Z9 19
U1 0
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 49
EP 82
DI 10.1007/s11219-015-9301-7
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400003
DA 2024-07-18
ER

PT J
AU Wininger, F
   Ezzati-Jivan, N
   Dagenais, MR
AF Wininger, Florian
   Ezzati-Jivan, Naser
   Dagenais, Michel R.
TI A declarative framework for stateful analysis of execution traces
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software debugging; Declarative debugging; Execution trace analysis
ID QUERY
AB With newer complex multi-core systems, it is important to understand an application's runtime behavior to be able to debug its execution, detect possible problems and bottlenecks and finally identify potential root causes. Execution traces usually contain precise data about an application execution. Their analysis and abstraction at multiple levels can provide valuable information and insights about an application's runtime behavior. However, with multiple abstraction levels, it becomes increasingly difficult to find the exact location of detected performance or security problems. Tracing tools provide various analysis views to help users to understand their application problems. However, these pre-defined views are often not sufficient to reveal all analysis aspects of the underlying application. A declarative approach that enables users to specify and build their own custom analysis and views based on their knowledge, requirements and problems can be more useful and effective. In this paper, we propose a generic declarative trace analysis framework to analyze, comprehend and visualize execution traces. This enhanced framework builds custom analyses based on a specified modeled state, extracted from a system execution trace and stored in a special purpose database. The proposed solution enables users to first define their different analysis models based on their application and requirements, then visualize these models in many alternate representations (Gantt chart, XY chart, etc.), and finally filter the data to get some highlights or detect some potential patterns. Several sample applications with different operating systems are shown, using trace events gathered from Linux and Windows, at the kernel and user-space levels.
C1 [Wininger, Florian; Ezzati-Jivan, Naser; Dagenais, Michel R.] Ecole Polytech Montreal, Montreal, PQ H3T 1J4, Canada.
C3 Universite de Montreal; Polytechnique Montreal
RP Ezzati-Jivan, N (corresponding author), Ecole Polytech Montreal, Montreal, PQ H3T 1J4, Canada.
EM florian.wininger@polymtl.ca; n.ezzati@polymtl.ca;
   michel.dagenais@polymtl.ca
RI Ezzati-Jivan, Naser/ABA-3496-2021
OI Ezzati-Jivan, Naser/0000-0003-1435-6297
CR [Anonymous], 2006, P OTT LIN S
   [Anonymous], 2011, THESIS
   Blunck J., 2009, P LIN K
   Cantrill B., 2004, P ANN C USENIX ANN T, P2
   Cohen I., 2004, P USENIX OSDI, V6, P16
   Cohen I., 2005, Proceedings of the twentieth ACM symposium on Operating systems principles, SOSP '05, (New York, NY, USA), P105, DOI DOI 10.1145/1095810.1095821
   Desnoyers Mathieu, 2006, OLS OTT LIN S CIT, V2006, P209
   Desnoyers Mathieu, 2008, LIN S, V101
   Eckmann S. T., 2002, Journal of Computer Security, V10, P71
   Ezzati-Jivan Naser, 2013, Operating Systems Review, V47, P43
   Ezzati-Jivan Naser, 2012, Advances in Software Engineering, DOI 10.1155/2012/140368
   EZZATI-JIVAN N., 2014, 27th Annual IEEE Canadian Conference on Electrical and Computer Engineering (CCECE), V2014, P1
   EZZATI-JIVAN N., 2013, 26th Annual IEEE Canadian Conference on Electrical and Computer Engineering (CCECE), V2013, P1
   Gebai Mohamad., 2014, Journal of Cloud Computing: Advances, Systems and Applications, V3, P41
   Goldsmith S, 2005, ACM SIGPLAN NOTICES, V40, P385, DOI 10.1145/1103845.1094841
   HABRA N, 1992, LECT NOTES COMPUT SC, V648, P435, DOI 10.1007/BFb0013912
   Hamou-Lhadj A., 2013, PROC INT C RELIABLE, P328
   J-H D ESCH^ENES., 2008, The Open Software Engineering Journal, P40
   Lee KH, 2011, I C DEPEND SYS NETWO, P85, DOI 10.1109/DSN.2011.5958209
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Matni Gabriel, 2009, 2009 Canadian Conference on Electrical and Computer Engineering (CCECE 2009), P970, DOI 10.1109/CCECE.2009.5090273
   Montplaisir A., 2013, 2013 ASE IEEE INT C
   Montplaisir A, 2013, LECT NOTES COMPUT SC, V8174, P219, DOI 10.1007/978-3-642-40787-1_13
   Roesch M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XIII), P229
   Schnorr LM, 2009, CCGRID: 2009 9TH IEEE INTERNATIONAL SYMPOSIUM ON CLUSTER COMPUTING AND THE GRID, P428, DOI 10.1109/CCGRID.2009.19
   Zaki O, 1999, INT J HIGH PERFORM C, V13, P277, DOI 10.1177/109434209901300310
NR 26
TC 10
Z9 12
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2017
VL 25
IS 1
BP 201
EP 229
DI 10.1007/s11219-016-9311-0
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EL3MX
UT WOS:000394524400008
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Parsons, D
   Susnjak, T
   Lange, M
AF Parsons, David
   Susnjak, Teo
   Lange, Manfred
TI Influences on regression testing strategies in agile software
   development environments
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Regression testing strategy; Exploratory case study; Survey; Agile
   software development
AB Regression testing is a well-established practice in software development, but in recent years it has seen a change of status and emphasis with the increasing popularity of agile methods, which stress the central role of regression testing in maintaining software quality. The objectives of this article are to investigate regression testing strategies in agile development teams and identify the factors that can influence the adoption and implementation of this practice. We have used a mixed methods approach to our research, beginning with an analysis of the literature to identify research themes related to the adoption of regression testing techniques under agile methodologies, from which we developed an analytical framework for the study. This was followed by three exploratory case studies that we used to exercise the main elements of the framework, develop some key themes of interest, and devise a questionnaire for the final stage of the study, an on-line survey to explore the main issues identified in the case studies across different contexts. Within our specific sample, our results suggest that organizational maturity is a key factor in effective regression testing practices and that the adoption of such practices is helped by a coherent testing philosophy and change management processes. We also found that the return on investment in automated regression testing was positive for our respondents and that adopting these practices in the context of agile methods had been a relatively painless process for the organizations in our survey. We conclude that investing in regression testing tools and processes is likely to be beneficial for organizations. However, further work is needed in assessing how organizational culture impacts on the quality process and the financial outcomes for commercial software development organizations.
C1 [Parsons, David; Susnjak, Teo] Massey Univ, Sch Engn & Adv Technol, Auckland, New Zealand.
   [Lange, Manfred] Agile Util New Zealand Ltd, Auckland, New Zealand.
C3 Massey University
RP Parsons, D (corresponding author), Massey Univ, Sch Engn & Adv Technol, Auckland, New Zealand.
EM d.p.parsons@massey.ac.nz; t.susnjak@massey.ac.nz; ml@agileutilities.com
RI Parsons, David/AAI-6071-2021
OI Parsons, David/0000-0002-9815-036X; Susnjak, Teo/0000-0001-9416-1435
CR [Anonymous], 1989, INSIGHTS REGRESSION
   [Anonymous], INT S SOFTW TEST AN
   Damm LO, 2005, ELECTRON NOTES THEOR, V116, P3, DOI 10.1016/j.entcs.2004.02.090
   Do H, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P60
   Dustin E., 1999, AUTOMATED SOFTWARE T
   Elbaum S, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P169, DOI 10.1109/METRIC.2001.915525
   Engström E, 2010, LECT NOTES COMPUT SC, V6156, P3, DOI 10.1007/978-3-642-13792-1_3
   Engström E, 2010, INFORM SOFTWARE TECH, V52, P14, DOI 10.1016/j.infsof.2009.07.001
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   GITTENS M, 2002, P 2002 C CTR ADV STU, P3
   Hetzel W., 1984, The complete guide to software testing
   Jiang Zheng, 2006, 28th International Conference on Software Engineering Proceedings, P512, DOI 10.1145/1134285.1134357
   Kim JM, 2005, SOFTW TEST VERIF REL, V15, P257, DOI 10.1002/stvr.326
   Korel B., 1998, P ISSTA 98 CLEARW BE
   LOO PS, 1988, INFORM SOFTWARE TECH, V30, P402, DOI 10.1016/0950-5849(88)90037-7
   Martin R. C., 2011, AGILE SOFTWARE DEV P
   Meszaros Gerard., 2003, OBJECT ORIENTED PROG, P353
   Onoma AK, 1998, COMMUN ACM, V41, P81, DOI 10.1145/274946.274960
   Orso A., 2003, Software Engineering Notes, V28, P128, DOI 10.1145/949952.940089
   Persson C., 2004, P 19 IEEE INT C AUT
   Puleio M., 2006, P AG C 2006, P307
   Runeson P, 2003, J SOFTW MAINT EVOL-R, V15, P41, DOI 10.1002/smr.265
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Salama R, 2011, P ACM INT C COMPANIO, P149
   Siegel S., 1996, OBJECT ORIENTED SOFT, V1st
   Svensson H, 2005, NINTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P256, DOI 10.1109/CSMR.2005.33
   Talby D, 2006, IEEE SOFTWARE, V23, P30, DOI 10.1109/MS.2006.93
   Wang WE, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P264, DOI 10.1109/ISSRE.1997.630875
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
NR 29
TC 7
Z9 13
U1 0
U2 31
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2014
VL 22
IS 4
BP 717
EP 739
DI 10.1007/s11219-013-9225-z
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AR8NQ
UT WOS:000343832100008
DA 2024-07-18
ER

PT J
AU Felderer, M
   Ramler, R
AF Felderer, Michael
   Ramler, Rudolf
TI Integrating risk-based testing in industrial test processes
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Risk-based testing; System testing; Test-process improvement; Test
   management; Software risk management; Software testing
ID SPICE
AB Risk-based testing has a high potential to improve the software development and test process as it helps to optimize the allocation of resources and provides decision support for the management. But for many organizations, its integration into an existing test process is a challenging task. In this article, we provide a comprehensive overview of existing work and present a generic testing methodology enhancing an established test process to address risks. On this basis, we develop a procedure on how risk-based testing can be introduced in a test process and derive a stage model for its integration. We then evaluate our approach for introducing risk-based testing by means of an industrial study and discuss benefits, prerequisites and challenges to introduce it. Potential benefits of risk-based testing identified in the studied project are faster detection of defects resulting in an earlier release, a more reliable release quality statement as well as the involved test-process optimization. As necessary prerequisites for risk-based testing, we identified an inhomogeneous distribution of risks associated with the various parts of the tested software system as well as consolidated technical and business views on it. Finally, the identified challenges of introducing risk-based testing are reliable risk assessment in the context of complex systems, the availability of experts for risk assessment as well as established tool supports for test management.
C1 [Felderer, Michael] Univ Innsbruck, Inst Comp Sci, Qual Engn Res Grp, A-6020 Innsbruck, Austria.
   [Ramler, Rudolf] Software Competence Ctr Hagenberg, Hagenberg, Austria.
C3 University of Innsbruck; Softwarepark Hagenberg
RP Felderer, M (corresponding author), Univ Innsbruck, Inst Comp Sci, Qual Engn Res Grp, A-6020 Innsbruck, Austria.
EM michael.felderer@uibk.ac.at; rudolf.ramler@scch.at
RI Felderer, Michael/AAF-4909-2020
OI Ramler, Rudolf/0000-0001-9903-6107
FU COMET Competence Center program of the Austrian Research Promotion
   Agency (FFG); project QE LaB-Living Models for Open Systems - Austrian
   Federal Ministry of Economics (Bundesministerium fur Wirtschaft und
   Arbeit); project MOBSTECO - Austrian Science Fund (FWF); competence
   network Softnet Austria; Austrian Federal Ministry of Economics
   (Bundesministerium fur Wirtschaft und Arbeit); province of Styria;
   Steirische Wirtschaftsforderungsgesellschaft mbH (SFG); city of Vienna's
   Center for Innovation and Technology (ZIT); Austrian Science Fund (FWF)
   [P26194] Funding Source: Austrian Science Fund (FWF)
FX This work has been supported by the COMET Competence Center program of
   the Austrian Research Promotion Agency (FFG), the project QE LaB-Living
   Models for Open Systems (www.qe-lab.at) funded by the Austrian Federal
   Ministry of Economics (Bundesministerium fur Wirtschaft und Arbeit), the
   project MOBSTECO funded by the Austrian Science Fund (FWF) as well as
   the competence network Softnet Austria (www.soft-net.at) funded by the
   Austrian Federal Ministry of Economics (Bundesministerium fur Wirtschaft
   und Arbeit), the province of Styria, the Steirische
   Wirtschaftsforderungsgesellschaft mbH (SFG), and the city of Vienna's
   Center for Innovation and Technology (ZIT).
CR Ahern D., 2008, CMMI DISTILLED PRACT
   Amland S, 2000, J SYST SOFTWARE, V53, P287, DOI 10.1016/S0164-1212(00)00019-4
   [Anonymous], 2012, STAND GLOSS TERMS US
   [Anonymous], 2012, 7 INT C SOFTW ENG AD
   [Anonymous], 2002, Metrics and Models in Software Quality Engineering
   [Anonymous], 2008, AST, DOI DOI 10.1145/1370042.1370057
   [Anonymous], 2008, 8292008 IEEE
   [Anonymous], 2007, P MEREP07 PALM MALL
   Bach J., 1999, SOFTWARE TESTING QUA, V11, P99
   Black R., 2009, ADV SOFTWARE TESTING, V2
   BOEHM BW, 1988, COMPUTER, V21, P61, DOI 10.1145/12944.12948
   Cangussu J.W., 2004, 15 INT S SOFTW REL E
   Cavano J. P., 1978, Proceedings of the Software Quality Assurance Workshop on Functional and Performance Issues, P133, DOI DOI 10.1145/800283.811113
   CHEN Y, 2002, C CTR ADV STUD COLL
   DORLING A, 1993, SOFTWARE QUAL J, V2, P209, DOI 10.1007/BF00403764
   Felderer M., 2013, 5 INT C SWOD 2013, P10
   Felderer M, 2012, LECT NOTES BUS INF P, V94, P159
   Fenton NE, 2000, IEEE T SOFTWARE ENG, V26, P797, DOI 10.1109/32.879815
   Gerrard P., 2002, RISK BASED EBUSINESS
   ISO, 2005, IEC 25000 Software and system engineering-Software product Quality Requirements and Evaluation (SQuaRE)-Guide to SQuaRE
   ISO, 2010, ISO/IEC/IEEE 24765:2010- Systems and Software EngineeringVocabulary
   ISO/IEC, 2013, 29119 ISO IEC
   Karolak DW., 1995, Software engineering risk management: A just-in-time approach
   Kontio J, 1999, 21 INT C SOFTW ENG I
   Koomen T., 2006, TMAP NEXT RESULT DRI
   Koomen T., 1999, TEST PROCESS IMPROVE
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Letouzey J. L., 2010, 2 INT C ADV SYST TES
   Li Q., 2010, J SOFTWARE EVOLUTION, V24, P783
   Li Q., 2009, INT C SOFTW PROC TRU
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   OMG, 2012, CISQTR201201 OMG
   Pfleeger SL, 2000, J SYST SOFTWARE, V53, P265, DOI 10.1016/S0164-1212(00)00017-0
   Ramler R., 2012, 38 EUR C SOFTW ENG A
   Ramler R., 2009, 35 EUR C SOFTW ENG A
   Ramler R, 2013, 2013 JOINT CONFERENCE OF THE 23RD INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2013 EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA), P93, DOI 10.1109/IWSM-Mensura.2013.23
   Ramler R, 2006, VALUE-BASED SOFTWARE ENGINEERING, P225, DOI 10.1007/3-540-29263-2_11
   Redmill F, 2005, SOFTW TEST VERIF REL, V15, P3, DOI 10.1002/stvr.310
   Redmill F, 2004, SOFTW TEST VERIF REL, V14, P3, DOI 10.1002/stvr.288
   Saaty T.L., 1980, ANAL HIERARCHY PROCE
   Siegel S., 1956, Nonparametric statistics for the behavioral sciences
   Souza Ellen, 2010, Proceedings of the Seventh International Conference on Information Technology: New Generations (ITNG 2010), P1032, DOI 10.1109/ITNG.2010.203
   Souza E., 2009, 10 LAT AM TEST WORKS, P1
   Spillner A., 2007, SOFTWARE TESTING PRA, V1st
   Steiner M, 2012, J SOFTW-EVOL PROC, V24, P471, DOI 10.1002/smr.507
   van Veenendaal E, 2012, PRISMA APPROACH
   van Veenendaal E., 2008, TEST MATURITY MODEL
   Wagner S, 2012, PROC INT CONF SOFTW, P1133, DOI 10.1109/ICSE.2012.6227106
   Wiegers K.E., 1999, Software Development, V7, P24
   Yoon H, 2011, INT J SOFTW ENG KNOW, V21, P191, DOI 10.1142/S0218194011005220
NR 50
TC 40
Z9 44
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2014
VL 22
IS 3
BP 543
EP 575
DI 10.1007/s11219-013-9226-y
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK6IH
UT WOS:000338530800007
DA 2024-07-18
ER

PT J
AU Thakurta, R
AF Thakurta, Rahul
TI A framework for prioritization of quality requirements for inclusion in
   a software project
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Non-functional requirement; Quality attribute; Business value; Software
   development project
ID MANAGEMENT
AB Non-functional requirements (NFRs) determine the characteristics of a software product or service as a whole. The research described in this paper presents a quantitative framework involving respondents of both the project and the business organization, in order to determine the priority of a list of NFRs to be considered for implementation during a software development. The framework also provides a quantitative basis for evaluating the extent of value addition that can be achieved while deciding upon whether or not to consider a particular non-functional requirement for inclusion to the project's requirement set. The assessment process also indicates the extent to which different business values are perceived important by representatives of business organizations, and their perception of the importance of the different NFRs. The work distinguishes from others by explicitly considering dependencies among NFRs in the evaluation process. The final results are expected to be beneficial to both the business and the project organization by identifying and implementing the desired NFRs that contribute to business value in a cost-effective manner.
C1 Xavier Inst Management XIMB, Dept Informat Syst, Bhubaneswar 751013, Orissa, India.
RP Thakurta, R (corresponding author), Xavier Inst Management XIMB, Dept Informat Syst, Xavier Sq, Bhubaneswar 751013, Orissa, India.
EM rahul@ximb.ac.in
OI THAKURTA, RAHUL/0000-0002-3583-3905
CR [Anonymous], 2012, CCOST VAL
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 1997, Requirements engineering: a good practice guide
   [Anonymous], 2002, WORKSH METH TECHN SO
   [Anonymous], 2003, Software requirements
   ATAM: Method for architecture evaluation, 2012, ATAM ARCH TRAD OFF A
   Azar J, 2007, IEEE SOFTWARE, V24, P32, DOI 10.1109/MS.2007.30
   BOEHM BW, 1991, IEEE SOFTWARE, V8, P32, DOI 10.1109/52.62930
   Chung L., 2000, Non-functional Requirements in Software Engineering
   CLEMENTS P., 2002, EVALUATING SOFTWARE
   Cronk M. C., 1999, Logistics Information Management, V12, P40, DOI 10.1108/09576059910256240
   Deutsch M., 1988, Software Quality Engineering: A Total Technical and Management Approach
   Devaraj S., 2002, The IT Payoff: Measuring the Business Value of Information Technology Investments
   Ebert C, 1998, INFORM SOFTWARE TECH, V40, P175, DOI 10.1016/S0950-5849(98)00049-4
   Ferreira S, 2009, J SYST SOFTWARE, V82, P1568, DOI 10.1016/j.jss.2009.03.014
   Gammelgard M., 2006, EARP WORKING PAPERS
   Gammelgard M., 2007, THESIS KTH STOCKHOLM
   GAMMELGARD M, 2006, P 13 EUR C INF TECHN
   Greer D, 2004, INFORM SOFTWARE TECH, V46, P243, DOI 10.1016/j.infsof.2003.07.002
   Greer D, 1999, NEC RES DEV, V40, P378
   Greer D, 1999, IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P180, DOI 10.1109/ISRE.1999.777998
   Grimshaw DJ, 2001, INFORM SOFTWARE TECH, V43, P629, DOI 10.1016/S0950-5849(01)00171-9
   Herrmann A, 2008, INT REQUIR ENG CONF, P125, DOI 10.1109/RE.2008.48
   Heumesser N., 2003, ESSENTIAL REQUISITES
   IEEE, 1998, 8301998 IEEE
   Iqbal A., 2009, International Journal of Reviews in Computing, V1, P1
   IVES B, 1984, MANAGE SCI, V30, P586, DOI 10.1287/mnsc.30.5.586
   Karlsson J, 1996, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, P110, DOI 10.1109/ICRE.1996.491435
   Karlsson J, 1997, IEEE SOFTWARE, V14, P67, DOI 10.1109/52.605933
   Karlsson J, 1998, INFORM SOFTWARE TECH, V39, P939, DOI 10.1016/S0950-5849(97)00053-0
   Kassab M., 2007, P IWSM MENS 2007, P247
   KAZMAN R, 1994, PROC INT CONF SOFTW, P81, DOI 10.1109/ICSE.1994.296768
   Kotonya G., 1998, Requirements engineering: processes and techniques
   LEFFINGWELL D, 2000, MANAGING SOFTWARE RE
   Mairiza D., 2010, P 25 ACM S APPL COMP
   Mairiza D., 2010, P 2010 ACM S APPL CO, P311, DOI DOI 10.1145/1774088.1774153
   Monk E.F., 2008, CONCEPTS ENTERPRISE, V3rd
   Reifer DJ, 2000, IEEE SOFTWARE, V17, P45
   Robertson S, 2012, Mastering the requirements process: getting requirements right
   Ruhe G., 2002, Proceedings of the 14th International Conference on Software Engineering and Knowledge Engineering (SEKE'02), P159
   Saaty T.L., 1980, ANAL HIERARCHY PROCE
   Sackman H., 1974, R1283PR RAND CORP, P23
   Sommerville I., 2004, Software Engineering
   Svensson R. B., 2011, P 19 IEEE INT REQ EN
   Wiegers K.E., 1999, Software Development, V7, P24
   Yusop Norazlin, 2008, International Journal of Value Chain Management, V2, P18, DOI 10.1504/IJVCM.2008.016116
   Zhao LY, 2003, J SYST SOFTWARE, V66, P65, DOI 10.1016/S0164-1212(02)00064-X
NR 47
TC 41
Z9 45
U1 0
U2 27
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2013
VL 21
IS 4
BP 573
EP 597
DI 10.1007/s11219-012-9188-5
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 209FT
UT WOS:000323741000003
DA 2024-07-18
ER

PT J
AU Catal, C
   Mishra, D
AF Catal, Cagatay
   Mishra, Deepti
TI Test case prioritization: a systematic mapping study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Systematic literature review; Systematic mapping study; Test case
   prioritization; Regression testing
ID INFRASTRUCTURE
AB Test case prioritization techniques, which are used to improve the cost-effectiveness of regression testing, order test cases in such a way that those cases that are expected to outperform others in detecting software faults are run earlier in the testing phase. The objective of this study is to examine what kind of techniques have been widely used in papers on this subject, determine which aspects of test case prioritization have been studied, provide a basis for the improvement of test case prioritization research, and evaluate the current trends of this research area. We searched for papers in the following five electronic databases: IEEE Explorer, ACM Digital Library, Science Direct, Springer, and Wiley. Initially, the search string retrieved 202 studies, but upon further examination of titles and abstracts, 120 papers were identified as related to test case prioritization. There exists a large variety of prioritization techniques in the literature, with coverage-based prioritization techniques (i.e., prioritization in terms of the number of statements, basic blocks, or methods test cases cover) dominating the field. The proportion of papers on model-based techniques is on the rise, yet the growth rate is still slow. The proportion of papers that use datasets from industrial projects is found to be 64 %, while those that utilize public datasets for validation are only 38 %. On the basis of this study, the following recommendations are provided for researchers: (1) Give preference to public datasets rather than proprietary datasets; (2) develop more model-based prioritization methods; (3) conduct more studies on the comparison of prioritization methods; (4) always evaluate the effectiveness of the proposed technique with well-known evaluation metrics and compare the performance with the existing methods; (5) publish surveys and systematic review papers on test case prioritization; and (6) use datasets from industrial projects that represent real industrial problems.
C1 [Catal, Cagatay] Istanbul Kultur Univ, Dept Comp Engn, TR-34156 Istanbul, Turkey.
   [Mishra, Deepti] Atilim Univ, Dept Comp Engn, TR-06836 Ankara, Turkey.
C3 Istanbul Kultur University; Atilim University
RP Catal, C (corresponding author), Istanbul Kultur Univ, Dept Comp Engn, TR-34156 Istanbul, Turkey.
EM c.catal@iku.edu.tr; deepti@atilim.edu.tr
RI Catal, Cagatay/AAF-3929-2019; Mishra, Deepti/AAZ-1322-2020; Mishra,
   Deepti/K-4292-2013
OI Catal, Cagatay/0000-0003-0959-2930; Mishra, Deepti/0000-0001-5144-3811; 
CR [Anonymous], 2005, ACM SIGSOFT SOFTWARE
   [Anonymous], 2008, 12 INT C EV ASS SOFT
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Do H, 2006, EMPIR SOFTW ENG, V11, P33, DOI 10.1007/s10664-006-5965-8
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Do H, 2010, IEEE T SOFTWARE ENG, V36, P593, DOI 10.1109/TSE.2010.58
   Elbaum S, 2003, SOFTW TEST VERIF REL, V13, P65, DOI 10.1002/stvr.263
   Elbaum S., 2000, Software Engineering Notes, V25, P102, DOI 10.1145/347636.348910
   Engström E, 2010, INFORM SOFTWARE TECH, V52, P14, DOI 10.1016/j.infsof.2009.07.001
   Engström E, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P22
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   Kapfhammer G. M., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P99, DOI 10.1109/ICSTW.2011.88
   Kapfhammer G. M., 2007, PROC ACM INT WORKSHO, P19
   King G, 2007, SOCIOL METHOD RES, V36, P173, DOI 10.1177/0049124107306660
   Kitchenham B., 2007, Guidelines for performing systematic literature reviews in software engineering
   Kitchenham BA, 2004, PROC INT CONF SOFTW, P273
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kitchenham Barbara., 2010, EASE'10 Proceedings of the 14th international conference on Evaluation and Assessment in Software Engineering, P25, DOI DOI 10.14236/EWIC/EASE2010.4
   Korel B, 2009, IEEE ICST WORKSHOP, P77, DOI 10.1109/ICSTW.2009.45
   Krishnamoorthi R, 2009, INFORM SOFTWARE TECH, V51, P799, DOI 10.1016/j.infsof.2008.08.007
   Liu WL, 2007, INT C COMP AID DES C, P252
   Ma ZK, 2008, ASIA PAC SOFWR ENG, P471, DOI 10.1109/APSEC.2008.63
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
NR 23
TC 108
Z9 117
U1 0
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2013
VL 21
IS 3
BP 445
EP 478
DI 10.1007/s11219-012-9181-z
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 190LG
UT WOS:000322340900003
DA 2024-07-18
ER

PT J
AU Couto, C
   Montandon, JE
   Silva, C
   Valente, MT
AF Couto, Cesar
   Montandon, Joao Eduardo
   Silva, Christofer
   Valente, Marco Tulio
TI Static correspondence and correlation between field defects and warnings
   reported by a bug finding tool
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Bug finding tools; Field defects; Software quality assurance tools
ID CODE
AB Despite the interest and the increasing number of static analysis tools for detecting defects in software systems, there is still no consensus on the actual gains that such tools introduce in software development projects. Therefore, this article reports a study carried out to evaluate the degree of correspondence and correlation between post-release defects (i.e., field defects) and warnings issued by FindBugs, a bug finding tool widely used in Java systems. The study aimed to evaluate two types of relations: static correspondence (when warnings contribute to find the static program locations changed to remove field defects) and statistical correlation (when warnings serve as early indicators for future field defects). As a result, we have concluded that there is no static correspondence between field defects and warnings. However, statistical tests showed that there is a moderate level of correlation between warnings and such kinds of software defects.
C1 [Couto, Cesar; Montandon, Joao Eduardo; Valente, Marco Tulio] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [Couto, Cesar; Silva, Christofer] CEFET MG, Dept Comp, Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Minas Gerais
RP Valente, MT (corresponding author), Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
EM cesarfmc@dcc.ufmg.br; joao.montandon@dcc.ufmg.br;
   christofer@dcc.ufmg.br; mtov@dcc.ufmg.br
FU FAPEMIG; CAPES; CNPq
FX This work was supported by FAPEMIG, CAPES, and CNPq.
CR [Anonymous], 2005, PMD applied
   [Anonymous], 2007, Applied nonparametric statistical methods
   [Anonymous], 65 BELL LAB
   Araújo JEM, 2011, IET SOFTW, V5, P366, DOI 10.1049/iet-sen.2009.0083
   Ayewah N, 2008, IEEE SOFTWARE, V25, P22, DOI 10.1109/MS.2008.130
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Butler S, 2009, WORK CONF REVERSE EN, P31, DOI 10.1109/WCRE.2009.50
   D'Ambros Marco, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P23, DOI 10.1109/QSIC.2010.58
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   Dallmeier V., 2007, P 22 IEEE ACM INT C, P433
   Foster JS, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P83, DOI 10.1145/1251535.1251549
   GRANGER CWJ, 1969, ECONOMETRICA, V37, P424, DOI 10.2307/1912791
   Holschuh T, 2009, PROC INT CONF SOFTW, P172, DOI 10.1109/ICSE-COMPANION.2009.5070975
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Kim S., 2007, EUROPEAN SOFTWARE EN, P45
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Larus JB, 2004, IEEE SOFTWARE, V21, P92, DOI 10.1109/MS.2004.1293079
   Louridas P, 2006, IEEE SOFTWARE, V23, P58, DOI 10.1109/MS.2006.114
   Nagappan N, 2005, PROC INT CONF SOFTW, P580, DOI 10.1145/1062455.1062558
   Nagappan N., 2006, 28th International Conference on Software Engineering Proceedings, P452, DOI 10.1145/1134285.1134349
   Perry DE, 1997, PROC INT CONF SOFTW, P657, DOI 10.1145/253228.253796
   Pfleeger S., 1995, ACM SIGSOFT, V20, P14
   Subramanyam R, 2003, IEEE T SOFTWARE ENG, V29, P297, DOI 10.1109/TSE.2003.1191795
   Wagner S, 2005, LECT NOTES COMPUT SC, V3502, P40
   Wagner Stefan, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P248, DOI 10.1109/ICST.2008.63
   Zheng J, 2006, IEEE T SOFTWARE ENG, V32, P240, DOI 10.1109/TSE.2006.38
NR 26
TC 15
Z9 19
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2013
VL 21
IS 2
BP 241
EP 257
DI 10.1007/s11219-011-9172-5
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 114MX
UT WOS:000316746700002
DA 2024-07-18
ER

PT J
AU Bartsch, M
   Harrison, R
AF Bartsch, Marc
   Harrison, Rachel
TI An exploratory study of the effect of aspect-oriented programming on
   maintainability
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE aspects; object-orientation; maintainability
AB In this paper we describe an exploratory assessment of the effect of aspect-oriented programming on software maintainability. An experiment was conducted in which 11 software professionals were asked to carry out maintenance tasks on one of two programs. The first program was written in Java and the second in AspectJ. Both programs implement a shopping system according to the same set of requirements. A number of statistical hypotheses were tested. The results did seem to suggest a slight advantage for the subjects using the object-oriented system since in general it took the subjects less time to answer the questions on this system. Also, both systems appeared to be equally difficult to modify. However, the results did not show a statistically significant influence of aspect-oriented programming at the 5% level. We are aware that the results of this single small study cannot be generalized. We conclude that more empirical research is necessary in this area to identify the benefits of aspect-oriented programming and we hope that this paper will encourage such research.
C1 [Bartsch, Marc] Univ Reading, Sch Syst Engn, Reading RG6 6AY, Berks, England.
   [Harrison, Rachel] Stratton Edge Consulting, Stratton Edge, Cirencester GL7 2LS, England.
C3 University of Reading
RP Bartsch, M (corresponding author), Univ Reading, Sch Syst Engn, Reading RG6 6AY, Berks, England.
EM m.bartsch@rdg.ac.uk; rachel.harrison@strattonedge.com
CR [Anonymous], 1998, Practical nonparametric statistics
   [Anonymous], P 1 WORKSH ASP REV E
   BLACK A, 1986, SIGPLAN NOTICES, V21, P78, DOI 10.1145/960112.28706
   Boehm B.W., 1978, Characteristics of Software Quality
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Christensen L.B., 1988, EXPT METHODOLOGY, V4th
   Dijkstra E.W., 1982, EWD 447: On the role of scientific thought. Selected Writings on Computing: A Personal Perspective, P60, DOI DOI 10.1007/978-1-4612-5695-3
   Fenton N., 1996, SOFTWARE METRICS RIG, VSecond
   Filho F.C., 2006, P 14 ACM SIGSOFT INT
   FILHO FC, 2005, ECOOP 2005 WORKSHO E
   FREUND EJ, 1997, MODERN ELEMENTRY STA
   GARCIA A, 2005, 4 INT C ASP OR SOFTW
   Harris R. J., 1975, PRIMER MULTIVARIATE
   Harrison R, 2000, J SYST SOFTWARE, V52, P173, DOI 10.1016/S0164-1212(99)00144-2
   HENNEMANN J, 2002, ACM C OBJ OR PROGR S
   KERSTEN M, 1999, P 14 ACM SIGPLAN C O
   KICZALES G, 1997, P ECOOP
   Kienzle J, 2002, LECT NOTES COMPUT SC, V2374, P37
   Likert R, 1932, ARCH PSYCHOL, V22, P140
   LOPES CV, 1997, THESIS NE U
   Perry DE., 2000, P C FUT SOFTW ENG, P345, DOI DOI 10.1145/336512.336586
   Pfahl D, 2003, EMPIR SOFTW ENG, V8, P367, DOI 10.1023/A:1025320418915
   PRECHELT L, 1997, WUCS9734 DEP COMP SC, P63130
   RASHID A, 2003, P 2 INT C ASP OR SOF
   ROYCHOUDHURY S, 2003, 41 ANN ACM S E C SAV
   Sant'Anna C., 2003, P BRAZILIAN S SOFTWA, P19
   SOARES S, 2002, P 17 ACM SIGPLAN C O
   STEPHENS MA, 1974, J AM STAT ASSOC, V69, P730, DOI 10.2307/2286009
   TSANG SL, 2004, P IEEE INT S OBJ OR
   Walker R. J., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P120, DOI 10.1109/ICSE.1999.841001
   Zhao J., 2004, 10 INT SOFTW METR S
NR 31
TC 29
Z9 32
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2008
VL 16
IS 1
BP 23
EP 44
DI 10.1007/s11219-007-9022-7
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248QQ
UT WOS:000252169800003
DA 2024-07-18
ER

PT J
AU Arshad, N
   Heimbigner, D
   Wolf, AL
AF Arshad, Naveed
   Heimbigner, Dennis
   Wolf, Alexander L.
TI Deployment and dynamic reconfiguration planning for distributed software
   systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Tools with Artificial Intelligence
CY NOV 15-17, 2004
CL Boca Raton, FL
SP IEEE Comp Soc, Informat Technol Res Inst, Wright State Univ, Florida Atlantic Univ
ID CONFIGURATION
AB The quality of software systems are determined in part by their optimal configurations. Optimal configurations are desired when the software is being deployed and during its lifetime. However, initial deployment and subsequent dynamic reconfiguration of a software system is difficult because of the interplay of many interdependent factors, including cost, time, application state, and system resources. As the size and complexity of software systems increases, procedures (manual or automated) that assume a static software architecture and environment are becoming untenable. We have developed a novel technique for carrying out the deployment and reconfiguration planning processes that leverages recent advances in the field of temporal planning. We describe a tool called Planit, which manages the deployment and reconfiguration of a software system utilizing a temporal planner. Given a model of the structure of a software system, the network upon which the system should be hosted, and a goal configuration, Planit will use the temporal planner to devise possible deployments of the system. Given information about changes in the state of the system, network and a revised goal, Planit will use the temporal planner to devise possible reconfigurations of the system. We present the results of a case study in which Planit is applied to a system consisting of various components that communicate across an application-level overlay network.
C1 LUMS, Dept Comp Sci, Lahore, Pakistan.
   Univ Colorado, Dept Comp Sci, Boulder, CO 80309 USA.
   Univ London Imperial Coll Sci Technol & Med, Dept Comp Sci, London SW7 2BZ, England.
C3 Lahore University of Management Sciences; University of Colorado System;
   University of Colorado Boulder; Imperial College London
RP Arshad, N (corresponding author), LUMS, Dept Comp Sci, Lahore, Pakistan.
EM naveedarshad@lums.edu.pk; dennis@cs.colorado.edu
CR Agnew B., 1994, Distributed Systems Engineering, V1, P313, DOI 10.1088/0967-1846/1/5/006
   Allen J.F., 1983, PROC 8 INT JOINT C A, V2, P741
   ALLEN JF, 1991, PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING, P3
   Bacchus F., 2001, IJCAI 2001, P417
   Batista T, 2000, INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR PARALLEL AND DISTRIBUTED SYSTEMS, PROCEEDINGS, P32, DOI 10.1109/PDSE.2000.847848
   Berghoff J, 1996, THIRD INTERNATIONAL CONFERENCE ON CONFIGURABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P52, DOI 10.1109/CDS.1996.509346
   Carzaniga A, 2001, ACM T COMPUT SYST, V19, P332, DOI 10.1145/380749.380767
   COOK JE, 1999, 21 INT C SOFTW ENG I
   DOHERTY P, 2001, AI MAGAZINE      FAL
   EDELKAMP S, 2001, AI MAG, P67
   ENDLER M, 1992, P INT WORKSH CONF DI, P68
   FOX M, 3 INT PLANN COMP TEM
   GARLAN D, 2008, P CASCON 97, P169
   GEREVINI A, 2002, P 6 INT C ART INT PL, P13
   Heimbigner D, 1996, LECT NOTES COMPUT SC, V1167, P272, DOI 10.1007/BFb0023098
   KRAMER J, 1985, IEEE T SOFTWARE ENG, V11, P424, DOI 10.1109/TSE.1985.232231
   Magee J., 1996, P 2 INT SOFTWARE ARC, P35
   MEHTA N, 1999, USCCSE99529
   MUSCETTOLA N, 1994, HSTS INTEGRATING PLA
   PAULO J, 2001, P 19 BRAZ S COMP NET
   PENBERTHY J, 1994, P 12 NAT C
   Russell S., 1995, Prentice Hall series in artificial intelligence, V25, P27
   RUTHERFORD MJ, 2002, P IFIP ACM WORK C CO, P67
   SHRIVASTAVA S, 1998, 4 INT C CONFG DISTR
   VERE SA, 1983, IEEE T PATTERN ANAL, V5, P246, DOI 10.1109/TPAMI.1983.4767389
   2001, ECP 01 PLAN WORKSH A
NR 26
TC 26
Z9 31
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2007
VL 15
IS 3
BP 265
EP 281
DI 10.1007/s11219-007-9019-2
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 203OI
UT WOS:000248983500004
OA Green Published
DA 2024-07-18
ER

PT J
AU Liu, Y
   Cukic, B
   Gururajan, S
AF Liu, Yan
   Cukic, Bojan
   Gururajan, Srikanth
TI Validating neural network-based online adaptive systems: a case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Tools with Artificial Intelligence
CY NOV 15-17, 2004
CL Boca Raton, FL
SP IEEE Comp Soc, Informat Technol Res Inst, Wright State Univ, Florida Atlantic Univ
DE validation; online adaptive system; novelty detection; support vector
   data description; validity index
ID MAP
AB Biologically inspired soft computing paradigms such as neural networks are popular learning models adopted in online adaptive systems for their ability to cope with the demands of a changing environment. However, continual changes induce uncertainty that limits the applicability of conventional validation techniques to assure the reliable performance of such systems. In this paper, we discuss a dynamic approach to validate the adaptive system component. Our approach consists of two run-time techniques: (1) a statistical learning tool that detects unforeseen data; and (2) a reliability measure of the neural network output after it accommodates the environmental changes. A case study on NASA F-15 flight control system demonstrates that our techniques effectively detect unusual events and provide validation inferences in a real-time manner.
C1 Motorola Inc, Motorola Labs, Schaumburg, IL 60196 USA.
   W Virginia Univ, Lane Dept Comp Sci & Elect Engn, Morgantown, WV 26506 USA.
   W Virginia Univ, Dept Mech & Aerosp Engn, Morgantown, WV 26506 USA.
C3 Legend Holdings; Lenovo; West Virginia University; West Virginia
   University
RP Liu, Y (corresponding author), Motorola Inc, Motorola Labs, Schaumburg, IL 60196 USA.
EM yanliu@motorola.com; cukic@csee.wvu.edu; srikanth@web.cemr.wvu.edu
RI Cukic, Bojan/B-8287-2009
OI Cukic, Bojan/0000-0001-7130-9054; Gururajan,
   Srikanth/0000-0002-3507-1066
CR [Anonymous], 1998, STAT LEARNING THEORY
   BOYD MA, 2001, VALIDATION VERIFICAT
   BRUSKE J, 1995, NEURAL COMPUT, V7, P845, DOI 10.1162/neco.1995.7.4.845
   DARRAH M, 2004, P 17 INT C FLOR ART
   DELGOBBO D, 2001, VALIDATING LINE NEUR
   *I SOFTW RES, 2001, IFCDCSRD2002UNCLASS0
   JORGENSEN CC, 1991, WORLD AUT C
   KOHONEN T, 1990, P IEEE, V78, P1464, DOI 10.1109/5.58325
   LEONARD JA, 1992, IEEE T NEURAL NETWOR, V3, P624, DOI 10.1109/72.143377
   LIU Y, 2003, P 15 INT C TOOLS ART
   MACKALL D, 2002, CR211409 NASA
   MARTINETZ T, 1994, NEURAL NETWORKS, V7, P507, DOI 10.1016/0893-6080(94)90109-0
   MILI A, 2003, COMPUTATIONAL METHOD
   NAPOLITANO M, 1998, P 1999 AM CONTR C, V4, P2615
   RAZ O, 2000, VALIDATION ONLINE AR
   SCHUMANN J, 2002, WORKSH SELF HEAL SYS
   SCHUMANN J, 2004, P 24 INT WORKSH BAY
   TAX D, 2001, 1 CLASS CLASSIFICATI
   Tax D.M. J., 1999, Proceedings ESANN, P251
   Tax DMJ, 1999, PATTERN RECOGN LETT, V20, P1191, DOI 10.1016/S0167-8655(99)00087-2
   YERRAMALLA S, 2003, INT JOINT C NEUR NET
   YERRAMALLA S, 2003, 6 S SELF STAB SYST
   YERRAMALLA S, 2004, LECT NOTES COMPUTER
   YERRAMALLA S, 2005, THESIS VIRGINIA U
NR 24
TC 7
Z9 7
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2007
VL 15
IS 3
BP 309
EP 326
DI 10.1007/s11219-007-9017-4
PG 18
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 203OI
UT WOS:000248983500006
DA 2024-07-18
ER

PT J
AU Trienekens, JJM
   Kusters, RJ
   van Genuchten, MJIM
   Aerts, H
AF Trienekens, Jos J. M.
   Kusters, Rob J.
   van Genuchten, Michiel J. I. M.
   Aerts, Hans
TI Targets, drivers and metrics in software process improvement: Results of
   a survey in a multinational organization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE survey amongst software groups; improvement targets; improvement
   drivers; usage of metrics; software process improvement
AB This paper reports on a survey amongst software groups in a multinational organization. The survey was initiated by the Software Process Improvement (SPI) Steering Committee of Philips, a committee that monitors the status and quality of software process improvement in the global organization. The paper presents and discusses improvement targets, improvement drivers, and metrics, and the degree to that they are being recognized in the software groups. The improvement targets 'increase predictability' and 'reduce defects' are being recognized as specifically important, joined for Capability Maturity Model (CMM) level three groups by 'increase productivity' and 'reduce lead time'. The set of improvement drivers that was used in the survey appears to be valid. Three improvement drivers that were rated highest were: 'commitment of engineering management', 'commitment of development staff, and 'sense of urgency'. Finally, it could be seen that metrics activity, both in size and in quality, increases significantly for CMM level three groups. However, no consensus regarding what metrics should be used can be seen.
C1 Tech Univ Eindhoven, Fac Technol Management TUe, NL-5600 MB Eindhoven, Netherlands.
   Philips Eindhoven, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology; Philips
RP Trienekens, JJM (corresponding author), Tech Univ Eindhoven, Fac Technol Management TUe, Bldg Paviljoen TM,D-15,Den Dolech 2, NL-5600 MB Eindhoven, Netherlands.
EM j.j.m.trienekens@tm.tue.nl
RI vangenuchten, michiel/B-1766-2013; Kusters, Rob/B-3093-2010
OI Kusters, Rob/0000-0003-4069-5655
CR Beecham S, 2003, EMPIR SOFTW ENG, V8, P7, DOI 10.1023/A:1021764731148
   Cummins RA., 2000, P 2 INT C QUALITY LI, P74
   DYBA T, 2003, FACTORS SOFTWARE PRO, P1
   El-Emam K., 2001, Empirical Software Engineering, V6, P207, DOI 10.1023/A:1011487332587
   Iversen J, 2006, INT J INFORM MANAGE, V26, P30, DOI 10.1016/j.ijinfomgt.2005.10.006
   Jalote P., 2002, SOFTWARE QUALITY PRO, V4
   MELTZOFF J, 1998, CRITICAL THINKING RE, P300
   Niazi M, 2005, J SYST SOFTWARE, V74, P155, DOI 10.1016/j.jss.2003.10.017
   PAULISH DJ, 1994, COMPUTER, V27, P50, DOI 10.1109/2.312039
   PAULK M, 1999, SEPG C P ATL GEORG
   Rainer A, 2003, J SYST SOFTWARE, V66, P7, DOI 10.1016/S0164-1212(02)00059-6
   Rainer A, 2002, J SYST SOFTWARE, V62, P71, DOI 10.1016/S0164-1212(01)00122-4
   SCHORSCH T, 1996, CROSSTALK, V9, P27
   *SEI, 1995, CAP MAT MOD GUID IMP, P464
   SKIPPER R, 1993, J BUS ETHICS, V12, P535, DOI 10.1007/BF00872376
   Stelzer D., 1998, Software Process Improvement and Practice, V4, P227, DOI 10.1002/(SICI)1099-1670(199812)4:4<227::AID-SPIP106>3.0.CO;2-1
   TRIENEKENS JJM, 2004, P 1 INT WORKSH SOFTW, P12
NR 17
TC 8
Z9 9
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2007
VL 15
IS 2
BP 135
EP 153
DI 10.1007/s11219-006-9007-y
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 149CA
UT WOS:000245123000003
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Sargut, KU
   Demirörs, O
AF Sargut, K. U.
   Demirors, O.
TI Utilization of statistical process control (SPC) in emergent software
   organizations:: Pitfalls and suggestions
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE statistical process control; control chart; defect density; rework
   percentage; inspection performance
AB Common wisdom in the domain of software engineering tells us that companies should be mature enough to apply Statistical Process Control (SPC) techniques. Since reaching high maturity levels (in CMM or similar models such as ISO 15504) usually takes 5-10 years, should software companies wait years to utilize Statistical Process Control techniques? To answer this question, we performed a case study of the application of SPC techniques using existing measurement data in an emergent software organization. Specifically, defect density, rework percentage and inspection performance metrics are analyzed. This paper provides a practical insight on the usability of SPC for the selected metrics in the specific processes and describes our observations on the difficulties and the benefits of applying SPC to an emergent software organization.
C1 Univ Florida, Comp & Informat Sci & Engn Dept, Gainesville, FL 32611 USA.
   Middle E Tech Univ, Inst Informat, TR-06531 Ankara, Turkey.
C3 State University System of Florida; University of Florida; Middle East
   Technical University
RP Sargut, KU (corresponding author), Univ Florida, Comp & Informat Sci & Engn Dept, Gainesville, FL 32611 USA.
EM umut@ufl.edu; demirors@metu.edu.tr
OI Demirors, Onur/0000-0001-6601-3937
CR BARNARD J, 1999, EUR SEPG C
   BROOKS FP, 1987, IEEE COMPUTER MAGAZI
   Burr A., 1996, STAT METHODS SOFTWAR
   CARD D, 1994, IEEE SOFTWARE, V11, P95, DOI 10.1109/52.281722
   CARLETON AD, 1999, STAT CONTROLLING SOF
   *CMMI PROD TEAM, 2001, CMMI SYST ENG SOFTW
   Crosby P.B., 1980, Quality is free: The art of making quality certain
   Florac A.William., 1999, MEASURING SOFTWARE P
   FLORAC AW, 1997, PRACTICAL SOFTWARE M
   FLORAC AW, 2000, IEEE SOFTWARE    JUL, P97
   HEIJSTEK A, 1999, EUR SEPG C
   HIRSCH B, 1999, EUR SEPG C
   Humphrey W.S., 1989, MANAGING SOFTWARE PR
   *ISO IEC, 1550441998E ISOIEC
   Jalote P, 2002, IEEE T SOFTWARE ENG, V28, P1126, DOI 10.1109/TSE.2002.1158286
   Kan S.H., 1995, METRICS MODELS SOFTW, V1st
   KELLER T, 1999, EUR SEPG C
   Lantzy M. A., 1992, WADAS '92. Ninth Annual Washington Ada Symposium. Empowering Software Users and Developers. Proceedings, P113, DOI 10.1145/257683.257717
   MEADE S, 1999, EUR SEPG C
   PAJERSKI R, 1995, GB00194 NASA SOFTW E
   Paulk M.C., 1993, KEY PRACTICES CAPABI
   PAULK MC, 1999, 11 SOFTW ENG PROC GR
   PAULK MC, 2002, 2001 HIGH MAT WORKSH
   RADICE R, 1998, 10 SOFTW ENG PROC GR
   SARGUT KU, 2003, THESIS MIDDLE E TU
   Shewhart W. A., 1939, STAT METHOD VIEWPOIN
   *STD, 1995, 10441 STD
   *STD, 10441993 STD
   SUTHERLAND J, 1992, STAT QUALITY DESIGN
   Weller EF, 2000, IEEE SOFTWARE, V17, P48, DOI 10.1109/52.896249
   WIGLE GB, 1999, EUR SEPG C
NR 31
TC 18
Z9 20
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2006
VL 14
IS 2
BP 135
EP 157
DI 10.1007/s11219-006-7599-x
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 042EH
UT WOS:000237510200005
DA 2024-07-18
ER

PT J
AU Gonzalez-Perez, C
   McBride, T
   Henderson-Sellers, B
AF Gonzalez-Perez, C
   McBride, T
   Henderson-Sellers, B
TI A metamodel for assessable software development methodologies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE capability assessment; metamodelling; software development
   methodologies; process assessment; SPICE/OOSPICE
AB Software development methodologies usually contain guidance on what steps to follow in order to obtain the desired product. At the same time, capability assessment frameworks usually assess the process that is followed on a project in practice in the context of a process reference model, defined separately and independently of any particular methodology. This results in the need for extra effort when trying to match a given process reference model with an organisation's enacted processes. This paper introduces a metamodel for the definition of assessable methodologies, that is, methodologies that are constructed with assessment in mind and that contain a built-in process reference model. Organisations using methodologies built from this metamodel will benefit from automatically ensuring that their executed work conforms to the appropriate assessment model.
C1 Univ Technol Sydney, Fac Informat Technol, Dept Sofware Engn, Sydney, NSW 2007, Australia.
C3 University of Technology Sydney
RP Univ Technol Sydney, Fac Informat Technol, Dept Sofware Engn, Sydney, NSW 2007, Australia.
EM cesargon@it.uts.edu.au; mcbride@it.uts.edu.au; brian@it.uts.edu.au
RI Gonzalez-Perez, Cesar A./B-8437-2009
OI Gonzalez-Perez, Cesar/0000-0002-3976-7589
CR [Anonymous], 1998, 15504 ISOIEC
   BARBIER F, 2000, INFORMATION SOFTWARE, V43, P19
   Conradi R., 1994, SOFTWARE PROCESS MOD, P9
   CURTIS B, 1992, COMMUN ACM, V35, P75, DOI 10.1145/130994.130998
   Firesmith D.G., 2002, OPEN PROCESS FRAMEWO
   GONZALEZPEREZ C, 2003, OPEN METIS WHITE PAP
   GONZALEZPEREZ C, 2005, POWERTYPE BASED META
   GONZALEZPEREZ C, 2005, J OBJECT TECHNOLOGY, V4
   Graham I., 1997, OPEN PROCESS SPECIFI
   HENDERSONSELLER.B, 1997, OBJECT ORIENTED META
   HENDERSONSELLER.B, 2002, 28 EUROMICRO C DORTM
   HENDERSONSELLER.B, 2002, SPICE 2002, P13
   Humphrey W.S., 1989, MANAGING SOFTWARE PR
   *ISO, 2002, 12207 ISOIEC
   Martin J., 1992, OBJECT ORIENTED ANAL
   ODELL JJ, 1994, J OBJECT-ORIENT PROG, V7, P8
   *OMG, 2002, SOFTW PROC ENG MET S
   *OMG, 2001, UN MOD LANG SPEC
   *SEI, 2002, CMMI SYST ENG SOFTW
   *SUPPL CAHIN COUNC, 2003, SUPPLY CHAIN OPERATI
NR 20
TC 11
Z9 13
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2005
VL 13
IS 2
BP 195
EP 214
DI 10.1007/s11219-005-6217-7
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 918NP
UT WOS:000228549200006
DA 2024-07-18
ER

PT J
AU Pearce, DJ
   Kelly, PHJ
   Hankin, C
AF Pearce, DJ
   Kelly, PHJ
   Hankin, C
TI Online cycle detection and difference propagation: Applications to
   pointer analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 3rd IEEE International Workshop on Source Code Analysis and Manipulation
CY SEP 26-27, 2003
CL AMSTERDAM, NETHERLANDS
SP IEEE Comp Soc, TC Software Engn, Netherlands Org Sci Res, Royal Netherlands Acad Arts & Sci
ID MODEL CHECKER; TO ANALYSIS; EFFICIENT; ALGORITHM; ORDER
AB This paper presents and evaluates a number of techniques to improve the execution time of interprocedural pointer analysis in the context of C programs. The analysis is formulated as a graph of set constraints and solved using a worklist algorithm. Indirections lead to new constraints being added during this procedure. The solution process can be simplified by identifying cycles, and we present a novel online algorithm for doing this. We also present a difference propagation scheme which avoids redundant work by tracking changes to each solution set. The effectiveness of these and other methods are shown in an experimental study over 12 common 'C' programs ranging between 1000 to 150,000 lines of code.
C1 Victoria Univ Wellington, Wellington, New Zealand.
   Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2AZ, England.
C3 Victoria University Wellington; Imperial College London
RP Victoria Univ Wellington, Wellington, New Zealand.
EM david.pearce@mcs.vuw.ac.nz; phjk@doc.ic.ac.uk; clh@doc.ic.ac.uk
OI Pearce, David/0000-0003-4535-9677; Hankin, Chris/0000-0001-9149-8577
CR Aho A. V., 1972, SIAM Journal on Computing, V1, P131, DOI 10.1137/0201008
   Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   AIKEN A, 1994, LNCS, V874, P326
   Aiken Alexander., 1993, Proceedings of the conference on Functional programming languages and computer architecture, P31
   Alur R, 1998, LECT NOTES COMPUT SC, V1427, P521, DOI 10.1007/BFb0028774
   Andersen L. O., 1994, Ph.D. thesis
   [Anonymous], 2001, P 2001 ACM SIGPLAN S, DOI DOI 10.1145/379605.379665
   [Anonymous], PLDI 00
   [Anonymous], 1992, ACM LETT PROGRAM LAN
   [Anonymous], PLDI 98
   [Anonymous], 2009, P 30 ACM SIGPLAN C P
   BALL T, 1993, LECTURE NOTES COMPUT, V749, P206, DOI DOI 10.1007/BFB0019410
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Blanchet Bruno, 2003, ACM SIGPLAN NOTICES, P196, DOI DOI 10.1145/780822.781153
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   BOURDONCLE F, 1993, SIGPLAN NOTICES, V28, P46, DOI 10.1145/173262.155095
   Brayton R. K., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P428
   BURKE M, 1997, 21055 RC IBM RES
   Chandra S., 1999, Proceedings of the 1999 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering. (Toulouse, P66
   CHATTERJEE R, 1999, P 26 ACM SIGPLAN SIG, P133
   CHENLL, 1994, P ACM C SUP, P98
   CHOI JD, 1996, LNCS, V1060, P223
   Chow F., 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P253
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   CYTRON R, 1993, PLDI 93, P36
   Danicic S, 2000, PROC IEEE INT CONF S, P216, DOI 10.1109/ICSM.2000.883049
   Das M, 2001, LECT NOTES COMPUT SC, V2126, P260
   DAS M, 2000, P ACM SIGPLAN C PROG, P35
   De Lucia A, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P142, DOI 10.1109/SCAM.2001.972675
   DIWAN A, 1998, P ACM SIGPLAN 98 C P, P106
   Dor Nurit., 2003, PLDI 03, P155, DOI [10.1145/781131.781149, DOI 10.1145/781131.781149]
   Eichin M. W., 1989, Proceedings 1989 IEEE Symposium on Security and Privacy (Cat. No.89CH2703-7), P326, DOI 10.1109/SECPRI.1989.36307
   EMAMI M, 1994, P ACM SIGPLAN 94 C P, P242
   FAHNDRICH M, 2000, P ACM SIGPLAN C PROG, P253
   Fecht C., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P189
   Fecht C, 1998, LECT NOTES COMPUT SC, V1381, P90, DOI 10.1007/BFb0053565
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Flanagan Cormac., 1997, THESIS RICE U
   Foster J. S., 1997, CSD97964 U CAL
   FOSTER JS, 2000, P STAT AN S JUN, P175
   Godefroid P, 1997, LECT NOTES COMPUT SC, V1254, P476
   GOYAL D, 1999, 1999777 NEW YORK U
   GUYER SZ, 2003, THESIS U TEXAS AUSTI
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   HASTI R, 1998, P ACM SIGPLAN 98 C P, P97
   Heintze N., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P306, DOI 10.1145/182409.182495
   Heintze Nevin., 2001, PLDI 01, P254
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Henzinger TA, 1997, LECT NOTES COMPUT SC, V1254, P460, DOI 10.1007/s100090050008
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   HIND M, 2000, P INT S SOFTW TEST A, P113
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   HORWITZ S, 1988, SIGPLAN NOTICES, V23, P35
   Horwitz S, 1997, ACM T PROGR LANG SYS, V19, P1, DOI 10.1145/239912.239913
   HORWITZ S, 1987, ACTA INFORM, V24, P679, DOI 10.1007/BF00282621
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   JONES LG, 1990, ACM T PROGR LANG SYS, V12, P429, DOI 10.1145/78969.78971
   KANAMORI A, 1994, MSRTR9412 MICR RES
   Landi W., 1992, THESIS STATE U NEW J
   Lapkowski C, 1998, LECT NOTES COMPUT SC, V1383, P128, DOI 10.1007/BFb0026427
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Liang DL, 2001, LECT NOTES COMPUT SC, V2126, P279
   Liang DL, 1999, LECT NOTES COMPUT SC, V1687, P199, DOI 10.1145/318774.318943
   MarchettiSpaccamela A, 1996, INFORM PROCESS LETT, V59, P53, DOI 10.1016/0020-0190(96)00075-0
   MYERS BA, 1986, HUMAN FACTORS COMPUT, P59
   Nielson F., 1999, Principles of Program Analysis
   NUUTILA E, 1994, INFORM PROCESS LETT, V49, P9, DOI 10.1016/0020-0190(94)90047-7
   Pearce DJ, 2004, LECT NOTES COMPUT SC, V3059, P383
   Pearce DJ, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P3, DOI 10.1109/SCAM.2003.1238026
   PEARCE DJ, 2004, P ACM WORKSH PROGR A
   PEARCE DJ, 2004, THESIS IMPERIAL COLL
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   Reiss SP, 1997, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION, PROCEEDINGS, P46
   REPS T, 1989, LECT NOTES COMPUT SC, V352, P360
   ROUNTEV A, 2001, P C OBJ OR PROGR SYS, P43
   RUF E, 1995, SIGPLAN NOTICES, V30, P13, DOI 10.1145/223428.207112
   Shapiro M., 1997, P 24 ACM SIGPLAN SIG, P1
   SHMUELI O, 1983, INFORM PROCESS LETT, V17, P185, DOI 10.1016/0020-0190(83)90038-8
   Steensgaard Bjarne., 1996, POINTS TO ANAL TYPE, P136
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   Su Z., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL), P81, DOI [10.1145/325694.325706, DOI 10.1145/325694.325706]
   Systa T., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P199, DOI 10.1109/CSMR.2000.827328
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   WAGNER D, 2000, P NETW DISTR SYST SE, P3
   YONG SH, 1999, P ACM C PROGR LANG D, P91
   [No title captured]
   [No title captured]
   [No title captured]
NR 90
TC 22
Z9 28
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2004
VL 12
IS 4
BP 311
EP 337
DI 10.1023/B:SQJO.0000039791.93071.a2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 850EE
UT WOS:000223593200004
DA 2024-07-18
ER

PT J
AU Mahmood, Z
   Rehman, STU
AF Mahmood, Z
   Rehman, STU
TI RETRACTED: Correlation between amount-of-reuse metrics and other
   software measures with respect to programming code in C++ (Retracted
   Article)
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper; Retracted Publication
CT International Software Quality Management Conference
CY APR, 2003
CL GLASGOW, SCOTLAND
SP British Comp Soc
DE metrics; amount-of-reuse metrics; reuse; measures; correlation; C plus;
   McCabe's Cyclomatic Complexity
AB In recent years, there have been several proposals for amount-of-reuse metrics. However, it is not clear if these metrics measure anything different from other software metrics that are often generally used. Besides, the relationship between these metrics is also unclear. Without a clear understanding, the true added value provided by these metrics remains unknown. In this paper, an analysis of the existing amount-of-reuse metrics is presented and a subset of these is selected, on the basis of their industrial applicability, for further investigation. These metrics are then applied to a collection of different software products to obtain an understanding of the level of correlation that exists between them and other well-known software metrics such as cyclomatic complexity, volume and lines of code. Our analysis suggests that the selected subset of amount-of-reuse metrics provides a relatively independent view of the analyzed code.
C1 Univ Derby, Derbyshire Business Sch, Derby DE22 1GB, England.
   Int Islam Univ, Dept Comp Sci, Islamabad, Pakistan.
C3 University of Derby; International Islamic University, Pakistan
RP Univ Derby, Derbyshire Business Sch, Derby DE22 1GB, England.
EM z.mahmood@derby.ac.uk
CR ABRANOVIC W, 1997, STAT THINKING DATA A
   AGRESTI W, 1992, IEEE T SOFTWARE ENG, V18
   [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   BASILI V, 1996, COMMUNICATIONS ACM, V39
   BENEDICENTI L, 1997, DISTLIPSTR97002 U GE
   CHEN Y, 1995, P 5 EUR SOFTW ENG C
   Devanbu P, 1996, PROC INT CONF SOFTW, P189, DOI 10.1109/ICSE.1996.493415
   FERRI R, 1997, P INT S SOFTW METR
   FRAKES W, 1994, P 3 INT C SOFTW REUS
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Hedges L.V., 1985, Statistical Methods for Meta-Analysis
   Humphrey W S, 1995, A discipline for software engineering
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   POULIN J, 1993, IBM SYSTEM J, V32
   Poulin J.S., 1997, MEASURING SOFTWARE R
NR 16
TC 1
Z9 1
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD NOV
PY 2003
VL 11
IS 4
BP 301
EP 312
DI 10.1023/A:1025865227964
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 724YV
UT WOS:000185516600004
DA 2024-07-18
ER

PT J
AU Chai, CC
   Fan, GS
   Yu, HQ
   Huang, ZJ
   Ding, JS
   Guan, Y
AF Chai, Chenchen
   Fan, Guisheng
   Yu, Huiqun
   Huang, Zijie
   Ding, Jianshu
   Guan, Yao
TI Exploring better alternatives to size metrics for explainable software
   defect prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software defect prediction; Feature engineering; Explainable AI;
   Empirical software engineering
AB Delivering reliable software under the constraint of limited time and budget is a significant challenge. Recent progress in software defect prediction is helping developers to locate defect-prone code components and allocate quality assurance resources more efficiently. However, practitioners' criticisms on defect predictors from academia are not practical since they rely heavily on size metrics such as lines of code (LOC), which over-abstracts technical details and provides limited insights for software maintenance. Thus, the performance of predictors may be overclaimed. In response, based on a state-of-the-art defect prediction model, we (1) exclude size metrics and evaluate the impact on performance, (2) include new features such as network dependency metrics, and (3) explore which ones are better alternatives to size metrics using explainable artificial intelligence (XAI) technique. We find that excluding size metrics decreases model performance by 1.99% and 0.66% on AUC-ROC in within- and cross-project prediction respectively. The results show that two involved network dependence metrics (i.e., Betweenness and pWeakC(out)) and four other code metrics (i.e., LCOM, AVG(CC), LCOM3, and CAM) could effectively preserve or improve the prediction performance, even if we exclude size metrics. In conclusion, we suggest discarding size metrics and involving the mentioned network dependency metrics for better performance and explainability.
C1 [Chai, Chenchen; Fan, Guisheng; Yu, Huiqun; Huang, Zijie; Ding, Jianshu; Guan, Yao] East China Univ Sci & Technol, Dept Comp Sci & Engn, 130 Meilong Rd, Shanghai 200237, Peoples R China.
C3 East China University of Science & Technology
RP Fan, GS; Yu, HQ; Huang, ZJ (corresponding author), East China Univ Sci & Technol, Dept Comp Sci & Engn, 130 Meilong Rd, Shanghai 200237, Peoples R China.
EM cc_chai@mail.ecust.edu.cn; gsfan@ecust.edu.cn; yhq@ecust.edu.cn;
   hzj@mail.ecust.edu.cn; djs@mail.ecust.edu.cn;
   gy_dazzling2333@mail.ecust.edu.cn
RI Huang, Zijie/JUF-4746-2023
OI Huang, Zijie/0000-0002-8911-9889
FU National Natural Science Foundation of China
FX No Statement Available
CR Aleithan R, 2021, PROC IEEE ACM INT C, P129, DOI 10.1109/ICSE-Companion52605.2021.00056
   Alpernas Kalev, 2020, Onward! 2020: Proceedings of the 2020 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P146, DOI 10.1145/3426428.3426921
   Antinyan V, 2021, COMPUTER, V54, P42, DOI 10.1109/MC.2019.2943844
   Azeem MI, 2019, INFORM SOFTWARE TECH, V108, P115, DOI 10.1016/j.infsof.2018.12.009
   Bell R. M., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P561, DOI 10.1109/ICSTW.2011.75
   Burkart N, 2021, J ARTIF INTELL RES, V70, P245
   Cambria E, 2023, INFORM PROCESS MANAG, V60, DOI 10.1016/j.ipm.2022.103111
   Chicco D, 2021, IEEE ACCESS, V9, P78368, DOI 10.1109/ACCESS.2021.3084050
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Esteves G, 2020, AUTOMAT SOFTW ENG, V27, P369, DOI 10.1007/s10515-020-00277-4
   Fawcett T, 2006, PATTERN RECOGN LETT, V27, P861, DOI 10.1016/j.patrec.2005.10.010
   Gao YX, 2022, IEEE WORK CONF MIN S, P640, DOI 10.1145/3524842.3528472
   Ghotra B, 2017, IEEE WORK CONF MIN S, P146, DOI 10.1109/MSR.2017.18
   Gong LN, 2022, IEEE T SOFTWARE ENG, V48, P5030, DOI 10.1109/TSE.2021.3131950
   Henkel J, 2022, EUR CON SFTWR MTNCE, P526, DOI 10.1109/SANER53432.2022.00070
   Herbold S, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-021-10092-4
   Hoffman RR, 2018, ARXIV PREPRINT ARXIV
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Jain S, 2021, SCI COMPUT PROGRAM, V212, DOI 10.1016/j.scico.2021.102713
   Jiarpakdee J, 2021, IEEE WORK CONF MIN S, P432, DOI 10.1109/MSR52588.2021.00055
   Jiarpakdee J, 2022, IEEE T SOFTWARE ENG, V48, P166, DOI 10.1109/TSE.2020.2982385
   Jiarpakdee J, 2021, IEEE T SOFTWARE ENG, V47, P320, DOI 10.1109/TSE.2019.2891758
   Jiarpakdee J, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P210, DOI 10.1109/ICSE-Companion.2019.00084
   Jiarpakdee J, 2018, PROC IEEE INT CONF S, P92, DOI 10.1109/ICSME.2018.00018
   Jun L., 2014, GLOBAL NETWORK ANAL
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Jureczko M, 2019, J INTELL FUZZY SYST, V37, P7223, DOI 10.3233/JIFS-179334
   Katrutsa A, 2017, EXPERT SYST APPL, V76, P1, DOI 10.1016/j.eswa.2017.01.048
   Koru AG, 2009, IEEE T SOFTWARE ENG, V35, P293, DOI 10.1109/TSE.2008.90
   Li ZQ, 2018, IET SOFTW, V12, P161, DOI 10.1049/iet-sen.2017.0148
   Lundberg SM, 2017, ADV NEUR IN, V30
   Ma WWY, 2016, INFORM SOFTWARE TECH, V69, P50, DOI 10.1016/j.infsof.2015.09.001
   Marcilio WE, 2020, SIBGRAPI, P340, DOI 10.1109/SIBGRAPI51738.2020.00053
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Molnar C, 2020, COMM COM INF SC, V1323, P417, DOI 10.1007/978-3-030-65965-3_28
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Nagappan N, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P521, DOI 10.1145/1368088.1368160
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Naufal MF, 2019, INT JOINT CONF COMP, P330, DOI [10.1109/jcsse.2019.8864165, 10.1109/JCSSE.2019.8864165]
   Nguyen T.N. D., 2010, Proceedings of the International Conference on Software Maintenance, P1, DOI DOI 10.1109/ICSM.2010.5609560
   Oram A., 2011, Making software: What really works, and why we believe It
   Papenmeier A, 2022, ACM T COMPUT-HUM INT, V29, DOI 10.1145/3495013
   Pornprasit C, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P407, DOI 10.1109/ASE51524.2021.9678763
   Premraj R, 2011, INT SYMP EMP SOFTWAR, P215, DOI 10.1109/ESEM.2011.30
   Rajapaksha D, 2022, IEEE T SOFTWARE ENG, V48, P2814, DOI 10.1109/TSE.2021.3070559
   Rao JQ, 2021, IEEE I C SQRS-C, P372, DOI 10.1109/QRS-C55045.2021.00062
   Reddivari S, 2019, 2019 IEEE 20TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION FOR DATA SCIENCE (IRI 2019), P115, DOI 10.1109/IRI.2019.00030
   Ribeiro MT, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1135, DOI 10.1145/2939672.2939778
   Shin Y, 2012, EMPIR SOFTW ENG, V17, P390, DOI 10.1007/s10664-011-9165-9
   Song QB, 2019, IEEE T SOFTWARE ENG, V45, P1253, DOI 10.1109/TSE.2018.2836442
   Staniak M, 2018, R J, V10, P395
   Tantithamthavorn C, 2017, IEEE T SOFTWARE ENG, V43, P1, DOI 10.1109/TSE.2016.2584050
   Tantithamthavorn C, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1, DOI 10.1109/ASE51524.2021.9678580
   Wan ZY, 2020, IEEE T SOFTWARE ENG, V46, P1241, DOI 10.1109/TSE.2018.2877678
   Wang AL, 2022, IEEE ACCESS, V10, P87832, DOI 10.1109/ACCESS.2022.3195039
   Weyuker E., 2010, AUTOMATED FAULT PRED, P145
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   [杨丰玉 Yang Fengyu], 2021, [计算机工程与应用, Computer Engineering and Application], V57, P10
   Yang X., P 2021 17 EAI INT C, P420
   Yu Q, 2020, IET SOFTW, V14, P283, DOI 10.1049/iet-sen.2018.5439
   Yu X, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P298, DOI [10.1109/SANER.2019.8668033, 10.1109/saner.2019.8668033]
   Zhang XF, 2017, 2017 ANNUAL CONFERENCE ON SOFTWARE ANALYSIS, TESTING AND EVOLUTION (SATE 2017), P1, DOI 10.1109/SATE.2017.9
   Zimmermann T, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P531, DOI 10.1145/1368088.1368161
NR 63
TC 0
Z9 0
U1 2
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2024
VL 32
IS 2
BP 459
EP 486
DI 10.1007/s11219-023-09656-y
EA DEC 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UX1Q1
UT WOS:001131866700001
DA 2024-07-18
ER

PT J
AU Mishra, AS
   Rathore, SS
AF Mishra, Aditya Shankar
   Rathore, Santosh Singh
TI Implicit and explicit mixture of experts models for software defect
   prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software defect prediction; Machine learning; Mixture of experts
AB Accurately predicting defects in software modules helps the developers and testers to find the defective modules quickly and save their efforts in other software development aspects. Most previous studies have used single machine learning technique-based models to detect defects in software. These models have produced limited results as they perform well in only some parts of the data and fail to capture all the defect-causing patterns. The mixture of experts (MoE) is a combination method that utilizes experts specialized in the given data subspaces. The results of different specialized experts are combined according to their specific expertise for the final prediction governed by a gating network. This paper explores using the MoE method and presents implicit and explicit MoE-based models for software defect prediction. The presented models are evaluated via an experimental study on twenty-two software defect datasets collected from AEEEM, PROMISE, and JIRA repositories. The prediction performance of the presented models is evaluated using accuracy, f1-score, area under the ROC curve (AUC), and Mathew correlation coefficient (MCC) performance metrics. The experimental results showed that the presented MoE-based models outperformed different machine learning and ensemble techniques, such as Bagging and AdaBoost, and produced a state-of-the-art performance for defect prediction. Additionally, we found that the MoE models produced better or at least equal performance than the DNN-based model for most cases. The results are consistent for all the datasets. The results of the Wilcoxon test also showed that the presented models performed significantly better than the other techniques.
C1 [Mishra, Aditya Shankar; Rathore, Santosh Singh] ABV Indian Inst Informat Technol & Management Gwal, Dept Comp Sci & Engn, Gwalior, India.
RP Rathore, SS (corresponding author), ABV Indian Inst Informat Technol & Management Gwal, Dept Comp Sci & Engn, Gwalior, India.
EM imt_2017005@iiitm.ac.in; santoshs@iiitm.ac.in
CR Alsawalqah H, 2017, ADV INTELL SYST COMP, V575, P355, DOI 10.1007/978-3-319-57141-6_39
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   Arora I, 2015, PROCEDIA COMPUT SCI, V46, P906, DOI 10.1016/j.procs.2015.02.161
   Assim M., 2020, 2020 INT C INN INT I, P1, DOI DOI 10.1109/3ICT51146.2020.9311966
   Bock AS, 2014, FRONT HUM NEUROSCI, V8, DOI [10.3389/fnhum.2014.00971, 10.3389/fhum.2014.00971]
   Bowes D, 2018, SOFTWARE QUAL J, V26, P525, DOI 10.1007/s11219-016-9353-3
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   Canfora G., 2023, 2013 IEEE 6 INT C SO, P252
   Cervantes J, 2020, NEUROCOMPUTING, V408, P189, DOI 10.1016/j.neucom.2019.10.118
   Chandrashekar G, 2014, COMPUT ELECTR ENG, V40, P16, DOI 10.1016/j.compeleceng.2013.11.024
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Di Nucci D, 2018, INT WORK REAL ARTIF, P48, DOI 10.1145/3194104.3194112
   Dreiseitl S, 2002, J BIOMED INFORM, V35, P352, DOI 10.1016/S1532-0464(03)00034-0
   Elmishali A, 2023, INFORM SOFTWARE TECH, V155, DOI 10.1016/j.infsof.2022.107102
   Feng S, 2021, INFORM SOFTWARE TECH, V139, DOI 10.1016/j.infsof.2021.106662
   Feng S, 2021, INFORM SOFTWARE TECH, V129, DOI 10.1016/j.infsof.2020.106432
   Ferrari Denise B, 2011, Pesqui. Oper., V31, P95
   Ghosh Soumi, 2018, Procedia Computer Science, V132, P581, DOI 10.1016/j.procs.2018.05.012
   Gormley IC, 2019, CH CRC HANDB MOD STA, P271
   Jovic A, 2015, 2015 8TH INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO), P1200, DOI 10.1109/MIPRO.2015.7160458
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Komaroff E, 2020, J STAT THEORY PRACT, V14, DOI 10.1007/s42519-020-00115-6
   Kondratyuk D., 2020, ARXIV
   Kwak SK, 2017, KOREAN J ANESTHESIOL, V70, P407, DOI 10.4097/kjae.2017.70.4.407
   Li LJ, 2019, IEEE I CONF COMP VIS, P10312, DOI 10.1109/ICCV.2019.01041
   Li N, 2020, INFORM SOFTWARE TECH, V122, DOI 10.1016/j.infsof.2020.106287
   Majd A, 2020, EXPERT SYST APPL, V147, DOI 10.1016/j.eswa.2019.113156
   Masoudnia S, 2014, ARTIF INTELL REV, V42, P275, DOI 10.1007/s10462-012-9338-y
   Moustafa S, 2018, ALEX ENG J, V57, P2763, DOI 10.1016/j.aej.2018.01.003
   Nam Jaechang., 2014, SURVEY SOFTWARE DEFE
   Natekin A, 2013, FRONT NEUROROBOTICS, V7, DOI 10.3389/fnbot.2013.00021
   Niu J., 2022, SOFTW QUAL J, P1
   O'Doherty JP, 2021, NEUROSCI BIOBEHAV R, V123, P14, DOI 10.1016/j.neubiorev.2020.10.022
   Pandey SK, 2020, EXPERT SYST APPL, V144, DOI 10.1016/j.eswa.2019.113085
   Parsons Van, 2017, Stratified Sampling, DOI DOI 10.1002/9781118445112.STAT05999.PUB2
   Pelleg D., 2000, P 17 INT C MACH LEAR, DOI DOI 10.1007/3-540-44491-2_3
   Priyanka, 2020, International Journal of Information and Decision Sciences, V12, P246
   Qiao L, 2020, NEUROCOMPUTING, V385, P100, DOI 10.1016/j.neucom.2019.11.067
   Radwan A, 2020, J ROBOT NETW ARTIF L, V7, P111, DOI 10.2991/jrnal.k.200528.008
   Rathore SS, 2021, APPL INTELL, V51, P3615, DOI 10.1007/s10489-020-01935-6
   Rice ME, 2005, LAW HUMAN BEHAV, V29, P615, DOI 10.1007/s10979-005-6832-7
   Sagi O, 2018, WIRES DATA MIN KNOWL, V8, DOI 10.1002/widm.1249
   Shao YX, 2020, KNOWL-BASED SYST, V196, DOI 10.1016/j.knosys.2020.105742
   Singh PK., 2015, WORLD APPL SCI J, V33, P371, DOI DOI 10.5829/IDOSI.WASJ.2015.33.03.35
   Singh PD, 2017, PROCEEDINGS OF THE 7TH INTERNATIONAL CONFERENCE ON CLOUD COMPUTING, DATA SCIENCE AND ENGINEERING (CONFLUENCE 2017), P775, DOI 10.1109/CONFLUENCE.2017.7943255
   Sotto-Mayor B, 2022, ENG APPL ARTIF INTEL, V115, DOI 10.1016/j.engappai.2022.105240
   Sotto-Mayor B, 2021, SOFT COMPUT, V25, P14171, DOI 10.1007/s00500-021-06254-7
   Tanaka K, 2019, 2019 20TH IEEE/ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING (SNPD), P490, DOI [10.1109/snpd.2019.8935839, 10.1109/SNPD.2019.8935839]
   Tantithamthavorn C. K., 2022, LARGE DEFECT PREDICT
   Thota M. K., 2020, Int. J. ApplSci Eng., V17, P331, DOI [DOI 10.6703/IJASE.20201217(4).331, DOI 10.6703/IJASE.202012_17(4).331]
   Wahono R. S., 2015, Journal of Software Engineering, V1, P1
   Wang H, 2021, IEEE T RELIAB, V70, P711, DOI 10.1109/TR.2020.3047396
   Waterhouse S.R., 1998, Classification and regression using mixtures ofexperts
   Woolson RF, 2007, Wiley encyclopedia of clinical trials, P1, DOI [10.1002/9780471462422.eoct979, DOI 10.1002/9780471462422.EOCT979]
   Wu J, 2021, SOFTWARE QUAL J, V29, P405, DOI 10.1007/s11219-021-09553-2
   Xu Z, 2019, INFORM SOFTWARE TECH, V106, P182, DOI 10.1016/j.infsof.2018.10.004
   Yang XL, 2017, INFORM SOFTWARE TECH, V87, P206, DOI 10.1016/j.infsof.2017.03.007
   Yatish S, 2019, PROC INT CONF SOFTW, P654, DOI 10.1109/ICSE.2019.00075
   Yigit H, 2013, 2013 INTERNATIONAL CONFERENCE ON ELECTRONICS, COMPUTER AND COMPUTATION (ICECCO), P228, DOI 10.1109/ICECCO.2013.6718270
   Yuksel SE, 2012, IEEE T NEUR NET LEAR, V23, P1177, DOI 10.1109/TNNLS.2012.2200299
   Zeng ZR, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P427, DOI 10.1145/3460319.3464819
NR 63
TC 0
Z9 0
U1 2
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1331
EP 1368
DI 10.1007/s11219-023-09640-6
EA JUN 2023
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001011521000001
DA 2024-07-18
ER

PT J
AU López-Martín, C
AF Lopez-Martin, Cuauhtemoc
TI Machine learning techniques for software testing effort prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Testing effort prediction; Machine learning models; Statistical
   regression; ISBSG
AB Software testing (ST) has been considered as one of the most important and critical activities of the software development life cycle (SDLC) since it influences directly on quality. When a software project is planned, it is common practice to predict the corresponding ST effort (STEP) as a percentage of predicted SDLC effort. However, the effort range for ST has been reported between 10 and 60% of the predicted SDLC effort. This wide range on STEP causes uncertainty in software managers due to STEP is used for allocating resources to teams exclusively for testing activities, and for budgeting and bidding the projects. In spite of this concern, hundreds of studies have been published since 1981 about SDLC effort prediction models, and only thirty-one STEP studies published in the last two decades were identified (just two of them based their conclusions on statistical significance). The contribution of the present study is to investigate the application for STEP of five machine learning (ML) models reported as the most accurate ones when applied to SDLC effort prediction. The models were trained and tested with data sets of projects selected from an international public repository of software projects. The selection for projects was based on their data quality rating, type of development, development platform, programming language generation, sizing method, and resource level of projects. Results based on statistical significance allow suggesting the application of specific ML models to software projects by type of development, and developed on a determined platform and programming language generation.
C1 [Lopez-Martin, Cuauhtemoc] Univ Guadalajara, Dept Informat Syst, Guadalajara, Jalisco, Mexico.
C3 Universidad de Guadalajara
RP López-Martín, C (corresponding author), Univ Guadalajara, Dept Informat Syst, Guadalajara, Jalisco, Mexico.
EM cuauhtemoc@cucea.udg.mx
RI Lopez-Martin, Cuauhtemoc/AAL-4768-2021
OI Lopez-Martin, Cuauhtemoc/0000-0001-6172-9899
CR Abhilasha, 2013, PROCEEDINGS OF THE 2013 IEEE INTERNATIONAL CONFERENCE IN MOOC, INNOVATION AND TECHNOLOGY IN EDUCATION (MITE), P343, DOI 10.1109/MITE.2013.6756364
   Abhishek Chintala, 2010, Journal of Software Engineering and Applications, V3, P331, DOI 10.4236/jsea.2010.34038
   Adali OE, 2017, 2017 43RD EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA), P412, DOI 10.1109/SEAA.2017.72
   Ali A, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2211
   Aloka S, 2011, COMM COM INF SC, V168, P463
   [Anonymous], 2018, 245702018 ISOIEC
   [Anonymous], 2001, PROC QUAL WEEK
   [Anonymous], 2018, GUID US ISBSG DAT RE
   [Anonymous], 2010, 298812010 ISOIEC
   [Anonymous], 2009, Introduction to the Practice of Statistics
   [Anonymous], 1998, Genetic Programming
   Aranha E., 2009, International Journal of Computers & Applications, V31, P167, DOI 10.2316/Journal.202.2009.3.202-2964
   Aranha Eduardo, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P107
   Badri M., 2012, J. Software Eng. Applicat., V05, P513, DOI [10.4236/jsea.2012.57060, DOI 10.4236/JSEA.2012.57060]
   Badri M, 2015, PROCEDIA COMPUT SCI, V62, P529, DOI 10.1016/j.procs.2015.08.528
   Bardsiri VK, 2014, INT J SOFTW ENG KNOW, V24, P1065, DOI 10.1142/S0218194014500351
   Bareja K, 2015, INT C ADV COMPUT COM, P541, DOI 10.1109/ACCT.2015.110
   Bhattacharya P, 2012, ADV INTEL SOFT COMPU, V132, P827
   Bock F, 2017, 2017 43RD EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA), P239, DOI 10.1109/SEAA.2017.49
   Bock F, 2016, 2016 42ND EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA), P222, DOI 10.1109/SEAA.2016.49
   Boehm BW, 2017, PROC IEEE ACM INT C, P495, DOI 10.1109/ICSE-C.2017.159
   Boser B. E., 1992, Proceedings of the Fifth Annual ACM Workshop on Computational Learning Theory, P144, DOI 10.1145/130385.130401
   Bourque Pierre, 2014, SWEBOK: Guide to the Software Engineering Body of Knowledge, V3rd
   Calzolari F, 2001, INFORM SOFTWARE TECH, V43, P477, DOI 10.1016/S0950-5849(01)00156-2
   Chang CC, 2011, ACM T INTEL SYST TEC, V2, DOI 10.1145/1961189.1961199
   CORTES C, 1995, MACH LEARN, V20, P273, DOI 10.1007/BF00994018
   Dawson CW., 1998, WIT T INFORM COMMUNI, V20, P1, DOI [10.2495/AI980361, DOI 10.2495/AI980361]
   de Almeida ÉRC, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P279, DOI 10.1109/ICST.2009.31
   De Marco L, 2014, PROC INT CONF CLOUD, P42
   e Silva Daniel G., 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P275, DOI 10.1109/ICST.2010.46
   Carbonera CE, 2020, IET SOFTW, V14, P328, DOI 10.1049/iet-sen.2018.5334
   Felipe NF., 2014, REV CUBANA CIENCIAS, V8, P1
   Fernández-Diego M, 2014, INFORM SOFTWARE TECH, V56, P527, DOI 10.1016/j.infsof.2014.01.003
   Finschi I., 1996, IMPLEMENTATION LEVEN
   Fox JP, 2010, STAT SOC BEHAV SC, P1, DOI 10.1007/978-1-4419-0742-4_1
   García-Floriano A, 2019, COMPUT ELECTR ENG, V75, P218, DOI 10.1016/j.compeleceng.2017.11.008
   Garousi V, 2016, INFORM SOFTWARE TECH, V80, P195, DOI 10.1016/j.infsof.2016.09.002
   GASS S.I., 2013, Encyclopedia of Operations Research and Management Science
   Gautam SS, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1983
   Grover M, 2018, SMART INNOV SYST TEC, V83, P490, DOI 10.1007/978-3-319-63673-3_59
   Silva DGE, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P289, DOI 10.1109/ICST.2009.47
   Gupta A, 2015, LECT NOTES ELECTR EN, V315, DOI 10.1007/978-3-319-07674-4_98
   Hassouna A, 2010, INFORM SOFTWARE TECH, V52, P197, DOI 10.1016/j.infsof.2009.10.003
   Haykin S., 2009, NEURAL NETWORKS LEAR
   Humphrey W S, 1995, A discipline for software engineering
   Idri A, 2015, INFORM SOFTWARE TECH, V58, P206, DOI 10.1016/j.infsof.2014.07.013
   Jayakumar K. R., 2013, J. Softw. Eng. Appl., V6, P47
   Ji HJ, 2019, SOFTWARE QUAL J, V27, P923, DOI 10.1007/s11219-018-9436-4
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   Kantardzic M., 2011, Data Mining: Concepts, Models, Methods, and Algorithms
   Kaur A, 2019, INFORM SOFTWARE TECH, V110, P56, DOI 10.1016/j.infsof.2019.02.003
   Khurana P, 2013, IEEE INT ADV COMPUT, P1420
   Kitchenham B, 2009, P 5 INT C PRED MOD S, P1, DOI DOI 10.1145/1540438.1540444
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   KOZA JR, 1994, STAT COMPUT, V4, P87, DOI 10.1007/BF00175355
   Kushwaha DS., 2008, ACM SIGSOFT Software Engineering Notes, V33, P1, DOI DOI 10.1145/1360602.1361211
   Li JJ, 2020, SOFTWARE QUAL J, V28, P245, DOI 10.1007/s11219-019-09472-3
   Li ZQ, 2018, IET SOFTW, V12, P161, DOI 10.1049/iet-sen.2017.0148
   Lin CT, 2008, J SYST SOFTWARE, V81, P1025, DOI 10.1016/j.jss.2007.10.002
   Llermeier E.H., 2007, CASE BASED APPROXIMA
   Lyu M., 1996, Handbook of Software Reliability Engineering
   Mahmood Y, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2245
   Malhotra R, 2018, IET SOFTW, V12, P293, DOI 10.1049/iet-sen.2018.5143
   Mensah S., 2016, PROC INT C SOFTW ENG, P527
   Nguyen V., 2013, P INT C SOFTW SYST P, P20
   Poli, 2011, FDN GENETIC PROGRAMM
   Prasad DSUM, 2014, PROCEEDINGS 2014 4TH INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE WITH APPLICATIONS IN ENGINEERING AND TECHNOLOGY ICAIET 2014, P48, DOI 10.1109/ICAIET.2014.18
   Punitha SC, 2013, INT CONF COMP COMMUN
   Richter M., 2013, Case-based Reasoning: a Textbook, DOI [10.1007/978-3-642-40167-1, DOI 10.1007/978-3-642-40167-1]
   Rokach L., 2005, DECISION TREES
   Savolainen P, 2012, INT J PROJ MANAG, V30, P458, DOI 10.1016/j.ijproman.2011.07.002
   Sette S, 2001, ENG APPL ARTIF INTEL, V14, P727, DOI 10.1016/S0952-1976(02)00013-1
   Sharma A., 2012, ACM SIGSOFT SOFTWARE, V73, P1, DOI DOI 10.1145/2088883.2088898
   Sharma A., 2013, CSI Trans. ICT, V1, P51
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   Singh Y., 2008, WORLD C ENG COMP SCI, P1
   Song QB, 2006, IEEE T SOFTWARE ENG, V32, P69, DOI 10.1109/TSE.2006.1599417
   Srivastava P., 2011, Journal of Uncertain Systems, V5, P183
   Srivastava PR, 2014, INT J BIO-INSPIR COM, V6, P57, DOI 10.1504/IJBIC.2014.059966
   Srivastava PR, 2012, INT J BIO-INSPIR COM, V4, P278, DOI 10.1504/IJBIC.2012.049888
   Stewart B, 2002, J SOFTW MAINT EVOL-R, V14, P161, DOI 10.1002/smr.250
   Tiwari R., 2013, ACM SIGSOFTSoftw. Eng. Notes, V38, P1
   Tripathy P., 2014, Software Evolution and Maintenance
   Vapnik V. N., 1998, STAT LEARNING THEORY
   Veenendaal E.P.W.M., 1999, 10 EUR SOFTW CONTR M, P47
   Villuendas-Rey Y, 2017, NEUROCOMPUTING, V265, P105, DOI 10.1016/j.neucom.2017.03.085
   Wen JF, 2012, INFORM SOFTWARE TECH, V54, P41, DOI 10.1016/j.infsof.2011.09.002
   Witten I., 2002, ACM Sigmod Rec., V31, P76, DOI [10.1145/507338.507355, DOI 10.1145/507338.507355]
   Yáñez-Márquez C, 2018, NEURAL PROCESS LETT, V48, P811, DOI 10.1007/s11063-017-9768-2
   Yenigun H, 2019, SOFTWARE QUAL J, V27, P497, DOI 10.1007/s11219-019-09447-4
   Zhu XC, 2008, PROCEEDINGS OF THE 2008 INTERNATIONAL CONFERENCE ON CYBERWORLDS, P195, DOI 10.1109/CW.2008.34
NR 91
TC 9
Z9 10
U1 2
U2 30
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 65
EP 100
DI 10.1007/s11219-020-09545-8
EA FEB 2021
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000620439400001
DA 2024-07-18
ER

PT J
AU Mancebo, J
   Calero, C
   García, F
AF Mancebo, Javier
   Calero, Coral
   Garcia, Felix
TI Does maintainability relate to the energy consumption of software? A
   case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software sustainability; Green software; Energy efficiency; Energy
   consumption software maintainability
ID EFFICIENCY
AB Energy consumption of software has been becoming increasingly significant, since it can vary according to how the software has been developed. In recent years, developers and researchers have been interested in analyzing, among other things, how energy consumption evolves when changes occur from one version to another in any given software. Thus far, the only studies available are theoretical papers that reinforce the idea that maintainability may have an influence on energy use, but this needs to be proven empirically, which is the goal of this article. This work presents an empirical study carried out to test whether there is a relationship between the energy consumption and the maintainability of several versions of Redmine. Maintainability has been assessed by means of different measures, such as the number of lines of code, or the complexity of the software, calculated using SonarCloud, and the energy consumption measurements have been captured using the EET device. The results obtained show that the number of lines of code affects both the energy consumption of the processor and the total consumption of the computer where the software is run. It is intended that the results from this work should serve as a basis for the undertaking of new empirical studies which will enable the relationship between the software maintainability and the energy efficiency of that software to be better understood.
C1 [Mancebo, Javier; Calero, Coral; Garcia, Felix] Univ Castilla La Mancha, Inst Technol & Informat Syst, Alarcos Res Grp, Ciudad Real, Spain.
C3 Universidad de Castilla-La Mancha
RP Mancebo, J (corresponding author), Univ Castilla La Mancha, Inst Technol & Informat Syst, Alarcos Res Grp, Ciudad Real, Spain.
EM Javier.Mancebo@uclm.es; Coral.Calero@uclm.es; Felix.Garcia@uclm.es
RI Garcia, Felix/D-4299-2011; Calero, Coral/D-4319-2011
OI Garcia, Felix/0000-0001-6460-0353; Calero, Coral/0000-0003-0728-4176
FU European FEDER funds; Department of Education, Culture and Sports of the
   Directorate General of Universities, Research and Innovation of the JCCM
   (Regional Government of the Autonomous Region of Castilla-La Mancha)
   [SBPLY/17/180501/000364]; Spanish Ministry of Economy, Industry and
   Competitiveness [RTI2018-098309-B-C31]
FX This work was part of the BIZDEVOPS-Global (RTI2018-098309-B-C31),
   supported by the Spanish Ministry of Economy, Industry and
   Competitiveness and European FEDER funds, and was also part of the SOS
   project (No. SBPLY/17/180501/000364), funded by the Department of
   Education, Culture and Sports of the Directorate General of
   Universities, Research and Innovation of the JCCM (Regional Government
   of the Autonomous Region of Castilla-La Mancha).
CR García-Mireles GA, 2018, INFORM SOFTWARE TECH, V95, P108, DOI 10.1016/j.infsof.2017.10.002
   Andrae A., 2017, NORD DIG BUS SUMM
   [Anonymous], 2010, ENVIROINFO CITESEER
   Calero C, 2020, TSINGHUA SCI TECHNOL, V25, P401, DOI 10.26599/TST.2019.9010006
   Calero C, 2017, SUSTAIN COMPUT-INFOR, V16, P117, DOI 10.1016/j.suscom.2017.10.011
   Calero C, 2013, 2013 2ND INTERNATIONAL WORKSHOP ON GREEN AND SUSTAINABLE SOFTWARE (GREENS), P46, DOI 10.1109/GREENS.2013.6606421
   Capra E, 2012, INFORM SOFTWARE TECH, V54, P60, DOI 10.1016/j.infsof.2011.07.005
   CHIEN AA, 2019, COMMUN ACM, V62, P5
   Cruz L, 2019, PROC IEEE INT CONF S, P29, DOI 10.1109/ICSME.2019.00013
   De Guzman I.G. R., 2015, GREEN SOFTWARE ENG, P205
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hindle A., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P78, DOI 10.1109/MSR.2012.6224303
   Hindle A, 2015, EMPIR SOFTW ENG, V20, P374, DOI 10.1007/s10664-013-9276-6
   ISO/IEC, 2011, ISO/IEC 25010:2011 Systems and software engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality models
   Jagroep E, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1852
   Jagroep EA, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P523, DOI 10.1145/2889160.2889216
   Jelschen J, 2012, EUR CON SFTWR MTNCE, P353, DOI 10.1109/CSMR.2012.43
   Jones N, 2018, NATURE, V561, P163, DOI 10.1038/d41586-018-06610-y
   Lima LG, 2019, J SYST SOFTWARE, V149, P554, DOI 10.1016/j.jss.2018.12.014
   Mancebo J, 2018, 2018 IEEE/ACM 6TH INTERNATIONAL WORKSHOP ON GREEN AND SUSTAINABLE SOFTWARE (GREENS), P16, DOI 10.1145/3194078.3194081
   Palomba F, 2019, INFORM SOFTWARE TECH, V105, P43, DOI 10.1016/j.infsof.2018.08.004
   Park JJ, 2014, INVESTIGATION SOFTWA, P717
   Penzenstadler B., 2014, P 18 INT C EV ASS SO, P1
   Pereira R, 2020, J SYST SOFTWARE, V161, DOI 10.1016/j.jss.2019.110463
   Pereira R, 2017, SLE'17: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, P256, DOI 10.1145/3136014.3136031
   Perez-Castillo R, 2014, IEEE SOFTWARE, V31, P48, DOI 10.1109/MS.2014.23
   Pinto G, 2017, COMMUN ACM, V60, P68, DOI 10.1145/3154384
   Procaccianti G, 2016, J SYST SOFTWARE, V117, P185, DOI 10.1016/j.jss.2016.02.035
   Radu Laura-Diana, 2018, Informatica Economica, V22, P75, DOI 10.12948/issn14531305/22.3.2018.07
   Sahin Cagri., 2014, Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, p36:1, DOI 10.1145/2652524.2652538
   Verdecchia R., 2018, 5 INT C INF COMM TEC, V52, P365, DOI [10.29007/dz83, DOI 10.29007/DZ83]
   Verdecchia R, 2017, PROGR IS, P37, DOI 10.1007/978-3-319-44711-7_4
NR 32
TC 9
Z9 9
U1 1
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2021
VL 29
IS 1
BP 101
EP 127
DI 10.1007/s11219-020-09536-9
EA JAN 2021
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QZ5CV
UT WOS:000605513500001
OA Green Published
DA 2024-07-18
ER

PT J
AU Spegni, F
   Spalazzi, L
   Liva, G
   Pinzger, M
   Bollin, A
AF Spegni, Francesco
   Spalazzi, Luca
   Liva, Giovanni
   Pinzger, Martin
   Bollin, Andreas
TI Verifying temporal specifications of Java programs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software model checking; Time-dependent behavior; Java; Timed automata;
   SMT; Predicate abstraction
ID MODEL CHECKING; SOFTWARE; VERIFICATION; ABSTRACTION; SEMANTICS
AB Many Java programs encode temporal behaviors in their source code, typically mixing three features provided by the Java language: (1) pausing the execution for a limited amount of time, (2) waiting for an event that has to occur before a deadline expires, and (3) comparing timestamps. In this work, we show how to exploit modern SMT solvers together with static analysis in order to produce a network of timed automata approximating the temporal behavior of a set of Java threads. We also prove that the presented abstraction preserves the truth of MTL and ATCTL formulae, two well-known logics for expressing timed specifications. As far as we know, this is the first feasible approach enabling the user to automatically model check timed specifications of Java software directly from the source code.
C1 [Spegni, Francesco; Spalazzi, Luca] Univ Politecn Marche, Ancona, Italy.
   [Liva, Giovanni; Pinzger, Martin; Bollin, Andreas] Alpen Adria Univ Klagenfurt, Klagenfurt, Austria.
C3 Marche Polytechnic University; University of Klagenfurt
RP Pinzger, M (corresponding author), Alpen Adria Univ Klagenfurt, Klagenfurt, Austria.
EM f.spegni@univpm.it; martin.pinzger@aau.at
RI Spalazzi, Luca/A-9983-2013; Spegni, Francesco/ABF-3297-2020
OI Spegni, Francesco/0000-0003-3632-3533; SPALAZZI,
   Luca/0000-0002-4807-6632; Pinzger, Martin/0000-0002-5536-3859
FU Austrian Research Promotion Agency FFG within the FFG Bridge 1 program
   [850757]
FX This research is funded by the Austrian Research Promotion Agency FFG
   within the FFG Bridge 1 program, grant no. 850757.
CR Abdulla PA, 2003, THEOR COMPUT SCI, V290, P241, DOI 10.1016/S0304-3975(01)00330-9
   Alur R., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P414, DOI 10.1109/LICS.1990.113766
   Aminof B, 2018, DISTRIB COMPUT, V31, P187, DOI 10.1007/s00446-017-0302-6
   [Anonymous], P 6 INT WORKSH JAV T
   [Anonymous], 1992, ACM LETT PROGRAM LAN
   [Anonymous], 2017, TECHNICAL REPORT
   Armando Alessandro, 2009, International Journal on Software Tools for Technology Transfer, V11, P69, DOI 10.1007/s10009-008-0091-0
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Bauer A, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000800
   Ben Salah R, 2006, LECT NOTES COMPUT SC, V4137, P465
   Bengtson V, 2000, SOC AGING, P115
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Beyer Dirk, 2007, International Journal on Software Tools for Technology Transfer, V9, P505, DOI 10.1007/s10009-007-0044-z
   Beyer Dirk, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P25, DOI 10.1109/FMCAD.2009.5351147
   Beyer D, 2012, PROCEEDINGS OF THE 12TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2012), P106
   Bogdanas D, 2015, ACM SIGPLAN NOTICES, V50, P445, DOI [10.1145/2775051.2676982, 10.1145/2676726.2676982]
   Bollella G, 2000, COMPUTER, V33, P47, DOI 10.1109/2.846318
   Bouyer P., 2018, HDB MODEL CHECKING, P1001, DOI DOI 10.1007/978-3-319-10575-8_29
   Bradley AR, 2006, LECT NOTES COMPUT SC, V3855, P427
   Cimatti Alessandro, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P52, DOI 10.1007/978-3-662-46681-0_4
   Cimatti Alessandro, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P277, DOI 10.1007/978-3-642-31424-7_23
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Clarke E, 2005, LECT NOTES COMPUT SC, V3440, P570
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Cordeiro L, 2018, LECT NOTES COMPUT SC, V10981, P183, DOI 10.1007/978-3-319-96145-3_10
   Cordeiro L, 2012, IEEE T SOFTWARE ENG, V38, P957, DOI 10.1109/TSE.2011.59
   Cuong N. A., 2008, AUTOMATION LTL VERIF
   D'Silva V, 2008, IEEE T COMPUT AID D, V27, P1165, DOI 10.1109/TCAD.2008.923410
   Daws C, 1998, LECT NOTES COMPUT SC, V1384, P313, DOI 10.1007/BFb0054180
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dibble P., 2017, JAVA LANGUAGE SPECIF
   Dibble P, 2006, 001 JSR
   Dierks H, 2007, LECT NOTES COMPUT SC, V4763, P114
   Dietsch D, 2015, LECT NOTES COMPUT SC, V9206, P49, DOI 10.1007/978-3-319-21690-4_4
   Dijkstra EW, 1969, STRUCT PROGRAM, V8, P1
   Dutertre B, 2014, LECT NOTES COMPUT SC, V8559, P737, DOI 10.1007/978-3-319-08867-9_49
   Enderton H. B., 2001, A mathematical introduction to logic
   Farzan A, 2004, LECT NOTES COMPUT SC, V3114, P501
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 2004, P 5 ACM SIGPLAN SIGS, P36
   Godefroid P, 2012, COMMUN ACM, V55, P40, DOI 10.1145/2093548.2093564
   Grigore R, 2017, ACM SIGPLAN NOTICES, V52, P73, DOI 10.1145/3093333.3009871
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Henzinger TA, 1998, J COMPUT SYST SCI, V57, P94, DOI 10.1006/jcss.1998.1581
   Herber P., 2008, P 6 IEEE ACM IFIP IN, P131, DOI DOI 10.1145/1450135.1450166
   Hunt J, 2017, 282 JSR
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Kahsai T, 2016, LECT NOTES COMPUT SC, V9779, P352, DOI 10.1007/978-3-319-41528-4_19
   Kindermann Roland, 2012, Formal Modeling and Analysis of Timed Systems. Proceedings of the 10th International Conference, FORMATS 2012, P171, DOI 10.1007/978-3-642-33365-1_13
   Konnov I, 2017, LECT NOTES COMPUT SC, V10145, P347, DOI 10.1007/978-3-319-52234-0_19
   KUNG D, 1994, P INT COMP SOFTW APP, P222, DOI 10.1109/CMPSAC.1994.342801
   LAMPORT L, 1987, ACM T COMPUT SYST, V5, P1, DOI 10.1145/7351.7352
   Laplante P., 2011, Real-Time Systems Design and Analysis: An Engineer's Handbook, V4th
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Liva G., 2017, P 17 IEEE INT WORK C
   Liva G, 2018, FME WORKS FORM, P50, DOI 10.1145/3193992.3193997
   Luckow KS, 2015, EURASIP J EMBED SYST, DOI 10.1186/s13639-015-0020-8
   Morbe Georges, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P616, DOI 10.1007/978-3-642-22110-1_50
   Nipkow T., 1998, POPL, V98, P161
   Nori AV, 2009, LECT NOTES COMPUT SC, V5505, P178, DOI 10.1007/978-3-642-00768-2_17
   Pasareanu Corina S., 2010, P 25 IEEE ACM INT C, P179, DOI [10.1145/1858996.1859035, DOI 10.1145/1858996.1859035]
   Phan Q. S., 2015, CONCURRENT BOUNDED M
   Pu GG, 2006, ELECTRON NOTES THEOR, V151, P33, DOI 10.1016/j.entcs.2005.07.035
   Rakadjiev E, 2015, IEEE TRUST BIG, P17, DOI 10.1109/Trustcom.2015.608
   Schoeberl M, 2010, SOFTWARE PRACT EXPER, V40, P507, DOI 10.1002/spe.968
   Sen T, 2016, SOFTW SYST MODEL, V15, P497, DOI 10.1007/s10270-014-0415-3
   Spalazzi L, 2020, THEOR COMPUT SCI, V813, P248, DOI 10.1016/j.tcs.2019.12.026
   Spalazzi L, 2018, PROCEEDINGS 2018 INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING & SIMULATION (HPCS), P642, DOI 10.1109/HPCS.2018.00106
   Thomsen B, 2015, LECT NOTES COMPUT SC, V9465, P319, DOI 10.1007/978-3-319-25527-9_21
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Wang WF, 2014, LECT NOTES COMPUT SC, V8837, P396, DOI 10.1007/978-3-319-11936-6_28
NR 75
TC 0
Z9 0
U1 6
U2 17
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 695
EP 744
DI 10.1007/s11219-019-09488-9
EA MAY 2020
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000535166400001
OA hybrid
DA 2024-07-18
ER

PT J
AU Raibulet, C
   Fontana, FA
   Carettoni, S
AF Raibulet, Claudia
   Arcelli Fontana, Francesca
   Carettoni, Simone
TI A preliminary analysis of self-adaptive systems according to different
   issues
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Self-adaptive systems; Software quality; Architectural smells; Code
   smells; Design patterns
ID DESIGN PATTERNS; CODE SMELLS
AB Self-adaptive systems dynamically change their structure and behavior in response to changes in their execution environment to ensure the quality of the services they provide. Self-adaptive systems are usually built of a managed part, which implements their functionality, and a managing part, which implements the self-adaptive mechanisms. Hence, the complexity of self-adaptive systems results also from the existence of the managing part and the interaction between the managed and the managing parts. The available evaluation approaches of self-adaptive systems focus on their performances, i.e., on the benefits (e.g., degree of autonomy, support for detecting anomalous behavior, adaptivity time, quality of response) achieved through the self-adaptive mechanisms of the managing part. In this paper, we evaluate the quality of the design of self-adaptive systems (including the managed and the managing parts) as it is done in traditional software engineering. We are interested in the internal software quality of self-adaptive systems, as the existence of the managing part and its interaction with the managed part leads to a tightly coupled system. We analyze the self-adaptive systems through the detection of different issues such as architectural and code smells and the detection of design patterns. The smells provide some hints on possible design and implementation problems, and help software engineers to improve the quality of the systems. While, design patterns are usually indicators of the application of good practices in the software development and allow to capture part of the design rationale. In this way, they can help software engineers to understand, reuse, and extend self-adaptive systems. In this paper, we have considered the detection of 3 architectural smells, 18 code smells, and 15 design patterns in 11 self-adaptive systems written in the Java programming language. The results indicate that the 3 architectural smells, 9 out of the 18 code smells, and the 15 design patterns have been detected in all the analyzed self-adaptive systems. We also discuss the possible reasons behind the presence of these quality issues, and provide our lessons learned.
C1 [Raibulet, Claudia; Arcelli Fontana, Francesca; Carettoni, Simone] Univ Milano Bicocca, DISCo Dipartimento Informat Sistemist & Comunicaz, Viale Sarca 336 Edificio U14, Milan, Italy.
C3 University of Milano-Bicocca
RP Raibulet, C (corresponding author), Univ Milano Bicocca, DISCo Dipartimento Informat Sistemist & Comunicaz, Viale Sarca 336 Edificio U14, Milan, Italy.
EM raibulet@disco.unimib.it; arcelli@disco.unimib.it;
   s.carettoni@campus.unimib.it
OI Raibulet, Claudia/0000-0002-7194-3159
CR Arcelli F, 2005, 2005 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P262, DOI 10.1109/ASWEC.2005.5
   Arcelli Fontana F, 2016, P 32 INT C SOFTW MAI
   Arcoverde R., 2011, WORKSH REF TOOLS, P33
   Avgeriou P., 2016, DAGSTUHL SEMINAR 161, V6
   Azadi U., 2019, P INT C TECHN DEBT T
   Barbosa DM, 2017, DARTS, V3, P7, DOI [10.4230/DARTS.3.1.7, DOI 10.4230/DARTS.3.1.7]
   Barna C, 2015, 2015 IEEE/ACM 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P83, DOI 10.1109/SEAMS.2015.26
   Bhardwaj SK, 2017, 2017 IEEE INTERNATIONAL WIE CONFERENCE ON ELECTRICAL AND COMPUTER ENGINEERING (IEEE WIECON-ECE 2017), P1, DOI 10.1109/WIECON-ECE.2017.8468927
   Brun Y., 2010, P 2010 ICSE WORKSH S, P1, DOI DOI 10.1145/1808984.1808985
   Chatzigeorgiou A, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P106, DOI 10.1109/QUATIC.2010.16
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Cheng SW, 2009, 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P132, DOI 10.1109/SEAMS.2009.5069082
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   DannyWeyns Bradley, 2013, Revised Selected and Invited Papers, P76, DOI [10.1007/978-3-642-35813-5_4, DOI 10.1007/978-3-642-35813-5_4]
   de Lemos R., 2013, LECT NOTES COMPUTER, DOI [10.1007/978-3-642-35813-5, DOI 10.1007/978-3-642-35813-5.BERLIN:SPRINGER]
   Delnat W, 2018, 2018 IEEE/ACM 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P33, DOI 10.1145/3194133.3194162
   Ernst NA, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P50, DOI 10.1145/2786805.2786848
   Fontana FA, 2011, J SYST SOFTWARE, V84, P2334, DOI 10.1016/j.jss.2011.07.006
   Fontana FA, 2019, 13TH EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE (ECSA 2019), VOL 2, P197, DOI 10.1145/3344948.3344982
   Fontana FA, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ICSAW), P282, DOI 10.1109/ICSAW.2017.16
   Fontana FA, 2013, J SOFTW-EVOL PROC, V25, P27, DOI 10.1002/smr.547
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gamma Erich., 1994, DESIGN PATTERNS
   Garcia J, 2009, EUR CON SFTWR MTNCE, P255, DOI 10.1109/CSMR.2009.59
   Gerasimou Simos, 2017, Dagstuhl Artifacts Ser., V1, DOI [10.4230/DARTS.3.1.3, DOI 10.4230/DARTS.3.1.3]
   Huebscher MC, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1380584.1380585
   Iftikhar M. U., 2017, DAGSTUHL ARTIFACTS S, V3, DOI [10.4230/DARTS.3.1.4, DOI 10.4230/DARTS.3.1.4]
   Kaddoum E., 2010, P 2010 ICSE WORKSHOP, P29, DOI [10.1145/1808984.1808988, DOI 10.1145/1808984.1808988]
   Kaner C., 2004, 10 INT SOFTW METR S
   Kit M, 2015, 2015 IEEE/ACM 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P93, DOI 10.1109/SEAMS.2015.28
   Kozik Rafal, 2019, Contemporary Complex Systems and Their Dependability. Proceedings of the Thirteenth International Conference on Dependability and Complex Systems (DepCoS-RELCOMEX). Advances in Intelligent Systems and Computing (AISC 761), P306, DOI 10.1007/978-3-319-91446-6_29
   Krijt F., 2017, 12 IEEE ACM INT S SO, P116, DOI [10.1109/SEAMS.2017.17, DOI 10.1109/SEAMS.2017.17]
   Krupitzer C, 2015, PERVASIVE MOB COMPUT, V17, P184, DOI 10.1016/j.pmcj.2014.09.009
   Le DM, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P235, DOI 10.1109/MSR.2015.29
   Macia I, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P662, DOI 10.1109/ICSM.2012.6405348
   Martin R.C., 2007, AGILE SOFTWARE DEV P
   Martini A., 2018, P EUR C SOFTW ARCH E
   Neti S., 2007, International Workshop on Software Engineering for Adaptive and Self-Managing Systems, 2007. ICSE Workshops SEAMS '07. Presented at the International Workshop on Software Engineering for Adaptive and Self-Managing Systems, P6, DOI DOI 10.1109/SEAMS.2007.15
   Olbrich S, 2009, INT SYMP EMP SOFTWAR, P391
   Peters R, 2012, EUR CON SFTWR MTNCE, P411, DOI 10.1109/CSMR.2012.79
   Pettersson N, 2010, IEEE T SOFTWARE ENG, V36, P575, DOI 10.1109/TSE.2009.92
   Raibulet C., 2017, 11 EUROPEAN C SOFTWA, P23
   Raibulet C, 2008, LECT NOTES COMPUT SC, V5292, P342, DOI 10.1007/978-3-540-88030-1_33
   Raibulet C, 2018, J SYST SOFTWARE, V144, P409, DOI 10.1016/j.jss.2018.07.010
   Raibulet C, 2014, INT CONF SELF SELF, P185, DOI 10.1109/SASO.2014.36
   Raibulet C, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P341, DOI 10.1109/WICSA.2009.5290667
   Ramirez A.J., 2010, P 2010WORKSHOP SOFTW, P49
   Reinecke P, 2010, PERFORM EVALUATION, V67, P676, DOI 10.1016/j.peva.2009.12.001
   Romano D., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P437, DOI 10.1109/WCRE.2012.53
   Roveda R, 2018, EUROMICRO CONF PROC, P408, DOI 10.1109/SEAA.2018.00073
   Sankari M, 2015, J NUCL ENG RADIAT SC, V1, DOI 10.1115/1.4030504
   Sedgewick R., 2011, Algorithm
   Tsantalis N, 2006, IEEE T SOFTWARE ENG, V32, P896, DOI 10.1109/TSE.2006.112
   Vaucher S, 2009, WORK CONF REVERSE EN, P145, DOI 10.1109/WCRE.2009.23
   Villegas Norha M., 2011, 2011 ICSE S SOFTW EN, P80
   Vogel T, 2018, 2018 IEEE/ACM 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P101, DOI 10.1145/3194133.3194161
   Walter B, 2018, J SYST SOFTWARE, V144, P1, DOI 10.1016/j.jss.2018.05.057
   Walter B, 2016, INFORM SOFTWARE TECH, V74, P127, DOI 10.1016/j.infsof.2016.02.003
   Weyns D, 2018, ELSEVIER, V19, P888, DOI [10.1016/S0031-8914(53)80099-6, DOI 10.1016/S0031-8914(53)80099-6]
   Weyns D, 2015, 2015 IEEE/ACM 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P88, DOI 10.1109/SEAMS.2015.27
   Wuttke J., 2012, 2012 7th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, P27, DOI 10.1109/SEAMS.2012.6224388
NR 61
TC 12
Z9 12
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1213
EP 1243
DI 10.1007/s11219-020-09502-5
EA MAR 2020
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000564404800001
DA 2024-07-18
ER

PT J
AU Eniser, HF
   Sen, A
AF Eniser, Hasan Ferit
   Sen, Alper
TI Virtualization of stateful services via machine learning
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Service virtualization; Machine learning
AB Today's enterprise software systems are much more complicated than the past. Increasing numbers of dependent applications, heterogeneous technologies, and wide usage of Service-Oriented Architectures (SOA), where numerous services communicate with each other, makes testing of such systems challenging. For testing these software systems, the concept of service virtualization is gaining popularity. Service virtualization is an automated technique to mimic the behavior of a given real service. Services can be classified as stateless or stateful services. Many services are stateful in nature, yet virtualization of stateful services is harder than virtualization of stateless services. In this work, we introduce two novel stateful service virtualization approaches. We employ classification-based and sequence-to-sequence-based machine learning algorithms in developing our solutions. Classification is a supervised learning method where the task is assigning given inputs to corresponding classes. A sequence-to-sequence model is a deep neural network architecture where the input and the output are sequences. We demonstrate the validity of our approaches on three datasets. Our evaluation shows that we obtain 75 % to 81 % accuracy on subject datasets with classification based method. Our deep neural network-based solution achieves even better accuracy results ranging from 89 to 97 % on subject datasets. Our evaluation on training times of the mentioned techniques show that classification based technique significantly outperforms other methods.
C1 [Eniser, Hasan Ferit; Sen, Alper] Bogazici Univ, Comp Engn Dept, Bebek, Turkey.
C3 Bogazici University
RP Sen, A (corresponding author), Bogazici Univ, Comp Engn Dept, Bebek, Turkey.
EM hasan.eniser@boun.edu.tr; alper.sen@boun.edu.tr
CR Abadi Martin, 2016, TENSORFLOW LARGE SCA, V16, P265
   Alpaydin E, 2014, ADAPT COMPUT MACH LE, P1
   [Anonymous], 2017, IT CENTRAL STATION S
   BESCHASTNIKH I., 2011, P 19 ACM SIGSOFT S 1, P267, DOI DOI 10.1145/2025113.2025151
   Beschastnikh I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P468, DOI 10.1145/2568225.2568246
   Bhagya T, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES (IEEE ICWS 2018), P123, DOI 10.1109/ICWS.2018.00023
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   Boettiger Carl, 2015, ACM SIGOPS Operating Systems Review, V49, P71
   Bojarski Mariusz, 2016, arXiv
   Buitinck L, 2013, ECML PKDD WORKSH LAN, P108, DOI DOI 10.48550/ARXIV.1309.0238
   Casey Mike, 2008, DYNAMICS, V8, P6
   Chollet F, 2015, KERAS
   Clarke E., 2000, Computer Aided Verification, P154
   Cleeremans A, 1989, NEURAL COMPUT, V1, P372, DOI 10.1162/neco.1989.1.3.372
   Cook J. E., 1998, ACM Transactions on Software Engineering and Methodology, V7, P215, DOI 10.1145/287000.287001
   Dallmeier V., 2006, P 2006 INT WORKSH DY, P17, DOI DOI 10.1145/1138912.1138918
   Du M., 2013, INT ACM SIGSOFT C QU
   Eniser HF, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1576, DOI 10.1145/3167132.3167424
   Eniser HF, 2018, INT WORKSH AUTOMAT, P9, DOI 10.1145/3194733.3194737
   Farahmandpour Z, 2017, 2017 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON RAPID CONTINUOUS SOFTWARE ENGINEERING (RCOSE), P32, DOI 10.1109/RCoSE.2017.4
   Giudice Diego Lo, 2014, FORRESTER WAVE
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Graves A, 2013, INT CONF ACOUST SPEE, P6645, DOI 10.1109/ICASSP.2013.6638947
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Hossain MA, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P266, DOI 10.1109/SANER.2018.8330215
   Kingma D. P., 2014, arXiv
   Krka I, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P178, DOI 10.1145/2635868.2635890
   Lee Giles C., 2008, Learning, V4
   Littman ML, 2002, ADV NEUR IN, V14, P1555
   Lorenzoli D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P501, DOI 10.1145/1368088.1368157
   Miao Du, 2015, ACM SIGSOFT Software Engineering Notes, V40, P48, DOI 10.1145/2693208.2693221
   Michelsen J., 2012, SERVICE VIRTUALIZATI, P27
   Mohammad S.S., 2010, LIT SURVEY ALGORITHM, P73
   Murphy T.E., 2013, MAGIC QUADRANT INTEG
   Nizamic F., 2011, TESTING HIGHLY DISTR
   Ohmann Tony, 2014, INT C AUT SOFTW ENG
   Reiss SP, 2001, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2001.919096
   Schneider JG, 2015, 2015 24TH AUSTRALASIAN SOFTWARE ENGINEERING CONFERENCE (ASWEC 2015), P48, DOI 10.1109/ASWEC.2015.13
   Singh Satinder, 2004, P 20 C UNCERTAINTY A, P512
   Sutskever I., 2014, ADV NEURAL INFORM PR, V4, P3104, DOI DOI 10.5555/2969033.2969173
   Tang L., 2009, P 18 INT C WORLD WID, P211
   Versteeg S, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P202, DOI 10.1145/2889160.2889242
   Versteeg S, 2016, INTERNATIONAL WORKSHOP ON CONTINUOUS SOFTWARE EVOLUTION AND DELIVERY, CSED 2016, P49, DOI [10.1109/CSED.2016.018, 10.1145/2896941.2896950]
   Walkinshaw Neil, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P248, DOI 10.1109/ASE.2008.35
   Walkinshaw N, 2016, EMPIR SOFTW ENG, V21, P811, DOI 10.1007/s10664-015-9367-7
   Xu AB, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P3506, DOI 10.1145/3025453.3025496
   Zhou XQ, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL) AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (IJCNLP), VOL 2, P713
NR 47
TC 4
Z9 4
U1 1
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 283
EP 306
DI 10.1007/s11219-019-09468-z
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LN9IP
UT WOS:000533245100001
DA 2024-07-18
ER

PT J
AU Choi, J
   Jee, E
   Bae, DH
AF Choi, Jinho
   Jee, Eunkyoung
   Bae, Doo-Hwan
TI Timing consistency checking for UML/MARTE behavioral models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE UML; State machine diagram; Sequence diagram; Timing diagram; MARTE;
   Timing consistency checking
ID UML
AB UML/MARTE model-driven development approaches are gaining attention in developing real-time embedded software (RTES). UML behavioral models with MARTE annotations are used to describe timing behaviors and timing characteristics of RTES. Particularly, state machine, sequence, and timing diagrams with MARTE annotations are appropriate to understand and analyze timing behaviors of RTES. However, to guarantee software correctness and safety, timing inconsistencies in UML/MARTE should be identified in the design phase of RTES. UML/MARTE timing inconsistencies are related to modeling errors and can be hazards throughout the lifecycle of RTES. We propose a systematic approach to check timing consistency of state machine, sequence, and timing diagrams with MARTE annotations for RTES. First, we present how state machine, sequence, and timing diagrams with MARTE annotations specify the behaviors of RTES. To overcome informal semantics of UML/MARTE models, we provide formal definitions of state machine, sequence, and timing diagrams with MARTE annotations. Second, we present the timing consistency checking approach that consists of a rule-based and a model checking-based timing consistency checking. In the rule-based timing consistency checking, we validate well formedness of UML/MARTE behavioral models in timing aspects. In the model checking-based timing consistency checking, we verify whether timing behaviors of sequence and timing diagrams with MARTE annotations are consistent with the timing behaviors of state machine diagrams with MARTE annotations. We support an automated timing consistency checking tool UML/MARTE timing Consistency Analyzer for a seamless approach. We demonstrate the effectiveness and the practicality of the proposed approach by two case studies using cruise control system software and guidance and control unit software .
C1 [Choi, Jinho] ADD, R&D Inst 1, Yuseong POB 35, Daejeon 34188, South Korea.
   [Jee, Eunkyoung; Bae, Doo-Hwan] Korea Adv Inst Sci & Technol, Sch Comp, 291 Daehak Ro, Daejeon 34141, South Korea.
C3 Agency of Defense Development (ADD), Republic of Korea; Korea Advanced
   Institute of Science & Technology (KAIST)
RP Choi, J (corresponding author), ADD, R&D Inst 1, Yuseong POB 35, Daejeon 34188, South Korea.
EM jhchoi93@gmail.com; ekjee@se.kaist.ac.kr; bae@se.kaist.ac.kr
RI Bae, Doo-Hwan/C-1538-2011
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Amnell T, 2003, LECT NOTES COMPUT SC, V2791, P60
   Amnell T., 2002, Nordic Journal of Computing, V9, P269
   [Anonymous], 2007, LA Times
   [Anonymous], 2012, PAPYRUS
   [Anonymous], 2010, Unified Modeling Language (UML)
   [Anonymous], 2019, OMG UML PROF MARTE
   [Anonymous], 2005, UML PROF SCHED PERF
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   BERARD B., 2010, SYSTEMS SOFTWARE VER
   Chiorean D., 2004, ELECTRON NOTES THEOR, V102, P99, DOI DOI 10.1016/J.ENTCS.2003.09.005
   Choi J., 2005, P KOR INF SCI SOC FA, V32, P841
   Choi J., 2011, J KIISE SOFTWARE APP, V38, P647
   Choi J., 2015, UMCA UML MARTE TIM C
   Choi J., 2012, P KOR COMP C KCC, V39, P138
   Choi J., 2011, P KOR COMP C KCC, V38, P166
   Choi J, 2012, COMM COM INF SC, V352, P107
   Clarke EM, 1999, MODEL CHECKING, P1
   Egyed A., 2006, 28th International Conference on Software Engineering Proceedings, P381, DOI 10.1145/1134285.1134339
   Egyed A, 2007, PROC INT CONF SOFTW, P793
   Egyed A, 2011, IEEE T SOFTWARE ENG, V37, P188, DOI 10.1109/TSE.2010.38
   Engels G., 2001, Software Engineering Notes, V26, P186, DOI 10.1145/503271.503235
   Fersman E, 2002, LECT NOTES COMPUT SC, V2280, P67
   Fowler M., 2004, UML DISTILLED A BRIE
   Gherbi A, 2007, LECT NOTES COMPUT SC, V4745, P203
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   Gomaa H, 2001, PROC INT CONF SOFTW, P737
   Gomes L, 2010, INFORM SCI REFERENCE
   Jinho Choi, 2013, Journal of KIISE: Computing Practices and Letters, V19, P90
   Jinho Choi, 2012, Proceedings of the 2012 IEEE Sixth International Conference on Software Security and Reliability (SERE 2012), P118, DOI 10.1109/SERE.2012.24
   Knapp A., 2002, Formal Techniques in Real-Time and Fault-Tolerant Systems. 7th International Symposium, FTRTFT 2002. Proceedings (Lecture Notes in Computer Science Vol.2469), P395
   Küster JM, 2001, FOURTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P31, DOI 10.1109/ISORC.2001.922815
   Laleau R, 2008, INFORM SOFTWARE TECH, V50, P797, DOI 10.1016/j.infsof.2007.10.007
   Lavagno Luciano., 2003, UML for real: design of embedded real-time systems
   Leveson NG, 2011, ENG SYST, P1
   Lucas FJ, 2009, INFORM SOFTWARE TECH, V51, P1631, DOI 10.1016/j.infsof.2009.04.009
   Millett LynetteI., 2007, Software for Dependable Systems: Sufficient Evidence
   Nentwich C., 2002, ACM T INTERNET TECHN, V2, P151, DOI [10.1145/514183.514186, DOI 10.1145/514183.514186]
   Nguyen Minh Chau, 2014, P 29 ANN ACM S APPL, P1140, DOI [10.1145/2554850.2555011, DOI 10.1145/2554850.2555011]
   OMG, 2006, OBJ CONSTR LANG VERS
   Paradigm V., 2012, VIS PAR UML COMM ED
   Peraldi-Frati MA, 2012, DES AUT TEST EUROPE, P805
   Pont M.J., 2001, PATTERNS TIME TRIGGE
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   Selic B., 1998, Languages, Compilers, and Tools for Embedded Systems. ACM SIGPLAN Workshop LCTES'98. Proceedings, P250, DOI 10.1007/BFb0057795
   Sgroi M, 2000, IEEE DES TEST COMPUT, V17, P14, DOI 10.1109/54.844330
   Sommerville I., 2011, Software engineering
   Sourrouille J. L., 2002, WORKSH CONS PROBL UM, P1
   UPPAAL, 2012, UPPAAL TOOL VER REAL
   Usman M, 2008, PROCEEDINGS OF THE 2008 ADVANCED SOFTWARE ENGINEERING & ITS APPLICATIONS, P57, DOI 10.1109/ASEA.2008.40
   Wieringa R.J., 2003, Design Methods for Reactive Systems: Yourdon, Statemate
   Zhao XP, 2006, LECT NOTES COMPUT SC, V4260, P440
NR 52
TC 4
Z9 4
U1 0
U2 22
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 835
EP 876
DI 10.1007/s11219-015-9290-6
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400015
DA 2024-07-18
ER

PT J
AU Seth, FP
   Mustonen-Ollila, E
   Taipale, O
   Smolander, K
AF Seth, Frank Philip
   Mustonen-Ollila, Erja
   Taipale, Ossi
   Smolander, Kari
TI Software quality construction in 11 companies: an empirical study using
   the grounded theory
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality; Quality construction; Human factors; Experience; Innovation;
   Creativity; Art
ID CREATIVITY; PERCEPTIONS; PRINCIPLES; DEVELOPERS; MANAGEMENT; WORLD
AB This paper investigates software quality construction in 11 software companies using the Grounded Theory research method. Our analysis shows that software quality construction is influenced by the development context, which is affected by customer involvement; agility, which enables cooperation among the development teams; outsourcing; and human factors i.e., developers' creativity, innovation, experience and art, which are not limited by development methods but customer demand and feedback systems. We claim that these findings may be applied in software development companies in the areas of prioritization of human and non-human resources.
C1 [Seth, Frank Philip; Mustonen-Ollila, Erja; Taipale, Ossi; Smolander, Kari] Lappeenranta Univ Technol, Dept Software Engn & Informat Management, Lappeenranta, Finland.
C3 Lappeenranta-Lahti University of Technology LUT
RP Seth, FP (corresponding author), Lappeenranta Univ Technol, Dept Software Engn & Informat Management, Lappeenranta, Finland.
EM frank.seth@lut.fi; erja.mustonen-ollila@lut.fi; ossi.taipale@lut.fi;
   kari.smolander@lut.fi
RI Smolander, Kari/B-4581-2015
OI Smolander, Kari/0000-0002-7043-0458
FU World Bank (STHEP) Project through the Tanzania Ministry of Education;
   STX Project, Lappeenranta University of Technology
FX The study was supported by World Bank (STHEP) Project through the
   Tanzania Ministry of Education and the STX Project, Lappeenranta
   University of Technology. Peter G. Jones is acknowledged for assistance
   with English language.
CR Amabile T. M., 1996, CREATIVITY CONTEXT
   [Anonymous], 2006, 25051 ISOIEC
   [Anonymous], 2005, The New Oxford American Dictionary
   [Anonymous], P IFIP TC8 WG 8 2
   Arden R, 2010, BEHAV BRAIN RES, V214, P143, DOI 10.1016/j.bbr.2010.05.015
   Arthur WB, 1996, HARVARD BUS REV, V74, P100
   *ATLAS TI, 2005, KNOWL WORKB
   Boden M. A., 2004, CREATIVE MIND MYTHS
   BOEHM BW, 1989, IEEE T SOFTWARE ENG, V15, P902, DOI 10.1109/32.29489
   BOEHM BW, 1984, IEEE T SOFTWARE ENG, V10, P4, DOI 10.1109/TSE.1984.5010193
   Brem A, 2009, TECHNOVATION, V29, P351, DOI 10.1016/j.technovation.2008.06.003
   Brown J. M., 2011, Proceedings of the 2011 Agile Conference, P87, DOI 10.1109/AGILE.2011.45
   Çalikli G, 2013, SOFTWARE QUAL J, V21, P377, DOI 10.1007/s11219-012-9180-0
   Christoffer B., 2009, BUILDING SHAREPOINT, V2009, P229
   Cockburn A, 2001, COMPUTER, V34, P131, DOI 10.1109/2.963450
   Colomo-Palacios R, 2014, SOFTWARE QUAL J, V22, P3, DOI 10.1007/s11219-012-9191-x
   Corbin J., 2015, BASICS QUALITATIVE R
   Cramton CD, 2005, J BUS RES, V58, P758, DOI 10.1016/j.jbusres.2003.10.006
   D'Aniello A., 2006, P C SOFTW MAINT REEN, P355
   Denzin N.K., 1978, RES ACT THEORETICAL
   DROMEY RG, 1992, SOFTWARE QUAL J, V1, P45, DOI 10.1007/BF01720169
   Duchamp M., 1966, ART AND ARTISTS
   Edison H, 2013, J SYST SOFTWARE, V86, P1390, DOI 10.1016/j.jss.2013.01.013
   EISENHARDT KM, 1989, ACAD MANAGE REV, V14, P532, DOI 10.2307/258557
   European Commission (EC), 2003, NEW SME DEF US GUID
   Fagerholm Fabian, 2012, Proceedings 2012 International Conference on Software and System Process (ICSSP 2012), P73, DOI 10.1109/ICSSP.2012.6225984
   Fernández-Sanz L, 2011, LECT NOTES COMPUT SC, V6786, P257, DOI 10.1007/978-3-642-21934-4_22
   Guzmán JG, 2013, SOFTWARE QUAL J, V21, P325, DOI 10.1007/s11219-012-9177-8
   Glaser B. G., 1967, DISCOV GROUNDED THEO
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Green GC, 2005, INFORM SOFTWARE TECH, V47, P543, DOI 10.1016/j.infsof.2004.10.004
   Han HS, 2013, DECIS SUPPORT SYST, V55, P777, DOI 10.1016/j.dss.2013.03.003
   Hovenden FM, 1996, SOFTWARE QUAL J, V5, P25, DOI 10.1007/BF02420942
   International Organization for Standardization, 2001, 91261 ISOIEC
   International Organization for Standardization, 2005, 25000 ISOIEC
   Issac G, 2006, SOFTWARE QUAL J, V14, P291, DOI 10.1007/s11219-006-0037-2
   Jaakkola H, 2010, SOFTWARE QUAL J, V18, P299, DOI 10.1007/s11219-009-9091-x
   Jones B., 2012, Proceedings of the 14th International Conference on Human-computer Interaction with Mobile Devices and Services, MobileHCI '12, P83, DOI [10.1145/2371574.2371589, DOI 10.1145/2371574.2371589]
   Kasurinen J., 2009, P 16 AS PAS C SOFTW
   Khan SU, 2011, INFORM SOFTWARE TECH, V53, P693, DOI 10.1016/j.infsof.2010.08.003
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   Klein HK, 1999, MIS QUART, V23, P67, DOI 10.2307/249410
   Marcos A, 2011, ENTERTAIN COMPUT, V2, P143, DOI 10.1016/j.entcom.2010.12.003
   Miatidis M, 2008, LECT NOTES COMPUT SC, V4970, P185
   Middleton P, 2001, SOFTWARE QUAL J, V9, P241, DOI 10.1023/A:1013754402981
   Parsons D, 2014, SOFTWARE QUAL J, V22, P717, DOI 10.1007/s11219-013-9225-z
   Parzinger MJ, 1998, SOFTWARE QUAL J, V7, P239, DOI 10.1023/A:1008931305952
   PAULK MC, 1993, IEEE SOFTWARE, V10, P18, DOI 10.1109/52.219617
   Petre M, 2010, J VISUAL LANG COMPUT, V21, P171, DOI 10.1016/j.jvlc.2009.11.001
   Piffer D, 2012, THINK SKILLS CREAT, V7, P258, DOI 10.1016/j.tsc.2012.04.009
   Rodon J., 2007, ELECT J BUSINESS RES, V5, P71
   Rolfe I., 1999, J EUR IND TRAIN, V23, P224, DOI [10.1108/03090599910272103, DOI 10.1108/03090599910272103]
   Ryan S, 2013, INFORM SOFTWARE TECH, V55, P1614, DOI 10.1016/j.infsof.2013.02.013
   Schaefer R., 2009, SIGSOFT SOFTWARE ENG, V34, P1
   Seth FP, 2012, ASIA PAC SOFWR ENG, P17, DOI 10.1109/APSEC.2012.119
   Severengiz S., 2011, P 18 CIRP INT C LIF, P431
   Shin J., 2012, J. High Technol. Manag. Res, V23, P58
   Shneiderman B, 2007, COMMUN ACM, V50, P20, DOI 10.1145/1323688.1323689
   Strauss A.L., 1990, BASICS QUALITATIVE R
   Strauss E, 1998, CLIN ORTHOP RELAT R, P2
   Strecker Nanja., 2009, Innovation Strategy and Firm Performance: An Empirical Study of Publicly Listed Firm
   Taipale O., 2007, ACTA U LAPPEENRANTAE
   van Manen M., 2016, RES LIVED EXPERIENCE
   Xenos M, 1997, INFORM SOFTWARE TECH, V39, P417, DOI 10.1016/S0950-5849(96)01154-8
   Zeng LA, 2011, CREATIVITY RES J, V23, P24, DOI 10.1080/10400419.2011.545713
   Zhang GH, 2014, SOFTWARE QUAL J, V22, P365, DOI 10.1007/s11219-013-9197-z
NR 66
TC 8
Z9 10
U1 0
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2015
VL 23
IS 4
BP 627
EP 660
DI 10.1007/s11219-014-9246-2
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CU1CN
UT WOS:000363257000004
DA 2024-07-18
ER

PT J
AU Landhäusser, M
   Körner, SJ
   Tichy, WF
AF Landhaeusser, Mathias
   Koerner, Sven J.
   Tichy, Walter F.
TI From requirements to UML models and back: how automatic processing of
   text can support requirements engineering
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Natural language specification; Ontology; Modeling; UML
ID INSPECTIONS; DESIGN
AB Software engineering is supposed to be a structured process, but manual tasks leave much leeway. Ideally, these tasks lie in the hands of skilled analysts and software engineers. This includes creating the textual specification of the envisioned system as well as creating models for the software engineers. Usually, there is quite a bit of erosion during the process due to requirement changes, implementation decisions, etc. To deliver the software as specified, textual requirements, models, and the actual software need to be synchronized. However, in practice, the cost of manually maintaining consistency is too high. Our requirements engineering feedback system automates the process of keeping textual specification and models consistent when the models change. To improve overall processing of natural language specifications, our approach finds flaws in natural language specifications. In addition to the already published workshop paper, we show how well our tools support even non-software-engineers in improving texts. The case studies show that we can speed up the process of creation texts with fewer flaws significantly.
C1 [Landhaeusser, Mathias; Koerner, Sven J.] Karlsruhe Inst Technol KIT, Prof Tichys Grp, Karlsruhe, Germany.
   [Tichy, Walter F.] Karlsruhe Inst Technol KIT, Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology; Helmholtz
   Association; Karlsruhe Institute of Technology
RP Landhäusser, M (corresponding author), Karlsruhe Inst Technol KIT, Prof Tichys Grp, Karlsruhe, Germany.
EM mathias.landhaeusser@kit.edu; sven.koerner@kit.edu; tichy@kit.edu
RI Landhäußer, Mathias/I-6956-2019
OI Landhäußer, Mathias/0000-0002-7439-8096
FU legodo.com; Karlsruhe Institute of Technology (KIT), Germany
FX We would like to thank Alexander M. Turek, Bugra Derre, and Fatih Ok.
   Research on the RECAA/AUTOMODEL project is funded by legodo.com in
   cooperation with the Karlsruhe Institute of Technology (KIT), Germany.
CR Abrial J.-R., 1996, Formal Methods for Industrial Applications. Specifying and Programming the Steam Boiler Control, P1, DOI 10.1007/BFb0027228
   ACKERMAN AF, 1989, IEEE SOFTWARE, V6, P31, DOI 10.1109/52.28121
   Ambriola V., 2006, Automated Software Engineering, V13, P107, DOI 10.1007/s10515-006-5468-2
   [Anonymous], 2004, BT TECHNOLOGY J
   [Anonymous], 2003, Software requirements
   Arkley P, 2005, 13th IEEE International Conference on Requirements Engineering, Proceedings, P385, DOI 10.1109/RE.2005.49
   Arnold Robert S., 1996, Software Change Impact Analysis
   Bajwa I. S., 2006, 18 SAUD NAT COMP C C
   Berry D. M., 2003, From contract drafting to software specification: Linguistic sources of ambiguity
   Berry D. M., 2008, NEW QUALITY MODEL NA
   BERRY DM, 2004, LNCS, V2941
   Briand Lionel C., 2003, SCE0301 CARL U
   Chantree F, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P59
   Chaumun MA, 2002, SCI COMPUT PROGRAM, V45, P155, DOI 10.1016/S0167-6423(02)00058-8
   CHEN R, 2011, OLD NEW THING
   Cheng BHC, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P285, DOI 10.1109/FOSE.2007.17
   COURTOIS PJ, 1993, PROC INT CONF SOFTW, P315, DOI 10.1109/ICSE.1993.346033
   Dag JNO, 2005, IEEE SOFTWARE, V22, P32, DOI 10.1109/MS.2005.1
   Dag JNO, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P283
   Daigle L., 2004, WHOIS PROTOCOL SPECI
   Davis A., 1993, Proceedings First International Software Metrics Symposium (Cat. No.93TH0518-1), P141, DOI 10.1109/METRIC.1993.263792
   Dawson e L., 1999, Em: Proceedings of the 20th international conference on Information Systems, P260
   Denger C, 2003, IEEE INTERNATIONAL CONFERENCE ON SOFTWARE - SCIENCE, TECHNOLOGY & ENGINEERING, PROCEEDINGS, P80, DOI 10.1109/SWSTE.2003.1245428
   DERRE B, 2010, THESIS KARLSRUHE I T
   *ECL MOD FRAM PROJ, 2010, ECL MOD FRAM COMP
   Fabbrini F, 2002, 26TH ANNUAL NASA GODDARD SOFTWARE ENGINEERING WORKSHOP, PROCEEDINGS, P97, DOI 10.1109/SEW.2001.992662
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Fantechi A, 2002, IEEE JOINT INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P157, DOI 10.1109/ICRE.2002.1048518
   FILLMORE CJ, 1969, MOD STUD ENGL, P361
   Fliedl G., 2004, EMISA FORUM, V24, P24
   Fuchs NE, 1999, LECT NOTES COMPUT SC, V1559, P1, DOI 10.1007/3-540-48958-4_1
   GELHAUSEN T, 2010, THESIS KARLSRUHE I T
   Gelhausen T, 2007, ICSC 2007: INTERNATIONAL CONFERENCE ON SEMANTIC COMPUTING, PROCEEDINGS, P282, DOI 10.1109/ICSC.2007.13
   Gelhausen Tom, 2008, P GRAMOT 08, P17, DOI DOI 10.1145/1402947.1402951
   GLINZ M, 2009, ACM SIGSOFT SOFTWARE, V34, P40
   Han J, 1997, EIGHTH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE INCORPORATING COMPUTER AIDED SOFTWARE ENGINEERING, PROCEEDINGS, P172, DOI 10.1109/STEP.1997.615479
   Harmain HM, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P45, DOI 10.1109/ASE.2000.873649
   Hasegawa R., 2009, Proceedings of the Sixth Asia-Pacific Conference on Conceptual Modeling - Volume 96, APCCM'09, P87
   Havasi C., 2007, P REC ADV NAT LANG P, P261
   Heitmeyer C. L., 1996, ACM Transactions on Software Engineering and Methodology, V5, P231, DOI 10.1145/234426.234431
   Hui Yang, 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P25, DOI 10.1109/RE.2010.14
   IEEE, 1998, IEEE, P1, DOI [10.1109/IEEESTD.1998.88286, DOI 10.1109/IEEESTD.1998.88286]
   Juristo N, 2000, IEEE SOFTWARE, V17, P80, DOI 10.1109/52.896254
   Kaiya H, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P223
   Kaiya H, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P189
   Kamsties E., 2001, EMMSAD 01
   Kiyavitskaya N, 2008, REQUIR ENG, V13, P207, DOI 10.1007/s00766-008-0063-7
   Körner SJ, 2009, INT J SEMANT COMPUT, V3, P445, DOI 10.1142/S1793351X09000872
   Konrad S, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P329, DOI 10.1109/RE.2005.29
   KORNER SJ, 2012, RECAA REQUIREMENTS E
   KROHA P, 2000, LECT NOTES COMPUTER, V1873, P675, DOI DOI 10.1007/3-540-44469-6_
   Kroha Petr, 2006, P 9 INT C INFORM SYS, P31
   KUMAR DD, 2009, COMMUN COMPUT PHYS, V30, P147, DOI DOI 10.1007/978-3-642-10242-4_
   Kumar DD, 2008, PROCEEDINGS OF THE 2008 ADVANCED SOFTWARE ENGINEERING & ITS APPLICATIONS, P77, DOI 10.1109/ASEA.2008.25
   KUNG D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P202, DOI 10.1109/ICSM.1994.336774
   LANDHAUSSER M, 2012, P WORKSH REAL ART IN, DOI DOI 10.1109/RAISE.2012.6227965
   Li Ke., 2005, RE05, P5
   Liaskos S, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P79
   Mala GSA, 2006, LECT NOTES ARTIF INT, V4099, P1155, DOI 10.1007/978-3-540-36668-3_152
   Meng W. J., 2006, 3 INT WORKSH MET SCH
   Meziane F, 2008, REQUIR ENG, V13, P1, DOI [10.1007/s00766-007-0054-0, 10.1007/S00766-007-0054-0]
   Mich L, 2004, REQUIR ENG, V9, P40, DOI 10.1007/s00766-003-0179-8
   Montes A, 2008, LECT NOTES COMPUT SC, V5039, P325
   MORENO AM, 1997, JUSTIFICATION EQUIVA
   Niu N, 2008, INT REQUIR ENG CONF, P155, DOI 10.1109/RE.2008.49
   Nuseibeh B., 2000, P C FUTURE SOFTWARE, P35, DOI [10.1145/336512.336523, DOI 10.1145/336512.336523]
   Overmyer SP, 2001, PROC INT CONF SOFTW, P401, DOI 10.1109/ICSE.2001.919113
   PARNAS DL, 1985, COMMUN ACM, V28, P1326, DOI 10.1145/214956.214961
   PEASE A, 2003, NAT LANG PROC KNOWL, P777, DOI DOI 10.1109/NLPKE.2003.1276010
   Pisan Y., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P70, DOI 10.1109/ICSE.2000.870398
   REITER E, 2000, BUILDING NATURAL LAN, DOI DOI 10.2277/052102451X
   RUMBAUGH J, 1991, OBJECT ORIENTED MODE
   Rupp Chris, 2006, REQUIREMENTS ENG MAN
   Saeki M., 2004, ECRIM News, P14
   Smith RL, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P11, DOI 10.1109/ICSE.2002.1007952
   Volere, 2009, LIST REQ ENG TOOLS
   Wilson WM, 1997, PROC INT CONF SOFTW, P161, DOI 10.1145/253228.253258
   Xing Z., 2005, Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering, P54
   Zhang Y, 2006, 3 INT WORKSH MET SCH
NR 79
TC 26
Z9 31
U1 0
U2 21
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2014
VL 22
IS 1
SI SI
BP 121
EP 149
DI 10.1007/s11219-013-9210-6
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB2SX
UT WOS:000331643500007
DA 2024-07-18
ER

PT J
AU Bijlsma, D
   Ferreira, MA
   Luijten, B
   Visser, J
AF Bijlsma, Dennis
   Ferreira, Miguel Alexandre
   Luijten, Bart
   Visser, Joost
TI Faster issue resolution with higher technical quality of software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software defects; Defect resolution; Maintainability; Source code
   metrics; Rank correlation; Issue tracker mining
ID MAINTAINABILITY; METRICS
AB We performed an empirical study of the relation between technical quality of software products and the issue resolution performance of their maintainers. In particular, we tested the hypothesis that ratings for source code maintainability, as employed by the Software Improvement Group (SIG) quality model, are correlated with ratings for issue resolution speed. We tested the hypothesis for issues of type defect and of type enhancement. This study revealed that all but one of the metrics of the SIG quality model show a significant positive correlation with the resolution speed of defects, enhancements, or both.
C1 [Ferreira, Miguel Alexandre; Visser, Joost] Software Improvement Grp, Amsterdam, Netherlands.
   [Bijlsma, Dennis] Univ Amsterdam, Amsterdam, Netherlands.
   [Luijten, Bart] Delft Univ Technol, Delft, Netherlands.
C3 University of Amsterdam; Delft University of Technology
RP Ferreira, MA (corresponding author), Software Improvement Grp, Amsterdam, Netherlands.
EM mail@dennisbijlsma.com; m.ferreira@sig.eu; bart@bluijten.nl;
   j.visser@sig.eu
RI Visser, Joost/AAD-9423-2019; Ferreira, Miguel/HHZ-6251-2022
OI Visser, Joost/0000-0003-0158-3095
CR Air Force Operational Test & Evaluation Center (AFOTEC), 1989, 8002 AFOTEC HQ KIRT, V3
   [Anonymous], 2006, Proceedings of the 14th ACM SIGSOFT international symposium on Foundations of software engineering (SIGSOFT '06/FSE-14), DOI 10.1145/1181775.1181781
   [Anonymous], J COMPUTER SCI
   [Anonymous], 2010, 4 INT WORKSH SOFTW Q
   Aversano L., 2007, IWPSE 07 9 INT WORKS, P19
   Ayari K., 2007, Proceedings of the 2007 Conference of the Center for Advanced Studies on Collaborative Research, CASCON '07, P215
   Baggen R., 2010, 4 INT WORKSH SOFTW Q
   Benlarbi S, 2000, 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P24, DOI 10.1109/ISSRE.2000.885858
   Bird C, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P121, DOI 10.1145/1595696.1595716
   Briand LC, 2000, J SYST SOFTWARE, V51, P245, DOI 10.1016/S0164-1212(99)00102-8
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   COLEMAN D, 1994, COMPUTER, V27, P44, DOI 10.1109/2.303623
   COLEMAN D, 1995, J SYST SOFTWARE, V29, P3, DOI 10.1016/0164-1212(94)00125-7
   Ferneley EH, 1999, J SOFTW MAINT-RES PR, V11, P55, DOI 10.1002/(SICI)1096-908X(199901/02)11:1<55::AID-SMR184>3.0.CO;2-O
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Heitlager I, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P30, DOI 10.1109/QUATIC.2007.8
   International Organization for Standardization, 2001, 91261 ISOIEC
   Kim S, 2006, IEEE INT CONF AUTOM, P81
   Kuipers T, 2007, SPEC SESS SYST QUAL
   Kuipers T., 2007, P INT WORKSH TOOLS M
   Lubsen Z, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P151, DOI 10.1109/MSR.2009.5069493
   Luijten B, 2010, THESIS DELFT U TECHN
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Misra SC, 2005, SOFTWARE QUAL J, V13, P297, DOI 10.1007/s11219-005-1754-7
   OMAN P, 1994, J SYST SOFTWARE, V24, P251, DOI 10.1016/0164-1212(94)90067-1
   Oman PW, 1991, 9108TR U ID SOFTW EN
   Perry DE., 2000, P C FUT SOFTW ENG, P345, DOI DOI 10.1145/336512.336586
   Ratzinger J, 2007, LECT NOTES COMPUT SC, V4422, P12
   Riaz M, 2009, INT SYMP EMP SOFTWAR, P368, DOI 10.1109/esem.2009.5314233
   Shibata K, 2007, 13TH PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P35, DOI 10.1109/PRDC.2007.46
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   Spearman C, 1907, AM J PSYCHOL, V18, P161, DOI 10.2307/1412408
   Thomas Zimmermann., 2009, P THE 7 JOINT M EURO, P91, DOI DOI 10.1145/1595696.1595713
   van Deursen A, 2003, PROC IEEE INT CONF S, P385, DOI 10.1109/ICSM.2003.1235448
   van Koten C, 2006, INFORM SOFTWARE TECH, V48, P59, DOI 10.1016/j.infsof.2005.03.002
   Welker KD, 1997, J SOFTW MAINT-RES PR, V9, P127, DOI 10.1002/(SICI)1096-908X(199705)9:3<127::AID-SMR149>3.0.CO;2-S
   Zaidman Andy, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P220, DOI 10.1109/ICST.2008.47
   Zhou YM, 2007, J SYST SOFTWARE, V80, P1349, DOI 10.1016/j.jss.2006.10.049
NR 40
TC 19
Z9 21
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2012
VL 20
IS 2
SI SI
BP 265
EP 285
DI 10.1007/s11219-011-9140-0
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 935GT
UT WOS:000303507800002
DA 2024-07-18
ER

PT J
AU Alshraideh, M
   Mahafzah, BA
   Al-Sharaeh, S
AF Alshraideh, Mohammad
   Mahafzah, Basel A.
   Al-Sharaeh, Saleh
TI A multiple-population genetic algorithm for branch coverage test data
   generation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automatic test data generation; Search-based testing; Single- and
   multiple-population genetic algorithms
AB The software testing phase in the software development process is considered a time-consuming process. In order to reduce the overall development cost, automatic test data generation techniques based on genetic algorithms have been widely applied. This research explores a new approach for using genetic algorithms as test data generators to execute all the branches in a program. In the literature, existing approaches for test data generation using genetic algorithms are mainly focused on maintaining a single-population of candidate tests, where the computation of the fitness function for a particular target branch is based on the closeness of the input execution path to the control dependency condition of that branch. The new approach utilizes acyclic predicate paths of the program's control flow graph containing the target branch as goals of separate search processes using distinct island populations. The advantages of the suggested approach is its ability to explore a greater variety of execution paths, and in certain conditions, increasing the search effectiveness. When applied to a collection of programs with a moderate number of branches, it has been shown experimentally that the proposed multiple-population algorithm outperforms the single-population algorithm significantly in terms of the number of executions, execution time, time improvement, and search effectiveness.
C1 [Alshraideh, Mohammad; Mahafzah, Basel A.; Al-Sharaeh, Saleh] Univ Jordan, Dept Comp Sci, Amman 11942, Jordan.
C3 University of Jordan
RP Alshraideh, M (corresponding author), Univ Jordan, Dept Comp Sci, Amman 11942, Jordan.
EM mshridah@ju.edu.jo; b.mahafzah@ju.edu.jo; ssharaeh@ju.edu.jo
RI al-sharaeh, saleh H/F-9786-2018; Alshraideh, Mohammad A/C-8113-2015;
   Mahafzah, Basel A./E-1203-2018; Mahafzah, Basel/D-1296-2015
OI Alshraideh, Mohammad A/0000-0002-2724-9290; Mahafzah, Basel
   A./0000-0003-3979-1076; Mahafzah, Basel/0000-0003-3979-1076; Al-Sharaeh,
   Saleh/0000-0001-7724-1409
CR ALSHRAIDEH M, 2009, SOFTWARE QU IN PRESS
   Alshraideh M, 2006, SOFTW TEST VERIF REL, V16, P175, DOI 10.1002/stvr.354
   [Anonymous], RSTR0039711
   [Anonymous], 1990, Software testing techniques {
   [Anonymous], 2007, P 2007 INT S SOFTW T, DOI DOI 10.1145/1273463.1273475
   Bottaci L, 2003, LECT NOTES COMPUT SC, V2724, P2455
   CANTUPAZ E, 1988, RESEAUX SYSTEMS REPO, V10, P141
   CHUNG I, 2008, SOFTW TEST VERIF REL, V18, P37
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fraser G, 2008, SOFTWARE QUAL J, V16, P161, DOI 10.1007/s11219-007-9031-6
   Gotlieb A, 2000, LECT NOTES ARTIF INT, V1861, P399
   GOTLIEB A, 1998, INT S SOFTW TEST AN, P53
   GUPTA N, 2000, 15 IEEE INT C AUT SO
   HARMAN M, 2004, IEEE T SOFTWARE ENG, V30, P73
   Harman M., 2002, P GENETIC EVOLUTIONA, P1359
   Harman M, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P185
   KANSOMKEAT S, 2008, COMP EVALUATION TEST, P867
   Korel B, 1996, PROC INT CONF SOFTW, P71, DOI 10.1109/ICSE.1996.493403
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   Kuo FC, 2008, SOFTWARE QUAL J, V16, P303, DOI 10.1007/s11219-008-9047-6
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   MCMINN P, 2009, ACM T SOFTW IN PRESS
   MCMINN P., 2006, Proceedings of the 2006 international symposium on Software testing and analysis, P13, DOI [10.1145/1146238.1146241, DOI 10.1145/1146238.1146241]
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Miller J, 2006, INFORM SOFTWARE TECH, V48, P586, DOI 10.1016/j.infsof.2005.06.006
   OFFUTT J, 1996, INT S SOFTW TEST AN, P195
   Pargas RoyP., 1999, Verification and Reliability, V9, P263
   Tracey N., 1998, Software Engineering Notes, V23, P73, DOI 10.1145/271775.271792
   Wegener J, 2001, INFORM SOFTWARE TECH, V43, P841, DOI 10.1016/S0950-5849(01)00190-2
   WEGENER J, 1996, P 4 EUR C SOFTW TEST
   WEGENER J, 2000, P 1 INT WORKSH AUT P
   WHITLEY D, 1989, PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON GENETIC ALGORITHMS, P116
   Whitley D, 2001, INFORM SOFTWARE TECH, V43, P817, DOI 10.1016/S0950-5849(01)00188-4
   Yoo S, 2009, IEEE ICST WORKSHOP, P101, DOI 10.1109/ICSTW.2009.10
NR 35
TC 22
Z9 31
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2011
VL 19
IS 3
BP 489
EP 513
DI 10.1007/s11219-010-9117-4
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 775TK
UT WOS:000291486100002
DA 2024-07-18
ER

PT J
AU Offutt, J
   Abdurazik, A
   Schach, SR
AF Offutt, Jeff
   Abdurazik, Aynur
   Schach, Stephen R.
TI Quantitatively measuring object-oriented couplings
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Object-oriented programming; Quality analysis and evaluation; Analysis;
   Complexity measures; Maintainability; Test execution
ID TEST ORDER; SOFTWARE; METRICS; VALIDATION
AB One key to several quality factors of software is the way components are connected. Software coupling can be used to estimate a number of quality factors, including maintainability, complexity, and reliability. Object-oriented languages are designed to reduce the number of dependencies among classes, which encourages separation of concerns and should reduce the amount of coupling. At the same time, the object-oriented language features change the way the connections are made, how they must be analyzed, and how they are measured. This paper discusses software couplings based on object-oriented relationships between classes, specifically focusing on types of couplings that are not available until after the implementation is completed, and presents a static analysis tool that measures couplings among classes in Java packages. Data from evaluating the tool on several open-source projects are provided. The coupling measurement is based on source code, which has the advantage of being quantitative and more precise than previous measures, but the disadvantage of not being available before implementation, and thus not useful for some predictive efforts.
C1 [Offutt, Jeff; Abdurazik, Aynur] George Mason Univ, Informat & Software Engn Dept, Fairfax, VA 22030 USA.
   [Schach, Stephen R.] Vanderbilt Univ, Dept Elect Engn & Comp Sci, Nashville, TN 37235 USA.
C3 George Mason University; Vanderbilt University
RP Offutt, J (corresponding author), George Mason Univ, Informat & Software Engn Dept, Fairfax, VA 22030 USA.
EM offutt@gmu.edu; aynur.abdurazik@gmail.com; srs@vuse.vanderbilt.edu
FU National Science Foundation [CCR-0097056]; National Institute of
   Standards and Technology (NIST); Software Diagnostics and Conformance
   Testing Division (SDCT)
FX This work was sponsored in part by the National Science Foundation under
   grant number CCR-0097056. Offutt and Abdurazik were sponsored in part by
   National Institute of Standards and Technology (NIST), Software
   Diagnostics and Conformance Testing Division (SDCT) in support of its
   standards and conformance testing program. Thanks to Terence Parr, the
   developer of ANTLR, for the tool and for quick answers to our pushy
   questions.
CR Abdul AhmedMajeed., 2007, Crisis of Professional Responsibility in the Press of Iraq after the War, P1, DOI DOI 10.1093/COMJNL/BXM054
   Abdurazik A., 2006, P 2006 INT WORKSH AU, P50
   Alexander R. T., 1999, Proceedings of Technology of Object-Oriented Languages and Systems - TOOLS 30 (Cat. No.PR00278), P104, DOI 10.1109/TOOLS.1999.787540
   Alexander RT, 2000, 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P15, DOI 10.1109/ISSRE.2000.885857
   [Anonymous], 2003, ALAN APT SERIES
   [Anonymous], P 16 INT C TEST COMP
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   Arisholm E, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P33, DOI 10.1109/METRIC.2002.1011323
   BANSIYA J, 2000, ACM COMPUTING SURVEY, V32
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   BILAL HZ, 2006, QUANTITATIVE APPROAC
   Black S, 2001, J SOFTW MAINT EVOL-R, V13, P263, DOI 10.1002/smr.233
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Briand L, 1997, PROC INT CONF SOFTW, P412, DOI 10.1145/253228.253367
   Briand L. C., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P475, DOI 10.1109/ICSM.1999.792645
   Briand LC, 2003, IEEE T SOFTWARE ENG, V29, P594, DOI 10.1109/TSE.2003.1214324
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   BRIAND LC, 1999, P IEEE INT C SOFTW M
   Briand LC., 2002, P 14 INT C SOFTW ENG, P43, DOI DOI 10.1145/568760.568769
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Coad P., 1991, OBJECT ORIENTED ANAL, V2nd
   COLLOFELLO JS, 1987, AFIPS C P, V56, P657
   Constantine LarryL., 1979, Structured Design
   Eder J., 1994, Coupling and cohesion in objectoriented systems
   El Emam K, 2001, J SYST SOFTWARE, V56, P63, DOI 10.1016/S0164-1212(00)00086-8
   ELISH M, 2005, P 23 IASTED INT MULT
   EPPING A, 1994, P 19 NASA SOFTW ENG
   FENTON N, 1990, J SYST SOFTWARE, V12, P177, DOI 10.1016/0164-1212(90)90038-N
   Ferneley E, 2000, J SYST SOFTWARE, V51, P99, DOI 10.1016/S0164-1212(99)00115-6
   Gall H, 1998, PROC IEEE INT CONF S, P190, DOI 10.1109/ICSM.1998.738508
   Grosser D, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P252, DOI 10.1109/METRIC.2003.1232472
   Grosser D, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P295, DOI 10.1109/ASE.2002.1115033
   Hall GA, 2005, SOFTWARE QUAL J, V13, P281, DOI 10.1007/s11219-005-1753-8
   HARMAN M, 1997, IEEE ACM ICSE WORKSH, P28
   HENRY S, 1981, IEEE T SOFTWARE ENG, V7, P510, DOI 10.1109/TSE.1981.231113
   Hitz M., 1995, P INT S APPL CORP CO, P412
   HUTCHENS DH, 1985, IEEE T SOFTWARE ENG, V11, P749, DOI 10.1109/TSE.1985.232524
   *IEEE, 1998, 10611998 ANSIIEEE
   *IEEE, 1990, 610121990 ANSIIEEE
   *INC STATSOFT, 2006, EL STAT TXB
   Ince D., 1988, Software Development: Fashioning the Baroque
   Jalote Pankaj., 1991, An integrated approach to software engineering
   Jazayeri M, 2002, LECT NOTES COMPUT SC, V2361, P13
   JIN Z, 1998, SOFTW TEST VERIF REL, V8, P133
   JIN ZY, 1995, COMPASS '95 - PROCEEDINGS OF THE TENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P13, DOI 10.1109/CMPASS.1995.521883
   KAFURA D, 1981, J SYST SOFTWARE, V2, P121, DOI 10.1016/0164-1212(81)90032-7
   KUNG D, 1995, COMMUN ACM, V38, P75, DOI 10.1145/226239.226256
   KUNG DC, 1995, J OBJECT-ORIENT PROG, V8, P51
   Langley R., 1971, PRACTICAL STAT SIMPL
   Li W, 2000, INFORM SOFTWARE TECH, V42, P373, DOI 10.1016/S0950-5849(99)00088-9
   MALLOY BA, 2003, P 14 INT S SOFTW REL
   MAY J, 1999, 15 ANN UK PERF ENG W, P35
   MCCABE TJ, 1967, IEEE T SOFTWARE ENG, V2, P308
   Myers G., 1974, Reliable Software Through Composite Design
   OFFUTT AJ, 1993, J SYST SOFTWARE, V20, P295, DOI 10.1016/0164-1212(93)90072-6
   OFFUTT J, 1996, P 1996 IEEE C SOFTW, P171
   Page-Jones M., 1980, The practical guide to structured systems design
   PARR T, 1997, ANOTHER TOOL LANGUAG
   Schach S. R., 2002, IEE Proceedings-Software, V149, P18, DOI 10.1049/ip-sen:20020198
   SCHNEIDEWIND NF, 1992, IEEE T SOFTWARE ENG, V18, P410, DOI 10.1109/32.135774
   SELBY RW, 1991, IEEE T SOFTWARE ENG, V17, P141, DOI 10.1109/32.67595
   STEPHENS MA, 1974, J AM STAT ASSOC, V69, P730, DOI 10.2307/2286009
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   Tai KC, 1997, P INT COMP SOFTW APP, P602, DOI 10.1109/CMPSAC.1997.625079
   TROY DA, 1981, J SYST SOFTWARE, V2, P113, DOI 10.1016/0164-1212(81)90031-5
   Wilkie FG, 2000, J SYST SOFTWARE, V52, P157, DOI 10.1016/S0164-1212(99)00142-9
   Xia F, 2000, J SYST SOFTWARE, V50, P75, DOI 10.1016/S0164-1212(99)00078-3
   YAU SS, 1980, IEEE T SOFTWARE ENG, V6
NR 68
TC 23
Z9 29
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2008
VL 16
IS 4
BP 489
EP 512
DI 10.1007/s11219-008-9051-x
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 379QY
UT WOS:000261412500003
DA 2024-07-18
ER

PT J
AU Pino, FJ
   García, F
   Piattini, M
AF Pino, Francisco J.
   Garcia, Felix
   Piattini, Mario
TI Software process improvement in small and medium software enterprises::
   a systematic review
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 2nd Workshop on Advances in Model-based Software Testing
CY NOV 06, 2006
CL Raleigh, NC
DE software process improvement; SPI; small and medium software
   enterprises; SMEs; systematic review
AB Small and medium enterprises are a very important cog in the gears of the world economy. The software industry in most countries is composed of an industrial scheme that is made up mainly of small and medium software enterprises-SMEs. To strengthen these types of organizations, efficient Software Engineering practices are needed-practices which have been adapted to their size and type of business. Over the last two decades, the Software Engineering community has expressed special interest in software process improvement (SPI) in an effort to increase software product quality, as well as the productivity of software development. However, there is a widespread tendency to make a point of stressing that the success of SPI is only possible for large companies. In this article, a systematic review of published case studies on the SPI efforts carried out in SMEs is presented. Its objective is to analyse the existing approaches towards SPI which focus on SMEs and which report a case study carried out in industry. A further objective is that of discussing the significant issues related to this area of knowledge, and to provide an up-to-date state of the art, from which innovative research activities can be thought of and planned.
C1 [Pino, Francisco J.; Garcia, Felix; Piattini, Mario] Univ Castilla La Mancha, ALARCOS Res Grp, Informat Syst & Technol Dept, UCLM INDRA Res Dev Inst, E-13071 Ciudad Real, Spain.
   [Pino, Francisco J.] Univ Cauca, IDIS Res Crp, Elect & Telecommun Engn Fac, Popayan, Colombia.
C3 Indra; Universidad de Castilla-La Mancha; Universidad del Cauca
RP Pino, FJ (corresponding author), Univ Castilla La Mancha, ALARCOS Res Grp, Informat Syst & Technol Dept, UCLM INDRA Res Dev Inst, Paseo Univ 4, E-13071 Ciudad Real, Spain.
EM fcojose.pino@alu.uclm.es; felix.garcia@uclm.es; mario.piattini@uclm.es
RI Piattini, Mario/F-6271-2013; Pino Correa, Francisco José/GNP-2495-2022;
   Garcia, Felix/D-4299-2011
OI Piattini, Mario/0000-0002-7212-8279; Pino Correa, Francisco
   José/0000-0003-0668-4485; Garcia, Felix/0000-0001-6460-0353
CR [Anonymous], 1997, ACM SIGICE B
   [Anonymous], 2004, PROCEDURES PERFORMIN
   [Anonymous], SOFTWARE PROCESS IMP
   [Anonymous], ELEMENTS SOFTWARE PR
   Biolchini J., 2005, Int. Sugar J.
   BRODMAN JG, 1994, PROC INT CONF SOFTW, P331, DOI 10.1109/ICSE.1994.296795
   CALVOMANZANO JA, 2004, SOFTWARE PROCESS IMP, V9, P123
   de Almeida Biolchini JC, 2007, ADV ENG INFORM, V21, P133, DOI 10.1016/j.aei.2006.11.006
   Derniame JC, 1999, LECT NOTES COMPUT SC, V1500, P1
   Dybå T, 2005, IEEE T SOFTWARE ENG, V31, P410, DOI 10.1109/TSE.2005.53
   El Emam K, 2000, J SYST SOFTWARE, V51, P119, DOI 10.1016/S0164-1212(99)00117-X
   *EU, 2005, NEW SME DEF US GUID, P1
   Fayad ME, 2000, COMMUN ACM, V43, P115, DOI 10.1145/330534.330555
   Florac W., 1997, PRACTICAL SOFTWARE M, P1
   Hall T., 2002, Software Process Improvement and Practice, V7, P3, DOI 10.1002/spip.150
   Hannay JE, 2007, IEEE T SOFTWARE ENG, V33, P87, DOI 10.1109/TSE.2007.12
   *ISO, 2006, JTC1SC7 ISOIEC
   *ISO, 2004, 122072002FDAM2 ISOIE
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   Oktaba H, 2007, COMPUTER, V40, P21, DOI 10.1109/MC.2007.361
   PAULK MC, 1998, P 16 ANN PAC NW SOFT, P350
   PINO F, 2006, REVISION SYSTEMATICA
   Richardson I., 2001, Software Process Improvement and Practice, V6, P157, DOI 10.1002/spip.144
   ROUT T, 2000, 1 INT C SOFTW PROC I, P47
   Scott L, 2001, 2001 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P182, DOI 10.1109/ASWEC.2001.948512
   *SEI, 2006, IMPR PROC SMALL SETT
   Staples M, 2008, INFORM SOFTWARE TECH, V50, P605, DOI 10.1016/j.infsof.2007.07.003
   Staples M, 2007, J SYST SOFTWARE, V80, P883, DOI 10.1016/j.jss.2006.09.008
   von Wangenheim CG, 2006, IEEE SOFTWARE, V23, P91, DOI 10.1109/MS.2006.13
   Yoo C, 2006, J SYST SOFTWARE, V79, P954, DOI 10.1016/j.jss.2005.06.042
NR 30
TC 163
Z9 179
U1 2
U2 37
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2008
VL 16
IS 2
BP 237
EP 261
DI 10.1007/s11219-007-9038-z
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 286MP
UT WOS:000254850300005
DA 2024-07-18
ER

PT J
AU Phalp, KT
   Vincent, J
   Cox, K
AF Phalp, Keith Thomas
   Vincent, Jonathan
   Cox, Karl
TI Improving the quality of use case descriptions: empirical assessment of
   writing guidelines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT Conference on Software Quality Management
CY APR, 2006
CL Southampton, ENGLAND
AB Use cases are the main requirements vehicle of the UML and are used widely to specify systems. Hence, the need to write clear and accurate use case descriptions has a significant impact for many practitioners. However, many have pointed to weaknesses in the support offered to those writing use cases, and a number of authors advocate the use of rules in the composition and structuring of use case descriptions. These rules constrain the user, by only allowing certain grammatical constructions, typically guiding the structure or the style of the description For example, the CREWS research project pioneered Use Case Authoring Guidelines, suggesting that the adoption of such guidelines improved resulting use case descriptions. Replication of CREWS studies appeared to confirm the view that use case descriptions were improved through the application of guideline sets, but also noted that learning such rules presented a significant overhead. Hence, a leaner set of guidelines (the CP rules) was developed.
   This paper describes empirical work to assess the utility of these two sets of writing guidelines (CREWS and CP). In particular, descriptions are assessed against a set of established criteria-a use case quality description checklist, which the authors described in a previous paper.
   Our findings suggest that the leaner set of guidelines performs at least as well in terms of their ability to produce clear and accurate (comprehensible) descriptions. Hence, that a tractable set of rules may prove applicable to the industrial context, which could lead to effective validation of use cases.
C1 Bournemouth Univ, Software Syst Modelling Grp, Poole BH12 5BB, Dorset, England.
   Natl ICT Australia, Empirical Software Engn Grp, Sydney, NSW 1430, Australia.
C3 Bournemouth University; NICTA
RP Phalp, KT (corresponding author), Bournemouth Univ, Software Syst Modelling Grp, Poole House, Fern Barrow, Poole BH12 5BB, Dorset, England.
EM kphalp@bmth.ac.uk; jvincent@bmth.ac.uk; karl.cox@nitca.com.au
RI Vincent, Jonathan/HHY-9994-2022
CR ADOLPH S, 2003, PATTERNS EFFECTIVE U
   Alexander I, 2003, IEEE SOFTWARE, V20, P58, DOI 10.1109/MS.2003.1159030
   Alexander I. F., 2002, Writing Better Requirements
   ANDA B, 2005, EMPIR SOFTW ENG, V10, P85
   ANDA B, 2001, LNCS, V2072, P402, DOI DOI 10.1007/3-540-45337-7.21
   [Anonymous], P PROSIM 03 INT WORK
   [Anonymous], 1992, Object Oriented Software Engineering: A Use Case Driven Approach
   [Anonymous], EXPT SOFTWARE ENG
   BENACHOUR C, 1999, 4 IEEE INT S REQ ENG, P36
   Booch G., 1999, UML USER GUIDE
   Cockburn A., 2001, Writing effective use cases
   Cox K, 2004, J RES PRACT INF TECH, V36, P211
   Cox K., 2000, Empirical Software Engineering, V5, P245, DOI 10.1023/A:1026542700033
   COX K, 2002, THESIS BOURNEMOUTH U
   Cox MichaelT., 2001, Proceedings of the 4th International Multi-Conference on Systemics, Cybernetics and Informatics, V7, P1
   Fenton N., 1996, SOFTWARE METRICS RIG, VSecond
   Graham I., 1998, REQUIREMENTS ENG RAP
   HOFMANN HF, 2001, IEEE SOFTWARE, P58
   Host M., 2000, Empirical Software Engineering, V5, P201, DOI 10.1023/A:1026586415054
   Jackson M., 2001, Problem Frames
   KANYARU J, 2005, 11 INT WORKSH REQ EN
   Kulak D., 2000, USE CASES REQUIREMEN, V1st
   MAIDEN N, 2000, SCEBARIO DRIVEN SYST
   Miller J, 1997, INFORM SOFTWARE TECH, V39, P285, DOI 10.1016/S0950-5849(96)01139-1
   PHALP K, 2001, 7 INT C OBJ OR INF S, P329
   PHALP K, 2002, 6 INT C EMP ASS SOFT
   Phalp KT, 2007, SOFTWARE QUAL J, V15, P69, DOI 10.1007/s11219-006-9006-z
   PHALP KT, 2003, 7 INT C EMP ASS EV S
   Pickard LM, 1998, INFORM SOFTWARE TECH, V40, P811, DOI 10.1016/S0950-5849(98)00101-3
   RATCLIFFE M, 2005, INFORM SOFTWARE TECH, V47
   Robson C., 1993, Real world research, V2nd
   Rolland C, 1998, DATA KNOWL ENG, V25, P125, DOI 10.1016/S0169-023X(97)86223-4
   SOME S, 2006, INFORM SOFTWARE TECH, V48
   Sutcliffe A., 1998, Requirements Engineering, V3, P48, DOI 10.1007/BF02802920
   YING L, 2001, 7 INT C OBJ OR INF S, P37
NR 35
TC 27
Z9 28
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2007
VL 15
IS 4
BP 383
EP 399
DI 10.1007/s11219-007-9023-6
PG 17
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 232EK
UT WOS:000251000900004
DA 2024-07-18
ER

PT J
AU Khoshgoftaar, TM
   Herzberg, A
   Seliya, N
AF Khoshgoftaar, Taghi M.
   Herzberg, Angela
   Seliya, Naeem
TI Resource oriented selection of rule-based classification models: An
   empirical case study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software metrics; rule-based classification model; resource-based
   software development; software quality; modified expected cost of
   misclassification
ID SOFTWARE; METRICS; TREES
AB The amount of resources allocated for software quality improvements is often not enough to achieve the desired software quality. Software quality classification models that yield a risk-based quality estimation of program modules, such as fault-prone (fp) and not fault-prone (nfp), are useful as software quality assurance techniques. Their usefulness is largely dependent on whether enough resources are available for inspecting the fp modules. Since a given development project has its own budget and time limitations, a resource-based software quality improvement seems more appropriate for achieving its quality goals. A classification model should provide quality improvement guidance so as to maximize resource-utilization.
   We present a procedure for building software quality classification models from the limited resources perspective. The essence of the procedure is the use of our recently proposed Modified Expected Cost of Misclassification (MECM) measure for developing resource-oriented software quality classification models. The measure penalizes a model, in terms of costs of misclassifications, if the model predicts more number of fp modules than the number that can be inspected with the allotted resources. Our analysis is presented in the context of our Rule-Based Classification Modeling (RBCM) technique. An empirical case study of a large-scale software system demonstrates the promising results of using the MECM measure to select an appropriate resource-based rule-based classification model.
C1 Florida Atlantic Univ, Boca Raton, FL 33431 USA.
   Univ Michigan, Dearborn, MI 48128 USA.
C3 State University System of Florida; Florida Atlantic University;
   University of Michigan System; University of Michigan
RP Khoshgoftaar, TM (corresponding author), Florida Atlantic Univ, 777 W Glades Rd, Boca Raton, FL 33431 USA.
EM taghi@cse.fau.edu; nseliya@umich.edu
CR [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 2000, Kluwer international series in software engineering
   [Anonymous], 1998, Practical nonparametric statistics
   [Anonymous], J SYST SOFTWARE
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   BRIAND L, 1996, EMPIR SOFTW ENG, V1, P1
   Deng J., 2001, P 7 INT, P190, DOI 10.1109/METRIC.2001.915528
   Ebert C, 1996, SOFTWARE QUAL J, V5, P255, DOI 10.1007/BF00209184
   Fayyad UM, 1996, IEEE EXPERT, V11, P20, DOI 10.1109/64.539013
   Hudepohl JP, 1996, IEEE SOFTWARE, V13, P56, DOI 10.1109/52.536459
   Johnson R.A., 2007, Applied multivariate statistial analysis, Vsixth
   Khoshgoftaar TM, 2005, J SYST SOFTWARE, V76, P111, DOI 10.1016/j.jss.2004.04.027
   Khoshgoftaar TM, 2004, EMPIR SOFTW ENG, V9, P229, DOI 10.1023/B:EMSE.0000027781.18360.9b
   Khoshgoftaar TM, 2002, IEEE T RELIAB, V51, P455, DOI 10.1109/TR.2002.804488
   Khoshgoftaar TM, 2003, EMPIR SOFTW ENG, V8, P325, DOI 10.1023/A:1025316301168
   Khoshgoftaar TM, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P221, DOI 10.1109/ISSRE.2002.1173256
   KHOSHGOFTAAR TM, 2002, TRCSE0249 FLOR ATL U
   KHOSHGOFTAAR TM, 2002, TRCSE0245 FLOR ATL U
   NGUYEN L, 2002, THESIS FLORIDA ATLAN
   Ohlsson Niclas., 1996, P 6 INT C SOFTWARE Q, P1
   Ping Yu, 2002, Proceedings of the Sixth European Conference on Software Maintenance and Reengineering, P99, DOI 10.1109/CSMR.2002.995794
   Pizzi NJ, 2002, IEEE IJCNN, P2405, DOI 10.1109/IJCNN.2002.1007518
   REFORMAT M, 2002, P IEEE INT C FUZZ SY, V2, P1156
   RUNESON P, 2001, LECT NOTES COMPUTER, V2188, P341
   Schneidewind NF, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P402, DOI 10.1109/ISSRE.1997.630888
   Schneidewind NF, 2002, COMPUTER, V35, P77, DOI 10.1109/2.982919
   Schneidewind NF, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P328, DOI 10.1109/METRIC.2001.915540
   Suárez A, 1999, IEEE T PATTERN ANAL, V21, P1297, DOI 10.1109/34.817409
   VOTTA LG, 1995, PROC INT CONF SOFTW, P277, DOI 10.1145/225014.225040
NR 29
TC 2
Z9 4
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2006
VL 14
IS 4
BP 309
EP 338
DI 10.1007/s11219-006-0038-1
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 093JA
UT WOS:000241163400004
DA 2024-07-18
ER

PT J
AU Beimel, D
   Tsoury, A
   Lev, SB
AF Beimel, Dizza
   Tsoury, Arava
   Lev, Shirly Bar
TI Identifying common and persistent errors made by novice analysts when
   modeling business processes using UML activity diagram: utilizing a
   hierarchical error classification
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Business processes modeling; Modeling quality criteria; UML activity
   diagram; Process modeling errors; Requirements engineering education
ID HEALTH-CARE; QUALITY; DESIGN; COMPREHENSION
AB Accurate process modeling is critical to the successful design of information systems. Therefore, learning to design correct, complete, and irredundant process models is an important part of training for systems analysts, yet it is very challenging, especially for novice analysts. To teach high-quality modeling skills, it is essential to identify the common difficulties encountered in designing process models. Motivated by this insight, we formulated two research objectives: (1) identify the errors made by novices during process modeling, and analyze and classify them in light of three quality criteria-completeness, irredundancy, and correctness; (2) identify the most common errors, particularly the most persistent ones, that is, those most resistant to training. To this end, we analyzed 525 models built by 181 students (two or three models per student) during an academic course. We classified the students' modeling errors, based on the principles of the modeling language, and carried out a frequency analysis, wherein we counted the prevalence of each error type. Our analysis produced a four-layer hierarchical classification of errors with 52 elements, including 38 error categories, subcategories, and irreducible types. We also identified the most common and most persistent error categories, both of which pertained mainly to difficulties in abstracting from a given scenario. This hierarchical classification plays an important role in establishing ways to improve the quality of process models designed by systems analysts, especially novices. Moreover, identifying persistent errors and "cracking" them is an essential step in designing a learning methodology that will help novice analysts to recognize such errors and, indeed, avoid them in the first place.
C1 [Beimel, Dizza] Ruppin Acad Ctr, Dept Comp & Informat Sci, IL-40250 Emek Hefer, Israel.
   [Tsoury, Arava; Lev, Shirly Bar] Ruppin Acad Ctr, Dept Engn & Management, IL-40250 Emek Hefer, Israel.
   [Beimel, Dizza; Tsoury, Arava; Lev, Shirly Bar] Ruppin Acad Ctr, Dror Imri Aloni Ctr Hlth Informat, IL-4025000 Emek Hefer, Israel.
C3 Ruppin Academic Center; Ruppin Academic Center; Ruppin Academic Center
RP Beimel, D (corresponding author), Ruppin Acad Ctr, Dept Comp & Informat Sci, IL-40250 Emek Hefer, Israel.; Beimel, D (corresponding author), Ruppin Acad Ctr, Dror Imri Aloni Ctr Hlth Informat, IL-4025000 Emek Hefer, Israel.
EM dizzab@ruppin.ac.il; Aravat@ruppin.ac.il; barlevsh@ruppin.ac.il
CR Anda B., 2001, P 4 INT C UNIFIED MO, P487
   Armstrong D, 1997, SOCIOLOGY, V31, P597, DOI 10.1177/0038038597031003015
   BATRA D, 1992, INT J MAN MACH STUD, V37, P83, DOI 10.1016/0020-7373(92)90092-Y
   Becker J, 2000, LECT NOTES COMPUT SC, V1806, P30
   Beimel D, 2019, REQUIR ENG, V24, P483, DOI 10.1007/s00766-018-0296-z
   Bider I, 2015, LECT NOTES BUS INF P, V209, P239, DOI 10.1007/978-3-319-17957-5_16
   Dahan M, 2014, REQUIR ENG, V19, P27, DOI 10.1007/s00766-012-0155-2
   Figl K, 2013, DECIS SUPPORT SYST, V54, P1104, DOI 10.1016/j.dss.2012.10.037
   Geambasu CV, 2012, PROC INT C ACC, P934
   Genero M, 2011, J DATABASE MANAGE, V22, P46, DOI 10.4018/jdm.2011070103
   Hadar I., 2004, Journal of Object Technolgoy, V1, P143, DOI [10.5381/jot.2004.3.1.a3, DOI 10.5381/JOT.2004.3.1.A3]
   Harrison MI, 2007, J AM MED INFORM ASSN, V14, P542, DOI 10.1197/jamia.M2384
   Helfert M, 2009, BUS PROCESS MANAG J, V15, P937, DOI 10.1108/14637150911003793
   Jun GT, 2009, INT J QUAL HEALTH C, V21, P214, DOI 10.1093/intqhc/mzp016
   Katz A, 2015, PROCEEDINGS OF THE EUROPEAN CONFERENCE ON DATA MINING 2015 AND INTERNATIONAL CONFERENCES ON INTELLIGENT SYSTEMS AND AGENTS 2015 AND THEORY AND PRACTICE IN MODERN COMPUTING 2015, P198
   Ligeza A, 2014, ADV INTELL SYST, V257, P69, DOI 10.1007/978-3-319-03677-9_5
   LINDLAND OI, 1994, IEEE SOFTWARE, V11, P42, DOI 10.1109/52.268955
   Mendling J, 2008, DATA KNOWL ENG, V64, P312, DOI 10.1016/j.datak.2007.06.019
   Mili H, 2010, ACM COMPUT SURV, V43, DOI 10.1145/1824795.1824799
   Moody DL, 2003, INFORM SYST, V28, P619, DOI 10.1016/S0306-4379(02)00043-1
   Peixoto D. C., 2008, 7 S BRAS QUAL SOFTW, P1
   Peleg M, 2000, IEEE T SOFTWARE ENG, V26, P742, DOI 10.1109/32.879812
   Recker J, 2009, COMMUN ASSOC INF SYS, V25, P379
   Recker J, 2012, INFORM SYST, V37, P557, DOI 10.1016/j.is.2011.07.001
   Reijers HA, 2011, DECIS SUPPORT SYST, V51, P339, DOI 10.1016/j.dss.2010.12.013
   Reinhartz-Berger I, 2005, EMPIR SOFTW ENG, V10, P57, DOI 10.1023/B:EMSE.0000048323.40484.e0
   Roy S, 2014, IEEE T SERV COMPUT, V7, P140, DOI 10.1109/TSC.2013.10
   Rozman T., 2008, EUR SPI 2007
   Rumbaugh James, 1999, The unified modeling language reference manual
   Sadowska M, 2015, E-INFORMATICA, V9, P57, DOI 10.5277/e-Inf150104
   Santos EA, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P311, DOI 10.1109/SANER.2018.8330219
   Shoval P., 1994, Journal of Database Management, V5, P28
   Shoval P, 1997, DATA KNOWL ENG, V21, P297, DOI 10.1016/S0169-023X(97)88935-5
   SRINIVASAN A, 1995, MANAGE SCI, V41, P419, DOI 10.1287/mnsc.41.3.419
   Suchenia A, 2021, INT J COMPUT SCI NET, V21, P230, DOI 10.22937/IJCSNS.2021.21.11.32
   van der Aalst WMP, 1999, INFORM SOFTWARE TECH, V41, P639, DOI 10.1016/S0950-5849(99)00016-6
   White SA., 2004, IBM Cooperation, V2, P0
NR 37
TC 0
Z9 0
U1 2
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1149
EP 1178
DI 10.1007/s11219-023-09628-2
EA MAY 2023
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY4P9
UT WOS:000987914300001
DA 2024-07-18
ER

PT J
AU Chen, LZ
   Wu, J
   Yang, HY
   Zhang, K
AF Chen, Lizhe
   Wu, Ji
   Yang, Haiyan
   Zhang, Kui
TI Does PageRank apply to service ranking in microservice regression
   testing?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Microservice; Regression testing; Test case prioritization; PageRank;
   API gateway
ID TEST-CASE PRIORITIZATION; SELECTION
AB Regression testing is required in each development iteration of microservice systems. Test case prioritization, which improves the fault detection rate by optimizing the execution order of test cases, is one of the main techniques to optimize regression testing. Existing test case prioritization techniques mainly rely on artifacts such as codes and system models, which are limited to microservice systems with service autonomy, development method diversity, and large service scale. This paper proposes a test case prioritization approach based on service ranking referred to as TCP-SR. TCP-SR ranks the services based on API gateway logs. The weights of test cases are calculated with the result of service ranking, which could be used to order test cases with single-objective and multi-objective strategies. To evaluate the effectiveness of TCP-SR, the empirical study based on four microservice systems is presented. The results show that the fault detection rate of TCP-SR is almost twice as high as that of the random prioritization technique, and almost the same as the prioritization technique based on WS-BPEL but requires much less prioritization time cost.
C1 [Chen, Lizhe; Wu, Ji; Yang, Haiyan; Zhang, Kui] Beijing Univ Aeronaut & Astronaut, Sch Comp Sci & Engn, Beijing 100191, Peoples R China.
C3 Beihang University
RP Wu, J (corresponding author), Beijing Univ Aeronaut & Astronaut, Sch Comp Sci & Engn, Beijing 100191, Peoples R China.
EM by1506105@buaa.edu.cn; wuji@buaa.edu.cn
RI Yang, Hai/JQI-4956-2023; Han, Yang/JVN-5921-2024
OI WU, JI/0000-0002-5511-5361
CR Abele Sebastian, 2014, 6th International Conference on Agents and Artificial Intelligence (ICAART 2014). Proceedings, P293
   Al-Hajjaji M, 2019, SOFTW SYST MODEL, V18, P499, DOI 10.1007/s10270-016-0569-2
   Azizi M, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1560, DOI 10.1145/3167132.3167299
   Azizi M, 2018, IEEE INT SYMP SOFTW, P245, DOI [10.1109/1SSREW.2018.00014, 10.1109/ISSREW.2018.00014]
   Campos HD, 2017, XXXI BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING (SBES 2017), P34, DOI 10.1145/3131151.3131170
   Canfora Gerardo, 2009, Software Engineering. International Summer Schools ISSSE 2006-2008. Revised Tutorial Lectures, P78, DOI 10.1007/978-3-540-95888-8_4
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   Diefenbach D, 2018, LECT NOTES COMPUT SC, V10843, P145, DOI 10.1007/978-3-319-93417-4_10
   Dong Qiu, 2015, ACM Computing Surveys, V47, DOI 10.1145/2631685
   Fan CY, 2017, 2017 IEEE 6TH INTERNATIONAL CONFERENCE ON AI & MOBILE SERVICES (AIMS), P109, DOI 10.1109/AIMS.2017.23
   Gao CY, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P279, DOI 10.1109/ICSE-SEIP.2019.00040
   Gokce N., 2014, COMPUTER SCI ENG INT, V4, P25, DOI [10.5121/cseij.2014.4102, DOI 10.5121/CSEIJ.2014.4102]
   Horváth F, 2019, SOFTWARE QUAL J, V27, P79, DOI 10.1007/s11219-017-9389-z
   Kaczanowski T, 2013, Practical Unit Testing with JUnit and Mockito. Tomasz Kaczanowski
   Khan TA, 2011, LECT NOTES COMPUT SC, V6603, P341, DOI 10.1007/978-3-642-19811-3_24
   Konsaard P, 2015, 2015 12TH INTERNATIONAL CONFERENCE ON ELECTRICAL ENGINEERING/ELECTRONICS, COMPUTER, TELECOMMUNICATIONS AND INFORMATION TECHNOLOGY (ECTI-CON)
   Korel B, 2005, PROC IEEE INT CONF S, P559
   Korel B, 2008, PROC IEEE INT CONF S, P247, DOI 10.1109/ICSM.2008.4658073
   Larrucea X, 2018, IEEE SOFTWARE, V35, P96, DOI 10.1109/MS.2018.2141030
   Lewis J., 2014, MartinFowler. com
   Li BX, 2012, J SYST SOFTWARE, V85, P1300, DOI 10.1016/j.jss.2012.01.036
   Li ZJ, 2008, IBM SYST J, V47, P457, DOI 10.1147/sj.473.0457
   Lin Chen, 2010, 2010 Fifth International Symposium on Service Oriented System Engineering (SOSE 2010), P173, DOI 10.1109/SOSE.2010.27
   Liu HH, 2007, LECT NOTES COMPUT SC, V4749, P157
   Mahdian A, 2009, J SOFTW MAINT EVOL-R, V21, P253, DOI 10.1002/smr.403
   Mece E. K., 2020, EUROPEAN J ELECT COM, P1, DOI [10.24018/ejece.2020.4.1.128, DOI 10.24018/EJECE.2020.4.1.128]
   Meszaros G., 2007, Xunit test patterns: refactoring test code
   Mirshokraie S, 2015, IEEE T SOFTWARE ENG, V41, P429, DOI 10.1109/TSE.2014.2371458
   Mohd Shafie M. L., 2018, J THEORETICAL APPL I, V96, P4548
   Myunghwan Kim, 2013, Performance Evaluation Review, V41, P93
   Naik A, 2018, INT J DATA SCI ANAL, V6, P297, DOI 10.1007/s41060-017-0089-3
   Newman S., 2015, BUILDING MICROSERVIC
   Ouriques JFS, 2018, SOFTWARE QUAL J, V26, P1451, DOI 10.1007/s11219-017-9398-y
   Pietrantuono R, 2020, J SYST SOFTWARE, V161, DOI 10.1016/j.jss.2019.110462
   Lima JAP, 2020, INFORM SOFTWARE TECH, V121, DOI 10.1016/j.infsof.2020.106268
   Qian ZS, 2010, J COMPUT, V5, P1655, DOI 10.4304/jcp.5.11.1655-1662
   Richardson M., 2002, PAGERANK ADV NEURAL, V14, P673
   Spieker H, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P12, DOI 10.1145/3092703.3092709
   Wang XL, 2019, MOB INF SYST, V2019, DOI 10.1155/2019/9083956
   Wu G, 2007, NUMER LINEAR ALGEBR, V14, P521, DOI 10.1002/nla.531
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Zhang M, 2017, P 26 ACM SIGS INT S, P261, DOI DOI 10.1145/3092703.3092731
   Zhao XB, 2015, P INT COMP SOFTW APP, P542, DOI 10.1109/COMPSAC.2015.154
NR 43
TC 1
Z9 1
U1 2
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2022
VL 30
IS 3
BP 757
EP 779
DI 10.1007/s11219-021-09579-6
EA JAN 2022
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W2CB
UT WOS:000745754900001
DA 2024-07-18
ER

PT J
AU Amit, I
   Feitelson, DG
AF Amit, Idan
   Feitelson, Dror G.
TI Corrective commit probability: a measure of the effort invested in bug
   fixing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Corrective maintenance; Corrective commits; Effort estimate; Process
   metric
ID OPEN SOURCE SOFTWARE; QUALITY; RELIABILITY; METRICS; IMPACT;
   BENCHMARKING; VALIDATION; CYCLES; NUMBER; FAULTS
AB The effort invested in software development should ideally be devoted to the implementation of new features. But some of the effort is invariably also invested in corrective maintenance, that is in fixing bugs. Not much is known about what fraction of software development work is devoted to bug fixing, and what factors affect this fraction. We suggest the Corrective Commit Probability (CCP), which measures the probability that a commit reflects corrective maintenance, as an estimate of the relative effort invested in fixing bugs. We identify corrective commits by applying a linguistic model to the commit messages, achieving an accuracy of 93%, higher than any previously reported model. We compute the CCP of all large active GitHub projects (7,557 projects with 200+ commits in 2019). This leads to the creation of an investment scale, suggesting that the bottom 10% of projects spend less than 6% of their total effort on bug fixing, while the top 10% of projects spend at least 39% of their effort on bug fixing - more than 6 times more. Being a process metric, CCP is conditionally independent of source code metrics, enabling their evaluation and investigation. Analysis of project attributes shows that lower CCP (that is, lower relative investment in bug fixing) is associated with smaller files, lower coupling, use of languages like JavaScript and C# as opposed to PHP and C++, fewer code smells, lower project age, better perceived quality, fewer developers, lower developer churn, better onboarding, and better productivity.
C1 [Amit, Idan; Feitelson, Dror G.] Hebrew Univ Jerusalem, Dept Comp Sci, IL-91904 Jerusalem, Israel.
   [Amit, Idan] Acumen Labs, Tel Aviv, Israel.
C3 Hebrew University of Jerusalem
RP Amit, I (corresponding author), Hebrew Univ Jerusalem, Dept Comp Sci, IL-91904 Jerusalem, Israel.; Amit, I (corresponding author), Acumen Labs, Tel Aviv, Israel.
EM idan.amit@mail.huji.ac.il; feit@cs.huji.ac.il
OI Feitelson, Dror/0000-0002-2733-7709
FU ISRAEL SCIENCE FOUNDATION [832/18]
FX This research was supported by the ISRAEL SCIENCE FOUNDATION (grant No.
   832/18). We thank Amiram Yehudai and Stanislav Levin for providing us
   their data set of labeled commits (Levin & Yehudai, 2017). We thank
   Guilherme Avelino for drawing our attention to the importance of Truck
   Factor Developers Detachment (TFDD) and providing a data set (Avelino et
   al., 2019). Many thanks to the reviewers whose comments were
   instrumental in improving the focus of the paper.
CR Al-Kilidar H, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P122, DOI 10.1109/ISESE.2005.1541821
   Allamams M, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!' 19), P143, DOI 10.1145/3359591.3359735
   Amit I., 2017, U.S. patent application, Patent No. [#US20190164086A1, 20190164086]
   Amit I., 2021, ARXIV210301861CSSE
   Amit I, 2019, 15TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING (PROMISE'19), P12, DOI 10.1145/3345629.3345631
   [Anonymous], 2011, ISO/IEC 25010:2011
   [Anonymous], 1990, Software testing techniques {
   [Anonymous], 2009, Technical report
   [Anonymous], 2017, ARXIV PREPRINT ARXIV
   [Anonymous], 2002, Pair Programming Illuminated
   Antoniol G, 2008, P 2008 C CTR ADV STU, P304
   Argyle M., 1989, HARMFUL IS HAPPINESS
   Avelino G., 2016, ABS160406766 CORR
   Avelino Guilherme, 2019, INT SYMP EMP SOFTWAR, P1, DOI DOI 10.1109/esem.2019.8870181
   Baggen R, 2012, SOFTWARE QUAL J, V20, P287, DOI 10.1007/s11219-011-9144-9
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   Berger ED, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3340571
   Bernardo JH, 2018, IEEE WORK CONF MIN S, P131, DOI 10.1145/3196398.3196421
   Bhattacharya P, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P171, DOI 10.1145/1985793.1985817
   Bird C., 2011, P 19 ACM SIGSOFT S 1, P4, DOI DOI 10.1145/2025113.2025119
   Bird C, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P121, DOI 10.1145/1595696.1595716
   Bird C, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P1, DOI 10.1109/MSR.2009.5069475
   Blum A., 1998, Proceedings of the Eleventh Annual Conference on Computational Learning Theory, P92, DOI 10.1145/279943.279962
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Boehm B. W., 1976, 2nd International Conference on Software Engineering, P592
   BOEHM BW, 1988, IEEE T SOFTWARE ENG, V14, P1462, DOI 10.1109/32.6191
   BOEHM BW, 1984, IEEE T SOFTWARE ENG, V10, P4, DOI 10.1109/TSE.1984.5010193
   Box G. E. P., 1979, Robust. Stat., V1, P201, DOI DOI 10.1016/B978-0-12-438150-6.50018-2
   Brooks Jr, 1975, MYTHICAL MAN MONTH E
   Campbell J.P., 1993, PERSONNEL SELECTION, P35
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Corral L, 2015, 2ND ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS MOBILESOFT 2015, P22, DOI 10.1109/MobileSoft.2015.10
   Crosby P. B., 1979, QUALITY IS FREE ART
   Cunningham W., 1993, OOPS MESSENGER, V4, P29, DOI DOI 10.1145/157710.157715
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   da Costa DA, 2018, EMPIR SOFTW ENG, V23, P835, DOI 10.1007/s10664-017-9548-7
   Dawid A. P., 1979, J ROY STAT SOC C, P28
   Dawson M., 2010, Journal of Information Systems Technology Planning, V3, P49
   DORFMAN R, 1979, REV ECON STAT, V61, P146, DOI 10.2307/1924845
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   EFRON B, 1979, ANN STAT, V7, P1, DOI 10.1214/aos/1176344552
   Fontana FA, 2013, PROC IEEE INT CONF S, P260, DOI 10.1109/ICSM.2013.37
   Fowler Martin, 1997, 11 EUR C JYV FINL
   Gharehyazie M, 2019, EMPIR SOFTW ENG, V24, P1538, DOI 10.1007/s10664-018-9648-z
   Ghayyur, 2018, INT J ADV COMP SCI A, V9
   Gil Y, 2017, EMPIR SOFTW ENG, V22, P2585, DOI 10.1007/s10664-017-9513-5
   Gousios Georgios, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P12, DOI 10.1109/MSR.2012.6224294
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Hackbarth R, 2016, IEEE SOFTWARE, V33, P40, DOI 10.1109/MS.2015.76
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   HASTINGS C, 1947, ANN MATH STAT, V18, P413, DOI 10.1214/aoms/1177730388
   Hattori LP, 2008, 2008 23RD IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOPS, PROCEEDINGS, P147
   Hawkins DM, 2004, J CHEM INF COMP SCI, V44, P1, DOI 10.1021/ci0342472
   Herbold S., 2020, ARXIV201106244
   Herzig K, 2013, IEEE WORK CONF MIN S, P121, DOI 10.1109/MSR.2013.6624018
   Herzig K, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P392, DOI 10.1109/ICSE.2013.6606585
   Hindle A, 2009, INT C PROGRAM COMPRE, P30, DOI 10.1109/ICPC.2009.5090025
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   International Organization for Standardization, 2001, 912612001 ISOIEC
   Jiang Z., 2007, INT J COMPUT INF SCI, V1, P72
   Jones C., 2006, Crosstalk - The Journal of Defense Software Engineering, V19, P4
   Jones C., 1991, APPL SOFTWARE MEASUR
   Jones C., 2015, Software Quality Professional, V18, P23
   Jones C., 2012, Software Quality in 2012: a Survey of the State of the Art
   Kalliamvakou E, 2016, EMPIR SOFTW ENG, V21, P2035, DOI 10.1007/s10664-015-9393-5
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   KEMERER CF, 1993, COMMUN ACM, V36, P85, DOI 10.1145/151220.151230
   KEMERER CF, 1992, IEEE T SOFTWARE ENG, V18, P1011, DOI 10.1109/32.177370
   Kempthorne O, 1919, T ROY SOC EDINBURGH, V52, P399, DOI [DOI 10.1017/S0080456800012163, 10.1017/S0080456800012163]
   Khomh F., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P179, DOI 10.1109/MSR.2012.6224279
   Khomh F, 2009, WORK CONF REVERSE EN, P75, DOI 10.1109/WCRE.2009.28
   Kim S, 2006, Proceedings of the 2006 international workshop on Mining software repositories, P173
   Kim S, 2007, PROC INT CONF SOFTW, P489
   Kochhar PS, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P563, DOI 10.1109/SANER.2016.112
   Krawczyk B, 2016, PROG ARTIF INTELL, V5, P221, DOI 10.1007/s13748-016-0094-0
   Kruchten P, 2012, IEEE SOFTWARE, V29, P18, DOI 10.1109/MS.2012.167
   LaToza T. D., 2006, 28th International Conference on Software Engineering Proceedings, P492, DOI 10.1145/1134285.1134355
   Lehman MM, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P20, DOI 10.1109/METRIC.1997.637156
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Levin S, 2017, PROC IEEE INT CONF S, P35, DOI 10.1109/ICSME.2017.9
   Levin Stanislav, 2017, P 13 INT C PREDICTIV, P97
   Lewis D.D, 1998, EUR C MACH LEARN, P4
   LIENTZ BP, 1978, COMMUN ACM, V21, P466, DOI 10.1145/359511.359522
   LIENTZ BP, 1983, COMPUT SURV, V15, P271, DOI 10.1145/356914.356919
   LIPOW M, 1982, IEEE T SOFTWARE ENG, V8, P437, DOI 10.1109/TSE.1982.235579
   liwerski J, 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [10.1145/1082983.1083147, DOI 10.1145/1083142.1083147, DOI 10.1145/1082983.1083147]
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Madrid, 2006, DISCRIMINATING DEV A
   Maxwell KD, 1996, IEEE T SOFTWARE ENG, V22, P706, DOI 10.1109/32.544349
   Maxwell KD, 2000, IEEE SOFTWARE, V17, P80, DOI 10.1109/52.820015
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mockus A, 2020, IEEE WORK CONF MIN S, P513, DOI 10.1145/3379597.3387499
   Molnar AJ, 2020, COMM COM INF SC, V1172, P163, DOI 10.1007/978-3-030-40223-5_8
   Morasca S., 2011, 25 ANN INT COMPUTER, P317
   Moser R, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P309
   Munaiah N, 2017, EMPIR SOFTW ENG, V22, P3219, DOI 10.1007/s10664-017-9512-6
   Murphy-Hill E, 2021, IEEE T SOFTWARE ENG, V47, P582, DOI 10.1109/TSE.2019.2900308
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Nanz S, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P778, DOI 10.1109/ICSE.2015.90
   Norick B., 2010, P 2010 ACM IEEE INT
   Oak R, 2019, P 12 ACM WORKSHOP AR, P37
   Oisen R.P., 1971, Project Management Quarterly, Project Management Institute (PMI), V2, P12
   Oliveira E, 2020, EMPIR SOFTW ENG, V25, P2519, DOI 10.1007/s10664-020-09820-z
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Potdar A, 2014, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2014.31
   Prechelt L, 2000, COMPUTER, V33, P23, DOI 10.1109/2.876288
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Rahman F, 2011, Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering, ESEC/FSE '11, P322, DOI DOI 10.1145/2025113
   Rahman F, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P432, DOI 10.1109/ICSE.2013.6606589
   Rantala L, 2020, EUROMICRO CONF PROC, P385, DOI 10.1109/SEAA51224.2020.00069
   Ratner A, 2016, ADV NEUR IN, V29
   Ray B, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P155, DOI 10.1145/2635868.2635922
   Raymond E. S., 1998, First Monday, V3
   Reddivari S, 2019, 2019 IEEE 20TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION FOR DATA SCIENCE (IRI 2019), P115, DOI 10.1109/IRI.2019.00030
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Romano S, 2020, LECT NOTES COMPUT SC, V12562, P347, DOI 10.1007/978-3-030-64148-1_22
   Rosenberg J, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P137, DOI 10.1109/METRIC.1997.637174
   SACKMAN H, 1968, COMMUN ACM, V11, P3, DOI 10.1145/362851.362858
   Schach SR, 2003, EMPIR SOFTW ENG, V8, P351, DOI 10.1023/A:1025368318006
   Schneidewind NF, 2002, COMPUTER, V35, P77, DOI 10.1109/2.982919
   SHEPPERD M, 1988, SOFTWARE ENG J, V3, P30, DOI 10.1049/sej.1988.0003
   Shihab E., 2012, P ACM SIGSOFT 20 INT, P1
   Shrikanth NC, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP), P182, DOI 10.1145/3377813.3381367
   Shrikanth N.C, 2020, ARXIV200605060
   Spinellis, 2006, SOFTWARE QUALITY OPE
   Stamelos I, 2002, INFORM SYST J, V12, P43, DOI 10.1046/j.1365-2575.2002.00117.x
   Swanson E. B., 1976, 2nd International Conference on Software Engineering, P492
   Taba SES, 2013, PROC IEEE INT CONF S, P270, DOI 10.1109/ICSM.2013.38
   Tom E, 2013, J SYST SOFTWARE, V86, P1498, DOI 10.1016/j.jss.2012.12.052
   van Emden E, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P97, DOI 10.1109/WCRE.2002.1173068
   Van Hulse Jason, 2007, P 24 INT C MACH LEAR, P935, DOI DOI 10.1145/1273496.1273614
   Vasilescu B, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P805, DOI 10.1145/2786805.2786850
   Walkinshaw N, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3239244
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   Wood A, 1996, COMPUTER, V29, P69, DOI 10.1109/2.544240
   Wright T A, 2000, J Occup Health Psychol, V5, P84, DOI 10.1037/1076-8998.5.1.84
   YAMADA S, 1985, IEEE T SOFTWARE ENG, V11, P1431, DOI 10.1109/TSE.1985.232179
   Yamashita A, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P306, DOI 10.1109/ICSM.2012.6405287
   Zaidman A, 2011, EMPIR SOFTW ENG, V16, P325, DOI 10.1007/s10664-010-9143-7
   Zimmermann T, 2003, SIXTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P73, DOI 10.1109/IWPSE.2003.1231213
NR 143
TC 5
Z9 5
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2021
VL 29
IS 4
BP 817
EP 861
DI 10.1007/s11219-021-09564-z
EA AUG 2021
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA XE8XW
UT WOS:000681532300001
DA 2024-07-18
ER

PT J
AU Pira, E
AF Pira, Einollah
TI Using knowledge discovery to propose a two-phase model checking for
   safety analysis of graph transformations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model checking; Markov chain; Beam-search algorithm; Graph
   transformation system; State space explosion
AB Safety is one of the most important features of modern software systems, especially safety-critical systems such as nuclear power plants, which can be checked exactly by model checking. Model checking is a formal verification technique that analyzes system properties through exploring all reachable states (state space) of a model of a system. The problem of the technique is that it confronts the state space explosion in large and complex systems due to exponential memory usage. Recent researches show that a partial and intelligent exploration of the state space can be a suitable solution to overcome this problem. In this paper, we propose a two-phase model checking for safety analysis of systems specified formally through graph transformations. In the first phase, the beam-search algorithm explores the state space to a specific number of states. In case of failure of the phase, the second phase starts: in systems specified through graph transformations, the rule applied on the previous state can determine the rule that can perform on the next state. In other words, the rule on current state depends on only the rule applied to previous state, not the one on earlier states. Hence, a Markov chain (MC) is estimated to capture dependencies between the sequence of applied rules in the state space explored by the beam-search algorithm. The MC is then employed to explore the remainder of the state space intelligently. To evaluate the effectiveness of the two-phase model checking, we implement it in GROOVE, an open source toolset for designing and model checking graph transformation systems. Experimental results show that the two-phase model checking has the high speed and accuracy in comparison with the existing meta-heuristic and evolutionary techniques.
C1 [Pira, Einollah] Azarbaijan Shahid Madani Univ, Fac Informat Technol & Comp Engn, Tabriz 5375171379, Iran.
C3 Azarbaijan Shahid Madani University
RP Pira, E (corresponding author), Azarbaijan Shahid Madani Univ, Fac Informat Technol & Comp Engn, Tabriz 5375171379, Iran.
EM pira@azaruniv.ac.ir
OI Pira, Einollah/0000-0001-9010-6113
CR Alba E., 2008, P 10 ANN C GEN EV CO, P1735
   ALBA E, 2007, P GEN EV COMP C GECC, P1066
   Alba Enrique., 1996, Parallel Problem Solving from NatureaATPPSN IV, P869
   [Anonymous], 1993, P SIGSOFT 93 FDN SOF
   [Anonymous], 1997, Handbook of Graph Grammars and Computing by Graph Transformation
   [Anonymous], 2005, THESIS
   [Anonymous], 2014, INT J U AND E SERVIC, DOI DOI 10.14257/IJUNESST.2014.7.1.18
   [Anonymous], 2005, DYNAMIC META MODELIN
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   BELLOVIN SM, 1994, IEEE COMMUN MAG, V32, P50, DOI 10.1109/35.312843
   Bouali M, 2012, RELIAB ENG SYST SAFE, V99, P1, DOI 10.1016/j.ress.2011.10.003
   Chen Hao., 2004, NDSS, P171
   Clarke E., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P419
   Dajani-Brown S, 2003, LECT NOTES COMPUT SC, V2648, P34
   Francesca G, 2011, P INT COMP SOFTW APP, P108, DOI 10.1109/COMPSAC.2011.22
   Godefroid P., 1992, CAV, V663, P178
   Groce A., 2004, International Journal on Software Tools for Technology Transfer, V6, P260, DOI 10.1007/s10009-003-0130-9
   Groote J. F., 1996, Algebraic Methodology and Software Technology. 5th International Conference, AMAST '96. Proceedings, P536, DOI 10.1007/BFb0014338
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Holzmann G. J., 1987, Protocol Specification, Testing, and Verification, VII. Proceedings of the IFIP WG 6.1 Seventh International Conference, P339
   Jha, 1997, MODEL CHECKING SECUR
   Kastenberg H, 2006, LECT NOTES COMPUT SC, V3925, P299
   Koller D., 2009, Probabilistic graphical models: principles and techniques
   Leue, 2001, PROTOCOL VERIFICATIO
   Lluch-Lafuente, 2003, SYMMETRY REDUCTION H
   Lluch-Lafuente A, 2002, LECT NOTES COMPUT SC, V2318, P112
   Maeoka J, 2016, STUD COMPUT INTELL, V614, P75, DOI 10.1007/978-3-319-23467-0_6
   Nassima Aleb, 2013, International Journal of Computer Aided Engineering and Technology, V5, P20
   Pira E, 2019, RELIAB ENG SYST SAFE, V191, DOI 10.1016/j.ress.2019.106577
   Pira E, 2018, INFORM SOFTWARE TECH, V97, P110, DOI 10.1016/j.infsof.2018.01.004
   Pira E, 2017, J SYST SOFTWARE, V131, P181, DOI 10.1016/j.jss.2017.05.128
   Pira E, 2016, APPL SOFT COMPUT, V49, P1185, DOI 10.1016/j.asoc.2016.06.039
   Rafe V, 2015, APPL SOFT COMPUT, V33, P136, DOI 10.1016/j.asoc.2015.04.032
   Rafe V, 2013, J VISUAL LANG COMPUT, V24, P136, DOI 10.1016/j.jvlc.2012.12.002
   Runge O., 2013, ELECT COMMUNICATIONS, V58
   Sharvia S, 2015, RELIAB ENG SYST SAFE, V135, P64, DOI 10.1016/j.ress.2014.10.025
   Staunton Jan, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P212, DOI 10.1109/ICSTW.2010.24
   Staunton J, 2011, GECCO-2011: PROCEEDINGS OF THE 13TH ANNUAL GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1923
   Staunton J, 2011, LECT NOTES COMPUT SC, V6956, P97, DOI 10.1007/978-3-642-23716-4_12
   Wu DH, 2018, RELIAB ENG SYST SAFE, V176, P62, DOI 10.1016/j.ress.2018.03.035
   Yang XS, 2010, STUD COMPUT INTELL, V284, P65, DOI 10.1007/978-3-642-12538-6_6
   Yousefian R, 2016, J INTELL FUZZY SYST, V31, P137, DOI 10.3233/IFS-162127
   Yousefian R, 2014, APPL SOFT COMPUT, V24, P169, DOI 10.1016/j.asoc.2014.06.055
NR 44
TC 3
Z9 3
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 37
EP 64
DI 10.1007/s11219-020-09542-x
EA FEB 2021
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000620102300001
DA 2024-07-18
ER

PT J
AU Leotta, M
   Cerioli, M
   Olianas, D
   Ricca, F
AF Leotta, Maurizio
   Cerioli, Maura
   Olianas, Dario
   Ricca, Filippo
TI Two experiments for evaluating the impact of Hamcrest and AssertJ on
   assertion development
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Hamcrest matchers; AssertJ methods; Controlled experiment;
   Evidence-based Software Engineering; Tester productivity; Assertion
   development
AB Test automation enables continuous testing, a cornerstone of agile methods, and DevOps. Assertions play a fundamental role in test automation, and recently competing assertion libraries for unit testing frameworks, such as, for example, JUnit or TestNG, emerged. Thus, it is imperative to gauge assertion libraries in terms of developer/tester productivity, allowing SQA managers and software testers to select the best. The goal of this work is comparing two assertion libraries having a different approach (matchers vs. fluent assertions) w.r.t. two dependent variables: correctness of developed assertions and time to develop them. We conducted two controlled experiments with Bachelor students in Computer Science and Master students in Computer Engineering. AssertJ (fluent assertions approach) is compared with Hamcrest (matchers), in a test development scenario with the Java language where 672 assertions were developed by 48 students overall. The results show that (a) adopting AssertJ improves the tester's productivity significantly during the development of assertions only for Bachelor students, and (b) time of developing assertions is similar using AssertJ or Hamcrest in both the categories of participants. Testers and SQA managers selecting assertion libraries for their organizations should consider as first choice AssertJ in case of inexperienced developers/testers since our study shows that it increases the productivity of Bachelor students more than Hamcrest.
C1 [Leotta, Maurizio; Cerioli, Maura; Olianas, Dario; Ricca, Filippo] Univ Genoa, Dipartimento Informat Bioingn Robot & Ingn Sistem, Genoa, Italy.
C3 University of Genoa
RP Leotta, M (corresponding author), Univ Genoa, Dipartimento Informat Bioingn Robot & Ingn Sistem, Genoa, Italy.
EM maurizio.leotta@unige.it; maura.cerioli@unige.it;
   dario.olianas@dibris.unige.it; filippo.ricca@unige.it
RI Ricca, Filippo/ABB-3276-2020; Cerioli, Maura/AAH-9920-2021; Leotta,
   Maurizio/I-8145-2014
OI Leotta, Maurizio/0000-0001-5267-0602; CERIOLI, MAURA/0000-0002-8781-8782
CR [Anonymous], 2000, QUESTIONNAIRE DESIGN
   Ardito L, 2019, PROCEEDINGS OF EASE 2019 - EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING, P13, DOI 10.1145/3319008.3319022
   Basili V.R., 1994, Encyclopedia of Software Engineering, P528532
   Bavota G, 2015, EMPIR SOFTW ENG, V20, P1052, DOI 10.1007/s10664-014-9313-0
   Booth DJ, 2011, CORAL REEFS, V30, P1071, DOI 10.1007/s00338-011-0815-6
   Bowman M, 2007, PROC IEEE INT CONF S, P4
   Caprile C., 1999, Sixth Working Conference on Reverse Engineering (Cat. No.PR00303), P112, DOI 10.1109/WCRE.1999.806952
   Ceccato M, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962611
   Ceccato M, 2015, ACM T SOFTW ENG METH, V25, DOI 10.1145/2768829
   Cerioli M, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P1586, DOI 10.1145/3341105.3373961
   Contan A, 2018, IEEE INT CONF AUTO, DOI 10.1109/AQTR.2018.8402699
   Deursen A., 2001, TECH REP
   Dobslaw F., 2019, ESTIMATING RETURN IN
   Garousi V, 2016, INFORM SOFTWARE TECH, V80, P195, DOI 10.1016/j.infsof.2016.09.002
   Gonzalez D, 2018, PROCEEDINGS OF THE 4TH ACM SIGSOFT INTERNATIONAL WORKSHOP ON NLP FOR SOFTWARE ENGINEERING (NL4SE '18), P14, DOI 10.1145/3283812.3283819
   Hamill P., 2005, UNIT TEST FRAMEWORKS
   Harrold MaryJean., 2000, ICSE 00 P C FUTURE S, P61
   Juristo N, 2004, EMPIR SOFTW ENG, V9, P7, DOI 10.1023/B:EMSE.0000013513.48963.1b
   Kalliamvakou E., 2014, P 11 WORKING C MININ, P92, DOI DOI 10.1145/2597073.2597074
   Kamimura M, 2013, CONF PROC INT SYMP C, P215, DOI 10.1109/ICPC.2013.6613851
   Karahasanovi A, 2005, EMPIR SOFTW ENG, V10, P113, DOI 10.1007/s10664-004-6189-4
   Kitchenham BA, 2004, PROC INT CONF SOFTW, P273
   Kitchenham B, 2008, EMPIR SOFTW ENG, V13, P97, DOI 10.1007/s10664-007-9053-5
   Kumar D, 2016, PROCEDIA COMPUT SCI, V79, P8, DOI 10.1016/j.procs.2016.03.003
   Leotta M., 2019, QUALITY INFORM COMMU, P161, DOI [10.1007/978-3-030-29238-6_12, DOI 10.1007/978-3-030-29238-6_12]
   Leotta M., 2020, P 13 IEEE INT C SOFT
   Leotta M, 2018, 2018 11TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P184, DOI 10.1109/QUATIC.2018.00036
   Leotta M, 2016, ADV COMPUT, V101, P193, DOI 10.1016/bs.adcom.2015.11.007
   Motulsky H.J., 2010, INTUITIVE BIOSTATIST, V2nd
   NELDER JA, 1972, J R STAT SOC SER A-G, V135, P370, DOI 10.2307/2344614
   Ramler R., 2006, P 2006 INT WORKSHOP, P85, DOI DOI 10.1145/1138929.1138946
   Shull F, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P7, DOI 10.1109/ISESE.2002.1166920
   Thummalapenta S, 2011, LECT NOTES COMPUT SC, V6603, P294, DOI 10.1007/978-3-642-19811-3_21
   Vendome C, 2017, EMPIR SOFTW ENG, V22, P1537, DOI 10.1007/s10664-016-9438-4
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zhang YC, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P214, DOI 10.1145/2786805.2786858
NR 36
TC 7
Z9 7
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1113
EP 1145
DI 10.1007/s11219-020-09507-0
EA JUN 2020
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000537689700002
DA 2024-07-18
ER

PT J
AU Moreno, V
   Génova, G
   Parra, E
   Fraga, A
AF Moreno, Valentin
   Genova, Gonzalo
   Parra, Eugenio
   Fraga, Anabel
TI Application of machine learning techniques to the flexible assessment
   and improvement of requirements quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Requirements quality; Machine learning; Automatic classification;
   Automatic improvement; Experts' judgment; Flexible assessment
ID SOFTWARE; CLASSIFICATION; FRAMEWORK
AB It is already common to compute quantitative metrics of requirements to assess their quality. However, the risk is to build assessment methods and tools that are both arbitrary and rigid in the parameterization and combination of metrics. Specifically, we show that a linear combination of metrics is insufficient to adequately compute a global measure of quality. In this work, we propose to develop a flexible method to assess and improve the quality of requirements that can be adapted to different contexts, projects, organizations, and quality standards, with a high degree of automation. The domain experts contribute with an initial set of requirements that they have classified according to their quality, and we extract their quality metrics. We then use machine learning techniques to emulate the implicit expert's quality function. We provide also a procedure to suggest improvements in bad requirements. We compare the obtained rule-based classifiers with different machine learning algorithms, obtaining measurements of effectiveness around 85%. We show as well the appearance of the generated rules and how to interpret them. The method is tailorable to different contexts, different styles to write requirements, and different demands in quality. The whole process of inferring and applying the quality rules adapted to each organization is highly automated.
C1 [Moreno, Valentin; Genova, Gonzalo; Parra, Eugenio; Fraga, Anabel] Univ Carlos III Madrid, Knowledge Reuse Grp, Dept Informat, Avda Univ 30, Madrid 28911, Spain.
C3 Universidad Carlos III de Madrid
RP Génova, G (corresponding author), Univ Carlos III Madrid, Knowledge Reuse Grp, Dept Informat, Avda Univ 30, Madrid 28911, Spain.
EM vmpelayo@inf.ue3m.es; ggenova@inf.ue3m.es; eparra@kr.inf.ue3m.es;
   afraga@inf.ue3m.es
RI Génova, Gonzalo/ABF-4284-2021
OI FRAGA, ANABEL/0000-0001-5837-920X; MORENO, VALENTIN/0000-0002-8731-7443;
   Genova, Gonzalo/0000-0003-0299-286X
FU CRYSTAL project-Critical System Engineering Acceleration (European
   Union's Seventh Framework Program FP7/2007-2013, ARTEMIS Joint
   Undertaking) [332830]; AMASS project-Architecture-driven, Multi-concern
   and Seamless Assurance and Certification of Cyber-Physical Systems
   (H2020-ECSEL) [692474]; AMASS project-Architecture-driven, Multi-concern
   and Seamless Assurance and Certification of Cyber-Physical Systems
   (Spain's MINECO) [PCIN-2015-262]
FX This research has received funding from the CRYSTAL project-Critical
   System Engineering Acceleration (European Union's Seventh Framework
   Program FP7/2007-2013, ARTEMIS Joint Undertaking grant agreement no
   332830); and from the AMASS project-Architecture-driven, Multi-concern
   and Seamless Assurance and Certification of Cyber-Physical Systems
   (H2020-ECSEL grant agreement no 692474; Spain's MINECO ref.
   PCIN-2015-262).
CR Aceituna D, 2014, INFORM SOFTWARE TECH, V56, P321, DOI 10.1016/j.infsof.2013.11.004
   Alexander I. F., 2002, Writing Better Requirements
   Ali R, 2013, INFORM SOFTWARE TECH, V55, P35, DOI 10.1016/j.infsof.2012.06.013
   [Anonymous], 250302007 ISOIEC
   [Anonymous], C SYST ENG RES LOS A
   [Anonymous], 2011, P 2 INT C COMPLEX SY
   [Anonymous], 7 ICB U DUISB ESS
   [Anonymous], 8301998 IEEE
   [Anonymous], P 12 INT WORK C REQ
   [Anonymous], P AIAA SPAC 2001 C E
   [Anonymous], 2000, Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations
   Baegh J, 2008, IEEE SOFTWARE, V25, P57, DOI 10.1109/MS.2008.30
   Belsis P, 2014, REQUIR ENG, V19, P213, DOI 10.1007/s00766-013-0172-9
   Bishop Christopher M, 2006, PATTERN RECOGN, V128, P1
   Breiman L, 2001, MACH LEARN, V45, P5, DOI 10.1023/A:1010933404324
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Bucchiarone A, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P390, DOI 10.1109/RE.2005.53
   CENDROWSKA J, 1987, INT J MAN MACH STUD, V27, P349, DOI 10.1016/S0020-7373(87)80003-2
   Chale-Gongora H.G., 2017, P 27 ANN INCOSE INT, P1070
   Chantree F.J., 2006, THESIS
   Clark P., 1989, Machine Learning, V3, P261, DOI 10.1007/BF00116835
   Cleland-Huang J., 2006, P 14 IEEE INT REQUIR, P36
   Cleland-Huang J, 2007, REQUIR ENG, V12, P103, DOI 10.1007/s00766-007-0045-1
   de Sousa T.C., 2010, ACM SIGSOFT SOFTW EN, V35, P1, DOI [http://dx.doi.org/10.1145/1734103.1734114, DOI 10.1145/1734103.1734114]
   Dick J., 2017, INT COUNC SYST ENG I
   Dietterich TG, 2000, MACH LEARN, V40, P139, DOI 10.1023/A:1007607513941
   Dietterich TG, 1997, AI MAG, V18, P97
   Dollmann M., 2016, P 2016 C EMP METH NA, P1807
   Eito-Brun R, 2017, REQUIR ENG, V22, P527, DOI 10.1007/s00766-016-0256-4
   European Space Agency, 1995, PSS0503 ESA
   Fabbrini F, 2002, 26TH ANNUAL NASA GODDARD SOFTWARE ENGINEERING WORKSHOP, PROCEEDINGS, P97, DOI 10.1109/SEW.2001.992662
   Frank E., 1998, Machine Learning. Proceedings of the Fifteenth International Conference (ICML'98), P144
   Gallego E., 2016, P 7 INT C COMPL SYST, P187
   Genova G., 2012, RES METHODOLOGIES IN, P106
   Génova G, 2017, SCI ENG ETHICS, V23, P1791, DOI 10.1007/s11948-016-9852-4
   Génova G, 2013, REQUIR ENG, V18, P25, DOI 10.1007/s00766-011-0134-z
   Ghaisas S, 2013, IEEE-ACM INT WKSP CO, P37, DOI 10.1109/CESI.2013.6618468
   Gregory SC, 2017, REQUIR ENG, V22, P413, DOI 10.1007/s00766-017-0269-7
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P833, DOI 10.1016/S0950-5849(01)00189-6
   Harman M, 2010, LECT NOTES COMPUT SC, V6013, P1, DOI 10.1007/978-3-642-12029-9_1
   Heck P., 2018, SOFTWARE QUALITY J
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Hong J., 1986, 855 ISG U ILL
   Hooks I., 1993, P 3 NCOSE INT S, V2, P1, DOI [http://dx.doi.org/10.1002/j.2334-5837.1994.tb01834.X, DOI 10.1002/J.2334-5837.1994.TB01834.X]
   Huang LG, 2015, AUTOMAT SOFTW ENG, V22, P3, DOI 10.1007/s10515-014-0155-1
   Hussain I, 2008, LECT NOTES COMPUT SC, V5039, P287
   Hussain I, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P209
   IEEE Computer Society, 2014, SWEBOK GUID SOFTW EN
   International Council on Systems Engineering (INCOSE) Requirements Working Group, 2012, GUIDE WRIT REQ
   James L, 1999, P 9 INCOSE INT S BRI, P1427
   Jani HM, 2012, 2012 6TH INTERNATIONAL CONFERENCE ON NEW TRENDS IN INFORMATION SCIENCE, SERVICE SCIENCE AND DATA MINING (ISSDM2012), P152
   Kiyavitskaya N, 2008, REQUIR ENG, V13, P207, DOI 10.1007/s00766-008-0063-7
   Ko Y, 2007, INFORM SOFTWARE TECH, V49, P1128, DOI 10.1016/j.infsof.2006.11.007
   Kohavi R., 1995, STUDY CROSS VALIDATI, DOI DOI 10.1067/MOD.2000.109031
   Loucopoulos P., 1985, SYSTEMS REQ ENG
   Lucassen G, 2016, REQUIR ENG, V21, P383, DOI 10.1007/s00766-016-0250-x
   Magee S, 1997, GUIDE SOFTWARE ENG S
   Major J. A., 1995, Journal of Intelligent Information Systems: Integrating Artificial Intelligence and Database Technologies, V4, P39, DOI 10.1007/BF00962821
   Marsick V., 1999, INFORMAL LEARNING JO
   Merton R.K., 1968, SOCIAL THEORY SOCIAL, P39
   Mich L, 2004, REQUIR ENG, V9, P40, DOI 10.1007/s00766-003-0179-8
   Moreno V., 2016, METRICS OBTAINED RQA
   Otero Carlos E., 2010, Asia Modelling Symposium. Proceedings 4th Asia International Conference on Mathematical Modelling and Computer Simulation (AMS 2010), P187, DOI 10.1109/AMS.2010.48
   Ott Daniel, 2013, Requirements Engineering: Foundation for Software Quality. 19th International Working Conference, REFSQ 2013. Proceedings, P50, DOI 10.1007/978-3-642-37422-7_4
   Parra E, 2015, INFORM SOFTWARE TECH, V67, P180, DOI 10.1016/j.infsof.2015.07.006
   Popescu Daniel, 2007, Innovations for Requirements Analysis. From Stakeholders' Needs to Formal Designs.14th Monterey Workshop 2007. Revised Selected Papers, P103
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Quinlan J.R., 1993, C4 5 PROGRAMS MACHIN
   Rashwan A, 2015, THESIS
   Robledano-Arillo J, 2016, REV ESP DOC CIENT, V39, DOI 10.3989/redc.2016.2.1249
   Russell S., 2009, Artificial intelligence
   Sardinha A, 2013, AUTOMAT SOFTW ENG, V20, P111, DOI 10.1007/s10515-012-0106-7
   SCHAPIRE RE, 1990, MACH LEARN, V5, P197, DOI 10.1023/A:1022648800760
   Siahaan D, 2011, IPTEK J TECHNOLOGY S, V22, P138, DOI DOI 10.12962/J20882033.V23I4.99
   Standish Group, 2015, CHAOS REP
   Terzakis J, 2016, INT REQUIR ENG CONF, P323, DOI 10.1109/RE.2016.9
   Thakurta R, 2013, SOFTWARE QUAL J, V21, P573, DOI 10.1007/s11219-012-9188-5
   The Reuse Company, 2016, RQA REQ QUAL AN
   Thitisathienkul P, 2015, 2015 SECOND INTERNATIONAL CONFERENCE ON TRUSTWORTHY SYSTEMS AND THEIR APPLICATIONS, P43, DOI 10.1109/TSA.2015.19
   Turk W., 2006, IET Engineering Management Journal, V16, P20
   Wang Y., 2013, SPRINGER LECT NOTES, V7934, P25
   WEISS S.M., 1998, PREDICTIVE DATA MINI
   Wieringa R, 2015, SCI COMPUT PROGRAM, V101, P136, DOI 10.1016/j.scico.2014.11.013
   Wieringa Roel J., 2014, Design science methodology for information systems and software engineering
   Wilson WM, 1997, PROC INT CONF SOFTW, P161, DOI 10.1145/253228.253258
   WOLPERT DH, 1992, NEURAL NETWORKS, V5, P241, DOI 10.1016/S0893-6080(05)80023-1
   Zhang YY, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1129
NR 87
TC 5
Z9 5
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1645
EP 1674
DI 10.1007/s11219-020-09511-4
EA APR 2020
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000529321800002
DA 2024-07-18
ER

PT J
AU Alégroth, E
   Gorschek, T
   Petersen, K
   Mattsson, M
AF Alegroth, Emil
   Gorschek, Tony
   Petersen, Kai
   Mattsson, Michael
TI Characteristics that affect preference of decision models for asset
   selection: an industrial questionnaire survey
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Decision models; Characteristics; Industrial study; Survey; Model
   comparison
ID KEY CONCEPTS; IN-HOUSE; SOFTWARE; COTS; ORIGINS; OSS
AB Modern software development relies on a combination of development and re-use of technical asset, e.g., software components, libraries, and APIs. In the past, re-use was mostly conducted with internal assets but today external; open source, customer off-the-shelf (COTS), and assets developed through outsourcing are also common. This access to more asset alternatives presents new challenges regarding what assets to optimally chose and how to make this decision. To support decision-makers, decision theory has been used to develop decision models for asset selection. However, very little industrial data has been presented in literature about the usefulness, or even perceived usefulness, of these models. Additionally, only limited information has been presented about what model characteristics determine practitioner preference toward one model over another. The objective of this work is to evaluate what characteristics of decision models for asset selection determine industrial practitioner preference of a model when given the choice of a decision model of high precision or a model with high speed. An industrial questionnaire survey is performed where a total of 33 practitioners, of varying roles, from 18 companies are tasked to compare two decision models for asset selection. Textual analysis and formal and descriptive statistics are then applied on the survey responses to answer the study's research questions. The study shows that the practitioners had clear preference toward the decision model that emphasized speed over the one that emphasized decision precision. This conclusion was determined to be because one of the models was perceived faster, had lower complexity, was more flexible in use for different decisions, and was more agile on how it could be used in operation, its emphasis on people, its emphasis on "good enough" precision and ability to fail fast if a decision was a failure. Hence, we found seven characteristics that the practitioners considered important for their acceptance of the model. Industrial practitioner preference, which relates to acceptance, of decision models for asset selection is dependent on multiple characteristics that must be considered when developing a model for different types of decisions such as operational day-to-day decisions as well as more critical tactical or strategic decisions. The main contribution of this work are the seven identified characteristics that can serve as industrial requirements for future research on decision models for asset selection.
C1 [Alegroth, Emil; Gorschek, Tony; Petersen, Kai; Mattsson, Michael] Blekinge Inst Technol, SE-37179 Karlskrona, Sweden.
C3 Blekinge Institute Technology
RP Alégroth, E (corresponding author), Blekinge Inst Technol, SE-37179 Karlskrona, Sweden.
EM Emil.Alegroth@Bth.se; Tony.Gorschek@Bth.se; Kai.Petersen@Bth.se;
   Michael.Mattsson@Bth.se
OI Petersen, Kai/0000-0002-1532-8223; Alegroth, Emil/0000-0001-7526-3727
FU ORION project [20140218]; Knowledge Foundation in Sweden
FX This work is supported by a research grant for the ORION project
   (reference number 20140218) from The Knowledge Foundation in Sweden.
CR [Anonymous], 2000, Software Cost Estimation with COCOMO II
   [Anonymous], 2004, The business of software: What every manager, programmer, and entrepreneur must know to thrive and survive in good times and bad
   Aurum A, 2003, INFORM SOFTWARE TECH, V45, P945, DOI 10.1016/S0950-5849(03)00096-X
   Badampudi D, 2018, J SYST SOFTWARE, V135, P88, DOI 10.1016/j.jss.2017.09.033
   Badampudi D, 2016, J SYST SOFTWARE, V121, P105, DOI 10.1016/j.jss.2016.07.027
   Baruch Y, 2008, HUM RELAT, V61, P1139, DOI 10.1177/0018726708094863
   Berger. JO, 2013, STAT DECISION THEORY
   Borg M., 2018, SELECTING SOFTWARE C
   Breivold HP, 2007, EUROMICRO CONF PROC, P13
   Cortellessa V, 2006, LECT NOTES COMPUT SC, V4344, P66
   Dave M. S., 2018, IJIRT, V5
   EINHORN HJ, 1981, ANNU REV PSYCHOL, V32, P53, DOI 10.1146/annurev.ps.32.020181.000413
   Fowler F. J., 2013, Survey research methods
   Franke U, 2016, IEEE T NETW SERV MAN, V13, P58, DOI 10.1109/TNSM.2015.2510080
   Garg R., 2017, ACCOUNTING, V3, P227
   Guo PJ, 2011, P ACM 2011 C COMP SU, P395, DOI [10.1145/1958824.1958887., DOI 10.1145/1958824.1958887]
   Huhns MN, 2005, IEEE INTERNET COMPUT, V9, P75, DOI 10.1109/MIC.2005.21
   John M., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [10.1145/1082983.1083000, DOI 10.1145/1082983.1083000]
   King WR, 2005, COMMUN ASSOC INF SYS, V16, P880
   Lenberg P, 2017, EMPIR SOFTW ENG, V22, P2179, DOI 10.1007/s10664-016-9482-0
   Lenberg P, 2015, J SYST SOFTWARE, V107, P15, DOI 10.1016/j.jss.2015.04.084
   Li J, 2006, EMPIR SOFTW ENG, V11, P433, DOI 10.1007/s10664-006-9005-5
   Li X, 2011, INFORM SOFTWARE TECH, V53, P929, DOI 10.1016/j.infsof.2011.04.005
   Magazinius A, 2012, J SYST SOFTWARE, V85, P1770, DOI 10.1016/j.jss.2012.03.026
   Maiden NA, 1998, IEEE SOFTWARE, V15, P46, DOI 10.1109/52.663784
   Martens B, 2012, INFORM SYST FRONT, V14, P871, DOI 10.1007/s10796-011-9317-x
   Mistree F., 1997, OPTIMIZATION IND, P23
   Moe NB, 2012, INFORM SOFTWARE TECH, V54, P853, DOI 10.1016/j.infsof.2011.11.006
   Papatheocharous E, 2015, ACM INT C P SERIES, V07, DOI [10.1145/2797433.2797483, DOI 10.1145/2797433.2797483]
   Petersen K, 2018, IEEE T SOFTWARE ENG, V44, P237, DOI 10.1109/TSE.2017.2677909
   Potena Pasqualina., 2007, Joint Meeting of the European Software Engineering Conference and ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE), P583
   Rudzki J, 2009, 2009 35TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P11, DOI 10.1109/SEAA.2009.30
   Ruhe G, 2002, INT WORKSH LEARN SOF, P104
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Ssaed A.A., 2012, INT J SOFTWARE ENG I, V6, P143
   Starmer C, 2000, J ECON LIT, V38, P332, DOI 10.1257/jel.38.2.332
   Stavru S, 2014, J SYST SOFTWARE, V94, P87, DOI 10.1016/j.jss.2014.03.041
   Stewart K, 2005, 6TH INTERNATIONAL SYMPOSIUM ON QUALITY ELECTRONIC DESIGN, PROCEEDINGS, P197, DOI 10.1109/ISQED.2005.39
   Strigini L, 1996, IEEE SOFTWARE, V13, P101, DOI 10.1109/52.476293
   Vale T, 2016, J SYST SOFTWARE, V111, P128, DOI 10.1016/j.jss.2015.09.019
   Van der Linden F., 2009, IEEE SOFTWARE, V26
   Ven K, 2006, INT FED INFO PROC, V203, P111
   Weibing Chen, 2008, Software Process: Improvement and Practice, V13, P89, DOI 10.1002/spip.361
   Wohlin C, 2016, LECT NOTES BUS INF P, V240, P1, DOI 10.1007/978-3-319-40515-5_1
   Yang CA, 2000, INT J INFORM MANAGE, V20, P225, DOI 10.1016/S0268-4012(00)00007-4
NR 45
TC 4
Z9 4
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1675
EP 1707
DI 10.1007/s11219-019-09489-8
EA DEC 2019
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA PI6CR
UT WOS:000504580300001
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Xiang, JW
   Weng, CS
   Zhao, DD
   Andrzejak, A
   Xiong, SW
   Li, L
   Tian, J
AF Xiang, Jianwen
   Weng, Caisheng
   Zhao, Dongdong
   Andrzejak, Artur
   Xiong, Shengwu
   Li, Lin
   Tian, Jing
TI Software aging and rejuvenation in android: new models and metrics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software aging; Software rejuvenation; Availability; User experience;
   Android
ID ASSURANCE
AB Android users are occasionally troubled by the slow UI responses and sudden application/OS crashes. These problems are mainly caused by software aging, a phenomenon of progressive degradation of performance and dependability typically observed in long-running software systems. A countermeasure to software aging is software rejuvenation, i.e., manual or scheduled restart at different levels, such as application, OS, and device. Various software aging and rejuvenation models have been proposed for different software systems. However, these traditional models cannot be applied in the context of mobile devices, as they seldom consider the patterns of usage behavior and user experience specific to mobile phones. We address this problem based on the observations that the usage time of mobile phones is typically fragmented in daily life, with frequent and periodical switches between active and sleep modes, and that the user experience on fluent operation in the active mode is a key concern for mobile users. These insights are exploited to model the usage behavior and aging process by individual Stochastic Petri-Nets, and then to compose them into a Continuous Time Markov Chain (CTMC). Furthermore, we propose proactive rejuvenation strategies based on such CTMCs to achieve the best user experience and the least user interference, such as restarting the device when it is in sleep mode and before it enters an aged state. To consider user experience - a key concern of mobile users which is still less prominent in traditional dependability measurements - we propose new related metrics: for fluency (i.e., the probability that a phone offers a fast UI response to the users), and for the degree of overall user experience. We demonstrate the effectiveness and advantages of the proposed models and metrics via simulations as well as an empirical study.
C1 [Xiang, Jianwen; Weng, Caisheng; Zhao, Dongdong; Xiong, Shengwu; Li, Lin; Tian, Jing] Wuhan Univ Technol, Sch Comp Sci & Technol, Hubei Key Lab Transportat Internet Things, Wuhan, Hubei, Peoples R China.
   [Andrzejak, Artur] Heidelberg Univ, Inst Comp Sci, Heidelberg, Germany.
C3 Wuhan University of Technology; Ruprecht Karls University Heidelberg
RP Tian, J (corresponding author), Wuhan Univ Technol, Sch Comp Sci & Technol, Hubei Key Lab Transportat Internet Things, Wuhan, Hubei, Peoples R China.
EM jwxiang@whut.edu.cn; wengcs@whut.edu.cn; zdd@whut.edu.cn;
   artur.andrzejak@informatik.uni-heidelberg.de; swxiong@whut.edu.cn;
   cathylilin@whut.edu.cn; jtian@whut.edu.cn
RI li, li/HII-4157-2022; Xiong, Shou-Mei/A-4225-2009; Xiang,
   Jianwen/AAX-3801-2021; Li, Li/AEM-3636-2022
OI Xiong, Shengwu/0000-0002-4006-7029
FU National Natural Science Foundation of China [61672398, 61806151];
   Defense Industrial Technology Development Program [JCKY2018110C165];
   Hubei Provincial Natural Science Foundation of China [2017CFA012]; Open
   Fund of Hubei Key Lab [2017III028-004]
FX This work was partially supported by the National Natural Science
   Foundation of China (Grant No. 61672398, 61806151), the Defense
   Industrial Technology Development Program (Grant No. JCKY2018110C165),
   the Hubei Provincial Natural Science Foundation of China (Grant No.
   2017CFA012), and the Open Fund of Hubei Key Lab. of Transportation of
   IoT (Grant No. 2017III028-004).
CR Alonso J, 2013, PERFORM EVALUATION, V70, P231, DOI 10.1016/j.peva.2012.09.002
   Alonso J., 2007, IEEE GRID, P34
   Alonso J, 2011, 2011 10TH IEEE INTERNATIONAL SYMPOSIUM ON NETWORK COMPUTING AND APPLICATIONS (NCA), DOI 10.1109/NCA.2011.29
   An C, 2016, LECT NOTES ARTIF INT, V9794, P75, DOI 10.1007/978-3-319-42996-0_7
   Andrzejak A, 2008, IEEE IFIP NETW OPER, P25, DOI 10.1109/NOMS.2008.4575113
   Andrzejak A, 2007, LECT NOTES COMPUT SC, V4785, P98
   Andrzejak A, 2017, IEEE INT SYMP SOFTW, P252, DOI 10.1109/ISSREW.2017.72
   [Anonymous], 2018, GLOBAL SMARTPHONE SA
   [Anonymous], 1994, P 16 INT C SOFTW ENG
   [Anonymous], 2010, IEEE 2 INT WORKSH SO
   Araujo J, 2013, IEEE SYS MAN CYBERN, P1229, DOI 10.1109/SMC.2013.213
   Araujo J, 2011, IEEE SYS MAN CYBERN, P1411, DOI 10.1109/ICSMC.2011.6083867
   AVIZIENIS A, 1985, IEEE T SOFTWARE ENG, V11, P1491, DOI 10.1109/TSE.1985.231893
   Avritzer A, 2006, I C DEPEND SYS NETWO, P435, DOI 10.1109/DSN.2006.58
   Cassidy KJ, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P478, DOI 10.1109/DSN.2002.1028933
   Cotroneo Domenico, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P71, DOI 10.1109/ISSRE.2010.24
   Cotroneo D, 2016, PROC INT SYMP SOFTW, P478, DOI 10.1109/ISSRE.2016.25
   Cotroneo D, 2014, ACM J EMERG TECH COM, V10, DOI 10.1145/2539117
   Dohi T, 2001, COMPUT J, V44, P473, DOI 10.1093/comjnl/44.6.473
   Frumusanu A, 2017, APPLE CONFIRMS CPU L
   Frumusanu A., 2018, HUAWEI HONORS RECENT
   Garg S, 1998, NINTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P283, DOI 10.1109/ISSRE.1998.730892
   Grottke M, 2006, IEEE T RELIAB, V55, P411, DOI 10.1109/TR.2006.879609
   Guo CH, 2015, IEEE I C EMBED SOFTW, P1160, DOI 10.1109/HPCC-CSS-ICESS.2015.306
   HUANG YN, 1995, DIG PAP INT SYMP FAU, P381, DOI 10.1109/FTCS.1995.466961
   Jouin M, 2016, RELIAB ENG SYST SAFE, V148, P78, DOI 10.1016/j.ress.2015.12.003
   Kang Y, 2016, PROC INT SYMP SOFTW, P490, DOI 10.1109/ISSRE.2016.16
   Kourai K, 2007, I C DEPEND SYS NETWO, P245, DOI 10.1109/DSN.2007.6
   Machida F, 2017, IEEE T RELIAB, V66, P123, DOI 10.1109/TR.2016.2615880
   Machida F, 2012, PROC INT SYMP SOFTW, P287, DOI 10.1109/ISSREW.2012.97
   Matias R, 2010, IEEE T RELIAB, V59, P102, DOI 10.1109/TR.2009.2034292
   Meng HN, 2015, RELIAB ENG SYST SAFE, V133, P184, DOI 10.1016/j.ress.2014.09.007
   Qiao Y, 2016, IEEE INT SYMP SOFTW, P84, DOI 10.1109/ISSREW.2016.19
   Trivedi K. S., 2000, Proceedings 33rd Annual Simulation Symposium (SS 2000), P270, DOI 10.1109/SIMSYM.2000.844925
   Trivedi K. S, 2014, PROBABILITY STAT REL
   Vicario E, 2009, IEEE T SOFTWARE ENG, V35, P703, DOI 10.1109/TSE.2009.36
   Weng CS, 2017, IEEE INT SYMP SOFTW, P273, DOI 10.1109/ISSREW.2017.50
   Weng CS, 2016, IEEE INT SYMP SOFTW, P78, DOI 10.1109/ISSREW.2016.20
   Xiang YS, 2018, PROCEEDINGS OF THE 2018 1ST IEEE INTERNATIONAL CONFERENCE ON KNOWLEDGE INNOVATION AND INVENTION (ICKII 2018), P294, DOI 10.1109/ICKII.2018.8569082
   Xie W, 2005, RELIAB ENG SYST SAFE, V87, P13, DOI 10.1016/j.ress.2004.02.011
NR 40
TC 10
Z9 10
U1 1
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 85
EP 106
DI 10.1007/s11219-019-09475-0
EA NOV 2019
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000498143100001
DA 2024-07-18
ER

PT J
AU Felderer, M
   Herrmann, A
AF Felderer, Michael
   Herrmann, Andrea
TI Comprehensibility of system models during test design: a controlled
   experiment comparing UML activity diagrams and state machines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE UML models; System testing; System models; Test design; Model
   comprehensibility; Controlled experiment
ID TEST-CASE GENERATION; STEREOTYPES; IMPACT
AB UML activity diagrams and state machines are both used for modeling system behavior from the user perspective and are frequently the basis for deriving system test cases. In practice, system test cases are often derived manually from UML activity diagrams or state machines. For this task, comprehensibility of respective models is essential and a relevant question for practice to support model selection and design, as well as subsequent test derivation. Therefore, the objective of this paper is to compare the comprehensibility of UML activity diagrams and state machines during manual test case derivation. We investigate the comprehensibility of UML activity diagrams and state machines in a controlled student experiment. Three measures for comprehensibility have been investigated: (1) the self-assessed comprehensibility, (2) the actual comprehensibility measured by the correctness of answers to comprehensibility questions, and (3) the number of errors made during test case derivation. The experiment was performed and internally replicated with overall 84 participants divided into three groups at two institutions. Our experiment indicates that activity diagrams are more comprehensible but also more error-prone with regard to manual test case derivation and discusses how these results can improve system modeling and test case design.
C1 [Felderer, Michael] Univ Innsbruck, Software Engn, Inst Comp Sci, Innsbruck, Austria.
   [Felderer, Michael] Blekinge Inst Technol, Karlskrona, Sweden.
   [Herrmann, Andrea] Herrmann & Ehrlich, Stuttgart, Germany.
C3 University of Innsbruck; Blekinge Institute Technology
RP Felderer, M (corresponding author), Univ Innsbruck, Software Engn, Inst Comp Sci, Innsbruck, Austria.; Felderer, M (corresponding author), Blekinge Inst Technol, Karlskrona, Sweden.
EM michael.felderer@uibk.ac.at; herrmann@herrmann-ehrlich.de
RI Felderer, Michael/AAF-4909-2020
FU Austria Science Fund (FWF) through the project MOBSTECO [FWF P
   26194-N15]; Knowledge Foundation (KKS) of Sweden [20130085]
FX This work was partly funded by the Austria Science Fund (FWF) through
   the project MOBSTECO (FWF P 26194-N15) as well as by the Knowledge
   Foundation (KKS) of Sweden through the project 20130085: Testing of
   Critical System Characteristics (TOCSYC).
CR Agarwal R, 1999, IEEE T SOFTWARE ENG, V25, P541, DOI 10.1109/32.799953
   Aranda J., 2007, INT WORKSHOP MODELIN
   Briand L.C., 2002, SOFTWARE AND SYSTEMS, V1, P10
   Briand LC, 2005, IEEE T SOFTWARE ENG, V31, P833, DOI 10.1109/TSE.2005.105
   Budgen D, 2011, SOFTWARE PRACT EXPER, V41, P363, DOI 10.1002/spe.1009
   Chen MS, 2009, COMPUT J, V52, P545, DOI 10.1093/comjnl/bxm057
   CIOCH FA, 1991, J SYST SOFTWARE, V14, P85, DOI 10.1016/0164-1212(91)90093-L
   Crawley MJ., 2012, R BOOK
   Cruz-Lemus JA, 2005, LECT NOTES COMPUT SC, V3713, P113, DOI 10.1007/11557432_9
   Cruz-Lemus JA, 2011, INFORM SOFTWARE TECH, V53, P1391, DOI 10.1016/j.infsof.2011.07.002
   De Lucia A, 2010, EMPIR SOFTW ENG, V15, P455, DOI 10.1007/s10664-009-9127-7
   Eichelberger H, 2009, INFORM SOFTWARE TECH, V51, P1686, DOI 10.1016/j.infsof.2009.04.008
   Felderer M., 2014, EUROMICRO SEAA 2014
   Felderer M., 2013, SOFTWARE QUALITY INC
   Felderer M, 2015, INFORM SOFTWARE TECH, V61, P1, DOI 10.1016/j.infsof.2014.12.005
   Fernández-Sáez AM, 2013, INFORM SOFTWARE TECH, V55, P1119, DOI 10.1016/j.infsof.2012.12.006
   Genero M, 2008, LECT NOTES COMPUT SC, V5301, P280, DOI 10.1007/978-3-540-87875-9_20
   Glezer C, 2005, INFORM SOFTWARE TECH, V47, P675, DOI 10.1016/j.infsof.2005.01.003
   Granda F. M., 2014, RET WORKSH
   Gravino C, 2008, LECT NOTES COMPUT SC, V5301, P615, DOI 10.1007/978-3-540-87875-9_43
   Hartmann J, 2005, INNOV SYST SOFTW ENG, V1, P12, DOI 10.1007/s11334-005-0006-0
   ISTQB, 2012, STAND GLOSS TERMS US, V2, P2
   JURISTO N, EMPIRICAL SOFTWARE E, V9, P7
   Kansomkeat S, 2003, SAICSIT 03
   KIM H, 2007, 8 ACIS INT C SOFTW E
   Kim Y. G., 1999, IEE Proceedings-Software, V146, P187, DOI 10.1049/ip-sen:19990602
   Kirk R.E., 1995, EXPT DESIGN, V3rd
   Kundu D, 2009, J OBJECT TECHNOL, V8, P65, DOI 10.5381/jot.2009.8.3.a1
   LINDLAND OI, 1994, UNDERSTANDING QUALIT, P42
   Linzhang W, 2004, 11 AS PAC SOFTW ENG
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Mendongal MG, 2008, IEEE INT C ENG COMP, P203, DOI 10.1109/ICECCS.2008.38
   MINGSONG C, 2006, P 2006 INT WORKSH AU
   Mohacsi S, 2015, PROCEEDINGS 41ST EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS SEAA 2015, P382, DOI 10.1109/SEAA.2015.18
   Nugroho A, 2014, EMPIR SOFTW ENG, V19, P926, DOI 10.1007/s10664-013-9243-2
   Nugroho A, 2009, LECT NOTES COMPUT SC, V5795, P181, DOI 10.1007/978-3-642-04425-0_14
   Nugroho A, 2009, INFORM SOFTWARE TECH, V51, P1670, DOI 10.1016/j.infsof.2009.04.007
   Otero MC, 2004, INFORM SOFTWARE TECH, V46, P35, DOI 10.1016/S0950-5849(03)00108-3
   Pohl K., 2011, Requirements Engineering Fundamentals, V1st
   PRETSCHNER A, 2005, P 27 INT C SOFTW ENG
   Purchase Helen C., 2001, P 2001 AS PAC S INF, V9
   Reggio G, 2011, LECT NOTES COMPUT SC, V6981, P138, DOI 10.1007/978-3-642-24485-8_11
   Ricca F, 2010, IEEE T SOFTWARE ENG, V36, P96, DOI 10.1109/TSE.2009.69
   Riebisch M., 2003, LNCS, V2591
   Runeson P, 2006, IEEE SOFTWARE, V23, P82, DOI 10.1109/MS.2006.89
   Samuel P, 2008, IET SOFTW, V2, P79, DOI 10.1049/iet-sen:20060061
   Sharif B, 2009, INT C PROGRAM COMPRE, P268, DOI 10.1109/ICPC.2009.5090055
   Sharma B., 2010, P 26 IEEE INT C SOFT, P1, DOI DOI 10.1109/ICSM.2010.5609582
   Sokenou D, 2008, SOFTW ENG WORKSH
   Staron M, 2006, J SYST SOFTWARE, V79, P727, DOI 10.1016/j.jss.2005.09.014
   Störrle H, 2014, LECT NOTES COMPUT SC, V8767, P518, DOI 10.1007/978-3-319-11653-2_32
   Störrle H, 2012, S VIS LANG HUM CEN C, P49, DOI 10.1109/VLHCC.2012.6344480
   Swain SK, 2010, J OBJECT TECHNOL, V9, P1, DOI 10.5381/jot.2010.9.5.a1
   Tripathy A., 2013, ADV INTELL SYST, P121
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Wohlin C., 2012, Experimentation in Software Engineering
   Wong K, 2006, SOFTWARE QUAL J, V14, P233, DOI 10.1007/s11219-006-9218-2
   [No title captured]
NR 58
TC 11
Z9 11
U1 2
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 125
EP 147
DI 10.1007/s11219-018-9407-9
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000004
OA Green Submitted, hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Pham, R
   Kiesling, S
   Singer, L
   Schneider, K
AF Pham, Raphael
   Kiesling, Stephan
   Singer, Leif
   Schneider, Kurt
TI Onboarding inexperienced developers: struggles and perceptions regarding
   automated testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automated testing; Onboarding; Newcomers; Software developer; Required
   skills
AB Previous research found that inexperienced software engineers may tend to view automatic testing as a waste of time and as an activity completely separate from programming. This could have a negative impact on their later careers and could be a sign that improvements in software engineering education are needed when it comes to testing. At the same time, this stance could negatively influence the perception that practitioners have of recent university graduates. To explore this issue, we conducted a qualitative study and surveyed 170 and interviewed 22 practitioners about their experiences with recent graduates, focusing on software testing skills. We find that practitioners do recognize a skill gap between university graduates and industry expectations and that this perception could be engrained deeply enough already to influence hiring practices. Practitioners use different and at times costly strategies to alleviate this skill gap, such as training and mentoring efforts. We validated core findings in a survey with 698 professional software developers. Our qualitative insights can help industry, research, and educational institutions guide in-depth studies that explore the severity of the effects we have found. The coping strategies we have found can provide valuable starting points that can inform changes in how we educate the software engineers of the future.
C1 [Pham, Raphael; Kiesling, Stephan; Schneider, Kurt] Welfengarten 1, D-30163 Hannover, Germany.
   [Singer, Leif] Univ Victoria, 3800 Finnerty Rd, Victoria, BC, Canada.
C3 University of Victoria
RP Pham, R (corresponding author), Welfengarten 1, D-30163 Hannover, Germany.
EM Raphael.Pham@inf.uni-hannover.de; Stephan.Kiesling@inf.uni-hannover.de;
   lsinger@uvic.ca; Kurt.Schneider@inf.uni-hannover.de
OI Schneider, Kurt/0000-0002-7456-8323
CR [Anonymous], 1987, Peopleware: Productive Projects and Teams
   [Anonymous], 2003, COMPANION 18 ANN ACM, P148
   [Anonymous], 2012, How Google Tests Software
   Begel A, 2008, SIGCSE'08: PROCEEDINGS OF THE 39TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P226, DOI 10.1145/1352322.1352218
   Begel Andrew, 2008, P 4 INT WORKSH COMP, P3, DOI [DOI 10.1145/RESEARCH(ICER'1404520.1404522, 10.1145/Research(ICER'1404520.1404522]
   Boud D., 1998, The Challenge of Problem-Based Learning
   Brechner Eric, 2003, Conference on Object Oriented Programming Systems Languages and Applications, Companion of the 18th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, Anaheim, CA, USA, P134
   BRUEGGE B, 1992, LECT NOTES COMPUT SC, V640, P65
   Carrington D., 2003, 33 ANN FRONT ED 2003, V3, pS1C
   Dagenais B., 2010, Proc. of the ICSE 10, P275, DOI DOI 10.1145/1806799.1806842
   Deak A., 2014, ANAL IMPORTANCE TEAC
   Edwards S. H., 2003, P INT C ED INF SYST
   Elbaum S, 2007, PROC INT CONF SOFTW, P688
   Fagerholm F, 2013, 2013 IEEE 8TH INTERNATIONAL CONFERENCE ON GLOBAL SOFTWARE ENGINEERING WORKSHOPS (ICGSEW 2013), P5, DOI 10.1109/ICGSEW.2013.8
   Fagerholm Fabian, 2014, P 8 ACM IEEE INT S E, DOI DOI 10.1145/2652524.2652540
   Garousi V, 2016, IEEE SOFTWARE, V33, P68, DOI 10.1109/MS.2016.30
   Glaser B., 1967, DISCOVERY GROUNDED T, V3
   Glass RL, 2006, IEEE SOFTWARE, V23, P55, DOI 10.1109/MS.2006.113
   Janzen D. S., 2006, SIGCSE Bulletin, V38, P254, DOI 10.1145/1124706.1121419
   Johnson M, 2010, J WORKPLACE LEARN, V22, P180, DOI 10.1108/13665621011028620
   Jones E. L., 2001, J COMPUTING SCI COLL, V16, P92
   Jones E. L., 2001, 31 ANN FRONT ED C 20, V2, pF3D
   Kaner C, 2007, CONF SOFTW ENG EDUC, P157, DOI 10.1109/CSEET.2007.38
   Lübke D, 2004, LECT NOTES COMPUT SC, V3281, P57
   Marrero W., 2005, SIGCSE Bulletin, V37, P4, DOI 10.1145/1151954.1067451
   Neto VL, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1099, DOI 10.1109/ICSE.2013.6606660
   Ng SP, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P116, DOI 10.1109/ASWEC.2004.1290464
   Pham R., 2014, 22 INT S FDN SOFTW E
   Pham R, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P890, DOI 10.1145/2786805.2803202
   Pham R, 2015, 7TH INTERNATIONAL WORKSHOP ON SOCIAL SOFTWARE ENGINEERING (SSE 2015), P1, DOI 10.1145/2804381.2804382
   Pham R, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P112, DOI 10.1109/ICSE.2013.6606557
   Radermacher A, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P291, DOI 10.1145/2591062.2591159
   Rajlich V, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1109, DOI 10.1109/ICSE.2013.6606661
   Rogers EM, 2003, DIFFUSION INNOVATION
   Shepard T, 2001, COMMUN ACM, V44, P103, DOI 10.1145/376134.376180
   Sim SE, 1998, PROC INT CONF SOFTW, P361, DOI 10.1109/ICSE.1998.671389
   Sowe S. K., 2006, FRAMEWORK TEACHING S
   SPACCO J., 2006, COMPANION 21 ACM SIG, P907
   Steinmacher I., 2014, Proceedings of the 7th international workshop on cooperative and human aspects of software engineering, P72, DOI DOI 10.1145/2593702.2593704.ACM
   Storey Margaret-Anne, 2013, P 2013 C COMPUTER SU, P103
   Stuart H. C., 2012, Network Computing, DOI [DOI 10.1145/2145204.2145275, 10.1145/2145204.2145275]
   Stuart H. C., 2012, SOCIAL TRANSPARENCY, DOI [10.1145/2145204.2145275, DOI 10.1145/2145204.2145275]
   van Deursen A., 2013, TEACHING SOFTWARE AR
   Zagalsky A, 2015, PROCEEDINGS OF THE 2015 ACM INTERNATIONAL CONFERENCE ON COMPUTER-SUPPORTED COOPERATIVE WORK AND SOCIAL COMPUTING (CSCW'15), P1906, DOI 10.1145/2675133.2675284
NR 44
TC 11
Z9 11
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2017
VL 25
IS 4
SI SI
BP 1239
EP 1268
DI 10.1007/s11219-016-9333-7
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FN4KA
UT WOS:000415973100006
DA 2024-07-18
ER

PT J
AU Guzmán, JG
   Martín, D
   Urbano, J
   de Amescua, A
AF Garcia Guzman, Javier
   Martin, Diego
   Urbano, Julian
   de Amescua, Antonio
TI Practical experiences in modelling software engineering practices: The
   project patterns approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software process improvement; Knowledge management; Process patterns;
   Process modelling; Empirical study
ID KNOWLEDGE
AB Software process improvement in software development organisations is a complex task that can be solved using knowledge management strategies. In this area, the definition and use of process patterns are a proven approach to apply knowledge management strategies in software engineering organisations. One of the main problems for the effective application of process patterns in the software industry is the difficulty of formalising the knowledge about the development process using these approaches. This study presents a framework to manage software project patterns. This framework (which is composed of a metamodel and a platform for patterns modelling and reuse) is able to formalise the knowledge on software development projects including software engineers' previous experience, development methodologies, references frameworks and lessons learnt. The authors carried out an empirical study at Carlos III University of Madrid, where junior software engineers used the project patterns defined in this research work. The evidences and findings obtained during the empirical study execution indicates that correctness of the pattern depends on relevance of the bibliographic references used to create it, implementation of a knowledge sharing strategy among the personnel involved and previous experience in the business areas related to the information systems being developed. The results obtained from the empirical study also envisage that the usefulness of an sdPP (Software Development Project Pattern) depends on the ease of identifying when and how to apply a specific sdPP in a software project.
C1 [Garcia Guzman, Javier; Martin, Diego; Urbano, Julian; de Amescua, Antonio] Univ Carlos III Madrid, Dept Comp Sci, Madrid 28911, Spain.
C3 Universidad Carlos III de Madrid
RP Guzmán, JG (corresponding author), Univ Carlos III Madrid, Dept Comp Sci, Avda Univ 30, Madrid 28911, Spain.
EM jgarciag@inf.uc3m.es
RI García-Guzmán, Javier/L-4666-2014
OI GARCIA GUZMAN, JAVIER/0000-0001-6039-795X; Martin,
   Diego/0000-0001-8810-0695; Amescua, Antonio/0000-0003-4355-6896
CR Alexander Christopher., 1978, A Pattern Language: Towns, Buildings, Construction
   Allan J., 2003, The lemur toolkit for language modeling and information retrieval
   Allison I, 2007, INFORM SOFTWARE TECH, V49, P668, DOI 10.1016/j.infsof.2007.02.003
   Amescua A, 2010, IET SOFTW, V4, P434, DOI 10.1049/iet-sen.2010.0067
   Ardimento P, 2009, J INF KNOWL MANAG, V8, P229, DOI 10.1142/S021964920900235X
   Aurum A, 2008, INFORM SOFTWARE TECH, V50, P511, DOI 10.1016/j.infsof.2007.05.005
   Basili1 Victor R, 1994, Encyclopedia of Software Eng., V1, P469, DOI DOI 10.1002/0471028959.SOF110
   Berczuk S., 2003, Software configuration management patterns: effective teamwork, practical integration
   Bjornson FO, 2008, INFORM SOFTWARE TECH, V50, P1055, DOI 10.1016/j.infsof.2008.03.006
   Borges L., 2002, P INT C COMP SCI SOF, P227
   Buschmann F., 2007, PATTERN ORIENTED SOF, V5
   Eclipse, 2011, ECL PROC FRAM COMP
   Fowler M., 2003, Patterns of Enterprise Application Architecture. A Martin Fowler signature book
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   García J, 2011, INFORM SOFTWARE TECH, V53, P834, DOI 10.1016/j.infsof.2011.03.002
   Garcia S., 2006, CMMI SURVIVAL GUIDE
   Group Processworks, 2011, EZYLIB PROC ASS LIB
   Ivarsson M, 2012, SOFTWARE QUAL J, V20, P173, DOI 10.1007/s11219-011-9139-6
   Jacobson I, 2007, J OBJECT TECHNOL, V6, P41, DOI 10.5381/jot.2007.6.6.c5
   Jakarta Apache, 2005, AP LUC HIGH PERF FUL
   Jalote PM., 2002, SOFTWARE PROJECT MAN
   Juristo N., 2013, BASICS SOFTWARE ENG
   Landaeta J. F., 2008, SOFTWARE PROCESS IMP, DOI [10.1007/978-3-540-85936-9_8, DOI 10.1007/978-3-540-85936-9_8]
   Llorens J, 2004, STUD FUZZ SOFT COMP, V159, P221
   Martin D., 2007, EUROSPI 2007 IND P, P325
   Maurer F, 2002, ANN SOFTW ENG, V14, P145, DOI 10.1023/A:1020505708326
   May D, 2003, COMMUN ACM, V46, P94, DOI 10.1145/792704.792705
   Medina-Dominguez F, 2010, IEEE T EDUC, V53, P595, DOI 10.1109/TE.2009.2037313
   Microsoft Corporation, 2010, VIS STUD 2010 ULT
   Mora-Soto A., 2010, INT C COMP SUPP ED C
   NODDER C, 2008, AGILE USABILITY BEST
   Nold HA, 2011, KNOWL MAN RES PRACT, V9, P84, DOI 10.1057/kmrp.2010.27
   Object Management Group (OMG), 2007, OMG UN MOD LANG INFR
   *OMG, 2008, SOFTW SYST PROC ENG
   Osellus, 2007, IRIS PROC AUTH
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Rosendaal B, 2009, KNOWL MAN RES PRACT, V7, P4, DOI 10.1057/kmrp.2008.32
   Rus I, 2002, IEEE SOFTWARE, V19, P26, DOI 10.1109/MS.2002.1003450
   Sanchez-Segura M.-I., 2011, EUROSPI 2011 IND P, P91
   Sanchez-Segura MI, 2010, INFORM SCIENCES, V180, P2721, DOI 10.1016/j.ins.2010.03.028
   Scott L, 2002, APSEC 2002: NINTH ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, P603, DOI 10.1109/APSEC.2002.1183096
   SEI, 2010, CMU/SEI-2010-TR-033
   Select Business Solutions, 2011, SEL PROC DIR
   Shalloway A., 2005, DESIGN PATTERNS EXPL
   Sommerville I., 2004, Software Engineering
   Verma A, 2009, INT J PROD RES, V47, P5311, DOI 10.1080/00207540801918570
   Visaggio G, 2009, SOFTWARE ENG LNCS, V5413, P223, DOI [10.1007/978-3-540-95888-8_9, DOI 10.1007/978-3-540-95888-8_9]
NR 47
TC 4
Z9 8
U1 0
U2 31
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2013
VL 21
IS 2
BP 325
EP 354
DI 10.1007/s11219-012-9177-8
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 114MX
UT WOS:000316746700005
DA 2024-07-18
ER

PT J
AU Jiao, W
   Mei, H
AF Jiao, Wenpin
   Mei, Hong
TI Supporting high interoperability of components by adopting an
   agent-based approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 16th IEEE International Conference on Tools with Artificial Intelligence
CY NOV 15-17, 2004
CL Boca Raton, FL
SP IEEE Comp Soc, Informat Technol Res Inst, Wright State Univ, Florida Atlantic Univ
DE interoperability; component; wrapper; agent; pi-calculus
ID ARCHITECTURAL MISMATCH; SOFTWARE ARCHITECTURES; ADAPTERS
AB While integrating components into systems, we will be confronted with problems concerned with the interoperability of components due to the interaction mismatches at multiple levels, such as interaction behaviors between components and features imposed by architectural styles. In this paper, we studied the interoperability of components and explored the approach to supporting high interoperability of components involved in mismatching interactions. First, we formalized components involved in different architectural styles in the pi-calculus. Next, we studied the formal foundation of the interoperability of components for reasoning about the conditions under which two heterogeneous components are possible to interoperate and interconnect together properly. Then, we described a wrapper-based solution for integrating components into systems that impose mismatching assumptions about usage of the components. In the end, we presented an agent-based implementation for the solution, in which agents are used to wrap components and can automatically resolve multiple levels of interaction mismatches between components. We also gave a simple example to illustrate our approach.
C1 Peking Univ, Sch Elect Engn & Comp Sci, Inst Software, Beijing 100871, Peoples R China.
C3 Peking University
RP Jiao, W (corresponding author), Peking Univ, Sch Elect Engn & Comp Sci, Inst Software, Beijing 100871, Peoples R China.
EM jwp@cs.pku.edu.cn; meih@cs.pku.edu.cn
CR Abd-Allah A.A.E.S., 1996, Composing heterogeneous software architectures
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   Allen R, 1998, LECT NOTES COMPUT SC, V1382, P21, DOI 10.1007/BFb0053581
   [Anonymous], 2000, EXTENSIBLE MARKUP LA
   Balzer RM, 1999, 19TH IEEE INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOP, PROCEEDINGS, P73, DOI 10.1109/ECMDD.1999.776417
   Bracciali A., 2002, ELECT NOTES THEORETI, V66
   Canal C, 2001, SCI COMPUT PROGRAM, V41, P105, DOI 10.1016/S0167-6423(01)00002-8
   Chiang CC, 2003, INFORM SOFTWARE TECH, V45, P149, DOI 10.1016/S0950-5849(02)00194-5
   Compare D, 1999, SCI COMPUT PROGRAM, V33, P101, DOI 10.1016/S0167-6423(98)00006-9
   Davis L, 2002, J SYST SOFTWARE, V61, P31, DOI 10.1016/S0164-1212(01)00112-1
   de Lemos R, 2003, LECT NOTES COMPUT SC, V2677, P175
   Ducasse S, 1997, LECT NOTES COMPUT SC, V1301, P483, DOI 10.1145/267896.267928
   Egyed A., 2006, Automated Software Engineering, V13, P41, DOI 10.1007/s10515-006-5466-4
   Egyed A., 2000, IEE Proceedings-Software, V147, P225, DOI 10.1049/ip-sen:20000915
   Finin T., 1997, Software agents, P291
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   GACEK C, 1997, USCCSE97TR502 U SO C
   GARLAN D, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.469757
   Jiao WP, 2003, PROC INT C TOOLS ART, P358, DOI 10.1109/TAI.2003.1250212
   JIN Y, 2005, P 4 INT C COTS BAS S, P54
   Medvidovic N, 1997, PROC INT CONF SOFTW, P692, DOI [10.1145/253228.253838, 10.1145/258368.258421]
   Mei H, 2002, LECT NOTES COMPUT SC, V2495, P38
   MINLER R, 1993, LOGIC ALGEBRA SPECIF
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   The Foundation for Intelligent Physical Agents (FIPA), 2002, FDN INTELLIGENT PHYS
   Wooldridge M. J., 2002, INTRO MULTIAGENT SYS
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
   ZHY P, 2005, THESIS PEKING U
NR 28
TC 2
Z9 3
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2007
VL 15
IS 3
BP 283
EP 307
DI 10.1007/s11219-007-9016-5
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 203OI
UT WOS:000248983500005
DA 2024-07-18
ER

PT J
AU Cheon, Y
   Perumandla, A
AF Cheon, Yoonsik
   Perumandla, Ashaveena
TI Specifying and checking method call sequences of Java programs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT International Conference on Software Engineering Research and Practice
   (SERP'05)
CY JUN 27-29, 2005
CL Las Vegas, NV
SP CSREA, Int Technol Inst, World Acad Sci & Informat Technol, HPCwire, GRIDtoday
DE method call sequence specification; runtime checking; assertion; pre and
   postconditions; programming by contract; JML language
ID CONTRACT; DESIGN
AB In a pre and postcondition-style specification, it is difficult to specify the allowed sequences of method calls, referred to as protocols. The protocols are essential properties of reusable object-oriented classes and application frameworks, and the approaches based on the pre and postconditions, such as design by contracts (DBC) and formal behavioral interface specification languages (BISL), are being accepted as a practical and effective tool for describing precise interfaces of (reusable) program modules. We propose a simple extension to the Java Modeling Language (JML), a BISL for Java, to specify protocol properties in an intuitive and concise manner. The key idea of our approach is to separate protocol properties from functional properties written in pre and post-conditions and to specify them in a regular expression-like notation. The semantics of our extension is formally defined and provides a foundation for implementing runtime checks. Case studies have been performed to show the effectiveness our approach. We believe that our approach can be adopted by other BISLs.
C1 Univ Texas, Dept Comp Sci, El Paso, TX 79968 USA.
C3 University of Texas System; University of Texas El Paso
RP Cheon, Y (corresponding author), Univ Texas, Dept Comp Sci, El Paso, TX 79968 USA.
EM ycheon@utep.edu; aperumandla@utep.edu
CR AGARWAL P, 2006, 0613 U TEX EL PAS DE
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2003, High Integrity Software: The SPARK Approach to Safety and Security
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   BARTETZKO D, 2001, WORKSH RUNT VER HELD, V55
   BARTUSSEK W, 1978, LECT NOTES COMPUTER, V65, P211
   BRORKENS M, 2002, ELECT NOTES THEORETI, V70
   BRORKENS M, 2002, TRENDS TESTING COMMU, P39
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Cheon Y, 2005, SOFTWARE PRACT EXPER, V35, P583, DOI 10.1002/spe.649
   CHEON Y, 2005, P 2005 INT C SOFTW E, V2, P511
   Cheon Yoonsik., 2002, Proceedings of the International Conference on Software Engineering Research and Practice (SERP'02), P322
   Cheon Yoonsik, 2003, Ph.D. Dissertation
   DUNCAN A, 1998, TRCS9832 U CAL DEPCO
   FINDLER RB, 2001, OOPSLA 01 C P OBJ OR, P1
   KARAORMAN M, 1999, LECT NOTES COMPUTER, V1616, P175
   Kramer R., 1998, ICONTRACT JAVA DESIG, P295
   Leavens Gary T., 1999, Behavioral Specifications of Businesses and Systems, P175
   Leavens GT, 1999, LECT NOTES COMPUT SC, V1709, P1087
   LEAVENS GT, 2005, JML REFERENCE MANUAL
   Luckham D., 1990, TEXTS MONOGRAPHS COM
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   MEYER B, 1992, OBJECT ORIENTED SERI
   Rodríguez E, 2005, LECT NOTES COMPUT SC, V3586, P551
   Rosenberg M., 1995, ANATOLICA, V21, P1
   Soundarajan N, 2000, LECT NOTES COMPUT SC, V1844, P100
NR 26
TC 10
Z9 13
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2007
VL 15
IS 1
BP 7
EP 25
DI 10.1007/s11219-006-9001-4
PG 19
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FD
UT WOS:000243927000003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zhu, LM
   Aurum, A
   Gorton, I
   Jeffery, R
AF Zhu, LM
   Aurum, A
   Gorton, I
   Jeffery, R
TI Tradeoff and sensitivity analysis in software architecture evaluation
   using analytic hierarchy process
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software architecture; architecture evaluation; analytic hierarchy
   process; trade-off; sensitivity analysis; decision making;
   multi-criteria decision making; non functional requirements; quality
   attributes
ID REQUIREMENTS
AB Software architecture evaluation involves evaluating different architecture design alternatives against multiple quality-attributes. These attributes typically have intrinsic conflicts and must be considered simultaneously in order to reach a final design decision. AHP (Analytic Hierarchy Process), an important decision making technique, has been leveraged to resolve such conflicts. AHP can help provide an overall ranking of design alternatives. However it lacks the capability to explicitly identify the exact tradeoffs being made and the relative size of these tradeoffs. Moreover, the ranking produced can be sensitive such that the smallest change in intermediate priority weights can alter the final order of design alternatives. In this paper, we propose several in-depth analysis techniques applicable to AHP to identify critical tradeoffs and sensitive points in the decision process. We apply our method to an example of a real-world distributed architecture presented in the literature. The results are promising in that they make important decision consequences explicit in terms of key design tradeoffs and the architecture's capability to handle future quality attribute changes. These expose critical decisions which are otherwise too subtle to be detected in standard AHP results.
C1 Univ New S Wales, Sch Engn & Comp Sci, Natl ICT, Kensington, NSW 2033, Australia.
   Univ New S Wales, Sch Informat Syst Technol & Management, Natl ICT, Kensington, NSW 2033, Australia.
C3 University of New South Wales Sydney; University of New South Wales
   Sydney
RP Univ New S Wales, Sch Engn & Comp Sci, Natl ICT, Kensington, NSW 2033, Australia.
EM limingz@cse.unsw.edu.au; aybuke@unsw.edu.au; ian.gorton@nicta.com.au;
   ross.jeffery@nicta.com.au
RI Gorton, Ian/AAA-3301-2020; Zhu, Li/GXH-9801-2022; Gorton,
   Ian/A-8247-2009
OI Zhu, Liming/0000-0001-5839-3765; Aurum, Aybuke/0000-0003-2416-4555
CR [Anonymous], P 27 INT C SOFTW ENG
   Aurum A, 2003, INFORM SOFTWARE TECH, V45, P945, DOI 10.1016/S0950-5849(03)00096-X
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bengtsson P, 2004, J SYST SOFTWARE, V69, P129, DOI 10.1016/S0164-1212(03)00080-3
   Bosch J, 2004, LECT NOTES COMPUT SC, V3047, P194
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Chung L., 2000, Non-functional Requirements in Software Engineering
   Dobrica L, 2002, IEEE T SOFTWARE ENG, V28, P638, DOI 10.1109/TSE.2002.1019479
   Finan J. S., 1996, International Transactions in Operational Research, V3, P99, DOI 10.1016/0969-6016(96)00002-0
   Giorgini P., 2004, J DATA SEMANT, V1, P1
   Gorton I, 2004, PROC INT CONF SOFTW, P543, DOI 10.1109/ICSE.2004.1317476
   Gross D., 2001, Requirements Engineering, V6, P18, DOI 10.1007/s007660170013
   In H, 2001, PROC INT CONF SOFTW, P555
   IN H, 2001, P 1 INT WORKSH SOFTW
   JENNINGS D., 1998, Decision-making: An integrated appraoch, VSecond
   Karlsson J, 1998, INFORM SOFTWARE TECH, V39, P939, DOI 10.1016/S0950-5849(97)00053-0
   Kazman R, 2001, PROC INT CONF SOFTW, P297, DOI 10.1109/ICSE.2001.919103
   Kazman R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P54, DOI 10.1109/ICSE.1999.840995
   Klein M., 1999, CMUSEI99TR022
   Kleindorfer P.R., 1993, Decision Sciences: An Integrative Perspective
   LINDBLOM CE, 1959, PUBLIC ADMIN REV, V19, P79, DOI 10.2307/973677
   LIU L, 2001, P 1 INT WORKSH SOFTW
   Nurmuliani N, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P28, DOI 10.1109/ASWEC.2004.1290455
   Saaty T.L., 1980, ANAL HIERARCHY PROCE
   Svahnberg M, 2003, INT J SOFTW ENG KNOW, V13, P547, DOI 10.1142/S0218194003001421
   Svahnberg M, 2002, LECT NOTES COMPUT SC, V2559, P436
   Svahnberg M., 2002, Proceedings of the 14th international conference on Software engineering and knowledge engineering, P819
   Triantaphyllou E., 1997, QUALITY MAINTENANCE, V3, P16, DOI [DOI 10.1108/13552519710161517, 10.1108/13552519710161517]
   TRIANTAPHYLLOU E, 1994, P 3 INT S AHP, P225
   2004, EXPERT CHOICE VERSIO
NR 30
TC 55
Z9 66
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2005
VL 13
IS 4
BP 357
EP 375
DI 10.1007/s11219-005-4251-0
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 984BC
UT WOS:000233276500003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Stavrinoudis, D
   Xenos, M
   Peppas, P
   Christodoulakis, D
AF Stavrinoudis, D
   Xenos, M
   Peppas, P
   Christodoulakis, D
TI Early estimation of users' perception of software quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software quality measurements; users' opinion; quality characteristics;
   ISO9126; belief revision; Grove's System of Spheres
ID REVISION
AB This paper presents a methodology for estimating users' opinion of the quality of a software product. Users'opinion changes with time as they progressively become more acquainted with the software product. In this paper, we study the dynamics of users' opinion and offer a method for assessing users' final perception, based on measurements in the early stages of product release. The paper also presents methods for collecting users' opinion and from the derived data, shows how their initial belief state for the quality of the product is formed. It adapts aspects of Belief Revision theory in order to present a way of estimating users' opinion, subsequently formed after their opinion revisions. This estimation is achieved by using the initial measurements and without having to conduct surveys frequently. It reports the correlation that users tend to infer among quality characteristics and represents this correlation through a determination of a set of constraints between the scores of each quality characteristic. Finally, this paper presents a fast and automated way of forming users' new belief state for the quality of a product after examining their opinion revisions.
C1 Univ Patras, Comp Engn & Informat Dept, GR-26110 Patras, Greece.
   Hellen Open Univ, Sch Sci & Technol, Patras, Greece.
   Comp Technol Inst, Patras, Greece.
   Univ Patras, Dept Business Adm, GR-26110 Patras, Greece.
C3 University of Patras; Hellenic Open University; University of Patras
RP Univ Patras, Comp Engn & Informat Dept, GR-26110 Patras, Greece.
EM stavrino@ceid.upatras.gr; m.xenos@eap.gr; ppeppas@otenet.gr;
   dxri@ceid.upatras.gr
RI Peppas, Pavlos/JVO-0663-2024
OI Peppas, Pavlos/0000-0002-0008-5505
CR ALCHOURRON CE, 1985, J SYMBOLIC LOGIC, V50, P510, DOI 10.2307/2274239
   [Anonymous], 1995, The Capability Maturity Model: Guidelines for Improving the Software Process
   Bevan N., 1997, QUALITY USABILITY NE
   CROSBY P, 1979, QUALITY FREE
   EITER T, 1992, ARTIF INTELL, V57, P227, DOI 10.1016/0004-3702(92)90018-S
   Gardenfors P., 1988, Proceedings of the Second Conference on Theoretical Aspects of Reasoning about Knowledge, P83
   Gardenfors Peter, 1988, KNOWLEDGE FLUX, P1
   Grady R.B., 1987, SOFTWARE METRICS EST, V1
   GROVE A, 1988, J PHILOS LOGIC
   *ISO IEC, 2000, 9001 ISOIEC
   *ISO IEC, 1991, ISO1926 IEC
   Juran J.M., 1980, QUALITY PLANNING ANA, V2nd
   KAN S, 1996, METRICS MODELS SOFTW
   Kaplan C., 1995, Secrets of Software Quality: 40 Innovations from IBM
   Mc Call J. A., 1977, FACTORS SOFTWARE QUA, VI
   NEBEL B, 1994, P 2 INT C PRINC KNOW
   Nebel B., 1991, P 2 INT C PRINC KNOW
   NEBEL B, 1994, P 11 EUR C ART INT
   Peppas P., 1995, Notre Dame Journal of Formal Logic, V36, P120, DOI 10.1305/ndjfl/1040308831
   STAVRINOUDIS D, 1998, P 6 EUR C SOFTW QUAL, P229
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   XENOS M, 1998, CORRELATION DEV ORIE, P267
   Xenos M., 1995, SOFTWARE QUALITY PRO, P266, DOI [10.1007/978-0-387-34848-3_41, DOI 10.1007/978-0-387-34848-3_41]
NR 23
TC 7
Z9 7
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2005
VL 13
IS 2
BP 155
EP 175
DI 10.1007/s11219-005-6215-9
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 918NP
UT WOS:000228549200004
DA 2024-07-18
ER

PT J
AU Kothari, SC
   Bishop, L
   Sauceda, J
   Daugherty, G
AF Kothari, SC
   Bishop, L
   Sauceda, J
   Daugherty, G
TI A pattern-based framework for software anomaly detection
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software inspection; software tools framework; pattern specification
   language; high assurance software; safety-critical avionics systems
ID INSPECTIONS
AB This paper presents a pattern-based framework for developing tool support to detect software anomalies. The use of a pattern-based approach is important because it provides the flexibility needed to address domain-specific needs, with respect to the types of problems the tools detect and the strategies used to inspect and adapt the code. Patterns can be used to detect a variety of problems, ranging from simple syntactic issues to difficult semantic problems requiring global analysis. Patterns can also be used to describe transformations of the software, used to rectify problems detected through software inspection, and to support interactive inspection and adaptation when full automation is impractical. This paper describes a part of the Knowledge Centric Software (KCS) framework that embodies the pattern-based approach and provides capabilities for addressing different languages and different application domains. While only the part of the framework relevant to code inspections is addressed in this paper, in future, we also expect to address UML analysis and design models. As an application of the research, we present an overview of an inspection tool being developed for high assurance software for avionics systems.
C1 Iowa State Univ, Dept Elect & Comp Engn, Ames, IA 50011 USA.
   Rockwell Collins, Ctr Adv Technol, Cedar Rapids, IA USA.
   EnSoft Corp, Ames, IA USA.
C3 Iowa State University; Rockwell Collins
RP Iowa State Univ, Dept Elect & Comp Engn, Ames, IA 50011 USA.
EM Kothari@iastate.edu
CR ANDERSON P, 2003, IEEE SOFTWARE    JUL, P42
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], XSLT EXTENSIBLE STYL
   Antoniol G, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P72, DOI 10.1109/ICSM.1997.624233
   Aurum A, 2002, SOFTW TEST VERIF REL, V12, P133, DOI 10.1002/stvr.243
   Bishop P., 2002, Computer Safety, Reliability and Security. 21st International Conference, SAFECOMP 2002. Proceedings (Lecture Notes in Computer Science Vol.2434), P198
   CHILENSKI JJ, 1994, SOFTWARE ENG J, V9, P193, DOI 10.1049/sej.1994.0025
   DAUGHERTY G, 2002, PATTERN EXAMPLES VER
   Douglass B.P., 2002, REAL TIME DESIGN PAT
   *FAA NASA, 2002, IN PRESS P 1 FAA NAS
   FAGAN ME, 1976, IBM SYST J, V15, P182, DOI 10.1147/sj.153.0182
   Fiutem R, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P319, DOI 10.1109/ICSM.1996.565035
   FLESCA S, 2002, P INT DAT ENG APPL S
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gilb Tom, 1993, Software inspections
   HARANDI MT, 1990, IEEE SOFTWARE, V7, P74, DOI 10.1109/52.43052
   *ISO, ISO AD STAND
   KAMPERMAN J, AUTOMATED SOFTWARE I
   KOTHARI SC, 2002, ASP OR PROGR HIGH PE
   Laitenberger O., 2002, HDB SOFTWARE ENG KNO, P517
   LITTLEFAIR T, 2001, THESIS COWAN U
   MCCABE TJ, 1994, CROSSTALK J DEFENSE, V7
   MITRA S, 1997, 8 SIAM C PAR PROC SC
   *OBJ MAN GROUP, 2002, OMG UN MOD LANG SPEC
   *OBJ MAN GROUP, 2002, UML 1 4 ACT SEM, pCH6
   *OBJ MAN GROUP, 2002, REQ PROP MOF 2 0 QUE
   PARNAS DL, 2003, IEEE SOFTWARE    JUL, P16
   PARNAS DL, 1994, P IFIP WORLD C, V3, P270
   PAUL S, 1994, IEEE T SOFTWARE ENG, V20, P463, DOI 10.1109/32.295894
   *REAS INC, AUT SOFTW INSP NEW A
   RTCA Inc, 1992, RTCADO178B
   Schmidt D., 2000, Pattern-Oriented Software Architecture, Patterns for Concurrent and Networked Objects, V2
   Tanenbaum A.S, 2001, Modern Operating Systems
   VIEGA J, ITS4 STATIC VULNERAB
   WAGNER D, STATIC ANAL SOFTWARE
   Warmer J., 1999, AW OBJ TECHNOL S
   SOFTWARE METRICS STA
   JSIS SEMANTIC INTERF
   FEATURES CODE INSPEC
NR 39
TC 14
Z9 16
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2004
VL 12
IS 2
BP 99
EP 120
DI 10.1023/B:SQJO.0000024058.90885.6a
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 812OG
UT WOS:000220848200002
DA 2024-07-18
ER

PT J
AU Georgiadou, E
AF Georgiadou, E
TI GEQUAMO - A generic, multilayered, customisable, software quality model
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT International Software Quality Management Conference
CY APR, 2003
CL GLASGOW, SCOTLAND
SP British Comp Soc
DE Software Quality model; multilayer model; customisable model; profiling;
   stakeholders' worldview
AB Software quality models have primarily been based on top down process improvement approaches. Such models are based on the fundamental principle of empowerment of all involved and foster a questioning attitude through the active exchange of ideas and criticism ensuring that the most appropriate approach for quality improvements is adopted. The holistic view of systems enables the incorporation of many viewpoints held by different parties within the same organisation and by the same party at different stages of development. In this paper the GEQUAMO (GEneric, multilayered and customisable) QUAlity MOdel is proposed. GEQUAMO encapsulates the requirements of different stakeholders in a dynamic and flexible manner so as to enable each stakeholder (developer, user or sponsor) to construct their own model reflecting the emphasis/weighting for each attribute/requirement. Using a combination of the CFD (Composite Features Diagramming Technique) developed by the author, and Kiviat diagrams a multilayered and dynamic model is constructed. Instances of models are presented together with the algorithm for the computation of the profiles. Indications of future work conclude the paper.
C1 Middlesex Univ, Sch Comp Sci, London N14 4YZ, England.
C3 Middlesex University
RP Georgiadou, E (corresponding author), Middlesex Univ, Sch Comp Sci, Trent Pk Campus,Bramley Rd, London N14 4YZ, England.
CR [Anonymous], 2001, ISO9126
   [Anonymous], 1989, Software risk management tutorial
   Barbor N., 2002, P QUAL WEEK SAN FRAN
   Burr A, 1995, 5 WORLD C TOT QUAL I
   Checkland P.Scholes., 1990, SOFT SYSTEMS METHODO
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   Fenton NE., 1991, Software Metrics: A Rigorous Approach
   Georgiadou E., 1998, P 12 INT C ISR SOC Q
   HYATT I, 1996, SOFTWARE QUALITY MOD
   INCE D, 1995, SOFTWARE QUALITY ASS
   *ISO, 1998, ISO12207
   Logothetis N., 1989, QUALITY DESIGN EXPT
   McCall JA, 1977, US ROME AIR DEV CTR
   SIAKAS K, 1997, 7 WORLD C TOT QUAL M
   SIAKAS KV, 2002, THESIS LONDON METROP
   SWEBOK 2001
NR 16
TC 17
Z9 18
U1 0
U2 3
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD NOV
PY 2003
VL 11
IS 4
BP 313
EP 323
DI 10.1023/A:1025817312035
PG 11
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 724YV
UT WOS:000185516600005
DA 2024-07-18
ER

PT J
AU Khoshgoftaar, TM
   Allen, EB
AF Khoshgoftaar, TM
   Allen, EB
TI Ordering fault-prone software modules
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software reliability; fault-prone modules; software quality models;
   module-order model; multiple linear regression
ID METRICS; COMPLEXITY; QUALITY; MODELS; PROGRAMS; ERRORS
AB Software developers apply various techniques early in development to improve software reliability, such as extra reviews, additional testing, and strategic assignment of personnel. Due to limited resources and time, it is often not practical to enhance the reliability of all modules. Our goal is to target reliability enhancement activities to those modules that would otherwise have problems later. Prior research has shown that a software quality model based on software product and process metrics can predict which modules are likely to have faults.
   A module-order model is a quantitative software quality model that is used to predict the rank-order of modules according to a quality factor, such as the number of faults. The contribution of this paper is definition of module-order models and a method for their evaluation and use. Two empirical case studies of full-scale industrial software systems provide empirical evidence of the usefulness of module-order models for targeting reliability enhancement.
C1 Florida Atlantic Univ, Dept Comp Sci & Engn, Boca Raton, FL 33431 USA.
   Mississippi State Univ, Dept Comp Sci & Engn, Mississippi State, MS USA.
   Florida Atlantic Univ, Empir Software Engn Lab, Boca Raton, FL 33431 USA.
C3 State University System of Florida; Florida Atlantic University;
   Mississippi State University; State University System of Florida;
   Florida Atlantic University
RP Florida Atlantic Univ, Dept Comp Sci & Engn, Boca Raton, FL 33431 USA.
EM taghi@cse.fau.edu; edward.allen@computer.org
CR [Anonymous], 1997, Software metrics: A rigorous and practical approach
   Briand L., 1996, Empirical Software Engineering, V1, P61, DOI 10.1007/BF00125812
   BRIAND LC, 1993, IEEE T SOFTWARE ENG, V19, P1028, DOI 10.1109/32.256851
   BRIAND LC, 1997, EMPIR SOFTW ENG, V2, P317
   Dillon W.R., 1984, MULTIVARIATE ANAL ME
   Ebert C, 1996, SOFTWARE QUAL J, V5, P255, DOI 10.1007/BF00209184
   Gokhale S.S., 1997, PROC 3 ISSAT INT C R, P31
   Hudepohl JP, 1996, IEEE SOFTWARE, V13, P56, DOI 10.1109/52.536459
   Khosgoftaar TM, 1998, NINTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P344, DOI 10.1109/ISSRE.1998.730899
   Khoshgoftaar T. M., 1992, Proceedings. Third International Symposium on Software Reliability Engineering (Cat. No.92TH0486-1), P83, DOI 10.1109/ISSRE.1992.285855
   Khoshgoftaar T. M., 1998, INT J RELIABILITY QU, V5, P227
   Khoshgoftaar TM, 1998, COMPUTER, V31, P66, DOI 10.1109/2.666844
   Khoshgoftaar TM, 1996, IEEE SOFTWARE, V13, P65, DOI 10.1109/52.476287
   KHOSHGOFTAAR TM, 1992, IEEE T RELIAB, V41, P390, DOI 10.1109/24.159804
   KHOSHGOFTAAR TM, 1990, IEEE J SEL AREA COMM, V8, P253, DOI 10.1109/49.46879
   KHOSHGOFTAAR TM, 1992, IEEE T SOFTWARE ENG, V18, P979, DOI 10.1109/32.177367
   KHOSHGOFTAAR TM, 1994, J SYST SOFTWARE, V24, P211, DOI 10.1016/0164-1212(94)90064-7
   Khoshgoftaar TM, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P54, DOI 10.1109/METRIC.1997.637165
   Khoshgoftaar TM, 1996, SEVENTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P364, DOI 10.1109/ISSRE.1996.558896
   KHOSHGOFTAAR TM, 1998, ADV FUZZY SYSTEMS AP, V16, P176
   LANNING DL, 1995, IEEE T RELIAB, V44, P677, DOI 10.1109/24.476001
   Leake D. B., 1996, Case-Based Reasoning: Experiences, lessons and future directions
   Lyu M., 1996, Handbook of Software Reliability Engineering
   LYU MR, 1995, P 25 INT S FAULT TOL, P137
   MCCABE TJ, 1989, COMMUN ACM, V32, P1415, DOI 10.1145/76380.76382
   MUNSON JC, 1992, IEEE T SOFTWARE ENG, V18, P423, DOI 10.1109/32.135775
   MYERS RH, 1990, DUXBURY SERIES
   NIKORA AP, 1997, P INT SOC SCI APPL T, P25
   Ohlsson N, 1996, IEEE T SOFTWARE ENG, V22, P886, DOI 10.1109/32.553637
   OHLSSON N, 1996, P 6 INT C SOFTW QUAL, P2
   Pfleeger S. L., 1995, Annals of Software Engineering, V1, P219, DOI 10.1007/BF02249052
   Pfleeger SL, 1997, IEEE SOFTWARE, V14, P25
   Schneidewind N. F., 1995, Annals of Software Engineering, V1, P287, DOI 10.1007/BF02249054
   SCHNEIDEWIND NF, 1992, IEEE T SOFTWARE ENG, V18, P410, DOI 10.1109/32.135774
   Seber G A., 2009, Multivariate observations, DOI DOI 10.1002/9780470316641
   VOTTA LG, 1995, PROC INT CONF SOFTW, P277, DOI 10.1145/225014.225040
   Vouk M. A., 1993, Proceedings CASCON '93, P513
   Zuse H., 1997, Empirical Software Engineering, V2, P313, DOI 10.1023/A:1009772101672
NR 38
TC 30
Z9 37
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAY
PY 2003
VL 11
IS 1
BP 19
EP 37
DI 10.1023/A:1023632027907
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 674WP
UT WOS:000182660400004
DA 2024-07-18
ER

PT J
AU Siebert, J
   Joeckel, L
   Heidrich, J
   Trendowicz, A
   Nakamichi, K
   Ohashi, K
   Namba, I
   Yamamoto, R
   Aoyama, M
AF Siebert, Julien
   Joeckel, Lisa
   Heidrich, Jens
   Trendowicz, Adam
   Nakamichi, Koji
   Ohashi, Kyoko
   Namba, Isao
   Yamamoto, Rieko
   Aoyama, Mikio
TI Construction of a quality model for machine learning systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Machine learning; Quality requirements; Software quality; Quality
   evaluation; Quality model
ID KNOWLEDGE DISCOVERY
AB Nowadays, systems containing components based on machine learning (ML) methods are becoming more widespread. In order to ensure the intended behavior of a software system, there are standards that define necessary qualities of the system and its components (such as ISO/IEC 25010). Due to the different nature of ML, we have to re-interpret existing qualities for ML systems or add new ones (such as trustworthiness). We have to be very precise about which quality property is relevant for which entity of interest (such as completeness of training data or correctness of trained model), and how to objectively evaluate adherence to quality requirements. In this article, we present how to systematically construct quality models for ML systems based on an industrial use case. This quality model enables practitioners to specify and assess qualities for ML systems objectively. In addition to the overall construction process described, the main outcomes include a meta-model for specifying quality models for ML systems, reference elements regarding relevant views, entities, quality properties, and measures for ML systems based on existing research, an example instantiation of a quality model for a concrete industrial use case, and lessons learned from applying the construction process. We found that it is crucial to follow a systematic process in order to come up with measurable quality properties that can be evaluated in practice. In the future, we want to learn how the term quality differs between different types of ML systems and come up with reference quality models for evaluating qualities of ML systems.
C1 [Siebert, Julien; Joeckel, Lisa; Trendowicz, Adam] Fraunhofer IESE, Kaiserslautern, Germany.
   [Heidrich, Jens] Fraunhofer IESE, Smart Digital Solut Dept, Kaiserslautern, Germany.
   [Nakamichi, Koji; Ohashi, Kyoko; Namba, Isao; Yamamoto, Rieko] Fujitsu Labs Ltd, Kawasaki, Kanagawa, Japan.
   [Aoyama, Mikio] Nanzan Univ, Dept Software Engn, Nagoya, Aichi, Japan.
C3 Fujitsu Ltd; Fujitsu Laboratories Ltd
RP Siebert, J (corresponding author), Fraunhofer IESE, Kaiserslautern, Germany.
EM julien.siebert@iese.fraunhofer.de
RI Heidrich, Jens/JIX-1070-2023
FU Projekt DEAL
FX Open Access funding enabled and organized by Projekt DEAL.
CR Ahmed I., 2019, INT SYMP EMP SOFTWAR, P1, DOI DOI 10.1109/esem.2019.8870157
   Amershi S, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P291, DOI 10.1109/ICSE-SEIP.2019.00042
   [Anonymous], 2011, ISO/IEC 25010:2011
   [Anonymous], 2011, 8000 ISO TS
   Arpteg A, 2018, EUROMICRO CONF PROC, P50, DOI 10.1109/SEAA.2018.00018
   Barocas S, 2017, COMMUN ACM, V60, P23, DOI 10.1145/3144172
   Belani H, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P252, DOI 10.1109/REW.2019.00051
   Calder M, 2018, ROY SOC OPEN SCI, V5, DOI 10.1098/rsos.172096
   Cowan D., 2021, MACHINE LEARNING MOD
   Edmonds B, 2002, USE MODELS MAKING MA
   Edmonds B, 2019, JASSS-J ARTIF SOC S, V22, DOI 10.18564/jasss.3993
   Emmons S, 2016, PLOS ONE, V11, DOI 10.1371/journal.pone.0159161
   Epstein JM, 2008, JASSS-J ARTIF SOC S, V11
   Flach P. A., 2020, IEEE T KNOWLEDGE DAT, V1
   Fujii G, 2020, INT J SOFTW ENG KNOW, V30, P1589, DOI 10.1142/S0218194020400227
   & Gansel T., 2017, TESTING ARTIFICIAL I
   Heidrich J., 2020, 28 IEEE INT REQ ENG
   High Level Expert Group on Artificial Intelligence, 2019, Ethics Guidelines for Trustworthy AI
   Horkoff J, 2019, INT REQUIR ENG CONF, P386, DOI 10.1109/RE.2019.00050
   Hossin M., 2015, INT J DATA MIN KNOWL, V5, P1, DOI DOI 10.5121/IJDKP.2015.5201
   Hutter F, 2019, SPRING SER CHALLENGE, P1, DOI 10.1007/978-3-030-05318-5
   Hyrynsalmi S., 2018, CEUR WORKSHOP PROC, P2305
   IBM, AN SOL UN METH IMPL
   Ishikawa F, 2018, LECT NOTES COMPUT SC, V11157, P536, DOI 10.1007/978-3-030-00847-5_39
   Ismail A, 2019, J BIG DATA-GER, V6, DOI 10.1186/s40537-018-0162-3
   & Kang, 2020, 42 INT C SOFTW ENG I
   Kaufman S., 2011, Proceedings of the 17th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, P556, DOI 10.1145/2020408.2020496
   Kläs M, 2018, LECT NOTES COMPUT SC, V11094, P431, DOI 10.1007/978-3-319-99229-7_36
   Kleinberg Jon, 2016, ARXIV160905807
   Kumeno F., 2020, IDT, V13, P463, DOI [10.3233/IDT-190160, DOI 10.3233/IDT-190160]
   Kurakin A., 2016, WORKSHOP TRACK P
   Kurgan LA, 2006, KNOWL ENG REV, V21, P1, DOI 10.1017/S0269888906000738
   Liu Y., 2020, IEEE T SOFTWARE ENG, V1
   Lwakatare LE, 2020, INFORM SOFTWARE TECH, V127, DOI 10.1016/j.infsof.2020.106368
   Mariscal G, 2010, KNOWL ENG REV, V25, P137, DOI 10.1017/S0269888910000032
   Marz N., 2015, Big Data: Principles and Best Practices of Scalable Realtime Data Systems
   Microsoft, 2019, TEAM DAT SCI PROC DO
   Murphy, 2019, IEEE T SOFTWARE ENG, V1
   Nakajima S, 2018, IEEE GLOB CONF CONSU, P601, DOI 10.1109/GCCE.2018.8574766
   Nistala P, 2019, 2019 IEEE/ACM INTERNATIONAL CONFERENCE ON SOFTWARE AND SYSTEM PROCESSES (ICSSP 2019), P125, DOI 10.1109/ICSSP.2019.00025
   Poth A, 2020, 2020 IEEE 20TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY, AND SECURITY (QRS 2020), P22, DOI 10.1109/QRS51102.2020.00016
   Sculley D, 2015, ADV NEURAL INFORM PR, V28, P2503, DOI DOI 10.5555/2969442.2969519
   Shaukat, 2018, MEASURE QUALITY ARTI
   Shearer C, 2000, J DATA WAREHOUSING, V5, P14
   Siebert J., 2020, Quality of Information and Communications Technology, P17
   SPEC, D 92001 01 KUNSTLICH
   Vogelsang A, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P245, DOI 10.1109/REW.2019.00050
   Wagner S, 2015, INFORM SOFTWARE TECH, V62, P101, DOI 10.1016/j.infsof.2015.02.009
   Xu XL, 2021, SOFTWARE PRACT EXPER, V51, P2015, DOI 10.1002/spe.2749
   Zhang D, 2002, PROC INT C TOOLS ART, P22, DOI 10.1109/TAI.2002.1180784
NR 50
TC 18
Z9 20
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 307
EP 335
DI 10.1007/s11219-021-09557-y
EA JUN 2021
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000665675100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Ufuktepe, DK
   Ayav, T
   Belli, F
AF Ufuktepe, Deniz Kavzak
   Ayav, Tolga
   Belli, Fevzi
TI Test input generation from cause-effect graphs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test input generation; Specification-based testing; Cause-effect graph;
   Spectral analysis; Boolean expressions
ID SELECTION-STRATEGIES
AB Cause-effect graphing is a well-known requirement-based and systematic testing method with a heuristic approach. Since it was introduced by Myers in 1979, there have not been any sufficiently comprehensive studies to generate test inputs from these graphs. However, there exist several methods for test input generation from Boolean expressions. Cause-effect graphs can be more convenient for a wide variety of users compared to Boolean expressions. Moreover, they can be used to enforce common constraints and rules on the system variables of different expressions of the system. This study proposes a new mutant-based test input generation method, Spectral Testing for Boolean specification models based on spectral analysis of Boolean expressions using mutations of the original expression. Unlike Myers' method, Spectral Testing is an algorithmic and deterministic method, in which we model the possible faults systematically. Furthermore, the conversion of cause-effect graphs between Boolean expressions is explored so that the existing test input generation methods for Boolean expressions can be exploited for cause-effect graphing. A software is developed as an open-source extendable tool for generating test inputs from cause-effect graphs by using different methods and performing mutation analysis for quantitative evaluation on these methods for further analysis and comparison. Selected methods, MI, MAX-A, MUTP, MNFP, CUTPNFP, MUMCUT, Unique MC/DC, and Masking MC/DC are implemented together with Myers' technique and the proposed Spectral Testing in the developed tool. For mutation testing, 9 common fault types of Boolean expressions are modeled, implemented, and generated in the tool. An XML-based standard on top of GraphML representing a cause-effect graph is proposed and is used as the input type to the approach. An empirical study is performed by a case study on 5 different systems with various requirements, including the benchmark set from the TCAS-II system. Our results show that the proposed XML-based cause-effect graph model can be used to represent system requirements. The developed tool can be used for test input generation from proposed cause-effect graph models and can perform mutation analysis to distinguish between the methods with respect to the effectiveness of test inputs and their mutant kill scores. The proposed Spectral Testing method outperforms the state-of-the-art methods in the context of critical systems, regarding both the effectiveness and mutant kill scores of the generated test inputs, and increasing the chances of revealing faults in the system and reducing the cost of testing. Moreover, the proposed method can be used as a separate or complementary method to other well-performing test input generation methods for covering specific fault types.
C1 [Ufuktepe, Deniz Kavzak] Univ Missouri, Dept Elect Engn & Comp Sci, Columbia, MO USA.
   [Ayav, Tolga; Belli, Fevzi] Izmir Inst Technol, Dept Comp Engn, Izmir, Turkey.
   [Belli, Fevzi] Paderborn Univ, Dept Elect Engn & Informat Technol, Paderborn, Germany.
C3 University of Missouri System; University of Missouri Columbia; Izmir
   Institute of Technology; University of Paderborn
RP Ayav, T (corresponding author), Izmir Inst Technol, Dept Comp Engn, Izmir, Turkey.
EM deniz.kayzakufuktepe@mail.missouri.edu; tolgaayav@iyte.edu.tr;
   belli@upb.de
OI Ayav, Tolga/0000-0003-1426-5694
CR Agrawal, 2006, IEEE N ATLANTIC TEST
   Atlee J. M., 1996, Proceedings of the 1996 International Symposium on Software Testing and Analysis (ISSTA), P280, DOI 10.1145/226295.226326
   Badgett C, 2012, ART SOFTWARE TESTING, V3
   Badhera U., 2011, International Journal of Computer Science Engineering, V3, P81
   C. A. S, 2011, RATIONALE ACCEPTING
   Chekam TT, 2017, PROC INT CONF SOFTW, P597, DOI 10.1109/ICSE.2017.61
   Chen TY, 2009, SOFTWARE QUAL J, V17, P245, DOI 10.1007/s11219-008-9064-5
   Chen T. Y., 1999, Proceedings Sixth Asia Pacific Software Engineering Conference (ASPEC'99) (Cat. No.PR00509), P606, DOI 10.1109/APSEC.1999.809656
   Chen TY, 2003, ITRE2003: INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: RESEARCH AND EDUCATION, P625, DOI 10.1109/ITRE.2003.1270695
   Chen TY, 1997, P INT COMP SOFTW APP, P608, DOI 10.1109/CMPSAC.1997.625080
   Chen TY, 2001, SOFTW TEST VERIF REL, V11, P165, DOI 10.1002/stvr.221
   Chen ZY, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000791.2000797
   Chilenski J.J., 2001, INVESTIGATION 3 FORM
   CHILENSKI JJ, 1994, SOFTWARE ENG J, V9, P193, DOI 10.1049/sej.1994.0025
   de Wolf R., 2008, Theory Comput., P1
   Elmendorf William R, 1973, CAUSE EFFECT GRAPHS
   Falkowski BJ, 2002, VLSI DES, V14, P83, DOI 10.1080/10655140290009828
   Foster K. A., 1984, SIGSOFT Software Engineering Notes, V9, P120, DOI 10.1145/1010925.1010935
   Gargantini A, 2011, INFORM SOFTWARE TECH, V53, P1263, DOI 10.1016/j.infsof.2011.06.008
   Gephi, 2019, GEPH OP GRAPH VIZ PL
   GraphML, 2019, GRAPHML FILE FORMAT
   Hatrola S, 2009, ACM SIGSOFT SOFTWARE, V34, P2
   Heitmeyer ConstanceL., 2000, Journal of Universal Computer Science, V6, P650
   Jia Yue, 2016, P 25 INT S SOFTWARE, P354
   Jin ZY, 1996, SECOND IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS, P514, DOI 10.1109/ICECCS.1996.558533
   József S, 2013, IEEE 9TH INTERNATIONAL CONFERENCE ON COMPUTATIONAL CYBERNETICS (ICCC 2013), P225, DOI 10.1109/ICCCyb.2013.6617593
   Kaminski G, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P356, DOI 10.1109/ICST.2009.14
   Kapoor K, 2007, ACM T SOFTW ENG METH, V16, pA1, DOI 10.1145/1243987.1243988
   KavzakUfuktepe D, 2016, TEST CASE GENERATION
   Kuhn DR, 1999, ACM T SOFTW ENG METH, V8, P411, DOI 10.1145/322993.322996
   Kuo-Chung Tai, 1993, Proceedings CASCON '93, P495
   Lau MF, 2005, ACM T SOFTW ENG METH, V14, P247, DOI 10.1145/1072997.1072998
   Mathur P.A., 2008, Foundations of Software Testing, VFirst
   Neto FGD, 2019, J SYST SOFTWARE, V156, P246, DOI 10.1016/j.jss.2019.07.002
   Nursimulu K., 1995, P 1995 C CTR ADV STU, P46
   O'Donnell R, 2008, ACM S THEORY COMPUT, P569
   ODonnell R., 2012, WORKSHOP COMPUTATION
   Offutt J, 2003, SOFTW TEST VERIF REL, V13, P25, DOI 10.1002/stvr.264
   Papadakis M, 2019, ADV COMPUT, V112, P275, DOI 10.1016/bs.adcom.2018.03.015
   Papadakis M, 2014, SCI COMPUT PROGRAM, V95, P298, DOI 10.1016/j.scico.2014.05.012
   Paradkar A, 1997, ANN SOFTW ENG, V4, P133, DOI 10.1023/A:1018979130614
   Paradkar A, 1996, IEEE T RELIAB, V45, P515, DOI 10.1109/24.556575
   Paradkar A., 1995, Proceedings of the 1995 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'95, P48
   Paradkar A., 1994, Proceedings of the 1994 conference of the Centre for Advanced Studies on Collaborative research, P51
   Parnas DL., 1992, SOFTWARE REQUIREMENT
   REED IS, 1973, SIAM J APPL MATH, V24, P134, DOI 10.1137/0124014
   Singh R.K., 2006, ACM SIGSOFT Software Engineering Notes, V31, P1
   Sun CA, 2015, COMPUT J, V58, P1199, DOI 10.1093/comjnl/bxu055
   SUSSKIND AK, 1983, IEEE T COMPUT, V32, P198, DOI 10.1109/TC.1983.1676204
   Tsuchiya T, 2002, ACM T SOFTW ENG METH, V11, P58, DOI 10.1145/504087.504089
   Vilkomir S, 2013, IEEE ICST WORKSHOP, P249, DOI 10.1109/ICSTW.2013.83
   WEYUKER E, 1994, IEEE T SOFTWARE ENG, V20, P353, DOI 10.1109/32.286420
   Wohlin C., 2012, Experimentation in Software Engineering
   Xu, 2012, P 27 ANN ACM S APPL, P1191
   Yogi N, 2009, SPECTRAL METHODS TES
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yu, 2018, INT C SOFTW ENG KNOW, P720
NR 57
TC 9
Z9 9
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2021
VL 29
IS 4
BP 733
EP 782
DI 10.1007/s11219-021-09560-3
EA JUN 2021
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XE8XW
UT WOS:000663243500001
DA 2024-07-18
ER

PT J
AU Wu, J
   Wu , YB
   Niu, N
   Zhou, M
AF Wu, Jie
   Wu, Yingbo
   Niu, Nan
   Zhou, Min
TI MHCPDP: multi-source heterogeneous cross-project defect prediction via
   multi-source transfer learning and autoencoder
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Autoencoder; Heterogeneous cross-project defect prediction; Multi-source
   transfer learning; Modified autoencoder
ID CANONICAL CORRELATION-ANALYSIS
AB Heterogeneous cross-project defect prediction (HCPDP) is aimed at building a defect prediction model for the target project by reusing datasets from source projects, where the source project datasets and target project dataset have different features. Most existing HCPDP methods only remove redundant or unrelated features without exploring the underlying features of cross-project datasets. Additionally, when the transfer learning method is used in HCPDP, these methods ignore the negative effect of transfer learning. In this paper, we propose a novel HCPDP method called multi-source heterogeneous cross-project defect prediction (MHCPDP). To reduce the gap between the target datasets and the source datasets, MHCPDP uses the autoencoder to extract the intermediate features from the original datasets instead of simply removing redundant and unrelated features and adopts a modified autoencoder algorithm to make instance selection for eliminating irrelevant instances from the source domain datasets. Furthermore, by incorporating multiple source projects to increase the number of source datasets, MHCPDP develops a multi-source transfer learning algorithm to reduce the impact of negative transfers and upgrade the performance of the classifier. We comprehensively evaluate MHCPDP on five open source datasets; our experimental results show that MHCPDP not only has significant improvement in two performance metrics but also overcomes the shortcomings of the conventional HCPDP methods.
C1 [Wu, Jie; Wu, Yingbo; Zhou, Min] Chongqing Univ, Sch Software Engn, Chongqing, Peoples R China.
   [Niu, Nan] Univ Cincinnati, Dept Elect Engn & Comp Sci, Cincinnati, OH USA.
C3 Chongqing University; University System of Ohio; University of
   Cincinnati
RP Wu , YB (corresponding author), Chongqing Univ, Sch Software Engn, Chongqing, Peoples R China.
EM wyb@cqu.edu.cn
FU National Key Research and Development Project [2019YFB1706101];
   Science-Technology Foundation of Chongqing, China
   [cstc2019jscx-mbdx0083]
FX This work was supported in part by National Key Research and Development
   Project under grant 2019YFB1706101 and in part by the Science-Technology
   Foundation of Chongqing, China, under grant cstc2019jscx-mbdx0083.
CR [Anonymous], 2010, Proceedings of 2010 IEEE Conference on Computer Vision and Pattern Recognition, DOI DOI 10.1109/CVPR.2010.5539857
   Briand LC, 2002, IEEE T SOFTWARE ENG, V28, P706, DOI 10.1109/TSE.2002.1019484
   Chen HHJ, 2023, INTERACT LEARN ENVIR, V31, P1335, DOI 10.1080/10494820.2020.1833043
   Cheung S.C., 2011, P JOINT M EUR SOFTW, P2
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Du XT, 2020, SOFTWARE QUAL J, V28, P39, DOI 10.1007/s11219-019-09467-0
   Fawcett T, 2006, PATTERN RECOGN LETT, V27, P861, DOI 10.1016/j.patrec.2005.10.010
   Ghotra B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P789, DOI 10.1109/ICSE.2015.91
   He ZM, 2012, AUTOMAT SOFTW ENG, V19, P167, DOI 10.1007/s10515-011-0090-3
   Herzig K, 2013, PROC INT SYMP SOFTW, P118, DOI 10.1109/ISSRE.2013.6698911
   Herzig Kim., 2013, CLASSIFYING CODE CHA
   Hinton GE, 2006, SCIENCE, V313, P504, DOI 10.1126/science.1127647
   Hosmer DW, 2013, WILEY SER PROBAB ST, P1
   Hosseini S, 2019, IEEE T SOFTWARE ENG, V45, P111, DOI 10.1109/TSE.2017.2770124
   Jiang Y, 2008, EMPIR SOFTW ENG, V13, P561, DOI 10.1007/s10664-008-9079-3
   Jing XY, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P496, DOI 10.1145/2786805.2786813
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   KNAPP TR, 1978, PSYCHOL BULL, V85, P410, DOI 10.1037/0033-2909.85.2.410
   Lee T., 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering, P311
   Li ZQ, 2019, AUTOMAT SOFTW ENG, V26, P599, DOI 10.1007/s10515-019-00259-1
   Li ZQ, 2019, IEEE T SOFTWARE ENG, V45, P391, DOI 10.1109/TSE.2017.2780222
   Li ZQ, 2018, AUTOMAT SOFTW ENG, V25, P201, DOI 10.1007/s10515-017-0220-7
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Nam J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P508, DOI 10.1145/2786805.2786814
   Nam J, 2015, IEEE INT CONF AUTOM, P452, DOI 10.1109/ASE.2015.56
   Nam J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P382, DOI 10.1109/ICSE.2013.6606584
   Pan SJ, 2011, IEEE T NEURAL NETWOR, V22, P199, DOI 10.1109/TNN.2010.2091281
   Pan SJ, 2010, IEEE T KNOWL DATA EN, V22, P1345, DOI 10.1109/TKDE.2009.191
   Peters F, 2012, PROC INT CONF SOFTW, P189, DOI 10.1109/ICSE.2012.6227194
   Pingclasai N, 2013, ASIA PAC SOFWR ENG, P13, DOI 10.1109/APSEC.2013.105
   Rahman F, 2012, Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE '12, P61
   Shi F. Z., 2015, SURVEY TRANSFER, P26
   Tan B. Y, 2017, 2013 35 INT C SOFTW, P382
   Tantithamthavorn C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P812, DOI 10.1109/ICSE.2015.93
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Xu Z, 2018, IEEE ACCESS, V6, P57597, DOI 10.1109/ACCESS.2018.2873755
   Xu Z, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P370, DOI 10.1109/SANER.2016.34
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 41
TC 16
Z9 16
U1 2
U2 27
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 405
EP 430
DI 10.1007/s11219-021-09553-2
EA APR 2021
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000644734500001
DA 2024-07-18
ER

PT J
AU Bhushan, M
   Negi, A
   Samant, P
   Goel, S
   Kumar, A
AF Bhushan, Megha
   Negi, Arun
   Samant, Piyush
   Goel, Shivani
   Kumar, Ajay
TI A classification and systematic review of product line feature model
   defects
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Feature model; Software product line; Defect; Product line model;
   Quality
ID VERIFICATION; VARIABILITY; SEMANTICS
AB Product line (PL)-based development is a thriving research area to develop software-intensive systems. Feature models (FMs) facilitate derivation of valid products from a PL by managing commonalities and variabilities among software products. However, the researchers in academia as well as in the industries experience difficulties in quality assessment of FMs. The increasing complexity and size of FMs may lead to defects, which outweigh the benefits of PL. This paper provides a systematic literature review and key research issues related to the FM defects in PL. We derive a typology of FM defects according to their level of importance. The information on defects' identification and explanations are provided with formalization. Further, corrective explanations are presented which incorporates various techniques used to fix defects with their implementation. This information would help software engineering community by enabling developers or modelers to find the types of defects and their causes and to choose an appropriate technique to fix defects in order to produce defect-free products from FMs, thereby enhancing the overall quality of PL-based development.
C1 [Bhushan, Megha] DIT Univ, Sch Comp, Dehra Dun, Uttarakhand, India.
   [Negi, Arun] Deloitte USI, Cyber Advisory, Hyderabad, India.
   [Samant, Piyush] Adventum Adv Solut Pvt Ltd, Bangalore, Karnataka, India.
   [Goel, Shivani] Bennett Univ, Greater Noida, Uttar Pradesh, India.
   [Kumar, Ajay] Thapar Inst Engn, Patiala, Punjab, India.
C3 DIT University; Deloitte Touche Tohmatsu Limited; Thapar Institute of
   Engineering & Technology
RP Bhushan, M (corresponding author), DIT Univ, Sch Comp, Dehra Dun, Uttarakhand, India.
EM megha@chitkara.edu.in; arun98765@gmail.com; piyush.e8056@cumail.in;
   shivani.goel@bennett.edu.in; ajaykumar@thapar.edu
RI Bhushan, Megha/KIJ-4277-2024; Samant, Piyush/AAQ-7314-2021; Bhushan,
   Megha/ABC-8720-2020; Bhushan, Megha/KIJ-1166-2024; kumar,
   ajay/G-1509-2014
OI Bhushan, Megha/0000-0003-4309-875X; Bhushan, Megha/0000-0003-4309-875X;
   Bhushan, Megha/0000-0003-4309-875X; kumar, ajay/0000-0002-4452-4725;
   Negi, Arun/0000-0002-1768-4053; Samant, Piyush/0000-0001-9181-9932
FU University Grants Commission (UGC), New Delhi, Government of India
   [F117.1/201415/RGNF201415SCJAM66324]
FX One of the authors, Megha, gratefully acknowledges the University Grants
   Commission (UGC), New Delhi, Government of India, for awarding her the
   Rajiv Gandhi National Fellowship (Grant no.
   F117.1/201415/RGNF201415SCJAM66324) to carry out this research work. We
   would like to thank Vikram Jeet Singh, Research Scholar, Department of
   Computer Science, Himachal Pradesh University, Shimla, India.
CR [Anonymous], OOPSLA 05 WORKSH SOF
   [Anonymous], 2007, SOFTWARE PRODUCT LIN
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], 2009, P 2009 ACM S APPL CO
   Baader F., 2003, DESCRIPTION LOGIC HD
   Bachmeyer RC, 2007, LECT NOTES ARTIF INT, V4604, P179
   Badeau R, 2006, INT CONF ACOUST SPEE, P3003
   Barbara K., 2007, EBSE200701 KEEL U U
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Batory D, 2006, COMMUN ACM, V49, P45, DOI 10.1145/1183236.1183264
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Benavides D., 2007, PROCEEDING 1 INT WOR, P129
   BENAVIDES D, 2007, THESIS U SEVILLE SPA
   Benavides D., 2005, P INT C SOFTW ENG KN, P677
   Benavides D, 2006, LECT NOTES COMPUT SC, V4143, P399
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Borning A, 1992, LISP SYMBOLIC COMPUT, V5, P123
   Boucher Quentin, 2010, P 4 INT WORKSH VAR M, P27
   Brereton P, 2007, J SYST SOFTWARE, V80, P571, DOI 10.1016/j.jss.2006.07.009
   Classen A, 2011, SCI COMPUT PROGRAM, V76, P1130, DOI 10.1016/j.scico.2010.10.005
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Czarnecki K, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P23, DOI 10.1109/SPLINE.2007.24
   Czarnecki Krzysztof, 2008, P 12 INT SOFTW PROD, P22
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   Dhungana D, 2011, AUTOMAT SOFTW ENG, V18, P77, DOI 10.1007/s10515-010-0076-6
   Djebbi O, 2007, 14TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P494, DOI 10.1109/ASPEC.2007.63
   Eduardo C, 2011, 11041 IT UPPS U
   Elfaki Abdelrahman Osman, 2012, Journal of Theoretical and Applied Information Technology, V42, P75
   Elfaki Abdelrahman Osman, 2010, Journal of Software Engineering and Applications, V3, P614, DOI 10.4236/jsea.2010.36072
   Elfaki A.O., 2008, P SOFTW PROD LIN C S SPLC, V2, P217
   Elfaki A.O, 2014, RES J APPL SCI ENG T, V7, P275, DOI DOI 10.19026/RJASET.7.251
   Elfaki A. O, 2013, INT J KNOWLEDGE ENG, V4, P1
   Elfaki AO, 2009, STUD COMPUT INTELL, V253, P159, DOI 10.1007/978-3-642-05441-9_14
   Fan SF, 2006, LECT NOTES ARTIF INT, V4252, P1144
   Fang G, 2008, PROCEEDINGS OF 2008 INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND CYBERNETICS, VOLS 1-7, P184, DOI 10.1109/ICMLC.2008.4620401
   Farida S, 2009, INT CONF RES CHAL, P237, DOI 10.1109/RCIS.2009.5089287
   Fei Cao, 2003, International Conference on Software Engineering Research and Practice - SERP'03, P944
   Felfernig Alexander., 2013, ConfWS-2013: 15th International Configuration Workshop (2013), p, P117
   Filho J. B. F., 2013, 17 INT SOFTW PROD LI, P72
   Galan Jesusu G., 2011, P 2 INT WORKSH FORM, P6, DOI [10.13140/2.1.3070.8801, DOI 10.13140/2.1.3070.8801]
   Gheyi Rohit., 2006, 1st Alloy workshop, P71
   GIRALDO GLORIA-LUCIA, 2014, Dyna rev.fac.nac.minas, V81, P68
   Griss ML, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P76, DOI 10.1109/ICSR.1998.685732
   Guo JM, 2012, EXPERT SYST APPL, V39, P4987, DOI 10.1016/j.eswa.2011.10.014
   Hemakumar, 2008, 1 INT WORKSH AN SOFT, P183
   Janota M, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P13
   Javed Muhammad, 2014, Computational Ecology and Software, V4, P170
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kang KC, 2002, IEEE SOFTWARE, V19, P58, DOI 10.1109/MS.2002.1020288
   Kang Kyo C, 1990, Technical Report
   Karatas AS, 2013, SCI COMPUT PROGRAM, V78, P2295, DOI 10.1016/j.scico.2012.06.004
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kitchenham Barbara, 2004, 0400011T1 KEEL U ICT
   Klaus PohlGunter Bockle Frank J van der Linden., 2005, SOFTWARE PRODUCT LIN
   Kyo C, 2002, FOPLE FEATURE ORIENT
   Lesta U, 2015, ELECTRON P THEOR COM, P31, DOI 10.4204/EPTCS.182.3
   Lutz R., 2007, 201441221 NASA JET P
   Mannion M., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P176
   Mannion M, 2004, LECT NOTES COMPUT SC, V3014, P211
   Mazo R., 2011, THESIS
   Mazo R, 2011, ENASE 2011: PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, P188
   Mazo R, 2011, P INT COMP SOFTW APP, P456, DOI 10.1109/COMPSAC.2011.66
   MENDONCA M, 2008, J SOFTWARE, V0003, P00069, DOI DOI 10.4304/jsw.3.2.69-82
   Noorian M., 2011, P DMS P 17 INT C DISTR MUL, V11, P158
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Patel S, 2013, IEEE ICST WORKSHOP, P321, DOI 10.1109/ICSTW.2013.43
   Pohl Richard, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P313, DOI 10.1109/ASE.2011.6100068
   Proceedings ( ICB Research, 2009, P 3 INT WORKSH VAR M, V29, P29
   REITER R, 1987, ARTIF INTELL, V32, P57, DOI 10.1016/0004-3702(87)90062-2
   Riebisch Matthias, 2002, P 6 WORLD C INT DES, DOI 10.1.1.15.1653
   Rincón L, 2015, ELECTRON NOTES THEOR, V314, P61, DOI 10.1016/j.entcs.2015.05.005
   Rincón LF, 2014, ELECTRON NOTES THEOR, V302, P111, DOI 10.1016/j.entcs.2014.01.023
   Ripon S, 2013, INT J STW ENG APPL, V4, P63, DOI [10.5121/ijsea.2013.4505, DOI 10.5121/IJSEA.2013.4505]
   Salinesi C., 2010, P 18 IEEE INT C REQ, P50
   Salinesi C., 2010, 28 INFORSID, P293
   Salinesi C, 2011, P 5 IEEE INT C RES C, P29
   Salinesi Camille, 2012, Software Product Line-Advanced Topic, DOI [10.5772/35662, DOI 10.5772/35662]
   Sannella M., 1994, UIST '94. Seventh Annual Symposium on User Interface Software and Technology. Proceedings of the ACM Symposium on User Interface Software and Technology, P137, DOI 10.1145/192426.192485
   Schmid K, 2004, SCI COMPUT PROGRAM, V53, P259, DOI 10.1016/j.scico.2003.04.002
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Segura Sergio, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P35, DOI 10.1109/ICST.2010.20
   Segura S., 2012, Proceedings of the Sixth International Workshop on Variability Modeling of Software-Intensive Systems, P63, DOI DOI 10.1145/2110147.2110155
   Segura S, 2011, INFORM SOFTWARE TECH, V53, P245, DOI 10.1016/j.infsof.2010.11.002
   Segura Sergio., 2008, 1st Workshop on Analyses of Software Product Lines (SPLC'08), P201
   Segura Sergio, 2010, ISA10TR0 U SEV APPL
   Semmak F, 2008, INT C EV NOV APPR SO, P193
   Sirin E, 2007, J WEB SEMANT, V5, P51, DOI 10.1016/j.websem.2007.03.004
   Streitferdt D, 2003, FAMILY ORIENTED REQU
   Sun J, 2005, IEEE INT C ENG COMP, P303
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Thüma T, 2014, SCI COMPUT PROGRAM, V79, P70, DOI 10.1016/j.scico.2012.06.002
   Trinidad P, 2008, J SYST SOFTWARE, V81, P883, DOI 10.1016/j.jss.2007.10.030
   Trinidad P., 2009, 3 INT WORKSH VAR MOD VAMOS, V9, P145
   Trinidad P., 2006, P C ADV INF SYST ENG, P1
   Trinidad P, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P359, DOI 10.1109/SPLC.2008.50
   Trinidad Pablo, 2014, ACT 19 JORN ING SOFT, P335
   Trinidad Pablo, 2013, SEMINAL CONTRIBUTION, P375
   Trinidad Pablo, 2006, P 1 INT WORKSH AG PR, DOI 10.1.1.333.3310
   van der Storm T, 2004, LECT NOTES COMPUT SC, V3107, P157
   van der Storm T, 2007, LECT NOTES COMPUT SC, V4829, P66
   van Deursen A., 2002, Journal of Computing and Information Technology - CIT, V10, P1, DOI 10.2498/cit.2002.01.01
   van Gurp J, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P45, DOI 10.1109/WICSA.2001.948406
   von der Ma<ss>en T, 2004, P WORKSH SOFTW VAR M, P59
   von der Massen T, 2004, LECT NOTES COMPUT SC, V3014, P168
   Wang B, 2010, LECT NOTES COMPUT SC, V6394, P181
   Wang HH, 2007, J WEB SEMANT, V5, P117, DOI 10.1016/j.websem.2006.11.006
   Webster J, 2002, MIS QUART, V26, pXIII
   Weiss David M., 2008, 2008 12th International Software Product Line Conference (SPLC), DOI 10.1109/SPLC.2008.56
   White J, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P225, DOI 10.1109/SPLC.2008.16
   White J, 2010, J SYST SOFTWARE, V83, P1094, DOI 10.1016/j.jss.2010.02.017
   White J, 2014, J SYST SOFTWARE, V87, P119, DOI 10.1016/j.jss.2013.10.010
   White J, 2009, J SYST SOFTWARE, V82, P1268, DOI 10.1016/j.jss.2009.02.011
   Ye H, 2010, P INT C SOFTW ENG RE, P612
   Zhang G, 2013, J SOFTW ENG, V7, P1, DOI [10.3923/jse.2013.1.29, DOI 10.3923/JSE.2013.1.29]
   Zhang G, 2011, P 10 INT C SOFTW ENG
   Zhang W, 2004, LECT NOTES COMPUT SC, V3308, P115
   Zhang W, 2006, REQUIR ENG, V11, P205, DOI 10.1007/s00766-006-0033-x
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 122
TC 6
Z9 6
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1507
EP 1550
DI 10.1007/s11219-020-09522-1
EA AUG 2020
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000558622100001
DA 2024-07-18
ER

PT J
AU Chatzipetrou, P
   Papatheocharous, E
   Wnuk, K
   Borg, M
   Alegroth, E
   Gorschek, T
AF Chatzipetrou, Panagiota
   Papatheocharous, Efi
   Wnuk, Krzysztof
   Borg, Markus
   Alegroth, Emil
   Gorschek, Tony
TI Component attributes and their importance in decisions and component
   selection
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Component-based software engineering; Component sourcing options;
   Decision making; Compositional data analysis; Cumulative voting
ID SOFTWARE; COTS; FRAMEWORK
AB Component-based software engineering is a common approach in the development and evolution of contemporary software systems. Different component sourcing options are available, such as: (1) Software developed internally (in-house), (2) Software developed outsourced, (3) Commercial off-the-shelf software, and (4) Open-Source Software. However, there is little available research on what attributes of a component are the most important ones when selecting new components. The objective of this study is to investigate what matters the most to industry practitioners when they decide to select a component. We conducted a cross-domain anonymous survey with industry practitioners involved in component selection. First, the practitioners selected the most important attributes from a list. Next, they prioritized their selection using the Hundred-Dollar ($100) test. We analyzed the results using compositional data analysis. The results of this exploratory analysis showed that cost was clearly considered to be the most important attribute for component selection. Other important attributes for the practitioners were: support of the component, longevity prediction, and level of off-the-shelf fit to product. Moreover, several practitioners still consider in-house software development to be the sole option when adding or replacing a component. On the other hand, there is a trend to complement it with other component sourcing options and, apart from cost, different attributes factor into their decision. Furthermore, in our analysis, nonparametric tests and biplots were used to further investigate the practitioners' inherent characteristics. It seems that smaller and larger organizations have different views on what attributes are the most important, and the most surprising finding is their contrasting views on the cost attribute: larger organizations with mature products are considerably more cost aware.
C1 [Chatzipetrou, Panagiota] Orebro Univ, Sch Business, CERIS, Dept Informat, SE-70182 Orebro, Sweden.
   [Papatheocharous, Efi; Borg, Markus] RISE Res Inst Sweden AB, Stockholm, Sweden.
   [Wnuk, Krzysztof; Alegroth, Emil; Gorschek, Tony] Blekinge Inst Technol, Software Engn Res Lab SERL, Karlskrona, Sweden.
C3 Orebro University; RISE Research Institutes of Sweden; Blekinge
   Institute Technology
RP Chatzipetrou, P (corresponding author), Orebro Univ, Sch Business, CERIS, Dept Informat, SE-70182 Orebro, Sweden.
EM panagiota.chatzipetrou@oru.se; efi.papatheocharous@ri.se;
   krzyszstof.wnuk@bth.se; markus.borg@ri.se; emil.alegroth@bth.se;
   tony.gorschek@bth.se
RI Borg, Markus/F-3609-2010
OI Borg, Markus/0000-0001-7879-4371; Chatzipetrou,
   Panagiota/0000-0002-0311-1502
CR ABTS C, 2000, P 11 EUR SOFTW CONTR, P325
   AITCHISON J, 1982, J ROY STAT SOC B, V44, P139
   Aitchison J, 2002, J R STAT SOC C-APPL, V51, P375, DOI 10.1111/1467-9876.00275
   Aitchison J, 2003, The statistical analysis of compositional data
   Aitchison J, 2005, 2 COMP DAT AN WORKSH
   Baars A, 2012, LECT NOTES BUS INF P, V114, P168
   Badampudi D, 2016, J SYST SOFTWARE, V121, P105, DOI 10.1016/j.jss.2016.07.027
   Berander P., 2004, P 8 INT C EMP ASS SO
   Borg M, 2019, INFORM SOFTWARE TECH, V112, P18, DOI 10.1016/j.infsof.2019.03.015
   Bosch J, 2018, FED CONF COMPUT SCI, P1, DOI 10.15439/2018F001
   Brownsword L, 2000, IEEE SOFTWARE, V17, P48, DOI 10.1109/52.854068
   Chatzipetrou P., 2018, EUROMICRO SOFTWARE E
   Chatzipetrou P, 2015, INFORM SOFTWARE TECH, V59, P149, DOI 10.1016/j.infsof.2014.11.004
   Chatzipetrou P, 2012, EUROMICRO CONF PROC, P367, DOI 10.1109/SEAA.2012.50
   Chatzipetrou P, 2010, EUROMICRO CONF PROC, P361, DOI 10.1109/SEAA.2010.35
   Comas-Cufi M., 2011, CODAWORK 11 INT WORK
   Cortellessa V, 2008, COMPUT OPER RES, V35, P3090, DOI 10.1016/j.cor.2007.01.011
   DUNN OJ, 1964, TECHNOMETRICS, V6, P241, DOI 10.2307/1266041
   DUNN OJ, 1959, ANN MATH STAT, V30, P192, DOI 10.1214/aoms/1177706374
   Firesmith Donald, 2004, J. Object Technol., V3, P35
   Gabriel K.R., 1981, INTERPRETING MULTIVA, P147
   GABRIEL KR, 1971, BIOMETRIKA, V58, P453, DOI 10.1093/biomet/58.3.453
   Hatton S, 2008, 19 AUSTR C SOFTW ENG
   Jingyue Li, 2006, 28th International Conference on Software Engineering Proceedings, P897
   Jorgensen M, 2007, IEEE T SOFTWARE ENG, V33, P33, DOI 10.1109/TSE.2007.256943
   KRUSKAL WH, 1952, J AM STAT ASSOC, V47, P583, DOI 10.1080/01621459.1952.10483441
   Leffingwell D., 2003, Managing Software Requirements: A Use Case Approach
   Li J, 2006, EMPIR SOFTW ENG, V11, P433, DOI 10.1007/s10664-006-9005-5
   Linåker J, 2018, J SYST SOFTWARE, V135, P17, DOI 10.1016/j.jss.2017.09.032
   Martin-Fernandez J. A., 2003, P CODAWORK 03 COMP D
   Martín-Fernández JA, 2003, MATH GEOL, V35, P253, DOI 10.1023/A:1023866030544
   Martín-Fernández JA, 2000, ST CLASS DAT ANAL, P155
   Nguyen V, 2010, P 26 INT C SOFTW MAI, P1, DOI DOI 10.1109/ICSM.2010.5609554
   Pearson K., 1897, Proceedings of the Royal Society of London, V60, P489, DOI [10.1098/rspl.1896.0076, DOI 10.1098/RSPL.1896.0076]
   Petersen K., 2017, IEEE T SOFTWARE ENG
   Regnell B., 2001, Requirements Engineering, V6, P51, DOI 10.1007/s007660170015
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Staron M, 2006, LECT NOTES COMPUT SC, V4034, P177
   Sulaman SM, 2014, EUROMICRO CONF PROC, P17, DOI 10.1109/SEAA.2014.25
   Wohlin C, 2016, LECT NOTES BUS INF P, V240, P1, DOI 10.1007/978-3-319-40515-5_1
NR 40
TC 10
Z9 10
U1 1
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 567
EP 593
DI 10.1007/s11219-019-09465-2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000538379800008
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Firmenich, S
   Garrido, A
   Grigera, J
   Rivero, JM
   Rossi, G
AF Firmenich, Sergio
   Garrido, Alejandra
   Grigera, Julian
   Matias Rivero, Jose
   Rossi, Gustavo
TI Usability improvement through A/B testing and refactoring
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Usability evaluation; A/B testing; Web refactoring; Agile methods;
   External quality
ID WEB; ACCESSIBILITY
AB Usability evaluation is an essential task in web application development. There have been several attempts to integrate user-centered design with agile methods, but it is hard to synchronize their practices. User testing is very valuable to learn from feedback of actual use, but it remains expensive to find and solve usability problems. Furthermore, the high cost of usability evaluation forces small/medium-sized companies to trust the first solution applied, without actually testing the success of the solution or considering a possible regression in usability, as could be highlighted by an iterative testing method. In this article, we advocate for a usability improvement cycle oriented by user feedback, and compatible with an agile development process. We propose an iterative method supported by a toolkit that allows usability experts to design user tests, run them remotely, analyze results, and assess alternative solutions to usability problems similarly to A/B testing. Each solution is created by applying client-side web refactorings, i.e., changes to the web pages in the client which are meant to improve usability. The main benefit of our approach is that it reduces the overall cost of user testing and particularly, A/B testing, by applying refactorings to create alternative solutions without modifying the application's server code. By making it affordable for usability experts to apply the method in parallel with the development cycle, we aim to encourage them to incorporate user feedback and try different ideas to discover the best-performing solution in terms of the metrics of interest.
C1 [Firmenich, Sergio; Garrido, Alejandra; Grigera, Julian; Matias Rivero, Jose; Rossi, Gustavo] Univ Nacl La Plata, LIFIA, Fac Informat, Calle 50 & 120 S-N,1 Piso, RA-1900 La Plata, Buenos Aires, Argentina.
   [Firmenich, Sergio; Rossi, Gustavo] Consejo Nacl Invest Cient & Tecn, Buenos Aires, DF, Argentina.
   [Garrido, Alejandra] Consejo Nacl Invest Cient & Tecn, Argentinas Natl Sci & Tech Res Council, Buenos Aires, DF, Argentina.
   [Grigera, Julian] CIC, Buenos Aires, DF, Argentina.
C3 National University of La Plata; Consejo Nacional de Investigaciones
   Cientificas y Tecnicas (CONICET); Consejo Nacional de Investigaciones
   Cientificas y Tecnicas (CONICET)
RP Garrido, A (corresponding author), Univ Nacl La Plata, LIFIA, Fac Informat, Calle 50 & 120 S-N,1 Piso, RA-1900 La Plata, Buenos Aires, Argentina.; Garrido, A (corresponding author), Consejo Nacl Invest Cient & Tecn, Argentinas Natl Sci & Tech Res Council, Buenos Aires, DF, Argentina.
EM garrido@lifia.info.unlp.edu.ar
RI Rossi, Gustavo/AAE-4736-2020; Garrido, Alejandra/GRF-5135-2022
OI Firmenich, Sergio/0000-0001-9502-2189; Grigera,
   Julian/0000-0002-7962-4312; Garrido, Alejandra/0000-0002-5052-705X
FU Argentinian National Agency for Scientific and Technical Promotion
   (ANPCyT) [PICT-2015-3000]
FX The authors acknowledge the support from the Argentinian National Agency
   for Scientific and Technical Promotion (ANPCyT), grant number
   PICT-2015-3000.
CR [Anonymous], 2013, INT C DESIGN USER EX
   Benigni G, 2010, LECT NOTES COMPUT SC, V6017, P422, DOI 10.1007/978-3-642-12165-4_34
   Brooke J., 1996, USABILITY EVALUATION, P189, DOI DOI 10.1201/9781498710411-35
   Burzacca Paolo, 2013, Human-Computer Interaction. Human-Centred Design Approaches, Methods, Tools, and Environments. 15th International Conference, HCI International 2013. Proceedings. LNCS 8004, P241, DOI 10.1007/978-3-642-39232-0_27
   Carta T, 2011, LECT NOTES COMPUT SC, V6949, P349, DOI 10.1007/978-3-642-23768-3_29
   Chisnell D., 2008, Handbook of usability testing: How to plan, design, and conduct effective tests, V2nd
   de Santana VF, 2015, INT J HUM-COMPUT ST, V76, P40, DOI 10.1016/j.ijhcs.2014.12.005
   Detweiler M., 2007, Interactions, V14, P40, DOI 10.1145/1242421.1242447
   DIAZ O, 2008, TRANSACTION, V9, P1, DOI DOI 10.1145/2735633
   Distante D, 2014, ELECTRON COMMER RES, V14, P497, DOI 10.1007/s10660-014-9149-0
   Düchting M, 2007, LECT NOTES COMPUT SC, V4550, P58
   Fernandez A, 2013, J SYST SOFTWARE, V86, P161, DOI 10.1016/j.jss.2012.07.043
   Fernandez A, 2011, INFORM SOFTWARE TECH, V53, P789, DOI 10.1016/j.infsof.2011.02.007
   Firmenich D., 2016, REQUIR ENG, P1
   Fowler M., 1997, ANAL PATTERNS REUSAB
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Garrido A, 2014, UNIVERSAL ACCESS INF, V13, P387, DOI 10.1007/s10209-013-0323-2
   Garrido A, 2013, IEEE INTERNET COMPUT, V17, P58, DOI 10.1109/MIC.2012.143
   Garrido A, 2011, IEEE SOFTWARE, V28, P60, DOI 10.1109/MS.2010.114
   George C. A., 2005, OCLC Systems & Services, V21, P167, DOI 10.1108/10650750510612371
   Grigera J, 2017, INT J HUM-COMPUT ST, V97, P129, DOI 10.1016/j.ijhcs.2016.09.009
   Grigera J, 2016, EMPIR SOFTW ENG, V21, P1224, DOI 10.1007/s10664-015-9384-6
   Hartson H.R., 1998, Proceedings of the working conference on Advanced visual interfaces, P22, DOI DOI 10.1145/948496.948499
   Hartson HR, 2003, INT J HUM-COMPUT INT, V15, P145, DOI 10.1207/S15327590IJHC1501_13
   Hassenzahl M., 2006, Encyclopedia of human computer interaction, P266, DOI DOI 10.4018/978-1-59140-562-7.CH042
   ISO I, 2011, 25010 ISOIEC
   Jurca G., 2014, P 2014 AG C AGILE 20
   Kohavi R, 2009, DATA MIN KNOWL DISC, V18, P140, DOI 10.1007/s10618-008-0114-1
   Kohavi Ron., 2015, Encyclopedia of Machine Learning and Data Mining
   Lee JC, 2007, AGILE 2007, PROCEEDINGS, P59, DOI 10.1109/AGILE.2007.63
   Nielsen J., 2006, Prioritizing web usability
   Nielsen Jakob, 2000, WHY YOU ONLY NEED TE
   Obendorf H., 2008, Proc. Conference on Human Factors in Computing Systems (CHI '08), P2159
   Paganelli L, 2003, BEHAV RES METH INS C, V35, P369, DOI 10.3758/BF03195513
   Panach JI, 2015, INFORM SOFTWARE TECH, V58, P338, DOI 10.1016/j.infsof.2014.07.002
   Rubin Kenneth S., 2012, Essential Scrum: A practical guide to the most popular Agile process, V1st
   Salvador C., 2014, P 7 EUR AM C TEL INF
   SANAA, 2005, CULTURA CIUDAD, V1, P18
   Schissel J, 2014, MVP MTP ACCELERATING
   Silva da Silva T., 2011, Proceedings of the 2011 Agile Conference, P77, DOI 10.1109/AGILE.2011.24
   Speicher M, 2014, LECT NOTES COMPUT SC, V8541, P93, DOI 10.1007/978-3-319-08245-5_6
   UID, 2018, ATTRAKDIFF
   Urbieta M, 2017, WEBIST: PROCEEDINGS OF THE 13TH INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS AND TECHNOLOGIES, P444, DOI 10.5220/0006394604440454
   Williams L, 2003, COMPUTER, V36, P39, DOI 10.1109/MC.2003.1204373
   Yoder J. W., 1999, MET ACT OBJ MOD PATT
NR 45
TC 7
Z9 9
U1 0
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2019
VL 27
IS 1
BP 203
EP 240
DI 10.1007/s11219-018-9413-y
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ2MP
UT WOS:000462236000006
DA 2024-07-18
ER

PT J
AU Fu, HJ
   Wang, Z
   Chen, X
   Fan, XY
AF Fu, Haojie
   Wang, Zan
   Chen, Xiang
   Fan, Xiangyu
TI A systematic survey on automated concurrency bug detection, exposing,
   avoidance, and fixing techniques
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Concurrency bug detection; Concurrency bug exposing; Concurrency bug
   avoidance; Concurrency bug fixing
ID STATIC RACE DETECTION; ATOMICITY VIOLATIONS; DEADLOCKS; INFERENCE;
   EFFICIENT; SOUND
AB Currently, concurrent programs are becoming increasingly widespread to meet the demands of the rapid development of multi-core hardware. However, it could be quite expensive and challenging to guarantee the correctness and efficiency of concurrent programs. In this paper, we provide a systematic review of the existing research on fighting against concurrency bugs, including automated concurrency bug exposing, detection, avoidance, and fixing. These four categories cover the different aspects of concurrency bug problems and are complementary to each other. For each category, we survey the motivation, key issues, solutions, and the current state of the art. In addition, we summarize the classical benchmarks widely used in previous empirical studies and the contribution of active research groups. Finally, some future research directions on concurrency bugs are recommended. We believe this survey would be useful for concurrency programmers and researchers.
C1 [Fu, Haojie; Wang, Zan; Fan, Xiangyu] Tianjin Univ, Sch Comp Software, Tianjin, Peoples R China.
   [Chen, Xiang] Nantong Univ, Sch Comp Sci & Technol, Nantong, Peoples R China.
C3 Tianjin University; Nantong University
RP Wang, Z (corresponding author), Tianjin Univ, Sch Comp Software, Tianjin, Peoples R China.
EM fhj0909@tju.edu.cn; wangzan@tju.edu.cn; xchencs@ntu.edu.cn;
   fxy@tju.edu.cn
RI Chen, Xiang/AAG-3663-2019
OI Chen, Xiang/0000-0002-1180-3891
FU National Natural Science Foundation of China [61202030, 71502125,
   61373012, 61202006]
FX This work is partly supported by projects from National Natural Science
   Foundation of China, with the project number '61202030', '71502125',
   '61373012', and '61202006'. The authors also thank anonymous reviewers
   for their constructive comments.
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Ananian CS, 2006, IEEE MICRO, V26, P59, DOI 10.1109/MM.2006.26
   [Anonymous], P 6 WORKSH PAR DISTR
   [Anonymous], 2008, CAV WORKSH EXPL CONC
   [Anonymous], 2007, P THE 6 JOINT M EUR
   [Anonymous], 2013, THESIS
   [Anonymous], P 24 ACM S OP SYST P
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering (FSE'11), DOI [10.1145/2025113.2025121, DOI 10.1145/2025113.2025121]
   [Anonymous], PROC INT CONF SOFTW
   Berger ED, 2009, ACM SIGPLAN NOTICES, V44, P81, DOI 10.1145/1639949.1640096
   Boigelot B., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P465
   Boudol G, 2009, LECT NOTES COMPUT SC, V5684, P140, DOI 10.1007/978-3-642-03466-4_9
   Bradbury J.S., 2010, International Symposium on Search Based Software Engineering - Fast Abstracts, P1
   Bron Arkady, 2005, P ACM SIGPLAN S PRIN, P206
   Burckhardt S, 2010, ACM SIGPLAN NOTICES, V45, P167, DOI 10.1145/1735971.1736040
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cai Y, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P491, DOI 10.11455/2568225.2568312
   Cai Y, 2016, IEEE T SOFTWARE ENG, V42, P825, DOI 10.1109/TSE.2016.2537335
   Cai Y, 2013, INT CONF QUAL SOFTW, P276, DOI 10.1109/QSIC.2013.20
   Cai Y, 2014, IEEE T SOFTWARE ENG, V40, P266, DOI 10.1109/TSE.2014.2301725
   Cai Y, 2012, PROC INT CONF SOFTW, P606, DOI 10.1109/ICSE.2012.6227156
   Cerny P., 2013, LECT NOTES COMPUTER, P951
   Cerny P, 2014, LECT NOTES COMPUT SC, V8559, P568, DOI 10.1007/978-3-319-08867-9_38
   Chew L., 2009, SYSTEM DETECTING PRE
   Chew L, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P307
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   CLARKE EM, 1995, FORM METHOD SYST DES, V6, P217, DOI 10.1007/BF01383968
   Deng DD, 2013, ACM SIGPLAN NOTICES, V48, P785, DOI [10.1145/2544173.2509539, 10.1145/2509136.2509539]
   Deng DongDong., 2015, SCI CHINA INFORM SCI, V58, P1
   Edelstein O, 2003, CONCURR COMP-PRACT E, V15, P485, DOI 10.1002/cpe.654
   Edelstein O., 2001, JOINT ACM ISC C JAV, P111
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Flanagan C, 2008, ACM SIGPLAN NOTICES, V43, P293, DOI 10.1145/1379022.1375618
   Gerakios Prodromos., 2011, Proceedings of the 7th ACM SIGPLAN workshop on Types in language design and implementation, TLDI '11, P15, DOI DOI 10.1145/1929553.1929558
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Gordon ColinS., 2012, Proceedings of the 8th ACM SIGPLAN Workshop on Types in Language Design and Implementation, TLDI '12, P67, DOI [10.1145/2103786.2103796, DOI 10.1145/2103786.2103796]
   Harris T, 2003, ACM SIGPLAN NOTICES, V38, P388, DOI 10.1145/949343.949340
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   Herlihy M., 2006, ACM SIGPLAN NOTICES, P41
   Huang J, 2012, ACM SIGPLAN NOTICES, V47, P737, DOI 10.1145/2398857.2384670
   Jin G., 2012, 10 USENIX S OP SYST, P221
   Jin GL, 2011, ACM SIGPLAN NOTICES, V46, P389, DOI 10.1145/1993316.1993544
   Jin GL, 2010, ACM SIGPLAN NOTICES, V45, P241, DOI 10.1145/1932682.1869481
   Joshi P, 2009, ACM SIGPLAN NOTICES, V44, P110, DOI 10.1145/1543135.1542489
   Joshi Pallavi, 2010, P 18 ACM SIGSOFT INT, P327, DOI 10.1145/1882291.1882339
   Jula H., 2008, OSDI, P295
   Jula H, 2008, LECT NOTES COMPUT SC, V5289, P119
   Kahlon V, 2006, LECT NOTES COMPUT SC, V4144, P286, DOI 10.1007/11817963_28
   Kasikci B, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2734118
   Kelk D, 2013, LECT NOTES COMPUT SC, V8063, P73, DOI 10.1007/978-3-642-39955-8_7
   Kelly T, 2009, COMPUTER, V42, P52, DOI 10.1109/MC.2009.391
   Khoshnood Sepideh, 2015, P 2015 INT S SOFTW E, P165
   Krena Bohuslav., 2007, Proceedings of the 2007 ACM Workshop on Parallel and Distributed Systems: Testing and Debugging, PADTAD '07, P54
   Kundu S, 2010, LECT NOTES COMPUT SC, V6174, P127, DOI 10.1007/978-3-642-14295-6_13
   Lahiri SK, 2009, LECT NOTES COMPUT SC, V5643, P509, DOI 10.1007/978-3-642-02658-4_38
   Lal A., 2014, AUTOMATICALLY FINDIN
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Liao HW, 2013, IEEE T CONTR SYST T, V21, P2067, DOI 10.1109/TCST.2012.2226034
   Liu HP, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P715, DOI 10.1145/2950290.2950309
   Liu P, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P318, DOI 10.1145/2635868.2635881
   Liu P, 2014, ACM SIGPLAN NOTICES, V49, P543, DOI [10.1145/2714064.2660217, 10.1145/2660193.2660217]
   Liu P, 2012, PROC INT CONF SOFTW, P299, DOI 10.1109/ICSE.2012.6227184
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Lu S, 2007, IEEE MICRO, V27, P26, DOI 10.1109/MM.2007.5
   Lu S, 2012, IEEE T SOFTWARE ENG, V38, P844, DOI 10.1109/TSE.2011.35
   Lu S, 2012, IEEE T PARALL DISTR, V23, P1060, DOI 10.1109/TPDS.2011.254
   Lucia B, 2013, ACM SIGPLAN NOTICES, V48, P39, DOI 10.1145/2499368.2451121
   Lucia B, 2011, ACM SIGPLAN NOTICES, V46, P378, DOI 10.1145/1993316.1993543
   Lucia B, 2010, CONF PROC INT SYMP C, P222, DOI 10.1145/1816038.1815988
   Lucia B, 2009, IEEE MICRO, V29, P73, DOI 10.1109/MM.2009.1
   McCloskey B, 2006, ACM SIGPLAN NOTICES, V41, P346, DOI 10.1145/1111320.1111068
   Michael C, 1997, TECHNICAL REPORT
   Moore K. E., 2006, Twelfth International Symposium on High-Performance Computer Architecture, P254
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Musuvathi M, 2007, ACM SIGPLAN NOTICES, V42, P446, DOI 10.1145/1273442.1250785
   Naik M, 2007, ACM SIGPLAN NOTICES, V42, P327, DOI 10.1145/1190215.1190265
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Nir-Buchbinder Y, 2008, LECT NOTES COMPUT SC, V5289, P104
   Park S, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P645
   Park S, 2009, ACM SIGPLAN NOTICES, V44, P25, DOI 10.1145/1508284.1508249
   Prvulovic M, 2003, CONF PROC INT SYMP C, P110, DOI 10.1109/ISCA.2003.1206993
   Pyla HK, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P75, DOI 10.1145/1854273.1854288
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   QIN F, 2005, P 20 ACM S OP SYST P, V39, P235
   Rabinovitz I, 2005, LECT NOTES COMPUT SC, V3576, P82
   Rajamani S, 2009, ACM SIGPLAN NOTICES, V44, P181, DOI 10.1145/1508284.1508266
   Ratanaworabhan P, 2009, ACM SIGPLAN NOTICES, V44, P173, DOI 10.1145/1594835.1504202
   Rungta N., 2009, MOD CHECK SOFTW INT, P1885
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Sen K, 2008, ACM SIGPLAN NOTICES, V43, P11, DOI 10.1145/1379022.1375584
   Shan Lu, 2007, Operating Systems Review, V41, P103, DOI 10.1145/1323293.1294272
   Shi Y, 2010, ACM SIGPLAN NOTICES, V45, P160, DOI 10.1145/1932682.1869474
   Sidiroglou S, 2009, ACM SIGPLAN NOTICES, V44, P37, DOI 10.1145/1508284.1508250
   Smaragdakis Y, 2012, ACM SIGPLAN NOTICES, V47, P387, DOI 10.1145/2103621.2103702
   Sreenath K, 2012, IEEE INT CONF ROBOT, P51, DOI 10.1109/ICRA.2012.6224944
   Tan L, 2014, EMPIR SOFTW ENG, V19, P1665, DOI 10.1007/s10664-013-9258-8
   Tian Z., 2017, IEEE T SOFTWARE ENG, V99, P1
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Vaziri M, 2006, ACM SIGPLAN NOTICES, V41, P334, DOI 10.1145/1111320.1111067
   Veeraraghavan K, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P369
   Wang C, 2008, LECT NOTES COMPUT SC, V4963, P382, DOI 10.1007/978-3-540-78800-3_29
   Wang C, 2011, FORM ASP COMPUT, V23, P781, DOI 10.1007/s00165-011-0179-2
   Wang C, 2010, LECT NOTES COMPUT SC, V6015, P328, DOI 10.1007/978-3-642-12002-2_27
   Wang HJ, 2017, IEEE T SOFTWARE ENG, V43, P252, DOI 10.1109/TSE.2016.2584063
   Wang Y, 2009, IEEE DECIS CONTR P, P4971, DOI 10.1109/CDC.2009.5399950
   Weeratunge D, 2011, ACM SIGPLAN NOTICES, V46, P19, DOI 10.1145/2076021.2048071
   Xu M, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1064978.1065013
   Yu J, 2009, CONF PROC INT SYMP C, P325, DOI 10.1145/1555815.1555796
   Yu JJ, 2012, PROCEEDINGS OF THE ASME TURBO EXPO 2012, VOL 7, PTS A AND B, P485, DOI 10.1145/2398857.2384651
   Yu Y., 2005, P 20 ACM S OP SYST P, P221
   Zhang MX, 2016, IEEE T SOFTWARE ENG, V42, P899, DOI 10.1109/TSE.2016.2531666
   Zhang W, 2013, ACM SIGPLAN NOTICES, V48, P113, DOI 10.1145/2499368.2451129
   Zhang W, 2011, ACM SIGPLAN NOTICES, V46, P251, DOI 10.1145/1961296.1950395
   Zhang W, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P179
NR 119
TC 10
Z9 10
U1 0
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 855
EP 889
DI 10.1007/s11219-017-9385-3
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000002
DA 2024-07-18
ER

PT J
AU Challenger, M
   Kardas, G
   Tekinerdogan, B
AF Challenger, Moharram
   Kardas, Geylani
   Tekinerdogan, Bedir
TI A systematic approach to evaluating domain-specific modeling language
   environments for multi-agent systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Domain-specific modeling language (DSML); Evaluation framework;
   Evaluation of DSMLs; Multi-agent system (MAS); Software agent; SEA_ML
ID DRIVEN DEVELOPMENT; AGENTS; METAMODEL; IMPLEMENTATION; ARCHITECTURE;
   DESIGN; DSL
AB Multi-agent systems (MASs) include multiple interacting agents within an environment to provide a solution for complex systems that cannot be easily solved with individual agents or monolithic systems. However, the development of MASs is not trivial due to the various agent properties such as autonomy, responsiveness, and proactiveness, and the need for realization of the many different agent interactions. To support the development of MASs various domain-specific modeling languages (DSMLs) have been introduced that provide a declarative approach for modeling and supporting the generation of agent-based systems. To be effective, the proposed DSMLs need to meet the various stakeholder concerns and the related quality criteria for the corresponding MASs. Unfortunately, very often the evaluation of the DSML is completely missing or has been carried out in idiosyncratic approach. If the DSMLs are not well defined, then implicitly this will have an impact on the quality of the MASs. In this paper, we present an evaluation framework and systematic approach for assessing existing or newly defined DSMLs for MASs. The evaluation is specific for MAS DSMLs and targets both the language and the corresponding tools. To illustrate the evaluation approach, we first present SEA_ML, which is a model-driven MAS DSML for supporting the modeling and generation of agent-based systems. The evaluation of SEA_ML is based on a multi-case study research approach and provides both qualitative evaluation and quantitative analysis. We report on the lessons learned considering the adoption of the evaluation approach as well as the SEA_ML for supporting the generation of agent-based systems.
C1 [Challenger, Moharram; Kardas, Geylani] Ege Univ, Int Comp Inst, Izmir, Turkey.
   [Tekinerdogan, Bedir] Wageningen Univ, Informat Technol Grp, Wageningen, Netherlands.
C3 Ege University; Wageningen University & Research
RP Kardas, G (corresponding author), Ege Univ, Int Comp Inst, Izmir, Turkey.
EM moharram.challenger@mail.ege.edu.tr; geylani.kardas@ege.edu.tr;
   bedir.tekinerdogan@wur.nl
RI Kardas, Geylani/AAG-5355-2019; Challenger, Moharram/E-2164-2014;
   Tekinerdogan, Bedir/K-3639-2019
OI Kardas, Geylani/0000-0001-6975-305X; Challenger,
   Moharram/0000-0002-5436-6070; Tekinerdogan, Bedir/0000-0002-8538-7261
FU Scientific and Technological Research Council of Turkey (TUBITAK)
   Electric, Electronic and Informatics Research Group (EEEAG) [109E125]
FX This study is partially funded by the Scientific and Technological
   Research Council of Turkey (TUBITAK) Electric, Electronic and
   Informatics Research Group (EEEAG) under Grant 109E125. The authors wish
   to thank the former members of the SEA_ML project, Dr. Marjan Mernik,
   Dr. Tomaz Kosar, Sinem Getir and Sebla Demirkol for their valuable
   contributions on design and implementation of SEA_ML. Finally, the
   authors would like to thank the participants, various Ph.D. and M.Sc.
   students, who actively got involved in the language evaluation and
   helped to the realization of the empirical study presented in this
   paper.
CR Abran A., 2010, Software metrics and software metrology
   [Anonymous], P OBJ OR PROGR SYST
   [Anonymous], 2004, OWL S SEMANTIC MARKU
   Barisic A., 2012, P 19 C PATT LANG PRO
   Barisic A., 2011, ELECTR COMMUN, V50, P1
   Barisic A, 2013, P DOCT S 16 INT C MO
   Barisic A., Proceedings of the 3rd ACM SIGPLAN workshop on Evaluation and usability of programming languages and tools (PLATEAU) at SPLASH. PLATEAU '11 (2011), P65, DOI DOI 10.1145/2089155.2089170
   Barisic A, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P386, DOI 10.4018/978-1-4666-2092-6.ch014
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   Bayona-Oré S, 2014, SOFTWARE QUAL J, V22, P21, DOI 10.1007/s11219-012-9190-y
   Bellifemine F, 2001, SOFTWARE PRACT EXPER, V31, P103, DOI 10.1002/1097-024X(200102)31:2<103::AID-SPE358>3.0.CO;2-O
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Bernon C, 2005, LECT NOTES COMPUT SC, V3382, P62
   Beydoun G, 2009, IEEE T SOFTWARE ENG, V35, P841, DOI 10.1109/TSE.2009.34
   Bobkowska A., 2005, LECT NOTES COMPUTER, V3381
   Bresciani P, 2004, AUTON AGENT MULTI-AG, V8, P203, DOI 10.1023/B:AGNT.0000018806.20944.ef
   Carver JC, 2010, EMPIR SOFTW ENG, V15, P35, DOI 10.1007/s10664-009-9109-9
   Challenger M, 2014, ENG APPL ARTIF INTEL, V28, P111, DOI 10.1016/j.engappai.2013.11.012
   Challenger M, 2011, LECT NOTES BUS INF P, V83, P177
   Ciobanu G, 2012, CONCURR COMP-PRACT E, V24, P559, DOI 10.1002/cpe.1854
   Clark T., 2004, MDA J, V10, P2
   CMU/SEI, 2010, CMUSEI2010TR032
   Demirkol S., 2011, 2011 International Symposium on Innovations in Intelligent Systems and Applications (INISTA 2011), P193, DOI 10.1109/INISTA.2011.5946060
   Demirkol S, 2013, COMPUT SCI INF SYST, V10, P1525, DOI 10.2298/CSIS121105044D
   Demirli E, 2011, LECT NOTES COMPUT SC, V6903, P336, DOI 10.1007/978-3-642-23798-0_36
   Fister I, 2011, COMPUT LANG SYST STR, V37, P151, DOI 10.1016/j.cl.2011.04.001
   Fowler M., 2010, Domain-specific languages
   Fuentes-Fernández R, 2010, ENG APPL ARTIF INTEL, V23, P432, DOI 10.1016/j.engappai.2009.08.004
   Garcia A., 2005, AOSD 05, P3
   Gascueña JM, 2012, ENG APPL ARTIF INTEL, V25, P159, DOI 10.1016/j.engappai.2011.08.008
   Getir S., 2012, Proceedings of the 2012 IEEE 36th IEEE Annual Computer Software and Applications Conference Workshops (COMPSACW), P619, DOI 10.1109/COMPSACW.2012.112
   Getir S, 2014, INT J COOP INF SYST, V23, DOI 10.1142/S0218843014500051
   Gray J., 2007, Handbook of Dynamic System Modeling, P1
   Hahn Christian, 2008, 2008 IEEE/WIC/ACM International Conference on Intelligent Agent Technology, P200, DOI 10.1109/WIIAT.2008.321
   Hahn C., 2008, Proceedings of the 7th international joint conference on Autonomous agents and multiagent systems-Volume, V1, P233
   Hahn C, 2009, AUTON AGENT MULTI-AG, V18, P239, DOI 10.1007/s10458-008-9042-0
   ISO/IEC, 1998, 155042 ISOIEC TR
   ISO/IEC, 2011, ISO/IEC 25010:2011 Systems and software engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality models
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Kahlaoui A., 2008, METRICS NEWS, V13, P43
   Kahraman G, 2015, SOFTW SYST MODEL, V14, P1505, DOI 10.1007/s10270-013-0387-8
   Kardas G, 2012, SOFTWARE PRACT EXPER, V42, P1247, DOI 10.1002/spe.1137
   Kardas G, 2009, INT J COOP INF SYST, V18, P261, DOI 10.1142/S0218843009002014
   Kelly S., 2008, Domain-Specific Modeling
   Khedker U. P., 1997, TR97UPK1 DEP COMP SC
   Kirstan S, 2010, P ECMFA 2010 WORKSH, P18
   Kitchenham B, 1997, COMPUT CONTROL ENG J, V8, P120, DOI 10.1049/cce:19970304
   Kosar T, 2012, EMPIR SOFTW ENG, V17, P276, DOI 10.1007/s10664-011-9172-x
   Kosar T, 2010, COMPUT SCI INF SYST, V7, P247, DOI 10.2298/CSIS1002247K
   Marín B, 2010, DATA KNOWL ENG, V69, P472, DOI 10.1016/j.datak.2010.01.001
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Mernik M, 2005, COMPUT LANG SYST STR, V31, P1, DOI 10.1016/j.cl.2004.02.001
   MOFScript, 2005, MOFSCRIPT MOD TO TEX
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   Mohagheghi P, 2013, EMPIR SOFTW ENG, V18, P89, DOI 10.1007/s10664-012-9196-x
   Monteiro M., 2005, Proceedings of the 4th international conference on Aspect-oriented software development, P111
   Odell J, 2005, LECT NOTES COMPUT SC, V3382, P78
   Oldevik J, 2005, LECT NOTES COMPUT SC, V3748, P239
   Omicini A, 2008, AUTON AGENT MULTI-AG, V17, P432, DOI 10.1007/s10458-008-9053-x
   Padgham L., 2004, WILEY SERIES AGENT T
   Paige RF, 2000, INFORM SOFTWARE TECH, V42, P665, DOI 10.1016/S0950-5849(00)00109-9
   Pavón J, 2006, LECT NOTES COMPUT SC, V4066, P284
   Pesovic D, 2011, COMPUT SCI INF SYST, V8, P193, DOI 10.2298/CSIS090608019P
   Pokahr A, 2005, MU S ART SOC SIM ORG, V15, P149, DOI 10.1007/0-387-26350-0_6
   Rao A. S., 1995, ICMAS-95 Proceedings. First International Conference on Multi-Agent Systems, P312
   Rougemaille S, 2008, LECT NOTES ARTIF INT, V4995, P318
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Russell S., 2016, Artificial intelligence a modern approach
   Saritas HB, 2014, COMPUT LANG SYST STR, V40, P53, DOI 10.1016/j.cl.2014.02.001
   Schmid K, 2002, EUROMICRO CONF PROC, P272, DOI 10.1109/EURMIC.2002.1046172
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Shadbolt N, 2006, IEEE INTELL SYST, V21, P96, DOI 10.1109/MIS.2006.62
   Shih DH, 2005, COMPUT STAND INTER, V27, P383, DOI 10.1016/j.csi.2004.10.006
   SMITH RG, 1980, IEEE T COMPUT, V29, P1104, DOI 10.1109/TC.1980.1675516
   Sprinkle J, 2009, IEEE SOFTWARE, V26, P15, DOI 10.1109/MS.2009.92
   Sycara Katia., 2003, WEB SEMANTICS SCI SE, V1, P27
   Sycara KP, 1998, AI MAG, V19, P79
   Tekinerdogan B., 2013, P 9 INT ACM SIGS C Q, P89
   Tekinerdogan B, 2011, LECT NOTES COMPUT SC, V6580, P196, DOI 10.1007/978-3-642-22031-9_7
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Pereira MJV, 2008, COMPUT SCI INF SYST, V5, P1, DOI 10.2298/CSIS0802001P
   Warmer J.B., 1998, OBJECT CONSTRAINT LA
   Wile D, 2004, SCI COMPUT PROGRAM, V51, P265, DOI 10.1016/j.scico.2003.12.006
   WOOLDRIDGE M, 1995, KNOWL ENG REV, V10, P115, DOI 10.1017/S0269888900008122
   Zambonelli F, 2003, ACM T SOFTW ENG METH, V12, P317, DOI 10.1145/958961.958963
NR 86
TC 42
Z9 45
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 755
EP 795
DI 10.1007/s11219-015-9291-5
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400013
DA 2024-07-18
ER

PT J
AU Belli, F
   Beyazit, M
   Endo, AT
   Mathur, A
   Simao, A
AF Belli, Fevzi
   Beyazit, Mutlu
   Endo, Andre Takeshi
   Mathur, Aditya
   Simao, Adenilso
TI Fault domain-based testing in imperfect situations: a heuristic approach
   and case studies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Fault domain-based; Finite state machines; HSI
   method; Imperfect situation; Heuristic HSI
ID STATE; DESIGN
AB Model-based testing (MBT) involves creating an abstraction, called a model, to represent the system and automatically deriving test cases from this model. MBT can be performed using various approaches that generally employ certain assumptions or requirements affecting the test performance in practice. Here, we consider the harmonized state identifiers (HSI) method, which is based on finite state machine (FSM) models and generates test sets that cover all faults in a given domain under certain conditions. We are interested in the application of the HSI method in practical scenarios where some conditions do not hold or are not straightforward to satisfy. Thus, we propose a heuristic extension to the HSI method, called heuristic HSI (HHSI), to consider imperfect situations as they often occur in practice. To analyze the characteristics of HHSI, we empirically compare it to random testing and coverage-based testing using non-trivial case studies. The experiments include model-based mutation analyses over several FSM models.
C1 [Belli, Fevzi] Univ Paderborn, Software Engn, D-33098 Paderborn, Germany.
   [Beyazit, Mutlu] Univ Paderborn, Dept Comp Sci Elect Engn & Math, D-33098 Paderborn, Germany.
   [Belli, Fevzi] Izmir Inst Technol, Izmir, Turkey.
   [Endo, Andre Takeshi] Univ Tecnol Fed Parana, Cornelio Procopio, Brazil.
   [Mathur, Aditya] Singapore Univ Technol & Design, Pillar Informat Syst Technol & Design, Singapore, Singapore.
   [Simao, Adenilso] Univ Sao Paulo, Comp Syst Dept, Sao Carlos, SP, Brazil.
C3 University of Paderborn; University of Paderborn; Izmir Institute of
   Technology; Universidade Tecnologica Federal do Parana; Singapore
   University of Technology & Design; Universidade de Sao Paulo
RP Endo, AT (corresponding author), Univ Tecnol Fed Parana, Cornelio Procopio, Brazil.
EM belli@adt.upb.de; beyazit@adt.upb.de; andreendo@utfpr.edu.br;
   apm@purdue.edu; adenilso@icmc.usp.br
RI Endo, Andre Takeshi/I-1861-2012; Simao, Adenilso S/E-9620-2011
OI Endo, Andre Takeshi/0000-0002-8737-1749; Simao,
   Adenilso/0000-0002-1454-2607
CR [Anonymous], 1964, 5 ANN S SWITCH CIRC, DOI DOI 10.1109/SWCT.1964.8
   Belli Fevzi, 2010, Proceedings 2010 Fourth IEEE International Conference on Secure Software Integration and Reliability Improvement (SSIRI 2010), P121, DOI 10.1109/SSIRI.2010.23
   Belli F, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P34, DOI 10.1109/ISSRE.2001.989456
   Björklund H, 2005, LECT NOTES COMPUT SC, V3472, P69
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dorofeeva R, 2005, LECT NOTES COMPUT SC, V3731, P204
   Dorofeeva R, 2010, INFORM SOFTWARE TECH, V52, P1286, DOI 10.1016/j.infsof.2010.07.001
   Endo AT, 2013, INFORM SOFTWARE TECH, V55, P1045, DOI 10.1016/j.infsof.2013.01.001
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   Gargantini A, 2005, LECT NOTES COMPUT SC, V3472, P87
   Gill A., 1962, Introduction to the Theory of Finite-State Machines
   GONENC G, 1970, IEEE T COMPUT, VC 19, P551, DOI 10.1109/T-C.1970.222975
   GRASSELL.A, 1965, IEEE TRANS ELECTRON, VEC14, P350, DOI 10.1109/PGEC.1965.264140
   Hierons RM, 2006, IEEE T COMPUT, V55, P618, DOI 10.1109/TC.2006.80
   Hierons RM, 2004, IEEE T COMPUT, V53, P1330, DOI 10.1109/TC.2004.85
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Juristo N, 2004, EMPIR SOFTW ENG, V9, P7, DOI 10.1023/B:EMSE.0000013513.48963.1b
   Krichen M, 2005, LECT NOTES COMPUT SC, V3472, P35
   Lai R, 2002, J SYST SOFTWARE, V62, P21, DOI 10.1016/S0164-1212(01)00132-7
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   Luo G., 1995, Protocol Test Systems. 7th Workshop. 7th IFIP WG 6.1 International Workshop on Protocol Test Systems, P95
   MEALY GH, 1955, AT&T TECH J, V34, P1045, DOI 10.1002/j.1538-7305.1955.tb03788.x
   Moore E.F., 1956, Automata studies, P129
   Pena JM, 1998, 1998 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN, P482, DOI 10.1109/ICCAD.1998.742956
   Petrenko A, 2005, IEEE T COMPUT, V54, P1154, DOI 10.1109/TC.2005.152
   Petrenko A, 2014, IEEE HI ASS SYS ENGR, P224, DOI 10.1109/HASE.2014.39
   Pinto Ferraz Fabbri S. C., 1994, Proceedings. 5th International Symposium on Software Reliability Engineering (Cat. No.94TH8017), P220, DOI 10.1109/ISSRE.1994.341378
   Rezaki A, 1995, COMPUT COMMUN, V18, P911, DOI 10.1016/0140-3664(96)81589-1
   Sandberg S, 2005, LECT NOTES COMPUT SC, V3472, P5
   SIDHU DP, 1989, IEEE T SOFTWARE ENG, V15, P413, DOI 10.1109/32.16602
   Simao A, 2009, IET SOFTW, V3, P91, DOI 10.1049/iet-sen.2008.0018
   Simao A, 2010, IEEE T COMPUT, V59, P1023, DOI 10.1109/TC.2010.17
   Simao A, 2009, LECT NOTES COMPUT SC, V5826, P129, DOI 10.1007/978-3-642-05031-2_9
   Utting M., 2006, Practical Model-Based Testing
   Vasilevskii M.P., 1973, CYBERNETICS, V4, P653
   Zhang F, 2003, IEEE T SOFTWARE ENG, V29, P1, DOI 10.1109/TSE.2003.1166585
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 37
TC 8
Z9 10
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2015
VL 23
IS 3
BP 423
EP 452
DI 10.1007/s11219-014-9242-6
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG8PX
UT WOS:000353572800003
DA 2024-07-18
ER

PT J
AU Businge, J
   Serebrenik, A
   van den Brand, MGJ
AF Businge, John
   Serebrenik, Alexander
   van den Brand, Mark G. J.
TI Eclipse API usage: the good and the bad
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Eclipse; API usage; Software evolution
AB Today, when constructing software systems, many developers build their systems on top of frameworks. Eclipse is such a framework that has been in existence for over a decade. Like many other evolving software systems, the Eclipse platform has both stable and supported interfaces ("good") and unstable, discouraged and unsupported interfaces ("bad"). In this study, we investigate Eclipse interface usage by Eclipse third-party plug-ins (ETPs) based on whether they use bad interfaces or not. The investigations, based on empirical analysis present the following observations. First, we discovered that 44 % of the 512 analyzed Eclipse third-party plug-ins depend on "bad" interfaces and that developers continue to use "bad" interfaces. Second, we have observed that plug-ins that use or extend at least one "bad" interface are comparatively larger and use more functionality from Eclipse than those that use only "good" interfaces. Third, the findings show that the ETPs use a diverse set of "bad" interfaces. Fourth, we observed that the reason why the bad interfaces are being eliminated from the ETPs' source code is, because (ETP developers believe) these non-APIs will cause incompatibilities when a version of the ETP is ported to new Eclipse SDK release. Finally, we observed that when developers eliminate problematic "bad" interfaces, they either re-implement the same functionality in their own API, find equivalent SDK good interfaces, or completely delete the entities in the ETPs' source code that use the functionality from the "bad" interfaces.
C1 [Businge, John] Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
   [Serebrenik, Alexander] Eindhoven Univ Technol, Software Evolut, NL-5600 MB Eindhoven, Netherlands.
   [van den Brand, Mark G. J.] Eindhoven Univ Technol, Model Driven Software Engn, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology; Eindhoven University of Technology;
   Eindhoven University of Technology
RP Serebrenik, A (corresponding author), Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM j.businge@tue.nl; a.serebrenik@tue.nl; M.G.J.v.d.Brand@tue.nl
OI Serebrenik, Alexander/0000-0002-1418-0095; van den Brand,
   Mark/0000-0003-3529-6182
CR [Anonymous], USE ECLIPSE API
   [Anonymous], 2007, EVOLVING JAVA BASED
   [Anonymous], 2006, ISESE '06: Proceedings of the 5th International Symposium on Empirical Software Engineering. Volume II: Short Papers and Posters, DOI DOI 10.1145/1159733.1159739.
   BOLOUR A., 2003, Notes on the eclipse plug-in architecture
   Bosch J., 2000, ACM COMPUTING SURVEY, V32
   Brugali D, 2007, SPRINGER TRAC ADV RO, V30, P259, DOI 10.1007/978-3-540-68951-5_15
   Businge J., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P164, DOI 10.1109/SCAM.2012.10
   Businge J., 2010, EVOL IWPSE 10, P63, DOI [10.1145/1862372.1862389, DOI 10.1145/1862372.1862389]
   Businge  J., 2012, SQM, P54
   Businge J., 2013, THESIS EINDHOVEN U T
   Businge J, 2013, EUR CON SFTWR MTNCE, P427, DOI 10.1109/CSMR.2013.64
   Businge J, 2013, EUR CON SFTWR MTNCE, P37, DOI 10.1109/CSMR.2013.14
   Businge J, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P368, DOI 10.1109/ICSM.2012.6405295
   Dagenais B, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000805
   Dig D, 2006, J SOFTW MAINT EVOL-R, V18, P83, DOI 10.1002/smr.328
   Grechanik M., 2010, ESEM 10
   Hoan AN, 2010, ACM SIGPLAN NOTICES, V45, P302, DOI 10.1145/1932682.1869486
   HODGES JL, 1963, ANN MATH STAT, V34, P598, DOI 10.1214/aoms/1177704172
   Holmes R., 2007, P OOPSLA WORKSH ECL, P70
   Konstantopoulos Dino, 2009, 2009 33rd Annual IEEE International Computer Software and Applications Conference (COMPSAC 2009), P287, DOI 10.1109/COMPSAC.2009.151
   Lammel R., 2011, Proceedings of the 2011 ACM Symposium on Applied Computing, P1317, DOI 10.1145/1982185.1982471
   Lehman M. M., 1985, Program Evolution: Processes of Software Change
   Mileva YM, 2010, LECT NOTES COMPUT SC, V6303, P173, DOI 10.1007/978-3-642-15585-7_17
   Moser S, 1996, COMPUTER, V29, P45, DOI 10.1109/2.536783
   Norusis M., 2008, SPSS 16 0 guide to data analysis
   Poncin W, 2011, EUR CON SFTWR MTNCE, P5, DOI 10.1109/CSMR.2011.5
   Rosenkranz GK, 2010, PHARM STAT, V9, P162, DOI 10.1002/pst.387
   Serebrenik Alexander., 2010, P 26 IEEE INT C SOFT, P1
   Tourwé T, 2003, PROC IEEE INT CONF S, P148, DOI 10.1109/ICSM.2003.1235416
   Vasilescu B., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P313, DOI 10.1109/ICSM.2011.6080798
   Vasilescu B., 2010, 9 BELG NETH SOFTW EV, P1
   Wu Wei, 2010, P 32 ACMIEEE INT C S, P325, DOI DOI 10.1145/1806799.1806848
   Xing ZC, 2006, PROC IEEE INT CONF S, P458
   [No title captured]
NR 34
TC 27
Z9 29
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2015
VL 23
IS 1
BP 107
EP 141
DI 10.1007/s11219-013-9221-3
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC4TB
UT WOS:000350345400007
DA 2024-07-18
ER

PT J
AU Zafar, S
   Mehboob, M
   Naveed, A
   Malik, B
AF Zafar, Saad
   Mehboob, Misbah
   Naveed, Asma
   Malik, Bushra
TI Security quality model: an extension of Dromey's model
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Security quality model; Security; Software defects; Application
   security; Dromey's quality model; Security engineering
AB The quantity of sensitive data that is stored, processed and transmitted has increased many folds in recent years. With this dramatic increase, comes the need to ensure that the data remain trustworthy, confidential and available at all times. Nonetheless, the recent spate of high-profile security incidents shows that software-based systems remain vulnerable due to the presence of serious security defects. Therefore, there is a clear need to improve the current state of software development to guide the development of more secure software. To this end, we propose a security quality model that provides a framework to identify known security defects, their fixes, the underlying low-level software components along with the properties that positively influence the overall security of the product. The proposed model is based on Dromey's quality model that addresses the core issue of quality by providing explicit guidelines on how to build quality into a product. Furthermore, to incorporate security, we have introduced several new model components and model construction guidelines as Dromey's model does not address security explicitly and the model construction guidelines are not specific enough. We use well-known defects and security controls to construct the model as a proof of concept. The constructed model can be used by the programmers during development and can also be used by the quality engineers for audit purposes. We also propose an automated environment in which the model can be used in practice.
C1 [Zafar, Saad; Malik, Bushra] Riphah Int Univ, Fac Comp, Islamabad, Pakistan.
   [Mehboob, Misbah] Int Islamic Univ, Islamabad, Pakistan.
   [Naveed, Asma] Fdn Univ Coll Liberal Arts & Sci, Islamabad, Pakistan.
C3 International Islamic University, Pakistan
RP Malik, B (corresponding author), Riphah Int Univ, Fac Comp, Islamabad, Pakistan.
EM saad.zafar@riphah.edu.pk; mis.misbah@yahoo.com; asmanaveed@fui.edu.pk;
   bushra13_tariq@yahoo.com
OI , Saad Zafar/0000-0002-0527-5914
CR Adnan Rawashdeh., 2006, J COMPUTER SCI, V2, P373, DOI DOI 10.3844/JCSSP.2006.373.381
   Al-Qutaish R.E., 2010, J AM SCI, V6, P166
   Anderson R., 2008, Security engineering, V2nd
   [Anonymous], 1976, TECH REP
   Avizienis A., 2000, ISW 2000. Information Survivability Workshop. Third Information Survivability Workshop - ISW-2000. `Research Directions and Research Collaborations to Protect the Global Information Society', P7
   Balfanz D., 2000, P 4 C USENIX WIND SY, V4
   Barbacci M., 1995, CMUSEI95TR021
   Biba, 1977, 76372 ESDTR BIB MITR
   Boehm B.W., 1978, Characteristics of Software Quality
   Brewer D. F. C., 1989, Proceedings 1989 IEEE Symposium on Security and Privacy (Cat. No.89CH2703-7), P206, DOI 10.1109/SECPRI.1989.36295
   BRITO I, 2002, P EARL ASP ASP OR RE
   Buehrer G., 2005, P 5 INT WORKSH SOFTW
   Dromey RG, 1996, IEEE SOFTWARE, V13, P33, DOI 10.1109/52.476284
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   Ferraiolo D. F., 2001, ACM Transactions on Information and Systems Security, V4, P224, DOI 10.1145/501978.501980
   Firesmith D.G., 2003, COMMON CONCEPTS UNDE
   Franch X, 2003, IEEE SOFTWARE, V20, P34, DOI 10.1109/MS.2003.1159027
   Gordon LA, 2003, COMMUN ACM, V46, P81, DOI 10.1145/636772.636774
   Grady R.B., 1987, SOFTWARE METRICS EST, V1
   Hofheinz D., 2008, P THEOR APPL CRYPT T
   Howard M., 2006, 19 DEADLY SINS SOFTW
   I. I. S, 1991, ISO9126 I I S
   Jamwal D., 2010, International Journal of Latest Trends in Computing, V1
   Joshi J.B., 2002, Advances in Digital Government, P121, DOI DOI 10.1007/0-306-47374-7_7
   KITCHENHAM B, 1987, SOFTWARE ENG J, V2, P105, DOI 10.1049/sej.1987.0014
   Kraemer S, 2007, APPL ERGON, V38, P143, DOI 10.1016/j.apergo.2006.03.010
   Kshetri N, 2006, IEEE SECUR PRIV, V4, P33, DOI 10.1109/MSP.2006.27
   Landwehr CE, 2001, 17TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P174, DOI 10.1109/ACSAC.2001.991535
   LODDERSTEDT T, 2002, P 5 INT C UN MOD LAN
   McGraw G., 2006, Building security in
   Mouratidis H, 2005, INFORM SYST, V30, P609, DOI 10.1016/j.is.2004.06.002
   Mouratidis H, 2007, INTEGRATING SECURITY AND SOFTWARE ENGINEERING: ADVANCES AND FUTURE VISIONS, P1
   NAGARATNAM N, 2004, GLOB GRID FOR REC DR
   Ortega M, 2003, SOFTWARE QUAL J, V11, P219, DOI 10.1023/A:1025166710988
   Ortega M., 2001, 4 WORLD MULT SYST CY, P395
   Sidiroglou S., 2005, P 8 INT C INF SEC SI
   Tawfik S. M., 2007, P WORKSH MEAS REQ PR
   Tomar A. B., 2011, INT J SOFTWARE ENG A, V2, P1
   Wang Chenxi., 1997, Proc. National Information Systems Security Conference, Baltimore, P522
   Younan Y., 2003, An overview of common programming security vulnerabilities and possible solutions
NR 40
TC 4
Z9 4
U1 0
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2015
VL 23
IS 1
BP 29
EP 54
DI 10.1007/s11219-013-9223-1
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC4TB
UT WOS:000350345400003
DA 2024-07-18
ER

PT J
AU Zhang, T
   Zheng, XM
   Zhang, Y
   Zhao, JH
   Li, XD
AF Zhang, Tian
   Zheng, Xiaomei
   Zhang, Yan
   Zhao, Jianhua
   Li, Xuandong
TI A declarative approach for Java code instrumentation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Source query; Code instrumentation; Java
AB Source instrumentation plays an important role in dynamic program analysis. However, current instrumentation implementations require programmers to write ad hoc rules that are often too complex to use and maintain. To address this complexity, we divide the task of source instrumentation into two steps: first, the source points are queried, into which code fragments should be planted; secondly, the code fragments including contextual information are generated and planted into source code through the queried points. According to this idea, we present a new method based on declarative code queries, which makes it easier to specify instrumentations using contextual information collected from expressive code queries. The JIns language provided by our method is constructed following an SQL-like style, which is well known and widely used by programmers. We evaluate the method in terms of the reduced complexity of instrumentation specifications for several common instrumentation tasks.
C1 [Zhang, Tian; Zhao, Jianhua; Li, Xuandong] Nanjing Univ, Natl Key Lab Novel Software Technol, Nanjing 210008, Jiangsu, Peoples R China.
   [Zheng, Xiaomei] Nanjing Univ Chinese Med, Sch Informat Technol, Nanjing, Jiangsu, Peoples R China.
   [Zhang, Yan] Beijing Elect Sci & Technol Inst, Dept Comp Sci & Technol, Beijing, Peoples R China.
C3 Nanjing University; Nanjing University of Chinese Medicine; Beijing
   Electronic Science & Technology Institute
RP Zhang, T (corresponding author), Nanjing Univ, Natl Key Lab Novel Software Technol, Nanjing 210008, Jiangsu, Peoples R China.
EM ztluck@nju.edu.cn; zhengxiaomei@njutcm.edu.cn; zhangyan@sei.pku.edu.cn
FU National Natural Science Foundation of China [61003025, 61021062];
   National 863 High-Tech Programme of China [2011AA010103, 2012AA011205]
FX This work is supported by the National Natural Science Foundation of
   China (No. 61003025, No. 61021062) and the National 863 High-Tech
   Programme of China (No. 2011AA010103, No. 2012AA011205).
CR Alves TL, 2011, IEEE INT WORK C SO, P145, DOI 10.1109/SCAM.2011.14
   Beyer D., 2006, 28th International Conference on Software Engineering Proceedings, P807, DOI 10.1145/1134285.1134420
   Chen M., 2006, P 2006 INT WORKSH AU, P2
   Chixiang Z., 2011, SOFTW TEST VERIF REL, V21
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Du Bois B., 2007, IN PROC OF THE 3RD I
   Holt RC, 2008, WORK CONF REVERSE EN, P5, DOI 10.1109/WCRE.2008.34
   KICZALES G, 1997, SPRINGER LNCS, V1241
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Muller H. A., 1988, Proceedings of the 10th International Conference on Software Engineering (Cat. No.88CH2554-4), P80, DOI 10.1109/ICSE.1988.93690
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Seesing A., 2005, PROCEEDINGS OF THE 2, P45
   Tang EY, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P567, DOI 10.1109/ICSM.2012.6405322
   Tuya J., 2006, SECOND WORKSHOP ON M
   Tuya J, 2007, INFORM SOFTWARE TECH, V49, P398, DOI 10.1016/j.infsof.2006.06.009
   Valle-Rai R., IN CASCON FIRST DECA, P214
   van der Schuur H, 2011, EUR CON SFTWR MTNCE, P201, DOI 10.1109/CSMR.2011.26
   Verbaere M, 2008, INT C PROGRAM COMPRE, P283, DOI 10.1109/ICPC.2008.27
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
NR 19
TC 3
Z9 3
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2015
VL 23
IS 1
BP 143
EP 170
DI 10.1007/s11219-013-9220-4
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC4TB
UT WOS:000350345400008
DA 2024-07-18
ER

PT J
AU Julliand, J
   Stouls, N
   Bué, PC
   Masson, PA
AF Julliand, J.
   Stouls, N.
   Bue, P. -C.
   Masson, P. -A.
TI B model slicing and predicate abstraction to generate tests
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Abstraction; Test generation; (Bi)Simulation slicing
ID REDUCTION
AB In a model-based testing approach as well as for the verification of properties, B models provide an interesting modeling solution. However, for industrial applications, the size of their state space often makes them hard to handle. To reduce the amount of states, an abstraction function can be used. The abstraction is often a domain abstraction of the state variables that requires many proof obligations to be discharged, which can be very time-consuming for real applications. This paper presents a contribution to this problem that complements an approach based on domain abstraction for test generation, by adding a preliminary syntactic abstraction phase, based on variable elimination. We define a syntactic transformation that suppresses some variables from a B event model, in addition to three methods that choose relevant variables according to a test purpose. In this way, we propose a method that computes an abstraction of a source model M according to a set of selected relevant variables. Depending on the method used, the abstraction can be computed as a simulation or as a bisimulation of M. With this approach, the abstraction process produces a finite state system. We apply this abstraction computation to a model-based testing process. We evaluate experimentally the impact of the model simplification by variables' elimination on the size of the models, on the number of proof obligations to discharge, on the precision of the abstraction and on the coverage achieved by the test generation.
C1 [Julliand, J.; Bue, P. -C.; Masson, P. -A.] Univ Franche Comte, LIFC, F-25030 Besancon, France.
   [Stouls, N.] Univ Lyon, INRIA, INSA Lyon, CITI, F-69621 Villeurbanne, France.
C3 Universite de Franche-Comte; Inria; Institut National des Sciences
   Appliquees de Lyon - INSA Lyon
RP Masson, PA (corresponding author), Univ Franche Comte, LIFC, 16 Route Gray, F-25030 Besancon, France.
EM julliand@lifc.univ-fcomte.fr; nicolas.stouls@insa-lyon.fr;
   bue@lifc.univ-fcomte.fr; masson@lifc.univ-fcomte.fr
OI Stouls, Nicolas/0000-0002-7406-9583
CR Abrial J., 1996, 1 C B METHOD PUTTING, P169
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 1997, LNCS
   Ball T, 2005, LECT NOTES COMPUT SC, V3657, P1
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Bellegarde F, 2000, LECT NOTES COMPUT SC, V1783, P266
   BENSALEM S, 1998, LNCS, V1427
   BERT D, 2005, LNCS, V3455
   Bouquet F., 2004, International Journal on Software Tools for Technology Transfer, V6, P143, DOI 10.1007/s10009-003-0123-8
   BOUQUET F, 2009, AFADL 2009 TOUL FRAN, P161
   Bouquet F., 2007, LNCS, V4355, P96
   Bouquet F., 2010, A MOST 10
   Broy M, 2005, LNCS, V3472
   Brückner I, 2005, LECT NOTES COMPUT SC, V3785, P360
   CHAN W, 1997, LNCS, V1254
   Clarke Edmund M., 2001, Model Checking
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   COLON MA, 1998, LNCS, V1427
   Couchot J.-F., 2009, AFM 09
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Darlot C, 2003, LECT NOTES COMPUT SC, V2651, P408
   Dick J., 1993, FME'93: Industrial-Strength Formal Methods. First International Symposium of Formal Methods Europe Proceedings, P268, DOI 10.1007/BFb0024651
   Dwyer MB, 2006, LECT NOTES COMPUT SC, V3920, P73
   Friedman G., 2002, Software Engineering Notes, V27, P134, DOI 10.1145/566171.566192
   Heimdahl MPE, 1997, LECT NOTES COMPUT SC, V1301, P450, DOI 10.1145/267896.267926
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Julliand J., 2008, AST 08 3 INT WORKSH, P41, DOI DOI 10.1145/1370042.1370051
   Julliand J, 2010, LECT NOTES COMPUT SC, V6143, P151, DOI 10.1007/978-3-642-13977-2_13
   Labbé S, 2007, 2007 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P191, DOI 10.1109/ASWEC.2007.43
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Marlet R., 2002, SECSAFETL007 TRUST L
   Namjoshi K. S., 2000, Computer Aided Verification, P435
   Sipma HB, 1999, FORM METHOD SYST DES, V15, P49, DOI 10.1023/A:1008791913551
   Thimbleby H, 2003, SOFTWARE PRACT EXPER, V33, P1081, DOI 10.1002/spe.540
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Utting M., 2006, Practical Model-Based Testing
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
NR 38
TC 2
Z9 2
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2013
VL 21
IS 1
BP 127
EP 158
DI 10.1007/s11219-011-9161-8
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074MB
UT WOS:000313815500007
DA 2024-07-18
ER

PT J
AU Baldassarre, MT
   Caivano, D
   Pino, FJ
   Piattini, M
   Visaggio, G
AF Baldassarre, Maria Teresa
   Caivano, Danilo
   Pino, Francisco J.
   Piattini, Mario
   Visaggio, Giuseppe
TI Harmonization of ISO/IEC 9001:2000 and CMMI-DEV: from a theoretical
   comparison to a real case application
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Harmonization; Mapping; SPI; Multi-model; CMMI-DEV; ISO 9001; GQM
ID IMPROVEMENT; MODEL
AB In the past years, both industrial and research communities in Software Engineering have shown special interest in Software Process Improvement-SPI. This is evidenced by the growing number of publications on the topic. The literature offers numerous quality frameworks for addressing SPI practices, which may be classified into two groups: ones that describe "what" should be done (ISO 9001, CMMI) and ones that describe "how" it should be done (Six Sigma, Goal Question Metrics-GQM). When organizations decide to adopt improvement initiatives, many models may be implied, each leveraging the best practices provided, in the quest to address the improvement challenges as well as possible. This may at the same time, however, generate confusion and overlapping activities, as well as extra effort and cost. That, in turn, risks generating a series of inefficiencies and redundancies that end up leading to losses rather than to effective process improvement. Consequently, it is important to move toward a harmonization of quality frameworks, aiming to identify intersections and overlapping parts, as well as to create a multi-model improvement solution. Our aim in this work is twofold: first of all, we propose a theoretical harmonization process that supports organizations interested in introducing quality management and software development practices or concerned about improving those they already have. This is done with specific reference to CMMI-DEV and ISO 9001 models in the direction "ISO to CMMI-DEV", showing how GQM is used to define operational goals that address ISO 9001 statements, reusable in CMMI appraisals. Secondly, we apply the theoretical comparison process to a real case, i.e., a Small Enterprise certified ISO 9001.
C1 [Baldassarre, Maria Teresa; Caivano, Danilo; Visaggio, Giuseppe] Univ Bari, Dept Informat, SER & Practices SPINOFF, I-70126 Bari, Italy.
   [Pino, Francisco J.] Univ Cauca, IDIS Res Grp, Elect & Telecommun Engn Fac, Cauca, Colombia.
   [Piattini, Mario] Univ Castilla La Mancha, Alarcos Res Grp, Inst Informat Technol & Syst, E-13071 Ciudad Real, Spain.
C3 Universita degli Studi di Bari Aldo Moro; Universidad del Cauca;
   Universidad de Castilla-La Mancha
RP Baldassarre, MT (corresponding author), Univ Bari, Dept Informat, SER & Practices SPINOFF, Via E Orabona 4, I-70126 Bari, Italy.
EM baldassarre@di.uniba.it; caivano@di.uniba.it; fjpino@unicauca.edu.co;
   Mario.Piattini@uclm.es; visaggio@di.uniba.it
RI Pino Correa, Francisco José/GNP-2495-2022; Piattini, Mario/F-6271-2013
OI Pino Correa, Francisco José/0000-0003-0668-4485; Piattini,
   Mario/0000-0002-7212-8279; baldassarre, maria
   teresa/0000-0001-8589-2850; Caivano, Danilo/0000-0001-5719-7447;
   VISAGGIO, GIUSEPPE/0000-0001-5258-5328
CR [Anonymous], 2000, ISO 9001:2000
   Ardimento P, 2004, LECT NOTES COMPUT SC, V3009, P159
   ARMONIAS, 2009, PROC DRIV MULT HARM
   Baldassarre M. T., 2010, 90012000 ISO
   Baldassarre M. T., 2010, P 4 INT WORKSH SOFTW, P65
   Baldassarre M. T., 2010, LNCS
   Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   Ferchichi A., 2008, P 1 INT WORKSH MOD D
   Ferreira A, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ADVANCES (ICSEA 2009), P512, DOI 10.1109/ICSEA.2009.80
   Ferreira AL, 2010, EUROMICRO CONF PROC, P306, DOI 10.1109/SEAA.2010.54
   Godfrey S., 2008, What is CMMI ? NASA presentation
   HALVORSEN CP, 2001, LNCS, V2077, P217
   Hefner R., 2002, P SOFTW TECHN C
   Heston K., 2011, J SOFTWARE MAINTENAN, V23, DOI [10.1002/spip.434, DOI 10.1002/SPIP.434]
   Humphrey W., 2006, TSP (SM) coaching development teams
   JALOTE P, 1999, CMM PRACTICE PROCESS
   Kitson D. H., 2009, INITIAL COMP ANAL CM, P70
   Lepasaar M., 2002, P SPICE 2002 VEN IT
   Mutafelija B., 2009, 90012000CMMI ISO SOF
   Mutafelija B., 2003, 90012000 ISO SOFTW E, V31
   Pardo C., 2010, 11 INT C PROD FOC SO
   Pardo C., 2009, P 4 INT C SOFTW DAT
   Pardo C, 2010, ENASE 2010: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, P40
   Paulk M. C., 2008, P 4 WORLD C SOFTW QU
   PAULK MC, 1995, IEEE SOFTWARE, V12, P74, DOI 10.1109/52.363163
   PAULK MC, 1993, SOFTWARE QUAL J, V2, P245, DOI 10.1007/BF00403767
   PAULK MC, 1994, CMUSEI94TR12
   Pino F., 2009, P SOFTW PROC IMPR CA, P69
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Pino FJ, 2010, J SOFTW MAINT EVOL-R, V22, P279, DOI 10.1002/spip.437
   Pino FJ, 2009, ENASE 2009: EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, PROCEEDINGS, P177
   PMI-Project Management Institute, 2009, GUID PROJ MAN BOD KN
   Rout Terence P., 2007, Software Process Improvement and Practice, V12, P361, DOI 10.1002/spip.329
   SEI, 2006, CMUSEI2006TR008
   SEI, 2010, PRIME PROJ
   Siviy J., 2008, P MULT IMPR PRACT SE
   Siviy J., 2008, Maximizing your process improvement ROI through harmonization
   Siviy J., 2008, VALUE HARMONIZATION
   SPICE, 2008, ENT SPICE ENT INT ST
   Violino B., 2005, OPTIMIZE         MAR, V4, P68
   Wangenheim C. G. v., 2005, ANALYSING INTEGRATIO, P28
   WOHLIN C, 2002, EXPT SOFTWARE ENG IN
   Yoo C, 2006, J SYST SOFTWARE, V79, P954, DOI 10.1016/j.jss.2005.06.042
   Zelkowitz MV, 1998, COMPUTER, V31, P23, DOI 10.1109/2.675630
NR 44
TC 25
Z9 30
U1 1
U2 32
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2012
VL 20
IS 2
SI SI
BP 309
EP 335
DI 10.1007/s11219-011-9154-7
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 935GT
UT WOS:000303507800004
DA 2024-07-18
ER

PT J
AU Mäntylä, MV
   Itkonen, J
   Iivonen, J
AF Mantyla, Mika V.
   Itkonen, Juha
   Iivonen, Joonas
TI Who tested my software? Testing as an organizationally cross-cutting
   activity
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Industrial case study; Testing; Roles; Testers; Defect reporters;
   Values; Defect fix rate; Defect data analysis; Interviews
AB There is a recognized disconnect between testing research and industry practice, and more studies are needed on understanding how testing is conducted in real-world circumstances instead of demonstrating the superiority of specific methods. Recent literature indicates that testing is a cross-cutting activity that involves various organizational roles rather than the sole involvement of specialized testers. This research empirically investigates how testing involves employees in varying organizational roles in software product companies. We studied the organization and values of testing using an exploratory case study methodology through interviews, defect database analysis, workshops, analyses of documentation, and informal communications at three software product companies. We analyzed which employee groups test software in the case companies, and how many defects they find. Two companies organized testing as a team effort, and one company had a specialized testing group because of its different development model. We found evidence that testing was not an action conducted only by testing specialists. Testing by individuals with customer contact and domain expertise was an important validation method. We discovered that defects found by developers had the highest fix rates while those revealed by specialized testers had the lowest. The defect importance was susceptible to organizational competition of resources (i.e., overvaluing defects of reporter's own products or projects). We conclude that it is important to understand the diversity of individuals participating in software testing and the relevance of validation from the end users' viewpoint. Future research is required to evaluate testing approaches for diverse organizational roles. Finally, to improve defect information, we suggest increasing automation in defect data collection.
C1 [Mantyla, Mika V.; Itkonen, Juha; Iivonen, Joonas] Aalto Univ, Sch Sci, Dept Comp Sci & Engn, Aalto 00076, Finland.
C3 Aalto University
RP Mäntylä, MV (corresponding author), Aalto Univ, Sch Sci, Dept Comp Sci & Engn, POB 19210, Aalto 00076, Finland.
EM mika.mantyla@aalto.fi; juha.itkonen@aalto.fi; joonas.iivonen@iki.fi
RI Mäntylä, Mika V/E-7644-2012; Buttree, Matthew/JSK-8811-2023; Itkonen,
   Juha/E-8360-2012
OI Itkonen, Juha/0000-0001-9084-495X; Mantyla, Mika/0000-0002-2841-5879
FU TEKES; SoSE
FX The authors would like to thank Casper Lassenius, Timo Lehtinen, Tuomas
   Niinimaki, Jari Vanhanen, and the anonymous reviewers for their helpful
   comments. We acknowledge the efforts of the case companies who
   participated in our research and funding by TEKES and SoSE. A
   significant portion of this paper was written in Simula Research
   Laboratory, which provided an enthusiastic atmosphere for the
   corresponding author.
CR Ahonen JJ, 2004, EMPIR SOFTW ENG, V9, P275, DOI 10.1023/B:EMSE.0000039880.99096.af
   Andersson C, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P37, DOI 10.1109/ISESE.2002.1166923
   Andersson Carina, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P458
   Andersson C, 2007, IEEE T SOFTWARE ENG, V33, P273, DOI 10.1109/TSE.2007.1005
   [Anonymous], 1990, QUALITATIVE EVALUATI, DOI DOI 10.1002/NUR.4770140111
   [Anonymous], 2010, P 2010 ACM IEEE INT
   Aranda J, 2009, PROC INT CONF SOFTW, P298, DOI 10.1109/ICSE.2009.5070530
   Arisholm E, 2004, IEEE T SOFTWARE ENG, V30, P521, DOI 10.1109/TSE.2004.43
   Arisholm E, 2007, IEEE T SOFTWARE ENG, V33, P65, DOI 10.1109/TSE.2007.17
   Baddoo N., 2002, Software Process Improvement and Practice, V7, P17, DOI 10.1002/spip.151
   Beck K., 2000, EXTREME PROGRAMMING
   Beer A, 2008, PROCEEDINGS OF THE 34TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, P258, DOI 10.1109/SEAA.2008.28
   BENBASAT I, 1987, MIS QUART, V11, P369, DOI 10.2307/248684
   Berner S, 2005, PROC INT CONF SOFTW, P571
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Cusumano M.A., 1995, MICROSOFT SECRETS
   Engström E, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P22
   Glass RL, 2006, IEEE SOFTWARE, V23, P55, DOI 10.1109/MS.2006.113
   Gokhale S. S., 2010, EMPIR SOFTW ENG, V15, P1
   Guo PJ, 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering, P495
   Itkonen J, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P82, DOI 10.1109/ISESE.2005.1541817
   Itkonen J, 2009, INT SYMP EMP SOFTWAR, P495
   Jalote P, 2007, J SYST SOFTWARE, V80, P584, DOI 10.1016/j.jss.2006.07.025
   Jönsson P, 2005, LECT NOTES COMPUT SC, V3547, P343
   Juristo N, 2009, IEEE SOFTWARE, V26, P15, DOI 10.1109/MS.2009.2
   Kettunen V., 2010, P 19 INT S SOFTW TES, P231, DOI [10.1145/1831708.1831737, DOI 10.1145/1831708.1831737]
   Martin D, 2007, PROC INT CONF SOFTW, P602
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Rooksby J, 2009, COMPUT SUPP COOP W J, V18, P559, DOI 10.1007/s10606-009-9098-7
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Strauss A.L., 1990, BASICS QUALITATIVE R
   Taipale Ossi, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P21
   Vanhanen Jari, 2009, 2009 Third International Workshop on Software Product Management (IWSPM 2009), P42, DOI 10.1109/IWSPM.2009.5
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 34
TC 22
Z9 23
U1 1
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2012
VL 20
IS 1
BP 145
EP 172
DI 10.1007/s11219-011-9157-4
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 873ET
UT WOS:000298864600004
OA hybrid
DA 2024-07-18
ER

PT J
AU Martínez-Ruiz, T
   Münch, J
   García, F
   Piattini, M
AF Martinez-Ruiz, Tomas
   Munch, Jurgen
   Garcia, Felix
   Piattini, Mario
TI Requirements and constructors for tailoring software processes: a
   systematic literature review
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Systematic review; Software process; Process tailoring; Variability;
   Process lines; Variant-rich processes; Project management
ID PROCESS MODEL; METHODOLOGY
AB Organizations developing software-based systems or services often need to tailor process reference models-including product-oriented and project-oriented processes-to meet both their own characteristics and those of their projects. Existing process reference models, however, are often defined in a generic manner. They typically offer only limited mechanisms for adapting processes to the needs of organizational units, project goals, and project environments. This article presents a systematic literature review of peer-reviewed conference and journal articles published between 1990 and 2009. Our aim was both to identify requirements for process-tailoring notation and to analyze those tailoring mechanisms that are currently in existence and that consistently support process tailoring. The results show that the software engineering community has demonstrated an ever-increasing interest in software process tailoring, ranging from the consideration of theoretical proposals regarding how to tailor processes to the scrutiny of practical experiences in organizations. Existing tailoring mechanisms principally permit the modeling of variations of activities, artifacts, or roles by insertion or deletion. Two types of variations have been proposed: the individual modification of process elements and the simultaneous variation of several process elements. Resolving tailoring primarily refers to selecting or deselecting optional elements or to choosing between alternatives. It is sometimes guided by explicitly defined processes and supported by tools or mechanisms from the field of knowledge engineering. The study results show that tailoring notations are not as mature as the industry requires if they are to provide the kind of support for process tailoring that fulfills the requirements identified, i.e., including security policies for the whole process, or carrying out one activity rather than another. A notation must therefore be built, which takes these requirements into consideration in order to permit variant-rich processes representation and use this variability to consistently support process tailoring.
C1 [Martinez-Ruiz, Tomas; Garcia, Felix; Piattini, Mario] Univ Castilla La Mancha, Alarcos Res Grp, Dept Informat Technol & Syst, Escuela Super Informat, E-13071 Ciudad Real, Spain.
   [Munch, Jurgen] Univ Helsinki, FIN-00014 Helsinki, Finland.
C3 Universidad de Castilla-La Mancha; University of Helsinki
RP Martínez-Ruiz, T (corresponding author), Univ Castilla La Mancha, Alarcos Res Grp, Dept Informat Technol & Syst, Escuela Super Informat, Paseo Univ 4, E-13071 Ciudad Real, Spain.
EM tomas.martinez@uclm.es; juergen.muench@cs.Helsinki.fi;
   felix.garcia@uclm.es; mario.piattini@uclm.es
RI Piattini, Mario/F-6271-2013; Münch, Jürgen/ABC-2316-2020; Garcia,
   Felix/D-4299-2011
OI Piattini, Mario/0000-0002-7212-8279; Münch, Jürgen/0000-0003-0327-8094;
   Garcia, Felix/0000-0001-6460-0353
FU FPU of the Spanish Ministerio de Educacion; PEGASO/MAGO (Ministerio de
   Ciencia e Innovacion and Fondo Europeo de Desarrollo Regional)
   [TIN2009-13718-C02-01]; MEDUSAS (Centro para el Desarrollo Tecnologico e
   Industrial (Ministerio de Ciencia e Innovacion)) [IDI-20090557];
   ALTAMIRA (Junta de Comunidades de Castilla-la Mancha, Fondo Social
   Europeo) [PII2I09-0106-2463]; INGENIOSO (Junta de Comunidades de
   Castilla-la Mancha) [PEII11-0025-9533]
FX This work is partially supported by the Program FPU of the Spanish
   Ministerio de Educacion and by the PEGASO/MAGO (Ministerio de Ciencia e
   Innovacion and Fondo Europeo de Desarrollo Regional,
   TIN2009-13718-C02-01), MEDUSAS (Centro para el Desarrollo Tecnologico e
   Industrial (Ministerio de Ciencia e Innovacion), IDI-20090557), ALTAMIRA
   (Junta de Comunidades de Castilla-la Mancha, Fondo Social Europeo,
   PII2I09-0106-2463), and INGENIOSO (Junta de Comunidades de Castilla-la
   Mancha, PEII11-0025-9533) projects. We would also like to thank Sonnhild
   Namingha from Fraunhofer IESE for reviewing the first version of this
   paper.
CR [Anonymous], 2008, 122072008 ISOIEC
   [Anonymous], 2004, PROCEDURES PERFORMIN
   Armbrust Ove, 2008, Software Process: Improvement and Practice, V13, P5, DOI 10.1002/spip.391
   Balasubramaniam D., 2007, P SOFTW ARCH 2007 WI, P14
   Baldassarre MT, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P103, DOI 10.1109/ISESE.2002.1166930
   Batista J., 2000, Software Process Improvement and Practice, V5, P243, DOI 10.1002/1099-1670(200012)5:4<243::AID-SPIP126>3.0.CO;2-0
   BIFFL S, 2006, J SOFTWARE PROCESS I, V11, P229
   Biolchini J., 2005, Int. Sugar J.
   Brinkkemper S, 1996, INFORM SOFTWARE TECH, V38, P275, DOI 10.1016/0950-5849(95)01059-9
   Budgen D., 2008, P PPIG 2008, P195, DOI DOI 10.1007/978-3-642-02152-7_36
   Cass A, 2002, EUROMICRO CONF PROC, P352, DOI 10.1109/EURMIC.2002.1046215
   Chou SC, 2000, SOFTWARE PRACT EXPER, V30, P175, DOI 10.1002/(SICI)1097-024X(200003)30:3<175::AID-SPE294>3.0.CO;2-M
   Chrissis M. B., 2006, SEI SERIES SOFTWARE, V1
   Clements P., 2002, Software product lines
   Dai F, 2007, SNPD 2007: EIGHTH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, ARTIFICIAL INTELLIGENCE, NETWORKING, AND PARALLEL/DISTRIBUTED COMPUTING, VOL 2, PROCEEDINGS, P782, DOI 10.1109/SNPD.2007.25
   Demirörs O, 2000, EUROMICRO CONF PROC, pA300
   Fuggetta A., 2000, P C LIM IR FUT SOFTW, P25, DOI DOI 10.1145/336512.336521
   Giese C, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P229
   Hanssen GK, 2005, LECT NOTES COMPUT SC, V3547, P314
   Hausen HL, 1998, KNOWL-BASED SYST, V11, P105, DOI 10.1016/S0950-7051(98)00050-1
   Hesse W., 1999, LNCS, VLNCS 1626, P210
   Huang LG, 2006, LECT NOTES COMPUT SC, V3966, P56
   Ibarguengoitia G., 2006, P ENC 03 P 4 MEX INT, P68
   *ISO, 2002, 122072002 ISOIEC
   *ISO, 2006, 1550452006E ISOIEC
   *ISO, 2004, 1550422003COR12004E
   JACCHERI ML, 1993, IEEE T SOFTWARE ENG, V19, P1145, DOI 10.1109/32.249660
   Jaufman O, 2005, LECT NOTES COMPUT SC, V3547, P328
   Johansson E, 2005, LECT NOTES COMPUT SC, V3547, P39
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   KRUTCHEN P, 2000, RATIONAL UNIFIED PRO
   Lazovik A, 2007, LECT NOTES COMPUT SC, V4831, P373
   Lobsitz R. M, 1996, P 1996 HAW INT C SYS
   MADHAVJI NH, 1991, IEEE T SOFTWARE ENG, V17, P1270, DOI 10.1109/32.106987
   Martinez-Ruiz T., 2009, EUROSPI 2009 ALC HEN, P1213
   Martínez-Ruiz T, 2008, STUD COMPUT INTELL, V150, P115, DOI 10.1007/978-3-540-70561-1_9
   Ocampo A., 2005, Software Process Improvement and Practice, V10, P273, DOI 10.1002/spip.229
   Osterweil L, 1987, 9 ICSE MONT CA MARCH
   Park S, 2006, EXPERT SYST APPL, V30, P179, DOI 10.1016/j.eswa.2005.06.023
   Peng Xu, 2008, IT Professional, V10, P39, DOI 10.1109/MITP.2008.81
   Piattini M., 2007, ACM SIGSOFT SOFTWARE, V32, P1
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Plogert K, 1996, J SYST ARCHITECT, V42, P601, DOI 10.1016/S1383-7621(96)00047-1
   Rombach D, 2005, LECT NOTES COMPUT SC, V3840, P83
   Sandelowski M, 2007, RES NURS HEALTH, V30, P99, DOI 10.1002/nur.20176
   Schnieders A, 2006, ECBS 06, P289, DOI [10.1109/ECBS.2006.72, DOI 10.1109/ECBS.2006.72]
   Sechser Bernhard, 2009, Software Process: Improvement and Practice, V14, P349, DOI 10.1002/spip.425
   *SEI, 2001, CMUSEI2001HB001
   SEI, 2004, CAP MAT MOD INT CMMI
   Seo J, 2000, SEVENTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P356, DOI 10.1109/APSEC.2000.896720
   Sheard S.A., 1998, P 8 INT S SYSTEMS EN, P589
   Simidchieva B. I., 2007, LNCS, VLNCS 4470, P121
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   Sutton S. M.  Jr, 1996, Proceedings of the 8th International Workshop on Software Specification and Design, P186, DOI 10.1109/IWSSD.1996.501166
   Szyperski C., 1998, LNCS, VLNCS 1743, p[1998, 184]
   Yoon I.-C., 2001, 8 APSEC MAC CHIN
NR 56
TC 27
Z9 27
U1 1
U2 33
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2012
VL 20
IS 1
BP 229
EP 260
DI 10.1007/s11219-011-9147-6
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 873ET
UT WOS:000298864600007
DA 2024-07-18
ER

PT J
AU Samalikova, J
   Kusters, R
   Trienekens, J
   Weijters, T
   Siemons, P
AF Samalikova, Jana
   Kusters, Rob
   Trienekens, Jos
   Weijters, Ton
   Siemons, Paul
TI Toward objective software process information: experiences from a case
   study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software process mining; Configuration management data
AB A critical problem in software development is the monitoring, control and improvement in the processes of software developers. Software processes are often not explicitly modeled, and manuals to support the development work contain abstract guidelines and procedures. Consequently, there are huge differences between 'actual' and 'official' processes: "the actual process is what you do, with all its omissions, mistakes, and oversights. The official process is what the book, i.e., a quality manual, says you are supposed to do" (Humphrey in A discipline for software engineering. Addison-Wesley, New York, 1995). Software developers lack support to identify, analyze and better understand their processes. Consequently, process improvements are often not based on an in-depth understanding of the 'actual' processes, but on organization-wide improvement programs or ad hoc initiatives of individual developers. In this paper, we show that, based on particular data from software development projects, the underlying software development processes can be extracted and that automatically more realistic process models can be constructed. This is called software process mining (Rubin et al. in Process mining framework for software processes. Software process dynamics and agility. Springer Berlin, Heidelberg, 2007). The goal of process mining is to better understand the development processes, to compare constructed process models with the 'official' guidelines and procedures in quality manuals and, subsequently, to improve development processes. This paper reports on process mining case studies in a large industrial company in The Netherlands. The subject of the process mining is a particular process: the change control board (CCB) process. The results of process mining are fed back to practice in order to subsequently improve the CCB process.
C1 [Samalikova, Jana; Kusters, Rob; Trienekens, Jos; Weijters, Ton] Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
   [Siemons, Paul] Draugronth, NL-3959 AC Overberg, Netherlands.
C3 Eindhoven University of Technology
RP Trienekens, J (corresponding author), Eindhoven Univ Technol, Den Dolech 2, NL-5600 MB Eindhoven, Netherlands.
EM j.j.m.trienekens@tue.nl; paul.siemons@draugronth.nl
RI Kusters, Rob/B-3093-2010
OI Kusters, Rob/0000-0003-4069-5655
CR BEEST VRT, 2007, SYNASC INT S, P541
   Cook J. E., 1998, ACM Transactions on Software Engineering and Methodology, V7, P215, DOI 10.1145/287000.287001
   DORLING A, 1993, SOFTWARE QUAL J, V2, P209, DOI 10.1007/BF00403764
   Humphrey W S, 1995, A discipline for software engineering
   Rozinat A, 2008, INFORM SYST, V33, P64, DOI 10.1016/j.is.2007.07.001
   Rubin V, 2007, LECT NOTES COMPUT SC, V4470, P169
   *SEI CMMI PROD TEA, 2006, CMUSEI2006TR008
   Trienekens JJM, 2009, SOFTWARE QUAL J, V17, P231, DOI 10.1007/s11219-008-9063-6
   van der Aalst W, 2005, PROCESS-AWARE INFORMATION SYSTEMS: BRIDGING PEOPLE AND SOFTWARE THROUGH PROCESS TECHNOLOGY, P235, DOI 10.1002/0471741442.ch10
   van der Aalst WMP, 2003, DATA KNOWL ENG, V47, P237, DOI 10.1016/S0169-023X(03)00066-1
   van Dongen BF, 2005, LECT NOTES COMPUT SC, V3536, P444
   Weijters A., 2006, BETA WORKING PAPER S, V166
   Witten I. H., 2005, DATA MINING PRACTICA
NR 13
TC 6
Z9 8
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2011
VL 19
IS 1
SI SI
BP 101
EP 120
DI 10.1007/s11219-010-9105-8
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TY
UT WOS:000286465500005
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Silveira, PS
   Becker, K
   Ruiz, DD
AF Silveira, Patricia Souza
   Becker, Karin
   Ruiz, Duncan D.
TI SPDW plus : a seamless approach for capturing quality metrics in
   software development environments
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality metrics; Software metrics analysis and monitoring;
   Metrics data warehousing; Metrics repository; Software development
   environments
AB Among the key factors for the success of a metrics program are the regularity of metrics collection, a seamless and efficient data collection methodology, and the presence of non-intrusive automated data collection tools. This paper presents the software process data warehousing architecture SPDW+ as a solution to the frequent, seamless, and automated capturing of software quality metrics, and their integration in a central repository for a full range of analyses. The striking features of the SPDW+ ETL (data extraction, transformation, and loading) approach are that it addresses heterogeneity issues related to the software development context, it is automatable and non-intrusive, and it allows different capturing frequency and latency strategies, hence allowing both analysis and monitoring of software metrics. The paper also provides a reference framework that details three orthogonal dimensions for considering ETL issues in the software development process context, used to develop SPDW+ ETL. The advantages of SPDW+ are: (1) flexibility to meet the requirements of the frequent changes in SDP environments; (2) support for monitoring, which implies the execution of frequent and incremental loads; (3) automation of the complex and time-consuming task of capturing metrics, making it seamless; (4) freedom of choice regarding management models and support tools used in projects; and (5) cohesion and consistency of the information stored in the metrics repository which will be used to compare data of different projects. The paper presents the reference framework, illustrates the key role played by the metrics capturing process in a metrics program using a case study, and presents the striking features of SPDW+ and its ETL approach, as well as an evaluation based on a prototype implementation.
C1 [Silveira, Patricia Souza; Ruiz, Duncan D.] Pontificia Univ Catolica Rio Grande Sul PUCRS, Porto Alegre, RS, Brazil.
   [Becker, Karin] Qual Knowledge Ltda, Porto Alegre, RS, Brazil.
C3 Pontificia Universidade Catolica Do Rio Grande Do Sul
RP Ruiz, DD (corresponding author), Pontificia Univ Catolica Rio Grande Sul PUCRS, Porto Alegre, RS, Brazil.
EM patricia.eng@gmail.com; kbeckerbr@gmail.com; duncan.ruiz@pucrs.br
RI Becker, Karin/E-8963-2013; Ruiz, Duncan/J-7498-2012
OI Becker, Karin/0000-0003-4967-1027; Ruiz, Duncan/0000-0002-4071-3246
FU HP Brasil Ltda.; HP Brasil/PUCRS [TA 07 HP 001/03]
FX The authors wish to thank the reviewers for the valuable insights and
   comments provided in earlier versions of this paper, as well as Rodrigo
   Coelho de Barros. This work was supported by HP Brasil Ltda., under HP
   Brasil/PUCRS agreement TA 07 HP 001/03.
CR Alonso G., 2004, DAT SYS APP, DOI 10.1007/978-3-662-10876-5_5
   [Anonymous], CMMI DEV VERS 1 2
   [Anonymous], DATA WAREHOUSE TOOLK
   [Anonymous], 2004, GUID PROJ MAN BOD KN, V3rd
   Barros Rodrigo C., 2008, Proceedings of the 2008 32nd Annual IEEE Software Engineering Workshop. SEW 2008, P152, DOI 10.1109/SEW.2008.22
   Becker K, 2006, 30TH ANNUAL IEEE/NASA SOFTWARE ENGINEERING WORKSHOP, PROCEEDINGS, P107
   Berry M., 2000, Empirical Software Engineering, V5, P183, DOI 10.1023/A:1026534430984
   BOEHM B, 2005, J DEFENSE SOFTWARE E, V4, P20
   CASATI F, 2006, P INT C EXT DAT TECH, P1079
   Casati F., 2007, Proceedings of the 33rd international conference on Very large data bases, VLDB '07, P1128
   Castellanos M, 2005, PROC INT CONF DATA, P1084
   Castellanos M, 2006, INT J COMPUT SCI ENG, V2, P292, DOI 10.1504/IJCSE.2006.014772
   Chulani S, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P189, DOI 10.1109/METRIC.2003.1232467
   EMAN K, 1997, SPICE THEORY PRACTIC
   Fleming Q.W., 2000, EARNED VALUE PROJECT, V2nd
   FOLLECO A, 2007, P 19 INT C SOFTW ENG, P487
   Golfarelli M., 2004, DOLAP 04 P 7 ACM INT, P1, DOI [DOI 10.1145/1031763.1031765, 10.1145/1031763.1031765]
   Gopal A, 2005, IEEE T SOFTWARE ENG, V31, P679, DOI 10.1109/TSE.2005.95
   Grigori D, 2004, COMPUT IND, V53, P321, DOI 10.1016/j.compind.2003.10.007
   Han J., 2012, Data Mining, P393, DOI [DOI 10.1016/B978-0-12-381479-1.00009-5, 10.1016/B978-0-12-381479-1.00009-5]
   HASSAN G, 2001, P 23 INT C SOFTW ENG, P1059
   Herbsleb JD, 2001, IEEE SOFTWARE, V18, P16, DOI 10.1109/52.914732
   Kan S. H., 2003, METRICS MODELS SOFTW
   KANER C, 2004, P 10 INT SOFTW METR
   Khoshgoftaar TM, 2006, PROC INT C TOOLS ART, P713
   Khoshgoftaar TM, 2001, SOFTWARE QUAL J, V9, P161, DOI 10.1023/A:1013349419545
   Krogdahl P, 2005, P IEEE I C SERV COMP, P93
   Marjanovic O., 2007, SYSTEM SCI, P215
   Nagappan N., 2006, P 28 INT C SOFTW ENG, P452, DOI DOI 10.1145/1134285.1134349
   NAVATHE S, 1993, TEMPORAL DATABASES T, P109
   NAYAK R, 2001, INT J SOFTW ENG KNOW, V15, P647
   Palza E., 2003, Software Engineering Workshop, P12
   Pressman R.S., 2004, SOFTWARE ENG, V6th
   Ruiz DDA, 2005, Sixteenth International Workshop on Database and Expert Systems Applications, Proceedings, P936, DOI 10.1109/DEXA.2005.9
   Sheetz SD, 2009, J SYST SOFTWARE, V82, P1540, DOI 10.1016/j.jss.2009.04.038
   SILVEIRA P, 2007, THESIS PUCRS BRAZIL
   SUBRAMANYAM V, 1999, P 2 SOFTW ENG PROC G, P1
   Valetto G., 2007, P IEEE 4 INT WORKSH, P25
   van der Aalst WMP, 2007, INFORM SYST, V32, P713, DOI 10.1016/j.is.2006.05.003
   [No title captured]
NR 40
TC 2
Z9 5
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2010
VL 18
IS 2
BP 227
EP 268
DI 10.1007/s11219-009-9092-9
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 584IX
UT WOS:000276746300003
DA 2024-07-18
ER

PT J
AU Issa, AA
   Abu Rub, FA
   Thabata, FF
AF Issa, Ayman A.
   Abu Rub, Faisal A.
   Thabata, Fadi F.
TI Using test case patterns to estimate software development and quality
   management cost
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test case patterns catalogue; Reusability
AB A novel process to discover test case patterns is proposed. This has led to the construction of a test case patterns catalogue. The catalogue has been analysed to estimate the potential reusability in different software applications. This has shown that 43% of system functions are generally application domain independent, whereas 57% are application domain dependent. Statistical tests showed that the level of specialisation in software systems could be as low as 20%, which supports the direction taken in this research to reuse test case patterns in software engineering activities, in particular, software cost estimation at the early sages of software development.
C1 [Issa, Ayman A.] Philadelphia Univ, Fac Informat Technol, Software Engn Dept, Amman 19392, Jordan.
   [Abu Rub, Faisal A.] Univ Petra, Fac Business & Financial Sci, Dept Management Informat Syst, Amman, Jordan.
   [Thabata, Fadi F.] Philadelphia Univ, Fac Informat Technol, Dept Management Informat Syst, Amman 19392, Jordan.
C3 Philadelphia University Jordan; Petra University; Philadelphia
   University Jordan
RP Issa, AA (corresponding author), Philadelphia Univ, Fac Informat Technol, Software Engn Dept, POB 1, Amman 19392, Jordan.
EM aissa@philadelphia.edu.jo; faburub@uop.edu.jo;
   ffayez@philadelphia.edu.jo
CR ACOSTA AE, 2004, J OBJECT TECHNOLOGY, V3, P75
   Alexander C., 1977, PATTERN LANGUAGE TOW
   *AM PROD QUAL CTR, 2004, PROC CLASS FRAM
   Anda B, 2002, LECT NOTES COMPUT SC, V2559, P383
   [Anonymous], 1998, REQUIREMENTS ENG PRO
   [Anonymous], 1999, Testing Object-Oriented Systems: Models, Patterns, and Tools
   BIDDLE R, 2001, P KOALAPLOB NEWZ VIC, P1
   Boehm B, 2000, ANN SOFTW ENG, V10, P177, DOI 10.1023/A:1018991717352
   Boehm BW., 2000, SOFTWARE COST ESTIMA, VII
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Coad P., 1992, Communications of the ACM, V35, P152, DOI 10.1145/130994.131006
   COAD P, 1997, OBJECT MODELS STRATE
   *CRM CONT CTR, 2003, CRM GLOSS RES DOC
   Díaz I, 2004, INFORM MANAGE-AMSTER, V41, P961, DOI 10.1016/j.im.2003.10.003
   Fowler M., 1997, ANAL PATTERNS REUSAB
   Fowler M., 2003, Patterns of Enterprise Application Architecture. A Martin Fowler signature book
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gerber S.B., 1997, SPSS GUIDE NEW STAT
   HOHMANN L, 1998, GETTING STARTED PATT
   *INT INC, 2003, INT BUS SOL PROD
   *ISBSG, 2003, PROJ DAT REP REL
   ISSA A, 2007, PHILASERG0004
   KAner C., 2001, LESSONS LEARNED SOFT
   KRUCHTEN P, 2002, RATIONAL UNIFIED PRO
   Lam W, 1997, RE '97 - PROCEEDINGS OF THE THIRD IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, P6, DOI [10.1109/ISRE.1997.566834, 10.1007/BF02813029]
   LANGE M, P EUROPLOP, pU
   Larman C., 2002, APPL UML PATTERNS, V2nd
   Larsen G, 1999, COMMUN ACM, V42, P38, DOI 10.1145/317665.317674
   Li LW, 2002, INT J SOFTW ENG KNOW, V12, P19, DOI 10.1142/S0218194002000810
   Malone, 2003, ORG BUSINESS KNOWLED
   *NETSUITE INC, 2004, NETCRM
   *ORACLE, 2004, ORACLE SERV
   Patton R., 2005, SOFTWARE TESTING, VSecond
   Reifer D., 2004, Journal of Software Technology, V7, P3
   ROBERTS S, 1999, REQUIREMENTS PATTERN
   Schmidt D.C., 1996, COMMUN ACM, V39, P37, DOI DOI 10.1145/236156.236164
   SCHMIDT DC, 1995, COMMUN ACM, V38, P65, DOI 10.1145/226239.226255
   Seruca I, 2003, J SYST SOFTWARE, V67, P1, DOI 10.1016/s0164-1212(02)00083-3
   *SFER INT BAS SYS, 2001, SOURC DOC SFER TOOLS
   Soundarajan N, 2008, INNOV SYST SOFTW ENG, V4, P71, DOI 10.1007/s11334-007-0042-z
   TOME A, 2006, TEST CASE DESIGN USI
   2004, INTEGRATE SOFTWARE
NR 42
TC 2
Z9 2
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2009
VL 17
IS 3
BP 263
EP 281
DI 10.1007/s11219-009-9076-9
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 460XE
UT WOS:000267224200004
DA 2024-07-18
ER

PT J
AU Jeary, S
   Phalp, K
   Vincent, J
AF Jeary, Sheridan
   Phalp, Keith
   Vincent, Jonathan
TI An evaluation of the utility of web development methods
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Web development; Web development methods; Web development projects
AB Although many web development methods exist, they are rarely used by practitioners. The work reported here, seeks to explain why this might be so, and suggests that, for many, the perceived benefits may be outweighed by the difficulty or effort required to learn the method. In attempting to gauge the utility of methods the authors undertook a 2-year study of 23 small web development projects, attempting to use a range of published (academic) methods. Of the 23 projects we found only one case where the developer continued to use an academic web development method throughout the lifecycle. The ability to understand a method and/or its techniques was repeatedly cited as the reason for its abandonment. Our findings also indicate a number of key areas, relating to terminology, completeness, and guidance, where existing methods may be failing their intended users. In attempting to further our understanding of web development methods we completed a comprehensive survey of web development methods; covering 52 web development methods, encompassing a range of different research communities, and drawing upon 63 different sources. Our findings here shed some light upon the confusion of methods for the would-be user. In summary, the findings are that, although there is much of value in a variety of methods, method choice is somewhat bewildering for the newcomer to the field, and many methods are incomplete in some dimension. By providing this work we hope to go some way towards supporting the software engineering community, in both academia and industry, in their understanding of the quality issues that exist with the take up and use of web development methods.
C1 [Jeary, Sheridan; Phalp, Keith; Vincent, Jonathan] Bournemouth Univ, Software Syst Res Ctr, Poole BH12 5BB, Dorset, England.
C3 Bournemouth University
RP Jeary, S (corresponding author), Bournemouth Univ, Software Syst Res Ctr, Poole BH12 5BB, Dorset, England.
EM sjeary@bournemouth.ac.uk; kphalp@bournemouth.ac.uk;
   jvincent@bournemouth.ac.uk
RI Vincent, Jonathan/HHY-9994-2022
CR ALAA G, 2004, 37 HAW INT C SYST SC
   [Anonymous], 2 INT WORKSH WEB OR
   [Anonymous], 2000, RATIONAL UNIFIED PRO
   [Anonymous], 2006, INFORM SYSTEMS DEV M
   ATZENI P, 1997, INT C VER LARG DAT
   ATZENI P, 1998, C EXT DAT TECHN
   Barry C, 2003, INFORM SOFTWARE TECH, V45, P217, DOI 10.1016/S0950-5849(02)00207-0
   Barry C., 2001, IEEE Multimedia, V8, P52, DOI 10.1109/93.917971
   Belbin M., 1981, MANAGEMENT TEAMS
   BICHLER M, 1996, WEBNET 96
   BICHLER M, 1996, P 4 EUR C INF SYST L
   Bigge M.L., 1982, LEARNING THEORIES TE, V4th
   BOCHICCHIO M, 2004, 2004 ACM S APPL COMP
   BOCHICCHIO MA, 1999, IEEE C MULT COMP SYS
   Bolchini D, 2004, REQUIR ENG, V9, P85, DOI 10.1007/s00766-004-0188-2
   CARTENSEN PH, 2001, 9 INT C INF SYST BLE, P27
   Ceri S., 2003, Designing Data-Intensive Web Applications
   CHRISTODOULOU SP, 2000, WEB ENG 2000
   CODA F, 1998, 9 INT WORKSH SOFTW S
   Conallen J, 1999, COMMUN ACM, V42, P63, DOI 10.1145/317665.317677
   Conallen J., 1999, BUILDING WEB APPL UM
   CONALLEN J, 1998, MODELLING WEB APPL D
   COX K, 2000, P 12 ANN M PSYCH PRO
   DETROYER O, 1998, 7 INT WORLD WID WEB
   DETROYER OMF, 2001, INFORM MODELLING NEW
   DIAZ P, 2001, DEXA 2001
   Fernández M, 2000, VLDB J, V9, P38, DOI 10.1007/s007780050082
   FERNANDEZ M, 1997, ACM SIGMOD C MAN DAT
   Fitzgerald B., 2002, Information systems development : methods in action
   Fraternali P, 1999, ACM COMPUT SURV, V31, P227, DOI 10.1145/331499.331502
   Fraternali P, 2000, ACM T INFORM SYST, V18, P323, DOI 10.1145/358108.358110
   FRATERNALI P, 1998, 6 INT C EXT DAT TECH
   FUCCELLA J, 1997, P 15 INT C COMP DOC
   GAEDKE M, 2000, WEBENGINEERING 2000
   Gagne R., 1977, The conditions of learning
   GARZOTTO F, 1993, ACM T INFORM SYST, V11, P1, DOI 10.1145/151480.151483
   Gellersen HW, 1997, COMPUT NETWORKS ISDN, V29, P1429, DOI 10.1016/S0169-7552(97)00038-X
   Gellersen HW, 1999, IEEE INTERNET COMPUT, V3, P60, DOI 10.1109/4236.747323
   GHOSH G, 1999, HUMAN COMPUTER INTER
   GIFFORD SS, 2003, 7 WORLD INF SYST CYB
   Glass R. L., 2001, Cutter IT Journal, V14, P6
   Glass RL, 2004, COMMUN ACM, V47, P19, DOI 10.1145/986213.986228
   GNAHO C, 2000, WEBENGINEERING 2000
   Goeschka K. M., 2001, IEEE Multimedia, V8, P32, DOI 10.1109/93.923951
   Gomez J., 2001, IEEE Multimedia, V8, P26, DOI 10.1109/93.917969
   GRIFFITHS G, 2002, SEKE 2002
   GU A, 2002, AUSTR WORLD WID WEB
   GUELL N, 2000, LECT NOTES COMPUTER
   HARLEN W, 1998, SPOTLIGHTS, P1
   Hatzopoulos M, 1993, EUR J INFORM SYST, V2, P91, DOI 10.1057/ejis.1993.18
   HOLCK J, 2001, WHAT MAKES WEB DEV D
   HOUBEN GJ, 2003, INT C WEB ENG OV SPA
   ISAKOWITZ T, 1995, COMMUN ACM, V38, P34, DOI 10.1145/208344.208346
   JANSSEN W, 2000, WEBENGINEERING 2000
   JEARY S, 2005, W0105 SSM BOURN U
   JEARY S, 2004, 1 INT WORKSH ADV APP
   KALPSING R, 2000, 1 INT C EL COMM WEB
   KAPPEL GERTI., 2006, WEB ENG
   KOCH N, 2000, FAKULTAT MATH INFORM, P371
   KOCH N, 1999, 9905 U MUNCH
   KUHNKE C, 2000, 33 HAW INT C SYST SC
   Kushwaha D.S., 2006, ACM SPECIAL INTEREST, V31, P1, DOI DOI 10.1145/1163514.1163533
   Lang M, 2005, IEEE SOFTWARE, V22, P68, DOI 10.1109/MS.2005.40
   LANGE D, 1994, 27 ANN HAW INT C SYS
   Lee C, 2004, INFORM SOFTWARE TECH, V46, P17, DOI 10.1016/S0950-5849(03)00094-6
   LEE H, 1998, 31 ANN HAW INT C SYS
   Lee Michelle M., 1999, Sleep Breath, V3, P13, DOI 10.1007/s11325-999-0013-8
   Lowe D., 2003, Requirements Engineering, V8, P102, DOI 10.1007/s00766-002-0153-x
   LOWE D, 1996, 3 LIT C MULT MOD TOU
   LOWE D, 2001, 6 AUSTR WORKSH REQ E
   Lu MT, 1998, INTERNET RES, V8, P166, DOI 10.1108/10662249810211638
   MCCRACKEN DD, 2004, USER CTRD WEBSITE DE
   McDonald A., 2001, TR200198 U GLASG DEP
   MCDONALD A, 2001, P 4 WWW10 WORKSH WEB
   Mecca G., 1998, SIGMOD Record, V27, P544, DOI 10.1145/276305.276375
   MERIALDO P, 2003, ACM T INTERNET TECHN, V3, P49
   Militello LG, 1998, ERGONOMICS, V41, P1618, DOI 10.1080/001401398186108
   MONTERO S, 2002, CAISE 2002
   Murugesan S., 2005, WEB ENG
   NANARD J, 1995, COMMUN ACM, V38, P49, DOI 10.1145/208344.208347
   NORTON KS, 2000, APPL CROSS FUNCTIONA
   OLSINA L, 1997, HYPERTEXT HYPERMEDIA
   OLSINA L, 2000, WEBENGINEERING 2000
   Overmyer S. P., 2000, Requirements Engineering, V5, P62, DOI 10.1007/PL00010343
   PASTOR O, 1998, 17 INT C CONC MOD SI
   PASTOR O, 2003, 3 LIT WORKSH WEB OR
   PELECHANO V, 2003, CAISE 2003
   POWELL TA, 1999, WEB SITE ENG WEB PAG
   Pressman RS, 1998, IEEE SOFTWARE, V15, P104, DOI 10.1109/MS.1998.714869
   Scharl A., 2000, APPL COMP
   Schwabe D, 1998, THEOR PRACT OBJ SYST, V4, P207, DOI 10.1002/(SICI)1096-9942(1998)4:4<207::AID-TAPO2>3.0.CO;2-2
   SCHWABE D, 1995, COMMUN ACM, V38, P45, DOI 10.1145/208344.208354
   SIAU K, 2003, ADV DATABASE RES, V2, P294
   SOLTYS R, JAD BUSINESS PLANS D
   TAKAHASHI K, 1997, 6 INT WORLD WID WEB
   Taylor MJ, 2002, INFORM SOFTWARE TECH, V44, P381, DOI 10.1016/S0950-5849(02)00024-1
   TONGRUNGROJANA R, 2003, 15 INT C SOFTW ENG K
   Uden L, 2002, IEEE MULTIMEDIA, V9, P47, DOI 10.1109/MMUL.2002.1041948
   VIGDEN R, 2002, INFORM SYST J, V12, P247
   Vora P. R., 1998, Interactions, V5, P13, DOI 10.1145/275269.275272
   Weed DL, 1997, J NATL CANCER I, V89, P6, DOI 10.1093/jnci/89.1.6
   YOO J, 2000, HYPERMEDIA HYPERTEXT
   ZOLLER P, 2001, INFORM MODELLING NEW
NR 103
TC 1
Z9 2
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2009
VL 17
IS 2
BP 125
EP 150
DI 10.1007/s11219-008-9066-3
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 428YB
UT WOS:000264886900003
DA 2024-07-18
ER

PT J
AU Memon, AM
AF Memon, Atif M.
TI Employing user profiles to test a new version of a GUI component in its
   context of use
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE GUI testing; user profiles; software components; test oracles; user
   session data; automated testing
ID SOFTWARE
AB Advancement in reusable component technology has had a significant impact on the development of complex graphical user interfaces (GUIs), which are front-ends to most of today's software. Software developers can, with very little effort, integrate components into their software's GUI. Problems, however, arise when new versions of GUI components replace their predecessors in an implementation. Often, the inclusion of a new version of a component breaks some part of the software, i.e., tasks that end-users were able to perform before modifications were made can no longer be performed. Software developers (who also happen to be component users) are unable to perform adequate regression testing in this context because of several factors, including lack of source code, environmental side-effects on GUI rendering, event-driven nature of GUIs, and large number of possible permutations of events. This paper presents a new technique that end-users' quality assurance (QA) teams can employ to test the new version of a component in its application context by using the existing version as a baseline. The technique combines lightweight event-level dynamic profiling to collect user profiles in a transparent manner, GUI reverse engineering to extract the structure of the component's GUI, test case execution to replay the collected profiles on the new version, and GUI oracles that collect properties from the existing version. Empirical studies demonstrate the practicality, usefulness, and limitations of the technique.
C1 Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Memon, AM (corresponding author), Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
EM atif@cs.umd.edu
CR [Anonymous], THESIS U PITTSBURGH
   Bertolino A, 2003, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2003.1201202
   BEYDEDA S, 2001, INTEGRATED TESTING T
   Dawson S, 1996, DIG PAP INT SYMP FAU, P404, DOI 10.1109/FTCS.1996.534626
   DILLON LK, 1996, ACM SIGSOFT SOFTWARE, V21, P106, DOI DOI 10.1145/250707.239116
   DILLON LK, 1994, P 2 ACM SIGSOFT S FD, P140
   Finsterwalder M., 2001, Proc. of the 2nd Int. Conf. on Extreme Prog, P114
   Hamlet D, 2001, PROC INT CONF SOFTW, P361, DOI 10.1109/ICSE.2001.919109
   Haraty R.A., 2001, Proceedings of the 2001 ACM Symposium on Applied Computing, P285
   Harrold MaryJean., 2000, ICSE 00 P C FUTURE S, P61
   HICINBOTHOM JH, 1993, SPECIAL SESSIONS DEM, V2, P1042
   Huang Yao-Wen, 2003, Proceedings of the 12th International Conference on World Wide Web, P148
   Jeon T, 2002, ACM SIGPLAN NOTICES, V37, P25, DOI 10.1145/596992.597001
   *JUNIT, TEST RES EXTR PROGR
   Korel B, 1999, PROG COMPREHEN, P92, DOI 10.1109/WPC.1999.777748
   Kranitis N, 2002, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, 2002 PROCEEDINGS, P592, DOI 10.1109/DATE.2002.998361
   Krstic A, 2002, DES AUT CON, P355, DOI 10.1109/DAC.2002.1012649
   Kung DC, 1996, J SYST SOFTWARE, V32, P21, DOI 10.1016/0164-1212(95)00047-X
   Lee WS, 2001, J MATER SCI-MATER EL, V12, P63, DOI 10.1023/A:1011276830620
   LU G, 1991, P 4 INT C HUM COMP I, V1, P602
   Marick B, 2002, SOFTWARE TESTING QUA, P41
   Memon A, 2005, J SOFTW MAINT EVOL-R, V17, P27, DOI 10.1002/smr.305
   Memon A, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P186, DOI 10.1109/ASE.2004.1342736
   Memon A. M., 2000, Proceedings of the Fifth International Conference on Artificial Intelligence Planning and Scheduling, P226
   Memon A. M., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P257, DOI 10.1109/ICSE.1999.841016
   Memon AM, 2005, IEEE T SOFTWARE ENG, V31, P884, DOI 10.1109/TSE.2005.117
   Memon AM, 2001, IEEE T SOFTWARE ENG, V27, P144, DOI 10.1109/32.908959
   MEMON AM, 2002, IEEE COMPUT, V35, P90
   MEMON AM, 2000, P ACM SIGSOFT 8 INT, P30
   MEMON AM, 2001, P 8 EUR SOFTW ENG C, P256
   MEMON AM, 2003, P 9 EUR SOFTW ENG C, P118, DOI DOI 10.1145/940071.940088
   Memon Atif M., 2003, P 10 WORK C REV ENG
   MORRIS J, 2002, P 25 AUSTR C COMP SC, P167
   Myers B. A., 1993, CS93183 CARN MELL U
   Nagarajan A., 2003, P 1 INT WORKSH REFAC
   Onoma AK, 1998, COMMUN ACM, V41, P81, DOI 10.1145/274946.274960
   Orso A., 2001, Engineering Distributed Objects. Second International Workshop, EDO 2000. Revised Papers. (Lecture Notes in Computer Science Vol.1999), P129
   ORSO A, 2001, P IEEE INT C SOFTW M
   Richardson D. J., 1992, P 14 INT C SOFTW ENG, P105
   Sparling M, 2000, COMMUN ACM, V43, P47, DOI 10.1145/352183.352202
   ULRICH A, 1999, SIGSOFT SOFTWARE ENG, V24, P43
   Vitharana P, 2003, COMMUN ACM, V46, P67, DOI 10.1145/859670.859671
   Voas J, 1997, IEEE SOFTWARE, V14, P73, DOI 10.1109/52.595959
   Voas J, 1998, 1998 IEEE WORKSHOP ON APPLICATION-SPECIFIC SOFTWARE ENGINEERING AND TECHNOLOGY (ASSET 98) - PROCEEDINGS, P140, DOI 10.1109/ASSET.1998.688248
   White LJ, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P350, DOI 10.1109/ICSM.1996.565038
   WITTENBERG CH, 2000, P INT S SOFTW TEST A, P178
   XIE Q, 2005, P INT C SOFTW MAINT
   XIE Q, IN PRESS ACM T SOFTW
   Zhao W, 1998, DESIGN, AUTOMATION AND TEST IN EUROPE, PROCEEDINGS, P166, DOI 10.1109/DATE.1998.655852
   2003, CAPTURE REPLAY TOOL
   2003, ABBOT JAVA GUI TEST
   2003, MERCURY INTERACTIVE
NR 52
TC 3
Z9 5
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2006
VL 14
IS 4
BP 359
EP 377
DI 10.1007/s11219-006-0040-7
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 093JA
UT WOS:000241163400006
DA 2024-07-18
ER

PT J
AU Dromey, RG
AF Dromey, RG
TI Software quality - Prevention versus cure?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software defects; acceptance testing; product quality models; defect
   prevention; quality-carrying properties; component-based quality;
   software inspection
AB In traditional engineering disciplines a preventative approach is used to tackle defects and thereby produce quality products and systems. A recent case study suggests that in software engineering a curative approach to finding defects and producing quality software may be the most practical way to proceed. Here, the argument for a curative approach to software quality is challenged, and suggestions are made on how appropriate component-based quality models, that contain both generic and domain-specific quality knowledge, may be used to support a preventative approach to producing quality software products and systems.
C1 Griffith Univ, Software Qual Inst, Brisbane, Qld 4111, Australia.
C3 Griffith University
RP Dromey, RG (corresponding author), Griffith Univ, Software Qual Inst, Brisbane, Qld 4111, Australia.
CR Boehm B, 1996, IEEE SOFTWARE, V13, P25, DOI 10.1109/52.506460
   CRAWFORD A, 2003, THESIS GRIFFITH U
   Dromey R., 1998, Software Product Quality: Theory, Model, and Practice
   Dromey RG, 1996, IEEE SOFTWARE, V13, P33, DOI 10.1109/52.476284
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOROWITZ E, 1998, WINWIN REFERENCE MAN
   Lauesen S, 1998, IEEE SOFTWARE, V15, P69, DOI 10.1109/52.687949
   Leveson NancyG., 1995, Software System Safety and Computers
   MCDERMID J, 1999, COMMUNICATION
   PFLEEGER SL, 1994, COMPUTER         SEP, P71
NR 11
TC 23
Z9 23
U1 0
U2 6
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUL
PY 2003
VL 11
IS 3
BP 197
EP 210
DI 10.1023/A:1025162610079
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711KA
UT WOS:000184737100002
DA 2024-07-18
ER

PT J
AU Ortega, M
   Pérez, M
   Rojas, T
AF Ortega, M
   Pérez, M
   Rojas, T
TI Construction of a systemic quality model for evaluating a software
   product
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE software product quality; quality model; systemic quality; metrics; ISO
   9126; Dromey's model
AB Quality is currently considered one of the main assets with which a firm can enhance its competitive global position. This is one reason why quality has become essential for ensuring that a company's products and processes meet customers' needs. A recent innovation in the systems area is the development of a set of mechanisms and models for evaluating quality. This article describes the design of a Quality Model with a systemic approach to software products that assesses a product's efficiency and effectiveness. Different quality models were studied: McCall, Boehm, FURPS, ISO 9126, Dromey, ISO 15504 in an attempt to identify the aspects present in these models that are deemed important in a Systemic Quality model. We designed a model prototype that reflects the essential attributes of quality. This model was evaluated using a method so it can be validated and also enhanced. The evaluation method consisted of: designing a survey, formulating, validating and applying the measurement instruments; defining an algorithm to obtain the quality estimate and analyzing the results. The model prototype enabled the strengths and weaknesses of the software products studied to be identified. When evaluating a software product using the model prototype, it was possible to ascertain its compliance with the standards and use the results to improve it. Since the evaluation was systemic, processes that affect certain characteristics of the product could be identified. Companies can benefit from the model proposed because it serves as a benchmark that allows their products to evolve and be competitive.
C1 Univ Ezequiel Zamora, Lab Computact, Guanare 3310, Edo Portuguesa, Venezuela.
   Univ Simon Bolivar, LISI, Dept Proc & Sistemas, Caracas 89000, Venezuela.
C3 Simon Bolivar University
RP Ortega, M (corresponding author), Univ Ezequiel Zamora, Lab Computact, Guanare 3310, Edo Portuguesa, Venezuela.
CR ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1979, RELIABILITY VALIDITY
   BERTOA M, 2002, P IDEAS 02 LA HAB CU, P352
   Boehm B.W., 1978, Characteristics of Software Quality
   CALLAOS N, 1996, P INT C INF SYST AN, P15
   *CSU WRIT CTR, 2003, OV REL VAL
   DROMEY G, 1996, IEEE SOFTWARE    JAN, P33
   *GOOGL, 2003, GOOGL WEB DIR
   Grady R.B., 1987, SOFTWARE METRICS EST, V1
   Hernandez R.y., 1998, Metodologia de la investigacion
   Humphrey W.S., 1989, MANAGING SOFTWARE PR
   *ISO IEC, 1998, 155042 ISOIEC 2
   *ISO IEC, 1998, 912612 ISOIEC 1
   *ISO IEC, 1991, 9126 ISO IEC IS
   Mc Call J. A., 1977, FACTORS SOFTWARE QUA, VI
   MENDOZA LE, 2003, IDEAS 2003 AS PAR
   PEREZ MA, 2001, 7 AM C INF SYST AMCI, P1297
   Pfleeger S.L., 1998, Software Engineering: Theory and Practice
   PREISS O, 2002, 6 WORLD MULT SYST CY
   Pressman RS, 2010, Ingenieria del Software un enfoque practico. Septima
   ROJAS T, 2000, REV FACULTAD INGENIE, V15, P117
   ROJAS T, 1995, INT S APPL CORP COMP
   Seijas F., 1999, INVESTIGACION MUESTR
   VOAS J, 1999, IEEE SOFTWARE    JUL, P22
NR 25
TC 75
Z9 85
U1 1
U2 17
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUL
PY 2003
VL 11
IS 3
BP 219
EP 242
DI 10.1023/A:1025166710988
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 711KA
UT WOS:000184737100004
DA 2024-07-18
ER

PT J
AU Ghoneim, SA
   Fahmy, HMA
AF Ghoneim, SA
   Fahmy, HMA
TI Evaluation of the DRM and the time for preventive maintenance for aging
   software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE operational software systems; performance degradation; preventive
   maintenance; queueing model; software aging; system restoration
AB An attempt to capture software aging and specify when to do preventive maintenance ( PM) is presented in this paper. A composite measure termed the DRM, Deteriorating Response Measure, is defined. It is based on the analysis of the deteriorating speed of the software against time and load. This speed is characterized as follows: (1) It decays with increased load. (2) It does not increase again when the load decreases, this indicates "loss of elasticity." The DRM is mathematically formulated based on a queueing system model.
   Specifying when to do preventive maintenance depends on the decision maker's perspective of the manifestation of aging. It is tried here to formalize this dependence. Three degrading performance metrics are defined for a DRM: (1) Decaying restored speed value. (2) Increasing speed offset ratio (recoverability index). ( 3) Increasing operation interval offset. These metrics can be used singly or aggregately in a DRM to specify when to do preventive maintenance. Results of model testing are also shown.
   This work can be part of an on-line procedure that calculates performance indexes for a server type software system like a web browser, an operating system, a database, and helps in the decision to do preventive maintenance for aging software.
C1 Ain Shams Univ, Fac Engn, Dept Syst & Comp Engn, Abbasiah Cairo, Egypt.
C3 Egyptian Knowledge Bank (EKB); Ain Shams University
RP Ghoneim, SA (corresponding author), Ain Shams Univ, Fac Engn, Dept Syst & Comp Engn, Abdou Pacha Sq, Abbasiah Cairo, Egypt.
EM salma_ghoneim@hotmail.com; hossam.fahmy@ieee.org
RI Fahmy, Heba M/B-4462-2014
OI Fahmy, Heba M/0000-0001-8689-1198
CR [Anonymous], P 6 INT S SOFTW REL
   AVIZIENIS A, 1985, IEEE T SOFTWARE ENG, V11, P1491, DOI 10.1109/TSE.1985.231893
   BERNSTEIN L, 1996, TEXT SEM DEL U LEARN
   EDAMS E, 1984, IBM J RES DEV, V28, P2
   Garg S, 1998, NINTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P283, DOI 10.1109/ISSRE.1998.730892
   Garg S, 1998, IEEE T COMPUT, V47, P96, DOI 10.1109/12.656092
   GARG S, 1995, P 1 FAULT TOL S MADR
   GRIES D, 1978, PROGRAMMING METHODOL, P42
   GROSS D, 1974, FUNDAMENTALS QUEUEIN
   HUANG YN, 1995, DIG PAP INT SYMP FAU, P381, DOI 10.1109/FTCS.1995.466961
   HWANG Y, 1995, P 2 ISSAT INT C REL
   HWANG Y, 1994, LECT NOTES COMPUTER, V774, P159
   Lehman M. M., 1978, P INF STAT ART C WHY
   LEHMAN MM, 1974, IMPERIAL COLL SCI TE, V9, P211
   LEHMAN MM, 2000, ICSE 2000 2 WORKSH E
   MARSHALL E, 1992, SCIENCE, V255, P1347, DOI 10.1126/science.255.5050.1347
   PARNAS DL, 1994, PROC INT CONF SOFTW, P279, DOI 10.1109/ICSE.1994.296790
   Pfening A, 1996, PERFORM EVALUATION, V27-8, P491, DOI 10.1016/S0166-5316(96)90042-5
   TAI A, 1997, P 3 INT WORKSH OBJ O
   Vaidyanathan K., 1999, Proceedings 10th International Symposium on Software Reliability Engineering (Cat. No.PR00443), P84, DOI 10.1109/ISSRE.1999.809313
   VARDEMAN SB, 1994, STAT ENG PROBL SOLVI
   [No title captured]
NR 22
TC 1
Z9 1
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAY
PY 2003
VL 11
IS 1
BP 57
EP 75
DI 10.1023/A:1023636112886
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 674WP
UT WOS:000182660400006
DA 2024-07-18
ER

PT J
AU Serrano, MA
   Sánchez, LE
   Santos-Olmo, A
   García-Rosado, D
   Blanco, C
   Barletta, VS
   Caivano, D
   Fernández-Medina, E
AF Serrano, Manuel A.
   Sanchez, Luis E.
   Santos-Olmo, Antonio
   Garcia-Rosado, David
   Blanco, Carlos
   Barletta, Vita Santa
   Caivano, Danilo
   Fernandez-Medina, Eduardo
TI Minimizing incident response time in real-world scenarios using quantum
   computing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Security; Risk management; Quantum programming; Incident response
ID INFORMATION SECURITY MANAGEMENT; FRAMEWORK
AB The Information Security Management Systems (ISMS) are global and risk-driven processes that allow companies to develop their cybersecurity strategy by defining security policies, valuable assets, controls, and technologies for protecting their systems and information from threats and vulnerabilities. Despite the implementation of such management infrastructures, incidents or security breaches happen. Each incident has associated a level of severity and a set of mitigation controls, so in order to restore the ISMS, the appropriate set of controls to mitigate their damage must be selected. The time in which the ISMS is restored is a critical aspect. In this sense, classic solutions are efficient in resolving scenarios with a moderate number of incidents in a reasonable time, but the response time increases exponentially as the number of incidents increases. This makes classical solutions unsuitable for real scenarios in which a large number of incidents are handled and even less appropriate for scenarios in which security management is offered as a service to several companies. This paper proposes a solution to the incident response problem that acts in a minimal amount of time for real scenarios in which a large number of incidents are handled. It applies quantum computing, as a novel approach that is being successfully applied to real problems, which allows us to obtain solutions in a constant time regardless of the number of incidents handled. To validate the applicability and efficiency of our proposal, it has been applied to real cases using our framework (MARISMA).
C1 [Serrano, Manuel A.] Univ Castilla La Mancha, Alarcos Res Grp, Ciudad Real, Spain.
   [Sanchez, Luis E.; Santos-Olmo, Antonio; Garcia-Rosado, David; Fernandez-Medina, Eduardo] Univ Castilla La Mancha, GSyA Res Grp, Ciudad Real, Spain.
   [Blanco, Carlos] Univ Cantabria, ISTR Res Grp, Santander, Spain.
   [Barletta, Vita Santa; Caivano, Danilo] Univ Bari, Bari, Italy.
C3 Universidad de Castilla-La Mancha; Universidad de Castilla-La Mancha;
   Universidad de Cantabria; Universita degli Studi di Bari Aldo Moro
RP Serrano, MA (corresponding author), Univ Castilla La Mancha, Alarcos Res Grp, Ciudad Real, Spain.
EM Manuel.Serrano@uclm.es; LuisE.Sanchez@uclm.es;
   Antonio.SantosOlmo@uclm.es; David.GRosado@uclm.es;
   Carlos.Blanco@unican.es; vita.barletta@uniba.it;
   danilo.caivano@uniba.it; Eduardo.FdezMedina@uclm.es
RI Parra, Antonio Santos-Olmo/B-6351-2015; Serrano, Manuel/N-8266-2013;
   Barletta, Vita Santa/ABB-6603-2021; Crespo, Luis Enrique
   Sánchez/AAZ-8214-2021; Blanco, Carlos/H-6911-2012
OI Serrano, Manuel/0000-0003-0962-5659; Barletta, Vita
   Santa/0000-0002-0163-6786; Crespo, Luis Enrique
   Sánchez/0000-0003-0086-1065; Blanco, Carlos/0000-0001-9001-0904
CR Abhari Ali, 2012, Scaffold: quantum programming language
   Ahmad A, 2021, COMPUT SECUR, V101, DOI 10.1016/j.cose.2020.102122
   Ahmad A, 2020, J ASSOC INF SCI TECH, V71, P939, DOI 10.1002/asi.24311
   Ahmad A, 2019, COMPUT SECUR, V86, P402, DOI 10.1016/j.cose.2019.07.001
   Ahmad A, 2015, INT J INFORM MANAGE, V35, P717, DOI 10.1016/j.ijinfomgt.2015.08.001
   Ahmad A, 2012, COMPUT SECUR, V31, P643, DOI 10.1016/j.cose.2012.04.001
   Ahmed BS, 2018, INT C CONTROL DECISI, P803, DOI 10.1109/CoDIT.2018.8394907
   Akinwumi D.A., 2017, Nigerian Journal of Technology, V36, P1271, DOI DOI 10.4314/NJT.V36I4.38
   Alhawari S, 2012, INT J INFORM MANAGE, V32, P50, DOI 10.1016/j.ijinfomgt.2011.07.002
   Alshawabkeh M., 2019, P 2019 5 INT C HUM S, DOI [10.2991/ichssr-19.2019.24, DOI 10.2991/ICHSSR-19.2019.24]
   Altenkirch T, 2005, IEEE S LOG, P249
   AndreSaraiva D., 2022, SHOULD QUANTUM COMPU
   [Anonymous], 1996, LAUR962724
   Aoyama T, 2020, LECT NOTES COMPUT SC, V11777, P163, DOI 10.1007/978-3-030-37670-3_13
   Asfaw A., 2020, Learn Quantum Computation Using Qiskit
   Bhardwaj A, 2021, EAI SPRINGER INNOVAT, P1, DOI 10.1007/978-3-030-69174-5
   Bongiovanni I, 2019, COMPUT SECUR, V86, P350, DOI 10.1016/j.cose.2019.07.003
   CERNY V, 1993, PHYS REV A, V48, P116, DOI 10.1103/PhysRevA.48.116
   Clairambault P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290345
   Cutress I., 2021, INTEL CORE I7 10700
   Das A, 2008, REV MOD PHYS, V80, P1061, DOI 10.1103/RevModPhys.80.1061
   Dashti S., 2017, Information Security Risk Management, V305, P18, DOI [10.1007/978-3-319-70241-4_2, DOI 10.1007/978-3-319-70241-4_2]
   Debnath B., 2020, SUSTAINABLE WASTE MA, P403, DOI [10.1007/978-981-13-7071-7_36, DOI 10.1007/978-981-13-7071-7_36]
   Dieterich J. M., 2012, ARXIV
   Dion M., 2020, Theoretical Foundations of Homeland Security, P257
   Eslamkhah M, 2019, KNOWL MAN RES PRACT, V17, P276, DOI 10.1080/14778238.2019.1599495
   EuroStat: Electricity Price Statistics, 2022, STAT EXPLAINED
   Farhi E, 2001, SCIENCE, V292, P472, DOI 10.1126/science.1057726
   Farhi E., 2014, ARXIV
   Glantz C., 2017, IMPLEMENTING INFORM, P179, DOI [10.1007/978-3-319-62108-1_9, DOI 10.1007/978-3-319-62108-1_9]
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grispos G, 2017, DIGIT INVEST, V22, P62, DOI 10.1016/j.diin.2017.07.006
   Gritzalis D, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3145905
   Grover LK, 1997, PHYS REV LETT, V79, P325, DOI 10.1103/PhysRevLett.79.325
   Gyongyosi L, 2019, COMPUT SCI REV, V31, P51, DOI 10.1016/j.cosrev.2018.11.002
   Hariyanti E., 2018, 4 INT C SCI TECHN IE, P1, DOI [10.1109/ICSTC.2018.8528678, DOI 10.1109/ICSTC.2018.8528678]
   He Y, 2022, INT J INFORM MANAGE, V62, DOI 10.1016/j.ijinfomgt.2021.102435
   Heim B, 2020, NAT REV PHYS, V2, P709, DOI 10.1038/s42254-020-00245-7
   Hidary Jack D, 2019, Quantum Computing: An Applied Approach, DOI [10.1007/978-3-030-23922-0, DOI 10.1007/978-3-030-23922-0]
   IBM: The Quantum Decade, 2021, PLAYB ACH AW READ AD
   Johnston E. R., 2019, Programming Quantum Computers: Essential Algorithms and Code Samples
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Knight R, 2020, COMPUT SECUR, V99, DOI 10.1016/j.cose.2020.102036
   Liu SS, 2018, LECT NOTES COMPUT SC, V11180, P133, DOI 10.1007/978-3-030-01461-2_8
   Lucas A, 2014, FRONT PHYS-LAUSANNE, V2, DOI 10.3389/fphy.2014.00005
   Mahima D., 2021, 2021 International Conference on Innovative Practices in Technology and Management (ICIPTM), P55, DOI 10.1109/ICIPTM52218.2021.9388333
   Mailloux LO, 2016, IT PROF, V18, P42, DOI 10.1109/MITP.2016.77
   Maymin P., 1996, ARXIV
   Mortazavi Sayed Amir Reza, 2019, International Journal of Information Technology, V11, P517, DOI 10.1007/s41870-019-00302-0
   Mueck L, 2017, NATURE, V549, P171, DOI 10.1038/549171a
   Naseer A, 2021, INT J INFORM MANAGE, V59, DOI 10.1016/j.ijinfomgt.2021.102334
   Pakin Scott, 2016, 2016 IEEE High-Performance Extreme Computing Conference (HPEC), DOI 10.1109/HPEC.2016.7761637
   Paltrinieri N, 2017, J LOSS PREVENT PROC, V49, P111, DOI 10.1016/j.jlp.2017.03.023
   Piattini M, 2021, IT PROF, V23, P62, DOI 10.1109/MITP.2020.3019522
   Pleta T., 2020, INSIGHTS REGIONAL DE, V2, P538, DOI [10.9770/IRD.2020.2.2(3), DOI 10.9770/IRD.2020.2.2(3)]
   Prasad R., 2020, SECURE INCIDENT HAND, P203, DOI [10.1007/978-3-030-31703-4_14, DOI 10.1007/978-3-030-31703-4_14]
   Proença D, 2018, LECT NOTES BUS INF P, V320, P102, DOI 10.1007/978-3-319-93931-5_8
   Rocke D., 2000, J. Am. Stat. Assoc, V95, P347, DOI [DOI 10.2307/2669583, 10.2307/2669583]
   Rosado DG, 2021, COMPUT SECUR, V102, DOI 10.1016/j.cose.2020.102155
   Ross R, 2019, NIST Special Publication (SP) 800-160, V2, DOI [DOI 10.6028/NIST.SP.800-160V2, 10.6028/NIST.SP.800-160v2]
   Ruan KY, 2017, COMPUT SECUR, V65, P77, DOI 10.1016/j.cose.2016.10.009
   Salvi A, 2022, COMPUT SECUR, V112, DOI 10.1016/j.cose.2021.102507
   Sanchez P, 2021, APPL SCI-BASEL, V11, DOI 10.3390/app11135843
   Sardjono W., 2018, INT C INF MAN TECHN, DOI [10.1109/ICIMTech.2018.8528108, DOI 10.1109/ICIMTECH.2018.8528108]
   SHOR PW, 1994, AN S FDN CO, P124
   Smith R.S., 2016, arXiv
   Srinivas J, 2019, FUTURE GENER COMP SY, V92, P178, DOI 10.1016/j.future.2018.09.063
   Steiger DS, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-01-31-49
   Sun HW, 2019, J SYST ENG ELECTRON, V30, P297, DOI 10.21629/JSEE.2019.02.09
   Sutor R S, 2019, Dancing with Qubits
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Szabo Zsolt, 2017, Key Engineering Materials, V755, P322, DOI 10.4028/www.scientific.net/KEM.755.322
   Szwaczyk S, 2018, 2018 INTERNATIONAL CONFERENCE ON MILITARY COMMUNICATIONS AND INFORMATION SYSTEMS (ICMCIS)
   Tam T, 2021, COMPUT SECUR, V109, DOI 10.1016/j.cose.2021.102385
   Tanczer LM, 2018, GLOB POLICY, V9, P60, DOI 10.1111/1758-5899.12625
   Thakur K, 2015, 2015 IEEE 2ND INTERNATIONAL CONFERENCE ON CYBER SECURITY AND CLOUD COMPUTING (CSCLOUD), P307, DOI 10.1109/CSCloud.2015.71
   Tiganoaia B, 2019, SUSTAINABILITY-BASEL, V11, DOI 10.3390/su11041178
   Turskis Z, 2019, INFORMATICA-LITHUAN, V30, P187, DOI 10.15388/Informatica.2019.203
   van der Kleij R, 2022, COMPUT SECUR, V113, DOI 10.1016/j.cose.2021.102535
   Wang T, 2018, J CLEAN PROD, V205, P552, DOI 10.1016/j.jclepro.2018.09.127
   Wecker D., 2014, ARXIV
   Wittek P, 2014, QUANTUM MACHINE LEARNING: WHAT QUANTUM COMPUTING MEANS TO DATA MINING, P1
   Wolf M., 2020, THREATS THREAT ANAL, P35, DOI [10.1007/978-3-030-25808-5_3, DOI 10.1007/978-3-030-25808-5_3]
   Yoseviano H. F., 2018, 2018 INT C INF MAN T, P21, DOI [10.1109/ICIMTech.2018.8528096, DOI 10.1109/ICIMTECH.2018.8528096]
   Zhao J., 2020, ARXIV
NR 85
TC 3
Z9 3
U1 2
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 163
EP 192
DI 10.1007/s11219-023-09632-6
EA MAY 2023
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:000993897000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Pradhan, SK
   Heyn, HM
   Knauss, E
AF Pradhan, Shameer Kumar
   Heyn, Hans-Martin
   Knauss, Eric
TI Identifying and managing data quality requirements: a design science
   study in the field of automated driving
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Advanced driver assistance systems; Data quality; Data quality
   attributes; Data quality challenges; Data quality workflow; Requirements
   engineering
AB Good data quality is crucial for any data-driven system's effective and safe operation. For critical safety systems, the significance of data quality is even higher since incorrect or low-quality data may cause fatal faults. However, there are challenges in identifying and managing data quality. In particular, there is no accepted process to define and continuously test data quality concerning what is necessary for operating the system. This lack is problematic because even safety-critical systems become increasingly dependent on data. Here, we propose a Candidate Framework for Data Quality Assessment and Maintenance (CaFDaQAM) to systematically manage data quality and related requirements based on design science research. The framework is constructed based on an advanced driver assistance system (ADAS) case study. The study is based on empirical data from a literature review, focus groups, and design workshops. The proposed framework consists of four components: a Data Quality Workflow, a List of Data Quality Challenges, a List of Data Quality Attributes, and Solution Candidates. Together, the components act as tools for data quality assessment and maintenance. The candidate framework and its components were validated in a focus group.
C1 [Pradhan, Shameer Kumar; Heyn, Hans-Martin; Knauss, Eric] Univ Gothenburg & Chalmers, Dept Comp Sci & Engn, S-40530 Gothenburg, Sweden.
RP Pradhan, SK (corresponding author), Univ Gothenburg & Chalmers, Dept Comp Sci & Engn, S-40530 Gothenburg, Sweden.
EM shameer.pradhan@uhasselt.be; heyn@chalmers.se; eric.knauss@cse.gu.se
RI Pradhan, Shameer/HGB-6311-2022
OI Pradhan, Shameer/0000-0001-8969-8772
FU University of Gothenburg; European Union
FX Open access funding provided by University of Gothenburg. The research
   received funding as part of the European Union's Horizon 2020 project
   "VEDLIoT."
CR Batini C, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1541880.1541883
   Batini Carlo, 2007, P 12 INT C INF QUAL, P333
   Bobrowski M., 1998, SOFTWARE ENG VIEW DA
   Cai L., 2015, COMPUT LAW SECUR REV, V14
   Challa H, 2020, 2020 IEEE SEVENTH INTERNATIONAL WORKSHOP ON ARTIFICIAL INTELLIGENCE FOR REQUIREMENTS ENGINEERING (AIRE 2020), P61, DOI 10.1109/AIRE51212.2020.00016
   Corrales David Camilo, 2016, Rev. ing. univ. Medellín, V15, P125
   COX EP, 1980, J MARKETING RES, V17, P407, DOI 10.1177/002224378001700401
   Dama International, 2017, DAM DMBOK DAT MAN BO
   DQ, 2017, LIST CONF DIM DAT QU
   European Commission. Statistical Office of the European Union, 2020, EUR STAT SYST HDB QU
   Farooq MB, 2017, MEDITARI ACCOUNT RES, V25, P291, DOI 10.1108/MEDAR-10-2016-0083
   Fayyad J, 2020, SENSORS-BASEL, V20, DOI 10.3390/s20154220
   Fletcher F., 1998, P 1998 INT C INF QUA
   FOX C, 1994, INFORM PROCESS MANAG, V30, P9, DOI 10.1016/0306-4573(94)90020-5
   Fujii G, 2020, INT J SOFTW ENG KNOW, V30, P1589, DOI 10.1142/S0218194020400227
   Gebru T, 2021, COMMUN ACM, V64, P86, DOI 10.1145/3458723
   Gibbs G.R., 2007, Analyzing qualitative data, DOI [10.4135/9781849208574, DOI 10.4135/9781849208574.N4, DOI 10.4135/9781849208574]
   Gilb T, 2005, COMPETITIVE ENGINEERING: A HANDBOOK FOR SYSTEMS ENGINEERING, REQUIREMENTS ENGINEERING, AND SOFTWARE ENGINEERING USING PLANGUAGE, P1, DOI 10.1016/B978-075066507-0/50005-2
   Haoues M, 2017, INT J SYST ASSUR ENG, V8, P886, DOI 10.1007/s13198-016-0546-8
   Henderson D., 2017, DAMA DMBOK DAT MAN B
   Heravizadeh M, 2009, LECT NOTES BUS INF P, V17, P80
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Holland Sarah, 2020, Data Protection and Privacy, V3, P1, DOI DOI 10.5040/9781509932771.CH-001
   Holstein K, 2019, CHI 2019: PROCEEDINGS OF THE 2019 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3290605.3300830
   ISO, 2011, Systems and Software Engineering-Systems and Software Quality Requirements and Evaluation (SQuaRE)-System and Software Quality Models, Standard 2011
   ISO, 2008, 250122008 ISO IEC
   Knauss E, 2021, 2021 IEEE/ACM 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: JOINT TRACK ON SOFTWARE ENGINEERING EDUCATION AND TRAINING (ICSE-JSEET 2021), P110, DOI 10.1109/ICSE-SEET52601.2021.00021
   Knight S., 2005, Informing Science, V8, P159, DOI [10.28945/493, DOI 10.28945/493]
   Kruse CS, 2016, JMIR MED INF, V4, DOI 10.2196/medinform.5359
   Linneberg MS, 2019, QUAL RES J, V19, P259, DOI 10.1108/QRJ-12-2018-0012
   Madnick S, 2003, J MANAGE INFORM SYST, V20, P41, DOI 10.1080/07421222.2003.11045772
   McGilvray D., 2008, Executing data quality projects
   McMeekin N, 2020, BMC MED RES METHODOL, V20, DOI 10.1186/s12874-020-01061-4
   Palinkas LA, 2015, ADM POLICY MENT HLTH, V42, P533, DOI 10.1007/s10488-013-0528-y
   Peffers K, 2007, J MANAGE INFORM SYST, V24, P45, DOI 10.2753/MIS0742-1222240302
   Peralta V., 2006, DATA QUALITY EVALUAT
   Pipino LL., 2002, Communications of the ACM, V45, P211, DOI [DOI 10.1145/505248.506010, 10.1145/505248.506010]
   Rusk N, 2016, NAT METHODS, V13, P35, DOI 10.1038/nmeth.3707
   Sandkuhl K, 2019, CONF BUS INFORM, P157, DOI 10.1109/CBI.2019.00025
   Sedgwick P., 2013, BMJ, V347, pf6304, DOI [10.4135/9781412963947, 10.1136/bmj.f6304, DOI 10.1136/BMJ.F6304]
   Sessions V., 2006, ICIQ, P485
   Sidi F., 2012, 2012 International Conference on Information Retrieval & Knowledge Management (CAMP), P300, DOI 10.1109/InfRKM.2012.6204995
   Statistical Office of the EU, 2020, EUR STAT SYST HDB QU
   Sun C, 2017, IEEE I CONF COMP VIS, P843, DOI 10.1109/ICCV.2017.97
   Suri H, 2011, QUAL RES J, V11, P63, DOI 10.3316/QRJ1102063
   Vogelsang A, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P245, DOI 10.1109/REW.2019.00050
   Wang R. Y., 1996, Journal of Management Information Systems, V12, P5
   Ziebinski A, 2017, AIP CONF PROC, V1906, DOI 10.1063/1.5012394
NR 48
TC 1
Z9 1
U1 6
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2024
VL 32
IS 2
BP 313
EP 360
DI 10.1007/s11219-023-09622-8
EA MAY 2023
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UX1Q1
UT WOS:000985366800001
OA hybrid
DA 2024-07-18
ER

PT J
AU Yousofvand, L
   Soleimani, S
   Rafe, V
AF Yousofvand, Leila
   Soleimani, Seyfollah
   Rafe, Vahid
TI Automatic bug localization using a combination of deep learning and
   model transformation through node classification
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Deep learning; Bug localization; Node classification; Graph neural
   networks
ID PROGRAMS
AB Bug localization is the task of automatically locating suspicious commands in the source code. Many automated bug localization approaches have been proposed for reducing costs and speeding up the bug localization process. These approaches allow developers to focus on critical commands. In this paper, we propose to treat the bug localization problem as a node classification problem. As in the existing training sets, where whole graphs are labeled as buggy and bug-free, it is required first to label all nodes in each graph. To do this, we use the Gumtree algorithm, which labels the nodes by comparing the buggy graphs with their corresponding fixed graphs. In classification, we propose to use a type of graph neural networks (GNNs), GraphSAGE. The used dataset for training and testing is JavaScript buggy code and their corresponding fixed code. The results demonstrate that the proposed method outperforms other related methods.
C1 [Yousofvand, Leila; Soleimani, Seyfollah; Rafe, Vahid] Arak Univ, Fac Engn, Dept Comp Engn, Arak 3815688349, Iran.
   [Rafe, Vahid] Goldsmiths Univ London, Dept Comp, London, England.
C3 Arak University; University of London; Goldsmiths University London
RP Soleimani, S (corresponding author), Arak Univ, Fac Engn, Dept Comp Engn, Arak 3815688349, Iran.
EM l.yousofvand@gmail.com; s-soleimani@araku.ac.ir; v-rafe@araku.ac.ir
RI Soleimani, Seyfollah/F-2468-2016
CR Abreu R., 2009, P 8 S ABSTR REF APPR
   Abreu R, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P89, DOI 10.1109/TAIC.PART.2007.13
   AGRAWAL H, 1991, IEEE SOFTWARE, V8, P21, DOI 10.1109/52.88940
   [Anonymous], 2021, STATE OCTOVERSE
   [Anonymous], 2018, P INT C LEARNING REP
   [Anonymous], 2014, ACM SIGSOFT Software Engineering Notes, DOI [DOI 10.1145/2659118.2659125, 10.1145/2659118.2659125]
   Ascari L. C., 2009, P 10 LAT AM TEST WOR
   Baah GK, 2010, IEEE T SOFTWARE ENG, V36, P528, DOI 10.1109/TSE.2009.87
   Chen MY, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P595, DOI 10.1109/DSN.2002.1029005
   Cucurull Guillem, 2018, ICLR, P1
   DiGiuseppe N., 2011, P 2011 INT S SOFTWAR
   Dinella E, 2020, ICLR
   Falleri Jean-Remy, 2014, P 29 ACM IEEE INT C, P313
   Gazzola L, 2019, IEEE T SOFTWARE ENG, V45, P34, DOI 10.1109/TSE.2017.2755013
   Hamilton WL, 2017, ADV NEUR IN, V30
   Hao D., 2012, TEST INPUT REDUCTION
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Hu W., 2020, 35 ANN C NEURAL INFO
   Jensen SH, 2009, LECT NOTES COMPUT SC, V5673, P238, DOI 10.1007/978-3-642-03237-0_17
   Jones J.A., 2005, P 20 IEEE ACM INT C, P273, DOI [10.1145/1101908.1101949, DOI 10.1145/1101908.1101949]
   Kim D, 2013, IEEE T SOFTWARE ENG, V39, P1597, DOI 10.1109/TSE.2013.24
   Kipf T.N., 2017, INT C LEARNING REPRE, DOI DOI 10.48550/ARXIV.1609.02907
   Korel B., 1998, IEEE T SOFTWARE ENG, V14
   Le Goues C., 2013, THESIS U VIRGINIA
   Lee CC, 1999, IEEE T SYST MAN CY B, V29, P674, DOI 10.1109/3477.809023
   Lukins S. K., 2012, INFORM SOFTWARE TECH, V52
   Mateis C., 2000, P EUR C ART INT
   Mayer Wolfgang, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P128, DOI 10.1109/ASE.2008.23
   Mayer W., 2002, P EUR C ART INT
   Mayer W, 2007, ELECTRON NOTES THEOR, V174, P61, DOI 10.1016/j.entcs.2006.12.030
   Meyers RobertA., 2001, Encyclopedia of Physical Science and Technology
   Naish L, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000791.2000795
   Paszke A., 2019, ADV NEURAL INFORM PR, P8026, DOI DOI 10.48550/ARXIV.1912.01703
   Pmd, 2021, PMD 6410
   Qiong G., 2016, 2015 IEEE INT C COMM, V14
   Rao S., 2011, P 8 WORK C MIN SOFTW, P43
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Saha RK, 2013, IEEE INT CONF AUTOM, P345, DOI 10.1109/ASE.2013.6693093
   Scarselli F, 2009, IEEE T NEURAL NETWOR, V20, P61, DOI 10.1109/TNN.2008.2005605
   Sisman B., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P50, DOI 10.1109/MSR.2012.6224299
   Sun YM, 2009, INT J PATTERN RECOGN, V23, P687, DOI 10.1142/S0218001409007326
   VESSEY I, 1985, INT J MAN MACH STUD, V23, P459, DOI 10.1016/S0020-7373(85)80054-7
   Vinyals, 2015, 29 ANN C NEURAL INFO, V28
   Wang M., 2020, ARXIV
   Wang Q., 2015, P INT S SOFTW TEST A
   Wang SW, 2014, PROC IEEE INT CONF S, P171, DOI 10.1109/ICSME.2014.39
   Wong W. E., 2019, INT J SOFTW ENG KNOW, V19
   Wong W. E., 2012, IEEE TRANS, V42
   Wong WE, 2010, J SYST SOFTWARE, V83, P188, DOI 10.1016/j.jss.2009.09.037
   Wong WE, 2009, INT J SOFTW ENG KNOW, V19, P573, DOI 10.1142/S021819400900426X
   Wotawa F, 2002, LECT NOTES ARTIF INT, V2358, P746
   Wu ZH, 2021, IEEE T NEUR NET LEAR, V32, P4, DOI 10.1109/TNNLS.2020.2978386
   Zakas N. C., 2013, ESLINT
   Zhang MH, 2018, AAAI CONF ARTIF INTE, P4438
   Zhao TX, 2021, WSDM '21: PROCEEDINGS OF THE 14TH ACM INTERNATIONAL CONFERENCE ON WEB SEARCH AND DATA MINING, P833, DOI 10.1145/3437963.3441720
   Zhong H., 2020, SCI CHINA INFORM SCI, V63
   Zhong H, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P913, DOI 10.1109/ICSE.2015.101
   Zhou J, 2020, AI OPEN, V1, P57, DOI 10.1016/j.aiopen.2021.01.001
NR 58
TC 1
Z9 1
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1045
EP 1063
DI 10.1007/s11219-023-09625-5
EA MAR 2023
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY4P9
UT WOS:000956294600001
DA 2024-07-18
ER

PT J
AU Song, QY
   Tan, KG
   Runeson, P
   Persson, S
AF Song, Qunying
   Tan, Kaige
   Runeson, Per
   Persson, Stefan
TI Critical scenario identification for realistic testing of autonomous
   driving systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Critical scenario identification; Autonomous driving; Software testing;
   Test scenario generation
ID SAFETY
AB Autonomous driving has become an important research area for road traffic, whereas testing of autonomous driving systems to ensure a safe and reliable operation remains an open challenge. Substantial real-world testing or massive driving data collection does not scale since the potential test scenarios in real-world traffic are infinite, and covering large shares of them in the test is impractical. Thus, critical ones have to be prioritized. We have developed an approach for critical test scenario identification and in this study, we implement the approach and validate it on two real autonomous driving systems from industry by integrating it into their tool-chain. Our main contribution in this work is the demonstration and validation of our approach for critical scenario identification for testing real autonomous driving systems.
C1 [Song, Qunying; Runeson, Per] Lund Univ, Dept Comp Sci, Box 118, SE-22100 Lund, Sweden.
   [Tan, Kaige] Royal Inst Technol, Dept Mechatron, Brinellvagen 83, SE-10044 Stockholm, Sweden.
   [Persson, Stefan] Volvo Cars Corp, Assar Gabrielssons Vag, SE-40531 Gothenburg, Sweden.
C3 Lund University; Royal Institute of Technology; Volvo
RP Song, QY (corresponding author), Lund Univ, Dept Comp Sci, Box 118, SE-22100 Lund, Sweden.
EM qunying.song@cs.lth.se; kaiget@kth.se; per.runeson@cs.lth.se;
   stefan.persson@volvocars.com
RI Tan, Kaige/HTN-1343-2023
OI Tan, Kaige/0000-0003-4535-3849; Song, Qunying/0000-0002-8653-0250;
   Runeson, Per/0000-0003-2795-4851
FU Lund University; Wal-lenberg AI, Autonomous Systems and Software Program
   (WASP)
FX Open access funding provided by Lund University. This work was supported
   in part by the Wal-lenberg AI, Autonomous Systems and Software Program
   (WASP)
CR Abuelenin SM, 2014, INT CONF CONNECT VEH, P391, DOI 10.1109/ICCVE.2014.7297577
   Althoff M, 2018, IEEE INT VEH SYM, P1326, DOI 10.1109/IVS.2018.8500374
   [Anonymous], 2017, INTELLIGENT TRANSPOR
   Bagschik G, 2018, IEEE INT VEH SYM, P1813, DOI 10.1109/IVS.2018.8500632
   Batsch F, 2021, APPL SCI-BASEL, V11, DOI 10.3390/app11020775
   BEGLEROVIC H, 2017, 2017 IEEE 20 INT C I, P1, DOI DOI 10.1109/ITSC.2017.8317768
   Bellem H, 2016, TRANSPORT RES F-TRAF, V41, P45, DOI 10.1016/j.trf.2016.05.005
   Bhat A, 2018, P IEEE, V106, P1700, DOI 10.1109/JPROC.2018.2841339
   Bokare PS, 2017, TRANSP RES PROC, V25, DOI 10.1016/j.trpro.2017.05.486
   Breyer G., 2010, TECHNICAL REPORT
   Buehler O., 2003, P INT C COMP COMM CO
   Ding WH, 2020, IEEE INT C INT ROBOT, P2243, DOI 10.1109/IROS45743.2020.9340696
   Dosovitskiy A., 2017, P 1 ANN C ROB LEARN, P1, DOI DOI 10.48550/ARXIV.1711.03938
   Erdogan A., 2018, PROC 6 INT C CONTROL, P1
   Felbinger H, 2019, INT CONF CONNECT VEH, DOI 10.1109/iccve45908.2019.8965209
   Feng S, 2021, IEEE T INTELL TRANSP, V22, P1573, DOI 10.1109/TITS.2020.2972211
   Gambi A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P318, DOI 10.1145/3293882.3330566
   Gambi A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P257, DOI 10.1145/3338906.3338942
   Gyllenhammar M., 2020, 10 EUR C EMB REAL TI
   Hallerbach Sven, 2018, SAE International Journal of Connected and Automated Vehicles, P93, DOI 10.4271/2018-01-1066
   Iqbal M, 2021, 2021 IEEE/ACM 6TH INTERNATIONAL WORKSHOP ON METAMORPHIC TESTING (MET 2021), P37, DOI 10.1109/MET52542.2021.00013
   Jenkins IR, 2018, IEEE INT C INTELL TR, P3340, DOI 10.1109/ITSC.2018.8569661
   Kalra N, 2016, TRANSPORT RES A-POL, V94, P182, DOI 10.1016/j.tra.2016.09.010
   Kang Y, 2019, IEEE T INTELL VEHICL, V4, P171, DOI 10.1109/TIV.2018.2886678
   Karunakaran D, 2020, IEEE INT C INTELL TR, DOI 10.1109/itsc45102.2020.9294590
   Klischat M, 2019, IEEE INT VEH SYM, P2352, DOI 10.1109/IVS.2019.8814230
   Klitzke L, 2019, PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON VEHICLE TECHNOLOGY AND INTELLIGENT TRANSPORT SYSTEMS (VEHITS 2019), P171, DOI 10.5220/0007720501710180
   Klück F, 2019, 2019 IEEE 19TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2019), P418, DOI 10.1109/QRS.2019.00058
   Knauss A, 2017, IEEE INT VEH SYM, P1873, DOI 10.1109/IVS.2017.7995978
   Koopman P, 2016, SAE INT J TRANSP SAF, V4, P15, DOI 10.4271/2016-01-0128
   Laureshyn A., 2016, REV CURRENT STUDY 4, P2
   Mahmud SMS, 2017, IATSS RES, V41, P153, DOI 10.1016/j.iatssr.2017.02.001
   Mauritz M, 2016, LECT NOTES COMPUT SC, V9953, P672, DOI 10.1007/978-3-319-47169-3_52
   Menzel T, 2018, IEEE INT VEH SYM, P1821, DOI 10.1109/IVS.2018.8500406
   Mouhagir H, 2016, 2016 IEEE 19TH INTERNATIONAL CONFERENCE ON INTELLIGENT TRANSPORTATION SYSTEMS (ITSC), P1114, DOI 10.1109/ITSC.2016.7795696
   Mullins Galen E., 2017, 2017 IEEE International Conference on Robotics and Automation (ICRA), P1443, DOI 10.1109/ICRA.2017.7989173
   Ponn T., 2019, P ESV INT TECHNICAL, P10
   Ponn T., 2020, 15 INT C ECOLOGICAL, P1
   Porres I, 2020, EUROMICRO CONF PROC, P545, DOI 10.1109/SEAA51224.2020.00090
   Priisalu M., 2021, 5 ANN C ROBOT LEARNI
   Riedmaier S, 2020, IEEE ACCESS, V8, P87456, DOI 10.1109/ACCESS.2020.2993730
   Rosique F, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19030648
   Runeson Per, 2020, Contemporary Empirical Methods in Software Engineering, P127, DOI [DOI 10.1007/978-3-030-32489-6_5, DOI 10.1007/978-3-030-32489-65]
   Scholtes M, 2021, IEEE ACCESS, V9, P59131, DOI 10.1109/ACCESS.2021.3072739
   Shah S, 2018, FIELD SERVICE ROBOTI, P621, DOI [10.1007/978-3-319-67361-5_40, DOI 10.1007/978-3-319-67361-5_40]
   Song Qunying, 2021, 2021 IEEE/ACM 1st Workshop on AI Engineering - Software Engineering for AI (WAIN), P74, DOI 10.1109/WAIN52551.2021.00018
   Song Q., 2022, ACM 1 WORKSHOP AUTON, DOI 10.1145/3551349.3563239
   Song QY, 2021, THIRD IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST 2021), P81, DOI 10.1109/AITEST52744.2021.00024
   Tan K., 2019, THESIS KTH
   Ulbrich S, 2015, IEEE INT C INTELL TR, P982, DOI 10.1109/ITSC.2015.164
   Ulungu E.L., 1999, Journal of Multi-Criteria Decision Analysis, V8, P221, DOI [10.1002/(SICI)1099-1360(199907)8:43.0.CO;2-O, DOI 10.1002/(SICI)1099-1360(199907)8:4ANDLT;221::AID-MCDA247ANDGT;3.0.CO;2-O]
   Yang B, 2020, IEEE WIREL COMMUN LE, V9, P1182, DOI 10.1109/LWC.2020.2984620
   Zhang X., 2021, PREPRINT
   Zhang XX, 2020, IEEE INT VEH SYM, P1330, DOI 10.1109/IV47402.2020.9304609
NR 54
TC 5
Z9 5
U1 18
U2 43
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 441
EP 469
DI 10.1007/s11219-022-09604-2
EA DEC 2022
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000893560700001
OA hybrid
DA 2024-07-18
ER

PT J
AU Moguel, E
   Rojo, J
   Valencia, D
   Berrocal, J
   Garcia-Alonso, J
   Murillo, JM
AF Moguel, Enrique
   Rojo, Javier
   Valencia, David
   Berrocal, Javier
   Garcia-Alonso, Jose
   Murillo, Juan M.
TI Quantum service-oriented computing: current landscape and challenges
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quantum services; Classical services; Hybrid classical-quantum software;
   Quality
AB The development that quantum computing technologies are achieving is beginning to attract the interest of companies that could potentially be users of quantum software. Thus, it is perfectly feasible that during the next few years hybrid systems will start to appear integrating both the classical software systems of companies and new quantum ones providing solutions to problems that still remain unmanageable today. A natural way to support such integration is Service-Oriented Computing. While conceptually the invocation of a quantum software service is similar to that of a classical one, technically there are many differences and technological limitations, which refer to platform independence, decoupling, scalability, etc. To highlight these differences and the difficulties to develop quality quantum services, this paper takes a well-known problem to which a quantum solution can be provided, integer factorization, making use of the Amazon Braket quantum service platform. The exercise of trying to provide the factorization as a quantum service is carried out following the best practices, design patterns and standards existing in the implementation of classical services. This case study is used to highlight the rough edges and limitations that arise in the integration of classical-quantum hybrid systems using service-oriented computing. The conclusion of the study allows us to point out directions in which to focus research efforts in order to achieve effective quantum service-oriented computing.
C1 [Moguel, Enrique; Rojo, Javier; Valencia, David; Berrocal, Javier; Garcia-Alonso, Jose; Murillo, Juan M.] Univ Extremadura, Quercus Software Engn Grp, Avda Univ S-N, Caceres 10004, Spain.
C3 Universidad de Extremadura
RP Moguel, E (corresponding author), Univ Extremadura, Quercus Software Engn Grp, Avda Univ S-N, Caceres 10004, Spain.
EM enrique@unex.es; javirojo@unex.es; davaleco@unex.es; jberolm@unex.es;
   jgaralo@unex.es; juanmamu@unex.es
RI Garcia-Alonso, Jose/A-4316-2017; Berrocal, Javier/B-2524-2015; Moguel,
   Enrique/D-9813-2016
OI Garcia-Alonso, Jose/0000-0002-6819-0299; Berrocal,
   Javier/0000-0002-1007-2134; Moguel, Enrique/0000-0002-4096-1282
FU CRUE-CSIC; Springer Nature
FX Open Access funding provided thanks to the CRUE-CSIC agreement with
   Springer Nature.
CR [Anonymous], 2022, Digital Journal
   Barzen J., 2020, CLOUD COMPUTING SERV, V1399, P25, DOI [10.1007/978-3-030-72369-9_2, DOI 10.1007/978-3-030-72369-9_2]
   Bergholm V., 2018, Pennylane: Automatic differenti- ation of hybrid quantum-classical computa- tions
   Boixo S, 2013, NAT COMMUN, V4, DOI 10.1038/ncomms3067
   Bouguettaya A, 2017, COMMUN ACM, V60, P64, DOI 10.1145/2983528
   Cheng JK, 2021, AEROSP CONF PROC, DOI 10.1109/AERO50100.2021.9438392
   Chuang I., 2000, Quantum Information and Quantum Computation
   Cohen Y., 2020, Bull. Am. Phys. Soc., V65
   Cuomo D, 2020, IET QUANTUM COMMUN, V1, P3, DOI 10.1049/iet-qtc.2020.0002
   Dreher P, 2019, IEEE HIGH PERF EXTR
   Endrei M., 2004, PATTERNS SERVICE ORI
   Feng Hu, 2019, Quantum Engineering, V1, DOI 10.1002/que2.12
   Garcia-Alonso J., 2021, IEEE INTERNET COMPUT
   Grossi M., 2021, ARXIV210702007
   Haring RA, 2012, IEEE MICRO, V32, P48, DOI 10.1109/MM.2011.108
   Haugeland SG, 2021, 2021 47TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS (SEAA 2021), P170, DOI 10.1109/SEAA53835.2021.00030
   Hooton, 2019, EXAMINING EC CONTRIB
   Jiang SX, 2018, SCI REP-UK, V8, DOI 10.1038/s41598-018-36058-z
   Kielpinski D, 2002, NATURE, V417, P709, DOI 10.1038/nature00784
   Kumara I., 2021, S SUMM SCH SERV OR C, P52, DOI [10.1007/978-3-030-87568-8_3, DOI 10.1007/978-3-030-87568-8_3]
   MacQuarrie ER, 2020, NAT REV PHYS, V2, P596, DOI 10.1038/s42254-020-00247-5
   Mazlami G, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS 2017), P524, DOI 10.1109/ICWS.2017.61
   McCaskey A, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING (ICRC), P154
   McCaskey AJ, 2020, QUANTUM SCI TECHNOL, V5, DOI 10.1088/2058-9565/ab6bf6
   Moguel Enrique, 2020, QCE, P5
   Motta M, 2020, NAT PHYS, V16, P205, DOI 10.1038/s41567-019-0704-4
   Newman S., 2021, BUILDING MICROSERVIC
   Papazoglou MP, 2003, FOURTH INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS ENGINEERING, PROCEEDINGS, P3
   Perez-Castillo R., 2020, SHORT PAP P 1 INT WO, V2705, P1
   Pérez-Castillo R, 2021, ADV ENG SOFTW, V151, DOI 10.1016/j.advengsoft.2020.102933
   Piattini Mario, 2020, ACM SIGSOFT Software Engineering Notes, V45, P12, DOI 10.1145/3402127.3402131
   Piattini M, 2021, IT PROF, V23, P62, DOI 10.1109/MITP.2020.3019522
   Piattini Mario, 2020, QANSWER, P1
   Pistoia M., 2021, ARXIV210904298, DOI DOI 10.1109/ICCAD51958.2021.9643469
   Rahaman M., 2015, GLOBAL J COMPUTER SC
   Ravichandran T, 2000, MIS QUART, V24, P381, DOI 10.2307/3250967
   Richardson, 2019, MICROSERVICES PATTER, P490
   Rojo J., 2021, ARXIV210504421, V3008, P1
   Sete EA, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING (ICRC)
   Sodhi B., 2018, ARXIV PREPRINT ARXIV
   Wang BN, 2020, SCI REP-UK, V10, DOI 10.1038/s41598-020-62802-5
   Wang LZ, 2010, NEW GENERAT COMPUT, V28, P137, DOI 10.1007/s00354-008-0081-5
   Wild K, 2020, IEEE INT ENTERP DIST, P125, DOI 10.1109/EDOC49727.2020.00024
   Wille R, 2019, DES AUT TEST EUROPE, P1234, DOI 10.23919/DATE.2019.8715261
   Wolff, 2019, MICROSERVICES PRACTI
   You, 2020, ARXIV201203919
   Zhao, 2020, CORRABS200707047
   Zinner M, 2022, DRUG DISCOV TODAY, V27, P378, DOI 10.1016/j.drudis.2021.10.006
NR 48
TC 12
Z9 12
U1 1
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2022
VL 30
IS 4
BP 983
EP 1002
DI 10.1007/s11219-022-09589-y
EA APR 2022
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6J7CW
UT WOS:000787132100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Ortega-Cabezas, PM
   Colmenar-Santos, A
   Borge-Diez, D
   Blanes-Peiró, JJ
   Higuera-Pérez, J
   Alcaide, E
AF Miguel Ortega-Cabezas, Pedro
   Colmenar-Santos, Antonio
   Borge-Diez, David
   Juan Blanes-Peiro, Jorge
   Higuera-Perez, Jorge
   Alcaide, Eric
TI Experience report on the application of genetic algorithms to reduce
   costs of the software validation process in the automotive sector during
   an engine control unit project
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Engine control unit software testing; Genetic algorithms; Model-based
   testing; Black-box testing; Cause-effect technique
ID REQUIREMENTS; SIMULATION; SYSTEMS
AB The number of electronic control units (ECU) installed in vehicles is increasingly high. Manufacturers must improve the software quality and reduce cost by proposing innovative techniques. This research proposes a technique being able to generate not only test-cases in real time but to decide the best means to run them (hardware-in-the-loop simulations or prototype vehicles) to reduce the cost and software testing time. It is focused on the engine ECU software which is one of the most complex software installed in vehicles. This software is coded by using Simulink (R) models. Two genetic algorithms (GAs) were coded. The first one is in charge of choosing which parts of the Simulink (R) models should be validated by using hardware-in-the-loop (HIL) simulations and by using prototype vehicles. The second one tunes the inputs of the software module (SM) under validation to cover these parts of the Simulink (R) models. The usage of dynamic-linked libraries (dlls) is described to deal with the issues linked to SM interactions when running HIL simulations. GAs found at least 7 more bugs than traditional techniques and improved the functional and code coverage by between 3 and 11% for functional coverage and by between 1.4 and 7% for code coverage depending on the SM complexity. The validation time is reduced by 11.9% compared to traditional techniques. GAs perform better than traditional techniques improving software quality and reducing costs and validation time. The usage of dlls allows testing the software in real time as described in this study.
C1 [Miguel Ortega-Cabezas, Pedro; Colmenar-Santos, Antonio; Higuera-Perez, Jorge; Alcaide, Eric] UNED, Dept Elect Elect & Control Engn, Juan Rosal,12 Ciudad Univ, Madrid 28040, Spain.
   [Borge-Diez, David; Juan Blanes-Peiro, Jorge] Univ Leon, Dept Elect & Control Engn, Leon, Spain.
C3 Universidad Nacional de Educacion a Distancia (UNED); Universidad de
   Leon
RP Ortega-Cabezas, PM (corresponding author), UNED, Dept Elect Elect & Control Engn, Juan Rosal,12 Ciudad Univ, Madrid 28040, Spain.
EM pedro.ortegacabezas@gmail.com
RI Borge-Diez, David/B-1191-2018
OI Borge-Diez, David/0000-0003-0529-539X; Ortega Cabezas, Pedro
   Miguel/0000-0002-6217-8301
CR Abadeh MN, 2020, REQUIR ENG, V25, P95, DOI 10.1007/s00766-019-00309-w
   Ågren SM, 2019, REQUIR ENG, V24, P315, DOI 10.1007/s00766-019-00319-8
   [Anonymous], 2013, CESAR COST EFFICIENT
   [Anonymous], 2018, MATELO SOFTWARE
   ASPICE, 2020, 330012015 ASPICE ISO
   Banish G., 2007, Engine Management Advanced Tuning
   Barhate SS, 2015, 2015 INTERNATIONAL CONFERENCE ON INDUSTRIAL INSTRUMENTATION AND CONTROL (ICIC), P645, DOI 10.1109/IIC.2015.7150821
   Conrad M, 2005, ELECTRON NOTES THEOR, V111, P13, DOI 10.1016/j.entcs.2004.12.005
   Delius G. W., 2004, ORTHOGONAL ARRAYS TA
   DOSSANTOS J, 2019, REQUIR ENG
   El-Rewini Z, 2020, VEH COMMUN, V23
   Esfandyari S, 2018, INFORM SOFTWARE TECH, V94, P165, DOI 10.1016/j.infsof.2017.10.007
   Feldhütter A, 2018, ADV INTELL SYST, V597, P730, DOI 10.1007/978-3-319-60441-1_70
   Gajjar ManishJ., 2017, MOBILE SENSORS CONTE
   Garousi V., 2018, SURVEY SOFTWARE TEST
   Garousi V, 2016, INFORM SOFTWARE TECH, V80, P195, DOI 10.1016/j.infsof.2016.09.002
   Haghighatkhah A, 2017, J SYST SOFTWARE, V128, P25, DOI 10.1016/j.jss.2017.03.005
   Hooshyar H, 2015, SUSTAIN ENERGY GRIDS, V3, P36, DOI 10.1016/j.segan.2015.06.002
   Huang WL, 2016, 2016 IEEE 19TH INTERNATIONAL CONFERENCE ON INTELLIGENT TRANSPORTATION SYSTEMS (ITSC), P163, DOI 10.1109/ITSC.2016.7795548
   ISO, 2019, CYB STAND
   ISO, 2020, AUT DRIV SAF STAND
   Kasoju A, 2013, INFORM SOFTWARE TECH, V55, P1237, DOI 10.1016/j.infsof.2013.01.005
   Kim Y, 2020, INFORM SOFTWARE TECH, V123, DOI 10.1016/j.infsof.2019.106221
   Koegel M., 2018, AUTOUPDATE SAFE SECU, DOI 10.1007/978-3-658-21444-9_9
   Kohl S., 2003, ATZ WORLDWIDE, V105, P10, DOI [10.1007/BF03224632, DOI 10.1007/BF03224632]
   Krüger M, 2016, MICROELECTRON RELIAB, V64, P140, DOI 10.1016/j.microrel.2016.07.126
   Linderman U., 2009, STRUCTURAL COMPLEXIT, DOI 10.1007/978-3-540-87889-6
   Lockledge JC, 1999, J ENG DESIGN, V10, P109, DOI 10.1080/095448299261344
   Vivas JL, 2011, REQUIR ENG, V16, P55, DOI 10.1007/s00766-010-0114-8
   Martin H, 2020, RELIAB ENG SYST SAFE, V198, DOI 10.1016/j.ress.2019.106773
   Melo SM, 2019, INFORM SOFTWARE TECH, V105, P226, DOI 10.1016/j.infsof.2018.08.017
   Ortega-Cabezas PM, 2020, J SOFTW-EVOL PROC, V32, DOI 10.1002/smr.2223
   Moller D., 2019, Guide to Automotive Connectivity and Cybersecurity: Trends, Technologies, Innovations and Applications
   Morris D, 2020, TECHNOL FORECAST SOC, V157, DOI 10.1016/j.techfore.2020.120102
   Ortega-Cabezas Pedro Miguel, 2019, Journal of Software, V14, P265, DOI 10.17706/jsw.14.6.265-292
   Petrenko A, 2015, DES AUT CON, DOI 10.1145/2744769.2747935
   Placho T, 2020, MICROPROCESS MICROSY, V78, DOI 10.1016/j.micpro.2020.103257
   Plummer AR, 2006, P I MECH ENG I-J SYS, V220, P183, DOI 10.1243/09596518JSCE207
   Raffaelli L., 2016, EMB REAL TIM SOFTW S
   Raikwar S, 2019, MEASUREMENT, V133, P271, DOI 10.1016/j.measurement.2018.10.014
   Riedmaier S, 2020, IEEE ACCESS, V8, P87456, DOI 10.1109/ACCESS.2020.2993730
   Roychoudhury A., 2009, EMBEDDED SYSTEMS SOF
   Sharma A., 2016, INT J COMPUT SCI ENG, V7, P21, DOI DOI 10.5121/IJCSES.2016.7203
   Sharma C., 2013, Int. J. Comput. Sci. Issues, V10, P381
   Sun WH, 2016, NUCL INSTRUM METH A, V815, P83, DOI 10.1016/j.nima.2016.01.042
   Tatar M., 2014, Embedded Real Time Software and Systems (ERTS)
   Utesch F, 2020, EUR TRANSP RES REV, V12, DOI 10.1186/s12544-020-00438-2
   Vandi G, 2014, ENRGY PROCED, V45, P789, DOI 10.1016/j.egypro.2014.01.084
   Walia GS, 2009, INFORM SOFTWARE TECH, V51, P1087, DOI 10.1016/j.infsof.2009.01.004
   Wang C, 2019, IEEE INT C INTELL TR, P2639, DOI 10.1109/ITSC.2019.8917045
   Yi L, 2016, ENRGY PROCED, V88, P950, DOI 10.1016/j.egypro.2016.06.118
   Zhan Y, 2008, J SYST SOFTWARE, V81, P262, DOI 10.1016/j.jss.2007.05.039
   Zhou JG, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY - COMPANION (QRS-C 2015), P216, DOI 10.1109/QRS-C.2015.35
NR 53
TC 0
Z9 0
U1 2
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2022
VL 30
IS 3
BP 687
EP 728
DI 10.1007/s11219-021-09582-x
EA JAN 2022
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W2CB
UT WOS:000742631100001
DA 2024-07-18
ER

PT J
AU Mattiello, GR
   Endo, AT
AF Mattiello, Guilherme Ricken
   Endo, Andre Takeshi
TI Model-based testing leveraged for automated web tests
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Automated tests; Test case generation; Page
   objects; GUI tests
ID TOOLS
AB Agile methods and their practices have fostered the widespread presence of automated test cases. Such test cases have been successfully and extensively adopted to test different software levels, from unit tests (e.g., JUnit) to end-to-end Web Graphical User Interface (GUI) tests (e.g., Selenium Webdriver). While test execution is mostly automated by existing tools, test design remains a manual task. In the pursuit of a more automated test case generation approach, the use of models has been advocated by the model-based testing (MBT) technique. Current MBT approaches assume a top-down workflow in which testers design models, test cases are generated from models, and then scripts are written to automate test execution. Nevertheless, writing automated tests is nowadays a developer's responsibility and testers face a scenario in which automated tests might be reused to produce new model-based tests. This paper aimed to improve the synergy between existing automated tests and MBT. To do so, we present an approach that infers a model from existing tests, a tester leverages this model to include new tests, and then test code is generated. We analyzed the proposed approach in the context of Web applications with system-level GUI tests that employ the Page Object pattern. For MBT, we adopted event-driven models augmented with parameters and test input data. We evaluated the approach's applicability with a prototype tool called MoLeWe and an experimental study with nine open-source Web applications. The results provide some evidence that using MoLeWe may help to include new tests faster than manually coding them, while increasing the overall code coverage of the test suite.
C1 [Mattiello, Guilherme Ricken; Endo, Andre Takeshi] Univ Tecnol Fed Parana, Cornelio Procopio, Brazil.
C3 Universidade Tecnologica Federal do Parana
RP Endo, AT (corresponding author), Univ Tecnol Fed Parana, Cornelio Procopio, Brazil.
EM mattiello@alunos.utfpr.edu.br; andreendo@utfpr.edu.br
RI Endo, Andre Takeshi/I-1861-2012
OI Endo, Andre Takeshi/0000-0002-8737-1749
FU CNPq/Brazil [420363/20181]
FX Special thanks to the students and practitioners who took part in the
   empirical study. The authors are also grateful to the anonymous
   reviewers for their useful and comprehensive comments and suggestions
   that helped to strengthen the results. Andre T. Endo is partially
   financially supported by CNPq/Brazil (grant no. 420363/20181).
CR Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   ANGLUIN D, 1982, J ACM, V29, P741, DOI 10.1145/322326.322334
   [Anonymous], 2015, P 2015 INT S SOFTWAR, P83
   [Anonymous], 1990, Software testing techniques {
   [Anonymous], 2011, Proceedings of the 2011 International Symposium on Software Testing and Analysis, ISSTA'11
   Beck Kent L., 2003, Test Driven Development By Example
   Belli F, 2006, SOFTW TEST VERIF REL, V16, P3, DOI 10.1002/stvr.335
   Belli F., 2012, 2012 International Conference on Software Security and Reliability Companion, P198, DOI 10.1109/SERE-C.2012.24
   Bernardino M, 2017, IET SOFTW, V11, P141, DOI 10.1049/iet-sen.2015.0154
   Binder R.V, 2017, 2016 2017 MODEL BASE
   Chelimsky D., 2010, RSPEC BOOK BEHAV DRI
   Claus A., 2015, 2015 IEEE 8 INT C SO, P1
   Danglot B, 2019, J SYST SOFTWARE, V157, DOI 10.1016/j.jss.2019.110398
   Dixit R, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P745, DOI 10.1109/ICSE.2015.237
   Entin V., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P43, DOI 10.1109/IWAST.2012.6228989
   Entin V., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P572, DOI 10.1109/ICSTW.2011.13
   Fard A. M., 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, ASE'14, P67, DOI 10.1145/2642937.2642991
   Fowler M, 2013, Pageobject
   Grieskamp W, 2011, SOFTW TEST VERIF REL, V21, P55, DOI 10.1002/stvr.427
   Kazman R, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P154, DOI 10.1109/WCRE.1998.723185
   Kramer A., 2016, MODEL BASED TESTING
   Leotta M, 2020, IEEE INT CONF SOFTW, P263, DOI 10.1109/ICST46399.2020.00035
   Leotta M, 2013, IEEE ICST WORKSHOP, P108, DOI 10.1109/ICSTW.2013.19
   Li N, 2016, IEEE INT CONF SOFTW, P393, DOI 10.1109/ICST.2016.41
   Marchetto A, 2012, IET SOFTW, V6, P33, DOI 10.1049/iet-sen.2010.0152
   Memon AM, 2007, SOFTW TEST VERIF REL, V17, P137, DOI 10.1002/stvr.364
   Monperrus M., 2019, EMPIR SOFTW ENG, P1
   Mosterman P, 2011, Model-based testing for embedded systems
   Myers Glenford J., 2011, The Art of Software Testing
   Offutt J, 1999, LECT NOTES COMPUT SC, V1723, P416
   Orso A., 2014, P FUTURE SOFTWARE EN, P117, DOI [10.1145/2593882.2593885, DOI 10.1145/2593882.2593885]
   Pawlak R, 2016, SOFTWARE PRACT EXPER, V46, P1155, DOI 10.1002/spe.2346
   Peterson K., 2013, The github open source development process
   Ricca F, 2019, ADV COMPUT, V113, P89, DOI 10.1016/bs.adcom.2018.10.005
   Schulze C, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P77, DOI 10.1109/ISSRE.2015.7381801
   Spring.io, 2014, SPRING PETCLINIC SAM
   Stewart S., 2015, PAGE OBJECTS
   Stocco A, 2017, SOFTWARE QUAL J, V25, P1007, DOI 10.1007/s11219-016-9331-9
   Torens C., 2011, Proceedings of the 2011 IEEE 11th International Conference on Computer and Information Technology (CIT 2011), P320, DOI 10.1109/CIT.2011.99
   Utting M., 2007, PRACTICAL MODEL BASE
   Xie T., 2006, Automated Software Engineering, V13, P345, DOI 10.1007/s10851-006-8530-6
   Zhang PY, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2652483
NR 42
TC 0
Z9 0
U1 6
U2 24
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2022
VL 30
IS 3
BP 621
EP 649
DI 10.1007/s11219-021-09575-w
EA NOV 2021
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W2CB
UT WOS:000722964800001
DA 2024-07-18
ER

PT J
AU Eken, B
   Palma, F
   Ayse, B
   Ayse, T
AF Eken, Beyza
   Palma, Francis
   Ayse, Basar
   Ayse, Tosun
TI An empirical study on the effect of community smells on bug prediction
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Community smells; Bug prediction; Mining software repositories
ID DEFECT PREDICTION; SOFTWARE; CODE; IMPACT; METRICS
AB Community-aware metrics through socio-technical developer networks or organizational structures have already been studied in the software bug prediction field. Community smells are also proposed to identify communication and collaboration patterns in developer communities. Prior work reports a statistical association between community smells and code smells identified in software modules. We investigate the contribution of community smells on predicting bug-prone classes and compare their contribution with that of code smell-related information and state-of-the-art process metrics. We conduct our empirical analysis on ten open-source projects with varying sizes, buggy and smelly class ratios. We build seven different bug prediction models to answer three RQs: a baseline model including a state-of-the-art metric set used, three models incorporating a particular metric set, namely community smells, code smells, code smell intensity, into the baseline, and three models incorporating a combination of smell-related metrics into the baseline. The performance of these models is reported in terms of recall, false positive rates, F-measure and AUC and statistically compared using Scott-Knott ESD tests. Community smells improve the prediction performance of a baseline model by up to 3% in terms of AUC, while code smell intensity improves the baseline models by up to 40% in terms of F-measure and up to 17% in terms of AUC. The conclusions are significantly influenced by the validation strategies used, algorithms and the selected projects' data characteristics. While the code smell intensity metric captures the most information about technical flaws in predicting bug-prone classes, the community smells also contribute to bug prediction models by revealing communication and collaboration flaws in software development teams. Future research is needed to capture the communication patterns through multiple channels and to understand whether socio-technical flaws could be used in a cross-project bug prediction setting.
C1 [Eken, Beyza; Ayse, Tosun] Istanbul Tech Univ, Fac Comp & Informat Engn, Istanbul, Turkey.
   [Palma, Francis] Linnaeus Univ, Dept Comp Sci & Media Technol, Data Driven Software & Informat Qual, DISA, Kalmar, Sweden.
   [Ayse, Basar] Ryerson Univ, Dept Mech & Ind Engn, Data Sci Lab, Toronto, ON M5B 2K3, Canada.
C3 Istanbul Technical University; Linnaeus University; Toronto Metropolitan
   University
RP Eken, B (corresponding author), Istanbul Tech Univ, Fac Comp & Informat Engn, Istanbul, Turkey.
EM beyzaeken@itu.edu.tr; francis.palma@lnu.se; ayse.bener@ryerson.ca;
   tosunay@itu.edu.tr
RI Palma, Francis/HPC-9574-2023; EKEN, Beyza/ABA-8181-2020; Tosun,
   Ayse/B-4794-2014
OI EKEN, Beyza/0000-0002-6824-2765; Tosun, Ayse/0000-0003-1859-7872; Basar,
   Ayse/0000-0003-4934-8326
FU Collaborative Research and Development Grant from NSERC, Canada [CRDPJ
   499518-16]; Mevlana Exchange Programme Grant by Council of Higher
   Education, Turkey [258]
FX This study is supported in part by Collaborative Research and
   Development Grant (CRDPJ 499518-16) from NSERC, Canada and Mevlana
   Exchange Programme Grant (number 258) by Council of Higher Education,
   Turkey.
CR Almarimi N., 2020, 15 IEEE ACM INT C GL, P1
   Almarimi N, 2020, KNOWL-BASED SYST, V204, DOI 10.1016/j.knosys.2020.106201
   [Anonymous], 2009, PROC ACM INT C PREDI
   [Anonymous], 2008, 2008 ACM IEEE 30 INT
   Arcoverde R., 2011, WORKSH REF TOOLS, P33
   Bell RM, 2013, EMPIR SOFTW ENG, V18, P478, DOI 10.1007/s10664-011-9178-4
   Bird Christian, 2009, 2009 20th International Symposium on Software Reliability Engineering (ISSRE 2009), P109, DOI 10.1109/ISSRE.2009.17
   Caglayan B., 2014, THESIS BOGAZICI U
   Calikli G, 2015, SOFTWARE QUAL J, V23, P695, DOI 10.1007/s11219-014-9250-6
   Catolino G., 2020, REFACTORING COMMUNIT
   Catolino G, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN SOCIETY (ICSE-SEIS 2019), P11, DOI 10.1109/ICSE-SEIS.2019.00010
   Chatzigeorgiou A, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P106, DOI 10.1109/QUATIC.2010.16
   Di Nucci D, 2018, IEEE T SOFTWARE ENG, V44, P5, DOI 10.1109/TSE.2017.2659747
   Eken, 2019, EXPLORATORY STUDY IM
   Eken B, 2018, PROC IEEE ACM INT C, P488, DOI 10.1145/3183440.3183449
   Fontana FA, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P16, DOI 10.1109/MTD.2015.7332620
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Fu W, 2016, INFORM SOFTWARE TECH, V76, P135, DOI 10.1016/j.infsof.2016.04.017
   Giarola, 2018, DETECTING CODE COMMU
   Hall Mark A., 2002, Benchmarking attribute selection techniques for discrete class data mining
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   Jureczko M, 2010, P 6 INT C PREDICTIVE, DOI DOI 10.1145/1868328.1868342
   Kazman, 2017, IEEE T SOFTWARE ENG, V14, P1
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Kini SO, 2018, IEEE INT WORK C SO, P72, DOI 10.1109/SCAM.2018.00016
   Kirbas S, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1842
   Kohavi R, 1995, LECT NOTES ARTIF INT, V912, P174
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Magnoni, 2016, APPROACH MEASURE COM
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   Mauerer, 2010, CODEFACE
   Meneely A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P281, DOI 10.1145/1985793.1985832
   Menzies T., 2012, The PROMISE Repository of empirical software engineering data
   Menzies T, 2010, AUTOMAT SOFTW ENG, V17, P375, DOI 10.1007/s10515-010-0069-5
   Misirli, 2012, ICIS
   Misirli AT, 2016, EMPIR SOFTW ENG, V21, P605, DOI 10.1007/s10664-015-9370-z
   Ostrand T. J., 2010, P 6 INT C PRED MOD S, P19, DOI [DOI 10.1145/1868328, 10.1145/1868328]
   Palomba F, 2018, IEEE T SOFTWARE ENG
   Palomba F, 2019, IEEE T SOFTWARE ENG, V45, P194, DOI 10.1109/TSE.2017.2770122
   Palomba F, 2018, EMPIR SOFTW ENG, V23, P1188, DOI 10.1007/s10664-017-9535-z
   Palomba F, 2016, PROC IEEE INT CONF S, P245, DOI 10.1109/ICSME.2016.27
   Palomba F, 2014, PROC IEEE INT CONF S, P101, DOI 10.1109/ICSME.2014.32
   Peters R, 2012, EUR CON SFTWR MTNCE, P411, DOI 10.1109/CSMR.2012.79
   Posnett D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P452, DOI 10.1109/ICSE.2013.6606591
   Radjenovic D, 2013, INFORM SOFTWARE TECH, V55, P1397, DOI 10.1016/j.infsof.2013.02.009
   Soltanifar B, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962601
   Soltanifar Behjat, 2016, P 20 INT DATABASE EN, P148
   Taba SES, 2013, PROC IEEE INT CONF S, P270, DOI 10.1109/ICSM.2013.38
   Tamburri DA, 2015, J INTERNET SERV APPL, V6, DOI 10.1186/s13174-015-0024-6
   Tamburri DA, 2013, ACM COMPUT SURV, V46, DOI 10.1145/2522968.2522971
   Tamburri Damian Andrew Andrew, 2019, IEEE Transactions on software Engineering
   Tantithamthavorn C, 2017, IEEE T SOFTWARE ENG, V43, P1, DOI 10.1109/TSE.2016.2584050
   Tosun A, 2010, INFORM SOFTWARE TECH, V52, P1242, DOI 10.1016/j.infsof.2010.06.006
   Tsakiltsidis S, 2016, IEEE INT SYMP SOFTW, P132, DOI 10.1109/ISSREW.2016.43
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
   Turhan B, 2013, INFORM SOFTWARE TECH, V55, P1101, DOI 10.1016/j.infsof.2012.10.003
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Turhan B, 2009, EXPERT SYST APPL, V36, P9986, DOI 10.1016/j.eswa.2008.12.028
   Yin R. K., 2008, CASE STUDY RES DESIG, DOI DOI 10.1097/FCH.0B013E31822DDA9E
   Zhang F, 2017, IEEE T SOFTWARE ENG, V43, P476, DOI 10.1109/TSE.2016.2599161
NR 61
TC 8
Z9 8
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2021
VL 29
IS 1
BP 159
EP 194
DI 10.1007/s11219-020-09538-7
EA FEB 2021
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QZ5CV
UT WOS:000618145600001
DA 2024-07-18
ER

PT J
AU Al-Hawari, A
   Najadat, H
   Shatnawi, R
AF Al-Hawari, Assem
   Najadat, Hassan
   Shatnawi, Raed
TI Classification of application reviews into software maintenance tasks
   using data mining techniques
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Associative classification; Software reviews mining; Interesting
   measures
AB Mobile application reviews are considered a rich source of information for software engineers to provide a general understanding of user requirements and technical feedback to avoid main programming issues. Previous researches have used traditional data mining techniques to classify user reviews into several software maintenance tasks. In this paper, we aim to use associative classification (AC) algorithms to investigate the performance of different classifiers to classify reviews into several software maintenance tasks. Also, we proposed a new AC approach for review mining (ACRM). Review classification needs preprocessing steps to apply natural language preprocessing and text analysis. Also, we studied the influence of two feature selection techniques (information gain and chi-square) on classifiers. Association rules give a better understanding of users' intent since they discover the hidden patterns in words and features that are related to one of the maintenance tasks, and present it as class association rules (CARs). For testing the classifiers, we used two datasets that classify reviews into four different maintenance tasks. Results show that the highest accuracy was achieved by AC algorithms for both datasets. ACRM has the highest precision, recall, F-score, and accuracy. Feature selection helps improving the classifiers' performance significantly.
C1 [Al-Hawari, Assem; Najadat, Hassan; Shatnawi, Raed] Jordan Univ Sci & Technol, Irbid, Jordan.
C3 Jordan University of Science & Technology
RP Shatnawi, R (corresponding author), Jordan Univ Sci & Technol, Irbid, Jordan.
EM aralhawari15@cit.just.edu.jo; najadat@just.edu.jo; raedamin@just.edu.jo
RI Shatnawi, Raed/P-4713-2014
OI Shatnawi, Raed/0000-0001-7777-1370; Najadat, Hassan/0000-0003-1599-6608
CR Agrawal R., 1993, SIGMOD Record, V22, P207, DOI 10.1145/170036.170072
   Agrawal R., 1994, P INT VLDB C VLDB 94, P487, DOI DOI 10.5555/645920.672836
   Alhaj TA, 2016, PLOS ONE, V11, DOI 10.1371/journal.pone.0166017
   [Anonymous], 2006, 147642006 ISOIEC
   Arunadevi J., 2018, International Journal of Pure and Applied Mathematics, V119, P15977
   Bai A, 2018, IEEE ACCESS, V6, P14389, DOI 10.1109/ACCESS.2017.2788083
   Bakiu E, 2017, 2017 IEEE 25TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW), P182, DOI 10.1109/REW.2017.76
   Ciurumelea A, 2018, PROC IEEE ACM INT C, P317, DOI 10.1145/3183440.3194988
   CLIFF N, 1993, PSYCHOL BULL, V114, P494, DOI 10.1037/0033-2909.114.3.494
   Dhamija A., 2017, International Journal Of Computational Intelligence Research (IJCIR), V13, P559
   Dharmaraajan K, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTER APPLICATIONS (ICACA), P170, DOI 10.1109/ICACA.2016.7887945
   Di Sorbo A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P499, DOI 10.1145/2950290.2950299
   Ding J., 2018, J. Intell. Comput., V9, P93, DOI DOI 10.6025/jic/2018/9/3/93-101
   Ghag KV, 2015, 2015 INTERNATIONAL CONFERENCE ON COMPUTER, COMMUNICATION AND CONTROL (IC4)
   Gurusamy V., 2014, Preprocessing Techniques for Text Mining
   Guzman E, 2015, IEEE INT CONF AUTOM, P771, DOI 10.1109/ASE.2015.88
   Guzman E, 2014, INT REQUIR ENG CONF, P153, DOI 10.1109/RE.2014.6912257
   Han J, 2000, P 2000 ACM SIGMOD IN, P1, DOI DOI 10.1145/342009.335372
   Kazim A., 2017, International Journal of Advanced Research in Computer Science, V8, P15, DOI DOI 10.26483/ijarcs.v8i9.5147
   Li WM, 2001, 2001 IEEE INTERNATIONAL CONFERENCE ON DATA MINING, PROCEEDINGS, P369, DOI 10.1109/ICDM.2001.989541
   Li Y., 2017, P IEEE C COMP VIS PA, V1, P1, DOI [10.1145/3130935, DOI 10.1145/3130935]
   Liu B, 2001, MASSIVE COMP, V2, P591
   Ma B.L. W. H. Y., 1998, Proceedings of the fourth international conference on knowledge discovery and data mining, P24
   Maalej W, 2016, REQUIR ENG, V21, P311, DOI 10.1007/s00766-016-0251-9
   Maalej W, 2015, INT REQUIR ENG CONF, P116, DOI 10.1109/RE.2015.7320414
   Mans Ronny., 2014, Online Proceedings of the BPM Demo Track, P56
   Martens D, 2017, 2017 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMOTION AWARENESS IN SOFTWARE ENGINEERING (SEMOTION 2017), P8, DOI 10.1109/SEmotion.2017.6
   Palomba F, 2018, J SYST SOFTWARE, V137, P143, DOI 10.1016/j.jss.2017.11.043
   Palomba F, 2015, PROC IEEE INT CONF S, P291, DOI 10.1109/ICSM.2015.7332475
   Panichella S., P INT C SOFTW MAINT
   Panichella S, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P1023, DOI 10.1145/2950290.2983938
   Periasamy R, 2017, INT J ADV RES COMPUT, P304
   Pratiwi AI, 2018, APPL COMPUT INTELL S, V2018, DOI 10.1155/2018/1407817
   Shen J, 2017, IEEE ACCESS, V5, P18179, DOI 10.1109/ACCESS.2017.2750489
   Singh B, 2016, 2016 8TH INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE AND COMMUNICATION NETWORKS (CICN), P666, DOI 10.1109/CICN.2016.137
   Thabtah F, 2007, KNOWL ENG REV, V22, P37, DOI 10.1017/S0269888907001026
   Triguero I, 2017, INT J COMPUT INT SYS, V10, P1238
   Umadevi S, 2017, PROCEEDINGS OF 2017 IEEE INTERNATIONAL CONFERENCE ON SIGNAL PROCESSING AND COMMUNICATION (ICSPC'17), P264, DOI 10.1109/CSPC.2017.8305851
   Vijayan VK, 2017, 2017 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI), P1109, DOI 10.1109/ICACCI.2017.8125990
   Villarroel L, 2016, PROC INT CONF SOFTW, P14, DOI 10.1145/2884781.2884818
   Vora S, 2017, 2017 COMPUTING CONFERENCE, P440, DOI 10.1109/SAI.2017.8252136
   Wang HP, 2017, 2017 4TH INTERNATIONAL CONFERENCE ON INFORMATION SCIENCE AND CONTROL ENGINEERING (ICISCE), P682, DOI 10.1109/ICISCE.2017.148
   Williams G, 2017, PROC IEEE ACM INT C, P280, DOI 10.1109/ICSE-C.2017.53
   Williams G, 2017, 2017 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMOTION AWARENESS IN SOFTWARE ENGINEERING (SEMOTION 2017), P2, DOI 10.1109/SEmotion.2017.1
   Yang H, 2015, P INT C SOFTW ENG KN, DOI [10.18293/SEKE2015-063, DOI 10.18293/SEKE2015-063]
   Yin XX, 2003, SIAM PROC S, P331
   Zdravevski E, 2015, IEEE TRUST BIG, P186, DOI 10.1109/Trustcom.2015.580
   Zhou Y., 2020, IEEE T SOFTWARE ENG, V1
NR 48
TC 12
Z9 13
U1 1
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2021
VL 29
IS 3
SI SI
BP 667
EP 703
DI 10.1007/s11219-020-09529-8
EA AUG 2020
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UM3VY
UT WOS:000563632400001
DA 2024-07-18
ER

PT J
AU Oriol, M
   Martínez-Fernández, S
   Behutiye, W
   Farré, C
   Kozik, R
   Seppänen, P
   Vollmer, AM
   Rodríguez, P
   Franch, X
   Aaramaa, S
   Abhervé, A
   Choras, M
   Partanen, J
AF Oriol, Marc
   Martinez-Fernandez, Silverio
   Behutiye, Woubshet
   Farre, Carles
   Kozik, Rafal
   Seppanen, Pertti
   Vollmer, Anna Maria
   Rodriguez, Pilar
   Franch, Xavier
   Aaramaa, Sanja
   Abherve, Antonin
   Choras, Michal
   Partanen, Jari
TI Data-driven and tool-supported elicitation of quality requirements in
   agile companies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Requirements engineering; Data-driven software engineering; Software
   quality; Quality requirements; Non-functional requirements; Quality
   attributes; Agile software development
ID SOFTWARE; INFORMATION
AB Quality requirements (QRs) are a key artifact needed to ensure the quality and success of a software system. Despite their importance, QRs rarely get the same degree of attention as their functional counterpart in agile software development (ASD) projects. Moreover, crucial information that can be obtained from software development repositories (e.g., JIRA, GitHub) is not fully exploited, or is even neglected, in QR elicitation activities. In this work, we present a data-driven tooled approach for the semi-automatic generation and documentation of QRs in the context of ASD. The approach is based on the declaration of thresholds over quality-related issues, whose violation triggers user-defined alerts. These alerts are used to browse a catalog of QR patterns that are presented to the ASD team by means of a dashboard that implements several analysis techniques. Once selected, the patterns generate the QRs, which are documented and stored in the product backlog. The full approach is implemented via a configurable platform. Over the course of 1 year, four companies differing in size and profile followed this approach and deployed the platform in their premises to semi-automatically generate QRs in several projects. We used standardized measurement instruments to elicit the perception of 22 practitioners regarding their use of the tool. The quantitative and qualitative analyses yielded positive results; i.e., the practitioners' perception with regard to the tool's understandability, reliability, usefulness, and relevance was positive. We conclude that the results show potential for future adoption of data-driven elicitation of QRs in agile companies and encourage other practitioners to use the presented tool and adopt it in their companies.
C1 [Oriol, Marc; Martinez-Fernandez, Silverio; Farre, Carles; Franch, Xavier] Univ Politecn Cataluna, Barcelona, Spain.
   [Martinez-Fernandez, Silverio; Vollmer, Anna Maria] Fraunhofer IESE, Kaiserslautern, Germany.
   [Behutiye, Woubshet; Seppanen, Pertti; Rodriguez, Pilar] Univ Oulu, Oulu, Finland.
   [Rodriguez, Pilar] Univ Politecn Madrid, Madrid, Spain.
   [Kozik, Rafal; Choras, Michal] ITTI Sp Zoo, Poznan, Poland.
   [Kozik, Rafal; Abherve, Antonin; Choras, Michal] Univ Sci & Technol, UTP, Bydgoszcz, Poland.
   [Aaramaa, Sanja] NOKIA, Oulu, Finland.
   [Abherve, Antonin] Softeam, Paris, France.
   [Partanen, Jari] Bittium Wireless Ltd, Oulu, Finland.
C3 Universitat Politecnica de Catalunya; University of Oulu; Universidad
   Politecnica de Madrid; Bydgoszcz University of Science & Technology
RP Oriol, M (corresponding author), Univ Politecn Cataluna, Barcelona, Spain.
EM moriol@essi.upc.edu; silverio.martinez@iese.fraunhofer.de;
   woubshet.behutiye@oulu.fi; farre@essi.upc.edu; rkozik@itti.com.pl;
   pertti.seppanen@oulu.fi; anna-maria.vollmer@iese.fraunhofer.de;
   pilar.rodriguez@oulu.fi; franch@essi.upc.edu; sanja.aaramaa@nokia.com;
   antonin.abherve@softeam.fr; mchoras@itti.com.pl;
   jari.partanen@bittium.com
RI Rodriguez, Pilar/HSE-9989-2023; Martínez-Fernández,
   Silverio/P-5615-2014; Behutiye, Woubshet/AAM-6438-2020; Oriol,
   Marc/ABG-2260-2020; Franch, Xavier/A-8588-2008; Farré,
   Carles/A-4062-2008; Rodriguez, Pilar/C-1449-2015
OI Martínez-Fernández, Silverio/0000-0001-9928-133X; Behutiye,
   Woubshet/0000-0002-9015-9941; Oriol, Marc/0000-0003-1928-7024; Farré,
   Carles/0000-0001-5814-3782; Partanen, Jari/0000-0002-4698-2156; Franch,
   Xavier/0000-0001-9733-8830; Seppanen, Pertti/0000-0002-4289-2487; Kozik,
   Rafal/0000-0001-7122-3306; Vollmer, Anna Maria/0000-0002-3563-8253;
   Rodriguez, Pilar/0000-0002-0618-6104
FU European Union [732253]
FX This work is a result of the Q-Rapids project, which has received
   funding from the European Union's Horizon 2020 Research and Innovation
   Programme under grant agreement no. 732253.
CR Abbas N., 2010, P 2010 AG C
   [Anonymous], P INT S EMP SOFTW EN
   Bartsch S, 2011, P 6 INT C AV REL SEC
   Behnamghader P., 2017, P IEEE INT C SOFTW Q
   Behutiye W, 2017, P 18 INT C PROD FOC
   Braun V., 2006, QUAL RES PSYCHOL, V3, P77, DOI [DOI 10.1191/1478088706QP063OA, 10.1191/1478088706qp063oa]
   Brill O., 2011, P IEEE 19 INT REQ EN
   Caivano D, 2018, J SYST SOFTWARE, V144, P143, DOI 10.1016/j.jss.2018.06.026
   Capgemini, 2015, WORLD QUAL REP 2015
   Cronholm S, 2015, LECT NOTES COMPUT SC, V9073, P471, DOI 10.1007/978-3-319-18714-3_40
   Cruzes D. S., 2011, P 2011 INT S EMP SOF
   Cruzes DS, 2015, EMPIR SOFTW ENG, V20, P1634, DOI 10.1007/s10664-014-9326-8
   Daniel J, 2012, PRACTICAL GUIDELINES
   DeLone W. H., 2003, P 35 HAW INT C SYST
   Franch X., 2018, P INT C ADV INF SYST
   Franch X., 2010, P INT WORK C REQ ENG
   Franch X, 2018, SERC TALKS
   Franch X, 2019, P INT C OBJ COMP MOD
   Glinz M, 2007, P IEEE 15 INT REQ EN
   GOODHUE DL, 1995, MIS QUART, V19, P213, DOI 10.2307/249689
   Groen E. C, 2017, P IEEE 25 INT REQ EN
   Guzman L., 2017, P 11 INT S EMP SOFTW
   Guzman L., 2016, P IEEE 24 INT REQ EN
   Krasner Herb, 2018, COST POOR QUALITY SO
   Kurtanovic Z., 2017, P IEEE 25 INT REQ EN
   LIU X, 2017, ACM T INFORM SYST, V35, P1, DOI DOI 10.1145/3015462
   Lopez L., 2018, P INT C ADV INF SYST
   Lu M., 2017, P 21 INT C EV ASS SO
   Maalej W, 2016, IEEE SOFTWARE, V33, P48, DOI 10.1109/MS.2015.153
   Martinez-Fernandez S., 2018, P EUR C SER SOFTW EN
   Martinez-Fernandez S., 2018, P 13 INT WORKSH REAL
   Martínez-Fernández S, 2019, IEEE ACCESS, V7, P68219, DOI 10.1109/ACCESS.2019.2917403
   McKinney V, 2002, INFORM SYST RES, V13, P296, DOI 10.1287/isre.13.3.296.76
   Mendes E, 2018, SOFTWARE QUAL J, V26, P607, DOI 10.1007/s11219-017-9360-z
   Miles M. B., 1984, Qualitative data analysis: An expanded sourcebook
   Nelson RR, 2005, J MANAGE INFORM SYST, V21, P199, DOI 10.1080/07421222.2005.11045823
   Oriol M, 2019, P INT C QUAL INF COM
   Oriol M., 2019, ONLINE RESOURCE, DOI [10.6084/m9.figshare.10308299.v2, DOI 10.6084/M9.FIGSHARE.10308299.V2]
   Palomares C., 2013, P IEEE 21 INT REQ EN
   Peffers K, 2007, J MANAGE INFORM SYST, V24, P45, DOI 10.2753/MIS0742-1222240302
   Pohl K., 2015, REQUIREMENTS ENG FUN, V2nd Editio
   Renault S., 2009, P 3 INT C RES CHALL
   Rodriguez P, 2017, J SYST SOFTWARE, V123, P263, DOI 10.1016/j.jss.2015.12.015
   Schön EM, 2017, COMPUT STAND INTER, V49, P79, DOI 10.1016/j.csi.2016.08.011
   Schwaber Ken., 2004, Agile Project Management With Scrum (Developer Best Practices)
   Spinellis D., 2006, Code Quality: The Open Source Perspective
   Tricentis, 2018, CISC VIS NETW IND GL
   Venkatesh V, 2008, DECISION SCI, V39, P273, DOI 10.1111/j.1540-5915.2008.00192.x
   Wagner S, 2015, SOFTWARE PRODUCT QUA
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Wohlin C., 2012, Experimentation in Software Engineering
   Xu P, 2008, J MANAGE INFORM SYST, V25, P277, DOI 10.2753/MIS0742-1222250308
   Zowghi D, 2005, ENG MANAGING SOFTWAR
NR 53
TC 18
Z9 19
U1 2
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 931
EP 963
DI 10.1007/s11219-020-09509-y
EA MAR 2020
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000520697800001
DA 2024-07-18
ER

PT J
AU Giraldo, FD
   España, S
   Giraldo, WJ
   Pastor, O
   Krogstie, J
AF Giraldo, Faber D.
   Espana, Sergio
   Giraldo, William J.
   Pastor, Oscar
   Krogstie, John
TI A method to evaluate <i>quality</i> of modelling languages based on the
   Zachman reference taxonomy
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality; Model-driven engineering; Information systems; Modelling
   language evaluation; Reference taxonomy; The MMQEF method
ID FRAMEWORK; ONTOLOGY; MANAGEMENT
AB The model-driven engineering (MDE) paradigm promotes the use of conceptual models in information systems (IS) engineering and research. As engineering products, conceptual models must be of high quality, which applies to both conceptual models and the modelling language used to build them. Quality is a growing concern in the MDE field; however, studies such as Giraldo, F.D. et al. Software Quality Journal, pp. 1-66 (2016b) and Goulao, M. et al. Software Quality Journal, pp. 1-33 (2016) demonstrate the divergence in several approaches that are proposed for addressing this topic. Due to the many challenges, divergences, and trends for quality assessment and assurance in the MDE context, one way to perform a quality evaluation process is to use an approach where the applicability and goals of modelling languages (and artifacts) can be compared with respect to the essential principles of the development of IS. We propose using principles from an IS architecture reference (i.e., the Zachman framework) as a taxonomy that is applied on the modelling languages used in information system development in order to perform analytic procedures. We also demonstrate that this taxonomy can be considered as a formal context for the application of the formal concept analysis (FCA) method. This paper derives formal, methodological, and technological requirements for a modelling language quality evaluation method (MMQEF) with the potential to tackle some of the open MDE quality challenges. In addition, a tool that operationalizes the taxonomic evaluation procedure and the FCA analytic method is also presented. In this work, we discuss how this taxonomy supports analytics that are in modelling languages for quality purposes through its management of the semantics.
C1 [Giraldo, Faber D.; Giraldo, William J.] Univ Quindio, SINFOCI Res Grp, Cra 15 Calle 12N, Armenia 630004, Colombia.
   [Espana, Sergio] Univ Utrecht, Dept Informat & Comp Sci, Utrecht, Netherlands.
   [Giraldo, Faber D.; Pastor, Oscar] Univ Politecn Valencia, PROS Res Ctr, Camino Vera S-N, E-46022 Valencia, Spain.
   [Krogstie, John] Norwegian Univ Sci & Technol, Dept Comp & Informat Sci, Trondheim, Norway.
C3 Universidad del Quindio; Utrecht University; Universitat Politecnica de
   Valencia; Norwegian University of Science & Technology (NTNU)
RP Giraldo, FD (corresponding author), Univ Quindio, SINFOCI Res Grp, Cra 15 Calle 12N, Armenia 630004, Colombia.; Giraldo, FD (corresponding author), Univ Politecn Valencia, PROS Res Ctr, Camino Vera S-N, E-46022 Valencia, Spain.
EM fdgiraldo@uniquindio.edu.co; s.espana@uu.nl;
   wjgiraldo@uniquindio.edu.co; opastor@pros.upv.es;
   john.krogstie@idi.ntnu.no
RI Giraldo, Fáber D./Q-1135-2018; España, Sergio/B-1171-2010; Pastor Lopez,
   Oscar/S-4216-2016
OI Giraldo, Fáber D./0000-0002-6111-3055; España,
   Sergio/0000-0001-7343-4270; Pastor Lopez, Oscar/0000-0002-1320-8471;
   Krogstie, John/0000-0003-4830-1876
FU COLCIENCIAS (Colombia) [512-2010]; Generalitat Valenciana Project IDEO
   [PROMETEOII/2014/039]; European Commission [611351]; ERDF
FX F.G. would like to thank COLCIENCIAS (Colombia) for funding this work
   through the COLCIENCIAS Grant call 512-2010. This work has been
   supported by the Generalitat Valenciana Project IDEO
   (PROMETEOII/2014/039), the European Commission FP7 Project CaaS
   (611351), and ERDF structural funds. F.G. would to thank Cesar A. Catano
   and Juan D. Fernandez for their support in the implementation of EMAT
   tool.
CR Aagesen G, 2015, BPMN 2 0 MODELING BU, P219
   [Anonymous], 2014, MDA GUID REV 2 0
   [Anonymous], QUALITY OF MODELS
   [Anonymous], 2011, ISO/IEC TR 29110-5-1-2, DOI DOI 10.1109/IEEESTD.2011.6129467
   [Anonymous], 2003, MDA GUIDE VERSION 1
   [Anonymous], COMMUNICATION ANAL R
   [Anonymous], SOFTWARE QUALITY J
   [Anonymous], 2000, RATIONAL UNIFIED PRO
   Biza I, 2016, ICME-13 TOPICAL SURV, P1, DOI 10.1007/978-3-319-41814-8_1
   da Silva AR, 2015, COMPUT LANG SYST STR, V43, P139, DOI 10.1016/j.cl.2015.06.001
   de Graaf KA, 2014, COMPUT IND, V65, P1053, DOI 10.1016/j.compind.2014.04.006
   de la Vara J. L., 2007, AN WER07 WORKSH ENG, P68
   Espana Cubillo S., 2012, THESIS
   Espana S., 2012 6 INT C RES CHA
   Espana S, 2012, FULL MODEL DRIVEN PR, P701
   Frankel D., 2003, The Zachman Framework and the OMG's Model Driven Architecture
   Ganter B, 1999, CONCEPT LATTICES CON, P17
   Garner B, 1999, INFORM SOFTWARE TECH, V41, P957, DOI 10.1016/S0950-5849(99)00070-1
   Giraldo F. D., 2016, ARXIV160602025 CORR
   Gonzalez A, 2011, SYSTEMATIC DERIVATIO, P246
   Guarino N, 2000, LECT NOTES ARTIF INT, V1937, P97
   Henderson-Sellers B, 2010, LECT NOTES COMPUT SC, V6412, P219, DOI 10.1007/978-3-642-16373-9_16
   Kingston J, 2000, KNOWL-BASED SYST, V13, P121, DOI 10.1016/S0950-7051(00)00053-8
   Kingston J, 2008, EXPERT SYST APPL, V34, P541, DOI 10.1016/j.eswa.2006.09.040
   Laware GW, 2005, DMIN '05: PROCEEDINGS OF THE 2005 INTERNATIONAL CONFERENCE ON DATA MINING, P41
   Martin R., 1999, 522 IND U COMP SCI D
   Mohagheghi P, 2009, INFORM SOFTWARE TECH, V51, P1646, DOI 10.1016/j.infsof.2009.04.004
   Molina AI, 2014, SCI COMPUT PROGRAM, V89, P320, DOI 10.1016/j.scico.2014.02.030
   Moody DL, 2009, IEEE T SOFTWARE ENG, V35, P756, DOI 10.1109/TSE.2009.67
   Muntermann J., 2015, P 21 AM C INF SYST A
   Noran O., 2003, Annual Reviews in Control, V27, P163, DOI 10.1016/j.arcontrol.2003.09.002
   Object and Reference Model Subcommittee of the Architecture Board, 2005, TECHNICAL REPORT
   Olive A., 2001, Advanced Information Systems Engineering. 13th International Conference, CAiSE 2001. Proceedings (Lecture Notes in Computer Science Vol.2068), P417
   Pastor O, 2013, OO METHOD OO SOFTWAR, P139
   Pastor O., 2007, MODEL DRIVEN ARCHITE
   Priss U, 2006, ANNU REV INFORM SCI, V40, P521, DOI 10.1002/aris.1440400120
   Romero JR, 2009, IEEE INT ENTERP DIST, P163, DOI 10.1109/EDOC.2009.23
   Rueda U., 2015, ARXIV150207693 CORR
   Shuman E. A., 2010, P SUMM SIM MULT, P483
   Siau K, 1998, P ANN HICSS, P314, DOI 10.1109/HICSS.1998.648327
   Smith R., 2013, ONTOLOGY EPISTEMOLOG, V44, P241, DOI [10.1007/978-3-642-31140-6_13, DOI 10.1007/978-3-642-31140-6_13]
   SOWA JF, 1992, IBM SYST J, V31, P590, DOI 10.1147/sj.313.0590
   Tang A, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P640, DOI 10.1109/APSEC.2004.2
   Wegmann A, 2008, IEEE INT ENTERP DIST, P3, DOI 10.1109/EDOC.2008.49
   Welty C, 2001, DATA KNOWL ENG, V39, P51, DOI 10.1016/S0169-023X(01)00030-1
   Wolff KarlErich., 1993, STATSOFT, V93, P429
   ZACHMAN JA, 1987, IBM SYST J, V26, P276, DOI 10.1147/sj.263.0276
   Zhao L., 2012, SAC 12, P1723, DOI DOI 10.1145/2245276.2232054
NR 48
TC 4
Z9 4
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1239
EP 1269
DI 10.1007/s11219-018-9434-6
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400011
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Salva, S
   Regainia, L
AF Salva, Sebastien
   Regainia, Loukmen
TI An approach for guiding developers in the choice of security solutions
   and in the generation of concrete test cases
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Security; Security patterns; Attack-defense trees; Test case generation
AB This paper tackles the problems of choosing security solutions and writing concrete security test cases for software, which are two tasks of the software life cycle requiring time, expertise and experience. We propose in this paper a method, based upon the notion of knowledge base, for helping developers devise more secure applications from the threat modelling step up to the testing one. The first stage of the approach consists of the acquisition and integration of publicly available security data into a data store. This one is used to assist developers in the design of attack-defense trees expressing the attacker possibilities to compromise an application and the defenses that may be implemented. These defenses are given under the form of security pattern combinations, a security pattern being a generic and reusable solution to design more secure applications. In the second stage, these trees are used to guide developers in the test case generation. Test verdicts show whether an application is vulnerable to the threats modelled by an ADTree and whether the consequences of the chosen security patterns are observed from the application (a consequence leading to some observable events partly showing that a pattern is correctly implemented). We applied this approach to web applications and evaluated it on 24 participants. The results are very encouraging in terms of the two criteria: comprehensibility and effectiveness.
C1 [Salva, Sebastien] Univ Clermont Auvergne, IUT Clermont Ferrand, F-63000 Clermont Ferrand, France.
   [Regainia, Loukmen] Univ Clermont Auvergne, F-63000 Clermont Ferrand, France.
C3 Universite Clermont Auvergne (UCA); Universite Clermont Auvergne (UCA)
RP Salva, S (corresponding author), Univ Clermont Auvergne, IUT Clermont Ferrand, F-63000 Clermont Ferrand, France.
EM sebastien.salva@uca.fr; loukmen.regainia@uca.fr
CR Aleem A. K., 2012, RELIABILITY SECURITY, P582
   Ariss O. E., 2011, SECURITY, P123
   Bozic J, 2014, IEEE ICST WORKSHOP, P4, DOI 10.1109/ICSTW.2014.58
   Deza MAC, 2017, PLOS ONE, V12, DOI 10.1371/journal.pone.0179242
   Daun M, 2017, ARXIV170804662 CORR
   Salas-Zárate MD, 2015, SCI COMPUT PROGRAM, V102, P1, DOI 10.1016/j.scico.2014.12.004
   Dong J, 2010, INFORM SOFTWARE TECH, V52, P274, DOI 10.1016/j.infsof.2009.10.001
   Fernandez EB, 2008, LECT NOTES COMPUT SC, V4976, P342
   Hamid B., 2012, P 17 EUR C PATT LANG
   Howard M., 2003, Writing Secure Code
   Jhawar R, 2015, IFIP ADV INF COMM TE, V455, P339, DOI 10.1007/978-3-319-18467-8_23
   Kobayashi T, 2015, I SYMP CONSUM ELECTR, P9, DOI 10.1109/ICCE.2015.7066298
   Kordy Barbara, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P173, DOI 10.1007/978-3-642-40196-1_15
   Kordy B., 2012, J LOGIC COMPUT
   Marback A, 2013, SOFTWARE PRACT EXPER, V43, P241, DOI 10.1002/spe.2111
   Marback A, 2009, 2009 ICSE WORKSHOP ON AUTOMATION OF SOFTWARE TEST, P62, DOI 10.1109/IWAST.2009.5069042
   Mitre corporation, 2015, COMM ATT PATT EN CLA
   Morais Anderson, 2009, 2009 International Conference on Computational Science and Engineering (CSE), P690, DOI 10.1109/CSE.2009.206
   OWASP, 2016, OWASP TEST GUID V3 0
   Regaigna L., 2016, 2 INT C ADV TRENDS S
   Regainia L., 2017, SECURITY PATTERN CLA
   Rojas J.M., 2015, Automated Unit Test Generation During Software Development: A Controlled Experiment and Think-aloud Observations, P338
   Salva S, 2017, LECT NOTES COMPUT SC, V10533, P178, DOI 10.1007/978-3-319-67549-7_11
   Schieferdecker I, 2012, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.80.1
   Schumacher Markus., 2003, SECURITY ENG PATTERN
   Shahmehri N, 2012, INFORM SOFTWARE TECH, V54, P997, DOI 10.1016/j.infsof.2012.03.004
   Slavin R., 2017, SECURITY PATTERNS RE
   Torr P, 2005, IEEE SECUR PRIV, V3, P66, DOI 10.1109/MSP.2005.119
   Xu DX, 2012, IEEE T DEPEND SECURE, V9, P526, DOI 10.1109/TDSC.2012.24
   Yoder Jeffrey, 1998, P PLOP 1997, V51, P31
   Yoshizawa M, 2015, 2014 NINTH INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY (ARES), P178, DOI 10.1109/ARES.2014.31
   Yskout K., 2006, SYSTEM SECURITY PATT
   Yskout K, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P292, DOI 10.1109/ICSE.2015.49
NR 33
TC 2
Z9 3
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 675
EP 701
DI 10.1007/s11219-018-9438-2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500008
DA 2024-07-18
ER

PT J
AU Simos, DE
   Bozic, J
   Garn, B
   Leithner, M
   Duan, F
   Kleine, K
   Lei, Y
   Wotawa, F
AF Simos, Dimitris E.
   Bozic, Josip
   Garn, Bernhard
   Leithner, Manuel
   Duan, Feng
   Kleine, Kristoffer
   Lei, Yu
   Wotawa, Franz
TI Testing TLS using planning-based combinatorial methods and execution
   framework
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Combinatorial testing; Security testing; Planning; Security protocols;
   TLS
AB The TLS protocol is the standard for secure Internet communication between two parties. Unfortunately, there have been recently successful attacks like DROWN, ROBOT, or BREACH that indicate the necessity for thoroughly testing TLS implementations. In our research work, we focus on automated test case generation and execution for the TLS security protocol, where the aim is to combine planning with combinatorial methods for providing test cases that ideally also reveal previously unknown attacks. This is made feasible by creating appropriate input parameter models for different messages that can appear in a TLS message sequence. In this paper, we present the resulting test case generation and execution framework together with the corresponding test oracle. Furthermore, we discuss in detail empirical results obtained via testing different TLS implementations.
C1 [Simos, Dimitris E.; Leithner, Manuel; Duan, Feng; Kleine, Kristoffer; Lei, Yu; Wotawa, Franz] SBA Res, A-1040 Vienna, Austria.
   [Bozic, Josip] Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
   [Garn, Bernhard] Univ Texas Arlington, Arlington, TX 76019 USA.
C3 Graz University of Technology; University of Texas System; University of
   Texas Arlington
RP Simos, DE (corresponding author), SBA Res, A-1040 Vienna, Austria.
EM dsimos@sba-research.org; jbozic@ist.tugraz.at; bgarn@sba-research.org;
   mleithner@sba-research.org; feng.duan@mavs.uta.edu;
   kkleine@sba-research.org; ylei@cse.uta.edu; wotawa@ist.tugraz.at
RI Duan, Feng/JUV-4779-2023; Simos, Dimitris/GWV-3053-2022; Lei,
   Yu/IAN-0544-2023
OI Leithner, Manuel/0000-0001-9433-1668; Wotawa, Franz/0000-0002-0462-2283;
   Garn, Bernhard/0000-0001-6084-211X; Simos, Dimitris/0000-0001-8588-1924;
   Bozic, Josip/0000-0001-6086-8846; Duan, Feng/0009-0001-2767-2486
FU Austrian Research Promotion Agency (FFG) [851205]; Austrian COMET
   Program (FFG)
FX The research presented in the paper has been funded in part by the
   Austrian Research Promotion Agency (FFG) under grant 851205 (Security
   ProtocoL Interaction Testing in Practice - SPLIT) and the Austrian COMET
   Program (FFG).
CR AlFardan N., 2012, NETW DISTR SYST SEC
   Berbecaru D, 2007, LECT NOTES COMPUT SC, V4582, P248
   Beurdouche B., 2015, 9 USENIX WORKSH OFF
   Beurdouche B., 2015, P 36 IEEE S SEC PRIV
   Bhargavan K, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23418
   Bhargavan K, 2014, P IEEE S SECUR PRIV, P98, DOI 10.1109/SP.2014.14
   Blum A. L., 1995, IJCAI-95. Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, P1636
   Bozic J., 2017, P IEEE INT C SOFTW T
   Bozic J, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY - COMPANION (QRS-C 2015), P46, DOI 10.1109/QRS-C.2015.19
   Brubaker C, 2014, P IEEE S SECUR PRIV, P114, DOI 10.1109/SP.2014.15
   de Ruiter J, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P193
   Dierks T., 2008, RFC 5246: The transport layer security (TLS) protocol version 1.2
   Dowling B, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1197, DOI 10.1145/2810103.2813653
   Duan F, 2017, IEEE ICST WORKSHOP, P181, DOI 10.1109/ICSTW.2017.37
   Galler S. J., 2010, 1 WORKSH TEST OBJ OR, P30
   Hollenbeck Scott., 2004, Transport layer security protocol compression methods
   Jager T, 2015, LECT NOTES COMPUT SC, V9326, P407, DOI 10.1007/978-3-319-24174-6_21
   Kleine K, 2017, IEEE INT CONF SOFTW, P69, DOI 10.1109/ICST.2017.14
   Krawczyk H, 2013, LECT NOTES COMPUT SC, V8042, P429, DOI 10.1007/978-3-642-40041-4_24
   Kuhn DR, 2015, ADV COMPUT, V99, P1, DOI 10.1016/bs.adcom.2015.05.003
   Kuhn R., 2008, IT PROFESSIONAL, V10
   Lei Y, 2008, SOFTW TEST VERIF REL, V18, P125, DOI 10.1002/stvr.381
   Leitner A., 2005, TECH REP
   Mavrogiannopoulos N., 2012, ACM CCS 12 19 C COMP
   McDermott D., 1998, The AIPS-98 Planning Competition Comitee
   Memon Atif M, 2000, P 13 INT SOFTW INT Q
   Meyer C, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P733
   Morais Anderson, 2009, 2009 International Conference on Computational Science and Engineering (CSE), P690, DOI 10.1109/CSE.2009.206
   Raffelt Harald, 2005, P 10 INT WORKSH FORM, P62, DOI [10.1145/1081180.1081189, DOI 10.1145/1081180.1081189]
   Russell S., 1995, Prentice Hall series in artificial intelligence, V25, P27
   Shmaryahu D., 2017, P 1 INT WORKSH AI SE
   Simos D. E., 2017, P IFIP INT C TEST SO
   Simos DE, 2016, COMPUTER, V49, P80, DOI 10.1109/MC.2016.314
   Somorovsky Juraj, 2016, P 2016 ACM SIGSAC C
   Walz A, 2020, IEEE T DEPEND SECURE, V17, P278, DOI 10.1109/TDSC.2017.2763947
   Wotawa F, 2014, LECT NOTES COMPUT SC, V8763, P48, DOI 10.1007/978-3-662-44857-1_4
   Yadav N., 2017, P 26 INT JOINT C ART
   Yu LB, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P370, DOI 10.1109/ICST.2013.52
   Yu LB, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P242, DOI 10.1109/ICST.2013.35
NR 39
TC 6
Z9 7
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 703
EP 729
DI 10.1007/s11219-018-9412-z
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500009
DA 2024-07-18
ER

PT J
AU Barroca, B
   Amaral, V
   Buchs, D
AF Barroca, Bruno
   Amaral, Vasco
   Buchs, Didier
TI Semantic languages for developing correct language translations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model transformation; Structural operational semantics (SOS); Language
   translation; Bisimulation
AB The development and validation of language translators (e.g. port programs, language preprocessors, high-level software language compilers, etc.) are time-consuming and error-prone: language engineers need to master both the source and target languages' syntactic constructs; and most importantly their semantics. In this paper, we present an innovative approach for developing and validating such language translators based on two languages: With the first, we specify a language translation using a syntax-to-syntax mapping; and with the second, we define the semantics of both of the source and target languages. After showing how such specifications can be combined to validate and generate language translators automatically, we demonstrate the feasibility of the approach on a particular modelling language translation.
C1 [Barroca, Bruno; Amaral, Vasco] Univ Nova Lisboa, Fac Ciencias & Tecnol, Dept Informat, CITI, Lisbon, Portugal.
   [Buchs, Didier] Univ Geneva, Dept Comp Sci, Software Modelling & Verificat Lab, 7 Route Drize,Bat A, CH-1227 Carouge, Switzerland.
C3 Universidade Nova de Lisboa; University of Geneva
RP Barroca, B (corresponding author), Univ Nova Lisboa, Fac Ciencias & Tecnol, Dept Informat, CITI, Lisbon, Portugal.
EM mailbrunob@gmail.com
RI Barroca, Bruno F/F-8579-2015; Amaral, Vasco/A-7031-2010
OI Amaral, Vasco/0000-0003-3791-5151; BARROCA, Bruno/0000-0001-6653-0803
FU CITI [PEst-OE/EEI/UI0527/2011];  [SFRH/BD/38123/2007]; Fundação para a
   Ciência e a Tecnologia [SFRH/BD/38123/2007] Funding Source: FCT
FX The presented work has been developed in the context of the following
   research institution: CITI fund PEst-OE/EEI/UI0527/2011 Centro de
   Informatica e Tecnologias da Informacao (CITI/FCT/UNL) - 2011-2012 and
   the doctoral grant ref. SFRH/BD/38123/2007.
CR Ab Rahim L, 2015, SOFTW SYST MODEL, V14, P1003, DOI 10.1007/s10270-013-0358-0
   Anastasakis K., 2007, ModeVVa'07, P47
   Andova Suzana, 2012, Theory and Practice of Model Transformations. Proceedings 5th International Conference, ICMT 2012, P72, DOI 10.1007/978-3-642-30476-7_5
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Asztalos Mark, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P15, DOI 10.1109/ICST.2010.42
   Barroca B., 2011, P 6 WORKSH MULT MOD
   Barroca B., 2010, P 3 INT C SOFTW LANG
   Biermann E., 2008, MoDELS'08
   Blech J., 2005, FUJABA DAYS 2005, P49
   Blech JO, 2011, FORM METHOD SYST DES, V38, P33, DOI 10.1007/s10703-010-0108-7
   Buttner F., 2012, P 14 INT C FORMAL EN, V7635, P198
   Chlipala A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P93, DOI 10.1145/1706299.1706312
   de Lara J, 2002, LECT NOTES COMPUT SC, V2306, P174
   Diskin Z, 2012, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.93.1
   Falleri JR, 2008, LECT NOTES COMPUT SC, V5301, P326, DOI 10.1007/978-3-540-87875-9_24
   Hostettler S, 2011, FUND INFORM, V113, P229, DOI 10.3233/FI-2011-608
   Kleppe AnnekeG., 2009, SOFTWARE LANGUAGE EN
   Kuster J. M., 2004, ESS 3 UML WORKSH SOF
   Lano K, 2015, FORM ASP COMPUT, V27, P193, DOI 10.1007/s00165-014-0313-z
   Lucio L., 2010, ACM IEEE MODELS 2010
   Marques E., 2012, P 12 WORKSH DOM SPEC
   Mustafiz S., 2012, Proceedings of the 6th International Workshop on Multi-Paradigm Modeling, P13
   Narayanan A., 2008, ECEASST 10
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Stenzel K, 2015, SOFTW SYST MODEL, V14, P981, DOI 10.1007/s10270-013-0351-7
   van Bakel S, 2009, LECT NOTES COMPUT SC, V5710, P84, DOI 10.1007/978-3-642-04081-8_7
   Varro Daniel., 2003, Critical Systems Development workshop in UML03: 6th International Conference on the Unified Modeling Language, LNCS, V2863, P63
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Zhang P., 2003, HDB GRAPH THEORY DIS
NR 30
TC 1
Z9 1
U1 4
U2 23
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 417
EP 453
DI 10.1007/s11219-016-9352-4
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200008
DA 2024-07-18
ER

PT J
AU Kim, D
   Hong, JE
   Chung, L
AF Kim, Doohwan
   Hong, Jang-Eui
   Chung, Lawrence
TI Investigating relationships between functional coupling and the energy
   efficiency of embedded software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Software coupling; Energy consumption; Experimental
   investigation; Design decision
ID SYSTEMS; PROCESSORS
AB Software coupling involves dependencies among pieces of software called modules. Different types of coupling will dictate the manner whereby software modules interact and will result in different approaches to mutual function calls and return values, which can affect software quality attributes. Undoubtedly, coupling has been one of the most critical factors for supporting software modularity because it affects such important software quality attributes as reusability, readability, and maintainability. It is no surprise that coupling can affect energy efficiency. Recently, energy efficiency has increasingly been recognized as a critical software quality attribute, particularly for embedded software, including smartphone applications. Unfortunately, few studies have been conducted to date concerning coupling in developing energy-efficient and modular software, other than general studies on energy consumption and resource overutilization in the context of modularity. In this study, we aim to investigate the relationship between energy consumption and software coupling. In particular, we aim to determine whether it is possible to control energy consumption by applying different types of software coupling and, if so, how this might be done. We have performed a large number of experiments from which we have gained insight, although that insight might not be applicable to all possible types of coupling that are feasible, to help guide software engineers in developing energy-efficient embedded software. From the experimental results, we observe that overall "data" coupling reduces energy consumption when a large amount of data must be passed from one module to another, whereas "common" coupling is preferred when continuous memory references are needed, although energy consumption can also be somewhat dependent upon the operating environment. We describe such insights into the relationship between energy consumption and software coupling.
C1 [Kim, Doohwan; Hong, Jang-Eui] Chungbuk Natl Univ, Dept Comp Sci, 52 Naesungdongro, Cheongju 28644, South Korea.
   [Chung, Lawrence] Univ Texas Dallas, Dept Comp Sci, 800 W Campbell Rd, Richardson, TX 75080 USA.
C3 Chungbuk National University; University of Texas System; University of
   Texas Dallas
RP Hong, JE (corresponding author), Chungbuk Natl Univ, Dept Comp Sci, 52 Naesungdongro, Cheongju 28644, South Korea.
EM dhkim@selab.cbnu.ac.kr; jehong@cbnu.ac.kr; chung@utdallas.edu
FU NRF - MOE, Korea [NRF-2014R1A1A4A01005566]
FX This research was supported by the NRF funded by the MOE, Korea
   (NRF-2014R1A1A4A01005566). The authors also sincerely thank Tom Hill,
   Grace E. Park, and Haan M. Johng, who are the research members of
   Requirement Engineering Lab., UT Dallas, for their generous help in
   finishing this paper.
CR Banerjee KS, 2005, 2005 International Conference on Wireless Networks, Communications and Mobile Computing, Vols 1 and 2, P1136
   Bhattacharya S, 2011, LECT NOTES COMPUT SC, V6813, P408, DOI 10.1007/978-3-642-22655-7_19
   Bhattacharya S, 2011, COMPUTER, V44, P97, DOI 10.1109/MC.2011.293
   Cahtzigiannakis I., 2008, P 27 ACM S PRINC DIS
   Capra E, 2012, INFORM SOFTWARE TECH, V54, P60, DOI 10.1016/j.infsof.2011.07.005
   Chatzigeorgiou A, 2003, INFORM SOFTWARE TECH, V45, P195, DOI 10.1016/S0950-5849(02)00205-7
   Cho SY, 1999, CONF PROC INT SYMP C, P100
   Cong J, 2009, DES AUT TEST EUROPE, P411
   Ebert C, 2009, COMPUTER, V42, P42, DOI 10.1109/MC.2009.118
   Goraczko M, 2008, DES AUT CON, P191
   GRUBBS FE, 1969, TECHNOMETRICS, V11, P1, DOI 10.2307/1266761
   Hamblen JO, 2013, IEEE T EDUC, V56, P121, DOI 10.1109/TE.2012.2227320
   Herczeg Z., 2009, J EMBEDDED COMPUTING, V3, P209, DOI DOI 10.3233/JEC-2009-0093
   Katja H., 2005, P INT C ENG DES
   Kim DH, 2015, SOFTW SYST MODEL, V14, P795, DOI 10.1007/s10270-013-0337-5
   Liguo Yu, 2011, Journal of Computing and Information Technology - CIT, V19, P1, DOI 10.2498/cit.1001353
   Myers G., 1974, Reliable Software Through Composite Design
   Naik K, 2001, MOBILE NETW APPL, V6, P291, DOI 10.1023/A:1011487018981
   Okuma T, 2001, IEEE DES TEST COMPUT, V18, P31, DOI 10.1109/54.914613
   Russell JT, 1998, INTERNATIONAL CONFERENCE ON COMPUTER DESIGN: VLSI IN COMPUTERS AND PROCESSORS, PROCEEDINGS, P328, DOI 10.1109/ICCD.1998.727070
   Singh V, 2013, INT J RF TECHNOL-RES, P3433
   Sinha A, 2003, IEEE T VLSI SYST, V11, P1044, DOI 10.1109/TVLSI.2003.819569
   Sinha A, 2001, DES AUT CON, P220, DOI 10.1109/DAC.2001.935508
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   Stitt G, 2002, ANN IEEE SYM FIELD P, P143, DOI 10.1109/FPGA.2002.1106669
   Sullivan K. J., 2001, Software Engineering Notes, V26, P99, DOI 10.1145/503271.503224
   Tan T. K., 2002, P ISCAS
   Tan TK, 2003, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, PROCEEDINGS, P1046
   TIOBE software, 2014, TIOBE SOFTWARE
   Wong S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P411, DOI 10.1145/1985793.1985850
   Yau S. S., 2004, Proceedings of the 28th Annual International Computer Software and Applications Conference. COMPSAC 2004, P406, DOI 10.1109/CMPSAC.2004.1342871
   YOURDON E, 1979, STRUCTURED DESIGN FU
   Zhu Y, 2011, COMM COM INF SC, V152, P389
NR 33
TC 3
Z9 3
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 491
EP 519
DI 10.1007/s11219-016-9346-2
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GH6AN
UT WOS:000433521200010
DA 2024-07-18
ER

PT J
AU Engström, E
   Petersen, K
   bin Ali, N
   Bjarnason, E
AF Engstrom, Emelie
   Petersen, Kai
   bin Ali, Nauman
   Bjarnason, Elizabeth
TI SERP-test: a taxonomy for supporting industry-academia communication
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Classification; SERP-test; Taxonomy; Methodology;
   Industry relevance; Intervention; Context; Effect target; Scope
ID SOFTWARE; PRINCIPLES
AB This paper presents the construction and evaluation of SERP-test, a taxonomy aimed to improve communication between researchers and practitioners in the area of software testing. SERP-test can be utilized for direct communication in industry academia collaborations. It may also facilitate indirect communication between practitioners adopting software engineering research and researchers who are striving for industry relevance. SERP-test was constructed through a systematic and goal-oriented approach which included literature reviews and interviews with practitioners and researchers. SERP-test was evaluated through an online survey and by utilizing it in an industry-academia collaboration project. SERP-test comprises four facets along which both research contributions and practical challenges may be classified: Intervention, Scope, Effect target and Context constraints. This paper explains the available categories for each of these facets (i.e., their definitions and rationales) and presents examples of categorized entities. Several tasks may benefit from SERP-test, such as formulating research goals from a problem perspective, describing practical challenges in a researchable fashion, analyzing primary studies in a literature review, or identifying relevant points of comparison and generalization of research.
C1 [Engstrom, Emelie; Bjarnason, Elizabeth] Lund Univ, Lund, Sweden.
   [Petersen, Kai; bin Ali, Nauman] Blekinge Inst Technol, Karlskrona, Sweden.
C3 Lund University; Blekinge Institute Technology
RP Engström, E (corresponding author), Lund Univ, Lund, Sweden.
EM emelie.engstrom@cs.lth.se; kai.petersen@bth.se; nauman.ali@bth.se;
   elizabeth.bjarnason@cs.lth
RI Ali, Nauman bin/J-4293-2015; Engström, Emelie/AAG-7808-2019
OI Ali, Nauman bin/0000-0001-7266-5632; Engström,
   Emelie/0000-0001-6736-9425; Bjarnason, Elizabeth/0000-0001-9070-0008;
   Petersen, Kai/0000-0002-1532-8223
FU ELLIIT; Strategic Area for ICT research; Swedish Government;
   Gyllenstierna Krapperup's Foundation; EASE, Industrial Excellence Centre
   for Embedded Applications Software Engineering
FX This work has been supported by ELLIIT, the Strategic Area for ICT
   research, funded by the Swedish Government. Support has also been
   received from the Gyllenstierna Krapperup's Foundation and EASE, the
   Industrial Excellence Centre for Embedded Applications Software
   Engineering.
CR Ali S, 2010, IEEE T SOFTWARE ENG, V36, P742, DOI 10.1109/TSE.2009.52
   Ammann Paul, 2008, Introduction to software testing, V1st
   [Anonymous], 2004, METRICS NEWS
   [Anonymous], 2007, SCANDINAVIAN J INFOR
   [Anonymous], 2012, ART SOFTWARE TESTING, DOI DOI 10.1002/9781119202486
   [Anonymous], 2003, Electron. Notes Theor. Comput. Sci.
   Barbosa E.F., 2006, P 18 INT C SOFTW ENG, V1, P522
   Basili V., 1992, International Conference on Software Engineering, P370, DOI 10.1145/143062.143154
   Basili1 Victor R, 1994, Encyclopedia of Software Eng., V1, P469, DOI DOI 10.1002/0471028959.SOF110
   Bayona-Oré S, 2014, SOFTWARE QUAL J, V22, P21, DOI 10.1007/s11219-012-9190-y
   Bertolino A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P85, DOI 10.1109/FOSE.2007.25
   Bourque Pierre, 2014, SWEBOK: Guide to the Software Engineering Body of Knowledge, V3rd
   Britto R., 2015, KNOWLEDGE CLASSIFICA
   Burnstein I., 2006, Practical Software Testing: A Process-Oriented Approach
   Chakrabarti S, 1997, PROCEEDINGS OF THE TWENTY-THIRD INTERNATIONAL CONFERENCE ON VERY LARGE DATABASES, P446
   Connor AM, 2009, PROCEEDINGS OF THE 2009 SIXTH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, VOLS 1-3, P678, DOI 10.1109/ITNG.2009.134
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   Dias-Neto AC, 2014, IEEE T SOFTWARE ENG, V40, P1025, DOI 10.1109/TSE.2014.2312915
   Dias-Neto AC, 2009, INFORM SOFTWARE TECH, V51, P1487, DOI 10.1016/j.infsof.2009.06.010
   Dyba T, 2005, IEEE SOFTWARE, V22, P58, DOI 10.1109/MS.2005.6
   Engstrom E., 2015, 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), IEEE, 2015, P1, DOI DOI 10.1109/ICSTW.2015
   Engstrom E., 2012, P 2 INT WORKSH EV AS, P15
   Felderer M, 2014, INT J SOFTW TOOLS TE, V16, P559, DOI 10.1007/s10009-014-0332-3
   Ferreira de Souza E., 2013, P SEMINAR ONTOLOGY R, P71
   Ghaisas S, 2013, IEEE-ACM INT WKSP CO, P37, DOI 10.1109/CESI.2013.6618468
   Happel HJ, 2010, COLLABORATIVE SOFTWARE ENGINEERING, P109, DOI 10.1007/978-3-642-10294-3_6
   Hesse W, 2005, P 2 GI WORKSH ENT AP
   ISO/IEC, 2013, INT STAND SOFTW TEST
   ISTQB, 2012, STAND GLOSS TERMS US
   Jain S, 2013, IEEE-ACM INT WKSP CO, P9, DOI 10.1109/CESI.2013.6618463
   Jiwnani K, 2002, PROC IEEE INT CONF S, P194, DOI 10.1109/ICSM.2002.1167766
   Juristo N, 2006, IEEE SOFTWARE, V23, P72, DOI 10.1109/MS.2006.166
   Kitchenham B., 2007, 23 EBSE, DOI DOI 10.1145/1134285.1134500
   Nie CH, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1883612.1883618
   Novak J., 2010, 2010 33rd International Convention on Information and Communication Technology, Electronics and Microelectronics (MIPRO), P418
   Petersen K, 2014, P INT WORKSH LONG TE
   Petersen K, 2009, INT SYMP EMP SOFTWAR, P402
   Reinisch C., 2014, INT WORKSH LONG TERM, P1
   Ruiz F., 2006, ONTOLOGIES SOFTWARE, P49
   Runeson P, 2006, IEEE SOFTWARE, V23, P22, DOI 10.1109/MS.2006.91
   Runeson Per, 2014, P 2014 INT WORKSH LO, P25, DOI [10.1145/2647648.2647652, DOI 10.1145/2647648.2647652]
   Sandberg AB, 2011, IEEE SOFTWARE, V28, P74, DOI 10.1109/MS.2011.49
   Sicilia M., 2005, P 17 INT C SOFTW ENG, P145
   Smite D, 2014, EMPIR SOFTW ENG, V19, P105, DOI 10.1007/s10664-012-9217-9
   Stricker V, 2009, TOWARDS THE FUTURE INTERNET: A EUROPEAN RESEARCH PERSPECTIVE, P345, DOI 10.3233/978-1-60750-007-0-345
   Studer R, 1998, DATA KNOWL ENG, V25, P161, DOI 10.1016/S0169-023X(97)00056-6
   Unterkalmsteiner M, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2523088
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Vegas S, 2009, IEEE T SOFTWARE ENG, V35, P551, DOI 10.1109/TSE.2009.13
   Wohlin C, 2013, IEEE-ACM INT WKSP CO, P43, DOI 10.1109/CESI.2013.6618469
   Wongthongtham P, 2009, IEEE T KNOWL DATA EN, V21, P1205, DOI 10.1109/TKDE.2008.209
   Yu Lian, 2009, P C INF SYST MAN
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
   Zhu H, 2006, P INT COMP SOFTW APP, P145
NR 54
TC 14
Z9 14
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2017
VL 25
IS 4
SI SI
BP 1269
EP 1305
DI 10.1007/s11219-016-9322-x
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FN4KA
UT WOS:000415973100007
DA 2024-07-18
ER

PT J
AU Felderer, M
   Ramler, R
AF Felderer, Michael
   Ramler, Rudolf
TI Risk orientation in software testing processes of small and medium
   enterprises: an exploratory and comparative study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Test process improvement; Test management; Software risk management;
   Software testing; Risk-based testing; System testing; Software quality;
   Multiple case study; Small and medium enterprises; SME
ID PROCESS IMPROVEMENT; PRIORITIZATION; SPICE
AB Risk orientation in testing is an important means to balance quality, time-to-market, and cost of software. Especially for small and medium enterprises (SME) under high competitive and economic pressure, risk orientation can help to focus testing activities on critical areas of a software product. Although several risk-based approaches to testing are available, the topic has so far not been investigated in the context of SME, where risks are often associated with business critical issues. This article fills the gap and explores the state of risk orientation in the testing processes of SME. Furthermore, it compares the state of risk-based testing in SME to the situation in large enterprises. The article is based on a multiple case study conducted with five SME. A previous study on risk-based testing in large enterprises is used as reference for investigating the differences between risk orientation in SME and large enterprises. The findings of our study show that a strong business focus, the use of informal risk concepts, as well as the application of risk knowledge to reduce testing cost and time are key differences of risk-based testing in SME compared to large enterprises.
C1 [Felderer, Michael] Univ Innsbruck, Inst Comp Sci, Qual Engn Res Grp, Innsbruck, Austria.
   [Ramler, Rudolf] Software Competence Ctr Hagenberg, Hagenberg Im Muhlkreis, Austria.
C3 University of Innsbruck; Softwarepark Hagenberg
RP Felderer, M (corresponding author), Univ Innsbruck, Inst Comp Sci, Qual Engn Res Grp, Innsbruck, Austria.
EM michael.felderer@uibk.ac.at; rudolf.ramler@scch.at
RI Felderer, Michael/AAF-4909-2020
OI Ramler, Rudolf/0000-0001-9903-6107
FU research project Smart Testing - Austrian Research Promotion Agency;
   COMET Competence Center program of the Austrian Research Promotion
   Agency; project QE LaB-Living Models for Open Systems - Austrian Federal
   Ministry of Economics (Bundesministerium fur Wirtschaft und Arbeit);
   Austrian Science Fund (FWF) [P26194] Funding Source: Austrian Science
   Fund (FWF)
FX This work has been supported by the research project Smart Testing
   funded by the Austrian Research Promotion Agency (FFG), the COMET
   Competence Center program of the Austrian Research Promotion Agency
   (FFG), and the project QE LaB-Living Models for Open Systems
   (www.qe-lab.at) funded by the Austrian Federal Ministry of Economics
   (Bundesministerium fur Wirtschaft und Arbeit).
CR Ahern D., 2008, CMMI DISTILLED PRACT
   Amland S, 2000, J SYST SOFTWARE, V53, P287, DOI 10.1016/S0164-1212(00)00019-4
   [Anonymous], 2012, STAND GLOSS TERMS US
   Azar J, 2007, IEEE SOFTWARE, V24, P32, DOI 10.1109/MS.2007.30
   Bath G., 2014, Improving the test process
   DORLING A, 1993, SOFTWARE QUAL J, V2, P209, DOI 10.1007/BF00403764
   Erdogan G, 2014, INT J SOFTW TOOLS TE, V16, P627, DOI 10.1007/s10009-014-0330-5
   Felderer M., 2012, PROCESS AUTOMATION S, P159
   Felderer M, 2014, INT J SOFTW TOOLS TE, V16, P609, DOI 10.1007/s10009-014-0328-z
   Felderer M, 2014, INT J SOFTW TOOLS TE, V16, P559, DOI 10.1007/s10009-014-0332-3
   Felderer M, 2013, LECT NOTES BUS INF P, V133, P10
   Felderer M, 2014, LECT NOTES COMPUT SC, V8803, P274, DOI 10.1007/978-3-662-45231-8_19
   Felderer M, 2014, SOFTWARE QUAL J, V22, P543, DOI 10.1007/s11219-013-9226-y
   García I, 2012, J SOFTW-EVOL PROC, V24, P481, DOI 10.1002/smr.504
   Gerrard P., 2002, Risk-Based E-Business Testing
   Gleirscher M, 2014, SOFTWARE QUAL J, V22, P499, DOI 10.1007/s11219-013-9217-z
   Harrold MaryJean., 2000, ICSE 00 P C FUTURE S, P61
   ISO/IEC, 2011, SOFTW ENG LIF PROF V
   ISO/IEC/IEEE, 2013, ISO IEC IEE IN PRESS
   Karlström D, 2005, SOFTW TEST VERIF REL, V15, P145, DOI 10.1002/stvr.317
   Karolak DW., 1995, Software engineering risk management: A just-in-time approach
   Kautz K, 1999, IEEE SOFTWARE, V16, P14, DOI 10.1109/52.754047
   Koomen T., 2006, TMAP NEXT RESULT DRI
   Koomen T., 1999, TEST PROCESS IMPROVE
   Martin D., 2007, 29 INT C SOFTW ENG I
   Martin K, 2007, IEEE SOFTWARE, V24, P46, DOI 10.1109/MS.2007.5
   Mc Caffery F, 2007, IEEE SOFTWARE, V24, P24, DOI 10.1109/MS.2007.3
   Mishra D., 2008, 9 INT C PROD FOC SOF
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Pino FJ, 2010, INFORM SOFTWARE TECH, V52, P1044, DOI 10.1016/j.infsof.2010.04.004
   Redmill F, 2005, SOFTW TEST VERIF REL, V15, P3, DOI 10.1002/stvr.310
   Redmill F, 2004, SOFTW TEST VERIF REL, V14, P3, DOI 10.1002/stvr.288
   Richardson I, 2007, IEEE SOFTWARE, V24, P18, DOI 10.1109/MS.2007.12
   Runeson Per, 2012, Case study research in software engineering: Guidelines and examples
   Sanchez-Gordon M. L., 2015, 15 INT C SOFTW PROC
   Souza Ellen, 2010, Proceedings of the Seventh International Conference on Information Technology: New Generations (ITNG 2010), P1032, DOI 10.1109/ITNG.2010.203
   Souza E., 2009, 10 LAT AM TEST WORKS, P1
   Steiner M, 2012, J SOFTW-EVOL PROC, V24, P471, DOI 10.1002/smr.507
   van Veenendaal E., 2008, TEST MATURITY MODEL
   Yin R. K., 2017, CASE STUDY RES DESIG
   Yoon H, 2011, INT J SOFTW ENG KNOW, V21, P191, DOI 10.1142/S0218194011005220
NR 41
TC 19
Z9 24
U1 0
U2 22
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 519
EP 548
DI 10.1007/s11219-015-9289-z
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400004
DA 2024-07-18
ER

PT J
AU van der Kouwe, E
   Giuffrida, C
   Tanenbaum, AS
AF van der Kouwe, Erik
   Giuffrida, Cristiano
   Tanenbaum, Andrew S.
TI Finding fault with fault injection: an empirical exploration of
   distortion in fault injection experiments
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Fault injection; LLVM; Reliability
AB It has become well established that software will never become bug free, which has spurred research in mechanisms to contain faults and recover from them. Since such mechanisms deal with faults, fault injection is necessary to evaluate their effectiveness. However, little thought has been put into the question whether fault injection experiments faithfully represent the fault model designed by the user. Correspondence with the fault model is crucial to be able to draw strong and general conclusions from experimental results. The aim of this paper is twofold: to make a case for carefully evaluating whether activated faults match the fault model and to gain a better understanding of which parameters affect the deviation of the activated faults from the fault model. To achieve the latter, we instrumented a number of programs with our LLVM-based fault injection framework. We investigated the biases introduced by limited coverage, parts of the program executed more often than others and the nature of the workload. We evaluated the key factors that cause activated faults to deviate from the model and from these results provide recommendations on how to reduce such deviations.
C1 [van der Kouwe, Erik; Giuffrida, Cristiano; Tanenbaum, Andrew S.] Vrije Univ Amsterdam, Fac Sci, Dept Comp Sci, Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP van der Kouwe, E (corresponding author), Vrije Univ Amsterdam, Fac Sci, Dept Comp Sci, Amsterdam, Netherlands.
EM erik@minix3.org; giuffrida@cs.vu.nl; ast@computer.org
RI Giuffrida, Cristiano/GYE-2013-2022
OI Giuffrida, Cristiano/0000-0002-8329-5929; Tanenbaum,
   Andrew/0000-0002-9547-801X
FU European Research Council [227874]; European Research Council (ERC)
   [227874] Funding Source: European Research Council (ERC)
FX This research was supported in part by European Research Council Grant
   227874.
CR [Anonymous], P PAC RIM INT S DEP
   [Anonymous], 1995, P 5 IFIP INT WORK C
   [Anonymous], 2009, Power-law distributions in empirical data
   Arlat J., 1989, FTCS 19 Digest of Papers. The Nineteenth International Symposium on Fault-Tolerant Computing (Cat. No.89CH2754-0), P348, DOI 10.1109/FTCS.1989.105591
   Banabic Radu., 2012, Proceedings of the 7th ACM European Conference on Computer Systems. EuroSys'12, P281
   BARTON JH, 1990, IEEE T COMPUT, V39, P575, DOI 10.1109/12.54853
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Carreira J, 1998, IEEE T SOFTWARE ENG, V24, P125, DOI 10.1109/32.666826
   CHOI GS, 1992, IEEE T COMPUT, V41, P1515, DOI 10.1109/12.214660
   Christmansson J, 1996, DIG PAP INT SYMP FAU, P304, DOI 10.1109/FTCS.1996.534615
   Christmansson J, 1998, NINTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P369, DOI 10.1109/ISSRE.1998.730903
   Cotroneo D, 2012, 2012 NINTH EUROPEAN DEPENDABLE COMPUTING CONFERENCE (EDCC 2012), P162, DOI 10.1109/EDCC.2012.12
   Cukier M, 1999, IEEE T COMPUT, V48, P707, DOI 10.1109/12.780878
   Duraes J, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P329, DOI 10.1109/ISSRE.2002.1173283
   Duraes JA, 2006, IEEE T SOFTWARE ENG, V32, P849, DOI 10.1109/TSE.2006.113
   Gu WN, 2003, 2003 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P459
   Gunawi H.S., 2011, P 8 USENIX C NETWORK, P18
   Gunneflo U., 1989, 19 INT S FAULT TOLER, P340, DOI DOI 10.1109/FTCS.1989.105590
   Herder JN, 2007, I C DEPEND SYS NETWO, P41, DOI 10.1109/DSN.2007.46
   HUDAK J, 1993, IEEE T RELIAB, V42, P190, DOI 10.1109/24.229487
   Jenn E., 1994, Digest of Papers. The Twenty-Fourth International Symposium on Fault-Tolerant Computing (Cat. No.94CH3441-3), P66, DOI 10.1109/FTCS.1994.315656
   Johansson A, 2007, I C DEPEND SYS NETWO, P502, DOI 10.1109/DSN.2007.71
   Johansson A, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P127, DOI 10.1109/ISSRE.2007.23
   Joshi P, 2011, ACM SIGPLAN NOTICES, V46, P171, DOI 10.1145/2076021.2048082
   KANAWATI GA, 1995, IEEE T COMPUT, V44, P248, DOI 10.1109/12.364536
   Kao W., 1994, Proc. of IEEE Workshop on Fault-Tolerant Parallel and Distributed Systems, P252, DOI DOI 10.1109/FTPDS.1994.494497
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Koopman P, 1997, SYM REL DIST SYST, P72, DOI 10.1109/RELDIS.1997.632800
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Madeira H., 1994, Dependable Computing - EDCC-1. First European Dependable Computing Conference Proceedings, P199
   Madeira H, 2000, DSN 2000: INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P417, DOI 10.1109/ICDSN.2000.857571
   Marinescu P. D., 2010, P USENIX ANN TECHN C, P23
   Marinescu PD, 2009, I C DEPEND SYS NETWO, P379, DOI 10.1109/DSN.2009.5270313
   Natella N., 2012, IEEE T SOFTWARE ENG, V99
   Natella R, 2010, I C DEPEND SYS NETWO, P437, DOI 10.1109/DSN.2010.5544282
   Ng WT, 2001, IEEE T COMPUT, V50, P322, DOI 10.1109/12.919278
   Ostrand T. J., 2002, Software Engineering Notes, V27, P55, DOI 10.1145/566171.566181
   SULLIVAN M, 1992, P 1992 INT S FAULT T, P475
   Svenningsson R, 2010, LECT NOTES COMPUT SC, V6351, P210, DOI 10.1007/978-3-642-15651-9_16
   Swift MM, 2006, ACM T COMPUT SYST, V24, P333, DOI 10.1145/1189256.1189257
   Tsai T. K., 1995, Quantitative Evaluation of Computing and Communication Systems. 8th International Conference on Modelling Techniques and Tools for Computer Performance Evaluation Performance Tools '95. 8th GI/ITG Conference on Measuring, Modelling and Evaluating Computing and Communication Systems MMB'95. Proceedings, P26, DOI 10.1007/BFb0024305
   Tsai TK, 1999, IEEE T COMPUT, V48, P1183, DOI 10.1109/12.811108
   VANDERKOUWE E, 2014, 15 IEEE INT S HIGH A, P25, DOI DOI 10.1109/HASE.2014.13
   Zhou F, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P45
NR 44
TC 1
Z9 1
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2016
VL 24
IS 1
SI SI
BP 7
EP 36
DI 10.1007/s11219-014-9261-3
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1VQ
UT WOS:000369006200003
DA 2024-07-18
ER

PT J
AU Abreu, R
   Hofer, B
   Perez, A
   Wotawa, F
AF Abreu, Rui
   Hofer, Birgit
   Perez, Alexandre
   Wotawa, Franz
TI Using constraints to diagnose faulty spreadsheets
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Spreadsheets; Debugging; Constraints
ID LOCALIZATION; PROGRAMS
AB Spreadsheets can be viewed as a highly flexible programming environment for end users. Spreadsheets are widely adopted for decision making and may have a serious economical impact for the business. However, spreadsheets are staggeringly prone to errors. Hence, approaches for aiding the process of pinpointing the faulty cells in a spreadsheet are of great value. We present a constraint-based approach, ConBug, for debugging spreadsheets. The approach takes as input a (faulty) spreadsheet and a test case that reveals the fault and computes a set of diagnosis candidates for the debugging problem. Therefore, we convert the spreadsheet and a test case to a constraint satisfaction problem. We perform an empirical evaluation with 78 spreadsheets from different sources, where we demonstrate that our approach is light-weight and efficient. From our experimental results, we conclude that ConBug helps end users to pinpoint faulty cells.
C1 [Abreu, Rui; Perez, Alexandre] Univ Porto, Dept Informat Engn, P-4100 Oporto, Portugal.
   [Hofer, Birgit; Wotawa, Franz] Graz Univ Technol, Inst Software Technol, A-8010 Graz, Austria.
C3 Universidade do Porto; Graz University of Technology
RP Abreu, R (corresponding author), Univ Porto, Dept Informat Engn, Rua Campo Alegre 823, P-4100 Oporto, Portugal.
EM rui@computer.org; bhofer@ist.tugraz.at; alexandre.perez@fe.up.pt;
   wotawa@ist.tugraz.at
RI Abreu, Rui/K-7048-2019
OI Abreu, Rui/0000-0003-3734-3157; Hofer, Birgit/0000-0001-5144-059X;
   Wotawa, Franz/0000-0002-0462-2283; Perez, Alexandre/0000-0002-5809-0550
FU Foundation for Science and Technology (FCT); Portuguese Ministry of
   Science, Technology and Higher Education (MCTES)
   [PTDC/EIA-CCO/108613/2008]; competence network Softnet Austria II -
   Austrian Federal Ministry of Economy, Family and Youth; province of
   Styria; Steirische Wirtschaftsforderungsgesellschaft mbH; city of Vienna
   of the center for innovation and technology (ZIT); Fundação para a
   Ciência e a Tecnologia [PTDC/EIA-CCO/108613/2008] Funding Source: FCT
FX This work was supported by the Foundation for Science and Technology
   (FCT), of the Portuguese Ministry of Science, Technology and Higher
   Education (MCTES), under Project PTDC/EIA-CCO/108613/2008, and the
   competence network Softnet Austria II (www.soft-net.at, COMET K-Projekt)
   funded by the Austrian Federal Ministry of Economy, Family and Youth
   (bmwfj), the province of Styria, the Steirische
   Wirtschaftsforderungsgesellschaft mbH. (SFG), and the city of Vienna in
   terms of the center for innovation and technology (ZIT).
CR Abraham R, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P165, DOI 10.1109/VLHCC.2004.29
   Abraham R, 2007, J VISUAL LANG COMPUT, V18, P71, DOI 10.1016/j.jvlc.2006.06.001
   Abraham R, 2007, PROC INT CONF SOFTW, P251
   Abraham R, 2009, IEEE T SOFTWARE ENG, V35, P94, DOI 10.1109/TSE.2008.73
   Abreu R., 2012, 3 IEEE INT WORKSH PR
   Abreu R., 2012, 15 IB C SOFTW ENG CI, P1
   Abreu R., P TEST AC IND C PRAC, P89
   Abreu R, 2009, P 2009 ACM S APPL CO, P409, DOI DOI 10.1145/1529282.1529374
   Abreu R, 2009, IEEE INT CONF AUTOM, P88, DOI 10.1109/ASE.2009.25
   Ahmad Y, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P174
   [Anonymous], COMMUNICATION
   [Anonymous], AUTOMATED SOFTWARE E
   [Anonymous], 2010, 9 JOINT C KNOWL BAS
   [Anonymous], 2003, SOFTVIS 03, DOI DOI 10.1145/774833.774851
   [Anonymous], P EUSPRIG 2003 DUBL
   Ceballos R., 2005, SIGSOFT SOFTWARE ENG, V31, DOI [10.1145/1108768.1123070, DOI 10.1145/1108768.1123070]
   Chadwick D, 2001, SOFTWARE QUAL J, V9, P133, DOI 10.1023/A:1016631003750
   Collavizza H., P 13 INT C PRINC PRA, P49
   Cunha Jacome, 2010, Proceedings 2010 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC 2010), P93, DOI 10.1109/VLHCC.2010.22
   Fisher M, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P141, DOI 10.1109/ICSE.2002.1007963
   Fisher Marc, 2005, P 1 WORKSHOP END USE, P1
   Gent IP, 2006, FRONT ARTIF INTEL AP, V141, P98
   Gotlieb A., 1998, Software Engineering Notes, V23, P53, DOI 10.1145/271775.271790
   Gotlieb A, 2000, LECT NOTES ARTIF INT, V1861, P399
   Hermans F., 2013, P INT C SOFTW ENG IC
   Hermans F, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P451, DOI 10.1145/1985793.1985855
   Hofer B, 2013, LECT NOTES COMPUT SC, V7793, P68, DOI 10.1007/978-3-642-37057-1_6
   Ko AJ, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922658
   Mayer W., 2007, THESIS U S AUSTR
   Nica I., 2013, IJCAI IJCAI AAAI 201
   Nica M., 2012, USE MUTATIONS TESTIN
   Panko RR, 1999, J MANAGE INFORM SYST, V16, P159, DOI 10.1080/07421222.1999.11518250
   Peischl B, 2006, IEEE DES TEST COMPUT, V23, P8, DOI 10.1109/MDT.2006.5
   Reichwein J, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P25
   REITER R, 1987, ARTIF INTELL, V32, P57, DOI 10.1016/0004-3702(87)90062-2
   Rothermel K. J., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P230, DOI 10.1109/ICSE.2000.870414
   Ruthruff JR, 2005, J VISUAL LANG COMPUT, V16, P3, DOI 10.1016/j.jvlc.2004.07.001
   Tukiainen M, 2000, P 12 ANN WORKSHOP PS, P247
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Woods S., 1998, Automated Software Engineering, V5, P147, DOI 10.1023/A:1008655230736
   Wotawa F., 2012, J LOGIC ALGEBRIC PRO, V81
   Wotawa F, 2010, LECT NOTES ARTIF INT, V5988, P22, DOI 10.1007/978-3-642-14264-2_3
   Wotawa F, 2008, INFORM-J COMPUT INFO, V32, P359
NR 43
TC 22
Z9 23
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2015
VL 23
IS 2
BP 297
EP 322
DI 10.1007/s11219-014-9236-4
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE2SN
UT WOS:000351667700004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Metsä, J
   Maoz, S
   Katara, M
   Mikkonen, T
AF Metsae, Jani
   Maoz, Shahar
   Katara, Mika
   Mikkonen, Tommi
TI Using aspects for testing of embedded software: experiences from two
   industrial case studies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Aspect-oriented programming; Embedded software; Case
   studies
ID LSCS
AB Aspect-oriented software testing is emerging as an important alternative to conventional procedural and object-oriented testing techniques. This paper reports experiences from two case studies where aspects were used for the testing of embedded software in the context of an industrial application. In the first study, we used code-level aspects for testing non-functional properties. The methodology we used for deriving test aspect code was based on translating high-level requirements into test objectives, which were then implemented using test aspects in AspectC++. In the second study, we used high-level visual scenario-based models for the test specification, test generation, and aspect-based test execution. To specify scenario-based tests, we used a UML2-compliant variant of live sequence charts. To automatically generate test code from the models, a modified version of the S2A Compiler, outputting AspectC++ code, was used. Finally, to examine the results of the tests, we used the Tracer, a prototype tool for model-based trace visualization and exploration. The results of the two case studies show that aspects offer benefits over conventional techniques in the context of testing embedded software; these benefits are discussed in detail. Finally, towards the end of the paper, we also discuss the lessons learned, including the technological and other barriers to the future successful use of aspects in the testing of embedded software in industry.
C1 [Metsae, Jani] Elektrobit Inc, Wireless Syst, Bothell, WA USA.
   [Maoz, Shahar] Tel Aviv Univ, Sch Comp Sci, IL-69978 Tel Aviv, Israel.
   [Katara, Mika; Mikkonen, Tommi] Tampere Univ Technol, Dept Pervas Comp, FIN-33101 Tampere, Finland.
C3 Tel Aviv University; Tampere University
RP Katara, M (corresponding author), Tampere Univ Technol, Dept Pervas Comp, FIN-33101 Tampere, Finland.
EM Jani.Metsa@elektrobit.com; maoz@cs.tau.ac.il; mika.katara@tut.fi;
   tommi.mikkonen@tut.fi
OI Maoz, Shahar/0000-0002-4022-5349
FU Academy of Finland [121012]; European Research Council (ERC) under the
   European Community; Academy of Finland (AKA) [121012] Funding Source:
   Academy of Finland (AKA)
FX The first and the third listed authors acknowledge partial funding from
   the Academy of Finland (grant number 121012). Part of the second listed
   author's work was done while he was with the Weizmann Institute of
   Science, Rehovot, Israel. In addition, the second listed author
   acknowledges partial funding from an Advanced Research Grant awarded to
   David Harel of the Weizmann Institute from the European Research Council
   (ERC) under the European Community's 7th Framework Programme
   (FP7/2007-2013).
CR [Anonymous], 2006, P 14 ACM SIGSOFT INT
   Clarke S, 1999, ACM SIGPLAN NOTICES, V34, P325, DOI 10.1145/320385.320420
   Coelho R., 2006, Proceedings of the International Workshop on Software Engineering for Large-Scale Multi-Agent Systems, P83
   Craig R.D., 2002, SYSTEMATIC SOFTWARE
   D Xu, 2007, P 3 WORKSH TEST ASP, P17
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   Feng YK, 2007, P INT COMP SOFTW APP, P403
   Fewster M., 1999, Software test automation: effective use of test execution tools
   Filman R., 2004, ASPECT ORIENTED SOFT
   Harel D., 2003, COME LETS PLAY SCENA, DOI 10.1007/978-3-642-19029-2
   Harel D, 2008, SOFTW SYST MODEL, V7, P237, DOI 10.1007/s10270-007-0054-z
   IBM Rational, 2012, IBM RAT SOFTW ARCH H
   Janicki M, 2012, SOFTW TEST VERIF REL, V22, P313, DOI 10.1002/stvr.460
   Kaner Cem., 2002, LESSONS LEARNED SOFT
   Kartal Y., 2007, P 22 INT S COMP INF, P1
   Kulesza U., 2005, Conference on Object-Oriented Programming Systems Languages and Applications, Companion to the 20th Annual SIGPLAN Conference on Object-Oriented Programming Systems, Languages, and Applications, P136
   Maoz S., 2012, TRACER WEBSITE
   Maoz S, 2011, SOFTW SYST MODEL, V10, P447, DOI 10.1007/s10270-010-0151-2
   Maoz S, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000804
   Maoz S, 2009, LECT NOTES COMPUT SC, V5795, P301, DOI 10.1007/978-3-642-04425-0_22
   Maoz S, 2009, COMPUTER, V42, P28, DOI 10.1109/MC.2009.336
   Maoz S, 2009, LECT NOTES COMPUT SC, V5421, P109, DOI 10.1007/978-3-642-01648-6_12
   Metsa Jani, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P387, DOI 10.1109/ICST.2008.29
   Metsa J, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P5
   Pesonen J, 2006, LECT NOTES COMPUT SC, V3875, P90
   Pesonen J, 2006, TAIC PART - TESTING: ACADEMIC & INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P147, DOI 10.1109/TAIC-PART.2006.9
   Pezze M., 2008, Software Testing and Analysis: Process, Principles and Techniques
   Rajan Hridesh., 2005, Proceedings of the 4th international conference on Aspectoriented software development, P181, DOI [10.1145/1052898.1052914, DOI 10.1145/1052898.1052914]
   Rashid A, 2002, IEEE JOINT INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P199, DOI 10.1109/ICRE.2002.1048526
   ROOK P, 1986, SOFTWARE ENG J, V1, P7, DOI 10.1049/sej.1986.0003
   Spinczyk O., 2002, CR PIT 02 P 40 INT C, P53
   Stamey John, 2005, J COMPUTING SCI COLL, V20, P47
NR 32
TC 1
Z9 1
U1 1
U2 15
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2014
VL 22
IS 2
SI SI
BP 185
EP 213
DI 10.1007/s11219-012-9193-8
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AF7TM
UT WOS:000334917700003
DA 2024-07-18
ER

PT J
AU Ouedraogo, M
   Savola, RM
   Mouratidis, H
   Preston, D
   Khadraoui, D
   Dubois, E
AF Ouedraogo, Moussa
   Savola, Reijo M.
   Mouratidis, Haralambos
   Preston, David
   Khadraoui, Djamel
   Dubois, Eric
TI Taxonomy of quality metrics for assessing assurance of security
   correctness
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Security verification process; Verification quality; Metrics; Software
   probe quality; Security Assurance; Correctness measurement
ID SOFTWARE; PREDICTION
AB Assurance is commonly considered as "something said or done to inspire confidence" (Webster dictionary). However, the level of confidence inspired from a statement or an action depends on the quality of its source. Similarly, the assurance that the deployed security mechanisms exhibit an appropriate posture depends on the quality of the verification process adopted. This paper presents a novel taxonomy of quality metrics pertinent for gaining assurance in a security verification process. Inspired by the systems security engineering capability maturity model and the common criteria, we introduce five ordinal quality levels for a verification process aimed at probing the correctness of runtime security mechanisms. In addition, we analyse the mapping between the quality levels and different capability levels of the following verification metrics families: coverage, rigour, depth and independence of verification. The quality taxonomy is part of a framework for the Security Assurance of operational systems. These metrics can also be used for gaining assurance in other areas such as legal and safety compliance. Furthermore, the resulting metrics taxonomy could, by identifying appropriate quality security requirements, assist manufacturers of information technology (IT) in developing their products or systems. Additionally, the taxonomy could also empower consumers in IT security product selection to efficaciously and effectively match their organisational needs, while IT security evaluators can use it as a reference point when forming judgments about the quality of a security product. We demonstrate the applicability of the proposed taxonomy through access control examples.
C1 [Ouedraogo, Moussa; Khadraoui, Djamel; Dubois, Eric] Publ Res Ctr Henri Tudor, Serv Sci & Innovat Dept SSI, L-1855 Luxembourg, Luxembourg.
   [Ouedraogo, Moussa; Mouratidis, Haralambos; Preston, David] Univ E London, Sch Architecture Comp & Engn, London E15 4LZ, England.
   [Savola, Reijo M.] VTT Tech Res Ctr Finland, Oulu, Finland.
C3 University of East London; VTT Technical Research Center Finland
RP Ouedraogo, M (corresponding author), Publ Res Ctr Henri Tudor, Serv Sci & Innovat Dept SSI, L-1855 Luxembourg, Luxembourg.
EM moussa.ouedraogo@tudor.lu; reijo.savola@vtt.fi; haris@uel.ac.uk;
   D.Preston@uel.ac.uk; djamel.khadraoui@tudor.lu; eric.dubois@tudor.lu
OI Dubois, Eric/0000-0003-1253-5283; Mouratidis,
   Haralambos/0000-0002-2599-0712
FU TITAN project; national fund of research of the Grand Duchy of
   Luxembourg [C08/iS/21]
FX This work has been supported by the TITAN project and financed by the
   national fund of research of the Grand Duchy of Luxembourg under
   contract C08/iS/21.
CR [Anonymous], 2007, 15939 ISOIEC
   [Anonymous], 2001, NATL I STANDARDS TEC
   [Anonymous], 2006, 155045 ISOIEC
   [Anonymous], 2003, NIST SPECIAL PUBLICA
   [Anonymous], 2006, 15408 ISOIEC
   [Anonymous], 2005, Secure Systems Development with UML
   [Anonymous], 2008, 21827 ISOIEC
   Bagheri E, 2011, SOFTWARE QUAL J, V19, P579, DOI 10.1007/s11219-010-9127-2
   Bellovin SM, 2006, IEEE SECUR PRIV, V4, P96, DOI 10.1109/MSP.2006.101
   Bodeau D., 2001, P WISSRR 2001 WILL V
   BULUT E, 2007, P COMM NETW INF SEC
   Chaula J. A., 2005, P ISSA 2005 NEW KNOW, P1
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Fenton N, 2008, EMPIR SOFTW ENG, V13, P499, DOI 10.1007/s10664-008-9072-x
   Fong Elizabeth, 2010, Proceedings of the 2010 Fourth IEEE International Conference on Secure Software Integration and Reliability Improvement Companion (SSIRI-C 2010), P32, DOI 10.1109/SSIRI-C.2010.18
   Furnell S. M., 2009, Information Security Technical Report, V14, P176, DOI 10.1016/j.istr.2010.04.002
   Goertzel K.M., 2007, Software security assurance: a state-of-art report (sar)
   Goodenough J., 2008, ARGUING SECURITY CRE
   Grunske L, 2008, J SYST SOFTWARE, V81, P1327, DOI 10.1016/j.jss.2007.11.716
   Hecker A, 2009, LECT NOTES COMPUT SC, V5764, P266, DOI 10.1007/978-3-642-04190-7_24
   Hunter R., 2005, LOW ASSURANCE PROTEC
   JANSEN W, 2009, NATL I STANDARDS TEC, V7564
   Jelen GF, 1998, 14TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P333, DOI 10.1109/CSAC.1998.738653
   Julisch K., 2008, P 2008 WORKSHOP NEW, P71
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   Klevinsky T.J., 2002, Hack I.T.: Security Through Penetration Testing
   Lee J, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P130, DOI 10.1109/CMPSAC.2003.1245332
   Liang T, 2006, GCC 2005: FIFTH INTERNATIONAL CONFERENCE ON GRID AND COOPERATIVE COMPUTING, PROCEEDINGS, P395
   LIPOW M, 1982, IEEE T SOFTWARE ENG, V8, P437, DOI 10.1109/TSE.1982.235579
   Manadhata PratyusaK., 2010, IEEE Transactions on Software Engineering
   Marquet B., 2010, P INT S RISK MAN CYB
   Mouratidis H, 2007, INT J SOFTW ENG KNOW, V17, P285, DOI 10.1142/S0218194007003240
   National Aeronautics and Space Administration, 2004, NASASTD87398
   Ouedraogo M., 2011, THESIS U E LONDON EN
   Ouedraogo M, 2012, J SYST SOFTWARE, V85, P193, DOI 10.1016/j.jss.2011.08.013
   Pavlich-Mariscal JA, 2010, COMPUT SECUR, V29, P770, DOI 10.1016/j.cose.2010.03.004
   Payne S.C., 2006, A guide to security metrics
   Pham Nguyen, 2008, Third International Conference on Internet Monitoring and Protection - ICIMP 2008, P152, DOI 10.1109/ICIMP.2008.28
   Rhodes T, 2010, J RES NATL INST STAN, V115, P209, DOI 10.6028/jres.115.013
   Savola R, 2010, INT J COMPUT SCI NET, V10, P230
   Savola RM, 2007, QOP'07: PROCEEDINGS OF THE 2007 ACM WORKSHOP ON QUALITY OF PROTECTION, P28
   Seddigh N., 2004, Proc. of the 2nd Annual Conference on Privacy, Security and Trust (PST 2004), Fredericton, P197
   SHEYNER O, 2004, THESIS CARNEGIE MELL
   Skroch M. J., 2000, P NAT INF SYST SEC C
   Strunk EA, 2008, EXPERT SYST, V25, P9, DOI 10.1111/j.1468-0394.2008.00452.x
   van Lamsweerde A., 2009, REQUIREMENTS ENG SYS
   Vaughn R. B., 2003, P IEEE HICSS 03, P331
   Wiliams J. R., 1995, Proceedings 1995 New Security Paradigms Workshop, P82, DOI 10.1109/NSPW.1995.492347
   WISSRR Workshop on Information Security System Scoring and Ranking, 2001, WORKSH P WILL VA 21
   Wool A, 2004, COMPUTER, V37, P62, DOI 10.1109/MC.2004.2
   Zuccato A, 2006, 2006 IEEE INFORMATION ASSURANCE WORKSHOP, P1
NR 51
TC 13
Z9 17
U1 1
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2013
VL 21
IS 1
BP 67
EP 97
DI 10.1007/s11219-011-9169-0
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074MB
UT WOS:000313815500004
DA 2024-07-18
ER

PT J
AU Chiu, KC
   Ho, JW
   Huang, YS
AF Chiu, Kuei-Chen
   Ho, Jyh-Wen
   Huang, Yeu-Shiang
TI Bayesian updating of optimal release time for software systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Bayesian statistical method; Software release time; Software reliability
   growth model; Software testing/debugging
ID NONHOMOGENEOUS POISSON PROCESSES; RELIABILITY GROWTH; COST MODEL;
   PREDICTION; INFERENCE; WARRANTY
AB In this paper, a Bayesian method dealing with software reliability growth with consideration of the learning effect is proposed to determine an optimal release time for software systems with regard to the testing cost and experts' prior judgments. Such an approach is able to devise an appropriate software-debugging scheme which has the best arrangement of available resources and personnel with a minimal software testing cost when lacking sufficient information for decision making. Past research on software reliability emphasized the estimation of the number of cumulative software errors or the software reliability with respect to a specific time period, yet it neglected the determination of software release time with consideration of the software testing cost, meaning that existing approaches are not entirely practical. Accordingly, the proposed method is concerned with the evaluation of the software testing cost incurred during the testing period based on experts' prior judgments and the software testing data collected within a given duration, and is thus characterized by its practicality as well as meaningfulness with consideration of the learning effect. Finally, a numerical example is given to verify the effectiveness of the proposed approach, and sensitivity and risk analyses are performed on this example.
C1 [Chiu, Kuei-Chen; Ho, Jyh-Wen; Huang, Yeu-Shiang] Natl Cheng Kung Univ, Dept Ind & Informat Management, Tainan 701, Taiwan.
   [Ho, Jyh-Wen] Aletheia Univ, Dept Ind Management & Enterprise Informat, Danshuei Township 251, Taipei County, Taiwan.
C3 National Cheng Kung University; Aletheia University
RP Huang, YS (corresponding author), Natl Cheng Kung Univ, Dept Ind & Informat Management, 1 Univ Rd, Tainan 701, Taiwan.
EM yshuang@mail.ncku.edu.tw
RI Huang, Yeu-Shiang/ABB-1360-2021
OI Huang, Yeu-Shiang/0000-0003-1805-5088
CR Bai CG, 2005, J SYST SOFTWARE, V77, P103, DOI 10.1016/j.jss.2004.11.034
   Bai CG, 2005, J SYST SOFTWARE, V74, P275, DOI 10.1016/j.jss.2004.02.028
   Bunea C, 2005, RELIAB ENG SYST SAFE, V90, P123, DOI 10.1016/j.ress.2004.10.016
   Chiu KC, 2008, RELIAB ENG SYST SAFE, V93, P1410, DOI 10.1016/j.ress.2007.11.004
   Cid JER, 1999, COMPUT STAT DATA AN, V32, P147, DOI 10.1016/S0167-9473(99)00028-6
   de Melo ACV, 2008, EXPERT SYST APPL, V34, P908, DOI 10.1016/j.eswa.2006.10.040
   GOEL AL, 1979, IEEE T RELIAB, V28, P206, DOI 10.1109/TR.1979.5220566
   Huang CY, 2005, J SYST SOFTWARE, V76, P181, DOI 10.1016/j.jss.2004.04.024
   Kuo L, 1997, IEEE T RELIAB, V46, P76, DOI 10.1109/24.589931
   Kuo L, 1996, J AM STAT ASSOC, V91, P763, DOI 10.2307/2291671
   MORAN PAP, 1969, BIOMETRIKA, V56, P627, DOI 10.2307/2334670
   Osaki S., 1984, Stochastic Models in Reliability Theory, P144
   Özekici S, 2003, EUR J OPER RES, V149, P459, DOI 10.1016/S0377-2217(02)00461-7
   Pham H, 1999, IEEE T COMPUT, V48, P71, DOI 10.1109/12.743412
   Pham H, 2003, EUR J OPER RES, V145, P443, DOI 10.1016/S0377-2217(02)00181-9
   Tian L, 2005, J SYST SOFTWARE, V77, P173, DOI 10.1016/j.jss.2004.08.023
   YAMADA S, 1983, IEEE T RELIAB, V32, P475, DOI 10.1109/TR.1983.5221735
   Yamada S., 1991, Journal of Information Processing, V14, P254
   Zhang XM, 1998, IIE TRANS, V30, P1135, DOI 10.1080/07408179808966570
NR 19
TC 18
Z9 18
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2009
VL 17
IS 1
BP 99
EP 120
DI 10.1007/s11219-008-9060-9
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 398AD
UT WOS:000262702700007
DA 2024-07-18
ER

PT J
AU Khoshgoftaar, TM
   Van Hulse, J
AF Khoshgoftaar, Taghi M.
   Van Hulse, Jason
TI Imputation techniques for multivariate missingness in software
   measurement data
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Imputation; Software quality; Missing data; Data quality; Bayesian
   multiple imputation
ID ATTRIBUTE NOISE; QUALITY; LIKELIHOOD
AB The problem of missing values in software measurement data used in empirical analysis has led to the proposal of numerous potential solutions. Imputation procedures, for example, have been proposed to 'fill-in' the missing values with plausible alternatives. We present a comprehensive study of imputation techniques using real-world software measurement datasets. Two different datasets with dramatically different properties were utilized in this study, with the injection of missing values according to three different missingness mechanisms (MCAR, MAR, and NI). We consider the occurrence of missing values in multiple attributes, and compare three procedures, Bayesian multiple imputation, k Nearest Neighbor imputation, and Mean imputation. We also examine the relationship between noise in the dataset and the performance of the imputation techniques, which has not been addressed previously. Our comprehensive experiments demonstrate conclusively that Bayesian multiple imputation is an extremely effective imputation technique.
C1 [Khoshgoftaar, Taghi M.; Van Hulse, Jason] Florida Atlantic Univ, Dept Comp Sci & Engn, Boca Raton, FL 33431 USA.
C3 State University System of Florida; Florida Atlantic University
RP Khoshgoftaar, TM (corresponding author), Florida Atlantic Univ, Dept Comp Sci & Engn, Boca Raton, FL 33431 USA.
EM taghi@cse.fau.edu; jvanhulse@gmail.com
CR Allison PD, 2000, SAGE U PAPERS SERIES
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1998, Practical nonparametric statistics
   Bremaud P., 1999, TEXTS APPL MATH
   Cartwright MH, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P154, DOI 10.1109/METRIC.2003.1232464
   DEMPSTER AP, 1977, J ROY STAT SOC B MET, V39, P1, DOI 10.1111/j.2517-6161.1977.tb01600.x
   EMAM KE, 2000, IEEE T SOFTWARE ENG, V26, P541
   Jönsson P, 2004, 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P108, DOI 10.1109/METRIC.2004.1357895
   Khoshgoftaar TM, 2005, INTELL DATA ANAL, V9, P589, DOI 10.3233/IDA-2005-9606
   Khoshgoftaar TM, 2005, INTELL DATA ANAL, V9, P3, DOI 10.3233/IDA-2005-9102
   Khoshgoftaar TM, 2005, PROCEEDINGS OF THE 2005 IEEE INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION, P211
   Khoshgoftaar TM, 2004, EMPIR SOFTW ENG, V9, P229, DOI 10.1023/B:EMSE.0000027781.18360.9b
   KHOSHGOFTAAR TM, 2006, INT C SOFTW ENG KNOW, P220
   Little R. J. A., 2019, Statistical Analysis with Missing Data, V793
   Myrtveit I, 2001, IEEE T SOFTWARE ENG, V27, P999, DOI 10.1109/32.965340
   Orr K, 1998, COMMUN ACM, V41, P66, DOI 10.1145/269012.269023
   Rahm E., 2000, IEEE Data Eng. Bull, V23, P3, DOI [10.1145/1317331.1317341, DOI 10.1145/1317331.1317341]
   Rubin DonaldB., 1987, MULTIPLE IMPUTATIONS
   Schafer JL., 2000, ANAL INCOMPLETE MULT
   Song QB, 2005, EMPIR SOFTW ENG, V10, P235, DOI 10.1007/s10664-004-6193-8
   Statistical Analysis System (SAS), 2004, SAS STAT US GUID VER
   Strike K, 2001, IEEE T SOFTWARE ENG, V27, P890, DOI 10.1109/32.962560
   TANNER MA, 1987, J AM STAT ASSOC, V82, P528, DOI 10.2307/2289457
   TWALA B, 2005, P 11 IEEE INT SOFTW, P30
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Yuan Y. C., 2000, P 25 ANN SAS US GROU
   Zhong S, 2004, IEEE INTELL SYST, V19, P20, DOI 10.1109/MIS.2004.1274907
   Zhu XQ, 2004, ARTIF INTELL REV, V22, P177, DOI 10.1007/s10462-004-0751-8
NR 28
TC 14
Z9 17
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2008
VL 16
IS 4
BP 563
EP 600
DI 10.1007/s11219-008-9054-7
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 379QY
UT WOS:000261412500006
DA 2024-07-18
ER

PT J
AU Suryn, W
   Laverdière, F
AF Suryn, Witold
   Laverdiere, Francis
TI The applicability analysis of ISO/IEC 9126 series of standards in
   telecom sector:: the example of softswitch category of software
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT Conference on Software Quality Management
CY APR, 2006
CL Southampton, ENGLAND
DE softswitch; internal quality; ISO 9126; quality evaluation; quality of
   telecom software; quality attributes
AB A software application called a softswitch is considered within the telecom industry as critical for the proper operation of most telecommunication systems. This paper presents the results of the research for a solution for methodically evaluating the internal quality of a softswitch dedicated to developers and acquirers alike. The resulting solution is designed in form of a prioritized two-part evaluation grid containing measurements of internal quality attributes of software as defined by the technical report ISO/IEC 9126-3. The elaboration of such a grid had the basic objective of giving developers and acquirers of a softswitch the tool to evaluate its internal quality when being purchased or developed in order to assess its design and code prior to its installation. This document also presents the applied research methodology, the proposed solution and recommendations for its use.
C1 Software & Informat Technol Engn Dept, Ecole Technol Superieure, Montreal, PQ H3C 1H3, Canada.
C3 University of Quebec; Ecole de Technologie Superieure - Canada
RP Suryn, W (corresponding author), Software & Informat Technol Engn Dept, Ecole Technol Superieure, 1100 Notre Dame St W, Montreal, PQ H3C 1H3, Canada.
EM witold.suryn@etsmtl.ca; francis.laverdiere.1@ens.etsmtl.ca
CR *AST, 2006, OP SOURC AST
   BROWN S, 2005, TELECOM IND SWITCHIN
   *ISO IEC, 2003, 9126 ISO IEC
   *ISO IEC, 2004, 9126 ISO IEC
   *ISO IEC, 1999, 14598 ISO IEC
   *ISO IEC, 2001, 9126 ISO IEC
   LEMAY M, 2006, INT S IND EL ISIE200
   *QUEST, 2001, TL9000 QUAL MAN SYST
   SURYN W, 2005, 11 INT C HUM COMP IN
NR 9
TC 2
Z9 2
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2007
VL 15
IS 4
BP 417
EP 448
DI 10.1007/s11219-007-9024-5
PG 32
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 232EK
UT WOS:000251000900006
DA 2024-07-18
ER

PT J
AU Schach, SR
   Adeshiyan, TOS
   Balasubramanian, D
   Madl, G
   Osses, EP
   Singh, S
   Suwanmongkol, K
   Xie, MH
   Feitelson, DG
AF Schach, Stephen R.
   Adeshiyan, Tokunbo O. S.
   Balasubramanian, Daniel
   Madl, Gabor
   Osses, Esteban P.
   Singh, Sameer
   Suwanmongkol, Karlkim
   Xie, Minhui
   Feitelson, Dror G.
TI Common coupling and pointer variables, with application to a Linux case
   study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE common coupling; aliasing; pointer variables; Linux; global variables;
   definition-use analysis
ID MAINTAINABILITY
AB Both common coupling and pointer variables can exert a deleterious effect on the quality of software. The situation is exacerbated when global variables are assigned to pointer variables, that is, when an alias to a global variable is created. When this occurs, the number of global variables increases, and it becomes considerably harder to compute quality metrics correctly. However, unless aliasing is taken into account, variables may incorrectly appear to be unreferenced (neither defined nor used), or to be used without being defined. These ideas are illustrated by means of a case study of common coupling in the Linux kernel.
C1 Vanderbilt Univ, Dept Elect Engn & Comp Sci, Nashville, TN 37235 USA.
C3 Vanderbilt University
RP Schach, SR (corresponding author), Vanderbilt Univ, Dept Elect Engn & Comp Sci, 221 Kirkland Hall, Nashville, TN 37235 USA.
EM srs@vuse.vanderbilt.edu
OI Balasubramanian, Daniel/0000-0002-7531-0594
CR Binkley AB, 1998, PROC INT CONF SOFTW, P452, DOI 10.1109/ICSE.1998.671604
   FEITELSON DG, 2007, IN PRESS J SYST SOFT
   Hollander M., 1973, NONPARAMETRIC STAT M
   JOHNSON J, 2001, PROJECT MANAGEMENT C
   JONES C, 1995, INT THOMSON COMPUTER
   Myers G., 1974, Reliable Software Through Composite Design
   OFFUTT AJ, 1993, J SYST SOFTWARE, V20, P295, DOI 10.1016/0164-1212(93)90072-6
   Rilling J, 2003, PROG COMPREHEN, P115
   Schach S. R., 2002, IEE Proceedings-Software, V149, P18, DOI 10.1049/ip-sen:20020198
   Schach S.R., 2007, Object-Oriented Classical Software Engineering, V7th
   Schach SR, 2003, SOFTWARE QUAL J, V11, P211, DOI 10.1023/A:1025114726917
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   Yu LG, 2004, IEEE T SOFTWARE ENG, V30, P694, DOI 10.1109/TSE.2004.58
   YURDON E, 1979, STRUCTURED DESIGN FU
NR 14
TC 1
Z9 1
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2007
VL 15
IS 1
BP 99
EP 113
DI 10.1007/s11219-006-9005-0
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FD
UT WOS:000243927000007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Rantala, L
   Mäntylä, M
   Lenarduzzi, V
AF Rantala, Leevi
   Mantyla, Mika
   Lenarduzzi, Valentina
TI Keyword-labeled self-admitted technical debt and static code analysis
   have significant relationship but limited overlap
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Self-admitted technical debt; Technical debt; SonarQube; Empirical study
AB Technical debt presents sub-optimal choices made in development, which are beneficial in the short term but not in the long run. Consciously admitted debt, which is marked with a keyword, e.g., TODO, is called keyword-labeled self-admitted technical debt (KL-SATD). KL-SATD can lead to adverse effects in software development, e.g., to a rise in complexity within the developed software. We investigated the relationship between KL-SATD from source code comments and reports from the highly popular industrial program analysis tool SonarQube. The goal was to find which SonarQube metrics and issues are related to KL-SATD introduction and removal and how many KL-SATD in the context of an issue addresses that issue. We performed a study with 33 software repositories. We analyzed the changes in SonarQube reports (sqale index, reliability and security remediation metrics, and SonarQube issues) and the relationship to KL-SATD addition and removal with mixed model analysis. We manually annotated a sample to investigate how many KL-SATD comments are in the context of SonarQube issues and how many address them directly. KL-SATD is associated with a reduction in code maintainability measured with SonarQube's sqale index. KL-SATD removal is associated with an increase in code maintainability (sqale index) and reliability measured with SonarQube's reliability remediation effort. The introduction and removal of KL-SATD have a predominantly relationship with code smells, and not with vulnerabilities and bugs. Manual annotation revealed that 36% of KL-SATD comments are in the context of a SonarQube issue, but only 15% of the comment address an issue. This means that despite of statistical relationship between KL-SATD comments and SonarQube reports there is a large set of KL-SATD comments that are in areas that Sonarqube reports as clean or free of maintainability issues. KL-SATD introduction and removal are connected mainly to code smells, connecting them to maintainability rather than reliability or security. This is reinforced by the relationship with the sqale index, as well as the dominance of code smells in SonarQube issues. Many KL-SATD issues have characteristics going beyond static analysis tools and require future studies extending the capabilities of the current tools. As KL-SATD comments and SonarQube reports appear to have limited overlap, it suggests that they are complementary and both are needed for getting a comprehensive view coverage of code maintainability. The study also presents rules violations developers should be aware of regarding KL-SATD introduction and removal.
C1 [Rantala, Leevi; Lenarduzzi, Valentina] Univ Oulu, M3S ITEE, POB 4500, Oulu 90014, Finland.
   [Mantyla, Mika] Univ Helsinki, Comp Sci Fac Sci, Helsinki, Finland.
C3 University of Oulu; University of Helsinki
RP Rantala, L (corresponding author), Univ Oulu, M3S ITEE, POB 4500, Oulu 90014, Finland.
EM leevi.rantala@oulu.fi; mika.mantyla@helsinki.fi;
   valentina.lenarduzzi@oulu.fi
OI Mantyla, Mika/0000-0002-2841-5879
FU University of Oulu; Oulu University Hospital; Infotech Oulu; Academy of
   Finland [298020, 328058]; Academy of Finland (AKA) [328058] Funding
   Source: Academy of Finland (AKA)
FX Open Access funding provided by University of Oulu (including Oulu
   University Hospital). Open access funding provided by University of Oulu
   including Oulu University Hospital. The authors have been supported by
   Infotech Oulu and Academy of Finland (grants 298020 and 328058).
CR Akaike H, 1973, 2 INT S INF THEOR, P267, DOI [DOI 10.1007/978-1-4612-1694-0_15, 10.1007/978-1-4612-0919-5_38, DOI 10.1007/978-1-4612-0919-5_38]
   Avgeriou P., 2021, IEEE SOFTWARE
   Avgeriou P, 2016, Dagstuhl reports, V6, DOI DOI 10.4230/DAGREP.6.4.110
   Avgeriou P, 2016, IEEE SOFTWARE, V33, P66, DOI 10.1109/MS.2016.13
   Baldassarre MT, 2020, INFORM SOFTWARE TECH, V128, DOI 10.1016/j.infsof.2020.106377
   Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   BASILI VR, 1987, IEEE T SOFTWARE ENG, V13, P1278, DOI 10.1109/TSE.1987.232881
   Bavota G, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P315, DOI [10.1109/MSR.2016.040, 10.1145/2901739.2901742]
   Besker T, 2018, PROC IEEE INT CONF S, P415, DOI 10.1109/ICSME.2018.00051
   Boehm B, 2001, COMPUTER, V34, P135, DOI 10.1109/2.962984
   Cunningham W., 1993, OOPS MESSENGER, V4, P29, DOI DOI 10.1145/157710.157715
   Farias MAD, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P25, DOI 10.1109/MTD.2015.7332621
   DELIMA B, 2022, SOFTW QUAL J, V1, P1
   Digkas G, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P153, DOI 10.1109/SANER.2018.8330205
   Digkas G, 2017, LECT NOTES COMPUT SC, V10475, P51, DOI 10.1007/978-3-319-65831-5_4
   Falessi D, 2017, INT SYMP EMP SOFTWAR, P78, DOI 10.1109/ESEM.2017.14
   Farooq SU., 2013, SOFTWARE ENG INT J, V3, P41
   Flisar J., 2019, IDENTIFICATION SELF, P1
   Guo YP, 2016, EMPIR SOFTW ENG, V21, P159, DOI 10.1007/s10664-014-9351-7
   Huang Q, 2018, EMPIR SOFTW ENG, V23, P418, DOI 10.1007/s10664-017-9522-4
   Iammarino M, 2021, J SYST SOFTWARE, V178, DOI 10.1016/j.jss.2021.110976
   Johnson B, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P672, DOI 10.1109/ICSE.2013.6606613
   KennethP B., 2002, MODEL SELECTION MULT
   Lehman MeirM., 1997, Lecture Notes in Computer Science, V1149, P108
   Lenarduzzi V., 2021, J SYSTEMS SOFTWARE, V171
   Lenarduzzi V, 2020, J SYST SOFTWARE, V169, DOI 10.1016/j.jss.2020.110710
   Lenarduzzi V, 2019, 15TH INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING (PROMISE'19), P2, DOI 10.1145/3345629.3345630
   Lenarduzzi V, 2019, PROCEEDINGS OF THE 3RD ACM SIGSOFT INTERNATIONAL WORKSHOP ON MACHINE LEARNING TECHNIQUES FOR SOFTWARE QUALITY EVALUATION (MALTESQUE '19), P37, DOI 10.1145/3340482.3342747
   Lenarduzzi V, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P501, DOI [10.1109/SANER48275.2020.9054821, 10.1109/saner48275.2020.9054821]
   Leon D, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P442, DOI 10.1109/ISSRE.2003.1251065
   Li YK, 2020, EUROMICRO CONF PROC, P495, DOI 10.1109/SEAA51224.2020.00083
   Li ZY, 2015, J SYST SOFTWARE, V101, P193, DOI 10.1016/j.jss.2014.12.027
   Liu ZB, 2018, 2018 4TH INTERNATIONAL CONFERENCE ON BIG DATA COMPUTING AND COMMUNICATIONS (BIGCOM 2018), P9, DOI 10.1109/BIGCOM.2018.00008
   Maldonado ED, 2017, PROC IEEE INT CONF S, P238, DOI 10.1109/ICSME.2017.8
   Maldonado ED, 2015, 2015 IEEE 7TH INTERNATIONAL WORKSHOP ON MANAGING TECHNICAL DEBT (MTD) PROCEEDINGS, P9, DOI 10.1109/MTD.2015.7332619
   Mäntylä MV, 2013, INFORM SOFTWARE TECH, V55, P986, DOI 10.1016/j.infsof.2012.12.004
   Martini A, 2015, INFORM SOFTWARE TECH, V67, P237, DOI 10.1016/j.infsof.2015.07.005
   Ostrand TJ, 2005, IEEE T SOFTWARE ENG, V31, P340, DOI 10.1109/TSE.2005.49
   Palomba F, 2018, EMPIR SOFTW ENG, V23, P1188, DOI 10.1007/s10664-017-9535-z
   Patton M. Q., 2002, QUALITATIVE RES EVAL
   Potdar A, 2014, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSME.2014.31
   Rantala L, 2020, EUROMICRO CONF PROC, P385, DOI 10.1109/SEAA51224.2020.00069
   Ren XX, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3324916
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Saarimäki N, 2019, EUROMICRO CONF PROC, P317, DOI 10.1109/SEAA.2019.00055
   Saarimäki N, 2019, 2019 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT 2019), P98, DOI 10.1109/TechDebt.2019.00028
   Seaman C, 2011, ADV COMPUT, V82, P25, DOI 10.1016/B978-0-12-385512-1.00002-5
   Sierra G, 2019, J SYST SOFTWARE, V152, P70, DOI 10.1016/j.jss.2019.02.056
   Tan J, 2020, 2020 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT, TECHDEBT, P11, DOI 10.1145/3387906.3388621
   Tollin I., 2017, 21 INT C EV ASS SOFT, P61
   Valdivia-Garcia H, 2018, J SYST SOFTWARE, V143, P44, DOI 10.1016/j.jss.2018.03.053
   Vassallo C., 2019, EMPIR SOFTW ENG
   Wagner S, 2005, LECT NOTES COMPUT SC, V3502, P40
   Wehaibi S, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P179, DOI 10.1109/SANER.2016.72
   Xavier L, 2020, IEEE WORK CONF MIN S, P137, DOI 10.1145/3379597.3387459
   Zampetti F, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P355, DOI [10.1109/SANER48275.2020.9054868, 10.1109/saner48275.2020.9054868]
   Zampetti F, 2018, IEEE WORK CONF MIN S, P526, DOI 10.1145/3196398.3196423
   Zampetti F, 2017, PROC IEEE INT CONF S, P216, DOI 10.1109/ICSME.2017.44
   Zazworka N., 2013, Proceedings of the 17th International Conference on Evaluation and Assessment in Software Engineering, DOI DOI 10.1145/2460999.2461005.ASSOCIATIONFORCOMPUTINGMACHINERY
NR 59
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2024
VL 32
IS 2
BP 391
EP 429
DI 10.1007/s11219-023-09655-z
EA NOV 2023
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UX1Q1
UT WOS:001101459000001
OA hybrid
DA 2024-07-18
ER

PT J
AU Catillo, M
   Pecchia, A
   Villano, U
AF Catillo, Marta
   Pecchia, Antonio
   Villano, Umberto
TI Successful intrusion detection with a single deep autoencoder: theory
   and practice
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Intrusion detection; Deep learning; Autoencoders; Denial of service
ID FEATURE-SELECTION; NETWORK; DATASET; ATTACKS
AB Intrusion detection is a key topic in computer security. Due to the ever-increasing number of network attacks, several accurate anomaly-based techniques have been proposed for intrusion detection, wherein pattern recognition through machine learning techniques is typically used. Many proposals rely on the use of autoencoders, due to their capability to analyze complex, high-dimensional, and large-scale data. They capitalize on composite architectures and accurate learning approaches, possibly in combination with sophisticated feature selection techniques. However, due to their high complexity and lack of transferability of the impressive intrusion detection results, they are hardly ever used in production environments. This paper is developed around the intuition that complexity is not necessarily justified because a single autoencoder is enough to obtain similar, if not better, intrusion detection results compared to related proposals. The wide study presented here addresses the effect of the seed, a deep investigation on the training loss, and feature selection across the use of different hardware platforms. The best practices presented, regarding set-up and training, threshold setting, and possible use of feature selection techniques for performance improvement, can be valuable for any future work on the use of autoencoders for successful intrusion detection purposes.
C1 [Catillo, Marta; Pecchia, Antonio; Villano, Umberto] Univ Sannio, Dipartimento Ingn, Pal Bosco Lucarelli Cso Garibaldi 107, I-82100 Benevento, Italy.
C3 University of Sannio
RP Catillo, M (corresponding author), Univ Sannio, Dipartimento Ingn, Pal Bosco Lucarelli Cso Garibaldi 107, I-82100 Benevento, Italy.
EM marta.catillo@unisannio.it; antonio.pecchia@unisannio.it;
   villano@unisannio.it
CR Abu Taher K, 2019, 2019 1ST INTERNATIONAL CONFERENCE ON ROBOTICS, ELECTRICAL AND SIGNAL PROCESSING TECHNIQUES (ICREST), P643, DOI [10.1109/ICREST.2019.8644161, 10.1109/icrest.2019.8644161]
   Apruzzese G, 2022, IEEE T NETW SERV MAN, V19, P5152, DOI 10.1109/TNSM.2022.3157344
   Bertoli GD, 2023, COMPUT SECUR, V127, DOI 10.1016/j.cose.2023.103106
   Binbusayyis A, 2020, HELIYON, V6, DOI 10.1016/j.heliyon.2020.e04262
   Cai J, 2018, NEUROCOMPUTING, V300, P70, DOI 10.1016/j.neucom.2017.11.077
   Catillo Marta, 2020, Web, Artificial Intelligence and Network Applications. Proceedings of the Workshops of the 34th International Conference on Advanced Information Networking and Applications (WAINA-2020). Advances in Intelligent Systems and Computing (AISC 1150), P687, DOI 10.1007/978-3-030-44038-1_63
   Catillo M, 2022, COMM COM INF SC, V1621, P223, DOI 10.1007/978-3-031-14179-9_15
   Catillo M, 2022, SOFTWARE QUAL J, V30, P955, DOI 10.1007/s11219-022-09587-0
   Catillo M, 2021, COMPUT SECUR, V108, DOI 10.1016/j.cose.2021.102341
   Catillo M, 2021, I C DEPENDABLE SYST, P1, DOI 10.1109/DSN-W52860.2021.00012
   Catillo M, 2019, J HIGH SPEED NETW, V25, P349, DOI 10.3233/JHS-190620
   Chandrashekar G, 2014, COMPUT ELECTR ENG, V40, P16, DOI 10.1016/j.compeleceng.2013.11.024
   Dina AS, 2021, INTERNET THINGS-NETH, V16, DOI 10.1016/j.iot.2021.100462
   Engelen G, 2021, 2021 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2021), P7, DOI 10.1109/SPW53761.2021.00009
   Jiang JF, 2020, IEEE WIREL COMMUN, V27, P53, DOI 10.1109/MWC.001.1900410
   Kilincer IF, 2021, COMPUT NETW, V188, DOI 10.1016/j.comnet.2021.107840
   KRAMER MA, 1991, AICHE J, V37, P233, DOI 10.1002/aic.690370209
   Kshirsagar Deepak, 2021, ICT Express, V7, P371
   Kunang YN, 2018, 2018 INTERNATIONAL CONFERENCE ON ELECTRICAL ENGINEERING AND COMPUTER SCIENCE (ICECOS), P219, DOI 10.1109/ICECOS.2018.8605181
   Li JD, 2018, ACM COMPUT SURV, V50, DOI 10.1145/3136625
   Li XK, 2020, COMPUT SECUR, V95, DOI 10.1016/j.cose.2020.101851
   Lin WC, 2015, KNOWL-BASED SYST, V78, P13, DOI 10.1016/j.knosys.2015.01.009
   Liu FT, 2008, IEEE DATA MINING, P413, DOI 10.1109/ICDM.2008.17
   Maciá-Fernández G, 2018, COMPUT SECUR, V73, P411, DOI 10.1016/j.cose.2017.11.004
   Maseer ZK, 2021, IEEE ACCESS, V9, P22351, DOI 10.1109/ACCESS.2021.3056614
   Meidan Y, 2018, IEEE PERVAS COMPUT, V17, P12, DOI 10.1109/MPRV.2018.03367731
   Mirsky Y, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23204
   Moustafa N., 2015, MIL COMM INF SYST C, P1, DOI [10.1109/MilCIS.2015.7348942, DOI 10.1109/MIICIS.2015.7348942]
   PANIGRAHI R, 2021, MATHEMATICS-BASEL, V9, DOI DOI 10.3390/math9060690
   Prasad NR, 2009, CMC-COMPUT MATER CON, V14, P1, DOI 10.1145/1541880.1541882
   Ring M, 2019, COMPUT SECUR, V86, P147, DOI 10.1016/j.cose.2019.06.005
   Roesch M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XIII), P229
   Rosay A, 2021, 2021 IEEE/WIC/ACM INTERNATIONAL CONFERENCE ON WEB INTELLIGENCE AND INTELLIGENT AGENT TECHNOLOGY (WI-IAT 2021), P570, DOI 10.1145/3486622.3493973
   Sharawat IK, 2021, PEDIATR EMERG CARE, V37, pE60, DOI 10.1097/PEC.0000000000001555
   Solorio-Fernández S, 2020, ARTIF INTELL REV, V53, P907, DOI 10.1007/s10462-019-09682-y
   Verkerken M, 2022, J NETW SYST MANAG, V30, DOI 10.1007/s10922-021-09615-7
   Vincent P, 2010, J MACH LEARN RES, V11, P3371
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Wu J, 2021, SOFTWARE QUAL J, V29, P405, DOI 10.1007/s11219-021-09553-2
   Zhang YG, 2003, WIREL NETW, V9, P545, DOI 10.1023/A:1024600519144
   Zhong Y, 2020, COMPUT NETW, V169, DOI 10.1016/j.comnet.2019.107049
NR 41
TC 0
Z9 0
U1 2
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 95
EP 123
DI 10.1007/s11219-023-09636-2
EA MAY 2023
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:000994095700001
DA 2024-07-18
ER

PT J
AU Dirim, S
   Özener, OÖ
   Sözer, H
AF Dirim, Sahin
   Ozener, Okan Orsan
   Sozer, Hasan
TI Prioritization and parallel execution of test cases for certification
   testing of embedded systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Certification testing; Test case prioritization; Parallel test
   execution; Test scheduling; Integer linear programming; Industrial case
   study
AB Testing for certification of embedded systems is common in consumer electronics domain. Application vendors provide test suites that have to be repeatedly executed for each product. Multiple test stations can be used in parallel for test execution. Test execution tasks must be prioritized and scheduled such that the overall test execution time is minimized. We present heuristics and an integer linear programming model for this purpose. Many of the existing heuristics and models assume a sequential test execution. Others fall short either in scalability or in finding the optimal solution. We perform an industrial case study to evaluate and compare solution approaches. We measure effectiveness in terms of the rate of fault detection while taking parallel execution and varying test execution times into account. We use certification test suites of 3 Smart TV applications applied on 3 projects as real experimental objects. We compare our results with respect to those obtained with the state-of-the-practice and 3 other previously proposed approaches. Results show that the overall test execution time can be reduced by up to 16% even when only 3 test stations are available. Test effectiveness is also improved by up to 40.7% as a result of optimal scheduling of test cases.
C1 [Dirim, Sahin] Vestel Elect, Manisa, Turkey.
   [Ozener, Okan Orsan; Sozer, Hasan] Ozyegin Univ, Istanbul, Turkey.
C3 Zorlu Holding; Ozyegin University
RP Sözer, H (corresponding author), Ozyegin Univ, Istanbul, Turkey.
EM sahin.dirim@vestel.com.tr; orsan.ozener@ozyegm.edu.tr;
   hasan.sozer@ozyegin.edu.tr
RI Sözer, Hasan/A-4722-2015
OI Sözer, Hasan/0000-0002-2968-4763
CR [Anonymous], INTRO NETFLIX QUALIT
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   Chien-Hung Liu, 2017, 2017 International Conference on Applied System Innovation (ICASI). Proceedings, P199, DOI 10.1109/ICASI.2017.7988384
   Di Nardo D, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P302, DOI 10.1109/ICST.2013.27
   Di Nucci D, 2020, IEEE T SOFTWARE ENG, V46, P674, DOI 10.1109/TSE.2018.2868082
   Dirim S, 2020, IEEE ICST WORKSHOP, P386, DOI 10.1109/ICSTW50294.2020.00069
   ECK BT, 1993, OPER RES, V41, P797, DOI 10.1287/opre.41.4.797
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Elbaum S, 2001, PROC INT CONF SOFTW, P329, DOI 10.1109/ICSE.2001.919106
   Fenton N. E., 1998, Software metrics: a rigorous and practical approach
   Gambi A, 2017, IEEE INT CONF SOFTW, P454, DOI 10.1109/ICST.2017.51
   Garg Deepak., 2013, Proceedings of the Thirty-Sixth Australasian Computer Science Conference-Volume, V135, P61
   Gebizli CS, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY COMPANION (QRS-C 2016), P278, DOI 10.1109/QRS-C.2016.42
   Hao D, 2016, IEEE T SOFTWARE ENG, V42, P490, DOI 10.1109/TSE.2015.2496939
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hilderman V., 2007, AVIONICS CERTIFICATI
   ibm, IBM CPLEX Optimizer
   Islam MM, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P654, DOI 10.1109/ICSM.2012.6405346
   Kazmi R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3057269
   Khalilian A, 2012, SCI COMPUT PROGRAM, V78, P93, DOI 10.1016/j.scico.2012.01.006
   Khatibsyarbini M, 2018, INFORM SOFTWARE TECH, V93, P74, DOI 10.1016/j.infsof.2017.08.014
   LEUNG HKN, 1989, CONFERENCE ON SOFTWARE MAINTENANCE - 1989, PROCEEDINGS, P60
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Lu CY, 2020, IEEE T RELIAB, V69, P1004, DOI 10.1109/TR.2019.2930358
   Marijan D, 2013, PROC IEEE INT CONF S, P540, DOI 10.1109/ICSM.2013.91
   Oriol Manuel, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P434, DOI 10.1109/ICSTW.2010.68
   Özener Ö, 2020, J SYST SOFTWARE, V168, DOI 10.1016/j.jss.2020.110632
   Parveen T, 2009, PROC IEEE INT CONF S, P425, DOI 10.1109/ICSM.2009.5306292
   Qu B, 2008, ISISE 2008: INTERNATIONAL SYMPOSIUM ON INFORMATION SCIENCE AND ENGINEERING, VOL 2, P646, DOI 10.1109/ISISE.2008.106
   Rentmeesters MJ, 1996, SECOND IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS, P76, DOI 10.1109/ICECCS.1996.558386
   Rothermel G, 2001, IEEE T SOFTWARE ENG, V27, P929, DOI 10.1109/32.962562
   Rothermel G, 2002, SOFTW TEST VERIF REL, V12, P219, DOI 10.1002/stvr.256
   Rothermel G., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P179, DOI 10.1109/ICSM.1999.792604
   Shi A, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P84, DOI 10.1145/3213846.3213875
   Shi A, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P246, DOI 10.1145/2635868.2635921
   Srikanth H, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P62, DOI 10.1109/ISESE.2005.1541815
   Srikanth H, 2016, INFORM SOFTWARE TECH, V69, P71, DOI 10.1016/j.infsof.2015.09.002
   von Hof V, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1062, DOI 10.1145/3167132.3167408
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   You D., 2011, P 2011 ACM S APPL CO, P1451
   Zhang LM, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P170, DOI 10.1109/ISSRE.2011.26
   Zykina AV, 2004, AUTOMAT REM CONTR+, V65, P363, DOI 10.1023/B:AURC.0000019366.84601.8e
NR 42
TC 0
Z9 0
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 471
EP 496
DI 10.1007/s11219-022-09594-1
EA JUL 2022
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000828447000001
DA 2024-07-18
ER

PT J
AU Erard, C
   Giorgetti, A
   Ricciardi, J
AF Erard, Clotilde
   Giorgetti, Alain
   Ricciardi, Jerome
TI Towards random and enumerative testing for OCaml and WhyML properties
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Property-based testing; Random testing; Enumerative testing; Deductive
   verification
AB Deductive program verification greatly improves software quality, but proving formal specifications is difficult, and this activity can only be partially automated. It is therefore relevant to supplement deductive verification tools, such as Why3, with the ability to test the properties to be verified. We present a methodological study and a prototype for the random and enumerative testing of properties written either in the Why3 input language WhyML or in the OCaml programming language used by Why3 to run programs written in WhyML. An originality is that we propose enumerative testing based on data generators themselves written in WhyML and formally verified with Why3. Another specificity is that the development effort is reduced by exploiting Why3's extraction mechanism to OCaml and an existing random testing tool for OCaml. These design choices are applied in a prototypal implementation of a tool, called AutoCheck. The prototype and the paper are designed with simplicity and usability in mind, in order to make them accessible to the widest audience. Starting from the most elementary cases, a tutorial illustrates the implemented features with many examples presented in increasing complexity order.
C1 [Erard, Clotilde; Ricciardi, Jerome] Univ Franche Comte, Besancon, France.
   [Giorgetti, Alain] Univ Bourgogne Franche Comte, CNRS, FEMTO ST Inst, Besancon, France.
C3 Universite de Franche-Comte; Universite de Franche-Comte; Centre
   National de la Recherche Scientifique (CNRS); Universite de Technologie
   de Belfort-Montbeliard (UTBM)
RP Giorgetti, A (corresponding author), Univ Bourgogne Franche Comte, CNRS, FEMTO ST Inst, Besancon, France.
EM alain.giorgetti@femto-st.fr
RI Giorgetti, Alain/JSL-7797-2023
FU EIPHI Graduate School [ANR-17-EURE-0002]
FX The authors would like to thank the anonymous referees for their
   relevant suggestions. This work has been supported by the EIPHI Graduate
   School (contract "ANR-17-EURE-0002").
CR Arndt J., 2010, MATTERS COMPUTATIONA
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Beckert B., 2007, Verification of Object-Oriented Software. The KeY Approach, P69
   Blatter L, 2018, LECT NOTES COMPUT SC, V10889, P44, DOI 10.1007/978-3-319-92994-1_3
   Bulwahn Lukas, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P92, DOI 10.1007/978-3-642-35308-6_10
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Correnson L, 2014, LECT NOTES COMPUT SC, V8430, P215, DOI 10.1007/978-3-319-06200-6_17
   DIJKSTRA EW, 1976, SERIES AUTOMATIC COM
   Dubois C, 2018, FORM ASP COMPUT, V30, P659, DOI 10.1007/s00165-018-0459-1
   Dubois C, 2016, LECT NOTES COMPUT SC, V9762, P57, DOI 10.1007/978-3-319-41135-4_4
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Erard C, 2019, LECT NOTES COMPUT SC, V11812, P159, DOI 10.1007/978-3-030-31280-0_10
   Filliatre J. -C., 2016, JOURNEES FRANCOPHONE
   Filliâtre JC, 2016, LECT NOTES COMPUT SC, V9690, P322, DOI 10.1007/978-3-319-40648-0_24
   Fitinghoff N., 2019, THESIS LULEA U TECHN
   Genestier R, 2015, LECT NOTES COMPUT SC, V9154, P109, DOI 10.1007/978-3-319-21215-9_7
   Giorgetti A., 2019, JOURNEES FRANCOPHONE, P139
   Giorgetti A., 2018, AFADL 2018, P14
   Hauzar D, 2016, LECT NOTES COMPUT SC, V9763, P215, DOI 10.1007/978-3-319-41591-8_15
   Herdt V, 2019, DES AUT TEST EUROPE, P360, DOI [10.23919/date.2019.8714912, 10.23919/DATE.2019.8714912]
   Knuth DE, 1997, ART COMPUTER PROGRAM, V2, P145
   Kosmatov N, 2016, LECT NOTES COMPUT SC, V9952, P461, DOI 10.1007/978-3-319-47166-2_32
   Leavens Gary T., 1999, Behavioral Specifications of Businesses and Systems, P175
   Leino K.R.M., 2010, USABLE VERIFICATION
   Midtgaard J, 2017, SOFTW TEST VERIF REL, V27, DOI 10.1002/stvr.1640
   Nelson J., 2017, BLOG POST
   Padhye R, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P398, DOI 10.1145/3293882.3339002
   Pereira M. J. P., 2018, THESIS U PARIS SUD
   Petiot G, 2018, FORM ASP COMPUT, V30, P629, DOI 10.1007/s00165-018-0456-4
   Rebours N., 2019, INTRO FUZZING OCAML
   Reich Jason S., 2013, Implementation and Application of Functional Languages. 24th International Symposium, IFL 2012. Revised Selected Papers: LNCS 8241, P53, DOI 10.1007/978-3-642-41582-1_4
   Rieu-Helft R., 2018, JOURNEES FRANCOPHONE, P203
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
NR 34
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 253
EP 279
DI 10.1007/s11219-021-09572-z
EA FEB 2022
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000759333200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Agh, H
   Ramsin, R
AF Agh, Halimeh
   Ramsin, Raman
TI Scrum metaprocess: a process line approach for customizing Scrum
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Situational Method Engineering; Software Process Line; Scrum Framework;
   Situational Factor; Variability Resolution; Model Transformation
AB Scrum is currently the most widely used agile methodology. However, it is regarded as a framework rather than a concrete process. Unfortunately, the resources available on Scrum do not explicitly define its variable parts and do not offer proper guidance on how to resolve those variabilities. Process (re)configuration is thus left to Scrum Retrospective sessions; this can delay the vital decisions that can significantly improve the process before problems arise. This paper aims to address the problems associated with configuring/reconfiguring Scrum by identifying all the variabilities (variation points) in the Scrum framework, along with the situations where a variation point can be resolved by one or more specific variants. We propose a Software Process Line (SPrL) approach for achieving this: we have represented the process variabilities of Scrum as a Scrum metaprocess, which acts as the core process of a generic SPrL for Scrum. The situations in which each variation point of the metaprocess can be resolved by a specific variant have been identified. The metaprocess has been implemented in the Medini-QVT tool, along with transformation rules that provide the means for automatic resolution of the variabilities. The validity of the metaprocess has been evaluated through an industrial case study, the results of which show that the metaprocess is applicable in real situations. Furthermore, the results indicate that the processes instantiated from the metaprocess can improve the existing processes by proposing specific practices for addressing their shortcomings.
C1 [Agh, Halimeh; Ramsin, Raman] Sharif Univ Technol, Dept Comp Engn, Tehran, Iran.
C3 Sharif University of Technology
RP Ramsin, R (corresponding author), Sharif Univ Technol, Dept Comp Engn, Tehran, Iran.
EM agh@ce.sharif.edu; ramsin@sharif.edu
RI Ramsin, Raman/G-8455-2017
OI Ramsin, Raman/0000-0003-1996-9906
CR Abad ZSH, 2012, STUD COMPUT INTELL, V430, P141
   Agh H., 2019, **DATA OBJECT**, DOI [10.17632/f5dbbsj3p6.1, DOI 10.17632/F5DBBSJ3P6.1]
   Ahmad MO, 2016, P ANN HICSS, P5427, DOI 10.1109/HICSS.2016.670
   Aleixo FA, 2011, LECT NOTES BUS INF P, V73, P372
   Ally M, 2005, LECT NOTES COMPUT SC, V3556, P82
   [Anonymous], 2012, CASE STUDY RES SOFTW, DOI DOI 10.1002/9781118181034
   Hurtado JA, 2013, J SYST SOFTWARE, V86, P1153, DOI 10.1016/j.jss.2012.09.033
   Arisholm E, 2007, IEEE T SOFTWARE ENG, V33, P65, DOI 10.1109/TSE.2007.17
   Campanelli AS, 2015, J SYST SOFTWARE, V110, P85, DOI 10.1016/j.jss.2015.08.035
   CANTY D., 2015, Agile for Project Managers
   Causevic A., 2011, Proceedings 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation (ICST 2011), P337, DOI 10.1109/ICST.2011.19
   Chong J, 2007, PROC INT CONF SOFTW, P354
   Clarke P, 2012, INFORM SOFTWARE TECH, V54, P433, DOI 10.1016/j.infsof.2011.12.003
   Cohn M., 2005, Agile Estimating and Planning
   Cohn Mike., 2010, SUCCEEDING AGILE SOF
   Cram WA, 2019, INFORM SYST MANAGE, V36, P2, DOI 10.1080/10580530.2018.1553645
   Dias de Carvalho D., 2014, 14 SOFTW PROC IMPR C, P118, DOI 10.1007/978-3-319-13036-1_11
   Diebold P, 2015, LECT NOTES BUS INF P, V212, P40, DOI 10.1007/978-3-319-18612-2_4
   Erdogan O, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1933
   Fitzgerald B, 2006, EUR J INFORM SYST, V15, P200, DOI 10.1057/palgrave.ejis.3000605
   Ge X., 2006, P 6 INT C WEB ENG IC, P305
   Golpayegani F, 2013, 2013 IEEE EUROCON, P550, DOI 10.1109/EUROCON.2013.6625035
   Greening D., 2012, BULK ESTIMATION
   Hajratwala Nayan, 2012, Proceedings of the 2012 Agile Conference, P111, DOI 10.1109/Agile.2012.32
   Heeager LT, 2015, EMPIR SOFTW ENG, V20, P1762, DOI 10.1007/s10664-014-9335-7
   Heikkilä VT, 2013, LECT NOTES BUS INF P, V149, P195
   Henderson-Sellers B., 2014, Situational method engineering, DOI DOI 10.1007/978-3-642-41467-1
   Hodgetts P, 2004, PROCEEDINGS OF THE AGILE DEVELOPMENT CONFERENCE, P106
   Hurtado J.A., 2012, P COL COMP C, P1
   Hussain RG., 2015, INT J ENG RES GEN SC, V3, P28
   Ibrahim KSK, 2019, INT CONF ELECT ENG, P146, DOI [10.1109/iceei47359.2019.8988815, 10.1109/ICEEI47359.2019.8988815]
   Jovanovic M., 2015, COMMUNICATIONS COMPU, P287, DOI DOI 10.1007/978-3-319-24647-5_23
   Jyothi V.E., 2012, International Journal on Computer Science and Engineering, V4, P87
   Karlsson F, 2009, EUR J INFORM SYST, V18, P300, DOI 10.1057/ejis.2009.20
   Kaur C., 2015, INT J MODERN COMPUTE, V3, P21
   Kniberg Henrik., 2010, Kanban and Scrum - Making the Most of Both
   Kruchten P, 2013, J SOFTW-EVOL PROC, V25, P351, DOI 10.1002/smr.572
   Larman C., 2008, Scaling Lean and Agile Development: Thinking and Organizational Tools for Large-Scale Scrum
   Law Amy., 2005, P 2005 WORKSHOP HUMA, P1
   Leffingwell D., 2010, Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise
   lLindvall M., 2002, Extreme Programming and Agile Methods - XP/Agile Universe 2002 Second XP Universe and First Agile Universe Conference. Proceedings (Lecture Notes in Computer Science Vol.2418), P197
   Lv Yi, 2011, Proceedings of the 2011 Agile Conference, P151, DOI 10.1109/AGILE.2011.8
   Mahnic V, 2012, J SYST SOFTWARE, V85, P2086, DOI 10.1016/j.jss.2012.04.005
   Marshall S., 2010, ACM SIGPLAN NOTICES, P74, DOI DOI 10.1145/1932682.1869467
   Martínez-Ruiz T, 2011, IET SOFTW, V5, P172, DOI 10.1049/iet-sen.2010.0020
   Maruping LM, 2009, EUR J INFORM SYST, V18, P355, DOI 10.1057/ejis.2009.24
   Masood Z., 2020, REAL WORLD SCRUM GRO
   McKenna Dave:., 2016, The art of scrum: How scrum masters bind dev teams and unleash agility
   O'Donnell MJ, 2008, COMM COM INF SC, V16, P13
   Oliveira EA, 2013, LECT NOTES COMPUT SC, V7983, P169, DOI 10.1007/978-3-642-39259-7_15
   *OMG, 2008, SOFTW SYST PROC ENG
   Paasivaara M, 2012, INT SYMP EMP SOFTWAR, P235, DOI 10.1145/2372251.2372294
   Padberg F, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P166, DOI 10.1109/METRIC.2003.1232465
   Pato RH, 2020, PROC INT CONF SOFTW, P282, DOI 10.1145/3377812.3390904
   Pauly D, 2015, P ANN HICSS, P5074, DOI 10.1109/HICSS.2015.601
   Pessoa M., 2016, P INT C SOFTW PROC I, P57
   Pichler R., 2009, PRODUCT VISION
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Power K., 2014, P INT C AG SOFTW DEV, P1
   Power K, 2011, LECT NOTES BUS INF P, V77, P60
   Proba D., 2019, P AM C INF SYST, P1
   QUMER A., 2006, IADIS International Conference Applied Computing, P503
   Ralyté J, 2003, LECT NOTES COMPUT SC, V2681, P95
   Reddaiah B., 2013, INT J COMPUTER APPL, V65, P16
   Reinertsen G.D., 2009, TYPES PROCESSES
   Reis C.A.L., 2014, P 40 LAT AM COMP C, P1
   Rubin Kenneth S., 2012, Essential Scrum: A practical guide to the most popular Agile process, V1st
   Savoine M.M., 2016, P INT C SOFTW ENG AD, P337
   Schwaber K., 2015, NEXUSTM GUIDE
   Schwaber KenJeff Sutherland., 2017, The Scrum Guide
   Seikola M, 2011, EUROMICRO CONF PROC, P321, DOI 10.1109/SEAA.2011.56
   Shah SMA, 2014, IT PROF, V16, P44, DOI 10.1109/MITP.2013.21
   Simmonds J, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P406, DOI 10.1109/MODELS.2015.7338272
   Sjoberg DIK, 2012, IEEE SOFTWARE, V29, P47, DOI 10.1109/MS.2012.110
   Stankovic D, 2013, J SYST SOFTWARE, V86, P1663, DOI 10.1016/j.jss.2013.02.027
   Sterling C., 2008, AFFINITY ESTIMATING
   Stettina CJ, 2015, INT J PROJ MANAG, V33, P140, DOI 10.1016/j.ijproman.2014.03.008
   Taylor P.S., 2006, 18 INT C SOFTWARE EN, P138
   Tingling P, 2007, LECT NOTES COMPUT SC, V4550, P242
   Uikey Nitin, 2016, International Journal of Business Information Systems, V23, P432
   Warden S., 2007, The Art of Agile Development, V1st
NR 81
TC 2
Z9 3
U1 7
U2 27
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 337
EP 379
DI 10.1007/s11219-021-09551-4
EA APR 2021
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000637671100001
DA 2024-07-18
ER

PT J
AU Koutras, VP
   Platis, AN
AF Koutras, V. P.
   Platis, A. N.
TI On the performance of software rejuvenation models with multiple
   degradation levels
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software aging; Software rejuvenation; Performance capacity;
   Availability; Operational cost; Markov process
ID MULTIOBJECTIVE OPTIMIZATION; PREVENTIVE MAINTENANCE; SYSTEM; RELIABILITY
AB Continuously running software systems suffer from performance degradation due to aging phenomena and resource exhaustion that are mainly due to error conditions accumulation or due to exhaustion of system resources such as the physical memory. To counteract such phenomena, a periodic preemptive rollback to prevent software failures in the future, called software rejuvenation, can be applied. During the past 20 years, software rejuvenation has been extensively studied with the aim to design rejuvenation policies that optimize system availability, reliability, and performance, mainly in terms of operational cost. In this paper, we propose to model software systems' overall performance capacity by assigning a performance capacity level at each of the possible states that it can be in, using a continuous time Markov process. A performance capacity indicator for all possible rejuvenation models incorporating partial, full, or both rejuvenation actions is defined and evaluated in the transient, and the steady state phase and the impact of various rejuvenation policies on it are further examined. Our aim is to distinguish the optimal, in terms of performance, rejuvenation strategy consisting of the type of rejuvenation to be implemented and the rejuvenation interval as well. Multi-objective optimization problems are additionally formulated for deriving the rejuvenation policies that optimize the system's overall performance capacity with respect to availability and operational cost constraints. Numerical examples, in which through comparisons among the rejuvenation models and policies we can distinguish the optimal rejuvenation strategy to be followed, are also presented.
C1 [Koutras, V. P.; Platis, A. N.] Univ Aegean, Sch Engn, Dept Financial & Management Engn, 41 Kountouriotou St, GR-82100 Chios, Greece.
C3 University of Aegean
RP Koutras, VP (corresponding author), Univ Aegean, Sch Engn, Dept Financial & Management Engn, 41 Kountouriotou St, GR-82100 Chios, Greece.
EM v.koutras@fme.aegean.gr; platis@aegean.gr
RI Platis, Agapios/AFW-3013-2022; Koutras, Vasilis/AFP-1742-2022
OI Koutras, Vasilis/0000-0002-9511-6908
CR Avritzer A, 2006, I C DEPEND SYS NETWO, P435, DOI 10.1109/DSN.2006.58
   Bobbio A, 2001, PERFORM EVALUATION, V46, P45, DOI 10.1016/S0166-5316(01)00037-2
   Bosse S, 2016, RELIAB ENG SYST SAFE, V147, P142, DOI 10.1016/j.ress.2015.11.004
   Chen DY, 2002, RELIAB ENG SYST SAFE, V76, P43, DOI 10.1016/S0951-8320(01)00141-7
   Chen DY, 2001, 2001 PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P103, DOI 10.1109/PRDC.2001.992686
   Cotroneo D, 2014, ACM J EMERG TECH COM, V10, DOI 10.1145/2539117
   Dohi T., 2016, Journal of the Operations Research Society of Japan, V59, P270
   Dohi T, 2012, 2012 9TH INTERNATIONAL CONFERENCE ON UBIQUITOUS INTELLIGENCE & COMPUTING AND 9TH INTERNATIONAL CONFERENCE ON AUTONOMIC & TRUSTED COMPUTING (UIC/ATC), P478, DOI 10.1109/UIC-ATC.2012.111
   Fang YY, 2017, IEEE PAC RIM INT SYM, P104, DOI 10.1109/PRDC.2017.23
   Gaorong Ning, 2011, Proceedings of the 2011 IEEE Third International Workshop on Software Aging and Rejuvenation (WoSAR 2011), P32, DOI 10.1109/WoSAR.2011.9
   Grottke M., 2008, 19 INT S SOFTWARE RE, P1, DOI DOI 10.1109/ISSREW.2008.5355512
   Guo CH, 2015, ADV INTELL SYST, V353, P603, DOI 10.1007/978-3-319-16486-1_59
   Houlihan R, 2014, IEEE ICC, P799, DOI 10.1109/ICC.2014.6883417
   Hua XY, 2017, IEEE T COMPUT, V66, P553, DOI 10.1109/TC.2016.2602833
   HUANG YN, 1995, DIG PAP INT SYMP FAU, P381, DOI 10.1109/FTCS.1995.466961
   Jacques-Silva G, 2015, 2015 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P114, DOI 10.1109/ISSREW.2015.7392055
   Jain M, 2014, INT J IND SYST ENG, V19, DOI [10.1504/IJISE.2015.065948, DOI 10.1504/IJISE.2015.065948]
   Jain M, 2016, P NATL A SCI INDIA A, V86, P339, DOI 10.1007/s40010-016-0273-1
   Jian Xu, 2014, Journal of Software, V9, P129, DOI 10.4304/jsw.9.1.129-139
   Khorshidi HA, 2016, APPL STOCH MODEL BUS, V32, P485, DOI 10.1002/asmb.2173
   Koutras V. P., 2011, Proceedings of the 2011 IEEE Third International Workshop on Software Aging and Rejuvenation (WoSAR 2011), P20, DOI 10.1109/WoSAR.2011.14
   Koutras VP, 2011, ADV INTELLIGENT SOFT, P101
   Lapa CMF, 2006, RELIAB ENG SYST SAFE, V91, P233, DOI 10.1016/j.ress.2005.01.004
   Ning GR, 2016, IEEE T RELIAB, V65, P1630, DOI 10.1109/TR.2016.2570539
   Ohara M, 2016, IEEE INT SYMP SOFTW, P104, DOI 10.1109/ISSREW.2016.37
   Okafor EG, 2012, RELIAB ENG SYST SAFE, V103, P61, DOI 10.1016/j.ress.2012.03.014
   Rahme J., 2017, PROC IEEE SMARTWORLD, P1
   Rinsaka K, 2005, IEICE T INF SYST, VE88D, P2681, DOI 10.1093/ietisy/e88-d.12.2681
   Rinsaka K, 2007, LECT NOTES COMPUT SC, V4526, P94
   Sadek A, 2005, J STAT PLAN INFER, V133, P1, DOI 10.1016/j.jspi.2004.03.010
   Torquati M, 2020, J EARTHQ ENG, V24, P1624, DOI 10.1080/13632469.2018.1475311
   Trivedi KS, 2002, LECT NOTES COMPUTER
   Nguyen TA, 2014, SCI WORLD J, DOI 10.1155/2014/165316
   Vaidyanathan K, 2005, IEEE T DEPEND SECURE, V2, P124, DOI 10.1109/TDSC.2005.15
   Vaidyanathan K, 2002, SYM REL DIST SYST, P286, DOI 10.1109/RELDIS.2002.1180199
   Vaidyanathan K., 1999, Proceedings 10th International Symposium on Software Reliability Engineering (Cat. No.PR00443), P84, DOI 10.1109/ISSRE.1999.809313
   Wang DZ, 2007, PERFORM EVALUATION, V64, P247, DOI 10.1016/j.peva.2006.04.002
   Xie W, 2005, RELIAB ENG SYST SAFE, V87, P13, DOI 10.1016/j.ress.2004.02.011
   Zhao J, 2014, IEEE T DEPEND SECURE, V11, P130, DOI 10.1109/TDSC.2013.38
NR 39
TC 5
Z9 5
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2020
VL 28
IS 1
SI SI
BP 135
EP 171
DI 10.1007/s11219-019-09491-0
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LK7CZ
UT WOS:000531021500007
DA 2024-07-18
ER

PT J
AU Fernández-Diego, M
   González-Ladrón-de-Guevara, F
AF Fernandez-Diego, Marta
   Gonzalez-Ladron-de-Guevara, Fernando
TI Application of mutual information-based sequential feature selection to
   ISBSG mixed data
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Feature selection; Mutual information; ISBSG; Software development
   effort estimation; k-nearest neighbor
ID SOFTWARE EFFORT ESTIMATION; GENETIC ALGORITHM; COST ESTIMATION; MOVING
   WINDOWS; CLASSIFICATION; ANALOGY; REGRESSION; RELEVANCE; WEIGHTS;
   IMPROVE
AB There is still little research work focused on feature selection (FS) techniques including both categorical and continuous features in Software Development Effort Estimation (SDEE) literature. This paper addresses the problem of selecting the most relevant features from ISBSG (International Software Benchmarking Standards Group) dataset to be used in SDEE. The aim is to show the usefulness of splitting the ranked list of features provided by a mutual information-based sequential FS approach in two, regarding categorical and continuous features. These lists are later recombined according to the accuracy of a case-based reasoning model. Thus, four FS algorithms are compared using a complete dataset with 621 projects and 12 features from ISBSG. On the one hand, two algorithms just consider the relevance, while the remaining two follow the criterion of maximizing relevance and also minimizing redundancy between any independent feature and the already selected features. On the other hand, the algorithms that do not discriminate between continuous and categorical features consider just one list, whereas those that differentiate them use two lists that are later combined. As a result, the algorithms that use two lists present better performance than those algorithms that use one list. Thus, it is meaningful to consider two different lists of features so that the categorical features may be selected more frequently. We also suggest promoting the usage of Application Group, Project Elapsed Time, and First Data Base System features with preference over the more frequently used Development Type, Language Type, and Development Platform.
C1 [Fernandez-Diego, Marta; Gonzalez-Ladron-de-Guevara, Fernando] Univ Politecn Valencia, Dept Business Org, E-46022 Valencia, Spain.
C3 Universitat Politecnica de Valencia
RP Fernández-Diego, M (corresponding author), Univ Politecn Valencia, Dept Business Org, E-46022 Valencia, Spain.
EM marferdi@omp.upv.es; fgonzal@omp.upv.es
CR Angelis L., 2000, Empirical Software Engineering, V5, P35, DOI 10.1023/A:1009897800559
   [Anonymous], 2015, R LANG ENV STAT COMP
   [Anonymous], 1949, MATH MODEL COMMUNICA
   [Anonymous], FSELECTOR SELECTING
   Auer M, 2006, IEEE T SOFTWARE ENG, V32, P83, DOI 10.1109/TSE.2006.1599418
   Awada W, 2012, 2012 IEEE 13TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION (IRI), P356, DOI 10.1109/IRI.2012.6303031
   BATTITI R, 1994, IEEE T NEURAL NETWOR, V5, P537, DOI 10.1109/72.298224
   Bennasar M, 2015, EXPERT SYST APPL, V42, P8520, DOI 10.1016/j.eswa.2015.07.007
   Bibi S, 2008, EXPERT SYST APPL, V34, P2091, DOI 10.1016/j.eswa.2007.02.012
   Chandrashekar G, 2014, COMPUT ELECTR ENG, V40, P16, DOI 10.1016/j.compeleceng.2013.11.024
   Chatzipetrou P, 2012, EUROMICRO CONF PROC, P367, DOI 10.1109/SEAA.2012.50
   CHEN Z, 2005, ACM SIGSOFT SOFTWARE, V30, P1
   Chiu NH, 2007, J SYST SOFTWARE, V80, P628, DOI 10.1016/j.jss.2006.06.006
   Dash M, 2003, ARTIF INTELL, V151, P155, DOI 10.1016/S0004-3702(03)00079-1
   Dejaeger K, 2012, IEEE T SOFTWARE ENG, V38, P375, DOI 10.1109/TSE.2011.55
   Deng K, 2008, P 12 INT C EV ASS SO, P21
   Doquire G., 2011, INT C KNOWL DISC INF
   DUDANI SA, 1976, IEEE T SYST MAN CYB, V6, P327
   Estévez PA, 2009, IEEE T NEURAL NETWOR, V20, P189, DOI 10.1109/TNN.2008.2005601
   FAYYAD UM, 1993, IJCAI-93, VOLS 1 AND 2, P1022
   Fernández-Diego M, 2014, INFORM SOFTWARE TECH, V56, P527, DOI 10.1016/j.infsof.2014.01.003
   Ferreira A, 2011, LECT NOTES COMPUT SC, V6669, P200
   Fleuret F, 2004, J MACH LEARN RES, V5, P1531
   González-Ladrón-de-Guevara F, 2016, J SYST SOFTWARE, V113, P188, DOI 10.1016/j.jss.2015.11.040
   Guyon I., 2003, Journal of Machine Learning Research, V3, P1157, DOI 10.1162/153244303322753616
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   Hausser J, 2009, J MACH LEARN RES, V10, P1469
   Hill P., 2010, Practical Software Project Estimation
   Hsu HH, 2011, EXPERT SYST APPL, V38, P8144, DOI 10.1016/j.eswa.2010.12.156
   Huang JL, 2015, INFORM SOFTWARE TECH, V67, P108, DOI 10.1016/j.infsof.2015.07.004
   Huang SJ, 2008, INFORM SOFTWARE TECH, V50, P879, DOI 10.1016/j.infsof.2008.02.005
   Huang SJ, 2006, INFORM SOFTWARE TECH, V48, P1034, DOI 10.1016/j.infsof.2005.12.020
   ISBSG, 2013, ISBSG DAT DEM REL 12
   ISBSG, 2013, ISBSG DAT REL 12
   ISBSG, 2013, ISBSG GUID REL 12
   Jeffery R, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P16, DOI 10.1109/METRIC.2001.915512
   Jiang ZZ, 2007, PROC WRLD ACAD SCI E, V19, P160
   Jorgensen M, 2003, J SYST SOFTWARE, V68, P253, DOI 10.1016/S0164-1212(03)00066-9
   Kabir MM, 2011, NEUROCOMPUTING, V74, P2914, DOI 10.1016/j.neucom.2011.03.034
   Kadoda G., 2000, EASE 2000, P2
   Keung J, 2013, AUTOMAT SOFTW ENG, V20, P543, DOI 10.1007/s10515-012-0108-5
   Kirsopp C., 2002, P GEN EV COMP C NEW, P9
   Kohavi R, 1997, ARTIF INTELL, V97, P273, DOI 10.1016/S0004-3702(97)00043-X
   Kwak N, 2002, IEEE T NEURAL NETWOR, V13, P143, DOI 10.1109/72.977291
   La The Vinh, 2010, 2010 10th IEEE/IPSJ International Symposium on Applications and the Internet (SAINT), P395, DOI 10.1109/SAINT.2010.50
   Langdon WB, 2016, INFORM SOFTWARE TECH, V73, P16, DOI 10.1016/j.infsof.2016.01.003
   Li YF, 2009, EXPERT SYST APPL, V36, P5921, DOI 10.1016/j.eswa.2008.07.062
   Liu H, 2005, IEEE T KNOWL DATA EN, V17, P491, DOI 10.1109/TKDE.2005.66
   Liu H., 2012, FEATURE SELECTION KN, V454
   Liu HT, 2013, COMPUT APPL MATH, V32, P145, DOI 10.1007/s40314-013-0019-5
   Lokan C, 2009, IET SOFTW, V3, P422, DOI 10.1049/iet-sen.2008.0107
   Lokan C, 2005, SOFTW METR 2005 11 I, P1, DOI [10. 1109/METRICS. 2005. 55, DOI 10.1109/METRICS.2005.55]
   Lokan C, 2012, ASIA PAC SOFWR ENG, P818, DOI 10.1109/APSEC.2012.74
   Lokan C, 2009, INT SYMP EMP SOFTWAR, P111, DOI 10.1109/ESEM.2009.5316019
   Lustgarten J. L., 2008, Proceedings of the 2008 International Conference on Bioinformatics & Computational Biology, P527
   Mandal M, 2013, PROC TECH, V10, P20, DOI 10.1016/j.protcy.2013.12.332
   Mendes E, 2003, EMPIR SOFTW ENG, V8, P163, DOI 10.1023/A:1023062629183
   Mendes E., 2005, 11 INT S SOFTWARE ME, P10, DOI DOI 10.1109/METRICS.2005.4
   Moses J, 2006, SOFTWARE QUAL J, V14, P37, DOI 10.1007/s11219-006-6000-4
   Núñez H, 2004, ENVIRON MODELL SOFTW, V19, P809, DOI 10.1016/j.envsoft.2003.03.003
   Oh IS, 2004, IEEE T PATTERN ANAL, V26, P1424, DOI 10.1109/TPAMI.2004.105
   Pawan Gupta Pawan Gupta, 2014, International Journal of Social Science and Interdisciplinary Research, V3, P86
   Peng HC, 2005, IEEE T PATTERN ANAL, V27, P1226, DOI 10.1109/TPAMI.2005.159
   Qin Liu, 2014, International Conference on Software Intelligence Technologies and Applications & International Conference on Frontiers of Internet of Things 2014, P62
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   Somol P, 2004, IEEE T PATTERN ANAL, V26, P900, DOI 10.1109/TPAMI.2004.28
   Song QB, 2007, J SYST SOFTWARE, V80, P51, DOI 10.1016/j.jss.2006.05.003
   Top O. O., 2011, 2011 Proceedings of Joint Conf of 21st Int'l Workshop on Software Measurement and the 6th Int'l Conference on Software Process and Product Measurement (IWSM-MENSURA 2011), P302, DOI 10.1109/IWSM-MENSURA.2011.41
   Witten IH, 2011, MOR KAUF D, P1
NR 70
TC 4
Z9 6
U1 1
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1299
EP 1325
DI 10.1007/s11219-017-9391-5
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400004
OA Green Published
DA 2024-07-18
ER

PT J
AU Liu, YL
   Shen, GH
   Huang, ZQ
   Yang, ZB
AF Liu, Yinling
   Shen, Guohua
   Huang, Zhiqiu
   Yang, Zhibin
TI Quantitative risk analysis of safety-critical embedded systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Safety-critical; AADL; Error model; RFMEA
AB Developing safety-critical embedded systems almost always includes a significant emphasis on risk analysis. Risk analysis is still a largely qualitative and manual method of analysis. In this paper, we propose a method for the quantitative analysis method of embedded systems based on the Architecture Analysis and Design Language (AADL) model. First, we extend the Error Model Annex with the RFMEA (Risk-based Failure Mode Effect Analysis) property to express the error effect formally, and then, a risk-based quantitative analysis method is proposed to implement the automatic generation of an RFMEA table. Finally, an eclipse plug-in of this method is implemented and a case study is used to demonstrate its feasibility.
C1 [Liu, Yinling; Shen, Guohua; Huang, Zhiqiu; Yang, Zhibin] Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
C3 Nanjing University of Aeronautics & Astronautics
RP Shen, GH (corresponding author), Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Jiangsu, Peoples R China.
EM ylliu2013@nuaa.edu.cn; ghshen@nuaa.edu.cn; zqhuang@nuaa.edu.cn;
   zhibinyang168@gmail.com
OI Liu, Yinling/0000-0002-9711-2118
FU Fundamental Research Funds for the Central Universities [NS2015093];
   Priority Academic Program Development of Jiangsu Higher Education
   Institutions; Collaborative Innovation Center of Novel Software
   Technology and Industrialization
FX This work was supported by the Fundamental Research Funds for the
   Central Universities, NS2015093, the Priority Academic Program
   Development of Jiangsu Higher Education Institutions, Collaborative
   Innovation Center of Novel Software Technology and Industrialization.
   The author wishes to thank his tutor and classmates. His tutor is senior
   member of CCF, and his research has contributed greatly to this work.
   His classmates provided the author with valuable technical support.
CR [Anonymous], 2001, 61822 IEC
   [Anonymous], 2007, Proceedings of the 33rd international conference on Very large data bases (VLDB '07)
   BALOCH M.P., 2014, Sci. Int. (Lahore), V26, P1523
   Bitsch F., 2013, P 32 INT C COMP SAF
   Carnegie Mellon Software Engineering Institute, 2006, OP SOURC AADL TOOL E
   Cha S, 2012, FUTURE GENER COMP SY, V28, P1272, DOI 10.1016/j.future.2011.02.004
   Delange J., 2014, CMUSEI2014TR020
   Delange J, 2014, EUROMICRO CONF PROC, P361, DOI 10.1109/SEAA.2014.20
   Feiler P, 2013, AS55063 SAE, V3
   Feiler P.H., 2007, DEPENDABILITY MODELI
   Feiler P. H., 2006, ARCHITECTURE ANAL DE
   Hatcliff J., 2012, P 2012 INT C CYB SYS
   *IEC, 1991, 60812 IEC
   Jaafar Jafreezal, 2015, Information Science and Applications, P837, DOI 10.1007/978-3-662-46578-3_99
   Kahrobaee S, 2010, N AM POW S NAPS
   Larson B. R., 2013, P INT WORKSH SOFTW E
   Lempia D. L., 2009, DOTFAAAR0832
   Ortmeier F, 2007, ELECTRON NOTES THEOR, V185, P139, DOI 10.1016/j.entcs.2007.05.034
   Rausand M, 2004, SYSTEM RELIABILITY T
   Sankhwar S., 2014, GLOBAL J MULTIDISCIP, V3
   Sun HY, 2007, HASE 2007: 10TH IEEE HIGH ASSURANCE SYSTEMS ENGINEERING SYMPOSIUM, PROCEEDINGS, P15, DOI 10.1109/HASE.2007.28
   Yue Li, 2011, Autonomic and Trusted Computing. Proceedings 8th International Conference (ATC 2011), P243, DOI 10.1007/978-3-642-23496-5_18
NR 22
TC 2
Z9 3
U1 0
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 503
EP 527
DI 10.1007/s11219-015-9302-6
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EU8EZ
UT WOS:000401271700006
DA 2024-07-18
ER

PT J
AU Iqbal, J
   Ahmad, RB
   Nasir, MHNM
   Niazi, M
   Shamshirband, S
   Noor, MA
AF Iqbal, Javed
   Ahmad, Rodina Binti
   Nasir, Mohd Hairul Nizam Md
   Niazi, Mahmood
   Shamshirband, Shahaboddin
   Noor, Muhammad Asim
TI Software SMEs' unofficial readiness for CMMI<SUP>A®</SUP>-based software
   process improvement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software process improvement; Small- and medium-sized enterprises; CMMI
   adoption trends; Specific practices; Process areas; CMMI level 2
ID PROJECT SUCCESS; CMMI; PRACTITIONERS; THINK; RISK
AB The goal of software process improvement (SPI) is to improve software processes and produce high-quality software, but the results of SPI efforts in small- and medium-sized enterprises (SMEs) that develop software have been unsatisfactory. The objective of this study is to support the prolific and successful CMMI-based implementation of SPI in SMEs by presenting the facts related to the unofficial adoption of CMMI level 2 process area-specific practices by software SMEs. Two questionnaire surveys were performed, and 42 questionnaires were selected for data analysis. The questionnaires were filled out by experts from 42 non-CMMI-certified software SMEs based in Malaysia and Pakistan. In the case of each process area of CMMI level 2, the respondents were asked to choose from three categories, namely 'below 50 %,' '50-75 %,' and 'above 75 %'. The percentages indicated the extent to which process area-specific practices are routinely followed in the respondents' respective organizations. To deal with differing standards for defining SMEs, the notion of the common range standard has been introduced. The results of the study show that a large segment of software development SMEs informally follows the specific practices of CMMI level 2 process areas and thus has true potential for rapid and effective CMMI-based SPI. The results further indicate that, in the case of four process areas of CMMI level 2, there are statistically significant differences between the readiness of small and medium software enterprises to adopt the specific practices of those process areas, and between trends on their part to do so unofficially. The findings, manifesting various degrees of unofficial readiness for CMMI-based SPI among SMEs, can be used to define criteria for the selection of SMEs that would be included in SPI initiatives funded by relevant authorities. In the interests of developing fruitful CMMI-based SPI and to enhance the success rate of CMMI-based SPI initiatives, the study suggests that 'ready' or 'potential' SMEs should be given priority for SPI initiatives.
C1 [Iqbal, Javed; Ahmad, Rodina Binti; Nasir, Mohd Hairul Nizam Md] Univ Malaya, Fac Comp Sci & Informat Technol, Software Engn Dept, Kuala Lumpur 50603, Malaysia.
   [Niazi, Mahmood] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia.
   [Shamshirband, Shahaboddin] Univ Malaya, Fac Comp Sci & Informat Technol, Comp Syst & Technol Dept, Kuala Lumpur, Malaysia.
   [Noor, Muhammad Asim] COMSATS Inst Informat Technol, Dept Comp Sci, Islamabad, Pakistan.
C3 Universiti Malaya; King Fahd University of Petroleum & Minerals;
   Universiti Malaya; COMSATS University Islamabad (CUI)
RP Iqbal, J (corresponding author), Univ Malaya, Fac Comp Sci & Informat Technol, Software Engn Dept, Kuala Lumpur 50603, Malaysia.
EM javediqbal6000@siswa.um.edu.my; rodina@um.edu.my; hairulnizam@um.edu.my;
   mkniazi@kfupm.edu.sa; shamshirband@um.edu.my; asim_noor@comsats.edu.pk
RI Noor, Muhammad/AAF-1238-2019; Niazi, Mahmood/C-8873-2015; Rather, Raouf
   A/J-3509-2019; Noor, Khalida Inayat/O-7649-2016; Ahmad, R
   Badlishah/G-5892-2015; Ahmad, RB/U-3211-2019; S.Band,
   Shahab/ABI-7388-2020; Nasir, Mohd Hairul Nizam Md/B-9092-2010; S.Band,
   Shahab/AAD-3311-2021; Ahmad, Rodina/B-9582-2010
OI Noor, Muhammad/0000-0001-6105-2435; Ahmad, RB/0000-0002-4862-2728;
   S.Band, Shahab/0000-0002-8963-731X; Shamshirband,
   Shahaboddin/0000-0002-6605-498X; Iqbal, Dr. Javed/0000-0001-5777-7935
FU Bright Sparks Unit, University of Malaya, Malaysia; University of Malaya
   [RG316-14AFR]
FX The authors would like to thank Bright Sparks Unit, University of
   Malaya, Malaysia and also University of Malaya Research Grant (No.
   RG316-14AFR) for providing financial support to complete this study.
   Thanks are due to reviewers and associate editor for their comments
   which improved this manuscript. We are also grateful to the management
   of all the participating SMEs for facilitating the smooth conduction of
   this study.
CR Alexandre S, 2006, EUROMICRO CONF PROC, P328, DOI 10.1109/EUROMICRO.2006.48
   Allen P, 2003, THIRD INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P211, DOI 10.1109/QSIC.2003.1319105
   [Anonymous], CMUSEI2010TR033 SOFT
   [Anonymous], 2013, NEW STRAITS TIMES
   [Anonymous], 2008, SOFTWARE PROCESS IMP, DOI DOI 10.1002/SPIP.380
   Cepeda S, 2008, IS CMMI USEFUL USABL
   Chen X, 2008, COMM COM INF SC, V16, P94
   Chen X, 2007, LECT NOTES COMPUT SC, V4764, P59
   Clarke P, 2012, J SYST SOFTWARE, V85, P2356, DOI 10.1016/j.jss.2012.05.024
   Cox K, 2009, IET SOFTW, V3, P339, DOI 10.1049/iet-sen.2008.0076
   Dasanayaka S.W.S.B., 2008, Business Review, V3, P69
   Diaz J, 2009, COMM COM INF SC, V42, P93
   Dyba T., 2003, Software Engineering Notes, V28, P148, DOI 10.1145/949952.940092
   FLORAC WA, 1999, SEI S SOFTW, P1
   Garcia I, 2008, STUD COMPUT INTELL, V150, P15, DOI 10.1007/978-3-540-70561-1_2
   García I, 2012, J SOFTW-EVOL PROC, V24, P481, DOI 10.1002/smr.504
   Garcia I, 2009, STUD COMPUT INTELL, V253, P51, DOI 10.1007/978-3-642-05441-9_5
   Gefen D, 2006, COMMUN ASSOC INF SYS, V17, P801
   Goldenson D., 2003, CROSSTALK J DEFENSE, V6, P20
   Habib M, 2008, INMIC: 2008 INTERNATIONAL MULTITOPIC CONFERENCE, P386, DOI 10.1109/INMIC.2008.4777768
   Huang D. B., 2010, 2010 2nd IEEE International Conference on Information Management and Engineering (ICIME 2010), P171, DOI 10.1109/ICIME.2010.5478220
   Huang SJ, 2006, INFORM MANAGE-AMSTER, V43, P297, DOI 10.1016/j.im.2005.08.003
   Huang SJ, 2008, INFORM MANAGE-AMSTER, V45, P175, DOI 10.1016/j.im.2008.02.001
   Hwang S.M., 2009, INT J SOFTWARE ENG I, V3, P33
   Ivan G, 2007, LECT NOTES COMPUT SC, V4764, P46
   Jackelen G., 2007, The Journal of Defense Software Engineering, P13
   Khokhar Muhammad Nawazish, 2010, 2010 4th International Conference on New Trends in Information Science and Service Science (NISS 2010), P592
   Khurshid N, 2009, LECT NOTES COMPUT SC, V5543, P38, DOI 10.1007/978-3-642-01680-6_6
   Lester NG, 2010, J SOFTW MAINT EVOL-R, V22, P17, DOI 10.1002/smr.450
   Lethbridge TC, 2005, EMPIR SOFTW ENG, V10, P311, DOI 10.1007/s10664-005-1290-x
   Lina Zhang, 2011, 2011 2nd International Conference on Artificial Intelligence, Management Science and Electronic Commerce (AIMSEC 2011), P2402, DOI 10.1109/AIMSEC.2011.6011045
   Liou JC, 2011, J INF SCI ENG, V27, P213
   Mishra D, 2008, LECT NOTES COMPUT SC, V5089, P273, DOI 10.1007/978-3-540-69566-0_23
   Monteiro P, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ADVANCES (ICSEA 2009), P536, DOI 10.1109/ICSEA.2009.84
   Monteiro P, 2010, LECT NOTES COMPUT SC, V6156, P263, DOI 10.1007/978-3-642-13792-1_21
   Nasir M. H. N. M., 2008, Journal of Applied Sciences, V8, P4362, DOI 10.3923/jas.2008.4362.4368
   Niazi M, 2008, LECT NOTES COMPUT SC, V5089, P143, DOI 10.1007/978-3-540-69566-0_14
   Niazi M, 2010, INFORM SOFTWARE TECH, V52, P1204, DOI 10.1016/j.infsof.2010.06.005
   Niazi M, 2009, INFORM SOFTWARE TECH, V51, P1231, DOI 10.1016/j.infsof.2009.03.001
   Noor T., 2007, 2007 INT C INF EM TE, P1
   O'Connor RV, 2009, AUSTRALAS J INF SYST, V16, P7
   Pereira J, 2008, J SYST SOFTWARE, V81, P897, DOI 10.1016/j.jss.2007.07.032
   Pfleeger Shari Lawrence, 2001, ACM SIGSOFT Software Engineering Notes, V26, P16, DOI DOI 10.1145/505532.505535
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Pino FJ, 2010, INFORM SOFTWARE TECH, V52, P1044, DOI 10.1016/j.infsof.2010.04.004
   Procaccino JD, 2006, J SYST SOFTWARE, V79, P1541, DOI 10.1016/j.jss.2006.01.010
   Procaccino JD, 2005, J SYST SOFTWARE, V78, P194, DOI 10.1016/j.jss.2004.12.011
   Reel JS, 1999, IEEE SOFTWARE, V16, P18, DOI 10.1109/52.765782
   *SEI, 2006, PROC MAT PROF
   Staples M., 2010, 11 INT C PROD FOC SO, P63
   Staples M, 2007, J SYST SOFTWARE, V80, P883, DOI 10.1016/j.jss.2006.09.008
   Sulayman M, 2012, INFORM SOFTWARE TECH, V54, P479, DOI 10.1016/j.infsof.2011.12.007
   Sulayman M, 2009, COMM COM INF SC, V59, P1
   Vivatanavorasin C, 2006, ASPEC 2006: 13TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P385
   Wallace L, 2004, INFORM MANAGE-AMSTER, V42, P115, DOI 10.1016/j.im.2003.12.007
   Wilkie F. G., 2005, Software Process Improvement and Practice, V10, P189, DOI 10.1002/spip.223
   Yucalar Fatih., 2009, Journal of aeronautics and space technologies, V4, P39
   Zhang Lina, 2012, Proceedings of the 2012 International Conference on Computer Science and Electronics Engineering (ICCSEE 2012), P554, DOI 10.1109/ICCSEE.2012.477
   [No title captured]
NR 59
TC 16
Z9 17
U1 1
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2016
VL 24
IS 4
BP 997
EP 1023
DI 10.1007/s11219-015-9277-3
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED6GL
UT WOS:000388954000007
DA 2024-07-18
ER

PT J
AU Janicijevic, I
   Krsmanovic, M
   Zivkovic, N
   Lazarevic, S
AF Janicijevic, Ivan
   Krsmanovic, Maja
   Zivkovic, Nedeljko
   Lazarevic, Sasa
TI Software quality improvement: a model based on managing factors
   impacting software quality
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Factors impacting software quality; Quality
   improvement; Markov chain
ID MARKOV MODEL; SIMULATION; REQUIREMENTS; SYSTEM; REWORK
AB Software quality is recognized as being very significant for achieving competitiveness in the software industry, so improvements in this area are gaining increasing importance. Software quality improvements can only be achieved by managing all of the factors that influence it. However, in a real business system, there are a great number of factors impacting software quality, while the processes are stochastic and resources are limited, so economic data should also be taken into consideration. This paper uses a Markov chain and proposes a systematic framework for modelling the stochastic processes of a quality management system and selection of the optimum set of factors impacting software quality. A methodology is presented for managing the factors that affect software quality with an illustrative hypothetical example for convenience of application of the proposed methodology.
C1 [Janicijevic, Ivan; Krsmanovic, Maja; Zivkovic, Nedeljko] Univ Belgrade, Fac Org Sci, Qual Management Dept, Belgrade, Serbia.
   [Lazarevic, Sasa] Univ Belgrade, Fac Org Sci, Software Engn Dept, Belgrade, Serbia.
C3 University of Belgrade; University of Belgrade
RP Krsmanovic, M (corresponding author), Univ Belgrade, Fac Org Sci, Qual Management Dept, Belgrade, Serbia.
EM janicijevici@fon.bg.ac.rs; krsmanovicm@fon.rs; nedo@fon.bg.ac.rs;
   slazar@fon.bg.ac.rs
RI Zivkovic, Nedeljko/AAF-1885-2020
CR Anderson D., 1994, An Introduction to Management Science
   ARTHUR LJ, 1993, IMPROVING SOFTWARE Q
   BAUM LE, 1966, ANN MATH STAT, V37, P1554, DOI 10.1214/aoms/1177699147
   Bayona-Oré S, 2014, SOFTWARE QUAL J, V22, P21, DOI 10.1007/s11219-012-9190-y
   Berthiaux H, 2004, CAN J CHEM ENG, V82, P1143
   Boehm B., 1998, IEEE
   Boehm B.W., 1978, Characteristics of Software Quality
   Bowling SR, 2004, EUR J OPER RES, V159, P636, DOI 10.1016/s0377-2217(03)00429-6
   Budgen D., 1994, SOF TWARE DESIGN
   Cheikhrouhou N, 2009, COMPUT IND ENG, V57, P1022, DOI 10.1016/j.cie.2009.04.013
   Dash Y., 2012, INT J ADV RES COMPUT, V2, P202
   Deming W. E., 1986, OUT CRISIS
   Dunn R., 1990, SQA MANAGEMENT PERSP
   Durrett R., 1996, PROBABILITY THEORY E
   Endall K. E., 1995, SYSTEMS ANAL DESIGN
   ERIKKSON I, 1993, INFORM SOFTWARE TECH, V35, P491, DOI 10.1016/0950-5849(93)90016-V
   Frei FX, 1999, MANAGE SCI, V45, P1210, DOI 10.1287/mnsc.45.9.1210
   Gautreau N, 1997, COMPUT IND ENG, V32, P691, DOI 10.1016/S0360-8352(97)00137-X
   Ghosh A, 2010, INT J QUAL RELIAB MA, V27, P815, DOI 10.1108/02656711011062408
   Glock CH, 2013, COMPUT IND ENG, V64, P708, DOI 10.1016/j.cie.2012.08.018
   Goyal A, 2009, INT J IND ENG-THEORY, V16, P260
   GRIFFIN A, 1993, MARKET SCI, V12, P1, DOI 10.1287/mksc.12.1.1
   He z., 1996, THE TQM MAGAZINE, V8, P40, DOI DOI 10.1108/09544789610125333
   Hevner AR, 1997, INFORM SOFTWARE TECH, V39, P867, DOI 10.1016/S0950-5849(97)00050-5
   Humphrey W.S., 1989, MANAGING SOFTWARE PR
   ISO, 2005, 90002005 ISO
   Jorgensen M, 1999, ADV ENG SOFTW, V30, P907, DOI 10.1016/S0965-9978(99)00015-0
   Karlsson J, 1997, SOFTWARE QUAL J, V6, P311, DOI 10.1023/A:1018580522999
   Kemp S., 2005, Quality management demystified
   Khan Hafiz Ansar, 2013, International Journal of Future Computer and Communication, V2, P585, DOI 10.7763/IJFCC.2013.V2.232
   Khoo M. B., 2003, Quality Engineering, V16, P27, DOI 10.1081/QEN-120020769
   Khoshgoftaar TM, 2001, SOFTWARE QUAL J, V9, P9, DOI 10.1023/A:1016621219262
   Kondo Y, 2001, TOTAL QUAL MANAGE, V12, P867
   Korkmaz O., 2011, HUMAN FACTORS ERGONO, V21, P1
   Kwong CK, 2002, J INTELL MANUF, V13, P367, DOI 10.1023/A:1019984626631
   Lai CD, 2000, J APPL STAT, V27, P461, DOI 10.1080/02664760050003641
   Latif M. S., 2013, INT J COMPUTER SCI M, V2, P2171
   Lethbridge T.C., 2005, OBJECT ORIENTED SOFT
   Li J., 2007, MATH PROBL ENG, V2007, P24
   Merlyn V., 1994, DEV EFFECTIVENESS ST
   Modgil V., 2012, NATURE SCI, V10, P45
   O'Kane J, 2007, J SMALL BUS ENTERP D, V14, P514, DOI 10.1108/14626000710773583
   Oliva R, 2008, INT J SERV IND MANAG, V19, P160, DOI 10.1108/09564230810869711
   Oriogun PK, 1999, SOFTWARE QUAL J, V8, P53, DOI 10.1023/A:1008926902882
   Pakdil F, 2009, TOTAL QUAL MANAG BUS, V20, P129, DOI 10.1080/14783360802351728
   Parzinger MJ, 2000, TOTAL QUAL MANAGE, V11, P353, DOI 10.1080/0954412006874
   PFLEEGER S.L., 2006, Software Engineering, Theory and Practice
   Pillai VM, 2008, COMPUT IND ENG, V55, P695, DOI 10.1016/j.cie.2008.02.009
   Pukite J., 1998, MODELING RELIABILITY
   Sanz L. F., 2013, COVENANT J INFORM CO, V1, P10
   Saunders J., 1994, SOFTWARE QUALITY
   Schiffauerova A., 2006, THE TQM MAGAZINE, V18, P542, DOI DOI 10.1108/09544780610685502
   Sharma A. K., 2012, IOSR J ENG, V2, P663
   Sokolowski JohnA., 2009, PRINCIPLES MODELING
   Stanley J., 2001, Quality Engineering, V13, P457, DOI 10.1080/08982110108918674
   Stasiowski F.A., 1994, Total Quality Managemen for The Design Firm
   SULLIVAN LP, 1986, QUAL PROG, V19, P39
   Tai AH, 2009, COMPUT IND ENG, V57, P608, DOI 10.1016/j.cie.2008.09.028
   TAVARE S, 1979, BIOMETRICS, V35, P831, DOI 10.2307/2530117
   Will J., 2002, INT J OPER PROD MAN, V22, P241, DOI DOI 10.1108/01443570210414338
   Wu HH, 2005, INT J ADV MANUF TECH, V25, P1241, DOI 10.1007/s00170-003-1948-8
   Wu HH, 2008, QUAL QUANT, V42, P665, DOI 10.1007/s11135-007-9079-1
   Wu HH, 2011, COMPUT IND ENG, V61, P141, DOI 10.1016/j.cie.2011.03.004
   Yacout S, 2000, INT J PROD RES, V38, P253, DOI 10.1080/002075400189392
   Yin-Ho Yao, 2004, International Journal of Electronic Business Management, V2, P140
   Yourdon E., 1992, Decline Fall of the American Programmer
   Zahedi F, 1995, QUALITY INFORM SYSTE
   Zhang Z., 2001, THESIS U GRONINGEN N
NR 68
TC 4
Z9 7
U1 3
U2 43
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 247
EP 270
DI 10.1007/s11219-014-9257-z
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100003
DA 2024-07-18
ER

PT J
AU Syer, MD
   Nagappan, M
   Adams, B
   Hassan, AE
AF Syer, Mark D.
   Nagappan, Meiyappan
   Adams, Bram
   Hassan, Ahmed E.
TI Studying the relationship between source code quality and mobile
   platform dependence
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
ID METRICS
AB The recent meteoric rise in the use of smartphones and other mobile devices has led to a new class of software applications (i.e., mobile apps). One reason for this success is the extensive support available to mobile app developers through the APIs provided by mobile platforms (e.g., Android). In our previous research, we found that mobile apps tend to depend highly on these platform-specific APIs. High dependence on a particular mobile platform may introduce instability and defects, as these mobile platforms are rapidly evolving. Therefore, the extent of platform dependence may be an indicator of software quality. In this paper, we examine the relationship between platform dependence and defect proneness of the source code files of an Android app to determine whether software metrics based on platform dependence can be used to prioritize software quality assurance efforts. We find that (1) source code files that are defect prone have a higher dependence on the platform than defect-free files and (2) increasing the platform dependence increases the likelihood of a defect being present in a source code file. Thus, platform dependence may be used to prioritize the most defect-prone source code files for code reviews and unit testing by the software quality assurance team.
C1 [Syer, Mark D.; Nagappan, Meiyappan; Hassan, Ahmed E.] Queens Univ, SAIL, Sch Comp, Kingston, ON, Canada.
   [Adams, Bram] Ecole Polytech, Lab Maintenance Construct & Intelligence Software, Dept Genie Informat & Genie Logiciel, Montreal, PQ H3C 3A7, Canada.
C3 Queens University - Canada; Universite de Montreal; Polytechnique
   Montreal
RP Syer, MD (corresponding author), Queens Univ, SAIL, Sch Comp, Kingston, ON, Canada.
EM mdsyer@cs.queensu.ca; mei@cs.queensu.ca; bram.adams@polymtl.ca;
   ahmed@cs.queensu.ca
RI Ali, Ahmed/HOF-4672-2023; KHALIFA, AHMED khalifa/HKF-2246-2023; Hassan,
   Ahmed/AAB-7241-2019
OI KHALIFA, AHMED khalifa/0000-0002-2918-7572; Adams,
   Bram/0000-0001-7213-4006
CR [Anonymous], 2011, WORKSHOP ON MOBILE S
   [Anonymous], 2008, APPL REGRESSION ANAL
   [Anonymous], 2006, ISESE '06: Proceedings of the 5th International Symposium on Empirical Software Engineering. Volume II: Short Papers and Posters, DOI DOI 10.1145/1159733.1159739.
   [Anonymous], 2007, PROMISE 07, DOI DOI 10.1109/PROMISE.2007.10
   [Anonymous], APPL MULTIPLE REGRES
   Binkley AB, 1998, PROC INT CONF SOFTW, P452, DOI 10.1109/ICSE.1998.671604
   Bird C., 2011, P 19 ACM SIGSOFT S 1, P4, DOI DOI 10.1145/2025113.2025119
   Brian Robinson., 2010, Proceedings of the International Symposium on Empirical Software Engineering and Measurement, P197
   Butler M, 2011, IEEE PERVAS COMPUT, V10, P4, DOI 10.1109/MPRV.2011.1
   Charland A., 2011, Queue, V9, P20, DOI [10.1145/1966989.1968203, DOI 10.1145/1966989.1968203]
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Distimo, 2011, COMP CONTR WIND PHON
   Elliott A.C., 2006, STAT ANAL QUICK REFE
   Enck W, 2009, IEEE SECUR PRIV, V7, P50, DOI 10.1109/MSP.2009.26
   Gasimov Anar, 2010, Proceedings 2010 Ninth International Conference on Mobile Business/2010 Ninth Global Mobility Roundtable. ICMB-GMR 2010, P74, DOI 10.1109/ICMB-GMR.2010.20
   Gavalas D, 2011, IEEE SOFTWARE, V28, P77, DOI 10.1109/MS.2010.155
   Grace  M., 2012, P 10 INT C MOB SYST, P281, DOI DOI 10.1145/2307636.2307663
   Grace M. C., 2012, PROC 5 ACM C SECUR P, P101
   Harman M., 2012, P INT WORK C MIN SOF
   HARRELL FE, 1984, STAT MED, V3, P143, DOI 10.1002/sim.4780030207
   Hassan AE, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P349, DOI 10.1109/ICSE.2002.1007981
   Hassan AE, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P837
   Hassan AE, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P48, DOI 10.1109/FOSM.2008.4659248
   Herraiz I., 2007, Proceedings of the International Workshop on Mining Software Repositories, P21
   International Data Corp, 2011, IDC FOR NEARL 183 BI
   Khalid H, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1474, DOI 10.1109/ICSE.2013.6606749
   Kim H. W., 2011, P INT DSI APDSI JOIN
   Kumar Maji Amiya, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P249, DOI 10.1109/ISSRE.2010.45
   Linares-Vasquez Mario, 2013, P 2013 9 JOINT M FDN, P477, DOI DOI 10.1145/2491411.2491428
   LIND RK, 1989, IEEE T SOFTWARE ENG, V15, P649, DOI 10.1109/32.24715
   Lohr S., 2010, GOOGLES DO IT YOURSE
   Minelli R, 2013, EUR CON SFTWR MTNCE, P144, DOI 10.1109/CSMR.2013.24
   Mockus A, 2000, PROC IEEE INT CONF S, P120, DOI 10.1109/ICSM.2000.883028
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   Nguyen T.N. D., 2010, Proceedings of the International Conference on Software Maintenance, P1, DOI DOI 10.1109/ICSM.2010.5609560
   Nielsen Co, 2010, GAM DOM AM GROW APP
   Ruiz I. J. M., 2012, 2012 IEEE 20th International Conference on Program Comprehension, P113
   Scitools, 2014, UND YOUR COD
   Shabtai A, 2010, IEEE SECUR PRIV, V8, P35, DOI 10.1109/MSP.2010.2
   Sharma C., 2010, SIZING GLOBAL APPS M
   Shihab E., 2010, Proceedings of the International Symposium on Empirical Software Engineering and Measurement, P29
   Shihab E., 2011, Proceedings of the ACM SIGSOFT symposium and the European Conference on Foundations of Software Engineering, P300
   Syer MD, 2011, IEEE INT WORK C SO, P55, DOI 10.1109/SCAM.2011.25
   Syer MarkD., 2013, Proceedings of the 2013 Conference of the Center for Advanced Studies on Collaborative Research, CASCON '13, P283
   The Nielsen Company, 2010, STAT MOB APPS
   Tracy KW, 2012, IEEE POTENTIALS, V31, P30, DOI 10.1109/MPOT.2011.2182571
   Van der Meer T, 2010, AM SOCIOL REV, V75, P173, DOI 10.1177/0003122409359166
   Weyuker EJ, 2008, EMPIR SOFTW ENG, V13, P539, DOI 10.1007/s10664-008-9082-8
   Xin C, 2009, 2009 INTERNATIONAL CONFERENCE ON INDUSTRIAL AND INFORMATION SYSTEMS, PROCEEDINGS, P182, DOI 10.1109/IIS.2009.96
   Yonghong Wu, 2010, Proceedings of the 2010 IEEE 10th International Conference on Computer and Information Technology (CIT 2010), P2157, DOI 10.1109/CIT.2010.369
   Ziegel ER, 1995, MATH STAT DATA ANAL, V37, P127
   Zimmermann T, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P531, DOI 10.1145/1368088.1368161
NR 52
TC 22
Z9 24
U1 0
U2 33
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2015
VL 23
IS 3
BP 485
EP 508
DI 10.1007/s11219-014-9238-2
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG8PX
UT WOS:000353572800006
DA 2024-07-18
ER

PT J
AU Matalonga, S
   Solari, M
   San Feliu, T
AF Matalonga, Santiago
   Solari, Martin
   San Feliu, Tomas
TI An empirically validated simulation for understanding the relationship
   between process conformance and technology skills
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Simulation; Software process improvement; Statistical process control;
   System dynamics
ID SYSTEM DYNAMICS; SOFTWARE
AB Software development is a fast-paced environment where developers need constant update to ever-changing technologies. Furthermore, process improvement initiatives have been proven useful in increasing the productivity of a software organization. As such, these organizations need to decide where to invest their training budget. As a result, training in technological update to their workforce or training in process conformance with its productive processes become conflicting alternatives. This paper presents a system dynamics simulation of a software factory product line. The objective of this simulation is to understand the changes in behavior when selecting either one of the above-training alternatives. The system dynamics model was validated with an expert panel, and the simulation results have been empirically validated-using statistical process control-against the performance baseline of a real software development organization. With the simulation under statistical control and performing like the baseline, the independent variables representing process conformance (process training) and technology skills (skills training) were modified to study their impact on product defects and process stability. Our results show that while both variables have positive impact on defects and process stability, investment in process training results in a process with less variation and with fewer defects.
C1 [Matalonga, Santiago; Solari, Martin] Univ ORT Uruguay, Fac Ingn, Montevideo 11100, Uruguay.
   [San Feliu, Tomas] Univ Politecn Madrid, Fac Informat, E-28660 Madrid, Spain.
C3 University ORT Uruguay; Universidad Politecnica de Madrid
RP Matalonga, S (corresponding author), Univ ORT Uruguay, Fac Ingn, Cuareim 1451, Montevideo 11100, Uruguay.
EM smatalonga@uni.ort.edu.uy; martin.solari@ort.edu.uy;
   tomas.sanfeliu@upm.es
RI Matalonga, Santiago/O-4316-2019; San Feliu, Tomas/B-4515-2011
OI Matalonga, Santiago/0000-0001-5429-2449; Solari,
   Martin/0000-0001-5532-3227
CR Abdel-Hamid T., 1991, SOFTWARE PROJECT DYN
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   [Anonymous], 90012008E ISO
   [Anonymous], 12 INT C AG PROC SOF
   [Anonymous], 2012, 190112012 ISO
   [Anonymous], INT C SOFTW SYST ENG
   [Anonymous], 14 S BRAS ENG SOFTW
   [Anonymous], EUR SEPG 09 PRAG CZE
   [Anonymous], COAD SERIES SOFTWARE
   [Anonymous], 2010, CMMI DEV VERS 1 3 IM
   [Anonymous], 1968, An Introduction to Probability Theory and Its Applications
   [Anonymous], GUIDE ADV EMPIRICAL
   [Anonymous], CMMI SCAMPI CLASS AP
   FLORAC WA, 1997, CMUSEI97HB003
   Forrester J. W., 1969, Urban Dynamics
   IEEE, 1990, IEEE STD 610 121990
   Kellner MI, 1999, J SYST SOFTWARE, V46, P91, DOI 10.1016/S0164-1212(99)00003-5
   Madachy R.J., 2008, Software Process Dynamics
   Pfahl D, 2001, J SYST SOFTWARE, V59, P283, DOI 10.1016/S0164-1212(01)00069-3
   Pfahl D, 1999, J SYST SOFTWARE, V46, P135, DOI 10.1016/S0164-1212(99)00007-2
   Pyzdek T., 2003, 6 SIGMA HDB COMPLETE
   Schwaninger M, 2008, SYST RES BEHAV SCI, V25, P447, DOI 10.1002/sres.914
   Senge P.M., 2006, 5 DISCIPLINE
   Shewhart W.A., 1980, EC CONTROL QUALITY M
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zhang H, 2008, LECT NOTES COMPUT SC, V5007, P345, DOI 10.1007/978-3-540-79588-9_30
   Zhang H, 2008, ASIA PAC SOFWR ENG, P59, DOI 10.1109/APSEC.2008.50
NR 27
TC 8
Z9 8
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2014
VL 22
IS 4
BP 593
EP 609
DI 10.1007/s11219-013-9214-2
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AR8NQ
UT WOS:000343832100003
DA 2024-07-18
ER

PT J
AU Mora, B
   García, F
   Ruiz, F
   Piattini, M
AF Mora, B.
   Garcia, F.
   Ruiz, F.
   Piattini, M.
TI Graphical versus textual software measurement modelling: an empirical
   study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software measurement; DSL; Empirical validation
ID TAVERNA
AB Model-driven Engineering (MDE) has attained great importance in both the Software Engineering industry and the research community, where it is now widely used to provide a suitable approach with which to improve productivity when developing software artefacts. In this scenario, measurement models (software artefacts) have become a fundamental point in improvement of productivity, where MDE and Software Measurement can reap mutual benefits. MDE principles and techniques can be used in software measurement to build more automatic and generic solutions, and to achieve this, it is fundamental to be able to develop software measurement models. To facilitate this task, a domain-specific language named "Software Measurement Modelling Language" (SMML) has been developed. This paper tackles the question of whether the use of SMML can assist in the definition of software measurement models. An empirical study was conducted, with the aim of verifying whether SMML makes it easier to construct measurement models which are more usable and maintainable as regards textual notation. The results show that models which do not use the language are more difficult-in terms of effort, correctness and efficiency-to understand and modify than those represented with SMML. Additional feedback was also obtained, to verify the suitability of the graphical representation of each symbol (element or relationship) of SMML.
C1 [Mora, B.] Informat Technol Co, Indra Software Labs, Ciudad Real, Spain.
   [Garcia, F.; Ruiz, F.; Piattini, M.] Univ Castilla La Mancha, ALARCOS Res Grp, Dept Informat Technol & Syst, E-13071 Ciudad Real, Spain.
C3 Indra; Universidad de Castilla-La Mancha
RP Mora, B (corresponding author), Informat Technol Co, Indra Software Labs, Ciudad Real, Spain.
EM bmorar@indra.es; Felix.Garcia@uclm.es; Francisco.RuizG@uclm.es;
   Mario.Piattini@uclm.es
RI Ruiz, Francisco/D-4295-2011; Piattini, Mario/F-6271-2013; Garcia,
   Felix/D-4299-2011
OI Ruiz, Francisco/0000-0002-4923-7848; Piattini,
   Mario/0000-0002-7212-8279; Garcia, Felix/0000-0001-6460-0353
FU INGENIO (JCCM) [PAC08-0154-9262]; MEDUSAS (CDTI (MICINN) [IDI-20090557];
   PEGASO/MAGO (MICINN and FEDER) [TIN2009-13718-C02-01]; ALTAMIRA (JCCM,
   Fondo Social Europeo) [PII2I09-0106-2463]
FX This work has been partially supported by the projects: INGENIO (JCCM,
   PAC08-0154-9262), MEDUSAS (CDTI (MICINN), IDI-20090557), PEGASO/MAGO
   (MICINN and FEDER, TIN2009-13718-C02-01), and ALTAMIRA (JCCM, Fondo
   Social Europeo, PII2I09-0106-2463) projects.
CR Ahmad R., 1999, Malaysian Journal of Computer Science, V12, P76
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], INT SERIES SOFTWARE
   [Anonymous], 2006, COMP 21 ACM SIGPLAN, DOI DOI 10.1145/1176617.1176691
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], ACM IEEE P
   [Anonymous], 9 OPPSLA WORKSH DOM
   *APPL, 2010, APPLESCRIPT
   *APPL, 2010, AUT
   Arpaia P, 2009, IEEE IMTC P, P1669
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   Bézivin J, 2005, IEEE INT C ENG COMP, P28
   BEZIVIN J, 2004, NOVATICA UPGRADE, V5, P21
   COOK S, 2004, MDA J, P1
   Cunniff N., 1987, EMPIRICAL STUDIES PR, P114
   Eysenck M. W., 2020, COGNITIVE PSYCHOL ST
   FEILKAS M, 2006, P 6 OOPSLA WORKSH DO, P204
   García F, 2007, INFORM SCIENCES, V177, P2570, DOI 10.1016/j.ins.2007.01.018
   García F, 2003, LECT NOTES COMPUT SC, V2786, P94
   García F, 2006, INFORM SOFTWARE TECH, V48, P631, DOI 10.1016/j.infsof.2005.07.001
   GENERO M, 2005, J SOFTWARE MAINTENAN, V17, P225
   Green T. R. G., 1991, Empirical Studies of Programmers: Fourth Workshop, P121
   Guerra E, 2008, J VISUAL LANG COMPUT, V19, P399, DOI 10.1016/j.jvlc.2007.09.002
   Hull D, 2006, NUCLEIC ACIDS RES, V34, pW729, DOI 10.1093/nar/gkl320
   Jouault F, 2006, LECT NOTES COMPUT SC, V4037, P171
   Juristo N., 2013, BASICS SOFTWARE ENG
   Kelly S, 2009, IEEE SOFTWARE, V26, P22, DOI 10.1109/MS.2009.109
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Kolovos D., 2006, 1 ECOOP WORKSH DOM S
   KURTEV I, 2006, OOPSLA 06, P602
   MCRNIK M, 2005, ACM COMPUT SURV, V37, P316
   Moher Thomas G., 1993, Comparing the Comprehensibility of Textual and Graphical Programs: The Case of Petri Nets, P137
   MORA B, 2008, SMML SOFTWARE MEASUR
   MORA B, 2008, 8 OOPSLA WORKSH DOM, P52
   MORA B, 2008, 10 INT C ENT INF SYS, V1, P117
   Mora B, 2009, INT CONF QUAL SOFTW, P239, DOI 10.1109/QSIC.2009.39
   Oinn T, 2006, CONCURR COMP-PRACT E, V18, P1067, DOI 10.1002/cpe.993
   *OMG, 2003, OCL 2 0 OMG FIN AD S
   *OMG, 2005, QUERY VIEW TRANSF QV
   *OMG, 2005, UML SPEC SUP VERS 2
   OZGUR T, 2007, COMPARISON MICROSOFT, P56
   PANDEY R, 1993, IEEE S VIS LANG BERG, P344
   PATIG S, 2008, 5 AS PAC C CONC MOD, P49
   PELECHANO V, 2006, DES SOFTW DIR MOD DS
   SHNEIDERMAN B, 1977, COMMUN ACM, V20, P373, DOI 10.1145/359605.359610
   Shull FJ, 2008, EMPIR SOFTW ENG, V13, P211, DOI 10.1007/s10664-008-9060-1
   Voelter M, 2009, J OBJECT TECHNOL, V8, P79, DOI 10.5381/jot.2009.8.6.c6
   VONDEURSEN A, 2000, SIGPLAN NOTICES, V35, P26
   YODER M, 2006, AM SOC ENG ED ANN C
   Zhao Y, 2007, 2007 5TH INTERNATIONAL CONFERENCE ON MICROWAVE AND MILLIMETER WAVE TECHNOLOGY PROCEEDINGS, P199
NR 50
TC 12
Z9 13
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2011
VL 19
IS 1
SI SI
BP 201
EP 233
DI 10.1007/s11219-010-9111-x
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TY
UT WOS:000286465500009
DA 2024-07-18
ER

PT J
AU Haigh, M
AF Haigh, Maria
TI Software quality, non-functional software requirements and IT-business
   alignment
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; IT business alignment; Software stakeholders;
   Requirements analysis; Non-functional software requirements
ID IMPROVEMENT; MANAGEMENT
AB 'High quality' might seem an obvious requirement for any piece of software, but do the different stakeholder groups involved in its production and use conceptualize this requirement in the same way? Many existing models refine the broad concept of quality into a number of well-defined and measurable attributes related to the software product itself and the development process which produced it. But despite growing awareness of the importance of achieving cultural alignment between holders of different business and IT groups, little attempt has been made to empirically examine the requirements for software quality held by different groups involved in the development process. We conducted a survey of more than 300 current and recently graduated students of one of the leading Executive MBA programs in the United States, asking them to rate the importance of each of 13 widely-cited attributes related to software quality. The results showed business role-related differences in some specific areas and agreement in many others. The results suggest that a strong shared culture may be able to bridge the gulf created between holders of IT and business stakeholder roles.
C1 [Haigh, Maria] Univ Wisconsin, Sch Informat Studies, Milwaukee, WI 53211 USA.
C3 University of Wisconsin System; University of Wisconsin Milwaukee
RP Haigh, M (corresponding author), Univ Wisconsin, Sch Informat Studies, 3210 N Maryland Ave,Bolton Hall,Rm 568, Milwaukee, WI 53211 USA.
EM mhaigh@uwm.edu
CR [Anonymous], 1997, SOFTWARE QUALITY THE
   Arthur L.J., 1985, Measuring programmer productivity and software quality
   AVIZIENIS A, 2001, IARPA IEEE RAS WORKS
   Balla K, 2001, SOFTWARE QUAL J, V9, P177, DOI 10.1023/A:1013301503616
   Blalock H.M., 1972, SOCIAL STAT
   Boehm B, 1996, IEEE SOFTWARE, V13, P25, DOI 10.1109/52.506460
   Boehm B. W., 1976, QUAN EV SOFTW QUAL 2, P592
   Boehm B.W., 1978, Characteristics of Software Quality
   CEGIELSKI CG, 2005, COMMUNICATIONS ACM, V48
   CERPA N, 1996, COMPUTING ENG MANAGE, V4, P1
   CHUNG L, 1995, 17 INT C SOFTW ENG N
   Chung L., 1999, NONFUNCTIONAL REQUIR
   DEKKERS N, 2001, MAXIMISING CUSTOMER
   Deming W.E., 1988, OUT CRISIS QUALITY P
   Deutsch M., 1988, Software Quality Engineering: A Total Technical and Management Approach
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   GENTLEMAN WM, 1996, P 6 INT C SOFTW QUAL
   Gibbons J.D., 1993, Nonparametric statistics
   Glass R.L., 1992, Building quality software
   HAIGH M, 2005, P INT WORKSH REQ ENG
   Haigh M., 2002, Software quality revisited: Diverging priorities between stakeholder groups?
   Jeffery M, 2004, MIT SLOAN MANAGE REV, V45, P41
   KUSTERS RJ, 2002, P 26 ANN INT COMP SO
   Luftman J, 1999, CALIF MANAGE REV, V42, P109, DOI 10.2307/41166021
   McCall J., 1977, Factors in software quality, V1
   McConnell S. C., 1993, Code complete: A practical handbook of software construction
   Perry W. E., 1991, QUALITY ASSURANCE IN
   Putnam L., 1992, MEASURES EXCELLENCE
   RUSSELL RH, 2003, STATE IT BUSINESS AL
   SHUMSKAS AF, 1992, SOFTWARE RISK MITIGA, P190
   Trice H.M., 1993, OCCUPATIONAL SUBCULT
   Trienekens JJM, 2009, SOFTWARE QUAL J, V17, P231, DOI 10.1007/s11219-008-9063-6
   2004, STANDISH GROUP REPOR
NR 33
TC 10
Z9 17
U1 1
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2010
VL 18
IS 3
BP 361
EP 385
DI 10.1007/s11219-010-9098-3
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 607BI
UT WOS:000278472900003
DA 2024-07-18
ER

PT J
AU Jureta, IJ
   Herssens, C
   Faulkner, S
AF Jureta, Ivan J.
   Herssens, Caroline
   Faulkner, Stephane
TI A comprehensive quality model for service-oriented systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Service-oriented computing; Quality model; Preferences; Priorities; UML
AB In a service-oriented system, a quality (or Quality of Service) model is used (i) by service requesters to specify the expected quality levels of service delivery; (ii) by service providers to advertise quality levels that their services achieve; and (iii) by service composers when selecting among alternative services those that are to participate in a service composition. Expressive quality models are needed to let requesters specify quality expectations, providers advertise service qualities, and composers finely compare alternative services. Having observed many similarities between various quality models proposed in the literature, we review these and integrate them into a single quality model, called QVDP. We highlight the need for integration of priority and dependency information within any quality model for services and propose precise submodels for doing so. Our intention is for the proposed model to serve as a reference point for further developments in quality models for service-oriented systems. To this aim, we extend the part of the UML metamodel specialized for Quality of Service with QVDP concepts unavailable in UML.
C1 [Jureta, Ivan J.; Faulkner, Stephane] Univ Namur, IMRU, B-5000 Namur, Belgium.
   [Herssens, Caroline] Univ Louvain, Informat Syst Res Unit, B-1348 Louvain, Belgium.
C3 University of Namur
RP Jureta, IJ (corresponding author), Univ Namur, IMRU, 8 Rempart Vierge, B-5000 Namur, Belgium.
EM ivan.jureta@fundp.ac.be; herssens@isys.ucl.ac.be;
   stephane.faulkner@fundp.ac.be
FU Belgian ICM/CIM Doctoral Fellowship Program
FX We are grateful to Emmanuel Mathot of the European Space Agency, who
   provided precise information about the GPOD project and assisted our
   efforts in describing quality information of services related to the
   GPOD project. The first author acknowledges funding from the Belgian
   ICM/CIM Doctoral Fellowship Program.
CR [Anonymous], 2002, IEEE Data Eng. Bull
   [Anonymous], 1986, 8402 ISO
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   Battle S., 2005, SEMANTIC WEB SERVICE
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Boehm B.W., 1978, Characteristics of Software Quality
   Brafman RI, 2006, J ARTIF INTELL RES, V25, P389, DOI 10.1613/jair.1895
   BRAHNMATH G, 2002, P SE SOFTW ENG C
   CASTRO J, 2002, INFORM SYSTEMS, V27
   Christensen E., 2001, WEB SERVICES DESCRIP
   DAMBROGIO A, 2006, P INT C WEB SERV ICW
   Deming W.E., 1982, QUALITY PRODUCTIVITY
   Feigenbaum A., 1951, Quality control: Principles, practice and administration
   Frolund S., 1998, QML: A Language for Quality of Service Specifi- cation
   Gravin D.A., 1988, Managing Quality: the Strategic and Competitive Edge
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   HERSSENS C, 2008, P INT C ADV INF SYST
   HERSSENS C, 2008, P IEEE INT C AUT COM
   Horrocks Ian., 2003, SWRL SEMANTIC WEB RU
   *IBM CORP, 2005, IBM SYSTEMS J, V44
   *IEEE, 1989, SOFTW ENG STAND
   *INT ORG STAND, 1998, CD15935
   Ishikawa K., 1985, WHAT IS TOTAL QUALIT
   Juran J.M., 1951, QUALITY CONTROL HDB, V1st
   JURETA IJ, 2007, P INT C WEB SERV ICW
   JURETA IJ, 2008, P INT C REQ ENG RE 0
   JURETA IJ, 2007, P INT C SERV OR COMP
   JURETA IJ, 2007, P 6 INT JOINT C AUT
   Keller A., 2003, J NETWORK SYSTEMS MA, V11
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   LOYALL JP, 1998, P INT S OBJ OR REAL
   MAXIMILIEN EM, 2004, P INT C SERV OR COMP
   McIlraith SA, 2001, IEEE INTELL SYST APP, V16, P46, DOI 10.1109/5254.920599
   McIlraith SA, 2003, IEEE INTELL SYST, V18, P90, DOI 10.1109/MIS.2003.1179199
   *OBJ MAN GROUP, 2005, UML PROF MOD QOS FAU
   *OBJ MAN GROUP, 1997, CORB TRAD SERV
   Osterweil L, 1996, ACM COMPUT SURV, V28, P738, DOI 10.1145/242223.242288
   Papazoglou MP, 2003, COMMUN ACM, V46, P25, DOI 10.1145/944217.944233
   Ran S., 2003, ACM SIGECOM EXCHANGE, V4, P1, DOI DOI 10.1145/844357.844360
   REEVES CA, 1994, ACAD MANAGE REV, V19, P419, DOI 10.2307/258934
   Shadbolt N, 2006, IEEE INTELL SYST, V21, P96, DOI 10.1109/MIS.2006.62
   SKENE J, 2004, P INT C SOFTW ENG IC
   Staab S., 2010, Handbook on Ontologies. International Handbooks on Information Systems
   STAEHLI R, 2003, P INT C REFL AD MIDD
   Tennenhouse D, 2000, COMMUN ACM, V43, P43, DOI 10.1145/332833.332837
   TOSIC V, 2002, P INT WORKSH WEB SER
   ZENG L, 2003, P INT WORLD WID WEB
   ZENG L, 2007, P INT C SERV OR COMP
   ZHOU C, 2004, P INT C WEB SERV ICW
NR 49
TC 16
Z9 22
U1 0
U2 16
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2009
VL 17
IS 1
BP 65
EP 98
DI 10.1007/s11219-008-9059-2
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 398AD
UT WOS:000262702700006
DA 2024-07-18
ER

PT J
AU Daneva, M
   Wieringa, R
AF Daneva, Maya
   Wieringa, Roel
TI Cost estimation for cross-organizational ERP projects: research
   perspectives
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 22nd ACM Symposium on Applied Computing
CY MAR 11-15, 2007
CL Seoul, SOUTH KOREA
SP ACM
DE enterprise resource planning; cost estimation models; cross-company
   estimation
ID SOFTWARE-DEVELOPMENT; PREDICTION
AB There are many methods for estimating size, effort, schedule and other cost aspects of IS projects, but only one specifically developed for Enterprise Resource Planning (ERP) (Stensrud, Info Soft Technol 43(7):413-423, 2001) and none for simultaneous, interdependent ERP projects in a cross-organizational context. The objective of this paper is to sketch the problem domain of cross-organizational ERP cost estimation, to survey available solutions, and to propose a research program to improve those solutions. In it, we: (i) explain why knowledge in the cost estimation of cross-organizational ERP is fragmented, (ii) assess the need to integrate research perspectives, and (iii) propose research directions that an integrated view of estimating cross-organizational ERP project cost should include.
C1 [Daneva, Maya; Wieringa, Roel] Univ Twente, Dept Comp Sci, NL-7500 AE Enschede, Netherlands.
C3 University of Twente
RP Daneva, M (corresponding author), Univ Twente, Dept Comp Sci, Drienerlolaan 5, NL-7500 AE Enschede, Netherlands.
EM m.daneva@utwente.nl; roelw@cs.utwente.nl
OI Daneva, Maya/0000-0001-7359-8013
CR Abrahao S, 2007, INFORM SOFTWARE TECH, V49, P366, DOI 10.1016/j.infsof.2006.06.001
   ABRAN A, 2001, COSMIC FFP MEASUREME
   ABTS C, 2000, USCCSE2000501 US U S
   Amram M, 2000, Real options: managing strategic investment in an uncertain world
   [Anonymous], YOURDON PRESS COMPUT
   Armour P, 2002, COMMUN ACM, V45, P15
   Armour PG, 2004, COMMUN ACM, V47, P15, DOI 10.1145/1022594.1022609
   ARNESEN S, 2005, STRATEGIC FINANC JAN, P43
   BARDHAN I, 2004, P 37 HAW INT C SYST, pB215
   Benaroch M, 1999, INFORM SYST RES, V10, P70, DOI 10.1287/isre.10.1.70
   *BENCHM PARTN IBM, 2000, ERP COLL VAL NETW ER
   Boehm B, 2000, ANN SOFTW ENG, V10, P177, DOI 10.1023/A:1018991717352
   BOEHM B, 2000, 8 INT C SOFTW ENG P, P311
   Boehm BW., 2000, SOFTWARE COST ESTIMA, VII
   BREHM L, 2001, P 34 HAW INT C SYST
   CARR D, 2002, BASELINE MAGAZI 1216
   COLLETT S, 1999, COMPUTER WORLD  1027
   Costagliola G, 2005, IEEE T SOFTWARE ENG, V31, P52, DOI 10.1109/TSE.2005.5
   COSTELLO RJ, 1995, J SYST SOFTWARE, V29, P39, DOI 10.1016/0164-1212(94)00127-9
   COTE V, 1988, J SYST SOFTWARE, V8, P121, DOI 10.1016/0164-1212(88)90005-2
   DANEVA M, 2006, P INT C REQ ENG MINN
   DANEVA M, 1999, SOFTWARE MEASUREMENT
   DANEVA M, 2007, INT S EMP SOFTW ENG, P500
   DANEVA M, 1999, P 5 S SOFTW REUS, P141
   Daneva M, 2006, REQUIR ENG, V11, P194, DOI 10.1007/s00766-006-0034-9
   Davenport T., 2000, MISSION CRITICAL REA
   DEKKERS T, 2003, INFORMATIE
   Dolado JJ, 2001, INFORM SOFTWARE TECH, V43, P61, DOI 10.1016/S0950-5849(00)00137-3
   Ebert C, 2001, IEEE SOFTWARE, V18, P62, DOI 10.1109/52.914748
   Epstein M.J., 2005, Measuring the payoffs of IT investments
   ESCHINGER C, 2004, G00127420 CT
   Garmus David., 2001, AW INFORMAT
   Gorschek T, 2004, SOFTWARE PRACT EXPER, V34, P1311, DOI 10.1002/spe.615
   Herbsleb JD, 2005, PROC INT CONF SOFTW, P524
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Holland CP, 2005, INFORM SOFTWARE TECH, V47, P999, DOI 10.1016/j.infsof.2005.09.006
   Horgan G, 1998, INFORM SOFTWARE TECH, V40, P409, DOI 10.1016/S0950-5849(98)00074-3
   Hu Q, 1997, IEEE T SOFTWARE ENG, V23, P379, DOI 10.1109/32.601078
   JONES C, 2004, CROSSTALK J DEFENSE, P5
   JONES C, 2005, SOFTWARE ENG STATE A
   Jones C., 1997, APPL SOFTWARE MEASUR
   Kelly S, 2002, SYSTEMS ENGINEERING FOR BUSINESS PROCESS CHANGE, P241
   Kitchenham B, 2004, IEEE T SOFTWARE ENG, V30, P1023, DOI 10.1109/TSE.2004.104
   Kitchenham B, 2003, IEEE T SOFTWARE ENG, V29, P542, DOI 10.1109/TSE.2003.1205181
   Ko DG, 2005, MIS QUART, V29, P59
   Koch C., 2002, CIO MAGAZINE
   MAIR C, 2004, P 8 INT C EMP ASS SO
   Mohagheghi P, 2005, PROC INT CONF SOFTW, P303
   Molokken K, 2003, 2003 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P223, DOI 10.1109/ISESE.2003.1237981
   MORRISON N, 2007, UTILIZING FUNCTIONAL
   Myrtveit I, 2005, IEEE T SOFTWARE ENG, V31, P380, DOI 10.1109/TSE.2005.58
   Myrtveit I, 2001, IEEE T SOFTWARE ENG, V27, P999, DOI 10.1109/32.965340
   *NETH SOFTW MEAS A, 1997, DEF COUNT GUID APPL
   ONEIL M, 2002, P ANN C JAP FUNCT PO
   Ramasubbu N, 2005, IEEE SOFTWARE, V22, P80, DOI 10.1109/MS.2005.69
   ROHDE J, 2005, CONQUERING CHALLENGE
   Rolland C., 2000, Requirements Engineering, V5, P180, DOI 10.1007/PL00010350
   *SAP AG, 1997, ASAP METH RAP R 3 IM
   *SAP SI, 2004, TOT COST OWN ERP ENV
   SARRAT C, 2002, COMPUTER WEEKLY 0902
   Seaman CB, 1999, IEEE T SOFTWARE ENG, V25, P557, DOI 10.1109/32.799955
   SEAVER DP, 2005, ANN EUR ERP S PAR FR
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Stamelos I, 2001, INFORM SOFTWARE TECH, V43, P759, DOI 10.1016/S0950-5849(01)00183-5
   Stamelos L, 2003, INFORM MANAGE-AMSTER, V40, P729, DOI 10.1016/S0378-7206(02)00099-X
   Stensrud E, 2003, IEEE T SOFTWARE ENG, V29, P398, DOI 10.1109/TSE.2003.1199070
   Stensrud E, 2001, INFORM SOFTWARE TECH, V43, P413, DOI 10.1016/S0950-5849(01)00147-1
   Stensrud E, 1998, FIFTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 1998, PROCEEDINGS, P205, DOI 10.1109/METRIC.1998.731247
   SUMMER M, 2000, SPEC INT GROUP COMP, P180
   SYMONS CR, 1991, SOFTWARE SIZING ESTI, P47
   Taudes A, 2000, MIS QUART, V24, P227, DOI 10.2307/3250937
   VOGELESANG F, 2006, INT WORKSH SOFTW MEA, P327
   Yin RK, 2002, Applied Social Research Methods Series, V34
NR 73
TC 17
Z9 17
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2008
VL 16
IS 3
BP 459
EP 481
DI 10.1007/s11219-008-9045-8
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330RE
UT WOS:000257959700008
OA Green Submitted, hybrid, Green Published
DA 2024-07-18
ER

PT J
AU En-Nouaary, A
AF En-Nouaary, Abdeslam
TI A scalable method for testing real-time systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Real-time systems; TIOA; testing; formal methods
ID DESIGN
AB Real-time systems (RTSs) are used in different domains such as telephone switching systems, air traffic control systems and patient monitoring systems. The behavior of RTSs is time-sensitive; that is, RTSs interact with their environment with input and output events under time constraints. The violation of such time constraints is the main cause of the misbehavior of RTSs, and may result in severe damage to human lives and the environment [Mandrioli, D., Morasca, S., & Morzenti, A. 1995. ACM Transactions on Computer Systems, 13(4), 365-398]. To prevent failures in RTSs, we must verify that the implementation of an RTS is correct before its deployment. Testing is one of the formal techniques that can be used to achieve this goal. It consists of three main phases: test generation, test execution, and test results analysis. This paper presents a test case generation method for RTSs modeled as Timed Input Output Automata (TIOA). The approach is made in two steps. First, the TIOA describing the system being tested is sampled to construct a subautomaton, which is easily testable (i.e., easy to generate test cases from it). Then, the resulting subautomaton is traversed to generate test cases. Our method is scalable in the sense that it generates a small number of test cases even when the specifications are significant. Moreover, the test cases derived by our method are executable (i.e., they can be run on any error-free implementation of the system being tested).
C1 Concordia Univ, Dept Elect & Comp Engn, Montreal, PQ H3G 2W1, Canada.
C3 Concordia University - Canada
RP En-Nouaary, A (corresponding author), Concordia Univ, Dept Elect & Comp Engn, 1515 St Catherine W, Montreal, PQ H3G 2W1, Canada.
EM ennouaar@ece.concordia.ca
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   [Anonymous], THESIS U TWENTE
   CARDELLOLIVER R, 1998, 5 INT S FORM TECHN R, P251
   Castanet R, 1998, IEEE IC COMP COM NET, P378, DOI 10.1109/ICCCN.1998.998798
   Cerans Karlis., 1993, CAV 92, P302
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   CLARKE D, 1997, P 3 INT WORKSH OBJ O
   DASARATHY B, 1985, IEEE T SOFTWARE ENG, V11, P80, DOI 10.1109/TSE.1985.231845
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   En-Nouaary A, 2002, IEEE T SOFTWARE ENG, V28, P1023, DOI 10.1109/TSE.2002.1049402
   ENNOUAARY A, 1999, 6 INT C REAL TIM SYS
   ENNOUAARY A, 1997, P 6 C FRANC ING PROT
   ENNOUAARY A, 1990, 19 IEEE REAL TIM SYS, P230
   ENNOUAARY A, 2003, TESTCOM NICE FRANCE
   Fecko MA, 2000, TESTCOM OTTAWA CANAD, P91
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   Garland SJ., 2005, TIOA LANGUAGE TOOLSE
   GONENC G, 1970, IEEE T COMPUT, VC 19, P551, DOI 10.1109/T-C.1970.222975
   Higashino T, 1999, INT FED INFO PROC, V21, P197
   *ISO9646, 1991, INF PROC SYST OP SYS
   Khoumsi A, 2000, SEVENTH INTERNATIONAL CONFERENCE ON REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P441, DOI 10.1109/RTCSA.2000.896424
   KHOUMSI A, 2000, TESTCOM OTTAWA CANAD
   Larsen K. G., 1994, Mathematical Foundations of Programming Semantics. 9th International Conference Proceedings, P160
   MANDRIOLI D, 1995, ACM T COMPUT SYST, V13, P365, DOI 10.1145/210223.210226
   NAITO S, 1981, P IEEE FAULT TOL COM, P238
   Nielsen B., 1998, 5 INT S FORM TECHN R, P59
   SABNANI K, 1988, COMPUT NETWORKS ISDN, V15, P285, DOI 10.1016/0169-7552(88)90064-5
   Salva S, 2001, P 1 WORKSH FORM APPR, P93
   Springintveld J, 2001, THEOR COMPUT SCI, V254, P225, DOI 10.1016/S0304-3975(99)00134-6
   SPRINGINTVELD J, 1996, P 4 INT SCH S FORM T, V1135
   TAYLOR B, 1980, P NAT TEL C HOUST TX, V1
   VUONG ST, 1989, P 2 INT WORKSH PROT
NR 32
TC 12
Z9 12
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2008
VL 16
IS 1
BP 3
EP 22
DI 10.1007/s11219-007-9021-8
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248QQ
UT WOS:000252169800002
DA 2024-07-18
ER

PT J
AU Lian, JX
   Hu, ZX
   Shatz, SM
AF Lian, Jiexin
   Hu, Zhaoxia
   Shatz, Sol M.
TI Simulation-based analysis of UML statechart diagrams: methods and case
   studies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE design analysis; UML statecharts; formal methods; Petri nets
AB We present a comprehensive unified modeling language (UML) statechart diagram analysis framework. This framework allows one to progressively perform different analysis operations to analyze UML statechart diagrams at different levels of model complexity. The analysis operations supported by the framework are based on analyzing Petri net models converted from UML statechart diagrams using a previously proposed transformation approach. After introducing the general framework, the paper emphasizes two simulation-based analysis operations from the framework: direct MSC inspection, which provides a visual representation of system behavior described by statechart diagrams; and a pattern-based trace query technique, which can be used to define and query system properties. Two case-study examples are presented with different emphasis. The gas station example is a simple multi-object system used to demonstrate both the visual and query-based analysis operations. The early warning system example uses only one object, but features composite states and includes analysis specifically aimed at one composite state feature, history states.
C1 [Lian, Jiexin; Hu, Zhaoxia; Shatz, Sol M.] Univ Illinois, Dept Comp Sci, Chicago, IL USA.
C3 University of Illinois System; University of Illinois Chicago;
   University of Illinois Chicago Hospital
RP Shatz, SM (corresponding author), Univ Illinois, Dept Comp Sci, Chicago, IL USA.
EM shatz@uic.edu
CR Baresi Luciano., 2001, Concurrent Object-Oriented Programming and Petri Nets, volume 2001 of Lecture Notes in Computer Science, V2001, P271
   Bondavalli A, 2001, COMPUT SYST SCI ENG, V16, P265
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Corbett J. C., 2000, P INT C SOFTW ENG IC
   CRANE ML, 2005, P 8 INT C MOD DRIV E
   DONG Z, 2003, P INT C SOFTW ENG KN
   DWYER MB, 1999, P INT C SOFTW ENG IC
   GABOR H, 2000, P INT S HIGH ASS SYS
   Gery E., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P1
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D., 1998, MODELING REACTIVE SY
   HU Z, 2006, J AUTOMATED SOFTWARE, V13, P423
   HU Z, 2005, P INT WORKSH APPL UM
   Hu Zhaoxia, 2004, SEKE, P213
   ITU-T, 1999, ITU-T Recommendation G.992.1 -Asymmetric digital subscriber line (ADSL) transceivers I. T. U.-T. S. Sector
   Jensen K., 1996, COLOURED PETRI NETS, VI.
   KRISTENSEN, 1998, INT J SOFTW TOOLS TE, P98
   Lilius Johan., 1999, P 14 IEEE INT C AUTO, P255
   MCUMBER WE, 1999, P IEEE HIGH ASSURANC
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   PALTOR I, 1999, UML 99 UNIFIED MODEL, V1723
   PETTIT RG, 2003, WORKSH OBJ OR REAL T
   PETTIT RG, 2001, P COL PETR NETS 2001
   PETTIT RG, 2000, P UML 2000 WORKSH DY, V1939
   *RAT ROS REALT DOC, VERS 2003 06 RAT SOF
   Saldhana JA, 2001, INT J SOFTW ENG KNOW, V11, P643, DOI 10.1142/S021819400100075X
   Whittle J., 2000, Journal of Database Management, V11, P4, DOI 10.4018/jdm.2000100101
   Xu HP, 2003, IEEE T SOFTWARE ENG, V29, P15, DOI 10.1109/TSE.2003.1166586
NR 28
TC 11
Z9 14
U1 1
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2008
VL 16
IS 1
BP 45
EP 78
DI 10.1007/s11219-007-9020-9
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248QQ
UT WOS:000252169800004
DA 2024-07-18
ER

PT J
AU Ceccato, M
   Marin, M
   Mens, K
   Moonen, L
   Tonella, P
   Tourwé, T
AF Ceccato, M.
   Marin, M.
   Mens, K.
   Moonen, L.
   Tonella, P.
   Tourwe, T.
TI Applying and combining three different aspect mining techniques
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 13th International Workshop on Program Comprehension
CY MAY 15-16, 2005
CL St Louis, MO
SP IEEE Comp Soc, TC Software Engn
AB Understanding a software system at source-code level requires understanding the different concerns that it addresses, which in turn requires a way to identify these concerns in the source code. Whereas some concerns are explicitly represented by program entities (like classes, methods and variables) and thus are easy to identify, crosscutting concerns are not captured by a single program entity but are scattered over many program entities and are tangled with the other concerns. Because of their crosscutting nature, such crosscutting concerns are difficult to identify, and reduce the understandability of the system as a whole.
   In this paper, we report on a combined experiment in which we try to identify crosscutting concerns in the JHotDraw framework automatically. We first apply three independently developed aspect mining techniques to JHotDraw and evaluate and compare their results. Based on this analysis, we present three interesting combinations of these three techniques, and show how these combinations provide a more complete coverage of the detected concerns as compared to the original techniques individually. Our results are a first step towards improving the understandability of a system that contains crosscutting concerns, and can be used as a basis for refactoring the identified crosscutting concerns into aspects.
C1 Delft Univ Technol, Delft, Netherlands.
   ITCirst, Trento, Italy.
   Catholic Univ Louvain, B-1348 Louvain, Belgium.
   CWI, NL-1009 AB Amsterdam, Netherlands.
C3 Delft University of Technology; Fondazione Bruno Kessler; FBK-ICT -
   Center for Information & Communication Technology; Universite Catholique
   Louvain
RP Moonen, L (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM ceccato@itc.it; a.m.marin@ewi.tudelft.nl; kim.mens@uclouvain.be;
   leon.moonen@computer.org; tonella@itc.it; tom.tourwe@cwi.nl
RI Ceccato, Mariano/T-7139-2019; Moonen, Leon/M-8790-2015; Tonella,
   Paolo/C-1702-2015
OI Ceccato, Mariano/0000-0001-7325-0316; Moonen, Leon/0000-0002-1761-6771;
   Tonella, Paolo/0000-0003-3088-0339; Mens, Kim/0000-0003-0303-1630
CR [Anonymous], P OBJ OR PROGR SYST
   [Anonymous], 2003, ASPECTJ PROGR GUID
   Beck Kent, 1997, SMALLTALK BEST PRACT
   BRUNTINK M, 2006, P 28 INT C SOFTW ENG
   DEURSEN A, 2003, P 1 INT WORKSH REFRA
   Eisenbarth T, 2003, IEEE T SOFTWARE ENG, V29, P210, DOI 10.1109/TSE.2003.1183929
   FABRY J, 2005, THESIS VRIJE U BRUSS
   Gamma Erich., 1994, DESIGN PATTERNS
   Ganter B, 1999, Formal concept analysis: Mathematical foundations
   Henderson-Sellers B., 1996, Object-Oriented Metrics, measures of complexity
   KELLENS A, 2005, 200507 INGI U CATH L
   Lippert M., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P418, DOI 10.1109/ICSE.2000.870432
   Marin M, 2005, PROC IEEE INT CONF S, P673
   Marin M, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P132, DOI 10.1109/WCRE.2004.23
   MARIN M, 2006, P 2 WORKSH LINK ASP
   MARIN M, 2005, P  INT WORKSH MOD AN
   Mens K, 2005, COMPUT LANG SYST STR, V31, P183, DOI 10.1016/j.cl.2004.11.004
   PORTER MF, 1980, PROGRAM-AUTOM LIBR, V14, P130, DOI 10.1108/eb046814
   TONELLA P, 2004, P 11 IEEE WORK C REV
   [No title captured]
NR 20
TC 27
Z9 34
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2006
VL 14
IS 3
BP 209
EP 231
DI 10.1007/s11219-006-9217-3
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 067KL
UT WOS:000239300800003
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Emer, MCFP
   Vergilio, SR
AF Emer, MCFP
   Vergilio, SR
TI Selection and evaluation of test data based on genetic programming
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE evolutionary computation; testing criteria; mutation analysis
ID SOFTWARE TEST DATA
AB In the literature, we find several criteria that consider different aspects of the program to guide the testing, a fundamental activity for software quality assurance. They address two important questions: how to select test cases to reveal as many fault as possible and how to evaluate a test set T and end the test. Fault-based criteria, such as mutation testing, use mutation operators to generate alternatives for the program P being tested. The goal is to derive test cases capable of producing different behaviors in P and its alternatives. However, this approach usually does not allow the test of interaction between faults since the alternative differs from P by a simple modification. This work explores the use of Genetic Programming ( GP), a field of Evolutionary Computation, to derive alternatives for testing P and introduces two GP-based procedures for selection and evaluation of test data. The procedures are related to the above questions, usually addressed by most testing criteria and tools. A tool, named GPTesT, is described and results from an experiment using this tool are also presented. The results show the applicability of our approach and allow comparison with mutation testing.
C1 Univ Fed Parana, Dept Comp Sci, CP 19081, BR-81531970 Curitiba, Parana, Brazil.
C3 Universidade Federal do Parana
RP Emer, MCFP (corresponding author), Univ Fed Parana, Dept Comp Sci, CP 19081, BR-81531970 Curitiba, Parana, Brazil.
RI Emer, Maria Claudia/ABC-1365-2020
OI Emer, Maria Claudia/0000-0002-0963-1891
CR [Anonymous], SOFTWARE QUALITY PRO
   BERGADANO F, 1995, INDUCTIVE LOGIC PROG
   BOTTACI L., 2001, P SEMINALL WORKSH 23
   BUDD TA, 1982, ACTA INFORM, V18, P31, DOI 10.1007/BF00625279
   CHUNG IS, 1998, P SEKE SAN FRANC JUN
   Delamaro M.E., 1996, P C PERFORMABILITY C, P79
   DeMillo R. A., 1988, Proceedings of the Second Workshop on Software Testing, Verification, and Analysis (Cat. No.88TH0225-3), P142, DOI 10.1109/WST.1988.5369
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   EMER MCF, 2002, P GEN EV C GECCO JUL, P1343
   HOLLAND JH, 1992, ADAPTATION NATURAL A
   HOWDEN WE, 1982, IEEE T SOFTWARE ENG, V8, P371, DOI 10.1109/TSE.1982.235571
   Jones BF, 1996, SOFTWARE ENG J, V11, P299, DOI 10.1049/sej.1996.0040
   Koza J. R., 1994, Genetic programming II: Automatic discovery of reusable programs, VII, DOI DOI 10.5555/183460
   Koza J.R., 1992, GENETIC PROGRAMMING, VVolume 1
   MATHUR AP, 1993, 7 S BRAS ENG SOFTW R, P320
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Morell L.J., 1988, Proceedings of the Second Workshop on Software Testing, Verification, and Analysis, Banff, Canada, P45, DOI DOI 10.1109/WST.1988.5353
   Myers Glenford J., 2011, The Art of Software Testing
   PARGAS RP, 1999, J SOFTWARE TESTING V, V9, P263
   RAPPS S, 1985, IEEE T SOFTWARE ENG, V11, P367, DOI 10.1109/TSE.1985.232226
   ROPER M, 1995, RR95195 U STRATH
   SPINOZA E, 2001, P BRAZ COMP SOC C FO
   TRACEY N, 1998, P 13 IEEE C AUT SOFT
   Wegener J, 2001, INFORM SOFTWARE TECH, V43, P841, DOI 10.1016/S0950-5849(01)00190-2
   WEICHSELBAUM R, 1998, P 6 INT C SOFTW TEST
   WEYUKER EJ, 1983, ACM T PROGR LANG SYS, V5, P641, DOI 10.1145/69575.357231
   Xanthakis S, 1992, P 5 INT C SOFTW ENG
NR 28
TC 13
Z9 13
U1 0
U2 1
PU KLUWER ACADEMIC PUBL
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2003
VL 11
IS 2
BP 167
EP 186
DI 10.1023/A:1023772729494
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 678DV
UT WOS:000182850500005
DA 2024-07-18
ER

PT J
AU Golmohammadi, A
   Zhang, M
   Arcuri, A
AF Golmohammadi, Amid
   Zhang, Man
   Arcuri, Andrea
TI .NET/C# instrumentation for search-based software testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE .NET instrumentation; White-box test generation; SBST; RESTful APIs
ID GENERATION; INDUSTRY
AB C# is one of the most widely used programming languages. However, to the best of our knowledge, there has been no work in the literature aimed at enabling search-based software testing techniques for applications running on the .NET platform, like the ones written in C#. In this paper, we propose a search-based approach and an open source tool to enable white-box testing for C# applications. The approach is integrated with a .NET bytecode instrumentation, in order to collect code coverage at runtime during the search. In addition, by taking advantage of Branch Distance, we define heuristics to better guide the search, e.g., how heuristically close it is to cover a branch in the source code. To empirically evaluate our technique, we integrated our tool into the EvoMaster test generation tool and conducted experiments on three .NET RESTful APIs as case studies. Results show that our technique significantly outperforms gray-box testing tools in terms of code coverage.
C1 [Golmohammadi, Amid; Zhang, Man; Arcuri, Andrea] Kristiania Univ Coll, Oslo, Norway.
   [Arcuri, Andrea] Oslo Metropolitan Univ, Oslo, Norway.
C3 Kristiania University College; Oslo Metropolitan University (OsloMet)
RP Zhang, M (corresponding author), Kristiania Univ Coll, Oslo, Norway.
EM amid.golmohammadi@kristiania.no; man.zhang@kristiania.no;
   andrea.arcuri@kristiania.no
FU Kristiania University College; European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation program [864972];
   European Research Council (ERC) [864972] Funding Source: European
   Research Council (ERC)
FX Open access funding provided by Kristiania University College. This work
   is supported by the European Research Council (ERC) under the European
   Union's Horizon 2020 research and innovation program (grant agreement
   no. 864972).
CR Alshraideh M, 2006, SOFTW TEST VERIF REL, V16, P175, DOI 10.1002/stvr.354
   [Anonymous], STAT OCT
   [Anonymous], JETBRAINS RID
   Arcuri A., 2021, J. Open Source Softw, V6, P2153, DOI [10.21105/joss.02153, DOI 10.21105/JOSS.02153]
   Arcuri A, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3477271
   Arcuri A, 2021, IEEE SOFTWARE, V38, P72, DOI 10.1109/MS.2020.3013820
   Arcuri A, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3391533
   Arcuri A, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3293455
   Arcuri A, 2018, INFORM SOFTWARE TECH, V104, P195, DOI 10.1016/j.infsof.2018.05.003
   Arcuri A, 2018, EMPIR SOFTW ENG, V23, P1959, DOI 10.1007/s10664-017-9570-9
   Arcuri A, 2018, IEEE INT CONF SOFTW, P394, DOI 10.1109/ICST.2018.00046
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Arcuri Andrea., 2011, ISSTA
   Atlidakis V, 2019, PROC INT CONF SOFTW, P748, DOI 10.1109/ICSE.2019.00083
   Belhadi A., 2022, GENETIC EVOLUTIONARY
   EvoMaster, About us
   EvoMaster Benchmark (EMB), About us
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Garousi Vahid, 2017, Software Quality Journal, V25, P1091, DOI 10.1007/s11219-016-9319-5
   Garousi V., 2017, P 21 INT C EV ASS SO, P65
   Garousi V, 2019, EMPIR SOFTW ENG, V24, P2540, DOI 10.1007/s10664-019-09711-y
   Garousi V, 2017, IEEE SOFTWARE, V34, P38, DOI 10.1109/MS.2017.3641116
   Harman M, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379787
   Hatfield-Dodds Z, 2022, PROC IEEE ACM INT C, P345, DOI [10.1145/3510454.3528637, 10.1109/ICSE-Companion55297.2022.9793781]
   Kim M, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P289, DOI 10.1145/3533767.3534401
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   Laranjeiro N, 2021, IEEE ACCESS, V9, P24738, DOI 10.1109/ACCESS.2021.3056505
   Lehre PK, 2007, IEEE C EVOL COMPUTAT, P1882
   Mao K., 2016, P 25 INT S SOFTW TES, P94
   Martin-Lopez A, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P682, DOI 10.1145/3460319.3469082
   NET Platform, US
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Panichella S, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P20, DOI 10.1109/SBST52555.2021.00011
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Viglianisi E, 2020, IEEE INT CONF SOFTW, P142, DOI 10.1109/ICST46399.2020.00024
   Wu H., 2022, ACM IEEE INT C SOFTW
   Zhang M., 2022, IN IEEE INT C SOFTW
   Zhang M., 2022, ARXIV, DOI DOI 10.48550/ARXIV.2208.03988
   Zhang M, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3464940
   Zhang M, 2019, PROCEEDINGS OF THE 2019 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE (GECCO'19), P1426, DOI 10.1145/3321707.3321815
   Zhang Mingyuan, 2022, arXiv
NR 41
TC 2
Z9 2
U1 2
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1439
EP 1465
DI 10.1007/s11219-023-09645-1
EA SEP 2023
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001056994400001
OA hybrid
DA 2024-07-18
ER

PT J
AU Alvarado-Valiente, J
   Romero-Alvarez, J
   Moguel, E
   García-Alonso, J
   Murillo, JM
AF Alvarado-Valiente, Jaime
   Romero-Alvarez, Javier
   Moguel, Enrique
   Garcia-Alonso, Jose
   Murillo, Juan M. M.
TI Technological diversity of quantum computing providers: a comparative
   study and a proposal for API Gateway integration
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quantum computing; Quantum services; Quantum providers; Quantum API
   Gateway
AB After decades of advances, mainly theoretical, in recent years quantum computing has begun to show its first practical applications. This new and revolutionary technology aims to enhance essential areas such as cybersecurity, financial services, or medicine. The growth of this technology has encouraged different research centers and big companies such as IBM, Amazon, and Google to dedicate considerable efforts to developing new technologies that bring quantum computing to the market. However, these technologies are not yet mature and create a significant vendor lock-in problem. Therefore, new tools are needed that facilitate access to this technology and that allow developers to increase the abstraction level at which they work. Given that the integration of quantum software should not be very different from that of classical services, we can take advantage of the knowledge acquired and use current techniques of service-oriented computing. In this work, we have carried out a technical comparison between different quantum computing service providers using a case study, by performing empirical tests based on the Travelling Salesman Problem. This study highlights the differences between the main providers. To address these differences and reduce the vendor lock-in effect, we propose an extension of the Quantum API Gateway to support the different providers and the casuistry that each one presents. This would allow programmers to deploy quantum code without vendor-specific knowledge of the major providers, which would facilitate access and simplify the development of quantum applications.
C1 [Alvarado-Valiente, Jaime; Romero-Alvarez, Javier; Garcia-Alonso, Jose] Univ Extremadura, Quercus Software Engn Grp, Avda Univ S-N, Caceres 10004, Spain.
   [Moguel, Enrique; Murillo, Juan M. M.] Comp & Adv Technol Fdn Extremadura, Carretera Nacl 521, Km 41 8, Caceres 10071, Spain.
C3 Universidad de Extremadura
RP Alvarado-Valiente, J (corresponding author), Univ Extremadura, Quercus Software Engn Grp, Avda Univ S-N, Caceres 10004, Spain.
EM jaimeav@unex.es; jromero@unex.es; enrique@unex.es; jgaralo@unex.es;
   director@cenits.es
RI Moguel, Enrique/D-9813-2016; Garcia-Alonso, Jose/A-4316-2017
OI Garcia-Alonso, Jose/0000-0002-6819-0299; Romero-Alvarez,
   Javier/0000-0002-3162-1446
CR Albash T, 2018, REV MOD PHYS, V90, DOI 10.1103/RevModPhys.90.015002
   Bergholm V., 2018, Pennylane: Automatic differenti- ation of hybrid quantum-classical computa- tions
   Bernstein E, 1997, SIAM J COMPUT, V26, P1411, DOI 10.1137/S0097539796300921
   Chuang IL, 1998, PHYS REV LETT, V80, P3408, DOI 10.1103/PhysRevLett.80.3408
   De Stefano M, 2022, J SYST SOFTWARE, V190, DOI 10.1016/j.jss.2022.111326
   Garcia-Alonso J, 2022, IEEE INTERNET COMPUT, V26, P34, DOI 10.1109/MIC.2021.3132688
   Gidney C, 2021, QUANTUM-AUSTRIA, V5, P1, DOI 10.22331/q-2021-07-06-497
   Grumbling E, 2019, CONSEN STUDY REPORTS, P196
   Gyongyosi L, 2019, COMPUT SCI REV, V31, P51, DOI 10.1016/j.cosrev.2018.11.002
   Humble TS, 2019, IEEE DES TEST, V36, P69, DOI 10.1109/MDAT.2019.2907130
   Karp Richard M, 1972, COMPLEXITY COMPUTER, P85, DOI DOI 10.1007/978-1-4684-2001-2_9
   MacQuarrie ER, 2020, NAT REV PHYS, V2, P596, DOI 10.1038/s42254-020-00247-5
   Mandviwalla A, 2018, IEEE INT CONF BIG DA, P2531, DOI 10.1109/BigData.2018.8622457
   Moguel E, 2022, SOFTWARE QUAL J, V30, P983, DOI 10.1007/s11219-022-09589-y
   Ohlmann JW, 2007, INFORMS J COMPUT, V19, P80, DOI 10.1287/ijoc.1050.0145
   Papalitsas C, 2019, ALGORITHMS, V12, DOI 10.3390/a12110224
   Perez-Castillo R., 2020, SHORT PAP P 1 INT WO, V2705, P1
   Piattini Mario, 2020, ACM SIGSOFT Software Engineering Notes, V45, P12, DOI 10.1145/3402127.3402131
   Rahaman M., 2015, GLOBAL J COMPUTER SC
   Rasool R.U., 2022, Quantum computing for healthcare: A review
   Rojo J., 2021, ARXIV210504421, V3008, P1
   Serrano MA, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3548679
   Silva V., 2018, PRACTICAL QUANTUM CO, DOI [10.1007/978-1-4842-4218-6, DOI 10.1007/978-1-4842-4218-6]
   Soeparno H, 2021, PROCEDIA COMPUT SCI, V179, P944, DOI 10.1016/j.procs.2021.01.084
   Srinivasan K., 2018, ARXIV180510928
   Wille R, 2019, DES AUT TEST EUROPE, P1234, DOI 10.23919/DATE.2019.8715261
   Zhao J, 2021, SOFTWARE PRACT EXPER, V51, P2143, DOI 10.1002/spe.2895
   Zhou YQ, 2020, PHYS REV X, V10, DOI 10.1103/PhysRevX.10.041038
NR 28
TC 2
Z9 2
U1 4
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 53
EP 73
DI 10.1007/s11219-023-09633-5
EA MAY 2023
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:000991295200001
OA hybrid
DA 2024-07-18
ER

PT J
AU Pei, HY
   Yin, BB
   Huang, LZ
   Cai, KY
AF Pei, Hanyu
   Yin, Beibei
   Huang, Linzhi
   Cai, Kai-Yuan
TI A dynamic random testing strategy in the context of cloud computing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Dynamic random testing; Cloud testing; Resource allocation; Software
   cybernetics
ID PROPORTIONAL SAMPLING STRATEGY; NEURAL-NETWORKS; SOFTWARE; PARTITION
AB Dynamic random testing (DRT) strategy uses the testing results collected online to guide the selection of test cases, which can improve the fault detection effectiveness over random testing (RT) and random partition testing (RPT). The efficiency of current DRT is mainly concerned with traditional testing environment, i.e., the test cases are executed sequentially. The emergence of cloud testing provides the parallel testing environment to execute concurrent test cases simultaneously. If DRT strategy can be organically integrated into cloud environment, then the testing efficiency can be improved and the advantage of DRT can be maintained. However, how to select test cases in a parallel environment is a problem worth of exploration, and the resource allocation process should also be considered. Therefore, in this paper, we propose a dynamic random testing strategy in the context of cloud computing (DRT-C), which inherits the principle of DRT and adapts it into the cloud environment. In DRT-C, the test cases are selected and executed in parallel, and the testing profile is adjusted on the basis of concurrent testing results. Meanwhile, the testing cost, including time and resource costs, is optimized by a test case allocation method. The proposed strategy is evaluated by using 6 real-world software programs and 3 simulated software programs. The experimental results demonstrate that DRT-C significantly outperforms round robin schedule (RRS) and RPT-FIFO (first in first out) in terms of fault detection effectiveness, and is slightly better than DRT-FIFO. Besides, DRT-C outperforms other testing strategies in terms of testing costs.
C1 [Pei, Hanyu; Yin, Beibei; Huang, Linzhi; Cai, Kai-Yuan] Beihang Univ, Sch Automat Sci & Elect Engn, Dept Automat Control, Beijing, Peoples R China.
C3 Beihang University
RP Yin, BB (corresponding author), Beihang Univ, Sch Automat Sci & Elect Engn, Dept Automat Control, Beijing, Peoples R China.
EM peihanyu@buaa.edu.cn; yinbeibei@buaa.edu.cn; huanglinzhi@buaa.edu.cn;
   kycai@buaa.edu.cn
OI Huang, Linzhi/0009-0005-2632-9511; Pei, Hanyu/0000-0001-9893-9814
FU National Key R&D Program of China [2021YFB 1600601]; National Natural
   Science Foundation of China [61772055, 61872169]
FX This work is supported in part by National Key R&D Program of China
   under Grant 2021YFB 1600601, in part by the National Natural Science
   Foundation of China under Grant 61772055 and Grant 61872169.
CR Arcuri A, 2012, IEEE T SOFTWARE ENG, V38, P1088, DOI 10.1109/TSE.2011.85
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Arcuri A, 2012, IEEE T SOFTWARE ENG, V38, P258, DOI 10.1109/TSE.2011.121
   Bertolino A, 2021, IEEE T SOFTWARE ENG, V47, P881, DOI 10.1109/TSE.2019.2906187
   Boland PJ, 2003, IEEE T SOFTWARE ENG, V29, P88, DOI 10.1109/TSE.2003.1166591
   Cai K.Y., 2009, P 20 INT S SOFTWARE, P1
   Cai KY, 2007, J SYST SOFTWARE, V80, P1328, DOI 10.1016/j.jss.2006.11.008
   Cai KY, 2005, P INT COMP SOFTW APP, P113
   Cai KY, 2002, INFORM SOFTWARE TECH, V44, P841, DOI 10.1016/S0950-5849(02)00108-8
   Calheiros RN, 2011, SOFTWARE PRACT EXPER, V41, P23, DOI 10.1002/spe.995
   Cañizares PC, 2020, J SYST SOFTWARE, V163, DOI 10.1016/j.jss.2020.110522
   Chan FT, 1996, INFORM SOFTWARE TECH, V38, P775, DOI 10.1016/0950-5849(96)01103-2
   Chang V, 2016, FUTURE GENER COMP SY, V57, P24, DOI 10.1016/j.future.2015.09.031
   Chang XL, 2018, IEEE T CLOUD COMPUT, V6, P991, DOI 10.1109/TCC.2016.2560158
   Chen JF, 2018, J SYST SOFTWARE, V135, P107, DOI 10.1016/j.jss.2017.09.031
   Chen MZ, 2019, IEEE COMMUN SURV TUT, V21, P3039, DOI 10.1109/COMST.2019.2926625
   Chen TY, 2006, 2006 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P300
   Chen TY, 2007, IEEE T RELIAB, V56, P562, DOI 10.1109/TR.2007.903293
   Chen TY, 1996, IEEE T SOFTWARE ENG, V22, P109, DOI 10.1109/32.485221
   CHEN TY, 1994, IEEE T SOFTWARE ENG, V20, P977, DOI 10.1109/32.368132
   Chen TY, 2001, J SYST SOFTWARE, V58, P65, DOI 10.1016/S0164-1212(01)00028-0
   Chow C, 2013, INT CONF QUAL SOFTW, P268, DOI 10.1109/QSIC.2013.19
   Gelenbe E, 1999, NEURAL COMPUT, V11, P953, DOI 10.1162/089976699300016520
   Gutjahr WJ, 1999, IEEE T SOFTWARE ENG, V25, P661, DOI 10.1109/32.815325
   Hao D, 2016, IEEE T SOFTWARE ENG, V42, P490, DOI 10.1109/TSE.2015.2496939
   Hao D, 2014, ACM T SOFTW ENG METH, V24, DOI 10.1145/2685614
   Hu B, 2022, IEEE T CLOUD COMPUT, V10, P662, DOI 10.1109/TCC.2019.2956498
   Huang RB, 2015, INFORM SOFTWARE TECH, V67, P13, DOI 10.1016/j.infsof.2015.06.003
   Hwang K, 2016, IEEE T PARALL DISTR, V27, P130, DOI 10.1109/TPDS.2015.2398438
   Junpeng Lv, 2011, Proceedings of the 2011 IEEE 35th IEEE Annual Computer Software and Applications Conference Workshops (COMPSACW 2011). Volume II: Workshops, P19, DOI 10.1109/COMPSACW.2011.14
   Kazmi R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3057269
   Kumar R., 2014, P INT J ADV ENG TECH, V111, P116
   Kuo FC, 2009, INT CONF QUAL SOFTW, P51, DOI 10.1109/QSIC.2009.15
   Li Y, 2015, P INT COMP SOFTW APP, P466, DOI 10.1109/COMPSAC.2015.257
   Lv JP, 2014, IEEE T SYST MAN CY-S, V44, P1649, DOI 10.1109/TSMC.2014.2318019
   Mei H, 2012, IEEE T SOFTWARE ENG, V38, P1258, DOI 10.1109/TSE.2011.106
   OSTRAND TJ, 1988, COMMUN ACM, V31, P676, DOI 10.1145/62959.62964
   Pahl C, 2019, IEEE T CLOUD COMPUT, V7, P677, DOI 10.1109/TCC.2017.2702586
   Pandey S, 2010, INT CON ADV INFO NET, P400, DOI 10.1109/AINA.2010.31
   Pei HY, 2021, INFORM SOFTWARE TECH, V131, DOI 10.1016/j.infsof.2020.106470
   Pei HY, 2019, IEEE T RELIAB, V68, P872, DOI 10.1109/TR.2019.2911593
   Pei HY, 2018, IEEE INT SYMP SOFTW, P148, DOI 10.1109/ISSREW.2018.000-9
   Rasmussen RV, 2008, EUR J OPER RES, V188, P617, DOI 10.1016/j.ejor.2007.05.046
   Song CH, 2022, IEEE T CLOUD COMPUT, V10, P72, DOI 10.1109/TCC.2021.3117604
   Sun CA, 2019, IEEE T COMPUT, V68, P157, DOI 10.1109/TC.2018.2866040
   Tao YC, 2022, IEEE T CLOUD COMPUT, V10, P56, DOI 10.1109/TCC.2021.3117580
   Wang L, 2018, IEEE T CLOUD COMPUT, V6, P33, DOI 10.1109/TCC.2015.2474406
   Wang XF, 2020, IEEE COMMUN SURV TUT, V22, P869, DOI 10.1109/COMST.2020.2970550
   Xiao P, 2020, IEEE T SYST MAN CY-S, V50, P911, DOI 10.1109/TSMC.2017.2761767
   Yang HJ, 2017, J SYST SOFTWARE, V124, P169, DOI 10.1016/j.jss.2016.08.095
   Yang ZJ, 2014, 2014 38TH ANNUAL IEEE INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSACW 2014), P37, DOI 10.1109/COMPSACW.2014.10
   Yao J, 2019, LECT NOTES COMPUT SC, V11513, P303, DOI 10.1007/978-3-030-23502-4_21
   Zhang L, 2014, 2014 38TH ANNUAL IEEE INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSACW 2014), P31, DOI 10.1109/COMPSACW.2014.9
   Zhang YP, 2014, APPL MECH MATER, V513-517, P1989, DOI 10.4028/www.scientific.net/AMM.513-517.1989
NR 54
TC 0
Z9 0
U1 1
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2023
VL 31
IS 1
BP 243
EP 277
DI 10.1007/s11219-022-09599-w
EA SEP 2022
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9N8JZ
UT WOS:000858383500001
DA 2024-07-18
ER

PT J
AU Hinterreiter, D
   Linsbauer, L
   Prähofer, H
   Grunbacher, P
AF Hinterreiter, Daniel
   Linsbauer, Lukas
   Praehofer, Herbert
   Grunbacher, Paul
TI Feature-oriented clone and pull operations for distributed development
   and evolution
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Feature-oriented development; Distributed development; Variation control
   systems; Software product lines
AB Software companies frequently customize and extend product lines in multiple projects concurrently to quickly deliver solutions to customers. Engineers use a distributed and feature-oriented development process, commonly supported by version control systems to track implementation-level changes. For instance, feature branches are widely used to add new or modify existing features. However, when merging back features to the product line, the information about feature-to-code mappings is usually lost. Furthermore, the granularity of merging is limited to branches, making it hard to extract and merge selected individual features from one product to another. This paper thus presents feature-oriented clone and pull operations for distributed development, which are implemented in the FORCE2 platform. Our evaluation uses variants of the ArgoUML product line to investigate the correctness and performance of our approach. The results show that the feature-oriented operations work with high precision and recall for different cases of feature interactions, also when feature implementations are scattered across many locations in the source code. The performance measurements demonstrate that the operations can be integrated in the typical workflows of engineers.
C1 [Hinterreiter, Daniel; Grunbacher, Paul] Johannes Kepler Univ Linz, Inst Software Syst Engn, Linz, Austria.
   [Linsbauer, Lukas] Tech Univ Carolo Wilhelmina Braunschweig, Inst Software Engn & Automot Informat, Braunschweig, Germany.
   [Praehofer, Herbert] Johannes Kepler Univ Linz, Inst Syst Software, Linz, Austria.
C3 Johannes Kepler University Linz; Braunschweig University of Technology;
   Johannes Kepler University Linz
RP Grunbacher, P (corresponding author), Johannes Kepler Univ Linz, Inst Software Syst Engn, Linz, Austria.
EM hinterreiterdaniel@gmail.com; l.linsbauer@tu-braunschweig.de;
   herbert.praehofer@jku.at; paul.gruenbacher@jku.at
RI Grunbacher, Paul/C-2970-2013
OI Grunbacher, Paul/0000-0002-1951-5288
FU Johannes Kepler University Linz
FX Open access funding provided by Johannes Kepler University Linz.
CR Angerer F, 2019, AUTOMAT SOFTW ENG, V26, P417, DOI 10.1007/s10515-019-00253-7
   Angerer F, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P52, DOI 10.1145/2648511.2648517
   [Anonymous], 2015, P 9 INT WORKSHOP VAR, DOI DOI 10.1145/2701319.2701331
   Apel S., 2013, Feature-Oriented Software Development: Concepts and Implementation
   Berger Thorsten, 2019, DAGSTUHL REPORTS, V9, P1, DOI 10.4230/DagRep.9.5.1
   Conradi R, 1998, ACM COMPUT SURV, V30, P232, DOI 10.1145/280277.280280
   Dourish P., 1992, P ACM C COMP SUPP CO
   Duc Anh, 2014, ESEM, DOI DOI 10.1145/2652524.2652546
   Feichtinger K, 2019, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE '19), P129, DOI 10.1145/3357765.3359525
   Ferber S., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P235
   Fischer S, 2014, PROC IEEE INT CONF S, P391, DOI 10.1109/ICSME.2014.61
   Frost R, 2007, IEEE SOFTWARE, V24, P114, DOI 10.1109/MS.2007.170
   Gousios G, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P345, DOI 10.1145/2568225.2568260
   Grimmer A, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P460, DOI 10.1109/SANER.2016.15
   Hinterreiter D., 2021, P 14 INT C QUALITY I, P6781, DOI [10.1007/978-3-030-85347-1_6, DOI 10.1007/978-3-030-85347-1_6]
   Hinterreiter D, 2020, CONCURRENT ENG-RES A, V28, P265, DOI 10.1177/1063293X20958930
   Hinterreiter D, 2019, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE '19), P115, DOI 10.1145/3357765.3359515
   Hinterreiter D, 2020, LECT NOTES COMPUT SC, V12045, P300, DOI 10.1007/978-3-030-44429-7_21
   Hinterreiter D, 2018, IEEE INT C EMERG, P107, DOI 10.1109/ETFA.2018.8502557
   Holl G, 2012, ASIA PAC SOFWR ENG, P137, DOI 10.1109/APSEC.2012.41
   Kehrer T, 2021, 2021 ACM/IEEE 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2021), P21, DOI 10.1109/ICSE-NIER52604.2021.00013
   Linsbauer L., 2022, HDB RE ENG SOFTWARE
   Linsbauer L, 2021, J SYST SOFTWARE, V171, DOI 10.1016/j.jss.2020.110796
   Linsbauer L, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P49, DOI 10.1145/3136040.3136054
   Linsbauer L, 2017, SOFTW SYST MODEL, V16, P1179, DOI 10.1007/s10270-015-0512-y
   Linsbauer L, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P803, DOI 10.1145/2889160.2889262
   Linsbauer L, 2014, PROC IEEE INT CONF S, P426, DOI 10.1109/ICSME.2014.67
   Linsbauer Lukas., 2013, P 17 INT SOFTW PROD, P131
   Martinez J, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P257, DOI 10.1145/3233027.3236402
   Michelon GK, 2020, SPLC'19: PROCEEDINGS OF THE 23RD INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL A, P93, DOI 10.1145/3336294.3342360
   Montalvillo L, 2018, SPLC'18: PROCEEDINGS OF THE 22ND INTERNATIONAL SYSTEMS AND SOFTWARE PRODUCT LINE CONFERENCE, VOL 1, P110, DOI 10.1145/3233027.3233041
   Montalvillo Leticia., 2015, Proceedings of the 19th International Conference on Software Product Line, SPLC 2015, Nashville, TN, USA, July 20-24, 2015, P111, DOI [10.1145/2791060.2791083, DOI 10.1145/2791060.2791083]
   Novais RL, 2013, INFORM SOFTWARE TECH, V55, P1860, DOI 10.1016/j.infsof.2013.05.008
   OMG, 2011, ABSTR SYNT TREE MET
   Pfofe Tristan, 2016, P 20 INT SYST SOFTW, DOI DOI 10.1145/2934466.2962726
   Pohl K., 2005, Software Product Line Engineering: Foundations, Principles and Techniques, V1, DOI [10.1007/3-540-28901-1, DOI 10.1007/3-540-28901-1]
   Rabiser D., 2016, P 20 INT SOFTW PROD, P35, DOI DOI 10.1145/2934466.2934487
   Ramirez Alejandro, 2011, Technical report
   Rubin J., 2013, SPLC, P101
   Schwäger F, 2019, SOFTW SYST MODEL, V18, P3373, DOI 10.1007/s10270-019-00722-3
   Schwägerl F, 2015, MODELSWARD 2015 PROCEEDINGS OF THE 3RD INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P5
   Schwgerl F., 2015, P 10 INT C SOFTW PAR, P518
   ZAVE P, 1993, COMPUTER, V26, P20, DOI 10.1109/2.223539
   Zhou SR, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P350, DOI 10.1145/3338906.3338918
   Zhou SR, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P105, DOI 10.1145/3180155.3180205
NR 45
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2022
VL 30
IS 4
BP 1039
EP 1066
DI 10.1007/s11219-022-09591-4
EA MAY 2022
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6J7CW
UT WOS:000803116500001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Ersoy, E
   Sözer, H
AF Ersoy, Ersin
   Sozer, Hasan
TI Using artificial neural networks to provide guidance in extending pl/sql
   programs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software architecture; Software maintenance; Architecture erosion;
   Artificial neural networks; Industrial case study
ID SOFTWARE ARCHITECTURE RECONSTRUCTION; SEARCH; CODE; SYSTEMS
AB Extending legacy systems with new objects for contemporary functionality or technology can lead to architecture erosion. Misplacement of these objects gradually hampers the modular structure, of which documentation is usually missing or outdated. In this work, we aim at addressing this problem for PL/SQL programs, which are highly coupled with databases. We propose a novel approach that employs artificial neural networks to automatically predict the correct placement of a new object among architectural modules. We train a network based on features extracted from the initial version of the source code that is assumed to represent the intended architecture. We use dependencies among the software and database objects as features for this training. Then, given a new object and the list of other objects it uses, the network can predict the architectural module, where the object should be included. We performed two industrial case studies with applications from the telecommunications domain, each of which involves thousands of procedures and database tables. We showed that the accuracy of our approach is 86.7% and 89% for these two applications. The baseline approach that uses coupling and cohesion metrics reaches 55.5% and 57.4% accuracy for the same applications, respectively.
C1 [Ersoy, Ersin] Turkcell Grp, Aydinevler Mah Inonu Cad,kucukyali ofispk, Istanbul, Turkey.
   [Sozer, Hasan] Ozyegin Univ, Istanbul, Turkey.
C3 Ozyegin University
RP Ersoy, E (corresponding author), Turkcell Grp, Aydinevler Mah Inonu Cad,kucukyali ofispk, Istanbul, Turkey.
EM ersin.ersoy@turkcell.com.tr; hasan.sozer@ozyegm.edu.tr
RI Sözer, Hasan/A-4722-2015
OI Sözer, Hasan/0000-0002-2968-4763; Ersoy, Ersin/0000-0002-6100-9514
CR Abdeen H, 2009, WORK CONF REVERSE EN, P103, DOI 10.1109/WCRE.2009.13
   Altinisik M., 2016, P 31 ACM S APPL COMP, P1440
   Altinisik M, 2017, 11TH EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE (ECSA 2017) - COMPANION VOLUME, P160, DOI 10.1145/3129790.3129811
   Arias TBC, 2013, J SOFTW-EVOL PROC, V25, P233, DOI 10.1002/smr.577
   Bales D.K., 2002, JAVA PROGRAMMING ORA
   Bavota G, 2013, EMPIR SOFTW ENG, V18, P901, DOI 10.1007/s10664-012-9226-8
   Bergstra J, 2012, J MACH LEARN RES, V13, P281
   Boser B. E., 1992, Proceedings of the Fifth Annual ACM Workshop on Computational Learning Theory, P144, DOI 10.1145/130385.130401
   Chaparro O., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P479, DOI 10.1109/WCRE.2012.57
   Chen C, 2017, PROC IEEE ACM INT C, P377, DOI 10.1109/ICSE-C.2017.75
   Chester D., 1990, IJCNN 90 WASH 600, V1, P265
   CORTES C, 1995, MACH LEARN, V20, P273, DOI 10.1007/BF00994018
   COX DR, 1958, J R STAT SOC B, V20, P215
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deb K., 2001, MULTIOBJECTIVE OPTIM, DOI DOI 10.1109/TEVC.2002.804322
   Ducasse S, 2009, IEEE T SOFTWARE ENG, V35, P573, DOI 10.1109/TSE.2009.19
   Ersoy E, 2016, LECT NOTES COMPUT SC, V9839, P326, DOI 10.1007/978-3-319-48992-6_24
   Fausett L., 1994, FUNDAMENTALS NEURAL
   Garcia J, 2009, LECT NOTES COMPUT SC, V5581, P146, DOI 10.1007/978-3-642-02351-4_10
   Gardikiotis SK, 2004, INTERNATIONAL DATABASE ENGINEERING AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P277, DOI 10.1109/IDEAS.2004.1319801
   Gelman A, 2008, ANN APPL STAT, V2, P1360, DOI 10.1214/08-AOAS191
   Ghannem A, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1916
   Gulesir G., 2008, THESIS U TWENTE
   Guo GYB, 1999, INT FED INFO PROC, V12, P15
   Habringer M, 2014, PROC IEEE INT CONF S, P553, DOI 10.1109/ICSME.2014.93
   Harrington P., 2012, MACHINE LEARNING ACT
   Heiat A, 2002, INFORM SOFTWARE TECH, V44, P911, DOI 10.1016/S0950-5849(02)00128-3
   Henderson K., 2000, GURUS GUIDE TRANSACT
   Idri A, 2002, PROCEEDINGS OF THE 2002 IEEE INTERNATIONAL CONFERENCE ON FUZZY SYSTEMS, VOL 1 & 2, P1162, DOI 10.1109/FUZZ.2002.1006668
   Kessentini M, 2017, EMPIR SOFTW ENG, V22, P670, DOI 10.1007/s10664-016-9442-8
   Kohavi R., 1995, INT JOINT C ART INT, V2, P1137, DOI DOI 10.1067/MOD.2000.109031
   Laser MS, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1546, DOI 10.1145/3368089.3417941
   Lee A, 1998, INFORM MANAGE-AMSTER, V34, P1, DOI 10.1016/S0378-7206(98)00041-X
   Li QS, 2005, WCRE: 12TH WORKING CONFERENCE ON REVERSE ENGINEERING 2005, PROCEEDINGS, P57
   Lutellier T, 2018, IEEE T SOFTWARE ENG, V44, P159, DOI 10.1109/TSE.2017.2671865
   Mansoor U, 2017, SOFTWARE QUAL J, V25, P529, DOI 10.1007/s11219-016-9309-7
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Mkaouer MW, 2017, EMPIR SOFTW ENG, V22, P894, DOI 10.1007/s10664-016-9426-8
   Nelson M., 2005, CORR ABSCS0503068
   Oracle Database, 2019, ONLINE DOCUMENTATION
   Ouni A, 2017, INFORM SOFTWARE TECH, V83, P55, DOI 10.1016/j.infsof.2016.11.007
   Panchal G, 2011, Int J Comput Theory Eng, P332, DOI [10.7763/ijcte.2011.v3.328, DOI 10.7763/IJCTE.2011.V3.328]
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Patel C, 2009, EUR CON SFTWR MTNCE, P27, DOI 10.1109/CSMR.2009.62
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Praditwong K, 2011, IEEE T SOFTWARE ENG, V37, P264, DOI 10.1109/TSE.2010.26
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   SCHWANKE RW, 1994, MACH LEARN, V15, P137, DOI 10.1007/BF00993275
   Strnisa R, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P499
   Sun CA, 2005, 2005 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P270
   Tin Kam Ho, 1995, Proceedings of the Third International Conference on Document Analysis and Recognition, P278, DOI 10.1109/ICDAR.1995.598994
   WALKER SH, 1967, BIOMETRIKA, V54, P167, DOI 10.1093/biomet/54.1-2.167
   Wawer A, 2014, WWW'14 COMPANION: PROCEEDINGS OF THE 23RD INTERNATIONAL CONFERENCE ON WORLD WIDE WEB, P1135, DOI 10.1145/2567948.2579000
   Wong WE, 2012, IEEE T RELIAB, V61, P149, DOI 10.1109/TR.2011.2172031
   Wong WE, 2009, INT J SOFTW ENG KNOW, V19, P573, DOI 10.1142/S021819400900426X
   Xiao L, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P967, DOI 10.1145/2568225.2568241
   Zaccone G., 2017, Deep learning with TensorFlow
   Zhang GQ, 1998, INT J FORECASTING, V14, P35, DOI 10.1016/S0169-2070(97)00044-7
NR 58
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2022
VL 30
IS 4
BP 885
EP 916
DI 10.1007/s11219-022-09586-1
EA MAR 2022
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 6J7CW
UT WOS:000770737500001
DA 2024-07-18
ER

PT J
AU Arvanitou, EM
   Ampatzoglou, A
   Chatzigeorgiou, A
   Avgeriou, P
   Tsiridis, N
AF Arvanitou, Elvira-Maria
   Ampatzoglou, Apostolos
   Chatzigeorgiou, Alexander
   Avgeriou, Paris
   Tsiridis, Nikolaos
TI A metric for quantifying the ripple effects among requirements
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Metrics; Change impact analysis; Requirements; Maintenance
ID QUALITY; DESIGN
AB During software maintenance, it is often costlier to identify and understand the artifacts that need to be changed, rather than to actually apply the change. In addition to identifying the artifacts related to the change per se, one needs also to identify the artifacts that are changed due to ripple effects. In this paper, we focus on ripple effects and propose a metric for assessing the probability of one requirement to be affected by a change in another requirement (i.e., requirements ripple effect). We focus on the requirements level, since most maintenance tickets (which stem from the customer) are captured in natural language and therefore are more naturally mapped to requirements, rather than source code. The proposed metric-the requirements ripple effect measure (R2EM)-is calculated by considering the conceptual overlap between the involved requirements (through their past co-change), the parts of the code in which they are implemented (i.e., their overlapping implementations), and the underlying dependencies of the source code (i.e., ripple effects between classes). We note that despite the involvement of source code artifacts in the calculation of R2EM, this metric is considered as a requirements' level one, since the unit of analysis is pairs of software requirements. To validate the proposed metric, we conducted an industrial case study, on two enterprise applications of an SME. The study design involved both quantitative and qualitative data, and input was given by 9 practitioners. The results suggested that R2EM is able to identify ripple effects between requirements at a satisfactory level, and those effects are mostly caused by overlapping implementations and source code ripple effects of these implementations.
C1 [Arvanitou, Elvira-Maria; Ampatzoglou, Apostolos; Chatzigeorgiou, Alexander] Univ Macedonia, Dept Appl Informat, Thessaloniki, Greece.
   [Avgeriou, Paris] Univ Groningen, Fac Sci & Engn, Groningen, Netherlands.
   [Tsiridis, Nikolaos] Res & Dev Dept OTS, Thessaloniki, Greece.
C3 University of Macedonia; University of Groningen
RP Ampatzoglou, A (corresponding author), Univ Macedonia, Dept Appl Informat, Thessaloniki, Greece.
EM e.arvanitou@uom.edu.gr; a.ampatzoglou@uom.edu.gr; paris@rug.nl;
   ntsiridis@gmail.com
RI Chatzigeorgiou, Alexandros/AAL-6077-2021
OI Avgeriou, Paris/0000-0002-7101-0754
FU action "Strengthening Human Resources Research Potential via Doctorate
   Research" of the Operational Program "Human Resources Development
   Program, Education and Lifelong Learning, 2014-2020"; European Social
   Fund; Greek public (National Strategic Reference Framework (NSRF)
   2014-2020)
FX This work was financially supported by the action "Strengthening Human
   Resources Research Potential via Doctorate Research" of the Operational
   Program "Human Resources Development Program, Education and Lifelong
   Learning, 2014-2020", implemented from State Scholarship Foundation
   (IKY) and co-financed by the European Social Fund and the Greek public
   (National Strategic Reference Framework (NSRF) 2014-2020).
CR Ali N, 2013, WORK CONF REVERSE EN, P361, DOI 10.1109/WCRE.2013.6671311
   Ampatzoglou A, 2015, IEEE T SOFTWARE ENG, V41, P781, DOI 10.1109/TSE.2015.2414917
   [Anonymous], 2009, IEEE STAND
   [Anonymous], 2001, 912612001 ISOIEC
   Antoniol G, 2000, PROG COMPREHEN, P253, DOI 10.1109/WPC.2000.852502
   Arora C, 2015, INT REQUIR ENG CONF, P6, DOI 10.1109/RE.2015.7320403
   Arvanitou, 2017, 1 INT WORKSH EM TREN
   Arvanitou E. M., 2017, 21 INT C EV ASS SOFT
   Arvanitou E. M., 2015, 9 INT S EMP SOFTW EN
   Basso FP, 2016, J SYST SOFTWARE, V117, P612, DOI 10.1016/j.jss.2016.04.060
   BECK K, 1989, SIGPLAN NOTICES, V24, P1, DOI 10.1145/74878.74879
   Buse Raymond P. L., 2010, P 25 IEEE ACM INT C, P33, DOI DOI 10.1145/1858996.1859005
   Charalampidou S, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2294
   Chen JC, 2009, J SYST SOFTWARE, V82, P981, DOI 10.1016/j.jss.2008.12.036
   Conejero JM, 2012, INFORM SOFTWARE TECH, V54, P212, DOI 10.1016/j.infsof.2011.09.003
   Dahlstedt ÅG, 2005, ENGINEERING AND MANAGING SOFTWARE REQUIREMENTS, P95, DOI 10.1007/3-540-28244-0_5
   Field A., 2013, DISCOVERING STAT USI
   Fowler M., 2015, UML Distilled: A Brief Guide to the Standard Object Modeling Language
   Galorath D.D., 2008, Software Tech News, V11
   Goknil, 2008, 4 ECMFA TRAC WORKSH
   Goknil A, 2014, INFORM SOFTWARE TECH, V56, P950, DOI 10.1016/j.infsof.2014.03.002
   Hassine J, 2005, EIGHTH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS, P81, DOI 10.1109/IWPSE.2005.8
   Kagdi H., 2009, 15 INT C PROGRAM COM, P145
   Kaur K, 2015, COMPUTER, V48, P52, DOI 10.1109/MC.2015.77
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   Krestou, 2021, J SYST SOFTWARE, V173
   Marg L., 2014, 1 WORKSH AUT MAN MET
   Nejati S, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P242, DOI 10.1145/2950290.2950293
   QUEILLE JP, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P234, DOI 10.1109/ICSM.1994.336771
   Rahman Marfizah Abdul, 2014, Journal of Software, V9, P76, DOI 10.4304/jsw.9.1.76-81
   Runeson, 2009, CASE STUDY RES SOFTW
   Spinellis D, 2009, ELECTRON NOTES THEOR, V233, P5, DOI 10.1016/j.entcs.2009.02.058
   González-Aparicio MT, 2016, INT CON ADV INFO NET, P79, DOI 10.1109/AINA.2016.147
   Truica CO, 2015, I C CONTR SYS COMP S, P191, DOI 10.1109/CSCS.2015.32
   Zhang H, 2014, INFORM SOFTWARE TECH, V56, P40, DOI 10.1016/j.infsof.2013.07.001
NR 35
TC 1
Z9 1
U1 3
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2022
VL 30
IS 3
BP 853
EP 883
DI 10.1007/s11219-021-09581-y
EA FEB 2022
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3W2CB
UT WOS:000753245800001
OA Green Published
DA 2024-07-18
ER

PT J
AU Johannes, D
   Khomh, F
   Antoniol, G
AF Johannes, David
   Khomh, Foutse
   Antoniol, Giuliano
TI A large-scale empirical study of code smells in JavaScript projects
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Code smells; Fault-proneness; JavaScript; Survival analysis; Empirical
   study
ID IMPACT
AB JavaScript is a powerful scripting programming language that has gained a lot of attention this past decade. Initially used exclusively for client-side web development, it has evolved to become one of the most popular programming languages, with developers now using it for both client-side and server-side application development. Similar to applications written in other programming languages, JavaScript applications contain code smells, which are poor design choices that can negatively impact the quality of an application. In this paper, we perform a large-scale study of JavaScript code smells in server-side and client-side applications, with the aim to understand how they impact the fault-proneness of applications, and how they are evolved by the developers of the applications. We detect 12 types of code smells in 1807 releases of 15 popular JavaScript applications (i.e., express, grunt, bower, less.js, request, jquery, vue, ramda, leaflet, hexo, chart, webpack, webtorrent, moment, and riot) and perform survival analysis, comparing the time until a fault occurrence, in files containing code smells and files without code smells. We also examine the introduction and removal of the code smells in the applications using survival models. All our analysis are conducted at the granularity of the line of code. Results show that (1) on average, files without code smells have hazard rates at least 33% lower than files with code smells. (2) Among the studied smells, "Variable Re-assign," "Assignment In Conditional statements," and "Complex Code" smells have the highest fault hazard rates. (3) Code smells, and particularly "Variable Re-assign," are often introduced in the application when the files containing them are created. Moreover, they tend to remain in the applications for a long period of time; "Variable Re-assign" is also the most prevalent code smell. Overall, code smells affect negatively the quality of JavaScript applications and developers should consider tracking and removing them early on before the release of applications to the public.
C1 [Johannes, David; Khomh, Foutse] Polytech Montreal, SWAT Lab, Montreal, PQ, Canada.
   [Antoniol, Giuliano] Polytech Montreal, SOCCER Lab, Montreal, PQ, Canada.
C3 Universite de Montreal; Polytechnique Montreal; Universite de Montreal;
   Polytechnique Montreal
RP Khomh, F (corresponding author), Polytech Montreal, SWAT Lab, Montreal, PQ, Canada.
EM david.johannes@polymtl.ca; foutse.khomh@polymtl.ca;
   giuliano.antoniol@polymtl.ca
CR Abbes M, 2011, EUR CON SFTWR MTNCE, P181, DOI 10.1109/CSMR.2011.24
   [Anonymous], 2014, R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG R COMPANION APPL REG
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bower, 2016, BOW
   Brodu E., 2015, P 1 WORKSHOP ALL WEB, P1
   Chatzigeorgiou A, 2010, QUATIC 2010: SEVENTH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, P106, DOI 10.1109/QUATIC.2010.16
   D'Ambros Marco, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P23, DOI 10.1109/QSIC.2010.58
   da Costa DA, 2017, IEEE T SOFTWARE ENG, V43, P641, DOI 10.1109/TSE.2016.2616306
   Eslint, 2015, PLUGG LINT UT JAV JS
   Fard AM, 2013, IEEE INT WORK C SO, P116, DOI 10.1109/SCAM.2013.6648192
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Fontana FA, 2012, J OBJECT TECHNOL, V11, DOI 10.5381/jot.2012.11.2.a5
   Fowler Martin, 1997, 11 EUR C JYV FINL
   Gallaba Keheliya, 2015, 2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). Proceedings, P1, DOI 10.1109/ESEM.2015.7321196
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gatrell M, 2015, SCI COMPUT PROGRAM, V102, P44, DOI 10.1016/j.scico.2014.12.002
   GitHub, 2016, NOD JS STYL GUID
   GitHub, 2016, AIRBNB JAVASCRIPT ST
   GitHut, 2016, DISC LANG GITHUB
   Grunt, 2016, WHO US GRUNT
   Gunes Koru A., 2007, PROMISE 07, P10, DOI DOI 10.1109/PROMISE.2007.9
   Nguyen HV, 2012, IEEE INT CONF AUTOM, P282, DOI 10.1145/2351676.2351724
   Jaafar F, 2013, WORK CONF REVERSE EN, P351, DOI 10.1109/WCRE.2013.6671310
   jQuery, 2016, JQUERY JAVASCRIPT ST
   JSHint, 2019, JSHINT STAT COD AN T
   JSLint, 2019, JSLINT JAVASCRIPT CO
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Khomh F, 2011, J SYST SOFTWARE, V84, P559, DOI 10.1016/j.jss.2010.11.921
   Koru AG, 2008, EMPIR SOFTW ENG, V13, P473, DOI 10.1007/s10664-008-9080-x
   Mardan Azat., 2014, Express. js Guide: The Comprehensive Book on Express
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Marinescu Radu., 2006, OBJECT ORIENTED METR
   Mazinanian D, 2016, IEEE INT CONF AUTOM, P672, DOI 10.1145/2970276.2970348
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Neamtiu J. F. I., 2005, P INT WORKSH MIN SOF, V30, P1, DOI [DOI 10.1145/1082983.1083143, 10.1145/1082983.1083143]
   NpmJS, 2016, NPM COD STYL
   Olbrich S, 2009, INT SYMP EMP SOFTWAR, P391
   Palomba F, 2018, EMPIR SOFTW ENG, V23, P1188, DOI 10.1007/s10664-017-9535-z
   Peters R, 2012, EUR CON SFTWR MTNCE, P411, DOI 10.1109/CSMR.2012.79
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Saboury A, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P294, DOI 10.1109/SANER.2017.7884630
   Selim G. M. K., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P13, DOI 10.1109/WCRE.2010.11
   Shatnawi R, 2006, THIRD INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS, PROCEEDINGS, P161, DOI 10.1109/ITNG.2006.31
   Shihab E, 2013, EMPIR SOFTW ENG, V18, P1005, DOI 10.1007/s10664-012-9228-6
   Singer D., 2003, APPL LONGITUDINAL DA
   Sjoberg DIK, 2013, IEEE T SOFTWARE ENG, V39, P1144, DOI 10.1109/TSE.2012.89
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   Stackoverflow, 2016, DEV SURV RES 2016
   Therneau T., 2000, R survival package
   Therneau TM, 2000, STAT BIOL HEALTH
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Westergaard Harald., 1932, CONTRIBUTIONS HIST S
   Yin RK, 2002, Applied Social Research Methods Series, V34
NR 53
TC 13
Z9 16
U1 0
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1271
EP 1314
DI 10.1007/s11219-019-09442-9
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400012
DA 2024-07-18
ER

PT J
AU Rath, M
   Mäder, P
AF Rath, Michael
   Maeder, Patrick
TI Structured information in bug report descriptions-influence on IR-based
   bug localization and developers
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Bug report structure; Bug localization; Information retrieval
AB Multiple information retrieval (IR)-based bug localization techniques have been proposed over the last years. The foundation of the approaches relies on textual similarity of the bug report description and the source code files. The basic assumption is that these descriptions are well suited to query the code base. However, often bug reports contain structured information such as stack traces and source code next to natural language, which might interfere with the initial belief. In this paper, we systematically analyze the influence of structured information on IR-based techniques. Therefore, an empirical study on 7334 bug reports, out of which more than 30% contain structured information, was carried out. Based on the results, a follow-up user study was conducted focusing on source code fragments found in bug reports. Our results show that stack traces tend to negatively affect IR-based bug localization performance and require special handling. Compared to natural language-only reports, source code is beneficial for IR-based algorithms, as well as for developers to identify false positives in bug localization results.
C1 [Rath, Michael; Maeder, Patrick] Tech Univ Ilmenau, Helmholtzpl 5, D-98693 Ilmenau, Germany.
C3 Technische Universitat Ilmenau
RP Rath, M (corresponding author), Tech Univ Ilmenau, Helmholtzpl 5, D-98693 Ilmenau, Germany.
EM michael.rath@tu-ilmenau.de
RI Mäder, Patrick/A-1848-2018
OI Mäder, Patrick/0000-0001-6871-2707; Rath, Michael/0000-0001-8938-3690
FU BMBF [01IS16003B]; DFG [MA 5030/3-1]; EU EFRE/TAB [2015FE9033]; DLR
   [D/943/67258261]
FX Our work is funded by the BMBF grant: 01IS16003B, DFG grant: MA
   5030/3-1, the EU EFRE/TAB grant: 2015FE9033, and DLR grant:
   D/943/67258261.
CR [Anonymous], 2001, PROGR COMPR 2001 IWP
   [Anonymous], 2012, EFFECT SIZES RES UNI
   Bacchelli A., 2011, INT C AUT SOFTW ENG
   Bettenburg N, 2008, P 2008 INT WORK C MI
   CLIFF N, 1993, PSYCHOL BULL, V114, P494, DOI 10.1037/0033-2909.114.3.494
   Collberg CS, 2003, P ACM 2003 S SOFTW V
   Eick S. C., 1992, IEEE Transactions on Software Engineering, V18, P957, DOI 10.1109/32.177365
   Gouveia C., 2013, 1st Working Conference on Software Visualization, VISSOFT, P1, DOI DOI 10.1109/VISSOFT.2013.6650539
   JIRA, 2018, JIRA ISSUE TRACKING
   Kagdi H, 2007, J SOFTW MAINT EVOL-R, V19, P77, DOI 10.1002/smr.344
   KRUSKAL WH, 1952, J AM STAT ASSOC, V47, P583, DOI 10.1080/01621459.1952.10483441
   Lukins SK, 2010, INFORM SOFTWARE TECH, V52, P972, DOI 10.1016/j.infsof.2010.04.002
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Moreno L, 2014, PROC IEEE INT CONF S, P151, DOI 10.1109/ICSME.2014.37
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Rath M., 2018, REPLICATION DATA STR
   Rath M, 2018, 15 IEEE ACM WORK C M
   Rath M, 2017, IEEE INT WORK SIGN P
   Reps T, 1997, LECT NOTES COMPUT SC, V1301, P432, DOI 10.1145/267896.267925
   Saha RK, 2013, IEEE INT CONF AUTOM, P345, DOI 10.1109/ASE.2013.6693093
   Storey Margaret-Anne D., 2005, P 2005 ACM S SOFTWAR, P193, DOI DOI 10.1145/1056018.1056045
   Wang B, 2012, 2012 4TH ASIA SYMPOSIUM ON QUALITY ELECTRONIC DESIGN (ASQED), P35, DOI 10.1109/ACQED.2012.6320472
   Wang Q, 2015, 2015 IEEE 20TH INTERNATIONAL WORKSHOP ON COMPUTER AIDED MODELLING AND DESIGN OF COMMUNICATION LINKS AND NETWORKS (CAMAD), P201, DOI 10.1109/CAMAD.2015.7390509
   Wen M, 2016, IEEE INT CONF AUTOM, P262, DOI 10.1145/2970276.2970359
   Wong CP, 2014, PROC IEEE INT CONF S, P181, DOI 10.1109/ICSME.2014.40
   Xia X, 2016, PROC IEEE INT CONF S, P268, DOI 10.1109/ICSME.2016.67
   Ye X, 2016, PROC INT CONF SOFTW, P404, DOI 10.1145/2884781.2884862
   Zhang H, 2014, PROGNOST SYST HEALT, P22, DOI 10.1109/PHM.2014.6988125
   Zhang Q, 2016, ORG ELECTRON, V28, P100, DOI 10.1016/j.orgel.2015.10.021
   Zhu QQ, 2016, FASEB J, V30
NR 31
TC 8
Z9 12
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2019
VL 27
IS 3
SI SI
BP 1315
EP 1337
DI 10.1007/s11219-019-09445-6
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IZ5MS
UT WOS:000487128400013
DA 2024-07-18
ER

PT J
AU López, J
   Kushik, N
   Zeghlache, D
AF Lopez, Jorge
   Kushik, Natalia
   Zeghlache, Djamal
TI Virtual machine placement quality estimation in cloud infrastructures
   using integer linear programming
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality estimation; Virtual machine placement; Testing; Monitoring;
   Integer linear programming
ID ENERGY
AB This paper is devoted to the quality estimation of virtual machine (VM) placement in cloud infrastructures, i.e., to choose the best hosts for a given set of VMs. We focus on test generation and monitoring techniques for comparing the placement result of a given implementation with an optimal solution with respect to given criteria. We show how Integer Linear Programming problems can be formulated and utilized for deriving test suites and optimal solutions to provide verdicts concerning the quality of VM placement implementations; the quality is calculated as the distance from an optimal placement for a given criterion (or a set of criteria). The presented approach is generic and showcased on resource utilization, energy consumption, and resource over-commitment cost. Experiments performed with different VM placement algorithms (including the VM placement algorithms implemented in widely used platforms, such as OpenStack) exhibit the competence of such algorithms with respect to different criteria.
C1 [Lopez, Jorge; Kushik, Natalia; Zeghlache, Djamal] Univ Paris Saclay, Telecom SudParis, CNRS, SAMOVAR, 9 Rue Charles Fourier, F-91000 Evry, France.
C3 Centre National de la Recherche Scientifique (CNRS); IMT - Institut
   Mines-Telecom; Institut Polytechnique de Paris; Telecom SudParis;
   Universite Paris Saclay; Institut Mines-Telecom Business School;
   Universite Paris Cite
RP López, J (corresponding author), Univ Paris Saclay, Telecom SudParis, CNRS, SAMOVAR, 9 Rue Charles Fourier, F-91000 Evry, France.
EM jorge.lopez@telecom-sudparis.eu; natalia.kushik@telecom-sudparis.eu;
   djamal.zeghlache@telecom-sudparis.eu
RI Zeghlache, Djamal/C-4955-2013; López, Jorge Eduardo/HJA-7565-2022;
   Kushik, Natalia G./P-1756-2014
OI Zeghlache, Djamal/0000-0002-9558-8120; Kushik,
   Natalia/0000-0002-8691-6655
FU Celtic-Plus European project SENDATE [C2015/3-1]
FX The results obtained in this work were partially funded by the
   Celtic-Plus European project SENDATE, ID C2015/3-1.
CR [Anonymous], 2016, INT J COMPUT APPL
   [Anonymous], 1982, COMBINATORIAL OPTIMI
   [Anonymous], THESIS
   Babu KRR, 2014, 2014 FOURTH INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING AND COMMUNICATIONS (ICACC), P190, DOI 10.1109/ICACC.2014.53
   Beloglazov A, 2012, CONCURR COMP-PRACT E, V24, P1397, DOI 10.1002/cpe.1867
   Calheiros RN, 2011, SOFTWARE PRACT EXPER, V41, P23, DOI 10.1002/spe.995
   Chowdhury MR, 2015, J CLOUD COMPUT-ADV S, V4, DOI 10.1186/s13677-015-0045-5
   Culberson JC, 1996, CLIQUES COLORING SAT, V26, P245, DOI DOI 10.1090/dimacs/026/13
   Dantzig G. B., 2003, Linear Programming 2: Theory and Extensions
   Dayarathna M, 2016, IEEE COMMUN SURV TUT, V18, P732, DOI 10.1109/COMST.2015.2481183
   Gomory R., 1958, B AM MATH SOC, V64, P275, DOI [DOI 10.1090/S0002-9904-1958-10224-4, https://doi.org/10.1090/S0002-9904-1958-10224-4]
   Ibrahim H, 2018, COMPUT ELECTR ENG, V67, P551, DOI 10.1016/j.compeleceng.2018.02.028
   KARP RM, 1992, IFIP TRANS A, V12, P416
   LENSTRA HW, 1983, MATH OPER RES, V8, P538, DOI 10.1287/moor.8.4.538
   Lewis R, 2009, COMPUT OPER RES, V36, P2295, DOI 10.1016/j.cor.2008.09.004
   Lopez J, 2017, VMPLACEMENTSIM
   López J, 2017, LECT NOTES COMPUT SC, V10533, P213, DOI 10.1007/978-3-319-67549-7_13
   Ma F., 2012, J INFORM COMPUTATION, V9, P5029
   Mann ZA, 2017, CONCURR COMP-PRACT E, V29, DOI 10.1002/cpe.4083
   Masdari M, 2016, J NETW COMPUT APPL, V66, P106, DOI 10.1016/j.jnca.2016.01.011
   MATHUR AP, 2008, FDN SOFTWARE TESTING
   OpenStack, 2015, DEEP DIV VIRT MACH P
   Optimization G, 2012, GUROBI OPTIMIZER REF, V2, p[13, e4083]
   Pires F.L., 2015, ARXIV150601509
   Timoshevskaya NE, 2009, PRIKL DISKRETN MAT, V4, P96, DOI 10.17223/20710410/4/7
   Vazirani V.V., 2001, Approximation algorithms, V1
   Xu X, 2013, IEEE ACM INT SYMP, P530, DOI 10.1109/CCGrid.2013.82
NR 27
TC 11
Z9 12
U1 2
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 731
EP 755
DI 10.1007/s11219-018-9420-z
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500010
DA 2024-07-18
ER

PT J
AU An, L
   Khomh, F
   Guéhéneuc, YG
AF An, Le
   Khomh, Foutse
   Gueheneuc, Yann-Gael
TI An empirical study of crash-inducing commits in Mozilla Firefox
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 11th International Conference on Predictive Models and Data Analytics in
   Software Engineering (PROMISE)
CY OCT 21, 2015
CL Beijing, PEOPLES R CHINA
DE Crash analysis; Bug triaging; Prediction model; Mining software
   repositories
ID PREDICT
AB Software crashes are dreaded by both software organisations and end-users. Many software organisations have automatic crash reporting tools embedded in their software systems to help quality-assurance teams track and fix crash-related bugs. Previous approaches, which focused on the triaging of crash-types and crash-related bugs, can help software organisations increase their debugging efficiency of crashes. However, these approaches can only be applied after the software systems have been crashing for a certain period of time. To help software organisations detect and fix crash-prone code earlier, we examine the characteristics of commits that lead to crashes, which we call crash-inducing commits, in Mozilla Firefox. We observe that crash-inducing commits are often submitted by developers with less experience and that developers perform more addition and deletion of lines of code in crash-inducing commits but also that they need less effort to fix the bugs caused by these commits. We also characterise commits that would lead to frequent crashes, which impact a large user base, which we call highly impactful crash-inducing commits. Compared to other crash-related bugs, we observe that bugs due to highly impactful crash-inducing commits were less reopened by developers and tend to be fixed by a single commit. We build predictive models to help software organisations detect and fix crash-prone bugs early, when their developers commit code. Our predictive models achieve a precision of 61.2% and a recall of 94.5% to predict crash-inducing commits and a precision of 60.9% and a recall of 91.1% to predict highly impactful crash-inducing commits. Software organisations could use our models and approach to track and fix crash-prone commits early, before they negatively impact users, thus increasing bug fixing efficiency and user-perceived quality.
C1 [An, Le; Khomh, Foutse] Polytech Montreal, SWAT Lab, DGIGL, Montreal, PQ, Canada.
   [Gueheneuc, Yann-Gael] Polytech Montreal, DGIGL, PTIDEJ Team, Montreal, PQ, Canada.
C3 Universite de Montreal; Polytechnique Montreal; Universite de Montreal;
   Polytechnique Montreal
RP An, L (corresponding author), Polytech Montreal, SWAT Lab, DGIGL, Montreal, PQ, Canada.
EM le.an@polymtl.ca; foutse.khomh@polymtl.ca;
   yann-gael.gueheneuc@polymtl.ca
RI Guéhéneuc, Yann-Gaël/K-9371-2019
FU Natural Sciences and Engineering Research Council of Canada (NSERC);
   Fonds de Recherche du Quebec - Nature et Technologies (FRQNT)
FX This work is partially supported by the Natural Sciences and Engineering
   Research Council of Canada (NSERC) and by Fonds de Recherche du Quebec -
   Nature et Technologies (FRQNT).
CR An L., 2015, P 2015 IEEE INT C SO
   An L., 2015, Proceedings of the 11th International Conference on Predictive Models and Data Analytics in Software Engineering, P5
   An L, 2015, 2015 IEEE 1ST INTERNATIONAL WORKSHOP ON SOFTWARE ANALYTICS (SWAN), P5, DOI 10.1109/SWAN.2015.7070480
   An L, 2014, IEEE INT WORK C SO, P205, DOI 10.1109/SCAM.2014.29
   Anbalagan P., 2009, DEFECTS 09 P 2 INT W, P29
   [Anonymous], 2015, C5 0 ALGORITHM
   [Anonymous], 2015, UNDERSTAND STATIC CO
   [Anonymous], 2016, MOZILLAS CODE QUALIT
   [Anonymous], 2016, MOZILLAS COMMUNITY S
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   Csardi G., 2006, InterJournal, (Complex Systems), V1695, P1
   Dang YN, 2012, PROC INT CONF SOFTW, P1084, DOI 10.1109/ICSE.2012.6227111
   Díaz-Uriarte R, 2006, BMC BIOINFORMATICS, V7, DOI 10.1186/1471-2105-7-3
   Dmitrienko A., 2005, ANAL CLIN TRIALS USI
   EFRON B, 1983, J AM STAT ASSOC, V78, P316, DOI 10.2307/2288636
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Fukushima T., 2014, Proceedings of the 11th Working Conference on Mining Software Repositories, MSR 2014, P172, DOI DOI 10.1145/2597073.2597075
   Hassan AE, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P123, DOI 10.1109/WCRE.2003.1287243
   Hassan AE, 2006, IEEE INT CONF AUTOM, P189
   Hollander M., 2013, Nonparametric statistical methods
   Joorabchi ME, 2014, P 11 WORK C MIN SOFT, P62, DOI [10.1145/2597073.2597098, DOI 10.1145/2597073.2597098]
   JORGENSEN M, 1995, IEEE T SOFTWARE ENG, V21, P674, DOI 10.1109/32.403791
   Kamei Y, 2013, IEEE T SOFTWARE ENG, V39, P757, DOI 10.1109/TSE.2012.70
   Khomh F., 2011, 2011 18th Working Conference on Reverse Engineering, P261, DOI 10.1109/WCRE.2011.39
   Kim D, 2011, IEEE T SOFTWARE ENG, V37, P430, DOI 10.1109/TSE.2011.20
   Kim M., 2012, P ACM SIGSOFT 20 INT, P1
   Kim S, 2008, IEEE T SOFTWARE ENG, V34, P181, DOI 10.1109/TSE.2007.70773
   Kim S, 2006, IEEE INT CONF AUTOM, P81
   Kim S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P481, DOI 10.1145/1985793.1985859
   Kononenko O, 2016, PROC INT CONF SOFTW, P1028, DOI 10.1145/2884781.2884840
   Misirli A. T., 2015, EMPIR SOFTW ENG, P1
   Moser R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P181, DOI 10.1145/1368088.1368114
   Nagappan N, 2005, PROC INT CONF SOFTW, P284, DOI 10.1145/1062455.1062514
   National Institute of Standards & Technology, 2002, EC IMP IN INFR SOFTW
   PARNAS DL, 1994, PROC INT CONF SOFTW, P279, DOI 10.1109/ICSE.1994.296790
   Podgurski A, 2003, PROC INT CONF SOFTW, P465, DOI 10.1109/ICSE.2003.1201224
   Rish I., 2001, IJCAI 2001 WORKSH EM, P41
   Rogerson P., 2010, Statistical methods for geography, V3rd
   Romo B. A., 2014, P INT S OP COLL, P8
   Shannon C. E., 1948, BELL SYST TECH J, V27, P379, DOI DOI 10.1002/J.1538-7305.1948.TB01338.X
   Shihab E, 2013, EMPIR SOFTW ENG, V18, P1005, DOI 10.1007/s10664-012-9228-6
   Sliwerski J., 2005, ACM SIGSOFT SOFTWARE, P1, DOI DOI 10.1145/1082983.1083147
   Socorro, 2015, MOZILLAS CRASH REPOR
   Wang Shumin, 2014, Biomed Res Int, V2014, P507353, DOI 10.1155/2014/507353
   Williams C, 2008, P 2008 WORKSHOP DEFE, P32
   Wu RX, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P771, DOI 10.1145/2635868.2666601
   Yin R. K., 2017, CASE STUDY RES DESIG
   Zimmermann T, 2012, PROC INT CONF SOFTW, P1074, DOI 10.1109/ICSE.2012.6227112
NR 49
TC 7
Z9 9
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 553
EP 584
DI 10.1007/s11219-017-9361-y
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA GH6AN
UT WOS:000433521200013
DA 2024-07-18
ER

PT J
AU Bowes, D
   Hall, T
   Petric, J
AF Bowes, David
   Hall, Tracy
   Petric, Jean
TI Software defect prediction: do different classifiers find the same
   defects?
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 11th International Conference on Predictive Models and Data Analytics in
   Software Engineering (PROMISE)
CY OCT 21, 2015
CL Beijing, PEOPLES R CHINA
DE Software defect prediction; Prediction modelling; Machine learning
ID MODELS; CODE
AB During the last 10 years, hundreds of different defect prediction models have been published. The performance of the classifiers used in these models is reported to be similar with models rarely performing above the predictive performance ceiling of about 80% recall. We investigate the individual defects that four classifiers predict and analyse the level of prediction uncertainty produced by these classifiers. We perform a sensitivity analysis to compare the performance of Random Forest, Na < ve Bayes, RPart and SVM classifiers when predicting defects in NASA, open source and commercial datasets. The defect predictions that each classifier makes is captured in a confusion matrix and the prediction uncertainty of each classifier is compared. Despite similar predictive performance values for these four classifiers, each detects different sets of defects. Some classifiers are more consistent in predicting defects than others. Our results confirm that a unique subset of defects can be detected by specific classifiers. However, while some classifiers are consistent in the predictions they make, other classifiers vary in their predictions. Given our results, we conclude that classifier ensembles with decision-making strategies not based on majority voting are likely to perform best in defect prediction.
C1 [Bowes, David; Petric, Jean] Univ Hertfordshire, Sci & Technol Res Inst, Hatfield AL10 9AB, Herts, England.
   [Hall, Tracy; Petric, Jean] Brunel Univ London, Dept Comp Sci, Uxbridge UB8 3PH, Middx, England.
C3 University of Hertfordshire; Brunel University
RP Petric, J (corresponding author), Univ Hertfordshire, Sci & Technol Res Inst, Hatfield AL10 9AB, Herts, England.; Petric, J (corresponding author), Brunel Univ London, Dept Comp Sci, Uxbridge UB8 3PH, Middx, England.
EM d.h.bowes@herts.ac.uk; tracy.hall@brunel.ac.uk; j.petric@herts.ac.uk
OI Petric, Jean/0000-0003-1949-2706; Bowes, David/0000-0001-7014-2811;
   Hall, Tracy/0000-0002-2728-9014
FU UK's Engineering and Physical Sciences Research Council [EP/L011751/1];
   EPSRC [EP/L011751/1] Funding Source: UKRI
FX This work was partly funded by a grant from the UK's Engineering and
   Physical Sciences Research Council under grant number: EP/L011751/1.
CR Ai DN, 2014, BIOMED ENG ONLINE, V13, DOI 10.1186/1475-925X-13-112
   [Anonymous], EASE 2011
   [Anonymous], 2013, THESIS
   [Anonymous], ENSEMBLES LOCALITY I
   [Anonymous], IEEE INT C COMP SYST
   [Anonymous], ACM T SOFTWARE ENG M
   [Anonymous], P 6 INT C PRED MOD S
   [Anonymous], 15 CREST OP WORKSH
   [Anonymous], 10 INT S EMP SOFTW E
   [Anonymous], 2007, P 4 INT WORKSH MIN S
   [Anonymous], ADV MACHINE LEARNER
   [Anonymous], J SOFTWARE ENG
   [Anonymous], 2008, Proceedings of the 4th International Workshop on Predictor Models in Software Engineering, PROMISE '08
   Arisholm E, 2007, ISSRE 2007: 18TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P215, DOI 10.1109/ISSRE.2007.22
   Arisholm E, 2010, J SYST SOFTWARE, V83, P2, DOI 10.1016/j.jss.2009.06.055
   Bell R., 2006, Proc. 2006 International Symposium on Software Testing and Analysis, P61
   Bird Christian, 2009, 2009 20th International Symposium on Software Reliability Engineering (ISSRE 2009), P109, DOI 10.1109/ISSRE.2009.17
   Bird C, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P121, DOI 10.1145/1595696.1595716
   Bowes D, 2014, AUTOMAT SOFTW ENG, V21, P287, DOI 10.1007/s10515-013-0129-8
   Briand LC, 2002, IEEE T SOFTWARE ENG, V28, P706, DOI 10.1109/TSE.2002.1019484
   Catal C, 2009, EXPERT SYST APPL, V36, P7346, DOI 10.1016/j.eswa.2008.10.027
   Chawla N.V., 2004, ACM SIGKDD EXPLOR NE, V6, P1, DOI DOI 10.1145/1007730.1007733
   Chen HH, 2009, IEEE T NEURAL NETWOR, V20, P1962, DOI 10.1109/TNN.2009.2034144
   D'Ambros M, 2012, EMPIR SOFTW ENG, V17, P531, DOI 10.1007/s10664-011-9173-9
   D'Ambros M, 2009, WORK CONF REVERSE EN, P135, DOI 10.1109/WCRE.2009.19
   Dougherty J., 1995, Machine Learning. Proceedings of the Twelfth International Conference on Machine Learning, P194
   Elish KO, 2008, J SYST SOFTWARE, V81, P649, DOI 10.1016/j.jss.2007.07.040
   Fayyad U, 1996, AI MAG, V17, P37
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Gao K., 2015, SOFTWARE ENG KNOWLED, DOI 10.18293/SEKE2015-182
   Gray D, 2012, IET SOFTW, V6, P549, DOI 10.1049/iet-sen.2011.0132
   Hall MA, 2003, IEEE T KNOWL DATA EN, V15, P1437, DOI 10.1109/TKDE.2003.1245283
   Hall T, 2012, IEEE T SOFTWARE ENG, V38, P1276, DOI 10.1109/TSE.2011.103
   Jureczko M., 2010, P 6 INT C PREDICTIVE
   Kamei Y, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 5, P33, DOI 10.1109/SANER.2016.56
   Khoshgoftaar T. M., 2002, Empirical Software Engineering, V7, P297, DOI 10.1023/A:1020511004267
   Khoshgoftaar T. M., 2010, 2010 Proceedings of 22nd International Conference on Tools with Artificial Intelligence (ICTAI 2010), P137, DOI 10.1109/ICTAI.2010.27
   Kim S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P481, DOI 10.1145/1985793.1985859
   Kutlubay O, 2007, EUROMICRO CONF PROC, P322
   Laradji IH, 2015, INFORM SOFTWARE TECH, V58, P388, DOI 10.1016/j.infsof.2014.07.005
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Liebchen G. A., 2008, P 4 INT WORKSH PRED, P39, DOI [10.1145/1370788.1370799, DOI 10.1145/1370788.1370799]
   Madeyski L, 2015, SOFTWARE QUAL J, V23, P393, DOI 10.1007/s11219-014-9241-7
   Malhotra R, 2015, APPL SOFT COMPUT, V27, P504, DOI 10.1016/j.asoc.2014.11.023
   Mende T, 2010, EUR CON SFTWR MTNCE, P107, DOI 10.1109/CSMR.2010.18
   Menzies T., 2012, The PROMISE Repository of empirical software engineering data
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   Misirli AT, 2011, SOFTWARE QUAL J, V19, P515, DOI 10.1007/s11219-010-9128-1
   Mizuno O., 2007, Proceedings of the 11th Joint Meeting of the European Software Engineering Conference and the 14th ACM SIGSOFT Symposium on Foundations of Software Engineering, P405
   Myrtveit I, 2005, IEEE T SOFTWARE ENG, V31, P380, DOI 10.1109/TSE.2005.58
   Nagappan Nachiappan, 2010, Proceedings of the 2010 IEEE 21st International Symposium on Software Reliability Engineering (ISSRE 2010), P309, DOI 10.1109/ISSRE.2010.25
   Panichella A, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P164, DOI 10.1109/CSMR-WCRE.2014.6747166
   Petric J., 2015, P 11 INT C PRED MOD, P3, DOI 10.1145/2810146.2810149
   Petric J, 2016, PROCEEDINGS OF THE 20TH INTERNATIONAL CONFERENCE ON EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING 2016 (EASE '16), DOI 10.1145/2915970.2916007
   Rodrigues D. B., 2014, P 18 INT C EV ASS SO, P1, DOI DOI 10.1145/2601248.2601294
   Seiffert C, 2009, IEEE T SYST MAN CY A, V39, P1283, DOI 10.1109/TSMCA.2009.2027131
   Shepperd M, 2001, IEEE T SOFTWARE ENG, V27, P1014, DOI 10.1109/32.965341
   Shepperd M, 2014, IEEE T SOFTWARE ENG, V40, P603, DOI 10.1109/TSE.2014.2322358
   Shepperd M, 2013, IEEE T SOFTWARE ENG, V39, P1208, DOI 10.1109/TSE.2013.11
   Shin Y, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P61, DOI 10.1109/MSR.2009.5069481
   Shivaji S, 2009, IEEE INT CONF AUTOM, P600, DOI 10.1109/ASE.2009.76
   Soares C, 2004, MACH LEARN, V54, P195, DOI 10.1023/B:MACH.0000015879.28004.9b
   Sun ZB, 2012, IEEE T SYST MAN CY C, V42, P1806, DOI 10.1109/TSMCC.2012.2226152
   Turhan B, 2009, EMPIR SOFTW ENG, V14, P540, DOI 10.1007/s10664-008-9103-7
   Visa S., 2004, PROC IPMU C, P393
   Witten I. H., 2005, DATA MINING PRACTICA
   WOLPERT DH, 1992, NEURAL NETWORKS, V5, P241, DOI 10.1016/S0893-6080(05)80023-1
   Yue Jiang, 2009, 2009 20th International Symposium on Software Reliability Engineering (ISSRE 2009), P99, DOI 10.1109/ISSRE.2009.13
   Zhang HY, 2009, PROC IEEE INT CONF S, P274, DOI 10.1109/ICSM.2009.5306304
   Zhou YM, 2010, J SYST SOFTWARE, V83, P660, DOI 10.1016/j.jss.2009.11.704
   Zimmerman T, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P91, DOI 10.1145/1595696.1595713
NR 71
TC 95
Z9 100
U1 0
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 525
EP 552
DI 10.1007/s11219-016-9353-3
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA GH6AN
UT WOS:000433521200012
OA hybrid
DA 2024-07-18
ER

PT J
AU Almaghairbe, R
   Roper, M
AF Almaghairbe, Rafig
   Roper, Marc
TI Separating passing and failing test executions by clustering anomalies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Test oracles; Anomaly detection; Clustering
ID SOFTWARE; RELIABILITY
AB Developments in the automation of test data generation have greatly improved efficiency of the software testing process, but the so-called oracle problem (deciding the pass or fail outcome of a test execution) is still primarily an expensive and error-prone manual activity. We present an approach to automatically detect passing and failing executions using cluster-based anomaly detection on dynamic execution data based on firstly, just a system's input/output pairs and secondly, amalgamations of input/output pairs and execution traces. The key hypothesis is that failures will group into small clusters, whereas passing executions will group into larger ones. Evaluation on three systems with a range of faults demonstrates this hypothesis to be valid-in many cases small clusters were composed of at least 60 % failures (and often more). Concentrating the failures in these small clusters substantially reduces the numbers of outputs that a developer would need to manually examine following a test run and illustrates that the approach has the potential to improve the effectiveness and efficiency of the testing process.
C1 [Almaghairbe, Rafig; Roper, Marc] Univ Strathclyde, Dept Comp & Informat Sci, Glasgow, Lanark, Scotland.
C3 University of Strathclyde
RP Roper, M (corresponding author), Univ Strathclyde, Dept Comp & Informat Sci, Glasgow, Lanark, Scotland.
EM rafig.almaghairbe@strath.ac.uk; marc.roper@strath.ac.uk
CR Almaghairbe R, 2015, 10TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST AST 2015, P3, DOI 10.1109/AST.2015.8
   Baresi L., 2001, TECH REP
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Bowring J. F., 2004, Software Engineering Notes, V29, P195, DOI 10.1145/1013886.1007539
   Briand LC, 2008, INT CONF QUAL SOFTW, P3, DOI 10.1109/QSIC.2008.29
   Chandola V, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1541880.1541882
   Dickinson W., 2001, Software Engineering Notes, V26, P246, DOI 10.1145/503271.503243
   Dickinson W, 2001, PROC INT CONF SOFTW, P339, DOI 10.1109/ICSE.2001.919107
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Han J, 2012, MOR KAUF D, P1
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   ISTQB, 2016, TECH REP
   Jin W., 2010, Proceedings of IEEE International Conference on Software Testing, Verification and Validation, P137
   MILLER BP, 1990, COMMUN ACM, V33, P32, DOI 10.1145/96267.96279
   Nguyen C.D., 2013, ESEC/SIGSOFT FSE'13, P136
   Pezzè M, 2014, ADV COMPUT, V95, P1, DOI 10.1016/B978-0-12-800160-8.00001-2
   Podgurski A, 2003, PROC INT CONF SOFTW, P465, DOI 10.1109/ICSE.2003.1201224
   Podgurski A, 1999, ACM T SOFTW ENG METH, V8, P263, DOI 10.1145/310663.310667
   Roong-Ko Doong, 1994, ACM Transactions on Software Engineering and Methodology, V3, P101, DOI 10.1145/192218.192221
   Sekar R, 2001, P IEEE S SECUR PRIV, P144, DOI 10.1109/SECPRI.2001.924295
   Shali Yan, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P147, DOI 10.1109/ICST.2010.47
   Vanmali M, 2002, INT J INTELL SYST, V17, P45, DOI 10.1002/int.1002
   Witten I. H., 2005, DATA MINING PRACTICA
   Yoo S, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P201
   Zhou ZQ, 2012, SOFTW TEST VERIF REL, V22, P221, DOI 10.1002/stvr.437
NR 26
TC 14
Z9 14
U1 0
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 803
EP 840
DI 10.1007/s11219-016-9339-1
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300007
OA Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Almasri, N
   Tahat, L
   Korel, B
AF Almasri, Nada
   Tahat, Luay
   Korel, Bogdan
TI Toward automatically quantifying the impact of a change in systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Impact analysis; EFSM; Maintenance; Model-based analysis
ID PRIORITIZATION; MODELS; DEPENDENCE; SELECTION
AB Software maintenance is becoming more challenging with the increased complexity of the software and the frequently applied changes. Performing impact analysis before the actual implementation of a change is a crucial task during system maintenance. While many tools and techniques are available to measure the impact of a change at the code level, only a few research work is done to measure the impact of a change at an earlier stage in the development process. Measuring the impact of a change at the model level speeds up the maintenance process allowing early discovery of critical components of the system before applying the actual change at the code level. In this paper, we present model-based impact analysis approach for state-based systems such as telecommunication or embedded systems. The proposed approach uses model dependencies to automatically measure the expected impact for a requested change instead of relying on the expertise of system maintainers, and it generates two impact sets representing the lower bound and the upper bound of the impact. Although it can be extended to other behavioral models, the presented approach mainly addresses extended finite-state machine (EFSM) models. An empirical study is conducted on six EFSM models to investigate the usefulness of the proposed approach. The results show that on average the size of the impact after a single modification (a change in a one EFSM transition) ranges between 14 and 38 % of the total size of the model. For a modification involving multiple transitions, the average size of the impact ranges between 30 and 64 % of the total size of the model. Additionally, we investigated the relationships (correlation) between the structure of the EFSM model, and the size of the impact sets. Upon preliminary analysis of the correlation, the concepts of model density and data density were defined, and it was found that they could be the major factors influencing the sizes of impact sets for models. As a result, these factors can be used to determine the types of models for which the proposed approach is the most appropriate.
C1 [Almasri, Nada; Tahat, Luay] Gulf Univ Sci & Technol, Management Informat Syst, West Mishref, Kuwait.
   [Korel, Bogdan] IIT, Dept Comp Sci, Chicago, IL 60616 USA.
C3 Illinois Institute of Technology
RP Tahat, L (corresponding author), Gulf Univ Sci & Technol, Management Informat Syst, West Mishref, Kuwait.
EM Almasri.n@gust.edu.kw; Tahat.l@gust.edu.kw; Korel@iit.edu
RI Almasri, Nada/AAC-1564-2020; Tahat, Luay/E-7547-2016
OI Almasri, Nada/0000-0001-8222-9180; Tahat, Luay/0000-0003-3413-2039
FU Kuwait Foundation for Advancement of Science (KFAS) [P114-18EO-03]
FX This work is supported by Kuwait Foundation for Advancement of Science
   (KFAS) Number P114-18EO-03.
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Aizenbud-Reshef N, 2006, IBM SYST J, V45, P515, DOI 10.1147/sj.453.0515
   Androutsopoulos K, 2013, ACM COMPUT SURV, V45, DOI 10.1145/2501654.2501667
   Androutsopoulos K, 2009, PROC IEEE INT CONF S, P287, DOI 10.1109/ICSM.2009.5306309
   Androutsopoulos K, 2009, LECT NOTES COMPUT SC, V5503, P216
   [Anonymous], 2004, SEKE
   Au PK, 1997, FEATURE INTERACTIONS IN TELECOMMUNICATION NETWORKS IV, P153
   Basanieri F., 2002, "UML" 2002 - Unified Modeling Language. Model Engineering, Concepts, and Tools. 5th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2460), P383
   BENNETT K, 2000, P C FUT SOFTW ENG
   Bertolino A, 2008, LECT NOTES COMPUT SC, V5047, P266, DOI 10.1007/978-3-540-68524-1_19
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Bourhfir C., 2013, SPECIFICATION DESCRI
   Briand LC, 2006, J SYST SOFTWARE, V79, P339, DOI 10.1016/j.jss.2005.05.001
   Briand LC, 2003, PROC IEEE INT CONF S, P256, DOI 10.1109/ICSM.2003.1235428
   Briand LC, 2002, PROC IEEE INT CONF S, P252, DOI 10.1109/ICSM.2002.1167775
   Chen YP, 2009, J SOFTW MAINT EVOL-R, V21, P379, DOI 10.1002/smr.415
   CHENG KT, 1993, ACM IEEE D, P86
   DANTAS CR, 2007, BRAZ S SOFTW ENG SBE, P236
   Dick J, 2005, IEEE SOFTWARE, V22, P14, DOI 10.1109/MS.2005.150
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fox C., 2005, DEPENDENCE GRAPHS SL
   Garousi V., 2006, 28th International Conference on Software Engineering Proceedings, P391, DOI 10.1145/1134285.1134340
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Harel D, 1996, PROC INT CONF SOFTW, P246, DOI 10.1109/ICSE.1996.493420
   Heimdahl M. P. E., 1997, P 5 ACM SIGSOFT S F
   Hull E, 2011, REQUIREMENTS ENGINEERING, THIRD EDITION, P1, DOI 10.1007/978-1-84996-405-0
   Julliand J, 2013, SOFTWARE QUAL J, V21, P127, DOI 10.1007/s11219-011-9161-8
   Kaur Preeti., 2012, Proceedings of the CUBE International Information Technology Conference, CUBE '12, P355
   Korel B, 2004, PROG COMPREHEN, P246, DOI 10.1109/WPC.2004.1311068
   Korel B, 2003, PROC IEEE INT CONF S, P34, DOI 10.1109/ICSM.2003.1235404
   Korel B, 2002, PROC IEEE INT CONF S, P214, DOI 10.1109/ICSM.2002.1167768
   Korel B, 2005, PROC IEEE INT CONF S, P559
   Korel B, 2009, 5 WORKSH ADV MOD BAS
   Korel B, 2008, PROC IEEE INT CONF S, P247, DOI 10.1109/ICSM.2008.4658073
   Korel Bogdan., 2007, Proceedings of the 3rd International Workshop on Advances in Model-Based Testing, P34
   Kuck R. H., 1981, Proceedings of the 8th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P207
   Labbé S, 2008, FORM ASP COMPUT, V20, P563, DOI 10.1007/s00165-008-0086-3
   Le Traon Y, 2000, IEEE T RELIAB, V49, P12, DOI 10.1109/24.855533
   LEHNERT S., 2011, REV SOFTWARE CHANGE
   Li BX, 2013, SOFTW TEST VERIF REL, V23, P613, DOI 10.1002/stvr.1475
   Luangsodsai A., 2010, P COMP SCI EL ENG C, P1
   Maheshwari A., 2015, INCOSE International Symposium, V25, P1263, DOI [DOI 10.1002/j.2334-5837.2015.00128.x, 10.1002/j.2334-5837.2015.00128.x, DOI 10.1002/J.2334-5837.2015.00128.X]
   Pilskalns O, 2006, PROC IEEE INT CONF S, P254
   Pretschner A, 2005, PROC INT CONF SOFTW, P392
   Ramesh B, 2001, IEEE T SOFTWARE ENG, V27, P58, DOI 10.1109/32.895989
   Sangal N, 2005, ACM SIGPLAN NOTICES, V40, P167, DOI 10.1145/1103845.1094824
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Selic B, 2003, IEEE SOFTWARE, V20, P19, DOI 10.1109/MS.2003.1231146
   Snook C, 2006, ACM T SOFTW ENG METH, V15, P92, DOI 10.1145/1125808.1125811
   Tahat L., 2012, J ADV COMPUTER SCI T, V2, P9
   Tahat LH, 2001, P INT COMP SOFTW APP, P489, DOI 10.1109/CMPSAC.2001.960658
   Tahat L, 2012, SOFTW TEST VERIF REL, V22, P481, DOI 10.1002/stvr.461
   Ural H, 2013, J SOFTW-EVOL PROC, V25, P681, DOI 10.1002/smr.1559
   Vaysburg B., 2002, Software Engineering Notes, V27, P107, DOI 10.1145/566171.566188
   Vaysburg B., 2001, P 18 INT C TEST COMP, P130
   Volter Markus., 2006, Model-Driven Software Development: Technology, Engineering, Management
   WAGNER F, 1992, COMPUTER SYSTEMS AND SOFTWARE ENGINEERING, P226, DOI 10.1109/CMPEUR.1992.218505
   Wang J, 2002, LECT NOTES COMPUT SC, V2495, P435
   Xing Z., 2005, 20 IEEEACM INT C AUT, P54, DOI DOI 10.1145/1101908.1101919
   Xing ZC, 2004, PROG COMPREHEN, P34, DOI 10.1109/WPC.2004.1311045
   Ye W, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P133, DOI 10.1109/CSMR.2003.1192420
   Yenigün H, 2014, SOFTWARE QUAL J, V22, P701, DOI 10.1007/s11219-013-9213-3
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   [No title captured]
   [No title captured]
NR 65
TC 11
Z9 11
U1 1
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2017
VL 25
IS 3
BP 601
EP 640
DI 10.1007/s11219-016-9316-8
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FB8EI
UT WOS:000406371300001
DA 2024-07-18
ER

PT J
AU Nguyen, TH
   Grundy, JC
   Almorsy, M
AF Tuong Huan Nguyen
   Grundy, John C.
   Almorsy, Mohamed
TI Ontology-based automated support for goal-use case model analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Goal-oriented requirements engineering; Ontology-based analysis;
   Requirements incorrectness; Incompleteness and inconsistency detection
ID REQUIREMENTS; FRAMEWORK
AB Combining goal-oriented and use case modeling has been proven to be an effective method in requirements elicitation and elaboration. To ensure the quality of such modeled artifacts, a detailed model analysis needs to be performed. However, current requirements engineering approaches generally lack reliable support for automated analysis of consistency, correctness and completeness (3Cs problems) between and within goal models and use case models. In this paper, we present a goal-use case integration framework with tool support to automatically identify such 3Cs problems. Our new framework relies on the use of ontologies of domain knowledge and semantics and our goal-use case integration meta-model. Moreover, functional grammar is employed to enable the semiautomated transformation of natural language specifications into Manchester OWL Syntax for automated reasoning. The evaluation of our tool support shows that for representative example requirements, our approach achieves over 85 % soundness and completeness rates and detects more problems than the benchmark applications.
C1 [Tuong Huan Nguyen; Grundy, John C.; Almorsy, Mohamed] Swinburne Univ Technol, Fac Sci Engn & Technol, Melbourne, Vic, Australia.
C3 Swinburne University of Technology
RP Nguyen, TH (corresponding author), Swinburne Univ Technol, Fac Sci Engn & Technol, Melbourne, Vic, Australia.
EM huannguyen@swin.edu.au; jgrundy@swin.edu.au; malmorsy@swin.edu.au
RI Grundy, John/AAF-1716-2019; Nguyen, Huan/HHS-7093-2022
OI Grundy, John/0000-0003-4928-7076; Abdelrazek,
   Mohamed/0000-0003-3812-9785
FU Victorian Government under the Victorian International Research
   Scholarships scheme; Swinburne University of Technology; Australian
   Research Council under Linkage Project [LP130100201]; Australian
   Research Council [LP130100201] Funding Source: Australian Research
   Council
FX The authors gratefully acknowledge support from the Victorian Government
   under the Victorian International Research Scholarships scheme,
   Swinburne University of Technology, and the Australian Research Council
   under Linkage Project LP130100201.
CR [Anonymous], P 41 ANN M ASS COMP
   [Anonymous], 2007, The promise repository of empirical software engineering data
   [Anonymous], ICSE 1999
   [Anonymous], 2006, OWLED
   [Anonymous], 2013, CESAR COST EFFICIENT
   [Anonymous], REQUIREMENTS ENG
   [Anonymous], GUI F METAMODEL DESC
   [Anonymous], REQUIREMENTS ANAL TO
   [Anonymous], 1998, WORDNET
   [Anonymous], 2010, MODEL DRIVEN DOMAIN
   [Anonymous], REQ ENG C 2003 P 11
   Anton A. I., 2001, Requirements Engineering, V6, P63, DOI 10.1007/PL00010356
   Anton AI, 1996, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, P136, DOI 10.1109/ICRE.1996.491438
   Breaux TD, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1416563.1416565
   Cimiano P, 2005, LECT NOTES COMPUT SC, V3513, P227
   Cockburn A, 1997, J OBJECT-ORIENT PROG, V10, P56
   Dzung DV, 2009, INT CONF QUAL SOFTW, P284, DOI 10.1109/QSIC.2009.44
   Dean M., 2004, SWRL: a semantic web Rule Language combining OWL and RuleML
   Dermeval D, 2016, REQUIR ENG, V21, P405, DOI 10.1007/s00766-015-0222-6
   Dik S.C., 1989, THEORY FUNCTIONAL GR
   Drazan J, 2007, LECT NOTES COMPUT SC, V4362, P856
   Fuxman A, 2004, REQUIR ENG, V9, P132, DOI 10.1007/s00766-004-0191-7
   Gervasi V, 2005, ACM T SOFTW ENG METH, V14, P277, DOI 10.1145/1072997.1072999
   Glinz M., 2000, P 2 WORLD C SOFTW QU, P55
   Kaiya H, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P223
   Kim J, 2006, DATA KNOWL ENG, V58, P21, DOI 10.1016/j.datak.2005.05.006
   LAMI G., 2004, AUTOMATIC TOOL ANAL
   Lee WJ, 1998, IEEE T SOFTWARE ENG, V24, P1115, DOI 10.1109/32.738342
   Noy N. F., 2001, Ontology development 101: A guide to creating your first ontology
   Noy NF, 2003, INT J HUM-COMPUT ST, V59, P983, DOI 10.1016/j.ijhcs.2003.08.002
   Poveda-Villalon Maria, 2012, Knowledge Engineering and Knowledge Management. 18th International Conference, EKAW 2012. Proceedings, P267, DOI 10.1007/978-3-642-33876-2_24
   Rolland C, 1998, IEEE T SOFTWARE ENG, V24, P1055, DOI 10.1109/32.738339
   Sikora E, 2010, LECT NOTES COMPUT SC, V6182, P45, DOI 10.1007/978-3-642-14192-8_6
   Sommerville I., 2011, Software engineering
   Nguyen TH, 2014, INT REQUIR ENG CONF, P315, DOI 10.1109/RE.2014.6912274
   Nguyen TH, 2014, SOFTWARE QUAL J, V22, P87, DOI 10.1007/s11219-013-9202-6
   Nguyen TH, 2012, IEEE INT CONF AUTOM, P386, DOI 10.1145/2351676.2351754
   van Lamsweerde A, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P249
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P1089, DOI 10.1109/32.738341
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P908, DOI 10.1109/32.730542
NR 40
TC 9
Z9 9
U1 1
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 635
EP 673
DI 10.1007/s11219-015-9281-7
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400009
DA 2024-07-18
ER

PT J
AU Winter, V
   Reinke, C
   Guerrero, J
AF Winter, Victor
   Reinke, Carl
   Guerrero, Jonathan
TI Certifying a java type resolution function using program transformation,
   annotation, and reflection
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Source code analysis; Java; Type resolution; Reflection; Annotation;
   Program transformation
AB In Java, type resolution is a function that takes a reference to a type occurring in a given context as input and returns the canonical name of that type. This information is fundamental to static analysis-a "must have" function underlying virtually all forms of semantic-based analysis. In the case of Java, this function is also complex and it is quite common to encounter tools where it is implemented incorrectly. This paper presents a novel approach for certifying the correctness of a given type resolution function with respect to an arbitrary Java source code base. The approach uses program transformation to instrument a subject code base in such a way that reflection can then be used to certify the correctness of the type resolution function against the function used by the Java compiler. In this form of certification, the type resolution function of the Java compiler serves as the test oracle.
C1 [Winter, Victor; Guerrero, Jonathan] PKI 174C,1110 South 67th, Omaha, NE 68182 USA.
   [Reinke, Carl] 6601 Tennyson St NE,Apt 12302, Albuquerque, NM 87111 USA.
RP Winter, V (corresponding author), PKI 174C,1110 South 67th, Omaha, NE 68182 USA.
EM vwinter@unomaha.edu; creinke@unomaha.edu; jguerrero@unomaha.edu
FU United States Department of Energy [DE-AC04-94AL85000]
FX This work was in part supported by the United States Department of
   Energy under Contract DE-AC04-94AL85000. Sandia is a multiprogram
   laboratory operated by Sandia Corporation, a Lockheed Martin Company,
   for the United States Department of Energy.
CR ai Sun C., 2008, 32 ANN IEEE INT COMP, P160, DOI [10.1109/COMPSAC.2008.74, DOI 10.1109/COMPSAC.2008.74]
   [Anonymous], 1997, The Definition of Standard ML
   Baxter I., 2002, DMS2002 SEM DES
   Baxter ID, 2004, PROC INT CONF SOFTW, P625, DOI 10.1109/ICSE.2004.1317484
   Flanagan D., 2005, JAVA NUTSHELL
   Gosling James., 2011, The Java Language Specification, Vseven
   Havelund K, 2004, FORM METHOD SYST DES, V24, P189, DOI 10.1023/B:FORM.0000017721.39909.4b
   Havelund K, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P135, DOI 10.1109/ASE.2001.989799
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Mametjanov A., 2011, 11 INT WORKSH LANG D
   Martins E, 2000, DSN 2000: INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P407, DOI 10.1109/ICDSN.2000.857569
   McCaffrey J., 2006, NET TEST AUTOMATION, P33, DOI [10.1007/978-1-4302-0163-2_2, DOI 10.1007/978-1-4302-0163-2_2]
   McCoy JA, 2000, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P107, DOI 10.1109/HASE.2000.895448
   Perry J. T., 2010, SAND20108745 SAND NA
   Proulx V., 2009, Proceedings of the 7th International Conference on Principles and Practice of Programming in Java (PPPJ '09), P49, DOI DOI 10.1145/1596655.1596663
   Roychoudhury S, 2010, J OBJECT TECHNOL, V9, P143, DOI 10.5381/jot.2010.9.1.a3
   Wickstrom GL, 2004, EIGHTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P167, DOI 10.1109/HASE.2004.1281741
   Winter V., 2013, P 4 INT WOR IN PRESS
   Winter V., 2011, P 13 IEEE INT S HIGH
   Winter V., 2014, P 2014 INT C SOFTW E
   Winter V. L., 2011, JAVA ACAD RES
   Winter V. L., 2012, P 14 IEEE INT S HIGH
   Winter V. L., 2007, PREPR 7 INT WORKSH R
   Winter V, 2006, LECT NOTES COMPUT SC, V4143, P378
   Winter VL, 2007, ELECTRON NOTES THEOR, V174, P99, DOI 10.1016/j.entcs.2006.10.022
   Winter VL, 2004, SCI COMPUT PROGRAM, V52, P165, DOI 10.1016/j.scico.2004.03.006
NR 26
TC 0
Z9 0
U1 0
U2 7
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2016
VL 24
IS 1
SI SI
BP 115
EP 135
DI 10.1007/s11219-014-9262-2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DC1VQ
UT WOS:000369006200007
DA 2024-07-18
ER

PT J
AU Mussbacher, G
   Araújo, J
   Moreira, A
   Amyot, D
AF Mussbacher, Gunter
   Araujo, Joao
   Moreira, Ana
   Amyot, Daniel
TI AoURN-based modeling and analysis of software product lines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software product lines; Goal-based requirements engineering;
   Scenario-based requirements engineering; Aspect-oriented modeling; User
   Requirements Notation; Feature interactions
ID USER REQUIREMENTS NOTATION; FEATURES
AB Software Product Line Engineering concerns itself with domain engineering and application engineering. During domain engineering, the whole product family is modeled with a preferred flavor of feature models and additional models as required (e.g., domain models or scenario-based models). During application engineering, the focus shifts toward a single family member and the configuration of the member's features. Recently, aspectual concepts have been employed to better encapsulate individual features of a Software Product Line (SPL), but the existing body of SPL work does not include a unified reasoning framework that integrates aspect-oriented feature description artifacts with the capability to reason about stakeholders' goals while taking feature interactions into consideration. Goal-oriented SPL approaches have been proposed, but do not provide analysis capabilities that help modelers meet the needs of the numerous stakeholders involved in an SPL while at the same time considering feature interactions. We present an aspect-oriented SPL approach for the requirements phase that allows modelers (a) to capture features, goals, and scenarios in a unified framework and (b) to reason about stakeholders' needs and perform trade-off analyses while considering undesirable interactions that are not obvious from the feature model. The approach is based on the Aspect-oriented User Requirements Notation (AoURN) and helps identify, prioritize, and choose products based on analysis results provided by AoURN editor and analysis tools. We apply the AoURN-based SPL framework to the Via Verde SPL to demonstrate the feasibility of this approach through the selection of a Via Verde product configuration that satisfies stakeholders' needs and results in a high-level, scenario-based specification that is free from undesirable feature interactions.
C1 [Mussbacher, Gunter; Amyot, Daniel] Univ Ottawa, Sch Elect Engn & Comp Sci EECS, Ottawa, ON K1N 6N5, Canada.
   [Araujo, Joao; Moreira, Ana] Univ Nova Lisboa, Dept Informat, CITI FCT, P-2829516 Caparica, Portugal.
C3 University of Ottawa; Universidade Nova de Lisboa
RP Mussbacher, G (corresponding author), Univ Ottawa, Sch Elect Engn & Comp Sci EECS, 800 King Edward, Ottawa, ON K1N 6N5, Canada.
EM gunterm@eecs.uottawa.ca; ja@di.fct.unl.pt; amm@di.fct.unl.pt;
   damyot@eecs.uottawa.ca
RI Amyot, Daniel/AAI-6948-2020; Araujo, Joao/G-2108-2011; Moreira,
   Ana/F-4770-2011; Araujo, Joao/M-3560-2013
OI Amyot, Daniel/0000-0003-2414-1791; Moreira, Ana/0000-0003-2046-2766;
   Araujo, Joao/0000-0001-5914-1631
FU Natural Sciences and Engineering Research Council of Canada; Ontario
   Graduate Scholarship Program; FCT MCTES
FX This research was supported by the Natural Sciences and Engineering
   Research Council of Canada, through its programs of Discovery Grants and
   Postgraduate Scholarships, as well as the Ontario Graduate Scholarship
   Program, and FCT MCTES.
CR Acher Mathieu, 2009, Software Language Engineering. Second International Conference, SLE 2009. Revised Selected Papers, P62
   Alexander I., 2004, SCENARIOS STORIES US
   Alférez M, 2010, LECT NOTES COMPUT SC, V5969, P103
   Amyot Daniel, 2011, Journal of Software, V6, P747, DOI 10.4304/jsw.6.5.747-768
   Amyot D, 2010, INT J INTELL SYST, V25, P841, DOI 10.1002/int.20433
   [Anonymous], THESIS U NOVA LISBOA
   [Anonymous], 1992, Object Oriented Software Engineering: A Use Case Driven Approach
   [Anonymous], 1995, THESIS U TORONTO CAN
   [Anonymous], SPLC INT C SOFTW PRO
   António S, 2009, LECT NOTES COMPUT SC, V5833, P286, DOI 10.1007/978-3-642-04947-7_34
   Asadi M., 2011, 26 ANN ACM S APPL CO
   Bagheri E, 2010, LECT NOTES COMPUT SC, V6287, P300, DOI 10.1007/978-3-642-15579-6_21
   Bagheri E, 2010, LECT NOTES COMPUT SC, V6287, P16, DOI 10.1007/978-3-642-15579-6_2
   Bonifacio R., 2009, ACM C ASP OR SOFTW D
   Borba C, 2009, LECT NOTES COMPUT SC, V5833, P244, DOI 10.1007/978-3-642-04947-7_30
   Boskovic Marko., 2011, MODELS SOFTWARE ENG, V6627, P110
   Bragança A, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P3, DOI 10.1109/SPLINE.2007.17
   Brito IS, 2007, LECT NOTES COMPUT SC, V4620, P144
   Chung L., 2000, Non-functional Requirements in Software Engineering
   Cockburn A., 2001, Writing effective use cases
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Czarnecki K., 2004, SOFTWARE PROCESS IMP, V10, P143
   Eriksson M, 2005, LECT NOTES COMPUT SC, V3714, P33
   Giorgini P, 2005, ENG APPL ARTIF INTEL, V18, P159, DOI 10.1016/j.engappai.2004.11.017
   Gomaa H., 2004, Designing Software Product Lines with UML: From Use Cases to PatternBased Software Architectures
   ITU-T, 2008, US REQ NOT URN LANG
   Jayaraman P, 2007, LECT NOTES COMPUT SC, V4735, P151
   Kang K. C., 1990, D91 SECURESCM
   Mussbacher G, 2010, THESIS U OTTAWA CANA
   Mussbacher G., 2008, 1 INT WORKSH NONF SY
   Mussbacher G, 2010, LECT NOTES COMPUT SC, V6210, P23
   Mussbacher G, 2010, REQUIR ENG, V15, P197, DOI 10.1007/s00766-010-0098-4
   Mussbacher G, 2009, LECT NOTES COMPUT SC, V5719, P115, DOI 10.1007/978-3-642-04554-7_8
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Pourshahid A, 2011, LECT NOTES BUS INF P, V78, P100
   Sebastiani R., 2004, PROC 16 INT C ADV IN, V3084, P675
   Silva C., 2008, 20 INT C SOFTW ENG K
   Uno K, 2009, INT CONF QUAL SOFTW, P412, DOI 10.1109/QSIC.2009.61
   van der Aalst W, 2010, LECT NOTES COMPUT SC, V6336, P95, DOI 10.1007/978-3-642-15618-2_9
   Varela P., 2011, 26 ANN ACM S APPL CO
   Yu Y., 2008, 23 ANN ACM S APPL CO
NR 41
TC 25
Z9 30
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2012
VL 20
IS 3-4
SI SI
BP 645
EP 687
DI 10.1007/s11219-011-9153-8
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 995IQ
UT WOS:000308001900007
DA 2024-07-18
ER

PT J
AU Kienle, HM
   Kraft, J
   Nolte, T
AF Kienle, Holger M.
   Kraft, Johan
   Nolte, Thomas
TI System-specific static code analyses: a case study in the complex
   embedded systems domain
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Static analyses; Software quality; Bug checkers; Style checkers;
   Embedded systems
ID SOFTWARE
AB In this paper, we are exploring the approach to utilize system-specific static analyses of code with the goal to improve software quality for specific software systems. Specialized analyses, tailored for a particular system, make it possible to take advantage of system/domain knowledge that is not available to more generic analyses. Furthermore, analyses can be selected and/or developed in order to best meet the challenges and specific issues of the system at hand. As a result, such analyses can be used as a complement to more generic code analysis tools because they are likely to have a better impact on (business) concerns such as improving certain software quality attributes and reducing certain classes of failures. We present a case study of a large, industrial embedded system, giving examples of what kinds of analyses could be realized and demonstrate the feasibility of implementing such analyses. We synthesize lessons learned based on our case study and provide recommendations on how to realize system-specific analyses and how to get them adopted by industry.
C1 [Kienle, Holger M.; Kraft, Johan; Nolte, Thomas] Malardalen Univ, Vasteras, Sweden.
C3 Malardalen University
RP Kienle, HM (corresponding author), Malardalen Univ, Vasteras, Sweden.
EM hkienle@acm.org; johan.kraft@mdh.se; thomas.nolte@mdh.se
FU Swedish Foundation for Strategic Research through the PROGRESS Centre
   for Predictable Embedded Software Systems, Malardalen Real-Time Research
   Centre (MRTC) at Malardalen University in Vasteras, Sweden.
FX Many thanks to the anonymous reviewers whose thorough comments greatly
   helped to improve the paper. This work is supported by the Swedish
   Foundation for Strategic Research through the PROGRESS Centre for
   Predictable Embedded Software Systems, which is a part of Malardalen
   Real-Time Research Centre (MRTC) at Malardalen University in Vasteras,
   Sweden.
CR ADAMS EN, 1984, IBM J RES DEV, V28, P2, DOI 10.1147/rd.281.0002
   Akerholm M., 2009, IVTINTERNATIONAL
   Anderson P., 2008, DOBBS J
   Andersson J., 2005, THESIS MALARDALEN U
   [Anonymous], 2005, WORKSH EV SOFTW DEF
   [Anonymous], 2001, software focus
   Antoniol G, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P173, DOI 10.1109/SCAM.2003.1238043
   Atkinson DC, 2006, SOFTWARE PRACT EXPER, V36, P413, DOI 10.1002/spe.704
   Basili V. R., 1992, CSTR2957 U MAR
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Boogerd C, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P41, DOI 10.1109/MSR.2009.5069479
   Boogerd C, 2008, PROC IEEE INT CONF S, P277, DOI 10.1109/ICSM.2008.4658076
   Brichau J, 2010, SCI COMPUT PROGRAM, V75, P232, DOI 10.1016/j.scico.2009.11.005
   Bull RI, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P267, DOI 10.1109/WCRE.2002.1173084
   Ceccato M, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P53
   Ceccato M, 2010, PROC IEEE INT CONF S
   Ceccato M, 2008, WORK CONF REVERSE EN, P177, DOI 10.1109/WCRE.2008.27
   Chelf B, 2009, IEEE SOFTWARE, V26, P96, DOI 10.1109/MS.2009.65
   Dean TR, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P59, DOI 10.1109/WCRE.2001.957810
   Eaton C., 2007, International Journal of Web Engineering and Technology, V3, P227, DOI 10.1504/IJWET.2007.012055
   Ebert C, 2009, COMPUTER, V42, P42, DOI 10.1109/MC.2009.118
   Ebert C, 2009, IEEE SOFTWARE, V26, P14, DOI 10.1109/MS.2009.70
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Favre J.-M., 2003, P 3 INT WORKSHOP ADO, P81
   Gantt M., 1992, Gardeners and gurus: patterns of cooperation among CAD users, DOI 10.1145/142750.142767
   Hallem S, 2002, ACM SIGPLAN NOTICES, V37, P69, DOI 10.1145/543552.512539
   Hankin C., 1998, International Journal on Software Tools for Technology Transfer, V2, P6, DOI 10.1007/s100090050014
   Hatton L, 2005, INFORM SOFTWARE TECH, V47, P181, DOI 10.1016/j.infsof.2004.08.001
   Hatton L, 2004, INFORM SOFTWARE TECH, V46, P465, DOI 10.1016/j.infsof.2003.09.016
   Hills C., 2005, IEEE ELECT SYSTEMS S, V3, P28
   Holzmann GJ, 2006, COMPUTER, V39, P95, DOI 10.1109/MC.2006.212
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   JACKSON D, 2000, C FUT SOFTW ENG, P135
   Kienle HM, 2001, WSE 2001: 3RD INTERNATIONAL WORKSHOP ON WEB SITE EVOLUTION, P117, DOI 10.1109/WSE.2001.988794
   Kienle HM, 2010, ADV COMPUT, V79, P189, DOI 10.1016/S0065-2458(10)79005-7
   Klusener S, 2003, PROC IEEE INT CONF S, P179, DOI 10.1109/ICSM.2003.1235420
   Kraft J., 2010, THESIS MALARDALEN U
   Kraft J, 2010, LECT NOTES COMPUT SC, V6418, P315, DOI 10.1007/978-3-642-16612-9_24
   Kremenek T., 2004, Software Engineering Notes, V29, P83, DOI 10.1145/1041685.1029909
   Kullbach B, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P42, DOI 10.1109/CSMR.1999.756681
   Lethbridge T.C., 2004, Electronic Notes in Theoretical Computer Science, V94, P7
   LETHBRIDGE TC, 1997, WORKSH EMP STUD SOFT, P157
   Lv MS, 2009, IEEE I C EMBED SOFTW, P65, DOI 10.1109/ICESS.2009.24
   Marinescu C., 2006, 2006 8 INT S SYMB NU, P187
   Martin F., 1998, International Journal on Software Tools for Technology Transfer, V2, P46, DOI 10.1007/s100090050017
   Matsumura T, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P173, DOI 10.1109/ISESE.2002.1166936
   MCDOWELL CE, 1989, COMPUT SURV, V21, P593, DOI 10.1145/76894.76897
   McLellan SG, 1998, IEEE SOFTWARE, V15, P78, DOI 10.1109/52.676963
   Murphy G. C., 1998, ACM Transactions on Software Engineering and Methodology, V7, P158, DOI 10.1145/279310.279314
   Nagy C, 2010, EUR CON SFTWR MTNCE, P166, DOI 10.1109/CSMR.2010.29
   Ousterhout JK, 1998, COMPUTER, V31, P23, DOI 10.1109/2.660187
   Perin F., 2010, 26 IEEE INT C SOFTW
   Pfleeger SL, 1999, J SYST SOFTWARE, V47, P111, DOI 10.1016/S0164-1212(99)00031-X
   Pinzger M, 2003, PROG COMPREHEN, P54
   Pinzger M, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P170, DOI 10.1109/WCRE.2002.1173075
   Power JF, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P190, DOI 10.1109/WCRE.2002.1173077
   Renggli L, 2010, LECT NOTES COMPUT SC, V6141, P213, DOI 10.1007/978-3-642-13953-6_12
   Rogers E. M., 1995, Diffusion of Innovation Theory, P25, DOI https://doi.org/10.1007/978-3-642-79868-92
   Roy CK, 2008, INT C PROGRAM COMPRE, P153, DOI 10.1109/ICPC.2008.42
   RTCA, 1992, RTCADO17B
   SciTools, 2004, PERL C APPL PROGR IN
NR 61
TC 6
Z9 6
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2012
VL 20
IS 2
SI SI
BP 337
EP 367
DI 10.1007/s11219-011-9138-7
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 935GT
UT WOS:000303507800005
DA 2024-07-18
ER

PT J
AU Adamoli, A
   Zaparanuks, D
   Jovic, M
   Hauswirth, M
AF Adamoli, Andrea
   Zaparanuks, Dmitrijs
   Jovic, Milan
   Hauswirth, Matthias
TI Automated GUI performance testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Performance testing; Graphical user interfaces; Test automation;
   Perfomance analysis
ID RECORD/REPLAY
AB A significant body of prior work has devised approaches for automating the functional testing of interactive applications. However, little work exists for automatically testing their performance. Performance testing imposes additional requirements upon GUI test automation tools: the tools have to be able to replay complex interactive sessions, and they have to avoid perturbing the application's performance. We study the feasibility of using five Java GUI capture and replay tools for GUI performance test automation. Besides confirming the severity of the previously known GUI element identification problem, we also describe a related problem, the temporal synchronization problem, which is of increasing importance for GUI applications that use timer-driven activity. We find that most of the tools we study have severe limitations when used for recording and replaying realistic sessions of real-world Java applications and that all of them suffer from the temporal synchronization problem. However, we find that the most reliable tool, Pounder, causes only limited perturbation and thus can be used to automate performance testing. Based on an investigation of Pounder's approach, we further improve its robustness and reduce its perturbation. Finally, we demonstrate in a set of case studies that the conclusions about perceptible performance drawn from manual tests still hold when using automated tests driven by Pounder. Besides the significance of our findings to GUI performance testing, the results are also relevant to capture and replay-based functional GUI test automation approaches.
C1 [Adamoli, Andrea; Zaparanuks, Dmitrijs; Jovic, Milan; Hauswirth, Matthias] Univ Lugano, Fac Informat, Lugano, Switzerland.
C3 Universita della Svizzera Italiana
RP Adamoli, A (corresponding author), Via Giuseppe Buffi 13, CH-6904 Lugano, Switzerland.
EM andrea.adamoli@usi.ch; dmitrijs.zaparanuks@usi.ch; milan.jovic@usi.ch;
   matthias.hauswirth@usi.ch
OI Adamoli, Andrea/0000-0001-5997-2187
FU Swiss National Science Foundation [125259]
FX This work has been conducted in the context of the Binary Translation
   and Virtualization cluster of the EU HiPEAC Network of Excellence. It
   has been funded by the Swiss National Science Foundation under grant
   number 125259.
CR Adamoli Andrea, 2010, SOFTVIS 10
   ALSMADI I, 2008, ICIS 08, P581
   Belli F, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P34, DOI 10.1109/ISSRE.2001.989456
   BLACKBURN SM, 2006, OOPSLA 06, P169
   Brooks P. A., 2007, Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering, P333
   Brooks P, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P11, DOI 10.1109/ICST.2009.11
   Chang TH, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1535
   Chinnapongse V, 2009, LECT NOTES COMPUT SC, V5860, P203, DOI 10.1007/978-3-642-10265-3_19
   DEOLIVEIRA DAS, 2006, ASID 06, P66
   DEURSEN A, 2010, P 36 C CURR TRENDS T, P16
   Di Lucca GA, 2002, PROC IEEE INT CONF S, P310, DOI 10.1109/ICSM.2002.1167787
   El Ariss Omar, 2010, Proceedings of the Seventh International Conference on Information Technology: New Generations (ITNG 2010), P1038, DOI 10.1109/ITNG.2010.216
   Elbaum S, 2005, IEEE T SOFTWARE ENG, V31, P187, DOI 10.1109/TSE.2005.36
   Elbaum S, 2003, PROC INT CONF SOFTW, P49, DOI 10.1109/ICSE.2003.1201187
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Grechanik M, 2009, PROC INT CONF SOFTW, P408, DOI 10.1109/ICSE.2009.5070540
   Hackner DR, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P959
   JOVIC M, 2010, AST 10, P8
   Jovic M., 2008, PPPJ 08, P137, DOI DOI 10.1145/1411732.1411751
   KASIK DJ, 1996, P C HUM FACT COMP SY, P244
   Li K., 2004, Effective GUI testing automation: Developing an automated GUI testing tool
   Li P, 2007, EMPIR SOFTW ENG, V12, P331, DOI 10.1007/s10664-006-9031-3
   Lindvall M, 2007, EMPIR SOFTW ENG, V12, P417, DOI 10.1007/s10664-006-9034-0
   Liu CH, 2000, FIRST ASIA-PACIFIC CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P7, DOI 10.1109/APAQ.2000.883773
   Liu CH, 2000, 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P84, DOI 10.1109/ISSRE.2000.885863
   Liu HK, 2009, HPDC'09: 18TH ACM INTERNATIONAL SYMPOSIUM ON HIGH PERFORMANCE DISTRIBUTED COMPUTING, P101
   Lowell C., 2003, Extreme Programming and Agile Processes in Software Engineering. 4th International Conference, XP 2003. Proceedings (Lecture Notes in Computer Science Vol.2675), P331
   Marchetto Alessandro, 2008, International Journal on Software Tools for Technology Transfer, V10, P477, DOI 10.1007/s10009-008-0086-x
   MARCHETTO A, 2008, ICST, P121
   MCMASTER S, 2009, TESTBEDS 09
   McMaster S, 2008, IEEE T SOFTWARE ENG, V34, P99, DOI 10.1109/TSE.2007.70756
   Memon A, 2005, J SOFTW MAINT EVOL-R, V17, P27, DOI 10.1002/smr.305
   Memon AM, 2005, IEEE T SOFTWARE ENG, V31, P884, DOI 10.1109/TSE.2005.117
   Memon AM, 2001, IEEE T SOFTWARE ENG, V27, P144, DOI 10.1109/32.908959
   Memon AM, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1416563.1416564
   Mesbah A, 2009, PROC INT CONF SOFTW, P210, DOI 10.1109/ICSE.2009.5070522
   MESZAROS G, 2003, COMP 18 ANN ACM SIGP, P353
   MITCHELL A, 2004, WINT INT S INF COMM, P1
   Mu B, 2009, 2009 WRI WORLD CONGRESS ON SOFTWARE ENGINEERING, VOL 4, PROCEEDINGS, P194, DOI 10.1109/WCSE.2009.91
   Mytkowicz T, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P187, DOI 10.1145/1806596.1806618
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Narayanasamy S., 2005, Proceedings of the 32th Annual International Symposium on Computer Architecture, P284
   NGUYEN DH, 2010, P 5 WORKSH AUT SOFTW, P24
   Qing Xie, 2006, 28th International Conference on Software Engineering Proceedings, P997
   Ricca F, 2001, PROC INT CONF SOFTW, P25, DOI 10.1109/ICSE.2001.919078
   Ronsse M, 2003, COMMUN ACM, V46, P62, DOI 10.1145/903893.903895
   Ronsse M, 1999, ACM T COMPUT SYST, V17, P133, DOI 10.1145/312203.312214
   RUIZ A, 2008, P TEST AC IND C PRAC, P99
   Ruiz A, 2007, IEEE SOFTWARE, V24, P51, DOI 10.1109/MS.2007.92
   SAMPATH S, 2004, P 2 INT WORKSH DYN A
   Shehady RK, 1997, DIG PAP INT SYMP FAU, P80, DOI 10.1109/FTCS.1997.614080
   Silva JoaoCarlos., 2009, P 2009 ACM S APPL CO, P121
   Steven J., 2000, Software Engineering Notes, V25, P158, DOI 10.1145/347636.348993
   STRECKER J, 2008, ICST 08
   *SUN MICR, 2004, JAV VIRT MACH TOOL I
   White L, 2000, 11TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P110, DOI 10.1109/ISSRE.2000.885865
   Xie Q, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1416563.1416567
   Xie Q, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189752
   YANG JT, 1999, 23 INT COMP SOFTW AP, P122
   Yanhong Sun., 2004, P 42 ANN SE REGIONAL, P140, DOI DOI 10.1145/986537.986570
   Yuan X, 2007, PROC INT CONF SOFTW, P396
   Yuan X, 2010, IEEE T SOFTWARE ENG, V36, P81, DOI 10.1109/TSE.2009.68
   Yuan X, 2009, IEEE ICST WORKSHOP, P263, DOI 10.1109/ICSTW.2009.26
   Zaparanuks D, 2010, INT SYM PERFORM ANAL, P23, DOI 10.1109/ISPASS.2010.5452075
NR 64
TC 15
Z9 17
U1 0
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2011
VL 19
IS 4
SI SI
BP 801
EP 839
DI 10.1007/s11219-011-9135-x
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 814RN
UT WOS:000294474900009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Stefik, A
   Gellenbeck, E
AF Stefik, Andreas
   Gellenbeck, Ed
TI Empirical studies on programming language stimuli
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Multimedia programming; Program comprehension; Debugging
ID ENVIRONMENTS
AB Comprehending and debugging computer programs are inherently difficult tasks. The current approach to building program execution and debugging environments is to use exclusively visual stimuli on programming languages whose syntax and semantics has often been designed without empirical guidance. We present an alternative: Sodbeans, an open-source integrated development environment designed to output carefully chosen spoken auditory cues to supplement empirically evaluated visual stimuli. Originally designed for the blind, earlier work suggested that Sodbeans may benefit sighted programmers as well. We evaluate Sodbeans in two experiments. First, we report on a formal debugging experiment comparing (1) a visual debugger, (2) an auditory debugger, and (3) a multimedia debugger, which includes both visual and auditory stimuli. The results from this study indicate that while auditory debuggers on their own are significantly less effective for sighted users when compared with visual and multimedia debuggers, multimedia debuggers might benefit sighted programmers under certain circumstances. Specifically, we found that while multimedia debuggers do not provide instant usability, once programmers have some practice, their performance in answering comprehension questions improves. Second, we created and evaluated a pilot survey analyzing individual elements in a custom programming language (called HOP) to garner empirical metrics on their comprehensibility. Results showed that some of the most widely used syntax and semantics choices in commercial programming languages are extraordinarily unintuitive for novices. For example, at an aggregate level, the word for , as in a for loop, was rated reliably worse than repeat by more than 673% by novices. After completing our studies, we implemented the HOP programming language and integrated it into Sodbeans.
C1 [Stefik, Andreas] So Illinois Univ, Edwardsville, IL 62026 USA.
   [Gellenbeck, Ed] Cent Washington Univ, Ellensburg, WA USA.
C3 Southern Illinois University System; Southern Illinois University
   Edwardsville; Central Washington University
RP Stefik, A (corresponding author), So Illinois Univ, Edwardsville, IL 62026 USA.
EM stefika@gmail.com; gellenbe@cwu.edu
FU National Science Foundation [CNS-0940521, DUE-0536770]; Direct For
   Computer & Info Scie & Enginr; Division Of Computer and Network Systems
   [0940555] Funding Source: National Science Foundation; Division Of
   Computer and Network Systems; Direct For Computer & Info Scie & Enginr
   [0940521] Funding Source: National Science Foundation
FX We would like to thank Catherine Daus for her assistance with parts of
   the statistical analysis in Empirical Study 2. We would also like to
   thank Richard Most, one of the blind computer programmers we collaborate
   with, for his help in getting better screen reader compatibility on Mac
   OS X into Sodbeans. And, we thank Neelima Samsani, Andrew Hauck, and
   Aaron Willows for their help in implementing Sodbeans, both the HOP
   virtual machine (Neelima and Aaron), the NetBeans Platform code
   (Neelima), and the auditory libraries (Andrew). We would also like to
   thank Tim Boudreau (Oracle) and Tom Wheeler (A NetBeans Platform
   expert), who, through their extraordinary technical expertise with the
   NetBeans Platform, helped make the Sodbeans 1.0 release possible.
   Lastly, we wish to express gratitude to the National Science Foundation
   under awards (CNS-0940521) and (DUE-0536770) for their support of this
   work.
CR [Anonymous], 1983, Proc. ACM Symposium on Principles of Programming Languages
   Begel A, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P271, DOI 10.1109/VLHCC.2004.49
   Binkley D, 2009, INT C PROGRAM COMPRE, P158, DOI 10.1109/ICPC.2009.5090039
   Boardman DB, 1995, P INT COMP SOFTW APP, P184, DOI 10.1109/CMPSAC.1995.524778
   Brown A., 2004, ASSETS 2004. The Sixth International ACM SIGACCESS Conference on Computers and Accessibility, P40
   Brown M. H., 1991, Proceedings. 1991 IEEE Workshop on Visual Languages (Cat. No.91TH0402-8), P10, DOI 10.1109/WVL.1991.238856
   COOPER S, 2000, CONSORTIUM COMPUTING, P107
   Dawkins Richard., 2006, The Selfish Gene: 30th Anniversary Edition
   Deissenböck F, 2005, PROG COMPREHEN, P97, DOI 10.1109/WPC.2005.14
   Dougherty J.P., 2007, Journal of Computing Sciences in Colleges, V22, P145
   Ellis B, 2007, PROC INT CONF SOFTW, P302
   Francioni J.M., 1991, 6 DISTR MEM COMP C, P570
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gaver William W, 1986, Human-computer interaction, V2, P167, DOI [10.1207/s15327051hci0202_3, DOI 10.1207/S15327051HCI0202_3]
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Gross P., 2005, P 1 INT WORKSH COMP, P99, DOI [https://doi.org/10.1145/1089786.1089796, DOI 10.1145/1089786.1089796]
   Guzdial M, 2002, COMMUN ACM, V45, P17, DOI 10.1145/505248.505261
   HOST EW, 2007, SCAM 07, V1, P193, DOI DOI 10.1109/SCAM.2007.31
   HUNDHAUSEN CD, 2005, ICER 05, P45, DOI DOI 10.1145/1089786.1089791
   HUNDHAUSEN CD, 2006, SOFTVIS 06, P155, DOI DOI 10.1145/1148493.1148521
   Hundhausen CD, 2009, ACM T COMPUT-HUM INT, V16, DOI 10.1145/1592440.1592442
   Kelleher C, 2005, ACM COMPUT SURV, V37, P83, DOI 10.1145/1089733.1089734
   LEWIS B, 2003, OOPSLA 03, P96, DOI DOI 10.1145/949344.949367
   MAYRHAUSER AV, 1997, ESP 97, P157, DOI DOI 10.1145/266399.266414
   McIver L., 2000, 12 ANN WORKSH PSYCH
   MCLVER LK, 2001, THESIS MONASH U
   McTear MF, 2002, ACM COMPUT SURV, V34, P90, DOI 10.1145/505282.505285
   MELVER L, 1996, P INT C SOFTW ENG ED, P309
   Mullins Paul., 2009, J COMPUT SMALL COLL, V24, P136
   Myers B., 2008, WEUSE, P30
   Myers B., 1996, CMUCS96132
   Myers BA, 2004, COMMUN ACM, V47, P47, DOI 10.1145/1015864.1015888
   Palladino D.K., 2007, Proceedings of the International Conference on Auditory Display (ICAD'07), P274
   Parente P., 2004, ASSETS 2004. The Sixth International ACM SIGACCESS Conference on Computers and Accessibility, P2
   Pausch R, 2008, SIGCSE'08: PROCEEDINGS OF THE 39TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P1
   Pennington Nancy, 1987, Empirical studies of programmers, P100
   Pothier G, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P535
   RITCHIE DM, 1996, DEV C PROGRAMMING LA, P671, DOI DOI 10.1145/234286.1057834
   Sammet J., 1981, The Early History o f Cobol. History o f P ro g ra m m in g I -angnapes R. W exelblat, P199, DOI DOI 10.1145/800025.1198367
   SMITH AC, 2004, 10 INT ACM SIGACCESS, P133, DOI DOI 10.1145/1029014.1028654
   SOLOWAY E, 1983, COMMUN ACM, V26, P853, DOI 10.1145/182.358436
   STEELE GL, 1996, EVOLUTION LISP, P233, DOI DOI 10.1145/234286.1057818
   STEFIK A, 2006, SOFTWARE ENG RES PRA, P959
   STEFIK A, 2007, ICPC 07
   Stefik A, 2008, THESIS WASHINGTON ST
   STEVENS R, 1996, THESIS U YORK
   Stroustrup B., 1996, History of Programming Languages|II, P699, DOI [10.1145/234286.1057836, DOI 10.1145/234286.1057836]
   TABBERS HK, 2001, ANN C COGN SCI SOC
   Vickers P, 2002, INTERACT COMPUT, V14, P793, DOI 10.1016/S0953-5438(02)00026-7
   Vickers P., 2005, ACM Transactions on Applied Perception (TAP), V2, P477, DOI DOI 10.1145/1101530.1101546
   Walker B.N., 2006, P 12 INT C AUD DISPL
   Walker B. N., 2005, ACM Transactions on Applied Perception, V2, P407, DOI [10.1145/1101530.1101534, DOI 10.1145/1101530.1101534]
   WHITAKER WA, 1996, ADA PROJECT DOD HIGH, P173, DOI DOI 10.1145/234286.1057816
NR 53
TC 11
Z9 13
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2011
VL 19
IS 1
SI SI
BP 65
EP 99
DI 10.1007/s11219-010-9106-7
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TY
UT WOS:000286465500004
DA 2024-07-18
ER

PT J
AU Singh, Y
   Kaur, A
   Malhotra, R
AF Singh, Yogesh
   Kaur, Arvinder
   Malhotra, Ruchika
TI Empirical validation of object-oriented metrics for predicting fault
   proneness models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Metrics; Object-oriented; Software quality; Empirical validation; Fault
   prediction; Receiver operating characteristics analysis
ID SOFTWARE QUALITY; NEURAL-NETWORKS; DESIGN METRICS; SUITE
AB Empirical validation of software metrics used to predict software quality attributes is important to ensure their practical relevance in software organizations. The aim of this work is to find the relation of object-oriented (OO) metrics with fault proneness at different severity levels of faults. For this purpose, different prediction models have been developed using regression and machine learning methods. We evaluate and compare the performance of these methods to find which method performs better at different severity levels of faults and empirically validate OO metrics given by Chidamber and Kemerer. The results of the empirical study are based on public domain NASA data set. The performance of the predicted models was evaluated using Receiver Operating Characteristic (ROC) analysis. The results show that the area under the curve (measured from the ROC analysis) of models predicted using high severity faults is low as compared with the area under the curve of the model predicted with respect to medium and low severity faults. However, the number of faults in the classes correctly classified by predicted models with respect to high severity faults is not low. This study also shows that the performance of machine learning methods is better than logistic regression method with respect to all the severities of faults. Based on the results, it is reasonable to claim that models targeted at different severity levels of faults could help for planning and executing testing by focusing resources on fault-prone parts of the design and code that are likely to cause serious failures.
C1 [Singh, Yogesh; Kaur, Arvinder; Malhotra, Ruchika] GGS Indraprastha Univ, Univ Sch Informat Technol, Delhi 110403, India.
C3 GGS Indraprastha University
RP Malhotra, R (corresponding author), GGS Indraprastha Univ, Univ Sch Informat Technol, Delhi 110403, India.
EM ys66@rediffmail.com; arvinderkaurtakkar@yahoo.com;
   ruchikamalhotra2004@yahoo.com
RI Malhotra, Ruchika/ABC-3126-2020; KAUR, ARVINDER/ABH-7358-2020
OI Malhotra, Ruchika/0000-0003-3872-6213; 
CR Afzal W., 2007, METRICS SOFTWARE TES
   Aggarwal K. K., 2009, Software Process: Improvement and Practice, V14, P39, DOI 10.1002/spip.389
   Aggarwal KK, 2006, J OBJECT TECHNOL, V5, P149, DOI 10.5381/jot.2006.5.8.a5
   Aggarwal K. K., 2007, INT C INF SYST TECHN
   Aggarwal KK, 2005, THIRD ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGMENT AND APPLICATIONS, PROCEEDINGS, P48, DOI 10.1109/SERA.2005.60
   AGGARWAL KK, 2006, SOFTW QUAL PROF, V8, P4
   [Anonymous], 1994, Object-oriented software metrics: a practical guide
   [Anonymous], 1994, USE FACTOR ANAL DEV
   [Anonymous], 10441993 IEEE
   [Anonymous], P 1995 S SOFTW REUS
   Barnett V., 1995, OUTLIERS STAT DATA, V3th
   Basili VR, 1996, IEEE T SOFTWARE ENG, V22, P751, DOI 10.1109/32.544352
   BAZMAN, 2006, WEBSITE CONTAINING A
   Belsley D. A., 2005, Regression Diagnostics: Identifying Influential Data and Sources of Collinearity
   Binkley AB, 1998, PROC INT CONF SOFTW, P452, DOI 10.1109/ICSE.1998.671604
   Briand L. C., 2001, Empirical Software Engineering, V6, P11, DOI 10.1023/A:1009815306478
   Briand L. C., 1998, Empirical Software Engineering, V3, P65, DOI 10.1023/A:1009783721306
   Briand LC, 2000, J SYST SOFTWARE, V51, P245, DOI 10.1016/S0164-1212(99)00102-8
   Briand LC, 1999, IEEE T SOFTWARE ENG, V25, P91, DOI 10.1109/32.748920
   Cartwright M, 2000, IEEE T SOFTWARE ENG, V26, P786, DOI 10.1109/32.879814
   CHIDAMBER SR, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P197, DOI 10.1145/118014.117970
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Chidamber SR, 1998, IEEE T SOFTWARE ENG, V24, P629, DOI 10.1109/32.707698
   Dreiseitl S, 2002, J BIOMED INFORM, V35, P352, DOI 10.1016/S1532-0464(03)00034-0
   DUMAN E, 2006, 7 INT BALT C DAT INF
   Eftekhar Behzad, 2005, BMC Med Inform Decis Mak, V5, P3
   ELEMAM K, 1999, ERB1063 NRC
   Emam KE, 2001, IEEE T SOFTWARE ENG, V27, P630, DOI 10.1109/32.935855
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   Hair J.F., 2006, Black, Multivariate data analysis with readings, V6th
   Han J., 2001, Data Mining: Concepts and Techniques, V3rd edn
   HANLEY JA, 1982, RADIOLOGY, V143, P29, DOI 10.1148/radiology.143.1.7063747
   Harrison R, 1998, IEEE T SOFTWARE ENG, V24, P491, DOI 10.1109/32.689404
   Henderson-Sellers B., 1996, Object-Oriented Metrics, measures of complexity
   Hitz M., 1995, PROC INT S APPL CORP
   Hopkins WillG., 2003, A new view of statistics
   Horch J., 2003, Practical guide to software quality management, V2nd
   Hosmer D W., 2004, Applied Logistic Regression
   Khoshgoftaar TM, 2002, 7TH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P51, DOI 10.1109/HASE.2002.1173102
   Khoshgoftaar TM, 1997, IEEE T NEURAL NETWOR, V8, P902, DOI 10.1109/72.595888
   Laird L., 2006, Software Measurement and Estimation: A Practical Approach
   LEE Y, 1995, P INT C SOFTW QUAL M
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   LOVIN C, 2006, BEST PRACTICES MEASU, P101
   Marini F, 2008, MICROCHEM J, V88, P178, DOI 10.1016/j.microc.2007.11.008
   Menzies T, 2007, IEEE T SOFTWARE ENG, V33, P2, DOI 10.1109/TSE.2007.256941
   *NASA, 2004, METR DAT REP
   Olague HM, 2007, IEEE T SOFTWARE ENG, V33, P402, DOI 10.1109/TSE.2007.1015.
   Pai GJ, 2007, IEEE T SOFTWARE ENG, V33, P675, DOI [10.1109/TSE.2007.70722, 10.1109/TSE.2007.70722.]
   PHADKE A, 2005, P 2 INT WORKSH SOFTW, P60
   Ping Yu, 2002, Proceedings of the Sixth European Conference on Software Maintenance and Reengineering, P99, DOI 10.1109/CSMR.2002.995794
   PORTER AA, 1990, IEEE SOFTWARE, V7, P46, DOI 10.1109/52.50773
   STONE M, 1974, J R STAT SOC B, V36, P111, DOI 10.1111/j.2517-6161.1974.tb00994.x
   TANG MH, 1999, P 6 INT SOFTW METR S, P242, DOI DOI 10.1109/METRIC.1999.809745
   TEGARDEN DP, 1995, DECIS SUPPORT SYST, V13, P241, DOI 10.1016/0167-9236(93)E0045-F
   Tian J., 2005, Software Quality Engineering: Testing, Quality Assurance, and Quantifiable Improvement
   Zhou YM, 2006, IEEE T SOFTWARE ENG, V32, P771, DOI 10.1109/TSE.2006.102
NR 58
TC 113
Z9 123
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2010
VL 18
IS 1
BP 3
EP 35
DI 10.1007/s11219-009-9079-6
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 546JH
UT WOS:000273806600002
DA 2024-07-18
ER

PT J
AU Elliott, M
   Dawson, R
   Edwards, J
AF Elliott, Michael
   Dawson, Ray
   Edwards, Janet
TI An evolutionary cultural-change approach to successful software process
   improvement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Culture; Training; Standards; Quality improvement; Conformance;
   Return-on-investment
AB With a plethora of models, systems and standards to choose for a basis of software process improvement, decisions on which to adopt may depend on a number of factors. This paper presents an evolutionary and extremely cost effective approach to implementing a software quality system that requires minimum resource and little disruption to programme delivery. The method presented, achieved a 40% improvement in the level of implementation of the AWE plc software quality management system over a 5-year period. A critical success factor is the treatment of the users' of the defined software quality system as customers, understanding their concerns and problems, and being responsive to them. The importance of a well designed system is highlighted together with the essential and extensive consultation process required to gain buy-in and lay the foundation for cultural change. This was supported with a helpful programme of facilitated self-assessment and sustained by a closely aligned training scheme. As a consequence some of the cultural elements were changed from one of thoughtless "tick-in-the-box" compliance to one of true understanding of the system requirements, true quality implementation, and subsequent added value.
C1 [Elliott, Michael] AWE Plc, Reading, Berks, England.
   [Dawson, Ray; Edwards, Janet] Univ Loughborough, Dept Comp Sci, Loughborough, Leics, England.
C3 Loughborough University
RP Elliott, M (corresponding author), AWE Plc, Reading, Berks, England.
EM mike.elliott@awe.co.uk; R.J.Dawson@lboro.ac.uk; J.Edwards@lboro.ac.uk
RI Elliott, Michael/B-4312-2013
CR [Anonymous], 2001, EXTR CHAOS
   [Anonymous], 2000, ISO 9001:2000
   *CARN MELL U, 2001, CAP MAT MOD INT
   *CARN MELL U, 1998, SOFTW CAP MAT MOD
   Dwyer B., 2001, International Journal of Educational Management, V15, P312, DOI DOI 10.1108/EUM0000000005910
   ELLIOTT M, 2006, P SOFTW QUAL MAN 14, P17
   Elliott M., 2005, P SOFTW QUAL MAN 13, P43
   FAGAN ME, 1976, IBM SYST J, V12, P741
   GUERREROCOSUMAN.JL, 1997, BUSINESS PROCESS MAN, V3, P205
   *ISO, 1998, 15504 ISO
   KERSTIN SV, 2006, P SOFTW QUAL MAN 14, P85
   Kirkpatrick D.L., 1994, EVALUATING TRAINING
   Lee P., 2001, INT J QUALITY RELIAB, V18, P118
   Phillips J.J., 2002, Return on investment in training and performance improvement programs, V2nd
   Rico D. F., 2002, SOFTW ENG PROC GROUP
   Samuelsson P., 2002, International Journal of Quality Reliability Management, V19, P10, DOI DOI 10.1108/02656710210413426
   SANDI M, 1996, J EUROPEAN IND TRAIN, V20, P14
   Tennant C., 2002, J EUR IND TRAIN, V26, P230
   VANDERWIELE T, 1995, J QUALITY RELIABILIT, V13, P84
   Waina R. B., 2001, 5 CRITICAL QUESTIONS
NR 20
TC 3
Z9 3
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2009
VL 17
IS 2
BP 189
EP 202
DI 10.1007/s11219-008-9070-7
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 428YB
UT WOS:000264886900006
DA 2024-07-18
ER

PT J
AU Fraser, G
   Wotawa, F
AF Fraser, Gordon
   Wotawa, Franz
TI Using model-checkers to generate and analyze property relevant
   test-cases
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 2nd Workshop on Advances in Model-based Software Testing
CY NOV 06, 2006
CL Raleigh, NC
DE property relevance; software testing; requirements traceability;
   test-suite analysis; model-checker based testing
ID CHECKING
AB Verification is applied to software as a proof method with respect to its requirements. Software testing is necessary because verification is often infeasible. Automation is desirable since the complexity and the effort involved are significant. However, automated software testing is commonly used to ensure confidence in the conformance of an implementation to an abstract model, not to its requirement properties. In this paper, we introduce the notion of property relevance of test-cases. Property relevant test-cases can be used to determine property violations. It is shown how to detect the properties relevant to a test-case. New coverage criteria based on property relevance are introduced. Automated generation of test-suites satisfying these criteria is also presented. Finally, feasibility is illustrated with an empirical evaluation.
RP Fraser, G (corresponding author), Graz Univ Technol, Inst Software Technol, Inffeldgasse 16B-2, A-8010 Graz, Austria.
EM fraser@ist.tugraz.at; wotawa@ist.tugraz.at
OI Wotawa, Franz/0000-0002-0462-2283
CR Acree AT., 1979, MUTATION ANAL
   Ammann P, 2001, IEEE INT C ENG COMP, P212, DOI 10.1109/ICECCS.2001.930180
   Ammann P. E., 1999, Proceedings 4th IEEE International Symposium on High-Assurance Systems Engineering, P239, DOI 10.1109/HASE.1999.809499
   Ammann Paul., 2002, Model checkers in software testing
   Ammann PE, 1998, SECOND INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P46, DOI 10.1109/ICFEM.1998.730569
   Bharadwaj R., 1999, Automated Software Engineering, V6, P37, DOI 10.1023/A:1008697817793
   Black PE, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P81, DOI 10.1109/ASE.2000.873653
   BLACK PE, 2000, P 19 DIG AV SYST C, V1
   CALLAHAN J, 1996, P 1996 SPIN WORKSH
   Cimatti A., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P495
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Fraser G, 2006, SIGSOFT SOFTW ENG NO, V31, P1, DOI DOI 10.1145/1218776.1218787
   Gargantini A, 1999, LECT NOTES COMPUT SC, V1687, P146, DOI 10.1145/318774.318939
   Hamon G, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P261, DOI 10.1109/SEFM.2004.1347530
   HAMON G, 2005, AUTOMATED TEST GENER
   Havelund K., 2001, Electronic Notes in Theoretical Computer Science, V55, DOI 10.1016/S1571-0661(04)00253-1
   HEIMDAHL MP, 2003, 3 INT WORKSH FORM AP, V2931, P42
   KIRBY J, 1987, TR8707 WANG I GRAD S
   Markey N, 2003, LECT NOTES COMPUT SC, V2761, P251
   Offutt A. J., 1999, Proceedings Fifth IEEE International Conference on Engineering of Complex Computer Systems (ICECCS'99) (Cat. No.PR00434), P119, DOI 10.1109/ICECCS.1999.802856
   OKUN V, 2003, P 2002 WSEAS INT C S, P1351
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Rayadurgam S, 2001, EIGHTH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER BASED SYSTEMS, PROCEEDINGS, P83, DOI 10.1109/ECBS.2001.922409
   TAN ILL, 2004, P IEEE INT C INF REU, P493
   WHALEN MW, 2006, ISSTA 06, P25
NR 26
TC 18
Z9 21
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2008
VL 16
IS 2
BP 161
EP 183
DI 10.1007/s11219-007-9031-6
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 286MP
UT WOS:000254850300002
DA 2024-07-18
ER

PT J
AU Andrews, A
   Mancebo, E
   Runeson, P
   France, R
AF Andrews, A
   Mancebo, E
   Runeson, P
   France, R
TI A framework for design tradeoffs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE design tradeoffs; UML; security; fault tolerance
AB Designs almost always require tradeoffs between competing design choices to meet system requirements. We present a framework for evaluating design choices with respect to meeting competing requirements. Specifically, we develop a model to estimate the performance of a UML design subject to changing levels of security and fault-tolerance. This analysis gives us a way to identify design solutions that are infeasible. Multi-criteria decision making techniques are applied to evaluate the remaining feasible alternatives. The method is illustrated with two examples: a small sensor network and a system for controlling traffic lights.
C1 Univ Denver, Dept Comp Sci, Denver, CO 80208 USA.
   Amazon Com, Seattle, WA USA.
   Lund Univ, Dept Commun Sci, S-22100 Lund, Sweden.
   Colorado State Univ, Dept Comp Sci, Ft Collins, CO 80523 USA.
C3 University of Denver; Amazon.com; Lund University; Colorado State
   University
RP Univ Denver, Dept Comp Sci, Denver, CO 80208 USA.
EM andrews@cs.du.edu; mancebo@msoe.edu; per.runeson@telecom.lth.se;
   france@cs.colostate.edu
RI Runeson, Per/H-5113-2019
OI Runeson, Per/0000-0003-2795-4851
CR ALSAADI A, 2004, P 4 INT WORKSH SOFTW, P254
   Andrews A, 2004, 11TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOP ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P282, DOI 10.1109/ECBS.2004.1316710
   Avritzer A., 2002, P 3 INT WORKSHOP SOF, P17
   Balsamo S, 2004, IEEE T SOFTWARE ENG, V30, P295, DOI 10.1109/TSE.2004.9
   Bass Len, 2012, SEI S SOFTW
   Berander P., 2005, Engineering and Managing Software Requirements
   Berling T, 2003, IEEE T SOFTWARE ENG, V29, P769, DOI 10.1109/TSE.2003.1232283
   Berling T., 2000, Proceedings Seventh IEEE International Conference and Workshop on the Engineering of Computer Based Systems (ECBS 2000), P318, DOI 10.1109/ECBS.2000.839891
   Boehm B., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P74, DOI 10.1109/ICRE.1994.292400
   BOGETOFT P., 1991, PLANNING MULTIPLE CR
   Darimont R, 1997, PROC INT CONF SOFTW, P612, DOI 10.1145/253228.253499
   Easton A., 1973, COMPLEX MANAGERIAL D
   FEATHER M, 2002, P INT WORKSH REQ HIG, P11
   FEATHER M, 2002, P INT DES PROC TECHN
   Feather M. S., 2003, Requirements Engineering, V8, P248, DOI 10.1007/s00766-002-0160-y
   Fowler Martin., 1999, UML Distilled: A Brief Guide to the Standard Object Modeling Language
   FRANCE R, 2002, 02102 COL STAT U COM
   GEORG G, 2003, 03111 COL STAT U COM
   GRAY J, 2002, COMMUN ACM, V44, P87
   GROCHOW JM, 1972, STAT COMPUTER PERFOR
   Johansson E, 2004, RTAS 2004: 10TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P156, DOI 10.1109/RTTAS.2004.1317260
   KAO Y, 1990, QUALITY FUNCTION DEP
   Karlsson J, 1997, IEEE SOFTWARE, V14, P67, DOI 10.1109/52.605933
   Kazman R., 2000, Tech. Rep. CMU/SEI-2000-TR-004
   Keeney R. L., 1976, DECISION MULTIPLE OB
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   KLEIJNEN JPC, 1980, COMPUTERS PROFITS QU
   Liu XF, 1996, PROC INT CONF SOFTW, P60, DOI 10.1109/ICSE.1996.493402
   McKinnon AD, 2003, SECOND IEEE INTERNATIONAL SYMPOSIUM ON NETWORK COMPUTING AND APPLICATIONS, PROCEEDINGS, P197, DOI 10.1109/NCA.2003.1201156
   MCKINNON AD, 2003, THESIS WASHINGTON ST
   Mylopoulos J, 2001, IEEE SOFTWARE, V18, P92, DOI 10.1109/52.903174
   *OECD ROAD RES GRO, 1981, TRAFF CONTR SAT SIT
   PANDA DP, 1999, 3 INT MULT CIRC SYST, P176
   Petry D. B., 2002, Proceedings of the 7th World Congress on Genetics Applied to Livestock Production, Montpellier, France, August, 2002. Session 19, P1
   Saaty T.L., 1980, ANAL HIERARCHY PROCE
   Shepperd M, 2001, IEEE T SOFTWARE ENG, V27, P987, DOI 10.1109/32.965339
   SMITH CU, 2002, PERFORMANCE SOLUTION
   Svahnberg M, 2003, INT J SOFTW ENG KNOW, V13, P547, DOI 10.1142/S0218194003001421
   TAVLADAKIS K, 1999, P EUR S INT TECHN JU
   Von Mayrhauser A., 1990, Software engineering: methods and management
   Yen J, 1997, RE '97 - PROCEEDINGS OF THE THIRD IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, P87, DOI 10.1109/ISRE.1997.566845
   ZELENY M, 1976, MANAGE SCI, V23, P12, DOI 10.1287/mnsc.23.1.12
NR 42
TC 3
Z9 7
U1 1
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2005
VL 13
IS 4
BP 377
EP 405
DI 10.1007/s11219-005-4252-z
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 984BC
UT WOS:000233276500004
DA 2024-07-18
ER

PT J
AU Kiss, A
   Jász, J
   Gyimóthy, T
AF Kiss, A
   Jász, J
   Gyimóthy, T
TI Using dynamic information in the interprocedural static slicing of
   binary executables
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE static slicing; interprocedural slicing; binary executables; call graph;
   indirect function call; dynamic information
AB Although the slicing of programs written in a high-level language has been widely studied in the literature, relatively few papers have been published on the slicing of binary executable programs. The lack of existing solutions for the latter is really hard to understand since the application domain for slicing binaries is similar to that for slicing high-level languages. Furthermore, there are special applications of the slicing of programs without source code like source code recovery, code transformation and the detection of security critical code fragments. In this paper, in addition to describing the method of interprocedural static slicing of binaries, we discuss how the set of the possible targets of indirect call sites can be reduced by dynamically gathered information. Our evaluation of the slicing method shows that, if indirect function calls are extensively used, both the number of edges in the call graph and the size of the slices can be significantly reduced.
C1 Univ Szeged, Dept Software Engn, Szeged, Hungary.
C3 Szeged University
RP Univ Szeged, Dept Software Engn, Szeged, Hungary.
EM akiss@inf.u-szeged.hu; jasy@inf.u-szeged.hu; gyimi@inf.u-szeged.hu
RI Kiss, Ákos/A-3508-2008; Jász, Judit/ABA-6962-2021; Gyimothy,
   Tibor/M-3705-2018
OI Kiss, Ákos/0000-0003-3077-7075; Gyimothy, Tibor/0000-0002-2123-7387;
   Jasz, Judit/0000-0001-6176-9401
CR AGRAWAL H, 1994, P ACM SIGPLAN C PROG, P302
   [Anonymous], 2000, SPEC CINT2000 benchmarks
   [Anonymous], 1995, Tool interface standard (TIS) executable and linking format (ELF) specification version 1.2
   [Anonymous], P INT S MICR MICRO
   Antoniol G, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P51, DOI 10.1109/CSMR.1999.756682
   BALL T, 1993, P 1 INT WORKSH AUT A, P206
   BERGERON J, 1999, P IEEE INT WORKSH EN
   Beszédes A, 2002, PROC IEEE INT CONF S, P12, DOI 10.1109/ICSM.2002.1167743
   Beszédes A, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P105, DOI 10.1109/CSMR.2001.914974
   Binkley D., 1996, Advances in Computers, V43, P1
   Canfora G, 1998, INFORM SOFTWARE TECH, V40, P595, DOI 10.1016/S0950-5849(98)00086-X
   CHOI JD, 1994, ACM T PROGR LANG SYS, V16, P1097, DOI 10.1145/183432.183438
   Cifuentes C., 1997, Proceedings International Conference on Software Maintenance (Cat. No.97CB36119), P188, DOI 10.1109/ICSM.1997.624245
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Kiss A, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P118, DOI 10.1109/SCAM.2003.1238038
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Krinke J., 2003, THESIS U PASSAU
   KUMAR S, 2002, P FASE 2002 FUND APP
   LARUS JR, 1995, ACM SIGPLAN NOTICES, V30, P291
   Lengauer T., 1979, ACM T PROGR LANG SYS, V1, P121, DOI 10.1145/357062.357071
   Microsoft Corporation, 1999, MICR PORT EX COMM OB
   MOCK M, 2002, P 10 ACM SIGSOFT S F, P71
   REPS T, 1994, P ACM SIGSOFT 94 S F, P11
   SHAPIRO M, 1997, P 24 ACM SIGPLAN SIG
   TIP F, 1995, J PROGRAM LANG, V3, P121
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   [No title captured]
NR 30
TC 4
Z9 7
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2005
VL 13
IS 3
BP 227
EP 245
DI 10.1007/s11219-005-1751-x
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 946IW
UT WOS:000230566600003
DA 2024-07-18
ER

PT J
AU Kim, HY
   Sheldon, FT
AF Kim, HY
   Sheldon, FT
TI Testing software requirements with Z and statecharts applied to an
   embedded control system
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Z; Statecharts; requirements specification and validation; completeness;
   consistency; fault-tolerance
AB Software development starts by specifying the requirements. A Software Requirements Specification (SRS) describes what the software must do. Naturally, the SRS takes the core role as the descriptive documentation at every phase of the development cycle. To avoid problems in the latter development phases and reduce life-cycle costs, it is crucial to ensure that the specification is correct. This paper describes how to model, test and evaluate (i.e., check, examine, and probe) a natural language (NL) SRS using two formalisms (Z and Statecharts). These formalisms are used to determine strategies for avoiding design defects that stem from the requirements that could ultimately lead to system failures. A case study was performed to validate the integrity of a Guidance Control SRS in terms of completeness, consistency, and fault-tolerance. Based on these experiences, the NL-specification-->Z-->Statechart transformations can be completed in a systematic and repeatable manner that yield valuable insight into the overall integrity of software specifications.
C1 Samsung Elect, SW Grp, Digital Appliance R&D Ctr, Suwon 442742, Kyounggi Do, South Korea.
   Oak Ridge Natl Lab, Oak Ridge, TN 37831 USA.
   Washington State Univ, Pullman, WA 99164 USA.
   DaimlerChrysler RIC AS, Auburn Hills, MI USA.
C3 Samsung Electronics; Samsung; United States Department of Energy (DOE);
   Oak Ridge National Laboratory; Washington State University; Daimler AG
RP Samsung Elect, SW Grp, Digital Appliance R&D Ctr, 416 Meatan,3 Dong, Suwon 442742, Kyounggi Do, South Korea.
EM hyekim@ieee.org; sheldonft@ornl.gov
RI Sheldon, Frederick/T-8587-2019
OI Sheldon, Frederick/0000-0003-1241-2750
CR Bogdanov K, 2001, SOFTW TEST VERIF REL, V11, P39, DOI 10.1002/stvr.217
   Büssow R, 1998, LECT NOTES COMPUT SC, V1382, P71, DOI 10.1007/BFb0053584
   BUSSOW R, 1996, LECT NOTES COMPUTER, V1165, P109
   CASTELLO R, 2000, THESIS U TEXAS DALLA
   CZERNY BJ, 1998, THESIS MICHIGAN STAT
   DAMM W, 1995, LECT NOTES COMPUTER, V891, P131
   FABBRINI F, 2001, 7 INT WORKSH REQ ENG
   GAUDEL MC, 2002, IFIP WG 1 3 BOOK STA, pCH1
   GRIESKAMP W, 1998, SCI COMPUT PROGRAM, V40, P31
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D., 1998, MODELING REACTIVE SY
   He XD, 2001, INFORM SOFTWARE TECH, V43, P1, DOI 10.1016/S0950-5849(00)00134-8
   Heimdahl MPE, 1996, IEEE T SOFTWARE ENG, V22, P363, DOI 10.1109/32.508311
   Heitmeyer C, 1998, IEEE T SOFTWARE ENG, V24, P927, DOI 10.1109/32.730543
   Hierons RM, 2001, INFORM SOFTWARE TECH, V43, P137, DOI 10.1016/S0950-5849(00)00145-2
   Kotonya G., 1998, Requirements engineering: processes and techniques
   LEVESON N, 1995, SAFEWARE SYSEM SAFET
   *NASA, 1993, SOFTW REQ GUID CONTR
   PRADHAN DK, 1996, FAULT TOLERANT COMPU, P428
   SANNELLA D, 2002, IFIP WG 1 3 BOOK STA, pCH2
   Shaw A.C., 2001, REAL TIME SYSTEMS SO
   Sheldon FT, 2001, 2001 PACIFIC RIM INTERNATIONAL SYMPOSIUM ON DEPENDABLE COMPUTING, PROCEEDINGS, P311, DOI 10.1109/PRDC.2001.992714
   Sheldon FT, 2002, P A REL MAI, P312, DOI 10.1109/RAMS.2002.981660
   Sommerville I., 2000, Software Engineering, V6
   VLIET H., 2007, SOFTWARE ENG PRINCIP
   Voas J, 1997, COMPUTER, V30, P29, DOI 10.1109/2.587545
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
NR 27
TC 3
Z9 3
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2004
VL 12
IS 3
BP 231
EP 264
DI 10.1023/B:SQJO.0000034710.86897.16
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 837EQ
UT WOS:000222611600004
DA 2024-07-18
ER

PT J
AU Mansour, N
   Salame, M
AF Mansour, N
   Salame, M
TI Data generation for path testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE genetic algorithms; path testing; simulated annealing; software testing;
   software quality; structural testing
AB We present two stochastic search algorithms for generating test cases that execute specified paths in a program. The two algorithms are: a simulated annealing algorithm (SA), and a genetic algorithm (GA). These algorithms are based on an optimization formulation of the path testing problem which include both integer- and real-value test cases. We empirically compare the SA and GA algorithms with each other and with a hill-climbing algorithm, Korel's algorithm (KA), for integer-value-input subject programs and compare SA and GA with each other on real-value subject programs. Our empirical work uses several subject programs with a number of paths. The results show that: (a) SA and GA are superior to KA in the number of executed paths, (b) SA tends to perform slightly better than GA in terms of the number of executed paths, and (c) GA is faster than SA; however, KA, when it succeeds in finding the solution, is the fastest.
C1 Lebanese Amer Univ, Div Math & Comp Sci, Beirut 11022801, Lebanon.
   Med Univ S Carolina, Dept Biometry & Epidemiol, Charleston, SC 29425 USA.
C3 Lebanese American University; Medical University of South Carolina
RP Lebanese Amer Univ, Div Math & Comp Sci, Mme Curie St, Beirut 11022801, Lebanon.
EM nmansour@lau.edu.lb; jaffama@musc.edu
CR [Anonymous], ENCY SOFTWARE ENG
   [Anonymous], 1990, Software testing techniques {
   Clarke L. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P215, DOI 10.1109/TSE.1976.233817
   DEBNATH N, 2000, SOFTW ENG APPL NETW, P123
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   DURAN JW, 1984, IEEE T SOFTWARE ENG, V10, P438, DOI 10.1109/TSE.1984.5010257
   Garey M.R., 1979, COMPUTERS INTRACTABI
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   HAMLET D, 1990, IEEE T SOFTWARE ENG, V16, P1402, DOI 10.1109/32.62448
   HOWDEN WE, 1977, IEEE T SOFTWARE ENG, V3, P266, DOI 10.1109/TSE.1977.231144
   HOWDEN WE, 1986, IEEE T SOFTWARE ENG, V12, P997, DOI 10.1109/TSE.1986.6313016
   JENG B, 1994, AS PAC SOFTW ENG C T, P123
   Jones BF, 1998, COMPUT J, V41, P98, DOI 10.1093/comjnl/41.2.98
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Korel B, 1996, PROC INT CONF SOFTW, P71, DOI 10.1109/ICSE.1996.493403
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   Korel B., 1992, J SOFTWARE TESTING V, V2, P203
   MARX DIS, 1999, J SOFTWARE TESTING V, V9, P51
   McCabe T.J., 1982, STRUCTURED TESTING
   Offutt AJ, 1999, SOFTWARE PRACT EXPER, V29, P167, DOI 10.1002/(SICI)1097-024X(199902)29:2<167::AID-SPE225>3.0.CO;2-V
   PARGAS RP, 1999, J SOFTWARE TESTING V, V9, P263
   Ramamoorthy C. V., 1976, IEEE Transactions on Software Engineering, VSE-2, P293, DOI 10.1109/TSE.1976.233835
   RAPPS S, 1985, IEEE T SOFTWARE ENG, V11, P367, DOI 10.1109/TSE.1985.232226
   Sait S.M., 1999, ITERATIVE COMPUTER A
   STOCKS PA, 1993, PROC INT CONF SOFTW, P405, DOI 10.1109/ICSE.1993.346025
   TAI KC, 1993, INT C SOFTW ENG, P267
   Vidal R.V. V., 1993, Applied simulated annealing
   Whittaker JA, 2000, IEEE SOFTWARE, V17, P70, DOI 10.1109/52.819971
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 29
TC 47
Z9 63
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2004
VL 12
IS 2
BP 121
EP 136
DI 10.1023/B:SQJO.0000024059.72478.4e
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 812OG
UT WOS:000220848200003
DA 2024-07-18
ER

PT J
AU Haur, I
   Béchennec, JL
   Roux, OH
AF Haur, Imane
   Bechennec, Jean-Luc
   H. Roux, Olivier
TI Formal verification process of the compliance of a multicore AUTOSAR OS
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE High-Level Colored Time Petri Nets; Model-checking; Real-time operating;
   system (RTOS); AUTOSAR OS verification
ID PETRI NETS; MODEL-CHECKING
AB AUTOSAR conformance testing is based on requirements verification. This work focuses on multicore operating system (OS) requirements, of which there are eighty. We present a semi-automated formal process to check multicore OS compliance using High-Level Colored Time Petri Net and model-checking methods. To apply our approach, we use the Romeo tool to build an operating system model called Trampoline that conforms to the AUTOSAR OS specification. Each requirement of the multicore OS is formalized by an observer modeled by a Petri net to evaluate compliance. The observers evolve according to the operating system evolution without altering its behavior to check whether the specification is true or false. The approach ensures that the operating system model respects the multicore specification of AUTOSAR OS.
C1 [Haur, Imane] Lab Sci Numer Nantes LS2N, 1 Rue Noe, F-44300 Nantes, France.
   [Haur, Imane; Bechennec, Jean-Luc; H. Roux, Olivier] Huawei Paris Res Ctr, 20 Quai Point Jour, F-92100 Boulogne Billancourt, France.
C3 Huawei Technologies
RP Haur, I (corresponding author), Lab Sci Numer Nantes LS2N, 1 Rue Noe, F-44300 Nantes, France.; Haur, I (corresponding author), Huawei Paris Res Ctr, 20 Quai Point Jour, F-92100 Boulogne Billancourt, France.
EM haurimane@gmail.com; Jean-Luc.Bechennec@ls2n.fr;
   olivier-h.roux@ec-nantes.fr
FU ANRT; Huawei Technologies France [CIFRE2019-0798]
FX This research work has been partly funded by ANRT and Huawei
   Technologies France under doctoral contract CIFRE2019-0798.
CR ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   [Anonymous], 2014, SPEC OP SYST
   AUTOSAR, 2010, AUTOSAR BSW RTE CO 2
   AUTOSAR GbR, 2009, SPEC OP SYST
   Bechennec JL, 2018, INT C CONTROL DECISI, P628, DOI 10.1109/CoDIT.2018.8394813
   Boucheneb H, 2009, J LOGIC COMPUT, V19, P1509, DOI 10.1093/logcom/exp036
   Boukir K, 2020, 28TH INTERNATIONAL CONFERENCE ON REAL TIME NETWORKS AND SYSTEMS, RTNS 2020, P89, DOI 10.1145/3394810.3394817
   Boyer M, 2001, INT WORKSH PETRI NET, P219, DOI 10.1109/PNPM.2001.953371
   Chen J, 2011, ASIA PAC SOFWR ENG, P274, DOI 10.1109/APSEC.2011.26
   Choi Y, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P200, DOI 10.1109/ISSRE.2011.22
   Clarke E. M., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P450
   Cook S. A., 1971, P 3 ANN ACM S THEOR, P151, DOI [10.1145/800157.805047, DOI 10.1145/800157.805047]
   Gadelha MR, 2018, IEEE INT CONF AUTOM, P888, DOI 10.1145/3238147.3240481
   2005, OSEK VDK OPER SYST S
   Haur I., 2022, INT C CONTROL DECISI
   Haur I, 2022, INT C CONTROL DECISI, P21, DOI [10.1109/CoDIT55151.2022.9803922, 10.1109/CODIT55151.2022.9803922]
   Haur I, 2021, 29TH INTERNATIONAL CONFERENCE ON REAL TIME NETWORKS AND SYSTEMS (RTNS 2021), P216, DOI 10.1145/3453417.3453437
   Hillah L, 2006, LECT NOTES COMPUT SC, V4229, P307
   John D., 1998, IET C P, P7
   Kindler E., 2009, P 10 WORKSHOP TUTORI, P121
   Lime D, 2009, LECT NOTES COMPUT SC, V5505, P54, DOI 10.1007/978-3-642-00768-2_6
   Ling Fang, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P251, DOI 10.1109/ICST.2012.105
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   OSEK Group, 1999, OSEK VDX OS TEST PLA
   Peng YH, 2013, 2013 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P37, DOI 10.1109/TASE.2013.13
   Roux O. H., 2000, ROMEO FORMAL VERIFIC
   Tigori KTG, 2017, ACM T EMBED COMPUT S, V16, DOI 10.1145/3015777
   TRINH LK, 2018, 2018 INT S THEORETIC, P68
   Yan RK, 2019, IEEE HI ASS SYS ENGR, P123, DOI 10.1109/HASE.2019.00027
   Yanhong Huang, 2011, Proceedings of the 2011 IEEE 5th International Symposium on Theoretical Aspects of Software Engineering (TASE 2011), P142, DOI 10.1109/TASE.2011.11
NR 30
TC 0
Z9 0
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 497
EP 531
DI 10.1007/s11219-023-09626-4
EA MAY 2023
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000994973300002
DA 2024-07-18
ER

PT J
AU Rahman, MS
   Khomh, F
   Hamidi, A
   Cheng, JH
   Antoniol, G
   Washizaki, H
AF Rahman, Md Saidur
   Khomh, Foutse
   Hamidi, Alaleh
   Cheng, Jinghui
   Antoniol, Giuliano
   Washizaki, Hironori
TI Machine learning application development: practitioners' insights
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Machine learning application development; Testing machine learning
   application; Machine learning best practices
AB Nowadays, intelligent systems and services are getting increasingly popular as they provide data-driven solutions to diverse real-world problems, thanks to recent breakthroughs in artificial intelligence (AI) and machine learning (ML). However, machine learning meets software engineering not only with promising potentials but also with some inherent challenges. Despite some recent research efforts, we still do not have a clear understanding of the challenges of developing ML-based applications and the current industry practices. Moreover, it is unclear where software engineering researchers should focus their efforts to better support ML application developers. In this paper, we report about a survey that aimed to understand the challenges and best practices of ML application development. We synthesize the results obtained from 80 practitioners (with diverse skills, experience, and application domains) into 17 findings outlining challenges and best practices for ML application development. Practitioners involved in the development of ML-based software systems can leverage the summarized best practices to improve the quality of their system. We hope that the reported challenges will inform the research community about topics that need to be investigated to improve the engineering process and the quality of ML-based applications.
C1 [Rahman, Md Saidur; Khomh, Foutse; Hamidi, Alaleh] Polytech Montreal, SWAT Lab, DGIGL, Montreal, PQ, Canada.
   [Cheng, Jinghui; Antoniol, Giuliano] Polytech Montreal, DGIGL, Montreal, PQ, Canada.
   [Washizaki, Hironori] Waseda Univ, Tokyo, Japan.
C3 Universite de Montreal; Polytechnique Montreal; Universite de Montreal;
   Polytechnique Montreal; Waseda University
RP Rahman, MS (corresponding author), Polytech Montreal, SWAT Lab, DGIGL, Montreal, PQ, Canada.
EM saidur.rahman@polymtl.ca; foutse.khomh@polymtl.ca;
   alaleh.hamidi@polymtl.ca; jinghui.cheng@polymtl.ca;
   giuliano.antoniol@polymtl.ca; washizaki@waseda.jp
RI 鷲崎, 弘宜/AAG-1448-2019
OI 鷲崎, 弘宜/0000-0002-1417-9879; Rahman, Md Saidur/0000-0002-5677-5927
FU NSERC; FRQ; Grants-in-Aid for Scientific Research [21KK0179] Funding
   Source: KAKEN
FX We express our gratitude to NSERC and FRQ funding agencies. Our
   heartiest thanks to the anonymous participants for their valuable time
   and thoughtful responses to our survey questionnaire.
CR Amershi S, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P291, DOI 10.1109/ICSE-SEIP.2019.00042
   Anderson D.J., 2010, Kanban: successful Evolutionary Change for Your Technology Business
   Appendix, 2020, REPLICATION PACKAGE
   Bangash A. A., 2019, WHAT DO DEV KNOW MAC
   Belani H., 2019, ARXIV
   Ben Braiek H, 2020, J SYST SOFTWARE, V164, DOI 10.1016/j.jss.2020.110542
   Charmaz K., 2014, CONSTRUCTING GROUNDE
   Chawla NV, 2002, J ARTIF INTELL RES, V16, P321, DOI 10.1613/jair.953
   Felderer M, 2021, LECT NOTES BUS INF P, V404, P33, DOI 10.1007/978-3-030-65854-0_3
   Fink A., 2003, THE SURVEY KIT
   Grosse RB., 2014, NIPS P
   Guo Q, 2019, ARXIV
   He HB, 2008, IEEE IJCNN, P1322, DOI 10.1109/IJCNN.2008.4633969
   Huang Shengsheng, 2018, ARXIV
   Ishikawa Fuyuki, 2019, 2019 IEEE/ACM Joint 7th International Workshop on Conducting Empirical Studies in Industry (CESI) and 6th International Workshop on Software Engineering Research and Industrial Practice (SER&IP). Proceedings, P2, DOI 10.1109/CESSER-IP.2019.00009
   Islam Md. J., 2019, ARXIV
   Khomh F, 2018, REDHAT BLOG
   Khomh F, 2018, IEEE SOFTWARE, V35, P81, DOI 10.1109/MS.2018.3571224
   Kriens P., 2019, ARXIV
   Ma L, 2018, IEEE INT CONF AUTOM, P120, DOI 10.1145/3238147.3238202
   Ma L, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P614, DOI [10.1109/saner.2019.8668044, 10.1109/SANER.2019.8668044]
   Ma L, 2018, PROC INT SYMP SOFTW, P100, DOI 10.1109/ISSRE.2018.00021
   MARIJAN D, 2019, CHALLENGES TESTING M
   Marijan D, 2020, AAAI CONF ARTIF INTE, V34, P13576
   Nguyen-Duc A., 2020, EASE ' 20: Evaluation and Assessment in Software Engineering, P1, DOI DOI 10.1145/3383219.3383220
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Poppendieck M., 2003, Lean Software Development: An Agile Tollkit
   Renggli, 2019, ARXIV
   Responsible AI Practices, 2020, GOOGLE
   Sandberg AB, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P73, DOI 10.1109/ICSE-SEIP.2017.20
   Schelter S., 2018, COMMITTEE DATA ENG B
   Schwaber K., 1997, BUSINESS OBJECT DESI, DOI [10.1007/978-1-4471-0947-1_11, DOI 10.1007/978-1-4471-0947-1_11]
   Sculley D, 2015, ADV NEUR IN, V28
   Stol KJ, 2016, PROC INT CONF SOFTW, P120, DOI 10.1145/2884781.2884833
   Storcheus D., 2015, Feature Extraction: Modern Questions and Challenges, P1
   Sun YC, 2018, IEEE INT CONF AUTOM, P109, DOI 10.1145/3238147.3238172
   van der Maaten L, 2008, J MACH LEARN RES, V9, P2579
   Vogelsang A, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P245, DOI 10.1109/REW.2019.00050
   Wan ZY, 2021, IEEE T SOFTWARE ENG, V47, P1331, DOI 10.1109/TSE.2019.2921343
   Washizaki H, 2019, INT WORKSH EMPIR ENG, P49, DOI 10.1109/IWESEP49350.2019.00017
   Zhang J., 2019, arXiv
   Zhang TY, 2019, PROC INT SYMP SOFTW, P104, DOI 10.1109/ISSRE.2019.00020
   Zhang XY, 2019, 57TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2019), P2069
   Zinkevich M., 2018, RULES MACHINE LEARNI
NR 44
TC 3
Z9 3
U1 9
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1065
EP 1119
DI 10.1007/s11219-023-09621-9
EA MAR 2023
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EY4P9
UT WOS:000960860800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Stirbu, V
   Granlund, T
   Mikkonen, T
AF Stirbu, Vlad
   Granlund, Tuomas
   Mikkonen, Tommi
TI Continuous design control for machine learning in certified medical
   systems
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Machine learning; ML; MLOps; CD4ML; Design control; Medical software;
   Regulated software; Continuous engineering
AB Continuous software engineering has become commonplace in numerous fields. However, in regulating intensive sectors, where additional concerns need to be taken into account, it is often considered difficult to apply continuous development approaches, such as devops. In this paper, we present an approach for using pull requests as design controls, and apply this approach to machine learning in certified medical systems leveraging model cards, a novel technique developed to add explainability to machine learning systems, as a regulatory audit trail. The approach is demonstrated with an industrial system that we have used previously to show how medical systems can be developed in a continuous fashion.
C1 [Stirbu, Vlad] CompliancePal, Tampere, Finland.
   [Granlund, Tuomas] Solita, Tampere, Finland.
   [Granlund, Tuomas] Tampere Univ, Tampere, Finland.
   [Mikkonen, Tommi] Univ Jyvaskyla, Jyvaskyla, Finland.
   [Stirbu, Vlad; Mikkonen, Tommi] Univ Helsinki, Helsinki, Finland.
C3 Tampere University; University of Jyvaskyla; University of Helsinki
RP Stirbu, V (corresponding author), CompliancePal, Tampere, Finland.; Stirbu, V (corresponding author), Univ Helsinki, Helsinki, Finland.
EM vlad.stirbu@compliancepal.eu; tuomas.granlund@solita.fi;
   tommi.j.mikkonen@jyu.fi
OI Mikkonen, Tommi/0000-0002-8540-9918; Stirbu, Vlad/0000-0001-9462-5922;
   Granlund, Tuomas/0000-0003-3955-0926
FU Business Finland
FX The authors wish to thank project AHMED and associated consortium,
   funded by Business Finland, for supporting this research.
CR Aho T, 2020, LECT NOTES COMPUT SC, V12562, P153, DOI 10.1007/978-3-030-64148-1_10
   [Anonymous], 2017, Official Journal of the European Union
   AWS Solutions, 2021, AWS MLOPS FRAM
   Bass Len, 2015, DevOps: A Software Architect's Perspective
   Baylor D, 2017, KDD'17: PROCEEDINGS OF THE 23RD ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1387, DOI 10.1145/3097983.3098021
   Debois P., 2011, J INF TECHNOL MANAG, V24, P3
   Deloitte, 2017, MANAGING ALGORITHMIC
   der Benannten Stellen fur Medizinproduktein Deutschland(IG-NB) I., 2021, FRAGENKATALOG KUNSTL
   Drvar M., 2020, FUTURE DATA COLLECTI
   Ebert C, 2016, IEEE SOFTWARE, V33, P94, DOI 10.1109/MS.2016.68
   FDA-Center for Devices and Radiological Health, 1997, DESIGN CONTROL GUIDA
   Fitzgerald B, 2017, J SYST SOFTWARE, V123, P176, DOI 10.1016/j.jss.2015.06.063
   Food and Drug Administration, 2021, GOOD MACHINE LEARNIN
   Google Cloud Solutions, 2021, MLOPS CONTINUOUS DEL
   Granlund, 2021, PRODUCT FOCUSED SOFT
   Granlund T., 2021, SN COMPUTER SCI, V2, P1, DOI DOI 10.1007/S42979-021-00726-1
   Granlund T., 2021, 2021 IEEE ACM 3 INT, P20, DOI [10.1109/SEH52539.2021.00011, DOI 10.1109/SEH52539.2021.00011]
   Granlund T, 2022, IEEE SOFTWARE, V39, P19, DOI 10.1109/MS.2021.3117292
   Humble Jez, 2010, Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation
   International Electrotechnical Commission, 2015, IEC 623042006A12015
   International Electrotechnical Commission, 2016, 8230412016 IEC
   International Medical Device Regulators Forum, 2022, MACHINE LEARNING ENA
   International Organization for Standardization, 2019, ISO 14971:2019
   International Organization for Standardization, 2016, 13485 ISO
   John Meenu Mary, 2021, 2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P1, DOI 10.1109/SEAA53835.2021.00050
   Jorgensen N, 2001, INFORM SYST J, V11, P321, DOI 10.1046/j.1365-2575.2001.00113.x
   Lipton ZC., 2018, QUEUE, V16, P31, DOI 10.1145/3236386.3241340
   Medical Device Coordination Group, 2021, ONGOING GUIDANCE DEV
   Mitchell M, 2019, FAT*'19: PROCEEDINGS OF THE 2019 CONFERENCE ON FAIRNESS, ACCOUNTABILITY, AND TRANSPARENCY, P220, DOI 10.1145/3287560.3287596
   Myrbakken H, 2017, COMM COM INF SC, V770, P17, DOI 10.1007/978-3-319-67383-7_2
   Rajkumar M., 2016, 2016 International Conference on Advances in Computing, Communication & Automation (ICACCA) (Spring). Proceedings, DOI 10.1109/ICACCA.2016.7578902
   Sato D., 2019, Continuous delivery for machine learning: Automating the end-to-end lifecycle of machine learning applications
   Sculley D, 2015, ADV NEUR IN, V28
   Stirbu V., 2021, PRODUCT FOCUSED SOFT
   Stirbu V, 2018, IEEE INT SYMP SOFTW, P337, DOI [10.1109/1SSREW.2018.00027, 10.1109/ISSREW.2018.00027]
   Taivalsaari A, 2008, PROCEEDINGS OF THE 34TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, P293, DOI 10.1109/SEAA.2008.17
   Treveil M., 2020, Introducing MLOps
   U.S. Department of Health and Human Services, 2021, FEDERAL FOOD DRUG CO
   US Food and Drug Administration, 2021, Artificial Intelligence and Machine Learning (AI/ML) Software as a Medical Device Action Plan
   Vogel DA, 2011, MEDICAL DEVICE SOFTWARE VERIFICATION, VALIDATION, AND COMPLIANCE, P1
NR 40
TC 3
Z9 3
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2023
VL 31
IS 2
SI SI
BP 307
EP 333
DI 10.1007/s11219-022-09601-5
EA OCT 2022
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA L1MS0
UT WOS:000868981900001
OA hybrid
DA 2024-07-18
ER

PT J
AU Oyetoyan, TD
   Morrison, P
AF Oyetoyan, Tosin Daniel
   Morrison, Patrick
TI An improved text classification modelling approach to identify security
   messages in heterogeneous projects
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Security; Classification model; Text classification; Software
   repository; Machine learning
AB Security remains under-addressed in many organisations, illustrated by the number of large-scale software security breaches. Preventing breaches can begin during software development if attention is paid to security during the software's design and implementation. One approach to security assurance during software development is to examine communications between developers as a means of studying the security concerns of the project. Prior research has investigated models for classifying project communication messages (e.g., issues or commits) as security related or not. A known problem is that these models are project-specific, limiting their use by other projects or organisations. We investigate whether we can build a generic classification model that can generalise across projects. We define a set of security keywords by extracting them from relevant security sources, dividing them into four categories: asset, attack/threat, control/mitigation, and implicit. Using different combinations of these categories and including them in the training dataset, we built a classification model and evaluated it on industrial, open-source, and research-based datasets containing over 45 different products. Our model based on harvested security keywords as a feature set shows average recall from 55 to 86%, minimum recall from 43 to 71% and maximum recall from 60 to 100%. An average f-score between 3.4 and 88%, an average g-measure of at least 66% across all the dataset, and an average AUC of ROC from 69 to 89%. In addition, models that use externally sourced features outperformed models that use project-specific features on average by a margin of 26-44% in recall, 22-50% in g-measure, 0.4-28% in f-score, and 15-19% in AUC of ROC. Further, our results outperform a state-of-the-art prediction model for security bug reports in all cases. We find using sound statistical and effect size tests that (1) using harvested security keywords as features to train a text classification model improve classification models and generalise to other projects significantly. (2) Including features in the training dataset before model construction improve classification models significantly. (3) Different security categories represent predictors for different projects. Finally, we introduce new and promising approaches to construct models that can generalise across different independent projects.
C1 [Oyetoyan, Tosin Daniel] SINTEF Digital, Dept Software Engn Safety & Secur, Trondheim, Norway.
   [Oyetoyan, Tosin Daniel] Western Norway Univ Appl Sci, Dept Comp Math & Phys, Bergen, Norway.
   [Morrison, Patrick] North Carolina State Univ, Dept Comp Sci, Raleigh, NC USA.
C3 SINTEF; Western Norway University of Applied Sciences; North Carolina
   State University
RP Oyetoyan, TD (corresponding author), SINTEF Digital, Dept Software Engn Safety & Secur, Trondheim, Norway.; Oyetoyan, TD (corresponding author), Western Norway Univ Appl Sci, Dept Comp Math & Phys, Bergen, Norway.
EM tosin.daniel.oyetoyan@hvl.no; pjmorris@ncsu.edu
OI Oyetoyan, Tosin Daniel/0000-0003-0027-4522
FU Western Norway University Of Applied Sciences; Research Council of
   Norway [247678/O70]
FX Open Access funding provided by Western Norway University Of Applied
   Sciences. This work is supported by the Research Council of Norway
   through the project SoS-Agile: Science of Security in Agile Software
   Development (247678/O70).
CR [Anonymous], 2015, SEKE
   Anvik John, 2006, P 28 INT C SOFTWARE, P361, DOI DOI 10.1145/1134285.1134336
   Bozorgi M., 2010, Proceedings of of 16th International Conference of on Knowledge discovery and data mining, P105
   CHILLAREGE R, 1992, IEEE T SOFTWARE ENG, V18, P943, DOI 10.1109/32.177364
   Cleland-Huang J, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P39
   Dai XF, 2017, IEEE SOUTHEASTCON
   Debole F, 2004, STUD FUZZ SOFT COMP, V138, P81
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   DILLON M, 1983, INFORM PROCESS MANAG, V19, P402, DOI 10.1016/0306-4573(83)90062-6
   Ellison R., 2010, Evaluating and mitigating software supply chain security risks
   Feinerer I., 2013, Introduction to the tm Package Text Mining in R
   Forman G., 2003, Journal of Machine Learning Research, V3, P1289, DOI 10.1162/153244303322753670
   Gegick Michael, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P11, DOI 10.1109/MSR.2010.5463340
   He HB, 2009, IEEE T KNOWL DATA EN, V21, P1263, DOI 10.1109/TKDE.2008.239
   Hindle A, 2013, EMPIR SOFTW ENG, V18, P1125, DOI 10.1007/s10664-012-9209-9
   Joachims Thorsten, 1998, EUROPEAN C MACHINE L, P137, DOI 10.1007/
   Kampenes VB, 2007, INFORM SOFTWARE TECH, V49, P1073, DOI 10.1016/j.infsof.2007.02.015
   Louppe G., 2014, Ph.D. thesis
   Martin, 1 BLACKHAT
   Massacci F., 2010, P 6 INT WORKSH SEC M, P4
   Menzies T., 2018, ARXIV PREPRINT ARXIV
   Morrison P, 2018, PROC IEEE ACM INT C, P426, DOI 10.1145/3183440.3195040
   Morrison PJ, 2018, EMPIR SOFTW ENG, V23, P1383, DOI 10.1007/s10664-017-9541-1
   Nigam K, 2000, MACH LEARN, V39, P103, DOI 10.1023/A:1007692713085
   Ohira M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P518, DOI 10.1109/MSR.2015.78
   Pletea D., 2014, 11 WORKING C MSR, P348, DOI [10.1145/2597073.2597117, DOI 10.1145/2597073.2597117]
   Ponemon-Institute IBM-Security, 2017, COST DAT BREACH STUD
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Powers DMW, 2020, J MACH LEARN TECHNOL, P37, DOI DOI 10.9735/2229-3981
   Le Q, 2014, PR MACH LEARN RES, V32, P1188
   Ray B, 2016, PROC INT CONF SOFTW, P428, DOI 10.1145/2884781.2884848
   Ray B, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P155, DOI 10.1145/2635868.2635922
   Riaz M, 2014, INT REQUIR ENG CONF, P183, DOI 10.1109/RE.2014.6912260
   SALTON G, 1988, INFORM PROCESS MANAG, V24, P513, DOI 10.1016/0306-4573(88)90021-0
   SALTON G, 1983, COMMUN ACM, V26, P1022, DOI 10.1145/182.358466
   Sanderson M, 2010, NAT LANG ENG, V16, P100, DOI 10.1017/S1351324909005129
   Scandariato R, 2014, IEEE T SOFTWARE ENG, V40, P993, DOI 10.1109/TSE.2014.2340398
   Sebastiani F, 2002, ACM COMPUT SURV, V34, P1, DOI 10.1145/505282.505283
   Sparck-Jones K, 2004, J DOC, V60, P493, DOI [10.1108/00220410410560573, 10.1108/eb026526]
   Tyo Jacob P., 2016, Empirical analysis and automated classification of security bug reports
   Unterkalmsteiner M, 2016, E-INFORMATICA, V10, P89, DOI 10.5277/e-Inf160105
   Wijayasekara D, 2014, IEEE IND ELEC, P3612, DOI 10.1109/IECON.2014.7049035
   Witten I. H., 2005, DATA MINING PRACTICA
   Wu HC, 2008, ACM T INFORM SYST, V26, DOI 10.1145/1361684.1361686
   Yan M, 2017, INFORM SOFTWARE TECH, V92, P1, DOI 10.1016/j.infsof.2017.07.003
   Zaman S., 2011, Proceedings of the 8th working conference on mining software repositories, P93, DOI [10.1145/1985441.1985457, DOI 10.1145/1985441.1985457]
NR 46
TC 3
Z9 5
U1 1
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2021
VL 29
IS 2
BP 509
EP 553
DI 10.1007/s11219-020-09546-7
EA MAY 2021
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN3KT
UT WOS:000654822500001
OA hybrid
DA 2024-07-18
ER

PT J
AU Sadler, H
AF Sadler, Hamish
TI ER<SUP>2</SUP>C SDMLC: enterprise release risk-centric systems
   development and maintenance life cycle
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Release risk; Systems development life cycle; Quality-in-use; Freedom
   from risk; Software quality management; Metric-centric development
ID SOFTWARE-DEVELOPMENT; AGILE APPROACH; METHODOLOGY; USABILITY; QUALITY;
   MODEL
AB Traditional systems development life cycle models can be viewed as technical life cycle models in systems development projects. These life cycle models mostly focus on the initial delivery of systems as part of projects. However, many systems end up in a perpetual development mode and can be viewed as a continuum of releases rather than the deliverables of temporary projects. Newer versions of such systems are usually released as part of support/maintenance processes rather than through rigorous projects. In environments with quick-fix maintenance or loose release management regimes, lack of rigor may result in the compromise of quality, especially quality-in-use. This may cause end users' exposure to risks as a result of using potentially faulty releases and products. Minimizing product risks should be an inherent inclusion in product life cycle, regardless of whether the product is released as part of a project or as part of support/maintenance work. A novel systems development and maintenance life cycle model is proposed that models the life of a system as a sequence of releases. It covers non-project maintenance-related releases as well as major projectized releases under a unified consistent governance model. It proposes applying different levels of rigor depending on analyzed release risks via the enforcement of different thresholds to a set of metrics that are extracted from release artifacts. The proposed life cycle model supports iterative development and is conformant to ISO 15288:2015. Evaluations performed by a community of practice in a large government agency in Queensland, Australia, has demonstrated the success of the proposed model in a number of areas, especially in how risk is managed when changes are introduced to systems after their initial release.
C1 [Sadler, Hamish] Queensland Univ Technol QUT, Informat Syst Discipline, Brisbane, Qld, Australia.
C3 Queensland University of Technology (QUT)
RP Sadler, H (corresponding author), Queensland Univ Technol QUT, Informat Syst Discipline, Brisbane, Qld, Australia.
EM Hamish.Sadler@connect.qut.edu.au
OI Sadler, Hamish/0000-0001-6542-7556
CR Aken A, 2008, J INTERNET COMMER, V7, P313, DOI 10.1080/15332860802250385
   Ambler S., 2005, ENTERPRISE UNIFIED P
   [Anonymous], 2016, 25023 ISOIEC
   [Anonymous], 2004, The rational unified process: an introduction
   [Anonymous], 2011, LEAN STARTUP CROWN B
   [Anonymous], 2012, 21500 ISOIEC
   [Anonymous], 1992, SOFTW PROT EV DEC C
   Antinyan Vard, 2014, 2014 Joint Conference of the International Workshop on Software Measurement and the International Conference on Software Process and Product Measurement. (IWSM-MENSURA). Proceedings, P66, DOI 10.1109/IWSM.Mensura.2014.14
   Barki H., 1993, Journal of Management Information Systems, V10, P203
   Bass Len, 2015, DevOps: A Software Architect's Perspective
   Beck K, 1999, COMPUTER, V32, P70, DOI 10.1109/2.796139
   Birrell N.D., 1988, A practical handbook for software development
   Boehm B, 1983, SOFTW MAINT WORKSH
   BOEHM BW, 1991, IEEE SOFTWARE, V8, P32, DOI 10.1109/52.62930
   BOEHM BW, 1988, COMPUTER, V21, P61, DOI 10.1145/12944.12948
   Choudhari J., 2014, ACM SIGSOFT Softw Eng Notes, V39, P1, DOI [10.1145/2557833.2557845, DOI 10.1145/2557833.2557845]
   Cohen D., 2003, DACS SOAR Report, V11, P2003
   Constantine LL, 2003, PROC INT CONF SOFTW, P746, DOI 10.1109/ICSE.2003.1201267
   DALCHER D, 2002, PROJECT MANAGEMENT P
   Desmarais MC, 2005, HUMAN CTR SOFTWARE E, V1st, DOI DOI 10.1007/1-4020-4113-6
   Fenton N, 2004, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2004.1317462
   French A.M., 2011, Journal of Internet Banking and Commerce, V16, P1
   Gilb T., 1981, SIGSOFT SOFTW ENG NO, V6, P17, DOI DOI 10.1145/1010865.1010868
   Greer D, 2011, SOFTWARE PRACT EXPER, V41, P943, DOI 10.1002/spe.1100
   Grubb P., 2003, Software Maintenance: Concepts and Practice, V2.
   Heemstra FJ, 1996, J INFORM TECHNOL, V11, P333, DOI 10.1057/jit.1996.7
   Hevner R., 2007, Scandinavian Journal of Information Systems, V19, P4
   Holzinger A, 2005, P INT COMP SOFTW APP, P169
   Huang W, 2010, INT J AUTOM COMPUT, V7, P389, DOI 10.1007/s11633-010-0519-3
   ISO/IEC, 2013, 291192 ISOIECIEEE
   ISO/IEC, 2009, 31000 ISO
   ISO/IEC, 2013, 291191 ISOIECIEEE
   ISO/IEC, 2010, 24774 ISOIEC
   ISO/IEC, 2016, 25022 ISOIEC
   ISO/IEC, 2006, 14764 ISOIEC
   ISO/IEC, 2015, 15288 ISOIECIEEE
   KLEIJNEN JPC, 1995, EUR J OPER RES, V82, P145, DOI 10.1016/0377-2217(94)00016-6
   Kung HJ, 1998, PROC IEEE INT CONF S, P113, DOI 10.1109/ICSM.1998.738499
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   MCFARLAN FW, 1981, HARVARD BUS REV, V59, P142
   Menezes J., SOFTWARE QUALITY J, P1
   Misra SC, 2015, INT J QUAL RELIAB MA, V32, P214, DOI 10.1108/IJQRM-08-2013-0127
   Nasim A, 2018, COMPUT CARDIOL CONF, V45, DOI 10.22489/CinC.2018.038
   Naumann JD, 1982, MIS QUART, V6, P29, DOI 10.2307/248654
   Osborne W. M., 1987, Proceedings of the Conference on Software Maintenance - 1987 (Cat. No.87CH2442-2), P13
   Palmer S.R., 2001, A Practical Guide to Feature-Driven Development, V1st
   Patten J., 2002, P 2002 C NEW INTERFA, P1
   Peffers K, 2007, J MANAGE INFORM SYST, V24, P45, DOI 10.2753/MIS0742-1222240302
   Poppendieck M, 2007, PROC INT CONF SOFTW, P165, DOI 10.1109/ICSECOMPANION.2007.46
   Pressman R.S., 2005, Software engineering: a Practitioner's Approach
   Rajlich V., 2011, Software Engineering: The Current Practice
   Rajlich VT, 2000, COMPUTER, V33, P66, DOI 10.1109/2.869374
   Roche J, 2013, COMMUN ACM, V56, P38, DOI 10.1145/2524713.2524721
   Royce W.W., 1970, P IEEE WESCON IEEE, P1
   Rubin J., 2008, Handbook of Usability Testing: how to Plan, Design, and Conduct Effective Tests, V2nd ed.
   Sarigiannidis L, 2014, INT J PROJ MANAG, V32, P1073, DOI 10.1016/j.ijproman.2013.11.001
   Savolainen P, 2012, INT J PROJ MANAG, V30, P458, DOI 10.1016/j.ijproman.2011.07.002
   Schwaber K., 2002, AGILE SOFTWARE DEV S
   Stapleton Jennifer., 2003, DSDM: Business focused development
   Wallace L, 2004, DECISION SCI, V35, P289, DOI 10.1111/j.00117315.2004.02059.x
   Ylimannela V., 2012, Communications of Cloud Software, V3, P1
   Zaina LAM, 2015, J SYST SOFTWARE, V110, P155, DOI 10.1016/j.jss.2015.08.029
NR 62
TC 2
Z9 3
U1 1
U2 9
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1755
EP 1787
DI 10.1007/s11219-019-09452-7
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000601177100010
DA 2024-07-18
ER

PT J
AU Delgado-Pérez, P
   Chicano, F
AF Delgado-Perez, Pedro
   Chicano, Francisco
TI Evaluation of alternative design choices for evolutionary mutation
   testing by means of automated configuration
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mutation testing; Evolutionary computation; Genetic algorithm; Automated
   configuration; Iterated racing; Equivalent mutants
ID OPERATORS
AB Mutation testing is a well-established but costly technique to assess and improve the fault detection ability of test suites. This technique consists of introducing subtle changes in the code of a program, which are expected to be detected by the designed test cases. Among the strategies conceived to reduce its cost, evolutionary mutation testing (EMT) has been revealed as a promising approach to select a subset of the whole set of mutants based on a genetic algorithm (GA). However, like any other metaheuristic approach, EMT's execution depends on a set of parameters (both classical of GAs and context-specific ones), so different configurations can greatly vary its performance. Currently, it is difficult to clarify what are the best values for those parameters by applying manual parameter tuning and whether new design choices could improve its effectiveness with other combinations of values. The experience carried out in this paper applying iterated racing, a well-known automated configuration algorithm, reveals that EMT's performance has been undervalued in previous studies; the new configuration found by iterated racing was able to enhance EMT's results in all C++ object-oriented programs used in the experiments. This study also confirms alternative design choices as convenient options to improve EMT in this context, namely, detecting and penalizing equivalent mutants by means of Trivial Compiler Equivalence, and learning which mutation operators produced live mutants in the past generations.
C1 [Delgado-Perez, Pedro] Univ Cadiz, Escuela Super Ingn, Dept Ingn Informat, Cadiz, Spain.
   [Chicano, Francisco] Univ Malaga, Escuela Tecn Super Ingn Informat, Malaga, Spain.
C3 Universidad de Cadiz; Universidad de Malaga
RP Delgado-Pérez, P (corresponding author), Univ Cadiz, Escuela Super Ingn, Dept Ingn Informat, Cadiz, Spain.
EM pedro.delgado@uca.es; chicano@lcc.uma.es
RI Chicano, Francisco/I-5650-2015; Delgado-Pérez, Pedro/N-4289-2018
OI Chicano, Francisco/0000-0003-1259-2990; Delgado-Pérez,
   Pedro/0000-0003-1568-9288
FU European Commission (European Regional Development Fund - ERDF); Spanish
   Ministry of Science, Innovation and Universities [RTI2018-093608-B-C33,
   TIN2017-88213-R, RED2018-102472-T]; University of Malaga; Consejeria de
   Economia y Conocimiento de la Junta de Andalucia [UMA18-FEDERJA-003]
FX This work was partially supported by the European Commission (European
   Regional Development Fund - ERDF), the Spanish Ministry of Science,
   Innovation and Universities under projects RTI2018-093608-B-C33 and
   TIN2017-88213-R, the excellence network RED2018-102472-T, the University
   of Malaga, and Consejeria de Economia y Conocimiento de la Junta de
   Andalucia (grant number UMA18-FEDERJA-003)
CR [Anonymous], 1980, Order No. 8025191
   Balera JM, 2019, INFORM SOFTWARE TECH, V114, P176, DOI 10.1016/j.infsof.2019.06.012
   Banzi AS, 2012, EXPERT SYST APPL, V39, P12131, DOI 10.1016/j.eswa.2012.04.041
   Barbosa EF, 2001, SOFTW TEST VERIF REL, V11, P113, DOI 10.1002/stvr.226
   Boubeta-Puig J., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P398, DOI 10.1109/ICSTW.2011.52
   Coy SP, 2001, J HEURISTICS, V7, P77, DOI 10.1023/A:1026569813391
   Delgado-Pérez P, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P2224, DOI 10.1145/3297280.3297499
   Delgado-Pérez P, 2019, SOFTWARE QUAL J, V27, P823, DOI 10.1007/s11219-018-9425-7
   Delgado-Pérez P, 2018, INFORM SOFTWARE TECH, V104, P130, DOI 10.1016/j.infsof.2018.07.011
   Delgado-Pérez P, 2017, IEEE C EVOL COMPUTAT, P596, DOI 10.1109/CEC.2017.7969365
   Delgado-Pérez P, 2017, INFORM SOFTWARE TECH, V81, P169, DOI 10.1016/j.infsof.2016.07.002
   Domínguez-Jiménez JJ, 2011, INFORM SOFTWARE TECH, V53, P1108, DOI 10.1016/j.infsof.2011.03.008
   Eiben A. E., 2015, INTRO EVOLUTIONARY C
   Estero-Botaro Antonia, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P142, DOI 10.1109/ICSTW.2010.36
   Goldberg D. E., 1989, GENETIC ALGORITHMS S
   Gutiérrez-Madroñal L, 2019, SOFTWARE PRACT EXPER, V49, P640, DOI 10.1002/spe.2629
   Hutter F, 2009, J ARTIF INTELL RES, V36, P267, DOI 10.1613/jair.2861
   Jia Y, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P249, DOI 10.1109/SCAM.2008.36
   Domínguez-Jiménez JJ, 2009, ECOWS'09: PROCEEDINGS OF THE 7TH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P97, DOI 10.1109/ECOWS.2009.18
   Khari M, 2019, SOFT COMPUT, V23, P1933, DOI 10.1007/s00500-017-2906-y
   Kloeden H, 2011, IEEE INT VEH SYM, P387, DOI 10.1109/IVS.2011.5940474
   de Oliveira AAL, 2013, 2013 IEEE CONGRESS ON EVOLUTIONARY COMPUTATION (CEC), P829
   López-Ibáñez M, 2016, OPER RES PERSPECT, V3, P43, DOI 10.1016/j.orp.2016.09.002
   Madeyski L, 2014, IEEE T SOFTWARE ENG, V40, P23, DOI 10.1109/TSE.2013.44
   Matrix TCL Pro, 2019, MATR TCL PRO
   McMinn P, 2004, SOFTW TEST VERIF REL, V14, P105, DOI 10.1002/stvr.294
   Papadakis M, 2019, ADV COMPUT, V112, P275, DOI 10.1016/bs.adcom.2018.03.015
   Papadakis M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P936, DOI 10.1109/ICSE.2015.103
   Papadakis M, 2011, SOFTWARE QUAL J, V19, P691, DOI 10.1007/s11219-011-9142-y
   Lima JAP, 2017, II BRAZILIAN SYMPOSIUM ON SYSTEMATIC AND AUTOMATED SOFTWARE TESTING (SAST 2017), DOI 10.1145/3128473.3128479
   Rodrigues DS, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182659
   Segura S, 2011, INFORM SOFTWARE TECH, V53, P1124, DOI 10.1016/j.infsof.2011.03.006
   Silva R.A., 2016, INFORM SOFTWARE TECH
   Wu F, 2017, INFORM SOFTWARE TECH, V81, P97, DOI 10.1016/j.infsof.2016.03.002
   Zhang QF, 2005, IEEE T EVOLUT COMPUT, V9, P192, DOI 10.1109/TEVC.2004.840835
NR 35
TC 0
Z9 0
U1 1
U2 4
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2022
VL 30
IS 1
SI SI
BP 101
EP 126
DI 10.1007/s11219-020-09530-1
EA NOV 2020
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0R6US
UT WOS:000587082800001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Burnay, C
   Bouraga, S
   Gillain, J
   Jureta, IJ
AF Burnay, Corentin
   Bouraga, Sarah
   Gillain, Joseph
   Jureta, Ivan J.
TI What lies behind requirements? A quality assessment of statement grounds
   in requirements elicitation
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Requirement engineering; Elicitation; Stakeholders communication;
   Statement; Ground; Experience; Hypothetical statement
ID DEFAULT; FRAMEWORK
AB In requirements engineering (RE), an early yet critical activity consists in eliciting the requirements from various stakeholders, who usually have different assumptions, knowledge, and intentions. The goal during elicitation is to understand what stakeholders expect from a given software, expectations which then feed the analysis, prioritization, validation, and ultimately specification activities of the RE process. Elicitation is an interactive activity. It relies on verbal communication of statements of stakeholders about their requirements, their ideas, their assumptions, the constraints they know apply in the environment of the future software, and so forth. Statements, we claim, build either on a past experience of the stakeholder or are the result of reasoning from indirect experience, i.e., they have different grounds. In this paper, we introduce the concept of "Statement Ground" during RE, contrast it with the classical perspective on requirements elicitation, and position the concept in existing RE literature. We conduct an empirical assessment of the relative qualities of statements that have different grounds. Our work results in a better understanding of the statements produced by stakeholders during requirements elicitation, of their qualities, and of the interplay between those qualities and the concept of statement ground. It also results in the definition of a series of research questions which focus on the implications of our findings on the overall requirements engineering activity.
C1 [Burnay, Corentin; Bouraga, Sarah; Gillain, Joseph; Jureta, Ivan J.] Univ Namur, Dept Business Adm, PReCISE Res Ctr, NADI Res Inst, Namur, Belgium.
   [Jureta, Ivan J.] Univ Namur, Fonds Rech Sci FNRS, Namur, Belgium.
C3 University of Namur; University of Namur; Fonds de la Recherche
   Scientifique - FNRS
RP Burnay, C (corresponding author), Univ Namur, Dept Business Adm, PReCISE Res Ctr, NADI Res Inst, Namur, Belgium.
EM corentin.burnay@unamur.be
CR [Anonymous], 1992, CMUSEI92TR012 MELL U
   [Anonymous], 2010, About WordNet
   Antoniou G, 1998, INT J SOFTW ENG KNOW, V8, P385, DOI 10.1142/S0218194098000212
   Billington D, 2011, COMM COM INF SC, V230, P121
   Boden M.A, 2013, ROUTLEDGE COMPANION
   Brewka G, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P268
   Brewka G, 2008, FOUND ARTIF INTELL, P239, DOI 10.1016/S1574-6526(07)03006-4
   Burnay C, 2016, ARE STAKEHOLDERS ONL
   Burnay C, 2014, LECT NOTES COMPUT SC, V8484, P180, DOI 10.1007/978-3-319-07881-6_13
   Davis A, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P179
   Easterbrook S., 2008, GUIDE ADV EMPIRICAL, P285, DOI [DOI 10.1007/978-1-84800-044-5_11, DOI 10.1007/978-1-84800-044-511]
   Elrakaiby Y, 2017, INT REQUIR ENG CONF, P51, DOI 10.1109/RE.2017.27
   Ferrari A, 2015, INT REQUIR ENG CONF, P26, DOI 10.1109/RE.2015.7320405
   Fritz CO, 2012, J EXP PSYCHOL GEN, V141, P30, DOI 10.1037/a0026092
   Génova G, 2013, REQUIR ENG, V18, P25, DOI 10.1007/s00766-011-0134-z
   Goguen J.A., 1993, 1993 P IEEE INT S RE, P152, DOI DOI 10.1109/ISRE.1993.324822
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   GREENSPAN S, 1994, PROC INT CONF SOFTW, P135, DOI 10.1109/ICSE.1994.296773
   Hathcoat J.D., 2014, The SAGE Encyclopedia of Action Research, P1
   Hickey AM, 2004, J MANAGE INFORM SYST, V20, P65, DOI 10.1080/07421222.2004.11045786
   Ionita D, 2014, 2014 IEEE 1ST WORKSHOP ON EVOLVING SECURITY AND PRIVACY REQUIREMENTS ENGINEERING (ESPRE), P7, DOI 10.1109/ESPRE.2014.6890521
   Jureta IJ, 2008, INT REQUIR ENG CONF, P71, DOI 10.1109/RE.2008.13
   Karlsson J, 1996, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, P110, DOI 10.1109/ICRE.1996.491435
   Maiden N, 2004, IEEE SOFTWARE, V21, P68, DOI 10.1109/MS.2004.1331305
   Maiden NAM, 1996, SOFTWARE ENG J, V11, P183, DOI 10.1049/sej.1996.0024
   MCCARTHY J, 1980, ARTIF INTELL, V13, P27, DOI 10.1016/0004-3702(80)90011-9
   Moore Robert C., 1984, Possible-world semantics for autoepistemic logic
   Nuseibeh B., 2000, P C FUTURE SOFTWARE, P35, DOI [10.1145/336512.336523, DOI 10.1145/336512.336523]
   Pelletier FJ, 2005, SYNTHESE, V146, P7, DOI 10.1007/s11229-005-9063-z
   Pohl K, 2010, REQUIREMENTS ENGINEERING: FUNDAMENTALS, PRINCIPLES, AND TECHNIQUES, P1, DOI 10.1007/978-3-642-12578-2
   POOLE D, 1988, ARTIF INTELL, V36, P27, DOI 10.1016/0004-3702(88)90077-X
   Rahwan I, 2009, ARGUMENTATION IN ARTIFICIAL INTELLIGENCE, P1, DOI 10.1007/978-0-387-98197-0
   REITER R, 1980, ARTIF INTELL, V13, P81, DOI 10.1016/0004-3702(80)90014-4
   Robertson S, 2012, Mastering the requirements process: getting requirements right
   Rolland C, 1999, IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P74, DOI 10.1109/ISRE.1999.777987
   Saeki M, 1996, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, P21, DOI 10.1109/ICRE.1996.491426
   Searle John R, 1969, Speech Acts: an Essay in Philosophy of Language
   Sutcliffe AG, 1998, THIRD INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING - PROCEEDINGS, P164, DOI 10.1109/ICRE.1998.667822
   Sutcliffe A, 2013, S VIS LANG HUM CEN C, P92, DOI 10.1109/RE.2013.6636709
   van Zee M, 2015, INT REQUIR ENG CONF, P220, DOI 10.1109/RE.2015.7320426
   Yu YJ, 2011, INT REQUIR ENG CONF, P351, DOI 10.1109/RE.2011.6051671
   Zowghi D, 2005, ENGINEERING AND MANAGING SOFTWARE REQUIREMENTS, P19, DOI 10.1007/3-540-28244-0_2
   Zowghi D, 1997, RE '97 - PROCEEDINGS OF THE THIRD IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, P247, DOI 10.1109/ISRE.1997.566875
   Zowghi D., 1996, FRAMEWORK REASONING
NR 44
TC 1
Z9 1
U1 2
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2020
VL 28
IS 4
BP 1615
EP 1643
DI 10.1007/s11219-020-09521-2
EA SEP 2020
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PI6CR
UT WOS:000566302900001
DA 2024-07-18
ER

PT J
AU Wiese, IS
   Kuroda, RT
   Steinmacher, I
   Oliva, GA
   Ré, R
   Treude, C
   Gerosa, MA
AF Wiese, Igor Scaliante
   Kuroda, Rodrigo Takashi
   Steinmacher, Igor
   Oliva, Gustavo Ansaldi
   Re, Reginaldo
   Treude, Christoph
   Gerosa, Marco Aurelio
TI Pieces of contextual information suitable for predicting co-changes? An
   empirical study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Co-change prediction; Logical coupling; Change coupling; Change
   propagation; Change impact analysis; Social factors; Contextual
   information
ID CHANGE IMPACT ANALYSIS; MODELS
AB Models that predict software artifact co-changes have been proposed to assist developers in altering a software system and they often rely on coupling. However, developers have not yet widely adopted these approaches, presumably because of the high number of false recommendations. In this work, we conjecture that the contextual information related to software changes, which is collected from issues (e.g., issue type and reporter), developers' communication (e.g., number of issue comments, issue discussants and words in the discussion), and commit metadata (e.g., number of lines added, removed, and modified), improves the accuracy of co-change prediction. We built customized prediction models for each co-change and evaluated the approach on 129 releases from a curated set of 10 Apache Software Foundation projects. Comparing our approach with the widely used association rules as a baseline, we found that contextual information models and association rules provide a similar number of co-change recommendations, but our models achieved a significantly higher F-measure. In particular, we found that contextual information significantly reduces the number of false recommendations compared to the baseline model. We conclude that contextual information is an important source for supporting change prediction and may be used to warn developers when they are about to miss relevant artifacts while performing a software change.
C1 [Wiese, Igor Scaliante; Re, Reginaldo] Univ Tecnol Fed Parana, Dept Ciencia Comp, Apucarana, Parana, Brazil.
   [Kuroda, Rodrigo Takashi] Univ Tecnol Fed Parana, UTFPR CP, PPGI, Apucarana, Parana, Brazil.
   [Steinmacher, Igor; Gerosa, Marco Aurelio] No Arizona Univ, Sch Informat Comp & Cyber Syst, Flagstaff, AZ 86011 USA.
   [Oliva, Gustavo Ansaldi] Queens Univ, Sch Comp, Kingston, ON, Canada.
   [Treude, Christoph] Univ Adelaide, Sch Comp Sci, Adelaide, SA, Australia.
C3 Pontificia Universidade Catolica do Parana; Universidade Tecnologica
   Federal do Parana; Universidade Tecnologica Federal do Parana;
   Pontificia Universidade Catolica do Parana; Northern Arizona University;
   Queens University - Canada; University of Adelaide
RP Wiese, IS (corresponding author), Univ Tecnol Fed Parana, Dept Ciencia Comp, Apucarana, Parana, Brazil.
EM igor@utfpr.edu.br; rodrigokuroda@gmail.com; Igor.Steinmacher@nau.edu;
   gustavo@cs.queensu.ca; reginaldo@utfpr.edu.br;
   christoph.treude@adelaide.edu.au; Marco.Gerosa@nau.edu
RI Gerosa, Marco Aurelio/A-6686-2009; Igor, Steinmacher/B-6414-2012;
   Treude, Christoph/AAZ-6257-2021
OI Gerosa, Marco Aurelio/0000-0003-1399-7535; Igor,
   Steinmacher/0000-0002-0612-5790; Treude, Christoph/0000-0002-6919-2149;
   Re, Reginaldo/0000-0001-6452-3466; Scaliante Wiese,
   Igor/0000-0001-9943-5570
CR Ball T., 1997, ICSE WORK PROCESS MO
   Bavota G, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P692, DOI 10.1109/ICSE.2013.6606615
   Beyer D, 2005, PROG COMPREHEN, P259, DOI 10.1109/WPC.2005.12
   Bird Christian, 2009, 2009 20th International Symposium on Software Reliability Engineering (ISSRE 2009), P109, DOI 10.1109/ISSRE.2009.17
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   Briand L. C., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P475, DOI 10.1109/ICSM.1999.792645
   Canfora G, 2014, EMPIR SOFTW ENG, V19, P1, DOI 10.1007/s10664-012-9214-z
   CONWAY ME, 1968, DATAMATION, V14, P28
   Dias M, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P341, DOI 10.1109/SANER.2015.7081844
   Dit B, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P540, DOI 10.1145/2591062.2591064
   Gall H, 1998, PROC IEEE INT CONF S, P190, DOI 10.1109/ICSM.1998.738508
   Gethers M, 2012, PROC INT CONF SOFTW, P430, DOI 10.1109/ICSE.2012.6227172
   Gethers M, 2010, PROC IEEE INT CONF S
   Hassan AE, 2004, PROC IEEE INT CONF S, P284, DOI 10.1109/ICSM.2004.1357812
   Hassan AE, 2009, PROC INT CONF SOFTW, P78, DOI 10.1109/ICSE.2009.5070510
   Herzig K, 2013, IEEE WORK CONF MIN S, P121, DOI 10.1109/MSR.2013.6624018
   Kagdi H, 2013, EMPIR SOFTW ENG, V18, P933, DOI 10.1007/s10664-012-9233-9
   Kuhn M, 2008, J STAT SOFTW, V28, P1, DOI 10.18637/jss.v028.i05
   Lessmann S, 2008, IEEE T SOFTWARE ENG, V34, P485, DOI 10.1109/TSE.2008.35
   Macho C, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P541, DOI 10.1109/SANER.2016.22
   McIntosh S, 2014, PROC IEEE INT CONF S, P241, DOI 10.1109/ICSME.2014.46
   Moonen L, 2016, INT C AUT SOFTW ENG, P11
   Oliva G.A., 2013, P 2013 INT WORKSH PR, P18, DOI DOI 10.1145/2501543.2501547
   Oliva G. A., 2015, ART SCI ANAL SOFTWAR, P285
   Oliva G.A., 2015, P 26 IEEE INT S SOFT
   Orso A, 2004, PROC INT CONF SOFTW, P491, DOI 10.1109/ICSE.2004.1317471
   Powers DMW, 2020, J MACH LEARN TECHNOL, P37, DOI DOI 10.9735/2229-3981
   Revelle M, 2011, EMPIR SOFTW ENG, V16, P773, DOI 10.1007/s10664-011-9159-7
   Rolfsnes T, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P201, DOI 10.1109/SANER.2016.101
   Scaliante Wiese Igor, 2014, Collaboration and Technology. 20th International Conference, CRIWG 2014. Proceedings: LNCS 8658, P294, DOI 10.1007/978-3-319-10166-8_27
   Steinmacher I, 2016, PROC INT CONF SOFTW, P273, DOI 10.1145/2884781.2884806
   Sun XB, 2015, J SYST SOFTWARE, V109, P137, DOI 10.1016/j.jss.2015.07.047
   Wasserman S., 1994, Social network analysis: Methods and applications'
   Wiese IS, 2017, J SYST SOFTWARE, V128, P220, DOI 10.1016/j.jss.2016.07.016
   Wiese IS, 2015, 2015 29TH BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, P100, DOI 10.1109/SBES.2015.21
   Wiese IgorScaliante., 2014, Proceedings of the 10th International Conference on Predictive Models in Software Engineering, P72
   Ying ATT, 2004, IEEE T SOFTWARE ENG, V30, P574, DOI 10.1109/TSE.2004.52
   Zhou Y, 2008, WORK CONF REVERSE EN, P27, DOI 10.1109/WCRE.2008.39
   Zimmermann T, 2005, IEEE T SOFTWARE ENG, V31, P429, DOI 10.1109/TSE.2005.72
NR 40
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2019
VL 27
IS 4
BP 1481
EP 1503
DI 10.1007/s11219-019-09456-3
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KP9TA
UT WOS:000516573400005
DA 2024-07-18
ER

PT J
AU Gerndt, M
   Benkner, S
   César, E
   Navarrete, C
   Bajrovic, E
   Dokulil, J
   Guillén, C
   Mijakovic, R
   Sikora, A
AF Gerndt, Michael
   Benkner, Siegfried
   Cesar, Eduardo
   Navarrete, Carmen
   Bajrovic, Enes
   Dokulil, Jiri
   Guillen, Carla
   Mijakovic, Robert
   Sikora, Anna
TI A multi-aspect online tuning framework for HPC applications
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Automatic performance tuning; High-performance computing; Performance
   optimization; Parallel architectures; Energy tuning; OpenCL
ID PARALLEL APPLICATIONS; SOFTWARE
AB Developing software applications for high-performance computing (HPC) requires careful optimizations targeting a myriad of increasingly complex, highly interrelated software, hardware and system components. The demands placed on minimizing energy consumption on extreme-scale HPC systems and the associated shift towards hete rogeneous architectures add yet another level of complexity to program development and optimization. As a result, the software optimization process is often seen as daunting, cumbersome and time-consuming by software developers wishing to fully exploit HPC resources. To address these challenges, we have developed the Periscope Tuning Framework (PTF), an online automatic integrated tuning framework that combines both performance analysis and performance tuning with respect to the myriad of tuning parameters available to today's software developer on modern HPC systems. This work introduces the architecture, tuning model and main infrastructure components of PTF as well as the main tuning plugins of PTF and their evaluation.
C1 [Gerndt, Michael] Tech Univ Munich, Architecture Parallel & Distributed Syst, Munich, Germany.
   [Mijakovic, Robert] Tech Univ Munich, Inst Informat, Munich, Germany.
   [Benkner, Siegfried] Univ Vienna, Comp Sci, Vienna, Austria.
   [Benkner, Siegfried; Bajrovic, Enes] Univ Vienna, Sci Comp Res Grp, Vienna, Austria.
   [Dokulil, Jiri] Univ Vienna, Vienna, Austria.
   [Cesar, Eduardo; Sikora, Anna] Autonomous Univ Barcelona, Barcelona, Spain.
   [Navarrete, Carmen; Guillen, Carla] Leibniz Supercomp Ctr, Garching, Germany.
C3 Technical University of Munich; Technical University of Munich;
   University of Vienna; University of Vienna; University of Vienna;
   Autonomous University of Barcelona
RP César, E (corresponding author), Autonomous Univ Barcelona, Barcelona, Spain.
EM gerndt@in.tum.de; siegfried.benkner@univie.ac.at; eduardo.cesar@uab.cat;
   carmen.navarrete@lrz.de; enes.bajrovic@univie.ac.at;
   jiri.dokulil@univie.ac.at; carla.guillen@lrz.de; mijakovic@in.tum.de;
   anna.sikora@uab.cat
RI Sikora, Anna/J-8084-2014; Cesar, Eduardo/M-5048-2013; Benkner,
   Siegfried/B-5484-2016
OI Sikora, Anna/0000-0003-0090-4109; Cesar, Eduardo/0000-0002-9729-8557;
   Dokulil, Jiri/0000-0001-5709-8553; Benkner,
   Siegfried/0000-0002-6520-2047; Mijakovic, Robert/0000-0001-6077-4049
FU European Commission FP7 project AutoTune [288038]
FX This work was supported by the European Commission FP7 project AutoTune
   under grant no. 288038.
CR [Anonymous], 2002, Proceedings of the 2002 ACM/IEEE Conference on Supercomputing
   [Anonymous], P 2008 ACM IEEE C SU
   [Anonymous], SUPERCOMPUTING
   Bajrovic E., 2016, HAW INT C SYST SCI
   Balaprakash P., 2013, 4 INT WORKSH PERF MO
   Benedict S, 2010, TOOLS FOR HIGH PERFORMANCE COMPUTING 2009, P1, DOI 10.1007/978-3-642-11261-4_1
   Bruel Pedro, 2015, 22 S SYST HIGH PERF
   Buck B, 2000, INT J HIGH PERFORM C, V14, P317, DOI 10.1177/109434200001400404
   Chen Chun, 2008, TECHNICAL REPORT
   Costa G, 2014, J GRID COMPUT, V12, P371, DOI 10.1007/s10723-013-9287-y
   Costa G, 2008, IEEE INT C CL COMP, P376, DOI 10.1109/CLUSTR.2008.4663798
   Demmel J, 2005, P IEEE, V93, P293, DOI 10.1109/JPROC.2004.840848
   Frigo M, 2005, P IEEE, V93, P216, DOI 10.1109/JPROC.2004.840301
   Frigo M, 1998, INT CONF ACOUST SPEE, P1381, DOI 10.1109/ICASSP.1998.681704
   Fursin G, 2011, INT J PARALLEL PROG, V39, P296, DOI 10.1007/s10766-010-0161-2
   Gerndt Michael, 2015, Automatic Tuning of HPC Applications-The Periscope Tuning Framework
   Haneda M, 2005, PACT 2005: 14TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P123
   Kukkonen S, 2005, IEEE C EVOL COMPUTAT, P443
   Leather H, 2009, INT SYM CODE GENER, P81, DOI 10.1109/CGO.2009.21
   Lei Xiujuan, 2004, Journal of Systems Engineering and Electronics, V15, P142
   Morajko A, 2007, CONCURR COMP-PRACT E, V19, P1517, DOI 10.1002/cpe.1126
   Morajko A, 2005, LECT NOTES COMPUT SC, V3648, P95
   Navarette C., 2014, PARALLEL COMPUTING A
   Nelson Y. L., 2008, PAR DISTR PROC 2008, P1
   Oleynik Y, 2015, 2015 IEEE 18TH INTERNATIONAL CONFERENCE ON COMPUTATIONAL SCIENCE AND ENGINEERING (CSE), P347, DOI 10.1109/CSE.2015.55
   Pan ZL, 2006, INT SYM CODE GENER, P319
   Püschel M, 2004, INT J HIGH PERFORM C, V18, P21, DOI 10.1177/1094342004041291
   Ravipati Giridhar, 2007, TECHNICAL REPORT
   Ribler RL, 1998, SEVENTH INTERNATIONAL SYMPOSIUM ON HIGH PERFORMANCE DISTRIBUTED COMPUTING - PROCEEDINGS, P172, DOI 10.1109/HPDC.1998.709970
   Ribler RL, 2001, FUTURE GENER COMP SY, V18, P175, DOI 10.1016/S0167-739X(01)00051-6
   Tang Y, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P117, DOI 10.1145/1989493.1989508
   Tiwari A., 2011, Proceedings of the 25th IEEE International Parallel & Distributed Processing Symposium (IPDPS 2011), P879, DOI 10.1109/IPDPS.2011.86
   Tiwari A., 2009, MILITARY COMMUNICATI, P1
   Triantafyllis S, 2003, INT SYM CODE GENER, P204, DOI 10.1109/CGO.2003.1191546
   Vuduc R, 2005, J PHYS CONF SER, V16, P521, DOI 10.1088/1742-6596/16/1/071
   Whaley RC, 2001, PARALLEL COMPUT, V27, P3, DOI 10.1016/S0167-8191(00)00087-9
   Williams S, 2009, COMMUN ACM, V52, P65, DOI 10.1145/1498765.1498785
   X-TUNE, AUT EX SELF TUN SOFT
NR 38
TC 0
Z9 0
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 1063
EP 1096
DI 10.1007/s11219-017-9370-x
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000009
DA 2024-07-18
ER

PT J
AU Han, WM
AF Han, Wen-Ming
TI Evaluating perceived and estimated data quality for Web 2.0
   applications: a gap analysis
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Data quality gap; Software quality management; ISO/IEC
   25012; SQuaRE
ID IMPORTANCE-PERFORMANCE ANALYSIS; SOFTWARE QUALITY; MODEL; PERCEPTIONS;
   INDUSTRY
AB To increase user satisfaction and enhance a positive image, the quality of software needs to be continuously improved. This study empirically investigates the importance of 15 quality characteristics and evaluates how well the Web 2.0 applications perform on those characteristics from a data quality perspective. Based on questionnaire responses from 279 participants and the results of importance-performance analysis, the performance of all data quality characteristics was found to be below the end user expectation. Confidentiality showed the greatest discrepancy between importance and performance.
C1 [Han, Wen-Ming] Takming Univ Sci & Technol, Dept Informat Management, 56,Sec 1,Huanshan Rd, Taipei, Taiwan.
C3 Takming University Science & Technology
RP Han, WM (corresponding author), Takming Univ Sci & Technol, Dept Informat Management, 56,Sec 1,Huanshan Rd, Taipei, Taiwan.
EM wmhan@takming.edu.tw
CR [Anonymous], 1999, 14598 ISOIEC 1
   [Anonymous], 2001, 9126 ISOIEC
   [Anonymous], 2016, 25022 ISOIEC
   Armstrong JS, 1997, J MARKETING RES, V15, P396
   Bacon DR, 2003, INT J MARKET RES, V45, P55, DOI 10.1177/147078530304500101
   Barney S, 2012, INFORM SOFTWARE TECH, V54, P651, DOI 10.1016/j.infsof.2012.01.008
   Behkamal B, 2009, INFORM SOFTWARE TECH, V51, P599, DOI 10.1016/j.infsof.2008.08.001
   Boehm B.W., 1978, Characteristics of Software Quality
   Caro A, 2011, IEEE INTERNET COMPUT, V15, P43, DOI 10.1109/MIC.2010.126
   Caro A, 2008, SOFTWARE QUAL J, V16, P513, DOI 10.1007/s11219-008-9046-7
   Chu RKS, 2000, TOURISM MANAGE, V21, P363, DOI 10.1016/S0261-5177(99)00070-9
   Chua AYK, 2010, LIBR INFORM SCI RES, V32, P203, DOI 10.1016/j.lisr.2010.01.002
   Crawford SD, 2001, SOC SCI COMPUT REV, V19, P146, DOI 10.1177/089443930101900202
   Desharnais JM, 2011, SOFTWARE QUAL J, V19, P447, DOI 10.1007/s11219-010-9124-5
   Dillman D.A., 1998, JOINT STAT M AM STAT
   DROMEY RG, 1995, IEEE T SOFTWARE ENG, V21, P146, DOI 10.1109/32.345830
   Eckerson W. W., 2002, DATA QUALITY BOTTOM, P1
   Gillette Felix., 2011, Bloomberg Businessweek
   Gousios G., 2007, P 11 PANH C INF
   Grady R.B., 1987, SOFTWARE METRICS EST, V1
   International Organization for Standardization, 2016, ISO/IEC Standard No. 25023)
   International Standards Organization (ISO), 2008, 25012 ISOIEC
   ISO, 2014, ISO/IEC 25000
   Jones Capers, 2011, The Economics of Software Quality
   Juran J. M., 1988, Juran on planning for quality
   Kannabiran G, 2011, INFORM SOFTWARE TECH, V53, P1199, DOI 10.1016/j.infsof.2011.05.001
   Kawamura T., 2014, J INFORM PROCESSING, V22, P689
   Kim DJ, 2009, COMMUN ASSOC INF SYS, V24, P657
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   KITCHENHAM BA, 1989, SOFTWARE ENG J, V4, P2, DOI 10.1049/sej.1989.0001
   Liang S., 2006, Contemporary Management Research, V3, P23, DOI DOI 10.7903/CMR.10
   Martilla J. A., 1977, J MARKETING, V10, P13
   McCall J., 1977, Factors in software quality, V1
   Moraga C, 2009, INT CONF QUAL SOFTW, P117, DOI 10.1109/QSIC.2009.23
   Murdy S, 2012, TOURISM MANAGE, V33, P1281, DOI 10.1016/j.tourman.2011.11.024
   Orehovacki T, 2013, J SYST SOFTWARE, V86, P3039, DOI 10.1016/j.jss.2013.05.071
   Pedram H., 2012, INFORM SCI TECHNOLOG, V27, P496
   Piñeiro JA, 2006, PSICOTHEMA, V18, P730
   Rivera B, 2016, J WEB ENG, V15, P433
   Sigala M., 2012, COMPUT HUM BEHAV, V30, P800
   Standish Group, 2013, CHAOS MAN 2013
   Tsai WH, 2011, TOTAL QUAL MANAG BUS, V22, P1025, DOI 10.1080/14783363.2011.611326
   Westland JC, 2002, J SYST SOFTWARE, V62, P1, DOI 10.1016/S0164-1212(01)00130-3
NR 43
TC 4
Z9 4
U1 0
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2018
VL 26
IS 2
BP 367
EP 383
DI 10.1007/s11219-017-9365-7
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA GH6AN
UT WOS:000433521200006
DA 2024-07-18
ER

PT J
AU Mashkoor, A
AF Mashkoor, Atif
TI Model-driven development of high-assurance active medical devices
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-driven development; Formal methods; Event-B; Active medical
   devices; Hemodialysis
ID FORMAL METHODS; SOFTWARE; REFINEMENT; PROB
AB Advanced medical devices exploit the advantages of embedded software whose development is subject to compliance with stringent requirements of standardization and certification regimes due to the critical nature of such systems. This paper presents initial results and lessons learned from an ongoing project focusing on the development of a formal model of a subsystem of a software-controlled safety-critical active medical device (AMD) responsible for renal replacement therapy. The use of formal approaches for the development of AMDs is highly recommended by standards and regulations, and motivates the recent advancement of the state of the art of related methods and tools including Event-B and Rodin applied in this paper. It is expected that the presented model development approach and the specification of a high-confidence medical system will contribute to the still sparse experience base available at the disposal of the scientific and practitioner community of formal methods and software engineering.
C1 [Mashkoor, Atif] Software Competence Ctr Hagenberg GmbH, Rigorous Methods Software Engn RSE Res Focus, Hagenberg, Austria.
C3 Softwarepark Hagenberg
RP Mashkoor, A (corresponding author), Software Competence Ctr Hagenberg GmbH, Rigorous Methods Software Engn RSE Res Focus, Hagenberg, Austria.
EM atif.mashkoor@scch.at
RI Mashkoor, Atif/AAK-6747-2020
OI Mashkoor, Atif/0000-0003-1210-5953
FU Austrian Ministry for Transport, Innovation and Technology; Federal
   Ministry of Science, Research and Economy; Province of Upper Austria;
   Austrian Science Fund (FWF) [P26452] Funding Source: Austrian Science
   Fund (FWF)
FX The research reported in this article has been supported by the Austrian
   Ministry for Transport, Innovation and Technology, the Federal Ministry
   of Science, Research and Economy, and the Province of Upper Austria in
   the frame of the COMET center SCCH
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial J-R., 1996, The B Book
   Abrial JR, 2007, FUND INFORM, V77, P1
   Abrial Jean-Raymond, 2014, AIRCRAFT LANDING GEA, P19
   Ad hoc Working Group on Risk Assessment and Risk Management, 2006, TECHNICAL REPORT
   [Anonymous], 2010, 615083 IEC
   [Anonymous], 2019, MEDICAL LAB ACCREDIT
   [Anonymous], 2006, Standard IEC 62304
   Arney D, 2007, 2007 JOINT WORKSHOP ON HIGH CONFIDENCE MEDICAL DEVICES, SOFTWARE AND SYSTEMS AND MEDICAL DEVICE PLUG-AND PLAY INTEROPERABILITY, P23, DOI 10.1109/HCMDSS-MDPnP.2007.36
   Badeau F, 2005, LECT NOTES COMPUT SC, V3455, P334
   BEAR S, 1991, LECT NOTES COMPUT SC, V551, P571
   Behm P, 1999, LECT NOTES COMPUT SC, V1708, P369
   Bjorner D, 2010, LECT NOTES COMPUT SC, V5947, P2, DOI 10.1007/978-3-642-11486-1_2
   BOEHM BW, 1988, IEEE T SOFTWARE ENG, V14, P1462, DOI 10.1109/32.6191
   BOWEN J, 1993, SOFTWARE ENG J, V8, P189, DOI 10.1049/sej.1993.0025
   Bowen J., 2013, P 5 ACM SIGCHI S ENG, P91, DOI DOI 10.1145/2494603.2480314
   Broadfoot GH, 2005, LECT NOTES COMPUT SC, V3582, P548
   Butler M, 2009, LECT NOTES COMPUT SC, V5423, P20
   Campos J. C., 2011, P 4 INT ECEASST
   Campos JC, 2008, LECT NOTES COMPUT SC, V5136, P72, DOI 10.1007/978-3-540-70569-7_6
   Cansell D, 2007, LECT NOTES COMPUT SC, V4355, P140
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   DIJKSTRA EW, 1972, COMMUN ACM, V15, P859, DOI 10.1145/355604.361591
   EU, 1993, OFFICIAL J EUROPEAN
   EU (European Union), 2007, OFFICIAL J EUROPEAN
   FDA, 2002, GEN PRINC SOFTW VAL
   *IEC, 2005, 6060112005 IEC
   Iliasov A, 2013, SCI COMPUT PROGRAM, V78, P884, DOI 10.1016/j.scico.2012.04.010
   Jacky J., 1990, SIGSOFT Software Engineering Notes, V15, P45, DOI 10.1145/99571.99814
   Jiang Z., 2010, WIRELESS HLTH 2010 W, P208
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Kossak Felix, 2014, Requirements Engineering: Foundation for Software Quality. 20th International Working Conference, REFSQ 2014. Proceedings: LNCS 8396, P184, DOI 10.1007/978-3-319-05843-6_14
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   Luu Anh Tuan, 2010, Proceedings 2010 Fourth IEEE International Conference on Secure Software Integration and Reliability Improvement (SSIRI 2010), P23, DOI 10.1109/SSIRI.2010.28
   Macedo HD, 2008, LECT NOTES COMPUT SC, V5014, P181, DOI 10.1007/978-3-540-68237-0_14
   Mashkoor A., 2011, Proceedings of the 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), P138, DOI 10.1109/HASE.2011.47
   Mashkoor Atif, 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P252, DOI 10.1109/RE.2010.37
   Mashkoor A., 2015, SCCHTR1542
   Mashkoor A., 2015, LECT NOTES BUSINESS, V200, P120, DOI DOI 10.1007/978-3-319-13251-8_
   Mashkoor A, 2015, IEEE HI ASS SYS ENGR, P158, DOI 10.1109/HASE.2015.32
   Mery D, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2406336.2406351
   Osaiweran A, 2013, ELECTRON NOTES THEOR, V295, P49, DOI 10.1016/j.entcs.2013.04.005
   Plagge D, 2007, LECT NOTES COMPUT SC, V4591, P480
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   SPIVEY JM, 1988, UNDERSTANDING Z SPEC
   Sun J, 2008, COMM COM INF SC, V17, P307
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
NR 48
TC 9
Z9 9
U1 0
U2 12
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 571
EP 596
DI 10.1007/s11219-015-9288-0
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Sánchez-Gordón, ML
   O'Connor, RV
AF Sanchez-Gordon, Mary-Luz
   O'Connor, Rory V.
TI Understanding the gap between software process practices and actual
   practice in very small companies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Grounded theory; Software process; Software process improvement; Very
   small entity; SPI; VSE
ID PROCESS IMPROVEMENT; GROUNDED THEORY; ORGANIZATIONS; ENTERPRISES;
   FRAMEWORK; CMMI; SMES
AB This paper reports on a grounded theory to study into software developers' use of software development processes in actual practice in the specific context of very small companies. This study was conducted in three very small software product companies located in Ecuador. The data collection was based on semi-structured qualitative interviews with software project managers, focus group with software developers and was supplemented by the literature and document studies. We interviewed two types of participants (managers and developers), so as to ensure that we elicited a holistic perspective of how they approached the software development process in actual practice. The goal was to study what practices are actually used and their opinion and attitude toward the potential adopting of an international standard (ISO/IEC 29110) specifically designed for very small companies. With the collected data, we performed an analysis utilizing grounded theory coding techniques, as this methodology promotes the focus on uncovering the real concerns of the participants. This study highlighted three areas of concern: customer, software product and development tasks coordination and tracking. The findings in this study give an insight toward the work products as they relate to software development process practices in very small companies and the important factors that must be considered to assist project success.
C1 [Sanchez-Gordon, Mary-Luz] Univ Carlos III Madrid, Informat Sci & Technol, Madrid, Spain.
   [O'Connor, Rory V.] Dublin City Univ, Sch Comp, Software Engn, Dublin, Ireland.
C3 Universidad Carlos III de Madrid; Dublin City University
RP Sánchez-Gordón, ML (corresponding author), Univ Carlos III Madrid, Informat Sci & Technol, Madrid, Spain.
EM mary_sanchezg@hotmail.com; roconnor@computing.dcu.ie
RI Sánchez-Gordón, Mary/AAI-2106-2019
OI Sánchez-Gordón, Mary/0000-0002-5102-1122; O'Connor,
   Rory/0000-0001-9253-0313
CR Abrahamsson P, 2010, AGILE SOFTWARE DEVELOPMENT: CURRENT RESEARCH AND FUTURE DIRECTIONS, P31, DOI 10.1007/978-3-642-12575-1_3
   [Anonymous], 2014, NELS, DOI DOI 10.1007/978-3-662-43896-1_1
   [Anonymous], 1998, Software process improvement
   Baldassarre MT, 2012, SOFTWARE QUAL J, V20, P309, DOI 10.1007/s11219-011-9154-7
   Basri S., 2011, American Journal of Economics and Business Administration, V3, P636
   Basri S B., 2011, Knowledge Engineering for Software Development Life Cycles: Support Technologies and Applications
   Basri S, 2010, COMM COM INF SC, V99, P153
   BENBASAT I, 1987, MIS QUART, V11, P369, DOI 10.2307/248684
   Boehm B., 2003, BALANCING AGILITY DI
   Caballero E, 2011, COMM COM INF SC, V172, P215
   Cater-Steel A., 2006, EUROSPI 2006 IND P, P4
   Cater-Steel A. P., 2000, Proceedings 2000 Australian Software Engineering Conference, P23, DOI 10.1109/ASWEC.2000.844555
   Clarke P, 2012, J SYST SOFTWARE, V85, P2356, DOI 10.1016/j.jss.2012.05.024
   Clarke P, 2012, INFORM SOFTWARE TECH, V54, P433, DOI 10.1016/j.infsof.2011.12.003
   Coleman G, 2008, J SYST SOFTWARE, V81, P772, DOI 10.1016/j.jss.2007.07.027
   Coleman G, 2007, INFORM SOFTWARE TECH, V49, P654, DOI 10.1016/j.infsof.2007.02.011
   Coleman G, 2006, LECT NOTES COMPUT SC, V4257, P28
   Coleman G, 2008, J ENTERP INF MANAG, V21, P633, DOI 10.1108/17410390810911221
   Eurostat, 2014, ANN ENT STAT SIZ CLA
   Glass RL, 2003, IEEE SOFTWARE, V20, P20, DOI 10.1109/MS.2003.1241361
   Hansen B.H., 2005, Proceedings of the 38th Annual Hawaii International Conference on System Sciences (HICSS'05), p264b
   Herranz E, 2014, J UNIVERS COMPUT SCI, V20, P885
   Hoda R, 2012, EMPIR SOFTW ENG, V17, P609, DOI 10.1007/s10664-011-9161-0
   Hofer C, 2002, EUROMICRO CONF PROC, P361, DOI 10.1109/EURMIC.2002.1046219
   ISO/IEC, 2011, 291105122011E ISOIEC
   Jeners S., 2013, Software Quality Professional, V16, P35
   Johnson J., 2006, MY LIFE IS FAILURE 1
   Khankaew S, 2014, IEEE INT WORKS EMPIR, P1, DOI 10.1109/EmpiRE.2014.6890109
   Kontio J, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P271
   Kontio J., 2008, Guide to Advanced Empirical Software Engineering, P93, DOI [DOI 10.1007/978-1-84800-044-5_4, 10.1007/978-1-84800-044-54, DOI 10.1007/978-1-84800-044-54]
   Kroeger TA, 2014, INFORM SOFTWARE TECH, V56, P252, DOI 10.1016/j.infsof.2013.10.003
   Langford J., 2003, FOCUS GROUPS SUPPORT
   Laporte C. Y., 2014, EUROSPI 2014, V425, P13, DOI DOI 10.1007/978-3-662-43896-1_2
   Laporte C. Y., 2015, P 10 INT C EV NOV AP
   Laporte CY, 2008, COMM COM INF SC, V16, P129
   Laporte CY, 2014, 2014 9TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P38, DOI 10.1109/QUATIC.2014.12
   Lee S, 2013, J INF PROCESS SYST, V9, P69, DOI 10.3745/JIPS.2013.9.1.069
   McCaffery Fergal, 2009, Software Process: Improvement and Practice, V14, P271, DOI 10.1002/spip.430
   MCFALL D, 2003, 16 INT C SOFTW SYST, P1
   Misra S, 2014, J SOFTW-EVOL PROC, V26, P1297, DOI 10.1002/smr.1691
   Mora M., 2009, INFORM TECHNOLOGY GO, P371, DOI DOI 10.4018/978-1-60566-008-0.CH021
   Niazi M, 2010, INFORM SOFTWARE TECH, V52, P1204, DOI 10.1016/j.infsof.2010.06.005
   O'Connor RV, 2014, INT J INF TECHNOL SY, V7, P1, DOI 10.4018/ijitsa.2014010101
   O'Connor RV, 2012, INT J HUM CAP INF TE, V3, P13, DOI 10.4018/jhcitp.2012070102
   O'Connor RV, 2012, COMM COM INF SC, V290, P277
   O'Connor RV, 2009, AUSTRALAS J INF SYST, V16, P7
   OConnor R., 2012, RES METHODOLOGIES IN, P256, DOI DOI 10.4018/978-1-4666-0179-6.CH013
   Paternoster N, 2014, INFORM SOFTWARE TECH, V56, P1200, DOI 10.1016/j.infsof.2014.04.014
   PAULK MC, 1998, P 16 ANN PAC NW SOFT, P350
   Pino FJ, 2008, SOFTWARE QUAL J, V16, P237, DOI 10.1007/s11219-007-9038-z
   Pressman R., 2009, Software Engineering: A Practitioner's Approach, V7th
   Richardson I, 2007, IEEE SOFTWARE, V24, P18, DOI 10.1109/MS.2007.12
   Ruiz-Rube I, 2015, INFORM SOFTWARE TECH, V59, P205, DOI 10.1016/j.infsof.2014.12.001
   Sanchez-Gordon M. L., 2015, SOFTWARE PROCESS IMP
   Schoeffel P, 2012, IEEE LAT AM T, V10, P1634, DOI 10.1109/TLA.2012.6187609
   Staples M, 2007, J SYST SOFTWARE, V80, P883, DOI 10.1016/j.jss.2006.09.008
   Strauss E, 1998, CLIN ORTHOP RELAT R, P2
   Taylor PS, 2006, LECT NOTES COMPUT SC, V4034, P290
   UNCTAD, 2012, INF EC REP 2012 SOFT
   Verner JM, 2014, J SYST SOFTWARE, V92, P115, DOI 10.1016/j.jss.2014.01.008
   von Wangenheim CG, 2006, IEEE SOFTWARE, V23, P91, DOI 10.1109/MS.2006.13
   Yilmaz Murat, 2015, ACM SIGSOFT Software Engineering Notes, V40, DOI 10.1145/2693208.2693239
   Yilmaz M, 2010, COMM COM INF SC, V99, P177
NR 63
TC 30
Z9 37
U1 1
U2 28
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2016
VL 24
IS 3
BP 549
EP 570
DI 10.1007/s11219-015-9282-6
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DQ4IL
UT WOS:000379167400005
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Solinski, A
   Petersen, K
AF Solinski, Adam
   Petersen, Kai
TI Prioritizing agile benefits and limitations in relation to practice
   usage
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Agile; Benefits; Limitations; Practice adoption; Prioritization
ID SOFTWARE-DEVELOPMENT; PLAN-DRIVEN; REQUIREMENTS
AB In recent years, there has been significant shift from rigid development (RD) toward agile. However, it has also been spotted that agile methodologies are hardly ever followed in their pure form. Hybrid processes as combinations of RD and agile practices emerge. In addition, agile adoption has been reported to result in both benefits and limitations. This exploratory study (a) identifies development models based on RD and agile practice usage by practitioners; (b) identifies agile practice adoption scenarios based on eliciting practice usage over time; (c) prioritizes agile benefits and limitations in relation to (a) and (b). Practitioners provided answers through a questionnaire. The development models are determined using hierarchical cluster analysis. The use of practices over time is captured through an interactive board with practices and time indication sliders. This study uses the extended hierarchical voting analysis framework to investigate benefit and limitation prioritization. Four types of development models and six adoption scenarios have been identified. Overall, 45 practitioners participated in the prioritization study. A common benefit among all models and adoption patterns is knowledge and learning, while high requirements on professional skills were perceived as the main limitation. Furthermore, significant variances in terms of benefits and limitations have been observed between models and adoption patterns. The most significant internal benefit categories from adopting agile are knowledge and learning, employee satisfaction, social skill development, and feedback and confidence. Professional skill-specific demands, scalability, and lack of suitability for specific product domains are the main limitations of agile practice usage. Having a balanced agile process allows to achieve a high number of benefits. With respect to adoption, a big bang transition from RD to agile leads to poor quality in comparison with the alternatives.
C1 [Solinski, Adam] Misys, Gdynia, Poland.
   [Petersen, Kai] Blekinge Inst Technol, Karlskrona, Sweden.
C3 Blekinge Institute Technology
RP Petersen, K (corresponding author), Blekinge Inst Technol, Karlskrona, Sweden.
EM adam.solinski@misys.com; kai.petersen@bth.se
OI Petersen, Kai/0000-0002-1532-8223
FU ELLIIT; Strategic Area for ICT research; Swedish Government
FX The work also funded partially by ELLIIT, the Strategic Area for ICT
   research, funded by the Swedish Government. We also would like to thank
   all participants of this study.
CR [Anonymous], 2009, P 28 IEEE AIAA DIG A
   Begel Andrew, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P255
   Berander P, 2005, ENGINEERING AND MANAGING SOFTWARE REQUIREMENTS, P69, DOI 10.1007/3-540-28244-0_4
   Berander P, 2006, INT J SOFTW ENG KNOW, V16, P819, DOI 10.1142/S0218194006003026
   Boehm B, 2000, COMPUTER, V33, P94, DOI 10.1109/2.868706
   Boehm B, 2003, PROCEEDINGS OF THE AGILE DEVELOPMENT CONFERENCE, P32, DOI 10.1109/ADC.2003.1231450
   Boehm B, 2003, COMPUTER, V36, P57, DOI 10.1109/MC.2003.1204376
   Boehm B, 2002, COMPUTER, V35, P64, DOI 10.1109/2.976920
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Charette RN, 2005, IEEE SPECTRUM, V42, P42, DOI 10.1109/MSPEC.2005.1502528
   Chow T, 2008, J SYST SOFTWARE, V81, P961, DOI 10.1016/j.jss.2007.08.020
   Connors D. T., 1992, SIGSOFT Software Engineering Notes, V17, P43, DOI 10.1145/130840.130843
   Dahlberg H, 2006, INT FED INFO PROC, V206, P291
   Dogs C., 2004, THESIS BLEKINGE I TE
   Drehmer DE, 2001, J SYST SOFTWARE, V57, P1, DOI 10.1016/S0164-1212(00)00112-6
   Dybå T, 2008, INFORM SOFTWARE TECH, V50, P833, DOI 10.1016/j.infsof.2008.01.006
   Finch H., 2005, Journal of Data Science, V3, P85
   Forward A., 2008, P 2008 C CTR ADV STU, P14
   Fowler M., 2001, Software Development, V9, P28
   Ganis M, 2005, AGILE 2005, Proceedings, P145, DOI 10.1109/ADC.2005.31
   Gray J.H., 2003, Journal of Small Business Entrepreneurship, V17, P31, DOI DOI 10.1080/08276331.2003.10593311
   Hayata T., 2011, 2011 IEEE International Conference on Service Operations and Logistics and Informatics (SOLI), P285, DOI 10.1109/SOLI.2011.5986572
   Hirsch M, 2005, PROC INT CONF SOFTW, P38, DOI 10.1145/1062455.1062472
   James S., 2008, ART AGILE DEV
   Kurapati N, 2012, LECT NOTES BUS INF P, V111, P16
   Kuzniarz L, 2011, INFORM SOFTWARE TECH, V53, P214, DOI 10.1016/j.infsof.2010.10.004
   Laanti M, 2011, INFORM SOFTWARE TECH, V53, P276, DOI 10.1016/j.infsof.2010.11.010
   Nerur S, 2005, COMMUN ACM, V48, P72, DOI 10.1145/1060710.1060712
   Paulson L. D., 2001, IT Professional, V3, P13, DOI 10.1109/6294.946613
   Petersen K., 2011, IS LEAN AGILE AGILE, P19
   Petersen K., 2007, THESIS BLEKINGE I TE
   Petersen K, 2013, P JOINT C 23 INT WOR
   Petersen K, 2010, EMPIR SOFTW ENG, V15, P654, DOI 10.1007/s10664-010-9136-6
   Petersen K, 2009, INT SYMP EMP SOFTWAR, P402
   Petersen K, 2009, J SYST SOFTWARE, V82, P1479, DOI 10.1016/j.jss.2009.03.036
   Petersen K, 2009, LECT NOTES BUS INF, V32, P386
   Pikkarainen M, 2012, EMPIR SOFTW ENG, V17, P675, DOI 10.1007/s10664-011-9185-5
   Quispe A., 2010, 2010 Proceedings of XXIX International Conference of the Chilean Computer Science Society (SCCC 2010), P81, DOI 10.1109/SCCC.2010.35
   Rinkevics K, 2013, INFORM SOFTWARE TECH, V55, P267, DOI 10.1016/j.infsof.2012.08.004
   Rising L, 2000, IEEE SOFTWARE, V17, P26, DOI 10.1109/52.854065
   Rovegård P, 2008, IEEE T SOFTWARE ENG, V34, P516, DOI 10.1109/TSE.2008.32
   Saiedian H, 2000, INFORM SOFTWARE TECH, V42, P419, DOI 10.1016/S0950-5849(99)00101-9
   Sommerville I., 2010, SOFTWARE ENG
   Sumrell M, 2007, AGILE 2007, Proceedings, P291, DOI 10.1109/AGILE.2007.29
   Viega J., 2001, BUILDING SECURE SOFT
   Vijayasarathy L., 2008, Journal of Information Technology Management, V19, P1, DOI DOI 10.3998/3336451.0011.104
   West D., 2010, Agile development: Mainstream adoption has changed agility
   Williams L, 2010, ADV COMPUT, V80, P1, DOI 10.1016/S0065-2458(10)80001-4
   Wohlin C, 2013, INFORM SOFTWARE TECH, V55, P919, DOI 10.1016/j.infsof.2013.02.002
NR 49
TC 32
Z9 44
U1 2
U2 32
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2016
VL 24
IS 2
BP 447
EP 482
DI 10.1007/s11219-014-9253-3
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DI9ZL
UT WOS:000373861100009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Zhang, GH
   Ye, HL
   Lin, YQ
AF Zhang, Guoheng
   Ye, Huilin
   Lin, Yuqing
TI Quality attribute modeling and quality aware product configuration in
   software product lines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Quality attributes assessment; Product configuration; Non-functional
   requirement (NFR) framework; Analytic hierarchical process (AHP);
   Software product line; Feature model
AB In software product line engineering, the customers mostly concentrate on the functionalities of the target product during product configuration. The quality attributes of a target product, such as security and performance, are often assessed until the final product is generated. However, it might be very costly to fix the problem if it is found that the generated product cannot satisfy the customers' quality requirements. Although the quality of a generated product will be affected by all the life cycles of product development, feature-based product configuration is the first stage where the estimation or prediction of the quality attributes should be considered. As we know, the key issue of predicting the quality attributes for a product configured from feature models is to measure the interdependencies between functional features and quality attributes. The current existing approaches have several limitations on this issue, such as requiring real products for the measurement or involving domain experts' efforts. To overcome these limitations, we propose a systematic approach of modeling quality attributes in feature models based on domain experts' judgments using the analytic hierarchical process (AHP) and conducting quality aware product configuration based on the captured quality knowledge. Domain experts' judgments are adapted to avoid generating the real products for quality evaluation, and AHP is used to reduce domain experts' efforts involved in the judgments. A prototype tool is developed to implement the concepts of the proposed approach, and a formal evaluation is carried out based on a large-scale case study.
C1 [Zhang, Guoheng; Ye, Huilin; Lin, Yuqing] Univ Newcastle, Sch Elect Engn & Comp Sci, Callaghan, NSW 2308, Australia.
C3 University of Newcastle
RP Zhang, GH (corresponding author), Univ Newcastle, Sch Elect Engn & Comp Sci, Callaghan, NSW 2308, Australia.
EM c3098175@uon.edu.au; Huilin.Ye@newcastle.edu.au;
   Yuqing.Lin@newcastle.edu.au
OI Lin, Yuqing/0000-0002-6693-0433
CR Asikainen T, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P31, DOI 10.1109/SPLINE.2006.1691575
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   BENAVIDES D, 2007, 1 INT WORKSH VAR MOD
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Chung L., 2000, INT SERIES SOFTWARE, V5
   Clements P., 2002, Software product lines
   Elfaki A. O., 2009, 3 INT WORKSH VAR MOD
   Etxeberria L, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P243, DOI 10.1109/SPLC.2008.37
   Etxeberria L, 2008, FIFTEENTH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P255, DOI 10.1109/ECBS.2008.14
   Giorgini P., 2002, 21 INT C CONC MOD LO
   Hallowell, 2007, ANAL HIERARCHICAL PR
   Jarzabek S, 2006, IEE P-SOFTW, V153, P61, DOI 10.1049/ip-sen:20050008
   Kang Kyo C, 1990, Technical Report
   Lee K, 2010, LECT NOTES COMPUT SC, V6287, P32
   Montagud S., 2009, Proceedings of the International Software Product Line Conference, P91
   MYLOPOULOS J, 1992, IEEE T SOFTWARE ENG, V18, P483, DOI 10.1109/32.142871
   Peng X, 2009, J COMPUT SCI TECH-CH, V24, P319, DOI 10.1007/s11390-009-9227-2
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Rabiser R, 2009, THESIS I SYSTEMS ENG
   Saaty T. L., 2008, INT J SERV SCI, V1, P83, DOI [10.1504/IJSSCI.2008.017590, DOI 10.1504/IJSSCI.2008.017590]
   Saaty T.L., 2008, Decision Making for Leaders: The Analytic Hierarchy Process for Decisions in a Complex World
   Siegmund N., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P160, DOI 10.1109/SPLC.2011.20
   Siegmund N., 2010, 4 VAR MOD SOFTW INT
   Sincero J., 2007, SOFTW PROD LIN C SPL, P167
   Sincero J, 2010, ASIA PAC SOFWR ENG, P147, DOI 10.1109/APSEC.2010.26
   Sinnema M, 2006, 13TH ANNUAL IEEE INTERNATIONAL SYMPOSIUM AND WORKSHOP ON ENGINEERING OF COMPUTER BASED SYSTEMS, PROCEEDINGS, P299, DOI 10.1109/ECBS.2006.49
   Thurimella AK, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P99, DOI 10.1109/SPLC.2008.14
   Zhang G., 2011, 15 SOFTW PROD LIN C
   Zhang G., 2011, 6 INT C SOFTW DAT TE
   Zhang G., 2011, SERP 11
   Zhang Guoheng, 2010, AS PAC SOFTW ENG C S
   Zhang HY, 2003, LECT NOTES COMPUT SC, V2681, P681
NR 32
TC 18
Z9 19
U1 1
U2 29
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2014
VL 22
IS 3
BP 365
EP 401
DI 10.1007/s11219-013-9197-z
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK6IH
UT WOS:000338530800001
DA 2024-07-18
ER

PT J
AU Nelson, HJ
   Poels, G
   Genero, M
   Piattini, M
AF Nelson, H. James
   Poels, Geert
   Genero, Marcela
   Piattini, Mario
TI A conceptual modeling quality framework
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Conceptual modeling; Quality; System development process
ID INFORMATION-SYSTEMS; KNOWLEDGE; VALIDATION; MANAGEMENT
AB The goal of any modeling activity is a complete and accurate understanding of the real-world domain, within the bounds of the problem at hand and keeping in mind the goals of the stakeholders involved. High-quality representations are critical to that understanding. This paper proposes a comprehensive Conceptual Modeling Quality Framework, bringing together two well-known quality frameworks: the framework of Lindland, Sindre, and Solvberg (LSS) and that of Wand and Weber based on Bunge's ontology (BWW). This framework builds upon the strengths of the LSS and BWW frameworks, bringing together and organizing the various quality cornerstones and then defining the many quality dimensions that connect one to another. It presents a unified view of conceptual modeling quality that can benefit both researchers and practitioners.
C1 [Nelson, H. James] So Illinois Univ, Dept Management, Carbondale, IL 62901 USA.
   [Poels, Geert] Univ Ghent, Fac Econ & Business Adm, B-9000 Ghent, Belgium.
   [Genero, Marcela; Piattini, Mario] Univ Castilla La Mancha, Dept Technol & Informat Syst, E-13071 Ciudad Real, Spain.
C3 Southern Illinois University System; Southern Illinois University; Ghent
   University; Universidad de Castilla-La Mancha
RP Nelson, HJ (corresponding author), So Illinois Univ, Dept Management, Carbondale, IL 62901 USA.
EM nelson.j@cba.siu.edu; geert.poels@UGent.be; marcela.genero@uclm.es;
   mario.piattini@uclm.es
RI GENERO, MARCELA/L-6480-2014; Piattini, Mario/F-6271-2013; Poels,
   Geert/D-1130-2013
OI GENERO, MARCELA/0000-0002-6868-7465; Piattini,
   Mario/0000-0002-7212-8279; Poels, Geert/0000-0001-9247-6150
FU CDTI-MICINN [IDI-20090557, IDI-2010043(1-5)]; MICINN
   [TIN2009-13718-C02-01, TRA2009_0074]; JCMM [PII2I09-0075-8394]
FX This research has been funded by the following projects: MEDUSAS
   (CDTI-MICINN and FEDER IDI-20090557), ORIGIN (CDTI-MICINN and FEDER
   IDI-2010043(1-5)), PEGASO/MAGO (MICINN and FEDER, TIN2009-13718-C02-01),
   EECCOO (MICINN TRA2009_0074) and MECCA (JCMM PII2I09-0075-8394).
CR Ambler S.W., 2005, ELEMENTS UML 2 0 STY
   [Anonymous], DATABASE SYSTEMS, DOI DOI 10.1145/320434.320440
   [Anonymous], 2003, UML UNIFIED PROCESS, DOI DOI 10.4018/978-1-93177-744-5.CH001
   [Anonymous], ONTOLOGY
   [Anonymous], OMG UN MOD LANG OMG
   Armstrong DJ, 2007, MIS QUART, V31, P453
   Batini C, 1991, CONCEPTUAL DATABASE
   Bolloju N, 2006, COMMUN ACM, V49, P108, DOI 10.1145/1139922.1139926
   BORGIDA A, 1985, COMPUTER, V18, P82, DOI 10.1109/MC.1985.1662870
   Conradi R., 2003, EUR C OBJ OR PROGR E
   Deng M, 2005, INT J SOFTW ENG KNOW, V15, P837, DOI 10.1142/S0218194005002531
   Evermann J, 2005, INFORM SYST J, V15, P147, DOI 10.1111/j.1365-2575.2005.00193.x
   Evermann J, 2006, J COMPUT INFORM SYST, V46, P14, DOI 10.1080/08874417.2006.11645922
   Gemino A, 2005, DATA KNOWL ENG, V55, P301, DOI 10.1016/j.datak.2004.12.009
   Gemino A, 2003, COMMUN ACM, V46, P79, DOI 10.1145/944217.944243
   GEORGAKOPOULOS D, 1995, DISTRIB PARALLEL DAT, V3, P119, DOI 10.1007/BF01277643
   Gerard G.J., 2005, J INFORM SYSTEMS, V19, P57
   Jacobson Ivar., 1999, AW OBJ TECHNOL S
   Johnson-Laird PN., 1983, Mental Models: towards a Cognitive Science of Language, Inference, and Consciousness
   Khatri V, 2006, INFORM SYST RES, V17, P81, DOI 10.1287/isre.1060.0081
   Kiewkanya M., 2005, 4 INT C SOFTW ENG PA
   Kong J, 2009, J SYST SOFTWARE, V82, P292, DOI 10.1016/j.jss.2008.06.030
   Krogstie J, 2006, EUR J INFORM SYST, V15, P91, DOI 10.1057/palgrave.ejis.3000598
   Krogstie J., 2003, Information Systems engineering: conceptual modelling in a qualityperspective
   Kuhn T.S., 2012, The structures of scientific revolutions
   Lange CFJ, 2006, IEEE SOFTWARE, V23, P40, DOI 10.1109/MS.2006.50
   LINDLAND OI, 1994, IEEE SOFTWARE, V11, P42, DOI 10.1109/52.268955
   Lung C. H., 1995, SIGSOFT S SOFTW REUS
   MAIDEN NA, 1992, COMMUN ACM, V35, P55, DOI 10.1145/129852.129857
   McBride S., 2006, 21 NAT C ART INT AAA
   Moody D., 2003, INT C SOFTW ENG PORT
   Moody DL, 2003, INFORM SYST, V28, P619, DOI 10.1016/S0306-4379(02)00043-1
   MOODY DL, 1998, 17 INT C CONC MOD SI
   Nelson H. J., 2001, EUR C SOFTW MEAS CON
   Poels G, 2009, UNDERSTANDING UNPUB
   Poels G, 2011, INFORM SYST J, V21, P63, DOI [10.1111/j.1365-2575.2007.00253.x, 10.1111/J.1365-2575.2007.00253.X]
   Purchase H. C., 2002, Journal of Graph Algorithms and Applications, V6, DOI 10.7155/jgaa.00054
   Recker J, 2007, COMMUN ASSOC INF SYS, V20, P774
   Russell B., 1903, The principles of mathematics
   Searle J.R., 2007, CONSTRUCTION SOCIAL
   SHAFT TM, 1995, INFORM SYST RES, V6, P286, DOI 10.1287/isre.6.3.286
   Snoeck M, 2000, LECT NOTES COMPUT SC, V1920, P423
   Stamper R, 2000, BEHAV INFORM TECHNOL, V19, P15, DOI 10.1080/014492900118768
   Stamper R, 1992, 3 AUSTR C INF SYST W
   Unkelkar B, 2005, VERIFICATION VALIDAT
   van Amstel M. F., 2007, 1 IEEE INT WORKSH QU
   Wagelaar D, 2007, EUR J INFORM SYST, V16, P362, DOI 10.1057/palgrave.ejis.3000686
   WAND Y, 1995, INFORM SYST J, V5, P203, DOI 10.1111/j.1365-2575.1995.tb00108.x
   Wand Y, 1999, ACM T DATABASE SYST, V24, P494, DOI 10.1145/331983.331989
   WAND Y, 1990, IEEE T SOFTWARE ENG, V16, P1282, DOI 10.1109/32.60316
   Wand Y, 1996, COMMUN ACM, V39, P86, DOI 10.1145/240455.240479
   Wand Y, 2002, INFORM SYST RES, V13, P363, DOI 10.1287/isre.13.4.363.69
   Wand Y., 1990, INT C INF SYST COP D
   WAND Y, 1988, INT C INF SYST ICIS
   Wand Y., 1993, IEEE T SOFTWARE ENG, V16, P217
NR 55
TC 72
Z9 79
U1 0
U2 18
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2012
VL 20
IS 1
BP 201
EP 228
DI 10.1007/s11219-011-9136-9
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 873ET
UT WOS:000298864600006
OA Green Published
DA 2024-07-18
ER

PT J
AU Bagheri, E
   Gasevic, D
AF Bagheri, Ebrahim
   Gasevic, Dragan
TI Assessing the maintainability of software product line feature models
   using structural metrics
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software product line; Feature model; Quality attributes;
   Maintainability; Structural complexity; Controlled experimentation;
   Software prediction model
ID QUALITY; UNDERSTANDABILITY; GUIDELINES
AB A software product line is a unified representation of a set of conceptually similar software systems that share many common features and satisfy the requirements of a particular domain. Within the context of software product lines, feature models are tree-like structures that are widely used for modeling and representing the inherent commonality and variability of software product lines. Given the fact that many different software systems can be spawned from a single software product line, it can be anticipated that a low-quality design can ripple through to many spawned software systems. Therefore, the need for early indicators of external quality attributes is recognized in order to avoid the implications of defective and low-quality design during the late stages of production. In this paper, we propose a set of structural metrics for software product line feature models and theoretically validate them using valid measurement-theoretic principles. Further, we investigate through controlled experimentation whether these structural metrics can be good predictors (early indicators) of the three main subcharacteristics of maintainability: analyzability, changeability, and understandability. More specifically, a four-step analysis is conducted: (1) investigating whether feature model structural metrics are correlated with feature model maintainability through the employment of classical statistical correlation techniques; (2) understanding how well each of the structural metrics can serve as discriminatory references for maintainability; (3) identifying the sufficient set of structural metrics for evaluating each of the subcharacteristics of maintainability; and (4) evaluating how well different prediction models based on the proposed structural metrics can perform in indicating the maintainability of a feature model. Results obtained from the controlled experiment support the idea that useful prediction models can be built for the purpose of evaluating feature model maintainability using early structural metrics. Some of the structural metrics show significant correlation with the subjective perception of the subjects about the maintainability of the feature models.
C1 [Bagheri, Ebrahim] CNR, Ottawa, ON, Canada.
   [Gasevic, Dragan] Athabasca Univ, Sch Comp & Informat Syst, Athabasca, AB, Canada.
   [Gasevic, Dragan] Simon Fraser Univ, Sch Interact Arts & Technol, Burnaby, BC V5A 1S6, Canada.
C3 National Research Council Canada; Athabasca University; Simon Fraser
   University
EM ebagheri@athabascau.ca; dragang@athabascau.ca
RI Gasevic, Dragan/AAT-3909-2020
OI Gasevic, Dragan/0000-0001-9265-1908; Bagheri,
   Ebrahim/0000-0002-5148-6237
CR Al-Kilidar H., 2005, 2005 International Symposium on Empirical Software Engineering (IEEE Cat. No. 05EX1213)
   [Anonymous], 1999, DISTANCE FRAMEWORK S
   [Anonymous], 1995, P INT S APPL CORP CO
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], IEEE INT C AC SPEECH
   Babar MA, 2010, IEEE SOFTWARE, V27, P89, DOI 10.1109/MS.2010.77
   Bagheri E, 2010, 14 INT SOFTW PROD LI
   Bansiya J, 2002, IEEE T SOFTWARE ENG, V28, P4, DOI 10.1109/32.979986
   BARBACCI M, 1995, SEI              DEC
   Basili VR, 1999, IEEE T SOFTWARE ENG, V25, P456, DOI 10.1109/32.799939
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Benavides David., 2007, PROCEEDING 1 INT WOR, P129
   BOSKOVIC M, 2010, INT J SOFTWARE ENG K
   Briand L. C., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P345, DOI 10.1109/ICSE.1999.841025
   Briand LC, 2000, J SYST SOFTWARE, V51, P245, DOI 10.1016/S0164-1212(99)00102-8
   Briand LC, 2001, IEEE T SOFTWARE ENG, V27, P513, DOI 10.1109/32.926174
   Briand LC, 1996, IEEE T SOFTWARE ENG, V22, P68, DOI 10.1109/32.481535
   CANT SN, 1994, J OBJECT-ORIENT PROG, V7, P52
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cruz-Lemus JA, 2010, INFORM SCIENCES, V180, P2209, DOI 10.1016/j.ins.2010.01.026
   Cruz-Lemus JA, 2009, EMPIR SOFTW ENG, V14, P685, DOI 10.1007/s10664-009-9106-z
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, P7, DOI 10.1002/spip.213
   DEOLIVEIRA EA, 2008, 34 C LAT INF CLEI 20
   ETXEBERRIA L, 2008, P 12 INT SOFTW PROD, P243, DOI DOI 10.1109/SPLC.2008.37
   FENTON N, 1994, IEEE T SOFTWARE ENG, V20, P199, DOI 10.1109/32.268921
   Fenton NE, 1999, J SYST SOFTWARE, V47, P149, DOI 10.1016/S0164-1212(99)00035-7
   Fenton NE, 1999, IEEE T SOFTWARE ENG, V25, P675, DOI 10.1109/32.815326
   Finkelstein L, 2003, MEASUREMENT, V34, P39, DOI 10.1016/S0263-2241(03)00018-6
   Garner StephenR., 1995, Proc. of the New Zealand Computer Science Research Students Conference, P57
   Genero M., 2001, Advanced Information Systems Engineering. 13th International Conference, CAiSE 2001. Proceedings (Lecture Notes in Computer Science Vol.2068), P388
   Genero M, 2008, DATA KNOWL ENG, V64, P534, DOI 10.1016/j.datak.2007.09.011
   Griss ML, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P76, DOI 10.1109/ICSR.1998.685732
   HALL MA, 1997, P 4 INT C NEUR INF P, P855
   HERRMANNSDOERFE.M, 2010, P 3 INT C SOFTW LANG
   Hosmer W., 2000, Applied Logistic Regression, VSecond
   Hubbard D, 2010, IBM J RES DEV, V54, DOI 10.1147/JRD.2010.2042914
   Janota M, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P13
   Jarzabek S, 2006, IEE P-SOFTW, V153, P61, DOI 10.1049/ip-sen:20050008
   JONES C, 2008, APPL SOFTWARE MEASUR
   Kang K. C., 1990, Technical Report
   KAZMAN R, 1998, ARCHITECTURE TRADEOF
   KENT JT, 1983, BIOMETRIKA, V70, P163, DOI 10.1093/biomet/70.1.163
   Khoshgoftaar TM, 2009, SOFTWARE QUAL J, V17, P25, DOI 10.1007/s11219-008-9058-3
   Khoshgoftaar TM, 2003, EMPIR SOFTW ENG, V8, P255, DOI 10.1023/A:1024424811345
   KHOSHGOFTAAR TM, 1992, IEEE T RELIAB, V41, P390, DOI 10.1109/24.159804
   KHOSHGOFTAAR TM, 1992, IEEE T SOFTWARE ENG, V18, P979, DOI 10.1109/32.177367
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   Kocaguneli E., 2009, Combining Multiple Learners Induced on Multiple Datasets for Software Effort Prediction
   KORSON T, 1990, COMMUN ACM, V33, P40, DOI 10.1145/83880.84459
   Lee K, 2002, LECT NOTES COMPUT SC, V2319, P62
   Liu Y., 2010, IEEE Transactions on Software Engineering, V99
   LOPEZHERREJON R, 2001, LECT NOTES COMPUTER, P10
   Lozano Luis M., 2008, Methodology, P73, DOI [10.1027/1614-2241.4.2.73, DOI 10.1027/1614-2241.4.2.73]
   MANSO M, 2010, ADV INFORM SYSTEMS E, P1029
   McGregor JD, 2010, IEEE SOFTWARE, V27, P16, DOI 10.1109/MS.2010.74
   MENDONCA M, 2008, P 7 INT C GEN PROGR, P13, DOI DOI 10.1145/1449913.1449918
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Olumofin FG, 2007, INFORM SOFTWARE TECH, V49, P309, DOI 10.1016/j.infsof.2006.05.003
   Poels G, 2000, INFORM SOFTWARE TECH, V42, P35, DOI 10.1016/S0950-5849(99)00053-1
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Pohl K, 2006, COMMUN ACM, V49, P78, DOI 10.1145/1183236.1183271
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Scott W.Richard., 1998, ORG RATIONAL NATURAL, V4th
   Serrano MA, 2008, SOFTWARE QUAL J, V16, P79, DOI 10.1007/s11219-007-9030-7
   Siau K, 2005, DATA KNOWL ENG, V55, P343, DOI 10.1016/j.datak.2004.12.006
   SIMON HA, 1978, AM ECON REV, V68, P1
   Tao Zhang, 2008, 2008 International Conference on Computer Science and Software Engineering (CSSE 2008), P500, DOI 10.1109/CSSE.2008.500
   Tessier P, 2005, LECT NOTES COMPUT SC, V3714, P222
   Wang HH, 2007, J WEB SEMANT, V5, P117, DOI 10.1016/j.websem.2006.11.006
   Weiss D.M., 2006, P 10 INT SOFTW PROD, P237, DOI [10.1109/SPLINE.2006.1691614, DOI 10.1109/SPLINE.2006.1691614]
   WEYUKER EJ, 1988, IEEE T SOFTWARE ENG, V14, P1357, DOI 10.1109/32.6178
   YU E, 1994, P 16 INT C SOFTW ENG, P168
   [No title captured]
NR 75
TC 72
Z9 77
U1 0
U2 14
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2011
VL 19
IS 3
BP 579
EP 612
DI 10.1007/s11219-010-9127-2
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 775TK
UT WOS:000291486100006
DA 2024-07-18
ER

PT J
AU Clipsham, P
   Major, E
   Bacon, L
   Manickam, P
AF Clipsham, Phil
   Major, Elaine
   Bacon, Liz
   Manickam, Pradeep
TI Proposing a multi-agency development framework
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE Multi-agency environment; System failure; Case study modelling; Task
   accountability
ID ORGANIZATIONAL SUBCULTURES
AB Systems used in complex, multi-agency environments have a number of inherent problems and challenges that in many cases, lead to systems failure. The area of system failure has been the subject of extensive research in the past. It has been well documented in a number of places that information systems are difficult to build and are prone to failure. This paper examines system failure from a social perspective in the context of building systems in complex environments. Through a case study modelling approach, a framework has been developed to assist in building information systems in such complex multi-agency environments. The paper introduces this framework through a study of a number of challenges confronting the builder of information systems in complex, social, multi-agency environments. We examine the role of task accountability and problems identifying authority as key reasons why systems are rejected by users. We introduce a task accountability model to help understand this problem. We conclude by identifying work still to be carried out within the study.
C1 [Clipsham, Phil; Major, Elaine; Bacon, Liz; Manickam, Pradeep] Univ Greenwich, Ctr Social & Community Technol, Sch Comp & Math Sci, Old Royal Naval Coll, London SE10 9LS, England.
C3 University of Greenwich
RP Clipsham, P (corresponding author), Univ Greenwich, Ctr Social & Community Technol, Sch Comp & Math Sci, Old Royal Naval Coll, Pk Row, London SE10 9LS, England.
EM p.s.clipsham@gre.ac.uk; e.f.major@gre.ac.uk; e.bacon@gre.ac.uk;
   p.manickam@gre.ac.uk
CR [Anonymous], 2008, HARINGEY CHILDRENS S
   [Anonymous], 2018, Organizational culture and leadership
   Checkland P., 1981, Systems thinking, systems practice, V10th ed
   Hofstede G, 1998, J MANAGE STUD, V35, P1, DOI 10.1111/1467-6486.00081
   Jermier JM, 1991, ORGAN SCI, V2, P170, DOI 10.1287/orsc.2.2.170
   Laming, 2003, VICTORIA CLIMBIE INQ
   Ludman M., 2006, P 14 INT C SOFTW QUA
   Martin J., 2002, Organizational culture: Mapping the terrain
   Myers M.D., 1999, Communications of the Association for Information Systems, V2, P2
   RESET Final report, 2007, RES CHECKL EQUAL PRO
   Sheu M, 2009, SYST RES BEHAV SCI, V26, P49, DOI 10.1002/sres.927
   Standish.Group, 1999, CHAOS REP
   The Guardian, 2008, TIM SHORT LIF BAB P
NR 13
TC 1
Z9 2
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 381
EP 391
DI 10.1007/s11219-010-9120-9
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500006
DA 2024-07-18
ER

PT J
AU Holland, S
   Dawson, R
AF Holland, Suzi
   Dawson, Ray
TI Classification and selection of tools for quality knowledge management
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE Knowledge management tools; Knowledge problems; Tool selection; Tool
   classification
AB Knowledge managers need to select which knowledge management tool to use for any given problem and problem environment. A graphical tool, named the "house of knowledge management tool selection" is proposed, based on the house of quality matrix used in the quality function deployment methodology. A simple case study is described that acts as a proof of concept to show the house of knowledge management Tool selection can systematically evaluate potential tools to solve a knowledge management problem. To help identify the tools to populate the house, an examination was undertaken of how knowledge management tools had previously been listed and classified, but these existing classifications were found to be of little help. No classification existed that categorised the tools in terms of the knowledge problems they helped resolve, yet this classification would seem more useful for knowledge managers. To meet this need, knowledge problems were divided into ten subtypes and the knowledge management tools were then categorised according to their effectiveness at solving each subtype. This new classification was flexible enough to include all types of knowledge management tools and could also change with each problem environment. It was found to give a greater understanding of the knowledge management tools in the context of a particular knowledge problem, and it could therefore help populate the house tool. The house of knowledge management tool selection is a promising development of a tool that should be able to become an essential part of a manager's decision-making toolkit.
C1 [Holland, Suzi; Dawson, Ray] Univ Loughborough, Dept Comp Sci, Loughborough, Leics, England.
C3 Loughborough University
RP Holland, S (corresponding author), Univ Loughborough, Dept Comp Sci, Loughborough, Leics, England.
EM S.J.Holland@lboro.ac.uk
CR ALGHASSANI A, 2002, 3 EUR C KNOWL MAN AC, P43
   [Anonymous], 2008, International Journal of Micrographics and Optical Technology, V26
   Dawson R, 2009, PROCEEDINGS OF THE 10TH EUROPEAN CONFERENCE ON KNOWLEDGE MANAGEMENT , VOLS 1 AND 2, P209
   DAWSON RJ, 2007, P SOFTW QUAL MAN 15, P341
   du Plessis M, 2008, INT J INFORM MANAGE, V28, P285, DOI 10.1016/j.ijinfomgt.2008.02.006
   Dvir R., 2004, Journal of Knowledge Management, V8, P16, DOI 10.1108/13673270410558756
   Gallupe B, 2001, INT J MANAG REV, V3, P61, DOI 10.1111/1468-2370.00054
   Jackson C, 2000, KNOWLEDGE MANAGEMENT AND BUSINESS MODEL INNOVATION, P402
   Kankanhalli A, 2003, COMMUN ACM, V46, P69, DOI 10.1145/903893.903896
   Kerno S.J., 2008, J LEADERSHIP ORG STU, V15, P69, DOI DOI 10.1177/1548051808317998
   LOGAN GD, 2007, IEEE T REHABIL ENG, V5, P105
   Lynch C. G., 2008, CIO, V21, P17
   Mohamed Mona A., 2008, VINE, V38, P388, DOI 10.1108/03055720810917642
   *QFD, 2007, QFD TEMPL
   Ruggles R.L., 1997, Knowledge management tools
   Tyndale P, 2002, EVAL PROGRAM PLANN, V25, P183, DOI 10.1016/S0149-7189(02)00012-5
   WENSLEY A, 2000, BPRC C KNOWL MAN CON
NR 17
TC 5
Z9 5
U1 0
U2 29
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 393
EP 409
DI 10.1007/s11219-010-9121-8
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500007
DA 2024-07-18
ER

PT J
AU Tiarks, R
   Koschke, R
   Falke, R
AF Tiarks, Rebecca
   Koschke, Rainer
   Falke, Raimar
TI An extended assessment of type-3 clones as detected by state-of-the-art
   tools
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 9th IEEE International Working Conference on Source Code Analysis and
   Manipulation (SCAM 2009)
CY SEP 20-22, 2009
CL Edmonton, CANADA
SP IEEE Comp Soc, TCSE, Informat Circle Res Excellence, Semant Designs, Kings Coll London, CREST
DE Software clones; Clone categorization; Type-3 clones
ID EDITING DISTANCE; CODE; ALGORITHMS; TREES
AB Code reuse through copying and pasting leads to so-called software clones. These clones can be roughly categorized into identical fragments (type-1 clones), fragments with parameter substitution (type-2 clones), and similar fragments that differ through modified, deleted, or added statements (type-3 clones). Although there has been extensive research on detecting clones, detection of type-3 clones is still an open research issue due to the inherent vagueness in their definition. In this paper, we analyze type-3 clones detected by state-of-the-art tools and investigate type-3 clones in terms of their syntactic differences. Then, we derive their underlying semantic abstractions from their syntactic differences. Finally, we investigate whether there are code characteristics that indicate that a tool-suggested clone candidate is a real type-3 clone from a human's perspective. Our findings can help developers of clone detectors and clone refactoring tools to improve their tools.
C1 [Tiarks, Rebecca; Koschke, Rainer; Falke, Raimar] Univ Bremen, D-28359 Bremen, Germany.
C3 University of Bremen
RP Koschke, R (corresponding author), Univ Bremen, D-28359 Bremen, Germany.
EM beccs@informatik.uni-bremen.de; koschke@informatik.uni-bremen.de;
   rfalke@informatik.uni-bremen.de
CR [Anonymous], 2007, Tech. Rep. 2007-541
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   Balazinska M., 1999, Proceedings Sixth International Software Metrics Symposium (Cat. No.PR00403), P292, DOI 10.1109/METRIC.1999.809750
   Balazinska M, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P98, DOI 10.1109/WCRE.2000.891457
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Chen X, 2004, IEEE T INFORM THEORY, V50, P1545, DOI 10.1109/TIT.2004.830793
   Dijkstra EW., 1959, NUMER MATH, V1, P269, DOI [10.1007/BF01386390, DOI 10.1007/BF01386390]
   Ducasse S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P109, DOI 10.1109/ICSM.1999.792593
   Evans WS, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P150, DOI 10.1109/WCRE.2007.15
   Falke R, 2008, EMPIR SOFTW ENG, V13, P601, DOI 10.1007/s10664-008-9073-9
   Frenzel P., 2007, IEEE WORK C REV ENG, P160
   HIGO Y, 2004, P 8 IASTED INT C SOF, P222
   Higo Y, 2007, INFORM SOFTWARE TECH, V49, P985, DOI 10.1016/j.infsof.2006.10.005
   Jia Yingjian, 2009, P CSMR 09, P12
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kapser C., 2007, DUPL RED SIM SOFTW D
   Kapser C, 2003, ELISA 03, P67
   Kapser CJ, 2006, J SOFTW MAINT EVOL-R, V18, P61, DOI 10.1002/smr.327
   KAPSER CJ, 2003, P IWDSC 03
   Koschke R, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P241, DOI 10.1109/WCRE.1998.723194
   KOSCHKE R, 2008, P INT C SOFTW MAINT
   KOSCHKE R, 2007, DUPL RED SIM SOFTW D
   Koschke R., 2008, Identifying and removing software clones, P15
   Koschke R, 2009, SOFTWARE QUAL J, V17, P331, DOI 10.1007/s11219-009-9077-8
   Krinke J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P301, DOI 10.1109/WCRE.2001.957835
   Li M, 2004, IEEE T INFORM THEORY, V50, P3250, DOI 10.1109/TIT.2004.838101
   Mayrand J, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P244, DOI 10.1109/ICSM.1996.565012
   Mende T, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P163
   Mende T, 2009, J SOFTW MAINT EVOL-R, V21, P143, DOI 10.1002/smr.402
   NevillManning CG, 1997, IEEE DATA COMPR CONF, P3, DOI 10.1109/DCC.1997.581951
   Quinlan J.R.C., 1993, C4 5 PROGRAMS MACHIN
   ROY CK, 2009, SCP 74, V7, P470, DOI [DOI 10.1016/J.SCICO.2009.02.007, DOI 10.1016/J.SCIC0.2009.02.007]
   SELKOW SM, 1977, INFORM PROCESS LETT, V6, P184, DOI 10.1016/0020-0190(77)90064-3
   SHASHA D, 1989, SPAA 89, P117, DOI 10.1145/72935.72949
   Smith R., 2009, DETECTING MEASURING
   TAI KC, 1979, J ACM, V26, P422, DOI 10.1145/322139.322143
   Tiarks R, 2009, IEEE INT WORK C SO, P67, DOI 10.1109/SCAM.2009.16
   Valiente G., 2002, ALGORITHMS TREES GRA
   Walenstein A., 2007, DUPL RED SIM SOFTW D
   Walenstein A., 2003, WCRE
   Walenstein A., 2007, P BLACKHAT 2007 DC B
   Walenstein A., 2007, DUPLICATION REDUNDAN
   Xin Chen, 2000, RECOMB 2000. Proceedings of the Fourth Annual International Conference on Computational Molecular Biology, DOI 10.1145/332306.332352
   ZHANG KZ, 1989, SIAM J COMPUT, V18, P1245, DOI 10.1137/0218082
   ZHANG KZ, 1995, PATTERN RECOGN, V28, P463, DOI 10.1016/0031-3203(94)00109-Y
   ZIV J, 1977, IEEE T INFORM THEORY, V23, P337, DOI 10.1109/TIT.1977.1055714
NR 47
TC 16
Z9 17
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2011
VL 19
IS 2
BP 295
EP 331
DI 10.1007/s11219-010-9115-6
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 737ES
UT WOS:000288552500003
DA 2024-07-18
ER

PT J
AU de Oliveira, SB
   Valle, R
   Mahler, CF
AF de Oliveira, Saulo Barbara
   Valle, Rogerio
   Mahler, Claudio Fernando
TI A comparative analysis of CMMI software project management by Brazilian,
   Indian and Chinese companies
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software industry; Software project development; Software process
   improvement; Capability maturity model
ID PROCESS IMPROVEMENT
AB This article presents and discusses the perception of skilled professionals working in the Brazilian, Chinese and Indian software industries about their use of Capability Maturity Model Integration. About 429 employees from 19 software production companies that use the model took part in the study. Multivariate analysis methods, such as factorial analysis, were used to identify the interdependence between multiple variables. This led us to six factors: software project development, quality and productivity, professional career, team/working environment, problem identification and analysis and modeling. Three different analysis dimensions (country, company's maturity level and company size) were investigated to assess the impact of the CMMI model on the six factors, which were defined for each of these dimensions.
C1 [de Oliveira, Saulo Barbara] Univ Fed Rural Rio de Janeiro, Rio De Janeiro, Brazil.
   [Valle, Rogerio; Mahler, Claudio Fernando] Univ Fed Rio de Janeiro, Rio De Janeiro, Brazil.
C3 Universidade Federal Rural do Rio de Janeiro (UFRRJ); Universidade
   Federal do Rio de Janeiro
RP de Oliveira, SB (corresponding author), Univ Fed Rural Rio de Janeiro, Rio De Janeiro, Brazil.
EM saulobarbara@gmail.com; valle@pep.ufrj.br; mahler0503@yahoo.com.br
RI de Oliveira, Saulo/Y-7340-2019
OI de Oliveira, Saulo/0000-0002-9424-5425
CR [Anonymous], 1991, MEASUREMENT EVALUATI
   Beecham S, 2003, EMPIR SOFTW ENG, V8, P7, DOI 10.1023/A:1021764731148
   BEYNON DR, 2007, CMUSEI2007TN004
   CHRISSIS MB, 2003, INTRO CMMI
   *CSIA, 2006, CHIN SOFTW EXP ACH
   Dyba T., 2000, Empirical Software Engineering, V5, P357, DOI 10.1023/A:1009800404137
   El-Emam K., 2001, Empirical Software Engineering, V6, P207, DOI 10.1023/A:1011487332587
   ELEMAM K, 1999, C LOC IEEE COMP SOC
   Gibb A, 2003, FUTURES, V35, P403, DOI 10.1016/S0016-3287(02)00089-7
   Gibson D, 2006, CMUSEI2006T004
   GOLDENSON D., 2003, DEMONSTRATING IMPACT
   Goldenson D., 1999, Elements of Software Process Assessment and Improvement
   HEFNER R, 2004, CMMI COMPLIANCE COTS
   HEFNER R, 2005, ACHIEVING PROMISED B
   HERBSLEB JD, 1996, 18 INT C SOFTW ENG I, P323
   *IBGE, 2004, PESQ AN SERV
   JUNG HW, 2003, CMUSEI2003TN015
   KRASNER H, 1999, ELEMENTS SOFTWARE PR
   Krishnan MS, 1999, IEEE T SOFTWARE ENG, V25, P800, DOI 10.1109/32.824401
   *NASS, 2006, IND IT SOFTW SERV GR
   NICHOLS R, 2005, CMUSEI2005T002
   *SEI, 2002, CMUSEI2002T029
   *SEI, 2007, CMUSEI2007TN009
   *SEI, 2003, CMUSEI2002TR001
   *SEI, 2006, PROC MAT PROF NUM AP
   *SEI, 2002, CMUSEI2002T001
   Stelzer D., 1998, Software Process Improvement and Practice, V4, P227, DOI 10.1002/(SICI)1099-1670(199812)4:4<227::AID-SPIP106>3.0.CO;2-1
   Suhr D.D., 2003, Reliability, Exploratory Confirmatory Factor Analysis for the Scale of Athletic Priorities
   Trienekens JJM, 2007, SOFTWARE QUAL J, V15, P135, DOI 10.1007/s11219-006-9007-y
   Trienekens JJM, 2009, SOFTWARE QUAL J, V17, P231, DOI 10.1007/s11219-008-9063-6
   Trudel S, 2006, SOFTWARE QUAL J, V14, P7, DOI 10.1007/s11219-006-5997-8
NR 31
TC 7
Z9 15
U1 0
U2 13
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2010
VL 18
IS 2
BP 177
EP 194
DI 10.1007/s11219-009-9087-6
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 584IX
UT WOS:000276746300001
DA 2024-07-18
ER

PT J
AU Jaakkola, H
   Heimbürger, A
   Linna, P
AF Jaakkola, Hannu
   Heimburger, Anneli
   Linna, Petri
TI Knowledge-oriented software engineering process in a multi-cultural
   context
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software engineering process; Context; Culture; Knowledge
ID CULTURE
AB In software engineering, leading trends can be detected that will affect the characteristic features of a product and its development process. On a product level, the growth of size and complexity is apparent-but on the one hand only. On the other hand, there is also a growing demand for simple and reasonable small software products executed by handheld terminals and smartphones; these applications are in many cases expected to collaborate with databases over the Internet. In addition, different kinds of service concepts (ASP, SaaS) are becoming recognized alternatives to the traditional way of buying software. Increasingly, software products are also distributed in a wide geographical scope to users with different cultural backgrounds and expectations. In software engineering work, as a consequence of this growth in size and complexity, the development work is more and more often distributed. The software business itself is becoming global because of acquisitions, offshoring, and international subcontracting. The globalization of work sets new requirements to the engineering processes: in international teams the organisational and cultural differences of the development subteams have to be recognized. In this paper, the focus is on the software development and its global dimension-especially the roles of multi-cultural and cross-organizational issues in software engineering. Our paper presents the results of the first phase of our three phases research project related to "Culture-Aware Software Engineering." The main result of the first phase is the multi-cultural software engineering working model introduced in our paper. Culture is seen as one example of the context, i.e. the situation at hand. The concept of culture has also different meanings, which have to be understood in well-organized software engineering. Software engineering work is analyzed as a knowledge creation process, in which both explicit and tacit knowledge are recognized and the transformation between these establishes baselines along the development life cycle.
C1 [Jaakkola, Hannu; Linna, Petri] Tampere Univ Technol, FIN-33101 Tampere, Finland.
   [Heimburger, Anneli] Univ Jyvaskyla, Jyvaskyla, Finland.
C3 Tampere University; University of Jyvaskyla
RP Jaakkola, H (corresponding author), Tampere Univ Technol, FIN-33101 Tampere, Finland.
EM hannu.jaakkola@tut.fi; anneli.a.heimburger@jyu.fi; petri.linna@tut.fi
RI Jaakkola, Hannu/B-3889-2013
OI Jaakkola, Hannu/0000-0003-0188-7507
FU Finnish Funding Agency for Technology and Innovation (Tekes); Academy of
   Finland
FX The authors thank the Finnish Funding Agency for Technology and
   Innovation (Tekes) and the Academy of Finland for partly funding our
   research project.
CR Ahn H. J., 2005, DECISION SUPPORT SYS, V39
   [Anonymous], 1952, CULTURE CRITICAL REV
   [Anonymous], 2001, MANAGING INDUSTRIAL
   [Anonymous], 1992, INT J INTERCULT REL, DOI DOI 10.1016/0147-1767(92)90033-Q
   [Anonymous], 1998, RATIONAL UNIFIED PRO
   [Anonymous], 155045 ISOIEC
   [Anonymous], 1961, VARIATIONS VALUE ORI
   BIJL A, 1995, 3URSELVES COMPUTERS
   Boehm B.A., 2006, Proceedings of ICSE'06 Conference, P12, DOI DOI 10.1145/1134285.1134288
   BOEHM BW, 1988, COMPUTER, V21, P61, DOI 10.1145/12944.12948
   Brézillon P, 2003, IEEE INTELL SYST, V18, P62, DOI 10.1109/MIS.2003.1200731
   Coutaz J, 2005, COMMUN ACM, V48, P49, DOI 10.1145/1047671.1047703
   DEGEYETERE T, 2009, UNIFIED MODEL DYNAMI
   DEMENTE B, 2001, ETIQUETTE GUIDE JAPA
   Dey A., 2005, 5 INT INT C CONTEXT
   Good R., 2009, BEST ONLINE COLLABOR
   GORRILL JR, 2008, INTERCULTURAL COMMUN
   HEIMBURGER A, 2008, INFORM MODELLING KNO, V19, P214
   HEIMBURGER A, 2007, INFORM MODELLING KNO, V154, P136
   HEIMBURGER A, 2009, P 19 EUR JAP C INF M
   HEIMBURGER A, 2008, 18 EUR JAP C INF MOD, P297
   Hofstede G., 2003, GEERT HOFSTEDE CULTU
   Hofstede G., 1984, Cross-cultural Research and Methodology Series, V5
   Hoft N.L., 1996, INT USER INTERFACES, P41
   Holden N., 2002, CROSS CULTURAL MANAG
   *IEEE, 1990, 61012 IEEE ACM
   *ISO IEC, 2004, 12207AND22004 ISOIEC
   ISO/IEC International Organization for Standardization and International Electrotechnical Commission, 2006, 155045 ISOIEC 5
   Jacobson Ivar., 1999, AW OBJ TECHNOL S
   King WR, 2007, KNOWL PROCESS MANAG, V14, P226, DOI 10.1002/kpm.281
   KIYOKI Y, 1994, ACM SIGMOD RECORD, V23, P34
   KIYOKI Y, 2009, CONTEXTUAL COMPUTING
   Krishna S, 2004, COMMUN ACM, V47, P62, DOI 10.1145/975817.975818
   *KWINT, 2009, CROSS CULT SOL
   Landow G., 2009, HYPERTEXT VERSUS KNO
   Lewis R. D., 1999, WHEN CULTURES COLLID
   March R., 1990, The Japanese Negotiator
   Marcus A, 2004, LECT NOTES COMPUT SC, V3101, P252
   Marsen S., 2006, NARRATIVE DIMENSIONS
   Nonaka I, 1995, KNOWLEDGE CREATING C
   PFLEEGER S.L., 2006, Software Engineering, Theory and Practice
   Polanyi Michael., 1967, The Tacit Dimension, Anchor book
   *SCRUM, 2009, SCRUM TEAM BAS FRAM
   SEI, 2006, CMUSEI2006TR008
   Shah S, 2004, BRIT EDUC RES J, V30, P549, DOI 10.1080/0141192042000237239
   Siakas KV, 1999, SOFTWARE QUAL J, V8, P85, DOI 10.1023/A:1008948709011
   Straub D., 2002, Journal of Global Information Management, V10, P13
   WALKER NN, 2005, ELECT J CONT JAPANES
   [No title captured]
NR 49
TC 13
Z9 13
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2010
VL 18
IS 2
BP 299
EP 319
DI 10.1007/s11219-009-9091-x
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 584IX
UT WOS:000276746300005
DA 2024-07-18
ER

PT J
AU Zhao, L
   Gu, T
   Qian, J
   Cai, G
AF Zhao, Lingzhong
   Gu, Tianlong
   Qian, Junyan
   Cai, Guoyong
TI Test frame updating in CPM testing of Prolog programs
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT 2nd Workshop on Advances in Model-based Software Testing
CY NOV 06, 2006
CL Raleigh, NC
DE CPM testing; prolog programs; call patterns semantics; test frame
   reduction; test frame refinement
ID UP ABSTRACT INTERPRETATION; TEST-CASE GENERATION; LOGIC PROGRAMS; CALL
   PATTERNS; SEMANTICS
AB Category Partition Method (CPM) is a general approach to specification- based program testing, where test frame reduction and refinement are two important issues. Test frame reduction is necessary since too many test frames may be produced, and test frame refinement is important since during CPM testing new information about test frame generation may be achieved and considered incrementally. Besides the information provided by testers or users, implementation related knowledge offers alternative information for reducing and refining CPM test frames. This paper explores the idea by proposing a call patterns semantics based test frame updating method for Prolog programs, in which a call patterns analysis is used to collect information about the way in which procedures are used in a program. The updated test frames will be represented as constraints. The effect of our test frame updating is two-fold. On one hand, it removes "uncared" data from the original set of test frames; on the other hand, it refines the test frames to which we should pay more attention. The first effect makes the input domain on which a procedure must be tested a subset of the procedure's input domain, and the latter makes testers stand more chance to find out the faults that are more likely to show their presence in the use of the program under consideration. Our test frame updating method preserves the effectiveness of CPM testing with respect to the detection of faults we care. The test case generation from the updated set of test frames is also discussed. In order to show the applicability of our method an approximation call patterns semantics is proposed, and the test frame updating on the semantics is illustrated by an example.
C1 [Zhao, Lingzhong] Xidian Univ, Sch Elect Engn, Xian 710071, Peoples R China.
   [Zhao, Lingzhong; Gu, Tianlong; Qian, Junyan; Cai, Guoyong] Guilin Univ Elect Technol, Sch Comp & Control, Guilin 541004, Peoples R China.
C3 Xidian University; Guilin University of Electronic Technology
RP Zhao, L (corresponding author), Xidian Univ, Sch Elect Engn, Xian 710071, Peoples R China.
EM zhaolingzhong163@163.com
OI Qian, Junyan/0000-0002-1325-6975
CR AMLA N, 1992, P 7 ANN IEEE C COMP, P3
   [Anonymous], P 9 ANN C COMP ASS G
   [Anonymous], ENERGY2020
   [Anonymous], 2006, Software testing
   BALCER MJ, 1989, ACM SIGSOFT, V14, P210, DOI 10.1145/75309.75332
   BARBUTI R, 1993, ACM T PROGR LANG SYS, V15, P133, DOI 10.1145/151646.151650
   Belli F., 1998, Software Testing, Verification and Reliability, V8, P15, DOI 10.1002/(SICI)1099-1689(199803)8:1<15::AID-STVR146>3.0.CO;2-D
   Belli F, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P133, DOI 10.1109/ISSRE.1995.497651
   BELLI F, 1993, P 1993 ACM SIGSOFT I, P70
   Chen TY, 2003, IEEE T SOFTWARE ENG, V29, P577, DOI 10.1109/TSE.2003.1214323
   CODISH M, 1994, THEOR COMPUT SCI, V124, P93, DOI 10.1016/0304-3975(94)90055-8
   COLMERAUER A, 1990, COMMUN ACM, V33, P69, DOI 10.1145/79204.79210
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   GABBRIELLI M, 1992, LECT NOTES COMPUT SC, V632, P84
   GABBRIELLI M, 1995, INFORM COMPUT, V122, P1, DOI 10.1006/inco.1995.1138
   Gabbrielli M., 1994, Proceedings of the 1994 ACM Symposium on Applied Computing (SAC'94), P394, DOI [10.1145/326619.326789, DOI 10.1145/326619.326789]
   HORVATH T, 1993, P 3 FINN EST HUNG S, P34
   Howe JM, 2003, THEOR PRACT LOG PROG, V3, P95, DOI 10.1017/S1471068402001485
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   KOKAI G, 1997, P LIRA 97 8 C LOG CO, P103
   LEVI G, 1996, P APPIA GULP PRODE 9, P481
   LUO G, 1992, P 3 INT S SOFTW REL, P104
   Marriott K., 1993, ACM Letters on Programming Languages and Systems, V2, P181, DOI 10.1145/176454.176519
   OFFUTT AJ, 1995, P 17 INT C TECHN OBJ, P293
   OSTRAND TJ, 1988, COMMUN ACM, V31, P676, DOI 10.1145/62959.62964
   Shapiro Ehud Y., 1982, Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P299, DOI 10.1145/582153.582185
   Spoto F, 1999, LECT NOTES COMPUT SC, V1548, P455
   Spoto F, 2000, J LOGIC PROGRAM, V42, P1, DOI 10.1016/S0743-1066(99)00012-6
   Stocks P, 1996, IEEE T SOFTWARE ENG, V22, P777, DOI 10.1109/32.553698
   Volpe P, 2001, SCI COMPUT PROGRAM, V39, P125, DOI 10.1016/S0167-6423(00)00017-4
   Zeil S., 1993, Proceedings. The Eighth Knowledge-Based Software Engineering Conference (Cat. No.93TH0580-1), P50, DOI 10.1109/KBSE.1993.341198
   ZHAO L, 2007, P 1 IEEE IFIP INT S, P261
   Zhao Lingzhong, 2007, WSEAS Transactions on Computers, V6, P947
   Zhao LZ, 2007, LECT NOTES COMPUT SC, V4807, P105
   Zhao LZ, 2006, LECT NOTES COMPUT SC, V4304, P1265
   Zhao LZ, 2006, LECT NOTES ARTIF INT, V4099, P1052, DOI 10.1007/978-3-540-36668-3_132
NR 37
TC 1
Z9 2
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2008
VL 16
IS 2
BP 277
EP 298
DI 10.1007/s11219-007-9039-y
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 286MP
UT WOS:000254850300007
DA 2024-07-18
ER

PT J
AU Moses, J
AF Moses, John
TI Benchmarking quality measurement
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT Conference on Software Quality Management
CY APR, 2006
CL Southampton, ENGLAND
DE software quality; agreement most of the time; rejection rates; bayesian
   inference; error rates; prediction systems
ID SOFTWARE MEASUREMENT
AB This paper gives a simple benchmarking procedure for companies wishing to develop measures for software quality attributes of software artefacts. The procedure does not require that a proposed measure is a consistent measure of a quality attribute. It requires only that the measure shows agreement most of the time. The procedure provides summary statistics for measures of quality attributes of a software artefact. These statistics can be used to benchmark subjective direct measurement of a quality attribute by a company's software developers. Each proposed measure is expressed as a set of error rates for measurement on an ordinal scale and these error rates enable simple benchmarking statistics to be derived. The statistics can also be derived for any proposed objective indirect measure or prediction system for the quality attribute. For an objective measure or prediction system to be of value to the company it must be 'better' or 'more objective' than the organisation's current measurement or prediction capability; and thus confidence that the benchmark's objectivity has been surpassed must be demonstrated. By using Bayesian statistical inference, the paper shows how to decide whether a new measure should be considered 'more objective' or whether a prediction system's predictive capability can be considered 'better' than the current benchmark. Furthermore, the Bayesian inferential approach is easy to use and provides clear advantages for quantifying and inferring differences in objectivity.
C1 Univ Sunderland, Sch Comp & Technol, Sunderland, Durham, England.
C3 University of Sunderland
RP Moses, J (corresponding author), Univ Sunderland, Sch Comp & Technol, Sunderland, Durham, England.
EM John.Moses@sund.ac.uk
CR Altman DG., 1996, PRACTICAL STAT MED R, V7th
   [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 1996, Bugs 0.5: Bayesian inference using Gibbs sampling, manual (version ii)
   *CMMI, 2001, TEAM CAP MAT MOD INT
   Dawid A. P., 1979, J ROY STAT SOC C, V28, P20, DOI DOI 10.2307/2346806
   Fenton N, 2002, IEEE SOFTWARE, V19, P116, DOI 10.1109/MS.2002.1020298
   FENTON N, 1994, IEEE T SOFTWARE ENG, V20, P199, DOI 10.1109/32.268921
   Fenton NE, 1998, IEEE T SOFTWARE ENG, V24, P1002, DOI 10.1109/32.730547
   Gelman A., 1998, Bayesian data analysis
   Khoshgoftaar TM, 2005, EMPIR SOFTW ENG, V10, P183, DOI 10.1007/s10664-004-6191-x
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   Kitchenharn B., 2003, Software Engineering Notes, V28, P24, DOI 10.1145/638750.638758
   Kyburg HenryE., 1984, THEORY MEASUREMENT
   LINDLEY DV, 2000, STATISTICIAN, V49, P293, DOI DOI 10.1111/1467-9884.00238
   Moses J, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P112, DOI 10.1109/METRIC.2001.915520
   Moses J, 2000, INFORM SOFTWARE TECH, V42, P533, DOI 10.1016/S0950-5849(00)00097-5
   ROBERTS FS, 1979, MEASUREMENT THEORY E, V7
   SHEPPERD M, 1990, INFORM SOFTWARE TECH, V32, P311, DOI 10.1016/0950-5849(90)90065-Y
   SMITH JQ, 1992, DECISION ANAL BAYESI
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   Yourdon E., 1979, STRUCTURED DESIGN
   [No title captured]
NR 23
TC 6
Z9 8
U1 1
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2007
VL 15
IS 4
BP 449
EP 462
DI 10.1007/s11219-007-9025-4
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 232EK
UT WOS:000251000900007
DA 2024-07-18
ER

PT J
AU Issac, G
   Rajendran, C
   Anantharaman, RN
AF Issac, George
   Rajendran, Chandrasekharan
   Anantharaman, R. N.
TI An instrument for the measurement of customer perceptions of quality
   management in the software industry: An empirical study in India
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE quality management; software industry; customer's perception;
   instrument; critical factors; empirical study; confirmatory factor
   analysis
ID IMPLEMENTATION FACTORS; PERFORMANCE; TQM; IMPROVEMENT; VALIDITY
AB Most of the available literature on quality management is based on management's perception; few studies examine critical issues of quality management from the customer's perspective, especially in the software industry. In order to gain an insight into what customers expect from a product/service, an analysis of quality management from customer's point of view is essential. Such an understanding would help the managers to adopt strategies that can enhance the satisfaction level of their customers. The present study highlights the critical factors of quality management in the software industry from the customer's perspective. Six critical factors are identified: and an instrument, comprising these factors, is developed and validated so as to measure the customer's perception of quality management in the software industry.
C1 Indian Inst Technol, Dept Management Studies, Madras 600036, Tamil Nadu, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Madras
RP Rajendran, C (corresponding author), Indian Inst Technol, Dept Management Studies, Madras 600036, Tamil Nadu, India.
EM craj@iitm.ac.in
OI Rajendran, Chandrasekharan/0000-0001-6252-6217
CR Adam EE, 2001, INT J PROD RES, V39, P43, DOI 10.1080/00207540150208853
   Ahire SL, 1996, DECISION SCI, V27, P23, DOI 10.1111/j.1540-5915.1996.tb00842.x
   Alkhafaji AF, 1998, INT J TECHNOL MANAGE, V16, P383, DOI 10.1504/IJTM.1998.002665
   [Anonymous], 1986, OUT CRISIS
   [Anonymous], J QUALITY ASSURANCE
   [Anonymous], INDIAN MANAGEMENT
   [Anonymous], 1994, STRUCTURAL EQUATION
   Ashrafi N, 1998, INT J TECHNOL MANAGE, V16, P532, DOI 10.1504/IJTM.1998.002666
   Bahrami H, 1997, HUM RESOURCE MANAGE, V36, P23
   Basili VR, 1996, COMMUN ACM, V39, P104, DOI 10.1145/236156.236184
   Ben-Menachem M., 1997, Software Quality: Producing Practical, Consistent Software, Slaying the Software Dragon Series
   BENTLER PM, 1980, PSYCHOL BULL, V88, P588, DOI 10.1037/0033-2909.107.2.238
   Bhattacharya TK, 1998, INT J TECHNOL MANAGE, V16, P520, DOI 10.1504/IJTM.1998.002667
   Black SA, 1996, DECISION SCI, V27, P1, DOI 10.1111/j.1540-5915.1996.tb00841.x
   Black W., 1998, Multivariate data analysis: With readings
   BOEHM BW, 1991, IEEE SOFTWARE, V8, P32, DOI 10.1109/52.62930
   Bohrnstedt G.W., 1983, HDB SURVEY RES
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Bunse C, 1998, AUTOMATICA, V34, P23, DOI 10.1016/S0005-1098(97)00161-1
   Carmichael H, 1996, QUANTUM SEMICL OPT, V8, P47
   Carroll J., 1996, INFORM TECHNOLOGY PE, V8, P36
   Cronbach LJ, 1951, PSYCHOMETRIKA, V16, P297
   Curtis B., 1995, PEOPLE CAPABILITY MA
   *DAT QUEST IT, 2001, DATA QUEST, V19
   Fenton NE., 1991, Software Metrics: A Rigorous Approach
   Flynn B. B., 1994, Journal of Operations Management, V11, P339, DOI 10.1016/S0272-6963(97)90004-8
   Flynn BB, 2001, J OPER MANAG, V19, P617, DOI 10.1016/S0272-6963(01)00072-9
   Gillies A., 1992, Software quality: Theory and management
   Glass R.I., 1990, MEASURING SOFTWARE D
   GRADY RB, 1993, COMMUN ACM, V36, P62, DOI 10.1145/163359.163369
   GRONROOS C, 1988, REV BUSINESS, V9, P1
   Harter DE, 2000, MANAGE SCI, V46, P451, DOI 10.1287/mnsc.46.4.451.12056
   Jalote P., 2000, CMM PRACTICE
   Jones CR, 1998, INT J TECHNOL MANAGE, V16, P494, DOI 10.1504/IJTM.1998.002675
   Jorgensen M, 1999, ADV ENG SOFTW, V30, P907, DOI 10.1016/S0965-9978(99)00015-0
   Kanji GK., 1990, Total Quality Management, V1, P3, DOI DOI 10.1080/09544129000000001
   Kaplan R.M., 1993, PSYCHOL TESTING PRIN, V3rd
   Kitchenham B, 1996, IEEE SOFTWARE, V13, P12, DOI 10.1109/52.476281
   McCall J.A., 1977, US Rome Air Development Center Reports, VI
   Nunnally JC, 1978, PSYCHOMETRIC THEORY
   PARASURAMAN A, 1988, J RETAILING, V64, P12
   Parzinger MJ, 1998, SOFTWARE QUAL J, V7, P239, DOI 10.1023/A:1008931305952
   Parzinger MJ, 2000, TOTAL QUAL MANAGE, V11, P353, DOI 10.1080/0954412006874
   PETER JP, 1981, J MARKETING RES, V18, P133, DOI 10.2307/3150948
   PORTER AA, 1997, SPRINGER SCI BUSINES, V2, P119
   Porter L.J., 1993, Total Quality Management, V4, P13
   POWELL TC, 1995, STRATEGIC MANAGE J, V16, P15, DOI 10.1002/smj.4250160105
   RASCH RH, 1992, MIS QUART, V16, P395, DOI 10.2307/249535
   ROCKART JF, 1992, SLOAN MANAGE REV, V33, P21
   Rust RT, 1999, INTERFACES, V29, P62, DOI 10.1287/inte.29.2.62
   SARAPH JV, 1989, DECISION SCI, V20, P810, DOI 10.1111/j.1540-5915.1989.tb01421.x
   Sigala M., 2004, Managing Service Quality, V14, P103, DOI [DOI 10.1108/09604520410513703, 10.1108/09604520410513703]
   STOLTERMAN E, 1991, SCANDINAVIAN J INFOR, V37, P82
   Sureshchandar G.S., 2002, J SERV MARK, V16, P9, DOI 10.1108/08876040210419398
   TEAS KR, 1993, J MARKETING      OCT, P18
   Vijaybhaskar M., 2001, Indian Journal of Economics, V44, P39
   Vitharana P, 1998, ASSOCIATION FOR INFORMATION SYSTEMS PROCEEDINGS OF THE AMERICAS CONFERENCE ON INFORMATION SYSTEMS, P906
   von Hellens LA, 1997, INFORM SOFTWARE TECH, V39, P801, DOI 10.1016/S0950-5849(97)00038-4
   Wynekoop J. L., 2000, Information Technology & People, V13, P186, DOI 10.1108/09593840010377626
   Xenos M, 1997, INFORM SOFTWARE TECH, V39, P417, DOI 10.1016/S0950-5849(96)01154-8
   Yang YH, 2001, IND MANAGE DATA SYST, V101, P329, DOI 10.1108/EUM0000000005821
   Zairi M, 1998, INT J TECHNOL MANAGE, V16, P291, DOI 10.1504/IJTM.1998.002684
   Zeithaml V.A., 1993, J ACAD MARKET SCI, V21, P1, DOI [10.1177/0092070393211001, DOI 10.1177/0092070393211001]
NR 63
TC 28
Z9 35
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2006
VL 14
IS 4
BP 291
EP 308
DI 10.1007/s11219-006-0037-2
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 093JA
UT WOS:000241163400003
DA 2024-07-18
ER

PT J
AU Berki, E
   Georgiadou, E
   Holcombe, M
AF Berki, E
   Georgiadou, E
   Holcombe, M
TI Requirements engineering and process modelling in software quality
   management - Towards a generic process metamodel
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article; Proceedings Paper
CT SQM 2003 Conference
CY 2003
CL Atlanta Beach, NC
SP SQM
DE process metamodelling; method engineering; evaluation; stakeholders;
   software quality; requirements engineering
AB This paper examines the concept of Quality in Software Engineering, its different contexts and its different meanings to various people. It begins with a commentary on quality issues for systems development and various stakeholders' involvement. It revisits aspects and concepts of systems development methods and highlights the relevance of quality issues to the choice of a process model. A summarised review of some families of methods is presented, where their application domain, lifecycle coverage, strengths and weaknesses are considered. Under the new development era the requirements of software development change; the role of methods and stakeholders change, too. The paper refers to the latest developments in the area of software engineering and emphasises the shift from traditional conceptual modelling to requirements engineering and process metamodelling principles. We provide support for an emerging discipline in the form of a software process metamodel to cover new issues for software quality and process improvement. The widening of the horizons of software engineering both as a 'communication tool' and as a 'scientific discipline' (and not as a 'craft') is needed in order to support both communicative and scientific quality systems properties. In general, we can consider such a discipline as a thinking tool for understanding the generic process and as the origin of combining intuition and quality engineering to transform requirements to adequate human-centred information systems. We conclude with a schematic representation of a Generic Process Metamodel (GPM) indicating facets contributed by Software Engineering, Computer Science, Information Systems, Mathematics, Linguistics, Sociology and Anthropology. Ongoing research and development issues have provided evidence for influence from even more diverse disciplines.
C1 Univ Jyvaskyla, Dept Comp Sci & Informat Syst, FIN-40014 Jyvaskyla, Finland.
   Middlesex Univ, Sch Comp Sci, London N14 4YZ, England.
   Univ Sheffield, Fac Engn, Sheffield S1 4DP, S Yorkshire, England.
C3 University of Jyvaskyla; Middlesex University; University of Sheffield
RP Berki, E (corresponding author), Univ Jyvaskyla, Dept Comp Sci & Informat Syst, Mattilanniemi Campus,AGORA Bldg, FIN-40014 Jyvaskyla, Finland.
EM eleni.berki@cc.jyu.fi; e.georgiadou@mdx.ac.uk; m.holcombe@dcs.shef.ac.uk
CR Allen Paul., 1998, Component-based development for enterprise systems: Applying the SE- LECT Perspective
   ANDRIOLE SJ, 1993, SOFTWARE ENG J, V8
   [Anonymous], YOURDON PRESS COMPUT
   ARMENISE P, 1993, INT J SOFTW ENG KNOW, V3, P410
   AVISON DE, 1995, INFORMATION SYSTEMS
   BERKI E, 2003, P HUM COMP INT HCI I
   BERKI E, 1997, P INT S SOFTW ENG U
   Berki E., 1998, P 12 INT C ISR SOC Q
   BERKI E, 2001, THESIS U N LONDON
   BERKI E, 1999, SYSTEMS DEV METHOD E
   BERKMAN E, 2001, IN PRESS DARWIN  APR
   BUBENKO JA, 1995, IEEE RE 95 2 IEEE IN
   *CCTA, 1994, EUR OV
   Checkland P.Scholes., 1990, SOFT SYSTEMS METHODO
   CROSS R, 2003, SOCIAL SIDE PERFORMA
   Crystal D., 1987, The Cambridge encyclopedia of language
   DORLING A, 1993, INFORM SOFTWARE TECH, V35, P404, DOI 10.1016/0950-5849(93)90011-Q
   Geert H., 1991, Cultures and organizations: Software of the mind
   GEORGIADOU E, 1995, 3 INT C SQM SEV SPAI, V2, P35
   GEORGIADOU E, 2001, SOFTWARE MEASUREMENT
   GRAHAM I., 1991, OBJECT ORIENTED METH
   HIRSCHEIM R, 2000, COMP 5 ALTERNATIVE A
   Hoffer J.A., 1996, MODERN SYSTEMS ANAL
   HOLCOMBE M, 2000, P GRAMM SYST 2000, P343
   HOLCOMBE M, 2001, P 2 INT C EXTR PROGR, P109
   INCE D, 1995, SOFTWARE QUALITY ASS
   JACKSON M, 1994, SOFTWARE ENG J
   Jarke M, 1994, SOFTWARE ENG J
   Jayaratna N., 1994, Understanding and Evaluating Methodologies
   JENKINS T, 1994, DATA MANAGEMENT B, V11
   Kelly S, 1996, LECT NOTES COMPUT SC, V1080, P1
   KOPETZ H, 1979, SOFTWARE RELIABILITY
   KOSKINEN M, 2000, JYVASKYLA STUDIES CO, V77
   Larman C, 2004, AGILE SOFTWARE DEV S
   MARTIN J, 1981, INFORMATION ENG, V1
   MARTIN J, 1981, INFORMATION ENG, V2
   MARTTIIN P, 1993, INFORM MANAGE, V25, P11, DOI 10.1016/0378-7206(93)90022-L
   MUKAROVSKY, 1978, PLACE AESTHETIC FUNC
   Mumford E., 1979, COMPUTER SYSTEMS WOR
   Musa J. D., 1987, Software Reliability: Measure-ment, Prediction, Application
   MYERS GJ, 1976, SOFTWARE RELIABILITY
   PAULK MC, 1993, IEEE SOFTWARE, V10, P18, DOI 10.1109/52.219617
   PFLEEGER LS, 1998, SOFTWARE ENG THEORY
   Pressman R.S., 1994, SOFTWARE ENG PRACTIT, VEuropean
   ROLLAND C, 1995, INFORM SYST, V20, P337, DOI 10.1016/0306-4379(95)00018-Y
   SADLER C, 1996, SOFTWARE ENG NOTES, V21
   SAUNDERS B, 1999, P BCS INSPIRE 4 C TR, P193
   SETLIFF DE, 1992, IEEE T SOFTWARE ENG, V18
   SIAKAS K, 1997, WORLD C TOT QUAL MAN
   SKYRME DJ, 1996, HYBRID MANAGER, P436
   Sommerville I., 1992, SOFTWARE ENG, V4th
   SORENSON PG, 1988, IEEE SOFTWARE, V30, P30
   Stapleton J., 1997, DYNAMIC SYSTEMS DEV
   *TAP, 1998, LANG ENG PROGR PROSP
   TEASLEYMYNATT B, 1989, SOFTWARE ENG STUDENT
   *UML PARTN, 1997, UN MOD LANG VERS 1 0
   Ward PaulT., 1985, STRUCTURED DEV REAL
   WOODHARPER AT, 1985, INFORMATION SYSTEMS
   YOURDON E, 1997, MODERN STRUCTURED AN
NR 59
TC 9
Z9 10
U1 1
U2 11
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2004
VL 12
IS 3
BP 265
EP 283
DI 10.1023/B:SQJO.0000034711.87241.f0
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 837EQ
UT WOS:000222611600005
DA 2024-07-18
ER

PT J
AU Minhas, NM
   Irshad, M
   Petersen, K
   Börstler, J
AF Minhas, Nasir Mehmood
   Irshad, Mohsin
   Petersen, Kai
   Borstler, Jurgen
TI Lessons learned from replicating a study on information-retrieval-based
   test case prioritization
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Replication; Regression testing; Technique; Test case prioritization;
   Information retrieval; SIR
ID SELECTION; MUTATION; SERIES
AB Replication studies help solidify and extend knowledge by evaluating previous studies' findings. Software engineering literature showed that too few replications are conducted focusing on software artifacts without the involvement of humans. This study aims to replicate an artifact-based study on software testing to address the gap related to replications. In this investigation, we focus on (i) providing a step-by-step guide of the replication, reflecting on challenges when replicating artifact-based testing research and (ii) evaluating the replicated study concerning the validity and robustness of the findings. We replicate a test case prioritization technique proposed by Kwon et al. We replicated the original study using six software programs, four from the original study and two additional software programs. We automated the steps of the original study using a Jupyter notebook to support future replications. Various general factors facilitating replications are identified, such as (1) the importance of documentation; (2) the need for assistance from the original authors; (3) issues in the maintenance of open-source repositories (e.g., concerning needed software dependencies, versioning); and (4) availability of scripts. We also noted observations specific to the study and its context, such as insights from using different mutation tools and strategies for mutant generation. We conclude that the study by Kwon et al. is partially replicable for small software programs and could be automated to facilitate software practitioners, given the availability of required information. However, it is hard to implement the technique for large software programs with the current guidelines. Based on lessons learned, we suggest that the authors of original studies need to publish their data and experimental setup to support the external replications.
C1 [Minhas, Nasir Mehmood; Petersen, Kai; Borstler, Jurgen] Blekinge Inst Technol, Karlskrona, Sweden.
   [Minhas, Nasir Mehmood] Maalrdalen Univ, Vasteras, Sweden.
   [Irshad, Mohsin] Ericsson Sweden AB, Karlskrona, Sweden.
   [Petersen, Kai] Univ Appl Sci Flensburg, Flensburg, Germany.
C3 Blekinge Institute Technology
RP Minhas, NM (corresponding author), Blekinge Inst Technol, Karlskrona, Sweden.; Minhas, NM (corresponding author), Maalrdalen Univ, Vasteras, Sweden.
EM nasir.mehmood.minhas@bth.se; mohsin.irshad@ericsson.com;
   kai.petersen@bth.se; jurgen.borstler@bth.se
FU Blekinge Institute of Technology; ELLIIT: the Swedish Strategic Research
   Area in IT and Mobile Communications
FX Open access funding provided by Blekinge Institute of Technology. This
   work has in parts been supported by ELLIIT: the Swedish Strategic
   Research Area in IT and Mobile Communications.
CR Ali N. B., 2019, EMPIR SOFTW ENG, P1
   Amati G., 2009, INFORM RETRIEVAL MOD, P1523, DOI [10.1007/978-1-4614-8265-9_916, DOI 10.1007/978-1-4614-8265-9_916]
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   Bajaj A, 2019, IEEE ACCESS, V7, P126355, DOI 10.1109/ACCESS.2019.2938260
   Bezerra RMM, 2015, INT SYMP EMP SOFTWAR, P132, DOI 10.1109/ESEM.2015.7321213
   Carver J.C., 2010, 1 INT WORKSHOP REPLI, P1
   Catal C., 2012, P 2 INT WORKSH EV AS, P9, DOI DOI 10.1145/2372233.2372238
   Catal C, 2013, SOFTWARE QUAL J, V21, P445, DOI 10.1007/s11219-012-9181-z
   Chen ZY, 2018, INFORM SOFTWARE TECH, V103, P174, DOI 10.1016/j.infsof.2018.07.003
   Chi JL, 2020, J SYST SOFTWARE, V163, DOI 10.1016/j.jss.2020.110539
   da Silva FQB, 2014, EMPIR SOFTW ENG, V19, P501, DOI 10.1007/s10664-012-9227-7
   Dahiya O., 2018, INT J ENG TECHNOL, V7, P2184, DOI [10.14419/ijet.v7i4.15805, DOI 10.14419/IJET.V7I4.15805]
   de Magalhaes CVC, 2015, INFORM SOFTWARE TECH, V64, P76, DOI 10.1016/j.infsof.2015.02.001
   Do HS, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P113
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Do H, 2006, IEEE T SOFTWARE ENG, V32, P733, DOI 10.1109/TSE.2006.92
   Do H, 2010, IEEE T SOFTWARE ENG, V36, P593, DOI 10.1109/TSE.2010.58
   du Prel JB, 2009, DTSCH ARZTEBL INT, V106, P335, DOI 10.3238/arztebl.2009.0335
   Ekelund ED, 2015, PROC IEEE INT CONF S, P449, DOI 10.1109/ICSM.2015.7332496
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Engström E, 2010, LECT NOTES COMPUT SC, V6156, P3, DOI 10.1007/978-3-642-13792-1_3
   Engström E, 2010, INFORM SOFTWARE TECH, V52, P14, DOI 10.1016/j.infsof.2009.07.001
   Felderer M, 2015, INT J SOFTW TOOLS TE, V17, P305, DOI 10.1007/s10009-015-0365-2
   Gibbons J. D., 1993, LOCATION TESTS SINGL
   Harrold MJ, 2008, 2008 FRONTIERS OF SOFTWARE MAINTENANCE, P99, DOI 10.1109/FOSM.2008.4659253
   Hasnain Muhammad, 2019, The International Journal of Internet, Broadcasting and Communication, V11, P1, DOI 10.7236/IJIBC.2019.11.2.1
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hui Fang, 2004, Proceedings of Sheffield SIGIR 2004. The Twenty-Seventh Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P49
   ISO/IEC/IEEE, 2017, INT STANDARD SYSTEMS, P1, DOI [10.1109/IEEESTD.2017.8016712, DOI 10.1109/IEEESTD.2017.8016712]
   Ivarsson M, 2011, EMPIR SOFTW ENG, V16, P365, DOI 10.1007/s10664-010-9146-4
   Jung-Hyun Kwon, 2014, 2014 21st Asia-Pacific Software Engineering Conference (APSEC), P19, DOI 10.1109/APSEC.2014.12
   Juristo N, 2012, LECT NOTES COMPUT SC, V7007, P60
   Just R., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P612, DOI 10.1109/ASE.2011.6100138
   Just R., 2014, P 2014 INT S SOFTW T, P433
   Kazmi R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3057269
   Khatibsyarbini M, 2018, INFORM SOFTWARE TECH, V93, P74, DOI 10.1016/j.infsof.2017.08.014
   Krein J.L., 2010, International Workshop on Replication in Empirical Software Engineering Research, P1
   Legunsen O, 2017, IEEE INT CONF AUTOM, P949, DOI 10.1109/ASE.2017.8115710
   Legunsen O, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P583, DOI 10.1145/295029.2950361
   Minhas NM, 2020, INFORM SOFTWARE TECH, V120, DOI 10.1016/j.infsof.2019.106254
   Minhas NM, 2017, 2017 24TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE WORKSHOPS (APSECW), P25, DOI 10.1109/APSECW.2017.23
   Ouriques JFS, 2018, SOFTWARE QUAL J, V26, P1451, DOI 10.1007/s11219-017-9398-y
   Pan RQ, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-021-10066-6
   Pannu M., 2014, W CANADIAN C COMPUTI, P1, DOI DOI 10.1145/2597959.2597978
   Peng Q., 2020, P 29 ACM SIGSOFT INT, P324, DOI DOI 10.1145/3395363.3397383
   Pittelkow MM, 2021, CLIN PSYCHOL-SCI PR, V28, P210, DOI 10.1037/cps0000013
   Lima JAP, 2020, INFORM SOFTWARE TECH, V121, DOI 10.1016/j.infsof.2020.106268
   Qiu D, 2015, ACM COMPUT SURV, V47, DOI 10.1145/2631685
   Rainer A., 2008, INT C EV ASS SOFTW E, P78
   Rainer A., 2005, P ACM WORKSH REAL EV, P1, DOI [10.1145/1082983.1083177, DOI 10.1145/1082983.1083177]
   Roelleke T., 2013, Synthesis Lectures on Information Concepts, Retrieval, and Services, V5, P1, DOI DOI 10.2200/S00494ED1V01Y201304ICR027
   Rosero RH, 2016, INT J SOFTW ENG KNOW, V26, P675, DOI 10.1142/S0218194016300013
   Saha RK, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P268, DOI 10.1109/ICSE.2015.47
   Shepperd M, 2018, INFORM SOFTWARE TECH, V99, P120, DOI 10.1016/j.infsof.2018.01.006
   Shull FJ, 2008, EMPIR SOFTW ENG, V13, P211, DOI 10.1007/s10664-008-9060-1
   Singh Y, 2012, INFORM-J COMPUT INFO, V36, P379
   WILLIAMSON DF, 1989, ANN INTERN MED, V110, P916, DOI 10.7326/0003-4819-110-11-916
   Yadla S, 2005, INNOV SYST SOFTW ENG, V1, P116, DOI 10.1007/s11334-005-0011-3
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yu TT, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P48, DOI 10.1145/2568225.2568294
   Zarrad Anis, 2015, Journal of Software, V10, P971, DOI 10.17706/jsw.10.8.971-990
   Zhang LM, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P199, DOI 10.1145/3180155.3180198
NR 62
TC 0
Z9 0
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2023
VL 31
IS 4
BP 1527
EP 1559
DI 10.1007/s11219-023-09650-4
EA OCT 2023
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GW7B8
UT WOS:001084224100001
OA hybrid
DA 2024-07-18
ER

PT J
AU Leotta, M
   Paparella, D
   Ricca, F
AF Leotta, Maurizio
   Paparella, Davide
   Ricca, Filippo
TI Mutta: a novel tool for E2E web mutation testing
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mutation testing; End-to-end web testing; Web application; Selenium
   WebDriver; Recheck; Assertions
AB Mutation testing is an important technique able to evaluate the bug-detection effectiveness of existing software test suites. Mutation testing tools exist for several languages, e.g., Java and JavaScript, but no solutions are available for managing the mutation testing process for entire web applications, in the context of end-to-end (E2E) web testing. In this paper, we propose Mutta, a novel tool able to automate the entire mutation testing process. Mutta mutates the various server source files of the target web application, runs the E2E test suite against the mutated web applications, and finally collects the test outcomes. To evaluate Mutta, we designed a case study using the mutated versions of the target web application with the aim of comparing the effectiveness of two different approaches to E2E web testing: (1) test cases based on classical assertions and (2) test cases relying on differential testing. In detail, Mutta has been executed on two web applications, each equipped with different test suites to compare assertions with differential testing. In this scenario, Mutta generated a large number of mutants (more than 15k overall), took into account the coverage information to consider only the mutants actually executed, deployed the mutated web app, ran the entire E2E test suites (about 87k tests runs overall), and finally, it correctly saved the test suite results. Thus, results of the case study show that Mutta can be successfully employed to automate the entire mutation testing process of E2E web test suites and, therefore, can be used in practice to evaluate the effectiveness of different test suites (e.g., based on different techniques, E2E frameworks, or composed by a different number of test scripts).
C1 [Leotta, Maurizio; Paparella, Davide; Ricca, Filippo] Univ Genoa, Dipartimento Informat Bioingn Robot & Ingn Sistemi, Genoa, Italy.
C3 University of Genoa
RP Leotta, M (corresponding author), Univ Genoa, Dipartimento Informat Bioingn Robot & Ingn Sistemi, Genoa, Italy.
EM maurizio.leotta@unige.it
RI Leotta, Maurizio/I-8145-2014
OI Leotta, Maurizio/0000-0001-5267-0602
FU Universita degli Studi di Genova
FX Open access funding provided by Universita degli Studi di Genova within
   the CRUI-CARE Agreement.
CR Cerioli M, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P1586, DOI 10.1145/3341105.3373961
   Coles H., 2016, P 25 INT S SOFTWARE, P449
   Deng L, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS), P86, DOI 10.1109/QRS.2017.19
   García B, 2020, ELECTRONICS-SWITZ, V9, DOI 10.3390/electronics9071067
   Gulzar MA, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P71, DOI 10.1109/ICSE-SEIP.2019.00016
   Habibi E, 2015, INFORM SOFTWARE TECH, V67, P159, DOI 10.1016/j.infsof.2015.07.003
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hollweck T, 2015, CAN J PROGRAM EVAL, V30, P108, DOI 10.3138/cjpe.30.1.108
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Kochhar PS, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P560, DOI 10.1109/SANER.2015.7081877
   Laurent T, 2017, IEEE INT CONF SOFTW, P430, DOI 10.1109/ICST.2017.47
   Leotta M, 2022, COMM COM INF SC, V1621, P108, DOI 10.1007/978-3-031-14179-9_8
   Leotta M, 2022, COMM COM INF SC, V1621, P77, DOI 10.1007/978-3-031-14179-9_6
   Leotta M, 2016, ADV COMPUT, V101, P193, DOI 10.1016/bs.adcom.2015.11.007
   Leotta M, 2014, LECT NOTES COMPUT SC, V8541, P322, DOI 10.1007/978-3-319-08245-5_19
   Leotta M, 2013, WORK CONF REVERSE EN, P272, DOI 10.1109/WCRE.2013.6671302
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Mirshokraie S, 2015, IEEE T SOFTWARE ENG, V41, P429, DOI 10.1109/TSE.2014.2371458
   Moran K, 2018, PROC IEEE ACM INT C, P33, DOI 10.1145/3183440.3183492
   Offutt AJ, 2001, KLUW INT S ADV DATA, V24, P34
   Olianas D, 2022, SOFTWARE QUAL J, V30, P1089, DOI 10.1007/s11219-022-09596-z
   Olianas D, 2021, IEEE INT CONF SOFTW, P460, DOI 10.1109/ICST49551.2021.00060
   Papadakis M, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P537, DOI 10.1145/3180155.3180183
   Petrovic G, 2022, IEEE T SOFTWARE ENG, V48, P3900, DOI 10.1109/TSE.2021.3107634
   Praphamontripong Upsorn, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P132, DOI 10.1109/ICSTW.2010.38
   Praphamontripong U, 2016, IEEE ICST WORKSHOP, P102, DOI 10.1109/ICSTW.2016.17
   Project S., 2021, SEL WEBDR DOC
   Rodríguez-Baquero D, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P372, DOI 10.1145/3213846.3229504
   Runeson Per, 2012, Case study research in software engineering: Guidelines and examples
   Unadkat J., 2021, SELENIUM WEBDRIVER T
NR 30
TC 1
Z9 1
U1 0
U2 0
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD MAR
PY 2024
VL 32
IS 1
BP 5
EP 26
DI 10.1007/s11219-023-09616-6
EA APR 2023
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK4A2
UT WOS:000970698300001
OA hybrid
DA 2024-07-18
ER

PT J
AU Varshney, K
   Ujjwal, RL
AF Varshney, Karishma
   Ujjwal, R. L.
TI Novel framework for secured bulk creation of virtual machine in IaaS
   platform
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Infrastructure-as-a-service; Security; Cloud computing; Virtualization;
   Amazon elastic beanstalk; Google cloud engine; Microsoft azure virtual
   machine scale set; Virtual machine
AB Cloud service providers (CSPs) like Amazon Web Services, Google Engine, and Microsoft Azure have the major share in providing cloud-related services globally. Their user-friendly approach to provide Infrastructure, Platform, and Software-as-a-Service encourages many industries to switch to virtual mode with high availability, low maintenance, and deployment cost using cloud computing. In this paper, the main focus is on infrastructure-related services. For hosting the web applications, a user requires a virtual machine using the Infrastructure-as-a-Service model of CSPs. The creation of a single instance on servers is effortless. But the process of creating more than 100 machines, deploying one at a time, can be time-consuming, tedious, and error-prone. Though many CSPs have already included services for the creation and management of multiple virtual machines, a novel model named Secure Virtual Infrastructure Model (SViM) is proposed to enhance the service quality, accessibility, and usability of the IaaS cloud. It can add functionality to the existing process of creating multiple virtual machines by CSPs. In this model, a new cryptography technique is also proposed to exchange data between client and virtual servers. For the implementation of the proposed framework, a cloud simulator, Cloudsim, is used.
C1 [Varshney, Karishma; Ujjwal, R. L.] Guru Gobind Singh Indraprastha Univ, USICT, Sect 16-C, New Delhi 110078, India.
C3 GGS Indraprastha University
RP Varshney, K (corresponding author), Guru Gobind Singh Indraprastha Univ, USICT, Sect 16-C, New Delhi 110078, India.
EM karishma.varshney2990@gmail.com; ujjwal@ipu.ac.in
OI varshney, Karishma/0000-0002-5440-0371
CR Anderson J, 2017, IEEE MILIT COMMUN C, P876, DOI 10.1109/MILCOM.2017.8170772
   Aneri Parikh, 2017, IOP Conference Series: Materials Science and Engineering, V263, DOI 10.1088/1757-899X/263/4/042016
   Baldassarre MT, 2020, SOFTWARE QUAL J, V28, P987, DOI 10.1007/s11219-020-09501-6
   Banisakher M, 2018, UKSIM INT CONF COMP, P114, DOI 10.1109/UKSim.2018.00032
   Caballer M, 2015, J GRID COMPUT, V13, P53, DOI 10.1007/s10723-014-9296-5
   Churi, 2019, INT J RECENT TECHNOL, V8, P6230
   Dildar MS, 2017, 2017 2ND INTERNATIONAL CONFERENCE ON ANTI-CYBER CRIMES (ICACC), P154, DOI 10.1109/Anti-Cybercrime.2017.7905282
   Guan XJ, 2017, IEEE COMMUN LETT, V21, P504, DOI 10.1109/LCOMM.2016.2644658
   Hussain Syed Asad, 2017, Applied Computing and Informatics, V13, P57, DOI 10.1016/j.aci.2016.03.001
   Islam Tahira, 2017, 2017 International Conference on the Frontiers and Advances in Data Science (FADS). Proceedings, P130, DOI 10.1109/FADS.2017.8253211
   Domínguez-Mayo FJ, 2015, SOFTWARE QUAL J, V23, P595, DOI 10.1007/s11219-014-9248-0
   López J, 2019, SOFTWARE QUAL J, V27, P731, DOI 10.1007/s11219-018-9420-z
   Maniah, 2019, PROCEDIA COMPUT SCI, V161, P1325, DOI 10.1016/j.procs.2019.11.248
   Mell P, 2010, COMMUN ACM, V53, P50
   Nwe KM, 2018, IEEE GLOB CONF CONSU, P419, DOI 10.1109/GCCE.2018.8574804
   Pierleoni P, 2020, IEEE ACCESS, V8, P5455, DOI 10.1109/ACCESS.2019.2961511
   Puri S., 2017, P INT C EN COMM DAT
   Ren JC, 2016, P IEEE I C SERV COMP, P804, DOI 10.1109/SCC.2016.111
   RIVEST RL, 1978, COMMUN ACM, V21, P120, DOI [10.1145/359340.359342, 10.1145/357980.358017]
   Serrano N, 2015, IEEE SOFTWARE, V32, P30, DOI 10.1109/MS.2015.43
   Sollfrank M, 2021, IEEE T IND INFORM, V17, P3566, DOI 10.1109/TII.2020.3022843
   Sultan S, 2019, IEEE ACCESS, V7, P52976, DOI 10.1109/ACCESS.2019.2911732
   Suraj A. R., 2018, 2018 International Conference on Computation of Power, Energy, Information and Communication (ICCPEIC), P018, DOI 10.1109/ICCPEIC.2018.8525141
   Torquato M, 2020, SOFTWARE QUAL J, V28, P59, DOI 10.1007/s11219-019-09474-1
   Urias VE, 2018, INT CARN CONF SECU, P6, DOI 10.1109/THS.2018.8574141
   Vennela GS, 2018, PROCEEDINGS OF THE 2018 SECOND INTERNATIONAL CONFERENCE ON INVENTIVE COMMUNICATION AND COMPUTATIONAL TECHNOLOGIES (ICICCT), P273, DOI 10.1109/ICICCT.2018.8473148
   Wang R, 2020, SOFTWARE QUAL J, V28, P1379, DOI 10.1007/s11219-020-09524-z
   Zykov S, 2016, PROCEDIA COMPUT SCI, V96, P1041, DOI 10.1016/j.procs.2016.08.124
NR 28
TC 0
Z9 0
U1 0
U2 8
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2022
VL 30
IS 2
SI SI
BP 513
EP 549
DI 10.1007/s11219-021-09573-y
EA OCT 2021
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 2L8ZK
UT WOS:000712790900002
DA 2024-07-18
ER

PT J
AU Rocha, M
   Simao, A
   Sousa, T
AF Rocha, Mauricio
   Simao, Adenilso
   Sousa, Thiago
TI Model-based test case generation from UML sequence diagrams using
   extended finite state machines
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model-based testing; Model-driven engineering; Sequence diagram;
   Extended finite state machine; ModelJUnit; JUnit
AB The effectiveness of model-based testing (MBT) is mainly due to its potential for automation. If the model is formal and machine-readable, test cases can be derived automatically. One of the most used formal modeling techniques is the interpretation of a system as an extended finite state machine (EFSM). However, formal models are not a common practice in the industry. The Unified Modeling Language (UML) has become the de facto standard for software modeling. Nevertheless, due to the lack of formal semantics, its diagrams can be given ambiguous interpretations and are not suitable for testing automation. This article introduces a systematic procedure for the generation of tests from UML models that uses concepts of model-driven engineering (MDE) for formalizing UML sequence diagrams into extended finite state machines and providing a precise semantics for them. It also applies ModelJUnit and JUnit libraries for an automatic generation of test cases. A case study was conducted in a real software towards the evaluation of its applicability.
C1 [Rocha, Mauricio; Simao, Adenilso] Univ Sao Paulo, Inst Ciencias Matemat & Comp ICMC, Sao Carlos, SP, Brazil.
   [Sousa, Thiago] Univ Estadual Piaui, Ctr Tecnol & Urbanismo CTU, Teresina, PI, Brazil.
C3 Universidade de Sao Paulo; Universidade Estadual do Piaui (UESPI)
RP Rocha, M (corresponding author), Univ Sao Paulo, Inst Ciencias Matemat & Comp ICMC, Sao Carlos, SP, Brazil.
EM mauriciormrocha@usp.br; adenilso@icmc.usp.br; thiago@ctu.uespi.br
RI Simao, Adenilso S/E-9620-2011
OI Rocha, Mauricio/0000-0002-8457-6474; Carvalho de Sousa,
   Thiago/0000-0002-2056-7771
FU FAPESP [2013/07375-0, 2019/06937-0]
FX The authors are grateful to the anonymous reviewers for their
   helpfulsuggestions. This investigation was partially funded by FAPESP
   (grants 2013/07375-0 and 2019/06937-0).
CR [Anonymous], 2010, MODELJUNIT MODEL BAS
   B?zivin J., 2005, RAPPORT RECHERCHE, V5, P10
   Badurudeen G, 2014, J INFORM TECHNOLOGY, V04, DOI [10.4172/2165-7866.1000128, DOI 10.4172/2165-7866.1000128]
   Brosch Petra, 2012, Tests and Proofs. Proceedings 6th International Conference, TAP 2012, P149, DOI 10.1007/978-3-642-30473-6_12
   Cartaxo EG, 2007, IEEE SYS MAN CYBERN, P2885
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Favre J.M, 2004, 3 WORKSH SOFTW MOD E, P262
   Fondement F, 2013, LECT NOTES COMPUT SC, V8107, P138, DOI 10.1007/978-3-642-41533-3_9
   Gronmo R, 2010, LECT NOTES COMPUT SC, V6142, P93, DOI 10.1007/978-3-642-13688-7_7
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Jino M., 2016, INTRO AO TESTE SOFTW, P39
   Kent S., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P286
   Micskei Z, 2011, SOFTW SYST MODEL, V10, P489, DOI 10.1007/s10270-010-0157-9
   Mosterman P.J, 2012, MODEL BASED TESTING, P147
   OMG, 2015, UNIFIED MODELING LAN
   OMG O.M.G, 2016, MOF META FAC
   Panthi, 2002, P INT C ADV COMP, P277
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   Pressman R.S., 2006, ENGENHARIA SOFTWARE, V6
   Rocha, 2019, 31 INT C SOFTW ENG K, P135, DOI [10.18293/SEKE2019-133, DOI 10.18293/SEKE2019-133]
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Sen S, 2009, LECT NOTES COMPUT SC, V5795, P32, DOI 10.1007/978-3-642-04425-0_4
   SEO Y, 2016, IEEE ACIS 15 INT C C, P1, DOI DOI 10.1109/ICIS.2016.7550832
   Sommerville I., 2007, Engenharia de Software, V8a
   Steinberg D, 2009, EMF ECLIPSE MODELING, V2nd
   Tripathy A., 2013, ADV INTELL SYST, P121
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Wolter U., 2008, AUTOMATIC DEFINITION, P80
   Yang R, 2015, INT J SOFTW ENG KNOW, V25, P633, DOI 10.1142/S0218194015300018
NR 29
TC 10
Z9 13
U1 3
U2 24
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2021
VL 29
IS 3
SI SI
BP 597
EP 627
DI 10.1007/s11219-020-09531-0
EA MAR 2021
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UM3VY
UT WOS:000629891900001
DA 2024-07-18
ER

PT J
AU Dadeau, F
   Gros, JP
   Kouchnarenko, O
AF Dadeau, Frederic
   Gros, Jean-Philippe
   Kouchnarenko, Olga
TI Scen@rist: an approach for verifying self-adaptive systems using runtime
   scenarios
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Self-adaptive systems; Runtime scenarios; Runtime verification;
   Systematic mapping study; Model checking; Message sequence chart
ID QUANTITATIVE VERIFICATION; BEHAVIORAL-MODELS; SEQUENCE CHARTS;
   RECONFIGURATION; VALIDATION; FRAMEWORK; RUN.TIME
AB Traditional runtime quantitative verification approaches for self-adaptive systems usually rely on the use of state-transition models to describe the system behaviour and check property violation at runtime. More recently, some approaches have advocated the use of scenarios as a strategy for representing both the normal and adaptive system behaviour. However, the use of scenarios as a runtime entity that drives the system adaptation is still a challenge since many research issues regarding the use of scenarios to support analysis for enabling self-adjustment at runtime in software systems remain open. The aim of this paper is twofold. Firstly, we investigate the use of scenario-based approaches in self-adaptive systems via a systematic mapping study. Secondly, we introduce Scen@rist, an approach that uses scenarios as runtime entities for verifying self-adaptive systems. The approach consists of monitoring a running self-adaptive system, annotating its scenario-based behaviour specification with the probability of transitions between scenarios, and then verifying whether a set of reachability properties hold. This is performed by translating the scenario-based models and properties in their probabilistic state-based counterparts and applying a model checking technique. The applicability of the proposed tool has been demonstrated by two self-adaptive service-based systems taken from the literature.
C1 [Dadeau, Frederic; Gros, Jean-Philippe; Kouchnarenko, Olga] Univ Bourgogne Franche Comte, CNRS, FEMTO ST Inst, 15B Ave Montboucons, F-25030 Besancon, France.
C3 Universite de Technologie de Belfort-Montbeliard (UTBM); Universite de
   Franche-Comte; Centre National de la Recherche Scientifique (CNRS)
RP Dadeau, F (corresponding author), Univ Bourgogne Franche Comte, CNRS, FEMTO ST Inst, 15B Ave Montboucons, F-25030 Besancon, France.
EM frederic.dadeau@femto-st.fr
OI Kouchnarenko, Olga/0000-0003-1482-9015
CR Abushark Y, 2017, J SYST SOFTWARE, V131, P266, DOI 10.1016/j.jss.2017.05.098
   Ali N, 2017, 2017 INTERNATIONAL CONFERENCE ON COMMUNICATION TECHNOLOGIES (COMTECH), P210, DOI 10.1109/COMTECH.2017.8065776
   Amyot D, 2003, TELECOMMUN SYST, V24, P61, DOI 10.1023/A:1025890110119
   Andersson J., 2010, INT SEMINAR SOFTWARE, P51
   André P, 2017, LECT NOTES COMPUT SC, V10466, P124, DOI 10.1007/978-3-319-66176-6_9
   Aniculaesei A, 2018, PROCEEDINGS 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING FOR AI IN AUTONOMOUS SYSTEMS (SEFAIAS), P23, DOI 10.1145/3194085.3194091
   [Anonymous], 2012, WEB INFORM SYSTEMS E
   [Anonymous], 1999, PROBMIV 98 1 INT WOR
   [Anonymous], 2011, LONDON
   Arcaini P, 2017, ACM T AUTON ADAP SYS, V11, DOI 10.1145/3019598
   ATIR Y., 2007, P 2007 SUMMER COMPUT, P437, DOI [10.5555/1357910, DOI 10.5555/1357910]
   Baresi L, 2007, IET SOFTW, V1, P219, DOI 10.1049/iet-sen:20070027
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bencomo N, 2013, COMPUTING, V95, P167, DOI 10.1007/s00607-012-0224-x
   Berkman-Chardon A, 2016, 2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016), P161, DOI [10.1109/MobileSoft.2016.040, 10.1145/2897073.2897080]
   Blair G, 2009, COMPUTER, V42, P22, DOI 10.1109/MC.2009.326
   Braberman Victor A., 2015, P 1 INT WORKSH CONTR, P9, DOI [10.1145/2804337.2804339, DOI 10.1145/2804337.2804339]
   Brugali D, 2018, 2018 SECOND IEEE INTERNATIONAL CONFERENCE ON ROBOTIC COMPUTING (IRC), P129, DOI 10.1109/IRC.2018.00027
   Buhr R.J. A., 1996, USE CASE MAPS OBJECT
   Calinescu Radu, 2017, Software Engineering for Self-Adaptive Systems III. Assurances. International Seminar. Revised Selected and Invited Papers: LNCS 9640, P223, DOI 10.1007/978-3-319-74183-3_8
   Calinescu R, 2013, IEEE INT CONF AUTOM, P734, DOI 10.1109/ASE.2013.6693145
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Cámara J, 2017, LECT NOTES COMPUT SC, V10475, P3, DOI 10.1007/978-3-319-65831-5_1
   Caporuscio M, 2007, J SYST SOFTWARE, V80, P455, DOI 10.1016/j.jss.2006.07.039
   Carioni A, 2008, LECT NOTES COMPUT SC, V5238, P71
   Castañeda L, 2014, 9TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2014), P49, DOI 10.1145/2593929.2593942
   Chai M, 2014, LECT NOTES COMPUT SC, V8734, P48, DOI 10.1007/978-3-319-11164-3_5
   Cheng Betty H. C., 2014, Models@run.time. Foundations, Applications, and Roadmaps. LNCS: 8378, P101
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Clarke EM, 1999, MODEL CHECKING, P1
   Combes P, 2008, SOFTW SYST MODEL, V7, P157, DOI 10.1007/s10270-007-0069-5
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   de Lemos R., 2013, Lecture Notes in Computer Science, V7475, P1, DOI DOI 10.1007/978-3-642-35813-5_1
   Di Nitto E, 2008, AUTOMAT SOFTW ENG, V15, P313, DOI 10.1007/s10515-008-0032-x
   Ding ZH, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY COMPANION (QRS-C), P610, DOI 10.1109/QRS-C.2017.134
   Ding ZH, 2016, IEEE T INTELL TRANSP, V17, P3330, DOI 10.1109/TITS.2016.2518745
   Edwards R, 2018, 2018 IEEE/ACM 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P12, DOI 10.1145/3194133.3194142
   Eitan N, 2011, PROC INT C TOOLS ART, P685, DOI 10.1109/ICTAI.2011.109
   Fahland D, 2008, 223 HUMB U
   Fahland D, 2009, LECT NOTES COMPUT SC, V5606, P223, DOI 10.1007/978-3-642-02424-5_14
   Fikry A, 2013, 2013 IEEE BUSINESS ENGINEERING AND INDUSTRIAL APPLICATIONS COLLOQUIUM (BEIAC 2013), P34
   Filieri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P341, DOI 10.1145/1985793.1985840
   Fisher J., 2005, COMPUTATIONAL METHOD, P236
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Georgas J.C., 2008, Proceedings of the 2008 International Workshop on Software Engineering for Adaptive and Self- managing Systems, P105
   Ghezzi C., 2012, 2012 7th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, P145, DOI 10.1109/SEAMS.2012.6224401
   Go K., 2004, Interactions, V11, P45, DOI 10.1145/1029036.1029037
   Goldsby H.J., 2008, Proceedings of the 10th Annual Conference on Genetic and Evolutionary Computation, P1751, DOI DOI 10.1145/1389095.1389434
   Goldsby HJ, 2008, LECT NOTES COMPUT SC, V5002, P212
   Goldsby HJ, 2008, FIFTEENTH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P36, DOI 10.1109/ECBS.2008.22
   Goldsby HJ, 2008, LECT NOTES COMPUT SC, V5301, P568, DOI 10.1007/978-3-540-87875-9_40
   Gordon M, 2009, LECT NOTES COMPUT SC, V5449, P456, DOI 10.1007/978-3-642-00382-0_37
   Greenyer J., 2015, CEUR WORKSHOP P, V1474, P71
   Gulia S, 2016, 2016 6TH INTERNATIONAL CONFERENCE - CLOUD SYSTEM AND BIG DATA ENGINEERING (CONFLUENCE), P641, DOI 10.1109/CONFLUENCE.2016.7508197
   Harel D., 2003, UML for Real: Design of Embedded Real-Time Systems, P77, DOI [DOI 10.1007/0-306-48738-1_4, 10.1007/0-306-48738-1, DOI 10.1007/0-306-48738-1]
   Harel D, 2008, SOFTW SYST MODEL, V7, P237, DOI 10.1007/s10270-007-0054-z
   Hermans F, 2009, LECT NOTES COMPUT SC, V5795, P423, DOI 10.1007/978-3-642-04425-0_33
   Hinton A, 2006, LECT NOTES COMPUT SC, V3920, P441
   Horanyi G., 2013, SAFECOMP 2013
   Jiao WP, 2013, J SYST SOFTWARE, V86, P1891, DOI 10.1016/j.jss.2013.02.057
   Kam N, 2004, NAT COMPUT SER, P151
   Katoen JP, 2005, INT CONF QUANT EVAL, P243, DOI 10.1109/QEST.2005.2
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Khalastchi E, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3146389
   Kim D, 2009, 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P76, DOI 10.1109/SEAMS.2009.5069076
   Kitchenham Barbara, 2012, 16th International Conference on Evaluation & Assessment in Software Engineering (EASE 2012), P126, DOI 10.1049/ic.2012.0016
   Kitchenham B., 2015, Evidence-Based Software Engineering and Systematic Reviews
   Kitchenham B, 2013, INFORM SOFTWARE TECH, V55, P2049, DOI 10.1016/j.infsof.2013.07.010
   Kitchenham Barbara, 2007, TECH REP
   Kitchenham BA, 2011, INFORM SOFTWARE TECH, V53, P638, DOI 10.1016/j.infsof.2010.12.011
   Knauss A, 2017, PROC IEEE ACM INT C, P328, DOI 10.1109/ICSE-C.2017.67
   Kof L, 2008, INT REQUIR ENG CONF, P331, DOI 10.1109/RE.2008.12
   Krupitzer C, 2015, PERVASIVE MOB COMPUT, V17, P184, DOI 10.1016/j.pmcj.2014.09.009
   Kugler H, 2013, P IEEE INT C E-SCI, P317, DOI 10.1109/eScience.2013.41
   La Manna VP, 2013, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2013), P63, DOI 10.1109/SEAMS.2013.6595493
   Letier E, 2005, PROC INT CONF SOFTW, P382
   Lu T, 2012, J COMPUT, V7, P207, DOI 10.4304/jcp.7.1.207-217
   Luckey Markus, 2011, PROCEEDING 6 INT S S, P30, DOI [10.1145/1988008.1988014, DOI 10.1145/1988008.1988014]
   Magee Jeff., 2006, CONCURRENCY STATE MO
   Maoz S, 2009, COMPUTER, V42, P28, DOI 10.1109/MC.2009.336
   Mason P. A. J., 2009, 2009 6th International Conference on Electrical Engineering/Electronics, Computer, Telecommunications and Information Technology (ECTI-CON), P722, DOI 10.1109/ECTICON.2009.5137149
   Matevska J, 2007, EUROMICRO CONF PROC, P137
   Monteiro Barbosa Davi, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P24, DOI 10.1109/SEAMS.2017.18
   Morin B, 2009, COMPUTER, V42, P44, DOI 10.1109/MC.2009.327
   Moshirpour Mohammad, 2010, 2010 IEEE International Conference on Information Reuse & Integration (IRI 2010), P63, DOI 10.1109/IRI.2010.5558962
   Muniz L. L., 2015, ICEIS
   Olaechea R, 2018, 2018 IEEE/ACM 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS), P69, DOI 10.1145/3194133.3194143
   OMG, 2017, OMG UN MOD LANG
   Oreizy P, 1999, IEEE INTELL SYST APP, V14, P54, DOI 10.1109/5254.769885
   Perez B, 2011, ELECTRON NOTES THEOR, V281, P113, DOI 10.1016/j.entcs.2011.11.029
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   Petri C. A, 1962, Kommunikation mit Automaten
   Pike L., 2012, LNCS, P310, DOI DOI 10.1007/978-3-642-29860-8_23
   Rodrigues G, 2005, LECT NOTES COMPUT SC, V3442, P111, DOI 10.1007/978-3-540-31984-9_9
   Rolland C., 1998, Requirements Engineering, V3, P23, DOI 10.1007/BF02802919
   Sadot A, 2008, IEEE ACM T COMPUT BI, V5, P223, DOI 10.1109/TCBB.2007.1076
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Sarmiento Edgar, 2015, 17th International Conference on Enterprise Information Systems (ICEIS 2015). Proceedings, P494
   Sitou W, 2007, P INT COMP SOFTW APP, P593
   Szvetits M, 2016, SOFTW SYST MODEL, V15, P31, DOI 10.1007/s10270-013-0394-9
   Tamura G., 2013, REV SEL INV PAP, P108
   Uchitel S, 2003, IEEE T SOFTWARE ENG, V29, P99, DOI 10.1109/TSE.2003.1178048
   Uchitel S, 2013, COMPUT SCI-RES DEV, V28, P279, DOI 10.1007/s00450-012-0233-1
   van Lamsweerde A, 1998, IEEE T SOFTWARE ENG, V24, P1089, DOI 10.1109/32.738341
   Vogel T., 2009, PROC 6 INT C AUTONOM, P67
   Vrbaski Mira., 2012, P 7 WORKSHOP MODELS, P3, DOI DOI 10.1145/2422518.2422520
   Waignier G, 2009, LECT NOTES COMPUT SC, V5581, P1, DOI 10.1007/978-3-642-02351-4_1
   Wang Y, 2008, AUTOMAT SOFTW ENG, V16, P3
   Weyns Danny, 2017, Software Engineering for Self-Adaptive Systems III. Assurances. International Seminar. Revised Selected and Invited Papers: LNCS 9640, P31, DOI 10.1007/978-3-319-74183-3_2
   Weyns D, 2015, 2015 IEEE/ACM 10TH INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P88, DOI 10.1109/SEAMS.2015.27
   Whittle J, 2004, NASA MONO SYST SOFTW, P159
   Zeng LZ, 2004, IEEE T SOFTWARE ENG, V30, P311, DOI 10.1109/TSE.2004.11
   Zhang PC, 2018, INT J SOFTW ENG KNOW, V28, P239, DOI 10.1142/S0218194018500080
   Zhang PC, 2011, SOFTWARE PRACT EXPER, V41, P841, DOI 10.1002/spe.1038
   Zhu YL, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P2
NR 115
TC 4
Z9 5
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1347
EP 1378
DI 10.1007/s11219-019-09487-w
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000567505300019
OA Green Submitted
DA 2024-07-18
ER

PT J
AU San Martín, D
   Angulo, G
   Marinho, B
   Honda, R
   Camargo, V
AF San Martin, Daniel
   Angulo, Guisella
   Marinho, Bruno
   Honda, Raphael
   Camargo, Valter
TI Specification and use of concern metrics for supporting
   modularity-oriented modernizations
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Structured metrics metamodel; Architecture-driven modernization;
   Knowledge discovery metamodel
AB Bad modularized concerns are a known deficiency of legacy systems, making their maintenance increasingly harder and expensive. An alternative is to conduct a modularity-oriented modernization (MOM), whose goal is to restructure concerns for making them more modular. Architecture-driven modernization (ADM) is a model-based alternative for that-it is a kind of reengineering that employs standard metamodels along the process. Knowledge Discovery Metamodel (KDM) is the main one, and it is used for representing all aspects of an existing system to be modernized. ADM also delivers a metamodel called Structured Metrics Metamodel (SMM) whose goal is to standardize the specification of metrics, measurement processes, and results of the measurements. A central task in any modernization process is to measure, characterizing quantitatively, the legacy and the modernized version to check if problems were solved/assuaged. In a MOM, it is important to measure to what extent the concerns are spread across the system using concern metrics. However, there are no studies that investigate how SMM can be used to specify concern metrics in MOMs. Therefore, we present our approach of how to use SMM for specifying concern metrics in a modularity-oriented modernization in the ADM context, i.e., using KDM and SMM. We detail the specification of two concern metrics: Concern Diffusion over Operations (CDO) and Concern Diffusion over Components (CDC). Besides, we also present a tool that can be used in a MOM to support the measurement process
C1 [San Martin, Daniel; Angulo, Guisella; Marinho, Bruno; Honda, Raphael; Camargo, Valter] Univ Fed Sao Carlos, Dept Comp, Sao Carlos, Brazil.
C3 Universidade Federal de Sao Carlos
RP San Martín, D (corresponding author), Univ Fed Sao Carlos, Dept Comp, Sao Carlos, Brazil.
EM daniel.santibanez@ufscar.br; guisella.armijo@ufscar.br;
   bruno.santos@ufscar.br; raphael.honda@ufscar.br;
   valtervcamargo@ufscar.br
RI San Martin, Daniel/IRZ-2309-2023; Camargo, Valter/AAZ-7545-2021
OI San Martin, Daniel/0000-0001-5274-0148; Camargo,
   Valter/0000-0002-6439-4649
FU Coordenacao de Aperfeicoamento de Pessoal de N'ivel Superior - Brasil
   (CAPES) [001]; FAPESP [2016/03104-0]; CONICYT PFCHA/DOCTORADO BECAS
   CHILE [2016 - 72170024]
FX This study was financed in part by the Coordenacao de Aperfeicoamento de
   Pessoal de N ' ivel Superior - Brasil (CAPES) - Finance Code 001 and by
   FAPESP process number 2016/03104-0. We also would like to thank CONICYT
   PFCHA/DOCTORADO BECAS CHILE/2016 - 72170024.
CR ADM, 2009, ARCH DRIV MOD STAND
   Al-Wadeai O, 2018, PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P719, DOI 10.5220/0006732207190730
   Ali MS, 2010, INFORM SOFTWARE TECH, V52, P871, DOI 10.1016/j.infsof.2010.05.003
   Bagnato A., 2017, GENIE LOGICIEL, P46
   Bagnato A., MEASURE MEASURING SO
   Bruneliere Hugo., 2010, P IEEEACM INT C AUTO, P173, DOI DOI 10.1145/1858996.1859032
   Camargo V. V., 2005, 29 BRAZ S SOFTW ENG, P200
   Canovas Izquierdo J., 2009, TALLER DESARROLLO SO, P1
   Ceccato M., 2004, 1 WORKSH ASP REV ENG, V12
   Comella-Dorda S, 2000, PROC IEEE INT CONF S, P173, DOI 10.1109/ICSM.2000.883039
   Dargham J., 2005, P 7 INT C ENT INF SY, P267
   De Vargas Agilar E., 2016, SYSTEMATIC MAPPING S, V2016, P345
   Ducasse S, 2006, PROC IEEE INT CONF S, P203
   Durelli RS, 2014, 2014 IEEE 15TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION (IRI), P577, DOI 10.1109/IRI.2014.7051941
   Durelli RS, 2014, 2014 IEEE 15TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND INTEGRATION (IRI), P569, DOI 10.1109/IRI.2014.7051940
   Eaddy M., 2007, 1 INT WORKSHOP ASSES, P2, DOI [10.1109/ACOM.2007.4, DOI 10.1109/ACOM.2007.4]
   Evermann J, 2007, WORKSH AOM 07
   Frey S, 2012, SOFTWARETECHNIK TREN, V32, P49, DOI [10.1007/BF03323475, DOI 10.1007/BF03323475]
   Frey S., 2011, MAMBA MEASUREMENT AR
   Hein C., 2009, ECEASST, V24
   JACYNTHO M D., 2002, Journal of Web Engineering, V1, P37
   Kazman R, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P154, DOI 10.1109/WCRE.1998.723185
   Kiczales G, 2005, PROC INT CONF SOFTW, P49
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kulesza U, 2013, J SYST SOFTWARE, V86, P905, DOI 10.1016/j.jss.2012.08.031
   La Fosse T.B., 2018, CHARACTERIZING SOURC
   Landi AD, 2017, P INT COMP SOFTW APP, P327, DOI 10.1109/COMPSAC.2017.225
   Lopez-Herrejon RE, 2007, LECT NOTES COMPUT SC, V4422, P423
   Marin M, 2005, PROC IEEE INT CONF S, P673
   Pérez-Castillo R, 2011, COMPUT STAND INTER, V33, P519, DOI 10.1016/j.csi.2011.02.007
   Raheman Sk Riazur, 2018, Journal of Electrical Systems and Information Technology, V5, P562, DOI 10.1016/j.jesit.2017.06.003
   Rajlich V., 2014, Proceedings of the Conference on the Future of Software Engineering, P133, DOI [10.1145/2593882.2593893, DOI 10.1145/2593882.2593893]
   San Martin Santibanez Daniel, 2015, Journal of the Brazilian Computer Society, V21, DOI 10.1186/s13173-015-0030-3
   San Martin Santibanez D., 2012, P BRAZ C SOFTW THEOR
   Sant'Anna C., 2003, BRAZ S SOFTW ENG
   Sant'Anna C., 2003, P BRAZILIAN S SOFTWA, P19
   Santos BM, 2019, J SYST SOFTWARE, V149, P285, DOI 10.1016/j.jss.2018.12.011
   Santos BM, 2014, 2014 28TH BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING (SBES 2014), P61, DOI 10.1109/SBES.2014.20
   SANTOS JL, 2019, QUALITY INFORM COMMU, P225
   SMM, 2018, STRUCTURED METRICS M
   Ulrich WM, 2010, INFORMATION SYSTEMS TRANSFORMATION: ARCHITECTURE-DRIVEN MODERNIZATION CASE STUDIES, pXII
   Wagner C., 2014, Model-Driven Software Migration: A Methodology: Reengineering, Recovery and Modernization of Legacy Systems
   Wong WE, 2000, J SYST SOFTWARE, V54, P87, DOI 10.1016/S0164-1212(00)00029-7
NR 43
TC 0
Z9 0
U1 0
U2 3
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2020
VL 28
IS 3
SI SI
BP 1087
EP 1111
DI 10.1007/s11219-020-09528-9
EA AUG 2020
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NL6EA
UT WOS:000560635300001
DA 2024-07-18
ER

PT J
AU Czech, G
   Moser, M
   Pichler, J
AF Czech, Gerald
   Moser, Michael
   Pichler, Josef
TI A systematic mapping study on best practices for domain-specific
   modeling
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Domain-specific modeling; Domain-specific language; Best practices;
   Systematic mapping study
ID LANGUAGE; DESIGN
AB Model-driven software development comes in different styles. While standard-based approaches leverage existing language standards (e.g., UML), tooling, and development processes, domain-specific modeling (DSM) requires languages and tool support to be created prior to the actual software development. The design, implementation, and testing of languages and tool support require a wide spectrum of methods and techniques which introduce complexity and new challenges. To tackle these DSM-specific challenges, best practices have been collected from various application domains and published in literature to guide the development and application of DSM solutions. It is the goal of this paper to identify studies reporting best practices on domain-specific modeling. Moreover, a systematic and comprehensive compilation of best practices should act as a starting point to identify literature that facilitates industrial adoption of DSM. To search for literature and classify identified studies, we conduct a systematic mapping study (SMS). Furthermore, we perform an in-depth analysis of the identified studies to answer how practices overlap, complement, or contradict each other. The systematic search resulted in 21 studies reporting 321 best practices. From these 321 practices, we compiled 192 unique best practices. We found that the DSM community created a substantial corpus of best practices for DSM. The large majority of practices (75%) are only reported once. The top best practices by number of reports contain only practices that are reported at least four times. However, the frequency of reports does not necessarily imply a high importance of practice, as the application of practices is always context specific.
C1 [Czech, Gerald; Moser, Michael; Pichler, Josef] Software Competence Ctr Hagenberg GmbH, Softwarepk 21, A-4232 Hagenberg, Austria.
C3 Softwarepark Hagenberg
RP Moser, M (corresponding author), Software Competence Ctr Hagenberg GmbH, Softwarepk 21, A-4232 Hagenberg, Austria.
EM gerald.czech@scch.at; michael.moser@scch.at; josef.pichler@scch.at
OI Moser, Michael/0000-0003-3367-3546
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 2009, Techreport B-108
   Budgen D., 2008, P 20 ANN WORKSH PSYC
   Czech G, 2018, EUROMICRO CONF PROC, P137, DOI 10.1109/SEAA.2018.00031
   Evans E., 2003, Domain-Driven Design
   Fowler M., 2010, Domain-specific languages
   Frank U., 2011, EMISA, P93
   Frank U., 2013, Domain Engineering, P133
   Hermans F., 2009, LECT NOTES COMPUTER, V5795
   Iber J., 2016, P 21 EUR C PATT LANG, P1, DOI 10.1145/3011784.3011785
   Kahlaoui A., 2008, METRICS NEWS, V13, P43
   Kahraman G, 2015, SOFTW SYST MODEL, V14, P1505, DOI 10.1007/s10270-013-0387-8
   Kelly S., 2008, Domain-Specific Modeling
   Kelly S, 2009, IEEE SOFTWARE, V26, P22, DOI 10.1109/MS.2009.109
   Kitchenham B, 2009, INFORM SOFTWARE TECH, V51, P7, DOI 10.1016/j.infsof.2008.09.009
   Kolovos DS, 2006, P ECOOP WORKSH DOM S, V2006
   LADD DA, 1994, PROCEEDINGS OF THE USENIX SYMPOSIUM ON VERY HIGH LEVEL LANGUAGES (VHLL), P169
   Livengood S, 2012, PROCEED INGS 2 INT M, P1
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Moser M., 2014, P 1 INT WORKSH MOD S, P42, DOI DOI 10.1145/2593783.2593787
   Olajubu O, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P1060, DOI 10.1145/2786805.2807562
   Parr T., 2009, LANGUAGE IMPLEMENTAT
   Petersen K., 2007, Systematic Mapping Studies in Software Engineering, P1
   Ratiu D, 2016, 2016 IEEE/ACM 11TH INTERNATIONAL WORKSHOP IN AUTOMATION OF SOFTWARE TEST (AST), P15, DOI [10.1109/AST.2016.011, 10.1145/2896921.2896922]
   Rodrigues I., 2018, US DSL USABILITY EVA, DOI [10.1145/3167132.3167348, DOI 10.1145/3167132.3167348]
   Royce W. W., 1987, P 9 INT C SOFTW ENG
   Salehi P, 2016, COMPUT STAND INTER, V44, P63, DOI 10.1016/j.csi.2015.09.009
   Spinellis D, 2001, J SYST SOFTWARE, V56, P91, DOI 10.1016/S0164-1212(00)00089-3
   Van Deursen A, 1998, J SOFTW MAINT-RES PR, V10, P75, DOI 10.1002/(SICI)1096-908X(199803/04)10:2<75::AID-SMR168>3.0.CO;2-5
   Vierhauser M, 2015, IEEE INT CONF AUTOM, P715, DOI 10.1109/ASE.2015.25
   Voelter M, 2009, J OBJECT TECHNOL, V8, P79, DOI 10.5381/jot.2009.8.6.c6
   Vokác M, 2005, LECT NOTES COMPUT SC, V3713, P492, DOI 10.1007/11557432_37
   Volter Markus, 2017, SOFTW SYST MODEL, P1
   Wieringa R, 2006, REQUIR ENG, V11, P102, DOI 10.1007/s00766-005-0021-6
   Wile D, 2003, SYSTEM SCI 2003
NR 35
TC 6
Z9 6
U1 0
U2 2
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2020
VL 28
IS 2
BP 663
EP 692
DI 10.1007/s11219-019-09466-1
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LV4AI
UT WOS:000538379800011
DA 2024-07-18
ER

PT J
AU Petrenko, A
   Avellaneda, F
   Groz, R
   Oriat, C
AF Petrenko, Alexandre
   Avellaneda, Florent
   Groz, Roland
   Oriat, Catherine
TI FSM inference and checking sequence construction are two sides of the
   same coin
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE FSM testing; Machine inference; Machine identification; Active learning;
   Checking experiments; Checking sequences; Conformance testing
ID GENERATION; IDENTIFICATION; MACHINES
AB The paper focuses on the problems of passive and active FSM inference as well as checking sequence generation. We consider the setting where an FSM cannot be reset so that its inference is constrained to a single trace either given a priori in a passive inference scenario or to be constructed in an active inference scenario or aiming at obtaining checking sequence for a given FSM. In each of the last two cases, the expected result is a trace representing a checking sequence for an inferred machine, if it was not given. We demonstrate that this can be achieved by a repetitive use of a procedure that infers an FSM from a given trace (identifying a minimal machine consistent with a trace) avoiding equivalent conjectures. We thus show that FSM inference and checking sequence construction are two sides of the same coin. Following an existing approach of constructing conjectures by SAT solving, we elaborate first such a procedure and then based on it the methods for obtaining checking sequence for a given FSM and inferring a machine from a black box. The novelty of our approach is that it does not use any state identification facilities. We demonstrate that the proposed approach can also be constrained to find a solution in a subset of FSMs represented by a nondeterministic mutation machine. Experiments with a prototype implementation of the developed approach using an existing SAT solver indicate that it scales for FSMs with up to a dozen of states and requires relatively short sequences to identify a black box machine.
C1 [Petrenko, Alexandre; Avellaneda, Florent] CRIM, Montreal, PQ, Canada.
   [Groz, Roland; Oriat, Catherine] Univ Grenoble Alpes, LIG, Grenoble, France.
C3 Universite de Montreal; Communaute Universite Grenoble Alpes; Institut
   National Polytechnique de Grenoble; Universite Grenoble Alpes (UGA);
   Centre National de la Recherche Scientifique (CNRS)
RP Petrenko, A (corresponding author), CRIM, Montreal, PQ, Canada.
EM Alexandre.Petrenko@crim.ca; Florent.Avellaneda@crim.ca;
   Roland.Groz@imag.fr; Catherine.Oriat@imag.fr
RI avellaneda, florent/AAO-1000-2021; Avellaneda, Florent/ABE-6333-2020
OI Avellaneda, Florent/0000-0003-1030-5388; Petrenko,
   Alexandre/0000-0002-2938-1666
FU MESI (Ministere de l'Economie, Science et Innovation) of Gouvernement du
   Quebec; NSERC of Canada
FX This work was partially supported by MESI (Ministere de l'Economie,
   Science et Innovation) of Gouvernement du Quebec, NSERC of Canada and
   CAE. The authors wish to thank the reviewers for their useful comments.
CR Abel A, 2015, ICCAD-IEEE ACM INT, P94, DOI 10.1109/ICCAD.2015.7372555
   [Anonymous], LNCS
   [Anonymous], 2009, CRYPTOMINISAT SAT SO
   [Anonymous], FAILURE DIAGNOSIS AU
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   BOUTE RT, 1974, IEEE T COMPUT, VC 23, P874, DOI 10.1109/T-C.1974.224043
   Carbonnel C, 2016, CONSTRAINTS, V21, P115, DOI 10.1007/s10601-015-9198-6
   De la Higuera Colin, 2010, GRAMMATICAL INFERENC
   GOLD EM, 1978, INFORM CONTROL, V37, P302, DOI 10.1016/S0019-9958(78)90562-4
   GONENC G, 1970, IEEE T COMPUT, VC 19, P551, DOI 10.1109/T-C.1970.222975
   Groz R, 2008, LECT NOTES COMPUT SC, V5047, P216, DOI 10.1007/978-3-540-68524-1_16
   Hennie F.C., 1964, Proc. 5th Ann. Symp. Switch. Theory and Logical Design, P95
   Heule MJH, 2010, LECT NOTES ARTIF INT, V6339, P66, DOI 10.1007/978-3-642-15488-1_7
   Hierons RM, 2006, IEEE T COMPUT, V55, P618, DOI 10.1109/TC.2006.80
   KELLA J, 1971, IEEE T COMPUT, VC 20, P332, DOI 10.1109/T-C.1971.223241
   Koufareva I, 1999, INT FED INFO PROC, V21, P217
   Moore E.F., 1956, Automata studies, P129
   Oliveira AL, 2001, MACH LEARN, V44, P93, DOI 10.1023/A:1010828029885
   Petrenko A, 2005, IEEE T COMPUT, V54, P1154, DOI 10.1109/TC.2005.152
   PETRENKO A, 1992, IFIP TRANS C, V8, P229
   Petrenko A, 2017, LECT NOTES COMPUT SC, V10533, P126, DOI 10.1007/978-3-319-67549-7_8
   Petrenko A, 2017, LECT NOTES COMPUT SC, V10533, P320, DOI 10.1007/978-3-319-67549-7_20
   Porto FR, 2013, LECT NOTES COMPUT SC, V8144, P115, DOI 10.1007/978-3-642-41202-8_9
   Rezaki A, 1995, COMPUT COMMUN, V18, P911, DOI 10.1016/0140-3664(96)81589-1
   Rivest R. L., 1993, Machine learning: from theory to applications. Cooperative research at Siemens and MIT, P51
   SABNANI K, 1988, COMPUT NETWORKS ISDN, V15, P285, DOI 10.1016/0169-7552(88)90064-5
   Simao A, 2008, LECT NOTES COMPUT SC, V5047, P153, DOI 10.1007/978-3-540-68524-1_12
   Simao A, 2009, IEEE ICST WORKSHOP, P48, DOI 10.1109/ICSTW.2009.25
   YANNAKAKIS M, 1995, J COMPUT SYST SCI, V50, P209, DOI 10.1006/jcss.1995.1019
   YAO MG, 1993, IFIP TRANS C, V16, P241
NR 30
TC 9
Z9 9
U1 0
U2 1
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2019
VL 27
IS 2
SI SI
BP 651
EP 674
DI 10.1007/s11219-018-9429-3
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IC2CN
UT WOS:000470767500007
DA 2024-07-18
ER

PT J
AU Gurbuz, HG
   Tekinerdogan, B
AF Gurbuz, Havva Gulay
   Tekinerdogan, Bedir
TI Model-based testing for software safety: a systematic mapping study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Review
DE Model-based testing; Model-driven testing; Software safety; Systematic
   mapping study
ID TEST-CASE GENERATION; BEHAVIOR MODELS; ALGORITHM
AB Testing safety-critical systems is crucial since a failure or malfunction may result in death or serious injuries to people, equipment, or environment. An important challenge in testing is the derivation of test cases that can identify the potential faults. Model-based testing adopts models of a system under test and/or its environment to derive test artifacts. This paper aims to provide a systematic mapping study to identify, analyze, and describe the state-of-the-art advances in model-based testing for software safety. The systematic mapping study is conducted as a multi-phase study selection process using the published literature in major software engineering journals and conference proceedings. We reviewed 751 papers and 36 of them have been selected as primary studies to answer our research questions. Based on the analysis of the data extraction process, we discuss the primary trends and approaches and present the identified obstacles. This study shows that model-based testing can provide important benefits for software safety testing. Several solution directions have been identified, but further research is critical for reliable model-based testing approach for safety.
C1 [Gurbuz, Havva Gulay; Tekinerdogan, Bedir] Wageningen Univ, Informat Technol Grp, Wageningen, Netherlands.
C3 Wageningen University & Research
RP Gurbuz, HG (corresponding author), Wageningen Univ, Informat Technol Grp, Wageningen, Netherlands.
EM havva.gurbuz@wur.nl; bedir.tekinerdogan@wur.nl
RI Tekinerdogan, Bedir/K-3639-2019
OI Tekinerdogan, Bedir/0000-0002-8538-7261
CR Aichernig B.K., 2011, SIGSOFT Softw. Eng. Notes, V36, P1, DOI DOI 10.1145/1921532.1921559
   Aichernig BK, 2015, LECT NOTES COMPUT SC, V9154, P1, DOI 10.1007/978-3-319-21215-9_1
   Aichernig BK, 2014, LECT NOTES COMPUT SC, V8666, P49, DOI 10.1007/978-3-319-10506-2_4
   [Anonymous], 2015, FORMAL MODELING VERI
   Arcaini P, 2017, INT J SOFTW TOOLS TE, V19, P247, DOI 10.1007/s10009-015-0394-x
   Atkins D, 2004, BMJ-BRIT MED J, V328, P1490
   Auguston M, 2006, INFORM SOFTWARE TECH, V48, P971, DOI 10.1016/j.infsof.2006.03.005
   Bourque P., 2004, SWEBOK 2004 GUIDE SO, V1, DOI [10. 1109/SESS. 1999. 767664, DOI 10.1109/SESS.1999.767664]
   Choi YJ, 2017, SOFTW SYST MODEL, V16, P7, DOI 10.1007/s10270-014-0449-6
   Cichos H, 2011, LECT NOTES COMPUT SC, V6981, P425, DOI 10.1007/978-3-642-24485-8_31
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   Enoiu EP, 2016, INT J SOFTW TOOLS TE, V18, P335, DOI 10.1007/s10009-014-0355-9
   Enoiu EP, 2013, IEEE ICST WORKSHOP, P158, DOI 10.1109/ICSTW.2013.27
   Fraser G, 2009, SOFTW TEST VERIF REL, V19, P215, DOI 10.1002/stvr.402
   Gargantini A, 2007, LECT NOTES COMPUT SC, V4454, P189
   Gario A, 2018, SOFTWARE QUAL J, V26, P3, DOI 10.1007/s11219-015-9283-5
   Gentile Ugo, 2014, Formal Methods for Industrial Critical Systems. 19th International Conference, FMICS 2014. Proceedings: LNCS 8718, P170, DOI 10.1007/978-3-319-10702-8_12
   Grasso Daniele, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P103, DOI 10.1109/ICST.2010.44
   Hartman A, 2007, LECT NOTES COMPUT SC, V4383, P204
   Herzner W, 2010, ELEKTROTECH INFORMAT, V127, P181, DOI 10.1007/s00502-010-0741-2
   Hessel A., 2007, COVER REAL TIME TEST
   Hessel A, 2007, ELECTRON NOTES THEOR, V190, P47, DOI 10.1016/j.entcs.2007.08.005
   Hopcroft John E, 2001, Introduction to Automata Theory, Languages, and Computation, V32, P60, DOI DOI 10.1145/568438.568455
   JENSEN K, 1987, LECT NOTES COMPUT SC, V254, P248
   Jin Hyun Kim, 2015, Formal Methods for Industrial Critical Systems. 20th International Workshop, FMICS 2015. Proceedings: LNCS 9128, P47, DOI 10.1007/978-3-319-19458-5_4
   Kandl S, 2006, PROCEEDINGS OF THE FOURTH INTERNATIONAL WORKSHOP ON INTELLIGENT SOLUTIONS IN EMBEDDED SYSEMS, P65
   Kitchenham B., 2007, Guidelines for performing systematic literature reviews in software engineering
   Kloos J., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P26, DOI 10.1109/ICSTW.2011.90
   Kloos J, 2010, ELECTRON NOTES THEOR, V263, P145, DOI 10.1016/j.entcs.2010.05.009
   Kollmann M, 2007, ELECTRON NOTES THEOR, V190, P61, DOI 10.1016/j.entcs.2007.08.006
   Krenn W, 2010, LECT NOTES COMPUT SC, V6286, P186
   Leskovec J, 2014, MINING OF MASSIVE DATASETS, 2ND EDITION, P1
   Ling Fang, 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P251, DOI 10.1109/ICST.2012.105
   Lochau M, 2010, ELECTRON NOTES THEOR, V264, P37, DOI 10.1016/j.entcs.2010.12.013
   Lv J., 2013, 2013 IEEE 11 INT S A, P1
   Marrone S, 2014, INT J SOFTW TOOLS TE, V16, P669, DOI 10.1007/s10009-014-0320-7
   Mathaikutty DA, 2007, INT HIGH LEVEL DESIG, P83, DOI 10.1109/HLDVT.2007.4392792
   Meng Li, 2011, Proceedings of the 2011 IEEE 35th IEEE Annual Computer Software and Applications Conference Workshops (COMPSACW 2011). Volume II: Workshops, P1, DOI 10.1109/COMPSACW.2011.11
   Micskei Zoltan, 2012, Agent and Multi-Agent Systems. Technologies and Applications. Proceedings 6th KES International Conference, KES-AMSTA 2012, P504, DOI 10.1007/978-3-642-30947-2_55
   Mohalik S, 2014, SOFTW TEST VERIF REL, V24, P155, DOI 10.1002/stvr.1489
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   Proetzsch M, 2010, LECT NOTES ARTIF INT, V6359, P317, DOI 10.1007/978-3-642-16111-7_36
   Prowell Stacy J., 2003, HICSS, P337, DOI [10.1109/HICSS.2003.1174916, DOI 10.1109/HICSS.2003.1174916]
   Rafi D. M., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P36, DOI 10.1109/IWAST.2012.6228988
   Samih H, 2014, IEEE INT C ENG COMP, P77, DOI 10.1109/ICECCS.2014.19
   Schrammel P, 2016, INT J SOFTW TOOLS TE, V18, P319, DOI 10.1007/s10009-014-0358-6
   Stallbaum Heiko., 2011, Proceedings - 2010 Workshop on Model-Driven Engineering, Verification, and Validation, MoDeVVa 2010, P25, DOI [10. 1109/MoDeVVa. 2010. 21, DOI 10.1109/MODEVVA.2010.21]
   Thomas F, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P211, DOI 10.1109/ISORC.2008.64
   Tseng WH, 2013, INFORM SOFTWARE TECH, V55, P344, DOI 10.1016/j.infsof.2012.08.016
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Wilkinson T, 2014, LECT NOTES COMPUT SC, V8822, P43, DOI 10.1007/978-3-319-12214-4_4
   Wohlin C., 2012, Experimentation in Software Engineering
   Yu G., 2010, 2010 INT C COMP INT, P4, DOI [10. 1109/CISE. 2010. 5676883, DOI 10.1109/CISE.2010.5676883]
   Yu G, 2009, 2009 INTERNATIONAL FORUM ON INFORMATION TECHNOLOGY AND APPLICATIONS, VOL 3, PROCEEDINGS, P166, DOI 10.1109/IFITA.2009.18
   Zhang H, 2011, INFORM SOFTWARE TECH, V53, P625, DOI 10.1016/j.infsof.2010.12.010
   Zheng W, 2014, IEEE T INTELL TRANSP, V15, P2551, DOI 10.1109/TITS.2014.2320552
NR 56
TC 39
Z9 45
U1 1
U2 19
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2018
VL 26
IS 4
BP 1327
EP 1372
DI 10.1007/s11219-017-9386-2
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GY8FB
UT WOS:000448856400005
OA hybrid
DA 2024-07-18
ER

PT J
AU Yan, P
   Yan, Z
AF Yan, Ping
   Yan, Zheng
TI A survey on dynamic mobile malware detection
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Mobile malware; Dynamic malware detection; Security threats;
   Classification algorithm; Evaluation criteria
ID UNWANTED TRAFFIC CONTROL; APPS
AB The outstanding advances of mobile devices stimulate their wide usage. Since mobile devices are coupled with third-party applications, lots of security and privacy problems are induced. However, current mobile malware detection and analysis technologies are still imperfect, ineffective, and incomprehensive. Due to the specific characteristics of mobile devices such as limited resources, constant network connectivity, user activities and location sensing, and local communication capability, mobile malware detection faces new challenges, especially on dynamic runtime malware detection. Many intrusions or attacks could happen after a mobile app is installed or executed. The literature still expects practical and effective dynamic malware detection approaches. In this paper, we give a thorough survey on dynamic mobile malware detection. We first introduce the definition, evolution, classification, and security threats of mobile malware. Then, we summarize a number of criteria and performance evaluation measures of mobile malware detection. Furthermore, we compare, analyze, and comment on existing mobile malware detection methods proposed in recent years based on evaluation criteria and measures. Finally, we figure out open issues in this research field and motivate future research directions.
C1 [Yan, Ping; Yan, Zheng] Xidian Univ, Sch Cyber Engn, State Key Lab Integrated Serv Networks, Xian 710071, Shaanxi, Peoples R China.
   [Yan, Zheng] Aalto Univ, Dept Commun & Networking, Espoo 02150, Finland.
C3 Xidian University; Aalto University
RP Yan, Z (corresponding author), Xidian Univ, Sch Cyber Engn, State Key Lab Integrated Serv Networks, Xian 710071, Shaanxi, Peoples R China.; Yan, Z (corresponding author), Aalto Univ, Dept Commun & Networking, Espoo 02150, Finland.
EM 1055024194@qq.com
RI zheng, yan/GQY-6668-2022; yang, zheng/HGC-7753-2022; Yan,
   Zheng/AEV-7247-2022
OI Yan, Zheng/0000-0002-9697-2108
FU National Key Research and Development Program of China [2016YFB0800704];
   NSFC [61672410, U1536202]; Natural Science Basic Research Plan in
   Shaanxi Province of China [2016ZDJC-06]; 111 project [B16037, B08038];
   Chinese Educational Ministry [JY0300130104]; Aalto University
FX This work is sponsored by the National Key Research and Development
   Program of China (grant 2016YFB0800704), the NSFC (grants 61672410 and
   U1536202), the Project Supported by Natural Science Basic Research Plan
   in Shaanxi Province of China (Program No. 2016ZDJC-06), the 111 project
   (grants B16037 and B08038), the PhD grant of the Chinese Educational
   Ministry (grant JY0300130104), and Aalto University.
CR Abawajy JH, 2019, IEEE T BIG DATA, V5, P282, DOI 10.1109/TBDATA.2017.2676100
   Alam M.S., 2013, Proceedings of the Green Computing and Communications, IEEE Internet of Things, IEEE Cyber, Physical and Social Computing, P663
   Ali A., 2014, GLOBAL INFORM INFRAS, P1
   Almin SB, 2015, PROCEDIA COMPUT SCI, V45, P407, DOI 10.1016/j.procs.2015.03.170
   Amos B, 2013, INT WIREL COMMUN, P1666, DOI 10.1109/IWCMC.2013.6583806
   Andriatsimandefitra R, 2015, 2015 IEEE 2ND INTERNATIONAL CONFERENCE ON CYBER SECURITY AND CLOUD COMPUTING (CSCLOUD), P200, DOI 10.1109/CSCloud.2015.27
   [Anonymous], ACM T MULTIMEDIA COM
   [Anonymous], MOB MALW EV 2015
   [Anonymous], MOT SEC LABS MALW RE
   [Anonymous], 2016, IT THREAT EV Q2
   [Anonymous], HARDW ATT BACKD EL C
   [Anonymous], THREAT INS THREAT RE
   Bai XL, 2016, P IEEE S SECUR PRIV, P655, DOI 10.1109/SP.2016.45
   Bazrafshan Z, 2013, 2013 5TH CONFERENCE ON INFORMATION AND KNOWLEDGE TECHNOLOGY (IKT), P113, DOI 10.1109/IKT.2013.6620049
   Blasing Thomas, 2010, 2010 5th International Conference on Malicious and Unwanted Software (MALWARE 2010), P55, DOI 10.1109/MALWARE.2010.5665792
   Calderon CAA, 2015, DIGIT COMMUN NETW, V1, P102, DOI 10.1016/j.dcan.2015.03.001
   Caviglione L, 2016, IEEE T INF FOREN SEC, V11, P799, DOI 10.1109/TIFS.2015.2510825
   Chen K, 2016, P IEEE S SECUR PRIV, P357, DOI 10.1109/SP.2016.29
   Chen L, 2015, FUTURE GENER COMP SY, V49, P77, DOI 10.1016/j.future.2014.06.010
   Chen PS, 2015, INFORM SCIENCES, V321, P193, DOI 10.1016/j.ins.2015.04.035
   Cui BJ, 2015, PERVASIVE MOB COMPUT, V24, P101, DOI 10.1016/j.pmcj.2015.06.006
   Das S, 2016, IEEE T INF FOREN SEC, V11, P289, DOI 10.1109/TIFS.2015.2491300
   Dixon B, 2013, IEEE INT CONF TRUST, P142, DOI 10.1109/TrustCom.2013.22
   Egele M, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2089125.2089126
   Enck W, 2014, ACM T COMPUT SYST, V32, P393
   Fan M, 2017, IEEE T INF FOREN SEC, V12, P1772, DOI 10.1109/TIFS.2017.2687880
   Fan M, 2016, PROC INT SYMP SOFTW, P24, DOI 10.1109/ISSRE.2016.14
   Faruki P, 2015, IEEE COMMUN SURV TUT, V17, P998, DOI 10.1109/COMST.2014.2386139
   Fung C.J., 2014, Network Operations and Management Symposium (NOMS), 2014 IEEE, P1
   Guo DF, 2014, J COMPUT, V9, P851, DOI 10.4304/jcp.9.4.851-858
   Holland B, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P733, DOI 10.1109/ICSE.2015.235
   Hung SH, 2016, 2016 INTERNATIONAL COMPUTER SYMPOSIUM (ICS), P537, DOI [10.1109/ICS.2016.0112, 10.1109/ICS.2016.111]
   Khan J, 2015, PROCEDIA COMPUT SCI, V56, P376, DOI 10.1016/j.procs.2015.07.223
   Li J, 2014, C IND ELECT APPL, P1739, DOI 10.1109/ICIEA.2014.6931449
   Liao XJ, 2016, P IEEE S SECUR PRIV, P707, DOI 10.1109/SP.2016.48
   Liu Yang, 2011, Proceedings of the 2011 IEEE Third International Conference on Privacy, Security, Risk and Trust and IEEE Third International Conference on Social Computing (PASSAT/SocialCom 2011), P572, DOI 10.1109/PASSAT/SocialCom.2011.176
   Martinelli F, 2017, PROCEEDINGS OF THE 2017 ACM ASIA CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (ASIA CCS'17), P899, DOI 10.1145/3052973.3055156
   Memon AM, 2015, IEEE SECUR PRIV, V13, P77, DOI 10.1109/MSP.2015.143
   Narudin FA, 2016, SOFT COMPUT, V20, P343, DOI 10.1007/s00500-014-1511-6
   Ng DV, 2014, INT CONF MACH LEARN, P257, DOI 10.1109/ICMLC.2014.7009126
   Quan DY, 2014, IEEE INT CONF TRUST, P877, DOI 10.1109/TrustCom.2014.115
   Rahman M, 2013, 2013 12TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2013), VOL 2, P166, DOI 10.1109/ICMLA.2013.184
   Settouti N, 2016, INT J INTERACT MULTI, V4, P46, DOI 10.9781/ijimai.2016.419
   Sheen S, 2015, NEUROCOMPUTING, V151, P905, DOI 10.1016/j.neucom.2014.10.004
   Shen T, 2014, IEEE INT CONF TRUST, P406, DOI 10.1109/TrustCom.2014.52
   Shen Y, 2014, COMPUT SECUR, V47, P3, DOI 10.1016/j.cose.2014.03.010
   Su X, 2016, IEEE TRUST, P244, DOI [10.1109/TrustCom.2016.69, 10.1109/TrustCom.2016.0070]
   Suarez-Tangil G, 2015, PERVASIVE MOB COMPUT, V18, P137, DOI 10.1016/j.pmcj.2014.10.007
   Suarez-Tangil G, 2014, IEEE COMMUN SURV TUT, V16, P961, DOI 10.1109/SURV.2013.101613.00077
   Sufatrio, 2015, ACM COMPUT SURV, V47, DOI 10.1145/2733306
   Sun MS, 2017, IEEE T INF FOREN SEC, V12, P1103, DOI 10.1109/TIFS.2016.2646641
   Tam K., 2016, ACM COMPUT SURV, V49, P1
   Te-En Wei, 2012, 2012 IEEE 11th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom), P1251, DOI 10.1109/TrustCom.2012.91
   Tong F, 2017, J PARALLEL DISTR COM, V103, P22, DOI 10.1016/j.jpdc.2016.10.012
   Wüchner T, 2019, IEEE T DEPEND SECURE, V16, P99, DOI 10.1109/TDSC.2017.2675881
   Xing LY, 2014, P IEEE S SECUR PRIV, P393, DOI 10.1109/SP.2014.32
   Xu M, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2963145
   Yan Z, 2014, NEW REV HYPERMEDIA M, V20, P25, DOI 10.1080/13614568.2013.832807
   Zhang LF, 2017, FUTURE GENER COMP SY, V72, P305, DOI 10.1016/j.future.2016.06.036
   Zhou YJ, 2012, P IEEE S SECUR PRIV, P95, DOI 10.1109/SP.2012.16
   Zonouz S, 2013, COMPUT SECUR, V37, P215, DOI 10.1016/j.cose.2013.02.002
NR 61
TC 82
Z9 95
U1 0
U2 63
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD SEP
PY 2018
VL 26
IS 3
SI SI
BP 891
EP 919
DI 10.1007/s11219-017-9368-4
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GP3DK
UT WOS:000440721000003
DA 2024-07-18
ER

PT J
AU Dias-Neto, AC
   Matalonga, S
   Solari, M
   Robiolo, G
   Travassos, GH
AF Dias-Neto, Arilo Claudio
   Matalonga, Santiago
   Solari, Martin
   Robiolo, Gabriela
   Travassos, Guilherme Horta
TI Toward the characterization of software testing practices in South
   America: looking at Brazil and Uruguay
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Testing practices; Survey; South America; Brazil;
   Uruguay; Empirical software engineering
AB Software testing is an important activity in the software development life cycle. Several previous studies reported the results of surveys on software testing practices among practitioners from different countries. In this paper, we analyze these surveys aiming to get their main questions, and replicate a survey with practitioners from Brazil and Uruguay, two emerging South American software development scenarios. This survey was previously conducted in Manaus/Brazil in 2006 and Buenos Aires/Argentina in 2013. The replication's scope includes three regions (Northern Brazil, Southern Brazil, and Uruguay). A total of 150 software testing practitioners responded to the survey. Its results are compared with the previous executions and other software testing surveys identified in the technical literature, strengthening previous findings. The Brazilian and Uruguayan participants indicate that: (1) documentation of test artifacts (plan, cases, procedures, results) are useful and important for software testing practitioners; (2) system and regression testing are the two test types deemed most useful and important; (3) tools for monitoring and management of test process tasks and bug reports are considered useful and important; (4) it is usual for software companies to have a definition of a testing process and to have a dedicated testing team; (5) there is a lack of measurement of test tasks and coverage in the industry; and (6) tools to support automation of test case generation and execution or code coverage are still poorly used in their organizations.
C1 [Dias-Neto, Arilo Claudio] Univ Fed Amazonas UFAM, Inst Computacao, Manaus, AM, Brazil.
   [Matalonga, Santiago; Solari, Martin] Univ ORT Uruguay, Fac Ingn, Montevideo, Uruguay.
   [Robiolo, Gabriela] Univ Austral, Informat Dept, Sch Engn, Buenos Aires, DF, Argentina.
   [Travassos, Guilherme Horta] Univ Fed Rio de Janeiro, COPPE, Rio de Janeiro, RJ, Brazil.
   [Travassos, Guilherme Horta] Univ Fed Rio de Janeiro, COPPE, Expt Software Engn Grp, Rio de Janeiro, RJ, Brazil.
C3 Universidade Federal de Amazonas; University ORT Uruguay; Austral
   University; Universidade Federal do Rio de Janeiro; Universidade Federal
   do Rio de Janeiro
RP Dias-Neto, AC (corresponding author), Univ Fed Amazonas UFAM, Inst Computacao, Manaus, AM, Brazil.
EM arilo@icomp.ufam.edu.br; smatalonga@uni.ort.edu.uy;
   martin.solari@ort.edu.uy; grobiolo@austral.edu.ar; ght@cos.ufrj.br
RI Robiolo, Gabriela/X-9455-2019; Matalonga, Santiago/O-4316-2019;
   Travassos, Guilherme H/G-2842-2012
OI Robiolo, Gabriela/0000-0001-6865-8499; Matalonga,
   Santiago/0000-0001-5429-2449; Solari, Martin/0000-0001-5532-3227
FU CNPq-CAcTUS Project [484380/2013-3]; FAPEAM; Universidad Austral; CNPq
   [305929/2014-3]
FX This study could not be possible without the effective participation of
   practitioners. The authors would like to thank CNPq-CAcTUS Project
   (Grant 484380/2013-3), FAPEAM, and Universidad Austral for supporting
   this research. Prof. Travassos is a Brazilian CNPq Researcher (Grant
   305929/2014-3). We also like to thank the anonymous reviewers for their
   suggestion of including the industry-wide section of this paper.
CR Ambler S. W., 2009, DR DOBBS AGILE UPDAT
   Andersson C, 2002, 2002 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P37, DOI 10.1109/ISESE.2002.1166923
   Basili V. R., 1994, Encyclopedia of Software Engineering, V1, P528
   Bertolino A., 2004, SIGSOFT SOFTW ENG NO, V29, P1, DOI DOI 10.1145/1022494.1022540
   Camargo K., 2015, Journal of Software Engineering Research and Development, V3, P1, DOI DOI 10.1186/S40411-015-0019-9
   Causevic Adnan, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P393, DOI 10.1109/ICST.2010.52
   Chan FT, 2005, QSIC 2005: FIFTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P313
   Consulting Capgemini Technology, 2016, WORLD QUAL REP 2015
   Craig R.D., 2002, SYSTEMATIC SOFTWARE
   Daka E, 2014, PROC INT SYMP SOFTW, P201, DOI 10.1109/ISSRE.2014.11
   Deak A., 2013, SOFTWARE ENG, P796, DOI DOI 10.2316/P.2013.796-032
   Deak A, 2014, LECT NOTES COMPUT SC, V8892, P1, DOI 10.1007/978-3-319-13835-0_1
   Deak A, 2013, IEEE ICST WORKSHOP, P102, DOI 10.1109/ICSTW.2013.18
   Dias-Neto A. C., 2006, V SBQS S BRAS QUAL S
   Engström E, 2010, LECT NOTES COMPUT SC, V6156, P3, DOI 10.1007/978-3-642-13792-1_3
   Garousi V, 2015, J SYST SOFTWARE, V108, P148, DOI 10.1016/j.jss.2015.06.036
   Garousi V, 2013, J SYST SOFTWARE, V86, P1354, DOI 10.1016/j.jss.2012.12.051
   Garousi V, 2010, J SYST SOFTWARE, V83, P2251, DOI 10.1016/j.jss.2010.07.012
   GELPERIN D, 1988, COMMUN ACM, V31, P687, DOI 10.1145/62959.62965
   Geras AM, 2004, CAN J ELECT COMPUT E, V29, P183, DOI 10.1109/CJECE.2004.1532522
   Glaser B. G., 1967, DISCOVERY GROUNDED T, V5
   Greca F., 2015, ASSE 2015 S ARG ING, P26
   Greiler M, 2012, PROC INT CONF SOFTW, P244, DOI 10.1109/ICSE.2012.6227189
   Grindal M, 2006, TAIC PART - TESTING: ACADEMIC & INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P171, DOI 10.1109/TAIC-PART.2006.20
   *IEEE, 1990, 610121990 IEEE STD
   IEEE, 1998, 8291998 IEEE
   ISTQB, 2015, ISTWB R WORLDW SOFTW
   Juristo N, 2004, EMPIR SOFTW ENG, V9, P7, DOI 10.1023/B:EMSE.0000013513.48963.1b
   Juristo N, 2012, LECT NOTES COMPUT SC, V7007, P60
   Kanij T, 2013, IEEE AUS SOFT ENGR, P180, DOI 10.1109/ASWEC.2014.32
   Kasurinen Jussi, 2010, Advances in Software Engineering, DOI 10.1155/2010/620836
   Kirk D, 2012, ASIA PAC SOFWR ENG, P386, DOI 10.1109/APSEC.2012.51
   Lee J, 2012, IET SOFTW, V6, P275, DOI 10.1049/iet-sen.2011.0066
   Linaker J., 2015, Guidelines for Conducting Surveys in Software Engineering
   Ng SP, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P116, DOI 10.1109/ASWEC.2004.1290464
   Pfahl D., 2014, P 8 ACMIEEE INT S EM, P1, DOI 10. 1145/2652524.2652531
   Pham R, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P112, DOI 10.1109/ICSE.2013.6606557
   Pressman Roger, 2015, SOFTWARE ENG PRACTIT, V8TH
   Rafi D. M., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P36, DOI 10.1109/IWAST.2012.6228988
   Runeson P, 2006, IEEE SOFTWARE, V23, P22, DOI 10.1109/MS.2006.91
   Durelli VHS, 2013, J SYST SOFTWARE, V86, P934, DOI 10.1016/j.jss.2012.10.012
   SOFTEX, 2012, SOFTW IT SERV
   Sung PW, 2006, P 19 ANN C NATL ADVI, P273
   Taipale O, 2005, LECT NOTES COMPUT SC, V3792, P39
   Torkar R, 2003, IEEE INTERNATIONAL CONFERENCE ON SOFTWARE - SCIENCE, TECHNOLOGY & ENGINEERING, PROCEEDINGS, P164, DOI 10.1109/SWSTE.2003.1245437
   Travassos G. H, 2012, IMPS 2012 EVIDENCE P
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   WOHLIN Claes, 2014, P 18 INT C EVALUATIO, DOI [10.1145/2601248.2601268.10, 10.1145/2601248.2601268]
   Wojcicki MargaretA., 2006, P 2006 WORKSHOP PARA, P1
NR 49
TC 13
Z9 13
U1 1
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2017
VL 25
IS 4
SI SI
BP 1145
EP 1183
DI 10.1007/s11219-016-9329-3
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FN4KA
UT WOS:000415973100003
DA 2024-07-18
ER

PT J
AU Sözer, H
   Gebizli, CS
AF Sozer, Hasan
   Gebizli, Ceren Sahin
TI Model-based testing of digital TVs: an industry-as-laboratory approach
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software testing; Model-based testing; Case studies; Industrial
   projects; Industry-as-laboratory approach
ID SOFTWARE ARCHITECTURE; SYSTEMS
AB Model-based testing is a promising approach for increasing the efficiency of the testing process and for improving software quality. It has been employed in the industry for more than a decade. Nevertheless, there are still challenges regarding its application in different domains. Some of these challenges are general, while some others are domain-specific. In this paper, we explain our experiences in enhancing model-based testing for its adoption in the consumer electronics domain, in particular for Digital TV systems. We applied the so-called industry-as-laboratory approach to define/refine research problems and evaluate our research results. We summarize these results and provide an evaluation of relevant research problems for our context. We observed that the industry-as-laboratory approach is highly effective for industry-academia collaboration and technology transfer in the scope of model-based software testing.
C1 [Sozer, Hasan] Ozyegin Univ, Sch Engn, Nisantepe Mah Orman Sk 34-36, TR-34794 Istanbul, Turkey.
   [Gebizli, Ceren Sahin] Vestel Elect, Manisa, Turkey.
C3 Ozyegin University; Zorlu Holding
RP Sözer, H (corresponding author), Ozyegin Univ, Sch Engn, Nisantepe Mah Orman Sk 34-36, TR-34794 Istanbul, Turkey.
EM hasan.sozer@ozyegin.edu.tr; ceren.sahin@vestel.com.tr
RI Sözer, Hasan/AAR-8697-2020; Sözer, Hasan/A-4722-2015
OI Sözer, Hasan/0000-0002-2968-4763; Sözer, Hasan/0000-0002-2968-4763
FU Grant of Vestel Electronics [909.STZ.2015]; Turkish Ministry of Science,
   Industry and Technology [909.STZ.2015]
FX This work is supported by the joint Grant of Vestel Electronics and the
   Turkish Ministry of Science, Industry and Technology (909.STZ.2015). The
   contents of this article reflect the ideas and positions of the authors
   and do not necessarily reflect the ideas or positions of Vestel
   Electronics and the Turkish Ministry of Science, Industry and
   Technology. We would like to thank software developers and software test
   engineers at Vestel Electronics for sharing their code base with us and
   supporting our case studies.
CR Aksit M., 2015, P INT C ADV COMP CON, P51
   [Anonymous], 2010, THESIS
   [Anonymous], P 18 INT SOFTW PROD
   [Anonymous], 2007, UNRAVELLING MYSTERY
   Apfelbaum L., 1997, SOFTW QUAL WEEK C CI, P296
   Arias T., 2011, THESIS
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Belli F., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P212, DOI 10.1109/ICSTW.2011.59
   Belli F, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P34, DOI 10.1109/ISSRE.2001.989456
   Belli F, 2014, SOFTWARE PRACT EXPER, V44, P201, DOI 10.1002/spe.2161
   Boberg J, 2008, ERLANG '08: PROCEEDINGS OF THE 2008 SIGPLAN ERLANG WORKSHOP, P9
   Boogerd C, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P149
   Brinksma E., 2008, P 2008 C DES AUT TES, P1226
   Dalal S. R., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P285, DOI 10.1109/ICSE.1999.841019
   Damm LO, 2008, J SYST SOFTWARE, V81, P1968, DOI 10.1016/j.jss.2008.01.017
   De Visser I. M., 2008, THESIS
   Dias Neto A. C., 2007, P ACM INT WORKSH EMP, P31
   Dustin E., 1999, AUTOMATED SOFTWARE T
   Engström E, 2011, INFORM SOFTWARE TECH, V53, P2, DOI 10.1016/j.infsof.2010.05.011
   Gebizli C, 2015, SOFTWARE QU IN PRESS
   Gebizli C. S., 2015, P 9 WORKSH TEST AC I, P1
   Gebizli CS, 2014, 2014 38TH ANNUAL IEEE INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSACW 2014), P656, DOI 10.1109/COMPSACW.2014.110
   Grottke M., 2008, 19 INT S SOFTWARE RE, P1, DOI DOI 10.1109/ISSREW.2008.5355512
   Joye C., 2014, MATELO TEST CASE GEN
   Keränen JS, 2012, IET SOFTW, V6, P364, DOI 10.1049/iet-sen.2011.0111
   Klockwork, 2016, C C CHECK REF
   Lackner H, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P51, DOI 10.1109/ICST.2014.16
   Le Guen N, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P54, DOI 10.1109/ISSRE.2004.33
   Lindvall M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P129, DOI 10.1109/ICSE.2015.348
   Malik Qaisar A., 2010, Proceedings of the 2010 17th IEEE International Conference and Workshops on Engineering of Computer-Based Systems (ECBS 2010), P291, DOI 10.1109/ECBS.2010.41
   Muller G., 2012, IND AS LAB APPL PRAC
   Nguyen BN, 2014, IEEE T SOFTWARE ENG, V40, P216, DOI 10.1109/TSE.2014.2300857
   Nguyen BN, 2014, AUTOMAT SOFTW ENG, V21, P65, DOI 10.1007/s10515-013-0128-9
   POTTS C, 1993, IEEE SOFTWARE, V10, P19, DOI 10.1109/52.232392
   Schieferdecker I, 2012, IEEE SOFTWARE, V29, P14, DOI 10.1109/MS.2012.13
   Sozer H., 2011, P 26 INT S COMP INF, P471
   Sözer H, 2013, SOFTWARE QUAL J, V21, P203, DOI 10.1007/s11219-011-9171-6
   Sozer H, 2009, SOFTWARE PRACT EXPER, V39, P869, DOI 10.1002/spe.916
   Tekinerdogan B, 2008, J SYST SOFTWARE, V81, P558, DOI 10.1016/j.jss.2007.10.029
   Utting M., 2007, PRACTICAL MODEL BASE
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Van De Laar P., 2010, P 8 C SYST ENG RES, P658
   Weissleder S., 2010, INFORMATIK 2010 SERV, V2, P321
   Whittaker J. A., 2009, Exploratory software testing: tips, tricks, tours, and techniques to guide test design
   Zoeteweij P, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P213
NR 45
TC 1
Z9 1
U1 1
U2 6
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2017
VL 25
IS 4
SI SI
BP 1185
EP 1202
DI 10.1007/s11219-016-9321-y
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FN4KA
UT WOS:000415973100004
DA 2024-07-18
ER

PT J
AU Parthasarathy, S
   Sharma, S
AF Parthasarathy, Sudhaman
   Sharma, Srinarayan
TI Impact of customization over software quality in ERP projects: an
   empirical study
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Software quality; Customization; Enterprise resource planning ( ERP);
   Quality attributes
ID ENTERPRISE; SYSTEMS; MANAGEMENT; IMPLEMENTATION
AB Enterprise resource planning (ERP) systems are recognized as management information systems that streamline business processes of an enterprise. Delivering ERP software to meet functional needs of an organization with acceptable level of quality is a challenge due to the very nature of development and deployment of this packaged software. Drawing on ISO/IEC 9126's characterization of software quality and Luo and Strong's ERP customization framework, this paper analyzes the impact of the ERP system customization on software quality of ERP. A software quality framework for ERP customization has been developed, and three sets of hypotheses have been formulated. A detailed survey was conducted for data collection. The statistical data analysis reveals that module customization does not impact ERP quality, while database and source code customizations have significant influence over ERP quality. Our findings have implications for the implementation of customized ERP in organizations.
C1 [Parthasarathy, Sudhaman] Thiagarajar Coll Engn, Dept Comp Applicat, Madurai, Tamil Nadu, India.
   [Sharma, Srinarayan] Indian Inst Management IIM Kashipur, Kashipur, Uttarakhand, India.
C3 Thiagarajar College of Engineering; Indian Institute of Management (IIM
   System); Indian Institute of Management Kashipur
RP Parthasarathy, S (corresponding author), Thiagarajar Coll Engn, Dept Comp Applicat, Madurai, Tamil Nadu, India.
EM parthatce@gmail.com; sri.sharma@iimkashipur.ac.in
OI sarathy, Paratha/0000-0001-7439-6878
CR Adisa F, 2010, ONLINE INFORM REV, V34, P540, DOI 10.1108/14684521011072972
   Agrawal M, 2007, IEEE T SOFTWARE ENG, V33, P145, DOI 10.1109/TSE.2007.29
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Andreou AS, 2007, INFORM SOFTWARE TECH, V49, P122, DOI 10.1016/j.infsof.2006.03.007
   [Anonymous], INFORM SYSTEMS OUTSO
   [Anonymous], 1971, ED MEASUREMENT
   [Anonymous], 1991, 9126 ISOIEC
   ARMSTRONG JS, 1977, J MARKETING RES, V14, P396, DOI 10.2307/3150783
   Aydin AO, 2012, LECT NOTES COMPUT SC, V7336, P186, DOI 10.1007/978-3-642-31128-4_14
   Ayyub A., 2011, International Journal of Academic Research, P65
   Beatty RC, 2006, COMMUN ACM, V49, P105, DOI 10.1145/1118178.1118184
   Brehm L, 2001, P 34 ANN HAW INT C S
   Chen JC, 2009, J SYST SOFTWARE, V82, P981, DOI 10.1016/j.jss.2008.12.036
   Chou SW, 2008, DECIS SUPPORT SYST, V46, P149, DOI 10.1016/j.dss.2008.06.003
   CHURCHILL GA, 1979, J MARKETING RES, V16, P64, DOI 10.2307/3150876
   Crosby P.B., 1984, Quality is free
   Davenport TH, 1998, HARVARD BUS REV, V76, P121
   Elragal A, 2012, PROC TECH, V5, P21, DOI 10.1016/j.protcy.2012.09.003
   Issac G, 2006, SOFTWARE QUAL J, V14, P291, DOI 10.1007/s11219-006-0037-2
   Jalote P., 2008, A concise introduction to software engineering
   Jung HW, 2007, COMPUT STAND INTER, V29, P653, DOI 10.1016/j.csi.2007.03.004
   Kannabiran G, 2011, INFORM SOFTWARE TECH, V53, P1199, DOI 10.1016/j.infsof.2011.05.001
   Keil M, 2006, INFORM SYST J, V16, P237, DOI 10.1111/j.1365-2575.2006.00218.x
   Kerlinger F.N., 1986, FDN BEHAV RES, V3rd
   Krishnan MS, 2000, MANAGE SCI, V46, P745, DOI 10.1287/mnsc.46.6.745.11941
   Leishman DA, 1999, IBM SYST J, V38, P76, DOI 10.1147/sj.381.0076
   Light B, 2005, COMMUN ACM, V48, P119, DOI 10.1145/1060710.1060742
   Light B, 2001, J SOFTW MAINT EVOL-R, V13, P415, DOI 10.1002/smr.240
   Luo WH, 2004, IEEE T ENG MANAGE, V51, P322, DOI 10.1109/TEM.2004.830862
   Newman M, 2008, INFORM SYST J, V18, P405, DOI 10.1111/j.1365-2575.2008.00305.x
   Nunnally JC, 1978, PSYCHOMETRIC THEORY
   Parnas DL, 2003, IEEE T SOFTWARE ENG, V29, P674, DOI 10.1109/TSE.2003.1223642
   Parthasarathy S., 2016, COMPUTERS I IN PRESS
   Pressman S., 2006, SOFTWARE ENG PRACTIT
   Ravichandran T, 2000, MIS QUART, V24, P381, DOI 10.2307/3250967
   Rothenberger MA, 2009, IEEE T ENG MANAGE, V56, P663, DOI 10.1109/TEM.2009.2028319
   Saraf N, 2013, INFORM SYST J, V23, P245, DOI 10.1111/j.1365-2575.2011.00397.x
   Schulmeyer G.G., 2008, HDB SOFTWARE QUALITY, V4th
   Scott JA, 2000, INFORM MANAGE, V37, P111, DOI 10.1016/S0378-7206(99)00040-3
   Sprott D, 2000, COMMUN ACM, V43, P63, DOI 10.1145/332051.332074
   Stavrinoudis D, 2005, SOFTWARE QUAL J, V13, P155, DOI 10.1007/s11219-005-6215-9
   Tsai W.H., 2010, International Journal of Business and Management, V5, P26, DOI [https://doi.org/10.5539/ijbm.v5n9p26, DOI 10.5539/IJBM.V5N9P26]
   Verner JM, 2005, IEEE SOFTWARE, V22, P86, DOI 10.1109/MS.2005.12
   Wang ETG, 2006, J MANAGE INFORM SYST, V23, P263, DOI 10.2753/MIS0742-1222230109
   Xenos M, 1997, INFORM SOFTWARE TECH, V39, P417, DOI 10.1016/S0950-5849(96)01154-8
   Yang YH, 2001, IND MANAGE DATA SYST, V101, P329, DOI 10.1108/EUM0000000005821
NR 46
TC 18
Z9 19
U1 0
U2 39
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD JUN
PY 2017
VL 25
IS 2
BP 581
EP 598
DI 10.1007/s11219-016-9314-x
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA EU8EZ
UT WOS:000401271700009
DA 2024-07-18
ER

PT J
AU Chen, J
   Dean, TR
   Alalfi, MH
AF Chen, Jian
   Dean, Thomas R.
   Alalfi, Manar H.
TI Clone detection in MATLAB Stateflow models
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Model; State machine; Stateflow
AB MATLAB Simulink is one of the leading tools for model-based software development in the automotive industry. One extension to Simulink is Stateflow, which allows the user to embed Statecharts as components in a Simulink model. These state machines contain nested states, an action language that describes events, guards, conditions, actions, and complex transitions. As Stateflow has become increasingly important in Simulink models for the automotive sector, we extend previous work on clone detection of Simulink models to Stateflow components. While Stateflow models are stored in the same file as the Simulink models that host them, the representations differ. Our approach incorporates a pretransformation that converts the Stateflow models into a form that allows us to use the SIMONE model clone detector to identify candidates and cluster them into classes. In addition, we push the results of the Stateflow clone detection back into the Simulink models, improving the accuracy of the clones found in the host Simulink models. We validated our approach on the MATLAB Simulink/Stateflow demo set. Our approach showed promising results on the identification of Stateflow clones in isolation, as well as integrated components of the Simulink models that are hosting them.
C1 [Chen, Jian; Alalfi, Manar H.] Queens Univ, Sch Comp, Kingston, ON, Canada.
   [Dean, Thomas R.] Queens Univ, Elect & Comp Engn, Kingston, ON, Canada.
C3 Queens University - Canada; Queens University - Canada
RP Dean, TR (corresponding author), Queens Univ, Elect & Comp Engn, Kingston, ON, Canada.
EM chenj@cs.queensu.ca; tom.dean@queensu.ca; alalfi@cs.queesnu.ca
RI Alalfi, Manar/AAT-3091-2021
OI alalfi, manar/0000-0003-4968-4127
CR Al-Batran B, 2011, LECT NOTES COMPUT SC, V6981, P258, DOI 10.1007/978-3-642-24485-8_19
   Alalfi M. H., 2012, 2012 Proceedings of the 6th International Workshop on Software Clones (IWSC 2012), P78, DOI 10.1109/IWSC.2012.6227873
   ALALFI MH, 2012, INT C SOFTW MAINT, P295
   Antony EP, 2013, WORK CONF REVERSE EN, P472, DOI 10.1109/WCRE.2013.6671325
   Chen JJ, 2014, SCI WORLD J, DOI 10.1155/2014/416530
   Cordy J.R., 2013, INT SOFTW PROD LIN C, P7, DOI DOI 10.1145/2491627.2492153
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   Deissenboeck F., 2010, P 4 INT WORKSH SOFTW, P57, DOI [10.1145/1808901.1808909, DOI 10.1145/1808901.1808909]
   Deissenboeck F., 2005, Software Technology and Engineering Practice, P127
   Deissenboeck F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P603, DOI 10.1145/1368088.1368172
   Dominguez A. L., 2012, MDL2SMV TOOL TRANSLA
   Grant S, 2011, IEEE INT S WEB SYST, P33, DOI 10.1109/WSE.2011.6081817
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   HIRSCHBERG DS, 1977, J ACM, V24, P664, DOI 10.1145/322033.322044
   Hummel Benjamin., 2011, Proceedings of the 5th International Workshop on Software Clones, IWSC '11, P21, DOI [10.1145/1985404.1985409, DOI 10.1145/1985404.1985409]
   Juergens E, 2009, PROC INT CONF SOFTW, P603, DOI 10.1109/ICSE.2009.5070566
   Koschke R., 2006, DAGSTUHL SEMINARS
   Liu H, 2006, ASPEC 2006: 13TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P269
   Martin D., 2011, PROC 5 INT WORKSHOP, P41, DOI DOI 10.1145/1985404.1985412
   Martin D, 2010, LECT NOTES COMPUT SC, V6400, P216
   Pham NH, 2009, PROC INT CONF SOFTW, P276, DOI 10.1109/ICSE.2009.5070528
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Roy J. R., 2007, QUEENS SCH COMPUTING, V541, P64
   Stephan M., 2012, 2012 Proceedings of the 6th International Workshop on Software Clones (IWSC 2012), P84, DOI 10.1109/IWSC.2012.6227876
   Stevenson Andrew., 2012, Pre-proceedings of the Fifth International Conference on Software Language Engineering (SLE 2012), P206
   Störrle H, 2009, S VIS LANG HUM CEN C, P199, DOI 10.1109/VLHCC.2009.5295261
   Störrle H, 2013, SOFTW SYST MODEL, V12, P307, DOI 10.1007/s10270-011-0217-9
   The MathWorks Inc, 2014, STAT HIER OBJ
NR 29
TC 4
Z9 5
U1 0
U2 10
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2016
VL 24
IS 4
BP 917
EP 946
DI 10.1007/s11219-015-9296-0
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED6GL
UT WOS:000388954000004
DA 2024-07-18
ER

PT J
AU Mondal, M
   Roy, CK
   Schneider, KA
AF Mondal, Manishankar
   Roy, Chanchal K.
   Schneider, Kevin A.
TI A comparative study on the intensity and harmfulness of late propagation
   in near-miss code clones
SO SOFTWARE QUALITY JOURNAL
LA English
DT Article
DE Code clones; Late propagation; Clone genealogy; Near-miss clones
ID NICAD
AB Exact or nearly similar code fragments in a software system's source code are referred to as code clones. It is often the case that updates (i.e., changes) to a code clone will need to be propagated to its related code clones to preserve their similarity and to maintain source code consistency. When there is a delay in propagating the changes (possibly because the developer is unaware of the related cloned code), the system might behave incorrectly. A delay in propagating a change is referred to as 'late propagation,' and a number of studies have investigated this phenomenon. However, these studies did not investigate the intensity of late propagation nor how late propagation differs by clone type. In this research, we investigate late propagation separately for each of the three clone types (Type 1, Type 2, and Type 3). According to our experimental results on thousands of revisions of eight diverse subject systems written in two programming languages, late propagation occurs more frequently in Type 3 clones compared with the other two clone types. More importantly, there is a higher probability that Type 3 clones will experience buggy late propagations compared with the other two clone types. Also, we discovered that block clones are more involved in late propagation than method clones. Refactoring and tracking of Similarity Preserving Change Pattern (SPCP) clones (i.e., the clone fragments that evolve following a SPCP) can help us minimize the occurrences of late propagation in clones.
C1 [Mondal, Manishankar; Roy, Chanchal K.; Schneider, Kevin A.] Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK, Canada.
C3 University of Saskatchewan
RP Mondal, M (corresponding author), Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK, Canada.
EM mshankar.mondal@usask.ca; chanchal.roy@usask.ca;
   kevin.schneider@usask.ca
RI Schneider, Kevin/KQV-5113-2024
OI Schneider, Kevin/0000-0003-1113-1754
CR Aversano L, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P81
   Barbour L, 2013, J SOFTW-EVOL PROC, V25, P1139, DOI 10.1002/smr.1597
   Bazrafshan S., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P74, DOI 10.1109/SCAM.2012.18
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   D'Ambros M, 2009, IEEE T SOFTWARE ENG, V35, P720, DOI 10.1109/TSE.2009.17
   Duala-Ekoko E, 2007, PROC INT CONF SOFTW, P158
   Duala-Ekoko E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P843, DOI 10.1145/1368088.1368218
   GODE N, 2011, ICSE, P311
   Göde N, 2011, EUR CON SFTWR MTNCE, P65, DOI 10.1109/CSMR.2011.11
   Kapser CJ, 2008, EMPIR SOFTW ENG, V13, P645, DOI 10.1007/s10664-008-9076-6
   Kim Miryung, 2005, ESEC/FSE- 13), P187, DOI [10.1145/1081706.1081737, DOI 10.1145/1081706.1081737]
   Krinke J, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P57, DOI 10.1109/SCAM.2008.14
   Krinke J, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P170, DOI 10.1109/WCRE.2007.7
   Lozano A., 2010, IWSC, V10, P65, DOI [10.1145/1808901.1808910, DOI 10.1145/1808901.1808910]
   Lozano A, 2008, PROC IEEE INT CONF S, P227, DOI 10.1109/ICSM.2008.4658071
   Mockus A, 2000, PROC IEEE INT CONF S, P120, DOI 10.1109/ICSM.2000.883028
   Mondal M., 2012, 2012 Proceedings of the 6th International Workshop on Software Clones (IWSC 2012), P29, DOI 10.1109/IWSC.2012.6227863
   Mondal M., 2012, P ACM S APPL COMPUTI, P1227, DOI DOI 10.1145/2245276.2231969
   Mondal M., 2014, IWSC
   Mondal M., 2012, P CASCON, P205
   Mondal M, 2015, PROC IEEE INT CONF S, P91, DOI 10.1109/ICSM.2015.7332455
   Mondal M, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P114, DOI 10.1109/CSMR-WCRE.2014.6747161
   Mondal M, 2012, APPL COMPUT REV, V12, P20, DOI 10.1145/2387358.2387360
   Mondal M, 2014, SCI COMPUT PROGRAM, V95, P445, DOI 10.1016/j.scico.2013.11.027
   Roy CK, 2009, PROC IEEE INT CONF S, P447, DOI 10.1109/ICSM.2009.5306301
   Roy CK, 2009, IEEE ICST WORKSHOP, P157, DOI 10.1109/ICSTW.2009.18
   Roy CK, 2008, INT C PROGRAM COMPRE, P172, DOI 10.1109/ICPC.2008.41
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Svajlenko J, 2014, PROC IEEE INT CONF S, P321, DOI 10.1109/ICSME.2014.54
   Thummalapenta S, 2010, EMPIR SOFTW ENG, V15, P1, DOI 10.1007/s10664-009-9108-x
   Vanya A, 2010, EUR CON SFTWR MTNCE, P260, DOI 10.1109/CSMR.2010.50
   Wang Tiantian, 2013, P 2013 9 JOINT M FDN, P455
   Xie S, 2013, IEEE WORK CONF MIN S, P149, DOI 10.1109/MSR.2013.6624022
NR 33
TC 8
Z9 9
U1 0
U2 5
PU SPRINGER
PI DORDRECHT
PA VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS
SN 0963-9314
EI 1573-1367
J9 SOFTWARE QUAL J
JI Softw. Qual. J.
PD DEC
PY 2016
VL 24
IS 4
BP 883
EP 915
DI 10.1007/s11219-016-9305-y
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED6GL
UT WOS:000388954000003
DA 2024-07-18
ER

EF