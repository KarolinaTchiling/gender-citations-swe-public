FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Lahav, O
   Boker, U
AF Lahav, Ori
   Boker, Udi
TI What's Decidable About Causally Consistent Shared Memory?
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Weak memory models; causal consistency; release/acquire; shared-memory;
   concurrency; verification; decidability; well-structured transition
   systems
ID WELL
AB While causal consistency is one of the most fundamental consistency models weaker than sequential consistency, the decidability of safety verification for (finite-state) concurrent programs running under causally consistent shared memories is still unclear. In this article, we establish the decidability of this problem for two standard and well-studied variants of causal consistency. To do so, for each variant, we develop an equivalent "lossy" operational semantics, whose states track possible futures, rather than more standard semantics that record the history of the execution. We show that these semantics constitute well-structured transition systems, thus enabling decidable verification. Based on a key observation, which we call the "shared-memory causality principle," the two novel semantics may also be of independent use in the investigation of weakly consistent models and their verification. Interestingly, our results are in contrast to the undecidability of this problem under the Release/Acquire fragment of the C/C++11 memory model, which forms another variant of causally consistent memory that, in terms of allowed outcomes, lies strictly between the two models studied here. Nevertheless, we show that all these three variants coincide for write/write-race-free programs, which implies the decidability of verification for such programs under Release/Acquire.
C1 [Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
   [Boker, Udi] Interdisciplinary Ctr IDC Herzliya, Herzliyya, Israel.
   [Boker, Udi] Reichman Univ, Herzliyya, Israel.
C3 Tel Aviv University; Reichman University; Reichman University
RP Lahav, O (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM orilahav@tau.ac.il; udiboker@idc.ac.il
OI Lahav, Ori/0000-0003-4305-6998
FU Israel Science Foundation [1566/18]; European Research Council (ERC)
   under the European Union [851811]; Alon Young Faculty Fellowship;
   European Research Council (ERC) [851811] Funding Source: European
   Research Council (ERC)
FX This research was supported by the Israel Science Foundation (grant
   1566/18) and by the European Research Council (ERC) under the European
   Union's Horizon 2020 research and innovation programme (grant agreement
   no. 851811). The first author was also supported by the Alon Young
   Faculty Fellowship.
CR Abdulla Parosh Aziz, 2021, Networked Systems. 8th International Conference (NETYS 2020). Proceedings. Lecture Notes in Computer Science (LNCS 12129), P47, DOI 10.1007/978-3-030-67087-0_4
   Abdulla PA, 2000, INFORM COMPUT, V160, P109, DOI 10.1006/inco.1999.2843
   Abdulla PA, 2021, LECT NOTES COMPUT SC, V12648, P1, DOI 10.1007/978-3-030-72019-3_1
   Abdulla PA, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371094
   Abdulla PA, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1117, DOI 10.1145/3314221.3314649
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Abdulla PA, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(1:9)2018
   Abdulla PA, 2010, B SYMB LOG, V16, P457, DOI 10.2178/bsl/1294171129
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 2011, International standard 14882:2011
   [Anonymous], 2011, 98992011 ISOIEC
   Ardekani MS, 2013, SYM REL DIST SYST, P163, DOI 10.1109/SRDS.2013.25
   Atig MF, 2012, LECT NOTES COMPUT SC, V7211, P26, DOI 10.1007/978-3-642-28869-2_2
   Atig MF, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P7, DOI 10.1145/1706299.1706303
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bernardi G., 27th International Conference on Concurrency Theory, CONCUR 2016, August 23-26, 2016, Quebec City, Canada, 2016, p7:1, DOI DOI 10.4230/LIPICS.CONCUR.2016.7
   Bouajjani A, 2017, ACM SIGPLAN NOTICES, V52, P626, DOI 10.1145/3093333.3009888
   Brutschy L, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P90, DOI 10.1145/3192366.3192415
   Burckhardt S, 2014, FOUND TRENDS PROGRAM, V1, P2
   Cerone A., 28th International Conference on Concurrency Theory, CONCUR 2017, September 5-8, 2017, Berlin, Germany, 2017, p26:1, DOI DOI 10.4230/LIPICS.CONCUR.2017.26
   Cerone A, 2015, LECT NOTES COMPUT SC, V9363, P388, DOI 10.1007/978-3-662-48653-5_26
   Dickson LE, 1913, AM J MATH, V35, P413, DOI 10.2307/2370405
   Doherty S, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P355, DOI 10.1145/3293883.3295702
   Dolan S, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P242, DOI 10.1145/3192366.3192421
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Higman G., 1952, Proc. Lond. Math. Soc., V3, P326
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Kozen D., 1977, 18th Annual Symposium on Foundations of Computer Science, P254, DOI 10.1109/SFCS.1977.16
   Kuperstein M, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P187
   Lahav Ori, 2019, ACM SIGLOG News, V6, P43, DOI 10.1145/3326938.3326942
   Lahav O, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P211, DOI 10.1145/3385412.3385966
   Lahav O, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P126, DOI 10.1145/3314221.3314604
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, LECT NOTES COMPUT SC, V9995, P479, DOI 10.1007/978-3-319-48989-6_29
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Li Cheng, 2012, 10 USENIX S OP SYST, P265
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   Maranget Luc, 2012, A tutorial introduction to the arm and power relaxed memory models
   Nagar K., 29th International Conference on Concurrency Theory, CONCUR 2018, September 4-7, 2018, Beijing, China, 2018, p41:1, DOI [DOI 10.4230/LIPICS.CONCUR.2018.41, 10.4230/LIPIcs.CONCUR. 2018.41]
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Raad Azalea, 2018, P ESOP, P940, DOI DOI 10.1007/978-3-319-89884-1_33
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Schmitz Sylvain, 2012, Lecture Notes
   Sovran Y, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P385
   Suzanne T, 2016, LECT NOTES COMPUT SC, V9837, P469, DOI 10.1007/978-3-662-53413-7_23
   Terry D. B., 1994, Proceedings of the Third International Conference on Parallel and Distributed Information Systems (Cat. No.94TH0668-4), P140, DOI 10.1109/PDIS.1994.331722
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Viotti P, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2926965
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
NR 57
TC 7
Z9 7
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2022
VL 44
IS 2
AR 8
DI 10.1145/3505273
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3B6GO
UT WOS:000828037100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Hague, M
   Lin, AW
   Hong, CD
AF Hague, Matthew
   Lin, Anthony W.
   Hong, Chih-Duo
TI CSS Minification via Constraint Solving
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Cascading style sheets; web-optimisation; semantics; max-SAT
ID AUTOMATA; XPATH
AB Minification is a widely accepted technique that aims at reducing the size of the code transmitted over the web. This article concerns the problem of semantic-preserving minification of Cascading Style Sheets (CSS)-the de facto language for styling web documents-based on merging similar rules.
   The cascading nature of CSS makes the semantics of CSS files sensitive to the ordering of rules in the file. To automatically identify rule-merging opportunities that best minimise file size, we reduce the rule-merging problem to a problem concerning "CSS-graphs," i.e., node-weighted bipartite graphs with a dependency ordering on the edges, where weights capture the number of characters.
   Constraint solving plays a key role in our approach. Transforming a CSS file into a CSS-graph problem requires us to extract the dependency ordering on the edges (an NP-hard problem), which requires us to solve the selector intersection problem. To this end, we provide the first full formalisation of CSS3 selectors (the most stable version of CSS) and reduce their selector intersection problem to satisfiability of quantifier-free integer linear arithmetic, for which highly optimised SMT-solvers are available. To solve the above NP-hard graph optimisation problem, we show how Max-SAT solvers can be effectively employed. We have implemented our rule-merging algorithm and tested it against approximately 70 real-world examples (including examples from each of the top 20 most popular websites). We also used our benchmarks to compare our tool against six well-known minifiers (which implement other optimisations). Our experiments suggest that our tool produced larger savings. A substantially better minification rate was shown when our tool is used together with these minifiers.
C1 [Hague, Matthew] Royal Holloway Univ London, Egham TW20 0EX, Surrey, England.
   [Lin, Anthony W.] TU Kaiserslautern, Postfach 3049, D-67653 Kaiserslautern, Germany.
   [Lin, Anthony W.; Hong, Chih-Duo] Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
C3 University of London; Royal Holloway University London; University of
   Kaiserslautern; University of Oxford
RP Hague, M (corresponding author), Royal Holloway Univ London, Egham TW20 0EX, Surrey, England.
EM hague@rhul.ac.uk; lin@cs.uni-kl.de; chih-duo.hong@st-hughs.ox.ac.uk
OI Hong, Chih-Duo/0000-0002-4064-8413; Hague, Matthew/0000-0003-4913-3800;
   Lin, Anthony Widjaja/0000-0003-4715-5096
FU Engineering and Physical Sciences Research Council [EP/K009907/1];
   Google (Faculty Research Award); European Research Council (ERC) under
   the European Union [759969]; European Research Council (ERC) [759969]
   Funding Source: European Research Council (ERC); EPSRC [EP/K009907/1]
   Funding Source: UKRI
FX We are grateful for the support that we received from the Engineering
   and Physical Sciences Research Council (Grant No. EP/K009907/1), Google
   (Faculty Research Award), and European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation programme (Grant
   Agreement No. 759969).
CR Andreasen E, 2014, ACM SIGPLAN NOTICES, V49, P17, DOI [10.1145/2714064.2660214, 10.1145/2660193.2660214]
   [Anonymous], 2017, Alexa Top 500 Global Sites
   [Anonymous], 1973, P 5 S THEOR COMP, DOI [10.1145/800125.804029, DOI 10.1145/800125.804029]
   Argelich Josep, 2016, MAX SAT 16 COMPETITI
   Atkins Jr Tab, 2017, CSS SNAPSHOT 2017
   Benedikt M, 2003, LECT NOTES COMPUT SC, V2572, P79
   Benedikt Michael., 2005, PODS, P25, DOI DOI 10.1145/1065167.1065172
   Bjorner N, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P246
   Bojanczyk M, 2010, ELECTRON P THEOR COM, P1
   Bos B., 2016, W3C working draft
   Bosch M, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P2227
   Bradley A. R., 2007, The Calculus of Computation
   David C, 2012, ACM T DATABASE SYST, V37, DOI 10.1145/2338626.2338632
   De Moura L., 2008, P INT C TOOLS ALG CO
   Etemad Elika J., 2013, SELECTORS LEVEL 4 W3
   Figueira Diego, 2010, THESIS
   Gecseg F., 1997, Handbook of Formal Languages, V3, P1, DOI DOI 10.1007/978-3-642-59126-6_1
   Geerts F, 2005, LECT NOTES COMPUT SC, V3774, P122
   Genevès P, 2006, ACM T INFORM SYST, V24, P475, DOI 10.1145/1185877.1185882
   Genevès P, 2015, ACM T COMPUT LOG, V16, DOI 10.1145/2724712
   Geneves Pierre., 2012, WWW'12, P809
   Gottlob G, 2002, IEEE S LOG, P189, DOI 10.1109/LICS.2002.1029828
   Hague M, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI [10.1145/2858965.2814288, 10.1145/2814270.2814288]
   Hague Matthew, 2017, MAXSAT EVALUATION 20
   Hickson I, 2014, HTML5
   Hidders J., 2003, DBPL LECT NOTES COMP, P21
   Hottelier T, 2015, ACM SIGPLAN NOTICES, V50, P74, DOI [10.1145/2858965.2814291, 10.1145/2814270.2814291]
   Jensen B, 2011, J HIGH ENERGY PHYS, DOI 10.1007/JHEP11(2011)059
   Jensen SH, 2009, LECT NOTES COMPUT SC, V5673, P238, DOI 10.1007/978-3-642-03237-0_17
   Kayaaslan E., 2010, 9th Cologne-Twente Workshop on Graphs and Combinatorial Optimization, P105
   Libkin L, 2010, J APPL LOGIC, V8, P210, DOI 10.1016/j.jal.2009.09.005
   Libkin L, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(3:2)2006
   Marx M, 2005, ACM T DATABASE SYST, V30, P929, DOI 10.1145/1114244.1114247
   Marx M, 2005, SIGMOD REC, V34, P41, DOI 10.1145/1083784.1083792
   Mazinanian D, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P496, DOI 10.1145/2635868.2635879
   Mesbah A, 2012, PROC INT CONF SOFTW, P408, DOI 10.1109/ICSE.2012.6227174
   Meyerovich L.A., 2010, WWW 10, P711, DOI DOI 10.1145/1772690.1772763
   Mihalis Yannakakis, 1978, P 10 ANN ACM S THEOR, P253, DOI DOI 10.1145/800133.804355
   Moscovitz Meitar, 2010, ADVANCED CSS
   Muscholl A, 2005, INT J FOUND COMPUT S, V16, P743, DOI 10.1142/S0129054105003261
   Narodytska N, 2014, AAAI CONF ARTIF INTE, P2717
   Neven F, 2002, SIGMOD REC, V31, P39, DOI 10.1145/601858.601869
   Neven F, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(3:1)2006
   Panchekha P, 2018, ACM SIGPLAN NOTICES, V53, P1, DOI [10.1145/3296979.3192407, 10.1145/3192366.3192407]
   Panchekha P, 2016, ACM SIGPLAN NOTICES, V51, P181, DOI 10.1145/3022671.2984010
   Peeters R, 2003, DISCRETE APPL MATH, V131, P651, DOI 10.1016/S0166-218X(03)00333-0
   Petke J, 2015, BRIDGING CONSTRAINT, DOI [10.1007/978-3-319-21810-6, DOI 10.1007/978-3-319-21810-6]
   SCARPELLINI B, 1984, T AM MATH SOC, V284, P203, DOI 10.2307/1999283
   Schäfer M, 2013, ACM SIGPLAN NOTICES, V48, P165, DOI 10.1145/2499370.2462168
   Seidl H, 2004, LECT NOTES COMPUT SC, V3142, P1136
   Slegg Jennifer, 2017, GOOGLE MOBILE 1 INDE
   Souders Steve., 2007, High Performance Web Sites
   Sridharan M, 2012, LECT NOTES COMPUT SC, V7313, P435, DOI 10.1007/978-3-642-31057-7_20
   Steimann F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156016
   ten Cate B, 2007, SIGMOD REC, V36, P19, DOI 10.1145/1328854.1328858
   ten Cate B, 2010, J APPL LOGIC, V8, P153, DOI 10.1016/j.jal.2009.09.002
   ten Cate B, 2009, THEOR COMPUT SYST, V44, P561, DOI 10.1007/s00224-008-9151-9
   Tip F, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961205
   Unicode Inc., 2016, UN STAND VERS 9 0
   Vardi MY, 1995, LECT NOTES COMPUTER, P238, DOI DOI 10.1007/3-540-60915-6
NR 60
TC 3
Z9 4
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2019
VL 41
IS 2
SI SI
AR 12
DI 10.1145/3310337
PG 76
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JT8FU
UT WOS:000501220300006
DA 2024-07-18
ER

PT J
AU Tzannes, A
   Caragea, GC
   Vishkin, U
   Barua, R
AF Tzannes, Alexandros
   Caragea, George C.
   Vishkin, Uzi
   Barua, Rajeev
TI Lazy Scheduling: A Runtime Adaptive Scheduler for Declarative
   Parallelism
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Performance; Languages; Work stealing; adaptive scheduling;
   load balancing; nested parallelism; task-parallel; fine-grained;
   declarative; performance portability
ID IMPLEMENTATION
AB Lazy scheduling is a runtime scheduler for task-parallel codes that effectively coarsens parallelism on load conditions in order to significantly reduce its overheads compared to existing approaches, thus enabling the efficient execution of more fine-grained tasks. Unlike other adaptive dynamic schedulers, lazy scheduling does not maintain any additional state to infer system load and does not make irrevocable serialization decisions. These two features allow it to scale well and to provide excellent load balancing in practice but at a much lower overhead cost compared to work stealing, the golden standard of dynamic schedulers. We evaluate three variants of lazy scheduling on a set of benchmarks on three different platforms and find it to substantially outperform popular work stealing implementations on fine-grained codes. Furthermore, we show that the vast performance gap between manually coarsened and fully parallel code is greatly reduced by lazy scheduling, and that, with minimal static coarsening, lazy scheduling delivers performance very close to that of fully tuned code.
   The tedious manual coarsening required by the best existing work stealing schedulers and its damaging effect on performance portability have kept novice and general-purpose programmers from parallelizing their codes. Lazy scheduling offers the foundation for a declarative parallel programming methodology that should attract those programmers by minimizing the need for manual coarsening and by greatly enhancing the performance portability of parallel code.
C1 [Tzannes, Alexandros] Univ Illinois, Dept Comp Sci, Thomas M Siebel Ctr Comp Sci, Urbana, IL 61801 USA.
   [Caragea, George C.] Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
   [Vishkin, Uzi] Univ Maryland, Inst Adv Comp Studies, College Pk, MD 20742 USA.
   [Barua, Rajeev] Univ Maryland, Dept Elect & Comp Engn, College Pk, MD 20742 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   University System of Maryland; University of Maryland College Park;
   University System of Maryland; University of Maryland College Park;
   University System of Maryland; University of Maryland College Park
RP Tzannes, A (corresponding author), Univ Illinois, Dept Comp Sci, Thomas M Siebel Ctr Comp Sci, 201 N Goodwin Ave, Urbana, IL 61801 USA.
EM atzannes@illinois.edu; vishkin@umd.edu; barua@umd.edu
FU National Science Foundation [CSR-0834373, CNS-1161857]; Division Of
   Computer and Network Systems; Direct For Computer & Info Scie & Enginr
   [1161857] Funding Source: National Science Foundation
FX This research was partially supported by the National Science Foundation
   under grants CSR-0834373 and CNS-1161857.
CR Acar U. A., 2000, P 12 ANN ACM S PAR A, P1, DOI [DOI 10.1145/341800.341801, 10.1145/341800.341801]
   Acar UA, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2517327.2442538
   Acar UA, 2011, ACM SIGPLAN NOTICES, V46, P499, DOI 10.1145/2076021.2048106
   [Anonymous], 2011, P INT C PART GLOB AD
   [Anonymous], 2008, INTEL THREADING BUIL
   Arora N. S., 1998, SPAA '98. Tenth Annual ACM Symposium on Parallel Algorithms and Architectures, P119, DOI 10.1145/277651.277678
   Asanovic Krste, 2006, The Landscape of Parallel Computing Research: A View from Berkeley
   Ayguade Eduard, 1999, P 1999 INT C PAR PRO
   Bergstrom Lars, 2010, P 15 INT C FUNCT PRO
   BLELLOCH GE, 1990, J PARALLEL DISTR COM, V8, P119, DOI 10.1016/0743-7315(90)90087-6
   BLELLOCH GE, 1993, SIGPLAN NOTICES, V28, P102, DOI 10.1145/173284.155343
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   BUCKER HM, 2004, P 2004 ACM S APPL CO, P220, DOI DOI 10.1145/967900.967948
   Burton F.W., 1981, P 1981 C FUNCTIONAL, P187
   Certner Olivier, 2008, P C DES AUT TEST EUR, P740
   Chase David, 2005, P 17 ANN ACM S PAR A, P21, DOI DOI 10.1145/1073970.1073974
   Cormen Thomas H, 2009, Introduction to Algorithms, V3rd
   Davis TA, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049670
   Duran A., 2005, P 19 ANN INT C SUPER, P121, DOI DOI 10.1145/1088149.1088166
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   George S, 1994, HIGHLY PARALLEL COMP
   Goldstein SC, 1996, J PARALLEL DISTR COM, V37, P5, DOI 10.1006/jpdc.1996.0104
   Guo Y., 2010, IEEE INT S PARALLEL, P1, DOI [10.1109/IPDPS.2010.5470425, DOI 10.1109/IPDPS.2010.5470425]
   Halstead R.H., 1984, P 1984 ACM S LISP FU, P9
   Hendler D, 2006, DISTRIB COMPUT, V18, P189, DOI 10.1007/s00446-005-0144-5
   Hendler D., 2002, PODC 02, P280
   KRANZ DA, 1989, SIGPLAN NOTICES, V24, P81, DOI 10.1145/74818.74825
   Kumar S, 2007, CONF PROC INT SYMP C, P162, DOI 10.1145/1273440.1250683
   Kumar V, 2012, ACM SIGPLAN NOTICES, V47, P297, DOI 10.1145/2398857.2384639
   Lea Doug, 2000, JAVA, P36
   Leijen D, 2009, ACM SIGPLAN NOTICES, V44, P227, DOI 10.1145/1639949.1640106
   Leiserson CE, 2009, DES AUT CON, P522
   Li SG, 2013, EUROMICRO WORKSHOP P, P198, DOI 10.1109/PDP.2013.35
   Li Z, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P157
   Martorell X., 1999, Conference Proceedings of the 1999 International Conference on Supercomputing, P294, DOI 10.1145/305138.305206
   Michael MM, 2009, ACM SIGPLAN NOTICES, V44, P45, DOI 10.1145/1594835.1504186
   MOHR E, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P185, DOI 10.1145/91556.91631
   Naishlos D, 2003, THEOR COMPUT SYST, V36, P521, DOI 10.1007/s00224-003-1086-6
   Naishlos Dorit., 2001, SPAA '01: Proceedings of the thirteenth annual ACM symposium on Parallel algorithms and architectures, P93
   Nikolopoulos DS, 1998, LECT NOTES COMPUT SC, V1388, P183
   Olivier S, 2007, LECT NOTES COMPUT SC, V4382, P235, DOI 10.1007/978-3-540-72521-3_18
   OpenMP Architecture Review Board, 2008, OPENMP APPL PROGR IN
   QUINTIN JN, 2010, P 16 INT EUR C PAR 1, V6271, P217
   Robison A, 2008, 2008 IEEE INTERNATIONAL SYMPOSIUM ON PARALLEL & DISTRIBUTED PROCESSING, VOLS 1-8, P598
   Sanchez D., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P22, DOI 10.1109/PACT.2011.9
   Sanchez D, 2010, ACM SIGPLAN NOTICES, V45, P311, DOI 10.1145/1735971.1736055
   Shirako J, 2009, ICS'09: PROCEEDINGS OF THE 2009 ACM SIGARCH INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P181, DOI 10.1145/1542275.1542304
   Taura K, 1999, ACM SIGPLAN NOTICES, V34, P60, DOI 10.1145/329366.301110
   Tzannes A, 2010, ACM SIGPLAN NOTICES, V45, P179, DOI 10.1145/1837853.1693479
   Tzannes Alexandros, 2013, CODE DATASETS BENCHM
   Tzannes Alexandros, 2012, THESIS U MARYLAND CO
   Tzannes Alexandros, 2012, SEGMENTATION FAULT R
   Tzannes Alexandros, 2013, IMPLEMENTATION LAZY
   UTSproject, 2007, UNB TREE SEARCH BENC
   Vandierendonck H., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P1, DOI 10.1109/PACT.2011.7
   Vishkin U., 1998, SPAA '98. Tenth Annual ACM Symposium on Parallel Algorithms and Architectures, P140, DOI 10.1145/277651.277680
   Vishkin U, 2011, COMMUN ACM, V54, P75, DOI 10.1145/1866739.1866757
   Wen Xingzhi., 2008, CF 08, P55
   Xingzhi Wen, 2008, THESIS U MARYLAND CO
NR 59
TC 15
Z9 16
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2014
VL 36
IS 3
AR 10
DI 10.1145/2629643
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS5OI
UT WOS:000344319500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Alur, R
   Chaudhuri, S
   Madhusudan, P
AF Alur, Rajeev
   Chaudhuri, Swarat
   Madhusudan, P.
TI Software Model Checking Using Languages of Nested Trees
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Theory; Verification; Logic; specification; verification;
   mu-calculus; infinite-state; model-checking; games; pushdown systems;
   interprocedural analysis
ID TEMPORAL LOGIC
AB While model checking of pushdown systems is by now an established technique in software verification, temporal logics and automata traditionally used in this area are unattractive on two counts. First, logics and automata traditionally used in model checking cannot express requirements such as pre/post-conditions that are basic to analysis of software. Second, unlike in the finite-state world, where the mu-calculus has a symbolic model-checking algorithm and serves as an "assembly language" to which temporal logics can be compiled, there is no common formalism-either fixpoint-based or automata-theoretic-to model-check requirements on pushdown models. In this article, we introduce a new theory of temporal logics and automata that addresses the above issues, and provides a unified foundation for the verification of pushdown systems.
   The key idea here is to view a program as a generator of structures known as nested trees as opposed to trees. A fixpoint logic (called NT-mu) and a class of automata (called nested tree automata) interpreted on languages of these structures are now defined, and branching-time model-checking is phrased as language inclusion and membership problems for these languages. We show that NT-mu and nested tree automata allow the specification of a new frontier of requirements usable in software verification. At the same time, their model checking problem has the same worst-case complexity as their traditional analogs, and can be solved symbolically using a fixpoint computation that generalizes, and includes as a special case, "summary"-based computations traditionally used in interprocedural program analysis. We also show that our logics and automata define a robust class of languages-in particular, just as the mu-calculus is equivalent to alternating parity automata on trees, NT-mu is equivalent to alternating parity automata on nested trees.
   Categories and Subject Descriptors: D. 2.4 [Software Engineering]: Software/Program Verification-Model checking; F. 1.1 [Computation by abstract devices]: Models of computation-Automata; F. 3.1 [Theory of Computation]: Specifying and Verifying and Reasoning about Programs; F. 4.1 [Theory of Computation]: Mathematical Logic-Temporal logic
C1 [Alur, Rajeev] Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
   [Chaudhuri, Swarat] Rice Univ, Dept Comp Sci, Houston, TX 77005 USA.
   [Madhusudan, P.] Univ Illinois, Champaign, IL 61802 USA.
C3 University of Pennsylvania; Rice University; University of Illinois
   System; University of Illinois Urbana-Champaign
RP Alur, R (corresponding author), Univ Penn, Dept Comp & Informat Sci, 3451 Walnut St, Philadelphia, PA 19104 USA.
EM alur@cis.upoenn.edu; swarat@rice.edu; madhu@illinois.edu
FU National Science Foundation [0953507, 0747041]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [0953507] Funding Source: National Science Foundation; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [0747041] Funding Source: National Science Foundation
FX This work was partially supported by the National Science Foundation
   under CAREER award #0953507 and CAREER award #0747041.
CR ABADI M, 2003, P NETW IT SEC C NDSS
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   ALUR R, 2006, P 33 ANN ACM S PRINC
   ALUR R, 2006, P S COMP AID VER CAV
   ALUR R, 2006, P S DEV LANG THEOR
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   Alur Rajeev, 2004, P 36 ANN ACM S THEOR, P202, DOI [10.1145/1007352.1007390, DOI 10.1145/1007352.1007390]
   [Anonymous], 2002, Automata, Logics, and Infinite Games: A Guide to Current Research [Outcome of a Dagstuhl Seminar, February 2001
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   BALL T, 2001, P 13 INT C COMP AID
   BURDY L, 2003, P 8 INT WORKSH FORM, P75
   Burkart O, 1999, THEOR COMPUT SCI, V221, P251, DOI 10.1016/S0304-3975(99)00034-1
   Clarke EM, 1999, MODEL CHECKING, P1
   Emerson E.A., 1985, PROC 12 ACM S PRINCI, P84
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   EMERSON EA, 1991, PROCEEDINGS - 32ND ANNUAL SYMPOSIUM ON FOUNDATIONS OF COMPUTER SCIENCE, P368, DOI 10.1109/SFCS.1991.185392
   Esparza J, 2003, INFORM COMPUT, V186, P355, DOI 10.1016/S0890-5401(03)00139-1
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Jensen T, 1999, P IEEE S SECUR PRIV, P89, DOI 10.1109/SECPRI.1999.766902
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kupferman O, 2002, LECT NOTES ARTIF INT, V2514, P262, DOI 10.1007/3-540-36078-6_18
   Kupferman O, 2000, J ACM, V47, P312, DOI 10.1145/333979.333987
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   SCHMIDT DA, 1998, P 25 ANN ACM S PRINC, P68
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   STEFFEN B, 1991, LECT NOTES COMPUT SC, V526, P346
   Wallach DS, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P52, DOI 10.1109/SECPRI.1998.674823
   Walukiewicz I, 2001, INFORM COMPUT, V164, P234, DOI 10.1006/inco.2000.2894
NR 31
TC 16
Z9 16
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2011
VL 33
IS 5
AR 15
DI 10.1145/2039346.2039347
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 857AI
UT WOS:000297685600001
OA Bronze
DA 2024-07-18
ER

PT J
AU Pratikakis, P
   Foster, JS
   Hicks, M
AF Pratikakis, Polyvios
   Foster, Jeffrey S.
   Hicks, Michael
TI LOCKSMITH: Practical Static Race Detection for C
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Verification; Reliability; Algorithms; Data race; race
   detection; static analysis; context sensitivity; correlation inference;
   sharing analysis; contextual effects; Locksmith
ID INFERENCE
AB LOCKSMITH is a static analysis tool for automatically detecting data races in C programs. In this article, we describe each of LOCKSMITH's component analyses precisely, and present systematic measurements that isolate interesting trade-offs between precision and efficiency in each analysis. Using a benchmark suite comprising stand-alone applications and Linux device drivers totaling more than 200,000 lines of code, we found that a simple no-worklist strategy yielded the most efficient interprocedural dataflow analysis; that our sharing analysis was able to determine that most locations are thread-local, and therefore need not be protected by locks; that modeling C structs and void pointers precisely is key to both precision and efficiency; and that context sensitivity yields a much more precise analysis, though with decreased scalability. Put together, our results illuminate some of the key engineering challenges in building LOCKSMITH and data race detection analyses in particular, and constraint-based program analyses in general.
C1 [Pratikakis, Polyvios; Foster, Jeffrey S.; Hicks, Michael] Univ Maryland, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Pratikakis, P (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM polyvios@cs.umd.edu
FU NSF [CCF-0541036, CCF-0346989, CCF-0430118, CCF-0524036]
FX This work was supported by NSF CCF-0541036, CCF-0346989, CCF-0430118,
   and CCF-0524036.
CR Agarwal R, 2004, LECT NOTES COMPUT SC, V2937, P149
   Agarwal R., 2005, ASE, P233
   AHO AV, 1977, ADDISONWESLEY SERIES
   AIKEN A, 2003, PLDI 03, P129
   ALEXANDRESCU A, 2005, MEMORY MODEL MULTITH
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR, P56
   Choi J.-D., 2002, PROGRAMMING LANGUAGE, P258
   COOPER KD, 2004, TR04100 RIC U DEP CO
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   ENGLER DR, 2003, SOSP, P237
   FAHNDRICH M, 2000, P ACM SIGPLAN C PROG, P253
   Fahndrich Manuel., 2002, ACM C PROG LANG DESI, P13
   Flanagan C, 2001, ACM SIGPLAN NOTICES, P90
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1576, P91
   FLANAGAN C, 2005, P TLDI 05, P47
   FLANAGAN C, 2002, ACM C PROGR LANG DES, P234
   Flanagan C, 2007, SCI COMPUT PROGRAM, V64, P140, DOI 10.1016/j.scico.2006.03.006
   Flanagan Cormac., 2004, POPL 04, P256
   Flanagan Cormac., 2003, Pro- ceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, PLDI '03, P338
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   Foster JS, 2006, ACM T PROGR LANG SYS, V28, P1035, DOI 10.1145/1186632.1186635
   GROSSMAN D, 2003, P ACM SIGPLAN INT WO, P13
   Heintze Nevin., 2001, PLDI 01, P254
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   Henglein Fritz., 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming, P175, DOI [10.1145/773184.773203, DOI 10.1145/773184.773203]
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P1, DOI 10.1145/996893.996844
   HOTE C, 2004, RUNTIME ERROR DETECT
   *INTEL, 2007, TER RES CHIP
   Johnson Rob., 2004, Proceedings of the 13th Conference on USENIX Security Symposium - Volume 13. SSYM'04, P9
   Kodumal J, 2005, LECT NOTES COMPUT SC, V3672, P218
   KODUMAL J, 2004, P C PROGR LANG DES I, P207
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Manson Jeremy., 2005, Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'05, P378, DOI DOI 10.1145/1040305.1040336
   MOSSIN C, 1996, THESIS U COPENHAGEN
   Naik M, 2007, ACM SIGPLAN NOTICES, V42, P327, DOI 10.1145/1190215.1190265
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Neamtiu I, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P37, DOI 10.1145/1328438.1328447
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   *NEWS COM, 2007, DES PUTS 96 COR SING
   OCALLAHAN R, 2003, P 9 ACM SIGPLAN S PR, P167
   PIERCE BC, 2002, TYPES PROGRAMMMING L
   Poulsen K., 2004, TRACKING BLACKOUT BU
   Pratikakis P., 2006, Proceedings of the 13th International Static Analysis Symposium (SAS), P88
   Pratikakis P, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1133981.1134019
   QADEER, 2004, PLDI, P14
   Rehof J., 2001, POPL, P54, DOI 10.1145/373243.360208
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   Reynolds JC, 2004, LECT NOTES COMPUT SC, V3328, P35
   Rose J, 2005, SCI COMPUT PROGRAM, V58, P366, DOI 10.1016/j.scico.2005.03.003
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   SEIDL H, 2003, P EST ACAD SCI, P413
   Siff M, 1999, LECT NOTES COMPUT SC, V1687, P180, DOI 10.1145/318774.318942
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   Terauchi T, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P1, DOI 10.1145/1375581.1375583
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   von Praun Christoph., 2003, Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation (PLDI '03), P115
   Voung J.W., 2007, PROC 6 JOINT M EUROP, P205
NR 60
TC 65
Z9 74
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2011
VL 33
IS 1
AR 3
DI 10.1145/1889997.1890000
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TH
UT WOS:000286463800002
DA 2024-07-18
ER

PT J
AU Yahav, E
   Sagiv, M
AF Yahav, Eran
   Sagiv, Mooly
TI Verifying Safety Properties of Concurrent Heap-Manipulating Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Theory; Verification; Abstract interpretation;
   verification; concurrency; shape-analysis; safety properties; Java
ID PARAMETRIC SHAPE-ANALYSIS; MODEL-CHECKING; ENVIRONMENT ABSTRACTION;
   SYSTEMS; TVLA; TOOL
AB We provide a parametric framework for verifying safety properties of concurrent heap-manipulating programs. The framework combines thread-scheduling information with information about the shape of the heap. This leads to verification algorithms that are more precise than existing techniques. The framework also provides a precise shape-analysis algorithm for concurrent programs. In contrast to most existing verification techniques, we do not put a bound on the number of allocated objects. The framework produces interesting results even when analyzing programs with an unbounded number of threads. The framework is applied to successfully verify the following properties of a concurrent program:
   -Concurrent manipulation of linked-list based ADT preserves the ADT datatype invariant.
   -The program does not perform inconsistent updates due to interference.
   -The program does not reach a deadlock.
   -The program does not produce runtime errors due to illegal thread interactions.
   We also found bugs in erroneous programs violating such properties. A prototype of our framework has been implemented and applied to small, but interesting, example programs.
C1 [Yahav, Eran] IBM TJ Watson Res Ctr, Hawthorne, NY USA.
   [Sagiv, Mooly] Tel Aviv Univ, Sch Comp Sci, IL-69978 Tel Aviv, Israel.
C3 International Business Machines (IBM); Tel Aviv University
RP Yahav, E (corresponding author), IBM TJ Watson Res Ctr, Hawthorne, NY USA.
EM eyahav@us.ibm.com; msagiv@post.tau.ac.il
OI Yahav, Eran/0000-0003-4305-6314
FU Ministry of Science, Israel; Israeli Academy of Science
FX This research was supported by a grant from the Ministry of Science,
   Israel, and also partially supported by the Israeli Academy of Science.
CR ABDULLA PA, 1999, P 11 INT C COMP AID, P146
   Amit Daphna, 2007, P 19 INT C COMP AID
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], 2001, P ACM SIGPLAN 2001 C, DOI DOI 10.1145/378795.378846
   [Anonymous], 1993, P WINT 1993 US C
   [Anonymous], 2005, I KPAI
   [Anonymous], 1997, CONCURRENT PROGRAMMI
   Atig MF, 2009, LECT NOTES COMPUT SC, V5505, P107, DOI 10.1007/978-3-642-00768-2_11
   Balaban I, 2005, LECT NOTES COMPUT SC, V3385, P164
   Bensalem S., 2000, LFM 2000: Fifth NASA Langley Formal Methods Workshop (NASA/CP-2000-210100), P187
   BENSALEM S, 1998, P 10 INT C COMP AID, P505
   Berdine J, 2008, LECT NOTES COMPUT SC, V5123, P399
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Bogudlov I, 2007, LECT NOTES COMPUT SC, V4590, P221
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR, P56
   BOYAPATI C, 2002, P 17 ACM SIGPLAN C O, P211
   BUHR PA, 1995, ACM COMPUT SURV, V27, P63, DOI 10.1145/214037.214100
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CENCIARELLI P, 1999, FORMAL SYNTAX SEMANT, P157
   CHASE DR, 1990, P SIGPLAN 90 C PROGR, P296
   CHOI J, 2001, 22146 IBM RES
   Clarke E, 2006, LECT NOTES COMPUT SC, V3855, P126
   Clarke E, 2008, LECT NOTES COMPUT SC, V4963, P33, DOI 10.1007/978-3-540-78800-3_4
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Clarke EM, 1997, ACM T PROGR LANG SYS, V19, P726, DOI 10.1145/265943.265960
   Clarke EM, 1999, MODEL CHECKING, P1
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Cook B, 2005, LECT NOTES COMPUT SC, V3639, P75
   Corbett JC, 2000, ACM T SOFTW ENG METH, V9, P51, DOI 10.1145/332740.332741
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Das Manuvir., 2002, PLDI, P57, DOI DOI 10.1145/512529.512538
   DAS S, 1999, P 11 INT C COMP AID
   Demartini C, 1999, SOFTWARE PRACT EXPER, V29, P577, DOI 10.1002/(SICI)1097-024X(199906)29:7<577::AID-SPE246>3.0.CO;2-V
   Demartini C, 1999, LECT NOTES COMPUT SC, V1680, P261
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   EMERSON EA, 1993, LECT NOTES COMPUTER, V697, P463
   Engler Dawson., 2003, Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, SOSP '03, P237, DOI DOI 10.1145/945445.945468
   Farzan A, 2004, LECT NOTES COMPUT SC, V3114, P501
   Fink Stephen., 2006, INT S SOFTWARE TESTI, P133, DOI DOI 10.1145/1146238.1146254
   Flanagan C, 2004, LECT NOTES COMPUT SC, V3148, P116
   Flanagan C, 2002, LECT NOTES COMPUT SC, V2305, P262
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1576, P91
   Flanagan C, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P293, DOI 10.1145/1375581.1375618
   Ganai MK, 2008, LECT NOTES COMPUT SC, V5156, P114, DOI 10.1007/978-3-540-85114-1_10
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032
   Goetz B, 2006, JAVA CONCURRENCY PRA
   GOPAN D, 2005, POPL, P338, DOI DOI 10.1145/1040305.1040333
   Gosling J., 1997, The Java Language Specification
   GOTSMAN A, 2009, P 36 ANN ACM S PRINC
   Gotsman A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P266, DOI 10.1145/1250734.1250765
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   GUETA G, 2006, TACS2006052 U TEL AV
   GUETA G, 2007, P 14 WORKSH MOD CHEC
   Havelund K., 2000, International Journal on Software Tools for Technology Transfer (STTT), V2, P366, DOI [10.1007/s100090050043., DOI 10.1007/S100090050043]
   HENZINGER TA, 2004, PLDI, P1
   HERLIHY M, 1991, ACM T PROGR LANG SYS, V13, P124, DOI 10.1145/114005.102808
   Herlihy M., 2008, ART MULTIPROCESSOR P
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   HOLZMANN GJ, 1995, LECT NOTES COMPUTER, V962, P453
   *IBM, 1983, PUBL IBM
   Immerman N, 1998, TEXTS COMPUTER SCI
   ISHTIAQ SS, 2001, P 28 ACM S PRINCIPLE, V1, P14
   Jeannet B, 2004, LECT NOTES COMPUT SC, V3148, P246
   Jones N. D., 1981, Program flow analysis. Theory and applications, P102
   JONES N. D., 1982, P 9 ACM SIGPLAN SIGA, P66, DOI DOI 10.1145/582153.582161
   Lahiri SK, 2009, LECT NOTES COMPUT SC, V5643, P509, DOI 10.1007/978-3-642-02658-4_38
   Lahiri SK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P171, DOI 10.1145/1328438.1328461
   Lal A, 2008, LECT NOTES COMPUT SC, V5123, P37
   Lev-Ami T, 2000, LECT NOTES COMPUT SC, V1824, P280
   Lindholm T., 1997, JAVA VIRTUAL MACHINE
   Manevich R, 2008, LECT NOTES COMPUT SC, V5079, P363
   Manevich R, 2005, LECT NOTES COMPUT SC, V3385, P181
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Michael MM, 2004, IEEE T PARALL DISTR, V15, P491, DOI 10.1109/TPDS.2004.8
   MOLLER A, 2001, PLDI, P221
   Moore JS, 2002, ACM T PROGR LANG SYS, V24, P193, DOI 10.1145/514188.514189
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Netzer R. H. B., 1992, ACM Letters on Programming Languages and Systems, V1, P74, DOI 10.1145/130616.130623
   Nielson F, 2000, LECT NOTES COMPUT SC, V1782, P305
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Pnueli A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P107
   PRAKASH S, 1991, PROC INT CONF PARAL, P68
   Pratikakis P, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1133981.1134019
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   REPS T, 2003, LECT NOTES COMPUTER, V2618
   Reps TW, 2004, LECT NOTES COMPUT SC, V3114, P15
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   RINETZKY N, 2008, INTERPROCEDURAL MODU
   RINETZKY N, 2001, LNCS, V2027, P133
   Rustan K, 2009, LECT NOTES COMPUT SC, V5502, P378, DOI 10.1007/978-3-642-00590-9_27
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Saïdi H, 2000, LECT NOTES COMPUT SC, V1824, P377
   SHAHAM R, 2003, LECT NOTES COMPUTER, V2694
   Silberschatz A., 1994, OPERATING SYSTEMS CO, V4th
   Stoller SD, 2000, LECT NOTES COMPUT SC, V1885, P224
   Stone J. M., 1990, Proceedings of Supercomputing '90 (Cat. No.90CH2916-5), P495, DOI 10.1109/SUPERC.1990.130060
   STONE JM, 1992, P PAR DISTR COMP ENG
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Strom Robert E., 1983, Proceedings of the 10th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, POPL '83, P276, DOI DOI 10.1145/567067.567093
   Vafeiadis V, 2009, LECT NOTES COMPUT SC, V5403, P335, DOI 10.1007/978-3-540-93900-9_27
   Vafeiadis Viktor., 2008, Technical Report UCAM-CL-TR-726
   Vallee-Rai R., 1999, CASCON 1999, P125
   VALMARI A, 1991, LECT NOTES COMPUT SC, V483, P491
   Vechev M, 2009, LECT NOTES COMPUT SC, V5578, P261, DOI 10.1007/978-3-642-02652-2_21
   Vechev M, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P125, DOI 10.1145/1375581.1375598
   Vechev MT, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P456, DOI 10.1145/1250734.1250787
   Vermeulen A, 1997, DR DOBBS J, V22, P52
   WING JM, 1990, CMUCS90151
   Yahav E, 2001, ACM SIGPLAN NOTICES, V36, P27, DOI 10.1145/373243.360206
   YAHAV E, 2004, P ACM SIGPLAN 2004 C, P25, DOI DOI 10.1145/996841.996846
   YAHAV E, 2003, ELECT NOTES THEORETI, V89
   YAHAV E, 2000, 3VMC USERS MANUAL
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
   Zee K, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P349, DOI 10.1145/1375581.1375624
NR 120
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2010
VL 32
IS 5
AR 18
DI 10.1145/1745312.1745315
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 618OY
UT WOS:000279366700003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Park, S
   Pfenning, F
   Thrun, S
AF Park, Sungwoo
   Pfenning, Frank
   Thrun, Sebastian
TI A Probabilistic Language Based on Sampling Functions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Experimentation; Probabilistic language; probability
   distribution; sampling function; robotics
AB As probabilistic computations play an increasing role in solving various problems, researchers have designed probabilistic languages which treat probability distributions as primitive datatypes. Most probabilistic languages, however, focus only on discrete distributions and have limited expressive power. This article presents a probabilistic language, called lambda(circle), whose expressive power is beyond discrete distributions. Rich expressiveness of lambda(circle) is due to its use of sampling functions, that is, mappings from the unit interval ( 0.0, 1.0] to probability domains, in specifying probability distributions. As such, lambda(circle) enables programmers to formally express and reason about sampling methods developed in simulation theory. The use of lambda(circle) is demonstrated with three applications in robotics: robot localization, people tracking, and robotic mapping. All experiments have been carried out with real robots.
C1 [Park, Sungwoo] Pohang Univ Sci & Technol, Dept Comp Sci & Engn, Pohang, South Korea.
   [Pfenning, Frank] Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
   [Thrun, Sebastian] Stanford Univ, Dept Comp Sci, Stanford, CA 94305 USA.
C3 Pohang University of Science & Technology (POSTECH); Carnegie Mellon
   University; Stanford University
RP Park, S (corresponding author), Pohang Univ Sci & Technol, Dept Comp Sci & Engn, Pohang, South Korea.
EM gla@postech.ac.kr; fp@cs.cmu.edu; thrun@stanford.edu
CR [Anonymous], P IEEE INT C ROB AUT
   [Anonymous], 1978, LNCS
   [Anonymous], 1993, Statistical Language Learning
   Bratley P., 1996, A guide to Simulation
   Devroye L., 1986, Non-Uniform Random Variate Generation
   Doucet A, 2001, STAT ENG IN, P3
   Fox D, 1999, J ARTIF INTELL RES, V11, P391, DOI 10.1613/jair.616
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   GILL J, 1977, SIAM J COMPUT, V6, P675, DOI 10.1137/0206049
   GUPTA V, 1999, POPL, P189
   Henrion M., 1988, Machine intelligence and pattern recognition, V2, P149, DOI [10.1016/B978-0-444-70396-5.50019-4, DOI 10.1016/B978-0-444-70396-5.50019-4]
   Isard M, 1998, INT J COMPUT VISION, V29, P5, DOI 10.1023/A:1008078328650
   Jazwinski AH, 1970, STOCHASTIC PROCESSES
   Jelinek Frederick., 1998, Statistical Methods for Speech Recognition
   Jones C., 1990, THESIS U EDINBURGH
   JONES SLP, 1993, P 20 ACM SIGPLAN SIG, P71, DOI DOI 10.1145/158511.158524
   Koller Daphne, 1997, P 14 NAT C ART INT 1, P740
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   Leroy X., 2000, Journal of Functional Programming, V10, P269, DOI 10.1017/S0956796800003683
   Mackay DJC, 1998, NATO ADV SCI I D-BEH, V89, P175
   Martin-Lof P., 1996, Nordic J. Philosophical Logic, V1, P11
   Mogensen T, 2003, LECT NOTES COMPUT SC, V2562, P145
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Montemerlo M, 2002, 2002 IEEE INTERNATIONAL CONFERENCE ON ROBOTICS AND AUTOMATION, VOLS I-IV, PROCEEDINGS, P695, DOI 10.1109/ROBOT.2002.1013439
   MONTEMERLO M, 2003, THESIS CARNEGIE MELL
   MONTEMERLO M, CARMEN CARNEGIE MELL
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   PARK S, 2003, P 2003 ACM SIGPLAN I, P38
   Peyton Jones S., 2001, ENG THEORIES SOFTWAR
   Pfeffer A., 2001, IJCAI
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pless D., 2001, UAI 01, P429
   RABINER LR, 1989, P IEEE, V77, P257, DOI 10.1109/5.18626
   Ramsey N., 2002, SIGPLAN Notices, V37, P154, DOI 10.1145/565816.503288
   Rudin W., 1986, Real and Complex Analysis
   Russell S., 1995, Prentice Hall series in artificial intelligence, V25, P27
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Thrun S, 2000, AI MAG, V21, P93
   Thrun S., 2002, EXPLORING ARTIFICIAL, P1, DOI DOI 10.5555/779343.779345
   Welch G., 1995, INTRO KALMAN FILTER
NR 42
TC 25
Z9 29
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2008
VL 31
IS 1
AR 4
DI 10.1145/1452044.1452048
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 393TC
UT WOS:000262394800004
OA Bronze
DA 2024-07-18
ER

PT J
AU Hicks, M
   Nettles, S
AF Hicks, M
   Nettles, S
TI Dynamic software updating
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE dynamic software updating; typed assembly language
ID PROGRAM; SYSTEMS
AB Many important applications must run continuously and without interruption, and yet also must be changed to fix bugs or upgrade functionality. No prior general-purpose methodology for dynamic updating achieves a practical balance between flexibility, robustness, low overhead, ease of use, and low cost.
   We present an approach for C-like languages that provides type-safe dynamic updating of native code in an extremely flexible manner-code, data, and types may be updated, at programmer-determined times-and permits the use of automated tools to aid the programmer in the updating process. Our system is based on dynamic patches that contain both the updated code and the code needed to transition from the old version to the new. A novel aspect of our patches is that they consist of verifiable native code (e.g. Proof-Carrying Code or Typed Assembly Language), which is native code accompanied by annotations that allow online verification of the code's safety. We discuss how patches are generated mostly automatically, how they are applied using dynamic-linking technology, and how code is compiled to make it updateable.
   To concretely illustrate our system, we have implemented a dynamically updateable web server, FlashEd. We discuss our experience building and maintaining FlashEd, and generalize to present observations about updateable software development. Performance experiments show that for FlashEd, the overhead due to updating is low: typically less than 1 percent.
C1 Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
   Univ Texas, Austin, TX 78712 USA.
C3 University System of Maryland; University of Maryland College Park;
   University of Texas System; University of Texas Austin
RP Univ Maryland, Dept Comp Sci, AV Williams Bldg, College Pk, MD 20742 USA.
EM mwh@cs.umd.edu; nettles@ece.utexas.edu
OI Hicks, Michael/0000-0002-2759-9223
CR [Anonymous], P 1 WORKSH ENG COMPL
   [Anonymous], 1981, Concepts of nonparametric theory
   [Anonymous], TRCS9605
   [Anonymous], P ACM WORKSH COMP SU
   APPEL A, 1994, UNPUB HOT SLIDINT ML
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   BALASUBRAMANIAM S, 1998, P 4 ANN ACM IEEE INT, P98, DOI DOI 10.1145/288235.288261
   BLOOM T, 1993, SOFTWARE ENG J, V8, P102, DOI 10.1049/sej.1993.0014
   BLOOM T, 1983, THESIS MIT
   BOERMAN G, 2003, P 2 INT WORKSH UN SO
   BOYAPATI C, 2003, P ACM C OBJ OR PROGR, P403
   Buck B, 2000, INT J HIGH PERFORM C, V14, P317, DOI 10.1177/109434200001400404
   Crossman D., 2000, Proceedings of the ACM SIGPLAN Workshop on Types in Compilation, V2071, P117
   DUGGAN D, 2001, P 6 ACM SIGPLAN INT, P62, DOI DOI 10.1145/507635.507645
   FRIEDER O, 1991, J SYST SOFTWARE, V14, P111, DOI 10.1016/0164-1212(91)90096-O
   Gamsa B, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRD SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '99), P87
   GARLAN D, 1986, P SIGSOFT SIGPLAN SO, P160
   GILMORE S, 1997, ECSLFCS97378 U ED LA
   GUPTA D, 1993, SOFTWARE PRACT EXPER, V23, P949, DOI 10.1002/spe.4380230903
   Gupta D, 1996, IEEE T SOFTWARE ENG, V22, P120, DOI 10.1109/32.485222
   GUPTA D, 1994, THESIS INDIAN I TECH
   HICKS M, 2001, P ACM SIGPLAN C PROG, P13
   HICKS M, 2000, LECT NOTES COMPUTER, V2071, P147
   Hicks Michael, 2001, Ph. D. Dissertation
   Hjalmtysson G, 1998, PROCEEDINGS OF THE USENIX 1998 ANNUAL TECHNICAL CONFERENCE, P65
   HOFMEISTER C, 1993, THESIS U MARYLAND CO
   *JAV, 2002, JAV HOTSP VIRT MACH, pD2
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   Lee I., 1983, Ph.D. dissertation
   MAGEE J, 1989, IEEE T SOFTWARE ENG, V15, P663, DOI 10.1109/32.24720
   MALABARBA S, 2000, P 14 EUR C OBJ OR PR, V1850
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Mosberger D., 1998, Performance Evaluation Review, V26, P31, DOI 10.1145/306225.306235
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   OEHLER M, 1997, 2085 RFC
   PAI VS, 1999, P USENIX ANN TECHN C, P106
   PESCOVITZ D, 2000, WIRED, V8, P341
   PETERSON J, 1997, YALEUDCSRR1135
   Ramkumar B, 1997, DIG PAP INT SYMP FAU, P58, DOI 10.1109/FTCS.1997.614078
   SEGAL ME, 1993, IEEE SOFTWARE, V10, P53, DOI 10.1109/52.199735
   SEWELL P, 2001, P 28 ACM SIGPLAN SIG, P236
   Soules CAN, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P141
   Tennenhouse DL, 1997, IEEE COMMUN MAG, V35, P80, DOI 10.1109/35.568214
   *TOOL INT STAND CO, 1995, EXC LINK FORM ELF SP
   *WEBST, 2001, MINDCR WEBST BENCHM
NR 45
TC 92
Z9 196
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2005
VL 27
IS 6
BP 1049
EP 1096
DI 10.1145/1108970.1108971
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 005EG
UT WOS:000234804800001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Nguyen, TVN
   Irigoin, F
AF Nguyen, TVN
   Irigoin, F
TI Efficient and effective array bound checking
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE array bound checking; interprocedural analysis
ID DATA-FLOW ANALYSIS; OPTIMIZATION; JAVA
AB Array bound checking refers to determining whether all array references in a program are within their declared ranges. This checking is critical for software verification and validation because subscripting arrays beyond their declared sizes may produce unexpected results, security holes, or failures. It is available in most commercial compilers but current implementations are not as efficient and effective as one may have hoped: (1) the execution times of array bound checked programs are increased by a factor of up to 5, (2) the compilation times are increased, which is detrimental to development and debugging, (3) the related error messages do not usually carry information to locate the faulty references, and (4) the consistency between actual array sizes and formal array declarations is not often checked.
   This article presents two optimization techniques that deal with Points 1, 2, and 3, and a new algorithm to tackle Point 4, which is not addressed by the current literature. The first optimization technique is based on the elimination of redundant tests, to provide very accurate information about faulty references during development and testing phases. The second one is based on the insertion of unavoidable tests to provide the smallest possible slowdown during the production phase. The new algorithm ensures the absence of bound violations in every array access in the called procedure with respect to the array declarations in the calling procedure. Our experiments suggest that the optimization of array bound checking depends on several factors, not only the percentage of removed checks, usually considered as the best improvement measuring metrics. The debugging capability and compile-time and run-time performances of our techniques are better than current implementations. The execution times of SPEC95 CFP benchmarks with range checking added by PIPS, our Fortran research compiler, are slightly longer, less than 20%, than that of unchecked programs. More problems due to functional and data recursion would have to be solved to extend these results from Fortran to other languages such as C, C++, or Java, but the issues addressed in this article are nevertheless relevant.
C1 LSIIT, ICPS, F-67412 Illkirch Graffenstaden, France.
   Ecole Mines Paris, Ctr Rech Informat, F-77305 Fontainebleau, France.
C3 Universite PSL; MINES ParisTech
RP LSIIT, ICPS, Parc Innovat,Blvd Sebast Brant,BP 10413, F-67412 Illkirch Graffenstaden, France.
EM nguyen@icps.u-strasbg.fr; irigoin@cri.ensmp.fr
RI Nguyen, Nga/AAP-8351-2020; Nguyen, Nga/JNR-1777-2023
OI Nguyen, Nga/0000-0003-3273-8272; 
CR AGGARWAL A, 2001, P ACM SIGPLAN C PROG, P214
   Aho A.V., 1986, COMPILERS PRINCIPLES
   ALLEN F, 1988, J PARALLEL DISTR COM, V5, P617, DOI 10.1016/0743-7315(88)90015-9
   AMI TL, 2000, P INT S SOFTW TEST A, P26
   Ancourt C, 2001, ACM SIGPLAN NOTICES, P32
   Ancourt Corinne., 1991, PPOPP 91 P 3 ACM SIG, P39, DOI [DOI 10.1145/109625.109631, 10.1145/109625.109631]
   [Anonymous], PLDI 98
   *ANSI, 1983, X391978 ANSI
   Asuru J. M., 1992, ACM Letters on Programming Languages and Systems, V1, P109, DOI 10.1145/151333.151392
   Austin ToddM., 1994, P ACM SIGPLAN 1994 C, P290
   Bodik R, 2000, ACM SIGPLAN NOTICES, V35, P321, DOI 10.1145/358438.349342
   CALLAHAN D, 1988, J PARALLEL DISTR COM, V5, P517, DOI 10.1016/0743-7315(88)90011-1
   CHIN WN, 1995, ACM T PROGR LANG SYS, V17, P217, DOI 10.1145/201059.201063
   Cousot P., 1977, P IFIP C FORM DESCR, P237
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   CREUSILLET B, 1995, LECT NOTES COMPUTER, V1033, P46
   DELZANNO G, 2000, UNPUB STATIC ANAL AR
   Dor N, 2001, LECT NOTES COMPUT SC, V2126, P194
   DUESTERWALD E, 1993, P ACM SIGPLAN 93 C P, P68
   DUJMOVIC J, 1998, ACM SIGMETRICS PERFO, V26, P2
   Evans D, 2002, IEEE SOFTWARE, V19, P42, DOI 10.1109/52.976940
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   Gu JJ, 2000, IEEE T SOFTWARE ENG, V26, P244, DOI 10.1109/32.842950
   Gupta M, 2000, INT J PARALLEL PROG, V28, P537, DOI 10.1023/A:1007560600904
   GUPTA R, 1990, SIGPLAN NOTICES, V25, P272, DOI 10.1145/93548.93581
   Gupta R., 1993, ACM Letters on Programming Languages and Systems, V2, P135, DOI 10.1145/176454.176507
   HALL M, 1995, LNCS, V1033, P61
   HARRISON WH, 1977, IEEE T SOFTWARE ENG, V3, P243, DOI 10.1109/TSE.1977.231133
   Hastings Reed., 1992, WINTER USENIX C, P125
   Hind M., 1994, Scientific Programming, V3, P255
   Hoeflinger JP, 2001, INT J PARALLEL PROG, V29, P185, DOI 10.1023/A:1007685003043
   IRIGOIN F, 1991, P INT C SUP, P144
   Jones R. W. M., 1997, P 3 INT WORKSH AUT D
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Kolte P., 1995, Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'95). (La Jolla, CA, P270, DOI DOI 10.1145/207110.207160
   KOWSHIK S, 2002, P INT C COMP ARCH SY
   LESERVOT A, 1996, THESIS U PARIS 6 PAR
   LIN Y, 1999, LECT NOTES COMPUTER, V1863, P303
   Manjunathaiah M., 1997, Scientific Programming, V6, P229
   MARKSTEIN V, 1982, ACM SIGPLAN NOTICES, V17, P114
   Maydan D.E., 1993, POPL '93: Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P2
   Midkiff SP, 1998, IBM SYST J, V37, P409, DOI 10.1147/sj.373.0409
   Moreira JE, 2000, ACM T PROGR LANG SYS, V22, P265, DOI 10.1145/349214.349222
   Moreira JE, 2001, COMMUN ACM, V44, P102, DOI 10.1145/383845.383867
   Muchnick S., 1997, ADV COMPILER DESIGN
   NGUYEN T, 1995, LECT NOTES COMPUTER, V1033, P96
   NGUYEN TVN, 2002, THESIS ECOLE MINES P
   Paek Y, 2002, ACM T PROGR LANG SYS, V24, P65, DOI 10.1145/509705.509708
   Patil H, 1997, SOFTWARE PRACT EXPER, V27, P87, DOI 10.1002/(SICI)1097-024X(199701)27:1<87::AID-SPE78>3.0.CO;2-P
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   Qian F, 2002, LECT NOTES COMPUT SC, V2304, P325
   REUSILLET B, 1996, LECT NOTES COMPUTER, V1239, P86
   RICHARDSON S, 1989, SOFTWARE PRACT EXPER, V19, P149, DOI 10.1002/spe.4380190205
   RUGINA R, 2000, P ACM SIGPLAN 00 C P, P182
   Schrijver A., 1998, THEORY LINEAR INTEGE
   SCHWARZ B, 1988, P ACM SIGPLAN 88 C P, P175
   SPEZIALETTI M, 1995, IEEE T SOFTWARE ENG, V21, P497, DOI 10.1109/32.391376
   STEFFEN JL, 1992, SOFTWARE PRACT EXPER, V22, P305, DOI 10.1002/spe.4380220403
   Suzuki N., 1977, POPL 77, P132
   TRIOLET R, 1986, P EUR S PROGR
   TU P, 1995, P 9 ACM INT C SUP BA, P414
   WAGNER D, 2000, THESIS U CALIFORNIA
   WELSH J, 1978, SOFTWARE PRACT EXPER, V8, P85, DOI 10.1002/spe.4380080110
NR 64
TC 9
Z9 15
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2005
VL 27
IS 3
BP 527
EP 570
DI 10.1145/1065887.1065893
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 937OF
UT WOS:000229934700006
OA Bronze
DA 2024-07-18
ER

PT J
AU Masud, A
   Lisper, B
AF Masud, Abu Naser
   Lisper, Bjorn
TI Semantic Correctness of Dependence-based Slicing for Interprocedural,
   Possibly Nonterminating Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Correctness of slicing; static slicing; semi-equivalence; simulation;
   bisimulation; nontermination; nondeterminism; interprocedural program
ID GRAPH
AB Existing proofs of correctness for dependence-based slicing methods are limited either to the slicing of intraprocedural programs [2, 39], or the proof is only applicable to a specific slicing method [4, 41]. We contribute a general proof of correctness for dependence-based slicing methods such as Weiser [50, 51], or Binkley et al. [7, 8], for interprocedural, possibly nonterminating programs. The proof uses well-formed weak and strong control closure relations, which are the interprocedural extensions of the generalised weak/strong control closure provided by Danicic et al. [13], capturing various nonterminating-insensitive and nontermination-sensitive control-dependence relations that have been proposed in the literature. Thus, our proof framework is valid for a whole range of existing control-dependence relations.
   We have provided a definition of semantically correct (SC) slice. We prove that SC slices agree with Weiser slicing, that deterministic SC slices preserve termination, and that nondeterministic SC slices preserve the nondeterministic behavior of the original programs.
C1 [Masud, Abu Naser; Lisper, Bjorn] Malardalen Univ, Sch Innovat Design & Engn, Vasteras, Sweden.
C3 Malardalen University
RP Masud, A (corresponding author), Malardalen Univ, Sch Innovat Design & Engn, Vasteras, Sweden.
EM masud.abunaser@mdh.se; bjorn.lisper@mdh.se
RI Masud, Abu Naser/IWU-5778-2023
OI Masud, Abu Naser/0000-0002-4872-1208
FU Knowledge Foundation through the SPACES project; Knowledge Foundation
   through the HERO project
FX This research has been supported by the Knowledge Foundation through the
   SPACES and HERO projects.
CR Allen M., 2003, SIGPLAN Notices, V38, P284, DOI 10.1145/966049.777394
   Amtoft T., 2007, CORRECTNESS PRACTICA
   Amtoft T, 2008, INFORM PROCESS LETT, V106, P45, DOI 10.1016/j.ipl.2007.10.002
   Ball T., 1993, Automated and Algorithmic Debugging. First International Workshop, AADEBUG '93 Proceedings, P206, DOI 10.1007/BFb0019410
   Barraclough RW, 2010, THEOR COMPUT SCI, V411, P1372, DOI 10.1016/j.tcs.2009.10.025
   Binkley D., 1993, ACM Letters on Programming Languages and Systems, V2, P31, DOI 10.1145/176454.176473
   Binkley D., 1996, Advances in Computers, V43, P1
   Binkley D, 2006, THEOR COMPUT SCI, V360, P23, DOI 10.1016/j.tcs.2006.01.012
   Binkley D, 2006, SCI COMPUT PROGRAM, V62, P228, DOI 10.1016/j.scico.2006.04.007
   CARTWRIGHT R, 1989, SIGPLAN NOTICES, V24, P13, DOI 10.1145/74818.74820
   Chaturvedi A, 2021, IEEE T SERV COMPUT, V14, P930, DOI 10.1109/TSC.2018.2821157
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Danicic S, 2007, J LOGIC ALGEBR PROGR, V72, P191, DOI 10.1016/j.jlap.2007.02.010
   Danicic S, 2011, THEOR COMPUT SCI, V412, P6809, DOI 10.1016/j.tcs.2011.08.033
   Engblom J, 1999, ACM SIGPLAN NOTICES, V34, P96, DOI 10.1145/315253.314470
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Giacobazzi R., 2003, Higher-Order and Symbolic Computation, V16, P297, DOI 10.1023/A:1025872819613
   HAREL D, 1981, THEOR COMPUT SCI, V13, P175, DOI 10.1016/0304-3975(81)90038-4
   Hatcliff J, 1999, LECT NOTES COMPUT SC, V1694, P1
   Hong HS, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P25
   HORWITZ S, 1988, SIGPLAN NOTICES, V23, P35
   Hwang J. C., 1988, Proceedings COMPSAC 88: The Twelfth International Computer Software and Applications Conference (Cat. No.88CH2611-2), P220, DOI 10.1109/CMPSAC.1988.17176
   Jackson D., 1994, SIGSOFT Software Engineering Notes, V19, P2, DOI 10.1145/195274.195281
   Johnsen Andreas, 2014, P 10 INT ACM SIGS C, P103
   Khanfar Husni, 2015, Reliable Software Technologies - Ada-Europe 2015. 20th Ada-Europe International Conference on Reliable Software Technologies. Proceedings: LNCS 9111, P50, DOI 10.1007/978-3-319-19584-1_4
   Khanfar Husni, 2016, P 5 INT VAL TURCH WO
   Lisper B, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P115, DOI 10.1145/2678015.2682538
   Loyall J. P., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P282, DOI 10.1109/ICSM.1993.366934
   Lyle J. R., 1984, THESIS
   Mao JL, 2009, MODELLING SIMULATION, P1
   Mastroeni I, 2017, ACM T COMPUT LOG, V18, DOI 10.1145/3029052
   Nestra H., 2005, Proceedings of the Estonian Academy of Sciences (Engineering), V11, P313
   Nielson Hanne Riis, 2007, Undergraduate Topics in Computer Science
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Pingali K, 1997, ACM T PROGR LANG SYS, V19, P462, DOI 10.1145/256167.256217
   PODGURSKI A, 1990, IEEE T SOFTWARE ENG, V16, P965, DOI 10.1109/32.58784
   Prosser R.T., 1959, DEC 1 3 1959 E JOINT, P133, DOI DOI 10.1145/1460299.1460314
   Ranganath Venkatesh Prasad, 2007, ACM T PROGR LANG SYS, V29
   Ranganath VP, 2005, LECT NOTES COMPUT SC, V3444, P77
   REPS T, 1989, LECT NOTES COMPUT SC, V352, P360
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Silva J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187674
   Sinha S, 2001, ACM T SOFTW ENG METH, V10, P209, DOI 10.1145/367008.367022
   Ward M, 2008, SOFTWARE PRACT EXPER, V38, P1273, DOI 10.1002/spe.869
   Ward M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216375
   Ward Martin P., 2017, J SOFTW-EVOL PROC, V29, P1
   Ward MP, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P88, DOI 10.1109/SCAM.2003.1238035
   Ward MP, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P185, DOI 10.1109/SCAM.2001.972680
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Weiser Mark D., 1979, P 5 INT C SOFTW ENG, P439
NR 51
TC 5
Z9 5
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD FEB
PY 2021
VL 42
IS 4
AR 19
DI 10.1145/3434489
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QH3TK
UT WOS:000618199200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Swalens, J
   De Koster, J
   De Meuter, W
AF Swalens, Janwillem
   De Koster, Joeri
   De Meuter, Wolfgang
TI Chocola: Composable Concurrency Language
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Futures; software transactional memory; actor model
ID MODEL
AB Programmers often combine different concurrency models in a single program, in each part of the program using the model that fits best. Many programming languages, such as Clojure, Scala, and Java, cater to this need by supporting different concurrency models. However, existing programming languages often combine concurrency models in an ad hoc way, and the semantics of the combinations are not always well defined.
   This article studies the combination of three concurrency models: futures, transactions, and actors. We show that a naive combination of these models invalidates the guarantees they normally provide, thereby breaking the assumptions of programmers. Hence, we present Chocola: a unified language of futures, transactions, and actors that maintains the guarantees of all three models wherever possible, even when they are combined.
   We describe and formalize the semantics of this language and prove the guarantees it provides. We also provide an implementation as an extension of Clojure and demonstrated that it can improve the performance of three benchmark applications for relatively little effort from the developer.
C1 [Swalens, Janwillem; De Koster, Joeri; De Meuter, Wolfgang] Vrije Univ Brussel, Pl Laan 2, B-1050 Brussels, Belgium.
C3 Vrije Universiteit Brussel
RP Swalens, J (corresponding author), Vrije Univ Brussel, Pl Laan 2, B-1050 Brussels, Belgium.
EM janwillem.swalens@vub.be; joeri.de.koster@vub.be;
   wolfgang.de.meuter@vub.be
RI De Koster, Joeri/JPL-5385-2023
OI De Koster, Joeri/0000-0002-2932-8208; DE MEUTER,
   WOLFGANG/0000-0002-5229-5627; Swalens, Janwillem/0000-0001-9951-1043
CR Agha G. A., 1997, Journal of Functional Programming, V7, P1, DOI 10.1017/S095679689700261X
   Agha Gul, 1985, THESIS
   Agrawal K, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P163, DOI 10.1145/1345206.1345232
   [Anonymous], 2003, P INT PARALLEL DISTR, DOI DOI 10.1109/IPDPS.2003.1213511
   [Anonymous], 2004, Concepts, techniques, and models of computer programming
   [Anonymous], 2011, ART MULTIPROCESSOR P
   Baek W, 2010, SPAA '10: PROCEEDINGS OF THE TWENTY-SECOND ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P253
   Baker H. G.  Jr., 1977, SIGPLAN Notices, V12, P55, DOI 10.1145/872734.806932
   Barreto J, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P91, DOI 10.1145/1693453.1693466
   Barrett Edd, 2017, P ACM PROG LANG
   BEERI C, 1989, J ACM, V36, P230, DOI 10.1145/62044.62046
   Berenson H., 1995, SIGMOD Record, V24, P1, DOI 10.1145/568271.223785
   BERNSTEIN PA, 1981, COMPUT SURV, V13, P185, DOI 10.1145/356842.356846
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Bocchino Robert L, 2009, 1 USENIX C HOT TOP P
   Brandauer S, 2015, LECT NOTES COMPUT SC, V9104, P1, DOI 10.1007/978-3-319-18941-3_1
   Budimlic Z, 2010, SCI PROGRAMMING-NETH, V18, P203, DOI 10.3233/SPR-2011-0305
   Burckhardt S, 2011, LECT NOTES COMPUT SC, V6602, P116, DOI 10.1007/978-3-642-19718-5_7
   Burckhardt S, 2010, ACM SIGPLAN NOTICES, V45, P691, DOI 10.1145/1932682.1869515
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   De Koster J, 2016, PROCEEDINGS OF THE 6TH INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'16), P31, DOI 10.1145/3001886.3001890
   De Koster J, 2016, COMPUT LANG SYST STR, V45, P132, DOI 10.1016/j.cl.2016.01.003
   De Koster Joeri, 2015, THESIS
   Denning PJ, 2010, COMMUN ACM, V53, P30, DOI 10.1145/1743546.1743560
   DIJKSTRA EW, 1965, COMMUN ACM, V8, P569, DOI 10.1145/365559.365617
   Eliot J., 1981, THESIS
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Flanagan C., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P209, DOI 10.1145/199448.199484
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Godefroid Patrice, 2008, TECHNICAL REPORT
   Guerraoui R, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P175, DOI 10.1145/1345206.1345233
   HAINES N, 1994, ACM T PROGR LANG SYS, V16, P1719, DOI 10.1145/197320.197346
   Halloway S., 2009, Programming Clojure
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Harris T, 2003, ACM SIGPLAN NOTICES, V38, P388, DOI 10.1145/949343.949340
   Harris T., 2010, T MEMORY
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   HERLIHY M, 1993, CONF PROC INT SYMP C, P289, DOI 10.1145/173682.165164
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Hovemeyer D., 2004, P PODC WORKSH CONC S
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Imam S, 2012, ACM SIGPLAN NOTICES, V47, P753, DOI 10.1145/2398857.2384671
   Lee EA, 2006, COMPUTER, V39, P33, DOI 10.1109/MC.2006.180
   Lee JK, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P25, DOI 10.1145/1693453.1693459
   Lesani M, 2011, ACM SIGPLAN NOTICES, V46, P157, DOI 10.1145/2038037.1941577
   Lesani Mohsen, 2013, P AGERE 13, P69
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Luchangco V, 2011, ACM SIGPLAN NOTICES, V46, P169, DOI 10.1145/2038037.1941578
   Minh CC, 2008, I S WORKL CHAR PROC, P31
   Morandi B, 2014, LECT NOTES COMPUT SC, V8459, P99, DOI 10.1007/978-3-662-43376-8_7
   Moss JEB, 2006, SCI COMPUT PROGRAM, V63, P186, DOI 10.1016/j.scico.2006.05.010
   Nash Michael., 2016, Applied Akka Patterns: A Hands-On Guide to Designing Distributed Applications, V1st
   Shavit N, 1997, DISTRIB COMPUT, V10, P99, DOI 10.1007/s004460050028
   Smaragdakis Y, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P191
   Swalens J., 2017, P 4 ACM SIGPLAN INT, P31, DOI DOI 10.1145/3141865.3141866
   Swalens J, 2014, ELECTRON PROC THEOR, P54, DOI 10.4204/EPTCS.155.8
   Swalens Janwillem, 2016, P 30 EUR C OBJ OR PR, DOI [10.4230/LIPIcs.ECOOP.2016.23, DOI 10.4230/LIPICS.ECOOP.2016.23]
   Tanenbaum A., 2014, MODERN OPERATING SYS
   Tasharofi S, 2013, LECT NOTES COMPUT SC, V7920, P302, DOI 10.1007/978-3-642-39038-8_13
   Vitek J, 2004, LECT NOTES COMPUT SC, V2986, P249
   Volos H, 2009, ACM SIGPLAN NOTICES, V44, P291, DOI 10.1145/1594835.1504220
   Warth A, 2011, LECT NOTES COMPUT SC, V6813, P179, DOI 10.1007/978-3-642-22655-7_9
   Welc A, 2005, ACM SIGPLAN NOTICES, V40, P439, DOI 10.1145/1103845.1094845
   YONEZAWA A, 1986, SIGPLAN NOTICES, V21, P258, DOI 10.1145/960112.28722
   Zeng J, 2016, PROC INT CONF PARAL, P442, DOI 10.1109/ICPP.2016.57
   Zhang XY, 2009, INT SYM CODE GENER, P47, DOI 10.1109/CGO.2009.15
   Zhang Yang, 2006, P WORKSH HEUR SEARCH
NR 68
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD FEB
PY 2021
VL 42
IS 4
AR 17
DI 10.1145/3427201
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QH3TK
UT WOS:000618199200002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Banerjee, A
   Naumann, DA
   Nikouel, M
AF Banerjee, Anindya
   Naumann, David A.
   Nikouel, Mohammad
TI A Logical Analysis of Framing for Specifications with Pure Method Calls
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Pure methods; specifications; read effect; framing; local reasoning
ID DYNAMIC FRAMES; VERIFICATION; PURITY
AB For specifying and reasoning about object-based programs, it is often attractive for contracts to be expressed using calls to pure methods. It is useful for pure methods to have contracts, including read effects, to support local reasoning based on frame conditions. This leads to puzzles such as the use of a pure method in its own contract. These ideas have been explored in connection with verification tools based on axiomatic semantics, guided by the need to avoid logical inconsistency, and focusing on encodings that cater for first-order automated provers. This article adds pure methods and read effects to region logic, a first-order program logic that features frame-based local reasoning and provides modular reasoning principles for end-to-end correctness. Modular reasoning is embodied in a proof rule for linking a module's method implementations with a client that relies on the method contracts. Soundness is proved with respect to conventional operational semantics and uses an extensional (i.e, relational) interpretation of read effects. Applicability to tools based on SMT solvers is demonstrated through machine-checked verification of examples. The developments in this article can guide the implementations of linking as used in modular verifiers and serve as a basis for studying observationally pure methods and encapsulation.
C1 [Banerjee, Anindya] IMDEA Software Inst, Edificio IMDEA Software,Campus Montegancedo S-N, Madrid 28223, Spain.
   [Naumann, David A.; Nikouel, Mohammad] Stevens Inst Technol, Hoboken, NJ 07030 USA.
C3 IMDEA Software Institute; Stevens Institute of Technology
RP Banerjee, A (corresponding author), IMDEA Software Inst, Edificio IMDEA Software,Campus Montegancedo S-N, Madrid 28223, Spain.
EM anindya.banerjee@imdea.org; naumann@cs.stevens.edu; snikouei@stevens.edu
OI Banerjee, Anindya/0000-0001-9979-1292; Naumann,
   David/0000-0002-7634-6150
FU U.S. National Science Foundation (NSF); NSF [CNS-1228930, CCF-1649894,
   CNS-1718713]
FX A. Banerjee was partially supported by the U.S. National Science
   Foundation (NSF). D.A. Naumann was partially supported by NSF awards
   CNS-1228930, CCF-1649894, and CNS-1718713. M. Nikouei was partially
   supported by NSF awards CNS-1228930 and CCF-1649894. Any opinion,
   findings, and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   NSF.
CR Aldrich Jonathan, 2008, 7 INT WORKSH SPEC VE
   Amtoft T, 2006, ACM SIGPLAN NOTICES, V41, P91, DOI 10.1145/1111320.1111046
   [Anonymous], 2008, WORKSHOP SPECIFICATI
   Apt K. R., 2009, VERIFICATION SEQUENT, DOI DOI 10.1007/978-1-84882-745-5
   Banerjee A, 2005, J ACM, V52, P894, DOI 10.1145/1101821.1101824
   Banerjee Anindya, 2014, Verified Software: Theories, Tools and Experiments. 6th International Conference, VSTTE 2014. Revised Selected Papers: LNCS 8471, P3, DOI 10.1007/978-3-319-12154-3_1
   Banerjee A, 2013, J ACM, V60, DOI [10.1145/2487241.2485981, 10.1145/2485981]
   Banerjee A, 2013, J ACM, V60, DOI [10.1145/2487241.2485982, 10.1145/2485982]
   Banerjee Anindya, 2016, TECHNICAL REPORT, V11, P1, DOI [10.4230/LIPIcs.FSTTCS.2016.11, DOI 10.4230/LIPICS.FSTTCS.2016.11]
   Bao YY, 2015, 17TH WORKSHOP ON FORMAL TECHNIQUES FOR JAVA-LIKE PROGRAMS (FTFJP 2015), DOI 10.1145/2786536.2786537
   Bao Yuyan, 2017, CSTR1705 U CENTR FLO
   Barnett M., 2004, ECOOP WORKSHOP FORMA
   Barnett M, 2011, COMMUN ACM, V54, P81, DOI 10.1145/1953122.1953145
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Beckert B., 2007, LNCS, V4334, DOI [10.1007/978-3-540-69061-0, DOI 10.1007/978-3-540-69061-0]
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Benton Nick, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P87, DOI 10.1145/1273920.1273932
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   Bobot Francois., 2012, Formal Methods and Software Engineering, volume 7635 of Lecture Notes in Computer Science, V7635, P167
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Bradley A.R., 2007, The Calculus of Computation-Decision Procedures with Applications to Verification, DOI [DOI 10.1007/978-3-540-74113-8, 10.1007/978-3-540-74113-8]
   Cok DR, 2005, J OBJECT TECHNOL, V4, P77, DOI 10.5381/jot.2005.4.8.a4
   Darvas A, 2008, LECT NOTES ARTIF INT, V5195, P100, DOI 10.1007/978-3-540-71070-7_8
   Darvas A, 2006, J OBJECT TECHNOL, V5, P59, DOI 10.5381/jot.2006.5.5.a3
   Darvas A, 2007, LECT NOTES COMPUT SC, V4422, P336
   Filliâtre JC, 2016, FORM METHOD SYST DES, V48, P152, DOI 10.1007/s10703-016-0243-x
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Hatcliff J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187678
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Heule S, 2013, LECT NOTES COMPUT SC, V7920, P451, DOI 10.1007/978-3-642-39038-8_19
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Kassios IT, 2011, FORM ASP COMPUT, V23, P267, DOI 10.1007/s00165-010-0152-5
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Leavens GT, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2766446
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Leino KRM, 2008, LECT NOTES COMPUT SC, V4960, P307
   Leino KRM, 2009, LECT NOTES COMPUT SC, V5503, P231
   Leino KRM, 2002, ACM SIGPLAN NOTICES, V37, P246, DOI 10.1145/543552.512559
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Nanevski A, 2007, LECT NOTES COMPUT SC, V4421, P189
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Naumann DA, 2007, THEOR COMPUT SCI, V376, P205, DOI 10.1016/j.tcs.2007.02.004
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Parkinson MJ, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P75, DOI 10.1145/1328438.1328451
   Parkinson Matthew J., 2012, LOG METHODS COMPUT S, V8, P802, DOI [10.2168/LMCS-8(3:1)2012, DOI 10.2168/LMCS-8(3:1)2012]
   Paskevich Andrei, 2016, PRAGMATIC TYPE SYSTE
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rosenberg S, 2010, LECT NOTES COMPUT SC, V6217, P183, DOI 10.1007/978-3-642-15057-9_13
   Rudich A, 2008, LECT NOTES COMPUT SC, V5014, P68, DOI 10.1007/978-3-540-68237-0_7
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K, 2009, LECT NOTES COMPUT SC, V5502, P378, DOI 10.1007/978-3-642-00590-9_27
   Rustan K., 2008, SPECIFICATION VERSIF
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Schmitt PH, 2011, LECT NOTES COMPUT SC, V6528, P138
   Smans J, 2008, LECT NOTES COMPUT SC, V5051, P220, DOI 10.1007/978-3-540-68863-1_14
   Smans J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160911
   Smans J, 2010, FORM ASP COMPUT, V22, P423, DOI 10.1007/s00165-010-0148-1
   Summers AJ, 2013, LECT NOTES COMPUT SC, V7920, P129, DOI 10.1007/978-3-642-39038-8_6
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 61
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2018
VL 40
IS 2
AR 6
DI 10.1145/3174801
PG 90
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI6TB
UT WOS:000434634500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Bondhugula, U
   Acharya, A
   Cohen, A
AF Bondhugula, Uday
   Acharya, Aravind
   Cohen, Albert
TI The Pluto plus Algorithm: A Practical Approach for Parallelization and
   Locality Optimization of Affine Loop Nests
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Design; Experimentation; Performance; Automatic
   parallelization; locality optimization; polyhedral model; loop
   transformations; affine transformations; tiling
ID EFFICIENT SOLUTIONS; SCHEDULING PROBLEM; BOLTZMANN
AB Affine transformations have proven to be powerful for loop restructuring due to their ability to model a very wide range of transformations. A single multidimensional affine function can represent a long and complex sequence of simpler transformations. Existing affine transformation frameworks such as the Pluto algorithm, which include a cost function for modern multicore architectures for which coarse-grained parallelism and locality are crucial, consider only a subspace of transformations to avoid a combinatorial explosion in finding transformations. The ensuing practical trade-offs lead to the exclusion of certain useful transformations: in particular, transformation compositions involving loop reversals and loop skewing by negative factors. In addition, there is currently no proof that the algorithm successfully finds a tree of permutable loop bands for all affine loop nests. In this article, we propose an approach to address these two issues (1) by modeling a much larger space of practically useful affine transformations in conjunction with the existing cost function of Pluto, and (2) by extending the Pluto algorithm in a way that allows a proof for its soundness and completeness for all affine loop nests. We perform an experimental evaluation of both, the effect on compilation time, and performance of generated codes. The evaluation shows that our new framework, Pluto+, provides no degradation in performance for any benchmark from Polybench. For the Lattice Boltzmann Method (LBM) simulations with periodic boundary conditions, it provides a mean speedup of 1.33x over Pluto. We also show that Pluto+ does not increase compilation time significantly. Experimental results on Polybench show that Pluto+ increases overall polyhedral source-to-source optimization time by only 15%. In cases in which it improves execution time significantly, it increased polyhedral optimization time by only 2.04x.
C1 [Bondhugula, Uday; Acharya, Aravind] Indian Inst Sci, Dept Comp Sci & Automat, Bangalore 560012, Karnataka, India.
   [Cohen, Albert] INRIA, 45 Rue Ulm, F-75005 Paris, France.
   [Cohen, Albert] ENS, 45 Rue Ulm, F-75005 Paris, France.
C3 Indian Institute of Science (IISC) - Bangalore; Inria; Universite PSL;
   Ecole Normale Superieure (ENS)
RP Bondhugula, U; Acharya, A (corresponding author), Indian Inst Sci, Dept Comp Sci & Automat, Bangalore 560012, Karnataka, India.; Cohen, A (corresponding author), INRIA, 45 Rue Ulm, F-75005 Paris, France.; Cohen, A (corresponding author), ENS, 45 Rue Ulm, F-75005 Paris, France.
EM uday@csa.iisc.ernet.in; aravind.acharya@csa.iisc.ernet.in;
   Albert.Cohen@inria.fr
RI Acharya, Aravind/ABD-6460-2020
OI Acharya, Aravind/0000-0001-6223-3625
FU INRIA Associate Team PolyFlow
FX This work was supported in part by the INRIA Associate Team PolyFlow.
CR Acharya A., 2015, ACM SIGPLAN S PRINC
   Ahmed N, 2001, INT J PARALLEL PROG, V29, P493, DOI 10.1023/A:1012293814832
   ANCOURT C, 1991, SIGPLAN NOTICES, V26, P39, DOI 10.1145/109626.109631
   [Anonymous], 2011, Encyclopedia of Parallel Computing
   [Anonymous], 2000, P 14 INT PAR DISTR P
   [Anonymous], 2008, P CC
   [Anonymous], 2011, P 1 INT WORKSH POL C
   [Anonymous], CSTR3430 U MAR DEP C
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Bandishti V., 2012, P INT C HIGH PERF CO, P40, DOI DOI 10.1109/SC.2012.107
   Bastoul C, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P7, DOI 10.1109/PACT.2004.1342537
   Bondhugula U., 2008, Ph. D. Dissertation, DOI 10.5555/1559029
   Bondhugula U, 2014, INT CONFER PARA, P39, DOI 10.1145/2628071.2628106
   Bondhugula U, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P343, DOI 10.1145/1854273.1854317
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Chen C, 2012, ACM SIGPLAN NOTICES, V47, P499, DOI 10.1145/2345156.2254123
   Chen S, 1998, ANNU REV FLUID MECH, V30, P329, DOI 10.1146/annurev.fluid.30.1.329
   CHOFFRUT C, 1983, INFORM PROCESS LETT, V17, P149, DOI 10.1016/0020-0190(83)90055-8
   Cloog, 2004, CLOOG COD GEN POL MO
   COIN-OR, 2001, COMP INFR OP RES
   d'Humières D, 2002, PHILOS T ROY SOC A, V360, P437, DOI 10.1098/rsta.2001.0955
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P389, DOI 10.1007/BF01379404
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   FEAUTRIER P, 1988, RAIRO-RECH OPER, V22, P243
   GNU, 2012, GLPK GNU LIN PROGR K
   Griebl Martin, 2004, THESIS U PASSAU PASS
   Hartono Albert, 2009, INT C SUP ICS 09
   Henretty T., 2013, ACM INT C SUP
   Henretty T, 2011, LECT NOTES COMPUT SC, V6601, P225, DOI 10.1007/978-3-642-19861-8_13
   Irigoin F., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P319, DOI 10.1145/73560.73588
   Kelly W., 1995, Proceedings Frontiers'95. The Fifth Symposium on the Frontiers of Massively Parallel Computation, P332
   Kong M., 2013, ACM SIGPLAN C PROGR
   Leung A., 2010, US Patent, Patent No. [2010/0070956 A1, 20100070956]
   LI W, 1994, INT J PARALLEL PROG, V22, P183, DOI 10.1007/BF02577874
   Lim A. W., 1999, Conference Proceedings of the 1999 International Conference on Supercomputing, P228, DOI 10.1145/305138.305197
   Lim A. W., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P201, DOI 10.1145/263699.263719
   Lim AW, 1998, PARALLEL COMPUT, V24, P445, DOI 10.1016/S0167-8191(98)00021-0
   Lougee-Heimer R, 2003, IBM J RES DEV, V47, P57, DOI 10.1147/rd.471.0057
   Meister Benoit, 2009, WORKSH AS PGAS PROGR
   Mullapudi Ravi Teja, 2015, INT C ARCH SUPP PROG
   Osheim N, 2008, LECT NOTES COMPUT SC, V5335, P80, DOI 10.1007/978-3-540-89740-8_6
   Palabos, 2012, PALABOS
   Pananilath I, 2015, ACM T ARCHIT CODE OP, V12, DOI 10.1145/2739047
   Pluto, 2008, PLUTO AUT PAR LOC OP
   Polybench, 2010, POL SUIT
   Pouchet L.-N., 2008, ACM SIGPLAN S PROGR
   Pouchet Louis-Noel, 2011, ACM SIGPLAN SIGPLAN
   Quilleré F, 2000, INT J PARALLEL PROG, V28, P469, DOI 10.1023/A:1007554627716
   Rudy G, 2011, LECT NOTES COMPUT SC, V6548, P136, DOI 10.1007/978-3-642-19595-2_10
   Sadourny Robert, 1975, J ATMOS SCI, V32, P4
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Strzodka R., 2011, 2011 International Conference on Parallel Processing, P571, DOI 10.1109/ICPP.2011.47
   Swarztrauber Paul N., 2000, SWIM SPEC CPU2000 BE
   Tang Y, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P117, DOI 10.1145/1989493.1989508
   Vasilache Nicolas, 2012, INT WORKSH POL COMP
   Vasilache Nicolas, 2007, THESIS U PARIS SUD O
   Verdoolaege S, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400713
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   WOLF ME, 1991, SIGPLAN NOTICES, V26, P30
   Yaacoby Y, 1995, J VLSI SIGNAL PROC, V11, P113, DOI 10.1007/BF02106826
   Yuki Tomofumi, 2013, Languages and Compilers for Parallel Computing. 25th International Workshop (LCPC 2012). Revised Selected Papers, P17, DOI 10.1007/978-3-642-37658-0_2
   Yuki T, 2014, INT WORKSH POL COMP
   Zhong YT, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1552309.1552310
   Zou QS, 1997, PHYS FLUIDS, V9, P1591, DOI 10.1063/1.869307
NR 65
TC 26
Z9 26
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2016
VL 38
IS 3
AR 12
DI 10.1145/2896389
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DL6BF
UT WOS:000375721600005
DA 2024-07-18
ER

PT J
AU Dissegna, S
   Logozzo, F
   Ranzato, F
AF Dissegna, Stefano
   Logozzo, Francesco
   Ranzato, Francesco
TI An Abstract Interpretation-Based Model of Tracing Just-in-Time
   Compilation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Verification; Tracing JIT compilation; abstract
   interpretation; trace semantics
ID JIT COMPILER; SEMANTICS
AB Tracing just-in-time compilation is a popular compilation technique for the efficient implementation of dynamic languages, which is commonly used for JavaScript, Python, and PHP. It relies on two key ideas. First, it monitors program execution in order to detect so-called hot paths, that is, the most frequently executed program paths. Then, hot paths are optimized by exploiting some information on program stores that is available and therefore gathered at runtime. The result is a residual program where the optimized hot paths are guarded by sufficient conditions ensuring some form of equivalence with the original program. The residual program is persistently mutated during its execution, for example, to add new optimized hot paths or to merge existing paths. Tracing compilation is thus fundamentally different from traditional static compilation. Nevertheless, despite the practical success of tracing compilation, very little is known about its theoretical foundations. We provide a formal model of tracing compilation of programs using abstract interpretation. The monitoring phase (viz., hot path detection) corresponds to an abstraction of the trace semantics of the program that captures the most frequent occurrences of sequences of program points together with an abstraction of their corresponding stores, for example, a type environment. The optimization phase (viz., residual program generation) corresponds to a transform of the original program that preserves its trace semantics up to a given observation as modeled by some abstraction. We provide a generic framework to express dynamic optimizations along hot paths and to prove them correct. We instantiate it to prove the correctness of dynamic type specialization and constant variable folding. We show that our framework is more general than the model of tracing compilation introduced by Guo and Palsberg [2011], which is based on operational bisimulations. In our model, we can naturally express hot path reentrance and common optimizations like dead-store elimination, which are either excluded or unsound in Guo and Palsberg's framework.
C1 [Dissegna, Stefano; Ranzato, Francesco] Univ Padua, Dipartimento Matemat, I-35121 Padua, Italy.
   [Logozzo, Francesco] Facebook Inc, Seattle, WA USA.
C3 University of Padua; Facebook Inc
RP Dissegna, S (corresponding author), Univ Padua, Dipartimento Matemat, Via Trieste 63, I-35121 Padua, Italy.
RI Ranzato, Francesco/G-5170-2012; Ranzato, Francesco/X-7250-2019
OI Ranzato, Francesco/0000-0003-0159-0068; 
FU Microsoft Research Software Engineering Innovation Foundation;
   University of Padova under the PRAT project BECOM; University of Padova
   under the PRAT project ANCORE
FX The work of Francesco Logozzo was carried out while being affiliated
   with Microsoft Research, Redmond, WA. The work of Francesco Ranzato was
   partially supported by Microsoft Research Software Engineering
   Innovation Foundation 2013 Award (SEIF 2013) and by the University of
   Padova under the PRAT projects BECOM and ANCORE.
CR Adams K, 2014, ACM SIGPLAN NOTICES, V49, P777, DOI [10.1145/2714064.2660199, 10.1145/2660193.2660199]
   [Anonymous], 1995, COMMUNICATION CONCUR
   [Anonymous], [No title captured]
   Bala V, 2000, ACM SIGPLAN NOTICES, V35, P1, DOI 10.1145/358438.349303
   Barbuti R, 1999, INFORM PROCESS LETT, V70, P69, DOI 10.1016/S0020-0190(99)00042-3
   Bauman S, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P22, DOI 10.1145/2784731.2784740
   Bebenita M, 2010, ACM SIGPLAN NOTICES, V45, P708, DOI 10.1145/1932682.1869517
   Böhm I, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P74
   Bolz C.F., 2011, P 20 ACM SIGPLAN WOR, P43, DOI DOI 10.1145/1929501.1929508
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   Colby C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P195, DOI 10.1145/237721.237776
   Cousot P, 2002, ACM SIGPLAN NOTICES, V37, P178, DOI 10.1145/565816.503290
   Cousot P, 2002, THEOR COMPUT SCI, V277, P47, DOI 10.1016/S0304-3975(00)00313-3
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dissegna S, 2014, ACM SIGPLAN NOTICES, V49, P47, DOI 10.1145/2535838.2535866
   Ecma International, 2015, ECMA262 ECMA INT
   Gal A., 2006, VEE 2006. Proceedings of the Second International Conference on Virtual Execution Environments, P144
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Guo SY, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P563, DOI 10.1145/1926385.1926450
   Häubl C, 2014, ACM T ARCHIT CODE OP, V11, DOI 10.1145/2579673
   Handjieva M, 1998, LECT NOTES COMPUT SC, V1503, P200
   Haubl Christian., 2011, P 9 INT C PRINCIPLES, P129
   Inoue H, 2011, INT SYM CODE GENER, P246, DOI 10.1109/CGO.2011.5764692
   Logozzo F, 2009, COMPUT LANG SYST STR, V35, P100, DOI 10.1016/j.cl.2005.01.001
   Rival X, 2004, ACM SIGPLAN NOTICES, V39, P1, DOI 10.1145/982962.964002
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Schilling T., 2013, THESIS
   Schmidt D. A., 1998, LISP and Symbolic Computation, V10, P237, DOI 10.1023/A:1007734417713
   Spoto F, 2003, ACM T PROGR LANG SYS, V25, P578, DOI 10.1145/937563.937565
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
NR 31
TC 0
Z9 0
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2016
VL 38
IS 2
AR 7
DI 10.1145/2853131
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DA8UG
UT WOS:000368081200004
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Nanevski, A
   Banerjee, A
   Garg, D
AF Nanevski, Aleksandar
   Banerjee, Anindya
   Garg, Deepak
TI Dependent Type Theory for Verification of Information Flow and Access
   Control Policies
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Security; Verification; Languages; Information flow; access control;
   type theory
ID DECLASSIFICATION; AUTHORIZATION; LANGUAGE; PARAMETRICITY; PROOFS; MODEL
AB We present Relational Hoare Type Theory (RHTT), a novel language and verification system capable of expressing and verifying rich information flow and access control policies via dependent types. We show that a number of security policies which have been formalized separately in the literature can all be expressed in RHTT using only standard type-theoretic constructions such as monads, higher-order functions, abstract types, abstract predicates, and modules. Example security policies include conditional declassification, information erasure, and state-dependent information flow and access control. RHTT can reason about such policies in the presence of dynamic memory allocation, deallocation, pointer aliasing and arithmetic.
C1 [Nanevski, Aleksandar; Banerjee, Anindya] IMDEA Software Inst, Madrid 28223, Spain.
   [Garg, Deepak] MPI SWS, D-66123 Saarbrucken, Germany.
C3 IMDEA Software Institute
RP Nanevski, A (corresponding author), IMDEA Software Inst, Edificio IMDEA Software,Campus Montegancedo S-N, Madrid 28223, Spain.
EM dg@mpi-sws.org
FU MINECO [TIN2009-14599-C03-02 Desafios, TIN2010-20639 Paran10,
   TIN2012-39391-C04-01 Strongsoft]; EU [NoE-256980 Nessos]; Ramon y Cajal
   grant [RYC-2010-0743]; AMAROUT [PCOFUND-GA-2008-229599]; U.S. NSF
   [1018061]; U.S. AFOSR MURI "Collaborative Policies and Assured
   Information Sharing"; Direct For Computer & Info Scie & Enginr; Division
   Of Computer and Network Systems [1018061] Funding Source: National
   Science Foundation
FX This research was partially supported by MINECO Projects
   TIN2009-14599-C03-02 Desafios, TIN2010-20639 Paran10, and
   TIN2012-39391-C04-01 Strongsoft; EU Project NoE-256980 Nessos; Ramon y
   Cajal grant RYC-2010-0743; AMAROUT grant PCOFUND-GA-2008-229599; U.S.
   NSF Trustworthy Computing grant 1018061 "Compositional End-to-End
   Security for Systems," and the U.S. AFOSR MURI "Collaborative Policies
   and Assured Information Sharing."
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Amtoft T, 2006, ACM SIGPLAN NOTICES, V41, P91, DOI 10.1145/1111320.1111046
   [Anonymous], COQ PROOF ASS REF MA
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   Appel AW, 1999, 6TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P52, DOI 10.1145/319709.319718
   Askarov A, 2007, P IEEE S SECUR PRIV, P207, DOI 10.1109/SP.2007.22
   Askarov A, 2010, LECT NOTES COMPUT SC, V6012, P64, DOI 10.1007/978-3-642-11957-6_5
   Austin T. H., 2010, P ACM WORKSH PROGR L, P3
   Avijit K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P27
   Banerjee A, 2005, J FUNCT PROGRAM, V15, P131, DOI 10.1017/S0956796804005453
   Banerjee A, 2008, P IEEE S SECUR PRIV, P339, DOI 10.1109/SP.2008.20
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Beringer L, 2010, J LOGIC ALGEBR PROGR, V79, P483, DOI 10.1016/j.jlap.2010.07.005
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Birgisson Arnar, 2012, Computer Security - ESORICS 2012. Proceedings 17th European Symposium on Research in Computer Security, P55, DOI 10.1007/978-3-642-33167-1_4
   Birkedal L, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(2:6)2008
   Borgström J, 2011, J FUNCT PROGRAM, V21, P159, DOI 10.1017/S0956796810000134
   Borgstrom J., 2011, P 5 ACM WORKSH PROGR, P15, DOI DOI 10.1145/1929529.1929532
   Broberg N, 2010, ACM SIGPLAN NOTICES, V45, P431, DOI 10.1145/1707801.1706349
   Chaudhuri A, 2009, LECT NOTES COMPUT SC, V5789, P184, DOI 10.1007/978-3-642-04444-1_12
   Chong S, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P241, DOI 10.1109/CSFW.2005.19
   Chong S, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P98, DOI 10.1109/CSF.2008.12
   Chong Stephen., 2004, CCS 04 P 11 ACM C CO, P198
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Fagin R, 1995, Reasoning about knowledge
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gries D., 1993, PROGRAM DESIGN CALCU
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Jia L, 2008, ACM SIGPLAN NOTICES, V43, P27, DOI 10.1145/1411203.1411212
   Jia Limin., 2009, Programming Languages and Analysis for Security (PLAS)
   LaPadula L., 1973, TECHNICAL REPORT 254
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Li P, 2010, THEOR COMPUT SCI, V411, P1974, DOI 10.1016/j.tcs.2010.01.025
   Martin-Lof P., 1984, Intuitionistic type theory
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Morgenstern J, 2010, ACM SIGPLAN NOTICES, V45, P169, DOI 10.1145/1932681.1863569
   Nanevski A, 2010, ACM SIGPLAN NOTICES, V45, P261, DOI 10.1145/1707801.1706331
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Plotkin G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P361, DOI 10.1007/BFb0037118
   REED J, 2010, P ICFP, DOI 10.1145/1863543.1863568
   Reynolds J. C., 1981, CRAFT PROGRAMMING
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Russo A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P13
   Russo A, 2009, LECT NOTES COMPUT SC, V5789, P86, DOI 10.1007/978-3-642-04444-1_6
   Sabelfeld A, 1999, LECT NOTES COMPUT SC, V1576, P40
   Sabelfeld A, 2009, J COMPUT SECUR, V17, P517, DOI 10.3233/JCS-2009-0352
   Simonet V, 2002, P IEEE CSFW, P223
   SWAMY N, 2006, 19 IEEE COMP SEC FDN, P202
   Swamy N, 2008, P IEEE S SECUR PRIV, P369, DOI 10.1109/SP.2008.29
   Swamy N, 2011, ACM SIGPLAN NOTICES, V46, P266, DOI 10.1145/2034574.2034811
   Swamy N, 2010, LECT NOTES COMPUT SC, V6012, P529, DOI 10.1007/978-3-642-11957-6_28
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Thamsborg J, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:22)2012
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
   Yang HS, 2002, LECT NOTES COMPUT SC, V2303, P402
NR 65
TC 31
Z9 34
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2013
VL 35
IS 2
AR 6
DI 10.1145/2491522.2491523
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 191XT
UT WOS:000322449200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Morris, JM
   Bunkenburg, A
   Tyrrell, M
AF Morris, Joseph M.
   Bunkenburg, Alexander
   Tyrrell, Malcolm
TI Term Transformers: A New Approach to State
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Theory; Verification; Nondeterminacy; nondeterminism; predicate
   transformers; procedures; refinement calculus; state
ID PREDICATE CALCULUS; LATTICE; REFINEMENT; LANGUAGE; PROVER
AB We present a new approach to adding state and state-changing commands to a term language. As a formal semantics it can be seen as a generalization of predicate transformer semantics, but beyond that it brings additional opportunities for specifying and verifying programs. It is based on a construct called a phrase, which is a term of the form C (sic) t, where C stands for a command and t stands for a term of any type. If R is boolean, C (sic) R is closely related to the weakest precondition wp(C, R). The new theory draws together functional and imperative programming in a simple way. In particular, imperative procedures and functions are seen to be governed by the same laws as classical functions. We get new techniques for reasoning about programs, including the ability to dispense with logical variables and their attendant complexities. The theory covers both programming and specification languages, and supports unbounded demonic and angelic nondeterminacy in both commands and terms.
C1 [Morris, Joseph M.; Tyrrell, Malcolm] Dublin City Univ, Irish Software Engn Res Ctr, Dublin 9, Ireland.
   [Morris, Joseph M.] Dublin City Univ, Sch Comp, Dublin 9, Ireland.
   [Bunkenburg, Alexander] Univ Glasgow, Glasgow G12 8QQ, Lanark, Scotland.
C3 Dublin City University; Dublin City University; University of Glasgow
RP Morris, JM (corresponding author), Dublin City Univ, Irish Software Engn Res Ctr, Dublin 9, Ireland.
EM Joseph.Morris@computing.dcu.ie
FU Science Foundation Ireland [03/IN_3I408C]
FX This work was supported by the Science Foundation Ireland under Grant
   No. 03/IN_3I408C.
CR [Anonymous], 1990, Specification and Transformation of Programs: A Formal Approach to Software Development
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1990, ACTA INFORM, V27, P583, DOI 10.1007/BF00259469
   BACK RJR, 1980, PROOF THEORY APPL TR, V131
   Backhouse Roland, 2003, PROGRAM CONSTRUCTION
   Bijlsma L, 1998, ACTA INFORM, V35, P1007, DOI 10.1007/s002360050150
   Böhme S, 2008, LECT NOTES COMPUT SC, V5170, P150, DOI 10.1007/978-3-540-71067-7_15
   BOOM HJ, 1982, ACM T PROGR LANG SYS, V4, P668, DOI 10.1145/69622.357189
   Boute R, 2005, ACM T PROGR LANG SYS, V27, P988, DOI 10.1145/1086642.1086647
   BUNKENBURG A, 1997, THESIS U GLASGOW
   Cohen E., 1990, PROGRAMMING 1990S IN
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dijkstra Edsger., 1982, SELECTED WRITINGS CO
   DIJKSTRA EW, 1986, ACTA INFORM, V23, P1, DOI 10.1007/BF00268074
   FLOYD RW, 1967, J ACM, V14, P636, DOI 10.1145/321420.321422
   GARDINER P, 1991, THEOR COMPUT SCI, V87, P143, DOI 10.1016/0304-3975(91)90029-2
   Gries D., 1981, Texts and Monographs in Computer Science
   Gries D., 1993, LOGICAL APPROACH DIS
   Hehner E.C.R., 1993, A Practical Theory of Programming
   HEHNER ECR, 1984, LOGIC PROGRAMMING
   HITCHCOCK P, 1972, ICALP 72, P225
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Kaldewaij A., 1990, Programming: The Derivation of Algorithms
   Kleymann T., 1999, Formal Aspects of Computing, V11, P541, DOI 10.1007/s001650050057
   LAUNCHBURY J, 1994, P ACM SIGPLAN C PROG
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   MORGAN C, 1988, INFORM PROCESS LETT, V29, P293, DOI 10.1016/0020-0190(88)90227-X
   Morgan Carroll, 1994, Programming from specifications
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   Morris JM, 2007, ACTA INFORM, V44, P323, DOI 10.1007/s00236-007-0049-9
   Morris JM, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1391956.1391961
   Naumann D.A., 2001, Proc. 3rd ACM SIGPLAN Int. Conf. Principles and Practice of Declarative Programming, P4
   Naumann DA, 2001, SCI COMPUT PROGRAM, V41, P1, DOI 10.1016/S0167-6423(00)00005-8
   Naumann DA, 2001, INFORM PROCESS LETT, V77, P201, DOI 10.1016/S0020-0190(00)00215-5
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   NELSON G, 1992, NATO ASI SERIES F, V88
   Pierik C, 2004, LECT NOTES COMPUT SC, V3116, P394
   SPIVEY JM, 1988, UNDERSTANDING Z SPEC
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   TUNNICLIFFE WR, 1985, ALGEBRA UNIV, V21, P133, DOI 10.1007/BF01187563
   VONWRIGHT J, 1994, ACTA INFORM, V31, P105, DOI 10.1007/BF01192157
   WOODCOCK J, 1988, SOFTWARE ENG MATH
NR 45
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2009
VL 31
IS 4
AR 16
DI 10.1145/1516507.1516511
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 453SZ
UT WOS:000266633900004
OA Bronze
DA 2024-07-18
ER

PT J
AU Ohori, A
AF Ohori, Atsushi
TI A proof theory for machine code
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; Curry-Howard isomorphism
ID LOGICS
AB This article develops a proof theory for low-level code languages. We first define a proof system, which we refer to as the sequential sequent calculus, and show that it enjoys the cut elimination property and that its expressive power is the same as that of the natural deduction proof system. We then establish the Curry-Howard isomorphism between this proof system and a low-level code language by showing the following properties: ( 1) the set of proofs and the set of typed codes is in one-to-one correspondence, ( 2) the operational semantics of the code language is directly derived from the cut elimination procedure of the proof system, and ( 3) compilation and decompilation algorithms between the code language and the typed lambda calculus are extracted from the proof transformations between the sequential sequent calculus and the natural deduction proof system. This logical framework serves as a basis for the development of type systems of various low-level code languages, type-preserving compilation, and static code analysis.
C1 Tohoku Univ, Elect Commun Res Inst, Aoba Ku, Sendai, Miyagi 9808577, Japan.
C3 Tohoku University
RP Ohori, A (corresponding author), Tohoku Univ, Elect Commun Res Inst, Aoba Ku, Katahira 2-1-1, Sendai, Miyagi 9808577, Japan.
EM ohori@riec.tohoku.ac.jp
CR ABRAHAM WR, 2003, WATER AIR SOIL POLL, V3, P57
   [Anonymous], 1952, INTRO METAMATHEMATIC
   [Anonymous], 1969, Studies in logic and the foundations of mathematics
   COUSINEAU G, 1987, SCI COMPUT PROGRAM, V8, P173, DOI 10.1016/0167-6423(87)90020-7
   CURRY H, 1968, COMBINATORY LOGIC, V1
   FLANAGAN C, 1990, P ACM PLDI C, P237
   Freund SN, 2003, J AUTOM REASONING, V30, P271, DOI 10.1023/A:1025011624925
   GALLIER J, 1993, THEOR COMPUT SCI, V110, P249, DOI 10.1016/0304-3975(93)90011-H
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   HIGUCHI T, 2002, P INT C PRINC PRACT, P201
   Higuchi T, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180479
   HOWARD W, 1980, HB CURRY ESSAYS COMB, P476
   Katsumata S, 2001, LECT NOTES COMPUT SC, V2028, P352
   Lambek J, 1980, HB CURRY ESSAYS COMB, P375
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Minamide Yasuhiko, 1996, S PRINC PROGR LANG P, P271, DOI DOI 10.1145/237721.237791
   Mitchell John C., 1996, Foundation of computing series
   MORRISETT G, 1998, P ACM S PRINC PROGR, P895
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Ohori A, 2004, SCI COMPUT PROGRAM, V50, P161, DOI 10.1016/j.scico.2004.01.005
   Ohori A, 1999, LECT NOTES COMPUT SC, V1581, P280
   ONO H, 1985, J SYMBOLIC LOGIC, V50, P169, DOI 10.2307/2273798
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190
   Raffalli C., 1994, Types for Proofs and Programs. International Workshop TYPES '93. Selected Papers, P333
   SKALKA S, 2000, P INT C FUNCT PROGR, P34
   STATA R, 1998, P 25 ACM S PRINC PRO, P149
   TAIT W, 1966, J SYMBOLIC LOGIC, V32, P198
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   [No title captured]
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 36
DI 10.1145/1286821.1286827
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500007
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Drinic, M
   Kirovski, D
   Vo, H
AF Drinic, Milenko
   Kirovski, Darko
   Vo, Hoi
TI PPMexe: Program compression
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; performance; instruction scheduling; prediction by partial
   matching; random access compression; software compression; software
   distribution
ID FINITE BINARY SEQUENCES; CODE COMPRESSION; LENGTH
AB With the emergence of software delivery platforms, code compression has become an important system component that strongly affects performance. This article presents PPMexe, a compression mechanism for program binaries that analyzes their syntax and semantics to achieve superior compression ratios. We use the generic paradigm of prediction by partial matching (PPM) as the foundation of our compression codec. PPMexe combines PPM with two preprocessing steps: (i) instruction rescheduling to improve prediction rates and (ii) heuristic partitioning of a program binary into streams with high autocorrelation. We improve the traditional PPM algorithm by (iii) using an additional alphabet of frequent variable-length supersymbols extracted from the input stream of fixed-length symbols. In addition, PPMexe features (iv) a low-overhead mechanism that enables decompression starting from an arbitrary instruction of the executable, a property pivotal for runtime software delivery. We implemented PPMexe for x86 binaries and tested it on several large applications. Binaries compressed using PPMexe were 18-24% smaller than files created using off-the-shelf PPMD, one of the best available compressors.
C1 Microsoft Res, Redmond, WA 98052 USA.
C3 Microsoft
RP Drinic, M (corresponding author), Microsoft Res, 1 Microsoft Way, Redmond, WA 98052 USA.
EM mdrinic@microsoft.com
CR [Anonymous], 1999, Compressing and Indexing Documents and Images
   Araujo G, 2000, IEEE T VLSI SYST, V8, P530, DOI 10.1109/92.894158
   Baker BS, 1998, PROCEEDINGS OF THE USENIX 1998 ANNUAL TECHNICAL CONFERENCE, P179
   Bunton S, 1997, COMPUT J, V40, P76, DOI 10.1093/comjnl/40.2_and_3.76
   Burrows M., 1994, Algorithm, Data Compression, DOI 10.1.1.37.6774
   BURTSCHER M, IEEE T COMPUT, V54, P11
   CHAITIN GJ, 1969, J ACM, V16, P145, DOI 10.1145/321495.321506
   CHAITIN GJ, 1966, J ACM, V13, P547, DOI 10.1145/321356.321363
   CLEARY JG, 1984, IEEE T COMMUN, V32, P396, DOI 10.1109/TCOM.1984.1096090
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   Edwards Andrew., 2001, VULCAN BINARY TRANSF
   Franz M, 1997, COMMUN ACM, V40, P87, DOI 10.1145/265563.265576
   FRASER C, 1984, P ACM SIGPLAN S COMP, V19, P117
   FRASER C, 1999, P ACM SIGPLAN 1999 C, P242
   GILCHRIST J, 2000, ARCHIVE COMPRESSION
   Hennessy J., 1995, COMPUTER ARCHITECTUR
   HOEVEL LW, 1977, CSLTR77130 STANF U
   Hong I, 1997, DES AUT CON, P347, DOI 10.1145/266021.266161
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   HOWARD PG, 1993, P DAT COMPR C SNOWB, P98
   HOWARD PG, 1993, THESIS BROWN U
   HUFFMAN DA, 1952, P IRE, V40, P1098, DOI 10.1109/JRPROC.1952.273898
   Kirovski D, 1997, INT SYMP MICROARCH, P204, DOI 10.1109/MICRO.1997.645811
   Kolmogorov A. N., 1968, International Journal of Computer Mathematics, V2, P157, DOI 10.1080/00207166808803030
   KOROLEV LN, 1958, J ACM, V5, P328, DOI 10.1145/320941.320944
   LAU J, 2003, P 2003 INT C COMP AR, P84
   Lekatsas H, 1999, IEEE DATA COMPR CONF, P306, DOI 10.1109/DCC.1999.755680
   Liao S, 1996, ACM T PROGR LANG SYS, V18, P235, DOI 10.1145/229542.229543
   LIAO S, 1995, P INT C COMP AID DES, P393
   LUCCO S, 2000, P ACM SIGPLAN 00 C P, P27
   MOFFAT A, 1990, IEEE T COMMUN, V38, P1917, DOI 10.1109/26.61469
   MOHNEY D, 2003, ITS ALL LAST MILE
   MURTAGH T, 1991, ACM T PROGR LANG SYS, V13, P327
   PROEBSTING TA, 1995, PRINCIPLES PROGRAMMI, P322
   PUGH W, 1999, P 1999 ACM SIGPLAN C, P247
   RAO A, 1999, P ACM SIGPLAN C PROG, P128
   RISSANEN J, 1978, AUTOMATICA, V14, P465, DOI 10.1016/0005-1098(78)90005-5
   RISSANEN J, 1989, IEEE T COMMUN, V37, P93, DOI 10.1109/26.20074
   ROMER TH, 1996, P 7 INT C ARCH SUPP, P150
   SHANNON CE, 1951, BELL SYST TECH J, V30, P50, DOI 10.1002/j.1538-7305.1951.tb01366.x
   Systä T, 2001, SOFTWARE PRACT EXPER, V31, P371, DOI 10.1002/spe.386
   Truman TE, 1998, IEEE T COMPUT, V47, P1073, DOI 10.1109/12.729791
   WEAVER C, 2000, SPEC2000 BINARIES
   WOLFE Andrew., 1992, P 25 ANN INT S MICRO, P81
   Zhang X., 2005, ACM T ARCHIT CODE OP, V2, P301, DOI DOI 10.1145/1089008.1089012
   ZIV J, 1978, IEEE T INFORM THEORY, V24, P530, DOI 10.1109/TIT.1978.1055934
   [No title captured]
NR 47
TC 9
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2007
VL 29
IS 1
AR 3
DI 10.1145/1180475.1180478
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FG
UT WOS:000243927300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Menon, V
   Pingali, K
   Mateev, N
AF Menon, V
   Pingali, K
   Mateev, N
TI Fractal symbolic analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; theory
ID PARALLELIZING COMPILERS; ARRAY
AB Modern compilers restructure programs to improve their efficiency. Dependence analysis is the most widely used technique for proving the correctness of such transformations, but it suffers from the limitation that it considers only the memory locations read and written by a statement without considering what is being computed by that statement. Exploiting the semantics of program statements permits more transformations to be proved correct, and is critical for automatic restructuring of codes such as LU with partial pivoting.
   One approach to exploiting the semantics of program statements is symbolic analysis and comparison of programs. In principle, this technique is very powerful, but in practice, it is intractable for all but the simplest programs.
   In this paper, we propose a new form of symbolic analysis and comparison of programs which is appropriate for use in restructuring compilers.
   Fractal symbolic analysis is an approximate symbolic analysis that compares a program and its transformed version by repeatedly simplifying these programs until symbolic analysis becomes tractable while ensuring that equality of the simplified programs is sufficient to guarantee equality of the original programs. Fractal symbolic analysis combines some of the power of symbolic analysis with the tractability of dependence analysis. We discuss a prototype implementation of fractal symbolic analysis, and show how it can be used to solve the long-open problem of verifying the correctness of transformations required to improve the cache performance of LU factorization with partial pivoting.
C1 Intel Corp, Intel Labs, Santa Clara, CA 95054 USA.
   Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
   Hewlett Packard Corp, HP Labs Cambridge, Cambridge, MA 02142 USA.
C3 Intel Corporation; Cornell University; Hewlett-Packard
RP Menon, V (corresponding author), Intel Corp, Intel Labs, 2200 Mission Coll Blvd, Santa Clara, CA 95054 USA.
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 1995, LAPACK Users' Guide
   BANERJEE U, 1989, P C LANG COMP PAR CO, P54
   BARTH A, 2002, 20021865 CORN U
   BERNSTEIN AJ, 1966, IEEE TRANS ELECTRON, VEC15, P757, DOI 10.1109/PGEC.1966.264565
   Bryant RE, 1986, IEEE T COMPUT, VC-35, P8
   Carr S, 1997, ACM T MATH SOFTWARE, V23, P336, DOI 10.1145/275323.275325
   Char B., 1983, SIGSAM Bulletin, V17, P31, DOI 10.1145/1089338.1089344
   COOPER KD, 1986, ACM T PROGR LANG SYS, V8, P491, DOI 10.1145/6465.6489
   Cormen T.H., 1992, INTRO ALGORITHMS
   DEROSE LA, 1996, 1956 U ILL DEP COMP
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   GOLUB G, 1996, FDN COMPUTING SERIES
   Haghighat MR, 1996, ACM T PROGR LANG SYS, V18, P477, DOI 10.1145/233561.233568
   Johnson S.M., 1963, Math. Comput., V17, P282, DOI 10.2307/2003846
   KLOP JW, 1980, COMBINATORY REDUCTIO
   KODUKULA I, 1997, P ACM SIGPLAN C PROG, P346
   LI W, 1994, INT J PARALLEL PROG, V22, P183, DOI 10.1007/BF02577874
   MASLOV V, 1995, P INT C SUPERCOMPUTI, P265
   MATEEV N, 2000, P0 EUROPAR MUN GERM
   Metzger R., 2000, AUTOMATIC ALGORITHM
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   RAUCHWERGER L, 1999, IEEE T PARALL DISTR, V10, P218
   Rinard MC, 1997, ACM T PROGR LANG SYS, V19, P942, DOI 10.1145/267959.269969
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   WOLF ME, 1991, P SIGPLAN 1991 C PRO
   WOLF ME, 1996, MICRO 29, P274
   Wolfe M.J., 1995, High Performance Compilers for Parallel Computing
   [No title captured]
NR 30
TC 14
Z9 18
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2003
VL 25
IS 6
BP 776
EP 813
DI 10.1145/945885.945888
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 733DN
UT WOS:000185984800002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Rhiger, M
AF Rhiger, M
TI A foundation for embedded languages
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; embedded languages; higher; order abstract syntax;
   phantom; types; type safety; type soundness; completeness; Haskell;
   Standard ML
ID FRAMEWORK
AB Recent work on embedding object languages into Haskell use "phantom types" (i.e., parameterized types whose parameter does not occur on the right-hand side of the type definition) to ensure that the embedded object-language terms are simply typed. But is it a safe assumption that only simply-typed terms can be represented in Haskell using phantom types? And conversely, can all simply-typed terms be represented in Haskell under the restrictions imposed by phantom types? In this article we investigate the conditions under which these assumptions are true: We show that these questions can be answered affirmatively for an idealized Haskell-like language and discuss to which extent Haskell can be used as a meta-language.
C1 Aarhus Univ, BRICS, DK-8000 Aarhus C, Denmark.
C3 Aarhus University
RP IT Univ Copenhagen, Glentevej 67, DK-2400 Copenhagen NV, Denmark.
EM mir@it-c.dk
CR [Anonymous], 1994, Lecture Notes in Computer Science
   [Anonymous], P ICFP ICFP 99
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   BAWDEN A, 1999, BRICS NOTE SERIES, V991, P4
   CARLSON WE, 1993, 1031 YAL U
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   Danvy O, 2001, LECT NOTES COMPUT SC, V2024, P343
   Danvy O, 2001, J FUNCT PROGRAM, V11, P673, DOI 10.1017/S0956796801004166
   Davies R, 1996, IEEE S LOG, P184, DOI 10.1109/LICS.1996.561317
   Despeyroux J, 1997, LECT NOTES COMPUT SC, V1210, P147
   DOWEK G, 1993, 154 INRIA
   Elliott C, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P285
   Elliott C, 2000, LECT NOTES COMPUT SC, V1924, P9
   FASEL JH, 1992, SIGPLAN NOTICES, V27, P1
   Filinski A, 1999, LECT NOTES COMPUT SC, V1702, P378
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Hickey JJ, 1997, LECT NOTES ARTIF INT, V1249, P395
   HOFMANN M, 1999, P 14 ANN IEEE S LOG
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Hudak P., 1996, Journal of Functional Programming, V6, P465, DOI 10.1017/S0956796800001805
   Jones SP, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P224, DOI 10.1109/ICSR.1998.685747
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Mitchell JohnC., 1990, Formal Models and Semantics, P365
   NORDSTROM B, 1990, INT SERIES MONOGRAPH, V7
   Peterson J, 1999, LECT NOTES COMPUT SC, V1551, P91
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P7
   Pfenning F, 1991, Logical frameworks, P149
   Pfenning Frank, 1999, LNCS, V1632, P202, DOI DOI 10.1007/3-540-48660-7_14
   Reid A., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P484, DOI 10.1109/ICSE.1999.841038
   RHIGER M, 2002, LECT NOTES COMPUTER, V2257, P120
   RHIGER M, 2001, THESIS U AARHUS AARH
   SCOTT DS, 1993, THEOR COMPUT SCI, V121, P411, DOI 10.1016/0304-3975(93)90095-B
   Steele G. L.  Jr., 1999, Higher-Order and Symbolic Computation, V12, P221, DOI 10.1023/A:1010085415024
   STOY JE, 1977, DETONATIONAL SEMANTI
   Taha W, 1998, LECT NOTES COMPUT SC, V1443, P918, DOI 10.1007/BFb0055113
   WAND M, 1985, P 12 ANN ACM S PRINC, P1
   Wand Mitchell, 1985, LECT NOTES COMPUTER, P219, DOI 10.1007/3-540-15648-8_17
   Winskel G., 1993, FDN COMPUTING SERIES
   YANG Z, 2001, THESIS NEW YORK U NE
   YANG Z, 1998, P 1998 ACM SIGPLAN I, P289
   Yelland P.M., 1999, P POPL1999, P57
NR 46
TC 11
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2003
VL 25
IS 3
BP 291
EP 315
DI 10.1145/641909.641910
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 662CY
UT WOS:000181929700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Bruce, KB
   Schuett, A
   Van Gent, R
   Fiech, A
AF Bruce, KB
   Schuett, A
   Van Gent, R
   Fiech, A
TI PolyTOIL: A type-safe polymorphic object-oriented language
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; language; theory
ID BOUNDED QUANTIFICATION; DATA ABSTRACTION; RECURSIVE TYPES; INHERITANCE;
   SEMANTICS
AB PolyTOIL is a new statically typed polymorphic object-oriented programming language that is provably typesafe. By separating the definitions of subtyping and inheritance, providing a name for the type of self, and carefully defining the type-checking rules, we have obtained a language that is very expressive while supporting modular type-checking of classes. The matching relation on types, which is related to F-bounded quantification, is used both in stating type-checking rules and expressing the bounds on type parameters for polymorphism. The design of PolyTOIL is based on a careful formal definition of type-checking rules and semantics. A proof of type safety is obtained with the aid of a subject reduction theorem.
C1 Williams Coll, Dept Comp Sci, Williamstown, MA 01267 USA.
   Mem Univ Newfoundland, St John, NF A1C 5S7, Canada.
C3 Williams College; Memorial University Newfoundland
RP Williams Coll, Dept Comp Sci, Williamstown, MA 01267 USA.
EM kim@cs.williams.edu
CR Abadi M., 1994, Programming Languages and Systems - ESOP '94. 5th European Symposium on Programming. Proceedings, P1
   Abadi M., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P355, DOI 10.1109/LICS.1990.113761
   Abadi M, 1995, LECT NOTES COMPUT SC, V915, P471
   ABADI M, 1994, P THEOR ASP COMP SOF, P296
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   AMADIO RM, 1991, INFORM COMPUT, V91, P55, DOI 10.1016/0890-5401(91)90074-C
   [Anonymous], POPL 90
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1989, P 4 INT C FUNCT PROG, DOI DOI 10.1145/99370.99392
   [Anonymous], ACM COMPUTING SURVEY
   ARNOLD K, 1996, JAVA
   Bracha G., 1993, P OOPSLA 93 C OBJ OR, P215
   BRUCE K, 1993, P ACM S PRINCIPLES P, P285
   BRUCE K, 1992, P 19 ACM S PRINC PRO, P316, DOI DOI 10.1145/143165.143230
   BRUCE K, 1994, LECT NOTES COMPUTER, V802, P603
   BRUCE K, 1993, P OOPSLA C, P29
   Bruce K. B., 1994, Journal of Functional Programming, V4, P127, DOI 10.1017/S0956796800001039
   BRUCE KB, 1990, INFORM COMPUT, V87, P196, DOI 10.1016/0890-5401(90)90062-M
   Bruce KB, 1997, LECT NOTES COMPUT SC, V1241, P104, DOI 10.1007/BFb0053376
   BRUCE KB, 1993, TOIL NEW TYPE SAFE O
   Bruce KimB., 2002, Foundations of Object-Oriented Languages: Types and Semantics
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   CARDONE F, 1989, LECT NOTES COMPUT SC, V372, P164
   COOK WR, 1989, P EUR C OBJ OR PROGR, P57
   DAY M, 1995, P ACM S OBJ OR PROGR, P156
   EIFRIG J, 1994, P OOPSLA 94, P16
   ELLIS MA, 1990, ANNOTATED C PLUS PLU
   Fisher K, 1998, THEOR PRACT OBJ SYST, V4, P3, DOI 10.1002/(SICI)1096-9942(1998)4:1<3::AID-TAPO2>3.0.CO;2-W
   FISHER K, 1993, NORDIC J COMPUT, V1, P3
   FISHER K, 1993, P 8 ANN IEEE S LOG C, P26
   GAWECKI A, 1996, LECT NOTES COMPUTER, V1098, P26
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   IGARASHI A, 2001, IN PRESS ACM T PROGR
   KATIYAR D, 1994, POPL 94 21 ACM SIGPL, P138
   MADSEN OL, 1990, SIGPLAN NOTICES, V25, P10
   MEYER B, 1995, OOPSLA 95
   Meyer B., 1992, Eiffel: The Language
   MITCHELL JC, 1990, P 17 ACM S PRINC PRO, P109
   Pierce B. C., 1994, Journal of Functional Programming, V4, P207, DOI 10.1017/S0956796800001040
   PIERCE BC, 1994, INFORM COMPUT, V112, P131, DOI 10.1006/inco.1994.1055
   PIERCE BC, 1993, P 20 ACM S PRINC PRO, P299
   PIERCE BC, 1993, MUTABLE OBJECTS
   Reynolds JohnC., 1980, Lecture Notes in Computer Science, P211, DOI 10.1007/3-540-10250-7_24
   SCHAFFERT C, 1986, ACM SIGPLAN NOTICES, V21, P11
   TESLER L, 1985, 1 APPL COMP
   VANGENT R, 1993, THESIS WILLIAMS COLL
NR 47
TC 19
Z9 22
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2003
VL 25
IS 2
BP 225
EP 290
DI 10.1145/641888.641891
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 659FD
UT WOS:000181765900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Pagel, J
   Zuleger, F
AF Pagel, Jens
   Zuleger, Florian
TI Strong-separation Logic
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Decision procedure; magic wand; (bi-)abduction
AB Most automated verifiers for separation logic are based on the symbolic-heap fragment, which disallows both the magic-wand operator and the application of classical Boolean operators to spatial formulas. This is not surprising, as support for the magic wand quickly leads to undecidability, especially when combined with inductive predicates for reasoning about data structures. To circumvent these undecidability results, we propose assigning a more restrictive semantics to the separating conjunction. We argue that the resulting logic, strong-separation logic, can be used for symbolic execution and abductive reasoning just like "standard" separation logic, while remaining decidable even in the presence of both the magic wand and inductive predicates (we consider a list-segment predicate and a tree predicate)-a combination of features that leads to undecidability for the standard semantics.
C1 [Pagel, Jens; Zuleger, Florian] TU Wien, Vienna, Austria.
C3 Technische Universitat Wien
RP Pagel, J (corresponding author), TU Wien, Vienna, Austria.
EM jens@pagel.codes; florian.zuleger@tuwien.ac.at
CR Antonopoulos T, 2014, LECT NOTES COMPUT SC, V8412, P411
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   Berdine Josh, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P178, DOI 10.1007/978-3-642-22110-1_15
   Blom S, 2015, INT J SOFTW TOOLS TE, V17, P757, DOI 10.1007/s10009-015-0372-3
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Brochenin R, 2012, INFORM COMPUT, V211, P106, DOI 10.1016/j.ic.2011.12.003
   Calcagno C., 2001, LNCS, V2245, P108, DOI [10.1007/3-540-45294-X10, DOI 10.1007/3-540-45294-X10]
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Cook B, 2011, LECT NOTES COMPUT SC, V6901, P235, DOI 10.1007/978-3-642-23217-6_16
   Demri Stephane, 2014, Computer Science - Theory and Applications. 9th International Computer Science Symposium in Russia, CSR 2014. Proceedings: LNCS 8476, P125, DOI 10.1007/978-3-319-06686-8_10
   Demri S, 2014, IEEE S LOG, DOI 10.1145/2603088.2603142
   Demri S, 2018, LECT NOTES COMPUT SC, V10803, P476, DOI 10.1007/978-3-319-89366-2_26
   Dudka Kamil, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P372, DOI 10.1007/978-3-642-22110-1_29
   Echenim M, 2019, LECT NOTES COMPUT SC, V11425, P242, DOI 10.1007/978-3-030-17127-8_14
   Farka F., 2021, PROC ACM PROGRAM LAN, V5, P1
   Gorogiannis N, 2011, LECT NOTES COMPUT SC, V6887, P25, DOI 10.1007/978-3-642-23702-7_7
   Gu XC, 2016, LECT NOTES ARTIF INT, V9706, P532, DOI 10.1007/978-3-319-40229-1_36
   Iosif Radu, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P21, DOI 10.1007/978-3-642-38574-2_2
   Iosif R, 2014, LECT NOTES COMPUT SC, V8837, P201, DOI 10.1007/978-3-319-11936-6_15
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Katelaan J., 2020, EPiC Series in Computing, V73, P390, DOI [DOI 10.29007/VKMJ,HTTPS, 10.29007/vkmj, DOI 10.29007/VKMJ]
   Katelaan J, 2019, LECT NOTES COMPUT SC, V11428, P319, DOI 10.1007/978-3-030-17465-1_18
   Katelaan J, 2018, LECT NOTES ARTIF INT, V10900, P455, DOI 10.1007/978-3-319-94205-6_30
   Krishna S., 2019, LOCAL REASONING GLOB
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P308, DOI 10.1007/978-3-030-44914-8_12
   Madhusudan P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P611, DOI 10.1145/1926385.1926455
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Pagel J, 2021, Arxiv, DOI arXiv:2002.01202
   Pagel J, 2021, LECT NOTES COMPUT SC, V12648, P664, DOI 10.1007/978-3-030-72019-3_24
   Perez Juan Antonio Navarro, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P90, DOI 10.1007/978-3-319-03542-0_7
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Piskac R, 2014, LECT NOTES COMPUT SC, V8559, P711, DOI 10.1007/978-3-319-08867-9_47
   Qiu XK, 2013, ACM SIGPLAN NOTICES, V48, P231, DOI 10.1145/2499370.2462169
   Quang LL, 2017, LECT NOTES COMPUT SC, V10427, P495, DOI 10.1007/978-3-319-63390-9_26
   Reynolds A, 2017, LECT NOTES COMPUT SC, V10145, P462, DOI 10.1007/978-3-319-52234-0_25
   Reynolds A, 2016, LECT NOTES COMPUT SC, V9938, P244, DOI 10.1007/978-3-319-46520-3_16
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schwerhoff Malte, 2015, LIPIcs, V37, P614
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Tatsuta M, 2015, LECT NOTES COMPUT SC, V9458, P69, DOI 10.1007/978-3-319-26529-2_5
NR 48
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2022
VL 44
IS 3
AR 16
DI 10.1145/3498847
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3V9XX
UT WOS:000842012200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Sangiorgi, D
   Vignudelli, V
AF Sangiorgi, Davide
   Vignudelli, Valeria
TI Environmental Bisimulations for Probabilistic Higher-order Languages
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Environmental bisimulation; probabilistic lambda calculus; contextual
   equivalence; imperative languages
ID CALL-BY-VALUE; CALCULUS; NAME
AB Environmental bisimulations for probabilistic higher-order languages are studied. In contrast with applicative bisimulations, environmental bisimulations are known to be more robust and do not require sophisticated techniques such as Howe's in the proofs of congruence.
   As representative calculi, call-by-name and call-by-value lambda-calculus, and a (call-by-value) A-calculus extended with references (i.e., a store) are considered. In each case, full abstraction results are derived for probabilistic environmental similarity and bisimilarity with respect to contextual preorder and contextual equivalence, respectively. Some possible enhancements of the (bi)simulations, as "up-to techniques," are also presented.
   Probabilities force a number of modifications to the definition of environmental bisimulations in nonprobabilistic languages. Some of these modifications are specific to probabilities, others may be seen as general refinements of environmental bisimulations, applicable also to non-probabilistic languages. Several examples are presented, to illustrate the modifications and the differences.
C1 [Sangiorgi, Davide] Univ Bologna, Dipartimento Informat Sci & Ingn DISI, Mura Anteo Zamboni 7, I-40126 Bologna, Italy.
   [Sangiorgi, Davide] INRIA, Le Chesnay, France.
   [Vignudelli, Valeria] Univ Lyon, CNRS, ENS Lyon, UCB Lyon 1,LIP, Lyon, France.
   [Vignudelli, Valeria] ENS Lyon, Site Monod LIP,46 Allee Italie, F-69007 Lyon, France.
C3 University of Bologna; Inria; Centre National de la Recherche
   Scientifique (CNRS); Universite Claude Bernard Lyon 1; Ecole Normale
   Superieure de Lyon (ENS de LYON); Ecole Normale Superieure de Lyon (ENS
   de LYON)
RP Sangiorgi, D (corresponding author), Univ Bologna, Dipartimento Informat Sci & Ingn DISI, Mura Anteo Zamboni 7, I-40126 Bologna, Italy.; Sangiorgi, D (corresponding author), INRIA, Le Chesnay, France.
EM davide.sangiorgi@unibo.it; valeria.vignudelli@ens-lyon.fr
FU ERC H2020 project "CoVeCe" [678157]; LABEX MILYON of Universite de Lyon,
   within the program "Investissements d'Avenir" [ANR-10-LABX-0070,
   ANR-11-IDEX-0007]; project "REPAS" [ANR-16-CE25-0011]; project ANR
   [12IS02001]; H2020-MSCA-RISE project "Behapi" [778233]; Agence Nationale
   de la Recherche (ANR) [ANR-16-CE25-0011] Funding Source: Agence
   Nationale de la Recherche (ANR)
FX This work has been supported by the ERC H2020 project "CoVeCe" (Grant
   Agreement No. 678157), by the LABEX MILYON (ANR-10-LABX-0070) of
   Universite de Lyon, within the program "Investissements d'Avenir"
   (ANR-11-IDEX-0007), by the project ANR-16-CE25-0011 "REPAS," by the
   project ANR 12IS02001 "PACE," and by H2020-MSCA-RISE project "Behapi"
   (ID 778233).
CR Abadi M, 1998, LECT NOTES COMPUT SC, V1381, P12, DOI 10.1007/BFb0053560
   Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Aristizabal Andres, 2016, P INT C FORM STRUCT, V9
   Biernacki Dariusz, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P333, DOI 10.1007/978-3-319-03542-0_24
   Bizjak A, 2015, LECT NOTES COMPUT SC, V9034, P279, DOI 10.1007/978-3-662-46678-0_18
   Bizjak Ales, 2016, THESIS
   Boreale M., 1998, P ACM IEEE S LOG COM
   Crubillé R, 2014, LECT NOTES COMPUT SC, V8410, P209
   Crubillé R, 2015, LECT NOTES COMPUT SC, V9360, P65, DOI 10.1007/978-3-319-23506-6_7
   Crubillé R, 2015, IEEE S LOG, P633, DOI 10.1109/LICS.2015.64
   Dal Lago U, 2014, ACM SIGPLAN NOTICES, V49, P297, DOI 10.1145/2535838.2535872
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   Danos V., 2002, ACM Transactions on Computational Logic, V3, P359, DOI 10.1145/507382.507385
   Desharnais J, 2002, IEEE S LOG, P413, DOI 10.1109/LICS.2002.1029849
   Desharnais J, 2008, INT CONF QUANT EVAL, P264, DOI 10.1109/QEST.2008.42
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Gordon A. D., 1995, SER ELECT NOTES THEO, V1, P232
   Goubault-Larrecq J, 2015, J LOG ALGEBR METHODS, V84, P155, DOI 10.1016/j.jlamp.2014.09.003
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Jaber G, 2015, LECT NOTES COMPUT SC, V9458, P271, DOI 10.1007/978-3-319-26529-2_15
   Jagadeesan R, 2009, LECT NOTES COMPUT SC, V5490, P72, DOI 10.1007/978-3-642-02059-9_3
   Jeffrey A., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P56, DOI 10.1109/LICS.1999.782586
   Koutavas V, 2006, LECT NOTES COMPUT SC, V3924, P146
   Koutavas V, 2006, ACM SIGPLAN NOTICES, V41, P141, DOI 10.1145/1111320.1111050
   Koutavas V, 2011, ELECTRON NOTES THEOR, V276, P215, DOI 10.1016/j.entcs.2011.09.023
   Lassen SB, 2007, LECT NOTES COMPUT SC, V4646, P283
   Lassen Soren B., 1998, THESIS
   Maraist J, 1999, THEOR COMPUT SCI, V228, P175, DOI 10.1016/S0304-3975(98)00358-2
   Milner R, 2006, INFORM COMPUT, V204, P60, DOI 10.1016/j.ic.2005.07.003
   Mitchell John C., 1996, Foundation of computing series
   Morris James Hiram, 1969, Ph.D. Dissertation
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   PARK D, 1981, B EATCS, V14, P78
   Piérard A, 2012, IEEE S LOG, P531, DOI 10.1109/LICS.2012.63
   Piérard A, 2011, LECT NOTES COMPUT SC, V6604, P123, DOI 10.1007/978-3-642-19805-2_9
   Pitts Andrew, 2012, CAMBRIDGE TRACTS THE, V52, P197
   Pitts Andrew M., 2005, Advanced Topics in Types and Programming Languages, P245
   Pous D., 2012, ADV TOPICS BISIMULAT
   Rutten Jan, 2012, ADV TOPICS BISIMULAT
   Sands D., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P428, DOI 10.1145/263699.263760
   SANGIORGI D, 1994, INFORM COMPUT, V111, P120, DOI 10.1006/inco.1994.1042
   Sangiorgi D., 2012, INTRO BISIMULATION C
   Sangiorgi D, 2007, LECT NOTES COMPUT SC, V4767, P364
   Sangiorgi D, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890002
   Sato N, 2009, LECT NOTES COMPUT SC, V5904, P311, DOI 10.1007/978-3-642-10672-9_22
   Stovring K, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P161
   Sumii E, 2007, THEOR COMPUT SCI, V375, P169, DOI 10.1016/j.tcs.2006.12.032
   Sumii E, 2007, J ACM, V54, DOI 10.1145/1284320.1284325
NR 49
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2019
VL 41
IS 4
AR 22
DI 10.1145/3350618
PG 64
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NG6RI
UT WOS:000564108400003
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Miquey, E
AF Miquey, Etienne
TI A Classical Sequent Calculus with Dependent Types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Dependent types; sequent calculus; classical logic; control operators;
   call-by-value; delimited continuations; continuation-passing-style
   translation; value restriction
ID STRONG NORMALIZATION; LAMBDA-CALCULUS; PROOFS
AB Dependent types are a key feature of the proof assistants based on the Curry-Howard isomorphism. It is well known that this correspondence can be extended to classical logic by enriching the language of proofs with control operators. However, they are known to misbehave in the presence of dependent types, unless dependencies are restricted to values. Moreover, while sequent calculi naturally support continuation-passing-style interpretations, there is no such presentation of a language with dependent types. The main achievement of this article is to give a sequent calculus presentation of a call-by-value language with a control operator and dependent types, and to justify its soundness through a continuation-passing-style translation.
   We start from the call-by-value version of the lambda mu(mu) over tilde -calculus. We design a minimal language with a value restriction and a type system that includes a list of explicit dependencies to maintain type safety. We then show how to relax the value restriction and introduce delimited continuations to directly prove the consistency by means of a continuation-passing-style translation. Finally, we relate our calculus to a similar system by Lepigre and present a methodology to transfer properties from this system to our own.
C1 [Miquey, Etienne] INRIA, Equipe Gallinette, Villers Les Nancy, France.
C3 Inria; Universite de Lorraine
RP Miquey, E (corresponding author), Fac Sci & Tech, IS2N Lab Sci Numer Nantes, 2 Chemin Houssiniere,Bailment 34, F-44322 Nantes, France.
EM etienne.miquey@inria.fr
OI Miquey, Etienne/0000-0002-5987-6547
CR Ahman D, 2016, LECT NOTES COMPUT SC, V9634, P36, DOI 10.1007/978-3-662-49630-5_3
   Ariola Zena M., 2009, Higher-Order and Symbolic Computation, V22, P233, DOI 10.1007/s10990-007-9006-0
   Barbanera F, 1996, INFORM COMPUT, V125, P103, DOI 10.1006/inco.1996.0025
   Barthe G., 1999, Higher-Order and Symbolic Computation, V12, P125, DOI 10.1023/A:1010000206149
   Blot Valentin, 2016, P 31 ANN ACM IEEE S
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   Downen Paul, 2016, P 21 ACM SIGPLAN INT
   Ferreira G, 2011, ELECTRON PROC THEOR, P21, DOI 10.4204/EPTCS.47.4
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Fridlender D, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000210
   Friedman H., 1978, LECT NOTES MATH, V699, P21, DOI DOI 10.1007/BFB0103100
   Fuhrmann C., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80078-1
   Garrigue J, 2004, LECT NOTES COMPUT SC, V2998, P196
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   Harper R., 1993, LISP and Symbolic Computation, V6, P361, DOI 10.1007/BF01019463
   Herbelin H, 2005, LECT NOTES COMPUT SC, V3461, P209
   Herbelin H, 2012, IEEE S LOG, P365, DOI 10.1109/LICS.2012.47
   Herbelin H, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P383, DOI 10.1145/1328438.1328484
   Joachimski F, 2003, ARCH MATH LOGIC, V42, P59, DOI 10.1007/s00153-002-0156-9
   Krivine Jean-Louis, 2009, PANOR SYNTHESES, V27, P197
   Lepigre R, 2016, LECT NOTES COMPUT SC, V9632, P476, DOI 10.1007/978-3-662-49498-1_19
   Lepigre  Rodolphe, 2017, THESIS
   Martin-Lof P., 1985, Proc. of a discussion meeting of the Royal Society of London on Mathematical logic and programming languages, P167
   Miquel A, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:2)2011
   Miquey É, 2017, LECT NOTES COMPUT SC, V10201, P777, DOI 10.1007/978-3-662-54434-1_29
   Miquey Etienne, 2018, P FDN SOFTW SCI COMP
   Miquey Etienne, 2018, P 33 ANN ACM IEEE S
   Munch-Maccagnoni G, 2009, LECT NOTES COMPUT SC, V5771, P409, DOI 10.1007/978-3-642-04027-6_30
   Munch-Maccagnoni Guillaume, 2014, 17 INT C FDN SOFTW S, V8412
   Parigot M, 1997, J SYMBOLIC LOGIC, V62, P1461, DOI 10.2307/2275652
   Paulin-Mohring Christine., 1989, P 16 ACM SIGPLAN S P, P89
   Pédrot PM, 2017, IEEE S LOG, DOI 10.1109/LICS.2017.8005113
   Polonovski E, 2004, LECT NOTES COMPUT SC, V2987, P423
   Vakar M., 2015, ABS151208009 CORR
   Vakar  Matthijs, 2017, THESIS
   vanBakel S, 1997, ANN PURE APPL LOGIC, V86, P267, DOI 10.1016/S0168-0072(96)00036-X
   Wadler P, 2003, ACM SIGPLAN NOTICES, V38, P189, DOI 10.1145/944746.944723
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2019
VL 41
IS 2
SI SI
AR 8
DI 10.1145/3230625
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JT8FU
UT WOS:000501220300002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Heo, K
   Oh, H
   Yang, H
   Yi, K
AF Heo, Kihong
   Oh, Hakjoo
   Yang, Hongseok
   Yi, Kwangkeun
TI Adaptive Static Analysis via Learning with Bayesian Optimization
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Static program analysis; data-driven program analysis; Bayesian
   optimization
ID GLOBAL OPTIMIZATION
AB Building a cost-effective static analyzer for real-world programs is still regarded an art. One key contributor to this grim reputation is the difficulty in balancing the cost and the precision of an analyzer. An ideal analyzer should be adaptive to a given analysis task and avoid using techniques that unnecessarily improve precision and increase analysis cost. However, achieving this ideal is highly nontrivial, and it requires a large amount of engineering efforts.
   In this article, we present a new learning-based approach for adaptive static analysis. In our approach, the analysis includes a sophisticated parameterized strategy that decides, for each part of a given program, whether to apply a precision-improving technique to that part or not. We present a method for learning a good parameter for such a strategy from an existing codebase via Bayesian optimization. The learnt strategy is then used for new, unseen programs. Using our approach, we developed partially flow- and context-sensitive variants of a realistic. C static analyzer. The experimental results demonstrate that using Bayesian optimization is crucial for learning from an existing codebase. Also, they show that among all program queries that require flow- or context-sensitivity, our partially flow- and context-sensitive analysis answers 75% of them, while increasing the analysis cost only by 3.3x of the baseline flow- and context-insensitive analysis, rather than 40x or more of the fully sensitive version.
C1 [Heo, Kihong; Yi, Kwangkeun] Seoul Natl Univ, Seoul, South Korea.
   [Oh, Hakjoo] Korea Univ, Seoul, South Korea.
   [Yang, Hongseok] Univ Oxford, Oxford, England.
C3 Seoul National University (SNU); Korea University; University of Oxford
RP Oh, H (corresponding author), Korea Univ, Coll Informat, Room 616c,Sci Lib Bldg,Anam Dong 5 Ga, Seoul 136713, South Korea.
EM hakjoo_oh@korea.ac.kr
RI Heo, Kihong/F-2901-2018; Yang, Hongseok/AAC-4471-2020; ‍, 오학주[ 부교수 /
   컴퓨터학과 ]/AAW-5194-2020; Heo, Kihong/AAD-8692-2019
OI Heo, Kihong/0000-0003-2671-0142
FU Samsung Research Funding & Incubation Center of Samsung Electronics
   [SRFC-IT1701-09]; Institute for Information & communications Technology
   Promotion (IITP) - Korea government(MSIT) [2017-0-00184]; Institute for
   Information & Communications Technology Promotion (IITP) - Korea
   government (MSIT) [B0717-16-0098]
FX This work was supported by Samsung Research Funding & Incubation Center
   of Samsung Electronics under Project Number SRFC-IT1701-09. This work
   was also supported by Institute for Information & communications
   Technology Promotion (IITP) grant funded by the Korea government(MSIT)
   (Grant No. 2017-0-00184, Self-Learning Cyber Immune Technology
   Development). This work was partly supported by Institute for
   Information & Communications Technology Promotion (IITP) grant funded by
   the Korea government (MSIT) (Grant No. B0717-16-0098).
CR [Anonymous], 2012, P NIPS
   [Anonymous], CORR
   Ball T., 2002, P POPL
   Beckman NE, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P211
   Benjamin Livshits V, 2009, P PLDI
   Chaki S., 2003, P ICSE
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dai L, 1996, J OPTIMIZ THEORY APP, V91, P363, DOI 10.1007/BF02190101
   Grebenshchikov S., 2012, P TACAS
   Gulavani B., 2008, P TACAS
   Gupta Ashutosh Kumar, 2013, International Journal on Software Tools for Technology Transfer, V15, P291, DOI 10.1007/s10009-012-0267-5
   Henzinger T., 2004, P POPL
   Henzinger T., 2003, P SPIN WORKSH MOD CH
   Ho YC, 1999, INFORM SCIENCES, V113, P169, DOI 10.1016/S0020-0255(98)10056-7
   Hutter Frank, 2011, P LION
   Kremenek T, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2510
   Liang Percy, 2011, P POPL
   Mishne A, 2012, ACM SIGPLAN NOTICES, V47, P997, DOI 10.1145/2398857.2384689
   MOCKUS J, 1994, J GLOBAL OPTIM, V4, P347, DOI 10.1007/BF01099263
   Naik Mayur, 2012, P POPL
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Nori Aditya V., 2013, P FSE
   Oh H., 2014, SPARROW
   Oh Hakjoo, 2014, P PLDI
   Oh Hakjoo, 2012, P PLDI
   Oh Hakjoo, 2015, P OOPSLA
   Rasmussen CE, 2005, ADAPT COMPUT MACH LE, P1
   Raychev Veselin, 2015, P POPL
   Raychev Veselin, 2014, P PLDI
   Sankaranarayanan Sriram, 2008, P ISSTA
   Sankaranarayanan Sriram, 2008, P ICSE
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Sharma Rahul, 2013, P ESOP
   Sharma Rahul, 2012, P CAV
   Sharma Rahul, 2013, P SAS
   Smaragdakis Yannis, 2014, P PLDI
   Storn R, 1997, J GLOBAL OPTIM, V11, P341, DOI 10.1023/A:1008202821328
   Wales DJ, 1997, J PHYS CHEM A, V101, P5111, DOI 10.1021/jp970984n
   Xin Zhang, 2014, P PLDI
   Xin Zhang, 2013, P PLDI
NR 40
TC 5
Z9 6
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2018
VL 40
IS 4
AR 14
DI 10.1145/3121135
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HJ4CA
UT WOS:000457120400001
DA 2024-07-18
ER

PT J
AU David, C
   Kesseli, P
   Kroening, D
   Lewis, M
AF David, Cristina
   Kesseli, Pascal
   Kroening, Daniel
   Lewis, Matt
TI Program Synthesis for Program Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Program synthesis; program termination
ID MODEL CHECKING; TERMINATION
AB In this article, we propose a unified framework for designing static analysers based on program synthesis. For this purpose, we identify a fragment of second-order logic with restricted quantification that is expressive enough to model numerous static analysis problems (e.g., safety proving, bug finding, termination and non-termination proving, refactoring). As our focus is on programs that use bit-vectors, we build a decision procedure for this fragment over finite domains in the form of a program synthesiser. We provide instantiations of our framework for solving a diverse range of program verification tasks such as termination, non-termination, safety and bug finding, superoptimisation, and refactoring. Our experimental results show that our program synthesiser compares positively with specialised tools in each area as well as with general-purpose synthesisers.
C1 [David, Cristina; Kesseli, Pascal; Kroening, Daniel; Lewis, Matt] Univ Oxford, Wolfson Bldg,15 Parks Rd, Oxford OX1 3QD, England.
   [David, Cristina] Univ Cambridge, William Gates Bldg,15 JJ Thomson Ave, Cambridge CB3 0FD, England.
C3 University of Oxford; University of Cambridge
RP David, C (corresponding author), Univ Oxford, Wolfson Bldg,15 Parks Rd, Oxford OX1 3QD, England.; David, C (corresponding author), Univ Cambridge, William Gates Bldg,15 JJ Thomson Ave, Cambridge CB3 0FD, England.
EM cd652@cam.ac.uk; pascal.kesseli@stx.ox.ac.uk; kroening@cs.ox.ac.uk;
   matt@cantab.net
OI Kroening, Daniel/0000-0002-6681-5283
FU EPSRC [EP/H017585/1]; H2020 FET OPEN project [712689 SC2]; ERC [280053];
   EPSRC [EP/H017585/1] Funding Source: UKRI
FX This work is supported by EPSRC EP/H017585/1, the H2020 FET OPEN project
   712689 SC<SUP>2</SUP>, and ERC project 280053 "CPROVER."
CR Abate A, 2017, PROCEEDINGS OF THE 20TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (PART OF CPS WEEK) (HSCC' 17), P197, DOI 10.1145/3049797.3049802
   Abate A, 2017, LECT NOTES COMPUT SC, V10426, P462, DOI 10.1007/978-3-319-63387-9_23
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 1962, Proc. Internat. Congr. Mathematicians (Stockholm)
   [Anonymous], 2002, Hacker's Delight
   [Anonymous], 2007, Linear genetic programming
   [Anonymous], 2002, Foundations of Genetic Programming
   Astrom K.J., 1990, COMPUTER CONTROLLED
   Avery J, 2006, LECT NOTES COMPUT SC, V3945, P192
   Ball T, 2010, LECT NOTES COMPUT SC, V6174, P119, DOI 10.1007/978-3-642-14295-6_11
   Ben-Amram AM, 2013, ACM SIGPLAN NOTICES, V48, P51, DOI 10.1145/2480359.2429078
   Ben-Amram AM, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(3:2)2010
   Beyene Tewodros A., 2013, P 25 INT C COMP AID, P869, DOI [10.1007/978-3-642-39799-8_61, DOI 10.1007/978-3-642-39799-8_61]
   Beyene Tewodros A., 2014, P 2014 INT S MOD CHE, P101, DOI DOI 10.1145/2632362.2632364
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3580, P1349
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3385, P113
   Brain Martin, 2006, P ICLP
   Brockschmidt Marc, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P413, DOI 10.1007/978-3-642-39799-8_28
   Chen H.-Y., 2014, TOOLS ALGORITHMS CON, P156
   Chen HY, 2012, LECT NOTES COMPUT SC, V7460, P422, DOI 10.1007/978-3-642-33125-1_28
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Clarke E., 2003, Proceedings 2003. Design Automation Conference (IEEE Cat. No.03CH37451), P368
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Codish M., 2003, P 13 INT WORKSH LOG, P48
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Cook B, 2010, LECT NOTES COMPUT SC, V6015, P236, DOI 10.1007/978-3-642-12002-2_19
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   David C, 2017, PHILOS T R SOC A, V375, DOI 10.1098/rsta.2015.0403
   David C, 2016, LECT NOTES COMPUT SC, V9995, P182, DOI 10.1007/978-3-319-48989-6_12
   David C, 2015, LECT NOTES COMPUT SC, V9450, P483, DOI 10.1007/978-3-662-48899-7_34
   David C, 2015, LECT NOTES COMPUT SC, V9032, P183, DOI 10.1007/978-3-662-46669-8_8
   David Cristina, 2016, TECHNICAL REPORT
   de Moura L, 2008, LECT NOTES ARTIF INT, V5195, P410, DOI 10.1007/978-3-540-71070-7_35
   Dershowitz N, 2001, APPL ALGEBR ENG COMM, V12, P117, DOI 10.1007/s002000100065
   FAGIN R, 1974, COMPLEXITY COMPUTATI
   Floyd RobertW., 1993, Assigning Meanings to Programs, P65, DOI [10.1007/978-94-011-1793-7_4, DOI 10.1007/978-94-011-1793-7_4]
   Franklin GeneF., 2001, Feedback Control of Dynamic Systems, V4th
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Godlin B, 2010, LECT NOTES COMPUT SC, V6200, P167, DOI 10.1007/978-3-642-13754-9_8
   Gomez F, 1997, ADAPT BEHAV, V5, P317, DOI 10.1177/105971239700500305
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Gulwani S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P281, DOI 10.1145/1375581.1375616
   Gulwani Sumit, 2010, P 12 INT ACM SIGPLAN, P13, DOI [DOI 10.1145/1836089.1836091, 10.1145/1836089.1836091]
   Gupta Ashutosh K., 2008, SIGPLAN Notices, V43, P147, DOI 10.1145/1328897.1328459
   Gurfinkel Arie, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P447, DOI 10.1007/978-3-662-46681-0_41
   Haran Arvind, 2015, LECT NOTES COMPUTER, V9035, P450
   Harris WR, 2010, LECT NOTES COMPUT SC, V6337, P304, DOI 10.1007/978-3-642-15769-1_19
   Heizmann Matthias, 2013, LINEAR RANKING LINEA, P365, DOI [10.1007/978-3-319-02444-8_26, DOI 10.1007/978-3-319-02444-8_26]
   Hofferek Georg, 2013, ABS13084767 CORR
   Iu MY, 2010, LECT NOTES COMPUT SC, V6011, P84
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Johan Astrom K., 2021, FEEDBACK SYSTEMS INT
   Keel LH, 1997, IEEE T AUTOMAT CONTR, V42, P1098, DOI 10.1109/9.618239
   Keel LH, 1998, P AMER CONTR CONF, P2852, DOI 10.1109/ACC.1998.688377
   Kong S, 2010, LECT NOTES COMPUT SC, V6461, P328, DOI 10.1007/978-3-642-17164-2_23
   Kraan I., 1993, Logic Program Synthesis and Transformation. Proceedings of LOPSTR 92, International Workshop on Logic Program Synthesis and Transformation, P1
   Kroening Daniel, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P381, DOI 10.1007/978-3-642-39799-8_26
   Kroening D, 2015, LECT NOTES COMPUT SC, V9109, P325, DOI 10.1007/978-3-319-19249-9_21
   Kroening D, 2010, LECT NOTES COMPUT SC, V6174, P89, DOI 10.1007/978-3-642-14295-6_9
   Larraz D, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P218
   MANNA Z, 1971, COMMUN ACM, V14, P151, DOI 10.1145/362566.362568
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   Nori Aditya V., 2010, P INT C SOFTW ENG IC
   Nori Aditya V., 2013, ESECSIGSOFT FSE, P246, DOI 10.1145/2491411
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Porras P., 2009, Proceedings of the 2nd USENIX conference on Large-scale exploits and emergent threats: botnets, spyware, worms, and more, ser. LEET'09. Berkeley, CA, P7
   Reynolds A., 2015, LECT NOTES COMPUTER, P198
   Rybalchenko Andrey, 2011, ARMC
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
   Urban C, 2013, LECT NOTES COMPUT SC, V7935, P43, DOI 10.1007/978-3-642-38856-9_5
   Wang T, 2016, HSCC'16: PROCEEDINGS OF THE 19TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P125, DOI 10.1145/2883817.2883824
   Wintersteiger CM, 2013, FORM METHOD SYST DES, V42, P3, DOI 10.1007/s10703-012-0156-2
NR 80
TC 5
Z9 5
U1 3
U2 19
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2018
VL 40
IS 2
AR 5
DI 10.1145/3174802
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI6TB
UT WOS:000434634500001
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Trinder, P
   Chechina, N
   Papaspyrou, N
   Sagonas, K
   Thompson, S
   Adams, S
   Aronis, S
   Baker, R
   Bihari, EVA
   Boudeville, O
   Cesarini, F
   Di Stefano, M
   Eriksson, S
   Fördös, V
   Ghaffari, A
   Giantsios, A
   Green, R
   Hoch, C
   Klaftenegger, D
   Li, HQ
   Lundin, K
   Mackenzie, K
   Roukounaki, K
   Tsiouris, Y
   Winblad, K
AF Trinder, Phil
   Chechina, Natalia
   Papaspyrou, Nikolaos
   Sagonas, Konstantinos
   Thompson, Simon
   Adams, Stephen
   Aronis, Stavros
   Baker, Robert
   Bihari, E. V. A.
   Boudeville, Olivier
   Cesarini, Francesco
   Di Stefano, Maurizio
   Eriksson, Sverker
   Fordos, Viktoria
   Ghaffari, Amir
   Giantsios, Aggelos
   Green, Rickard
   Hoch, Csaba
   Klaftenegger, David
   Li, Huiqing
   Lundin, Kenneth
   Mackenzie, Kenneth
   Roukounaki, Katerina
   Tsiouris, Yiannis
   Winblad, Kjell
TI Scaling Reliably: Improving the Scalability of the Erlang Distributed
   Actor Platform
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Erlang; scalability; reliability
AB Distributed actor languages are an effective means of constructing scalable reliable systems, and the Erlang programming language has a well-established and influential model. While the Erlang model conceptually provides reliable scalability, it has some inherent scalability limits and these force developers to depart from the model at scale. This article establishes the scalability limits of Erlang systems and reports the work of the EU RELEASE project to improve the scalability and understandability of the Erlang reliable distributed actor model.
   We systematically study the scalability limits of Erlang and then address the issues at the virtual machine, language, and tool levels. More specifically: (1) We have evolved the Erlang virtual machine so that it canwork effectively in large-scale single-host multicore and NUMA architectures. We have made important changes and architectural improvements to the widely used Erlang/OTP release. (2) We have designed and implemented Scalable Distributed (SD) Erlang libraries to address language-level scalability issues and provided and validated a set of semantics for the new language constructs. (3) To make large Erlang systems easier to deploy, monitor, and debug, we have developed and made open source releases of five complementary tools, some specific to SD Erlang.
   Throughout the article we use two case studies to investigate the capabilities of our new technologies and tools: a distributed hash table based Orbit calculation and Ant Colony Optimisation (ACO). Chaos Monkey experiments show that two versions of ACO survive random process failure and hence that SD Erlang preserves the Erlang reliability model. While we report measurements on a range of NUMA and cluster architectures, the key scalability experiments are conducted on the Athos cluster with 256 hosts (6,144 cores). Even for programs with no global recovery data to maintain, SD Erlang partitions the network to reduce network traffic and hence improves performance of the Orbit and ACO benchmarks above 80 hosts. ACO measurements show that maintaining global recovery data dramatically limits scalability; however, scalability is recovered by partitioning the recovery data. We exceed the established scalability limits of distributed Erlang, and do not reach the limits of SD Erlang for these benchmarks at this scale (256 hosts, 6,144 cores).
C1 [Trinder, Phil; Chechina, Natalia; Ghaffari, Amir; Mackenzie, Kenneth] Univ Glasgow, Sch Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
   [Papaspyrou, Nikolaos; Giantsios, Aggelos; Roukounaki, Katerina; Tsiouris, Yiannis] Natl Tech Univ Athens, Sch Elect & Comp Engn, Polytechnioupoli, Athens 15780, Greece.
   [Sagonas, Konstantinos; Aronis, Stavros; Klaftenegger, David; Winblad, Kjell] Uppsala Univ, Dept Informat Technol, Box 337, SE-75105 Uppsala, Sweden.
   [Sagonas, Konstantinos] Natl Tech Univ Athens, Athens, Greece.
   [Thompson, Simon; Adams, Stephen; Baker, Robert; Di Stefano, Maurizio; Li, Huiqing] Univ Kent, Sch Comp, Canterbury CT2 7NF, Kent, England.
   [Bihari, E. V. A.; Cesarini, Francesco; Fordos, Viktoria; Hoch, Csaba] Erlang Solut, 14 Gowers Walk, London E1 8PY, England.
   [Boudeville, Olivier] Electricite France, Paris, France.
   [Eriksson, Sverker; Green, Rickard; Lundin, Kenneth] Ericsson AB, S-16483 Kista, Sweden.
   [Boudeville, Olivier] EDF R&D, F-92140 Clamart, France.
C3 University of Glasgow; National Technical University of Athens; Uppsala
   University; National Technical University of Athens; University of Kent;
   Electricite de France (EDF); Ericsson; Electricite de France (EDF)
RP Trinder, P (corresponding author), Univ Glasgow, Sch Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
EM Phil.Trinder@Glasgow.ac.uk; Natalia.Chechina@Glasgow.ac.uk;
   nickie@softlab.ntua.gr; kostis@it.uu.se; s.j.thompson@kent.ac.uk;
   sa597@kent.ac.uk; stavros.aronis@it.uu.se; rb440@kent.ac.uk;
   eva.bihari@erlang-solutions.com; olivier.boudeville@edf.fr;
   francesco@erlang-solutions.com; distefano.maurizio@alice.it;
   Sverker.Eriksson@ericsson.com; viktoria.fordos@erlang-solutions.com;
   amir_ghaffari@yahoo.com; aggelgian@gmail.com;
   Rickard.Green@ericsson.com; csaba.hoch@erlang-solutions.com;
   david.klaftenegger@it.uu.se; Huiqing.Li@ee.co.uk;
   kenneth.lundin@ericsson.com; kwxm@inf.ed.ac.uk; arou@softlab.ntua.gr;
   gtsiour@softlab.ntua.gr; kjell.winblad@it.uu.se
RI Sagonas, Konstantinos/IZD-8641-2023
OI Sagonas, Konstantinos/0000-0001-9657-0179; Fordos,
   Viktoria/0000-0001-6403-9797; Papaspyrou, Nikolaos/0000-0002-1934-7181;
   Trinder, Phil/0000-0003-0190-7010
FU European Union [RII3-CT-2005-026133, IST-2011-287510]; UK's Engineering
   and Physical Sciences Research Council [EP/G055181/1]; EPSRC
   [EP/G055181/1, EP/L000687/1] Funding Source: UKRI
FX This work has been supported by the European Union Grant
   RII3-CT-2005-026133 "SCIEnce: Symbolic Computing Infrastructure in
   Europe," Grant IST-2011-287510 "RELEASE: A High-Level Paradigm for
   Reliable Large-scale Server Software," and by the UK's Engineering and
   Physical Sciences Research Council Grant EP/G055181/1 "HPC-GAP: High
   Performance Computational Algebra and Discrete Mathematics."
CR AGHA G, 1986, SIGPLAN NOTICES, V21, P58, DOI 10.1145/323648.323743
   Agha Gul, 1985, THESIS
   AMD, 2015, BULLD MICR
   [Anonymous], 2004, ANT COLONY OPTIMIZAT
   [Anonymous], 2014, ADA LETT, DOI DOI 10.1145/2692956.2663188
   [Anonymous], 2006, P 2006 ACM SIGPLAN W
   [Anonymous], P 11 ACM SIGPLAN WOR
   [Anonymous], 2002, ACM SIGACT NEWS
   ARAGON CR, 1989, ANN IEEE SYMP FOUND, P540, DOI 10.1109/SFCS.1989.63531
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Aronis S., 2012, P 11 ACM SIGPLAN WOR, P33
   Baker Robert, 2013, VIS LANG COMP VLC P
   Barroso Luiz Andr., 2013, The Datacenter as a Computer: An Introduction to the Design of Warehouse-Scale Machines, V2nd
   Basho Technologies, 2014, RIAKD BASH BENCH
   BEASLEY JE, 1990, J OPER RES SOC, V41, P1069, DOI 10.2307/2582903
   Bennett C., 2012, Netflix Blog
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Boudeville Olivier, 2012, TECHNICAL MANUAL SIM
   Bozó I, 2015, LECT NOTES COMPUT SC, V8843, P104, DOI 10.1007/978-3-319-14675-1_7
   Calciu I, 2013, ACM SIGPLAN NOTICES, V48, P157, DOI 10.1145/2517327.2442532
   Cesarini Francesco, 2009, Erlang Programming: A Concurrent Approach to Software Development
   Chandra R., 2001, PARALLEL PROGRAMMING, DOI DOI 10.5555/355074
   Chechina N, 2017, IEEE T PARALL DISTR, V28, P2244, DOI 10.1109/TPDS.2017.2654246
   Chechina N, 2016, J PARALLEL DISTR COM, V90-91, P22, DOI 10.1016/j.jpdc.2016.01.002
   Chechina Natalia, 2016, P ACM SIGPLAN WORKSH, P33
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Crauwels H. A. J., 1998, INFORMS Journal on Computing, V10, P341, DOI 10.1287/ijoc.10.3.341
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dewolfs D, 2006, LECT NOTES COMPUT SC, V4192, P133
   Donovan Alan A.A., 2015, The Go Programming Language, V1st
   Ellen F, 2007, PODC'07: PROCEEDINGS OF THE 26TH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P13
   Epstein J, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P118
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gainaru A, 2015, COMPUT COMMUN NETW S, P89, DOI 10.1007/978-3-319-20943-2_2
   Geiger Martin Josef, 2010, NEW INSTANCES SINGLE
   Germain Guillaume, 2006, P 2006 ACM SIGPLAN W, P20
   Ghaffari A., 2014, P 13 ACM SIGPLAN WOR, P43
   Ghaffari Amir, 2014, DE BENCH BENCHMARK T
   Ghaffari Amir, 2013, P 12 ACM SIGPLAN WOR, P73, DOI [10.1145/2505305.2505315, DOI 10.1145/2505305.2505315]
   Grimshaw AS, 1997, COMMUN ACM, V40, P39, DOI 10.1145/242857.242867
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hewitt Carl, 2010, ABS10081459 CORR
   Hickey Rich, 2008, P DYN LANG S DLS 08
   Horvath Zoltan, 2008, P WORKSH ADV SOFTW D
   KALE LV, 1993, SIGPLAN NOTICES, V28, P91, DOI 10.1145/167962.165874
   Klaftenegger D, 2014, LECT NOTES COMPUT SC, V8632, P572, DOI 10.1007/978-3-319-09873-9_48
   Klaftenegger David, 2013, P 12 ACM SIGPLAN WOR, P15
   Klaftenegger David, 2017, IEEE T PARA IN PRESS
   Klophaus Rusty., 2010, ACM SIGPLAN COMMERCI, P14
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   Lee J., 2010, PYTHON ACTOR RUNTIME
   Li Huiqing, 2013, P 12 ACM SIGPLAN WOR
   Li Huiqing, 2015, P WORKSH PART EV PRO
   Li Huiqing, 2014, P 9 INT WORKSH AUT S
   Li Huiqing, 2008, ACM SIGPLAN ERL WORK, V2008
   Li Huiqing, 2012, P C AUT SOFTW ENG AS
   Lübeck F, 2001, EXP MATH, V10, P197
   Lutac A., 2016, P 15 INT WORKSH ERL, P12
   LWN. net, 2006, HIGH RES TIM APL
   MacKenzie Kenneth, 2015, P 14 ACM SIGPLAN WOR, P27
   Matocha J, 1998, J SYST SOFTWARE, V43, P207, DOI 10.1016/S0164-1212(98)10034-1
   MCNAUGHTON R, 1959, MANAGE SCI, V6, P1, DOI 10.1287/mnsc.6.1.1
   Odersky Martin, 2012, SCALA PROGRAMMING LA
   Opdyke William F., 1992, THESIS
   RELEASE Project Team, 2015, 287510 EU REL PROJ T
   Sagonas Konstantinos, 2016, Languages and Compilers for Parallel Computing. 28th International Workshop, LCPC 2015. Revised Selected Papers: LNCS 9519, P37, DOI 10.1007/978-3-319-29778-1_3
   Sagonas K, 2015, INT SYMP PARA DISTR, P215, DOI 10.1109/ISPDC.2015.32
   Sagonas K, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P13, DOI 10.1145/1599410.1599414
   Sagonas Konstantinos, 2014, P 13 ACM SIGPLAN WOR, P3
   Snir M., 1995, MPI: The Complete Reference
   Srinivasan S, 2008, LECT NOTES COMPUT SC, V5142, P104, DOI 10.1007/978-3-540-70592-5_6
   Syme Don, 2015, EXPERT F 4 0
   Thompson S, 2013, J FUNCT PROGRAM, V23, P293, DOI 10.1017/S0956796813000117
   Volker Marcus, 2014, LINUX TIMERS
   White T, 2015, Hadoop: the definitive guide: storage and analysis at internet scale, V4th
   Wiger Ulf, 2000, P C IMPL FUNCT LANG
NR 77
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2017
VL 39
IS 4
AR 17
DI 10.1145/3107937
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AW
UT WOS:000414328600004
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Bhaskaracharya, SG
   Bondhugula, U
   Cohen, A
AF Bhaskaracharya, Somashekaracharya G.
   Bondhugula, Uday
   Cohen, Albert
TI Automatic Storage Optimization for Arrays
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Design; Experimentation; Performance; Compilers; storage
   mapping optimization; memory optimization; array contraction; polyhedral
   framework
AB Efficient memory allocation is crucial for data-intensive applications, as a smaller memory footprint ensures better cache performance and allows one to run a larger problem size given a fixed amount of main memory. In this article, we describe a new automatic storage optimization technique to minimize the dimensionality and storage requirements of arrays used in sequences of loop nests with a predetermined schedule. We formulate the problem of intra-array storage optimization as one of finding the right storage partitioning hyperplanes: each storage partition corresponds to a single storage location. Our heuristic is driven by a dual-objective function that minimizes both the dimensionality of the mapping and the extents along those dimensions. The technique is dimension optimal for most codes encountered in practice. The storage requirements of the mappings obtained also are asymptotically better than those obtained by any existing schedule-dependent technique. Storage reduction factors and other results that we report from an implementation of our technique demonstrate its effectiveness on several real-world examples drawn from the domains of image processing, stencil computations, high-performance computing, and the class of tiled codes in general.
C1 [Bhaskaracharya, Somashekaracharya G.; Bondhugula, Uday] Indian Inst Sci, Dept Comp Sci & Automat, Bangalore 560012, Karnataka, India.
   [Cohen, Albert] INRIA, 45 Rue Ulm, F-75005 Paris, France.
   [Cohen, Albert] ENS, 45 Rue Ulm, F-75005 Paris, France.
C3 Indian Institute of Science (IISC) - Bangalore; Inria; Universite PSL;
   Ecole Normale Superieure (ENS)
RP Bhaskaracharya, SG; Bondhugula, U (corresponding author), Indian Inst Sci, Dept Comp Sci & Automat, Bangalore 560012, Karnataka, India.; Cohen, A (corresponding author), INRIA, 45 Rue Ulm, F-75005 Paris, France.; Cohen, A (corresponding author), ENS, 45 Rue Ulm, F-75005 Paris, France.
EM gbs@csa.iisc.ernet.in; uday@csa.iisc.ernet.in; Albert.Cohen@inria.fr
CR Abu-Mahmeed Samah, 2009, P INT C COMP CONSTR
   Alias C, 2007, ACM SIGPLAN NOTICES, V42, P73, DOI 10.1145/1273444.1254778
   Alias Christophe, 2007, BEE CL K
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Bandishti V., 2012, P INT C HIGH PERF CO, P40, DOI DOI 10.1109/SC.2012.107
   Bondhugula U, 2008, LECT NOTES COMPUT SC, V4959, P132
   Clauss P, 2009, IEEE T VLSI SYST, V17, P983, DOI 10.1109/TVLSI.2008.2002049
   Darte A, 2005, IEEE T COMPUT, V54, P1242, DOI 10.1109/TC.2005.167
   De Greef E, 1997, PARALLEL COMPUT, V23, P1811, DOI 10.1016/S0167-8191(97)00089-6
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   GNU, 2010, GLPK GNU LIN PROGR K
   Grosser Tobias, 2014, P IEEE ACM INT S COD, P66
   Harris C., 1988, ALVEY VISION C, P147151
   Intel, 2013, US INT VTUNE AMPL XE
   Intel, 2015, INT VTUNE AMPL XE 20
   Lefebvre V, 1998, PARALLEL COMPUT, V24, P649, DOI 10.1016/S0167-8191(98)00029-5
   Mullapudi Ravi Teja, 2015, P 20 INT C ARCH SUPP
   Pananilath I, 2015, ACM T ARCHIT CODE OP, V12, DOI 10.1145/2739047
   Pluto, 2008, PLUTO AUTOMATIC POLY
   Quilleré F, 2000, ACM T PROGR LANG SYS, V22, P773, DOI 10.1145/365151.365152
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Strout MM, 1998, ACM SIGPLAN NOTICES, V33, P24, DOI 10.1145/291006.291015
   Succi S., 2001, The Lattice Boltzmann Equation: For Fluid Dynamics and Beyond
   Thies W, 2001, ACM SIGPLAN NOTICES, V36, P232, DOI 10.1145/381694.378852
   Thies W, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286825
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   Wilde D., 1996, Euro-Par '96 Parallel Processing. Second International Euro-Par Conference. Proceedings, P389
NR 28
TC 2
Z9 2
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2016
VL 38
IS 3
AR 11
DI 10.1145/2845078
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DL6BF
UT WOS:000375721600004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ariola, ZM
   Bohannon, A
   Sabry, A
AF Ariola, Zena M.
   Bohannon, Aaron
   Sabry, Amr
TI Sequent Calculi and Abstract Machines
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Curry-Howard isomorphism; duality; explicit
   substitutions; Krivine machine; natural deduction
ID VERIFICATION
AB We propose a sequent calculus derived from the (lambda) over bar mu(mu) over tilde -calculus of Curien and Herbelin that is expressive enough to directly represent the fine details of program evaluation using typical abstract machines. Not only does the calculus easily encode the usual components of abstract machines such as environments and stacks, but it can also simulate the transition steps of the abstract machine with just a constant overhead. Technically this is achieved by ensuring that reduction in the calculus always happens at a bounded depth from the root of the term. We illustrate these properties by providing shallow encodings of the Krivine (call-by-name) and the CEK (call-by-value) abstract machines in the calculus.
C1 [Ariola, Zena M.] Univ Oregon, Dept Comp & Informat Sci, Eugene, OR 97403 USA.
   [Bohannon, Aaron] Univ Penn, Philadelphia, PA 19104 USA.
   [Sabry, Amr] Indiana Univ, Bloomington, IN 47405 USA.
C3 University of Oregon; University of Pennsylvania; Indiana University
   System; Indiana University Bloomington
RP Ariola, ZM (corresponding author), Univ Oregon, Dept Comp & Informat Sci, 305 Deschutes Hall,1202 Univ Oregon, Eugene, OR 97403 USA.
EM ariola@cs.uoregon.edu
OI Sabry, Amr/0000-0002-1025-7331
FU National Science Foundation [CCR-0204389]
FX This work was supported by National Science Foundation grant number
   CCR-0204389.
CR ABADI M, 1990, ACM SIGPLAN SIGACT S, P31
   AGER MS, 2003, RES SERIES BRICS
   [Anonymous], 1980, To H. B. Curry: Essays on Combinatory Logic, -calculus and Formalism
   APPEL A, 2001, IEEE S LOG COMPUTER
   Barthe G, 2001, LECT NOTES COMPUT SC, V2028, P302
   Curien PL, 1996, J ACM, V43, P362, DOI 10.1145/226643.226675
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   DANOS V, 1993, P WORKSH LIN LOG
   Douence R, 1998, ACM T PROGR LANG SYS, V20, P344, DOI 10.1145/276393.276397
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   FELLEISEN M, 1986, 1 S LOG COMP SCI, P131
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   FOURNET C, 2002, ACM S PRINC PROGR LA, P307
   Gentzen G., 1969, The collected papers of Gerhard Gentzen
   GRIFFIN T, 1990, ACM C PRINC PROGR LA, P47
   HARDIN T, 1996, ICFP, P25
   HERBELIN H, 1994, LECT NOTES COMPUTER, V933
   HIGUCHI T, 2002, ACM PPDP C 2002, P201
   Huet G.P., 1991, Computational Logic-Essays in Honor of Alan Robinson, P395
   JONES MP, 1998, P OOPSLA WORKSH FORM
   Klein G, 2004, J LOGIC ALGEBR PROGR, V58, P27, DOI 10.1016/j.jlap.2003.07.004
   KRIVINE JL, 2007, HIGHER ORDE IN PRESS
   LESCANNE P, 1994, ANN ACM S PRINC PROG, P60
   Liu HB, 2004, LECT NOTES COMPUT SC, V3223, P184
   MORRISETT JG, 2002, J FUNCTIONAL PROGRAM
   PARIGOT M, 1993, COMPUT LOGIC THEORY, V713, P263
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Polonovski E, 2004, LECT NOTES COMPUT SC, V2987, P423
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   Prawitz D., 1965, Natural Deduction: A Proof-Theoretical Study
   REUS B, 1998, J FUNCT PROGRAM, V8, P543
   WADLER P, 2003, P ACM SIGPLAN INT C
   WAND M, 2007, HIGHER ORDE IN PRESS
   YELLAND PM, 1999, ACM SIGPLAN SIGACT S, P57
NR 34
TC 15
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2009
VL 31
IS 4
AR 13
DI 10.1145/1516507.1516508
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 453SZ
UT WOS:000266633900001
OA Bronze
DA 2024-07-18
ER

PT J
AU Ben-Amram, AM
AF Ben-Amram, Amir M.
TI Size-change termination with difference constraints
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; theory; verification; abstraction; program analysis;
   size-change graph; size-change termination; termination analysis
AB This article considers an algorithmic problem related to the termination analysis of programs. More specifically, we are given bounds on differences in sizes of data values before and after every transition in the program's control-flow graph. Our goal is to infer program termination via the following reasoning ("the size-change principle"): if in any infinite ( hypothetic) execution of the program, some size must descend unboundedly, the program must always terminate, since infinite descent of a natural number is impossible.
   The problem of inferring termination from such abstract information is not the halting problem for programs and may well be decidable. If this is the case, the decision algorithm forms a "back end" of a termination verifier, and it is interesting to find out the computational complexity of the problem.
   A restriction of the problem described above, which only uses monotonicity information ( but not difference bounds), is already known to be decidable. We prove that the unrestricted problem is undecidable, which gives a theoretical argument for studying restricted cases. We consider a case where the termination proof is allowed to make use of at most one bound per target variable in each transition. For this special case, which we claim is practically significant, we give ( for the first time) an algorithm and show that the problem is in PSPACE, in fact that it is PSPACE-complete. The algorithm is based on combinatorial arguments and results from the theory of integer programming not previously used for similar problems.
   The algorithm has interesting connections to other work in termination, in particular to methods for generating linear ranking functions or invariants.
C1 Acad Coll Tel Aviv Yaffo, Tel Aviv, Israel.
RP Ben-Amram, AM (corresponding author), Acad Coll Tel Aviv Yaffo, Tel Aviv, Israel.
EM amirben@mta.ac.il
CR Anderson H, 2003, LECT NOTES COMPUT SC, V2895, P122
   [Anonymous], 1981, RUDIMENTS RAMSEY THE
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], ADV LOGIC PROGRAMMIN
   AVERY J, 2006, LECT NOTES COMPUTER, V3945
   Ben-Amram AM, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180480
   Brodsky A., 1991, Proceedings of the Tenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P227, DOI 10.1145/113413.113434
   BUENO F, 1994, MIT PS LOG, P320
   Codish M, 2005, LECT NOTES COMPUT SC, V3668, P326, DOI 10.1007/11562931_25
   Codish M, 1999, J LOGIC PROGRAM, V41, P103, DOI 10.1016/S0743-1066(99)00006-0
   COLON M, 2002, LNCS, V2404, P442
   Cook B, 2005, LECT NOTES COMPUT SC, V3672, P87
   Cook B, 2006, LECT NOTES COMPUT SC, V4144, P415, DOI 10.1007/11817963_37
   De Schreye D, 1994, J LOGIC PROGRAM, V20, P199, DOI 10.1016/0743-1066(94)90027-2
   Dershowitz N, 2001, APPL ALGEBR ENG COMM, V12, P117, DOI 10.1007/s002000100065
   DOWNEY RG, 1995, SIAM J COMPUT, V24, P873, DOI 10.1137/S0097539792228228
   Jones N. D., 1977, Theoretical Computer Science, V4, P277, DOI 10.1016/0304-3975(77)90014-7
   Jones N. D., 1997, FDN COMPUTING SERIES
   Jones ND, 2004, LECT NOTES COMPUT SC, V3091, P1
   Jones Neil D., 1988, Partial evaluation and mixed computation, P225
   Lee Chin Soon, 2001, PRINCIPLES PROGRAMMI, P81, DOI [10.1145/360204.360210, DOI 10.1145/360204.360210]
   LEE CS, 2008, ACM T PROG LAN UNPUB
   LEE CS, 2002, THESIS U W AUSTR
   LINDENSRAUSS N, 1997, AUTOMATIC TERMINATIO
   Lindenstrauss N, 1997, LOGIC PROGRAMM, P63
   Manolios P, 2006, LECT NOTES COMPUT SC, V4144, P401, DOI 10.1007/11817963_36
   Naish L., 1985, Journal of Logic Programming, V2, P167, DOI 10.1016/0743-1066(85)90017-2
   PAPADIMITRIOU CH, 1981, J ACM, V28, P765, DOI 10.1145/322276.322287
   PLUMER L, 1990, LECT NOTES ARTIFICIA, V446
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   SAGIV Y, 1991, P 1991 INT S LOG PRO, P518
   Sohn K., 1991, Proceedings of the Tenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P216, DOI 10.1145/113413.113433
   Thiemann R, 2005, APPL ALGEBR ENG COMM, V16, P229, DOI 10.1007/s00200-005-0179-7
   ULLMAN JD, 1988, J ACM, V35, P345, DOI 10.1145/42282.42285
NR 35
TC 21
Z9 21
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2008
VL 30
IS 3
AR 16
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308XV
UT WOS:000256425100005
DA 2024-07-18
ER

PT J
AU Liquori, L
   Spiwack, A
AF Liquori, Luigi
   Spiwack, Arnaud
TI FeatherTrait: A modest extension of Featherweight Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; languages; theory; Java; inheritance; language design; language
   semantics
ID MIXIN MODULES; TRAITS; CALCULUS
AB In the context of statically typed, class-based languages, we investigate classes that can be extended with trait composition. A trait is a collection of methods without state; it can be viewed as an incomplete stateless class. Traits can be composed in any order, but only make sense when imported by a class that provides state variables and additional methods to disambiguate conflicting names arising between the imported traits. We introduce FeatherTrait Java (FTJ), a conservative extension of the simple lightweight class-based calculus Featherweight Java (FJ) with statically typed traits. In FTJ, classes can be built using traits as basic behavioral bricks; method conflicts between imported traits must be resolved explicitly by the user either by (i) aliasing or excluding method names in traits, or by (ii) overriding explicitly the conflicting methods in the class or in the trait itself We present an operational semantics with a lookup algorithm, and a sound type system that guarantees that evaluating a well-typed expression never yields a message- not-understood runtime error nor gets the interpreter stuck. We give examples of the increased expressive power of the trait-based inheritance model. The resulting calculus appears to be a good starting point for a rigorous mathematical analysis of typed class-based languages featuring trait-based inheritance.
C1 [Liquori, Luigi] INRIA, F-06902 Sophia Antipolis, France.
   [Spiwack, Arnaud] Ecole Normale Super, F-94235 Cachan, France.
C3 Inria; Universite Paris Saclay
RP Liquori, L (corresponding author), INRIA, 2004 Route Lucioles,BP 93, F-06902 Sophia Antipolis, France.
EM Luigi.Liquori@inria.fr; Arnaud.Spiwack@dptinfo.ens-cachan.fr
RI LIQUORI, Luigi/C-3433-2015
OI LIQUORI, Luigi/0000-0003-3961-4205
CR ALLEN EE, 2003, MIXINS GENERIC JAVA
   Allen Eric., 2007, The Fortress Language Specification
   Ancona D., 2002, Mathematical Structures in Computer Science, V12, P701, DOI 10.1017/S0960129502003687
   Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   Ancona D, 2002, J FUNCT PROGRAM, V12, P91, DOI 10.1017/S0956796801004257
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   BONO V, 1999, LECT NOTES COMPUTER, V1628
   BONO V, 1997, LECT NOTES COMPUTER, V1214, P465
   BRACHA G, 1990, P OOPSLA ECOOP 90 AC, V25, P303, DOI DOI 10.1145/97945.97982
   Bracha G., 2016, The Dart Programming Language. Always learning
   CARDELLI L, 1995, COMPUT SYST, V8, P27, DOI 10.1080/08934219509367604
   DIGIANANTONIO P, 1998, P OOPSLA, P166
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Duggan D, 1996, ACM SIGPLAN NOTICES, V31, P262, DOI 10.1145/232629.232654
   FINDLER RB, 1998, P 3 ACM SIGPLAN INT, P94
   FISHER K, 2004, STATICALLY TYPED TRA
   Flatt Matthew., 1998, P ACM SIGPLAN 1998 C, P236
   GOLDBERG A, 1983, SMALLTALK80 LANG ITS
   Hirschowitz T, 2004, LECT NOTES COMPUT SC, V2986, P64
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Liquori L, 1997, LECT NOTES COMPUT SC, V1241, P146, DOI 10.1007/BFb0053378
   Liquori L., 2004, RR5247 INRIA
   LIQUORI L, 2008, IN PRESS THEORET COM
   LIQUORI L, 1998, LECT NOTES COMPUTER, V1445, P498
   MEZINI M, 2002, TUDST200202 DARMST U
   *MICROSOFT, C HOM PAG
   *MOB TEAM, 2007, MOB HOM PAG
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Quitslund P. J., 2004, CSE04005 OGI SCH SCI
   *SCALATEAM, 2007, SCAL HOM PAG
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Smith C, 2005, LECT NOTES COMPUT SC, V3586, P453
   Snyder A., 1987, RES DIRECTIONS OBJEC, P165
   STROUSTRUP B, 1997, C PROGRAMMING LANGUA, pCH15
   *SUN, JAV TECHN
   UNGAR D, 1987, P OOPSLA 87, P227
   Wells JB, 2000, LECT NOTES COMPUT SC, V1782, P412
NR 40
TC 28
Z9 31
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 2
AR 11
DI 10.1145/1330017.1330022
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 280HZ
UT WOS:000254418100005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Barabash, K
   Ben-Yitzhak, O
   Goft, I
   Kolodner, EK
   Leikehman, V
   Ossia, Y
   Owshanko, A
   Petrank, E
AF Barabash, K
   Ben-Yitzhak, O
   Goft, I
   Kolodner, EK
   Leikehman, V
   Ossia, Y
   Owshanko, A
   Petrank, E
TI A parallel, incremental, mostly concurrent garbage collector for servers
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; performance; algorithms; garbage collection; JVM; concurrent
   garbage collection
ID REAL-TIME
AB Multithreaded applications with multigigabyte heaps running on modern servers provide new challenges for garbage collection (GC). The challenges for "server-oriented" GC include: ensuring short pause times on a multigigabyte heap while minimizing throughput penalty, good scaling on multiprocessor hardware, and keeping the number of expensive multicycle fence instructions required by weak ordering to a minimum.
   We designed and implemented a collector facing these demands building on the mostly concurrent garbage collector proposed by Boehm et al. [1991]. Our collector incorporates new ideas into the original collector. We make it parallel and incremental; we employ concurrent low-priority background GC threads to take advantage of processor idle time-, we propose novel algorithmic improvements to the basic mostly concurrent algorithm improving its efficiency and shortening its pause times; and finally, we use advanced techniques, such as a low-overhead work packet mechanism to enable full parallelism among the incremental and concurrent collecting threads and ensure load balancing.
   We compared the new collector to the mature, well-optimized, parallel, stop-the-world mark-sweep collector already in the IBM JVM. When allowed to run aggressively, using 72% of the CPU utilization during a short concurrent phase, our collector prototype reduces the maximum pause time from 161 Ins to 46 Ins while only losing 11.5% throughput when running the SPECjbb2000 benchmark on a 600-MB heap on an 8-way PowerPC 1.1-GHz processors. When the collector is limited to a nonintrusive operation using only 29% of the CPU utilization, the maximum pause time obtained is 79 ms and the loss in throughput is 15.4%.
C1 Technion Israel Inst Technol, Dept Comp Sci, IL-32000 Haifa, Israel.
C3 Technion Israel Institute of Technology
RP IBM Corp, Haifa Res Lab, IL-31905 Haifa, Israel.
EM kathy@il.ibm.com; orib@il.ibm.com; girit@il.ibm.com;
   kolodner@il.ibm.com; lei@il.ibm.com; yossia@il.ibm.com;
   avshash@cs.technion.ac.il; erez@cs.technion.ac.il
CR ADVE SV, 1995, 957 W RES LAB
   [Anonymous], IA 64 APPL DEV ARCH
   [Anonymous], 1990, Computer Architecture: A Quantitative Approach
   AZAGURY A, 1999, PARAL P LETT
   AZATCHI H, 2003, P ACM C OBJ OR SYST
   BACON D.F., 1998, PLDI 98, P258
   BACON DF, 2001, P SIGPLAN 2001 C PRO
   BAKER HG, 1978, COMMUN ACM, V21, P280, DOI 10.1145/359460.359470
   BENYITZHAK O, 2002, P 3 INT S MEM MAN BE, P100
   BOEHM HJ, 1991, SIGPLAN NOTICES, V26, P157
   BORMAN S, 2002, SENSIBLE SANITATIO 1
   CHENG P, 2001, P ACM SIGPLAN C PROG, P125, DOI DOI 10.1145/378795.378823
   CORELLA F, 1993, 18638 IBM TJ WATS RE
   DETREVILLE J, 1990, 64 DEC SYST RES CTR
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   DIJKSTRA EW, 1976, LECT NOTES COMPUTER, V46
   Dimpsey R, 2000, IBM SYST J, V39, P151, DOI 10.1147/sj.391.0151
   DOLIGEZ D, 1993, 20 ANN ACM S PRINC P, P113
   DOLIGEZ D, 1994, 21 ANN ACM S PRINC P
   DOMANI T, 2000, ACM SIGPLAN NOTICE B, V3, P1
   DOMANI T, 2000, ACM SIGPLAN NOTICES
   ENDO T, 2002, P 3 INT S MEM MAN IS, P12
   ENDO T, 1997, P HIGH PERF COMP NET
   FLOOD C, 2001, P US JAV VIRT MACH R
   HOSKING T, 2000, ACM SIGPLAN NOTICES, V36
   HUDSON RL, 2001, ISCOPE C ACM 2001 JA, P48
   HUDSON RL, 1992, LECT NOTES COMPUTER, V637
   *IBM, 2000, SA22783201 IBM
   *INT SOFTW NETW SO, 2005, INT VTUN PERF AN
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   LANG B, 1987, SIGPLAN NOTICES, V22, P253, DOI 10.1145/960114.29677
   LEVANONI Y, 2001, ACM SIGPLAN NOTICE B, V3, P10
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   MOON DA, 1984, 1984 ACM S LISP FUNC, P235
   NETTLES SM, 1993, ACM SIGPLAN NOTICES, V28
   PRINTEZIS T, 2000, ACM SIGPLAN NOTICE B, V3, P1
   SOBALVARRO P, 1988, AITR1417 MIT AI LAB
   *SPECJBB2000, 1998, SPECJBB2000 JAV BUS
   *SPECJVM98, 1998, SPECJVM98 BENCHM STA
   STEELE GL, 1975, COMMUN ACM, V18, P495, DOI 10.1145/361002.361005
   STEERS RM, 1976, ACAD MANAGE J, V19, P6, DOI 10.5465/255443
   Suga S, 2001, BMC Pharmacol, V1, P3, DOI 10.1186/1471-2210-1-3
   SUGANUMA T, 2000, IBM SYST J, V29, P1
   *SUN, 2003, 133 SUN JSR
   THOMAS S, 1998, Patent No. 20020042807
   UNGAR D, 1984, SIGPLAN NOTICES, V19, P157
   WHITE D, 1998, TR9867 SML
NR 47
TC 27
Z9 34
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2005
VL 27
IS 6
BP 1097
EP 1146
DI 10.1145/1108970.1108972
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 005EG
UT WOS:000234804800002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Keen, AW
   Ge, TJ
   Maris, JT
   Olsson, RA
AF Keen, AW
   Ge, TJ
   Maris, JT
   Olsson, RA
TI JR: Flexible distributed programming in an extended Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 21st IEEE International Conference on Distributed Computing Systems
CY APR 16-19, 2001
CL Phoenix, AZ
SP IEEE Comp Soc, Tech Comm Distributed Processing
DE design; languages; concurrency; concurrent object-oriented programming;
   Java; SR
ID METHOD INVOCATION; CONCURRENT-C; SR LANGUAGE; MECHANISM; OBJECTS
AB Java provides a clean object-oriented programming model and allows for inherently system-independent programs. Unfortunately, Java has a limited concurrency model, providing only threads and remote method invocation (RMI).
   The JR programming language extends Java to provide a rich concurrency model, based on that of SR. JR provides dynamic remote virtual machine creation, dynamic remote object creation, remote method invocation, asynchronous communication, rendezvous, and dynamic process creation. JR's concurrency model stems from the addition of operations ( a generalization of procedures) and JR supports the redefinition of operations through inheritance. JR programs are written in an extended Java and then translated into standard Java programs. The JR run-time support system is also written in standard Java.
   This paper describes the JR programming language and its implementation. Some initial measurements of the performance of the implementation are also included.
C1 Calif Polytech State Univ San Luis Obispo, Dept Comp Sci, San Luis Obispo, CA 93407 USA.
   Univ Calif Davis, Dept Comp Sci, Davis, CA 95616 USA.
C3 California State University System; California Polytechnic State
   University San Luis Obispo; University of California System; University
   of California Davis
RP Calif Polytech State Univ San Luis Obispo, Dept Comp Sci, 1 Grand Ave,Room 230,Frank E Pilling Bldg 14, San Luis Obispo, CA 93407 USA.
EM akeen@csc.calpoly.edu; ge@us.ibm.com; Justin.Maris@gefanuc.com;
   olsson@cs.ucdavis.edu
CR Alexandrov AD, 1997, IPPS PROC, P100, DOI 10.1109/IPPS.1997.580858
   Andrews G. R., 1991, Concurrent Programming: Principles and Practice
   ANDREWS GR, 1986, DISTRIB COMPUT, V1, P133, DOI 10.1007/BF01661168
   ANDREWS GR, 1988, ACM T PROGR LANG SYS, V10, P51, DOI 10.1145/42192.42324
   Andrews Gregory R., 1993, SR PROGRAMMING LANGU
   ATKINS MS, 1988, ACM T COMPUT SYST, V6, P365, DOI 10.1145/48012.48041
   ATKINS MS, 1988, SOFTWARE PRACT EXPER, V18, P879, DOI 10.1002/spe.4380180906
   BARATLOO A, 1996, P 9 C PAR DISTR COMP
   BEZIVIN J, 1987, P C OBJ OR PROGR SYS, P394
   BLACK AP, 1985, ACM OPERATING SYSTEM, V19, P181
   BRECHT T, 1996, EUR S OP SYST PRINC
   Briot JP, 1998, ACM COMPUT SURV, V30, P291, DOI 10.1145/292469.292470
   BRIOT JP, 1989, P ECOOP 89, P109
   Christiansen BO, 1997, CONCURRENCY-PRACT EX, V9, P1139, DOI 10.1002/(SICI)1096-9128(199711)9:11<1139::AID-CPE349>3.0.CO;2-K
   COOK RP, 1980, IEEE T SOFTWARE ENG, V6, P563, DOI 10.1109/TSE.1980.234505
   *ED PAR COMP CTR, JAV GRAND FOR BENCHM
   Garbinato B, 1998, INT CON DISTR COMP S, P22, DOI 10.1109/ICDCS.1998.679466
   GARBINATO B, 1996, LECT NOTES COMPUTER, V1098, P316
   GARBINATO B, 1997, 3 USENIX C OBJ OR TE, P221
   Gehani N.H., 1989, CONCURRENT C PROGRAM
   GEHANI NH, 1988, IEEE T SOFTWARE ENG, V14, P1546, DOI 10.1109/32.9043
   GEHANI NH, 1990, SOFTWARE PRACT EXPER, V20, P571, DOI 10.1002/spe.4380200605
   Gosling James, 1996, The Java Language Specification
   Guerraoui R, 1997, IEEE CONCURR, V5, P32, DOI 10.1109/4434.641625
   Hansen PB, 1999, ACM SIGPLAN NOTICES, V34, P38, DOI 10.1145/312009.312034
   Hartley S., 1998, CONCURRENT PROGRAMMI
   HILDERINK G, 1997, WOTUG 20, P48
   HOARE CAR, 1978, CACM, V21, P8
   IZATT M, 1999, ACM 1999 JAV GRAND C, P15
   KALE LV, 1997, P INT C PAR DISTR PR, P235
   Keen AW, 2002, LECT NOTES COMPUT SC, V2400, P656
   Keen AW, 2003, LECT NOTES COMPUT SC, V2790, P770
   KEEN AW, 2002, THESIS DEP COMPUTER
   LISKOV B, 1986, P 13 ACM S PRINC PRO
   MAASSEN J, 1999, ACM SIGPLAN S PRINC, P173
   MATSUOKA S., 1993, RES DIRECTIONS CONCU, P107
   MENDIS CN, 1997, THESIS U WARWICK
   NAGARATNAM N, 1996, IASTED INT C NETW
   NESTER C, 1999, ACM 1999 JAV GRAND C, P152
   *OBJ MAN GROUP, COMM OBJ REQ BROK
   Olsson RA, 2002, COMPUT LANG SYST STR, V28, P327, DOI 10.1016/S1477-8424(03)00002-2
   OLSSON RA, 1990, SOFTWARE PRACT EXPER, V20, P1187, DOI 10.1002/spe.4380201202
   Olsson RonaldA., 2004, JR PROGRAMMING LANGU
   Philippsen M, 1997, CONCURRENCY-PRACT EX, V9, P1225, DOI 10.1002/(SICI)1096-9128(199711)9:11<1225::AID-CPE332>3.0.CO;2-F
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Raje RR, 1997, CONCURRENCY-PRACT EX, V9, P1207, DOI 10.1002/(SICI)1096-9128(199711)9:11<1207::AID-CPE351>3.0.CO;2-C
   SCOTT ML, 1987, IEEE T SOFTWARE ENG, V13, P88, DOI 10.1109/TSE.1987.232838
   SCOTT ML, 1991, COMPUT LANG, V16, P209, DOI 10.1016/0096-0551(91)90008-W
   SCOTT ML, 1983, ACM SIGPLAN NOTICES, V18, P57
   *SUN MICR, 1997, JAV REM METH INV SPE
   *SUN MICR, 2001, JAV MESS SERV SPEC
   Wellings AJ, 2000, ACM T PROGR LANG SYS, V22, P506, DOI 10.1145/353926.353938
   Yu WM, 1997, CONCURRENCY-PRACT EX, V9, P1213, DOI 10.1002/(SICI)1096-9128(199711)9:11<1213::AID-CPE333>3.0.CO;2-J
NR 53
TC 20
Z9 20
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2004
VL 26
IS 3
BP 578
EP 608
DI 10.1145/982158.982162
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 812QJ
UT WOS:000220853700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Keizer, AC
   Basold, H
   Pérez, JA
AF Keizer, Alex C.
   Basold, Henning
   Perez, Jorge A.
TI Session Coalgebras: A Coalgebraic View on Regular and Context-free
   Session Types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Session types; coalgebra; process calculi; coinduction
ID MODAL LOGIC
AB Compositional methods are central to the verification of software systems. For concurrent and communicating systems, compositional techniques based on behavioural type systems have received much attention. By abstracting communication protocols as types, these type systems can statically check that channels in a program interact following a certain protocol-whether messages are exchanged in the intended order.
   In this article, we put on our coalgebraic spectacles to investigate session types, a widely studied class of behavioural type systems. We provide a syntax-free description of session-based concurrency as states of coalgebras. As a result, we rediscover type equivalence, duality, and subtyping relations in terms of canonical coinductive presentations. In turn, this coinductive presentation enables us to derive a decidable type system with subtyping for the p-calculus, in which the states of a coalgebra will serve as channel protocols. Going full circle, we exhibit a coalgebra structure on an existing session type system, and show that the relations and type system resulting from our coalgebraic perspective coincide with existing ones. We further apply to session coalgebras the coalgebraic approach to regular languages via the so-called rational fixed point, inspired by the trinity of automata, regular languages, and regular expressions with session coalgebras, rational fixed point, and session types, respectively. We establish a suitable restriction on session coalgebras that determines a similar trinity, and reveals the mismatch between usual session types and our syntax-free coalgebraic approach. Furthermore, we extend our coalgebraic approach to account for context-free session types, by equipping session coalgebras with a stack.
C1 [Keizer, Alex C.] Univ Amsterdam, ILLC, Log, POB 94242, NL-1090 GE Amsterdam, Netherlands.
   [Basold, Henning] Leiden Univ, LIACS, POB 9512, NL-2300 RA Leiden, Netherlands.
   [Perez, Jorge A.] Univ Groningen, Bernoulli Inst Math Comp Sci & Artificial Intelli, Nijenborgh 9, NL-9747 AG Groningen, Netherlands.
C3 University of Amsterdam; Leiden University; Leiden University - Excl
   LUMC; University of Groningen
RP Keizer, AC (corresponding author), Univ Amsterdam, ILLC, Log, POB 94242, NL-1090 GE Amsterdam, Netherlands.
EM alex@keizer.dev; h.basold@liacs.leidenuniv.nl; j.a.perez@rug.nl
RI Pérez, Jorge/G-1629-2011
OI Pérez, Jorge/0000-0002-1452-6180; Basold, Henning/0000-0001-7610-8331;
   Keizer, Alex/0000-0002-8826-9607
FU Dutch Research Council (NWO) [016]
FX Jorge Perez has been partially supported by the Dutch Research Council
   (NWO) under Project No. 016.Vidi.189.046 (Unifying Correctness for
   Communicating Software).
CR Adamek J., 2021, INITIAL ALGEBRAS TER
   Adamek J., 1994, Locally presentable and accessible categories, V189, DOI [10.1017/CBO9780511600579., DOI 10.1017/CBO9780511600579]
   Adámek J, 2006, MATH STRUCT COMP SCI, V16, P1085, DOI 10.1017/S0960129506005706
   Awodey S., CATEGORY THEORY
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Bernardi G, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:10)2016
   Borceux F., 2008, ENCY MATH ITS APPL, V50
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Caires L, 2013, LECT NOTES COMPUT SC, V7792, P330, DOI 10.1007/978-3-642-37036-6_19
   Carpineti S, 2006, LECT NOTES COMPUT SC, V4184, P148
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Das Ankush, 2021, LECT NOTES COMPUTER, V12648, P178, DOI [10.1007/978-3-030-72019-3, DOI 10.1007/978-3-030-72019-3]
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   Deniélou PM, 2012, LECT NOTES COMPUT SC, V7211, P194, DOI 10.1007/978-3-642-28869-2_10
   Eberhart  Clovis, 2015, LIPICS, V35, P86
   Fournet C, 2004, LECT NOTES COMPUT SC, V3114, P242
   Fumex Clement, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P176, DOI 10.1007/978-3-642-22944-2_13
   Gambino N, 2013, MATH PROC CAMBRIDGE, V154, P153, DOI 10.1017/S0305004112000394
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay Simon J., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P95, DOI 10.1007/978-3-319-30936-1_5
   Gay SJ, 2020, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.314.3
   Goncharov Sergey, 2014, Theoretical Computer Science. 8th IFIP TC 1/WG 2.2 International Conference, TCS 2014. Proceedings: LNCS 8705, P265, DOI 10.1007/978-3-662-44602-7_21
   Hausmann D, 2006, THEOR COMPUT SCI, V366, P121, DOI 10.1016/j.tcs.2006.07.006
   Hermida C, 1998, INFORM COMPUT, V145, P107, DOI 10.1006/inco.1998.2725
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hughes J, 2004, THEOR COMPUT SCI, V327, P71, DOI 10.1016/j.tcs.2004.07.022
   Jacobs B., 2016, Cambridge Tracts in Theoretical Computer Science, V59, DOI DOI 10.1017/CBO9781316823187
   Keizer AC, 2021, LECT NOTES COMPUT SC, V12648, P375, DOI 10.1007/978-3-030-72019-3_14
   Klin B, 2005, LECT NOTES COMPUT SC, V3629, P247
   Klin B, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(4:10)2016
   Klin B, 2007, ELECTRON NOTES THEOR, V173, P177, DOI 10.1016/j.entcs.2007.02.034
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lozes Etienne, 2012, Web Services and Formal Methods. 8th International Workshop (WS-FM 2011). Revised Selected Papers, P2, DOI 10.1007/978-3-642-29834-9_2
   Milius S, 2013, ELECTRON NOTES THEOR, V298, P257, DOI 10.1016/j.entcs.2013.09.017
   Milius S, 2010, IEEE S LOG, P421, DOI 10.1109/LICS.2010.11
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Montanari U, 2005, THEOR COMPUT SCI, V340, P539, DOI 10.1016/j.tcs.2005.03.014
   Padovani L, 2014, IEEE S LOG, DOI 10.1145/2603088.2603116
   Padovani L, 2014, LECT NOTES COMPUT SC, V8459, P147, DOI 10.1007/978-3-662-43376-8_10
   Perrone P, 2021, Arxiv, DOI arXiv:1912.10642
   Pons D, 2007, LECT NOTES COMPUT SC, V4807, P351
   Rutten Jan, 2019, The Method of Coalgebra: Exercises in Coinduction
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Schröder L, 2008, THEOR COMPUT SCI, V390, P230, DOI 10.1016/j.tcs.2007.09.023
   Silva A, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(3:23)2010
   Staton S, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(1:13)2011
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sunshine J, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P713
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Toninho B, 2019, LECT NOTES COMPUT SC, V11760, P101, DOI 10.1007/978-3-030-31175-9_7
   van den Berg B, 2007, ANN PURE APPL LOGIC, V146, P40, DOI 10.1016/j.apal.2006.12.001
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Worrell J, 2005, THEOR COMPUT SCI, V338, P184, DOI 10.1016/j.tcs.2004.12.009
NR 62
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2022
VL 44
IS 3
AR 18
DI 10.1145/3527633
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3V9XX
UT WOS:000842012200006
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Zhang, WX
   Sun, YZ
   Oliveira, BCDS
AF Zhang, Weixin
   Sun, Yaozhu
   Oliveira, Bruno C. D. S.
TI Compositional Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Expression problem; compositionality; traits
ID INTERSECTION
AB Modularity is a key concern in programming. However, programming languages remain limited in terms of modularity and extensibility. Small canonical problems, such as the Expression Problem (EP), illustrate some of the basic issues: the dilemma between choosing one kind of extensibility over another one in most programming languages. Other problems, such as how to express dependencies in a modular way, add up to the basic issues and remain a significant challenge.
   This article presents a new statically typed modular programming style called Compositional Programming. In Compositional Programming, there is no EP: It is easy to get extensibility in multiple dimensions (i.e., it is easy to add new variants as well as new operations). Compositional Programming offers an alternative way to model data structures that differs from both algebraic datatypes in functional programming and conventional OOP class hierarchies. We introduce four key concepts for Compositional Programming: compositional interfaces, compositional traits, method patterns, and nested trait composition. Altogether, these concepts allow us to naturally solve challenges such as the Expression Problem, model attribute-grammar-like programs, and generally deal with modular programs with complex dependencies. We present a language design, called CP, which is proved to be type-safe, together with several examples and three case studies.
C1 [Zhang, Weixin] Univ Bristol, Bristol, Avon, England.
   [Zhang, Weixin; Sun, Yaozhu; Oliveira, Bruno C. D. S.] Univ Hong Kong, Hong Kong, Peoples R China.
C3 University of Bristol; University of Hong Kong
RP Zhang, WX (corresponding author), Univ Bristol, Bristol, Avon, England.
EM wxzhang2@cs.hku.hk; yzsun@cs.hku.hk; bruno@cs.hku.hk
RI Zhang, Weixin/IZD-9752-2023; dos Santos Oliveira, Bruno
   Cesar/I-7977-2013
OI Zhang, Weixin/0000-0001-7105-0783; 
FU Hong Kong Research Grant Council [17210617, 17209519]
FX This work has been sponsored by the Hong Kong Research Grant Council
   project numbers 17210617 and 17209519.
CR Alpuim J, 2017, LECT NOTES COMPUT SC, V10201, P1, DOI 10.1007/978-3-662-54434-1_1
   Ancona D, 2002, J FUNCT PROGRAM, V12, P91, DOI 10.1017/S0956796801004257
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Aracic I, 2006, LECT NOTES COMPUT SC, V3880, P135
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Bi X, 2019, LECT NOTES COMPUT SC, V11423, P381, DOI 10.1007/978-3-030-17184-1_14
   Bi Xuan., 2018, P 32 EUR C OBJ OR PR
   Biboudis Aggelos, 2015, P 29 EUR C OBJ OR PR
   Blaauwbroek L, 2017, THESIS TU EINDHOVEN THESIS TU EINDHOVEN
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bracha G, 2010, LECT NOTES COMPUT SC, V6183, P405, DOI 10.1007/978-3-642-14107-2_20
   Bracha Gilad., 1992, The Programming Language Jigsaw: Mixins, Modularity, and Multiple Inheritance
   Bruce K., 1996, THEOR PRACT OBJ SYST, V1, P3
   Bruce Kim, 1998, P EUR C OBJ OR PROGR
   BURSTALL RM, 1981, CSR6280 U ED
   Cardelli Luca., 1991, Mathematical structures in computer science, V1, P3, DOI DOI 10.1017/S0960129500000049
   Cardelli Luca., 1994, EXTENSIBLE RECORDS P
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   Chlipala A, 2010, ACM SIGPLAN NOTICES, V45, P122, DOI 10.1145/1809028.1806612
   Clarke Dave, 2007, P 6 INT C ASP OR SOF, P121
   COOK W, 1989, SIGPLAN NOTICES, V24, P433, DOI 10.1145/74878.74922
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Duggan D, 1996, ACM SIGPLAN NOTICES, V31, P262, DOI 10.1145/232629.232654
   Dunfield J, 2014, J FUNCT PROGRAM, V24, P133, DOI 10.1017/S0956796813000270
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   ERNST E, 1999, THESIS U AARHUS
   Ernst Erik, 2004, P MECH SPEC, P27
   Ernst Erik, 2006, P 33 ACM SIGPLAN SIG
   Gamma Erich., 1994, DESIGN PATTERNS
   GARRIGUE J, 2000, P WORKSH FDN SOFTW E
   Gibbons J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P339, DOI 10.1145/2628136.2628138
   GUTTAG JV, 1978, ACTA INFORM, V10, P27, DOI 10.1007/BF00260922
   HARRISON W, 1993, SIGPLAN NOTICES, V28, P411, DOI 10.1145/167962.165932
   Hinze R, 2004, LECT NOTES COMPUT SC, V3125, P186
   Hinze R, 2006, J FUNCT PROGRAM, V16, P451, DOI 10.1017/S0956796806006022
   Hofer C, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P137
   Huang X., 2020, 34 EUROPEAN C OBJECT, V166, DOI [10.4230/LIPIcs.ECOOP.2020.26, DOI 10.4230/LIPICS.ECOOP.2020.26]
   Igarashi A, 2005, LECT NOTES COMPUT SC, V3780, P161
   Igarashi A, 1999, LECT NOTES COMPUT SC, V1628, P161
   Inostroza P, 2015, GPCE'15: PROCEEDINGS OF THE 2015 ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES, P171, DOI 10.1145/2814204.2814209
   Jaskelioff M., 2008, P 20 INT C IMPL APPL, P233, DOI DOI 10.1007/978-3-642-24452-013,HTTPS
   Jolly Paul, 2004, P ECOOP WORKSH FORM
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   KNUDSEN JL, 1994, OBJECT ORIENTED SOFT
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   KNUTH DE, 1990, LECT NOTES COMPUT SC, V461, P1
   Lagorio G, 2009, LECT NOTES COMPUT SC, V5653, P244, DOI 10.1007/978-3-642-03013-0_12
   Lee Joseph, 2015, P 29 EUR C OBJ OR PR
   Leijen Daan, 2005, Trends in Functional Programming, V6, P179
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   MacQueen D.B., 1984, LISP FUNCTIONAL PROG, P198
   Madsen O. Lehrmann, 1993, Object Oriented Programming in the BETA Programming Language
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   Meyer B., 1988, Object-Oriented Software Construction
   Nakata K, 2006, ACM SIGPLAN NOTICES, V41, P74, DOI 10.1145/1160074.1159813
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   Nystrom N, 2006, ACM SIGPLAN NOTICES, V41, P21, DOI 10.1145/1167515.1167476
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Odersky M., 2004, An overview of the Scala programming language
   OLIVEIRA BCD, 2006, TRENDS FUNCTIONAL PR, P199
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Oliveira BCDS, 2013, LECT NOTES COMPUT SC, V7920, P27, DOI 10.1007/978-3-642-39038-8_2
   Oliveira BCDS, 2012, LECT NOTES COMPUT SC, V7313, P2, DOI 10.1007/978-3-642-31057-7_2
   PhilipWadler, 1998, NOTE JAVA GENERICITY
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Poll Erik., 1997, P 3 INT S THEOR ASP
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Rendel Tillmann, 2014, P ACM INT C OBJ OR P
   Russo CV, 2001, ACM SIGPLAN NOTICES, V36, P50, DOI 10.1145/507669.507644
   Russo CV, 2000, LECT NOTES COMPUT SC, V1782, P336
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Schrijvers T, 2011, ACM SIGPLAN NOTICES, V46, P32, DOI 10.1145/2034574.2034781
   Sulzmann M., 2007, P ACM SIGPLAN WORKSH
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   van den Berg Birthe., 2020, ICFP G TYPE INFERENC
   Wang YL, 2016, PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY'16), P37, DOI 10.1145/2889443.2889448
   Zenger Mathhias, 2005, P FDN OBJ OR LANG C
   Zhang Weixin, 2017, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2017.29, DOI 10.4230/LIPICS.ECOOP.2017.29]
   Zhang Weixin, 2019, ART SCI ENG PROG, V3, P1
   Zhang YZ, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133894
NR 87
TC 5
Z9 5
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2021
VL 43
IS 3
AR 9
DI 10.1145/3460228
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW8UD
UT WOS:000753687300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Frohn, F
   Naaf, M
   Brockschmidt, M
   Giesl, J
AF Frohn, Florian
   Naaf, Matthias
   Brockschmidt, Marc
   Giesl, Juergen
TI Inferring Lower Runtime Bounds for Integer Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Integer programs; runtime complexity; lower bounds; automated complexity
   analysis
ID COMPLEXITY ANALYSIS; LINEAR RANKING; ACCELERATION; TERMINATION
AB We present a technique to infer lower bounds on the worst-case runtime complexity of integer programs, where in contrast to earlier work, our approach is not restricted to tail-recursion. Our technique constructs symbolic representations of program executions using a framework for iterative, under-approximating program simplification. The core of this simplification is a method for (under-approximating) program acceleration based on recurrence solving and a variation of ranking functions. Afterwards, we deduce asymptotic lower bounds from the resulting simplified programs using a special-purpose calculus and an SMT encoding. We implemented our technique in our tool LoAT and show that it infers non-trivial lower bounds for a large class of examples.
C1 [Frohn, Florian] Max Planck Inst Informat, Saarland Informat Campus,Campus E1 4, D-66123 Saarbrucken, Germany.
   [Naaf, Matthias] Rhein Westfal TH Aachen, Math Grundlagen Informat, D-52056 Aachen, Germany.
   [Brockschmidt, Marc] Microsoft Res, 21 Stn Rd, Cambridge CB1 2FB, England.
   [Giesl, Juergen] Rhein Westfal TH Aachen, LuFG Informat 2, Ahornstr 55, D-52074 Aachen, Germany.
C3 Max Planck Society; RWTH Aachen University; Microsoft; RWTH Aachen
   University
RP Frohn, F (corresponding author), Max Planck Inst Informat, Saarland Informat Campus,Campus E1 4, D-66123 Saarbrucken, Germany.
EM fiorian.frohn@mpi-inf.mpg.de; naaf@logic.rwth-aachen.de;
   mabrocks@microsoft.com; giesl@informatik.rwth-aachen.de
OI Frohn, Florian/0000-0003-0902-1994; Giesl, Jurgen/0000-0003-0283-8520
FU Deutsche Forschungsgemeinschaft (DFG, German Research Foundation)
   [389792660, TRR 248, 235950644, GI 274/6-2]
FX This work is funded by the Deutsche Forschungsgemeinschaft (DFG, German
   Research Foundation, https://www.dfg.de/) 389792660 as part of TRR 248
   (https://perspicuous-computing.science) and by the Deutsche
   Forschungsgemeinschaft (DFG, German Research Foundation,
   https://www.dfg.de/) - 235950644 (Project GI 274/6-2).
CR Albert E, 2019, THEOR PRACT LOG PROG, V19, P722, DOI 10.1017/S1471068419000152
   Albert E, 2013, ACM T COMPUT LOG, V14, DOI 10.1145/2499937.2499943
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Albert E, 2009, LECT NOTES COMPUT SC, V5904, P294, DOI 10.1007/978-3-642-10672-9_21
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   [Anonymous], 2015, SPACE TIME ANAL CYBE
   [Anonymous], 2015, COMPLEXITY ANAL BASE
   Bagnara R., 2005, ABSCS0512056 CORR
   Ben-Amram AM, 2014, J ACM, V61, DOI 10.1145/2629488
   Blanc R, 2010, LECT NOTES ARTIF INT, V6355, P103, DOI 10.1007/978-3-642-17511-4_7
   Bozga M, 2010, LECT NOTES COMPUT SC, V6174, P227, DOI 10.1007/978-3-642-14295-6_23
   Bozga M, 2009, LECT NOTES COMPUT SC, V5505, P337, DOI 10.1007/978-3-642-00768-2_29
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Brockschmidt M, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2866575
   Burnim J, 2009, PROC INT CONF SOFTW, P463, DOI 10.1109/ICSE.2009.5070545
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Cadek P, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P112
   Cameron Peter, 2017, POLYNOMIALS TAKING I
   CARBONNEAUX Q, 2015, P 36 ACM SIGPL C, V50, P467, DOI DOI 10.1145/2737924.2737955
   Carbonneaux Q, 2017, LECT NOTES COMPUT SC, V10427, P64, DOI 10.1007/978-3-319-63390-9_4
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Debray S, 1997, LOGIC PROGRAMM, P291
   Alonso-Blas DE, 2012, LECT NOTES COMPUT SC, V7460, P405, DOI 10.1007/978-3-642-33125-1_27
   Falke S, 2012, LECT NOTES COMPUT SC, V7152, P261, DOI 10.1007/978-3-642-27705-4_21
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Flores-Montoya Antonio, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P275, DOI 10.1007/978-3-319-12736-1_15
   Flores-Montoya A, 2016, LECT NOTES COMPUT SC, V9995, P254, DOI 10.1007/978-3-319-48989-6_16
   Frohn F, 2016, LECT NOTES ARTIF INT, V9706, P550, DOI 10.1007/978-3-319-40229-1_37
   Frohn F, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P221, DOI [10.23919/FMCAD.2019.8894271, 10.23919/fmcad.2019.8894271]
   Frohn F, 2019, LECT NOTES COMPUT SC, V11562, P426, DOI 10.1007/978-3-030-25543-5_24
   Frohn F, 2017, J AUTOM REASONING, V59, P121, DOI 10.1007/s10817-016-9397-x
   Frohn Florian, 2020, EMPIRICAL EVALUATION
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Ganty P, 2017, INT J SOFTW TOOLS TE, V19, P565, DOI 10.1007/s10009-016-0420-7
   Giesl J, 2019, LECT NOTES ARTIF INT, V11716, P269, DOI 10.1007/978-3-030-29436-6_16
   Giesl J, 2019, LECT NOTES COMPUT SC, V11429, P156, DOI 10.1007/978-3-030-17502-3_10
   Gonnord L, 2006, LECT NOTES COMPUT SC, V4134, P144
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Hark Marcel, 2020, PACMPL 4
   Heck A., 1996, INTRO MAPLE, V2nd
   Hensel J, 2018, J LOG ALGEBR METHODS, V97, P105, DOI 10.1016/j.jlamp.2018.02.004
   Hirokawa N, 2008, LECT NOTES ARTIF INT, V5195, P364, DOI 10.1007/978-3-540-71070-7_32
   HOFBAUER D, 1989, LECT NOTES COMPUT SC, V355, P167
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000192
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Jeannet B, 2014, ACM SIGPLAN NOTICES, V49, P529, DOI 10.1145/2535838.2535843
   Kroening D, 2015, FORM METHOD SYST DES, V47, P75, DOI 10.1007/s10703-015-0228-1
   Larraz D, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P218
   Madhukar K, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P105, DOI 10.1109/FMCAD.2015.7542259
   McIver Annabelle., 2005, MG COMP SCI
   Naaf M, 2017, LECT NOTES ARTIF INT, V10483, P132, DOI 10.1007/978-3-319-66167-4_8
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Sinn M, 2017, J AUTOM REASONING, V59, P3, DOI 10.1007/s10817-016-9402-4
   Srikanth A, 2017, ACM SIGPLAN NOTICES, V52, P639, DOI 10.1145/3093333.3009864
   Strejcek Jan., 2012, Proceedings of the 2012 International Symposium on Software Testing and Analysis, ISSTA 2012, P155, DOI DOI 10.1145/2338965.2336772
   Wang Di, 2019, PACMPL 3
   Wolfram S., 1992, SIAM REV, V34, P519
NR 59
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2020
VL 42
IS 3
AR 13
DI 10.1145/3410331
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PA3QO
UT WOS:000595553200002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Chatterjee, K
   Fu, HF
   Goharshady, AK
AF Chatterjee, Krishnendu
   Fu, Hongfei
   Goharshady, Amir Kafshdar
TI Non-polynomial Worst-Case Analysis of Recursive Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Recursive programs; worst case analysis
ID AMORTIZED RESOURCE ANALYSIS; LINEAR RANKING; COST-ANALYSIS; TERMINATION;
   SPACE; VERIFICATION; BOUNDS; ABSTRACTION; INFERENCE; PRECISE
AB We study the problem of developing efficient approaches for proving worst-case bounds of non-deterministic recursive programs. Ranking functions are sound and complete for proving termination and worst-case bounds of non-recursive programs. First, we apply ranking functions to recursion, resulting in measure functions. We show that measure functions provide a sound and complete approach to prove worst-case bounds of non-deterministic recursive programs. Our second contribution is the synthesis of measure functions in nonpolynomial forms. We show that non-polynomial measure functions with logarithm and exponentiation can be synthesized through abstraction of logarithmic or exponentiation terms, Farkas Lemma, and Handelman's Theorem using linear programming. While previous methods obtain polynomial worst-case bounds, our approach can synthesize bounds of various forms including O(n log n) and O(n'), where r is not an integer. We present experimental results to demonstrate that our approach can efficiently obtain worst-case bounds of classical recursive algorithms such as (i) Merge sort, Heap sort, and the divide-and-conquer algorithm for the Closest Pair problem, where we obtain O(n log n) worst-case bound, and (ii) Karatsuba's algorithm for polynomial multiplication and Strassen's algorithm for matrix multiplication, for which we obtain O(n') bounds such that r is not an integer and is close to the best-known bound for the respective algorithm. Besides the ability to synthesize non-polynomial bounds, we also show that our approach is equally capable of obtaining polynomial worst-case bounds for classical programs such as Quick sort and the dynamic programming algorithm for computing Fibonacci numbers.
C1 [Chatterjee, Krishnendu; Goharshady, Amir Kafshdar] IST Austria Inst Sci & Technol Austria, Chatterjee Grp, Campus 1, A-3400 Klosterneuburg, Austria.
   [Fu, Hongfei] Shanghai Jiao Tong Univ, Room 1408-1,Software Expert Bldg,800 Dongchuan Rd, Shanghai 200240, Peoples R China.
   [Goharshady, Amir Kafshdar] IST Austria, Klosterneuburg, Austria.
C3 Institute of Science & Technology - Austria; Shanghai Jiao Tong
   University; Institute of Science & Technology - Austria
RP Fu, HF (corresponding author), Shanghai Jiao Tong Univ, Room 1408-1,Software Expert Bldg,800 Dongchuan Rd, Shanghai 200240, Peoples R China.
EM Krishnendu.Chatterjee@ist.ac.at; fuhf@cs.sjtu.edu.cn;
   goharshady@ist.ac.at
OI Kafshdar Goharshady, Amir/0000-0003-1702-6584; Fu,
   Hongfei/0000-0002-7947-3446
FU Vienna Science and Technology Fund (WWTF) [ICT15-003]; Austrian Science
   Fund (FWF) NFN Grant [S11407-N23]; ERC Start Grant [279307]; Natural
   Science Foundation of China (NSFC) [61532019, 61802254]; CDZ project CAP
   [GZ 1023]; IBM Ph.D. Fellowship program; DOC Fellowship of the Austrian
   Academy of Sciences
FX The research is partially supported by Vienna Science and Technology
   Fund (WWTF) ICT15-003, Austrian Science Fund (FWF) NFN Grant No.
   S11407-N23 (RiSE/SHiNE), ERC Start Grant No. 279307 (Graph Games), the
   Natural Science Foundation of China (NSFC) under Grant No. 61532019 and
   No. 61802254, the CDZ project CAP (GZ 1023), the IBM Ph.D. Fellowship
   program and a DOC Fellowship of the Austrian Academy of Sciences.
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2009, ELECTRON NOTES THEOR, V258, P109, DOI 10.1016/j.entcs.2009.12.008
   Albert E, 2008, LECT NOTES COMPUT SC, V5079, P221
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   Alur R, 2010, LECT NOTES COMPUT SC, V5944, P45, DOI 10.1007/978-3-642-11319-2_7
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], THESIS
   Bagnara R, 2003, LECT NOTES COMPUT SC, V2694, P337
   Bartle R. G., 2011, Introduction to Real Analysis, V4th
   Bodik Rastislav, 2016, P 43 ANN ACM SIGPLAN
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Brockschmidt M, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2866575
   Castagna Giuseppe, 2017, P 44 ACM SIGPLAN S P, DOI [10.1145/3009837, DOI 10.1145/3009837]
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K., 2019, CoRR
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10427, P41, DOI 10.1007/978-3-319-63390-9_3
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Colon M. A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P67
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Cook B, 2009, FORM METHOD SYST DES, V35, P369, DOI 10.1007/s10703-009-0087-8
   Cormen Thomas H, 2009, Introduction to Algorithms, V3rd
   Cousot P, 2005, LECT NOTES COMPUT SC, V3385, P1
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P245
   Farkas J., 1894, Mathematikaies Termeszettudomanyi Ertesito, V12
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   FLAJOLET P, 1991, THEOR COMPUT SCI, V79, P37, DOI 10.1016/0304-3975(91)90145-R
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Gimenez S, 2016, ACM SIGPLAN NOTICES, V51, P243, DOI 10.1145/2914770.2837646
   Godel Kurt, 1934, J SYMBOLIC LOGIC, V55, P347, DOI [10.2307/2274987, DOI 10.2307/2274987]
   Grobauer B, 2001, ACM SIGPLAN NOTICES, V36, P253, DOI 10.1145/507669.507666
   Gulavani LS, 2008, LECT NOTES COMPUT SC, V5123, P370
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2009, LECT NOTES COMPUT SC, V5643, P51, DOI 10.1007/978-3-642-02658-4_7
   HANDELMAN D, 1988, PAC J MATH, V132, P35, DOI 10.2140/pjm.1988.132.35
   Hesselink W. H., 1993, Formal Aspects of Computing, V5, P554, DOI 10.1007/BF01211249
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6461, P172, DOI 10.1007/978-3-642-17164-2_13
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M, 2009, LECT NOTES COMPUT SC, V5771, P317, DOI 10.1007/978-3-642-04027-6_24
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Hughes J, 1999, ACM SIGPLAN NOTICES, V34, P70, DOI 10.1145/317765.317785
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Jost S, 2009, LECT NOTES COMPUT SC, V5850, P354, DOI 10.1007/978-3-642-05089-3_23
   Knuth D. E., 2011, The art of computer programming (second ed.) vol. 1 fundamental algorithms, V4A
   Kuwahara T, 2014, LECT NOTES COMPUT SC, V8410, P392
   Lee CS, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1498926.1498928
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Schrijver A., 2003, COMBINATORIAL OPTIMI
   Schrijver Alexander, 1999, WILEY INTERSCIENCE S
   Shen LY, 2013, J SYST SCI COMPLEX, V26, P291, DOI 10.1007/s11424-013-1004-1
   Shkaravska O, 2007, LECT NOTES COMPUT SC, V4583, P351
   Sinn M, 2014, LECT NOTES COMPUT SC, V8559, P745, DOI 10.1007/978-3-319-08867-9_50
   Sohn K., 1991, Proceedings of the Tenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P216, DOI 10.1145/113413.113433
   Srikanth A, 2017, ACM SIGPLAN NOTICES, V52, P639, DOI 10.1145/3093333.3009864
   Urban C, 2013, LECT NOTES COMPUT SC, V7935, P43, DOI 10.1007/978-3-642-38856-9_5
   Wei-Ngan Chin, 2001, Higher-Order and Symbolic Computation, V14, P261, DOI 10.1023/A:1012996816178
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Yang L, 2010, FRONT COMPUT SCI CHI, V4, P1, DOI 10.1007/s11704-009-0074-7
NR 70
TC 10
Z9 10
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2019
VL 41
IS 4
AR 20
DI 10.1145/3339984
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NG6RI
UT WOS:000564108400001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Chatterjee, K
   Ibsen-Jensen, R
   Goharshady, AK
   Pavlogiannis, A
AF Chatterjee, Krishnendu
   Ibsen-Jensen, Rasmus
   Goharshady, Amir Kafshdar
   Pavlogiannis, Andreas
TI Algorithms for Algebraic Path Properties in Concurrent Systems of
   Constant Treewidth Components
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Concurrent systems; dataflow analysis; constant-treewidth graphs;
   algebraic path properties; shortest path
ID EFFICIENT; PROGRAMS
AB We study algorithmic questions wrt algebraic path properties in concurrent systems, where the transitions of the system are labeled from a complete, closed semiring. The algebraic path properties can model dataflow analysis problems, the shortest path problem, and many other natural problems that arise in program analysis. We consider that each component of the concurrent system is a graph with constant treewidth, a property satisfied by the controlflow graphs of most programs. We allow for multiple possible queries, which arise naturally in demand driven dataflow analysis. The study of multiple queries allows us to consider the tradeoff between the resource usage of the one-time preprocessing and for each individual query. The traditional approach constructs the product graph of all components and applies the best-known graph algorithm on the product. In this approach, even the answer to a single query requires the transitive closure (i.e., the results of all possible queries), which provides no room for tradeoff between preprocessing and query time.
   Our main contributions are algorithms that significantly improve the worst-case running time of the traditional approach, and provide various tradeoffs depending on the number of queries. For example, in a concurrent system of two components, the traditional approach requires hexic time in the worst case for answering one query as well as computing the transitive closure, whereas we show that with one-time preprocessing in almost cubic time, each subsequent query can be answered in at most linear time, and even the transitive closure can be computed in almost quartic time. Furthermore, we establish conditional optimality results showing that the worst-case running time of our algorithms cannot be improved without achieving major breakthroughs in graph algorithms (i.e., improving the worst-case bound for the shortest path problem in general graphs). Preliminary experimental results show that our algorithms perform favorably on several benchmarks.
C1 [Chatterjee, Krishnendu; Ibsen-Jensen, Rasmus; Goharshady, Amir Kafshdar; Pavlogiannis, Andreas] IST Austria, Campus 1, A-3400 Klosterneuburg, Austria.
C3 Institute of Science & Technology - Austria
RP Chatterjee, K (corresponding author), IST Austria, Campus 1, A-3400 Klosterneuburg, Austria.
EM Krishnendu.Chatterjee@ist.ac.at; ribsen@ist.ac.at; goharshady@ist.ac.at;
   pavlogiannis@ist.ac.at
RI Pavlogiannis, Andreas/X-6831-2018
OI Pavlogiannis, Andreas/0000-0002-8943-0722; Kafshdar Goharshady,
   Amir/0000-0003-1702-6584; Ibsen-Jensen, Rasmus/0000-0003-4783-0389
FU Austrian Science Fund (FWF) [P23499-N23]; FWF NFN [S11407-N23]; ERC
   [279307: Graph Games]
FX The research was partly supported by Austrian Science Fund (FWF) Grant
   No P23499-N23, FWF NFN Grant No S11407-N23 (RiSE/SHiNE), and ERC Start
   grant (279307: Graph Games).
CR Abboud A, 2015, ACM S THEORY COMPUT, P41, DOI 10.1145/2746539.2746594
   Abboud A, 2014, ANN IEEE SYMP FOUND, P434, DOI 10.1109/FOCS.2014.53
   Alur Rajeev, 1999, P INT C APPL LING IC
   [Anonymous], 1976, J GEOM
   ARNBORG S, 1989, DISCRETE APPL MATH, V23, P11, DOI 10.1016/0166-218X(89)90031-0
   Babich Wayne A., 1978, ACTA INFORM, V10, P3
   Bellman R., 1958, Q APPL MATH, V16, P87
   BERN MW, 1987, J ALGORITHM, V8, P216, DOI 10.1016/0196-6774(87)90039-3
   Blackburn Stephen M., 2006, P ACM SIGPLAN INT C
   Bodlaender H. L., 1993, Acta Cybernetica, V11, P1
   Bodlaender H. L., 2005, LNCS, V3381
   Bodlaender Hans L., 1988, P INT C AUT LANG PRO
   Bodlaender HL, 1998, SIAM J COMPUT, V27, P1725, DOI 10.1137/S0097539795289859
   Bodlaender HL, 1996, SIAM J COMPUT, V25, P1305, DOI 10.1137/S0097539793251219
   Bouajjani Ahmed, 2005, P IARCS ANN C FDN SO
   Bouajjani Ahmed, 2003, P 30 ACM SIGPLAN SIG
   Bouyer P, 2008, LECT NOTES COMPUT SC, V5215, P33, DOI 10.1007/978-3-540-85778-5_4
   Burgstaller Bernd, 2004, P INT C REL SOFTW TE
   Cerny P, 2013, ACM SIGPLAN NOTICES, V48, P115, DOI 10.1145/2480359.2429085
   Cerny Pavol, 2015, P INT C COMP AID VER
   Chatterjee K., 2013, P INT C COMP AID VER
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P733, DOI 10.1145/2914770.2837624
   Chatterjee K, 2010, ACM T COMPUT LOG, V11, DOI 10.1145/1805950.1805953
   Chatterjee Krishnendu, 2015, P 1 ANN ACM SIGACT S
   Chatterjee Krishnendu, 2015, P INT C COMP AID VER
   Chatterjee Krishnendu, 2015, P ANN ACM SIGACT SIG
   Chaudhuri Shiva, 1995, ALGORITHMICA 27, V3, P212
   Chugh Ravi, 2008, P 29 ACM SIGPLAN C P
   Courcelle B., 1990, HDB THEORETICAL COMP, VB
   De A, 2011, LECT NOTES COMPUT SC, V6602, P196, DOI 10.1007/978-3-642-19718-5_11
   Duesterwald Evelyn, 1995, P 1 ANN ACM SIGACT S
   Dwyer MB, 2004, ACM T SOFTW ENG METH, V13, P359, DOI 10.1145/1040291.1040292
   Elberfeld M., 2010, P IEEE S FDN COMP SC
   Farzan Azadeh, 2007, P 13 INT C TOOLS ALG
   Farzan Azadeh, 2013, P ANN ACM SIGACT SIG
   Floyd R. W., 1962, COMMUN ACM
   Ford L.R, 1956, Technical report
   Grunwald Dirk, 1993, P 4 ACM SIGPLAN S PR
   Gustedt J., 2002, ALGORITHM ENG EXPT
   HAREL D, 1984, SIAM J COMPUT, V13, P338, DOI 10.1137/0213024
   Harel David, 1997, P INT C CONC THEOR C
   Henzinger M, 2015, ACM S THEORY COMPUT, P21, DOI 10.1145/2746539.2746609
   Horwitz Susan, 1995, SIGSOFT Softw. Eng. Notes
   JOHNSON DB, 1977, J ACM, V24, P1, DOI 10.1145/321992.321993
   Kahlon Vineet, 2013, International Journal on Software Tools for Technology Transfer, V15, P321, DOI 10.1007/s10009-013-0274-1
   Kahlon V, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P13, DOI 10.1145/1595696.1595701
   KARP RM, 1978, DISCRETE MATH, V23, P309, DOI 10.1016/0012-365X(78)90011-0
   Kildall Gary A., 1973, P 1 ANN ACM SIGACT S
   Knoop J, 1996, ACM T PROGR LANG SYS, V18, P268, DOI 10.1145/229542.229545
   Krause Philipp Klaus, 2013, COMPILER CONSTRUCTIO
   La Torre Salvatore, 2008, P INT C TOOLS ALG CO
   Lal A., 2012, TR20129 MSR
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Lal Akash, 2008, P INT C TOOLS ALG CO
   Lawler EL, 2001, COMBINATORIAL OPTIMI
   Lehmann Daniel J., 1977, THEORETICAL COMPUTER
   Madhusudan P., 2011, P 1 ANN ACM SIGACT S
   Naeem Nomair A., 2010, P INT C COMP CONSTR
   Obdrzalek Jan, 2003, P INT C COMP AID VER
   Qadeer Shaz, 2005, P INT C TOOLS ALG CO
   Reed Bruce A., 1992, P ACM S THEOR COMP S
   Reps Thomas, 1997, P 1997 INT S LOG PRO
   Reps Thomas, 1995, P 1 ANN ACM SIGACT S
   Reps Thomas W., 1995, APPL LOGIC DATABASES, V296
   Robertson Neil, 1984, J COMBIN THEOR SER B
   Sagiv M., 1996, THEOR COMPUT SCI
   Stephen C, 1956, Automata Studies, DOI [DOI 10.1515/9781400882618-002, 10.1515/9781400882618-002]
   Suwimonteerabuth Dejvuth, 2008, P C SERV PROC IMPR N
   Thorup M, 1998, INFORM COMPUT, V142, P159, DOI 10.1006/inco.1997.2697
   Vallee-Rai Raja, 1999, P CTR ADV STUD C CAS
   van Dijk T., 2006, TECHNICAL REPORT
   VITERBI AJ, 1967, IEEE T INFORM THEORY, V13, P260, DOI 10.1109/TIT.1967.1054010
   WARSHALL S, 1962, J ACM, V9, P11, DOI 10.1145/321105.321107
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Yan Dacong, 2011, P 2011 INT S SOFTW T
   Yuan Xin, 1997, PARALLEL PROCESS LET, V7, P359
   Zadeck Frank Kenneth, 1984, P SPEC INT GROUP PRO
NR 77
TC 11
Z9 11
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2018
VL 40
IS 3
AR 9
DI 10.1145/3210257
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GT7HI
UT WOS:000444694800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Jourdan, JH
   Pottier, F
AF Jourdan, Jacques-Henri
   Pottier, Francois
TI A Simple, Possibly Correct LR Parser for C11
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Compilation; parsing; ambiguity; lexical feedback; C89; C99; C11
AB The syntax of the C programming language is described in the C11 standard by an ambiguous context-free grammar, accompanied with English prose that describes the concept of "scope" and indicates how certain ambiguous code fragments should be interpreted. Based on these elements, the problem of implementing a compliant C11 parser is not entirely trivial. We review the main sources of difficulty and describe a relatively simple solution to the problem. Our solution employs the well-known technique of combining an LALR(1) parser with a "lexical feedback" mechanism. It draws on folklore knowledge and adds several original aspects, including a twist on lexical feedback that allows a smooth interaction with lookahead; a simplified and powerful treatment of scopes; and a few amendments in the grammar. Although not formally verified, our parser avoids several pitfalls that other implementations have fallen prey to. We believe that its simplicity, its mostly declarative nature, and its high similarity with the C11 grammar are strong informal arguments in favor of its correctness. Our parser is accompanied with a small suite of "tricky" C11 programs. We hope that it may serve as a reference or a starting point in the implementation of compilers and analysis tools.
C1 [Jourdan, Jacques-Henri] Inria Paris, MPI SWS, Saarbrucken, Germany.
   [Pottier, Francois] Inria Paris, CS 42112, 2 Rue Simone Iff, F-75589 Paris 12, France.
   [Jourdan, Jacques-Henri] MPI SWS, Campus E1-5, D-66123 Saarbrucken, Germany.
RP Jourdan, JH (corresponding author), Inria Paris, MPI SWS, Saarbrucken, Germany.; Jourdan, JH (corresponding author), MPI SWS, Campus E1-5, D-66123 Saarbrucken, Germany.
EM jacques-henri.jourdan@normalesup.org; francois.pottier@inria.fr
OI Pottier, Francois/0000-0002-4069-1235
FU Agence Nationale de la Recherche [ANR-11-INSE-003]
FX This work is supported by Agence Nationale de la Recherche, grant
   ANR-11-INSE-003.
CR [Anonymous], BISON
   [Anonymous], P INT C COMP CONSTR
   [Anonymous], 2011, 98992011 ISO IEC
   [Anonymous], A GRAMMAR FOR ANSI C
   [Anonymous], 2016, MENHIR PARSER GENERA
   [Anonymous], BTYACC
   [Anonymous], COMPCERT C VERIFIED
   [Anonymous], P ACM SIGPL C PROGR
   [Anonymous], SIMPLE POSSIBLY CORR
   [Anonymous], 1989, X31591989 ANSI
   [Anonymous], 2013, Real World OCaml: Functional programming for the masses
   [Anonymous], GCC BUG 67784 INCORR
   [Anonymous], 2006, P 2006 C CTR ADV STU
   [Anonymous], THESIS
   [Anonymous], CLANG HANDLES TYPE V
   [Anonymous], C11 YACC GRAMMAR
   [Anonymous], 344 GNU GCC
   Baxter ID, 2004, PROC INT CONF SOFTW, P625, DOI 10.1109/ICSE.2004.1317484
   Brown D., 1992, LEX YACC, V2nd
   Gazzillo P, 2012, ACM SIGPLAN NOTICES, V47, P323, DOI 10.1145/2345156.2254103
   Grune Dick, 2008, Parsing Techniques: A Practical Guide, V2nd, DOI [10.1007/978-0-387-68954-8, DOI 10.1007/978-0-387-68954-8]
   Jeffery CL, 2003, ACM T PROGR LANG SYS, V25, P631, DOI 10.1145/937563.937566
   Jourdan JH, 2012, LECT NOTES COMPUT SC, V7211, P397, DOI 10.1007/978-3-642-28869-2_20
   Kernighan B.W., 1988, The C Programming Language
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   Cardona PAN, 2015, CUAD ACT, P154
   Padioleau Y, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P247, DOI 10.1145/1357010.1352618
   Padioleau Y, 2009, LECT NOTES COMPUT SC, V5501, P109, DOI 10.1007/978-3-642-00722-4_9
   PAGER D, 1977, ACTA INFORM, V7, P249, DOI 10.1007/BF00290336
   RITCHIE DM, 1993, SIGPLAN NOTICES, V28, P201, DOI 10.1145/155360.155580
   Scarpazza DP, 2007, DR DOBBS J, V32, P48
   Van Wyk EricR., 2007, GPCE 07, P63
NR 34
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2017
VL 39
IS 4
AR 14
DI 10.1145/3064848
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AW
UT WOS:000414328600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Crafa, S
   Padovani, L
AF Crafa, Silvia
   Padovani, Luca
TI The Chemical Approach to Typestate-Oriented Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Typestate; concurrency; behavioral types; join calculus
ID ACTIVE OBJECTS; JOIN-CALCULUS; LANGUAGE; SESSIONS
AB We introduce a novel approach to typestate-oriented programming based on the chemical metaphor: state and operations on objects are molecules of messages, and state transformations are chemical reactions. This approach allows us to investigate typestate in an inherently concurrent setting, whereby objects can be accessed and modified concurrently by several processes, each potentially changing only part of their state. We introduce a simple behavioral type theory to express in a uniform way both the private and the public interfaces of objects; describe and enforce structured object protocols consisting of possibilities, prohibitions, and obligations; and control object sharing.
C1 [Crafa, Silvia] Univ Padua, Dipartimento Matemat, Via Trieste 63, I-35121 Padua, Italy.
   [Padovani, Luca] Univ Turin, Dipartimento Informat, Corso Svizzera 185, I-10149 Turin, Italy.
C3 University of Padua; University of Turin
RP Crafa, S (corresponding author), Univ Padua, Dipartimento Matemat, Via Trieste 63, I-35121 Padua, Italy.
EM crafa@math.unipd.it; luca.padovani@unito.it
OI Padovani, Luca/0000-0001-9097-1297
FU University of Padova under the PRAT project BECOM; University of Padova
   under the PRAT project ANCORE; ICT COST Action IC1201 BETTY; MILIR PRIN
   CINA; Ateneo/CSP Project SALT;  [R.S131\1012 DART]
FX S. Crafa was supported by the University of Padova under the PRAT
   projects BECOM and ANCORE. L. Padovani was supported by ICT COST Action
   IC1201 BETTY, MILIR PRIN CINA, Ateneo/CSP Project SALT, and R.S131\1012
   DART.
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   [Anonymous], 2005, P 10 EUROPEAN SOFTWA, DOI [10.1145/1095430.1081713, DOI 10.1145/1095430.1081713]
   Beckman NE, 2011, LECT NOTES COMPUT SC, V6813, P2, DOI 10.1007/978-3-642-22655-7_2
   Benton N, 2004, ACM T PROGR LANG SYS, V26, P769, DOI 10.1145/1018203.1018205
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   Bierhoff K, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P301
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Calvert P, 2012, LECT NOTES COMPUT SC, V7460, P181, DOI 10.1007/978-3-642-33125-1_14
   Castegren Elias, 2016, P 30 EUR C OBJ OR PR
   Conway J.H., 1971, Regular Algebra and Finite Machines
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   Crafa S, 2015, ACM SIGPLAN NOTICES, V50, P917, DOI [10.1145/2858965.2814287, 10.1145/2814270.2814287]
   Crafa Silvia, 2017, COBALTBLUE
   Damiani F, 2008, ACTA INFORM, V45, P479, DOI 10.1007/s00236-008-0079-y
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   de Caso G, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2491509.2491519
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   Drossopoulou S., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P130
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Fournet C, 2002, LECT NOTES COMPUT SC, V2395, P268
   Fournet C, 2003, LECT NOTES COMPUT SC, V2638, P129
   Fournet C, 2003, J LOGIC ALGEBR PROGR, V57, P23, DOI 10.1016/S1567-8326(03)00040-7
   Fournet C, 1997, LECT NOTES COMPUT SC, V1243, P196
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gay SJ, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P299, DOI 10.1145/1706299.1706335
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Haller P, 2008, LECT NOTES COMPUT SC, V5052, P135, DOI 10.1007/978-3-540-68265-3_9
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Itzstein GS, 2003, LECT NOTES COMPUT SC, V2823, P151
   Jin D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P415
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kouzapas D, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P146, DOI 10.1145/2967973.2968595
   Le Fessant F., 1998, ELECT NOTES THEORETI, V16, P205
   Meredith PO, 2010, AUTOMAT SOFTW ENG, V17, P149, DOI 10.1007/s10515-010-0063-y
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Microsoft Research, 2004, COM
   Najm E., 1999, P FORTE 99, V156, P203
   Nienaltowski P., 2007, THESIS
   NIERSTRASZ O, 1993, SIGPLAN NOTICES, V28, P1, DOI 10.1145/167962.167976
   Padovani L., 2014, P CSL LICS 2014
   Patrignani M, 2011, LECT NOTES COMPUT SC, V6722, P289, DOI 10.1007/978-3-642-21461-5_19
   Plociniczak H, 2010, LECT NOTES COMPUT SC, V6116, P61, DOI 10.1007/978-3-642-13414-2_5
   Puntigam F, 2001, FUND INFORM, V48, P315
   Puntigam F, 2001, CONCURR COMP-PRACT E, V13, P293, DOI 10.1002/cpe.570
   Puntigam F, 2001, COMPUT LANG, V27, P163, DOI 10.1016/S0096-0551(01)00019-4
   RAVARA A, 2000, LNCS, V1877, P474
   Russo C, 2007, LECT NOTES COMPUT SC, V4354, P260
   Russo CV, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P53
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Stork S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2543920
   Stork Sven., 2009, Proceeding of the 24th ACM SIGPLAN conference companion on Object oriented programming systems languages and applications, P933
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sunshine J, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P713
   Turon A, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P575
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   West S, 2015, ACM SIGPLAN NOTICES, V50, P273, DOI [10.1145/2858788.2688545, 10.1145/2688500.2688545]
NR 64
TC 6
Z9 6
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2017
VL 39
IS 3
AR 13
DI 10.1145/3064849
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AP
UT WOS:000414327900004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Huang, YQ
   Childers, BR
   Soffa, ML
AF Huang, Yuqiang
   Childers, Bruce R.
   Soffa, Mary Lou
TI Detecting Bugs in Register Allocation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Verification; Register allocation
AB Although register allocation is critical for performance, the implementation of register allocation algorithms is difficult, due to the complexity of the algorithms and target machine architectures. It is particularly difficult to detect register allocation errors if the output code runs to completion, as bugs in the register allocator can cause the compiler to produce incorrect output code. The output code may even execute properly on some test data, but errors can remain. In this article, we propose novel data flow analyses to statically check that the value flow of the output code from the register allocator is the same as the value flow of its input code. The approach is accurate, fast, and can identify and report error locations and types. It is independent of the register allocator and uses only the input and output code of the register allocator. It can be used with different register allocators, including those that perform coalescing and rematerialization. The article describes our approach, called SARAC, and a tool that statically checks a register allocation and reports the errors and their types that it finds. The tool has an average compile-time overhead of only 8% and a modest average memory overhead of 85KB. Our techniques can be used by compiler developers during regression testing and as a command-line-enabled debugging pass for mysterious compiler behavior.
C1 [Huang, Yuqiang; Childers, Bruce R.] Univ Pittsburgh, Dept Comp Sci, Pittsburgh, PA 15260 USA.
   [Soffa, Mary Lou] Univ Virginia, Dept Comp Sci, Charlottesville, VA 22904 USA.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE); University
   of Pittsburgh; University of Virginia
RP Huang, YQ (corresponding author), Univ Pittsburgh, Dept Comp Sci, 210 S Bouquet St,Rm 6404, Pittsburgh, PA 15260 USA.
EM yuqiangh@cs.pitt.edu
CR ADLTABATABAI A, 1993, P S PRINC PROGR LANG
   ADLTABATABAI AR, 1996, P ACM SIGPLAN C PROG
   [Anonymous], P ACM SIGPLAN C PROG
   [Anonymous], P 4 INT C ARCH SUPP
   BARTHE G, 2006, P 13 INT STAT AN S
   BENITEZ ME, 1988, P ACM SIGPLAN C PROG
   BERNSTEIN D, 1989, P ACM SIGPLAN C PROG
   BLECH JO, 2008, P 7 INT WORKSH COMP
   BRIGGS P, 1994, ACM T PROGR LANG SYS, V16, P428, DOI 10.1145/177492.177575
   BRIGGS P, 1992, P ACM SIGPLAN C PROG
   CHAITIN GJ, 1982, P S COMP CONSTR
   CHOW FC, 1990, ACM T PROGR LANG SYS, V12, P501, DOI 10.1145/88616.88621
   COOPER KD, 1997, P ACM SIGPLAN C PROG
   DAVIDSON JW, 1984, SOFTWARE PRACT EXPER, V14, P857, DOI 10.1002/spe.4380140906
   DOR N, 2004, P INT S SOFTW TEST A
   DWYER MB, 1994, P ACM SIGSOFT S FDN
   George L, 1996, ACM T PROGR LANG SYS, V18, P300, DOI 10.1145/229542.229546
   GUPTA R, 1989, P ACM SIGPLAN C PROG
   JARAMILLO C, 2002, P INT WORKSH COMP OP
   Lee C. C., 1997, P ACM IEEE INT S MIC
   LEE KD, 2003, ELECT NOT THEOR COMP, V82, P3
   LERNER S, 2005, P S PRINC PROGR LANG
   LERNER S, 2003, P ACM SIGPLAN C PROG
   LEROY X, 2006, P S PRINC PROGR LANG
   Li GD, 2007, LECT NOTES COMPUT SC, V4421, P205
   MCNERNEY TM, 1991, P ACM SIGPLAN WORKSH
   NANDIVADA VK, 2007, P 14 INT STAT AN S
   Necula G.C., 1998, P ACM SIGPLAN C PROG
   Necula G.C., 2000, P ACM SIGPLAN C PROG
   PEREIRA FMQ, 2006, STATIC VALIDATION RE
   PNUELI A, 1998, P 4 C TOOLS ALG CONS
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P895, DOI 10.1145/330249.330250
   Rinard M, 1999, Tech. Rep. MIT-LCS-TR-776
   RIVAL X, 2004, P S PRINC PROGR LANG
   SANTHANAM V, 1990, P ACM SIGPLAN C PROG
   SMITH MD, 2004, P ACM SIGPLAN C PROG
   SMITH MD, MACHINE SUIF
   *SPEC, CPU2000 BENCHMARK
   STEFFEN B, 1990, LECT NOTES COMPUT SC, V432, P389
   WISMUELLER R, 1994, P ACM SIGPLAN C PROG
NR 40
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2010
VL 32
IS 4
AR 15
DI 10.1145/1734206.1734212
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 588GV
UT WOS:000277057700006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Castagna, G
   Gesbert, N
   Padovani, L
AF Castagna, Giuseppe
   Gesbert, Nils
   Padovani, Luca
TI A Theory of Contracts for Web Services
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Standardization; Theory; Web services; contracts; concurrency
   theory; CCS; must testing; type theory; subtyping; explicit coercions
ID REGULAR EXPRESSIONS; CALCULUS
AB Contracts are behavioral descriptions of Web services. We devise a theory of contracts that formalizes the compatibility of a client with a service, and the safe replacement of a service with another service. The use of contracts statically ensures the successful completion of every possible interaction between compatible clients and services.
   The technical device that underlies the theory is the filter, which is an explicit coercion preventing some possible behaviors of services and, in doing so, make services compatible with different usage scenarios. We show that filters can be seen as proofs of a sound and complete subcontracting deduction system which simultaneously refines and extends Hennessy's classical axiomatization of the must testing preorder. The relation is decidable, and the decision algorithm is obtained via a cut-elimination process that proves the coherence of subcontracting as a logical system.
   Despite the richness of the technical development, the resulting approach is based on simple ideas and basic intuitions. Remarkably, its application is mostly independent of the language used to program the services or the clients. We outline the practical aspects of our theory by studying two different concrete syntaxes for contracts and applying each of them to Web services languages. We also explore implementation issues of filters and discuss the perspectives of future research this work opens.
C1 [Castagna, Giuseppe] Univ Paris Diderot, CNRS, PPS, F-75013 Paris, France.
   [Gesbert, Nils] Univ Glasgow, Glasgow G12 8QQ, Lanark, Scotland.
   [Padovani, Luca] Univ Urbino, ISTI, I-61029 Urbino, Italy.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS); University of Glasgow; University of Urbino; Consiglio Nazionale
   delle Ricerche (CNR); Istituto di Scienza e Tecnologie dell'Informazione
   "Alessandro Faedo" (ISTI-CNR)
RP Castagna, G (corresponding author), Univ Paris Diderot, CNRS, PPS, 175 Rue Chevaleret, F-75013 Paris, France.
RI Scott, Andrew C/C-6661-2008
OI Padovani, Luca/0000-0001-9097-1297
FU EPSRC [EP/E065708/1] Funding Source: UKRI
CR Alves A., 2007, Web Services Business Process Execution Language Version 2.0
   [Anonymous], WEB SERVICES DESCR 2
   Baeten JCM, 2007, J ACM, V54, DOI 10.1145/1219092.1219094
   BANERJI A., 2002, WEB SERVICES CONVERS
   BELLWOOD T, 2005, UDDI VERSION 3 0 2
   Berardi D, 2003, LECT NOTES COMPUT SC, V2910, P43
   BERNARDI G, 2008, P WORKSH GLOB COMP M
   Bravetti Mario, 2007, P 6 INT S SOFTW COMP
   Brinksma Ed, 1995, CONFORMANCE TESTING, P468
   BRUCE KB, 1990, INFORM COMPUT, V87, P196, DOI 10.1016/0890-5401(90)90062-M
   CARBONE M, 2007, LECT NOTES COMPUTER, V4421
   Carbone M, 2007, ELECTRON NOTES THEOR, V171, P127, DOI 10.1016/j.entcs.2006.12.041
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   CARPINETI S, 2006, LECT NOTES COMPUTER, V4184
   Castagna G, 2005, LECT NOTES COMPUT SC, V3580, P30
   CASTAGNA G, 2007, P 5 ACM SIGPLAN WORK
   CASTAGNA G, 2008, HAL00334435 CNRSPPS
   Castagna G, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1328438.1328471
   Chen G, 2004, J LOGIC COMPUT, V14, P405, DOI 10.1093/logcom/14.3.405
   Chinnici Roberto., 2007, Web services description language (wsdl) version 2.0 part 1: Core language
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   De Giacomo G, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1866
   De Nicola R, 2003, THEOR COMPUT SCI, V302, P179, DOI 10.1016/S0304-3975(02)00774-0
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   DENICOLA R, 1987, LECT NOTES COMPUT SC, V249, P138
   DERRICK J, 1996, P FORTE 96, P501
   Di Cosmo Roberto, 1995, Isomorphisms of types: from.- calculus to information retrieval and language design
   Fallside D.C., 2004, XML SCHEMA 0, VSecond
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   FOURNET C, 1996, P 23 ACM S PRINC PRO, P372, DOI DOI 10.1145/237721.237805
   FOURNET C, 2004, LECT NOTES COMPUTER, V3114
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   HENNESSY M, 1985, J ACM, V32, P896, DOI 10.1145/4221.4249
   Hennessy M., 1988, An algebraic theory of processes
   HONDA K, 1998, LECT NOTES COMPUTER, V1381
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Hull R., 2003, Proc. ACM PODS, P1
   LANEVE C, 2007, LECT NOTES COMPUTER, V4703
   Laneve C, 2008, LECT NOTES COMPUT SC, V5065, P681, DOI 10.1007/978-3-540-68679-8_42
   Laneve C, 2006, LECT NOTES COMPUT SC, V3921, P32
   Milner R, 1982, CALCULUS COMMUNICATI
   Padovani L, 2008, LECT NOTES COMPUT SC, V5201, P131, DOI 10.1007/978-3-540-85361-9_13
   Pistore M, 2005, 2005 IEEE International Conference on Web Services, Vols 1 and 2, Proceedings, P293
   RITTRI M, 1993, RAIRO-INF THEOR APPL, V27, P523, DOI 10.1051/ita/1993270605231
   SOLOVIEV S, 1996, LNCS, V1512, P173
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Traverso P, 2004, LECT NOTES COMPUT SC, V3298, P380
NR 48
TC 101
Z9 105
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2009
VL 31
IS 5
AR 19
DI 10.1145/1538917.1538920
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 476VT
UT WOS:000268475100003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bernardeschi, C
   De Francesco, N
   Lettieri, G
   Martini, L
   Masci, P
AF Bernardeschi, C.
   De Francesco, N.
   Lettieri, G.
   Martini, L.
   Masci, P.
TI Decomposing Bytecode Verification by Abstract Interpretation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Verification; Theory; Abstract interpretation; bytecode verification
ID MODEL; SPECIFICATION
AB Bytecode verification is a key point in the security chain of the Java platform. This feature is only optional in many embedded devices since the memory requirements of the verification process are too high. In this article we propose an approach that significantly reduces the use of memory by a serial/parallel decomposition of the verification into multiple specialized passes. The algorithm reduces the type encoding space by operating on different abstractions of the domain of types. The results of our evaluation show that this bytecode verification can be performed directly on small memory systems. The method is formalized in the framework of abstract interpretation.
C1 [Bernardeschi, C.; De Francesco, N.; Lettieri, G.; Martini, L.; Masci, P.] Univ Pisa, Dipartimento Ingn Informaz, Sez Informat, I-56122 Pisa, Italy.
C3 University of Pisa
RP Bernardeschi, C (corresponding author), Univ Pisa, Dipartimento Ingn Informaz, Sez Informat, Via Diotisalvi 2, I-56122 Pisa, Italy.
EM cinzia@iet.unipi.it; nico@iet.unipi.it; g.lettieri@iet.unipi.it;
   luca.martini@iet.unipi.it; paolo.masci@iet.unipi.it
RI Bernardeschi, Cinzia/AAG-8272-2019; Martinelli, Luca/JGD-3837-2023;
   Lettieri, Giuseppe/ABI-8376-2020; Masci, Paolo/H-9632-2019
OI Bernardeschi, Cinzia/0000-0003-1604-4465; Martinelli,
   Luca/0000-0002-4466-3864; Lettieri, Giuseppe/0000-0003-1005-7441; Masci,
   Paolo/0000-0002-0667-7763
CR Barthe G, 2005, J AUTOM REASONING, V35, P295, DOI 10.1007/s10817-005-0084-6
   Bernardeschi C, 2006, INFORM PROCESS LETT, V98, P11, DOI 10.1016/j.ipl.2005.11.017
   Bernardeschi C, 2006, COMPUT J, V49, P234, DOI 10.1093/comjnl/bxh161
   Bernardeschi C, 2003, LECT NOTES COMPUT SC, V2889, P425
   BERNARDESCHI C, 2007, IET0701 U PIS DIP IN
   BIEBER P, 2001, LECT NOTES COMPUTER, V2041
   Casset L, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P51, DOI 10.1109/DSN.2002.1028886
   Click Cliff, 2002, P 2002 JOINT ACMISCO, P96, DOI DOI 10.1145/583810.583821
   Coglio A, 2004, CONCURR COMP-PRACT E, V16, P647, DOI 10.1002/cpe.798
   Coglio A, 2003, CONCURR COMP-PRACT E, V15, P155, DOI 10.1002/cpe.714
   COHEN NH, 1991, ACM T PROGR LANG SYS, V13, P626, DOI 10.1145/115372.115297
   Cortesi A, 1997, ACM T PROGR LANG SYS, V19, P7, DOI 10.1145/239912.239914
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Deville D, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND WORKSHOP ON INDUSTRIAL EXPERIENCES WITH SYSTEMS SOFTWARE (WIESS 02), P15
   Freund SN, 1999, ACM T PROGR LANG SYS, V21, P1196, DOI 10.1145/330643.330646
   Giacobazzi R, 1998, ACM T PROGR LANG SYS, V20, P1067, DOI 10.1145/293677.293680
   Giacobazzi R, 1998, SCI COMPUT PROGRAM, V32, P177, DOI 10.1016/S0167-6423(97)00034-8
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   GOLDBERG A, 1998, P 5 ACM C COMP COMM, P49
   GOSLING J, 2000, JAVA SERIES
   Hyppönen K, 2003, LECT NOTES COMPUT SC, V2836, P60
   *JSR, 2006, JSR202 JAV COMM PROC
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Knoblock TB, 2001, ACM T PROGR LANG SYS, V23, P243, DOI 10.1145/383043.383045
   Lanet JL, 2000, LECT NOTES COMPUT SC, V1820, P85
   Leroy X, 2003, J AUTOM REASONING, V30, P235, DOI 10.1023/A:1025055424017
   Leroy X, 2001, LECT NOTES COMPUT SC, V2102, P265
   Leroy X, 2002, SOFTWARE PRACT EXPER, V32, P319, DOI 10.1002/spe.438
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Mycroft A., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P179, DOI 10.1145/154630.154648
   Naccache D, 2002, LECT NOTES COMPUT SC, V2513, P109
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Qian ZY, 2000, ACM T PROGR LANG SYS, V22, P638, DOI 10.1145/363911.363915
   Requet A, 2003, SCI COMPUT PROGRAM, V46, P283, DOI 10.1016/S0167-6423(02)00095-3
   Rose E, 2003, J AUTOM REASONING, V31, P303, DOI 10.1023/B:JARS.0000021015.15794.82
   ROSE E, 1998, P WORKSH FORM UND JA
   Ward M, 1942, ANN MATH, V43, P191, DOI 10.2307/1968865
NR 40
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2008
VL 31
IS 1
AR 3
DI 10.1145/1452044.1452047
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 393TC
UT WOS:000262394800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Preda, MD
   Christodorescu, M
   Jha, S
   Debray, S
AF Preda, Mila Dalla
   Christodorescu, Mihai
   Jha, Somesh
   Debray, Saumya
TI A semantics-based approach to malware detection
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE security; languages; theory; verification; malware detection;
   obfuscation; trace semantics; abstract interpretation
ID MALICIOUS CODE
AB Malware detection is a crucial aspect of software security. Current malware detectors work by checking for signatures, which attempt to capture the syntactic characteristics of the machine-level byte sequence of the malware. This reliance on a syntactic approach makes current detectors vulnerable to code obfuscations, increasingly used by malware writers, that alter the syntactic properties of the malware byte sequence without significantly affecting their execution behavior.
   This paper takes the position that the key to malware identification lies in their semantics. It proposes a semantics-based framework for reasoning about malware detectors and proving properties such as soundness and completeness of these detectors. Our approach uses a trace semantics to characterize the behavior of malware as well as that of the program being checked for infection, and uses abstract interpretation to "hide" irrelevant aspects of these behaviors. As a concrete application of our approach, we show that (1) standard signature matching detection schemes are generally sound but not complete, (2) the semantics-aware malware detector proposed by Christodorescu et al. is complete with respect to a number of common obfuscations used by malware writers and (3) the malware detection scheme proposed by Kinder et al. and based on standard model-checking techniques is sound in general and complete on some, but not all, obfuscations handled by the semantics-aware malware detector.
C1 [Preda, Mila Dalla] Univ Verona, I-37100 Verona, Italy.
   [Christodorescu, Mihai; Jha, Somesh] Univ Wisconsin, Madison, WI 53706 USA.
   [Debray, Saumya] Univ Arizona, Tucson, AZ USA.
C3 University of Verona; University of Wisconsin System; University of
   Wisconsin Madison; University of Arizona
RP Preda, MD (corresponding author), Univ Verona, I-37100 Verona, Italy.
EM dallapre@sci.univr.it; mihai@cs.wisc.edu; jha@cs.wisc.edu;
   debray@cs.arizona.edu
FU MUR; FIRB; National Science Foundation [CNS-0448476, CNS-0627501,
   EIA-0080123, CCR-0113633, CNS-04I0918]
FX The work of M. Dalla Preda was partially supported by the MUR grant
   "InterAbstract" and by the FIRB grant "Abstract Interpretation and Model
   Checking for the verification of embedded systems". The work of M.
   Christodorescu and S. Jha was supported in part by the National Science
   Foundation under grants CNS-0448476 and CNS-0627501. The work of S.
   Debray was supported in part by the National Science Foundation under
   grants EIA-0080123, CCR-0113633, and CNS-04I0918.
CR Adleman L., 1988, LECT NOTES COMPUTER, V403
   [Anonymous], P 6 JOINT M EUR SOFT
   [Anonymous], 2001, CRYPTO 2001, DOI DOI 10.1007/3-540-44647-81
   [Anonymous], P 25 ACM SIGPLAN SIG
   [Anonymous], 2005, 1539 U WISC
   [Anonymous], 2001, MODEL CHECKING
   Bergeron J., 2001, S REQ ENG INF SEC, P1
   BRIESEMEISTER L, 2005, SRICSL0503
   CHESS DM, 2000, VIRUS B
   CHOW S, 2001, LNCS, V2200, P144
   Christodorescu M, 2005, P IEEE S SECUR PRIV, P32, DOI 10.1109/SP.2005.20
   Christodorescu M, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE 12TH USENIX SECURITY SYMPOSIUM, P169
   Cohen F., 1989, Computers & Security, V8, P325, DOI 10.1016/0167-4048(89)90089-8
   Cohen F., 1987, Computers & Security, V6, P22, DOI 10.1016/0167-4048(87)90122-2
   Cohen F., 1985, THESIS U SO CALIFORN
   Collberg C., 1997, TAXONOMY OBFUSCATING
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   COUSOT P, 2002, P 29 ACM SIGPLAN SIG, P178
   Detristan T., 2003, Phrack, V11, P61
   Goldwasser S, 2005, ANN IEEE SYMP FOUND, P553, DOI 10.1109/SFCS.2005.60
   Gupta A, 2003, LECT NOTES COMPUT SC, V2820, P55
   Intel Corporation, 2001, IA 32 INT ARCH SOFTW
   JORDAN M, 2002, VIRUS B, V10, P4
   Kinder J, 2005, LECT NOTES COMPUT SC, V3548, P174
   Kolter J.Z., 2004, Proceedings of Knowledge Discovery and Data mining, P470
   Lakhotia A, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P161, DOI 10.1109/WCRE.2004.24
   LAKHOTIA A, 2000, VIRUS B
   Lee W, 2000, LECT NOTES COMPUT SC, V1907, P49
   Lee W, 1998, PROCEEDINGS OF THE SEVENTH USENIX SECURITY SYMPOSIUM, P79
   Lee W, 1999, P IEEE S SECUR PRIV, P120, DOI 10.1109/SECPRI.1999.766909
   Li WJ, 2005, Proceedings from the Sixth Annual IEEE Systems, Man and Cybernetics Information Assurance Workshop, P64, DOI 10.1109/IAW.2005.1495935
   Linn C., 2003, P 10 ACM C COMP COMM, P290, DOI DOI 10.1145/948109.948149
   LO RW, 1995, COMPUT SECUR, V14, P541, DOI 10.1016/0167-4048(95)00012-W
   McHugh J., 2001, International Journal of Information Security, V1, P14, DOI 10.1007/s102070100001
   MORLEY P, 2001, VIRUS B, P129
   Nachenberg C, 1997, COMMUN ACM, V40, P46, DOI 10.1145/242857.242869
   Preda Mila Dalla, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P377, DOI 10.1145/1190216.1190270
   Preda MD, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P301, DOI 10.1109/SEFM.2005.13
   Preda MD, 2005, LECT NOTES COMPUT SC, V3580, P1325
   RAJAAT, 1999, 29A MAG, V1
   SINGH P, 2003, P 4 IEEE INF ASS WOR
   *SYM CORP, 2006, SYM INT SEC THREAT R
   Szor P., 2001, VIRUS B C, P123
   Szor Peter, 2005, The art of computer virus research and defense: Art comp virus res defense p1
   Walenstein A, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P75
   Wee Hoeteck., 2005, Proceedings of the 37th Annual ACM Symposium on Theory of Computing, Baltimore, MD, USA, May 22-24, 2005, P523, DOI DOI 10.1145/1060590.1060669
   ZOMBIE, 2001, REAL PERMUTATING SIC
   ZOMBIE, 2001, AUTOMATED REVERSE EN
NR 50
TC 36
Z9 39
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2008
VL 30
IS 5
AR 25
DI 10.1145/1387673.1387674
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 351SG
UT WOS:000259445600001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Gil, J
   Zibin, Y
AF Yossi Gil, Joseph
   Zibin, Yoav
TI Efficient dynamic dispatching, with type slicing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; measurement; performance; theory; CT (compact
   dispatch tables); dispatch; dynamic-typing; hierarchy; incremental;
   message; subtyping; type slicing
ID MESSAGE DISPATCH; MULTIPLE; ALGORITHMS; LAYOUT; TABLES; SPACE
AB A fundamental problem in the implementation of object-oriented languages is that of a frugal implementation of dynamic dispatching, that is, a small footprint data structure that supports quick response to runtime dispatching queries of the following format: which method should be executed in response to a certain message sent to a given object. Previous theoretical algorithms for this problem tend to be impractical due to their conceptual complexity and large hidden constants. In contrast, successful practical heuristics lack theoretical support.
   The contribution of this article is in a novel type slicing technique, which results in two dispatching schemes: TS and CTd. We make the case for these schemes both practically and theoretically. The empirical findings on a corpus of 35 hierarchies totaling some 64 thousand types from eight different languages, demonstrate improvement over previous results in terms of the space required for the representation, and the time required for computing it.
   The theoretical analysis is with respect to iota, the best possible compression factor of the dispatching matrix. The results are expressed as a function of a parameter kappa, which can be thought of as a metric of the complexity of the topology of a multiple inheritance hierarchy. In single inheritance hierarchies kappa = 1, but although kappa can be in the order of the size of the hierarchy, it is typically a small constant in actual use of inheritance; in our corpus, the median value of kappa is 5, while its average is 6.4.
   The TS scheme generalizes the famous interval containment technique to multiple inheritance. TS achieves a compression factor of iota/kappa, that is, our generalization comes with an increase to the space requirement by a small factor of kappa. The pay is in the dispatching time, which is no longer constant as in a naive matrix implementation, but logarithmic in the number of different method implementations. In practice, dispatching uses one indirect branch and, on average, only 2.5 binary branches.
   The CT schemes are a sequence of algorithms CT1, CT2, CT3,..., where CTd uses d memory dereferencing operations during dispatch, and achieves a compression factor of 1/d iota(1-1/d) in a single inheritance setting. A generalization of these algorithms to a multiple inheritance setting, increases the space by a factor of (2 kappa)(1-1/d). This trade-off represents the first bounds on the compression ratio of constant-time dispatching algorithms. We also present an incremental variant of the CTd suited for languages such as Java.
C1 [Yossi Gil, Joseph; Zibin, Yoav] Technion Israel Inst Technol, IL-32000 Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Gil, J (corresponding author), Technion Israel Inst Technol, IL-32000 Haifa, Israel.
EM yogi@cs.technion.ac.il; yoav@zibin.net
CR ALPERN B, 2001, ACM SINGLAN NOTICES, V38
   [Anonymous], 1984, Smalltalk-80: The Interactive Programming Environment
   [Anonymous], TR930305 U WASH SEAT
   [Anonymous], ANNOTATED C REFERENC
   ARNOLD P, 1996, JAVA SERIES
   BOAS PV, 1977, MATH SYST THEORY, V10, P99
   BOAS PV, 1977, INFORMATION PROCESSI, V6, P80
   BOBROW DG, 1986, SIGPLAN NOTICES, V21, P17, DOI 10.1145/960112.28700
   BOBROW DG, 1988, 88002R LISP
   BOOTH KS, 1976, J COMPUT SYST SCI, V13, P335, DOI 10.1016/S0022-0000(76)80045-1
   Chambers C, 1999, ACM SIGPLAN NOTICES, V34, P238, DOI 10.1145/320385.320407
   Cohen T, 2000, 37TH INTERNATIONAL CONFERENCE ON TECHNOLOGY OF OBJECT-ORIENTED LANGUAGES AND SYSTEMS, PROCEEDINGS, P94, DOI 10.1109/TOOLS.2000.891361
   CONROY TJ, 1983, SMALLTALK 80 BITS HI
   Cox B.J., 1986, OBJECT ORIENTED PROG
   DEUTSCH P, 1984, P 11 POPL SALT LAK C, P297
   Dietz P., 1987, P 19 ANN ACM S THEOR, P365, DOI DOI 10.1145/28395.28434
   DIETZFELBINGER M, 1994, SIAM J COMPUT, V23, P738, DOI 10.1137/S0097539791194094
   DIXON R, 1989, ACM SIGPLAN NOTICES, V24, P211
   DRIESEN K, 1993, SIGPLAN NOTICES, V28, P259, DOI 10.1145/167962.165902
   Driesen K, 1995, LECT NOTES COMPUT SC, V952, P253
   Driesen K, 1996, ACM SIGPLAN NOTICES, V31, P306, DOI 10.1145/236338.236369
   DRIESEN K, 1999, TRCS9924 U CAL COMP
   DRIESEN K, 1995, P 10 ANN C OBJ OR PR, V30, P141
   DRIESEN K, 1995, TRCS9420 U CAL SANT
   Dujardin E, 1998, ACM T PROGR LANG SYS, V20, P116, DOI 10.1145/271510.271521
   DUJARDIN E, 1996, RR2892 INR I NAT REC
   Eckel N, 2000, LECT NOTES COMPUT SC, V1850, P394
   FERRAGINA P, 1996, LECT NOTES COMPUTER, V1136, P107
   Gabow H.N., 1984, P 16 ANN ACM S THEOR, P135
   Gil J, 1999, ACM SIGPLAN NOTICES, V34, P256, DOI 10.1145/320385.320408
   GIL J, 1998, P 12 EUR C OBJ OR PR, P601
   HOLST W, 1998, TR9803 U ALB
   HOLZLE U, 1991, LECT NOTES COMPUT SC, V512, P21
   KICZALES G, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P99, DOI 10.1145/91556.91600
   Muthukrishnan S, 1996, PROCEEDINGS OF THE SEVENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P42
   Naik M, 2000, ACM SIGPLAN NOTICES, V35, P49, DOI 10.1145/351159.351174
   Pang C, 1999, LECT NOTES COMPUT SC, V1628, P304
   PASCAL A, 1992, P 7 ANN C OBJ OR PRO, P110
   SHALIT A, 1997, DYLAN REFERENCE MANU
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   STROUSTRUP B, 1997, C PLUS PLUS PROGRAMM
   STROUSTRUP B, 1994, DESIGN EVOLUTION C P
   VITEK J, 1996, LECT NOTES COMPUTER, P309
   VITEK J, 1995, THESIS U VICTORIA VI
   VITEK J, 1994, LNCS, V821, P432
   WILLARD DE, 1984, J COMPUT SYST SCI, V28, P379, DOI 10.1016/0022-0000(84)90020-5
   Zendra O, 1997, ACM SIGPLAN NOTICES, V32, P125, DOI 10.1145/263700.263728
   Zibin Y, 2002, ACM SIGPLAN NOTICES, V37, P142, DOI 10.1145/583854.582434
   Zibin Y, 2001, ACM SIGPLAN NOTICES, V36, P96, DOI 10.1145/504311.504290
   ZIBIN Y, 2003, P 30 ACM SIGPLAN SIG, P126
   [No title captured]
NR 51
TC 4
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 1
AR 5
DI 10.1145/1290520.1290525
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248KY
UT WOS:000252153400005
OA Bronze
DA 2024-07-18
ER

PT J
AU Hertz, M
   Blackburn, SM
   Moss, JEB
   McKinley, KS
   Stefanovic, D
AF Hertz, Matthew
   Blackburn, Stephen M.
   Moss, J. Eliot B.
   McKinley, Kathryn S.
   Stefanovic, Darko
TI Generating object lifetime traces with Merlin
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE garbage collection; trace design; object lifetime analysis; trace
   generation
ID GARBAGE COLLECTION; JALAPENO; JAVA
AB Programmers are writing a rapidly growing number of programs in object-oriented languages, such as Java and C#, that require garbage collection. Garbage collection traces and simulation speed up research by enabling deeper understandings of object lifetime behavior and quick exploration and design of new garbage collection algorithms. When generating perfect traces, the brute-force method of computing object lifetimes requires a whole-heap garbage collection at every potential collection point in the program. Because this process is prohibitively expensive, researchers often use granulated traces by collecting only periodically, for example, every 32 KB of allocation.
   We extend the state of the art for simulating garbage collection algorithms in two ways. First, we develop a systematic methodology for simulation studies of copying garbage collection and present results showing the effects of trace granularity on these simulations. We show that trace granularity often distorts simulated garbage collection results compared with perfect traces. Second, we present and measure the performance of a new algorithm called Merlin for computing object lifetimes. Merlin timestamps objects and later uses the timestamps of dead objects to reconstruct when they died. The Merlin algorithm piggybacks on garbage collections performed by the base system. Experimental results show that Merlin can generate traces over two orders of magnitude faster than the brute-force method which collects after every object allocation. We also use Merlin to produce visualizations of heap behavior that expose new object lifetime behaviors.
C1 Univ Massachusetts, Dept Comp Sci, Amherst, MA 01003 USA.
   Australian Natl Univ, Dept Comp Sci, Canberra, ACT 0200, Australia.
   Univ Texas, Dept Comp Sci, Austin, TX 78712 USA.
   Univ New Mexico, Dept Comp Sci, Albuquerque, NM 87131 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   Australian National University; University of Texas System; University
   of Texas Austin; University of New Mexico
RP Hertz, M (corresponding author), Canisius Coll, 2001 Main St, Buffalo, NY 14208 USA.
EM hertzm@canisius.edu; Steve.Blackburn@anu.edu.au; moss@cs.umass.edu;
   mckinley@cs.utexas.edu; darko@cs.unm.edu
OI Blackburn, Stephen/0000-0001-6632-6001
CR Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   Alpern B, 1999, ACM SIGPLAN NOTICES, V34, P314, DOI 10.1145/320385.320418
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Bacon D. F., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P207
   Blackburn SM, 2004, PROC INT CONF SOFTW, P137, DOI 10.1109/ICSE.2004.1317436
   Blackburn SM, 2001, ACM SIGPLAN NOTICES, V36, P342, DOI 10.1145/504311.504307
   BLACKBURN SM, 2003, P ACM C OBJ OR PROGR, P244
   BLACKBURN SM, 2004, P ACM C MEAS MOD COM, P25
   Blackburn StephenM., 2002, P SIGPLAN 2002 C PRO, P153, DOI DOI 10.1145/512529.512548
   Cahoon B, 2001, 2001 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P280, DOI 10.1109/PACT.2001.953309
   Cheng P, 1998, ACM SIGPLAN NOTICES, V33, P162, DOI 10.1145/277652.277718
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   DEUTSCH LP, 1976, COMMUN ACM, V19, P522, DOI 10.1145/360336.360345
   HERTZ M, 2004, TR0417 U MASS
   HERTZ M, 2002, IFIP C P, V223, P230
   HERTZ M, 2002, ACM SIGMETRICS PERFO, V30, P140
   Hirzel M, 2003, ACM SIGPLAN NOTICES, V38, P359, DOI 10.1145/949343.949337
   Hirzel M, 2002, ACM T PROGR LANG SYS, V24, P593, DOI 10.1145/586088.586089
   HIRZEL M, 2002, ACM SIGPLAN NOTICES, V37, P36
   HOSKING AL, 1992, SIGPLAN NOTICES, V27, P92, DOI 10.1145/141937.141946
   HUANG X, 2004, P ACM C OBJ OR PROGR
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   [Natrella M.G. National Bureau of Standards National Bureau of Standards], 1963, EXPT STAT
   NYSTROM N, 1998, THESIS PURDUE U W LA
   Rojemo Niklas., 1996, Proceedings of the first ACM SIGPLAN International Conference on Functional Programming, P34, DOI DOI 10.1145/232627.232633
   RUNCIMAN C, 1992, 172 U YORK DEP COMP
   RUNCIMAN C, 1995, P IMPL FUNCT LANG WO
   SANSOM PM, 1994, FP199410 U GLASG DEP
   SANSOM PM, 1994, THESIS U GLASGOW GLA
   Shaham R, 2001, ACM SIGPLAN NOTICES, V36, P12, DOI 10.1145/362426.362430
   SHAHAM R, 2002, ACM SIGPLAN NOTICES, V37, P64
   *SPECJVM98, 1998, STAND PERF EV CORP S
   Stefanovic D, 2003, ACM SIGPLAN NOTICES, V38, P25, DOI 10.1145/773039.773042
   Stefanovic D, 1999, ACM SIGPLAN NOTICES, V34, P370, DOI 10.1145/320385.320425
   Stefanovic D, 2001, ACM SIGPLAN NOTICES, V36, P137, DOI 10.1145/362426.362477
   Stefanovic Darko, 1999, THESIS U MASSACHUSET
   UNGAR D, 1992, ACM T PROGR LANG SYS, V14, P1, DOI 10.1145/111186.116734
   UNGAR D, 1984, SIGPLAN NOTICES, V19, P157
   Vestal S. C., 1987, THESIS U WASHINGTON
   WEIZENBAUM J, 1962, COMMUN ACM, V5, P161, DOI 10.1145/366862.366897
   ZORN B, 1992, CUCS60392 U COL BOUL
   Zorn Benjamin G., 1989, THESIS U CALIFORNIA
NR 43
TC 26
Z9 34
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2006
VL 28
IS 3
BP 476
EP 516
DI 10.1145/1133651.1133654
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052ZQ
UT WOS:000238273200003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Leuschel, M
AF Leuschel, M
TI A framework for the integration of partial evaluation and abstract
   interpretation of logic programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; verification; partial deduction; partial evaluation;
   program transformation; abstract interpretation; logic programming; flow
   analysis
ID PARTIAL DEDUCTION; SPECIALIZATION; VARIABLES
AB Recently the relationship between abstract interpretation and program specialization has received a lot of scrutiny, and the need has been identified to extend program specialization techniques so as to make use of more refined abstract domains and operators. This article clarifies this relationship in the context of logic programming, by expressing program specialization in terms of abstract interpretation. Based on this, a novel specialization framework, along with generic correctness results for computed answers and finite failure under SLD-resolution, is developed.
   This framework can be used to extend existing logic program specialization methods, such as partial deduction and conjunctive partial deduction, to make use of more refined abstract domains. It is also shown how this opens up the way for new optimizations. Finally, as shown in the paper, the framework also enables one to prove correctness of new or existing specialization techniques in a simpler manner.
   The framework has already been applied in the literature to develop and prove correct specialization algorithms using regular types, which in turn have been applied to the verification of infinite state process algebras.
C1 Univ Southampton, Dept Elect & Comp Sci, Southampton SO17 1BJ, Hants, England.
   Univ Copenhagen, DIKU, DK-1168 Copenhagen, Denmark.
C3 University of Southampton; University of Copenhagen
RP Univ Southampton, Dept Elect & Comp Sci, Southampton SO17 1BJ, Hants, England.
EM mal@ecs.soton.ac.uk
CR Albert E, 1998, LECT NOTES COMPUT SC, V1503, P262
   Alpuente M, 1998, ACM T PROGR LANG SYS, V20, P768, DOI 10.1145/291891.291896
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Apt K.R., 1990, HDB THEORETICAL COMP, P495
   Benkerimi K., 1993, Journal of Logic and Computation, V3, P469, DOI 10.1093/logcom/3.5.469
   BOL R, 1993, J LOGIC PROGRAM, V16, P25, DOI 10.1016/0743-1066(93)90022-9
   BOULANGER D, 1993, J SYMB COMPUT, V15, P495, DOI 10.1016/S0747-7171(06)80003-9
   BRUYNOOGHE M, 1991, J LOGIC PROGRAM, V10, P91, DOI 10.1016/0743-1066(91)80001-T
   BRUYNOOGHE M, 1992, NEW GENERAT COMPUT, V11, P47, DOI 10.1007/BF03037527
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   CHIN WN, 1993, LECT NOTES COMPUTER, V724, P124
   Clarke EM, 1999, MODEL CHECKING, P1
   Comini M, 1999, THEOR COMPUT SCI, V211, P275, DOI 10.1016/S0304-3975(97)00174-6
   CONSEL C, 1993, ACM T PROGR LANG SYS, V15, P463, DOI 10.1145/169683.174155
   CONSEL C, 1993, P 20 ANN ACM S PRINC, P493
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   De Schreye D, 1999, J LOGIC PROGRAM, V41, P231, DOI 10.1016/S0743-1066(99)00030-8
   De Schreye D, 1994, J LOGIC PROGRAM, V20, P199, DOI 10.1016/0743-1066(94)90027-2
   de Waal D. A., 1994, Automated Deduction - CADE-12. 12th International Conference on Automated Deduction. Proceedings, P207
   DEWAAL DA, 1991, LOGIC PROGRAM SYNTHE, P205
   Doets K., 1993, Journal of Logic and Computation, V3, P487, DOI 10.1093/logcom/3.5.487
   FUTAMURA Y, 1991, THEOR COMPUT SCI, V90, P61, DOI 10.1016/0304-3975(91)90299-H
   GALLAGHER J, 2002, LNCS, V2257, P243
   GALLAGHER J, 1990, P META90 WORKSH MET, P229
   GALLAGHER J, 1992, LOGIC PROGRAM SYNTHE, P151
   GALLAGHER J, 1991, NEW GENERAT COMPUT, V9, P305
   Gallagher J., 1991, TR9132 U BRIST
   Gallagher J. P., 2001, Higher-Order and Symbolic Computation, V14, P143, DOI 10.1023/A:1012936614361
   Gallagher J. P., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P88, DOI 10.1145/154630.154640
   GALLAGHER JP, 1994, MIT PS LOG, P599
   GALLAGHER JP, 2000, P PEPM 00, P44
   GALLAGHER JP, 1996, LNCS, V1110, P115, DOI DOI 10.1007/3-540-61580-6
   GLUCK R, 1994, LECT NOTES COMPUTER, V844, P165
   GLUCK R, 1996, LECT NOTES COMPUTER, V1140, P152
   HERMENEGILDO MV, 1992, J LOGIC PROGRAM, V13, P349, DOI 10.1016/0743-1066(92)90053-6
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Hughes J, 1999, LECT NOTES COMPUT SC, V1706, P293
   JANSSENS G, 1992, J LOGIC PROGRAM, V13, P205, DOI 10.1016/0743-1066(92)90032-X
   JOENS ND, 1987, ABSTR INT DECL LANG, P124
   Jones N. D., 1997, LNCS, V1302, P396
   Jones ND, 1996, ACM COMPUT SURV, V28, P480, DOI 10.1145/243439.243447
   JONES ND, 1999, LNCS, V1755, P62
   KO HP, 1991, LOGIC PROGRAMM, P679
   KOMOROWSKI J, 1992, LECT NOTES COMPUT SC, V649, P49
   KOMOROWSKI J, 1982, 9 ANN ACM SIGACT SIG, P255
   LASSEZ JL, 1988, FDN DEDUCTIVE DATABA, P587
   LECHARLIER B, 1994, ACM T PROGR LANG SYS, V16, P35, DOI 10.1145/174625.174627
   Leuschel M, 2002, THEOR PRACT LOG PROG, V2, P461, DOI 10.1017/S147106840200145X
   Leuschel M, 1998, LECT NOTES COMPUT SC, V1503, P230
   Leuschel M, 1998, ACM T PROGR LANG SYS, V20, P208, DOI 10.1145/271510.271525
   Leuschel M, 1998, NEW GENERAT COMPUT, V16, P283, DOI 10.1007/BF03037483
   Leuschel M, 1999, LECT NOTES COMPUT SC, V1706, P155
   Leuschel M, 2000, LECT NOTES ARTIF INT, V1861, P101
   LEUSCHEL M, 1995, P ILPS 95 INT LOG PR, P495
   LEUSCHEL M, 1998, P JOINT INT C S LOG, P220
   LEUSCHEL M, 1996, LECT NOTES COMPUTER, V1140, P137
   LEUSCHEL M, 1996, LNCS, V1207, P83
   LEUSCHEL M, 1996, P JOINT INT C S LOG, P319
   LEUSCHEL M, 2001, LNCS, V2372, P91
   LEUSCHEL M, 1997, THESIS KU LEUVEN
   LEUSCHEL M, 1995, LNCS, V1048, P1
   LEUSCHEL M, 2002, ECCE PARTIAL DEDUCTI
   Lloyd J.W., 1995, P ILPS 95, P465
   Lloyd J. W., 2012, Foundations of Logic Programming
   LLOYD JW, 1991, J LOGIC PROGRAM, V11, P217, DOI 10.1016/0743-1066(91)90027-M
   MARRIOTT K, 1990, ANN MATH ARTIFICIAL, V1, P303
   MARRIOTT K, 1988, P 5 INT C S LOG PROG, P909
   Martens B, 1996, J LOGIC PROGRAM, V28, P89, DOI 10.1016/0743-1066(95)00149-2
   MARTENS B, 1994, THEOR COMPUT SCI, V122, P97, DOI 10.1016/0304-3975(94)90203-8
   MOGENSEN T, 1997, ENCY COMPUTER SCI TE, P247
   Muchnick S., 1997, ADV COMPILER DESIGN
   MUTHUKUMAR K, 1992, J LOGIC PROGRAM, V13, P315, DOI 10.1016/0743-1066(92)90035-2
   MUTHUKUMAR K, 1991, LOGIC PROGRAMM, P49
   PETTOROSSI A, 1996, P IFIP TC2 WORK C AL
   PETTOROSSI A, 1996, LECT NOTES COMPUTER, V1110, P386
   PETTOROSSI A, 1997, P 24 ACM S PRINC PRO, P414
   PROIETTI M, 1991, LECT NOTES COMPUT SC, V528, P347
   PROIETTI M, 1993, J LOGIC PROGRAM, V16, P123, DOI 10.1016/0743-1066(93)90025-C
   Puebla G, 1999, J LOGIC PROGRAM, V41, P279, DOI 10.1016/S0743-1066(99)00031-X
   Puebla G, 2000, LECT NOTES COMPUT SC, V1870, P63
   Puebla G, 2000, LECT NOTES COMPUT SC, V1817, P273, DOI 10.1007/10720327_16
   Puebla G., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P77, DOI 10.1145/215465.215561
   PUEBLA G, 1997, P ILPS 97 WORKSH SPE, P29
   PUEBLA G, 1996, LNCS, V1207, P169
   PUEBLA G, 1999, BRISC SERIES, P75
   ROSCOE AW, 1999, THEORY PRACTICE CONC
   SAHLIN D, 1993, NEW GENERAT COMPUT, V12, P7, DOI 10.1007/BF03038271
   Sanders SW, 1996, CLIN THER, V18, P2, DOI 10.1016/S0149-2918(96)80175-5
   Sorensen M. H., 1996, Journal of Functional Programming, V6, P811, DOI 10.1017/S0956796800002008
   SORENSEN MH, 1994, LNCS, V788, P485
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   YARDENI E, 1991, J LOGIC PROGRAM, V10, P125, DOI 10.1016/0743-1066(91)80002-U
NR 94
TC 14
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2004
VL 26
IS 3
BP 413
EP 463
DI 10.1145/982158.982159
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 812QJ
UT WOS:000220853700001
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Choi, JD
   Gupta, M
   Serrano, MJ
   Sreedhar, VC
   Midkiff, SP
AF Choi, JD
   Gupta, M
   Serrano, MJ
   Sreedhar, VC
   Midkiff, SP
TI Stack allocation and synchronization optimizations for Java using escape
   analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; connection graphs; escape analysis; points-to
   graph
AB This article presents an escape analysis framework for Java to determine (1) if an object is not reachable after its method of creation returns, allowing the object to be allocated on the stack, and (2) if an object is reachable only from a single thread during its lifetime, allowing unnecessary synchronization operations on that object to be removed. We introduce a new program abstraction for escape analysis, the connection graph, that is used to establish reachability relationships between objects and object references. We show that the connection graph can be succinctly summarized for each method such that the same summary information may be used in different calling contexts without introducing imprecision into the analysis. We present an interprocedural algorithm that uses the above property to efficiently compute the connection graph and identify the nonescaping objects for methods and threads. The experimental results, from a prototype implementation of our framework in the IBM High Performance Compiler for Java, are very promising. The percentage of objects that may be allocated on the stack exceeds 70% of all dynamically created objects in the user code in three out of the ten benchmarks (with a median of 19%); 11% to 92% of all mutex lock operations are eliminated in those 10 programs (with a median of 51%), and the overall execution time reduction ranges from 2% to 23% (with a median of 7%) on a 333-MHz PowerPC workstation with 512 MB memory.
C1 IBM Corp, Thomas J Watson Res Ctr, Yorktown Hts, NY 10598 USA.
   Purdue Univ, Sch Elect & Comp Engn, W Lafayette, IN 47907 USA.
C3 International Business Machines (IBM); Purdue University System; Purdue
   University
RP IBM Corp, Thomas J Watson Res Ctr, POB 218, Yorktown Hts, NY 10598 USA.
EM jdchoi@watson.ibm.com; mgupta@us.ibm.com; mauricio.j.serrano@intel.com;
   sreedhar@watson.ibm.com; smidkiff@purdue.edu
OI Midkiff, Samuel/0000-0003-0246-7192
CR ALDRICH J, 1999, P 6 INT STAT AN S VE
   [Anonymous], P 25 ACM SIGPLAN SIG
   [Anonymous], P ACM SIGPLAN 99 C P
   BACON DF, 1998, P ACM SIGPLAN C PROG
   BIRKEDAL L, 1996, P 23 ANN ACM S PRINC
   BLANCHET B, 1998, P 25 ANN ACM S PRINC, P25
   BLANCHET B, 1999, P ACM SIGPLAN C OBJ
   BODGA J, 1999, P ACM SIGPLAN C OBJ
   BURKE M, 1995, LECT NOTES COMPUTER, V892, P234
   CHAMBERS C, 1999, P 12 INT WORKSH LANG
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   CHATTERJEE R, 1999, P 26 ANN ACM SIGACT
   CHENG BC, 2000, P ACM SIGPLAN 2000 C
   CHOI JD, 1993, P 20 ACM SIGPLAN SIG, P232
   CHOI JD, 1999, P ACM SIGPLAN C OBJ
   CHOI JD, 2002, RC22340 IBM TJ WATS
   CORBETT JC, 1998, P 1998 INT S SOFTW T
   DEUTSCH A, 1997, P 24 ANN ACM S PRINC, P358
   DINIZ P, 1997, P 9 WORKSH LANG COMP
   EMAMI M, 1994, P ACM SIGPLAN 94 C P, P242
   FAHNDRICH M, 2000, P ACM SIGPLAN C PROG, P253
   Gay D, 2000, LECT NOTES COMPUT SC, V1781, P82
   GAY D, 1998, P ACM SIGPLAN C PROG
   Ghiya R, 1996, INT J PARALLEL PROG, V24, P547
   Gosling James, 1996, The Java Language Specification
   GOYAL D, 2000, THESIS NEW YORK U NE
   GUPTA M, 2000, P EUR C OBJ OR PROGR
   HANNAN J, 1995, P 2 INT STAT AN S
   *IBM CORP, 1997, IBM HIGH PERF COMP J
   *JAV, 2002, JAV MEM MOD MAIL LIS
   LANDI W, 1992, SIGPLAN NOTICES, V27, P235, DOI 10.1145/143103.143137
   LARUS JR, 1988, SIGPLAN NOTICES, V23, P21, DOI 10.1145/960116.53993
   LEE J, 1999, P 1999 ACM SIGPLAN S
   LI ZY, 1987, IEEE T COMPUT, V36, P105, DOI 10.1109/TC.1987.5009454
   LIANG D, 1999, P 7 EUR SOFTW ENG C
   MANSON J, 2001, P ACM 2001 ISCOPE JA
   MARLOWE TJ, 1989, THESIS RUTGERS U NEW
   MIDKIFF SP, 1987, IEEE T COMPUT, V36, P1485, DOI 10.1109/TC.1987.5009499
   OLIVER M, 2000, JAVA POSITIONING PAP
   PARK YG, 1992, P ACM SIGPLAN C PROG, P117
   Pugh W., 1999, Proceedings of the ACM 1999 Java Grande Conference, P89, DOI 10.1145/304065.304106
   REID A, 1999, P WCSSS 99 WORKSH CO
   RUE E, 2000, P ACM SIGPLAN 99 C P, P208
   RUGGIERI C, 1988, P 15 ANN ACM S PRINC, P285
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   VIVIEN F, 2001, P ACM SIGPLAN 01 C P
   WHALEY J, 1999, P ACM SIGPLAN C OBJ
   WILSON RP, 1995, SIGPLAN NOTICES, V30, P1, DOI 10.1145/223428.207111
NR 49
TC 43
Z9 63
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2003
VL 25
IS 6
BP 876
EP 910
DI 10.1145/945885.945892
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 733DN
UT WOS:000185984800004
OA Bronze
DA 2024-07-18
ER

PT J
AU Das, A
   DeYoung, H
   Mordido, A
   Pfenning, F
AF Das, Ankush
   DeYoung, Henry
   Mordido, Andreia
   Pfenning, Frank
TI Nested Session Types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Nested types; polymorphism; type equality
ID DECIDABILITY
AB Session types statically describe communication protocols between concurrent message-passing processes. Unfortunately, parametric polymorphism even in its restricted prenex form is not fully understood in the context of session types. In this article, we present the metatheory of session types extended with prenex polymorphism and, as a result, nested recursive datatypes. Remarkably, we prove that type equality is decidable by exhibiting a reduction to trace equivalence of deterministic first-order grammars. Recognizing the high theoretical complexity of the latter, we also propose a novel type equality algorithm and prove its soundness. We observe that the algorithm is surprisingly efficient and, despite its incompleteness, sufficient for all our examples. We have implemented our ideas by extending the Rast programming language with nested session types. We conclude with several examples illustrating the expressivity of our enhanced type system.
C1 [Das, Ankush; DeYoung, Henry; Pfenning, Frank] Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Mordido, Andreia] Univ Lisbon, Fac Ciencias, LASIGE, Lisbon, Portugal.
   [Das, Ankush] Amazon, 20450 Stevens Creek Blvd, Cupertino, CA 95014 USA.
C3 Carnegie Mellon University; Universidade de Lisboa; Amazon.com
RP Das, A (corresponding author), Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.; Das, A (corresponding author), Amazon, 20450 Stevens Creek Blvd, Cupertino, CA 95014 USA.
EM daankus@amazon.com; hdeyoung@cs.cmu.edu; afmordido@ciencias.ulisboa.pt;
   fp@cs.cmu.edu
OI DeYoung, Henry/0000-0003-1649-9953; Pfenning, Frank/0000-0002-8279-5817
FU Fundacao para a Ciencia e a Tecnologia through the CarnegieMellon
   Portugal Program-Visiting Faculty Program; LASIGE Research Unit
   [UIDB/00408/2020, UIDP/00408/2020]; National Science Foundation
   [1801369, 1845514, 1718276]; project SafeSessions
   [PTDC/CCI-COM/6453/2020]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1845514] Funding
   Source: National Science Foundation
FX Support for this research was provided by the Fundacao para a Ciencia e
   a Tecnologia through the CarnegieMellon Portugal Program-Visiting
   Faculty Program, the project SafeSessions (PTDC/CCI-COM/6453/2020), and
   the LASIGE Research Unit (UIDB/00408/2020 and UIDP/00408/2020), and by
   the National Science Foundation under SaTC Award 1801369, CAREER Award
   1845514 and Grant No. 1718276.
CR Almeida Bernardo, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P39, DOI 10.1007/978-3-030-45237-7_3
   Bergstra Jan A., 1989, Algebraic Methods: Theory, Tools and Applications, V394, P445, DOI [10.1007/BFb0015048, DOI 10.1007/BFB0015048]
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Bono V, 2011, ELECTRON P THEOR COM, P52, DOI 10.4204/EPTCS.59.5
   Bono V, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:17)2012
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2013, LECT NOTES COMPUT SC, V7792, P330, DOI 10.1007/978-3-642-37036-6_19
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Cervesato I, 2009, INFORM COMPUT, V207, P1044, DOI 10.1016/j.ic.2008.11.006
   Connelly R. H., 1995, Mathematical Structures in Computer Science, V5, P381, DOI 10.1017/S0960129500000803
   Dardha O, 2017, INFORM COMPUT, V256, P253, DOI 10.1016/j.ic.2017.06.002
   Dardha O, 2014, ELECTRON PROC THEOR, P27, DOI 10.4204/EPTCS.162.4
   Das Ankush, 2020, PPDP '20: Proceedings of the 22nd International Symposium on Principles and Practice of Declarative Programming, DOI 10.1145/3414080.3414087
   Das A, 2021, LECT NOTES COMPUT SC, V12648, P178, DOI 10.1007/978-3-030-72019-3_7
   Das A, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236786
   Das A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P305, DOI 10.1145/3209108.3209146
   Das Ankush, 2020, 5 INT C FORMAL STRUC, V167, DOI [10.4230/ LIPIcs.FSCD.2020.33, DOI 10.4230/LIPICS.FSCD.2020.33]
   Das Ankush, 2021, arXiv
   Das Ankush, 2020, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V13, P1, DOI [DOI 10.4230/LIPICS.CONCUR.2020.13, 10.4230/LIPIcs.CONCUR.2020.13]
   Das Ankush, 2019, RAST IMPLEMENTATION
   Derakhshan Farzaneh, 2021, ARXIV
   Dyck, 1882, MATH ANN, V20, P1
   Friedman E. P., 1976, Theoretical Computer Science, V1, P297, DOI 10.1016/0304-3975(76)90074-8
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2008, MATH STRUCT COMP SCI, V18, P895, DOI 10.1017/S0960129508006944
   Girard J. Y., 1987, TAPSOFT '87. Proceedings of the International Joint Conference on Theory and Practice of Software Development, P52
   Griffith Dennis Edward, 2016, Ph.D. thesis
   Gupta G, 2007, LECT NOTES COMPUT SC, V4670, P27, DOI 10.1007/978-3-540-74610-2_4
   Henry Patrick, 2013, Implementation and Application of Automata. 18th International Conference, CIAA 2013. Proceedings: LNCS 7982, P169, DOI 10.1007/978-3-642-39274-0_16
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Jancar Petr, 2010, ABS10104760 CORR
   Johann Patricia, 2009, Higher-Order and Symbolic Computation, V22, P155, DOI 10.1007/s10990-009-9047-7
   Keizer AC, 2021, LECT NOTES COMPUT SC, V12648, P375, DOI 10.1007/978-3-030-72019-3_14
   Kobayashi N, 2003, LECT NOTES COMPUT SC, V2757, P439
   Komendantskaya E, 2020, THEOR PRACT LOG PROG, V20, P990, DOI 10.1017/S1471068420000423
   Korenjak A. J., 1966, SWAT, P36, DOI DOI 10.1109/SWAT.1966.22
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   Okasaki Chris, 1996, THESIS MELLON U
   Peng Fu, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P126, DOI 10.1007/978-3-319-29604-3_9
   Pérez JA, 2014, INFORM COMPUT, V239, P254, DOI 10.1016/j.ic.2014.08.001
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Rosu G, 2009, LECT NOTES COMPUT SC, V5728, P127, DOI 10.1007/978-3-642-03741-2_10
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Sénizergues G, 2002, THEOR COMPUT SCI, V281, P555, DOI 10.1016/S0304-3975(02)00027-0
   Solomon Marvin H., 1978, P 5 ACM SIGACTSIGPLA, P31, DOI DOI 10.1145/512760.512765
   Stirling C, 2001, THEOR COMPUT SCI, V255, P1, DOI 10.1016/S0304-3975(00)00389-3
   Takeuchi K., 1994, PARLE '94. Parallel Architectures and Languages Europe. 6th International PARLE Conference Proceedings, P398
   Thiemann P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371135
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
NR 53
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2022
VL 44
IS 3
AR 19
DI 10.1145/3539656
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3V9XX
UT WOS:000842012200007
OA Bronze
DA 2024-07-18
ER

PT J
AU Gharat, PM
   Khedker, UP
   Mycroft, A
AF Gharat, Pritam M.
   Khedker, Uday P.
   Mycroft, Alan
TI Generalized Points-to Graphs: A Precise and Scalable Abstraction for
   Points-to Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Flow- and context-sensitive interprocedural analysis; bottom-up
   interprocedural analysis; points-to analysis; procedure summaries
AB Computing precise (fully flow- and context-sensitive) and exhaustive (as against demand-driven) points-to information is known to be expensive. Top-down approaches require repeated analysis of a procedure for separate contexts. Bottom-up approaches need to model unknown pointees accessed indirectly through pointers that may be defined in the callers and hence do not scale while preserving precision. Therefore, most approaches to precise points-to analysis begin with a scalable but imprecise method and then seek to increase its precision. We take the opposite approach in that we begin with a precise method and increase its scalability. In a nutshell, we create naive but possibly non-scalable procedure summaries and then use novel optimizations to compact them while retaining their soundness and precision.
   For this purpose, we propose a novel abstraction called the generalized points-to graph (GPG), which views points-to relations as memory updates and generalizes them using the counts of indirection levels leaving the unknown pointees implicit. This allows us to construct GPGs as compact representations of bottomup procedure summaries in terms of memory updates and control flow between them. Their compactness is ensured by strength reduction (which reduces the indirection levels), control flow minimization (which removes control flow edges while preserving soundness and precision), and call inlining (which enhances the opportunities of these optimizations).
   The effectiveness of GPGs lies in the fact that they discard as much control flow as possible without losing precision. This is the reason GPGs are very small even for main procedures that contain the effect of the entire program. This allows our implementation to scale to 158 kLoC for C programs.
   At a more general level, GPGs provide a convenient abstraction to represent and transform memory in the presence of pointers. Future investigations can try to combine it with other abstractions for static analyses that can benefit from points-to information.
C1 [Gharat, Pritam M.; Khedker, Uday P.] Indian Inst Technol, Mumbai, Maharashtra, India.
   [Mycroft, Alan] Univ Cambridge, Cambridge, England.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay; University of Cambridge
RP Khedker, UP (corresponding author), Indian Inst Technol, Mumbai, Maharashtra, India.
EM pritamg@cse.iitb.ac.in; uday@cse.iitb.ac.in; Alan.Mycroft@cl.cam.ac.uk
OI Mycroft, Alan/0000-0001-7013-8572; Gharat, Pritam/0000-0002-5961-8142
FU TCS Research Fellowship
FX TP. Gharat was partially supported by TCS Research Fellowship.
CR [Anonymous], 2006, COMPILERS PRINCIPLES
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Bernstein A. J., 1996, IEEE T ELEC COMP, V5, P746
   Buss M, 2010, SCI COMPUT PROGRAM, V75, P921, DOI 10.1016/j.scico.2009.08.002
   Chatterjee R., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P133, DOI 10.1145/292540.292554
   Cheng BC, 2000, ACM SIGPLAN NOTICES, V35, P57, DOI 10.1145/358438.349311
   Dillig I, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P270, DOI 10.1145/1375581.1375615
   EMAMI M, 1994, SIGPLAN NOTICES, V29, P242, DOI 10.1145/773473.178264
   Feng Y, 2015, LECT NOTES COMPUT SC, V9458, P465, DOI 10.1007/978-3-319-26529-2_25
   Gharat Pritam M., 2018, THESIS
   Gharat Pritam M., 2016, P 23 STAT AN S SAS 1
   Hackett Brian., 2006, Proceedings of the 14th ACM SIGSOFT international symposium on Foundations of software engineering, SIGSOFT '06/FSE-14, P69
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Hind M., 2000, Software Engineering Notes, V25, P113, DOI 10.1145/347636.348916
   Hind M, 1998, LECT NOTES COMPUT SC, V1503, P57
   Kahlon V, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P249, DOI 10.1145/1375581.1375613
   Kanvar V, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2931098
   Kaser O., 1993, ACM Letters on Programming Languages and Systems, V2, P151, DOI 10.1145/176454.176510
   Kennedy Ken., 2002, Optimizing compilers for modern architectures: a dependence-based approach
   Khedker U., 2009, Data Flow Analysis: Theory and Practice, V1st
   Khedker Uday P., 2008, P JOINT EUR C THEOR
   Khedker Uday P., 2012, P 19 INT STAT AN S S, DOI [10.1007/978-3-642- 33125- 1_19, DOI 10.1007/978-3-642-33125-1_19]
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Lhotak Ondrej, 2013, Dagstuhl Reports, V3, P91, DOI DOI 10.4230/DAGREP.3.4.91
   Li L, 2013, PROCEEDINGS OF THE ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '13), P85
   Madhavan Ravichandhran, 2012, P 19 INT C STAT AN S, DOI [10.1007/978-3-642- 33125- 1_25, DOI 10.1007/978-3-642-33125-1_25]
   Madhavan Ravichandhran, 2015, Found. Trends Program. Lang., V1, P269
   Muchnick S., 1997, ADV COMPILER DESIGN
   Padhye Rohan., 2013, P 2 ACM SIGPLAN INT, P31
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Ryder BG, 2001, ACM T PROGR LANG SYS, V23, P105, DOI 10.1145/383043.381532
   Sagiv Mooly, 1996, 6 INT JOINT C THEOR
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Shang Lei, 2012, P 10 INT S CODE GENE, P264
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Spath Johannes, 2016, P EUR C OBJ OR PROGR
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Staiger-Stöhr S, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450140
   Sui YL, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P460, DOI 10.1145/2950290.2950296
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Whaley J, 1999, ACM SIGPLAN NOTICES, V34, P187, DOI 10.1145/320385.320400
   Wilson R. P., 1995, P ACM SIGPLAN C PROG
   Yan D., 2012, Proceedings of the ACM SIGPLAN International Workshop on State of the Art in Java Program analysis, P9
   Yorsh G, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P221, DOI 10.1145/1328438.1328467
   Yu HT, 2010, INT SYM CODE GENER, P218
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P249, DOI [10.1145/2666356.2594328, 10.1145/2594291.2594328]
   Zhu JW, 2005, IEEE T COMPUT AID D, V24, P516, DOI 10.1109/TCAD.2005.844092
NR 48
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2020
VL 42
IS 2
AR 8
DI 10.1145/3382092
PG 78
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OJ1LU
UT WOS:000583729800003
DA 2024-07-18
ER

PT J
AU Cotton-Barratt, C
   Murawski, AS
   Ong, CHL
AF Cotton-Barratt, Conrad
   Murawski, Andrzej S.
   Ong, C-H Luke
TI ML, Visibly Pushdown Class Memory Automata, and Extended Branching
   Vector Addition Systems with States
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Higher-order types; game semantics; full abstraction; vector addition
   systems; automata over infinite alphabets
ID FULL ABSTRACTION; IDEALIZED ALGOL; REGULARITY; NOTIONS
AB We prove that the observational equivalence problem for a finitary fragment of the programming langauge ML is recursively equivalent to the reachability problem for extended branching vector addition systems with states (EBVASS). This result has two natural and independent parts. We first prove that the observational equivalence problem is equivalent to the emptiness problem for a new class of class memory automata equipped with a visibly pushdown stack, called Visibly Pushdown Class Memory Automata (VPCMA). Our proof uses the fully abstract game semantics of the language. We then prove that the VPCMA emptiness problem is equivalent to the reachability problem for EBVASS. The results of this article complete our programme to give an automata classification of the ML types with respect to the observational equivalence problem for closed terms.
C1 [Cotton-Barratt, Conrad] Jump Trading London, London, England.
   [Murawski, Andrzej S.; Ong, C-H Luke] Univ Oxford, Dept Comp Sci, Parks Rd, Oxford OX1 3QD, England.
C3 University of Oxford
RP Cotton-Barratt, C (corresponding author), Jumping Trading Ltd, 1 London Wall, London EC2Y 5EA, England.
EM conrad@cottonbarratt.com; andrzej.murawski@cs.ox.ac.uk;
   luke.ong@cs.ox.ac.uk
FU EPSRC Doctoral Training Grant; Royal Society Leverhulme Trust
   [LT170023]; EPSRC [EP/M023974/1]; Merton College Research Fund; EPSRC
   [EP/M023974/1] Funding Source: UKRI
FX Conrad Cotton-Barratt's work was supported by an EPSRC Doctoral Training
   Grant. Andrzej Murawski's work was partially supported by a Royal
   Society Leverhulme Trust Senior Research Fellowship (LT170023). Luke
   Ong's work was partially supported by EPSRC grant EP/M023974/1 and
   Merton College Research Fund.
CR Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   Abramsky S, 1998, LECT NOTES COMPUT SC, V1414, P1, DOI 10.1007/BFb0028004
   Alur R., 2004, P 36 ANN ACM S THEOR, P202, DOI [DOI 10.1145/1007352.1007390, 10.1145/1007352.1007390]
   [Anonymous], 1996, ELECT NOTES THEOR CO, DOI DOI 10.1016/S1571-0661(05)80398-6
   Araki T., 1976, Theoretical Computer Science, V3, P85, DOI 10.1016/0304-3975(76)90067-0
   Björklund H, 2007, LECT NOTES COMPUT SC, V4639, P88
   Björklund H, 2010, THEOR COMPUT SCI, V411, P702, DOI 10.1016/j.tcs.2009.10.009
   Cotton-Barratt Conrad, 2015, Language and Automata Theory and Applications. 9th International Conference, LATA 2015. Proceedings: LNCS 8977, P188, DOI 10.1007/978-3-319-15579-1_14
   Cotton-Barratt C, 2015, LECT NOTES COMPUT SC, V9034, P249, DOI 10.1007/978-3-662-46678-0_16
   Cotton-Barratt Conrad, 2017, THESIS
   Cotton-Barratt Conrad, 2017, LECT NOTES COMPUTER, V8977, P188
   de Groote P, 2004, IEEE S LOG, P64, DOI 10.1109/LICS.2004.1319601
   Ghica DR, 2000, LECT NOTES COMPUT SC, V1853, P103
   Godlin B, 2009, DES AUT CON, P466
   Honda K, 1999, THEOR COMPUT SCI, V221, P393, DOI 10.1016/S0304-3975(99)00039-0
   Hopkins D, 2011, LECT NOTES COMPUT SC, V6756, P149, DOI 10.1007/978-3-642-22012-8_11
   Hopkins David, 2012, THESIS
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Jacquemard F, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:3)2016
   Lazic R, 2015, ACM T COMPUT LOG, V16, DOI 10.1145/2733375
   Murawski AS, 2015, LECT NOTES COMPUT SC, V9364, P411, DOI 10.1007/978-3-319-24953-7_30
   Murawski AS, 2012, LECT NOTES COMPUT SC, V7392, P312, DOI 10.1007/978-3-642-31585-5_30
   Murawski AS, 2011, LECT NOTES COMPUT SC, V6602, P419, DOI 10.1007/978-3-642-19718-5_22
   Murawski AS, 2009, LECT NOTES COMPUT SC, V5504, P32
   Murawski AS, 2005, LECT NOTES COMPUT SC, V3580, P917
   Murawski AS, 2005, THEOR COMPUT SCI, V338, P315, DOI 10.1016/j.tcs.2004.12.036
   Ong CHL, 2002, IEEE S LOG, P245, DOI 10.1109/LICS.2002.1029833
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Reynolds J. C., 1981, Algorithmic Languages. Proceedings of the International Symposium, P345
NR 29
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2019
VL 41
IS 2
SI SI
AR 11
DI 10.1145/3310338
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JT8FU
UT WOS:000501220300005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Jeon, M
   Jeong, S
   Cha, S
   Oh, H
AF Jeon, Minseok
   Jeong, Sehun
   Cha, Sungdeok
   Oh, Hakjoo
TI A Machine-Learning Algorithm with Disjunctive Model for Data-Driven
   Program Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Data-driven program analysis; static analysis; context-sensitivity;
   flow-sensitivity
ID POINTS-TO ANALYSIS; CONTEXT-SENSITIVITY; STRATEGY; PRECISE; OCTAGON
AB We present a new machine-learning algorithm with disjunctive model for data-driven program analysis. One major challenge in static program analysis is a substantial amount of manual effort required for tuning the analysis performance. Recently, data-driven program analysis has emerged to address this challenge by automatically adjusting the analysis based on data through a learning algorithm. Although this new approach has proven promising for various program analysis tasks, its effectiveness has been limited due to simple-minded learning models and algorithms that are unable to capture sophisticated, in particular disjunctive, program properties. To overcome this shortcoming, this article presents a new disjunctive model for data-driven program analysis as well as a learning algorithm to find the model parameters. Our model uses Boolean formulas over atomic features and therefore is able to express nonlinear combinations of program properties. A key technical challenge is to efficiently determine a set of good Boolean formulas, as brute-force search would simply be impractical. We present a stepwise and greedy algorithm that efficiently learns Boolean formulas. We show the effectiveness and generality of our algorithm with two static analyzers: context-sensitive points-to analysis for Java and flow-sensitive interval analysis for C. Experimental results show that our automated technique significantly improves the performance of the state-of-the-art techniques including ones hand-crafted by human experts.
C1 [Jeon, Minseok; Jeong, Sehun; Cha, Sungdeok; Oh, Hakjoo] Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
C3 Korea University
RP Oh, H (corresponding author), Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
EM minseok_jeon@korea.ac.kr; gifaranga@korea.ac.kr; scha@korea.ac.kr;
   hakjoo_oh@korea.ac.kr
RI Jeon, Minseok/ISB-1622-2023; ‍, 오학주[ 부교수 / 컴퓨터학과 ]/AAW-5194-2020
OI Jeon, Minseok/0000-0001-8320-8509; 
FU Samsung Research Funding & Incubation Center of Samsung Electronics
   [SRFC-IT1701-09]; Institute for Information& communications Technology
   Promotion(IITP) - Korea government(MSIT)
FX This work was supported by Samsung Research Funding & Incubation Center
   of Samsung Electronics under Project Number SRFC-IT1701-09. Thiswork was
   supported by Institute for Information& communications Technology
   Promotion(IITP) grant funded by the Korea government(MSIT)
   (No.2017-0-00184, Self-Learning Cyber Immune Technology Development).
CR Agesen Ole, 1994, CONSTRAINT BASED TYP, P78, DOI [10.1007/3-540-58485-4_34, DOI 10.1007/3-540-58485-4_34]
   Antoniadis Tony, 2017, P 6 ACM SIGPLAN INT, P25, DOI [DOI 10.1145/3088515.3088522, 10.1145/3088515.3088522]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Cha S, 2016, LECT NOTES COMPUT SC, V10017, P25, DOI 10.1007/978-3-319-47958-3_2
   Chae KS, 2017, FRONT HUM NEUROSCI, V11, DOI 10.3389/fnhum.2017.00478
   Chatterjee R., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P133, DOI 10.1145/292540.292554
   Grove D, 1997, ACM SIGPLAN NOTICES, V32, P108, DOI 10.1145/263700.264352
   Guyer SZ, 2003, LECT NOTES COMPUT SC, V2694, P214
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Heo K, 2016, LECT NOTES COMPUT SC, V9837, P237, DOI 10.1007/978-3-662-53413-7_12
   Heo Kihong, 2017, P 39 INT C SOFTW ENG
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Kastrinis G, 2013, LECT NOTES COMPUT SC, V7791, P41, DOI 10.1007/978-3-642-37051-9_3
   Heo K, 2018, FORM METHOD SYST DES, V53, P189, DOI 10.1007/s10703-017-0306-7
   Lee W, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3095021
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Lhoták O, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391987
   Li HS, 2017, ACM SIGPLAN NOTICES, V52, P32, DOI 10.1145/3093333.3009881
   Liang DL, 1999, LECT NOTES COMPUT SC, V1687, P199, DOI 10.1145/318774.318943
   Liang Donglin, 2005, ACM SIGSOFT SOFTWARE, P6, DOI 10.1145/1108792.1108797
   Liang P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/1926385.1926391
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Oh H, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2590811
   Oh H, 2015, ACM SIGPLAN NOTICES, V50, P572, DOI [10.1145/2858965.2814309, 10.1145/2814270.2814309]
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Oh H, 2012, ACM SIGPLAN NOTICES, V47, P229, DOI 10.1145/2345156.2254092
   Oh H, 2009, LECT NOTES COMPUT SC, V5904, P14
   Park JH, 2017, ANIM NUTR FEED TECHN, V17, P1, DOI 10.5958/0974-181X.2017.00001.4
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   RUF E, 1995, SIGPLAN NOTICES, V30, P13, DOI 10.1145/223428.207112
   Ruf E, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/358438.349327
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smaragdakis Y, 2011, P 38 ANN ACM SIGPLAN, DOI DOI 10.1145/1926385.1926390
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Tripp O, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P87, DOI 10.1145/1542476.1542486
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Wei S, 2015, P 29 EUR C OBJ OR PR
   WILSON RP, 1995, SIGPLAN NOTICES, V30, P1, DOI 10.1145/223428.207111
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
NR 48
TC 15
Z9 16
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2019
VL 41
IS 2
SI SI
AR 13
DI 10.1145/3293607
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JT8FU
UT WOS:000501220300007
DA 2024-07-18
ER

PT J
AU Chatterjee, K
   Fu, HF
   Novotny, P
   Hasheminezhad, R
AF Chatterjee, Krishnendu
   Fu, Hongfei
   Novotny, Petr
   Hasheminezhad, Rouzbeh
TI Algorithmic Analysis of Qualitative and Quantitative Termination
   Problems for Affine Probabilistic Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Probabilistic programs; termination; ranking supermartingale;
   concentration
ID LINEAR RANKING; INEQUALITIES
AB In this article, we consider the termination problem of probabilistic programs with real-valued variables. The questions concerned are: qualitative ones that ask (i) whether the program terminates with probability 1 (almost-sure termination) and (ii) whether the expected termination time is finite (finite termination); and quantitative ones that ask (i) to approximate the expected termination time (expectation problem) and (ii) to compute a bound B such that the probability not to terminate after B steps decreases exponentially (concentration problem). To solve these questions, we utilize the notion of ranking supermartingales, which is a powerful approach for proving termination of probabilistic programs. In detail, we focus on algorithmic synthesis of linear ranking-supermartingales over affine probabilistic programs (Apps) with both angelic and demonic non-determinism. An important subclass of Apps is LRApp which is defined as the class of all Apps over which a linear ranking-supermartingale exists.
   Our main contributions are as follows. Firstly, we show that the membership problem of LRApp (i) can be decided in polynomial time for Apps with at most demonic non-determinism, and (ii) is NP-hard and in PSPACE for Apps with angelic non-determinism. Moreover, the NP-hardness result holds already for Apps without probability and demonic non-determinism. Secondly, we show that the concentration problem over LRApp can be solved in the same complexity as for the membership problem of LRApp. Finally, we show that the expectation problem over LRApp can be solved in 2EXPTIME and is PSPACE-hard even for Apps without probability and non-determinism (i.e., deterministic programs). Our experimental results demonstrate the effectiveness of our approach to answer the qualitative and quantitative questions over Apps with at most demonic non-determinism.
C1 [Chatterjee, Krishnendu; Novotny, Petr] IST Austria, Chatterjee Grp, Campus 1, A-3400 Klosterneuburg, Austria.
   [Fu, Hongfei] Shanghai Jiao Tong Univ, Room 1408-1,Software Bldg,800 Dongchuan Rd, Shanghai, Peoples R China.
   [Hasheminezhad, Rouzbeh] Sharid Univ Technol, Azadi Ave,POB 11365-11155, Tehran, Iran.
C3 Institute of Science & Technology - Austria; Shanghai Jiao Tong
   University
RP Fu, HF (corresponding author), Shanghai Jiao Tong Univ, Room 1408-1,Software Bldg,800 Dongchuan Rd, Shanghai, Peoples R China.
EM Krishnendu.Chatterjee@ist.ac.at; fuhf@cs.sjtu.edu.cn;
   petr.novotny@ist.ac.at; hasheminezhad@ce.sharif.edu
RI Novotny, Petr/GWC-1142-2022; Novotny, Petr/ABE-5786-2021
OI Novotny, Petr/0000-0002-5026-4392; Novotny, Petr/0000-0002-5026-4392;
   Chatterjee, Krishnendu/0000-0002-4561-241X; Fu,
   Hongfei/0000-0002-7947-3446
FU Austrian Science Fund (FWF) [P23499-N23]; FWF NFN Grant [S11407-N23];
   ERC Start grant [279307]; People Programme (Marie Curie Actions) of the
   European Union's Seventh Framework Programme (FP7) under REA Grant
   [291734]; Natural Science Foundation of China (NSFC) [61532019]
FX The research was partly supported by Austrian Science Fund (FWF) Grant
   No P23499-N23, FWF NFN Grant No S11407-N23 (RiSE/SHiNE), and ERC Start
   grant (279307: Graph Games). The research leading to these results has
   received funding from the People Programme (Marie Curie Actions) of the
   European Union's Seventh Framework Programme (FP7/2007-2013) under REA
   Grant Agreement No. [291734]. Hongfei Fu is supported by the Natural
   Science Foundation of China (NSFC) under Grant No. 61532019.
CR [Anonymous], 1960, DYNAMIC PROGRAMMING
   [Anonymous], 2010, IBM ILOG CPLEX Optimizer
   [Anonymous], 1936, THESIS
   Azuma Kazuoki, 1967, TOHOKU MATH J, V19, P357, DOI [DOI 10.2748/TMJ/1178243286, 10.2748/tmj/1178243286, 10.2748/tmj/1178, DOI 10.2748/TMJ/1178]
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   BENNETT G, 1962, J AM STAT ASSOC, V57, P33, DOI 10.2307/2282438
   Billingsley P., 1995, PROBABILITY MEASURE
   Bockmayr Alexander, 2001, HDB AUTOMATED REASON, P751
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3580, P1349
   Brazdil T., 2012, FMSD, V43, P124
   Canny J., 1988, Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, P460, DOI 10.1145/62212.62257
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Colon M. A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P67
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dubhashi DP, 2009, CONCENTRATION OF MEASURE FOR THE ANALYSIS OF RANDOMIZED ALGORITHMS, P1
   Durrett R., 1996, PROBABILITY THEORY E
   Esparza J, 2005, IEEE S LOG, P117
   Esparza Javier, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P123, DOI 10.1007/978-3-642-31424-7_14
   Chung F, 2006, INTERNET MATH, V3, P79, DOI 10.1080/15427951.2006.10129115
   Farkas J., 1894, Mathematikaies Termeszettudomanyi Ertesito, V12
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   FOSTER FG, 1953, ANN MATH STAT, V24, P355, DOI 10.1214/aoms/1177728976
   HART S, 1985, SIAM J COMPUT, V14, P991, DOI 10.1137/0214070
   HOEFFDING W, 1963, J AM STAT ASSOC, V58, P13, DOI 10.2307/2282952
   Kaelbling LP, 1998, ARTIF INTELL, V101, P99, DOI 10.1016/S0004-3702(98)00023-X
   Kaelbling LP, 1996, J ARTIF INTELL RES, V4, P237, DOI 10.1613/jair.301
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   KEMENY JG, 1966, DENUMERABLE MARKOV C
   Kress-Gazit H, 2009, IEEE T ROBOT, V25, P1370, DOI 10.1109/TRO.2009.2030225
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   McDiarmid C., 1998, PROBABILISTIC METHOD, V16, P195, DOI DOI 10.1007/978-3-662-12788-9_6
   McIver Annabelle, 2004, Lecture Notes in Computer Science, V3167, P123, DOI [10.1007/11889229_4, DOI 10.1007/11889229_4]
   McIver Annabelle., 2005, MG COMP SCI
   Meyn S., 2009, MARKOV CHAINS STOCHA
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2126, P111
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   Osborne Martin J, 1994, COURSE GAME THEORY
   Paz A., 1971, INTRO PROBABILISTIC
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   RABIN MO, 1963, INFORM CONTROL, V6, P230, DOI 10.1016/S0019-9958(63)90290-0
   Rosenthal JS., 2006, 1 LOOK RIGOROUS PROB
   Sankaranarayanan S, 2013, ACM SIGPLAN NOTICES, V48, P447, DOI 10.1145/2499370.2462179
   Schrijver A., 2003, Combinatorial Optimization: Polyhedra and Efficiency, V24
   Schrijver Alexander, 1999, WILEY INTERSCIENCE S
   SHARIR M, 1984, SIAM J COMPUT, V13, P292, DOI 10.1137/0213021
   Sohn K., 1991, Proceedings of the Tenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P216, DOI 10.1145/113413.113433
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   VAVASIS SA, 1992, MATH PROGRAM, V57, P279, DOI 10.1007/BF01581085
   Williams D., 1991, Probability with Martingales
NR 56
TC 17
Z9 17
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2018
VL 40
IS 2
AR 7
DI 10.1145/3174800
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI6TB
UT WOS:000434634500003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Biernacki, D
   Danvy, O
   Millikin, K
AF Biernacki, Dariusz
   Danvy, Olivier
   Millikin, Kevin
TI A Dynamic Continuation-Passing Style for Dynamic Delimited Continuations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Theory; Delimited continuations
AB We put a preexisting definitional abstract machine for dynamic delimited continuations in defunctionalized form, and we present the consequences of this adjustment. We first prove the correctness of the adjusted abstract machine. Because it is in defunctionalized form, we can refunctionalize it into a higher-order evaluation function. This evaluation function, which is compositional, is in continuation+state-passing style and threads a trail of delimited continuations and a meta-continuation. Since this style accounts for dynamic delimited continuations, we refer to it as "dynamic continuation-passing style" and we present the corresponding dynamic CPS transformation. We show that the notion of computation induced by dynamic CPS takes the form of a continuation monad with a recursive answer type. This continuation monad suggests a new simulation of dynamic delimited continuations in terms of static ones. Finally, we present new applications of dynamic delimited continuations, including a meta-circular evaluator. The significance of the present work is that the computational artifacts surrounding dynamic CPS are not independent designs: they are mechanical consequences of having put the definitional abstract machine in defunctionalized form.
C1 [Biernacki, Dariusz] Univ Wroclaw, Inst Comp Sci, PL-50383 Wroclaw, Poland.
   [Danvy, Olivier] Aarhus Univ, Dept Comp Sci, DK-8200 Aarhus N, Denmark.
   [Millikin, Kevin] Google, DK-8200 Aarhus N, Denmark.
C3 University of Wroclaw; Aarhus University; Google Incorporated
RP Biernacki, D (corresponding author), Univ Wroclaw, Inst Comp Sci, Joliot Curie 15, PL-50383 Wroclaw, Poland.
EM dabi@cs.uni.wroc.pl; danvy@cs.au.dk; kmillikin@google.com
OI Biernacki, Dariusz/0000-0002-1477-4635
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   Ager Mads Sig, 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, P8, DOI DOI 10.1145/888251.888254
   Ariola ZM, 2012, LECT NOTES COMPUT SC, V7294, P32, DOI 10.1007/978-3-642-29822-6_6
   Asai K, 2007, LECT NOTES COMPUT SC, V4807, P239
   Biernacka M, 2007, THEOR COMPUT SCI, V375, P76, DOI 10.1016/j.tcs.2006.12.028
   Biernacki D, 2006, SCI COMPUT PROGRAM, V60, P274, DOI 10.1016/j.scico.2006.01.002
   BIERNACKI D, 2005, THESIS AARHUS U AARH
   Biernacki D, 2006, J FUNCT PROGRAM, V16, P269, DOI 10.1017/S0956796805005782
   BOEHM HJ, 1994, P 21 ANN ACM S PRINC
   Cartwright Robert ( Corky), 1988, P 1998 ACM C LISP FU
   Chung-chieh Shan, 2007, Higher-Order and Symbolic Computation, V20, P371, DOI 10.1007/s10990-007-9010-4
   Clinger W. D., 1985, Algebraic Methods in Semantics, P237
   Danvy, 2006, THESIS AARHUS U AARH
   Danvy O., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P327, DOI 10.1145/62678.62725
   Danvy O., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P299, DOI 10.1145/141471.141564
   DANVY O, 1994, SCI COMPUT PROGRAM, V22, P183, DOI 10.1016/0167-6423(94)00003-4
   Danvy O, 2000, THEOR COMPUT SCI, V248, P243, DOI 10.1016/S0304-3975(00)00054-2
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O., 2008, LOG METH COMPUT SCI, V4, P1
   Danvy O, 2009, SCI COMPUT PROGRAM, V74, P534, DOI 10.1016/j.scico.2007.10.007
   Danvy Olivier, 1991, CIS923 KANS STAT U
   Danvy Olivier, 1989, 8912 DIKU U COP COMP
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   Downen P, 2012, LECT NOTES COMPUT SC, V7211, P234, DOI 10.1007/978-3-642-28869-2_12
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   FELLEISEN M, 1987, COMPUT LANG, V12, P197, DOI 10.1016/0096-0551(87)90022-1
   Felleisen M., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P52, DOI 10.1145/62678.62684
   FELLEISEN M, 1987, 216 IND U COMP SCI D
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   FERRANTE J, 1988, P 15 ANN ACM S PRINC
   FILINSKI A., 1996, CMUCS96119
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Harper R., 1993, Journal of Functional Programming, V3, P465, DOI 10.1017/S095679680000085X
   Hatcliff J., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P458, DOI 10.1145/174675.178053
   HIEB R, 1990, SIGPLAN NOTICES, V25, P128
   Hieb Robert, 1993, LISP SYMBOLIC COMPUT, V5, P295
   Johnson G. F., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P158, DOI 10.1145/73560.73574
   Kameyama Y, 2004, LECT NOTES COMPUT SC, V3210, P442
   Kameyama Y, 2003, ACM SIGPLAN NOTICES, V38, P177, DOI 10.1145/944746.944722
   Kameyama Y, 2008, LECT NOTES COMPUT SC, V4989, P239
   KISELYOV O, 2005, 611 IND U COMP SCI D
   Materzok M, 2011, ACM SIGPLAN NOTICES, V46, P81, DOI 10.1145/2034574.2034786
   Materzok Marek, 2014, THESIS U WROCLAW WRO
   MILLIKIN K, 2007, THESIS AARHUS U AARH
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moreau L., 1994, Programming Language Implementation and Logic Programming. 6th International Symposium, PLILP '94. Proceedings, P182
   Murthy C., 1992, P 1 ACM SIGPLAN WORK, P49
   QUEINNEC C, 1991, P 18 ANN ACM S PRINC, P174, DOI DOI 10.1145/99583.99610
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   SITARAM D, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P161, DOI 10.1145/91556.91626
   Sitaram D., 1990, LISP and Symbolic Computation, V3, P67, DOI 10.1007/BF01806126
   Strachey Christopher, 1976, THEORY PROGRAMMING L
   Wadler P., 1994, LISP and Symbolic Computation, V7, P39, DOI 10.1007/BF01019944
   Wadler Philip, 1992, MATH STRUCTURES COMP, V2, P461, DOI [DOI 10.1017/S0960129500001560, DOI 10.1016/0304-3975(75)90017-1]
   Wand M., 1988, LISP and Symbolic Computation, V1, P11, DOI 10.1007/BF01806174
   WAND M, 1990, P 1990 ACM C LISP FU
NR 59
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2015
VL 38
IS 1
AR 2
DI 10.1145/2794078
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CU1EB
UT WOS:000363261400002
OA Green Published
DA 2024-07-18
ER

PT J
AU Bodden, E
   Lam, P
   Hendren, L
AF Bodden, Eric
   Lam, Patrick
   Hendren, Laurie
TI Partially Evaluating Finite-State Runtime Monitors Ahead of Time
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Experimentation; Performance; Verification; Typestate
   analysis; static analysis; runtime monitoring
AB Finite-state properties account for an important class of program properties, typically related to the order of operations invoked on objects. Many library implementations therefore include manually written finite-state monitors to detect violations of finite-state properties at runtime. Researchers have recently proposed the explicit specification of finite-state properties and automatic generation of monitors from the specification. However, runtime monitoring only shows the presence of violations, and typically cannot prove their absence. Moreover, inserting a runtime monitor into a program under test can slow down the program by several orders of magnitude.
   In this work, we therefore present a set of four static whole-program analyses that partially evaluate runtime monitors at compile time, with increasing cost and precision. As we show, ahead-of-time evaluation can often evaluate the monitor completely statically. This may prove that the program cannot violate the property on any execution or may prove that violations do exist. In the remaining cases, the partial evaluation converts the runtime monitor into a residual monitor. This monitor only receives events from program locations that the analyses failed to prove irrelevant. This makes the residual monitor much more efficient than a full monitor, while still capturing all property violations at runtime.
   We implemented the analyses in CLARA, a novel framework for the partial evaluation of AspectJ-based runtime monitors, and validated our approach by applying CLARA to finite-state properties over several large-scale Java programs. CLARA proved that most of the programs never violate our example properties. Some programs required monitoring, but in those cases CLARA could often reduce the monitoring overhead to below 10%. We observed that several programs did violate the stated properties.
C1 [Bodden, Eric] Tech Univ Darmstadt, Darmstadt, Germany.
   [Lam, Patrick] Univ Waterloo, Waterloo, ON N2L 3G1, Canada.
   [Hendren, Laurie] McGill Univ, Montreal, PQ H3A 2T5, Canada.
C3 Technical University of Darmstadt; University of Waterloo; McGill
   University
RP Bodden, E (corresponding author), Tech Univ Darmstadt, Darmstadt, Germany.
EM p.lam@ece.uwaterloo.ca
RI Bodden, Eric/AAE-1365-2021
OI Bodden, Eric/0000-0003-3470-3647
FU Canada's Natural Science and Engineering Research Council; German
   Federal Ministry of Education and Research (BMBF) within EC SPRIDE;
   Hessian LOEWE excellence initiative within CASED
FX This work was supported in part by Canada's Natural Science and
   Engineering Research Council, the German Federal Ministry of Education
   and Research (BMBF) within EC SPRIDE, and by the Hessian LOEWE
   excellence initiative within CASED.
CR Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   [Anonymous], 2005, PMD applied
   [Anonymous], THESIS RWTH AACHEN U
   [Anonymous], 2006, P 14 ACM SIGSOFT INT
   Avgustinov P., 2005, ASPECT ORIENTED SYST, P87
   AVGUSTINOV P, 2006, ABC20061
   Avgustinov P, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P589
   BATORY D., 2010, LECT NOTES COMPUTER
   Bierhoff K, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P301
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden E., 2010, Proceedings of the 32nd ACM/IEEE international Conference on Software Engineering, P5
   BODDEN E., 2008, VISIONS COMPUTER SCI
   Bodden E., 2008, P 16 ACM SIGSOFT INT, P36, DOI [10.1145/1453101.1453109, DOI 10.1145/1453101.1453109]
   BODDEN E, 2009, THESIS MCGILL U
   Bodden E, 2007, LECT NOTES COMPUT SC, V4609, P525
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bodden E, 2010, LECT NOTES COMPUT SC, V6418, P74, DOI 10.1007/978-3-642-16612-9_8
   Bodden E, 2010, J LOGIC COMPUT, V20, P707, DOI 10.1093/logcom/exn077
   Bodden E, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P3
   Brzozowski J.A., 1962, Microwave Research Institute Symposia Series, V12, P529
   Chen F, 2009, LECT NOTES COMPUT SC, V5505, P246, DOI 10.1007/978-3-642-00768-2_23
   Chen F, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P569
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   Dor N., 2004, Software Engineering Notes, V29, P12, DOI 10.1145/1013886.1007515
   Drossopoulou S, 2002, ACM T PROGR LANG SYS, V24, P153, DOI 10.1145/514952.514955
   Dwyer MatthewB., 2007, Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering, P124
   Fink Stephen., 2006, INT S SOFTWARE TESTI, P133, DOI DOI 10.1145/1146238.1146254
   Goldsmith S, 2005, ACM SIGPLAN NOTICES, V40, P385, DOI 10.1145/1103845.1094841
   Horwitz S., 1995, SIGSOFT Software Engineering Notes, V20, P104, DOI 10.1145/222132.222146
   Hovemeyer David., 2004, ACM Conference on Object-Oriented Programming Systems, Lan-guages, and Applications, OOPSLA '04, P132
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   KRUGER I, 2006, P 2006 IEEE INT C IN, P51
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Martin Michael., 2005, OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference on Object oriented programming systems languages and applications, P365
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   NAEEM N. A., 2008, P C OBJ OR PROGR SYS, P347
   Rungta N, 2009, LECT NOTES COMPUT SC, V5578, P174, DOI 10.1007/978-3-642-02652-2_16
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
NR 41
TC 12
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2012
VL 34
IS 2
AR 7
DI 10.1145/2220365.2220366
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 968JW
UT WOS:000305977300001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Sneyers, J
   Schrijvers, T
   Demoen, B
AF Sneyers, Jon
   Schrijvers, Tom
   Demoen, Bart
TI The Computational Power and Complexity of Constraint Handling Rules
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 2nd Workshop on Constraint Handling Rules (CHR 05)
CY OCT 05, 2005
CL Sitges, SPAIN
DE Languages; Algorithms; Theory; Performance; Experimentation; Constraint
   Handling Rules; complexity; constant factors
ID ALGORITHM
AB Constraint Handling Rules (CHR) is a high-level rule-based programming language which is increasingly used for general-purpose programming. We introduce the CHR machine, a model of computation based on the operational semantics of CHR. Its computational power and time complexity properties are compared to those of the well-understood Turing machine and Random Access Memory machine. This allows us to prove the interesting result that every algorithm can be implemented in CHR with the best known time and space complexity. We also investigate the practical relevance of this result and the constant factors involved. Finally we expand the scope of the discussion to other (declarative) programming languages.
C1 [Sneyers, Jon; Schrijvers, Tom; Demoen, Bart] Katholieke Univ Leuven, Dept Comp Sci, B-3001 Heverlee, Belgium.
C3 KU Leuven
RP Sneyers, J (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Celestijnenlaan 200A, B-3001 Heverlee, Belgium.
EM jon.sneyers@cs.kuleuven.be; tom.schrijvers@cs.kuleuven.be;
   bart.demoen@cs.kuleuven.be
RI Schrijvers, Tom/A-6269-2009; Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
CR ADELSONVELSKII GM, 1962, DOKL AKAD NAUK SSSR+, V146, P263
   Aho A.V., 1975, DESIGN ANAL COMPUTER
   Cherkassky BV, 1996, MATH PROGRAM, V73, P129, DOI 10.1007/BF02592101
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Clocksin W.F., 1984, PROGRAMMING PROLOG
   De Koninck L, 2007, LECT NOTES COMPUT SC, V4670, P209
   Dijkstra E. W., 1959, NUMER MATH, V1, P269, DOI [10.1007/BF01386390, DOI 10.1007/BF01386390]
   Duck GJ, 2004, LECT NOTES COMPUT SC, V3132, P90, DOI 10.1007/978-3-540-27775-0_7
   DUCK GJ, 2005, THESIS U MELBOURNE V
   DUCK GJ, 2006, P 3 WORKSH CONSTR HA, P61
   DUCK GJ, 2005, P 2 WORKSH CONSTR HA, P109
   Eker S, 2003, LECT NOTES COMPUT SC, V2706, P14
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   FREDMAN ML, 1987, J ACM, V34, P596, DOI 10.1145/28869.28874
   Friedman-Hill E., 2003, Jess in Action: Java Rule-Based Systems
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   FRUHWIRTH T, 1992, ECRC9218 EUR COMP IN
   FRUHWIRTH T, 2001, ELECT NOTES THEORETI, V59, P185
   Fruhwirth T.W., 2009, Constraint Handling Rules
   Fruhwirth Thom., 2003, COG TECH, DOI 10.1007/978-3-662-05138-2
   Fruhwirth Thom W., 2002, P 8 INT C PRINC KNOW, P547, DOI [10.1016/S1571-0661(04)00288-9, DOI 10.1016/S1571-0661(04)00288-9]
   Ganzinger H, 2002, LECT NOTES COMPUT SC, V2401, P209, DOI 10.1007/3-540-45619-8_15
   Giarratano J., 1994, EXPERT SYSTEMS PRINC, V2nd
   HARTMANIS J, 1965, T AM MATH SOC, V117, P285, DOI 10.2307/1994208
   Holzbaur C, 2005, THEOR PRACT LOG PROG, V5, P503, DOI 10.1017/S1471068405002413
   Holzbaur C, 1999, LECT NOTES COMPUT SC, V1702, P117
   HOLZBAUR C, 1998, TR9801 OST FORSCH AR
   Hopcroft JE., 2008, Introduction to automata theory, languages, and computation
   Hudak Paul., 2007, Proceedings of the Third ACM SIGPLAN Conference on History of Programming Languages. Ed. by, P1, DOI DOI 10.1145/1238844.1238856
   Marriott K., 1998, PROGRAMMING CONSTRAI
   MAZUR N, 2004, THESIS K U LEUVEN LE
   MIRANKER DP, 1990, PROCEEDINGS : EIGHTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P685
   MORRISON DR, 1968, J ACM, V15, P514, DOI 10.1145/321479.321481
   Okasaki C., 1998, WORKSHOP ML, P77
   Savage JohnE., 1998, Models of Computation
   SAVITCH WJ, 1978, INTERFACES COMPUTER, V99, P1
   SCHRIJVERS T, 2005, THESIS K U LEUVEN LE
   Schrijvers T., 2004, P 1 WORKSH CONSTR HA
   SCHRIJVERS T, 2006, THEOR PRACT LOG PROG, V6, P1
   SNEYERS J, 2009, THEORY PRACT L UNPUB
   SNEYERS J, 2006, P 20 WORKSH LOG PROG
   SNEYERS J, 2008, P 5 WORKSH CONSTR HA
   Sneyers J, 2006, LECT NOTES COMPUT SC, V4079, P72, DOI 10.1007/11799573_8
   Sneyers J, 2008, LECT NOTES COMPUT SC, V5366, P759, DOI 10.1007/978-3-540-89982-2_72
   Somogyi Z, 1996, J LOGIC PROGRAM, V29, P17, DOI 10.1016/S0743-1066(96)00068-4
   TARJAN RE, 1984, J ACM, V31, P245, DOI 10.1145/62.2160
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
   van Emde Boas P., 1990, Handbook of Theoretical Computer Science A
   VANWEERT P, 2005, P 2 WORKSH CONSTR HA, P47
   VANWEERT P, 2006, P 3 WORKSH CONSTR HA, P125
   Wuille Pieter., 2007, C. InWorkshop on Constraint Handling Rules, P123
NR 51
TC 14
Z9 15
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD FEB
PY 2009
VL 31
IS 2
AR 8
DI 10.1145/1462166.1462169
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 419SG
UT WOS:000264239400004
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Morris, JM
   Tyrrell, M
AF Morris, Joseph M.
   Tyrrell, Malcolm
TI Dually Nondeterministic Functions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Theory; Verification; Angelic nondeterminacy; demonic
   nondeterminacy; free completely distributive lattice; modeling
   nondeterminacy; nondeterminism; nondeterministic functions
ID LATTICE; REFINEMENT; LANGUAGE; COMMUTE
AB Nondeterminacy is a fundamental notion in computing. We show that it can be described by a general theory that accounts for it in the form in which it occurs in many programming contexts, among them specifications, competing agents, data refinement, abstract interpretation, imperative programming, process algebras, and recursion theory. Underpinning these applications is a theory of nondeterministic functions; we construct such a theory. The theory consists of an algebra with which practitioners can reason about nondeterministic functions, and a denotational model to establish the soundness of the theory. The model is based on the idea of free completely distributive lattices over partially ordered sets. We deduce the important properties of nondeterministic functions.
C1 [Morris, Joseph M.] Dublin City Univ, Sch Comp, Dublin 9, Ireland.
C3 Dublin City University
RP Morris, JM (corresponding author), Dublin City Univ, Sch Comp, Dublin 9, Ireland.
EM joseph.morris@computing.duc.ie
FU Science Foundation Ireland [03/IN_3I408C]
FX This work was supported by Science Foundation Ireland, under Grant No.
   03/IN_3I408C.
CR [Anonymous], 1990, Specification and Transformation of Programs: A Formal Approach to Software Development
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 1995, Free Lattices
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1990, ACTA INFORM, V27, P583, DOI 10.1007/BF00259469
   BACK RJR, 1980, TRACT MATH CENTRUM, V131
   BARTENSCHLAGER G, 1995, ACTA MATH U COMENIAN, V64, P1
   Berry Gerard., 1978, Proceedings of the Fifth Colloquium on Automata, Languages and Programming, P72
   Bird Richard, 1997, Algebra of Programming
   BIRKHOFF G, 1967, C PUBLICATIONS AM MA, V25
   BOIS ARD, 2002, P 14 S COMP ARCH HIG
   BONSANGUE M, 1998, ELECT NOTES THEORETI, V8
   Bonsangue M. M., 1994, Formal Aspects of Computing, V6, P788, DOI 10.1007/BF01213603
   Boute R, 2005, ACM T PROGR LANG SYS, V27, P988, DOI 10.1145/1086642.1086647
   BROYER M, 1986, NEPHROL DIAL TRANSPL, V1, P1
   Cattani GL, 1997, LECT NOTES COMPUT SC, V1258, P58
   Cousot P, 1996, ACM COMPUT SURV, V28, P324, DOI 10.1145/234528.234740
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   de Moor O, 2000, LECT NOTES COMPUT SC, V1816, P371
   DEROEVER WP, 1999, DATA REFINEMENT MODE
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dijkstra Edsger., 1982, SELECTED WRITINGS CO
   FLANNERY KE, 1990, J COMPUT SYST SCI, V40, P125, DOI 10.1016/0022-0000(90)90008-9
   GARDINER P, 1991, THEOR COMPUT SCI, V87, P143, DOI 10.1016/0304-3975(91)90029-2
   GARDINER PHB, 1994, SCI COMPUT PROGRAM, V22, P21, DOI 10.1016/0167-6423(94)90006-X
   Gries D., 1993, LOGICAL APPROACH DIS
   Harmer R., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P422, DOI 10.1109/LICS.1999.782637
   HECKMANN R, 1991, INFORM PROCESS LETT, V40, P7, DOI 10.1016/S0020-0190(05)80003-1
   HECKMANN R, 1992, LECT NOTES COMPUT SC, V598, P272
   HECKMANN R, 1991, SCI COMPUT PROGRAM, V17, P77, DOI 10.1016/0167-6423(91)90037-X
   Hehner E.C.R., 1993, A Practical Theory of Programming
   Hennessy Matthew, 1979, P 8 S MATH FDN COMP, V74, P108, DOI 10.1007/3-540-09526-8_8
   HESSELINK W, 2004, MULTIRELATIONS ARE P
   HESSELINK WH, 1990, BEAUTY IS OUR BUSINE, P182
   Hoare C.A.R., 1984, Communicating Sequential Processes
   HOARE CAR, 1987, INFORM PROCESS LETT, V25, P71, DOI 10.1016/0020-0190(87)90224-9
   HOOFMAN R, 1987, RUUCS8723 UTR U I IN
   HOOGERWOORD RR, 1989, THESIS TU EINDHOVEN
   HUGHES J, 1991, P 4 HIGH ORD WORKSH
   HUGHES J, 1995, P 7 INT C FUNCT PROG, P108
   JACOBS D, 1985, ACTA INFORM, V22, P67, DOI 10.1007/BF00290146
   Jones SP, 1999, ACM SIGPLAN NOTICES, V34, P25, DOI 10.1145/301631.301637
   LAIRD J, 2006, LECT NOTES COMPUTER, V3921
   Larsen P. G., 1996, Formal Aspects of Computing, V8, P47, DOI 10.1007/BF01211050
   Lassen Soren Bogh, 1998, THESIS U AARHUS
   LEVY PB, 2005, ELECT NOTES THEORETI, V155, P195
   MAIN MG, 1986, LECT NOTES COMPUT SC, V239, P162
   Martin CE, 2004, LECT NOTES COMPUT SC, V3125, P228
   MORGAN C, 1990, ACTA INFORM, V27, P481, DOI 10.1007/BF00277386
   MORGAN C, 1988, ACM T PROGR LANG SYS, V10, P403, DOI 10.1145/44501.44503
   MORGAN C, 1990, SERIES COMPUTER SCI
   Morris JM, 2004, LECT NOTES COMPUT SC, V3125, P274
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   Morris JM, 2002, SCI COMPUT PROGRAM, V43, P77, DOI 10.1016/S0167-6423(01)00022-3
   Morris JM, 1999, ACM T PROGR LANG SYS, V21, P677, DOI 10.1145/319301.319350
   MORRIS JM, 2008, TERM TRANSFORM UNPUB
   Morris JM, 2007, ACTA INFORM, V44, P323, DOI 10.1007/s00236-007-0049-9
   Naumann D.A., 2001, Proc. 3rd ACM SIGPLAN Int. Conf. Principles and Practice of Declarative Programming, P4
   Naumann DA, 2001, SCI COMPUT PROGRAM, V41, P1, DOI 10.1016/S0167-6423(00)00005-8
   NELSON G, 1992, NATO ASI SERIES F, V88
   NORVELL TS, 1993, LECT NOTES COMPUTER, V669, P269
   Nygaard M, 2004, THEOR COMPUT SCI, V316, P153, DOI 10.1016/j.tcs.2004.01.029
   Nygaard M, 2002, IEEE S LOG, P433, DOI 10.1109/LICS.2002.1029851
   PLOTKIN G, 1979, P COP WINT SCH SOFTW, P527
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   Reynolds J.C., 1998, Theories of Programming Languages
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   SMYTH MB, 1983, LECT NOTES COMPUT SC, V154, P662
   SMYTH MB, 1978, J COMPUT SYST SCI, V16, P23, DOI 10.1016/0022-0000(78)90048-X
   SPIVEY JM, 1988, UNDERSTANDING Z SPEC
   TUNNICLIFFE WR, 1985, ALGEBRA UNIV, V21, P133, DOI 10.1007/BF01187563
   TYRRELL M, 2006, LECT NOTES COMPUTER, V4281
   VONWRIGHT J, 1994, ACTA INFORM, V31, P105, DOI 10.1007/BF01192157
   WARD N, 1994, THESIS U QUEENSLAND
   Winskel G., 1993, The Formal Semantics of Programming Languages
   WOODCOCK J, 1988, SOFTWARE ENG MATH
NR 77
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2008
VL 30
IS 6
AR 34
DI 10.1145/1391956.1391961
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 373GL
UT WOS:000260958900005
OA Bronze
DA 2024-07-18
ER

PT J
AU Cheney, J
   Urban, C
AF Cheney, James
   Urban, Christian
TI Nominal logic programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; nominal logic; logic programming; name-binding; semantics
ID SEMANTICS; PROLOG; NAMES
AB Nominal logic is an extension of first-order logic which provides a simple foundation for formalizing and reasoning about abstract syntax modulo consistent renaming of bound names (that is, alpha-equivalence). This article investigates logic programming based on nominal logic. We describe some typical nominal logic programs, and develop the model-theoretic, proof-theoretic, and operational semantics of such programs. Besides being of interest for ensuring the correct behavior of implementations, these results provide a rigorous foundation for techniques for analysis and reasoning about nominal logic programs, as we illustrate via examples.
C1 [Cheney, James] Univ Edinburgh, Edinburgh EH8 9AB, Midlothian, Scotland.
   [Urban, Christian] Tech Univ Munich, Munich, Germany.
C3 University of Edinburgh; Technical University of Munich
RP Cheney, J (corresponding author), Univ Edinburgh, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
EM jcheney@inf.ed.ac.uk
FU AFOSR [F49620-01-1-0298, F49620-03-1-0156]; ONR [N00014-01-1-0968];
   EPSRC [GR/S63205/01]; Alexander von Humboldt foundation; German Research
   Council
FX J. Cheney was supported by AFOSR grant F49620-01-1-0298, ONR grant
   N00014-01-1-0968, AFOSR grant F49620-03-1-0156, and EPSRC grant
   GR/S63205/01 while performing this research. C. Urban was supported by a
   fellowship from the Alexander von Humboldt foundation and an Emmy
   Noether fellowship from the German Research Council.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   [Anonymous], LAMBDA CALCULUS
   [Anonymous], 1999, AUTOMATED DEDUCTION
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   CERVESATO I, 1998, P 1998 JOINT INT C S, P115
   Chen CK, 2006, NAT PROD COMMUN, V1, P299
   Chen HW, 2005, INT J MOD PHYS B, V19, P119, DOI 10.1142/S0217979205028050
   Cheney J, 2005, LECT NOTES COMPUT SC, V3467, P74
   Cheney J, 2005, LECT NOTES COMPUT SC, V3441, P379
   Cheney J, 2004, LECT NOTES COMPUT SC, V3132, P269, DOI 10.1007/978-3-540-27775-0_19
   Cheney J, 2004, LECT NOTES COMPUT SC, V3142, P332
   CHENEY J, 2005, P 10 INT C FUNCT PRO, P180
   Cheney J, 2006, LECT NOTES COMPUT SC, V4079, P361, DOI 10.1007/11799573_27
   CHENEY JR, 2004, THESIS CORNELL U ITH
   CHENG ASK, 1991, LOGIC PROGRAMM, P285
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Clark K, 2001, THEOR PRACT LOG PROG, V1, P283, DOI 10.1017/S147106840100120X
   Clocksin W. F., 2003, Programming in PROLOG
   DARLINGTON J, 1994, LECT NOTES ARTIF INT, V822, P200
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   FELTKAMP TEW, 1993, MANUAL BIOL MARKER A, V11, P1
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Gabbay M, 2004, IEEE S LOG, P139, DOI 10.1109/LICS.2004.1319608
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   HAMANA M, 2001, LECT NOTES COMPUTER, V2215, P243
   HANNAN J, 1988, P 5 INT C S LOG PROG, V2, P942
   HANUS M, 1991, THEOR COMPUT SCI, V89, P63, DOI 10.1016/0304-3975(90)90107-S
   HANUS M, 1994, J LOGIC PROGRAM, V20, P583, DOI 10.1016/0743-1066(94)90034-5
   HAREL D, 2000, FOUNDAT COMPUT, P3
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P204, DOI 10.1109/LICS.1999.782616
   Jaffar J, 1998, J LOGIC PROGRAM, V37, P1, DOI 10.1016/S0743-1066(98)10002-X
   Leach J, 2001, THEOR PRACT LOG PROG, V1, P409, DOI 10.1017/S1471068401001041
   Lloyd J. W., 2012, Foundations of Logic Programming
   MASON IA, 1987, ECSLFCS8732 U ED
   Miller D., 1987, Proceedings of the 1987 Symposium on Logic Programming (Cat. No.87CH2472-9), P379
   Miller D., 2005, ACM Transactions on Computational Logic, V6, P749, DOI 10.1145/1094622.1094628
   Miller D., 1991, Journal of Logic and Computation, V1, P497, DOI 10.1093/logcom/1.4.497
   MILLER D, 1991, ANN PURE APPL LOGIC, V51, P125, DOI 10.1016/0168-0072(91)90068-W
   MILLER D, 1989, J LOGIC PROGRAM, V6, P79, DOI 10.1016/0743-1066(89)90031-9
   MILLER D, 1990, P 1 WORKSH LOG FRAM, P323
   MILLER DA, 1993, LECT NOTES ARTIF INT, V798, P206
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MITCHELL JohnC., 2003, CONCEPTS PROGRAMMING
   MYCROFT A, 1984, ARTIF INTELL, V23, P295, DOI 10.1016/0004-3702(84)90017-1
   Nadathur G, 2005, LECT NOTES ARTIF INT, V3835, P110, DOI 10.1007/11591191_9
   NADATHUR G, 1998, HDB LOGIC ARTIFICIAL, V5, P499
   Nickolas P, 1996, THEOR COMPUT SCI, V169, P81, DOI 10.1016/S0304-3975(96)00115-6
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   PASALIC E, 2000, CSE00007 OR GRAD I
   PFENNING F, 1989, P ACM SIGPLAN C PROG, P199
   Pfenning F, 1991, Logical frameworks, P149
   Pfenning F., 2001, HDB AUTOMATED REASON, VII, P1063
   Pfenning Frank, 1999, LNCS, V1632, P202, DOI DOI 10.1007/3-540-48660-7_14
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitts Andrew M., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P85, DOI 10.1145/1190216.1190232
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Pitts AM, 2000, LECT NOTES COMPUT SC, V1837, P230
   Pitts AM, 2006, J ACM, V53, P459, DOI 10.1145/1147954.1147961
   POTTIER F, 2005, P ACM SIGPLAN WORKSH, P27
   Pottier F, 2007, IEEE S LOG, P356, DOI 10.1109/LICS.2007.44
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Schöpp U, 2007, ELECTRON NOTES THEOR, V174, P19, DOI 10.1016/j.entcs.2007.01.027
   Shinwell MR, 2005, THEOR COMPUT SCI, V342, P28, DOI 10.1016/j.tcs.2005.06.003
   SHINWELL MR, 2003, P 8 ACM SIGPLAN INT, P263
   STAPLES J, 1989, LOGIC PROGRAMM, P435
   Sterling L. S., 1994, The Art of Prolog, V2nd
   Tiu A, 2007, ELECTRON NOTES THEOR, V174, P3, DOI 10.1016/j.entcs.2007.01.016
   Urban C, 2005, LECT NOTES ARTIF INT, V3632, P38
   Urban C, 2004, THEOR COMPUT SCI, V323, P473, DOI 10.1016/j.tcs.2004.06.016
   URBAN C, 2005, LECT NOTES COMPUTER, V3461, P74
   VANEMDEN MH, 1976, J ACM, V4, P293
   WATKINS K, 2003, P TYPES, P355
NR 76
TC 18
Z9 19
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2008
VL 30
IS 5
AR 26
DI 10.1145/1387673.1387675
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 351SG
UT WOS:000259445600002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Wang, T
   Roychoudhury, A
AF Wang, Tao
   Roychoudhury, Abhik
TI Dynamic slicing on Java bytecode traces
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; experimentation; measurement; program slicing; tracing;
   debugging
ID EXECUTION
AB Dynamic slicing is a well-known technique for program analysis, debugging and understanding. Given a program P and input 1, it finds all program statements which directly/indirectly affect the values of some variables' occurrences when P is executed with I. In this article, we develop a dynamic slicing method for Java programs. Our technique proceeds by backwards traversal of the bytecode trace produced by an input I in a given program P. Since such traces can be huge, we use results from data compression to compactly represent bytecode traces. The major space savings in our method come from the optimized representation of (a) data addresses used as operands by memory reference bytecodes, and (b) instruction addresses used as operands by control transfer bytecodes. We show how dynamic slicing algorithms can directly traverse our compact bytecode traces without resorting to costly decompression. We also extend our dynamic slicing algorithm to perform "relevant slicing". The resultant slices can be used to explain omission errors that is, why some events did not happen during program execution. Detailed experimental results on space/time overheads of tracing and slicing are reported in the article. The slices computed at the bytecode level are translated back by our tool to the source code level with the help of information available in Java class files. Our JSlice dynamic slicing tool has been integrated with the Eclipse platform and is available for usage in research and development.
C1 [Wang, Tao; Roychoudhury, Abhik] Natl Univ Singapore, Dept Comp Sci, Singapore 117548, Singapore.
C3 National University of Singapore
RP Wang, T (corresponding author), Natl Univ Singapore, Dept Comp Sci, Singapore 117548, Singapore.
EM wangtao@comp.nus.edu.sg; abhik@comp.nus.edu.sg
OI ROYCHOUDHURY, Abhik/0000-0002-7127-1137
CR Agrawal H., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P348, DOI 10.1109/ICSM.1993.366927
   Agrawal Hiralal, 1990, PLDI, P246, DOI 10.1145/93542.93576
   Agrawal Hiralal, 1991, THESIS PURDUE U
   Akgul T, 2004, PROC INT CONF SOFTW, P522, DOI 10.1109/ICSE.2004.1317474
   Andersen L. O., 1994, Ph.D. thesis
   BERK EJ, 2003, LEXICAL ANALYZER GEN
   De Lucia A, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P142, DOI 10.1109/SCAM.2001.972675
   Dhamdhere DM, 2003, INFORM PROCESS LETT, V85, P145, DOI 10.1016/S0020-0190(02)00322-8
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   GOEL A, 2003, P ACM SIGPLAN S PRIN, P191
   Gyimóthy T, 1999, LECT NOTES COMPUT SC, V1687, P303, DOI 10.1145/318774.319248
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   *JFG, JAV GRAND FOR BENCHM
   Joy B., 2000, JAVA TM LANGUAGE SPE, V2nd
   *KAFFE, KAFF VIRT MACH
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   KOREL B, 1997, P INT WORSKH AUT DEB
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Larsen L, 1996, PROC INT CONF SOFTW, P495, DOI 10.1109/ICSE.1996.493444
   Larus J. R., 1999, SIGPLAN Notices, V34, P259, DOI 10.1145/301631.301678
   LARUS JR, 1990, SOFTWARE PRACT EXPER, V20, P1241, DOI 10.1002/spe.4380201205
   LEVROUW LJ, 1994, P 2 EUR WORKSH PAR D, P471, DOI 10.1109/EMPDP.1994.592529
   Lhotak Ondrej., 2002, SPARK FLEXIBLE POINT
   Lindholm T., 1999, JAVA TM VIRTUAL MACH, V2nd
   MAJUMDAR R, 2005, P INT C PROGR LANG D
   NevillManning CG, 1997, IEEE DATA COMPR CONF, P3, DOI 10.1109/DCC.1997.581951
   OHATA F, 2001, P AS PAC SOFTW ENG C
   Pleszkun A. R., 1994, Proceedings of the 27th Annual International Symposium on Microarchitecture. MICRO 27, P32
   Reiss SP, 2001, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2001.919096
   Ronsse M, 1999, ACM T COMPUT SYST, V17, P133, DOI 10.1145/312203.312214
   SAZEIDES Y, 2003, J INSTRUCTION LEVEL, V5
   Sinha S, 2000, IEEE T SOFTWARE ENG, V26, P849, DOI 10.1109/32.877846
   *SPECJVM98, 1998, SPECJVM98 BENCHM
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   WANG T, 2007, TRB307 NAT U SINGP
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   XU B, 2002, P IEEE INT WORKSH SO
   Zhang X, 2004, 2004 IEEE INTERNATIONAL CONFERENCE ON CLUSTER COMPUTING, P105
   Zhang XY, 2005, ACM T PROGR LANG SYS, V27, P631, DOI 10.1145/1075382.1075384
   ZHANG Y, 2001, P ACM SIGPLAN C PROG, P180
   Zhao JJ, 2000, P INT COMP SOFTW APP, V24, P486, DOI 10.1109/CMPSAC.2000.884771
   Zilles CB, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P172, DOI [10.1109/ISCA.2000.854388, 10.1145/342001.339676]
NR 44
TC 22
Z9 30
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 2
AR 10
DI 10.1145/1330017.1330021
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 280HZ
UT WOS:000254418100004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hamlen, KW
   Morrisett, G
   Schneider, FB
AF Hamlen, KW
   Morrisett, G
   Schneider, FB
TI Computability classes for enforcement mechanisms
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE security; program rewriting; reference monitors; execution monitoring;
   inlined reference monitoring; security automata; edit automata
C1 Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
   Harvard Univ, Div Engn & Appl Sci, Cambridge, MA 02138 USA.
C3 Cornell University; Harvard University
RP Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
EM hamlen@cs.cornell.edu; greg@eecs.harvard.edu; fbs@cs.cornell.edu
OI Morrisett, John/0000-0002-2619-5614
CR ANDERSON J, 1972, ESDTR7351 HQ AFB EL
   [Anonymous], PLDI 98
   [Anonymous], WNSP NEW SEC PAR WOR
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   DEUTSCH P, 1971, INFORMATION PROCESSI, P320
   Erlingsson U, 2000, P IEEE S SECUR PRIV, P246, DOI 10.1109/SECPRI.2000.848461
   Evans D, 1999, P IEEE S SECUR PRIV, P32, DOI 10.1109/SECPRI.1999.766716
   Fong PWL, 2004, P IEEE S SECUR PRIV, P43
   Godel K., 1931, Monatshefte fur Mathematik und Physik, V38, P173, DOI 10.1007/BF01700692
   HARRISON MA, 1976, COMMUN ACM, V19, P461, DOI 10.1145/360303.360333
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   KIM M, 2001, 1 INT WORKSH RUN TIM
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Lampson B.W., 1971, P 5 PRINCETON C INFO, P437
   LIGATTI J, 2005, TR72005 PRINC U
   LIGATTI J, 2003, TR68103 PRINC U
   Lindholm T., 1999, JAVA TM VIRTUAL MACH, V2nd
   MARCUS LF, 1989, IEEE CIPHER, P55
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Nachenberg C, 1997, COMMUN ACM, V40, P46, DOI 10.1145/242857.242869
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Necula GC, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P229, DOI 10.1145/248155.238781
   Papadimitriou C. H., 1995, Computational Complexity
   REES J, 1991, LISP POINTERS, V4, P1
   ROBBEN W, 1999, LECT NOTES COMPUTER, V1616, P74
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Small C., 1997, P 3 USENIX C OBJ OR
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
   VISWANATHAN M, 2000, THESIS U PENNSYLVANI
   WAHRE R, 1993, P 14 ACM S OP SYST P, P203
   WARE W, 1979, R6091 RAND CORP
NR 32
TC 112
Z9 128
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2006
VL 28
IS 1
BP 175
EP 205
DI 10.1145/1111596.1111601
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 011SV
UT WOS:000235289300005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Moreau, L
   Queinnec, C
AF Moreau, L
   Queinnec, C
TI Resource aware programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE resource management; resource algebra; semantics; abstract machine
AB We introduce the Resource Aware Programming framework, which allows users to monitor the resources used by their programs and to programmatically express policies for the management of such resources. The framework is based on a notion of hierarchical groups, which act as resource containers for the computations they sponsor. Asynchronous notifications for resource exhaustion and for computation termination can be handled by arbitrary user code, which is also executed under the control of this hierarchical group structure. Resources are manipulated by the programmer using resource descriptors, whose operations are specified by a resource algebra. In this article, we overview the Resource Aware Programming framework and describe its semantics in the form of a language-independent abstract machine able to model both shared and distributed memory environments. Finally, we discuss a prototype implementation of the Resource Aware Programming framework in Java.
C1 Univ Southampton, Sch Elect & Comp Sci, Southampton SO17 1BJ, Hants, England.
   LIP6, F-75252 Paris, France.
C3 University of Southampton; Sorbonne Universite
RP Univ Southampton, Sch Elect & Comp Sci, Southampton SO17 1BJ, Hants, England.
EM L.Moreau@ecs.soton.ac.uk; Christian.Queinnec@lip6.fr
RI Moreau, Luc/C-9061-2011
OI Moreau, Luc/0000-0002-3494-120X
CR [Anonymous], 2002, WHAT IS GRID 3 POINT
   BACK G, 2000, P 4 S OP SYST DES IM
   BOOTH D, 2003, WEB SERVICES ARCHITE
   BOX D, 2003, WEB SERVICES POLICY
   Bryce C, 2001, AUTON AGENT MULTI-AG, V4, P359, DOI 10.1023/A:1012715226170
   CZAJKOWSI G, 1998, P AC OOPSLA C
   CZAJKOWSI K, 2004, GLOB GRIDF FOR LEM I
   DAMIANOU N, 2001, LECT NOTES COMPUTER, V1995
   Della-Libera G., 2002, WEB SERVICES SECURIT
   Foster I.K., 2002, Global Grid Forum
   Fuggetta A, 1998, IEEE T SOFTWARE ENG, V24, P342, DOI 10.1109/32.685258
   GROTH PT, 2002, CPU RESOURCE CONTROL
   HALSTEAD RH, 1990, LECT NOTES COMPUT SC, V441, P2
   Hartel PH, 2001, ACM COMPUT SURV, V33, P517, DOI 10.1145/503112.503115
   HAYNES CT, 1987, COMPUT LANG, V12, P109, DOI 10.1016/0096-0551(87)90003-8
   JOHNSON M, 2003, P AAMAS WORKSH WEB S
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   KORNFELD WA, 1981, IEEE T SYST MAN CYB, V11, P24, DOI 10.1109/TSMC.1981.4308575
   Ludwig H., 2003, WEB SERVICE LEVEL AG
   Moreau L, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P183
   Moreau L., 2001, Higher-Order and Symbolic Computation, V14, P357, DOI 10.1023/A:1014455931537
   Moreau L, 2001, SCI COMPUT PROGRAM, V39, P249, DOI 10.1016/S0167-6423(00)00011-3
   Moreau L, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P68, DOI 10.1109/ICCL.1998.674158
   MOREAU L, 2002, LECT NOTES COMPUTER, P1
   MOREAU L, 1997, RR3147 INRIA
   MOREAU L, 2002, RESOURCE AWARE PROGR
   OSBORNE RB, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P198, DOI 10.1145/91556.91644
   ROURE DD, 2001, SEMANTIC GRID
   *SUN MICR, 1996, JAV REM METH INV SPE
   Suri N, 2003, IEEE 4TH INTERNATIONAL WORKSHOP ON POLICIES FOR DISTRIBUTED SYSTEMS AND NETWORKS, PROCEEDINGS, P247, DOI 10.1109/POLICY.2003.1206981
   Suri N., 2000, Proceedings of the Fourth International Conference on Autonomous Agents, P163, DOI 10.1145/336595.337103
   VILLAZON A, 2001, 5 IEEE INT C MOB AG
   White J., 1996, Software Agents
   YAO W, 2001, P 6 ACM S ACC CONTR, P171
   2003, JSR121
NR 35
TC 10
Z9 11
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2005
VL 27
IS 3
BP 441
EP 476
DI 10.1145/1065887.1065891
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 937OF
UT WOS:000229934700004
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Millstein, T
   Bleckner, C
   Chambers, C
AF Millstein, T
   Bleckner, C
   Chambers, C
TI Modular typechecking for hierarchically extensible datatypes and
   functions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Functional Programming
CY OCT 04-06, 2002
CL PITTSBURGH, PA
SP ACM, SIGPLAN
DE design; languages; theory; extensible datatypes; extensible functions;
   modular typechecking
ID CALCULUS; ML
AB One promising approach for adding object-oriented (00) facilities to functional languages like ML is to generalize the existing datatype and function constructs to be hierarchical and extensible, so that datatype variants simulate classes and function cases simulate methods. This approach allows existing datatypes to be easily extended with both new operations and new variants, resolving a longstanding conflict between the functional and 00 styles. However, previous designs based on this approach have been forced to give up modular typechecking, requiring whole-program checks to ensure type safety. We describe Extensible ML (EML), an ML-like language that supports hierarchical, extensible datatypes and functions while preserving purely modular typechecking. To achieve this result, EMUS type system imposes a few requirements on datatype and function extensibility, but EML is still able to express both traditional functional and 00 idioms. We have formalized a core version of EML and proven the associated type system sound, and we have developed a prototype interpreter for the language.
C1 Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
   Univ Washington, Dept Comp Sci & Engn, Seattle, WA 98195 USA.
C3 University of California System; University of California Los Angeles;
   University of Washington; University of Washington Seattle
RP Univ Calif Los Angeles, Dept Comp Sci, 4531D Boelter Hall, Los Angeles, CA 90095 USA.
EM todd@cs.ucla.edu; colin@cs.washington.edu; chambers@cs.washington.edu
CR Ancona D, 2002, J FUNCT PROGRAM, V12, P91, DOI 10.1017/S0956796801004257
   ANCONA D, 2001, LECT NOTES COMPUTER, V2072
   ANCONA D, 2002, LECT NOTES COMPUTER, V2374
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Arnold K., 2000, The Java Programming Language, V3rd ed
   BONNIOT D, 2002, 9 INT WORKSH FDN OBJ, V9
   Bourdoncle F., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P302, DOI 10.1145/263699.263743
   BRACHA G, 1990, ECOOP OOPSLA 90 P, P303
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   CARDELLI L, 1997, P 24 ACM SIGPLAN SIG, P266
   Chambers C, 1995, ACM T PROGR LANG SYS, V17, P805, DOI 10.1145/218570.218571
   Chambers Craig., 1999, Proceedings of the 14th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA '99, P238, DOI [10.1145/320384.320407, DOI 10.1145/320384.320407]
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   COOK WR, 1991, LECT NOTES COMPUT SC, V489, P151
   DROSSOPOULOU S, 1999, LOGIC COMPUTER SCI, P147
   DUGGAN D, 1996, P ACM INT C FUNCT PR, P262
   DUGGAN D, 2001, P OOPSLA 2001 OCT, P223
   Ernst M., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P186, DOI 10.1007/BFb0054092
   FINDLER RB, 1998, ACM SIGPLAN INT C FU, P94
   FISHER C, 1999, ASIA PACIFIC J HUMAN, V37, P1
   Fisher K, 2000, LECT NOTES COMPUT SC, V1850, P83
   Flatt Matthew., 1998, P ACM SIGPLAN 1998 C, P236
   FUH YC, 1990, THEOR COMPUT SCI, V73, P155, DOI 10.1016/0304-3975(90)90144-7
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Garrigue J., 2000, WORKSH FDN SOFTW ENG
   GOSLING J, 2000, JAVA SERIES
   Hirschowitz T, 2002, LECT NOTES COMPUT SC, V2305, P6
   HOANG M, 1995, P POPL 95, P176
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kahrs S, 1997, THEOR COMPUT SCI, V173, P445, DOI 10.1016/S0304-3975(96)00163-6
   Krishnamurthi S., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P91, DOI 10.1007/BFb0054088
   MACQUEEN D, 1984, 1984 ACM S LISP FUNC, P198
   McDirmid S, 2001, ACM SIGPLAN NOTICES, V36, P211, DOI 10.1145/504311.504298
   Millstein T, 2002, ACM SIGPLAN NOTICES, V37, P110, DOI 10.1145/583852.581489
   Millstein T, 2002, INFORM COMPUT, V175, P76, DOI 10.1006/inco.2002.3103
   Millstein T, 1999, LECT NOTES COMPUT SC, V1628, P279
   Millstein Todd David, 2003, THESIS U WASHINGTON
   NELSON G, 1991, SYSTEMS PROGRAMMING, V3
   Nordlinger P, 1999, ART NEWS, V98, P34
   Odersky Martin., 1997, P 24 ACM S PRINCIPLE, P146
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Remy D, 1998, THEOR PRACT OBJ SYST, V4, P27, DOI 10.1002/(SICI)1096-9942(1998)4:1<27::AID-TAPO3>3.0.CO;2-4
   REPPY J, 1996, P ACM SIGPLAN 96 C P, P171
   Reynolds JC, 2003, MG COMP SCI, P309
   SHALIT A, 1997, DYLAN REFERENCE MANU
   WADLER P, 1990, IFIP TC 2 WORK C PRO, P7
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   ZENG M, 2001, PLAN MANAGE POWER CO, P3
NR 50
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2004
VL 26
IS 5
BP 836
EP 889
DI 10.1145/1018203.1018207
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 853WB
UT WOS:000223858600004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Lieberherr, K
   Patt-Shamir, B
   Orleans, D
AF Lieberherr, K
   Patt-Shamir, B
   Orleans, D
TI Traversals of object structures: Specification and efficient
   implementation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; languages; performance; aspect-oriented programming;
   adaptive programming; structure-shy software; Low of Demeter; strategy
   graphs; class graphs; object graphs
AB Separation of concerns and loose coupling of concerns are important issues in software engineering. In this paper we show how to separate traversal-related concerns from other concerns, how to loosely couple traversal-related concerns to the structural concern, and how to efficiently implement traversal-related concerns. The stress is on the detailed description of our algorithms and the traversal specifications they operate on.
   Traversal of object structures is a ubiquitous routine in most types of information processing. Ad hoc implementations of traversals lead to scattered and tangled code and in this paper we present a new approach, called traversal strategies, to succinctly modularize traversals. In our approach traversals are defined using a high-level directed graph description, which is compiled into a dynamic road map to assist run-time traversals. The complexity of the compilation algorithm is polynomial in the size of the traversal strategy graph and the class graph of the given application. Prototypes of the system have been developed and are being successfully used to implement traversals for Java and AspectJ [Kiczales et al. 2001] and for generating adapters for software components. Our previous approach, called traversal specifications [Lieberherr 1992; Palsberg et al. 1995], was less general and less succinct, and its compilation algorithm was of exponential complexity in some cases. In an additional result we show that this bad behavior is inherent to the static traversal code generated by previous implementations, where traversals are carried out by invoking methods without parameters.
C1 Northeastern Univ, Coll Comp Sci, Boston, MA 02115 USA.
   Tel Aviv Univ, Dept Elect Engn, IL-69978 Tel Aviv, Israel.
C3 Northeastern University; Tel Aviv University
RP Lieberherr, K (corresponding author), Northeastern Univ, Coll Comp Sci, 360 Ave Arts, Boston, MA 02115 USA.
EM lieber@ccs.neu.edu; boaz@eng.tau.ac.il; dougo@ccs.neu.edu
RI Patt-Shamir, Boaz/K-2577-2012
CR AHO AV, 1986, ALGORITHM, P126
   Bartoli A, 1997, SOFTWARE PRACT EXPER, V27, P63, DOI 10.1002/(SICI)1097-024X(199701)27:1<63::AID-SPE74>3.0.CO;2-A
   BLANDO L, 2002, 1 INT C ASPECT ORIEN
   BLANDO L, 2002, MISSION CRITICAL VER
   BOOCH G, 1999, OBJECT TECHNOLOGY SE
   Bravenboer Martin., 2001, Guiding Visitors: Separating Navigation from Computation"
   Bray Tim., 1998, EXTENSIBLE MARKUP LA
   CAMERON RD, 1984, ACM T PROGR LANG SYS, V6, P20, DOI 10.1145/357233.357235
   Clark J., 1999, XML Path Language (XPath) Version 1.0
   Elrad T, 2001, COMMUN ACM, V44, P28
   EPPSTEIN D, 1992, INFORM COMPUT, V98, P41, DOI 10.1016/0890-5401(92)90041-D
   FARROW R, 1992, ACM S PRINCIPLES PRO, P223
   GALPERIN H, 1983, INFORM CONTROL, V56, P183, DOI 10.1016/S0019-9958(83)80004-7
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   HOSCHKA P, 1994, IFIP TC6 WG6 5 INT W, P131
   HUNT A, 2000, PRAGMETIC PROGRAMMER
   IOANNIDIS YE, 1994, P ACM SIGMOD INT C M, P138
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   KICZALES G, 2001, EUR C OBJECT ORIENTE
   KIFER Michael., 1992, SIGMOD Conference, P393, DOI DOI 10.1145/141484.130342
   LAMMEL R, 2003, P AOSD 03
   Lieberherr K, 2001, COMMUN ACM, V44, P39, DOI 10.1145/383845.383855
   LIEBERHERR K, DEMETER HOME PAGE
   LIEBERHERR K, COMMUNICATION
   LIEBERHERR K, 2001, NUCCS200105
   Lieberherr K., 1996, ADAPTIVE OBJECT ORIE
   LIEBERHERR KJ, 1989, IEEE SOFTWARE, V6, P38, DOI 10.1109/52.35588
   Lieberherr KJ, 1997, PROC INT CONF SOFTW, P604, DOI 10.1145/253228.253494
   LIEBERHERR KJ, 1994, COMMUN ACM, V37, P94, DOI 10.1145/175290.175303
   LIEBERHERR KJ, 1992, INFORMATION PROCESSI, P179
   LOPES CV, 1996, 2 INT S OBJ TECHN AD, P118
   MARKOWITZ VM, 1993, NINTH INTERNATIONAL CONFERENCE ON DATA ENGINEERING : PROCEEDINGS, P71
   MCWHIRTER B, 2001, EXTENSIBLE MARKUP LA
   Neuhold E. J., 1988, Proceedings of the Fourteenth International Conference on Very Large Databases, P183
   ORLEANS D, 2001, REFLECTION 2001 META
   ORLEANS D, DEMETERJ STRATEGY ST
   ORLEANS D, DAJ HOME PAGE
   Palsberg J, 1997, SCI COMPUT PROGRAM, V29, P303, DOI 10.1016/S0167-6423(97)00004-X
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P264, DOI 10.1145/201059.201066
   Palsberg J, 1998, P INT COMP SOFTW APP, P9, DOI 10.1109/CMPSAC.1998.716629
   Philippsen M, 2000, CONCURRENCY-PRACT EX, V12, P495, DOI 10.1002/1096-9128(200005)12:7<495::AID-CPE496>3.0.CO;2-W
   POLYA G, 1949, HOW SOLVE IT
   Seiter L. M., 1996, SIGSOFT '96. Proceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering, P46, DOI 10.1145/239098.239108
   Seiter LM, 1998, IEEE T SOFTWARE ENG, V24, P79, DOI 10.1109/32.663999
   SMARGDAKIS Y, 1997, COMMUNICATION
   STIREWALT K, 2001, ACM SIGSOFT S SOFTWA, P86
   SUNG J, THESIS
   SUNG J, 2002, NUCCS0206
   VANDENBUSSCHE J, 1993, LECT NOTES COMPUTER, V760, P267
   VANDERPERREN W, 2001, P GCSE ERF GERM
   VLISSIDES J, 1995, VISITING RIGHTS
   VLISSIDES J, 1996, TROUBLE OBSERVER
   *W3 CONS, XML SCHEM HOM PAG
   WAITE WM, 1984, COMPILER CONSTRUCTIO
   WAND M, PART STAT TRAVERSING
   WOOLF B, 1996, PATTERN LANGUAGES PR
   WYDAEGHE B, 2002, THESIS FREE U BRUSSE
   WYDAEGHE B, 2001, P ECBS WASH APR
NR 59
TC 16
Z9 22
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2004
VL 26
IS 2
BP 370
EP 412
DI 10.1145/973097.973102
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 804LO
UT WOS:000220300400005
OA Bronze
DA 2024-07-18
ER

PT J
AU Murali, A
   Peña, L
   Löding, C
   Madhusudan, P
AF Murali, Adithya
   Pena, Lucas
   Loeding, Christof
   Madhusudan, P.
TI A First-order Logic with Frames
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Frame reasoning; program verification; program logics; heap
   verification; first-order logic; first-order logic with recursive
   definitions
ID DYNAMIC FRAMES; SEPARATION; BOOGIE
AB We propose a novel logic, Frame Logic (FL), that extends first-order logic and recursive definitions with a construct Sp(center dot) that captures the implicit supports of formulas-the precise subset of the universe upon which their meaning depends. Using such supports, we formulate proof rules that facilitate frame reasoning elegantly when the underlying model undergoes change. We show that the logic is expressive by capturing several data-structures and also exhibit a translation from a precise fragment of separation logic to frame logic. Finally, we design a program logic based on frame logic for reasoning with programs that dynamically update heaps that facilitates local specifications and frame reasoning. This program logic consists of both localized proof rules as well as rules that derive the weakest tightest preconditions in frame logic.
C1 [Murali, Adithya; Pena, Lucas; Madhusudan, P.] Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
   [Loeding, Christof] Rhein Westfal TH Aachen, Dept Comp Sci, Aachen, Germany.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   RWTH Aachen University
RP Murali, A (corresponding author), Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
EM adithya5@illinois.edu; lucaspena13@gmail.com;
   loeding@automata.rwth-aachen.de; madhu@illinois.edu
OI Murali, Adithya/0000-0002-6311-1467; Parthasarathy,
   Madhusudan/0000-0002-9782-721X
FU Amazon; Discovery Partners Institute (DPI) science team seed grant
FX This work is supported in part by a research grant from Amazon and a
   Discovery Partners Institute (DPI) science team seed grant. We also
   thank the reviewers of TOPLAS for their extensive comments, corrections,
   and suggestions that improved the article.
CR Aho A.V., 1979, 6TH P ACM S PRINC PR, V79, P110
   [Anonymous], 1981, READINGS ARTIFICIAL, DOI DOI 10.1016/B978-0-934613-03-3.50020-9
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   Banerjee A, 2008, LECT NOTES COMPUT SC, V5295, P177, DOI 10.1007/978-3-540-87873-5_16
   Banerjee A, 2008, LECT NOTES COMPUT SC, V5142, P387, DOI 10.1007/978-3-540-70592-5_17
   Banerjee A, 2013, J ACM, V60, DOI [10.1145/2487241.2485981, 10.1145/2485981]
   Banerjee A, 2013, J ACM, V60, DOI [10.1145/2487241.2485982, 10.1145/2485982]
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bobot Francois., 2012, Formal Methods and Software Engineering, volume 7635 of Lecture Notes in Computer Science, V7635, P167
   BORGIDA A, 1995, IEEE T SOFTWARE ENG, V21, P785, DOI 10.1109/32.469460
   BRINCK K, 1981, COMPUT J, V24, P148, DOI 10.1093/comjnl/24.2.148
   Brochenin R, 2008, LECT NOTES COMPUT SC, V5213, P323, DOI 10.1007/978-3-540-87531-4_24
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Brotherston J, 2011, LECT NOTES ARTIF INT, V6803, P131, DOI 10.1007/978-3-642-22438-6_12
   Calcagno C., 2001, LNCS, V2245, P108, DOI [10.1007/3-540-45294-X10, DOI 10.1007/3-540-45294-X10]
   Chandra A. K., 1980, 21st Annual Symposium on Foundations of Computer Science, P333, DOI 10.1109/SFCS.1980.41
   Chin WN, 2007, IEEE INT C ENG COMP, P307, DOI 10.1109/ICECCS.2007.17
   Cook B, 2011, LECT NOTES COMPUT SC, V6901, P235, DOI 10.1007/978-3-642-23217-6_16
   Demri Stephane, 2015, Journal of Applied Non-Classical Logics, V25, P50, DOI 10.1080/11663081.2015.1018801
   Denecker M, 2000, LECT NOTES ARTIF INT, V1861, P703
   Denecker M, 2014, FOURTEENTH INTERNATIONAL CONFERENCE ON THE PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING, P22
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Gotsman A, 2011, ELECTRON NOTES THEOR, V276, P171, DOI 10.1016/j.entcs.2011.09.021
   Hobor A, 2013, ACM SIGPLAN NOTICES, V48, P523, DOI 10.1145/2480359.2429131
   IMMERMAN N., 1982, P 14 ANN ACM S THEOR, P147
   Itzhaky S, 2014, LECT NOTES COMPUT SC, V8559, P35
   Itzhaky S, 2014, ACM SIGPLAN NOTICES, V49, P385, DOI 10.1145/2535838.2535854
   Itzhaky Shachar., 2013, CAV, P756, DOI 10.1007/978-3-642-39799-8_53
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jost Daniel, 2014, Verified Software: Theories, Tools, Experiments. 5th International Conference, VSTTE 2013. Revised Selected Papers: LNCS 8164, P202, DOI 10.1007/978-3-642-54108-7_11
   Kassios IT, 2011, FORM ASP COMPUT, V23, P267, DOI 10.1007/s00165-010-0152-5
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Kovacs Laura, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P1, DOI 10.1007/978-3-642-39799-8_1
   Kovács L, 2017, ACM SIGPLAN NOTICES, V52, P260, DOI 10.1145/3093333.3009887
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P308, DOI 10.1007/978-3-030-44914-8_12
   Krishnaswami Neelakantan R., 2009, P 4 INT WORKSHOP TYP, P105, DOI [10.1145/1481861.1481874, DOI 10.1145/1481861.1481874]
   Libkin Leonid, 2004, TEXT THEORET COMP S, DOI 10.1007/978-3-662-07003-1
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Madhusudan P, 2012, ACM SIGPLAN NOTICES, V47, P123, DOI 10.1145/2103621.2103673
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Murali A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563354
   Murali A, 2020, LECT NOTES COMPUT SC, V12075, P515, DOI 10.1007/978-3-030-44914-8_19
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   OHearn PeterW., 2012, NATO Science for Peace and Security Series, V33, P286, DOI [10.3233/978-1-61499-028-4-286, DOI 10.3233/978-1-61499-028-4-286]
   Oukseh Lee, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P592, DOI 10.1007/978-3-642-22110-1_48
   Pagel Jens, 2020, THESIS WIEN
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Parkinson MJ, 2011, LECT NOTES COMPUT SC, V6602, P439, DOI 10.1007/978-3-642-19718-5_23
   Pek E, 2014, ACM SIGPLAN NOTICES, V49, P440, DOI [10.1145/2594291.2594325, 10.1145/2666356.2594325]
   Perez Juan Antonio Navarro, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P90, DOI 10.1007/978-3-319-03542-0_7
   Pérez JAN, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P556
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Piskac R, 2014, LECT NOTES COMPUT SC, V8559, P711, DOI 10.1007/978-3-319-08867-9_47
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Qiu XK, 2013, ACM SIGPLAN NOTICES, V48, P231, DOI 10.1145/2499370.2462169
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K, 2009, LECT NOTES COMPUT SC, V5502, P378, DOI 10.1007/978-3-642-00590-9_27
   Sighireanu M, 2021, INT J SOFTW TOOLS TE, V23, P895, DOI 10.1007/s10009-021-00628-w
   Smans J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160911
   Smans J, 2009, LECT NOTES COMPUT SC, V5653, P148, DOI 10.1007/978-3-642-03013-0_8
   Suter P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P199, DOI 10.1145/1706299.1706325
   Ta QT, 2016, LECT NOTES COMPUT SC, V9995, P659, DOI 10.1007/978-3-319-48989-6_40
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Vardi M.Y., 1982, P 14 ANN ACM S THEOR, P137, DOI DOI 10.1145/800070.802186
NR 69
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2023
VL 45
IS 2
AR 7
DI 10.1145/3583057
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M2WV9
UT WOS:001028843500001
OA Bronze
DA 2024-07-18
ER

PT J
AU Lobo-Vesga, E
   Russo, A
   Gaboardi, M
AF Lobo-Vesga, Elisabet
   Russo, Alejandro
   Gaboardi, Marco
TI A Programming Language for Data Privacy with Accuracy Estimations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Accuracy; concentration bounds; differential privacy; databases; Haskell
ID DIFFERENTIAL PRIVACY; SENSITIVITY
AB Differential privacy offers a formal framework for reasoning about the privacy and accuracy of computations on private data. It also offers a rich set of building blocks for constructing private data analyses. When carefully calibrated, these analyses simultaneously guarantee the privacy of the individuals contributing their data, and the accuracy of the data analysis results, inferring useful properties about the population. The compositional nature of differential privacy has motivated the design and implementation of several programming languages to ease the implementation of differentially private analyses. Even though these programming languages provide support for reasoning about privacy, most of them disregard reasoning about the accuracy of data analyses. To overcome this limitation, we present DPella, a programming framework providing data analysts with support for reasoning about privacy, accuracy, and their trade-offs. The distinguishing feature of DPella is a novel component that statically tracks the accuracy of different data analyses. To provide tight accuracy estimations, this component leverages taint analysis for automatically inferring statistical independence of the different noise quantities added for guaranteeing privacy. We evaluate our approach by implementing several classical queries from the literature and showing how data analysts can calibrate the privacy parameters to meet the accuracy requirements, and vice versa.
C1 [Lobo-Vesga, Elisabet; Russo, Alejandro] Chalmers Univ Technol, Gothenburg, Sweden.
   [Gaboardi, Marco] Boston Univ, Boston, MA 02215 USA.
C3 Chalmers University of Technology; Boston University
RP Lobo-Vesga, E (corresponding author), Chalmers Univ Technol, Gothenburg, Sweden.
EM elilob@chalmers.se; russo@chalmers.se; gaboardi@bu.edu
RI Gaboardi, Marco/JPX-6816-2023
OI Russo, Alejandro/0000-0002-4338-6316
FU STINT Initiation grant [IB 2017-77023]; Swedish Foundation for Strategic
   Research (SSF) under the project Octopi [RIT17-0023]; Swedish Foundation
   for Strategic Research (SSF) under the project WebSec [RIT17-0011];
   Swedish research agency Vetenskapsradet; National Science Foundation
   [1718220, 1845803]; Division Of Computer and Network Systems; Direct For
   Computer & Info Scie & Enginr [1845803] Funding Source: National Science
   Foundation; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [1718220] Funding Source: National
   Science Foundation
FX This work was initiated by a STINT Initiation grant (IB 2017-77023) and
   supported by the Swedish Foundation for Strategic Research (SSF) under
   the project Octopi (Ref. RIT17-0023) and WebSec (Ref. RIT17-0011), as
   well as the Swedish research agency Vetenskapsradet. M. Gaboardi's work
   was partially funded by the National Science Foundation under grants
   1718220 and 1845803.
CR Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   Balle Borja, 2018, INT C MACH LEARN, P394
   Barthe G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434289
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, P IEEE CSFW, P411, DOI 10.1109/CSF.2014.36
   Barthe Gilles, 2016, P 43 INT C AUT LANG
   Blocki Jeremiah, 2013, P 4 C INN THEOR COMP
   Bun M, 2018, ACM S THEORY COMPUT, P74, DOI 10.1145/3188745.3188946
   Bun M, 2016, LECT NOTES COMPUT SC, V9985, P635, DOI 10.1007/978-3-662-53641-4_24
   Chan THH, 2011, ACM T INFORM SYST SE, V14, DOI 10.1145/2043621.2043626
   Cormode G, 2018, INT CONF MANAGE DATA, P131, DOI 10.1145/3183713.3196906
   Dubhashi DP, 2009, CONCENTRATION OF MEASURE FOR THE ANALYSIS OF RANDOMIZED ALGORITHMS, P1, DOI 10.1017/CBO9780511581274
   Dwork C., 2016, ARXIV160301887
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Dwork C, 2010, ANN IEEE SYMP FOUND, P51, DOI 10.1109/FOCS.2010.12
   Ebadi Hamid, 2017, J PRIVACY CONFIDENTI, V7, P159
   Eisenberg Richard A., 2014, P ACK SIGPLAN SIGACT
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Gaboardi Marco, 2016, ARXIV160904340
   Gaboardi Marco, 2014, P INT C MACH LEARN I
   Ge C, 2019, INT CONF MANAGE DATA, P177, DOI 10.1145/3299869.3300092
   Haeberlen A., 2011, P USENIX SEC S
   Hardt M, 2010, ACM S THEORY COMPUT, P705
   Hardt Moritz, 2012, Advances in Neural Information Processing Systems (NeuRIPS'12), V25, P2348
   Hay M, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P139, DOI 10.1145/2882903.2882931
   Hay M, 2010, PROC VLDB ENDOW, V3, P1021
   Johnson N, 2018, PROC VLDB ENDOW, V11, P526, DOI 10.1145/3177732.3177733
   Kotsogiannis I, 2019, PROC VLDB ENDOW, V12, P1371, DOI 10.14778/3342263.3342274
   Lampert C.H., 2018, ARXIV181101404
   Li C, 2015, VLDB J, V24, P757, DOI 10.1007/s00778-015-0398-x
   Li P, 2010, THEOR COMPUT SCI, V411, P1974, DOI 10.1016/j.tcs.2010.01.025
   Ligett Katrina, 2017, ARXIV170510829
   Lobo-Vesga E, 2020, P IEEE S SECUR PRIV, P411, DOI 10.1109/SP40000.2020.00086
   Machanavajjhala A, 2008, PROC INT CONF DATA, P277, DOI 10.1109/ICDE.2008.4497436
   McSherry F, 2010, ACM SIGCOMM COMP COM, V40, P123, DOI 10.1145/1851275.1851199
   McSherry F, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P19
   Mir DJ, 2013, IEEE INT CONF BIG DA
   Mironov I, 2017, P IEEE CSFW, P263, DOI 10.1109/CSF.2017.11
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mohan Prashanth, 2012, P 2012 ACM SIGMOD IN
   Narayan Arjun, 2012, P 10 USENIX S OP SYS
   Near JP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360598
   Nikolov A, 2013, STOC'13: PROCEEDINGS OF THE 2013 ACM SYMPOSIUM ON THEORY OF COMPUTING, P351
   Nissim K, 2007, ACM S THEORY COMPUT, P75, DOI 10.1145/1250790.1250803
   Proserpio D, 2014, PROC VLDB ENDOW, V7, P637, DOI 10.14778/2732296.2732300
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Roy I., 2010, NSDI, P20
   Russo A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P280, DOI 10.1145/2784731.2784756
   Russo A, 2009, ACM SIGPLAN NOTICES, V44, P13, DOI 10.1145/1543134.1411289
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Schoepe D, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P15, DOI 10.1109/EuroSP.2016.14
   Smith C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290352
   Terei D, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2430532.2364524
   Thaler J, 2012, LECT NOTES COMPUT SC, V7391, P810, DOI 10.1007/978-3-642-31594-7_68
   Winograd-Cort D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110254
   Xiao XK, 2011, IEEE T KNOWL DATA EN, V23, P1200, DOI 10.1109/TKDE.2010.247
   YuxinWang Zeyu Ding, 2019, P ACM SIGPLAN C PROG
   Zhang Dan, 2018, P INT C MAN DAT
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
   Zhang H., 2019, P ACM SIGPLAN INT C
NR 61
TC 1
Z9 2
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2021
VL 43
IS 2
AR 6
DI 10.1145/3452096
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TP4PI
UT WOS:000677577200002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Eilers, M
   Müller, P
   Hitz, S
AF Eilers, Marco
   Mueller, Peter
   Hitz, Samuel
TI Modular Product Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 27th European Symposium on Programming (ESOP)
CY APR 16-19, 2018
CL Thessaloniki, GREECE
DE Hyperproperties; product programs
ID SECURE INFORMATION-FLOW; VERIFICATION
AB Many interesting program properties like determinism or information flow security are hyperproperties, that is, they relate multiple executions of the same program. Hyperproperties can be verified using relational logics, but these logics require dedicated tool support and are difficult to automate. Alternatively, constructions such as self-composition represent multiple executions of a program by one product program, thereby reducing hyperproperties of the original program to trace properties of the product. However, existing constructions do not fully support procedure specifications, for instance, to derive the determinism of a caller from the determinism of a callee, making verification non-modular.
   We present modular product programs, a novel kind of product program that permits hyperproperties in procedure specifications and, thus, can reason about calls modularly. We provide a general formalization of our product construction and prove it sound and complete. We demonstrate its expressiveness by applying it to information flow security with advanced features such as declassification and termination-sensitivity. Modular product programs can be verified using off-the-shelf verifiers; we have implemented our approach for both secure information flow and general hyperproperties using the Viper verification infrastructure. Our evaluation demonstrates that modular product programs can be used to prove hyperproperties for challenging examples in reasonable time.
C1 [Eilers, Marco; Mueller, Peter; Hitz, Samuel] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Eilers, M (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM marco.eilers@inf.ethz.ch; peter.mueller@inf.ethz.ch;
   samuel.hitz@inf.ethz.ch
OI Eilers, Marco/0000-0003-4891-6950
FU Zurich Information Security and Privacy Center (ZISC)
FX We gratefully acknowledge support from the Zurich Information Security
   and Privacy Center (ZISC).
CR Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   [Anonymous], LNCS
   Antonopoulos T, 2017, ACM SIGPLAN NOTICES, V52, P362, DOI [10.1145/3140587.3062378, 10.1145/3062341.3062378]
   Banerjee A, 2002, P IEEE CSFW, P253
   Banerjee Anindya, 2016, TECHNICAL REPORT, V11, P1, DOI [10.4230/LIPIcs.FSTTCS.2016.11, DOI 10.4230/LIPICS.FSTTCS.2016.11]
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Barthe G, 2011, MATH STRUCT COMP SCI, V21, P1207, DOI 10.1017/S0960129511000193
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe Gilles, 2013, LOGICAL FDN COMPUTER, V7734, P29, DOI [10.1007/978--3-642--35722--0_3, DOI 10.1007/978--3-642--35722--0_3, DOI 10.1007/978-3-642-35722-03]
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Betts Adam, 2012, 27 ANN ACM SIGPLAN C, P113, DOI [10.1145/2384616.2384625, DOI 10.1145/2384616.2384625]
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Collingbourne P, 2013, LECT NOTES COMPUT SC, V7792, P270, DOI 10.1007/978-3-642-37036-6_16
   Costanzo David, 2014, LNCS, P179, DOI DOI 10.1007/978-3-642-54792-8_10
   Darvas A, 2005, LECT NOTES COMPUT SC, V3450, P193
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deng ZY, 2004, P IEEE CSFW, P115, DOI 10.1109/CSFW.2004.1310736
   Eilers Marco, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P502, DOI 10.1007/978-3-319-89884-1_18
   Elenbogen D, 2015, FORM METHOD SYST DES, V47, P204, DOI 10.1007/s10703-015-0234-3
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Giffhorn D, 2015, INT J INF SECUR, V14, P263, DOI 10.1007/s10207-014-0257-6
   Hawblitzel Chris, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P282, DOI 10.1007/978-3-642-38574-2_20
   Imanishi A, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P2, DOI 10.1145/3162070
   Küsters R, 2015, 2015 IEEE 28TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM CSF 2015, P305, DOI 10.1109/CSF.2015.28
   Lahiri ShuvenduK., 2013, ACM SIGSOFT S FDN SO, P345, DOI DOI 10.1145/2491411.2491452
   Leino KRM, 2008, LECT NOTES COMPUT SC, V4960, P307
   Li P, 2005, ACM SIGPLAN NOTICES, V40, P158, DOI 10.1145/1047659.1040319
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Müller P, 2016, LECT NOTES COMPUT SC, V9779, P405, DOI 10.1007/978-3-319-41528-4_22
   Naumann DA, 2006, LECT NOTES COMPUT SC, V4189, P279
   Pick L, 2018, LECT NOTES COMPUT SC, V10981, P164, DOI 10.1007/978-3-319-96145-3_9
   Prabawa A, 2018, LECT NOTES COMPUT SC, V10747, P430, DOI 10.1007/978-3-319-73721-8_20
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sabelfeld A, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P255, DOI 10.1109/CSFW.2005.15
   Sabelfeld A, 2004, LECT NOTES COMPUT SC, V3233, P174
   Smans J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160911
   Smith G, 2007, ADV INF SEC, P291
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 41
TC 9
Z9 9
U1 1
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2020
VL 42
IS 1
SI SI
AR 3
DI 10.1145/3324783
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KJ1TF
UT WOS:000511839200003
OA Green Published
DA 2024-07-18
ER

PT J
AU Darulova, E
   Kuncak, V
AF Darulova, Eva
   Kuncak, Viktor
TI Towards a Compiler for Reals
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Roundoff error; floating-point arithmetic; fixed-point arithmetic;
   verification; compilation; sensitivity analysis; discontinuity error;
   loops
AB Numerical software, common in scientific computing or embedded systems, inevitably uses a finite-precision approximation of the real arithmetic in which most algorithms are designed. In many applications, the roundoff errors introduced by finite-precision arithmetic are not the only source of inaccuracy, and measurement and other input errors further increase the uncertainty of the computed results. Adequate tools are needed to help users select suitable data types and evaluate the provided accuracy, especially for safety-critical applications.
   We present a source-to-source compiler called Rosa that takes as input a real-valued program with error specifications and synthesizes code over an appropriate floating-point or fixed-point data type. The main challenge of such a compiler is a fully automated, sound, and yet accurate-enough numerical error estimation. We introduce a unified technique for bounding roundoff errors from floating-point and fixed-point arithmetic of various precisions. The technique can handle nonlinear arithmetic, determine closed-form symbolic invariants for unbounded loops, and quantify the effects of discontinuities on numerical errors. We evaluate Rosa on a number of benchmarks from scientific computing and embedded systems and, comparing it to the state of the art in automated error estimation, show that it presents an interesting tradeoff between accuracy and performance.
C1 [Darulova, Eva; Kuncak, Viktor] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
   [Darulova, Eva] Campus E1-5, D-66125 Saarbrucken, Germany.
   [Kuncak, Viktor] EPFL IC LARA INR318, Stn 14, CH-1015 Lausanne, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne
RP Darulova, E (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.; Darulova, E (corresponding author), Campus E1-5, D-66125 Saarbrucken, Germany.
EM eva@mpi-sws.org; viktor.kuncak@epfl.ch
RI Darulova, Eva/AAV-5935-2021
OI Darulova, Eva/0000-0002-6848-3163; Kuncak, Viktor/0000-0001-7044-9522
FU European Research Council (ERC) project "Implicit Programming"
FX This work is supported in part by the European Research Council (ERC)
   project "Implicit Programming". A preliminary version of one part of
   this work appeared in the conference paper "Sound Compilation of Reals,"
   presented at the 2014 ACM SIGPLAN-SIGACT International Conference on
   Principles of Programming Languages (POPL). The current submission is a
   complete rewrite (except for algorithm 6) of the preliminary version,
   presents new and improved techniques, as well as new experimental
   evaluation.
CR [Anonymous], 2008, TACAS
   [Anonymous], FCCM
   [Anonymous], DATE
   [Anonymous], 2006, IEEE T CAD INTEGR CI
   [Anonymous], IJCAR
   [Anonymous], 2008, 7542008 IEEE, P1, DOI DOI 10.1109/IEEESTD.2008.4610935
   [Anonymous], 2013, SC
   Anta A., 2010, EMSOFT
   Ayad Ali, 2010, IJCAR
   Benz F., 2012, PLDI
   Blanchet B, 2003, PLDI
   Boldo S, 2011, MATH COMPUT SCI, V5, P377, DOI 10.1007/s11786-011-0099-9
   Brain M., 2015, ARITH
   Brillout A., 2009, FMCAD
   CEA-LIST, 2015, FRAM C SOFTW AN
   Chaudhuri Swarat, 2011, ESEC FSE ESEC FSE
   Chen L., 2008, APLAS
   Chiang W.-F., 2014, PPOPP
   Darulova E., 2014, POPL
   Darulova E., 2011, OOPSLA
   Demmel James, 2008, ACTA NUMER, V17
   Drane Theo, 2013, THESIS
   Feret Jerome, 2005, VMCAI
   Feret Jerome, 2004, ESOP
   Gazeau Ivan, 2012, QAPL
   Ghorbal Khalil, 2010, CAV
   Ghorbal Khalil, 2009, CAV
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   Goubault E., 2011, VMCAI
   Goubault E., 2013, APLAS
   Graillat Stef, 2014, TECHNICAL REPORT
   Haller Leopold, 2012, FMCAD
   Harrison John, 2006, FORMAL METHODS HARDW
   Higham N.J., 2002, ACCURACY STABILITY N, V2nd ed.
   ISO/IEC, 2008, 18037 ISOIEC TR
   Ivancic Franjo., 2010, MEMOCODE
   Jha Susmit, 2013, P 6 INT WORKSH NUM S
   Lam M. O., 2013, ICS
   Lam MO, 2013, PARALLEL COMPUT, V39, P146, DOI 10.1016/j.parco.2012.08.002
   Linderman Michael D., 2010, CGO
   Luiz H., 2004, NUMER ALGORITHMS, V37, P1
   Majumdar Rupak, 2010, MEMOCODE
   Mallik A, 2007, IEEE T COMPUT AID D, V26, P447, DOI 10.1109/TCAD.2006.888291
   Martel Matthieu, 2002, SAS
   Mine Antoine, 2004, ESOP
   Moore R. E., 1966, INTERVAL ANAL
   Paganelli Gabriele, 2013, SYNASC
   Scott N. Stan, 2007, COMPUTER PHYS COMMUN
   Solovyev A., 2015, FM
   Tang E., 2010, ISSTA
   Woodford Chris, 2012, NUMERICAL METHODS WO, V2nd
   Yates R., 2013, TECHNICAL REPORT
NR 52
TC 58
Z9 64
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2017
VL 39
IS 2
AR 8
DI 10.1145/3014426
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FA1IG
UT WOS:000405192200003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Esparza, J
   Ganty, P
   Poch, T
AF Esparza, Javier
   Ganty, Pierre
   Poch, Tomas
TI Pattern-Based Verification for Multithreaded Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Verification; Reliability; Concurrent
   programming; context-free languages; multithreaded programs; safety;
   underapproximation
ID CONTEXT; REACHABILITY; COMPLEXITY
AB Pattern-based verification checks the correctness of program executions that follow a given pattern, a regular expression over the alphabet of program transitions of the form w(1)* ... w(n)*. For multithreaded programs, the alphabet of the pattern is given by the reads and writes to the shared storage. We study the complexity of pattern-based verification for multithreaded programs with shared counters and finite variables. While unrestricted verification is undecidable for abstracted multithreaded programs with recursive procedures and PSPACE-complete for abstracted multithreaded while-programs (even without counters), we show that pattern-based verification is NP-complete for both classes, even in the presence of counters. We then conduct a multiparameter analysis to study the complexity of the problem on its three natural parameters (number of threads+counters+variables, maximal size of a thread, size of the pattern) and on two parameters related to thread structure (maximal number of procedures per thread and longest simple path of procedure calls). We present an algorithm that for a fixed number of threads, counters, variables, and pattern size solves the verification problem in st(O(lsp+[log(pr+1)])) time, where st is the maximal size of a thread, pr is the maximal number of procedures per thread, and lsp is the longest simple path of procedure calls.
C1 [Esparza, Javier] Tech Univ Munich, Fak Informat, D-80290 Munich, Germany.
   [Ganty, Pierre] IMDEA Software Inst, Madrid, Spain.
   Charles Univ Prague, Fac Math & Phys, CR-11636 Prague 1, Czech Republic.
C3 Technical University of Munich; IMDEA Software Institute; Charles
   University Prague
RP Esparza, J (corresponding author), Tech Univ Munich, Fak Informat, D-80290 Munich, Germany.
EM esparza@in.tum.de; pierre.ganty@imdea.org; tomas.poch@d3s.mff.cuni.cz
OI Esparza, Javier/0000-0001-9862-4919
CR ANDREWS T, 2004, MSRTR200410
   [Anonymous], 1978, P AM MATH SOC, DOI DOI 10.1090/S0002-9939-1978-0500555-0
   Atig MF, 2008, LECT NOTES COMPUT SC, V5201, P356, DOI 10.1007/978-3-540-85361-9_29
   Atig MF, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(4:04)2011
   Atig Mohamed Faouzi, 2008, P 12 INT C DEV LANG, P121
   Bouaijani A, 2005, LECT NOTES COMPUT SC, V3653, P473, DOI 10.1007/11539452_36
   Esparza J., 1997, Fundamenta Informaticae, V31, P13
   Esparza J, 2011, INFORM PROCESS LETT, V111, P614, DOI 10.1016/j.ipl.2011.03.019
   Ganty P, 2012, FORM METHOD SYST DES, V40, P206, DOI 10.1007/s10703-011-0136-y
   Garey M.R., 1979, COMPUTERS INTRACTABI
   Ginsburg S., 1966, The mathematical theory of context-free languages
   GURARI EM, 1981, J COMPUT SYST SCI, V22, P220, DOI 10.1016/0022-0000(81)90028-3
   Hague Matthew, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P260, DOI 10.1007/978-3-642-31424-7_22
   Hague M, 2011, LEIBNIZ INT PR INFOR, V13, P457, DOI 10.4230/LIPIcs.FSTTCS.2011.457
   Hopcroft John E., 1979, COMMUNICATION
   Kahlon V, 2009, Patent No. [WO/2009/094439, 2009094439]
   Kahlon V, 2007, ACM SIGPLAN NOTICES, V42, P303, DOI 10.1145/1190215.1190262
   Kahlon V, 2009, IEEE S LOG, P27, DOI 10.1109/LICS.2009.45
   Kaiser A, 2010, LECT NOTES COMPUT SC, V6174, P645
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   Lal A, 2008, LECT NOTES COMPUT SC, V4963, P282, DOI 10.1007/978-3-540-78800-3_20
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Long Z, 2012, LECT NOTES COMPUT SC, V7212, P362, DOI 10.1007/978-3-642-28872-2_25
   Musuvathi M, 2007, ACM SIGPLAN NOTICES, V42, P446, DOI 10.1145/1273442.1250785
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Qadeer S, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/996893.996845
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Suwimonteerabuth D, 2008, LECT NOTES COMPUT SC, V5156, P270, DOI 10.1007/978-3-540-85114-1_19
   Verma KN, 2005, LECT NOTES ARTIF INT, V3632, P337
NR 30
TC 12
Z9 12
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2014
VL 36
IS 3
AR 9
DI 10.1145/2629644
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS5OI
UT WOS:000344319500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Barthe, G
   Köpf, B
   Olmedo, F
   Zanella-Béguelin, S
AF Barthe, Gilles
   Koepf, Boris
   Olmedo, Federico
   Zanella-Beguelin, Santiago
TI Probabilistic Relational Reasoning for Differential Privacy
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Security; Theory; Verification; Coq proof assistant;
   differential privacy; relational Hoare logic
ID SECURE INFORMATION-FLOW; PROOFS; NOISE
AB Differential privacy is a notion of confidentiality that allows useful computations on sensible data while protecting the privacy of individuals. Proving differential privacy is a difficult and error-prone task that calls for principled approaches and tool support. Approaches based on linear types and static analysis have recently emerged; however, an increasing number of programs achieve privacy using techniques that fall out of their scope. Examples include programs that aim for weaker, approximate differential privacy guarantees and programs that achieve differential privacy without using any standard mechanisms. Providing support for reasoning about the privacy of such programs has been an open problem.
   We report on CertiPriv, a machine-checked framework for reasoning about differential privacy built on top of the Coq proof assistant. The central component of CertiPriv is a quantitative extension of probabilistic relational Hoare logic that enables one to derive differential privacy guarantees for programs from first principles. We demonstrate the applicability of CertiPriv on a number of examples whose formal analysis is out of the reach of previous techniques. In particular, we provide the first machine-checked proofs of correctness of the Laplacian, Gaussian, and exponential mechanisms and of the privacy of randomized and streaming algorithms from the literature.
C1 [Barthe, Gilles; Koepf, Boris; Olmedo, Federico] IMDEA Software Inst, Madrid, Spain.
   [Zanella-Beguelin, Santiago] Microsoft Res, Cambridge CB1 2FB, England.
C3 IMDEA Software Institute; Microsoft
RP Zanella-Béguelin, S (corresponding author), Microsoft Res, 21 Stn Rd, Cambridge CB1 2FB, England.
EM santiago@microsoft.com
OI Zanella Beguelin, Santiago/0000-0003-0479-9967; BARTHE,
   Gilles/0000-0002-3853-1777; Olmedo, Federico/0000-0003-0217-6483
FU [FP7-256980 NESSoS];  [FP7-229599 AMAROUT];  [TIN2009-14599 DESAFIOS
   10];  [S2009TIC-1465 PROMETIDOS];  [ANR SESUR-012 SCALP]
FX This work was supported by European Projects FP7-256980 NESSoS and
   FP7-229599 AMAROUT, Spanish project TIN2009-14599 DESAFIOS 10, Madrid
   Regional project S2009TIC-1465 PROMETIDOS, and French project ANR
   SESUR-012 SCALP.
CR Almeida J.B., 2012, IPTH ACM C COMPUTER, P488, DOI DOI 10.1145/2382196.2382249
   Amtoft T, 2006, ACM SIGPLAN NOTICES, V41, P91, DOI 10.1145/1111320.1111046
   Amtoft T, 2004, LECT NOTES COMPUT SC, V3148, P100
   [Anonymous], 2022, COQ PROOF ASSISTANT
   [Anonymous], 1992, Network programming
   [Anonymous], 2001, Handbook of Process Algebra, DOI DOI 10.1016/B978-044482830-9/50029-1
   [Anonymous], 2009, Privacy integrated queries: an extensible platform for privacy-preserving data analysis
   Audebaud P, 2009, SCI COMPUT PROGRAM, V74, P568, DOI 10.1016/j.scico.2007.09.002
   Backes M, 2009, P IEEE S SECUR PRIV, P141, DOI 10.1109/SP.2009.18
   Baelde David, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P201, DOI 10.1007/978-3-642-32347-8_14
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Barthe G, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P191, DOI 10.1109/CSF.2011.20
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Barthe G, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2103621.2103670
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe Gilles, 2013, P 26 IEEE COMP SEC F
   Barthe Gilles, 2013, LECT NOTES COMPUTER, V7966
   Beimel A, 2008, LECT NOTES COMPUT SC, V5157, P451, DOI 10.1007/978-3-540-85174-5_25
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Burnim J, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P3, DOI 10.1145/1595696.1595700
   Chadha R, 2007, THEOR COMPUT SCI, V379, P142, DOI 10.1016/j.tcs.2007.02.040
   Chan THH, 2010, LECT NOTES COMPUT SC, V6199, P405, DOI 10.1007/978-3-642-14162-1_34
   Chaudhuri S., 2011, P 19 ACM SIGSOFT S 1, P102, DOI DOI 10.1145/2025113.2025131
   Clark D, 2007, J COMPUT SECUR, V15, P321, DOI 10.3233/JCS-2007-15302
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Coble AR, 2008, LECT NOTES COMPUT SC, V5134, P77, DOI 10.1007/978-3-540-70630-4_6
   Coble AR, 2010, UCAMCLTR785
   den Hartog J. I., 1999, Advances in Computing Science-ASIAN'99. 5th Asian Computing Science Conference. Proceedings (Lecture Notes in Computer Science Vol. 1742), P113
   Desharnais J, 2008, INT CONF QUANT EVAL, P264, DOI 10.1109/QEST.2008.42
   Di Pierro A., 2004, Journal of Computer Security, V12, P37
   Dwork C, 2008, LECT NOTES COMPUT SC, V4978, P1, DOI 10.1007/978-3-540-79228-4_1
   Dwork C, 2006, LECT NOTES COMPUT SC, V4004, P486
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2011, COMMUN ACM, V54, P86, DOI 10.1145/1866739.1866758
   Dwork C, 2010, ANN IEEE SYMP FOUND, P51, DOI 10.1109/FOCS.2010.12
   FELDMAN YA, 1984, J COMPUT SYST SCI, V28, P193, DOI 10.1016/0022-0000(84)90065-5
   Goldfarb D, 1997, MATH OPER RES, V22, P793, DOI 10.1287/moor.22.4.793
   Gupta A, 2010, PROC APPL MATH, V135, P1106
   Haeberlen A., 2011, P 20 USENIX SEC S US
   Hurd J, 2005, THEOR COMPUT SCI, V346, P96, DOI 10.1016/j.tcs.2005.08.005
   Hurd J, 2003, UCAMCLTR566
   Jones Claire, 1993, THESIS U EDINBURGH
   Kifer Daniel, 2011, ACM INT C MANAGEMENT, P193
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Lawler EL, 2001, COMBINATORIAL OPTIMI
   McSherry F, 2007, ANN IEEE SYMP FOUND, P94, DOI 10.1109/FOCS.2007.66
   Mhamdi Tarek, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P233, DOI 10.1007/978-3-642-22863-6_18
   Mhamdi T, 2010, LECT NOTES COMPUT SC, V6172, P387, DOI 10.1007/978-3-642-14052-5_27
   Mironov I, 2009, LECT NOTES COMPUT SC, V5677, P126, DOI 10.1007/978-3-642-03356-8_8
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Nikolov Aleksandar, 2012, P ACM S THEOR COMP
   Pitt L., 1985, TR404 YAL U
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Reed J, 2010, ACM SIGPLAN NOTICES, V45, P157, DOI 10.1145/1932681.1863568
   Reif J.H., 1980, STOC'80: Proceedings of the twelfth annual ACM symposium on Theory of computing, P8
   Roy I., 2010, NSDI, P20
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   Segala R, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P140, DOI 10.1109/CSF.2007.8
   Smith A., 2008, 2008144 CRYPT EPRINT
   Tardos E, 1998, LECT NOTES COMPUT SC, V1412, P310
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Tschantz MC, 2011, ELECTRON NOTES THEOR, V276, P61, DOI 10.1016/j.entcs.2011.09.015
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
NR 64
TC 42
Z9 47
U1 0
U2 13
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2013
VL 35
IS 3
AR 9
DI 10.1145/2492061
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 258BG
UT WOS:000327432300001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Smans, J
   Jacobs, B
   Piessens, F
AF Smans, Jan
   Jacobs, Bart
   Piessens, Frank
TI Implicit Dynamic Frames
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Program verification; frame problem; separation logic
AB An important, challenging problem in the verification of imperative programs with shared, mutable state is the frame problem in the presence of data abstraction. That is, one must be able to specify and verify upper bounds on the set of memory locations a method can read and write without exposing that method's implementation.
   Separation logic is now widely considered the most promising solution to this problem. However, unlike conventional verification approaches, separation logic assertions cannot mention heap-dependent expressions from the host programming language, such as method calls familiar to many developers. Moreover, separation logic-based verifiers are often based on symbolic execution. These symbolic execution-based verifiers typically do not support non-separating conjunction, and some of them rely on the developer to explicitly fold and unfold predicate definitions. Furthermore, several researchers have wondered whether it is possible to use verification condition generation and standard first-order provers instead of symbolic execution to automatically verify conformance with a separation logic specification.
   In this article, we propose a variant of separation logic called implicit dynamic frames that supports heap-dependent expressions inside assertions. Conformance with an implicit dynamic frames specification can be checked by proving the validity of a number of first-order verification conditions. To show that these verification conditions can be discharged automatically by standard first-order provers, we have implemented our approach in a verifier prototype and have used this prototype to verify several challenging examples from related work. Our prototype automatically folds and unfolds predicate definitions, as required, during the proof and can reason about non-separating conjunction which is used in the specifications of some of these examples. Finally, we prove the soundness of the approach.
C1 [Smans, Jan; Jacobs, Bart; Piessens, Frank] Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
C3 KU Leuven
RP Smans, J (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
EM jan.smans@cs.kuleuven.be
RI Piessens, Frank/B-1695-2014; Jacobs, Bart/B-1271-2014
OI Jacobs, Bart/0000-0002-3605-249X
CR BANERJEE A., 2008, P EUR C OBJ OR PROGR
   BARNETT M, 2004, P INT C MATH PROGR C
   BARNETT M., 2010, P ACM S APPL COMP SA
   BARNETT M., 2003, J OBJ TECHNOL, V3, P6
   Beckert Bernhard, 2007, Verification of Object-oriented Software: The KeY Approach, DOI DOI 10.1007/978-3-540-69061-0
   BERDINE J., 2005, P AS S PROGR LANG SY
   BORNAT R, 2000, P INT C MATH PROGR C
   BOYLAND J, 2003, P INT S STAT AN
   BURDY L., 2005, INT J SOFTW TOOLS TE, V7, P3
   CALCAGNO C., 2009, P S PRINC PROGR LANG
   DAHLWEID M., 2009, P INT C SOFTW ENG IC
   DARVAS A, 2007, P INT C FUND APPR SO
   De Moura L., 2008, P INT C TOOLS ALG CO
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dijkstra E. W., 1975, COMMUN ACM, V18, P8
   Dinsdale-Young Thomas, 2010, P EUR C OBJ OR PROGR
   DISTEFANO D, 2008, P C OBJ OR PROGR SYS
   *ECMA INT, 2006, ECMA367
   FLANAGAN C., 2002, P C PROGR LANG DES I
   Gamma Erich., 1994, DESIGN PATTERNS
   Haack C, 2009, J OBJECT TECHNOL, V8, P55, DOI 10.5381/jot.2009.8.4.a3
   HOBOR A., 2008, P EUR S PROGR ESOP
   JACOBS B., 2010, P AS S PROGR LANG SY
   JACOBS B., 2008, P SPEC VER COMP BAS
   JACOBS B, 2011, P S PRINC PROGR LANG
   Jacobs B, 2007, J OBJECT TECHNOL, V6, P5
   Jacobs B, 2008, ACM T PROGR LANG SYS, V31, DOI 10.1145/1452044.1452045
   KASSIOS Y, 2006, P INT S FORM METH FM
   Krishnaswami N.R., 2006, SAVCBS
   KUNCAK V., 2008, P C PROGR LANG DES I
   LEAVENS G. T., 2007, FORM ASP COMPUT, V19, P2
   LEAVENS G. T, 2006, P INT C FORM ENG MET
   LEINO K, 2004, P EUR C OBJ OR PROGR
   LEINO K. R. M, 2010, P INT C LOG PROGR AR
   LEINO K. R. M, 2009, P INT C FUND APPR SO
   LEINO K. R. M, 2009, P EUR S PROGR ESOP
   LEINO K. R. M., 2002, P C PROGR LANG DES I
   LEINO K. R. M, 2007, P EUR S PROGR ESOP
   LEINO K. R. M., 2010, P EUR S PROGR ESOP
   LEINO K. R. M, 2002, ACM T PROGR LANG SYS, V24, P5
   Leino K. R. M., 2009, P ACM S APPL COMP SA
   MALECHA G, 2010, P INT C THEOR ASP CO
   MIDDELKOOP R., 2008, P BRAZ S FORM METH S
   MULLER P, 2011, P INT S FORM METH FM
   MULLER P, 2001, THESIS FERN U HAGEN
   NANEVSKI A., 2008, P INT C FUNCT PROGR
   NANEVSKI A., 2010, P S PRINC PROGR LANG
   NGUYEN H. H., 2007, P C VER MOD CHECK AB
   NGUYEN H. H., 2008, P C VER MOD CHECK AB
   O'Hearn Peter, 2001, P INT WORKSH COMP SC
   OWICKI S, 1976, COMMUN ACM, V19, P5
   PARIENTE D, 2010, P INT C FORM VER OBJ
   PARKINSON M, 2005, P S PRINC PROGR LANG
   PARKINSON M, 2011, P EUR S PROGR ESOP
   PARKINSON M, 2008, P S PRINC PROGR LANG
   Parkinson M., 2007, P INT WORKSH AL CONF
   Parkinson Matthew, 2005, Ph. D. Dissertation
   REYNOLDS J, 2002, P S LOG COMP SCI LIC
   RIVAL X, 2011, P S PRINC PROGR LANG
   ROSENBERG S., 2010, P INT C VER SOFTW TH
   RUDICH A., 2008, P INT S FORM METH FM
   Schoeller Bernd., 2007, Making classes provable through contracts, models and frames
   SMANS J., 2009, P EUR C OBJ OR PROGR
   SMANS J., 2008, P INT C FUND APPR SO
   SMANS J., 2010, P INT C FORM TECHN D
   SUMMERS A. J, 2010, P C VER MOD CHECK AB
   TUCH H., 2007, P S PRINC PROGR LANG
   TUERK T, 2009, P INT C THEOR PROV H
   Tuerk T., 2010, VS THEORY
   VAN STADEN S., 2010, P EUR C OBJ OR PROGR
   VILLARD J., 2009, P AS S PROGR LANG SY
   [No title captured]
NR 72
TC 28
Z9 30
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2012
VL 34
IS 1
AR 2
DI 10.1145/2160910.2160911
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 933BD
UT WOS:000303333300002
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Tse, S
   Zdancewic, S
AF Tse, Stephen
   Zdancewic, Steve
TI Run-time principals in information-flow type systems
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; languages; security; decentralized label model; dynamic
   principals; information-flow; noninterference; run-time principals;
   security-typed language; soundness; type systems
ID ACCESS-CONTROL
AB Information-flow type systems are a promising approach for enforcing strong end-to-end confidentiality and integrity policies. Such policies, however, are usually specified in terms of static information-data is labeled high or low security at compile time. In practice, the confidentiality of data may depend on information available only while the system is running.
   This article studies language support for run-time principals, a mechanism for specifying security policies that depend on which principals interact with the system. We establish the basic property of noninterference for programs written in such language, and use run-time principals for specifying run-time authority in downgrading mechanisms such as declassification.
   In addition to allowing more expressive security policies, run-time principals enable the integration of language-based security mechanisms with other existing approaches such as Java stack inspection and public key infrastructures. We sketch an implementation of run-time principals via public keys such that principal delegation is verified by certificate chains.
C1 [Tse, Stephen; Zdancewic, Steve] Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Tse, S (corresponding author), Univ Penn, Dept Comp & Informat Sci, 3330 Walnut St, Philadelphia, PA 19104 USA.
EM stse@cis.upenn.edu; stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P706, DOI 10.1145/155183.155225
   Abadi M., 1998, Journal of Computer Security, V6, P3
   Abadi Martin., 1999, POPL, P147, DOI [10.1145/292540.292555, DOI 10.1145/292540.292555]
   [Anonymous], P ACM INT C FUNCT PR
   [Anonymous], 2000, P POPL 00
   [Anonymous], 2003, P 1 APPSEM 2 WORKSHO
   [Anonymous], P ACM S PRINC PROGR
   ASPINALL D, 1994, COMPUTER SCI LOGIC, P1
   Banerjee A, 2003, P IEEE CSFW, P155, DOI 10.1109/CSFW.2003.1212711
   Banerjee A, 2002, P IEEE CSFW, P253
   BOAS PV, 1977, MATH SYST THEORY, V10, P99
   BOAS PV, 1977, INFORMATION PROCESSI, V6, P80
   Chothia T, 2003, P IEEE CSFW, P170, DOI 10.1109/CSFW.2003.1212712
   Crary K, 2005, J FUNCT PROGRAM, V15, P249, DOI 10.1017/S0956796804005441
   Crary K, 2002, J FUNCT PROGRAM, V12, P567, DOI 10.1017/S0956796801004282
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   Fournet Cedric., 2002, POPL 02, P307
   Gasser M., 1990, Proceedings. 1990 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.90CH2884-5), P20, DOI 10.1109/RISP.1990.63835
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   GUNTER CA, 2000, P 27 ACM SIGPLAN SIG, P316
   Heintze Nevin., 1998, P 25 ACM SIGPLAN SIG, P365, DOI [DOI 10.1145/268946.268976, 10.1145/268946.268976]
   Howell J, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P151
   Jim T, 2001, P IEEE S SECUR PRIV, P106, DOI 10.1109/SECPRI.2001.924291
   Jouvelot Pierre., 1991, ACM SIGACTSIGPLAN S, P303, DOI DOI 10.1145/99583.99623
   Li P., 2003, Proceedings of the Workshop on Formal Aspects in Security Trust (FAST), P53
   MITCHELL JC, 1996, FOUNDATIONS PRORAMMI
   Myers AC, 2004, P IEEE CSFW, P172, DOI 10.1109/CSFW.2004.1310740
   Myers AC, 2000, ACM T SOFTW ENG METH, V9, P410, DOI 10.1145/363516.363526
   Myers AC, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P186, DOI 10.1109/SECPRI.1998.674834
   MYERS AC, 1999, JIF JAVA INFO FLOW
   Myers AC, 2006, J COMPUT SECUR, V14, P157, DOI 10.3233/JCS-2006-14203
   PASCAL A, 1992, P 7 ANN C OBJ OR PRO, P110
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PITTS A, 1998, P INT COLL AUT LANG, P309
   POTTIER F, 2001, P EUR S PROGR, P344
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   SHALIT A, 1997, DYLAN REFERENCE MANU
   Simonet V, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180476
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   STROUSTRUP B, 1997, C PLUS PLUS PROGRAMM
   STROUSTRUP B, 1994, DESIGN EVOLUTION C P
   TSE S, 2005, P EUR S PROGR
   TSE S, 2004, P IEEE S SEC PRIV
   Vitek J., 1994, Object-Oriented Programming. 8th European Conference, ECOOP '94. Proceedings, P432, DOI 10.1007/BFb0052195
   VITEK J, 1996, LECT NOTES COMPUTER, V1060, P309
   VITEK J, 1995, THESIS U VICTORIA VI
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
   Wallach DS, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P52, DOI 10.1109/SECPRI.1998.674823
   WILLARD DE, 1984, J COMPUT SYST SCI, V28, P379, DOI 10.1016/0022-0000(84)90020-5
   Zdancewic S., 2002, Higher-Order and Symbolic Computation, V15, P209, DOI 10.1023/A:1020843229247
   Zdancewic S, 2001, LECT NOTES COMPUT SC, V2028, P46
   ZDANCEWIC S, 2003, P 19 C MATH FOUND PR
   Zendra O, 1997, ACM SIGPLAN NOTICES, V32, P125, DOI 10.1145/263700.263728
   ZHENG L, 2004, FORMAL ASPECTS SECUR
   Zibin Y, 2002, ACM SIGPLAN NOTICES, V37, P142, DOI 10.1145/583854.582434
   Zibin Y, 2001, ACM SIGPLAN NOTICES, V36, P96, DOI 10.1145/504311.504290
   ZIBIN Y, 2003, P 30 ACM SIGPLAN SIG, P126
NR 60
TC 10
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 1
AR 6
DI 10.1145/1290520.1290526
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248KY
UT WOS:000252153400006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Fournet, C
   Gordon, AD
   Maffeis, S
AF Fournet, Citdric
   Gordon, Andrew D.
   Maffeis, Sergio
TI A type discipline for authorization policies
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 14th European Symposium on Programming (ESOP 2005)
CY APR 04-08, 2005
CL Edinburgh, SCOTLAND
DE authorization; type systems; process calculus; spi calculus
ID TRUST MANAGEMENT; ACCESS-CONTROL; CALCULUS; SECURITY; SECRECY
AB Distributed systems and applications are often expected to enforce high-level authorization policies. To this end, the code for these systems relies on lower-level security mechanisms such as digital signatures, local ACLs, and encrypted communications. In principle, authorization specifications can be separated from code and carefully audited. Logic programs in particular can express policies in a simple, abstract manner.
   We consider the problem of checking whether a distributed implementation based on communication channels and cryptography complies with a logical authorization policy. We formalize authorization policies and their connection to code by embedding logical predicates and claims within a process calculus. We formulate policy compliance operationally by composing a process model of the distributed system with an arbitrary opponent process. Moreover, we propose a dependent type system for verifying policy compliance of implementation code. Using Datalog as an authorization logic, we show how to type several examples using policies and present a general schema for compiling policies.
C1 Microsoft Res, Cambridge CB3 0FB, England.
   Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2AZ, England.
C3 Microsoft; Imperial College London
RP Fournet, C (corresponding author), Microsoft Res, 7 JJ Thomson Ave, Cambridge CB3 0FB, England.
EM adg@microsoft.com
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P706, DOI 10.1145/155183.155225
   Abadi M, 1999, INFORM COMPUT, V148, P1, DOI 10.1006/inco.1998.2740
   Abadi M, 1999, J ACM, V46, P749, DOI 10.1145/324133.324266
   Abadi M., 1998, Journal of Computer Security, V6, P3
   [Anonymous], 2000, P INT SCH FDN SEC AN
   Becker MY, 2004, P IEEE CSFW, P139, DOI 10.1109/CSFW.2004.1310738
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2477, P342
   Blaze M, 1996, P IEEE S SECUR PRIV, P164, DOI 10.1109/SECPRI.1996.502679
   Braghin C, 2004, P IEEE CSFW, P48, DOI 10.1109/CSFW.2004.1310731
   Bugliesi M, 2004, LECT NOTES COMPUT SC, V3170, P225
   Bugliesi M, 2004, ACM T PROGR LANG SYS, V26, P57, DOI 10.1145/963778.963781
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   *CONTENTGUARD, 2002, XRML 2 0 TECHN OV
   DENICOLA R, 2000, LNCS, V1877, P48
   DeTreville J, 2002, P IEEE S SECUR PRIV, P105, DOI 10.1109/SECPRI.2002.1004365
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Duggan D, 2002, P IEEE CSFW, P238, DOI 10.1109/CSFW.2002.1021819
   Fournet C, 2005, LECT NOTES COMPUT SC, V3444, P141
   FOURNET C, 2005, MSRTR200501
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   Gordon AD, 2005, LECT NOTES COMPUT SC, V3653, P186, DOI 10.1007/11539452_17
   Gordon AD, 2003, THEOR COMPUT SCI, V300, P379, DOI 10.1016/S0304-3975(02)00333-X
   GORDON AD, 2002, CRYPTYC CRYPTOGRAPHI
   GORDON AD, 2002, LNCS, V2609, P270
   GUELEV DP, 2004, LECT NOTES COMPUTER, V3225
   Guttman JD, 2004, LECT NOTES COMPUT SC, V2986, P325
   Jim T, 2001, P IEEE S SECUR PRIV, P106, DOI 10.1109/SECPRI.2001.924291
   JONES AK, 1978, COMMUN ACM, V21, P358, DOI 10.1145/359488.359493
   LAMPSON B, 1971, ACM OPER SYST REV, V8, P1
   LAMPSON BW, 1974, ACM OPERATING SYSTEM, V8, P18
   MAFFEI M, 2006, THESIS U CAFOSCARI V
   Martin-Lof P., 1984, Intuitionistic type theory
   Milner Robin., 1999, COMUNICATING MOBILE
   Myers AC, 2000, ACM T SOFTW ENG METH, V9, P410, DOI 10.1145/363516.363526
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pierce Benjamin C., 1996, MATH STRUCTURES COMP, V6, P5
   Sagiv Y., 1987, P 6 ACM SIGACT SIGMO, DOI [10.1145/28659.28696, DOI 10.1145/28659.28696]
   Woo T. Y. C., 1993, Proceedings 1993 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.93CH3290-4), P178, DOI 10.1109/RISP.1993.287633
NR 38
TC 17
Z9 18
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 5
AR 25
DI 10.1145/1275497.1275500
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208NR
UT WOS:000249327000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Abadi, M
   Flanagan, C
   Freund, SN
AF Abadi, M
   Flanagan, C
   Freund, SN
TI Types for safe locking: Static race detection for Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; verification; reliability; concurrent programs; race
   conditions; type system; type inference
AB This article presents a static race-detection analysis for multithreaded shared-memory programs, focusing on the Java programming language. The analysis is based on a type system that captures many common synchronization patterns. It supports classes with internal synchronization, classes that require client-side synchronization, and thread-local classes. In order to demonstrate the effectiveness of the type system, we have implemented it in a checker and applied it to over 40,000 lines of hand-annotated Java code. We found a number of race conditions in the standard Java libraries and other test programs. The checker required fewer than 20 additional type annotations per 1,000 lines of code. This article also describes two improvements that facilitate checking much larger programs: an algorithm for annotation inference and a user interface that clarifies warnings generated by the checker. These extensions have enabled us to use the checker for identifying race conditions in large-scale software systems with up to 500,000 lines of code.
C1 Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
   Williams Coll, Dept Comp Sci, Williamstown, MA 01267 USA.
C3 University of California System; University of California Santa Cruz;
   Williams College
EM abadi@cs.ucsc.edu; cormac@cs.ucsc.edu; freund@cs.williams.edu
CR AGESEN O, 1997, P OOPSLA 97, P49
   AIKEN A, 1998, P 25 S PRINC PROGR L, P243
   Aldrich J, 1999, LECT NOTES COMPUT SC, V1694, P19
   [Anonymous], J FUNCTIONAL PROGRAM
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], 1999, P OBJ OR SYST LANG
   [Anonymous], 1989, 35 DIG EQ CORP SYST
   [Anonymous], 1993, P WINT 1993 US C
   [Anonymous], POPL 88
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   BACON DF, 2001, P ACM C OBJ OR PROGR, P382
   BLANCHET B, 1999, P 1999 ACM SIGPLAN C, P20
   Bogda J, 1999, ACM SIGPLAN NOTICES, V34, P35, DOI 10.1145/320385.320388
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR, P56
   BOYAPATI C, 2002, P 17 ACM SIGPLAN C O, P211
   BRACHA G, 1998, P ACM S OBJ OR PROGR, P183
   CARDELLI L, 1988, LECT NOTES COMPUT SC, V306, P45
   CARDELLI L, 1997, 1997013 DIG SYST RES
   CARTWRIGHT R, 1998, P ACM S OBJ OR PROGR, P201
   Chamillard A. T., 1996, 96084 U MASS AMH DEP
   Choi J.-D., 2002, PROGRAMMING LANGUAGE, P258
   Corbett JC, 1996, IEEE T SOFTWARE ENG, V22, P161, DOI 10.1109/32.489078
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   DETLEFS DL, 1998, 159 COMP SYST RES CT
   Drossopoulou S, 1997, LECT NOTES COMPUT SC, V1241, P389, DOI 10.1007/BFb0053388
   DWYER MB, 1994, 94045 U MASS AMH DEP
   Fajstrup L, 1998, LECT NOTES COMPUT SC, V1466, P332, DOI 10.1007/BFb0055632
   Flanagan C, 2004, LECT NOTES COMPUT SC, V3148, P116
   Flanagan C, 2001, INFORM PROCESS LETT, V77, P97, DOI 10.1016/S0020-0190(00)00196-4
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1576, P91
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1664, P288
   FLANAGAN C, 2004, P ACM INT S SOFTW TE, P221
   FLANAGAN C, 2003, P 2003 ACM SIGPLAN I, P1
   Flanagan C, 2001, LNCS, V2021, P500, DOI DOI 10.1007/3-540-45251-6_29
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   FLANAGAN C, 2001, P WORKSH PROGR AN SO, P90, DOI DOI 10.1145/379605.379687
   Flanagan Cormac., 2003, Pro- ceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, PLDI '03, P338
   Gosling James, 1996, The Java Language Specification
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   GROSSMAN D, 2003, P ACM SIGPLAN INT WO, P13
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   *JAV, 1998, JAV DEV KIT
   *JAV, 2004, JAV DEV KIT
   Jouvelot Pierre., 1991, ACM SIGACTSIGPLAN S, P303, DOI DOI 10.1145/99583.99623
   Kistler T, 1998, COMPUT NETWORKS ISDN, V30, P259, DOI 10.1016/S0169-7552(98)00018-X
   Kobayashi N, 1998, ACM T PROGR LANG SYS, V20, P436, DOI 10.1145/276393.278524
   LEINO KRM, 1999, 199002 COMP SYST RES
   Nielson F, 1996, ACM COMPUT SURV, V28, P344, DOI 10.1145/234528.234745
   NIPKOW T, 1998, P 25 ACM S PRINC PRO, P161, DOI DOI 10.1145/268946.268960
   Odersky Martin., 1997, P 24 ACM S PRINCIPLE, P146
   SALCIANU A, 2001, P 8 ACM SIGPLAN S PR, P12
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   SCHMIDT DC, 1997, PATTERN LANGUAGES PR, V3
   *STAND PERF EV COR, 2000, SPEC JBB2000
   SYME D, 1997, 427 U CAMBR COMP LAB
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   VONPRAUN C, 2001, P ACM C OBJ OR PROGR, P70
   Whaley J., 1999, P 14 ACM SIGPLAN C O, P187, DOI [10.1145/320384.320400, DOI 10.1145/320384.320400]
   Yahav E, 2001, ACM SIGPLAN NOTICES, V36, P27, DOI 10.1145/373243.360206
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
   [No title captured]
NR 65
TC 103
Z9 126
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2006
VL 28
IS 2
BP 207
EP 255
DI 10.1145/1119479.1119480
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 021SQ
UT WOS:000236006300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Devriese, D
   Patrignani, M
   Piessens, F
AF Devriese, Dominique
   Patrignani, Marco
   Piessens, Frank
TI Two Parametricities Versus Three Universal Types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Fully abstract compilation; System F; sealing; parametricity; universal
   type
ID FULLY-ABSTRACT COMPILATION; PROTECTION; STATE
AB The formal calculus System F models the essence of polymorphism and abstract data types, features that exist in many programming languages. The calculus' core property is parametricity: a theorem expressing the language's abstractions and validating important principles like information hiding and modularity.
   When System F is combined with features like recursive types, mutable state, continuations or exceptions, the formulation of parametricity needs to be adapted to follow suit, for example using techniques like step-indexing, Kripke world-indexing or biorthogonality. However, it is less clear how this formulation should change when System F is combined with untyped languages, gradual types, dynamic sealing and runtime type analysis (typecase) alongside type generation. Extensions of System F with these features have been proven to satisfy forms of parametricity (with Kripke worlds carrying semantic interpretations of types). However, the relative power of the modified formulations of parametricity with respect to others and the relative expressiveness of System F with and without these extensions are unknown.
   In this paper, we explain that the aforementioned different settings have a common characteristic: they do not enforce or preserve the lexical scope of System F's type variables. Formally, this results in the existence of a universal type (note: this is not the same as a universally-quantified type). We explain why standard parametricity is incompatible with such a type and how type worlds resolve this. Building on these insights, we answer two open conjectures from the literature, negatively, and we point out a deficiency in current proposals for combining System F with gradual types.
C1 [Devriese, Dominique; Piessens, Frank] KULeuven, DistriNet, Celestijnenlaan 200A,Bus 2402, B-3001 Leuven, Belgium.
   [Patrignani, Marco] Univ Trento, Via Sonunar 9, I-38123 Trento, Italy.
C3 KU Leuven; University Hospital Leuven; University of Trento
RP Devriese, D (corresponding author), KULeuven, DistriNet, Celestijnenlaan 200A,Bus 2402, B-3001 Leuven, Belgium.
EM dominique.devriese@kuleuven.be; marco.patrignani@unitn.it;
   frank.piessens@cs.kuleuven.be
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856; Patrignani,
   Marco/0000-0003-3411-9678
FU Research Fund KU Leuven; Research Foundation Flanders (FWO); Air Force
   Office of Scientific Research [FA9550-21-1-0054]; German Federal
   Ministry of Education and Research (BMBF) [FKZ: 13N1S0762]; Italian
   Ministry of Education through funding for the Rita Levi Montalcini grant
FX This research is partially funded by project grants from the Research
   Fund KU Leuven, and from the Research Foundation Flanders (FWO). This
   work was partially supported by the Air Force Office of Scientific
   Research under award number FA9550-21-1-0054. This work was partially
   supported by the German Federal Ministry of Education and Research
   (BMBF) through funding for the CISPA-Stanford Center for Cybersecurity
   (FKZ: 13N1S0762). This work was partially supported by the Italian
   Ministry of Education through funding for the Rita Levi Montalcini grant
   (call of 2019).
CR Abadi M, 1999, P IEEE S SECUR PRIV, P74, DOI 10.1109/SECPRI.1999.766719
   Abadi M, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P105, DOI 10.1109/LICS.1998.705647
   Abadi M., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P302, DOI 10.1145/325694.325734
   Abadi M., 1995, Journal of Functional Programming, V5, P111, DOI 10.1017/S095679680000126X
   ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Abadi M, 1998, LECT NOTES COMPUT SC, V1443, P868, DOI 10.1007/BFb0055109
   Abadi M, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2240276.2240279
   Abate Carmine, 2019, 2019 IEEE 32 COMPUTE
   Abate Carmine, 2018, CCS 18
   Agten P, 2012, P IEEE CSFW, P171, DOI 10.1109/CSF.2012.12
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Ahmed A, 2011, ACM SIGPLAN NOTICES, V46, P201, DOI 10.1145/1925844.1926409
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Ahmed A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Ahmed Amal, 2004, THESIS US
   Ahmed Amal, 2011, PARAMETRIC POLYMORPH
   Atkey R, 2014, ACM SIGPLAN NOTICES, V49, P503, DOI 10.1145/2535838.2535852
   Bugliesi M, 2007, ACM SIGPLAN NOTICES, V42, P251, DOI 10.1145/1190216.1190253
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   de Amorim AA, 2020, IEEE S LOG, P116, DOI 10.1145/3373718.3394778
   Devriese D, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:2)2017
   Devriese D, 2016, ACM SIGPLAN NOTICES, V51, P164, DOI 10.1145/2914770.2837618
   Devriese Dominique, 2018, P 45 ANN ACM SIGPLAN
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Dreyer D, 2010, ACM SIGPLAN NOTICES, V45, P143, DOI 10.1145/1932681.1863566
   Dreyer Derek, 2011, SEMANTICS TYPE SYSTE
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Fournet C, 2013, ACM SIGPLAN NOTICES, V48, P371, DOI 10.1145/2480359.2429114
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia Ronald, 2020, GRADUAL TYPING TYPES
   Girard Jean-Yves, 1972, THESIS U PARIS 6
   Guha Arjun, 2007, P DYN LANG S, P29, DOI [10.1145/1297081.1297089, DOI 10.1145/1297081.1297089]
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Igarashi Yuu, 2017, INT C FUNCTIONAL PRO
   Jacobs K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434288
   Jagadeesan R, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P161, DOI 10.1109/CSF.2011.18
   Juglaret Y, 2015, Arxiv, DOI arXiv:1510.00697
   Juglaret Y, 2016, P IEEE CSFW, P45, DOI 10.1109/CSF.2016.11
   Labrada E, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527314
   Larmuseau A, 2015, LECT NOTES COMPUT SC, V9458, P29, DOI 10.1007/978-3-319-26529-2_3
   Larmuseau Adriaan, 2016, S APPL COMPUTING, P2041, DOI [10.1145/2851613.2851796, DOI 10.1145/2851613.2851796]
   Longley JR, 2003, SEMANT STRUCT COMPUT, V3, P25
   Matthews J, 2008, LECT NOTES COMPUT SC, V4960, P16
   Matthews J, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1498926.1498930
   Mitchell J.C., 1986, C RECORD 13 ANN ACM, P263, DOI [10.1145/512644.512669, DOI 10.1145/512644.512669]
   MITCHELL JC, 1993, SCI COMPUT PROGRAM, V21, P141, DOI 10.1016/0167-6423(93)90004-9
   Morris J. H.  Jr., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P120
   MORRIS JH, 1973, COMMUN ACM, V16, P15, DOI 10.1145/361932.361937
   Neis G, 2011, J FUNCT PROGRAM, V21, P497, DOI 10.1017/S0956796811000165
   Neis G, 2009, ACM SIGPLAN NOTICES, V44, P135, DOI 10.1145/1631687.1596572
   New MS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290328
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Parrow J, 2008, ELECTRON NOTES THEOR, V209, P173, DOI 10.1016/j.entcs.2008.04.011
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2016, P IEEE CSFW, P17, DOI 10.1109/CSF.2016.9
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Patrignani Marco, 2019, PROGRAMMING LANGUAGE
   Patrignani Marco, 2017, P 30 IEEE COMPUTER S
   Patrignani Marco, 2020, CORR ABS200111334
   Pierce B., 2000, Relating cryptography and polymorphism
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitts AM, 1998, LECT NOTES COMPUT SC, V1443, P309, DOI 10.1007/BFb0055063
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1974, Programming Symposium, P408
   Rossberg Andreas., 2003, PPDP '03, P241, DOI DOI 10.1145/888251.888274
   Schmidt-Schauss M, 2015, THEOR COMPUT SCI, V577, P98, DOI 10.1016/j.tcs.2015.02.027
   Siek J.G., 2016, KEY BLAME GRADUAL TY
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P
   Statman Richard, 1991, LOCAL TRANSLATION UN
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   Sumii E., 2003, Journal of Computer Security, V11, P521
   Sumii E, 2004, ACM SIGPLAN NOTICES, V39, P161, DOI 10.1145/982962.964015
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wadler P, 2007, THEOR COMPUT SCI, V375, P201, DOI 10.1016/j.tcs.2006.12.042
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
NR 89
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2022
VL 44
IS 4
AR 23
DI 10.1145/3539657
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7S4NU
UT WOS:000910732700003
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Inverso, O
   Tomasco, E
   Fischer, B
   La Torre, S
   Parlato, G
AF Inverso, Omar
   Tomasco, Ermenegildo
   Fischer, Bernd
   La Torre, Salvatore
   Parlato, Gennaro
TI Bounded Verification of Multi-threaded Programs via Lazy
   Sequentialization
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Concurrent program analysis; sequentialization
ID MODEL-CHECKING; CONCURRENT PROGRAMS; CSEQ
AB Bounded verification techniques such as bounded model checking (BMC) have successfully been used for many practical program analysis problems, but concurrency still poses a challenge. Here, we describe a new approach to BMC of sequentially consistent imperative programs that use POSIX threads. We first translate the multi-threaded program into a nondeterministic sequential program that preserves reachability for all round-robin schedules with a given bound on the number of rounds. We then reuse existing high-performance BMC tools as backends for the sequential verification problem. Our translation is carefully designed to introduce very small memory overheads and very few sources of nondeterminism, so it produces tight SAT/SMT formulae, and is thus very effective in practice: Our Lazy-CSeq tool implementing this translation for the C programming language won several gold and silver medals in the concurrency category of the Software Verification Competitions (SV-COMP) 2014-2021 and was able to find errors in programs where all other techniques (including testing) failed. In this article, we give a detailed description of our translation and prove its correctness, sketch its implementation using the CSeq framework, and report on a detailed evaluation and comparison of our approach.
C1 [Inverso, Omar] Gran Sasso Sci Inst, Laquila, Italy.
   [Tomasco, Ermenegildo] Agenzia Entrate, Via Angelo Rubino, I-84078 Vallo Della Lucania, SA, Italy.
   [Fischer, Bernd] Stellenbosch Univ, Div Comp Sci, Private Bag X1, ZA-7602 Matieland, South Africa.
   [La Torre, Salvatore] Univ Salerno, Dipartimento Informat, Via Giovanni Paolo II 132, I-84084 Fisciano, SA, Italy.
   [Parlato, Gennaro] Univ Molise, Dipartimento Biosci & Terr, I-86090 Pesche, IS, Italy.
   [Inverso, Omar] Gran Sasso Sci Inst GSSI, Viale F Crispi 7, I-67100 Laquila, AQ, Italy.
C3 Gran Sasso Science Institute (GSSI); Stellenbosch University; University
   of Salerno; University of Molise; Gran Sasso Science Institute (GSSI)
RP Inverso, O (corresponding author), Gran Sasso Sci Inst, Laquila, Italy.; Inverso, O (corresponding author), Gran Sasso Sci Inst GSSI, Viale F Crispi 7, I-67100 Laquila, AQ, Italy.
EM omar.invcrso@gssi.it; gildotomasco@gmail.com; bfischer@sun.ac.za;
   slatonre@unisa.it; gennaro.parlato@unimol.it
OI Fischer, Bernd/0000-0002-1815-218X; Parlato, Gennaro/0000-0002-8697-2980
FU EPSRC [EP/M008991/1, EP/P022413/1]; INDAM-GNCS; University of
   Southampton Scholarship Schemes; AWS 2021 Amazon Research Awards;
   Universita degli Studi di Salerno
FX This work was partially supported by EPSRC grants EP/M008991/1 and
   EP/P022413/1, by FARB 2019-2020 grants from Universita degli Studi di
   Salerno, by INDAM-GNCS 2020-2021 and 2021 Visiting Professor grants, by
   University of Southampton Scholarship Schemes, and by AWS 2021 Amazon
   Research Awards.
CR Agesen O., 2000, SPAA 2000. Twelfth Annual ACM Symposium on Parallel Algorithms and Architectures, P137, DOI 10.1145/341800.341817
   Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   Atig MF, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(4:04)2011
   Baranová Z, 2017, LECT NOTES COMPUT SC, V10482, P201, DOI 10.1007/978-3-319-68167-2_14
   Barnat Jiri, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P863, DOI 10.1007/978-3-642-39799-8_60
   Baxter ID, 2004, PROC INT CONF SOFTW, P625, DOI 10.1109/ICSE.2004.1317484
   Beyer Dirk, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P347, DOI 10.1007/978-3-030-45237-7_21
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Biere Armin, 2020, Department of Computer Science Report Series B, VB- 2020-1, P51
   Bouajjani A, 2015, ACM SIGPLAN NOTICES, V50, P651, DOI [10.1145/2775051.2677002, 10.1145/2676726.2677002]
   Bouajjani A, 2011, LECT NOTES COMPUT SC, V6887, P129, DOI 10.1007/978-3-642-23702-7_13
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Chaki S., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P72
   Chebaro O, 2014, AUTOMAT SOFTW ENG, V21, P107, DOI 10.1007/s10515-013-0127-x
   Cho CY, 2013, IEEE INT CONF AUTOM, P136, DOI 10.1109/ASE.2013.6693074
   Cimatti Alessandro, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P310, DOI 10.1007/978-3-642-22110-1_24
   Cimatti A., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P51
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Clarke E, 2005, LECT NOTES COMPUT SC, V3440, P570
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Cordeiro L, 2012, IEEE T SOFTWARE ENG, V38, P957, DOI 10.1109/TSE.2011.59
   Cordeiro L, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P331, DOI 10.1145/1985793.1985839
   Currie DW, 2000, DES AUT CON, P130, DOI 10.1145/337292.337339
   Deligiannis P, 2015, IEEE INT CONF AUTOM, P166, DOI 10.1109/ASE.2015.30
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Eli Bendersky, 2015, PYCP V2 11
   Emmi M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P411, DOI 10.1145/1926385.1926432
   Farzan A., 2013, Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, P37
   Fedyukovich G, 2019, LECT NOTES COMPUT SC, V11561, P259, DOI 10.1007/978-3-030-25540-4_14
   Fischer B, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1150, DOI 10.1109/ASE.2019.00124
   Fischer B, 2013, LECT NOTES COMPUT SC, V7795, P616
   Fischer B, 2013, IEEE INT CONF AUTOM, P710, DOI 10.1109/ASE.2013.6693139
   Ganai MK, 2008, LECT NOTES COMPUT SC, V5156, P114, DOI 10.1007/978-3-540-85114-1_10
   Ganesh V, 2007, LECT NOTES COMPUT SC, V4590, P519
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Garg P, 2011, LECT NOTES COMPUT SC, V6605, P26, DOI 10.1007/978-3-642-19835-9_4
   Ghafari N, 2010, LECT NOTES COMPUT SC, V6349, P227
   Guo SJ, 2016, IEEE INT CONF AUTOM, P531, DOI 10.1145/2970276.2970332
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Hendler Danny, 2004, SPAA 2004, P206, DOI [10.1145/1007912.1007944, DOI 10.1145/1007912.1007944]
   Herdt V, 2015, LECT NOTES COMPUT SC, V9364, P228, DOI 10.1007/978-3-319-24953-7_18
   Holzmann GJ, 2016, LECT NOTES COMPUT SC, V9583, P311, DOI 10.1007/978-3-662-49122-5_15
   Holzmann GJ, 2014, COMMUN ACM, V57, P64, DOI 10.1145/2560217.2560218
   Inverso O, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P202, DOI 10.1145/3332466.3374529
   Inverso O, 2015, IEEE INT CONF AUTOM, P807, DOI 10.1109/ASE.2015.108
   Inverso O, 2014, LECT NOTES COMPUT SC, V8559, P585, DOI 10.1007/978-3-319-08867-9_39
   Inverso Omar, 2015, CSEQ FRAMEWORK
   ISO/IEC, 2009, 99452009 ISOIECIEEE
   Kahlon V, 2006, LECT NOTES COMPUT SC, V4144, P286, DOI 10.1007/11817963_28
   Kidd N, 2010, LECT NOTES COMPUT SC, V6349, P245
   La Torre S, 2012, ELECTRON PROC THEOR, P34, DOI 10.4204/EPTCS.87.4
   La Torre S, 2010, LECT NOTES COMPUT SC, V6174, P629, DOI 10.1007/978-3-642-14295-6_54
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   La Torre S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P211, DOI 10.1145/1542476.1542500
   Lahiri SK, 2009, LECT NOTES COMPUT SC, V5643, P509, DOI 10.1007/978-3-642-02658-4_38
   Lal A, 2012, LNCS, P427, DOI [DOI 10.1007/978-3-642-31424-7_32, 10.1007/978-3-642-31424-7_32]
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Lamport L., 1979, ACM Transactions on Programming Languages and Systems, V1, P84, DOI 10.1145/357062.357068
   Merz F, 2012, LECT NOTES COMPUT SC, V7152, P146, DOI 10.1007/978-3-642-27705-4_12
   Message Passing Interface Forum, 2012, MPI: A Message Passing Interface Standard-Version 3.0
   Muller-Olm M., 2006, Variations on Constants. Flow Analysis of Sequential and Parallel Programs
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Nguyen Truc L., 2017, Networked Systems. 5th International Conference, NETYS 2017. Proceedings: LNCS 10299, P255, DOI 10.1007/978-3-319-59647-1_20
   Nguyen Truc L., 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P461, DOI 10.1007/978-3-662-46681-0_45
   Nguyen TL, 2017, LECT NOTES COMPUT SC, V10206, P375, DOI 10.1007/978-3-662-54580-5_26
   Nguyen TL, 2017, IEEE INT CONF AUTOM, P753, DOI 10.1109/ASE.2017.8115686
   Nguyen TL, 2016, LECT NOTES COMPUT SC, V9938, P174, DOI 10.1007/978-3-319-46520-3_12
   Niemetz Aina, 2014, J. Satisf. Boolean Model. Comput, V9, P53, DOI [10.3233/sat190101, DOI 10.3233/SAT190101]
   Parker David, 2012, Proceedings. Lecture Notes in Computer Science, P248, DOI [10.1007/978-3-642-31759-0_19, DOI 10.1007/978-3-642-31759-0_19, DOI 10.1007/978-3-642-31759-019]
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   PETERSON JL, 1977, COMPUT SURV, V9, P223, DOI 10.1145/356698.356702
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Qadeer S, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/996893.996845
   Qadeer S, 2011, LECT NOTES COMPUT SC, V6991, P15, DOI 10.1007/978-3-642-24559-6_3
   Rabinovitz I, 2005, LECT NOTES COMPUT SC, V3576, P82
   Rakamaric Z, 2014, LECT NOTES COMPUT SC, V8559, P106, DOI 10.1007/978-3-319-08867-9_7
   Razavi Niloofar, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P372, DOI 10.1007/978-3-642-34026-0_28
   Rockai Petr, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P1, DOI 10.1007/978-3-642-38088-4_1
   Sinha N, 2010, PROCEEDINGS OF THE ASME TURBO EXPO 2010, VOL 1, P47
   Sinha N, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P423, DOI 10.1145/1926385.1926433
   Thomson P, 2014, ACM SIGPLAN NOTICES, V49, P15, DOI [10.1145/2692916.2555260, 10.1145/2555243.2555260]
   Tomasco Ermenegildo, 2017, Software Engineering and Formal Methods. 15th International Conference, SEFM 2017. Proceedings: Lecture Notes in Computer Society (LNCS 10469), P185, DOI 10.1007/978-3-319-66197-1_12
   Tomasco Ermenegildo, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P551, DOI 10.1007/978-3-662-46681-0_52
   Tomasco Ermenegildo, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P436, DOI 10.1007/978-3-662-46681-0_38
   Tomasco E., 2014, TACAS, P402
   Tomasco E, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P193, DOI 10.1109/FMCAD.2016.7886679
   Tomasco E, 2016, LECT NOTES COMPUT SC, V9636, P938, DOI 10.1007/978-3-662-49674-9_65
   Wang C, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P23, DOI 10.1145/1595696.1595702
   Wang Dexi, 2016, CEUR, V1725, P48
   Yin LZ, 2020, IEEE T SOFTWARE ENG, V46, P549, DOI 10.1109/TSE.2018.2864122
   Yin LZ, 2018, LECT NOTES COMPUT SC, V10806, P422, DOI 10.1007/978-3-319-89963-3_25
   Zheng MC, 2016, LECT NOTES COMPUT SC, V9636, P908, DOI 10.1007/978-3-662-49674-9_57
NR 97
TC 4
Z9 4
U1 1
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2022
VL 44
IS 1
AR 1
DI 10.1145/3478536
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YP1LJ
UT WOS:000748389400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Hu, QHP
   Singh, R
   D'Antoni, L
AF Hu, Qinheping
   Singh, Rishabh
   D'Antoni, Loris
TI Solving Program Sketches with Large Integer Values
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Program synthesis; program sketching; chinese remainder theorem
AB Program sketching is a program synthesis paradigm in which the programmer provides a partial program with holes and assertions. The goal of the synthesizer is to automatically find integer values for the holes so that the resulting program satisfies the assertions. The most popular sketching tool, Sketch, can efficiently solve complex program sketches but uses an integer encoding that often performs poorly if the sketched program manipulates large integer values. In this article, we propose a new solving technique that allows Sketch to handle large integer values while retaining its integer encoding. Our technique uses a result from number theory, the Chinese Remainder Theorem, to rewrite program sketches to only track the remainders of certain variable values with respect to several prime numbers. We prove that our transformation is sound and the encoding of the resulting programs are exponentially more succinct than existing Sketch encodings. We evaluate our technique on a variety of benchmarks manipulating large integer values. Our technique provides speedups against both existing Sketch solvers and can solve benchmarks that existing Sketch solvers cannot handle.
C1 [Hu, Qinheping; D'Antoni, Loris] Univ Wisconsin, Dept Comp Sci, 1210 West Dayton St, Madison, WI 53706 USA.
   [Singh, Rishabh] Google, 600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
C3 University of Wisconsin System; University of Wisconsin Madison; Google
   Incorporated
RP Hu, QHP (corresponding author), Univ Wisconsin, Dept Comp Sci, 1210 West Dayton St, Madison, WI 53706 USA.
EM qhu28@wisc.edu; rising@goggle.com; ldantoni@wisc.edu
OI D'Antoni, Loris/0000-0001-9625-4037
FU NSF [CNS-1763871, CCF-1750965, CCF-1744614, CCF-1704117]; UW-Madison
   OVRGE; WARF
FX This work was supported, in part, by NSF under grants CNS-1763871,
   CCF-1750965, CCF-1744614, and CCF-1704117; and by the UW-Madison OVRGE
   with funding from WARF.
CR Abate A, 2018, LECT NOTES COMPUT SC, V10981, P270, DOI 10.1007/978-3-319-96145-3_15
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Childs Lindsay N., 2009, CHINESE REMAINDER TH, P253, DOI [10.1007/978-0-387-74725-5_12, DOI 10.1007/978-0-387-74725-5_12]
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   D'Antoni L, 2016, LECT NOTES COMPUT SC, V9780, P383, DOI 10.1007/978-3-319-41540-6_21
   de Oliveira S, 2016, LECT NOTES COMPUT SC, V9938, P479, DOI 10.1007/978-3-319-46520-3_30
   Dusart P, 2016, MATH COMPUT, V85, P875, DOI 10.1090/mcom/3005
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Grossschädl J, 2000, 16TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P384, DOI 10.1109/ACSAC.2000.898893
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Jameson G. J. O., 2003, PRIME NUMBER THEOREM
   KIMURA S, 1995, DES AUT CON, P542
   Pan R, 2020, LECT NOTES COMPUT SC, V12075, P572, DOI 10.1007/978-3-030-44914-8_21
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Ravi K, 1996, LECT NOTES COMPUT SC, V1166, P49, DOI 10.1007/BFb0031799
   Singh R, 2016, ACM SIGPLAN NOTICES, V51, P343, DOI 10.1145/2914770.2837668
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Tiwari A, 2015, LECT NOTES ARTIF INT, V9195, P482, DOI 10.1007/978-3-319-21401-6_33
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Yen SM, 2003, IEEE T COMPUT, V52, P461, DOI 10.1109/TC.2003.1190587
NR 29
TC 1
Z9 1
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2022
VL 44
IS 2
AR 9
DI 10.1145/3532849
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3B6GO
UT WOS:000828037100004
OA Bronze
DA 2024-07-18
ER

PT J
AU Patrignani, M
   Garg, D
AF Patrignani, Marco
   Garg, Deepak
TI Robustly Safe Compilation, an Efficient Form of Secure Compilation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Secure compilation; robust safety; robustly-safe compilation; fully
   abstract compilation; formal languages; programming languages
ID VERIFICATION
AB Security-preserving compilers generate compiled code that withstands target-level attacks such as alteration of control flow, data leaks, or memory corruption. Many existing security-preserving compilers are proven to be fully abstract, meaning that they reflect and preserve observational equivalence. Fully abstract compilation is strong and useful but, in certain cases, comes at the cost of requiring expensive runtime constructs in compiled code. These constructs may have no relevance for security, but are needed to accommodate differences between the source and target languages that fully abstract compilation necessarily needs.
   As an alternative to fully abstract compilation, this article explores a different criterion for secure compilation called robustly safe compilation or RSC. Briefly, this criterion means that the compiled code preserves relevant safety properties of the source program against all adversarial contexts interacting with the compiled program. We show that RSC can be proved more easily than fully abstract compilation and also often results in more efficient code. We also present two different proof techniques for establishing that a compiler attains RSC and, to illustrate them, develop three illustrative robustly safe compilers that rely on different target-level protection mechanisms. We then proceed to turn one of our compilers into a fully abstract one and through this example argue that proving RSC can be simpler than proving full abstraction.
C1 [Patrignani, Marco] Stanford Univ, Serra Mall 353, Stanford, CA 94305 USA.
   [Patrignani, Marco] Cispa Helmholz Ctr Informat Secur, Serra Mall 353, Stanford, CA 94305 USA.
   [Garg, Deepak] Max Planck Inst Software Syst, Campus E51, Saarbrucken, Germany.
C3 Stanford University; Max Planck Society
RP Patrignani, M (corresponding author), Stanford Univ, Serra Mall 353, Stanford, CA 94305 USA.; Patrignani, M (corresponding author), Cispa Helmholz Ctr Informat Secur, Serra Mall 353, Stanford, CA 94305 USA.
EM mp@cs.stanford.edu; dg@mpi-sws.org
OI Patrignani, Marco/0000-0003-3411-9678
FU German Federal Ministry of Education and Research (BMBF) through funding
   for the CISPA-Stanford Center for Cybersecurity [FKZ: 13N1S0762]; Office
   of Naval Research [N00014-18-1-2620]
FX This work was partially supported by the German Federal Ministry of
   Education and Research (BMBF) through funding for the CISPA-Stanford
   Center for Cybersecurity (FKZ: 13N1S0762) and by the Office of Naval
   Research for support through grant N00014-18-1-2620, Accountable
   Protocol Customization.
CR Abadi M, 2002, INFORM COMPUT, V174, P37, DOI 10.1006/inco.2002.3086
   Abadi M, 1999, J ACM, V46, P749, DOI 10.1145/324133.324266
   Abadi M., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P302, DOI 10.1145/325694.325734
   Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abadi M, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2240276.2240279
   Abadi M, 2009, ACM T INFORM SYST SE, V13, DOI 10.1145/1609956.1609960
   Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Abate C, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1351, DOI 10.1145/3243734.3243745
   Agten P, 2012, P IEEE CSFW, P171, DOI 10.1109/CSF.2012.12
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Ahmed A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Almeida JB, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1807, DOI 10.1145/3133956.3134078
   ALPERN B, 1985, INFORM PROCESS LETT, V21, P181, DOI 10.1016/0020-0190(85)90056-0
   [Anonymous], THESIS U CAMBRIDGE
   [Anonymous], 2015, P 9 USENIX WORKSH OF
   Backes M, 2014, J COMPUT SECUR, V22, P301, DOI 10.3233/JCS-130493
   Barthe G, 2007, COMPUT LANG SYST STR, V33, P35, DOI 10.1016/j.cl.2005.05.002
   Barthe G, 2018, P IEEE COMPUT SECUR, P328, DOI 10.1109/CSF.2018.00031
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Benton Nick., 2010, Realizability and compositional compiler correctness for a polymorphic language
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   Boudol G, 2009, LECT NOTES COMPUT SC, V5491, P20
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Bugliesi M, 2007, ACM SIGPLAN NOTICES, V42, P251, DOI 10.1145/1190216.1190253
   CARTER NP, 1994, SIGPLAN NOTICES, V29, P319, DOI 10.1145/195470.195579
   Chong Stephen Nathaniel, 2008, Expressive and Enforceable Information Security Policies
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Corin R, 2008, J COMPUT SECUR, V16, P573, DOI 10.3233/JCS-2008-0334
   Costanzo D, 2016, ACM SIGPLAN NOTICES, V51, P648, DOI [10.1145/2908080.2908100, 10.1145/2980983.2908100]
   Devriese D, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:2)2017
   Devriese D, 2016, ACM SIGPLAN NOTICES, V51, P164, DOI 10.1145/2914770.2837618
   Devriese  Dominique, 2018, PACMPL, V38, P23, DOI 10.1145/3158126
   El-Korashy A., 2016, THESIS U SAARLANDES
   Fournet C, 2013, ACM SIGPLAN NOTICES, V48, P371, DOI 10.1145/2480359.2429114
   Fournet C, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275500
   Garg D, 2017, ROBUST HYPERPROPERTY
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   Gorla D, 2016, MATH STRUCT COMP SCI, V26, P639, DOI 10.1017/S0960129514000279
   Holdings A, 2009, CISC VIS NETW IND GL
   Hritcu Catalin, 2020, PROGRAMMING LANGUAGE
   Hur CK, 2011, ACM SIGPLAN NOTICES, V46, P133, DOI 10.1145/1925844.1926402
   Jagadeesan R, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P161, DOI 10.1109/CSF.2011.18
   Jang YJ, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P380, DOI 10.1145/2976749.2978321
   Juglaret Y, 2016, P IEEE CSFW, P45, DOI 10.1109/CSF.2016.11
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Kuznetsov Volodymyr, 2014, P 11 USENIX C OP SYS
   Larmuseau A, 2015, LECT NOTES COMPUT SC, V9458, P29, DOI 10.1007/978-3-319-26529-2_3
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Maffeis S, 2008, LECT NOTES COMPUT SC, V5283, P563
   McKeen Frank., 2013, P HARDW ARCH SUPP SE
   MORRIS JH, 1973, COMMUN ACM, V16, P15, DOI 10.1145/361932.361937
   Namjoshi KS, 2020, LECT NOTES COMPUT SC, V11990, P1, DOI 10.1007/978-3-030-39322-9_1
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   Neis G, 2009, ACM SIGPLAN NOTICES, V44, P135, DOI 10.1145/1631687.1596572
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Nielson F., 1999, Principles of Program Analysis
   Parrow J, 2016, MATH STRUCT COMP SCI, V26, P655, DOI 10.1017/S0960129514000280
   Patrignani Marco, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P176, DOI 10.1007/978-3-319-03542-0_13
   Patrignani M., 2017, P 30 IEEE COMP SEC F
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Patrignani M, 2011, LECT NOTES COMPUT SC, V6722, P289, DOI 10.1007/978-3-642-21461-5_19
   Patrignani Marco, 2020, ARXIVCSSE200111334
   Patrignani Marco, 2015, THESIS KU LEUVEN LEU
   Patrignani Marco, 2016, P 29 IEEE COMP SEC F
   Patrignani  Marco, 2018, ABS180400489 CORR
   Patrignani Marco, 2019, P 28 EUR S PROGR PRO
   Piessens Frank, 2017, P WORKSH FDN COMP SE
   Sabelfeld A, 2009, J COMPUT SECUR, V17, P517, DOI 10.3233/JCS-2009-0352
   Sammler M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371100
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Skorstengaard L., 2018, PROGRAMMING LANGUAGE, P475
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Sumii E, 2004, ACM SIGPLAN NOTICES, V39, P161, DOI 10.1145/982962.964015
   Swamy N, 2014, ACM SIGPLAN NOTICES, V49, P425, DOI 10.1145/2535838.2535889
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   Vasconcelos Claudio, 2016, ARXIVCSPL160308949
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Woodruff J, 2014, CONF PROC INT SYMP C, P457, DOI 10.1109/ISCA.2014.6853201
   Zdancewic S. A., 2002, PROGRAMMING LANGUAGE
NR 82
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2021
VL 43
IS 1
AR 1
DI 10.1145/3436809
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RW3AR
UT WOS:000646399300001
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Kasikci, B
   Zamfir, C
   Candea, G
AF Kasikci, Baris
   Zamfir, Cristian
   Candea, George
TI Automated Classification of Data Races Under Both Strong and Weak Memory
   Models
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Reliability; Verification; Security; Data races; concurrency; triage;
   symbolic execution
AB Data races are one of the main causes of concurrency problems in multithreaded programs. Whether all data races are bad, or some are harmful and others are harmless, is still the subject of vigorous scientific debate [Narayanasamy et al. 2007; Boehm 2012]. What is clear, however, is that today's code has many data races [Kasikci et al. 2012; Jin et al. 2012; Erickson et al. 2010], and fixing data races without introducing bugs is time consuming [Godefroid and Nagappan 2008]. Therefore, it is important to efficiently identify data races in code and understand their consequences to prioritize their resolution.
   We present Portend+, a tool that not only detects races but also automatically classifies them based on their potential consequences: Could they lead to crashes or hangs? Could their effects be visible outside the program? Do they appear to be harmless? How do their effects change under weak memory models? Our proposed technique achieves high accuracy by efficiently analyzing multiple paths and multiple thread schedules in combination, and by performing symbolic comparison between program outputs.
   We ran Portend+ on seven real-world applications: it detected 93 true data races and correctly classified 92 of them, with no human effort. Six of them were harmful races. Portend+'s classification accuracy is up to 89% higher than that of existing tools, and it produces easy-to-understand evidence of the consequences of "harmful" races, thus both proving their harmfulness and making debugging easier. We envision Portend+ being used for testing and debugging, as well as for automatically triaging bug reports.
C1 [Kasikci, Baris] Ecole Polytech Fed Lausanne, IC, DSLAB, INN 321, CH-1015 Lausanne, Switzerland.
   [Zamfir, Cristian] Ecole Polytech Fed Lausanne, IC, DSLAB, INN 319, CH-1015 Lausanne, Switzerland.
   [Candea, George] Ecole Polytech Fed Lausanne, IC, DSLAB, INN 330, CH-1015 Lausanne, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; Swiss Federal Institutes of Technology Domain;
   Ecole Polytechnique Federale de Lausanne; Swiss Federal Institutes of
   Technology Domain; Ecole Polytechnique Federale de Lausanne
RP Kasikci, B (corresponding author), Ecole Polytech Fed Lausanne, IC, DSLAB, INN 321, Stn 14, CH-1015 Lausanne, Switzerland.
EM baris.kasikci@epfl.ch; cristian.zamfir@epfl.ch; george.candea@epfl.ch
OI Kasikci, Baris/0000-0001-6122-8998
FU European Research Council; VMware; Microsoft through an ICES grant
FX We thank Emery Berger for providing feedback that helped us greatly
   improve the quality of this article. We thank the anonymous reviewers
   for providing insightful feedback. We thank TOPLAS editor-in-chief Jens
   Palsberg and TOPLAS traffic manager Aubrey Hooser for their help and
   guidance throughout the revision process. We thank Babak Falsafi for
   providing feedback on the initial design of SMCM. We thank Katerina
   Argyraki, Ryan Johnson, Olivier Crameri, Christopher Ming-Yee Iu,
   Sotiria Fytraki, and our DSLAB colleagues for helping us improve this
   article. We thank the European Research Council and VMware for
   supporting Baris Kasikci. We thank Microsoft for supporting Cristian
   Zamfir through an ICES grant.
CR [Anonymous], P S FDN SOFTW ENG
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 1994, The SPARC Architecture Manual, Version 9
   [Anonymous], 2008, NDSS
   [Anonymous], 2011, ISO9899
   [Anonymous], 2008, P 8 USENIX C OP SYST
   [Anonymous], 2011, ISO14882
   [Anonymous], 2009, P 24 ACM SIGPLAN C O
   [Anonymous], 2004, P INT S COD GEN OPT
   Aviram Amittai, 2010, P S OP SYST DES IMPL
   Babic Domagoj, 2008, P 30 INT C SOFTW ENG
   Bergan Tom, 2011, P WORKSH DET CORR PA
   Boehm HJ, 2012, COMMUN ACM, V55, P48, DOI 10.1145/2076450.2076465
   Boehm Hans-J., 2007, P 12 ACM SIGPLAN S P
   Boehm Hans-J., 2011, P USENIX WORKSH HOT
   Boehm Hans-J., 2012, P ACM WORKSH REL SYN
   Bond Michael D., 2010, P INT C PROGR LANG D
   Bouajjani Ahmed, 2010, P S PRINC PROGR LANG
   Bucur Stefan, 2011, P ACM EUROSYS EUR C
   Burckhardt Sebastian, 2006, P INT C COMP AID VER
   Candea George, 2010, P S OP SYST DES IMPL
   Ceze Luis, 2007, P INT S COMP ARCH
   Chen Peter M., 2011, P S OP SYST PRINC
   Chen Xiaofang, 2007, P INT SPIN WORKSH
   Chipounov Vitaly, 2011, P IEEE IFIP 41 INT C
   Cui Heming, 2010, P S OP SYST DES IMPL
   Devietti Joseph, 2009, P INT C ARCH SUPP PR
   Dubois Michel, 1986, P 13 ANN INT S COMP
   Engler Dawson, 2003, P S OP SYST PRINC
   Erickson John, 2010, P S OP SYST DES IMPL
   Flanagan Cormac, 2010, P INT C PROGR LANG D
   Flanagan Cormac, 2009, P INT C PROGR LANG D
   Fonseca Pedro, 2011, P ACM EUROSYS EUR C
   Ganesh V., 2007, P INT C COMP AID VER
   Glerum Kirk, 2009, P S OP SYST PRINC
   Godefroid Patrice, 2005, P INT C PROGR LANG D
   Godefroid Patrice, 2008, P INT C COMP AID VER
   Grossman Dan, 2010, P INT C ARCH SUPP PR
   Hand S, 2012, COMMUN ACM, V55, P110, DOI 10.1145/2160718.2160741
   Jannesari Ali, 2010, P INT PAR DISTR PROC
   Jin Guoliang, 2012, P S OP SYST DES IMPL
   Kahlon Vineet, 2005, P INT C COMP AID VER
   Kasikci Baris, 2012, P INT C ARCH SUPP PR
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Ledgard Henry, 1983, REFERENCE MANUAL ADA
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Liu Tongping, 2011, P S OP SYST PRINC
   Lu Shan, 2006, P INT C ARCH SUPP PR
   MANSON J, 2005, P S PRINC PROGR LANG
   Marino Daniel, 2009, P INT C PROGR LANG D
   Mellor-Crummey John, 1991, P ACM IEEE C SUP SUP
   Min Sang L., 1991, P INT C ARCH SUPP PR
   Musuvathi Madanlal, 2010, P INT C ARCH SUPP PR
   Musuvathi Madanlal, 2008, P S OP SYST DES IMPL
   Nagarajan Vijay, 2008, P INT S SOFTW TEST A
   Narayanasamy Satish, 2007, P INT C PROGR LANG D
   Nistor Adrian, 2009, P IEEE ACM INT S MIC
   O'Callahan Robert, 2003, P S PRINC PRACT PAR
   Prvulovic Milos, 2003, P 30 ANN INT S COMP
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Schonberg E, 2004, ACM SIGPLAN NOTICES, V39, P313, DOI 10.1145/989393.989426
   Sen K., 2008, Programming Lan- guage Design and Implementation (PLDI)
   Sen Koushik, 2005, P S FDN SOFTW ENG
   Serebryany K., P 2009 WORKSH BIN IN
   Sites R.L., 1992, ALPHA ARCHITECTURE R
   Smaragdakis Y, 2012, ACM SIGPLAN NOTICES, V47, P387, DOI 10.1145/2103621.2103702
   Thies W, 2002, P 11 INT C COMP CONS
   Woo S. C., 1995, P INT S COMP ARCH
   Wu Jingyue, 2010, P S OP SYST DES IMPL
   Xiong Weiwei, 2010, P S OP SYST DES IMPL
   Yu Yuan, 2005, P S OP SYST PRINC
   Zamfir Cristian, 2010, P ACM EUROSYS EUR C
   Zhang Jiaqi, 2011, P IEEE ACM INT S MIC
NR 73
TC 13
Z9 18
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2015
VL 37
IS 3
AR 8
DI 10.1145/2734118
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CL1JU
UT WOS:000356699500001
OA Bronze
DA 2024-07-18
ER

PT J
AU Derrick, J
   Schellhorn, G
   Wehrheim, H
AF Derrick, John
   Schellhorn, Gerhard
   Wehrheim, Heike
TI Mechanically Verified Proof Obligations for Linearizability
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Verification; Z; refinement; concurrent access;
   linearizability; nonatomic refinement; theorem proving; KIV
ID MODEL; VERIFICATION; REDUCTION; CHECKING
AB Concurrent objects are inherently complex to verify. In the late 80s and early 90s, Herlihy and Wing proposed linearizability as a correctness condition for concurrent objects, which, once proven, allows us to reason about concurrent objects using pre- and postconditions only. A concurrent object is linearizable if all of its operations appear to take effect instantaneously some time between their invocation and return.
   In this article we define simulation-based proof conditions for linearizability and apply them to two concurrent implementations, a lock-free stack and a set with lock-coupling. Similar to other approaches, we employ a theorem prover (here, KIV) to mechanize our proofs. Contrary to other approaches, we also use the prover to mechanically check that our proof obligations actually guarantee linearizability. This check employs the original ideas of Herlihy and Wing of verifying linearizability via possibilities.
C1 [Derrick, John] Univ Sheffield, Dept Comp, Sheffield, S Yorkshire, England.
   [Schellhorn, Gerhard] Inst Software & Syst Engn, Augsburg, Germany.
   [Wehrheim, Heike] Inst Informat, Paderborn, Germany.
C3 University of Sheffield
RP Derrick, J (corresponding author), Univ Sheffield, Dept Comp, Sheffield, S Yorkshire, England.
EM wehrheim@upb.de
OI Derrick, John/0000-0002-6631-8914
FU EPSRC [EP/G031711/1] Funding Source: UKRI
CR Abrial JR, 2005, J UNIVERS COMPUT SCI, V11, P744
   Amit D, 2007, LECT NOTES COMPUT SC, V4590, P477
   [Anonymous], 1992, The Z Notation
   Barden R., 1994, BCS PRACTITIONER SER
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   BAUMLER S, 2009, FORM ASP COMPUT
   BAYER R, 1977, ACTA INFORM, V9, P1
   Calcagno C, 2007, LECT NOTES COMPUT SC, V4634, P233
   CoFI (The Common Framework Initiative), 2004, LECT NOT COMP SCI, V2960
   COHEN E, 1998, P 9 INT C CONC THEOR, P317
   Colvin R, 2005, ELECTRON NOTES THEOR, V137, P93, DOI 10.1016/j.entcs.2005.04.026
   DEROEVER WP, 1998, CAMBRIDGE TRACTS THE, V47
   Derrick J, 2003, LECT NOTES COMPUT SC, V2651, P127
   Derrick J., 2001, FACIT, VSecond
   DERRICK J, 2005, LECT NOTES COMPUTER, V3455
   Derrick J, 2008, LECT NOTES COMPUT SC, V5051, P78, DOI 10.1007/978-3-540-68863-1_6
   Derrick J, 2007, LECT NOTES COMPUT SC, V4591, P195
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Doherty S, 2004, LECT NOTES COMPUT SC, V3235, P97
   FARMER WM, 1994, LECT NOTES COMPUTER, V816
   Feng XY, 2007, LECT NOTES COMPUT SC, V4421, P173
   Flanagan C, 2003, LECT NOTES COMPUT SC, V2648, P213
   Gao H, 2007, INFORM COMPUT, V205, P225, DOI 10.1016/j.ic.2006.10.003
   Groves L, 2007, ELECTRON NOTES THEOR, V187, P55, DOI 10.1016/j.entcs.2006.08.044
   Hendler Danny, 2004, SPAA 2004, P206, DOI [10.1145/1007912.1007944, DOI 10.1145/1007912.1007944]
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   HERLIHY MP, 1987, P 14 ACM S PRINC PRO, P13
   Hesselink W. H., 2005, ACM Transactions on Computational Logic, V6, P175, DOI 10.1145/1042038.1042044
   Hesselink WH, 2004, SCI COMPUT PROGRAM, V51, P47, DOI 10.1016/j.scico.2003.06.001
   Hesselink WH, 2007, ACTA INFORM, V44, P123, DOI 10.1007/s00236-007-0044-1
   Hesselink WH, 2006, ACTA INFORM, V43, P195, DOI 10.1007/s00236-006-0020-1
   Jacobs B, 2006, LECT NOTES COMPUT SC, V4260, P420
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   *KIV, 2009, WEB PRES LIN CAS STU
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LAMPORT L, 1989, TR891005 SRC DIG
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liu Y, 2009, LECT NOTES COMPUT SC, V5850, P321
   Michael MM, 1998, J PARALLEL DISTR COM, V51, P1, DOI 10.1006/jpdc.1998.1446
   Misra J, 2003, MG COMP SCI, P69
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Parkinson M, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P297
   Reif W, 1998, APPL LOG SER, V9, P13
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Vafeiadis V., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P129, DOI 10.1145/1122971.1122992
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Vafeiadis Viktor., 2008, Technical Report UCAM-CL-TR-726
   Vechev M, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P125, DOI 10.1145/1375581.1375598
   WANG L, 2004, P ACM SINGPLAN S PRI
   WANG L, 2004, DAR0417 SUN STON BRO
   WANG L, 2005, P ACM SINGPLAN S PRI
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
NR 52
TC 28
Z9 29
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2011
VL 33
IS 1
AR 4
DI 10.1145/1889997.1890001
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TH
UT WOS:000286463800003
DA 2024-07-18
ER

PT J
AU De Moura, AL
   Ierusalimschy, R
AF De Moura, Ana Lucia
   Ierusalimschy, Roberto
TI Revisiting Coroutines
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Continuations; generators; multitasking
AB This article advocates the revival of coroutines as a convenient general control abstraction. After proposing a new classification of coroutines, we introduce the concept of full asymmetric coroutines and provide a precise definition for it through an operational semantics. We then demonstrate that full coroutines have an expressive power equivalent to one-shot continuations and one-shot delimited continuations. We also show that full asymmetric coroutines and one-shot delimited continuations have many similarities, and therefore present comparable benefits. Nevertheless, coroutines are easier implemented and understood, especially in the realm of procedural languages.
C1 [De Moura, Ana Lucia; Ierusalimschy, Roberto] Pontificia Univ Catolica Rio de Janeiro, BR-22451900 Rio De Janeiro, Brazil.
C3 Pontificia Universidade Catolica do Rio de Janeiro
RP De Moura, AL (corresponding author), Pontificia Univ Catolica Rio de Janeiro, Rua MS Vicente 225, BR-22451900 Rio De Janeiro, Brazil.
EM ana@rnp.br; roberto@inf.puc-rio.br
FU CNPq (the Brazilian Research Council); Microsoft Research; Tecgraf
   (Computer Graphics Technology Group, PUC-Rio)
FX This work was partially supported by grants from CNPq (the Brazilian
   Research Council), Microsoft Research, and Tecgraf (Computer Graphics
   Technology Group, PUC-Rio).
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   Adya A., 2002, P USENIX ANN TECHN C
   BEHREN R, 2003, P 9 WORKSH HOT TOP O
   BIRTWISTLE G, 1980, SIMULA BEGIN
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   CLOCKSIN WF, 1981, PROGRAMMING PROLOG
   CONWAY D, 2000, 31 RFC
   CONWAY ME, 1963, COMMUN ACM, V6, P396, DOI 10.1145/366663.366704
   Dahl O.-J., 1972, STRUCTURED PROGRAMMI
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   de Moura AL, 2004, J UNIVERS COMPUT SCI, V10, P910
   DYBVIG RK, 1989, COMPUT LANG, V14, P109, DOI 10.1016/0096-0551(89)90018-0
   FELLEISEN M, 1985, 182 IND U
   FELLEISEN M, 1988, P 15 ANN ACM S PRINC, P180, DOI DOI 10.1145/73560.73576
   Felleisen M., 1990, P 3 EUR S PROGR ESOP, P134
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Griswold R.E., 1983, ICON PROGRAMMING LAN, V3
   HARPER R, 1991, P 18 ACM S PRINC PRO, P163
   HAYNES CT, 1987, COMPUT LANG, V12, P109, DOI 10.1016/0096-0551(87)90003-8
   HAYNES CT, 1986, COMPUT LANG, V11, P143, DOI 10.1016/0096-0551(86)90007-X
   HAYNES CT, 1987, ACM T PROGR LANG SYS, V9, P582, DOI 10.1145/29873.30392
   HAYNES CT, 1987, J LOGIC PROGRAM, V4, P157, DOI 10.1016/0743-1066(87)90016-1
   HETLAND M, 2001, 255 PEP
   Hieb R., 1994, LISP and Symbolic Computation, V7, P83, DOI 10.1007/BF01019946
   HIEB R, 1990, P ACM S PRINC PRACT, P128
   Ierusalimschy R, 1996, SOFTWARE PRACT EXPER, V26, P635, DOI 10.1002/(SICI)1097-024X(199606)26:6<635::AID-SPE26>3.0.CO;2-P
   IERUSALIMSCHY R, 2008, MONOGRAFIAS CIENCIA, V408
   Ierusalimschy R., 2003, Programming in Lua
   JOHNSON G, 1988, P 15 ACM S PRINC PRO
   Knuth D., 1968, The Art of Computer Programming
   Kumar S., 1998, LISP and Symbolic Computation, V10, P223, DOI 10.1023/A:1007782300874
   LISKOV B, 1977, COMMUN ACM, V20, P564, DOI 10.1145/359763.359789
   Marlin CD., 1980, LECT NOTES COMPUTER, V95
   MOODY K, 1980, SOFTWARE PRACT EXPER, V10, P765, DOI 10.1002/spe.4380101002
   Murer S, 1996, ACM T PROGR LANG SYS, V18, P1, DOI 10.1145/225540.225541
   PAULI W, 1980, SOFTWARE PRACT EXPER, V10, P189, DOI 10.1002/spe.4380100305
   QUEINNEC C, 1991, P 18 ANN ACM S PRINC, P174, DOI DOI 10.1145/99583.99610
   RICHTER J, 1997, ADV WINDOWS
   SERPETTE B, 2004, P 6 SIGPLAN INT C PR, P203
   SITARAM D, 1993, SIGPLAN NOT, V28
   SITARAM D, 1994, THESIS RICE U
   Springer George., 1989, SCHEME ART PROGRAMMI
   TISMER C, 2000, P 8 INT PYTH C ARL V
   WAND M, 2004, P 9 ACM SIGPLAN INT, P54
   Wand Mitchell., 1980, LISP FUNCTIONAL PROG, P19, DOI DOI 10.1145/800087.802786
   Wirth N., 1985, PROGRAMMING MODULA 2, V3rd
NR 46
TC 36
Z9 38
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD FEB
PY 2009
VL 31
IS 2
AR 6
DI 10.1145/1462166.1462167
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 419SG
UT WOS:000264239400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Rong, HB
   Douillet, A
   Gao, GR
AF Rong, Hongbo
   Douillet, Alban
   Gao, Guang R.
TI Register allocation for software pipelined multidimensional loops
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; software pipelining; register allocation
AB This article investigates register allocation for software pipelined multidimensional loops where the execution of successive iterations from an n-dimensional loop is overlapped. For single loop software pipelining, the lifetimes of a loop variable in successive iterations of the loop form a repetitive pattern. An effective register allocation method is to represent the pattern as a vector of lifetimes ( or a vector lifetime using Rau's terminology [Rau 1992]) and map it to rotating registers. Unfortunately, the software pipelined schedule of a multidimensional loop is considerably more complex and so are the vector lifetimes in it.
   In this article, we develop a way to normalize and represent the vector lifetimes, which captures their complexity, while exposing their regularity that enables a simple solution. The problem is formulated as bin-packing of the multidimensional vector lifetimes on the surface of a space-time cylinder. A metric, called distance, is calculated either conservatively or aggressively to guide the bin-packing process, so that there is no overlapping between any two vector lifetimes, and the register requirement is minimized. This approach subsumes the classical register allocation for software pipelined single loops as a special case. The method has been implemented in the ORC compiler and produced code for the IA-64 architecture. Experimental results show the effectiveness. Several strategies for register allocation are compared and analyzed.
C1 [Rong, Hongbo] Microsoft Corp, Redmond, WA 98052 USA.
   [Douillet, Alban] Hewlett Packard Corp, Palo Alto, CA USA.
   [Gao, Guang R.] Univ Delaware, Newark, DE 19716 USA.
C3 Microsoft; Hewlett-Packard; University of Delaware
RP Rong, HB (corresponding author), Microsoft Corp, 1 Microsoft Way, Redmond, WA 98052 USA.
EM hongbor@microsoft.com; alban.douillet@hp.com; ggao@capsl.udel.edu
RI Rong, Hongbo/HTS-3034-2023
CR Aiken A, 1995, IEEE T PARALL DISTR, V6, P1248, DOI 10.1109/71.476167
   Allan VH, 1995, ACM COMPUT SURV, V27, P367, DOI 10.1145/212094.212131
   Allen J.R., 1983, Proc. of the Symposium on Principles of Programming Languages. POPL, P177
   Auslander M, 2004, ACM SIGPLAN NOTICES, V39, P38, DOI 10.1145/989393.989400
   CALLAHAN D, 1991, SIGPLAN NOTICES, V26, P192, DOI 10.1145/113446.113462
   CARR S, 1996, P 29 HAW INT C SYST, V1, P183
   Chaitin G, 2004, ACM SIGPLAN NOTICES, V39, P66, DOI 10.1145/989393.989403
   CHENG WK, 1999, ACM T DES AUTOMAT EL, V4, P231
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DARTE A, 1994, IEEE T PARALL DISTR, V5, P814, DOI 10.1109/71.298207
   DEHNERT JC, 1993, J SUPERCOMPUT, V7, P181, DOI 10.1007/BF01205184
   DOUILLET A, 2005, 18 INT WORKSH LANG C, P17
   Douillet A, 2007, P 16 INT C PAR ARCH, P39
   EBCIOGLU K, 1990, 2 WORKSH LANG COMP P, P213
   GAO GR, 1993, 53 ACAPS MCGILL U SC, P53
   Helsgaun K, 2000, EUR J OPER RES, V126, P106, DOI 10.1016/S0377-2217(99)00284-2
   HENDREN LJ, 1992, P 4 INT C COMP CONST, P176
   HUFF RA, 1993, P ACM SIGPLAN 93 C P, P258, DOI DOI 10.1145/155090.155115
   *INT CORP, 2001, INT IA 64 ARCH SOFTW, V1
   Lam M., 1988, P ACM SIGPLAN 1988 C, P318, DOI [10.1145/53990.54022, DOI 10.1145/53990.54022]
   LAMPORT L, 1974, COMMUN ACM, V17, P83, DOI 10.1145/360827.360844
   Moon SM, 1997, ACM T PROGR LANG SYS, V19, P853, DOI 10.1145/267959.269966
   MUTHUKUMAR K, 2001, LNCS, V2027, P165
   Ramanujam J., 1994, Proceedings Eighth International Parallel Processing Symposium (Cat. No.94TH0652-8), P335, DOI 10.1109/IPPS.1994.288280
   Rau B.R., 1994, P 27 ANN INT S MICRO, P63
   RAU BR, 1993, J SUPERCOMPUT, V7, P9, DOI 10.1007/BF01205181
   RAU BR, 1992, HPL9248
   RONG H, 2007, COMPILER DESIGN HDB, pCH20
   RONG H, 2007, SINGLE DIMENSION SOF
   Rong HB, 2004, INT SYM CODE GENER, P175
   Rong HB, 2007, ACM T ARCHIT CODE OP, V4, DOI 10.1145/1216544.1216550
   TURKINGTON K, 2006, P INT C FIELD PROGR, P1
   WANG S, 1996, P 5 CHIN C GLAC GEOC, V1, P17
NR 33
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2008
VL 30
IS 4
AR 23
DI 10.1145/1377492.1377498
PG 68
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 345YS
UT WOS:000259035300006
OA Bronze
DA 2024-07-18
ER

PT J
AU Grossman, D
AF Grossman, Dan
TI Quantified types in an imperative language
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE cyclone; existential types; polymorphism; type variables
ID INFERENCE; SYSTEM
AB We describe universal types, existential types, and type constructors in Cyclone, a strongly typed C-like language. We show how the language naturally supports first-class polymorphism and polymorphic recursion while requiring an acceptable amount of explicit type information. More importantly, we consider the soundness of type variables in the presence of C-style mutation and the address-of operator. For polymorphic references, we describe a solution more natural for the C level than the ML-style "value restriction." For existential types, we discover and subsequently avoid a subtle unsoundness issue resulting from the address-of operator. We develop a formal abstract machine and type-safety proof that capture the essence of type variables at the C level.
C1 Univ Washington, Dept Comp Sci & Engn, Seattle, WA 98195 USA.
C3 University of Washington; University of Washington Seattle
RP Grossman, D (corresponding author), Univ Washington, Dept Comp Sci & Engn, Box 352350, Seattle, WA 98195 USA.
EM djg@cs.washington.edu
CR [Anonymous], 1974, LNCS
   [Anonymous], 1999, 9899 ISOIEC
   [Anonymous], 1995, Ph. D. Dissertation
   [Anonymous], 1992, Compiling with Continuations
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], P ACM WORKSH COMP SU
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   Austin ToddM., 1994, P ACM SIGPLAN 1994 C, P290
   Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Bos H, 2002, 2002 IEEE OPEN ARCHITECTURES AND NETWORK PROGRAMMING PROCEEDINGS, P141, DOI 10.1109/OPNARC.2002.1019235
   BRACHA G, 1998, P ACM S OBJ OR PROGR, P183
   Bruce KB, 1999, INFORM COMPUT, V155, P108, DOI 10.1006/inco.1999.2829
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   CHAILLOUX E, 2000, DEV APPL OBJECTIVE C
   Chandra S., 1999, Proceedings of the 1999 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering. (Toulouse, P66
   CONDIT J, 2003, P ACM SIGPLAN 2003 C, P232
   CRARY K, 2003, POPL 03, P198
   *CYCL, 2001, 20011855 CORN U DEP
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   DITCHFIELD G, 1994, THESIS U WATERLOO WA
   Garrigue J, 1999, INFORM COMPUT, V155, P134, DOI 10.1006/inco.1999.2830
   *GHC TEAM, 2003, GLASG HASK COMP US G
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Grossman D, 2002, LECT NOTES COMPUT SC, V2305, P21
   Grossman D, 2000, ACM T PROGR LANG SYS, V22, P1037, DOI 10.1145/371880.371887
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   GROSSMAN D, 2003, P ACM SIGPLAN INT WO, P13
   GROSSMAN D, 2003, THESIS CORNELL U ITH
   HARPER R, 1994, INFORM PROCESS LETT, V51, P201, DOI 10.1016/0020-0190(94)90120-1
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   Hicks M, 2003, 2003 IEEE CONFERENCE ON OPEN ARCHITECTURES AND NETWORK PROGRAMMING PROCEEDINGS, P87, DOI 10.1109/OPNARC.2003.1196376
   HICKS M, 2004, P INT S MEM MAN VANC
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Jones Richard W. M., 1997, LINKOPING ELECT ARTI, V2, p13S26
   JONES SP, 1999, HASKELL 98 NONSTRICT
   KFOURY AJ, 1993, ACM T PROGR LANG SYS, V15, P290, DOI 10.1145/169701.169687
   Kowshik S., 2002, International Conference on Architecture and Synthesis for Embedded Systems (CASES), P288, DOI DOI 10.1145/581630.581678
   Laufer K., 1996, Journal of Functional Programming, V6, P485, DOI 10.1017/S0956796800001817
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   LEROY X, 2002, WRITING EFFICIENT NU
   Leroy X., 2002, The Objective Caml system, documentation and user's manual
   LEROY X, 1997, P WORKSH TYP COMP AM
   LEROY X, 1992, P 19 ACM S PRINC PRO, P177
   LISKOV B, 1984, CLU REFERENCE MANUAL
   LOGINOV A, 2001, LECT NOTES COMPUTER, V2029, P217
   Minamide Yasuhiko, 1996, S PRINC PROGR LANG P, P271, DOI DOI 10.1145/237721.237791
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Morrisett G, 2002, J FUNCT PROGRAM, V12, P43, DOI 10.1017/S0956796801004178
   Patel P, 2003, 2003 IEEE CONFERENCE ON OPEN ARCHITECTURES AND NETWORK PROGRAMMING PROCEEDINGS, P23, DOI 10.1109/OPNARC.2003.1196370
   PATEL P, 2003, P 19 ACM S OP SYST P, P1
   PIERCE B, 1991, THESIS CARNEGIE MELL
   Pierce B.C., 1998, POPL, P252
   Pierce BC, 2000, J ACM, V47, P531, DOI 10.1145/337244.337261
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Smith G, 1998, SCI COMPUT PROGRAM, V32, P49, DOI 10.1016/S0167-6423(97)00030-0
   SMITH G, 1996, LECT NOTES COMPUTER, V1058, P341
   STRACHEY C, 1967, ORD SYMBOL COMPUTAT, V13, P5
   STROUSTRUP B, 2000, CPLUSPLUS PROGRAMMIN
   TARDITI D, 1996, THESIS CARNEGIE MELL
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   WALKER D, 2000, LECT NOTES COMPUTER, V2071, P177
   Wells JB, 2002, J FUNCT PROGRAM, V12, P183, DOI 10.1017/S0956796801004245
   Wells JB, 1999, ANN PURE APPL LOGIC, V98, P111, DOI 10.1016/S0168-0072(98)00047-5
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xi HW, 2000, IEEE S LOG, P375
   2002, HUGS 98 USER MANUAL
NR 71
TC 3
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2006
VL 28
IS 3
BP 429
EP 475
DI 10.1145/1133651.1133653
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052ZQ
UT WOS:000238273200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Boute, R
AF Boute, R
TI Functional declarative language design and predicate calculus: A
   practical approach
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; documentation; languages; theory; verification; analysis; binary
   algebra; calculational reasoning; databases; declarative languages;
   elastic operators; function equality; functional predicate calculus;
   generic functionals; Leibniz's principle; limits; programming languages;
   program semantics; quantifiers; recursion; software engineering;
   summation
ID LOGIC; DEFINITION
AB In programming language and software engineering, the main mathematical tool is de facto some form of predicate logic. Yet, as elsewhere in applied mathematics, it is used mostly far below its potential, due to its traditional formulation as just a topic in logic instead of a calculus for everyday practical use.
   The proposed alternative combines a language of utmost simplicity (four constructs only) that is devoid of the defects of common mathematical conventions, with a set of convenient calculation rules that is sufficiently comprehensive to make it practical for everyday use in most (if not all) domains of interest.
   Its main elements are a functional predicate calculus and concrete generic functionals. The first supports formal calculation with quantifiers with the same fluency as with derivatives and integrals in classical applied mathematics and engineering. The second achieves the same for calculating with functionals, including smooth transition between pointwise and point-free expression.
   The extensive collection of examples pertains mainly to software specification, language semantics and its mathematical basis, program calculation etc., but occasionally shows wider applicability throughout applied mathematics and engineering. Often it illustrates how formal reasoning guided by the shape of the expressions is an instrument for discovery and expanding intuition, or highlights design opportunities in declarative and (functional) programming languages.
C1 Univ Ghent, INTEC, B-9000 Ghent, Belgium.
C3 Ghent University
RP Boute, R (corresponding author), Univ Ghent, INTEC, B-9000 Ghent, Belgium.
EM raymond.boute@intec.Ugent.be
CR Aarts C., 1992, RELATIONAL THEORY DA
   Almstrum V.L., 1996, Teaching and Learning Formal Methods, P131
   Alur R., 1996, LECT NOTES COMPUTER, V1066
   [Anonymous], 1987, A Formalization Of Set Theory Without Variables
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 1987, Introduction to Mathematical Logic
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   BACKUS J, 1978, COMMUN ACM, V21, P8
   BIRD R, 1998, PRENTICE HALL INT SE
   BISHOP RH, 2001, LABVIEW STUDENT EDIT
   BOITEN E, 2002, P 6 INT C MATH PROGR
   BOUTE R, 1993, NATO ADV SCI INST SE, V249, P3
   Boute R, 2000, IEEE T SOFTWARE ENG, V26, P662, DOI 10.1109/32.859534
   BOUTE R, 1993, DECLARATIVE SYSTEMS, V1
   BOUTE R, 2002, FUNCTIONAL MATH UN 1
   BOUTE R, 2004, TRB200403 INTEC GHEN
   BOUTE RT, 1992, ACM T PROGR LANG SYS, V14, P127, DOI 10.1145/128861.128862
   BOUTE RT, 1991, COMPUTER HARDWARE DESCRIPTION LANGUAGES AND THEIR APPLICATIONS, P185
   Boute RT, 2003, INT FED INFO PROC, V115, P89
   BOUTE RT, 1982, MICROSYSTEMS ARCHITE, P259
   BOUTE RT, 1990, ACM SIGPLAN NOTICES, V25, P22
   BRYANT RE, 1992, COMPUT SURV, V24, P293, DOI 10.1145/136035.136043
   BUCK JT, 1994, INT J COMPUT SIM JAN
   Carson RalphS., 1990, RADIO COMMUNICATIONS
   COHEN E, 1990, PROGRAMMING 1990S
   Cori Rene, 2000, MATH LOGIC COURSE 1
   Davenport J. H., 2000, SIGSAM Bulletin, V34, P16, DOI 10.1145/362001.362014
   DEAN C, 1996, TEACHING LEARNING FO, P197
   Dijkstra E.W, 1992, EWD1130
   DIJKSTRA EW, 2000, EWD1298
   DIJKSTRA EW, 1996, EWD1249
   DIJKSTRA EW, 1996, EWD1247
   FORSTER TE, 1992, SET THEORY UNIVERAL
   GIERZ G, 1980, COMPENDIUM DISCRETE
   Graham R. L, 1994, CONCRETE MATH FDN CO, V2nd
   Gries D., 1993, LOGICAL APPROACH DIS
   GRIES D, 1996, CALCULATIONAL PROOF
   GRIES D, 1996, IEEE COMPUT, V29, P29
   Halmos Paul., 1998, Logic as Algebra
   HARRISON J, 2000, HOL LIGHT MANUAL
   HEHNER ECR, 1996, BOOLEAN FORMALISM EX
   Hudak Paul, 2003, LECT NOTES COMPUTER, V2638
   Hudak Paul., 1999, A gentle introduction to haskell 98
   *IEEE, 1994, IEEE STAND VHDL LANG
   ILLINGWORTH V, 1989, DICT COMPUTING
   JACKSON PB, 1992, IFIP TRANS A, V10, P311
   JENSEN K, 1978, PASCAL USER MANUAL R
   JOHNSONLAIRD PN, 2000, EXAMPLE PROBLEMS PSY
   LAMPORT L, 1997, 147 SRC DIG EQ CORP
   Lamport L., 1993, How to Write a Proof
   Lang S., 1983, UNDERGRADUATE ANAL
   Loeckx J., 1984, FDN PROGRAM VERIFICA
   Manolios P, 2001, INFORM PROCESS LETT, V77, P173, DOI 10.1016/S0020-0190(00)00200-3
   MEYER B, 1991, INTRO THEORY PROGRAM
   OSTROFF JS, MATH10902090
   PAGE R, 2000, BESEME BETTER SOFTWA
   PARNAS DL, 1993, IEEE T SOFTWARE ENG, V19, P856, DOI 10.1109/32.241769
   PAULSON LC, 2001, INTRO ISABELLE
   Pugh W., 1994, ACM SIGPLAN NOTICES, V29, P121
   RECHENBERG P, 1990, STRUCT PROGRAM, V11, P105
   REYNOLDS JC, 1980, LNCS, V94, P261
   Roberts R A., 1987, Digital signal processing
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Schieder B, 1999, COMPUT J, V42, P73, DOI 10.1093/comjnl/42.2.73
   Spivey J. M., 1989, The Z Notation: A Reference Manual
   Stoy Joseph E., 1977, DENOTATIONAL SEMANTI
   TAYLOR P, 2000, CAMBRIDGE STUDIES AD, V59
   Tennent R.D., 1991, Semantics of Programming Languages
   VAANDRAGER FW, 1999, LECT NOTES COMPUTER, V1569
   VANDENBEUKEN F, 1997, THESIS U NIJMEGEN
   VANTHIENEN H, 1994, THESIS U NIJMEGEN
   WECHLER W, 1987, UNIVERSAL ALGEBRA CO
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Wolfram S., 1996, MATH BOOK
   ZAMFIRESCU A, 1993, NATO ADV SCI INST SE, V249, P79
NR 76
TC 12
Z9 12
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2005
VL 27
IS 5
BP 988
EP 1047
DI 10.1145/1086642.1086647
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 981JL
UT WOS:000233084800005
OA Bronze
DA 2024-07-18
ER

PT J
AU Alur, R
   Benedikt, M
   Etessami, K
   Godefroid, P
   Reps, T
   Yannakakis, M
AF Alur, R
   Benedikt, M
   Etessami, K
   Godefroid, P
   Reps, T
   Yannakakis, M
TI Analysis of recursive state machines
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE verification; algorithms; software verification; recursive state
   machines; pushdown automata; context-free languages; model checking;
   temporal logic; program analysis
ID MODEL CHECKING; MODULAR STRATEGIES; GAMES
AB Recursive state machines (RSMs) enhance the power of ordinary state machines by allowing vertices to correspond either to ordinary states or to potentially recursive invocations of other state machines. RSMs can model the control flow in sequential imperative programs containing recursive procedure calls. They can be viewed as a visual notation extending Statecharts-like hierarchical state machines, where concurrency is disallowed but recursion is allowed. They are also related to various models of pushdown systems studied in the verification and program analysis communities.
   After introducing RSMs and comparing their expressiveness with other models, we focus on whether verification can be efficiently performed for RSMs. Our first goal is to examine the verification of linear time properties of RSMs. We begin this study by dealing with two key components for algorithmic analysis and model checking, namely, reachability (Is a target state reachable from initial states?) and cycle detection (Is there a reachable cycle containing an accepting state?). We show that both these problems can be solved in time 0(n theta(2)) and space 0(n theta), where n is the size of the recursive machine and theta is the maximum, over all component state machines, of the minimum of the number of entries and the number of exits of each component. From this, we easily derive algorithms for linear time temporal logic model checking with the same complexity in the model. We then turn to properties in the branching time logic CTL*, and again demonstrate a bound linear in the size of the state machine, but only for the case of RSMs with a single exit node.
C1 Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
   Bell Labs, Lucent Technol, Lisle, IL 60532 USA.
   Univ Edinburgh, Lab Fdn Comp Sci, Edinburgh EH9 3JZ, Midlothian, Scotland.
   Univ Wisconsin, Dept Comp Sci, Madison, WI 53706 USA.
   Columbia Univ, Dept Comp Sci, New York, NY 10027 USA.
C3 University of Pennsylvania; AT&T; Alcatel-Lucent; Lucent Technologies;
   University of Edinburgh; University of Wisconsin System; University of
   Wisconsin Madison; Columbia University
RP Univ Penn, Dept Comp & Informat Sci, 3330 Walnut St, Philadelphia, PA 19104 USA.
EM alur@cis.upenn.edu; benedikt@bell-labs.com; kousha@inf.ed.ac.uk;
   god@bell-labs.com; reps@cs.wisc.edu; mihali@cs.columbia.edu
OI benedikt, michael/0000-0003-2964-0880
CR Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   Alur R, 2003, LECT NOTES COMPUT SC, V2619, P363
   Alur R, 2001, LECT NOTES COMPUT SC, V2102, P207
   Alur R, 2001, ACM T PROGR LANG SYS, V23, P273, DOI 10.1145/503502.503503
   Alur RA, 2003, LECT NOTES COMPUT SC, V2725, P67
   ANDERSEN HR, 1994, THEOR COMPUT SCI, V126, P3, DOI 10.1016/0304-3975(94)90266-6
   [Anonymous], 2000, LNCS, DOI [10.1007/10722167_20, DOI 10.1007/1072216720]
   [Anonymous], 1995, P 3 ACM SIGSOFT S FD
   Balaram P, 2004, CURR SCI INDIA, V86, P5
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   BALL T, 2000, SLAM TOOLKIT
   BENEDIKT M, 2001, ICALP, P652
   Booch G., 1997, Unified Modeling Language Semantics and Notation Guide 1.0
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouajjani A, 2003, ACM SIGPLAN NOTICES, V38, P62, DOI 10.1145/640128.604137
   Burkart O, 1999, THEOR COMPUT SCI, V221, P251, DOI 10.1016/S0304-3975(99)00034-1
   BURKHART O, 1992, CONCUR 92, P122
   CAUCAL B, 1990, LECT NOTES COMPUT SC, V484, P311
   Chatterjee K, 2003, LECT NOTES COMPUT SC, V2694, P109
   CHEN H, 2002, P C COMP COMM SECT
   COUSOT P, 1977, FORMAL DESCRIPTIONS, P237
   EMERSON A, 1986, LICS 98, P267
   Emerson E. A., 1990, Handbook of Theoretical Computer Science, VB, P995, DOI [10.1016/b978-0-444-88074-1.50021-4, DOI 10.1016/B978-0-444-88074-1.50021-4]
   Etessami K, 2004, LECT NOTES COMPUT SC, V2937, P282
   FINKEL A, 1997, INF 97 WORKSH, V9
   *GRAMM INC, 2000, COD SYST
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Heintze N, 1997, IEEE S LOG, P342, DOI 10.1109/LICS.1997.614960
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   HORWITZ S, 1997, WISCONSIN PROGRAM SL
   HORWITZ S, 1994, P 3 ACM SIGSOFT S FD, P11
   Melski D, 1999, LECT NOTES COMPUT SC, V1575, P47
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   Reps T, 2003, LECT NOTES COMPUT SC, V2694, P189
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Schwoon S, 2003, P IEEE CSFW, P202, DOI 10.1109/CSFW.2003.1212714
   SCHWOON S, 2002, MOPED SYSTEM
   SCHWOON S, 2003, WEIGHTED PDS LIB
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Ullman J., 1988, PRINCIPLES DATABASE, V1
   VALIANT LG, 1975, J COMPUT SYST SCI, V10, P308, DOI 10.1016/S0022-0000(75)80046-8
   VARDI MY, 1986, J COMPUT SYST SCI, V32, P183, DOI 10.1016/0022-0000(86)90026-7
   Walukiewicz I, 2001, INFORM COMPUT, V164, P234, DOI 10.1006/inco.2000.2894
   WOODS WA, 1970, COMMUN ACM, V13, P591, DOI 10.1145/355598.362773
   *WPDS, 2004, AC LIB WEIGHT PUSHD
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
NR 48
TC 119
Z9 128
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2005
VL 27
IS 4
BP 786
EP 818
DI 10.1145/1075382.1075387
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 956AK
UT WOS:000231271100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Liu, YA
   Stoller, SD
   Li, N
   Rothamel, T
AF Liu, YA
   Stoller, SD
   Li, N
   Rothamel, T
TI Optimizing aggregate array computations in loops
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
ID TRANSFORMATIONS
AB An aggregate array computation is a loop that computes accumulated quantities over array elements. Such computations are common in programs that use arrays, and the array elements involved in such computations often overlap, especially across iterations of loops, resulting in significant redundancy in the overall computations. This article presents a method and algorithms that eliminate such overlapping aggregate array redundancies and shows analytical and experimental performance improvements. The method is based on incrementalization, that is, updating the values of aggregate array computations from iteration to iteration rather than computing them from scratch in each iteration. This involves maintaining additional values not maintained in the original program. We reduce various analysis problems to solving inequality constraints on loop variables and array subscripts, and we apply results from work on array data dependence analysis. For aggregate array computations that have significant redundancy; incrementalization produces drastic speedup compared to previous optimizations; when there is little redundancy, the benefit might be offset by cache effects and other factors. Previous methods for loop optimizations of arrays do not perform incrementalization, and previous techniques for loop incrementalization do not handle arrays.
C1 SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
   IBM Almaden, San Jose, CA 95120 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Stony Brook; International Business Machines (IBM)
RP SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
EM liu@cs.sunysb.edu; stoller@cs.sunysb.edu; ningli@us.ibm.com;
   tom@rothamel.org
RI Liu, Annie/KVB-5867-2024
CR Ahmed N, 2001, INT J PARALLEL PROG, V29, P493, DOI 10.1023/A:1012293814832
   Allan VH, 1995, ACM COMPUT SURV, V27, P367, DOI 10.1145/212094.212131
   Allen F.E., 1971, DESIGN OPTIMIZATION, P1
   ALLEN JR, 1983, THESIS RICE U
   [Anonymous], 1996, Accuracy and Stability of Numerical Algorithms
   [Anonymous], 1994, LECT NOTES COMPUTER, DOI DOI 10.1007/BFB0028329
   BANERJEE U, 1990, P WORKSH ADV LANG CO, P192
   BAUER FL, 1989, IEEE T SOFTWARE ENG, V15, P165, DOI 10.1109/32.21743
   BIRD RS, 1984, ACM T PROGR LANG SYS, V6, P487, DOI 10.1145/1780.1781
   BOOTH R, 1997, INNER LOOPS
   BROMLEY M, 1991, P ACM SIGPLAN 91 C P, P145
   BROY M, 1984, PROGRAM TRANSFORMATI, P199
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   CAI J, 1989, SCI COMPUT PROGRAM, V11, P197, DOI 10.1016/0167-6423(88)90033-0
   CARR S, 1994, SOFTWARE PRACT EXPER, V24, P51, DOI 10.1002/spe.4380240104
   CHATTERJEE S, 2001, P ACM SIGPLAN 01 C P, P286
   CHIN WW, 1992, PROCEEDINGS OF THE 20TH ANNUAL NORTH AMERICAN CONFERENCE OF THE INTERNATIONAL BUSINESS SCHOOLS COMPUTER USERS GROUP, P11, DOI 10.1145/141471.141494
   COCKE J, 1977, COMMUN ACM, V20, P850, DOI 10.1145/359863.359888
   CONSEL C, 1996, 23 ANN ACM S PRINC P
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Earley J., 1976, J COMPUT LANG, V1, P321
   ERNST MD, 1992, THESIS MIT CAMBRIDGE
   FABER P, 2001, LECT NOTES COMPUTER, V2150
   FEAUTRIER P, 1988, RAIRO-RECH OPER, V22, P243
   FEAUTRIER P, 1991, INT J PARALL PROG, V20
   FISHER AL, 1988, INT C PARALLEL PROCE
   FISHER AL, 1990, FRONTIERS MASSIVELY
   FONG A, 1976, 3RD P ACM S PRINC PR, P104
   Fong AmeliaC., 1979, POPL 79, P21
   FRANKSEN OI, 1985, BABBAGES SECRET TALE
   GARG VK, 1996, TRPDS1996005 U TEX A
   GOLDBERG A, 1984, 1984 ACM S LISP FUNC, P53
   GOLDSTINE HH, 1972, COMPUTER PASCAL VONN, P10
   GOUBAULT E, 2001, LECT NOTES COMPUTER, V2126
   GRAU AA, 1967, HDB AUTOMATIC COMPUT, V1
   GRIES D, 1982, SCI COMPUT PROGRAM, V2, P207, DOI 10.1016/0167-6423(83)90015-1
   GUIBAS LJ, 1978, 5 ANN ACM S PRINC PR, P1
   HIGHNAM PT, 1991, THESIS CARNEGIE MELL
   KATZ S, 1978, IEEE T SOFTWARE ENG, V4, P378, DOI 10.1109/TSE.1978.233858
   KELLY W, 1994, LECT NOTES COMPUTER, V829
   Knuth D. E., 1971, Software - Practice and Experience, V1, P105, DOI 10.1002/spe.4380010203
   Li K, 1997, EXP MECH, V37, P111, DOI 10.1007/BF02317845
   Liu Y. A., 2003, Higher-Order and Symbolic Computation, V16, P37, DOI 10.1023/A:1023068020483
   Liu Y. A., 2000, Higher-Order and Symbolic Computation, V13, P289, DOI 10.1023/A:1026547031739
   LIU YA, 1995, SCI COMPUT PROGRAM, V24, P1, DOI 10.1016/0167-6423(94)00031-9
   Liu YA, 1997, ALGORITHMIC LANGUAGES AND CALCULI, P357
   LIU YA, 2002, P ACM SIGPLAN 2002 W, P108, DOI [10.1145/568173.568180, DOI 10.1145/568173.568180]
   Liu YHA, 1998, ACM T PROGR LANG SYS, V20, P546, DOI 10.1145/291889.291895
   Liu YHA, 2001, SCI COMPUT PROGRAM, V41, P139, DOI 10.1016/S0167-6423(01)00003-X
   MASLOV V, 1994, 21 ANN ACM S PRINC P
   PAIGE R, 1990, LECT NOTES COMPUT SC, V432, P36
   PAIGE R, 1982, ACM T PROGR LANG SYS, V4, P402, DOI 10.1145/357172.357177
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   Pugh W, 1998, ACM T PROGR LANG SYS, V20, P635, DOI 10.1145/291889.291900
   PUGH W, 1991, INT C SUP COL GERM J, P341
   REPS T, 1988, SYNTHESIZER GENERATO
   SARKAR V, 1992, P ACM SIGPLAN 92 C P, P175
   SMITH DR, 1990, IEEE T SOFTWARE ENG, V16, P1024, DOI 10.1109/32.58788
   WADLER P, 1988, LECT NOTES COMPUT SC, V300, P344
   WARREN J, 1984, 11TH ANN ACM S PRINC, P272
   WATERS RC, 1991, ACM T PROGR LANG SYS, V13, P52, DOI 10.1145/114005.102806
   WEBB JA, 1992, COMPUTER, V25, P21, DOI 10.1109/2.121472
   Wegbreit B., 1976, IEEE Transactions on Software Engineering, VSE-2, P69, DOI 10.1109/TSE.1976.233533
   WELLS WM, 1986, IEEE T PATTERN ANAL, V8, P234, DOI 10.1109/TPAMI.1986.4767776
   YELLIN DM, 1991, ACM T PROGR LANG SYS, V13, P211, DOI 10.1145/103135.103137
   ZABIH R, 1994, THESIS STANFORD U ST
   1996, P ACM SIGPLAN 96 C P
NR 67
TC 18
Z9 21
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2005
VL 27
IS 1
BP 91
EP 125
DI 10.1145/1053468.1053471
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 896KW
UT WOS:000226934000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Shao, Z
   Trifonov, V
   Saha, B
   Papaspyrou, N
AF Shao, Z
   Trifonov, V
   Saha, B
   Papaspyrou, N
TI A type system for certified binaries
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE certified code; proof-preserving compilation; typed intermediate
   languages
AB A certified binary is a value together with a proof that the value satisfies a given specification. Existing compilers that generate certified code have focused on simple memory and control-flow safety rather than more advanced properties. In this article, we present a general framework for explicitly representing complex propositions and proofs in typed intermediate and assembly languages. The new framework allows us to reason about certified programs that involve effects while still maintaining decidable typechecking. We show how to integrate an entire proof system (the calculus of inductive constructions) into a compiler intermediate language and how the intermediate language can undergo complex transformations (CPS and closure conversion) while preserving proofs represented in the type system. Our work provides a foundation for the process of automatically generating certified binaries in a type-theoretic framework.
C1 Yale Univ, Dept Comp Sci, New Haven, CT 06520 USA.
   Intel Corp, Microproc Technol Lab, Santa Clara, CA 95054 USA.
   Natl Tech Univ Athens, Dept Elect & Comp Engn, Software Engn Lab, Athens 15780, Greece.
C3 Yale University; Intel Corporation; National Technical University of
   Athens
RP Yale Univ, Dept Comp Sci, POB 208285, New Haven, CT 06520 USA.
EM shao@cs.yale.edu; trifonov@cs.yale.edu; bratin.saha@intel.com;
   nickie@softlab.ntua.gr
OI Papaspyrou, Nikolaos/0000-0002-1934-7181; Shao,
   Zhong/0000-0001-8184-7649
CR ALTENKIRCH T, 1993, THESIS U EDINBURGH U
   [Anonymous], PLDI 98
   Appel A.W., 2000, PROC 27 ACM S PRINCI, P243
   APPEL AW, 2001, CSTR63601 PRINC U
   Barendregt, 1991, HDB LOGIC COMPUTER S, V2
   Barendregt H. P., 1999, HDB AUTOMATED REASON
   Barthe G., 1999, Higher-Order and Symbolic Computation, V12, P125, DOI 10.1023/A:1010000206149
   Benjamin Werner, 1994, THESIS U PARIS 7 PAR, V7
   BURSTALL R, 1991, ECSLFCS91133 U ED
   Cervesato I, 1996, IEEE S LOG, P264, DOI 10.1109/LICS.1996.561339
   COLBY C, 2000, P 2000 ACM C PROG LA, P95
   CONSTABLE R, 1985, ANN DISC MATH, V24
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   CRARY K, 1998, P 1998 ACM SIGPLAN I, P301
   CRARY K, 2001, CMUCS01113
   Crary Karl., 2000, POPL 2000 P 27 ACM S, P184
   Girard J.-Y., 1972, PhD thesis
   GUEVENS H, 1993, THESIS CATHOLIC U NI
   HARPER R, 1995, P 22 ACM S PRINC PRO, P130
   HARPER R, 2000, PRACTICE TYPE THEORY
   HARPER R, 1993, P 20 ACM S PRINC PRO, P206
   HAYASHI S, 1991, P INT C THEOR ASP CO, P701
   HOWARD WA, 1980, HB CURRY ESSAYS COMP
   Huet Gerard P., 2000, COQ PROOF ASSISTANT
   Minamide Yasuhiko, 1996, S PRINC PROGR LANG P, P271, DOI DOI 10.1145/237721.237791
   MONNIER S, 2001, P 2001 ACM C PROG LA, P81
   Morrisett G., 1998, POPL 98, P85, DOI DOI 10.1145/268946.268954
   Necula G, 1998, THESIS CARNEGIE MELL
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Necula GC, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P229, DOI 10.1145/248155.238781
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   Paulin-Mohring Christine., 1989, P 16 ACM SIGPLAN S P, P89
   PAULINMOHRING C, 1993, LECT NOTES COMPUTER, V664
   SHAO Z, 1997, P 1997 ACM SIGPLAN W
   SHAO Z, 2001, YALEUDCSTR1211
   Shao Zhong., 1998, ICFP 98, DOI DOI 10.1145/289423.289460
   SHELDON MA, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P20, DOI 10.1145/91556.91577
   Trifonov Valery, 2000, P 5 ACM SIGPLAN INT, P27, DOI [10.1145/351240.351248, DOI 10.1145/351240.351248]
   Walker D., 2000, P 27 ACM SIGPLAN SIG, P254
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xi Hongwei., 1999, Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P214
NR 43
TC 22
Z9 24
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2005
VL 27
IS 1
BP 1
EP 45
DI 10.1145/1053468.1053469
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 896KW
UT WOS:000226934000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Danvy, O
AF Danvy, Olivier
TI The Tortoise and the Hare Algorithm for Finite Lists, Compositionally
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE The tortoise-and-hare algorithm; slow pointers and fast pointers; TABA
   (There and Back Again); TAFA (There and Forth Again); structural
   recursion; compositionality; fold functions for lists; continuations;
   defunctionalization; lightweight fusion by fixed-point promotion; OCaml;
   Gallina; the Coq Proof Assistant; pure and total functions; immutable
   lists
ID PROGRAMS
AB In the tortoise-and-hare algorithm, when the fast pointer reaches the end of a finite list, the slow pointer points to the middle of this list. In the early 2000's, this property was found to make it possible to program a palindrome detector for immutable lists that operates in one recursive traversal of the given list and performs the smallest possible number of comparisons, using the "There And Back Again" (TABA) recursion pattern. In this article, this palindrome detector is reconstructed in OCaml, formalized with the Coq Proof Assistant, and proved to be correct. More broadly, this article presents a compositional account of the tortoise-and-hare algorithm for finite lists. Concretely, compositionality means that programs that use a fast and a slow pointer can be expressed with an ordinary fold function for lists and reasoned about using ordinary structural induction on the given list. This article also contains a dozen new applications of the TABA recursion pattern and of its tail-recursive variant, "There and Forth Again".
C1 [Danvy, Olivier] Natl Univ Singapore, Yale NUS Coll, 16 Coll Ave West, Singapore 138527, Singapore.
   [Danvy, Olivier] Natl Univ Singapore, Sch Comp, 16 Coll Ave West, Singapore 138527, Singapore.
C3 National University of Singapore; Yale NUS College; National University
   of Singapore
RP Danvy, O (corresponding author), Natl Univ Singapore, Yale NUS Coll, 16 Coll Ave West, Singapore 138527, Singapore.; Danvy, O (corresponding author), Natl Univ Singapore, Sch Comp, 16 Coll Ave West, Singapore 138527, Singapore.
EM danvy@acm.org
CR Amin N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158140
   Berdine Josh, 2004, THESIS U LONDON QUEE
   Bertot Y., 2004, TEXT THEORET COMP S
   Bird R., 1988, INTRO FUNCTIONAL PRO
   Bird Richard S., 1986, TECHNICAL MONOGRAPH
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   BLUM M, 1967, J ACM, V14, P322, DOI 10.1145/321386.321395
   Brunel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371132
   Danvy O, 2005, FUND INFORM, V66, P397
   Danvy O, 2000, THEOR COMPUT SCI, V248, P243, DOI 10.1016/S0304-3975(00)00054-2
   Danvy O, 2022, FUND INFORM, V185, P115, DOI 10.3233/FI-222106
   Danvy O, 2009, SCI COMPUT PROGRAM, V74, P534, DOI 10.1016/j.scico.2007.10.007
   Danvy Olivier, 2022, J FUNCT PROGRAM
   DIJKSTRA EW, 1972, COMMUN ACM, V15, P859, DOI 10.1145/355604.361591
   Fernandes J.P., 2007, P 2007 ACM SIGPLAN S, P102
   Filliatre Jean-Christophe, 2013, 2 PUZZLES DANVY GOLD
   Foner Kenneth, 2016, COMPOSE C
   Giesl J, 2000, LECT NOTES COMPUT SC, V1817, P293, DOI 10.1007/10720327_17
   Hemann Jason, 2016, P SCHEME FUNCTIONAL
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Kidney Donnacha Oisin, 2020, TYP TABA
   Kidney Donnacha Oisin, 2019, SOM TRICKS LIST MAN
   Knuth D. E., 1969, The Art of Computer Programming, Vol. 2, Seminumerical Algorithms, V2
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   Miranda-Perea FE, 2009, ELECTRON NOTES THEOR, V247, P103, DOI 10.1016/j.entcs.2009.07.051
   Mol Mike, 2022, PALINDROME DETECTION
   Morihata A, 2006, LECT NOTES COMPUT SC, V4014, P379, DOI 10.1007/11783596_22
   Nguyen Kim, 2008, THESIS U PARIS SUD O
   Ohori A, 2007, ACM SIGPLAN NOTICES, V42, P143, DOI 10.1145/1190215.1190241
   Pettorossi A., 1996, Partial Evaluation. International Seminar. Selected Papers, P355
   Pettorossi Alberto, 1988, PARTIAL EVALUATION M, P405
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P355, DOI 10.1023/A:1010075320153
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Sergey Ilya, 2014, PROGRAMS PROOFS MECH
   Shivers O, 2006, J FUNCT PROGRAM, V16, P547, DOI 10.1017/S0956796806006009
   Steele G.L., 1984, Common LISP: The Language, V2nd
   Strachey Christopher, 1974, TECHNICAL MONOGRAPH, V11
   Strachey Christopher, 1961, HANDWRITTEN NOTES 19
   Turner D. A., 1982, Functional programming and its applications. An advanced course, P1
   Turner David A., 1976, SASL LANGUAGE MANUAL
   Wadsworth Christopher P., 2000, HIGHER ORDER SYMBOLI, V13, P131
   Wang F., 2018, Advances in Neural Information Processing Systems, V31, P10180
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
NR 44
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2023
VL 45
IS 1
AR 1
DI 10.1145/3564619
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9V9QK
UT WOS:000948718900001
OA Bronze
DA 2024-07-18
ER

PT J
AU Steimann, F
AF Steimann, Friedrich
TI Containerless Plurals: Separating Number from Type in Object-Oriented
   Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Multiplicities in programming; collections; bunches; null-safety;
   object-relational programming
ID LANGUAGE; JAVA
AB To let expressions evaluate to no or many objects, most object-oriented programming languages require the use of special constructs that encode these cases as single objects or values. While the requirement to treat these standard situations idiomatically seems to be broadly accepted, I argue that its alternative, letting expressions evaluate to any number of objects directly, has several advantages that make it worthy of consideration. As a proof of concept, I present a core object-oriented programming language, dubbed NUM, which separates number from type so that the type of an expression is independent of the number of objects it may evaluate to, thus removing one major obstacle to using no, one, and many objects uniformly. Furthermore, NUM abandons null references, replaces the nullability of reference types with the more general notion of countability, and allows methods to be invoked on any number of objects, including no object. To be able to adapt behavior to the actual number of receivers, NUM complements instance methods with plural methods, that is, with methods that operate on a number of objects jointly and that replace static methods known from other languages. An implementation of NUM in Prolog and accompanying type and number safety proofs are presented.
C1 [Steimann, Friedrich] Fernuniv, D-58089 Hagen, Germany.
C3 Fern University Hagen
RP Steimann, F (corresponding author), Fernuniv, D-58089 Hagen, Germany.
EM steimann@acm.org
CR Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   [Anonymous], 2003, UCAMCLTR563
   [Anonymous], 1883, Math. Ann., DOI DOI 10.1007/BF01446819
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Arnold K., 2000, The Java Programming Language, V3rd ed
   Balzer S, 2011, LECT NOTES COMPUT SC, V6813, P358, DOI 10.1007/978-3-642-22655-7_17
   Bierman G, 2005, LECT NOTES COMPUT SC, V3586, P262
   Bierman G., 2005, ECOOP 2005 - Object-Oriented Programming, 19th European Conference, P287, DOI DOI 10.1007/11531142_13
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   Bierman GM, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P479
   Brassel Bernd, 2004, J FUNCT LOG PROGRAM, V2004, P1
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   Cabot Jordi, 2012, Formal Methods for Model-Driven Engineering. 12th International School of Formal Methods for the Design of Computer, Communication and Software Systems (SFM 2012). Advanced Lectures, P58, DOI 10.1007/978-3-642-30982-3_3
   Charguéraud A, 2013, LECT NOTES COMPUT SC, V7792, P41, DOI 10.1007/978-3-642-37036-6_3
   Chen Sheng, 2016, SCHLOSS DAGSTUHL LEI, V6, P1, DOI [10.4230/LIPIcs.ECOOP.2016.6, DOI 10.4230/LIPICS.ECOOP.2016.6]
   Drossopoulou S, 2002, ACM T PROGR LANG SYS, V24, P153, DOI 10.1145/514952.514955
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Fähndrich M, 2003, ACM SIGPLAN NOTICES, V38, P302, DOI 10.1145/949343.949332
   Flatt Matthew., 1999, FORMAL SYNTAX SEMANT, V1523, P241, DOI [10.1007/3-540-48737-9_7, DOI 10.1007/3-540-48737-9_7]
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fowler M., 2011, DOMAIN SPECIFIC LANG
   Gibbons J, 2017, LECT NOTES COMPUT SC, V10201, P556, DOI 10.1007/978-3-662-54434-1_21
   Harkes D, 2014, LECT NOTES COMPUT SC, V8706, P241, DOI 10.1007/978-3-319-11245-9_14
   Harkes Daniel Corstiaan, 2019, THESIS DELFT U TECHN, DOI [10.4233/uuid:5-9805ca-95d0-451--a8f0-55decb26c94a, DOI 10.4233/UUID:5-9805CA-95D0-451--A8F0-55DECB26C94A]
   HEHNER ECR, 1981, INFORM PROCESS LETT, V12, P26, DOI 10.1016/0020-0190(81)90071-5
   Hehner ECR., 1992, PRACTICAL THEORY PRO
   Ibraheem Husain, 1997, ELECTRON NOTES THEOR, V10, P121, DOI DOI 10.1016/S1571-0661(05)80692-9
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   INGALLS DHH, 1986, SIGPLAN NOTICES, V21, P347, DOI 10.1145/960112.28732
   Iverson K. E., 1962, A Programming Language
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Lerner BS, 2013, LECT NOTES COMPUT SC, V7920, P79, DOI 10.1007/978-3-642-39038-8_4
   Liddle S. W., 1993, Data & Knowledge Engineering, V11, P235, DOI 10.1016/0169-023X(93)90024-J
   Meijer E, 2011, COMMUN ACM, V54, P45, DOI [10.1145/2001269.2001285, 10.1145/2016036.2024658]
   Meijer Erik, 2003, P DECLARATIVE PROGRA
   Meinicke J, 2016, IEEE INT CONF AUTOM, P483, DOI 10.1145/2970276.2970322
   Microsoft, 2017, ECMA3342017 MICR, V5th
   MITCHELL JohnC., 2003, CONCEPTS PROGRAMMING
   Morris JM, 2001, ACTA INFORM, V37, P541, DOI 10.1007/PL00013316
   Nipkow T., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P161, DOI 10.1145/268946.268960
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   Noble James, 2000, P PATTERN LANGUAGES, V4, P73
   OMG, 2011, OMG UN MOD LANG OMG
   OMG (Object Management Group), 2012, OBJECT CONSTRAINT LA
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pin-Shan Chen P., 1976, ACM Transactions on Database Systems, V1, P9, DOI 10.1145/320434.320440
   Rumbaugh James E., 1987, C OBJ OR PROGR SYST, P466, DOI [10.1145/38765.38850, DOI 10.1145/38765.38850]
   Rumbaugh James E., 1988, C OBJ OR PROGR SYST, P285, DOI [10.1145/62083.62109, DOI 10.1145/62083.62109]
   Russell Craig., 2008, Queue, V6, P18, DOI [10.1145/1394127.1394139, DOI 10.1145/1394127.1394139]
   Servetto M, 2013, LECT NOTES COMPUT SC, V7920, P205, DOI 10.1007/978-3-642-39038-8_9
   Siek Jeremy, 2013, BLOG POST
   Slepak J, 2014, LECT NOTES COMPUT SC, V8410, P27
   SONDERGAARD H, 1992, COMPUT J, V35, P514, DOI 10.1093/comjnl/35.5.514
   Steele GL, 2017, ACM SIGPLAN NOTICES, V52, P1, DOI [10.1145/3155284.3018773, 10.1145/3018743.3018773]
   Steimann Friedrich, 2021, Onward! 2021: Proceedings of the 2021 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P125, DOI 10.1145/3486607.3486771
   Steimann F, 2014, J OBJECT TECHNOL, V13, P1, DOI 10.5381/jot.2014.13.5.a1
   Steimann Friedrich, 2015, LEIBNIZ INT P INFORM, V32, P294
   Steimann Friedrich, 2013, P 2013 ACM INT S NEW, P173, DOI [10.1145/2509578.2509582, DOI 10.1145/2509578.2509582]
   Summers Alexander J., 2011, P 26 ANN ACM SIGPLAN, P1013, DOI [10.1145/2048066.2048142, DOI 10.1145/2048066.2048142]
   Topley Kim, 2010, JAVAFXTM DEV GUIDE
   Torgersen M., 2004, SAC 2004, P1289, DOI DOI 10.5381/JOT.2004.3.11.A5
   Ungar David, 2010, 25 ANN ACM SIGPLAN C, P19, DOI [10.1145/1869542.1869546, DOI 10.1145/1869542.1869546]
   VANEMDEN MH, 1976, J ACM, V23, P733, DOI 10.1145/321978.321991
NR 65
TC 1
Z9 1
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2022
VL 44
IS 4
AR 21
DI 10.1145/3527635
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7S4NU
UT WOS:000910732700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Alglave, J
   Deacon, W
   Grisenthwaite, R
   Hacquard, A
   Maranget, L
AF Alglave, Jade
   Deacon, Will
   Grisenthwaite, Richard
   Hacquard, Antoine
   Maranget, Luc
TI Armed Cats: Formal Concurrency Modelling at Arm
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Concurrency Weak memory models; arm architecture; linux; mixed-size
   accesses
ID WEAK MEMORY; CONSISTENCY; X86
AB We report on the process for formal concurrency modelling at Arm. An initial formal consistency model of the Arm achitecture, written in the cat language, was published and upstreamed to the herd+diy tool suite in 2017. Since then, we have extended the original model with extra features, for example, mixed-size accesses, and produced two provably equivalent alternative formulations.
   In this article, we present a comprehensive review of work done at Arm on the consistency model. Along the way, we also show that our principle for handling mixed-size accesses applies to x86: We confirm this via vast experimental campaigns. We also show that our alternative formulations are applicable to any model phrased in a style similar to the one chosen by Arm.
C1 [Alglave, Jade; Deacon, Will; Grisenthwaite, Richard] Arm Ltd, Cambridge, England.
   [Alglave, Jade] UCL, London, England.
   [Hacquard, Antoine] EPITA, Res & Dev Lab, Le Kremlin Bicetre, France.
   [Maranget, Luc] INRIA, Paris, France.
C3 Arm Holdings; University of London; University College London; Inria
RP Alglave, J (corresponding author), UCL, London, England.
EM jade.alglave@arm.com; will@kernel.org; richard.grisenthwaite@arm.com;
   ahacquard@lrde.epita.fr; luc.maranget@inria.fr
CR Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2017, ACM SIGPLAN NOTICES, V52, P3, DOI 10.1145/3093333.3009883
   Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2012, FORM METHOD SYST DES, V40, P170, DOI 10.1007/s10703-011-0135-z
   Alglave J, 2011, LECT NOTES COMPUT SC, V6605, P41, DOI 10.1007/978-3-642-19835-9_5
   Alglave J, 2010, LECT NOTES COMPUT SC, V6174, P258, DOI 10.1007/978-3-642-14295-6_25
   Alglave Jade., 2010, SHARED MEMORY POETIC
   Alglave Jade, 2009, P 4 WORKSH DECL ASP P POPL 2009 WORKSH D, P13
   Alglave Jade, 2010, HERD DIY TOOLSUITE
   Alglave Jade, 2016, ABS160807531 CORR ABS160807531 CORR
   Alglave Jade., 2019, RETR ADD MIX SIZ ACC RETR ADD MIX SIZ ACC
   [Anonymous], 2019, JADE ALGLAVE
   [Anonymous], 2021, VIKTOR VAFEIADIS
   [Anonymous], 2020, JADE ALGLAVE
   Arm Limited, 2020, ARM ARCHITECTURE REF
   Arm Ltd, 2020, ARM REL CAT MOD ARM REL CAT MOD
   Arm Ltd, 2020, ARM MEM MOD ARM MEM MOD
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Chong N, 2018, ACM SIGPLAN NOTICES, V53, P211, DOI 10.1145/3192366.3192373
   Chong Nathan, 2008, ACM SIGPLAN WORKSH M ACM SIGPLAN WORKSH M
   Deacon Will, 2017, FORMAL MEMORY MODEL
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Gooch Richard, 2005, LIN KERN VIRT FIL SY LIN KERN VIRT FIL SY
   Hacquard Antoine, MIXED SIZE EXPT AARC
   Hoare C. A. R., 1974, Acta Informatica, V3, P135, DOI 10.1007/BF00264034
   Jackson D, 2019, COMMUN ACM, V62, P66, DOI 10.1145/3338843
   Jagadeesan Radha, 2020, P ACM PROGR LANG OOP P ACM PROGR LANG OOP
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lustig D, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P257, DOI 10.1145/3297858.3304043
   Pulte C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1, DOI 10.1145/3314221.3314624
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   RISC-V, 2019, RISC 5 INSTR SET MAN
   Sarkar S., 2012, Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation, PLDI '12, P311, DOI [10.1145/2254064.2254102, DOI 10.1145/2254064.2254102]
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Sarkar S, 2009, ACM SIGPLAN NOTICES, V44, P379, DOI 10.1145/1594834.1480929
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Simner Ben, 2020, ARMV8 A SYSTEM SEMAN
   Watt C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P346, DOI 10.1145/3385412.3385973
NR 43
TC 16
Z9 16
U1 2
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2021
VL 43
IS 2
AR 8
DI 10.1145/3458926
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TP4PI
UT WOS:000677577200004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Marino, D
   Singh, A
   Millstein, T
   Musuvathi, M
   Narayanasamy, S
AF Marino, Daniel
   Singh, Abhayendra
   Millstein, Todd
   Musuvathi, Madanlal
   Narayanasamy, Satish
TI DRF<i>x</i>: An Understandable, High Performance, and Flexible Memory
   Model for Concurrent Languages
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Sequential consistency; memory models; DRFx
AB The most intuitive memory model for shared-memory multi-threaded programming is sequential consistency (SC), but it disallows the use of many compiler and hardware optimizations and thus affects performance. Data-race-free (DRF) models, such as the C++11 memory model, guarantee SC execution for data-race-free programs. But these models provide no guarantee at all for racy programs, compromising the safety and debuggability of such programs. To address the safety issue, the Java memory model, which is also based on the DRF model, provides a weak semantics for racy executions. However, this semantics is subtle and complex, making it difficult for programmers to reason about their programs and for compiler writers to ensure the correctness of compiler optimizations.
   We present the DRFx memory model, which is simple for programmers to understand and use while still supporting many common optimizations. We introduce a memory model (MM) exception that can be signaled to halt execution. If a program executes without throwing this exception, then DRFx guarantees that the execution is SC. If a program throws an MM exception during an execution, then DRFx guarantees that the program has a data race. We observe that SC violations can be detected in hardware through a lightweight form of conflict detection. Furthermore, our model safely allows aggressive compiler and hardware optimizations within compiler-designated program regions. We formalize our memory model, prove several properties of this model, describe a compiler and hardware design suitable for DRFx, and evaluate the performance overhead due to our compiler and hardware requirements.
C1 [Marino, Daniel] Symantec Corp, 900 Corp Pointe, Culver City, CA 90230 USA.
   [Singh, Abhayendra] Google Inc, 1600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
   [Narayanasamy, Satish] Univ Michigan, Dept Comp Sci, Ann Arbor, MI 48109 USA.
   [Millstein, Todd] Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90024 USA.
   [Musuvathi, Madanlal] Microsoft Res, Redmond, WA USA.
C3 Symantec; Google Incorporated; University of Michigan System; University
   of Michigan; University of California System; University of California
   Los Angeles; Microsoft
RP Marino, D (corresponding author), Symantec Corp, 900 Corp Pointe, Culver City, CA 90230 USA.
OI Narayanasamy, Satish/0000-0001-5016-1214
FU National Science Foundation [CNS-0725354, CNS-0905149, CCF-0916770];
   Defense Advanced Research Projects Agency [HR0011-09-1-0037]; Direct For
   Computer & Info Scie & Enginr [1149773] Funding Source: National Science
   Foundation; Division of Computing and Communication Foundations
   [1149773] Funding Source: National Science Foundation
FX This work is supported by the National Science Foundation under awards
   CNS-0725354, CNS-0905149, and CCF-0916770 as well as by the Defense
   Advanced Research Projects Agency under award HR0011-09-1-0037.
CR Adve SV, 2010, COMMUN ACM, V53, P90, DOI 10.1145/1787234.1787255
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   ADVE SV, 1991, ACM COMP AR, V19, P234, DOI 10.1145/115953.115976
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 2004, P INT S COD GEN OPT
   [Anonymous], 2008, P 17 INT C PAR ARCH
   Blundell C., 2009, P 36 ANN INT S COMP
   Boehm H. J., 2009, FIT SESS PLDI
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Bond MD, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P255, DOI 10.1145/1806596.1806626
   Boyapati C, 2001, ACM SIGPLAN NOTICES, V36, P56, DOI 10.1145/504311.504287
   Boyapati C., 2002, P OOPSLA
   Ceze L., 2009, USENIX HotPar
   Ceze L, 2006, CONF PROC INT SYMP C, P227, DOI 10.1145/1150019.1136506
   Ceze L, 2007, CONF PROC INT SYMP C, P278, DOI 10.1145/1273440.1250697
   Corporation Intel, 2012, 319433012 INT CORP
   Dice D., 2009, P ASPLOS
   Elmas T, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1250734.1250762
   FIDGE C, 1991, COMPUTER, V24, P28, DOI 10.1109/2.84874
   Flanagan C., 2009, P 2009 C PROGR LANG
   Gharachorloo K., 1991, SPAA '91. 3rd Annual ACM Symposium on Parallel Algorithms and Architectures, P316, DOI 10.1145/113379.113408
   Gharachorloo K., 1990, Proceedings. The 17th Annual International Symposium on Computer Architecture (Cat. No.90CH2887-8), P15, DOI 10.1109/ISCA.1990.134503
   Gharachorloo Kourosh., 1991, Proceedings of the 1991 International Conference on Parallel Processing, P355
   Hammond L, 2004, CONF PROC INT SYMP C, P102
   Haring RA, 2012, IEEE MICRO, V32, P48, DOI 10.1109/MM.2011.108
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   Kamil A., 2005, Proceeding of the 2005 ACM/IEEE conference on Supercomputing, P15
   Krishnamurthy A, 1996, J PARALLEL DISTR COM, V38, P130, DOI 10.1006/jpdc.1996.0136
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lin Changhui, 2012, P 20 INT C ARCH SUPP
   Lucia Brandon, 2010, P 37 ANN INT S COMP
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Marino D., 2009, LiteRace: effective sampling for lightweight data-race detection
   Marino D, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P351, DOI 10.1145/1806596.1806636
   Marino Daniel, 2009, 090021 UCLA COMP SCI
   Marino Daniel, 2011, P 32 ACM SIGPLAN C P
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   Muzahid A., 2009, P 36 ANN INT S COMP
   Muzahid A, 2012, INT SYMP MICROARCH, P363, DOI 10.1109/MICRO.2012.41
   Neelakantam N., 2008, 13 INT C ARCH SUPP P
   Prvulovic Milos, 2003, P 30 ANN INT S COMP
   Qian XH, 2013, ACM SIGPLAN NOTICES, V48, P535, DOI 10.1145/2499368.2451174
   Ranganathan P., 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P199, DOI 10.1145/258492.258512
   Sen K, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P11, DOI 10.1145/1375581.1375584
   Sengupta A, 2015, ACM SIGPLAN NOTICES, V50, P561, DOI [10.1145/2694344.2694379, 10.1145/2775054.2694379]
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Singh A, 2012, CONF PROC INT SYMP C, P524, DOI 10.1109/ISCA.2012.6237045
   Singh A, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1961296.1950375
   Singh Abhayendra, 2011, 110002 UCLA COMP SCI
   Sura Z., 2005, Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, PPoPP '05, P2, DOI DOI 10.1145/1065944.1065947
   Triebel Walter., 2001, Programming Itaniumo-based Systems
   Wenisch Thomas F., 2007, P 34 ANN INT S COMP
   WOLFE M, 1989, PROCEEDINGS : SUPERCOMPUTING 89, P655, DOI 10.1145/76263.76337
   Wonsun Ahn, 2009, P 42 INT S MICR
   WOO SC, 1995, ACM COMP AR, P24, DOI 10.1109/ISCA.1995.524546
NR 56
TC 2
Z9 2
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2016
VL 38
IS 4
AR 16
DI 10.1145/2925988
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC1WS
UT WOS:000387900100004
DA 2024-07-18
ER

PT J
AU Appel, AW
AF Appel, Andrew W.
TI Verification of a Cryptographic Primitive: SHA-256
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Verification; Cryptography
ID SECURITY; PROOFS; NMAC
AB This article presents a full formal machine-checked verification of a C program: the OpenSSL implementation of SHA-256. This is an interactive proof of functional correctness in the Coq proof assistant, using the Verifiable C program logic. Verifiable C is a separation logic for the C language, proved sound with respect to the operational semantics for C, connected to the CompCert verified optimizing C compiler.
C1 Princeton Univ, Dept Comp Sci, Princeton, NJ 08540 USA.
C3 Princeton University
RP Appel, AW (corresponding author), Princeton Univ, Dept Comp Sci, 35 Olden St, Princeton, NJ 08540 USA.
OI Appel, Andrew/0000-0001-6009-0325
FU DARPA [FA8750-12-2-0293]
FX This material is based on research sponsored by the DARPA under
   agreement number FA8750-12-2-0293. The U.S. Government is authorized to
   reproduce and distribute reprints for Governmental purposes not
   with-standing any copyright notation thereon. The views and conclusions
   contained herein are those of the author and should not be interpreted
   as necessarily representing the official policies or endorsements,
   either expressed or implied, of DARPA or the U.S. Government.
CR Almeida J.B., 2013, P 2013 ACM SIGSAC C, P1217
   [Anonymous], 1979, LECT NOTES COMPUTER
   [Anonymous], 2014, WASHINGTON POST
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Armand Michael, 2011, P 1 INT C CERT PROGR
   Backes M, 2012, P IEEE CSFW, P354, DOI 10.1109/CSF.2012.14
   Barthe Gilles, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P11, DOI 10.1007/978-3-642-32347-8_2
   Bellare M., 1996, Advances in Cryptology - CRYPTO'96. 16th Annual International Cryptology Conference. Proceedings, P1
   Bellare M, 2006, LECT NOTES COMPUT SC, V4117, P602
   Besson Frederic, 2011, P 1 INT C CERT PROGR
   Carbonneaux Quentin, 2014, P 2014 ACM SIGPLAN
   Duan JJ, 2005, LECT NOTES ARTIF INT, V3835, P519, DOI 10.1007/11591191_36
   Erkok Levent, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P188, DOI 10.1109/FMCAD.2009.5351121
   FIPS, 2012, 1804 FIPS PUB NAT I
   Gazi P, 2014, LECT NOTES COMPUT SC, V8616, P113, DOI 10.1007/978-3-662-44371-2_7
   Greenaway David, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P99, DOI 10.1007/978-3-642-32347-8_8
   Gu Liang, 2011, P 2 AS PAC WORKSH SY
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Regehr John, 2014, EMBEDDED ACAD
   Schneier Bruce, 1999, CRYPTO GRAM NEWSLETT
   Schneier Bruce, 2013, CRYPTO GRAM NEWSLETT
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   SMITH E. W., 2008, FORMAL METHODS COMPU, P1
   THOMPSON K, 1984, COMMUN ACM, V27, P761, DOI 10.1145/358198.358210
   Toma D, 2005, LECT NOTES COMPUT SC, V3603, P326
   Wang X, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P260, DOI 10.1145/2517349.2522728
   Wu Dinghao., 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, PPDP'03, P264
   Yang Xuejun, 2012, ACM SIGPLAN C PROGR, V47, P283
NR 29
TC 83
Z9 102
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2015
VL 37
IS 2
AR 7
DI 10.1145/2701415
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG7HR
UT WOS:000353474100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Oh, H
   Heo, K
   Lee, W
   Lee, W
   Park, D
   Kang, J
   Yi, K
AF Oh, Hakjoo
   Heo, Kihong
   Lee, Wonchan
   Lee, Woosuk
   Park, Daejun
   Kang, Jeehoon
   Yi, Kwangkeun
TI Global Sparse Analysis Framework
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Programming Languages; Program Analysis; Static analysis; abstract
   interpretation; sparse analysis
ID STATIC ANALYSIS; FLOW; PROGRAMS; ANALYZER; PRECISE; SOUND
AB In this article, we present a general method for achieving global static analyzers that are precise and sound, yet also scalable. Our method, on top of the abstract interpretation framework, is a general sparse analysis technique that supports relational as well as nonrelational semantics properties for various programming languages. Analysis designers first use the abstract interpretation framework to have a global and correct static analyzer whose scalability is unattended. Upon this underlying sound static analyzer, analysis designers add our generalized sparse analysis techniques to improve its scalability while preserving the precision of the underlying analysis. Our method prescribes what to prove to guarantee that the resulting sparse version should preserve the precision of the underlying analyzer.
   We formally present our framework and show that existing sparse analyses are all restricted instances of our framework. In addition, we show more semantically elaborate design examples of sparse nonrelational and relational static analyses. We then present their implementation results that scale to globally analyze up to one million lines of C programs. We also show a set of implementation techniques that turn out to be critical to economically support the sparse analysis process.
C1 [Oh, Hakjoo; Heo, Kihong; Lee, Wonchan; Lee, Woosuk; Park, Daejun; Kang, Jeehoon; Yi, Kwangkeun] Seoul Natl Univ, Dept Comp Sci & Engn, Seoul, South Korea.
C3 Seoul National University (SNU)
RP Oh, H (corresponding author), Seoul Natl Univ, Dept Comp Sci & Engn, 1 Kwanak Ro, Seoul, South Korea.
RI Heo, Kihong/F-2901-2018; Lee, Woosuk/ITV-2754-2023; Heo,
   Kihong/AAD-8692-2019; ‍, 오학주[ 부교수 / 컴퓨터학과 ]/AAW-5194-2020; Kang,
   Jeehoon/E-6130-2019
OI Heo, Kihong/0000-0003-2671-0142; Kang, Jeehoon/0000-0002-2115-0871
FU Engineering Research Center of Excellence Program of Korea Ministry of
   Science, ICT & Future Planning (MSIP)/National Research Foundation of
   Korea (NRF) [NRF-2008-0062609]
FX This work was supported by the Engineering Research Center of Excellence
   Program of Korea Ministry of Science, ICT & Future Planning
   (MSIP)/National Research Foundation of Korea (NRF) (Grant
   NRF-2008-0062609).
CR Allamigeon X, 2006, LECT NOTES COMPUT SC, V4134, P35
   [Anonymous], P ACM SIGPLAN C PROG
   Balakrishnan G, 2004, LECT NOTES COMPUT SC, V2985, P5
   Ben Hardekopf, 2007, P 2007 ACM SIGPLAN C, P290
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Choi Jong-Deok, 1991, P 18 ACM SIGPLANSIGA, P55, DOI DOI 10.1145/99583.99594
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   CYTRON RK, 1995, ACM T PROGR LANG SYS, V17, P487, DOI 10.1145/203095.203099
   DHAMDHERE DM, 1992, SIGPLAN NOTICES, V27, P212, DOI 10.1145/143103.143135
   Dillig I, 2008, ACM SIGPLAN NOTICES, V43, P270, DOI 10.1145/1379022.1375615
   Dillig I, 2011, ACM SIGPLAN NOTICES, V46, P187, DOI 10.1145/1925844.1926407
   Farzan A, 2013, ACM SIGPLAN NOTICES, V48, P129, DOI 10.1145/2480359.2429086
   Farzan A, 2012, ACM SIGPLAN NOTICES, V47, P297, DOI 10.1145/2103621.2103693
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   Hind M, 1998, LECT NOTES COMPUT SC, V1503, P57
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   JOHNSON R, 1993, SIGPLAN NOTICES, V28, P78, DOI 10.1145/173262.155098
   Jong-Deok Choi, 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P223
   Jung YB, 2005, LECT NOTES COMPUT SC, V3672, P203
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Lattner Chris, 2007, P 2007 ACM SIGPLAN C
   Lee W, 2012, LECT NOTES COMPUT SC, V7148, P299, DOI 10.1007/978-3-642-27940-9_20
   Li L, 2011, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON COMPUTER SCIENCE IN SPORT (IACSS2011), P343
   Lind-Nielson Jorn, BINARY DECISION DIAG
   MathWorks, POLYSP EMB SOFTW VER
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   Milanova Ana., 2004, AUTOMAT SOFTW ENG, V11, P7
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Miné A, 2006, ACM SIGPLAN NOTICES, V41, P54, DOI 10.1145/1134650.1134659
   Oh H, 2011, LECT NOTES COMPUT SC, V6538, P356, DOI 10.1007/978-3-642-18275-4_25
   Oh H, 2010, SOFTWARE PRACT EXPER, V40, P585, DOI 10.1002/spe.969
   Oh H, 2009, LECT NOTES COMPUT SC, V5904, P14
   Oh Hakjoo, 2011, LECT NOTES COMPUTER, V7078, P50
   Ramalingam G, 2002, THEOR COMPUT SCI, V277, P119, DOI 10.1016/S0304-3975(00)00315-7
   Reif JohnH., 1977, P 4 ACM SIGACTSIGPLA, P104
   Rinetzky N, 2005, ACM SIGPLAN NOTICES, V40, P296, DOI 10.1145/1047659.1040330
   Thee Y., 2008, WORKSH 30 YEARS ABST
   Tok TB, 2006, LECT NOTES COMPUT SC, V3923, P17
   Venet A, 2004, ACM SIGPLAN NOTICES, V39, P231, DOI 10.1145/996893.996869
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
   Yu HT, 2010, INT SYM CODE GENER, P218
   Zitser M., 2004, Software Engineering Notes, V29, P97, DOI 10.1145/1041685.1029911
NR 52
TC 17
Z9 17
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2014
VL 36
IS 3
AR 8
DI 10.1145/2590811
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS5OI
UT WOS:000344319500001
OA Bronze
DA 2024-07-18
ER

PT J
AU Jagannathan, S
   Laporte, V
   Petri, G
   Pichardie, D
   Vitek, J
AF Jagannathan, Suresh
   Laporte, Vincent
   Petri, Gustavo
   Pichardie, David
   Vitek, Jan
TI Atomicity Refinement for Verified Compilation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Reliability; Security; Verification; Verified compilation;
   managed languages; concurrency; garbage collection; compiler
   transformations and optimizations; refinement; atomicity; mechanized
   proof assistant (Coq)
ID CONCURRENT; LINEARIZABILITY; COMPILER
AB We consider the verified compilation of high-level managed languages like Java or c# whose intermediate representations provide support for shared-memory synchronization and automatic memory management. Our development is framed in the context of the Total Store Order relaxed memory model. Ensuring complier correctness is challenging because high-level actions are translated into sequences of nonatomic actions with compiler-injected snippets of racy code; the behavior of this code depends not only on the actions of other threads but also on out-of-order executions performed by the processor. A naive proof of correctness would require reasoning over all possible thread interleavings. In this article, we propose a refinement-based proof methodology that precisely relates concurrent code expressed at different abstraction levels, cognizant throughout of the relaxed memory semantics of the underlying processor. Our technique allows the compiler writer to reason compositionally about the atomicity of low-level concurrent code used to implement managed services. We illustrate our approach with examples taken from the verification of a concurrent garbage collector.
C1 [Jagannathan, Suresh; Petri, Gustavo; Vitek, Jan] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
   [Laporte, Vincent; Pichardie, David] Univ Rennes 1, F-35014 Rennes, France.
   [Laporte, Vincent; Pichardie, David] IRISA, Rennes, France.
   [Laporte, Vincent; Pichardie, David] INRIA, Projet Celt, F-35042 Rennes, France.
C3 Purdue University System; Purdue University; Universite de Rennes;
   Universite de Rennes; Universite de Rennes; Inria
RP Jagannathan, S (corresponding author), Purdue Univ, Dept Comp Sci, 305 N Univ St, W Lafayette, IN 47907 USA.
RI Vitek, Jan/J-9051-2014
FU National Science Foundation [1216613, 1318227]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [1318227] Funding Source: National Science Foundation; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1216613] Funding Source: National Science Foundation
FX This work is supported by the National Science Foundation, under grants:
   1216613 and 1318227.
CR Alglave J, 2013, LECT NOTES COMPUT SC, V7792, P512, DOI 10.1007/978-3-642-37036-6_28
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 1986, Technical Report RJ 5118
   [Anonymous], 2012, RR7987 INRIA
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Brookes S., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P98, DOI 10.1109/LICS.1993.287596
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7211, P87, DOI 10.1007/978-3-642-28869-2_5
   Dodds M, 2009, LECT NOTES COMPUT SC, V5502, P363, DOI 10.1007/978-3-642-00590-9_26
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Doligez D., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P70, DOI 10.1145/174675.174673
   Domani T., 2000, ISMM, V36, P155
   Elmas T, 2010, LECT NOTES COMPUT SC, V6015, P296, DOI 10.1007/978-3-642-12002-2_25
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Inc. CORPORATE SPARC, 1994, SPARC ARCH MAN VERS
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Liang HJ, 2012, ACM SIGPLAN NOTICES, V47, P455, DOI 10.1145/2103621.2103711
   Liang Hongjin, 2012, TECHNICAL REPORT
   Lochbihler A, 2010, LECT NOTES COMPUT SC, V6012, P427, DOI 10.1007/978-3-642-11957-6_23
   McCreight A, 2010, ACM SIGPLAN NOTICES, V45, P273, DOI 10.1145/1932681.1863584
   Ridge T, 2010, LECT NOTES COMPUT SC, V6217, P55, DOI 10.1007/978-3-642-15057-9_4
   Sarkar S, 2011, ACM SIGPLAN NOTICES, V46, P175, DOI 10.1145/1993316.1993520
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sevcik J, 2011, ACM SIGPLAN NOTICES, V46, P43, DOI 10.1145/1925844.1926393
   Turon A, 2011, ACM SIGPLAN NOTICES, V46, P247, DOI 10.1145/1925844.1926415
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
NR 31
TC 7
Z9 8
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2014
VL 36
IS 2
AR 6
DI 10.1145/2601339
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM4YE
UT WOS:000339861300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Nandivada, VK
   Shirako, J
   Zhao, JS
   Sarkar, V
AF Nandivada, V. Krishna
   Shirako, Jun
   Zhao, Jisheng
   Sarkar, Vivek
TI A Transformation Framework for Optimizing Task-Parallel Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Performance; Experimentation
ID EFFICIENT
AB Task parallelism has increasingly become a trend with programming models such as OpenMP 3.0, Cilk, Java Concurrency, X10, Chapel and Habanero-Java (HJ) to address the requirements of multicore programmers. While task parallelism increases productivity by allowing the programmer to express multiple levels of parallelism, it can also lead to performance degradation due to increased overheads. In this article, we introduce a transformation framework for optimizing task-parallel programs with a focus on task creation and task termination operations. These operations can appear explicitly in constructs such as async, finish in X10 and HJ, task, taskwait in OpenMP 3.0, and spawn, sync in Cilk, or implicitly in composite code statements such as foreach and ateach loops in X10, forall and foreach loops in HJ, and parallel loop in OpenMP.
   Our framework includes a definition of data dependence in task-parallel programs, a happens-before analysis algorithm, and a range of program transformations for optimizing task parallelism. Broadly, our transformations cover three different but interrelated optimizations: (1) finish-elimination, (2) forall-coarsening, and (3) loop-chunking. Finish-elimination removes redundant task termination operations, forall-coarsening replaces expensive task creation and termination operations with more efficient synchronization operations, and loop-chunking extracts useful parallelism from ideal parallelism. All three optimizations are specified in an iterative transformation framework that applies a sequence of relevant transformations until a fixed point is reached. Further, we discuss the impact of exception semantics on the specified transformations, and extend them to handle task-parallel programs with precise exception semantics. Experimental results were obtained for a collection of task-parallel benchmarks on three multicore platforms: a dual-socket 128-thread (16-core) Niagara T2 system, a quad-socket 16-core Intel Xeon SMP, and a quad-socket 32-core Power7 SMP. We have observed that the proposed optimizations interact with each other in a synergistic way, and result in an overall geometric average performance improvement between 6.28x and 10.30x, measured across all three platforms for the benchmarks studied.
C1 [Nandivada, V. Krishna] IIT Madras, Dept Comp Sci & Engn, Chennai 600036, Tamil Nadu, India.
   [Shirako, Jun; Zhao, Jisheng; Sarkar, Vivek] Rice Univ, Dept Comp Sci, Houston, TX 77251 USA.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Madras; Rice University
RP Sarkar, V (corresponding author), Rice Univ, Dept Comp Sci, 6100 Main St, Houston, TX 77251 USA.
EM vsarkar@rice.edu
OI Nandivada, V Krishna/0000-0002-5949-0046
FU IBM; Center for Domain-Specific Computing (CDSC); NSF [CCF-0926127]; New
   Faculty Seed Grant; IIT Madras [CSE/11-12/567/NFSC/NANV]; BM Shared
   University Research (SUR) Award as part of IBM's Smarter Planet
   Initiatives in Life Science/Healthcare; Texas Medical Center; Division
   of Computing and Communication Foundations; Direct For Computer & Info
   Scie & Enginr [0926127] Funding Source: National Science Foundation
FX The authors gratefully acknowledge support from the IBM Open
   Collaborative Faculty Awards in 2008 and 2009. This research is
   partially supported by the Center for Domain-Specific Computing (CDSC),
   funded by the NSF Expeditions in Computing Award CCF-0926127. The work
   is also partially supported by the New Faculty Seed Grant, funded by IIT
   Madras CSE/11-12/567/NFSC/NANV. The POWER7 system at Rice University was
   supported by a 2010 IBM Shared University Research (SUR) Award as part
   of IBM's Smarter Planet Initiatives in Life Science/Healthcare and in
   collaboration with the Texas Medical Center partners, with additional
   contributions from IBM, CISCO, Qlogic, and Adaptive Computing.
CR Agarwal S, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P183, DOI 10.1145/1229428.1229471
   AMARASINGHE SP, 1993, SIGPLAN NOTICES, V28, P126
   [Anonymous], P 2009 IEEE INT S PA
   [Anonymous], 1991, NAS PARALLEL BENCHMA, DOI [DOI 10.1145/125826.125925, 10.1145/125826.125925]
   [Anonymous], 2008, OpenMP Application Program Interface
   [Anonymous], 1999, P 1999 C CTR ADV STU
   Bikshandi G, 2009, ACM SIGPLAN NOTICES, V44, P271, DOI 10.1145/1594835.1504215
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Chamberlain Bradford L., 2004, P IEEE INT WORKSH PR, P66
   Chapel, 2005, CHAP LANG SPEC VERS
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Cytron R., 1990, Proceedings of Supercomputing '90 (Cat. No.90CH2916-5), P398, DOI 10.1109/SUPERC.1990.130047
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Diniz P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P187, DOI 10.1145/263699.263718
   Duesterwald Evelyn, 1991, P S TEST ANAL VER TA, P36
   Duran Alejandro, 2009, Proceedings of the 2009 International Conference on Parallel Processing (ICPP 2009), P124, DOI 10.1109/ICPP.2009.64
   Ferrer R, 2010, LECT NOTES COMPUT SC, V5898, P416, DOI 10.1007/978-3-642-13374-9_30
   Flynn L. E., 1990, 15492 RC IBM
   Gao GR, 2000, IEEE T COMPUT, V49, P798, DOI 10.1109/12.868026
   Georges A, 2007, ACM SIGPLAN NOTICES, V42, P57, DOI 10.1145/1297105.1297033
   Gupta R., 1989, ASPLOS-III Proceedings. Third International Conference on Architectural Support for Programming Languages and Operating Systems, P54, DOI 10.1145/70082.68187
   Habanero, 2009, HAB JAV
   Heinz E. A., 1993, 1393 U KARLR DEP INF
   JGF, 2000, JAV GRAND FOR BENCHM
   Kennedy Ken., 2002, Optimizing compilers for modern architectures: a dependence-based approach
   KRUSKAL CP, 1985, IEEE T SOFTWARE ENG, V11, P1001, DOI 10.1109/TSE.1985.231547
   Kuck D. J., 1987, IEEE T COMPUT, VC-36, P12
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Larus JamesR., 2006, T MEMORY
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Metcalfe M., 1990, FORTRAN 90 EXPLAINED
   Mingdong Feng, 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P1, DOI 10.1145/258492.258493
   Muchnick S., 1997, ADV COMPILER DESIGN
   Narayanan SHK, 2005, PR IEEE COMP DESIGN, P677, DOI 10.1109/ICCD.2005.105
   Nicolau A, 2009, ICS'09: PROCEEDINGS OF THE 2009 ACM SIGARCH INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P169, DOI 10.1145/1542275.1542303
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Peierls T., 2005, JAVA CONCURRENCY PRA
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Sarkar V., 2001, Euro-Par 2001 Parallel Processing. 7th International Euro-Par Conference. Proceedings (Lecture Notes in Computer Science Vol.2150), P273
   Sarkar V., 1988, Conference Proceedings. 1988 International Conference on Supercomputing, P627, DOI 10.1145/55364.55426
   Shirako J, 2008, ICS'08: PROCEEDINGS OF THE 2008 ACM INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P277
   Shirako J, 2009, ICS'09: PROCEEDINGS OF THE 2009 ACM SIGARCH INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P181, DOI 10.1145/1542275.1542304
   TSENG CW, 1995, SIGPLAN NOTICES, V30, P144, DOI 10.1145/209937.209952
   WOLFE M, 1987, INT J PARALLEL PROG, V16, P137, DOI 10.1007/BF01379099
   Wolfe M.J., 1996, High Performance Compilers For Parallel Computing
   Yelick Katherine., 2007, PASCO 07, P24, DOI DOI 10.1145/1278177.1278183
   Yonezawa N, 2006, LECT NOTES COMPUT SC, V4330, P362
   Zhao J., 2011, VMIL 11, P333
   Zhao JS, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P169, DOI 10.1145/1854273.1854298
NR 50
TC 21
Z9 26
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2013
VL 35
IS 1
AR 3
DI 10.1145/2450136.2450138
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 140CM
UT WOS:000318631900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Hoffmann, J
   Aehlig, K
   Hofmann, M
AF Hoffmann, Jan
   Aehlig, Klaus
   Hofmann, Martin
TI Multivariate Amortized Resource Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Performance; Languages; Theory; Reliability; Amortized analysis;
   functional programming; quantitative analysis; resource consumption;
   static analysis
ID COST-ANALYSIS; SPACE; USAGE
AB We study the problem of automatically analyzing the worst-case resource usage of procedures with several arguments. Existing automatic analyses based on amortization or sized types bound the resource usage or result size of such a procedure by a sum of unary functions of the sizes of the arguments.
   In this article we generalize this to arbitrary multivariate polynomial functions thus allowing bounds of the form mn which had to be grossly overestimated by m(2) + n(2) before. Our framework even encompasses bounds like Sigma(i,j<n) m(i)m(j) where the m(i) are the sizes of the entries of a list of length n.
   This allows us for the first time to derive useful resource bounds for operations on matrices that are represented as lists of lists and to considerably improve bounds on other superlinear operations on lists such as longest common subsequence and removal of duplicates from lists of lists. Furthermore, resource bounds are now closed under composition which improves accuracy of the analysis of composed programs when some or all of the components exhibit superlinear resource or size behavior.
   The analysis is based on a novel multivariate amortized resource analysis. We present it in form of a type system for a simple first-order functional language with lists and trees, prove soundness, and describe automatic type inference based on linear programming.
   We have experimentally validated the automatic analysis on a wide range of examples from functional programming with lists and trees. The obtained bounds were compared with actual resource consumption. All bounds were asymptotically tight, and the constants were close or even identical to the optimal ones.
C1 [Hoffmann, Jan] Yale Univ, New Haven, CT 06520 USA.
   [Aehlig, Klaus; Hofmann, Martin] Univ Munich, D-80539 Munich, Germany.
C3 Yale University; University of Munich
RP Hoffmann, J (corresponding author), Yale Univ, New Haven, CT 06520 USA.
EM uni@hoffjan.de
OI Hoffmann, Jan/0000-0001-8326-0788
FU DFG [Graduiertenkolleg 1480]; DARPA CRASH [FA8750-10-2-0254]; NSF
   [CNS-0910670]
FX J. Hoffmann was supported in part by the DFG Graduiertenkolleg 1480
   (PUMA), by DARPA CRASH grant FA8750-10-2-0254, and by NSF grant
   CNS-0910670. Any opinions, findings, and conclusions contained in this
   document are those of the authors and do not reflect the views of these
   agencies.
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2009, ELECTRON NOTES THEOR, V258, P109, DOI 10.1016/j.entcs.2009.12.008
   Albert E, 2008, LECT NOTES COMPUT SC, V5079, P221
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Albert E, 2009, LECT NOTES COMPUT SC, V5904, P294, DOI 10.1007/978-3-642-10672-9_21
   Althaus E, 2011, LCTES 11: PROCEEDINGS OF THE ACM SIGPLAN/SIGBED 2011 CONFERENCE ON LANGUAGES, COMPILERS, TOOLS AND THEORY FOR EMBEDDED SYSTEMS, P141
   Altmeyer S, 2008, RTCSA 2008: 14TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS - PROCEEDINGS, P367, DOI 10.1109/RTCSA.2008.7
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Benzinger R, 2004, THEOR COMPUT SCI, V318, P79, DOI 10.1016/j.tcs.2003.10.022
   Benzinger R, 2001, J FUNCT PROGRAM, V11, P3, DOI 10.1017/S0956796800003865
   Beringer L, 2005, LECT NOTES COMPUT SC, V3452, P347
   Braberman V, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P141
   Bygde S, 2009, IEEE INT CONF EMBED, P13, DOI 10.1109/RTCSA.2009.9
   Campbell B, 2009, LECT NOTES COMPUT SC, V5502, P190, DOI 10.1007/978-3-642-00590-9_14
   Chin WN, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P151
   Clauss P, 2009, IEEE T VLSI SYST, V17, P983, DOI 10.1109/TVLSI.2008.2002049
   Cook B., 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P205, DOI 10.1109/FMCAD.2009.5351120
   COUSOT P, 1992, POPL 92, P83, DOI DOI 10.1145/143165.143184
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   DEBRAY SK, 1993, ACM T PROGR LANG SYS, V15, P826, DOI 10.1145/161468.161472
   FLAJOLET P, 1991, THEOR COMPUT SCI, V79, P37, DOI 10.1016/0304-3975(91)90145-R
   Grobauer B, 2001, ACM SIGPLAN NOTICES, V36, P253, DOI 10.1145/507669.507666
   Gulavani LS, 2008, LECT NOTES COMPUT SC, V5123, P370
   Gulwani S, 2010, ACM SIGPLAN NOTICES, V45, P292, DOI 10.1145/1809028.1806630
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P375, DOI 10.1145/1543135.1542518
   HICKEY T, 1988, J ACM, V35, P185, DOI 10.1145/42267.42275
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6461, P172, DOI 10.1007/978-3-642-17164-2_13
   Hoffmann J, 2011, ACM SIGPLAN NOTICES, V46, P357, DOI 10.1145/1925844.1926427
   Hoffmann Jan, 2011, THESIS LUDWIG MAXIMI
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M, 2000, LECT NOTES COMPUT SC, V1782, P165
   Hofmann M, 2009, LECT NOTES COMPUT SC, V5771, P317, DOI 10.1007/978-3-642-04027-6_24
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Jost S, 2009, LECT NOTES COMPUT SC, V5850, P354, DOI 10.1007/978-3-642-05089-3_23
   LEMETAYER D, 1988, ACM T PROGR LANG SYS, V10, P248, DOI 10.1145/42190.42347
   Leroy X, 2006, LECT NOTES COMPUT SC, V3924, P54
   Lisper Bjorn., 2003, WCET, P99
   Pierce Benjamin C., 2004, Advanced Topics in Types and Programming Languages
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Shkaravska O, 2007, LECT NOTES COMPUT SC, V4583, P351
   Stanley R.P., 2001, Enumerative Combinatorics, V2
   Taha W, 2003, LECT NOTES COMPUT SC, V2855, P340
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Vasconcelos Pedro, 2008, Ph.D. Dissertation
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
   Wei-Ngan Chin, 2001, Higher-Order and Symbolic Computation, V14, P261, DOI 10.1023/A:1012996816178
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 57
TC 78
Z9 83
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2012
VL 34
IS 3
AR 14
DI 10.1145/2362389.2362393
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 033FV
UT WOS:000310780500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Banerjee, U
AF Banerjee, Utpal
TI Mathematical Foundation of Trace Scheduling
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithm; Theory; Trace scheduling; trace replacement; compensation
   code
ID MICROCODE COMPACTION
AB Since its introduction by Joseph A. Fisher in 1979, trace scheduling has influenced much of the work on compile-time ILP (Instruction Level Parallelism) transformations. Initially developed for use in microcode compaction, it quickly became the main technique for machine-level compile-time parallelism exploitation. Although it has been used since the 1980s in many state-of-the-art compilers (e. g., Intel, Fujitsu, HP), a rigorous theory of trace scheduling is still lacking in the existing literature. This is reflected in the ad hoc way compensation code is inserted after a trace compaction, in the total absence of any attempts to measure the size of that compensation code, and so on.
   The aim of this article is to create a mathematical theory of the foundation of trace scheduling. We give a clear algorithm showing how to insert compensation code after a trace is replaced with its schedule, and then prove that the resulting program is indeed equivalent to the original program. We derive an upper bound on the size of that compensation code, and show that this bound can be actually attained. We also give a very simple proof that the trace scheduling algorithm always terminates.
C1 Univ Calif Irvine, Dept Comp Sci, Irvine, CA 92697 USA.
C3 University of California System; University of California Irvine
RP Banerjee, U (corresponding author), Univ Calif Irvine, Dept Comp Sci, Irvine, CA 92697 USA.
EM ubanerjee@acm.org
CR Banerjee U., 1997, DEPENDENCE ANAL
   ELLIS JR, 1985, YALEUDCSRR364
   FISHER JA, 1981, IEEE T COMPUT, V30, P478, DOI 10.1109/TC.1981.1675827
   FISHER JA, 1979, COO3077161 NEW YORK
   HWU WMW, 1993, J SUPERCOMPUT, V7, P229, DOI 10.1007/BF01205185
   LANDSKOV D, 1980, COMPUT SURV, V12, P261, DOI 10.1145/356819.356822
   LOWNEY PG, 1993, J SUPERCOMPUT, V7, P51, DOI 10.1007/BF01205182
   NICOLAU A, 1985, YALEDCSRR374 YAL U
NR 8
TC 1
Z9 1
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2011
VL 33
IS 3
AR 10
DI 10.1145/1961204.1961206
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 756NQ
UT WOS:000290019800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Müller-Olm, M
   Seidl, H
AF Mueller-Olm, Markus
   Seidl, Helmut
TI Analysis of modular arithmetic
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 14th European Symposium on Programming (ESOP 2005)
CY APR 04-08, 2005
CL Edinburgh, SCOTLAND
DE algorithms; theory; verification; program analysis; modular arithmetic;
   abstract interpretation; affine relation; interprocedural analysis
AB We consider integer arithmetic modulo a power of 2 as provided by mainstream programming languages like Java or standard implementations of C. The difficulty here is that, for w > 1, the ring Z(m) of integers modulo m = 2(w) has zero divisors and thus cannot be embedded into a field. Not withstanding that, we present intra- and interprocedural algorithms for inferring for every program point u affine relations between program variables valid at u. If conditional branching is replaced with nondeterministic branching, our algorithms are not only sound but also complete in that they detect all valid affine relations in a natural class of programs. Moreover, they run in time linear in the program size and polynomial in the number of program variables and can be implemented by using the same modular integer arithmetic as the target language to be analyzed. We also indicate how our analysis can be extended to deal with equality guards, even in an interprocedural setting.
C1 Univ Munster, Inst Informat, Fachbereich Math & Informat, D-48149 Munster, Germany.
   Tech Univ Munich, Inst Informat, D-80333 Munich, Germany.
C3 University of Munster; Technical University of Munich
RP Müller-Olm, M (corresponding author), Univ Munster, Inst Informat, Fachbereich Math & Informat, Einsteinstr 62, D-48149 Munster, Germany.
EM mmo@math.uni-muenster.de; seidl@in.tum.de
CR Balaram P, 2004, CURR SCI INDIA, V86, P5
   BALBIN I, 1987, J LOGIC PROGRAM, V4, P259, DOI 10.1016/0743-1066(87)90004-5
   CHANDRA AK, 1981, J ACM, V28, P114, DOI 10.1145/322234.322243
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Fecht C., 1998, Nordic Journal of Computing, V5, P304
   FECHT C, 1998, NORDIC J COMPUT, V5, P4
   Gosling James, 1996, The Java Language Specification
   GRANGER P, 1991, LECT NOTES COMPUT SC, V493, P169
   GULWANI S, 2003, P 30 ACM SIGPLAN SIG, P74
   HAFNER JL, 1991, SIAM J COMPUT, V20, P1068, DOI 10.1137/0220067
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   LEROUX J, 2003, THESIS ECOLE NORMALE
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3672, P235
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3444, P46
   Müller-Olm M, 2004, LECT NOTES COMPUT SC, V3142, P1016
   MULLEROLM M, 2004, 789 U DORTM FACHB IN
   MULLEROLM M, 2004, POPL, P330
   PAIGE R, 1982, ACM T PROGR LANG SYS, V4, P402, DOI 10.1145/357172.357177
   Reps T, 2003, LECT NOTES COMPUT SC, V2694, P189
   REPS T, 2006, COMMUNICATION
   Reps Thomas., 2006, P 2006 ACM SIGPLAN S, P100
   STORJOHANN THESIS, 2000, 13922 ETH
   Tarski Alfred, 1955, PAC J MATH, V5, P2
   Warren H. S, 2003, Hacker's Delight
NR 24
TC 31
Z9 35
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 5
AR 29
DI 10.1145/1275497.1275504
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208NR
UT WOS:000249327000007
OA Bronze
DA 2024-07-18
ER

PT J
AU Boute, RT
AF Boute, Raymond T.
TI Calculational semantics: deriving programming theories from equations by
   functional predicate calculus
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE assignment; axiomatic semantics; calculational reasoning
AB The objects of programming semantics, namely, programs and languages, are inherently formal, but the derivation of semantic theories is all too often informal, deprived of the benefits of formal calculation "guided by the shape of the formulas." Therefore, the main goal of this article is to provide for the study of semantics an approach with the same convenience and power of discovery that calculus has given for many years to applied mathematics, physics, and engineering. The approach uses functional predicate calculus and concrete generic functionals; in fact, a small part suffices. Application to a semantic theory proceeds by describing program behavior in the simplest possible way, namely by program equations, and discovering the axioms of the theory as theorems by calculation. This is shown in outline for a few theories, and in detail for axiomatic semantics, fulfilling a second goal of this article. Indeed, a chafing problem with classical axiomatic semantics is that some axioms are unintuitive at first, and that justifications via denotational semantics are too elaborate to be satisfactory. Derivation provides more transparency. Calculation of formulas for ante- and postconditions is shown in general, and for the major language constructs in particular. A basic problem reported in the literature, whereby relations are inadequate for handling nondeterminacy and termination, is solved here through appropriately defined program equations. Several variants and an example in mathematical analysis are also presented. One conclusion is that formal calculation with quantifiers is one of the most important elements for unifying continuous and discrete mathematics in general, and traditional engineering with computing science, in particular.
C1 Univ Ghent, INTEC, B-9000 Ghent, Belgium.
C3 Ghent University
RP Boute, RT (corresponding author), Univ Ghent, INTEC, St Pietersnieuwstr 41, B-9000 Ghent, Belgium.
EM boute@intec.UGent.be
CR [Anonymous], 1990, Predicate Calculus and Program Semantics
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1983, THEOR COMPUT SCI, V23, P187, DOI 10.1016/0304-3975(83)90055-5
   BACK RJR, 1992, THEOR COMPUT SCI, V100, P365, DOI 10.1016/0304-3975(92)90309-4
   BACKHOUSE R, 2002, GALOIS CONNECTIONS
   Bass H., 2003, Notices of the AMS, V50, P767
   BOITEN E, 2002, 6 INT C MATH PROGR C
   Boute R, 2005, ACM T PROGR LANG SYS, V27, P988, DOI 10.1145/1086642.1086647
   BOUTE R, 2002, FUNCTIONAL MATH UNIF
   BOUTE R, 1993, DECLARATIVE SYSTEM 1
   BOUTE RT, 1988, ACM T PROGR LANG SYS, V10, P118, DOI 10.1145/42192.45067
   Boute RT, 2003, INT FED INFO PROC, V115, P89
   COHEN E, 1990, PROGRAMMING 1990 INT
   de Bakker Jaco., 1980, Mathematical Theory of Program Correctness
   DEAN CN, 1996, TEACHING LEARNING FO
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DIJKSTRA EW, 2000, SPELL LEIBNIZS DREAM
   DIJKSTRA RM, 1994, CSR9408 U GRON DEP C
   DIJKSTRA RM, 1998, LNCS, V1422, P151
   GORDON M, 2003, SPECIFICATION VERIFI
   Gries D., 1993, LOGICAL APPROACH DIS
   GRIES D, 1996, IEEE COMPUT, V29, P29
   HANCOCK P, 2004, REFINEMENT CALCULUS
   Hehner E. C. R., 2004, PRACTICAL THEORY PRO
   Hehner ECR, 1999, SCI COMPUT PROGRAM, V34, P191, DOI 10.1016/S0167-6423(98)00027-6
   HESSELINK WH, 1992, PROGRAMS RECURSION U
   Hoare C. A. R., 1998, Unifying Theories of Programming
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   LAMPORT L, 2004, P 2004 COLOGNET FME
   Lamport L., 2002, SPECIFYING SYSTEMS
   Lang S., 1983, UNDERGRADUATE ANAL
   LEAVENS G, 1995, SEMANTICS PROGRAM LA
   Lee E., 2003, STRUCTURE INTERPRETA
   Lee EA, 1998, COMPUTER, V31, P77, DOI 10.1109/2.641980
   Loeckx J., 1984, FDN PROGRAM VERIFICA
   McCluskey E.J., 1965, INTRO THEORY SWITCHI
   MEYER B, 1991, INTRO THEORY PROGRAM
   Morgan Carroll, 1994, Programming from specifications
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   PLOTKIN GD, 1980, LNCS, V86, P527
   RAVAGLIA R, 1999, COMPUTER HUMAN INTER
   Rustan K, 1999, THEOR COMPUT SCI, V216, P375, DOI 10.1016/S0304-3975(98)00165-0
   TAYLOR P, 2000, PRACTICAL FDN MATH
   WIGNER EP, 1960, COMMUN PUR APPL MATH, V13, P1, DOI 10.1002/cpa.3160130102
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 46
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2006
VL 28
IS 4
BP 747
EP 793
DI 10.1145/1146809.1146814
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074LZ
UT WOS:000239815200005
OA Bronze
DA 2024-07-18
ER

PT J
AU Hietala, K
   Rand, R
   Li, LY
   Hung, SH
   Wu, XD
   Hicks, M
AF Hietala, Kesha
   Rand, Robert
   Li, Liyi
   Hung, Shih-Han
   Wu, Xiaodi
   Hicks, Michael
TI A Verified Optimizer for Quantum Circuits
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Formal verification; quantum computing; circuit optimization; certified
   compilation
AB We present voqc, the first verified optimizer for quantum circuits, written using the Coq proof assistant. Quantum circuits are expressed as programs in a simple, low-level language called sqir, a small quantum intermediate representation, which is deeply embedded in Coq. Optimizations and other transformations are expressed as Coq functions, which are proved correct with respect to a semantics of sqir programs. sqir programs denote complex-valued matrices, as is standard in quantum computation, but we treat matrices symbolically to reason about programs that use an arbitrary number of quantum bits. sqir's careful design and our provided automation make it possible to write and verify a broad range of optimizations in voqc, including full-circuit transformations from cutting-edge optimizers.
C1 [Hietala, Kesha; Li, Liyi; Wu, Xiaodi; Hicks, Michael] Univ Maryland, Baltimore, MD USA.
   [Hietala, Kesha; Hicks, Michael] Univ Amazon, Seattle, WA USA.
   [Rand, Robert] Univ Chicago, Chicago, IL USA.
   [Hung, Shih-Han] Univ Texas Austin, Austin, TX USA.
C3 University System of Maryland; University of Maryland Baltimore;
   University of Chicago; University of Texas System; University of Texas
   Austin
RP Hietala, K (corresponding author), Univ Maryland, Baltimore, MD USA.
EM khieta@amazon.com; rand@uchicago.edu; liyili2@umd.edu;
   shung@cs.utexas.edu; xwu@cs.umd.edu; mwh@cs.umd.edu
RI Rand, Robert/AAI-8340-2020
OI Rand, Robert/0000-0001-6842-5505; Hicks, Michael/0000-0002-2759-9223;
   Hietala, Kesha/0000-0002-2724-0974; Wu, Xiaodi/0000-0001-8877-9802; Li,
   Liyi/0000-0001-8184-0244
FU U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research, Quantum Testbed Pathfinder Program
   [DE-SC0019040]; Air Force Office of Scientific Research [FA95502110051]
FX This work was supported by the U.S. Department of Energy, Office of
   Science, Office of Advanced Scientific Computing Research, Quantum
   Testbed Pathfinder Program under award number DE-SC0019040, and the Air
   Force Office of Scientific Research under award number FA95502110051.
   Any opinions, findings, conclusions, or recommendations expressed in
   this material are those of the author(s) and do not necessarily reflect
   the views of these agencies.
CR Aleksandrowicz Gadi, 2019, Zenodo, DOI 10.5281/ZENODO.2562111
   Amy M, 2020, QUANTUM SCI TECHNOL, V5, DOI 10.1088/2058-9565/ab9359
   Amy M, 2017, LECT NOTES COMPUT SC, V10427, P3, DOI 10.1007/978-3-319-63390-9_1
   Amy M, 2014, IEEE T COMPUT AID D, V33, P1476, DOI 10.1109/TCAD.2014.2341953
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Burgholzer L, 2021, IEEE T COMPUT AID D, V40, P1810, DOI 10.1109/TCAD.2020.3032630
   Burgholzer L, 2020, IEEE INTERNATIONAL CONFERENCE ON QUANTUM COMPUTING AND ENGINEERING (QCE20), P356, DOI 10.1109/QCE49297.2020.00051
   Cambridge Quantum Computing Ltd, 2019, pytket
   Chair for Design Automation at the Technical University of Munich, 2022, MQT QMAP-A Tool for Quantum Circuit Mapping Written in C++
   Cirq Developers, 2021, Zenodo
   Eberly David., 1999, Euler Angle Formulas
   Fagan Andrew, 2018, P 15 INT C QUANT PHY
   Filliatre Jean-Christophe, 2021, Program Extraction
   GREENBERGER DM, 1989, FUND THEOR, V37, P69
   Heyfron LE, 2019, QUANTUM SCI TECHNOL, V4, DOI 10.1088/2058-9565/aad604
   Hietala K., 2021, Leibniz Interna- tional Proceedings in Informatics (LIPIcs, V193, DOI [10.4230/LIPIcs.ITP.2021.21, DOI 10.4230/LIPICS.ITP.2021.21]
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Hung SH, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290344
   IBM, 2022, IBM Quantum Processor Types
   INRIA, 2022, Library Coq.Reals.Reals
   INRIA, 2021, Interfacing C with OCaml
   Ittah D, 2022, ACM T QUANTUM COMPUT, V3, DOI 10.1145/3491247
   JavadiAbhari A, 2015, PARALLEL COMPUT, V45, P2, DOI 10.1016/j.parco.2014.12.001
   Kissinger A, 2020, Arxiv, DOI arXiv:1903.10477
   Kissinger Aleks, 2019, P 16 INT C QUANT PHY
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Li GS, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P554, DOI 10.1145/3503222.3507715
   Li GS, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P1001, DOI 10.1145/3297858.3304023
   Li LY, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563309
   Matthew Amy, 2018, arXiv, DOI [10.4204/eptcs.287.1, DOI 10.4204/EPTCS.287.1]
   Miller DM, 2006, INT SYM MVL, P177
   Nam Y, 2018, NPJ QUANTUM INFORM, V4, DOI 10.1038/s41534-018-0072-4
   Peng YX, 2023, P NATL ACAD SCI USA, V120, DOI 10.1073/pnas.2218775120
   Preskill J, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-08-06-79
   Python Software Foundation, 2021, ctypes-A Foreign Function Library for Python
   Qiskit Development Team, 2021, Transpiler Passes
   Rand R, 2018, ELECTRON P THEOR COM, P119, DOI 10.4204/EPTCS.266.8
   Rigetti Computing, 2019, Welcome to the Docs for pyQuil!
   Rigetti Computing, 2019, The @rigetti optimizing Quil compiler
   Smith RS, 2017, Arxiv, DOI arXiv:1608.03355
   Saeedi M, 2011, QUANTUM INF PROCESS, V10, P355, DOI 10.1007/s11128-010-0201-2
   Sivarajah S, 2021, QUANTUM SCI TECHNOL, V6, DOI 10.1088/2058-9565/ab8e92
   Smith KN, 2019, PROCEEDINGS OF THE 2019 46TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA '19), P579, DOI 10.1145/3307650.3322262
   Steiger DS, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-01-31-49
   Tannu SS, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P987, DOI 10.1145/3297858.3304007
   Tao RZ, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P641, DOI 10.1145/3519939.3523431
   The Coq Development Team, 2019, Zenodo, DOI 10.5281/ZENODO.3476303
   The INQWIRE Developers, 2022, INQWIRE QuantumLib
   Unsal, 2019, 14 C THEORY QUANTUM, V135, DOI [DOI 10.4230/LIPICS.TQC.2019.3, 10.4230/LIPIcs]
   Vatan F, 2004, PHYS REV A, V69, DOI 10.1103/PhysRevA.69.032315
   Cross AW, 2017, Arxiv, DOI arXiv:1707.03429
   Wille R, 2019, PROCEEDINGS OF THE 2019 56TH ACM/EDAC/IEEE DESIGN AUTOMATION CONFERENCE (DAC), DOI 10.1145/3316781.3317859
   Wille R, 2008, INT SYM MVL, P220, DOI 10.1109/ISMVL.2008.43
   Xu MK, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P625, DOI 10.1145/3519939.3523433
   Zulehner A, 2018, Arxiv, DOI arXiv:1712.04722
NR 55
TC 1
Z9 1
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2023
VL 45
IS 3
AR 18
DI 10.1145/3604630
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA T8ME2
UT WOS:001080461200003
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Richter, D
   Kretzler, D
   Weisenburger, P
   Salvaneschi, G
   Faust, S
   Mezini, M
AF Richter, David
   Kretzler, David
   Weisenburger, Pascal
   Salvaneschi, Guido
   Faust, Sebastian
   Mezini, Mira
TI Prisma: A Tierless Language for Enforcing Contract-client Protocols in
   Decentralized Applications
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Domain-specific languages; smart contracts; Scala
AB Decentralized applications (dApps) consist of smart contracts that run on blockchains and clients that model collaborating parties. dApps are used tomodel financial and legal business functionality. Today, contracts and clients are written as separate programs-in different programming languages-communicating via send and receive operations. This makes distributed program flow awkward to express and reason about, increasing the potential for mismatches in the client-contract interface, which can be exploited by malicious clients, potentially leading to huge financial losses.
   In this article, we present Prisma, a language for tierless decentralized applications, where the contract and its clients are defined in one unit and pairs of send and receive actions that "belong together" are encapsulated into a single direct-style operation, which is executed differently by sending and receiving parties. This enables expressing distributed program flow via standard control flow and renders mismatching communication impossible. We prove formally that our compiler preserves program behavior in presence of an attacker controlling the client code. We systematically compare Prisma with mainstream and advanced programming models for dApps and provide empirical evidence for its expressiveness and performance.
C1 [Richter, David; Mezini, Mira] Tech Univ Darmstadt, Hochschulstr 10, D-64289 Darmstadt, Germany.
   [Kretzler, David; Faust, Sebastian] Tech Univ Darmstadt, Pankratiusstr 2, D-64289 Darmstadt, Germany.
   [Weisenburger, Pascal; Salvaneschi, Guido] Univ St Gallen, Torstr 25, CH-9000 St Gallen, Switzerland.
C3 Technical University of Darmstadt; Technical University of Darmstadt;
   University of St Gallen
RP Richter, D (corresponding author), Tech Univ Darmstadt, Hochschulstr 10, D-64289 Darmstadt, Germany.
EM david.richter@tu-darmstadt.de; david.kretzler@tu-darmstadt.de;
   pascal.weisenburger@unisg.ch; guido.salvaneschi@unisg.ch;
   sebastian.faust@tu-darmstadt.de; mezini@informatik.tu-darmstadt.de
OI Mezini, Mira/0000-0001-6563-7537
FU German Federal Ministry of Education and Research iBlockchain project
   (BMBF) [16KIS0902]; German Research Foundation (DFG) [SFB 1119]; BMBF;
   National Research Center for Applied Cybersecurity ATHENE; Hessian LOEWE
   initiative; Swiss National Science Foundation [200429]; University of
   St. Gallen (IPF) [1031569]
FX This work has been funded by the German Federal Ministry of Education
   and Research iBlockchain project (BMBF No. 16KIS0902), by the German
   Research Foundation (DFG, SFB 1119 -CROSSING Project), by the BMBF and
   the Hessian Ministry of Higher Education, Research, Science and the Arts
   within their joint support of the National Research Center for Applied
   Cybersecurity ATHENE, by the Hessian LOEWE initiative (emergenCITY), by
   the Swiss National Science Foundation (SNSF, No. 200429), and by the
   University of St. Gallen (IPF, No. 1031569).
CR Abadi M, 2009, ACM T INFORM SYST SE, V13, DOI 10.1145/1609956.1609960
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Andrychowicz M, 2014, P IEEE S SECUR PRIV, P443, DOI 10.1109/SP.2014.35
   [Anonymous], 1992, Compiling with Continuations
   Bartoletti Massimo, 2017, Financial Cryptography and Data Security. FC 2017 International Workshops WAHC, BITCOIN, VOTING, WTSC, and TA. Revised Selected Papers: LNCS 10323, P494, DOI 10.1007/978-3-319-70278-0_31
   Bierman G, 2012, LECT NOTES COMPUT SC, V7313, P233, DOI 10.1007/978-3-642-31057-7_12
   Blackshear Sam, 2019, Move: A Language With Programmable Resources
   Brady Edwin., 2007, The Idris Tutorial. Interfaces. Monads and do-notation.!-notation
   Brasil Flavio W, 2017, Monadless-Syntactic Sugar for Monad Composition in Scala
   Breidenbach Lorenz, 2016, An In-depth Look at the Parity Multisig Bug
   Brunjes Lars, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Applications. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12478), P73, DOI 10.1007/978-3-030-61467-6_6
   Chakravarty Manuel, 2019, Functional Blockchain Contracts
   Chakravarty Manuel M. T., 2020, IACR_Cryptol._ePrint_Arch, V2020, P299
   Choi K, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000029
   Chong Stephen, 2007, S OP SYST PRINC
   Coblenz M, 2019, Arxiv, DOI arXiv:1909.03523
   Coblenz M, 2020, Arxiv, DOI arXiv:1912.04719
   Coblenz M, 2017, PROC IEEE ACM INT C, P97, DOI 10.1109/ICSE-C.2017.150
   Cong YY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341643
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Daian P., 2016, Analysis of the DAO exploit
   Dapp.com, 2020, 2020 Q2 Dapp Market Report
   Das A, 2019, Arxiv, DOI arXiv:1902.06056
   Das Ankush, 2021, Nomos: A protocol-enforcing, asset-tracking, and gas-aware language for smart contracts
   Dezani-Ciancaglini M, 2010, LECT NOTES COMPUT SC, V6194, P1, DOI 10.1007/978-3-642-14458-5_1
   di Angelo M, 2021, Arxiv, DOI arXiv:2001.06909
   di Angelo M, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON DECENTRALIZED APPLICATIONS AND INFRASTRUCTURES (DAPPCON), P69, DOI 10.1109/DAPPCON.2019.00018
   Durieux T, 2020, PROC INT CONF SOFTW, P530, DOI 10.1145/3377811.3380364
   Dziembowski S, 2019, LECT NOTES COMPUT SC, V11476, P625, DOI 10.1007/978-3-030-17653-2_21
   Dziembowski S, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P949, DOI 10.1145/3243734.3243856
   Edwards Jonathan, 2009, P 24 ACM SIGPLAN C C, P925, DOI DOI 10.1145/1639950.1640058
   Ethereum Foundation, 2015, Solidity Documentation-Common Patterns
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Ferreira JF, 2020, Arxiv, DOI arXiv:2007.04771
   Finley Klint, 2016, WIRED
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Gabbay Murdoch James, 2020, arXiv
   Giallorenzo S, 2023, Arxiv, DOI [arXiv:2005.09520, 10.48550/ARXIV.2005.09520]
   Giallorenzo Saverio, 2021, LEIBNIZ INT P INFORM, V194, DOI [10.4230/LIPIcs.ECOOP.2021.22, DOI 10.4230/LIPICS.ECOOP.2021.22]
   Google Inc, 2021, Google Cloud BigQuery: Contract deployment per month
   Harz D, 2018, CORR ABS180909805
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Hu B, 2021, Arxiv, DOI arXiv:2008.13413
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Luo ZQ, 2012, P IEEE CSFW, P157, DOI 10.1109/CSF.2012.22
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Marlow Simon, 2010, Haskell 2010 language report
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   Mavridou A, 2019, LECT NOTES COMPUT SC, V11598, P446, DOI 10.1007/978-3-030-32101-7_27
   Mavridou A, 2018, LECT NOTES COMPUT SC, V10957, P523, DOI 10.1007/978-3-662-58387-6_28
   Miller A, 2019, LECT NOTES COMPUT SC, V11598, P508, DOI 10.1007/978-3-030-32101-7_30
   Mix, 2019, These Are the Top 10 Programming Languages in Blockchain
   Montesi Fabrizio, 2014, Web Services Foundations, P81, DOI [DOI 10.1007/978-1-4614-7518-7_4, 10.1007/978-1-4614-7518-7_4, 10.1007/978-1-4614-7518-7\_4]
   Nikolic I, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P653, DOI 10.1145/3274694.3274743
   Oei R, 2020, Arxiv, DOI arXiv:2010.04800
   Oliva GA, 2020, EMPIR SOFTW ENG, V25, P1864, DOI 10.1007/s10664-019-09796-5
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Petricek Tomas, 2014, Practical Aspects of Declarative Languages. 16th International Symposium, PADL 2014. Proceedings: LNCS 8324, P33, DOI 10.1007/978-3-319-04132-2_3
   Petrov Sergey, 2017, Another Parity Wallet hack explained
   Pitts AM, 2002, LECT NOTES COMPUT SC, V2395, P378
   PolyCrypt GmbH, 2020, Perun Network
   Prokopec Aleksandar., 2015, Scala coroutines
   Purdy Jon., 2017, Discussion on GHC Pre-Proposal: Add InlineBindings proposal
   Queinnec C, 2000, ACM SIGPLAN NOTICES, V35, P23, DOI 10.1145/357766.351243
   Radanne G, 2016, LECT NOTES COMPUT SC, V10017, P377, DOI 10.1007/978-3-319-47958-3_20
   Reynolds John C, 1972, ACM ANN C ACM 72
   Richter David, 2022, Leibniz International Proceedings in Informatics (LIPIcs, V222, DOI [10.4230/LIPIcs.ECOOP.2022.35, DOI 10.4230/LIPICS.ECOOP.2022.35]
   Richter David, 2022, Dagstuhl Artifacts Ser., V8, p16: 1, DOI [10.4230/DARTS.8.2.16, DOI 10.4230/DARTS.8.2.16]
   Saulpaugh Evan., 2018, Headlong (GitHub Repository)
   Scala Development Team, 2013, Scala-continuations. The scala delimited continuations plugin and library
   Scala Development Team, 2012, Scala-async. A Scala DSL to enable a direct style of coding when composing futures
   Schrans F., 2018, P C COMP 2 INT C ART, P218
   Schrans F, 2019, Arxiv, DOI arXiv:1904.06534
   Seijas Pablo Lamela, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P356, DOI 10.1007/978-3-030-03427-6_27
   Seijas PL, 2020, LECT NOTES COMPUT SC, V12063, P496, DOI 10.1007/978-3-030-54455-3_35
   Sergey I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360611
   Serrano M, 2016, ACM SIGPLAN NOTICES, V51, P180, DOI 10.1145/3022670.2951916
   Serrano Manuel, 2006, 21 ACM SIGPLAN C OBJ
   Shevchenko Ruslan., 2020, dotty-cps-async
   State Channels contributors, 2020, State Channels
   Suvorov D, 2019, Arxiv, DOI arXiv:1906.02906
   Uniswap Labs, 2021, Uniswap Info
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Web3 Labs, 2016, Web3j: Web3 Java Ethereum Dapp API (GitHub Repository)
   Weisenburger P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276499
   White Leo., 2018, OCaml: Add "monadic"let operators
   Wöhrer M, 2020, IEEE SOFTWARE, V37, P37, DOI 10.1109/MS.2020.2993470
   Wood G., 2014, Ethereum project yellow paper, V151, P1
   Wood Gavin, 2022, Ethereum Yellow Paper: a formal specification of Ethereum, a programmable blockchain
   Yang Bo., 2016, Dsl.scala-A Framework to Create Embedded Domain-specific Languages in Scala
NR 92
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2023
VL 45
IS 3
AR 17
DI 10.1145/3604629
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA T8ME2
UT WOS:001080461200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Soares, L
   Canesche, M
   Pereira, FMQ
AF Soares, Luigi
   Canesche, Michael
   Quintao Pereira, Fernando Magno
TI Side-channel Elimination via Partial Control-flow Linearization
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Side channel; cryptography; compiler
AB Partial control-flow linearization is a code transformation conceived to maximize work performed in vectorized programs. In this article, we find a new service for it. We show that partial control-flow linearization protects programs against timing attacks. This transformation is sound: Given an instance of its public inputs, the partially linearized program always runs the same sequence of instructions, regardless of secret inputs. Incidentally, if the original program is publicly safe, then accesses to the data cache will be data oblivious in the transformed code. The transformation is optimal: Every branch that depends on some secret data is linearized; no branch that depends on only public data is linearized. Therefore, the transformation preserves loops that depend exclusively on public information. If every branch that leaves a loop depends on secret data, then the transformed program will not terminate. Our transformation extends previous work in non-trivial ways. It handles C constructs such as "goto," "break," "switch," and "continue," which are absent in the FaCT domain-specific language (2018). Like Constantine (2021), our transformation ensures operation invariance but without requiring profiling information. Additionally, in contrast to SC-Eliminator (2018) and Lif (2021), it handles programs containing loops whose trip count is not known at compilation time.
C1 [Soares, Luigi; Canesche, Michael; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Comp Sci, Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Minas Gerais
RP Soares, L (corresponding author), Univ Fed Minas Gerais, Comp Sci, Belo Horizonte, MG, Brazil.
EM luigi.domenico@dcc.ufmg.br; michaelcanesche@dcc.ufmg.br;
   fernando@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023; Canesche, Michael/ITU-8513-2023;
   Soares, Luigi/KFB-2850-2024
OI Canesche, Michael/0000-0001-7882-0787; Cecchini Soares, Luigi
   Domenico/0000-0002-9579-8427; Quintao Pereira, Fernando
   Magno/0000-0002-0375-1657
FU Brazilian Ministry of Education under Coordenacao de Aperfeicoamento de
   Pessoal de Nivel Superior (CAPES); CNPq [406377/2018-9]; FAPEMIG
   [PPM-00333-18]; CAPES
FX Luigi Soares and Michael Canesche are supported by scholarships from the
   Brazilian Ministry of Education under Coordenacao de Aperfeicoamento de
   Pessoal de Nivel Superior (CAPES). Fernando Pereira has been supported
   by CNPq (Grant 406377/2018-9), FAPEMIG (Grant PPM-00333-18), and CAPES
   (Edital CAPES PrInt).
CR Agat J., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P40, DOI 10.1145/325694.325702
   Alan Clements, 2013, COMPUTER ORG ARCHITE
   Allen J.R., 1983, Proc. of the Symposium on Principles of Programming Languages. POPL, P177
   Almeida JB, 2020, P IEEE S SECUR PRIV, P965, DOI 10.1109/SP40000.2020.00028
   Almeida JB, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P53
   [Anonymous], 1908, BIOMETRIKA, V6, P1
   Appel AndrewW., 1997, MODERN COMPILER IMPL
   Balliu M, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1080, DOI 10.1145/2660267.2660322
   Barthe G, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P462, DOI 10.1145/3460120.3484761
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Borrello P, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P715, DOI 10.1145/3460120.3484583
   Cauligi S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P174, DOI 10.1145/3314221.3314605
   Chattopadhyay S, 2018, IEEE T COMPUT AID D, V37, P2812, DOI 10.1109/TCAD.2018.2858402
   Chen YS, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P902, DOI 10.1145/3445814.3446692
   Cock D, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P570, DOI 10.1145/2660267.2660294
   Coutinho B., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P320, DOI 10.1109/PACT.2011.63
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Dhem JF, 2000, LECT NOTES COMPUT SC, V1820, P167
   Fell A, 2019, 24TH ASIA AND SOUTH PACIFIC DESIGN AUTOMATION CONFERENCE (ASP-DAC 2019), P58, DOI 10.1145/3287624.3287694
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Ferrante Jeanne, 1985, P 12 ACM SIGACT SIGP, P179, DOI [10.1145/318593.318636, DOI 10.1145/318593.318636]
   FLYNN MJ, 1972, IEEE T COMPUT, VC 21, P948, DOI 10.1109/TC.1972.5009071
   Garland M, 2010, COMMUN ACM, V53, P58, DOI 10.1145/1839676.1839694
   Gruss D, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P217
   Guarnieri Marco, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1868, DOI 10.1109/SP40001.2021.00036
   Karrenberg R, 2012, LECT NOTES COMPUT SC, V7210, P1, DOI 10.1007/978-3-642-28652-0_1
   Kocher P., 1999, Advances in Cryptology - CRYPTO'99. 19th Annual International Cryptology Conference. Proceedings, P388
   Kocher P. C., 1996, Advances in Cryptology - CRYPTO'96. 16th Annual International Cryptology Conference. Proceedings, P104
   Langley Adam, 2010, CTGRINDAATCHECKING F
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Moll S, 2018, ACM SIGPLAN NOTICES, V53, P560, DOI 10.1145/3192366.3192413
   Moreira REA, 2017, ACM SIGPLAN NOTICES, V52, P313, DOI [10.1145/3018743.3018751, 10.1145/3155284.3018751]
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Rafnsson W, 2017, LECT NOTES COMPUT SC, V10204, P3, DOI 10.1007/978-3-662-54455-6_1
   Reparaz O, 2017, DES AUT TEST EUROPE, P1697, DOI 10.23919/DATE.2017.7927267
   Rimsa A, 2021, SOFTWARE PRACT EXPER, V51, P353, DOI 10.1002/spe.2907
   Rodrigues B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P110, DOI 10.1145/2892208.2892230
   Sampaio D, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2523815
   Singel Ryan, 1976, CRYPTOL SPECTR, V2, P26
   Soares L, 2021, INT SYM CODE GENER, P200, DOI 10.1109/CGO51591.2021.9370305
   Campos VHS, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P163, DOI 10.1145/2892208.2892225
   Tizpaz-Niari S, 2019, LECT NOTES COMPUT SC, V11561, P140, DOI 10.1007/978-3-030-25540-4_8
   Towle Ross Albert, 1976, THESIS U ILLINOIS UR
   Ngo VC, 2017, P IEEE S SECUR PRIV, P710, DOI 10.1109/SP.2017.53
   Van Cleemput J, 2020, IEEE T DEPEND SECURE, V17, P35, DOI 10.1109/TDSC.2017.2729549
   Van Cleemput J, 2012, ACM T ARCHIT CODE OP, V8, DOI 10.1145/2086696.2086702
   Wolfe Michael Joseph, 1978, THESIS U ILLINOIS UR
   Wray J. C., 1991, Proceedings. 1991 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.91CH2986-8), P2, DOI 10.1109/RISP.1991.130767
   Wu M, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P15, DOI 10.1145/3213846.3213851
   Zdancewic S, 2001, P IEEE CSFW, P15, DOI 10.1109/CSFW.2001.930133
   Zhang R, 2022, CC'22: PROCEEDINGS OF THE 31ST ACM SIGPLAN INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P181, DOI 10.1145/3497776.3517778
NR 51
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2023
VL 45
IS 2
AR 13
DI 10.1145/3594736
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M2WV9
UT WOS:001028843500007
OA Bronze
DA 2024-07-18
ER

PT J
AU Takisaka, T
   Oyabu, Y
   Urabe, N
   Hasuo, I
AF Takisaka, Toru
   Oyabu, Yuichiro
   Urabe, Natsuki
   Hasuo, Ichiro
TI Ranking and Repulsing Supermartingales for Reachability in Randomized
   Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Randomized program; reachability; fixed point; martingale
ID TERMINATION; VERIFICATION
AB Computing reachability probabilities is a fundamental problem in the analysis of randomized programs. This article aims at a comprehensive and comparative account of various martingale-based methods for over- and under-approximating reachability probabilities. Based on the existingworks that stretch across different communities (formal verification, control theory, etc.), we offer a unifying account. In particular, we emphasize the role of order-theoretic fixed points-a classic topic in computer science-in the analysis of randomized programs. This leads us to two new martingale-based techniques, too. We also make an experimental comparison using our implementation of template-based synthesis algorithms for those martingales.
C1 [Takisaka, Toru; Oyabu, Yuichiro; Urabe, Natsuki; Hasuo, Ichiro] Natl Inst Informat, Chiyoda Ku, 2-1-2 Hitotsubashi, Tokyo 1018430, Japan.
   [Oyabu, Yuichiro; Hasuo, Ichiro] Grad Univ Adv Studies SOKENDAI, Hayama, Kanagawa 2400193, Japan.
   [Urabe, Natsuki] Univ Tokyo, Bunkyo Ku, Room 615,Fac Sci Bldg 7,7-3-1 Hongo, Tokyo 1130033, Japan.
   [Urabe, Natsuki] Max Planck Inst Software Syst, Paul Ehrlich Str G 26, D-67663 Kaiserslautern, Germany.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; Graduate University for Advanced
   Studies - Japan; University of Tokyo; Max Planck Society
RP Takisaka, T (corresponding author), Natl Inst Informat, Chiyoda Ku, 2-1-2 Hitotsubashi, Tokyo 1018430, Japan.
EM takisaka@nii.ac.jp; oyabu82@gmail.com; hasuo@nii.ac.jp
OI Hasuo, Ichiro/0000-0002-8300-4650; Takisaka, Toru/0000-0002-5046-7480
CR Abate A, 2010, EUR J CONTROL, V16, P624, DOI 10.3166/EJC.16.624-641
   Agrawal S., 2018, PACMPL, V2, P34, DOI DOI 10.1145/3385412.3386002
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   [Anonymous], 2004, Monographs in Computer Science
   [Anonymous], 1951, DECISION METHOD ELEM
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   Arnold Andre, 2001, Rudiments of -calculus
   Avanzini M, 2018, LECT NOTES COMPUT SC, V10818, P132, DOI 10.1007/978-3-319-90686-7_9
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bertsekas Dimitri P., 2007, Stochastic Optimal Control: The Discrete-Time Case
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chakarov A, 2016, LECT NOTES COMPUT SC, V9636, P260, DOI 10.1007/978-3-662-49674-9_15
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Chatterjee Krishnendu, 2017, ABS170102944 CORR
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Hasuo I, 2016, ACM SIGPLAN NOTICES, V51, P718, DOI 10.1145/2914770.2837673
   Johnson, 2012, MATRIX ANAL
   Jurdzinski M, 2000, LECT NOTES COMPUT SC, V1770, P290
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kura S, 2019, LECT NOTES COMPUT SC, V11428, P135, DOI 10.1007/978-3-030-17465-1_8
   Majumdar Rupak, 2016, P ACM SIGPLAN S PRIN
   Makhorin A., 2008, GLPK GNU LINEAR PROG
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle, 2004, Lecture Notes in Computer Science, V3167, P123, DOI [10.1007/11889229_4, DOI 10.1007/11889229_4]
   Mosteller Frederick, 2012, 50 CHALLENGING PROBL
   Nemirovski Arkadi, 2008, ENCY OPTIMIZATION, V2nd, P235, DOI [10.1007/978-0-387-74759-0_405, DOI 10.1007/978-0-387-74759-0_405]
   Ngo Van Chan, 2018, P 39 ACM SIGPLAN C P, P496, DOI [10.1145/3192366.3192394, DOI 10.1145/3192366.3192394]
   Papachristodoulou Antonis, 2013, ABS13104716 CORR
   Prajna S, 2004, IEEE DECIS CONTR P, P929, DOI 10.1109/CDC.2004.1428804
   SCHMUDGEN K, 1991, MATH ANN, V289, P203, DOI 10.1007/BF01446568
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Steinhardt J, 2012, INT J ROBOT RES, V31, P901, DOI 10.1177/0278364912444146
   Takisaka T, 2018, LECT NOTES COMPUT SC, V11138, P476, DOI 10.1007/978-3-030-01090-4_28
   Toh KC, 1999, OPTIM METHOD SOFTW, V11-2, P545, DOI 10.1080/10556789908805762
   Urabe Natsuki, 2017, P LICS 2017, P1
   Vardi MY, 1995, LECT NOTES COMPUTER, P238, DOI DOI 10.1007/3-540-60915-6
NR 42
TC 6
Z9 6
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2021
VL 43
IS 2
AR 5
DI 10.1145/345096
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TP4PI
UT WOS:000677577200001
DA 2024-07-18
ER

PT J
AU Toninho, B
   Yoshida, N
AF Toninho, Bernardo
   Yoshida, Nobuko
TI On Polymorphic Sessions and Functions: A Tale of Two (Fully Abstract)
   Encodings
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Session types; pi-calculus; system F; linear logic; full abstraction
ID LINEAR LOGICAL RELATIONS; EXPRESSIVENESS; PARAMETRICITY; PROPOSITIONS;
   POLARITIES; CALCULUS; LIBRARY; OCAML
AB This work exploits the logical foundation of session types to determine what kind of type discipline for the pi-calculus can exactly capture, and is captured by, lambda-calculus behaviours. Leveraging the proof theoretic content of the soundness and completeness of sequent calculus and natural deduction presentations of linear logic, we develop the first mutually inverse and fully abstract processes-as-functions and functions-as-processes encodings between a polymorphic session pi-calculus and a linear formulation of System F. We are then able to derive results of the session calculus from the theory of the lambda-calculus: (1) we obtain a characterisation of inductive and coinductive session types via their algebraic representations in System F; and (2) we extend our results to account for value and process passing, entailing strong normalisation.
C1 [Toninho, Bernardo] NOVA LINCS, Costa da Caparica, Portugal.
   [Toninho, Bernardo] NOVA Sch Sci & Technol, Caparica, Portugal.
   [Yoshida, Nobuko] Imperial Coll London, Dept Comp, 180 Queens Gate, London SW7 2AZ, England.
   [Toninho, Bernardo] Univ Nova Lisboa, Fac Ciencias & Tecnol, Dept Informat, P-2829516 Quinta Da Torre, Caparica, Portugal.
C3 Imperial College London; Universidade Nova de Lisboa
RP Toninho, B (corresponding author), NOVA LINCS, Costa da Caparica, Portugal.; Toninho, B (corresponding author), NOVA Sch Sci & Technol, Caparica, Portugal.; Toninho, B (corresponding author), Univ Nova Lisboa, Fac Ciencias & Tecnol, Dept Informat, P-2829516 Quinta Da Torre, Caparica, Portugal.
EM btoninho@fct.unl.pt; nobuko.yoshida@imperial.ac.uk
RI Toninho, Bernardo/IUB-1256-2023; Yoshida, Nobuko/AAL-6082-2020
OI Toninho, Bernardo/0000-0002-0746-7514; Yoshida,
   Nobuko/0000-0002-3925-8557
FU NOVA LINCS [UID/CEC/04516/2019, UIDB/04516/2020]; EPSRC [EP/N028201/1,
   EP/K034413/1, EP/K011715/1, EP/L00058X/1, EP/N027833/1, EP/T006544/1,
   EP/T014709/1, EP/V000462/1]; EPSRC [EP/T006544/1, EP/K011715/1,
   EP/T014709/1, EP/N027833/1] Funding Source: UKRI
FX Thework is supported by NOVA LINCS (UID/CEC/04516/2019 and
   UIDB/04516/2020), EPSRC EP/N028201/1, EP/K034413/1, EP/K011715/1,
   EP/L00058X/1, EP/N027833/1, EP/T006544/1, EP/T014709/1 and EP/V000462/1,
   and EPSRC/NCSC/GCHQ VeTSS.
CR Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   [Anonymous], 2017, Acta Informatica, DOI DOI 10.1007/S00236-016-0285-Y
   BAINBRIDGE ES, 1990, THEOR COMPUT SCI, V70, P35, DOI 10.1016/0304-3975(90)90151-7
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Balzer Stephanie, 2018, CONCUR, DOI DOI 10.4230/LIPICS.CONCUR.2018.30
   Barber Andrew., 1996, ECSLFCS96347 U ED SC
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Berger M, 2005, ACTA INFORM, V42, P83, DOI 10.1007/s00236-005-0175-1
   Berger M, 2001, LECT NOTES COMPUT SC, V2044, P29
   Bird Richard, 1997, Algebra of Programming
   Birkedal L, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:2)2006
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2013, LECT NOTES COMPUT SC, V7792, P330, DOI 10.1007/978-3-642-37036-6_19
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone Marco, 2016, LIPIcs, V59
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Demangeon R, 2010, J LOGIC ALGEBR PROGR, V79, P550, DOI 10.1016/j.jlap.2010.07.007
   Demangeon R, 2009, LECT NOTES COMPUT SC, V5700, P250
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Fowler Simon, 2020, LIPIcs, V166, DOI [10.4230/LIPIcs.ECOOP.2020.14, DOI 10.4230/LIPICS.ECOOP.2020.14]
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gorla D, 2016, MATH STRUCT COMP SCI, V26, P639, DOI 10.1017/S0960129514000279
   Gorla D, 2010, INFORM COMPUT, V208, P1031, DOI 10.1016/j.ic.2010.05.002
   Hasegawa R., 1994, Mathematical Structures in Computer Science, V4, P71, DOI 10.1017/S0960129500000372
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2012, LECT NOTES COMPUT SC, V7392, P23, DOI 10.1007/978-3-642-31585-5_4
   Imai K, 2019, SCI COMPUT PROGRAM, V172, P135, DOI 10.1016/j.scico.2018.08.005
   Imai K, 2017, LECT NOTES COMPUT SC, V10319, P99, DOI 10.1007/978-3-319-59746-1_6
   Kouzapas D, 2016, LECT NOTES COMPUT SC, V9632, P446, DOI 10.1007/978-3-662-49498-1_18
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   Maraist J, 1999, THEOR COMPUT SCI, V228, P175, DOI 10.1016/S0304-3975(98)00358-2
   Mendler N. P., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P30
   Miler Robin., 2001, SPEECH RECEIVING HON
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Nestmann U, 2000, INFORM COMPUT, V163, P1, DOI 10.1006/inco.2000.2868
   Neykova R, 2020, ELECTRON P THEOR COM, P12
   Ohta Y, 2006, LECT NOTES COMPUT SC, V4098, P166
   Orchard D, 2017, RIV PUBL SER AUTOMAT, P219
   Orchard D, 2016, ACM SIGPLAN NOTICES, V51, P568, DOI 10.1145/2914770.2837634
   Padovani L, 2017, LECT NOTES COMPUT SC, V10201, P804, DOI 10.1007/978-3-662-54434-1_30
   Parrow J, 2008, ELECTRON NOTES THEOR, V209, P173, DOI 10.1016/j.entcs.2008.04.011
   Pérez JA, 2014, INFORM COMPUT, V239, P254, DOI 10.1016/j.ic.2014.08.001
   Pérez JA, 2012, LECT NOTES COMPUT SC, V7211, P539, DOI 10.1007/978-3-642-28869-2_27
   Peters K, 2019, ELECTRON P THEOR COM, P19, DOI 10.4204/EPTCS.300.2
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pierce BC, 2000, J ACM, V47, P531, DOI 10.1145/337244.337261
   Pierce Benhamin C., 1990, PICT PROGRAMMING LAN
   Pierce Benjamin C., 2004, Advanced Topics in Types and Programming Languages
   Plotkin G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P361, DOI 10.1007/BFb0037118
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   REYNOLDS JC, 1993, INFORM COMPUT, V105, P1, DOI 10.1006/inco.1993.1037
   Sangiogi D., 1993, TAPSOFT '93: Theory and Practice of Software Development. 4th International Joint Conference CAAP/FASE Proceedings, P151
   Sangiorgi Davide, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P78, DOI 10.1007/978-3-662-44584-6_7
   Sangiorgi D, 2000, FOUNDAT COMPUT, P691
   Sangiorgi D, 1996, THEOR COMPUT SCI, V167, P235, DOI 10.1016/0304-3975(96)00075-8
   Sangiorgi Davide., 1993, Lecture Notes in Computer Science, P143, DOI [10.1007/3-540-58027-1_7, DOI 10.1007/3-540-58027-1]
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Scalas A., 2017, 31stEuropeanConferenceonObject-OrientedProgramming, ECOOP 2017, June 19-23, 2017, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPIcs.ECOOP.2017.24]
   Scalas Alceste, 2016, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [DOI 10.4230/LIPICS, DOI 10.4230/LIPICS.ECOOP.2016.21]
   Silva M, 2017, ELECTRON P THEOR COM, P64, DOI 10.4204/EPTCS.238.7
   Toninho Bernardo, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P827, DOI 10.1007/978-3-319-89884-1_29
   Toninho Bernardo, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P159, DOI 10.1007/978-3-662-45917-1_11
   Toninho B, 2019, LECT NOTES COMPUT SC, V11760, P101, DOI 10.1007/978-3-030-31175-9_7
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toninho B, 2012, LECT NOTES COMPUT SC, V7213, P346, DOI 10.1007/978-3-642-28729-9_23
   Turner David., 1996, ECSLFCS96345 U ED S
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Willsey M, 2017, ELECTRON P THEOR COM, P73, DOI 10.4204/EPTCS.238.8
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
   Zhao JZ, 2010, LECT NOTES COMPUT SC, V6461, P344, DOI 10.1007/978-3-642-17164-2_24
NR 79
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2021
VL 43
IS 2
AR 7
DI 10.1145/3457884
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TP4PI
UT WOS:000677577200003
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Coblenz, M
   Oei, R
   Etzel, T
   Koronkevich, P
   Baker, M
   Bloem, Y
   Myers, BA
   Sunshine, J
   Aldrich, J
AF Coblenz, Michael
   Oei, Reed
   Etzel, Tyler
   Koronkevich, Paulette
   Baker, Miles
   Bloem, Yannick
   Myers, Brad A.
   Sunshine, Joshua
   Aldrich, Jonathan
TI Obsidian: Typestate and Assets for Safer Blockchain Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Typestate; linearity; type systems; blockchain; smart contracts;
   permissions; alias control; ownership
AB Blockchain platforms are coming into use for processing critical transactions among participants who have not established mutual trust. Many blockchains are programmable, supporting smart contracts, which maintain persistent state and support transactions that transform the state. Unfortunately, bugs in many smart contracts have been exploited by hackers. Obsidian is a novel programming language with a type system that enables static detection of bugs that are common in smart contracts today. Obsidian is based on a core calculus, Silica, for which we proved type soundness. Obsidian uses typestate to detect improper state manipulation and uses linear types to detect abuse of assets. We integrated a permissions system that encodes a notion of ownership to allow for safe, flexible aliasing. We describe two case studies that evaluate Obsidian's applicability to the domains of parametric insurance and supply chain management, finding that Obsidian's type system facilitates reasoning about high-level states and ownership of resources. We compared our Obsidian implementation to a Solidity implementation, observing that the Solidity implementation requires much boilerplate checking and tracking of state, whereas Obsidian does this work statically.
C1 [Coblenz, Michael] Carnegie Mellon Univ, Comp Sci Dept, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Oei, Reed] Univ Illinois, Comp Sci Dept, 201 North Goodwin Ave MC 258, Urbana, IL 61801 USA.
   [Etzel, Tyler] Facebook, 1 Hacker Way, Menlo Pk, CA 94025 USA.
   [Koronkevich, Paulette] Univ British Columbia, Comp Sci Dept, 2329 West Mall, Vancouver, BC V6T 1Z4, Canada.
   [Baker, Miles] Amazon, 410 Terry Ave North, Seattle, WA 98109 USA.
   [Bloem, Yannick] Apple Inc, One Apple Pk Way, Cupertino, CA 95014 USA.
   [Myers, Brad A.] Carnegie Mellon Univ, Human Comp Interact Inst, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Sunshine, Joshua; Aldrich, Jonathan] Carnegie Mellon Univ, Inst Software Res, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University; University of Illinois System; University of
   Illinois Urbana-Champaign; Facebook Inc; University of British Columbia;
   Amazon.com; Apple Inc; Carnegie Mellon University; Carnegie Mellon
   University
RP Coblenz, M (corresponding author), Carnegie Mellon Univ, Comp Sci Dept, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM mcoblenz@cs.cmu.edu; reedoei2@illinois.edu; tyleretzel1@gmail.com;
   pletrec@cs.ubc.ca; milesabaker@gmail.com; yannickbloem@gmail.com;
   bam@cs.cmu.edu; joshua.sunshine@cs.cmu.edu; jonathan.aldrich@cs.cmu.edu
RI Coblenz, Michael/Y-8910-2019
OI Coblenz, Michael/0000-0002-9369-4069; Aldrich,
   Jonathan/0000-0003-0631-5591; Sunshine, Joshua/0000-0002-9672-5297
FU National Science Foundation [CNS-1423054, CCF-1814826]; U.S. Department
   of Defense; Ripple; IBM Ph.D. Fellowship
FX This material is based upon work supported by the National Science
   Foundation under Grants CNS-1423054 and CCF-1814826, by the U.S.
   Department of Defense, and by Ripple. In addition, the first author is
   supported by an IBM Ph.D. Fellowship. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the author and do not necessarily reflect the views of the National
   Science Foundation.
CR Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   Alt Leonardo, 2018, LEVERAGING APPL FORM
   [Anonymous], 2020, ACM T PROGRAMMING LA, V42
   [Anonymous], 2018, NETW DISTR SYST SEC
   [Anonymous], 1990, IFIP TC 2 Working Conference on Programming Concepts and Methods, Sea of Galilee, Israel
   Astigarraga T, 2018, LECT NOTES COMPUT SC, V11236, P111, DOI 10.1007/978-3-030-03596-9_8
   Atzei N, 2017, LECT NOTES COMPUT SC, V10204, P164, DOI 10.1007/978-3-662-54455-6_8
   Barnaby Celeste, 2017, WORKSH EV US PROGR L
   Bhargavan K, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P91, DOI 10.1145/2993600.2993611
   Bierhoff K, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P971
   Bierhoff Kevin., 2009, European Conference on Object-Oriented Programming, P195, DOI [DOI 10.1007/978-3-642-03013-0_10, 10.1007/978-3-642- 03013- 0_ 10]
   Bierhoff Kevin., 2011, Engineering of Software, P35, DOI [DOI 10.1007/978-3-642-19823-6_4, 10.1007/978-3-642-19823-6_4]
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   Boyland J., 2003, LNCS, V2694, P55, DOI [10.1007/3-540-44898-54, DOI 10.1007/3-540-44898-54]
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Clarke David, 2013, Aliasing in Object-oriented Programming: Types, Analysis and Veri~cation, V7850, DOI DOI 10.1007/978-3-642-36946-9
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Coblenz M., 2020, PROC ACM PROGRAM LAN, V4
   Coblenz M, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P48, DOI 10.1109/WETSEB.2019.00013
   Coblenz M, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P133, DOI 10.1145/3276954.3276965
   Coblenz Michael., 2020, OBSIDIAN SMART CONTR, DOI DOI 10.1184/R1/12814202.V1
   Coblenz Michael, 2019, ARXIV191204719
   Coblenz Michael, 2014, WORKSH EV US PROGR L, P3, DOI [10.1145/2688204.2688218, DOI 10.1145/2688204.2688218]
   Daian P., 2016, Analysis of the DAO exploit
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   Delmolino K, 2016, LECT NOTES COMPUT SC, V9604, P79, DOI 10.1007/978-3-662-53357-4_6
   Digital Asset Inc, 2019, INTR DAML
   Drossopoulou S, 2002, ACM T PROGR LANG SYS, V24, P153, DOI 10.1145/514952.514955
   Elsden C, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3174032
   Encyclopaedia Britannica, 2020, OBSIDIAN
   Ethereum Foundation, 2020, SOL
   Ethereum Foundation, 2020, COMM PATT
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Feist J., 2019, 2019 IEEE ACM 2 INT
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Graham L., 2017, 32000000 WORTH DIGIT
   Grech N, 2020, COMMUN ACM, V63, P87, DOI 10.1145/3416262
   Harvard Business Review, 2017, POT BLOCKCH TRANSF E
   Harz D, 2018, CORR ABS180909805
   Hull Richard, 2016, INT C SERV OR COMP I
   IBM, 2019, BLOCKCH SUPPL CHAIN
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kasampalis Theodoros, 2019, INT S FORM METH FM 1
   KUNG HT, 1981, ACM T DATABASE SYST, V6, P213, DOI 10.1145/319566.319567
   Linux Foundation, 2020, HYP FABR
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Martin Robert C., 2003, AGILE SOFTWARE DEV P
   Mikhajlov L., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P355, DOI 10.1007/BFb0054099
   Mozilla Research, 2015, RUST PROGR LANG
   Myers BA, 2016, COMPUTER, V49, P44, DOI 10.1109/MC.2016.200
   Naden K, 2012, ACM SIGPLAN NOTICES, V47, P557, DOI 10.1145/2103621.2103722
   Nielsen J., 1990, SIGCHI C HUM FACT CO SIGCHI C HUM FACT CO
   Pane JF, 2002, IEEE 2002 SYMPOSIA ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P198, DOI 10.1109/HCC.2002.1046372
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Rosu Grigore, 2010, J LOGIC ALGEBR PROGR, V79, P6
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Schrans F., 2019, ARXIV190406534
   Schrans Franklin, 2019, INTRO ASSET TRAIT
   Sergey I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360611
   Sirer EminGun., 2016, THOUGHTS DAO HACK
   Stefik A., 2014, P 2014 ACM INT S NEW, P283
   Stefik A, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2534973
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Stylos J., 2007, INT C SOFTW ENG ICSE, V07, P529, DOI DOI 10.1109/ICSE.2007.92
   Sunshine J, 2011, ACM SIGPLAN NOTICES, V46, P713, DOI 10.1145/2076021.2048122
   Sunshine Joshua., 2014, EUROPEAN C OBJECT OR, DOI DOI 10.1007/978-3-662-44202-9_7
   Szabo N., 1997, First Monday, V2
   The Ethereum Foundation, 2020, ETH PROJ
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Vogelsteller Fabian, 2015, ERC 20 TOKEN STANDAR
   Willsey Max, 2017, ARXIVCSPL170104929
   Xu Xiwei, 2017, INT C SOFTW ARCH ICS
   Zakrzewski Jakub, 2018, VERIFIED SOFTWARE TH
NR 74
TC 8
Z9 9
U1 2
U2 10
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2020
VL 42
IS 3
AR 14
DI 10.1145/3417516
PG 82
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PA3QO
UT WOS:000595553200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Liu, BZ
   Huang, J
   Rauchwerger, L
AF Liu, Bozhen
   Huang, Jeff
   Rauchwerger, Lawrence
TI Rethinking Incremental and Parallel Pointer Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Incremental pointer analysis; parallelization; dynamic graph algorithms
ID TO ANALYSIS; CONTEXT-SENSITIVITY; GRAPH; FRAMEWORK; ALGORITHM
AB Pointer analysis is at the heart of most interprocedural program analyses. However, scaling pointer analysis to large programs is extremely challenging. In this article, we study incremental pointer analysis and present a new algorithm for computing the points-to information incrementally (i.e., upon code insertion, deletion, and modification). Underpinned by new observations of incremental pointer analysis, our algorithm significantly advances the state of the art in that it avoids redundant computations and the expensive graph reachability analysis, and preserves precision as the corresponding whole program exhaustive analysis. Moreover, it is parallel within each iteration of fixed-point computation. We have implemented our algorithm, IPA, for Java based on the WALA framework and evaluated its performance extensively on real-world large, complex applications. Experimental results show that IPA achieves more than 200X speedups over existing incremental algorithms, two to five orders of magnitude faster than whole program pointer analysis, and also improves the performance of an incremental data race detector by orders of magnitude. Our IPA implementation is open source and has been adopted by WALA.
C1 [Liu, Bozhen; Huang, Jeff; Rauchwerger, Lawrence] Texas A&M Univ, College Stn, TX 77843 USA.
C3 Texas A&M University System; Texas A&M University College Station
RP Liu, BZ (corresponding author), Texas A&M Univ, College Stn, TX 77843 USA.
EM april1989@tamu.edu; jeff@cse.tamu.edu; rwerger@tamu.edu
OI Liu, Bozhen/0000-0003-2137-2375
FU NSF [CCF-1552935, CNS-1617985]; Google Faculty Research award
FX This work was supported by NSF awards CCF-1552935 and CNS-1617985 and a
   Google Faculty Research award to Jeff Huang.
CR Ali K, 2012, LECT NOTES COMPUT SC, V7313, P688, DOI 10.1007/978-3-642-31057-7_30
   [Anonymous], 2016, LLVM DISCUSSIONS POI
   [Anonymous], 2018, SSA BASED IR IN WALA
   [Anonymous], 2018, Language Server Protocol
   [Anonymous], 2018, WALA LANGUAGE INDEPE
   [Anonymous], 1994, Program analysis and specialization for the C programming language
   [Anonymous], 1991, Ph.D. dissertation
   [Anonymous], 2018, The Galois System
   [Anonymous], 1991, Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages
   [Anonymous], 2017, POINTER ANAL WALA
   [Anonymous], 1999, P C CTR ADV STUD COL
   Arzt S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P288, DOI 10.1145/2568225.2568243
   Ben Hardekopf, 2007, P 2007 ACM SIGPLAN C, P290
   Bender MA, 2016, ACM T ALGORITHMS, V12, DOI 10.1145/2756553
   Bergmann Gabor, 2012, Graph Transformations. Proceedings 6th International Conference, ICGT 2012, P386, DOI 10.1007/978-3-642-33654-6_26
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bravenboer M, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P1
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Burke MichaelG., 1994, LCPC, P234
   Chen PC, 1998, IEEE T ROBOTIC AUTOM, V14, P390, DOI 10.1109/70.678449
   De A, 2012, LECT NOTES COMPUT SC, V7313, P665, DOI 10.1007/978-3-642-31057-7_29
   Dietrich J, 2015, ACM SIGPLAN NOTICES, V50, P535, DOI [10.1145/2858965.2814307, 10.1145/2814270.2814307]
   Dietrich Jens, 2016, P 18 WORKSH FORM TEC
   Edvinsson M., 2011, P 6 INT C HIGH PERFO, P45
   EMAMI M, 1994, SIGPLAN NOTICES, V29, P242, DOI 10.1145/773473.178264
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   Grech Neville, 2017, P ACM PROGR LANG OOP
   Grove D, 2001, ACM T PROGR LANG SYS, V23, P685, DOI 10.1145/506315.506316
   Gupta A., 1993, SIGMOD Record, V22, P157, DOI 10.1145/170036.170066
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Kastrinis G, 2013, LECT NOTES COMPUT SC, V7791, P41, DOI 10.1007/978-3-642-37051-9_3
   Landi William Alexander, 1992, THESIS
   LAPOUTRE JA, 1988, LECT NOTES COMPUT SC, V314, P106
   Lhotak O, 2002, THESIS
   Lhoták O, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391987
   Li L, 2011, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON COMPUTER SCIENCE IN SPORT (IACSS2011), P343
   Li Y, 2014, LECT NOTES COMPUT SC, V8586, P27
   Liu B, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P359, DOI 10.1145/3192366.3192390
   Liu YA, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1552309.1552311
   Livshits B, 2005, LECT NOTES COMPUT SC, V3780, P139
   LogicBlox, 2018, LOGIQL
   Lu Y, 2013, LECT NOTES COMPUT SC, V7791, P61, DOI 10.1007/978-3-642-37051-9_4
   Malone N., 2014, Proceedings of the 17th International Conference on Hybrid Systems: Computation and Control, P51, DOI DOI 10.1145/2562059.2562127
   MARLOWE TJ, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P184, DOI 10.1145/96709.96728
   Méndez-Lojo M, 2012, ACM SIGPLAN NOTICES, V47, P107, DOI 10.1145/2370036.2145831
   Méndez-Lojo M, 2010, ACM SIGPLAN NOTICES, V45, P428, DOI 10.1145/1932682.1869495
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Motik B, 2015, AAAI CONF ARTIF INTE, P1560
   Nagaraj V, 2013, INT CONFER PARA, P19, DOI 10.1109/PACT.2013.6618800
   Pearce D. J., 2007, ACM T PROGR LANG SYS, V30, P1
   Putta S, 2012, LECT NOTES COMPUT SC, V7210, P61, DOI 10.1007/978-3-642-28652-0_4
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Ryder B.G, 1983, P 10 ACM SIGACT SIGP, P167, DOI DOI 10.1145/567067.567084
   Ryder BG, 2003, LECT NOTES COMPUT SC, V2622, P126
   Saha D, 2005, LECT NOTES COMPUT SC, V3668, P235, DOI 10.1007/11562931_19
   Saha D, 2006, LECT NOTES COMPUT SC, V4079, P56, DOI 10.1007/11799573_7
   Saha Diptikalyan, 2005, P 7 ACM SIGPLAN INT, P117, DOI DOI 10.1145/1069774.1069785
   Shang L, 2012, IEEE INT CONF AUTOM, P270
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Smith R., 1992, Research Directions in Cognitive Science Volume, V5, P203
   Spath Johannes, 2016, 30 EUR C OBJ OR PROG, V56
   Sreedhar VC, 1998, ACM T PROGR LANG SYS, V20, P388, DOI 10.1145/276393.278523
   Sreedhar VC, 2000, ACM SIGPLAN NOTICES, V35, P196, DOI 10.1145/358438.349326
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2009, LECT NOTES COMPUT SC, V5673, P205, DOI 10.1007/978-3-642-03237-0_15
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Su Y, 2014, PROC INT CONF PARAL, P451, DOI 10.1109/ICPP.2014.54
   Sui Yulei, 2011, P 9 AS S PROGR LANG, P155, DOI DOI 10.1007/978-3-642-25318-8
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tarjan Robert, 1972, SIAM J COMPUT, V1, P2
   Tekle KT, 2016, THEOR PRACT LOG PROG, V16, P916, DOI 10.1017/S1471068416000405
   Ujhelyi Z, 2015, SCI COMPUT PROGRAM, V98, P80, DOI 10.1016/j.scico.2014.01.004
   WALA, 2017, TJ WATS LIB AN WALA
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Yur J.-S., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P442, DOI 10.1109/ICSE.1999.841034
   Zhan S, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P775, DOI 10.1145/2950290.2950332
   Zhao JS, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P59, DOI 10.1145/3178372.3179517
NR 88
TC 16
Z9 21
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2019
VL 41
IS 1
AR 6
DI 10.1145/3293606
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HN7NB
UT WOS:000460376400006
OA Bronze
DA 2024-07-18
ER

PT J
AU Toninho, B
   Yoshida, N
AF Toninho, Bernardo
   Yoshida, Nobuko
TI Interconnectability of Session-Based Logical Processes
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Session types; classical linear logic; multiparty sessions; synthesis
ID PI-CALCULUS; MULTIPARTY; VERIFICATION
AB In multiparty session types, interconnection networks identify which roles in a session engage in communication (i.e., two roles are connected if they exchange a message). In session-based interpretations of linear logic the analogue notion corresponds to determining which processes are composed, or cut, using compatible channels typed by linear propositions. In this work, we show that well-formed interactions represented in a session-based interpretation of classical linear logic (CLL) form strictly less-expressive interconnection networks than those of a multiparty session calculus. To achieve this result, we introduce a new compositional synthesis property dubbed partial multiparty compatibility (PMC), enabling us to build a global type denoting the interactions obtained by iterated composition of well-typed CLL threads. We then show that CLL composition induces PMC global types without circular interconnections between three (or more) participants. PMC is then used to define a new CLL composition rule that can form circular interconnections but preserves the deadlock-freedom of CLL.
C1 [Toninho, Bernardo] Univ Nova Lisboa, NOVA LINCS, Lisbon, Portugal.
   [Toninho, Bernardo] Imperial Coll London, London, England.
   [Yoshida, Nobuko] Imperial Coll London, Dept Comp, 180 Queens Gate,Room 556,South Kensington Campus, London SW7 2AZ, England.
   [Toninho, Bernardo] Univ Nova Lisboa, Fac Ciencias & Tecnol, Dept Informat, Gab 239, P-2829516 Caparica, Portugal.
C3 Universidade Nova de Lisboa; Imperial College London; Imperial College
   London; Universidade Nova de Lisboa
RP Toninho, B (corresponding author), Univ Nova Lisboa, NOVA LINCS, Lisbon, Portugal.; Toninho, B (corresponding author), Imperial Coll London, London, England.; Toninho, B (corresponding author), Univ Nova Lisboa, Fac Ciencias & Tecnol, Dept Informat, Gab 239, P-2829516 Caparica, Portugal.
EM btoninho@fct.unl.pt; n.yoshida@imperial.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020; Toninho, Bernardo/IUB-1256-2023
OI Yoshida, Nobuko/0000-0002-3925-8557; Toninho,
   Bernardo/0000-0002-0746-7514
FU NOVA LINCS [UID/CEC/04516/2013]; EPSRC [EP/K034413/1, EP/K011715/1,
   EP/L00058X/1, EP/N027833/1, EP/N028201/1]; EPSRC [EP/K034413/1,
   EP/K011715/1, EP/N027833/1] Funding Source: UKRI
FX The authors thank the anonymous reviewers, Alceste Scalas and Julien
   Lange for their extensive comments and suggestions. This work is
   supported by NOVA LINCS (UID/CEC/04516/2013), EPSRC EP/K034413/1,
   EP/K011715/1, EP/L00058X/1, EP/N027833/1 and EP/N028201/1.
CR ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   Abramsky Samson, 1995, LOGICS CONCURRENCY, P5
   [Anonymous], 2015, LIPIcs, DOI DOI 10.4230/LIPICS.CONCUR.2015.283
   [Anonymous], [No title captured]
   [Anonymous], 1995, LNCS
   Atkey Robert, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P32, DOI 10.1007/978-3-319-30936-1_2
   BELLIN G, 1994, THEOR COMPUT SCI, V135, P11, DOI 10.1016/0304-3975(94)00104-9
   Bocchi L, 2017, THEOR COMPUT SCI, V669, P33, DOI 10.1016/j.tcs.2017.02.009
   Caires L, 2016, LECT NOTES COMPUT SC, V9688, P74, DOI 10.1007/978-3-319-39570-8_6
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Capecchi S, 2016, MATH STRUCT COMP SCI, V26, P1352, DOI 10.1017/S0960129514000619
   Carbone Marco, 2018, Distributed Computing, V31, P51, DOI [10.1007/978-3-662-44584-6_5, 10.1007/s00446-017-0295-1]
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Carbone Marco, 2015, INT C CONC THEOR CON, V42, P412, DOI DOI 10.4230/LIPICS.C0NCUR.2015.412
   Carbone Marco, 2016, P 29 INT C CONC THEO, V59
   Castellani I., 2017, LIPICS, V85
   Castellani I, 2016, FORM ASP COMPUT, V28, P669, DOI 10.1007/s00165-016-0381-3
   Chen TC, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:12)2017
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Dardha O, 2015, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.190.1
   Demangeon R, 2015, FORM METHOD SYST DES, V46, P197, DOI 10.1007/s10703-014-0218-8
   Demangeon Romain, 2015, LEIBNIZ INT P INFORM, V45, DOI 10.4230/LIPIcs.FSTTCS.2015.560
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   DeYoung H., 2012, COMPUTER SCI LOGIC
   Fossati Luca, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P112, DOI 10.1007/978-3-662-45917-1_8
   Fowler S, 2016, ELECTRON P THEOR COM, P36, DOI 10.4204/EPTCS.223.3
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay Simon J., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P95, DOI 10.1007/978-3-319-30936-1_5
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Honda K, 1998, LNCS, V1381, P22, DOI DOI 10.1007/BFB0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu R, 2017, LECT NOTES COMPUT SC, V10202, P116, DOI 10.1007/978-3-662-54494-5_7
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Jia LM, 2016, ACM SIGPLAN NOTICES, V51, P582, DOI 10.1145/2914770.2837662
   Lange J, 2016, LECT NOTES COMPUT SC, V9636, P833, DOI 10.1007/978-3-662-49674-9_52
   Lange J, 2015, ACM SIGPLAN NOTICES, V50, P221, DOI [10.1145/2775051.2676964, 10.1145/2676726.2676964]
   Lange J, 2012, LECT NOTES COMPUT SC, V7454, P225, DOI 10.1007/978-3-642-32940-1_17
   LINDLEY S, 2016, ICFP16 P 21 ACM, P434, DOI DOI 10.1145/2951913.2951921
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   López HA, 2015, ACM SIGPLAN NOTICES, V50, P280, DOI [10.1145/2858965.2814302, 10.1145/2814270.2814302]
   Mungo, 2016, MUNG HOM
   Neykova R, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P98, DOI 10.1145/3033019.3033031
   Neykova R, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:17)2017
   Neykova R, 2017, FORM ASP COMPUT, V29, P877, DOI 10.1007/s00165-017-0420-8
   Neykova Rumyana, 2018, SESSION TYPE P UNPUB
   Ng N, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P174, DOI 10.1145/2892208.2892232
   Ng N, 2015, LECT NOTES COMPUT SC, V9031, P212, DOI 10.1007/978-3-662-46663-6_11
   Ng N, 2012, LECT NOTES COMPUT SC, V7304, P202, DOI 10.1007/978-3-642-30561-0_15
   Padovani L, 2014, LECT NOTES COMPUT SC, V8459, P147, DOI 10.1007/978-3-662-43376-8_10
   Pérez JA, 2012, LECT NOTES COMPUT SC, V7211, P539, DOI 10.1007/978-3-642-28869-2_27
   Peters K, 2013, LECT NOTES COMPUT SC, V7792, P310, DOI 10.1007/978-3-642-37036-6_18
   Sangiorgi D, 1996, THEOR COMPUT SCI, V167, P235, DOI 10.1016/0304-3975(96)00075-8
   Scribble, 2008, SCRIBBLE PROJECT
   Sivaramakrishnan KC, 2013, SCI COMPUT PROGRAM, V78, P147, DOI 10.1016/j.scico.2012.03.004
   Taylor R, 2016, EUROMICRO WORKSHOP P, P512, DOI 10.1109/PDP.2016.72
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Vieira HT, 2013, LECT NOTES COMPUT SC, V7890, P236, DOI 10.1007/978-3-642-38493-6_17
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
NR 61
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2018
VL 40
IS 4
AR 17
DI 10.1145/3242173
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HJ4CA
UT WOS:000457120400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Cohen, N
   Petrank, E
AF Cohen, Nachshon
   Petrank, Erez
TI Limitations of Partial Compaction: Towards Practical Bounds
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Theory; Languages
ID CONCURRENT
AB Compaction of a managed heap is a costly operation to be avoided as much as possible in commercial runtimes. Instead, partial compaction is often used to defragment parts of the heap and avoid space blowup. Previous study of compaction limitation provided some initial asymptotic bounds but no implications for practical systems. In this work, we extend the theory to obtain better bounds and make them strong enough to become meaningful for modern systems.
C1 [Cohen, Nachshon; Petrank, Erez] Technion Israel Inst Technol, Haifa, Israel.
   [Cohen, Nachshon] Ecole Polytech Fed Lausanne, Sch Comp & Commun Sci, Route Cantonale, CH-1015 Lausanne, Switzerland.
   [Petrank, Erez] Technion, Dept Comp Sci, Haifa, Israel.
C3 Technion Israel Institute of Technology; Swiss Federal Institutes of
   Technology Domain; Ecole Polytechnique Federale de Lausanne; Technion
   Israel Institute of Technology
RP Cohen, N (corresponding author), Technion Israel Inst Technol, Haifa, Israel.; Cohen, N (corresponding author), Ecole Polytech Fed Lausanne, Sch Comp & Commun Sci, Route Cantonale, CH-1015 Lausanne, Switzerland.
EM nachshonc@gmail.com; erez@cs.technion.ac.il
FU Israeli Science Foundation [274/14]; Nechemya LevZion VATAT scholarship
FX This work was supported by the Israeli Science Foundation Grant No.
   274/14 and by the Nechemya LevZion VATAT scholarship.
CR Abuaiadh D, 2004, ACM SIGPLAN NOTICES, V39, P224, DOI 10.1145/1035292.1028995
   Bacon DF, 2003, ACM SIGPLAN NOTICES, V38, P285, DOI 10.1145/640128.604155
   Ben-Yitzak O., 2002, P 3 INT S MEM MAN BE, P100
   Bendersky A., 2011, PRINCIP PROGRAMM LAN, V34, P491
   Boehm HJ, 2004, ACM SIGPLAN NOTICES, V39, P210, DOI 10.1145/982962.964019
   Boehm HJ, 2002, ACM SIGPLAN NOTICES, V37, P93, DOI 10.1145/565816.503282
   Click Cliff, 2005, P 1 ACMUSENIX INT C, P46, DOI [DOI 10.1145/1064979.1064988EVENT-PLACE:CHICAGO,IL,USA, 10.1145/1064979.1064988, DOI 10.1145/1064979.1064988]
   Detlefs David, 2004, P 4 INT S MEM MAN VA, DOI [10.1145/1029873.1029879, DOI 10.1145/1029873.1029879]
   Jones R., 2011, GARBAGE COLLECTION H
   Kermany H, 2006, ACM SIGPLAN NOTICES, V41, P354, DOI 10.1145/1133981.1134023
   Petrank E, 2002, ACM SIGPLAN NOTICES, V37, P101, DOI 10.1145/565816.503283
   Pizlo F, 2008, ACM SIGPLAN NOTICES, V43, P33, DOI 10.1145/1379022.1375587
   ROBSON JM, 1974, J ACM, V21, P491, DOI 10.1145/321832.321846
   ROBSON JM, 1971, J ACM, V18, P416, DOI 10.1145/321650.321658
NR 14
TC 11
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2017
VL 39
IS 1
AR 2
DI 10.1145/2994597
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ER1IR
UT WOS:000398544100002
DA 2024-07-18
ER

PT J
AU Wu, X
   Mueller, F
AF Wu, Xing
   Mueller, Frank
TI SCALAEXTRAP: Trace-Based Communication Extrapolation for SPMD Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Communication; tracing; compression; trace extrapolation
ID PERFORMANCE
AB Performance modeling for scientific applications is important for assessing potential application performance and systems procurement in high-performance computing (HPC). Recent progress on communication tracing opens up novel opportunities for communication modeling due to its lossless yet scalable trace collection. Estimating the impact of scaling on communication efficiency still remains nontrivial due to execution-time variations and exposure to hardware and software artifacts.
   This work contributes a fundamentally novel modeling scheme. We synthetically generate the application trace for large numbers of nodes via extrapolation from a set of smaller traces. We devise an innovative approach for topology extrapolation of single program, multiple data (SPMD) codes with stencil or mesh communication. Experimental results show that the extrapolated traces precisely reflect the communication behavior and the performance characteristics at the target scale for both strong and weak scaling applications. The extrapolated trace can subsequently be (a) replayed to assess communication requirements before porting an application, (b) transformed to autogenerate communication benchmarks for various target platforms, and (c) analyzed to detect communication inefficiencies and scalability limitations.
   To the best of our knowledge, rapidly obtaining the communication behavior of parallel applications at arbitrary scale with the availability of timed replay, yet without actual execution of the application, at this scale, is without precedence and has the potential to enable otherwise infeasible system simulation at the exascale level.
C1 [Wu, Xing] N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA.
C3 North Carolina State University
RP Wu, X (corresponding author), N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA.
EM xwu@cs.ncsu.edu; mueller@cs.ncsu.edu
FU NSF [0937908, 0958311]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [0937908] Funding
   Source: National Science Foundation; Division Of Computer and Network
   Systems; Direct For Computer & Info Scie & Enginr [0958311] Funding
   Source: National Science Foundation
FX This work was supported in part by NSF grants 0937908 and 0958311.
CR BAILEY D, 2005, P EUR C
   BAILEY DH, 1991, INT J SUPERCOMPUT AP, V5, P63, DOI 10.1177/109434209100500306
   Bergroth L, 2000, SPIRE 2000: SEVENTH INTERNATIONAL SYMPOSIUM ON STRING PROCESSING AND INFORMATION RETRIEVAL - PROCEEDINGS, P39, DOI 10.1109/SPIRE.2000.878178
   Brunst H., 2005, INT SERIES ENG COMPU, V777, P92
   DESHPANDE V, 2011, THESIS N CAROLINA ST
   ECKERT Z, 1996, CUCS80496 TR U COL D
   Eckert Z. F., 1994, Proceedings of the 1994 International Conference on Parallel Processing, P103
   Faraj Ahmad., 2007, ICS 07, P168, DOI [10.1145/1274971.1274996, DOI 10.1145/1274971.1274996]
   Gropp W, 1996, PARALLEL COMPUT, V22, P789, DOI 10.1016/0167-8191(96)00024-5
   GRUBER B., 1996, P INT EUR C PAR DIST
   GUSTAFSON JL, 1988, COMMUN ACM, V31, P532, DOI 10.1145/42411.42415
   Hermanns MA, 2009, EUROMICRO WORKSHOP P, P78, DOI [10.1109/PDP.2009.50, 10.1109/.49]
   Hoisie A, 2000, INT J HIGH PERFORM C, V14, P330, DOI 10.1177/109434200001400405
   Hoisie A, 1999, LECT NOTES CONTR INF, V249, P171
   Ipek E, 2006, ACM SIGPLAN NOTICES, V41, P195, DOI 10.1145/1168918.1168882
   KERBYSON D., 2001, INT C SUP
   Kerbyson DJ, 2006, IEEE JOHN VINCENT ATANASOFF 2006 INTERNATIONAL SYMPOSIUM ON MODERN COMPUTING, PROCEEDINGS, P252, DOI 10.1109/JVA.2006.39
   Knüpfer A, 2006, LECT NOTES COMPUT SC, V3992, P526, DOI 10.1007/11758525_71
   Labarta J, 1997, PARALLEL COMPUT, V23, P23, DOI 10.1016/S0167-8191(96)00094-4
   Nagel WE, 1996, SUPERCOMPUTER, V12, P69
   NOETH M., 2007, P INT PAR DISTR PROC
   Noeth M, 2009, J PARALLEL DISTR COM, V69, P696, DOI 10.1016/j.jpdc.2008.09.001
   PILLET V, 1995, TRANSPUT OCCAM ENG S, V44, P17
   Preissl Robert, 2008, 2008 37th International Conference on Parallel Processing (ICPP), P230, DOI 10.1109/ICPP.2008.71
   Preissl R, 2008, LECT NOTES COMPUT SC, V5103, P253, DOI 10.1007/978-3-540-69389-5_29
   PRITHIVATHI R., 2008, UHCS0807 DEP COMP SC
   Ratn P, 2008, ICS'08: PROCEEDINGS OF THE 2008 ACM INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P46
   Rodrigues A.F., 2006, Proceedings of the 2006 ACM/IEEE conference on Supercomputing, page, P157
   RONSSE M, 1998, P INT EUR C PAR DIST
   Sherwood T, 2002, ACM SIGPLAN NOTICES, V37, P45, DOI 10.1145/605432.605403
   SNAVELY A., 2002, P INT C SUP
   VETTER JS, 2001, P ACM SIGPLAN S PRIN
   VIJAYAKUMAR K., 2011, P INT C PAR PROC
   Wu X., 2011, P INT C SUPERCOMPUTI, P12
   Xu Q, 2008, LECT NOTES COMPUT SC, V5374, P73
   Zhai J., 2009, P INT C SUP, P1
   Zhai JD, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P305, DOI 10.1145/1693453.1693493
NR 37
TC 12
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2012
VL 34
IS 1
AR 5
DI 10.1145/2160910.2160914
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 933BD
UT WOS:000303333300005
OA Bronze
DA 2024-07-18
ER

PT J
AU Schulte, C
   Stuckey, PJ
AF Schulte, Christian
   Stuckey, Peter J.
TI Efficient Constraint Propagation Engines
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 10th International Conference on the Principles and Practice of
   Constraint Programming
CY SEP 27-OCT 01, 2004
CL Toronto, CANADA
SP Intelligent Informat Syst Inst, Amer Assoc Artificial Intelligence, Parc Technologies Ltd, ILOG Inc, Swedish Inst Comp Sci, CoLogNET, Microsoft Res, Natl ICT, Cork Constraint Computat Ctr, Dash Optimizat Ltd, Constraint Programming Organizing Comm
DE Languages; Design; Experimentation; Performance; Constraint (logic)
   programming; constraint propagation; events; finite domain constraints;
   fixpoint reasoning; priorities
ID CONSISTENCY; BOUNDS
AB This article presents a model and implementation techniques for speeding up constraint propagation. Three fundamental approaches to improving constraint propagation based on propagators as implementations of constraints are explored: keeping track of which propagators are at fixpoint, choosing which propagator to apply next, and how to combine several propagators for the same constraint.
   We show how idempotence reasoning and events help track fixpoints more accurately. We improve these methods by using them dynamically (taking into account current variable domains to improve accuracy). We define priority-based approaches to choosing a next propagator and show that dynamic priorities can improve propagation. We illustrate that the use of multiple propagators for the same constraint can be advantageous with priorities, and introduce staged propagators that combine the effects of multiple propagators with priorities for greater efficiency.
C1 [Schulte, Christian] KTH, Royal Inst Technol, Sch Informat & Commun Technol, SE-16440 Kista, Sweden.
   [Stuckey, Peter J.] Univ Melbourne, Dept Comp Sci & Software Engn, NICTA Victoria Lab, Melbourne, Vic 3010, Australia.
C3 Royal Institute of Technology; University of Melbourne
RP Schulte, C (corresponding author), KTH, Royal Inst Technol, Sch Informat & Commun Technol, POB Forum 120, SE-16440 Kista, Sweden.
EM cschulte@kth.se; pjs@cs.mu.oz.au
OI Stuckey, Peter/0000-0003-2186-0459
CR [Anonymous], LNCS
   [Anonymous], P 8 EUR C ART INT EC
   [Anonymous], 2003, Principles of Constraint Programming
   [Anonymous], 1999, OPL OPTIMIZATION PRO
   Baptiste P., 2001, Constraint-Based Scheduling: Applying Constraint Programming to Scheduling Problems
   BELDICEANU N, 2000, P TECHN IMPL CONSTR
   Carlsson M., 1997, Programming Languages: Implementations, Logics, and Programs. 9th International Symposium, PLILP'97, Including a Special Track on Declarative Programming Languages in Education. Proceedings, P191, DOI 10.1007/BFb0033845
   CARLSSON M, 2002, T200217 SWED I COMP
   CHAMARD A, 1995, CHIC LESSONS CLP MET
   Choi CW, 2006, LECT NOTES COMPUT SC, V4304, P49
   Codognet P, 1996, J LOGIC PROGRAM, V27, P185, DOI 10.1016/0743-1066(95)00121-2
   *CSPLIB, 2006, CSPLIB PROBL LIB CON
   DUDENEY HE, 1958, AMUSEMENTS MATH
   Gecode Team, 2006, Gecode: Generic constraint development environment
   Gent IP, 2006, LECT NOTES COMPUT SC, V4204, P182
   Granvilliers L, 2003, LECT NOTES COMPUT SC, V2916, P300, DOI 10.1007/978-3-540-24599-5_21
   Harvey W, 2003, CONSTRAINTS, V8, P173, DOI 10.1023/A:1022323717928
   HARVEY W, 2004, COMMUNICATION
   *ILOG SA, 2000, ILOG SOLV 5 0 REF MA
   Laburthe F., 2000, P TRICS TECHN FOR IM, P71
   Lagerkvist MZ, 2007, LECT NOTES COMPUT SC, V4741, P409
   Lhomme O, 1998, J LOGIC PROGRAM, V37, P165, DOI 10.1016/S0743-1066(98)10007-9
   MACKWORTH AK, 1977, ARTIF INTELL, V8, P99, DOI 10.1016/0004-3702(77)90007-8
   Marriott K., 1998, PROGRAMMING CONSTRAI
   MOHR R, 1986, ARTIF INTELL, V28, P225, DOI 10.1016/0004-3702(86)90083-4
   MONFROY E, 1990, P 14 ACM S APPL COMP, P553
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   Mozart Consortium, 1999, MOZ PROGR SYST
   Pesant G, 2004, LECT NOTES COMPUT SC, V3258, P482
   Puget JF, 1998, FIFTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-98) AND TENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICAL INTELLIGENCE (IAAI-98) - PROCEEDINGS, P359
   REGIN JC, 1994, PROCEEDINGS OF THE TWELFTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P362
   Saveant Pierre, 2000, P TECHN IMPL CONSTR, P16
   Schulte C, 2005, ACM T PROGR LANG SYS, V27, P388, DOI 10.1145/1065887.1065889
   Schulte C, 2004, LECT NOTES COMPUT SC, V3258, P619
   Van Hentenryck P, 1998, J LOGIC PROGRAM, V37, P139, DOI 10.1016/S0743-1066(98)10006-7
   VANHENTENRYCK P, 1992, ARTIF INTELL, V58, P113, DOI 10.1016/0004-3702(92)90006-J
   VANHENTENRYCK P, 1991, CONSTRAINT IN PRESS
   Wallace M., 1997, Eclipse: A platform for constraint logic programming
   Zhou NF, 2006, THEOR PRACT LOG PROG, V6, P483, DOI 10.1017/S1471068405002590
NR 39
TC 58
Z9 63
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2008
VL 31
IS 1
AR 2
DI 10.1145/1452044.1452046
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 393TC
UT WOS:000262394800002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Pearce, DJ
   Kelly, PHJ
   Hankin, C
AF Pearce, David J.
   Kelly, Paul H. J.
   Hankin, Chris
TI Efficient field-sensitive pointer analysis of C
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and
   Engineering (PASTE 2004)
CY JUN 07-08, 2004
CL Washington, DC
SP ACM SIGPLAN, ACM SIGSOFT
DE algorithms; theory; languages; verification; set-constraints; pointer
   analysis
ID TO ANALYSIS; ALGORITHM
AB The subject of this article is flow- and context-insensitive pointer analysis. We present a novel approach for precisely modelling struct variables and indirect function calls. Our method emphasises efficiency and simplicity and is based on a simple language of set constraints. We obtain an O(nu(4)) bound on the time needed to solve a set of constraints from this language, where nu is the number of constraint variables. This gives, for the first time, some insight into the hardness of performing field-sensitive pointer analysis of C. Furthermore, we experimentally evaluate the time versus precision, trade-off for our method by comparing against the field-insensitive equivalent. Our benchmark suite consists of 11 common C programs ranging in size from 15,000 to 200,000 lines of code. Our results indicate the field-sensitive analysis is more expensive to compute, but yields significantly better precision. In addition, our technique has been integrated into the latest release (version 4.1) of the GNU Compiler GCC. Finally, we identify several previously unknown issues with an alternative and less precise approach to modelling struct variables, known as field-based analysis.
C1 [Pearce, David J.] Victoria Univ Wellington, Sch Math Stat & Comp Sci, Wellington, New Zealand.
   [Kelly, Paul H. J.; Hankin, Chris] Univ London Imperial Coll Sci Technol & Med, Dept Commputing, London SW7 2AZ, England.
C3 Victoria University Wellington; Imperial College London
RP Pearce, DJ (corresponding author), Victoria Univ Wellington, Sch Math Stat & Comp Sci, Wellington, New Zealand.
EM david.pearce@mcs.vuw.ac.nz; p.kelly@imperial.ac.uk;
   c.hankin@imperial.ac.uk
OI Hankin, Chris/0000-0001-9149-8577
CR Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   AIKEN A, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P329, DOI 10.1109/LICS.1992.185545
   AIKEN A, 1994, LNCS, V874, P326
   Aiken Alexander., 1993, Proceedings of the conference on Functional programming languages and computer architecture, P31
   Alur R, 1998, LECT NOTES COMPUT SC, V1427, P521, DOI 10.1007/BFb0028774
   Andersen L. O., 1994, Ph.D. dissertation
   [Anonymous], 2001, P 2001 ACM SIGPLAN S, DOI DOI 10.1145/379605.379665
   [Anonymous], PLDI 00
   [Anonymous], 1992, ACM LETT PROGRAM LAN
   [Anonymous], PLDI 98
   [Anonymous], 2009, P 30 ACM SIGPLAN C P
   BALL T, 1993, P 1 INT WORKSH AUT A, P206
   BERLIN D, 2005, P 2005 GCC DEV SUMM, P25
   BERNDL M, 2003, P ACM C PROGR LANG D, P196
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   BINKLEY D, 1998, INF SOFTW TECH, V40, P11
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Blanchet Bruno, 2003, ACM SIGPLAN NOTICES, P196, DOI DOI 10.1145/780822.781153
   BOURDONCLE F, 1993, LECT NOTES COMPUTER, V735, P128
   BURKE M, 1990, ACM T PROGR LANG SYS, V12, P341, DOI 10.1145/78969.78963
   Chandra S., 1999, Proceedings of the 1999 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering. (Toulouse, P66
   CHANDRA S, 1999, BL011359099030204 LU
   CHATTERJEE R, 1999, P 26 ACM SIGPLAN SIG, P133
   CHEN LL, 1994, P ACM C SUP, P98
   Cheng BC, 2000, ACM SIGPLAN NOTICES, V35, P57, DOI 10.1145/358438.349311
   Das M, 2001, LECT NOTES COMPUT SC, V2126, P260
   DAS M, 2000, P ACM SIGPLAN C PROG, P35
   DIWAN A, 1998, P ACM SIGPLAN 98 C P, P106
   Dor Nurit., 2003, PLDI 03, P155, DOI [10.1145/781131.781149, DOI 10.1145/781131.781149]
   Eichin M. W., 1989, Proceedings 1989 IEEE Symposium on Security and Privacy (Cat. No.89CH2703-7), P326, DOI 10.1109/SECPRI.1989.36307
   EMAMI M, 1994, P ACM SIGPLAN 94 C P, P242
   FAHNDRICH M, 2000, P ACM SIGPLAN C PROG, P253
   Fecht C., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P189
   Fecht C, 1998, LECT NOTES COMPUT SC, V1381, P90, DOI 10.1007/BFb0053565
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Flanagan Cormac., 1997, THESIS RICE U
   Foster J. S., 1997, CSD97964 U CAL
   Foster JS, 2000, LECT NOTES COMPUT SC, V1824, P175
   FOSTER JS, 1999, P 1999 ACM SIGPLAN C, P192
   Gabow HN, 2000, INFORM PROCESS LETT, V74, P107, DOI 10.1016/S0020-0190(00)00051-X
   Ghiya R., 2001, Proc. of the ACM SIGPLAN 2001 conference on Programming Language Design and Implementation, P47
   Godefroid P, 1997, LECT NOTES COMPUT SC, V1254, P476
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   HASTI R, 1998, P ACM SIGPLAN 98 C P, P97
   Heintze N, 1997, IEEE S LOG, P342, DOI 10.1109/LICS.1997.614960
   Heintze N., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P306, DOI 10.1145/182409.182495
   HEINTZE N, 1997, P ACM SIGPLAN C PROG, P261
   Heintze Nevin., 2001, PLDI 01, P254
   Heintze Nevin, 2001, ACM SIGPLAN NOTICES, P24, DOI [10.1145/378795.378802, DOI 10.1145/381694.378802]
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Hind M, 1998, LECT NOTES COMPUT SC, V1503, P57
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   HIND M, 2000, P INT S SOFTW TEST A, P113
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   HORWITZ S, 1987, ACTA INFORM, V24, P679, DOI 10.1007/BF00282621
   *ISO90, 1990, 9899 ISO IEC
   Johnson R, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE 13TH USENIX SECURITY SYMPOSIUM, P119
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Jones N. D., 1981, Program flow analysis. Theory and applications, P102
   Kodumal J, 2005, LECT NOTES COMPUT SC, V3672, P218
   LANDI W, 1992, THESIS RUTGEERS U NJ
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Liang DL, 1999, LECT NOTES COMPUT SC, V1687, P199, DOI 10.1145/318774.318943
   MCKINLEY KS, 1994, P IEEE ACM SUP C SC, P54
   Melski D., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P74, DOI 10.1145/258993.259006
   Myers B.A., 1986, Proceedings of the SIGCHI conference on Human factors in computing systems (CHI '86), V17, P59, DOI 10.1145/22627.22349
   Nielson F., 1999, Principles of Program Analysis
   NUUTILA E, 1994, INFORM PROCESS LETT, V49, P9, DOI 10.1016/0020-0190(94)90047-7
   Nystrom EM, 2004, LECT NOTES COMPUT SC, V3148, P165
   Nystrom Erik M., 2004, Proceedings of the 2004 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis For Software Tools and Engineering, PASTE'04, P43
   PADUA DA, 1986, COMMUN ACM, V29, P1184, DOI 10.1145/7902.7904
   PADUA DA, 1980, IEEE T COMPUT, V29, P763, DOI 10.1109/TC.1980.1675676
   Pearce D. J., 2005, THESIS IMPERIAL COLL
   Pearce DJ, 2004, SOFTWARE QUAL J, V12, P311, DOI 10.1023/B:SQJO.0000039791.93071.a2
   Pearce DJ, 2004, LECT NOTES COMPUT SC, V3059, P383
   Pearce DJ, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P3, DOI 10.1109/SCAM.2003.1238026
   PEARCE DJ, 2006, ACM J EXPT ALG, V11
   PEARCE DJ, 2004, P ACM WORKSH PROGR A, P37
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   Reiss SP, 1997, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION, PROCEEDINGS, P46
   REYNOLDS JC, 1969, P INF PROC C IFIP N, V1, P456
   ROUNTEV A, 2001, P C OBJ OR PROGR SYS, P43
   Saha Diptikalyan, 2005, P 7 ACM SIGPLAN INT, P117, DOI DOI 10.1145/1069774.1069785
   SCHON E, 1995, R9506 SWED I COMP SC
   Shapiro M., 1997, P 24 ACM SIGPLAN SIG, P1
   SHMUELI O, 1983, INFORM PROCESS LETT, V17, P185, DOI 10.1016/0020-0190(83)90038-8
   SO B, 1998, P 1998 ACM INT C SUP, P212
   Sridharan Manu, 2005, P 20 ANN ACM SIGPLAN, P59, DOI [DOI 10.1145/1103845.1094817, 10.1145/1094811.1094817, DOI 10.1145/1094811.1094817]
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   Su Z., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL), P81, DOI [10.1145/325694.325706, DOI 10.1145/325694.325706]
   *SUIF2, SUIF2 RES COMP STANF
   Systa T., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P199, DOI 10.1109/CSMR.2000.827328
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   *VIS GROUP, 1996, P 8 INT C COMP AID V, V1102, P428
   VIVIEN F, 2001, P ACM SIGPLAN 01 C P, P35
   WAGNER D, 2000, P NETW DISTR SYST SE, P3
   Whaley J, 2002, LECT NOTES COMPUT SC, V2477, P180
   Whaley John., 2004, PROGRAMMING LANGUAGE, P131
   WILSON R, 1997, THESIS STANFORD U ST
   Wolfe Michael Joseph, 1982, Ph. D. Dissertation
   YONG SH, 1999, P ACM C PROGR LANG D, P91
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 105
TC 48
Z9 63
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 1
AR 4
DI 10.1145/1290520.1290524
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 248KY
UT WOS:000252153400004
OA Bronze
DA 2024-07-18
ER

PT J
AU De Sutter, B
   Van Put, L
   De Bosschere, K
AF De Sutter, Bjorn
   Van Put, Ludo
   De Bosschere, Koen
TI A practical interprocedural dominance algorithm
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; interprocedural control flow graph; dominators;
   interprocedural analysis
ID TIME; DOMINATORS; OPTIMIZATION; GRAPH
AB Existing algorithms for computing dominators are formulated for control flow graphs of single procedures. With the rise of computing power, and the viability of whole-program analyses and optimizations, there is a growing need to extend the dominator computation algorithms to context-sensitive interprocedural dominators. Because the transitive reduction of the interprocedural dominator graph is not a tree, as in the intraprocedural case, it is not possible to extend existing algorithms directly. In this article, we propose a new algorithm for computing interprocedural dominators. Although the theoretical complexity of this new algorithm is as high as that of a straightforward iterative solution of the data flow equations, our experimental evaluation demonstrates that the algorithm is practically viable, even for programs consisting of several hundred thousands of basic blocks.
C1 Univ Ghent, Ghent, Belgium.
C3 Ghent University
RP De Sutter, B (corresponding author), Univ Ghent, Ghent, Belgium.
EM brdsutte@elis.ugent.be; lvanput@elis.ugent.be; kdb@elis.ugent.be
RI De Bosschere, Koen OM/P-6865-2014
CR Aho AlfredV., 1977, Principles of Compiler Design
   Allen F.E., 1970, ACM Sigplan Not, V5, P1, DOI [DOI 10.1145/800028.808479, 10.1145/390013.808479, DOI 10.1145/390013.808479]
   Allen F. E., 1972, 3923 IBM TJ WATS RES
   Alstrup S, 1999, SIAM J COMPUT, V28, P2117, DOI 10.1137/S0097539797317263
   [Anonymous], P SIGPLAN SIGSOFT WO
   CHANET D, 2007, ACM T EMBEDDED COMP, V6
   Cooper Keith, 2006, Technical Report
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   De Bus B, 2004, ACM SIGPLAN NOTICES, V39, P211, DOI 10.1145/998300.997194
   De Sutter B, 2005, ACM T PROGR LANG SYS, V27, P882, DOI 10.1145/1086642.1086645
   Georgiadis L, 2004, LECT NOTES COMPUT SC, V3221, P677
   Georgiadis Loukas., 2004, Proceedings of the fifteenth annual ACM-SIAM Symposium on Discrete Algorithms, P869
   Harel D., 1985, P 17 ANN ACM S THEOR, P185
   Lengauer T., 1979, ACM T PROGR LANG SYS, V1, P121, DOI 10.1145/357062.357071
   LOWRY ES, 1969, COMMUN ACM, V12, P13, DOI 10.1145/362835.362838
   Muth R, 2001, SOFTWARE PRACT EXPER, V31, P67, DOI 10.1002/1097-024X(200101)31:1<67::AID-SPE357>3.0.CO;2-A
   PROSSER RT, 1959, P EASTERN JOINT COMP, P133
   PURDOM PW, 1972, COMMUN ACM, V15, P777, DOI 10.1145/361532.361566
   Ramalingam G, 2002, ACM T PROGR LANG SYS, V24, P455, DOI 10.1145/570886.570887
   Triantafyllis S, 2006, ACM SIGPLAN NOTICES, V41, P61, DOI 10.1145/1133981.1133989
   WALL DW, 1986, SIGPLAN 86 P 1986 SI, P264
NR 21
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 4
AR 19
DI 10.1145/1255450.1255452
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 202OS
UT WOS:000248913500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Higuchi, T
   Ohori, A
AF Higuchi, Tomoyuki
   Ohori, Atsushi
TI A static type system for JVM access control
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; security; theory; verification; JVM; access control; stack
   inspection; type system; type inference
ID BYTECODE; LANGUAGE
AB This article presents a static type system for the Java virtual machine (JVM) code that enforces an access control mechanism similar to that found in a Java implementation. In addition to verifying type consistency of a given JVM code, the type system statically verifies whether the code accesses only those resources that are granted by the prescribed access policy. The type system is proved to be sound with respect to an operational semantics that enforces access control dynamically, similar to Java stack inspection. This result ensures that "well-typed code cannot violate access policy." The authors then develop a type inference algorithm and show that it is sound with respect to the type system. These results allow us to develop a static system for JVM access control, without resorting to costly runtime stack inspection.
C1 Japan Adv Inst Sci & Technol, Nomi, Ishikawa 9231292, Japan.
   Insite Corp, Toyonaka, Osaka 5600083, Japan.
   Tohoku Univ, Res Inst Elect Commun, Sendai, Miyagi 9808577, Japan.
C3 Japan Advanced Institute of Science & Technology (JAIST); Tohoku
   University
RP Higuchi, T (corresponding author), Japan Adv Inst Sci & Technol, 1-1 Asahidai, Nomi, Ishikawa 9231292, Japan.
EM higuchi528@insitecorp.co.jp; ohori@riec.tohoku.ac.jp
CR [Anonymous], PLDI 91
   BANERJEE A, 2002, PRINCIPLES PROGRAMMI, P166
   BANERJEE A, 2001, AI06885 STEV I TECHN
   Barthe G, 2004, LECT NOTES COMPUT SC, V2984, P99
   Clements J, 2003, LECT NOTES COMPUT SC, V2618, P22
   Erlingsson U, 2000, P IEEE S SECUR PRIV, P246, DOI 10.1109/SECPRI.2000.848461
   Fournet Cedric., 2002, POPL 02, P307
   Freund SN, 1999, ACM T PROGR LANG SYS, V21, P1196, DOI 10.1145/330643.330646
   Freund SN, 2003, J AUTOM REASONING, V30, P271, DOI 10.1023/A:1025011624925
   GALLIER JH, 1989, THEOR COMPUT SCI, V67, P203, DOI 10.1016/0304-3975(89)90004-2
   GONG L, 1998, INT SOC S NETW DISTR, P125
   GONG L, 1999, INSIDE JAVATM 2 PLAT
   HIGUCHI T, 2002, P INT C PRINC PRACT, P201
   Karjoth G, 2000, P IEEE CSFW, P224, DOI 10.1109/CSFW.2000.856939
   Klein G, 2003, J AUTOM REASONING, V30, P363, DOI 10.1023/A:1025095122199
   KOVED L, 2002, P 17 ACM SIGPLAN C O, P359
   LEROY X, 1992, THESIS U PARIS 7
   Liang S, 1998, ACM SIGPLAN NOTICES, V33, P36, DOI 10.1145/286942.286945
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Nipkow T, 2003, J AUTOM REASONING, V30, P233, DOI 10.1023/A:1025086804452
   Ohori A, 1999, LECT NOTES COMPUT SC, V1722, P300
   Posegga J, 1998, LECT NOTES COMPUT SC, V1485, P175, DOI 10.1007/BFb0055863
   Pottier F, 2005, ACM T PROGR LANG SYS, V27, P344, DOI 10.1145/1057387.1057392
   Skalka C, 2004, LECT NOTES COMPUT SC, V3302, P107
   SKALKA C, 2005, P ACM C PRINC PRACT, P139
   SKALKA S, 2000, P INT C FUNCT PROGR, P34
   STATA R, 1998, P 25 ACM S PRINC PRO, P149
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
   Wallach DS, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P52, DOI 10.1109/SECPRI.1998.674823
NR 29
TC 4
Z9 5
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2007
VL 29
IS 1
AR 4
DI 10.1145/1180475.1180479
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FG
UT WOS:000243927300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Rosenkrantz, DJ
   Mullin, LR
   Hunt, HB
AF Rosenkrantz, Daniel J.
   Mullin, Lenore R.
   Hunt, Harry B., III
TI On minimizing materializations of array-valued temporaries
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; performance; theory; array operations; array
   temporary materializations; compiler optimization; copy minimization;
   program transformation
ID COMPILER
AB We consider the analysis and optimization of code utilizing operations and functions operating on entire arrays. Models are developed for studying the minimization of the number of materializations of array-valued temporaries in basic blocks, each consisting of a sequence of assignment statements involving array-valued variables. We derive lower bounds on the number of materializations required, and develop several algorithms minimizing the number of materializations, subject to a simple constraint on allowable statement rearrangement. In contrast, we also show that when statement rearrangement is unconstrained, minimizing the number of materializations becomes NP-complete, even for very simple basic blocks.
   Categories and Subject Descriptors: D.3.4 [Programming Languages]: Processors-Compilers, optimization; E. 1 [Data Structures]: Arrays; F.3.2 [Logics and Meanings of Programs]: Semantics of Programming Languages-Program analysis
C1 SUNY Albany, Dept Comp Sci, Albany, NY 12222 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Albany
RP Rosenkrantz, DJ (corresponding author), SUNY Albany, Dept Comp Sci, Albany, NY 12222 USA.
EM djr@cs.Albany.edu; lenore@cs.Albany.edu; hunt@cs.Albany.edu
CR ABRAMS PS, 1970, THESIS STANFORD U ST
   Aho A.V., 1986, COMPILERS PRINCIPLES
   BACON DF, 1994, ACM COMPUT SURV, V26, P345, DOI 10.1145/197405.197406
   BUDD TA, 1984, ACM T PROGR LANG SYS, V6, P297, DOI 10.1145/579.357248
   CHAMBERLAIN BL, 1996, LECT NOTES COMPUTER, V1239, P481
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Dinesh T. B., 2000, Scientific Programming, V8, P247
   GAO G, 1992, LECT NOTES COMPUTER, V757, P281
   GUIBAS LJ, 1978, C REC 5 ANN ACM SIGA, P1
   GUPTA M, 1995, P SUPERCOMPUTING 95
   HASSITT A, 1972, IBM J RES DEV, V16, P45, DOI 10.1147/rd.161.0045
   HUMPHREY W, 1997, LECT NOTES COMPUTER, V1343, P185
   Hwang GH, 2001, J PARALLEL DISTR COM, V61, P467, DOI 10.1006/jpdc.2000.1680
   Hwang GH, 1998, J PARALLEL DISTR COM, V54, P1, DOI 10.1006/jpdc.1998.1481
   HWANG GH, 1995, SIGPLAN NOTICES, V30, P112, DOI 10.1145/209937.209949
   JU DC, 1992, THESS U TEXAS AUSTIN
   Kennedy K, 2001, INT J PARALLEL PROG, V29, P463, DOI 10.1023/A:1012241830762
   KENNEDY K, 1995, LECT NOTES COMPUTER, V1033, P161
   KENNEDY K, 1993, LECT NOTES COMPUTER, V768, P301
   Kennedy Ken, 2002, Optimizing Compilers for Modern Architectures
   Knobe K., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P107, DOI 10.1145/268946.268956
   LEWIS EC, 1998, P SIGPLAN C PROGR LA, P50
   LIN C, 1993, LECT NOTES COMPUTER, V768, P96
   Manjikian N, 1997, IEEE T PARALL DISTR, V8, P193, DOI 10.1109/71.577265
   MULLIN L, 1993, WORKSH COMPILERS PAR
   Mullin L.M.R, 1988, THESIS SYRACUSE U SY
   Roth G, 2000, LECT NOTES COMPUT SC, V1781, P219
   ROTH G, 1997, P 1997 ACM IEEE C SU
   ROTH G, 1998, P 12 INT C SUP ICS 9, P125
   ROTH G, 1996, P INT C PAR DISTR PR, P1225
   ROTH G, 1997, THESIS RICE U
   Schwartz J. T., 1975, Computer Languages, V1, P161, DOI 10.1016/0096-0551(75)90015-6
   Siek JG, 1998, LECT NOTES COMPUT SC, V1505, P59
   Veldhuizen T., 1995, C++ Report, V7, P26
   Veldhuizen T., 1995, C++ Report, V7, P36
   Veldhuizen T. L., 1998, P SIAM WORKSH OBJ OR
   Veldhuizen TL, 1998, LECT NOTES COMPUT SC, V1505, P223
   Wolfe M.J., 1996, High Performance Compilers For Parallel Computing
NR 38
TC 0
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2006
VL 28
IS 6
BP 1145
EP 1177
DI 10.1145/1186632.1186637
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 119DD
UT WOS:000242991500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Roychoudhury, A
   Kumar, KN
   Ramakrishnan, CR
   Ramakrishnan, IV
AF Roychoudhury, A
   Kumar, KN
   Ramakrishnan, CR
   Ramakrishnan, IV
TI An unfold/fold transformation framework for definite logic programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; verification; logic programming; program
   transformation; unfolding; folding; inductive theorem proving
ID FOLD TRANSFORMATION; VERIFICATION; EQUIVALENCE; INDUCTION; SYSTEM
AB Given a logic program P, an unfold/fold program transformation system derives a sequence of programs P = P-0, P-1,.., P-n, such that Pi+1 is derived from P-i by application of either an unfolding or a folding step. Unfold/fold transformations have been widely used for improving program efficiency and for reasoning about programs. Unfolding corresponds to a resolution step and hence is semantics-preserving. Folding, which replaces an occurrence of the right hand side of a clause with its head, may on the other hand produce a semantically different program. Existing unfold/fold transformation systems for logic programs restrict the application of folding by placing (usually syntactic) conditions that are sufficient to guarantee the correctness of folding. These restrictions are often too strong, especially when the transformations are used for reasoning about programs. In this article we develop a transformation system (called SCOUT) for definite logic programs that is provably more powerful (in terms of transformation sequences allowed) than existing transformation systems. This extra power is needed for a novel use of logic program transformations: for the verification of a specific class of concurrent systems, called parameterized concurrent systems. Our transformation system is constructed by developing a framework, which is parameterized by a "measure space" and associated measure functions. This framework places no syntactic restriction on the application of folding, and it can be used to derive transformation systems (by fixing the measure space and functions). The power of the system is determined by the choice of the measure space and functions; thus the relative power of different transformation systems can be compared by considering their measure spaces and functions. The correctness of these transformation systems follows from the correctness of the framework. We show that various existing transformation systems can be obtained as instances of our framework. We extend the unfold/fold transformation framework with a goal replacement transformation that allows semantically equivalent conjunctions of atoms to be interchanged. We then derive a new transformation system SCOUT as an instance of the framework and show its power relative to the existing transformation systems. SCOUT has been used to inductively prove temporal properties of parameterized concurrent systems (infinite families of finite state concurrent systems). We demonstrate the use of the additional power of SCOUT in constructing such induction proofs.
C1 Natl Univ Singapore, Sch Comp, Singapore 117543, Singapore.
   Chennai Math Inst, Madras 600017, Tamil Nadu, India.
   SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
C3 National University of Singapore; Chennai Mathematical Institute; State
   University of New York (SUNY) System; State University of New York
   (SUNY) Stony Brook
RP Natl Univ Singapore, Sch Comp, S16 Level 5,3 Sci Dr 2, Singapore 117543, Singapore.
EM abhik@comp.nus.edu.sg; kumar@cmi.ac.in; cram@cs.sunysb.edu;
   ram@cs.sunysb.edu
OI ROYCHOUDHURY, Abhik/0000-0002-7127-1137
CR AMTOFT T, 1992, LECT NOTES COMPUT SC, V631, P187, DOI 10.1007/3-540-55844-6_136
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   APT K, 1986, INFORMATION PROCESSI, V15, P307
   ARAVINDAN C, 1995, J LOGIC PROGRAM, V24, P201, DOI 10.1016/0743-1066(94)00104-E
   Bensaou N, 1998, THEOR COMPUT SCI, V206, P81, DOI 10.1016/S0304-3975(97)00077-7
   BOSSI A, 1992, LECT NOTES COMPUT SC, V631, P172, DOI 10.1007/3-540-55844-6_135
   Bossi A, 1996, J LOGIC COMPUT, V6, P79, DOI 10.1093/logcom/6.1.79
   BOSSI A, 1990, ACM T PROGR LANG SYS, V12, P253, DOI 10.1145/78942.78947
   BOSSI A, 1994, LECT NOTES COMPUTER, V850, P269
   BOULANGER D, 1993, J SYMB COMPUT, V15, P495, DOI 10.1016/S0747-7171(06)80003-9
   BOYER RS, 1975, J ACM, V22, P129, DOI 10.1145/321864.321875
   BOYER RS, 1990, LECT NOTES ARTIF INT, V449, P1
   BUNDY A, 1990, LECT NOTES ARTIF INT, V449, P647
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Chen WD, 1996, J ACM, V43, P20, DOI 10.1145/227595.227597
   Clarke EM, 1999, MODEL CHECKING, P1
   Comon H, 2000, INFORM COMPUT, V159, P151, DOI 10.1006/inco.2000.2875
   DAS S, 1992, DEDUCTIVE DATABASES
   De Schreye D, 1999, J LOGIC PROGRAM, V41, P231, DOI 10.1016/S0743-1066(99)00030-8
   Etalle S, 2001, ACM T PROGR LANG SYS, V23, P304, DOI 10.1145/503502.503504
   Etalle S, 1996, THEOR COMPUT SCI, V166, P101, DOI 10.1016/0304-3975(95)00148-4
   FRANCESCO ND, 1998, ACTA INFORM, V35, P1037
   GERGATSOULIS M, 1994, LECT NOTES COMPUTER, V844, P340
   HSIANG J, 1987, THEOR COMPUT SCI, V54, P3, DOI 10.1016/0304-3975(87)90016-8
   KANAMORI T, 1986, LECT NOTES COMPUT SC, V230, P281
   KANAMORI T, 1987, US JAP SEM LOG PROGR
   KAWAMURA T, 1990, THEOR COMPUT SCI, V75, P139, DOI 10.1016/0304-3975(90)90065-P
   KOMOROWSKI J, 1982, ACM SIGPLAN INT C PR
   KOTT L, 1985, ALGEBRAIC METHODS SE, P412
   Lloyd JohnWylie., 1993, FDN LOGIC PROGRAMMIN, Vsecond
   MAHER M, 1987, CORRECTNESS LOGIC PR
   MAHER MJ, 1993, THEOR COMPUT SCI, V110, P377, DOI 10.1016/0304-3975(93)90013-J
   Pettorossi A, 1999, J LOGIC PROGRAM, V41, P197, DOI 10.1016/S0743-1066(99)00029-1
   Pettorossi A., 1998, Handbook of Logic in Artificial Intelligence and Logic Programming, V5, P697
   PETTOROSSI A, 1997, ACM SIGPLAN INT C PR, P414
   PETTOROSSI A, 2000, LNCS, V1861
   Roychoudhury A., 2002, International Journal of Foundations of Computer Science, V13, P387, DOI 10.1142/S0129054102001175
   Roychoudhury A, 2001, LECT NOTES COMPUT SC, V2102, P25
   Roychoudhury A, 2000, LECT NOTES COMPUT SC, V1785, P172
   ROYCHOUDHURY A, 2000, THESIS STATE U NEW Y
   Sanders SW, 1996, CLIN THER, V18, P2, DOI 10.1016/S0149-2918(96)80175-5
   SATO T, 1992, THEOR COMPUT SCI, V105, P57, DOI 10.1016/0304-3975(92)90287-P
   SEKI H, 1993, J LOGIC PROGRAM, V16, P5, DOI 10.1016/0743-1066(93)90021-8
   SEKI H, 1991, THEOR COMPUT SCI, V86, P107, DOI 10.1016/0304-3975(91)90007-O
   TAMAKI H, 1986, LECT NOTES COMPUT SC, V225, P84
   Tamaki H., 1984, P 2 INT LOG PROGR C, P127
   TAMAKI H, 1986, GEN CORRECTNESS PROO
NR 47
TC 10
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2004
VL 26
IS 3
BP 464
EP 509
DI 10.1145/982158.982160
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 812QJ
UT WOS:000220853700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Rinard, MC
   Diniz, PC
AF Rinard, MC
   Diniz, PC
TI Eliminating synchronization bottlenecks using adaptive replication
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; experimentation; performance; atomic operations;
   commutativity analysis; parallel computing; parallelizing compilers;
   replication; synchronization
ID MONITORS
AB This article presents a new technique, adaptive replication, for automatically eliminating synchronization bottlenecks in multithreaded programs that perform atomic operations on objects. Synchronization bottlenecks occur when multiple threads attempt to concurrently update the same object. It is often possible to eliminate synchronization bottlenecks by replicating objects. Each thread can then update its own local replica without synchronization and without interacting with other threads. When the computation needs to access the original object, it combines the replicas to produce the correct values in the original object. One potential problem is that eagerly replicating all objects may lead to performance degradation and excessive memory consumption.
   Adaptive replication eliminates unnecessary replication by dynamically detecting contention at each object to find and replicate only those objects that would otherwise cause synchronization bottlenecks. We have implemented adaptive replication in the context of a parallelizing compiler for a subset of C++. Given an unannotated sequential program written in C++, the compiler automatically extracts the concurrency, determines when it is legal to apply adaptive replication, and generates parallel code that uses adaptive replication to efficiently eliminate synchronization bottlenecks.
   In addition to automatic parallelization and adaptive replication, our compiler also implements a lock coarsening transformation that increases the granularity at which the computation locks objects. The advantage is a reduction in the frequency with which the computation acquires and releases locks; the potential disadvantage is the introduction of new synchronization bottlenecks caused by increases in the sizes of the critical sections. Because the adaptive replication transformation takes place at lock acquisition sites, there is a synergistic interaction between lock coarsening and adaptive replication. Lock coarsening drives down the overhead of using adaptive replication, and adaptive replication eliminates synchronization bottlenecks associated with the overaggressive use of lock coarsening.
   Our experimental results show that, for our set of benchmark programs, the combination of lock coarsening and adaptive replication can eliminate synchronization bottlenecks and significantly reduce the synchronization and replication overhead as compared to versions that use none or only one of the transformations.
C1 MIT, Comp Sci Lab, Cambridge, MA 02139 USA.
   Univ So Calif, ISI, Marina Del Rey, CA 90202 USA.
C3 Massachusetts Institute of Technology (MIT); University of Southern
   California
RP MIT, Comp Sci Lab, 545 Technol Sq,NE43-620A, Cambridge, MA 02139 USA.
EM rinard@lcs.mit.edu; pedro@isi.edu
RI Diniz, Pedro C./F-2470-2013; Diniz, Pedro/ABC-5599-2020; Diniz,
   Pedro/HMO-7655-2023
OI Diniz, Pedro/0000-0003-3131-9367
CR ALDRICH J, 1999, P 6 INT STAT AN S
   Amza C, 1996, COMPUTER, V29, P18, DOI 10.1109/2.485843
   Arnold Ken., 1996, The Java Programming Language
   BARNES J, 1986, NATURE, V324, P446, DOI 10.1038/324446a0
   BERRY M, 1989, 827 ICASE U ILL URB
   BRINCHHANSEN P, 1975, IEEE T SOFTWARE ENG, V1, P199
   CALLAHAN D, 1991, P 4 WORKSH LANG COMP, P169
   CHASE DR, 1990, P SIGPLAN 90 C PROGR, P296
   Diniz PC, 1999, ACM T COMPUT SYST, V17, P89, DOI 10.1145/312203.312210
   Diniz PC, 1998, J PARALLEL DISTR COM, V49, P218, DOI 10.1006/jpdc.1998.1441
   DOLBY J, 1997, P SIGPLAN 97 C PROGR
   DOLIGEZ D, 1993, P 20 ANN ACM S PRINC
   EMAMI M, 1994, P ACM SIGPLAN 94 C P, P242
   Fisher AllanL., 1994, P ACM SIGPLAN 1994 C, P135, DOI [10.1145/178243.178255, DOI 10.1145/178243.178255]
   Ghiya Rakesh., 1996, POPL 96, P1
   GHULOUM A, 1995, P 5 ACM SIGPLAN S PR, P58
   GRAHAM S, 1982, P SIGPLAN 82 S COMP
   GRAY J, 1993, T PROCECESSING CONCE
   HALL M, 1995, P SUP 95 SAN DIEG CA
   HANSEN PB, 1972, COMMUN ACM, V15, P574, DOI 10.1145/361454.361473
   HARRIS J, 1990, P 60 ANN INT M SOC E, P82
   HEINRICH J, 1993, MIPS R4000 MICROPROC
   HEULSBERGEN L, 1993, P 4 ACM SIGPLAN S PR
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Knuth D. E., 1971, Software - Practice and Experience, V1, P105, DOI 10.1002/spe.4380010203
   LAMPSON BW, 1980, COMMUN ACM, V23, P105, DOI 10.1145/358818.358824
   LENOSKI D, 1992, THESIS STANFORD U ST
   LI K, 1986, THESIS YALE U NEW HA
   Lumetta S., 1993, IEEE Parallel & Distributed Technology: Systems & Applications, V1, P23, DOI 10.1109/88.260287
   MOHR E, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P185, DOI 10.1145/91556.91631
   OTOOLE J, 1994, P 1994 ACM C LISP FU
   Pinter ShlomitS., 1991, Proceedings of the 18th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'91, P79, DOI DOI 10.1145/99583.99597
   POLYCHRONOPOULOS CD, 1987, IEEE T COMPUT, V36, P1425, DOI 10.1109/TC.1987.5009495
   RINARD M, 1999, P 1999 ACM INT C SUP
   Rinard MC, 1997, ACM T PROGR LANG SYS, V19, P942, DOI 10.1145/267959.269969
   Rinard MC, 1999, ACM T COMPUT SYST, V17, P337, DOI 10.1145/329466.329486
   Rinard MC, 1998, ACM T PROGR LANG SYS, V20, P483, DOI 10.1145/291889.291893
   ROVNER P, 1986, IEEE SOFTWARE, V3, P46, DOI 10.1109/MS.1986.229476
   Rugina Radu., 1999, P SIGPLAN 99 C PROGR
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   SHA L, 1990, IEEE T COMPUT, V39, P1175, DOI 10.1109/12.57058
   SINGH J, 1993, THESIS STANFORD U ST
   SINGH JP, 1992, COMPUTER ARCHITECTUR, V20, P5
   WILSON R, 1995, P SIGPLAN 95 C PROGR
   WOO SC, 1995, P 22 INT S COMP ARCH
NR 46
TC 2
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2003
VL 25
IS 3
BP 316
EP 359
DI 10.1145/641909.641911
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 662CY
UT WOS:000181929700002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Hu, JM
   Lu, E
   Holland, DA
   Kawaguchi, M
   Chong, S
   Seltzer, M
AF Hu, Jingmei
   Lu, Eric
   Holland, David A.
   Kawaguchi, Ming
   Chong, Stephen
   Seltzer, Margo
TI Towards Porting Operating Systems with Program Synthesis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Program synthesis; assembly languages; operating systems
ID SOLVER
AB The end of Moore's Law has ushered in a diversity of hardware not seen in decades. Operating system (OS) (and system software) portability is accordingly becoming increasingly critical. Simultaneously, there has been tremendous progress in program synthesis. We set out to explore the feasibility of using modern program synthesis to generate the machine-dependent parts of an operating system. Our ultimate goal is to generate new ports automatically from descriptions of new machines.
   One of the issues involved is writing specifications, both for machine-dependent operating system functionality and for instruction set architectures. We designed two domain-specific languages: Alewife for machine-independent specifications of machine-dependent operating system functionality and Cassiopea for describing instruction set architecture semantics. Automated porting also requires an implementation. We developed a toolchain that, given an Alewife specification and a Cassiopea machine description, specializes the machine-independent specification to the target instruction set architecture and synthesizes an implementation in assembly language with a customized symbolic execution engine. Using this approach, we demonstrate the successful synthesis of a total of 140 OS components from two pre-existing OSes for four real hardware platforms. We also developed several optimization methods for OS-related assembly synthesis to improve scalability.
   The effectiveness of our languages and ability to synthesize code for all 140 specifications is evidence of the feasibility of program synthesis for machine-dependent OS code. However, many research challenges remain; we also discuss the benefits and limitations of our synthesis-based approach to automated OS porting.
C1 [Hu, Jingmei; Lu, Eric; Holland, David A.; Kawaguchi, Ming; Chong, Stephen] Harvard Univ, John A Paulson Sch Engn & Appl Sci, 150 Western Ave, Boston, MA 02134 USA.
   [Seltzer, Margo] Univ British Columbia, 2366 Main Mall, Vancouver, BC V6S 0K3, Canada.
C3 Harvard University; University of British Columbia
RP Hu, JM (corresponding author), Harvard Univ, John A Paulson Sch Engn & Appl Sci, 150 Western Ave, Boston, MA 02134 USA.
OI Kawaguchi, Ming/0000-0001-5999-2882; Seltzer, Margo/0000-0002-2165-4658;
   Lu, Eric/0000-0003-1228-9887; Chong, Stephen/0000-0002-6734-5383; Hu,
   Jingmei/0000-0002-4434-5057
FU U.S. Air Force; DARPA [FA8750-16-C-0045]; Natural Sciences and
   Engineering Research Council of Canada (NSERC)
FX This article is based on work supported by the U.S. Air Force and DARPA
   under contract FA8750-16-C-0045. The views, opinions, or findings
   expressed are those of the authors and should not be interpreted as
   representing the official views or policies of the U.S. Department of
   Defense or the U.S. Government. We acknowledge the support of the
   Natural Sciences and Engineering Research Council of Canada (NSERC).
   Nous remercions le Conseil de recherches en sciences naturelles et en
   genie du Canada (CRSNG) de son soutien.
CR Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2011, P 19 ACM SIGSOFT S 1
   Armstrong A., 2019, Proceedings of the 46th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages POPL'19
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   Barman S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P339
   Baumann A, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P29
   Berger ED, 2006, ACM SIGPLAN NOTICES, V41, P158, DOI 10.1145/1133981.1134000
   Bershad B. N., 1995, Operating Systems Review, V29, P74, DOI 10.1145/202453.202472
   Bond B, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P917
   Bornholt J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276519
   Bornholt J, 2017, ACM SIGPLAN NOTICES, V52, P467, DOI [10.1145/3140587.3062353, 10.1145/3062341.3062353]
   Bourgeat T, 2021, Arxiv, DOI arXiv:2104.00762
   Brotherston J, 2017, LECT NOTES ARTIF INT, V10395, P472, DOI 10.1007/978-3-319-63046-5_29
   Brummayer R, 2009, LECT NOTES COMPUT SC, V5505, P174, DOI 10.1007/978-3-642-00768-2_16
   Chen WT, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1093
   Chu S., 2017, P CIDR
   Custer H., 1992, Microcomputer Applications
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   Dutertre B, 2014, LECT NOTES COMPUT SC, V8559, P737, DOI 10.1007/978-3-319-08867-9_49
   Endo Y, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P185, DOI 10.1145/248155.238775
   Engler D. R., 1995, Operating Systems Review, V29, P251, DOI 10.1145/224057.224076
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Ghavamnia S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1749
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hennessy JL, 2019, COMMUN ACM, V62, P48, DOI 10.1145/3282307
   Hill MD, 2019, IEEE MICRO, V39, P9, DOI 10.1109/MM.2019.2897677
   Holland D. A., 2002, SIGCSE Bulletin, V34, P111, DOI 10.1145/563517.563383
   Holland David A., 2020, THESIS CAMBRIDGE MA
   Hu JM, 2019, PLOS'19: PROCEEDINGS OF THE 10TH WORKSHOP ON PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P67, DOI 10.1145/3365137.3365401
   Jingmei Hu, 2021, UIST '21: The 34th Annual ACM Symposium on User Interface Software and Technology, P134, DOI 10.1145/3472749.3474740
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Li Zhenmin, 2004, P 6 C OPERATING SYST, V6
   Liang C, 2009, THEOR COMPUT SCI, V410, P4747, DOI 10.1016/j.tcs.2009.07.041
   Liedtke J., 1995, Operating Systems Review, V29, P237, DOI 10.1145/224057.224075
   Love R., 2010, Linux Kernel Develoment, VThird
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
   McKusick Marshall Kirk, 1996, DESIGN IMPLEMENTATIO
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Mosberger D, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P153, DOI 10.1145/248155.238771
   Mutlu O, 2020, IEEE T COMPUT AID D, V39, P1555, DOI 10.1109/TCAD.2019.2915318
   Narayan R., 2007, Linux assemblers: A comparison of gas and nasm
   Nelson L, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P225, DOI 10.1145/3341301.3359641
   Phothilimthana PM, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P261, DOI 10.1145/2892208.2892233
   Polikarpova N., 2019, P 46 ANN ACM SIGPLAN
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Pu C., 1988, Computing Systems, V1, P11
   Rashid R., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P31
   Reid A, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P161
   RISC-V, 2019, ISA FORM SPEC PUBL R
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Ryzhyk L, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P73
   Ryzhyk Leonid., 2014, 11 USENIX S OPERATIN, P661
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Shinde S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P523
   Shoshitaishvili Y, 2016, P IEEE S SECUR PRIV, P138, DOI 10.1109/SP.2016.17
   Singh R, 2015, LECT NOTES COMPUT SC, V9206, P398, DOI 10.1007/978-3-319-21690-4_23
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Song D, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2541
   Spier Michale J., 1973, P 4 ACM S OPERATING, P8, DOI [10.1145/800009.808043, DOI 10.1145/800009.808043]
   Srinivasan V, 2016, ACM SIGPLAN NOTICES, V51, P165, DOI 10.1145/3022671.2984006
   Srinivasan V, 2015, ACM SIGPLAN NOTICES, V50, P596, DOI [10.1145/2813885.2737960, 10.1145/2737924.2737960]
   Srinivasan Venkatesh, 2017, P 32 ANN ACM C OBJEC, P1
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Van Geffen J, 2020, LECT NOTES COMPUT SC, V12225, P564, DOI 10.1007/978-3-030-53291-8_29
   Wang C, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3268916
NR 72
TC 0
Z9 0
U1 1
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2023
VL 45
IS 1
AR 2
DI 10.1145/3563943
PG 70
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9V9QK
UT WOS:000948718900002
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Shi, KS
   Bieber, D
   Singh, R
AF Shi, Kensen
   Bieber, David
   Singh, Rishabh
TI TF-Coder: Program Synthesis for Tensor Manipulations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Program synthesis; programming by example; PBE; TensorFlow; tensor
   manipulation; tensor transformation
AB The success and popularity of deep learning is on the rise, partially due to powerful deep learning frameworks such as TensorFlow and PyTorch, which make it easier to develop deep learning models. However, these libraries also come with steep learning curves, since programming in these frameworks is quite different from traditional imperative programming with explicit loops and conditionals. In this work, we present a tool called TF-Coder for programming by example in TensorFlow. TF-Coder uses a bottom-up weighted enumerative search, with value-based pruning of equivalent expressions and flexible type- and value-based filtering to ensure that expressions adhere to various requirements imposed by the TensorFlow library. We train models to predict TensorFlow operations from features of the input and output tensors and natural language descriptions of tasks to prioritize relevant operations during search. TF-Coder solves 63 of 70 real-world tasks within 5 minutes, sometimes finding simpler solutions in less time compared to experienced human programmers.
C1 [Shi, Kensen; Bieber, David; Singh, Rishabh] Google Brain, Mountain View, CA 94043 USA.
C3 Google Incorporated
RP Shi, KS (corresponding author), Google Brain, Mountain View, CA 94043 USA.
EM kshi@google.com; dbieber@google.com; rising@google.com
OI Bieber, David/0000-0002-1914-8246; Shi, Kensen/0000-0001-7140-7869
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Allamams M, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!' 19), P143, DOI 10.1145/3359591.3359735
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2015, NATURE, DOI [DOI 10.1038/NATURE14539, 10.1038/nature14539]
   [Anonymous], 2011, P 19 ACM SIGSOFT S 1
   [Anonymous], 2012, ABS12115063 CORR
   Barke S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428295
   Bavishi R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360594
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cambronero JP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360601
   Cheng T, 2016, AIDS BEHAV, V20, P377, DOI 10.1007/s10461-015-1101-3
   Devlin J, 2017, PR MACH LEARN RES, V70
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   FLEMING PJ, 1986, COMMUN ACM, V29, P218, DOI 10.1145/5666.5673
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hardy Steven, 1974, P 1 SUMMER C ARTIFIC, P50, DOI [10.5555/3015486.3015491, DOI 10.5555/3015486.3015491]
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kingma D. P., 2014, arXiv
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Menon Aditya Krishna, 2013, INT C MACHINE LEARNI, P187
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Parisotto Emilio, 2017, P 5 INT C LEARN REPR
   Paszke A., 2017, AUTOMATIC DIFFERENTI
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Seide F, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P2135, DOI 10.1145/2939672.2945397
   Shaw David E., 1975, ADV PAPERS 4 INT JOI
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Shin R., 2019, INT C LEARN REPR
   Singh R, 2016, PROC VLDB ENDOW, V9, P816, DOI 10.14778/2977797.2977807
   Singh R, 2015, LECT NOTES COMPUT SC, V9206, P398, DOI 10.1007/978-3-319-21690-4_23
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   SPARCKJONES K, 1972, J DOC, V28, P11, DOI 10.1108/eb026526
   Thornton C, 2013, 19TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'13), P847, DOI 10.1145/2487575.2487629
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   van Rijsbergen Keith., 1979, Information Retrieval, V2nd
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Ye X, 2020, T ASSOC COMPUT LING, V8, P679, DOI 10.1162/tacl_a_00339
   Zoph B., 2017, ICLR, P1, DOI DOI 10.1109/ICAIIC48513.2020.9065031
NR 46
TC 4
Z9 5
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2022
VL 44
IS 2
AR 10
DI 10.1145/3517034
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3B6GO
UT WOS:000828037100005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Pearce, DJ
AF Pearce, David J.
TI A Lightweight Formalism for Reference Lifetimes and Borrowing in Rust
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Rust; ownership; type theory; model checking
ID MEMORY MANAGEMENT; TYPESTATE; SYSTEM
AB Rust is a relatively new programming language that has gained significant traction since its v1.0 release in 2015. Rust aims to be a systems language that competes with C/C++. A claimed advantage of Rust is a strong focus on memory safety without garbage collection. This is primarily achieved through two concepts, namely, reference lifetimes and borrowing. Both of these are well-known ideas stemming from the literature on region-based memory management and linearity/uniqueness. Rust brings both of these ideas together to form a coherent programming model. Furthermore, Rust has a strong focus on stack-allocated data and, like C/C++ but unlike Java, permits references to local variables.
   Type checking in Rust can be viewed as a two-phase process: First, a traditional type checker operates in a flow-insensitive fashion; second, a borrow checker enforces an ownership invariant using a flow-sensitive analysis. In this article, we present a lightweight formalism that captures these two phases using a flow-sensitive type system that enforces "type and borrow safety." In particular, programs that are type and borrow safe will not attempt to dereference dangling pointers. Our calculus core captures many aspects of Rust, including copy- and move-semantics, mutable borrowing, reborrowing, partial moves, and lifetimes. In particular, it remains sufficiently lightweight to be easily digested and understood and, we argue, still captures the salient aspects of reference lifetimes and borrowing. Furthermore, extensions to the core can easily add more complex features (e.g., control-flow, tuples, method invocation). We provide a soundness proof to verify our key claims of the calculus. We also provide a reference implementation in Java with which we have model checked our calculus using over 500B input programs. We have also fuzz tested the Rust compiler using our calculus against 2B programs and, to date, found one confirmed compiler bug and several other possible issues.
C1 [Pearce, David J.] Victoria Univ Wellington, POB 600, Wellington 6140, New Zealand.
C3 Victoria University Wellington
RP Pearce, DJ (corresponding author), Victoria Univ Wellington, POB 600, Wellington 6140, New Zealand.
EM david.pearce@ecs.vuw.ac.nz
OI Pearce, David/0000-0003-4535-9677
CR AIKEN A, 1995, P ACM SIGPLAN C PROG, P174
   Akerblom Beatrice, 2008, P C TECHN OBJ OR LAN
   Aldrich J, 2002, ACM SIGPLAN NOTICES, V37, P311, DOI 10.1145/583854.582448
   Almeida PauloSergio., 1997, P 11 EUROPEAN C OBJE, P32
   Anderson B, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P81, DOI 10.1145/2889160.2889229
   Andreou C., 2006, Proceedings of the 12th AIAA/CEAS Aeroacoustics Conference, AIAA Paper 2006-2515, P1
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   [Anonymous], 1990, IFIP TC 2 Working Conference on Programming Concepts and Methods, Sea of Galilee, Israel
   [Anonymous], 1998, 25 YEARS CONSTRUCTIV
   ASTRAUSKAS V., 2019, P ACM C OBJ OR PROGR
   Balabonski T, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2837022
   Balasubramanian A, 2017, OPER SYST REV, V51, P94, DOI 10.1145/3139645.3139660
   Banerjee A., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P88, DOI 10.1109/LICS.1999.782594
   Baranowski M, 2018, LECT NOTES COMPUT SC, V11138, P528, DOI 10.1007/978-3-030-01090-4_32
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Beebee W.S., 2001, EMSOFT 01, P289
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bierman G.M., 2003, ELECT NOTES TCS, V82, P1
   Blandy Jim, 2018, PROGRAMMING RUST
   Bobot F., 2011, P WORKSH INT VER LAN
   Bocchino RL, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1639949.1640097
   Bollella Greg., 2000, REAL TIME SPECIFICAT
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   BOYAPATI C, 2001, ACM C OBJ OR PROGR S, P56
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Boyland J., 2003, LNCS, V2694, P55, DOI [10.1007/3-540-44898-54, DOI 10.1007/3-540-44898-54]
   Boyland John, 2003, P WORKSH AL CAP OWN, P42
   Caballero Juan, 2012, P 2012 INT S SOFTW T, P133
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   CALCAGNO C, 2001, P 28 ACM SIGPLAN SIG, P155
   Cameron N, 2010, ACM SIGPLAN NOTICES, V45, P618, DOI 10.1145/1932682.1869510
   Chandra K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158150
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   CHIN WN, 2004, P ACM C PROGR LANG D, P243
   Christiansen Morten V., 1998, SAFE REGION BASED ME
   Claessen K, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000143
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   CLARKE D, 2002, P ACM C OBJ OR PROGR, P292
   Clarke Dave, 2012, ALIASING OBJECT ORIE, V7850
   Clarke DavidG., 1998, Proceedings of the 13th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications, OOPSLA'98, P48
   Dang Hoang-Hai, 2020, P ACM S PRINC PROGR
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dewey K, 2015, IEEE INT CONF AUTOM, P482, DOI 10.1109/ASE.2015.65
   Donchev I, 2015, INT J ADV COMPUT SC, V6, P59
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Dymnikov C, 2013, IEEE AUS SOFT ENGR, P181, DOI 10.1109/ASWEC.2013.30
   Elsman M, 2003, ACM SIGPLAN NOTICES, V38, P123, DOI 10.1145/640136.604190
   FAHNDRICH M, 2002, PLDI 02, P13
   Feist J, 2014, J COMPUT VIROL HACKI, V10, P211, DOI 10.1007/s11416-014-0203-1
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Gerakios P, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P15
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   GROSSMAN D, 2003, P ACM SIGPLAN INT WO, P13
   HALLENBERG N, 2002, P ACM C PROGR LANG D, P141
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   Hamza H, 2012, SCI COMPUT PROGRAM, V77, P644, DOI 10.1016/j.scico.2012.01.002
   Harrington D, 2006, THEOR COMPUT SCI, V354, P24, DOI 10.1016/j.tcs.2005.11.006
   Helsen Simon, 2000, ELECT NOTES THEORETI, V41, P1
   Henglein Fritz., 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming, P175, DOI [10.1145/773184.773203, DOI 10.1145/773184.773203]
   Hicks Michael, 2004, P 4 INT S MEM MAN VA, P73, DOI DOI 10.1145/1029873.1029883
   HOGG J, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P271, DOI 10.1145/118014.117975
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jacek Nicholas, P ACM PROGR LANG DES, P584
   Jackson D, 1996, IEEE T SOFTWARE ENG, V22, P484, DOI 10.1145/226295.226322
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung Ralf, 2020, P ACM S PRINC PROGR
   Kaiser Jan-Oliver, 2017, P ECOOP, V74
   Klein C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P285
   KNUTH D. E., 1981, Addison-Wesley Series in Computer Science and Information Processing, V2
   Kobayashi N., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P29, DOI 10.1145/292540.292546
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   Levy A, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P234, DOI 10.1145/3132747.3132786
   Levy A, 2017, PROCEEDINGS OF THE 8TH ASIA-PACIFIC WORKSHOP ON SYSTEMS (APSYS '17), DOI 10.1145/3124680.3124717
   Levy Amit, 2015, P 8 WORKSH PROGR LAN, P21, DOI [DOI 10.1145/2818302, 10.1145/2818302.2818306, DOI 10.1145/2818302.2818306]
   Lhoták O, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1926385.1926389
   Li Paley, 2012, P WORKSH FDN OBJ OR
   LINDNER M, 2019, P INT C IND INF INDI, V1, P432
   Lindner M, 2018, IEEE INTL CONF IND I, P108, DOI 10.1109/INDIN.2018.8471992
   LU Y, 2006, P 20 EUR C OBJ OR PR, P99
   Matsakis Nicholas D., 2009, Languages and Compilers for Parallel Computing. 22nd International Workshop, LCPC 2009, Revised Selected Papers, P203
   Matsakis ND, 2010, ACM SIGPLAN NOTICES, V45, P634, DOI 10.1145/1932682.1869511
   Matsakis Nicholas D., 2012, P WORKSH HOT TOP PAR
   Matsakis Nicholas D., 2010, P WORKSH HOT TOP PAR
   Matsushita Y, 2020, LECT NOTES COMPUT SC, V12075, P484, DOI 10.1007/978-3-030-44914-8_18
   Memarian K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290380
   Meyers Scott, 1994, EFFECTIVE C
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Muller P., 2002, LNCS, V2262
   Narayanan V, 2019, PROCEEDINGS OF THE WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS (HOTOS '19), P37, DOI 10.1145/3317550.3321449
   Nielson F., 1999, Principles of Program Analysis
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   Noble J., 1999, Proceedings Technology of Object-Oriented Languages and Systems. TOOLS 32, P176, DOI 10.1109/TOOLS.1999.809424
   OConnor Liam, 2016, P ACM INT C FUNCT PR
   Paskevich Andrei, 2016, PRAGMATIC TYPE SYSTE
   Pearce D. J., 2005, THESIS IMPERIAL COLL
   Phan Q, 2007, LECT NOTES COMPUT SC, V4670, P317, DOI 10.1007/978-3-540-74610-2_22
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Potanin Alex, 2005, P WORKSH JAV TECHN R
   Potanin Alex, 2006, P ACM C OBJ OR PROGR
   Qian Feng., 2002, ISMM 02, P127
   Qin BQ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P763, DOI 10.1145/3385412.3386036
   Reed E., 2015, Tech. Rep. UW-CSE-15- 03-02
   Roberson M, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P493
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Rust Team, The Rustonomicon -- The Dark Arts of Advanced and Unsafe Rust Programming
   Rust Team, Rust Programming Language
   Rust Team, RUST HOM
   Serebryany K., 2012, USENIX ATC 2012, P309
   Servetto Marco, 2013, WORKSHOP DETERMINISM, P107
   Snir, 2009, P WORKSH HOT TOP PAR
   Srinivasan S, 2008, LECT NOTES COMPUT SC, V5142, P104, DOI 10.1007/978-3-540-70592-5_6
   Stepanov E, 2015, INT SYM CODE GENER, P46, DOI 10.1109/CGO.2015.7054186
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   STROM RE, 1993, IEEE T SOFTWARE ENG, V19, P478, DOI 10.1109/32.232013
   Svoboda D, 2014, P ANN HICSS, P5090, DOI 10.1109/HICSS.2014.625
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   TOMAN J, 2015, P C AUT SOFTW ENG AS, P75
   VAKILIAN M, 2009, P 24 IEEE ACM C AUT, P421
   WALKER D, 2001, P INT C FUNCT PROGR, P181
   Wang F, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P44, DOI 10.1109/TASE.2018.00014
   Weiss Aaron, 2019, ARXIVCSPL190300982
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zhao T, 2004, REAL TIM SYST SYMP P, P241, DOI 10.1109/REAL.2004.51
   ZIBIN Y, 2010, P ACM INT C OBJ OR P, P598
NR 136
TC 10
Z9 10
U1 5
U2 9
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2021
VL 43
IS 1
AR 3
DI 10.1145/3443420
PG 73
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RW3AR
UT WOS:000646399300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Chatterjee, K
   Goharshady, AK
   Goyal, P
   Ibsen-Jensen, R
   Pavlogiannis, A
AF Chatterjee, Krishnendu
   Goharshady, Amir Kafshdar
   Goyal, Prateesh
   Ibsen-Jensen, Rasmus
   Pavlogiannis, Andreas
TI Faster Algorithms for Dynamic Algebraic Queries in Basic RSMs with
   Constant Treewidth
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Interprocedural analysis; constant treewidth graphs; dataflow analysis;
   reachability and shortest path; reachability and distance oracles
AB Interprocedural analysis is at the heart of numerous applications in programming languages, such as alias analysis, constant propagation, and so on. Recursive state machines (RSMs) are standard models for interprocedural analysis. We consider a general framework with RSMs where the transitions are labeled from a semiring and path properties are algebraic with semiring operations. RSMs with algebraic path properties can model interprocedural dataflow analysis problems, the shortest path problem, the most probable path problem, and so on. The traditional algorithms for interprocedural analysis focus on path properties where the starting point is fixed as the entry point of a specific method. In this work, we consider possible multiple queries as required in many applications such as in alias analysis. The study of multiple queries allows us to bring in an important algorithmic distinction between the resource usage of the one-time preprocessing vs for each individual query. The second aspect we consider is that the control flow graphs for most programs have constant treewidth.
   Our main contributions are simple and implementable algorithms that support multiple queries for algebraic path properties for RSMs that have constant treewidth. Our theoretical results show that our algorithms have small additional one-time preprocessing but can answer subsequent queries significantly faster as compared to the current algorithmic solutions for interprocedural dataflow analysis. We have also implemented our algorithms and evaluated their performance for performing on-demand interprocedural dataflow analysis on various domains, such as for live variable analysis and reaching definitions, on a standard benchmark set. Our experimental results align with our theoretical statements and show that after a lightweight preprocessing, on-demand queries are answered much faster than the standard existing algorithmic approaches.
C1 [Chatterjee, Krishnendu; Goharshady, Amir Kafshdar] IST Austria, Klosterneuburg, Austria.
   [Goyal, Prateesh] MIT, 32 Vassar St, Cambridge, MA 02139 USA.
   [Ibsen-Jensen, Rasmus] Univ Liverpool, Fdn Bldg,Brownlow Hill, Liverpool L69 7ZX, Merseyside, England.
   [Pavlogiannis, Andreas] Aarhus Univ, Aabogade 34, DK-8200 Aarhus, Denmark.
   [Chatterjee, Krishnendu; Goharshady, Amir Kafshdar] IST Austria Inst Sci & Technol Austria, Campus 1, A-3400 Klosterneuburg, Austria.
C3 Institute of Science & Technology - Austria; Massachusetts Institute of
   Technology (MIT); University of Liverpool; Aarhus University; Institute
   of Science & Technology - Austria
RP Chatterjee, K (corresponding author), IST Austria, Klosterneuburg, Austria.; Chatterjee, K (corresponding author), IST Austria Inst Sci & Technol Austria, Campus 1, A-3400 Klosterneuburg, Austria.
EM krishnendu.chatterjee@ist.ac.at; amir.goharshady@ist.ac.at;
   prateesh@mit.edu; R.Ibsen-Jensen@liverpool.ac.uk; pavlogiannis@cs.au.dk
RI ; Pavlogiannis, Andreas/X-6831-2018
OI Kafshdar Goharshady, Amir/0000-0003-1702-6584; Pavlogiannis,
   Andreas/0000-0002-8943-0722
FU Austrian Science Fund (FWF) [P23499-N23]; FWF NFN Grant [S11407N23]; ERC
   Start grant [279307]; Austrian Science Fund (FWF) Schrodinger grant
   [J-4220]; Facebook PhD Fellowship Program; DOC Fellowship of the
   Austrian Academy of Sciences (OAW) [24956]
FX The research was partly supported by Austrian Science Fund (FWF) Grant
   No. P23499-N23, FWF NFN Grant No. S11407N23 (RiSE/SHiNE), ERC Start
   grant (279307: Graph Games), the Austrian Science Fund (FWF) Schrodinger
   grant J-4220, the Facebook PhD Fellowship Program, and DOC Fellowship
   No. 24956 of the Austrian Academy of Sciences (OAW).
CR Alon N., 1987, TECHNICAL REPORT
   Alur R, 2006, THEOR COMPUT SCI, V354, P230, DOI 10.1016/j.tcs.2005.11.017
   Alur R., 2005, ACM T PROGRAM LANG S
   [Anonymous], 2015, Principles of program analysis
   Appel A.W., 2002, MODERN COMPILER IMPL, V2nd
   ARNBORG S, 1989, DISCRETE APPL MATH, V23, P11, DOI 10.1016/0166-218X(89)90031-0
   Babich Wayne A., 1978, ACTA INFORM, V10, P3
   Bebenita M, 2010, ACM SIGPLAN NOTICES, V45, P708, DOI 10.1145/1932682.1869517
   Bender Michael A., 2000, P THEOR INF LATIN 00
   Bern M. W., 1987, Journal of Algorithms, V8, P216, DOI 10.1016/0196-6774(87)90039-3
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden Eric, 2012, P SOAP 12
   Bodlaender H. L., 1993, Acta Cybernetica, V11, P1
   Bodlaender H. L., 2005, LNCS, V3381
   Bodlaender Hans L., 1988, P ICALP 88
   Bodlaender Hans L., 1994, GRAPH THEORETIC CONC
   Bodlaender HL, 1998, THEOR COMPUT SCI, V209, P1, DOI 10.1016/S0304-3975(97)00228-4
   Bodlaender HL, 1998, SIAM J COMPUT, V27, P1725, DOI 10.1137/S0097539795289859
   Bodlaender HL, 1996, SIAM J COMPUT, V25, P1305, DOI 10.1137/S0097539793251219
   Burgstaller B, 2004, LECT NOTES COMPUT SC, V3063, P78
   Callahan David, 1986, P CC 86
   Chatterjee K., 2013, P CAV 13
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10482, P59, DOI 10.1007/978-3-319-68167-2_4
   Chatterjee K, 2015, ACM SIGPLAN NOTICES, V50, P97, DOI [10.1145/2676726.2676979, 10.1145/2775051.2676979]
   Chatterjee Krishnendu, 2012, P LICS 12
   Chatterjee Krishnendu, 2016, P 24 ANN EUR S ALG E
   Chatterjee Krishnendu, 2015, P POPL 15
   Chatterjee N, 2019, PROCEEDINGS OF THE 13TH IEEE/ACM INTERNATIONAL SYMPOSIUM ON NETWORKS-ON-CHIP (NOCS'19), DOI 10.1145/3313231.3352371
   Chaudhuri S, 2000, ALGORITHMICA, V27, P212, DOI 10.1007/s004530010016
   Chaudhuri Swarat, 2008, P POPL 08
   Chen T, 2004, LECT NOTES COMPUT SC, V2985, P57
   Clarke T.A., 2018, HDB MODEL CHECKING, DOI DOI 10.1007/978-3-319-10575-8
   Cooper Keith, 2011, Engineering a compiler, Vsecond
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   Courcelle B., 1990, HDB THEORETICAL COMP, VB
   Cousot P., 1977, P IFIP 77 FORM DESCR
   Dijkstra E. W., 1959, NUMER MATH, V1, P269, DOI [10.1007/BF01386390, DOI 10.1007/BF01386390]
   Duesterwald Evelyn, 1995, P POPL 95
   Elberfeld M., 2010, P FOCS 10
   Flückiger O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158137
   Giegerich Robert, 1981, P 3 C EUR COOP INF E
   Grove Dan, 1993, P PLDI 93
   Gustedt J, 2002, LECT NOTES COMPUT SC, V2409, P86
   Hagerup T., 2000, ALGORITHMICA
   Halin R., 1976, Journal of Geometry, V8, P171
   HAREL D, 1984, SIAM J COMPUT, V13, P338, DOI 10.1137/0213024
   Horwitz S., 1995, SIGSOFT Software Engineering Notes, V20, P104, DOI 10.1145/222132.222146
   JetBrains ReSharper, 2019, COD INSP UN LOC VAR
   Knoop J, 1996, ACM T PROGR LANG SYS, V18, P268, DOI 10.1145/229542.229545
   Knoop Jens, 1992, P CC 92
   Krause PK, 2020, DISCRETE APPL MATH, V278, P136, DOI 10.1016/j.dam.2019.01.027
   Lacki J, 2013, ACM T ALGORITHMS, V9, DOI 10.1145/2483699.2483707
   Landi William, 1991, P POPL 91
   Lin Jin, 2004, ACM T ARCHIT CODE OP, V1, P247, DOI [10.1145/1022969.1022970., DOI 10.1145/1022969.1022970]
   Naeem Nomair A., 2008, P OOPSLA 08
   Naeem Nomair A., 2010, P CC 10
   Obdrzalek Jan, 2003, P CAV 03
   Reed Bruce A., 1992, P STOC 92
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps Thomas, 1997, P ILPS 97
   Reps Thomas, 2007, P FDN SOFTW TECHN TH
   Reps Thomas., 1995, Demand interprocedural program analysis using logic databases, P163
   ROBERTSON N, 1984, J COMB THEORY B, V36, P49, DOI 10.1016/0095-8956(84)90013-3
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Schwoon S., 2002, THESIS TU MUNICH GER
   Sridharan Manu, 2005, P OOPSLA 05
   Thorup M, 1998, INFORM COMPUT, V142, P159, DOI 10.1006/inco.1997.2697
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Wang JJ, 2014, MOBISYS'14: PROCEEDINGS OF THE 12TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES, P14, DOI 10.1145/2594368.2594384
   Warren Genevieve, 2016, CA1804 REMOVE UNUSED
   Yuan Xin, 1997, PARALLEL PROCESS LET, V7, P359
   Zadeck Frank Kenneth, 1984, P SIGPLAN 84
NR 73
TC 7
Z9 7
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2019
VL 41
IS 4
AR 23
DI 10.1145/3363525
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NG6RI
UT WOS:000564108400004
OA Green Published
DA 2024-07-18
ER

PT J
AU Jacek, N
   Chiu, MC
   Marlin, BM
   Moss, JEB
AF Jacek, Nicholas
   Chiu, Meng-Chieh
   Marlin, Benjamin M.
   Moss, J. Eliot B.
TI Optimal Choice of When to Garbage Collect
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Automatic storage management; garbage collection; optimal schedules
AB We consider the ultimate limits of program-specific garbage collector (GC) performance for real programs. We first characterize the GC schedule optimization problem. Based on this characterization, we develop a linear-time dynamic programming solution that, given a program run and heap size, computes an optimal schedule of collections for a non-generational collector. Using an analysis of a heap object graph of the program, we compute a property of heap objects that we call their pre-birth time. This information enables us to extend the non-generational GC schedule problem to the generational GC case in a way that also admits a dynamic programming solution with cost quadratic in the length of the trace (number of objects allocated). This improves our previously reported approximately optimal result. We further extend the two-generation dynamic program to any number of generations, allowing other generalizations as well. Our experimental results for two generations on traces from Java programs of the DaCapo benchmark suite show that there is considerable promise to reduce garbage collection costs for some programs by developing program-specific collection policies. For a given space budget, optimal schedules often obtain modest but useful time savings, and for a given time budget, optimal schedules can obtain considerable space savings.
C1 [Jacek, Nicholas; Chiu, Meng-Chieh; Marlin, Benjamin M.; Moss, J. Eliot B.] Univ Massachusetts, 140 Governors Dr, Amherst, MA 01003 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst
RP Jacek, N (corresponding author), Univ Massachusetts, 140 Governors Dr, Amherst, MA 01003 USA.
EM njacek@cs.umass.edu; joechiu@cs.umass.edu; marlin@cs.umass.edu;
   moss@cs.umass.edu
OI Moss, Eliot/0000-0001-6637-3641; Marlin, Benjamin/0000-0002-2626-3410
FU National Science Foundation [CCF-1320498]
FX This work is supported by the National Science Foundation under grant
   CCF-1320498.
CR APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Bendersky A, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362392
   Blackburn SM, 2008, COMMUN ACM, V51, P83, DOI 10.1145/1378704.1378723
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Boehm HJ, 2004, ACM SIGPLAN NOTICES, V39, P210, DOI 10.1145/982962.964019
   HAYES B, 1991, SIGPLAN NOTICES, V26, P33, DOI 10.1145/118014.117957
   Hertz M, 2006, ACM T PROGR LANG SYS, V28, P476, DOI 10.1145/1133651.1133654
   Jacek N, 2016, ACM SIGPLAN NOTICES, V51, P584, DOI [10.1145/2980983.2908120, 10.1145/2908080.2908120]
   Li PC, 2014, ACM SIGPLAN NOTICES, V49, P71, DOI [10.1145/2602988.2602997, 10.1145/2775049.2602997]
   Ricci NP, 2013, PROCEEDINGS OF THE ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '13), P109
   Ricci Nathan P., 2011, P 9 INT C PRINC PRAC, P39
   ROBSON JM, 1980, INFORM PROCESS LETT, V11, P119, DOI 10.1016/0020-0190(80)90124-6
   ROBSON JM, 1974, J ACM, V21, P491, DOI 10.1145/321832.321846
   ROBSON JM, 1971, J ACM, V18, P416, DOI 10.1145/321650.321658
NR 14
TC 2
Z9 2
U1 0
U2 13
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2019
VL 41
IS 1
AR 3
DI 10.1145/3282438
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HN7NB
UT WOS:000460376400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Brockschmidt, M
   Emmes, F
   Falke, S
   Fuhs, C
   Giesl, J
AF Brockschmidt, Marc
   Emmes, Fabian
   Falke, Stephan
   Fuhs, Carsten
   Giesl, Jurgen
TI Analyzing Runtime and Size Complexity of Integer Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Verification; Runtime complexity; automated complexity analysis;
   integer programs
ID COST-ANALYSIS
AB We present a modular approach to automatic complexity analysis of integer programs. Based on a novel alternation between finding symbolic time bounds for program parts and using these to infer bounds on the absolute values of program variables, we can restrict each analysis step to a small part of the program while maintaining a high level of precision. The bounds computed by our method are polynomial or exponential expressions that depend on the absolute values of input parameters.
   We show how to extend our approach to arbitrary cost measures, allowing the use of our technique to find upper bounds for other expended resources, such as network requests or memory consumption. Our contributions are implemented in the open-source tool KoAT, and extensive experiments show the performance and power of our implementation in comparison with other tools.
C1 [Brockschmidt, Marc] Microsoft Res, 21 Stn Rd, Cambridge CB1 2FB, England.
   [Emmes, Fabian; Giesl, Jurgen] Rhein Westfal TH Aachen, LuFG Informat 2, Ahornstr 55, D-52074 Aachen, Germany.
   [Falke, Stephan] Aicas GmbH, Haidund Neu Str 18, D-76131 Karlsruhe, Germany.
   [Fuhs, Carsten] Birkbeck Univ London, Dept Comp Sci & Informat Syst, Malet St, London WC1E 7HX, England.
C3 Microsoft; RWTH Aachen University; University of London; Birkbeck
   University London
RP Brockschmidt, M (corresponding author), Microsoft Res, 21 Stn Rd, Cambridge CB1 2FB, England.
EM mabrocks@microsoft.com; emmes@informatik.rwth-aachen.de;
   stephan.falke@gmail.com; carsten@dcs.bbk.ac.uk;
   giesl@informatik.rwth-aachen.de
OI Giesl, Jurgen/0000-0003-0283-8520
FU DFG [GI 274/6-1]; Air Force Research Laboratory (AFRL); "Concept for the
   Future" of Karlsruhe Institute of Technology; EPSRC
FX This work was supported by DFG grant GI 274/6-1, the Air Force Research
   Laboratory (AFRL), the "Concept for the Future" of Karlsruhe Institute
   of Technology within the framework of the German Excellence Initiative,
   and the EPSRC.
CR Albert E., 2011, P 20 ACM SIGPLAN WOR, P73
   Albert E, 2008, LECT NOTES COMPUT SC, V5051, P2, DOI 10.1007/978-3-540-68863-1_2
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   Alonso-Blas Diego Esteban, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P319, DOI 10.1007/978-3-319-02444-8_23
   Avanzini Martin, 2013, LIPICS, V21, P55
   Bagnara R, 2012, INFORM COMPUT, V215, P47, DOI 10.1016/j.ic.2012.03.003
   Ben-Amram AM, 2008, LECT NOTES COMPUT SC, V5028, P67, DOI 10.1007/978-3-540-69407-6_7
   Ben-Amram AM, 2013, ACM SIGPLAN NOTICES, V48, P51, DOI 10.1145/2480359.2429078
   Bjorner Nikolaj, 2014, EPTCS, V169
   Blanc R, 2010, LECT NOTES ARTIF INT, V6355, P103, DOI 10.1007/978-3-642-17511-4_7
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Brockschmidt Marc, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P413, DOI 10.1007/978-3-642-39799-8_28
   Brockschmidt Marc, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P105, DOI 10.1007/978-3-642-31424-7_13
   Brockschmidt M., 2014, TOOLS ALG CONSTR AN, V8413, P140, DOI DOI 10.1007/978-3-642-54862-8_10
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Debray S, 1997, LOGIC PROGRAMM, P291
   DEBRAY SK, 1993, ACM T PROGR LANG SYS, V15, P826, DOI 10.1145/161468.161472
   Falke S, 2011, LEIBNIZ INT PR INFOR, V10, P41, DOI 10.4230/LIPIcs.RTA.2011.41
   Flores-Montoya Antonio, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P275, DOI 10.1007/978-3-319-12736-1_15
   Fuhs C, 2007, LECT NOTES COMPUT SC, V4501, P340
   Fuhs C, 2009, LECT NOTES COMPUT SC, V5595, P32, DOI 10.1007/978-3-642-02348-4_3
   Giesl J., 2012, PPDP 2012, P1, DOI [DOI 10.1145/2370776.2370778, 10.1145/2370776.2370778]
   Giesl J, 2006, J AUTOM REASONING, V37, P155, DOI 10.1007/s10817-006-9057-7
   Giesl J, 2014, LECT NOTES ARTIF INT, V8562, P184, DOI 10.1007/978-3-319-08587-6_13
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Harris WR, 2010, LECT NOTES COMPUT SC, V6337, P304, DOI 10.1007/978-3-642-15769-1_19
   Heizmann M, 2014, LECT NOTES COMPUT SC, V8559, P797, DOI 10.1007/978-3-319-08867-9_53
   Hermenegildo MV, 2012, THEOR PRACT LOG PROG, V12, P219, DOI 10.1017/S1471068411000457
   Hoffmann J, 2014, LECT NOTES COMPUT SC, V8475, P152, DOI 10.1007/978-3-319-07151-0_10
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hojjat Hossein, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P247, DOI 10.1007/978-3-642-32759-9_21
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Knoop J, 2012, LECT NOTES COMPUT SC, V7180, P435, DOI 10.1007/978-3-642-28717-6_34
   Lankford D., 1979, MTP3 LOUIS TU
   Larraz D, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P218
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Leike Jan, 2014, LNCS, V8413, P172
   Magill S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P211, DOI 10.1145/1706299.1706326
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Navas J, 2007, LECT NOTES COMPUT SC, V4670, P348, DOI 10.1007/978-3-540-74610-2_24
   Noschinski L, 2013, J AUTOM REASONING, V51, P27, DOI 10.1007/s10817-013-9277-6
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Serrano A, 2014, THEOR PRACT LOG PROG, V14, P739, DOI 10.1017/S147106841400057X
   Sinn M, 2014, LECT NOTES COMPUT SC, V8559, P745, DOI 10.1007/978-3-319-08867-9_50
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   Tsitovich A, 2011, LECT NOTES COMPUT SC, V6605, P81, DOI 10.1007/978-3-642-19835-9_9
   Wei T, 2007, LECT NOTES COMPUT SC, V4634, P170
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Zuleger F, 2011, LECT NOTES COMPUT SC, V6887, P280, DOI 10.1007/978-3-642-23702-7_22
NR 55
TC 35
Z9 37
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2016
VL 38
IS 4
AR 13
DI 10.1145/2866575
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC1WS
UT WOS:000387900100001
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Dodds, M
   Jagannathan, S
   Parkinson, MJ
   Svendsen, K
   Birkedal, L
AF Dodds, Mike
   Jagannathan, Suresh
   Parkinson, Matthew J.
   Svendsen, Kasper
   Birkedal, Lars
TI Verifying Custom Synchronization Constructs Using Higher-Order
   Separation Logic
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification; Separation logic; concurrent abstract
   predicates; concurrency
AB Synchronization constructs lie at the heart of any reliable concurrent program. Many such constructs are standard (e. g., locks, queues, stacks, and hash-tables). However, many concurrent applications require custom synchronization constructs with special-purpose behavior. These constructs present a significant challenge for verification. Like standard constructs, they rely on subtle racy behavior, but unlike standard constructs, they may not have well-understood abstract interfaces. As they are custom built, such constructs are also far more likely to be unreliable.
   This article examines the formal specification and verification of custom synchronization constructs. Our target is a library of channels used in automated parallelization to enforce sequential behavior between program statements. Our high-level specification captures the conditions necessary for correct execution; these conditions reflect program dependencies necessary to ensure sequential behavior. We connect the high-level specification with the low-level library implementation to prove that a client's requirements are satisfied. Significantly, we can reason about program and library correctness without breaking abstraction boundaries.
   To achieve this, we use a program logic called iCAP (impredicative Concurrent Abstract Predicates) based on separation logic. iCAP supports both high-level abstraction and low-level reasoning about races. We use this to show that our high-level channel specification abstracts three different, increasingly complex low-level implementations of the library. iCAP's support for higher-order reasoning lets us prove that sequential dependencies are respected, while iCAP's next-generation semantic model lets us avoid ugly problems with cyclic dependencies.
C1 [Dodds, Mike] Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
   [Jagannathan, Suresh] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
   [Parkinson, Matthew J.] Microsoft Res, New York, NY USA.
   [Svendsen, Kasper; Birkedal, Lars] Aarhus Univ, Dept Comp Sci, DK-8000 Aarhus, Denmark.
C3 University of York - UK; Purdue University System; Purdue University;
   Microsoft; Aarhus University
RP Dodds, M (corresponding author), Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
EM mike.dodds@york.ac.uk; suresh@cs.purdue.edu; mattpark@microsoft.com;
   ksvendsen@cs.au.dk; birkedal@cs.au.dk
FU EPSRC [EP/H010815/1, EP/H005633/1, EP/F036345]; Danish Council for
   Independent Research [DFF - 4181-00273]; Danish Council for Independent
   Research for the Natural Sciences (FNU); EPSRC [EP/H010815/1,
   EP/H005633/1] Funding Source: UKRI
FX Dodds was supported in part by EPSRC grants EP/H010815/1, EP/H005633/1,
   and EP/F036345. Svendsen was supported in part by the Danish Council for
   Independent Research project DFF - 4181-00273. Birkedal was supported in
   part by the ModuRes Sapere Aude Advanced Grant from the Danish Council
   for Independent Research for the Natural Sciences (FNU).
CR Bell C. J., 2009, SAS
   Berger E. D., 2010, OOPSLA
   Birkedal Lars, 2012, LOG METH COMPUT SCI, V8, P45
   Bocchino R.L., 2009, OOPSLA
   Bornat R., 2005, POPL
   Botincan M., 2013, TOPLAS, V32
   da Rocha Pinto P., 2014, ECOOP
   da Rocha Pinto Pedro, 2011, OOPSLA
   DINSDALEYOUNG T, 2010, ECOOP
   Dodds M., 2011, POPL
   Dodds Mike, 2009, ESOP
   Feng X., 2007, ESOP
   Gotsman A., 2007, APLAS
   Haack C., 2008, APLAS
   Hoare T, 2008, ELECTRON NOTES THEOR, V212, P3, DOI 10.1016/j.entcs.2008.04.050
   Hobor Aquinas., 2008, ESOP
   Jacobs B., 2009, CW REPORTS
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Krishnaswami N. R., 2010, TLDI
   Leino K. R. M., 2010, ESOP
   Nanevski A., 2014, ESOP
   Navabi A., 2008, PPOPP
   O'Hearn P. W., 2007, TCS, V375, P1
   Parkinson M.J., 2005, POPL
   Rinard M. C., 1992, POPL
   Svendsen K., 2014, ESOP
   Svendsen K., 2013, ECOOP
   Svendsen K., 2014, TECHNICAL REPORT
   Turon A., 2013, ICFP
   Vafeiadis V., 2007, THESIS
   VAFEIADIS V, 2007, CONCUR
   Villard J., 2010, TACAS
   WELC A, 2005, OOPSLA
   Wickerson J., 2010, ESOP
NR 34
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2016
VL 38
IS 2
AR 4
DI 10.1145/2818638
PG 72
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DA8UG
UT WOS:000368081200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Oh, H
   Lee, W
   Heo, K
   Yang, H
   Yi, K
AF Oh, Hakjoo
   Lee, Wonchan
   Heo, Kihong
   Yang, Hongseok
   Yi, Kwangkeun
TI Selective X-Sensitive Analysis Guided by Impact Pre-Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Programming Languages; Program Analysis; Static analysis;
   context-sensitive analysis; abstract interpretation
AB We present a method for selectively applying context-sensitivity during interprocedural program analysis. Our method applies context-sensitivity only when and where doing so is likely to improve the precision that matters for resolving given queries. The idea is to use a pre-analysis to estimate the impact of context-sensitivity on the main analysis's precision, and to use this information to find out when and where the main analysis should turn on or off its context-sensitivity. We formalize this approach and prove that the analysis always benefits from the pre-analysis-guided context-sensitivity. We implemented this selective method for an existing industrial-strength interval analyzer for full C. The method reduced the number of (false) alarms by 24.4% while increasing the analysis cost by 27.8% on average.
   The use of the selective method is not limited to context-sensitivity. We demonstrate this generality by following the same principle and developing a selective relational analysis and a selective flow-sensitive analysis. Our experiments show that the method cost-effectively improves the precision in the these analyses as well.
C1 [Oh, Hakjoo] Korea Univ, Dept Comp Sci & Engn, Seoul, South Korea.
   [Lee, Wonchan] Stanford Univ, Dept Comp Sci, Stanford, CA 94305 USA.
   [Heo, Kihong; Yi, Kwangkeun] Seoul Natl Univ, Dept Comp Sci & Engn, Seoul, South Korea.
   [Yang, Hongseok] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
C3 Korea University; Stanford University; Seoul National University (SNU);
   University of Oxford
RP Oh, H (corresponding author), Korea Univ, Dept Comp Sci & Engn, Seoul, South Korea.
EM hakjoo-oh@korea.ac.kr; wonchan@stanford.edu; khheo@ropas.snu.ac.kr;
   hongseok00@gmail.com; kwang@ropas.snu.ac.kr
RI Yang, Hongseok/M-8791-2017; ‍, 오학주[ 부교수 / 컴퓨터학과 ]/AAW-5194-2020; Heo,
   Kihong/F-2901-2018; Heo, Kihong/AAD-8692-2019; Yang,
   Hongseok/AAC-4471-2020
OI Heo, Kihong/0000-0003-2671-0142; 
FU Engineering Research Center of Excellence Program of Korea Ministry of
   Science, ICT, and Future Planning (MSIP)/National Research Foundation of
   Korea (NRF) [NRF-2008-0062609]; Samsung Electronics Software Center;
   Institute for Information & Communications Technology Promotion (IITP) -
   Korean government (MSIP) [B0101-15-0557, R0190-15-2011]; EPSRC; EPSRC
   [EP/H008373/2] Funding Source: UKRI
FX This work was supported by the Engineering Research Center of Excellence
   Program of Korea Ministry of Science, ICT, and Future Planning
   (MSIP)/National Research Foundation of Korea (NRF) (grant
   NRF-2008-0062609), and by Samsung Electronics Software Center. This work
   was partly supported by an Institute for Information & Communications
   Technology Promotion (IITP) grant funded by the Korean government
   (MSIP): B0101-15-0557 (Resilient Cyber-Physical Systems Research) and
   (R0190-15-2011 (Development of Vulnerability Discovery Technologies for
   IoT Software Security). H. Yang was supported by EPSRC.
CR [Anonymous], 1991, Ph.D. dissertation
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Deutsch A., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P358, DOI 10.1145/263699.263750
   Farzan A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P297
   Guyer SZ, 2003, LECT NOTES COMPUT SC, V2694, P214
   Harrison W. L.  III, 1989, LISP and Symbolic Computation, V2, P179, DOI 10.1007/BF01808954
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Jung YB, 2005, LECT NOTES COMPUT SC, V3672, P203
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Lee W, 2012, LECT NOTES COMPUT SC, V7148, P299, DOI 10.1007/978-3-642-27940-9_20
   Liang P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/1926385.1926391
   Milanova A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/566171.566174
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Naik M, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P373
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Oh H, 2013, SCI COMPUT PROGRAM, V78, P1701, DOI 10.1016/j.scico.2013.04.002
   Oh H, 2012, ACM SIGPLAN NOTICES, V47, P229, DOI 10.1145/2345156.2254092
   Oh H, 2010, SOFTWARE PRACT EXPER, V40, P585, DOI 10.1002/spe.969
   Oh Hakjoo, 2015, SPARROW
   Padhye Rohan., 2013, P 2 ACM SIGPLAN INT, P31
   PLEVYAK J, 1994, SIGPLAN NOTICES, V29, P324, DOI 10.1145/191081.191130
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
   Zhang X, 2013, ACM SIGPLAN NOTICES, V48, P365, DOI 10.1145/2499370.2462185
NR 30
TC 10
Z9 10
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2016
VL 38
IS 2
AR 6
DI 10.1145/2821504
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DA8UG
UT WOS:000368081200003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Sampaio, D
   de Souza, RM
   Collange, S
   Pereira, FMQ
AF Sampaio, Diogo
   de Souza, Rafael Martins
   Collange, Sylvain
   Quintao Pereira, Fernando Magno
TI Divergence Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Design; Algorithms; Performance; Static program analysis;
   divergence analysis; SIMD; graphics processing units; high performance
ID MODEL; LANGUAGE; FORM; SSA
AB Growing interest in graphics processing units has brought renewed attention to the Single Instruction Multiple Data (SIMD) execution model. SIMD machines give application developers tremendous computational power; however, programming them is still challenging. In particular, developers must deal with memory and control-flow divergences. These phenomena stem from a condition that we call data divergence, which occurs whenever two processing elements (PEs) see the same variable name holding different values. This article introduces divergence analysis, a static analysis that discovers data divergences. This analysis, currently deployed in an industrial quality compiler, is useful in several ways: it improves the translation of SIMD code to non-SIMD CPUs, it helps developers to manually improve their SIMD applications, and it also guides the automatic optimization of SIMD programs. We demonstrate this last point by introducing the notion of a divergence-aware register spiller. This spiller uses information from our analysis to either rematerialize or share common data between PEs. As a testimony of its effectiveness, we have tested it on a suite of 395 CUDA kernels from well-known benchmarks. The divergence-aware spiller produces GPU code that is 26.21% faster than the code produced by the register allocator used in the baseline compiler.
C1 [Sampaio, Diogo; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil.
   [de Souza, Rafael Martins] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
   [Collange, Sylvain] INRIA, Ctr Rennes Bretagne Atlantique, F-35042 Rennes, France.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Minas
   Gerais; Inria; Universite de Rennes
RP Pereira, FMQ (corresponding author), Univ Fed Minas Gerais, Dept Comp Sci, Antonio Carlos Ave 6613, Belo Horizonte, MG, Brazil.
EM pronesto@gmail.com
RI Pereira, Fernando/HNR-7786-2023
FU FAPEMIG [2010/2]; Brazilian Research Council (CNPq); In Web
FX This work is supported by FAPEMIG grant 2010/2. D. Sampaio has been
   supported by the Brazilian Research Council (CNPq). S. Collange was
   supported by In Web during his stay in Brazil.
CR Abel N.E., 1969, Proceedings of the May 14-16, 1969, spring joint computer conference, P57
   Aiken A., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P342, DOI 10.1145/268946.268974
   [Anonymous], 2010, ACM JEA, DOI [DOI 10.1145/1498698.1564500, 10.1145/1498698.1564500]
   [Anonymous], P 8 ANN IEEE ACM INT
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   Baghsorkhi SS, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P105, DOI 10.1145/1693453.1693470
   BELADY LA, 1966, IBM SYST J, V5, P78, DOI 10.1147/sj.52.0078
   BLELLOCH GE, 1990, 3RD SYMPOSIUM ON THE FRONTIERS OF MASSIVELY PARALLEL COMPUTATION, P471, DOI 10.1109/FMPC.1990.89498
   Bouge L., 1992, Future Generation Computer Systems, V8, P363, DOI 10.1016/0167-739X(92)90069-N
   BOUKNIGHT WJ, 1972, PR INST ELECTR ELECT, V60, P369, DOI 10.1109/PROC.1972.8647
   BRIGGS P, 1992, SIGPLAN NOTICES, V27, P311, DOI 10.1145/143103.143143
   Brockmann K, 1997, P ANN HICSS, P200, DOI 10.1109/HICSS.1997.667215
   Budimlic Z, 2002, ACM SIGPLAN NOTICES, V37, P25, DOI 10.1145/543552.512534
   Carrillo S, 2009, CF'09: CONFERENCE ON COMPUTING FRONTIERS & WORKSHOPS, P147
   Che SA, 2009, I S WORKL CHAR PROC, P44, DOI 10.1109/IISWC.2009.5306797
   Choi Jong-Deok, 1991, P 18 ACM SIGPLANSIGA, P55, DOI DOI 10.1145/99583.99594
   CLARK N., 2010, PACT, P354
   Collange S, 2010, LECT NOTES COMPUT SC, V6043, P46
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Coutinho B., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P320, DOI 10.1109/PACT.2011.63
   Coutinho B, 2013, CONCURR COMP-PRACT E, V25, P775, DOI 10.1002/cpe.2853
   Cunningham D., 2011, P 2011 ACM SIGPLAN X, DOI [10.1145/2212736.2212744, DOI 10.1145/2212736.2212744]
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DAREMA F, 1988, PARALLEL COMPUT, V7, P11, DOI 10.1016/0167-8191(88)90094-4
   Dubach C, 2012, ACM SIGPLAN NOTICES, V47, P1, DOI 10.1145/2345156.2254066
   Farrell CA, 1996, THEOR COMPUT SCI, V169, P39, DOI 10.1016/S0304-3975(96)00113-2
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   FLYNN MJ, 1972, IEEE T COMPUT, VC 21, P948, DOI 10.1109/TC.1972.5009071
   Fung WWL, 2007, INT SYMP MICROARCH, P407, DOI 10.1109/MICRO.2007.30
   Garland M, 2010, COMMUN ACM, V53, P58, DOI 10.1145/1839676.1839694
   Gou CY, 2013, INT J PARALLEL PROG, V41, P400, DOI 10.1007/s10766-012-0201-1
   GROVER V., 2009, U.S. Patent, Patent No. [2009/0259997, 20090259997]
   Hack S, 2006, INFORM PROCESS LETT, V98, P150, DOI 10.1016/j.ipl.2006.01.008
   Han Tianyi David, 2011, P 4 WORKSH GEN PURP, DOI [10.1145/1964179.1964184, DOI 10.1145/1964179.1964184]
   HOOGVORST P, 1991, LECT NOTES COMPUT SC, V505, P83
   JANG B., 2010, P PLDI
   Karrenberg R, 2012, LECT NOTES COMPUT SC, V7210, P1, DOI 10.1007/978-3-642-28652-0_1
   Karrenberg R, 2011, INT SYM CODE GENER, P141, DOI 10.1109/CGO.2011.5764682
   KUNG SY, 1982, IEEE T COMPUT, V31, P1054, DOI 10.1109/TC.1982.1675922
   Lashgar A., 2011, P 9 WORKSH DUPL DEC, P75
   LAWRIE DH, 1975, COMMUN ACM, V18, P157, DOI 10.1145/360680.360687
   Lee S, 2009, ACM SIGPLAN NOTICES, V44, P101, DOI 10.1145/1594835.1504194
   Lee YI, 2013, CYBER SECURITY CULTURE: COUNTERACTING CYBER THREATS THROUGH ORGANIZATIONAL LEARNING AND TRAINING, P1
   Lee Y, 2011, ISCA 2011: PROCEEDINGS OF THE 38TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P129
   Leissa R, 2012, ACM SIGPLAN NOTICES, V47, P65, DOI 10.1145/2370036.2145825
   MAHLKE S., 2012, P ACM SIGPLAN PLDI
   Meng JY, 2010, CONF PROC INT SYMP C, P235, DOI 10.1145/1816038.1815992
   MIGHT M., 2011, P POPL
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Mu S, 2010, DES AUT TEST EUROPE, P93
   NICKOLLS J., 2009, GRAPHICS COMPUTING G
   Nickolls J, 2010, IEEE MICRO, V30, P56, DOI 10.1109/MM.2010.41
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Nunes Sampaio Diogo, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P12, DOI 10.1007/978-3-642-33182-4_3
   Ottenstein KarlJ., 1990, P ACM SIGPLAN C PROG, P257
   PEREIRA F. M. Q., 2011, DIRMAPS BLOG
   PEREIRA F. M. Q., 2012, P 24 INT S COMP ARCH, P137
   Perrott R. H., 1979, ACM Transactions on Programming Languages and Systems, V1, P177, DOI 10.1145/357073.357075
   Pharr M., 2012, INNOVATIVE PARALLEL, P1
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P895, DOI 10.1145/330249.330250
   Ryoo S, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P73, DOI 10.1145/1345206.1345220
   Saha B, 2009, ACM SIGPLAN NOTICES, V44, P431, DOI 10.1145/1543135.1542525
   Sandes EFD, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P137, DOI 10.1145/1693453.1693473
   Scholz Bernhard., 2008, User-input dependence analysis via graph reachability
   SELLERS G., 2011, P AMD FUS DEV SUMM
   STRATTON J. A., 2012, PARBOIL REPORT
   TU P, 1995, SIGPLAN NOTICES, V30, P47, DOI 10.1145/223428.207115
   Zhang EZ, 2011, ACM SIGPLAN NOTICES, V46, P369, DOI [10.1145/1961296.1950408, 10.1145/1961295.1950408]
   Zhang EddyZ., 2010, P 24 ACM INT C SUPER, P115
   Zhang Y, 2011, INT S HIGH PERF COMP, P382, DOI 10.1109/HPCA.2011.5749745
NR 71
TC 15
Z9 18
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2013
VL 35
IS 4
AR 13
DI 10.1145/2523815
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 282OY
UT WOS:000329182700002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Botincan, M
   Dodds, M
   Jagannathan, S
AF Botincan, Matko
   Dodds, Mike
   Jagannathan, Suresh
TI Proof-Directed Parallelization Synthesis by Separation Logic
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification; Separation logic; abduction; frame
   inference; deterministic parallelism
ID CONCURRENCY; COMPLEXITY; PROGRAMS; COMPILER; JAVA
AB We present an analysis which takes as its input a sequential program, augmented with annotations indicating potential parallelization opportunities, and a sequential proof, written in separation logic, and produces a correctly synchronized parallelized program and proof of that program. Unlike previous work, ours is not a simple independence analysis that admits parallelization only when threads do not interfere; rather, we insert synchronization to preserve dependencies in the sequential program that might be violated by a naive translation. Separation logic allows us to parallelize fine-grained patterns of resource usage, moving beyond straightforward points-to analysis. The sequential proof need only represent shape properties, meaning we can handle complex algorithms without verifying every aspect of their behavior.
   Our analysis works by using the sequential proof to discover dependencies between different parts of the program. It leverages these discovered dependencies to guide the insertion of synchronization primitives into the parallelized program, and to ensure that the resulting parallelized program satisfies the same specification as the original sequential program, and exhibits the same sequential behavior. Our analysis is built using frame inference and abduction, two techniques supported by an increasing number of separation logic tools.
C1 [Botincan, Matko] Univ Cambridge, Comp Lab, Cambridge CB2 1TN, England.
   [Dodds, Mike] Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
   [Jagannathan, Suresh] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 University of Cambridge; University of York - UK; Purdue University
   System; Purdue University
RP Botincan, M (corresponding author), Univ Cambridge, Comp Lab, Cambridge CB2 1TN, England.
EM matko.botincan@gmail.com
FU Gates trust; EPSRC [EP/H010815/1, EP/H005633/1, EP/F036345]; NSF
   [CCF-0811631]; EPSRC [EP/H005633/1, EP/H010815/1] Funding Source: UKRI
FX This work was supported by the Gates trust, by EPSRC grants EP/H010815/
   1, EP/H005633/1, EP/F036345 and by NSF grant CCF-0811631.
CR Baskaran MM, 2009, ACM SIGPLAN NOTICES, V44, P219, DOI 10.1145/1594835.1504209
   Bell C. J., 2009, SAS, P151
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bergan T, 2010, ACM SIGPLAN NOTICES, V45, P53, DOI 10.1145/1735971.1736029
   Berger ED, 2009, ACM SIGPLAN NOTICES, V44, P81, DOI 10.1145/1639949.1640096
   Bocchino Jr R. L., 2009, OOPSLA, P91
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Botincan Matko., 2011, BOOGIE, P65
   Burnim J, 2010, COMMUN ACM, V53, P97, DOI 10.1145/1743546.1743572
   Calcagno C, 2009, LECT NOTES COMPUT SC, V5904, P259, DOI 10.1007/978-3-642-10672-9_19
   COOK B, 2011, P INT C CONC THEOR, V6901, P235
   Cook Byron, 2010, MAKING FAST HARDWARE
   Creignou N, 2006, SIAM J COMPUT, V36, P207, DOI 10.1137/S0097539704446311
   Deshmukh J, 2010, LECT NOTES COMPUT SC, V6012, P226, DOI 10.1007/978-3-642-11957-6_13
   Distefano D, 2010, LECT NOTES COMPUT SC, V6013, P278, DOI 10.1007/978-3-642-12029-9_20
   Distefano D, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1449955.1449782
   Dodds M, 2011, ACM SIGPLAN NOTICES, V46, P259, DOI 10.1145/1925844.1926416
   EITER T, 1995, J ACM, V42, P3, DOI 10.1145/200836.200838
   Ghiya R, 1998, LECT NOTES COMPUT SC, V1383, P159
   Golan-Gueta G, 2011, ACM SIGPLAN NOTICES, V46, P225, DOI 10.1145/2076021.2048086
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Gupta R, 1999, PARALLEL COMPUT, V25, P1741, DOI 10.1016/S0167-8191(99)00086-1
   Haack C, 2008, LECT NOTES COMPUT SC, V5356, P171
   Hendren L. J., 1990, IEEE Transactions on Parallel and Distributed Systems, V1, P35, DOI 10.1109/71.80123
   Hoare T, 2008, ELECTRON NOTES THEOR, V212, P3, DOI 10.1016/j.entcs.2008.04.050
   Hobor A., 2008, P EUR S PROGR
   HORWITZ S, 1989, SIGPLAN NOTICES, V24, P28, DOI 10.1145/74818.74821
   Hurlin C, 2009, LECT NOTES COMPUT SC, V5673, P52, DOI 10.1007/978-3-642-03237-0_6
   Jacobs B., 2009, CW REPORTS
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6012, P407, DOI 10.1007/978-3-642-11957-6_22
   Liu TP, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P327
   Navabi A, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P23, DOI 10.1145/1345206.1345212
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Ottoni G, 2005, INT SYMP MICROARCH, P105
   Peiyi Tang, 1994, Conference Proceedings. 1994 International Conference on Supercomputing, P44, DOI 10.1145/181181.181261
   Pingali K, 2011, ACM SIGPLAN NOTICES, V46, P12, DOI 10.1145/1993316.1993501
   Raychev V., 2013, P INT STAT AN S
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Villard J, 2010, LECT NOTES COMPUT SC, V6015, P275, DOI 10.1007/978-3-642-12002-2_23
   Welc A, 2005, ACM SIGPLAN NOTICES, V40, P439, DOI 10.1145/1103845.1094845
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
NR 42
TC 6
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2013
VL 35
IS 2
AR 8
DI 10.1145/2491522.2491525
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 191XT
UT WOS:000322449200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Bartoletti, M
   Degano, P
   Ferrari, GL
   Zunino, R
AF Bartoletti, Massimo
   Degano, Pierpaolo
   Ferrari, Gian-Luigi
   Zunino, Roberto
TI Local Policies for Resource Usage Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Security; Theory; Verification; Usage policies; type and
   effect systems; model-checking
ID ACCESS-CONTROL; CALCULUS
AB An extension of the lambda-calculus is proposed, to study resource usage analysis and verification. It features usage policies with a possibly nested, local scope, and dynamic creation of resources. We define a type and effect system that, given a program, extracts a history expression, that is, a sound overapproximation to the set of histories obtainable at runtime. After a suitable transformation, history expressions are model-checked for validity. A program is resource-safe if its history expression is verified valid: If such, no runtime monitor is needed to safely drive its executions.
C1 [Bartoletti, Massimo] Univ Cagliari, Dipartimento Matemat & Informat, I-09124 Cagliari, Italy.
   [Degano, Pierpaolo; Ferrari, Gian-Luigi] Univ Pisa, Dipartimento Informat, I-56127 Pisa, Italy.
   [Zunino, Roberto] Univ Trent, Dipartimento Ingn & Sci Informaz, I-38100 Povo, Italy.
C3 University of Cagliari; University of Pisa; University of Trento
RP Bartoletti, M (corresponding author), Univ Cagliari, Dipartimento Matemat & Informat, Via Osped 72, I-09124 Cagliari, Italy.
EM bart@unica.it; degano@di.unipi.it; giangi@di.unipi.it;
   zunino@disi.unitn.it
OI Bartoletti, Massimo/0000-0003-3796-9774; FERRARI,
   GIAN-LUIGI/0000-0003-3548-5514
FU EU-FETPI Global Computing [IST-2005-16004]; SENSORIA ( Software
   Engineering for Service-Oriented Overlay Computers); MIUR-PRIN
FX This work has been partially supported by EU-FETPI Global Computing
   Project IST-2005-16004 SENSORIA ( Software Engineering for
   Service-Oriented Overlay Computers) and by the MIUR-PRIN project SOFT
   (Tecniche Formali Orientate alla Sicurezza).
CR [Anonymous], 1999, P 1999 WORKSH NEW SE
   [Anonymous], POPL 2000
   Bartoletti M, 2005, LECT NOTES COMPUT SC, V3701, P97
   Bartoletti M, 2005, 18th IEEE Computer Security Foundations Workshop, Proceedings, P211, DOI 10.1109/CSFW.2005.17
   Bartoletti M, 2005, LECT NOTES COMPUT SC, V3441, P316
   Bartoletti M., 2008, TR0807 U PIS DIP INF
   Bartoletti M., 2006, P 19 IEEE COMP SEC F, P57
   Bartoletti M, 2007, LECT NOTES COMPUT SC, V4423, P32
   Bartoletti M, 2009, LECT NOTES COMPUT SC, V5511, P52, DOI 10.1007/978-3-642-03459-6_4
   Bartoletti M, 2009, J OBJECT TECHNOL, V8, P5, DOI 10.5381/jot.2009.8.4.a1
   Bartoletti M, 2009, LECT NOTES COMPUT SC, V5474, P19, DOI 10.1007/978-3-642-00945-7_2
   Bartoletti Massimo., 2004, INT J INF SECUR, V2, P187
   BAUER L, 2005, P ACM SIGPLAN C PROG, P305
   Bauer L., 2002, P WORKSH FDN COMP SE
   BERGSTRA JA, 1985, THEOR COMPUT SCI, V37, P77, DOI 10.1016/0304-3975(85)90088-X
   Besson F, 2005, J FUNCT PROGRAM, V15, P179, DOI 10.1017/S0956796804005465
   Besson F., 2001, Journal of Computer Security, V9, P217
   BRADFIELD JC, 1996, LECT NOTES COMPUTER, V1046, P479
   Chakraborty S, 2002, EIGHTH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P45, DOI 10.1109/RTTAS.2002.1137380
   CHRISTENSEN S, 1993, THESIS EDINBURGH U
   Dam M, 1997, THEOR COMPUT SCI, V183, P215, DOI 10.1016/S0304-3975(96)00325-8
   ESPARZA J, 1994, LNCS, V787, P115
   Fong PWL, 2004, P IEEE S SECUR PRIV, P43
   Fournet C, 2003, ACM T PROGR LANG SYS, V25, P360, DOI 10.1145/641909.641912
   Hamlen KW, 2006, ACM T PROGR LANG SYS, V28, P175, DOI 10.1145/1111596.1111601
   IGARASHI A, 2002, P ACM SIGPLAN SIGACT, P331
   Iwama Futoshi, 2006, P 2006 ACM SIGPLAN W, P38, DOI DOI 10.1145/1111542.1111550
   KOBAYASHI N, 2003, P ACM SIGPLAN INT WO, P50
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Marriott K, 2003, LECT NOTES COMPUT SC, V2895, P212
   Mayr R., 1998, THESIS TU MUNCHEN
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   NIELSON HR, 1994, P 21 ACM SIGPLAN SIG
   Schneider H P, 2000, Climacteric, V3, P50, DOI 10.3109/13697130009167599
   Skalka C, 2004, LECT NOTES COMPUT SC, V3302, P107
   SKALKA C, 2005, P ACM C PRINC PRACT, P139
   Skalka C, 2008, J FUNCT PROGRAM, V18, P179, DOI 10.1017/S0956796807006466
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   TAN G, 2003, P FDN OBJ OR LANG
   Thiemann P, 2003, J FUNCT PROGRAM, V13, P573, DOI 10.1017/S0956796802004586
   Walker D., 2000, P 27 ACM SIGPLAN SIG, P254
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
   Wang J, 2006, LECT NOTES COMPUT SC, V4189, P263
NR 44
TC 26
Z9 27
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2009
VL 31
IS 6
AR 23
DI 10.1145/1552309.1552313
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 512AM
UT WOS:000271214200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Millstein, T
   Frost, C
   Ryder, J
   Warth, A
AF Millstein, Todd
   Frost, Christopher
   Ryder, Jason
   Warth, Alessandro
TI Expressive and Modular Predicate Dispatch for Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Predicate dispatch; dynamic dispatch; modular
   typechecking
ID IMPLEMENTATION; MULTIJAVA; CALCULUS
AB Predicate dispatch is an object-oriented (OO) language mechanism for determining the method implementation to be invoked upon a message send. With predicate dispatch, each method implementation includes a predicate guard specifying the conditions under which the method should be invoked, and logical implication of predicates determines the method overriding relation. Predicate dispatch naturally unifies and generalizes several common forms of dynamic dispatch, including traditional OO dispatch, multimethod dispatch, and functional-style pattern matching. Unfortunately, prior languages supporting predicate dispatch have had several deficiencies that limit the practical utility of this language feature.
   We describe JPred, a backward-compatible extension to Java supporting predicate dispatch. While prior languages with predicate dispatch have been extensions to toy or nonmainstream languages, we show how predicate dispatch can be naturally added to a traditional OO language. While prior languages with predicate dispatch have required the whole program to be available for typechecking and compilation, JPred retains Java's modular typechecking and compilation strategies. While prior languages with predicate dispatch have included special-purpose algorithms for reasoning about predicates, JPred employs general-purpose, off-the-shelf decision procedures. As a result, JPred's type system is more flexible, allowing several useful programming idioms that are spuriously rejected by those other languages. After describing the JPred language informally, we present an extension to Featherweight Java that formalizes the language and its modular type system, which we have proven sound. Finally, we discuss two case studies that illustrate the practical utility of JPred, including its use in the detection of several errors.
C1 [Millstein, Todd; Frost, Christopher; Ryder, Jason; Warth, Alessandro] Univ Calif Los Angeles, UCLA Dept Comp Sci, Los Angeles, CA 90095 USA.
C3 University of California System; University of California Los Angeles
RP Millstein, T (corresponding author), Univ Calif Los Angeles, UCLA Dept Comp Sci, Los Angeles, CA 90095 USA.
EM todd@cs.ucla.edu
FU National Science Foundation [CCF-0427202, CCF-0545850]
FX This material is based upon work supported by the National Science
   Foundation under Grant Nos. CCF-0427202 and CCF-0545850, as well as by a
   generous gift from Microsoft Research. Authors' address: T. Millstein
   (corresponding author), C. Frost, J. Ryder, and A. Warth, UCLA Computer
   Science Department, University of California, Los Angeles, CA
   90095-1596; email: todd@ cs. ucla. edu.
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   AGRAWAL R, 1991, SIGPLAN NOTICES, V26, P113, DOI 10.1145/118014.117963
   [Anonymous], 1997, The Definition of Standard ML
   Arnold K., 2005, The Java programming language
   ASSAAD MG, 2001, 0111 IOW STAT U DEP
   Barrett C, 2004, LECT NOTES COMPUT SC, V3114, P515
   BAUMGARTNER G, 2002, OSUCISRC501TR08 DEP
   BENZAKEN V, 2003, P 8 ACM SIGPLAN INT, P51
   BOBROW DG, 1986, P C OBJ OR PROGR SYS, P17
   Boyland J, 1997, ACM SIGPLAN NOTICES, V32, P66, DOI 10.1145/263700.263721
   Bray T., 2006, Extensible Markup Language (XML) 1.1 Specification, V2nd
   CAPEYEV V, 2003, LECT NOTES COMPUTER, V2743
   CASTAGNA G, 1995, ACM T PROGR LANG SYS, V17, P431, DOI 10.1145/203095.203096
   CASTAGNA G, 1995, INFORM COMPUT, V117, P115, DOI 10.1006/inco.1995.1033
   CASTAGNA G, 1997, OBJECT ORIENTED PROG
   CHAMBERS C, 1992, LECT NOTES COMPUT SC, V615, P33, DOI 10.1007/BFb0053029
   CHAMBERS C, 1993, P 7 EUR C OBJ OR PRO, P268
   Chambers C., 1997, CECIL LANGUAGE SPECI
   Chambers Craig., 1999, Proceedings of the 14th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA '99, P238, DOI [10.1145/320384.320407, DOI 10.1145/320384.320407]
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   CLIFTON C, 2001, 0110 IOW STAT U DEP
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Emir B, 2007, LECT NOTES COMPUT SC, V4609, P273
   Ernst M., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P186, DOI 10.1007/BFb0054092
   FLANAGAN C, 2003, INT C COMP AID VER C
   FROST C, 2006, INT WORKSH FDN DEV O
   FROST C, 2005, CSDTR050038 UCLA COM
   GABRIEL RP, 1991, COMMUN ACM, V34, P28, DOI 10.1145/114669.114671
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gay David., 2003, PLDI 03, P1
   Gosling J., 2005, Java Language Specification, Vthird
   Grimm R, 2004, ACM T COMPUT SYST, V22, P421, DOI 10.1145/1035582.1035584
   GRIMM R, 2002, THESIS U WASHINGTON
   Hill J., 2000, Proc. 9 th International Conference on Architectural Support for Programming Languages and Operating Systems, P93, DOI DOI 10.1145/356989.356998
   HOSKING JG, 1990, P 1990 TOOLS PAC, P345
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   INGALLS DHH, 1986, P OOPSLA, P347
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   LEAVENS GT, 1999, 9808A IOW STAT U DEP
   LEE K, 2003, P ACM C OBJ OR PROGR
   Liu J, 2003, LECT NOTES COMPUT SC, V2562, P110
   Millstein T, 2004, ACM T PROGR LANG SYS, V26, P836, DOI 10.1145/1018203.1018207
   Millstein T, 2002, ACM SIGPLAN NOTICES, V37, P110, DOI 10.1145/583852.581489
   Millstein T, 2002, INFORM COMPUT, V175, P76, DOI 10.1006/inco.2002.3103
   MILLSTEIN T, 2004, P C OBJ OR PROGR SYS
   Millstein Todd David, 2003, THESIS U WASHINGTON
   MOON DA, 1986, SIGPLAN NOTICES, V21, P1, DOI 10.1145/960112.28698
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   NYSTROM N., 2003, P 12 INT C COMP CONS
   ORLEANS D, 2002, P 1 INT C ASP OR SOF, P56
   Pai VS, 1999, PROCEEDINGS OF THE 1999 USENIX ANNUAL TECHNICAL CONFERENCE, P199
   Remy D, 1998, THEOR PRACT OBJ SYST, V4, P27, DOI 10.1002/(SICI)1096-9942(1998)4:1<27::AID-TAPO3>3.0.CO;2-4
   RICHARD A, 2008, INT WORKSH FDN OBJ O
   SALCIANU AD, 2005, P 6 INT C VER MOD CH
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Stroustrup B., 1997, The C++ Programming Language
   UCKO AM, 2001, 2001006 MIT ART INT
   Welsh Matt., 2001, SIGOPS OPER SYST REV, V35, P230
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   POLYGLOT JAVA 5
NR 61
TC 10
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD FEB
PY 2009
VL 31
IS 2
AR 7
DI 10.1145/1462166.1462168
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 419SG
UT WOS:000264239400003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Foster, JS
   Johnson, R
   Kodumal, J
   Aiken, A
AF Foster, Jeffrey S.
   Johnson, Robert
   Kodumal, John
   Aiken, Alex
TI Flow-insensitive type qualifiers
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; reliability; experimentation; languages; theory;
   verification; type qualifiers; types; security; constraints; const;
   taint; static analysis
ID INFERENCE
AB We describe flow-insensitive type qualifiers, a lightweight, practical mechanism for specifying and checking properties not captured by traditional type systems. We present a framework for adding new, user-specified type qualifiers to programming languages with static type systems, such as C and Java. In our system, programmers add a few type qualifier annotations to their program, and automatic type qualifier inference determines the remaining qualifiers and checks the annotations for consistency. We describe a tool CQUAL for adding type qualifiers to the C programming language. Our tool CQUAL includes a visualization component for displaying browsable inference results to the programmer. Finally, we present several experiments using our tool, including inferring const qualifiers, finding security vulnerabilities in several popular C programs, and checking initialization data usage in the Linux kernel. Our results suggest that inference and visualization make type qualifiers lightweight, that type qualifier inference scales to large programs, and that type qualifiers are applicable to a wide variety of problems.
   Categories and Subject Descriptors: D.2.1 [Software Engineering]: Requirements/Specifications; D.2.4 [Software Engineering]: Software/Program Verification; D.3.3 [Programming Languages]: Language Constructs and Features; F.3.1 [Logics and Meanings of Programs]: Specifying and Verifying and Reasoning about Programs.
C1 SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
   Cover Inc, San Francisco, CA 94107 USA.
   Stanford Univ, Dept Comp Sci, Stanford, CA 94305 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Stony Brook; Stanford University
RP Foster, JS (corresponding author), Univ Maryland, Dept Comp Sci, AV Williams Bldg 115, College Pk, MD 20742 USA.
EM ifoster@cs.umd.edu; rtjohnson@cs.sunysb.edu; jkodumal@coverity.com;
   aiken@cs.stanford.edu
OI Aiken, Alex/0000-0002-3723-9555
CR Abadi Martin., 1999, POPL, P147, DOI [10.1145/292540.292555, DOI 10.1145/292540.292555]
   AIKEN A, 2003, PLDI 03, P129
   [Anonymous], LNCS
   [Anonymous], P 26 ACM SIGPLAN SIG
   [Anonymous], 1990, Introduction to Lattices and Order
   [Anonymous], 2000, Programming Perl
   [Anonymous], POPL 88
   [Anonymous], PLDI 98
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   *ANSI, 1999, 98991999 ANSI ISO IE
   *ANSI, 1989, X31591989
   BAILLEUX C, 2000, MORE SECURITY PROBLE
   BALI T, 2003, P 30 ANN ACM SIGPLAN
   Ball T., 2002, POPL 02, P1
   Bishop M, 1996, COMPUT SYST, V9, P131
   BROADWELL P, 2003, P 12 US SEC S WASH D
   Bush WR, 2000, SOFTWARE PRACT EXPER, V30, P775, DOI 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H
   *CERT, 2001, CERT ADV CA200119 CO
   Chandra S., 1999, Proceedings of the 1999 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering. (Toulouse, P66
   CHIN B, 2005, P 2005 ACM SIGPLAN C
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   COWAN C, 2001, P 10 US SEC S WASH D
   DAS M, 2001, LECT NOTES COMPUTER, V2126
   Das Manuvir., 2002, PLDI, P57, DOI DOI 10.1145/512529.512538
   DEKOK A, 2000, PSCAN LTD PROBLEM SC
   DELINE R, 2001, P 2001 ACM SIGPLAN C
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DETLEFS DL, 1998, 159 COMP SYST RES CT
   Eifrig J., 1995, ELECT NOTES THEORETI, V1
   ENGLER D, 2000, P 4 S OP SYST DES IM
   FAHNDRICH M, 1999, THESIS U CALIFORNIA
   FAHNDRICH M, 2002, PLDI 02, P13
   FLANAGAN C, 1996, P 1996 ACM SIGPLAN C, P23
   Flanagan C, 2001, LNCS, V2021, P500, DOI DOI 10.1007/3-540-45251-6_29
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   Foster J. S., 2002, THESIS U CALIFORNIA
   FOSTER JS, 1999, P 1999 ACM SIGPLAN C, P192
   FRASUNEK P, 2001, PORTS 24733 MARS NWE
   FRASUNEK P, 2001, FORMAT STRING VULNER
   FREEMAN T, 1991, P ACM SIGPLAN C PROG, P268, DOI DOI 10.1145/113445.113468
   Gates B, 2002, TRUSTWORTHY COMPUTIN
   GAY D, 2001, P ACM C PROGR LANG D, P70
   GIFFORD DK, 1987, FX 87 REFERENCE MANU
   GREENFIELDBOYCE D, 2004, P WORKSH ECL TECHN E
   GROSSMAN D, 2002, P 2002 ACM SIGPLAN C
   GROSSMAN D, 2001, 20011855 CORN U DEP
   HALLEM S, 2002, PLDI, P00069, DOI DOI 10.1145/512529.512539
   HARRELSON C, 2001, PROGRAM ANAL MODE
   Heintze Nevin., 2001, PLDI 01, P254
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   HENGLEIN F, 1991, LECT NOTES COMPUT SC, V523, P448
   HENRION M, 2000, MUH IRC BOUNCER REMO
   Henzinger ThomasA., 2002, Proc. of the Symposium on Principles of Programming Languages. POPL, P58
   HORWITZ S, 1995, P 3 ACM SIGSOFT S FD, P104
   HUUSKONEN J, 2000, POSSIBILITY FORMAT C
   HUUSKONEN J, 2000, LINUX SECURIT AUDIT
   HUUSKONEN J, 2000, SOME POSSIBLE FORMAT
   JOHNSON R, 2004, P 13 US SEC S SAN DI
   Larochelle David, 2001, P 10 US SEC S WASH D
   LIBLIT B, 2000, P 27 ACM SIGPLAN SIG, P199
   Mandelbaum Yitzhak., 2003, Proceedings of the Eighth ACM SIGPLAN International Conference on Functional Programming, ICFP '03, P213, DOI DOI 10.1145/944705.944725
   Mars Climate Orbiter Mishap Investigation Board, 1999, PHAS 1 REP
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MITCHELL BJ, 1991, GEOLOGY N AM, V1, P245
   MOLLER A, 2001, PLDI, P221
   MOSSIN C, 1996, THESIS U COPENHAGEN
   Newsham Tim., 2000, Format string attacks
   *NIST, 2002, 023 NIST
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   *PITAC, 1999, PRES INF TECHN ADV C
   PRATIKAKIS P, 2004, P 19 ACM C OBJ OR PR, P206
   Pratt V., 1996, Fundamenta Informaticae, V28, P165
   REHOF J, 1996, LECT NOTES COMPUTER, V1145, P285
   Rehof J., 2001, POPL, P54, DOI 10.1145/373243.360208
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   ROBBINS TJ, 2001, LIBFORMAT PROTECTION
   Rustan K, 1998, LECT NOTES COMPUT SC, V1383, P302
   SAVOLA P, 2000, VERY PROBABLE REMOTE
   SHANKAR U, 2001, P 10 US SEC S WASH D
   SKALKA C, 2000, P 5 ACM SIGPLAN INT, P34
   Smith Geoffrey., 1998, POPL'98, Proceedings of the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, San Diego, CA, USA, January 19-21, P355, DOI [DOI 10.1145/268946.268975, 10.1145/268946.268975]
   SOLBERG KL, 1995, THESIS AARHUS U DENM
   STROUSTRUP B, 2005, C STYLE TECHNIQUE FA
   VIEGA J, 2000, P 16 ANN COMP SEC AP
   Volpano D., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P607, DOI 10.1007/BFb0030629
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yang J, 2003, THIRD IEEE SYMPOSIUM ON BIOINFORMATICS AND BIOENGINEERING - BIBE 2003, PROCEEDINGS, P321
   YONG SH, 1999, P ACM C PROGR LANG D, P91
   ZHANG X, 2002, P 11 US SEC S SAN FR
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 97
TC 35
Z9 44
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2006
VL 28
IS 6
BP 1035
EP 1087
DI 10.1145/1186632.1186635
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 119DD
UT WOS:000242991500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Buhr, PA
   Harji, AS
AF Buhr, PA
   Harji, AS
TI Implicit-signal monitors
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE automatic signal; concurrency; explicit signal; implicit signal;
   monitor; parallel; simulation
ID PROGRAMMING LANGUAGE; SYSTEM
AB An implicit (automatic) signal monitor uses a waltuntil predicate statement to construct synchronization, as opposed to an explicit-signal monitor using condition variables and signal/wait statements for synchronization. Of the two synchronization approaches, the implicit-signal monitor is often easier to use and prove correct, but has an inherently high execution cost. Hence, its primary use is for prototyping concurrent systems using monitors, where speed and accuracy of software development override execution performance. After a concurrent system is working, any implicit-signal monitor that is a performance bottleneck can be converted to an explicit-signal monitor. Unfortunately, many monitor-based concurrency systems provide only explicit-signal monitors, precluding the design benefits of implicit-signal monitors.
   This article presents a historical look at the development of the implicit-signal monitor in relation to its counterpart the explicit-signal monitor. An analysis of the different kinds of implicit-signal monitors shows the effects certain design decisions have on the problems that can be solved and the performance of the solutions. Finally, an extensive discussion is presented on simulating an implicit-signal monitor via different explicit-signal monitors. These simulations are reasonably complex, depending on the kind of explicit-signal monitor available for the simulation and the desired semantics required for the implicit-signal monitor. Interestingly, the complexity of the simulations also illustrates certain deficiencies with explicit-signal monitors, which are discussed in detail. Performance comparisons are made among the different simulations with monitors from the concurrent systems PThreads, Java, and mu C++.
C1 Univ Waterloo, Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Buhr, PA (corresponding author), Univ Waterloo, Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM pabuhr@plg.uwaterloo.ca; asharji@plg.uwaterloo.ca
CR Andrews G.R., 2000, Foundations of Multithreaded, Parallel, and Distributed Programming
   [Anonymous], 1973, Operating System Principles
   [Anonymous], [No title captured]
   BENARI M, 1982, PRINCIPLES CONCURREN
   Bernstein A.J., 1993, Concurrency in Programming and Database Systems
   BRINCHHANSEN P, 1972, COMMUN ACM, V15, P574
   BUHR PA, 1992, SOFTWARE PRACT EXPER, V22, P137, DOI 10.1002/spe.4380220204
   BUHR PA, 1995, ACM COMPUT SURV, V27, P63, DOI 10.1145/214037.214100
   BUHR PA, 2004, MUC ANNOTATED REFERE
   Butenhof David R., 1997, Programming with POSIX threads
   Campbell RH, 1974, LECT NOTES COMPUTER, V16
   CARDELLI L, 1988, 31 SYST RES CTR
   CHERITON DR, 1988, COMMUN ACM, V31, P314, DOI 10.1145/42392.42400
   Cheriton DR, 1982, THOTH SYSTEM MULTIPR
   COURTOIS PJ, 1971, COMMUN ACM, V14, P667, DOI 10.1145/362759.362813
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P341, DOI 10.1145/363095.363143
   *ECMA INT STAND IN, 2002, ECMA334 INT STAND IN
   Francez N., 1996, INTERACTING PROCESSE
   GENTLEMAN WM, 1985, 24685 NAT RES COUNC
   Gosling J., 2000, The Java Language Specification
   Hansen P. B., 1973, Computing Surveys, V5, P223, DOI 10.1145/356622.356624
   Hansen P. B., 1972, Acta Informatica, V1, P190, DOI 10.1007/BF00288684
   Hansen P. B., 1975, IEEE Transactions on Software Engineering, VSE-1, P199, DOI 10.1109/TSE.1975.6312840
   HANSEN PB, 1981, SOFTWARE PRACT EXPER, V11, P363, DOI 10.1002/spe.4380110404
   Hasselbring W, 2000, ACM COMPUT SURV, V32, P43, DOI 10.1145/349194.349199
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   HOARE CAR, 1972, OPERATING SYSTEMS TE, P61
   HOLT RC, 1988, COMMUN ACM, V31, P1410, DOI 10.1145/53580.53581
   HOLT RC, 1992, TURING REFERENCE MAN
   *INT INC, 1995, 86521995E ISOIEC
   KESSELS JLW, 1977, COMMUN ACM, V20, P500, DOI 10.1145/359636.359710
   LAMPSON BW, 1980, COMMUN ACM, V23, P105, DOI 10.1145/358818.358824
   Lea D., 2000, CONCURRENT PROGRAMMI
   Mitchell JG, 1979, CSL793 XER PAL ALT R
   NELSON G, 1991, PRENTICE HALL SERIES
   RAJ RK, 1991, SOFTWARE PRACT EXPER, V21, P91, DOI 10.1002/spe.4380210107
   Stroustrup B., 1994, The Design and Evolution of C++
   WRITH N, 1988, TEXTS MONOGRAPHS COM, V2
NR 38
TC 5
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2005
VL 27
IS 6
BP 1270
EP 1343
DI 10.1145/1108970.1108975
PG 74
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 005EG
UT WOS:000234804800005
OA Bronze
DA 2024-07-18
ER

PT J
AU Hall, MW
   Amarasinghe, SP
   Murphy, BR
   Liao, SW
   Lam, MS
AF Hall, MW
   Amarasinghe, SP
   Murphy, BR
   Liao, SW
   Lam, MS
TI Interprocedural parallelization analysis in SUIF
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; analysis; experimentation; performance; data dependence
   analysis; interprocedural data-flow analysis; parallelization; symbolic
   analysis
ID DATA-FLOW ANALYSIS; PATH PROBLEMS; ALGORITHM; COMPILER
AB As shared-memory multiprocessor systems become widely available, there is an increasing need for tools to simplify the task of developing parallel programs. This paper describes one such tool, the automatic parallelization system in the Stanford SUIF compiler. This article represents a culmination of a several-year research effort aimed at making parallelizing compilers significantly more effective. We have developed a system that performs full interprocedural parallelization analyses, including array privatization analysis, array reduction recognition, and a suite of scalar dataflow analyses including symbolic analysis. These analyses collaborate in an integrated fashion to exploit coarse-grain parallel loops, computationally intensive loops that can execute on multiple processors independently with no cross-processor synchronization or communication. The system has successfully parallelized large interprocedural loops over a thousand lines of code completely automatically from sequential applications.
   This article provides a comprehensive description of the analyses in the SUIF system. We also present extensive empirical results on four benchmark suites, showing the contribution of individual analysis techniques both in executing more of the computation in parallel, and in increasing the granularity of the parallel computations. These results demonstrate the importance of interprocedural array data-flow analysis, array privatization and array reduction recognition; a third of the programs spend more than 50% of their execution time in computations that are parallelized with these techniques. Overall, these results indicate that automatic parallelization can be effective on sequential scientific computations, but only if the compiler incorporates all of these analyses.
C1 Univ So Calif, Inst Informat Sci, Marina Del Rey, CA 90292 USA.
   MIT, Comp Sci Lab, Cambridge, MA 02139 USA.
   Stanford Univ, Comp Sci Lab, Stanford, CA 94305 USA.
   Intel Corp, Santa Clara, CA 95051 USA.
C3 University of Southern California; Massachusetts Institute of Technology
   (MIT); Stanford University; Intel Corporation
RP Univ So Calif, Inst Informat Sci, 4676 Admiral Way, Marina Del Rey, CA 90292 USA.
EM mhall@ISI.edu; saman@lcs.mit.edu; brian.r.murphy@intel.com;
   shih-wei.liao@intel.com; lam@cs.stanford.edu
OI Hall, Mary/0000-0002-3058-7573
CR ADVE V, 1994, IEEE PARALL DISTRIB, V2, P48, DOI 10.1109/M-PDT.1994.329801
   Aho A.V., 1986, COMPILERS PRINCIPLES
   ALLEN FE, 1976, COMMUN ACM, V19, P137, DOI 10.1145/360018.360025
   AMARASINGHE S, 1997, THESIS STANFORD U ST
   Amarasinghe SP, 1996, IEEE MICRO, V16, P52, DOI 10.1109/40.502406
   AMMARGUELLAT Z, 1990, P SIGPLAN 90 C PROGR
   [Anonymous], 1990, CMUCS90190 SCH COMP
   BAILEY DH, 1991, INT J SUPERCOMPUT AP, V5, P63, DOI 10.1177/109434209100500306
   BALASUNDARAM V, 1989, P SIGPLAN 89 C PROGR
   Ball J. E., 1979, SIGPLAN Notices, V14, P214, DOI 10.1145/872732.806972
   Banerjee U.K., 1988, Dependence Analysis for Supercomputing
   BANNING JP, 1979, P 6 ANN S PRINC PROG
   Blume W, 1996, COMPUTER, V29, P78, DOI 10.1109/2.546612
   BLUME W, 1992, IEEE T PARALL DISTR, V3, P643, DOI 10.1109/71.180621
   BLUME W, 1995, THESIS
   BLUME W, 1994, P SUPERCOMPUTING 94
   Bugnion E., 1996, P 7 INT C ARCH SUPP
   BURKE M, 1986, P SIGPLAN 86 S COMP
   COOPER K, 1984, P ACM SIGPLAN S COMP, V19, P247
   COOPER K, 1993, COMPUT LANG, V19, P2
   COOPER KD, 1991, SOFTWARE PRACT EXPER, V21, P581, DOI 10.1002/spe.4380210604
   COOPER KD, 1995, COMMUN PURE APPL MAT, P48
   CREUSILLET B, 1996, THESIS ECOLE MINES P
   CREUSILLET B, 1995, P 8 INT WORKSH LANG
   CYBENKO G, 1990, P 1990 ACM INT C SUP
   Dantzig GB., 1973, Journal of Combinatorial Theory (A), V14, P288, DOI DOI 10.1016/0097-3165(73)90004-6
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   FEAUTRIER P, 1988, RAIRO-RECH OPER, V22, P243
   FEAUTRIER P, 1988, P 2 INT C SUP ST MAL
   GOFF G, 1991, P SIGPLAN 91 C PROGR
   GRAHAM SL, 1976, J ACM, V23, P172, DOI 10.1145/321921.321939
   GRANSTON ED, 1991, P SUPERCOMPUTING 91
   GROSS T, 1990, SOFTWARE PRACT EXPER, V20, P133, DOI 10.1002/spe.4380200203
   GROUT J, 1995, THESIS U ILLINOIS UR
   HAGHIGHAT M, 1996, ACM T PROG LANG SYST, V18
   HALL M, 1996, IEEE COMPUT, V29, P12
   HALL M, 1995, P SUP 95 SAN DIEG CA
   Hall M. W., 1992, ACM Letters on Programming Languages and Systems, V1, P227, DOI 10.1145/151640.151643
   HALL MW, 1995, SIAM PROC S, P650
   HALL MW, 1995, P 8 INT WORKSH LANG
   HALL MW, 1993, P 6 WORKSH LANG COMP
   Harrison W. L.  III, 1989, LISP and Symbolic Computation, V2, P179, DOI 10.1007/BF01808954
   HAVLAK P, 1991, IEEE T PARALL DISTR, V2, P350, DOI 10.1109/71.86110
   Havlak P., 1994, THESIS RICE U
   Hind M., 1994, Scientific Programming, V3, P255
   HUMMEL SF, 1992, COMMUN ACM, V35, P90, DOI 10.1145/135226.135232
   IRIGOIN F, 1992, P NSF CNRS WORKSH EN
   Irigoin F., 1991, P 1991 ACM INT C SUP
   KAM J, 1976, J ACM, V23, P159
   Kennedy K., 1976, SIAM Journal on Computing, V5, P158, DOI 10.1137/0205014
   LANDI W, 1992, SIGPLAN NOTICES, V27, P235, DOI 10.1145/143103.143137
   LI Z, 1988, P ACM SIGPLAN S PAR
   MARLOWE TJ, 1990, ACTA INFORM, V28, P121, DOI 10.1007/BF01237234
   MASLOV V, 1992, P ACM SIGPLAN 92 C P
   Maydan D., 1991, P SIGPLAN 91 C PROGR
   Maydan D.E., 1993, POPL '93: Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P2
   MAYDAN DE, 1992, P NSF NCRD WORKSH AD
   MOWRY TC, 1992, P ASPLOS, V5, P62
   PADUA DA, 1986, COMMUN ACM, V29, P1184, DOI 10.1145/7902.7904
   POLYCHRONOPOULO.C, 1986, THESIS U ILLINOIS UR
   POTTENGER B, 1995, P 1995 ACM INT C SUP
   PUGH W, 1992, P SIGPLAN 92 C PROGR
   REILLY J, 1995, SPEC NEWLETTER SPEC
   RIBAS H, 1990, P 1990 INT C PAR PRO
   RYDER BG, 1987, SIGPLAN NOTICES, V22, P171, DOI 10.1145/390012.24228
   Schrijver Alexander, 1999, THEORY LINEAR INTEGE
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   SINGH JP, 1991, P INT S SHAR MEM MUL
   TARJAN RE, 1981, J ACM, V28, P577, DOI 10.1145/322261.322272
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   TJIANG SWK, 1992, SIGPLAN NOTICES, V27, P82, DOI 10.1145/143103.143120
   TRIOLET R, 1986, P SIGPLAN 86 S COMP
   TSENG C, 1995, P 5 ACM SIGPLAN S PR, P144
   TU P, 1993, P 6 WORKSH LANG COMP
   TU P, 1995, THESIS U ILLINOIS UR
   Ullman J. D., 1973, Acta Informatica, V2, P191, DOI 10.1007/BF00289078
   UNIEJEWSKI J, 1989, SPEC NEWSLETTER, V1
   WOLF ME, 1992, THESIS STANFORD U
   WOLFE M, 1987, INT J PARALLEL PROG, V16, P137, DOI 10.1007/BF01379099
   [No title captured]
NR 81
TC 17
Z9 31
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2005
VL 27
IS 4
BP 662
EP 731
DI 10.1145/1075382.1075385
PG 70
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 956AK
UT WOS:000231271100003
DA 2024-07-18
ER

PT J
AU Park, J
   Moon, SM
AF Park, J
   Moon, SM
TI Optimistic register coalescing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; copy coalescing; graph coloring; register
   allocation; noncopy; coalescing
AB Graph-coloring register allocators eliminate copies by coalescing the source and target nodes of a copy if they do not interfere in the interference graph. Coalescing, however, can be harmful to the colorability of the graph because it tends to yield a graph with nodes of higher degrees. Unlike aggressive coalescing, which coalesces any pair of noninterfering copy-related nodes, conservative coalescing or iterated coalescing perform safe coalescing that preserves the colorability. Unfortunately, these heuristics give up coalescing too early, losing many opportunities for coalescing that would turn out to be safe. Moreover, they ignore the fact that coalescing may even improve the colorability of the graph by reducing the degree of neighbor nodes that are interfering with both the source and target nodes being coalesced. This article proposes a new heuristic called optimistic coalescing which optimistically performs aggressive coalescing, thus exploiting the positive impact of coalescing aggressively, but when a coalesced node is to be spilled, it is split back into separate nodes. Since there is a better chance of coloring one of those splits, we can reduce the overall spill amount.
C1 Seoul Natl Univ, Sch Elect Engn & Comp Sci, Seoul 151742, South Korea.
C3 Seoul National University (SNU)
RP Seoul Natl Univ, Sch Elect Engn & Comp Sci, San 56-1, Seoul 151742, South Korea.
EM smoon@altair.snu.ac.kr
CR [Anonymous], P ACM SIGPLAN C PROG
   APPEL A, 1991, P 3 INT S PROGR LANG
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Bergner P, 1997, ACM SIGPLAN NOTICES, V32, P287, DOI 10.1145/258916.258941
   BRIGGS P, 1994, ACM T PROGR LANG SYS, V16, P428, DOI 10.1145/177492.177575
   Briggs Preston, 1992, Ph. D. Dissertation
   Chaitin GJ, 1982, P ACM SIGPLAN 1982 S, P201
   CHOW FC, 1990, ACM T PROGR LANG SYS, V12, P501, DOI 10.1145/88616.88621
   COOPER KD, 1998, P 1998 INT COMP CONS
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   George L, 1996, ACM T PROGR LANG SYS, V18, P300, DOI 10.1145/229542.229546
   Kim S, 2002, IEEE T COMPUT, V51, P977, DOI 10.1109/TC.2002.1032620
   Lam M., 1988, P ACM SIGPLAN 1988 C, P318, DOI [10.1145/53990.54022, DOI 10.1145/53990.54022]
   LUEH GY, 1997, THESIS CARNEGIE MELL
   Moon SM, 1998, IEE P-COMPUT DIG T, V145, P215, DOI 10.1049/ip-cdt:19982025
   Moon SM, 1997, ACM T PROGR LANG SYS, V19, P853, DOI 10.1145/267959.269966
   VEGDAHL SR, 1999, P ACM SIGPLAN 1999 C, P150
   [No title captured]
   [No title captured]
NR 19
TC 24
Z9 34
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2004
VL 26
IS 4
BP 735
EP 765
DI 10.1145/1011508.1011512
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 843CN
UT WOS:000223053200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Pottier, F
   Simonet, V
AF Pottier, F
   Simonet, V
TI Information flow inference for ML
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; security; theory; constraint-based analysis; non-interference
AB This paper presents a type-based information flow analysis for a call-by-value lambda-calculus equipped with references, exceptions and let-polymorphism, which we refer to as ML. The type system is constraint-based and has decidable type inference. Its noninterference proof is reasonably lightweight, thanks to the use of a number of orthogonal techniques. First, A syntactic segregation between values and expressions allows a lighter formulation of the type system. Second, noninterference is reduced to subject reduction for a nonstandard language extension. Lastly, a semi-syntactic approach to type soundness allows dealing with constraint-based polymorphism separately.
C1 Inst Natl Rech Informat & Automat, F-78153 Le Chesnay, France.
RP Inst Natl Rech Informat & Automat, BP 105, F-78153 Le Chesnay, France.
EM Francois.Pottier@inria.fr; Vincent.Simonet@inria.fr
OI Pottier, Francois/0000-0002-4069-1235
CR ABADI M, 1999, 26 ACM S PRINC PROGR, P147
   Abadi M., 1996, P INT C FUNCT PROGR, P83
   [Anonymous], 1975, MTR2997 MITRE CORP
   [Anonymous], P ACM INT C FUNCT PR
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], P ACM S PRINC PROGR
   Banerjee A, 2002, P IEEE CSFW, P253
   Denning D.E.R., 1982, CRYPTOGRAPHY DATA SE, V112, DOI [10.5555/539308, DOI 10.5555/539308]
   FAHNDRICH M, 1999, THESIS U CALIFORNIA
   FIELD J, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P307, DOI 10.1145/91556.91679
   Flanagan Cormac, 1993, SIGPLAN Conf. Programming Language Design and Impl. (PLDI'93), P237, DOI [DOI 10.1145/155090.155113, 10.1145/155090.155113]
   François P, 2002, P IEEE CSFW, P320, DOI 10.1109/CSFW.2002.1021826
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   HEINTZE N, 1998, 25 ACM S PRINC PROGR, P365
   Leroy X., 2002, The Objective Caml system, documentation and user's manual
   Leroy Xavier, 1997, CAML LIGHT SYSTEM RE
   Moggi Eugenio, 1989, Technical Report ECS-LFCS-90-113
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   MYERS AC, 1999, MITLCSTR783
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   POTTIER F, 2002, INFORMATION FLOW INF
   POTTIER F, 2000, WALLACE EFFICIENT IM
   POTTIER F, 2001, 4150 INRIA
   REHOF J, 1997, 24 ACM S PRINC PROGR, P278
   Remy D., 1993, Theoretical Aspects Of Object-Oriented Programming. Types
   Simonet V, 2002, P IEEE CSFW, P223
   SULZMANN M, 2000, COMPLETENESS CONSTRA
   Sulzmann Martin, 1999, ACRC99009 U S AUSTR
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Volpano D, 1997, P IEEE CSFW, P156, DOI 10.1109/CSFW.1997.596807
   VOLPANO D, 1997, LECT NOTES COMPUTER, V1214, P607
   Wadler P., 1992, MATH STRUCTURES COMP, V2, P461
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zdancewic S., 2002, Higher-Order and Symbolic Computation, V15, P209, DOI 10.1023/A:1020843229247
   ZDANCEWIC S, 2001, LECT NOTES COMPUTER
NR 37
TC 133
Z9 163
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2003
VL 25
IS 1
BP 117
EP 158
DI 10.1145/596980.596983
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 637RJ
UT WOS:000180526400003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Boruch-Gruszecki, A
   Odersky, M
   Lee, E
   Lhoták, O
   Brachthäuser, J
AF Boruch-Gruszecki, Aleksander
   Odersky, Martin
   Lee, Edward
   Lhotak, Ondrej
   Brachthaeuser, Jonathan
TI Capturing Types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Scala; type systems; effects; resources; capabilities
AB Type systems usually characterize the shape of values but not their free variables. However, many desirable safety properties could be guaranteed if one knew the free variables captured by values. We describe CC<:square, a calculus where such captured variables are succinctly represented in types, and show it can be used to safely implement effects and effect polymorphism via scoped capabilities. We discuss how the decision to track captured variables guides key aspects of the calculus, and show that CC<:square admits simple and intuitive types for common data structures and their typical usage patterns. We demonstrate how these ideas can be used to guide the implementation of capture checking in a practical programming language.
C1 [Boruch-Gruszecki, Aleksander; Odersky, Martin] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
   [Lee, Edward; Lhotak, Ondrej] Univ Waterloo, Waterloo, ON, Canada.
   [Brachthaeuser, Jonathan] Karls Univ Tubingen, Tubingen, Germany.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; University of Waterloo; Eberhard Karls University
   of Tubingen
RP Boruch-Gruszecki, A (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
EM aleksander.boruch-gruszecki@epfl.ch; martin.odersky@epfl.ch;
   e45lee@uwaterloo.ca; olhotak@uwaterloo.ca;
   jonathan.brachthaeuser@unituebingen.de
OI Boruch-Gruszecki, Aleksander/0000-0001-5769-6684; Odersky,
   Martin/0009-0005-3923-8993; Brachthauser, Jonathan
   Immanuel/0000-0001-9128-0391
FU Natural Sciences and Engineering Research Council of Canada
FX This research was partially funded by the Natural Sciences and
   Engineering Research Council of Canada.
CR Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Bao YY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485516
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Boruch-Gruszecki Aleksander, 2021, arXiv
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   Bracha G, 2010, LECT NOTES COMPUT SC, V6183, P405, DOI 10.1007/978-3-642-14107-2_20
   Brachthäuser JI, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527320
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Choudhury V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408993
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Cook WR, 2009, ACM SIGPLAN NOTICES, V44, P557, DOI 10.1145/1639949.1640133
   Craig A, 2018, LECT NOTES COMPUT SC, V11232, P231, DOI 10.1007/978-3-030-02450-5_14
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Drossopoulou Sophia, 2016, P 18 WORKSHOP FORMAL, P1, DOI [10.1145/2955811.2955821, DOI 10.1145/2955811.2955821]
   Figueroa I, 2016, SCI COMPUT PROGRAM, V119, P3, DOI 10.1016/j.scico.2015.11.010
   Fourment Joseph, 2023, Technical Report
   Siek JG, 2011, Arxiv, DOI arXiv:1201.0023
   Gordon Colin S., 2020, DESIGNING STATIC CAP, V166, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Hannan J., 1998, Journal of Functional Programming, V8, P239, DOI 10.1017/S0956796898003025
   Hatcliff J., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P458, DOI 10.1145/174675.178053
   Launchbury J, 1997, ACM SIGPLAN NOTICES, V32, P227, DOI 10.1145/258949.258970
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Liu Fengyun, 2016, Master's Thesis
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Melicher Darya, 2017, P 31 EUROPEAN C OBJE
   Melicher Darya, 2020, Ph.D. Dissertation
   Miller M. S., 2006, Ph.D. Dissertation
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   Odersky Martin, 2021, SCALA 2021: Proceedings of the 12th ACM SIGPLAN International Symposium on Scala, DOI 10.1145/3486610.3486893
   Odersky M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158130
   Odersky Martin, 2020, Extension Methods: Scala 3 Language Reference Page
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Rytz L, 2012, LECT NOTES COMPUT SC, V7313, P258, DOI 10.1007/978-3-642-31057-7_13
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Scala, 2022, Scala 3: Capture Checking
   Scala, 2022, Scala 3 API
   Scala, 2022, The Scala 3 compiler, also known as Dotty
   Scherer Gabriel, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P710, DOI 10.1007/978-3-642-45221-5_47
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Xu Yichen, 2023, Technical Report
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 53
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2023
VL 45
IS 4
AR 21
DI 10.1145/3618003
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IO8S1
UT WOS:001167368600002
DA 2024-07-18
ER

PT J
AU Yip, E
   Girault, A
   Roop, PS
   Biglari-Abhari, M
AF Yip, Eugene
   Girault, Alain
   Roop, Partha S.
   Biglari-Abhari, Morteza
TI Synchronous Deterministic Parallel Programming for Multi-Cores with
   ForeC
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Programming language; semantics; parallelism; synchronous; determinism;
   reactive programming; multi-core; worst-case execution time; code
   generation
ID REAL-TIME APPLICATIONS; TIMING ANALYSIS; LANGUAGE; EXECUTION; SEMANTICS;
   DESIGN; MODELS; CODE
AB Embedded real-time systems are tightly integrated with their physical environment. Their correctness depends both on the outputs and timeliness of their computations. The increasing use of multi-core processors in such systems is pushing embedded programmers to be parallel programming experts. However, parallel programming is challenging because of the skills, experiences, and knowledge needed to avoid common parallel programming traps and pitfalls. This article proposes the ForeC synchronous multi-threaded programming language for the deterministic, parallel, and reactive programming of embedded multi-cores. The synchronous semantics of ForeC is designed to greatly simplify the understanding and debugging of parallel programs. ForeC ensures that ForeC programs can be compiled efficiently for parallel execution and be amenable to static timing analysis. ForeC's main innovation is its shared variable semantics that provides thread isolation and deterministic thread communication. All ForeC programs are correct by construction and deadlock free because no non-deterministic constructs are needed. We have benchmarked our ForeC compiler with several medium-sized programs (e.g., a 2.274-line ForeC program with up to 26 threads and distributed on up to 10 cores, which was based on a 2.155-line non-multi-threaded C program). These benchmark programs show that ForeC can achieve better parallel performance than Esterel, a widely used imperative synchronous language for concurrent safety-critical systems, and is competitive in performance to OpenMP, a popular desktop solution for parallel programming (which implements classical multi-threading, hence is intrinsically non-deterministic). We also demonstrate that the worst-case execution time of ForeC programs can be estimated to a high degree of precision.
C1 [Yip, Eugene] Univ Bamberg, Software Technol Res Grp, D-96047 Bamberg, Germany.
   [Girault, Alain] Univ Grenoble Alpes, INRIA, CNRS, Grenoble INP,LIG, Grenoble, France.
   [Roop, Partha S.; Biglari-Abhari, Morteza] Univ Auckland, Dept ECE, Auckland, New Zealand.
C3 Otto Friedrich University Bamberg; Inria; Communaute Universite Grenoble
   Alpes; Institut National Polytechnique de Grenoble; Universite Grenoble
   Alpes (UGA); Centre National de la Recherche Scientifique (CNRS);
   University of Auckland
RP Yip, E (corresponding author), Univ Bamberg, Software Technol Res Grp, D-96047 Bamberg, Germany.
EM eugene.yip@uni-bamberg.de; alain.girault@inria.fr;
   p.roop@auckland.ac.nz; m.abhari@auckland.ac.nz
RI Yip, Eugene/JSK-1542-2023
OI Yip, Eugene/0009-0009-2840-6567
FU RIPPES INRIA International Lab
FX This work was supported in part by the RIPPES INRIA International Lab.
CR Aguado Joaquin, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P86, DOI 10.1007/978-3-319-89884-1_4
   Andalam S, 2014, IEEE T COMPUT, V63, P1600, DOI 10.1109/TC.2013.28
   Andalam Sidharta, 2011, P DESIGN AUTOMATION, P1
   Anderson Z, 2008, ACM SIGPLAN NOTICES, V43, P149, DOI 10.1145/1379022.1375600
   [Anonymous], 2011, ISO/ IEC 9899: 2011 Programming languages-C. Standard 9899:2011
   [Anonymous], 2011, 2626212011 ISO
   [Anonymous], 2008, P 29 IEEE REAL TIME
   [Anonymous], 2010, IEC 61508
   [Anonymous], 2012, INT THREAD BUILD BLO
   [Anonymous], 2013, P 21 INT C REAL TIME
   [Anonymous], 1990, Computer Architecture: A Quantitative Approach
   [Anonymous], 1981, Technical Report DAIMI FN-19
   Aviram Amittai, 2011, P 3 USENIX WORKSHOP, P1
   Axer P, 2014, ACM T EMBED COMPUT S, V13, DOI 10.1145/2560033
   Baudisch D, 2010, DES AUT TEST EUROPE, P949
   Baudisch D, 2010, IFIP ADV INF COMM TE, V329, P169
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Benveniste A, 2000, INFORM COMPUT, V163, P125, DOI [10.1006/inco.2000.9999, 10.1006/inco.2000.2898]
   Bergan T, 2010, ACM SIGPLAN NOTICES, V45, P53, DOI 10.1145/1735971.1736029
   Bergan Tom., 2010, Proceedings of the Ninth USENIX Conference on Operating Systems Design and Implementation, OSDI'10, P1
   Berry G., 1993, Foundations of Software Technology and Theoretical Computer Science. 13th Conference Proceedings, P72
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Berry G., 2000, ESTEREL V5 LANGUAGE
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Boldt M, 2008, ELECTRON NOTES THEOR, V203, P65, DOI 10.1016/j.entcs.2008.05.011
   BOUSSINOT F, 1991, SOFTWARE PRACT EXPER, V21, P401, DOI 10.1002/spe.4380210406
   Boussinot Frederic, 1993, 1849 INRIA
   Brandt J, 2009, NINTH INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P32, DOI 10.1109/ACSD.2009.24
   Briere Dominique, 1994, P AVIONICS C EXHIBIT
   Buja G, 2012, IEEE IND ELECTRON M, V6, P4, DOI 10.1109/MIE.2012.2207815
   Burckhardt S, 2011, LECT NOTES COMPUT SC, V6602, P116, DOI 10.1007/978-3-642-19718-5_7
   Buss M, 2010, SCI COMPUT PROGRAM, V75, P921, DOI 10.1016/j.scico.2009.08.002
   Caspi P, 2005, CONTROL ENGN SER BIR, P395
   Caspi P, 1999, IEEE T SOFTWARE ENG, V25, P416, DOI 10.1109/32.798329
   Caspi P, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1331331.1331339
   Charlesworth A, 2002, ACM T PROGR LANG SYS, V24, P554, DOI 10.1145/570886.570889
   Closse E, 2001, LECT NOTES COMPUT SC, V2102, P391
   Cohen A, 2012, EMSOFT '12: PROCEEDINGS OF THE TENTH AMC INTERNATIONAL CONFERENCE ON EMBEDDED SOFTWARE 2012, P197
   Colaço JL, 2003, LECT NOTES COMPUT SC, V2855, P134
   Cullmann Christoph, 2010, P 2010 C EMBEDDED RE
   Di Natale M, 2012, DES AUT TEST EUROPE, P206
   Di Natale M, 2010, IEEE T IND INFORM, V6, P637, DOI 10.1109/TII.2010.2072511
   Diaz J, 2012, IEEE T PARALL DISTR, V23, P1369, DOI 10.1109/TPDS.2011.308
   Ding HP, 2013, ASIA S PACIF DES AUT, P735, DOI 10.1109/ASPDAC.2013.6509688
   Dunn WR, 2003, COMPUTER, V36, P40, DOI 10.1109/MC.2003.1244533
   Edwards SA, 2007, DES AUT CON, P264, DOI 10.1109/DAC.2007.375165
   Edwards SA, 2007, EURASIP J EMBED SYST, DOI 10.1155/2007/52651
   Edwards SA, 2009, PR IEEE COMP DESIGN, P54, DOI 10.1109/ICCD.2009.5413177
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/640136.604176
   GARDNER M, 1970, SCI AM, V223, P120, DOI 10.1038/scientificamerican1070-120
   Gebhard Gernot, 2011, BRINGING THEORY PRAC, V18, P1
   Girault Alain, 2005, P INT WORKSHOP SYNCH
   Girault Alain, 2006, ACM T EMBED COMPUT S, V5, P687
   GNU, 2013, GNU RAD
   Goubier T, 2011, LECT NOTES COMPUT SC, V7916, P385, DOI 10.1007/978-3-642-24650-0_33
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D., 1985, Logics and Models of Concurrent Systems, VF-13, P477, DOI [DOI 10.1007/978-3-642-82453-1_17, 10.1007/978-3-642-82453-1_17]
   Hatton L, 2004, INFORM SOFTWARE TECH, V46, P465, DOI 10.1016/j.infsof.2003.09.016
   Hili N, 2019, IEEE INT CONF EMBED
   Hili Nicolas, 2019, P 2019 FOR SPEC DES, P1
   Holzmann GJ, 2006, COMPUTER, V39, P95, DOI 10.1109/MC.2006.212
   IEEE and The Open Group, 2008, POSIX 1 2008
   Intel, 2022, INT R VTUNE PROF
   Intel, 2012, INT CILK PLUS
   Jet Propulsion Laboratory, 2009, JPL I COD STAND C PR
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Ju L, 2012, REAL-TIME SYST, V48, P570, DOI 10.1007/s11241-012-9155-z
   Ju L, 2010, DES AUT CON, P48
   Karpov Andrey, 2011, PARALLEL LINT
   Kastner Daniel, 2012, Computer Safety, Reliability,and Security. Proceedings of SAFECOMP 2012 Workshops: Sassur, ASCoMS, DESEC4LCCI, ERCIM/EWICS, IWDE, P117, DOI 10.1007/978-3-642-33675-1_10
   Kessler CW, 1999, LECT NOTES COMPUT SC, V1593, P525
   Koenig Andrew., 1988, C TRAPS PITFALLS
   Kuo M, 2011, DES AUT CON, P480
   Lavagno L., 1999, Proceedings 1999 Design Automation Conference (Cat. No. 99CH36361), P511, DOI 10.1109/DAC.1999.781369
   Lee EA, 2006, COMPUTER, V39, P33, DOI 10.1109/MC.2006.180
   Lee EA, 2009, COMMUN ACM, V52, P70, DOI 10.1145/1506409.1506426
   LEGUERNIC P, 1991, P IEEE, V79, P1321, DOI 10.1109/5.97301
   Levy M, 2009, IEEE MICRO, V29, P7, DOI 10.1109/MM.2009.41
   Li X, 2012, IEEE T COMPUT, V61, P337, DOI 10.1109/TC.2010.246
   Liang Y, 2012, REAL-TIME SYST, V48, P638, DOI 10.1007/s11241-012-9160-2
   Lohstroh M, 2021, ACM T EMBED COMPUT S, V20, DOI 10.1145/3448128
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Lundqvist T., 1999, Proceedings 20th IEEE Real-Time Systems Symposium (Cat. No.99CB37054), P12, DOI 10.1109/REAL.1999.818824
   MARANINCHI F, 1992, LECT NOTES COMPUT SC, V630, P550
   MCDOWELL CE, 1989, COMPUT SURV, V21, P593, DOI 10.1145/76894.76897
   Mendler Michael, 2009, P DESIGN AUTOMATION
   Message Passing Interface Forum, 2012, MPI MESSAGE PASSING
   Motor Industry Software Reliability Association, 2013, MISRA C 2012 GUID US
   Nemer Fadia., 2006, WCET
   Norrish M, 1999, LECT NOTES COMPUT SC, V1576, P147
   Olszewski M, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1508284.1508256
   OpenMP Architecture Review Board, 2013, OpenMP application program interface version 4.0
   Pagetti C, 2011, DISCRETE EVENT DYN S, V21, P307, DOI 10.1007/s10626-011-0107-x
   Paolieri M., 2011, 2011 IEEE 17th International On-Line Testing Symposium (IOLTS 2011), P31, DOI 10.1109/IOLTS.2011.5993807
   Papailiopoulou Virginia, 2011, RR7577 INRIA
   Pop Antoniu., 2011, HIGH PERFORMANCE EMB, P5
   Potop-Butucaru Dumitru., 2007, Compiling Esterel, V1st
   Potop-Butucaru Dumitru, 2013, OASIcs, V30, P21, DOI [10.4230/OASIcs.WCET, DOI 10.4230/OASICS.WCET]
   Potop-Butucaru Dumitru, 2010, P INT C EMBEDDED SOF, P199
   Radio Technical Commission for Aeronautics, 1992, DO178B RAD TECHN COM
   Raman R, 2010, LECT NOTES COMPUT SC, V6418, P368, DOI 10.1007/978-3-642-16612-9_28
   Sajeewa Dayaratne M. W., 2006, P INT WORKSHOP SYNCH
   Salcic Z, 2006, MICROPROCESS MICROSY, V30, P72, DOI 10.1016/j.micpro.2005.05.001
   Schranzhofer A, 2011, IEEE REAL TIME, P213, DOI 10.1109/RTAS.2011.28
   Schwartz J. T., 1980, ACM Transactions on Programming Languages and Systems, V2, P484, DOI 10.1145/357114.357116
   Shah H, 2011, DES AUT TEST EUROPE, P1497
   Smyth S, 2019, DES AUT TEST EUROPE, P1281, DOI [10.23919/date.2019.8715081, 10.23919/DATE.2019.8715081]
   Smyth S, 2018, ACM T EMBED COMPUT S, V17, DOI 10.1145/3063129
   Souyris Jean, 2005, P INT WORKSH WORST C, P21
   STORER JA, 1982, J ACM, V29, P928, DOI 10.1145/322344.322346
   Tardieu O., 2006, P 6 ACM IEEE INT C E, P142
   Tardieu O, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216376
   The UPC Consortium, 2013, 13 UPC CONS
   Ungerer T, 2010, IEEE MICRO, V30, P66, DOI 10.1109/MM.2010.78
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   Vasudevan Nalini, 2009, P ACM S APPL COMPUTI, P1626
   von Hanxleden R, 2014, ACM SIGPLAN NOTICES, V49, P372, DOI [10.1145/2666356.2594310, 10.1145/2594291.2594310]
   von Hanxleden Reinhard, 2009, P 9 ACM IEEE INT C E, P225
   von Hanxleden Reinhard, 2013, P DESIGN AUTOMATION
   Wang J., 2013, 2013 IEEE International Symposium on Industrial Electronics, P1, DOI [DOI 10.4018/978-1-4666-1873-2, 10.1109/ISIE.2013.6563634, DOI 10.1109/ISIE.2013.6563634]
   Whitham J., 2009, PROC EMSOFT, P265, DOI [10.1145/1629335.1629371, DOI 10.1145/1629335.1629371]
   Whitham Jack, 2012, SCRATCHPAD MEMORY MA
   Wilhelm R, 2014, COMMUN ACM, V57, P94, DOI 10.1145/2500886
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Xilinx, 2012, MICROBLAZE PROC REF
   Yip E, 2016, 2016 IEEE 10TH INTERNATIONAL SYMPOSIUM ON EMBEDDED MULTICORE/MANY-CORE SYSTEMS-ON-CHIP (MCSOC), P297, DOI 10.1109/MCSoC.2016.13
   Yip E, 2013, INT CONF APPL CONCUR, P160, DOI 10.1109/ACSD.2013.19
   Yiqiang Ding, 2011, 2011 Proceedings of IEEE 14th International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing (ISORC 2011), P225, DOI 10.1109/ISORC.2011.35
   Yoong Li Hsien, 2006, P INT WORKSHOP SYNCH
   Yuan S., 2011, Proceedings of the 2011 14th Euromicro Conference on Digital System Design. Architectures, Methods and Tools. (DSD 2011), P727, DOI 10.1109/DSD.2011.97
   Yuan S, 2009, ELECTRON NOTES THEOR, V238, P37, DOI 10.1016/j.entcs.2008.01.005
   Yuan Simon, 2013, THESIS U AUCKLAND
   Zhang Yongli, 2011, 2011 Proceedings of IEEE International Conference on Computer Science and Automation Engineering (CSAE), P1, DOI 10.1109/CSAE.2011.5953158
   Zimmer M, 2014, IEEE REAL TIME, P101, DOI 10.1109/RTAS.2014.6925994
NR 136
TC 0
Z9 0
U1 2
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2023
VL 45
IS 2
AR 11
DI 10.1145/3591594
PG 74
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M2WV9
UT WOS:001028843500005
OA Bronze, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Andersen, L
   St-Amour, V
   Vitek, J
   Felleisen, M
AF Andersen, Leif
   St-Amour, Vincent
   Vitek, Jan
   Felleisen, Matthias
TI Feature-Specific Profiling
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Profiling; performance monitoring
AB While high-level languages come with significant readability and maintainability benefits, their performance remains difficult to predict. For example, programmers may unknowingly use language features inappropriately, which cause their programs to run slower than expected. To address this issue, we introduce feature-specific profiling, a technique that reports performance costs in terms of linguistic constructs. Feature-specific profilers help programmers find expensive uses of specific features of their language. We describe the architecture of a profiler that implements our approach, explain prototypes of the profiler for two languages with different characteristics and implementation strategies, and provide empirical evidence for the approach's general usefulness as a performance debugging tool.
C1 [Andersen, Leif; Vitek, Jan; Felleisen, Matthias] Northeastern Univ, CCIS, 440 Huntington Ave, Boston, MA 02115 USA.
   [St-Amour, Vincent] Northwestern Univ, Dept Elect Engn & Comp Sci, 2145 Sheridan Rd, Evanston, IL 60208 USA.
   [Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Northeastern University; Northwestern University; Czech Technical
   University Prague
RP Andersen, L (corresponding author), Northeastern Univ, CCIS, 440 Huntington Ave, Boston, MA 02115 USA.
EM leif@ccs.neu.edu; stamourv@eecs.northwestern.edu; j.vitek@neu.edu;
   matthias@ccs.neu.edu
RI Vitek, Jan/J-9051-2014; St-Amour, Vincent/P-7127-2018
FU National Science Foundation (NSF) [SHF 1544542, 1518844]; European
   Research Council (ERC) under the European Union's Horizon 2020 research
   and innovation program [695412]; Office of Navel Research (ONR)
   [503353]; Direct For Computer & Info Scie & Enginr; Division of
   Computing and Communication Foundations [1518844] Funding Source:
   National Science Foundation
FX This work was partially supported by the National Science Foundation
   (NSF) under Grants No. SHF 1544542 and No. 1518844, as well as the
   European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation program (Grant No. 695412), and finally the
   Office of Navel Research (ONR) Award No. 503353.
CR Amdahl G. M., 1967, P SPRING JOINT COMP
   [Anonymous], 2010, PLTTR20101 INC
   Binder W, 2011, CONCURR COMP-PRACT E, V23, P1749, DOI 10.1002/cpe.1760
   Clements J, 2001, LECT NOTES COMPUT SC, V2028, P320
   Clements John., 2008, Proc. Scheme and Functional Programming Works, P1
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   Dybvig R.K., 2009, Chez Scheme Version 8 User's Guide
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Flatt Matthew, 2009, P WORKSH SCHEM FUNCT
   Garnock-Jones T, 2014, LECT NOTES COMPUT SC, V8410, P473
   Hauswirth M., 2004, PROC 19 ANN C OBJECT, P251, DOI DOI 10.1145/1028976.1028998
   Hewitt C., 1973, P INT JOINT C ART IN
   Jovic M, 2011, SCI COMPUT PROGRAM, V76, P1054, DOI 10.1016/j.scico.2010.04.009
   Maebe Jonas., 2006, Proc. Conf. Object-Oriented Programming Systems, Languages, P153, DOI DOI 10.1145/1167515.1167487
   Marlow S, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P13
   McCarthy JA, 2010, ACM SIGPLAN NOTICES, V45, P567, DOI 10.1145/1932682.1869506
   Moore Scott, 2014, P USENIX S OP SYST D
   Morandat Floreal, 2012, EUR C OBJ OR PROGR E, DOI DOI 10.1007/978-3-642-31057-7_6
   Mytkowicz T, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P187, DOI 10.1145/1806596.1806618
   Nethercote Nicholas, 2007, SIGPLAN Notices, V42, P89, DOI 10.1145/1273442.1250746
   Pettyjohn G, 2005, ACM SIGPLAN NOTICES, V40, P216, DOI 10.1145/1090189.1086393
   R Development Core Team, 2016, R LANG DEF R DEV COR
   Singer J, 2008, SCI COMPUT PROGRAM, V70, P111, DOI 10.1016/j.scico.2007.07.006
   St-Amour V, 2015, LECT NOTES COMPUT SC, V9031, P49, DOI 10.1007/978-3-662-46663-6_3
   St-Amour V, 2012, ACM SIGPLAN NOTICES, V47, P163, DOI 10.1145/2398857.2384629
   Tamayo JM, 2012, ACM SIGPLAN NOTICES, V47, P983, DOI 10.1145/2398857.2384688
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Wickham H., 2014, Advanced R
NR 29
TC 6
Z9 6
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2019
VL 41
IS 1
AR 4
DI 10.1145/3275519
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HN7NB
UT WOS:000460376400004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, F
   Schewe, S
   Huang, CH
AF Wang, Farn
   Schewe, Sven
   Huang, Chung-Hao
TI An Extension of ATL with Strategy Interaction
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Algorithms; Performance; Games; concurrent; turn based;
   multiagent; strategy; logic; model checking; expressiveness;
   realizability; satisfiability
ID DENSE-TIME SYSTEMS; MODEL-CHECKING
AB We propose an extension to ATL (alternating-time temporal logic), called BSIL (basic strategy-interaction logic), for specifying collaboration among agents in a multiagent system. We show that BSIL is strictly more expressive than ATL(+) but incomparable with ATL*, GL (game logic), and AMC (alternating mu-calculus) in expressiveness. We show that a memoryful strategy is necessary for fulfilling a specification in BSIL. We establish that the BSIL model-checking problem is PSPACE-complete. However, BSIL model checking can be performed in time quadratic in the model for fixed formulas. The BSIL (and hence ATL(+)) satisfiability is 2EXPTIME-complete. Finally, we report our experiment with a model checker for BSIL.
C1 [Wang, Farn] Natl Taiwan Univ, Dept Elect Engn, Taipei 106, Taiwan.
   [Schewe, Sven] Univ Liverpool, Dept Comp Sci, Liverpool L69 3BX, Merseyside, England.
   [Huang, Chung-Hao] Natl Taiwan Univ, Grad Inst Elect Engn, Taipei 106, Taiwan.
C3 National Taiwan University; University of Liverpool; National Taiwan
   University
RP Wang, F (corresponding author), Natl Taiwan Univ, Dept Elect Engn, Taipei 106, Taiwan.
EM farn@ntu.edu.tw; Sven.Schewe@liverpool.ac.uk; yyergg@gmail.com
OI Schewe, Sven/0000-0002-9093-9518
FU Taiwan, ROC [MOST 103-2221-E-002-150-MY3]; Research Center for
   Information Technology Innovation, Academia Sinica, Taiwan, ROC;
   Engineering and Physical Science Research Council (EPSRC), UK
   [EP/H046623/1]; EPSRC [EP/H046623/1] Funding Source: UKRI
FX This work is supported by grant MOST 103-2221-E-002-150-MY3, Taiwan,
   ROC; by the Research Center for Information Technology Innovation,
   Academia Sinica, Taiwan, ROC; and by the Engineering and Physical
   Science Research Council (EPSRC), grant EP/H046623/1, UK.
CR [Anonymous], 1988, FOCS 88
   [Anonymous], LEIBNIZ INT P INFORM, V8, P133
   MULLER DE, 1995, THEOR COMPUT SCI, V141, P69, DOI 10.1016/0304-3975(94)00214-4
   Pinchinat S, 2007, LECT NOTES COMPUT SC, V4762, P253
   Piterman Nir, 2007, J LOGICAL METHODS CO, V3, P3
   Schewe S, 2007, INT J FOUND COMPUT S, V18, P113, DOI 10.1142/S0129054107004590
   Schewe S, 2009, LECT NOTES COMPUT SC, V5504, P167
   SISTLA AP, 1985, J ACM, V32, P733, DOI 10.1145/3828.3837
   Stockmeyer Larry Joseph, 1974, COMPLEXITY DECISION
   Wang F, 2015, INT J SOFTW TOOLS TE, V17, P223, DOI 10.1007/s10009-014-0312-7
   Wang F, 2013, THEOR COMPUT SCI, V467, P89, DOI 10.1016/j.tcs.2012.09.019
   Wang Farn, 2008, IEEE REAL TIM SYST S
   Wang Farn, 2008, LNCS, V5311
   Wang Farn, 2004, LNCS, V6, P1
   Wilke T., 1999, Foundations of Software Technology and Theoretical Computer Science. 19th Conference. Proceedings (Lecture Notes in Computer Science Vol.1738), P110
   Zappe J, 2002, LECT NOTES COMPUT SC, V2500, P171
NR 16
TC 2
Z9 4
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2015
VL 37
IS 3
AR 9
DI 10.1145/2734117
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CL1JU
UT WOS:000356699500002
OA Bronze
DA 2024-07-18
ER

PT J
AU de Jonge, M
   Kats, LCL
   Visser, E
   Söderberg, E
AF de Jonge, Maartje
   Kats, Lennart C. L.
   Visser, Eelco
   Soderberg, Emma
TI Natural and Flexible Error Recovery for Generated Modular Language
   Environments
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Algorithms; Design; Error recovery; generalized parsing
ID SYNTAX; LR; GRAMMARS; REPAIR; ANTLR
AB Integrated Development Environments (IDEs) increase programmer productivity, providing rapid, interactive feedback based on the syntax and semantics of a language. Unlike conventional parsing algorithms, scannerless generalized-LR parsing supports the full set of context-free grammars, which is closed under composition, and hence can parse languages composed from separate grammar modules. To apply this algorithm in an interactive environment, this article introduces a novel error recovery mechanism. Our approach is language independent, and relies on automatic derivation of recovery rules from grammars. By taking layout information into consideration it can efficiently suggest natural recovery suggestions.
C1 [de Jonge, Maartje; Kats, Lennart C. L.; Visser, Eelco] Delft Univ Technol, Delft, Netherlands.
C3 Delft University of Technology
RP de Jonge, M (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM m.deJonge@tudelft.nl
OI Visser, Eelco/0000-0002-7384-3370
FU NWO/JACQUARD [612.063.512, 638.001.610]
FX This research was supported by NWO/JACQUARD projects 612.063.512, TFA:
   Transformations for Abstractions, and 638.001.610, MoDSE: Model-Driven
   Software Evolution.
CR [Anonymous], 2007, P 22 IEEE ACM INT C
   BARNARD DT, 1982, INT J COMPUT INF SCI, V11, P231, DOI 10.1007/BF00999442
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   Bravenboer M., 2007, P 6 INT C GEN PROGR, V3-12
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Bravenboer M, 2010, SCI COMPUT PROGRAM, V75, P473, DOI 10.1016/j.scico.2009.05.004
   Bravenboer Martin., 2006, OOPSLA 06, P209, DOI DOI 10.1145/1167473
   BURKE MG, 1987, ACM T PROGR LANG SYS, V9, P164, DOI 10.1145/22719.22720
   Cerecke C., 2002, P 25 AUSTR C COMP SC, V4, P17
   CHARLES P, 1991, THESIS NEW YORK U
   Corchuelo R, 2002, ACM T PROGR LANG SYS, V24, P698, DOI 10.1145/586088.586092
   DE JONGE M., 2012, TUDSERG2012035
   de Jonge M, 2010, LECT NOTES COMPUT SC, V5969, P204
   Dean TR, 2003, CASCON '03, P266
   DEGANO P, 1995, SOFTWARE PRACT EXPER, V25, P657, DOI 10.1002/spe.4380250606
   Doaitse Swierstra S., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P184
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Efftinge S., 2006, P WORKSH MOD S ECL S
   FISCHER CN, 1980, ACTA INFORM, V13, P141, DOI 10.1007/BF00263990
   Ford B, 2002, ACM SIGPLAN NOTICES, V37, P36, DOI 10.1145/583852.581483
   Fowler M, 2005, Language workbenches: The killer-app for domain specific languages?
   FOWLER M., 2005, POSTINTELLIJ
   Grimm R, 2006, ACM SIGPLAN NOTICES, V41, P38, DOI 10.1145/1133981.1133987
   GRONNIGER H., 2008, P INT C SOFTW ENG IC, P925
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Heidenreich F, 2009, LECT NOTES COMPUT SC, V5562, P114, DOI 10.1007/978-3-642-02674-4_9
   Johnstone A, 2004, LECT NOTES COMPUT SC, V2985, P89
   Jouault F., 2006, 5 INT C GEN PROGR CO, P249, DOI DOI 10.1145/1173706.1173744
   KATS L. C. L., 2010, ENTCS SERIES, V253
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P918, DOI 10.1145/1932682.1869535
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Kats LCL, 2009, ACM SIGPLAN NOTICES, V44, P445, DOI 10.1145/1639949.1640122
   Kats LCL, 2009, LECT NOTES COMPUT SC, V5501, P142, DOI 10.1007/978-3-642-00722-4_11
   Kats LCL, 2008, ACM SIGPLAN NOTICES, V43, P91, DOI 10.1145/1449955.1449772
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Klusener S, 2003, PROC IEEE INT CONF S, P179, DOI 10.1109/ICSM.2003.1235420
   KRAHN H, 2007, P 7 OOPSLA WORKSH DO, P218
   Krahn H, 2008, LECT NOTES BUS INF P, V11, P297
   KUHN T, 2006, ECLIPSE CORNER ABSTR
   Lavie A, 1993, P 3 INT WORKSH PARS, P123
   LEVY J.-P., 1971, THESIS ITHACA
   MAUNEY J, 1988, ACM T PROGR LANG SYS, V10, P456, DOI 10.1145/44501.44505
   MCKENZIE BJ, 1995, ACM T PROGR LANG SYS, V17, P672, DOI 10.1145/210184.210193
   Moonen L, 2002, PROG COMPREHEN, P219, DOI 10.1109/WPC.2002.1021343
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Nilsson-Nyman E, 2009, LECT NOTES COMPUT SC, V5452, P95, DOI 10.1007/978-3-642-00434-6_7
   Pai A. B., 1980, ACM Transactions on Programming Languages and Systems, V2, P18, DOI 10.1145/357084.357086
   Parr T, 2011, ACM SIGPLAN NOTICES, V46, P425, DOI 10.1145/1993316.1993548
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   PENNELLO TJ, 1978, PRINCIPLES PROGRAMMI, P241, DOI DOI 10.1145/512760.512786
   REKERS J, 1991, SIGPLAN NOTICES, V26, P59, DOI 10.1145/122501.122505
   SALOMON D, 1995, 9506 TR U MAN DEP CO
   SALOMON DJ, 1989, SIGPLAN NOTICES, V24, P170, DOI 10.1145/74818.74833
   Saunders S., 2006, INTELLIJ IDEA ACTION
   SCHMITZ S., 2006, I3SRR200632FR U NIC
   Schwerdfeger AC, 2009, ACM SIGPLAN NOTICES, V44, P199, DOI 10.1145/1543135.1542499
   TAI KC, 1978, IEEE T SOFTWARE ENG, V4, P414, DOI 10.1109/TSE.1978.233861
   TOMITA M, 1988, EFFICIENT PARSING NA, V14
   VALKERING R, 2007, THESIS U AMSTERDAM
   van den Brand MGJ, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P331
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Van Deursen A., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P40, DOI 10.1109/ICSM.1999.792497
   Visser E, 2002, LECT NOTES COMPUT SC, V2487, P299
   Visser E., 1997, INT WORKSH PARS TECH, P210
   Visser Eelco., 1997, Scannerless Generalized-LR Parsing
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Waddingtona D, 2007, SCI COMPUT PROGRAM, V68, P64, DOI 10.1016/j.scico.2006.04.010
NR 69
TC 14
Z9 15
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2012
VL 34
IS 4
AR 15
DI 10.1145/2400676.2400678
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 072GT
UT WOS:000313658500001
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Dantas, DS
   Walker, D
   Washburn, G
   Weirich, S
AF Dantas, Daniel S.
   Walker, David
   Washburn, Geoffrey
   Weirich, Stephanie
TI AspectML: A polymorphic aspect-oriented functional programming language
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; languages; security; theory
AB This article defines AspectML, a typed functional, aspect-oriented programming language. The main contribution of AspectML is the seamless integration of polymorphism, run-time type analysis and aspect-oriented programming language features. In particular, AspectML allows programmers to define type-safe polymorphic advice using pointcuts constructed from a collection of polymorphic join points. AspectML also comes equipped with a type inference algorithm that conservatively extends Hindley-Milner type inference. To support first-class polymorphic point-cut designators, a crucial feature for developing aspect-oriented profiling or logging libraries, the algorithm blends the conventional Hindley-Milner type inference algorithm with a simple form of local type inference.
   We give our language operational meaning via a type-directed translation into an expressive type-safe intermediate language. Many complexities of the source language are eliminated in this translation, leading to a modular specification of its semantics. One of the novelties of the intermediate language is the definition of polymorphic labels for marking control-flow points. When a set of labels is assembled as a pointcut, the type of each label is an instance of the type of the pointcut.
C1 [Dantas, Daniel S.; Walker, David] Princeton Univ, Princeton, NJ 08544 USA.
   [Washburn, Geoffrey; Weirich, Stephanie] Univ Penn, Philadelphia, PA 19104 USA.
C3 Princeton University; University of Pennsylvania
RP Dantas, DS (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM ddantas@cs.princeton.edu; dpw@cs.princeton.edu; geoffw@cis.upenn.edu;
   sweirich@cis.upenn.edu
OI Weirich, Stephanie/0000-0002-6756-9168; Walker,
   David/0000-0003-3681-149X
CR Abadi Martin., 2003, Proceedings of the 10th Annual Network and Distributed System Security Symposium, P107
   Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 2005, 5462 INRIA
   [Anonymous], 1999, P 1999 WORKSH NEW SE
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], POPL 2000
   Avgustinov Pavel, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P11, DOI 10.1145/1190216.1190221
   BARENDREGT HP, 1985, STUDIES LOGIC, V103
   BAUER L, 2005, P ACM SIGPLAN C PROG, P305
   Bruns G, 2004, LECT NOTES COMPUT SC, V3170, P209
   Clifton C., 2002, P FDN ASP OR LANG FO, P33
   Colyer A., 2004, P 3 INT C ASPECT ORI, P56, DOI DOI 10.1145/976270.976279
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   DANTAS DS, 2003, TR69604 PRINC U
   DANTAS DS, 2005, MSCIS0507 U PENNS
   DANTAS DS, 2006, POPL 06, P383
   DANTAS DS, 2005, P 10 ACM SIGPLAN INT, P306
   Douence R., 2001, LECT NOTES COMPUTER, V2192, P170, DOI DOI 10.1007/3-540-45429-2_13
   Douence R., 2004, C SPED ORIENTED SOFT, P141
   Erlingsson U, 2000, P IEEE S SECUR PRIV, P246, DOI 10.1109/SECPRI.2000.848461
   Evans D, 1999, P IEEE S SECUR PRIV, P32, DOI 10.1109/SECPRI.1999.766716
   FILMAN RE, 2005, CHAPTER ASPECT ORIEN, P21
   FIUCZYNSKI ME, 2005, P 10 WORKSH HOT TOP, P91
   Fournet C, 2003, ACM T PROGR LANG SYS, V25, P360, DOI 10.1145/641909.641912
   HARPER R, 1998, PROOF LANGUAGE INTER
   HARPER RW, 2005, PROGRAMMING LA UNPUB
   Hinze Ralf., 2006, Proceedings ofthe 8th International Symposium on Functional and Logic Programming, P24
   JAGADEESAN R, 2003, P 17 EUR C OBJ OR PR, P415
   Jagadeesan R, 2006, SCI COMPUT PROGRAM, V63, P267, DOI 10.1016/j.scico.2006.02.008
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   JONES SP, 2006, P 11 ACM SIGPLAN INT, P50
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   Kim M, 1999, PROCEEDINGS OF THE 11TH EUROMICRO CONFERENCE ON REAL-TIME SYSTEMS, P114, DOI 10.1109/EMRTS.1999.777457
   Lee Daniel K., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P173, DOI 10.1145/1190216.1190245
   LEE I., 1999, P INT C PAR DISTR PR
   Lieberherr K, 2003, COMPUT J, V46, P542, DOI 10.1093/comjnl/46.5.542
   LUFER K, 1992, P SIGPLAN WORKSH ML, P78
   Masuhara H., 2002, FOAL 2002 Proceedings, P17
   MASUHARA H, 2005, P INT C FUNCT PROGR, P320
   MATTHEWS D, 2005, POLYML
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Pierce B.C., 1998, POPL, P252
   Plotkin G. D., 1971, Machine Intelligence Volume 6, P101
   Plotkin G. D., 1970, Machine Intelligence, V5, P153
   POTTIER F, 2006, P 33 ACM S PRINC PRO, P232
   Schneider H P, 2000, Climacteric, V3, P50, DOI 10.3109/13697130009167599
   Sheard Tim., 2005, HASKELL 05, P74, DOI [DOI 10.1145/1088348.1088356, 10.1145/1088348.1088356]
   SHIELDS M, 2002, LEXICALLY SCOPED TYP
   SUIZMANN M, 2006, TYPE INFERENCE GADTS
   SULLIVAN K, 2005, P 10 EUR SOFTW ENG C, P166
   Tucker D.B., 2003, P 2 INT C ASPECT ORI, P158
   Vytiniotis Dimitrios., 2006, Proceedings of the Eleventh ACM SIGPLAN International Conference on Functional Programming. ICFP'06, P251, DOI DOI 10.1145/1159803.1159838
   Walker D, 2003, ACM SIGPLAN NOTICES, V38, P127, DOI 10.1145/944746.944718
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   WANG M, 2006, P 5 WORKSH FDN ASP O
   Washburn G, 2005, IEEE S LOG, P62
NR 56
TC 16
Z9 20
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2008
VL 30
IS 3
AR 14
DI 10.1145/1353445.1353448
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308XV
UT WOS:000256425100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Honda, K
   Yoshida, N
AF Honda, Kohei
   Yoshida, Nobuko
TI A uniform type structure for secure information flow
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; security; theory; the pi-calculus; typing system; secure
   information flow; typebased; program analysis
ID FULL ABSTRACTION; NONINTERFERENCE; INFERENCE; LINEARITY; PROGRAMS;
   CALCULUS
AB The pi-calculus, a calculus of mobile processes, can compositionally represent dynamics of major programming constructs by decomposing them into name passing. The present work reports our experience in using a linear/affine typed pi-calculus for the analysis and development of typebased analyses for programming languages, focussing on secure information flow analysis. After presenting a basic typed calculus for secrecy, we demonstrate its usage by a sound embedding of the dependency core calculus (DCC) and the development of the call-by-value version of DCC. The secrecy analysis is then extended to stateful computation, for which we develop a novel type discipline for imperative programming language that extends a secure multi-threaded imperative language by Smith and Volpano with general references and higher-order procedures. In each analysis, the embedding gives a simple proof of noninterference.
C1 Univ London, Dept Comp Sci, London E1 4NS, England.
   Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2BZ, England.
C3 University of London; Imperial College London
RP Honda, K (corresponding author), Univ London, Dept Comp Sci, Mile End, London E1 4NS, England.
EM kohei@dcs.qmul.ac.uk; yoshida@doc.ic.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557
CR ABADI M, 1999, ELECT NOTES THEOR CO, V20, P1
   Abadi Martin., 1999, POPL, P147, DOI [10.1145/292540.292555, DOI 10.1145/292540.292555]
   Abramsky S, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P334, DOI 10.1109/LICS.1998.705669
   Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   [Anonymous], 1999, TYPE EFFECT SYSTEMS
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], P ACM INT C FUNCT PR
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   [Anonymous], 1992, MATH STRUCT COMP SCI, V2, P119, DOI DOI 10.1017/S0960129500001407
   BELL DE, 1973, MTR2547 U CAMBR COMP
   Berger M, 2005, ACTA INFORM, V42, P83, DOI 10.1007/s00236-005-0175-1
   Berger M, 2001, LECT NOTES COMPUT SC, V2044, P29
   BERGER M, 2000, SEQUENTIALITY PI CAL
   Bodei C, 1998, LECT NOTES COMPUT SC, V1466, P84, DOI 10.1007/BFb0055617
   Bodei C, 1999, LECT NOTES COMPUT SC, V1578, P120
   Boudol G, 2002, THEOR COMPUT SCI, V281, P109, DOI 10.1016/S0304-3975(02)00010-5
   Boudol Gerard., 1992, Tech. Rep. 1702
   DAMAS LMM, 1985, THESIS U EDINBURGH E
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   erbnk P., 1997, J FUNCT PROGRAM, V7, P557, DOI DOI 10.1017/S0956796897002906
   Fiore M, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P345, DOI 10.1109/LICS.1998.705670
   FIORE M, 1994, THESIS U EDINBURGH E
   Focardi R, 2000, LECT NOTES COMPUT SC, V1853, P354
   François P, 2002, P IEEE CSFW, P320, DOI 10.1109/CSFW.2002.1021826
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Heintze Nevin., 1998, P 25 ACM SIGPLAN SIG, P365, DOI [DOI 10.1145/268946.268976, 10.1145/268946.268976]
   Hennessy M, 2000, LECT NOTES COMPUT SC, V1853, P415
   Honda K, 2005, J FUNCT PROGRAM, V15, P293, DOI 10.1017/S0956796804005477
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   Honda K, 2002, ACM SIGPLAN NOTICES, V37, P81, DOI 10.1145/565816.503281
   HONDA K, 1995, THEOR COMPUT SCI, V151, P437, DOI 10.1016/0304-3975(95)00074-7
   Honda K, 1999, THEOR COMPUT SCI, V221, P393, DOI 10.1016/S0304-3975(99)00039-0
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2000, LECT NOTES COMPUT SC, V1782, P180
   HONDA K, 2004, P CW 04
   HONDA K, 1996, POPL 96, P344
   HONDA K, 2003, ADDENDUM UNIFORM TYP
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   HOWARD BT, 1996, P ICFP 96, P102
   HUDAK P, 1992, HASKELL HOME PAGE
   Hyland J. M. E., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P96, DOI 10.1145/224164.224189
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   LAMPSON BW, 1973, COMMUN ACM, V16, P613, DOI 10.1145/362375.362389
   Leroy Xavier., 1991, PROC 18 ACM SIGPLAN, P291
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MILNER R, 1992, P INT SUMM SCH LOG A
   MILNER R, 1990, DEFINITIION STANDARD
   Mitchell John C., 1996, Foundation of computing series
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   NIELSON F, 1999, P S PRINC PROGR AN
   PALSBERG J, 2001, P 2001 ACM SIGPLAN S, P20
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Ryan PYA, 1999, P IEEE CSFW, P214, DOI 10.1109/CSFW.1999.779775
   Sabelfeld A, 1999, LECT NOTES COMPUT SC, V1576, P40
   SMITH G, 2001, P CSFW
   Smith Geoffrey., 1998, POPL'98, Proceedings of the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, San Diego, CA, USA, January 19-21, P355, DOI [DOI 10.1145/268946.268975, 10.1145/268946.268975]
   TALPIN JP, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P162, DOI 10.1109/LICS.1992.185530
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   Tse S., 2004, P 9 ACM SIGPLAN INT, P115
   Volpano D., 1996, Journal of Computer Security, V4, P167
   WRIGHT A, 1994, LECT NOTES COMPUTER, V582, P473
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
   Yoshida N, 2002, LECT NOTES COMPUT SC, V2303, P417
   YOSHIDA N, 2002, PPL 03 P JSST WORKSH
   YOSHIDA N, 1996, LECT NOTES COMPUT SC, V1180, P371, DOI DOI 10.1007/3-540-62034-6
   Zdancewic S, 2003, P IEEE CSFW, P29, DOI 10.1109/CSFW.2003.1212703
   Zdancewic S, 2001, LECT NOTES COMPUT SC, V2028, P46
NR 73
TC 12
Z9 13
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 31
DI 10.1145/1286821.1286822
PG 100
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Seo, S
   Yang, H
   Yi, K
   Han, T
AF Seo, Sunae
   Yang, Hongseok
   Yi, Kwangkeun
   Han, Taisook
TI Goal-directed weakening of abstract interpretation results
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; languages; verification; abstract interpretation;
   backward analysis; hoare logic; program verification; static analysis
ID CONSTRUCTION
AB One proposal for automatic construction of proofs about programs is to combine Hoare logic and abstract interpretation. Constructing proofs is in Hoare logic. Discovering programs' invariants is done by abstract interpreters.
   One problem of this approach is that abstract interpreters often compute invariants that are not needed for the proof goal. The reason is that the abstract interpreter does not know what the proof goal is, so it simply tries to find as strong invariants as possible. These unnecessary invariants increase the size of the constructed proofs. Unless the proof-construction phase is notified which invariants are not needed, it blindly proves all the computed invariants.
   In this article, we present a framework for designing algorithms, called abstract-value slicers, that slice out unnecessary invariants from the results of forward abstract interpretation. The framework provides a generic abstract-value slicer that can be instantiated into a slicer for a particular abstract interpretation. Such an instantiated abstract-value slicer works as a postprocessor to an abstract interpretation in the whole proof-construction process, and notifies to the next proof-construction phase which invariants it does not have to prove. Using the framework, we designed an abstract-value slicer for an existing relational analysis and applied it on programs. In this experiment, the slicer identified 62%-81% of the computed invariants as unnecessary, and resulted in 52%-84% reduction in the size of constructed proofs.
C1 Korea Adv Inst Sci & Technol, Dept Comp Sci, Taejon 305701, South Korea.
   Univ London, Dept Comp Sci, London E1 4NS, England.
   Seoul Natl Univ, Sch Engn & Comp Sci, Seoul 151744, South Korea.
C3 Korea Advanced Institute of Science & Technology (KAIST); University of
   London; Seoul National University (SNU)
RP Seo, S (corresponding author), Korea Adv Inst Sci & Technol, Dept Comp Sci, 373-1 Guseong Dong, Taejon 305701, South Korea.
EM saseo@pllab.kaist.ac.kr; hyang@dcs.qmul.ac.uk; kwang@ropas.snu.ac.kr;
   han@pllab.kaist.ac.kr
RI Yang, Hongseok/M-8791-2017; Yang, Hongseok/AAC-4471-2020; Han,
   Taisook/C-2014-2011
CR [Anonymous], 2001, P ACM SIGPLAN 2001 C, DOI DOI 10.1145/378795.378846
   [Anonymous], LNCS
   Appel A.W., 2000, PROC 27 ACM S PRINCI, P243
   APPEL AW, 2001, P IEEE S LOG COMP SC
   Besson F, 2007, LECT NOTES COMPUT SC, V4421, P268
   Clarke E., 2000, Computer Aided Verification, P154
   Clarke EM, 1999, MODEL CHECKING, P1
   Cortesi A, 1998, THEOR COMPUT SCI, V202, P163, DOI 10.1016/S0304-3975(97)00137-0
   Cousot P., 1999, Automated Software Engineering, V6, P69, DOI 10.1023/A:1008649901864
   Cousot P., 1981, Program flow analysis. Theory and applications, P303
   COUSOT P, 2005, ABSTR INTERPRETATION
   COUSOT P, 1977, P ACM SIGPLAN SIGACT
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   COUSOT P, 1998, COURSE NOTES NATO IN
   Dams D, 1997, ACM T PROGR LANG SYS, V19, P253, DOI 10.1145/244795.244800
   DAVEY DA, 1990, INTRO LATTICES ORDER
   Davidovits J., 1990, CONCRETE INT, V12, P30
   Duesterwald E., 1995, Proceedings of the 22Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. POPL'95, P37, DOI DOI 10.1145/199448.199461
   File G, 1996, ACM COMPUT SURV, V28, P333, DOI 10.1145/234528.234742
   Giacobazzi R., 2004, SIGPLAN Notices, V39, P186, DOI 10.1145/982962.964017
   Giacobazzi R, 1999, THEOR COMPUT SCI, V216, P159, DOI 10.1016/S0304-3975(98)00194-7
   Giacobazzi R, 1998, ACM T PROGR LANG SYS, V20, P1067, DOI 10.1145/293677.293680
   Giacobazzi R, 1997, LECT NOTES COMPUT SC, V1256, P771
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Hamid NA, 2002, IEEE S LOG, P89, DOI 10.1109/LICS.2002.1029819
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Henzinger ThomasA., 2002, Proc. of the Symposium on Principles of Programming Languages. POPL, P58
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Howe JM, 2004, LECT NOTES COMPUT SC, V3049, P152
   HUGHES J, 1992, LECT NOTES COMPUT SC, V582, P269
   HUGHES J, 1988, PARTIAL EVALUATION M, P187
   King Philip D, 2004, Curr Opin Investig Drugs, V5, P517
   Massé D, 2001, LECT NOTES COMPUT SC, V2053, P103
   Miné A, 2001, LECT NOTES COMPUT SC, V2053, P155
   Morrisett G., 1998, POPL 98, P85, DOI DOI 10.1145/268946.268954
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Necula GC, 2003, LECT NOTES COMPUT SC, V2609, P283
   Necula GC, 2001, ACM SIGPLAN NOTICES, V36, P142, DOI 10.1145/373243.360216
   NECULA GC, 1998, LNCS, V1419, P61, DOI DOI 10.1007/3-540-68671-1
   Rival X, 2005, LECT NOTES COMPUT SC, V3780, P347
   Rival X, 2005, LECT NOTES COMPUT SC, V3672, P303
   Seo SN, 2003, LECT NOTES COMPUT SC, V2895, P230
   TIP F, 1995, J PROGRAM LANG, V3, P121
   WADLER P, 1987, LECT NOTES COMPUT SC, V274, P385
   YANG H, 2006, ROPAS200634 SEOUL NA
   [No title captured]
NR 47
TC 6
Z9 6
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 39
DI 10.1145/1286821.1286830
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500010
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Foster, JN
   Greenwald, MB
   Moore, JT
   Pierce, BC
   Schmitt, A
AF Foster, J. Nathan
   Greenwald, Michael B.
   Moore, Jonathan T.
   Pierce, Benjamin C.
   Schmitt, Alan
TI Combinators for bidirectional tree transformations: A linguistic
   approach to the view-update problem
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE bidirectional programming; Harmony; XML; lenses; view update problem
ID INVERSE COMPUTATION; HEAT-GENERATION; IRREVERSIBILITY; TRANSLATION;
   SEMANTICS
AB We propose a novel approach to the view-update problem for tree-structured data: a domain-specific programming language in which all expressions denote bidirectional transformations on trees. In one direction, these transformations-dubbed lenses-map a concrete tree into a simplified abstract view; in the other, they map a modified abstract view, together with the original concrete tree, to a correspondingly modified concrete tree. Our design emphasizes both robustness and ease of use, guaranteeing strong well-behavedness and totality properties for well-typed lenses.
   We begin by identifying a natural space of well-behaved bidirectional transformations over arbitrary structures, studying definedness and continuity in this setting. We then instantiate this semantic framework in the form of a collection of lens combinators that can be assembled to describe bidirectional transformations on trees. These combinators include familiar constructs from functional programming (composition, mapping, projection, conditionals, recursion) together with some novel primitives for manipulating trees (splitting, pruning, merging, etc.). We illustrate the expressiveness of these combinators by developing a number of bidirectional list-processing transformations as derived forms. An extended example shows how our combinators can be used to define a lens that translates between a native HTML representation of browser bookmarks and a generic abstract bookmark format.
C1 Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Foster, JN (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM jnfoster@cis.upenn.edu
OI Foster, Nate/0000-0002-6557-684X
CR Abiteboul S, 1998, VLDB J, V7, P96, DOI 10.1007/s007780050056
   ABITEBOUL S, 1998, P 24 INT C VER LARG
   Abiteboul S., 1997, INT C DAT THEOR DELP
   Abramov S, 2002, LECT NOTES COMPUT SC, V2566, P269
   Abramov S, 2000, LECT NOTES COMPUT SC, V1837, P187
   ATZENI P, 1996, LECT NOTES COMPUTER
   Atzeni Paolo., 1997, P ACM SIGMOD EXHIBIT, P528
   BAKER HG, 1992, LECT NOTES COMPUTER, V637
   BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   BARSALOU T, 1991, ACM SIGM C MAN DAT, P248
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Bohannon A., 2006, Principles of Database Systems (PODS)
   BRAGANHOLO BD, 2001, P 3 INT C INT INT WE
   BRAGANHOLO V, 2003, INT WORKSH WEB DAT
   BUNEMAN P, 2002, ACM SIGACT SIGMOD SI, P150
   COSMADAKIS SS, 1984, J ACM, V31, P742, DOI 10.1145/1634.1887
   COSMADAKIS SS, 1983, THESIS MIT
   DATE CJ, 2003, INTRO DATABASE SYST
   DAYAL U, 1982, ACM T DATABASE SYST, V7, P381, DOI 10.1145/319732.319740
   DIJKSTRA EW, 1979, LECT NOTES COMPUTER, V69
   FOGEL S, 2005, ORACLE DATABASE ADM
   Foster JN, 2007, J COMPUT SYST SCI, V73, P669, DOI 10.1016/j.jcss.2006.10.024
   FOSTER JN, 2006, HARMONY PROGRAMMERS
   GOTTLOB G, 1988, ACM T DATABASE SYST, V13, P486, DOI 10.1145/49346.50068
   HEGNER SJ, 1990, LECT NOTES COMPUT SC, V470, P422
   Hegner SJ, 2004, ANN MATH ARTIF INTEL, V40, P63, DOI 10.1023/A:1026158013113
   Hofmann M, 1996, INFORM COMPUT, V126, P11, DOI 10.1006/inco.1996.0031
   HOFMANN M, 1995, ANN ACM S PRINC PROG, P186
   HU Z, 2004, PARTIAL EVALUATION P
   *INT BUS MACH CORP, 2004, IBM DB2 U DAT ADM
   Johnson M, 2001, AUST COMP S, V23, P29, DOI 10.1109/ADC.2001.904461
   KELLER AM, 1985, ACM SIGACT SIGMOD S
   KELLER AM, 1986, P INT C LARG DAT
   Landauer R, 2000, IBM J RES DEV, V44, P261, DOI 10.1147/rd.441.0261
   LANDAUER R, 1961, IBM J RES DEV, V5, P183, DOI 10.1147/rd.53.0183
   LECHTENBORGER J, 2003, ACM SIGACT SIGMOD SI, P49
   Lorentz D., 2005, Oracle Database SQL Reference 10g Release 2 (10.2)
   MASUNAGA Y, 1984, P INT C LARG DAT
   MATSUOKA S, 1992, ACM T INFORM SYST, V10, P408, DOI 10.1145/146486.146557
   McCarthy J., 1956, AUTOMATA STUDIES, P177
   MEDEIROS CMB, 1985, P INT C LARG DAT
   MEERTENS L, 1998, DESIGNING CONSTRINTS
   *MICR, 2005, CREAT MAINT DAT
   Miller RJ, 2001, SIGMOD RECORD, V30, P78, DOI 10.1145/373626.373713
   MU SC, 2004, 17 INT C MATH PROGR
   MU SC, 2004, ASIAN S PROGR LANG S
   Niehren J., 1993, TAPSOFT '93: Theory and Practice of Software Development. 4th International Joint Conference CAAP/FASE Proceedings, P356
   OHORI A, 1994, ACM SIGACT SIGMOD
   OLES FJ, 1985, TYPE ALGEBRAS FUNCT
   PIERCE BC, 2003, MSCIS0342 U PENN
   PIERCE BC, 2006, HARMONARY SYNCHRONIZ
   PIERCE BC, 2004, MSCIS0336 U PENN DEP
   ROWE L, 1979, ACM SIGMOD S MAN DAT
   SCHOLL MH, 1991, P 2 INT C DED OBJ DA, V566
   SPOONHOWER D, 2004, VIEW UPDATES SEEN TH
   TATARINOV I, 2001, ACM SIGMOD S MAN DAT
   WADLER P, 1987, ACM S PRINC PROGR LA
   WADLER P, 1987, ACM SIGMOD S MAN DAT
   Winskel G., 1993, The Formal Semantics of Programming Languages
   *XQUER, 2005, XQUER 1 0 XML QUER L
NR 60
TC 220
Z9 238
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 3
AR 17
DI 10.1145/1232420.1232424
PG 65
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 176GF
UT WOS:000247072100004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Moller, A
   Olesen, MO
   Schwartzbach, MI
AF Moller, Anders
   Olesen, Mads Osterby
   Schwartzbach, Michael I.
TI Static validation of XSL transformations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; algorithms; verification; XSLT; DTD; XML schema; static
   analysis
ID MODEL; JAVA
AB XSL Transformations (XSLT) is a programming language for defining transformations among XML languages. The structure of these languages is formally described by schemas, for example using DTD or XML Schema, which allows individual documents to be validated. However, existing XSLT tools offer no static guarantees that, under the assumption that the input is valid relative to the input schema, the output of the transformation is valid relative to the output schema. We present a validation technique for XSLT based on the XML graph formalism introduced in the static analysis of JWIG Web services and X-ACT XML transformations. Being able to provide static guarantees, we can detect a large class of errors in an XSLT stylesheet at the time it is written instead of later when it has been deployed, and thereby provide benefits similar to those of static type checkers for modern programming languages. Our analysis takes a pragmatic approach that focuses its precision on the essential language features but still handles the entire XSLT language. We evaluate the analysis precision on a range of real stylesheets and demonstrate how it may be useful in practice.
C1 Univ Aarhus, Dept Comp Sci, Aarhus N, Denmark.
C3 Aarhus University
RP Moller, A (corresponding author), Univ Aarhus, Dept Comp Sci, IT Parken,Aabogade 34, Aarhus N, Denmark.
EM amoeller@brics.dk; madman@brics.dk; mis@brics.dk
RI Moller, Anders/O-6665-2016
OI Moller, Anders/0000-0003-1333-2314
CR *ALTOVA, 2005, XMLSPY
   AMBROZIAK J, 2004, XSLTC
   AUDEBAUD P, 2000, RR200037 ENSLYON
   Benedikt Michael., 2005, PODS, P25, DOI DOI 10.1145/1065167.1065172
   Bex GJ, 2002, INFORM SYST, V27, P21, DOI 10.1016/S0306-4379(01)00033-3
   BIERMAN G, 2005, P 19 EUR C OBJ OR PR, V3586
   BRABRAND C., 2002, ACM T INTERNET TECHN, V2, P79
   BRABRAND C, 2001, P ACM SIGPLAN SIGSOF, P221
   Bray T., 2004, Extensible Markup Language (XML) 1.0, VThird
   Christensen AS, 2003, ACM T PROGR LANG SYS, V25, P814, DOI 10.1145/945885.945890
   CHRISTENSEN AS, 2002, RS0224
   CLARK J, 1999, XSL TRANSFORMATION X
   Clark J., 1999, XML Path Language
   DONG C, 2004, P 15 AUSTR DAT C ADC
   DRAPER D, 2002, XQUERY 1 0 XPATH 2 0
   HARREN M, 2005, P WORLD WID WEB WWW, P278
   HIDDERS J, 2003, P 9 INT WORKSH DAT P
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   JAGANNATHAN S, 1995, POPL 95, P393, DOI DOI 10.1145/199448.199536
   KAY M, 2004, SAXON
   KAY M, 2006, XSL TRANSFORMATIONS
   KEPSER S, 2002, 441 SFB U TUB
   Kirkegaard C, 2004, IEEE T SOFTWARE ENG, V30, P181, DOI 10.1109/TSE.2004.1271173
   KIRKEGAARD C, 2007, DK BRICS SCHEMATOOLS
   KIRKEGAARD C, 2005, PROGR LANG TECHN XML
   Klarlund N., 2002, International Journal of Foundations of Computer Science, V13, P571, DOI 10.1142/S012905410200128X
   KLARLUND N, 1993, P 20 ACM SIGPLAN SIG
   Klarlund Nils, 2001, Mona Version 1.4: User Manual
   KUULA S, 2006, THESIS U AARHUS
   Maneth Sebastian., 2005, PODS'05, P283, DOI DOI 10.1145/1065167.1065203
   Martens W, 2004, PODS 2004, P23
   MARTENS W, 2003, LNCS, V2572
   Milo T, 2003, J COMPUT SYST SCI, V66, P66, DOI 10.1016/S0022-0000(02)00030-2
   Moller A, 2005, LECT NOTES COMPUT SC, V3363, P17
   MOLLER A, 2007, P ACM SIGPLAN WORKSH
   MOLLER A, 2002, NOTES SERIES
   Neves-Petersen MT, 2003, BIOTECHNOL ANN REV, V9, P315, DOI 10.1016/S1387-2656(03)09010-0
   OGBUJI C, 2003, VISUALIZING XSLT SVG
   PREDESCU O, 2005, XSLT PROCESS
   Schwentick T, 2004, SIGMOD REC, V33, P101, DOI 10.1145/974121.974140
   *STYL STUD, 2005, XSL DEB
   Thompson H.S., 2001, Recommendation REC-xmlschema-1-20041028.
   TOZAWA A, 2001, P ACM S DOC ENG DOCE
   Wadler P., 2000, Markup Languages: Theory & Practice, V2, P183, DOI 10.1162/10996620052104302
   WOOD PT, 2003, P 9 INT C DAT THEOR, P300
NR 46
TC 7
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 4
AR 21
DI 10.1145/1255450.1255454
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 202OS
UT WOS:000248913500004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Klein, G
   Nipkow, T
AF Klein, Gerwin
   Nipkow, Tobias
TI A machine-checked model for a java-like language, virtual machine, and
   compiler
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Java; operational semantics; theorem proving
ID BYTECODE VERIFICATION; TOOL
AB We introduce Jinja, a Java-like programming language with a formal semantics designed to exhibit core features of the Java language architecture. Jinja is a compromise between the realism of the language and the tractability and clarity of its formal semantics. The following aspects are formalised: a big and a small step operational semantics for Jinja and a proof of their equivalence, a type system and a definite initialisation analysis, a type safety proof of the small step semantics, a virtual machine (JVM), its operational semantics and its type system, a type safety proof for the JVM; a bytecode verifier, that is, a data flow analyser for the JVM, a correctness proof of the bytecode verifier with respect to the type system, and a compiler and a proof that it preserves semantics and well-typedness. The emphasis of this work is not on particular language features but on providing a unified model of the source language, the virtual machine, and the compiler. The whole development has been carried out in the theorem prover Isabelle/HOL.
C1 Univ New S Wales, Natl ICT Australia, Sydney, NSW 2052, Australia.
   Tech Univ Munich, Inst Informat, D-85748 Garching, Germany.
C3 University of New South Wales Sydney; NICTA; Technical University of
   Munich
RP Klein, G (corresponding author), Univ New S Wales, Natl ICT Australia, Sydney, NSW 2052, Australia.
OI Klein, Gerwin/0000-0001-8883-0559; Nipkow, Tobias/0000-0003-0730-515X
CR ALVESFOSS J, 1999, FORMAL SYNTAX SEMANT, V1523
   Ancona D, 2001, ACM SIGPLAN NOTICES, V36, P16, DOI 10.1145/504311.504284
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   [Anonymous], LNCS
   [Anonymous], 2003, ACM SIGSOFT Softw. Eng. Notes, DOI DOI 10.1145/966221.966235
   Aspinall D, 2000, LECT NOTES COMPUT SC, V1785, P38
   Barthe G, 2004, LECT NOTES COMPUT SC, V2984, P99
   Barthe G, 2001, LECT NOTES COMPUT SC, V2028, P302
   Berghofer S., 2002, LNCS, V2277, P24
   BERGHOFFER S, 2003, THESIS TU MUNCHEN
   BERTELSEN P, 1997, SEMANTICS JAVA BYTEO
   BUCHI M, 1998, P 13 ACM C OBJ OR PR
   Coglio A, 2004, CONCURR COMP-PRACT E, V16, P647, DOI 10.1002/cpe.798
   Coglio A., 2000, P DARPA INF SURV C E P DARPA INF SURV C E, V2, P403
   Cohen R.M., 1997, The defensive Java Virtual Machine specification
   Drossopoulou S., 1999, Formal Syntax and Semantics of Java, volume 1523 of Lecture Notes in Computer Science, V1523, P41
   FLATT M, 1999, LNCS, P241
   FREUND S, 2000, THESIS STANFORD U
   Freund SN, 2003, J AUTOM REASONING, V30, P271, DOI 10.1023/A:1025011624925
   GOLDBERG A, 1998, P 5 ACM C COMP COMM, P49
   Hartel PH, 2001, ACM COMPUT SURV, V33, P517, DOI 10.1145/503112.503115
   Huisman M, 2001, THESIS U NIJMEGEN
   Hutton G, 2004, LECT NOTES COMPUT SC, V3125, P211
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kildall Gary A., 1973, Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'73, P194
   Klein G, 2004, J LOGIC ALGEBR PROGR, V58, P27, DOI 10.1016/j.jlap.2003.07.004
   Klein G, 2003, J AUTOM REASONING, V30, P363, DOI 10.1023/A:1025095122199
   Klein G, 2003, THEOR COMPUT SCI, V298, P583, DOI 10.1016/S0304-3975(02)00869-1
   Klein G, 2001, CONCURR COMP-PRACT E, V13, P1133, DOI 10.1002/cpe.597
   KLEIN G, 2003, THESIS TU MUNCHEN
   League C, 2002, ACM T PROGR LANG SYS, V24, P112, DOI 10.1145/514952.514954
   Leroy X, 2003, J AUTOM REASONING, V30, P235, DOI 10.1023/A:1025055424017
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Liu Hanbing., 2003, INTERPRETERS VIRTUAL, P15, DOI DOI 10.1145/858570.858572
   Muchnick S., 1997, ADV COMPILER DESIGN
   Nipkow T, 2002, LECT NOTES COMPUT SC, V2646, P259
   Nipkow T., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P342, DOI 10.1109/LICS.1991.151658
   NIPKOW T, 2001, LECT NOTES COMPUTER, V2030, P347
   NIPKOW T, 2005, PROOF TECHNOLOGY COM
   NIPKOW T, 2003, JAVA BYTECODE VERIFI, V30, P3
   NIPKOW T, 1998, P 25 ACM S PRINC PRO, P161, DOI DOI 10.1145/268946.268960
   OHEIMB DV, 1999, LNCS, V1523, P119
   Pusch C, 1999, LECT NOTES COMPUT SC, V1579, P89
   Qian ZY, 2000, ACM T PROGR LANG SYS, V22, P638, DOI 10.1145/363911.363915
   Rose E, 2003, J AUTOM REASONING, V31, P303, DOI 10.1023/B:JARS.0000021015.15794.82
   ROSE E, 2002, THESIS U PARIS 7
   ROSE E, 1998, P OOPSLA98 WORKSH FO
   Schirmer N, 2004, CONCURR COMP-PRACT E, V16, P689, DOI 10.1002/cpe.800
   SCHIRMER N, 2003, P FORM TECHN JAV LIK
   STARK RF, 2001, PROBLEM BYTECODE VER
   STATA R, 1998, P 25 ACM S PRINC PRO, P149
   STRECKER M, 2002, LNCS, V2392, P63
   SYME D, 1999, LNCS, V1523, P83
   Wenzel M., 2002, Isabelle/isar-a versatile environment for human-readable formal proof documents
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Young W. D., 1989, Journal of Automated Reasoning, V5, P493, DOI 10.1007/BF00243134
NR 57
TC 116
Z9 134
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2006
VL 28
IS 4
BP 619
EP 695
DI 10.1145/1146809.1146811
PG 77
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074LZ
UT WOS:000239815200002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Sanchez-Stern, A
   First, E
   Zhou, T
   Kaufman, Z
   Brun, Y
   Ringer, T
AF Sanchez-Stern, Alex
   First, Emily
   Zhou, Timothy
   Kaufman, Zhanna
   Brun, Yuriy
   Ringer, Talia
TI Passport: Improving Automated Formal Verification Using Identifiers
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Proof assistants; proof engineering; proof synthesis; machine learning
AB Formally verifying system properties is one of the most effective ways of improving system quality, but its high manual effort requirements often render it prohibitively expensive. Tools that automate formal verification by learning from proof corpora to synthesize proofs have just begun to show their promise. These tools are effective because of the richness of the data the proof corpora contain. This richness comes from the stylistic conventions followed by communities of proof developers, together with the powerful logical systems beneath proof assistants. However, this richness remains underexploited, with most work thus far focusing on architecture rather than on how to make the most of the proof data. This article systematically explores how to most effectively exploit one aspect of that proof data: identifiers. We develop the Passport approach, a method for enriching the predictive Coq model used by an existing proof-synthesis tool with three new encoding mechanisms for identifiers: category vocabulary indexing, subword sequence modeling, and path elaboration. We evaluate our approach's enrichment effect on three existing base tools: ASTactic, Tac, and Tok. In head-to-head comparisons, Passport automatically proves 29% more theorems than the best-performing of these base tools. Combining the three tools enhanced by the Passport approach automatically proves 38% more theorems than combining the three base tools. Finally, together, these base tools and their enhanced versions prove 45% more theorems than the combined base tools. Overall, our findings suggest that modeling identifiers can play a significant role in improving proof synthesis, leading to higher-quality software.
C1 [Sanchez-Stern, Alex; First, Emily; Kaufman, Zhanna; Brun, Yuriy] Univ Massachusetts Amherst, Amherst, MA 01003 USA.
   [Zhou, Timothy; Ringer, Talia] Univ Illinois, Urbana, IL USA.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   University of Illinois System; University of Illinois Urbana-Champaign
RP Sanchez-Stern, A; First, E (corresponding author), Univ Massachusetts Amherst, Amherst, MA 01003 USA.
EM sanchezstern@cs.umass.edu; efirst@cs.umass.edu; ttz2@illinois.edu;
   zhannakaufma@cs.umass.edu; brun@cs.umass.edu; tringer@illinois.edu
OI Ringer, Talia/0000-0003-1854-3321; Kaufman, Zhanna/0000-0002-9135-815X;
   Brun, Yuriy/0000-0003-3027-7986
FU Defense Advanced Research Projects Agency [HR0011-22-9-006]; National
   Science Foundation [CCF-2210243]
FX This work is supported by the Defense Advanced Research Projects Agency
   under grant no. HR0011-22-9-006, and by the National Science Foundation
   under grant no. CCF-2210243.
CR Agda Development Team, 2007, AGD WIK
   Agrawal Arpan, 2023, P DEMONSTRATIONS TRA
   [Anonymous], 1989, COQ PROOF ASSISTANT
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Bansal K, 2019, PR MACH LEARN RES, V97
   Arrieta AB, 2020, INFORM FUSION, V58, P82, DOI 10.1016/j.inffus.2019.12.012
   Bielik P, 2016, PR MACH LEARN RES, V48
   Biewald L., 2020, Experiment tracking with weights and biases
   Blaauwbroek L., 2020, LPAR 2020 23 INT C L, V73, P138, DOI [DOI 10.29007/WG1Q, 10.29007/wg1q]
   Celik Ahmet, 2019, 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). Proceedings, P539, DOI 10.1109/ASE.2019.00057
   Celik A, 2018, PROC IEEE ACM INT C, P117, DOI 10.1145/3183440.3183493
   Celik A, 2017, IEEE INT CONF AUTOM, P171, DOI 10.1109/ASE.2017.8115630
   Chen Mark, 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen QB, 2022, PROC INT CONF SOFTW, P2327, DOI 10.1145/3510003.3510162
   Chlipala A, 2013, Certified programming with dependent types
   Chowdhery A, 2022, Arxiv, DOI [arXiv:2204.02311, DOI 10.48550/ARXIV.2204.02311]
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   Coquand Thierry, 1986, RR0530 INRIA
   Czajka L, 2018, J AUTOM REASONING, V61, P423, DOI 10.1007/s10817-018-9458-4
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   First E, 2022, PROC INT CONF SOFTW, P749, DOI 10.1145/3510003.3510138
   First E, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428299
   First Emily, 2023, P 30 ACM JOINT EUROP
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gage P., 1994, C Users Journal, V12, P23
   Gao Xiang, 2022, CUB DEVICE SCAN IS N
   Guidotti R, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3236009
   Gvero T, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499370.2462192
   Gilpin LH, 2019, Arxiv, DOI [arXiv:1806.00069, 10.48550/arXiv.1806.00069, DOI 10.48550/ARXIV.1806.00069]
   Heim Lennart, 2022, ESTIMATING PALMS TRA
   Hellendoorn VJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P724, DOI 10.1145/3236024.3264832
   Huang Daniel, 2019, ICLR
   Isabelle Development Team, 1994, IS
   Jain K, 2020, PROC INT CONF SOFTW, P89, DOI 10.1145/3377812.3382156
   Jesus Emilio, 2016, SERAPI MACHINE FRIEN
   Jiang Albert, 2022, P C NEURAL INFORM PR
   Jiang Albert Qiaochu, 2021, P C ARTIFICIAL INTEL
   Karampatsis RM, 2020, PROC INT CONF SOFTW, P1073, DOI 10.1145/3377811.3380342
   Dam HK, 2016, Arxiv, DOI arXiv:1608.02715
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Komendantskaya E, 2013, ELECTRON P THEOR COM, P15, DOI 10.4204/EPTCS.118.2
   Lean Development Team, 2014, THEOR PROV LEAN
   Lebese Thabang, 2021, P ADV PROGRAMMING LA
   Lepikhin Dmitry, 2020, P INT C LEARNING REP
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Li Yangguang, 2022, P INT C LEARNING REP
   Li YJ, 2022, SCIENCE, V378, P1092, DOI 10.1126/science.abq1158
   Liu LY, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP), P5747
   Mou LL, 2015, Arxiv, DOI arXiv:1409.5718
   Nie PY, 2021, PROC IEEE ACM INT C, P21, DOI 10.1109/ICSE-Companion52605.2021.00026
   Nie PY, 2020, LECT NOTES COMPUT SC, V12167, P97, DOI 10.1007/978-3-030-51054-1_6
   Nie Pengyu, 2020, P COQ WORKSHOP
   Odena A., 2021, arXiv, DOI DOI 10.48550/ARXIV.2108.07732
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Paliwal A, 2020, AAAI CONF ARTIF INTE, V34, P2967
   Palmskog K, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P344, DOI 10.1145/3213846.3213877
   Peters M, 2018, STUD LATEINAMERIKA, V32, P1, DOI 10.5771/9783845286846
   Pham HV, 2020, IEEE INT CONF AUTOM, P771, DOI 10.1145/3324884.3416545
   Pierce Benjamin C., 2021, SOFTWARE FDN, V1
   Polu S, 2020, Arxiv, DOI arXiv:2009.03393
   Polu Stanislas, 2022, arXiv
   Popel Martin, 2018, Prague Bulletin of Mathematical Linguistics, P43, DOI 10.2478/pralin-2018-0002
   Qian Shangshu, 2021, Adv. Neural Inf. Process. Syst., V34, P30211
   Rajbhandari S, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00024
   Reichel Tom P., 2022, LARGE CUMULATIVE SUM
   Ringer T, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P112, DOI 10.1145/3453483.3454033
   Ringer T, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P99, DOI 10.1145/3372885.3373823
   Ringer T, 2019, FOUND TRENDS PROGRAM, V5, P102, DOI 10.1561/2500000045
   Ringer Talia, 2021, TALIA JOE CHAT PROOF
   Sanchez-Stern Alex, 2020, P 4 ACMSIGPLAN INTER
   Sculley D., 2014, MACHINE LEARNING HIG
   Sennrich R, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1715
   Shamir Gil, 2022, REPRODUCIBILITY DEEP
   Souyris Jean, 2014, Industrial Use of CompCert on a Safety-Critical Software Product
   Svyatkovskiy A, 2021, IEEE WORK CONF MIN S, P329, DOI 10.1109/MSR52588.2021.00045
   Tai KS, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1, P1556
   Tu ZP, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P269, DOI 10.1145/2635868.2635875
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Wu Yuhuai, 2022, P INT C LEARNING REP
   Yang KY, 2019, PR MACH LEARN RES, V97
NR 80
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2023
VL 45
IS 2
AR 12
DI 10.1145/3593374
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M2WV9
UT WOS:001028843500006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Deng, CQ
   Cousot, P
AF Deng, Chaoqiang
   Cousot, Patrick
TI The Systematic Design of Responsibility Analysis by Abstract
   Interpretation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Responsibility analysis; abstract interpretation; cognizance; forward
   reachability analysis; backward accessibility analysis; trace
   partitioning; dependency; causality
ID LIBRARY; DOMAINS
AB Given a behavior of interest, automatically determining the corresponding responsible entity (i.e., the root cause) is a task of critical importance in program static analysis. In this article, a novel definition of responsibility based on the abstraction of trace semantics is proposed, which takes into account the cognizance of observer, which, to the best of our knowledge, is a new innovative idea in program analysis. Compared to current dependency and causality analysis methods, the responsibility analysis is demonstrated to be more precise on various examples.
   However, the concrete trace semantics used in defining responsibility is uncomputable in general, which makes the corresponding concrete responsibility analysis undecidable. To solve this problem, the article proposes a sound framework of abstract responsibility analysis, which allows a balance between cost and precision. Essentially, the abstract analysis builds a trace partitioning automaton by an iteration of over-approximating forward reachability analysis with trace partitioning and under/over-approximating backward impossible failure accessibility analysis, and determines the bounds of potentially responsible entities along paths in the automaton. Unlike the concrete responsibility analysis that identifies exactly a single action as the responsible entity along every concrete trace, the abstract analysis may lose some precision and find multiple actions potentially responsible along each automaton path. However, the soundness is preserved, and every responsible entity in the concrete is guaranteed to be also found responsible in the abstract.
C1 [Deng, Chaoqiang; Cousot, Patrick] NYU, 60 Fifth Ave, New York, NY 10011 USA.
C3 New York University
RP Deng, CQ (corresponding author), NYU, 60 Fifth Ave, New York, NY 10011 USA.
EM deng@cs.nyu.edu; pcousot@cs.nyu.edu
RI Deng, Chaoqiang/IAO-3829-2023
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   AGRAWAL H, 1990, SIGPLAN NOTICES, V25, P246, DOI 10.1145/93548.93576
   Aguirre A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000145
   Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   [Anonymous], 1948, Bull. Soc. Math. France
   [Anonymous], 2007, TR20071201 TEL AV U
   Antoine Mine, 2012, BANAL STATIC ANAL PR
   Bagnara R, 2002, LECT NOTES COMPUT SC, V2477, P213
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Bakhirkin A, 2014, LECT NOTES COMPUT SC, V8723, P34, DOI 10.1007/978-3-319-10936-7_3
   Ball T, 2003, ACM SIGPLAN NOTICES, V38, P97, DOI 10.1145/640128.604140
   Bareinboim E.Chen., 2016, Proceed- ings of the Twenty-fifth International Joint Conference on Artificial Intelligence, P3577
   Beer A, 2015, LECT NOTES COMPUT SC, V9232, P203, DOI 10.1007/978-3-319-23404-5_14
   Beer I, 2012, FORM METHOD SYST DES, V40, P20, DOI 10.1007/s10703-011-0132-2
   Cheney J, 2011, MATH STRUCT COMP SCI, V21, P1301, DOI 10.1017/S0960129511000211
   Chockler H, 2004, J ARTIF INTELL RES, V22, P93, DOI 10.1613/jair.1391
   Chockler H, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352588
   Clarkson MR, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P51, DOI 10.1109/CSF.2008.7
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 2021, Principles of Abstract Interpretation
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2019, LECT NOTES COMPUT SC, V11822, P389, DOI 10.1007/978-3-030-32304-2_19
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Deng CQ, 2019, LECT NOTES COMPUT SC, V11822, P368, DOI 10.1007/978-3-030-32304-2_18
   Dillig I, 2012, ACM SIGPLAN NOTICES, V47, P181, DOI [10.1145/2345156.2254087, 10.1145/2345156.1993565]
   FRANKEL H, 1976, PHILOS SCI, V43, P560, DOI 10.1086/288713
   Frankle J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P657
   Giacobazzi R, 2018, ACM T PRIV SECUR, V21, DOI 10.1145/3175660
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Griesmayer A, 2007, ELECTRON NOTES THEOR, V174, P95, DOI 10.1016/j.entcs.2006.12.032
   Groce A., 2006, International Journal on Software Tools for Technology Transfer, V8, P229, DOI 10.1007/s10009-005-0202-0
   Halpern J. Y., 2001, UAI, P194
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   Henzinger Thomas A., 2019, ARXIV PREPRINT ARXIV
   Hume David, 1748, An Enquiry Concerning Human Understanding
   Jagadeesan R, 2009, LECT NOTES COMPUT SC, V5789, P152, DOI 10.1007/978-3-642-04444-1_10
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Jeannet Bertrand, 2009, INTERPROC ANAL
   Jin HS, 2002, LECT NOTES COMPUT SC, V2280, P445
   Jose M, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P437
   Kafle B, 2018, THEOR PRACT LOG PROG, V18, P553, DOI 10.1017/S1471068418000091
   King D., 2008, Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering, SIGSOFT '08/FSE-16, P250
   Korel B, 1998, INFORM SOFTWARE TECH, V40, P647, DOI 10.1016/S0950-5849(98)00089-5
   Kuntz Matthias, 2011, Computer Safety, Reliability, and Security. Proceedings 30th International Conference, SAFECOMP 2011, P71, DOI 10.1007/978-3-642-24270-0_6
   Laski Janusz, 2009, PROGRAM DEPENDENCIES, P125, DOI [10.1007/978-1-84882-240-5_6, DOI 10.1007/978-1-84882-240-5_6]
   Leitner-Fischer F, 2013, LECT NOTES COMPUT SC, V7737, P248
   Lewis David, 1974, The Journal of Philosophy, V70, P556, DOI DOI 10.2307/2025310
   Lewis DK., 1973, Counterfactuals
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Menzies Peter., 2017, The Stanford Encyclopedia of Philosophy
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Miné A, 2006, LECT NOTES COMPUT SC, V3855, P348
   Miné A, 2014, SCI COMPUT PROGRAM, V93, P154, DOI 10.1016/j.scico.2013.09.014
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   Miné A, 2001, LECT NOTES COMPUT SC, V2053, P155
   Miné A, 2012, ELECTRON NOTES THEOR, V287, P89, DOI 10.1016/j.entcs.2012.09.009
   Pearl J, 2013, Causality: Models, Reasoning, and Inference, V2nd
   Pistoia M, 2005, LECT NOTES COMPUT SC, V3586, P362
   Qi DW, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P33, DOI 10.1145/1595696.1595704
   Que Duong Nguyen, 2010, THESIS ENMP PARIS
   Ravi K, 2004, LECT NOTES COMPUT SC, V2988, P31
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Rival X, 2005, LECT NOTES COMPUT SC, V3672, P303
   Rival X., 2020, Introduction to Static Analysis
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Urban Caterina, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P683, DOI 10.1007/978-3-319-89884-1_24
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Weitzner DJ, 2008, COMMUN ACM, V51, P82, DOI 10.1145/1349026.1349043
   Westland JC, 2015, STUD SYST DECIS CONT, V22, P1, DOI 10.1007/978-3-319-16507-3
NR 74
TC 1
Z9 1
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2022
VL 44
IS 1
AR 3
DI 10.1145/3484938
PG 90
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YP1LJ
UT WOS:000748389400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Gange, G
   Ma, ZQ
   Navas, JA
   Schachte, P
   Sondergaard, H
   Stuckey, PJ
AF Gange, Graeme
   Ma, Zequn
   Navas, Jorge A.
   Schachte, Peter
   Sondergaard, Harald
   Stuckey, Peter J.
TI A Fresh Look at Zones and Octagons
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Abstract interpretation; shortest path algorithms; difference-bounds
   matrix; numerical abstract domains; program analysis; static analysis;
   variable packing; weakly relational domains
ID EXPLOITING SPARSITY; ABSTRACT DOMAIN; VERIFICATION; ALGORITHMS; LIBRARY
AB Zones and Octagons are popular abstract domains for static program analysis. They enable the automated discovery of simple numerical relations that hold between pairs of program variables. Both domains are well understood mathematically but the detailed implementation of static analyses based on these domains poses many interesting algorithmic challenges. In this article, we study the two abstract domains, their implementation and use. Utilizing improved data structures and algorithms for the manipulation of graphs that represent difference-bound constraints, we present fast implementations of both abstract domains, built around a common infrastructure. We compare the performance of these implementations against alternative approaches offering the same precision. We quantify the differences in performance by measuring their speed and precision on standard benchmarks. We also assess, in the context of software verification, the extent to which the improved precision translates to better verification outcomes. Experiments demonstrate that our new implementations improve the state of the art for both Zones and Octagons significantly.
C1 [Gange, Graeme; Stuckey, Peter J.] Monash Univ, Fac IT, Clayton, Vic 3800, Australia.
   [Ma, Zequn; Schachte, Peter; Sondergaard, Harald] Univ Melbourne, Sch Comp & Informat Syst, Parkville, Vic 3010, Australia.
   [Navas, Jorge A.] SRI Int, Comp Sci Lab, Menlo Pk, CA 94025 USA.
C3 Monash University; University of Melbourne; SRI International
RP Gange, G (corresponding author), Monash Univ, Fac IT, Clayton, Vic 3800, Australia.
EM graeme.gange@monash.edu; zequnm@student.unimelb.edu.au;
   jorge.navas@sri.com; schachte@unimelb.edu.au; harald@unimelb.edu.au;
   peter.stuckey@monash.edu
RI ; Schachte, Peter/H-4848-2016
OI Sondergaard, Harald/0000-0002-2352-1883; Navas, Jorge
   A/0000-0002-0516-1167; Schachte, Peter/0000-0001-5959-3769
FU Australian Research Council [DE160100568]; U.S. National Science
   Foundation [1816936]; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [1816936] Funding Source:
   National Science Foundation; Australian Research Council [DE160100568]
   Funding Source: Australian Research Council
FX Graeme Gange has been supported by the Australian Research Council under
   Discovery Early Career Researcher Award No. DE160100568. Jorge Navas has
   been supported by the U.S. National Science Foundation under Grant No.
   1816936.
CR Aho A. V., 1972, SIAM Journal on Computing, V1, P131, DOI 10.1137/0201008
   [Anonymous], 2008, P 10 INT ACM SIGPLAN, DOI DOI 10.1145/1389449.1389478
   [Anonymous], 1962, FLOWS NETWORKS
   Bagnara R, 2005, LECT NOTES COMPUT SC, V3672, P3
   BAGNARA R, 1997, THESIS U PISA
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Bagnara R, 2009, FORM METHOD SYST DES, V35, P279, DOI 10.1007/s10703-009-0073-1
   Banterle F, 2007, LECT NOTES COMPUT SC, V4634, P315
   Bellman R., 1958, Q APPL MATH, V16, P87
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Briggs P., 1993, ACM Letters on Programming Languages and Systems, V2, P59, DOI 10.1145/176454.176484
   Chawdhary A, 2019, FORM METHOD SYST DES, V54, P232, DOI 10.1007/s10703-017-0314-7
   Chawdhary A, 2017, LECT NOTES COMPUT SC, V10695, P471, DOI 10.1007/978-3-319-71237-6_23
   Cherkassky BV, 1999, MATH PROGRAM, V85, P277, DOI 10.1007/s101070050058
   Clam team, CLAM CRAB LLVM ABSTR
   Clarisó R, 2004, LECT NOTES COMPUT SC, V3148, P312
   Cormen T.H., 2009, INTRO ALGORITHMS
   Cotton S, 2006, LECT NOTES COMPUT SC, V4121, P170
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Crab, CORNUCOPIA ABSTRACTI
   EBPF, SET EBPF PROGR
   ELINA team, ELINA ETH LIBRARY NU
   FLOYD RW, 1962, COMMUN ACM, V5, P345, DOI 10.1145/367766.368168
   Gange G, 2019, LECT NOTES COMPUT SC, V11893, P95, DOI 10.1007/978-3-030-34175-6_6
   Gange G, 2016, LECT NOTES COMPUT SC, V9837, P189, DOI 10.1007/978-3-662-53413-7_10
   Gange G, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2651360
   Gershuni E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1069, DOI 10.1145/3314221.3314590
   Han S.-C., 2006, PACT 06 P 15 INT C P, P222
   Harvey W., 1997, Australian Computer Science Communications, V19, P102
   He JX, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1112, DOI 10.1145/3385412.3386016
   Heo K, 2016, LECT NOTES COMPUT SC, V9837, P237, DOI 10.1007/978-3-662-53413-7_12
   Jaffar J., 1994, Principles and Practice of Constraint Programming. Second International Workshop, PPCP '94. Proceedings, P86
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   JOHNSON DB, 1977, J ACM, V24, P1, DOI 10.1145/321992.321993
   Jourdan JH, 2017, ELECTRON NOTES THEOR, V331, P57, DOI 10.1016/j.entcs.2017.02.004
   Jourdan Jacques-Henri., 2016, THESIS U PARIS DIDER
   Kuderski J, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P37, DOI [10.23919/fmcad.2019.8894275, 10.23919/FMCAD.2019.8894275]
   Lahiri SK, 2005, LECT NOTES COMPUT SC, V3717, P168
   Larsen KG, 1997, REAL TIM SYST SYMP P, P14, DOI 10.1109/REAL.1997.641265
   Logozzo F, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P184
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Miné A, 2006, LECT NOTES COMPUT SC, V3855, P348
   Miné A, 2002, LECT NOTES COMPUT SC, V2477, P117
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   Miné A, 2001, LECT NOTES COMPUT SC, V2053, P155
   Mine A., 2004, Domaines numeriques abstraits faiblement relationnels
   Mine Antoine, 2000, THESIS PARIS
   NEMHAUSER GL, 1972, J MATH ANAL APPL, V38, P328, DOI 10.1016/0022-247X(72)90091-1
   Prevail team, PREVAIL POL RUNT EBP
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Schutt A, 2010, INFORMS J COMPUT, V22, P514, DOI 10.1287/ijoc.1090.0369
   SHOSTAK R, 1981, J ACM, V28, P769, DOI 10.1145/322276.322288
   Simon A, 2005, LECT NOTES COMPUT SC, V3672, P336
   Simon A, 2003, LECT NOTES COMPUT SC, V2664, P71, DOI 10.1007/3-540-45013-0_7
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Singh G, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2813885.2738000, 10.1145/2737924.2738000]
   SVCOMP, 2019, COMP SOFTW VER SV CO
   Venet A, 2004, ACM SIGPLAN NOTICES, V39, P231, DOI 10.1145/996893.996869
   Venet Arnaud J., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P139, DOI 10.1007/978-3-642-31424-7_15
NR 62
TC 0
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2021
VL 43
IS 3
AR 11
DI 10.1145/3457885
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW8UD
UT WOS:000753687300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Melo, LTC
   Ribeiro, RG
   Guimaraes, BCF
   Pereira, FMQ
AF Melo, Leandro T. C.
   Ribeiro, Rodrigo G.
   Guimaraes, Breno C. F.
   Quintao Pereira, Fernando Magno
TI Type Inference for C: Applications to the Static Analysis of Incomplete
   Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Partial programs; parsing; type inference; C language
ID SEMANTICS
AB Type inference is a feature that is common to a variety of programming languages. While, in the past, it has been prominently present in functional ones (e.g., ML and Haskell), today, many object-oriented/multi-paradigm languages such as C# and C++ offer, to a certain extent, such a feature. Nevertheless, type inference still is an unexplored subject in the realm of C. In particular, it remains open whether it is possible to devise a technique that encompasses the idiosyncrasies of this language. The first difficulty encountered when tackling this problem is that parsing C requires, not only syntactic, but also semantic information. Yet, greater challenges emerge due to C's intricate type system. In this work, we present a unification-based framework that lets us infer the missing struct, union, enum, and typedef declarations in a program.
   As an application of our technique, we investigate the reconstruction of partial programs. Incomplete source code naturally appears in software development: during design and while evolving, testing, and analyzing programs; therefore, understanding it is a valuable asset. With a reconstructed well-typed program, one can: (i) enable static analysis tools in scenarios where components are absent; (ii) improve precision of "zero setup" static analysis tools; (iii) apply stub generators, symbolic executors, and testing tools on code snippets; and (iv) provide engineers with an assortment of compilable benchmarks for performance and correctness validation. We evaluate our technique on code from a variety of C libraries, including GNU's Coreutils and on snippets from popular projects such as CPython, FreeBSD, and Git.
C1 [Melo, Leandro T. C.; Guimaraes, Breno C. F.; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Dept Ciencia Comp, ICEx, Rua Reitor Pires Albuquerque Parnpulha, BR-31270901 Belo Horizonte, MG, Brazil.
   [Ribeiro, Rodrigo G.] Univ Fed Ouro Preto, Dept Comp, ICEB, Campus Univ Morro Cruzeiro, BR-35400000 Ouro Preto, MG, Brazil.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Ouro Preto
RP Melo, LTC (corresponding author), Univ Fed Minas Gerais, Dept Ciencia Comp, ICEx, Rua Reitor Pires Albuquerque Parnpulha, BR-31270901 Belo Horizonte, MG, Brazil.
EM ltcmelo@dcc.ufmg.br; rodrigo@decsi.ufop.br; brenosfg@dcc.ufmg.br;
   fernando@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023
FU CNPq; CAPES; FAPEMIG
FX This research has been made possible through the support of CNPq, CAPES,
   and FAPEMIG.
CR [Anonymous], 2003, J FUNCT PROGRAM
   [Anonymous], 1989, X31591989 ANSI
   [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   Ashouri AH, 2016, ACM T ARCHIT CODE OP, V13, DOI 10.1145/2928270
   Barany G, 2018, LECT NOTES COMPUT SC, V10855, P112, DOI 10.1007/978-3-319-94460-9_7
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Bayne M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P521, DOI 10.1145/1985793.1985864
   Beto JA, 2008, NUTR HEALTH SER, P177, DOI 10.1007/978-1-59745-032-4_7
   Bischofberger Walter R., 1993, OOPS MESSENGER, V4, P229
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Borning AlanH., 1982, Proceedings of the 9th Symposium on Principles of Programming Languages (POPL), P133
   Bunel Rudy., 2017, ICLR
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   CARDELLI L, 1984, LECT NOTES COMPUT SC, V173, P51
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Chandra S., 1999, Software Engineering Notes, V24, P66, DOI 10.1145/381788.316183
   Cummins C, 2017, INT SYM CODE GENER, P86, DOI 10.1109/CGO.2017.7863731
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   Dagenais B, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P313
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   de Souza Xavier TC, 2018, COMPUT INFORM, V37, P165, DOI 10.4149/cai_2018_1_165
   Dolamore S, 2018, PUBLIC INTEGR, V20, P595, DOI 10.1080/10999922.2017.1333943
   Dubois C, 1999, J AUTOM REASONING, V23, P319, DOI 10.1023/A:1006285817788
   Ellison C, 2012, ACM SIGPLAN NOTICES, V47, P533, DOI 10.1145/2103621.2103719
   Evans D, 1996, ACM SIGPLAN NOTICES, V31, P44, DOI 10.1145/249069.231389
   Fabrício J, 2018, J COMPUT SCI TECH-CH, V33, P940, DOI 10.1007/s11390-018-1867-7
   Faustino A., 2020, 012020 U FED MIN GER
   Faxén KF, 2002, J FUNCT PROGRAM, V12, P295, DOI 10.1017/S0956796802004380
   Foster JS, 1999, ACM SIGPLAN NOTICES, V34, P192, DOI 10.1145/301631.301665
   FUH YC, 1988, LECT NOTES COMPUT SC, V300, P94
   Gazzillo P, 2012, ACM SIGPLAN NOTICES, V47, P323, DOI 10.1145/2345156.2254103
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P539, DOI 10.11455/2568225.2568273
   Grossman D, 2006, ACM T PROGR LANG SYS, V28, P429, DOI 10.1145/1133651.1133653
   Hathhorn C, 2015, ACM SIGPLAN NOTICES, V50, P336, DOI [10.1145/2813885.2737979, 10.1145/2737924.2737979]
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   ISO, 1999, 98991999 ISO ISOIEC
   ISO, 2011, ISO/ IEC 9899: 2011 Information technologyProgramming languages-C
   ISO-Standard, 1990, 98991990 ISOIEC
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Jones Simon Peyton, 2004, MSCIS0526 U PENN
   Kaes S., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P193, DOI 10.1145/141471.141540
   Kaplan Marc A., 1978, POPL, P60
   Knapen G, 1999, PROG COMPREHEN, P114, DOI 10.1109/WPC.1999.777750
   Koppler R, 1997, SOFTWARE PRACT EXPER, V27, P637, DOI 10.1002/(SICI)1097-024X(199706)27:6<637::AID-SPE99>3.0.CO;2-3
   Krebbers R., 2015, Ph. D. Dissertation
   Krebbers R, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P15, DOI 10.1145/2676724.2693571
   Larochelle David, 2001, USENIX SECURITY, V32
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   Melo L.T.C., 2020, ACM T PROGR LANG SYS, V42, DOI [10.1145/3421472, DOI 10.1145/3421472]
   Melo LTC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158117
   Memarian K, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2908080.2908081, 10.1145/2980983.2908081]
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell John C, 1991, J FUNCT PROGRAM, V1, P245
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Mycroft A, 1999, LECT NOTES COMPUT SC, V1576, P208
   Namolaru M, 2010, PROCEEDINGS OF THE 2010 INTERNATIONAL CONFERENCE ON COMPILERS, ARCHITECTURES AND SYNTHESIS FOR EMBEDDED SYSTEMS (CASES '10), P197, DOI 10.1145/1878921.1878951
   Naraschewski W, 1999, J AUTOM REASONING, V23, P299, DOI 10.1023/A:1006277616879
   Nazaré H, 2014, ACM SIGPLAN NOTICES, V49, P791, DOI [10.1145/2714064.2660205, 10.1145/2660193.2660205]
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Necula GC, 2002, ACM SIGPLAN NOTICES, V37, P128, DOI 10.1145/565816.503286
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Nienhuis K, 2016, ACM SIGPLAN NOTICES, V51, P111, DOI 10.1145/3022671.2983997
   Noonan M, 2016, ACM SIGPLAN NOTICES, V51, P27, DOI [10.1145/2908080.2908119, 10.1145/2980983.2908119]
   Novaes M, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P429, DOI 10.1145/3293883.3301493
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Odersky M, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/373243.360207
   Padioleau Y, 2009, LECT NOTES COMPUT SC, V5501, P109, DOI 10.1007/978-3-642-00722-4_9
   Palsberg Jens, 1991, OBJ ORIEN TYPE INFER, V26
   Papaspyrou N., 1998, THESIS
   Papaspyrou NS, 2001, COMP STAND INTER, V23, P169, DOI 10.1016/S0920-5489(01)00059-9
   Patankar SS, 2013, 2013 IEEE INTERNATIONAL CONFERENCE ON COMPUTATIONAL INTELLIGENCE AND COMPUTING RESEARCH (ICCIC), P7
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2004, TYPES PROGRAMMING LA
   Poesia Gabriel, 2017, P ACM PROGRAM LANG, V1
   Pottier F, 1996, ACM SIGPLAN NOTICES, V31, P122, DOI 10.1145/232629.232642
   Pottier F, 2006, ACM SIGPLAN NOTICES, V41, P232, DOI 10.1145/1111320.1111058
   Pottier F, 1999, ACM SIGPLAN NOTICES, V34, P228, DOI 10.1145/291251.289448
   Rehof Jakob, 1998, THESIS
   Remy Didier, 2017, TYPE SYSTEMS PROGRAM
   Remy Didier, 1992, 1766 I NAT RECH INF
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Rodriguez R, 2013, COLEC MONOGRAF ACAD, P1
   Schkufza E, 2016, COMMUN ACM, V59, P114, DOI 10.1145/2863701
   SIMONET V, 2003, APLAS, V2895, P283
   Smith G., 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P341
   SMITH GS, 1994, SCI COMPUT PROGRAM, V23, P197, DOI 10.1016/0167-6423(94)00020-4
   Sreelatha JKV, 2018, IEEE T MULTI-SCALE C, V4, P163, DOI 10.1109/TMSCS.2018.2791955
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sterling L., 1994, THE ART OF PROLOG
   Su Zhendong, 2002, 1 ORDER THEORY SUBTY, V37
   The Qt Project, 2017, QT CREATOR IDE
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Tiuryn J., 1993, TAPSOFT '93: Theory and Practice of Software Development. 4th International Joint Conference CAAP/FASE Proceedings, P686
   VYTINIOTIS D, 2012, ICFP, V47, P341, DOI DOI 10.1145/2364527.2364554
   WADLER P, 2009, ESOP, V5502, P1
   Wand M., 1987, Fundamenta Informaticae, V10, P115
   Wand M., 1987, LICS
   Wand Mitchell, 1988, LCS
   Williams N, 2005, LECT NOTES COMPUT SC, V3463, P281
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhao P., 2003, WORKSH LANG COMP PAR, P405
NR 105
TC 3
Z9 3
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2020
VL 42
IS 3
AR 15
DI 10.1145/3421472
PG 71
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PA3QO
UT WOS:000595553200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Lozano, RC
   Carlsson, M
   Blindell, GH
   Schulte, C
AF Lozano, Roberto Castaneda
   Carlsson, Mats
   Blindell, Gabriel Hjort
   Schulte, Christian
TI Combinatorial Register Allocation and Instruction Scheduling
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Combinatorial optimization; register allocation; instruction scheduling
ID GLOBAL CONSTRAINTS; INTEGER; MULTIMEDIA; GENERATION; PROOF; SSA
AB This article introduces a combinatorial optimization approach to register allocation and instruction scheduling, two central compiler problems. Combinatorial optimization has the potential to solve these problems optimally and to exploit processor-specific features readily. Our approach is the first to leverage this potential in practice: it captures the complete set of program transformations used in state-of-the-art compilers, scales to medium-sized functions of up to 1.000 instructions, and generates executable code. This level of practicality is reached by using constraint programming, a particularly suitable combinatorial optimization technique. Unison, the implementation of our approach, is open source, used in industry, and integrated with the LLVM toolchain.
   An extensive evaluation confirms that Unison generates better code than LLVM while scaling to medium-sized functions. The evaluation uses systematically selected benchmarks from Media-Bench and SPEC CPU2006 and different processor architectures (Hexagon, ARM, MIPS). Mean estimated speedup ranges from 1.1% to 10% and mean code size reduction ranges from 1.3% to 3.8% for the different architectures. A significant part of this improvement is due to the integrated nature of the approach. Executing the generated code on Hexagon confirms that the estimated speedup results in actual speedup. Given a fixed time limit, Unison solves optimally functions of up to 946 instructions, nearly an order of magnitude larger than previous approaches.
   The results show that our combinatorial approach can be applied in practice to trade compilation time for code quality beyond the usual compiler optimization levels, identify improvement opportunities in heuristic algorithms, and fully exploit processor-specific features.
C1 [Lozano, Roberto Castaneda; Carlsson, Mats; Schulte, Christian] RISE SICS, Electrum 229, S-16440 Kista, Sweden.
   [Lozano, Roberto Castaneda; Blindell, Gabriel Hjort; Schulte, Christian] KTH Royal Inst Technol, Sch Elect Engn & Comp Sci, Electrum 229, S-16440 Kista, Sweden.
C3 RISE Research Institutes of Sweden; Royal Institute of Technology
RP Lozano, RC (corresponding author), RISE SICS, Electrum 229, S-16440 Kista, Sweden.; Lozano, RC (corresponding author), KTH Royal Inst Technol, Sch Elect Engn & Comp Sci, Electrum 229, S-16440 Kista, Sweden.
EM roberto.castaneda@ri.se; mats.carlsson@ri.se; ghb@kth.se;
   cschulte@kth.se
RI Lozano, Roberto Castañeda/G-1974-2011
OI Hjort Akerlund (ex Blindell), Gabriel/0000-0001-6794-6413; Schulte,
   Christian/0000-0002-6283-7004
FU Ericsson AB; Swedish Research Council (VR) [621-2011-6229]
FX This work has been partially funded by Ericsson AB and the Swedish
   Research Council (VR) under grant 621-2011-6229.
CR AGGOUN A, 1993, MATH COMPUT MODEL, V17, P57, DOI 10.1016/0895-7177(93)90068-A
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   ARM, 2007, ARM1156T2F-S Technical Reference Manual
   Aycock J, 2000, LECT NOTES COMPUT SC, V1781, P110
   Baptiste P, 2006, FOUND ARTIF INTELL, P761
   Barany G, 2013, LECT NOTES COMPUT SC, V7791, P21, DOI 10.1007/978-3-642-37051-9_2
   Barber D, 2012, USING NEW WEB TOOLS IN THE PRIMARY CLASSROOM: A PRACTICAL GUIDE FOR ENHANCING TEACHING AND LEARNING, P2
   Barik R, 2007, LECT NOTES COMPUT SC, V4382, P267, DOI 10.1007/978-3-540-72521-3_20
   Bashford S, 1999, DES AUTOM EMBED SYST, V4, P119, DOI 10.1023/A:1008966522714
   BELDICEANU N, 1994, MATH COMPUT MODEL, V20, P97, DOI 10.1016/0895-7177(94)90127-9
   Bessiere C, 2006, FOUND ARTIF INTELL, P29
   Biere A., 2009, Handbook of Satisfiability
   Blindell G.H., 2016, INSTRUCTION SELECTIO
   Blindell Gabriel Hjort, 2018, Ph.D. Thesis
   BOWMAN EH, 1959, OPER RES, V7, P621, DOI 10.1287/opre.7.5.621
   BRIGGS P, 1992, SIGPLAN NOTICES, V27, P311, DOI 10.1145/143103.143143
   Buchwald S, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P67, DOI 10.1145/2892208.2892211
   Carlsson Mats, 2018, UNISONS SOURCE CODE
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   Chang CM, 1997, COMPUT MATH APPL, V34, P1, DOI 10.1016/S0898-1221(97)00184-3
   CHOW F, 1984, SIGPLAN NOTICES, V19, P222, DOI 10.1145/502949.502896
   CHOW FC, 1988, SIGPLAN NOTICES, V23, P85, DOI 10.1145/960116.53999
   Chu G. G., 2011, THESIS
   Codrescu L, 2014, IEEE MICRO, V34, P34, DOI 10.1109/MM.2014.12
   Colombet Quentin, 2015, ACM T ARCHIT CODE OP, V11, P1
   Cormen T.H., 2009, INTRO ALGORITHMS
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Ebner D., 2009, P 2009 INT C COMPILE, P77, DOI DOI 10.1145/1629395.1629408
   Eriksson M, 2012, ACM T EMBED COMPUT S, V11, DOI 10.1145/2180887.2180896
   Falk H, 2011, EUROMICRO, P13, DOI 10.1109/ECRTS.2011.10
   Fisher JosephA., 1983, ISCA 83, P140
   Gange G, 2015, THEOR PRACT LOG PROG, V15, P526, DOI 10.1017/S1471068415000204
   Gebotys CH, 1997, TENTH INTERNATIONAL SYMPOSIUM ON SYSTEM SYNTHESIS, PROCEEDINGS, P41, DOI 10.1109/ISSS.1997.621674
   Gecode Team, 2018, GEC GEN CONSTR DEV E
   Gomes CP, 2001, ARTIF INTELL, V126, P43, DOI 10.1016/S0004-3702(00)00081-3
   Gomes CP, 2000, J AUTOM REASONING, V24, P67, DOI 10.1023/A:1006314320276
   Goodman J. R., 1988, Conference Proceedings. 1988 International Conference on Supercomputing, P442, DOI 10.1145/55364.55407
   Goodwin DW, 1996, SOFTWARE PRACT EXPER, V26, P929, DOI 10.1002/(SICI)1097-024X(199608)26:8<929::AID-SPE40>3.0.CO;2-T
   Govindarajan R., 2007, COMPILER DESIGN HDB
   Hack S, 2006, LECT NOTES COMPUT SC, V3923, P247
   Hennessy John L, 2011, Computer Architecture: A Quantitative Approach
   Intel, 2017, 325462065US INT
   Kastner D., 2001, Languages, Compilers, and Tools for Embedded Systems. ACM SIGPLAN Workshop LCTES 2000. Proceedings (Lecture Notes in Computer Science Vol.1985), P63
   Kessler C, 2006, CONCURR COMP-PRACT E, V18, P1353, DOI 10.1002/cpe.1012
   Kessler CW, 2010, HANDBOOK OF SIGNAL PROCESSING SYSTEMS, P603, DOI 10.1007/978-1-4419-6345-1_22
   Koes DR, 2006, ACM SIGPLAN NOTICES, V41, P204, DOI 10.1145/1133981.1134006
   Koes David Ryan, 2009, P TH 12 INT WORKSH S, P210, DOI [10.1145/1543820.1543824, DOI 10.1145/1543820.1543824]
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Law YC, 2004, LECT NOTES COMPUT SC, V3258, P362
   Lee CH, 1997, INT SYMP MICROARCH, P330, DOI 10.1109/MICRO.1997.645830
   LEUPERS R, 2001, RETARGETABLE COMPILE
   Lodi A., 2002, EJOR, V141, P2
   Lombardi M, 2012, CONSTRAINTS, V17, P51, DOI 10.1007/s10601-011-9115-6
   Lozano Roberto Castaneda, 2012, Principles and Practice of Constraint Programming. Proceedings 18th International Conference, CP 2012, P750, DOI 10.1007/978-3-642-33558-7_54
   Lozano RC, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P263, DOI 10.1145/2892208.2892237
   Lozano RC, 2014, ACM SIGPLAN NOTICES, V49, P23, DOI 10.1145/2597809.2597815
   Lozano Roberto Castaneda, 2016, TOOL DEMONSTRATION R
   Lozano Roberto Castaneda, 2014, TECHNICAL REPORT
   Lozano Roberto Castaneda, 2017, REGISTER ALLOCATION
   Lozano Roberto Castaneda, 2017, UNISON MANUAL
   MacQueen J., 1967, P 5 BERK S MATH STAT, P281
   Malik AM, 2008, LECT NOTES COMPUT SC, V5202, P97, DOI 10.1007/978-3-540-85958-1_7
   Malik AM, 2008, INT J ARTIF INTELL T, V17, P37, DOI 10.1142/S0218213008003765
   MANNE AS, 1960, OPER RES, V8, P219, DOI 10.1287/opre.8.2.219
   MiniZinc Team, 2018, MINIZINC CONSTR MOD
   MIPS, 2016, MIPS32 INSTR SET MAN
   Nagarakatte SG, 2007, LECT NOTES COMPUT SC, V4420, P126
   Naik M, 2002, ACM SIGPLAN NOTICES, V37, P120, DOI 10.1145/566225.513851
   Nandivada VK, 2007, LECT NOTES COMPUT SC, V4634, P153
   Nandivada VK, 2006, LECT NOTES COMPUT SC, V3923, P232
   Nethercote N, 2007, LECT NOTES COMPUT SC, V4741, P529
   Pereira FMQ, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P216
   Persson M. J. D., 2017, THESIS
   Phansalkar A, 2005, INT SYM PERFORM ANAL, P10, DOI 10.1109/ISPASS.2005.1430555
   Qualcomm, 2013, 80N204017 QUALC
   Qualcomm, 2013, 80N204023 QUALC
   RAU BR, 1993, J SUPERCOMPUT, V7, P9, DOI 10.1007/BF01205181
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   Savelsbergh M. W., 1994, ORSA Journal on Computing, V6, P445, DOI 10.1287/ijoc.6.4.445
   Scholz B., 2002, SIGPLAN Notices, V37, P139, DOI 10.1145/566225.513854
   Shobaki G, 2013, ACM T ARCHIT CODE OP, V10, DOI 10.1145/2512432
   Simonis H, 2008, LECT NOTES COMPUT SC, V5202, P52, DOI 10.1007/978-3-540-85958-1_4
   Smith BM, 2006, FOUND ARTIF INTELL, P377
   Spearman C, 1904, AM J PSYCHOL, V15, P72, DOI 10.2307/1412159
   SPEC, 2016, CPU 2006 BENCHM
   SPEC, 2018, BUILD SPEC CPU2006 T
   Sreedhar V., 1999, LNCS, V1694, P849
   van Beek P, 2006, FOUND ARTIF INTELL, P85
   Van Hentenryck P., 1988, AAAI 88. Seventh National Conference on Artificial Intelligence, P660
   van Hoeve W.J., 2006, HDB CONSTRAINT PROGR, P205, DOI DOI 10.1016/S1574-6526(06)80010-6
   von Koch TJKE, 2010, INT SYM CODE GENER, P180
   Wagner H.M., 1959, NAV RES LOGIST Q, V6, P131, DOI [10.1002/nav.3800060205, DOI 10.1002/NAV.3800060205]
   WALL DW, 1986, SIGPLAN NOTICES, V21, P264, DOI 10.1145/13310.13338
   Wickberg Fredrik, 2017, OUTPERFORMING STATE
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Wilken K, 2000, ACM SIGPLAN NOTICES, V35, P121, DOI 10.1145/358438.349318
   WILSON SC, 1994, FOURTEENTH INTERNATIONAL TECHNICAL CONFERENCE ON ENHANCED SAFETY OF VEHICLES, PROCEEDINGS, VOLS 1 AND 2, P70
   Wilson Tom, 2002, CODE GENERATION EMBE, P103
   Winkel S, 2007, INT SYMP MICROARCH, P43, DOI 10.1109/MICRO.2007.10
   Wolsey L.A., 1999, WIL INT S D
   Young Cliff, 2005, EMBEDDED COMPUTING
NR 102
TC 12
Z9 15
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2019
VL 41
IS 3
AR 17
DI 10.1145/3332373
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JU2BC
UT WOS:000501479500004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Lidman, J
   Mckee, SA
AF Lidman, Jacob
   Mckee, Sally A.
TI Verifying Reliability Properties Using the Hyperball Abstract Domain
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Reliability analysis; abstract interpretation; numerical abstraction;
   disjunctive refinement
ID SYSTEMS; ERRORS
AB Modern systems are increasingly susceptible to soft errors that manifest themselves as bit flips and possibly alter the semantics of an application. We would like to measure the quality degradation on semantics due to such bit flips, and thus we introduce a Hyperball abstract domain that allows us to determine the worst-case distance between expected and actual results. Similar to intervals, hyperballs describe a connected and dense space. The semantics of low-level code in the presence of bit flips is hard to accurately describe in such a space. We therefore combine the Hyperball domain with an existing affine system abstract domain that we extend to handle bit flips, which are introduce as disjunctions. Bit-flips can reduce the precision of our analysis, and we therefor introduce the Scale domain as a disjunctive refinement to minimize precision loss. This domain bounds the number of disjunctive elements by quantifying the over-approximation of different partitions and uses submodular optimization to find a good partitioning (within a bound of optimal). We evaluate these domains to show benefits and potential problems. For the application we examine here, adding the Scale domain to the Hyperball abstraction improves accuracy by up to two orders of magnitude. Our initial results demonstrate the feasibility of this approach, although we would like to further improve execution efficiency.
C1 [Lidman, Jacob; Mckee, Sally A.] Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
C3 Chalmers University of Technology
RP Lidman, J (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
EM lidman@chalmers.se; mckee@chalmers.se
CR Amato C, 2010, LECT NOTES COMPUT SC, V6337, P134, DOI 10.1007/978-3-642-15769-1_9
   [Anonymous], COSADE
   Bagnara R, 1998, SCI COMPUT PROGRAM, V30, P119, DOI 10.1016/S0167-6423(97)00009-9
   Bar-El H, 2006, P IEEE, V94, P370, DOI 10.1109/JPROC.2005.862424
   Barrett E, 2010, ELECTRON NOTES THEOR, V267, P17, DOI 10.1016/j.entcs.2010.09.003
   Boneh D, 2001, J CRYPTOL, V14, P101, DOI 10.1007/s001450010016
   Clarisó R, 2004, LECT NOTES COMPUT SC, V3148, P312
   Costantini G, 2013, LECT NOTES COMPUT SC, V8144, P447, DOI 10.1007/978-3-642-41202-8_29
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2010, LECT NOTES COMPUT SC, V6200, P72, DOI 10.1007/978-3-642-13754-9_5
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Elder M., 2014, T PROG LANG SYST, V36, P4
   Fischer K., 2005, THESIS
   Goemans MX, 2009, PROCEEDINGS OF THE TWENTIETH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P535
   Guan Qiang, 2015, P 5 WORKSH FAULT TOL, P35
   Gurfinkel A, 2010, LECT NOTES COMPUT SC, V6337, P287, DOI 10.1007/978-3-642-15769-1_18
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   King A, 2008, LECT NOTES COMPUT SC, V5123, P281
   Kocher P., 1999, Advances in Cryptology - CRYPTO'99. 19th Annual International Cryptology Conference. Proceedings, P388
   Krause A, 2010, J MACH LEARN RES, V11, P1141
   Krishnaswamy S, 2005, DES AUT TEST EUROPE, P282, DOI 10.1109/DATE.2005.47
   Lidman J, 2014, LECT NOTES COMPUT SC, V8805, P523, DOI 10.1007/978-3-319-14325-5_45
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Meola ML, 2010, LECT NOTES COMPUT SC, V6012, P468, DOI 10.1007/978-3-642-11957-6_25
   Michalak SE, 2005, IEEE T DEVICE MAT RE, V5, P329, DOI 10.1109/TDMR.2005.855685
   Misailovic S, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI [10.1145/10.1145/2660193.2660231, 10.1145/2714064.2660231]
   Nielson F., 1999, Principles of Program Analysis
   Roux P, 2012, HSCC 12: PROCEEDINGS OF THE 15TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P105
   Sankaranarayanan S, 2005, LECT NOTES COMPUT SC, V3385, P25
   Saraf N., 2015, CIRC SYST C DCAS 15, P1
   Sharma R, 2014, ACM SIGPLAN NOTICES, V49, P127, DOI 10.1145/2535838.2535853
   Sharma T., 2013, TR1789 U WISC MAD CO
   Sotin P., 2010, INRIA00457324
   The CGAL Project, 2015, CGAL US REG MAN
   Wang Z, 2015, PROCEEDINGS OF THE SIXTH ASIA SYMPOSIUM ON QUALITY ELECTRONIC DESIGN ASQED 2015, P31, DOI 10.1109/ACQED.2015.7274003
   Weisstein E. W., 2002, Concise Encyclopedia of Mathematics, V2
   Zhao L, 2005, MATH PROGRAM, V102, P167, DOI 10.1007/s10107-004-0510-2
NR 37
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2018
VL 40
IS 1
AR 3
DI 10.1145/3156017
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS6AZ
UT WOS:000419881600003
DA 2024-07-18
ER

PT J
AU Wagner, G
   Larsen, P
   Brunthaler, S
   Franz, M
AF Wagner, Gregor
   Larsen, Per
   Brunthaler, Stefan
   Franz, Michael
TI Thinking Inside the Box: Compartmentalized Garbage Collection
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Performance; Experimentation; Garbage collection; isolation;
   memory management; web-browser architecture
AB The web browser is the "new desktop." Not only do many users spend most of their time using the browser, the browser has also become host to rich and dynamic applications that were previously tailored to each individual operating system. The lingua franca of web scripting, JavaScript, was pivotal in this development.
   Imagine that all desktop applications allocated memory from a single heap managed by the operating system. To reclaim memory upon application shutdown, all processes would then be garbage collected-not just the one being quit. While operating systems improved upon this approach long ago, this was how browsers managed memory until recently.
   This article explores compartmentalized memory management, an approach tailored specifically to web browsers. The idea is to partition the JavaScript heap into compartments and allocate objects to compartments based on their origin. All objects in the same compartment reference each other direct, whereas cross-origin references go through wrapper objects.
   We carefully evaluate our techniques using Mozilla's Firefox browser-which now ships with our enhancements-and demonstrate the benefits of collecting each compartment independently. This simultaneously improves runtime performance (up to 36%) and reduces garbage collection pause times (up to 75%) as well as the memory footprint of the browser. In addition, enforcing the same-origin security policy becomes simple and efficient with compartments.
C1 [Wagner, Gregor] Mozilla Corp, Mountain View, CA USA.
   [Larsen, Per; Brunthaler, Stefan; Franz, Michael] Univ Calif Irvine, Donald Bren Sch Informat & Comp Sci, Dept Comp Sci, Irvine, CA 92697 USA.
   [Wagner, Gregor] Mozilla Berlin, Haus 10,Treppe 6,Voltastr 5, D-13355 Berlin, Germany.
C3 University of California System; University of California Irvine
RP Wagner, G (corresponding author), Mozilla Corp, Mountain View, CA USA.; Larsen, P; Brunthaler, S; Franz, M (corresponding author), Univ Calif Irvine, Donald Bren Sch Informat & Comp Sci, Dept Comp Sci, Irvine, CA 92697 USA.; Wagner, G (corresponding author), Mozilla Berlin, Haus 10,Treppe 6,Voltastr 5, D-13355 Berlin, Germany.
EM gwagner@mozilla.com; perl@uci.edu; sbrunthaler@sba-research.org;
   franz@uci.edu
OI Brunthaler, Stefan/0000-0001-9766-4871
FU National Science Foundation [CNS-1513837, CNS-0905684, CCF-1117162];
   Defense Advanced Research Projects Agency (DARPA) [D11PC20024,
   N660001-1-2-4014]; Direct For Computer & Info Scie & Enginr; Division Of
   Computer and Network Systems [1513837] Funding Source: National Science
   Foundation
FX This material is based upon work supported in part by the National
   Science Foundation under Grant Nos. CNS-1513837, CNS-0905684, and
   CCF-1117162 and by the Defense Advanced Research Projects Agency (DARPA)
   under contracts D11PC20024 and N660001-1-2-4014. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the authors and do not necessarily reflect the views of the Defense
   Advanced Research Projects Agency (DARPA), its contracting agents, the
   National Science Foundation, or any other agency of the U.S. Government.
CR Abdullahi SE, 1998, ACM COMPUT SURV, V30, P330, DOI 10.1145/292469.292471
   AIKEN A, 1995, SIGPLAN NOTICES, V30, P174, DOI 10.1145/223428.207137
   [Anonymous], 2000, CASES 00
   [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Apple, 2012, WEBKIT OP SOURC PROJ
   Barabash K, 2010, ACM SIGPLAN NOTICES, V45, P1
   BARRETT DA, 1993, SIGPLAN NOTICES, V28, P187, DOI 10.1145/173262.155108
   BARRETT DA, 1995, SIGPLAN NOTICES, V30, P301, DOI 10.1145/223428.207164
   Berger ED, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/583854.582421
   Berger ED, 2000, ACM SIGPLAN NOTICES, V35, P117, DOI 10.1145/384264.379232
   Blackburn SM, 2002, ACM SIGPLAN NOTICES, V37, P153, DOI 10.1145/543552.512548
   Blackburn SM, 2001, ACM SIGPLAN NOTICES, V36, P342, DOI 10.1145/504311.504307
   Blelloch GE, 1999, ACM SIGPLAN NOTICES, V34, P104, DOI 10.1145/301631.301648
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   BOEHM HJ, 1995, SOFTWARE PRACT EXPER, V25, P1315, DOI 10.1002/spe.4380251203
   Cheng P, 2001, ACM SIGPLAN NOTICES, V36, P125, DOI 10.1145/381694.378823
   Chilimbi TrishulM., 1998, Proceedings of the 1st international symposium on Memory management, ISMM '98, P37
   Dubroy P, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P673
   Endo T., 1997, Supercomputing, ACM/IEEE 1997 Conference, P48
   Flood C.H., 2001, P 2001 S JAVATM VIRT, P21
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Google, 2012, CHROM V8 EFF GARB CO
   Google, 2009, INTR GOOGL CHROM OS
   GRUNWALD D, 1993, SIGPLAN NOTICES, V28, P177, DOI 10.1145/173262.155107
   Guyer SZ, 2004, ACM SIGPLAN NOTICES, V39, P237, DOI 10.1145/1035292.1028996
   Hackett B, 2012, ACM SIGPLAN NOTICES, V47, P239, DOI 10.1145/2345156.2254094
   HANSON DR, 1977, SOFTWARE PRACT EXPER, V7, P179, DOI 10.1002/spe.4380070206
   HANSON DR, 1990, SOFTWARE PRACT EXPER, V20, P5, DOI 10.1002/spe.4380200104
   HAYES B, 1991, SIGPLAN NOTICES, V26, P33, DOI 10.1145/118014.117957
   Hirzel M., 2002, P INT S MEMORY MANAG, P36
   Holzle Urs, 1991, P EUR C OBJ OR PROGR
   Huang XL, 2004, ACM SIGPLAN NOTICES, V39, P69, DOI 10.1145/1035292.1028983
   HUDSON RL, 1992, LECT NOTES COMPUT SC, V637, P388
   HUGHES RJM, 1982, SOFTWARE PRACT EXPER, V12, P1081, DOI 10.1002/spe.4380121108
   Intel, 1997, US RDTSC INSTR PERF
   Johnstone Mark Stuart, 1997, THESIS U TEXAS AUSTI THESIS U TEXAS AUSTI
   Johnstone MS, 1999, ACM SIGPLAN NOTICES, V34, P26, DOI 10.1145/301589.286864
   Jones R., 2011, GARBAGE COLLECTION H
   JUL E, 1988, ACM T COMPUT SYST, V6, P109, DOI 10.1145/35037.42182
   JUUL NC, 1992, LECT NOTES COMPUT SC, V637, P103
   Knuth D. E., 2011, The art of computer programming (second ed.) vol. 1 fundamental algorithms, V4A
   Kotzmann T, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1369396.1370017
   LANG B, 1987, SIGPLAN NOTICES, V22, P253, DOI 10.1145/960114.29677
   Lindstrom Jens, 2009, CARAKAN REVISITED
   Miadowicz Andrew, 2012, ADV JAVASCRIPT PERFO, P8
   Microsoft, 2008, WHATS NEW INT EXPL 8, P8
   Mozilla, 2011, KRAK JAVASCRIPT BENC
   Mozilla, 2012, EXP FIRF OS YOUR AND
   Oracle, 2010, JAV 2 PLATF SE V 1 4
   Reis C, 2009, EUROSYS'09: PROCEEDINGS OF THE FOURTH EUROSYS CONFERENCE, P219
   Richter Jeffrey., 2000, Garbage Collection: Automatic Memory Management in the Microsoft .NET Framework
   ROSS DT, 1967, COMMUN ACM, V10, P481, DOI 10.1145/363534.363546
   Rudermann J., 2001, SAME ORIGIN POLICY
   SCHORR H, 1967, COMMUN ACM, V10, P501, DOI 10.1145/363534.363554
   Seidl ML, 1998, ACM SIGPLAN NOTICES, V33, P12, DOI 10.1145/291006.291012
   Shuf Y, 2002, ACM SIGPLAN NOTICES, V37, P295, DOI 10.1145/565816.503300
   Siebert F, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P21
   Soman S., 2006, P 5 INT S MEMORY MAN, P64
   Soman S, 2008, LECT NOTES COMPUT SC, V5142, P335, DOI 10.1007/978-3-540-70592-5_15
   Steensgaard B., 2000, P 2 INT S MEMORY MAN, P18
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 1998, P 1 INT S MEMORY MAN, P186
   UNGAR D, 1984, SIGPLAN NOTICES, V19, P157
   Vo KP, 1996, SOFTWARE PRACT EXPER, V26, P357, DOI 10.1002/(SICI)1097-024X(199603)26:3<357::AID-SPE15>3.0.CO;2-#
   Wagner G, 2011, ACM SIGPLAN NOTICES, V46, P119, DOI 10.1145/2076022.1993496
   Wagner Gregor, 2011, THESIS U CALIFORNIA
   WILSON PR, 1991, SIGPLAN NOTICES, V26, P177, DOI 10.1145/113446.113461
   WILSON PR, 1992, P INT WORKSH MEM MAN, P1
   Zorn Benjamin G., 1989, THESIS U CALIFORNIA
NR 70
TC 1
Z9 1
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2016
VL 38
IS 3
AR 9
DI 10.1145/2866576
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DL6BF
UT WOS:000375721600002
DA 2024-07-18
ER

PT J
AU Demetrescu, C
   Finocchi, I
   Ribichini, A
AF Demetrescu, Camil
   Finocchi, Irene
   Ribichini, Andrea
TI Reactive Imperative Programming with Dataflow Constraints
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Design; Experimentation; Languages; Reactive programming;
   dataflow programming; imperative programming; one-way dataflow
   constraints; constraint solving; incremental computation; observer
   design pattern; data structure repair; software visualization
ID LANGUAGE; INCREMENTALIZATION; ALGORITHM
AB Dataflow languages provide natural support for specifying constraints between objects in dynamic applications, where programs need to react efficiently to changes in their environment. In this article, we show that one-way dataflow constraints, largely explored in the context of interactive applications, can be seamlessly integrated in any imperative language and can be used as a general paradigm for writing performance-critical reactive applications that require efficient incremental computations. In our framework, programmers can define ordinary statements of the imperative host language that enforce constraints between objects stored in special memory locations designated as "reactive." Reactive objects can be of any legal type in the host language, including primitive data types, pointers, arrays, and structures. Statements defining constraints are automatically re-executed every time their input memory locations change, letting a program behave like a spreadsheet where the values of some variables depend on the values of other variables. The constraintsolving mechanism is handled transparently by altering the semantics of elementary operations of the host language for reading and modifying objects. We provide a formal semantics and describe a concrete embodiment of our technique into C/C++, showing how to implement it efficiently in conventional platforms using off-the-shelf compilers. We discuss common coding idioms and relevant applications to reactive scenarios, including incremental computation, observer design pattern, data structure repair, and software visualization. The performance of our implementation is compared to problem-specific change propagation algorithms, as well as to language-centric approaches such as self-adjusting computation and subject/observer communication mechanisms, showing that the proposed approach is efficient in practice.
C1 [Demetrescu, Camil; Ribichini, Andrea] Univ Roma La Sapienza, Dept Comp Control & Management Engn Antonio Ruber, I-00185 Rome, Italy.
   [Finocchi, Irene] Univ Roma La Sapienza, Dept Comp Sci, I-00198 Rome, Italy.
C3 Sapienza University Rome; Sapienza University Rome
RP Demetrescu, C (corresponding author), Univ Roma La Sapienza, Dept Comp Control & Management Engn Antonio Ruber, Via Ariosto 25, I-00185 Rome, Italy.
EM demetres@dis.uniroma1.it; finocchi@di.uniroma1.it;
   ribichini@dis.uniroma1.it
RI Demetrescu, Camil/H-9904-2012; Finocchi, Irene/G-7404-2012
OI FINOCCHI, Irene/0000-0002-6394-6798
FU Italian Ministry of Education, University, and Research (MIUR)
   [2012C4E3KT]
FX This work was supported in part by the Italian Ministry of Education,
   University, and Research (MIUR) under PRIN 2012C4E3KT national research
   project "AMANDA - Algorithmics for MAssive and Networked DAta."
CR Abadi M, 2009, ACM SIGPLAN NOTICES, V44, P185, DOI 10.1145/1594835.1504203
   Abraham Robin., 2008, WILEY ENCY COMPUTER
   Acar UA, 2008, ACM SIGPLAN NOTICES, V43, P309, DOI 10.1145/1328897.1328476
   Acar UA, 2006, ACM SIGPLAN NOTICES, V41, P96, DOI 10.1145/1133981.1133993
   Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   Acar UA, 2013, J FUNCT PROGRAM, V23, P249, DOI 10.1017/S0956796813000099
   Acar UA, 2010, ACM SIGPLAN NOTICES, V45, P483, DOI 10.1145/1809028.1806650
   Acar UmutA., 2009, Proceedings of the 2009 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, P1, DOI DOI 10.1145/1480945
   Ahuja R. K., 1993, Network flows: theory, algorithms, and applications
   ALPERN B, 1990, PROCEEDINGS OF THE FIRST ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P32
   [Anonymous], 2006, INTRO DESIGN PATTERN
   [Anonymous], ADV PROGRAMMING LANG
   [Anonymous], 2003, Principles of Constraint Programming
   [Anonymous], 2007, Software Visualization: Visualizing the Structure, Behavior, and Evolution of Software
   [Anonymous], 2005, P 7 INT ACM SIGPLAN, DOI DOI 10.1145/1069774.1069782
   Bellman R., 1958, Q APPL MATH, V16, P87
   Bessiere C, 2006, FOUND ARTIF INTELL, P29
   Blume P.A., 2007, The LabVIEW Style Book
   BORNING A, 1981, ACM T PROGR LANG SYS, V3, P353, DOI 10.1145/357146.357147
   Boussinot F, 1998, SOFTWARE PRACT EXPER, V28, P1531, DOI 10.1002/(SICI)1097-024X(19981210)28:14<1531::AID-SPE218>3.0.CO;2-U
   Caspi P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P178, DOI 10.1145/41625.41641
   Chambers C., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P277, DOI 10.1145/325694.325731
   Chen Y, 2012, ACM SIGPLAN NOTICES, V47, P299, DOI 10.1145/2345156.2254100
   Cooper GH, 2006, LECT NOTES COMPUT SC, V3924, P294
   Courtney A., 2001, Practical Aspects of Declarative Languages. Third International Symposium, PADL 2001. Proceedings (Lecture Notes in Computer Science Vol.1990), P29
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Crescenzi P, 2000, J VISUAL LANG COMPUT, V11, P125, DOI 10.1006/jvlc.1999.0143
   Demers Alan J., 1981, S PRINCIPLES PROGRAM, P105, DOI DOI 10.1145/567532.567544
   Demetrescu C, 2002, LECT NOTES COMPUT SC, V2269, P16
   Demetrescu C, 2001, J VISUAL LANG COMPUT, V12, P253, DOI 10.1006/jvlc.2001.0208
   Demetrescu C., 2009, The Shortest Path Problem: Ninth DIMACS Implementation Challenge
   Demetrescu C., 2006, SoftVis '06: Proceedings of the 2006 ACM Symposium on Software Visualization, P57
   DEMETRESCU C., 2005, HDB DATA STRUCTURES
   Demetrescu C, 2011, ACM SIGPLAN NOTICES, V46, P407, DOI 10.1145/2076021.2048100
   Demsky B, 2003, ACM SIGPLAN NOTICES, V38, P78, DOI 10.1145/949343.949314
   Dennis J. B., 1974, International Symposium on Theoretical Programming, P187
   Dietz P., 1987, P 19 ANN ACM S THEOR, P365, DOI DOI 10.1145/28395.28434
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   FREEMANBENSON BN, 1992, LECT NOTES COMPUT SC, V615, P268, DOI 10.1007/BFb0053042
   Gamma Erich., 1994, DESIGN PATTERNS
   Gorbovitski Michael, 2005, COMP 20 ANN ACM SIGP, P112
   Groetker T., 2002, SYSTEM DESIGN SYSTEM
   Hammer MA, 2011, ACM SIGPLAN NOTICES, V46, P753, DOI 10.1145/2076021.2048124
   Hammer MA, 2009, ACM SIGPLAN NOTICES, V44, P25, DOI 10.1145/1543135.1542480
   HOLZBAUR C, 1992, LECT NOTES COMPUT SC, V631, P260, DOI 10.1007/3-540-55844-6_141
   Holzbaur C, 1999, LECT NOTES COMPUT SC, V1702, P117
   HOOVER R, 1987, THESIS CORNELL U ITH
   Hudak Paul, 1992, ACM SIGPLAN NOTICES, V27, P5
   HUDSON SE, 1991, ACM T PROGR LANG SYS, V13, P315, DOI 10.1145/117009.117012
   Ignatoff D, 2006, LECT NOTES COMPUT SC, V3945, P259
   ISO, 2007, 98991999COR32007E IS
   KARP RM, 1966, SIAM J APPL MATH, V14, P1390, DOI 10.1137/0114108
   KAY A, 1984, SCI AM, V251, P52, DOI 10.1038/scientificamerican0984-52
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   LEGUERNIC P, 1986, IEEE T ACOUST SPEECH, V34, P362, DOI 10.1109/TASSP.1986.1164809
   Ley-Wild R, 2012, LECT NOTES COMPUT SC, V7211, P476, DOI 10.1007/978-3-642-28869-2_24
   Liu YA, 2005, ACM SIGPLAN NOTICES, V40, P473, DOI 10.1145/1103845.1094848
   Liu YHA, 1998, ACM T PROGR LANG SYS, V20, P546, DOI 10.1145/291889.291895
   Malik MZ, 2009, IEEE INT CONF AUTOM, P620, DOI 10.1109/ASE.2009.92
   Marceau G, 2007, AUTOMAT SOFTW ENG, V14, P59, DOI 10.1007/s10515-006-0003-z
   Meyerovich LA, 2009, ACM SIGPLAN NOTICES, V44, P1, DOI 10.1145/1639949.1640091
   Mosconi M, 2000, COMPUT LANG, V26, P67, DOI 10.1016/S0096-0551(01)00009-1
   Myers B.A., 1990, IEEE COMPUTER, V23
   Myers BA, 1997, IEEE T SOFTWARE ENG, V23, P347, DOI 10.1109/32.601073
   Nilsson H, 2002, P 2002 ACM SIGPLAN W, P51, DOI DOI 10.1145/581690.581695
   OLSSON RA, 1991, SOFTWARE PRACT EXPER, V21, P209, DOI 10.1002/spe.4380210207
   Prasad S, 2003, COMPILER DESIGN HANDBOOK, P841
   Price B. A., 1993, Journal of Visual Languages and Computing, V4, P211, DOI 10.1006/jvlc.1993.1015
   PUGH W, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P315, DOI 10.1145/75277.75305
   Ramalingam G, 1996, J ALGORITHM, V21, P267, DOI 10.1006/jagm.1996.0046
   REPS T, 1983, ACM T PROGR LANG SYS, V5, P449, DOI 10.1145/2166.357218
   Reps T.W., 1986, P 13 ACM SIGACT SIGP, P1
   Roman G. C., 1992, Journal of Visual Languages and Computing, V3, P161, DOI 10.1016/1045-926X(92)90014-D
   Shankar A, 2007, ACM SIGPLAN NOTICES, V42, P310, DOI 10.1145/1273442.1250770
   STASKO J, 1997, SOFTWARE VISUALIZATI
   United States Census Bureau, 2002, UA CENS 2000 TIGER L
   Vander Zanden B. T., 2001, ACM Transactions on Computer-Human Interaction, V8, P223, DOI 10.1145/502907.502910
   Vander Zanden BT, 2005, SOFTWARE PRACT EXPER, V35, P1275, DOI 10.1002/spe.671
   Wan ZY, 2000, ACM SIGPLAN NOTICES, V35, P242, DOI 10.1145/358438.349331
   Zanden BTV, 2001, ACM T PROGR LANG SYS, V23, P776, DOI 10.1145/506315.506318
   Zhou NF, 2006, THEOR PRACT LOG PROG, V6, P483, DOI 10.1017/S1471068405002590
   [No title captured]
NR 82
TC 0
Z9 0
U1 0
U2 10
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2015
VL 37
IS 1
AR 3
DI 10.1145/2623200
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5AP
UT WOS:000348919700003
OA Bronze, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Boudol, G
   Luo, ZQ
   Rezk, T
   Serrano, M
AF Boudol, Gerard
   Luo, Zhengqin
   Rezk, Tamara
   Serrano, Manuel
TI Reasoning about Web Applications: An Operational Semantics for HOP
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Web programming; functional languages; Multitier
   languages
AB We propose a small-step operational semantics to support reasoning about Web applications written in the multitier language HOP. The semantics covers both server side and client side computations, as well as their interactions, and includes creation of Web services, distributed client-server communications, concurrent evaluation of service requests at server side, elaboration of HTML documents, DOM operations, evaluation of script nodes in HTML documents and actions from HTML pages at client side. We also model the browser same origin policy (SOP) in the semantics. We propose a safety property by which programs do not get stuck due to a violation of the SOP and a type system to enforce it.
C1 [Boudol, Gerard; Luo, Zhengqin; Rezk, Tamara; Serrano, Manuel] INRIA Sophia Antipolis Mediterranee, Sophia Antipolis, France.
RP Boudol, G (corresponding author), INRIA Sophia Antipolis Mediterranee, Sophia Antipolis, France.
EM zhengqin.luo@inria.fr
FU French ANR agency [ANR-09-EMER-009-01]
FX This work is supported in part by the French ANR agency, grant
   ANR-09-EMER-009-01.
CR BERRY G, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P81, DOI 10.1145/96709.96717
   BOHANNON A., 2010, P USEN C WEB APPL DE
   BOUDOL G., 2010, APLWACA 2010, P3
   CHLIPALA A., 2010, P INT C PROGR LANG I
   Chong S, 2009, COMMUN ACM, V52, P79, DOI 10.1145/1461928.1461949
   COOPER E., 2006, P 5 INT S FORM METH
   Cooper EEK, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P231, DOI 10.1145/1599410.1599439
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   GARDNER P., 2008, P ACM SIGPLAN WORKSH
   Gardner PhilippaA., 2008, Proceedings of the twenty-seventh ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems, PODS '08, P261
   GRAUNKE P., 2003, P EUR S PROGR
   GUHA A., 2010, P 24 EUR C OBJ OR PR
   Hors A.L., 2000, Document object model (dom) level 2 core specification
   Kelsey R, 1998, ACM SIGPLAN NOTICES, V33, P26, DOI 10.1145/290229.290234
   Loitsch F., 2008, TRENDS FUNCTIONAL PR, V8, P141
   MAFFEIS S., 2008, P AS S PROGR LANG SY
   Matthews J., 2004, Automated Software Engineering, V11, P337, DOI 10.1023/B:AUSE.0000038936.09009.69
   Queinnec C, 2000, ACM SIGPLAN NOTICES, V35, P23, DOI 10.1145/357766.351243
   SERRANO M., 2006, P 1 DYN LANG S
   SERRANO M., 2010, HIGHER ORDER SYMBOLI
   Serrano M, 2009, LECT NOTES COMPUT SC, V5521, P1, DOI 10.1007/978-3-642-02053-7_1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 22
TC 9
Z9 9
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2012
VL 34
IS 2
AR 10
DI 10.1145/2220365.2220369
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 968JW
UT WOS:000305977300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Ancona, D
   Anderson, C
   Damiani, F
   Drossopoulou, S
   Giannini, R
   Zlicca, E
AF Ancona, D.
   Anderson, C.
   Damiani, F.
   Drossopoulou, S.
   Giannini, R.
   Zlicca, E.
TI A provenly correct translation of tickle into Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
AB We present a translation from Fickle, a small object-oriented language allowing objects to change their class at runtime, into Java. The translation is provenly correct in the sense that it preserves the static and dynamic semantics. Moreover, it is compatible with separate compilation, since the translation of a Fickle class does not depend on the implementation of used classes. Based on the formal system, we have developed an implementation.
   The translation turned out to be a more subtle problem than we expected. In this article, we discuss four possible approaches we considered for the design of the translation and to justify our choice, we present formally the translation and proof of preservation of the static and dynamic semantics, and discuss the prototype implementation. Moreover, we outline an alternative translation based on generics that avoids most of the casts (but not all) needed in the previous translation.
   The language Fickle has undergone and is still undergoing several phases of development. In this article we are discussing the translation of Fickle(II).
C1 Univ Piemonte Orientale, I-15100 Alessandria, Italy.
   Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2BZ, England.
   Univ Turin, Dipartimento Informat, I-10149 Turin, Italy.
   Univ Genoa, Dipartimento Informat & Sci Informaz, I-16126 Genoa, Italy.
C3 University of Eastern Piedmont Amedeo Avogadro; Imperial College London;
   University of Turin; University of Genoa
RP Giannini, R (corresponding author), Univ Piemonte Orientale, Via Bellini 25G, I-15100 Alessandria, Italy.
EM giannini@di.unito.it
RI Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706; Giannini,
   Paola/0000-0003-2239-9529
CR Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   ANCONA D, 2002, ELECT NOTES THEORETI, V62
   ANCONA D, 2001, LECT NOTES COMPUTER, V2202, P215
   ANDERSON C, 2003, I FICKLE TRANSLATOR
   ANDERSON C, 2001, THESIS IMPERIAL COLL
   [Anonymous], JAVA LANGUAGE SPECIF
   BOYLAND J, 1997, P C OBJ OR PROGR SYS, P66
   BRACHA G, 1998, P ACM S OBJ OR PROGR, P183
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   COSTANZA P, 2001, WCOP 01 ECOOP 01
   DAMIANI F, 2004, OOPS TRACK SAC, V2, P1297
   Drossopoulou S., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P130
   Drossopoulou S, 2002, ACM T PROGR LANG SYS, V24, P153, DOI 10.1145/514952.514955
   Ernst M., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P186, DOI 10.1007/BFb0054092
   Gamma E., 1995, PROFESSIONAL COMPUTI
   HURSCH WL, 1994, LNCS, V821, P12
   Igarashi A, 2002, INFORM COMPUT, V177, P56, DOI 10.1006/inco.2002.3092
   MCDIRMID S, 2001, P ACM SIGPLAN C OBJ
   ODERSKY M, 1997, P ACM S PRINC PROGR
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Serrano M, 1999, LECT NOTES COMPUT SC, V1628, P391
   TAIVALSAARI A, 1993, J OBJECT-ORIENT PROG, V6, P25
   [No title captured]
NR 23
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2007
VL 29
IS 2
AR 13
DI 10.1145/1216374.1216381
PG 67
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 161KL
UT WOS:000246013700007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ben-Amram, AM
   Lee, CS
AF Ben-Amram, Amir M.
   Lee, Chin Soon
TI Program termination analysis in polynomial time
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; performance; abstraction; program analysis;
   size-change graph; size-change termination; termination analysis
ID SIZE-CHANGE TERMINATION
AB A size-change termination algorithm takes as input abstract information about a program in the form of size-change graphs and uses it to determine whether any infinite computation would imply that some data decrease in size infinitely. Since such an infinite descent is presumed impossible, this proves program termination. The property of the graphs that implies program termination is called SCT. There are many examples of practical programs whose termination can be verified by creating size-change graphs and testing them for SCT.
   The size-change graph abstraction is useful because the graphs often carry sufficient information to deduce termination, and at the same time are simple enough to be analyzed automatically. However, there is a tradeoff between the completeness and efficiency of this analysis, and complete algorithms in the literature can easily be pushed to an exponential combinatorial search by certain patterns in the graph structures.
   We therefore propose a novel algorithm to detect common forms of parameter-descent behavior efficiently. Specifically, we target lexicographic descent, multiset descent, and min- and maxdescent. Our algorithm makes it possible to verify practical instances of SCT while guarding against unwarranted combinatorial search. It has worst-case time complexity cubic in the input size, and its effectiveness is demonstrated empirically using a test suite of over 90 programs.
C1 Tel Aviv Jaffo, Acad Coll, IL-61162 Tel Aviv, Israel.
   Max Planck Inst Informat, D-66123 Saarbrucken, Germany.
C3 Max Planck Society
RP Ben-Amram, AM (corresponding author), Tel Aviv Jaffo, Acad Coll, POB 16131, IL-61162 Tel Aviv, Israel.
EM cslee_sg@hotmail.com
CR Anderson H, 2003, LECT NOTES COMPUT SC, V2895, P122
   ANDERSON H, 2005, TRB605 NAT U SING
   [Anonymous], ADV LOGIC PROGRAMMIN
   ARTS T, 2001, THESIS U UTRECHT THE
   AVERY J, 2005, SIZE CHANGE TERMINAT
   Ben-Amram AA, 2002, LECT NOTES COMPUT SC, V2566, P3
   BUENO F, 1994, MIT PS LOG, P320
   Codish M, 2000, J LOGIC PROGRAM, V43, P251, DOI 10.1016/S0743-1066(99)00079-5
   CODISH M, 1997, LNCS, V1298, P31
   CODISH M, 2005, IN PRESS P 21 INT C
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   De Schreye D, 1994, J LOGIC PROGRAM, V20, P199, DOI 10.1016/0743-1066(94)90027-2
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   FREDERIKSEN CC, 2001, D442 DAT I KOB U
   GENAM S, 2002, P INT OWRKSH VER MOD
   GIESL J, 2001, LECT NOTES COMPUTER, V3091, P210
   GLENSTRUP A, 2004, D498 DAT I KOB U
   Jones ND, 2004, LECT NOTES COMPUT SC, V3091, P1
   Lee C. S., 1999, Higher-Order and Symbolic Computation, V12, P203, DOI 10.1023/A:1010004307057
   Lee CS, 2002, LECT NOTES COMPUT SC, V2487, P218
   LEE CS, 2001, P 28 ACM S PRINC PRO
   LEE CS, 2001, THESIS UWA AUSTRALIA
   Lindenstrauss N, 1997, LOGIC PROGRAMM, P63
   LINDENSTRAUSS N, 1997, AUTOMATIC TERMINATIO
   PAIGE R, 1997, P 24 ACM SIGPLAN SIG, P456
   PETER R, 1967, RECURSIVE FUNCTIONS
   PLUMER L, 1990, LECT NOTES ARTIFICIA, V446
   PODELSKI A, 2005, P 32 ACM S PRINC PRO
   SAGIV Y, 1991, P 1991 INT S LOG PRO, P518
   Thiemann R, 2005, APPL ALGEBR ENG COMM, V16, P229, DOI 10.1007/s00200-005-0179-7
   Thiemann R, 2003, LECT NOTES COMPUT SC, V2706, P264
   TURING AM, 1948, C HIGH SPEED AUT CAL, P67
   WAHLSTEDT D, 2000, THESIS GOTEBORGS U S
   XI H, 1999, HIGHER ORDER S COMPU, V15, P91
NR 35
TC 24
Z9 27
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2007
VL 29
IS 1
AR 5
DI 10.1145/1180475.1180480
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FG
UT WOS:000243927300005
OA Bronze
DA 2024-07-18
ER

PT J
AU Lamport, L
   Merz, S
AF Lamport, Leslie
   Merz, Stephan
TI Prophecy Made Simple
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Formal specification; state machine; refinement; auxiliary variable
ID REDUCTION
AB Prophecy variables were introduced in the article "The Existence of Refinement Mappings" by Abadi and Lamport. They were difficult to use in practice. We describe a new kind of prophecy variable that we find much easier to use. We also reformulate ideas from that article in a more mathematical way.
C1 [Lamport, Leslie] Microsoft Res, 14820 NE 36th St, Redmond, WA 98052 USA.
   [Merz, Stephan] Univ Lorraine, LORIA, INRIA, CNRS, Villers Les Nancy, France.
   [Merz, Stephan] Univ Lorraine, Inria Nancy Grand Est, CNRS, 615 Rue Jardin Bot, F-54600 Villers Les Nancy, France.
C3 Microsoft; Universite de Lorraine; Centre National de la Recherche
   Scientifique (CNRS); Inria; Universite de Lorraine; Centre National de
   la Recherche Scientifique (CNRS)
RP Merz, S (corresponding author), Univ Lorraine, LORIA, INRIA, CNRS, Villers Les Nancy, France.; Merz, S (corresponding author), Univ Lorraine, Inria Nancy Grand Est, CNRS, 615 Rue Jardin Bot, F-54600 Villers Les Nancy, France.
EM stephan.merz@inria.fr
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abadi M, 2015, LECT NOTES COMPUT SC, V9033, P347, DOI 10.1007/978-3-662-46675-9_23
   AFEK Y, 1993, J ACM, V40, P873, DOI 10.1145/153724.153741
   ALPERN B, 1985, INFORM PROCESS LETT, V21, P181, DOI 10.1016/0020-0190(85)90056-0
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   APT KR, 1988, DISTRIB COMPUT, V2, P226, DOI 10.1007/BF01872848
   Chakraborty S, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:20)2015
   Cohen E, 1998, LECT NOTES COMPUT SC, V1466, P317, DOI 10.1007/BFb0055631
   Cook B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P399, DOI 10.1145/1926385.1926431
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hesselink W. H., 2005, ACM Transactions on Computational Logic, V6, P175, DOI 10.1145/1042038.1042044
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hoare C. A. R, 2019, COMMUNICATION
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Lamport L, 1997, THEOR COMPUT SCI, V179, P333, DOI 10.1016/S0304-3975(96)00153-3
   Lamport L., 2003, SPECIFYING SYSTEMS
   Lamport Leslie, 2017, ARXIV170305121
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Owicki SS, 1975, Axiomatic proof techniques for parallel programs
   Padon Oded., 2018, 2018 Formal Methods in Computer Aided Design, FMCAD 2018, Austin, TX, USA, October 30 - November 2, 2018, P1
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Qadeer Shaz, 2009, MSRTR2009142
   Zipeng Zhang, 2012, Theory and Applications of Models of Computation. Proceedings 9th Annual Conference, TAMC 2012, P61, DOI 10.1007/978-3-642-29952-0_12
NR 26
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2022
VL 44
IS 2
AR 6
DI 10.1145/3492545
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3B6GO
UT WOS:000828037100001
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Spoto, F
   Burato, E
   Ernst, MD
   Ferrara, P
   Lovato, A
   Macedonio, D
   Spiridon, C
AF Spoto, Fausto
   Burato, Elisa
   Ernst, Michael D.
   Ferrara, Pietro
   Lovato, Alberto
   Macedonio, Damiano
   Spiridon, Ciprian
TI Static Identification of Injection Attacks in Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Static analysis; web application security; SQL injection attack; XSS;
   taint analysis; abstract interpretation
ID INFORMATION-FLOW; PROGRAM ANALYSIS; FRAMEWORK; GRAPH
AB The most dangerous security-related software errors, according to the OWASP Top Ten 2017 list, affect web applications. They are potential injection attacks that exploit user-provided data to execute undesired operations: database access and updates (SQL injection); generation of malicious web pages (cross-site scripting injection); redirection to user-specified web pages (redirect injection); execution of OS commands and arbitrary scripts (command injection); loading of user-specified, possibly heavy or dangerous classes at run time (reflection injection); access to arbitrary files on the file system (path-traversal); and storing user-provided data into heap regions normally assumed to be shielded from the outside world (trust boundary violation). All these attacks exploit the same weakness: unconstrained propagation of data from sources that the user of a web application controls into sinks whose activation might trigger dangerous operations. Although web applications are written in a variety of languages, Java remains a frequent choice, in particular for banking applications, where security has tangible relevance.
   This article defines a unified, sound protection mechanism against such attacks, based on the identification of all possible explicit flows of tainted data in Java code. Such flows can be arbitrarily complex, passing through dynamically allocated data structures in the heap. The analysis is based on abstract interpretation and is interprocedural, flow-sensitive, and context-sensitive. Its notion of taint applies to reference (non-primitive) types dynamically allocated in the heap and is object-sensitive and field-sensitive. The analysis works by translating the program into Boolean formulas that model all possible data flows. Its implementation, within the Julia analyzer for Java and Android, found injection security vulnerabilities in the Internet banking service and in the customer relationship management of large Italian banks, as well as in a set of open-source third-party applications. It found the command injection, which is at the origin of the 2017 Equifax data breach, one of the worst data breaches ever. For objective, repeatable results, this article also evaluates the implementation on two open-source security benchmarks: the Juliet Suite and the OWASP Benchmark for the automatic comparison of static analyzers for cybersecurity. We compared this technique against more than 10 other static analyzers, both free and commercial. The result of these experiments is that ours is the only analysis for injection that is sound (up to well-stated limitations such as multithreading and native code) and works on industrial code, and it is also much more precise than other tools.
C1 [Spoto, Fausto; Lovato, Alberto] Univ Verona, Dipartimento Informat, Str Grazie 15, I-37134 Verona, Italy.
   [Spoto, Fausto; Burato, Elisa; Ferrara, Pietro; Macedonio, Damiano; Spiridon, Ciprian] JuliaSoft Srl, Lungadige Galtarossa 21, I-37133 Verona, Italy.
   [Ernst, Michael D.] Univ Washington, Comp Sci & Engn, 185 E Stevens Way NE, Seattle, WA 98195 USA.
C3 University of Verona; University of Washington; University of Washington
   Seattle
RP Spoto, F (corresponding author), Univ Verona, Dipartimento Informat, Str Grazie 15, I-37134 Verona, Italy.; Spoto, F (corresponding author), JuliaSoft Srl, Lungadige Galtarossa 21, I-37133 Verona, Italy.
EM fausto.spoto@univr.it; elisa.burato@juliasoft.com;
   mernst@cs.washington.edu; pietro.ferrara@juliasoft.com;
   alberto.lovato@univr.it; damiano.macedonio@gmail.com; cipymail@gmail.com
RI FERRARA, Pietro/ABF-9761-2021
OI FERRARA, Pietro/0000-0002-4678-933X; Spoto, Fausto/0000-0003-2973-0384
FU United States Air Force [FA8750-12-C-0174]
FX This work has been partially supported by the United States Air Force
   under Contract No.: FA8750-12-C-0174.
CR Andersen H., 1999, INTRO BINARY DECISIO
   [Anonymous], 2014, P ACM SIGPLAN C PROG
   Appelt Dennis, 2014, P 2014 INT S SOFTWAR, P259
   Avgustinov P., 2016, P 30 EUR C OBJ OR PR, V56
   Barros P, 2015, IEEE INT CONF AUTOM, P669, DOI 10.1109/ASE.2015.69
   Barthe G, 2007, COMPUT LANG SYST STR, V33, P35, DOI 10.1016/j.cl.2005.05.002
   Barthe G, 2013, MATH STRUCT COMP SCI, V23, P1032, DOI 10.1017/S0960129512000850
   Biasini N., 2017, CONTENT TYPE MALICIO
   BRYANT RE, 1992, COMPUT SURV, V24, P293, DOI 10.1145/136035.136043
   Burato E., 2017, P 1 IT C SEC ITASEC
   Clark D, 2002, COMPUT LANG SYST STR, V28, P3, DOI 10.1016/S0096-0551(02)00006-1
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Doshi JC, 2014, COMM COM INF SC, V467, P400
   Ernst D., 2005, OOPSLA, P211, DOI [DOI 10.1145/1103845.1094828, 10.1145/1094811.1094828, DOI 10.1145/1094811.1094828]
   Ernst MD, 2015, LECT NOTES COMPUT SC, V9450, P130, DOI 10.1007/978-3-662-48899-7_10
   Ferrara Pietro, 2018, Privacy Technologies and Policy. 6th Annual Privacy Forum (APF 2018). Revised Selected Papers: Lecture Notes in Computer Science (LNCS 11079), P63, DOI 10.1007/978-3-030-02547-2_4
   Fu X, 2007, P INT COMP SOFTW APP, P87
   Genaim S, 2005, LECT NOTES COMPUT SC, V3385, P346
   Genaim S., 2004, P WORKSH INF TECHN S
   Genaim Samir, 2008, P WORKSH FORM TECHN
   Gotham Digital Science, 2017, AN CVE 2017 5638
   Helie J., 2018, P C MACH LEARN PROGR
   Jang YS, 2014, COMPUT SECUR, V44, P104, DOI 10.1016/j.cose.2014.04.007
   Kar D, 2016, COMPUT SECUR, V60, P206, DOI 10.1016/j.cose.2016.04.005
   Kobayashi N., 2002, P AS S PROGR LANG SY
   Kumar DG, 2015, J COMPUT VIROL HACKI, V11, P1, DOI 10.1007/s11416-014-0219-6
   Landman D, 2017, PROC INT CONF SOFTW, P507, DOI 10.1109/ICSE.2017.53
   Laud P, 2001, LECT NOTES COMPUT SC, V2028, P77
   Lindholm T., 2013, The Java virtual machine specification
   Liu L, 2016, P INT COMP SOFTW APP, P123, DOI 10.1109/COMPSAC.2016.55
   Liu L, 2013, P INT COMP SOFTW APP, P256, DOI 10.1109/COMPSAC.2013.42
   Makiou A, 2014, INT C INFORM ASSUR S, P35, DOI 10.1109/ISIAS.2014.7064617
   MITRE/SANS, 2011, TOP 25 MOST DANG SOF
   Mizuno M., 1989, NCSC, P558
   National Institute of Standards and Technology, 2006, JUL TEST SUIT JAV
   Nikolic D, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2529990
   NIST, 2017, CVE 2017 5638 DET
   O'Brien SaraAshley., 2017, Giant Equifax data breach: 143 million people could be affected
   Oracle Inc, 2019, JAV PLATF
   Oracle Inc, 2019, JAVASERVER PAG TECHN
   OWASP, 2018, BENCHMARK
   PALSBERG J, 1991, SIGPLAN NOTICES, V26, P146
   Panarotto Federica, 2018, Smart Computing and Communication. Third International Conference, SmartCom 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11344), P114, DOI 10.1007/978-3-030-05755-8_12
   Payet E, 2007, LECT NOTES COMPUT SC, V4634, P452
   Payet É, 2012, INFORM SOFTWARE TECH, V54, P1192, DOI 10.1016/j.infsof.2012.05.003
   Rahman TFA, 2017, J COMPUT, V12, P183, DOI 10.17706/jcp.12.2.183-189
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   Secci S, 2005, LECT NOTES COMPUT SC, V3672, P320
   Shahriar H., 2012, 2012 IEEE 14th International Symposium on High-Assurance Systems Engineering (HASE 2012), P40, DOI 10.1109/HASE.2012.31
   Shar LK, 2013, COMPUTER, V46, P69, DOI 10.1109/MC.2012.283
   Sheykhkanloo Naghmeh Moradpoor., 2014, Proceedings of the 7th International Conference on Security of Information and Networks, P318, DOI [10.1145/2659651.2659675, DOI 10.1145/2659651.2659675]
   Simic Bojan, 2013, Engineering Secure Software and Systems. 5th International Symposium, ESSoS 2013. Proceedings, P213, DOI 10.1007/978-3-642-36563-8_15
   SKALKA C, 2000, ICFP 00, P254
   Spoto F, 2016, LECT NOTES COMPUT SC, V9837, P39, DOI 10.1007/978-3-662-53413-7_3
   Spoto F, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P21, DOI 10.1109/SEFM.2008.8
   Stampar Miroslav, 2016, International Journal of Network Security, V18, P316
   Tip F, 2000, ACM SIGPLAN NOTICES, V35, P281, DOI 10.1145/354222.353190
   Tripp O, 2013, LECT NOTES COMPUT SC, V7793, P210, DOI 10.1007/978-3-642-37057-1_15
   Tripp O, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P87, DOI 10.1145/1542476.1542486
   Urban C., 2011, J COMPUTER SECURITY, V12, P2, DOI DOI 10.3233/JCS-1996-42-304
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   Wassermann G, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P32, DOI 10.1145/1250734.1250739
   Whaley J., 2008, JAVA BINARY DECISION
   Wu T.-Y., 2014, P INT C GEN EV COMP, P371
   Xiao LH, 2016, INT SYMPOS COMPUT NE, P649, DOI [10.1109/CANDAR.2016.0116, 10.1109/CANDAR.2016.74]
NR 68
TC 16
Z9 17
U1 1
U2 14
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2019
VL 41
IS 3
AR 18
DI 10.1145/3332371
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JU2BC
UT WOS:000501479500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Lepigre, R
   Raffalli, C
AF Lepigre, Rodolphe
   Raffalli, Christophe
TI Practical Subtyping for Curry-Style Languages
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Syntax-directed type system; Curry-style quantifiers; subtyping;
   polymorphism; existential types; inductive and coinductive sized types;
   choice operators; realizability semantics; reducibility candidates;
   circular proofs; size change principle; dot notation for abstract types
ID SYSTEM-F; CALCULUS; INFERENCE; EQUIVALENT; TYPABILITY; CHECKING; PROOFS
AB We present a new, syntax-directed framework for Curry-style type systems with subtyping. It supports a rich set of features, and allows for a reasonably simple theory and implementation. The system we consider has sum and product types, universal and existential quantifiers, and inductive and coinductive types. The latter two may carry size invariants that can be used to establish the termination of recursive programs. For example, the termination of quiksort can be derived by showing that partitioning a list does not increase its size. The system deals with complex programs involving mixed induction and coinduction, or even mixed polymorphism and (co-)induction. One of the key ideas is to separate the notion of size from recursion. We do not check the termination of programs directly, but rather show that their (circular) typing proofs are wellfounded. Termination is then obtained using a standard (semantic) normalisation proof. To demonstrate the practicality of the system, we provide an implementation accepting all the examples discussed in the article.
C1 [Lepigre, Rodolphe; Raffalli, Christophe] Univ Savoie Mt Blanc, LAMA, CNRS, Chambery, France.
   [Lepigre, Rodolphe] Univ Paris Saclay, LSV, INRIA, CNRS, St Aubin, France.
   [Raffalli, Christophe] UdelaR, IMERL, FING, Montevideo, Uruguay.
   [Raffalli, Christophe] LAMA, Batiment Chablais,Campus Sci, F-73376 Le Bourget Du Lac, France.
   [Lepigre, Rodolphe] MPI SWS, Campus E1 4, D-66123 Saarbrucken, Germany.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Savoie
   Mont Blanc; Centre National de la Recherche Scientifique (CNRS);
   Universite Paris Saclay; Inria; Universite Paris Cite; Universidad de la
   Republica, Uruguay; Centre National de la Recherche Scientifique (CNRS);
   Universite Savoie Mont Blanc
RP Lepigre, R (corresponding author), Univ Savoie Mt Blanc, LAMA, CNRS, Chambery, France.; Lepigre, R (corresponding author), Univ Paris Saclay, LSV, INRIA, CNRS, St Aubin, France.; Lepigre, R (corresponding author), MPI SWS, Campus E1 4, D-66123 Saarbrucken, Germany.
EM lepigre@mpi-sws.org; christophe@raffalli.eu
CR Abadi M, 2004, LECT NOTES COMPUT SC, V2987, P12
   Abadi M., 1993, Types for the Scott numerals
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P185, DOI [10.1145/2500365.2500591, 10.1145/2544174.2500591]
   Abel Andreas, 2006, SEMICONTINUOUS SIZED, P72
   Abel Andreas., 1998, foetus - termination checker for simple functional programs
   Amadio Roberto M., 1993, ACM T PROGRAMMING LA, V15
   [Anonymous], 1999, The Coq Proof Assistant
   Baelde David, 2016, CSL LIPICS, V62
   Baelde David, 2015, CSL LIPICS, V41, P549
   BELL JL, 1993, MATH LOGIC QUART, V39, P323, DOI 10.1002/malq.19930390137
   Blanqui F, 2009, LECT NOTES COMPUT SC, V5771, P147, DOI 10.1007/978-3-642-04027-6_13
   Blanqui Frederic, 2017, SIZE BASES TERMINATI
   Blanqui Frederic, 2006, CORR
   Brotherston J, 2005, LECT NOTES ARTIF INT, V3702, P78
   CARDELLI L, 1991, LECT NOTES COMPUT SC, V526, P750
   CARDELLI L, 1990, PROGRAMMING CONCEPTS AND METHODS, P479
   Courant J, 2007, J FUNCT PROGRAM, V17, P287, DOI 10.1017/S0956796806005867
   Cretin Julien, 2014, CSL LICS P
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Davis M., 1991, Journal of Logic and Computation, V1, P431, DOI 10.1093/logcom/1.4.431
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Doumane Amina, 2017, THESIS
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Fortier J., 2013, LEIBNIZ INT P INFORM, V23, P248
   Fortier Jerome, 2013, TACL EPIC SERIES COM, V25, P72
   Garrigue J, 1998, ML WORKSH, P1
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Girard Jean-Yves, 1972, These d'etat, P7
   Grégoire B, 2010, LECT NOTES COMPUT SC, V6397, P333, DOI 10.1007/978-3-642-16242-8_24
   Hilbert D., 1968, GRUNDLEHREN MATH WIS, V1
   Hughes John, 1996, POPL P
   Hyvernat P., 2014, LOG METHODS COMPUT S, V10, P1
   Blanqui Frederic, 2006, COMBINING TYPING SIZ, P105
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   KOZEN D, 1984, LECT NOTES COMPUT SC, V164, P313
   Krivine Jean-Louis, 1987, CRAS, V304
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Lepigre R., 2015, SUBML IMPLEMENTATION
   Lepigre R, 2016, LECT NOTES COMPUT SC, V9632, P476, DOI 10.1007/978-3-662-49498-1_19
   Lepigre  Rodolphe, 2017, THESIS
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   Mitchell John C., 1991, P ACM S PRINC PROGR, P270
   Norell U., 2009, P 4 INT WORKSH TYP L, P1
   Parigot Miche, 1992, COMMUNICATION
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier Francois, 1998, THESIS, P7
   Raffalli C., 1998, PREPUBLICATION 98 05
   Raffalli C., 2008, PHOX PROOF ASSISTANT
   Raffalli C., 2012, PML PROGRAMMING LANG
   Rémy D, 2005, ACM SIGPLAN NOTICES, V40, P130, DOI 10.1145/1090189.1086383
   Retoré C, 2014, LECT NOTES COMPUT SC, V8612, P15, DOI 10.1007/978-3-662-44121-3_2
   Reynolds J. C., 1974, Programming Symposium, P408
   Sacchini JL, 2013, IEEE S LOG, P233, DOI 10.1109/LICS.2013.29
   Sacchini Jorge Luis, 2015, WELL FOUNDED SIZED T
   Santocanale L, 2002, LECT NOTES COMPUT SC, V2303, P357
   Santocanale Luigi, 2002, ELECTRON NOTES THEOR, V65, P305, DOI [10.1016/S1571-0661(04)80370-0, DOI 10.1016/S1571-0661(04)80370-0]
   Schöpp U, 2002, LECT NOTES COMPUT SC, V2303, P372
   Sprenger C, 2003, RAIRO-THEOR INF APPL, V37, P365, DOI 10.1051/ita:2003024
   Sprenger Christoph, 2003, FOSSACS 03, P425, DOI [10.1007/3-540- 36576- 1_27, DOI 10.1007/3-540-36576-1_27]
   Tiuryn J, 2002, INFORM COMPUT, V179, P1, DOI 10.1006/inco.2001.2950
   Von Heusinger Klaus, 1997, DEFINITE DESCRIPTION, P61, DOI [10.1007/978-94-011-5638-7_4, DOI 10.1007/978-94-011-5638-7_4]
   Wells J. B., 1996, TECHNICAL REPORT
   Wells JB, 1999, ANN PURE APPL LOGIC, V98, P111, DOI 10.1016/S0168-0072(98)00047-5
   WELLS JB, 1994, IEEE S LOG, P176
NR 65
TC 4
Z9 4
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2019
VL 41
IS 1
AR 5
DI 10.1145/3285955
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HN7NB
UT WOS:000460376400005
DA 2024-07-18
ER

PT J
AU Liu, YHA
   Stoller, SD
   Lin, B
AF Liu, Yanhong A.
   Stoller, Scott D.
   Lin, Bo
TI From Clarity to Efficiency for Distributed Algorithms
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Distributed algorithms; high-level queries and updates;
   incrementalization; logic quantifications; message histories;
   synchronization conditions; yield points
ID PROGRAMMING LANGUAGE
AB This article describes a very high-level language for clear description of distributed algorithms and optimizations necessary for generating efficient implementations. The language supports high-level control flows in which complex synchronization conditions can be expressed using high-level queries, especially logic quantifications, over message history sequences. Unfortunately, the programs would be extremely inefficient, including consuming unbounded memory, if executed straightforwardly.
   We present new optimizations that automatically transform complex synchronization conditions into incremental updates of necessary auxiliary values as messages are sent and received. The core of the optimizations is the first general method for efficient implementation of logic quantifications. We have developed an operational semantics of the language, implemented a prototype of the compiler and the optimizations:, and successfully used the language and implementation on a variety of important distributed algorithms.
C1 [Liu, Yanhong A.; Stoller, Scott D.; Lin, Bo] SUNY Stony Brook, Comp Sci Dept, Stony Brook, NY 11794 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Stony Brook
RP Liu, YHA (corresponding author), SUNY Stony Brook, Comp Sci Dept, Stony Brook, NY 11794 USA.
EM liu@cs.stonybrook.edu; stoller@cs.stonybrook.edu;
   bolink@cs.stonybrook.edu
RI Liu, Annie/KVB-5867-2024
FU NSF [CCF-1414078, CCF-1248184, CCF-0964196, CNS-0831298, CCF-0613913];
   ONR [N000141512208, N000140910651, N000140710928]; U.S. Department of
   Defense (DOD) [N000141512208] Funding Source: U.S. Department of Defense
   (DOD); Direct For Computer & Info Scie & Enginr; Division of Computing
   and Communication Foundations [0964196] Funding Source: National Science
   Foundation
FX This work was supported in part by NSF under grants CCF-1414078,
   CCF-1248184, CCF-0964196, CNS-0831298, and CCF-0613913; and ONR under
   grants N000141512208, N000140910651 and N000140710928.
CR Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Allen F. E., 1981, Program flow analysis. Theory and applications, P79
   Alvaro P., 2010, SIGOPS OPER SYST REV, V43, P25
   Andrews Gregory R., 1993, SR PROGRAMMING LANGU
   [Anonymous], 2009, Proceedings of the 8th International Conference on Generative Programming and Component Engineering
   [Anonymous], THEORY TIMED I O AUT
   Antony I., 2001, LECT NOTES COMPUTER, P329, DOI DOI 10.1007/3-540-45518-3_18
   Ashley-Rollman MP, 2009, LECT NOTES COMPUT SC, V5649, P265, DOI 10.1007/978-3-642-02846-5_24
   Attiya H., 2004, Distributed computing: fundamentals, simulations, and advanced topics, V19
   Auerbach Joshua S., 1994, P USENIX WINT 1994 T
   Badia A., 2007, J APPL LOGIC, V5, P3, DOI DOI 10.1016/J.JAL.2005.12.007
   Badia A, 2008, LECT NOTES COMPUT SC, V5231, P547, DOI 10.1007/978-3-540-87877-3_54
   Badia Antonio, 1995, APPL LOGIC DATABASES
   Baker J, 2011, P C INN DAT SYST RES, P223
   Berkeley Orders of Magnitude, 2013, BERK ORD MAGN
   Bickford M, 2009, LECT NOTES COMPUT SC, V5582, P140, DOI 10.1007/978-3-642-02414-6_9
   Black A.P., 2007, P 3 ACM SIGPLAN C HI, DOI [10.1145/1238844.1238855, DOI 10.1145/1238844.1238855]
   Burrows M, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P335
   Cai Jiazhen, 1991, CONSTRUCTING PROGRAM, P126
   Chand S, 2016, LECT NOTES COMPUT SC, V9995, P119, DOI 10.1007/978-3-319-48989-6_8
   Chang F, 2008, ACM T COMPUT SYST, V26, DOI 10.1145/1365815.1365816
   Claussen J, 1997, PROCEEDINGS OF THE TWENTY-THIRD INTERNATIONAL CONFERENCE ON VERY LARGE DATABASES, P286
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   Cruz F, 2014, THEOR PRACT LOG PROG, V14, P493, DOI 10.1017/S1471068414000167
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   DeCandia Giuseppe, 2007, Operating Systems Review, V41, P205, DOI 10.1145/1323293.1294281
   DistAlgo, 2016, DISTALGO LANG DISTR
   Fidge CJ, 1988, P AUSTR COMP SCI C, V10, P56
   Fioravanti F, 2011, INTELL ARTIF, V5, P119, DOI 10.3233/IA-2011-0014
   Garg VK., 2002, Elements of distributed computing
   Gautam, 2006, ACM SIGPLAN NOTICES, V41, P30, DOI 10.1145/1111320.1111041
   Georgiou Chryssis, 2009, International Journal on Software Tools for Technology Transfer, V11, P153, DOI 10.1007/s10009-008-0097-7
   Ghemawat S., 2003, Operating Systems Review, V37, P29, DOI 10.1145/1165389.945450
   Gorbovitski M, 2010, ACM SIGPLAN NOTICES, V45, P27, DOI 10.1145/1899661.1869635
   Goyal Deepak, 2000, THESIS
   Granicz A, 2003, LECT NOTES COMPUT SC, V2706, P138
   Gupta A., 1993, SIGMOD Record, V22, P157, DOI 10.1145/170036.170066
   Hansel D, 2004, J SYST SOFTWARE, V70, P275, DOI 10.1016/S0164-1212(03)00074-8
   Hunt Patrick, 2010, P 2010 USENIX ANN TE, P11, DOI DOI 10.5555/1855840.1855851
   Kruger Ingolf Heiko, 1996, THESIS
   Kshemkalyani Ajay D., 2011, Distributed computing: principles, algorithms, and systems
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lamport L, 2009, LECT NOTES COMPUT SC, V5684, P36, DOI 10.1007/978-3-642-03466-4_2
   Larson J, 2009, COMMUN ACM, V52, P48, DOI 10.1145/1467247.1467263
   LISKOV B, 1988, COMMUN ACM, V31, P300, DOI 10.1145/42392.42399
   Liu YA, 2013, SYSTEMATIC PROGRAM DESIGN : FROM CLARITY TO EFFICIENCY, P1, DOI 10.1017/CBO9781139567879
   Liu Y. A., 2003, Higher-Order and Symbolic Computation, V16, P37, DOI 10.1023/A:1023068020483
   Liu Yanhong A., 2012, Stabilization, Safety, and Security of Distributed Systems. Proceedings of the 14th International Symposium, SSS 2012, P95, DOI 10.1007/978-3-642-33536-5_11
   Liu YA, 2005, ACM SIGPLAN NOTICES, V40, P473, DOI 10.1145/1103845.1094848
   Liu YA, 2005, ACM T PROGR LANG SYS, V27, P91, DOI 10.1145/1053468.1053471
   Liu YHA, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P228, DOI 10.1145/2967973.2968610
   Liu YHA, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2398857.2384645
   Liu YA, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1552309.1552311
   Liu Yanhong A., 2006, P ACM SIGPLAN 2006 W, P112
   Lopes NP, 2010, THEOR PRACT LOG PROG, V10, P691, DOI 10.1017/S1471068410000360
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Mattern Friedemann, 1989, P INT WORKSH PAR DIS, P120
   Maymounkov P, 2002, LECT NOTES COMPUT SC, V2429, P53
   MPI, 2015, MESS PASS INT FOR
   Nakamura H, 2001, ACM SIGPLAN NOTICES, V36, P156, DOI 10.1145/504311.504294
   PAIGE R, 1982, ACM T PROGR LANG SYS, V4, P402, DOI 10.1145/357172.357177
   Paige Robert, 1989, P INT C COMP INF, P69
   Petukhin Vyacheslav, 1997, P 4 INT C LOG PROGR, P310
   PRL Project, 2013, EVENTML
   PUGH W, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P315, DOI 10.1145/75277.75305
   Ramalingam G., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P502, DOI 10.1145/158511.158710
   Raynal M., 1988, Distributed Algorithms and Protocols
   Raynal M., 2013, Distributed algorithms for message-passing systems, DOI [10.1007/978-3-642-38123-2, DOI 10.1007/978-3-642-38123-2]
   Raynal M., 2010, COMMUNICATION AGREEM, DOI DOI 10.2200/S00236ED1V01Y201004DCT002
   Rothamel T, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P55
   Saha D, 2003, LECT NOTES COMPUT SC, V2916, P392, DOI 10.1007/978-3-540-24599-5_27
   SCOTT ML, 1991, COMPUT LANG, V16, P209, DOI 10.1016/0096-0551(91)90008-W
   Serbanuta TF, 2009, INFORM COMPUT, V207, P305, DOI 10.1016/j.ic.2008.03.026
   Shvachko K., 2010, SYMPOSIUM, P1, DOI DOI 10.1109/MSST.2010.5496972
   Stoica I, 2003, IEEE ACM T NETWORK, V11, P17, DOI 10.1109/TNET.2002.808407
   Swift Theresa, 2016, XSB SYSTEM VERSION 3
   Tel G., 2000, Introduction to Distributed Algorithms, V2nd
   van Renesse R, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P91
   van Renesse R, 2015, ACM COMPUT SURV, V47, DOI 10.1145/2673577
   Willard D. E., 1984, SIGMOD Record, V14, P164, DOI 10.1145/971697.602281
   Willard DE, 2002, J COMPUT SYST SCI, V65, P295, DOI 10.1006/jcss.2002.1848
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zhao BY, 2004, IEEE J SEL AREA COMM, V22, P41, DOI 10.1109/JSAC.2003.818784
NR 86
TC 13
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2017
VL 39
IS 3
AR 12
DI 10.1145/2994595
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AP
UT WOS:000414327900003
OA Bronze, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Ryu, S
AF Ryu, Sukyoung
TI ThisType for Object-Oriented Languages: From Theory to Practice
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Design; Theory; Object-oriented languages; binary methods;
   generic factory methods; ThisType; exact types; virtual constructors
AB In object-oriented programs, objects often provide methods whose parameter types or return types are the object types themselves. For example, the parameter types of binary methods are the types of their receiver objects, and the return types of some factory methods are the types of their enclosing objects. However, most object-oriented languages do not support such methods precisely because their type systems do not support explicit recursive types, which lead to a mismatch between subclassing and subtyping. This mismatch means that an expression of a subclass may not always be usable in a context where an expression of a superclass is expected, which is not intuitive in an object-oriented setting. Researchers have proposed various type-sound approaches to support methods with types of their enclosing object types denoted by some variants of ThisType, but they reject reasonable and useful methods due to unpermissive type systems or they use less precise declared inexact types rather than runtime exact types.
   In this article, we present a thorough approach to support methods with ThisTypes: from a new encoding of objects in a typed lambda calculus that allows subtyping by subclassing to an open-source implementation as an extension of the Java programming language. We first provide real-world examples that motivate the need for ThisTyped methods to precisely describe desired properties of programs. We define a new object encoding that enables subtyping by subclassing even in the presence of negative occurrences of type recursion variables by distinguishing object types from existential object types. Based on this object encoding, we formalize language features to support ThisTyped methods with a core calculus CoreThisJava, and prove its type soundness. Finally, we provide ThisJava, a prototype implementation of the calculus, to show its backward compatibility, and we make it publicly available. We believe that our approach theoretically expands the long pursuit of an object-oriented language with ThisTypes to support more useful methods with more precise types.
C1 [Ryu, Sukyoung] Korea Adv Inst Sci & Technol, Sch Comp, 291 Daehak Ro, Daejeon 34141, South Korea.
C3 Korea Advanced Institute of Science & Technology (KAIST)
RP Ryu, S (corresponding author), Korea Adv Inst Sci & Technol, Sch Comp, 291 Daehak Ro, Daejeon 34141, South Korea.
EM sryu.cs@kaist.ac.kr
RI Ryu, Sukyoung/C-2080-2011; Ryu, Sukyoung/A-8543-2015
OI Ryu, Sukyoung/0000-0002-0019-9772
FU Korea Ministry of Education, Science and Technology (MEST)/National
   Research Foundation of Korea (NRF) [NRF-2014R1A2A2A01003235,
   NRF-2008-0062609]; Microsoft Research Asia; Samsung Electronics; Google
FX This work is supported in part by Korea Ministry of Education, Science
   and Technology (MEST)/National Research Foundation of Korea (NRF)
   (Grants NRF-2014R1A2A2A01003235 and NRF-2008-0062609), Microsoft
   Research Asia, Samsung Electronics, and Google. The results in this
   article are based in part on findings presented in the proceedings of
   APLAS '13 and FLOPS '14. An extended abstract of this article appeared
   in the proceeding of TLDI'12.
CR Abadi M, 1996, ACM T PROGR LANG SYS, V18, P401, DOI 10.1145/233561.233563
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   Altherr Philippe, 2007, P 9 WORKSH FORM TECH
   [Anonymous], 2011, ECMAScript Language Specification, V5.1
   [Anonymous], 2008, Programming in Scala
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1989, P 4 INT C FUNCT PROG, DOI DOI 10.1145/99370.99392
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Arnold K., 2005, The Java programming language
   Bae SungGyeong, 2014, P 2014 10 JOINT M FD
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   Bruce K. B., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P523, DOI 10.1007/BFb0054106
   Bruce K. B., 1997, Theoretical Aspects of Computer Software. Third International Symposium, TACS '97. Proceedings, P415, DOI 10.1007/BFb0014561
   Bruce KB, 2004, LECT NOTES COMPUT SC, V3086, P389
   Bruce KB, 2003, ACM T PROGR LANG SYS, V25, P225, DOI 10.1145/641888.641891
   Bruce KB, 1997, LECT NOTES COMPUT SC, V1241, P104, DOI 10.1007/BFb0053376
   Bruce Kim, 1994, J FUNCTIONAL PROGRAM, V4, P127
   Bruce Kim B., 1997, TECHNICAL REPORT
   Cameron Nicholas, 2008, P 18 EUR C OBJ OR PR
   Cameron Nicholas, 2007, P 9 WORKSH FORM TECH
   CARDELLI L, 1984, LECT NOTES COMPUT SC, V173, P51
   CARDELLI L, 1986, LECT NOTES COMPUT SC, V242, P21
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   COOK WR, 1989, COMPUT J, V32, P305, DOI 10.1093/comjnl/32.4.305
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Eifrig J., 1995, LISP and Symbolic Computation, V8, P357, DOI 10.1007/BF01018829
   Ekman T., 2007, Proceedings of the 22nd annual ACM SIGPLAN conference on Object-oriented programming systems and applications, P1, DOI [10.1145/1297027.1297029, DOI 10.1145/1297027.1297029]
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Fisher K., 1995, Theory and Practice of Object Systems, V1, P189
   Foster John, 2001, THESIS WILLIAMS COLL
   Gosling J., 2005, Java Language Specification, Vthird
   Hedin G., 2000, Informatica, V24, P301
   Hedin Gorel, 2011, JASTADD
   Hofmann M., 1995, J FUNCTIONAL PROGRAM, V5, P593
   Hyunik Na, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P233, DOI 10.1007/978-3-319-03542-0_17
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Igarashi A, 2006, ACM T PROGR LANG SYS, V28, P795, DOI 10.1145/1152649.1152650
   Kamin S., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P80, DOI 10.1145/73560.73567
   LALONDE W, 1991, J OBJECT-ORIENT PROG, V3, P57
   Lee H., 2012, FOOL
   Lindholm Tim, 2012, JAVA VIRTUAL MACH SP
   Liskov Barbara, 1987, C OBJ OR PROGR SYST
   Mackay Julian, 2012, P 14 WORKSH FORM TEC, P11, DOI [10.1145/2318202.2318206, DOI 10.1145/2318202.2318206]
   Mazurak Karl, 2006, P 8 WORKSH FORM TECH
   Meyer B., 1988, Object-Oriented Software Construction
   Microsoft, 2010, C LANG SPEC VERS 4 0
   MITCHELL JC, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P109, DOI 10.1145/96709.96719
   Muchnick S., 1997, ADV COMPILER DESIGN
   Na H, 2014, LECT NOTES COMPUT SC, V8475, P238, DOI 10.1007/978-3-319-07151-0_15
   Na Hyunik, 2013, LANGUAGES THISTYPE
   Na Hyunik, 2012, IMPLEMENTATION, P13
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   Odersky Martin, 2013, SCALA REFLECTION LIB
   Oracle, 2012, OPENJDK 6 SOURC
   Pierce B.C., 1994, J FUNCTIONAL PROGRAM, V4, P207
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PLRG@ KAIST, 2012, SAFE SCAL AN FRAM EC
   Reddy U. S., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P289, DOI 10.1145/62678.62721
   Saito C., 2009, P 24 ANN ACM S APPL, P1851
   Saito C, 2008, J FUNCT PROGRAM, V18, P285, DOI 10.1017/S0956796807006405
   Thorup KK, 1999, LECT NOTES COMPUT SC, V1628, P186
   Torgersen M., 2004, SAC 2004, P1289, DOI DOI 10.5381/JOT.2004.3.11.A5
   Torgersen Mads, 2005, P 12 INT WORKSH FDN
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zibin Y, 2010, ACM SIGPLAN NOTICES, V45, P598, DOI 10.1145/1932682.1869509
   [No title captured]
NR 66
TC 1
Z9 1
U1 0
U2 10
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2016
VL 38
IS 3
AR 8
DI 10.1145/2888392
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DL6BF
UT WOS:000375721600001
DA 2024-07-18
ER

PT J
AU Kaiser, A
   Kroening, D
   Wahl, T
AF Kaiser, Alexander
   Kroening, Daniel
   Wahl, Thomas
TI A Widening Approach to Multithreaded Program Verification
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Verification; Algorithms; Multithreaded program verification;
   well-structured transition systems; coverability
ID STRUCTURED TRANSITION-SYSTEMS; MINIMAL COVERABILITY SET; PETRI NETS;
   ABSTRACTION; WELL; REFINEMENT
AB Pthread-style multithreaded programs feature rich thread communication mechanisms, such as shared variables, signals, and broadcasts. In this article, we consider the automated verification of such programs where an unknown number of threads execute a given finite-data procedure in parallel. Such procedures are typically obtained as predicate abstractions of recursion-free source code written in C or Java. Many safety problems over finite-data replicated multithreaded programs are decidable via a reduction to the coverability problem in certain types of well-ordered infinite-state transition systems. On the other hand, in full generality, this problem is Ackermann-hard, which seems to rule out efficient algorithmic treatment.
   We present a novel, sound, and complete yet empirically efficient solution. Our approach is to judiciously widen the original set of coverability targets by configurations that involve fewer threads and are thus easier to decide, and whose exploration may well be sufficient: if they turn out uncoverable, so are the original targets. To soften the impact of "bad guesses"-configurations that turn out coverable-the exploration is accompanied by a parallel engine that generates coverable configurations; none of these is ever selected for widening. Its job being merely to prevent bad widening choices, such an engine need not be complete for coverability analysis, which enables a range of existing partial (e. g., nonterminating) techniques. We present extensive experiments on multithreaded C programs, including device driver code from FreeBSD, Solaris, and Linux distributions. Our approach outperforms existing coverability methods by orders of magnitude.
   Categories and Subject Descriptors: D.2.4 [Software/Program Verification]: Formal Methods; F.3.1 [Specifying and Verifying and Reasoning about Programs]: Mechanical Verification; D.3.2 [Language Classifications]: Concurrent, Distributed, and Parallel Languages; F.1.2 [Models of Computation]: Parallelism and Concurrency
C1 [Kaiser, Alexander; Kroening, Daniel] Univ Oxford, Oxford OX1 2JD, England.
   [Wahl, Thomas] Northeastern Univ, Boston, MA 02115 USA.
C3 University of Oxford; Northeastern University
RP Kaiser, A (corresponding author), Wolfson Bldg,Parks Rd, Oxford OX1 8QD, England.
EM alexander.kaiser@cs.ox.ac.uk; kroening@cs.ox.ac.uk; wahl@ccs.neu.edu
OI Kroening, Daniel/0000-0002-6681-5283
FU EPSRC [EP/G026254/1]; ERC [280053]; U.S. National Science Foundation
   [1253331]; EPSRC [EP/G026254/1] Funding Source: UKRI; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1253331] Funding Source: National Science Foundation; European
   Research Council (ERC) [280053] Funding Source: European Research
   Council (ERC)
FX This research is supported by EPSRC project EP/G026254/1, ERC project
   280053, and U.S. National Science Foundation grant no. 1253331.
CR Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   Abdulla PA, 2004, FORM METHOD SYST DES, V24, P25, DOI 10.1023/B:FORM.0000004786.30007.f8
   Abdulla PA, 2013, LECT NOTES COMPUT SC, V7737, P476
   Abdulla PA, 2010, B SYMB LOG, V16, P457, DOI 10.2178/bsl/1294171129
   Basler G, 2009, LECT NOTES COMPUT SC, V5643, P64, DOI 10.1007/978-3-642-02658-4_9
   Berthomieu B., 2009, TINA TOOL
   Cardoza E., 1976, STOC 1976: Proceedings of the 8th annual ACM Symposium on Theory of Computing, P50, DOI DOI 10.1145/800113.803630
   Ciardo G., 1994, Application and Theory of Petri Nets 1994. 15th International Conference. Proceedings, P179
   Delzanno G, 2002, LECT NOTES COMPUT SC, V2280, P173
   Donaldson Alastair, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P356, DOI 10.1007/978-3-642-22110-1_28
   Donaldson AF, 2012, FORM METHOD SYST DES, V41, P25, DOI 10.1007/s10703-012-0155-3
   Dufourd C, 1998, LECT NOTES COMPUT SC, V1443, P103, DOI 10.1007/BFb0055044
   Eliens A., 1992, P REX WORKSH SEM FDN, P174
   Emerson EA, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P70, DOI 10.1109/LICS.1998.705644
   Esparza J., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P352, DOI 10.1109/LICS.1999.782630
   Farzan A, 2013, ACM SIGPLAN NOTICES, V48, P129, DOI 10.1145/2480359.2429086
   Farzan A, 2012, ACM SIGPLAN NOTICES, V47, P297, DOI 10.1145/2103621.2103693
   Figueira D, 2011, IEEE S LOG, P269, DOI 10.1109/LICS.2011.39
   Finkel A, 2006, THEOR COMPUT SCI, V356, P374, DOI 10.1016/j.tcs.2006.02.008
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Finkel A., 2002, ELECT NOTES THEORETI, V68, P85
   Finkel A, 2009, LECT NOTES COMPUT SC, V5556, P188, DOI 10.1007/978-3-642-02930-1_16
   Flanagan C, 2003, LECT NOTES COMPUT SC, V2648, P213
   Ganty P, 2006, LECT NOTES COMPUT SC, V3855, P49
   Ganty Pierre, 2009, Technique et Science Informatiques, V28, P1107, DOI 10.3166/tsi.28.1107-1142
   Ganty P., 2014, MIST2 TOOL VERSION 0
   Ganty P., 2007, TECHNICAL REPORT
   Geeraerts G, 2006, J COMPUT SYST SCI, V72, P180, DOI 10.1016/j.jcss.2005.09.001
   Geeraerts G, 2007, LECT NOTES COMPUT SC, V4762, P98
   GERMAN SM, 1992, J ACM, V39, P675, DOI 10.1145/146637.146681
   Goetz B, 2006, JAVA CONCURRENCY PRA
   Gupta A., 2011, Computer Aided Verification, P412, DOI [10.1007/978-3-642-22110-1_32, DOI 10.1007/978-3-642-22110-1_32]
   Gupta A, 2011, ACM SIGPLAN NOTICES, V46, P331, DOI 10.1145/1925844.1926424
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Kaiser A, 2010, LECT NOTES COMPUT SC, V6174, P645
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Kloos Johannes, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P158, DOI 10.1007/978-3-642-39799-8_10
   Leuschel M, 2000, LECT NOTES ARTIF INT, V1861, P101
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Meyer R, 2010, LECT NOTES COMPUT SC, V6174, P175, DOI 10.1007/978-3-642-14295-6_19
   Owicki S. S., 1975, THESIS NEW YORK
   Pnueli A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P107
   Rackoff C., 1978, Theoretical Computer Science, V6, P223, DOI 10.1016/0304-3975(78)90036-1
   Reynier PA, 2011, LECT NOTES COMPUT SC, V6709, P69
   Schnoebelen P, 2010, LECT NOTES COMPUT SC, V6281, P616, DOI 10.1007/978-3-642-15155-2_54
   Valmari Antti., 2012, Petri Nets, P208, DOI 10.1007/978-3-642-31131-4_12
   Zufferey D, 2012, LECT NOTES COMPUT SC, V7148, P445, DOI 10.1007/978-3-642-27940-9_29
NR 47
TC 24
Z9 25
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2014
VL 36
IS 4
AR 14
DI 10.1145/2629608
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT0JN
UT WOS:000344622700004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Carbone, M
   Honda, K
   Yoshida, N
AF Carbone, Marco
   Honda, Kohei
   Yoshida, Nobuko
TI Structured Communication-Centered Programming for Web Services
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Design; Communication; session types; process calculi;
   choreography; type system; web services; end-point projection
ID SESSION TYPES; CALCULUS; MODEL; VERIFICATION; PROTOCOLS
AB This article relates two different paradigms of descriptions of communication behavior, one focusing on global message flows and another on end-point behaviors, using formal calculi based on session types. The global calculus, which originates from a Web service description language (W3C WS-CDL), describes an interaction scenario from a vantage viewpoint; the end-point calculus, an applied typed p-calculus, precisely identifies a local behavior of each participant. We explore a theory of end-point projection, by which we can map a global description to its end-point counterparts preserving types and dynamics. Three principles of well-structured description and the type structures play a fundamental role in the theory.
C1 [Carbone, Marco] Univ Copenhagen, IT, DK-1168 Copenhagen, Denmark.
   [Honda, Kohei] Univ London, Dept Elect Engn & Comp Sci, London WC1E 7HU, England.
   [Yoshida, Nobuko] Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2AZ, England.
C3 University of Copenhagen; University of London; Imperial College London
RP Carbone, M (corresponding author), Univ Copenhagen, IT, DK-1168 Copenhagen, Denmark.
EM carbonem@itu.dk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557
FU EPSRC [EP/G015635/1, EP/G015481/1, EP/F003757/1] Funding Source: UKRI
CR Abadi M, 1999, INFORM COMPUT, V148, P1, DOI 10.1006/inco.1998.2740
   Abadi M, 2001, ACM SIGPLAN NOTICES, V36, P104, DOI 10.1145/373243.360213
   Alur R, 2005, THEOR COMPUT SCI, V331, P97, DOI 10.1016/j.tcs.2004.09.034
   [Anonymous], UN MOD LANG VERS 2 0
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Baeten J., 2001, SPECIFYING INTERNET, P576
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Benton N, 2004, ACM T PROGR LANG SYS, V26, P769, DOI 10.1145/1018203.1018205
   Berger M, 2001, LECT NOTES COMPUT SC, V2044, P29
   Bhargavan K, 2006, LECT NOTES COMPUT SC, V4184, P88
   Bhargavan K, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P124, DOI 10.1109/CSF.2009.26
   Bonelli E, 2005, J FUNCT PROGRAM, V15, P219, DOI 10.1017/S09567968O400543X
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4467, P96
   Briais S, 2005, LECT NOTES COMPUT SC, V3705, P163, DOI 10.1007/11580850_10
   Broy M, 2005, SCI COMPUT PROGRAM, V54, P213, DOI 10.1016/j.scico.2004.04.003
   Broy M, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189753
   Broy M, 2007, LECT NOTES COMPUT SC, V4362, P29
   Busi N, 2006, LECT NOTES COMPUT SC, V4038, P63
   Caires L, 2009, LECT NOTES COMPUT SC, V5502, P285, DOI 10.1007/978-3-642-00590-9_21
   Carbone M, 2004, LECT NOTES COMPUT SC, V3328, P161
   Carbone M., 2006, A theoretical basis of communication-centred concurrent programming
   CARBONE M., 2006, P 2 WORKSH DEV COMP
   Carbone M, 2007, LECT NOTES COMPUT SC, V4421, P2
   Castagna G, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1328438.1328471
   Chaki S, 2002, ACM SIGPLAN NOTICES, V37, P45, DOI 10.1145/565816.503278
   Corin R, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P170, DOI 10.1109/CSF.2007.29
   Demangeon R, 2011, LECT NOTES COMPUT SC, V6901, P280, DOI 10.1007/978-3-642-23217-6_19
   DEZANI-CIANCAGLINI M., 2009, P 6 INT WORKSH WEB S
   Dezani-Ciancaglini M, 2006, LECT NOTES COMPUT SC, V4067, P328
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   FOSTER H., 2010, LTSA WS ENG HOM PAG
   Fu X, 2004, THEOR COMPUT SCI, V328, P19, DOI 10.1016/j.tcs.2004.07.004
   Fu X., 2005, INT J WEB SERV RES, V2, P68, DOI DOI 10.4018/JWSR.2005100104
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gordon A., 2002, X M LSEC 02 P 2002 C, P18
   Guidi C, 2006, LECT NOTES COMPUT SC, V4294, P327
   Guttman J. D., 2001, CCS 01, P186
   Hennessy Matthew., 1998, HIGH LEVEL CONCURREN, P3
   Henriksen JG, 2005, INFORM COMPUT, V202, P1, DOI 10.1016/j.ic.2004.08.004
   Hoare TonyC.A.R., 1985, COMMUNICATING SEQUEN
   Honda K., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P344, DOI 10.1145/237721.237802
   HONDA K, 2007, B EUROPEAN ASS THEOR, V91, P165
   Honda K, 1998, LNCS, V1381, P22, DOI DOI 10.1007/BFB0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   IBM, 2001, WEB SERV FLOW LANG W
   IBM, 2010, WEBSPHERE MQ WORKFL
   Igarashi A., 2001, SIGPLAN Notices, V36, P128, DOI 10.1145/373243.360215
   International Telecommunication Union, 1996, REC Z 120 MESS SEQ C
   Kobayashi N., 1996, POPL 1996, 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Proceedings, P358
   Laneve C, 2006, LECT NOTES COMPUT SC, V3921, P32
   Microsoft, 2001, XLANG WEB SERV BUS P
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Milner Robin., 1993, LOGIC ALGEBRA SPECIF
   NEEDHAM RM, 1978, COMMUN ACM, V21, P993, DOI 10.1145/359657.359659
   O'HANLON C., 2006, COMMUNICATION
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Qiu Zongyan, 2007, P WORLD WIDE WEB C W, P973, DOI 10.1145/1242572.1242704
   Rajamani S. K., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P166
   ROSS-TALBOT S., 2006, WS CDL PRIMER
   Sangiorgi D, 1999, THEOR COMPUT SCI, V221, P457, DOI 10.1016/S0304-3975(99)00040-7
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   van der Aalst W., 2002, INFORM TECHNOL MANAG, V2, P195
   Vasconcelos V, 2004, LECT NOTES COMPUT SC, V3170, P497
   Vieira HT, 2008, LECT NOTES COMPUT SC, V4960, P269
   W3C WS-CDL WORKING GROUP, 2004, WEB SERV CHOR DESC L
   WFMC, 2010, WORKF MAN COAL
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
   Yoshida N., 1996, Foundations of Software Technology and Theoretical Computer Science. 16th Conference Proceedings, P371
   Yoshida N, 2007, SECRET 2007 ENTCS, V171, P73
NR 71
TC 57
Z9 57
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2012
VL 34
IS 2
AR 8
DI 10.1145/2220365.2220367
PG 78
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 968JW
UT WOS:000305977300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Jeffrey, D
   Nagarajan, V
   Gupta, R
   Gupta, N
AF Jeffrey, Dennis
   Nagarajan, Vijay
   Gupta, Rajiv
   Gupta, Neelam
TI Execution Suppression: An Automated Iterative Technique for Locating
   Memory Errors
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Experimentation; Performance; Reliability; Verification;
   Execution suppression; fault localization; hardware support; memory
   corruption propagation; memory errors; variable re-ordering
ID PROGRAM; BUGS
AB By studying the behavior of several programs that crash due to memory errors, we observed that locating the errors can be challenging because significant propagation of corrupt memory values can occur prior to the point of the crash. In this article, we present an automated approach for locating memory errors in the presence of memory corruption propagation. Our approach leverages the information revealed by a program crash: when a crash occurs, this reveals a subset of the memory corruption that exists in the execution. By suppressing (nullifying) the effect of this known corruption during execution, the crash is avoided and any remaining (hidden) corruption may then be exposed by subsequent crashes. The newly exposed corruption can then be suppressed in turn. By iterating this process until no further crashes occur, the first point of memory corruption-and the likely root cause of the program failure-can be identified. However, this iterative approach may terminate prematurely, since programs may not crash even when memory corruption is present during execution. To address this, we show how crashes can be exposed in an execution by manipulating the relative ordering of particular variables within memory. By revealing crashes through this variable re-ordering, the effectiveness and applicability of the execution suppression approach can be improved. We describe a set of experiments illustrating the effectiveness of our approach in consistently and precisely identifying the first points of memory corruption in executions that fail due to memory errors. We also discuss a baseline software implementation of execution suppression that incurs an average overhead of 7.2x, and describe how to reduce this overhead to 1.8x through hardware support.
C1 [Jeffrey, Dennis; Nagarajan, Vijay; Gupta, Rajiv] Univ Calif Riverside, Riverside, CA 92521 USA.
C3 University of California System; University of California Riverside
RP Jeffrey, D (corresponding author), Google Inc, 1600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
EM dennisjeffrey@google.com; vijay.nagarajan@ed.ac.uk; gupta@cs.ucr.edu;
   guptajneelam@gmail.com
OI Gupta, Rajiv/0000-0002-9348-3974
FU National Science Foundation (NSF) [CNS-0751961, CNS-0751949,
   CNS-0810906, CCF-0753470]
FX This research was supported by National Science Foundation (NSF) grants
   CNS-0751961, CNS-0751949, CNS-0810906, and CCF-0753470 to UC Riverside.
CR Agrawal H., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P348, DOI 10.1109/ICSM.1993.366927
   Agrawal Hiralal, 1990, PLDI, P246, DOI 10.1145/93542.93576
   Akritidis P, 2008, P IEEE S SECUR PRIV, P263, DOI 10.1109/SP.2008.30
   AMMANN PE, 1988, IEEE T COMPUT, V37, P418, DOI 10.1109/12.2185
   [Anonymous], 2006, P 28 INT C SOFTW ENG
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   [Anonymous], 2008, ISSTA
   Berger ED, 2006, ACM SIGPLAN NOTICES, V41, P158, DOI 10.1145/1133981.1134000
   Bond M., 2008, Diagnosing and tolerating bugs in deployed systems
   Bond MD, 2009, ACM SIGPLAN NOTICES, V44, P277, DOI 10.1145/1508284.1508277
   Bond MichaelD., 2008, Proceedings of the 23rd ACM SIGPLAN conference on Object-oriented programming systems languages and applications, OOPSLA '08, P109
   Chen HB, 2008, CONF PROC INT SYMP C, P401, DOI 10.1109/ISCA.2008.18
   Cleve H, 2005, PROC INT CONF SOFTW, P342
   Csallner C, 2005, PROC INT CONF SOFTW, P422
   Dalton M, 2007, CONF PROC INT SYMP C, P482, DOI 10.1145/1273440.1250722
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Gyimóthy T, 1999, LECT NOTES COMPUT SC, V1687, P303, DOI 10.1145/318774.319248
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   Hastings Reed., 1992, WINTER USENIX C, P125
   Jeffrey D, 2008, PROC IEEE INT CONF S, P356, DOI 10.1109/ICSM.2008.4658084
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   Lu S, 2006, INT SYMP MICROARCH, P38
   Lu Shan, 2005, WORKSHOP EVALUATION, P1, DOI 10.1.1.134.8941
   Lvin VB, 2008, ACM SIGPLAN NOTICES, V43, P115, DOI 10.1145/1353536.1346296
   Narayanasamy S, 2005, CONF PROC INT SYMP C, P284, DOI 10.1109/ISCA.2005.16
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Novark G, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P1, DOI 10.1145/1250734.1250736
   Novark G, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P397, DOI 10.1145/1542476.1542521
   Pacheco C, 2005, LECT NOTES COMPUT SC, V3586, P504
   Pattabiraman K, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P219, DOI 10.1145/1357010.1352616
   Renieris M, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P30, DOI 10.1109/ASE.2003.1240292
   Ruwase Olatunji, 2004, NDSS, P159
   Shetty R, 2006, IBM J RES DEV, V50, P261, DOI 10.1147/rd.502.0261
   Tallam Sriraman, 2008, 2008 IEEE 32nd International Computer Software and Applications Conference (COMPSAC), P152, DOI 10.1109/COMPSAC.2008.23
   Venkataramani G., 2008, P 14 IEEE INT S HIGH
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Yang Z, 2006, PEDIATR DIABETES, V7, P146, DOI 10.1111/j.1399-543X.2006.00163.x
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
   Zeller Andreas., 2002, Proceedings of the 10th ACM SIGSOFT Symposium on Foundations of Software Engineering, SIGSOFT '02/FSE-10, P1, DOI DOI 10.1145/587051.587053
   Zhang X, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1133981.1134002
   Zhou P, 2004, INT SYMP MICROARCH, P269
NR 44
TC 7
Z9 8
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2010
VL 32
IS 5
AR 17
DI 10.1145/1745312.1745314
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 618OY
UT WOS:000279366700002
DA 2024-07-18
ER

PT J
AU Jeannet, B
   Loginov, A
   Reps, T
   Sagiv, M
AF Jeannet, Bertrand
   Loginov, Alexey
   Reps, Thomas
   Sagiv, Mooly
TI A Relational Approach to Interprocedural Shape Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Theory; Verification; Abstract interpretation;
   context-sensitive analysis; interprocedural dataflow analysis;
   destructive updating; pointer analysis; shape analysis; static analysis;
   3-valued logic
AB This article addresses the verification of properties of imperative programs with recursive procedure calls, heap-allocated storage, and destructive updating of pointer-valued fields, that is, interprocedural shape analysis. The article makes three contributions.
   -It introduces a new method for abstracting relations over memory configurations for use in abstract interpretation.
   -It shows how this method furnishes the elements needed for a compositional approach to shape analysis. In particular, abstracted relations are used to represent the shape transformation performed by a sequence of operations, and an overapproximation to relational composition can be performed using the meet operation of the domain of abstracted relations.
   -It applies these ideas in a new algorithm for context-sensitive interprocedural shape analysis. The algorithm creates procedure summaries using abstracted relations over memory configurations, and the meet-based composition operation provides a way to apply the summary transformer for a procedure P at each call site from which P is called.
   The algorithm has been applied successfully to establish properties of both (i) recursive programs that manipulate lists and (ii) recursive programs that manipulate binary trees.
C1 [Jeannet, Bertrand] INRIA, Sophia Antipolis, France.
   [Reps, Thomas] Univ Wisconsin, Dept Comp Sci, Madison, WI 53706 USA.
   [Sagiv, Mooly] Tel Aviv Univ, Sch Comp Sci, Tel Aviv, Israel.
C3 Inria; University of Wisconsin System; University of Wisconsin Madison;
   Tel Aviv University
RP Jeannet, B (corresponding author), INRIA, Sophia Antipolis, France.
EM Bertrand.Jeannet@inrialpes.fr; alexey@grammatech.com; reps@cs.wisc.edu;
   msagiv@post.tau.ac.il
FU ONR [N00014-01-1-0796, N00014-01-1-0708]; NSF [CCR-9986308, CCF-0540955,
   CCF-0524051]
FX This work was supported in part by ONR under grants N00014-01-1-0796 and
   N00014-01-1-0708, and by NSF under grants CCR-9986308, CCF-0540955, and
   CCF-0524051.
CR [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], P 32 ACM SIGPLAN SIG
   ARNOLD G, 2006, LECT NOTES COMPUTER, V3855
   ARNOLD G, 2006, LECT NOTES COMPUTER, V4134
   BALL T, 2001, PASTE 01 WORKSH PROG, P97
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   BOGUDLOV I, 2007, LECT NOTES COMPUTER, V4590
   BOGUDLOV I, 2007, TR20070101 TEL AV U
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouajjani A, 2003, ACM SIGPLAN NOTICES, V38, P62, DOI 10.1145/640128.604137
   Clarke EM, 1999, MODEL CHECKING, P1
   COUSOT P, 1977, FORMAL DESCRIPTIONS, P237
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   FINKEL A, 1997, ELECT NOTES THEOR CO, V9
   Gopan D, 2004, LECT NOTES COMPUT SC, V2988, P512
   Gotsman A, 2006, LECT NOTES COMPUT SC, V4134, P240
   JEANNET B, 2004, LECT NOTES COMPUTER, V3148
   JEANNET B, 2004, LECT NOTES COMPUTER, V3116
   KNOOP J, 1992, LECT NOTES COMPUT SC, V641, P125
   LAHIRI SK, 2008, PRINCIPLES PROGRAMMI
   Leggett M., 2000, PHOTOFILE, V60, P26, DOI [10.3316/ielapa.200100603, DOI 10.3316/IELAPA.200100603]
   Lev-Ami T, 2000, LECT NOTES COMPUT SC, V1824, P280
   LOGINOV A, 2005, LECT NOTES COMPUTER, V3576
   LOGINOV A, 2006, 1574 U WISC COMP SCI
   Marron M, 2008, LECT NOTES COMPUT SC, V4959, P245
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   MOLLER A, 2001, PLDI, P221
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T, 2003, LECT NOTES COMPUT SC, V2618, P380
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   RINETZKY N, 2001, LNCS, V2027, P133
   RINETZKY N, 2005, LECT NOTES COMPUTER, V3672
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   SCHWOON S, 2002, THESIS TECHNICAL U M
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Yorsh G, 2004, LECT NOTES COMPUT SC, V2988, P530
NR 38
TC 18
Z9 18
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2010
VL 32
IS 2
AR 5
DI 10.1145/1667048.1667050
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 553OH
UT WOS:000274376200002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Barthe, G
   Grégoire, B
   Kunz, C
   Rezk, T
AF Barthe, Gilles
   Gregoire, Benjamin
   Kunz, Cesar
   Rezk, Tamara
TI Certificate Translation for Optimizing Compilers
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Verification; Security; Proof-carrying code; program
   verification; static analysis; program optimizations
ID FORMAL VERIFICATION; VALIDATION; PROGRAM
AB Proof Carrying Code provides trust in mobile code by requiring certificates that ensure the code adherence to specific conditions. The prominent approach to generate certificates for compiled code is Certifying Compilation, that automatically generates certificates for simple safety properties.
   In this work, we present Certificate Translation, a novel extension for standard compilers that automatically transforms formal proofs for more expressive and complex properties of the source program to certificates for the compiled code.
   The article outlines the principles of certificate translation, instantiated for a nonoptimizing compiler and for standard compiler optimizations in the context of an intermediate RTL Language.
C1 [Gregoire, Benjamin; Kunz, Cesar; Rezk, Tamara] INRIA Sophia Antipolis Mediterranee, Sophia Antipolis, France.
EM cesar.kunz@imdea.org
OI BARTHE, Gilles/0000-0002-3853-1777
FU IST Project MOBIUS
FX This work was partially supported by IST Project MOBIUS.
CR Bannwart F, 2005, ELECTRON NOTES THEOR, V141, P255, DOI 10.1016/j.entcs.2005.02.026
   BARNETT M, 2005, LECT NOTES COMPUTER, V4111
   BARNETT M, 2005, LNCS, V3362, P151
   Barrett C, 2005, LECT NOTES COMPUT SC, V3576, P291
   Barthe G, 2006, LECT NOTES COMPUT SC, V3866, P112
   BARTHE G, 2008, LECT NOTES COMPUTER
   BARTHE G, 2006, P S SEC PRIV
   Barthe G, 2008, LECT NOTES COMPUT SC, V4960, P368
   Barthe G, 2007, LECT NOTES COMPUT SC, V4709, P152
   Barthe G, 2006, LECT NOTES COMPUT SC, V4134, P301
   Bertot Y, 2006, LECT NOTES COMPUT SC, V3839, P66
   Blazy S, 2006, LECT NOTES COMPUT SC, V4085, P460
   Burdy L., 2003, Electronic Notes in Theoretical Computer Science, V80
   BURDY L, 2006, P S APPL COMP, P1835
   Chalin P, 2006, LECT NOTES COMPUT SC, V4111, P342
   GUTTMAN JD, 1995, LISP SYMBOL COMPUT, V8
   Laud P, 2006, THEOR COMPUT SCI, V364, P292, DOI 10.1016/j.tcs.2006.08.013
   Leino K.Rustan M., 2006, Proceedings of the 6th International Perspectives of Systems Informatics, Andrei Ershov Memorial Conference, PSI 2006, P20, DOI DOI 10.1007/978-3-540-70881-03
   Leino KRM, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P218, DOI 10.1109/SEFM.2004.1347523
   LERNER S, 2005, P 32 ACM SIGPLAN SIG, P364
   Leroy X, 2006, LECT NOTES COMPUT SC, V3924, P54
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Muller Peter., 2007, SAVCBS, P39, DOI [10.1145/1292316.1292321, DOI 10.1145/1292316.1292321]
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Necula GC, 1998, ACM SIGPLAN NOTICES, V33, P333, DOI 10.1145/277652.277752
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   NECULA GC, 1998, CMUCS98154
   NORDIO M, 2008, 587 ETH
   NORDIO M, 2008, LECT NOTES BUSINESS
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   RIVAL X, 2004, PRINCIPLES PROGRAMMI, P1
   Saabas A, 2008, J LOGIC ALGEBR PROGR, V77, P131, DOI 10.1016/j.jlap.2008.05.007
   Seo SN, 2003, LECT NOTES COMPUT SC, V2895, P230
   Shao Z, 2005, ACM T PROGR LANG SYS, V27, P1, DOI 10.1145/1053468.1053469
   STRECKER M, 2002, LNCS, V2392, P63
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   Tristan JB, 2008, ACM SIGPLAN NOTICES, V43, P17, DOI 10.1145/1328897.1328444
   WILDMOSER M, 2005, ELECT NOTES THEORETI, V141
   ZUCK LD, 2002, ELECT NOTES THEOR CO, V65
NR 39
TC 12
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2009
VL 31
IS 5
AR 18
DI 10.1145/1538917.1538919
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 476VT
UT WOS:000268475100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Bhargavan, K
   Fournet, C
   Gordon, AD
   Tse, S
AF Bhargavan, Karthikeyan
   Fournet, Cedric
   Gordon, Andrew D.
   Tse, Stephen
TI Verified Interoperable Implementations of Security Protocols
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Security; Theory; Verification; Functional programming; pi
   calculus; Web services; XML security
ID CRYPTOGRAPHIC PROTOCOLS; ENCRYPTION
AB We present an architecture and tools for verifying implementations of security protocols. Our implementations can run with both concrete and symbolic implementations of cryptographic algorithms. The concrete implementation is for production and interoperability testing. The symbolic implementation is for debugging and formal verification. We develop our approach for protocols written in F#, a dialect of ML, and verify them by compilation to ProVerif, a resolution-based theorem prover for cryptographic protocols. We establish the correctness of this compilation scheme, and we illustrate our approach with protocols for Web Services security.
C1 [Tse, Stephen] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
EM karthb@microsoft.com
CR Abadi M, 2002, J CRYPTOL, V15, P103, DOI 10.1007/s00145-001-0014-7
   Abadi M, 1999, INFORM COMPUT, V148, P1, DOI 10.1006/inco.1998.2740
   Allamigeon X, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P140, DOI 10.1109/CSFW.2005.25
   [Anonymous], GEODERMA
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], WEB SERV ADDR WS ADD
   [Anonymous], 2004, WEB SERV SEC SOAP ME
   [Anonymous], XML ENCRYPTION SYNTA
   [Anonymous], ACM OPERATING SYST R
   [Anonymous], 1992, MATH STRUCT COMP SCI, V2, P119, DOI DOI 10.1017/S0960129500001407
   *AP SOFTW FDN, 2006, AP WSS4J
   Askarov A, 2005, LECT NOTES COMPUT SC, V3679, P197
   Backes Michael., 2003, CCS 03, P220, DOI [10.1145/948109.948140, DOI 10.1145/948109.948140]
   BERRY G, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P81, DOI 10.1145/96709.96717
   Bhargavan K, 2005, THEOR COMPUT SCI, V340, P102, DOI 10.1016/j.tcs.2005.03.005
   Bhargavan K, 2003, LECT NOTES COMPUT SC, V3188, P197
   BHARGAVAN K, 2007, SOFTWARE SYSTEM RELI, P87
   BHARGAVAN K, 2008, P ACM S INF COMP COM, P123
   BHARGAVAN K, 2007, MSRT200646
   BHARGAVAN K, 2006, COMP SEC FDN WORKSH, P139
   Bhargavan K, 2007, ACM T INFORM SYST SE, V10, DOI 10.1145/1237500.1237504
   Bhargavan K, 2006, LECT NOTES COMPUT SC, V4184, P88
   Bhargavan K, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P459
   Bhargavan Karthikeyan., 2004, ACM Conference on Computer and Communications Security, P268, DOI DOI 10.1145/1030083.1030120
   Blanchet B, 2005, THEOR COMPUT SCI, V333, P67, DOI 10.1016/j.tcs.2004.10.018
   Blanchet B, 2005, IEEE S LOG, P331
   Blanchet B, 2001, P IEEE CSFW, P82, DOI 10.1109/CSFW.2001.930138
   Blanchet B, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P97, DOI 10.1109/CSF.2007.16
   Bodei C, 2003, P IEEE CSFW, P126, DOI 10.1109/CSFW.2003.1212709
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   EASTLAKE D, 2002, XML SIGNATURE SYNTAX
   Fournet C, 2005, J LOGIC ALGEBR PROGR, V63, P131, DOI 10.1016/j.jlap.2004.01.006
   *GAL CONN, 2005, CRYPT REF MAN
   Giambiagi P, 2004, SCI COMPUT PROGRAM, V50, P73, DOI 10.1016/j.scico.2004.01.002
   GORDON A, 2002, P 2002 ACM WORKSH XM, P18
   Goubault-Larrecq J, 2005, LECT NOTES COMPUT SC, V3385, P363
   Guttman JD, 2005, LECT NOTES COMPUT SC, V3705, P116, DOI 10.1007/11580850_8
   *IBM CORP, 2006, IBM WEBSPHERE APPL S
   KLEINER E, 2005, P C MATH FDN PROGR S
   KLEINER E, 2004, P C AUT REAS SEC PRO
   LUKELL S, 2003, P SO AFR TEL NETW AP
   Merro M, 1998, LECT NOTES COMPUT SC, V1443, P856, DOI 10.1007/BFb0055108
   *MICR CORP, 2007, FS2PV CRYPT PROT VER
   *MICR CORP, 2004, WEB SERV ENH WSE 2 0
   MULLER F, 2001, SRICSL0107 CAPSL
   NEEDHAM RM, 1978, COMMUN ACM, V21, P993, DOI 10.1145/359657.359659
   OSHEA N, 2006, ELYJAH SECURITY ANAL
   Pozza D, 2004, 18TH INTERNATIONAL CONFERENCE ON ADVANCED INFORMATION NETWORKING AND APPLICATIONS, VOL 1 (LONG PAPERS), PROCEEDINGS, P400, DOI 10.1109/AINA.2004.1283943
   Song D, 2001, LECT NOTES COMPUT SC, V2102, P241
   Sumii E, 2001, P IEEE CSFW, P256, DOI 10.1109/CSFW.2001.930151
   SUMII E, 2004, P 31 ACM SIGPLAN SIG, P161
   *W3C, 2003, SOAP VERS 1 2 W3C
   Woo T. Y. C., 1993, Proceedings 1993 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.93CH3290-4), P178, DOI 10.1109/RISP.1993.287633
NR 53
TC 27
Z9 33
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2008
VL 31
IS 1
AR 5
DI 10.1145/1452044.1452049
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 393TC
UT WOS:000262394800005
OA Bronze
DA 2024-07-18
ER

PT J
AU Jacobs, B
   Piessens, F
   Smans, J
   Rustan, K
   Leino, M
   Schulte, W
AF Jacobs, Bart
   Piessens, Frank
   Smans, Jan
   Rustan, K.
   Leino, M.
   Schulte, Wolfram
TI A Programming Model for Concurrent Object-Oriented Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Verification; Aliasing; data races; local reasoning; modular reasoning;
   ownership; verification condition generation
ID VERIFICATION; MONITORS
AB Reasoning about multithreaded object-oriented programs is difficult, due to the nonlocal nature of object aliasing and data races. We propose a programming regime (or programming model) that rules out data races, and enables local reasoning in the presence of object aliasing and concurrency. Our programming model builds on the multithreading and synchronization primitives as they are present in current mainstream programming languages. Java or C# programs developed according to our model can be annotated by means of stylized comments to make the use of the model explicit. We show that such annotated programs can be formally verified to comply with the programming model. If the annotated program verifies, the underlying Java or C# program is guaranteed to be free from data races, and it is sound to reason locally about program behavior. Verification is modular: a program is valid if all methods are valid, and validity of a method does not depend on program elements that are not visible to the method. We have implemented a verifier for programs developed according to our model in a custom build of the Spec# programming system, and we have validated our approach on a case study.
C1 [Jacobs, Bart; Piessens, Frank; Smans, Jan] Katholieke Univ Leuven, Louvain, Belgium.
C3 KU Leuven
RP Jacobs, B (corresponding author), Katholieke Univ Leuven, Louvain, Belgium.
EM bart.jacobs@cs.kuleuven.be
RI Piessens, Frank/B-1695-2014; Jacobs, Bart/B-1271-2014
OI Jacobs, Bart/0000-0002-3605-249X
CR Abrahám-Mumm E, 2002, LECT NOTES COMPUT SC, V2303, P5
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   DETLEFS DL, 1998, 159 COMP SYST RES CT
   Flanagan C, 2005, THEOR COMPUT SCI, V338, P153, DOI 10.1016/j.tcs.2004.12.006
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Flanagan Cormac., 2004, POPL 04, P256
   Flanagan Cormac., 2003, Pro- ceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, PLDI '03, P338
   Freund StephenN., 2004, Journal of Object Technology, V3, P81
   Gosling J., 2005, Java Language Specification, Vthird
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   Jacobs B, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P137, DOI 10.1109/SEFM.2005.39
   JACOBS B, 2007, THESIS KATHOLIEKE U
   Jacobs B., 2005, MSRTR200585
   Jacobs B, 2006, LECT NOTES COMPUT SC, V4260, P420
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   QADEER S, 2004, POPL, P245
   Rodríguez E, 2005, LECT NOTES COMPUT SC, V3586, P551
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Welc A, 2004, LECT NOTES COMPUT SC, V3086, P519
NR 22
TC 7
Z9 9
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2008
VL 31
IS 1
AR 1
DI 10.1145/1452044.1452045
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 393TC
UT WOS:000262394800001
OA Green Published, Green Accepted
DA 2024-07-18
ER

PT J
AU Monniaux, D
AF Monniaux, David
TI The pitfalls of verifying floating-point computations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; verification; abstract interpretation; static analysis;
   program testing; verification; floating point; embedded software;
   safety-critical software; x87; IA32; AMD64; PowerPC; FPU; rounding;
   IEEE-754
ID ABSTRACT INTERPRETATION; ANALYZER
AB Current critical systems often use a lot of floating-point computations, and thus the testing or static analysis of programs containing floating-point operators has become a priority. However, correctly defining the semantics of common implementations of floating-point is tricky, because semantics may change according to many factors beyond source-code level, such as choices made by compilers. We here give concrete examples of problems that can appear and solutions for implementing in analysis software.
C1 [Monniaux, David] Ecole Normale Super, CNRS, Paris, France.
C3 Universite PSL; Ecole Normale Superieure (ENS); Centre National de la
   Recherche Scientifique (CNRS)
RP Monniaux, D (corresponding author), VERIMAG, CNRS, Grenoble, France.
EM David.Monniaux@imag.fr
OI Monniaux, David/0000-0001-7671-6126
CR [Anonymous], 1985, 7541985 ANSI IEEE
   [Anonymous], 1987, THEORY RECURSIVE FUN
   [Anonymous], [No title captured]
   Appel AndrewW., 1997, MODERN COMPILER IMPL
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Blanchet Bruno, 2003, ACM SIGPLAN NOTICES, P196, DOI DOI 10.1145/780822.781153
   Caspi P., 1987, P 14 ACM SIGACT SIGP, P178, DOI DOI 10.1145/41625.41641
   Cormen T.H., 1990, Introduction to Algorithms
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 1990, HDB THEORETICAL COMP, P841
   Goldfried M.R., 1991, J PSYCHOTHER INTEGR, V1, P5
   Gosling J., 2005, Java Language Specification, Vthird
   Gosling J., 2000, The Java Language Specification
   Gosling James, 1996, The Java Language Specification
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Kahan W., 1987, State of the Art in Numerical Analysis. Proceedings of the Joint IMA/SIAM Conference, P165
   Kahan W., 1998, JAVAS FLOATING POINT
   LEROY X, 2005, OBJECTIVE CAML SYSTE
   Martín-Martín M, 2006, GEODIN ACTA, V19, P1, DOI 10.3166/ga.19.1-15
   Miné A, 2004, LECT NOTES COMPUT SC, V2986, P3
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   Mine A., 2004, Domaines numeriques abstraits faiblement relationnels
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Rival X, 2003, LECT NOTES COMPUT SC, V2575, P41
   Winskel G., 1993, The Formal Semantics of Programming Languages
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 49
TC 91
Z9 106
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2008
VL 30
IS 3
AR 12
DI 10.1145/1353445.1353446
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308XV
UT WOS:000256425100001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Greenman, B
   Dimoulas, C
   Felleisen, M
AF Greenman, Ben
   Dimoulas, Christos
   Felleisen, Matthias
TI Typed-Untyped Interactions: A Comparative Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Complete monitoring; blame soundness; blame completeness
ID FINAL ALGEBRA-SEMANTICS; DESIGN; BLAME; SPACE
AB The literature presents many strategies for enforcing the integrity of types when typed code interacts with untyped code. This article presents a uniform evaluation framework that characterizes the differences among some major existing semantics for typed-untyped interaction. Type system designers can use this framework to analyze the guarantees of their own dynamic semantics.
C1 [Greenman, Ben] Brown Univ, PLT, 115 Waterman St, Providence, RI 02912 USA.
   [Dimoulas, Christos] Northwestern Univ, PLT, 2233 Tech Dr, Evanston, IL 60208 USA.
   [Felleisen, Matthias] Northeastern Univ, PLT, 440 & Luntington Ave, Boston, MA 02115 USA.
C3 Brown University; Northwestern University; Northeastern University
RP Greenman, B (corresponding author), Brown Univ, PLT, 115 Waterman St, Providence, RI 02912 USA.
EM ben-jaminlgreenman@gmail.com; chrdimo@northwestern.edu;
   matthias@ccs.neu.edu
RI Greenman, Ben/GYV-4666-2022; Dimoulas, Christos/P-7100-2018
OI Greenman, Ben/0000-0001-7078-9287; Dimoulas,
   Christos/0000-0002-9338-7034
FU NSF [CCF 1518844, CCF 1763922, CNS 1823244, CCF 2030859]
FX Ben Greenman research completed at Northeastern University prior to
   joining Brown. NSF Grants No. CCF 1518844, No. CCF 1763922, No. CNS
   1823244, and No. CCF 2030859 (to the CRA for the CIFellows project)
   provided support.
CR Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   Allende E, 2014, SCI COMPUT PROGRAM, V96, P52, DOI 10.1016/j.scico.2013.06.006
   Almahallawi Deyaaeldeen, 2020, THESIS INDIANA U
   Anderson C., 2003, Electronic Notes in Theoretical Computer Science, V82, P53, DOI [10.1016/S1571-0661(04)80802-8, DOI 10.1016/S1571-0661(04)80802-8]
   Bauman S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133878
   BERGSTRA JA, 1983, SIAM J COMPUT, V12, P366, DOI 10.1137/0212024
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Bloom B, 2009, ACM SIGPLAN NOTICES, V44, P117, DOI 10.1145/1639949.1640098
   Bonnaire-Sergeant A, 2016, LECT NOTES COMPUT SC, V9632, P68, DOI 10.1007/978-3-662-49498-1_4
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Cartwright Robert, 1980, P LFP, P46
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Castagna Giuseppe, 2019, P IFL, V8, P1
   Chaudhuri Avik, 2017, CURR CONTENTS, p56:1
   Chitil O, 2012, ACM SIGPLAN NOTICES, V47, P67, DOI 10.1145/2398856.2364539
   Chung Benjamin, 2018, Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, Dagstuhl, V12, P1, DOI [10.4230/LIPIcs.ECOOP.2018.12, DOI 10.4230/LIPICS.ECOOP.2018.12]
   Dart, 2020, DART TYP SYST
   Degen M., 2012, Proceedings of the ACM SIGPLAN 2012 workshop on Partial evaluation and program manipulation, PEPM '12, P97
   Dimoulas C, 2012, LECT NOTES COMPUT SC, V7211, P214, DOI 10.1007/978-3-642-28869-2_11
   Dimoulas C, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039348
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Findler R.B., 2007, Proceedings of the 19th International Conference on Implementation and Application of Functional Languages (IFL), P111
   Findler RB, 2004, LECT NOTES COMPUT SC, V3086, P364
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Gariano IO, 2019, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON VIRTUAL MACHINES AND INTERMEDIATE LANGUAGES (VMIL '19), P58, DOI 10.1145/3358504.3361232
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenberg Michael., 2014, ARXIV
   Greenberg Michael, 2019, 3 SUMMIT ADV PROGRAM, V6, P1, DOI [10.4230/LIPIcs.SNAPL.2019.6, DOI 10.4230/LIPICS.SNAPL.2019.6]
   Greenman B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360548
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greenman B, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P30, DOI 10.1145/3162066
   Greenman Ben, 2018, CURR CONTENTS, V71, P1
   Greenman Ben, 2020, Ph. D. Dissertation
   Greenman Ben, 2022, Programming, V6, P1
   Gualandi HugoMusso., 2018, Proceedings of the XXII Brazilian Symposium on Programming Languages, SBLP'18, P19, DOI DOI 10.1145/3264637.3264640
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P208
   Keil Matthias., 2015, ECOOP, P149
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Lazarek Lukas, 2021, CURR CONTENTS, V68, P1
   Lu Kuang-Chen, 2023, Programming, V7
   Maidl AM, 2016, ACM SIGPLAN NOTICES, V51, P13, DOI [10.1145/2816707.2816709, 10.1145/2936313.2816709]
   Matthews J, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P3
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Moon DavidA., 1974, MACLISP REFERENCE MA
   Moore S, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022671.2984021
   Muehlboeck Fabian, 2017, CURR CONTENTS, V56, P1
   New MS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290328
   New Max S., 2020, THESIS NE U
   Ohori A., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P99, DOI 10.1145/158511.158529
   Ramsey N, 2011, J FUNCT PROGRAM, V21, P585, DOI 10.1017/S0956796811000219
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Rastogi A, 2012, ACM SIGPLAN NOTICES, V47, P481, DOI 10.1145/2103621.2103714
   Ren B.M., 2013, Proceedings of the 28th Annual ACM Symposium on Applied Computing, SAC '13, P1565, DOI DOI 10.1145/2480362.2480655
   Richards G., 2015, P ECOOP
   Richards G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133879
   Roberts Richard., 2019, P ECOOP, V15, P1
   Siek J. G., 2012, WORKSH SCHEM FUNCT P, P68
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000241
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Steele Guy Lewis., 1976, 379 AI MIT
   Steele GuyL., 1990, COMMON LISP, V2nd
   Strickland TS, 2012, ACM SIGPLAN NOTICES, V47, P943, DOI 10.1145/2398857.2384685
   Swamy N, 2014, ACM SIGPLAN NOTICES, V49, P425, DOI 10.1145/2535838.2535889
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Takikawa Asumu, 2015, ECOOP, P4
   THATTE SR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P367, DOI 10.1145/96709.96747
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Vitousek MM, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P28, DOI 10.1145/3359619.3359742
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Vitousek Michael M., 2019, Ph. D. Dissertation
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wadler Philip., 2015, SNAPL, P309, DOI DOI 10.4230/LIPICS.SNAPL.2015.309
   WAND M, 1979, J COMPUT SYST SCI, V19, P27, DOI 10.1016/0022-0000(79)90011-4
   Williams Jack., 2017, EUROPEAN C OBJECT OR, DOI DOI 10.4230/LIPICS.ECOOP.2017.28
   Wilson PT, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P1, DOI 10.1145/3276945.3276947
   Wright A. K., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P250, DOI 10.1145/182409.182485
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
NR 93
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2023
VL 45
IS 1
AR 4
DI 10.1145/3579833
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9V9QK
UT WOS:000948718900004
OA Bronze
DA 2024-07-18
ER

PT J
AU Runge, T
   Servetto, M
   Potanin, A
   Schaefer, I
AF Runge, Tobias
   Servetto, Marco
   Potanin, Alex
   Schaefer, Ina
TI Immutability and Encapsulation for Sound OO Information Flow Control
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Security; information flow; type system; mutation control;
   confidentiality; integrity
ID JAVA; NONINTERFERENCE; UNIQUENESS; INFERENCE; LANGUAGE
AB Security-critical software applications contain confidential information which has to be protected from leaking to unauthorized systems. With language-based techniques, the confidentiality of applications can be enforced. Such techniques are for example type systems that enforce an information flow policy through typing rules. The precision of such type systems, especially in object-oriented languages, is an area of active research: an appropriate system should not reject too many secure programs while soundly preserving noninterference. In this work, we introduce the language SIFO which supports information flow control for an object-oriented language with type modifiers. Type modifiers increase the precision of the type system by utilizing immutability and uniqueness properties of objects for the detection of information leaks. We present SIFO informally by using examples to demonstrate the applicability of the language, formalize the type system, prove noninterference, implement SIFO as a pluggable type system in the programming language L42, and evaluate it with a feasibility study and a benchmark.
C1 [Runge, Tobias; Schaefer, Ina] Karlsruhe Inst Technol, Inst Informat Secur & Dependabil KASTEL, D-576131 Karlsruhe, Germany.
   [Runge, Tobias; Schaefer, Ina] TU Braunschweig, Inst Software Engn & Automot Informat, Braunschweig, Germany.
   [Servetto, Marco] Victoria Univ Wellington, Sch Engn & Comp Sci, POB 600, Wellington 6144, New Zealand.
   [Potanin, Alex] Australian Natl Univ, A Potanin Sch Comp, 108 North Rd, Acton, ACT 2601, Australia.
C3 Helmholtz Association; Karlsruhe Institute of Technology; Braunschweig
   University of Technology; Victoria University Wellington; Australian
   National University
RP Runge, T (corresponding author), Karlsruhe Inst Technol, Inst Informat Secur & Dependabil KASTEL, D-576131 Karlsruhe, Germany.; Runge, T (corresponding author), TU Braunschweig, Inst Software Engn & Automot Informat, Braunschweig, Germany.
EM tobias.runge@kit.edu; marco.servetto@ecs.vuw.ac.nz;
   alex.potanin@anu.edu.au; ina.schaefer@kit.edu
OI Runge, Tobias/0000-0002-9154-7743; Servetto, Marco/0000-0003-1458-2868;
   Potanin, Alex/0000-0002-4242-2725; Schaefer, Ina/0000-0002-7153-761X
FU Engineering Secure Systems of the Helmholtz Association (HGF); KASTEL
   Security Research Labs [46.23.03]
FX This work was supported by funding from the topic Engineering Secure
   Systems of the Helmholtz Association (HGF) and by KASTEL Security
   Research Labs (46.23.03).
CR Ahrendt W., 2016, Lecture notes in computer science, V10001, DOI DOI 10.1007/978-3-319-49812-6
   Amtoft T, 2006, ACM SIGPLAN NOTICES, V41, P91, DOI 10.1145/1111320.1111046
   Amtoft T, 2004, LECT NOTES COMPUT SC, V3148, P100
   Amtoft T, 2008, LECT NOTES COMPUT SC, V5014, P229, DOI 10.1007/978-3-540-68237-0_17
   Andreae C, 2006, ACM SIGPLAN NOTICES, V41, P57, DOI 10.1145/1167515.1167479
   Andrews G. R., 1980, ACM Transactions on Programming Languages and Systems, V2, P56, DOI 10.1145/357084.357088
   [Anonymous], 2003, P 1 APPSEM 2 WORKSHO
   [Anonymous], 2023, ACM T PROGR LANG SYS, V45
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Austin Thomas H., 2009, P ACM SIGPLAN 4 WORK, P113, DOI DOI 10.1145/1554339.1554353
   Banerjee A, 2002, P IEEE CSFW, P253
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Barthe G, 1999, LECT NOTES COMPUT SC, V1722, P53
   Barthe G, 2007, LECT NOTES COMPUT SC, V4421, P125
   Beckert Bernhard, 2013, LECT NOTES COMPUT SC, P19
   Bell D.E., 1976, Secure computer system: unified exposition and Multics interpretation
   Biba Kenneth J., 1977, INT CONS SEC COMP SY
   Bloch J., 2016, Effective Java
   Chong S., 2006, 19th IEEE Computer Security Foundations Workshop
   Darvas A, 2005, LECT NOTES COMPUT SC, V3450, P193
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Enck W, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2619091
   Ferraiuolo A, 2017, DES AUT CON, DOI 10.1145/3061639.3062316
   Giannini P, 2019, THEOR COMPUT SCI, V764, P145, DOI 10.1016/j.tcs.2018.09.001
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Graf J, 2013, SOFTWARE ENG 2013 WO, VP-215, P123
   Hall R. J., 2005, Automated Software Engineering, V12, P41, DOI 10.1023/B:AUSE.0000049208.84702.84
   Hamann T, 2018, LECT NOTES COMPUT SC, V11252, P437, DOI 10.1007/978-3-030-03638-6_27
   Hedin Daniel, 2014, P 29 ANN ACM S APPL, P1663
   Huang W, 2014, LECT NOTES COMPUT SC, V8411, P140
   Huang W, 2012, ACM SIGPLAN NOTICES, V47, P879, DOI 10.1145/2398857.2384680
   Hunt S, 2006, ACM SIGPLAN NOTICES, V41, P79, DOI 10.1145/1111320.1111045
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jian Xiang, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P18, DOI 10.1109/SP40001.2021.00002
   Küsters R, 2015, 2015 IEEE 28TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM CSF 2015, P305, DOI 10.1109/CSF.2015.28
   Li PX, 2017, P IEEE CSFW, P53, DOI 10.1109/CSF.2017.17
   Limin Jia, 2013, Computer Security - ESORICS 2013. 18th European Symposium on Research in Computer Security. Proceedings: LNCS 8134, P775, DOI 10.1007/978-3-642-40203-6_43
   Logrippo L, 2018, LECT NOTES COMPUT SC, V10723, P111, DOI 10.1007/978-3-319-75650-9_8
   LORTZ S., 2014, P 4 ACM WORKSHOP SEC, P93, DOI DOI 10.1145/2666620.2666631
   MEYER B, 1988, J SYST SOFTWARE, V8, P199, DOI 10.1016/0164-1212(88)90022-2
   Milanova Ana., 2013, FTFJP
   Miller M.S., 2006, Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control
   Mohr Martin, 2015, SOFTWARE ENG WORKSHO, P140
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Myers AC, 2000, ACM T SOFTW ENG METH, V9, P410, DOI 10.1145/363516.363526
   Nadkarni A, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P1119
   Nielson F., 1999, Principles of Program Analysis
   Papi Matthew M., 2008, P 2008 INT S SOFTW T, P201, DOI DOI 10.1145/1390630.1390656
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rajani Vineet, 2017, ACM SIGLOG News, V4, P6, DOI 10.1145/3051528.3051531
   Rajani V, 2018, P IEEE COMPUT SECUR, P233, DOI 10.1109/CSF.2018.00024
   Roy I, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P63, DOI 10.1145/1542476.1542484
   Runge Tobias, 2020, FORMALISE
   Russo A, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P186, DOI 10.1109/CSF.2010.20
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A, 2009, J COMPUT SECUR, V17, P517, DOI 10.3233/JCS-2009-0352
   Schaefer Ina, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Modeling. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11244), P502, DOI 10.1007/978-3-030-03418-4_30
   Stoughton Alley, 2014, P NINTHWORKSHOP PROG, P2
   Strecker Martin., 2003, Formal Analysis of an Information Flow Type System for MicroJava
   Sun Q, 2004, LECT NOTES COMPUT SC, V3148, P84
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Thüm T, 2013, ACM SIGPLAN NOTICES, V48, P11, DOI 10.1145/2480361.2371404
   Vassena M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290389
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P503, DOI 10.1145/2694344.2694372
   Zheng LT, 2003, P IEEE S SECUR PRIV, P236, DOI 10.1109/SECPRI.2003.1199340
NR 68
TC 1
Z9 1
U1 2
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2023
VL 45
IS 1
AR 3
DI 10.1145/3573270
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9V9QK
UT WOS:000948718900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Lennon-Bertrand, M
   Maillard, K
   Tabareau, N
   Tanter, É
AF Lennon-Bertrand, Meven
   Maillard, Kenji
   Tabareau, Nicolas
   Tanter, Eric
TI Gradualizing the Calculus of Inductive Constructions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Gradual typing; proof assistants; dependent types
AB We investigate gradual variations on the Calculus of Inductive Construction (CIC) for swifter prototyping with imprecise types and terms. We observe, with a no-go theorem, a crucial trade-off between graduality and the key properties of normalization and closure of universes under dependent product that CIC enjoys. Beyond this Fire Triangle of Graduality, we explore the gradualization of CIC with three different compromises, each relaxing one edge of the Fire Triangle. We develop a parametrized presentation of Gradual CIC (GCIC) that encompasses all three variations, and develop their metatheory. We first present a bidirectional elaboration of GCIC to a dependently-typed cast calculus, CastCIC, which elucidates the interrelation between typing, conversion, and the gradual guarantees. We use a syntactic model of CastCIC to inform the design of a safe, confluent reduction, and establish, when applicable, normalization. We study the static and dynamic gradual guarantees as well as the stronger notion of graduality with embedding-projection pairs formulated by New and Ahmed, using appropriate semantic model constructions. This work informs and paves the way towards the development of malleable proof assistants and dependently-typed programming languages.
C1 [Lennon-Bertrand, Meven; Maillard, Kenji; Tabareau, Nicolas] INRIA, Gallinette Project Team, Nantes, France.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Beauchef 851, Santiago, RM, Chile.
C3 Inria; Universidad de Chile
RP Lennon-Bertrand, M (corresponding author), INRIA, Gallinette Project Team, Nantes, France.
EM meven.lennon-bertrand@inria.fr; kenji.maillard@inria.fr;
   nicolas.tabareau@inria.fr; etanter@dcc.uchile.cl
RI Lennon-Bertrand, Meven/GPX-6043-2022; Tanter, Eric/A-7955-2008
OI Lennon-Bertrand, Meven/0000-0002-7079-8826; Tanter,
   Eric/0000-0002-7359-890X; tabareau, nicolas/0000-0003-3366-2273;
   Maillard, Kenji/0000-0001-5554-3203
FU ANID FONDECYT Regular Project [1190058]; Inria Equipe Associee GECO
FX This work is partially funded by ANID FONDECYT Regular Project 1190058,
   and Inria Equipe Associee GECO.
CR Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Abramsky S., 1995, Domain Theory, P1
   Altenkirch T., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P412, DOI 10.1109/LICS.1999.782636
   Altenkirch T, 2021, LECT NOTES COMPUT SC, V12650, P1, DOI 10.1007/978-3-030-71995-1_1
   Altenkirch T, 2019, LECT NOTES COMPUT SC, V11825, P155, DOI 10.1007/978-3-030-33636-3_7
   Altenkirch T, 2018, LECT NOTES COMPUT SC, V10803, P293, DOI 10.1007/978-3-319-89366-2_16
   [Anonymous], 1991, J FUNCT PROGRAM
   [Anonymous], 1984, Studies in Logic
   [Anonymous], 1999, The Coq Proof Assistant
   Asperti A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:18)2012
   Atkey R, 2014, ACM SIGPLAN NOTICES, V49, P503, DOI 10.1145/2535838.2535852
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Bidlingmaier Martin E., 2019, ARXIV191207339
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Chapman J, 2019, MATH STRUCT COMP SCI, V29, P67, DOI 10.1017/S0960129517000184
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Dagand PÉ, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000011
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   DOWEK G, 2001, HDB AUTOMATED REASON, V2, P1009, DOI DOI 10.1016/B978-044450813-3/50018-7
   Dybjer P, 2003, ANN PURE APPL LOGIC, V124, P1, DOI 10.1016/S0168-0072(02)00096-9
   Ehrhard T., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P264, DOI 10.1109/LICS.1988.5125
   Eisenberg Richard A., 2016, ARXIV161007978
   Eremondi J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341692
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Forsberg Fredrik Nordvall, 2013, THESIS SWANSEA U UK
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia Ronald, 2020, P 1 ACM SIGPLANWORKS
   Ghani N, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:13)2015
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Giménez E, 1998, LECT NOTES COMPUT SC, V1443, P397, DOI 10.1007/BFb0055070
   Goguen H, 2005, ACM SIGPLAN NOTICES, V40, P75, DOI 10.1145/1047659.1040312
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   HARPER R, 1991, THEOR COMPUT SCI, V89, P107, DOI 10.1016/0304-3975(90)90108-T
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Hofmann M, 1996, LECT NOTES COMPUT SC, V1158, P153
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Kaposi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290315
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Lennon-Bertrand Meven, 2021, 12 INT C INTERACTIVE, V193, DOI [10.4230/LIPIcs.ITP.2021.24, DOI 10.4230/LIPICS.ITP.2021.24]
   Lennon-Bertrand Meven, 2020, US
   Levy Paul Blain, 2004, Call-By-Push-Value: A Functional/Imperative Synthesis
   Licata DR, 2011, ELECTRON NOTES THEOR, V276, P263, DOI 10.1016/j.entcs.2011.09.026
   Mac Lane S., 1992, SHEAVES GEOMETRY LOG
   Mahboubi Assia, 2008, MATH COMPONENTS
   Martin-Lof P., 1996, Nordic J. Philosophical Logic, V1, P11
   Martin-Lof P., 1984, Intuitionistic type theory
   Martin-Lof Per, 1975, STUDIES LOGIC FDN MA, V80, P73
   McBride C, 2010, WGP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P1
   McBride Conor, 1999, PhD thesis
   McBride Conor, 2018, BASICS BIDIRECTIONAL
   McBride Conor, 2019, P 25 INT C TYPES PRO
   New MS, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236768
   New MS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290328
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   New MS, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:7)2020
   Nguyen PC, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P845, DOI 10.1145/3314221.3314643
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   North PR, 2019, ELECTRON NOTES THEOR, V347, P223, DOI 10.1016/j.entcs.2019.09.012
   Osera Peter-Michael., PLPV 12 P 6 WORKSHOP, DOI [DOI 10.1145/2103776.2103779, 10.1145/2103776.2103779.]
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   PALMGREN E, 1990, ANN PURE APPL LOGIC, V48, P135, DOI 10.1016/0168-0072(90)90044-3
   Palmgren E., 1998, Twenty Five Years of Constructive Type Theory, P191, DOI [10.1093/oso/9780198501275.003.0012, DOI 10.1093/OSO/9780198501275.003.0012]
   Paulin-Mohring C., 2015, ALL PROOFS PROOFS AL
   Pédrot PM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371126
   Pédrot PM, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341712
   Pédrot PM, 2017, IEEE S LOG, DOI 10.1109/LICS.2017.8005113
   Pedrot Pierre-Marie, 2018, LECT NOTES COMPUTER, V10801, P245, DOI [10.1007/978-3-319-89884-1_9, DOI 10.1007/978-3-319-89884-1_9]
   Schwerter FB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434342
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Setzer A, 2000, ARCH MATH LOGIC, V39, P155, DOI 10.1007/s001530050140
   Shulman Michael, 2011, INTERVAL TYPE IMPLIE
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LEIBNIZ INT P INFORM, V32, P274
   Smyth M. B., 1977, 18th Annual Symposium on Foundations of Computer Science, P13, DOI 10.1109/SFCS.1977.30
   Sozeau M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371076
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   TAKAHASHI M, 1995, INFORM COMPUT, V118, P120, DOI 10.1006/inco.1995.1057
   Tanter É, 2016, ACM SIGPLAN NOTICES, V51, P26, DOI [10.1145/2816707.2816710, 10.1145/2936313.2816710]
   Thiemann P, 2014, LECT NOTES COMPUT SC, V8410, P47
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Toro M, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102496
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wand M., 1979, Theoretical Computer Science, V8, P13, DOI 10.1016/0304-3975(79)90053-7
   Winterhalter T, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P91, DOI 10.1145/3293880.3294095
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Ziliani B, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796817000028
NR 100
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2022
VL 44
IS 2
AR 7
DI 10.1145/3495528
PG 82
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3B6GO
UT WOS:000828037100002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Gordon, CS
AF Gordon, Colin S.
TI Polymorphic Iterable Sequential Effect Systems
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Type systems; effect systems; quantales; polymorphism
ID INFERENCE; ALGEBRA
AB Effect systems are lightweight extensions to type systems that can verify a wide range of important properties with modest developer burden. But our general understanding of effect systems is limited primarily to systems where the order of effects is irrelevant. Understanding such systems in terms of a semilattice of effects grounds understanding of the essential issues and provides guidance when designing new effect systems. By contrast, sequential effect systems-where the order of effects is important-lack an established algebraic structure on effects.
   We present an abstract polymorphic effect system parameterized by an effect quantale-an algebraic structure with well-defined properties that can model the effects of a range of existing sequential effect systems. We define effect quantales, derive useful properties, and show how they cleanly model a variety of known sequential effect systems.
   We show that for most effect quantales, there is an induced notion of iterating a sequential effect; that for systems we consider the derived iteration agrees with the manually designed iteration operators in prior work; and that this induced notion of iteration is as precise as possible when defined. We also position effect quantales with respect to work on categorical semantics for sequential effect systems, clarifying the distinctions between these systems and our own in the course of giving a thorough survey of these frameworks. Our derived iteration construct should generalize to these semantic structures, addressing limitations of that work. Finally, we consider the relationship between sequential effects and Kleene Algebras, where the latter may be used as instances of the former.
C1 [Gordon, Colin S.] Drexel Univ, Philadelphia, PA 19104 USA.
   [Gordon, Colin S.] 3675 Market St,Suite 1100, Philadelphia, PA 19104 USA.
C3 Drexel University
RP Gordon, CS (corresponding author), Drexel Univ, Philadelphia, PA 19104 USA.; Gordon, CS (corresponding author), 3675 Market St,Suite 1100, Philadelphia, PA 19104 USA.
EM csgordon@drexel.edu
RI Gordon, Colin/AAM-3940-2020
OI Gordon, Colin/0000-0002-9012-4490
FU NSF [2007582]; Direct For Computer & Info Scie & Enginr; Division of
   Computing and Communication Foundations [2007582] Funding Source:
   National Science Foundation
FX Portions of this work were funded by NSF Grant #2007582.
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Abadi Martin, 1999, P EUR S PROGR MING L, DOI [10.1007/ 3- 540- 49099- X_ 7, DOI 10.1007/3-540-49099-X_7]
   Abadi Martin, P INT C CONC THEOR D, DOI [10.1007/ 3- 540- 48320- 9_ 21, DOI 10.1007/3-540-48320-9_21]
   Abel Andreas, 2010, PARTIALITY RECURSION
   Abramsky S., 1993, Mathematical Structures in Computer Science, V3, P161, DOI 10.1017/S0960129500000189
   Almeida J, 2009, T AM MATH SOC, V361, P1429
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   [Anonymous], 1999, TYPE EFFECT SYSTEMS
   [Anonymous], 2007, Studies in Logic and the Foundations of Mathematics
   [Anonymous], 2014, The Java Language Specification, Java SE
   [Anonymous], 1940, C PUBLICATIONS
   Aspinall David, 1994, P INT WORKSH COMP SC, P1
   Atkey R, 2013, ACM SIGPLAN NOTICES, V48, P197, DOI [10.1145/2544174.2500597, 10.1145/2500365.2500597]
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Barthe G, 2008, LECT NOTES COMPUT SC, V5213, P493, DOI 10.1007/978-3-540-87531-4_35
   Benton N, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P15, DOI 10.1145/1190315.1190320
   Birkedal L, 2001, THEOR COMPUT SCI, V258, P299, DOI 10.1016/S0304-3975(00)00025-6
   Birkedal L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P171, DOI 10.1145/237721.237771
   Birkedal L, 2013, IEEE S LOG, P213, DOI 10.1109/LICS.2013.27
   Blyth T.S., 2005, UNIVERSITEX
   Bocchino R.L., 2009, Proceedings of the 24th ACM SIGPLAN conference on Object oriented programming systems languages and applications, OOPSLA '09, P97, DOI [10.1145/1640089.1640097, DOI 10.1145/1640089.1640097]
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyapati C, 2001, ACM SIGPLAN NOTICES, V36, P56, DOI 10.1145/504311.504287
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Chandra Satish., 2016, Object-Oriented Programming Systems Languages and Applications (OOPSLA), DOI [DOI 10.1145/2983990.2984017, 10.1145/2983990. 2984017]
   Clifford A. H., 1961, The algebraic theory of semigroups, VI
   Cohen E, 2000, LECT NOTES COMPUT SC, V1837, P45
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P319, DOI [10.1145/2500365.2500587, 10.1145/2544174.2500587]
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Dietl Werner, 2013, P EUR C OBJ OR PROGR
   Dodds M, 2009, LECT NOTES COMPUT SC, V5502, P363, DOI 10.1007/978-3-642-00590-9_26
   Esik Zoltan, 2015, P INT C DEV LANG THE, P240
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Filinski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P483, DOI 10.1145/1706299.1706354
   Filinski Andrzej, 1999, P ACM SIGPLAN SIGACT
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/640136.604176
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Flanagan C, 2000, ACM SIGPLAN NOTICES, V35, P219, DOI 10.1145/358438.349328
   Fuchs Laszlo, 2011, INT SERIES MONOGRAPH, V28
   Fujii S, 2016, LECT NOTES COMPUT SC, V9634, P513, DOI 10.1007/978-3-662-49630-5_30
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Gordon Colin S, 2020, P 34 EUR C OBJ OR PR
   Gordon Colin S, 2012, P ACM SIGPLAN INT WO
   Gordon Colin S, 2017, P EUR C OBJ OR PROGR
   Gregg D., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P200
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   GROVE D, 1993, SIGPLAN NOTICES, V28, P90, DOI 10.1145/173262.155099
   Haller Philipp, 2012, P EUR C OBJ OR PROGR, DOI [10.1007/ 978- 3- 642- 31057- 7_ 13, DOI 10.1007/978-3-642-31057-7_13]
   Henglein F., 2005, ADV TOPICS TYPES PRO, P87
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hunt G., 2007, Operating Systems Review, V41, P341, DOI 10.1145/1272998.1273032
   Hunt Galen C., 2007, Operating Systems Review, V41, P37, DOI 10.1145/1243418.1243424
   Igarashi A, 2002, ACM SIGPLAN NOTICES, V37, P331, DOI 10.1145/565816.503303
   Ivaskovic A., FSCD, V167, p15:1, DOI DOI 10.4230/LIPICS.FSCD.2020.15
   Jones MP, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371108
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Kawaguchi Ming, 2012, PLDI, DOI DOI 10.1145/2254064.2254071
   Koskinen E, 2014, IEEE S LOG, DOI 10.1145/2603088.2603138
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Laurence MR, 2011, LECT NOTES COMPUT SC, V6663, P248, DOI 10.1007/978-3-642-21070-9_19
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Maher BA, 2006, INT SYMP MICROARCH, P65
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Mogelberg Rasmus Ejlers, 2014, CSL LICS, P1
   Moore EH, 1902, T AM MATH SOC, V3, P485, DOI 10.2307/1986471
   Mulvey C. J., 1986, SUPPLEMENTO RENDICON, V12, P99
   Mulvey C.J., 1992, Canadian Mathematical Society Conference Proceedings, V13, P345
   Mycroft A, 2016, LECT NOTES COMPUT SC, V9560, P1, DOI 10.1007/978-3-319-27810-0_1
   Nielson F., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P493
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Odersky Martin, 2012, EPFLREPORT175546
   Odersky Martin, 2012, P 19 INT WORKSH FDN
   Orchard D, 2016, ACM SIGPLAN NOTICES, V51, P568, DOI 10.1145/2914770.2837634
   Pedrot Pierre-Marie, 2019, P ACM PROGR LANG, P58
   Pottier F, 1999, ACM SIGPLAN NOTICES, V34, P228, DOI 10.1145/291251.289448
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Rock M, 2004, LECT NOTES COMPUT SC, V3149, P328
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Saraswat Vijay A., 1991, P 18 ACM SIGPLANSIGA, P333, DOI DOI 10.1145/99583.99627
   Skalka Christian, 2008, Higher-Order and Symbolic Computation, V21, P239, DOI 10.1007/s10990-008-9032-6
   Skalka C, 2008, J FUNCT PROGRAM, V18, P179, DOI 10.1017/S0956796807006466
   Skalka C, 2020, P IEEE COMPUT SECUR, P139, DOI 10.1109/CSF49147.2020.00018
   Smirnov A., 2008, J MATH SCI, V151, P3032, DOI DOI 10.1007/S10958-008-9013-7
   Suenaga K, 2008, LECT NOTES COMPUT SC, V5356, P155
   Sunshine J, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P713
   Swamy N, 2011, ACM SIGPLAN NOTICES, V46, P266, DOI 10.1145/2034574.2034811
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Tate Ross, 2013, 40 ANN ACM S PRINC P, DOI [DOI 10.1145/2480359.2429074, 10.1145/2429069.2429074, DOI 10.1145/2429069.2429074]
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte Mads, 1994, P 21 ACM SIGPLAN SIG, P188, DOI DOI 10.1145/174675.177855
   Toro M, 2015, ACM SIGPLAN NOTICES, V50, P935, DOI [10.1145/2814270.2814315, 10.1145/2858965.2814315]
   van Dooren M, 2005, ACM SIGPLAN NOTICES, V40, P455, DOI 10.1145/1103845.1094847
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   YETTER DN, 1990, J SYMBOLIC LOGIC, V55, P41, DOI 10.2307/2274953
NR 106
TC 5
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2021
VL 43
IS 1
AR 4
DI 10.1145/3450272
PG 79
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RW3AR
UT WOS:000646399300004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Cogumbreiro, T
   Hu, R
   Martins, F
   Yoshida, N
AF Cogumbreiro, Tiago
   Hu, Raymond
   Martins, Francisco
   Yoshida, Nobuko
TI Dynamic Deadlock Verification for General Barrier Synchronisation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Barrier synchronisation; phasers; deadlock detection; deadlock
   avoidance; X10; Java
ID SEMANTICS; CLOCKS; TIME
AB We present Armus, a verification tool for dynamically detecting or avoiding barrier deadlocks. The core design of Armus is based on phasers, a generalisation of barriers that supports split-phase synchronisation, dynamic membership, and optional-waits. This allows Armus to handle the key barrier synchronisation patterns found in modern languages and libraries. We implement Armus for X10 and Java, giving the first sound and complete barrier deadlock verification tools in these settings.
   Armus introduces a novel event-based graph model of barrier concurrency constraints that distinguishes task-event and event-task dependencies. Decoupling these two kinds of dependencies facilitates the verification of distributed barriers with dynamic membership, a challenging feature of X10. Further, our base graph representation can be dynamically switched between a task-to-task model, Wait-for Graph (WFG), and an event-to-event model, State Graph (SG), to improve the scalability of the analysis.
   Formally, we show that the verification is sound and complete with respect to the occurrence of deadlock in our core phaser language, and that switching graph representations preserves the soundness and completeness properties. These results are machine checked with the Coq proof assistant. Practically, we evaluate the runtime overhead of our implementations using three benchmark suites in local and distributed scenarios. Regarding deadlock detection, distributed scenarios show negligible overheads and local scenarios show overheads below 1.15x. Deadlock avoidance is more demanding, and highlights the potential gains from dynamic graph selection. In one benchmark scenario, the runtime overheads vary from 1.8x for dynamic selection, 2.6x for SG-static selection, and 5.9x for WFG-static selection.
C1 [Cogumbreiro, Tiago] Rice Univ, Houston, TX 77251 USA.
   [Hu, Raymond; Yoshida, Nobuko] Imperial Coll London, Dept Comp, London SW7 2AZ, England.
   [Martins, Francisco] Univ Lisbon, LASIGE, Fac Ciencias, Lisbon, Portugal.
   [Martins, Francisco] Univ Azores, Fac Sci & Technol, Rua Mae Deus, P-9500321 Ponta Delgada, Portugal.
   [Cogumbreiro, Tiago] Univ Massachusetts, Comp Sci Dept, 100 William T Morrissey Blvd, Boston, MA 02125 USA.
C3 Rice University; Imperial College London; Universidade de Lisboa;
   Universidade dos Acores; University of Massachusetts System; University
   of Massachusetts Boston
RP Cogumbreiro, T (corresponding author), Rice Univ, Houston, TX 77251 USA.; Cogumbreiro, T (corresponding author), Univ Massachusetts, Comp Sci Dept, 100 William T Morrissey Blvd, Boston, MA 02125 USA.
EM tiago.cogumbreiro@umb.edu; raymond.hu@imperial.ac.uk; fmartins@acm.org;
   n.yoshida@imperial.ac.uk
RI Martins, Francisco/JOK-2764-2023; Yoshida, Nobuko/AAL-6082-2020;
   Martins, Francisco/JOK-9378-2023; Martins, Francisco/GQY-8135-2022;
   Martins, Francisco/M-1767-2015
OI Yoshida, Nobuko/0000-0002-3925-8557; Cogumbreiro,
   Tiago/0000-0002-3209-9258; Martins, Francisco/0000-0002-2379-7257; Hu,
   Raymond/0000-0003-4361-6772
FU EPSRC [EP/K034413/1, EP/K011715/1, EP/L00058X/1, EP/N027833/1,
   EP/N028201/1]; EU FP7 [612985]; National Science Foundation [1302570];
   FCT through LASIGE Research Unit [UID/CEC/00408/2013]; EPSRC
   [EP/N027833/1, EP/K034413/1, EP/K011715/1] Funding Source: UKRI; Direct
   For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [1302570] Funding Source: National Science
   Foundation
FX The work is partially supported by EPSRC EP/K034413/1, EP/K011715/1,
   EP/L00058X/1, EP/N027833/1, and EP/N028201/1; and by EU FP7 612985
   (UPSCALE). Tiago Cogumbreiro's work on this article was supported in
   part by the National Science Foundation under Collaborative Grant No.
   1302570. Francisco Martins' work on this article was partially supported
   by FCT funding through LASIGE Research Unit, ref. UID/CEC/00408/2013.
CR Agarwal S, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P183, DOI 10.1145/1229428.1229471
   Atkins Daniel, 2013, P 36 AUSTR COMP SCI, V135, P87
   Bader DA, 2005, LECT NOTES COMPUT SC, V3769, P465
   Bang-Jensen J, 2009, SPRINGER MONOGR MATH, P1, DOI 10.1007/978-1-84800-998-1_1
   BELIK F, 1990, IEEE T COMPUT, V39, P882, DOI 10.1109/12.55690
   Boudol G, 2009, LECT NOTES COMPUT SC, V5684, P140, DOI 10.1007/978-3-642-03466-4_9
   Cai Y, 2014, IEEE T SOFTWARE ENG, V40, P266, DOI 10.1109/TSE.2014.2301725
   Cave V., 2011, P 9 INT C PRINCIPLES, P51, DOI [10.1145/2093157.2093165, DOI 10.1145/2093157.2093165]
   Chakrabarti S, 1996, ACM SIGPLAN NOTICES, V31, P68, DOI 10.1145/249069.231391
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Choi SE, 1997, PROC INT CONF PARAL, P218, DOI 10.1109/ICPP.1997.622647
   Coffman E. G.  Jr., 1971, Computing Surveys, V3, P67, DOI 10.1145/356586.356588
   Cogumbreiro T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3143359
   Cogumbreiro T, 2017, J LOG ALGEBR METHODS, V90, P50, DOI 10.1016/j.jlamp.2017.02.006
   Cogumbreiro T, 2015, ACM SIGPLAN NOTICES, V50, P150, DOI [10.1145/2688500.2688519, 10.1145/2858788.2688519]
   Cogumbreiro T, 2013, LECT NOTES COMPUT SC, V7890, P31, DOI 10.1007/978-3-642-38493-6_3
   COPPERSMITH D, 1990, J SYMB COMPUT, V9, P251, DOI 10.1016/S0747-7171(08)80013-2
   Crafa S, 2014, LECT NOTES COMPUT SC, V8586, P670
   Deitz  Steve, 2006, PARALLEL PROGRAMMING
   Demetrescu C, 2005, J ACM, V52, P147, DOI 10.1145/1059513.1059514
   Deshmukh JV, 2011, AUTOMAT SOFTW ENG, V18, P325, DOI 10.1007/s10515-011-0085-0
   Dijkstra E. W., 1965, TECHNICAL REPORT
   Dongarra J., 2006, P SPEC BENCHM WORKSH
   Eslamimehr M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P353, DOI 10.1145/2635868.2635918
   Frumkin Michael A., 2003, IPDPS, DOI [10.1109/IPDPS.2003.1213267, DOI 10.1109/IPDPS.2003.1213267]
   Ganjei Z, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P68, DOI 10.23919/FMCAD.2017.8102243
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Gerakios  Prodromos, 2011, PLOS, P1, DOI [10.1145/2039239.2039247, DOI 10.1145/2039239.2039247]
   Gligoric M., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P11, DOI 10.1109/ICST.2012.81
   Gupta R., 1989, ASPLOS-III Proceedings. Third International Conference on Architectural Support for Programming Languages and Operating Systems, P54, DOI 10.1145/70082.68187
   Hilbrich T, 2013, INT CONF HIGH PERFOR, DOI 10.1145/2503210.2503237
   Hilbrich T, 2011, LECT NOTES COMPUT SC, V6960, P19, DOI 10.1007/978-3-642-24449-0_5
   Hilbrich T, 2009, ICS'09: PROCEEDINGS OF THE 2009 ACM SIGARCH INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P296, DOI 10.1145/1542275.1542319
   Hilbrich Tobias., 2013, Proceedings of EuroMPI'13, P129, DOI [10.1145/2488551.2488570, DOI 10.1145/2488551.2488570]
   Hilbrich Tobias., 2012, Proceedings of SC'12, P1, DOI [10.1109/SC.2012.79, DOI 10.1109/SC.2012.79]
   Holt R. C., 1972, Computing Surveys, V4, P179, DOI 10.1145/356603.356607
   Imam S, 2014, LECT NOTES COMPUT SC, V8586, P618, DOI 10.1007/978-3-662-44202-9_25
   Jain K, 2005, LECT NOTES COMPUT SC, V3580, P853
   Jung I, 2001, INT J PARALLEL PROG, V29, P607, DOI 10.1023/A:1013153020460
   Kamil A, 2010, LECT NOTES COMPUT SC, V5898, P368, DOI 10.1007/978-3-642-13374-9_25
   KNAPP E, 1987, COMPUT SURV, V19, P303, DOI 10.1145/45075.46163
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Le DK, 2013, LECT NOTES COMPUT SC, V8144, P231, DOI 10.1007/978-3-642-41202-8_16
   Lee JK, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P25, DOI 10.1145/1693453.1693459
   Leijen D, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P227
   Li P, 2010, SPAA '10: PROCEEDINGS OF THE TWENTY-SECOND ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P243
   MINOURA T, 1982, J ACM, V29, P1023, DOI 10.1145/322344.322351
   Munro I., 1971, Information Processing Letters, V1, P56, DOI 10.1016/0020-0190(71)90006-8
   Murthy K, 2016, LECT NOTES COMPUT SC, V9833, P405, DOI 10.1007/978-3-319-43659-3_30
   Navabi A, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P23, DOI 10.1145/1345206.1345212
   Nir-Buchbinder Y, 2008, LECT NOTES COMPUT SC, V5289, P104
   Nonaka Y, 2001, APSEC 2001: EIGHTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P45, DOI 10.1109/APSEC.2001.991458
   O'Keefe MatthewT., 1990, Proceedings of ICPP'90, P43
   Pop A, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400712
   Pyla HK, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P75, DOI 10.1145/1854273.1854288
   Reveliotis SA, 1997, IEEE T AUTOMAT CONTR, V42, P1344, DOI 10.1109/9.633824
   Roy Indranil., 2013, Proceedings of PGAS'13, P2
   Samak M, 2014, ACM SIGPLAN NOTICES, V49, P29, DOI [10.1145/2692916.2555262, 10.1145/2555243.2555262]
   Saraswat V, 2005, LECT NOTES COMPUT SC, V3653, P353, DOI 10.1007/11539452_28
   Sharma R, 2015, ACM SIGPLAN NOTICES, V50, P88, DOI [10.1145/2813885.2737962, 10.1145/2737924.273962]
   Shih  Chia, 1990, TECHNICAL REPORT
   Shirako J, 2008, ICS'08: PROCEEDINGS OF THE 2008 ACM INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P277
   Shirako J., 2009, P 2009 IEEE INT S PA, P1, DOI [10.1109/IPDPS.2009.5161071, DOI 10.1109/IPDPS.2009.5161071]
   Shirako  Jun, 2011, X10 WORKSH
   Smith L. A., 2001, P 2001 ACMIEEE C SUP, P8, DOI [10.1145/582034.582042, DOI 10.1145/582034.582042]
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Turbak F, 1996, ACM SIGPLAN NOTICES, V31, P157, DOI 10.1145/232629.232645
   Vasudevan N, 2009, LECT NOTES COMPUT SC, V5501, P48, DOI 10.1007/978-3-642-00722-4_5
   Vo  Anh, 2011, THESIS
   Wang Yin, 2008, 8 USENIX S OP SYST D, P281
   Wei Haitao., 2012, Proceedings of the 2012 ACM SIGPLAN X10 Workshop, P1, DOI DOI 10.1145/2246056.2246057
   Welc A, 2005, ACM SIGPLAN NOTICES, V40, P439, DOI 10.1145/1103845.1094845
   Zhang Y, 2008, LECT NOTES COMPUT SC, V5234, P95, DOI 10.1007/978-3-540-85261-2_7
   Zhu YC, 1998, ACM SIGPLAN NOTICES, V33, P199, DOI 10.1145/277652.277723
NR 74
TC 2
Z9 3
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2019
VL 41
IS 1
AR 1
DI 10.1145/3229060
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HN7NB
UT WOS:000460376400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Porter, DE
   Bond, MD
   Roy, I
   McKinley, KS
   Witchel, E
AF Porter, Donald E.
   Bond, Michael D.
   Roy, Indrajit
   McKinley, Kathryn S.
   Witchel, Emmett
TI Practical Fine-Grained Information Flow Control Using Laminar
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Performance; Security; Information flow control; Java virtual
   machine; operating systems; security method
AB Decentralized Information Flow Control (DIFC) is a promising model for writing programs with powerful, end-to-end security guarantees. Current DIFC systems that run on commodity hardware can be broadly categorized into two types: language-level and operating system-level DIFC. Language solutions provide no guarantees against security violations on system resources such as files and sockets. Operating system solutions mediate accesses to system resources but are either inefficient or imprecise at monitoring the flow of information through fine-grained program data structures. This article describes Laminar, the first system to implement DIFC using a unified set of abstractions for OS resources and heap-allocated objects. Programmers express security policies by labeling data with secrecy and integrity labels and access the labeled data in security methods. Laminar enforces the security policies specified by the labels at runtime. Laminar is implemented using amodified Java virtualmachine and a new Linux security module. This article shows that security methods ease incremental deployment and limit dynamic security checks by retrofitting DIFC policies on four application case studies. Replacing the applications' ad hoc security policies changes less than 10% of the code and incurs performance overheads from 5% to 56%. Compared to prior DIFC systems, Laminar supports a more general class of multithreaded DIFC programs efficiently and integrates language and OS abstractions.
C1 [Porter, Donald E.] SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
   [Bond, Michael D.] Ohio State Univ, Dept Comp Sci & Engn, Dresse Labs 395, Columbus, OH 43210 USA.
   [Roy, Indrajit] Hewlett Packard Labs, Palo Alto, CA 94304 USA.
   [McKinley, Kathryn S.] Microsoft Res, Redmond, WA 98052 USA.
   [Witchel, Emmett] Univ Texas Austin, Dept Comp Sci, Austin, TX 78712 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Stony Brook; University System of Ohio; Ohio State University;
   Hewlett-Packard; Microsoft; University of Texas System; University of
   Texas Austin
RP Porter, DE (corresponding author), SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
EM porter@cs.stonybrook.edu; mikebond@cse.ohio-state.edu; indrajitr@hp.com;
   mckinley@microsoft.com; witchel@cs.utexas.edu
OI Bond, Michael/0000-0002-8971-4944
FU NSF [CAREER-0644205, CNS-0905602, CAREER CNS-1149229, CNS-1161541,
   CNS-1228839, CNS-1228843, CAREER-1253703, CSR-1218695, SIIF-0910818, NIH
   LM011028-01]; Office of the Vice President for Research at Stony Brook
   University; Direct For Computer & Info Scie & Enginr; Division Of
   Computer and Network Systems [1218695, 1149229, 1228843, 1228839,
   1161541] Funding Source: National Science Foundation; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [0910818] Funding Source: National Science Foundation
FX This research was supported in part by NSF grants CAREER-0644205,
   CNS-0905602, CAREER CNS-1149229, CNS-1161541, CNS-1228839, CNS-1228843,
   CAREER-1253703, CSR-1218695, SIIF-0910818, NIH LM011028-01, and the
   Office of the Vice President for Research at Stony Brook University.
CR Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   [Anonymous], 1984, Capability-Based Computer Systems
   [Anonymous], 2003, P 1 APPSEM 2 WORKSHO
   [Anonymous], 2007, ACM SIGOPS OPERATING
   [Anonymous], 1985, 520028STD DOD
   Arden O, 2012, P IEEE S SECUR PRIV, P191, DOI 10.1109/SP.2012.22
   Askarov A, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P297, DOI 10.1145/1866307.1866341
   Bell D. E., 1973, MTR2547
   BIBA KJ, 1977, ESDTR76372 USAF EL S
   Birgisson A, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P223
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blackburn StephenM., 2004, Proceedings of the 4th International Symposium on Memory Management, ISMM '04, P143, DOI DOI 10.1145/1029873.1029891
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Chandra D, 2007, TWENTY-THIRD ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P463, DOI 10.1109/ACSAC.2007.37
   Chong S, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P241, DOI 10.1109/CSFW.2005.19
   Chong Stephen, 2006, 19 IEEE COMP SEC FDN, P242
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Efstathopoulos P., 2008, THESIS U CALIFORNIA
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Hardy N., 1988, Operating Systems Review, V22, P36, DOI 10.1145/54289.871709
   Hicks B, 2007, USENIX ASSOCIATION PROCEEDINGS OF THE 2007 USENIX ANNUAL TECHNICAL CONFERENCE, P205
   Huisman Marieke, 2006, CSFW 2006, P3, DOI DOI 10.1109/CSFW.2006.6
   KARGER PA, 1991, IEEE T SOFTWARE ENG, V17, P1147, DOI 10.1109/32.106971
   Kashyap V, 2011, P IEEE S SECUR PRIV, P413, DOI 10.1109/SP.2011.19
   LAMPSON BW, 1973, COMMUN ACM, V16, P613, DOI 10.1145/362375.362389
   Le Guernic G, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P218, DOI 10.1109/CSF.2007.10
   Liu J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P321
   Loscocco P, 2001, USENIX ASSOCIATION PROCEEDINGS OF THE FREENIX TRACK, P29
   Manson J., 2005, JAVA MEMORY MODEL
   McVoy L, 1996, PROCEEDINGS OF THE USENIX 1996 ANNUAL TECHNICAL CONFERENCE, P279
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Myers A. C., 1997, Operating Systems Review, V31, P129, DOI 10.1145/269005.266669
   Myers AC, 2004, P IEEE CSFW, P172, DOI 10.1109/CSFW.2004.1310740
   Myers Andrew C, 2001, Jif: Java information flow. Software release
   Nair S. K., 2009, THESIS VRIJE U AMSTE
   Naira SK, 2008, ELECTRON NOTES THEOR, V197, P3, DOI 10.1016/j.entcs.2007.10.010
   Ni Y, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P195
   Ouyang J., 2013, P 5 USENIX WORKSH HO
   Pugh W., 2005, MAY 12 DESCRIPTION F
   Roy I, 2009, ACM SIGPLAN NOTICES, V44, P63, DOI 10.1145/1543135.1542484
   Russo A, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P186, DOI 10.1109/CSF.2010.20
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Shapiro JS, 1999, OPERATING SYSTEMS REVIEW, VOL 33, NO 5, DECEMBER 1999, P170, DOI 10.1145/319344.319163
   Shroff P, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P203, DOI 10.1109/CSF.2007.20
   Standard Performance Evaluation Corporation, 2001, SPECJBB200O DOC REL
   Tiwari Mohit, 2009, Proceedings of the 2009 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 2009), P493, DOI 10.1145/1669112.1669174
   Tiwari M, 2009, ACM SIGPLAN NOTICES, V44, P109, DOI 10.1145/1508284.1508258
   VACHHARAJANI N, 2004, P 37 ANN IEEE ACM IN
   Vandebogart S, 2007, ACM T COMPUT SYST, V25, DOI 10.1145/1314299.1314302
   Venkatakrishnan VN, 2006, LECT NOTES COMPUT SC, V4307, P332
   Volpano D., 1999, Journal of Computer Security, V7, P231
   Wright C, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE 11TH USENIX SECURITY SYMPOSIUM, P17
   Zdancewic S, 2003, P IEEE CSFW, P29, DOI 10.1109/CSFW.2003.1212703
   Zdancewic S, 2001, P IEEE CSFW, P15, DOI 10.1109/CSFW.2001.930133
   Zeldovich N., 2008, OSDI, V8, P225
   Zeldovich N, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P263
   Zeldovich Nickolai., 2008, P 5 USENIX S NETWORK, P293
   Zhang DF, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P563
   Zhang DF, 2012, ACM SIGPLAN NOTICES, V47, P99, DOI 10.1145/2345156.2254078
NR 60
TC 7
Z9 8
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2015
VL 37
IS 1
AR 4
DI 10.1145/2638548
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5AP
UT WOS:000348919700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Chen, S
   Erwig, M
   Walkingshaw, E
AF Chen, Sheng
   Erwig, Martin
   Walkingshaw, Eric
TI Extending Type Inference to Variational Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Variational lambda calculus; variational type
   inference; variational types
AB Through the use of conditional compilation and related tools, many software projects can be used to generate a huge number of related programs. The problem of typing such variational software is difficult. The brute-force strategy of generating all variants and typing each one individually is: (1) usually infeasible for efficiency reasons and (2) produces results that do not map well to the underlying variational program. Recent research has focused mainly on efficiency and addressed only the problem of type checking. In this work we tackle the more general problem of variational type inference and introduce variational types to represent the result of typing a variational program. We introduce the variational lambda calculus (VLC) as a formal foundation for research on typing variational programs. We define a type system for VLC in which VLC expressions are mapped to correspondingly variational types. We show that the type system is correct by proving that the typing of expressions is preserved over the process of variation elimination, which eventually results in a plain lambda calculus expression and its corresponding type. We identify a set of equivalence rules for variational types and prove that the type unification problem modulo these equivalence rules is unitary and decidable; we also present a sound and complete unification algorithm. Based on the unification algorithm, the variational type inference algorithm is an extension of algorithm W. We show that it is sound and complete and computes principal types. We also consider the extension of VLC with sum types, a necessary feature for supporting variational data types, and demonstrate that the previous theoretical results also hold under this extension. Finally, we characterize the complexity of variational type inference and demonstrate the efficiency gains over the brute-force strategy.
C1 [Chen, Sheng; Erwig, Martin; Walkingshaw, Eric] Oregon State Univ, Corvallis, OR 97331 USA.
C3 Oregon State University
RP Erwig, M (corresponding author), Oregon State Univ, Corvallis, OR 97331 USA.
EM erwig@eecs.oregonstate.edu
FU Air Force Office of Scientific Research [FA9550-09-1-0229]; National
   Science Foundation [CCF-0917092, CCF-1219165]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [1219165] Funding Source: National Science Foundation
FX This work is supported by the Air Force Office of Scientific Research
   under the grant FA9550-09-1-0229 and by the National Science Foundation
   under the grants CCF-0917092 and CCF-1219165.
CR Abrahams D, 2004, C++ template metaprogramming: concepts, tools, and techniques from Boost and beyond
   Anantharaman S, 2004, J AUTOM REASONING, V33, P1, DOI 10.1007/s10817-004-2279-7
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S., 2008, ACM T PROGRAM LANG S, V32, P19
   Apel S., 2013, P IEEE INT IN PRESS
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel S, 2010, AUTOMAT SOFTW ENG, V17, P251, DOI 10.1007/s10515-010-0066-8
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P101
   Austern MatthewH., 1998, Generic programming and the STL: Using and extending the C++ Standard Template Library
   Aversano L, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P83, DOI 10.1109/SCAM.2002.1134108
   Baader Franz, 2001, Handbook of Automated Reasoning, P445, DOI DOI 10.1016/B978-044450813-3/50010-2
   Baader Franz, 1998, TERM REWRITING ALL
   Balat V, 2004, ACM SIGPLAN NOTICES, V39, P64, DOI 10.1145/982962.964007
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Brabrand C., 2012, Proceedings of the 11th Annual International Conference on Aspect-oriented Software Development, AOSD '12, P13, DOI DOI 10.1145/2162049.2162052
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Chae W, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P307, DOI 10.1109/SPLC.2008.28
   Chen S., 2014, ACM SIGPLAN SIGACT S
   Chen S, 2012, ACM SIGPLAN NOTICES, V47, P29, DOI 10.1145/2398856.2364535
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Cordy M, 2012, PROC INT CONF SOFTW, P672, DOI 10.1109/ICSE.2012.6227150
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Das M, 2000, ACM SIGPLAN NOTICES, V35, P35, DOI 10.1145/358438.349309
   Delaware B, 2011, ACM SIGPLAN NOTICES, V46, P595, DOI 10.1145/2076021.2048113
   Delaware B, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P243, DOI 10.1145/1595696.1595733
   Delaware B, 2009, FOAL09: FOUNDATIONS OF ASPECT-ORIENTED LANGUAGES, P31
   Dezani-Ciancaglini M., 1997, Notre Dame Journal of Formal Logic, V38, P246, DOI 10.1305/ndjfl/1039724889
   Disenfeld C., 2012, PROC 11 INT C ASPECT, P107
   Dos Reis G, 2006, ACM SIGPLAN NOTICES, V41, P295, DOI 10.1145/1111320.1111064
   DOWNEY PJ, 1980, J ACM, V27, P758, DOI 10.1145/322217.322228
   Elrad T, 2001, COMMUN ACM, V44, P28
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Fahndrich M., 2006, GPCE 06 P 5 INT C GE, P275, DOI DOI 10.1145/1173706.1173748
   Flatt M., 2010, PLTTR20101 RACK
   Fogarty S., 2007, S PART EV SEM BAS PR, P112
   Garcia Ronald, 2008, THESIS INDIANA U
   Gazzillo P, 2012, ACM SIGPLAN NOTICES, V47, P323, DOI 10.1145/2345156.2254103
   GNU Project, 2009, The C Preprocessor
   Goldman M, 2010, FORM METHOD SYST DES, V37, P61, DOI 10.1007/s10703-010-0101-1
   Gregor D, 2006, ACM SIGPLAN NOTICES, V41, P291, DOI 10.1145/1167515.1167499
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Huang S.S., 2007, PROC 6 INT C ASPECT, P185
   Huang SS, 2008, ACM SIGPLAN NOTICES, V43, P79, DOI 10.1145/1379022.1375592
   Huang SS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890029
   Huang SS, 2005, LECT NOTES COMPUT SC, V3676, P309
   Järvi J, 2006, ACM SIGPLAN NOTICES, V41, P272, DOI 10.1145/1133255.1134014
   Johann P, 2008, ACM SIGPLAN NOTICES, V43, P297, DOI 10.1145/1328897.1328475
   Kästner C, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2211616.2211617
   Kästner C, 2011, ACM SIGPLAN NOTICES, V46, P805, DOI 10.1145/2076021.2048128
   Kästner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P311, DOI 10.1145/1368088.1368131
   Kagawa K., 2006, ACM SIGPLAN WORKSH H, P37
   Kang Kyo C, 1990, Technical Report
   KASTNER C, 2012, P ACM SIGPLAN INT C, V47, P773
   Kenner A., 2010, P 2 INT WORKSH FEAT, P25, DOI DOI 10.1145/1868688.1868693
   Kim C. H. P., 2008, INT C GEN PROGR COMP, P19
   Liebig J., 2012, MIP1212 U PASS DEP I
   Mezini M., 2004, Software Engineering Notes, V29, P127, DOI 10.1145/1041685.1029915
   Mezini M., 2003, P 2 INT C ASPECT ORI, P90
   Miao W., 2010, P INT C GEN PROGR CO, P167
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Paulin-Mohring C., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P328, DOI 10.1007/BFb0037116
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Reis G. D., 2005, SC22JTC1WG21 ISOIEC
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Shields M., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P289, DOI 10.1145/268946.268970
   Siek J, 2006, LECT NOTES COMPUT SC, V4067, P304
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Stroustrup B., 1994, The Design and Evolution of C++
   Sulzmann M, 2001, LECT NOTES COMPUT SC, V2024, P248
   Sulzmann M, 2008, J FUNCT PROGRAM, V18, P251, DOI 10.1017/S0956796807006569
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Garcia RAV, 2009, VIAL-VIGO INT J APPL, V6, P9
   Warth A, 2006, ACM SIGPLAN NOTICES, V41, P37, DOI 10.1145/1167515.1167477
NR 78
TC 26
Z9 27
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2014
VL 36
IS 1
AR 1
DI 10.1145/2518190
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AD8TE
UT WOS:000333537700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Lim, J
   Reps, T
AF Lim, Junghee
   Reps, Thomas
TI TSL: A System for Generating Abstract Interpreters and its Application
   to Machine-Code Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Security; Theory; Verification; Abstract
   interpretation; machine-code analysis; dynamic analysis; symbolic
   analysis; static analysis; dataflow analysis
ID STATIC ANALYZERS; VERIFICATION; SEMANTICS; PROGRAMS; GRAPH
AB This article describes the design and implementation of a system, called TSL (for Transformer Specification Language), that provides a systematic solution to the problem of creating retargetable tools for analyzing machine code. TSL is a tool generator-that is, a metatool-that automatically creates different abstract interpreters for machine-code instruction sets.
   The most challenging technical issue that we faced in designing TSL was how to automate the generation of the set of abstract transformers for a given abstract interpretation of a given instruction set. From a description of the concrete operational semantics of an instruction set, together with the datatypes and operations that define an abstract domain, TSL automatically creates the set of abstract transformers for the instructions of the instruction set. TSL advances the state-of-the-art in program analysis because it provides two dimensions of parameterizability: (i) a given analysis component can be retargeted to different instruction sets; (ii) multiple analysis components can be created automatically from a single specification of the concrete operational semantics of the language to be analyzed.
   TSL is an abstract-transformer-generator generator. The article describes the principles behind TSL, and discusses how one uses TSL to develop different abstract interpreters.
C1 [Lim, Junghee; Reps, Thomas] GrammaTech Inc, Ithaca, NY 14850 USA.
   [Reps, Thomas] Univ Wisconsin, Dept Comp Sci, Madison, WI 53703 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Reps, T (corresponding author), Univ Wisconsin, Dept Comp Sci, 1210 W Dayton St, Madison, WI 53703 USA.
EM junghee@grammatech.com; reps@cs.wisc.edu
FU NSF [CCF-0524051, CCF-0540955, CCF-0810053, CCF-0904371]; ONR
   [N00014-01-1-0708, N00014-01-1-0796, N00014-09-1-0510, N00014-09-1-0776,
   N00014-10-M-0251, N00014-11-C-0447]; ARL [W911NF-09-1-0413]; AFRL
   [FA8750-05-C-0179, FA8750-06-C-0249, FA9550-09-1-0279,
   FA8650-10-C-7088]; DARPA [HR0011-12-2-0012]; Symantec Research Labs
   Graduate Fellowship; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [0904371] Funding Source:
   National Science Foundation
FX The work was supported in part by NSF under grants CCF-0524051,
   CCF-0540955, CCF-0810053, and CCF-0904371, by ONR under grants
   N00014-01-1-0708, N00014-01-1-0796, N00014-09-1-0510, N00014-09-1-0776,
   N00014-10-M-0251, and N00014-11-C-0447, by ARL under grant
   W911NF-09-1-0413, by AFRL under grants FA8750-05-C-0179,
   FA8750-06-C-0249, FA9550-09-1-0279, and FA8650-10-C-7088, by DARPA under
   cooperative agreement HR0011-12-2-0012, by a donation from GrammaTech,
   Inc., and by a Symantec Research Labs Graduate Fellowship. Any opinions,
   findings, and conclusions or recommendations expressed in this
   publication are those of the authors, and do not necessarily reflect the
   views of the sponsoring companies or agencies.
CR Alt M., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P33
   Alur R, 2006, LECT NOTES COMPUT SC, V4036, P1
   [Anonymous], 1999, INT ARCH SOFTW DEV M
   [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   [Anonymous], ARMV7 A HOL
   [Anonymous], 2006, YICES SMT SOLVER
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   APRON, 2007, APRON NUM ABSTR DOM
   Assmann U, 2000, ACM T PROGR LANG SYS, V22, P4
   Balakrishnan G, 2005, LECT NOTES COMPUT SC, V3443, P250, DOI 10.1007/978-3-540-31985-6_19
   Balakrishnan G, 2004, LECT NOTES COMPUT SC, V2985, P5
   Balakrishnan G., 2007, THESIS U WISCONSIN M
   Balakrishnan G, 2007, LECT NOTES COMPUT SC, V4349, P1
   Balakrishnan G, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749612
   Beckman N., 2008, P INT S SOFTW TEST A
   Bouajjani A, 2003, ACM SIGPLAN NOTICES, V38, P62, DOI 10.1145/640128.604137
   Brauer J., 2012, SCI COMPUT IN PRESS, V77
   Brauer J., 2012, LOG METH COMPUT SCI, V8, P3
   Brumley D., 2011, P C COMP AID VER CAV
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Cok D., 2010, SAFETY NUMBERS
   Cook T. A., 1993, P DES AUT C DAC 93
   COOPER KD, 1988, SIGPLAN NOTICES, V23, P57, DOI 10.1145/960116.53996
   Cousot P, 2003, LECT NOTES COMPUT SC, V2772, P243
   Cousot P., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P12, DOI 10.1145/325694.325699
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   DAVIDSON JW, 1984, ACM T PROGR LANG SYS, V6, P505, DOI 10.1145/1780.1783
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Diefendorff Keith., 1994, IEEE Micro, V14, P30, DOI DOI 10.1109/MM.1994.363069
   Driscoll Evan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P665, DOI 10.1007/978-3-642-31424-7_47
   Dullien T., 2009, P CANSECWEST APPL SE
   Elder M., 2013, TR1777 U WISC COMP S
   Elder M, 2011, LECT NOTES COMPUT SC, V6887, P198, DOI 10.1007/978-3-642-23702-7_17
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fox Anthony, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P338, DOI 10.1007/978-3-642-32347-8_23
   Fox A, 2003, LECT NOTES COMPUT SC, V2758, P25
   Fox A, 2010, LECT NOTES COMPUT SC, V6172, P243, DOI 10.1007/978-3-642-14052-5_18
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gulavani B.S., 2006, P FSE ACM, P117, DOI DOI 10.1145/1181775.1181790
   Harcourt E., 1994, P INT C SIM HARDW DE
   Intel, 2013, INT 64 IA 32 ARCH SO, V2A
   Intel, 2013, INT 64 IA 32 ARCH SO, V2B
   Johnson StephenC., 1975, YACC YET ANOTHER COM, V32
   Jones N.D., 1986, POPL, P296, DOI DOI 10.1145/512644.512672
   Jones NeilD., 1995, HDB LOGIC COMPUTER S, V4, P527
   Junghee Lim, 2011, International Journal on Software Tools for Technology Transfer, V13, P61, DOI 10.1007/s10009-010-0158-6
   Kastner D., 2003, P 2 INT C GEN PROGR
   King A, 2010, LECT NOTES COMPUT SC, V5944, P197, DOI 10.1007/978-3-642-11319-2_16
   Kodumal J, 2005, LECT NOTES COMPUT SC, V3672, P218
   Lacey D., 2004, HIGHER ORDER SYMBOL, V17, P3
   Lal A, 2005, LECT NOTES COMPUT SC, V3576, P434
   Lal A, 2006, LECT NOTES COMPUT SC, V4144, P343, DOI 10.1007/11817963_32
   Lam P, 2011, CET US COMP INF WORK
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lev-Ami T, 2000, LECT NOTES COMPUT SC, V1824, P280
   Lim J., 2009, P 16 INT SPIN WORKSH
   Lim J., 2010, TR1668 U WISC COMP S
   Lim J, 2011, 1689 U WISC COMP SCI
   Lim J, 2008, LECT NOTES COMPUT SC, V4959, P36
   Linn C., 2003, P 10 ACM C COMP COMM, P290, DOI DOI 10.1145/948109.948149
   Magnusson P., 2011, UNDERSTANDING STACKS
   Malmkjaer K., 1993, THESIS KANSAS STATE
   Martignoni L, 2012, ASPLOS XVII: SEVENTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P337
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Miné A, 2002, LECT NOTES COMPUT SC, V2477, P117
   Mishra P, 2006, ACM T DES AUTOMAT EL, V11, P626, DOI 10.1145/1142980.1142985
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3444, P46
   Muller-Olm M., 2004, P ACM S PRINC PROGR
   MYCROFT A, 1986, LECT NOTES COMPUT SC, V217, P156
   Myreen MO, 2007, LECT NOTES COMPUT SC, V4767, P272
   NIELSON F, 1989, THEOR COMPUT SCI, V69, P117, DOI 10.1016/0304-3975(89)90091-1
   Nielson  Flemming, 1992, 2 LEVEL FUNCTIONAL L
   Pees S., 1999, Proceedings 1999 Design Automation Conference (Cat. No. 99CH36361), P933, DOI 10.1109/DAC.1999.782231
   Pettersson M., 1992, P 4 INT C COMP CONST, P258
   PLEBAN UF, 1988, LECT NOTES COMPUT SC, V298, P550
   Ramalingam G., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P119, DOI 10.1145/292540.292553
   Ramsey N, 1997, ACM T PROGR LANG SYS, V19, P492, DOI 10.1145/256167.256225
   Ramsey N., 1999, SPECIFYING INSTRUCTI
   Regehr J, 2004, ACM SIGPLAN NOTICES, V39, P133, DOI 10.1145/1037187.1024410
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Reps T., 2006, WORKSH PART EV SEM B
   Reps T., 2010, ACM T PROGR LANG SYS, V6, P32
   Reps T, 2010, LECT NOTES COMPUT SC, V6174, P41, DOI 10.1007/978-3-642-14295-6_6
   Scherpelz ER, 2007, ACM SIGPLAN NOTICES, V42, P135, DOI 10.1145/1273442.1250750
   Schmidt D. A., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P38, DOI 10.1145/268946.268950
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   SIEWIOREK DP, 1982, COMPUTER STRUCTURES
   Song D, 2008, LECT NOTES COMPUT SC, V5352, P1, DOI 10.1007/978-3-540-89862-7_1
   SOOT, 2012, SOOT JAV OPT FRAM
   STEFFEN B, 1991, LECT NOTES COMPUT SC, V526, P346
   STEFFEN B, 1993, SCI COMPUT PROGRAM, V21, P115, DOI 10.1016/0167-6423(93)90003-8
   Thakur Aditya, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P174, DOI 10.1007/978-3-642-31424-7_17
   Thakur A, 2012, LECT NOTES COMPUT SC, V7460, P111, DOI 10.1007/978-3-642-33125-1_10
   Thakur A, 2010, LECT NOTES COMPUT SC, V6174, P288, DOI 10.1007/978-3-642-14295-6_27
   TJIANG SWK, 1992, SIGPLAN NOTICES, V27, P82, DOI 10.1145/143103.143120
   Venkatesh G., 1992, T SOFTW ENG, V18, P4
   VENKATESH GA, 1989, SIGPLAN NOTICES, V24, P1, DOI 10.1145/74818.74819
   Wadler P., 1987, IMPLEMENTATION FUNCT, P78, DOI [DOI 10.1016/0141-9331(87)90510-2, 10.1016/0141-9331(87)90510-2]
   WALi, 2007, WALI WEIGHT AUT LIB
   Whaley J, 2005, LECT NOTES COMPUT SC, V3780, P97
   Wilhelm R., 1981, PROGRAM FLOW ANAL TH
   Wilson R., 1994, SIGPLAN NOTICES, V29, P12
   WPDS++, 2004, WPDS C LIB WEIGHT PU
   Yi K., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P246, DOI 10.1145/158511.158642
NR 108
TC 22
Z9 30
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2013
VL 35
IS 1
AR 4
DI 10.1145/2450136.2450139
PG 59
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 140CM
UT WOS:000318631900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Rossberg, A
   Dreyer, D
AF Rossberg, Andreas
   Dreyer, Derek
TI Mixin' Up the ML Module System
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Design; Theory; Type systems; ML modules; mixin modules;
   abstract data types; recursive modules; hierarchical composability
AB ML modules provide hierarchical namespace management, as well as fine-grained control over the propagation of type information, but they do not allow modules to be broken up into mutually recursive, separately compilable components. Mixin modules facilitate recursive linking of separately compiled components, but they are not hierarchically composable and typically do not support type abstraction. We synthesize the complementary advantages of these two mechanisms in a novel module system design we call MixML.
   A MixML module is like an ML structure in which some of the components are specified but not defined. In other words, it unifies the ML structure and signature languages into one. MixML seamlessly integrates hierarchical composition, translucent ML-style data abstraction, and mixin-style recursive linking. Moreover, the design of MixML is clean and minimalist; it emphasizes how all the salient, semantically interesting features of the ML module system (and several proposed extensions to it) can be understood simply as stylized uses of a small set of orthogonal underlying constructs, with mixin composition playing a central role.
   We provide a declarative type system for MixML, including two important extensions: higher-order modules, and modules as first-class values. We also present a sound and complete, three-pass type-checking algorithm for this system. The operational semantics of MixML is defined by an elaboration translation into an internal core language called LTG-namely, a polymorphic lambda calculus with single-assignment references and recursive type generativity-which employs a linear type and kind system to track definedness of term and type imports.
C1 [Rossberg, Andreas] Google Germany, D-80331 Munich, Germany.
   [Dreyer, Derek] Max Planck Inst Software Syst MPI SWS, D-66123 Saarbrucken, Germany.
C3 Google Incorporated; Max Planck Society
RP Rossberg, A (corresponding author), Google Germany, Dienerstr 12, D-80331 Munich, Germany.
EM rossberg@mpi-sws.org
CR Ahmed A., 2005, P INT C FUNCT PROGR
   Ahmed A., 2006, P EUR S PROGR ESOP 0
   Ancona D, 2002, J FUNCT PROGRAM, V12, P91, DOI 10.1017/S0956796801004257
   Ancona D., 1998, Mathematical Structures in Computer Science, V8, P401, DOI 10.1017/S0960129598002576
   Ancona D., 2003, P INT C AUT LANG PRO
   [Anonymous], THESIS U EDINBURGH
   [Anonymous], 1990, PROGRAMMING CONCEPTS
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1997, The Definition of Standard ML
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bracha G., 1992, P INT C COMP LANG IC
   Bracha G., 1990, P ANN ACM SIGPLAN C
   Bracha G., 2010, P EUR C OBJ OR PROGR
   Crary K., 1999, P ACM SIGPLAN C PRIN
   Cremet V., 2006, P INT S MATH FDN COM
   Dreyer D., 2007, P INT C FUNCT PROGR
   Dreyer D., 2005, THESIS CARNEGIE MELL
   Dreyer D., 2008, P INT C FUNCT PROGR
   Dreyer D., 2003, P ACM SIGPLAN SIGACT
   Dreyer D., 2007, P ACM SIGPLAN SIGACT
   Dreyer D, 2004, P ACM SIGPLAN SIGACT
   Dreyer D, 2007, J FUNCT PROGRAM, V17, P433, DOI 10.1017/S0956796807006429
   Duggan D, 2002, ACM T PROGR LANG SYS, V24, P711, DOI 10.1145/586088.586093
   DUGGAN D, 1996, P INT C FUNCT PROGR
   FLATT M, 1998, P ACM SIGPLAN C PROG
   Harper R, 2000, FOUNDAT COMPUT, P341
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harper R., 1994, P ACM SIGPLAN SIGACT
   Harper R., 1990, P ACM SIGPLAN SIGACT
   Harper R., 2011, PROGRAMMING IN PRESS
   Harper Robert., 2005, Advanced Topics in Types and Programming Languages, chapter Design Considerations for ML-Style Module Systems
   Hirschowitz T, 2005, ACM T PROGR LANG SYS, V27, P857, DOI 10.1145/1086642.1086644
   Im H., 2011, P ACM SIGPLAN C OBJ
   Jones M. P., 1996, P ACM SIGPLAN SIGACT
   JONES SP, 2003, J FUNCTIONAL PROGRAM, V13, P255
   Leroy X., 2000, Journal of Functional Programming, V10, P269, DOI 10.1017/S0956796800003683
   Leroy X, 1995, P ACM SIGPLAN SIGACT
   Leroy X., 2003, PROPOSAL RECURSIVE M
   Leroy X., 1994, P ACM SIGPLAN SIGACT
   MacQueen D., 1984, P ACM C LISP FUNCT P
   Mazurak K., 2010, P ACM SIGPLAN WORKSH
   Montagu B, 2009, ACM SIGPLAN NOTICES, V44, P354, DOI 10.1145/1594834.1480926
   Moon D.A., 1986, P ACM SIGPLAN C OBJ
   Nakata K., 2006, P INT C FUNCT PROGR
   Neis G, 2011, J FUNCT PROGRAM, V21, P497, DOI 10.1017/S0956796811000165
   Nystrom N., 2006, P ACM SIGPLAN C OBJ
   Nystrom N., 2004, P ACM SIGPLAN C OBJ
   Odersky M., 2005, P ACM SIGPLAN C OBJ
   Odersky M., 2003, P EUR C OBJ OR PROGR
   Owens S., 2006, P INT C FUNCT PROGR
   Pierce, 2005, ADV TOPICS TYPES PRO
   Ramsey N., 2005, P INT C FUNCT PROGR
   Rossberg A., 2008, MIXML PROJECT WEBSIT
   Rossberg A., 2003, P INT ACM SIGPLAN C
   ROSSBERG A, 2010, P ACM SIGPLAN WORKSH
   Rossberg A., 2006, P INT C FUNCT PROGR
   Russo C. V., 2001, P INT C FUNCT PROGR
   Russo C. V., 1999, P INT ACM SIGPLAN C
   Russo C. V., 1999, P INT C FUNCT PROGR
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   Wadler P., 1989, P ACM SIGPLAN SIGACT
NR 61
TC 9
Z9 20
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2013
VL 35
IS 1
AR 2
DI 10.1145/2450136.2450137
PG 84
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 140CM
UT WOS:000318631900001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Sewell, P
   Wojciechowski, PT
   Unyapoth, A
AF Sewell, Peter
   Wojciechowski, Pawel T.
   Unyapoth, Asis
TI Nomadic Pict: Programming Languages, Communication Infrastructure
   Overlays, and Semantics for Mobile Computation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Design; Languages; Theory; Verification
ID ABSTRACT MACHINE; DESIGN
AB Mobile computation, in which executing computations can move from one physical computing device to another, is a recurring theme: from OS process migration, to language-level mobility, to virtual machine migration. This article reports on the design, implementation, and verification of overlay networks to support reliable communication between migrating computations, in the Nomadic Pict project. We define two levels of abstraction as calculi with precise semantics: a low-level Nomadic pi calculus with migration and location-dependent communication, and a high-level calculus that adds location-independent communication. Implementations of location-independent communication, as overlay networks that track migrations and forward messages, can be expressed as translations of the high-level calculus into the low. We discuss the design space of such overlay network algorithms and define three precisely, as such translations. Based on the calculi, we design and implement the Nomadic Pict distributed programming language, to let such algorithms (and simple applications above them) to be quickly prototyped. We go on to develop the semantic theory of the Nomadic pi calculi, proving correctness of one example overlay network. This requires novel equivalences and congruence results that take migration into account, and reasoning principles for agents that are temporarily immobile (e. g., waiting on a lock elsewhere in the system). The whole stands as a demonstration of the use of principled semantics to address challenging system design problems.
C1 [Sewell, Peter] Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
   [Wojciechowski, Pawel T.] Poznan Univ Tech, Inst Comp Sci, PL-60965 Poznan, Poland.
C3 University of Cambridge; Poznan University of Technology
RP Sewell, P (corresponding author), Univ Cambridge, Comp Lab, JJ Thomson Ave, Cambridge CB3 0FD, England.
EM Peter.Sewell@cl.cam.ac.uk; Pawel.T.Wojciechowski@cs.put.poznan.pl;
   asis@gits.net.th
RI Wojciechowski, Paweł/F-8720-2014
OI Wojciechowski, Paweł/0000-0003-2008-278X; Sewell,
   Peter/0000-0001-9352-1013
FU EPSRC [GR/L62290, GR/N24872, GR/T11715, EP/C510712, EP/F036345,
   EP/H005633]; Wolfson Foundation; Royal Thai Government; Royal Society
   University
FX This work was funded in part by EPSRC grants GR/L62290, GR/N24872,
   GR/T11715, EP/C510712, EP/F036345, and EP/H005633, a Wolfson Foundation
   Scholarship for P. T. Wojciechowski, a Royal Thai Government Scholarship
   for A. Unyapoth, and a Royal Society University Research Fellowship for
   P. Sewell.
CR AMADIO R, 1997, LECT NOTES COMPUTER, V1282, P374, DOI DOI 10.1007/3-540-63383-9
   Amadio RM, 1994, LECT NOTES COMPUT SC, V880, P205
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   [Anonymous], 2004, Concepts, techniques, and models of computer programming
   [Anonymous], 1992, Compiling with Continuations
   [Anonymous], P POPL 01
   [Anonymous], P 2002 ACM S APPL CO
   [Anonymous], 1997, The Definition of Standard ML
   Arnold K., 1999, JINI SPECIFICATION
   AWERBUCH B, 1995, J ASSOC COMPUT MACH, V42, P1021, DOI 10.1145/210118.210132
   Ballintijn G. C., 1999, Proceedings of the ISCA 12th International Conference. Parallel and Distributed Systems, P87
   BILLINGS J, 2006, P ML O6 2006 ACM SIG, P20
   Bishop S, 2005, ACM SIGCOMM COMP COM, V35, P265, DOI 10.1145/1090191.1080123
   BISHOP S, 2006, POPL, P55
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CARDELLI L, 1999, LNCS, V1644, P230
   CARDELLI L, 1999, LNCS, V1603, P51
   CARDELLI L, 2000, LECT NOTES COMPUTER, V1872, P333
   Cardelli Luca., 1995, POPL'95: Proceedings of the 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages; 1995 Jan 23-25; San Francisco, P286, DOI DOI 10.1145/199448.199516
   Castagna G, 2005, INFORM COMPUT, V201, P1, DOI 10.1016/j.ic.2004.11.005
   CASTAGNA G, 1999, COMMITMENT CONFINEME
   Cejtin H, 1995, ACM T PROGR LANG SYS, V17, P704, DOI 10.1145/213978.213986
   Chandra TD, 1996, J ACM, V43, P225, DOI 10.1145/226643.226647
   CHERITON DR, 1988, COMMUN ACM, V31, P314, DOI 10.1145/42392.42400
   Clark C, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND SYMPOSIUM ON NETWORKED SYSTEMS DESIGN & IMPLEMENTATION (NSDI '05), P273
   COMPTON M, 2005, P 11 CATS COMP AUSTR, P21
   Conchon S., 1999, First International Symposium on Agent Systems and Applications/Third International Symposium on (Cat No.PR00340), P22, DOI 10.1109/ASAMA.1999.805390
   Demmer MJ, 1998, LECT NOTES COMPUT SC, V1499, P119, DOI 10.1007/BFb0056478
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   DENIELOU PM, 2006, P 11 ACM INT C FUNCT, P286
   DOUGLIS F, 1991, SOFTWARE PRACT EXPER, V21, P757, DOI 10.1002/spe.4380210802
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   FOURNET C, 1996, P 23 ACM S PRINC PRO, P372, DOI DOI 10.1145/237721.237805
   FOURNET C, 2000, LNCS, V1872, P348
   Giannini P, 2006, SCI COMPUT PROGRAM, V59, P209, DOI 10.1016/j.scico.2005.05.002
   Gordon AD, 1999, LECT NOTES COMPUT SC, V1578, P212
   GUERRAOUI R, 1996, LNCS, V1088, P38
   Hennessy M, 2007, DISTRIBUTED PI-CALCULUS, P1
   Hirschkoff D, 2007, J LOGIC ALGEBR PROGR, V71, P114, DOI 10.1016/j.jlap.2007.02.003
   Jim T, 2001, P IEEE S SECUR PRIV, P106, DOI 10.1109/SECPRI.2001.924291
   JUL E, 1988, ACM T COMPUT SYST, V6, P109, DOI 10.1145/35037.42182
   Kobayashi N., 1996, POPL 1996, 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Proceedings, P358
   LANGE DB, 1997, AGENT TRANSFER PROTO
   LEIFER JJ, 2003, P 8 ACM SIGPLAN INT, P87
   LEROY X, 1995, RR2721 INRIA
   Levi F., 2000, P POPL 00, P352
   Loo B. T., 2005, P 20 ACM S OP SYST P, P75, DOI [10.1145/1095810.1095818, DOI 10.1145/1095810.1095818]
   MCCANN PJ, 1997, LECT NOTES COMPUTER, V1282, P338
   Merro M, 2005, J ACM, V52, P961, DOI 10.1145/1101821.1101825
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MILNER R, 1993, LOGIC ALGEBRA SPEC F, V94
   Milner Robin., 1989, INT SERIES COMPUTER
   Milojicic D., 1999, MOBILITY PROCESSES C
   Moreau L, 2001, SCI COMPUT PROGRAM, V39, P249, DOI 10.1016/S0167-6423(00)00011-3
   MULLENDER SJ, 1988, ALGORITHMICA, V3, P367, DOI 10.1007/BF01762123
   MURPHY VT, 2008, CMUCS08126
   Needham R M, 1989, DISTRIBUTED SYSTEMS, P89
   NESTMANN U, 1996, THESIS U ERANGEN
   NESTMANN U, 1996, LECT NOTES COMPUTER, V1119, P179
   NIELSON F, 1997, MONOGRAPHS COMPUTER
   Palamidessi Catuscia., 1997, Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P256
   PARROW J, 1992, LECT NOTES COMPUT SC, V630, P518
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pierce B. C., 1997, PICT LANGUAGE DEFINI
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   PIERCE BC, 1997, P POPL 97, P242
   PIERCE BC, 1995, LECT NOTES COMPUTER, V907, P187
   POPEK GJ, 1986, COMPUTER SYSTEMS SER
   Ridge T, 2009, ACM SIGPLAN NOTICES, V44, P429, DOI 10.1145/1594834.1480934
   Ridge T, 2008, LECT NOTES COMPUT SC, V5014, P294, DOI 10.1007/978-3-540-68237-0_21
   Riely J, 1997, LECT NOTES COMPUT SC, V1256, P471
   RIELY J, 1999, POPL 99, P93
   Riely J., 1998, P POPL 98, P378
   SANGIORGI D, 1992, LECT NOTES COMPUT SC, V630, P32
   Sangiorgi D, 1999, THEOR COMPUT SCI, V221, P457, DOI 10.1016/S0304-3975(99)00040-7
   SERJANTOV A, 2001, LNCS, V2215, P535
   Sewell P, 1998, LECT NOTES COMPUT SC, V1443, P695, DOI 10.1007/BFb0055094
   Sewell P, 2005, ACM SIGPLAN NOTICES, V40, P15, DOI 10.1145/1090189.1086370
   Sewell P, 1999, LECT NOTES COMPUT SC, V1686, P1
   Sewell P., 2003, Journal of Computer Security, V11, P135
   Sewell P, 1997, LECT NOTES COMPUT SC, V1243, P391
   SEWELL P, 1998, P WORKSH INT PROGR L, P1
   SEWELL P, 2008, P JOINT HP MSR RES W
   SEWELL P, 2001, P 28 ACM SIGPLAN SIG, P236
   SEWELL P, 2000, 498 U CAMBR COMP LAB
   Sewell P, 2007, J FUNCT PROGRAM, V17, P547, DOI 10.1017/S0956796807006442
   THOMSEN B, 1996, LNCS, V1119, P278
   Turner David, 1996, THESIS U EDINBURGH
   UNYAPOTH A, 2001, P POPL 01, P116
   UNYAPOTH A, 2001, THESIS U CAMBRIDGE
   van Steen M, 1998, COMPUT J, V41, P297, DOI 10.1093/comjnl/41.5.297
   VASCONCELOS VT, 1998, ELECT NOTES THEORETI
   VITEK J, 1998, P WORKSH INT PROGR L
   WALKER D, 1995, INFORM COMPUT, V116, P253, DOI 10.1006/inco.1995.1018
   Wansbrough K, 2002, LECT NOTES COMPUT SC, V2305, P278
   Wojciechowski PT, 2006, LECT NOTES COMPUT SC, V4096, P355
   Wojciechowski PT, 2000, IEEE CONCURR, V8, P42, DOI 10.1109/4434.846193
   WOJCIECHOWSKI PT, 2000, THESIS U CAMBRIDGE
   WOJCIECHOWSKI PT, 2010, NOMADIC PICT SYSTEM
   WOJCIECHOWSKI PT, 2001, P AISB S SOFTW MOB A
   WOJCIECHOWSKI PT, 1999, P 1 INT S AG SYST AP
   WOJCIECHOWSKI PT, 2000, NOMADIC PICT DOCUMEN
   Yoshida N, 1999, LECT NOTES COMPUT SC, V1664, P557
NR 104
TC 10
Z9 11
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2010
VL 32
IS 4
AR 12
DI 10.1145/1734206.1734209
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 588GV
UT WOS:000277057700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Acar, UA
   Blelloch, GE
   Blume, M
   Harper, R
   Tangwongsan, K
AF Acar, Umut A.
   Blelloch, Guy E.
   Blume, Matthias
   Harper, Robert
   Tangwongsan, Kanat
TI An Experimental Analysis of Self-Adjusting Computation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Performance; Algorithms; Computational geometry; dynamic
   algorithms; dynamic dependence graphs; memoization; performance;
   self-adjusting computation
ID DYNAMIC ALGORITHMS
AB Recent work on adaptive functional programming (AFP) developed techniques for writing programs that can respond to modifications to their data by performing change propagation. To achieve this, executions of programs are represented with dynamic dependence graphs (DDGs) that record data dependences and control dependences in away that a change-propagation algorithm can update the computation as if the program were from scratch, by re-executing only the parts of the computation affected by the changes. Since change-propagation only re-executes parts of the computation, it can respond to certain incremental modifications asymptotically faster than recomputing from scratch, potentially offering significant speedups. Such asymptotic speedups, however, are rare: for many computations and modifications, change propagation is no faster than recomputing from scratch.
   In this article, we realize a duality between dynamic dependence graphs and memoization, and combine them to give a change-propagation algorithm that can dramatically increase computation reuse. The key idea is to use DDGs to identify and re-execute the parts of the computation that are affected by modifications, while using memoization to identify the parts of the computation that remain unaffected by the changes. We refer to this approach as self-adjusting computation. Since DDGs are imperative, but (traditional) memoization requires purely functional computation, reusing computation correctly via memoization becomes a challenge. We overcome this challenge with a technique for remembering and reusing not just the results of function calls (as in conventional memoization), but their executions represented with DDGs. We show that the proposed approach is realistic by describing a library for self-adjusting computation, presenting efficient algorithms for realizing the library, and describing and evaluating an implementation. Our experimental evaluation with a variety of applications, ranging from simple list primitives to more sophisticated computational geometry algorithms, shows that the approach is effective in practice: compared to recomputing from-scratch; self-adjusting programs respond to small modifications to their data orders of magnitude faster.
C1 [Acar, Umut A.; Blume, Matthias] Toyota Technol Inst, Chicago, IL USA.
   [Blelloch, Guy E.; Harper, Robert; Tangwongsan, Kanat] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Toyota Technological Institute - Chicago; Carnegie Mellon University
RP Acar, UA (corresponding author), Toyota Technol Inst, Chicago, IL USA.
EM ktangwon@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941
FU Intel Corporation
FX The work of U. A. Acar was supported in part by the Intel Corporation.
CR Abadi M., 1996, P INT C FUNCT PROGR, P83
   Acar U. A., 2008, P 25 ANN ACM S PRINC
   ACAR UA, 2009, P ACM SIGPLAN S PART
   ACAR UA, 2008, P 16 ANN EUR S ALG
   ACAR UA, 2004, P ACM SIAM S DISCR A
   ACAR UA, 2006, ELECT NOTES THEOR CO, V148
   ACAR UA, 2002, P 29 ANN ACM S PRINC, P247
   ACAR UA, 2007, P 16 ANN EUR S PROGR
   Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   Acar Umut A., 2005, THESIS CARNEGIE MELL
   Acar Umut A., 2007, NEURAL INFORM PROCES
   Acar UmutA., 2003, P 30 ANN ACM S PRINC
   Acar UmutA., 2006, P ACM SIGPLAN C PROG
   Agarwal PK, 2002, ACM COMPUT SURV, V34, P550, DOI 10.1145/592642.592647
   Alexandron G, 2005, LECT NOTES COMPUT SC, V3608, P269
   Alstrup S, 1997, LECT NOTES COMPUT SC, V1256, P270
   Alstrup S., 2003, CSDS0310065 CORR
   [Anonymous], 1963, Studies in Logic and the Foundations of Mathematics, DOI DOI 10.1016/S0049-237X(08)72018-4
   [Anonymous], 1998, Algorithmic geometry
   Barber CB, 1996, ACM T MATH SOFTWARE, V22, P469, DOI 10.1145/235815.235821
   Basch J, 1999, J ALGORITHM, V31, P1, DOI 10.1006/jagm.1998.0988
   Bellman R., 1957, Dynamic programming
   BENDER MA, 2002, LECT NOTES COMPUTER, V2461, P219
   Bentley J.L., 1980, J ALG, V1, P301
   Bhattacharya BK, 1997, J ALGORITHM, V25, P177, DOI 10.1006/jagm.1997.0869
   Brodal GS, 2002, ANN IEEE SYMP FOUND, P617, DOI 10.1109/SFCS.2002.1181985
   CHAN T, 1999, P 40 ANN IEEE S FDN, P92
   Chan TM, 1996, DISCRETE COMPUT GEOM, V16, P361, DOI 10.1007/BF02712873
   CHIANG YJ, 1992, P IEEE, V80, P1412, DOI 10.1109/5.163409
   COHEN RF, 1991, PROCEEDINGS OF THE SECOND ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P52
   Demers Alan., 1981, P 8 ANN ACM S PRINCI, P105, DOI DOI 10.1145/567532.567544
   Dietz P., 1987, P 19 ANN ACM S THEOR, P365, DOI DOI 10.1145/28395.28434
   Doyle J., 1987, Readings in Nonmonotonic Reasoning, P259
   Eppstein D, 1997, J ACM, V44, P669, DOI 10.1145/265910.265914
   EPPSTEIN D, 1999, ALGORITHMS THEORY CO, pCH8, DOI DOI 10.1201/9781420049503-C9
   FIELD J, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P307, DOI 10.1145/91556.91679
   FREDERICKSON GN, 1985, SIAM J COMPUT, V14, P781, DOI 10.1137/0214055
   Frederickson GN, 1997, J ALGORITHM, V24, P37, DOI 10.1006/jagm.1996.0835
   Graham R. L., 1972, Information Processing Letters, V1, P132, DOI 10.1016/0020-0190(72)90045-2
   Guibas L., 2004, HDB DISCRETE COMPUTA, V2nd, P1117
   Guibas Leonidas., 2004, Symp. Comp. Geom, P170
   Guibas LJ, 1998, ROBOTICS: THE ALGORITHMIC PERSPECTIVE, P191
   HAMMER MA, 2009, P ACM SIGPLAN C PROG
   HAMMER MA, 2008, P 7 INT S MEM MAN IS, P51
   Henzinger MR, 1997, LECT NOTES COMPUT SC, V1256, P594
   Henzinger MR, 1999, J ACM, V46, P502, DOI 10.1145/320211.320215
   Holm J, 2001, J ACM, V48, P723, DOI 10.1145/502090.502095
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   KIRKPATRICK DG, 1986, SIAM J COMPUT, V15, P287, DOI 10.1137/0215021
   KNUTH DE, 1998, ART COMPUTER PROGRAM, V3, P481
   Ley-Wild Ruy., 2009, P 26 ANN ACM S PRINC
   LEYWILD R, 2008, P INT C FUNCT PROGR
   Liu YHA, 1998, ACM T PROGR LANG SYS, V20, P546, DOI 10.1145/291889.291895
   MCALLESTER D, 1990, PROCEEDINGS : EIGHTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P1109
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   MULMULEY K, 1994, COMPUTATIONAL GEOMET
   OVERMARS MH, 1981, J COMPUT SYST SCI, V23, P166, DOI 10.1016/0022-0000(81)90012-X
   Pugh W., 1989, P 16 ANN ACM S PRINC, P315
   RADZIK T, 1998, ACM J EXPER ALGOR, V3
   RAMALINGAM G, 1993, POPL, P00502
   Russel D., 2007, PhD. Thesis
   Russel D, 2007, COMP GEOM-THEOR APPL, V38, P111, DOI 10.1016/j.comgeo.2006.11.006
   Saxe JamesB., 1979, Proceedings of the Annual IEEE Symposium on Foundations of Computer Science (FOCS), P148
   Shamos M., 1978, Ph.D. Thesis
   SHANKAR A, 2007, P ACM SIGPLAN C PROG
   SLEATOR DD, 1983, J COMPUT SYST SCI, V26, P362, DOI 10.1016/0022-0000(83)90006-5
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   STALLMAN RM, 1977, ARTIF INTELL, V9, P135, DOI 10.1016/0004-3702(77)90029-7
   Sundaresh R.S., 1991, C RECORD 18 ANN ACM, P1
   TARJAN R, 2005, P 6 WORKSH EXP ALG W, P80
   Tarjan RE, 1997, MATH PROGRAM, V78, P169, DOI 10.1007/BF02614369
   Tarjan Robert, 2005, P 16 ANN ACM SIAM S
   ThomasW Reps, 1982, S PRINCIPLES PROGRAM, P169, DOI [10.1145/582153.582172, DOI 10.1145/582153.582172]
   Wegman M. N., 1979, 20th Annual Symposium of Foundations of Computer Science, P175, DOI 10.1109/SFCS.1979.26
   Wenger R, 1997, ALGORITHMICA, V17, P322, DOI 10.1007/BF02523195
   YELLIN DM, 1991, ACM T PROGR LANG SYS, V13, P211, DOI 10.1145/103135.103137
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 80
TC 32
Z9 40
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2009
VL 32
IS 1
AR 3
DI 10.1145/1596527.1596530
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 530YN
UT WOS:000272629000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Gal, A
   Probst, CW
   Franz, M
AF Gal, Andreas
   Probst, Christian W.
   Franz, Michael
TI Java bytecode verification via static single assignment form
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; experimentation; languages; performance; security;
   verification; Java bytecode verification; static single assignment form;
   dataflow analysis
ID SYSTEM
AB Java Virtual Machines (JVMs) traditionally perform bytecode verification by way of an iterative dataflow analysis. Bytecode verification is necessary to ensure type safety because temporary variables in the JVM are not statically typed. We present an alternative verification mechanism that transforms JVM bytecode into Static Single Assignment Form (SSA) and thereby propagates definitions directly to uses. Type checking at control flow merge points can then be performed in a single pass.
   Our prototype implementation of the new algorithm is faster than the standard JVM bytecode verifier. It has the additional benefit of generating SSA as a side effect, which may be immediately useful for a subsequent dynamic compilation stage.
C1 [Gal, Andreas; Franz, Michael] Univ Calif Irvine, Irvine, CA 92717 USA.
   [Probst, Christian W.] Tech Univ Denmark, Kongens Lyngby, Denmark.
C3 University of California System; University of California Irvine;
   Technical University of Denmark
RP Gal, A (corresponding author), Univ Calif Irvine, Irvine, CA 92717 USA.
EM probst@imm.dtu.dk
OI Probst, Christian W/0000-0001-5089-9155
FU National Science Foundation [TC-0209163, ITR-0205712]; Office of Naval
   Research (ONR) [N00014-01-1-0854]
FX This research effort was partially funded by the National Science
   Foundation under grants TC-0209163 and ITR-0205712 and by the Office of
   Naval Research (ONR) under agreement N00014-01-1-0854. The U. S.
   Government is authorized to reproduce and distribute reprints for
   Governmental purposes notwithstanding any copyright annotation thereon.
   The views and conclusions contained herein are those of the authors and
   should not be interpreted as necessarily representing the official
   policies or endorsements, either expressed or implied, of the National
   Science foundation (NSF), the Office of Naval Research (ONR), or any
   other agency of the U. S. Government.
CR Amme W., 2001, P SIGPLAN 2001 C PRO, P137
   [Anonymous], 1990, Introduction to Lattices and Order
   [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   Fitzgerald R, 2000, SOFTWARE PRACT EXPER, V30, P199, DOI 10.1002/(SICI)1097-024X(200003)30:3<199::AID-SPE296>3.0.CO;2-2
   FREUND S, 1999, P ACM C OBJ OR PROGR, P147
   Freund S.N., 1998, FORM UND JAV WORKSH
   Freund SN, 2003, J AUTOM REASONING, V30, P271, DOI 10.1023/A:1025011624925
   FREUND SN, 1999, CSTN9991 STANF U
   GAL A, 2005, P 4 INT WORKSH COMP
   League C., 2001, P 5 WORLD C SYST CYB
   Leroy X, 2003, J AUTOM REASONING, V30, P235, DOI 10.1023/A:1025055424017
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   STARK R, 2001, P EUR 01 FORM METH T, P232
   Stata R, 1999, ACM T PROGR LANG SYS, V21, P90, DOI 10.1145/314602.314606
NR 14
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2008
VL 30
IS 4
AR 21
DI 10.1145/1377492.1377496
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 345YS
UT WOS:000259035300004
DA 2024-07-18
ER

PT J
AU Joshi, R
   Nelson, G
   Zhou, YH
AF Joshi, Rajeev
   Nelson, Greg
   Zhou, Yunhong
TI Denali: A practical algorithm for generating optimal code
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; performance; languages; theory; compilation; code
   generation; and practical optimal code generation
AB This article presents a design for the Denali-2 superoptimizer, which will generate minimumin-struction-length machine code for realistic machine architectures using automatic theoremproving technology: specifically, using E-graph matching ( a technique for pattern matching in the presence of equality information) and Boolean satisfiability solving.
   Categories and Subject Descriptors: D. 1 [Programming Techniques]; D. 3 [Programming Languages]; D. m [Miscellaneous]; I.2.2 [Artificial Intelligence]: Automatic Programming; I.2.3 [Artificial Intelligence]: Deduction and Theorem Proving; I.2.5 [Artificial Intelligence]: Programming Languages and SoftwareThis article presents a precise definition of the underlying automatic programming problem solved by the Denali-2 superoptimizer. It sketches the E-graph matching phase and presents a detailed exposition and proof of soundness of the reduction of the automatic programming problem to the Boolean satisfiability problem.
C1 NASA, Jet Prop Lab, Pasadena, CA USA.
   HP Labs, Palo Alto, CA USA.
C3 National Aeronautics & Space Administration (NASA); NASA Jet Propulsion
   Laboratory (JPL); Hewlett-Packard
RP Joshi, R (corresponding author), NASA, Jet Prop Lab, Pasadena, CA USA.
EM gnelson@gmail.com
CR DETLEFS DL, 2003, IN PRESS JACM
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DOWNEY PJ, 1980, J ACM, V27, P758, DOI 10.1145/322217.322228
   Joshi Rajeev., 2002, C PROGRAMMING LANGUA, P304, DOI DOI 10.1145/512529.512566
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
NR 5
TC 11
Z9 17
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2006
VL 28
IS 6
BP 967
EP 989
DI 10.1145/1186632.1186633
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 119DD
UT WOS:000242991500001
OA Bronze
DA 2024-07-18
ER

PT J
AU Ducasse, S
   Nierstrasz, O
   Schärli, N
   Wuyts, R
   Black, AP
AF Ducasse, S
   Nierstrasz, O
   Schärli, N
   Wuyts, R
   Black, AP
TI Traits:: A mechanism for fine-grained reuse
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; languages; inheritance; mixins; multiple inheritance; traits;
   reuse; smalltalk
ID INHERITANCE; ENCAPSULATION; SMALLTALK; CONFLICT; LANGUAGE
AB Inheritance is well-known and accepted as a mechanism for reuse in object-oriented languages. Unfortunately, due to the coarse granularity of inheritance, it may be difficult to decompose an application into an optimal class hierarchy that maximizes software reuse. Existing schemes based on single inheritance, multiple inheritance, or mixins, all pose numerous problems for reuse. To overcome these problems we propose traits, pure units of reuse consisting only of methods. We develop a formal model of traits that establishes how traits can be composed, either to form other traits, or to form classes. We also outline an experimental validation in which we apply traits to refactor a nontrivial application into composable units.
C1 Univ Savoie, LISTIC, ESIA, Language & Software Evolut Grp, F-74016 Annecy, France.
   Univ Bern, Software Composit Grp, CH-3012 Bern, Switzerland.
   Univ Libre Bruxelles, Lab Software Composit & Decomposit, Dept Informat, Brussels, Belgium.
   Portland State Univ, Dept Comp Sci, Portland, OR 97207 USA.
C3 Universite Savoie Mont Blanc; University of Bern; Universite Libre de
   Bruxelles; Portland State University
RP Univ Savoie, LISTIC, ESIA, Language & Software Evolut Grp, BP 806, F-74016 Annecy, France.
EM stephane.ducasse@univ-savoie.fr; oscar@iam.unibe.ch;
   schaerli@google.com; roel.wuyts@ulb.ac.be; black@cs.pdx.edu
RI Wuyts, Roel/GXV-7014-2022
OI Wuyts, Roel/0000-0003-4236-995X; Nierstrasz, Oscar/0000-0002-9975-9791;
   Black, Andrew/0000-0003-0014-6483; Ducasse, Stephane/0000-0001-6070-6599
CR AMERICA P, 1990, SIGPLAN NOTICES, V25, P161, DOI 10.1145/97946.97966
   Ancona D, 2000, LECT NOTES COMPUT SC, V1850, P154
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Bak L., 2002, ECOOP 02 WORKSH INH
   BARRETT K, 1996, P 11 ACM SIGPLAN C O, P69
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   Batory D., 1992, ACM Transactions on Software Engineering and Methodology
   Black AP, 2004, PROC INT CONF SOFTW, P676, DOI 10.1109/ICSE.2004.1317489
   Black AP, 2003, ACM SIGPLAN NOTICES, V38, P47, DOI 10.1145/949343.949311
   Bobrow D., 1977, COGNITIVE SCI, V1, P3, DOI DOI 10.1207/S15516709C0G0101_
   Bobrow DG, 1980, P C ART INT SIM BEH
   BORNING A, 1981, ACM T PROGR LANG SYS, V3, P353, DOI 10.1145/357146.357147
   Bouraqadi N, 2004, COMPUT LANG SYST STR, V30, P49, DOI 10.1016/j.cl.2003.09.003
   BOURAQADISAADAN.NM, 1998, P 13 ACM SIGPLAN C O, P84
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   BRACHA G, 1990, P OOPSLA ECOOP 90 AC, V25, P303, DOI DOI 10.1145/97945.97982
   Bracha G., 2016, The Dart Programming Language. Always learning
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   Bucci P., 1994, SIGSOFT Software Engineering Notes, V19, P40, DOI 10.1145/190679.190683
   CANNON HI, 1982, FLAVORS NONHIERARCHI
   CASTAGNA G, 1995, ACM T PROGR LANG SYS, V17, P431, DOI 10.1145/203095.203096
   COINTE P, 1987, SIGPLAN NOTICES, V22, P156, DOI 10.1145/38807.38822
   Cook S., 1987, OOPSLA 87 ADDENDUM P, P35
   COOK W, 1989, SIGPLAN NOTICES, V24, P433, DOI 10.1145/74878.74922
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   COOK WR, 1992, SIGPLAN NOTICES, V27, P1, DOI 10.1145/141937.141938
   CURRY G, 1982, P ACM SIGOA NEWSL PH, V3
   Danforth Scott, 1994, P TOOLS EUROPE 94 VE, P63
   DIXON R, 1989, P OOPSLA 89, V24, P211
   Ducasse S, 2005, COMPUT LANG SYST STR, V31, P143, DOI 10.1016/j.cl.2004.11.003
   DUCOURNAU R, 1992, SIGPLAN NOTICES, V27, P16
   DUGGAN D, 2001, P OOPSLA 2001 OCT, P223
   Edwards S. H., 1994, SIGSOFT Software Engineering Notes, V19, P29, DOI 10.1145/190679.190682
   Forman I, 1999, PUTTING METACLASSES
   Gil J, 1999, ACM SIGPLAN NOTICES, V34, P256, DOI 10.1145/320385.320408
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Goldstein I.P., 1980, P 1980 ACM C LISP FU, P75, DOI [10.1145/800087.802792, DOI 10.1145/800087.802792]
   GOLDSTEIN IP, 1977, P 5 INT JOINT C ART, P257
   GOLDSTEIN IP, 1980, P 1 ANN C NAT ASS AR
   GRAUBE N, 1989, P OOPSLA 89 ACM SIGP, V24, P305
   GUTTAG JV, 1985, IEEE SOFTWARE, V2, P24, DOI 10.1109/MS.1985.231756
   HARRISON W, 1993, P OOPSLA93, V28, P411
   Hollingsworth J. E., 1994, SIGSOFT Software Engineering Notes, V19, P52, DOI 10.1145/190679.190684
   HOLLINGSWORTH JE, 2000, SIGSOFT 00 FSE 8 P 8, P11
   Ingalls D., 1997, SIGPLAN Notices, V32, P318, DOI 10.1145/263700.263754
   INGALLS D, 1976, POPL 76, P9
   Järvi J, 2003, SOFTWARE PRACT EXPER, V33, P259, DOI 10.1002/spe.504
   Keene S.E., 1989, OBJECT ORIENTED PROG
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Kniesel G, 1999, LECT NOTES COMPUT SC, V1628, P351
   LALONDE W, 1991, J OBJECT-ORIENT PROG, V3, P57
   LALONDE WR, 1989, ACM T PROGR LANG SYS, V11, P212, DOI 10.1145/63264.63265
   LEDOUX T, 1996, LNCS, V1049, P38
   LIENHARD A, 2004, THESIS U BERN
   MADSEN OL, 1990, SIGPLAN NOTICES, V25, P140, DOI 10.1145/97946.97964
   Meyer B., 1988, Object-Oriented Software Construction
   Meyer B., 1992, Eiffel: The Language
   MEZINI M, 1997, P EUR C OBJ OR PROGR, P190
   MEZINI M, 2002, P 17 ACM SIGPLAN C O, P52
   MOHNEN M, 2002, C PRINC PRACT PROGR, P35
   MOON DA, 1986, SIGPLAN NOTICES, V21, P1, DOI 10.1145/960112.28698
   MOURA P, 2003, THESIS U BEIRA INTER
   Musser D.R., 1996, STL tutorial and reference guide
   ODERSKY M, 2004, 64 EC POL FED LAUS
   Ogden W. F., 1994, SIGSOFT Software Engineering Notes, V19, P23, DOI 10.1145/190679.190681
   Riel AJ., 1996, Object-Oriented Design Heuristics
   RIVARD F, 1997, THESIS U NANTES FRAN
   Sakkinen M., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P39
   SAKKINEN M, 1992, STRUCT PROGRAM, V13, P155
   Schärli N, 2004, LECT NOTES COMPUT SC, V3086, P26
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   SCHARLI N, 2003, CSE03008 OGI SCH SCI
   Scharli Nathanael, 2005, Ph. D. Dissertation
   Smaragdakis Y, 2002, LECT NOTES COMPUT SC, V2319, P33
   Smaragdakis Y., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P550, DOI 10.1007/BFb0054107
   SMARAGDAKIS Y, 2 S GEN COMP BAS SOF
   Smith Randall B., 1991, LISP SYMBOLIC COMPUT, V4, P3
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P38, DOI 10.1145/960112.28702
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   STEFIK M, 1985, AI MAGAZINE
   STROUSTRUP B, 1997, CPLUSPLUS PROGRAMMIN
   STROUSTRUP B, 1986, CPLUSPLUS PROGRAMMIN
   Taivalsaari A, 1996, ACM COMPUT SURV, V28, P438, DOI 10.1145/243439.243441
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   VANHILST M, 1996, JSSST INT S OBJ TECH, P22
   VanHilst Michael., 1996, P 11 ACM SIGPLAN C O, P359
   VanLimberghen M, 1996, OBJECT ORIENTED SYST, V3, P1
   WEGNER P, 1988, LECT NOTES COMPUT SC, V322, P55
   [No title captured]
   [No title captured]
NR 94
TC 117
Z9 123
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2006
VL 28
IS 2
BP 331
EP 388
DI 10.1145/1119479.1119483
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 021SQ
UT WOS:000236006300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Levanoni, Y
   Petrank, E
AF Levanoni, Y
   Petrank, E
TI An on-the-fly reference-counting garbage collector for Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 16th ACM SIGPLAN Conference on Object Oriented Programming Systems
   Languages and Applications
CY OCT, 2001
CL New York, NY
SP ACM, SIGPLAN
DE languages; algorithms; programming languages; memory management; garbage
   collection; reference-counting
ID REAL-TIME
AB Reference-counting is traditionally considered unsuitable for multiprocessor systems. According to conventional wisdom, the update of reference slots and reference-counts requires atomic or synchronized operations. In this work we demonstrate this is not the case by presenting a novel reference-counting algorithm suitable for a multiprocessor system that does not require any synchronized operation in its write barrier (not even a compare-and-swap type of synchronization). A second novelty of this algorithm is that it allows eliminating a large fraction of the reference-count updates, thus, drastically reducing the reference-counting traditional overhead. This article includes a full proof of the algorithm showing that it is safe (does not reclaim live objects) and live (eventually reclaims all unreachable objects).
   We have implemented our algorithm on Sun Microsystems' Java Virtual Machine (JVM) 1.2.2 and ran it on a four-way IBM Netfinity 8500R server with 550-MHz Intel Pentium III Xeon and 2 GB of physical memory. Our results show that the algorithm has an extremely low latency and throughput that is comparable to the stop-the-world mark and sweep algorithm used in the original JVM.
C1 Microsoft Corp, Redmond, WA 98052 USA.
   Technion Israel Inst Technol, Dept Comp Sci, IL-32000 Haifa, Israel.
C3 Microsoft; Technion Israel Institute of Technology
RP Microsoft Corp, 1 Microsoft Way, Redmond, WA 98052 USA.
EM ylevanon@microsoft.com; erez@cs.technion.ac.il
CR Aho AV, 1988, The AWK Programming Language
   [Anonymous], SPEC BENCHM
   APPEL AW, 1988, ACM SIGPLAN NOTICES, V23, P11
   Azatchi H, 2003, LECT NOTES COMPUT SC, V2622, P185
   AZATCHI H, 2003, OOPSLA, P269
   BACON D, 2001, P 15 EUR C OBJ OR PR
   BACON DF, 2001, P ACM SIGPLAN C PROG, P92
   BAKER HG, 1978, COMMUN ACM, V21, P280, DOI 10.1145/359460.359470
   BAKER HG, 1994, SIGPLAN NOTICES, V29, P38, DOI 10.1145/185009.185016
   BARTH JM, 1977, COMMUN ACM, V20, P513, DOI 10.1145/359636.359713
   BLACKBURN S, 2003, OOPSLA, P344
   BOEHM HJ, 1991, SIGPLAN NOTICES, V26, P157
   CHIKAYAMA T, 1987, 4TH P INT C LOG PROG, P276
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   CRAMMOND J, 1988, INT J PARALLEL PROG, V17, P497, DOI 10.1007/BF01407816
   DETREVILLE J, 1990, 64 DEC SYST RES CTR
   DEUTSCH LP, 1976, COMMUN ACM, V19, P522, DOI 10.1145/360336.360345
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P965
   DOLIGEZ D, 1994, POPL 94, P70
   DOLIGEZ D, 1993, POPL 93, P113
   Domani T., 2000, ISMM, V36, P155
   Endo Toshio., 1997, Proceedings of the 1997 ACM/IEEE Conference on Supercomputing, P1
   FLOOD C, 2001, USENIX JAV VIRT MACH
   FURUSOU S, 1991, OOSPLA ECOOP 91 WORK
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   HERLIHY M, 1990, 909 CRL DEC
   HOSKING AL, 1992, P ACM C OBJ OR PROGR, P92
   HOSKING T, 2000, ISMM 2000 P 2 INT S
   Hudson RL, 2003, CONCURR COMP-PRACT E, V15, P223, DOI 10.1002/cpe.712
   Jones Richard., 1996, GARBAGE COLLECTION
   KOLODNER EK, 2004, IN PRESS PARALL PROC, V14, P2
   LEVANONI Y, 2001, P 16 ACM SIGPLAN C O, P367
   LINS RD, 1991, 92 U KENT CANT COMP
   MCBETH JH, 1963, COMMUN ACM, V6, P575, DOI 10.1145/367593.367649
   MILLER JS, 1990, LECT NOTES COMPUT SC, V441, P138, DOI 10.1007/BFb0024153
   O'Toole J., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P34, DOI 10.1145/182409.182425
   *OOPSLA, 2003, P 18 ANN ACM SIGPLAN
   OSSIA Y, 2002, P ACM SIGPLAN 2002 C, P129
   PARK Y, 1995, INFORM PROCESS LETT, V55, P229, DOI 10.1016/0020-0190(95)00096-U
   PLAKAL M, 2000, CONCURRENT GARBAGE C, P94
   PRINTEZIS T, 2000, GENERATIONAL MOSTLY, P143
   RIANY Y, 1995, P 3 ISR S THEOR COMP, P58
   Roth DJ, 1999, ACM SIGPLAN NOTICES, V34, P49, DOI 10.1145/301589.286866
   SOBALVARRO P, 1988, ALTR1417 MIT AI LAB
   SOBALVARRO PG, 1988, THESIS MIT CAMBRIDGE
   STEELE GL, 1975, COMMUN ACM, V18, P495, DOI 10.1145/361002.361005
   Stoye W.R., 1984, Proceedings of the 1984 ACM Symposium on LISP and Functional Programming, LFP '84, P159, DOI [10.1145/800055.802032, DOI 10.1145/800055.802032]
   Wall L., 1991, PROGRAMMING PERL
   WEIZENBAUM J, 1963, COMMUN ACM, V6, P524, DOI 10.1145/367593.367617
   WISE DS, 1993, INFORM PROCESS LETT, V46, P243, DOI 10.1016/0020-0190(93)90103-G
   YUASA T, 1990, J SYST SOFTWARE, V11, P181, DOI 10.1016/0164-1212(90)90084-Y
   ZORN B, 1990, CUCS49490 U COL
NR 53
TC 28
Z9 36
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2006
VL 28
IS 1
BP 1
EP 69
DI 10.1145/1111596.1111597
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 011SV
UT WOS:000235289300001
OA hybrid
DA 2024-07-18
ER

PT J
AU Wand, M
   Kiczales, G
   Dutchyn, C
AF Wand, M
   Kiczales, G
   Dutchyn, C
TI A semantics for advice and dynamic join points in aspect-oriented
   programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT Workshop on Foundations of Aspect Oriented Languages (FOAL 2002)
CY APR 22, 2002
CL Enschede, NETHERLANDS
DE design; languages; theory; advice; AspectJ; aspect-oriented programming;
   Aspect Sand Box; join point; pointcut
AB A characteristic of aspect-oriented programming, as embodied in AspectJ, is the use of advice and pointcuts to define behavior that crosscuts the structure of the rest of the code. The events during execution at which advice may execute are called join points. A pointcut is a set of join points. An advice is an action to be taken at the join points in a particular pointcut. In this model of aspect-oriented programming, join points are dynamic in that they refer to events during the flow of execution of the program.
   We give a denotational semantics for a minilanguage that embodies the key features of dynamic join points, pointcuts, and advice. This is the first semantics for aspect-oriented programming that handles dynamic join points and recursive procedures. It is intended as a baseline semantics against which future correctness results may be measured.
C1 Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
   Univ British Columbia, Dept Comp Sci, Vancouver, BC V6T 1Z4, Canada.
C3 Northeastern University; University of British Columbia
RP Northeastern Univ, Coll Comp & Informat Sci, 360 Huntington Ave, Boston, MA 02115 USA.
EM m.wand@neu.edu; gregor@cs.ubc.ca; cdutchyn@cs.ubc.ca
CR AKSIT M, 1993, LECT NOTES COMPUTER, V791, P152
   Andrews J.H., 2001, Reflection, P187
   BOBROW DG, 1986, P C OBJ OR PROGR SYS, P17
   CANNON HI, 1982, FLAVORS NONHIERARCHI
   DEMEUTER W, 1997, INT WORKSH ASP OR PR, V25
   Douence R., 2001, LECT NOTES COMPUTER, V2192, P170, DOI DOI 10.1007/3-540-45429-2_13
   DUTCHYN C, 2002, ASPECT SAND BOX
   ELRAD T, 2001, COMMUN ACM, V44, P10
   Friedman D.P., 2001, ESSENTIALS PROGRAMMI, V2nd
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   HARRISON W, 1993, P C OBJ OR PROGR SYS, P411
   JAGADEESAN R, 2003, LECT NOTES COMPUTER
   JONES SP, 1999, HASKELL 98 NONSTRICT
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   LAMMEL R, 2002, P INT C ASP OR SOFTW
   Lieberherr K., 1996, ADAPTIVE OBJECT ORIE
   MASUHARA H, 2003, P EUR C OBJ OR PROGR
   MASUHARA K, 2002, FOAL 2002 P FDN ASP, P17
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOON DA, 1986, P ACM C OBJECT ORIEN, P1
   Ossher H., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P734, DOI 10.1109/ICSE.2000.870483
   SMITH BC, 1984, 11TH P ANN ACM S PRI, P23
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Tucker D.B., 2003, P 2 INT C ASPECT ORI, P158
   WADLER P, 1992, 19 ANN ACM SIGPLAN S, P1
   Walker David., 2003, P ACM SIGPLAN INT C
   WEINREB D, 1981, 602 MIT AI LAB
NR 29
TC 81
Z9 102
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2004
VL 26
IS 5
BP 890
EP 910
DI 10.1145/1018203.1018208
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 853WB
UT WOS:000223858600005
DA 2024-07-18
ER

PT J
AU Spoto, F
   Jensen, T
AF Spoto, F
   Jensen, T
TI Class analyses as abstract interpretations of trace semantics
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; verification; abstract interpretation; class
   analysis; denotational semantics
ID OBJECT-ORIENTED LANGUAGES; ESCAPE ANALYSIS; INFERENCE; PROGRAMS
AB We use abstract interpretation to abstract a compositional trace semantics for a simple imperative object-oriented language into its projection over a set of program points called watchpoints. We say that the resulting watchpoint semantics is focused on the watchpoints. Every abstraction of the computational domain of this semantics induces an abstract, still compositional, and focused watchpoint semantics. This establishes a basis for developing static analyses obtaining information pertaining only to the watchpoints. As an example, we consider three domains for class analysis of object-oriented programs derived from three techniques present in the literature, namely, rapid type analysis, a simple dataflow analysis, and a constraint-based analysis. We obtain three static analyses which are provably correct and whose abstract operations are provably optimal. Moreover, we prove that our formalization of the constraint-based analysis is more precise than that of the other two analyses. We have implemented our watchpoint semantics and our three domains for class analysis. This implementation shows that the time and space costs of the analysis are actually proportional to the number of watchpoints, as a consequence of the focused nature of the watchpoint semantics.
C1 Univ Verona, Dipartimento Informat, I-37134 Verona, Italy.
   IRISA, F-35042 Rennes, France.
C3 University of Verona; Universite de Rennes
RP Spoto, F (corresponding author), Univ Verona, Dipartimento Informat, Strada Le Grazie 15,Ca Vignal 2, I-37134 Verona, Italy.
OI Spoto, Fausto/0000-0003-2973-0384
CR [Anonymous], 1990, Introduction to Lattices and Order
   Arnold K., 2000, The Java Programming Language, V3rd ed
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   BANERJEE A, 2002, PRINCIPLES PROGRAMMI, P166
   Besson F., 2001, Journal of Computer Security, V9, P217
   Blanchet B, 1999, ACM SIGPLAN NOTICES, V34, P20, DOI 10.1145/320385.320387
   Bourdoncle F., 1992, J FUNCTIONAL PROGRAM, V2, P407
   COLBY C, 1996, THESIS CARNEGIE MELL
   COLBY C, 1996, P POPL 96 ST PET FLA, P195
   COOK W, 1994, INFORM COMPUT, V114, P329, DOI 10.1006/inco.1994.1090
   Cousot P., 1997, POPL 97, P316
   COUSOT P, 1997, ELECT NOTES THEORETI, V6
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Diwan A, 1996, ACM SIGPLAN NOTICES, V31, P292, DOI 10.1145/236338.236367
   Duesterwald E, 1997, ACM T PROGR LANG SYS, V19, P992, DOI 10.1145/267959.269970
   Duesterwald E., 1995, Proceedings of the 22Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. POPL'95, P37, DOI DOI 10.1145/199448.199461
   Gabbrielli M, 1996, J LOGIC COMPUT, V6, P491, DOI 10.1093/logcom/6.4.491
   Hill PM, 2003, LECT NOTES COMPUT SC, V2562, P339
   HILL PM, 2002, LECT NOTES COMPUTER, V2422, P380
   HILL PM, 2002, LECT NOTES COMPUTER, V2294, P154
   JENSEN T, 2001, LNCS, V2030, P261
   KAMIN S, 1988, P POPL 88, P80
   Knoblock TB, 2001, ACM T PROGR LANG SYS, V23, P243, DOI 10.1145/383043.383045
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   NIELSON F, 1999, PRINCIPLES PROGRAM A
   PALSBERG J, 1991, SIGPLAN NOTICES, V26, P146
   PARK YG, 1992, SIGPLAN NOTICES, V27, P116, DOI 10.1145/143103.143125
   PLEVYAK J, 1994, SIGPLAN NOTICES, V29, P324, DOI 10.1145/191081.191130
   Reddy U. S., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P289, DOI 10.1145/62678.62721
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   ROSE E, 1998, P OOPSLA 98 WORKSH F
   SAGIV M, 1996, P 23 ACM S PRINC PRO, P16
   SCHMIDT DA, 1998, J LISP SYMBOLIC COMP, V10, P237
   Spoto F, 2001, LECT NOTES COMPUT SC, V2126, P127
   SPOTO F, 2001, LOOP ANAL
   *SUN MICR INC, 2000, INTR JAV 2 PLATF MIC
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Tip F, 2000, ACM SIGPLAN NOTICES, V35, P281, DOI 10.1145/354222.353190
   Winskel G., 1993, The Formal Semantics of Programming Languages
   [No title captured]
   [No title captured]
   [No title captured]
NR 42
TC 26
Z9 29
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2003
VL 25
IS 5
BP 578
EP 630
DI 10.1145/937563.937565
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720HY
UT WOS:000185256400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Fournet, C
   Gordon, AD
AF Fournet, C
   Gordon, AD
TI Stack inspection: Theory and variants
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; security; theory; access control; contextual equivalence;
   equational reasoning; operational semantics; stack inspection
ID ABSTRACTION
AB Stack inspection is a security mechanism implemented in runtimes such as the JVM and the CLR to accommodate components with diverse levels of trust. Although stack inspection enables the fine-grained expression of access control policies, it has rather a complex and subtle semantics. We present a formal semantics and an equational theory to explain how stack inspection affects program behavior and code optimisations. We discuss the security properties enforced by stack inspection, and also consider variants with stronger, simpler properties.
C1 Microsoft Res, Cambridge CB3 0FB, England.
C3 Microsoft
RP Gordon, AD (corresponding author), Microsoft Res, 7 J J Thomson Ave, Cambridge CB3 0FB, England.
EM adg@microsoft.com
CR Abadi M., 1996, P 1 ACM SIGPLAN INT
   Abadi Martin., 2003, Proceedings of the 10th Annual Network and Distributed System Security Symposium, P107
   ABRAMSKY S, 1993, INFORM COMPUT, V105, P159, DOI 10.1006/inco.1993.1044
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   BANERJEE A, 2002, PRINCIPLES PROGRAMMI, P166
   BANERJEE A, 2001, 20011 CS STEV I TECH
   BARTOLETTI M, 2001, ENTCS, V54
   Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Besson F., 2001, Journal of Computer Security, V9, P217
   Erlingsson U, 2000, P IEEE S SECUR PRIV, P246, DOI 10.1109/SECPRI.2000.848461
   FOURNET C, 2001, MSRTR2001103
   Fournet Cedric., 2002, POPL 02, P307
   GONG L., 1999, INSIDE JAVA 2 PLATFO
   Grossman D, 2000, ACM T PROGR LANG SYS, V22, P1037, DOI 10.1145/371880.371887
   Hardy N., 1988, Operating Systems Review, V22, P36, DOI 10.1145/54289.871709
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Jensen T, 1999, P IEEE S SECUR PRIV, P89, DOI 10.1109/SECPRI.1999.766902
   Karjoth G, 2000, P IEEE CSFW, P224, DOI 10.1109/CSFW.2000.856939
   LaMacchia BrianA., 2002, NET Framework Security
   LEROY X, 1999, LNCS, V1603, P147
   Lindholm T., 1997, JAVA VIRTUAL MACHINE
   *MICR, 2001, NET FRAM DEV GUID SE
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   MOGGI E, 1989, THEORETICAL COMPUTER, V93, P55
   Morris J.H., 1968, THESIS MIT CAMBRIDGE
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   SCHINZ M, 2001, ENTCS, V59, P155
   SKALKA C, 2000, P 5 ACM SIGPLAN INT, P34
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
   [No title captured]
   [No title captured]
   [No title captured]
NR 33
TC 35
Z9 39
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2003
VL 25
IS 3
BP 360
EP 399
DI 10.1145/641909.641912
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 662CY
UT WOS:000181929700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Gorinova, MI
   Gordon, AD
   Sutton, C
   Vákár, M
AF Gorinova, Maria, I
   Gordon, Andrew D.
   Sutton, Charles
   Vakar, Matthijs
TI Conditional Independence by Typing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Probabilistic programming; information flow types; static analysis;
   conditional independence; compiler correctness
AB A central goal of probabilistic programming languages (PPLs) is to separate modelling from inference. However, this goal is hard to achieve in practice. Users are often forced to re-write their models to improve efficiency of inference or meet restrictions imposed by the PPL. Conditional independence (CI) relationships among parameters are a crucial aspect of probabilistic models that capture a qualitative summary of the specified model and can facilitate more efficient inference.
   We present an information flow type system for probabilistic programming that captures conditional independence (CI) relationships and show that, for a well-typed program in our system, the distribution it implements is guaranteed to have certain CI-relationships. Further, by using type inference, we can statically deduce which CI-properties are present in a specified model.
   As a practical application, we consider the problem of how to perform inference on models with mixed discrete and continuous parameters. Inference on such models is challenging in many existing PPLs, but can be improved through a workaround, where the discrete parameters are used implicitly, at the expense of manual model re-writing. We present a source-to-source semantics-preserving transformation, which uses our CI-type system to automate this workaround by eliminating the discrete parameters from a probabilistic program. The resulting program can be seen as a hybrid inference algorithm on the original program, where continuous parameters can be drawn using efficient gradient-based inference methods, while the discrete parameters are inferred using variable elimination.
   We implement our CI-type system and its example application in SlicStan: a compositional variant of Stan.(1)
C1 [Gorinova, Maria, I; Gordon, Andrew D.; Sutton, Charles] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Gordon, Andrew D.] Microsoft Res, Cambridge, England.
   [Vakar, Matthijs] Univ Utrecht, Utrecht, Netherlands.
C3 University of Edinburgh; Microsoft; Utrecht University
RP Gorinova, MI (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
EM m.gorinova@ed.ac.uk; adg@microsoft.com; c.sutton@ed.ac.uk;
   m.i.l.vakar@uu.nl
OI Vakar, Matthijs/0000-0003-4603-0523
FU EPSRC Centre for Doctoral Training in Data Science - UK Engineering and
   Physical Sciences Research Council [EP/L016427/1]; University of
   Edinburgh; European Union's Horizon 2020 research and innovation
   programme under the Marie Sklodowska-Curie grant [895827]; Marie Curie
   Actions (MSCA) [895827] Funding Source: Marie Curie Actions (MSCA)
FX Maria Gorinova was supported by the EPSRC Centre for Doctoral Training
   in Data Science, funded by the UK Engineering and Physical Sciences
   Research Council (grant EP/L016427/1) and the University of Edinburgh.
   Matthijs Vakar was funded by the European Union's Horizon 2020 research
   and innovation programme under the Marie Sklodowska-Curie grant
   agreement No. 895827.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Amir E, 2010, ALGORITHMICA, V56, P448, DOI 10.1007/s00453-008-9180-4
   Amtoft T, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3372895
   [Anonymous], 2014, Infer.NET 2.6
   ARNBORG S, 1987, SIAM J ALGEBRA DISCR, V8, P277, DOI 10.1137/0608024
   Bao Jialu, 2021, LICS, P1
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Betancourt Michael, 2015, Current trends in Bayesian methodology with applications, V79, P30, DOI [10.1201/b18502, DOI 10.1201/B18502-5]
   Boutilier C, 1996, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, P115
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Damiano Luis, 2018, STANCON, DOI DOI 10.5281/ZENODO.1284341
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P389, DOI 10.1007/BF01379404
   Frey Brendan J., 2002, P 19 C UNCERTAINTY A, P257
   Ge H, 2018, PR MACH LEARN RES, V84
   Gehr T, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P883, DOI 10.1145/3385412.3386006
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Gelman A, 2015, J EDUC BEHAV STAT, V40, P530, DOI 10.3102/1076998615606113
   Gordon AD, 2015, LECT NOTES COMPUT SC, V9032, P1, DOI 10.1007/978-3-662-46669-8_1
   Gorinova MI, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290348
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1
   Hoffman MD, 2014, J MACH LEARN RES, V15, P1593
   Holtzen Steven, 2020, ARXIV PREPRINT ARXIV
   Kjaerulff Uffe, 1990, Triangulation of graphs-algorithms giving small total state space
   Koller D., 2009, Probabilistic graphical models: principles and techniques
   Lobo-Vesga E, 2020, P IEEE S SECUR PRIV, P411, DOI 10.1109/SP40000.2020.00086
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   Minka Tom, 2009, Advances in Neural Information Processing Systems, P1073
   Moore D., 2018, INT C PROB PROGR
   Murphy KP, 2012, MACHINE LEARNING: A PROBABILISTIC PERSPECTIVE, P1
   Murray LM, 2018, PR MACH LEARN RES, V84
   Murray LM, 2018, ANNU REV CONTROL, V46, P29, DOI 10.1016/j.arcontrol.2018.10.013
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Neal RM, 2011, CH CRC HANDB MOD STA, P113
   Nishimura A., 2017, ARXIV PREPRINT ARXIV, P2
   Obermeyer F, 2019, PR MACH LEARN RES, V97
   Pakman A., 2013, ADV NEURAL INF PROCE, V2, P2490
   Phan D., 2019, Composable effects for flexible and accelerated probabilistic programming in numpyro
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   RABINER LR, 1989, P IEEE, V77, P257, DOI 10.1109/5.18626
   Salvatier J, 2016, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.55
   Stan Development Team, 2019, STAN LANG REF MAN VE
   Stan Development Team, 2019, STAN US GUID VERS 2
   Tran Dustin, 2018, EDWARD2 SIMPLE DISTR
   Uber AI Labs, 2017, PYRO DEEP PROB PROGR
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Winn John, 2012, PMLR, P1314
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Zhang N. L., 1994, P 10 CAN C ART INT, P171
   Zhang Yichuan, 2012, Proceedings of the 25th International Conference on Neural Information Processing Systems, P3194
   Zhou Guangyao, 2020, P 34 INT C NEURAL IN
   Zhou Y, 2019, PR MACH LEARN RES, V89, P148
NR 53
TC 2
Z9 3
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2022
VL 44
IS 1
AR 4
DI 10.1145/3490421
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YP1LJ
UT WOS:000748389400004
OA Green Submitted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Zhao, D
   Subotic, P
   Scholz, B
AF Zhao, David
   Subotic, Pavle
   Scholz, Bernhard
TI Debugging Large-scale Datalog: A Scalable Provenance Evaluation Strategy
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Static analysis; datalog; provenance
AB Logic programming languages such as Datalog have become popular as Domain Specific Languages (DSLs) for solving large-scale, real-world problems, in particular, static program analysis and network analysis. The logic specifications that model analysis problems process millions of tuples of data and contain hundreds of highly recursive rules. As a result, they are notoriously difficult to debug. While the database community has proposed several data provenance techniques that address the Declarative Debugging Challenge for Databases, in the cases of analysis problems, these state-of-the-art techniques do not scale.
   In this article, we introduce a novel bottom-up Datalog evaluation strategy for debugging: Our provenance evaluation strategy relies on a new provenance lattice that includes proof annotations and a new fixed-point semantics for semi-naive evaluation. A debugging query mechanism allows arbitrary provenance queries, constructing partial proof trees of tuples with minimal height. We integrate our technique into Souffle, a Datalog engine that synthesizes C++ code, and achieve high performance by using specialized parallel data structures. Experiments are conducted with DooP/DaCapo, producing proof annotations for tens of millions of output tuples. We show that our method has a runtime overhead of 1.31x on average while being more flexible than existing state-of-the-art techniques.
C1 [Zhao, David; Scholz, Bernhard] Univ Sydney, Sch Comp Sci, Sydney, NSW, Australia.
   [Subotic, Pavle] Amazon, London, England.
   [Subotic, Pavle] UCL, London, England.
C3 University of Sydney; University of London; University College London
RP Zhao, D (corresponding author), Univ Sydney, Sch Comp Sci, Sydney, NSW, Australia.
EM dzha3983@uni.sydney.edu.au; Pavle.Subotic.15@ucl.ac.uk;
   bernhard.scholz@sydney.edu.au
OI Zhao, David/0000-0002-3857-5016
FU Australian Government through the ARC [DP180104030]
FX This research was supported partially by the Australian Government
   through the ARC Discovery Project funding scheme (DP180104030) and a
   research donation from AWS.
CR Abiteboul S, 1995, FDN DATABASES
   Allen N, 2015, LECT NOTES COMPUT SC, V9031, P131, DOI 10.1007/978-3-662-46663-6_7
   [Anonymous], 2017, J SENSORS, DOI DOI 10.1155/2017/3976469
   [Anonymous], 2005, P 14 C USENIX SECURI
   [Anonymous], 2011, P 2011 ACM SIGMOD IN, DOI DOI 10.1145/1989323.1989456
   [Anonymous], 2017, SOUFFLE LANG SOUFFLE
   Arab BS, 2018, IEEE T KNOWL DATA EN, V30, P599, DOI 10.1109/TKDE.2017.2769056
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Arora T., 1993, Deductive and Object-Oriented Databases. Third International Conference, DOOD '93. Proceedings, P101
   Benjelloun O., 2006, IEEE DATA ENG B, V29, P5
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Buneman P, 2001, LECT NOTES COMPUT SC, V1973, P316
   Caballero R, 2008, LECT NOTES COMPUT SC, V4925, P143, DOI 10.1007/978-3-540-88594-8_8
   Caballero R, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P55, DOI 10.1145/2790449.2790522
   Cheney J, 2007, FOUND TRENDS DATABAS, V1, P379, DOI 10.1561/1900000006
   Chothia Z, 2016, PROC VLDB ENDOW, V9, P1137
   Deutch D, 2018, VLDB J, V27, P245, DOI 10.1007/s00778-018-0496-7
   Deutch D, 2015, PROC VLDB ENDOW, V8, P1394
   Drabent Lodek, 1989, METAPROGRAMMING LOGI
   Flores-Montoya Antonio, 2019, ARXIV190603969
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Glavic Boris, 2013, In Search of Elegance in the Theory and Practice of Computation. Essays Dedicated to Peter Buneman: LNCS 8000, P291, DOI 10.1007/978-3-642-41660-6_16
   Glavic B, 2009, PROC INT CONF DATA, P174, DOI 10.1109/ICDE.2009.15
   Grech Neville, 2018, P ACM SIGPLAN C OBJ
   Grech Neville, 2019, GIGAHORSE THOR UNPUB
   Greco S, 1998, LOGIC PROGRAMM, P294
   Greco S., 2015, Datalog and Logic Databases
   Hoder Krystof, 2011, INT C COMP AID VER, P457
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Jordan SC, 2019, AM J TRANSPLANT, V19, P327
   Kiessling W., 1994, Management and Processing of Complex Data Structures. Third Workshop on Information Systems and Artificial Intelligence. Proceedings, P118
   Kohler Sven, 2012, Datalog in Academia and Industry. Proceedings of the Second International Workshop, Datalog 2.0, P111, DOI 10.1007/978-3-642-32925-8_12
   Lee S, 2018, PROC VLDB ENDOW, V11, P1954, DOI 10.14778/3229863.3236233
   Lee Seokki, 2017, ABS170105699 CORR
   Liang Senlin., 2009, PROC 18 INT C WORLD, P601, DOI [10.1145/1526709.1526790, DOI 10.1145/1526709.1526790]
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Mangal R, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P462, DOI 10.1145/2786805.2786851
   Raghothaman M, 2018, ACM SIGPLAN NOTICES, V53, P722, DOI [10.1145/3192366.3192417, 10.1145/3296979.3192417]
   RAMAKRISHNAN R, 1991, LOGIC PROGRAMM, P321
   Shapiro EY., 1983, Algorithmic Program Debugging
   Silva MF, 2007, IASTED MODEL SIMUL, P143
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2007, ACM SIGPLAN NOTICES, V42, P112, DOI 10.1145/1273442.1250748
   Stamatogiannakis Manolis, 2015, P 7 USENIX WORKSH TH
   Subotic P, 2018, PROC VLDB ENDOW, V12, P141, DOI 10.14778/3282495.3282500
   Ullman J. D., 1989, Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P140, DOI 10.1145/73721.73736
   Whaley John, 2005, USING DATALOG BINARY, P97, DOI DOI 10.1007/11575467_8
   Widom Jennifer., 2005, CIDR, P262
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
   Zhao David, 2017, LARGE SCALE PROVENAN
   Zhou X, 2010, PROCEEDINGS OF THE ASME 8TH INTERNATIONAL CONFERENCE ON FUEL CELL SCIENCE, ENGINEERING, AND TECHNOLOGY 2010, VOL 2, P615
NR 51
TC 17
Z9 17
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2020
VL 42
IS 2
AR 7
DI 10.1145/3379446
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OJ1LU
UT WOS:000583729800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Kim, SW
   Rival, X
   Ryu, S
AF Kim, Se-Won
   Rival, Xavier
   Ryu, Sukyoung
TI A Theoretical Foundation of Sensitivity in an Abstract Interpretation
   Framework
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Abstract interpretation; program analysis; analysis sensitivity;
   analysis framework
ID DOMAINS; DESIGN
AB Program analyses often utilize various forms of sensitivity such as context sensitivity, call-site sensitivity, and object sensitivity. These techniques all allow for more precise program analyses, that are able to compute more precise program invariants, and to verify stronger properties. Despite the fact that sensitivity techniques are now part of the standard toolkit of static analyses designers and implementers, no comprehensive frameworks allow the description of all common forms of sensitivity. As a consequence, the soundness proofs of static analysis tools involving sensitivity often rely on ad hoc formalization, which are not always carried out in an abstract interpretation framework. Moreover, this also means that opportunities to identify similarities between analysis techniques to better improve abstractions or to tune static analysis tools can easily be missed.
   In this article, we present and formalize a framework for the description of sensitivity in static analysis. Our framework is based on a powerful abstract domain construction, and utilizes reduced cardinal power to tie basic abstract predicates to the properties analyses are sensitive to. We formalize this abstraction, and the main abstract operations that are needed to turn it into a generic abstract domain construction. We demonstrate that our approach can allow for a more precise description of program states, and that it can also describe a large set of sensitivity techniques, both when sensitivity criteria are static (known before the analysis) or dynamic (inferred as part of the analysis), and sensitive analysis tuning parameters. Last, we show that sensitivity techniques used in state-of-the-art static analysis tools can be described in our framework.
C1 [Kim, Se-Won] S Core, Seongnam Si, South Korea.
   [Rival, Xavier] PSL Univ, CNRS, ENS, INRIA Paris Rocquencourt, Paris, France.
   [Ryu, Sukyoung] Korea Adv Inst Sci & Technol, 291 Daehak Ro, Daejeon 34141, South Korea.
   [Kim, Se-Won] Hwangsaeul Ro 258, Seongnam Si, Gyeonggi Do, South Korea.
   [Rival, Xavier] DI Ecole Normale Super, 45 Rue Ulm, F-75230 Paris 05, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite PSL;
   Ecole Normale Superieure (ENS); Korea Advanced Institute of Science &
   Technology (KAIST); Universite PSL; Ecole Normale Superieure (ENS)
RP Kim, SW (corresponding author), S Core, Seongnam Si, South Korea.; Kim, SW (corresponding author), Hwangsaeul Ro 258, Seongnam Si, Gyeonggi Do, South Korea.
EM kim.sewon@gmail.com; Xavier.Rival@ens.fr; sryu.cs@kaist.ac.kr
RI Ryu, Sukyoung/C-2080-2011; Ryu, Sukyoung/A-8543-2015
OI Ryu, Sukyoung/0000-0002-0019-9772
FU National Research Foundation of Korea (NRF) [NRF-2017R1A2B3012020,
   2017M3C4A7068177]; European Research Council under the EU's seventh
   framework programme (FP7/2007-2013) [278673]; ARTEMIS [269335]; European
   Research Council (ERC) [278673] Funding Source: European Research
   Council (ERC)
FX This work has received funding from National Research Foundation of
   Korea (NRF) (Grants NRF-2017R1A2B3012020 and 2017M3C4A7068177) and the
   European Research Council under the EU's seventh framework programme
   (FP7/2007-2013), grant agreement 278673, Project MemCAD, and from the
   ARTEMIS Joint Undertaking no. 269335 (see Article II.9 of the JU Grant
   Agreement).
CR Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   Andreasen E, 2014, P 2014 ACM INT C OBJ
   [Anonymous], 1991, Ph.D. dissertation
   Bae S, 2014, P 22 ACM SIGSOFT S 1
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bourdoncle F., 1992, Journal of Functional Programming, V2, P407, DOI 10.1017/S0956796800000496
   Chang BYE, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P247, DOI 10.1145/1328438.1328469
   Cheung WT, 2016, EMPIR SOFTW ENG, V21, P517, DOI 10.1007/s10664-015-9368-6
   Cousot P., 1981, Program flow analysis. Theory and applications, P303
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P105, DOI 10.1145/1926385.1926399
   Giacobazzi R., 2005, ACM Transactions on Computational Logic, V6, P33, DOI 10.1145/1042038.1042040
   Giacobazzi R, 1999, THEOR COMPUT SCI, V216, P159, DOI 10.1016/S0304-3975(98)00194-7
   Giacobazzi R, 1998, ACM T PROGR LANG SYS, V20, P1067, DOI 10.1145/293677.293680
   Handjieva M, 1998, P 5 INT S STAT AN SA
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   IBM Research, 2003, TJ WATS LIB AN WALA
   Jeannet B, 2003, FORM METHOD SYST DES, V23, P5, DOI 10.1023/A:1024480913162
   KAIST PLRG, 2014, SAFE SCAL AN FRAM EC
   Kashyap V, 2014, 22 ACM SIGSOFT INT S
   Lee Hongki, 2012, P 19 INT WORKSH FDN
   Lee WG, 2012, INT J PRECIS ENG MAN, V13, P299, DOI 10.1007/s12541-012-0037-z
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Moller A., 2014, TAJS TYPE ANAL JAVAS
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Oh H, 2012, ACM SIGPLAN NOTICES, V47, P229, DOI 10.1145/2345156.2254092
   Oh Hakjoo, 2009, SPARROW
   Park Changhee, 2015, P 29 EUR C OBJ OR PR, V37, P735, DOI 10
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Sharir M., 1981, PROGRAM FLOW ANAL TH
   Smaragdakis Y, 2011, P 38 ANN ACM SIGPLAN, DOI DOI 10.1145/1926385.1926390
   Venet A., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P366
NR 35
TC 11
Z9 11
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2018
VL 40
IS 3
AR 13
DI 10.1145/3230624
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GT7HI
UT WOS:000444694800006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Abadi, M
   Birrell, A
   Harris, T
   Isard, M
AF Abadi, Martin
   Birrell, Andrew
   Harris, Tim
   Isard, Michael
TI Semantics of Transactional Memory and Automatic Mutual Exclusion
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Atomicity; correctness
ID LOCKING; MODEL
AB Software Transactional Memory (STM) is an attractive basis for the development of language features for concurrent programming. However, the semantics of these features can be delicate and problematic. In this article we explore the trade-offs semantic simplicity, the viability of efficient implementation strategies, and the flexibility of language constructs. Specifically, we develop semantics and type systems for the constructs of the Automatic Mutual Exclusion (AME) programming model; our results apply also to other constructs, such as atomic blocks. With this semantics as a point of reference, we study several implementation strategies. We model STM systems that use in-place update, optimistic concurrency, lazy conflict detection, and rollback. These strategies are correct only under nontrivial assumptions that we identify and analyze. One important source of errors is that some efficient implementations create dangerous "zombie" computations where a transaction keeps running after experiencing a conflict; the assumptions confine the effects of these computations.
C1 [Abadi, Martin] Univ Calif Santa Cruz, Microsoft Res, Santa Cruz, CA 95064 USA.
   [Birrell, Andrew; Isard, Michael] Microsoft Res, Silicon Valley, England.
   [Harris, Tim] Microsoft Res, Cambridge, England.
   [Abadi, Martin] Coll France, Paris, France.
C3 University of California System; University of California Santa Cruz;
   Microsoft; Microsoft; Microsoft; Universite PSL; College de France
RP Abadi, M (corresponding author), Univ Calif Santa Cruz, Microsoft Res, Santa Cruz, CA 95064 USA.
EM abadi@cs.ucsc.edu
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   ABADI M, 2008, MSRTR200843
   Abadi M, 2008, LECT NOTES COMPUT SC, V5201, P6, DOI 10.1007/978-3-540-85361-9_5
   Abadi M, 2008, LECT NOTES COMPUT SC, V5065, P510, DOI 10.1007/978-3-540-68679-8_32
   Abadi M, 2009, LECT NOTES COMPUT SC, V5501, P63, DOI 10.1007/978-3-642-00722-4_6
   Adl-Tabatabai AR, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1133981.1133985
   ADVE SV, 1990, SIGARCH COMPUT ARCHI, V18, P2
   Adya A, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P289
   Allen Eric., 2007, The Fortress Language Specification
   [Anonymous], 1993, P WINT 1993 US C
   Blundell C., 2006, IEEE Computer Architecture Letters, V5, P65, DOI 10.1109/L-CA.2006.18
   Bronson NG, 2009, ACM SIGPLAN NOTICES, V44, P213, DOI 10.1145/1594834.1480909
   Carlstrom B. D., 2006, PLDI 2006. Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation, P1, DOI 10.1145/1133981.1133983
   Cohen A, 2007, FMCAD 2007: FORMAL METHODS IN COMPUTER AIDED DESIGN, PROCEEDINGS, P37, DOI 10.1109/.40
   DALESSANDRO L, 2009, P 4 WORKSH T COMP TR
   DICE D, 2006, P ACM SIGPLAN WORKSH
   Dice D, 2006, LECT NOTES COMPUT SC, V4167, P194
   GROSSMAN D, 2006, P 2006 WORKSH MEM SY, P62
   Guerraoui R, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P372, DOI 10.1145/1375581.1375626
   Guerraoui R, 2008, LECT NOTES COMPUT SC, V5201, P21, DOI 10.1007/978-3-540-85361-9_6
   HARRIS T, 2003, P 18 ANN ACM SIGPLAN, P388, DOI DOI 10.1145/949305.949340
   Harris T, 2006, ACM SIGPLAN NOTICES, V41, P14, DOI 10.1145/1133981.1133984
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   ISARD M, 2007, P 11 WORKSH HOT TOP
   Jagannathan S, 2005, SCI COMPUT PROGRAM, V57, P164, DOI 10.1016/j.scico.2005.03.001
   Kuszmaul B.C., 2003, T EVERYWHERE
   LIBLIT B, 2006, 1571 U WISC MAD
   Manson J, 2005, REAL TIM SYST SYMP P, P62
   Manson Jeremy., 2005, Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'05, P378, DOI DOI 10.1145/1040305.1040336
   Menon V, 2008, SPAA'08: PROCEEDINGS OF THE TWENTIETH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P314
   Moore KF, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P51, DOI 10.1145/1328438.1328448
   Moore KE, 2006, INT S HIGH PERF COMP, P258, DOI 10.1109/HPCA.2006.1598134
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Saha B., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P187, DOI 10.1145/1122971.1123001
   Schneider FT, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P181
   Scott M.L., 2006, P 1 ACM SIGPLAN WORK
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Shpeisman T, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P78, DOI 10.1145/1250734.1250744
   SPEAR MF, 2007, 915 U ROCH
   Spear MF, 2008, LECT NOTES COMPUT SC, V5401, P275, DOI 10.1007/978-3-540-92221-6_19
   TASIRAN S, 2008, MSRTR200856
   Wang C, 2007, INT SYM CODE GENER, P34
   WELC A, 2005, P 20 ANN ACM SIGPLAN, P439
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 45
TC 18
Z9 20
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2011
VL 33
IS 1
AR 2
DI 10.1145/1889997.1889999
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TH
UT WOS:000286463800001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Marathe, J
   Mueller, F
   Mohan, T
   Mckee, SA
   De Supinski, BR
   Yoo, A
AF Marathe, Jaydeep
   Mueller, Frank
   Mohan, Tushar
   McKee, Sally A.
   De Supinski, Bronis R.
   Yoo, Andy
TI METRIC: Memory tracing via dynamic binary rewriting to identify cache
   inefficiencies
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; performance; dynamic binary rewriting; program
   instrumentation; data trace generation; data trace compression; cache
   analysis
AB With the diverging improvements in CPU speeds and memory access latencies, detecting and removing memory access bottlenecks becomes increasingly important. In this work we present METRIC, a software framework for isolating and understanding such bottlenecks using partial access traces. METRIC extracts access traces from executing programs without special compiler or linker support. We make four primary contributions. First, we present a framework for extracting partial access traces based on dynamic binary rewriting of the executing application. Second, we introduce a novel algorithm for compressing these traces. The algorithm generates constant space representations for regular accesses occurring in nested loop structures. Third, we use these traces for offline incremental memory hierarchy simulation. We extract symbolic information from the application executable and use this to generate detailed source-code correlated statistics including per-reference metrics, cache evictor information, and stream metrics. Finally, we demonstrate how this information can be used to isolate and understand memory access inefficiencies. This illustrates a potential advantage of METRIC over compile-time analysis for sample codes, particularly when interprocedural analysis is required.
C1 N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA.
   Indian Inst Technol, IBM India Res Lab, New Delhi 110016, India.
   Cornell Univ, Sch Elect & Comp Engn, Ithaca, NY 14853 USA.
   Lawrence Livermore Natl Lab, Ctr Appl Sci Comp, Livermore, CA 94551 USA.
C3 North Carolina State University; International Business Machines (IBM);
   Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Delhi; Cornell University; United States Department
   of Energy (DOE); Lawrence Livermore National Laboratory
RP Mueller, F (corresponding author), N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA.
EM mueller@cs.ncsu.edu
CR [Anonymous], 2000, PLDI '00
   Buck B, 2000, INT J HIGH PERFORM C, V14, P317, DOI 10.1177/109434200001400404
   BUCK BR, 2000, SUPERCOMPUTING, P64
   Burrows M., 1994, Algorithm, Data Compression, DOI 10.1.1.37.6774
   BURTSCHER M, 2004, VPC3 SOURCE CODE
   BURTSCHER M, 2004, P JOINT INT C MEAS M, P167
   CHATTERJEE S, 2001, P ACM SIGPLAN 01 C P, P286
   CHILIMBI T, 2001, P ACM SIGPLAN C PROG, P191
   CHILIMBI TRISHULM., 1999, PLDI 99 PROC ACM SIG, P13
   Cifuentes C, 2000, COMPUTER, V33, P60, DOI 10.1109/2.825697
   DEROSE L, 2002, P ACM IEEE SC C
   DING C, 2003, P ACM SIGPLAN C PROG
   Ghosh S, 1999, ACM T PROGR LANG SYS, V21, P703, DOI 10.1145/325478.325479
   GRANT B, 1999, P ACM SIGPLAN 99 C P, P293
   HAVLAK P, 1991, IEEE T PARALL DISTR, V2, P350, DOI 10.1109/71.86110
   Horowitz M, 1996, 23RD ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, PROCEEDINGS, P260
   *INTEL, 2004, INT ITANIUM2 PROC RE, V1
   Larus JamesR., 1995, PLDI '95, P291
   LARUS JR, 1994, SOFTWARE PRACT EXPER, V24, P197, DOI 10.1002/spe.4380240204
   Lebeck A. R., 1997, ACM Transactions on Modeling and Computer Simulation, V7, P42, DOI 10.1145/244804.244806
   LEBECK AR, 1994, COMPUTER, V27, P15, DOI 10.1109/2.318580
   MANNING N, 2005, SEQUITUR SOURCE CODE
   Marathe J, 2003, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2003.1191553
   MARATHE J, 2004, P INT C SUP, P287
   MARATHE J, 2005, IN PRESS INT C SUP
   MARATHE J, 2002, P WORKSH BIN TRANSL
   Mellor-Crummey John., 2001, Proceedings of the 15th International Conference on Supercomputing. ICS'01, P154
   MOHAN T, 2003, SUPERCOMPUT
   MOWRY TC, 1997, MICRO 30, P314
   MUELLER F, 2001, WORKSH BIN TRANSL IE
   NevillManning CG, 1997, COMPUT J, V40, P103, DOI 10.1093/comjnl/40.2_and_3.103
   NevillManning CG, 1997, IEEE DATA COMPR CONF, P3, DOI 10.1109/DCC.1997.581951
   SEWARD J, 2005, LIBBZIP2 SOURCE CODE
   SITES RL, 1993, COMMUN ACM, V36, P69, DOI 10.1145/151220.151227
   SRIVASTAVA A, 1994, P SIGPLAN 94 C PROGR, P196
   Tendler JM, 2002, IBM J RES DEV, V46, P5, DOI 10.1147/rd.461.0005
   UNG D, 2000, P WORKSH BIN TRANSL
   Vetter JS, 2003, J PARALLEL DISTR COM, V63, P853, DOI 10.1016/S0743-7315(03)00104-7
   WEIKLE D, 2000, P GM HOPP C
   WULF WA, 1992, ACM COMP AR, V20, P382, DOI 10.1145/146628.140402
   ZHONG Y, 2004, P ACM SIGPLAN C PROG
NR 41
TC 13
Z9 15
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2007
VL 29
IS 2
AR 12
DI 10.1145/1216374.1216380
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 161KL
UT WOS:000246013700006
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhang, XY
   Gupta, R
   Zhang, YT
AF Zhang, XY
   Gupta, R
   Zhang, YT
TI Cost and precision tradeoffs of dynamic data slicing algorithms
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; measurement; performance; program slicing; data dependences;
   pointer references; debugging
ID SLICES
AB Dynamic slicing algorithms are used to narrow the attention of the user or an algorithm to a relevant subset of executed program statements. Although dynamic slicing was first introduced to aid in user level debugging, increasingly applications aimed at improving software quality, reliability, security, and performance are finding opportunities to make automated use of dynamic slicing. In this paper we present the design and evaluation of three precise dynamic data slicing algorithms called the full preprocessing (FP), no preprocessing (NP) and limited preprocessing (LP) algorithms. The algorithms differ in the relative timing of constructing the dynamic data dependence graph and its traversal for computing requested dynamic data slices. Our experiments show that the LP algorithm is a fast and practical precise data slicing algorithm. In fact we show that while precise data slices can be orders of magnitude smaller than imprecise dynamic data slices, for small number of data slicing requests, the LP algorithm is faster than an imprecise dynamic data slicing algorithm proposed by Agrawal and Horgan.
C1 Univ Arizona, Dept Comp Sci, Tucson, AZ 85721 USA.
   Univ Texas, Dept Comp Sci, Richardson, TX 75083 USA.
C3 University of Arizona; University of Texas System; University of Texas
   Dallas
RP Univ Arizona, Dept Comp Sci, Gould Simpson Bldg,1040 E 4th St, Tucson, AZ 85721 USA.
EM xyzhang@cs.Arizona.edu; gupta@cs.Arizona.edu; zhangyt@utdallas.edu
OI Gupta, Rajiv/0000-0002-9348-3974
CR AGRAWAL H, 1993, SOFTWARE PRACT EXPER, V23, P589, DOI 10.1002/spe.4380230603
   Agrawal Hiralal, 1990, PLDI, P246, DOI 10.1145/93542.93576
   [Anonymous], PLDI 04 P ACM SIGPLA
   Beszédes A, 2002, PROC IEEE INT CONF S, P12, DOI 10.1109/ICSM.2002.1167743
   Beszédes A, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P105, DOI 10.1109/CSMR.2001.914974
   DUESTERWALD E, 1992, P 5 WORKSH LANG COMP, V757, P496
   Duesterwald Evelyn., 1992, PROCEEDING 2 IRVINE, P131
   FIELD J, 1995, P 22 ACM S PRINC PRO, P379
   Gupta N, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P144, DOI 10.1109/ASE.2001.989800
   GUPTA R, 1995, P 3 ACM SIGSOFT S FD, P29
   Harman M, 2001, PROC IEEE INT CONF S, P138, DOI 10.1109/ICSM.2001.972724
   HOFFNER T, 1995, EVALUATING COMPARISO
   Kamkar M, 1993, THESIS LINKOPING U S
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Korel B., 1994, P INT S SOFTWARE TES, P66
   Korel Bogdan., 1997, P 3 INT WORKSHOP AUT, P43
   MOCK M, 2002, P 10 ACM SIGSOFT S F, P71
   Nishimatsu A., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P422, DOI 10.1109/ICSE.1999.841032
   SAZEIDES Y, 2003, P 1 VAL PRED WORKSH
   TIP F, 1995, J PROGRAM LANG, V3, P121
   VENKATESH GA, 1995, ACM T PROGR LANG SYS, V17, P197, DOI 10.1145/201059.201062
   Venkatesh Guda A., 1991, P ACM SIGPLAN C PROG, P26
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser MD., 1979, PROGRAM SLICES FORMA
   Zhang XG, 2004, PROC INT CONF SOFTW, P502, DOI 10.1109/ICSE.2004.1317472
   Zilles CB, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P172, DOI [10.1109/ISCA.2000.854388, 10.1145/342001.339676]
   1997, TRIMARAN COMPILER RE
NR 27
TC 12
Z9 15
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2005
VL 27
IS 4
BP 631
EP 661
DI 10.1145/1075382.1075384
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 956AK
UT WOS:000231271100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Schulte, C
   Stuckey, PJ
AF Schulte, C
   Stuckey, PJ
TI When do bounds and domain propagation lead to the same search space?
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE constraint (logic) programming; finite domain constraints; bounds
   propagation; domain propagation; abstract interpretation; program
   analysis
AB This article explores the question of when two propagation-based constraint systems have the same behavior, in terms of search space. We categorize the behavior of domain and bounds propagators for primitive constraints, and provide theorems that allow us to determine propagation behaviors for conjunctions of constraints. We then show how we can use this to analyze CLP(FD) programs to determine when we can safely replace domain propagators by more efficient bounds propagators without increasing search space. Empirical evaluation shows that programs optimized by the analysis' results are considerably more efficient.
C1 KTH Royal Inst Technol, IMIT, SE-16440 Kista, Sweden.
   Univ Melbourne, Dept Comp Sci & Software Engn, Melbourne, Vic 3010, Australia.
C3 Royal Institute of Technology; University of Melbourne
RP KTH Royal Inst Technol, IMIT, Isafjordsgatan 39,Electrum 229, SE-16440 Kista, Sweden.
EM schulte@imit.kth.se; pjs@cs.mu.oz.au
OI Stuckey, Peter/0000-0003-2186-0459
CR [Anonymous], 1989, Constraint Satisfaction in Logic Programming
   [Anonymous], 2003, Principles of Constraint Programming
   [Anonymous], 1999, OPL OPTIMIZATION PRO
   Baptiste P., 2001, INT SERIES OPERATION
   BEASLEY JE, 1990, J OPER RES SOC, V41, P1069, DOI 10.2307/2582903
   DeLaBanda MG, 1996, ACM T PROGR LANG SYS, V18, P564, DOI 10.1145/232706.232734
   DEMOEN B, 1999, P 22 AUSTR COMP SCI, P217
   DINCBAS M, 1990, J LOGIC PROGRAM, V8, P75, DOI 10.1016/0743-1066(90)90052-7
   Garey M.R., 1979, COMPUTERS INTRACTABI
   Harvey W, 2003, CONSTRAINTS, V8, P173, DOI 10.1023/A:1022323717928
   Harvey W., 2002, P TRICS TECHN IMPL C, P39
   Kelly AD, 1998, ACM T PROGR LANG SYS, V20, P1223, DOI 10.1145/295656.295661
   Lagoon V, 2001, LECT NOTES COMPUT SC, V2024, P296
   LESAINT D, 2002, LNCS, V2470, P492
   MARRIOTT K, 1990, LOGIC PROGRAMM, P531
   Marriott K., 1998, PROGRAMMING CONSTRAI
   Martin P, 1996, LECT NOTES COMPUTER, V1084, P389
   Mehlhorn K., 2000, Principles and Practice of Constraint Programming - CP 2000. 6th International Conference, CP 2000. Proceedings (Lecture Notes in Computer Science Vol.1894), P306
   *MOZ CONS, 1999, P 1K NAT C ART INT A
   Quimper CG, 2003, LECT NOTES COMPUT SC, V2833, P600
   REGIN JC, 1994, PROCEEDINGS OF THE TWELFTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P362
   REGIN JC, 2000, LECT NOTES COMPUTER, V1894, P384
   Van Hentenryck P, 1998, J LOGIC PROGRAM, V37, P139, DOI 10.1016/S0743-1066(98)10006-7
   ZHAN Y, 2000, LECT NOTES COMPUTER, V1894, P470
NR 24
TC 19
Z9 21
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2005
VL 27
IS 3
BP 388
EP 425
DI 10.1145/1065887.1065889
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 937OF
UT WOS:000229934700002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Thammanur, S
   Pande, S
AF Thammanur, S
   Pande, S
TI A fast, memory-efficient register allocation framework for embedded
   systems
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; performance; code generation; compilers; compiler
   optimizations; dynamic compilation; embedded systems; register
   allocation
AB In this work, we describe a "just-in-time," usage density-based register allocator geared toward embedded systems with a limited general-purpose register set wherein speed, code size, and memory requirements are of equal concern. The main attraction of the allocator is that it does not make use of the traditional live range and interval analysis nor does it perform advanced optimizations based on range splitting but results in very good code quality. We circumvent the need for traditional analysis by using a measure of usage density of a variable. The usage density of a variable at a program point represents both the frequency and the density of the uses. We contend that by using this measure we can capture both range and frequency information which is essentially used by the good allocators based on splitting. We describe a framework based on this measure which has a linear complexity in terms of the program size. We perform comparisons with the static allocators based on graph coloring and the ones targeted toward just-in-time compilation systems like linear scan of live ranges. Through comparisons with graph coloring (Brigg's style) and live range-based ( linear scan) allocators, we show that the memory footprint and the size of our allocator are smaller by 20% to 30%. The speed of allocation is comparable and the speed of the generated code is better and its size smaller. These attributes make the allocator an attractive candidate for performing a fast, memory-efficient register allocation for embedded devices with a small number of registers.
C1 Univ Cincinnati, Dept ECECS, Cincinnati, OH 45219 USA.
   Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
C3 University System of Ohio; University of Cincinnati; University System
   of Georgia; Georgia Institute of Technology
RP Univ Cincinnati, Dept ECECS, Cincinnati, OH 45219 USA.
EM santosh@cc.gatech.edu
OI Pande, Santosh/0000-0001-6723-8062
CR [Anonymous], 1982, SIGPLAN Not, DOI DOI 10.1145/872726.806984
   BALA V, 2000, P PLDI 2000 MAY
   Bernstein David, 1989, P ACM SIGPLAN 1989 C, P258
   BRIGGS P, 1994, ACM T PROGR LANG SYS, V16, P428, DOI 10.1145/177492.177575
   Briggs P., 1992, P ACM SIGPLAN 1992 C, P311, DOI DOI 10.1145/143095.143143
   BURKE M, 1999, P ACM JAV GRAND C JU
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   CHOW FC, 1990, ACM T PROGR LANG SYS, V12, P501, DOI 10.1145/88616.88621
   Engler DawsonR., 1996, POPL 96, P131
   Grant B., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P163, DOI 10.1145/258993.259016
   GRANT B, 1999, P ACM SIGPLAN 99 C P, P293
   Grant B., 1999, UWCSE970303
   GUPTA R, 1994, ACM T PROGR LANG SYS, V16, P370, DOI 10.1145/177492.177499
   GUPTA R, 1989, P SIGPLAN 89 C PROGR, P264
   LEONE M, 1995, CMUCS95205
   MUCHNICK S, 1997, ADV COMPLILER DESIGN
   NOEL F, 1998, P INT C COMP LANG MA
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P895, DOI 10.1145/330249.330250
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P324, DOI 10.1145/316686.316697
   Poletto M., 1997, P ACM SIGPLAN 1997 C, P109
   Traub O., 1998, P ACM SIGPLAN C PROG, P142
   ZHANG T, 2003, 2003 ACM SIGPLAN C L, P209
   [No title captured]
   [No title captured]
NR 24
TC 6
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2004
VL 26
IS 6
BP 938
EP 974
DI 10.1145/1034774.1034776
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 876FA
UT WOS:000225480700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Benton, N
   Cardelli, L
   Fournet, C
AF Benton, N
   Cardelli, L
   Fournet, C
TI Modern concurrency abstractions for C#
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 16th European Conference on Object Oriented Programming (ECOOP 2002)
CY JUN 10-14, 2002
CL MALAGA, SPAIN
SP IBM, Microsoft Res, SPI, Coritel BPM, Telelogic, Sadiel, Assoc Int Technol Objets, Univ Malaga, Univ Extremandura, Dept Comp Sci
DE design; languages; asynchrony; chords; events; join calculus; messages;
   polyphonic C#; synchronization; threads
ID LANGUAGE
AB Polyphonic C-# is an extension of the C-# language with new asynchronous concurrency constructs, based on the join calculus. We describe the design and implementation of the language and give examples of its use in addressing a range of concurrent programming problems.
C1 Microsoft Res, Cambridge CB3 0FB, England.
C3 Microsoft
RP Microsoft Res, Roger Needham Bldg,7 JJ Thomson Ave, Cambridge CB3 0FB, England.
EM nick@microsoft.com; luca@microsoft.com; fournet@microsoft.com
OI Cardelli, Luca/0000-0002-8705-8488
CR Agha G., 1993, RES DIRECTIONS CONCU
   Agha G., 1990, ACTORS-A Model of Concurrent Computation in Distributed Systems, Artificial Intelligence
   America P., 1989, FORM ASP COMPUT, V1, P366
   ANDREWS GR, 1988, ACM T PROGR LANG SYS, V10, P51, DOI 10.1145/42192.42324
   Andrews Gregory R., 1993, SR PROGRAMMING LANGU
   Banatre J.-P., 1988, Future Generation Computer Systems, V4, P133, DOI 10.1016/0167-739X(88)90012-X
   BARCLAY T, 2000, P ACM SIGMOD
   BARCLAY T, 2002, MSRTR200253
   BARCLAY T, 2000, MSTR9929
   Ben-Ari M, 1998, CONCURRENCY-PRACT EX, V10, P485, DOI 10.1002/(SICI)1096-9128(199805)10:6<485::AID-CPE329>3.0.CO;2-2
   BENTON N, 2003, JINGLE BELLS SOLVING
   BIRRELL AD, 1987, 20 DEC SRC
   BIRRELL AD, 1989, 35 DEC SRC
   Buscemi M. G., 2001, Foundations of Software Science and Computation Structures. 4th International Conference, FOSSACS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2030), P104
   Cardelli L, 1999, IEEE T SOFTWARE ENG, V25, P309, DOI 10.1109/32.798321
   CHAKI S, 2002, P 29 ANN ACM SIGPLAN
   Conchon S., 1999, First International Symposium on Agent Systems and Applications/Third International Symposium on (Cat No.PR00340), P22, DOI 10.1109/ASAMA.1999.805390
   DAHL OJ, 1966, COMMUN ACM, V9, P671, DOI 10.1145/365813.365819
   DETLEFS DL, 1998, 159 DEC SRC
   *ECMA, 2001, ECMA334
   Fournet C, 2002, LECT NOTES COMPUT SC, V2395, P268
   Fournet C, 2000, LECT NOTES COMPUT SC, V1974, P397
   FOURNET C, 1996, P 23 ACM S PRINC PRO, P372, DOI DOI 10.1145/237721.237805
   GOSLING J, 1996, JAVA LANGUAGE SPECIF, pCH17
   GUREVICH Y, 2000, LNCS, V1912, P151
   HEWITT C, 1977, ARTIF INTELL, V8, P323, DOI 10.1016/0004-3702(77)90033-9
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   Hoare CAR., 1985, Communicating Sequential Processes
   IGARASHI A, 2001, P 28 ANN ACM SIGPLAN
   INMOS Limited, 1984, OCC PROGR MAN
   ITZSTEIN GS, 2002, C RES PRACTICE INFOR, V6, P37
   ITZSTEIN GS, 2003, IN PRESS P 8 AS PAC
   ITZSTEIN GS, 2001, ACRC01001 U S AUSTR
   KAMIN S, 1997, P 1 ACM SIGPLAN WORK
   LARUS JR, 2001, MSRTR200139
   Lea Doug, 1999, Concurrent Programming in Java. Second Edition: Design Principles and Patterns, V2nd
   LEFESSANT F, 1998, ELECT NOTES THEORETI, V16
   MATSUOKA S., 1993, RES DIRECTIONS CONCU, P107
   NIELSON HR, 1994, P 21 ANN ACM SIGPLAN
   Odersky M, 2000, LECT NOTES COMPUT SC, V1782, P1
   PHILIPPSEN M, 1995, TR95049 INT COMP SCI
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   RAMMING JC, 1997, P 1 USENIX C DOM SPE
   Reppy J., 1993, LECT NOTES COMPUTER, V693, P165, DOI 10.1007/3-540-56883-2_10
   Trono J. A., 1994, SIGCSE Bulletin, V26, P8, DOI 10.1145/187387.187391
   TRONO JA, 1994, SIGCSE B, V26, P63
   YONEZAWA A, 1990, COMPUTER SYSTEM SERI
NR 47
TC 73
Z9 85
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2004
VL 26
IS 5
BP 769
EP 804
DI 10.1145/1018203.1018205
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 853WB
UT WOS:000223858600002
OA Bronze
DA 2024-07-18
ER

PT J
AU Wu, PC
AF Wu, PC
TI On exponential-time completeness of the circularity problem for
   attribute grammars
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; theory; attribute grammars; alternating Turing
   machines; circularity problem; EXPTIME-complete
ID SIMPLER CONSTRUCTION; COMPLEXITY
AB Attribute grammars (AGs) are a formal technique for defining semantics of programming languages. Existing complexity proofs on the circularity problem of AGs are based on automata theory, such as writing pushdown acceptor and alternating Turing machines. They reduced the acceptance problems of above automata, which are exponential-time (EXPTIME) complete, to the AG circularity problem. These proofs thus show that the circularity problem is EXPTIME- hard, at least as hard as the most difficult problems in EXPTIME. However, none has shown that the problem is EXPTIME-complete. This paper presents an alternating Turing machine for the circularity problem. The alternating Turing machine requires polynomial space. Thus, the circularity problem is in EXPTIME and is then EXPTIME-complete.
C1 Natl Penghu Inst Technol, Dept Comp Sci & Informat Engn, Penghu, Taiwan.
C3 National Penghu University of Science & Technology
RP Natl Penghu Inst Technol, Dept Comp Sci & Informat Engn, Penghu, Taiwan.
EM pcwu@npit.edu.tw
CR [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   CHANDRA AK, 1981, J ACM, V28, P114, DOI 10.1145/322234.322243
   DERANSART P, 1984, ACTA INFORM, V21, P375, DOI 10.1007/BF00264616
   DILL JM, 1989, J ACM, V36, P92, DOI 10.1145/58562.77393
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   JAZAYERI M, 1981, J ACM, V28, P715, DOI 10.1145/322276.322283
   JAZAYERI M, 1975, COMMUN ACM, V18, P697, DOI 10.1145/361227.361231
   JONES ND, 1980, PB107 DAIMI AARH U C
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   RAIHA KJ, 1982, ACTA INFORM, V17, P185, DOI 10.1007/BF00288969
   Reps T.W., 1989, SYNTHESIZER GENERATO
NR 11
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2004
VL 26
IS 1
BP 186
EP 190
DI 10.1145/963778.963783
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 768UY
UT WOS:000188554500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Christensen, AS
   Moller, A
   Schwartzbach, MI
AF Christensen, AS
   Moller, A
   Schwartzbach, MI
TI Extending Java for high-level Web service construction
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; design; verification; interactive Web services; data-flow
   analysis; XML
AB We incorporate innovations from the <bigwig> project into the Java language to provide high-level features for Web service programming. The resulting language, JWIG, contains an advanced session model and a flexible mechanism for dynamic construction of XML documents, in particular XHTML. To support program development we provide a suite of program analyses that at compile time verify for a given program that no runtime errors can occur while building documents or receiving form input, and that all documents being shown are valid according to the document type definition for XHTML 1.0.
   We compare JWIG with Servlets and JSP which are widely used Web service development platforms. Our implementation and evaluation of JWIG indicate that the language extensions can simplify the program structure and that the analyses are sufficiently fast and precise to be practically useful.
C1 Aarhus Univ, Dept Comp Sci, BRICS, DK-8000 Aarhus C, Denmark.
C3 Aarhus University
RP Christensen, AS (corresponding author), Aarhus Univ, Dept Comp Sci, BRICS, Ny Munkegade,Bldg 540, DK-8000 Aarhus C, Denmark.
RI Möller, Andrea/GNP-5183-2022
OI Möller, Andrea/0000-0002-2345-1299; Moller, Anders/0000-0003-1333-2314
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   *APP VIRT MACH, 2002, JROCK FAST SERV JVM
   ATKINSON L, 2000, CORE PHP PROGRAMMING
   BEHLENDORF B, 2002, APACHE HTTP SERVER P
   Box D., 2000, SIMPLE OBJECT ACCESS
   BOYER L, 2000, VOICE EXTENSIBLE MAR
   Brabrand C, 1999, COMPUT NETW, V31, P1391, DOI 10.1016/S1389-1286(99)00025-0
   Brabrand C., 2000, World Wide Web, V3, P205, DOI 10.1023/A:1018772405468
   BRABRAND C, 2000, NOTES SERIES U AARHU
   BRABRAND C., 2002, ACM T INTERNET TECHN, V2, P79
   BRABRAND C, 2001, P ACM SIGPLAN SIGSOF, P221
   BRABRAND C, P 8 INT WORLD WID WE
   BRABRAND C, 2003, P 3 ACM SIGPLAN WORK
   BRAY T, 2000, EXTENSIBLE MARKUP LA
   Bray Tim., 1999, Namespaces in XML, W3C Recommendation 14 January 1999
   CHASE DR, 1990, P SIGPLAN 90 C PROGR, P296
   CHRISTENSEN AS, 2002, RS0224 BRICS U AARH
   CHRISTENSEN AS, 2002, JWIG USER MANUAL
   CHRISTENSEN AS, 2003, LECT NOTES COMPUTER, V2694
   Christensen E., 2001, WEB SERVICES DESCRIP
   DEAN J, 1995, LECT NOTES COMPUTER, V952
   FERNANDEZ M, 1999, P 2 C DOM SPEC LANG
   HOMER A, 2001, ASP NET PROGRAMMERS
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   HOSOYA H, 2000, LECT NOTES COMPUTER, V1997
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Klarlund N., 2002, Automated Software Engineering, V9, P285, DOI 10.1023/A:1016376608070
   KLARLUND N, 2000, NOTES SERIES U AARHU
   KLEIN G, 2001, JFLEX FAST SCANNER G
   LADD DA, 1996, WORLD WIDE WEB, V1
   LADD DA, P 4 INT WORLD WID WE
   MCCLANAHAN CR, 2002, STRUTS
   MOHRI M, 2001, ROBUSTNESS LANGUAGE, pCH9
   MOLLER A, 2001, BIGWIG RUNTIME SYSTE
   MOLLER A, 2002, DOCUMENT STRUCTURE D
   MOLLER A, 2001, DK BRIKS AUTOMATION
   *NETSCAPE, 1999, SERV SID JAVASCRIPT
   NIELSON F, 1999, PRINCIPLES PROGRAM A
   OSKOBOINY G, 2001, HTML VALIDATION SERV
   Pemberton S., 2000, XHTML 1 0 EXTENSIBLE
   Raggett D., 1999, HTML 4.01 specification
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   SANDHOLM A, 2000, P 27 ACM SIGPLAN SIG
   Sun BW, 2001, CHEM LETT, P2, DOI 10.1246/cl.2001.2
   *SUN MICR, 2002, JAXB
   Sun Microsystems, 2001, JAV SERVL SPEC VERS
   SUNDARESAN V, 2000, P ACM SIGPLAN C OBJ
   Thomas B, 2001, CR-NEW CENTEN REV, V1, P1, DOI 10.1353/ncr.2003.0072
   Vallee-Rai R., 1999, P IBM CTR ADV STUD C
   *WAP FOR, 2001, WIR MARK LANG VERS 2
NR 50
TC 31
Z9 34
U1 1
U2 10
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2003
VL 25
IS 6
BP 814
EP 875
DI 10.1145/945885.945890
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 733DN
UT WOS:000185984800003
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Haselwarter, PG
   Rivas, E
   Van Muylder, A
   Winterhalter, T
   Abate, C
   Sidorenco, N
   Hritcu, C
   Maillard, K
   Spitters, B
AF Haselwarter, Philipp G.
   Rivas, Exequiel
   Van Muylder, Antoine
   Winterhalter, Theo
   Abate, Carmine
   Sidorenco, Nikolaj
   Hritcu, Catalin
   Maillard, Kenji
   Spitters, Bas
TI SSProve: A Foundational Framework for Modular Cryptographic Proofs in
   Coq
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE High-assurance cryptography; game-based proofs; state-separating proofs;
   modular proofs; machine-checked proofs; probabilistic relational program
   logic; formal verification
ID SECURITY; ENCRYPTION
AB State-separating proofs (SSP) is a recent methodology for structuring game-based cryptographic proofs in a modular way, by using algebraic laws to exploit the modular structure of composed protocols. While promising, this methodology was previously not fully formalized and came with little tool support. We address this by introducing SSProve, the first general verification framework for machine-checked state-separating proofs. SSProve combines high-level modular proofs about composed protocols, as proposed in SSP, with a probabilistic relational program logic for formalizing the lower-level details, which together enable constructing machine-checked cryptographic proofs in the Coq proof assistant. Moreover, SSProve is itself fully formalized in Coq, including the algebraic laws of SSP, the soundness of the program logic, and the connection between these two verification styles.
   To illustrate SSProve, we use it to mechanize the simple security proofs of ElGamal and pseudo-random-function-based encryption. We also validate the SSProve approach by conducting two more substantial case studies: First, we mechanize an SSP security proof of the key encapsulation mechanism-data encryption mechanism (KEM-DEM) public key encryption scheme, which led to the discovery of an error in the original paper proof that has since been fixed. Second, we use SSProve to formally prove security of the sigma-protocol zero-knowledge construction, and we moreover construct a commitment scheme from a sigma-protocol to compare with a similar development in CryptHOL. We instantiate the security proof for sigma-protocols to give concrete security bounds for Schnorr's sigma-protocol.
C1 [Haselwarter, Philipp G.; Sidorenco, Nikolaj; Spitters, Bas] Aarhus Univ, Aabogade 34, DK-8200 Aarhus, Denmark.
   [Rivas, Exequiel] Tallinn Univ Technol, Ehitajate Tee 5, EE-12616 Tallinn, Estonia.
   [Van Muylder, Antoine] Katholieke Univ Leuven, Oude Markt 13, B-3000 Leuven, Belgium.
   [Winterhalter, Theo; Abate, Carmine; Hritcu, Catalin] MPI SP, Univ Str 140, D-44799 Bochum, Germany.
   [Maillard, Kenji] Inria Rennes, Campus Beaulieu,263 Ave Gen Leclerc, F-35042 Rennes, France.
C3 Aarhus University; Tallinn University of Technology; KU Leuven;
   Universite de Rennes
RP Haselwarter, PG (corresponding author), Aarhus Univ, Aabogade 34, DK-8200 Aarhus, Denmark.
EM philipp@haselwarter.org; erivas@dcc.fceia.unr.edu.ar;
   antoine.vanmuylder@kuleuven.be; theo.winterhalter@mpi-sp.org;
   carmine.abate@mpi-sp.org; sidorenco@cs.au.dk; catalin.hritcu@mpi-sp.org;
   kenji.maillard@inria.fr; spitters@cs.au.dk
OI Rivas, Exequiel/0000-0002-2114-624X; Haselwarter,
   Philipp/0000-0003-0198-7751; Winterhalter, Theo/0000-0002-9881-3696;
   Spitters, Bas/0000-0002-2802-0973; Van Muylder,
   Antoine/0000-0003-4144-9368
FU European Research Council under ERC [715753]; AFOSR Grant Homotopy type
   theory and probabilistic computation [12595060]; Concordium Blockchain
   Research Center at Aarhus University; Nomadic Labs via a grant on the
   Evolution, Semantics, and Engineering of the F* Verification System;
   German Federal Ministry of Education and Research BMBF [16KISK038];
   Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) as
   part of the Excellence Strategy of the German Federal and State
   Governments [EXC 2092 CASA-390781972]
FX This work was in part supported by the European Research Council under
   ERC Starting Grant SECOMP (No. 715753), by AFOSR Grant Homotopy type
   theory and probabilistic computation (No. 12595060), by the Concordium
   Blockchain Research Center at Aarhus University, by Nomadic Labs via a
   grant on the Evolution, Semantics, and Engineering of the F*
   Verification System, by the German Federal Ministry of Education and
   Research BMBF (Grant No. 16KISK038, Project 6GEM), and by the Deutsche
   Forschungsgemeinschaft (DFG, German Research Foundation) as part of the
   Excellence Strategy of the German Federal and State Governments-EXC 2092
   CASA-390781972.
CR Abate C, 2021, P IEEE COMPUT SECUR, P576, DOI 10.1109/CSF51468.2021.00048
   Abel A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000170
   Affeldt R, 2020, LECT NOTES COMPUT SC, V12167, P3, DOI 10.1007/978-3-030-51054-1_1
   Affeldt Reynald, 2021, MATHCOMP ANAL ANAL L
   Almeida JB, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2587, DOI 10.1145/3460120.3484771
   Almeida JB, 2020, P IEEE S SECUR PRIV, P965, DOI 10.1109/SP40000.2020.00028
   Almeida JB, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1607, DOI 10.1145/3319535.3363211
   Almeida JB, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P63, DOI 10.1145/3319535.3354228
   Almeida JB, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1807, DOI 10.1145/3133956.3134078
   Altenkirch T, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:3)2015
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Armand Michael, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P135
   Audebaud P, 2006, LECT NOTES COMPUT SC, V4014, P49, DOI 10.1007/11783596_6
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Barbosa M, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2541, DOI 10.1145/3460120.3484548
   Barbosa Manuel, 2021, P 42 IEEE S SEC PRIV
   Barnes R., 2022, The Messaging Layer Security (MLS) Protocol-Draft 13
   Barthe Gilles, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1884, DOI 10.1109/SP40001.2021.00046
   Barthe Gilles, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P146, DOI 10.1007/978-3-319-10082-1_6
   Barthe G, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1156, DOI 10.1145/2810103.2813697
   Barthe G, 2015, LECT NOTES COMPUT SC, V9450, P387, DOI 10.1007/978-3-662-48899-7_27
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Barthe G, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P375, DOI 10.1145/1866307.1866350
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe Gilles., 2013, P 2013 ACM SIGSAC C, P1247, DOI 10.1145/2508859.2516663
   Basin DA, 2020, J CRYPTOL, V33, P494, DOI 10.1007/s00145-019-09341-z
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bellare M, 2006, LECT NOTES COMPUT SC, V4004, P409
   Bellare M, 2015, J CRYPTOL, V28, P29, DOI 10.1007/s00145-013-9167-4
   Beringer L, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P207
   Bernstein DanielJ., 2009, CRYPTOGRAPHY NACL
   Bhargavan K, 2014, LECT NOTES COMPUT SC, V8617, P235, DOI 10.1007/978-3-662-44381-1_14
   Blanchet B, 2006, P IEEE S SECUR PRIV, P140, DOI 10.1109/SP.2006.1
   Boureanu I, 2021, P IEEE COMPUT SECUR, P591, DOI 10.1109/CSF51468.2021.00049
   Broadbent A, 2022, LECT NOTES COMPUT SC, V13242, P161, DOI 10.1007/978-3-030-99253-8_9
   Brzuska Chris, 2018, Advances in Cryptology - ASIACRYPT 2018. 24th International Conference on the Theory and Application of Cryptology and Information Security. Proceedings: Lecture Notes in Computer Science (LNCS 11274), P222, DOI 10.1007/978-3-030-03332-3_9
   Brzuska C., 2021, Key-schedule security for the TLS 1.3 standard
   Brzuska C, 2022, P IEEE S SECUR PRIV, P2535, DOI 10.1109/SP46214.2022.9833678
   Brzuska Chris, 2021, STATE SEPARATING PRO
   Butler D, 2021, J AUTOM REASONING, V65, P521, DOI 10.1007/s10817-020-09581-w
   Canetti R, 2020, J ACM, V67, DOI 10.1145/3402457
   Canetti R, 2019, P IEEE COMPUT SECUR, P167, DOI 10.1109/CSF.2019.00019
   Canetti Ran, 2021, UC DOMAIN SPEC UNPUB
   Coecke B, 2016, INFORM COMPUT, V250, P59, DOI 10.1016/j.ic.2016.02.008
   Corbineau Pierre, 2011, P 1 INT C CERT PROGR, V7086, P378, DOI [10.1007/978-3-642-25379, DOI 10.1007/978-3-642-25379]
   Cramer R, 2003, SIAM J COMPUT, V33, P167, DOI 10.1137/S0097539702403773
   Czajka L, 2018, J AUTOM REASONING, V61, P423, DOI 10.1007/s10817-018-9458-4
   Damgaard Ivan, 2011, LECT NOTES
   Delignat-Lavaud A, 2017, P IEEE S SECUR PRIV, P463, DOI 10.1109/SP.2017.58
   Dragan CC, 2022, P IEEE COMPUT SECUR, P335, DOI 10.1109/CSF54842.2022.9919663
   Dupressoir Francois, 2022, BRINGING STATE SEPAR
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   Firsov Denis, 2022, ZERO KNOWLEDGE EASYC
   Fournet C, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P341
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Gancher J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571223
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Haselwarter Philipp G., 2023, 2023185 CRYPT EPRINT
   Hazay C, 2010, INFORM SEC CRYPT TEX, P3, DOI 10.1007/978-3-642-14303-8
   Katsumata S, 2013, LECT NOTES COMPUT SC, V7794, P145, DOI 10.1007/978-3-642-37075-5_10
   KELLY GM, 1982, BASIC CONCEPTS ENRIC
   Kohbrok Konrad, 2020, RELATIONAL F STATE S
   Liao K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P640, DOI 10.1145/3314221.3314607
   Lochbihler A, 2019, P IEEE COMPUT SECUR, P152, DOI 10.1109/CSF.2019.00018
   MacLane S., 1978, CATEGORIES WORKING M, V5
   Mahboubi Assia, 2021, Mathematical components
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Maurer U, 2012, LECT NOTES COMPUT SC, V6993, P33, DOI 10.1007/978-3-642-27375-9_3
   Maurer Ueli, 2011, P C INN COMP SCI ICS, P1
   Metere Roberto, 2017, Computer Network Security. 7th International Conference on Mathematical Methods, Models, and Architectures for Computer Network Security, MMM-ACNS 2017. Proceedings: LNCS 10446, P275, DOI 10.1007/978-3-319-65127-9_22
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Milner R., 1990, The Definition of Standard ML
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Paulin-Mohring Christine, 2009, ALEA COQ LIB
   Petcher Adam, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P53, DOI 10.1007/978-3-662-46666-7_4
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Rauch Christoph, 2016, P 23 IFIP WG 1 3 INT, P208, DOI [10.1007/978-3-319-72044-9_14, DOI 10.1007/978-3-319-72044-9_14]
   Rescorla Eric, 2018, 5246 IETF RFC
   Rogaway P, 2018, LECT NOTES COMPUT SC, V10992, P3, DOI 10.1007/978-3-319-96881-0_1
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Rosulek Mike, 2021, JOY CRYPTOGRAPHY ONL
   Sangiorgi Davide, INT C AUT LANG PROGR, V55
   Schnorr C. P., 1991, Journal of Cryptology, V4, P161, DOI 10.1007/BF00196725
   Sheng Liang, 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P333, DOI 10.1145/199448.199528
   Shivakumar Basavesh Ammanaghatta, 2022, P ACM SIGSAC C COMP, P83, DOI DOI 10.1145/3548606.3560689
   Shoup Victor, 2004, Sequences of games: a tool for taming complexity in security proofs
   Sidorenco N, 2021, P IEEE COMPUT SECUR, P607, DOI 10.1109/CSF51468.2021.00050
   Sterling J, 2021, J ACM, V68, DOI 10.1145/3474834
   Stoughton Alley, 2018, EASYCRYPT REFERENCE
   Strub Pierre-Yves, 2020, XHL
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Urban C, 2008, J AUTOM REASONING, V40, P327, DOI 10.1007/s10817-008-9097-2
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Ye KQ, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2007, DOI 10.1145/3133956.3133974
NR 95
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2023
VL 45
IS 3
AR 15
DI 10.1145/3594735
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA R8CZ1
UT WOS:001066592300002
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Berger, ED
   Hollenbeck, C
   Maj, P
   Vitek, O
   Vitek, J
AF Berger, Emery D.
   Hollenbeck, Celeste
   Maj, Petr
   Vitek, Olga
   Vitek, Jan
TI On the Impact of Programming Languages on Code Quality: A Reproduction
   Study
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Programming Languages on Code Quality
AB In a 2014 article, Ray, Posnett, Devanbu, and Filkov claimed to have uncovered a statistically significant association between 11 programming languages and software defects in 729 projects hosted on GitHub. Specifically, their work answered tour research questions relating to software defects and programming languages. With data and code provided by the authors, the present article first attempts to conduct an experimental repetition of the original study. The repetition is only partially successful, due to missing code and issues with the classification of languages. The second part of this work focuses on their main claim, the association between bugs and languages, and performs a complete, independent reanalysis of the data and of the statistical modeling steps undertaken by Ray et al. in 2014. This reanalysis uncovers a number of serious flaws that reduce the number of languages with an association with defects down from 11 to only 4. Moreover, the practical effect size is exceedingly small. These results thus undermine the conclusions of the original study. Correcting the record is important, as many subsequent works have cited the 2014 article and have asserted, without evidence, a causal link between the choice of programming language for a given task and the number of software defects. Causation is not supported by the data at hand; and, in our opinion, even after fixing the methodological flaws we uncovered, too many unaccounted sources of bias remain to hope for a meaningful comparison of bug rates across languages.
C1 [Berger, Emery D.] Univ Massachusetts, Amherst, MA 01003 USA.
   [Berger, Emery D.] Microsoft Res, Redmond, WA 98052 USA.
   [Berger, Emery D.; Hollenbeck, Celeste; Maj, Petr; Vitek, Olga; Vitek, Jan] Northeastern Univ, Khoury Coll Comp Sci, 440 Huntington Ave, Boston, MA 02115 USA.
   [Maj, Petr; Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   Microsoft; Northeastern University; Czech Technical University Prague
RP Berger, ED (corresponding author), Univ Massachusetts, Amherst, MA 01003 USA.; Berger, ED (corresponding author), Microsoft Res, Redmond, WA 98052 USA.; Berger, ED (corresponding author), Northeastern Univ, Khoury Coll Comp Sci, 440 Huntington Ave, Boston, MA 02115 USA.
EM emery.berger@gmail.com; celeste.hollenbeck@gmail.com;
   majpetr@fit.cvut.cz; o.vitek@northeastern.edu; vitekj@me.com
RI Maj, Piotr/H-1069-2014; Vitek, Jan/J-9051-2014
OI Vitek, Jan/0000-0003-4052-3458
FU European Research Council under the European Union's Horizon 2020
   research and innovation programme [695412]; NSF [1518844, 1544542,
   1617892]; Czech Ministry of Education, Youth and Sports
   [CZ.02.1.010.00.015_0030000421]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1617892]
   Funding Source: National Science Foundation
FX This work received funding from the European Research Council under the
   European Union's Horizon 2020 research and innovation programme (grant
   agreement 695412), the NSF (awards 1518844, 1544542, and 1617892), and
   the Czech Ministry of Education, Youth and Sports (grant agreement
   CZ.02.1.010.00.015_0030000421).
CR [Anonymous], 2004, APPL LINEAR STAT MOD
   BENJAMINI Y, 1995, J R STAT SOC B, V57, P289, DOI 10.1111/j.2517-6161.1995.tb02031.x
   Bird C, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P121, DOI 10.1145/1595696.1595716
   Casalnuovo C, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P396, DOI 10.1145/3092703.3098230
   Colbry D, 2013, 2013 1ST IEEE WORKSHOP ON USER-CENTERED COMPUTER VISION (UCCV), P13, DOI 10.1109/UCCV.2013.6530801
   Colquhoun D, 2017, ROY SOC OPEN SCI, V4, DOI 10.1098/rsos.171085
   Devanbu Premkumar T., 2018, RES STATEMENT
   Faraway J.J., 2016, EXTENDING LINEAR MOD, DOI DOI 10.1201/9781315382722
   Feitelson Dror G., 2015, ACM SIGOPS Operating Systems Review, V49, P3
   Gomez O.S., 2010, International Symposium on Empirical Software Engineering and Measurement, P1, DOI [DOI 10.1145/1852786.1852790, 10.1145/1852786.1852790]
   Grolemund G., 2017, R for Data Science
   Halsey LG, 2015, NAT METHODS, V12, P179, DOI 10.1038/nmeth.3288
   Herzig Kim, 2013, P INT C SOFTW ENG IC, DOI [10. 1109/ICSE.2013.6606585, DOI 10.1109/ICSE.2013.6606585]
   Ioannidis JPA, 2005, PLOS MED, V2, P696, DOI 10.1371/journal.pmed.0020124
   Klees G, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2123, DOI 10.1145/3243734.3243804
   Krill P, 2014, InfoWorld
   Krishnamurthi S, 2015, COMMUN ACM, V58, P34, DOI 10.1145/2658987
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Mockus A, 2000, PROC IEEE INT CONF S, P120, DOI 10.1109/ICSM.2000.883028
   Monperrus M, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P234, DOI 10.1145/2568225.2568324
   Nanz Sebastian, 2015, P INT C SOFTW ENG IC
   Peng RD, 2011, SCIENCE, V334, P1226, DOI 10.1126/science.1213847
   Qiu D, 2017, J SYST SOFTWARE, V123, P160, DOI 10.1016/j.jss.2016.10.017
   Ray B, 2016, PERSPECTIVES ON DATA SCIENCE FOR SOFTWARE ENGINEERING, P115
   Ray B, 2017, COMMUN ACM, V60, P91, DOI 10.1145/3126905
   Ray B, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P155, DOI 10.1145/2635868.2635922
   Reyes RP, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1195, DOI 10.1145/3180155.3180161
   Tian Yuan, 2012, P INT C SOFTW ENG IC, DOI [10.1109/ICSE.2012.6227176, DOI 10.1109/ICSE.2012.6227176]
   Vitek J., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P33
   Wasserstein RL, 2016, AM STAT, V70, P129
   Zhang Jie, 2018, ABS180101025 CORR
NR 31
TC 28
Z9 29
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2019
VL 41
IS 4
AR 21
DI 10.1145/3340571
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NG6RI
UT WOS:000564108400002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bugliesi, M
   Calzavara, S
   Eigner, F
   Maffei, M
AF Bugliesi, Michele
   Calzavara, Stefano
   Eigner, Fabienne
   Maffei, Matteo
TI Affine Refinement Types for Secure Distributed Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Security; Theory; Verification; Substructural logics; type systems;
   analysis of security protocols
ID VERIFICATION; TOOL
AB Recent research has shown that it is possible to leverage general-purpose theorem-proving techniques to develop powerful type systems for the verification of a wide range of security properties on application code. Although successful in many respects, these type systems fall short of capturing resource-conscious properties that are crucial in large classes of modern distributed applications. In this article, we propose the first type system that statically enforces the safety of cryptographic protocol implementations with respect to authorization policies expressed in affine logic. Our type system draws on a novel notion of "exponential serialization" of affine formulas, a general technique to protect affine formulas from the effect of duplication. This technique allows formulate of an expressive logical encoding of the authentication mechanisms underpinning distributed resource-aware authorization policies. We discuss the effectiveness of our approach on two case studies: the EPMO e-commerce protocol and the Kerberos authentication protocol. We finally devise a sound and complete type-checking algorithm, which is the key to achieving an efficient implementation of our analysis technique.
C1 [Bugliesi, Michele; Calzavara, Stefano] Univ Ca Foscari Venezia, Dipartimento Sci Ambientali Informat & Stat, I-30170 Venice, Italy.
   [Eigner, Fabienne; Maffei, Matteo] Univ Saarland, CISPA, Dept Comp Sci, D-66123 Saarbrucken, Germany.
C3 Universita Ca Foscari Venezia; Saarland University
RP Bugliesi, M (corresponding author), Univ Ca Foscari Venezia, Dipartimento Sci Ambientali Informat & Stat, Via Torino 155, I-30170 Venice, Italy.
EM bugliesi@unive.it; calzavara@dais.unive.it; eigner@cs.uni-saarland.de;
   maffei@cs.uni-saarland.de
OI Bugliesi, Michele/0000-0002-4567-3351; Calzavara,
   Stefano/0000-0001-9179-8270
FU German Research Foundation (DFG); German Federal Ministry of Education
   and Research (BMBF) through the Center for IT-Security, Privacy and
   Accountability (CISPA); Italian Ministry for University and Research
   (MIUR) through the ADAPT project; Italian Ministry for University and
   Research (MIUR) through the CINA project
FX This work was supported by the German Research Foundation (DFG) through
   the Emmy Noether program, the German Federal Ministry of Education and
   Research (BMBF) through the Center for IT-Security, Privacy and
   Accountability (CISPA), and by the Italian Ministry for University and
   Research (MIUR) through the ADAPT and CINA projects.
CR Abadi M, 2001, ACM SIGPLAN NOTICES, V36, P104, DOI 10.1145/373243.360213
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Armando A, 2005, LECT NOTES COMPUT SC, V3576, P281
   Backes M., 2007, P 5 ACM WORKSH FORM, P101
   Backes M, 2014, J COMPUT SECUR, V22, P301, DOI 10.3233/JCS-130493
   Backes M, 2012, LECT NOTES COMPUT SC, V6993, P1, DOI 10.1007/978-3-642-27375-9_1
   Backes M, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P387, DOI 10.1145/1866307.1866351
   Backes M, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P308, DOI 10.1109/CSF.2009.24
   Backes M, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P357
   Backes Michael, 2007, P 20 IEEE S COMP SEC, P355
   Baillot P., 2010, P 12 INT ACM SIGPLAN, P219, DOI [10.1145/1836089.1836118, DOI 10.1145/1836089.1836118]
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Bhargavan K, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P124, DOI 10.1109/CSF.2009.26
   Bhargavan K, 2010, ACM SIGPLAN NOTICES, V45, P445, DOI 10.1145/1707801.1706350
   Bhargavan Karthikeyan, 2008, ACM T PROGR LANG SYS, V31
   Bierhoff K, 2007, ACM SIGPLAN NOTICES, V42, P301, DOI 10.1145/1297105.1297050
   Blanchet B, 2001, P IEEE CSFW, P82, DOI 10.1109/CSFW.2001.930138
   Blanchet B., 2011, Cryptology and Information Security Series), V5, P86
   Bugliesi M, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P112, DOI 10.1109/CSFW.2005.8
   Bugliesi M, 2004, LECT NOTES COMPUT SC, V2986, P140
   Bugliesi M., 2004, 2004 ACM WORKSH FORM, P1
   Bugliesi M, 2013, LECT NOTES COMPUT SC, V7796, P105, DOI 10.1007/978-3-642-36830-1_6
   Bugliesi M, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P83, DOI 10.1109/CSF.2011.13
   Bugliesi Michele, 2012, TGC 12, P19
   Bugliesi Michele, 2007, JCS, V15, P563
   Chapin PC, 2008, ACM COMPUT SURV, V40, DOI 10.1145/1380584.1380587
   Cremers CJF, 2008, LECT NOTES COMPUT SC, V5123, P414
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Focardi R., 2011, Formal Models Tech Anal Secur Protoc, V5, P143, DOI [10.3233/978-1-60750-714-7-143, DOI 10.3233/978-1-60750-714-7-143]
   FOURNET C, 2005, 14 EUR S PROGR 2005, V3444, P141
   Fournet C, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P31, DOI 10.1109/CSF.2007.7
   Fournet C, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P341
   Girard J., 1995, ADV LINEAR LOGIC, V222, P1, DOI DOI 10.1017/CB09780511629150.002
   Gordon A. D., 2004, Journal of Computer Security, V12, P435
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   Guttman JD, 2004, LECT NOTES COMPUT SC, V2986, P325
   Maffei M., 2004, P 2 INT WORKSH SEC I, P55
   Mandelbaum Y, 2003, ACM SIGPLAN NOTICES, V38, P213, DOI 10.1145/944746.944725
   Meier Simon, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P696, DOI 10.1007/978-3-642-39799-8_48
   MORRIS JH, 1973, COMMUN ACM, V16, P15, DOI 10.1145/361932.361937
   Naden K, 2012, ACM SIGPLAN NOTICES, V47, P557, DOI 10.1145/2103621.2103722
   Steiner J. G., 1988, USENIX Association Winter Conference Dallas 1988. Proceedings, P191
   Sumii E, 2007, THEOR COMPUT SCI, V375, P169, DOI 10.1016/j.tcs.2006.12.032
   Sunshine J, 2011, ACM SIGPLAN NOTICES, V46, P713, DOI 10.1145/2076021.2048122
   Swamy N, 2011, ACM SIGPLAN NOTICES, V46, P266, DOI 10.1145/2034574.2034811
   Tiu A, 2012, J APPL LOGIC, V10, P330, DOI 10.1016/j.jal.2012.07.007
   Tomura Naoyuki, 1995, LLPROVER LINEAR LOGI
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Troelstra A.S., 1992, LNS, V29
NR 50
TC 3
Z9 3
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2015
VL 37
IS 4
AR 11
DI 10.1145/2743018
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CP6NT
UT WOS:000360005000001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Betts, A
   Chong, N
   Donaldson, AF
   Ketema, J
   Qadeer, S
   Thomson, P
   Wickerson, J
AF Betts, Adam
   Chong, Nathan
   Donaldson, Alastair F.
   Ketema, Jeroen
   Qadeer, Shaz
   Thomson, Paul
   Wickerson, John
TI The Design and Implementation of a Verification Technique for GPU
   Kernels
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Verification; Verification; GPUs; concurrency; data races;
   barrier synchronization
ID AUTOMATIC-ANALYSIS; ABSTRACTION
AB We present a technique for the formal verification of GPU kernels, addressing two classes of correctness properties: data races and barrier divergence. Our approach is founded on a novel formal operational semantics for GPU kernels termed synchronous, delayed visibility (SDV) semantics, which captures the execution of a GPU kernel by multiple groups of threads. The SDV semantics provides operational definitions for barrier divergence and for both inter- and intra-group data races. We build on the semantics to develop a method for reducing the task of verifying a massively parallel GPU kernel to that of verifying a sequential program. This completely avoids the need to reason about thread interleavings, and allows existing techniques for sequential program verification to be leveraged. We describe an efficient encoding of data race detection and propose a method for automatically inferring the loop invariants that are required for verification. We have implemented these techniques as a practical verification tool, GPUVerify, that can be applied directly to OpenCL and CUDA source code. We evaluate GPUVerify with respect to a set of 162 kernels drawn from public and commercial sources. Our evaluation demonstrates that GPUVerify is capable of efficient, automatic verification of a large number of real-world kernels.
C1 [Betts, Adam; Chong, Nathan; Donaldson, Alastair F.; Ketema, Jeroen; Thomson, Paul; Wickerson, John] Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2BZ, England.
   [Qadeer, Shaz] Microsoft Res, Redmond, WA 98052 USA.
C3 Imperial College London; Microsoft
RP Betts, A (corresponding author), Univ London Imperial Coll Sci Technol & Med, Dept Comp, 180 Queens Gate, London SW7 2BZ, England.
EM a.betts@imperial.ac.uk; n.chong10@imperial.ac.uk;
   alastair.donaldson@imperial.ac.uk; j.ketema@imperial.ac.uk;
   qadeer@microsoft.com; paul.thomson11@imperial.ac.uk;
   j.wickerson@imperial.ac.uk
OI Chong, Nathan/0000-0001-7843-9556
FU EU FP7 STREP project CARP [287767]; EPSRC [EP/G051100/2]; EPSRC
   [EP/K011499/1, EP/I006761/1, EP/G051100/2] Funding Source: UKRI
FX This work was supported by the EU FP7 STREP project CARP (project number
   287767), by EPSRC project EP/G051100/2, and by two EPSRC-funded PhD
   studentships. Part of the work was carried out while Alastair Donaldson
   was a Visiting Researcher at Microsoft Research Redmond. This article is
   a revised and extended version of Betts et al. [2012].
CR Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   AMD, 2013, OPENCL PROGR GUID RE
   [Anonymous], 2000002 SRC
   [Anonymous], 2012, OPENCL SPECIFICATION
   [Anonymous], 2004, GPU gems
   Bardsley E., 2014, P IWOCL, P1, DOI [10.1145/2664666.2664673, DOI 10.1145/2664666.2664673]
   Bardsley E, 2014, LECT NOTES COMPUT SC, V8559, P226, DOI 10.1007/978-3-319-08867-9_15
   Bardsley E, 2014, LECT NOTES COMPUT SC, V8430, P230, DOI 10.1007/978-3-319-06200-6_18
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Betts A, 2012, ACM SIGPLAN NOTICES, V47, P113, DOI 10.1145/2398857.2384625
   Beyer D, 2007, ACM SIGPLAN NOTICES, V42, P300, DOI 10.1145/1273442.1250769
   Blom S, 2014, SCI COMPUT PROGRAM, V95, P376, DOI 10.1016/j.scico.2014.03.013
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cates JE, 2004, MED IMAGE ANAL, V8, P217, DOI 10.1016/j.media.2004.06.022
   Chong N, 2014, ACM SIGPLAN NOTICES, V49, P397, DOI 10.1145/2535838.2535882
   Chong N, 2013, ACM SIGPLAN NOTICES, V48, P605, DOI [10.1145/2544173.2509517, 10.1145/2509136.2509517]
   Chou CT, 2004, LECT NOTES COMPUT SC, V3312, P382
   Collingbourne Peter, 2012, Hardware and Software: Verification and Testing. 7th International Haifa Verification Conference (HVC 2011). Revised Selected Papers, P203, DOI 10.1007/978-3-642-34188-5_18
   Collingbourne P, 2013, LECT NOTES COMPUT SC, V7792, P270, DOI 10.1007/978-3-642-37036-6_16
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Donaldson AF, 2011, FORM METHOD SYST DES, V39, P83, DOI 10.1007/s10703-011-0124-2
   Donaldson AF, 2010, LECT NOTES COMPUT SC, V6015, P280, DOI 10.1007/978-3-642-12002-2_24
   Donaldson Alastair F., 2014, ELECTR COMMUN, V70
   Emmi M, 2011, ACM SIGPLAN NOTICES, V46, P411, DOI 10.1145/1925844.1926432
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Habermaier A, 2012, LECT NOTES COMPUT SC, V7211, P316, DOI 10.1007/978-3-642-28869-2_16
   Kahsai T, 2011, LECT NOTES COMPUT SC, V6617, P192, DOI 10.1007/978-3-642-20398-5_15
   Karmani RK, 2011, ACM SIGPLAN NOTICES, V46, P125, DOI 10.1145/2038037.1941573
   Khronos OpenCL Working Group, 2014, OPENCL SPEC VERS 2 0
   Khronos OpenCL Working Group, 2014, OPENCL EXT SPEC VERS
   Klus Petr, 2012, BMC Res Notes, V5, P27, DOI 10.1186/1756-0500-5-27
   Kojima Kensuke, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P58, DOI 10.1007/978-3-319-03542-0_5
   Lahiri SK, 2009, LECT NOTES ARTIF INT, V5663, P214, DOI 10.1007/978-3-642-02959-2_18
   Leung A, 2012, ACM SIGPLAN NOTICES, V47, P383, DOI 10.1145/2345156.2254110
   Li G., 2010, Proceedings of the eighteenth ACM SIGSOFT international symposium on Founda- tions of software engineering, FSE '10, P187
   Li GD, 2012, ACM SIGPLAN NOTICES, V47, P215, DOI 10.1145/2370036.2145844
   Li H, 2009, BIOINFORMATICS, V25, P1754, DOI 10.1093/bioinformatics/btp324
   Li Peng, 2012, P INT C HIGH PERF CO
   Lokhmotov Anton, 2011, P 2 UK GPU COMP C
   McMillan K. L., 2006, Computer Aided Verification. 18th International Conference. CAV 2006. Proceedings (Lecture Notes in Computer Science Vol. 4144), P123, DOI 10.1007/11817963_14
   McMillan KL, 1999, LECT NOTES COMPUT SC, V1703, P219
   Microsoft Corporation, 2012, C AMP LANG PROGR MOD
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Nvidia, 2012, CUDA C PROGR GUID VE
   Nyland L., 2007, GPU GEMS, P677
   Nyland Lars, 2012, COMMUNICATION
   Salas-Moreno RF, 2013, PROC CVPR IEEE, P1352, DOI 10.1109/CVPR.2013.178
   Srivastava S, 2009, ACM SIGPLAN NOTICES, V44, P223, DOI 10.1145/1543135.1542501
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Talupur Murali, 2008, P 8 INT C FORM METH
   Tripakis Stavros, 2010, P 2 USENIX WORKSH HO
   Urban C, 2009, ELECTRON NOTES THEOR, V247, P139, DOI 10.1016/j.entcs.2009.07.053
   Wei-Fan Chiang, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P213, DOI 10.1007/978-3-642-38088-4_15
   Weimer Westley, 2008, WORKSH SOFTW TOOLS M
   Wickerson John, 2014, ARCH FORMAL PROOFS
   [No title captured]
NR 61
TC 30
Z9 31
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2015
VL 37
IS 3
AR 10
DI 10.1145/2743017
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CL1JU
UT WOS:000356699500003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Dolby, J
   Hammer, C
   Marino, D
   Tip, F
   Vaziri, M
   Vitek, J
AF Dolby, Julian
   Hammer, Christian
   Marino, Daniel
   Tip, Frank
   Vaziri, Mandana
   Vitek, Jan
TI A Data-Centric Approach to Synchronization
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Concurrent object-oriented programming; data races; serializability;
   programming model
AB Concurrency-related errors, such as data races, are frustratingly difficult to track down and eliminate in large object-oriented programs. Traditional approaches to preventing data races rely on protecting instruction sequences with synchronization operations. Such control-centric approaches are inherently brittle, as the burden is on the programmer to ensure that all concurrently accessed memory locations are consistently protected. Data-centric synchronization is an alternative approach that offloads some of the work on the language implementation. Data-centric synchronization groups fields of objects into atomic sets to indicate that these fields must always be updated atomically. Each atomic set has associated units of work, that is, code fragments that preserve the consistency of that atomic set. Synchronization operations are added automatically by the compiler. We present an extension to the Java programming language that integrates annotations for data-centric concurrency control. The resulting language, called AJ, relies on a type system that enables separate compilation and supports atomic sets that span multiple objects and that also supports full encapsulation for more efficient code generation. We evaluate our proposal by refactoring classes from standard libraries, as well as a number of multithreaded benchmarks, to use atomic sets. Our results suggest that data-centric synchronization is easy to use and enjoys low annotation overhead, while successfully preventing data races. Moreover, experiments on the SPECjbb benchmark suggest that acceptable performance can be achieved with a modest amount of tuning.
C1 [Dolby, Julian; Tip, Frank; Vaziri, Mandana] IBM Corp, TJ Watson Res Ctr, Yorktown Hts, NY 10598 USA.
   [Hammer, Christian] Univ Saarland, Cyber Secur Lab, D-66123 Saarbrucken, Germany.
   [Vitek, Jan] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
   [Marino, Daniel] Symantec Res Labs, Culver City, CA 90230 USA.
C3 International Business Machines (IBM); Saarland University; Purdue
   University System; Purdue University; Symantec
RP Tip, F (corresponding author), IBM Corp, TJ Watson Res Ctr, POB 704, Yorktown Hts, NY 10598 USA.
EM tip@acm.org
RI Vitek, Jan/J-9051-2014; Hammer, Christian/IUP-7955-2023
OI Hammer, Christian/0000-0001-5955-3732
FU National Science Foundation [CCF-1048398, CCF-0938232, CNS-0716659]
FX This material is based on work supported by National Science Foundation
   grants CCF-1048398, CCF-0938232, and CNS-0716659. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   National Science Foundation. Authors' addresses: J. Dolby, F. Tip, and
   M. Vaziri, IBM T.J. Watson Research Center, P.O. Box 704, Yorktown
   Heights, NY 10598; C. Hammer, Cyber Security Lab, Saarland University,
   66123 Saarbrucken, Germany; J. Vitek, Department of Computer Science,
   Purdue University, 305 N. University Street, West Lafayette, IN 47907;
   D. Marino, Symantec Research Labs, 900 Corporate Pointe, Culver City, CA
   90230; corresponding author's email: tip@ acm.org
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Artho C, 2003, SOFTW TEST VERIF REL, V13, P207, DOI 10.1002/stvr.281
   Bergan T., 2010, Proceedings of ASPLOS, P53
   Bocchino Jr R. L., 2009, P OOPSLA, P97, DOI DOI 10.1145/1640089.1640097
   Boyapati C, 2001, ACM SIGPLAN NOTICES, V36, P56, DOI 10.1145/504311.504287
   BOYAPATI C, 2002, P 17 ACM SIGPLAN C O, P211
   Burrows M, 2004, CONCURR COMP-PRACT E, V16, P1161, DOI 10.1002/cpe.866
   Ceze Luis, 2008, P 2008 ACM SIGPLAN W, P6, DOI [10.1145/1353522, DOI 10.1145/1353522, 10.1145/1353522.1353525, DOI 10.1145/1353522.1353525]
   Cherem S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P304, DOI 10.1145/1375581.1375619
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   DEMSKY B, 2010, P INT C SOFTW ENG, P395
   Deng XG, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P442, DOI 10.1109/ICSE.2002.1007989
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Flanagan C, 2000, ACM SIGPLAN NOTICES, V35, P219, DOI 10.1145/358438.349328
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Greenhouse A, 1999, LECT NOTES COMPUT SC, V1628, P205
   Grothoff C, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286823
   Hammer C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P231, DOI 10.1145/1368088.1368120
   Harris T, 2003, ACM SIGPLAN NOTICES, V38, P388, DOI 10.1145/949343.949340
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   Kidd Nicholas, 2011, International Journal on Software Tools for Technology Transfer, V13, P495, DOI 10.1007/s10009-011-0197-7
   Kulkarni A, 2010, ACM SIGPLAN NOTICES, V45, P671, DOI 10.1145/1932682.1869514
   Lai Z., 2010, ICSE, P235, DOI [10.1145/1806799.1806836, DOI 10.1145/1806799.1806836]
   Leino K.R. M., 1999, P WORKSHOP OBJECT OR, P110
   Leino KRM, 1998, ACM SIGPLAN NOTICES, V33, P144, DOI 10.1145/286942.286953
   Liqiang Wang, 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P137, DOI 10.1145/1122971.1122993
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Lucia B, 2010, CONF PROC INT SYMP C, P222, DOI 10.1145/1816038.1815988
   McCloskey B, 2006, ACM SIGPLAN NOTICES, V41, P346, DOI 10.1145/1111320.1111068
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   O'Callahan R., 2003, SIGPLAN Notices, V38, P166, DOI 10.1145/966049.781528
   Savage Stefan., 1997, SOSP 97, P27, DOI DOI 10.1145/269005.266641
   Shan Lu, 2007, Operating Systems Review, V41, P103, DOI 10.1145/1323293.1294272
   Vaziri M, 2006, ACM SIGPLAN NOTICES, V41, P334, DOI 10.1145/1111320.1111067
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   Von Praun Christoph, 2004, J OBJECT TECHNOL, V3, P103
   Wang LQ, 2006, IEEE T SOFTWARE ENG, V32, P93, DOI 10.1109/TSE.2006.1599419
   Wrigstad T, 2009, LECT NOTES COMPUT SC, V5653, P445, DOI 10.1007/978-3-642-03013-0_21
   Xu M, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1064978.1065013
NR 41
TC 10
Z9 12
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2012
VL 34
IS 1
AR 4
DI 10.1145/2160910.2160913
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 933BD
UT WOS:000303333300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Renganarayanan, L
   Kim, D
   Strout, MM
   Rajopadhye, S
AF Renganarayanan, Lakshminarayanan
   Kim, Daegon
   Strout, Michelle Mills
   Rajopadhye, Sanjay
TI Parameterized Loop Tiling
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Parameterized tiling; bounding box; Fourier-Motzkin elimination; code
   generation
ID CODE GENERATION
AB Loop tiling is a widely used program optimization that improves data locality and enables coarse-grained parallelism. Parameterized tiled loops, where the tile sizes remain symbolic parameters until runtime, are quite useful for iterative compilers and autotuners that produce highly optimized libraries and codes. Although it is easy to generate such loops for (hyper-) rectangular iteration spaces tiled with (hyper-) rectangular tiles, many important computations do not fall into this restricted domain. In the past, parameterized tiled code generation for the general case of convex iteration spaces being tiled by (hyper-) rectangular tiles has been solved with bounding box approaches or with sophisticated and expensive machinery.
   We present a novel formulation of the parameterized tiled loop generation problem using a polyhedral set called the outset. By reducing the problem of parameterized tiled code generation to that of generating standard loops and simple postprocessing of these loops, the outset method achieves a code generation efficiency that is comparable to existing code generation techniques, including those for fixed tile sizes. We compare the performance of our technique with several other tiled loop generation methods on kernels from BLAS3 and scientific computations. The simplicity of our solution makes it well suited for use in production compilers-in particular, the IBM XL compiler uses the inset-based technique introduced in this article for register tiling. We also provide a complete coverage of parameterized tiling of perfect loop nests by describing three related techniques: (i) a scheme for separating full and partial tiles; (ii) a scheme for generating tiled loops directly from the abstract syntax tree representation of loops; (iii) a formal characterization of parameterized loop tiling using bilinear forms and a Symbolic Fourier-Motzkin Elimination (SFME)-based parameterized tiled loop generation method.
C1 [Renganarayanan, Lakshminarayanan] IBM Corp, TJ Watson Res Ctr, Yorktown Hts, NY 10598 USA.
   [Kim, Daegon] CORESPEQ Inc, Milpitas, CA USA.
   [Strout, Michelle Mills; Rajopadhye, Sanjay] Colorado State Univ, Ft Collins, CO 80523 USA.
C3 International Business Machines (IBM); Colorado State University
RP Renganarayanan, L (corresponding author), IBM Corp, TJ Watson Res Ctr, Yorktown Hts, NY 10598 USA.
EM lrengan@us.ibm.com
FU Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [0746693] Funding Source: National Science
   Foundation
CR Amarasinghe S.P, 1997, THESIS STANFORD U
   AMARASINGHE SP, 1993, SIGPLAN NOTICES, V28, P126
   ANCOURT C, 1991, SIGPLAN NOTICES, V26, P39, DOI 10.1145/109626.109631
   Andonov R, 1997, J PARALLEL DISTR COM, V45, P159, DOI 10.1006/jpdc.1997.1371
   [Anonymous], 1936, THESIS U BASEL
   [Anonymous], 2000, Loop Tiling for Parallelism
   Bastoul C, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P7, DOI 10.1109/PACT.2004.1342537
   BOULET P, 1994, INTEGRATION, V17, P33, DOI 10.1016/0167-9260(94)90019-1
   COLEMAN S, 1995, SIGPLAN NOTICES, V30, P279
   Dines LL, 1918, ANN MATH, V20, P191
   EAVES BC, 1992, MATH PROGRAM, V53, P307, DOI 10.1007/BF01585709
   EAVES BC, 1989, MATH OPER RES, V14, P502, DOI 10.1287/moor.14.3.502
   FOURIER L, 1827, HIST ACACDEMIE ROYAL, V7, pxlvii
   Goumas G, 2003, IEEE T PARALL DISTR, V14, P1021, DOI 10.1109/TPDS.2003.1239870
   Grosslinger Armin., 2004, P 11 WORKSHOP COMPIL, P1
   Hartono A, 2009, ICS'09: PROCEEDINGS OF THE 2009 ACM SIGARCH INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P147, DOI 10.1145/1542275.1542301
   Hostedt K., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P160, DOI 10.1145/263699.263716
   Irigoin F., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P319, DOI 10.1145/73560.73588
   Jiménez M, 2002, ACM T PROGR LANG SYS, V24, P409, DOI 10.1145/567097.567101
   Kamil S., 2006, MSPC'06: Proceedings of the 2006 workshop on Memory system performance and correctness, P51, DOI [10.1145/1178597, DOI 10.1145/1178597]
   Kelly W., 1995, Proceedings Frontiers'95. The Fifth Symposium on the Frontiers of Massively Parallel Computation, P332
   Kisuki T, 2000, 2000 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P237, DOI 10.1109/PACT.2000.888348
   Knijnenburg PMW, 2002, LECT NOTES COMPUT SC, V2268, P171
   LE VERGE H., 1994, RENPAR 6
   LE VERGE H., 1994, 830 PI IRISA
   LeFur M, 1996, CONCURRENCY-PRACT EX, V8, P445, DOI 10.1002/(SICI)1096-9128(199607)8:6<445::AID-CPE253>3.0.CO;2-G
   Lowenthal DK, 2000, INT J PARALLEL PROG, V28, P245, DOI 10.1023/A:1007577115980
   Nikolopoulos D. S., 2004, International Journal of High Performance Computing and Networking, V2, P22
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   Püschel M, 2005, P IEEE, V93, P232, DOI 10.1109/JPROC.2004.840306
   Quilleré F, 2000, INT J PARALLEL PROG, V28, P469, DOI 10.1023/A:1007554627716
   Rajopadhye S.V, 2009, CS09101 COL STAT U
   RAMANUJAM J, 1992, J PARALLEL DISTR COM, V16, P108, DOI 10.1016/0743-7315(92)90027-K
   Renganarayana L, 2009, PROCEEDINGS OF THE CONFERENCE ON HIGH PERFORMANCE COMPUTING NETWORKING, STORAGE AND ANALYSIS
   RENGANARAYANAN L., 2007, P ACM IEEE C SUP SC
   Schreiber R., 1990, 9038 RIACS NASA AM R
   WEISPFENNING V, 1994, MIP9404 U PASS FAK M
   Whaley R Clinton, 1998, SC 98 P 1998 ACMIEEE, P38, DOI [DOI 10.1109/SC.1998.10004, 10.5555/509058.509096]
   WILSON RP, 1994, SIGPLAN NOTICES, V29, P31, DOI 10.1145/193209.193217
   WOLF ME, 1991, SIGPLAN NOTICES, V26, P30
   Wolfe M. J, 1987, Proceedings of the Third SIAM Conference on Parallel Processing for Scientific Computing, Philadelphia, PA, USA
NR 41
TC 16
Z9 24
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2012
VL 34
IS 1
AR 3
DI 10.1145/2160910.2160912
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 933BD
UT WOS:000303333300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Gulavani, BS
   Chakraborty, S
   Ramalingam, G
   Nori, AV
AF Gulavani, Bhargav S.
   Chakraborty, Supratik
   Ramalingam, G.
   Nori, Aditya V.
TI Bottom-Up Shape Analysis using <i>LISF</i>
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Theory; Verification; Compositional analysis; hoare logic;
   separation logic
AB In this article, we present a new shape analysis algorithm. The key distinguishing aspect of our algorithm is that it is completely compositional, bottom-up and noniterative. We present our algorithm as an inference system for computing Hoare triples summarizing heap manipulating programs. Our inference rules are compositional: Hoare triples for a compound statement are computed from the Hoare triples of its component statements. These inference rules are used as the basis for bottom-up shape analysis of programs.
   Specifically, we present a Logic of Iterated Separation Formulae (LISF), which uses the iterated separating conjunct of Reynolds [2002] to represent program states. A key ingredient of our inference rules is a strong bi-abduction operation between two logical formulas. We describe sound strong bi-abduction and satisfiability procedures for LISF.
   We have built a tool called SPINE that implements these inference rules and have evaluated it on standard shape analysis benchmark programs. Our experiments show that SPINE can generate expressive summaries, which are complete functional specifications in many cases.
   Categories and Subject Descriptors: D. 2.1 [Software Engineering]: Requirements/Specifications; D. 2.4 [Software Engineering]: Software/Program Verification-Formal methods; programming by contract
C1 [Gulavani, Bhargav S.; Chakraborty, Supratik] Indian Inst Technol, Dept Comp Sci & Engn, Mumbai 400076, Maharashtra, India.
   [Ramalingam, G.; Nori, Aditya V.] Microsoft Res India, Bangalore 560080, Karnataka, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay; Microsoft
RP Gulavani, BS (corresponding author), Indian Inst Technol, Dept Comp Sci & Engn, Mumbai 400076, Maharashtra, India.
EM bhargav@cse.iitb.ac.in; supratik@cse.iitb.ac.in; grama@microsoft.com;
   adityan@microsoft.com
RI Chakraborty, Supratik/AAY-5937-2021
OI Chakraborty, Supratik/0000-0002-7527-7675
FU Microsoft Corporation; Microsoft Research India
FX The work of B.S. Gulavani was supported by Microsoft Corporation and
   Microsoft Research India under the Microsoft Research India PhD
   Fellowship Award.
CR Abdulla PA, 2004, LECT NOTES COMPUT SC, V3170, P35
   [Anonymous], 2007, TR20071201 TEL AV U
   [Anonymous], P 20 INT C COMP AID
   BARDIN S, 2005, P INT S AUT TECHN VE, P474
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Biering B, 2005, LECT NOTES COMPUT SC, V3444, P233
   BOIGELOT B, 2003, P INT C COMP AID VER, P223
   Bouajjani A, 2005, LECT NOTES COMPUT SC, V3440, P13
   BOUAJJANI A, 2004, P INT C COMP AID VER, P372
   Bouajjani A, 2006, LECT NOTES COMPUT SC, V4134, P52
   CALCAGNO C, 2007, P INT S STAT AN SAS, P402
   CALCAGNO C, 2009, P ANN S PRINC PROGR
   Cousot P., 1990, FORMAL MODELS SEMANT, V15, P843
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   GULAVANI BS, 2009, TR0931 CFDVS IIT BOM
   Guo BL, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P256, DOI 10.1145/1250734.1250764
   JEANNET B, 2004, P STAT AN S, P246
   MOLLER A, 2001, P C PROGR LANG DES I
   O'Hearn PW., 2001, Local reasoning about programs that alter data structures, volume 2142 of LNCS, V2142, P1
   Podelski A, 2008, LECT NOTES COMPUT SC, V5123, P314
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rinetzky N, 2005, LECT NOTES COMPUT SC, V3672, P284
   RINETZKY N, 2005, POPL, P296
   RINETZKY N, 2001, LNCS, V2027, P133
   SAGIV M, 1999, T PROG LANG SYST, V24, P2002
   TOUILI T, 2001, P C VER PAR SYST VEP, P342
   Yorsh G, 2006, LECT NOTES COMPUT SC, V3921, P94
NR 27
TC 7
Z9 7
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2011
VL 33
IS 5
AR 17
DI 10.1145/2039346.2039349
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 857AI
UT WOS:000297685600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Barthe, G
   Kunz, C
AF Barthe, Gilles
   Kunz, Cesar
TI An Abstract Model of Certificate Translation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Verification; Security; Program verification; static
   analysis; program optimizations; proof-carrying code
ID BYTECODE; JAVA
AB A certificate is a mathematical object that can be used to establish that a piece of mobile code satisfies some security policy. In general, certificates cannot be generated automatically. There is thus an interest in developing methods to reuse certificates generated for source code to provide strong guarantees of the compiled code correctness. Certificate translation is a method to transform certificates of program correctness along semantically justified program transformations. These methods have been developed in previous work, but they were strongly dependent on particular programming and verification settings. This article provides a more general development in the setting of abstract interpretation, showing the scalability of certificate translation.
C1 [Kunz, Cesar] Univ Politecn Madrid, E-28040 Madrid, Spain.
C3 Universidad Politecnica de Madrid
EM cesar.kunz@imdea.org
OI BARTHE, Gilles/0000-0002-3853-1777
FU European Projects [FP7-231620, FP7-256980]; Spanish project
   [TIN2009-14599, 10]; Madrid Regional project [S2009TIC-1465]; MICINN,
   Spain
FX This work was partially funded by European Projects FP7-231620 HATS and
   FP7-256980 NESSoS, Spanish project TIN2009-14599 DESAFIOS 10, Madrid
   Regional project S2009TIC-1465 PROMETIDOS. C. Kunz is funded by a Juan
   de la Cierva Fellowship, MICINN, Spain.
CR Albert E, 2005, LECT NOTES COMPUT SC, V3452, P380
   [Anonymous], PLDI 98
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   [Anonymous], P ACM WORKSH COMP SU
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   APPEL AW, 2001, TR63601 PRINC U
   Bannwart F, 2005, ELECTRON NOTES THEOR, V141, P255, DOI 10.1016/j.entcs.2005.02.026
   BARNETT M, 2005, LNCS, V3362, P151
   Barrett C, 2005, LECT NOTES COMPUT SC, V3576, P291
   Barthe G, 2006, LECT NOTES COMPUT SC, V3866, P112
   Barthe G, 2008, LECT NOTES ARTIF INT, V5195, P83, DOI 10.1007/978-3-540-71070-7_7
   Barthe G, 2008, LECT NOTES COMPUT SC, V4960, P368
   Barthe G, 2007, LECT NOTES COMPUT SC, V4421, P125
   Barthe G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538919
   BARTOLOMEO G, 2008, P MOBMID 08 1 WORKSH, P1
   BENTON N, 2004, POPL, P14
   Beringer L, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P233, DOI 10.1109/CSF.2007.30
   BESSON F, 2007, 6333 IRISA
   Cachera D, 2004, LECT NOTES COMPUT SC, V2986, P385
   Chaieb A, 2006, LECT NOTES COMPUT SC, V4281, P287
   Chalin P, 2007, LECT NOTES COMPUT SC, V4609, P227
   Chen JA, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P412, DOI 10.1145/1806596.1806643
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Crossman D., 2000, Proceedings of the ACM SIGPLAN Workshop on Types in Compilation, V2071, P117
   Grégoire B, 2008, LECT NOTES COMPUT SC, V4912, P23
   Hankin C., 2005, PRINCIPLES PROGRAM A
   KUNZ C, 2010, LECT NOTES COMPUTER, V6084
   LERNER S, 2005, P 32 ACM SIGPLAN SIG, P364
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Logozzo F, 2008, LECT NOTES COMPUT SC, V4959, P197
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   MULLER P, 2007, 565 ETH ZUR
   Necula GC, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P229, DOI 10.1145/248155.238781
   NECULA GC, 1998, CMUCS98154
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Rival X, 2003, LECT NOTES COMPUT SC, V2575, P41
   RIVAL X, 2004, PRINCIPLES PROGRAMMI, P1
   Rose E, 2003, J AUTOM REASONING, V31, P303, DOI 10.1023/B:JARS.0000021015.15794.82
   Saabas A, 2007, ELECTRON NOTES THEOR, V190, P103, DOI 10.1016/j.entcs.2007.02.063
   Saabas A, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P91, DOI 10.1145/1328408.1328422
   Seo SN, 2003, LECT NOTES COMPUT SC, V2895, P230
   Seo S, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286830
   Sorensen M., 2006, Lectures on the Curry-Howard Isomorphism
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   Wildmoser M, 2005, LECT NOTES COMPUT SC, V3444, P326
   Wildmoser M, 2004, LECT NOTES COMPUT SC, V3223, P305
   WILDMOSER M, 2005, ELECT NOTES THEOR CO, V141
   Wu Dinghao., 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, PPDP'03, P264
   Zuck L., 2002, Electronic Notes in Theoretical Computer Science, V65, DOI 10.1016/S1571-0661(04)80393-1
NR 51
TC 2
Z9 2
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2011
VL 33
IS 4
AR 13
DI 10.1145/1985342.1985344
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 792RI
UT WOS:000292766400002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bhargavan, K
   Fournet, C
   Gordon, AD
AF Bhargavan, Karthikeyan
   Fournet, Cedric
   Gordon, Andrew D.
TI Verifying Policy-Based Web Services Security
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Security; Theory; Verification; Web services; pi calculus;
   XML security
AB WS-SecurityPolicy is a declarative language for configuring web services security mechanisms. We describe a formal semantics for WS-SecurityPolicy and propose a more abstract language for specifying secure links between web services and their clients. We present the architecture and implementation of tools that (1) compile policy files from link specifications, and (2) verify by invoking a theorem prover whether a set of policy files run by any number of senders and receivers correctly implements the goals of a link specification, in spite of active attackers. Policy-driven web services implementations are prone to the usual subtle vulnerabilities associated with cryptographic protocols; our tools help prevent such vulnerabilities. We can verify policies when first compiled from link specifications, and also re-verify policies against their original goals after any modifications during deployment. Moreover, we present general security theorems for all configurations that rely on compiled policies.
C1 [Bhargavan, Karthikeyan; Fournet, Cedric; Gordon, Andrew D.] Microsoft Res, Cambridge CB3 0FB, England.
C3 Microsoft
RP Bhargavan, K (corresponding author), Microsoft Res, 7 JJ Thomson Ave, Cambridge CB3 0FB, England.
EM karthb@microsoft.com; fournet@microsoft.com; .adg@microsoft.com
CR Allamigeon X, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P140, DOI 10.1109/CSFW.2005.25
   [Anonymous], WEB SERVICES ADDRESS
   [Anonymous], GEODERMA
   [Anonymous], XML ENCRYPTION SYNTA
   [Anonymous], 4346 RFC INT ENG TAS
   Bhargavan K, 2005, THEOR COMPUT SCI, V340, P102, DOI 10.1016/j.tcs.2005.03.005
   Bhargavan K, 2003, LECT NOTES COMPUT SC, V3188, P197
   BHARGAVAN K, 2006, WEB SERVICE SECURITY, P324
   BHARGAVAN K, 2005, MSRTR200484
   BHARGAVAN K, 2008, P ACM S INF COMP COM, P123
   BHARGAVAN K, 2006, COMP SEC FDN WORKSH, P139
   Bhargavan K, 2007, ACM T INFORM SYST SE, V10, DOI 10.1145/1237500.1237504
   Bhargavan K, 2006, LECT NOTES COMPUT SC, V4184, P88
   Bhargavan Karthikeyan., 2005, P 2005 WORKSHOP SECU, P1
   Blanchet B, 2005, IEEE S LOG, P331
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2477, P342
   Blanchet B, 2001, P IEEE CSFW, P82, DOI 10.1109/CSFW.2001.930138
   BOX D, 2003, WEB SERVICES POLICY
   Della-Libera G., 2002, WEB SERVICES SECURIT
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   EASTLAKE D, 2002, XML SIGNATURE SYNTAX
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   Gordon AD, 2005, FORM ASP COMPUT, V17, P277, DOI 10.1007/s00165-004-0058-1
   GUTTMAN JD, 2005, INT J INF SECUR, V4, P29
   Lowe G., 2002, P WORKSH ISS THEOR S
   LUKELL S, 2003, P SO AFR TEL NETW AP
   *MICR CORP, 2004, WEB SERV ENH WSE 2 0
   MULLER F, 2001, SRICSL0107
   NADALIN A, 2004, WEB SERVICES SECURIT
   NADALIN A, 2007, WS SECURITYPOLICY 1
   Nadalin Anthony., 2006, Web Services Security: SOAP Message Security 1.1 (WS-Security 2004)
   NEEDHAM RM, 1978, COMMUN ACM, V21, P993, DOI 10.1145/359657.359659
   PERRIG A, 2001, P 13 C COMP AID VER, P241
   Pozza D, 2004, 18TH INTERNATIONAL CONFERENCE ON ADVANCED INFORMATION NETWORKING AND APPLICATIONS, VOL 1 (LONG PAPERS), PROCEEDINGS, P400, DOI 10.1109/AINA.2004.1283943
   Tatsubori M, 2004, IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P244, DOI 10.1109/ICWS.2004.1314745
   *W3C, 2003, SOAP VERS 1 2
   *W3C, 1999, XML PATH LANG XPATH
   Woo T. Y. C., 1993, Proceedings 1993 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.93CH3290-4), P178, DOI 10.1109/RISP.1993.287633
   Zheng LT, 2003, P IEEE S SECUR PRIV, P236, DOI 10.1109/SECPRI.2003.1199340
NR 39
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2008
VL 30
IS 6
AR 30
DI 10.1145/1391956.1391957
PG 59
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 373GL
UT WOS:000260958900001
OA Bronze
DA 2024-07-18
ER

PT J
AU Gil, J
   Pugh, W
   Weddell, GE
   Zibin, Y
AF Gil, Joseph (Yossi)
   Pugh, William
   Weddell, Grant E.
   Zibin, Yoav
TI Two-dimensional bidirectional object layout
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; measurement; performance; theory; bidirectional;
   coloring; hierarchy; inheritance; layout
ID SPACE; TABLES
AB Object layout schemes used in C++ and other languages rely on (sometimes numerous) compiler generated fields. We describe a language-independent object layout scheme, which is space optimal, that is, objects are contiguous, and contain no compiler generated fields other than a single type identifier. As in C++ and other multiple inheritance languages such as CECIL and DYLAN, the new scheme sometimes requires extra levels of indirection to access some of the fields. Using a data set of 28 hierarchies, totaling almost 50,000 types, we show that this scheme improves field access efficiency over standard implementations, and competes favorably with (the non-space-optimal) highly optimized C++ specific implementations. The benchmark includes an analytical model for computing the frequency of indirections in a sequence of field access operations. Our layout scheme relies on whole-program analysis, which requires about 10 microseconds per type on a contemporary architecture (Pentium III, 900Mhz, 256MB machine), even in very large hierarchies. We also present a layout scheme for separate compilation using the user-annotation of virtual inheritance edge that is used in C++.
C1 [Gil, Joseph (Yossi); Zibin, Yoav] Technion Israel Inst Technol, IL-32000 Haifa, Israel.
   [Pugh, William] Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
   [Weddell, Grant E.] Univ Waterloo, Waterloo, ON N2L 3G1, Canada.
C3 Technion Israel Institute of Technology; University System of Maryland;
   University of Maryland College Park; University of Waterloo
RP Gil, J (corresponding author), Technion Israel Inst Technol, IL-32000 Haifa, Israel.
EM yogi@cs.technion.ac.il; pugh@cs.umd.edu; gweddell@math.waterloo.ca;
   yoav@zibin.net
FU Israel Science Foundation [128/02]
FX Research supported in part by the generous funding of the Israel Science
   Foundation, grant No. 128/02.
CR [Anonymous], 1992, Combinatorics and partially ordered sets
   [Anonymous], 1984, Smalltalk-80: The Interactive Programming Environment
   BORNING A, 1982, P AAAI 82, P234
   CARGILL TA, 1993, ACM SIGPLAN INT C OB
   CHAMBERS C, 1993, TR930305 U WASH
   DIXON R, 1989, ACM SIGPLAN NOTICES, V24, P211
   Eckel N, 2000, LECT NOTES COMPUT SC, V1850, P394
   Gil J, 1999, ACM SIGPLAN NOTICES, V34, P256, DOI 10.1145/320385.320408
   Lippman StanleyB., 1996, INSIDE C OBJECT MODE
   MAGNUSSUN B, 1994, P INT C TECHN OBJ OR
   MOON DA, 1986, SIGPLAN NOTICES, V21, P1, DOI 10.1145/960112.28698
   MYERS AC, 1995, ACM SIGPLAN NOTICES, V30, P124
   PASCAL A, 1992, ACM SIGPLAN NOTICES, V27, P110
   PUGH W, 1990, ACM SIGPLAN NOTICES, V25, P85
   PUGH W, 1993, CS9322 U WAT DEP COM
   SHALIT A, 1997, DYLAN REFERENCE MANU
   Stroustrup B., 1997, The C++ Programming Language
   Stroustrup B., 1994, The Design and Evolution of C++
   Sweeney PF, 2003, SOFTWARE PRACT EXPER, V33, P595, DOI 10.1002/spe.519
   Zendra O, 1997, ACM SIGPLAN NOTICES, V32, P125, DOI 10.1145/263700.263728
   Zibin Y, 2002, ACM SIGPLAN NOTICES, V37, P142, DOI 10.1145/583854.582434
   Zibin Y, 2001, ACM SIGPLAN NOTICES, V36, P96, DOI 10.1145/504311.504290
   ZIBIN Y, 2003, P 30 ACM SIGPLAN SIG, P126
   [No title captured]
NR 24
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2008
VL 30
IS 5
AR 28
DI 10.1145/1387673.1387677
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 351SG
UT WOS:000259445600004
OA Bronze
DA 2024-07-18
ER

PT J
AU Furr, M
   Foster, JS
AF Furr, Michael
   Foster, Jeffrey S.
TI Checking type safety of foreign function calls
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; verification; foreign function interface; FFI; foreign
   function calls; representational type; multilingual type system;
   multilingual type inference; flow-sensitive type system; dataflow
   analysis; OCaml; Java; JNI; Java Native Interface
AB Foreign function interfaces (FFIs) allow components in different languages to communicate directly with each other. While FFIs are useful, they often require writing tricky low-level code and include little or no static safety checking, thus providing a rich source of hard-to-find programming errors. In this article, we study the problem of enforcing type safety across the OCaml-to-C FFI and the Java Native Interface (JNI). We present O-Saffire and J-Saffire, a pair of multilingual type inference systems that ensure C code that uses these FFIs accesses high-level data safely. Our inference systems use representational types to model C's low-level view of OCaml and Java values, and singleton types to track integers, strings, memory offsets, and type tags through C. J-Saffire, our Java system, uses a polymorphic flow-insensitive, unification-based analysis. Polymorphism is important because it allows us to precisely model user-defined wrapper functions and the more than 200 JNI functions. O-Saffire, our OCaml system, uses a monomorphic flow-sensitive analysis because, while polymorphism is much less important for the OCaml FFI flow-sensitivity is critical to track conditional branches, which are used when pattern matching OCaml data in C. O-Saffire also tracks garbage collection information to ensure that local C pointers to the OCaml heap are registered properly, which is not necessary for the JNI. We have applied O-Saffire and J-Saffire to a set of benchmarks and found many bugs and questionable coding practices. These results suggest that static checking of FFIs can be a valuable tool in writing correct multilingual software.
C1 [Furr, Michael; Foster, Jeffrey S.] Univ Maryland, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Furr, M (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM furr@cs.umd.edu
FU NSF [CCF-0346982, CCF-0430118]
FX This research was supported in part by NSF CCF-0346982 and CCF-0430118.
CR [Anonymous], P 11 INT C COMP CONS
   [Anonymous], P ICFP ICFP 99
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   AUERBACH J, 1999, P 19 INT C DISTR COM
   BARRETT D, 1998, THESIS U MASSACHUSET
   BEAZLEY DM, 1996, USENIX 4 ANN TCL TK
   BLUME M, 2001, P 1 INT WORKSH MULT
   BUBBA JF, 2001, P 25 INT COMP SOFTW
   CANNASSE N, 2004, OCAML JAVALIB
   Chandra S., 1999, Proceedings of the 1999 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering. (Toulouse, P66
   CHRISTENSEN AS, 2003, P 10 INT S STAT AN S
   DELINE R, 2004, MSRT200407
   FAHNDRICH M, 2000, P ACM C PROGR LANG D
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FISHER K, 2001, P 1 INT WORKSH MULT
   FURR M, 2006, P 15 EUR S PROGR VIE
   FURR M, 2005, PLDI 05, P62
   FURR M, 2005, JAVA SE 6 MUSTANG BU
   FURR M, 2006, CSTR4845 U MAR
   Gould C, 2004, PROC INT CONF SOFTW, P645, DOI 10.1109/ICSE.2004.1317486
   Gray DN, 1998, COMMUN ACM, V41, P55, DOI 10.1145/274946.274957
   Grechanik M, 2004, PROC INT CONF SOFTW, P357, DOI 10.1109/ICSE.2004.1317458
   Hamilton J, 2003, ACM SIGPLAN NOTICES, V38, P19, DOI 10.1145/772970.772973
   HAMILTON J, 1996, P US ANN TECHN C SAN
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   HUELSBERGEN L, 1996, PORTABLE C INTERFACE
   *JAV GNOM DEV, 2005, JAV BIND GNOM GTK LI
   Jones S. Peyton, 2001, ENG THEORIES SOFTWAR, P47
   Leroy Xavier., 2004, OBJECTIVE CAML SYSTE
   Liang S., 1999, Java native interface: programmers guide and reference, V1
   Lindholm T., 1997, JAVA VIRTUAL MACHINE
   Matthews Jacob, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P3, DOI 10.1145/1190216.1190220
   MEIJER E, 2001, P 15 EUR C OBJ OR PR
   NISHIMURA S, 1998, P 25 ANN ACM S PRINC
   OBJECT MANAGEMENT GROUP, 2004, COMM OBJ REQ BROK AR
   REMY D, 1989, P 16 ANN ACM S PRINC, P77
   TAN G, 2006, P IEEE INT S SEC SOF
   THIEMANN P, 2005, P ACM SIGPLAN INT WO
   Trifonov V, 1999, LECT NOTES COMPUT SC, V1576, P128
   Wright A. K., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P250, DOI 10.1145/182409.182485
NR 40
TC 18
Z9 19
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2008
VL 30
IS 4
AR 18
DI 10.1145/1377492.1377493
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 345YS
UT WOS:000259035300001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Henzinger, TA
   Kirsch, CM
AF Henzinger, Thomas A.
   Kirsch, Christoph M.
TI The embedded machine: Predictable, portable real-time code
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; real time; virtual machine
ID LANGUAGE; GIOTTO
AB The Embedded Machine is a virtual machine that mediates in real time the interaction between software processes and physical processes. It separates the compilation of embedded programs into two phases. The first phase, the platform-independent compiler phase, generates E code ( code executed by the Embedded Machine), which supervises the timing, not the scheduling of, application tasks relative to external events such as clock ticks and sensor interrupts. E code is portable and, given an input behavior, exhibits predictable (i.e., deterministic) timing and output behavior. The second phase, the platform-dependent compiler phase, checks the time safety of the E code, that is, whether platform performance ( determined by the hardware) and platform utilization ( determined by the scheduler of the operating system) enable its timely execution. We have used the Embedded Machine to compile and execute high-performance control applications written in Giotto, such as the flight control system of an autonomous model helicopter.
C1 Univ Calif Berkeley, Berkeley, CA 94720 USA.
   Salzburg Univ, A-5020 Salzburg, Austria.
C3 University of California System; University of California Berkeley;
   Salzburg University
RP Henzinger, TA (corresponding author), Ecole Polytech Fed Lausanne, CH-1015 Lausanne, Switzerland.
CR ARMSTRONG J, 1997, P 2 ACM SIGPLAN INT, P196
   Burns Alan., 1997, REAL TIME SYSTEMS PR, V2nd
   Buttazzo G., 1997, HARD REAL TIME COMPU
   Dean T., 1988, P 7 NAT C ART INT, P49
   Ferdinand Christian., 2001, EMSOFT 01, P469
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   HALEWACHS N, 1993, SYNCHRONOUS PROGRAMM
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2855, P241
   Henzinger TA, 2003, P IEEE, V91, P84, DOI 10.1109/JPROC.2002.805825
   Henzinger TA, 2002, LECT NOTES COMPUT SC, V2491, P76
   Kirsch ChristophM., 2005, PROC ACMUSENIX C VIR, P35
   Kirsch CM, 2002, LECT NOTES COMPUT SC, V2491, P46
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   PLAICE J, 1998, LUSTRE ESTEREL PORTA
   SANVIDO M, 1999, 317 ETH
   WEIL D, 2000, P INT C COMP ARCH SY, P2
   Wirth N, 1996, SOFTWARE-CONC TOOL, V17, P6
   WIRTH N, 1977, COMMUN ACM, V20, P577, DOI 10.1145/359763.359798
   [No title captured]
   [No title captured]
NR 20
TC 27
Z9 32
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 33
DI 10.1145/1286821.1286824
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Vansummeren, S
AF Vansummeren, Stijn
TI Type inference for unique pattern matching
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE pattern matching; disambiguation policies; programming languages; XML
ID XML
AB Regular expression patterns provide a natural, declarative way to express constraints on semistructured data and to extract relevant information from it. Indeed, it is a core feature of the programming language Perl, surfaces in various UNIX tools such as sed and awk, and has recently been proposed in the context of the XML programming language XDuce. Since regular expressions can be ambiguous in general, different disambiguation policies have been proposed to get a unique matching strategy. We formally define the matching semantics under both (1) the POSIX, and (2) the first and longest match disambiguation strategies. We show that the generally accepted method of defining the longest match in terms of the first match and recursion does not conform to the natural notion of longest match. We continue by solving the type inference problem for both disambiguation strategies, which consists of calculating the set of all subparts of input values a subexpression can match under the given policy.
C1 Hasselt Univ, Dept WNI, B-3590 Diepenbeek, Belgium.
C3 Hasselt University
RP Vansummeren, S (corresponding author), Hasselt Univ, Dept WNI, Agoralaan,Gebouw D, B-3590 Diepenbeek, Belgium.
EM stijn.vansummeren@uhasselt.be
CR ABITEBOUL S, 1997, INT J DIGITAL LIBRAR, V1, P1
   [Anonymous], 2000, Programming Perl
   Baader Franz, 1998, TERM REWRITING ALL
   BOAG S, 2005, XQUERY 1 0 XML QUERY
   BOOK R, 1971, IEEE T COMPUT, VC 20, P149, DOI 10.1109/T-C.1971.223204
   BRUGGEMANNKLEIN A, 2001, UNPUB REGULAR TREE R
   Buneman P, 2000, VLDB J, V9, P76, DOI 10.1007/s007780050084
   Clark J., 2001, RELAX NG SPECIFICATI
   DOUGHERTY D, 1996, SED AWK
   Elgaard J., 1998, Lecture Notes in Computer Science, V1427
   Frisch A, 2004, INT FED INFO PROC, V155, P661
   Frisch A, 2004, LECT NOTES COMPUT SC, V3142, P618
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   FRISCH A, 2003, P 8 ACM SIGPLAN INT, P51
   Fuchs Matthew, 1999, SCHEMA OBJECT ORIENT
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   Hosoya H, 2003, J FUNCT PROGRAM, V13, P961, DOI 10.1017/S0956796802004410
   HOSOYA H, 2003, 1397 RIMS KYOT U
   HOSOYA H, 2000, THESIS U TOKYO TOKYO
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   *I EL EL ENG, 1992, 10032 POSIX IEEE
   KLARLUND N, 2001, BRICS NOTES SERIES
   Laurikari V., 2001, THESIS HELSINKI U TE
   LAURIKARI V, 2001, S STRING PROC INF RE
   LEVIN MY, 2003, P ACM INT C FUNCT PR, P65
   Moller A., 2003, Document Structure Description 2.0
   MURATA M, 2001, P C EXTR MARK LANG M
   Murata M., 2001, P 20 S PRINC DAT SYS, P126
   MURATA M, 1999, HEDGE AUTOMATA FORMA
   Neumann A, 1998, LECT NOTES COMPUT SC, V1530, P134
   Neven F, 2002, SIGMOD REC, V31, P39, DOI 10.1145/601858.601869
   Neven F., 2001, LECT NOTES COMPUTER, V2582, P160
   STERLING L, 1994, ART PROLOG
   Suciu D, 2002, SIGMOD RECORD, V31, P89, DOI 10.1145/507338.507360
   SUMII E, 2003, COMMUNICATION
   TABUCHI N, 2002, WORKSH TYP PROGR TIP
   Thompson H. S. D. Beech, 2001, XML SCHEMA W3C RECOM
   Ullman JeffreyD., 1998, Elements of ML Programming
   VIANU V, 2001, P 20 ACM S PRINC DAT, P1, DOI DOI 10.1145/375551.375554
   Yergeau Francois., 2004, Extensible markup language (xml) 1.0 w3c recommendation
NR 41
TC 14
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2006
VL 28
IS 3
BP 389
EP 428
DI 10.1145/1133651.1133652
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052ZQ
UT WOS:000238273200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Palsberg, J
   Zhao, T
   Jim, T
AF Palsberg, J
   Zhao, T
   Jim, T
TI Automatic discovery of covariant read-only fields
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE types; constraints
ID EFFICIENT INFERENCE; CALCULUS
AB Read-only fields are useful in object calculi, pi calculi, and statically typed intermediate languages because they admit covariant subtyping, unlike updateable fields. For example, Glew's translation of classes and objects to an intermediate calculus relies crucially on covariant subtyping of read-only fields to ensure that subclasses are translated to subtypes.
   In this article, we present a type inference algorithm for an Abadi-Cardelli object calculus in which fields are marked either as updateable or as read-only. The type inference problem is P-complete, and our algorithm runs in O(n(3)) time. The same complexity results hold for the calculus in which the fields are not explicitly annotated as updateable or read-only; perhaps surprisingly, the annotations do not make type inference easier. We show that type inference is equivalent to the problem of solving type constraints, and this forms the core of our algorithm and implementation.
C1 Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
   AT&T Labs Res, Florham Pk, NJ 07932 USA.
C3 Purdue University System; Purdue University; AT&T
RP Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
EM palsberg@cs.purdue.edu; tzhao@cs.purdue.edu; trevor@research.att.com
RI Palsberg, Jens/JYO-6826-2024
OI Palsberg, Jens/0000-0003-4747-365X
CR Aiken Alexander., 1993, Proceedings of the conference on Functional programming languages and computer architecture, P31
   [Anonymous], 1996, A Theory of Objects
   BENKE M, 1993, LECT NOTES COMPUTER, V711, P272
   BRACHA G, 1998, P ACM S OBJ OR PROGR, P183
   Bugliesi M, 2002, INFORM COMPUT, V177, P2, DOI 10.1006/inco.2002.3091
   FREY A, 1997, P SAS 97 INT STAT AN
   GLEW N, 2000, P OOPSLA 00 ACM SIGP, P311
   HENGLEIN F, 1997, P 4 INT WORKSH FDN O
   HOANG M, 1995, P POPL 95, P176
   Igarashi A, 2000, INFORM COMPUT, V161, P1, DOI 10.1006/inco.2000.2872
   IGARASHI A, 2002, P ECOOP 02 16 EUR C
   KOZEN D, 1994, J COMPUT SYST SCI, V49, P306, DOI 10.1016/S0022-0000(05)80051-0
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   Mcallester D, 2002, J ACM, V49, P512, DOI 10.1145/581771.581774
   MILNER R, 1991, THEOR COMPUT SCI, V87, P209, DOI 10.1016/0304-3975(91)90033-X
   Milner R, 1990, HDB THEORETICAL COMP, P1201, DOI [10.1007/3-540-10235-3., DOI 10.1007/3-540-10235-3]
   MITCHELL BJ, 1991, GEOLOGY N AM, V1, P245
   Muller M., 2000, Constraints, V5, P7, DOI 10.1023/A:1009866317252
   Nielson F., 1989, PARLE '89. Parallel Architectures and Languages Europe. Vol. II: Parallel Languages Proceedings, P357
   Palsberg J., 1997, Nordic Journal of Computing, V4, P259
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P576, DOI 10.1145/210184.210187
   Palsberg J., 1997, Formal Aspects of Computing, V9, P49, DOI 10.1007/BF01212524
   Palsberg J, 1996, ACM T PROGR LANG SYS, V18, P519, DOI 10.1145/232706.232715
   PALSBERG J, 1995, INFORM COMPUT, V123, P198, DOI 10.1006/inco.1995.1168
   PIERCE B, 1993, ANN S LOG COMP SCI L, P376
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   REMY D, 1998, LECT NOTES COMPUTER, V1381
   Sulzmann Martin, 1999, ACRC99009 U S AUSTR
   TANG F, 2002, P FOOL 02 9 INT WORK
   TANG F, 2001, TYPE INFERENCE OBJEC
   TIURYN J, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P308, DOI 10.1109/LICS.1992.185543
   Wand M., 1995, Mathematical Structures in Computer Science, V5, P419, DOI 10.1017/S0960129500000815
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
NR 34
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2005
VL 27
IS 1
BP 126
EP 162
DI 10.1145/1053468.1053472
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 896KW
UT WOS:000226934000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Damiani, F
AF Damiani, F
TI Rank 2 intersection types for local definitions and conditional
   expressions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; theory; languages; type inference; principal typings;
   polymorphic recursion
ID UNIFICATION; SCHEMES
AB We propose a rank 2 intersection type system with new typing rules for local definitions (let-expressions and letrec-expressions) and conditional expressions (if-expressions and match-expressions). This is a further step towards the use of intersection types in "real" programming languages.
   The technique for typing local definitions relies entirely on the principal typing property (i.e. it does not depend on particulars of rank 2 intersection), so it can be applied to any system with principal typings. The technique for typing conditional expressions, which is based on the idea of introducing metrics on types to "limit the use" of the intersection type constructor in the types assigned to the branches of the conditionals, is instead tailored to rank 2 intersection. However, the underlying idea might also be useful for other type systems.
C1 Univ Turin, Dipartimento Informat, I-10149 Turin, Italy.
C3 University of Turin
RP Damiani, F (corresponding author), Univ Turin, Dipartimento Informat, Corso Svizzera 185, I-10149 Turin, Italy.
EM damiani@di.unito.it
RI Ferruccio, Damiani/D-2383-2011
OI Ferruccio, Damiani/0000-0001-8109-1706
CR ADITYA S, 1991, LNCS, V523, P379
   [Anonymous], 1996, POPL
   [Anonymous], 1997, The Definition of Standard ML
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   COPPO M, 1995, INFORM COMPUT, V122, P70, DOI 10.1006/inco.1995.1141
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   COPPO M, 1980, HB CURRY ESSAYS COMB, P480
   COPPO M, 1980, LNCS, V88, P194
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Damas Luis, 1984, Ph. D. Dissertation
   Damiani F., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P707
   Damiani F, 2000, LECT NOTES COMPUT SC, V1784, P82
   DELLAROCCA SR, 1988, THEOR COMPUT SCI, V59, P181, DOI 10.1016/0304-3975(88)90101-6
   DELLAROCCA SR, 1984, THEOR COMPUT SCI, V28, P151, DOI 10.1016/0304-3975(83)90069-5
   Girard J.-Y., 1972, PhD thesis
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   Hindley R., 1997, CAMBRIDGE TRACTS THE, V42
   JIM T, 1995, MITLCSTM531
   JIM T, 2000, ICALP WORKSH P INF, V8, P323
   Kfoury A. J., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P161, DOI 10.1145/292540.292556
   KFOURY AJ, 1993, ACM T PROGR LANG SYS, V15, P290, DOI 10.1145/169701.169687
   KFOURY AJ, 1994, LISP FUNCTIONAL PROG
   Lambert G. L. T., 1983, C REC 10 ANN ACM S P, P265, DOI [10.1145/567067.567092, DOI 10.1145/567067.567092]
   Leivant D., 1983, C REC 10 ANN ACM S P, P88, DOI [10.1145/567067.567077, DOI 10.1145/567067.567077]
   LEPORATI E, 2000, THESIS U TORINO
   Margaria I., 1995, Journal of Logic and Computation, V5, P367, DOI 10.1093/logcom/5.3.367
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   REYNOLDS JC, 1974, LNCS, V19
   Shao Z., 1993, POPL, P439
   Urzyczyn P., 1997, Mathematical Structures in Computer Science, V7, P329, DOI 10.1017/S0960129597002302
   VANBAKEL S, 1993, THESIS KATHOLIEKE U
   VANBAKEL S, 2000, LNCS, V1956, P41
   WELLS JB, 1994, IEEE S LOG, P176
   YOKOUCHI H, 1995, INFORM COMPUT, V117, P206, DOI 10.1006/inco.1995.1040
NR 35
TC 9
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2003
VL 25
IS 4
BP 401
EP 451
DI 10.1145/778559.778560
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 689QT
UT WOS:000183505000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Toro, M
   Darais, D
   Abuah, C
   Near, JP
   Arquez, D
   Olmedo, F
   Tanter, É
AF Toro, Matias
   Darais, David
   Abuah, Chike
   Near, Joseph P.
   Arquez, Damian
   Olmedo, Federico
   Tanter, Eric
TI Contextual Linear Types for Differential Privacy
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Type systems; differential privacy
AB Language support for differentially private programming is both crucial and delicate. While elaborate program logics can be very expressive, type-system-based approaches using linear types tend to be more lightweight and amenable to automatic checking and inference, and in particular in the presence of higher-order programming. Since the seminal design of Fuzz, which is restricted to epsilon-differential privacy in its original design, significant progress has been made to support more advanced variants of differential privacy, like (epsilon, delta)-differential privacy. However, supporting these advanced privacy variants while also supporting higher-order programming in full has proven to be challenging. We present Jazz, a language and type system that uses linear types and latent contextual effects to support both advanced variants of differential privacy and higher-order programming. Latent contextual effects allow delaying the payment of effects for connectives such as products, sums, and functions, yielding advantages in terms of precision of the analysis and annotation burden upon elimination, as well as modularity. We formalize the core of Jazz, prove it sound for privacy via a logical relation for metric preservation, and illustrate its expressive power through a number of case studies drawn from the recent differential privacy literature.
C1 [Toro, Matias; Arquez, Damian; Olmedo, Federico; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
   [Darais, David] Galois Inc, Portland, OR USA.
   [Abuah, Chike] Amazon, Seattle, WA USA.
   [Near, Joseph P.] Univ Vermont, Dept Comp Sci, Burlington, VT 05405 USA.
   [Arquez, Damian; Olmedo, Federico; Tanter, Eric] IMFD, Santiago, Chile.
C3 Universidad de Chile; Galois, Inc.; Amazon.com; University of Vermont
RP Toro, M (corresponding author), Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
EM mtoro@dcc.uchile.cl; darais@galois.com; abuahchu@gmail.com;
   jnear@uvm.edu; darquez@dcc.uchile.cl; folmedo@dcc.uchile.cl;
   etanter@dcc.uchile.cl
RI Abuah, Chiké/JWA-1851-2024; Tanter, Eric/A-7955-2008
OI Olmedo, Federico/0000-0003-0217-6483; Toro, Matias/0000-0002-5315-0198;
   Tanter, Eric/0000-0002-7359-890X
FU ANID FONDECYT Projects [11181208, 1190058, 3200583]; NSF [CCF-2119939];
   ANID Millennium Science Initiative Program [ICN17_002]
FX This work is partially funded by ANID FONDECYT Projects 11181208,
   1190058, 3200583, ANID Millennium Science Initiative Program code
   ICN17_002, and NSF award CCF-2119939.
CR Abadi M, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P308, DOI 10.1145/2976749.2978318
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   Amorim AAD, 2015, Arxiv, DOI arXiv:1503.04522
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Balle B, 2018, PR MACH LEARN RES, V80
   Bao Yuyan, 2021, P ACM PROGR LANG OOP, V139, P1
   Barthe G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434289
   Barthe G, 2020, IEEE S LOG, P141, DOI 10.1145/3373718.3394796
   Barthe G, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(4:18)2019
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, P IEEE CSFW, P411, DOI 10.1109/CSF.2014.36
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Barthe G, 2013, P IEEE CSFW, P287, DOI 10.1109/CSF.2013.26
   Barthe G, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P97
   Bassily R, 2014, ANN IEEE SYMP FOUND, P464, DOI 10.1109/FOCS.2014.56
   Bichsel B, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P508, DOI 10.1145/3243734.3243863
   Bun M, 2018, ACM S THEORY COMPUT, P74, DOI 10.1145/3188745.3188946
   Bun M, 2016, LECT NOTES COMPUT SC, V9985, P635, DOI 10.1007/978-3-662-53641-4_24
   Canonne Clement L., 2020, P ANN C NEURAL INFOR
   Chaudhuri K., 2013, P ADV NEUR INF PROC, P2652
   Çiçek E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P533, DOI 10.1145/3314221.3314603
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   de Amorim AA, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785715
   de Amorim AA, 2017, ACM SIGPLAN NOTICES, V52, P545, DOI [10.1145/3093333.3009890, 10.1145/3009837.3009890]
   de Amorim Arthur Azevedo, 2014, Symposium on Implementation and Application of Functional Programming Languages (IFL), Boston, Massachusetts, DOI DOI 10.1145/2746325.2746335
   Ding ZY, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P475, DOI 10.1145/3243734.3243818
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Dwork C, 2009, ACM S THEORY COMPUT, P381
   Eisenberg RA, 2012, ACM SIGPLAN NOTICES, V47, P117, DOI 10.1145/2430532.2364522
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Gaboardi Marco, 2020, 6 WORKSHOP THEORY PR
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Hannan J., 1997, LIFETIME ANAL HIGHER
   Hardt Moritz, 2012, Advances in Neural Information Processing Systems (NeuRIPS'12), V25, P2348
   HAYASHI S, 1991, LECT NOTES COMPUT SC, V526, P701
   Leroy Xavier, 1992, 1778 INRIA
   Lyu M, 2017, PROC VLDB ENDOW, V10, P637, DOI 10.14778/3055330.3055331
   McSherry F, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P19
   Mironov I, 2012, CCS, P650, DOI [DOI 10.1145/2382196.2382264, DOI 10.1145/2382196]
   Mironov I, 2017, P IEEE CSFW, P263, DOI 10.1109/CSF.2017.11
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Near JP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360598
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Sato T, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785668
   Scherer Gabriel, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P710, DOI 10.1007/978-3-642-45221-5_47
   Talwar K., 2015, P 28 INT C NEUR INF, P3025
   Thakkar O, 2019, arXiv
   Toro Matias, 2023, TRDCC20231 U CHIL
   Wang YX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P655, DOI 10.1145/3314221.3314619
   Wilson Royce J., 2020, Proceedings on Privacy Enhancing Technologies, V2020, P230, DOI 10.2478/popets-2020-0025
   Wu X, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1307, DOI 10.1145/3035918.3064047
   Wu XW, 2020, PHYS REV MATER, V4, DOI 10.1103/PhysRevMaterials.4.086001
   Yousefpour A, 2021, Arxiv, DOI arXiv:2109.12298
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
   Zhang HC, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341697
NR 61
TC 0
Z9 0
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2023
VL 45
IS 2
AR 8
DI 10.1145/3589207
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M2WV9
UT WOS:001028843500002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU D'Osualdo, E
   Sutherland, J
   Farzan, A
   Gardner, P
AF D'Osualdo, Emanuele
   Sutherland, Julian
   Farzan, Azadeh
   Gardner, Philippa
TI TaDA Live: Compositional Reasoning for Termination of Fine-grained
   Concurrent Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Fine-grained concurrency; linearisability; busy-waiting; termination;
   liveness; concurrent separation logics
ID HOARE-LOGIC; LANGUAGE; COMPLETENESS; CORRECTNESS
AB We present TaDA Live, a concurrent separation logic for reasoning compositionally about the termination of blocking fine-grained concurrent programs. The crucial challenge is how to deal with abstract atomic blocking: that is, abstract atomic operations that have blocking behaviour arising from busy-waiting patterns as found in, for example, fine-grained spin locks. Our fundamental innovation is with the design of abstract specifications that capture this blocking behaviour as liveness assumptions on the environment. We design a logic that can reason about the termination of clients that use such operations without breaking their abstraction boundaries, and the correctness of the implementations of the operations with respect to their abstract specifications. We introduce a novel semantic model using layered subjective obligations to express liveness invariants and a proof system that is sound with respect to the model. The subtlety of our specifications and reasoning is illustrated using several case studies.
C1 [D'Osualdo, Emanuele; Sutherland, Julian; Gardner, Philippa] Imperial Coll London, London, England.
   [D'Osualdo, Emanuele] MPI SWS Saarbrucken, Saarbrucken, Germany.
   [Farzan, Azadeh] Univ Toronto, Toronto, ON, Canada.
C3 Imperial College London; University of Toronto
RP D'Osualdo, E (corresponding author), Imperial Coll London, London, England.
EM dosualdo@mpi-sws.org; julian.sutherland10@ic.ac.uk;
   azadeh@cs.toronto.edu; pg@doc.ic.ac.uk
RI D'Osualdo, Emanuele/HOF-1125-2023
OI D'Osualdo, Emanuele/0000-0002-9179-5827
FU EPSRC Programme Grant "REMS: Rigorous Engineering for Mainstream
   Systems" [EP/K008528/1]; European Union's Horizon 2020 research and
   innovation programme under the Marie Sklodowska-Curie project "VeSPA"
   [795218]; Department of Computing PhD Scholarship from Imperial; UKRI
   Established Fellowship "VeTSpec: Verified Trustworthy Software
   Specification" [EP/R034567/1]; ERC; EU Horizon 2020 [683289]; SPF
   [EP/R034567/1] Funding Source: UKRI; Marie Curie Actions (MSCA) [795218]
   Funding Source: Marie Curie Actions (MSCA)
FX This research was supported by the EPSRC Programme Grant "REMS: Rigorous
   Engineering for Mainstream Systems" (EP/K008528/1); by the European
   Union's Horizon 2020 research and innovation programme under the Marie
   SklodowskaCurie project "VeSPA," grant agreement no. 795218; by a
   Department of Computing PhD Scholarship from Imperial; by the UKRI
   Established Fellowship "VeTSpec: Verified Trustworthy Software
   Specification" (EP/R034567/1); and in the final stages by the ERC
   Consolidator Grant for the project "RustBelt," also funded under EU
   Horizon 2020, grant agreement no. 683289.
CR Ahrendt W, 2016, LECT NOTES COMPUT SC, V10001, P1, DOI 10.1007/978-3-319-49812-6
   Al Ameen MF, 2016, THEOR COMPUT SCI, V631, P73, DOI 10.1016/j.tcs.2016.04.004
   AMERICA P, 1990, INFORM COMPUT, V84, P129, DOI 10.1016/0890-5401(90)90037-I
   Apt K.R., 2009, Texts in Computer Science, DOI 10.1007/978-1-84882-745-5
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   Apt KR, 2019, FORM ASP COMPUT, V31, P751, DOI 10.1007/s00165-019-00501-3
   Apt KR, 2012, J COMPUT SYST SCI, V78, P823, DOI 10.1016/j.jcss.2011.08.002
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   CARTWRIGHT R, 1981, ACTA INFORM, V15, P365, DOI 10.1007/BF00264535
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   CLARKE EM, 1979, J ACM, V26, P129, DOI 10.1145/322108.322121
   COOK SA, 1981, SIAM J COMPUT, V10, P612, DOI 10.1137/0210045
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   DAMM W, 1983, ACTA INFORM, V20, P59, DOI 10.1007/BF00264295
   de Bakker J. W., 1979, LECT NOTES COMPUTER, V74, P1
   de Bakker Jaco., 1980, Mathematical Theory of Program Correctness
   de Gouw S, 2019, J AUTOM REASONING, V62, P93, DOI 10.1007/s10817-017-9426-4
   FOLEY M, 1971, COMPUT J, V14, P391, DOI 10.1093/comjnl/14.4.391
   GERMAN SM, 1989, INFORM COMPUT, V83, P265, DOI 10.1016/0890-5401(89)90040-0
   Giesl R, 2004, LECT NOTES COMPUT SC, V3091, P210
   Gorelick G. A., 1975, THESIS U TORONTO
   Hiep Hans-Dieter A., 2020, Completeness and Complexity of Reasoning about Callbyvalue in Hoare Logic (Proof Files), DOI 10.5281/zenodo.4005508
   Hoare C. A. R., 1971, Lecture notes in mathematics CLXXXVIII. Symposium on semantics of algorithmic languages, P102
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   LAUER PE, 1971, THESIS QUEENS U BELF
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Nagele J, 2017, LECT NOTES ARTIF INT, V10395, P385, DOI 10.1007/978-3-319-63046-5_24
   Nipkow Tobias, 2002, LECT NOTES COMPUTER, V2471
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   OLDEROG ER, 1984, THEOR COMPUT SCI, V30, P49, DOI 10.1016/0304-3975(84)90066-5
   Pierce Benjamin C., 2020, PROGRAMMING LANGUAGE
   Terese Marc Bezem, 2003, CAMBRIDGE TRACTS THE, V55
   van den Hove G, 2015, COMPUT J, V58, P2892, DOI 10.1093/comjnl/bxu145
   von Oheimb D., 2002, FME 2002: Formal Methods-Getting IT Right. International Symposium of Formal Methods Europe (Lecture Notes in Computer Science Volume 2391), P89
   von Oheimb D., 1999, Foundations of Software Technology and Theoretical Computer Science. 19th Conference. Proceedings (Lecture Notes in Computer Science Vol.1738), P168
   VONOHEIMB D, 2001, THESIS TU MUNCHEN
NR 36
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2021
VL 43
IS 4
AR 16
DI 10.1145/3477082
PG 169
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW8TN
UT WOS:000753685700004
OA Green Published, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Nikolic, D
   Spoto, F
AF Nikolic, Durica
   Spoto, Fausto
TI Reachability Analysis of Program Variables
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Verification; Languages; Static analysis; constraint-based
   analysis; abstract interpretation; reachability analysis; pointer
   analysis; Java bytecode
ID SHAPE-ANALYSIS; PREDICATE ABSTRACTION
AB Reachability from a program variable v to a program variable w states that from v, it is possible to follow a path of memory locations that leads to the object bound to w. We present a new abstract domain for the static analysis of possible reachability between program variables or, equivalently, definite unreachability between them. This information is important for improving the precision of other static analyses, such as side-effects, field initialization, cyclicity and path-length analysis, as well as more complex analyses built upon them, such as nullness and termination analysis. We define and prove correct our reachability analysis for Java bytecode, defined as a constraint-based analysis, where the constraint is a graph whose nodes are the program points and whose arcs propagate reachability information in accordance to the abstract semantics of each bytecode instruction. For each program point p, our reachability analysis produces an overapproximation of the ordered pairs of variables < v, w > such that v might reach w at p. Seen the other way around, if a pair < v, w > is not present in the overapproximation at p, then v definitely does not reach w at p. We have implemented the analysis inside the Julia static analyzer. Our experiments of analysis of nontrivial Java and Android programs show the improvement of precision due to the presence of reachability information. Moreover, reachability analysis actually reduces the overall cost of nullness and termination analysis.
C1 [Nikolic, Durica; Spoto, Fausto] Univ Verona, I-37100 Verona, Italy.
   [Nikolic, Durica] Microsoft Res Univ Trento, Ctr Computat & Syst Biol, Trenton, NJ USA.
C3 University of Verona; Microsoft
RP Nikolic, D (corresponding author), Univ Verona, I-37100 Verona, Italy.
EM nikolic.durica@gmail.com
OI Spoto, Fausto/0000-0003-2973-0384
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Balaban I, 2005, LECT NOTES COMPUT SC, V3385, P164
   Ball T, 2005, ACM T PROGR LANG SYS, V27, P314, DOI 10.1145/1057387.1057391
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Chatterjee Shaunak, 2009, International Journal on Software Tools for Technology Transfer, V11, P105, DOI 10.1007/s10009-009-0098-1
   Corbett JC, 2000, ACM T SOFTW ENG METH, V9, P51, DOI 10.1145/332740.332741
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dams D, 2003, LECT NOTES COMPUT SC, V2575, P310
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Genaim S, 2013, THEOR COMPUT SCI, V474, P60, DOI 10.1016/j.tcs.2012.12.018
   Genaim Samir, 2010, P INT WORKSH TERM WS
   Hardekopf B. C., 2009, THESIS U TEXAS AUSTI
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Jump M, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P119
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Lhotak O., 2006, THESIS MCGILL U
   LHOTAK O, 2011, P 38 S PRINC PROGR L, V46, P3
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Marron M, 2008, LECT NOTES COMPUT SC, V4959, P245
   Nelson G., 1983, POPL 83, P38
   Nikolic Durica, 2012, Theoretical Aspects of Computing - ICTAC 2012. Proceedings of the 9th International Colloquium, P74, DOI 10.1007/978-3-642-32943-2_6
   Nikolic Durica, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P423, DOI 10.1007/978-3-642-31365-3_33
   Nikolic Durica, 2012, Language and Automata Theory and Applications. Proceedings 6th International Conference, LATA 2012, P420, DOI 10.1007/978-3-642-28332-1_36
   NIKOLIC D., 2013, THESIS U VERONA
   Nikolic D, 2013, THEOR COMPUT SCI, V484, P16, DOI 10.1016/j.tcs.2013.01.007
   PALSBERG J, 1991, SIGPLAN NOTICES, V26, P146
   Papi Matthew M., 2008, INT S SOFT TEST AN I, P201
   Payet E, 2007, LECT NOTES COMPUT SC, V4634, P452
   Rossignoli S, 2006, LECT NOTES COMPUT SC, V3855, P95
   ROUNTEV A, 2001, P 16 ACM C OBJ OR PR, V36, P43
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   SALCIANU A, 2006, THESIS MIT CAMBRIDGE
   Secci S, 2005, LECT NOTES COMPUT SC, V3672, P320
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Spoto F, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P231, DOI 10.1145/1985793.1985826
   Spoto F, 2011, SOFTW SYST MODEL, V10, P219, DOI 10.1007/s10270-009-0132-5
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   Spoto F, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P21, DOI 10.1109/SEFM.2008.8
   VERBRUGGE C., 2005, DYNAMIC SHAPE DATA S
NR 44
TC 8
Z9 8
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2013
VL 35
IS 4
AR 14
DI 10.1145/2529990
PG 68
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 282OY
UT WOS:000329182700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Ganty, P
   Majumdar, R
AF Ganty, Pierre
   Majumdar, Rupak
TI Algorithmic Verification of Asynchronous Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Asynchronous (event-driven) programming; liveness; fair termination;
   Petri nets
ID STRUCTURED TRANSITION-SYSTEMS; PUSHDOWN PROCESSES; REACHABILITY;
   DECIDABILITY; AUTOMATA
AB Asynchronous programming is a ubiquitous systems programming idiom for managing concurrent interactions with the environment. In this style, instead of waiting for time-consuming operations to complete, the programmer makes a non-blocking call to the operation and posts a callback task to a task buffer that is executed later when the time-consuming operation completes. A cooperative scheduler mediates the interaction by picking and executing callback tasks from the task buffer to completion (and these callbacks can post further callbacks to be executed later). Writing correct asynchronous programs is hard because the use of callbacks, while efficient, obscures program control flow.
   We provide a formal model underlying asynchronous programs and study verification problems for this model. We show that the safety verification problem for finite-data asynchronous programs is EXPSPACE- complete. We show that liveness verification for finite-data asynchronous programs is decidable and polynomial-time equivalent to Petri net reachability. Decidability is not obvious, since even if the data is finite-state, asynchronous programs constitute infinite-state transition systems: both the program stack for an executing task and the task buffer of pending calls to tasks can be potentially unbounded.
   Our main technical constructions are polynomial-time, semantics-preserving reductions from asynchronous programs to Petri nets and back. The first reduction allows the use of algorithmic techniques on Petri nets for the verification of asynchronous programs, and the second allows lower bounds on Petri nets to apply also to asynchronous programs.
   We also study several extensions to the basic models of asynchronous programs that are inspired by additional capabilities provided by implementations of asynchronous libraries and classify the decidability and undecidability of verification questions on these extensions.
C1 [Ganty, Pierre] IMDEA Software, Madrid, Spain.
   [Majumdar, Rupak] MPI SWS, Kaiserslautern, Germany.
C3 IMDEA Software Institute
RP Ganty, P (corresponding author), IMDEA Software, Madrid, Spain.
EM pierre.ganty@imdea.org; rupak@mpi-sws.org
FU National Science Foundation [CCF-0546170, CCF-0702743, CNS-0720881];
   Comunidad de Madrid's Program PROMETIDOS-CM [S2009TIC-1465];
   PEOPLE-COFUND'S program AMAROUT [PCOFUND-2008-229599]; Spanish Ministry
   of Science and Innovation [TIN2010-20639]
FX This work was supported by the National Science Foundation, under grants
   CCF-0546170, CCF-0702743, and CNS-0720881. P. Ganty was sponsored by the
   Comunidad de Madrid's Program PROMETIDOS-CM (S2009TIC-1465), by the
   PEOPLE-COFUND'S program AMAROUT (PCOFUND-2008-229599), and by the
   Spanish Ministry of Science and Innovation (TIN2010-20639).
CR Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   Abdulla PA, 2009, LECT NOTES COMPUT SC, V5504, P348
   [Anonymous], 1981, P STOC, DOI DOI 10.1145/800076.802477
   [Anonymous], 161 MIT
   [Anonymous], 2008, FSTTCS
   [Anonymous], 1982, PROC STOC 1982, DOI [10.1145/800070.802201, DOI 10.1145/800070.802201]
   [Anonymous], PETRI NETS INTRO
   [Anonymous], INFORM DIDACTICA
   [Anonymous], 1967, COMPUTATION FINITE I
   [Anonymous], 1976, 062 YAL U DEP COMP S
   [Anonymous], P USENIX ANN TECHN C
   Atig MF, 2009, LECT NOTES COMPUT SC, V5797, P51, DOI 10.1007/978-3-642-04420-5_7
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Burkart O, 1994, LECT NOTES COMPUT SC, V836, P98
   Chadha R, 2007, LECT NOTES COMPUT SC, V4703, P136
   Chadha R, 2009, THEOR COMPUT SCI, V410, P4169, DOI 10.1016/j.tcs.2009.01.021
   Dickson LE, 1913, AM J MATH, V35, P413, DOI 10.2307/2370405
   Dufourd C, 1998, LECT NOTES COMPUT SC, V1443, P103, DOI 10.1007/BFb0055044
   Esparza J., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P374
   Esparza J., 1997, Fundamenta Informaticae, V31, P13
   Esparza J., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P352, DOI 10.1109/LICS.1999.782630
   Esparza J., 1995, J INFORM PROCESSING, V30, P143
   Esparza J, 2011, INFORM PROCESS LETT, V111, P614, DOI 10.1016/j.ipl.2011.03.019
   Esparza J, 2010, J ACM, V57, DOI 10.1145/1857914.1857917
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Finkel A, 2010, LECT NOTES COMPUT SC, V5901, P394
   Ganty P, 2009, ACM SIGPLAN NOTICES, V44, P102, DOI 10.1145/1594834.1480895
   Ganty P, 2009, LECT NOTES COMPUT SC, V5813, P164, DOI 10.1007/978-3-642-04368-0_14
   Hill J, 2000, ACM SIGPLAN NOTICES, V35, P93, DOI 10.1145/384264.379006
   Jhala Ranjit, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P339, DOI 10.1145/1190216.1190266
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Kohler E, 2000, ACM T COMPUT SYST, V18, P263, DOI 10.1145/354871.354874
   LAMBERT JL, 1992, THEOR COMPUT SCI, V99, P79, DOI 10.1016/0304-3975(92)90173-D
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   MAYR EW, 1981, J ACM, V28, P561, DOI 10.1145/322261.322271
   Cardona PAN, 2015, CUAD ACT, P154
   Pai VS, 1999, PROCEEDINGS OF THE 1999 USENIX ANNUAL TECHNICAL CONFERENCE, P199
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Rackoff C., 1978, Theoretical Computer Science, V6, P223, DOI 10.1016/0304-3975(78)90036-1
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P300, DOI 10.1007/11817963_29
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   VARDI MY, 1991, ANN PURE APPL LOGIC, V51, P79, DOI 10.1016/0168-0072(91)90066-U
   Walukiewicz I, 2001, INFORM COMPUT, V164, P234, DOI 10.1006/inco.2000.2894
   YEN HC, 1992, INFORM COMPUT, V96, P119, DOI 10.1016/0890-5401(92)90059-O
NR 45
TC 41
Z9 44
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2012
VL 34
IS 1
AR 6
DI 10.1145/2160910.2160915
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 933BD
UT WOS:000303333300006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ruggieri, S
   Mesnard, F
AF Ruggieri, Salvatore
   Mesnard, Fred
TI Typing Linear Constraints
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Verification; Linear constraints; polyhedra; constraint logic
   programming; well-moding; definiteness
ID POLYHEDRA; ELIMINATION; COMPLEXITY
AB We present a type system for linear constraints over the reals intended for reasoning about the input-output directionality of variables. Types model the properties of definiteness, range width or approximation, lower and upper bounds of variables in a linear constraint. Several proof procedures are presented for inferring the type of a variable and for checking validity of type assertions. We rely on theory and tools for linear programming problems, linear algebra, parameterized polyhedra and negative constraints. An application of the type system is proposed in the context of the static analysis of constraint logic programs. Type assertions are at the basis of the extension of well-moding from pure logic programming. The proof procedures (both for type assertion validity and for well-moding) are implemented and their computational complexity is discussed. We report experimental results demonstrating the efficiency in practice of the proposed approach.
C1 [Ruggieri, Salvatore] Univ Pisa, Dipartimento Informat, I-56127 Pisa, Italy.
   [Mesnard, Fred] Univ Reunion, IREMIA, LIM, F-97715 St Denis Messag 9, France.
C3 University of Pisa; University of La Reunion
RP Ruggieri, S (corresponding author), Univ Pisa, Dipartimento Informat, Largo B Pontecorvo 3, I-56127 Pisa, Italy.
EM ruggieri@di.unipi.it
CR Apt K. R., 1997, From Logic Programming to Prolog
   Bagnara R, 2005, FORM ASP COMPUT, V17, P222, DOI 10.1007/s00165-005-0061-1
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Bagnara R, 2009, THEOR COMPUT SCI, V410, P4672, DOI 10.1016/j.tcs.2009.07.033
   Baker N., 1993, Australian Computer Science Communications, V15, P321
   Basu S, 1996, J ACM, V43, P1002, DOI 10.1145/235809.235813
   Becket R, 2006, LECT NOTES COMPUT SC, V3819, P118
   Berkelaar M., 2010, lp_solve: Open source (Mixed-Integer) Linear Programming system
   Borgwardt KH, 2007, DISCRETE COMPUT GEOM, V37, P175, DOI 10.1007/s00454-006-1257-8
   Borrelli F, 2003, J OPTIMIZ THEORY APP, V118, P515, DOI 10.1023/B:JOTA.0000004869.66331.5c
   Brown C. W., 2003, SIGSAM Bulletin, V37, P97, DOI 10.1145/968708.968710
   Chernikova N.V., 1965, USSR Comput. Math. Math. Phys, V5, P228, DOI [10.1016/0041-5553(65)90045-5, DOI 10.1016/0041-5553(65)90045-5]
   CODISH M, 2001, LECT NOTES COMPUTER, V2237, P135
   COLLINS GE, 1991, J SYMB COMPUT, V12, P299, DOI 10.1016/S0747-7171(08)80152-6
   DAVEY RB, 1988, EXP APPL ACAROL, V5, P1, DOI 10.1007/BF02053812
   DeLaBanda MG, 1996, ACM T PROGR LANG SYS, V18, P564, DOI 10.1145/232706.232734
   Dolzmann A, 1998, ALGORITHMIC ALGEBRA AND NUMBER THEORY, P221
   Dolzmann A, 1998, J AUTOM REASONING, V21, P357, DOI 10.1023/A:1006031329384
   DOLZMANN A, 1997, ACM SIGSAM B, V31, P2, DOI DOI 10.1145/261320.261324
   Etalle S, 1999, J LOGIC PROGRAM, V38, P243, DOI 10.1016/S0743-1066(98)10025-0
   GAL T, 1972, MANAGE SCI, V18, P406, DOI 10.1287/mnsc.18.7.406
   Gal T., 1995, Postoptimal Analyses, Parametric Programming, and Related Topics: Degeneracy, Multicriteria Decision Making, Redundancy
   Genaim S, 2001, THEOR PRACT LOG PROG, V1, P611, DOI 10.1017/S1471068401001077
   Goldman A.J., 1956, Linear Inequalities and Related Systems
   Greenberg HJ, 1996, ANN MATH ARTIF INTEL, V17, P37, DOI 10.1007/BF02284624
   HANUS M, 1995, NEW GENERAT COMPUT, V13, P155, DOI 10.1007/BF03038312
   HOLZBAUR, 1995, TR9509 AUSTR RES I A
   Howe JM, 2000, INFORM PROCESS LETT, V75, P17, DOI 10.1016/S0020-0190(00)00081-8
   Huynh T., 1991, Fundamenta Informaticae, V15, P357
   JAFFAR J, 1992, ACM T PROGR LANG SYS, V14, P339, DOI 10.1145/129393.129398
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jaffar J, 1998, J LOGIC PROGRAM, V37, P1, DOI 10.1016/S0743-1066(98)10002-X
   KEERTHI SS, 1990, J OPTIMIZ THEORY APP, V65, P161, DOI 10.1007/BF00941167
   Kelly AD, 1998, ACM T PROGR LANG SYS, V20, P1223, DOI 10.1145/295656.295661
   Khachiyan L. G., 1980, USSR COMP MATH MATH, V20, P53, DOI DOI 10.1016/0041-5553(80)90061-0
   Lagoon V, 2003, LECT NOTES COMPUT SC, V2916, P254, DOI 10.1007/978-3-540-24599-5_18
   LASSEZ JL, 1992, J SYMB COMPUT, V13, P1, DOI 10.1016/0747-7171(92)90002-L
   LEVERGE H, 1992, 635 IRISA CAMP U BEA
   Loechner V, 1997, INT J PARALLEL PROG, V25, P525, DOI 10.1023/A:1025117523902
   LOECHNER V, 2010, POLYLIB LIB MANIPULA
   Marriott K., 1998, PROGRAMMING CONSTRAI
   Mesnard F., 2003, ACM Transactions on Computational Logic, V4, P207, DOI 10.1145/635499.635503
   MOTZKIN TS, 1953, ANN MATH STUD, V28, P51
   Murty KattaG., 1997, Linear Complementarity, Linear and Nonlinear Programming
   REFALO P, 1998, LNCS, V1490, P481
   RENEGAR J, 1992, J SYMB COMPUT, V13, P301, DOI 10.1016/S0747-7171(10)80005-7
   Ruggieri S, 2008, LECT NOTES COMPUT SC, V5079, P128
   SCHECHTER M, 1987, J OPTIMIZ THEORY APP, V53, P269, DOI 10.1007/BF00939219
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Shoenfield J.R., 1967, MATH LOGIC
   Somogyi Z, 1996, J LOGIC PROGRAM, V29, P17, DOI 10.1016/S0743-1066(96)00068-4
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   Strzebonski A, 2000, J SYMB COMPUT, V29, P471, DOI 10.1006/jsco.1999.0327
   Stuckey P. J., 1991, ORSA Journal on Computing, V3, P269, DOI 10.1287/ijoc.3.4.269
   VANDENDRIES L, 1988, J SYMBOLIC LOGIC, V53, P7, DOI 10.2307/2274424
   WILDE DK, 1993, 785 PI CAMP U BEAUL
NR 56
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2010
VL 32
IS 6
AR 21
DI 10.1145/1749608.1749610
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 661VO
UT WOS:000282759900002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Kobayashi, N
   Sangiorgi, D
AF Kobayashi, Naoki
   Sangiorgi, Davide
TI A Hybrid Type System for Lock-Freedom of Mobile Processes
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Verification; Type systems; concurrency; mobile processes
ID INFORMATION-FLOW; TERMINATION; CALCULUS; DEADLOCK
AB We propose a type system for lock-freedom in the pi-calculus, which guarantees that certain communications will eventually succeed. Distinguishing features of our type system are: it can verify lock-freedom of concurrent programs that have sophisticated recursive communication structures; it can be fully automated; it is hybrid, in that it combines a type system for lock-freedom with local reasoning about deadlock-freedom, termination, and confluence analyses. Moreover, the type system is parameterized by deadlock-freedom/termination/confluence analyses, so that any methods (e.g. type systems and model checking) can be used for those analyses. A lock-freedom analysis tool has been implemented based on the proposed type system, and tested for nontrivial programs.
C1 [Kobayashi, Naoki] Tohoku Univ, Grad Sch Informat Sci, Aoba Ku, Sendai, Miyagi 9808579, Japan.
   [Sangiorgi, Davide] Univ Bologna, Dipartimento Sci Informaz, I-40126 Bologna, Italy.
C3 Tohoku University; University of Bologna
RP Kobayashi, N (corresponding author), Tohoku Univ, Grad Sch Informat Sci, Aoba Ku, 6-3-9 Aoba, Sendai, Miyagi 9808579, Japan.
EM koba@ecei.tohoku.ac.jp; Davide.Sangiorgi@cs.unibo.it
OI Kobayashi, Naoki/0000-0002-0537-0604
FU Kakenhi [2024000, 117200003]; European Project "HATS" [231620]
FX This work was partially supported by Kakenhi 20240001 and 17200003, and
   the European Project "HATS" (contract number 231620).
CR Acciai L, 2008, THEOR COMPUT SCI, V409, P59, DOI 10.1016/j.tcs.2008.08.017
   *ACM, 2010, ACM T PROGR LANG SYS, V32
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Ben-Amram AM, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180480
   Bidinger P, 2009, THEOR COMPUT SCI, V410, P114, DOI 10.1016/j.tcs.2008.09.014
   Bodei C, 1998, LECT NOTES COMPUT SC, V1466, P84, DOI 10.1007/BFb0055617
   Boreale M, 1999, INFORM COMPUT, V149, P77, DOI 10.1006/inco.1998.2755
   BOYAPATI C, 2002, P 17 ACM SIGPLAN C O, P211
   Brinksma Ed, CONCUR 1995, P313, DOI [DOI 10.1007/3-540-60218-623, 10.1007/3-540-60218-6_23, DOI 10.1007/3-540-60218-6_23]
   Caires L, 2003, INFORM COMPUT, V186, P194, DOI 10.1016/S0890-5401(03)00137-8
   Caires L, 2007, LECT NOTES COMPUT SC, V4624, P16
   Chakraborty S, 2002, EIGHTH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P45, DOI 10.1109/RTTAS.2002.1137380
   Cook Byron, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P265, DOI 10.1145/1190216.1190257
   Cook B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P320, DOI 10.1145/1250734.1250771
   Dam M, 1996, INFORM COMPUT, V129, P35, DOI 10.1006/inco.1996.0072
   Demangeon R, 2008, LECT NOTES COMPUT SC, V4912, P140
   Deng YX, 2006, INFORM COMPUT, V204, P1045, DOI 10.1016/j.ic.2006.03.002
   Feret J, 2005, J LOGIC ALGEBR PROGR, V63, P59, DOI 10.1016/j.jlap.2004.01.005
   Honda K, 2000, LECT NOTES COMPUT SC, V1782, P180
   Honda K, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286822
   HUGO V, 2005, SPATIAL LOGIC MODEL
   JONES CB, 1993, LECTURE NOTES COMPUT, V715, P158
   Kobayashi N, 2005, ACTA INFORM, V42, P291, DOI 10.1007/s00236-005-0179-x
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Kobayashi N, 2005, TYPICAL TYPE BASED S
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Kobayashi N, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(3:4)2006
   Leroy X., 2000, Journal of Functional Programming, V10, P269, DOI 10.1017/S0956796800003683
   Milner Robin., 1993, LOGIC ALGEBRA SPECIF
   Natarajan V, 1995, LECT NOTES COMPUT SC, V944, P648
   Pierce BC, 2000, FOUNDAT COMPUT, P455
   Sangiorgi D, 2006, MATH STRUCT COMP SCI, V16, P1, DOI 10.1017/S0960129505004810
   Sangiorgi D, 1999, THEOR COMPUT SCI, V221, P457, DOI 10.1016/S0304-3975(99)00040-7
   Sangiorgi D, 1996, THEOR COMPUT SCI, V167, P235, DOI 10.1016/0304-3975(96)00075-8
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Suenaga K, 2007, LECT NOTES COMPUT SC, V4421, P490
   TERAUCHI T, 2008, ACM T PROGR LANG SYS, V30, P5
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
   YOSHIDA N, 2002, 200220 MSC U LEIC
NR 40
TC 22
Z9 22
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2010
VL 32
IS 5
AR 16
DI 10.1145/1745312.1745313
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 618OY
UT WOS:000279366700001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ahmed, A
   Appel, AW
   Richards, CD
   Swadi, KN
   Tan, G
   Wang, DC
AF Ahmed, Amal
   Appel, Andrew W.
   Richards, Christopher D.
   Swadi, Kedar N.
   Tan, Gang
   Wang, Daniel C.
TI Semantic Foundations for Typed Assembly Languages
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Verification; Typed assembly languages; proof-carrying code;
   semantic models; logical relations; control flow
ID LOGICAL RELATIONS; MODEL
AB Typed Assembly Languages (TALs) are used to validate the safety of machine-language programs. The Foundational Proof-Carrying Code project seeks to verify the soundness of TALs using the smallest possible set of axioms: the axioms of a suitably expressive logic plus a specification of machine semantics. This article proposes general semantic foundations that permit modular proofs of the soundness of TALs. These semantic foundations include Typed Machine Language (TML), a type theory for specifying properties of low-level data with powerful and orthogonal type constructors, and L-c, a compositional logic for specifying properties of machine instructions with simplified reasoning about unstructured control flow. Both of these components, whose semantics we specify using higher-order logic, are useful for proving the soundness of TALs. We demonstrate this by using TML and L-c to verify the soundness of a low-level, typed assembly language, LTAL, which is the target of our core-ML-to-SPARC compiler.
   To prove the soundness of the TML type system we have successfully applied a new approach, that of step-indexed logical relations. This approach provides the first semantic model for a type system with updatable references to values of impredicative quantified types. Both impredicative polymorphism and mutable references are essential when representing function closures in compilers with typed closure conversion, or when compiling objects to simpler typed primitives.
C1 [Ahmed, Amal; Appel, Andrew W.; Richards, Christopher D.; Swadi, Kedar N.; Tan, Gang; Wang, Daniel C.] Princeton Univ, Princeton, NJ 08544 USA.
C3 Princeton University
RP Tan, G (corresponding author), Lehigh Univ, Bethlehem, PA 18015 USA.
EM gtan@cse.lehigh.edu
RI Ahmed, Amal/IGC-9696-2023
OI Ahmed, Amal/0000-0001-7424-572X; Appel, Andrew/0000-0001-6009-0325; Tan,
   Gang/0000-0001-6109-6091
FU DARPA [F30602-99-1-0519]; NSF [CCR-9974553, CCR-0208601, CCF-0540914];
   ARDA [NBCHC030106]
FX This research was funded in part by DARPA grant F30602-99-1-0519, NSF
   grants CCR-9974553, CCR-0208601, and CCF-0540914, and ARDA grant
   NBCHC030106.
CR Abramsky S, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P334, DOI 10.1109/LICS.1998.705669
   Acar UA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P309, DOI 10.1145/1328438.1328476
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   AHMED A, 2005, P 10 ACM SIGPLAN INT, P78, DOI DOI 10.1145/1086365.1086376
   Ahmed AJ, 2002, IEEE S LOG, P75, DOI 10.1109/LICS.2002.1029818
   AHMED AJ, 2004, TR71304 PRINC U
   Ahmed A, 2007, FUND INFORM, V77, P397
   Ahmed Amal., 2003, An Indexed Model of Impredicative Polymorphism and Mutable References
   Ahmed Amal., 2008, Proceedings of the 13th ACM SIGPLAN International Conference on Functional Programming, P157
   AIKEN A, 2003, P ACM C PROGR LANG D
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], POPL 97
   [Anonymous], P ACM WORKSH COMP SU
   Appel A.W., 2000, PROC 27 ACM S PRINCI, P243
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2003, J AUTOM REASONING, V31, P231, DOI 10.1023/B:JARS.0000021013.61329.58
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   APPEL AW, 1991, LECT NOTES COMPUT SC, V528, P1
   APPEL AW, 1985, P ACM S PRIN PROG LA, P315
   APPEL AW, 2000, HINTS PROVING THEORE
   ARBIB MA, 1979, ACTA INFORM, V11, P139, DOI 10.1007/BF00264021
   BENTON N, 2005, LECT NOTES COMPUTER, V3780
   BENTON N, 2006, LECT NOTES COMPUTER, V4207
   BENTON N, 2005, P TLCA, P86
   BENTON N, 2007, P 9 INT ACM SIGPLAN
   BIRKEDAL L, 1997, THEORETICAL ASPECTS
   BOHR N, 2006, P 4 AS S PROGR LANG
   CARDELLI L, 1997, P 24 ACM SIGPLAN SIG, P266
   CHEN J, 2004, CSTR70404 PRINC U
   CHEN J, 2003, P ACM SIGPLAN C PROG, P208
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Clint M., 1972, Acta Informatica, V1, P214, DOI 10.1007/BF00288686
   COLBY C, 2000, P ACM C PROGR LANG D
   CRARY K, 2003, POPL 03, P198
   CRARY K, 2000, P 5 ACM SIGPLAN INT, P68
   CRARY K, 2003, P 19 INT C AUT DED C, P106
   Crary K, 2007, ELECTRON NOTES THEOR, V172, P259, DOI 10.1016/j.entcs.2007.02.010
   DEBRUIN A, 1981, ACTA INFORM, V15, P385, DOI 10.1007/BF00264536
   Feng XY, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P67, DOI 10.1145/1190315.1190325
   Girard J.-Y., 1972, PhD thesis
   GLEW N, 1999, P 26 ACM SIGPLAN SIG, P250
   Hamid NA, 2002, IEEE S LOG, P89, DOI 10.1109/LICS.2002.1029819
   Harper R., 2005, ACM Transactions on Computational Logic, V6, P61, DOI 10.1145/1042038.1042041
   HARPER R, 1994, INFORM PROCESS LETT, V51, P201, DOI 10.1016/0020-0190(94)90120-1
   HARPER R, 1995, P 22 ACM S PRINC PRO, P130
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HRITCU C, 2008, INF P WORKSH FDN OBJ
   KOWALTOWSKI T, 1977, ACTA INFORM, V7, P357, DOI 10.1007/BF00289468
   Levy PB, 2002, LECT NOTES COMPUT SC, V2471, P232
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   Matthews J, 2008, LECT NOTES COMPUT SC, V4960, P16
   MELLIES PA, 2004, P 31 ACM S PRINC PRO, P52
   Michael NG, 2000, LECT NOTES ARTIF INT, V1831, P7
   Morrisett G, 2005, LECT NOTES COMPUT SC, V3461, P293
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Morrisett G, 2002, J FUNCT PROGRAM, V12, P43, DOI 10.1017/S0956796801004178
   Morrisett G., 1998, POPL 98, P85, DOI DOI 10.1145/268946.268954
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Ni Z., 2006, Proc. of the 33rd Symp. on Principles of Programming Languages (POPL), P320, DOI DOI 10.1145/1111320.1111066
   ODONNELL MJ, 1982, COMMUN ACM, V25, P927, DOI 10.1145/358728.358748
   PFENNING F, 1999, P 16 INT C AUT DED C
   PITTS A, 1998, P INT COLL AUT LANG, P309
   Pitts A. M., 2000, Mathematical Structures in Computer Science, V10, P321, DOI 10.1017/S0960129500003066
   Pitts AM, 2002, LECT NOTES COMPUT SC, V2395, P378
   Pitts AM, 1996, INFORM COMPUT, V127, P66, DOI 10.1006/inco.1996.0052
   PITTS AM, 1993, LECT NOTES COMPUTER, V711, P122
   Plotkin Gordon, 1973, Lambda-definability and logical relations
   Reynolds J. C., 1981, Algorithmic Languages. Proceedings of the International Symposium, P345
   RICHARDS CD, 2009, THESIS PRINCETON U P
   Saabas A, 2006, ELECTRON NOTES THEOR, V156, P151, DOI 10.1016/j.entcs.2005.09.031
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   SHAO Z, 1997, P ACM SIGPLAN WORKSH
   STARK IDB, 1994, THESIS U CAMBRIDGE C
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   SWADI K, 2003, TR67603 PRINC U
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Tan G, 2006, LECT NOTES COMPUT SC, V3855, P80
   Tan G, 2004, LECT NOTES COMPUT SC, V2937, P30
   TAN G, 2005, CSTR73105 PRINC U
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   WU D, 2005, CSTR73305 PRINC U
   Wu Dinghao., 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, PPDP'03, P264
   YU D, 2003, P 12 EUR S PROGR ESO
NR 85
TC 22
Z9 23
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2010
VL 32
IS 3
AR 7
DI 10.1145/1709093.1709094
PG 67
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 568RN
UT WOS:000275540300001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Blackburn, SM
   Hertz, M
   McKinley, KS
   Moss, JEB
   Yang, T
AF Blackburn, Stephen M.
   Hertz, Matthew
   McKinley, Kathryn S.
   Moss, J. Eliot B.
   Yang, Ting
TI Profile-based pretenuring
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; performance; garbage collection; pretenuring;
   lifetime prediction; profiling
ID GARBAGE COLLECTION
AB Pretenuring can reduce copying costs in garbage collectors by allocating long- lived objects into regions that the garbage collector will rarely, if ever, collect. We extend previous work on pretenuring as follows: (1) We produce pretenuring advice that is neutral with respect to the garbage collector algorithm and configuration. We thus can and do combine advice from different applications. We find for our benchmarks that predictions using object lifetimes at each allocation site in Java programs are accurate, which simplifies the pretenuring implementation. (2) We gather and apply advice to both applications and Jikes RVM, a compiler and runtime system for Java written in Java. Our results demonstrate that building combined advice into Jikes RVM from different application executions improves performance, regardless of the application Jikes RVM is compiling and executing. This build-time advice thus gives user applications some benefits of pretenuring, without any application profiling. No previous work uses profile feedback to pretenure in the runtime system. (3) We find that application-only advice also consistently improves performance, but that the combination of build-time and application-specific advice is almost always noticeably better. (4) Our same advice improves the performance of generational, Older First, and Beltway collectors, illustrating that it is collector neutral. (5) We include an immortal allocation space in addition to a nursery and older generation, and show that pretenuring to immortal space has substantial benefit.
C1 Australian Natl Univ, Fac Engn & Informat Technol, Dept Comp Sci, Canberra, ACT 0200, Australia.
   Univ Texas, Coll Nat Sci, Dept Comp Sci, Austin, TX 78712 USA.
   Canisius Coll, Dept Comp Sci, Buffalo, NY 14208 USA.
   Univ Massachusetts, Amherst, MA 01003 USA.
C3 Australian National University; University of Texas System; University
   of Texas Austin; University of Massachusetts System; University of
   Massachusetts Amherst
RP Blackburn, SM (corresponding author), Australian Natl Univ, Fac Engn & Informat Technol, Dept Comp Sci, Bldg 108,CSIT Bldg, Canberra, ACT 0200, Australia.
EM moss@cs.umass.edu
OI Blackburn, Stephen/0000-0001-6632-6001
CR AGESEN O, 2000, P INT S MEM MAN MINN, P121
   Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   Alpern B., 1999, Proceedings of the 14th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications, P314
   [Anonymous], P 29 ACM SIGPLAN SIG
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Arnold Matthew., 2000, P 15 ACM SIGPLAN C O, P47
   BARRETT DA, 1995, P 1995 SIGPLAN C PRO, P301
   BARRETT DA, 1993, P ACM SIGPLAN C PROG, P187
   Blackburn SM, 2004, PROC INT CONF SOFTW, P137, DOI 10.1109/ICSE.2004.1317436
   BLACKBURN SM, 2001, P ACM SIGPLAN C OBJ, P342
   BLACKBURN SM, 2004, ACM SIGMETRICS C MEA, P25
   Blackburn StephenM., 2002, P SIGPLAN 2002 C PRO, P153, DOI DOI 10.1145/512529.512548
   Cahoon B, 2001, 2001 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P280, DOI 10.1109/PACT.2001.953309
   CAUDILL PJ, 1986, SIGPLAN NOTICES, V21, P119, DOI 10.1145/960112.28709
   Cheng P, 1998, ACM SIGPLAN NOTICES, V33, P162, DOI 10.1145/277652.277718
   DEMERS A, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/96709.96735
   EECKHOUT L, 2003, P 18 ANN ACM SIGPLAN, P169
   HANSON DR, 1990, SOFTWARE PRACT EXPER, V20, P5, DOI 10.1002/spe.4380200104
   Harris TimothyL., 2000, Proceedings of the 2Nd International Symposium on Memory Management. ISMM'00, P127, DOI DOI 10.1145/362422.362476
   HERTZ M, 2002, P 2002 ACM INT C MEA, P140
   Hertz M, 2006, ACM T PROGR LANG SYS, V28, P476, DOI 10.1145/1133651.1133654
   HICKS M, 1998, ISMM 98 P 1 INT S ME, P138
   HUANG X, 2001, P ACM C OBJ OR PROGR, P69
   Jump Maria., 2004, ACM INT S MEMORY MAN, P152
   Lee HB, 1997, PROCEEDINGS OF THE USENIX SYMPOSIUM ON INTERNET TECHNOLOGIES AND SYSTEMS, P73
   LIEBERMAN H, 1983, COMMUN ACM, V26, P419, DOI 10.1145/358141.358147
   ROGERS A, 1995, ACM T PROGR LANG SYS, V17, P233, DOI 10.1145/201059.201065
   SEIDL ML, 1998, ARCHITECTURAL SUPPOR, P12
   STEFANOVIC D, 1999, P 1999 ACM SIGPLAN C, P379
   STEFANOVIC D, 2002, P SIGPLAN WORKSH MEM
   Tarditi D., 1996, LISP and Symbolic Computation, V9, P323, DOI 10.1007/BF01806316
   UNGAR D, 1992, ACM T PROGR LANG SYS, V14, P1, DOI 10.1145/111186.116734
   UNGAR D, 1988, P OOPSLA 88, P1
   YANG T, 2001, P INT S MEM MAN VANC, P61
   ZORN B, 1989, UCBCSD89544
   [No title captured]
NR 36
TC 15
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2007
VL 29
IS 1
AR 2
DI 10.1145/1180475.1180477
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FG
UT WOS:000243927300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Eugster, P
AF Eugster, Patrick
TI Type-based publish/subscribe: Concepts and experiences
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; design; abstraction; generics; Java; publish/subscribe;
   reflection; type; distribution
ID COMMUNICATION
AB A continuously increasing number of interconnected computer devices makes the requirement for programming abstractions for remote one-to-many interaction yet more stringent. The publish/ subscribe paradigm has been advocated as a candidate abstraction for such one-to-many interaction at large scale. Common practices in publish/ subscribe, however, include low-level abstractions which hardly leverage type safety, and provide only poor support for object encapsulation. This tends to put additional burden on software developers; guarantees such as the aforementioned type safety and object encapsulation become of increasing importance with an accrued number of software components, which modern applications also involve, besides an increasing number of hardware components.
   Type-based publish/subscribe (TPS) is a high-level variant of the publish/subscribe paradigm which aims precisely at providing guarantees such as type safety and encapsulation. We present the rationale and principles underlying TPS, as well as two implementations in Java: the first based on a specific extension of the Java language, and a second novel implementation making use of recent general-purpose features of Java, such as generics and behavioral reflection. We compare the two approaches, thereby evaluating the aforementioned features-as well as additional features which have been included in the most recent Java 1.5 release-in the context of distributed and concurrent programming. We discuss the benefits of alternative programming languages and features for implementing TPS. By revisiting alternative abstractions for distributed programming, including "classic" and recent ones, we extend our investigations to programming language support for distributed programming in general, pointing out that overall, the support in current mainstream programming languages is still insufficient.
C1 Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Eugster, P (corresponding author), Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
EM p@cs.purdue.edu
CR AGHA GA, 1985, THESIS U MICHIGAN
   Aguilera M. K., 2000, Proceeding of the Nineteenth Annual ACM Symposium on Principles of Distributed Computing, P209, DOI 10.1145/343477.343620
   Aguilera M. K., 1999, Proceedings of the Eighteenth Annual ACM Symposium on Principles of Distributed Computing, P53, DOI 10.1145/301308.301326
   AKSIT M, 1993, P 7 EUR C OBJ OR PRO, P152
   Altherr M., 1999, INT WORKSHOP RELIABL, P43
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1999, EV YOU NEED KNOW MID
   ARAUJO F, 2002, P INT WORKSH DISTR E
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Bacon J, 2000, COMPUTER, V33, P68, DOI 10.1109/2.825698
   Baehni S, 2004, 2004 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P233
   Baehni S, 2002, INT CON DISTR COMP S, P355, DOI 10.1109/ICDCS.2002.1022273
   BAEHNI S, 2003, P 23 IEEE C DISTR CO
   Benton N, 2004, ACM T PROGR LANG SYS, V26, P769, DOI 10.1145/1018203.1018205
   BIRMAN KP, 1993, COMMUN ACM, V36, P37, DOI 10.1145/163298.163303
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   BRACHA G, 1998, P ACM S OBJ OR PROGR, P183
   Bracha Gilad., 2004, GENERICS JAVA PROGRA
   BRIOT JP, 1989, P ECOOP 89, P109
   BRUCE K, 1995, P 9 EUR C OBJ OR PRO, P27
   Bruce KB, 1997, LECT NOTES COMPUT SC, V1241, P104, DOI 10.1007/BFb0053376
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CARDELLI L, 1989, 16 ANN ACM S PRINC P, P202
   CARDELLI L, 1995, 22 ACM S PRINC PROGR, P286
   CAROMEL D, 1993, COMMUN ACM, V36, P90, DOI 10.1145/162685.162711
   Carzaniga A., 2000, Proceeding of the Nineteenth Annual ACM Symposium on Principles of Distributed Computing, P219, DOI 10.1145/343477.343622
   CHAMPETIER D, 1993, PROG UROL, V3, P5
   Ciancarini P, 1997, LECT NOTES COMPUT SC, V1222, P213
   Damm CH, 2004, INT CON DISTR COMP S, P244, DOI 10.1109/ICDCS.2004.1281589
   DEDECKER J, 2006, P 20 EUR C OBJ OR PR, P230
   Delporte-Gallet C, 2005, J PARALLEL DISTR COM, V65, P492, DOI 10.1016/j.jpdc.2004.11.008
   ELLIS M, 1992, ANNOTATED CPLUS PLUS
   ENGLER D, 1996, TM552 MIT LAB COMP S
   Eugster P, 2006, ACM SIGPLAN NOTICES, V41, P139, DOI 10.1145/1167515.1167485
   Eugster PT, 2004, PROC INT CONF SOFTW, P347, DOI 10.1109/ICSE.2004.1317457
   Eugster PT, 2003, ACM T COMPUT SYST, V21, P341, DOI 10.1145/945506.945507
   Eugster PT, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P313, DOI 10.1109/DSN.2002.1028915
   Eugster PT, 2002, 22ND INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOP, PROCEEDINGS, P625, DOI 10.1109/ICDCSW.2002.1030839
   Eugster PT, 2001, 6TH USENIX CONFERENCE OF OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS 01), P131
   EUGSTER PT, 2000, P 14 EUR C OBJ OR PR, P252
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   FOURNET C, 1997, P 8 INT C CONC THEOR, P196
   FOURNET C, 1996, 23 ACM S PRINC PROGR, P372
   FREEMAN E, 1999, JAVASPECIES PRINCIPL
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Gosling J., 2000, The Java Language Specification
   GREGONO P, 2000, P 14 EUR C OBJ OR PR, P226
   GROLAUX D, 2004, 2 INT C MULT PROGR M, P149
   Haahr M, 2000, INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR PARALLEL AND DISTRIBUTED SYSTEMS, PROCEEDINGS, P83, DOI 10.1109/PDSE.2000.847853
   HAPPNER M, 2002, JAVA MESSAGE SERVICE
   HARRISON TH, 1997, P OOPSLA 97, P184
   HAVELKA D, 2004, 2 INT C MULT PROGR M, P137
   HEJLSBERG A, 2001, C LANGUAGE SPECIFICA
   KAFURA D, 1993, J OBJECT-ORIENT PROG, V6, P47
   KENNEDY A, 2001, P 2001 ACM SIGPLAN C
   KOENIG P, 1999, DISTRIB COMPUT, V2, P44
   KRISHNAMURTHY B, 1995, IEEE T SOFTWARE ENG, V21, P845, DOI 10.1109/32.469456
   LIEBERMANN H, 1986, P ACM C OBJ OR PROGR, P281
   LISKOV B, 1993, SIGPLAN NOTICES, V28, P133, DOI 10.1145/155360.155367
   LISKOV B, 1988, COMMUN ACM, V31, P300, DOI 10.1145/42392.42399
   Mansouri-Samani M., 1997, Distributed Systems Engineering, V4, P96, DOI 10.1088/0967-1846/4/2/004
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   MEYER B, 2002, COMMUN ACM, V39, P56
   Meyer B., 1992, Eiffel: The Language
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   NIELSON F, 1988, THEOR COMPUT SCI, V56, P59, DOI 10.1016/0304-3975(86)90006-X
   OBERG RJ, 2000, UNDERSTANDING PROGRA
   Object Management Group (OMG), 2002, COMM OBJ REQ BROK AR
   Oki B., 1993, Operating Systems Review, V27, P58, DOI 10.1145/173668.168624
   *OMG, 2001, CORBA SERV COMM OBJ
   *OMG, 2001, COMM OBJ REQ BROK AR
   *OMG, 2000, NOT SERV STAND DOC
   *OMG, 2003, DAT DISTR SERV REAL
   OPYRCHAL L, 2000, P IFIP ACM INT C DIS, P185
   OSTROVSKY K, 2003, P 4 INT ACM SIGPLAN, P2
   Powell HC, 1996, ANN NEUROL, V39, P4, DOI 10.1002/ana.410390103
   PRATIKAKIS P, 2004, P 19 ACM C OBJ OR PR, P206
   RIVARD F, 1996, P REFLECTION 96, P21
   ROSENBERRY W, 1993, OSF DISTRIBUTED COMP
   SOLORZANO J, 1998, P OOPSLA 98 ACM, P216
   Srinivasan R., 1995, RPC: Remote procedure call protocol specification version 2
   Steele G. L.  Jr., 1999, Higher-Order and Symbolic Computation, V12, P221, DOI 10.1023/A:1010085415024
   *SUN, 2005, COR JAV J2SE 5 0
   TAHA W, 1997, P 1997 ACM SIGPLAN I, P321
   Takada T., 1987, Object-Oriented Concurrent Programming, Computer Systems Series, P55
   Thai T., 2001, NET FRAMEWORK ESSENT
   Thomassen DG, 2005, RADIOACTIV ENVIRONM, V7, P12, DOI 10.1016/S1569-4860(04)07002-0
   *TIBCO, 1999, TIB REND WHIT PAP
   UNYAPOTH A, 2001, 28 ACM SIGPLAN SIGAC, P116
   ZENGER M, 2001, ECOOP WORKSH MULT PR
NR 94
TC 31
Z9 36
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2007
VL 29
IS 1
AR 6
DI 10.1145/1180475.1180481
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FG
UT WOS:000243927300006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Paz, H
   Bacon, DF
   Kolodner, EK
   Petrank, E
   Rajan, VT
AF Paz, Harel
   Bacon, David F.
   Kolodner, Elliot K.
   Petrank, Erez
   Rajan, V. T.
TI An efficient on-the-fly cycle collection
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 14th International Conference on Compiler Construction
CY APR 04-AUG 05, 2005
CL Edinburgh, SCOTLAND
DE languages; algorithms; programming languages; memory management; garbage
   collection; reference counting; concurrent cycle collection; runtime
   systems
ID GARBAGE COLLECTION; JAVA
AB A reference-counting garbage collector cannot reclaim unreachable cyclic structures of objects. Therefore, reference-counting collectors either use a backup tracing collector infrequently, or employ a cycle collector to reclaim cyclic structures. We propose a new concurrent cycle collector, one that runs concurrently with the program threads, imposing negligible pauses (of around 1ms) on a multiprocessor. Our new collector combines a state-of-the-art cycle collector [Bacon and Rajan 2001] with sliding-views collectors [Levanoni and Petrank 2001, 2006; Azatchi et al. 2003]. The use of sliding views for cycle collection yields two advantages. First, it drastically reduces the number of cycle candidates, which in turn drastically reduces the work required to record and trace these candidates. Consequentially, a large improvement in cycle collection efficiency is achieved. Second, it eliminates the theoretical termination problem that appeared in the earlier concurrent cycle collector. There, a rare race may delay the reclamation of an unreachable cyclic structure forever. The sliding-views cycle collector guarantees reclamation of all unreachable cyclic structures.
C1 Technion Israel Inst Technol, IL-32000 Haifa, Israel.
   IBM Haifa Res Lab, Haifa, Israel.
C3 Technion Israel Institute of Technology; International Business Machines
   (IBM)
RP Paz, H (corresponding author), Technion Israel Inst Technol, IL-32000 Haifa, Israel.
EM pharel@cs.technion.ac.il; dfb@us.ibm.com; kolodner@il.ibm.com;
   erez@cs.technion.ac.il; vtrajan@us.ibm.com
CR Alpern B, 1999, ACM SIGPLAN NOTICES, V34, P314, DOI 10.1145/320385.320418
   Azatchi H, 2003, LECT NOTES COMPUT SC, V2622, P185
   AZATCHI H, 2003, OOPSLA 03 ACM C OBJ
   BACON DF, 2001, LECT NOTES COMPUTER, V2072
   BACON DF, 2001, P SIGPLAN 2001 C PRO
   BAKER HG, 1978, COMMUN ACM, V21, P280, DOI 10.1145/359460.359470
   BENARI M, 1984, ACM T PROGR LANG SYS, V6, P333, DOI 10.1145/579.587
   BENARI M, 1982, AUTOMATA LANGUAGES P, P14
   BLACKBURN S, 2003, OOPSLA 03 ACM C OBJ
   Bobrow D. G., 1980, ACM Transactions on Programming Languages and Systems, V2, P269, DOI 10.1145/357103.357104
   BOEHM HJ, 1991, SIGPLAN NOTICES, V26, P157
   CHRISTOPHER TW, 1984, SOFTWARE PRACT EXPER, V14, P503, DOI 10.1002/spe.4380140602
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   DEMERS A, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/96709.96735
   DEUTSCH LP, 1976, COMMUN ACM, V19, P522, DOI 10.1145/360336.360345
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P965
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   DOLIGEZ D, 1994, C REC 21 ANN ACM S P
   DOMANI T, 2000, P SIGPLAN 2000 C PRO
   ELLIS JR, 1988, DECSRCTR25
   ENDO T, 1997, P HIGH PERF COMP NET
   FLOOD C, 2001, US JAV VIRT MACH RES
   GRIES D, 1977, COMMUN ACM, V20, P921, DOI 10.1145/359897.359903
   HUDSON RL, 2001, JOINT ACM JAV GRAND
   Jones Richard., 1996, GARBAGE COLLECTION
   KERMANY H, 2006, P SIGPLAN 2006 C PRO
   KOLODNER EK, 2004, PARALLEL PROCESSING, V14
   KUNG HT, 1977, IEEE S FDN COMP SCI, P120
   LAMPORT L, 1976, P 1976 INT C PAR PRO, P60
   Levanoni Y, 2006, ACM T PROGR LANG SYS, V28, P1, DOI 10.1145/1111596.1111597
   Levanoni Y, 2001, ACM SIGPLAN NOTICES, V36, P367, DOI 10.1145/504311.504309
   LEVANONI Y, 1999, CSO967 TECHN ISR I T
   Lins RD, 2002, INFORM PROCESS LETT, V83, P145, DOI 10.1016/S0020-0190(01)00328-3
   LINS RD, 1992, INFORM PROCESSING LE, V44, P4215
   MARTINEZ AD, 1990, INFORM PROCESS LETT, V34, P31, DOI 10.1016/0020-0190(90)90226-N
   MCBETH JH, 1963, COMMUN ACM, V6, P575, DOI 10.1145/367593.367649
   MOON DA, 1984, C REC 1984 ACM S LIS, P235
   NILSEN KD, 2000, METHOD EFFICIENT SOF
   PAZ H, 2003, CS200308 ISR I TECHN
   PAZ H, 2005, P 14 INT C COMP CONS
   PRINTEZIS T, 2000, ISMM 2000 P 2 INT S, V36
   *SPEC BENCHM, 2000, STAND PERF EV CORP
   STEELE GL, 1975, COMMUN ACM, V18, P495, DOI 10.1145/361002.361005
   STEERS RM, 1976, ACAD MANAGE J, V19, P6, DOI 10.5465/255443
   WEIZENBAUM J, 1963, COMMUN ACM, V6, P524, DOI 10.1145/367593.367617
   Wilson P. R., 1995, P INT WORKSH MEM MAN
NR 46
TC 8
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 4
AR 20
DI 10.1145/1255450.1255453
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 202OS
UT WOS:000248913500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Pottier, F
   Skalka, C
   Smith, S
AF Pottier, F
   Skalka, C
   Smith, S
TI A systematic approach to static access control
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; reliability; security; theory; type systems; stack
   inspection; access control
ID EXCEPTIONS
AB The Java Security Architecture includes a dynamic mechanism for enforcing access control checks, the so-called stack inspection process. While the architecture has several appealing features, access control checks are all implemented via dynamic method calls. This is a highly nondeclarative form of specification that is hard to read, and that leads to additional run-time overhead. This article develops type systems that can statically guarantee the success of these checks. Our systems allow security properties of programs to be clearly expressed within the types themselves, which thus serve as static declarations of the security policy. We develop these systems using a systematic methodology: we show that the security-passing style translation, proposed by Wallach et al. [2000] as a dynamic implementation technique, also gives rise to static security-aware type systems, by composition with conventional type systems. To define the latter, we use the general HM(X) framework, and easily construct several constraint- and unification-based type systems.
C1 Univ Vermont, Dept Comp Sci, Burlington, VT 05405 USA.
   INRIA Rocquencourt, Le Chesnay, France.
   Johns Hopkins Univ, Baltimore, MD 21218 USA.
C3 University of Vermont; Johns Hopkins University
RP Univ Vermont, Dept Comp Sci, Votey 351,33 Colchester Ave, Burlington, VT 05405 USA.
EM skalka@cs.uvm.edu
RI Smith, Scott/C-9098-2009
OI Skalka, Christian/0000-0002-0402-809X; Pottier,
   Francois/0000-0002-4069-1235
CR AIKEN A, 1994, ACM S PRINC PROGR LA, P163
   AIKEN AS, 1997, STAT AN S SAS, P114
   [Anonymous], P ACM INT C FUNCT PR
   [Anonymous], 1999, P 1999 WORKSH NEW SE
   [Anonymous], 1994, THEORETICAL ASPECTS
   [Anonymous], P 4 ACM SIGPLAN INT
   BANERJEE A, 2001, 20011 STEV I TECHN
   BARTOLETTI M, 2001, ELECT NOTES THEORETI, V54
   Besson F., 2001, Journal of Computer Security, V9, P217
   Clements J, 2003, LECT NOTES COMPUT SC, V2618, P22
   Filinski A., 1999, P 26 ACM SIGPLAN SIG, P175
   Fournet Cedric., 2002, POPL 02, P307
   GONG L, 1998, JAVA SECURITY ARCHIT
   Gong L., 1998, 1998 INTERNET SOC S, P125
   GUZMAN JC, 1994, INRIA RES REPORTS, V2265, P127
   HIGUCHI T, 2003, P ACM INT C FUNCT PR, P227
   Jensen T, 1999, P IEEE S SECUR PRIV, P89, DOI 10.1109/SECPRI.1999.766902
   JONES SP, 1993, P ACM S PRINC PROGR
   KOVED L, 2002, P 17 ACM SIGPLAN C O, P359
   Lai C., 1999, Proceedings 15th Annual Computer Security Applications Conference (ACSAC'99), P285, DOI 10.1109/CSAC.1999.816038
   Leroy X, 2000, ACM T PROGR LANG SYS, V22, P340, DOI 10.1145/349214.349230
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   NAUMOVICH G, 2002, P INT S SOFTW TEST A, P33
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Pottier F, 2003, IEEE S LOG, P331, DOI 10.1109/LICS.2003.1210073
   Pottier F., 2000, Nordic Journal of Computing, V7, P312
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   Remy D., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P66, DOI 10.1145/141471.141507
   Remy Didier, 1992, 1766 INRIA
   Schneider F. B., 2000, ACM T INFORM SYSTEM, V3, P1
   SIMONET V, 2003, P AS S PROGR LANG SY
   SKALKA C, 2000, P 5 ACM SIGPLAN INT, P34
   SKALKA C, 2002, ELECT NOTES THEORETI, V75
   SKALKA C, 2002, THESIS J HOPKINS U
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Su ZD, 2001, LECT NOTES COMPUT SC, V2028, P170
   SULZMANN M, 2000, THESIS YALE U
   Sulzmann Martin, 1999, ACRC99009 U S AUSTR
   THIEMANN P, 2001, LECT NOTES COMPUTER
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   WADLER P, 1985, LECT NOTES COMPUT SC, V201, P113
   Walker D., 2000, P 27 ACM SIGPLAN SIG, P254
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
   WALLACH DS, 1999, THESIS PRINCETON U
   Wright AK, 1997, ACM T PROGR LANG SYS, V19, P87, DOI 10.1145/239912.239917
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 46
TC 26
Z9 27
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2005
VL 27
IS 2
BP 344
EP 382
DI 10.1145/1057387.1057392
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917RK
UT WOS:000228486700005
OA Bronze
DA 2024-07-18
ER

PT J
AU Mirani, R
   Hudak, P
AF Mirani, R
   Hudak, P
TI First-class monadic schedules
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages
ID NONDETERMINISM; PARALLELISM; REDUCTION; LANGUAGE
AB Parallel functional languages often use meta-linguistic annotations to provide control over parallel evaluation. In this paper we explore a flexible mechanism to control when an expression is evaluated: first-class monadic schedules. We discuss the advantages of using such first-class values over traditional annotation-based systems. In particular, it is often desirable to make decisions about the operational behavior of parallel programs depending on the dynamic state of the system. For example, we may want to measure the system load before deciding to evaluate expressions in parallel. For this purpose, we show how monads can be used to access dynamic system parameters in a referentially transparent manner (up to termination).
   As a mechanism to reason about schedules, we present a set of algebraic properties that any implementation of schedules must satisfy. We also describe an implementation that translates schedules into a dialect of Scheme extended with futures. We prove that this implementation satisfies the given set of algebraic properties, and give performance results for a parallel solution to the n-body problem using the Barnes-Hut method.
   Although our ideas were developed specifically for nonstrict functional languages such as Haskell, we briefly discuss how they can be used with strict functional languages and imperative languages as well.
C1 Hewlett Packard Corp, Applicat Dev Lab, Cupertino, CA 95014 USA.
   Yale Univ, Dept Comp Sci, New Haven, CT 06520 USA.
C3 Hewlett-Packard; Yale University
RP Hewlett Packard Corp, Applicat Dev Lab, Cupertino, CA 95014 USA.
EM mirani@cup.hp.com; paul.hudak@yale.edu
CR ACHTEN P, 1991, 9107 CSTR U SOUTH
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   ARVIND, 1986, LECT NOTES COMPUTER, V279
   BARNES J, 1986, NATURE           DEC
   Bloss A., 1988, LISP and Symbolic Computation, V1, P147, DOI 10.1007/BF01806169
   BROY M, 1981, LECT NOTES INT SUMME
   BURTON FW, 1984, ACM T PROGR LANG SYS, V6, P159, DOI 10.1145/2993.357241
   BURTON FW, 1988, COMPUT J, V31, P243, DOI 10.1093/comjnl/31.3.243
   CHEN M, 1991, PARAL FUNCT LANG COM, pCH7
   CLINGER W, 1982, P 1982 ACM S, V94
   Clinger W., 1985, 848 AI MIT
   Darlington J., 1981, FPCA 81, P65
   GORDON DA, 1993, THESIS U CAMBRIDGE
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Henderson P., 1982, Functional programming and its applications. An advanced course, P177
   HUDAK P, 1986, INT J PARALLEL PROG, V15, P103, DOI 10.1007/BF01414441
   HUDAK P, 1985, LECT NOTES COMPUT SC, V201, P382
   HUDAK P, 1986, COMPUTER, V19, P60, DOI 10.1109/MC.1986.1663309
   HUDAK P, 1990, SERIES SUPERCOMPUTIN
   HUDAK P, 1986, P 12 ACM S PRINC PRO, P243
   HUDAK P, 1986, LECT NOTES COMPUTER, V279, P312
   *IMP COLL DEP COMP, 1993, 9347 DOC IMP COLL
   JAGANNATHAN S, 1992, P 1992 C PROGR LANG
   JONES SLP, 1987, LECT NOTES COMPUT SC, V274, P98
   JONES SP, 1993, 20 ACM S PRINC PROGR, P71
   KELLY P, 1989, RES MONOGRAPHS PARAL
   KEWLEY JM, 1989, WORKSHOPS COMPUTING, P329
   MIRANI R, 1996, THESIS YALE U
   MIRANI R, 1995, FPCA 95 C FUNCT PROG, P78
   Moggi E, 1990, ECSLFCS90113 U ED
   NIKHIL RS, 1991, 2842 CSG MIT LAB COM
   NIKHIL RS, 1995, 369 CSG MIT LAB COMP
   PAPADOPOULOS GM, 1988, THESIS MIT CAMBRIDGE
   PHILBIN JF, 1993, YALEUDCSRR997
   ROBERTSON IB, 1989, WORKSHOPS COMPUTING, P296
   SONDERGAARD H, 1988, 8818 U MELB DEP COMP
   STOYE W, 1984, 56 CAMBR U COMP LAB
   Trinder Philip W., 1998, J FUNCTIONAL PROGRAM, V8, P23, DOI DOI 10.1017/S0956796897002967
   TURNER D, 1987, LECT NOTES COMPUT SC, V259, P54
   WADLER P, 1992, 19 ANN ACM SIGPLAN S, P1
   WADLER P, 1989, P 4 S FUNCT PROGR LA
   Walicki M, 1997, ACM COMPUT SURV, V29, P30, DOI 10.1145/248621.248623
   [No title captured]
NR 43
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2004
VL 26
IS 4
BP 609
EP 651
DI 10.1145/1011508.1011509
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 843CN
UT WOS:000223053200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Ramsey, N
   Cifuentes, C
AF Ramsey, N
   Cifuentes, C
TI A transformational approach to binary translation of delayed branches
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE experimentation; languages; binary translation; program analysis;
   program transformation
ID PROGRAM
AB A binary translator examines binary code for a source machine and generates code for a target machine. Understanding what to do with delayed branches in binary code can involve tricky case analyses, for example, if there is a branch instruction in a delay slot. This article presents a disciplined method for deriving such case analyses. The method identifies problematic cases, shows the translations for the nonproblematic cases, and gives confidence that all cases are considered. The method supports such common architectures as SPARC, MIPS, and PA-RISC, and it should apply to any tool that analyzes machine instructions. We begin by writing a very simple interpreter for the source machine's code. We then transform the interpreter into an interpreter for a target machine without delayed branches. To maintain the semantics of the program being interpreted, we simultaneously transform the sequence of source-machine instructions into a sequence of target-machine instructions. The transformation of the instructions becomes our algorithm for binary translation.
C1 Harvard Univ, Div Engn & Appl Sci, Cambridge, MA 01238 USA.
   Sun Microsyst Labs, Palo Alto, CA 94303 USA.
C3 Harvard University
RP Harvard Univ, Div Engn & Appl Sci, Cambridge, MA 01238 USA.
EM nr@eecs.harvard.edu; cristina.cifuentes@sun.com
OI Ramsey, Norman/0000-0002-5435-1135
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 1992, SPARC ARCHITECTURE M
   BARBACCI MR, 1982, DESIGN ANAL INSTRUCT
   BELL CG, 1971, COMPUTER STRUCTURES
   Cifuentes C, 1998, PROC IEEE INT CONF S, P228, DOI 10.1109/ICSM.1998.738514
   Cifuentes C, 2000, COMPUTER, V33, P60, DOI 10.1109/2.825697
   CIFUENTES C, 1999, P WORK C REV ENG ATL, P280
   CIFUENTES C, 2002, TR2002104 SUN MICR L
   Cifuentes C., 2002, TR2002105 SUN MICR L
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   JONES ND, 1993, PRENTICEHALL INT INT
   Kane G., 1988, MIPS RISC Architecture
   LARUS JR, 1994, SOFTWARE PRACT EXPER, V24, P197, DOI 10.1002/spe.4380240204
   PRENTICEHALL, 1993, SYSTEM 5 APPL BINARY
   Ramsey N, 1997, ACM T PROGR LANG SYS, V19, P492, DOI 10.1145/256167.256225
   Ramsey N., 1998, ACM SIGPLAN WORKSHOP, V1474, P172
   Ronsse M., 2001, Computer Architecture News, V29, P43, DOI 10.1145/373574.373589
   Shankar N, 1996, SCI COMPUT PROGRAM, V26, P33, DOI 10.1016/0167-6423(96)00003-2
   SITES RL, 1993, COMMUN ACM, V36, P69, DOI 10.1145/151220.151227
NR 19
TC 3
Z9 20
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2003
VL 25
IS 2
BP 210
EP 224
DI 10.1145/641888.641890
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 659FD
UT WOS:000181765900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Li, YB
   Zhang, QR
   Reps, T
AF Li, Yuanbo
   Zhang, Qirun
   Reps, Thomas
TI Fast Graph Simplification for Interleaved-Dyck Reachability
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Static analysis; CFL-reachability
AB Many program-analysis problems can be formulated as graph-reachability problems. Interleaved Dyck language reachability (INTERDYCK-reachability) is a fundamental framework to express a wide variety of program-analysis problems over edge-labeled graphs. The INTERDYCK language represents an intersection of multiple matched-parenthesis languages (i.e., Dyck languages). In practice, program analyses typically leverage one Dyck language to achieve context-sensitivity, and other Dyck languages to model data dependencies, such as field-sensitivity and pointer references/dereferences. In the ideal case, an INTERDYCK-reachability framework should model multiple Dyck languages simultaneously.
   Unfortunately, precise INTERDYCK-reachability is undecidable. Any practical solution must overapproximate the exact answer. In the literature, a lot of work has been proposed to over-approximate the INTERDYCK-reachability formulation. This article offers a new perspective on improving both the precision and the scalability of INTERDYCK-reachability: we aim at simplifying the underlying input graph G. Our key insight is based on the observation that if an edge is not contributing to any INTERDYCK-paths, we can safely eliminate it from G. Our technique is orthogonal to the INTERDYCK-reachability formulation and can serve as a pre-processing step with any over-approximating approach for INTERDYCK-reachability. We have applied our graph simplification algorithm to pre-processing the graphs from a recent INTERDYCK-reachability-based taint analysis for Android. Our evaluation of three popular INTERDYCK-reachability algorithms yields promising results. In particular, our graph-simplification method improves both the scalability and precision of all three INTERDYCK-reachability algorithms, sometimes dramatically.
C1 [Li, Yuanbo; Zhang, Qirun] Georgia Inst Technol, Sch Comp Sci, 266 Ferst Dr NW, Atlanta, GA 30332 USA.
   [Reps, Thomas] Univ Wisconsin, Comp Sci Dept, 1210 Dayton St, Madison, WI 53703 USA.
C3 University System of Georgia; Georgia Institute of Technology;
   University of Wisconsin System; University of Wisconsin Madison
RP Li, YB (corresponding author), Georgia Inst Technol, Sch Comp Sci, 266 Ferst Dr NW, Atlanta, GA 30332 USA.
EM yuanboli@gatech.edu; qrzhang@gatech.edu; reps@cs.wisc.edu
OI Li, Yuanbo/0000-0002-0194-5589
FU Facebook under a Probability and Programming Research Award; United
   States National Science Foundation (NSF) [1917924, 2114627]; Defense
   Advanced Research Projects Agency (DARPA) [N66001-21-C-4024]; ONR
   [N00014-17-1-2889, N00014-19-1-2318]; Facebook Graduate Fellowship;
   Amazon; Direct For Computer & Info Scie & Enginr; Division of Computing
   and Communication Foundations [2114627, 1917924] Funding Source:
   National Science Foundation
FX This work was supported, in part, by a gift from Rajiv and Ritu Batra;
   by Facebook under a Probability and Programming Research Award; by
   Amazon under an Amazon Research Award in automated reasoning; by the
   United States National Science Foundation (NSF) under grants No. 1917924
   and No. 2114627; by the Defense Advanced Research Projects Agency
   (DARPA) under grant N66001-21-C-4024; and by ONR under grants
   N00014-17-1-2889 and N00014-19-1-2318. The first author was partially
   supported by the Facebook Graduate Fellowship. Any opinions, findings,
   and conclusions or recommendations expressed in this publication are
   those of the authors, and do not necessarily reflect the views of the
   above sponsoring entities.
CR [Anonymous], PLDI 00
   [Anonymous], PLDI 98
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   Cheng BC, 2000, ACM SIGPLAN NOTICES, V35, P57, DOI 10.1145/358438.349311
   De A, 2012, LECT NOTES COMPUT SC, V7313, P665, DOI 10.1007/978-3-642-31057-7_29
   Hardekopf B, 2007, LECT NOTES COMPUT SC, V4634, P265
   Harrison M.A., 1978, Introduction to Formal Language Theory
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Huang W., 2015, P 2015 INT S SOFTWAR, P106, DOI 10.1145/2771783.2771803
   Kahlon V, 2009, IEEE S LOG, P27, DOI 10.1109/LICS.2009.45
   KODUMAL J, 2004, P C PROGR LANG DES I, P207
   Lerch J, 2015, IEEE INT CONF AUTOM, P619, DOI 10.1109/ASE.2015.9
   Li YB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434340
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   SRIDHARAN M, 2006, PLDI 06, P387
   Sridharan Manu, 2005, P 20 ANN ACM SIGPLAN, P59, DOI [DOI 10.1145/1103845.1094817, 10.1145/1094811.1094817, DOI 10.1145/1094811.1094817]
   Tang H, 2015, ACM SIGPLAN NOTICES, V50, P83, DOI [10.1145/2676726.2676997, 10.1145/2775051.2676997]
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
   Zhang QR, 2014, ACM SIGPLAN NOTICES, V49, P829, DOI [10.1145/2660193.2660213, 10.1145/2714064.2660213]
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 30
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2022
VL 44
IS 2
AR 11
DI 10.1145/3492428
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3B6GO
UT WOS:000828037100006
OA Bronze
DA 2024-07-18
ER

PT J
AU Liu, PZ
   Wahl, T
   Reps, T
AF Liu, Peizun
   Wahl, Thomas
   Reps, Thomas
TI Interprocedural Context-Unbounded Program Analysis Using Observation
   Sequences
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Interprocedural analysis; context bound; concurrency; recursion; stack
ID BOUNDED ANALYSIS; REACHABILITY ANALYSIS; PUSHDOWN-AUTOMATA; MODEL
   CHECKING; VERIFICATION; SOFTWARE
AB A classical result by Ramalingam about synchronization-sensitive interprocedural program analysis implies that leachability for concurrent threads running recursive procedures is undecidable. A technique proposed by Qadeer and Rehof, to bound the number of context switches allowed between the threads, leads to an incomplete solution that is, however, believed to catch "most bugs" in practice, as errors tend to occur within few contexts. The question of whether the technique can also prove the absence of bugs at least in some cases has remained largely open.
   Toward closing this gap, we introduce in this article the generic verification paradigm of observation sequences for resource-parameterized programs. Such a sequence observes how increasing the resource parameter affects the reachability of states satisfying a given property. The goal is to show that increases beyond some "cutoff" parameter value have no impact on the reachability-the sequence has converged. This allows us to conclude that the property holds for all parameter values.
   We applied this paradigm to the context- unbounded program analysis problem, choosing the resource to be the number of permitted thread context switches. The result is a partially correct interprocedural reachability analysis technique for concurrent shared-memory programs. Our technique may not terminate but is able to both refute and prove context-unbounded safety for such programs. We demonstrate the effectiveness and efficiency of the technique using a variety of benchmark programs. The safe instances cannot be proved safe by earlier, context-bounded methods.
C1 [Liu, Peizun; Wahl, Thomas] Northeastern Univ, Khoury Coll Comp Sci, 360 Huntington Ave, Boston, MA 02115 USA.
   [Reps, Thomas] Univ Wisconsin, Comp Sci Dept, 1210 West Dayton St, Madison, WI 53706 USA.
C3 Northeastern University; University of Wisconsin System; University of
   Wisconsin Madison
RP Liu, PZ (corresponding author), Northeastern Univ, Khoury Coll Comp Sci, 360 Huntington Ave, Boston, MA 02115 USA.
EM liu.pei@northeastern.edu; t.wahl@northeastern.edu; reps@cs.wisc.edu
OI Liu, Peizun/0000-0002-3583-457X
FU U.S. National Science Foundation [1253331]; Air Force Research
   Laboratory under DARPA MUSE grant [FA8750-14-2-0270]; Air Force Research
   Laboratory under DARPA STAC grant [FA8750-15-C-0082]; Office of Naval
   Research [N00014-17-1-2889, N00014-19-1-2318]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [1253331] Funding Source: National Science Foundation
FX P. Liu and T. Wahl were supported by the U.S. National Science
   Foundation under grant 1253331
   (https://www.nsf.gov/awardsearch/showAward?AWD_ID=1253331).T.Reps was
   supported by a gift from Rajiv and Ritu Batra, by the Air Force Research
   Laboratory under DARPA MUSE grant FA8750-14-2-0270 and DARPA STAC grant
   FA8750-15-C-0082, and by the Office of Naval Research under grants
   N00014-17-1-2889 and N00014-19-1-2318.
CR Abdulla P, 2016, INT J SOFTW TOOLS TE, V18, P495, DOI 10.1007/s10009-015-0406-x
   Alur R., 2004, P 36 ANN ACM S THEOR, P202, DOI [DOI 10.1145/1007352.1007390, 10.1145/1007352.1007390]
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   [Anonymous], 1996, INT J FOUND COMPUT S, DOI DOI 10.1142/S0129054196000191
   [Anonymous], 1927, ACTA LITT SCI REG U
   Atig MF, 2008, LECT NOTES COMPUT SC, V5257, P121, DOI 10.1007/978-3-540-85780-8_9
   Atig MF, 2009, LECT NOTES COMPUT SC, V5505, P107, DOI 10.1007/978-3-642-00768-2_11
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   Beyer Dirk, 2019, SV BENCHMARKS
   Bingham J, 2005, ELECTRON NOTES THEOR, V138, P37, DOI 10.1016/j.entcs.2005.01.045
   Bollig B, 2017, THEOR COMPUT SYST, V60, P695, DOI 10.1007/s00224-016-9700-6
   Bouaijani A, 2005, LECT NOTES COMPUT SC, V3653, P473, DOI 10.1007/11539452_36
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouajjani A, 2005, LECT NOTES COMPUT SC, V3821, P348, DOI 10.1007/11590156_28
   Bouajjani A, 2007, LECT NOTES COMPUT SC, V4590, P207
   Bouajjani A, 2011, LECT NOTES COMPUT SC, V6887, P129, DOI 10.1007/978-3-642-23702-7_13
   Chaki S, 2006, LECT NOTES COMPUT SC, V3920, P334
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Emerson EA, 2000, LECT NOTES ARTIF INT, V1831, P236
   Emmi M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P411, DOI 10.1145/1926385.1926432
   Finkel A., 1997, Electronic Notes in Theoretical Computer Science, V9, DOI 10.1016/S1571-0661(05)80426-8
   Ghafari N, 2010, LECT NOTES COMPUT SC, V6349, P227
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Kahlon Vineet, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P303, DOI 10.1145/1190216.1190262
   Kahlon V, 2005, LECT NOTES COMPUT SC, V3576, P505
   Kaiser A, 2010, LECT NOTES COMPUT SC, V6174, P645
   Komuravelli A, 2014, LECT NOTES COMPUT SC, V8559, P17
   Kung H. T., 1980, ACM Transactions on Database Systems, V5, P354, DOI 10.1145/320613.320619
   La Torre S, 2007, IEEE S LOG, P161, DOI 10.1109/LICS.2007.9
   La Torre S, 2016, INT J FOUND COMPUT S, V27, P215, DOI 10.1142/S0129054116400074
   La Torre S, 2011, LECT NOTES COMPUT SC, V6901, P203, DOI 10.1007/978-3-642-23217-6_14
   La Torre S, 2010, LECT NOTES COMPUT SC, V6174, P629, DOI 10.1007/978-3-642-14295-6_54
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   La Torre S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P211, DOI 10.1145/1542476.1542500
   La Torre Salvatore, 2008, P299
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Liu PZ, 2019, LECT NOTES COMPUT SC, V11562, P386, DOI 10.1007/978-3-030-25543-5_22
   Liu PZ, 2018, ACM SIGPLAN NOTICES, V53, P105, DOI 10.1145/3192366.3192419
   Liu Peizun, 2018, RESOURCE AWARE PROGR
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Nguyen Truc L., 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P461, DOI 10.1007/978-3-662-46681-0_45
   Nguyen TL, 2016, LECT NOTES COMPUT SC, V9938, P174, DOI 10.1007/978-3-319-46520-3_12
   Prabhu Prathmesh, 2011, Technical Report TR-1701
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Qadeer S, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/996893.996845
   Qadeer S, 2004, ACM SIGPLAN NOTICES, V39, P245, DOI 10.1145/982962.964022
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Schwoon Stefan, 2000, THESIS
   Suwimonteerabuth D, 2008, LECT NOTES COMPUT SC, V5156, P270, DOI 10.1007/978-3-540-85114-1_19
NR 49
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD FEB
PY 2021
VL 42
IS 4
AR 16
DI 10.1145/3418583
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QH3TK
UT WOS:000618199200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Rosà, A
   Rosales, E
   Binder, W
AF Rosa, Andrea
   Rosales, Eduardo
   Binder, Walter
TI Analysis and Optimization of Task Granularity on the java Virtual
   Machine
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Task granularity; task parallelism; performance analysis and
   optimization; vertical profiling; actionable profiles; Java virtual
   machine
AB Task granularity, i.e., the amount of work performed by parallel tasks, is a key performance attribute of parallel applications. On the one hand, fine-grained tasks (i.e., small tasks carrying out few computations) may introduce considerable parallelization overheads. On the other hand, coarse-grained tasks (i.e., large tasks performing substantial computations) may not fully utilize the available CPU cores, leading to missed parallelization opportunities. In this article, we provide a better understanding of task granularity for task-parallel applications running on a single Java Virtual Machine in a shared-memory multicore. We present a new methodology to accurately and efficiently collect the granularity of each executed task, implemented in a novel profiler (available open-source) that collects carefully selected metrics from the whole system stack with low overhead, and helps developers locate performance and scalability problems. We analyze task granularity in the DaCapo, ScalaBench, and Spark Perf benchmark suites, revealing inefficiencies related to fine-grained and coarse-grained tasks in several applications. We demonstrate that the collected task-granularity profiles are actionable by optimizing task granularity in several applications, achieving speedups up to a factor of 5.90x. Our results highlight the importance of analyzing and optimizing task granularity on the Java Virtual Machine.
C1 [Rosa, Andrea; Rosales, Eduardo; Binder, Walter] Univ Svizzera Italiana, Via Giuseppe Buffi 13, CH-6900 Lugano, Switzerland.
C3 Universita della Svizzera Italiana
RP Rosà, A (corresponding author), Univ Svizzera Italiana, Via Giuseppe Buffi 13, CH-6900 Lugano, Switzerland.
EM andrea.rosa@usi.ch; rosale@usi.ch; walter.binder@usi.ch
RI Rosà, Andrea/ABC-9720-2020
OI Binder, Walter/0000-0002-2477-2182; Rosa, Andrea/0000-0002-6467-0113
FU Oracle (ERO project) [1332]
FX The research presented in this article was supported by Oracle (ERO
   project 1332).
CR Acar UA, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P499
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Ammons G, 1997, ACM SIGPLAN NOTICES, V32, P85, DOI 10.1145/258916.258924
   [Anonymous], 2015, TUNE YOUR APACHE S 2
   [Anonymous], 1992, An introduction to parallel algorithms
   [Anonymous], P 21 ACM SIGPLAN S P
   Bi JM, 2014, 2014 IEEE INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING AND COMMUNICATIONS, 2014 IEEE 6TH INTL SYMP ON CYBERSPACE SAFETY AND SECURITY, 2014 IEEE 11TH INTL CONF ON EMBEDDED SOFTWARE AND SYST (HPCC,CSS,ICESS), P165, DOI 10.1109/HPCC.2014.32
   Binder W., 2007, P 5 INT S PRINC PRAC, DOI DOI 10.1145/1294325.1294344
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Chen F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P221, DOI 10.1145/1368088.1368119
   Chen KY, 2011, IEEE T COMPUT, V60, P1521, DOI 10.1109/TC.2010.232
   Databricks, 2015, SPARK PERF TESTS
   David F, 2014, ACM SIGPLAN NOTICES, V49, P291, DOI [10.1145/2714064.2660210, 10.1145/2660193.2660210]
   Dufour B, 2003, ACM SIGPLAN NOTICES, V38, P149, DOI 10.1145/949343.949320
   Duran A., 2008, SC 08 P 2008 ACMIEEE, P1, DOI DOI 10.1109/SC.2008.5213927
   Guojing Cong, 2008, 2008 37th International Conference on Parallel Processing (ICPP), P536, DOI 10.1109/ICPP.2008.88
   Hammond K., 1995, HPFC, V95, P208
   Hauswirth M, 2004, ACM SIGPLAN NOTICES, V39, P251, DOI 10.1145/1035292.1028998
   He Y, 2010, SPAA '10: PROCEEDINGS OF THE TWENTY-SECOND ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P145
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Huelsbergen L., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P79, DOI 10.1145/182409.182442
   IBM, 2007, DAYTRADER
   ICL, 2017, PAPI
   Inoue H, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P137
   Iwasaki S, 2016, 2016 IEEE 10TH INTERNATIONAL SYMPOSIUM ON EMBEDDED MULTICORE/MANY-CORE SYSTEMS-ON-CHIP (MCSOC), P353, DOI 10.1109/MCSoC.2016.51
   Kell Stephen, 2012, VMIL, P33
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kruskal C. P., 1988, Journal of Supercomputing, V1, P395, DOI 10.1007/BF00128489
   Kumar P, 2012, INDIGO PLANTATIONS AND SCIENCE IN COLONIAL INDIA, P297
   Lengauer Philipp., 2017, Proceedings of the 8th ACM/SPEC on International Conference on Performance Engineering, DOI [10.1145/3030207.3030211, DOI 10.1145/3030207.3030211]
   Lifflander J, 2014, INT CONF HIGH PERFOR, P857, DOI 10.1109/SC.2014.75
   Linux man, 2018, DOC CLOCK MONOTONIC
   Lopez P, 1996, J SYMB COMPUT, V21, P715, DOI 10.1006/jsco.1996.0038
   Marek L., 2013, GPCE, P105
   Marek Lukas, 2012, AOSD, P239, DOI [10.1145/2162049.2162077, DOI 10.1145/2162049.2162077]
   MOHR E, 1991, IEEE T PARALL DISTR, V2, P264, DOI 10.1109/71.86103
   MORET P, 2009, PEPM 09, P151
   Mytkowicz T, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P187, DOI 10.1145/1806596.1806618
   Noll A, 2013, ACM SIGPLAN NOTICES, V48, P713, DOI [10.1145/2544173.2509518, 10.1145/2509136.2509518]
   Oracle, 2017, JAVA NATIVE INTERFAC
   Oracle, 2017, DOC SYST NAN
   Oracle, 2017, THREADPOOLEXECUTOR
   Oracle, 2017, PAR COLL
   Oracle, 2017, JAV PLATF STAND ED J
   Oracle, 2017, FORKJOINPOOL
   Oracle, 2017, EXECUTORSERVICE
   Oracle, 2017, JAV VIRT MACH TOOL I
   perf, 2015, LIN PROF PERF COUNT
   Rosà A, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P104, DOI 10.1145/3136040.3136061
   Rosà A, 2018, INT SYM CODE GENER, P27, DOI 10.1145/3168828
   Rosà A, 2018, J VISUAL LANG COMPUT, V49, P29, DOI 10.1016/j.jvlc.2018.10.007
   Rosa Andrea, 2016, SIGPLAN NOTICES, V52, P36
   Rosales E, 2017, ASIA PAC SOFWR ENG, P570, DOI 10.1109/APSEC.2017.67
   Ryza Sandy, 2015, TUNE YOUR APACHE S 1
   Sarimbekov A, 2014, SCI COMPUT PROGRAM, V79, P146, DOI 10.1016/j.scico.2011.11.003
   Schardl TB, 2015, SPAA'15: PROCEEDINGS OF THE 27TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P89, DOI 10.1145/2755573.2755603
   Sewe A, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P657
   The Apache Software Foundation, 2018, AP SPARK RDD PROGR G
   The Apache Software Foundation, 2018, SPARK STREAMING
   The Apache Software Foundation, 2018, SPARKCONTEXT API
   The Apache Software Foundation, 2018, SPARK CONF
   The Eclipse Foundation, 2016, JETT
   The Stanford Natural Language Processing Group, 2010, STANFORD TOPIC MODEL
   Thoman P, 2013, LECT NOTES COMPUT SC, V8097, P164, DOI 10.1007/978-3-642-40047-6_19
   Villegas A, 2019, ENVIRON SCI POLLUT R, P1
   Yoga A, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P15, DOI 10.1145/3106237.3106254
   Zaharia M, 2012, P 9 USENIX C NETW SY, P15
   Zhao JS, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P169, DOI 10.1145/1854273.1854298
   Zheng Y., 2016, SANER, DOI [10.1109/SANER.2016.70, DOI 10.1109/SANER.2016.70]
   Zheng YD, 2015, ACM SIGPLAN NOTICES, V50, P433, DOI [10.1145/2858965.2814281, 10.1145/2814270.2814281]
   Zoppetti G. M., 2000, Conference Proceedings of the 2000 International Conference on Supercomputing, P306, DOI 10.1145/335231.335261
NR 71
TC 7
Z9 7
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2019
VL 41
IS 3
AR 19
DI 10.1145/3338497
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JU2BC
UT WOS:000501479500006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Jacobs, B
   Bosnacki, D
   Kuiper, R
AF Jacobs, Bart
   Bosnacki, Dragan
   Kuiper, Ruurd
TI Modular Termination Verification of Single-Threaded and Multithreaded
   Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Program termination; modular program verification module specifications;
   separation logic
AB We propose an approach for the modular specification and verification of total correctness properties of object-oriented programs. The core of our approach is a specification style that prescribes a way to assign a level expression to each method such that each callee's level is below the caller's, even in the presence of dynamic binding. The specification style yields specifications that properly hide implementation details. The main idea is to use multisets of method names as levels, and to associate with each object levels that abstractly reflect the way the object is built from other objects. A method's level is then defined in terms of the method's own name and the levels associated with the objects passed as arguments.
   We first present the specification style in the context of programs that do not modify object fields. We then combine it with separation logic and abstract predicate families to obtain an approach for programs with heap mutation. In a third step, we address concurrency, by incorporating an existing approach for verifying deadlock freedom of channels and locks. Our main contribution here is to achieve information hiding by using the proposed termination levels for lock ordering as well. Also, we introduce call permissions to enable elegant verification of termination of programs where threads cause work in other threads, such as in thread pools or fine-grained concurrent algorithms involving compare-and-swap loops.
   We explain how our approach can be used also to verify the liveness of nonterminating programs.
C1 [Jacobs, Bart] Katholieke Univ Leuven, Dept Comp Sci, Celestijnenlaan 200A, B-3001 Leuven, Belgium.
   [Bosnacki, Dragan] Eindhoven Univ Technol, Dept Biomed Engn, POB 513, NL-5600 MB Eindhoven, Netherlands.
   [Kuiper, Ruurd] Eindhoven Univ Technol, Comp Sci Dept, POB 513, NL-5600 MB Eindhoven, Netherlands.
C3 KU Leuven; Eindhoven University of Technology; Eindhoven University of
   Technology
RP Jacobs, B (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Celestijnenlaan 200A, B-3001 Leuven, Belgium.
EM bart.jacobs@cs.kuleuven.be; dragan@win.tue.nl; wsinruur@win.tue.nl
RI Jacobs, Bart/B-1271-2014
OI Jacobs, Bart/0000-0002-3605-249X
FU EU project ADVENT; Research Foundation - Flanders (FWO) [G.0058.13]
FX This work was supported by EU project ADVENT and by project G.0058.13 of
   the Research Foundation - Flanders (FWO).
CR Atkey R., 2011, LMCS, V7, P1
   Bornat Richard., 2005, P 32 ACM SIGPLAN SIG
   Bostrom Pontus, 2015, 29 EUR C OBJ OR PROG
   Boyland John, 2003, 10 INT S STAT AN
   Chargueraud Arthur, 2011, 2 INT C INT THEOR PR
   Chargueraud Arthur, 2011, ACM SIGPLAN INT C FU
   Darvas A, 2006, J OBJECT TECHNOL, V5, P59, DOI 10.5381/jot.2006.5.5.a3
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   Hoffmann J, 2013, IEEE S LOG, DOI 10.1109/LICS.2013.18
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jacobs B, 2015, 17TH WORKSHOP ON FORMAL TECHNIQUES FOR JAVA-LIKE PROGRAMS (FTFJP 2015), DOI 10.1145/2786536.2786543
   Jacobs Bart, 2018, MODULAR TERMINATION
   Jacobs Bart, 2009, 23 EUR C OBJ OR PROG
   Jacobs Bart, 2015, 23 EUR C OBJ OR PROG
   Jacobs Bart, 2015, 680 CW DEP COMP SCI
   Jacobs Bart, 2018, VERIFAST 18 02
   Leijen Daan, 2014, P 5 WORKSH MATH STRU
   Nakata K, 2009, LECT NOTES COMPUT SC, V5674, P375, DOI 10.1007/978-3-642-03359-9_26
   OHearn Peter W., 2001, 15 INT WORKSH COMP S
   Parkinson Matthew J., 2005, P 32 ACM SIGPLAN SIG
   Penninckx Willem, 2015, 24 EUR S PROGR ESPO
   Pinto Pedro da Rocha, 2016, 25 EUR S PROGR ESOP
   Reynolds John C., 2002, 17 IEEE S LOG COMP S
   Rudich Arsenii, 2008, 15 INT S FORM METH F
   Rustan K., 2010, 19 EUR S PROGR ESPO
   Rustan K., 2010, 17 INT C LOG PROGR A
   Rustan K., 2009, 12 INT C FUND APPR S
   Vafeiadis Viktor, 2011, 27 C MATH FDN PROGR
   Vogels F., 2015, LOG METH COMPUT SCI, V11, P1
NR 29
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2018
VL 40
IS 3
AR 12
DI 10.1145/3210258
PG 59
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GT7HI
UT WOS:000444694800005
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Alglave, J
   Kroening, D
   Nimal, V
   Poetzl, D
AF Alglave, Jade
   Kroening, Daniel
   Nimal, Vincent
   Poetzl, Daniel
TI Don't Sit on the Fence: A Static Analysis Approach to Automatic Fence
   Insertion
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Static analysis; weak memory; program synthesis; concurrency
ID MEMORY
AB Modern architectures rely on memory fences to prevent undesired weakenings of memory consistency. As the fences' semantics may be subtle, the automation of their placement is highly desirable. But precise methods for restoring consistency do not scale to deployed systems' code. We choose to trade some precision for genuine scalability: our technique is suitable for large code bases. We implement it in our new musketeer tool and report experiments on more than 700 executables from packages found in Debian GNU/Linux 7.1, including memcached with about 10,000 LoC.
C1 [Alglave, Jade; Nimal, Vincent] Microsoft Res, 21 Stn Rd, Cambridge CB1 2FB, England.
   [Alglave, Jade] UCL, Dept Comp Sci, Gower St, London WC1E 6BT, England.
   [Kroening, Daniel; Poetzl, Daniel] Univ Oxford, Dept Comp Sci, Parks Rd, Oxford OX1 3QD, England.
C3 Microsoft; University of London; University College London; University
   of Oxford
RP Alglave, J (corresponding author), Microsoft Res, 21 Stn Rd, Cambridge CB1 2FB, England.; Alglave, J (corresponding author), UCL, Dept Comp Sci, Gower St, London WC1E 6BT, England.
EM j.alglave@cs.ucl.ac.uk; kroening@cs.ox.ac.uk; vinimal@microsoft.com;
   daniel.poetzl@cs.ox.ac.uk
OI Kroening, Daniel/0000-0002-6681-5283
FU SRC [2269.002]; EPSRC [H017585/1]; ERC [280053]; European Research
   Council (ERC) [280053] Funding Source: European Research Council (ERC)
FX This work is supported by SRC 2269.002, EPSRC H017585/1, and ERC 280053.
CR Abdulla PA, 2015, LECT NOTES COMPUT SC, V9032, P308, DOI 10.1007/978-3-662-46669-8_13
   Abdulla PA, 2013, LECT NOTES COMPUT SC, V7795, P530, DOI 10.1007/978-3-642-36742-7_37
   Abdulla Parosh Aziz, 2015, INT C NETW SYST NETY
   Adve SaritaV., 1995, IEEE Computer, V29, P66
   Alglave Jade, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P50, DOI 10.1007/978-3-642-22110-1_6
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2013, LECT NOTES COMPUT SC, V7792, P512, DOI 10.1007/978-3-642-37036-6_28
   Alglave J, 2010, LECT NOTES COMPUT SC, V6174, P258, DOI 10.1007/978-3-642-14295-6_25
   Alglave Jade, 2011, Proceedings (Lecture Notes in Computer Science, V7078, P272, DOI [10.1007/ 978-3-642-25318- 8_21, DOI 10.1007/978-3-642-25318-8_21]
   Bender J, 2015, ACM SIGPLAN NOTICES, V50, P367, DOI [10.1145/2814270.2814318, 10.1145/2858965.2814318]
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Bouajjani A, 2011, LECT NOTES COMPUT SC, V6756, P428, DOI 10.1007/978-3-642-22012-8_34
   C11, 2011, 98992011 BS ISOIEC
   Chase David, 2005, P 17 ANN ACM S PAR A, P21, DOI DOI 10.1145/1073970.1073974
   Detlefs DL, 2000, LECT NOTES COMPUT SC, V1914, P59
   Dice David, 2009, RACE LOCKSUPORT PARK
   DIJKSTRA EW, 1965, COMMUN ACM, V8, P569, DOI 10.1145/365559.365617
   Fang X., 2003, Proceedings of the 17th Annual International Conference on Supercomputing, ICS '03
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Herlihy M., 2008, ART MULTIPROCESSOR P
   IBM, 2009, POW ISA VERS 2 06 RE
   Joshi S, 2015, LECT NOTES COMPUT SC, V9109, P291, DOI 10.1007/978-3-319-19249-9_19
   Kahlon V, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P13, DOI 10.1145/1595696.1595701
   Krishnamurthy A, 1996, J PARALLEL DISTR COM, V38, P130, DOI 10.1006/jpdc.1996.0136
   Kroening D, 2014, LECT NOTES COMPUT SC, V8934, P30, DOI 10.1007/978-3-319-14896-0_3
   Kuperstein Michael, 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P111
   Kuperstein M, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P187
   LAMPORT L, 1987, ACM T COMPUT SYST, V5, P1, DOI 10.1145/7351.7352
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee J, 2001, IEEE T COMPUT, V50, P824, DOI 10.1109/12.947002
   Linden A, 2013, LECT NOTES COMPUT SC, V7795, P339, DOI 10.1007/978-3-642-36742-7_24
   Liu F, 2012, ACM SIGPLAN NOTICES, V47, P429, DOI 10.1145/2345156.2254115
   Lustig D, 2015, 2015 ACM/IEEE 42ND ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA), P388, DOI 10.1145/2749469.2750378
   Marino D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P199
   Meshman Y, 2014, LECT NOTES COMPUT SC, V8723, P237, DOI 10.1007/978-3-319-10936-7_15
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Michael MM, 2009, ACM SIGPLAN NOTICES, V44, P45, DOI 10.1145/1594835.1504186
   Nimal Vincent, 2015, THESIS
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   PETERSON GL, 1981, INFORM PROCESS LETT, V12, P115, DOI 10.1016/0020-0190(81)90106-X
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Spear MF, 2009, INT SYM CODE GENER, P13, DOI 10.1109/CGO.2009.30
   Sura Z., 2005, Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, PPoPP '05, P2, DOI DOI 10.1145/1065944.1065947
   Szymanski B. K., 1988, Conference Proceedings. 1988 International Conference on Supercomputing, P621, DOI 10.1145/55364.55425
   Tarjan R., 1973, SIAM Journal on Computing, V2, P211, DOI 10.1137/0202017
   The SPARC, 1994, SPARC ARCH MAN VERS
   Vafeiadis V, 2011, LECT NOTES COMPUT SC, V6887, P146, DOI 10.1007/978-3-642-23702-7_14
   WINSKEL G, 1986, ADV PETRI NETS, P325, DOI DOI 10.1007/3-540-17906-2_31
NR 49
TC 15
Z9 17
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2017
VL 39
IS 2
AR 6
DI 10.1145/2994593
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FA1IG
UT WOS:000405192200001
DA 2024-07-18
ER

PT J
AU Feng, Y
   Duan, RY
   Ying, MS
AF Feng, Yuan
   Duan, Runyao
   Ying, Mingsheng
TI Bisimulation for Quantum Processes
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification; Quantum communication; quantum
   computing; quantum process algebra; bisimulation; congruence
ID WEAK BISIMULATION; METRICS; STATE
AB Quantum cryptographic systems have been commercially available, with a striking advantage over classical systems that their security and ability to detect the presence of eavesdropping are provable based on the principles of quantum mechanics. On the other hand, quantum protocol designers may commit more faults than classical protocol designers since human intuition is poorly adapted to the quantum world. To offer formal techniques for modeling and verification of quantum protocols, several quantum extensions of process algebra have been proposed. An important issue in quantum process algebra is to discover a quantum generalization of bisimulation preserved by various process constructs, in particular, parallel composition, where one of the major differences between classical and quantum systems, namely quantum entanglement, is present. Quite a few versions of bisimulation have been defined for quantum processes in the literature, but in the best case they are only proved to be preserved by parallel composition of purely quantum processes where no classical communication is involved.
   Many quantum cryptographic protocols, however, employ the LOCC (Local Operations and Classical Communication) scheme, where classical communication must be explicitly specified. So, a notion of bisimulation preserved by parallel composition in the circumstance of both classical and quantum communication is crucial for process algebra approach to verification of quantum cryptographic protocols. In this article we introduce novel notions of strong bisimulation and weak bisimulation for quantum processes, and prove that they are congruent with respect to various process algebra combinators including parallel composition even when both classical and quantum communication are present. We also establish some basic algebraic laws for these bisimulations. In particular, we show the uniqueness of the solutions to recursive equations of quantum processes, which proves useful in verifying complex quantum protocols. To capture the idea that a quantum process approximately implements its specification, and provide techniques and tools for approximate reasoning, a quantified version of strong bisimulation, which defines for each pair of quantum processes a bisimulation-based distance characterizing the extent to which they are strongly bisimilar, is also introduced.
C1 Univ Technol Sydney, Sydney, NSW 2007, Australia.
   Tsinghua Univ, Dept Comp Sci & Technol, Tsinghua Natl Lab Informat Sci & Technol, State Key Lab Intelligent Technol & Syst, Beijing 100084, Peoples R China.
C3 University of Technology Sydney; Tsinghua University
RP Feng, Y (corresponding author), Univ Technol, Fac Informat Technol, Ctr Quantum Computat & Intelligent Syst QCIS, City Campus,15 Broadway, Ultimo, NSW 2007, Australia.
EM yuan.feng@uts.edu.au
RI Ying, Mingsheng/A-8379-2008; Feng, Yuan/AGN-2907-2022
OI Ying, Mingsheng/0000-0003-4847-702X; Feng, Yuan/0000-0002-3097-3896
FU Australian ARC [DP110103473, DP130102764, FT100100218]; Overseas Team
   Program of the Academy of Mathematics and Systems Science, Chinese
   Academy of Sciences; Australian Research Council [FT100100218] Funding
   Source: Australian Research Council
FX This work was supported by Australian ARC grants DP110103473,
   DP130102764, and FT100100218. The authors are also partially supported
   by the Overseas Team Program of the Academy of Mathematics and Systems
   Science, Chinese Academy of Sciences.
CR Abadi M., 1997, P 4 ACM C COMP COMM, P36, DOI DOI 10.1145/266420.266432
   [Anonymous], 1983, STATES EFFECTS OPERA
   Baier C., 2000, Mathematical Structures in Computer Science, V10, P665, DOI 10.1017/S0960129599002984
   Baier C, 1997, LECT NOTES COMPUT SC, V1254, P119
   BENNETT CH, 1992, PHYS REV LETT, V69, P2881, DOI 10.1103/PhysRevLett.69.2881
   BENNETT CH, 1993, PHYS REV LETT, V70, P1895, DOI 10.1103/PhysRevLett.70.1895
   Chuang I., 2000, Quantum Information and Quantum Computation
   Deng Y., 2011, ARXIV11034577V1CSLO
   Deng YX, 2006, ELECTRON NOTES THEOR, V153, P79, DOI 10.1016/j.entcs.2005.10.033
   Deng YX, 2007, ELECTRON NOTES THEOR, V172, P359, DOI 10.1016/j.entcs.2007.02.013
   Deng YX, 2005, LECT NOTES COMPUT SC, V3838, P309
   Desharnais J, 2004, THEOR COMPUT SCI, V318, P323, DOI 10.1016/j.tcs.2003.09.013
   Desharnais J., 2002, CONCUR 2002 - Concurrency Theory. 13th International Conference Proceedings (Lecture Notes in Computer Science Vol.2421), P355
   Desharnais J, 2010, INFORM COMPUT, V208, P203, DOI 10.1016/j.ic.2009.11.002
   Feng Y, 2007, INFORM COMPUT, V205, P1608, DOI 10.1016/j.ic.2007.08.001
   Feng YA, 2011, ACM SIGPLAN NOTICES, V46, P523, DOI 10.1145/1925844.1926446
   Gay SJ, 2005, ACM SIGPLAN NOTICES, V40, P145, DOI 10.1145/1047659.1040318
   GIACALONE A, 1990, PROGRAMMING CONCEPTS AND METHODS, P443
   Grover LK, 1997, PHYS REV LETT, V79, P325, DOI 10.1103/PhysRevLett.79.325
   Hennessy M., 1991, Formal Aspects of Computing, V3, P346, DOI 10.1007/BF01642508
   HENNESSY M, 1993, INFORM COMPUT, V107, P202, DOI 10.1006/inco.1993.1067
   Jorrand P., 2004, P 1 C COMP FRONT CF, P111, DOI [10.1145/977091.977108, DOI 10.1145/977091.977108]
   Kitaev AY, 1997, RUSS MATH SURV+, V52, P1191, DOI 10.1070/RM1997v052n06ABEH002155
   Lalire M, 2006, MATH STRUCT COMP SCI, V16, P407, DOI 10.1017/S096012950600524X
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Shor P.W., 1994, FDN COMPUTER SCI, V35, P124
   Von Neumann J., 1955, Mathematical Foundations of Quantum Mechanics
   Ying M., 2001, Topology in Process Calculus: Approximate Correctness and Infinite Evolution of Concurrent Systems
   Ying MS, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1507244.1507249
   Ying MS, 2002, THEOR COMPUT SCI, V275, P1, DOI 10.1016/S0304-3975(01)00124-4
NR 31
TC 12
Z9 14
U1 0
U2 19
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2012
VL 34
IS 4
AR 17
DI 10.1145/2400676.2400680
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 072GT
UT WOS:000313658500003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Verdoolaege, S
   Janssens, G
   Bruynooghe, M
AF Verdoolaege, Sven
   Janssens, Gerda
   Bruynooghe, Maurice
TI Equivalence Checking of Static Affine Programs Using Widening to Handle
   Recurrences
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Verification; Commutativity; equivalence checking; polytope model;
   recurrences; widening
ID TRANSLATION; VALIDATION; SYSTEMS; ARRAY
AB Designers often apply manual or semi-automatic loop and data transformations on array- and loop-intensive programs to improve performance. It is crucial that such transformations preserve the functionality of the program. This article presents an automatic method for constructing equivalence proofs for the class of static affine programs. The equivalence checking is performed on a dependence graph abstraction and uses a new approach based on widening to find the proper induction hypotheses for reasoning about recurrences. Unlike transitive-closure-based approaches, this widening approach can also handle nonuniform recurrences. The implementation is publicly available and is the first of its kind to fully support commutative operations.
C1 [Verdoolaege, Sven; Janssens, Gerda; Bruynooghe, Maurice] Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
C3 KU Leuven
RP Verdoolaege, S (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Louvain, Belgium.
EM sven@cs.kuleuven.be
OI Verdoolaege, Sven/0000-0003-3179-2736
FU FWO-Vlaandren [G.0232.06N]
FX This research was supported by FWO-Vlaandren, project G.0232.06N.
CR Absar MJ, 2005, EMB SYST REAL TIME M, P75
   Alias C., 2003, ENTCS, V82, P395
   [Anonymous], ADV MEMORY OPTIMIZAT
   [Anonymous], 2000, Computer-Aided Reasoning: An Approach
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Barthou D, 1997, J PARALLEL DISTR COM, V40, P210, DOI 10.1006/jpdc.1996.1261
   Barthou D, 2002, LECT NOTES COMPUT SC, V2400, P309
   Bastoul C, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P7, DOI 10.1109/PACT.2004.1342537
   Catthoor F., 2002, DATA ACCESS STORAGE
   Chen C, 2009, OMEGA LIB
   COOK W., 1991, COWLED FDN DISCUSSIO
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   Feautrier P., 1996, Data Parallel Programming Model. Foundations, HPF Realization, and Scientific Applications, P79
   Feautrier P., 1988, Conference Proceedings. 1988 International Conference on Supercomputing, P429, DOI 10.1145/55364.55406
   Franke Bjorn, 2003, ACM Trans. Embedded Computing Systems, V2, P132
   FU Q., 2006, P 1 WORKSH CONSTR SO, P46
   Godlin B, 2008, ACTA INFORM, V45, P403, DOI 10.1007/s00236-008-0075-2
   Godlin B, 2009, DES AUT CON, P466
   IRIGOIN F., 1991, P ACM INT C SUP ICS
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Kelly W, 1996, INT J PARALLEL PROG, V24, P579
   Kundu S, 2009, ACM SIGPLAN NOTICES, V44, P327, DOI 10.1145/1543135.1542513
   Lombardy S, 2004, THEOR COMPUT SCI, V328, P77, DOI 10.1016/j.tcs.2004.07.007
   Manjunathaiah M, 2001, PROC INT CONF PARAL, P205
   Mateev N., 2001, P 15 INT C SUP, P38, DOI [10.1145/377792.377804, DOI 10.1145/377792.377804]
   MATSUMOTO T., 2007, ACST, P43
   Müller-Olm M, 2004, ACM SIGPLAN NOTICES, V39, P330, DOI 10.1145/982962.964029
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   Shashidhar K.C., 2008, THESIS
   Shashidhar KC, 2005, LECT NOTES COMPUT SC, V3443, P221, DOI 10.1007/978-3-540-31985-6_15
   van Engelen R. A., 2001, Innovative Architecture for Future Generation High-Performance Processors and Systems, P80, DOI 10.1109/IWIA.2001.955200
   VERDOOLAEGE S., 2008, P INT C INF THEOR ST
   Verdoolaege S, 2011, LECT NOTES COMPUT SC, V6887, P216, DOI 10.1007/978-3-642-23702-7_18
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   Verdoolaege S, 2010, J ELECTRON TEST, V26, P279, DOI 10.1007/s10836-009-5140-4
   Verdoolaege S, 2009, LECT NOTES COMPUT SC, V5643, P599, DOI 10.1007/978-3-642-02658-4_44
   Verdoolaege Sven, 2012, P 2 INT WORKSH POL C
   Zuck L, 2005, FORM METHOD SYST DES, V27, P335, DOI 10.1007/s10703-005-3402-z
NR 39
TC 29
Z9 31
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2012
VL 34
IS 3
AR 11
DI 10.1145/2362389.2362390
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 033FV
UT WOS:000310780500001
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Ying, MS
AF Ying, Mingsheng
TI Floyd-Hoare Logic for Quantum Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Languages; Quantum computation; programming language; axiomatic
   semantics; Floyd-Hoare logic; completeness
AB Floyd-Hoare logic is a foundation of axiomatic semantics of classical programs, and it provides effective proof techniques for reasoning about correctness of classical programs. To offer similar techniques for quantum program verification and to build a logical foundation of programming methodology for quantum computers, we develop a full-fledged Floyd-Hoare logic for both partial and total correctness of quantum programs. It is proved that this logic is (relatively) complete by exploiting the power of weakest preconditions and weakest liberal preconditions for quantum programs.
C1 [Ying, Mingsheng] Univ Technol Sydney, Ctr Quantum Computat & Intelligent Syst, Fac Engn & Informat Technol, City Campus,15 Broadway, Ultimo, NSW 2007, Australia.
   [Ying, Mingsheng] Tsinghua Univ, State Key Lab Intelligent Technol & Syst, Tsinghua Natl Lab Informat Sci & Technol, Dept Comp Sci & Technol, Beijing 100084, Peoples R China.
C3 University of Technology Sydney; Tsinghua University
RP Ying, MS (corresponding author), Univ Technol Sydney, Ctr Quantum Computat & Intelligent Syst, Fac Engn & Informat Technol, City Campus,15 Broadway, Ultimo, NSW 2007, Australia.
EM mying@it.uts.edu.au
RI Ying, Mingsheng/A-8379-2008
OI Ying, Mingsheng/0000-0003-4847-702X
FU National Natural Science Foundation of China [60736011]; Australian
   Research Council [DP110103473]
FX This work was partly supported by the National Natural Science
   Foundation of China, Grant 60736011 and the Australian Research Council,
   Grant DP110103473.
CR AKATOV D, 2005, THESIS OXFORD U COMP
   Altenkirch T, 2005, IEEE S LOG, P249
   [Anonymous], 1996, LAUR962724
   [Anonymous], VERIFICATION SEQUENT
   BALTAG A, 2004, P 2 INT WORKSH QUANT
   Baltag A, 2006, MATH STRUCT COMP SCI, V16, P491, DOI 10.1017/S0960129506005299
   Bettelli S, 2003, EUR PHYS J D, V25, P181, DOI 10.1140/epjd/e2003-00242-2
   Birkhoff G, 1936, ANN MATH, V37, P823, DOI 10.2307/1968621
   Brunet O, 2004, INT J QUANTUM INF, V2, P45, DOI 10.1142/S0219749904000067
   Chadha R, 2006, ELECTRON NOTES THEOR, V158, P19, DOI 10.1016/j.entcs.2006.04.003
   D'Hondt E, 2006, MATH STRUCT COMP SCI, V16, P429, DOI 10.1017/S0960129506005251
   FENG Y, 2010, PREDICATE TRANSFORME, P311
   Feng Y, 2007, THEOR COMPUT SCI, V386, P151, DOI 10.1016/j.tcs.2007.06.011
   Feng YA, 2011, ACM SIGPLAN NOTICES, V46, P523, DOI 10.1145/1925844.1926446
   Gay SJ, 2006, MATH STRUCT COMP SCI, V16, P581, DOI 10.1017/S0960129506005378
   Gay SJ, 2005, ACM SIGPLAN NOTICES, V40, P145, DOI 10.1145/1047659.1040318
   Grover L. K., 1996, P 28 ANN ACM S THEOR, P212, DOI [DOI 10.1145/237814.237866, 10.1145/237814.237866]
   JORRAND P, 2005, P 1 ACM C COMP FRONT, P111
   MORGAN C, 1995, PRGT2595 OXF U
   Nielsen I. L., 2000, QUANTUM COMPUTATION
   OMER B, 2003, THESIS TU VIENNA
   Sanders JW, 2000, LECT NOTES COMPUT SC, V1837, P80
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   SELINGER P, 2004, LECT NOTES COMPUTER
   von Neumann John., 1938, COMPOS MATH, V6, P1
   Ying MS, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1507244.1507249
   ZULIANI P, 2004, P 2 INT WORKSH QUANT
NR 27
TC 67
Z9 76
U1 0
U2 15
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2011
VL 33
IS 6
AR 19
DI 10.1145/2049706.2049708
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 871PU
UT WOS:000298751000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhong, YT
   Shen, XP
   Ding, C
AF Zhong, Yutao
   Shen, Xipeng
   Ding, Chen
TI Program Locality Analysis Using Reuse Distance
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Review
DE Measurement; Languages; Algorithms; Program locality; reuse distance;
   stack distance; training-based analysis
AB On modern computer systems, the memory performance of an application depends on its locality. For a single execution, locality-correlated measures like average miss rate or working-set size have long been analyzed using reuse distance-the number of distinct locations accessed between consecutive accesses to a given location. This article addresses the analysis problem at the program level, where the size of data and the locality of execution may change significantly depending on the input.
   The article presents two techniques that predict how the locality of a program changes with its input. The first is approximate reuse-distance measurement, which is asymptotically faster than exact methods while providing a guaranteed precision. The second is statistical prediction of locality in all executions of a program based on the analysis of a few executions. The prediction process has three steps: dividing data accesses into groups, finding the access patterns in each group, and building parameterized models. The resulting prediction may be used on-line with the help of distance-based sampling. When evaluated on fifteen benchmark applications, the new techniques predicted program locality with good accuracy, even for test executions that are orders of magnitude larger than the training executions.
   The two techniques are among the first to enable quantitative analysis of whole-program locality in general sequential code. These findings form the basis for a unified understanding of program locality and its many facets. Concluding sections of the article present a taxonomy of related literature along five dimensions of locality and discuss the role of reuse distance in performance modeling, program optimization, cache and virtual memory management, and network traffic analysis.
C1 [Zhong, Yutao] George Mason Univ, Fairfax, VA 22030 USA.
   [Shen, Xipeng] Coll William & Mary, Williamsburg, VA USA.
   [Ding, Chen] Univ Rochester, Rochester, NY USA.
C3 George Mason University; William & Mary; University of Rochester
RP Zhong, YT (corresponding author), George Mason Univ, Fairfax, VA 22030 USA.
EM yzhong@cs.gmu.edu; xshen@cs.wm.edu; cding@cs.rochester.edu
RI ding, chen/KDN-1285-2024
OI Shen, Xipeng/0000-0003-3599-8010
FU National Science Foundation [CCR-0238176, CNS-0720796, CNS-0509270];
   Department of Energy [DE-FG02-02ER25525]; IBM CAS Faculty; Microsoft
   Research
FX The authors were supported by the National Science Foundation ( CAREER
   Award CCR-0238176 and two grants CNS-0720796 and CNS-0509270), the
   Department of Energy ( Young Investigator Award DE-FG02-02ER25525), IBM
   CAS Faculty Fellowship, and a gift from Microsoft Research. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the funding organizations.
CR ADVE V, 1998, P ACM SIGPLAN C PROG
   Allen Randy, 2001, Optimizing compilers for modern architectures: a dependencebased approach
   ALMASI G, 2002, P ACM SIGPLAN WORKSH
   Almeida V, 1996, PROCEEDINGS OF THE FOURTH INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED INFORMATION SYSTEMS, P92, DOI 10.1109/PDIS.1996.568672
   ALON N, 1996, P ACM S THEOR COMP
   Arnold M, 2001, ACM SIGPLAN NOTICES, V36, P168, DOI 10.1145/381694.378832
   Banerjee U.K., 1988, Dependence Analysis for Supercomputing
   BATSON AP, 1976, P INT C MEAS MOD COM
   BENNETT BT, 1975, IBM J RES DEV, V19, P353, DOI 10.1147/rd.194.0353
   Berg E, 2004, INT SYM PERFORM ANAL, P20, DOI 10.1109/ISPASS.2004.1291352
   Berg Erik., 2005, Proceedings of the International Conference on Measurement and Modeling of Computer Systems, P169
   Beyls K, 2005, J SYST ARCHITECT, V51, P223, DOI 10.1016/j.sysarc.2004.09.004
   Beyls K, 2002, LECT NOTES COMPUT SC, V2400, P265
   BEYLS K, 2006, P ACM C COMP FRONT
   Beyls K, 2006, LECT NOTES COMPUT SC, V4208, P220
   BUNT RB, 1984, COMPUT J, V27, P238, DOI 10.1093/comjnl/27.3.238
   BURKE M, 1986, P SIGPLAN S COMP CON
   Calder B., 1998, P 8 INT C ARCH SUPP
   CALLAHAN D, 1988, J PARALLEL DISTR COM, V5, P517, DOI 10.1016/0743-7315(88)90011-1
   CALLAHAN D, 1988, J PARALLEL DISTR COM, V5, P334, DOI 10.1016/0743-7315(88)90002-0
   CARR S, 1994, ACM T PROGR LANG SYS, V16, P1768, DOI 10.1145/197320.197366
   CASCAVAL C, 2003, P INT C SUP SAN FRAN
   Chandra D, 2005, INT S HIGH PERF COMP, P340, DOI 10.1109/HPCA.2005.27
   CHATTERJEE S, 2001, P ACM SIGPLAN C PROG
   CHEN F, 2005, P USENIX ANN TECHN C
   CHENG R, 2005, 875 TR U ROCH DEP CO
   Chilimbi T. M., 2002, P ACM SIGPLAN C PROG
   CHILIMBI TM, 2001, P INT C PAR ARCH COM
   CHILIMBI TM, 2001, P ACM SIGPLAN C PROG
   Chilimbi Trishul M, 1999, P ACM SIGPLAN C PROG
   CIERNIAK M, 1995, P SIGPLAN C PROGR LA
   COCKE J, 1974, 5123 RC IBM
   DAS R, 1994, J PARALLEL DISTR COM, V22, P462, DOI 10.1006/jpdc.1994.1104
   Datar M, 2002, SIAM J COMPUT, V31, P1794, DOI 10.1137/S0097539701398363
   DENNING P, 1980, IEEE T SOFTW ENG, V6
   Ding C, 2004, J PARALLEL DISTR COM, V64, P108, DOI 10.1016/j.jpdc.2003.09.005
   DING C, 1999, P SIGPLAN C PROGR LA
   DING C, 2002, P ACM SIGPLAN WORKSH
   EECKHOUT L, 2002, P INT C PAR ARCH COM
   FANG C, 2005, P INT C PAR ARCH COM
   FERRANTE J, 1991, P 4 INT WORKSH LANG
   FLAJOLET P, 1983, P S FDN COMP SCI
   GHOSH S, 1999, ACM T PROGRAM LANG S, V21
   GU X, 2009, P INT S MEM MAN
   Han H, 2006, IEEE T PARALL DISTR, V17, P606, DOI 10.1109/TPDS.2006.88
   HAVLAK P, 1991, IEEE T PARALL DISTR, V2, P350, DOI 10.1109/71.86110
   HILL MD, 1989, IEEE T COMPUT, V38, P1612, DOI 10.1109/12.40842
   HSU W, 2002, P 6 WORKSH INT COMP
   Jiang Song., 2002, Proceedings of the International Conference on Measurement and Modeling of Computer Systems, P31
   Jiang YL, 2008, PACT'08: PROCEEDINGS OF THE SEVENTEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P220, DOI 10.1145/1454115.1454146
   Kandemir MT, 2005, J PARALLEL DISTR COM, V65, P564, DOI 10.1016/j.jpdc.2004.12.004
   Kelly Terence., 2004, Inducing models of black-box storage arrays
   KELLY W, 1996, OMEGA LIB INTERFACE
   KELSEY K, 2009, P INT S COD GEN OPT
   KIM YH, 1991, P ACM SIGMETRICS C M, P212
   KLEINOSOWSKI A, 2002, COMPUT ARCHIT LETT, V1
   KNOBE K, 1998, P ACM SIGPLAN SIGACT
   Knuth D. E., 1971, Software - Practice and Experience, V1, P105, DOI 10.1002/spe.4380010203
   KODUKULA I, 1997, P SIGPLAN C PROGR LA
   Li Z., 1990, IEEE Transactions on Parallel and Distributed Systems, V1, P26, DOI 10.1109/71.80122
   LIU J, 2004, J INSTRUCT LEVEL PAR, V6
   MARIN G, 2004, P INT C MEAS MOD COM
   Marin G., 2005, P S LAS AL COMP SCI
   MATTSON RL, 1970, IBM SYST J, V9, P78, DOI 10.1147/sj.92.0078
   McKinley KS, 1996, ACM T PROGR LANG SYS, V18, P424, DOI 10.1145/233561.233564
   MELLORCRUMMEY J, 2001, INT J PARAL PROGRAM, V29
   Olken F, 1981, Technical Report LBL- 12370
   Petrank E, 2002, ACM SIGPLAN NOTICES, V37, P101, DOI 10.1145/565816.503283
   PORTERFIELD A, 1989, THESIS RICE U
   Rawlings J.O., 1988, APPL REGRESSION ANAL
   ROTHBERG E, 1993, P 20 ANN INT S COMP, P14, DOI DOI 10.1109/ISCA.1993.698542
   SEIDL ML, 1998, P 8 INT C ARCH SUPP
   Shen JC, 2005, APPL ORGANOMET CHEM, V19, P140, DOI 10.1002/aoc.805
   SHEN X, 2004, P INT WORKSH LANG CO
   SHEN X, 2007, P 1 WORKSH EXP COMP
   SHEN X, 2004, P 11 INT C ARCH SUPP, P165, DOI DOI 10.1145/1037187.1024414
   SHEN X, 2007, P ACM SIGPLAN SIGACT, P55
   Shen XP, 2007, J PARALLEL DISTR COM, V67, P783, DOI 10.1016/j.jpdc.2007.01.010
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   Smaragdakis Y, 2003, PERFORM EVALUATION, V53, P93, DOI 10.1016/S0166-5316(02)00226-2
   SMITH AJ, 1976, P 2 INT C SOFTW ENG
   SO B, 2002, P ACM SIGPLAN C PROG
   SONG Y, 1999, P ACM SIGPLAN C PROG
   Srivastava A., 1994, P ACM SIGPLAN C PROG
   Strout M. M., 2003, P ACM SIGPLAN C PROG, P245
   Sugumar R.A., 1993, MULTICONFIGURATION S
   Suh G.Edward., 2001, ICS, P1
   THABIT KO, 1981, THESIS RICE U
   THOMPSON JG, 1989, ACM T COMPUT SYST, V7, P78, DOI 10.1145/58564.59296
   TRIOLET R, 1986, P SIGPLAN S COMP CON
   WALL DW, 1991, P ACM SIGPLAN C PROG
   WANG W, 1991, ACM T COMPUT SYST, V9
   Wolf M. E., 1991, P SIGPLAN C PROGR LA
   Wolfe M.J., 1996, High Performance Compilers For Parallel Computing
   WONNACOTT D, 2002, INT J PARAL PROGRAM, V30
   XUE J, 2004, IEEE T COMPUT, V53
   Yang T, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P103
   YI Q, 2000, P ACMSIGPLAN C PROGR
   ZHANG C, 2006, P ACM SIGPLAN SIGACT
   Zhao P, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290522
   ZHONG Y, 2002, P WORKSH LANG COMP R
   ZHONG Y, 2004, P ACM SIGPLAN C PROG
   Zhong YT, 2007, IEEE T COMPUT, V56, P328, DOI 10.1109/TC.2007.50
   Zhong YT, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P91
   Zhou P., 2004, P INT C ARCH SUPP PR
   ZHOU Y, 2001, P USENIX TECHN C
NR 106
TC 88
Z9 115
U1 0
U2 23
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2009
VL 31
IS 6
AR 20
DI 10.1145/1552309.1552310
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 512AM
UT WOS:000271214200001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Yardimci, E
   Franz, M
AF Yardimci, Efe
   Franz, Michael
TI Mostly Static Program Partitioning of Binary Executables
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Experimentation; Performance; Continuous compilation and
   optimization; dynamic parallelization; binary translation
ID OPTIMIZATION; ARCHITECTURE
AB We have built a runtime compilation system that takes unmodified sequential binaries and improves their performance on off-the-shelf multiprocessors using dynamic vectorization and loop-level parallelization techniques. Our system, Azure, is purely software based and requires no specific hardware support for speculative thread execution, yet it is able to break even in most cases; that is, the achieved speedup exceeds the cost of runtime monitoring and compilation, often by significant amounts.
   Key to this remarkable performance is an offline preprocessing step that extracts a mostly correct control flow graph (CFG) from the binary program ahead of time. This statically obtained CFG is incomplete in that it may be missing some edges corresponding to computed branches. We describe how such additional control flow edges are discovered and handled at runtime, so that an incomplete static analysis never leads to an incorrect optimization result.
   The availability of a mostly correct CFG enables us to statically partition a binary executable into single-entry multiple-exit regions and to identify potential parallelization candidates ahead of execution. Program regions that are not candidates for parallelization can thereby be excluded completely from runtime monitoring and dynamic recompilation. Azure's extremely low overhead is a direct consequence of this design.
C1 [Yardimci, Efe; Franz, Michael] Univ Calif Irvine, Irvine, CA 92717 USA.
C3 University of California System; University of California Irvine
RP Yardimci, E (corresponding author), Univ Calif Irvine, Irvine, CA 92717 USA.
EM franz@uci.edu
CR Akkary H, 1998, 31ST ANNUAL ACM/IEEE INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P226, DOI 10.1109/MICRO.1998.742784
   [Anonymous], P SSBA S IM AN
   [Anonymous], 2000, PLDI '00
   Balakrishnan G, 2004, LECT NOTES COMPUT SC, V2985, P5
   Baraz L, 2003, 36TH INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P191
   Buck B, 2000, INT J HIGH PERFORM C, V14, P317, DOI 10.1177/109434200001400404
   BYRD CT, 1995, IEEE SPECTRUM, V32, P38, DOI 10.1109/6.402166
   CARLISLE MC, 1994, P 6 LANG COMP PAR CO, P1
   CHAMBERS C, 2002, P 2002 ACM SIGPLAN S, P1
   Chernoff A, 1998, IEEE MICRO, V18, P56, DOI 10.1109/40.671403
   CIFUENTES C, 1995, SOFTWARE PRACT EXPER, V25, P811, DOI 10.1002/spe.4380250706
   CINTRA M, 2003, P 9 ACM SIGPLAN S PR, P13
   DEALBA M, 2001, P 4 ANN IEEE INT WOR
   Ebcioglu K, 1997, ACM COMP AR, P26, DOI 10.1145/384286.264126
   EBCIOGLU K, 1998, P INT C COMP DES
   FISHER JA, 1981, IEEE T COMPUT, V30, P478, DOI 10.1109/TC.1981.1675827
   GRANT B, 1999, P ACM SIGPLAN 99 C P, P293
   Hammond L, 2000, IEEE MICRO, V20, P71, DOI 10.1109/40.848474
   HWU WMW, 1993, J SUPERCOMPUT, V7, P229, DOI 10.1007/BF01205185
   KAGAN M, 1997, INTEL TECHN J, P8
   Kistler T, 2003, ACM T PROGR LANG SYS, V25, P500, DOI 10.1145/778559.778562
   Kistler T, 2001, IEEE T COMPUT, V50, P549, DOI 10.1109/12.931893
   Klaiber A., 2000, The technology behind the crusoe processor whitepaper
   Krishnan V, 1999, IEEE T COMPUT, V48, P866, DOI 10.1109/12.795218
   KRISHNAN V, 1998, P ACM INT C SUP, P85
   KRISHNAN VS, 1998, UIUCDCSR982048
   LARUS JR, 1994, SOFTWARE PRACT EXPER, V24, P197, DOI 10.1002/spe.4380240204
   LEUNG A, 1999, P ACM SIGPLAN C PROG, P204
   Lo J. Lee-jay, 1998, THESIS U WASHINGTON
   Nguyen H., 1999, ICS 99, P11
   Oberman S, 1999, IEEE MICRO, V19, P37, DOI 10.1109/40.755466
   Olukotun Kunle., 1996, Proceedings of the seventh international conference on Architectural support for programming languages and operating systems. ASPLOS VII, P2
   Quinones C.G., 2005, PLDI 05, P269
   Rauchwerger L, 1999, IEEE T PARALL DISTR, V10, P160, DOI 10.1109/71.752782
   Rotenberg E, 1997, INT SYMP MICROARCH, P138, DOI 10.1109/MICRO.1997.645805
   Sohi GurindarS., 1998, ISCA '98, P521
   Srivastava A, 2004, ACM SIGPLAN NOTICES, V39, P528, DOI 10.1145/989393.989446
   THAKKAR ST, 1999, INTEL TECHNOLOGY J, P8
   Tsai JY, 1999, IEEE T COMPUT, V48, P881, DOI 10.1109/12.795219
   Tsai JY, 1996, PROCEEDINGS OF THE 1996 CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES (PACT '96), P35, DOI 10.1109/PACT.1996.552553
   TULLSEN DM, 1995, ACM COMP AR, P392, DOI 10.1109/ISCA.1995.524578
   Voss MJ, 2001, ACM SIGPLAN NOTICES, V36, P93, DOI 10.1145/568014.379583
   Voss MJ, 2000, PROC INT CONF PARAL, P163, DOI 10.1109/ICPP.2000.876107
   YARDIMCI E, 2006, THESIS U CALIFORNIA
   Yardimci Efe., 2006, CF 06 P 3 C COMPUTIN, P127, DOI DOI 10.1145/1128022.1128040
   ZILLES CB, 2001, P 7 INT S HIGH PERF
NR 46
TC 2
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2009
VL 31
IS 5
AR 17
DI 10.1145/1538917.1538918
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 476VT
UT WOS:000268475100001
OA Bronze
DA 2024-07-18
ER

PT J
AU MacDonald, S
   Tan, K
   Schaeffer, J
   Szafron, D
AF MacDonald, Steve
   Tan, Kai
   Schaeffer, Jonathan
   Szafron, Duane
TI Deferring Design Pattern Decisions and Automating Structural Pattern
   Changes Using a Design-Pattern-Based Programming System
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Human Factors; Languages; Design patterns; object-oriented frameworks;
   design decisions; software maintenance; parallel programming
ID CODE; FRAMEWORKS
AB In the design phase of software development, the designer must make many fundamental design decisions concerning the architecture of the system. Incorrect decisions are relatively easy and inexpensive to fix if caught during the design process, but the difficulty and cost rise significantly if problems are not found until after coding begins. Unfortunately, it is not always possible to find incorrect design decisions during the design phase. To reduce the cost of expensive corrections, it would be useful to have the ability to defer some design decisions as long as possible, even into the coding stage. Failing that, tool support for automating design changes would give more freedom to revisit and change these decisions when needed. This article shows how a design-pattern-based programming system based on generative design patterns can support the deferral of design decisions where possible, and automate changes where necessary. A generative design pattern is a parameterized pattern form that is capable of generating code for different versions of the underlying design pattern. We demonstrate these ideas in the context of a parallel application written with the CO2P3S pattern-based parallel programming system. We show that CO2P3S can defer the choice of execution architecture (shared-memory or distributed-memory), and can automate several changes to the application structure that would normally be daunting to tackle late in the development cycle. Although we have done this work with a pattern-based parallel programming system, it can be generalized to other domains.
C1 [MacDonald, Steve] Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 301, Canada.
   [Tan, Kai; Schaeffer, Jonathan; Szafron, Duane] Univ Alberta, Dept Comp Sci, Edmonton, AB T6G 2E8, Canada.
C3 University of Waterloo; University of Alberta
RP MacDonald, S (corresponding author), Univ Waterloo, David R Cheriton Sch Comp Sci, 200 Univ Ave W, Waterloo, ON N2L 301, Canada.
EM smacdonald1024@gmail.com; cavalier@cs.ualberta.ca;
   jonathan@cs.ualberta.ca; duane@cs.ualberta.ca
FU Alberta Research Council; Natural Science and Engineering Research
   Council of Canada; Alberta's Informatics Circle of Research Excellence;
   MACI (Multimedia Advanced Computational Infrastructure).
FX This work was supported by the Alberta Research Council, the Natural
   Science and Engineering Research Council of Canada, Alberta's
   Informatics Circle of Research Excellence, and MACI (Multimedia Advanced
   Computational Infrastructure).
CR Alur D., 2003, Core J2EE patterns, best practices and design strategies, V2nd
   Amza C, 1996, COMPUTER, V29, P18, DOI 10.1109/2.485843
   [Anonymous], P OBJ OR PROGR SYST
   [Anonymous], P 3 INT C ASP OR SOF
   ANVIK J, 2002, THESIS U ALBERTA
   ANVIK J, 2002, P 7 INT WORKSH HIGH
   Baniassad ELA, 2003, PROC INT CONF SOFTW, P352, DOI 10.1109/ICSE.2003.1201214
   Bosch J, 1998, J OBJECT-ORIENT PROG, V11, P18
   Bromling S, 2002, PROC INT CONF PARAL, P257, DOI 10.1109/ICPP.2002.1040881
   BROMLING S, 2001, THESIS U ALBERTA
   BRYANT A., 2002, P 1 INT C ASP OR SOF, P10
   Budinsky FJ, 1996, IBM SYST J, V35, P151, DOI 10.1147/sj.352.0151
   Chalabine M, 2005, LECT NOTES COMPUT SC, V3756, P131
   CHALABINE M, 2006, P 39 ANN HAW INT C S
   Chalabine M, 2007, PROC INT CONF SOFTW, P137
   CHEN J, 2006, P 2006 INT C PAR DIS, P17
   CHEN J, 2005, P IBM CTR ADV STUD C, P113
   CHEN JX, 2004, THESIS U WATERLOO
   DIETZ S, 2004, P 9 INT WORKSH HIGH, P42
   EARL P, 2004, THESIS U ALBERTA
   Florijn G, 1997, LECT NOTES COMPUT SC, V1241, P472, DOI 10.1007/BFb0053391
   Gamma Erich., 1994, DESIGN PATTERNS
   Geist A., 1994, PVM: Parallel Virtual Machine
   Goswami D, 2002, ADVANCES IN SOFTWARE ENGINEERING, P243
   Goswami D, 2002, J PARALLEL DISTR COM, V62, P669, DOI 10.1006/jpdc.2001.1809
   GUO Z, 2003, THESIS U ALBERTA
   Hammouda I, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P78, DOI 10.1109/ASE.2004.1342726
   HAMMOUDA I, 2004, P 8 EUR C SOFTW MAIN, P37
   HAMMOUDA I, 2002, J NORDIC COMPUT, V9, P248
   Jansen A, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P375, DOI 10.1109/ASE.2004.1342768
   Jansen A, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P109
   JOHNSON RE, 1988, J OBJECT-ORIENT PROG, V1, P22
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Klusener AS, 2005, SCI COMPUT PROGRAM, V54, P143, DOI 10.1016/j.scico.2004.03.012
   Lu P, 2000, IEEE CONCURR, V8, P63, DOI 10.1109/4434.865895
   MacDonald S, 1999, PROCEEDINGS OF THE FIFTH USENIX CONFERENCE ON OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS '99), P29
   MacDonald S, 2002, PARALLEL COMPUT, V28, P1663, DOI 10.1016/S0167-8191(02)00190-4
   MacDonald S, 2000, LECT NOTES COMPUT SC, V1900, P95
   MacDonald S, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P23, DOI 10.1109/ASE.2002.1114991
   MACDONALD S, 2002, THESIS U ALBERTA
   MATTSON T. G., 2004, Patterns for parallel programming
   McNaughton M., 2003, P 16 CANADIAN C ARTI, P35
   Mehta P, 2006, PARALLEL COMPUT, V32, P616, DOI 10.1016/j.parco.2006.06.008
   Murphy GC, 2001, PROC INT CONF SOFTW, P275, DOI 10.1109/ICSE.2001.919101
   *OBJ TECHN INT INC, 2006, ECL PLATF TECHN OV
   Pollack M., 2000, CODE GENERATION USIN
   Schach S.R., 2007, Object-Oriented Classical Software Engineering, V7th
   Schaeffer J., 1993, IEEE Parallel & Distributed Technology: Systems & Applications, V1, P85, DOI 10.1109/88.242459
   Schmidt D., 2000, Pattern-Oriented Software Architecture, Patterns for Concurrent and Networked Objects, V2
   SIIKARLA M, 2006, P INT WORKSH GRAPH T, P57
   Singh A, 1998, CONCURRENCY-PRACT EX, V10, P91, DOI 10.1002/(SICI)1096-9128(199802)10:2<91::AID-CPE290>3.0.CO;2-G
   Singh A., 1996, Int. Conf. Parallel Distrib. Process. Tech. Appl, P230
   Snir Marc., 1996, MPI: The Complete Reference
   *SUN MICR INC, 2001, JIN ARCH OV
   TAN K, 2003, THESIS U ALBERTA
   Tan S, 2003, REAL-TIME IMAGING, V9, P215, DOI 10.1016/S1077-2014(03)00040-8
   van Gurp J, 2002, J SYST SOFTWARE, V61, P105, DOI 10.1016/S0164-1212(01)00152-2
   VANWINSEN P, 1996, THESIS UTRECHT U
   VILJAMAA A, 2002, P NORD WORKSH SOFTW
   Vlissides J., 1998, Pattern Hatching: Design Patterns Applied
   von Dincklage D, 2003, LECT NOTES COMPUT SC, V2830, P287
   WITKIN A, 1991, COMP GRAPH, V25, P299, DOI 10.1145/127719.122750
NR 63
TC 5
Z9 8
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2009
VL 31
IS 3
AR 9
DI 10.1145/1498926.1498927
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 453SY
UT WOS:000266633700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Matthews, J
   Findler, RB
AF Matthews, Jacob
   Findler, Robert Bruce
TI Operational Semantics for Multi-Language Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Operational semantics; interoperability
ID SEQUENTIAL CONTROL
AB Interoperability is big business, a fact to which. NET, the JVM, and COM can attest. Language designers are well aware of this, and they are designing programming languages that reflect it-for instance, SML.NET, F#, Mondrian, and Scala all treat interoperability as a central design feature. Still, current multi-language research tends not to focus on the semantics of these features, but only on how to implement them efficiently. In this article, we attempt to rectify that by giving a technique for specifying the operational semantics of a multi-language system as a composition of the models of its constituent languages. Our technique abstracts away the low-level details of interoperability like garbage collection and representation coherence, and lets us focus on semantic properties like type-safety, equivalence, and termination behavior. In doing so it allows us to adapt standard theoretical techniques such as subject-reduction, logical relations, and operational equivalence for use on multi-language systems. Generally speaking, our proofs of properties in a multi-language context are mutually referential versions of their single language counterparts.
   We demonstrate our technique with a series of strategies for embedding a Scheme-like language into an ML-like language. We start by connecting very simple languages with a very simple strategy, and work our way up to languages that interact in sophisticated ways and have sophisticated features such as polymorphism and effects. Along the way, we prove relevant results such as type-soundness and termination for each system we present using adaptations of standard techniques.
   Beyond giving simple expressive models, our studies have uncovered several interesting facts about interoperability. For example, higher-order function contracts naturally emerge as the glue to ensure that interoperating languages respect each other's type systems. Our models also predict that the embedding strategy where foreign values are opaque is as expressive as the embedding strategy where foreign values are translated to corresponding values in the other language, and we were able to experimentally verify this behavior using PLT Scheme's foreign function interface.
C1 [Matthews, Jacob; Findler, Robert Bruce] Univ Chicago, Chicago, IL 60637 USA.
C3 University of Chicago
RP Matthews, J (corresponding author), Univ Chicago, Chicago, IL 60637 USA.
EM jcobm@cs.chicago.edu
FU National Science Foundation.
FX This work was funded in part by the National Science Foundation.
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   [Anonymous], P ICFP ICFP 99
   [Anonymous], J FUNCTIONAL PROGRAM
   [Anonymous], 1989, Cambridge Tracts in Theoretical Computer Science
   BARZILAY E, 2004, P WORKSH SCHEM FUNCT
   BARZILAY E, 2005, WORKSH FUNCT DECL PR
   Beazley DM, 1996, PROCEEDINGS OF THE FOURTH ANNUAL TCL/TK WORKSHOP, P129
   BEAZLEY DM, 1997, SWIG 1 1 USERS MANUA
   Benton N, 2005, J FUNCT PROGRAM, V15, P503, DOI 10.1017/S0956796804005398
   Benton N., 1999, ACM SIGPLAN INT C FU, P126
   Benton Nick., 2004, P 6 ACM SIGPLAN INT, P215
   BLUME M, 2001, P WORKSH MULT INFR I
   Cardelli Luca., 1986, COMBINATORS FUNCTION, V242
   Chakravarty ManuelM. T., 2002, HASKELL 98 FOREIGN F
   CHAMBERS C, 2004, CECIL LANGUAGE SPECI
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FINDLER RB, 2002, P ACM SIGPLAN INT C
   FINDLER RB, 2006, P INT S FUNCT LOG PR
   FISHER K, 2001, P WORKSH MULT INFR I
   FLANAGAN C, 2006, P ACM SIGPLAN SIGACT
   FURR M, 2008, ACM T PROGRAM LANG S, V30
   FURR M, 2005, PLDI 05, P62
   GORDON A, 2001, PRINCIPLES PROGRAMMI, P248
   GRAY KE, 2005, P C OBJ OR PROGR SYS
   Grossman D, 2000, ACM T PROGR LANG SYS, V22, P1037, DOI 10.1145/371880.371887
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   HENGLEIN F, 1995, P C FUNCT PROGR LANG
   IBRAHIM R, 1997, FITTR9706 QUEENSL U
   Kennedy A, 2006, THEOR COMPUT SCI, V364, P311, DOI 10.1016/j.tcs.2006.08.014
   KORNSTAEDT L, 2001, P WORKSH MULT INFR I
   MATTHEWS J, 2008, P EUR S PROGR ESOP
   MATTHEWS J, 2008, TR200806 U CHIC
   MATTHEWS J, 2007, P ACM SIGPLAN SIGACT
   MATTHEWS J, 2004, P INT C REWR TECHN A
   MEIJER E, 2001, P EUR C OBJ OR PROGR, P150
   Meunier Philippe., 2003, P 4 WORKSHOP SCHEME, P24
   Odersky Martin., 2005, INTRO SCALA
   Ohori Atsushi., 1993, ACM SIGPLAN SIGACT S, P99
   Pierce Benjamin, 2000, RELATING CRYPT UNPUB
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PINTO P, 2003, P WORKSH SCHEM FUNCT
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   PUCELLA R, 2002, P C OBJ OR PROGR SYS
   Ramsey Norman., 2003, IVME 03, P6, DOI [10.1145/858570.858571, DOI 10.1145/858570.858571]
   REYNOLDS JC, 1983, P 9 IFIP WORLD COMP, P513
   SABRY A, 1993, LISP SYMBOLIC COMPUT
   Steckler Paul., 1999, TECHNOLOGY OBJECT OR, P364
   Sumii E., 2003, Journal of Computer Security, V11, P521
   SUMII E, 2004, P ACM SIGPLAN SIGACT
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Trifonov V, 1999, LECT NOTES COMPUT SC, V1576, P128
   WRIGHT A, 1994, INFORM COMPUTATION, P38
   ZDANCEWIC S, 1999, P ACM SIGPLAN INT C
NR 55
TC 38
Z9 39
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2009
VL 31
IS 3
AR 12
DI 10.1145/1498926.1498930
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 453SY
UT WOS:000266633700004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Bhatia, S
   Consel, C
   Pu, C
AF Bhatia, Sapan
   Consel, Charles
   Pu, Calton
TI Remote specialization for efficient embedded operating systems
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE performance; design; experimentation; remote specialization;
   specialization server; compilers; performance analysis
ID TOOLS
AB Prior to their deployment on an embedded system, operating systems are commonly tailored to reduce code size and improve runtime performance. Program specialization is a promising match for this process: it is predictable and modules, and it allows the reuse of previously implemented specializations. A specialization engine for embedded systems must overcome three main obstacles: (i) Reusing existing compilers for embedded systems, (ii) supporting specialization on a resource-limited system and (iii) coping with dynamic applications by supporting specialization on demand.
   In this article, we describe a runtime specialization infrastructure that addresses these problems. Our solution proposes: ( i) Specialization in two phases of which the former generates specialized C templates and the latter uses a dedicated compiler to generate efficient native code. ( ii) A virtualization mechanism that facilitates specialization of code at a remote location. ( iii) An API and supporting OS extensions that allow applications to produce, manage and dispose of specialized code.
   We evaluate our work through two case studies: ( i) The TCP/IP implementation of Linux and ( ii) The TUX embedded web server. We report appreciable improvements in code size and performance. We also quantify the overhead of specialization and argue that a specialization server can scale to support a sizable workload.
C1 [Bhatia, Sapan] Princeton Univ, Princeton, NJ 08544 USA.
   [Pu, Calton] Georgia Inst Technol, Atlanta, GA 30332 USA.
C3 Princeton University; University System of Georgia; Georgia Institute of
   Technology
RP Bhatia, S (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM gwsapan@gmail.com
CR ADAMS S, 2002, P INT STAT AN S, P230
   [Anonymous], 1984, 896 RFC
   Bershad B.N., 1995, P 15 ACM S OP SYST P, P267
   Bhatia S., 2004, P 29 ANN IEEE C LOC
   BHATIA S, 2004, P 4 ACM INT C EMB SO, P7
   BONWICK J, 1994, P USENIX
   CONSEL C, 1996, 23 ACM SIGPLAN SIGAC, P145
   CONSEL C, 2004, SCI COMPUT PROGRAM
   Denys G, 2002, ACM COMPUT SURV, V34, P450, DOI 10.1145/592642.592644
   Engler D.R., 1995, S OPERATING SYSTEMS, P251
   *EV DAT CORP, 2003, EMB SYST DEV SURV
   FORD B, 1997, P 16 ACM S OP SYST P, P38
   *HEWL PACK, 1996, NETP NETW PERF BENCH
   Hornof L, 2000, THEOR COMPUT SCI, V248, P3, DOI 10.1016/S0304-3975(00)00048-7
   Jones Neil D., 1993, INT SERIES COMPUTER, pJune
   Lawall J.L., 2002, Proceedings of the 10th ACM SIGOPS European Workshop. EW 10, P54, DOI [10.1145/1133373.1133384, DOI 10.1145/1133373.1133384]
   LEE HB, 2004, CUCS97804 U CAL BOUL
   LEMEUR AF, 2004, HIGHER ORDER SYMBOLI, V17, P47
   *LIN DEV MAG, 2003, WIND RIV BRUGG DEF D
   *LIN DEV MAG, 2003, NEW LINKS WIR AP RUN
   *LXR, LXR SOURC COD CROSS
   Mathis M., 1996, TCP Selective Acknowledgment Options," RFC 2018
   McNamee D, 2001, ACM T COMPUT SYST, V19, P217, DOI 10.1145/377769.377778
   Muller G, 1998, INT CON DISTR COMP S, P240, DOI 10.1109/ICDCS.1998.679507
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   OWENS K, 2006, KBUILD
   Seltzer MI, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P213, DOI 10.1145/248155.238779
   VEITCH AC, 1996, P 3 INT C CONF DISTR
   VOSS MJ, 2000, P ACM SIGPLAN WORKSH, P32
   [No title captured]
NR 30
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2008
VL 30
IS 4
AR 22
DI 10.1145/1377492.1377497
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 345YS
UT WOS:000259035300005
OA Bronze
DA 2024-07-18
ER

PT J
AU Binkley, D
   Harman, M
   Krinke, J
AF Binkley, David
   Harman, Mark
   Krinke, Jens
TI Empirical study of optimization techniques for massive slicing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; slicing; internal representation; performance
   enhancement; empirical study
ID UNION SLICES; PROGRAM; DEPENDENCE; GRAPH
AB This article presents results from a study of techniques that improve the performance of graph-based interprocedural slicing of the System Dependence Graph (SDG). This is useful in "massive slicing" where slices are required for many or all of the possible set of slicing criteria. Several different techniques are considered, including forming strongly connected components, topological sorting, and removing transitive edges.
   Data collected from a test bed of just over 1,000,000 lines of code are presented. This data illustrates the impact on computation time of the techniques. Together, the best combination produces a 71% reduction in run-time (and a 64% reduction in memory usage). The complete set of techniques also illustrates the point at which faster computation is not viable due to prohibitive preprocessing costs.
C1 [Binkley, David] Loyola Coll, Baltimore, MD 21210 USA.
   [Harman, Mark] Kings Coll London, London, England.
   [Krinke, Jens] Fern Univ Hagen, D-58084 Hagen, Germany.
C3 Loyola University Maryland; University of London; King's College London;
   Fern University Hagen
RP Binkley, D (corresponding author), Loyola Coll, Baltimore, MD 21210 USA.
EM binkley@cs.loyola.edu; Mark.Harman@kcl.ac.uk;
   Jens.Krinke@FernUniHagen.de
RI Krinke, Jens/E-9011-2011
OI Krinke, Jens/0000-0003-1009-2861; Harman, Mark/0000-0002-5864-4488
CR Agrawal Hiralal, 1990, PLDI, P246, DOI 10.1145/93542.93576
   Anderson P, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P79, DOI 10.1109/SCAM.2001.972669
   [Anonymous], PLDI 00
   [Anonymous], PLDI 98
   Balmas F, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P145, DOI 10.1109/SCAM.2002.1134114
   Beszédes A, 2002, PROC IEEE INT CONF S, P12, DOI 10.1109/ICSM.2002.1167743
   BIEMAN JM, 1994, IEEE T SOFTWARE ENG, V20, P644, DOI 10.1109/32.310673
   Binkley D, 2005, PROC IEEE INT CONF S, P177
   Binkley D, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P15, DOI 10.1109/SCAM.2005.28
   Binkley D., 1995, ACM Transactions on Software Engineering and Methodology, V4, P3, DOI 10.1145/201055.201056
   Binkley D, 2004, IEEE T SOFTWARE ENG, V30, P715, DOI 10.1109/TSE.2004.78
   Binkley D, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P203, DOI 10.1109/SCAM.2003.1238046
   Binkley D, 2003, PROC IEEE INT CONF S, P44, DOI 10.1109/ICSM.2003.1235405
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   Binkley D, 2000, PROG COMPREHEN, P161, DOI 10.1109/WPC.2000.852490
   Binkley D., 1996, Advances in Computers, V43, P1
   Black S, 2001, J SOFTW MAINT EVOL-R, V13, P263, DOI 10.1002/smr.233
   CANFORA G, 1994, J SOFTW MAINT-RES PR, V6, P53, DOI 10.1002/smr.4360060202
   CANFORA G, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P424, DOI 10.1109/ICSM.1994.336752
   CHILIMBI TRISHULM., 1999, PLDI 99 PROC ACM SIG, P13
   Cimitile A, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P124, DOI 10.1109/ICSM.1995.526534
   CIMITILE A, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P178, DOI 10.1109/WCRE.1995.514706
   Danicic S, 2004, PROG COMPREHEN, P89, DOI 10.1109/WPC.2004.1311051
   Eisenbarth T, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P128, DOI 10.1109/WCRE.2002.1173071
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fischer C.N., 1988, CRAFTING COMPILER
   Fox C, 2001, PROG COMPREHEN, P89, DOI 10.1109/WPC.2001.921717
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Harman M, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P25, DOI 10.1109/WCRE.2001.957807
   HARMAN M, 1995, J SOFTWARE TESTING V, V5, P143
   HARMAN M, 2001, SOFTWARE FOCUS, V2, P85
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P254, DOI 10.1145/381694.378855
   Hierons R, 2002, SOFTW TEST VERIF REL, V12, P23, DOI 10.1002/stvr.232
   Hierons R.M., 1999, J SOFTW TEST VERIFIC, V9, P233, DOI 10.1002/(SICI)1099-1689(199912)9:43.0.CO;2-3
   HORWITZ S, 1988, SIGPLAN NOTICES, V23, P35
   HORWITZ S, 1989, ACM T PROGR LANG SYS, V11, P345, DOI 10.1145/65979.65980
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   HORWITZ S, 1989, P ACM SIGPLAN S COMP, P28
   JACKSON D, 1994, CMUCS94169 CARN MELL
   KOSCHKE R, 1999, P 6 WORK C REV ENG A, P256
   Krinke J, 2002, PROC IEEE INT CONF S, P22, DOI 10.1109/ICSM.2002.1167744
   Krinke J., 2003, THESIS U PASSAU
   Lee C.M., 1994, Journal of Family Psychology, V8, P3, DOI DOI 10.1037/0893-3200.8.1.3
   Liang DL, 1999, LECT NOTES COMPUT SC, V1687, P199, DOI 10.1145/318774.318943
   Longworth H. D., 1986, Proceedings 10th Anniversary COMSAC '86. The IEEE Computer Society's Tenth Annual International Computer Software and Applications Conference (Cat. No.86CH2356-4), P383
   Meyers TM, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P256, DOI 10.1109/WCRE.2004.34
   MOCK M, 2002, P 10 ACM SIGSOFT S F, P71
   Muller H. A., 1988, Proceedings of the 10th International Conference on Software Engineering (Cat. No.88CH2554-4), P80, DOI 10.1109/ICSE.1988.93690
   OTT L, 1992, P C SOFTW MAINT NOV, P345
   Ott L. M., 1993, Proceedings First International Software Metrics Symposium (Cat. No.93TH0518-1), P71, DOI 10.1109/METRIC.1993.263799
   Ott L. M., 1989, Proceedings. 11th International Conference on Software Engineering (Cat. No.89CH2718-5), P198, DOI 10.1145/74587.74614
   OTT LM, 1992, P 10 ANN SOFTW REL S, P16
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   PODGURSKI A, 1990, IEEE T SOFTWARE ENG, V16, P965, DOI 10.1109/32.58784
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   REPS T, 1994, P 2 ACM SIGSOFT S FD, V19, P11
   RILLING J, 2001, P 5 WORLD MUTL C SYS, P312
   Snelting G, 2006, ACM T SOFTW ENG METH, V15, P410, DOI 10.1145/1178625.1178628
   TIP F, 1995, J PROGRAM LANG, V3, P121
   WEISER M, 1982, COMMUN ACM, V25, P446, DOI 10.1145/358557.358577
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weiser Mark., 1981, Proceedings of the 5th International Conference on Software Engineering, P439
   Weiser MD., 1979, PROGRAM SLICES FORMA
   Zhao J., 2002, P INT WORKSHOP PROGR, P351
NR 64
TC 18
Z9 19
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 1
AR 3
DI 10.1145/1290520.1290523
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248KY
UT WOS:000252153400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Cooke, DE
   Rushton, JN
   Nemanich, B
   Watson, RG
   Andersen, P
AF Cooke, Daniel E.
   Rushton, J. Nelson
   Nemanich, Brad
   Watson, Robert G.
   Andersen, Per
TI Normalize, transpose, and distribute: An automatic approach for handling
   nonscalars
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; automatic parallelisms; automatic loop generation
ID SEQUENCEL; DESIGN; BOILERPLATE; LANGUAGE; PROGRAM; SCRAP
AB SequenceL is a concise, high-level language with a simple semantics that provides for the automatic derivation of many iterative and parallel control structures. The semantics repeatedly applies a "Normalize-Transpose-Distribute" operation to functions and operators until base cases are discovered. Base cases include the grounding of variables and the application of built-in operators to operands of appropriate types. This article introduces the results of a 24-month effort to reduce the language to a very small set of primitives. Included are comparisons with other languages, the formal syntax and semantics, and the traces of several example problems run with a prototype interpreter developed in 2006.
C1 [Cooke, Daniel E.; Rushton, J. Nelson; Nemanich, Brad; Watson, Robert G.; Andersen, Per] Texas Tech Univ, Dept Comp Sci, Lubbock, TX 79409 USA.
C3 Texas Tech University System; Texas Tech University
RP Cooke, DE (corresponding author), Texas Tech Univ, Dept Comp Sci, 8th & Boston, Lubbock, TX 79409 USA.
EM daniel.cooke@ttu.edu; nelson.rushton@ttu.edu; brad.nemanich@ttu.edu;
   robert.g.watson@ttu.edu; per.andersen@ttu.edu
CR BACKUS J, 1978, COMMUN ACM, V21, P8
   BANATRE JP, 1993, COMMUN ACM, V36, P98, DOI 10.1145/151233.151242
   BISHOP JM, 1990, IEEE T SOFTWARE ENG, V16, P389, DOI 10.1109/32.54291
   BLELLOCH G, 1996, COMMUN ACM, V39, P98
   Cohen P. J., 1966, Set Theory and the Continuum Hypothesis
   COOKE D, 2005, AM I AER ASTR INF AE
   Cooke DE, 1996, SOFTWARE PRACT EXPER, V26, P1205, DOI 10.1002/(SICI)1097-024X(199611)26:11<1205::AID-SPE57>3.0.CO;2-6
   Cooke DE, 1998, COMPUT LANG, V24, P1, DOI 10.1016/S0096-0551(97)00007-6
   Cooke DE, 2000, SOFTWARE PRACT EXPER, V30, P1541, DOI 10.1002/1097-024X(20001125)30:14<1541::AID-SPE350>3.0.CO;2-T
   Cooke DE, 2006, COMPUTER, V39, P63, DOI 10.1109/MC.2006.27
   COOKE DE, 1991, INT J SOFTW ENG KNOW, V1, P21, DOI 10.1142/S0218194091000056
   Cooke DE, 2005, LECT NOTES COMPUT SC, V3516, P891
   Gelfond M., 1991, New Generation Computing, V9, P365, DOI 10.1007/BF03037169
   GELFOND M, 1998, P 5 JICSLP, P1070
   Iverson K. E., 1962, A Programming Language
   Lämmel R, 2004, ACM SIGPLAN NOTICES, V39, P244, DOI 10.1145/1016848.1016883
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   Lin FZ, 2004, ARTIF INTELL, V157, P115, DOI 10.1016/j.artint.2004.04.004
   LOIDL H, 2006, GENTLE INTRO GPH
   MILLS HD, 1986, IEEE T SOFTWARE ENG, V12, P192, DOI 10.1109/TSE.1986.6312935
   Nikhil R., 2001, Implicit parallel programming in pH
   Pancake C., 1999, 41 INT CRAY US GROUP
   SIPELSTEIN J, 1991, P IEEE, V79, P4
   [No title captured]
NR 24
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 2
AR 9
DI 10.1145/1330017.1330020
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 280HZ
UT WOS:000254418100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Xie, YC
   Aiken, A
AF Xie, Yichen
   Aiken, Alex
TI SATURN: A scalable framework for error detection using Boolean
   satisfiability
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 5th Joint Meeting of the European Software Engineering Conference/ACM
   SIGSOFT Symposium on Software Engineering
CY SEP, 2205
CL Lisbon, PORTUGAL
SP ACM SIGSOFT
DE program analysis; error detection; Boolean satisfiability
AB This article presents SATURN, a general framework for building precise and scalable static error detection systems. SATURN exploits recent advances in Boolean satisfiability (SAT) solvers and is path sensitive, precise down to the bit level, and models pointers and heap data. Our approach is also highly scalable, which we achieve using two techniques. First, for each program function, several optimizations compress the size of the Boolean formulas that model the control flow and data flow and the heap locations accessed by a function. Second, summaries in the spirit of type signatures are computed for each function, allowing interprocedural analysis without a dramatic increase in the size of the Boolean constraints to be solved.
   We have experimentally validated our approach by conducting two case studies involving a Linux lock checker and a memory leak checker. Results from the experiments show that our system scales well, parallelizes well, and finds more errors with fewer false positives than previous static error detection systems.
C1 Stanford Univ, Stanford, CA 94305 USA.
C3 Stanford University
RP Xie, YC (corresponding author), Stanford Univ, Dept Comp Sci, Stanford, CA 94305 USA.
EM yxie@cs.stanford.edu; aiken@cs.stanford.edu
OI Aiken, Alex/0000-0002-3723-9555
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   AIKEN A, 2003, PLDI 03, P129
   [Anonymous], LNCS
   BALL T, 2004, P 4 INT C INT FORM M
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Bush WR, 2000, SOFTWARE PRACT EXPER, V30, P775, DOI 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H
   Chilimbi T. M., 2004, P 11 INT C ARCH SUPP
   CHOU A, 2003, THESIS STANFORD U ST
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clarke E, 2004, FORM METHOD SYST DES, V25, P105, DOI 10.1023/B:FORM.0000040025.89719.f3
   DAS M, 2002, P ACM SIGPLAN 2002
   EMAMI M, 1994, P ACM SIGPLAN 1994 C
   ENGLER D, 2000, P C OP SYST DES IMPL
   EVANS D, 1996, P ACM SIGPLAN 1996 C
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   HACKETT B, 2005, P 32 ANN S PRINC PRO
   HACKETT B, 2005, HOW AL US SYST SOFTW
   Hallem Seth., 2002, P ACM SIGPLAN 2002 C
   HASTING R, 1992, PURIFY FAST DETECTIO
   HEINE D.L., 2003, A practical flow-sensitive and context-sensitive c and c++ memory leak detector, P168
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   HENZINGER TA, 2002, P 29 ANN S PRINC PRO
   JACKSON D, 2000, P 2000 ACM SIGS INT
   KHURSHID S, 2003, P 9 INT C TOOLS ALG
   KROENING D, 2003, P DAC 2003, P368
   LANDI W, 1992, P ACM SIGPLAN 1992 C
   LIANG D, 2001, P 8 STAT AN S
   MOSKEWICZ M, 2001, P 39 C DES AUT C
   RUF E, 2000, P ACM SIGPLAN 2000 C
   WHALEY J, 1999, P 14 ACM SIGPLAN C O
   WILSON R, 1995, P ACM SIGPLAN 1995
   XIE Y, 2002, PATH SENSITIVE ANAL
   [No title captured]
NR 33
TC 57
Z9 88
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 3
AR 16
DI 10.1145/1232420.1232423
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 176GF
UT WOS:000247072100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Stuckey, PJ
   Sulzmann, M
AF Stuckey, PJ
   Sulzmann, M
TI A theory of overloading
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE constraints; overloading; type classes; type inference; evidence
   translation; coherence
ID INFERENCE
AB We present a novel approach to allow for overloading of identifiers in the spirit of type classes. Our approach relies on a combination of the HM(X) type system framework with Constraint Handling Rules (CHRs). CHRs are a declarative language for writing incremental constraint solvers, that provide our scheme with a form of programmable type language. CHRs allow us to precisely describe the relationships among overloaded identifiers. Under some sufficient conditions on the CHRs we achieve decidable type inference and the semantic meaning of programs is unambiguous. Our approach provides a common formal basis for many type class extensions such as multiparameter type classes and functional dependencies.
C1 Univ Melbourne, Dept Comp Sci & Software Engn, NICTA, Melbourne, Vic 3010, Australia.
   Natl Univ Singapore, Sch Comp, Singapore 117543, Singapore.
C3 Australian National University; University of Melbourne; National
   University of Singapore
RP Univ Melbourne, Dept Comp Sci & Software Engn, NICTA, Melbourne, Vic 3010, Australia.
EM pjs123@cs.mu.oz.au; sulzmann@comp.nus.edu.sg
OI Stuckey, Peter/0000-0003-2186-0459
CR Abdennadher S, 1997, LECT NOTES COMPUT SC, V1330, P252, DOI 10.1007/BFb0017444
   Abdennadher S, 1998, LECT NOTES COMPUT SC, V1520, P25
   ABDENNADHER S, 1998, LECT NOTES ARTIF INT, V1495, P1
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   BREAZUTANNEN V, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P44, DOI 10.1145/91556.91590
   Camarao C, 1999, LECT NOTES COMPUT SC, V1722, P37
   Chen Kung., 1992, Proceedings of the 1992 ACM Conference on LISP and Functional Programming, P170
   Demoen B, 1999, LECT NOTES COMPUT SC, V1713, P174
   Duggan D, 2002, THEOR COMPUT SCI, V275, P215, DOI 10.1016/S0304-3975(01)00129-3
   Duggan D, 2002, J FUNCT PROGRAM, V12, P133, DOI 10.1017/S0956796801004233
   Fridlender D., 2000, Journal of Functional Programming, V10, P409, DOI 10.1017/S0956796800003658
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   FRUHWIRTH T, 1995, LECT NOTES COMPUTER, V910
   FRUHWIRTH T, 1998, THESIS L MAXIMILIANS
   GASBICHLER M, 2002, P POPL 02, P233
   GLYNN K, 2000, P 1 WORKSH RUL BAS C
   HANUS M, 1994, J LOGIC PROGRAM, V20, P583, DOI 10.1016/0743-1066(94)90034-5
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   JEFFERY D, 2000, AUSTR COMPUTER SCI C, V22, P128
   Jones M. P., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P52, DOI 10.1145/165180.165190
   Jones M.P., 1993, Technical Report YALEU/DCS/RR- 989
   JONES MP, 2000, LECT NOTES COMPUTER, V1782
   JONES MP, 1992, THESIS OXFORD U
   Jones S.P., 1997, HASK WORKSH, P1
   KAES S, 1988, LECT NOTES COMPUT SC, V300, P131
   Lewis JeffreyR., 2000, POPL 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Boston, Massachusetts, USA, January 19-21, P108, DOI [DOI 10.1145/325694.325708, 10.1145/ 325694 . 325708]
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nipkow T., 1995, Journal of Functional Programming, V5, P201, DOI 10.1017/S0956796800001325
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   ODRSKY M, 1995, P 7 INT C FUNCT PROG, P135
   PLASMEIJER M, 1998, CSIR9816 U NIJM NIJM
   SHIELDS M, 2001, P WORKSH MULT INFR I
   Shoenfield J.R., 1967, MATH LOGIC
   Somogyi Z, 1996, J LOGIC PROGRAM, V29, P17, DOI 10.1016/S0743-1066(96)00068-4
   Stuckey PJ, 2002, ACM SIGPLAN NOTICES, V37, P167, DOI 10.1145/583852.581495
   SULZMANN M, 2000, THESIS YALE U
   SULZMANN M, 2003, CHAMELEON SYSTEM
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   YANG Z, 1998, P 1998 ACM SIGPLAN I, P289
NR 40
TC 14
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2005
VL 27
IS 6
BP 1216
EP 1269
DI 10.1145/1108970.1108974
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 005EG
UT WOS:000234804800004
OA Bronze
DA 2024-07-18
ER

PT J
AU Gil, J
   Zibin, Y
AF Gil, J
   Zibin, Y
TI Efficient subtyping tests with PQ-encoding
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; measurement; performance; theory; casting; encoding;
   hierarchy; inheritance; partially ordered sets; PQ; PQE; subtyping; type
   inclusion
ID LAYOUT
AB Given a type hierarchy, a subtyping test determines whether one type is a direct or indirect descendant of another type. Such tests are a frequent operation during the execution of object-oriented programs. The implementation challenge is in a space-efficient encoding of the type hierarchy that simultaneously permits efficient subtyping tests. We present a new scheme for encoding multiple and single-inheritance hierarchies, which, in the standard benchmark hierarchies, reduces the footprint of all previously published schemes. Our scheme is called PQ-encoding (PQE) after PQ-trees, a data structure previously used in graph theory for finding the orderings that satisfy a collection of constraints. In particular, we show that in the traditional object layout model, the extra memory requirements for single-inheritance hierarchies is zero. In the PQE subtyping, tests are constant time, and use only two comparisons. The encoding creation time of PQE also compares favorably with previous results. It is less than 1. s on all standard benchmarks on a contemporary architecture, while the average time for processing a type is less than 1 ms. However, PQE is not an incremental algorithm. Other than PQ-trees, PQE employs several novel optimization techniques. These techniques are applicable also in improving the performance of other, previously published, encoding schemes.
C1 Technion Israel Inst Technol, IL-32000 Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Technion Israel Inst Technol, IL-32000 Haifa, Israel.
EM Yogi@cs.technion.ac.il; yoav@zibin.net
CR AGRAWAL R, 1989, SIGMOD REC, V18, P253, DOI 10.1145/66926.66950
   ALPERN B, 2001, JAV VIRT MACH RES TE
   [Anonymous], 1984, Smalltalk-80: The Interactive Programming Environment
   Arnold Ken., 1996, The Java Programming Language
   BATTISTA GD, 1989, CS8931 BROWN U DEP C
   BOAS PV, 1977, MATH SYST THEORY, V10, P99
   BOOTH KS, 1976, J COMPUT SYST SCI, V13, P335, DOI 10.1016/S0022-0000(76)80045-1
   BOUCHITTE V, 1994, LECT NOTES COMPUTER, V831
   CAPELLE C, 1994, LNCS, V831, P143
   CASEAU Y, 1993, SIGPLAN NOTICES, V28, P271, DOI 10.1145/167962.165905
   Caseau Y, 1999, COMPUT INTELL-US, V15, P50, DOI 10.1111/0824-7935.00081
   CHAMBERS C, 1993, TR930305 U WASH
   COHEN NH, 1991, ACM T PROGR LANG SYS, V13, P626, DOI 10.1145/115372.115297
   CORSARO A, 2003, P 2003 ACM SIGPLAN C, P51
   Cox B.J., 1986, OBJECT ORIENTED PROG
   DiBattista G, 1996, ALGORITHMICA, V15, P302, DOI 10.1007/s004539900017
   Dijkstra E.W., 1960, NUMER MATH, V2, P312, DOI DOI 10.1007/BF01386232
   Eckel N, 2000, LECT NOTES COMPUT SC, V1850, P394
   FALL A, 1995, P INT KRUSE 95 C KNO, P162
   FALL A, 1996, LECT NOTES ARTIF INT, V1115, P277
   Filman RE, 2002, LECT NOTES COMPUT SC, V2374, P545
   FREDMAN ML, 1984, J ACM, V31, P538, DOI 10.1145/828.1884
   Gil J, 1999, ACM SIGPLAN NOTICES, V34, P256, DOI 10.1145/320385.320408
   GRAFL R, 1996, THESIS U VIENNA VIEN
   HABIB M, 1994, LECT NOTES COMPUTER, V831, P1
   HBOAS PV, 1977, INFORM PROCESS LETT, V6, P80
   Hollander Y, 2001, TOOLS, V38, P41, DOI 10.1109/TOOLS.2001.911754
   Junger M, 1998, IEEE T COMPUT AID D, V17, P609, DOI 10.1109/43.709399
   JUNGER M, 1996, COMPUTING MAXIMAL PL
   KACI H, 1989, ACM T PROGR LANG SYS, V11, P115
   Krall A, 1997, LECT NOTES COMPUT SC, V1241, P128, DOI 10.1007/BFb0053377
   KRALL A, 1997, PPOPP 97 WORKSH JAV
   KRALL A, 2001, COMMUNICATION
   LEIPERT S, 1997, PQ TREES IMPLEMENTAT
   Lempel A., 1967, Theory of graphs-international symposium, P215
   MEYER B, 1992, OBJECT ORIENTED SERI
   PALACZ K, 2003, LECT NOTES COMPUTER, V2743
   RAYNAUD O, 2001, LECT NOTES COMPUTER, V1850, P165
   SCHUBERT LK, 1983, COMPUTER, V16, P53, DOI 10.1109/MC.1983.1654198
   Stroustrup B., 1997, The C++ Programming Language
   van Bommel MF, 1999, PROCEEDINGS OF THE EIGHTH INTERNATIONAL CONFERENCE ON INFORMATION KNOWLEDGE MANAGEMENT, CIKM'99, P507, DOI 10.1145/319950.320057
   Vitek J, 1997, ACM SIGPLAN NOTICES, V32, P142, DOI 10.1145/263700.263730
   WILLARD DE, 1984, J COMPUT SYST SCI, V28, P379, DOI 10.1016/0022-0000(84)90020-5
   [No title captured], DOI [10.1007/BFb0032061, DOI 10.1007/BFB0032061]
NR 44
TC 6
Z9 7
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2005
VL 27
IS 5
BP 819
EP 856
DI 10.1145/1086642.1086643
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 981JL
UT WOS:000233084800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Kistler, T
   Franz, M
AF Kistler, T
   Franz, M
TI Continuous program optimization: A case study
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; languages; performance; dynamic code generation; continuous
   program optimization; dynamic reoptimization
AB Much of the software in everyday operation is not making optimal use of the hardware on which it actually runs. Among the reasons for this discrepancy are hardware/software mismatches, modularization overheads introduced by software engineering considerations, and the inability of systems to adapt to users' behaviors.
   A solution to these problems is to delay code generation until load time. This is the earliest point at which a piece of software can be fine-tuned to the actual capabilities of the hardware on which it is about to be executed, and also the earliest point at wich modularization overheads can be overcome by global optimization.
   A still better match between software and hardware can be achieved by replacing the already executing software at regular intervals by new versions constructed on-the-fly using a background code re-optimizer. This not only enables the use of live profiling data to guide optimization decisions, but also facilitates adaptation to changing usage patterns and the late addition of dynamic link libraries.
   This paper presents a system that provides code generation at load-time and continuous program optimization at run-time. First, the architecture of the system is presented. Then, two optimization techniques are discussed that were developed specifically in the context of continuous optimization. The first of these optimizations continually adjusts the storage layouts of dynamic data structures to maximize data cache locality, while the second performs profile-driven instruction re-scheduling to increase instruction-level parallelism. These two optimizations have very different cost/benefit ratios, presented in a series of benchmarks. The paper concludes with an outlook to future research directions and an enumeration of some remaining research problems.
   The empirical results presented in this paper make a case in favor of continuous optimization, but indicate that it needs to be applied judiciously. In many situations, the costs of dynamic optimizations outweigh their benefit, so that no break-even point is ever reached. In favorable circumstances, on the other hand, speed-ups of over 120% have been observed. It appears as if the main beneficiaries of continuous optimization are shared libraries, which at different times can be optimized in the context of the currently dominant client application.
C1 Univ Calif Irvine, Dept Informat & Comp Sci, Irvine, CA 92697 USA.
C3 University of California System; University of California Irvine
RP Transmeta Corp, 3990 Freedom Circle, Santa Clara, CA 95054 USA.
EM kistler@transmeta.com; franz@uci.edu
CR ADLTABATABAI AR, 1998, P ACM SIGPLAN 98 C P, P280
   ALPERN B, 1999, P ACM SIGPLAN 1999 W
   ALPERN B, 1999, P ACM SIGPLAN 99 C O
   ANDERSON JM, 1997, P 16 ACM S OP SYST P
   ARNOLD M, 2001, P ACM SIGPLAN 2001 C, P168, DOI DOI 10.1145/378795.378832
   BALA V, 1999, HPL199978
   BALL T, 1994, ACM T PROGR LANG SYS, V16, P1319, DOI 10.1145/183432.183527
   BALL T, 1996, P 29 ANN IEEE ACM IN
   BALL T, 1994, ACM T PROGR LANG SYS, V16, P3
   BALL T, 1998, P 25 ACM SIGPLAN SIG, P134
   BRANDIS M, 1995, THESIS ETH ZURICH
   CALDER B, 1998, P 8 INT C ARCH SUPP, P129
   Chambers C., 1989, PLDI '89, P146
   Chang P. P., 1991, Proceedings of the 24th International Symposium on Microarchitecture. MICRO 24, P25, DOI 10.1145/123465.123471
   CHANG PP, 1991, SOFTWARE PRACT EXPER, V21, P1301, DOI 10.1002/spe.4380211204
   CHANG PP, 1992, SOFTWARE PRACT EXPER, V22, P349, DOI 10.1002/spe.4380220502
   Chekuri C, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P58, DOI 10.1109/MICRO.1996.566450
   CHEN WY, 1994, INT J PARALLEL PROG, V22, P151, DOI 10.1007/BF02577873
   CHEN WY, 1993, ADV LANGUAGES COMPIL
   Chilimbi TM, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/301631.301633
   CHILIMBI TRISHULM., 1999, PLDI 99 PROC ACM SIG, P13
   Chilimbi TrishulM., 1998, Proceedings of the 1st international symposium on Memory management, ISMM '98, P37
   CHOI JD, 1999, P ACM SIGPLAN 99 C O
   CLICK C, 1995, ACM T PROGR LANG SYS, V17, P181, DOI 10.1145/201059.201061
   Conte TM, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P36, DOI 10.1109/MICRO.1996.566448
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Dean J, 1997, INT SYMP MICROARCH, P292, DOI 10.1109/MICRO.1997.645821
   DEAN J, 1994, C LISP FUNCT PROGR, P273
   Deitrich BL, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P70, DOI 10.1109/MICRO.1996.566451
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   DONGARRA JJ, 1988, ACM T MATH SOFTWARE, V14, P18, DOI 10.1145/42288.42292
   DUTT S, 1993, IEEE ACM INT C CAD
   Ebcioglu K, 2001, IEEE T COMPUT, V50, P529, DOI 10.1109/12.931892
   Ebcioglu K, 1997, ACM COMP AR, P26, DOI 10.1145/384286.264126
   Engler DawsonR., 1996, POPL 96, P131
   EUSTACE A, 1994, TN44 DIG EQ CORP W R
   FINKEL D, 1992, CSTR922 WORC POL I
   FISHER JA, 1981, IEEE T COMPUT, V30, P478, DOI 10.1109/TC.1981.1675827
   Franz M, 1997, COMMUN ACM, V40, P87, DOI 10.1145/265563.265576
   FRANZ M, 1994, THESIS ETH ZURICH
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gloy N, 1997, INT SYMP MICROARCH, P303, DOI 10.1109/MICRO.1997.645824
   Gosling James, 1996, The Java Language Specification
   GRANT B, 1999, P ACM SIGPLAN 99 C P, P293
   Gschwind M, 2000, COMPUTER, V33, P54, DOI 10.1109/2.825696
   GUTKNECHT J, 1994, SOFTWARE-CONC TOOL, V15, P26
   GUTKNECHT J, 1994, SOFTWARE-CONC TOOL, V15, P1
   GUTKNECHT J, 1999, OBJECT ORIENTED APPL, V2
   HANSEN GJ, 1974, THESIS CARNEGIE MELL
   Holzle U, 1996, ACM T PROGR LANG SYS, V18, P355, DOI 10.1145/233561.233562
   HOLZLE U, 1994, P ACM SIGPLAN 94 C P, P326, DOI DOI 10.1145/178243.178478
   Holzle U., 1991, P EUROPEAN C OBJECT, P21, DOI DOI 10.1007/BFB0057013
   Hookway R. J., 1997, Digital Technical Journal, V9, P3
   INGALLS D, 1971, DESIGN OPTIMIZATION, P107
   Karypis G, 1998, SIAM J SCI COMPUT, V20, P359, DOI 10.1137/S1064827595287997
   Kernighan B. W., 1970, The Bell System Technical Journal, V49, P291, DOI [10.1002/j.1538-7305.1970.tb01770.x, DOI 10.1002/J.1538-7305.1970.TB01770.X]
   Kistler T, 2000, ACM T PROGR LANG SYS, V22, P490, DOI 10.1145/353926.353937
   KISTLER TP, 1999, THESIS U CALIFORNIA
   Klaiber A., 2000, The technology behind the crusoe processor whitepaper
   LEE P, 1996, P ACM SIGPLAN 96 C P, P137
   MARLET R, 1999, P ACM SIGPLAN 99 C P, P281
   *MIPS COMP SYST, 1990, UMIPS 5 REF MAN PIX
   *MOT INC, 1997, POW MICR FAM PROGR E
   *MOT INC, 1996, POW ADD POW PC 604 R
   *MOT INC, 1994, POW 604 RISC MICR US
   MOWRY TC, 1992, P ASPLOS, V5, P62
   Muchnick S., 1997, ADV COMPILER DESIGN
   Pettis K., 1990, SIGPLAN Notices, V25, P16, DOI 10.1145/93548.93550
   ROGERS A, 1995, ACM T PROGR LANG SYS, V17, P233, DOI 10.1145/201059.201065
   SUGANUMA T, 2001, P ACM SIGPLAN 01 C O, P227
   Traub O., 2000, Ephemeral instrumentation for lightweight program profiling
   Truong DN, 1998, 1998 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P322, DOI 10.1109/PACT.1998.727268
   WARREN HS, 1990, IBM J RES DEV, V34, P85, DOI 10.1147/rd.341.0085
   WIRTH N, 1988, SOFTWARE PRACT EXPER, V18, P671, DOI 10.1002/spe.4380180707
   WIRTH N, 1992, PROJECT OBERON
   Wolf M. E., 1991, SIGPLAN Notices, V26, P30, DOI 10.1145/113446.113449
   WU Y, 1999, P WORKSH BIN TRANSL
   YANG BS, 1999, P 1999 INT C PAR ARC, P128
   Young C, 1998, 31ST ANNUAL ACM/IEEE INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P115, DOI 10.1109/MICRO.1998.742774
   ZHANG X, 1997, P 16 ACM S OP SYST P
   Zheng C, 2000, COMPUTER, V33, P47, DOI 10.1109/2.825695
   [No title captured]
   [No title captured]
NR 83
TC 37
Z9 70
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2003
VL 25
IS 4
BP 500
EP 548
DI 10.1145/778559.778562
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 689QT
UT WOS:000183505000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Rugina, R
   Rinard, MC
AF Rugina, R
   Rinard, MC
TI Pointer analysis for structured parallel programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT Conference on Programming Language Design and Implementation
CY MAY, 1999
CL ATLANTA, GA
DE analysis; languages; pointer analysis
ID ALGORITHM
AB This paper presents a novel interprocedural, flow-sensitive, and context-sensitive pointer analysis algorithm for multithreaded programs that may concurrently update shared pointers. The algorithm is designed to handle programs with structured parallel constructs, including fork-join constructs, parallel loops, and conditionally spawned threads. For each pointer and each program point, the algorithm computes a conservative approximation of the memory locations to which that pointer may point. The algorithm correctly handles a wide range of programming language constructs, including recursive functions, recursively generated parallelism, function pointers, structures, arrays, nested structures and arrays, pointer arithmetic, casts between different pointer types, heap and stack allocated memory, shared global variables, and thread-private global variables. We have implemented the algorithm in the SUIF compiler system and used the implementation to analyze a set of multithreaded programs written in the Cilk programming language. Our experimental results show that the analysis has good precision and converges quickly for our set of Cilk programs.
C1 Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
   MIT, Comp Sci Lab, Cambridge, MA 02139 USA.
C3 Cornell University; Massachusetts Institute of Technology (MIT)
RP Cornell Univ, Dept Comp Sci, 4141 Upson Hall, Ithaca, NY 14853 USA.
EM rugina@cs.cornell.edu; rinard@lcs.mit.edu
CR ALDRICH J, 1999, P 6 INT STAT AN S
   Andersen L. O., 1994, Ph.D. thesis
   [Anonymous], 1990, ICPP
   BABB J, 1999, P IEEE WORKSH FPGAS
   BALASUNDARAM V, 1989, P 1989 ACM INT C SUP
   Barua R, 1999, CONF PROC INT SYMP C, P4, DOI [10.1109/ISCA.1999.765935, 10.1145/307338.300980]
   BLANCHET B, 1999, P 14 ANN C OBJ OR PR
   BLIEBERGER J, 2000, P 5 INT C REL SOFTW
   BOGDA J, 1999, P 14 ANN C OBJ OR PR
   BOGLE P, 1994, P 9 ANN C OBJ OR PRO
   BOYAPATI C, 2001, P 16 ANN C OBJ OR PR
   BUDIU M, 2000, P EUR 2000 EUR C PAR
   CALLAHAN D, 1990, P 2 ACM SIGPLAN S PR
   CALLAHAN D, 1988, P ACM SIGPLAN SIGOPS
   CARLISLE M, 1998, P 5 ACM SIGPLAN S PR, P29
   CHASE C, 1990, P SIGPLAN 90 C PROGR
   CHENG G, 1998, P 10 ANN ACM S PAR A
   CHOI J, 1993, 20 ANN S PRINC PROGR
   CHOI J, 1999, P 14 ANN C OBJ OR PR
   CHOW J, 1992, P 19 ANN ACM S PRINC
   CHOW JH, 1992, P 1992 INT C PAR PRO
   Corbett JC, 1996, IEEE T SOFTWARE ENG, V22, P161, DOI 10.1109/32.489078
   COUSOT P, 1984, AUTOMATIC PROGRAM CO
   DAS M, 2000, P SIGPLAN 00 C PROGR
   DETLEFS DL, 1998, 159 COMP SYST RES CT
   DILLON LK, 1990, ACM T PROGR LANG SYS, V12, P643, DOI 10.1145/88616.96551
   DINIZ P, 1997, P 24 ANN ACM S PRINC, P187
   Diniz PC, 1998, J PARALLEL DISTR COM, V49, P218, DOI 10.1006/jpdc.1998.1441
   DINNING A, 1991, P ACM ONR WORKSH PAR
   DIWAN A, 1998, P SIGPLAN 98 C PROGR
   DUESTERWALD E, 1991, 1991 INT S SOFTW TES
   DWYER M, 1994, P ACM SIGSOFT 94 S F
   EMAMI M, 1994, P SIGPLAN 94 C PROGR
   EMRATH P, 1988, P ACM SIGPLAN SIGOPS
   EMRATH P, 1989, P SUP 89 REN NV
   Falsafi B., 1994, Proceedings Supercomputing '94 (Cat. No.94CH34819), P380, DOI 10.1109/SUPERC.1994.344301
   Flanagan C., 2000, P SIGPLAN 00 C PROGR
   FLANAGAN C, 1999, P 1999 EUR S PROGR A
   Frigo M., 1998, P SIGPLAN 98 C PROGR
   GODEFROID P, 1994, INFORM COMPUT, V110, P305, DOI 10.1006/inco.1994.1035
   Grunwald Dirk, 1993, P 4 ACM SIGPLAN S PR
   HAUSER C, 1993, P 14 S OP SYST PRINC
   HEINTZE N, 2001, P SIGPLAN 01 C PROGR
   HICKS J, 1993, P 5 ACM C FUNCT PROG, P95
   HIND M, 2001, P SIGPLAN SIGSOFT 01
   Knoop J, 1996, ACM T PROGR LANG SYS, V18, P268, DOI 10.1145/229542.229545
   KNOOP J, 1998, P 4 EUR C PAR PROC E
   KNOOP J, 1999, P 7 ACM SIGPLAN S PR
   Krishnamurthy A, 1996, J PARALLEL DISTR COM, V38, P130, DOI 10.1006/jpdc.1996.0136
   KRISHNAMURTHY A, 1995, P SIGPLAN 95 C PROGR
   LANDI W, 1992, P SIGPLAN 92 C PROGR
   Lee J, 1998, INT J PARALLEL PROG, V26, P563, DOI 10.1023/A:1018772514882
   LEE J, 1999, P 7 ACM SIGPLAN S PR
   LEE J, 2000, P INT C PAR ARCH COM
   LONG D, 1991, 1991 INT S SOFTW TES
   MASTICOLA S, 1990, P 1990 INT C PAR PRO
   MASTICOLA S, 1993, P 4 ACM SIGPLAN S PR
   MELLORCRUMMEY J, 1991, P SUP 91 ALB NM
   MIN S, 1991, P 3 ACM SIGPLAN S PR
   MORITZ A, 2000, 2 WORKSH INT MEM SYS
   NAUMOVICH G, 1998, P ACM SIGSOFT 98 S F
   NAUMOVICH G, 1999, P ACM SIGSOFT 99 S F
   NETZER RHB, 1991, P 3 ACM SIGPLAN S PR
   OCALLAHAN R, 1997, 1997 INT C SOFTW ENG
   REPPY J, 1992, THESIS CORNELL U ITH
   RINARD M, 2001, P 8 STAT AN S PAR FR
   Rinard MC, 1999, ACM T COMPUT SYST, V17, P337, DOI 10.1145/329466.329486
   ROUNTEV A, 2000, P SIGPLAN 00 C PROGR
   RUF E, 1995, P SIGPLAN 95 C PROGR
   RUF E, 2000, P SIGPLAN 00 C PROGR
   RUGINA R, 1999, P 7 ACM SIGPLAN S PR
   RUGINA R, 2000, P SIGPLAN 00 C PROGR
   Ryder BG, 2001, ACM T PROGR LANG SYS, V23, P105, DOI 10.1145/383043.381532
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   Salcianu A., 2001, P 8 ACM SIGPLAN S PR
   SARKAR V, 1997, P 10 WORKSH LANG COM
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   SHAPIRO M, 1997, P 24 ANN ACM S PRINC
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   SRINIVASAN H, 1993, P 20 ANN ACM S PRINC
   STEELE G, 1990, P 17 ANN ACM S PRINC
   STEENSGAARD B, 1996, P 23 ANN ACM S PRINC
   STEPHENSON M, 2000, P SIGPLAN 00 C PROGR
   STERLING N, 1994, P 1993 WINT US C SAN
   TAYLOR RN, 1983, COMMUN ACM, V26, P362, DOI 10.1145/69586.69587
   TSENG CW, 1995, SIGPLAN NOTICES, V30, P144, DOI 10.1145/209937.209952
   VALMARI A, 1990, P 2 INT WORKSH COMP
   WHALEY J, 1999, P 14 ANN C OBJ OR PR
   WILSON R, 1995, P SIGPLAN 95 C PROGR
   ZHU Y, 1997, P INT C PAR ARCH COM
   ZHU Y, 1998, P SIGPLAN 98 C PROGR
NR 91
TC 18
Z9 26
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2003
VL 25
IS 1
BP 70
EP 116
DI 10.1145/596980.596982
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 637RJ
UT WOS:000180526400002
DA 2024-07-18
ER

PT J
AU Economou, DJ
   Krishnaswami, N
   Dunfield, J
AF Economou, Dimitrios J.
   Krishnaswami, Neel
   Dunfield, Jana
TI Focusing on Refinement Typing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Refinement types; bidirectional typechecking; polarity;
   call-by-push-value
ID CONTRACTS; CHECKING
AB We present a logically principled foundation for systematizing, in a way that works with any computational effect and evaluation order, SMT constraint generation seen in refinement type systems for functional programming languages. By carefully combining a focalized variant of call-by-push-value, bidirectional typing, and our novel technique of value-determined indexes, our system generates solvable SMT constraints without existential (unification) variables. We design a polarized subtyping relation allowing us to prove our logically focused typing algorithm is sound, complete, and decidable. We prove type soundness of our declarative system with respect to an elementary domain-theoretic denotational semantics. Type soundness implies, relatively simply, the total correctness and logical consistency of our system. The relative ease with which we obtain both algorithmic and semantic results ultimately stems from the proof-theoretic technique of focalization.
C1 [Economou, Dimitrios J.; Dunfield, Jana] Queens Univ, Goodwin Hall 557, Kingston, ON K7L 3N6, Canada.
   [Krishnaswami, Neel] Univ Cambridge, Comp Lab, William Gates Bldg, Cambridge CB3 0FD, England.
C3 Queens University - Canada; University of Cambridge
RP Economou, DJ (corresponding author), Queens Univ, Goodwin Hall 557, Kingston, ON K7L 3N6, Canada.
EM d.economou@queensu.ca; nk480@cl.cam.ac.uk; jd169@queensu.ca
FU Natural Sciences and Engineering Research Council of Canada
   [RGPIN-2018-04352]; European Research Council (ERC) under the European
   Union [101002277]; European Research Council (ERC) [101002277] Funding
   Source: European Research Council (ERC)
FX This work was supported in part by the Natural Sciences and Engineering
   Research Council of Canada through Discovery Grant RGPIN-2018-04352, and
   also in part by European Research Council (ERC) Consolidator Grant for
   the project "TypeFoundry," funded under the European Union's Horizon
   2020 Framework Programme (grant agreement no. 101002277).
CR Abel A, 2008, LECT NOTES COMPUT SC, V5133, P29
   Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   Atkey R, 2012, LOG METH COMPUT SCI, V8, DOI [10.2168/LMCS-8(2:09)2012, 10.2168/LMCS-8 (2:09)2012]
   Augustsson L, 1999, ACM SIGPLAN NOTICES, V34, P239, DOI 10.1145/291251.289451
   Baranovic Ondrej, 2023, LTR
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Belo JF, 2011, LECT NOTES COMPUT SC, V6602, P18, DOI 10.1007/978-3-642-19718-5_2
   Brock-Nannestad T, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P43, DOI 10.1145/2790449.2790528
   Cervesato I, 2003, J LOGIC COMPUT, V13, P639, DOI 10.1093/logcom/13.5.639
   Chen CY, 2005, ACM SIGPLAN NOTICES, V40, P66, DOI 10.1145/1090189.1086375
   Cheney J., 2003, Technical Report
   CONSTABLE RL, 1984, LECT NOTES COMPUT SC, V164, P116
   Cook WR, 2009, ACM SIGPLAN NOTICES, V44, P557, DOI 10.1145/1639949.1640133
   Coquand T, 1996, SCI COMPUT PROGRAM, V26, P167, DOI 10.1016/0167-6423(95)00021-6
   Dagand PE, 2012, ACM SIGPLAN NOTICES, V47, P103, DOI 10.1145/2398856.2364544
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Downen Paul, 2017, Sequent Calculus: A Logic and a Language for Computation and Duality
   Dunfield J, 2003, LECT NOTES COMPUT SC, V2620, P250
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Dunfield Jana, 2007, Ph.D. Dissertation
   Dunfield J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290322
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Dunfield J, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P21, DOI 10.1145/1292597.1292602
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Girard Jean-Yves, 1992, A Fixpoint Theorem in Linear Logic
   GIRARD JY, 1993, ANN PURE APPL LOGIC, V59, P201, DOI 10.1016/0168-0072(93)90093-S
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Gunter C.A., 1993, Semantics of Programming Languages-Structures and Techniques
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   Harper Bob, 1991, ML with Callcc is Unsound
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   Heeren Bastiaan, 2002, Technical Report UU-CS-2002-031
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Hongwei Xi, 2002, Higher-Order and Symbolic Computation, V15, P91, DOI 10.1023/A:1019916231463
   Hongwei Xi, 1998, Ph.D. Dissertation
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kawaguchi M, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P304, DOI 10.1145/1542476.1542510
   Kennedy A., 1994, Programming Languages and Systems - ESOP '94. 5th European Symposium on Programming. Proceedings, P348
   Krishnaswami NR, 2009, ACM SIGPLAN NOTICES, V44, P366, DOI 10.1145/1594834.1480927
   Lehmann N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591283
   Levy Paul Blain, 2004, Call-by-push-value: A Functional/ Imperative Synthesis, V2, DOI DOI 10.1007/978-94-007-0954-6
   Liang C, 2009, THEOR COMPUT SCI, V410, P4747, DOI 10.1016/j.tcs.2009.07.041
   Licata Daniel R., 2005, Technical Report CMU-CS-05-178, DOI [10.1184/R1/6587429.v1, DOI 10.1184/R1/6587429.V1]
   Martin-Lof P., 1996, Nordic J. Philosophical Logic, V1, P11
   Martin-Lof Per, 1975, Logic Colloquium, V80, P73, DOI [10.1016/S0049-237X(08)71945-1, DOI 10.1016/S0049-237X(08)71945-1]
   Martin-Lof Per, 1971, A Theory of Types
   Martin-Lof Per, 1984, INTUITIONISTIC TYPE, V1
   MARTINLOF P, 1994, U W ONT PHI, V54, P87
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride Conor, 2011, Ornamental algebras, algebraic ornaments
   Melliès PA, 2015, ACM SIGPLAN NOTICES, V50, P3, DOI 10.1145/2775051.2676970
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Moggi E., 1989, Category Theory and Computer Science Proceedings, P101, DOI 10.1007/BFb0018347
   Odersky M, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/373243.360207
   Pfenning Frank, 2008, Reasoning in Simple Type Theory: Festschrift in Honor of Peter B. Andrews on His 70th Birthday
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Reynolds J.C., 1998, Theories of Programming Languages
   Rioux N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408977
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Santo JE, 2017, ELECTRON NOTES THEOR, V332, P149, DOI 10.1016/j.entcs.2017.04.010
   Schroeder-Heister P., 1994, Extensions of Logic Programming. 4th International Workshop, ELP '93 Proceedings, P333
   Sekiyama T, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994594
   Sekiyama T, 2015, ACM SIGPLAN NOTICES, V50, P195, DOI [10.1145/2676726.2676996, 10.1145/2775051.2676996]
   Simmons RJ, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629678
   SMULLYAN RM, 1968, J SYMBOLIC LOGIC, V33, P560, DOI 10.2307/2271362
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   Williams T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158109
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   Xi HW, 2004, ANN NY ACAD SCI, V3085, P394
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Zeilberger Noam, 2009, PROGRAMMING LANGUAGE, P15, DOI [10.1145/1481848.1481852, DOI 10.1145/1481848.1481852]
NR 90
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2023
VL 45
IS 4
AR 22
DI 10.1145/3610408
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IO8S1
UT WOS:001167368600003
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Basso, M
   Prokopec, A
   Rosà, A
   Binder, W
AF Basso, Matteo
   Prokopec, Aleksandar
   Rosa, Andrea
   Binder, Walter
TI Optimization-Aware Compiler-Level Event Profiling
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Dynamic analysis; profiling; compiler-IR instrumentation; just-in-time
   compilers; code optimization; debugging
AB Tracking specific events in a program's execution, such as object allocation or lock acquisition, is at the heart of dynamic analysis. Despite the apparent simplicity of this task, quantifying these events is challenging due to the presence of compiler optimizations. Profiling perturbs the optimizations that the compiler would normally do-a profiled program usually behaves differently than the original one. In this article, we propose a novel technique for quantifying compiler-internal events in the optimized code, reducing the profiling perturbation on compiler optimizations. Our technique achieves this by instrumenting the program from within the compiler, and by delaying the instrumentation until the point in the compilation pipeline after which no subsequent optimizations can remove the events. We propose two different implementation strategies of our technique based on path-profiling, and a modification to the standard path-profiling algorithm that facilitates the use of the proposed strategies in a modern just-in-time (JIT) compiler. We use our technique to analyze the behaviour of the optimizations in Graal, a state-of-the-art compiler for the Java Virtual Machine, identifying the reasons behind a performance improvement of a specific optimization, and the causes behind an unexpected slowdown of another. Finally, our evaluation results show that the two proposed implementations result in a significantly lower execution-time overhead w.r.t. a naive implementation.
C1 [Basso, Matteo; Rosa, Andrea; Binder, Walter] Univ Svizzera Italiana USI, Fac Informat, Via Santa 1, CH-6962 Lugano, Canton Ticino, Switzerland.
   [Prokopec, Aleksandar] Oracle Labs, Feldblumenstr 100, CH-8134 Adliswil, Canton Zurich, Switzerland.
C3 Universita della Svizzera Italiana
RP Basso, M (corresponding author), Univ Svizzera Italiana USI, Fac Informat, Via Santa 1, CH-6962 Lugano, Canton Ticino, Switzerland.
EM matteo.basso@usi.ch; aleksandar.prokopec@oracle.com; andrea.rosa@usi.ch;
   walter.binder@usi.ch
OI Binder, Walter/0000-0002-2477-2182; Rosa, Andrea/0000-0002-6467-0113
FU Oracle (ERO) [1332]; Swiss National Science Foundation [200020_188688];
   Swiss National Science Foundation (SNF) [200020_188688] Funding Source:
   Swiss National Science Foundation (SNF)
FX This work has been supported by Oracle (ERO project 1332) and by the
   Swiss National Science Foundation (project 200020_188688).
CR Akka Website, 2023, US
   Aleksandar Prokopec, 2019, ABS190310267 CORR
   Alpern B, 2005, IBM SYST J, V44, P399, DOI 10.1147/sj.442.0399
   Ammons G, 1997, ACM SIGPLAN NOTICES, V32, P85, DOI 10.1145/258916.258924
   [Anonymous], 2018, DaCapo Benchmark Suite 9.12
   Arnold M, 2000, ACM SIGPLAN NOTICES, V35, P52, DOI 10.1145/351403.351416
   Bagwell P., 2001, IDEAL HASH TREES
   Ball T, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P46, DOI 10.1109/MICRO.1996.566449
   BALL T, 1994, ACM T PROGR LANG SYS, V16, P1319, DOI 10.1145/183432.183527
   BALL T, 1994, ACM T PROGR LANG SYS, V16, P1399, DOI 10.1145/186025.186027
   Basso M, 2022, LECT NOTES COMPUT SC, V13440, P35, DOI 10.1007/978-3-031-12597-3_3
   Basso Matteo, 2023, CC 23, P1
   Berris Dean Michael, 2016, XRAY FUNCTION CALL T, P1
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blackburn Steve, 2018, DACAPO ISSUE 68
   Blackburn Steve, 2020, DACAPO ISSUE 70
   Bond MD, 2005, INT SYMP MICROARCH, P130
   Bruno R, 2017, ACM SIGPLAN NOTICES, V52, P2, DOI 10.1145/3156685.3092272
   Burke M. G., 1999, Proceedings of the ACM 1999 Java Grande Conference, P129, DOI 10.1145/304065.304113
   CHEN WY, 1993, IEEE T COMPUT, V42, P1045, DOI 10.1109/12.241594
   CLICK C, 1995, SIGPLAN NOTICES, V30, P246, DOI 10.1145/223428.207154
   CLICK C, 1995, SIGPLAN NOTICES, V30, P35, DOI 10.1145/202530.202534
   Click Cliff, 2002, P 2002 JOINT ACMISCO, P96, DOI DOI 10.1145/583810.583821
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Daloze Benoit, 2015, ICOOOLPS 15, V8, P1
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Dice D, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P79
   Dice Dave, 2006, BIASED LOCKING HOTSP
   Dice David MarkMoir, 2003, Patent No. [US7814488B1, 7814488]
   Duboscq Gilles Marie, 2016, COMBINING SPECULATIV
   Engelke Alexis, 2020, VEE '20: Proceedings of the 16th SIGPLAN/SIGOPS International Conference on Virtual Execution Environments, P172, DOI 10.1145/3381052.3381319
   Eyerman S, 2008, LECT NOTES COMPUT SC, V4917, P114, DOI 10.1007/978-3-540-77560-7_9
   Eyerman S, 2006, INT SYM PERFORM ANAL, P48
   Eyerman S, 2006, ACM SIGPLAN NOTICES, V41, P175, DOI 10.1145/1168918.1168880
   Fisher R. A., 1946, Statistical methods for research workers.
   Free Software Foundation, 2021, GCC GNU COMP COLL
   Free Software Foundation, 2021, PLUG PASS GNU COMP C
   Free Software Foundation, 2021, PASS FIL COMP
   Garthwaite Alex, 2005, VEE 05, P24
   Georgakoudis G, 2017, SC'17: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/3126908.3126972
   Georges Andy, 2008, OOPSLA 08, P1
   github, 2023, TWITTER FINAGLE
   GitHub, 2021, JIKESRVM OPTIMIZATIO
   GitHub, 2019, GRAAL ISS 1541
   Google, 2021, OV TURBOFAN COMP
   Google, 2022, TURBOFAN
   Graham S. L., 1982, SIGPLAN Notices, V17, P120, DOI 10.1145/872726.806987
   Grcevski Nikola, 2004, VM 04, P1
   Guerraoui R., 2007, Operating Systems Review, V41, P315, DOI 10.1145/1272998.1273029
   Hazimeh A, 2020, P ACM MEAS ANAL COMP, V4, DOI [10.1145/3428334, 10.1145/3410220.3456276]
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   Holzle Urs, 1993, OOPSLA ECOOP 93 WORK, P1
   JikesT RVM project, 2021, PROFILING APPL JIKES
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Karkhanis TS, 2004, CONF PROC INT SYMP C, P338
   Khan TA, 2020, 2020 53RD ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO 2020), P146, DOI 10.1109/MICRO50266.2020.00024
   Kotzmann T, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1369396.1370017
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lea Doug, 2000, JAVA, P36
   Lehr Jan-Patrick, 2016, IWOMP 16, P2187
   Leopoldseder D., 2018, P 15 INT C MANAGED L, DOI 10.1145/3237009.3237013
   Leopoldseder D, 2018, INT SYM CODE GENER, P126, DOI 10.1145/3168811
   Leopoldseder D, 2018, PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON VIRTUAL MACHINES AND INTERMEDIATE LANGUAGES (VMIL '18), P26, DOI 10.1145/3281287.3281290
   LLVM Project, 2021, LLVMS ANAL TRANSFORM
   LLVM Project, 2018, WRITING LLVM PASS
   MALONY AD, 1992, IEEE T PARALL DISTR, V3, P433, DOI 10.1109/71.149962
   Mastrangelo L, 2015, ACM SIGPLAN NOTICES, V50, P695, DOI [10.1145/2814270.2814313, 10.1145/2858965.2814313]
   Mosaner Raphael, 2020, SPLASH Companion 2020: Companion Proceedings of the 2020 ACM SIGPLAN International Conference on Systems, Programming, Languages, and Applications: Software for Humanity, P4, DOI 10.1145/3426430.3429451
   Mossenbock H., 2013, P AS PAC PROGR LANG
   Mytkowicz T., 2007, PAR DISTR PROC S 200, P1
   Niessen Tobias, 2020, CASCON 20, P163
   Odersky Martin, 2009, LIPICS, P427
   Ogata K, 2006, ACM SIGPLAN NOTICES, V41, P241, DOI 10.1145/1167515.1167493
   Oracle, 2022, JAV PLATF STAND ED J
   Oracle, 2022, ID GRAPH VIS
   Oracle, 2022, JVMCI JDK 8 REP GITH
   Oracle, 2022, OR DEV STUD
   Oracle, 2022, GRAALVM REP GITHUB
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Papadakis O, 2020, MPLR '20: PROCEEDINGS OF THE 17TH INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES, P80, DOI 10.1145/3426182.3426189
   Preuss Adam, 2021, IMPLEMENTATION PATH
   Prokopec A, 2012, ACM SIGPLAN NOTICES, V47, P151, DOI 10.1145/2370036.2145836
   Prokopec A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P31, DOI 10.1145/3314221.3314637
   Prokopec A, 2018, LECT NOTES COMPUT SC, V11014, P575, DOI 10.1007/978-3-319-96983-1_41
   Prokopec A, 2019, INT SYM CODE GENER, P164, DOI [10.1109/CGO.2019.8661171, 10.5281/zenodo.2328430]
   Prokopec A, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P29, DOI 10.1145/3136000.3136002
   Prokopec A, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!'17), P104, DOI 10.1145/3133850.3133865
   Prokopec A, 2018, ACM SIGPLAN NOTICES, V53, P137, DOI 10.1145/3200691.3178498
   Prokopec A, 2016, PROCEEDINGS OF THE 6TH INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'16), P41, DOI 10.1145/3001886.3001891
   Prokopec A, 2011, LECT NOTES COMPUT SC, V6853, P136, DOI 10.1007/978-3-642-23397-5_14
   Prokopec Aleksandar, 2013, Languages and Compilers for Parallel Computing, P156, DOI DOI 10.1007/978-3-642-36036-7_11
   Prokopec Aleksandar., 2015, 2015 ACM INT S NEW I, P171, DOI DOI 10.1145/2814228.2814245
   Prokopec Aleksandar, 2019, SPLASH COMPANION 19, P11
   Prokopec Aleksandar, 2017, ARXIV EPRINTS
   Rosà A, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3338497
   Rosà A, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P104, DOI 10.1145/3136040.3136061
   Rosà A, 2018, INT SYM CODE GENER, P27, DOI 10.1145/3168828
   Rosà A, 2018, J VISUAL LANG COMPUT, V49, P29, DOI 10.1016/j.jvlc.2018.10.007
   Rosales Eduardo, 2023, ART SCI ENG PROGRAM, V7, P1
   Rose John, 2011, JAVA ENHANCEMENT PRO
   Russell K, 2006, ACM SIGPLAN NOTICES, V41, P263, DOI 10.1145/1167515.1167496
   Schardl TB, 2017, P ACM MEAS ANAL COMP, V1, DOI 10.1145/3154502
   SCHEIFLER RW, 1977, COMMUN ACM, V20, P647, DOI 10.1145/359810.359830
   Serebryany K., 2011, RV, P110, DOI [10.1007/978-3-642-29860-8_9, 10.1007/, DOI 10.1007/978-3-642-29860-8_9]
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, WBIA'09, P62, DOI DOI 10.1145/1791194.1791203
   Serebryany Konstantin, 2012, P 2012 USENIX C ANN, P28, DOI DOI 10.5555/2342821.2342849
   Sevcik Jaroslav, 2016, TURBOFAN IR
   Simon D, 2015, ACM T ARCHIT CODE OP, V12, DOI 10.1145/2764907
   Sipek M, 2020, 2020 43RD INTERNATIONAL CONVENTION ON INFORMATION, COMMUNICATION AND ELECTRONIC TECHNOLOGY (MIPRO 2020), P1746, DOI 10.23919/MIPRO48935.2020.9245290
   Stadler L., 2013, P 7 ACM WORKSH VIRT, P1, DOI [10.1145/2542142.2542143, DOI 10.1145/2542142.2542143]
   Stadler Lukas, 2013, P 4 WORKSHOP SCALA, P1, DOI [10.1145/2489837.2489846, DOI 10.1145/2489837.2489846]
   Stadler Lukas, 2014, P ANN IEEE ACM INT S, P165, DOI DOI 10.1145/2544137.2544157
   Taha TM, 2008, IEEE T COMPUT, V57, P389, DOI 10.1109/TC.2007.70817
   Tallent NR, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P441, DOI 10.1145/1542476.1542526
   Tschuter Ronny, 2017, LLVM HPC 17
   UNGAR D, 1984, SIGPLAN NOTICES, V19, P157
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Weingarten Matthew Edwin, 2022, VMIL 2022: Proceedings of the 14th ACM SIGPLAN International Workshop on Virtual Machines and Intermediate Languages, P13, DOI 10.1145/3563838.3567677
   Wimmer C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360610
   Würthinger T, 2008, LECT NOTES COMPUT SC, V4959, P193
   Wurthinger T., 2014, 13 INT C MODULARITY, P3, DOI DOI 10.1145/2584469.2584663
   Zaharia M, 2016, COMMUN ACM, V59, P56, DOI 10.1145/2934664
   Zhao P, 2004, LECT NOTES COMPUT SC, V2958, P405, DOI 10.1007/978-3-540-24644-2_26
   Zheng Y., 2017, TRANSPORTATION RES B, P1
   Zheng YD, 2015, ACM SIGPLAN NOTICES, V50, P433, DOI [10.1145/2858965.2814281, 10.1145/2814270.2814281]
   Zheng Yudi, 2017, ECOOP 17, V74
NR 127
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2023
VL 45
IS 2
AR 10
DI 10.1145/3591473
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M2WV9
UT WOS:001028843500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Haslbeck, MPL
   Lammich, P
AF Haslbeck, Maximilian P. L.
   Lammich, Peter
TI For a Few Dollars More: Verified Fine-Grained Algorithm Analysis Down to
   LLVM
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithm analysis; program verification; refinement; Isabelle/HOL
AB We present a framework to verify both, functional correctness and (amortized) worst-case complexity of practically efficient algorithms. We implemented a stepwise refinement approach, using the novel concept of resource currencies to naturally structure the resource analysis along the refinement chain, and allow a fine-grained analysis of operation counts. Our framework targets the LLVM intermediate representation. We extend its semantics from earlier work with a cost model. As case studies, we verify the amortized constant time push operation on dynamic arrays and the O(n log n) introsort algorithm, and refine them down to efficient LLVM implementations. Our sorting algorithm performs on par with the state-of-the-art implementation found in the GNU C++ Library, and provably satisfies the complexity required by the C++ standard.
C1 [Haslbeck, Maximilian P. L.] Tech Univ Munich, Arcisstr 21, D-80333 Munich, Germany.
   [Lammich, Peter] Univ Twente, Drienerlolaan 5, NL-7522 NB Enschede, Netherlands.
C3 Technical University of Munich; University of Twente
RP Haslbeck, MPL (corresponding author), Tech Univ Munich, Arcisstr 21, D-80333 Munich, Germany.
EM haslbema@in.tum.de; p.lammich@utwente.nl
OI Haslbeck, Maximilian P. L./0000-0003-4306-869X
FU DFG Koselleck grant [NI 491/16-1]; DFG [LA 3292/1]
FX This work was supported by the DFG Koselleck grant NI 491/16-1
   "Verifizierte Algorithmenanalyse" and the DFG grant LA 3292/1
   "Verifizierte Model Checker".
CR Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Casas Adrian Lowenberg, 2019, THESIS TU MUNICH
   Charguéraud A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408998
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Charguéraud A, 2015, LECT NOTES COMPUT SC, V9236, P137, DOI 10.1007/978-3-319-22102-1_9
   cppreference, C STAND LIB SPEC SOR
   DIJKSTRA EW, 1976, SERIES AUTOMATIC COM
   GNU C++ Library, GNU C LIB
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   Gueneau A., 2019, THESIS INRIA PARIS F
   Gueneau Armael, 2019, SCHLOSS DAGSTUHL LEI
   Haslbeck M.P.L., 2019, SCHLOSS DAGSTUHL LEI, V141, DOI DOI 10.4230/LIPICS.ITP
   Haslbeck MPL, 2021, LECT NOTES COMPUT SC, V12648, P292, DOI 10.1007/978-3-030-72019-3_11
   Hoare C.A.R., 1961, Communications of the ACM, V4, P321, DOI [DOI 10.1145/366622.366647, DOI 10.1145/366622.366644]
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Krauss A, 2010, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.43.1
   Lammich Peter, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P166, DOI 10.1007/978-3-642-32347-8_12
   Lammich P., 2012, ARCH FORMAL PROOFS
   Lammich P., 2019, ITP, P22, DOI DOI 10.4230/LIPICS.ITP.2019.22
   Lammich P, 2020, LECT NOTES COMPUT SC, V12167, P307, DOI 10.1007/978-3-030-51054-1_18
   Lammich P, 2019, J AUTOM REASONING, V62, P481, DOI 10.1007/s10817-017-9437-1
   Lammich P, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P27, DOI 10.1145/2854065.2854067
   Lammich P, 2015, LECT NOTES COMPUT SC, V9236, P253, DOI 10.1007/978-3-319-22102-1_17
   libc++, LIBC C STAND LIB
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Musser DR, 1997, SOFTWARE PRACT EXPER, V27, P983, DOI 10.1002/(SICI)1097-024X(199708)27:8<983::AID-SPE117>3.0.CO;2-#
   Nipkow T, 2020, LECT NOTES COMPUT SC, V12302, P25, DOI 10.1007/978-3-030-59152-6_2
   Rajani V, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434308
   Rajani Vineet, 2020, THESIS SAARLAND U SA
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wang P, 2017, P ACM PROGRAM LANG, V1, P79
   Zhan BH, 2018, LECT NOTES ARTIF INT, V10900, P532, DOI 10.1007/978-3-319-94205-6_35
NR 37
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2022
VL 44
IS 3
AR 14
DI 10.1145/3486169
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3V9XX
UT WOS:000842012200002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Li, Y
   Tan, T
   Moller, A
   Smaragdakis, Y
AF Li, Yue
   Tan, Tian
   Moller, Anders
   Smaragdakis, Yannis
TI A Principled Approach to Selective Context Sensitivity for Pointer
   Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Static analysis; points-to analysis; Java
ID TO ANALYSIS; PRECISE
AB Context sensitivity is an essential technique for ensuring high precision in static analyses. It has been observed that applying context sensitivity partially, only on a select subset of the methods, can improve the balance between analysis precision and speed. However, existing techniques are based on heuristics that do not provide much insight into what characterizes this method subset. In this work, we present a more principled approach for identifying precision-critical methods, based on general patterns of value flows that explain where most of the imprecision arises in context-insensitive pointer analysis. Using this theoretical foundation, we present an efficient algorithm, ZIPPER, to recognize these flow patterns in a given program and employ context sensitivity accordingly. We also present a variant, ZIPPERe, that additionally takes into account which methods are disproportionally costly to analyze with context sensitivity.
   Our experimental results on standard benchmark and real-world Java programs show that ZIPPER preserves effectively all of the precision (98.8%) of a highly precise conventional context-sensitive pointer analysis (2-object-sensitive with a context-sensitive heap, 2obj for short), with a substantial speedup (on average, 3.4x and up to 9.4x), and that ZIPPERe preserves 94.7% of the precision of 2obj. with an order-of-magnitude speedup (on average, 25.5x and up to 88x). In addition, for 10 programs that cannot be analyzed by 2obj within a three-hour time limit, on average ZIPPERe can guide 2obj to finish analyzing them in less than 11 minutes with high precision compared to context-insensitive and introspective context-sensitive analyses.
C1 [Li, Yue; Tan, Tian] Nanjing Univ, Bldg Comp Sci & Technol, Off 536,163 Xianlin Ave, Nanjing 210023, Peoples R China.
   [Li, Yue; Tan, Tian] Aarhus Univ, Aarhus, Denmark.
   [Moller, Anders] Aarhus Univ, Dept Comp Sci, Off Turing 224,IT Pk,Aabogade 34, DK-8200 Aarhus N, Denmark.
   [Smaragdakis, Yannis] Univ Athens, Dept Informat, Ilisia 15784, Greece.
C3 Nanjing University; Aarhus University; Aarhus University; National &
   Kapodistrian University of Athens
RP Tan, T (corresponding author), Nanjing Univ, Bldg Comp Sci & Technol, Off 536,163 Xianlin Ave, Nanjing 210023, Peoples R China.
EM yueli@nju.edu.cn; tiantan@nju.edu.cn; amoeller@cs.au.dk;
   smaragd@di.uoa.gr
RI Möller, Andrea/GNP-5183-2022; Smaragdakis, Yannis/AAM-2851-2021
OI Möller, Andrea/0000-0002-2345-1299; Moller, Anders/0000-0003-1333-2314
FU National Key RD Program [2017YFB1001801]; National Natural Science
   Foundation of China [61690204]; European Research Council (ERC) under
   the FP7 and Horizon 2020 research and innovation programs [307334,
   790340, 647544]; Collaborative Innovation Center of Novel Software
   Technology and Industrialization, Jiangsu, China; European Research
   Council (ERC) [790340] Funding Source: European Research Council (ERC)
FX This work was supported in part by National Key R&D Program (Grant
   #2017YFB1001801) and National Natural Science Foundation (Grant
   #61690204) of China, and by the European Research Council (ERC) under
   the FP7 and Horizon 2020 research and innovation programs (grant
   agreements 307334, 790340, and 647544). The authors would also like to
   thank the support from the Collaborative Innovation Center of Novel
   Software Technology and Industrialization, Jiangsu, China.
CR [Anonymous], 1994, Program analysis and specialization for the C programming language
   [Anonymous], 1991, Ph.D. dissertation
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Chandra S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1542476.1542517
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Gordon MI, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23089
   Grech N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133926
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13
   Hind M., 2001, SIGPLAN Notices, P54
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeon M, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293607
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kanvar V, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2931098
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Li L, 2011, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON COMPUTER SCIENCE IN SPORT (IACSS2011), P343
   Li Y., 2016, INT J AUTOM COMPUT, V56, P1, DOI DOI 10.4230/LIPICS.EC00P.2016.15
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Li Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P129, DOI 10.1145/3236024.3236041
   Livshits B., 2005, P 14 USENIX SEC S US
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Milanova A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/566171.566174
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Naik M, 2009, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2009.5070538
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Pradel M, 2012, PROC INT CONF SOFTW, P925, DOI 10.1109/ICSE.2012.6227127
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Shang Lei, 2012, P 10 INT S CODE GENE, P264
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Shiyi WeiB.G. R., 2015, 29 EUROPEAN C OBJECT, P712
   SMARAGDAKIS Y, 2011, P 38 ANN ACM SIGPLAN, V38, P11, DOI DOI 10.1145/1926385.1926390
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Smaragdakis Y, 2013, ACM SIGPLAN NOTICES, V48, P253, DOI [10.1145/2509136.2509524, 10.1145/2544173.2509524]
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P112, DOI 10.1145/1250734.1250748
   Sui YL, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P460, DOI 10.1145/2950290.2950296
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Thakur M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P135, DOI 10.1145/3302516.3307359
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   Tonella Paolo, 2005, REVERSE ENG OBJECT O, DOI [10.1007/b102522, DOI 10.1007/B102522]
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Wang K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P389, DOI 10.1145/3037697.3037744
   Whaley J., 2004, SIGPLAN Notices, V39, P131, DOI 10.1145/996893.996859
   Xu GQ, 2008, PROCEEDINGS OF THE 2ND INTERNATIONAL CONFERENCE ON ASIAN-EUROPEAN ENVIRONMENTAL TECHNOLOGY AND KNOWLEDGE TRANSFER, P229
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
NR 54
TC 20
Z9 20
U1 0
U2 9
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2020
VL 42
IS 2
AR 10
DI 10.1145/3381915
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OJ1LU
UT WOS:000583729800005
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Facchinetti, L
   Palmer, Z
   Smith, S
AF Facchinetti, Leandro
   Palmer, Zachary
   Smith, Scott
TI Higher-order Demand-driven Program Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Functional programming; program analysis; polynomial-time;
   demand-driven; pushdown system; flow-sensitive; context-sensitive
ID FLOW; INFERENCE
AB Developing accurate and efficient program analyses for languages with higher-order functions is known to be difficult. Here we define a new higher-order program analysis, Demand-Driven Program Analysis (DDPA), which extends well-known demand-driven lookup techniques found in first-order program analyses to higher-order programs.
   This task presents several unique challenges to obtain good accuracy, including the need for a new method for demand-driven lookup of non-local variable values. DDPA is flow- and context-sensitive and provably polynomial-time. To efficiently implement DDPA, we develop a novel pushdown automaton metaprogramming framework, the Pushdown Reachability automaton. The analysis is formalized and proved sound, and an implementation is described.
C1 [Facchinetti, Leandro; Smith, Scott] Johns Hopkins Univ, 160 Malone Hall,3400 N Charles St, Baltimore, MD 21218 USA.
   [Palmer, Zachary] Swarthmore Coll, 500 Coll Ave, Swarthmore, PA 19081 USA.
C3 Johns Hopkins University; Swarthmore College
RP Facchinetti, L (corresponding author), Johns Hopkins Univ, 160 Malone Hall,3400 N Charles St, Baltimore, MD 21218 USA.
OI Palmer, Zachary/0000-0003-2286-1189
FU CAPES Fellowship [13477/13-7]
FX Leandro Facchinetti is supported by a CAPES Fellowship, process number
   13477/13-7.
CR Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   Aiken A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P31, DOI 10.1145/165180.165188
   ALUR R, 2004, P 36 ANN ACM S THEOR
   Alur Rajeev, 2012, HDB MODEL CHECKING, P541
   [Anonymous], 1991, Ph.D. dissertation
   Appel A., 2007, COMPILING CONTINUATI
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Castano Jose, 2004, THESIS
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dubé D, 2002, ACM SIGPLAN NOTICES, V37, P84, DOI 10.1145/583852.581487
   Duesterwald E, 1997, ACM T PROGR LANG SYS, V19, P992, DOI 10.1145/267959.269970
   Earl C, 2012, ACM SIGPLAN NOTICES, V47, P177, DOI 10.1145/2398856.2364576
   Earl Christopher, 2010, P WORKSH SCHEM FUNCT
   Facchinetti L, 2017, LECT NOTES COMPUT SC, V10422, P106, DOI 10.1007/978-3-319-66706-5_6
   Fähndrich M, 2000, ACM SIGPLAN NOTICES, V35, P253, DOI 10.1145/358438.349332
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Felleisen Matthias, 1986, P 3 WORK C FORM DESC
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Germane K, 2017, ACM SIGPLAN NOTICES, V52, P19, DOI 10.1145/3093333.3009899
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P691, DOI 10.1145/2914770.2837631
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Horwitz S., 1995, SIGSOFT Software Engineering Notes, V20, P104, DOI 10.1145/222132.222146
   Johnson B, 2013, ENVISIONING ARCHITECTURE: DESIGN, EVALUATION, COMMUNICATION, P443
   Johnson JI, 2014, J FUNCT PROGRAM, V24, P218, DOI 10.1017/S0956796814000100
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   LAMPING J, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P16, DOI 10.1145/96709.96711
   Melski D., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P74, DOI 10.1145/258993.259006
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   Might M., 2007, THESIS
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   Might M, 2010, LECT NOTES COMPUT SC, V6337, P407, DOI 10.1007/978-3-642-15769-1_25
   Might M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P305, DOI 10.1145/1806596.1806631
   Might Matthew, 2006, 33 ACM S PRINC PROGR, P127, DOI [10.1145/1111037.1111049, DOI 10.1145/1111037.1111049]
   Napoli Margherita, 2011, P INT C CONC THEOR C
   Nielson F., 1999, Principles of Program Analysis
   Palmer Zachary, 2016, LEIBNIZ INT P INFORM, V56, DOI 10.4230/LIPIcs.ECOOP.2016.19
   Rehof J., 2001, POPL, P54, DOI 10.1145/373243.360208
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Reps Thomas, 2007, P 27 INT C FDN SOFTW
   Reps Thomas., 1995, Demand interprocedural program analysis using logic databases, P163
   Saha Diptikalyan, 2005, P 7 ACM SIGPLAN INT, P117, DOI DOI 10.1145/1069774.1069785
   Siskind Jeffrey Mark, 1999, TECHNICAL REPORT
   Smaragdakis Y, 2011, LECT NOTES COMPUT SC, V6702, P245
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Spoon SA, 2004, LECT NOTES COMPUT SC, V3086, P51
   Van Horn D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P85
   Van Horn D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P275
   VANDEGRIFT MW, 1995, PROCEEDINGS OF THE 1995 IEEE INTERNATIONAL SYMPOSIUM ON INTELLIGENT CONTROL, P395, DOI 10.1109/ISIC.1995.525089
   Vardoulakis D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P69
   Vardoulakis D, 2010, LECT NOTES COMPUT SC, V6012, P570, DOI 10.1007/978-3-642-11957-6_30
   Wadsworth C. P., 1971, THESIS
   Weeks S., 2006, P ACM WORKSHOP ML 20, P1, DOI [10.1145/1159876.1159877, DOI 10.1145/1159876.1159877]
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
   Zhang X, 2013, ACM SIGPLAN NOTICES, V48, P365, DOI 10.1145/2499370.2462185
NR 56
TC 5
Z9 5
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2019
VL 41
IS 3
AR 14
DI 10.1145/3310340
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JU2BC
UT WOS:000501479500001
OA Green Published
DA 2024-07-18
ER

PT J
AU Grove, D
   Hamouda, SS
   Herta, B
   Iyengar, A
   Kawachiya, K
   Milthorpe, J
   Saraswat, V
   Shinnar, A
   Takeuchi, M
   Tardieu, O
AF Grove, David
   Hamouda, Sara S.
   Herta, Benjamin
   Iyengar, Arun
   Kawachiya, Kiyokuni
   Milthorpe, Josh
   Saraswat, Vijay
   Shinnar, Avraham
   Takeuchi, Mikio
   Tardieu, Olivier
TI Failure Recovery in Resilient X10
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE X10; APGAS
AB Cloud computing has made the resources needed to execute large-scale in-memory distributed computations widely available. Specialized programming models, e.g., MapReduce, have emerged to offer transparent fault tolerance and fault recovery for specific computational patterns, but they sacrifice generality. In contrast, the Resilient X10 programming language adds failure containment and failure awareness to a general purpose, distributed programming language. A Resilient X10 application spans over a number of places. Its formal semantics precisely specify how it continues executing after a place failure. Thanks to failure awareness, the X10 programmer can in principle build redundancy into an application to recover from failures. In practice, however, correctness is elusive, as redundancy and recovery are often complex programming tasks.
   This article further develops Resilient X10 to shift the focus from failure awareness to failure recovery, from both a theoretical and a practical standpoint. We rigorously define the distinction between recoverable and catastrophic failures. We revisit the happens-before Invariance principle and its implementation. We shift most of the burden of redundancy and recovery from the programmer to the runtime system and standard library. We make it easy to protect critical data from failure using resilient stores and harness elasticity-dynamic place creation-to persist not just the data but also its spatial distribution.
   We demonstrate the flexibility and practical usefulness of Resilient X10 by building several representative high-performance in-memory parallel application kernels and frameworks. These codes are 10x to 25x larger than previous Resilient X10 benchmarks. For each application kernel, the average runtime overhead of resiliency is less than 7%. By comparing application kernels written in the Resilient X10 and Spark programming models, we demonstrate that Resilient X10's more general programming model can enable significantly better application performance for resilient in-memory distributed computations.
C1 [Grove, David; Herta, Benjamin; Iyengar, Arun; Shinnar, Avraham; Tardieu, Olivier] IBM TJ Watson Res Ctr, 1101 Kitchawan Rd, Yorktown Hts, NY 10598 USA.
   [Hamouda, Sara S.] Australian Natl Univ, Canberra, ACT, Australia.
   [Hamouda, Sara S.] Sorbonne Univ, Paris, France.
   [Hamouda, Sara S.] INRIA Paris, 4 Pl Jussieu, Paris, France.
   [Kawachiya, Kiyokuni; Takeuchi, Mikio] IBM Res Tokyo, Chuo Ku, 19-21 Nihonbashi Hakozaki Cho, Tokyo 1038510, Japan.
   [Milthorpe, Josh] Australian Natl Univ, Res Sch Comp Sci, Canberra, ACT 2601, Australia.
   [Saraswat, Vijay] Goldman Sachs, 200 West St, New York, NY 10282 USA.
C3 International Business Machines (IBM); Australian National University;
   Sorbonne Universite; Sorbonne Universite; International Business
   Machines (IBM); Australian National University
RP Grove, D (corresponding author), IBM TJ Watson Res Ctr, 1101 Kitchawan Rd, Yorktown Hts, NY 10598 USA.
EM groved@us.ibm.com; sara.hamouda@inria.fr; bherta@us.ibm.com;
   aruni@us.ibm.com; kawatiya@jp.ibm.com; josh.milthorpe@anu.edu.au;
   vijay@saraswat.org; shinnar@us.ibm.com; mtake@jp.ibm.com;
   tardieu@us.ibm.com
OI Milthorpe, Josh/0000-0002-3588-9896; Hamouda, Sara/0000-0001-7300-9565;
   Grove, David/0000-0002-3265-7125
FU U.S. Air Force Office of Scientific Research [FA875013-C-0052]; U.S.
   Department of Energy, Office of Science, Advanced Scientific Computing
   Research [DE-SC0008923]
FX The Resilient X10 research was funded in part by the U.S. Air Force
   Office of Scientific Research under Contract No. FA875013-C-0052. Work
   on the LULESH application was supported by the U.S. Department of
   Energy, Office of Science, Advanced Scientific Computing Research under
   Award No. DE-SC0008923.
CR Acun B, 2014, INT CONF HIGH PERFOR, P647, DOI 10.1109/SC.2014.58
   Akidau T, 2013, PROC VLDB ENDOW, V6, P1033, DOI 10.14778/2536222.2536229
   Ali Md Mohsin, 2014, 2014 IEEE 28th International Parallel & Distributed Processing Symposium Workshops (IPDPSW). Proceedings, P1169, DOI 10.1109/IPDPSW.2014.132
   [Anonymous], 2016, TECHNICAL REPORT
   [Anonymous], 2012, EUR MPI US GROUP M
   [Anonymous], 2009, Hadoop: The definitive guide
   [Anonymous], ACM T COMPUTER SYSTE
   [Anonymous], 2013, LLNLTR641973
   Armbrust M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1383, DOI 10.1145/2723372.2742797
   Bosilca G, 2009, J PARALLEL DISTR COM, V69, P410, DOI 10.1016/j.jpdc.2008.12.002
   Bu YY, 2010, PROC VLDB ENDOW, V3, P285
   Cave V., 2011, P 9 INT C PRINCIPLES, P51, DOI [10.1145/2093157.2093165, DOI 10.1145/2093157.2093165]
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Chien A, 2015, PROCEDIA COMPUT SCI, V51, P29, DOI 10.1016/j.procs.2015.05.187
   Chuang W.-C., 2013, Proceedings of the 4th Annual Symposium on Cloud Computing, P21, DOI DOI 10.1145/2523616.2523617
   Crafa S, 2014, LECT NOTES COMPUT SC, V8586, P670
   Cunningham D, 2014, ACM SIGPLAN NOTICES, V49, P67, DOI [10.1145/2555243.2555248, 10.1145/2692916.2555248]
   Cutting Doug, 2007, P OR OP SOFTW CONV
   Dean Jeffrey, 2004, OSDI 04, P10
   Elnozahy EN, 2002, ACM COMPUT SURV, V34, P375, DOI 10.1145/568522.568525
   Fohry C, 2016, INT CONF PARA PROC, P200, DOI 10.1109/ICPPW.2016.40
   Fohry Claudia, 2015, P ACM SIGPLAN X10 WO, P27, DOI [10.1145/2771774, DOI 10.1145/2771774]
   Geller A., 2011, Proceedings of the 2nd ACM Symposium on Cloud Computing, ser. SOCC'11, Cascais, P16, DOI [DOI 10.1145/2038916.2038932, 10.1145/2038916.2038932]
   Guermouche A., 2011, Proceedings of the 25th IEEE International Parallel & Distributed Processing Symposium (IPDPS 2011), P989, DOI 10.1109/IPDPS.2011.95
   Hamouda S.S., 2016, P ACM SIGPLAN WORKSH, P18, DOI DOI 10.1145/2931028.2931030
   Hamouda SS, 2015, 2015 IEEE 29TH INTERNATIONAL PARALLEL AND DISTRIBUTED PROCESSING SYMPOSIUM WORKSHOPS, P970, DOI 10.1109/IPDPSW.2015.14
   Hunt S, 2010, MEDICATION MANAGEMENT IN OLDER ADULTS, P11, DOI 10.1007/978-1-60327-457-9_2
   Kabiljo Maja, 2016, TECHNICAL REPORT
   Kale Laxmikant V., 2011, TECHNICAL REPORT
   Kumar V., 2014, P 8 INT C PARTITIONE, P5
   Lifflander J, 2014, IEEE INT C CL COMP, P19, DOI 10.1109/CLUSTER.2014.6968739
   LLOYD SP, 1982, IEEE T INFORM THEORY, V28, P129, DOI 10.1109/TIT.1982.1056489
   Low Y, 2012, PROC VLDB ENDOW, V5, P716, DOI 10.14778/2212351.2212354
   Malewicz Grzegorz, 2010, P ACM SIGMOD INT C M, P135, DOI [DOI 10.1145/1807167.1807184, 10.1145/1807167.1807184]
   Milthorpe Josh, 2015, RC25555 IBM RES
   Olivier S, 2007, LECT NOTES COMPUT SC, V4382, P235, DOI 10.1007/978-3-540-72521-3_18
   Panagiotopoulou K, 2016, IEEE SYM PARA DISTR, P1586, DOI 10.1109/IPDPSW.2016.102
   Richards JT, 2014, COMMUN ACM, V57, P60, DOI 10.1145/2669484
   Rinard Martin, 2006, Proceedings of the 20th annual international conference on Supercomputing, P324, DOI 10.1145/1183401.1183447
   Saraswat V, 2011, ACM SIGPLAN NOTICES, V46, P201, DOI 10.1145/2038037.1941582
   Saraswat Vijay., 2010, The Asynchronous Partitioned Global Address Space Model
   Sato K, 2012, P INT C HIGH PERF CO
   Shinnar Avraham, 2012, P VLDB END VLDB 12
   Tardieu O, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2692916.2555245, 10.1145/10.1145/2555243.2555245]
   Vavilapalli V.K., P 4 ANN S CLOUD COMP
   Vinoski S, 2007, IEEE INTERNET COMPUT, V11, P79, DOI 10.1109/MIC.2007.132
   Xin ReynoldS., 2014, GraphX: Unifying Data-Parallel and Graph-Parallel Analytics. Computing Research Repository
   Yang CR, 2013, INT PARALL DISTRIB P, P1321, DOI 10.1109/IPDPS.2013.17
   Yili Zheng, 2014, 2014 IEEE International Parallel & Distributed Processing Symposium (IPDPS), P1105, DOI 10.1109/IPDPS.2014.115
   YOUNG JW, 1974, COMMUN ACM, V17, P530, DOI 10.1145/361147.361115
   Zaharia M., 2012, 9 USENIX S NETWORKED
   Zhang W., 2014, PPAA 2014 P 2014 WOR, P31, DOI DOI 10.1145/2567634.2567639
   Zheng L, 2012, IEEE INT CONF VLSI, P1, DOI 10.1109/VLSI-SoC.2012.6378996
NR 53
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2019
VL 41
IS 3
AR 15
DI 10.1145/3332372
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JU2BC
UT WOS:000501479500002
DA 2024-07-18
ER

PT J
AU Chen, HY
   David, C
   Kroening, D
   Schrammel, P
   Wachter, B
AF Chen, Hong-Yi
   David, Cristina
   Kroening, Daniel
   Schrammel, Peter
   Wachter, Bjoern
TI Bit-Precise Procedure-Modular Termination Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Termination analysis; interprocedural analysis; bit-precise analysis;
   templates
ID PROGRAM TERMINATION; LOGIC; CHECKING; PROOFS; LOOPS
AB Non-termination is the root cause of a variety of program bugs, such as hanging programs and denial-of-service vulnerabilities. This makes an automated analysis that can prove the absence of such bugs highly desirable. To scale termination checks to large systems, an interprocedural termination analysis seems essential. This is a largely unexplored area of research in termination analysis, where most effort has focussed on small but difficult single-procedure problems.
   We present a modular termination analysis for C programs using template-based interprocedural summarisation. Our analysis combines a context-sensitive, over-approximating forward analysis with the inference of under-approximating preconditions for termination. Bit-precise termination arguments are synthesised over lexicographic linear ranking function templates. Our experimental results show the advantage of interprocedural reasoning over monolithic analysis in terms of efficiency, while retaining comparable precision.
C1 [Chen, Hong-Yi; David, Cristina; Kroening, Daniel] Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
   [Schrammel, Peter] Univ Sussex, Sch Engn & Informat, Sussex House, Falmer Brighton BN1 9RH, E Sussex, England.
   [Wachter, Bjoern] SSW Trading GmbH, Oststeinbek, Germany.
   [David, Cristina] Univ Cambridge, Dept Comp Sci & Technol, William Gates Bldg,15 JJ Thomson Ave, Cambridge CB3 0FD, England.
   [Wachter, Bjoern] Univ Oxford Wolfson Coll, Oxford OX2 6UD, England.
C3 University of Oxford; University of Sussex; University of Cambridge;
   University of Oxford
RP Chen, HY (corresponding author), 86 HongQiangXiang St, Chengdu 610031, Sichuan, Peoples R China.
EM hongyichen00@gmail.com; cd652@cam.ac.uk; daniel.kroening@cs.ox.ac.uk;
   p.schrammel@sussex.ac.uk; bjoern.wachter@gmail.com
RI chen, hongyi/JCE-0620-2023; Schrammel, Peter/AAJ-9990-2021; zhang,
   xiaoyu/KEJ-0657-2024; chen, hongyi/HTS-1467-2023
OI Schrammel, Peter/0000-0002-5713-1381; Kroening,
   Daniel/0000-0002-6681-5283
FU EPSRC [EP/H017585/1]; VeTeSS: Verification and Testing to Support
   Functional Safety Standards, Artemis Joint Undertaking [295311, H2020
   FET OPEN 712689 SC2]; ERC project [280053]; EPSRC [EP/H017585/1] Funding
   Source: UKRI
FX This work is supported by EPSRC EP/H017585/1, by VeTeSS: Verification
   and Testing to Support Functional Safety Standards, Artemis Joint
   Undertaking 295311, H2020 FET OPEN 712689 SC<SUP>2</SUP>, and ERC
   project 280053 "CPROVER."
CR 2LS, 2016, 2LS STATIC ANAL VERI
   Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   Albert E, 2017, J AUTOM REASONING, V59, P47, DOI 10.1007/s10817-016-9400-6
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Alberta E, 2014, SCI COMPUT PROGRAM, V92, P2, DOI 10.1016/j.scico.2013.04.006
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   [Anonymous], 2009, COMM VULN EXP CVE
   Ben-Amram AM, 2014, J ACM, V61, DOI 10.1145/2629488
   Ben-Amram AM, 2013, ACM SIGPLAN NOTICES, V48, P51, DOI 10.1145/2480359.2429078
   Berdine J, 2006, LECT NOTES COMPUT SC, V4144, P386, DOI 10.1007/11817963_35
   Beyer Dirk, 2016, LNCS, V9636
   Bozga M, 2012, LECT NOTES COMPUT SC, V7214, P252, DOI 10.1007/978-3-642-28756-5_18
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3385, P113
   Brain M, 2015, LECT NOTES COMPUT SC, V9291, P145, DOI 10.1007/978-3-662-48288-9_9
   Brockschmidt M, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2866575
   Chen H.-Y., 2014, International Conference on Tools and Algorithms for the Construction and Analysis of Systems, P156
   CHEN HY, 2015, AUTOMAT SOFTW ENG, P53, DOI DOI 10.1109/ASE.2015.10
   Clarke E., 2000, Computer Aided Verification, P154
   Cook B, 2008, LECT NOTES COMPUT SC, V5123, P328
   Cook B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P320, DOI 10.1145/1250734.1250771
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Cook B, 2010, LECT NOTES COMPUT SC, V6015, P236, DOI 10.1007/978-3-642-12002-2_19
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   CppInv, 2015, CPPINV TERM PROV
   David C, 2015, LECT NOTES COMPUT SC, V9032, P183, DOI 10.1007/978-3-662-46669-8_8
   Dor N, 2001, LECT NOTES COMPUT SC, V2126, P194
   Falke S, 2012, LECT NOTES COMPUT SC, V7152, P261, DOI 10.1007/978-3-642-27705-4_21
   Flores-Montoya Antonio, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P275, DOI 10.1007/978-3-319-12736-1_15
   FuncTion, 2015, FUNCTION TERM PROV
   Ganty Pierre, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P397, DOI 10.1007/978-3-642-39799-8_27
   Gawlitza T, 2007, LECT NOTES COMPUT SC, V4646, P23
   Genaim S, 2005, THEOR PRACT LOG PROG, V5, P75, DOI 10.1017/S1471068404002236
   Giesl J, 2017, J AUTOM REASONING, V58, P3, DOI 10.1007/s10817-016-9388-y
   Gonnord L, 2015, ACM SIGPLAN NOTICES, V50, P608, DOI [10.1145/2737924.2737976, 10.1145/2813885.2737976]
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Gulwani S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P281, DOI 10.1145/1375581.1375616
   Gupta A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P331, DOI 10.1145/1926385.1926424
   Gupta AK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P147, DOI 10.1145/1328438.1328459
   Harris WR, 2010, LECT NOTES COMPUT SC, V6337, P304, DOI 10.1007/978-3-642-15769-1_19
   Heizmann Matthias, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P365, DOI 10.1007/978-3-319-02444-8_26
   Heizmann M, 2016, LECT NOTES COMPUT SC, V9636, P950, DOI 10.1007/978-3-662-49674-9_68
   Heizmann M, 2014, LECT NOTES COMPUT SC, V8559, P797, DOI 10.1007/978-3-319-08867-9_53
   Hensel J, 2016, LECT NOTES COMPUT SC, V9763, P234, DOI 10.1007/978-3-319-41591-8_16
   Hong Yi Chen, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P334, DOI 10.1007/978-3-319-02444-8_24
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   King A, 2002, THEOR PRACT LOG PROG, V2, P517, DOI 10.1017/S1471068402001436
   KiTTeL/KoAT, 2016, KITTEL KOAT TERM PRO
   Knoop J, 2012, LECT NOTES COMPUT SC, V7180, P435, DOI 10.1007/978-3-642-28717-6_34
   Knoop Jens, 2011, INT ANDREI ERSHOV ME, P227
   Kroening D, 2010, LECT NOTES COMPUT SC, V6174, P89, DOI 10.1007/978-3-642-14295-6_9
   Kupriyanov A, 2014, LECT NOTES COMPUT SC, V8559, P814, DOI 10.1007/978-3-319-08867-9_54
   Le TC, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI [10.1145/2813885.2737993, 10.1145/2737924.2737993]
   Le TC, 2014, LECT NOTES COMPUT SC, V8829, P267, DOI 10.1007/978-3-319-11737-9_18
   Leike Jan, 2014, LNCS, V8413, P172
   LEMETAYER D, 1988, ACM T PROGR LANG SYS, V10, P248, DOI 10.1145/42190.42347
   Li Y, 2014, ACM SIGPLAN NOTICES, V49, P607, DOI 10.1145/2535838.2535857
   llvm2KITTeL, 2016, LLVM2KITTEL CONV
   Loopus, 2014, LOOP TERM PROV
   Magill S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P211, DOI 10.1145/1706299.1706326
   Manevich R, 2016, LECT NOTES COMPUT SC, V9779, P426, DOI 10.1007/978-3-319-41528-4_23
   Massé D, 2012, ELECTRON NOTES THEOR, V287, P77, DOI 10.1016/j.entcs.2012.09.008
   Massé D, 2014, LECT NOTES COMPUT SC, V8318, P453, DOI 10.1007/978-3-642-54013-4_25
   Maurica Fonenantsoa, 2016, P 31 ANN ACM S APPL, P1674, DOI [10.1145/2851613.2851834, DOI 10.1145/2851613.2851834]
   McMillan KL, 2008, LECT NOTES COMPUT SC, V4963, P413, DOI 10.1007/978-3-540-78800-3_31
   MESNARD F, 1996, P 1996 JOINT INT C S, P7
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Podelski A, 2005, LECT NOTES COMPUT SC, V3444, P94
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Podelski Andreas, 2007, LNCS, V4354
   Popeea C, 2012, LECT NOTES COMPUT SC, V7214, P237, DOI 10.1007/978-3-642-28756-5_17
   Ranzato F, 2008, LECT NOTES COMPUT SC, V4905, P248, DOI 10.1007/978-3-540-78163-9_22
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Roussel O., 2011, J SATISFIABILITY BOO, V7, P139
   Sankaranarayanan S, 2005, LECT NOTES COMPUT SC, V3385, P25
   Schrammel P, 2016, ELECTRON P THEOR COM, P29, DOI 10.4204/EPTCS.219.3
   Schrammel P, 2016, LECT NOTES COMPUT SC, V9636, P905, DOI [10.1007/978-3-662-49674-9_56, 10.1007/97-3-662-49674-9_56]
   SeaHorn, 2016, SEAHORN VER FRAM
   Sinn Moritz, 2014, P 26 INT C COMPUTER, DOI [10.1007/978-3-319-08867-9_50, DOI 10.1007/978-3-319-08867-9_50]
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   SV-COMP, 2016, COMP SOFTW VER SV CO
   T2, 2016, T2 TEMPORAL LOGIC PR
   TAN, 2014, TAN TERM PROV
   Urban C, 2017, COMPUT LANG SYST STR, V47, P77, DOI 10.1016/j.cl.2015.10.001
   Urban C, 2014, LECT NOTES COMPUT SC, V8723, P302, DOI 10.1007/978-3-319-10936-7_19
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Wonchan Lee, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P88, DOI 10.1007/978-3-642-31424-7_12
NR 91
TC 9
Z9 9
U1 0
U2 22
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2018
VL 40
IS 1
AR 1
DI 10.1145/3121136
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS6AZ
UT WOS:000419881600001
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Barthe, G
   Demange, D
   Pichardie, D
AF Barthe, Gilles
   Demange, Delphine
   Pichardie, David
TI Formal Verification of an SSA-Based Middle-End for CompCert
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Reliability; Verification; Single static assignment; compiler
   verification; mechanized proof
ID TRANSLATION VALIDATION; GENERATION; COMPILER; REPRESENTATION;
   CORRECTNESS; ALGORITHM
AB CompCert is a formally verified compiler that generates compact and efficient code for a large subset of the C language. However, CompCert foregoes using SSA, an intermediate representation employed by many compilers that enables writing simpler, faster optimizers. In fact, it has remained an open problem to verify formally an SSA-based compiler. We report on a formally verified, SSA-based middle-end for CompCert. In addition to providing a formally verified SSA-based middle-end, we address two problems raised by Leroy in [2009]: giving an intuitive formal semantics to SSA, and leveraging its global properties to reason locally about program optimizations.
C1 [Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Demange, Delphine] Univ Rennes 1, Inria, IRISA, Rennes, France.
   [Pichardie, David] ENS Rennes, Inria, IRISA, Rennes, France.
C3 IMDEA Software Institute; Universite de Rennes; Inria; Universite de
   Rennes; Inria; Ecole Normale Superieure de Rennes (ENS Rennes)
RP Demange, D (corresponding author), Univ Rennes 1, Inria, IRISA, Rennes, France.
EM delphine.demange@irisa.fr
OI BARTHE, Gilles/0000-0002-3853-1777
FU Madrid Regional project [S2009TIC-1465 PROMETIDOS]; French project ANR
   Verasco; FNRAE ASCERT; Bretagne Regional project CertLogS; 
   [TIN2009-14599 DESAFIOS 10]
FX This work was partially funded by Spanish project TIN2009-14599 DESAFIOS
   10, and Madrid Regional project S2009TIC-1465 PROMETIDOS, and French
   project ANR Verasco, FNRAE ASCERT and Bretagne Regional project
   CertLogS.
CR Alpern B., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/73560.73561
   [Anonymous], 1998, Modern Compiler Implementation in C
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   Aycock J, 2000, LECT NOTES COMPUT SC, V1781, P110
   Barthe G, 2012, LECT NOTES COMPUT SC, V7211, P47, DOI 10.1007/978-3-642-28869-2_3
   Blech JO, 2005, ELECTRON NOTES THEOR, V141, P33, DOI 10.1016/j.entcs.2005.02.042
   Boissinot B, 2009, INT SYM CODE GENER, P114, DOI 10.1109/CGO.2009.19
   Boissinot B, 2008, INT SYM CODE GENER, P35
   BRANDIS MM, 1994, ACM T PROGR LANG SYS, V16, P1684, DOI 10.1145/197320.197331
   Briggs P, 1997, SOFTWARE PRACT EXPER, V27, P701, DOI 10.1002/(SICI)1097-024X(199706)27:6<701::AID-SPE104>3.0.CO;2-0
   Briggs P, 1998, SOFTWARE PRACT EXPER, V28, P859, DOI 10.1002/(SICI)1097-024X(19980710)28:8<859::AID-SPE188>3.0.CO;2-8
   Brisk P., 2006, THESIS U CALIFORNIA
   Chlipala A, 2008, ACM SIGPLAN NOTICES, V43, P143, DOI 10.1145/1411203.1411226
   Chlipala A, 2010, ACM SIGPLAN NOTICES, V45, P93, DOI 10.1145/1707801.1706312
   Chow F, 1997, ACM SIGPLAN NOTICES, V32, P273, DOI 10.1145/258916.258940
   Cooper K.D., 2000, A Simple, Fast Dominance Algorithm
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Dargaye Z, 2007, LECT NOTES ARTIF INT, V4790, P211, DOI 10.1007/978-3-540-75560-9_17
   Hack S, 2006, LECT NOTES COMPUT SC, V3923, P247
   Jianzhou Zhao, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P27, DOI 10.1007/978-3-642-35308-6_6
   Knoop J, 1998, LECT NOTES COMPUT SC, V1383, P65
   Lengauer T., 1979, ACM T PROGR LANG SYS, V1, P121, DOI 10.1145/357062.357071
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Mansky W, 2010, LECT NOTES COMPUT SC, V6172, P371, DOI 10.1007/978-3-642-14052-5_26
   Matsuno Y., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P249, DOI 10.1145/1140335.1140365
   Menon VS, 2006, ACM SIGPLAN NOTICES, V41, P397, DOI 10.1145/1111320.1111072
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Rideau L, 2008, J AUTOM REASONING, V40, P307, DOI 10.1007/s10817-007-9096-8
   Samet Hanan, 1975, ARPA order no. 2494
   Schneider S., 2013, THESIS SAARLAND U
   Sreedhar VC, 1999, LECT NOTES COMPUT SC, V1694, P194
   Stepp Michael, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P737, DOI 10.1007/978-3-642-22110-1_59
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Tristan JB, 2011, ACM SIGPLAN NOTICES, V46, P295, DOI 10.1145/1993316.1993533
   Tristan JB, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P83, DOI 10.1145/1706299.1706311
   Tristan JB, 2009, ACM SIGPLAN NOTICES, V44, P316, DOI 10.1145/1543135.1542512
   Zhao JZ, 2013, ACM SIGPLAN NOTICES, V48, P175, DOI 10.1145/2499370.2462164
   Zhao JZ, 2012, ACM SIGPLAN NOTICES, V47, P427, DOI 10.1145/2103621.2103709
   Zhao Jianzhou, 2013, Ph. D. Dissertation
NR 40
TC 19
Z9 21
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2014
VL 36
IS 1
AR 4
DI 10.1145/2579080
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AD8TE
UT WOS:000333537700004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Lochbihler, A
AF Lochbihler, Andreas
TI Making the Java Memory Model Safe
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Data race freedom; Java memory model; operational
   semantics; type safety
ID OPERATIONAL SEMANTICS
AB This work presents a machine-checked formalisation of the Java memory model and connects it to an operational semantics for Java and Java bytecode. For the whole model, I prove the data race freedom guarantee and type safety. The model extends previous formalisations by dynamic memory allocation, thread spawns and joins, infinite executions, the wait-notify mechanism, and thread interruption, all of which interact in subtle ways with the memory model. The formalisation resulted in numerous clarifications of and fixes to the existing JMM specification.
C1 [Lochbihler, Andreas] Karlsruhe Inst Technol, D-76021 Karlsruhe, Germany.
   [Lochbihler, Andreas] Swiss Fed Inst Technol, Inst Informat Secur, CH-8092 Zurich, Switzerland.
C3 Helmholtz Association; Karlsruhe Institute of Technology; Swiss Federal
   Institutes of Technology Domain; ETH Zurich
RP Lochbihler, A (corresponding author), Karlsruhe Inst Technol, D-76021 Karlsruhe, Germany.
EM andreas.lochbihler@inf.ethz.ch
OI Lochbihler, Andreas/0000-0002-5851-494X
FU Deutsche Forschungsgemeinschaft [Sn11/10-1, Sn11/10-2]
FX This work has been partially supported by the Deutsche
   Forschungsgemeinschaft under grants Sn11/10-1,2.
CR Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Alves-Foss Jim., 1999, LECT NOTES COMPUTER, V1523
   [Anonymous], 2011, A Primer on Memory Consistency and Cache Coherence, Morgan \\
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], P TLDI 2012 7 ACM SI
   [Anonymous], 2004, CAUSALITY TEST CASES
   [Anonymous], 2011, 148822011 ISOIEC
   [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   Aspinall D., 2007, P VER AN MULT JAV PR, P66
   Aspinall D, 2007, LECT NOTES COMPUT SC, V4732, P22
   Batty M, 2012, ACM SIGPLAN NOTICES, V47, P509, DOI 10.1145/2103621.2103717
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Boehm H, 2012, P 2012 ACM SIGPLAN W, P12, DOI [10.1145/2247684.2247688, DOI 10.1145/2247684.2247688]
   Boehm H.-J., 2007, JTCISC22WG21 ISO
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Boudol G, 2009, ACM SIGPLAN NOTICES, V44, P392, DOI 10.1145/1594834.1480930
   Boyland J, 2009, J OBJECT TECHNOL, V8, P33, DOI 10.5381/jot.2009.8.4.a2
   Cenciarelli P, 2007, LECT NOTES COMPUT SC, V4421, P331
   Choi JD, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/320385.320386
   De A., 2008, PASTE 08, P8, DOI [10.1145/1512475.1512478, DOI 10.1145/1512475.1512478]
   Demange D, 2013, ACM SIGPLAN NOTICES, V48, P329, DOI 10.1145/2480359.2429110
   Drossopoulou S., 1999, Formal Syntax and Semantics of Java, volume 1523 of Lecture Notes in Computer Science, V1523, P41
   Farzan A, 2004, LECT NOTES COMPUT SC, V3114, P501
   Farzan A, 2004, LECT NOTES COMPUT SC, V3116, P132
   Giffhorn D., 2012, THESIS LARLSRUHER I
   GONG L, 2003, INSIDE JAVA 2 PLATFO
   Gosling J., 2005, Java Language Specification, Vthird
   Hill M. D., 1998, Computer, V31, P28, DOI 10.1109/2.707614
   Huisman Marieke., 2007, VAMP, V7, P81
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Jacobs B., 2005, JAVA MEMORY MODEL MA
   Jagadeesan R, 2010, LECT NOTES COMPUT SC, V6012, P307, DOI 10.1007/978-3-642-11957-6_17
   Jin HF, 2012, LECT NOTES COMPUT SC, V7214, P220, DOI 10.1007/978-3-642-28756-5_16
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Liu Hanbing., 2003, INTERPRETERS VIRTUAL, P15, DOI DOI 10.1145/858570.858572
   Lochbihler Andreas, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P216, DOI 10.1007/978-3-642-22863-6_17
   Lochbihler A., 2012, THESIS KARLSRUHER I THESIS KARLSRUHER I
   Lochbihler A., 2008, P INT WORKSH FDN OBJ
   Lochbihler A, 2012, LECT NOTES COMPUT SC, V7211, P497, DOI 10.1007/978-3-642-28869-2_25
   Lochbihler A, 2010, LECT NOTES COMPUT SC, V6012, P427, DOI 10.1007/978-3-642-11957-6_23
   Lochbihler Andreas., 2007, ARCH FORMAL PROOFS
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Manson J., 2007, JAVA MEMORY MODEL MA
   Nipkow T., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P161, DOI 10.1145/268946.268960
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   PETRI G., 2008, P BYTECODE SEMANTICS
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Polyakov S, 2006, LECT NOTES COMPUT SC, V3875, P224
   Pugh W, 2000, CONCURRENCY-PRACT EX, V12, P445, DOI 10.1002/1096-9128(200005)12:6<445::AID-CPE484>3.0.CO;2-A
   Ruf E, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/358438.349327
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Sevcík J, 2008, LECT NOTES COMPUT SC, V5142, P27, DOI 10.1007/978-3-540-70592-5_3
   Sevcik J, 2011, ACM SIGPLAN NOTICES, V46, P43, DOI 10.1145/1925844.1926393
   Sevcik Jaroslav, 2008, THESIS U EDINBURGH
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Steinke RC, 2004, J ACM, V51, P800, DOI 10.1145/1017460.1017464
   Sura Z., 2005, Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, PPoPP '05, P2, DOI DOI 10.1145/1065944.1065947
   Torlak E, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1809028.1806635
   Verbrugge Clark., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Memory Systems Performance and Correctness, MSPC '11, P1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
NR 62
TC 12
Z9 13
U1 0
U2 9
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2013
VL 35
IS 4
AR 12
DI 10.1145/2518191
PG 65
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 282OY
UT WOS:000329182700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Hosoya, H
   Frisch, A
   Castagna, G
AF Hosoya, Haruo
   Frisch, Alain
   Castagna, Giuseppe
TI Parametric Polymorphism for XML
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Design; Language; Theory; XML; polymorphism; subtyping; tree
   automata
ID SET CONSTRAINTS
AB Despite the extensiveness of recent investigations on static typing for XML, parametric polymorphism has rarely been treated. This well-established typing discipline can also be useful in XML processing in particular for programs involving "parametric schemas," that is, schemas parameterized over other schemas (e. g., SOAP). The difficulty in treating polymorphism for XML lies in how to extend the "semantic" approach used in the mainstream (monomorphic) XML type systems. A naive extension would be "semantic" quantification over all substitutions for type variables. However, this approach reduces to an NEXPTIME-complete problem for which no practical algorithm is known and induces a subtyping relation that may not always match the programmer's intuition. In this article, we propose a different method that smoothly extends the semantic approach yet is algorithmically easier. The key idea here is to devise a novel and simple marking technique, where we interpret a polymorphic type as a set of values with annotations of which subparts are parameterized. We exploit this interpretation in every ingredient of our polymorphic type system such as subtyping, inference of type arguments, etc. As a result, we achieve a sensible system that directly represents a usual expected behavior of polymorphic type systems-"values of abstract types are never reconstructed"-in a reminiscence of Reynold's parametricity theory. Also, we obtain a set of practical algorithms for typechecking by local modifications to existing ones for a monomorphic system.
C1 [Hosoya, Haruo] Univ Tokyo, Fac Sci, Bunkyo Ku, Tokyo 1130033, Japan.
   [Frisch, Alain] LexiFi SAS, F-92100 Boulogne, France.
   [Castagna, Giuseppe] Univ Paris 07, CNRS, PPS, Paris, France.
C3 University of Tokyo; Universite Paris Cite; Centre National de la
   Recherche Scientifique (CNRS)
RP Hosoya, H (corresponding author), Univ Tokyo, Fac Sci, Bunkyo Ku, 7th Bld,Hongo 7-3-1, Tokyo 1130033, Japan.
EM hahosoya@is.s.u-tokyo.ac.jp
FU The Inamori Foundation, Japan Society for the Promotion of Science;
   European FET [IST-2001-32617]
FX This work was partly supported by The Inamori Foundation, Japan Society
   for the Promotion of Science, and European FET contract "MyThS,"
   IST-2001-32617.
CR AIKEN A, 1995, INFORM COMPUT, V122, P30, DOI 10.1006/inco.1995.1139
   ALON N, 2001, P S PRINC DAT SYST P
   [Anonymous], 2000, EXTENSIBLE MARKUP LA
   [Anonymous], 2005, 4287 RFC
   [Anonymous], 2000, The C++ Programming Language
   [Anonymous], XHTML 1 1 MODULE BAS
   APPEL AW, 1991, P 3 INT S PROGR LANG, P3
   Ausbrooks Ron., 2003, Mathematical markup language (MathML) version 2.0, Vsecond
   BENZAKEN V, 2003, P 8 ACM SIGPLAN INT, P51
   BRACHA G, 1998, P ACM S OBJ OR PROGR, P183
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   CASTAGNA G, 1995, POPL 95, P408
   Castagna G, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P15
   COMON H, 1999, TREE AUTOMA IN PRESS
   FANKHAUSER P, 2001, XQUERY 1 0 FORMAL SE
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   FRISCH A, 2004, THESIS U PARIS 7 PAR
   Frisch A, 2006, ACM SIGPLAN NOTICES, V41, P192, DOI 10.1145/1160074.1159829
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Gilleron R, 1999, INFORM COMPUT, V149, P1, DOI 10.1006/inco.1998.2747
   HARREN M, 2005, P WORLD WID WEB WWW, P278
   Hosaya H, 2006, J FUNCT PROGRAM, V16, P711, DOI 10.1017/S0956796806005909
   Hosoya H, 2005, ACM SIGPLAN NOTICES, V40, P50, DOI 10.1145/1047659.1040310
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   Hosoya H, 2003, LECT NOTES COMPUT SC, V2759, P201
   Hosoya H, 2003, J FUNCT PROGRAM, V13, P961, DOI 10.1017/S0956796802004410
   HOSOYA H, 2000, P INT C FUNCT PROGR, P11
   HOSOYA H, 2001, P 28 ACM SIGPLAN SIG, P67
   HOSOYA H, 2000, LECT NOTES COMPUTER, V1997, P226
   HOSOYA H, 2003, 1397 RIMS KYOT U
   HOSOYA H, 2004, PROGRAMMING LANGUAGE, P13
   ISHIKAWA M, 2002, XHTML MATHML SVG PRO
   JACKSON D, 2002, SCALABLE VECTOR GRAP
   JONES SLP, 1993, P UK JOINT FRAM INF
   KIRKEGAARD C, 2006, P PROGR LANG TECHN X, P87
   LEROY X, 1996, OBJECTIVE CAML SYSTE
   MANETH S, 2007, P INT C DAT THEOR IC, P254
   Maneth Sebastian., 2005, PODS'05, P283, DOI DOI 10.1145/1065167.1065203
   MEIJER E, 1999, XMLAMBDA FUNCTIONAL
   Milner R., 1990, The Definition of Standard ML
   Milo Tova., 2000, Proc. 19th ACM Symposium on Principles of Database Systems (PODS'2000), P11, DOI DOI 10.1145/335168.335171
   Murata M., 2001, P 20 S PRINC DAT SYS, P126
   *OASIS, 2007, OP DOC FORM OFF APPL
   *PYTH XML SPEC INT, 1998, XML BOOKM EXCH LANG
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   SHIELDS M, 2001, P 28 ANN ACM S PRINC, P261
   STEFANSSON K, 1994, IEEE S LOG, P137, DOI 10.1109/LICS.1994.316077
   SUDA T, 2005, P C IMPL APPL AUT CI, P83
   SULZMANN M, 2006, P PROGR LANG TECHN X, P92
   Sulzmann M, 2006, ELECTRON NOTES THEOR, V148, P239, DOI 10.1016/j.entcs.2005.11.047
   Tozawa A, 2003, LECT NOTES COMPUT SC, V2759, P213
   Vansummeren S, 2006, ACM T PROGR LANG SYS, V28, P389, DOI 10.1145/1133651.1133652
   VOUILLON J, 2006, POPL 06, P103
   VOUILLON J, 2006, PLAN 10 06, P49
   Wallace M, 1999, ACM SIGPLAN NOTICES, V34, P148, DOI 10.1145/317765.317794
NR 56
TC 10
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2009
VL 32
IS 1
AR 2
DI 10.1145/1596527.1596529
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 530YN
UT WOS:000272629000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhao, P
   Cui, SM
   Gao, YQ
   Silvera, R
   Amaral, JN
AF Zhao, Peng
   Cui, Shimin
   Gao, Yaoqing
   Silvera, Raul
   Amaral, Jose Nelson
TI <i>Forma</i>:: A framework for safe automatic array reshaping
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; performance; memory hierarchy; arrays; data structure;
   reference analysis
AB This article presents Forma, a practical, safe, and automatic data reshaping framework that reorganizes arrays to improve data locality. Forma splits large aggregated data-types into smaller ones to improve data locality. Arrays of these large data types are then replaced by multiple arrays of the smaller types. These new arrays form natural data streams that have smaller memory footprints, better locality, and are more suitable for hardware stream prefetching. Forma consists of a fieldsensitive alias analyzer, a data type checker, a portable structure reshaping planner, and an array reshaper. An extensive experimental study compares different data reshaping strategies in two dimensions: (1) how the data structure is split into smaller ones (maximal partition x frequency-based partition x affinity-based partition); and (2) how partitioned arrays are linked to preserve program semantics (address arithmetic-based reshaping x pointer-based reshaping). This study exposes important characteristics of array reshaping. First, a practical data reshaper needs not only an inter-procedural analysis but also a data-type checker to make sure that array reshaping is safe. Second, the performance improvement due to array reshaping can be dramatic: standard benchmarks can run up to 2.1 times faster after array reshaping. Array reshaping may also result in some performance degradation for certain benchmarks. An extensive micro-architecture-level performance study identifies the causes for this degradation. Third, the seemingly naive maximal partition achieves best or close-to-best performance in the benchmarks studied. This article presents an analysis that explains this surprising result. Finally, address-arithmetic-based reshaping always performs better than its pointer-based counterpart.
C1 [Zhao, Peng; Amaral, Jose Nelson] Univ Alberta, Edmonton, AB T6G 2M7, Canada.
   [Cui, Shimin; Gao, Yaoqing; Silvera, Raul] IBM Toronto Software Lab, Toronto, ON, Canada.
C3 University of Alberta; International Business Machines (IBM)
RP Zhao, P (corresponding author), 101,1516 Vista Club Circle, Santa Clara, CA 95054 USA.
EM peng.zhao@intel.com; scui@ca.ibm.com; ygao@ca.ibm.com; rauls@ca.ibm.com;
   amaral@cs.ualberta.ca
CR Al-Sukhni H, 2003, 12TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P91
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   Badawy A.-H. A., 2001, P 15 INT C SUPERCOMP, P486, DOI [DOI 10.1145/377792.377906, 10.1145/377792.377906]
   CHASE DR, 1990, P SIGPLAN 90 C PROGR, P296
   CHILIMBI TRISHULM., 1999, PLDI 99 PROC ACM SIG, P13
   CONDIT J, 2003, P ACM SIGPLAN 2003 C, P232
   Ding C, 1999, ACM SIGPLAN NOTICES, V34, P229, DOI 10.1145/301631.301670
   FRANZ M, 1998, ICSTR9834 U CAL DEP
   HIND M, 2000, P INT S SOFTW TEST A, P113
   Holte RC, 1996, ARTIF INTELL, V85, P321, DOI 10.1016/0004-3702(95)00111-5
   HSU C, 2000, P MID ATL STUD WORKS
   *IBM, 2001, POWER4 PROC INTR TUN
   *INTEL, 2002, INT IT ARCH SOFTW DE
   ISHIZAKA K, 2003, P WORKSH LANG COMP P, P64
   *ISO IEC, 1990, PROGR LANG C
   Karlsson M., 2000, P INT S HIGH PERFORM, P206, DOI DOI 10.1109/HPCA.2000.824351
   KENNEDY K, 2000, P 14 INT C SUP SANT, P131
   KODUKULA I, 1997, P ACM SIGPLAN C PROG, P346
   LATTNER C, 2002, ACM SIGPLAN WORKSH M, P13
   Luk Chi-Keung, 1996, P 7 INT C ARCH SUPP, P222, DOI [DOI 10.1145/248209.237190, DOI 10.1145/237090.237190]
   LUK CK, 2000, THESIS U TOR DEP COM
   McKinley KS, 1996, ACM T PROGR LANG SYS, V18, P424, DOI 10.1145/233561.233564
   NIEWIADOMSKI R, 2004, ACM J EXPT ALGORITHM, V9, P1
   NIEWIADOMSKI R, 2003, P INT C HIGH PERF CO, P438
   PALEM S, 2000, P 2000 JOINT C LANG, P28
   RABBAH R. M., 2003, ACM T EMBED COMPUT S, V2, P186
   Rivera G, 1999, LECT NOTES COMPUT SC, V1575, P168
   Rivera Gabriel., 1998, Proceedings of the ACM SIGPLAN 1998 conference on Programming language design and implementation - PLDI'98, DOI [10 . 1145 / 277650.277661, DOI 10.1145/277650.277661]
   Roth A, 1998, ACM SIGPLAN NOTICES, V33, P115, DOI 10.1145/291006.291034
   RYDER BG, 2003, P INT C COMP CONSTR, P168
   SINGHAI S, 1996, P MID ATL STUD WORKS
   Singhai SK, 1997, COMPUT J, V40, P340, DOI 10.1093/comjnl/40.6.340
   Steensgaard Bjarne., 1996, POINTS TO ANAL TYPE, P136
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   Strout Michelle Mills, 2003, P ACM SIGPLAN 2003 C, P91, DOI 10.1145/781131.781142
   Vanderwiel SP, 2000, ACM COMPUT SURV, V32, P174, DOI 10.1145/358923.358939
   Wolfe M.J., 1996, High Performance Compilers For Parallel Computing
   Wolfe Michael., 1987, P 3 SIAM C PARALLEL, P357
   YONG SH, 1999, P ACM C PROGR LANG D, P91
   Zhong Yutao., 2004, PLDI '04: Proceedings of the ACM SIGPLAN 2004 conference on Programming language design and implementation, P255
   [No title captured]
   [No title captured]
   [No title captured]
NR 43
TC 17
Z9 20
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 1
AR 2
DI 10.1145/1290520.1290522
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248KY
UT WOS:000252153400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Grothoff, C
   Palsberg, J
   Vitek, J
AF Grothoff, Christian
   Palsberg, Jens
   Vitek, Jan
TI Encapsulating objects with confined types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages
AB Object-oriented languages provide little support for encapsulating objects. Reference semantics allows objects to escape their defining scope, and the pervasive aliasing that ensues remains a major source of software defects. This paper presents Kacheck/J, a tool for inferring object encapsulation properties of large Java programs. Our goal is to develop practical tools to assist software engineers, thus we focus on simple and scalable techniques. Kacheck/J is able to infer confinement-the property that all instances of a given type are encapsulated in their defining package. This simple property can be used to identify accidental leaks of sensitive objects, as well as for compiler optimizations. We report on the analysis of a large body of code and discuss language support and refactoring for confinement.
C1 Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
   Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 University of California System; University of California Los Angeles;
   Purdue University System; Purdue University
RP Grothoff, C (corresponding author), Univ Calif Los Angeles, Dept Comp Sci, 4732 Boelter Hall, Los Angeles, CA 90095 USA.
EM Christian@grothoff.org; palsberg@ucla.edu; jv@purdu.edu
RI Palsberg, Jens/JYO-6826-2024; Vitek, Jan/J-9051-2014
OI Palsberg, Jens/0000-0003-4747-365X; Grothoff,
   Christian/0000-0002-6858-6808
CR ALDRICH J, 2002, P ACM C OBJ OR PROGR, P311
   Almeida PS, 1997, LECT NOTES COMPUT SC, V1241, P32, DOI 10.1007/BFb0053373
   ALMEIDA PS, 1999, ELECT NOTES THEORET, V20
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   BANERJEE A, 2002, PRINCIPLES PROGRAMMI, P166
   Blanchet B, 2003, ACM T PROGR LANG SYS, V25, P713, DOI 10.1145/945885.945886
   BLANCHET B, 1999, OOPSLA 99 ACM C OBJ, V34, P35
   BODGA J, 1999, OOPSLA 99 ACM C OBJ, V34, P35
   Bokowski B, 1999, LECT NOTES COMPUT SC, V1687, P355, DOI 10.1145/318774.319253
   BOKOWSKI B, 1999, P 14 ANN C OBJ OR PR, P82
   BOYAPATI C, 2002, P 17 ACM SIGPLAN C O, P211
   BOYAPATI C, 2003, P ACM SIGPLAN 2003 C, P324
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Boyland John., 2001, ECOOP'Ol - Object-Oriented Programming, 15th European Conference, number 2072 in Lecture Notes in Computer Science, P2, DOI [10.1007/3-540-45337-7_2, DOI 10.1007/3-540-45337-7_2]
   CLARKE D, 2003, P 10 WORKSH FDN OBJ
   CLARKE D, 2001, THESIS SCH COMPUTER
   Clarke D., 2003, P ACM C OBJ OR PROGR, P374
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Clarke I, 2002, IEEE INTERNET COMPUT, V6, P40, DOI 10.1109/4236.978368
   Clarke I., 2001, LECT NOTES COMPUTER, V2009, P46, DOI DOI 10.1007/3-540-44702-4_
   DETLEFS D, 1996, WRESTLING REP EXPOSU
   Deutsch A., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P226, DOI 10.1145/215465.215594
   Dowling W. F., 1984, Journal of Logic Programming, V1, P267, DOI 10.1016/0743-1066(84)90014-1
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gamma E., 1994, DESIGN PATTERNS
   Genius D., 1998, Types im Compilation. Second International Workshop, TIC '98 Proceedings, P194, DOI 10.1007/BFb0055519
   Herrmann S, 2003, LECT NOTES COMPUT SC, V2591, P248
   Hogg John., 1992, OOPS Messenger, V3, P271
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   KENT S, 1995, P TOOLS PACIFIC, V95, P227
   MULLER P, 2002, LECT NOTES COMPUTER, V2262
   MULLER P, 1999, PROGRAMMING LANGUAGE
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   POTANIN A, 2004, P WORKSH RDN OBJ OR
   RUSTAN K, 2004, P ECOOP 04 16 EUR C, P491
   Skalka Christian., 2005, International Journal on Information Security, V4, P87, DOI [10.1007/s10207-004-0049-5, DOI 10.1007/S10207-004-0049-5]
   Sun BW, 2001, CHEM LETT, P2, DOI 10.1246/cl.2001.2
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   ZAKS A, 2000, OOPSLA 2000 C P ACM, P83
   Zhao T, 2004, REAL TIM SYST SYMP P, P241, DOI 10.1109/REAL.2004.51
   ZHAO T, 2003, P 18 ANN ACM SIGPLAN, P135
NR 41
TC 14
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 32
DI 10.1145/1286821.1286823
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bruynooghe, M
   Codish, M
   Gallagher, JR
   Genaim, S
   Vanhoof, W
AF Bruynooghe, Maurice
   Codish, Michael
   Gallagher, John R.
   Genaim, Samir
   Vanhoof, Wim
TI Termination analysis of logic programs through combination of type-based
   norms
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; verification; abstract interpretation; dataflow
   analysis; global analysis; groundness analysis; program analysis;
   termination analysis
ID SIZE; FRAMEWORK; INFERENCE; PROLOG
AB This article makes two contributions to the work on semantics-based termination analysis for logic programs. The first involves a novel notion of type-based norm where for a given type, a corresponding norm is defined to count in a term the number of subterms of that type. This provides a collection of candidate norms, one for each type defined in the program. The second enables an analyzer to base termination proofs on the combination of several different norms. This is useful when different norms are better suited to justify the termination of different parts of the program. Application of the two contributions together consists in considering the combination of the type-based candidate norms for a given program. This results in a powerful and practical technique. Both contributions have been introduced into a working termination analyzer. Experimentation indicates that they yield state-of-the-art results in a fully automatic analysis tool, improving with respect to methods that do not use both types and combined norms.
C1 Univ Politecn Madrid, Fac Informat, CLIP Grp, E-28660 Madrid, Spain.
   Ben Gurion Univ Negev, Dept Comp Sci, IL-84105 Beer Sheva, Israel.
   Roskilde Univ, Dept Kommunikat Virksomhed & Informat Teknol, DK-4000 Roskilde, Denmark.
   Katholieke Univ Leuven, Dept Comp Wetenschappen, B-3001 Heverlee, Belgium.
   Univ Namur, Inst Informat, B-5000 Namur, Belgium.
C3 Universidad Politecnica de Madrid; Ben Gurion University; Roskilde
   University; KU Leuven; University of Namur
RP Bruynooghe, M (corresponding author), Univ Politecn Madrid, Fac Informat, CLIP Grp, E-28660 Madrid, Spain.
EM genaim@gmail.com
RI Bruynooghe, Maurice/A-6196-2014; CODISH, MICHAEL/F-1287-2012; Codish,
   Michael/AAH-2961-2020
OI Bruynooghe, Maurice/0000-0002-6881-1462; Vanhoof,
   Wim/0000-0003-3769-6294; Genaim, Samir/0000-0002-7176-1881; Codish,
   Michael/0000-0003-0394-5854; Gallagher, John P./0000-0001-6984-7419
CR [Anonymous], 1980, Ramsey theory
   Apt K.R., 1990, HDB THEORETICAL COMP, P495
   Apt K. R., 1997, From Logic Programming to Prolog
   APT KR, 1993, INFORM COMPUT, V106, P109, DOI 10.1006/inco.1993.1051
   BENOY F, 1996, P 6 INT WORKSH LOG P, P204
   BORDSKY A, 1989, P 8 ACM SIGACT SIGAR, P190
   Bossi A, 2002, THEOR PRACT LOG PROG, V2, P263, DOI 10.1017/S1471068402001382
   BOSSI A, 1992, LECT NOTES COMPUT SC, V582, P73
   BOSSI A, 1991, LECT NOTES COMPUT SC, V494, P153
   Bruynooghe M, 2005, LECT NOTES COMPUT SC, V3672, P35
   Bruynooghe M, 2002, LECT NOTES COMPUT SC, V2477, P477
   BRUYNOOGHE M, 2003, 383 CW KATH U LEUV D
   BRUYNOOGHE M, 2001, LNCS, V2244, P406
   Codish M, 1999, J LOGIC PROGRAM, V41, P103, DOI 10.1016/S0743-1066(99)00006-0
   CODISH M, 2003, 6 INT WORKSH TERM
   CODISH M, 2003, P 13 INT WORKSH LOG
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   DECORTE S, 1993, MIT PS LOG, P420
   DECORTE S, 1997, 246 CW KU LEUV DEP C
   DECORTE S, 1996, 222 CW KU LEUV DEP C
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   Dershowitz N, 2001, APPL ALGEBR ENG COMM, V12, P117, DOI 10.1007/s002000100065
   DERSHOWITZ N, 1995, LECT NOTES COMPUT SC, V909, P16
   DESCHREYE D, 1995, NEW GENERAT COMPUT, V13, P117, DOI 10.1007/BF03038311
   DESCHREYE D, 1992, P INT C 5 GEN COMP S, P481
   GABRIELLI M, 1994, P 9 ACM S APPL COMP, P394
   GALLAGHER J, 2002, LNCS, V2257, P243
   Gallagher J., 1994, P 11 INT C LOG PROGR, P599
   Genaim S, 2005, THEOR PRACT LOG PROG, V5, P75, DOI 10.1017/S1471068404002236
   GENAIM S, 2002, LNCS, V2294, P126
   HILL PM, 1992, TYPES LOGIC PROGRAMM
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   KING A, 1997, P INT LOG PROGR S CA, P261
   Lagoon V, 2003, LECT NOTES COMPUT SC, V2916, P254, DOI 10.1007/978-3-540-24599-5_18
   Lagoon V, 2001, LECT NOTES COMPUT SC, V2024, P296
   LAGOON V, 2004, THESIS U MELBOURNE A
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   LEE CS, 2002, THESIS U W AUSTR
   LINDENSTRAUSS N, 1997, P 14 INT C LOG PROGR, P63
   Lloyd J. W., 2012, Foundations of Logic Programming
   Marriott K., 1993, ACM Letters on Programming Languages and Systems, V2, P181, DOI 10.1145/176454.176519
   MARTIN J, 1996, LECT NOTES COMPUTER, V1207, P224
   Mesnard F, 2001, LECT NOTES COMPUT SC, V2126, P93
   MESNARD F, 1996, P 1996 JOINT INT C S, P7
   MYCROFT A, 1984, ARTIF INTELL, V23, P295, DOI 10.1016/0004-3702(84)90017-1
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   Serebrenik A, 2001, LECT NOTES COMPUT SC, V2042, P69, DOI 10.1007/3-540-45142-0_5
   Somogyi Z, 1996, J LOGIC PROGRAM, V29, P17, DOI 10.1016/S0743-1066(96)00068-4
   STERLING L, 1994, ART PROLOG
   TABOCH C, 2002, TERMINWEB SEMANTIC B
   Vanhoof W, 2002, LECT NOTES COMPUT SC, V2372, P129, DOI 10.1007/3-540-45607-4_8
   Vaucheret C, 2002, LECT NOTES COMPUT SC, V2477, P102
NR 52
TC 31
Z9 33
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2007
VL 29
IS 2
AR 10
DI 10.1145/1216374.1216378
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 161KL
UT WOS:000246013700004
OA Green Submitted, Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Chander, A
   Espinosa, D
   Islam, N
   Lee, P
   Necula, GC
AF Chander, Ajay
   Espinosa, David
   Islam, Nayeem
   Lee, Peter
   Necula, George C.
TI Enforcing resource bounds via static verification of dynamic checks
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 14th European Symposium on Programming (ESOP 2005)
CY APR 04-08, 2005
CL Edinburgh, SCOTLAND
DE languages; security; verification
AB We show how to limit a program's resource usage in an efficient way, using a novel combination of dynamic checks and static analysis. Usually, dynamic checking is inefficient due to the overhead of checks, while static analysis is difficult and rejects many safe programs. We propose a hybrid approach that solves these problems. We split each resource-consuming operation into two parts. The first is a dynamic check, called reserve. The second is the actual operation, called consume, which does not perform any dynamic checks. The programmer is then free to hoist and combine reserve operations. Combining reserve operations reduces their overhead, while hoisting reserve operations ensures that the program does not run out of resources at an inconvenient time. A static verifier ensures that the program reserves resources before it consumes them. This verification is both easier and more flexible than an a priori static verification of resource usage. We present a sound and efficient static verifier based on Hoare logic and linear inequalities. As an example, we present a version of tar written in Java.
C1 Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
   Univ Calif Berkeley, Dept Elect Engn & Comp Sci, Berkeley, CA 94720 USA.
C3 Carnegie Mellon University; University of California System; University
   of California Berkeley
RP Chander, A (corresponding author), Carnegie Mellon Univ, Dept Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM chander@docomolabs-usa.com
CR CHANDER A, 2005, P C COMP AID VER ED
   CHANDER A, 2001, P DARPA INF SURV C E
   COLCOMBET T, 2000, P ACM S PRINC PROGR
   CZAJKOWSKI G, 2000, P C OBJ OR PROGR SYS
   DETLEFS D, 2003, HPL20032148 HPL LAB
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DRARY K, 2000, P ACM S PRINC PROGR
   ENDRES T, 2003, JAVA TAR 2 5
   ERLINGSSON U, 1999, P NEW SEC PARA WORKS
   EVANS D, 1999, P IEEE S SEC PRIV OA
   Flanagan C., 2002, P ACM SIGPLAN C PROG
   FLANAGAN C, 2001, LECT NOTES COMPUTER, V2021
   GONG L., 1999, INSIDE JAVA 2 PLATFO
   Gupta R., 1993, ACM Letters on Programming Languages and Systems, V2, P135, DOI 10.1145/176454.176507
   HOFMANN M, 1999, P ACM S PRINC PROGR
   JONES ND, 1993, PARTIAL EVALUATION A
   Kim M., 2001, ELECTRON NOTES THEOR, V55, P2
   MITCHELL JC, 1996, FDN PROGRAM LANGUAGE
   Necula G., 1997, P ACM S PRINC PROGR
   NECULA GC, 2001, P ACM S PRINC PROGR
   Necula George., 1996, P 2 USENIX S OP SYST
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Pandey R, 2000, CONCURRENCY-PRACT EX, V12, P1405, DOI 10.1002/1096-9128(20001210)12:14<1405::AID-CPE515>3.0.CO;2-O
   PATEL P, 2003, P IEEE C OP ARCH NET
   SHANKAR N, 2002, P 13 INT NAT C REWR
   SHOSTAK RE, 1984, J ACM, V31, P1, DOI 10.1145/2422.322411
   VANDERWAART J, 2005, P ACM SIGPLAN INT WO
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
NR 28
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 5
AR 28
DI 10.1145/1275497.1275503
PG 18
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 208NR
UT WOS:000249327000006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ish-Shalom, O
   Itzhaky, S
   Rinetzky, N
   Shoham, S
AF Ish-Shalom, Oren
   Itzhaky, Shachar
   Rinetzky, Noam
   Shoham, Sharon
TI Runtime Complexity Bounds Using Squeezers
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Runtime complexity analysis; recurrence equations; squeezers;
   simulation; synthesis
ID TERMINATION; PROGRAMS
AB Determining upper bounds on the time complexity of a program is a fundamental problem with a variety of applications, such as performance debugging, resource certification, and compile-time optimizations. Automated techniques for cost analysis excel at bounding the resource complexity of programs that use integer values and linear arithmetic. Unfortunately, they fall short when the complexity depends more intricately on the evolution of data during execution. In such cases, state-of-the-art analyzers have shown to produce loose bounds, or even no bound at all.
   We propose a novel technique that generalizes the common notion of recurrence relations based on ranking functions. Existing methods usually unfold one loop iteration and examine the resulting arithmetic relations between variables. These relations assist in establishing a recurrence that bounds the number of loop iterations. We propose a different approach, where we derive recurrences by comparing whole traces with whole traces of a lower rank, avoiding the need to analyze the complexity of intermediate states. We offer a set of global properties, defined with respect to whole traces, that facilitate such a comparison and show that these properties can be checked efficiently using a handful of local conditions. To this end, we adapt state squeezers, an induction mechanism previously used for verifying safety properties. We demonstrate that this technique encompasses the reasoning power of bounded unfolding, and more. We present some seemingly innocuous, yet intricate, examples that previous tools based on cost relations and control flow analysis fail to solve, and that our squeezer-powered approach succeeds.
C1 [Ish-Shalom, Oren; Rinetzky, Noam; Shoham, Sharon] Tel Aviv Univ, Tel Aviv, Israel.
   [Itzhaky, Shachar] Technion, Haifa, Israel.
C3 Tel Aviv University; Technion Israel Institute of Technology
RP Ish-Shalom, O (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM tuna.is.good.for.you@gmail.com; shachari@cs.technion.ac.il;
   maon@cs.tau.ac.il; sharon.shoham@gmail.com
FU European Research Council under the European Union [759102-SVIS]; United
   States-Israel Binational Science Foundation (BSF) [2016260, 2018675];
   Israeli Science Foundation (ISF) [1996/18, 1810/18, 243/19, 2740/19];
   Pazy Foundation
FX The research leading to the presented results received funding from the
   European Research Council under the European Union's Horizon 2020
   research and innovation programme (grant agreement 759102-SVIS). This
   research was partially supported by United States-Israel Binational
   Science Foundation (BSF) grants (2016260 and 2018675), Israeli Science
   Foundation (ISF) grants (1996/18, 1810/18, 243/19, and 2740/19), and the
   Pazy Foundation.
CR Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   Abdulla PA, 2000, INFORM COMPUT, V160, P109, DOI 10.1006/inco.1999.2843
   Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   Albert E, 2008, LECT NOTES COMPUT SC, V5079, P221
   Albert E, 2019, THEOR PRACT LOG PROG, V19, P722, DOI 10.1017/S1471068419000152
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Ben-Amram AM, 2008, ACM T PROGR LANG SYS, V30
   Breck J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P688, DOI 10.1145/3385412.3386035
   Brockschmidt M., 2014, TOOLS ALG CONSTR AN, V8413, P140, DOI DOI 10.1007/978-3-642-54862-8_10
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Chakraborty Supratik, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P22, DOI 10.1007/978-3-030-45190-5_2
   Chakraborty S, 2021, LECT NOTES COMPUT SC, V12760, P911, DOI 10.1007/978-3-030-81688-9_42
   Claessen K, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1988042.1988046
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DEBRAY SK, 1993, ACM T PROGR LANG SYS, V15, P826, DOI 10.1145/161468.161472
   Alonso-Blas DE, 2012, LECT NOTES COMPUT SC, V7460, P405, DOI 10.1007/978-3-642-33125-1_27
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Flores-Montoya A, 2016, LECT NOTES COMPUT SC, V9995, P254, DOI 10.1007/978-3-319-48989-6_16
   Gulwani S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P292, DOI 10.1145/1806596.1806630
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann Jan, 2010, P 19 EUROPEAN C PROG
   Ish-Shalom O, 2021, LECT NOTES COMPUT SC, V12648, P320, DOI 10.1007/978-3-030-72019-3_12
   Ish-Shalom O, 2020, LECT NOTES COMPUT SC, V11990, P112, DOI 10.1007/978-3-030-39322-9_6
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Manolios P, 2006, LECT NOTES COMPUT SC, V4144, P401, DOI 10.1007/11817963_36
   Mera E, 2007, LECT NOTES COMPUT SC, V4354, P140
   Nilsson Rickard, 2009, SCALACHECK PROPERTY
   SarahWinkler Georg, 2020, P 30 INT S LOGIC BAS, P37, DOI [10.1007/978-3-030-68446-4_2, DOI 10.1007/978-3-030-68446-4_2]
   Sinn M, 2017, J AUTOM REASONING, V59, P3, DOI 10.1007/s10817-016-9402-4
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
   Zuleger F, 2011, LECT NOTES COMPUT SC, V6887, P280, DOI 10.1007/978-3-642-23702-7_22
NR 37
TC 0
Z9 0
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2022
VL 44
IS 3
AR 17
DI 10.1145/3527632
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3V9XX
UT WOS:000842012200005
OA Bronze
DA 2024-07-18
ER

PT J
AU Hecker, M
   Bischof, S
   Snelting, G
AF Hecker, Martin
   Bischof, Simon
   Snelting, Gregor
TI On Time-sensitive Control Dependencies
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Control dependency; program slicing; timing dependency; timing leak
AB We present efficient algorithms for time-sensitive control dependencies (CDs). If statement y is time-sensitively control dependent on statement x, then x decides not only whether y is executed but also how many timesteps after x. If y is not standard control dependent on x, but time-sensitively control dependent, then y will always be executed after x, but the execution time between x and y varies. This allows us to discover, e.g., timing leaks in security-critical software.
   We systematically develop properties and algorithms for time-sensitive CDs, as well as for nontermination-sensitive CDs. These work not only for standard control flow graphs (CFGs) but also for CFGs lacking a unique exit node (e.g., reactive systems). We show that Cytron's efficient algorithm for dominance frontiers [10] can be generalized to allow efficient computation not just of classical CDs but also of time-sensitive and nontermination-sensitive CDs. We then use time-sensitive CDs and time-sensitive slicing to discover cache timing leaks in an AES implementation. Performance measurements demonstrate scalability of the approach.
C1 [Hecker, Martin; Bischof, Simon; Snelting, Gregor] Karlsruhe Inst Technol, Fak Informat, Fasanengarten 5, D-76131 Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Snelting, G (corresponding author), Karlsruhe Inst Technol, Fak Informat, Fasanengarten 5, D-76131 Karlsruhe, Germany.
EM gregor.snelting@kit.edu
FU Deutsche Forschungsgemeinschaft [Sn11-12/3, SPP 1496]; BMBF [01BY1172]
FX The work described in this article was funded by Deutsche
   Forschungsgemeinschaft Grant Sn11-12/3 in the scope of SPP 1496
   "Reliably Secure Software", and by BMBF Grant 01BY1172 in the scope of
   the Security Competence Center KASTEL. Authors' address: M. Hecker, S.
   Bischof, and G. Snelting, Karlsruhe Institute of Technology, Fakultat
   fur Informatik, Am Fasanengarten 5, 76131 Karlsruhe, Germany; email:
   gregor.snelting@kit.edu.
CR Agat J., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P40, DOI 10.1145/325694.325702
   Aho A. V., 1972, SIAM Journal on Computing, V1, P131, DOI 10.1137/0201008
   Amtoft T, 2008, INFORM PROCESS LETT, V106, P45, DOI 10.1016/j.ipl.2007.10.002
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Bernstein D. J., 2005, CACHE TIMING ATTACKS
   Binkley D, 2006, IEEE T SOFTWARE ENG, V32, P698, DOI 10.1109/TSE.2006.95
   Bischof S, 2018, J COMPUT SECUR, V26, P335, DOI 10.3233/JCS-17984
   Breitner J, 2016, LECT NOTES COMPUT SC, V9635, P68, DOI 10.1007/978-3-662-49635-0_4
   Cooper Keith, 2006, Technical Report
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Giffhorn D, 2015, INT J INF SECUR, V14, P263, DOI 10.1007/s10207-014-0257-6
   Graf J, 2016, LECT NOTES COMPUT SC, V9635, P89, DOI 10.1007/978-3-662-49635-0_5
   Hammer C, 2009, INT J INF SECUR, V8, P399, DOI 10.1007/s10207-009-0086-1
   Hecht M. S., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P207
   Hecker Martin, 2020, THESIS KARLSRUHER I
   Hedin D, 2005, ELECTRON NOTES THEOR, V141, P163, DOI 10.1016/j.entcs.2005.02.031
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Horwitz S., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P146, DOI 10.1145/73560.73573
   Kashyap V, 2011, P IEEE S SECUR PRIV, P413, DOI 10.1109/SP.2011.19
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Krinke J., 2003, Software Engineering Notes, V28, P178, DOI 10.1145/949952.940096
   Lengauer T., 1979, ACM T PROGR LANG SYS, V1, P121, DOI 10.1145/357062.357071
   Muchnik S., 1997, ADV COMPILER DESIGN
   Naveh Barak, 2003, JGRAPHT JAVA LIB GRA
   Oracle Corporation, 2020, COD TOOLS JMH
   PODGURSKI A, 1990, IEEE T SOFTWARE ENG, V16, P965, DOI 10.1109/32.58784
   Rafnsson W, 2017, LECT NOTES COMPUT SC, V10204, P3, DOI 10.1007/978-3-662-54455-6_1
   Ranganath VP, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275502
   Reps T., 1994, SIGSOFT Software Engineering Notes, V19, P11, DOI 10.1145/195274.195287
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Wolfe M.J., 1995, High Performance Compilers for Parallel Computing
NR 33
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2022
VL 44
IS 1
AR 2
DI 10.1145/3486003
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YP1LJ
UT WOS:000748389400002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Zhang, DF
   Myers, AC
   Vytiniotis, D
   Peyton-Jones, S
AF Zhang, Danfeng
   Myers, Andrew C.
   Vytiniotis, Dimitrios
   Peyton-Jones, Simon
TI SHErrLoc: A Static Holistic Error Locator
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Error diagnosis; static program analysis; type inference; information
   flow; Haskell; OCaml; Jif
ID INFERENCE
AB We introduce a general way to locate programmer mistakes that are detected by static analyses. The program analysis is expressed in a general constraint language that is powerful enough to model type checking, information flow analysis, dataflow analysis, and points-to analysis. Mistakes in program analysis result in unsatisfiable constraints. Given an unsatisfiable system of constraints, both satisfiable and unsatisfiable constraints are analyzed to identify the program expressions most likely to be the cause of unsatisfiability. The likelihood of different error explanations is evaluated under the assumption that the programmer's code is mostly correct, so the simplest explanations are chosen, following Bayesian principles. For analyses that rely on programmer-stated assumptions, the diagnosis also identifies assumptions likely to have been omitted. The new error diagnosis approach has been implemented as a tool called SHErrLoc, which is applied to three very different program analyses, such as type inference for a highly expressive type system implemented by the Glasgow Haskell Compiler-including type classes, Generalized Algebraic Data Types (GADTs), and type families. The effectiveness of the approach is evaluated using previously collected programs containing errors. The results show that when compared to existing compilers and other tools, SHErrLoc consistently identifies the location of programmer errors significantly more accurately, without any language-specific heuristics.
C1 [Zhang, Danfeng] Penn State Univ, Dept Comp Sci & Engn, W369 Westgate Bldg, University Pk, PA 16802 USA.
   [Myers, Andrew C.] Cornell Univ, Dept Comp Sci, 428 Gates Hall, Ithaca, NY 14853 USA.
   [Vytiniotis, Dimitrios; Peyton-Jones, Simon] Microsoft Res Cambridge, 21 Stn Rd, Cambridge CB1 2FB, England.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE);
   Pennsylvania State University; Pennsylvania State University -
   University Park; Cornell University; Microsoft
RP Zhang, DF (corresponding author), Penn State Univ, Dept Comp Sci & Engn, W369 Westgate Bldg, University Pk, PA 16802 USA.
EM zhang@cse.psu.edu; andru@cs.cornell.edu; dimitris@microsoft.com;
   simonpj@microsoft.com
RI Zhang, Danfeng/A-2515-2016
OI Zhang, Danfeng/0000-0003-1942-6872
FU National Science Foundation [CCF-0964409, CCF-1566411]; Office of Naval
   Research [N00014-13-1-0089]; Air Force Office of Scientific Research
   [FA9550-12-1-0400]; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1566411] Funding Source:
   National Science Foundation
FX This work was supported by the National Science Foundation (CCF-0964409,
   CCF-1566411), the Office of Naval Research (N00014-13-1-0089) and the
   Air Force Office of Scientific Research (FA9550-12-1-0400).
CR Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   Aiken A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P31, DOI 10.1145/165180.165188
   [Anonymous], 2014, SHERRLOC STATIC HOLI
   [Anonymous], 2005, THESIS
   [Anonymous], 2021, Bayesian Data Analysis
   [Anonymous], 1994, Program analysis and specialization for the C programming language
   [Anonymous], 2003, P ACM SIGPLAN WORKSH
   [Anonymous], 2014, HELIUM VER 1 8
   [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   Arden O, 2012, P IEEE S SECUR PRIV, P191, DOI 10.1109/SP.2012.22
   Ball T, 2003, ACM SIGPLAN NOTICES, V38, P97, DOI 10.1145/640128.604140
   Barrett C, 2000, SIAM J COMPUT, V30, P809, DOI 10.1137/S0097539798337716
   Blackshear S, 2013, ACM SIGPLAN NOTICES, V48, P209, DOI 10.1145/2499370.2462188
   Choppella V., 1995, TECHNICAL REPORT
   Damas L., 1985, THESIS
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Dillig I, 2012, ACM SIGPLAN NOTICES, V47, P181, DOI [10.1145/2345156.2254087, 10.1145/2345156.1993565]
   Foster JS, 2006, ACM T PROGR LANG SYS, V28, P1035, DOI 10.1145/1186632.1186635
   Foster Jeffrey S., 1997, TECHNICAL REPORT
   Haack C, 2004, SCI COMPUT PROGRAM, V50, P189, DOI 10.1016/j.scico.2004.01.004
   Hage J., 2002, COMMUNICATION
   Hage J, 2007, LECT NOTES COMPUT SC, V4449, P199
   HART PE, 1968, IEEE T SYST SCI CYB, VSSC4, P100, DOI 10.1109/TSSC.1968.300136
   Hudak Paul, 1992, ACM SIGPLAN NOTICES, V27, P5
   Johnson-acsadi G, 1986, Popul Bull UN, P44, DOI 10.1145/512644.512649
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   King D., 2008, Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering, SIGSOFT '08/FSE-16, P250
   Kremenek T, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P161
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   Lerner BS, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425, DOI 10.1145/1250734.1250783
   Liblit B, 2005, ACM SIGPLAN NOTICES, V40, P15, DOI 10.1145/1064978.1065014
   Livshits B, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P75, DOI 10.1145/1542476.1542485
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P781, DOI 10.1145/3022671.2983994
   Marlow Simon, 1993, GLASGOW HASKELL COMP
   McAdam B. J., 1998, IMPLEMENTATION FUNCT, P139
   McAdam Bruce James, 2001, THESIS
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   Milner R., 1990, The Definition of Standard ML
   Myers A. C., 1997, Operating Systems Review, V31, P129, DOI 10.1145/269005.266669
   Myers Andrew C., 2006, Jif 3.0: Java information flow
   NERODE A, 1997, LOGIC APPL
   OCaml, 2016, OCAML PROGR LANG
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Pavlinovic Z, 2014, ACM SIGPLAN NOTICES, V49, P525, DOI [10.1145/2714064.2660230, 10.1145/2660193.2660230]
   Rahli Vincent, 2010, HWMACSTR0079
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Shen Chen, 2014, COMMUNICATION
   Sheng Chen, 2014, TECHNICAL REPORT
   Sheng Chen, 2014, P ACM S PRINC PROGR
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Tip F, 2001, ACM T SOFTW ENG METH, V10, P5, DOI 10.1145/366378.366379
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Vytiniotis D, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P39
   Wand M., 1987, Fundamenta Informaticae, V10, P115
   Wand Mitchell, 1986, P ACM S PRINC PROGR
   Weijers J., 2013, P ACM SIGPLAN 2013 W, P3
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P12, DOI [10.1145/2813885.2738009, 10.1145/2737924.2738009]
   Zhang DF, 2014, ACM SIGPLAN NOTICES, V49, P569, DOI 10.1145/2535838.2535870
   Zheng Alice X., 2006, INT C MACH LEARN, P1105, DOI DOI 10.1145/1143844.1143983
NR 59
TC 6
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2017
VL 39
IS 4
AR 18
DI 10.1145/3121137
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AW
UT WOS:000414328600005
DA 2024-07-18
ER

PT J
AU Staiger-Stöhr, S
AF Staiger-Stoehr, Stefan
TI Practical Integrated Analysis of Pointers, Dataflow and Control Flow
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Experimentation; Andersen analysis; flow
   sensitivity; pointer analysis; SSA
ID SINGLE ASSIGNMENT FORM; TO ANALYSIS; SCALABLE FLOW; LINES; MILLIONS
AB This article presents a family of static analyses to determine pointer targets, control flow, and dataflow in combination. The integrated solution to these mutually dependent problems approaches the result from the optimistic side. It is a general strategy for static program analysis and does not need any upfront approximation for one of the problems to overcome the mutual dependencies. A degenerated case yields Andersen's famous pointer analysis; otherwise, the analyses are flow-sensitive and can support direct and indirect strong updates, within the same cubic asymptotic complexity as known for Andersen, albeit with larger constants.
   Surprisingly, the ideas behind the integrated analysis are intuitive. The strategy we describe naturally evolves from considering the mutual dependencies between the three problems, or from generalizing Andersen's analysis to flow sensitivity. Such a flow-sensitive Andersen analysis not only computes pointer targets with higher precision than the original analysis, but it also creates an interprocedural SSA form at the same time.
   Our extensive experimental evaluation shows that the integrated solution is practical as it can be applied to reasonably large real-world programs within a few seconds or minutes. This uses some optimizations which together achieve a speedup of more than 100 for several programs. We compare several members of the family of analyses, from flow- and field-insensitive to flow- and field-sensitive with strong updates, both with and without optimizations. This gives some insights into the effects of these dimensions of precision on the results. It also sheds new light on the benefits of flow sensitivity versus the costs associated with it.
C1 Axivion GmbH, D-70569 Stuttgart, Germany.
RP Staiger-Stöhr, S (corresponding author), Axivion GmbH, Nobelstr 15, D-70569 Stuttgart, Germany.
EM stefan.staiger@gmx.net
CR Andersen L. O., 1994, Ph.D. thesis
   Chang W, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P39
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Chatterjee R., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P133, DOI 10.1145/292540.292554
   Choi J.-D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P232, DOI 10.1145/158511.158639
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Deepak Goyal, 2005, Higher-Order and Symbolic Computation, V18, P15, DOI 10.1007/s10990-005-7005-6
   Fahndrich M, 1998, ACM SIGPLAN NOTICES, V33, P85, DOI 10.1145/277652.277667
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Gutzmann T, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P59, DOI 10.1109/SCAM.2007.26
   Guyer SZ, 2005, SCI COMPUT PROGRAM, V58, P83, DOI 10.1016/j.scico.2005.02.005
   Hardekopf B, 2007, ACM SIGPLAN NOTICES, V42, P290, DOI 10.1145/1273442.1250767
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   Hasti R, 1998, ACM SIGPLAN NOTICES, V33, P97, DOI 10.1145/277652.277668
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P254, DOI 10.1145/381694.378855
   Hind M., 2000, Software Engineering Notes, V25, P113, DOI 10.1145/347636.348916
   Hind M, 1998, LECT NOTES COMPUT SC, V1503, P57
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Kahlon V, 2008, ACM SIGPLAN NOTICES, V43, P249, DOI 10.1145/1379022.1375613
   LANDI W, 1992, SIGPLAN NOTICES, V27, P235, DOI 10.1145/143103.143137
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Lhotak O, 2006, THESIS MCGILL U MONT THESIS MCGILL U MONT
   Lhoták O, 2011, ACM SIGPLAN NOTICES, V46, P3, DOI 10.1145/1925844.1926389
   Lhoták O, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391987
   Lindenmaier G., 2005, 20058 U KARLSRUHE
   Lundberg J., 2007, COMPILER CONSTRUCTIO
   Pearce D. J., 2005, Ph.D. dissertation
   Pearce D. J., 2007, ACM T PROGR LANG SYS, V30, P1
   Raza A, 2006, LECT NOTES COMPUT SC, V4006, P71
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Rountev A, 2001, ACM SIGPLAN NOTICES, V36, P43, DOI 10.1145/504311.504286
   RUF E, 1995, SIGPLAN NOTICES, V30, P13, DOI 10.1145/223428.207112
   Ryder BG, 2003, LECT NOTES COMPUT SC, V2622, P126
   Salcianu A, 2001, ACM SIGPLAN NOTICES, V36, P12, DOI 10.1145/568014.379553
   Shapiro M., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P1, DOI 10.1145/263699.263703
   Staiger-Stohr S., 2009, THESIS U STUTTGART
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sui Yulei, 2011, P 9 AS S PROGR LANG, P155, DOI DOI 10.1007/978-3-642-25318-8
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Tok T. B., 2007, THESIS U TEXAS
   Tok TB, 2006, LECT NOTES COMPUT SC, V3923, P17
   Whaley J, 2002, LECT NOTES COMPUT SC, V2477, P180
   Whaley J., 2007, THESIS STANFORD U ST
   Wilson Robert Paul, 1997, Ph.D. Dissertation
   Yu HT, 2010, INT SYM CODE GENER, P218
   Zhu JW, 2005, DES AUT CON, P831, DOI 10.1109/DAC.2005.193930
NR 48
TC 3
Z9 3
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2013
VL 35
IS 1
AR 5
DI 10.1145/2450136.2450140
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 140CM
UT WOS:000318631900004
OA Bronze
DA 2024-07-18
ER

PT J
AU Huang, SS
   Smaragdakis, Y
AF Huang, Shan Shan
   Smaragdakis, Yannis
TI Morphing: Structurally Shaping a Class by Reflecting on Others
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Metaprogramming; language extensions; morphing
AB We present MorphJ: a language for specifying general classes whose members are produced by iterating over members of other classes. We call this technique "class morphing" or just "morphing." Morphing extends the notion of genericity so that not only types of methods and fields, but also the structure of a class can vary according to type variables. This adds a disciplined form of metaprogramming to mainstream languages and allows expressing common programming patterns in a highly generic way that is otherwise not supported by conventional techniques. For instance, morphing lets us write generic proxies (i.e., classes that can be parameterized with another class and export the same public methods as that class); default implementations (e.g., a generic do-nothing type, configurable for any interface); semantic extensions (e.g., specialized behavior for methods that declare a certain annotation); and more. MorphJ's hallmark feature is that, despite its emphasis on generality, it allows modular type-checking: a MorphJ class can be checked independently of its uses. Thus, the possibility of supplying a type parameter that will lead to invalid code is detected early, an invaluable feature for highly general components that will be statically instantiated by other programmers. We demonstrate the benefits of morphing with several examples, including a MorphJ reimplementation of DSTM2, a software transactional memory library which reduces 1,484 lines of Java reflection and bytecode engineering library calls to just 586 lines of MorphJ code.
C1 [Huang, Shan Shan] LogicBlox Inc, Atlanta, GA 30309 USA.
   [Smaragdakis, Yannis] Univ Massachusetts, Dept Comp Sci, Amherst, MA 01003 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst
RP Huang, SS (corresponding author), LogicBlox Inc, 2 Midtown Plaza,Suite 1880,1349 W Peachtree St,NW, Atlanta, GA 30309 USA.
EM ssh@logicblox.com
RI Smaragdakis, Yannis/AAM-2851-2021
FU NSF [CCF-0917774, CCF-0934631]; LogicBlox, Inc.; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [0916569, 0934631] Funding Source: National Science Foundation
FX This work was funded by the NSF (CCF-0917774, CCF-0934631) and by
   LogicBlox, Inc.
CR ALLEN E, 2003, P OOPSLA, P96
   [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], P 21 ANN ACM SIGPLAN
   *AP SOFTW FDN, BYT COD ENG LIB
   BACHRACH J, 2001, OOPSLA 2001 C P, P31, DOI DOI 10.1145/504311.504285
   Baker Jason., 2002, PLDI 02, P270
   Batory D, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P143, DOI 10.1109/ICSR.1998.685739
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bruenton E., ASM JAVA BYTECODE EN
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   CANNON HI, 1982, FLAVORS NONHIERARCHI
   CHAKRAVARTY M, 2005, P ICFP 05, P241
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   Csallner C, 2004, SOFTWARE PRACT EXPER, V34, P1025, DOI 10.1002/spe.602
   DANFORTH S, 1994, P 9 C OBJ OR PROGR S, P440
   Draheim D, 2005, LECT NOTES COMPUT SC, V3676, P327
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ekman T, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P1
   Fahndrich M., 2006, GPCE 06 P 5 INT C GE, P275, DOI DOI 10.1145/1173706.1173748
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gibbons Jeremy., 2007, LECT NOTES COMPUTER, V4719
   Hinze R, 2004, SCI COMPUT PROGRAM, V51, P117, DOI 10.1016/j.scico.2003.07.001
   Huang SS, 2008, ACM SIGPLAN NOTICES, V43, P79, DOI 10.1145/1379022.1375592
   Huang SS, 2007, LECT NOTES COMPUT SC, V4609, P399
   Huang SS, 2005, LECT NOTES COMPUT SC, V3676, P309
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Igarashi A, 2006, ACM T PROGR LANG SYS, V28, P795, DOI 10.1145/1152649.1152650
   Jansson P., 1997, POPL 1997, P470
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LIEBERMAN H, 1986, SIGPLAN NOTICES, V21, P214, DOI 10.1145/960112.28718
   MENS K, 2001, P 13 INT C SOFTW ENG, P136
   Mohnen M., 2002, P INAUGURAL C PRINCI, P35
   Reppy J, 2007, LECT NOTES COMPUT SC, V4609, P373
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Shan Shan Huang, 2006, 28th International Conference on Software Engineering Proceedings, P865, DOI 10.1145/1134285.1134436
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Smaragdakis Y., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P550, DOI 10.1007/BFb0054107
   STEIN LA, 1987, P ACM C OBJECT ORIEN, P138
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Torgersen M., 2004, SAC 2004, P1289, DOI DOI 10.5381/JOT.2004.3.11.A5
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   WEIRICH S, 2004, P WORKSH OB OR DEV W
NR 45
TC 11
Z9 12
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2011
VL 33
IS 2
AR 6
DI 10.1145/1890028.1890029
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 732AO
UT WOS:000288153000001
OA Bronze
DA 2024-07-18
ER

PT J
AU Flanagan, C
   Freund, SN
   Lifshin, M
   Qadeer, S
AF Flanagan, Cormac
   Freund, Stephen N.
   Lifshin, Marina
   Qadeer, Shaz
TI Types for atomicity: Static checking and inference for Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; verification; reliability; atomicity; concurrent programs;
   type systems; type inference
ID REDUCTION
AB Atomicity is a fundamental correctness property in multithreaded programs. A method is atomic if, for every execution, there is an equivalent serial execution in which the actions of the method are not interleaved with actions of other threads. Atomic methods are amenable to sequential reasoning, which significantly facilitates subsequent analysis and verification.
   This article presents a type system for specifying and verifying the atomicity of methods in multithreaded Java programs using a synthesis of Lipton's theory of reduction and type systems for race detection. The type system supports guarded, write-guarded, and unguarded fields, as well as thread-local data, parameterized classes and methods, and protected locks. We also present an algorithm for verifying atomicity via type inference.
   We have applied our type checker and type inference tools to a number of commonly used Java library classes and programs. These tools were able to verify the vast majority of methods in these benchmarks as atomic, indicating that atomicity is a widespread methodology for multithreaded programming. In addition, reported atomicity violations revealed some subtle errors in the synchronization disciplines of these programs.
C1 [Flanagan, Cormac] Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
   [Freund, Stephen N.; Lifshin, Marina] Williams Coll, Dept Comp Sci, Williamstown, MA 01267 USA.
   [Qadeer, Shaz] One Microsoft Way, Redmond, WA 98052 USA.
C3 University of California System; University of California Santa Cruz;
   Williams College; Microsoft
RP Flanagan, C (corresponding author), Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
FU Alfred P. Sloan Foundation; National Science Foundation [0341179,
   0306486, 0341387, 0644130]; University of California, Santa Cruz;
   Williams College; Direct For Computer & Info Scie & Enginr; Division of
   Computing and Communication Foundations [0341179, 0644130, 0341387]
   Funding Source: National Science Foundation; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [0306486] Funding Source: National Science Foundation
FX C. Flanagan's work was supported by a Fellowship from the Alfred P.
   Sloan Foundation, by the National Science Foundation under Grant
   0341179, and by faculty research funds granted by the University of
   California, Santa Cruz. S. Freund's and M. Lifshin's work was supported
   by the National Science Foundation under Grants 0306486, 0341387, and
   0644130, and by research funds granted by Williams College.
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Agarwal R, 2004, LECT NOTES COMPUT SC, V2937, P149
   AIKEN A, 1998, P 25 S PRINC PROGR L, P243
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], 1999, P OBJ OR SYST LANG
   [Anonymous], 1989, 35 DIG EQ CORP SYST
   [Anonymous], POPL 88
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   ARTHO C, 2003, P 1 INT WORKSH VER V
   BACK RJR, 1989, LECT NOTES COMPUT SC, V366, P199
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR, P56
   BOYAPATI C, 2002, P 17 ACM SIGPLAN C O, P211
   BRUENING D, 1999, THESIS MIT
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   BURROWS M, 2002, 2002004 COMP SYST RE
   CARDELLI L, 1988, LECT NOTES COMPUT SC, V306, P45
   CHAMILLARD AT, 1996, 96084 U MASS DEP COM
   Choi J.-D., 2002, PROGRAMMING LANGUAGE, P258
   Cohen E, 1998, LECT NOTES COMPUT SC, V1466, P317, DOI 10.1007/BFb0055631
   Corbett JC, 1996, IEEE T SOFTWARE ENG, V22, P161, DOI 10.1109/32.489078
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   Deng XG, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P442, DOI 10.1109/ICSE.2002.1007989
   DETLEFS DL, 1998, 156 DEC SYST RES CTR
   DOEPPNER TW, 1977, P ACM S PRINC PROGR, P155
   Flanagan C, 2005, IEEE T SOFTWARE ENG, V31, P275, DOI 10.1109/TSE.2005.47
   Flanagan C, 2004, LECT NOTES COMPUT SC, V3148, P116
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1576, P91
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1664, P288
   FLANAGAN C, 2005, P TLDI 05, P47
   FLANAGAN C, 2003, P 2003 ACM SIGPLAN I, P1
   FLANAGAN C, 2004, P INT SPIN WORKSH MO
   FLANAGAN C, 2003, P WORKSH SOFTW MOD C
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   FLANAGAN C, 2005, P WORKSH SYNCHR CONC
   Flanagan Cormac., 2004, POPL 04, P256
   Flanagan Cormac., 2003, Pro- ceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, PLDI '03, P338
   Freund StephenN., 2004, Journal of Object Technology, V3, P81
   Gharachorloo Kourosh, 1995, Ph. D. Dissertation
   Goetz B, 2006, JAVA CONCURRENCY PRA
   Gosling James, 1996, The Java Language Specification
   GROSSMAN D, 2003, P ACM SIGPLAN INT WO, P13
   Haack C, 2003, LECT NOTES COMPUT SC, V2618, P284
   HARRIS T, 2003, P 18 ANN ACM SIGPLAN, P388, DOI DOI 10.1145/949305.949340
   HATCLIFF J, 2004, P INT C VER MOD CHEC, P175
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   HICKS M, 2006, P WORKSH LANG COMP H
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   HOARE CAR, 1972, APIC STUDIES DATA PR, V9, P61
   *JAV GRAND FOR, 2003, JAV GRAND BENCHM SUI
   *JAVASOFT, 2005, JAV DEV KIT VERS 1 4
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   LAMPORT L, 1989, 44 DEC SYST RES CTR
   LEA D, 2004, UTIL CONCURRENT PACK
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liskov B., 1987, SOSP 87, P111
   LOMET DB, 1977, LANGUAGE DESIGN RELI, P128
   Manson Jeremy., 2005, Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'05, P378, DOI DOI 10.1145/1040305.1040336
   MCCLOSKEY B, 2006, POPL 06, P346
   Misra J., 2001, A Discipline of Multiprogramming
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   OCALLAHAN R, 2003, P 9 ACM SIGPLAN S PR, P167
   Papadimitriou C., 1986, Theory of Database Concurrency Control
   Pozniansky E., 2003, Proceedings of the Ninth ACM SIGPLAN Sym- posium on Principles and Practice of Parallel Programming, PPoPP '03, P179, DOI DOI 10.1145/781498.781529
   Pratikakis P, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1133981.1134019
   QADEER S, 2004, POPL, P245
   RINGENBURG MF, 2005, P 10 ACM SIGPLAN INT, P92
   SALCIANU A, 2001, P 8 ACM SIGPLAN S PR, P12
   Sasturkar Amit., 2005, PPOPP 05, P83, DOI DOI 10.1145/1065944.1065956
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   *SPEC, 2000, STAND PERF EV CORP J
   STERLING N, 1993, PROCEEDINGS OF THE WINTER 1993 USENIX CONFERENCE, P97
   STOLLER S, 2006, COMMUNICATION
   Stoller SD, 2000, LECT NOTES COMPUT SC, V1885, P224
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   VAZIRI M, 2006, POPL 06, P334, DOI DOI 10.1145/1111037.1111067
   von Praun Christoph., 2003, Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation (PLDI '03), P115
   VONPRAUN C, 2001, P ACM C OBJ OR PROGR, P70
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
   WANG L, 2003, P WORKSH RUNT VER
   Wang LQ, 2006, IEEE T SOFTWARE ENG, V32, P93, DOI 10.1109/TSE.2006.1599419
   Welc A, 2004, LECT NOTES COMPUT SC, V3086, P519
   Yang Jun, 2000, P 12 INT WORKSH IMPL, P71
NR 83
TC 33
Z9 42
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2008
VL 30
IS 4
AR 20
DI 10.1145/1377492.1377495
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 345YS
UT WOS:000259035300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Lhoták, O
   Hendren, L
AF Lhotak, Ondrej
   Hendren, Laurie
TI Relations as an abstraction for BDD-based program analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; design; experimentation; binary decision diagrams; relations;
   language design; Java; program analysis; Boolean formula satisfiability;
   physical domain assignment; points-to analysis
ID POINTS-TO ANALYSIS; JAVA
AB In this article we present Jedd, a language extension to Java that supports a convenient way of programming with Binary Decision Diagrams ( BDDs). The Jedd language abstracts BDDs as database-style relations and operations on relations, and provides static type rules to ensure that relational operations are used correctly.
   The article provides a description of the Jedd language and reports on the design and implementation of the Jedd translator and associated runtime system. Of particular interest is the approach to assigning attributes from the high-level relations to physical domains in the underlying BDDs, which is done by expressing the constraints as a SAT problem and using a modern SAT solver to compute the solution. Further, a runtime system is defined that handles memory management issues and supports a browsable profiling tool for tuning the key BDD operations.
   The motivation for designing Jeddwas to support the development of interrelated whole program analyses based on BDDs. We have successfully used Jedd to build Paddle, a framework of context-sensitive program analyses, including points-to analysis and call graph construction, as well as several client analyses.
C1 [Lhotak, Ondrej] Univ Waterloo, DR Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
   [Hendren, Laurie] McGill Univ, Sch Comp Sci, Montreal, PQ H3A 2A7, Canada.
C3 University of Waterloo; McGill University
RP Lhoták, O (corresponding author), Univ Waterloo, DR Cheriton Sch Comp Sci, 200 Univ Ave W, Waterloo, ON N2L 3G1, Canada.
CR [Anonymous], PLDI 03
   [Anonymous], 1988, PRINCIPLES DATABASE
   [Anonymous], 1989, Principles of Database and Knowledge-Base Systems
   [Anonymous], PLDI 98
   [Anonymous], 1986, Programming with Sets; an Introduction to SETL
   Beazley DM, 1996, PROCEEDINGS OF THE FOURTH ANNUAL TCL/TK WORKSHOP, P129
   BEHRMANN G, 2006, INTERACTIVE BDD ENV
   Berghammer R, 2002, LECT NOTES COMPUT SC, V2561, P241
   Beyer D, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P216, DOI 10.1109/WCRE.2003.1287252
   Bollig B, 1996, IEEE T COMPUT, V45, P993, DOI 10.1109/12.537122
   BRABRAND C, 2002, INTERNET TECH, V2, P79
   BRYANT RE, 1992, COMPUT SURV, V24, P293, DOI 10.1145/136035.136043
   Christensen AS, 2003, ACM T PROGR LANG SYS, V25, P814, DOI 10.1145/945885.945890
   Clocksin W., 1987, PROGRAMMING PROLOG
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   DAS M, 2000, P ACM SIGPLAN C PROG, P35
   Fahmy HM, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P51, DOI 10.1109/ASE.2001.989790
   Garcia-Molina H., 2001, Database Systems: The Complete Book
   Gosling James, 1996, The Java Language Specification
   Heintze Nevin., 2001, PLDI 01, P254
   HIPP DR, 2006, SQLITE EMBEDDABLE DA
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Lhotak O., 2004, P ACM SIGPLAN C PROG, P158
   Lhotak O., 2006, THESIS MCGILL U
   Lhotak O., 2003, Spark: A Flexible Points-to Analysis Framework for Java
   Liang DL, 2001, ACM SIGPLAN NOTICES, P73
   LINDNIELSEN J, 2006, BUDDY BINARY DECISIO
   Meijer E., 2003, WORKSH DECL PROGR CO, P145
   Minato SI, 1997, FORM METHOD SYST DES, V10, P221, DOI 10.1023/A:1008643722423
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   NILSSON M, 2006, GBDD PACKAGE REPRESE
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   POSKANZER J, 2006, THTTPD TINY TURBO TH
   QIAN F, 2006, SABLEJBDD JAVA BINAR
   ROUNTEV A, 2001, P C OBJ OR PROGR SYS, P43
   Schmidt H., 1977, Bosque, V2, P3
   Shapiro M., 1997, P 24 ACM SIGPLAN SIG, P1
   SOMENZI F, 2006, CUDD CU DECISION DIA
   TANI S, 1993, P 4 INT S ALG COMP I, P389
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   VAHIDI A, 2006, JBDD JAVA INTERFACE
   Whaley J, 2002, LECT NOTES COMPUT SC, V2477, P180
   WHALEY J, 2006, BDDBDDB
   WHALEY J, 2006, JAVABDD
   Whaley John., 2004, PROGRAMMING LANGUAGE, P131
   Zhang LT, 2003, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, PROCEEDINGS, P880
   ZHU J, 2004, P ACM SIGPLAN C PROG, P145
   Zhu JW, 2002, IEEE/ACM INTERNATIONAL CONFERENCE ON CAD-02, DIGEST OF TECHNICAL PAPERS, P150, DOI 10.1109/ICCAD.2002.1167527
NR 48
TC 3
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2008
VL 30
IS 4
AR 19
DI 10.1145/1377492.1377494
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 345YS
UT WOS:000259035300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Hirzel, M
   Von Dincklage, D
   Diwan, A
   Hind, M
AF Hirzel, Martin
   Von Dincklage, Daniel
   Diwan, Amer
   Hind, Michael
TI Fast online pointer analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; pointer analysis; class loading; reflection;
   native interface
ID TO ANALYSIS; INTERPROCEDURAL OPTIMIZATION; FRAMEWORK; CONNECTIVITY; CODE
AB Pointer analysis benefits many useful clients, such as compiler optimizations and bug finding tools. Unfortunately, common programming language features such as dynamic loading, reflection, and foreign language interfaces, make pointer analysis difficult. This article describes how to deal with these features by performing pointer analysis online during program execution. For example, dynamic loading may load code that is not available for analysis before the program starts. Only an online analysis can analyze such code, and thus support clients that optimize or find bugs in it. This article identifies all problems in performing Andersen's pointer analysis for the full Java language, presents solutions to these problems, and uses a full implementation of the solutions in a Java virtual machine for validation and performance evaluation. Our analysis is fast: On average over our benchmark suite, if the analysis recomputes points-to results upon each program change, most analysis pauses take under 0.1 seconds, and add up to 64.5 seconds.
C1 IBM TJ Watson Res Ctr, Hawthorne, NY 10532 USA.
   Univ Colorado, Boulder, CO 80309 USA.
C3 International Business Machines (IBM); University of Colorado System;
   University of Colorado Boulder
RP Hirzel, M (corresponding author), IBM TJ Watson Res Ctr, 19 Skyline Dr, Hawthorne, NY 10532 USA.
EM hirzel@us.ibm.com; danielvd@colorado.edu; diwan@colorado.edu;
   hindm@us.ibm.com
CR Agrawal G, 2002, LECT NOTES COMPUT SC, V2304, P29
   Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   [Anonymous], 9419 DIKU U COP
   [Anonymous], P 26 ACM SIGPLAN SIG
   Arnold M, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/354222.353175
   ARNOLD M, 2002, LECT NOTES COMPUTER, V2374
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   Berndl M, 2003, ACM SIGPLAN NOTICES, V38, P103, DOI 10.1145/780822.781144
   Bogda J, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P13
   BURKE M, 1993, ACM T PROGR LANG SYS, V15, P367, DOI 10.1145/169683.169678
   BURKE M, 1994, 19546 RC IBM T J WAT
   CHATTERJEE R, 1999, P 26 ACM SIGPLAN SIG, P133
   CHEN MH, 2000, IRON STEEL, V35, P69
   Choi JD, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/320385.320386
   CHOI JD, 1999, P ACM SIGPLAN SIGSOF, P21
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Cierniak M, 2000, ACM SIGPLAN NOTICES, V35, P13, DOI 10.1145/358438.349306
   COOPER KD, 1986, SIGPLAN NOTICES, V21, P58, DOI 10.1145/13310.13317
   Das M, 2000, ACM SIGPLAN NOTICES, V35, P35, DOI 10.1145/358438.349309
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Diwan A, 2001, ACM T PROGR LANG SYS, V23, P30, DOI 10.1145/383721.383732
   Duesterwald E, 1997, ACM T PROGR LANG SYS, V19, P992, DOI 10.1145/267959.269970
   EMAMI M, 1994, SIGPLAN NOTICES, V29, P242, DOI 10.1145/773473.178264
   Fahndrich M, 1998, ACM SIGPLAN NOTICES, V33, P85, DOI 10.1145/277652.277667
   FERNANDEZ MF, 1995, SIGPLAN NOTICES, V30, P103, DOI 10.1145/223428.207121
   Fink SJ, 2003, INT SYM CODE GENER, P241, DOI 10.1109/CGO.2003.1191549
   FOSTER JS, 1997, UCBCSD97964
   GHIYA R, 1992, 62 ACAPS MCGILL U
   GROVE D, 1998, THESIS U WASHINGTON
   Grunwald Dirk, 1993, P 4 ACM SIGPLAN S PR
   Guyer SZ, 2003, LECT NOTES COMPUT SC, V2694, P214
   Hall Mary, 1993, P 6 WORKSH LANG COMP, P522
   Harris T, 1999, ACM SIGPLAN NOTICES, V34, P46, DOI 10.1145/312009.312035
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P254, DOI 10.1145/381694.378855
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   HEINTZE N, 1999, UNPUB ANAL LARGE COD
   HENDREN L, 1990, THESIS CORNELL U
   HIND M, 2001, WORKSH PROGR AN SOFT, P54
   HIND M, 2000, P INT S SOFTW TEST A, P113
   Hirzel M, 2004, LECT NOTES COMPUT SC, V3086, P96
   Hirzel M, 2003, ACM SIGPLAN NOTICES, V38, P359, DOI 10.1145/949343.949337
   Hirzel M, 2003, ACM SIGPLAN NOTICES, V38, P143
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   Hunt G. C., 2005, MSRTR2005135
   KING AC, 2003, 1103 U KENT COMP LAB
   KOTZMANN T, 2005, VIRTUAL EXECUTION EN
   LARUS JR, 1993, USING TRACING DYNAMI
   Lattner C., 2003, UIUCDCSR20032340 COM UIUCDCSR20032340 COM
   Le A, 2005, LECT NOTES COMPUT SC, V3443, P287, DOI 10.1007/11406921_22
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Liang DL, 1999, LECT NOTES COMPUT SC, V1687, P199, DOI 10.1145/318774.318943
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   LIVSHITS B, 2005, P AS S PROGR LANG SY
   Mock Markus., 2001, P 2001 ACM SIGPLAN S, P66
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Pechtchanski I, 2001, ACM SIGPLAN NOTICES, V36, P195, DOI 10.1145/504311.504297
   PLEVYAK J, 1994, SIGPLAN NOTICES, V29, P324, DOI 10.1145/191081.191130
   Qian F, 2005, LECT NOTES COMPUT SC, V3443, P255, DOI 10.1007/978-3-540-31985-6_20
   QIAN F, 2004, P 3 VIRT MACH RES TE, P139
   Rountev A, 2001, ACM SIGPLAN NOTICES, V36, P43, DOI 10.1145/504311.504286
   Rountev A, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/358438.349310
   Ruf E, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/358438.349327
   Ryder BG, 2003, LECT NOTES COMPUT SC, V2622, P126
   SHAPIRO M, 1997, LECT NOTES COMPUTER, V1302, P16
   Sreedhar VC, 2000, ACM SIGPLAN NOTICES, V35, P196, DOI 10.1145/358438.349326
   SRIDHARAN M, 2006, P PROGR LANG DES IMP
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   Suganuma T, 2001, ACM SIGPLAN NOTICES, V36, P180, DOI 10.1145/504311.504296
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   Tip F, 2000, ACM SIGPLAN NOTICES, V35, P281, DOI 10.1145/354222.353190
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   Vivien F, 2001, ACM SIGPLAN NOTICES, V36, P35, DOI 10.1145/381694.378804
   Whaley J, 2002, LECT NOTES COMPUT SC, V2477, P180
   [No title captured]
   [No title captured]
NR 77
TC 31
Z9 35
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2007
VL 29
IS 2
AR 11
DI 10.1145/1216374.1216379
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 161KL
UT WOS:000246013700005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Simonet, V
   Pottier, F
AF Simonet, Vincent
   Pottier, Francois
TI A constraint-based approach to guarded algebraic data types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; generalized algebraic data types; GADTs;
   constraint-based type inference
ID INFERENCE; POLYMORPHISM
AB We study HMG(X), an extension of the constraint-based type system HM(X) with deep pattern matching, polymorphic recursion, and guarded algebraic data types. Guarded algebraic data types subsume the concepts known in the literature as indexed types, guarded recursive datatype constructors, (first-class) phantom types, and equality qualified types, and are closely related to inductive types. Their characteristic property is to allow every branch of a case construct to be typechecked under different assumptions about the type variables in scope. We prove that HMG( X) is sound and that, provided recursive definitions carry a type annotation, type inference can be reduced to constraint solving. Constraint solving is decidable, at least for some instances of X, but prohibitively expensive. Effective type inference for guarded algebraic data types is left as an issue for future research.
C1 INRIA, F-78153 Le Chesnay, France.
C3 Inria
RP Simonet, V (corresponding author), INRIA, BP 105, F-78153 Le Chesnay, France.
EM Francois.Pottier@inria.fr
OI Pottier, Francois/0000-0002-4069-1235
CR Aiken Alexander., 1993, Proceedings of the conference on Functional programming languages and computer architecture, P31
   [Anonymous], 1987, The Implementation of Functional Programming Languages
   [Anonymous], 2005, 5462 INRIA
   [Anonymous], POPL 96
   [Anonymous], 2003, The Fun of Programming
   [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   CHENEY J, 2003, 1901 CORN U
   CHENEY J, 2002, P HASK WORKSH
   COMON H, 1989, J SYMB COMPUT, V7, P371, DOI 10.1016/S0747-7171(89)80017-3
   Crary K, 2002, J FUNCT PROGRAM, V12, P567, DOI 10.1017/S0956796801004282
   CURTIS P, 1990, THESIS CORNELL U
   FREEMAN T, 1991, P ACM SIGPLAN C PROG, P268, DOI DOI 10.1145/113445.113468
   HANUS M, 1989, LECT NOTES COMPUT SC, V352, P225
   HANUS M, 1988, THESIS U DORTMUND
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Jones MarkP., 1994, Qualified Types: Theory and Practice
   JONES MP, 1995, YALEUDCSRR1075
   JONES PS, 2001, MSCIS052 U PENNS
   JONES SP, 2005, UNPUB SIMPLE UNIFICA
   JONES SP, 2004, UNPUB LEXICALLY SCOP
   KUNCAK V, 2003, P IEEE S LOG COMP SC
   LAUFER K, 1994, ACM T PROGR LANG SYS, V16, P1411, DOI 10.1145/186025.186031
   LEROY X, 2005, OBJECTIVE CONTROL SY
   Maher M. J., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P348, DOI 10.1109/LICS.1988.5132
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell JohnC., 1984, Proceedings of the 11th ACM SIGACTSIGPLAN symposium on Principles of programming languages, P175, DOI [10.1145/800017.800529, DOI 10.1145/800017.800529]
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   PAULINMOHRING C, 1992, RR199249 ENS
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pottier F, 2004, ACM SIGPLAN NOTICES, V39, P89, DOI 10.1145/982962.964009
   POTTIER F, 2006, P ACM S PRINC PROGR
   REMY D, 1994, P INT C THEOR ASP CO, P321
   SHEARD T, 2004, P WORKSH LOG FRAM ME
   SHEARD T, 2004, P OOPSLA, P116
   SHEARD T, 2005, OMEGA
   SIMONET V, 2003, P ACM INT C FUNCT PR
   SMITH GS, 1994, SCI COMPUT PROGRAM, V23, P197, DOI 10.1016/0167-6423(94)00020-4
   STUCKEY PJ, 2005, UNPUB TYPE INFERENCE
   SULZMANN M, 2000, THESIS YALE U
   Sulzmann Martin, 1999, ACRC99009 U S AUSTR
   Trifonov V., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P349
   TSE S, 2004, P IEEE S SEC PRIV S
   VOROBYOV S, 1996, LECT NOTES ARTIF INT, V1104, P275
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   WARREN D. H. D., 1982, MACH INTELL, V10, P441
   WEIRICH S, 2000, P 5 ACM SIGPLAN INT, P58
   WERNER B, 1994, THESIS U PARIS 7
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   XI H, 2001, DEPENDENT ML
   XI H, 1998, THESIS CARNEGIE MELL
   Xi Hongwei., 1999, Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P214
   Xi Hongwei., 2004, POSTWORKSHOP P TYPES, P394
   Xi HW, 2003, J UNIVERS COMPUT SCI, V9, P851
   Xi HW, 1999, LECT NOTES COMPUT SC, V1551, P228
   Zenger C, 1997, THEOR COMPUT SCI, V187, P147, DOI 10.1016/S0304-3975(97)00062-5
   ZENGER C, 1998, THESIS U KARLSRUHE
NR 60
TC 33
Z9 35
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2007
VL 29
IS 1
AR 1
DI 10.1145/1180475.1180476
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 132FG
UT WOS:000243927300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Igarashi, A
   Viroli, M
AF Igarashi, Atsushi
   Viroli, Mirko
TI Variant parametric types: A flexible subtyping scheme for generics
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE generic classes; Java; language design; language semantics; subtyping;
   variance
ID JAVA
AB We develop the mechanism of variant parametric types as a means to enhance synergy between parametric and inclusion polymorphism in object-oriented programming languages. Variant parametric types are used to control both the subtyping between different instantiations of one generic class and the accessibility of their fields and methods. On one hand, one parametric class can be used to derive covariant types, contravariant types, and bivariant types ( generally called variant parametric types) by attaching a variance annotation to a type argument. On the other hand, the type system prohibits certain method/field accesses, according to variance annotations, when these accesses may otherwise make the program unsafe. By exploiting variant parametric types, a programmer can write generic code abstractions that work on a wide range of parametric types in a safe manner. For instance, a method that only reads the elements of a container of numbers can be easily modified so as to accept containers of integers, floating-point numbers, or any subtype of the number type.
   Technical subtleties in typing for the proposed mechanism are addressed in terms of an intuitive correspondence between variant parametric and bounded existential types. Then, for a rigorous argument of correctness of the proposed typing rules, we extend Featherweight GJ-an existing formal core calculus for Java with generics-with variant parametric types and prove type soundness.
C1 Kyoto Univ, Grad Sch Informat, Sakyo Ku, Kyoto 6068501, Japan.
   Univ Bologna, DEIS, Alma Mater Studiorum, I-47023 Cesena, FC, Italy.
C3 Kyoto University; University of Bologna
RP Igarashi, A (corresponding author), Kyoto Univ, Grad Sch Informat, Sakyo Ku, Kyoto 6068501, Japan.
EM igarashi@kuis.kyoto-u.ac.jp; mirko.viroli@unibo.it
RI Igarashi, Atsushi/AAP-4323-2020
OI Igarashi, Atsushi/0000-0002-5143-9764; Viroli, Mirko/0000-0003-2702-5702
CR ABADI M, 1996, P POPL 96, P396, DOI DOI 10.1145/237721.237809
   AGESEN O, 1997, P OOPSLA 97, P49
   AMERICA P, 1990, P OOPSLA ECOOP 90, P161
   Barthe G, 1999, LECT NOTES COMPUT SC, V1576, P109
   Barthe G, 2000, LECT NOTES COMPUT SC, V1784, P17
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   BRACHA G, 1996, P ACM SIGPLAN C OBJ
   Bruce K. B., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P523, DOI 10.1007/BFb0054106
   Bruce K. B., 1994, Journal of Functional Programming, V4, P127, DOI 10.1017/S0956796800001039
   Bruce KB, 1995, LECT NOTES COMPUT SC, V952, P27
   Bruce KB, 1997, LECT NOTES COMPUT SC, V1241, P104, DOI 10.1007/BFb0053376
   Bruce KB, 1999, INFORM COMPUT, V155, P108, DOI 10.1006/inco.1999.2829
   BRUCE KB, 1999, P 15 C MATH FDN PROG, V20
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   CARDELLI L, 1994, LNCS, V526, P750
   CARDELLI L, 1990, UNPUB
   CARTWRIGHT R, 1998, P ACM S OBJ OR PROGR, P201
   Compagnoni A. B., 1996, Mathematical Structures in Computer Science, V6, P469
   Cook W. R., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P57
   DAY M, 1995, P ACM S OBJ OR PROGR, P156
   DUGGAN D, 1999, P 6 INT WORKSH FDN O
   Ghelli G, 1998, THEOR COMPUT SCI, V193, P75, DOI 10.1016/S0304-3975(96)00300-3
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Igarashi A, 2002, LECT NOTES COMPUT SC, V2374, P441
   Igarashi A, 2002, INFORM COMPUT, V175, P34, DOI 10.1006/inco.2001.2942
   IGARASHI A, 2001, CM SIGPLAN, V34, P132
   IGARASHI A, 2001, P 8 INT WORKSH FDN O
   *INT SOFTW ENG, 2001, EIFF TUT
   LEROY X, 1994, P ACM S PRINC PROGR, P109
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P17, DOI 10.1145/62139.62141
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   MEYER B, 1986, SIGPLAN NOTICES, V21, P391, DOI 10.1145/960112.28738
   Meyer B., 1992, Eiffel: The Language
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   Odersky M., 2004, IC200464 EC POL FED
   Odersky Martin., 1997, P 24 ACM S PRINCIPLE, P146
   Palacz K, 2003, LECT NOTES COMPUT SC, V2743, P378
   Pierce B. C., 1994, Journal of Functional Programming, V4, P207, DOI 10.1017/S0956796800001040
   PIERCE BC, 1994, INFORM COMPUT, V112, P131, DOI 10.1006/inco.1994.1055
   RAYAUND O, 2001, LECT NOTES COMPUTER, V2072, P165
   STEFFEN M, 1998, THESIS U ERLANGENNUR
   *SUN MICR, 1998, JSR000014 SUN MICR
   SYME D, 2001, P ACM SIGPLAN C PROG
   Thorup KK, 1997, LECT NOTES COMPUT SC, V1241, P444
   Thorup KK, 1999, LECT NOTES COMPUT SC, V1628, P186
   Torgersen M., 2004, SAC 2004, P1289, DOI DOI 10.5381/JOT.2004.3.11.A5
   TORGERSEN M, 1998, P 5 INT WORKSH FDN O
   Viroli M, 2003, COMPUT J, V46, P263, DOI 10.1093/comjnl/46.3.263
   VIROLI M, 2000, P ACM SIGPLAN C OBJ, P146
   WRIGHT AK, 1994, INFORM COMPUT, V115, P1
   [No title captured]
NR 53
TC 31
Z9 35
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2006
VL 28
IS 5
BP 795
EP 847
DI 10.1145/1152649.1152650
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 083LH
UT WOS:000240456900001
OA Bronze
DA 2024-07-18
ER

PT J
AU Joisha, PG
   Banerjee, P
AF Joisha, Pramod G.
   Banerjee, Prithviraj
TI An algebraic array shape inference system for MATLAB®
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE typeless array languages; shape algebras; term rewriting
AB The problem of inferring array shapes ahead of time in languages that exhibit both implicit and dynamic typing is a critical one because the ramifications of its solution are the better organization of array storage through compaction and reuse, and the generation of high-performance code through specialization by shape. This article addresses the problem in a prototypical implicitly and dynamically typed array language called MATLAB. The approach involves modeling the language's shape semantics using an algebraic system, and applying term rewriting techniques to evaluate expressions under this algebra. Unlike prior efforts at array shape determination, this enables the deduction of valuable shape information even when array extents are compile-time unknowns. Furthermore, unlike some previous methods, our approach doesn't impose monotonicity requirements on an operator's shape semantics. The work also describes an inference methodology and reports measurements from a type inference engine called. In a benchmark suite of 17 programs, the shape inference subsystem in detected the equivalence of over 61% of the symbolic shapes in six programs, and over 57% and 37% of the symbolic shapes in two others. In the remaining nine programs, all array shapes were inferred to be compile-time constants.
C1 Northwestern Univ, Evanston, IL 60208 USA.
C3 Northwestern University
RP Joisha, PG (corresponding author), Microsoft Res, 1 Microsoft Way, Redmond, WA 98052 USA.
EM pjoisha@microsoft.com; prith@uic.edu
CR ADAMS JC, 1992, FORTRAN 90 HDB, V90
   AIMASI G, 2002, P ACM SIGPLAN C PROG, P294
   ALMASI G, 2001, THESIS U ILLINOIS UR
   Ancourt C, 2001, ACM SIGPLAN NOTICES, P32
   Banerjee U., 1993, Loop Transformations for Restructuring Compilers: The Foundations
   Budd T., 1988, APL COMPILER
   CHAUVEAU S, 1998, LECT NOTES COMPUTER, V1511, P27
   CHING WM, 1986, IBM J RES DEV, V30, P594, DOI 10.1147/rd.306.0594
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   De Rose L, 1999, ACM T PROGR LANG SYS, V21, P286, DOI 10.1145/316686.316693
   DEROSE LA, 1996, THESIS U ILLINOIS UR
   Dershowitz N., 2001, HDB AUTOMATED REASON, V1
   Gupta R., 1993, ACM Letters on Programming Languages and Systems, V2, P135, DOI 10.1145/176454.176507
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Jay CB, 1998, LECT NOTES COMPUT SC, V1381, P139, DOI 10.1007/BFb0053568
   JISHA PG, 2000, CPDCTR200010010
   JOISHA P, 2003, P ACM SIGPLAN C PROG, P294
   Joisha P.G., 2003, THESIS NW U
   Joisha PG, 2003, LECT NOTES COMPUT SC, V2622, P121
   JOISHA PG, 2001, LECT NOTES COMPUTER, V2624
   JOISHA PG, 2001, P ACM SIGAPL C ARR P, P6
   JOISHA PG, 2002, CPDCTR200210003 NW U
   KAPLAN MA, 1978, P 5 ACM SIGPLAN SIGA
   KNIGHT K, 1989, COMPUT SURV, V21, P93, DOI 10.1145/62029.62030
   MALISHEVSKY A, 1998, THESIS OREGON STATE
   *MATHW INC, 2002, ACC MATLAB MATLAB JI
   *MATHW INC, 2002, MATHW ANN REL 13 MA
   *MATHW INC, 1997, MATLAB LANG TECHN CO
   MCCOSH C, 2003, TR03412 RIC U
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell John C., 1996, Foundation of computing series
   MUCH SS, 1997, ADV COMPILER DESIGN
   Quinn MJ, 1998, FIRST MERGED INTERNATIONAL PARALLEL PROCESSING SYMPOSIUM & SYMPOSIUM ON PARALLEL AND DISTRIBUTED PROCESSING, P81, DOI 10.1109/IPPS.1998.669894
   ROBICHEK AA, 1965, MANAGE SCI, V12, P1, DOI 10.1287/mnsc.12.1.1
   TENENBAUM AM, 1974, THESIS NEW YORK U
   TREMBLAY JP, 1975, DISCRETE MATH STRUC
   WALTHER C, 1988, J ACM, V35, P1, DOI 10.1145/42267.45071
   WEISSTEN EW, 2005, HILBERT MATRIX MATHW
   WIEDMANN C, 1979, P ACM SIGAPL C ARR, P321
   Wolfram S., 2003, The Mathematica Book
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
NR 41
TC 14
Z9 20
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2006
VL 28
IS 5
BP 848
EP 907
DI 10.1145/1152649.1152651
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 083LH
UT WOS:000240456900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Scott, E
   Johnstone, A
AF Scott, Elizabeth
   Johnstone, Adrian
TI Right nulled GLR parsers
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE general context-free grammars; generalized LR parsing
ID COMPILER; RECOGNITION; LANGUAGES; GRAMMARS; TIME
AB The right nulled generalized LR parsing algorithm is a new generalization of LR parsing which provides an elegant correction to, and extension of, Tomita's GLR methods whereby we extend the notion of a reduction in a shift-reduce parser to include right nulled items. The result is a parsing technique which runs in linear time on LR( 1) grammars and whose performance degrades gracefully to a polynomial bound in the presence of nonLR( 1) rules. Compared to other GLR-based techniques, our algorithm is simpler and faster.
C1 Univ London Royal Holloway & Bedford New Coll, Dept Comp Sci, Egham TW20 0EX, Surrey, England.
C3 University of London; Royal Holloway University London
RP Scott, E (corresponding author), Univ London Royal Holloway & Bedford New Coll, Dept Comp Sci, Egham TW20 0EX, Surrey, England.
EM adrian@cs.rhul.ac.uk
CR Aho A. V., 1972, THEORY PARSING TRANS
   Aho A.V., 1986, COMPILERS PRINCIPLES
   AHO AV, 1975, COMMUN ACM, V18, P8
   [Anonymous], AFCRL65758
   [Anonymous], GEN LR PARSING
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], 1974, 2nd Colloquium on Automata, Languages and Programming (ICALP'74), volume 14 of Lecture Notes in Computer Science, DOI [DOI 10.1007/978-3-662-21545-618, DOI 10.1007/3-540-06841-4_65]
   Aycock J, 1999, LECT NOTES COMPUT SC, V1575, P32
   BILLOT S, 1989, P 27 ANN M ASS COMP, P143
   BREUER PT, 1995, SOFTWARE PRACT EXPER, V25, P1263, DOI 10.1002/spe.4380251106
   BUNT H, 1991, RECENT ADV PARSING T, V1
   DEREMER FL, 1971, COMMUN ACM, V14, P453, DOI 10.1145/362619.362625
   DeRemer Franklin Lewis, 1969, THESIS MIT
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   GRAHAM S, 1976, ADV COMPUT, V14, P77
   Grune Dick., 1990, PARSING TECHNIQUES P
   HANSON DR, 2003, MSRTR200332
   HAYS DG, 1967, INTRO COMPUTATIONAL
   IRONS ET, 1961, COMMUN ACM, V4, P51, DOI 10.1145/366062.366083
   Johnstone A, 2004, LECT NOTES COMPUT SC, V2985, P89
   Johnstone A, 1998, LECT NOTES COMPUT SC, V1383, P16
   Johnstone A, 2003, LECT NOTES COMPUT SC, V2622, P232
   JOHNSTONE A, 2002, P 35 ANN HAW INT C S
   Johnstone Adrian, 2004, P 4 WORKSH LANG DESC
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   LEWIS PM, 1968, J ACM, V15, P465, DOI 10.1145/321466.321477
   MCPEAK S, 2004, LNCS
   Nederhof M., 1996, Recent Advances in Parsing Technology, P35
   Nederhof MJ, 2004, STUD FUZZ SOFT COMP, V148, P529
   NEDERHOF MJ, 1994, P 32 ANN M ASS COMP, P117
   NEDERHOF MJ, 1996, P 34 ANN M ASS COMP, P239
   Parr T., 1996, Language translation using PCCTS and C++
   REKERS J, 1992, THESIS U AMSTERDAM
   Sakai Ichiro., 1962, 1961 International Conference on Machine Translation of Languages and Applied Language Analysis, P593
   Scott E, 2004, ACTA INFORM, V40, P459, DOI 10.1007/s00236-004-0137-z
   SCOTT E, 2000, TR0012 U LOND
   SHEIL BA, 1976, STAT METHOD LINGUIST, P71
   Stroustrup B., 1994, The Design and Evolution of C++
   UNGER SH, 1968, COMMUN ACM, V11, P240, DOI 10.1145/362991.363001
   VALIANT LG, 1975, J COMPUT SYST SCI, V10, P308, DOI 10.1016/S0022-0000(75)80046-8
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 44
TC 30
Z9 32
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2006
VL 28
IS 4
BP 577
EP 618
DI 10.1145/1146809.1146810
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074LZ
UT WOS:000239815200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Moreau, L
   Dickman, P
   Jones, R
AF Moreau, L
   Dickman, P
   Jones, R
TI Birrell's distributed reference listing revisited
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE distributed garbage collection; distributed reference counting/listing;
   proof of correctness
ID FLY GARBAGE COLLECTION; ALGORITHMS; PROGRAMS; EXERCISE; SYSTEMS
AB The Java RMI collector is arguably the most widely used distributed garbage collector. Its distributed reference listing algorithm was introduced by Birrell et al. in the context of Network Objects, where the description was informal and heavily biased toward implementation. In this article, we formalize this algorithm in an implementation-independent manner, which allows us to clarify weaknesses of the initial presentation. In particular, we discover cases critical to the correctness of the algorithm that were not accounted for by Birrell. We use our formalization to derive an invariant-based proof of correctness of the algorithm that avoids notoriously difficult temporal reasoning. Furthermore, we offer a novel graphical representation of the state transition diagram, which we use to provide intuitive explanations of the algorithm and to investigate its tolerance to faults in a systematic manner. Finally, we examine how the algorithm may be optimized, either by placing constraints on message channels or by tightening the coupling between the application program and distributed garbage collector.
C1 Univ Southampton, Sch Elect & Comp Sci, Southampton SO17 1BJ, Hants, England.
   Univ Glasgow, Dept Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
   Univ Kent, Comp Lab, Canterbury CT2 7NF, Kent, England.
C3 University of Southampton; University of Glasgow; University of Kent
RP Univ Southampton, Sch Elect & Comp Sci, Southampton SO17 1BJ, Hants, England.
EM L.Moreau@ecs.soton.ac.uk; pd@dcs.gia.ac.uk; R.E.Jones@ukc.ac.uk
RI Moreau, Luc/C-9061-2011
OI Jones, Richard/0000-0002-8159-0297; Moreau, Luc/0000-0002-3494-120X
CR Abdullahi SE, 1998, ACM COMPUT SURV, V30, P330, DOI 10.1145/292469.292471
   [Anonymous], 0203 INRIA
   [Anonymous], 79 DEC SYST RES CTR
   [Anonymous], P 2002 ACM S APPL CO
   [Anonymous], 1991, The Temporal Logic of Reactive and Concurrent Systems
   BENARI M, 1984, ACM T PROGR LANG SYS, V6, P333, DOI 10.1145/579.587
   BENARI M, 1982, AUTOMATA LANGUAGES P, P14
   Birrell A, 1995, SOFTWARE PRACT EXPER, V25, P87, DOI 10.1002/spe.4380251305
   BIRRELL A, 1994, 115 DIG SYST RES CTR
   BIRRELL A, 1993, 116 DIG SYST RES CTR
   Birrell Andrew., 1994, Proc. Fourteenth ACM Symposium on Operating Systems Principles, P217
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   Corporaal H., 1990, PARBASE-90 International Conference on Databases, Parallel Architectures and Their Applications (Cat. No.90CH2728-4), P463, DOI 10.1109/PARBSE.1990.77179
   DEBAKKER JW, 1987, LECT NOTES COMPUTER, V258
   DICKMAN P, 2000, P 2 INT S MEM MAN MI
   DICKMAN P, 1992, UNPUB OPTIMISING WEI
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   DOLIGEZ D, 1994, POPL 94, P70
   FOSTER I, 1989, INT J PARALLEL PROG, V18, P181, DOI 10.1007/BF01407898
   FRANCEZ N, 1978, ACM T SOFTW ENG, V4, P371
   GOGUEN H, 1998, ABSTRACT FORMULATION
   Gonthier G., 1996, LECT NOTES COMPUTER, V1102
   GRIES D, 1977, COMMUN ACM, V20, P921, DOI 10.1145/359897.359903
   HAVELUND K, 1997, MECHANIZED REFINEMEN
   Hirzel M, 2002, ACM T PROGR LANG SYS, V24, P593, DOI 10.1145/586088.586089
   Jackson PB, 1998, LECT NOTES COMPUT SC, V1479, P225, DOI 10.1007/BFb0055139
   JONES RE, 1993, LECT NOTES COMPUTER, V694, P712
   Jones Richard., 1996, GARBAGE COLLECTION
   JUL E, 1988, ACM T COMPUT SYST, V6, P109, DOI 10.1145/35037.42182
   KUNG HT, 1977, P IEEE S FDN COMP SC, P120
   LANG B, 1992, POPL 92 19 ANN ACM S, P39
   Le Fessant F, 1998, ACM SIGPLAN NOTICES, V33, P152, DOI 10.1145/277652.277715
   LERMEN CW, 1986, P ACM C LISP FUNCTIO, P343
   LINS RD, 1993, P WP DP 93 WORKSH PA, P369
   Maheshwari U., 1997, Proceedings of the Sixteenth Annual ACM Symposium on Principles of Distributed Computing, P239, DOI 10.1145/259380.259444
   MANCINI L, 1991, COMPUT J, V34, P503, DOI 10.1093/comjnl/34.6.503
   Moreau L., 2001, Higher-Order and Symbolic Computation, V14, P357, DOI 10.1023/A:1014455931537
   Moreau L, 2001, ACTA INFORM, V37, P563, DOI 10.1007/PL00013315
   Moreau L, 2001, SCI COMPUT PROGRAM, V39, P249, DOI 10.1016/S0167-6423(00)00011-3
   MULLER KAG, 1976, THESIS TH DELFT DELF
   OWICKI S, 1982, ACM T PROGR LANG SYS, V4, P455, DOI 10.1145/357172.357178
   PIQUES JM, 1991, LECT NOTES COMPUTER, V505
   PIXLEY C, 1988, DISTRIB COMPUT, V3, P41, DOI 10.1007/BF01788566
   PLAINFOSSE D, 1995, LECT NOTES COMPUTER, V986
   RAMESH S, 1983, INFORM PROCESS LETT, V17, P189, DOI 10.1016/0020-0190(83)90039-X
   RODRIGUES H, 1996, LECT NOTES COMPUTER, V1151, P123
   RODRIGUES HCC, 1998, LECT NOTES COMPUTER, V1445, P249
   Rojemo Niklas., 1996, Proceedings of the first ACM SIGPLAN International Conference on Functional Programming, P34, DOI DOI 10.1145/232627.232633
   Russinoff D. M., 1994, Formal Aspects of Computing, V6, P359, DOI 10.1007/BF01211305
   SHAHAM R, 2003, ACM SIGPLAN NOTICES, V38, P64
   Shapiro M., 1992, Proceedings of the Eleventh Annual ACM Symposium on Principles of Distributed Computing, P135, DOI 10.1145/135419.135448
   SHAPIRO M, 1990, 1320 INR ROCQ
   SHAPIRO M, 1992, 1799 INRIA ROCQ
   STENNING V, 1976, UNPUB ON THE FLY GAR
   *SUN MICR, 1996, JAV REM METH INV SPE
   TEL G, 1993, ACM T PROGR LANG SYS, V15, P1, DOI 10.1145/151646.151647
   VANDESNEPSCHEUT JLA, 1987, INFORM PROCESS LETT, V24, P211, DOI 10.1016/0020-0190(87)90135-9
NR 57
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2005
VL 27
IS 6
BP 1344
EP 1395
DI 10.1145/1108970.1108976
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 005EG
UT WOS:000234804800006
OA Green Submitted, Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Igarashi, A
   Kobayashi, N
AF Igarashi, A
   Kobayashi, N
TI Resource usage analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; reliability; theory; verification; resource usage; type
   inference
ID SHUFFLE LANGUAGES
AB It is an important criterion of program correctness that a program accesses resources in a valid manner. For example, a memory region that has been allocated should eventually be deallocated, and after the deallocation, the region should no longer be accessed. A file that has been opened should be eventually closed. So far, most of the methods to analyze this kind of property have been proposed in rather specific contexts (like studies of memory management and verification of usage of lock primitives), and it was not clear what the essence of those methods was or how methods proposed for individual problems are related. To remedy this situation, we formalize a general problem of analyzing resource usage as a resource usage analysis problem, and propose a type-based method as a solution to the problem.
C1 Kyoto Univ, Grad Sch Informat, Sakyo Ku, Kyoto 6068501, Japan.
   Tohoku Univ, Grad Sch Informat Sci, Aoba Ku, Sendai, Miyagi 9808579, Japan.
C3 Kyoto University; Tohoku University
RP Kyoto Univ, Grad Sch Informat, Sakyo Ku, Kyoto 6068501, Japan.
EM igarashi@kuis.kyoto-u.ac.jp; koba@ecei.tohoku.ac.jp
RI Igarashi, Atsushi/AAP-4323-2020
OI Igarashi, Atsushi/0000-0002-5143-9764; Kobayashi,
   Naoki/0000-0002-0537-0604
CR AIKEN A, 1995, P ACM SIGPLAN C PROG, P174
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1990, PROGRAMMING CONCEPTS
   Ball T., 2002, POPL 02, P1
   BIGLIARDI G, 2000, P 3 ACM SIGPLAN WORK
   BIRKEDAL L, 1996, P 23 ACM SIGPLAN SIG, P171
   BLANCHET B, 1998, P 25 ANN ACM S PRINC, P25
   DAS M., 2002, P ACM SIGPLAN C PROG
   DELINE R, 2002, P ACM SIGPLAN C PROG
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   Emerson E. A., 1990, Handbook of Theoretical Computer Science, VB, P995, DOI [10.1016/b978-0-444-88074-1.50021-4, DOI 10.1016/B978-0-444-88074-1.50021-4]
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1576, P91
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1664, P288
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Foster J., 2002, P ACM SIGPLAN C PROG
   Freund SN, 1999, ACM T PROGR LANG SYS, V21, P1196, DOI 10.1145/330643.330646
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   GISCHER J, 1981, COMMUN ACM, V24, P597, DOI 10.1145/358746.358767
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   Gustavsson J, 2001, LECT NOTES COMPUT SC, V2011, P140
   HANNAN J, 1995, LECT NOTES COMPUTER, V983, P172
   Henzinger ThomasA., 2002, Proc. of the Symposium on Principles of Programming Languages. POPL, P58
   Igarashi A, 2000, INFORM COMPUT, V161, P1, DOI 10.1006/inco.2000.2872
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   IGARASHI A, 2000, P 3 ACM SIGPLAN WORK
   IWAMA F, 2002, P ASIA PEPM 02
   Jedrzejowicz J, 2001, THEOR COMPUT SCI, V250, P31, DOI 10.1016/S0304-3975(99)00109-7
   Kanellakis ParisC., 1991, COMPUTATIONAL LOGIC, P444
   KOBAYASHI N, 2000, LNCS, V1872, P365
   KOBAYASHI N, 2003, P ACM SIGPLAN INT WO, P50
   Kobayashi N., 2000, PEPM 00, P84
   Milner R., 1989, Communication and concurrency
   Morrisett G., 1995, P 7 INT C FUNCT PROG, P66, DOI DOI 10.1145/224164.224182
   Nielson F., 1999, Principles of Program Analysis
   Rehof J, 1999, SCI COMPUT PROGRAM, V35, P191, DOI 10.1016/S0167-6423(99)00011-8
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   SUMII E, 1998, P WORKSH HIGH LEV CO, V16, P55
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   TURNER DN, 1995, P FUNCT PROGR LANG C, P1
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   WALKER D, 2001, P ACM SIGPLAN INT C
   Wansbrough K., 1999, POPL 99, P15
   [No title captured]
NR 43
TC 32
Z9 34
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2005
VL 27
IS 2
BP 264
EP 313
DI 10.1145/1057387.1057390
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917RK
UT WOS:000228486700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Alur, R
   Grosu, R
AF Alur, R
   Grosu, R
TI Modular refinement of hierarchic reactive machines
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; verification; hierarchical state machines; compositional
   semantics; assume-guarantee reasoning; refinement
ID MODEL CHECKING; STATECHARTS; SEMANTICS; TOOL
AB Scalable formal analysis of reactive programs demands integration of modular reasoning techniques with existing analysis tools. Modular reasoning principles such as abstraction, compositional refinement, and assume-guarantee reasoning are well understood for architectural hierarchy that describes the communication structure between component processes, and have been shown to be useful. In this paper, we develop the theory of modular reasoning for behavior hierarchy that describes control structure using hierarchic modes. From STATECHARTS to UML, behavior hierarchy has been an integral component of many software design languages, but only syntactically. We present the hierarchic reactive modules language that retains powerful features such as nested modes, mode reuse, exceptions, group transitions, history, and conjunctive modes, and yet has a semantic notion of mode hierarchy. We present an observational trace semantics for modes that provides the basis for mode refinement. We show the refinement to be compositional with respect to the mode constructors, and develop an assume-guarantee reasoning principle.
C1 Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
   SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
C3 University of Pennsylvania; State University of New York (SUNY) System;
   State University of New York (SUNY) Stony Brook
RP Univ Penn, Dept Comp & Informat Sci, 200 S 33rd St, Philadelphia, PA 19104 USA.
EM alur@cis.upenn.edu; grosu@cs.sunysb.edu
CR ABADI M, 1995, ACM T PROGR LANG SYS, V17, P507, DOI 10.1145/203095.201069
   Alur R, 2001, LECT NOTES COMPUT SC, V2102, P169
   Alur R, 2001, PROC INT CONF SOFTW, P835, DOI 10.1109/ICSE.2001.919196
   Alur R, 1999, FORM METHOD SYST DES, V15, P7, DOI 10.1023/A:1008739929481
   Alur R, 1998, LECT NOTES COMPUT SC, V1427, P521, DOI 10.1007/BFb0028774
   ALUR R, 2000, LNCS, V1855, P280
   ALUR R, 1996, P 11 LICS
   ALUR R, 1998, P ACM SIGSOFT INT S, P175
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   Behrmann G, 1999, LECT NOTES COMPUT SC, V1579, P163
   Bhargavan K, 1998, LECT NOTES COMPUT SC, V1479, P49, DOI 10.1007/BFb0055129
   Booch G., 1997, Unified Modeling Language Semantics and Notation Guide 1.0
   Chang YH, 1998, RESOUR CONSERV RECY, V24, P7, DOI 10.1016/S0921-3449(98)00036-6
   Clark M, 1996, IEEE SPECTRUM, V33, P6
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Grosu R, 1998, 1998 INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P41, DOI 10.1109/CSD.1998.657538
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Harel D., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P54
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Huber F, 1996, LECT NOTES COMPUT SC, V1135, P467
   JAHANIAN F, 1987, IEEE T COMPUT, V36, P961, DOI 10.1109/TC.1987.5009519
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LEVESON NG, 1994, IEEE T SOFTWARE ENG, V20, P684, DOI 10.1109/32.317428
   LUTTGEN G, 2000, P 8 ACM SIGSOFT INT, P120
   Lynch Nancy A., 1987, PODC, P137
   McMillan K. L., 1993, Symbolic model checking
   McMillan KL, 1997, LECT NOTES COMPUT SC, V1254, P24
   PNUELI A, 1991, LECT NOTES COMPUT SC, V526, P244
   Selic B., 1994, REAL TIME OBJECT ORI
   STARK EW, 1985, LECT NOTES COMPUT SC, V206, P369
   Uselton AC, 1994, LECT NOTES COMPUT SC, V836, P2
NR 33
TC 24
Z9 28
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2004
VL 26
IS 2
BP 339
EP 369
DI 10.1145/973097.973101
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 804LO
UT WOS:000220300400004
DA 2024-07-18
ER

PT J
AU Vera, X
   Bermudo, N
   Llosa, J
   González, A
AF Vera, X
   Bermudo, N
   Llosa, J
   González, A
TI A fast and accurate framework to analyze and optimize cache memory
   behavior
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; performance; cache memories; optimization; sampling
AB The gap between processor and main memory performance increases every year. In order to overcome this problem, cache memories are widely used. However, they are only effective when programs exhibit sufficient data locality. Compile-time program transformations can significantly improve the performance of the cache. To apply most of these transformations, the compiler requires a precise knowledge of the locality of the different sections of the code, both before and after being transformed.
   Cache miss equations (CMEs) allow us to obtain an analytical and precise description of the cache memory behavior for loop-oriented codes. Unfortunately, a direct solution of the CMEs is computationally intractable due to its NP-complete nature.
   This article proposes a fast and accurate approach to estimate the solution of the CMEs. We use sampling techniques to approximate the absolute miss ratio of each reference by analyzing a small subset of the iteration space. The size of the subset, and therefore the analysis time, is determined by the accuracy selected by the user. In order to reduce the complexity of the algorithm to solve CMEs, effective mathematical techniques have been developed to analyze the subset of the iteration space that is being considered. These techniques exploit some properties of the particular polyhedra represented by CMEs.
C1 Univ Politecn Catalunya, Comp Architecture Dept, ES-08034 Barcelona, Spain.
C3 Universitat Politecnica de Catalunya
RP Malardalens Hogskola, Inst Datateknik, POB 883, SE-72123 Vasteras, Sweden.
EM xavier.vera@mdh.se; nerina@complang.tuwien.ac.at; josepll@ac.upc.es;
   antonio@ac.upc.es
RI González, Antonio/I-2961-2014
OI González, Antonio/0000-0002-0009-0996; Llosa, Josep/0000-0001-7740-3148
CR ABELLA J, 2002, P 31 INT C PAR PROC
   AILAMAKI A, 1999, P 25 VLDB C ED SCOTL
   Ammons Glenn, 1997, P ACM SIGPLAN 97 C P, P85, DOI [10.1145/258915, DOI 10.1145/258915]
   [Anonymous], 1967, ELEMENTS MATH LOGIC
   AYGUADE E, 1995, UPDAC9502
   CHATKIN JM, 2001, RRD R C C M, V1, P1
   CHATTERJEE S, 1999, P 1999 ACM INT C SUP, P444
   Clauss P., 1996, P 10 ACM INT C SUPER, P278, DOI DOI 10.1145/237578.237617
   COLEMAN S, 1995, P ACM SIGPLAN C PROG, P279
   DEGROOT MH, 1998, PROBABILITY STAT
   FEAUTRIER P, 1996, LECT NOTES COMPUTER, V1132, P79
   FRAGUELA BB, 1999, P INT C PAR ARCH COM
   GANNON D, 1988, J PARALLEL DISTR COM, V5, P587, DOI 10.1016/0743-7315(88)90014-7
   GEE JD, 1993, IEEE MICRO, V13, P17, DOI 10.1109/40.229711
   Ghosh S, 1999, ACM T PROGR LANG SYS, V21, P703, DOI 10.1145/325478.325479
   GHOSH S, 1999, THESIS PRINCETON U P
   GHOSH S, 2000, P 2000 INT C SUP, P316
   Ghosh S., 1998, ACM SIGOPS OPERATING, V32, P228, DOI [DOI 10.1145/291006.291051, 10.1145/291069.291051, DOI 10.1145/291069.291051]
   Goldberg A. J., 1991, Proceedings Supercomputing '91 (Cat. No.91CH3058-5), P481, DOI 10.1145/125826.126075
   GOLDSCHMIDT SR, 1993, P ACM SIGM C MEAS MO, P146
   HAGHIGHAT MR, 1993, 1993 WORKSH LANG COM, P567
   HILL M, DINERO3 UNIPROCESSOR
   Kandemir M, 1999, IEEE T PARALL DISTR, V10, P115, DOI 10.1109/71.752779
   KENNEDY K, 1990, INSTRUMENTATION VISU
   Lam M. S., 1991, P 4 INT C ARCH SUPP
   LEBECK AR, 1994, COMPUTER, V27, P15, DOI 10.1109/2.318580
   MAGNUSSON PA, 1993, P 1993 W SIM MULT IN, P69
   MARTONOSI M, 1992, P ACM SIGMETRICS C M, P1
   MARTONOSI M, 1993, P ACM SIGMETRICS C M
   McCabe M., 1989, INTRO PRACTICE STAT
   MCKINLEY KS, 1996, P 7 INT C ARCH SUPP
   MOWRY TC, 1992, P 5 INT C ARCH SUPP, P62
   *MPS COMP SYST, 1988, RISCOMPILER LANG PRO
   PADUA D, 1994, POLARIS DEV DOCUMENT
   Pugh W., 1991, Proceedings Supercomputing '91 (Cat. No.91CH3058-5), P4, DOI 10.1145/125826.125848
   PUGH W, 1994, P INT C PROGR LANG D
   RIVERA G, 1999, P 8 INT C COMP CONST
   Rivera Gabriel., 1998, Proceedings of the ACM SIGPLAN 1998 conference on Programming language design and implementation - PLDI'98, DOI [10 . 1145 / 277650.277661, DOI 10.1145/277650.277661]
   SANCHEZ F, 2000, P INT S MICR MICRO 3
   SANCHEZ FJ, 1998, P INT C PAR ARCH COM
   Sugumar Rabin A., 1993, Multiconfiguration simulation algorithms for the evaluadesigns
   Temam O., 1993, Proceedings SUPERCOMPUTING '93, P410, DOI 10.1145/169627.169762
   TEMAM O, 1994, P SIGM C MEAS MOD CO, P261
   Uhlig RA, 1997, ACM COMPUT SURV, V29, P128, DOI 10.1145/254180.254184
   vanderDeijl E, 1997, COMPUTER, V30, P71, DOI 10.1109/2.596631
   VERA X, 2002, HPCA, V8
   VERA X, 2002, P 15 WORKSH LANG COM
   WILDE D, 1993, 785 OR STAT U
   WITCHEL E, 1996, P ACM SIGM C MEAS MO
   Wolf M. E., 1991, SIGPLAN Notices, V26, P30, DOI 10.1145/113446.113449
NR 50
TC 18
Z9 24
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2004
VL 26
IS 2
BP 263
EP 300
DI 10.1145/973097.973099
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 804LO
UT WOS:000220300400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Blanchet, B
AF Blanchet, B
TI Escape analysis for Java™:: Theory and practice
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; performance; theory; Java; optimization; stack allocation;
   static analysis; synchronization elimination
ID GARBAGE
AB Escape analysis is a static analysis that determines whether the lifetime of data may exceed its static scope.
   This paper first presents the design and correctness proof of an escape analysis for Java(TM). This analysis is interprocedural, context sensitive, and as flow-sensitive as the static single assignment form. So, assignments to object fields are analyzed in a flow-insensitive manner. Since Java is an imperative language, the effect of assignments must be precisely determined. This goal is achieved thanks to our technique using two interdependent analyses, one forward, one backward. We introduce a new method to prove the correctness of this analysis, using aliases as an intermediate step. We use integers to represent the escaping parts of values, which leads to a fast and precise analysis.
   Our implementation [Blanchet 1999], which applies to the whole Java language, is then presented. Escape analysis is applied to stack allocation and synchronization elimination. In our benchmarks, we stack allocate 13% to 95% of data, eliminate more than 20% of synchronizations on most programs (94% and 99% on two examples) and get up to 43% runtime decrease (21% on average). Our detailed experimental study on large programs shows that the improvement comes more from the decrease of the garbage collection and allocation times than from improvements on data locality, contrary to what happened for ML. This comes from the difference in the garbage collectors.
C1 Ecole Normale Super, Dept Informat, F-75320 Paris 05, France.
   Max Planck Inst Informat, Saarbrucken, Germany.
   INRIA Rocquencourt, Le Chesnay, France.
C3 Universite PSL; Ecole Normale Superieure (ENS); Max Planck Society
RP Ecole Normale Super, Dept Informat, 45 Rue Ulm, F-75320 Paris 05, France.
EM Bruno.Blanchet@ens.fr
RI Blanchet, Bruno/AAG-8343-2020
CR AGESEN O, 1999, C OBJ OR PROGR SYST, P207
   AIKEN A, 1995, SIGPLAN C PROGR LANG, P174
   Aldrich J, 1999, LECT NOTES COMPUT SC, V1694, P19
   Bacon D. F., 1997, THESIS U CALIFORNIA
   BACON D.F., 1998, PLDI 98, P258
   BIRKEDAL L, 1996, 23 ACM S PRINC PROGR, P171
   BLANCHET B, 1998, 25 ACM SIGACT SIGPLA, P25
   BLANCHET B, 2000, THESIS ECOLE POLYTEC
   BLANCHET B, 1999, C OBJ OR PROGR SYST, P20
   BOGDA J, 1999, C OBJ OR PROGR SYST, P35
   CARR S, 1994, 6TH P INT C ARCH SUP, P252
   CHOI JD, 1999, C OBJ OR PROGR SYST, P1
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   DEUTSCH A, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P157, DOI 10.1145/96709.96725
   DEUTSCH A, 1997, 24 ANN ACM S PRINC P, P358
   Deutsch Alain., 1994, PLDI 94, P230
   Diniz PC, 1998, J PARALLEL DISTR COM, V49, P218, DOI 10.1006/jpdc.1998.1441
   Fitzgerald MC, 2000, CHEM INNOV, V30, P3
   Gay D, 2000, LECT NOTES COMPUT SC, V1781, P82
   HARRISON WL, 1989, LISP SYMBOLIC COMPUT, V2, P176
   HEDERMAN L, 1988, TR8875 COMP RIC U
   HORWITZ S, 1987, ACTA INFORM, V24, P679, DOI 10.1007/BF00282621
   Hudak Paul., 1986, LFP 86, P351, DOI 10.1145/319838.319876
   Hughes S., 1992, Journal of Logic and Computation, V2, P483, DOI 10.1093/logcom/2.4.483
   INOUE K, 1988, ACM T PROGR LANG SYS, V10, P555, DOI 10.1145/48022.48025
   JONES ND, 1982, 9TH ANN ACM S PRINC, P66
   McDowell CE, 1998, ACM SIGPLAN NOTICES, V33, P84, DOI 10.1145/290229.290239
   Mohnen M, 1995, LECT NOTES COMPUT SC, V982, P241, DOI 10.1007/BFb0026824
   MOHNEN M., 1995, LECT NOTES COMPUTER, V983, P261
   Muller G, 1997, PROCEEDINGS OF THE THIRD USENIX CONFERENCE ON OBJECT-ORIENTED TECHNOLOGIES AND SYSTEMS (COOTS), P1
   ONODERA T, 1999, C OBJ OR PROGR SYST, P223
   PARK YG, 1992, P ACM SIGPLAN 92 C P, P116
   QIAN Z, 1998, LECT NOTES COMPUTER, V1523
   RUF E, 2000, ACM SIGPLAN 2000 C P, P208
   RUGGIERI C, 1988, P 15 ANN ACM S PRINC, P285
   Serrano M, 1996, ACM SIGPLAN NOTICES, V31, P50, DOI 10.1145/232629.232635
   SHIVERS O, 1988, P ACM SIGPLAN C PROG, P164, DOI DOI 10.1145/53990.54007
   TOFTE M, 1993, 9315 COP U DEP COMP
   Weiss M., 1998, Languages, Compilers, and Tools for Embedded Systems. ACM SIGPLAN Workshop LCTES'98. Proceedings, P119, DOI 10.1007/BFb0057785
   WHALEY J, 1999, C OBJ OR PROGR SYST, P187
   [No title captured]
NR 44
TC 42
Z9 51
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2003
VL 25
IS 6
BP 713
EP 775
DI 10.1145/945885.945886
PG 63
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 733DN
UT WOS:000185984800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Lee, D
   Lee, W
   Oh, H
   Yi, K
AF Lee, Dongkwon
   Lee, Woosuk
   Oh, Hakjoo
   Yi, Kwangkeun
TI Optimizing Homomorphic Evaluation Circuits by Program Synthesis and
   Time-bounded Exhaustive Search
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Homomorphic encryption circuit; program synthesis; term rewriting;
   equality saturation
ID LANGUAGE
AB We present a new and general method for optimizing homomorphic evaluation circuits. Although fully homomorphic encryption (FHE) holds the promise of enabling safe and secure third party computation, building FHE applications has been challenging due to their high computational costs. Domain-specific optimizations require a great deal of expertise on the underlying FHE schemes and FHE compilers that aim to lower the hurdle, generate outcomes that are typically sub-optimal, as they rely on manually-developed optimization rules. In this article, based on the prior work of FHE compilers, we propose a method for automatically learning and using optimization rules for FHE circuits. Our method focuses on reducing the maximum multiplicative depth, the decisive performance bottleneck, of FHE circuits by combining program synthesis, term rewriting, and equality saturation. It first uses program synthesis to learn equivalences of small circuits as rewrite rules from a set of training circuits. Then, we perform term rewriting on the input circuit to obtain a new circuit that has lower multiplicative depth. Our rewriting method uses the equational matching with generalized version of the learned rules, and its soundness property is formally proven. Our optimizations also try to explore every possible alternative order of applying rewrite rules by time-bounded exhaustive search technique called equality saturation. Experimental results show that our method generates circuits that can be homomorphically evaluated 1.08x-3.17x faster (with the geometric mean of 1.56x) than the state-of-the-art method. Our method is also orthogonal to existing domain-specific optimizations.
C1 [Lee, Dongkwon; Yi, Kwangkeun] Seoul Natl Univ, Seoul, South Korea.
   [Lee, Woosuk] Hanyang Univ, Seoul, South Korea.
   [Oh, Hakjoo] Korea Univ, Seoul, South Korea.
C3 Seoul National University (SNU); Hanyang University; Korea University
RP Yi, K (corresponding author), Seoul Natl Univ, Seoul, South Korea.; Lee, W (corresponding author), Hanyang Univ, Seoul, South Korea.
EM dklee@ropas.snu.ac.kr; woosuk@hanyang.ac.kr; hakjoo_oh@korea.ac.kr;
   kwang@ropas.snu.ac.kr
OI Lee, Woosuk/0000-0002-1884-619X
FU Institute of Information & communications Technology Planning &
   Evaluation (IITP) - Korea government (MSIT) [2021-0-00758, 2022-0-00995,
   .2020-0-01337]; National Research Foundation of Korea [2020R1C1C1014518,
   2021R1A5A1021944]; BK21 FOUR Intelligence Computing (Dept. of Computer
   Science and Engineering, SNU) - National Research Foundation of Korea
   (NRF) [4199990214639]; Samsung Electronics Co., Ltd [IO220411-09496-01];
   Greenlabs [0536-20220078]
FX This work was supported by Institute of Information & communications
   Technology Planning & Evaluation (IITP) grant funded by the Korea
   government (MSIT) (No.2020-0-01337, (SW STAR LAB) Research on
   Highly-practical Automated Software Repair & No. 2021-0-00758 & No.
   2022-0-00995), National Research Foundation of Korea (No.
   2020R1C1C1014518 & No. 2021R1A5A1021944), BK21 FOUR Intelligence
   Computing (Dept. of Computer Science and Engineering, SNU) funded by
   National Research Foundation of Korea (NRF) (4199990214639),Samsung
   Electronics Co., Ltd (IO220411-09496-01), and Greenlabs (No.
   0536-20220078).
CR Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2019, Microsoft SEAL (release 3.3)
   [Anonymous], 2019, HElib
   [Anonymous], 2019, ABOUT US
   Archer DW, 2019, PROCEEDINGS OF THE 7TH ACM WORKSHOP ON ENCRYPTED COMPUTING & APPLIED HOMOMORPHIC CRYPTOGRAPHY (WAHC'19), P57, DOI 10.1145/3338469.3358945
   Aubry Pascal, 2019, Cryptology ePrint Archive, Report 2019/963
   Baader Franz, 1998, TERM REWRITING ALL
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   Boneh D, 2013, Appl Cryptogr Netw Secur, P102, DOI [10.1007/978-3-642-38980-1_7, DOI 10.1007/978-3-642-38980-17, 10.1007/978-3-642-38980-17]
   Boyle JM, 1997, MODERN SOFTWARE TOOLS FOR SCIENTIFIC COMPUTING, P353
   Brakerski Zvika, 2014, ACM Transactions on Computation Theory, V6, DOI 10.1145/2633600
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Brayton R, 2010, LECT NOTES COMPUT SC, V6174, P24, DOI 10.1007/978-3-642-14295-6_5
   Buchwald S, 2015, LECT NOTES COMPUT SC, V9031, P171, DOI 10.1007/978-3-662-46663-6_9
   Carpov S, 2018, LECT NOTES COMPUT SC, V10765, P275, DOI 10.1007/978-3-319-78825-8_23
   Carpov S, 2016, IEEE INT CONF CLOUD, P593, DOI [10.1109/CLOUD.2016.82, 10.1109/CLOUD.2016.0084]
   Carpov Sergiu, 2015, P 3 INT WORKSH SEC C, P13
   Çetin GS, 2015, LECT NOTES COMPUT SC, V9230, P61, DOI 10.1007/978-3-319-22174-8_4
   Cheon JH, 2017, LECT NOTES COMPUT SC, V10624, P409, DOI 10.1007/978-3-319-70694-8_15
   Cheon JH, 2015, LECT NOTES COMPUT SC, V8976, P194, DOI 10.1007/978-3-662-48051-9_15
   Chiba Yuki, 2005, P 7 ACM SIGPLAN INT, P59, DOI [10.1145/1069774.1069780, DOI 10.1145/1069774.1069780]
   Cowan M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P375, DOI 10.1145/3453483.3454050
   Crockett E, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1020, DOI 10.1145/3243734.3243828
   Dathathri R, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P546, DOI 10.1145/3385412.3386023
   Dathathri R, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P142, DOI 10.1145/3314221.3314628
   De Micheli G., 2015, The EPFL Combinational Benchmark Suite
   Dowlin N, 2016, PR MACH LEARN RES, V48
   Eldib H, 2016, LECT NOTES COMPUT SC, V9780, P343, DOI 10.1007/978-3-319-41540-6_19
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Gentry C, 2009, ACM S THEORY COMPUT, P169, DOI 10.1145/1536414.1536440
   Heule S, 2016, ACM SIGPLAN NOTICES, V51, P237, DOI [10.1145/2980983.2908121, 10.1145/2908080.2908121]
   Howgrave-Graham N, 2001, LECT NOTES COMPUT SC, V2146, P51
   Jha Susmit, 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1. ICSE'10, V1, P215, DOI DOI 10.1145/1806799.1806833
   Kapur Deepak., 1987, ACM SIGSAM B, V21, P6, DOI DOI 10.1145/36330.36332
   Lauter K, 2011, PROCEEDINGS OF THE 3RD ACM WORKSHOP CLOUD COMPUTING SECURITY WORKSHOP (CCSW'11), P113
   Lee D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P503, DOI 10.1145/3385412.3385996
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Lee W, 2015, LECT NOTES COMPUT SC, V9291, P18, DOI 10.1007/978-3-662-48288-9_2
   Lu W., 2016, IACR Cryptology ePrint Archive, V2016, P1163
   Malik R, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1049, DOI 10.1145/3453483.3454094
   Nandi C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485496
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Oded G., 2009, Basic Applications, V2
   Plump Detlef., 2002, Electron. Notes Theor. Comput. Sci., V51, P277, DOI DOI 10.1016/S1571-0661(04)80210-X
   Wang YR, 2020, Arxiv, DOI arXiv:2002.07951
   Sasnauskas R., 2017, abs/1711.04422
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   SyGuS, 2019, The 6th Syntax-Guided Synthesis Competition
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   van Dijk M, 2010, LECT NOTES COMPUT SC, V6110, P24
   Viand A, 2018, WAHC'18: PROCEEDINGS OF THE 6TH WORKSHOP ON ENCRYPTED COMPUTING & APPLIED HOMOMORPHIC CRYPTOGRAPHY, P49, DOI 10.1145/3267973.3267978
   Visser Eelco, 1998, ACM INT C FUNCT PROG, DOI DOI 10.1145/289423.289425
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Warren H., 2012, Hacker's delight, V2nd
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Yang Yichen, 2021, arXiv, DOI [DOI 10.48550/ARXIV.2101.01332, 10.48550/ARXIV.2101.01332]
NR 62
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2023
VL 45
IS 3
AR 16
DI 10.1145/3591622
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA T8ME2
UT WOS:001080461200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Dal Lago, U
   Grellois, C
AF Dal Lago, Ugo
   Grellois, Charles
TI Probabilistic Termination by Monadic Affine Sized Typing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Probabilistic lambda-calculus; almost-sure termination; sized types;
   affine types; parametrized reducibility
ID LAMBDA-CALCULUS
AB We introduce a system of monadic affine sized types, which substantially generalizes usual sized types and allows in this way to capture probabilistic higher-order programs that terminate almost surely. Going beyond plain, strong normalization without losing soundness turns out to be a hard task, which cannot be accomplished without a richer, quantitative notion of types, but also without imposing some affinity constraints. The proposed type system is powerful enough to type classic examples of probabilistically terminating programs such as random walks. The way typable programs are proved to be almost surely terminating is based on reducibility but requires a substantial adaptation of the technique.
C1 [Dal Lago, Ugo] Univ Bologna, Mura Anteo Zamboni 7, I-40127 Bologna, Italy.
   [Dal Lago, Ugo] INRIA Sophia Antipolis, Dipartimento Informat Sci & Ingn, Mura Anteo Zamboni 7, I-40127 Bologna, Italy.
   [Grellois, Charles] INRIA Sophia Antipolis, Bologna, Italy.
C3 University of Bologna
RP Dal Lago, U (corresponding author), Univ Bologna, Mura Anteo Zamboni 7, I-40127 Bologna, Italy.; Dal Lago, U (corresponding author), INRIA Sophia Antipolis, Dipartimento Informat Sci & Ingn, Mura Anteo Zamboni 7, I-40127 Bologna, Italy.
EM ugo.dallago@unibo.it; charles.grellois@inria.fr
RI Dal Lago, Ugo/AAA-6022-2020
OI Dal Lago, Ugo/0000-0001-9200-070X
FU ANR [12IS02001, 14CE250005]
FX This work is partially supported by the ANR projects 12IS02001 PACE and
   14CE250005 ELICA.
CR Abel A, 2004, RAIRO-THEOR INF APPL, V38, P277, DOI 10.1051/ita:2004015
   Amadio RM, 1998, LECT NOTES COMPUT SC, V1378, P48, DOI 10.1007/BFb0053541
   [Anonymous], 1956, Automata Studies, Annals of Mathematics Studies
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Barthe G, 2008, LECT NOTES COMPUT SC, V5213, P493, DOI 10.1007/978-3-540-87531-4_35
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe G, 2009, LECT NOTES COMPUT SC, V5520, P100, DOI 10.1007/978-3-642-03153-3_3
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Bournez O, 2002, LECT NOTES COMPUT SC, V2378, P252
   Brázdil T, 2010, PROC APPL MATH, V135, P863
   Cappai Alberto, 2015, Fundamentals of Computation Theory. 20th International Symposium, FCT 2015. Proceedings: LNCS 9210, P311, DOI 10.1007/978-3-319-22177-9_24
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   CHATTERJEE K, 2016, POPL 16, V51, P327, DOI DOI 10.1145/2837614.2837639
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Dal Lago U, 2005, IEEE S LOG, P366
   Dal Lago U, 2014, SCI ANN COMPUT SCI, V24, P177, DOI 10.7561/SACS.2014.2.177
   Dal Lago U, 2017, LECT NOTES COMPUT SC, V10201, P393, DOI 10.1007/978-3-662-54434-1_15
   Dal Lago U, 2015, INFORM COMPUT, V241, P114, DOI 10.1016/j.ic.2014.10.009
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Dal Lago U, 2011, THEOR COMPUT SCI, V412, P2029, DOI 10.1016/j.tcs.2010.12.025
   Dal Lago Ugo, 2011, LECT NOTES COMPUTER, P89, DOI [10.1007/978-3-642-31485-8_3, DOI 10.1007/978-3-642-31485-8_3]
   Esparza Javier, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P123, DOI 10.1007/978-3-642-31424-7_14
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Goodman ND., 2008, UAI, P220
   Hofmann M, 1998, LECT NOTES COMPUT SC, V1414, P275, DOI 10.1007/BFb0028020
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2015, LECT NOTES COMPUT SC, V9234, P307, DOI 10.1007/978-3-662-48057-1_24
   Manning Christopher D., 2001, Foundations of Statistical Natural Language Processing
   McIver A., 2018, J P ACM PROGRAM LANG, V2, P33
   McIver Annabelle., 2005, MG COMP SCI
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   PEARL J, 1989, PROBABILISTIC REASON
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Terui K, 2007, ARCH MATH LOGIC, V46, P253, DOI 10.1007/s00153-007-0042-6
   Thrun S., 2002, Robotic mapping: A survey
   XI H, 2002, HIGHER ORDER SYMBOLI, V15, P91
NR 41
TC 10
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2019
VL 41
IS 2
SI SI
AR 10
DI 10.1145/3293605
PG 65
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JT8FU
UT WOS:000501220300004
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Ugawa, T
   Ritson, CG
   Jones, RE
AF Ugawa, Tomoharu
   Ritson, Carl G.
   Jones, Richard E.
TI Transactional Sapphire: Lessons in High-Performance, On-the-fly Garbage
   Collection
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Concurrent garbage collection; replicating garbage collection; parallel
   garbage collection; transactional memory; model checking; reference
   objects; Java
ID REAL-TIME; JAVA
AB Constructing a high-performance garbage collector is hard. Constructing a fully concurrent 'on-the-fly' compacting collector is much more so. We describe our experience of implementing the Sapphire algorithm as the first on-the-fly, parallel, replication copying, garbage collector for the Jikes RVM Java virtual machine (JVM). In part, we explain our innovations such as copying with hardware and software transactions, onthe-fly management of Java's reference types, and simple, yet correct, lock-free management of volatile fields in a replicating collector. We fully evaluate, for the first time, and using realistic benchmarks, Sapphire's performance and suitability as a low latency collector. An important contribution of this work is a detailed description of our experience of building an on-the-fly copying collector for a complete JVM with some assurance that it is correct. A key aspect of this is model checking of critical components of this complicated and highly concurrent system.
C1 [Ugawa, Tomoharu] Kochi Univ Technol, Sch Informat, Kochi 7828502, Japan.
   [Ritson, Carl G.; Jones, Richard E.] Univ Kent, Sch Comp, Canterbury CT2 7NF, Kent, England.
C3 Kochi University Technology; University of Kent
RP Ugawa, T (corresponding author), Kochi Univ Technol, Sch Informat, Kochi 7828502, Japan.
EM tugawa@acm.org; carl.ritson@gmail.com; r.e.jones@kent.ac.uk
FU EPSRC [EP/H026975/1, EP/M017176/1]; JSPS through KAKENHI [25330080,
   16K00103]; Google; EPSRC [EP/M017176/1] Funding Source: UKRI;
   Grants-in-Aid for Scientific Research [16K00103, 25330080] Funding
   Source: KAKEN
FX We are grateful for the support of the EPSRC through grants EP/H026975/1
   (http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/H026975/1) and
   EP/M017176/1
   (http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/M017176/1), the
   JSPS through KAKENHI grant numbers 25330080 and 16K00103, and Google
   through their Summer of Code (https://summerofcode.withgoogle.com)
   programme.
CR Adl-Tabatabai AR, 2009, INTEGR CIRCUIT SYST, P145, DOI 10.1007/978-1-4419-0263-4_5
   Alpern B, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P51
   [Anonymous], 2012, The Garbage Collection Handbook
   [Anonymous], 2013, INT 64 IA 32 ARCH SO
   Armbruster A, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1324969.1324974
   Arnold M, 2001, ACM SIGPLAN NOTICES, V36, P168, DOI 10.1145/381694.378832
   Auerbach Joshua., 2008, Proceedings of the 8th ACM Int'l Conf. on Embedded Software, P245
   Azul, 2010, CISC VIS NETW IND GL
   Bacon DF, 2012, ACM SIGPLAN NOTICES, V47, P23, DOI 10.1145/2345156.2254068
   Bacon DF, 2003, ACM SIGPLAN NOTICES, V38, P285, DOI 10.1145/640128.604155
   Bacon DF, 1998, ACM SIGPLAN NOTICES, V33, P258, DOI 10.1145/277652.277734
   BAKER HG, 1978, COMMUN ACM, V21, P280, DOI 10.1145/359460.359470
   BAKER HG, 1992, SIGPLAN NOTICES, V27, P66, DOI 10.1145/130854.130862
   Baker J, 2006, PROCEEDINGS OF THE 12TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, P384
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   Bekkers Yves, 1992, LECT NOTES COMPUTER, V637, DOI [10.1007/BFb0017181, DOI 10.1007/BFB0017181]
   BENARI M, 1984, ACM T PROGR LANG SYS, V6, P333, DOI 10.1145/579.587
   Blackburn S. M., 2002, ACM INT S MEM MAN BE, P175, DOI DOI 10.1145/512429.512452
   Blackburn SM, 2004, PROC INT CONF SOFTW, P137, DOI 10.1109/ICSE.2004.1317436
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Boehm Hans, 2011, P ACM SIGPLAN INT S, DOI [10.1145/1993478, DOI 10.1145/1993478]
   Boehm Hans-Juergen, 2008, FDN C CONCURRENCY MO, P68, DOI [10.1145/1375581.1375591, DOI 10.1145/1375581.1375591]
   Brooks RodneyA., 1984, Proceedings of the 1984 ACM Symposium on LISP and Functional Programming, LFP '84, P256
   Cheng P, 2001, ACM SIGPLAN NOTICES, V36, P125, DOI 10.1145/381694.378823
   Cierniak M, 2005, CONCURR COMP-PRACT E, V17, P617, DOI 10.1002/cpe.852
   Click Cliff, 2005, P 1 ACMUSENIX INT C, P46, DOI [DOI 10.1145/1064979.1064988EVENT-PLACE:CHICAGO,IL,USA, 10.1145/1064979.1064988, DOI 10.1145/1064979.1064988]
   Detlefs David, 2004, P 4 INT S MEM MAN VA, DOI [10.1145/1029873.1029879, DOI 10.1145/1029873.1029879]
   Dieckmann S, 1999, LECT NOTES COMPUT SC, V1628, P92
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Doligez D., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P70, DOI 10.1145/174675.174673
   Domani T, 2000, ACM SIGPLAN NOTICES, V35, P274, DOI 10.1145/358438.349336
   Georges A, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P367
   Gosling J., 2015, JAVA LANGUAGE SPECIF
   Gupta Rajiv, 2008, P ACM SIGPLAN C PROG, DOI [10.1145/1375581, DOI 10.1145/1375581]
   Guyer Samuel Z., 2014, P ACM SIGPLAN INT S
   Henriksson R., 1998, THESIS
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   Herlihy M., 2008, ART MULTIPROCESSOR P
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Hong S, 2015, SOFTW TEST VERIF REL, V25, P191, DOI 10.1002/stvr.1564
   Hudson R.L., 2001, JGI 01, P48, DOI [10.1145/376656.376810, DOI 10.1145/376656.376810]
   Hudson RL, 2003, CONCURR COMP-PRACT E, V15, P223, DOI 10.1002/cpe.712
   HUGHES RJM, 1982, SOFTWARE PRACT EXPER, V12, P1081, DOI 10.1002/spe.4380121108
   Jacek N, 2016, ACM SIGPLAN NOTICES, V51, P584, DOI [10.1145/2980983.2908120, 10.1145/2908080.2908120]
   Jones R, 2005, Fifth IEEE International Workshop on Source Code Analysis and Manipulation, Proceedings, P129, DOI 10.1109/SCAM.2005.1
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Kalibera T, 2013, PROCEEDINGS OF THE ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '13), P63
   Kalibera T, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2398857.2384641
   Kalibera T, 2011, ACM SIGPLAN NOTICES, V46, P89, DOI 10.1145/2076022.1993492
   Kalibera T, 2011, ACM T COMPUT SYST, V29, DOI 10.1145/2003690.2003692
   Kalibera T, 2009, REAL TIM SYST SYMP P, P81, DOI 10.1109/RTSS.2009.40
   Kalibera Tomas., 2009, Proceedings of the 7th Int'l Workshop on Java Technologies for Real-Time and Embedded Systems, JTRES'09, P100, DOI [10.1145/1620405.1620420, DOI 10.1145/1620405.1620420]
   Kermany H, 2006, ACM SIGPLAN NOTICES, V41, P354, DOI 10.1145/1133981.1134023
   McCloskey Bill, 2008, RC24505 IBM
   McGachey P, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P217, DOI 10.1145/1345206.1345238
   McKinley Kathryn, 2012, P ACM SIGPLAN INT S
   Nettles Scott, 1993, P 34 ACM SIGPLAN C P, DOI [10.1145/155090.155111, DOI 10.1145/155090.155111]
   Oracle JNI, 2015, JAV NAT INT 6 0 API
   Pirinen P. P., 1998, P INT S MEM MAN, V98, P20, DOI [10.1145/286860.286863, DOI 10.1145/286860.286863]
   Pizlo F., 2011, P 9 INT C PRINC PRAC, P171
   Pizlo F, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P146, DOI 10.1145/1806596.1806615
   Pizlo F, 2007, ISMM'07: PROCEEDINGS OF THE 2007 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P159
   Pizlo F, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P33, DOI 10.1145/1375581.1375587
   Pizlo F, 2007, LCTES'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN-SIGBED CONFERENCE ON LANGUAGES, COMPILERS, AND TOOLS FOR EMBEDDED SYSTEMS, P123
   Pizo F, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P81
   PLDI 2001, 2001, P ACM SIGPLAN C PROG, DOI [10.1145/378795, DOI 10.1145/378795]
   Printezis T, 2006, SCI COMPUT PROGRAM, V62, P164, DOI 10.1016/j.scico.2006.02.004
   Puffitsch W, 2013, CONCURR COMP-PRACT E, V25, P2269, DOI 10.1002/cpe.2921
   Puffitsch Wolfgang, 2011, P 9 INT WORKSH JAV T, P64, DOI [10.1145/2043910.2043921, DOI 10.1145/2043910.2043921]
   Ritson CarlG., 2013, COMMUNICATING PROCES, P271
   Saiki Hideaki, 2005, P ISORC 2005, P140, DOI [10.1109/ISORC.2005.45, DOI 10.1109/ISORC.2005.45]
   Vitek J., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P33
   Wilson Paul R., 1994, TECHNICAL REPORT
   Yu Y., 2005, P 20 ACM S OP SYST P, P221
NR 75
TC 3
Z9 3
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2018
VL 40
IS 4
AR 15
DI 10.1145/3226225
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HJ4CA
UT WOS:000457120400002
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Reps, T
   Turetsky, E
   Prabhu, P
AF Reps, Thomas
   Turetsky, Emma
   Prabhu, Prathmesh
TI Newtonian Program Analysis via Tensor Product
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Newton's method; polynomial fixed-point equation; interprocedural
   program analysis; semiring; regular expression; tensor product
ID DATA-FLOW ANALYSIS; PATH PROBLEMS; ALGORITHMS
AB Recently, Esparza et al. generalized Newton's method-a numerical-analysis algorithm for finding roots of real-valued functions-to a method for finding fixed-points of systems of equations over semirings. Their method provides a new way to solve interprocedural dataflow-analysis problems. As in its real-valued counterpart, each iteration of their method solves a simpler "linearized" problem.
   One of the reasons this advance is exciting is that some numerical analysts have claimed that "'all' effective and fast iterative [numerical] methods are forms (perhaps very disguised) of Newton's method." However, there is an important difference between the dataflow-analysis and numerical-analysis contexts: When Newton's method is used in numerical-analysis problems, commutativity of multiplication is relied on to rearrange an expression of the form "a * X * b + c * X * d" into "(a * b + c * d) * X." Equations with such expressions correspond to path problems described by regular languages. In contrast, when Newton's method is used for interprocedural dataflow analysis, the "multiplication" operation involves function composition and hence is non-commutative: " a * X * b + c * X * d" cannot be rearranged into "(a * b + c * d) * X." Equations with such expressions correspond to path problems described by linear context-free languages (LCFLs).
   In this article, we present an improved technique for solving the LCFL sub-problems produced during successive rounds of Newton's method. Our method applies to predicate abstraction, on which most of today's software model checkers rely.
C1 [Reps, Thomas] Univ Wisconsin, Dept Comp Sci, 1210 W Dayton St, Madison, WI 53703 USA.
   [Reps, Thomas] GrammaTech Inc, 440 Sci Dr,Suite 303, Madison, WI 53711 USA.
   [Prabhu, Prathmesh] Univ Wisconsin, Madison, WI USA.
   [Turetsky, Emma] GrammaTech Inc, 531 Esty St, Ithaca, NY 14850 USA.
   [Prabhu, Prathmesh] Google Inc, 1600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
C3 University of Wisconsin System; University of Wisconsin Madison;
   University of Wisconsin System; University of Wisconsin Madison; Google
   Incorporated
RP Reps, T (corresponding author), Univ Wisconsin, Dept Comp Sci, 1210 W Dayton St, Madison, WI 53703 USA.; Reps, T (corresponding author), GrammaTech Inc, 440 Sci Dr,Suite 303, Madison, WI 53711 USA.
EM reps@cs.wisc.edu; turetsky@grammatech.com; pprabhu@google.com
FU NSF [CCF0904371]; ONR [N00014-{09-1-0510, 11-C-0447}]; DARPA
   [HR0011-12-2-0012]; ARL [W911NF-09-1-0413]; AFRL [FA9550-09-10279];
   DARPA CRASH [FA8650-10-C-7088]; DARPA MUSE [FA8750-14-2-0270]; DARPA
   STAC [FA8750-15-C-0082]; UW-Madison Office of the Vice Chancellor for
   Research and Graduate Education; Wisconsin Alumni Research Foundation
FX This work was supported in part by a gift from Rajiv and Ritu Batra; by
   NSF under Grant No. CCF0904371; by ONR under Grants No.
   N00014-{09-1-0510, 11-C-0447}; by DARPA under cooperative agreement
   HR0011-12-2-0012; by ARL under Grant No. W911NF-09-1-0413; by AFRL under
   Grant No. FA9550-09-10279, DARPA CRASH award FA8650-10-C-7088, DARPA
   MUSE award FA8750-14-2-0270, and DARPA STAC award FA8750-15-C-0082; and
   by the UW-Madison Office of the Vice Chancellor for Research and
   Graduate Education with funding from the Wisconsin Alumni Research
   Foundation. Any opinions, findings, and conclusions or recommendations
   expressed in this publication are those of the authors, and do not
   necessarily reflect the views of the sponsoring agencies.
CR [Anonymous], IEEE T COMPUTERS
   [Anonymous], 1960, IRE transactions on Electronic Computers, DOI [DOI 10.1109/TEC.1960.5221603, 10.1109/TEC.1960.5221603]
   Ball T., 2000, SPIN WORKSH
   Bouajjani A., 2003, POPL
   Cocke J., 1970, P S COMP OPT
   Cousot P., 1978, Formal Descriptions of Programming Concepts
   Droste M, 2009, MONOGR THEOR COMPUT, P1, DOI 10.1007/978-3-642-01492-5
   Elder M., 2014, T PROG LANG SYST, V36, P4
   Esparza J., 2008, ICALP
   Esparza J, 2010, J ACM, V57, DOI 10.1145/1857914.1857917
   Farzan A., 2015, FMCAD
   Gallagher J. P., 2016, COMMUNICATION
   Ganty P., 2016, SOFTW TOOLS TECH TRA
   Graf S., 1997, CAV
   GRAHAM SL, 1976, J ACM, V23, P172, DOI 10.1145/321921.321939
   Grathwohl N. B. B., 2014, CSL LICS
   Kafle B., 2016, P 3 WORKSH HORN CLAU
   Kafle B., 2015, COMPUTER LANGUAGES S
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   KAM JB, 1976, J ACM, V23, P158, DOI 10.1145/321921.321938
   Kildall G. A., 1973, POPL
   Kincaid Z., 2016, TR1840 U WISC COMP S
   Knoop J., 1992, CC
   KNUTH DE, 1977, INFORM PROCESS LETT, V6, P1, DOI 10.1016/0020-0190(77)90002-3
   Lal A., 2005, CAV
   Lal A., 2007, TR1598 U WISC COMP S
   Lal A., 2008, TACAS
   Lal A., 2007, STAT AN S
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Lal Akash., 2006, CAV
   Litvinov GL, 2013, SOFT COMPUT, V17, P1767, DOI 10.1007/s00500-013-1027-5
   MONCKE U, 1991, LECT NOTES COMPUT SC, V545, P151
   Muller-Olm M., 2005, ESOP
   Muller-Olm M., 2004, POPL
   Ramalingam G., 1996, Bounded Incremental Computation
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T., 2016, POPL
   Reps Thomas., 2007, FSTTCS
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   Schlund M., 2013, LPAR
   Schlund M., 2016, THESIS
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   Tapia R. A., 2008, INVERSE SHIFTED INVE
   TARJAN RE, 1981, J ACM, V28, P577, DOI 10.1145/322261.322272
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   Ullman J. D., 1973, Acta Informatica, V2, P191, DOI 10.1007/BF00289078
   Ullman J. D., 1986, FDN COMPUTER SCI
   Vyssotsky V., 1963, GRAPH THEORETI UNPUB
   Yannakakis M., 1990, PODS
NR 49
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2017
VL 39
IS 2
AR 9
DI 10.1145/3024084
PG 72
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FA1IG
UT WOS:000405192200004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Patrignani, M
   Agten, P
   Strackx, R
   Jacobs, B
   Clarke, D
   Piessens, F
AF Patrignani, Marco
   Agten, Pieter
   Strackx, Raoul
   Jacobs, Bart
   Clarke, Dave
   Piessens, Frank
TI Secure Compilation to Protected Module Architectures
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Secure Compilation; Object-Oriented Programming; Untyped Machine Code;
   Security; Fully abstract compilation; protected module architecture
ID FULLY ABSTRACT; SEMANTICS
AB A fully abstract compiler prevents security features of the source language from being bypassed by an attacker operating at the target language level. Unfortunately, developing fully abstract compilers is very complex, and it is even more so when the target language is an untyped assembly language. To provide a fully abstract compiler that targets untyped assembly, it has been suggested to extend the target language with a protected module architecture-an assembly-level isolation mechanism which can be found in next-generation processors. This article provides a fully abstract compilation scheme whose source language is an object-oriented, high-level language and whose target language is such an extended assembly language. The source language enjoys features such as dynamic memory allocation and exceptions. Secure compilation of first-order method references, cross-package inheritance, and inner classes is also presented. Moreover, this article contains the formal proof of full abstraction of the compilation scheme. Measurements of the overhead introduced by the compilation scheme indicate that it is negligible.
C1 [Patrignani, Marco; Agten, Pieter; Strackx, Raoul; Jacobs, Bart; Clarke, Dave; Piessens, Frank] Katholieke Univ Leuven, Dept Comp Sci, iMinds DistriNet, B-3000 Leuven, Belgium.
   [Clarke, Dave] Dept Informat Technol, Uppsala, Sweden.
C3 IMEC; KU Leuven
RP Patrignani, M (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Celestijnenlaan 200-A, B-3000 Leuven, Belgium.
EM marco.patrignani@cs.kuleuven.be; pieter.agten@cs.kuleuven.be;
   raoul.strackx@cs.kuleuven.be; bart.jacobs@cs.kuleuven.be;
   dave.clarke@it.uu.se; frank.piessens@cs.kuleuven.be
RI Piessens, Frank/B-1695-2014; Jacobs, Bart/B-1271-2014
OI Patrignani, Marco/0000-0003-3411-9678; Jacobs, Bart/0000-0002-3605-249X
FU Intel Labs University Research Office; Research Fund KU Leuven; EU FP7
   project NESSoS; Prevention of and Fight against Crime Programme of the
   European Union (B-CCENTRE); Research Foundation Flanders (FWO)
FX This work has been supported in part by the Intel Labs University
   Research Office. This research is also partially funded by the Research
   Fund KU Leuven, and by the EU FP7 project NESSoS. With the financial
   support from the Prevention of and Fight against Crime Programme of the
   European Union (B-CCENTRE). Marco Patrignani and Pieter Agten hold a
   Ph.D. fellowship from the Research Foundation Flanders (FWO). Raoul
   Strackx is a Ph.D. fellow of the agency for Innovation by Science and
   Technology (IWT).
CR Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abadi M, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2240276.2240279
   Abdullahi SE, 1998, ACM COMPUT SURV, V30, P330, DOI 10.1145/292469.292471
   Agten P, 2012, P IEEE CSFW, P171, DOI 10.1109/CSF.2012.12
   Ahmed A, 2011, ACM SIGPLAN NOTICES, V46, P431, DOI 10.1145/2034574.2034830
   [Anonymous], 2004, P 2004 INT S COD GEN
   [Anonymous], P 42 ANN ACM SIGPLAN
   [Anonymous], 2013, Em: Proceedings of the 2nd international workshop on hardware and architectural support for security and privacy
   Avonds Niels, 2013, SEC PRIV COMM NETW S
   Chlipala Adam, 2007, SIGPLAN NOTICES, V42, P6
   Curien PL, 2007, ELECTRON NOTES THEOR, V172, P301, DOI 10.1016/j.entcs.2007.02.011
   deBoer FS, 2005, LECT NOTES COMPUT SC, V3657, P49
   Ducournau R, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922655
   Eldefrawy K., 2012, P NETW DISTR SYST SE
   Erlingsson U, 2010, HANDBOOK OF INFORMATION AND COMMUNICATION SECURITY, P633, DOI 10.1007/978-3-642-04117-4_30
   Flanagan David, 1998, JAVA NUTSHELL DTSCH
   Fournet C, 2013, ACM SIGPLAN NOTICES, V48, P371, DOI 10.1145/2480359.2429114
   Franchetti MJ, 2013, IND INNOV SER, P1, DOI 10.1111/ina.12055
   Halderman JA, 2009, COMMUN ACM, V52, P91, DOI 10.1145/1506409.1506429
   Hoekstra M., 2013, HASP@ ISCA, P11, DOI 10.1145/
   Intel Corporation, 2013, SOFTW GUARD EXT PROG
   Jagadeesan R, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P161, DOI 10.1109/CSF.2011.18
   Jeffrey A, 2005, LECT NOTES COMPUT SC, V3444, P423
   Jeffrey A, 2005, THEOR COMPUT SCI, V338, P17, DOI 10.1016/j.tcs.2004.10.012
   Kennedy A, 2006, THEOR COMPUT SCI, V364, P311, DOI 10.1016/j.tcs.2006.08.014
   Larsen P, 2014, IEEE SECUR PRIV, V12, P28, DOI 10.1109/MSP.2013.129
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   McCune JM, 2010, P IEEE S SECUR PRIV, P143, DOI 10.1109/SP.2010.17
   McCune JM, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P315, DOI 10.1145/1357010.1352625
   McKeen Frank, 2013, HASP 13
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Noorman Job, 2013, P 22 USENIX C SEC S
   Patrignani Marco, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P176, DOI 10.1007/978-3-319-03542-0_13
   Patrignani Marco, 2014, P 29 ANN ACM S APPL
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Roemer R, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2133375.2133377
   Shacham H., 2004, ACM COMPUTER COMMUNI, P298, DOI 10.1145/1030083.1030124
   Singaravelu Lenin, 2006, SIGOPS OPER SYST REV, V40, P4
   Strackx R., 2009, P 2 EUR WORKSH SYST
   Strackx R., 2012, Proceedings of the 2012 ACM conference on Computer and communications security, CCS '12, P2
   Strackx R., 2013, Isse 2013 securing electronic business processes, P241
   Strackx R, 2010, L N INST COMP SCI SO, V50, P344
   van Dooren Marko, 2013, Formal Methods for Components and Objects. 11th International Symposium, FMCO 2012. Revised Lectures: LNCS 7866, P38, DOI 10.1007/978-3-642-40615-7_2
   Vasudevan A, 2013, P IEEE S SECUR PRIV, P430, DOI 10.1109/SP.2013.36
   Wartell R., 2012, Proceedings of the 2012 ACM conference on Computer and communications security, P157
   Winter Johannes, 2012, Public Key Infrastructures, Services and Applications. 8th European Workshop (EuroPKI 2011). Revised Selected Papers, P176, DOI 10.1007/978-3-642-29804-2_12
   Witchel E, 2002, ACM SIGPLAN NOTICES, V37, P304, DOI 10.1145/605432.605429
   Younan Yves, 2008, THESIS DEP COMPUTER
   Younan Yves, 2012, COMPUT SURV, V44, p[3, 17]
NR 49
TC 52
Z9 59
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2015
VL 37
IS 2
AR 6
DI 10.1145/2699503
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG7HR
UT WOS:000353474100002
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Tripakis, S
   Lickly, B
   Henzinger, TA
   Lee, EA
AF Tripakis, Stavros
   Lickly, Ben
   Henzinger, Thomas A.
   Lee, Edward A.
TI A Theory of Synchronous Relational Interfaces
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Design; Languages; Theory; Verification; Compositionality;
   interfaces; refinement; substitutability
ID SPECIFICATION
AB Compositional theories are crucial when designing large and complex systems from smaller components. In this work we propose such a theory for synchronous concurrent systems. Our approach follows so-called interface theories, which use game-theoretic interpretations of composition and refinement. These are appropriate for systems with distinct inputs and outputs, and explicit conditions on inputs that must be enforced during composition. Our interfaces model systems that execute in an infinite sequence of synchronous rounds. At each round, a contract must be satisfied. The contract is simply a relation specifying the set of valid input/output pairs. Interfaces can be composed by parallel, serial or feedback composition. A refinement relation between interfaces is defined, and shown to have two main properties: (1) it is preserved by composition, and (2) it is equivalent to substitutability, namely, the ability to replace an interface by another one in any context. Shared refinement and abstraction operators, corresponding to greatest lower and least upper bounds with respect to refinement, are also defined. Input-complete interfaces, that impose no restrictions on inputs, and deterministic interfaces, that produce a unique output for any legal input, are discussed as special cases, and an interesting duality between the two classes is exposed. A number of illustrative examples are provided, as well as algorithms to compute compositions, check refinement, and so on, for finite-state interfaces.
C1 [Tripakis, Stavros] Univ Calif Berkeley, Dept EECS, DOP Ctr, Berkeley, CA 94720 USA.
C3 University of California System; University of California Berkeley
RP Tripakis, S (corresponding author), Univ Calif Berkeley, Dept EECS, DOP Ctr, 545Q,Cory Hall, Berkeley, CA 94720 USA.
EM stavros@eecs.berkeley.edu; blickly@eecs.berkeley.edu; tah@ist.ac.at;
   eal@eecs.berkeley.edu
RI Lee, Edward/AAU-4604-2021
OI Lee, Edward/0000-0002-5663-0584; Tripakis, Stavros/0000-0002-1777-493X
FU National Science Foundation (NSF) [CCR-0225610, 0720882, 0931843]; U.S.
   Army Research Office (ARO) [W911NF-07-2-0019]; U.S. Air Force Office of
   Scientific Research (MURI) [FA9550-06-0312, FA9550-06-1-0244]; Air Force
   Research Lab (AFRL); Multiscale Systems Center (MuSyC); Bosch; National
   Instruments; Thales; Toyota; European Union; Swiss National Science
   Foundation; ERC; FWF [S11402-N23]
FX This work was supported in part by the Center for Hybrid and Embedded
   Software Systems (CHESS) at UC Berkeley, which receives support from the
   National Science Foundation (NSF awards #CCR-0225610 (ITR), #0720882
   (CSR-EHS: PRET) and #0931843 (ActionWebs)), the U.S. Army Research
   Office (ARO #W911NF-07-2-0019), the U.S. Air Force Office of Scientific
   Research (MURI #FA9550-06-0312 and AF-TRUST #FA9550-06-1-0244), the Air
   Force Research Lab (AFRL), the Multiscale Systems Center (MuSyC) and the
   following companies: Bosch, National Instruments, Thales, and Toyota.
   This work was also supported by the COMBEST and ArtistDesign projects of
   the European Union, the Swiss National Science Foundation, the ERC
   Advanced Grant QUAREM and the FWF NFN Grant S11402-N23 (RiSE).
CR ABADI M, 1995, ACM T PROGR LANG SYS, V17, P507, DOI 10.1145/203095.201069
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Alur R, 1999, FORM METHOD SYST DES, V15, P7, DOI 10.1023/A:1008739929481
   ALUR R, 1998, LECT NOTES COMPUTER, V1466
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], 2001, Specification and Development of Interactive Systems: FOCUS on Streams, Interfaces, and Refinement
   [Anonymous], 1984, PROC 16 ACM S THEORY, DOI DOI 10.1145/800057.808665
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1989, CWI Q.
   [Anonymous], 1972, Chapter I: Notes on structured programming, em Structured programming
   Back R.-J., 1998, Refinement Calculus
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Benveniste A, 2008, LECT NOTES COMPUT SC, V5382, P200, DOI 10.1007/978-3-540-92188-2_9
   Berry Gerard, 1999, The constructive semantics of pure Esterel.
   Broy M, 1997, J ACM, V44, P850, DOI 10.1145/268999.269004
   CASPI P, 1987, P 14 ACM S PRINC PRO
   Chakrabarti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P414
   CHEON Y, 1994, ACM T SOFTW ENG METH, V3, P221
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   DEALFARO L, 2004, LECT NOTES COMPUTER, V2772, P192
   Desharnais J., 2005, Higher-Order and Symbolic Computation, V18, P51, DOI 10.1007/s10990-005-7006-5
   Dhara KK, 1996, PROC INT CONF SOFTW, P258, DOI 10.1109/ICSE.1996.493421
   Dill D.L., 1987, Trace Theory for Automatic Hierarchical Verification of Speed-independent Circuits
   Doyen L., 2008, Proc. ACM IEEE Int. Conf. Embedded Software, P79, DOI DOI 10.1145/1450058.1450070
   FRAPPIER M, 1998, LOGIC J INT INTEREST, V6, P317
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Guttag JohnV., 1993, LARCH LANGUAGES TOOL
   HEHNER E, 1985, COMMUN ACM, V28, P534
   Henzinger TA, 2007, COMPUTER, V40, P32, DOI 10.1109/MC.2007.364
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 1985, MATH LOGIC PROGRAMMI, P141
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   JONSSON B, 1994, ACM T PROGR LANG SYS, V16, P259, DOI 10.1145/174662.174665
   KAHL W, 2003, ELECT NOTES THEORETI, V44, P51
   Leavens G. T., 2006, Design by Contract with JML
   LEAVENS GT, 1994, SIGPLAN NOTICES, V29, P129, DOI 10.1145/185087.185117
   LEE E, 2008, UCBIEECS20088
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   Lee Edward A., 2001, EMSOFT, P237
   LISKOV B, 1979, LECT NOTES COMPUTER, V86, P354
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   LUBLINERMAN R, 2008, P C EXH DES AUT TEST
   MALIK S, 1994, IEEE T COMPUT AID D, V13, P950, DOI 10.1109/43.293952
   MCMILLAN K, 1997, LECT NOTES COMPUTER, V1254
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Miller SP, 2010, COMMUN ACM, V53, P58, DOI 10.1145/1646353.1646372
   MISRA J, 1981, IEEE T SOFTWARE ENG, V7, P417, DOI 10.1109/TSE.1981.230844
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   NIERSTRASZ O, 1993, SIGPLAN NOTICES, V28, P1, DOI 10.1145/167962.167976
   PARNAS DL, 1983, COMMUN ACM, V26, P572, DOI 10.1145/358161.358168
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   RACLET JB, 2010, MODAL INTERFACE THEO
   RAVINDRAN K, 2010, COMMUNICATION
   Roy P., 2010, NASA FORM METH S, P149
   Shankar N, 1998, LECT NOTES COMPUT SC, V1536, P541, DOI 10.1007/3-540-49213-5_21
   Spivey J. M., 1989, The Z Notation: A Reference Manual
   STARK E, 1985, P 5 C FDN SOFTW TECH
   Tourlakis G., 2008, MATH LOGIC
   TRIPAKIS S, 2009, UCBIEECS200960
   TRIPAKIS S, 2009, P 7 ACM INT C EMB SO, P67
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
   Zhou Y, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347382
   [No title captured]
NR 63
TC 38
Z9 41
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2011
VL 33
IS 4
AR 14
DI 10.1145/1985342.1985345
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 792RI
UT WOS:000292766400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Van Nieuwpoort, RV
   Wrzesinska, G
   Jacobs, CJH
   Bal, HE
AF Van Nieuwpoort, Rob V.
   Wrzesinska, Gosia
   Jacobs, Ceriel J. H.
   Bal, Henri E.
TI Satin: A High-Level and Efficient Grid Programming Model
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Performance; Grid computing; divide-and-conquer; programming
   model
ID PERFORMANCE; IMPLEMENTATION
AB Computational grids have an enormous potential to provide compute power. However, this power remains largely unexploited today for most applications, except trivially parallel programs. Developing parallel grid applications simply is too difficult. Grids introduce several problems not encountered before, mainly due to the highly heterogeneous and dynamic computing and networking environment. Furthermore, failures occur frequently, and resources may be claimed by higher-priority jobs at any time.
   In this article, we solve these problems for an important class of applications: divide-and-conquer. We introduce a system called Satin that simplifies the development of parallel grid applications by providing a rich high-level programming model that completely hides communication. All grid issues are transparently handled in the runtime system, not by the programmer. Satin's programming model is based on Java, features spawn-sync primitives and shared objects, and uses asynchronous exceptions and an abort mechanism to support speculative parallelism.
   To allow an efficient implementation, Satin consistently exploits the idea that grids are hierarchically structured. Dynamic load-balancing is done with a novel cluster-aware scheduling algorithm that hides the long wide-area latencies by overlapping them with useful local work. Satin's shared object model lets the application define the consistency model it needs. If an application needs only loose consistency, it does not have to pay high performance penalties for wide-area communication and synchronization.
   We demonstrate how grid problems such as resource changes and failures can be handled transparently and efficiently. Finally, we show that adaptivity is important in grids. Satin can increase performance considerably by adding and removing compute resources automatically, based on the application's requirements and the utilization of the machines and networks in the grid.
   Using an extensive evaluation on real grids with up to 960 cores, we demonstrate that it is possible to provide a simple high-level programming model for divide-and-conquer applications, while achieving excellent performance on grids. At the same time, we show that the divide-and-conquer model scales better on large systems than the master-worker approach, since it has no single central bottleneck.
C1 [Van Nieuwpoort, Rob V.; Jacobs, Ceriel J. H.; Bal, Henri E.] Vrije Univ Amsterdam, Fac Exacte Wetenschappen, NL-1081 HV Amsterdam, Netherlands.
   [Wrzesinska, Gosia] Pointl Dev, NL-3001 GC Rotterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Van Nieuwpoort, RV (corresponding author), Vrije Univ Amsterdam, Fac Exacte Wetenschappen, De Boelelaan 1081, NL-1081 HV Amsterdam, Netherlands.
EM rob@cs.vu.nl; wrzesinska@pointlogic.com; ceriel@cs.vu.nl; bal@cs.vu.nl
OI van Nieuwpoort, Rob/0000-0002-2947-9444; Bal, H.E./0000-0001-9827-4461;
   Jacobs, Ceriel/0000-0002-4692-7245
CR ADRIAANS P, 2006, 8 INT C GRAMM INF IC
   ARNOLD D, 2002, ICLUL0205 U TENN
   BADIA RM, 2003, J GRID COMPUT, V1
   Baduel L, 2006, GRID COMPUTING: SOFTWARE ENVIRONMENTS AND TOOLS, P205, DOI 10.1007/1-84628-339-6_9
   Bal HE, 1998, ACM T COMPUT SYST, V16, P1, DOI 10.1145/273011.273014
   Baldeschwieler J.E., 1996, Proceedings of the 7th workshop on ACM SIGOPS European workshop: Systems support for worldwide applications, P165
   BIRRELL AD, 1984, ACM T COMPUT SYST, V2, P39, DOI 10.1145/2080.357392
   BLACKSTON D, 1997, P ACM IEEE C SUP SC
   Blumofe R. D., 1997, Proceedings of the USENIX 1997 Annual Technical Conference, P133
   Blumofe R. D., 1999, Journal of the ACM, V46, P720, DOI [10.1109/SFCS.1994.365680, 10.1145/324133.324234]
   Blumofe R. D., 1995, SIGPLAN Notices, V30, P207, DOI 10.1145/209937.209958
   Bornemann M, 2005, LECT NOTES COMPUT SC, V3666, P217
   Butenhof David R., 1997, Programming with POSIX threads
   CAPPELLO F, 2007, P 7 IEEE INT S CLUST, P230
   Carpenter B, 2000, CONCURRENCY-PRACT EX, V12, P1019, DOI 10.1002/1096-9128(200009)12:11<1019::AID-CPE518>3.0.CO;2-G
   Chiu DM, 2000, IEEE SYMP COMP COMMU, P470, DOI 10.1109/ISCC.2000.860682
   Danaher JS, 2005, P SYNCHR CONC OBJ OR
   DECARVALHO SA, NEOBIO LIB
   EAGER DL, 1989, IEEE T COMPUT, V38, P408, DOI 10.1109/12.21127
   EICKERMANN T, 1999, LECT NOTES COMPUTER, V1697, P3
   Foster I, 2005, LECT NOTES COMPUT SC, V3779, P2
   Foster I., 2003, GRID 2 BLUEPRINT NEW, Vsecond
   Freisleben B, 1995, COMPUT ARTIF INTELL, V14, P579
   FRIGO M, 1998, PLDI 98, P212, DOI DOI 10.1145/277652.277725
   Gabriel E, 1998, LECT NOTES COMPUT SC, V1497, P180, DOI 10.1007/BFb0056574
   Goux JP, 2000, NINTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE DISTRIBUTED COMPUTING, PROCEEDINGS, P43, DOI 10.1109/HPDC.2000.868633
   GRAHAM R, 2006, P IEEE INT C CLUST C
   Gropp W, 1996, PARALLEL COMPUT, V22, P789, DOI 10.1016/0167-8191(96)00024-5
   Huang Chao., 2006, P ACM SIGPLAN S PRIN
   IWATA S, 1994, THEOR COMPUT SCI, V123, P329, DOI 10.1016/0304-3975(94)90131-7
   Kalé LV, 2002, CCGRID 2002: 2ND IEEE/ACM INTERNATIONAL SYMPOSIUM ON CLUSTER COMPUTING AND THE GRID, PROCEEDINGS, P230, DOI 10.1109/CCGRID.2002.1017131
   Karonis NT, 2003, J PARALLEL DISTR COM, V63, P551, DOI 10.1016/S0743-7315(03)00002-9
   Kielmann T., 1999, PPoPP '99 Proceedings of the seventh ACM SIGPLAN symposium on Principles and practice of parallel programming, P131
   KISHIMOTO A, 2002, LECT NOTES ARTIF INT, V2338, P56
   Kitsuregawa M, 2007, IFIP INT C NETW PARA, P3, DOI 10.1109/NPC.2007.181
   LANG KJ, 1998, LECT NOTES ARTIF INT, V1433, P1, DOI DOI 10.1007/BFB0054059
   Lea Doug, 2000, JAVA, P36
   LEE HK, 2004, INT J PARALLEL ALGOR, V19, P175
   Lindholm T., 1999, JAVA TM VIRTUAL MACH, V2nd
   Maassen J, 2001, ACM T PROGR LANG SYS, V23, P747, DOI 10.1145/506315.506317
   Maassen J., 2007, P 16 IEEE INT S HIGH, P1
   MAASSEN J, 2008, 1 INT DAT CHALL FIND
   Marlow Simon., 2001, Proceedings of the 2001 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Snowbird, Utah, USA, June 20-22, P274, DOI DOI 10.1145/378795.378858
   MOHR E, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P185, DOI 10.1145/91556.91631
   *MPIF, 1996, MPI 2 EXT MESS PASS
   Neary Michael., 2002, JOINT ACM JAVA GRAND, P56
   Peng L, 2000, CLUSTER 2000: IEEE INTERNATIONAL CONFERENCE ON CLUSTER COMPUTING, PROCEEDINGS, P243, DOI 10.1109/CLUSTR.2000.889067
   Plaat A, 1999, FIFTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P244, DOI 10.1109/HPCA.1999.744376
   Plaat A, 1996, ARTIF INTELL, V87, P255, DOI 10.1016/0004-3702(95)00126-3
   Robinson J, 1996, PROCEEDINGS OF THE FIFTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH PERFORMANCE DISTRIBUTED COMPUTING, P61, DOI 10.1109/HPDC.1996.546174
   Romein JW, 2002, IEEE T PARALL DISTR, V13, P447, DOI 10.1109/TPDS.2002.1003855
   SEINSTRA F, 2008, 1 IEEE INT SCAL COMP
   Seymour K, 2002, LECT NOTES COMPUT SC, V2536, P274
   Slate D. J., 1977, Chess skill in man and machine, P82
   SMITH TF, 1981, J MOL BIOL, V147, P195, DOI 10.1016/0022-2836(81)90087-5
   *SUN MICR, 2008, JAV REM METH INV SPE
   Tanaka Yoshio., 2003, Journal of Grid computing, V1, P41
   TAURA K, 2003, P PPOPP, P216
   Vadhiyar SS, 2005, CONCURR COMP-PRACT E, V17, P235, DOI 10.1002/cpe.927
   van Nieuwpoort R, 2000, CONCURRENCY-PRACT EX, V12, P643, DOI 10.1002/1096-9128(200007)12:8<643::AID-CPE503>3.0.CO;2-A
   Van Nieuwpoort RV, 2005, SCALABLE COMPUT-PRAC, V6, P19
   van Nieuwpoort RV, 2005, CONCURR COMP-PRACT E, V17, P1079, DOI 10.1002/cpe.860
   Verstoep K, 2008, IEEE ACM INT SYMP, P376, DOI 10.1109/CCGRID.2008.71
   VONNIEUWPOORT RV, 2007, P ACM IEEE C SUP SC
   VONNIEUWPOORT RV, 2003, THESIS VRIJE U AMSTE
   VONNIEUWPOORT RV, 2006, P EXPGRID EXP GRID T
   VONNIEUWPOORT RV, 2001, P 8 ACM SIGPLAN S PR, P34
   Waldo J, 1998, IEEE CONCURR, V6, P5, DOI 10.1109/4434.708248
   Wollrath A, 1997, IEEE MICRO, V17, P44, DOI 10.1109/40.591654
   Wolski R, 1999, FUTURE GENER COMP SY, V15, P757, DOI 10.1016/S0167-739X(99)00025-4
   WRZESINSKA G, 2005, P 19 INT PAR DISTR P
   WRZESINSKA G, 2007, P ACM SIGPLAN S PRIN
   WRZESINSKA G, 2007, P COREGRID S, P230
   WRZESINSKA G, 2007, P 2 IEEE INT C E SCI
NR 74
TC 34
Z9 40
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2010
VL 32
IS 3
AR 9
DI 10.1145/1709093.1709096
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 568RN
UT WOS:000275540300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Dolev, S
   Haviv, Y
   Sagiv, M
AF Dolev, Shlomi
   Haviv, Yinnon
   Sagiv, Mooly
TI Self-Stabilization Preserving Compiler
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Reliability; Algorithms; Compilers; self-stabilization;
   abstract state machines
ID SYSTEMS; ATOMICITY
AB Self-stabilization is an elegant approach for designing fault tolerant systems. A system is considered self-stabilizing if, starting in any state, it converges to the desired behavior. Self-stabilizing algorithms were designed for solving fundamental distributed tasks, such as leader election, token circulation and communication network protocols. The algorithms were expressed using guarded commands or pseudo-code. The realization of these algorithms requires the existence of a (self-stabilizing) infrastructure such as a self-stabilizing microprocessor and a self-stabilizing operating system for their execution. Moreover, the high-level description of the algorithms needs to be converted into machine language of the microprocessor. In this article, we present our design for a self-stabilization preserving compiler. The compiler we designed and implemented transforms programs written in a language similar to the abstract state machine (ASM). The compiler preserves the stabilization property of the high level program.
C1 [Dolev, Shlomi; Haviv, Yinnon] Ben Gurion Univ Negev, Dept Comp Sci, IL-84105 Beer Sheva, Israel.
   [Sagiv, Mooly] Tel Aviv Univ, Sch Comp Sci, IL-69978 Tel Aviv, Israel.
C3 Ben Gurion University; Tel Aviv University
RP Dolev, S (corresponding author), Ben Gurion Univ Negev, Dept Comp Sci, IL-84105 Beer Sheva, Israel.
EM dolev@cs.bgu.ac.il; haviv@cs.bgu.ac.il; msagiv@acm.org
OI Dolev, Shlomi/0000-0001-5418-6670
FU Microsoft; Israeli Ministry of Sciences; Deutsche Telekom; Rita Altura
   Trust Chair in Computer Sciences; vaatat; Lynne and William Frankel
   Center for Computer Sciences
FX S. Dolev was partially supported by Microsoft, Israeli Ministry of
   Sciences, Deutsche Telekom, Rita Altura Trust Chair in Computer
   Sciences, vaatat, and Lynne and William Frankel Center for Computer
   Sciences.
CR [Anonymous], 2000, Self-Stabilization
   BORGER E, 1995, SPECIFICATION VALIDA, P231
   Borger E., 2003, ABSTRACT STATE MACHI
   BRUKMAN O, 2003, P INT C SOFTW SCI TE
   Demirbas M, 2002, INT CON DISTR COMP S, P589, DOI 10.1109/ICDCS.2002.1022309
   DIJKSTRA EW, 1974, COMMUN ACM, V17, P643, DOI 10.1145/361179.361202
   Dolev S, 2005, LECT NOTES COMPUT SC, V3764, P113
   Dolev S, 2004, LECT NOTES COMPUT SC, V2981, P31
   Dolev S, 2004, J ACM, V51, P780, DOI 10.1145/1017460.1017463
   DOLEV S, 1993, DISTRIB COMPUT, V7, P3, DOI 10.1007/BF02278851
   DOLEV S, 2008, 200801 BENG U NEG
   DOLEV S, 2002, J HIGH SPEE IN PRESS, P384
   Dolev ST, 2004, 15TH INTERNATIONAL WORKSHOP ON DATABASE AND EXPERT SYSTEMS APPLICATIONS, PROCEEDINGS, P684, DOI 10.1109/DEXA.2004.1333553
   Fox Armando, 2003, SCI AM
   Gouda MG, 1999, 19TH IEEE INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS - WORKSHOP ON SELF-STABILIZING SYSTEMS, PROCEEDINGS, P48, DOI 10.1109/SLFSTB.1999.777486
   GOUDA MG, 1990, ACTA INFORM, V27, P697, DOI 10.1007/BF00264283
   Gurevich Yuri., 1994, SPECIFICATION VALIDA, P9
   HADJICOSTIS CN, 2001, CODING APPROACHES FA
   HERMAN T, 2001, P 5 INT WORKSH SELF, P167
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   LAMPORT L, 1986, DISTRIB COMPUT, V1, P77, DOI 10.1007/BF01786227
   LAMPORT L, 1995, ADV ULTRADEPENDABLE
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   MCGUIRE TM, 2005, AUSTIN PROTOCOL COMP
   Nesterenko M, 1999, LECT NOTES COMPUT SC, V1693, P254
   Perlman R., 1992, INTERCONNECTIONS BRI
   Plotkin G.D., 1981, FN19 DAIMI U AARH
   Shivakumar P, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P389, DOI 10.1109/DSN.2002.1028924
   TANENBAUM AS, 1989, STRUCTURED COMPUTER
NR 30
TC 7
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2009
VL 31
IS 6
AR 22
DI 10.1145/1552309.1552312
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 512AM
UT WOS:000271214200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Liu, YA
   Stoller, SD
AF Liu, Yanhong A.
   Stoller, Scott D.
TI From Datalog Rules to Efficient Programs with Time and Space Guarantees
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Performance; Complexity analysis; Datalog; data
   structure design; incremental computation; indexing; indexed
   representations; linked representations; program transformation;
   optimization; recursion; tabling
ID EXPRESSIVE POWER; COMPLEXITY
AB This article describes a method for transforming any given set of Datalog rules into an efficient specialized implementation with guaranteed worst-case time and space complexities, and for computing the complexities from the rules. The running time is optimal in the sense that only useful combinations of facts that lead to all hypotheses of a rule being simultaneously true are considered, and each such combination is considered exactly once in constant time. The associated space usage may sometimes be reduced using scheduling optimizations to eliminate some summands in the space usage formula. The transformation is based on a general method for algorithm design that exploits fixed-point computation, incremental maintenance of invariants, and combinations of indexed and linked data structures. We apply the method to a number of analysis problems, some with improved algorithm complexities and all with greatly improved algorithm understanding and greatly simplified complexity analysis.
C1 [Liu, Yanhong A.; Stoller, Scott D.] SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Stony Brook
RP Liu, YA (corresponding author), SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA.
EM liu@cs.sunysb.edu; stoller@cs.sunysb.edu
RI Liu, Annie/KVB-5867-2024
FU NSF [CCR-0204280, CCR-0306399, CCF-0613913, CCR-9876058]; ONR
   [N00014-01-1-0109, N00014-02-1-0363, N00014-04-1-0722, N00014-09-1-0651]
FX This work was supported in part by NSF under grants CCR-0204280,
   CCR-0306399, CCF-0613913, and CCR-9876058 and ONR under grants
   N00014-01-1-0109, N00014-02-1-0363, N00014-04-1-0722, and
   N00014-09-1-0651.
CR Abiteboul S, 1997, LECT NOTES COMPUT SC, V1186, P1
   Abiteboul S, 1995, FDN DATABASES
   Aho A. V., 1983, DATA STRUCTURES ALGO
   Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   Andersen L. O., 1994, Ph.D. thesis
   [Anonymous], 1985, P 5 ACM SIGACT SIGMO, DOI DOI 10.1145/6012.15399
   [Anonymous], 1986, Programming with Sets; an Introduction to SETL
   Avgustinov Pavel, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P11, DOI 10.1145/1190216.1190221
   Beeri C., 1979, ACM Transactions on Database Systems, V4, P30, DOI 10.1145/320064.320066
   CAI J, 1989, SCI COMPUT PROGRAM, V11, P197, DOI 10.1016/0167-6423(88)90033-0
   Cai Jiazhen, 1991, CONSTRUCTING PROGRAM, P126
   Calvanese D., 2000, Proceedings of 16th International Conference on Data Engineering (Cat. No.00CB37073), P389, DOI 10.1109/ICDE.2000.839439
   Ceri S., 1990, Logic Programming and Databases, DOI [10.1007/978-3-642-83952-8, DOI 10.1007/978-3-642-83952-8_6]
   Chen WD, 1996, J ACM, V43, P20, DOI 10.1145/227595.227597
   Clarke D., 2001, Journal of Computer Security, V9, P285
   Clarke EM, 1999, MODEL CHECKING, P1
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dantsin E, 2001, ACM COMPUT SURV, V33, P374, DOI 10.1145/502807.502810
   DE Moor O., 2003, Higher-Order and Symbolic Computation, V16, P15, DOI 10.1023/A:1023063919574
   Ellison C., 1999, RFC 2693: SPKI Certificate Theory
   ESPARZA J, 2000, LECT NOTES COMPUTER, V1855
   Ganzinger H., 2001, Automated Reasoning. First International Joint Conference, IJCAR 2001. Proceedings (Lecture Notes in Artificial Intelligence Vol.2083), P514
   GANZINGER H, 2002, P 18 INT C LOG PROGR, P209
   Gelfond M., 1988, P 5 INT C LOG PROGR, P1070, DOI DOI 10.2307/2275201
   Gottlob G, 2003, INFORM COMPUT, V183, P104, DOI 10.1016/S0890-5401(03)00012-9
   Gottlob G, 2006, J ACM, V53, P238, DOI 10.1145/1131342.1131345
   Heintze Nevin, 1994, LECT NOTES COMPUTER, V874, P281, DOI [10.1007/3-540-58601-6_107, DOI 10.1007/3-540-58601-6_107]
   Heintze Nevin., 2001, PLDI 01, P254
   Holzbaur C, 2005, THEOR PRACT LOG PROG, V5, P503, DOI 10.1017/S1471068405002413
   Hristova Katia, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P211, DOI 10.1145/1273920.1273950
   HRISTOVA K, 2007, 0735 DAR COMP SCI DE
   HRISTOVA K, 2006, P 7 INT C VER MOD CH, P190
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jha S., 2004, Journal of Computer Security, V12, P317
   KIFER M, 1990, ACM T DATABASE SYST, V15, P385, DOI 10.1145/88636.87121
   KIFER M, 1986, P 6 ADV DAT S TOK AU, P109
   KOLAITIS PG, 1995, J COMPUT SYST SCI, V51, P110, DOI 10.1006/jcss.1995.1055
   Leuschel M, 1999, LECT NOTES COMPUT SC, V1706, P155
   Li NH, 2003, LECT NOTES COMPUT SC, V2562, P58
   LI Q, 2001, P 27 INT C VER LARG, P361
   Liu SM, 2003, BIOGEOCHEMISTRY, V62, P1, DOI 10.1023/A:1021162214304
   Liu Y. A., 2000, Higher-Order and Symbolic Computation, V13, P289, DOI 10.1023/A:1026547031739
   Liu YA, 2002, LECT NOTES COMPUT SC, V2386, P195
   LIU YA, 2002, P ACM SIGPLAN 2002 W, P108, DOI [10.1145/568173.568180, DOI 10.1145/568173.568180]
   LIU YA, 2004, P ACM SIGPLAN 2004 C, P219
   Liu YHA, 2006, LECT NOTES COMPUT SC, V3819, P199
   Liu YHA, 1998, ACM T PROGR LANG SYS, V20, P546, DOI 10.1145/291889.291895
   Liu YHA, 2001, LECT NOTES COMPUT SC, V2126, P213
   Liu YHA, 2001, SCI COMPUT PROGRAM, V41, P139, DOI 10.1016/S0167-6423(01)00003-X
   LLOYD JW, 1991, J LOGIC PROGRAM, V11, P217, DOI 10.1016/0743-1066(91)90027-M
   McAllester D, 1999, LECT NOTES COMPUT SC, V1694, P312
   Naughton Jeffrey F., 1991, Computational Logic - Essays in Honor of Alan Robinson, P640
   Nielson F, 2002, LECT NOTES COMPUT SC, V2305, P243
   PAIGE R, 1982, ACM T PROGR LANG SYS, V4, P402, DOI 10.1145/357172.357177
   PAIGE R, 1986, IEEE SOFTWARE, V3, P56, DOI 10.1109/MS.1986.233070
   PAIGE R, 1981, COMPUTER SCI ARTIFIC, V6
   Ramakrishnan I.V., 2001, HDB AUTOMATED REASON, P1853
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   SAGONAS K, 1994, P 5 ACM SIGACT SIGMO
   SCHRIJVERS T, 2005, THESIS KATHOLIEKE U
   STOLLER SD, 2007, DEP DEFENSE SPONSORE, P416
   TAMAKI H, 1986, LECT NOTES COMPUT SC, V225, P84
   TEKLE KT, 2008, P 12 INT C AL METH S
   Vardi M.Y., 1982, P 14 ANN ACM S THEOR, P137, DOI DOI 10.1145/800070.802186
   Whaley John., 2004, PROGRAMMING LANGUAGE, P131
   [No title captured]
   [No title captured]
   [No title captured]
NR 68
TC 24
Z9 29
U1 1
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2009
VL 31
IS 6
AR 21
DI 10.1145/1552309.1552311
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 512AM
UT WOS:000271214200002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Ducournau, R
AF Ducournau, Roland
TI Perfect Hashing as an Almost Perfect Subtype Test
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Experimentation; Languages; Measurement; Performance; Casting; coloring;
   downcast; dynamic loading; interfaces; method tables; multiple
   inheritance; multiple subtyping; perfect hashing; single inheritance;
   subtype test; virtual function tables
AB Subtype tests are an important issue in the implementation of object-oriented programming languages. Many techniques have been proposed, but none of them perfectly fulfills the five requirements that we have identified: constant-time, linear-space, multiple inheritance, dynamic loading and inlining. In this article, we propose a subtyping test implementation that involves a combination of usual hashtables and Cohen's display, which is a well-known technique for single inheritance hierarchies. This novel approach is based on perfect hashing, that is, an optimized and truly constant-time variant of hashing that applies to immutable hashtables. We show that the resulting technique closely meets all five requirements. Furthermore, in the framework of JAVA-like languages-characterized by single inheritance of classes and multiple subtyping of interfaces-perfect hashing also applies to method invocation when the receiver is typed by an interface. The proposed technique is compared to some alternatives, including the proposal by Palacz and Vitek [2003]. Time-efficiency is assessed at the cycle level in the framework of Driesen's pseudo-code and the linear-space criterion is validated by statistical simulation on benchmarks consisting of large-scale class hierarchies.
C1 [Ducournau, Roland] LIRMM, CNRS, F-34392 Montpellier 5, France.
   [Ducournau, Roland] Univ Montpellier 2, Montpellier, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite
   Paul-Valery; Universite Perpignan Via Domitia; Universite de
   Montpellier; Universite de Montpellier
RP Ducournau, R (corresponding author), LIRMM, CNRS, 161 Rue Ada, F-34392 Montpellier 5, France.
EM ducour@lirmm.fr
FU Region Languedoc-Roussillon [034750]
FX This work was partially supported by grants from Region
   Languedoc-Roussillon (034750).
CR AGRAWAL R, 1989, P SIGMOD 89 ACM SIGM, V18, P253
   AITKACI H, 1989, ACM T PROGR LANG SYS, V11, P115, DOI 10.1145/59287.59293
   Alavi HS, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349, DOI 10.1145/1328438.1328480
   Alpern B, 2001, ACM SIGPLAN NOTICES, V36, P108, DOI 10.1145/504311.504291
   ALPERN B, 2001, P USENIX JVM 01
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1973, The art of computer programming
   [Anonymous], 1982, SIGPLAN Not, DOI DOI 10.1145/872726.806984
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   BARNES J, 1995, PROGRAMMING ADA 95
   CASEAU Y, 1993, P OOPSLA 93 WASH DC, P271
   Click Cliff, 2002, P 2002 JOINT ACMISCO, P96, DOI DOI 10.1145/583810.583821
   COHEN NH, 1991, ACM T PROGR LANG SYS, V13, P626, DOI 10.1145/115372.115297
   Collin S, 1997, LECT NOTES COMPUT SC, V1204, P67
   Czech ZJ, 1997, THEOR COMPUT SCI, V182, P1, DOI 10.1016/S0304-3975(96)00146-6
   Czech ZJ, 1998, COMPUT J, V41, P416, DOI 10.1093/comjnl/41.6.416
   Dijkstra E.W., 1960, NUMER MATH, V2, P312, DOI DOI 10.1007/BF01386232
   DIXON R, 1989, P OOPSLA 89, P211
   DRIESEN K, 1993, SIGPLAN NOTICES, V28, P259, DOI 10.1145/167962.165902
   Driesen K, 1995, LECT NOTES COMPUT SC, V952, P253
   DRIESEN K, 1993, THESIS VRIJE UNIVERS
   Driesen K., 1995, P ACMOOPSLA 95 C, P141
   Driesen Karel., 2001, EFFICIENT POLYMORPHI
   DUCOURNAU R, 2002, 02174 LIRMM U MONTP
   DUCOURNAU R, 2002, OBJET, V8, P79
   DUCOURNAU R, 2002, LECT NOTES COMPUTER, V2426, P3
   DUCOURNAU R, 1991, YET ANOTHER FRAME BA
   DUCOURNAU R, 2006, 06001 LIRMM U MONTP
   DUCOURNAU R, 1997, OBJET, V3, P241
   Ellis MargaretA., 1990, The annotated C++ reference manual
   Fall A, 1998, COMPUT INTELL, V14, P598, DOI 10.1111/0824-7935.00076
   FALL A, 1995, P INT KRUSE 95 C KNO, P162
   Gagnon EM, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P27
   Garey M.R., 1979, COMPUTERS INTRACTABI
   Gil J, 2005, ACM T PROGR LANG SYS, V27, P819, DOI 10.1145/1086642.1086643
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Grove D, 2001, ACM T PROGR LANG SYS, V23, P685, DOI 10.1145/506315.506316
   HABIB M, 1994, LECT NOTES COMPUTER, V831, P1
   Habib M., 1995, P KRUSE 95, P147
   HABIB M, 1997, P 2 INT S KNOWL REPR, P60
   HARBINSON SP, 1992, MODULA 3
   Huchard M, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P317, DOI 10.1109/ASE.2000.873687
   Jensen T. R, 1995, GRAPH COLORING PROBL
   Kiczales G., 1991, The Art of the Metaobject Protocol
   KLEFSTAD R, 2002, P 4 INT S DISTR OBJ
   Krall A, 1997, LECT NOTES COMPUT SC, V1241, P128, DOI 10.1007/BFb0053377
   Krall A, 1997, CONCURRENCY-PRACT EX, V9, P1017, DOI 10.1002/(SICI)1096-9128(199711)9:11<1017::AID-CPE347>3.0.CO;2-0
   Lippman StanleyB., 1996, INSIDE C OBJECT MODE
   Liskov B., 1995, THETA REFERENCE MANU
   MEHLHORN K, 1990, HDB THERETICAL COMPU, V1, P301
   Meyer B., 1992, Eiffel: The Language
   Meyer Jon., 1997, JAVA VIRTUAL MACHINE
   *MICR CORP, 2001, C LANG SPEC V0 28
   MORRIS R, 1968, COMMUN ACM, V11, P38, DOI 10.1145/362851.362882
   Mossenbock H., 1993, OBJECT ORIENTED PROG
   Muthukrishnan S, 1996, PROCEEDINGS OF THE SEVENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P42
   MYERS AC, 1995, SIGPLAN NOTICES, V30, P124, DOI 10.1145/217839.217849
   Odersky M., 2008, PROGRAMMING SCALA CO
   Palacz K, 2003, LECT NOTES COMPUT SC, V2743, P378
   PFISTER BHC, 1991, 156 EIDG TH ZUR DEP
   PRIVAT J, 2005, PASTE, P20
   PRIVAT J, 2006, 06029 LIRMM U MONTP
   PUGH W, 1990, SIGPLAN NOTICES, V25, P85, DOI 10.1145/93548.93556
   PUGH W, 1993, CS9322 U WAT
   Queinnec C, 1997, INFORM PROCESS LETT, V64, P315, DOI 10.1016/S0020-0190(97)00192-0
   RAYNAUD O, 2001, P 15 EUR C OBJ OR PR, P165
   SCHMIDT DC, 1990, P 2 C PLUS PLUS C SA, P87
   SCHUBERT LK, 1983, COMPUTER, V16, P53, DOI 10.1109/MC.1983.1654198
   SHALIT A, 1997, DYLAN REFERENCE MANU
   SPRUGNOLI R, 1977, COMMUN ACM, V20, P841, DOI 10.1145/359863.359887
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Stroustrup B., 1998, C PROGRAMMING LANGUA
   TAKHEDMIT P, 2003, THESIS U MONTPELLIER
   TARJAN RE, 1979, COMMUN ACM, V22, P606, DOI 10.1145/359168.359175
   Tucker Taft S., 2006, LECT NOTES COMPUTER, V4348
   VITEK J, 1997, P 12 ACM C OBJ OR PR, P142
   VITTER JS, 1990, HDB THERETICAL COMPU, V1, P431
   Warren H. S, 2003, Hacker's Delight
   WIRTH N, 1988, SOFTWARE PRACT EXPER, V18, P671, DOI 10.1002/spe.4380180707
   ZENDRA O, 1997, P 12 ACM C OBJ OR PR, P126
   Zibin Y, 2003, LECT NOTES COMPUT SC, V2743, P329
   ZIBIN Y, 2003, P 30 ACM SIGPLAN SIG, P126
NR 82
TC 11
Z9 12
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2008
VL 30
IS 6
AR 33
DI 10.1145/1391956.1391960
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 373GL
UT WOS:000260958900004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Naik, M
   Palsberg, J
AF Naik, Mayur
   Palsberg, Jens
TI A type system equivalent to a model checker
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE verification; model checking; type systems
AB Type systems and model checking are two prevalent approaches to program verification. A prominent difference between them is that type systems are typically defined in a syntactic and modular style whereas model checking is usually performed in a semantic and whole-program style. This difference between the two approaches makes them complementary to each other: type systems are good at explaining why a program was accepted while model checkers are good at explaining why a program was rejected.
   We present a type system that is equivalent to a model checker for verifying temporal safety properties of imperative programs. The model checker is natural and may be instantiated with any finite-state abstraction scheme such as predicate abstraction. The type system, which is also parametric, type checks exactly those programs that are accepted by the model checker. It uses a variant of function types to capture flow sensitivity and intersection and union types to capture context sensitivity. Our result sheds light on the relationship between type systems and model checking, provides a methodology for studying their relative expressiveness, is a step towards sharing results between the two approaches, and motivates synergistic program analyses involving interplay between them.
C1 [Naik, Mayur] Intel Res, Berkeley, CA 94704 USA.
   [Palsberg, Jens] Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
C3 Intel Corporation; University of California System; University of
   California Los Angeles
RP Naik, M (corresponding author), Intel Res, 2150 Shattuck Ave,Penthouse Suite, Berkeley, CA 94704 USA.
EM mayur.naik@intel.com; palsberg@ucla.edu
RI Palsberg, Jens/JYO-6826-2024
OI Palsberg, Jens/0000-0003-4747-365X
FU National Science Foundation ITR Award [0112628]; Direct For Computer &
   Info Scie & Enginr; Division Of Computer and Network Systems [0112628]
   Funding Source: National Science Foundation
FX This work was supported by National Science Foundation ITR Award number
   0112628.
CR AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Amtoft T, 2000, LECT NOTES COMPUT SC, V1782, P26
   [Anonymous], POPL 2000
   [Anonymous], P TIC 00 WORKSH TYP
   Ball T., 2002, POPL 02, P1
   BANERJEE A, 1997, P ACM INT C FUNCT PR, P1
   Beaven M., 1993, ACM Letters on Programming Languages and Systems, V2, P17, DOI 10.1145/176454.176460
   Brylow D, 2004, IEEE T SOFTWARE ENG, V30, P634, DOI 10.1109/TSE.2004.64
   Chaki S, 2003, PROC INT CONF SOFTW, P385, DOI 10.1109/ICSE.2003.1201217
   Chakraborty S, 2002, EIGHTH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P45, DOI 10.1109/RTTAS.2002.1137380
   Chatterjee K, 2004, INFORM COMPUT, V194, P144, DOI 10.1016/j.ic.2004.06.001
   CHITIL O, 2001, P 6 ACM SIGPLAN INT, P193
   Cousot P., 1997, POPL 97, P316
   DEBBABI M, 1999, P AMAST 98, P214
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   Duggan D, 1996, SCI COMPUT PROGRAM, V27, P37, DOI 10.1016/0167-6423(95)00007-0
   FLANAGAN C, 2005, P TLDI 05, P47
   Flanagan C, 2007, SCI COMPUT PROGRAM, V64, P140, DOI 10.1016/j.scico.2006.03.006
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Haack C, 2003, LECT NOTES COMPUT SC, V2618, P284
   HEINTZE N, 1995, P 2 INT STAT AN S, P189
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   IGARASHI A, 2002, P ACM SIGPLAN SIGACT, P331
   Johnson-acsadi G, 1986, Popul Bull UN, P44, DOI 10.1145/512644.512649
   Lerner BS, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425, DOI 10.1145/1250734.1250783
   MA D, 2004, THESIS PURDUE U
   Mandelbaum Yitzhak., 2003, Proceedings of the Eighth ACM SIGPLAN International Conference on Functional Programming, ICFP '03, P213, DOI DOI 10.1145/944705.944725
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MOSSIN C, 1997, P SAS 97, P250
   NAIK M, 2004, THESIS PURDUE U
   Namjoshi KS, 2001, LECT NOTES COMPUT SC, V2102, P2
   NAMJOSHI KS, 2003, P VMCAI 03, P174
   Palsberg J, 1998, ACM T PROGR LANG SYS, V20, P1251, DOI 10.1145/295656.295662
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P576, DOI 10.1145/210184.210187
   Palsberg J, 1996, ACM T PROGR LANG SYS, V18, P519, DOI 10.1145/232706.232715
   Palsberg J, 2001, J FUNCT PROGRAM, V11, P263, DOI 10.1017/S095679680100394X
   PALSBERG J, 2002, P 7 INT S FORM TECHN, P291
   PELED D, 2001, P FSTTCS 01, P292
   PELED D, 2001, P SPIN 01, P1
   Schmidt D, 1998, LECT NOTES COMPUT SC, V1503, P351
   Schmidt D.A., 1998, POPL 98, P38
   STEFFEN B, 1991, LECT NOTES COMPUT SC, V526, P346
   TAN L, 2002, P 14 INT C COMP AID, P455
   Tip F, 2001, ACM T SOFTW ENG METH, V10, P5, DOI 10.1145/366378.366379
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
   Xi HW, 2000, IEEE S LOG, P375
   [No title captured]
NR 48
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2008
VL 30
IS 5
AR 29
DI 10.1145/1387673.1387678
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 351SG
UT WOS:000259445600005
OA Bronze
DA 2024-07-18
ER

PT J
AU Torp-Smith, N
   Birkedal, L
   Reynolds, JC
AF Torp-Smith, Noah
   Birkedal, Lars
   Reynolds, John C.
TI Local reasoning about a copying garbage collector
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE realiability; theory; verification; separation logic; copying garbage
   collector; local reasoning
ID ALGORITHM
AB We present a programming language, model, and logic appropriate for implementing and reasoning about a memory management system. We state semantically what is meant by correctness of a copying garbage collector, and employ a variant of the novel separation logics to formally specify partial correctness of Cheney's copying garbage collector in our program logic. Finally, we prove that our implementation of Cheney's algorithm meets its specification using the logic we have given and auxiliary variables.
C1 [Torp-Smith, Noah; Birkedal, Lars] IT Univ Copenhagen, Copenhagen, Denmark.
   [Reynolds, John C.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 IT University Copenhagen; Carnegie Mellon University
RP Torp-Smith, N (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM noah@torpsmith.net
FU Danish Natural Science Research Council [51-00-0315]; Danish Technical
   Research Council [56-00-0309]; EPSRC; National Science Foundation
   [CCR-0204242]; Basic Research in Computer Science Centre of the Danish
   National Research Foundation
FX L. Birkedal's and N. Torp-Smith's research was partially supported by
   Danish Natural Science Research Council Grant 51-00-0315 and Danish
   Technical Research Council Grant 56-00-0309. J. Reynolds's research was
   partially supported by an EPSRC Visiting Fellowship at Queen Mary,
   University of London, by National Science Foundation Grant CCR-0204242,
   and by the Basic Research in Computer Science Centre of the Danish
   National Research Foundation.
CR Aditya S., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P12, DOI 10.1145/182409.182414
   ADITYA S, 1993, P ACM S FUNCT PROGR, P74
   AHMED A, 2003, P 18 ANN IEEE S LOG
   APPEL AW, 1993, CSTR41293 PRINC U
   APPEL AW, 2001, P 16 IEEE S LOG COMP
   BENARI M, 1984, ACM T PROGR LANG SYS, V6, P333, DOI 10.1145/579.587
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Biering B, 2005, LECT NOTES COMPUT SC, V3444, P233
   Birkedal L, 2005, IEEE S LOG, P260
   BIRKEDAL L, 2004, P 31 ACM SIGPLAN SIG, P220
   Bornat R, 2000, LECT NOTES COMPUT SC, V1837, P102
   BORNAT R, 2003, COMMUNICATION
   BORNAT R, 2004, P C SEM PROGR AN COM
   BURDY L, 2001, LECT NOTES COMPUTER, V2152
   Calcagno C, 2003, THEOR COMPUT SCI, V298, P557, DOI 10.1016/S0304-3975(02)00868-X
   CALCAGNO C, 2000, P 2 INT C PRINC PRAC
   CHENEY CJ, 1970, COMMUN ACM, V13, P677, DOI 10.1145/362790.362798
   Coupet-Grimal S, 2003, J LOGIC COMPUT, V13, P815, DOI 10.1093/logcom/13.6.815
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   FLUET M, 2004, INF P 2 WORKSH SEM P
   Goto E., 1974, TR7403 U TOK
   Gries D., 1980, ACM Transactions on Programming Languages and Systems, V2, P564, DOI 10.1145/357114.357119
   GUTTMANN J, 1994, LISP S COMPUT, V8, P5
   GUTTMANN JD, 1992, M92B091 MITRE CORP
   HALLENBERG N, 2002, P ACM SIGPLAN C PROG
   HAVELUND K, 1999, P 4 INT WORKSH FORM
   HAWBLITZEL C, 2004, P C SEM PROGR AN COM
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jackson PB, 1998, LECT NOTES COMPUT SC, V1479, P225, DOI 10.1007/BFb0055139
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   MEHTA F, 2003, P C AUT DED CADE 19
   MONNIER S, 2002, YALEUDCSTR1242
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Morrisett G., 1995, P 7 INT C FUNCT PROG, P66, DOI DOI 10.1145/224164.224182
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Necula GC, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P229, DOI 10.1145/248155.238781
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   OHEARN PW, 2001, P ANN C EUR ASS COMP
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   PETERSEN L, 2003, P 30 ACM SIGPLAN SIG, P172
   PIXLEY C, 1988, DISTRIB COMPUT, V3, P41, DOI 10.1007/BF01788566
   PYM DJ, 2002, APPL LOGICS SERIES, V26
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   REYNOLDS JC, 1981, PRENTICEHALL INT SER
   Russinoff D. M., 1994, Formal Aspects of Computing, V6, P359, DOI 10.1007/BF01211305
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Stoyle G, 2005, P 32 ACM SIGPLAN SIG, P183
   SWARUP V, 1992, M92B096 MITRE CORP
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   WADLER PL, 1976, COMMUN ACM, V19, P491, DOI 10.1145/360336.360338
   WANG DC, 2001, P 28 ACM S PRINC PRO, P166
   WEBER T, 2004, P ANN C EUR ASS COMP
   Yang H., 2001, Ph.D. thesis
NR 56
TC 13
Z9 13
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2008
VL 30
IS 4
AR 24
DI 10.1145/1377492.1377499
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 345YS
UT WOS:000259035300007
OA Bronze
DA 2024-07-18
ER

PT J
AU Biering, B
   Birkedal, L
   Torp-Smith, N
AF Biering, Bodil
   Birkedal, Lars
   Torp-Smith, Noah
TI BI-hyperdoctrines, higher-order separation logic, and abstraction
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 14th European Symposium on Programming (ESOP 2005)
CY APR 04-08, 2005
CL Edinburgh, SCOTLAND
DE separation logic; hyperdoctrines; abstraction
ID OWNERSHIP; RESOURCES
AB We present a precise correspondence between separation logic and a simple notion of predicate BI, extending the earlier correspondence given between part of separation logic and propositional BI. Moreover, we introduce the notion of a BI hyperdoctrine, show that it soundly models classical and intuitionistic first- and higher-order predicate BI, and use it to show that we may easily extend separation logic to higher-order. We also demonstrate that this extension is important for program proving, since it provides sound reasoning principles for data abstraction in the presence of aliasing.
C1 IT Univ Copenhagen, Copenhagen, Denmark.
C3 IT University Copenhagen
RP Biering, B (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM birkedal@itu.dk
CR Banerjee A, 2005, J ACM, V52, P894, DOI 10.1145/1101821.1101824
   Banerjee A, 2005, LECT NOTES COMPUT SC, V3586, P387
   BARNETT M, 2003, P C FORM TECHN JAV L
   BARNETT M, 2004, P C MATH PROGR CONST
   BIERING B, 2004, THESIS U COPENHAGEN
   BIERING B, 2006, IN PRESS NOTES DIALE
   Birkedal L, 2005, IEEE S LOG, P260
   BIRKEDAL L, 2004, P 31 ACM SIGPLAN SIG, P220
   BIRKEDAL L, 2006, IN PRESS RELATIONAL
   BORNAT R, 2004, P SPACE VEN ITAL
   Bornat Richard., 2005, P 32 ACM SIGPLAN SIG
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hoare C. A. R., 1971, Lecture notes in mathematics CLXXXVIII. Symposium on semantics of algorithmic languages, P102
   ISHTIAQ S, 2001, P 28 ANN ACM SIGPLAN
   JACOBS B, 1999, STUDIES LOGIC FDN MA, V141
   KRISHNASWAMI N, 2006, IN PRESS IDEALIZED M
   Lawvere F William, 1969, Dialectica, V23, P281
   LEAVANS G, 1989, THESIS MIT
   LEINO K, 2004, P EUR C OBJ OR PROGR
   Leino KRM, 2006, LECT NOTES COMPUT SC, V3924, P115
   LEINO KRM, 1995, THESIS CALTECH
   LISKOW B, 1986, ABSTRACTION SPECIFAC
   Mac Lane S., 1992, SHEAVES GEOMETRY LOG
   Mitchell John C., 1985, POPL '85, P37, DOI DOI 10.1145/318593.318606
   MULLER P, 2002, TR1406 HARV U, V2262
   Naumann DA, 2006, THEOR COMPUT SCI, V365, P143, DOI 10.1016/j.tcs.2006.07.035
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   OHEARN PW, 2003, IN PRESS SEPARATION
   OHEARN PW, 2004, POPL, P268
   PARKINSON MJ, 2005, POPL, P247
   PITTS DJ, 2004, ALGEBRAIC LOGICAL ST, V5, pCH2
   Pym DJ, 2004, THEOR COMPUT SCI, V315, P257, DOI 10.1016/j.tcs.2003.11.020
   PYM DJ, 2002, ERRATA REMARKS SEMAN
   PYM DJ, 2002, APPL LOGICS SERIES, V26
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   SIBERSCHATZ A, 1998, OPERATING SYSTEMS CO
   Yang H, 2001, LOCAL REASONING STAT
   Yang HS, 2002, LECT NOTES COMPUT SC, V2303, P402
NR 39
TC 30
Z9 34
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 5
AR 24
DI 10.1145/1275497.1275499
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208NR
UT WOS:000249327000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Nanda, MG
   Ramesh, S
AF Nanda, Mangala Gowri
   Ramesh, S.
TI Interprocedural slicing of multithreaded programs with applications to
   Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; multithreading; data dependence; interference
   dependence; context-sensitivity; strongly connected regions; program
   slicing
AB Slicing is a well-known program reduction technique where for a given program P and a variable of interest v at some statement p in the program, a program slice contains those set of statements belonging to P that affect v. This article presents two algorithms for interprocedural slicing of concurrent programs -a context-insensitive algorithm and a context-sensitive algorithm. The context-insensitive algorithm is efficient and correct ( it includes every statement that may affect the slicing criterion) but is imprecise since it may include certain extra statements that are unnecessary. Precise slicing has been shown to be undecidable for concurrent programs. However, the context-sensitive algorithm computes correct and reasonably precise slices, but has a worst-case exponential-time complexity. Our context-sensitive algorithm computes a closure of dependencies while ensuring that statements sliced in each thread belong to a realizable path in that thread.
   A realizable path in a thread with procedure calls is one that reflects the fact that when a procedure finishes, execution returns to the site of the most recently executed call in that thread. One of the novelties of this article is a practical solution to determine whether a given set of statements in a thread may belong to a realizable path. This solution is precise even in the presence of recursion and long call chains in the flow graph.
   The slicing algorithms are applicable to concurrent programs with shared memory, interleaving semantics, explicit wait/notify synchronization and monitors. We first give a solution for a simple model of concurrency and later show how to extend the solution to the Java concurrency model. We have implemented the algorithms for Java bytecode and give experimental results.
C1 Indian Inst Technol, IBM, India Res Lab, New Delhi 110016, India.
   Indian Inst Technol, Dept Comp Sci & Engn, Bombay 400076, Maharashtra, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Delhi; Indian Institute of Technology System (IIT
   System); Indian Institute of Technology (IIT) - Bombay
RP Nanda, MG (corresponding author), Indian Inst Technol, IBM, India Res Lab, Block 1, New Delhi 110016, India.
EM mgowri@in.ibm.com; ramesh@cse.iitb.ac.in
RI Ramesh, S/AAN-8294-2021
OI Ramesh, S/0000-0002-5493-0313
CR AGRAWAL H, 1993, SOFTWARE PRACT EXPER, V23, P589, DOI 10.1002/spe.4380230603
   BECK J, 1993, PROC INT CONF SOFTW, P509, DOI 10.1109/ICSE.1993.346015
   Binkley D., 1995, ACM Transactions on Software Engineering and Methodology, V4, P3, DOI 10.1145/201055.201056
   Chen ZQ, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/375431.375420
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   HORWITZ S, 1989, ACM T PROGR LANG SYS, V11, P345, DOI 10.1145/65979.65980
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Johnson Richard., 1993, Proceedings of the SIGPLAN '93 Conference on Programming Language Design and Implementation, P78
   MULLER-OLM M., 2001, P 33 ACM S THEOR COM, P647, DOI DOI 10.1145/380752.380864
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   REPS T, 1994, P ACM SIGSOFT 94 S F, P11
   RUF E, 2000, P C PROGR LANG DES I, P208
   SARKAR V, 1991, IBM J RES DEV, V35, P779, DOI 10.1147/rd.355.0779
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Sinha S., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P432, DOI 10.1109/ICSE.1999.841033
   TIP F, 1995, J PROGRAM LANG, V3, P121
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   YANG W, 1992, ACM T SOFTW ENG METH, V1, P310
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 24
TC 21
Z9 24
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2006
VL 28
IS 6
BP 1088
EP 1144
DI 10.1145/1186632.1186636
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 119DD
UT WOS:000242991500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Gavanelli, M
   Lamma, E
   Mello, P
   Milano, M
AF Gavanelli, M
   Lamma, E
   Mello, P
   Milano, M
TI Dealing with incomplete knowledge on CLP(<i>FD</i>) variable domains
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; performance; theory; constraints; domain
   acquisition; interaction; lazy evaluation; sets; streams
ID ARC-CONSISTENCY; CONSTRAINT; LOGIC; NETWORKS
AB Constraint Logic Programming languages on Finite Domains, CLP(FD), provide a declarative framework for Artificial Intelligence problems. However, in many real life cases, domains are not known and must be acquired or computed. In systems that interact with the outer world, domain elements synthesize information on the environment, they are not all known at the beginning of the computation, and must be retrieved through an expensive acquisition process.
   In this article, we extend the CLP(FD) language by combining it with a new sort (called Incrementally specified Sets, I-Set). In the resulting language, CLP(FD + I-Set), FD variables can be defined on partially or fully unknown domains (I-Set). Domains can be linked each other through relations, and constraints can be imposed on them. We describe a propagation algorithm (called Known Arc Consistency (KAC)) based on known domain elements, and theoretically compare it with are-consistency.
   The language can be implemented on too of different CLP systems, thus letting the user exploit different possible semantics for domains (e.g., lists, sets or streams). We state the specifications that the employed system should provide, and we show that two different CLP systems (Conjunto and (log)) can be effectively used.
   We provide motivating examples and describe promising applications.
C1 Univ Ferrara, Dept Engn, I-44100 Ferrara, Italy.
   Univ Bologna, DEIS, I-40136 Bologna, Italy.
C3 University of Ferrara; University of Bologna
RP Univ Ferrara, Dept Engn, Via Saragat 1, I-44100 Ferrara, Italy.
EM mgavanelli@ing.unife.it
RI GAVANELLI, Marco/ISA-6918-2023
OI GAVANELLI, Marco/0000-0001-7433-5899
CR AGGOUN A, 2001, ECLIPSE USER MANUAL
   ALBERTI M, 2005, IN PRESS THEORY PRAC
   Baader F, 1998, THEOR COMPUT SCI, V192, P107, DOI 10.1016/S0304-3975(97)00147-3
   Baader F, 2001, LECT NOTES COMPUT SC, V2002, P104
   BARRUFFI R, 1999, LECT NOTES COMPUTER, V1809, P159
   Bessiére C, 1999, ARTIF INTELL, V107, P125, DOI 10.1016/S0004-3702(98)00105-2
   BESSIERE C, 1994, ARTIF INTELL, V65, P179, DOI 10.1016/0004-3702(94)90041-8
   COHEN J, 1993, CONSTRAINT LOGIC PRO, P457
   Dechter R., 1988, P 7 NAT C ART INT AA, P37
   DENT MJ, 1994, PROC INT C TOOLS ART, P432, DOI 10.1109/TAI.1994.346460
   DINCBAS M, 1988, P INT C 5TH GENERATI, V1, P693
   Dovier A, 2000, ACM T PROGR LANG SYS, V22, P861, DOI 10.1145/365151.365169
   Dovier A, 1996, J LOGIC PROGRAM, V28, P1, DOI 10.1016/0743-1066(95)00147-6
   DOVIER A, 1993, MIT PS LOG, P540
   FREUDER EC, 1982, J ACM, V29, P24, DOI 10.1145/322290.322292
   FREUDER EC, 1996, ACM COMPUT SURV, V28, P63, DOI [10.1145/242224.242304, DOI 10.1145/242224.242304]
   Gavanelli M., 1999, PACLP99. Proceedings of the First International Conference on the Practical Application of Constraint Technologies and Logic Programming, P137
   Gervet C., 1997, Constraints, V1, P191, DOI 10.1007/BF00137870
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jaffar J, 1998, J LOGIC PROGRAM, V37, P1, DOI 10.1016/S0743-1066(98)10002-X
   JAFFAR J, 1987, P C PRINC PROGR LANG
   KNOBLOCK C, 2001, P 10 INT WORLD WID W, V10, P697
   Lamma E, 1999, IJCAI-99: PROCEEDINGS OF THE SIXTEENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 & 2, P468
   LEGEARD B, 1991, LECT NOTES COMPUT SC, V528, P431
   MACKWORTH AK, 1977, ARTIF INTELL, V8, P99, DOI 10.1016/0004-3702(77)90007-8
   Mailharro D, 1998, AI EDAM, V12, P383, DOI 10.1017/S0890060498124101
   Mello P, 2001, NEW GENERAT COMPUT, V19, P339, DOI 10.1007/BF03037573
   MITTAL S, 1990, PROCEEDINGS : EIGHTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P25
   MOHR R, 1986, ARTIF INTELL, V28, P225, DOI 10.1016/0004-3702(86)90083-4
   MONTANAR.U, 1974, INFORM SCIENCES, V7, P95, DOI 10.1016/0020-0255(74)90008-5
   Randall W, 1996, BIOL RHYTHM RES, V27, P185, DOI 10.1076/brhm.27.2.185.12941
   SCHIEX T, 1993, FIFTH INTERNATIONAL CONFERENCE ON TOOLS WITH ARTIFICIAL INTELLIGENCE, TAI '93, PROCEEDINGS, P48, DOI 10.1109/TAI.1993.633935
   Schiex T, 1996, PROCEEDINGS OF THE THIRTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE EIGHTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE, VOLS 1 AND 2, P216
   Sergot M., 1983, Integrated Interactive Computing Systems. Proceedings of the European Conference, ECICS 82, P27
   SHAPIRO E, 1987, CONCURRENT PROLOG, V1
   VANHENTENRYCK P, 1992, ARTIF INTELL, V57, P291, DOI 10.1016/0004-3702(92)90020-X
   WALTZ D, 1975, PSYCHOL COMPUTER VIS, pCH3
   ZWEBEN M, 1989, P IJCAI 89 DETR, P875
NR 38
TC 6
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2005
VL 27
IS 2
BP 236
EP 263
DI 10.1145/1057387.1057389
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917RK
UT WOS:000228486700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Ancona, D
   Lagorio, G
   Zucca, E
AF Ancona, D
   Lagorio, G
   Zucca, E
TI Jam - Designing a Java extension with mixins
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; Java; language design
ID CALCULUS
AB In this paper we present Jam, an extension of the Java language supporting mixins, that is, parametric heir classes. A mixin declaration in Jam is similar to a Java heir class declaration, except that it does not extend a fixed parent class, but simply specifies the set of fields and methods a generic parent should provide. In this way, the same mixin can be instantiated on many parent classes, producing different heirs, thus avoiding code duplication and largely improving modularity and reuse. Moreover, as happens for classes and interfaces, mixin names are reference types, and all the classes obtained by instantiating the same mixin are considered subtypes of the corresponding type, and hence can be handled in a uniform way through the common interface. This possibility allows a programming style where different ingredients are "mixed" together in defining a class; this paradigm is somewhat similar to that based on multiple inheritance, but avoids its complication.
   The language has been designed with the main objective in mind to obtain, rather than a new theoretical language, a working and smooth extension of Java. That means, on the design side, that we have faced the challenging problem of integrating the Java overall principles and complex type system with this new notion; on the implementation side, it means that we have developed a Jam-to-Java translator which makes Jam sources executable on every Java Virtual Machine.
C1 Univ Genoa, Dipartimento Informat & Sci Informaz, I-16146 Genoa, Italy.
C3 University of Genoa
RP Ancona, D (corresponding author), Univ Genoa, Dipartimento Informat & Sci Informaz, Via Dodecaneso 35, I-16146 Genoa, Italy.
EM davide@disi.unige.it; lagorio@disi.unige.it; zucca@disi.unige.it
RI Lagorio, Giovanni/JYQ-3701-2024
OI Lagorio, Giovanni/0000-0002-6632-1523
CR Ancona D., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P354
   Ancona D, 2002, J FUNCT PROGRAM, V12, P91, DOI 10.1017/S0956796801004257
   Ancona D., 1998, Mathematical Structures in Computer Science, V8, P401, DOI 10.1017/S0960129598002576
   Ancona D, 2000, LECT NOTES COMPUT SC, V1850, P154
   ANCONA D, 2001, ACM S OBJ OR PROGR S
   Banavar G., 1996, ECOOP '96 - Object-Oriented Programming. 10th European Conference. Proceedings, P91, DOI 10.1007/BFb0053058
   BAUER L, 1999, CSTR60399 PRINC U DE
   Bono V, 1999, LECT NOTES COMPUT SC, V1628, P43
   BOOCH G, 1998, UNIFIED MODELING LAN
   BRACHA G, 1992, PROCEEDINGS OF THE 1992 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P282, DOI 10.1109/ICCL.1992.185492
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   BRACHA G, 1992, THESIS U UTAH SALT L
   BRACHA G, 1998, ACM S OBJ OR PROGR S
   DROSSOPOULOU S, 1999, P IEEE S LOG COMP SC
   Drossopoulou S., 1999, Formal Syntax and Semantics of Java, volume 1523 of Lecture Notes in Computer Science, V1523, P41
   DUGGAN D, 1996, P ACM INT C FUNCT PR, P262
   FISHER K, 1999, P ACM SIGPLAN 99 C P, P37
   FLATT M, 1998, ACM S PRINC PROGR LA, P171
   GAMMA E, 1995, ADDISONWESLEY PROFES
   Gosling J., 2000, The Java Language Specification
   Keene S.E., 1989, OBJECT ORIENTED PROG
   MCDIRMID S, 2001, ACM S OBJ OR PROGR S
   MEYERS A, 1997, ACM S PRINC PROGR LA
   MOON DA, 1986, ACM SIGPLAN NOTICES, P1
   ODERSKY M, 1997, ACM S PRINC PROGR LA
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P19, DOI 10.1145/323648.323738
   1996, OOPSLA96 WORKSH EXT
NR 27
TC 35
Z9 35
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2003
VL 25
IS 5
BP 641
EP 712
DI 10.1145/937563.937567
PG 72
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720HY
UT WOS:000185256400004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Banerjee, A
   Nagasamudram, R
   Naumann, DA
   Nikouei, M
AF Banerjee, Anindya
   Nagasamudram, Ramana
   Naumann, David A.
   Nikouei, Mohammad
TI A Relational Program Logic with Data Abstraction and Dynamic Framing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Relational properties; relational verification; logics of programs; data
   abstraction; representation independence; product programs; automated
   verification
ID SECURE INFORMATION-FLOW; SEPARATION LOGIC; CORRECTNESS; VALIDATION;
   PROOFS; FRAMES
AB In a paper published in 1972, Hoare articulated the fundamental notions of hiding invariants and simulations. Hiding: invariants on encapsulated data representations need not be mentioned in specifications that comprise the API of a module. Simulation: correctness of a new data representation and implementation can be established by proving simulation between the old and new implementations using a coupling relation defined on the encapsulated state. These results were formalized semantically and for a simple model of state, though the paper claimed this could be extended to encompass dynamically allocated objects. In recent years, progress has been made toward formalizing the claim, for simulation, though mainly in semantic developments. In this article, hiding and simulation are combined with the idea in Hoare's 1969 paper: a logic of programs. For an object-based language with dynamic allocation, we introduce a relational Hoare logic with stateful frame conditions that formalizes encapsulation, hiding of invariants, and couplings that relate two implementations. Relations and other assertions are expressed in first-order logic. Specifications can express a wide range of relational properties such as conditional equivalence and noninterference with declassification. The proof rules facilitate relational reasoning by means of convenient alignments and are shown sound with respect to a conventional operational semantics. A derived proof rule for equivalence of linked programs directly embodies representation independence. Applicability to representative examples is demonstrated using an SMT-based implementation.
C1 [Banerjee, Anindya] IMDEA Software Inst, Madrid, Spain.
   [Nagasamudram, Ramana; Naumann, David A.; Nikouei, Mohammad] Stevens Inst Technol, Hoboken, NJ 07030 USA.
C3 IMDEA Software Institute; Stevens Institute of Technology
RP Banerjee, A (corresponding author), IMDEA Software Inst, Madrid, Spain.
EM anindya.banerjee@imdea.org; rnagasam@stevens.edu;
   naumann@cs.stevens.edu; snikouei@stevens.edu
OI Nagasamudram, Ramana/0000-0003-2779-2071; Naumann,
   David/0000-0002-7634-6150; Banerjee, Anindya/0000-0001-9979-1292
FU National Science Foundation (NSF) [1718713]; NSF [1718713]; Office of
   Naval Research (ONR) [N00014-17-1-2787]; Direct For Computer & Info Scie
   & Enginr; Division Of Computer and Network Systems [1718713] Funding
   Source: National Science Foundation
FX Nagasamudram and Nikouei were partially supported by National Science
   Foundation (NSF) Award No. 1718713. Naumann was partially supported by
   NSF Award No. 1718713 and Office of Naval Research (ONR) Award No.
   N00014-17-1-2787. Banerjee's research was based on work supported by the
   NSF, while working at the Foundation; in particular, he gratefully
   acknowledges NSF's support of "Long-term Professional Development" for
   FY 2020. Any opinions, findings, and conclusions or recommendations
   expressed in this article are those of the authors and do not
   necessarily reflect the views of the NSF and other funding agencies.
CR Aguirre A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000145
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Amtoft T, 2006, ACM SIGPLAN NOTICES, V41, P91, DOI 10.1145/1111320.1111046
   Amtoft T, 2007, FMSE'07: PROCEEDINGS OF THE 2007 ACM WORKSHOP ON FORMAL METHODS IN SECURITY ENGINEERING, P2
   Antonopoulos T, 2022, Arxiv, DOI arXiv:2202.04278
   Apt Krzysztof R., 2009, VERIFICATION SEQUENT, V3, DOI DOI 10.1007/978-1-84882-745-5
   Banerjee A, 2005, J ACM, V52, P894, DOI 10.1145/1101821.1101824
   Banerjee A, 2005, J FUNCT PROGRAM, V15, P131, DOI 10.1017/S0956796804005453
   Banerjee Anindya, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P319, DOI 10.1007/978-3-642-36946-9_12
   Banerjee A, 2008, P IEEE S SECUR PRIV, P339, DOI 10.1109/SP.2008.20
   Banerjee A, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3174801
   Banerjee A, 2013, J ACM, V60, DOI [10.1145/2487241.2485981, 10.1145/2485981]
   Banerjee A, 2013, J ACM, V60, DOI [10.1145/2487241.2485982, 10.1145/2485982]
   Banerjee Anindya, 2016, TECHNICAL REPORT, V11, P1, DOI [10.4230/LIPIcs.FSTTCS.2016.11, DOI 10.4230/LIPICS.FSTTCS.2016.11]
   Bao YY, 2018, FORM ASP COMPUT, V30, P381, DOI 10.1007/s00165-018-0455-5
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Barthe Gilles, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P146, DOI 10.1007/978-3-319-10082-1_6
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe G, 2016, J LOG ALGEBR METHODS, V85, P847, DOI 10.1016/j.jlamp.2016.05.004
   Barthe G, 2011, MATH STRUCT COMP SCI, V21, P1207, DOI 10.1017/S0960129511000193
   Barthe Gilles, 2013, LOGICAL FDN COMPUTER, V7734, P29, DOI [10.1007/978--3-642--35722--0_3, DOI 10.1007/978--3-642--35722--0_3, DOI 10.1007/978-3-642-35722-03]
   Barthe Gilles., 2005, ACM Types, P103, DOI DOI 10.1145/1040294.1040304
   Beckert Bernhard, 2018, Principled Software Development, P41, DOI [DOI 10.1007/978-3-319-98047-8_3, 10.1007/978-3-319-98047-8_3]
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   Beringer Lennart, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P573, DOI 10.1007/978-3-030-30942-8_34
   Beringer Lennart, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P39, DOI 10.1007/978-3-642-22863-6_6
   Beringer L, 2021, LECT NOTES COMPUT SC, V12648, P118, DOI 10.1007/978-3-030-72019-3_5
   Birkedal L, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(2:6)2008
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Chudnov A, 2014, P IEEE CSFW, P48, DOI 10.1109/CSF.2014.12
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   Clochard M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371070
   Crary K, 2017, ACM SIGPLAN NOTICES, V52, P100, DOI 10.1145/3093333.3009892
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Echenim M, 2019, LECT NOTES COMPUT SC, V11425, P242, DOI 10.1007/978-3-030-17127-8_14
   Eilers M, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3324783
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Filliâtre JC, 2016, FORM METHOD SYST DES, V48, P152, DOI 10.1007/s10703-016-0243-x
   Filliatre Jean-Christophe, 2021, J LOG ALGEBRAIC METH, V121, DOI [10.1016/j.jlamp.2021.100645, DOI 10.1016/J.JLAMP.2021.100645]
   FRANCEZ N, 1983, ACTA INFORM, V20, P329, DOI 10.1007/BF00264278
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Girka T, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P73, DOI 10.1145/3131851.3131870
   Godlin B, 2008, ACTA INFORM, V45, P403, DOI 10.1007/s00236-008-0075-2
   Grimm N., 2018, P 7 ACM SIGPLAN INT, P130
   Guttmann W, 2018, J LOG ALGEBR METHODS, V101, P132, DOI 10.1016/j.jlamp.2018.09.005
   Hatcliff J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187678
   Hawblitzel Chris, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P282, DOI 10.1007/978-3-642-38574-2_20
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Kiefer M, 2018, J AUTOM REASONING, V60, P337, DOI 10.1007/s10817-017-9433-5
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Lahiri Shuvendu K., 2018, DAGSTUHL REPORTS, V8, DOI /10.4230/DagRep.8.4.1
   Lahiri ShuvenduK., 2013, ACM SIGSOFT S FDN SO, P345, DOI DOI 10.1145/2491411.2491452
   Lamport L, 2021, P IEEE COMPUT SECUR, P650, DOI 10.1109/CSF51468.2021.00012
   Leavens G.T., 2006, SIGSOFT SOFTWARE ENG, V31, P1, DOI DOI 10.1145/1127878.1127884
   Leavens GT, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2766446
   Leino KRM, 2002, ACM SIGPLAN NOTICES, V37, P246, DOI 10.1145/543552.512559
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Mohan A, 2021, LECT NOTES COMPUT SC, V12760, P801, DOI 10.1007/978-3-030-81688-9_37
   Müller P, 2017, NATO SCI PEAC SECUR, V50, P104, DOI 10.3233/978-1-61499-810-5-104
   Murali A, 2020, LECT NOTES COMPUT SC, V12075, P515, DOI 10.1007/978-3-030-44914-8_19
   Nagaraj R, 2021, INDUSTRIALISATION FOR EMPLOYMENT AND GROWTH IN INDIA, P1, DOI 10.1109/LICS52264.2021.9470690
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Naumann David A., 2020, Leveraging Applications of Formal Methods, Verification and Validation. Engineering Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12477), P93, DOI 10.1007/978-3-030-61470-6_7
   Naumann DA, 2007, THEOR COMPUT SCI, V376, P205, DOI 10.1016/j.tcs.2007.02.004
   Naumann DA, 2006, LECT NOTES COMPUT SC, V4189, P279
   Nikouei Mohammad, 2019, THESIS STEVENS I TEC
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Pick L, 2018, LECT NOTES COMPUT SC, V10981, P164, DOI 10.1007/978-3-319-96145-3_9
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Pottier F, 2008, IEEE S LOG, P331, DOI 10.1109/LICS.2008.16
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Rinard M, 1999, Tech. Rep. MIT-LCS-TR-776
   Rinard Martin, 1999, P FLOCWORKSHOP RUN T
   Rosenberg S, 2012, LECT NOTES COMPUT SC, V7148, P379, DOI 10.1007/978-3-642-27940-9_25
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K., 2010, P USABLE VERIFICATIO
   Sedgewick R., 2011, Algorithm
   Shemer R, 2019, LECT NOTES COMPUT SC, V11561, P161, DOI 10.1007/978-3-030-25540-4_9
   Smans J, 2010, FORM ASP COMPUT, V22, P423, DOI 10.1007/s00165-010-0148-1
   Smans J, 2009, LECT NOTES COMPUT SC, V5653, P148, DOI 10.1007/978-3-642-03013-0_8
   Sojakova K, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P869, DOI 10.1145/3209108.3209141
   Sousa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276535
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   Thamsborg J, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:22)2012
   Unno H, 2021, LECT NOTES COMPUT SC, V12759, P742, DOI 10.1007/978-3-030-81685-8_35
   Weiss MarkAllen., 2010, DATA STRUCTURES PROB
   Wood T, 2017, LECT NOTES COMPUT SC, V10201, P937, DOI 10.1007/978-3-662-54434-1_35
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
   Zuck L, 2005, FORM METHOD SYST DES, V27, P335, DOI 10.1007/s10703-005-3402-z
NR 102
TC 0
Z9 0
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2022
VL 44
IS 4
AR 25
DI 10.1145/3551497
PG 136
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7S4NU
UT WOS:000910732700005
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Lorch, JR
   Chen, YX
   Kapritsos, M
   Ma, HJ
   Parno, B
   Qadeer, S
   Sharma, U
   Wilcox, JR
   Zhao, XY
AF Lorch, Jacob R.
   Chen, Yixuan
   Kapritsos, Manos
   Ma, Haojun
   Parno, Bryan
   Qadeer, Shaz
   Sharma, Upamanyu
   Wilcox, James R.
   Zhao, Xueyuan
TI Armada: Automated Verification of Concurrent Code with Sound Semantic
   Extensibility
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Refinement; weak memory models; x86-TSO
AB Safely writing high-performance concurrent programs is notoriously difficult. To aid developers, we introduce Armada, a language and tool designed to formally verify such programs with relatively little effort. Via a C-like language and a small-step, state-machine-based semantics, Armada gives developers the flexibility to choose arbitrary memory layout and synchronization primitives so that they are never constrained in their pursuit of performance. To reduce developer effort, Armada leverages SMT-powered automation and a library of powerful reasoning techniques, including rely-guarantee, TSO elimination, reduction, and pointer analysis. All of these techniques are proven sound, and Armada can be soundly extended with additional strategies over time. Using Armada, we verify five concurrent case studies and show that we can achieve performance equivalent to that of unverified code.
C1 [Lorch, Jacob R.] Microsoft Res, 1 Microsoft Way, Redmond, WA 98052 USA.
   [Chen, Yixuan] Yale Univ, 51 Prospect St, New Haven, CT 06511 USA.
   [Kapritsos, Manos; Ma, Haojun] Univ Michigan, Dept Comp Sci & Engn, 2260 Hayward St, Ann Arbor, MI 48109 USA.
   [Parno, Bryan; Zhao, Xueyuan] Carnegie Mellon Univ, Sch Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Parno, Bryan; Zhao, Xueyuan] Carnegie Mellon Univ, Carnegie Inst Technol, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Qadeer, Shaz] Calibra, Seattle, WA USA.
   [Sharma, Upamanyu] MIT, 32 Vassar St G978A, Cambridge, MA 02139 USA.
   [Wilcox, James R.] Certora, Milpitas, CA USA.
   [Qadeer, Shaz] Meta Inc, 1288 123rd Ave NE, Bellevue, WA 98005 USA.
   [Wilcox, James R.] Paul G Allen Ctr, Box 352350,185 E Stevens Way NE, Seattle, WA 98195 USA.
C3 Microsoft; Yale University; University of Michigan System; University of
   Michigan; Carnegie Mellon University; Carnegie Mellon University;
   Massachusetts Institute of Technology (MIT)
RP Lorch, JR (corresponding author), Microsoft Res, 1 Microsoft Way, Redmond, WA 98052 USA.
EM lorch@microsoft.com; yixuan.chen@yale.edu; manosk@umich.edu;
   mahaojun@umich.edu; parno@cmu.edu; shaz.qadeer@gmail.com;
   upamanyu@mit.edu; james@certora.com; xueyuanz@alumni.cmu.edu
RI Zhao, Xueyuan/IAQ-3631-2023
OI Zhao, Xueyuan/0000-0002-7421-3426; Ma, Haojun/0000-0002-2155-4809;
   Kapritsos, Manos/0000-0002-4368-7418; Chen, Yixuan/0000-0001-8659-8493
FU National Science Foundation [FMitF-2018915]; National Science
   Foundation; VMware [CNS-1700521]; Alfred P. Sloan Foundation; Google
   Faculty Fellowship
FX This work was supported in part by the National Science Foundation under
   grant no. FMitF-2018915, the National Science Foundation and VMware
   under grant no. CNS-1700521, a grant from the Alfred P. Sloan
   Foundation, and a Google Faculty Fellowship.
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   ADVE SV, 1990, 17TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P2, DOI 10.1109/ISCA.1990.134502
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Blazy S, 2006, LECT NOTES COMPUT SC, V4085, P460
   Boudol G, 2009, ACM SIGPLAN NOTICES, V44, P392, DOI 10.1145/1594834.1480930
   Chajed T, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P307
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Cohen E, 1998, LECT NOTES COMPUT SC, V1466, P317, DOI 10.1007/BFb0055631
   Cohen E, 2010, LECT NOTES COMPUT SC, V6172, P403, DOI 10.1007/978-3-642-14052-5_28
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dodds M, 2009, LECT NOTES COMPUT SC, V5502, P363, DOI 10.1007/978-3-642-00590-9_26
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   Flanagan C., 2004, Software Engineering Notes, V29, P221, DOI 10.1145/1013886.1007543
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kim J, 2017, LECT NOTES COMPUT SC, V10695, P273, DOI 10.1007/978-3-319-71237-6_14
   Kragl B, 2018, LECT NOTES COMPUT SC, V10981, P79, DOI 10.1007/978-3-319-96145-3_5
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Liang HJ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P455
   LibLFDS, 2019, LFDS 7 11 QUEUE IMPL
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Lorch JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P197, DOI 10.1145/3385412.3385971
   MELLORCRUMMEY JM, 1991, ACM T COMPUT SYST, V9, P21, DOI 10.1145/103727.103729
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Owens S, 2010, LECT NOTES COMPUT SC, V6183, P478, DOI 10.1007/978-3-642-14107-2_23
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Qadeer Shaz., 2019, COMMUNICATION
   Rushby John., 1992, NONINTERFERENCE TRAN
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sanan D, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3436808
   Scott Michael L., 2006, P ACM S PRINC DISTR, P267
   Sevcik J, 2011, ACM SIGPLAN NOTICES, V46, P43, DOI 10.1145/1925844.1926393
   Sigurbjarnarson H, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P287
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Tom's Hardware, 2021, MARK SHAR X86 ARCH
   Wheeler David A, 2004, SLOCCOUNT SOFTWARE D
NR 47
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2022
VL 44
IS 2
AR 12
DI 10.1145/3502491
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3B6GO
UT WOS:000828037100007
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Liu, L
   Millstein, T
   Musuvathi, M
AF Liu, Lun
   Millstein, Todd
   Musuvathi, Madanlal
TI Safe-by-default Concurrency for Modern Programming Languages
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Memory consistency models; sequential consistency; just-in-time
   compilers
ID MEMORY MODEL; CONSISTENCY; EFFICIENT; SEMANTICS
AB Modern "safe" programming languages follow a design principle that we call safety by default and performance by choice. By default, these languages enforce important programming abstractions, such as memory and type safety, but they also provide mechanisms that allow expert programmers to explicitly trade some safety guarantees for increased performance. However, these same languages have adopted the inverse design principle in their support for multithreading. By default, multithreaded programs violate important abstractions, such as program order and atomic access to individual memory locations to admit compiler and hardware optimizations that would otherwise need to be restricted. Not only does this approach conflict with the design philosophy of safe languages, but very little is known about the practical performance cost of providing a stronger default semantics.
   In this article, we propose a safe-by-default and performance-by-choice multithreading semantics for safe languages, which we call volatile-by-default. Under this semantics, programs have sequential consistency (SC) by default, which is the natural "interleaving" semantics of threads. However, the volatile-by-default design also includes annotations that allow expert programmers to avoid the associated overheads in performance-critical code. We describe the design, implementation, optimization, and evaluation of the volatile-by-default semantics for two different safe languages: Java and Julia. First, we present VBD-HotSpot and VBDA-HotSpot, modifications of Oracle's HotSpot JVM that enforce the volatile-by-default semantics on Intel x86-64 hardware and ARM-v8 hardware. Second, we present SC-Julia, a modification to the just-in-time compiler within the standard Julia implementation that provides best-effort enforcement of the volatile-by-default semantics on x86-64 hardware for the purpose of performance evaluation. We also detail two different implementation techniques: a baseline approach that simply reuses existing mechanisms in the compilers for handling atomic accesses, and a speculative approach that avoids the overhead of enforcing the volatile-by-default semantics until there is the possibility of an SC violation. Our results show that the cost of enforcing SC is significant but arguably still acceptable for some use cases today. Further, we demonstrate that compiler optimizations as well as programmer annotations can reduce the overhead considerably.
C1 [Liu, Lun; Millstein, Todd] Univ Calif Los Angeles, Comp Sci Dept, 404 Westwood Plaza,Box 951596, Los Angeles, CA 90095 USA.
   [Musuvathi, Madanlal] Microsoft Res, Microsoft Bldg 99,14820 NE 36th St, Redmond, WA 98052 USA.
C3 University of California System; University of California Los Angeles;
   Microsoft
RP Liu, L (corresponding author), Univ Calif Los Angeles, Comp Sci Dept, 404 Westwood Plaza,Box 951596, Los Angeles, CA 90095 USA.
EM unliu93@cs.ucla.edu; todd@cs.ucla.edu; madanm@microsoft.com
FU National Science Foundation [CCF-1527923, CNS-1704336]
FX This work is supported in part by National Science Foundation under
   grants CCF-1527923 and CNS-1704336.
CR Adve SV, 2010, COMMUN ACM, V53, P90, DOI 10.1145/1787234.1787255
   ADVE SV, 1990, 17TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P2, DOI 10.1109/ISCA.1990.134502
   Alglave J, 2014, LECT NOTES COMPUT SC, V8559, P508, DOI 10.1007/978-3-319-08867-9_33
   Alpern B, 2005, IBM SYST J, V44, P399, DOI 10.1147/sj.442.0399
   [Anonymous], 2012, P 2012 ACM WORKSHOP, DOI DOI 10.1145/2414729.2414732
   ARMv8, 2018, ARM CORTEX A SERIES
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bezanson Jeff., Announcing composable multi-threaded parallelism in Julia
   Bischl B, 2016, J MACH LEARN RES, V17
   Biswas S, 2015, ACM SIGPLAN NOTICES, V50, P241, DOI [10.1145/2814270.2814292, 10.1145/2858965.2814292]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Boehm Hans-Juergen, 2011, 3 USENIX WORKSH HOT
   Boehm Hans-Juergen, 2014, P WORKSH MEM SYST PE, P7
   Cenciarelli P, 2007, LECT NOTES COMPUT SC, V4421, P331
   Ceze L, 2007, CONF PROC INT SYMP C, P278, DOI 10.1145/1273440.1250697
   Demange D, 2013, ACM SIGPLAN NOTICES, V48, P329, DOI 10.1145/2480359.2429110
   Duan Y., 2013, Proceedings of the 40th Annual International Symposium on Computer Architecture, ISCA '13, P213
   Eide Eric, 2008, EMSOFT '08: Proceedings of the 8th ACM International Conference on Embedded Software, P255, DOI DOI 10.1145/1450058.1450093
   Flanagan C, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P244, DOI 10.1145/1806596.1806625
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Islam MM, 2016, PROC INT SYMP SOFTW, P241, DOI 10.1109/ISSRE.2016.48
   Jeffrey A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P759, DOI 10.1145/2933575.2934536
   JSR133, 2018, JSR133
   JuliaLang, 2020, JUL LANG
   Kaiser Jan-Oliver, 2017, P ECOOP, V74
   Kamil A., 2005, P ACM IEEE C SUP IEE
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Liu L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P16, DOI 10.1145/3314221.3314611
   Liu Lun, 2017, P ACM PROGR LANG OOP
   Liu Lun, 2020, THESIS U CALIFORNIA
   Lucia Brandon, 2010, P 37 INT S COMP ARCH
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Marino D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P199
   Marino D, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P351, DOI 10.1145/1806596.1806636
   Marino Daniel, 2015, LEIBNIZ INT P INFORM, V32, P177, DOI DOI 10.4230/LIPICS.SNAPL.2015.177
   Morisset R, 2013, ACM SIGPLAN NOTICES, V48, P187, DOI 10.1145/2499370.2491967
   Ou PZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276506
   Ouyang J., 2013, P 5 USENIX WORKSH HO
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pizlo F, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P69
   Ritson CarlG., 2016, P 21 ACM SIGPLAN S P
   Sarkar S, 2011, ACM SIGPLAN NOTICES, V46, P175, DOI 10.1145/1993316.1993520
   Schmidt D.C., 1997, Pattern languages of program design, V3, P363
   Sengupta A., 2015, PPPJ, P65
   Sengupta A, 2015, ACM SIGPLAN NOTICES, V50, P561, DOI [10.1145/2694344.2694379, 10.1145/2775054.2694379]
   Sevcík J, 2008, LECT NOTES COMPUT SC, V5142, P27, DOI 10.1007/978-3-540-70592-5_3
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Singh A, 2012, CONF PROC INT SYMP C, P524, DOI 10.1109/ISCA.2012.6237045
   Singh A, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1961296.1950375
   Sura Z., 2005, Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, PPoPP '05, P2, DOI DOI 10.1145/1065944.1065947
   Vollmer M, 2017, ACM SIGPLAN NOTICES, V52, P283, DOI [10.1145/3155284.3018746, 10.1145/3018743.3018746]
   Wonsun Ahn, 2009, P 42 INT S MICR
   Zaharia M, 2016, COMMUN ACM, V59, P56, DOI 10.1145/2934664
   Zhang MJ, 2017, ACM SIGPLAN NOTICES, V52, P115, DOI 10.1145/3156685.3092271
NR 62
TC 3
Z9 3
U1 1
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2021
VL 43
IS 3
AR 10
DI 10.1145/3462206
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW8UD
UT WOS:000753687300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Narayanan, P
   Shan, CC
AF Narayanan, Praveen
   Shan, Chung-chieh
TI Symbolic Disintegration with a Variety of Base Measures
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Probabilistic programs; density functions; conditional distributions;
   measure kernels
ID INFERENCE; OPERATIONS
AB Disintegration is a relation on measures and a transformation on probabilistic programs that generalizes density calculation and conditioning, two operations widely used for exact and approximate inference. Existing program transformations that find a disintegration or density automatically are limited to a fixed base measure that is an independent product of Lebesgue and counting measures, so they are of no help in practical cases that require tricky reasoning about other base measures. We present the first disintegrator that handles variable base measures, including discrete-continuous mixtures, dependent products, and disjoint sums. By analogy with type inference, our disintegrator can check a given base measure as well as infer an unknown one that is principal. We derive the disintegrator and prove it sound by equational reasoning from semantic specifications. It succeeds in a variety of applications where disintegration and density calculation had not been previously mechanized.
C1 [Narayanan, Praveen; Shan, Chung-chieh] Indiana Univ, Dept Comp Sci, 700 N Woodlawn Ave, Bloomington, IN 47408 USA.
C3 Indiana University System; Indiana University Bloomington
RP Narayanan, P (corresponding author), Indiana Univ, Dept Comp Sci, 700 N Woodlawn Ave, Bloomington, IN 47408 USA.
EM pravna@indiana.edu; ccshan@indiana.edu
FU DARPA [FA8750-14-2-0007]
FX This research was supported by DARPA Contract No. FA8750-14-2-0007.
CR Ackerman NL, 2017, MATH STRUCT COMP SCI, V27, P1287, DOI 10.1017/S0960129516000098
   Ackerman NL, 2011, IEEE S LOG, P107, DOI 10.1109/LICS.2011.49
   Afshar Hadi Mohasel, 2016, P 30 AAAI C ART INT
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 1976, THESIS
   [Anonymous], 1974, THEORY PROBABILITY C
   [Anonymous], 1996, Algebra of Programming
   Bhat S, 2013, LECT NOTES COMPUT SC, V7795, P508, DOI 10.1007/978-3-642-36742-7_35
   Bhat S, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P545
   Bondorf A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P1, DOI 10.1145/141471.141483
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Buntine WL, 1994, J ARTIF INTELL RES, V2, P159, DOI 10.1613/jair.62
   Carette Jacques, 2016, Practical Aspects of Declarative Languages. 18th International Symposium, PADL 2016. Proceedings: LNCS 9585, P135, DOI 10.1007/978-3-319-28228-2_9
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Chang JT, 1997, STAT NEERL, V51, P287, DOI 10.1111/1467-9574.00056
   Culpepper R, 2017, LECT NOTES COMPUT SC, V10201, P368, DOI 10.1007/978-3-662-54434-1_14
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   De Finetti B., 1972, Probability, Induction and Statistics
   de Finetti Bruno, 1970, TEORIA PROBABILITA S, V1
   Devroye L., 1986, Non-Uniform Random Variate Generation
   Dieudonne Jean., 1947, Annales de l'universite de Grenoble, V23, P25
   Fischer S, 2008, LECT NOTES COMPUT SC, V4915, P74, DOI 10.1007/978-3-540-78769-3_6
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Gao WH, 2017, ADV NEUR IN, V30
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   GELFAND AE, 1992, J AM STAT ASSOC, V87, P523, DOI 10.2307/2290286
   GEMAN S, 1984, IEEE T PATTERN ANAL, V6, P721, DOI 10.1109/TPAMI.1984.4767596
   Goodman ND., 2008, UAI, P220
   GORDON NJ, 1993, IEE PROC-F, V140, P107, DOI 10.1049/ip-f-2.1993.0015
   Green PJ, 1995, BIOMETRIKA, V82, P711, DOI 10.1093/biomet/82.4.711
   HASTINGS WK, 1970, BIOMETRIKA, V57, P97, DOI 10.1093/biomet/57.1.97
   Heunen Chris, 2017, IEEE S LOG, P1, DOI 10.1109/LICS.2017.8005137
   HUET G, 1978, ACTA INFORM, V11, P31, DOI 10.1007/BF00264598
   Hughes John, 1995, LNCS, V925, P53
   Hutton G., 1996, Journal of Functional Programming, V6, P181, DOI 10.1017/S0956796800001623
   Jorgensen J., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P258, DOI 10.1145/143165.143220
   Kahn H, 1951, National Bureau of Standards applied mathematics series, V12, P27
   Kock A, 2012, THEOR APPL CATEG, V26, P97
   Lawall J. L., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P227, DOI 10.1145/182409.182483
   Lunn DJ, 2000, STAT COMPUT, V10, P325, DOI 10.1023/A:1008929526011
   MacKay David J. C., 1998, LEARNING INFERENCE G
   METROPOLIS N, 1953, J CHEM PHYS, V21, P1087, DOI 10.1063/1.1699114
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Narayanan P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110255
   Nikodym O., 1930, Fundamenta Mathematicae, V15, P131
   Pfeffer A, 2009, 21ST INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-09), PROCEEDINGS, P1943
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pollard D., 2001, USERS GUIDE MEASURE
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Ridzuan AR, 2016, PROCEEDINGS OF SECOND INTERNATIONAL CONFERENCE ON CONTEMPORARY ECONOMIC ISSUES, P47
   Roberts DA, 2019, PR MACH LEARN RES, V89, P634
   Royden H. L., 1988, Real analysis, V3rd
   Sato T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290351
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Shan CC, 2017, ACM SIGPLAN NOTICES, V52, P130, DOI 10.1145/3093333.3009852
   Shiller RJ, 1999, ECONOMET THEOR, V15, P867, DOI 10.1017/S0266466699156056
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Tennent R. D., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P95
   Thielecke H, 2003, ACM SIGPLAN NOTICES, V38, P139, DOI 10.1145/640128.604144
   Thomas T. M.CoverandJ. A., 1991, ELEMENTS INFORM THEO, DOI 10.1002/0471200611
   Tierney L, 1998, ANN APPL PROBAB, V8, P1
   TOBIN J, 1958, ECONOMETRICA, V26, P24, DOI 10.2307/1907382
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   Vakar Matthijs., 2018, On s-finite measures and kernels
   Walia R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341702
   Wand M., 1987, Fundamenta Informaticae, V10, P115
   Wand M., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P37
   Wand M, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236782
   Wingate David, 2011, JMLR WORKSHOP C P, V15, P770
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Wu Y, 2018, PR MACH LEARN RES, V80
   Zinkov R, 2017, CONFERENCE ON UNCERTAINTY IN ARTIFICIAL INTELLIGENCE (UAI2017)
NR 77
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2020
VL 42
IS 2
AR 9
DI 10.1145/3374208
PG 60
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OJ1LU
UT WOS:000583729800004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Skorstengaard, L
   Devriese, D
   Birkedal, L
AF Skorstengaard, Lau
   Devriese, Dominique
   Birkedal, Lars
TI Reasoning about a Machine with Local Capabilities: Provably Safe Stack
   and Return Pointer Management
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 27th European Symposium on Programming (ESOP)
CY APR 16-19, 2018
CL Thessaloniki, GREECE
DE Capability machines; CHERI; local capabilities; well-bracketed control
   flow; stack encapsulation; logical relations; secure compilation
ID MODEL
AB Capability machines provide security guarantees at machine level which makes them an interesting target for secure compilation schemes that provably enforce properties such as control-flow correctness and encapsulation of local state. We provide a formalization of a representative capability machine with local capabilities and study a novel calling convention. We provide a logical relation that semantically captures the guarantees provided by the hardware (a form of capability safety) and use it to prove control-flow correctness and encapsulation of local state. The logical relation is not specific to our calling convention and can be used to reason about arbitrary programs.
C1 [Skorstengaard, Lau; Birkedal, Lars] Aarhus Univ, Dept Comp Sci, Abogade 34, DK-8210 Aarhus, Denmark.
   [Devriese, Dominique] Vrije Univ Brussel, Vakgrp Comp Wetenschappen, Pl Laan 2, B-1050 Elsene, Belgium.
C3 Aarhus University; Vrije Universiteit Brussel
RP Skorstengaard, L (corresponding author), Aarhus Univ, Dept Comp Sci, Abogade 34, DK-8210 Aarhus, Denmark.
EM lau@cs.au.dk; dominique.devriese@vub.be; birkedal@cs.au.dk
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856
FU ModuRes Sapere Aude Advanced Grant from The Danish Council for
   Independent Research for the Natural Sciences (FNU); COST Action EUTypes
   [CA15123]; Research Foundation Flanders (FWO)
FX This research was supported in part by the ModuRes Sapere Aude Advanced
   Grant from The Danish Council for Independent Research for the Natural
   Sciences (FNU). Support for an STSM was received from COST Action
   EUTypes (CA15123). Dominique Devriese held a Postdoctoral fellowship
   from the Research Foundation Flanders (FWO) during most of this
   research. This research was supported in part by the Research Foundation
   Flanders (FWO).
CR Abadi M, 1998, LECT NOTES COMPUT SC, V1543, P291
   Abadi M, 2005, P 12 ACM C COMP COMM, DOI [10.1145/1102120.1102165, DOI 10.1145/1102120.1102165]
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   AMERICA P, 1989, J COMPUT SYST SCI, V39, P343, DOI 10.1016/0022-0000(89)90027-5
   [Anonymous], 2004, Ph.D. Dissertation.
   [Anonymous], SOSP
   [Anonymous], 2014, The Java Virtual Machine Specification, Java SE 8 Edition
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Benton N, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P97
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal L, 2010, THEOR COMPUT SCI, V411, P4102, DOI 10.1016/j.tcs.2010.07.010
   Birkedal Lars, 2014, TASTE CATEGORICAL LO
   Bizjak Ales, 2017, SOME THEOREMS UNPUB
   CARTER NP, 1994, SIGPLAN NOTICES, V29, P319, DOI 10.1145/195470.195579
   Chisnall D, 2017, OPER SYST REV, V51, P569, DOI 10.1145/3037697.3037725
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Devriese Dominique, 2016, EUR S SEC PRIV
   Dreyer D., 2012, JFP, V22
   El-Korashy Akram, 2016, THESIS
   Forrest S, 1997, SIXTH WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS, PROCEEDINGS, P67, DOI 10.1109/HOTOS.1997.595185
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Joannou A, 2017, PR IEEE COMP DESIGN, P641, DOI 10.1109/ICCD.2017.112
   Juglaret Y, 2016, P IEEE CSFW, P45, DOI 10.1109/CSF.2016.11
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krebbers Robbert, 2017, EUR S PROGR
   Krebbers Robbert, 2017, PRINCIPLES PROGRAMMI
   KRIVINE JL, 1994, ANN PURE APPL LOGIC, V68, P53, DOI 10.1016/0168-0072(94)90047-7
   LEVY H.M., 1984, CAPABILITY BASED COM, V12
   Maffeis S, 2010, P IEEE S SECUR PRIV, P125, DOI 10.1109/SP.2010.16
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Ni Zhaozhong, 2006, PRINCIPLES PROGRAMMI
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2016, P IEEE CSFW, P17, DOI 10.1109/CSF.2016.9
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Sewell Thomas, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P325, DOI 10.1007/978-3-642-22863-6_24
   Shapiro JS, 1999, OPERATING SYSTEMS REVIEW, VOL 33, NO 5, DECEMBER 1999, P170, DOI 10.1145/319344.319163
   Skorstengaard Lau, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P475, DOI 10.1007/978-3-319-89884-1_17
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Skorstengaard Lau, 2019, TECHNICAL REPORT
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   Thamsborg J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P445
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Woodruff J, 2014, CONF PROC INT SYMP C, P457, DOI 10.1109/ISCA.2014.6853201
NR 46
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2020
VL 42
IS 1
SI SI
AR 5
DI 10.1145/3363519
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KJ1TF
UT WOS:000511839200005
OA Green Published
DA 2024-07-18
ER

PT J
AU D'Antoni, L
   Veanes, M
   Livshits, B
   Molnar, D
AF D'Antoni, Loris
   Veanes, Margus
   Livshits, Benjamin
   Molnar, David
TI Fast: A Transducer-Based Language for Tree Manipulation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Verification; Symbolic tree transducers; FAST
ID TOP-DOWN; BOTTOM-UP; EQUIVALENCE
AB Tree automata and transducers are used in a wide range of applications in software engineering. While these formalisms are of immense practical use, they can only model finite alphabets. To overcome this problem we augment tree automata and transducers with symbolic alphabets represented as parametric theories. Admitting infinite alphabets makes these models more general and succinct than their classic counterparts. Despite this, we show how the main operations, such as composition and language equivalence, remain computable given a decision procedure for the alphabet theory. We introduce a high-level language called FAST that acts as a front-end for the preceding formalisms.
C1 [D'Antoni, Loris] Univ Penn, Philadelphia, PA 19104 USA.
   [Veanes, Margus; Livshits, Benjamin; Molnar, David] Microsoft Res, Redmond, WA USA.
C3 University of Pennsylvania; Microsoft
RP D'Antoni, L (corresponding author), Univ Penn, 3330 Walnut St, Philadelphia, PA 19104 USA.
EM lorisdan@seas.upenn.edu; margus@microsoft.com; livshits@microsoft.com;
   dmolnar@microsoft.com
OI D'Antoni, Loris/0000-0001-9625-4037
FU NSF [CCF 1138996]
FX Loris D'Antoni did this work as part of an internship at Microsoft
   Research, and he is supported by NSF Expeditions in Computing award CCF
   1138996.
CR Alur R, 2012, LECT NOTES COMPUT SC, V7392, P42, DOI 10.1007/978-3-642-31585-5_8
   BAKER BS, 1979, INFORM CONTROL, V41, P186, DOI 10.1016/S0019-9958(79)90561-8
   Becker Oliver., 2003, XMIDX 2003, volume 24 of LNI, V24, P83
   Botincan M, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI 10.1145/2480359.2429123
   Bouajjani A, 2008, LECT NOTES COMPUT SC, V5148, P57, DOI 10.1007/978-3-540-70844-5_7
   Comon H., 2007, TREE AUTOMATA TECHNI
   Cotton-Barratt C, 2015, LECT NOTES COMPUT SC, V9034, P249, DOI 10.1007/978-3-662-46678-0_16
   D'Antoni Loris, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P624, DOI 10.1007/978-3-642-39799-8_41
   D'Antoni L, 2013, LECT NOTES COMPUT SC, V7737, P209
   D'Antoni L, 2014, ACM SIGPLAN NOTICES, V49, P541, DOI 10.1145/2535838.2535849
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Engelfriet, 1980, FORMAL LANGUAGE THEO, P241
   ENGELFRIET J, 1975, MATH SYST THEORY, V9, P198, DOI 10.1007/BF01704020
   ENGELFRIET J, 1977, MATH SYST THEORY, V10, P289, DOI 10.1007/BF01683280
   ENGELFRIET J, 1985, J COMPUT SYST SCI, V31, P71, DOI 10.1016/0022-0000(85)90066-2
   Engelfriet J, 2006, INFORM PROCESS LETT, V100, P206, DOI 10.1016/j.ipl.2006.05.015
   Esik Z., 1980, Acta Cybern., V5, P1
   Fruhwirth Thom W., 1991, P 6 ANN IEEE S LOG C, P300, DOI [http://dx.doi.org/10.1109/LICS.1991.151654, DOI 10.1109/LICS.1991.151654]
   Fülöp Z, 2014, ACTA INFORM, V51, P297, DOI 10.1007/s00236-014-0197-7
   FULOP Z, 1989, MATH SYST THEORY, V21, P125
   Fulop Zoltan., 1998, Syntax-Directed Semantics: Formal Models Based on Tree Transducers
   Geneves Pierre., 2012, WWW'12, P809
   Hakuta S, 2014, PROC INT CONF DATA, P952, DOI 10.1109/ICDE.2014.6816714
   Hejlsberg Anders., 2003, C# Language Specification
   Hooimeijer Pieter., 2011, Proceedings of the 20th USENIX Conference on Security, SEC'11, P1
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   John E.Hopcroft Jeff D. Ullman., 1979, INTRO AUTOMATA THEOR
   Kobayashi N, 2010, ACM SIGPLAN NOTICES, V45, P495, DOI 10.1145/1707801.1706355
   Kuhnemann Armin, 1999, P 4 FUJ INT S FUNCT
   Lengál O, 2012, LECT NOTES COMPUT SC, V7214, P79, DOI 10.1007/978-3-642-28756-5_7
   Maletti A, 2009, SIAM J COMPUT, V39, P410, DOI 10.1137/070699160
   Maneth Sebastian., 2005, PODS'05, P283, DOI DOI 10.1145/1065167.1065203
   May Jonathan., 2008, A primer on tree automata software for natural language processing
   Mikolaj Bojanczyk., 2006, Proceedings of the twenty-fifth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems, PODS '06, P10
   Milo Tova., 2000, Proc. 19th ACM Symposium on Principles of Database Systems (PODS'2000), P11, DOI DOI 10.1145/335168.335171
   Perst T, 2004, INFORM PROCESS LETT, V89, P141, DOI 10.1016/j.ipl.2003.05.001
   Purtee Adam, 2012, P WORKSH APPL TREE A
   Raoult Jean-Claude., 1992, Tree Automata and Languages, P311
   SEIDL H, 1994, MATH SYST THEORY, V27, P285, DOI 10.1007/BF01192143
   SEIDL H, 1994, INFORM PROCESS LETT, V52, P57, DOI 10.1016/0020-0190(94)00130-8
   The Unicode Consortium, UN STAND 6 3 EM
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Veanes Margus, 2012, Perspectives of System Informatics. 8th International Ershov Informatics Conference, PSI 2011. Revised Selected Papers, P377, DOI 10.1007/978-3-642-29709-0_32
   Veanes M, 2015, INFORM PROCESS LETT, V115, P418, DOI 10.1016/j.ipl.2014.11.005
   Veanes M, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2103621.2103674
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Walmsley Priscilla., 2007, XQuery
NR 48
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2015
VL 38
IS 1
AR 1
DI 10.1145/2791292
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CU1EB
UT WOS:000363261400001
DA 2024-07-18
ER

PT J
AU Garcia, R
   Tanter, É
   Wolff, R
   Aldrich, J
AF Garcia, Ronald
   Tanter, Eric
   Wolff, Roger
   Aldrich, Jonathan
TI Foundations of Typestate-Oriented Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Design; Reliability; Theory; Verification; Access
   permissions; gradual typing; types; typestates
ID CHECKING; LANGUAGE
AB Typestate reflects how the legal operations on imperative objects can change at runtime as their internal state changes. A typestate checker can statically ensure, for instance, that an object method is only called when the object is in a state for which the operation is well defined. Prior work has shown how modular typestate checking can be achieved thanks to access permissions and state guarantees. However, typestate was not treated as a primitive language concept: typestate checkers are an additional verification layer on top of an existing language. In contrast, a typestate-oriented programming (TSOP) language directly supports expressing typestates. For example, in the Plaid programming language, the typestate of an object directly corresponds to its class, and that class can change dynamically. Plaid objects have not only typestate-dependent interfaces but also typestate-dependent behaviors and runtime representations.
   This article lays foundations for TSOP by formalizing a nominal object-oriented language with mutable state that integrates typestate change and typestate checking as primitive concepts. We first describe a statically typed language-Featherweight Typestate (FT)-where the types of object references are augmented with access permissions and state guarantees. We describe a novel flow-sensitive permission-based type system for FT. Because static typestate checking is still too rigid for some applications, we then extend this language into a gradually typed language-Gradual Featherweight Typestate (GFT). This language extends the notion of gradual typing to account for typestate: gradual typestate checking seamlessly combines static and dynamic checking by automatically inserting runtime checks into programs. The gradual type system of GFT allows programmers to write dynamically safe code even when the static type checker can only partly verify it.
   Categories and Subject Descriptors: D. 3.1 [Programming Languages]: Formal Definitions and Theory-Semantics; D.3.3 [Programming Languages]: Language Constructs and Features-Typestate; D.2.10 [Software Engineering]: Design-Representation
C1 [Garcia, Ronald] Univ British Columbia, Dept Comp Sci, Software Practices Lab, Vancouver, BC V5Z 1M9, Canada.
   [Tanter, Eric] Univ Chile, Dept Comp Sci, PLEIAD Lab, Santiago, Chile.
   [Wolff, Roger; Aldrich, Jonathan] Carnegie Mellon Univ, Inst Software Res, Pittsburgh, PA 15213 USA.
C3 University of British Columbia; Universidad de Chile; Carnegie Mellon
   University
RP Garcia, R (corresponding author), Univ British Columbia, Dept Comp Sci, Software Practices Lab, Vancouver, BC V5Z 1M9, Canada.
EM rxg@cs.ubc.ca; etanter@dcc.uchile.cl; froger.wolff@cs.cmu.edu;
   jonathan.aldrich@cs.cmu.edu
RI Tanter, Éric/A-7955-2008
OI Tanter, Éric/0000-0002-7359-890X; Aldrich, Jonathan/0000-0003-0631-5591
FU National Science Foundation [0987060, tteCF-0811592, CCF-1116907];
   Computing Research Association for the CiFellows Prqject and by the
   Natural Sciences and Engineering Research Council of Canada; FONDECYT
   [1110051]; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [1116907] Funding Source: National
   Science Foundation
FX R. Garcia is supported by the National Science Foundation under grant
   #0987060 to the Computing Research Association for the CiFellows Prqject
   and by the Natural Sciences and Engineering Research Council of Canada.
   E. Tanter is partially funded by FONDECYT Project 1110051, Chile, J.
   Aldrich and R. Wolff are supported by the National Science Foundation
   under grants tteCF-0811592 and #CCF-1116907.
CR Ahmed A, 2007, FUND INFORM, V77, P397
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   BAKER HG, 1994, SIGPLAN NOTICES, V29, P38, DOI 10.1145/185009.185016
   Bierhoff K, 2007, ACM SIGPLAN NOTICES, V42, P301, DOI 10.1145/1297105.1297050
   Bierhoff K, 2009, LECT NOTES COMPUT SC, V5653, P195, DOI 10.1007/978-3-642-03013-0_10
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   Bodden E., 2010, Proceedings of the 32nd ACM/IEEE international Conference on Software Engineering, P5
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Boyland JT, 2005, ACM SIGPLAN NOTICES, V40, P283, DOI 10.1145/1047659.1040329
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   Drossopoulou S., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P130
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Gamma Erich., 1994, DESIGN PATTERNS
   Garcia Ronald, 2013, CMUISR13112 CARN MEL
   Gay SJ, 2010, ACM SIGPLAN NOTICES, V45, P299, DOI 10.1145/1707801.1706335
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jaspan C, 2009, LECT NOTES COMPUT SC, V5653, P27, DOI 10.1007/978-3-642-03013-0_3
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Levanoni Y, 2006, ACM T PROGR LANG SYS, V28, P1, DOI 10.1145/1111596.1111597
   Naden K, 2012, ACM SIGPLAN NOTICES, V47, P557, DOI 10.1145/2103621.2103722
   Naeem NA, 2008, ACM SIGPLAN NOTICES, V43, P347, DOI 10.1145/1449955.1449792
   Nanda MG, 2005, ACM SIGPLAN NOTICES, V40, P77, DOI 10.1145/1103845.1094818
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Saini Darpan, 2010, P 12 WORKSH FORM TEC
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, P SCH FUNCT PROGR WO
   Siek Jeremy G., 2008, P 2008 S DYN LANG DL, P7
   Stork Sven, 2013, THESI CARNEGIE MELLO
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sunshine J, 2011, ACM SIGPLAN NOTICES, V46, P713, DOI 10.1145/2076021.2048122
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   Wolff Roger, 2013, CMUISR13113 CARN MEL
NR 35
TC 44
Z9 50
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2014
VL 36
IS 4
AR 12
DI 10.1145/2629609
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT0JN
UT WOS:000344622700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Dimoulas, C
   Felleisen, M
AF Dimoulas, Christos
   Felleisen, Matthias
TI On Contract Satisfaction in a Higher-Order World
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Design; Reliability; Theory; Contract satisfaction;
   higher-order contracts
AB Behavioral software contracts have become a popular mechanism for specifying and ensuring logical claims about a program's flow of values. While contracts for first-order functions come with a natural interpretation and are well understood, the various incarnations of higher-order contracts adopt, implicitly or explicitly, different views concerning the meaning of contract satisfaction. In this article, we define various notions of contract satisfaction in terms of observational equivalence and compare them with each other and notions in the literature. Specifically, we introduce a small model language with higher-order contracts and use it to formalize different notions of contract satisfaction. Each of them demands that the contract parties satisfy certain observational equivalences.
   Categories and Subject Descriptors: D. 3.1 [Programming Languages]: Formal Definitions and Theory-Semantics
C1 [Dimoulas, Christos; Felleisen, Matthias] Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
C3 Northeastern University
RP Dimoulas, C (corresponding author), Northeastern Univ, Coll Comp & Informat Sci, 360 Huntington Ave, Boston, MA 02115 USA.
EM chrdimo@ccs.neu.edu; m.felleisen@neu.edu
RI Dimoulas, Christos/P-7100-2018
OI Dimoulas, Christos/0000-0002-9338-7034
FU AFOSR [FA9550-09-1-0110]
FX This work was supported in part by AFOSR grant FA9550-09-1-0110. The
   views and conclusions contained in this article are those of the authors
   and should not be interpreted as necessarily representing the official
   policies or endorsements, either expressed or implied, of the AFOSR or
   the U.S. Government.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   BARNETT M, 2004, LNCS, V3362, P49, DOI [DOI 10.1007/978-3-540-30569-9_3, 10.1007]
   Beugnard A, 1999, COMPUTER, V32, P38, DOI 10.1109/2.774917
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Carpineti S, 2006, LECT NOTES COMPUT SC, V4184, P148
   CASTAGNA G, 2009, P 20 INT C CONC THEO, P211
   Castagna G, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1328438.1328471
   CHITIL O, 2003, 15 INT WORKSH IMPL F, P1
   DEALFARO L, 2001, P 9 ANN S FDN SOFTW, P109
   Degen M, 2010, J LOGIC ALGEBR PROGR, V79, P515, DOI 10.1016/j.jlap.2010.07.006
   Detlefs D. L., 1998, 158 COMP SRC
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   FINDLER R.B., 2001, P 8 EUROPEAN SOFTWAR, P229, DOI DOI 10.1145/503209.503240
   Findler RB, 2006, LECT NOTES COMPUT SC, V3945, P226
   FINDLER RB, 2007, 16 INT WORKSH IMPL F, P111
   FINDLER RB, 2002, P 7 ACM SIGPLAN INT, P48
   Findler Robert Bruce, 2004, TR200402 U CHIC COMP
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Flatt M., 2010, PLTT20101
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   GRONSKI J, 2007, P 8 S TRENDS FUNCT P, P54
   Hennessy M., 1988, An algebraic theory of processes
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P208
   Knowles K., 2006, Sage: Unified hybrid checking for first-class types, general refinement types, and dynamic
   Koutavas V., 2008, THESIS NE U
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Meyer B., 1988, Object-Oriented Software Construction
   Meyer B., 1992, Eiffel: The Language
   Meyer Bertrand., 1991, ADV OBJECT ORIENTEDS, P1
   Morris James Hiram, 1968, Ph.D. thesis
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   ROSENBLUM DS, 1995, IEEE T SOFTWARE ENG, V21, P19, DOI 10.1109/32.341844
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
NR 37
TC 30
Z9 30
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2011
VL 33
IS 5
AR 16
DI 10.1145/2039346.2039348
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 857AI
UT WOS:000297685600002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Balakrishnan, G
   Reps, T
AF Balakrishnan, Gogul
   Reps, Thomas
TI WYSINWYX: What You See Is Not What You eXecute
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Security; Theory; Verification; Abstract interpretation;
   context-sensitive analysis; data structure recovery; interprocedural
   dataflow analysis; pointer analysis; reverse engineering; static
   analysis
AB Over the last seven years, we have developed static-analysis methods to recover a good approximation to the variables and dynamically allocated memory objects of a stripped executable, and to track the flow of values through them. The article presents the algorithms that we developed, explains how they are used to recover Intermediate Representations (IRs) from executables that are similar to the IRs that would be available if one started from source code, and describes their application in the context of program understanding and automated bug hunting.
   Unlike algorithms for analyzing executables that existed prior to our work, the ones presented in this article provide useful information about memory accesses, even in the absence of debugging information. The ideas described in the article are incorporated in a tool for analyzing Intel x86 executables, called CodeSurfer/x86. CodeSurfer/x86 builds a system dependence graph for the program, and provides a GUI for exploring the graph by (i) navigating its edges, and (ii) invoking operations, such as forward slicing, backward slicing, and chopping, to discover how parts of the program can impact other parts.
   To assess the usefulness of the IRs recovered by CodeSurfer/x86 in the context of automated bug hunting, we built a tool on top of CodeSurfer/x86, called Device-Driver Analyzer for x86 (DDA/x86), which analyzes device-driver executables for bugs. Without the benefit of either source code or symbol-table/debugging information, DDA/x86 was able to find known bugs (that had been discovered previously by source-code analysis tools), along with useful error traces, while having a low false-positive rate. DDA/x86 is the first known application of program analysis/verification techniques to industrial executables.
C1 [Balakrishnan, Gogul] NEC Labs Amer Inc, Princeton, NJ 08540 USA.
   [Reps, Thomas] Univ Wisconsin, Dept Comp Sci, Madison, WI 53703 USA.
   [Reps, Thomas] GrammaTech Inc, Ithaca, NY 14850 USA.
C3 NEC Corporation; University of Wisconsin System; University of Wisconsin
   Madison
RP Balakrishnan, G (corresponding author), NEC Labs Amer Inc, 4 Independence Way, Princeton, NJ 08540 USA.
EM bgogul@nec-labs.com; reps@cs.wisc.edu
FU ONR [N00014-01-1-0796, N00014-01-1-0708]; NSF [CCR-9986308, CCF-0540955,
   CCF-0524051]; HSARPA under AFRL [FA8750-05-C-0179]; AFRL
   [FA8750-06-C-0249]; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [0810053] Funding Source:
   National Science Foundation
FX The work was supported in part by ONR under grants N00014-01-1-{0796,
   0708}, by NSF under grants CCR-9986308 and CCF-{0540955, 0524051}, by
   HSARPA under AFRL contract FA8750-05-C-0179, and by AFRL under contract
   FA8750-06-C-0249.
CR AIGNER G, 1996, P EUR C OBJ OR PROGR
   Amme W, 2000, INT J PARALLEL PROG, V28, P431, DOI 10.1023/A:1007588710878
   [Anonymous], 1998, PROCEEDINGS OF THE 2
   [Anonymous], 1990, LICS, DOI DOI 10.1109/LICS.1990.113767
   [Anonymous], 2009, P 30 ACM SIGPLAN C P
   BACKES W, 2004, THESIS U SAARLANDES
   Bala V., 2000, P C PROGR LANG DES I, P1
   BALAKRISHNAN G, 2005, P C COMP AID VER
   Balakrishnan G., 2005, P INT C COMP CONSTR
   BALAKRISHNAN G, 2008, P C TOOLS ALG CONSTR
   BALAKRISHNAN G, 2007, P IFIP WORK C VER SO
   BALAKRISHNAN G, 2007, P C VER MOD CHECK IN
   BALAKRISHNAN G, 2007, 1603 U WISC COMP SCI
   BALAKRISHNAN G, 2006, P STAT AN S
   Balaram P, 2004, CURR SCI INDIA, V86, P5
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   BALL T, 2001, P C COMP AID VER
   BALL T, 2006, P EUR C COMP SYST
   BERGERON J, 1999, P INT WORKSH EN TECH
   BERGERON J, 2001, INT J REQ ENGIN
   Blanchet Bruno, 2003, ACM SIGPLAN NOTICES, P196, DOI DOI 10.1145/780822.781153
   BOUAJJANI A, 1997, P INT C CONC THEOR C
   BOURDONCLE F, 1993, LECT NOTES COMPUTER
   BROWN R, 2007, WORKSH PROGR AN SOFT
   BRUMLEY D, 2006, CMUCS06180 SCH COMP
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Bush WR, 2000, SOFTWARE PRACT EXPER, V30, P775, DOI 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H
   Cai HX, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P66, DOI 10.1145/1250734.1250743
   Chandra S., 1999, Proceedings of the 1999 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering. (Toulouse, P66
   CHANG BY, 2006, P STAT AN S
   Chen H., 2002, P 9 ACM C COMPUTER C, P235
   CHOU A, 2001, P S OP SYST PRINC
   CHRISTODORESCU M, 2005, P C PROGR AN SOFTW T
   Cifuentes C, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P188
   Cifuentes C, 1998, PROC IEEE INT CONF S, P228, DOI 10.1109/ICSM.1998.738514
   CIFUENTES C, 1997, 421 U QUEENSL
   CLARKE EM, 2000, P COMP AID VER, P154
   COOPER K, 1988, P SIGPLAN 88 C PROGR, P57
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Cova M., 2006, P ANN COMP SEC APPL
   Coverity, COV PREV
   Das Manuvir., 2002, PLDI, P57, DOI DOI 10.1145/512529.512538
   DEBRAY SK, 2004, STACK ANAL X86 EXECU
   DESUTTER B, 2000, P INT C PAR DISTR PR
   Dhurjati D, 2006, LECT NOTES COMPUT SC, V4134, P425
   Dor Nurit., 2003, PLDI 03, P155, DOI [10.1145/781131.781149, DOI 10.1145/781131.781149]
   Edwards Andrew., 2001, VULCAN BINARY TRANSF
   Eidorff PeterH., 1999, Proceedings of POPL 1999, P1
   Emmerik M.J.V., 2007, THESIS U QUEENSLAND
   Engler D, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Feng X, 2006, ACM SIGPLAN NOTICES, V41, P401, DOI 10.1145/1133981.1134028
   FERDINAND C, 2009, COMMUNICATION
   FERDINAND C, 2001, P 1 INT WORKSH EMB S, P469
   FINKEL A, 1997, ELEC NOT THEOR COMPU, V9
   FISCHER J, 2005, P C FDN SOFTW ENG
   GOPAN D, 2006, P C COMP AID VER
   GOPAN D, 2007, P C COMP AID VER
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   *GRAMMATECH INC, CODESONAR
   *GRAMMATECH INC, CODESURFER
   GREWE D, 2008, THESIS U SAARLANDES
   Guo BL, 2005, INT SYM CODE GENER, P291
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   HAVELUND K, 2000, SOFTW TOOLS TECH TRA, V2, P4
   Henzinger T. A., 2004, SIGPLAN Notices, V39, P232, DOI 10.1145/982962.964021
   Henzinger ThomasA., 2002, Proc. of the Symposium on Principles of Programming Languages. POPL, P58
   HIND M, 2001, P C PROGR AN SOFTW T
   HOLLEY LH, 1981, IEEE T SOFTWARE ENG, V7, P60, DOI 10.1109/TSE.1981.234509
   Howard M., 2002, SOME BAD NEWS SOME G
   *IDAPRO, IDAPRO DIS
   KISS A, 2003, P INT WORKSH SOURC C
   KRUEGEL C, 2005, P USENIX SEC S
   Kurshan R.P., 1994, COMPUTER AIDED VERIF
   LAL A, 2005, P C COMP AID VER
   Larus JamesR., 1995, PLDI '95, P291
   LIM J, 2006, P INT C REV ENG
   LIM J., 2008, P INT C COMP CONSTR
   MANEVICH R, 2002, P STAT AN S, P196
   MAUBORGNE L, 2005, P EUR S PROGR
   MINE A, 2006, P C LANG COMP TOOLS
   MULLEROLM M, 2005, P EUR S PROGR
   MYCROFT A, 1999, P EUR S PROGR
   MYERS E, 1984, P S PRINC PROGR LANG
   NI Z, 2006, P 33 ACM S PRINC PRO, P320
   NITA M, 2008, P S PRINC PROGR LANG
   OCALLAHAN R, 1997, P INT C SOFTW ENG
   Oney W., 2003, PROGRAMMING MICROSOF, VSecond
   Pande H. D., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P238
   *PHOEN, PHOEN SOFTW OPT AN F
   PIOLI A, 1999, 2153296749 RC IBM TJ
   *PREFAST, 2004, PREFAST DRIV SPEC RU
   RAMALINGAM G, 1999, P S PRINC PROGR LANG
   Regehr J., 2005, ACM T EMBED COMPUT S, V4, P751, DOI DOI 10.1145/1113830.1113833
   REPS T, 1983, ACM T PROGR LANG SYS, V5, P449, DOI 10.1145/2166.357218
   REPS T, 2005, P AS S PROGR LANG SY
   REPS T, 2006, P C PART EV SEM BAS
   Reps Thomas, 2008, P INT C COMP CONSTR
   RIVAL X, 2003, P C VER MOD CHECK IN
   Rugina R, 2005, ACM T PROGR LANG SYS, V27, P185, DOI 10.1145/1057387.1057388
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   SIFF M, 1996, P C FDN SOFTW ENG
   Srivastava A., 1994, P C PROGR LANG DES I
   SWIFT M, 2004, P S OP SYST DES IMPL
   Swift MM, 2005, ACM T COMPUT SYST, V23, P77, DOI 10.1145/1047915.1047919
   VANDEURSEN A, 1998, P WORK C REV ENG
   WAGNER D, 2000, P C NETW DISTR SYST
   WALL DW, 1992, CODE GENERATION CONC
   *WHDC, 2007, C KERN MOD DRIV PROS
   *WHQL, 2004, DEFR WHQL DRIV CERT
   *WIK, 2009, SHRINK WRAP CLICK WR
   *WIK, 2009, ENF SOFTW LIC AGR EN
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   *WIND DDK, 2003, WIND SERV 2003 DDK
   XU Z, 2000, P C PROGR LANG DES I
   XU Z, 2001, P EUR S PROGR
   ZHANG J, 2007, P COMP SOFTW APPL C
   [No title captured]
   [No title captured]
NR 121
TC 118
Z9 150
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2010
VL 32
IS 6
AR 23
DI 10.1145/1749608.1749612
PG 84
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 661VO
UT WOS:000282759900004
OA Bronze
DA 2024-07-18
ER

PT J
AU Zhuang, XT
   Pande, S
AF Zhuang, Xiaotong
   Pande, Santosh
TI An Optimization Framework for Embedded Processors with Auto-Addressing
   Mode
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Performance; Offset assignment; layout assignment; digital
   signal processing; auto-modification addressing mode; SOA; GOA; variable
   coalescence
AB Modern embedded processors with dedicated address generation unit support memory accesses through auto-increment/decrement addressing mode. The auto-increment/decrement mode, if properly utilized, can save address arithmetic instructions, reduce static and dynamic memory footprint of the program, and speed up the execution as well.
   Liao [1995, 1996] categorized this problem as Simple Offset Assignment (SOA) and General Offset Assignment (GOA), which involves storage layout of variables and assignment of address registers, respectively, proposing several heuristic solutions. This article proposes a new direction for investigating the solution space of the problem. The general idea [Zhuang 2003] is to perform simplification of the underlying access graph through coalescence of the memory locations of program variables. A comprehensive framework is proposed including coalescence-based offset assignment and post/pre-optimization. Variables not interfering with others (not simultaneously live at any program point) can be coalesced into the same memory location. Coalescing allows simplifications of the access graph yielding better SOA solutions; it also reduces the address register pressure to such low values that some GOA solutions become optimal. Moreover, it can reduce the memory footprint both statically and at runtime for stack variables. Our second optimization (post/pre-optimization) considers both post-and pre-modification mode for optimizing code across basic blocks, which makes it useful. Making use of both addressing modes further reduces SOA/GOA cost and our post/pre-optimization phase is optimal in selecting post or pre mode after variable offsets have been determined.
   We have shown the advantages of our framework over previous approaches to capture more opportunities to reduce both stack size and SOA/GOA cost, leading to more speedup.
C1 [Zhuang, Xiaotong] IBM Corp, TJ Watson Res Ctr, Ossining, NY 10562 USA.
   [Pande, Santosh] Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
C3 International Business Machines (IBM); University System of Georgia;
   Georgia Institute of Technology
RP Zhuang, XT (corresponding author), IBM Corp, TJ Watson Res Ctr, New York 134 & Old Kitchawan Rd, Ossining, NY 10562 USA.
EM santosh@cc.gatech.edu
OI Pande, Santosh/0000-0001-6723-8062
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   ARAUJO G, 1996, P 9 INT S SYST SYNTH, P31
   ATRI S, 1999, THESIS LOUISIANA STA
   ATRI S, 2000, P C LANG COMP HIGH P
   BARTLEY DH, 1992, SOFTWARE PRACT EXPER, V22, P101, DOI 10.1002/spe.4380220202
   Chaitin G. J., 1982, P 1982 SIGPLAN S COM
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   Ganssle J.G., 1992, The art of programming embedded systems
   GEBOTYS C, 1997, P INT C COMP AID DES, P100
   KANDEMIR M, 2003, P 12 INT C COMP CONS
   LEE C, 1997, P INT S MICR
   LEUPERS R, 1998, P AS S PAC DES AUT C
   LEUPERS R, 1998, P INT SYST SYNTH S I
   LEUPERS R, 2003, P 12 INT C COMP CONS
   Liao S, 1996, ACM T PROGR LANG SYS, V18, P235, DOI 10.1145/229542.229543
   LIAO S, 1995, P ACM SIGPLAN C PROG, P186
   *MOT INC, MOT DSP56300 FAM OPT
   *MOT INC, 2000, MOT DSP56300 FAM MAN
   *MOT INC, 2001, SC140 DSP COR REF MA
   Muchnick S., 1997, ADV COMPILER DESIGN
   OTTONI D, 2003, P INT WORKSH SOFTW C
   Ottoni D., 2006, ACM Transactions on Embedded Computing Systems (TECS), V5, P864
   OTTONI G, 2001, P INT C COMP CONSTR
   RAO A, 1998, THESIS U CINCINNATI
   RAO A, 1999, P ACM SIGPLAN C PROG, P128
   STALLMAN R, 2002, USERS MANUAL
   STALLMAN R, 2002, REFERENCE MANUAL
   Sudarsanam A, 1997, DES AUT CON, P287, DOI 10.1145/266021.266103
   SUDARSANAM A, 1997, P INT C AC SPEECH SI
   UDAYANARAYANAN S, 2001, P 38 DES AUT C DAC
   ZHANG Y, 2003, P INT C PAR PROC ICP
   ZHUANG X, 2003, P C LANG COMP TOOLS
   [No title captured]
NR 33
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2010
VL 32
IS 4
AR 11
DI 10.1145/1734206.1734208
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 588GV
UT WOS:000277057700002
OA hybrid
DA 2024-07-18
ER

PT J
AU Kalvala, S
   Warburton, R
   Lacey, D
AF Kalvala, Sara
   Warburton, Richard
   Lacey, David
TI Program Transformations Using Temporal Logic Side Conditions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Verification; Optimizing compilers; program
   transformation; rewriting; temporal logic
AB This article describes an approach to program optimization based on transformations, where temporal logic is used to specify side conditions, and strategies are created which expand the repertoire of transformations and provide a suitable level of abstraction. We demonstrate the power of this approach by developing a set of optimizations using our transformation language and showing how the transformations can be converted into a form which makes it easier to apply them, while maintaining trust in the resulting optimizing steps. The approach is illustrated through a transformational case study where we apply several optimizations to a small program.
C1 [Kalvala, Sara; Warburton, Richard] Univ Warwick, Dept Comp Sci, Coventry CV4 7AL, W Midlands, England.
   [Lacey, David] XMOS Semicond, Bristol BS1 4PB, Avon, England.
C3 University of Warwick
RP Kalvala, S (corresponding author), Univ Warwick, Dept Comp Sci, Coventry CV4 7AL, W Midlands, England.
EM sara.kalvala@warwick.ac.uk
FU EPSRC [EP/DO32466/1]; EPSRC [EP/D032466/1] Funding Source: UKRI
FX This work has been funded by the EPSRC under grant EP/DO32466/1
CR AKERS SB, 1978, IEEE T COMPUT, V27, P509, DOI 10.1109/TC.1978.1675141
   [Anonymous], PLDI 03
   [Anonymous], 2007, COMPILERS PRINCIPLES
   [Anonymous], 1998, Modern Compiler Implementation in C
   [Anonymous], PLDI 92
   ASSMANN U, 1999, GRAPH GRAMMAR HDB, V2
   ASSMANN U, 1996, LECT NOTES COMPUTER, V1060
   BOYLE JM, 1989, SOFTWARE REUSABILITY, V1, P361
   BOYLE JM, 1970, ANL7690
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   CLEAVELAND R, 1992, LECT NOTES COMPUT SC, V575, P48
   CORDY JR, 1995, TXL PROGRAMMING LANG
   Dawson S, 1996, ACM SIGPLAN NOTICES, V31, P117, DOI 10.1145/249069.231399
   de Moor O, 2001, THEOR COMPUT SCI, V269, P135, DOI 10.1016/S0304-3975(00)00402-3
   DEMOOR O, 2003, INCREMENTAL PROGRAM
   Faith RE, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P243
   FRASER CW, 1991, CSTR30391
   HECKMANN R, 1988, LECT NOTES COMPUT SC, V300, P175
   JONES SP, 2001, P 2001 ACM SIGPLAN H, P203
   KANADE A, 2007, P 5 INT WORKSH COMP
   Kanade A, 2006, I C SOFTW ENG FORM M, P108
   KNOOP J, 1998, LECT NOTES COMPUTER, V1428
   LACEY D, 2001, LECT NOTES COMPUTER, V2027, P52
   LACEY D, 2003, THESIS OXFORD U COMP
   LACEY D, 2004, HIGHER ORDER SYMBOL, V17, P2
   LANDI W, 1991, ACM S PRINC PROGR LA, P93
   LERNER S, 2002, 29 ACM SIGPLAN SIGAC
   LERNER S, 2003, P ACM SIGPLAN 2003 C, P220
   LERNER S, 2005, P 32 ACM SIGPLAN SIG, P364
   Lipps P., 1989, Compiler Compilers and High Speed Compilation. 2nd CCHSC Workshop Proceedings, P52
   McMillan K. L., 1993, Symbolic model checking
   Muchnick S., 1997, ADV COMPILER DESIGN
   MULLEROLM M, 2001, LNCS, V2028
   PADUA DA, 1986, COMMUN ACM, V29, P1184, DOI 10.1145/7902.7904
   POLLOCK LL, 1989, IEEE T SOFTWARE ENG, V15, P1537, DOI 10.1109/32.58766
   Sokolsky O. V., 1994, Computer Aided Verification. 6th International Conference, CAV '94. Proceedings, P351
   STEFFEN B, 1993, SCI COMPUT PROGRAM, V21, P115, DOI 10.1016/0167-6423(93)90003-8
   STEFFEN B, 1991, LECT NOTES COMPUT SC, V526, P346
   STEFFEN B, 1995, LNCS, V962
   Tarjan R., 1973, P 5 ANN ACM S THEOR, P96
   TJIANG SWK, 1992, SIGPLAN NOTICES, V27, P82, DOI 10.1145/143103.143120
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   VANENGELEN R, 1998, THESIS LEIDEN U
   VANENGELEN RA, 2001, LECT NOTES COMPUTER, V2027
   Visser Eelco, 1998, ICFP 98, P13
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   WHITFIELD D, 1991, THESIS U PITTSBURGH
   Whitfield DL, 1997, ACM T PROGR LANG SYS, V19, P1053, DOI 10.1145/267959.267960
   ZHAO W, 2002, P ACM SIGPLAN JOINT
   [No title captured]
   [No title captured]
   [No title captured]
NR 54
TC 10
Z9 15
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2009
VL 31
IS 4
AR 14
DI 10.1145/1516507.1516509
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 453SZ
UT WOS:000266633900002
OA Green Submitted, Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Lee, CS
AF Lee, Chin Soon
TI Ranking Functions for Size-Change Termination
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; omega-Automaton; determinization; multiple recursion; ranking
   function; size-change termination; termination analysis
AB This article explains how to construct a ranking function for any program that is proved terminating by size-change analysis.
   The "principle of size-change termination" for a first-order functional language with well-ordered data is intuitive: A program terminates on all inputs, if every infinite call sequence (following program control flow) would imply an infinite descent in some data values. Size-change analysis is based on information associated with the subject program's call-sites. This information indicates, for each call-site, strict or weak data decreases observed as a computation traverses the call-site. The set DESC of call-site sequences for which the size-changes imply infinite descent is omega-regular, as is the set FLOW of infinite call-site sequences following the program flowchart. If FLOW subset of DESC (a decidable problem), every infinite call sequence would imply infinite descent in a well-ordering-an impossibility-so the program must terminate.
   This analysis accounts for termination arguments applicable to different call-site sequences, without indicating a ranking function for the program's termination. In this article, it is explained how one can be constructed whenever size-change analysis succeeds. The constructed function has an unexpectedly simple form; it is expressed using only min, max, and lexicographic tuples of parameters and constants. In principle, such functions can be tested to determine whether size-change analysis will be successful. As a corollary, if a program verified as terminating performs only multiply recursive operations, the function that it computes is multiply recursive.
   The ranking function construction is connected with the determinization of the Buchi automaton for DESC. While the result is not practical, it is of value in addressing the scope of size-change reasoning. This reasoning has been applied broadly, in the analysis of functional and logic programs, as well as term rewrite systems.
C1 Max Planck Inst Informat, Saarbrucken, Germany.
C3 Max Planck Society
RP Lee, CS (corresponding author), Max Planck Inst Informat, Saarbrucken, Germany.
EM cslee@asteria.com.sg
CR ALTHOFF CS, 2005, P 10 INT C IMPL APPL
   Anderson H, 2003, LECT NOTES COMPUT SC, V2895, P122
   [Anonymous], 1988, PROC 29 IEEE S FOUND, DOI DOI 10.1109/SFCS.1988.21948
   AVERY J, 2005, SIZE CHANGE TERMINAT
   Ben-Amram AA, 2002, LECT NOTES COMPUT SC, V2566, P3
   Ben-Amram AM, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180480
   CODISH M, 2005, P 21 INT C LOG PROGR
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   DERSHOWITZ N, 1979, COMMUN ACM, V22, P465, DOI 10.1145/359138.359142
   FREDERIKSEN CC, 2001, D442 DIKU
   FREDERIKSEN CC, 2002, D470 DIKU
   GLENSTRUP A, 2004, D498 DIKU
   Jones ND, 2004, LECT NOTES COMPUT SC, V3091, P1
   LEE CS, 2001, P 28 ACM S PRINC PRO
   MANOLIOS P, 2006, P 18 INT C COMP AID, P401
   MULLER DE, 1995, THEOR COMPUT SCI, V141, P69, DOI 10.1016/0304-3975(94)00214-4
   Thiemann R, 2003, LECT NOTES COMPUT SC, V2706, P264
   Vardi MY, 1995, LECT NOTES COMPUTER, P238, DOI DOI 10.1007/3-540-60915-6
   WAHLSTEDT D, 2000, THESIS GOTEBORGS U S
NR 19
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2009
VL 31
IS 3
AR 10
DI 10.1145/1498926.1498928
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 453SY
UT WOS:000266633700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Lee, HB
   Diwan, A
   Moss, JEB
AF Lee, Han B.
   Diwan, Amer
   Moss, J. Eliot B.
TI Design, implementation, and evaluation of a compilation server
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; experimentation; performance; measurement; languages;
   compilation server; Java virtual machine
AB Modern JVM implementations interleave execution with compilation of '' hot '' methods to achieve reasonable performance. Since compilation overhead impacts the execution time of the application and induces run-time pauses, we explore offloading compilation onto a compilation server. In this article, we present the design, implementation, and evaluation of a compilation server that compiles and optimizes Java bytecodes on behalf of its clients. We show that the compilation server provides the following-benefits for our benchmark programs: (i) lower execution time by reducing the compilation overhead and by enabling more aggressive optimizations; (ii) lower memory allocation by eliminating allocations due to optimizing compilation and the footprint of the optimizing compiler; (iii) lower execution time of the application due to sharing of profile information across different runs of the same application and runs of different applications. We implemented the compilation server in Jikes RVM, and our results indicate that it can reduce running time by an average of 20.5%, interruptions due to compilation by an average of 81.0%, and dynamic memory allocation by 8.6% for our benchmark programs. Simulation results indicate that our current implementation of the compilation server can handle more than 50 concurrent clients while still allowing them to outperform the best performing adaptive configuration.
C1 Univ Colorado, Boulder, CO 80309 USA.
   Univ Massachusetts, Amherst, MA 01003 USA.
C3 University of Colorado System; University of Colorado Boulder;
   University of Massachusetts System; University of Massachusetts Amherst
RP Lee, HB (corresponding author), Univ Colorado, Boulder, CO 80309 USA.
EM diwan@cs.colorado.edu
CR [Anonymous], 2001, P 8 ACM SIGPLAN S PR
   [Anonymous], 2000, WORKSH COMP OP SYST
   Arnold M, 2002, ACM SIGPLAN NOTICES, V37, P111, DOI 10.1145/583854.582432
   ARNOLD M, 2001, P ACM SIGPLAN 2001 C, P168, DOI DOI 10.1145/378795.378832
   Arnold Matthew., 2000, P 15 ACM SIGPLAN C O, P47
   AUSLANDER J, 1996, P ACM SIGPLAN 96 C P, P149
   BURKE MG, 1999, ACM 1999 JAV GRAND C, P129
   CHAMBERS C, 1991, SIGPLAN NOTICES, V26, P1, DOI 10.1145/118014.117955
   CHENG P, 2001, P ACM SIGPLAN C PROG, P125, DOI DOI 10.1145/378795.378823
   Cierniak Michal., 2000, PROCEEEDINGS ACM SIG, P13
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Delsart B, 2002, LECT NOTES COMPUT SC, V2491, P197
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   ELLIS S, 2003, NC NETWORK COMPILATI
   Fink SJ, 2003, INT SYM CODE GENER, P241, DOI 10.1109/CGO.2003.1191549
   Flinn J, 2001, EIGHTH WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS, PROCEEDINGS, P61, DOI 10.1109/HOTOS.2001.990062
   Gosling J., 2000, The Java Language Specification
   Hauswirth M., 2004, OOPSLA 04 P 19 ANN A, P251
   Holzle U, 1996, ACM T PROGR LANG SYS, V18, P355, DOI 10.1145/233561.233562
   HOLZLE U, 1994, P 9 ANN C OBJ OR PRO, P229
   KISTLER T, 1998, WORKSH PROF FEEDB DI
   KREMER U, 2001, DCSTR446 RUT U
   KREMER U, 2001, DCSTR446 RUTG U
   Krintz C, 2003, INT SYM CODE GENER, P69, DOI 10.1109/CGO.2003.1191534
   KUZNETSOV A, 1998, IPROUTE2 UTILITY SUI
   Lee H, 2006, SOFTWARE PRACT EXPER, V36, P835, DOI [10.1002/spe.718, 10.1002/spc.718]
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   Newsome M, 2002, ACM SIGPLAN NOTICES, V37, P204, DOI 10.1145/566225.513863
   PALECZNY M, 2001, JAV VIRT MACH RES TE
   PALM J, 2002, P JOINT C LANG COMP, P194
   Plezbert M. P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P120, DOI 10.1145/263699.263713
   Pool M., 2003, distcc, a fast free distributed compiler
   RADHAKRISHNAN R, 2000, P 6 INT S HIGH PERF, P387
   Savari S.A., 2000, J INSTRUCTION LEVEL, V2
   SIRER EG, 1999, 17 ACM S OP SYST PRI, P202
   *SPEC, 2000, SPECJBB2000 BENCHM
   *SPEC, 1998, SPECJVM98 BENCHM
   SUGANUMA T, 2001, P ACM SIGPLAN C OBJ, P180
   Teodorescu R., 2001, Proceedings of the 2001 Conference on Ubiquitous Computing, P76
NR 39
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 4
AR 18
DI 10.1145/1255450.1255451
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 202OS
UT WOS:000248913500001
DA 2024-07-18
ER

PT J
AU Payet, E
   Mesnard, F
AF Payet, E
   Mesnard, F
TI Nontermination inference of logic programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; verification; logic programming; static analysis;
   nontermination analysis; optimal termination condition
ID TERMINATION CONDITIONS; LOOP CHECKING; CLAUSES; PROLOG
AB We present a static analysis technique for nontermination inference of logic programs. Our framework relies on an extension of the subsumption test, where some specific argument positions can be instantiated while others are generalized. We give syntactic criteria to statically identify such argument positions from the text of a program. Atomic left looping queries are generated bottom-up from selected subsets of the binary unfoldings of the program of interest. We propose a set of correct algorithms for automating the approach. Then, nontermination inference is tailored to attempt proofs of optimality of left termination conditions computed by a termination inference tool. An experimental evaluation is reported and the analyzers can be tried online at http://www.univ-reunion.fr/(similar to)gcc. When termination and nontermination analysis produce complementary results for a logic procedure, then with respect to the leftmost selection rule and the language used to describe sets of atomic queries, each analysis is optimal and together, they induce a characterization of the operational behavior of the logic procedure.
C1 Univ Reunion, IREMIA, F-97715 St Denis 9, France.
C3 University of La Reunion
RP Univ Reunion, IREMIA, 15 Ave Rene Cassin,BP 7151, F-97715 St Denis 9, France.
EM epayet@univ-reunion.fr; fred@univ-reunion.fr
OI Payet, Etienne/0000-0002-3519-025X
CR [Anonymous], P 14 ANN ACM S PRINC
   [Anonymous], ADV LOGIC PROGRAMMIN
   Apt K. R., 1997, From Logic Programming to Prolog
   ARTS T, 1996, LECT NOTES COMPUTER, V1048
   BOL R, 1993, J LOGIC PROGRAM, V16, P25, DOI 10.1016/0743-1066(93)90022-9
   BOL RN, 1991, THEOR COMPUT SCI, V86, P35, DOI 10.1016/0304-3975(91)90004-L
   CLARK KL, 1979, 7959 IMP COLL LOG PR
   Codish M, 1999, J LOGIC PROGRAM, V41, P103, DOI 10.1016/S0743-1066(99)00006-0
   De Schreye D, 1994, J LOGIC PROGRAM, V20, P199, DOI 10.1016/0743-1066(94)90027-2
   DERANSART P, 1987, 873 U ORL LAB INF DE
   Dershowitz N, 2001, APPL ALGEBR ENG COMM, V12, P117, DOI 10.1007/s002000100065
   DESCHREYE D, 1989, ARTIF INTELL, V41, P237, DOI 10.1016/0004-3702(89)90012-X
   DESCHREYE D, 1990, P ICLP 90, P649
   DEVIENNE P, 1990, THEOR COMPUT SCI, V75, P157, DOI 10.1016/0304-3975(90)90066-Q
   DEVIENNE P, 1993, LECT NOTES COMPUTER, V665, P48
   DEVIENNE P, 1988, P FGCS 88 TOK, P397
   FALASCHI M, 1993, INFORM COMPUT, V102, P86
   Gabbrielli M., 1994, Proceedings of the 1994 ACM Symposium on Applied Computing (SAC'94), P394, DOI [10.1145/326619.326789, DOI 10.1145/326619.326789]
   GENAIM S, 2001, P LOG PROGR ART INT
   Gori R, 1997, J LOGIC COMPUT, V7, P753, DOI 10.1093/logcom/7.6.753
   LINDENSTRAUSS N, 1997, TERMILOG SYSTEM CHEC
   Lloyd J. W., 2012, Foundations of Logic Programming
   Mesnard F, 2002, LECT NOTES COMPUT SC, V2477, P509
   Mesnard F, 2001, LECT NOTES COMPUT SC, V2126, P93
   MESNARD F, 2004, IN PRESS THEORY PRAC
   MESNARD F, 2000, CTI TOOL INFERRING T
   MESNARD F, 1996, P 1996 JOINT INT C S, P7
   O'Keefe R.A., 1990, The Craft of Prolog
   PAYET E, 2004, LECT NOTES COMPUTER, V3148
   PLUMER L, 1990, LNAI, V446
   SAHLIN D, 1993, NEW GENERAT COMPUT, V12, P7, DOI 10.1007/BF03038271
   SAHLIN D, 1990, P N AM C LOG PROGR, P377
   SCHMIDTSCHAUSS M, 1988, THEOR COMPUT SCI, V59, P287, DOI 10.1016/0304-3975(88)90146-6
   Shen YD, 1997, NEW GENERAT COMPUT, V15, P187, DOI 10.1007/BF03037237
   Shen YD, 2001, THEOR COMPUT SCI, V266, P441, DOI 10.1016/S0304-3975(00)00197-3
   Shen Yi-Dong, 2003, ACM T COMPUT LOG, V4, P417
NR 36
TC 13
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2006
VL 28
IS 2
BP 256
EP 289
DI 10.1145/1119479.1119481
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 021SQ
UT WOS:000236006300002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ogasawara, T
   Komatsu, H
   Nakatani, T
AF Ogasawara, T
   Komatsu, H
   Nakatani, T
TI EDO: Exception-directed optimization in Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE performance; experimentation; languages; feedback-directed dynamic
   optimization; dynamic compilers; exception handling; inlining
ID INFERENCE
AB Optimizing exception handling is critical for programs that frequently throw exceptions. We observed that there are many such exception-intensive programs written in Java. There are two commonly used exception handling techniques, stack unwinding and stack cutting. Stack unwinding optimizes the normal path by leaving the exception handling path unoptimized, while stack cutting optimizes the exception handling path by adding extra work to the normal path. However, there has been no single exception handling technique to optimize the exception handling path without incurring any overhead to the normal path.
   We propose a new technique called Exception-Directed Optimization (EDO) that optimizes exception-intensive programs without slowing down exception-minimal programs. It is a feedback-directed dynamic optimization consisting of three steps: exception path profiling, exception path inlining, and throw elimination. Exception path profiling attempts to detect hot exception paths. Exception path inlining embeds every hot exception path into the corresponding catching method. Throw elimination replaces a throw with a branch to the corresponding handler. We implemented EDO in IBM's production Just-in-Time compiler and made several experiments. In summary, it improved the performance of exception-intensive programs by up to 18.3% without decreasing the performance of exception-minimal programs for SPECjvm98. We also found an opportunity for performance improvement using EDO in the startup of a Java application server.
C1 IBM Japan Ltd, Tokyo Res Lab, Kanagawa 2428502, Japan.
C3 International Business Machines (IBM)
RP Ogasawara, T (corresponding author), IBM Japan Ltd, Tokyo Res Lab, 1623-14 Shimotsuruma, Kanagawa 2428502, Japan.
EM TAKESHI@jp.ibm.com; komatsu@jp.ibm.com; nakatani@jp.ibm.com
CR *ACM, 2000, P ACM SIGPLAN 2000 C
   *ACM, 2000, P ACM 2000 C JAV GRA
   *ACM, 1995, P 10 ANN C OBJ OR PR
   *ACM, 2000, P 15 ACM SIGPLAN C O
   AGESEN O, 1995, TYPE FEEDBACK VS CON, P91
   AIGNER G, 1996, LECT NOTES COMPUTER, V1098, P142
   AIKEN A, 1994, FL PROJECT DESIGN FU
   ALLEN R, 1988, P ACM SIGPLAN 1988 C, P241
   ARNOLD M, 2000, P ACM SIGPLAN WORKSH, P52
   ARNOLD MATTHEW., 2000, ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages, and Applications, P47
   AYERS A, 1997, P ACM SIGPLAN 97 C P, P134
   BAKER TP, 1986, IEEE SOFTWARE, V3, P42, DOI 10.1109/MS.1986.234397
   BALL JE, 1979, P 1979 SIGPLAN S COM, P214
   CALDER B, 1994, P 21 ACM SIGPLAN SIG, P397
   CAMERON D, 1992, P USENIX C PLUS PLUS, P225
   CARDELLI L, 1989, 52 SRC DEC SYST RES
   CARINI PR, 1995, RC20267 IBM
   CHANG PP, 1992, SOFTWARE PRACT EXPER, V22, P349, DOI 10.1002/spe.4380220502
   Chatterjee R, 1998, LECT NOTES COMPUT SC, V1381, P57, DOI 10.1007/BFb0053563
   CHEN WY, 1993, IEEE T COMPUT, V42, P1045, DOI 10.1109/12.241594
   CHOI JD, 1999, P ACM SIGPLAN SIGSOF, P21
   CIERNIAK M, 2000, PRACTICING JUDO JAVA, P18
   de Dinechin C, 2000, IEEE CONCURR, V8, P72, DOI 10.1109/4434.895109
   Dean J., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P273, DOI 10.1145/182409.182489
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Dean J, 1996, ACM SIGPLAN NOTICES, V31, P83, DOI 10.1145/236338.236344
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   DREW S, 1995, 9512 QUEENSL U TECHN
   Fitzgerald R, 2000, SOFTWARE PRACT EXPER, V30, P199, DOI 10.1002/(SICI)1097-024X(200003)30:3<199::AID-SPE296>3.0.CO;2-2
   FRISCH A, 2001, OBJECTIVE CAML SYSTE
   Gagnon EM, 2000, LECT NOTES COMPUT SC, V1824, P199
   GEHANI NH, 1992, SOFTWARE PRACT EXPER, V22, P827, DOI 10.1002/spe.4380221003
   GOSLING J, 1996, JAVA LANGUAGE SPECIF, P201
   GOSLING J, 1996, JAVA SERIES
   GOVINDARAJAN R, 1993, IEEE T SOFTWARE ENG, V19, P826, DOI 10.1109/32.238585
   GROVE D, 1995, SIGPLAN NOTICES, V30, P108, DOI 10.1145/217839.217848
   Gunter Carl A., 1995, Proceedings of the Seventh International Conference on Functional Programming Languages and Computer Architecture. FPCA '95, P12, DOI DOI 10.1145/224164.224173
   Gupta M, 2000, LECT NOTES COMPUT SC, V1850, P422
   Hank R. E., 1995, Proceedings of the 28th Annual International Symposium on Microarchitecture (Cat. No.95TB100012), P158, DOI 10.1109/MICRO.1995.476823
   HARPER RW, 1986, ECSLFCS8614 ED U DEP
   HARRISON W, 1977, P 4 ACM SIGACT SIGPL, P29
   HENNESSY J, 1981, 8 ANN ACM S PRINC PR, P200
   HOLZLE U, 1991, LECT NOTES COMPUT SC, V512, P21
   HOLZLE U, 1992, P ACM SIGPLAN C PROG, P32, DOI DOI 10.1145/143095.143114
   HWU WW, 1989, P ACM SIGPLAN 1989 C, P246
   *IBM, 1995, IBM VIS AG CPLUSPLUS
   *IBM, 2001, IBM DEV KIT JAV 2 TE
   *IBM, 2004, IBM WEBSPHER APPL SE
   *INT CORP, 2001, IA 32 INT ARCH SOFTW, V1
   Ishizaki K, 2000, CONCURRENCY-PRACT EX, V12, P457, DOI 10.1002/1096-9128(200005)12:6<457::AID-CPE485>3.0.CO;2-0
   ISHIZAKI K, 2000, STUDY DEVIRTUALIZATI, P294
   Jones Simon Peyton, 2003, Journal of Functional Programming, V13, P1
   Jones SP, 1999, ACM SIGPLAN NOTICES, V34, P25, DOI 10.1145/301631.301637
   KAWAHITO M, 2000, P 9 INT C ARCH SUPP, P118
   Koenig A., 1990, P USENIX C PLUS PLUS, P149
   Krall A, 1998, CONCURRENCY-PRACT EX, V10, P837, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<837::AID-CPE384>3.0.CO;2-7
   Lang J, 1998, ACM T PROGR LANG SYS, V20, P274, DOI 10.1145/276393.276395
   LEE S, 2000, JPL OPTICAL COMMUNIC, V2000, P1
   LEE S, 1999, P 1999 WORKSH BIN TR
   LINDHOLM T, 1996, JAVA SERIES, P110
   LISKOV BH, 1979, IEEE T SOFTWARE ENG, V5, P546, DOI 10.1109/TSE.1979.230191
   MAASSEN J, 1999, P 7 ACM SIGPLAN S PR, P173, DOI DOI 10.1145/301104.301120
   MACLAREN MD, 1984, P 1984 SIGPLAN S COM, P266
   *MICR, 2001, MSDN ONL
   *MICR, 2004, VIS C CPLUSPLUS
   *MICR, 2004, PROGR NET FRAM
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   RAMSEY N, 2000, SINGLE INTERMEDIATE, P285
   RYDER BG, 1999, DCSTR406 RUTG U DEP
   SCHEIFLER RW, 1977, COMMUN ACM, V20, P647, DOI 10.1145/359810.359830
   Schilling JL, 1998, ACM SIGPLAN NOTICES, V33, P40, DOI 10.1145/286385.286390
   Sinha S, 2000, IEEE T SOFTWARE ENG, V26, P849, DOI 10.1109/32.877846
   *SPEC, 1998, JVM CLIENT98 SPECYVM
   Stallman  R., 2004, USING GNU COMPILER C
   Suganuma T, 2000, IBM SYST J, V39, P175, DOI 10.1147/sj.391.0175
   SUGANUMA T, 2003, P ACM SIGPLAN 2003 C, P312
   SUGANUMA T, 2001, P ACM SIGPLAN C OBJ, P180
   *SUN, 2000, JAV HOTSP TECHN
   TROMEY T, 2002, GNU GCJ
   VELDEMA R, 1998, THESIS VRIJE U AMSTE
   Whaley John., 2000, JAVA 00, P78
   [No title captured]
NR 82
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2006
VL 28
IS 1
BP 70
EP 105
DI 10.1145/1111596.1111598
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 011SV
UT WOS:000235289300002
DA 2024-07-18
ER

PT J
AU Melicher, D
   Xu, AL
   Zhao, V
   Potanin, A
   Aldrich, J
AF Melicher, Darya
   Xu, Anlun
   Zhao, Valerie
   Potanin, Alex
   Aldrich, Jonathan
TI Bounded Abstract Effects
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Effects; effect system; expressiveness; abstraction; language-based
   security
AB Effect systems have been a subject of active research for nearly four decades, with the most notable practical example being checked exceptions in programming languages such as Java. While many exception systems support abstraction, aggregation, and hierarchy (e.g., via class declaration and subclassing mechanisms), it is rare to see such expressive power in more generic effect systems. We designed an effect system around the idea of protecting system resources and incorporated our effect system into the Wyvern programming language. Similar to type members, a Wyvern object can have effect members that can abstract lower-level effects, allow for aggregation, and have both lower and upper bounds, providing for a granular effect hierarchy. We argue that Wyvern's effects capture the right balance of expressiveness and power from the programming language design perspective. We present a full formalization of our effect-system design, showing that it allows reasoning about authority and attenuation. Our approach is evaluated through a security-related case study.
C1 [Melicher, Darya; Xu, Anlun; Aldrich, Jonathan] Carnegie Mellon Univ, Sch Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Zhao, Valerie] Univ Chicago, 5801 S Ellis Ave, Chicago, IL 60637 USA.
   [Potanin, Alex] Victoria Univ Wellington, Sch Engn & Comp Sci, POB 600, Wellington 6144, New Zealand.
C3 Carnegie Mellon University; University of Chicago; Victoria University
   Wellington
RP Melicher, D (corresponding author), Carnegie Mellon Univ, Sch Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM darya@cs.cmu.edu; anlunx@andrew.cmu.edu; vzhao@uchicago.edu;
   alex@ecs.vuw.ac.nz; jonathan.aldrich@cs.cmu.edu
OI Potanin, Alex/0000-0002-4242-2725; Melicher, Darya/0000-0003-3166-4777;
   Aldrich, Jonathan/0000-0003-0631-5591
CR Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Azouri Dor, 2018, ABUSING TEXT EDITORS
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Bocchino R.L., 2009, Proceedings of the 24th ACM SIGPLAN conference on Object oriented programming systems languages and applications, OOPSLA '09, P97, DOI [10.1145/1640089.1640097, DOI 10.1145/1640089.1640097]
   Bracevac O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236762
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Craig A, 2018, LECT NOTES COMPUT SC, V11232, P231, DOI 10.1007/978-3-030-02450-5_14
   DENNING PJ, 1976, COMPUT SURV, V8, P359, DOI 10.1145/356678.356680
   Dolan S, 2018, LECT NOTES COMPUT SC, V10788, P98, DOI 10.1007/978-3-319-89719-6_6
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Drossopoulou Sophia, 2016, P 18 WORKSHOP FORMAL, P1, DOI [10.1145/2955811.2955821, DOI 10.1145/2955811.2955821]
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Filinski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P483, DOI 10.1145/1706299.1706354
   Fish JA, 2020, PROCEEDINGS OF THE 2020 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD! '20), P34, DOI 10.1145/3426428.3426913
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Gordon CS, 2013, LECT NOTES COMPUT SC, V7920, P179, DOI 10.1007/978-3-642-39038-8_8
   Greenhouse A, 1999, LECT NOTES COMPUT SC, V1628, P205
   Inostroza P, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P111, DOI 10.1145/3276954.3276955
   Kiniry Joseph R, ADV TOPICS EXCEPTION
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leino KRM, 2002, ACM SIGPLAN NOTICES, V37, P246, DOI 10.1145/543552.512559
   Loh Shu-Peng, 2017, SPECIFYING ATTENUATI
   Long Y., 2015, 29th European Conference on Object-Oriented Programming, ECOOP 2015, July 5-10, 2015, Prague, Czech Republic, P346, DOI DOI 10.4230/LIPICS.ECOOP.2015.346
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Lucassen John M, 1987, THESIS MASSACHUSETTS
   Maffeis S, 2010, P IEEE S SECUR PRIV, P125, DOI 10.1109/SP.2010.16
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Melicher D., 2017, 31 EUR C OBJ OR PROG
   Melicher Darya, 2020, THESIS C MELLON U
   Mettler, 2010, NETWORK DISTRIBUTED
   Miller M. S., 2006, Ph.D. Dissertation
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Murray Toby, 2008, JOINT WORKSH FDN COM
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   PARNAS DL, 1971, IFIP C, V71, P339
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Rapoport M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360571
   Rytz L, 2012, LECT NOTES COMPUT SC, V7313, P258, DOI 10.1007/978-3-642-31057-7_13
   Trifonov V, 1999, LECT NOTES COMPUT SC, V1576, P128
   Turbak F, 2008, DESIGN CONCEPTS IN PROGRAMMING LANGUAGES, P1
   van Dooren M, 2005, ACM SIGPLAN NOTICES, V40, P455, DOI 10.1145/1103845.1094847
   Xu Anlun, 2020, THESIS C MELLON U
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 48
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2022
VL 44
IS 1
AR 5
DI 10.1145/3492427
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YP1LJ
UT WOS:000748389400005
OA Bronze
DA 2024-07-18
ER

PT J
AU Sanan, D
   Zhao, YW
   Lin, SW
   Yang, L
AF Sanan, David
   Zhao, Yongwang
   Lin, Shang-Wei
   Yang, Liu
TI CSim<SUP>2</SUP> : Compositional Top-down Verification of Concurrent
   Systems using Rely-Guarantee
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Rely-guarantee; compositional verification; concurrency verification;
   simulation and refinement; isabelle/HOL; operating systems verification
ID PROOF
AB To make feasible and scalable the verification of large and complex concurrent systems, it is necessary the use of compositional techniques even at the highest abstraction layers. When focusing on the lowest software abstraction layers, such as the implementation or the machine code, the high level of detail of those layers makes the direct verification of properties very difficult and expensive. It is therefore essential to use techniques allowing to simplify the verification on these layers. One technique to tackle this challenge is top-down verification where by means of simulation properties verified on top layers (representing abstract specifications of a system) are propagated down to the lowest layers (that are an implementation of the top layers). There is no need to say that simulation of concurrent systems implies a greater level of complexity, and having compositional techniques to check simulation between layers is also desirable when seeking for both feasibility and scalability of the refinement verification. In this article, we present CSim(2) a (compositional) rely-guarantee-based framework for the top-down verification of complex concurrent systems in the Isabelle/HOL theorem prover. CSim(2) uses CSimpl, a language with a high degree of expressiveness designed for the specification of concurrent programs. Thanks to its expressibility, CSimpl is able to model many of the features found in real world programming languages like exceptions, assertions, and procedures. CSim(2) provides a framework for the verification of rely-guarantee properties to compositionally reason on CSimpl specifications. Focusing on top-down verification, CSim(2) provides a simulation-based framework for the preservation of CSimpl rely-guarantee properties from specifications to implementations. By using the simulation framework, properties proven on the top layers (abstract specifications) are compositionally propagated down to the lowest layers (source or machine code) in each concurrent component of the system. Finally, we show the usability of CSim(2) by running a case study over two CSimpl specifications of an Arinc-653 communication service. In this case study, we prove a complex property on a specification, and we use CSim(2) to preserve the property on lower abstraction layers.
C1 [Sanan, David; Lin, Shang-Wei; Yang, Liu] Nanyang Technol Univ, Sch Comp Sci & Engn, 50 Nanyang Ave, Singapore 639798, Singapore.
   [Zhao, Yongwang] Zhejiang Univ, Sch Cyber Sci & Technol, Coll Comp Sci & Technol, Zheda Rd 38, Hangzhou 310007, Peoples R China.
C3 Nanyang Technological University; Zhejiang University
RP Zhao, YW (corresponding author), Zhejiang Univ, Sch Cyber Sci & Technol, Coll Comp Sci & Technol, Zheda Rd 38, Hangzhou 310007, Peoples R China.
EM sanan@ntu.edu.sg; zhaoyw@zju.edu.cn; shang-wei.lin@ntu.edu.sg;
   yangliu@ntu.edu.sg
RI LIU, YANG/HWQ-4615-2023; liu, yang/HHY-8583-2022; yang,
   liu/GVU-8760-2022; liu, yang/HQY-7531-2023; Liu, Yang/D-2306-2013; liu,
   yang/HIU-0559-2022; Liu, Yang/HNJ-6693-2023; yang, liu/HTN-9175-2023;
   Sanan, David/AAA-8320-2020
OI Liu, Yang/0000-0001-7300-9215; Sanan, David/0000-0003-2755-3089
FU National Satellite of Excellence in Trustworthy Software Systems
   [NRF2018NCR-NSOE003]; NRF Investigatorship Award - NRF Singapore under
   National Cyber-security R&D (NCR) programme [NRFI06-2020-0022]; Ministry
   of Education, Singapore [MOE2018-T2-1-068]; National Natural Science
   Foundation of China (NSFC) [61872016]
FX This work has been partially supported by the National Satellite of
   Excellence in Trustworthy Software Systems (Award No.
   NRF2018NCR-NSOE003), and NRF Investigatorship Award No.
   NRFI06-2020-0022, funded by NRF Singapore under National Cyber-security
   R&D (NCR) programme. This work has been partially supported by the
   Ministry of Education, Singapore, under its Academic Tier-2 Research
   Fund (Grant No. MOE2018-T2-1-068). This work has been partially
   supported by the National Natural Science Foundation of China (NSFC)
   under Grant No. 61872016.
CR Aeronautical Radio Inc., 2015, ARINC SPEC 653 AV AP
   Alkassar E, 2008, LECT NOTES COMPUT SC, V5295, P209, DOI 10.1007/978-3-540-87873-5_18
   [Anonymous], 2014, ACM SIGBED Review
   Armstrong A, 2014, LECT NOTES COMPUT SC, V8442, P78, DOI 10.1007/978-3-319-06410-9_6
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Brookes S., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P98, DOI 10.1109/LICS.1993.287596
   Burckhardt S, 2010, LECT NOTES COMPUT SC, V6011, P104, DOI 10.1007/978-3-642-11970-5_7
   Coleman JW, 2007, J LOGIC COMPUT, V17, P807, DOI 10.1093/logcom/exm030
   Dam M., 2013, 2013 ACM SIGSAC C CO, P223
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Hayes IJ, 2016, LECT NOTES COMPUT SC, V9995, P352, DOI 10.1007/978-3-319-48989-6_22
   Hayes IJ, 2016, FORM ASP COMPUT, V28, P1057, DOI 10.1007/s00165-016-0384-0
   Jones CB, 2010, REFLECTIONS ON THE WORK OF C A R HOARE, P167, DOI 10.1007/978-1-84882-912-1_8
   Jones C. B., 1981, THESIS OXFORD U
   Klein G, 2010, DESIGN AND VERIFICATION OF MICROPROCESSOR SYSTEMS FOR HIGH-ASSURANCE APPLICATIONS, P323, DOI 10.1007/978-1-4419-1539-9_11
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kundu S, 2007, IEEE IC CAD, P318
   Liang HJ, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2576235
   Lochbihler A, 2010, LECT NOTES COMPUT SC, V6012, P427, DOI 10.1007/978-3-642-11957-6_23
   Myreen Magnus O., 2008, P INT C FORM METH CO
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Nieto LP, 2003, LECT NOTES COMPUT SC, V2618, P348
   Nipkow T, 1999, LECT NOTES COMPUT SC, V1577, P188
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Qiwen Xu, 1997, Formal Aspects of Computing, V9, P149, DOI 10.1007/BF01211617
   Sanán D, 2017, LECT NOTES COMPUT SC, V10205, P481, DOI 10.1007/978-3-662-54577-5_28
   Schirmer N., 2006, THESIS TU MUNCHEN
   Tiu Alwen, 2018, P 22 INT S FORM METH
   Tuch Harvey, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P97, DOI 10.1145/1190216.1190234
   Yongwang Zhao, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P161, DOI 10.1007/978-3-030-30942-8_11
   Zhao YW, 2019, LECT NOTES COMPUT SC, V11562, P515, DOI 10.1007/978-3-030-25543-5_29
   Zhao YW, 2016, IEEE T IND INFORM, V12, P1321, DOI 10.1109/TII.2016.2569414
NR 34
TC 4
Z9 4
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2021
VL 43
IS 1
AR 2
DI 10.1145/3436808
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RW3AR
UT WOS:000646399300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Shen, JS
   Rinard, MC
AF Shen, Jiasi
   Rinard, Martin C.
TI Active Learning for Inference and Regeneration of Applications that
   Access Databases
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Active learning; program inference; program regeneration
ID PROGRAM SYNTHESIS; TRANSFORMATIONS; QUERIES
AB We present KONURE, a new system that uses active learning to infer models of applications that retrieve data from relational databases. KONURE comprises a domain-specific language (each model is a program in this language) and associated inference algorithm that infers models of applications whose behavior can be expressed in this language. The inference algorithm generates inputs and database contents, runs the application, then observes the resulting database traffic and outputs to progressively refine its current model hypothesis. Because the technique works with only externally observable inputs, outputs, and database contents, it can infer the behavior of applications written in arbitrary languages using arbitrary coding styles (as long as the behavior of the application is expressible in the domain-specific language). KONURE also implements a regenerator that produces a translated Python implementation of the application that systematically includes relevant security and error checks.
C1 [Shen, Jiasi; Rinard, Martin C.] MIT EECS, 32 Vassar St, Cambridge, MA 02139 USA.
   [Shen, Jiasi; Rinard, Martin C.] CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
RP Shen, JS (corresponding author), MIT EECS, 32 Vassar St, Cambridge, MA 02139 USA.; Shen, JS (corresponding author), CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
EM jiasi@csail.mit.edu; rinard@csail.mit.edu
RI Shen, Jiasi/HKO-5262-2023
OI Shen, Jiasi/0000-0002-5904-3641
FU DARPA [FA8650-15-C-7564]; Boeing [Z0918-5060]
FX This research was supported by DARPA (FA8650-15-C-7564) and Boeing
   (#Z0918-5060).
CR Aarts F, 2013, IEEE ICST WORKSHOP, P461, DOI 10.1109/ICSTW.2013.60
   Aarts F, 2010, LECT NOTES COMPUT SC, V6269, P71, DOI 10.1007/978-3-642-15375-4_6
   Alalfi M. H., 2009, Proceedings of the 2009 11th IEEE International Symposium on Web Systems Evolution (WSE 2009), P141, DOI 10.1109/WSE.2009.5631226
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   ANGLUIN D, 1983, COMPUT SURV, V15, P237, DOI 10.1145/356914.356918
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   [Anonymous], 2018, GETTING STARTED RAIL
   [Anonymous], 2018, FULCRUM
   [Anonymous], 2018, ENKI
   [Anonymous], 2012, ACM QUEUE, DOI DOI 10.1145/2090147.2094081
   [Anonymous], 2000, DATABASE PROGRAMMING
   [Anonymous], 2006, P 13 ACM C COMPUTER
   [Anonymous], 2020, Software assurance reference dataset-nist
   [Anonymous], 2013, GENERATIVE TRANSFORM
   [Anonymous], 2005, INPROCEEDINGS 20 IEE
   [Anonymous], 2019, PLDI 2019 KONURE COD
   [Anonymous], 2018, 2018 IEEE INT WORKSH, DOI [DOI 10.1109/WIFS.2018.8630791, 10.1109/WIFS.2018.8630791]
   [Anonymous], 1956, AUTOMATA STUDIES
   [Anonymous], 2018, KANDAN MODERN OPEN S
   Bandhakavi S, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P12
   Barthe G, 2013, ACM SIGPLAN NOTICES, V48, P123, DOI 10.1145/2517327.2442529
   Bastani O, 2018, ACM SIGPLAN NOTICES, V53, P678, DOI [10.1145/3296979.3192383, 10.1145/3192366.3192383]
   Bastani O, 2017, ACM SIGPLAN NOTICES, V52, P95, DOI [10.1145/3062341.3062349, 10.1145/3140587.3062349]
   Beyene Tewodros A., 2015, P 7 INT C VER SOFTW, P19
   Bisht P, 2010, ACM T INFORM SYST SE, V13, DOI 10.1145/1698750.1698754
   Bowring J. F., 2004, Software Engineering Notes, V29, P195, DOI 10.1145/1013886.1007539
   Bradley A. R., 2007, The Calculus of Computation
   Cambronero JP, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!' 19), P62, DOI 10.1145/3359591.3359732
   Cassel S, 2016, FORM ASP COMPUT, V28, P233, DOI 10.1007/s00165-016-0355-5
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Chu Shumo, 2017, P 8 BIENN C INN DAT
   Cohen Y, 2003, ACM T SOFTW ENG METH, V12, P285, DOI 10.1145/958961.958962
   Cornelissen B, 2009, IEEE T SOFTWARE ENG, V35, P684, DOI 10.1109/TSE.2009.28
   Davis KH, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P70, DOI 10.1109/WCRE.2000.891454
   de Ruiter J, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P193
   Ellis K, 2016, Advances in Neural Information Processing Systems 29: Annual Conference on Neural Information Processing Systems 2016, December 5-10, 2016, P1289
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Fiterau-Brostean P, 2016, LECT NOTES COMPUT SC, V9780, P454, DOI 10.1007/978-3-319-41540-6_25
   Fu X, 2007, P INT COMP SOFTW APP, P87
   Ganesh V, 2009, PROC INT CONF SOFTW, P474, DOI 10.1109/ICSE.2009.5070546
   Gehr T, 2015, LECT NOTES COMPUT SC, V9206, P307, DOI 10.1007/978-3-319-21690-4_18
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Grinchtein O, 2010, THEOR COMPUT SCI, V411, P4029, DOI 10.1016/j.tcs.2010.07.008
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gupta BP, 2010, PROC INT CONF DATA, P876, DOI 10.1109/ICDE.2010.5447862
   Halder R., 2010, 2010 IEEE Symposium on Computers and Communications (ISCC), P931, DOI 10.1109/ISCC.2010.5546750
   Heule S, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P710, DOI 10.1145/2786805.2786875
   Isberner M, 2014, LECT NOTES COMPUT SC, V8734, P307, DOI 10.1007/978-3-319-11164-3_26
   Jeon J, 2016, PROC INT CONF SOFTW, P156, DOI 10.1145/2884781.2884856
   Jeon JS, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P934, DOI 10.1145/2786805.2803189
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jovanovic N, 2006, P IEEE S SECUR PRIV, P258, DOI 10.1109/SP.2006.29
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Long F, 2012, PROC INT CONF SOFTW, P80, DOI 10.1109/ICSE.2012.6227204
   Lucia, 2012, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2012.6227175
   Noughi N., 2014, Proceedings of ICPC 2014, P64, DOI DOI 10.1145/2597008.2597790
   Perelman D, 2014, ACM SIGPLAN NOTICES, V49, P408, DOI [10.1145/2594291.2594297, 10.1145/2666356.2594297]
   Perkins Jeff, 2016, Detection of Intrusions and Malware, and Vulnerability Assessment. 13th International Conference, DIMVA 2016. Proceedings: LNCS 9721, P37, DOI 10.1007/978-3-319-40667-1_3
   Pham LH, 2017, PROC IEEE ACM INT C, P155, DOI 10.1109/ICSE-C.2017.87
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Pu Y., 2018, PR MACH LEARN RES, P4161
   Radhakrishna A, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1160, DOI 10.1145/3180155.3180232
   Raffelt Harald, 2005, P 10 INT WORKSH FORM, P62, DOI [10.1145/1081180.1081189, DOI 10.1145/1081180.1081189]
   Rinard M, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P611
   Rinard MC, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P12, DOI 10.1145/3276954.3276959
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Settles B., 2009, 1648 U WISC MAD
   Shen JS, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P269, DOI 10.1145/3314221.3314591
   Shen Jiasi, 2018, TECHNICAL REPORT
   Si XJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P515, DOI 10.1145/3236024.3236034
   Sidiroglou-Douskos S, 2015, ACM SIGPLAN NOTICES, V50, P473, DOI [10.1145/10.1145/2694344.2694389, 10.1145/2775054.2694389]
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Tanno H, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P717, DOI 10.1109/ICSE.2015.231
   Vaandrager F, 2017, COMMUN ACM, V60, P85, DOI 10.1145/2967606
   Veanes M, 2010, LECT NOTES ARTIF INT, V6355, P425, DOI 10.1007/978-3-642-17511-4_24
   Veanes M, 2009, LECT NOTES COMPUT SC, V5885, P49, DOI 10.1007/978-3-642-10373-5_3
   Volpato Michele, 2015, ELECT COMMUN EASST, V72
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang Chenglong, 2018, P ACM PROGRAM LANG, DOI [10.1145/3276527, DOI 10.1145/3276527]
   Wang S., 2014, ACM/IEEE International Conference on Automated Software Engineering, ASE '14, Vasteras, Sweden - September 15 - 19, 2014, P677
   Wang XP, 2018, IDEAS HIST MOD CHINA, V19, P1, DOI 10.1163/9789004385580_002
   Widenius M., 2002, MySQL Reference Manual: Documentation From the Source
   Wu WF, 2016, PROCEEDINGS OF THE 15TH ACM WORKSHOP ON HOT TOPICS IN NETWORKS (HOTNETS '16), P29, DOI 10.1145/3005745.3005754
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
   Yaghmazadeh N, 2016, ACM SIGPLAN NOTICES, V51, P508, DOI [10.1145/2980983.2908088, 10.1145/2908080.2908088]
   Yan C, 2017, CIKM'17: PROCEEDINGS OF THE 2017 ACM CONFERENCE ON INFORMATION AND KNOWLEDGE MANAGEMENT, P1299, DOI 10.1145/3132847.3132954
   Yan H, 2004, PROC INT CONF SOFTW, P470, DOI 10.1109/ICSE.2004.1317469
NR 91
TC 2
Z9 18
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD FEB
PY 2021
VL 42
IS 4
AR 18
DI 10.1145/3430952
PG 119
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA QH3TK
UT WOS:000618199200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Danicic, S
   Laurence, MR
AF Danicic, Sebastian
   Laurence, Michael R.
TI Static Backward Slicing of Non-deterministic Programs and Systems
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Correctness; Control Dependence; Program Slicing
ID CONTROL-DEPENDENCE; GRAPH
AB A theory of slicing non-deterministic programs and systems is developed. Non-deterministic programs and systems are represented as non-deterministic program graphs (NDPGs) that allow arbitrary non-deterministic branching to be expressed. Structural and semantic relationships that must exist between an NDPG and (1) its non-termination insensitive (weak) slices and (2) its non-termination sensitive (strong) slices are defined. Weak and strong commitment closure are introduced. These are the NDPG equivalents of being closed under non-termination sensitive and non-termination insensitive control dependence; properties defined on subsets of vertices of the equivalent deterministic structure: the control flow graph.
   It is proved that if a subset of the vertices of an NDPG is both data dependence closed and (weak/strong) commitment closed, then the resulting induced graph will, indeed, satisfy our structural and semantic requirements. O(n(3)) algorithms for computing minimal data and weak/strong conunitment closed sets are given. The resulting induced graphs are thus guaranteed to be weak and strong slices, respectively.
   It is demonstrated, with examples, that programs written in Dijkstra's non-deterministic guarded command language (DNGCL) can be converted to NDPGs to which our slicing algorithms can then be applied. It is proved that the resulting slices (NDPGs) can always be converted back to valid DNGCL programs, highlighting the applicability of our approach to slicing at the source code level.
C1 [Danicic, Sebastian] Goldsmiths Univ London, Dept Comp, London, England.
   [Laurence, Michael R.] Univ Sheffield, Dept Comp Sci, Sheffield, S Yorkshire, England.
C3 University of London; Goldsmiths University London; University of
   Sheffield
RP Laurence, MR (corresponding author), Flat 80,Albert Barnes House,New Kent Rd, London SE1 6PJ, England.
EM mike.rupen@googlemail.com
CR AGRAWAL H, 1990, SIGPLAN NOTICES, V25, P246, DOI 10.1145/93548.93576
   Allen J.R., 1983, Proc. of the Symposium on Principles of Programming Languages. POPL, P177
   Amtoft T, 2008, INFORM PROCESS LETT, V106, P45, DOI 10.1016/j.ipl.2007.10.002
   Androutsopoulos K, 2013, IEEE T SOFTWARE ENG, V39, P892, DOI 10.1109/TSE.2012.72
   Androutsopoulos K, 2009, LECT NOTES COMPUT SC, V5503, P216
   [Anonymous], 1985, Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory
   [Anonymous], JPL
   [Anonymous], 2001, software focus
   Barraclough RW, 2010, THEOR COMPUT SCI, V411, P1372, DOI 10.1016/j.tcs.2009.10.025
   Beszédes A, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P105, DOI 10.1109/CSMR.2001.914974
   Bilardi G, 1996, ACM SIGPLAN NOTICES, V31, P291, DOI 10.1145/249069.231435
   Binkley D, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P15, DOI 10.1109/SCAM.2005.28
   Binkley D., 1995, ACM Transactions on Software Engineering and Methodology, V4, P3, DOI 10.1145/201055.201056
   Binkley D, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P43
   Binkley D, 2004, ADV COMPUT, V62, P105, DOI 10.1016/S0065-2458(03)62003-6
   Binkley D, 2003, PROC IEEE INT CONF S, P44, DOI 10.1109/ICSM.2003.1235405
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   Binkley D., 1996, Advances in Computers, V43, P1
   Binkley D, 2006, THEOR COMPUT SCI, V360, P23, DOI 10.1016/j.tcs.2006.01.012
   Binkley D, 2006, SCI COMPUT PROGRAM, V62, P228, DOI 10.1016/j.scico.2006.04.007
   Binkley DW, 2006, FORM ASP COMPUT, V18, P103, DOI 10.1007/s00165-005-0077-6
   Canfora G, 1998, INFORM SOFTWARE TECH, V40, P595, DOI 10.1016/S0950-5849(98)00086-X
   Danicic S, 2005, COMPUT J, V48, P737, DOI 10.1093/comjnl/bxh121
   Danicic S, 2000, PROC IEEE INT CONF S, P216, DOI 10.1109/ICSM.2000.883049
   Danicic S, 2007, J LOGIC ALGEBR PROGR, V72, P123
   Danicic S, 2007, THEOR COMPUT SCI, V373, P1, DOI 10.1016/j.tcs.2006.10.001
   Danicic S, 2012, ACM T COMPUT LOG, V13, DOI 10.1145/2159531.2159537
   Danicic S, 2011, MATH STRUCT COMP SCI, V21, P1339, DOI 10.1017/S0960129511000223
   Danicic S, 2011, THEOR COMPUT SCI, V412, P6809, DOI 10.1016/j.tcs.2011.08.033
   Danicic S, 2011, J LOGIC ALGEBR PROGR, V80, P481, DOI 10.1016/j.jlap.2011.04.009
   Danicic Sebastian, 1999, THESIS
   Danicic Sebastian, 2008, P 4 INT WORKSH PROGR
   Danicic Sebastian, 2010, DECIDABILITY S UNPUB
   Danilov SE, 2007, PROBL AT SCI TECH, P3
   Daoudi M, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P109, DOI 10.1109/WCRE.2002.1173069
   Daoudi Mohammed, 2006, THESIS
   De Lucia A, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P142, DOI 10.1109/SCAM.2001.972675
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   DIJKSTRA EW, 1972, DISCIPLINE PROGRAMMI
   Duesterwald E., 1993, Languages and Compilers for Parallel Computing. 5th International Workshop Proceedings, P497
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   FLOYD RW, 1962, COMMUN ACM, V5, P345, DOI 10.1145/367766.368168
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Gallai T., 1961, ACTA MATH ACAD SCI H, V12, P131, DOI [10.1007/BF02066678, DOI 10.1007/BF02066678, 10.1007/bf02066678]
   Giacobazzi R., 2003, Higher-Order and Symbolic Computation, V16, P297, DOI 10.1023/A:1025872819613
   GOPAL R, 1991, PROCEEDINGS - CONFERENCE ON SOFTWARE MAINTENANCE 1991, P191, DOI 10.1109/ICSM.1991.160329
   Gouranton V, 1999, J LOGIC COMPUT, V9, P835, DOI 10.1093/logcom/9.6.835
   *GRAMM INC, 2002, COD SLIC SYST
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   Harman M, 2004, IEEE T SOFTWARE ENG, V30, P3, DOI 10.1109/TSE.2004.1265732
   Hatcliff J., 2000, Higher-Order and Symbolic Computation, V13, P315, DOI 10.1023/A:1026599015809
   Hatcliff J, 1999, LECT NOTES COMPUT SC, V1694, P1
   HORWITZ S, 1988, SIGPLAN NOTICES, V23, P35
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   KAMKAR M, 1992, LECT NOTES COMPUT SC, V631, P370, DOI 10.1007/3-540-55844-6_148
   Komondoor R., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P155, DOI 10.1145/325694.325713
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Korel B, 2003, PROC IEEE INT CONF S, P34, DOI 10.1109/ICSM.2003.1235404
   Korel B, 1997, PROG COMPREHEN, P80, DOI 10.1109/WPC.1997.601269
   Korel B, 1998, INFORM SOFTWARE TECH, V40, P647, DOI 10.1016/S0950-5849(98)00089-5
   Korel Bogdan, 1995, P 2 INT WORKSH AUT A
   LAKHOTIA A, 2003, VIRUS B
   Natour I. A., 1988, Proceedings Focus on Software. 1988 ACM Sixteenth Annual Computer Science Conference, P510, DOI 10.1145/322609.322862
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   PODGURSKI A, 1990, IEEE T SOFTWARE ENG, V16, P965, DOI 10.1109/32.58784
   RAMSHAW L, 1988, J ACM, V35, P893, DOI 10.1145/48014.48021
   Ranganath VP, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275502
   Ranganath VP, 2005, LECT NOTES COMPUT SC, V3444, P77
   Sinha S, 2001, ACM T SOFTW ENG METH, V10, P209, DOI 10.1145/367008.367022
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   VENKATESH GA, 1991, SIGPLAN NOTICES, V26, P107, DOI 10.1145/113446.113455
   Ward M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216375
   Ward MP, 2002, P INT COMP SOFTW APP, P357, DOI 10.1109/CMPSAC.2002.1045029
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Weiser Mark D., 1979, P 5 INT C SOFTW ENG, P439
   Weiss M., 1992, ACM Letters on Programming Languages and Systems, V1, P178, DOI 10.1145/151333.151337
   Xu B., 2005, ACM SOFTW ENG NOTES, V30, DOI DOI 10.1145/1050849.1050865
NR 77
TC 3
Z9 5
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2018
VL 40
IS 3
AR 11
DI 10.1145/2886098
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GT7HI
UT WOS:000444694800003
DA 2024-07-18
ER

PT J
AU Olmedo, F
   Gretz, F
   Jansen, N
   Kaminski, BL
   Katoen, JP
   Mciver, A
AF Olmedo, Federico
   Gretz, Friedrich
   Jansen, Nils
   Kaminski, Benjamin Lucien
   Katoen, Joost-Pieter
   Mciver, Annabelle
TI Conditioning in Probabilistic Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Probabilistic programming; conditioning; weakest pre-condition
   semantics; operational semantics
ID SEMANTICS
AB This article investigates the semantic intricacies of conditioning, a main feature in probabilistic programming. Our study is based on an extension of the imperative probabilistic guarded command language pGCL with conditioning. We provide a weakest precondition (wp) semantics and an operational semantics. To deal with possibly diverging program behavior, we consider liberal preconditions. We show that diverging program behavior plays a key role when defining conditioning. We establish that weakest preconditions coincide with conditional expected rewards in Markov chains-the operational semantics-and that the wp-semantics conservatively extends the existing semantics of pGCL (without conditioning). An extension of these results with nondeterminism turns out to be problematic: although an operational semantics using Markov decision processes is rather straightforward, we show that providing an inductive wp-semantics in this setting is impossible. Finally, we present two program transformations that eliminate conditioning from any program. The first transformation hoists conditioning while updating the probabilistic choices in the program, while the second transformation replaces conditioning-in the same vein as rejection sampling-by a program with loops. In addition, we present a last program transformation that replaces an independent identically distributed loop with conditioning.
C1 [Olmedo, Federico] Univ Chile, Dept Comp Sci, Santiago, Chile.
   [Gretz, Friedrich] Bosch Corp Res, Gerlingen, Germany.
   [Jansen, Nils] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Kaminski, Benjamin Lucien; Katoen, Joost-Pieter] Rhein Westfal TH Aachen, Ahornstr 55, D-52074 Aachen, Germany.
   [Mciver, Annabelle] Macquarie Univ, Dept Comp, Sydney, NSW 2109, Australia.
   [Gretz, Friedrich] Robert Bosch GmbH, D-70465 Stuttgart, Germany.
   [Jansen, Nils] Univ Nijmegen, Fac Sci, Postbus 9010, NL-6500 GL Nijmegen, Netherlands.
C3 Universidad de Chile; Radboud University Nijmegen; RWTH Aachen
   University; Macquarie University; Bosch; Radboud University Nijmegen
RP Olmedo, F (corresponding author), Dept Comp Sci, Av Beachef 851, Santiago 8370456, Chile.
EM folmedo@dcc.uchile.cl; friedrich.gretz@de.bosch.com;
   n.jansen@science.ru.nl; benjamin.kaminski@cs.rwth-aachen.de;
   katoen@cs.rwth-aachen.de; annabelle.mciver@mq.edu.au
RI Kaminski, Benjamin Lucien/AAA-8575-2019; Katoen,
   Joost-Pieter/O-3307-2018
OI Kaminski, Benjamin Lucien/0000-0001-5185-2324; Olmedo,
   Federico/0000-0003-0217-6483; McIver, Annabelle/0000-0002-2405-9838;
   Jansen, Nils/0000-0003-1318-8973
FU Excellence Initiative of the German federal and state government; CDZ
   project CAP [GZ 1023]; DFG Research Training Group [2236 UnRAVeL]
FX This work was supported by the Excellence Initiative of the German
   federal and state government, the CDZ project CAP (GZ 1023), and the DFG
   Research Training Group 2236 UnRAVeL.
CR Ackerman NL, 2011, IEEE S LOG, P107, DOI 10.1109/LICS.2011.49
   Andrés ME, 2008, LECT NOTES COMPUT SC, V4963, P157, DOI 10.1007/978-3-540-78800-3_12
   [Anonymous], PLDI
   [Anonymous], 2014, ARCH FORM PROOFS
   [Anonymous], 2013, ESEC SIGSOFT FSE
   Audebaud P, 2009, SCI COMPUT PROGRAM, V74, P568, DOI 10.1016/j.scico.2007.09.002
   Back R.-J., 1998, Refinement Calculus
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 2014, LNCS, V8413, P515, DOI DOI 10.1007/978-3-642-54862-8
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Bekic H., 1984, Programming Languages and Their Definition - Hans Bekic (1936-1982), P30, DOI [10.1007/BFb0048939, DOI 10.1007/BFB0048939]
   Benjamin NJ, 2015, ELECTRON NOTES THEOR, V319, P199, DOI 10.1016/j.entcs.2015.12.013
   Borgström J, 2011, LECT NOTES COMPUT SC, V6602, P77, DOI 10.1007/978-3-642-19718-5_5
   Broström G, 2000, STATISTICS, V34, P247, DOI 10.1080/02331880008802716
   Carbin M, 2013, ACM SIGPLAN NOTICES, V48, P33, DOI [10.1145/2544173.2509546, 10.1145/2509136.2509546]
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Cousot P, 2012, LECT NOTES COMPUT SC, V7211, P169, DOI 10.1007/978-3-642-28869-2_9
   Den Hartog J. I., 2002, International Journal of Foundations of Computer Science, V13, P315, DOI 10.1142/S012905410200114X
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dries A, 2015, LECT NOTES ARTIF INT, V9286, P312, DOI 10.1007/978-3-319-23461-8_37
   Espinoza B, 2013, INFORM COMPUT, V226, P57, DOI 10.1016/j.ic.2013.03.005
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Gordon AD, 2014, ACM SIGPLAN NOTICES, V49, P321, DOI 10.1145/2535838.2535850
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Gretz F, 2014, PERFORM EVALUATION, V73, P110, DOI 10.1016/j.peva.2013.11.004
   Gupta V., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P189, DOI 10.1145/292540.292558
   Hehner ECR, 2011, FORM ASP COMPUT, V23, P391, DOI 10.1007/s00165-010-0157-0
   Hur CK, 2014, ACM SIGPLAN NOTICES, V49, P133, DOI [10.1145/2666356.2594303, 10.1145/2594291.2594303]
   Hurd J, 2005, THEOR COMPUT SCI, V346, P96, DOI 10.1016/j.tcs.2005.08.005
   Jansen N, 2016, LECT NOTES COMPUT SC, V9938, P68, DOI 10.1007/978-3-319-46520-3_5
   Kaminski BL, 2015, LECT NOTES COMPUT SC, V9234, P307, DOI 10.1007/978-3-662-48057-1_24
   Kaminski Benjamin Lucien, 2017, 32 ANN ACMIEEE S LOG, P1
   Katoen JP, 2015, LECT NOTES COMPUT SC, V9360, P15, DOI 10.1007/978-3-319-23506-6_4
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Kattenbelt M, 2010, FORM METHOD SYST DES, V36, P246, DOI 10.1007/s10703-010-0097-6
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   LUKKIEN JJ, 1994, SCI COMPUT PROGRAM, V22, P137, DOI 10.1016/0167-6423(94)90010-8
   McIver Annabelle., 2005, MG COMP SCI
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Paige B, 2014, PR MACH LEARN RES, V32, P1935
   Pfeffer Avi, 2016, Practical probabilistic programming
   Puterman ML., 2014, MARKOV DECISION PROC, DOI DOI 10.1002/9780470316887
   Robert C., 2013, MONTE CARLO STAT MET
   Shoup V., 2009, COMPUTATIONAL INTRO
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   TIJMS H., 2007, UNDERSTANDING PROBAB
   Varacca D, 2006, MATH STRUCT COMP SCI, V16, P87, DOI 10.1017/S0960129505005074
   Wechler W., 1992, EATCS MONOGRAPHS THE, V25
   Wiklicky H, 2016, LECT NOTES COMPUT SC, V9686, P262, DOI 10.1007/978-3-319-39519-7_16
NR 54
TC 20
Z9 20
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2018
VL 40
IS 1
AR 4
DI 10.1145/3156018
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS6AZ
UT WOS:000419881600004
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Flexeder, A
   Müller-Olm, M
   Petter, M
   Seidl, H
AF Flexeder, Andrea
   Mueller-Olm, Markus
   Petter, Michael
   Seidl, Helmut
TI Fast Interprocedural Linear Two-Variable Equalities
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Performance; Verification; Abstract
   interpretation; interprocedural analysis; linear equalities; linear
   two-variable equalities; low-level code analysis; static analysis;
   summary functions; variable differences
AB In this article we provide an interprocedural analysis of linear two-variable equalities. The novel algorithm has a worst-case complexity of O(n.k(4)), where k is the number of variables and n is the program size. Thus, it saves a factor of k(4) in comparison to a related algorithm based on full linear algebra. We also indicate how the practical runtime can be further reduced significantly. The analysis can be applied, for example, for register coalescing, for identifying local variables and thus for interprocedurally observing stack pointer modifications as well as for an analysis of array index expressions, when analyzing low-level code.
C1 [Flexeder, Andrea; Petter, Michael; Seidl, Helmut] Tech Univ Munich, Inst Informat, Lehrstuhl 2, D-85748 Garching, Germany.
   [Mueller-Olm, Markus] Univ Munster, Inst Informat, Fachbereich Math & Informat, D-48149 Munster, Germany.
C3 Technical University of Munich; University of Munster
RP Flexeder, A (corresponding author), Tech Univ Munich, Inst Informat, Lehrstuhl 2, Boltzmannstr 3, D-85748 Garching, Germany.
FU Deutsche Forschungsgemeinschaft (DFG) [MU 1508/1-1, SE 551/13-1]
FX The ideas for this work have been developed while cooperation with the
   OpIAT project MU 1508/1-1 and SE 551/13-1 funded by the Deutsche
   Forschungsgemeinschaft (DFG).
CR Alpern B., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/73560.73561
   Fecht C., 1998, Nordic Journal of Computing, V5, P304
   George L, 1996, ACM T PROGR LANG SYS, V18, P300, DOI 10.1145/229542.229546
   Gulwani S, 2004, LECT NOTES COMPUT SC, V3148, P212
   KNOOP J, 1992, LECT NOTES COMPUT SC, V641, P125
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   Miné A, 2001, LECT NOTES COMPUT SC, V2053, P155
   Müller-Olm M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275504
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3444, P31
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3385, P79
   Müller-Olm M, 2004, ACM SIGPLAN NOTICES, V39, P330, DOI 10.1145/982962.964029
   MULLER-OLM M, 2008, LECT NOTES COMPUTER, V4960
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Sankaranarayanan S, 2005, LECT NOTES COMPUT SC, V3385, P25
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Simon A, 2003, LECT NOTES COMPUT SC, V2664, P71, DOI 10.1007/3-540-45013-0_7
   STEFFEN B, 1990, LECT NOTES COMPUT SC, V432, P389
   ZUCKER S, 1995, SYSTEM 5 APPL BINA S
NR 19
TC 4
Z9 5
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2011
VL 33
IS 6
AR 21
DI 10.1145/2049706.2049710
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 871PU
UT WOS:000298751000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Bengtson, J
   Bhargavan, K
   Fournet, C
   Gordon, AD
   Maffeis, S
AF Bengtson, Jesper
   Bhargavan, Karthikeyan
   Fournet, Cedric
   Gordon, Andrew D.
   Maffeis, Sergio
TI Refinement Types for Secure Implementations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Security; Verification
ID CRYPTOGRAPHIC PROTOCOLS; CALCULUS; SECRECY; PROVER; LOGIC; VERIFICATION
AB We present the design and implementation of a typechecker for verifying security properties of the source code of cryptographic protocols and access control mechanisms. The underlying type theory is a lambda-calculus equipped with refinement types for expressing pre- and post-conditions within first-order logic. We derive formal cryptographic primitives and represent active adversaries within the type theory. Well-typed programs enjoy assertion-based security properties, with respect to a realistic threat model including key compromise. The implementation amounts to an enhanced typechecker for the general-purpose functional language F-#; typechecking generates verification conditions that are passed to an SMT solver. We describe a series of checked examples. This is the first tool to verify authentication properties of cryptographic protocols by typechecking their source code.
C1 [Bhargavan, Karthikeyan; Fournet, Cedric; Gordon, Andrew D.] Microsoft Res, Cambridge CB3 0FB, England.
   [Bengtson, Jesper] Uppsala Univ, Dept Informat Technol, SE-75105 Uppsala, Sweden.
   [Maffeis, Sergio] Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2AZ, England.
C3 Microsoft; Uppsala University; Imperial College London
RP Fournet, C (corresponding author), Microsoft Res, Roger Needham Bldg,7 JJ Thomson Ave, Cambridge CB3 0FB, England.
EM four-net@microsoft.com
FU EPSRC [EP/E044956/1]; EPSRC [EP/I004246/1, EP/E044956/1] Funding Source:
   UKRI
FX S. Maffeis was supported by EPSRC grant EP/E044956/1.
CR Abadi M, 2005, J ACM, V52, P102, DOI 10.1145/1044731.1044735
   ABADI M, 1993, ACM T PROGR LANG SYS, V15, P706, DOI 10.1145/155183.155225
   Abadi M, 1996, IEEE T SOFTWARE ENG, V22, P6, DOI 10.1109/32.481513
   Abadi M, 1999, INFORM COMPUT, V148, P1, DOI 10.1006/inco.1998.2740
   Abadi M, 1999, J ACM, V46, P749, DOI 10.1145/324133.324266
   ABADI M, 2007, COMPUTATION MEANING, V172, P5
   Abadi M., 2003, P 10 ANN NETW DISTR
   [Anonymous], 1993, P 1 ACM C COMP COMM
   [Anonymous], 1977, Elements of Intuitionism
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Askarov A, 2005, LECT NOTES COMPUT SC, V3679, P197
   Askarov A, 2006, LECT NOTES COMPUT SC, V4134, P353
   Aspinall D, 2001, THEOR COMPUT SCI, V266, P273, DOI 10.1016/S0304-3975(00)00175-4
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Backes M, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P387, DOI 10.1145/1866307.1866351
   Backes M, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P308, DOI 10.1109/CSF.2009.24
   Baltopoulos I.G., 2009, P 4 INT WORKSH TYP L, P27, DOI [10.1145/1481861.1481866, DOI 10.1145/1481861.1481866]
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   BENGTSON J, 2010, MSRTR2008118
   Bengtson J, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P17, DOI 10.1109/CSF.2008.27
   Bhargavan K, 2010, LECT NOTES COMPUT SC, V6461, P47, DOI 10.1007/978-3-642-17164-2_5
   Bhargavan K, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P445, DOI 10.1145/1706299.1706350
   Bhargavan K, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P124, DOI 10.1109/CSF.2009.26
   Bhargavan K, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P459
   Bhargavan K, 2008, ACM T PROGR LANG SYS, V31, DOI 10.1145/1452044.1452049
   Blanchet B, 2001, P IEEE CSFW, P82, DOI 10.1109/CSFW.2001.930138
   Blanchet B, 2008, J LOGIC ALGEBR PROGR, V75, P3, DOI 10.1016/j.jlap.2007.06.002
   Blanchet B, 2006, P IEEE S SECUR PRIV, P140, DOI 10.1109/SP.2006.1
   BORGSTROM J, 2010, J FUNCTION PROGRAM
   CARDELLI L, 1986, LECT NOTES COMPUTER, V306, P45
   Chaki S, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P172, DOI 10.1109/CSF.2009.20
   Chen JA, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P412, DOI 10.1145/1806596.1806643
   Cirillo A, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P16, DOI 10.1109/CSF.2007.19
   Cok DR, 2005, LECT NOTES COMPUT SC, V3362, P108
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   COOPER E., 2006, P 5 INT S FORM METH
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Datta A, 2007, ELECTRON NOTES THEOR, V172, P311, DOI 10.1016/j.entcs.2007.02.012
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DEAN D, 1996, P IEEE S SEC PRIV
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Durgin N., 2003, Journal of Computer Security, V11, P677
   EASTLAKE D, 2002, XML SIGNATURE SYNTAX
   Filliâtre JC, 2004, LECT NOTES COMPUT SC, V3308, P15
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   FOURNET C, 2009, P WORKSH FORM COMP C
   Fournet C, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P31, DOI 10.1109/CSF.2007.7
   Fournet C, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P323, DOI 10.1145/1328438.1328478
   Fournet C, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275500
   FREEMAN T, 1991, P ACM SIGPLAN C PROG, P268, DOI DOI 10.1145/113445.113468
   Gordon A. D., 2003, Journal of Computer Security, V11, P451
   Gordon AD, 2005, LECT NOTES COMPUT SC, V3653, P186, DOI 10.1007/11539452_17
   GORDON AD, 2002, CRYPTYC CRYPTOGRAPHI
   GORDON AD, 1994, LECT NOTES COMPUTER, V780, P414
   GORDON AD, 2003, J COMPUTER SECURITY, V12, P435
   Gordon AD, 2010, NATO SCI PEAC SECUR, V25, P73, DOI 10.3233/978-1-60750-100-8-73
   Goubault-Larrecq J, 2005, LECT NOTES COMPUT SC, V3385, P363
   Gronski Jessica, 2006, SCHEM FUNCT PROGR WO, P93
   Guts N, 2009, LECT NOTES COMPUT SC, V5789, P168, DOI 10.1007/978-3-642-04444-1_11
   HUBBERS E, 2003, SECURITY PERVASIVE C, P213
   Jagadeesan R, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(1:2)2008
   Jia LM, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P27
   Kawaguchi M, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P304, DOI 10.1145/1542476.1542510
   LI P, 2006, CSFW, P16
   Maffeis S, 2008, LECT NOTES COMPUT SC, V5283, P563
   Martin-Lof P., 1984, Intuitionistic type theory
   MORRIS JH, 1973, COMMUN ACM, V16, P15, DOI 10.1145/361932.361937
   MYERS AC, 1999, ACM S PRINC PROGR LA, P228
   NADALIN A, 2004, OASIS WEB SERVICES S
   NEEDHAM RM, 1978, COMMUN ACM, V21, P993, DOI 10.1145/359657.359659
   PARENT C, 1995, MATH PROGRAM CONSTRU, V947, P351
   Paulson LawrenceC., 1987, LOGIC COMPUTATION
   PAULSON LC, 1991, LECT NOTES COMPUTER, V828
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   POLL E, 2007, P WORKSH INF TECHN S, P164
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   Régis-Gianas Y, 2008, LECT NOTES COMPUT SC, V5133, P305
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   RONDON R, 2010, P ACM S PRINC PROGR, P131
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sumii E, 2007, THEOR COMPUT SCI, V375, P169, DOI 10.1016/j.tcs.2006.12.032
   SWAMY N, 2008, P IEEE S SEC PRIV, P96
   Swamy N, 2010, LECT NOTES COMPUT SC, V6012, P529, DOI 10.1007/978-3-642-11957-6_28
   Syme Don., 2007, Expert F#
   Vaughan JA, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P177, DOI 10.1109/CSF.2008.24
   Vaughan JA, 2007, P IEEE S SECUR PRIV, P192, DOI 10.1109/SP.2007.5
   Woo T. Y. C., 1993, Proceedings 1993 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.93CH3290-4), P178, DOI 10.1109/RISP.1993.287633
   Xi Hongwei., 1999, Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P214
   Xu D.N., 2006, Proceedings of the 2006 ACM SIGPLAN workshop on Haskell, Haskell '06, P48, DOI DOI 10.1145/1159842.1159849
NR 93
TC 65
Z9 69
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2011
VL 33
IS 2
AR 8
DI 10.1145/1890028.1890031
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 732AO
UT WOS:000288153000003
OA Green Published, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Suhendra, V
   Roychoudhury, A
   Mitra, T
AF Suhendra, Vivy
   Roychoudhury, Abhik
   Mitra, Tulika
TI Scratchpad Allocation for Concurrent Embedded Software
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Performance; Scratchpad memory; compiler controlled memories;
   multicore architectures; worst-case response time; message sequence
   chart; UML sequence diagram
ID MEMORY
AB Software-controlled scratchpad memory is increasingly employed in embedded systems as it offers better timing predictability compared to caches. Previous scratchpad allocation algorithms typically consider single-process applications. But embedded applications are mostly multitasking with real-time constraints, where the scratchpad memory space has to be shared among interacting processes that may preempt each other. In this work, we develop a novel dynamic scratchpad allocation technique that takes these process interferences into account to improve the performance and predictability of the memory system. We model the application as a Message Sequence Chart (MSC) to best capture the interprocess interactions. Our goal is to optimize the Worst-Case Response Time (WCRT) of the application through runtime reloading of the scratchpad memory content at appropriate execution points. We propose an iterative allocation algorithm that consists of two critical steps: (1) analyze the MSC along with the existing allocation to determine potential interference patterns, and (2) exploit this interference information to tune the scratchpad reloading points and content so as to best improve the WCRT. We present various alternative scratchpad allocation heuristics and evaluate their effectiveness in reducing the WCRT. The scheme is also extended to work on Message Sequence Graph models. We evaluate our memory allocation scheme on two real-world embedded applications controlling an Unmanned Aerial Vehicle (UAV) and an in-orbit monitoring instrument, respectively.
C1 [Suhendra, Vivy] Inst Infocomm Res, Singapore 138632, Singapore.
   [Roychoudhury, Abhik; Mitra, Tulika] Natl Univ Singapore, Dept Comp Sci, Singapore 117417, Singapore.
C3 Agency for Science Technology & Research (A*STAR); A*STAR - Institute
   for Infocomm Research (I2R); National University of Singapore
RP Suhendra, V (corresponding author), Inst Infocomm Res, 1 Fusionopolis Way, Singapore 138632, Singapore.
EM vsuhendra@i2r.a-star.edu.sg; abhik@comp.nus.edu.sg;
   tulika@comp.nus.edu.sg
RI Mitra, Tulika/HCI-5887-2022; Ozturk, Ozcan/G-5184-2011; Mitra,
   Tulika/J-4464-2017
OI ROYCHOUDHURY, Abhik/0000-0002-7127-1137; Mitra,
   Tulika/0000-0003-4136-4188
FU NUS [R252-000-321-112]
FX This work was partially supported by NUS research project
   "Platform-aware Timing Analysis of Behavioral System Models"
   (R252-000-321-112).
CR Alur R, 1999, LECT NOTES COMPUT SC, V1664, P114
   ANGIOLINI F, 2004, P INT C COMP ARCH SY, P259
   Austin T, 2002, COMPUTER, V35, P59, DOI 10.1109/2.982917
   Avissar Oren, 2002, ACM Trans. on Embedded Computing Systems (TECS), V1, P6, DOI [10.1145/581888.581891, DOI 10.1145/581888.581891]
   Banakar R, 2002, CODES 2002: PROCEEDINGS OF THE TENTH INTERNATIONAL SYMPOSIUM ON HARDWARE/SOFTWARE CODESIGN, P73, DOI 10.1109/CODES.2002.1003604
   Deverge JF, 2007, EUROMICRO, P179, DOI 10.1109/ECRTS.2007.37
   Dominguez Angel., 2005, J EMBEDDED COMPUTING, V1, P521
   Egger B., 2006, INT C COMPILERS ARCH, P223
   Egger B, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1331331.1331335
   European Space Agency, 2008, DEBIE 1 STAND SPAC D
   FALK H, 2004, P 8 INT WORKSH SOFTW, P137
   Harel D., 2003, UML for Real: Design of Embedded Real-Time Systems, P77, DOI [DOI 10.1007/0-306-48738-1_4, 10.1007/0-306-48738-1, DOI 10.1007/0-306-48738-1]
   Issenin I, 2006, DES AUT CON, P49, DOI 10.1109/DAC.2006.229175
   *ITU T, 1996, Z120 ITUT
   Janapsatya A, 2006, ASIA S PACIF DES AUT, P612, DOI 10.1109/ASPDAC.2006.1594753
   Kandemir M, 2004, IEEE T COMPUT AID D, V23, P243, DOI 10.1109/TCAD.2003.822123
   Kandemir M, 2002, DES AUT CON, P219, DOI 10.1109/DAC.2002.1012623
   Kandemir M, 2001, ISSS'01: 14TH INTERNATIONAL SYMPOSIUM ON SYSTEM SYNTHESIS, P7, DOI 10.1109/ISSS.2001.957905
   KANDEMIR M, 2004, P INT C COMP ARCH SY, P14
   Kandemir M, 2007, IEEE IC CAD, P155
   Lee CG, 1998, IEEE T COMPUT, V47, P700, DOI 10.1109/12.689649
   Li X, 2007, SCI COMPUT PROGRAM, V69, P56, DOI 10.1016/j.scico.2007.01.014
   Marwedel P, 2004, ASIA S PACIF DES AUT, P4, DOI 10.1109/ASPDAC.2004.1337530
   MITRA T, 2007, COMPILER DESIGN HDB, pCH1
   Negi HS, 2003, CODES(PLUS)ISSS 2003: FIRST IEEE/ACM/IFIP INTERNATIONAL CONFERENCE ON HARDWARE/SOFTWARE CODESIGN & SYSTEM SYNTHESIS, P201
   NEMER F, 2006, P 6 INT WORKSH WORST
   Nguyen Nghi., 2005, CASES 05, P115
   Ozturk O, 2006, ISQED 2006: PROCEEDINGS OF THE 7TH INTERNATIONAL SYMPOSIUM ON QUALITY ELECTRONIC DESIGN, P576
   Panda PR, 2000, ACM T DES AUTOMAT EL, V5, P682, DOI 10.1145/348019.348570
   Puaut I, 2006, EUROMICRO, P217, DOI 10.1109/ECRTS.2006.32
   Ravindran RA, 2005, INT SYM CODE GENER, P179, DOI 10.1109/CGO.2005.13
   Staschulat Jan., 2004, Proceedings of the 4th ACM International Conference on Embedded Software, EMSOFT '04, P278
   Steinke S, 2002, ISSS'02: 15TH INTERNATIONAL SYMPOSIUM ON SYSTEM SYNTHESIS, P213, DOI 10.1109/ISSS.2002.1227180
   Steinke S, 2002, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, 2002 PROCEEDINGS, P409, DOI 10.1109/DATE.2002.998306
   Suhendra V, 2005, REAL TIM SYST SYMP P, P223
   SUHENDRA V, 2006, P INT C COMP ARCH SY, P37
   Suhendra V, 2006, DES AUT CON, P358, DOI 10.1109/DAC.2006.229300
   Tomiyama H., 2000, Proceedings of the Eighth International Workshop on Hardware/Software Codesign. CODES 2000 (IEEE Cat. No.00TH8518), P67, DOI 10.1109/HSC.2000.843709
   Udayakumaran S., 2003, CASES '03: Proceedings of the 2003 international conference on Compilers, architecture and synthesis for embedded systems, P276
   Verma M, 2004, INTERNATIONAL CONFERENCE ON HARDWARE/SOFTWARE CODESIGN AND SYSTEM SYNTHESIS, P104
   Verma M, 2004, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, VOLS 1 AND 2, PROCEEDINGS, P1264, DOI 10.1109/DATE.2004.1269069
   Verma M, 2005, EMB SYST REAL TIME M, P115
   WEHMEYER L, 2004, P 3 WORKSH MEM PERF, P114
   WELSH DJA, 1967, COMPUT J, V10, P85, DOI 10.1093/comjnl/10.1.85
   Yen TY, 1998, IEEE T PARALL DISTR, V9, P1125, DOI 10.1109/71.735959
   2002, ILOG CPLEX OPTIMIZER
NR 46
TC 21
Z9 22
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2010
VL 32
IS 4
AR 13
DI 10.1145/1734206.1734210
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 588GV
UT WOS:000277057700004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Spoto, F
   Mesnard, F
   Payet, É
AF Spoto, Fausto
   Mesnard, Fred
   Payet, Etienne
TI A Termination Analyzer for Java Bytecode Based on Path-Length
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification; Abstract interpretation; Java; Java
   bytecode; termination analysis
ID SHAPE-ANALYSIS; LOGIC PROGRAMS; VERIFICATION; TOOL; ABSTRACTION; PROOFS;
   MODEL
AB It is important to prove that supposedly terminating programs actually terminate, particularly if those programs must be run on critical systems or downloaded into a client such as a mobile phone. Although termination of computer programs is generally undecidable, it is possible and useful to prove termination of a large, nontrivial subset of the terminating programs. In this article, we present our termination analyzer for sequential Java bytecode, based on a program property called path-length. We describe the analyses which are needed before the path-length can be computed such as sharing, cyclicity, and aliasing. Then we formally define the path-length analysis and prove it correct with respect to a reference denotational semantics of the bytecode. We show that a constraint logic program P-CLP can be built from the result of the path-length analysis of a Java bytecode program P and formally prove that if P-CLP terminates, then P also terminates. Hence a termination prover for constraint logic programs can be applied to prove the termination of P. We conclude with some discussion of the possibilities and limitations of our approach. Ours is the first existing termination analyzer for Java bytecode dealing with any kind of data structures dynamically allocated on the heap and which does not require any help or annotation on the part of the user.
C1 [Spoto, Fausto] Univ Verona, Dipartimento Informat, I-37134 Verona, Italy.
   [Mesnard, Fred; Payet, Etienne] Univ Reunion, LIM, IREMIA, F-97715 St Denis Messag 9, France.
C3 University of Verona; University of La Reunion
RP Spoto, F (corresponding author), Univ Verona, Dipartimento Informat, Str Grazie 15, I-37134 Verona, Italy.
EM fausto.spoto@univr.it
OI Payet, Etienne/0000-0002-3519-025X; Spoto, Fausto/0000-0003-2973-0384
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   Ahrendt W., 2005, Softw. Syst. Model., V4, P32
   Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   ALBERT E, 2007, P 9 INT WORKSH TERM
   Albert E, 2008, LECT NOTES COMPUT SC, V5051, P2, DOI 10.1007/978-3-540-68863-1_2
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], POPL 2001
   Avery J, 2006, LECT NOTES COMPUT SC, V3945, P192
   Babic D, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P93, DOI 10.1109/SEFM.2007.25
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   Bagnara R, 2005, SCI COMPUT PROGRAM, V58, P28, DOI 10.1016/j.scico.2005.02.003
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Bannwart F, 2005, ELECTRON NOTES THEOR, V141, P255, DOI 10.1016/j.entcs.2005.02.026
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Ben-Amram AM, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180480
   Berdine Josh, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P211, DOI 10.1145/1190216.1190249
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Berdine J, 2006, LECT NOTES COMPUT SC, V4144, P386, DOI 10.1007/11817963_35
   Bouajjani A, 2006, LECT NOTES COMPUT SC, V4144, P517, DOI 10.1007/11817963_47
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3385, P113
   Brodsky A., 1989, Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P190, DOI 10.1145/73721.73741
   Brotherston J, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P101, DOI 10.1145/1328438.1328453
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Chang BYE, 2005, LECT NOTES COMPUT SC, V3385, P147
   CHOI JD, 1993, P 20 ACM SIGPLAN SIG, P232, DOI DOI 10.1145/158511.158639
   Codish M, 2005, LECT NOTES COMPUT SC, V3668, P326, DOI 10.1007/11562931_25
   Codish M, 1999, J LOGIC PROGRAM, V41, P103, DOI 10.1016/S0743-1066(99)00006-0
   Codish M, 2008, LECT NOTES COMPUT SC, V4915, P1, DOI 10.1007/978-3-540-78769-3_1
   Cook B, 2005, LECT NOTES COMPUT SC, V3672, P87
   Cook B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P320, DOI 10.1145/1250734.1250771
   Cook B, 2006, LECT NOTES COMPUT SC, V4144, P415, DOI 10.1007/11817963_37
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Cousot P, 2005, LECT NOTES COMPUT SC, V3385, P1
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   De Schreye D, 1994, J LOGIC PROGRAM, V20, P199, DOI 10.1016/0743-1066(94)90027-2
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Dershowitz N, 2001, APPL ALGEBR ENG COMM, V12, P117, DOI 10.1007/s002000100065
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Gabbrielli M., 1994, Proceedings of the 1994 ACM Symposium on Applied Computing (SAC'94), P394, DOI [10.1145/326619.326789, DOI 10.1145/326619.326789]
   Genaim S, 2005, THEOR PRACT LOG PROG, V5, P75, DOI 10.1017/S1471068404002236
   GENAIM S, 2008, P 10 WORKSH FORM TEC
   Giesl J, 2006, LECT NOTES ARTIF INT, V4130, P281
   Gotsman A, 2006, LECT NOTES COMPUT SC, V4134, P240
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Leavens GT, 2007, FORM ASP COMPUT, V19, P159, DOI 10.1007/s00165-007-0026-7
   Lee Chin Soon, 2001, PRINCIPLES PROGRAMMI, P81, DOI [10.1145/360204.360210, DOI 10.1145/360204.360210]
   Lehner H, 2007, ELECTRON NOTES THEOR, V190, P35, DOI 10.1016/j.entcs.2007.02.059
   Leino KRM, 2005, LECT NOTES COMPUT SC, V3582, P26
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   LEINO KRM, 2008, P 1 IND SOFTW ENG C, P57
   Lindenstrauss N, 1997, LECT NOTES COMPUT SC, V1254, P444
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Lindstrom G, 2005, LECT NOTES COMPUT SC, V3707, P444
   Loginov A, 2007, LECT NOTES COMPUT SC, V4444, P247
   LOGOZZO F, 2008, P 17 INT C COMP CONS, P197
   MANOLIOS P, 2006, P 28 INT C SOFTW ENG, P873
   Manolios P, 2006, LECT NOTES COMPUT SC, V4144, P401, DOI 10.1007/11817963_36
   MANSON J, 2001, P ACM 2001 JAV GRAND, P29
   Manson Jeremy., 2005, Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'05, P378, DOI DOI 10.1145/1040305.1040336
   Mesnard F, 2005, THEOR PRACT LOG PROG, V5, P243, DOI 10.1017/S1471O68404002017
   MESNARD F, 1996, P 1996 JOINT INT C S, P7
   Mesnard F, 2008, THEOR PRACT LOG PROG, V8, P111, DOI 10.1017/S1471068407003122
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Monniaux D, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353446
   MULLER P, 2007, LECT NOTES COMPUTER, V4171
   NYUGEN MT, 2005, LECT NOTES COMPUTER, V3668, P311
   Ohlebusch E, 2000, LECT NOTES COMPUT SC, V1833, P270
   PALSBERG J, 1991, SIGPLAN NOTICES, V26, P146
   Payet E, 2007, LECT NOTES COMPUT SC, V4634, P452
   Pippenger N, 1997, ACM T PROGR LANG SYS, V19, P223, DOI 10.1145/244795.244798
   PLUMER L, 1990, LECT NOTES COMPUTER, V446
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Podelski A, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1232420.1232422
   POLLET I, 2001, LECT NOTES COMPUTER, V2072, P77
   Reps T, 2003, COMPILER DESIGN HANDBOOK, P175
   REYNOLDS JC, 2000, P MILL PERSP COMP SC, P303
   Rossignoli S, 2006, LECT NOTES COMPUT SC, V3855, P95
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Schneider-Kamp P, 2007, LECT NOTES COMPUT SC, V4407, P177, DOI 10.1007/978-3-540-71410-1_13
   Secci S, 2005, LECT NOTES COMPUT SC, V3672, P320
   Serebrenik A, 2002, LECT NOTES COMPUT SC, V2477, P151
   Spoto F, 2003, ACM T PROGR LANG SYS, V25, P578, DOI 10.1145/937563.937565
   SPOTO F, 2008, JULIA STATIC ANAL
   SPOTO F, 2008, P 6 IEEE INT C SOFTW, P21
   SPOTO F, 2008, JULIA BINTERM AUTOMA
   SPOTO F, 2006, INT WORKSH EM APPL I
   Spoto F, 2009, ELECTRON NOTES THEOR, V253, P129, DOI 10.1016/j.entcs.2009.11.019
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   Stoer J., 1970, Convexity and Optimization in Finite Dimensions I, DOI DOI 10.1007/978-3-642-46216-0
   Suwimonteerabuth D, 2005, LECT NOTES COMPUT SC, V3440, P541
   Suwimonteerabuth D, 2007, LECT NOTES COMPUT SC, V4590, P164
   TABOCH C, TERMINWEB SEMANTIC B
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
   ULLMAN JD, 1988, J ACM, V35, P345, DOI 10.1145/42282.42285
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Wildmoser M, 2005, LECT NOTES COMPUT SC, V3444, P326
   Wildmoser M, 2005, ELECTRON NOTES THEOR, V141, P19, DOI 10.1016/j.entcs.2005.02.040
NR 103
TC 62
Z9 65
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2010
VL 32
IS 3
AR 8
DI 10.1145/1709093.1709095
PG 70
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 568RN
UT WOS:000275540300002
OA Bronze
DA 2024-07-18
ER

PT J
AU Terauchi, T
   Aiken, A
AF Terauchi, Tachio
   Aiken, Alex
TI A capability calculus for concurrency and determinism
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; theory; determinism; capabilities; type systems
AB This article presents a static system for checking determinism (technically, partial confluence) of communicating concurrent processes. Our approach automatically detects partial confluence in programs communicating via a mix of different kinds of communication methods: rendezvous channels, buffered channels, broadcast channels, and reference cells. Our system reduces the partial confluence checking problem in polynomial time (in the size of the program) to the problem of solving a system of rational linear inequalities, and is thus efficient.
C1 [Terauchi, Tachio] Tohoku Univ, Sendai, Miyagi 980, Japan.
   [Aiken, Alex] Stanford Univ, Stanford, CA 94305 USA.
C3 Tohoku University; Stanford University
RP Terauchi, T (corresponding author), Tohoku Univ, Sendai, Miyagi 980, Japan.
EM terauchi@ecei.tohoku.ac.jp
OI Aiken, Alex/0000-0002-3723-9555; Terauchi, Tachio/0000-0001-5305-4916
FU KAKENHAI [20700019, 2024001]; Grants-in-Aid for Scientific Research
   [20700019] Funding Source: KAKEN
FX This work was supported by KAKENHAI 20700019 and 2024001.
CR [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1974, PROC IFIP C 74
   BLOM S, 2002, P 14 INT C COMP AID, P596
   BOUDOL G, 1992, 1702 INRIA SOPH ANT
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   COATES WS, 2001, P 7 INT S ADV RES AS
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   DELINE R, 2001, P ACM SIGPLAN C PROG, V1, P59
   Edwards Stephen A., 2005, P 5 ACM INT C EMBEDD, P264
   Foster J., 2002, P ACM SIGPLAN C PROG
   GORDON AD, 2002, TYPES EFFECTS ASYMME
   GORDON AD, 2001, THEOR COMPUT SCI, V45
   Hansen H, 2006, LECT NOTES COMPUT SC, V4137, P188
   Honda Kohei., 1992, Proceedings of the ECOOP'91 Workshop on Object-Based Concurrent Computing, P21
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   KOBAYASHI N, 2007, COMMUNICATION
   KOBAYASHI N, 1995, P 2 INT S STAT AN GL, P225
   KONG B, 2000, P 27 INT C AUT LANG, P403
   Lee E. A., 2006, UCBEECS20061
   MEGACZ A, 2006, CCCD IMPLEMENTATION
   NESTMANN U, 1997, P FMICS 97, P77
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Sutter H., 2005, ACM Queue, V3, P54, DOI 10.1145/1095408.1095421
   TERAUCHI T, 2005, P 10 ACM SIGPLAN INT, P105
   Terauchi T, 2006, LECT NOTES COMPUT SC, V4137, P218
   WALKER D, 2000, P INT WORKSH TYP COM
   Wang HF, 2006, DYNAM CONT DIS SER B, V13, P16
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
   [No title captured]
NR 30
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2008
VL 30
IS 5
AR 27
DI 10.1145/1387673.1387676
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 351SG
UT WOS:000259445600003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Terauchi, T
   Aiken, A
AF Terauchi, Tachio
   Aiken, Alex
TI Witnessing side effects
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; theory; mutable state; side effects
AB We present a new approach to the old problem of adding global mutable state to purely functional languages. Our idea is to extend the language with "witnesses," which is based on an arguably more pragmatic motivation than past approaches. We give a semantic condition for correctness and prove it is sufficient. We also give a somewhat surprising static checking algorithm that makes use of a network flow property equivalent to the semantic condition via reduction to a satisfaction problem for a system of linear inequalities.
C1 [Terauchi, Tachio] Tohoku Univ, Aoba Ku, Sendai, Miyagi 9808578, Japan.
   [Aiken, Alex] Stanford Univ, Dept Comp Sci, Stanford, CA 94305 USA.
C3 Tohoku University; Stanford University
RP Terauchi, T (corresponding author), Tohoku Univ, Aoba Ku, 6-3 Aramaki Aza Aoba, Sendai, Miyagi 9808578, Japan.
EM terauchi@ecei.tohoku.ac.jp; aiken@cs.stanford.edu
OI Aiken, Alex/0000-0002-3723-9555; Terauchi, Tachio/0000-0001-5305-4916
CR ACHTEN PM, 1993, P GLASG WORKSH FUNCT, P1
   [Anonymous], P 21 ACM SIGPLAN SIG
   [Anonymous], 1995, C RECORD POPL 95 22, DOI DOI 10.1145/199448.199507
   [Anonymous], PLDI 98
   ARIOLA Z, 1998, P 25 ACM S PRINC PRO, P62
   Ariola Z. M., 1997, J FUNCTIONAL PROGRAM, V7, P265
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   CRARY K, 1999, P 26 ACM SIGPLAN SIG, P262
   GROSSMAN D, 2002, P 2002 ACM SIGPLAN C
   GUZMAN JC, 1990, P 5 ANN IEEE S LOG C, P42
   JONES SLP, 1993, P 20 ACM SIGPLAN SIG, P71, DOI DOI 10.1145/158511.158524
   LAUNCHBURY J, 1997, P 2 ACM SIGPLAN INT, P227
   Launchbury John., 1993, Proceedings of the 20th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. POPL'93. New York, NY, P144, DOI DOI 10.1145/158511.158618
   MATTHEWS J, 2005, P 2005 WORKSH SCH FU
   Moggi E, 2001, J FUNCT PROGRAM, V11, P591, DOI 10.1017/S0956796801004154
   MOGGI E, 1991, INFORM COMPUT, V93, P1
   ODERSKY M, 1993, P 20 ACM S PRINC PRO, P43
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Sabry A., 1998, Journal of Functional Programming, V8, P1, DOI 10.1017/S0956796897002943
   SEMMELROTH M, 1999, P 4 ACM SIGPLAN INT, P8
   SESTOFT P, 1989, FPCA 89 C FUNCT PROG
   TERAUCHI T, 2004, UCBCSD041314 U CAL
   TERAUCHI T, 2005, P 10 ACM SIGPLAN INT, P105
   Terauchi T, 2006, LECT NOTES COMPUT SC, V4137, P218
   Turner DA, 1995, LECT NOTES COMPUT SC, V1022, P1
   WADLER P, 1990, IFIP TC, V2, P347
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 27
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2008
VL 30
IS 3
AR 15
DI 10.1145/1353445.1353449
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308XV
UT WOS:000256425100004
DA 2024-07-18
ER

PT J
AU Collberg, CS
   Thomborson, C
   Townsend, GM
AF Collberg, Christian S.
   Thomborson, Clark
   Townsend, Gregg M.
TI Dynamic graph-based software fingerprinting
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; legal aspects; security; software piracy; software
   protection; watermarking
ID PROTECTION
AB Fingerprinting embeds a secret message into a cover message. In media fingerprinting, the secret is usually a copyright notice and the cover a digital image. Fingerprinting an object discourages intellectual property theft, or when such theft has occurred, allows us to prove ownership. The Software Fingerprinting problem can be described as follows. Embed a structure W into a program P such that: W can be reliably located and extracted from P even after P has been subjected to code transformations such as translation, optimization and obfuscation; W is stealthy; W has a high data rate; embedding W into P does not adversely affect the performance of P; and W has a mathematical property that allows us to argue that its presence in P is the result of deliberate actions.
   In this article, we describe a software fingerprinting technique in which a dynamic graph fingerprint is stored in the execution state of a program. Because of the hardness of pointer alias analysis such fingerprints are difficult to attack automatically.
C1 Univ Arizona, Dept Comp Sci, Tucson, AZ 85721 USA.
   Univ Auckland, Dept Comp Sci, Auckland 1, New Zealand.
C3 University of Arizona; University of Auckland
RP Collberg, CS (corresponding author), Univ Arizona, Dept Comp Sci, Tucson, AZ 85721 USA.
EM collberg@cs.arizona.edu; cthombor@cs.auckland.ac.nz; gmt@cs.arizona.edu
RI Thomborson, Clark/A-1055-2009
OI Thomborson, Clark/0000-0002-4147-7898
CR ALBERT D, 1982, IEEE COMPUT, V17, P68
   ANDERSON RJ, 1998, IEEE J SAC, V16
   [Anonymous], 1997, ART COMPUTER PROGRAM
   [Anonymous], 1973, GRAPHICAL ENUMERATIO
   ARBOTT G, 2002, P 5 INT C EL COMM RE
   BACON DF, 1994, ACM COMPUT SURV, V26, P345, DOI 10.1145/197405.197406
   Baker Brenda S., 1998, P USENIX ANN TECHN C
   Bender W., 1996, IBM SYST J, V35, DOI DOI 10.1147/SJ.353.0313
   CHANG H, 2001, LECT NOTES COMPUTER, V2320
   CHOW S, 2001, LNCS, V2200, P144
   COLLBERG C, 1999, C REC POPL 99 26 ACM
   COLLBERG C, 2003, IEEE MAGAZINE SE AUG, V1
   COLLBERG C, 1998, P PRINC PROGR LANG P
   COLLBERG C, 1988, P IEEE INT C COMP LA
   Collberg C., 1997, TAXONOMY OBFUSCATING
   COLLBERG C, 2003, P WORKSH GRAPHS COMP
   *COMP, 2004, FREEPORT EXPR
   Cooperman, 1996, US Patent, Patent No. [5,745,569, 5745569]
   COUSOT P, 2004, P ACM PRINC PROGR LA
   Craver S, 1998, IEEE J SEL AREA COMM, V16, P573, DOI 10.1109/49.668979
   Davidson R.L., 1996, US Patent, Patent No. [5,559,884, 5559884]
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   DEBRAY SK, 2001, P 2001 WORKSH BIN RE
   Ghiya Rakesh., 1996, POPL 96, P1
   Goulden I., 1983, COMBINATORIAL ENUMER
   Halstead M. H., 1977, ELEMENTS SOFTWARE SC
   Harrison Warren A., 1981, ACM SIGPLAN Notices, V16, P63, DOI DOI 10.1145/947825.947829
   HAUSER RC, 1995, INET 95 5 ANN C INT, V1, P199
   Heffner K, 2004, LECT NOTES COMPUT SC, V3225, P428
   HENRY S, 1981, IEEE T SOFTWARE ENG, V7, P510, DOI 10.1109/TSE.1981.231113
   HERZBERG A, 1987, ACM T COMPUT SYST, V5, P371, DOI 10.1145/29868.29872
   HERZBERG A, 1984, P 4 JER C INF TECHN
   HORNE B, 2001, LECT NOTES COMPUTER, V2320
   *INT PLANN RES COO, 2003, 8 ANN BSA GLOB SOFTW
   Kundu S., 1977, SIAM Journal on Computing, V6, DOI 10.1137/0206012
   Madou Matias., 2005, DIGITAL RIGHTS MANAG, P75, DOI DOI 10.1145/1102546.1102560
   Malhotra Y., 1994, Journal of Systems Management, V45, P32
   MAUDE T, 1984, COMMUN ACM, V27, P950, DOI 10.1145/358234.358271
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   MONDEN A, 2000, P 24 COMP SOFTW APPL
   MONDEN A, 1998, P 1998 S CYPT INF SE
   MORI R, 1990, T IEICE, V73, P7
   MUNSON JC, 1993, J SYST SOFTWARE, V20, P217, DOI 10.1016/0164-1212(93)90065-6
   MURATANI H, 2001, IHW 01 P 4 INT WORKS, P303
   Muth R, 2001, SOFTWARE PRACT EXPER, V31, P67, DOI 10.1002/1097-024X(200101)31:1<67::AID-SPE357>3.0.CO;2-A
   MYLES G, 2003, P INT C INF SEC CRYP
   Myrvold W, 2001, INFORM PROCESS LETT, V79, P281, DOI 10.1016/S0020-0190(01)00141-7
   NAGRA J, 2006, THESIS U AUCKLAND AU
   NAGYFARKAS D, 2004, EASTER EGG ARCH
   NYSTROM N, 2004, BLOAT BYTECODE LEVEL
   Oviedo E.I., 1980, Proc. IEEE COMPSAC, Chicago, P146
   PALSBERG J, 2000, P ACSAC 00 16 ANN CO
   PETICOLAS FA, 1998, P 2 WORKSH INF HID P
   PETITCOLAS FAP, 2004, STIRMARK 3 1
   Pieprzyk J, 1999, LECT NOTES COMPUT SC, V1729, P178
   PROEBSTING TA, 1997, P 3 USENIX C OBJ OR
   Qu G, 1998, 1998 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN, P190, DOI 10.1109/ICCAD.1998.742871
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   SAHOO T, 2004, TR0407 U ARIZ DEP CO
   SIMMEL SS, 1994, J INTERACTIVE MULTIM, P81
   Stern JP, 2000, LECT NOTES COMPUT SC, V1768, P368
   Thomborson C., 2004, Proceedings of the second workshop on Aus- tralasian information security, Data Mining and Web Intelligence, and Soft-ware Internationalisation - Volume 32, ACSW Frontiers '04, V32, P27
   Venkatesan R., 2001, 4 INT INF HID WORKSH
   WANG C, 2000, THESIS U VIRGINA
NR 64
TC 26
Z9 35
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 35
DI 10.1145/1286821.1286826
PG 67
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Acar, UA
   Blelloch, GE
   Harper, R
AF Acar, Umut A.
   Blelloch, Guy E.
   Harper, Robert
TI Adaptive functional programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; performance; theory; incremental computation;
   adaptive computation; dynamic algorithms
AB We present techniques for incremental computing by introducing adaptive functional programming. As an adaptive program executes, the underlying system represents the data and control dependences in the execution in the form of a dynamic dependence graph. When the input to the program changes, a change propagation algorithm updates the output and the dynamic dependence graph by propagating changes through the graph and re-executing code where necessary. Adaptive programs adapt their output to any change in the input, small or large.
   We show that adaptivity techniques are practical by giving an efficient implementation as a small ML library. The library consists of three operations for making a program adaptive, plus two operations for making changes to the input and adapting the output to these changes. We give a general bound on the time it takes to adapt the output, and based on this, show that an adaptive Quicksort adapts its output in logarithmic time when its input is extended by one key.
   To show the safety and correctness of the mechanism we give a formal definition of AFL, a call-by-value functional language extended with adaptivity primitives. The modal type system of AFL enforces correct usage of the adaptivity mechanism, which can only be checked at run time in the ML library. Based on the AFL dynamic semantics, we formalize the change-propagation algorithm and prove its correctness.
   Categories and Subject Descriptors: D.1.0 [Programming Techniques]: General; D.1.1 [Programming Techniques]: Applicative (Functional) Programming; D.3.0 [Programming Languages]: General; D.3.1 [Programming Languages]: Formal Definitions and Theory; F.2.0 [Analysis of Algorithms and Problem Complexity]: General; F.3.2 [Logics and Meanings of Programs]: Semantics of Programming Languages.
C1 Toyota Technol Inst, Chicago, IL USA.
   Carnegie Mellon Univ, Pittsburgh, PA USA.
C3 Toyota Technological Institute - Chicago; Carnegie Mellon University
RP Acar, UA (corresponding author), Toyota Technol Inst, Chicago, IL USA.
EM umut@tti-c.org; blelloch@cs.cmu.edu; rwh@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941
CR Abadi M., 1996, P INT C FUNCT PROGR, P83
   ACAR UA, 2005, P ACM SIGPLAN WORKSH
   ACAR UA, 2005, P WORKSH ALG ENG EXP
   ACAR UA, 2004, P ACM SIAM S DISCR A
   Acar Umut A., 2005, THESIS CARNEGIE MELL
   Acar UmutA., 2003, P 30 ANN ACM S PRINC
   [Anonymous], 1963, Studies in Logic and the Foundations of Mathematics, DOI DOI 10.1016/S0049-237X(08)72018-4
   Basch J, 1999, J ALGORITHM, V31, P1, DOI 10.1006/jagm.1998.0988
   Bellman R., 1957, Dynamic programming
   Demers Alan., 1981, P 8 ANN ACM S PRINCI, P105, DOI DOI 10.1145/567532.567544
   Dietz P., 1987, P 19 ANN ACM S THEOR, P365, DOI DOI 10.1145/28395.28434
   DIETZ PF, 1989, LECT NOTES COMPUT SC, V382, P39
   DRISCOLL JR, 1989, J COMPUT SYST SCI, V38, P86, DOI 10.1016/0022-0000(89)90034-2
   DRISCOLL JR, 1994, J ACM, V41, P943, DOI 10.1145/185675.185791
   FIELD J, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P307, DOI 10.1145/91556.91679
   HEYDON A, 1999, 1999001 COMP SYST RE
   LAU YA, 1996, THESIS CORNELL U
   Liu YHA, 1998, ACM T PROGR LANG SYS, V20, P546, DOI 10.1145/291889.291895
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   Miller G.L., 1985, Proceedings of 26th IEEE Symposium on Foundations of Computer Science, P487
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pugh W., 1989, P 16 ANN ACM S PRINC, P315
   Ramalingam G., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P502, DOI 10.1145/158511.158710
   SLEATOR DD, 1983, J COMPUT SYST SCI, V26, P362, DOI 10.1016/0022-0000(83)90006-5
   SUNDARESH RS, 1991, C REC 18 ANN ACM S P, P1
   ThomasW Reps, 1982, S PRINCIPLES PROGRAM, P169, DOI [10.1145/582153.582172, DOI 10.1145/582153.582172]
   YELLIN DM, 1991, ACM T PROGR LANG SYS, V13, P211, DOI 10.1145/103135.103137
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 32
TC 48
Z9 58
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2006
VL 28
IS 6
BP 990
EP 1034
DI 10.1145/1186632.1186634
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 119DD
UT WOS:000242991500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Necula, GC
   Condit, J
   Harren, M
   McPeak, S
   Weimer, W
AF Necula, GC
   Condit, J
   Harren, M
   McPeak, S
   Weimer, W
TI CCured: Type-safe retrofitting of legacy software
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE memory safety; pointer qualifier; subtyping; libraries
ID CHECKING; POINTER
AB This article describes CCured, a program transformation system that adds type safety guarantees to existing C programs. CCured attempts to verify statically that memory errors cannot occur, and it inserts run-time checks where static verification is insufficient.
   CCured extends C's type system by separating pointer types according to their usage, and it uses a surprisingly simple type inference algorithm that is able to infer the appropriate pointer kinds for existing C programs. CCured uses physical subtyping to recognize and verify a large number of type casts at compile time. Additional type casts are verified using run-time type information. CCured uses two instrumentation schemes, one that is optimized for performance and one in which metadata is stored in a separate data structure whose shape mirrors that of the original user data. This latter scheme allows instrumented programs to invoke external functions directly on the program's data without the use of a wrapper function.
   We have used CCured on real-world security-critical network daemons to produce instrumented versions without memory-safety vulnerabilities, and we have found several bugs in these programs. The instrumented code is efficient enough to be used in day-to-day operations.
C1 Univ Calif Berkeley, Dept Elect Engn & Comp Sci, Berkeley, CA 94720 USA.
C3 University of California System; University of California Berkeley
RP Univ Calif Berkeley, Dept Elect Engn & Comp Sci, 783 Soda Hall, Berkeley, CA 94720 USA.
EM necula@cs.berkeley.edu; condit@cs.berkeley.edu; matth@cs.berkeley.edu;
   smcpeak@cs.berkeley.edu; weimer@cs.berkeley.edu
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   [Anonymous], P 26 ACM SIGPLAN SIG
   [Anonymous], PLDI 91
   [Anonymous], 2002, P USENIX ANN TECHN C
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   [Anonymous], 98991999E ISOIEC
   AUSTIN TM, 1994, SIGPLAN NOTICES, V29, P290, DOI 10.1145/773473.178446
   BOEHM HJ, 1988, SOFTWARE PRACT EXPER, V18, P807, DOI 10.1002/spe.4380180902
   CARDELLI L, 1989, 52 SRC DIG EQ CORP S
   CARLISLE MC, 1996, THESIS PRINCETON U P
   *CERT COORD CTR, 2003, CERT ADV CA 2003 12
   Chandra S., 1999, Software Engineering Notes, V24, P66, DOI 10.1145/381788.316183
   CONDIT J, 2003, P ACM SIGPLAN 2003 C, P232
   CRARY K, 1998, P 1998 ACM SIGPLAN I, P301
   DAS M, 2000, P C PROGR LANG DES I
   Duggan D, 1999, ACM T PROGR LANG SYS, V21, P11, DOI 10.1145/314602.314604
   Evans D, 1996, ACM SIGPLAN NOTICES, V31, P44, DOI 10.1145/249069.231389
   HARPER R, 1995, P 22 ACM S PRINC PRO, P130
   HASTINGS R, 1991, PROCEEDINGS OF THE WINTER 1992 USENIX CONFERENCE, P125
   Henglein F., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P205, DOI 10.1145/141471.141542
   Henglein F., 1994, P 21 ACM S PRINC PRO, P213
   HIRZEL M, 2000, THESIS U COLORADO BO
   JAGANNATHAN S, 1995, LNCS, V983, P207
   Jones Richard WM, 1997, AADEBUG, V97, P13
   Kaufer S., 1988, Proceedings of the Summer 1988 USENIX Conference, P161
   Kind A., 1993, LISP and Symbolic Computation, V6, P159, DOI 10.1007/BF01025919
   LAMPSON B, 1983, CSL8315 XER PAL ALT
   Liskov B., 1981, CLU REFERENCE MANUAL
   LOGINOV A, 2001, P FASE 2001 FUND APP
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Patil H, 1997, SOFTWARE PRACT EXPER, V27, P87, DOI 10.1002/(SICI)1097-024X(199701)27:1<87::AID-SPE78>3.0.CO;2-P
   PATL H, 1995, P C AUT ALG DEB, P119
   Remy D., 1997, P POPL 97, P40
   SEWARD J, 2003, VALIGRIND OPEN SOURC
   Shields M., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P289, DOI 10.1145/268946.268970
   Siff M, 1999, LECT NOTES COMPUT SC, V1687, P180, DOI 10.1145/318774.318942
   Smith G, 1998, SCI COMPUT PROGRAM, V32, P49, DOI 10.1016/S0167-6423(97)00030-0
   *SPEC, 1995, STAND PERF EV CORP B
   Steensgaard Bjarne., 1996, POINTS TO ANAL ALMOS, P32
   STEFFEN JL, 1992, SOFTWARE PRACT EXPER, V22, P305, DOI 10.1002/spe.4380220403
   THATTE SR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P367, DOI 10.1145/96709.96747
   Wagner D., 2000, Network and Distributed System Buffer Overow Symposium, P1
   Wright C, 1997, KENYON REV, V19, P1
   2000, PHP3 PHP4 FORMAT STR
NR 44
TC 153
Z9 205
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2005
VL 27
IS 3
BP 477
EP 526
DI 10.1145/1065887.1065892
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 937OF
UT WOS:000229934700005
DA 2024-07-18
ER

PT J
AU Stone, CA
AF Stone, CA
TI Extensible objects without labels
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 16th European Conference on Object Oriented Programming (ECOOP 2002)
CY JUN 10-14, 2002
CL MALAGA, SPAIN
SP IBM, Microsoft Res, SPI, Coritel BPM, Telelogic, Sadiel, Assoc Int Technol Objets, Univ Malaga, Univ Extremandura, Dept Comp Sci
DE languages; extensible objects; object calculi
AB Typed object calculi that permit adding new methods to existing objects must address the problem of name clashes: what happens if a new method is added to an object already having one with the same name but a different type? Most systems statically forbid such clashes by restricting the allowable subtypings. In contrast, by reconsidering the runtime meaning of object extension, the object calculus studied in the author's previous work with Jon Riecke allowed any object to be soundly extended with any method of any name, with unrestricted width subtyping. That language permitted a simple encoding of classes as object-generators. Because of width subtyping, subclasses could be typechecked and compiled with little knowledge of the class hierarchy and without any information about superclasses' private components; this made derived classes more robust to changes in the implementations of base classes. However, the system was not well suited for encoding mixins or by-name subtyping of objects.
   This article addresses those deficiencies by presenting the Calculus of Objects and Indices (COI), a lower-level typed object calculus in which extensible objects are more analogous to tuples than to records. An object is simply a finite sequence of unnamed components referenced by their index in the sequence. Names are then reintroduced by allowing these indices to be first-class values (analogous to pointers to members in C++) that can be bound to variables. Since variables-unlike record labels-freely alpha-vary, difficulties caused by statically undetectable name clashes disappear.
   By combining COI objects with standard type-theoretic mechanisms, one can encode mixins and classes having the by-name subtyping of languages like C++ or Java but with the robustness of the object-generator encodings. Using records, more standard extensible objects with named components can also be encoded.
C1 Harvey Mudd Coll, Dept Comp Sci, Claremont, CA 91101 USA.
C3 Claremont Colleges; Harvey Mudd College
RP Harvey Mudd Coll, Dept Comp Sci, 1250 N Dartmouth Ave, Claremont, CA 91101 USA.
EM stone@cs.hmc.edu
OI Stone, Christopher/0009-0006-5720-3433
CR Abadi M., 1994, Journal of Functional Programming, V4, P249, DOI 10.1017/S0956796800001052
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   BONO V, 1999, 15 C MATH FDN PROGR
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   BRUCE KB, 1997, INCREASING JAVAS EXP
   CARDELLI L, 1989, P 5 C MATH FDN PROGR
   CHAMBERS C, 1992, LECT NOTES COMPUT SC, V615, P33, DOI 10.1007/BFb0053029
   CRARY K, 1998, 1998 ACM INT C FUNCT, P301
   CRARY KF, 1998, THESIS CORNELL U
   DEMICHIEL LG, 1987, LECT NOTES COMPUT SC, V276, P151
   DIGIANANTONIO P, 1998, P OOPSLA, P166
   Fisher K, 2000, LECT NOTES COMPUT SC, V1850, P83
   Fisher K, 1998, THEOR PRACT OBJ SYST, V4, P3, DOI 10.1002/(SICI)1096-9942(1998)4:1<3::AID-TAPO2>3.0.CO;2-W
   Fisher K., 1994, Nordic Journal of Computing, V1, P3
   Fisher K., 1995, LECT NOTES COMPUTER, V965, P42
   FISHER K, 2000, EUR S PROGR, P135
   Gosling J., 2000, The Java Language Specification
   HARPER R, 1995, P 22 ACM S PRINC PRO, P130
   LEAGUE C, 1999, ICFP 99, P183
   Lippman StanleyB., 1996, INSIDE C OBJECT MODE
   LIQUORI L, 1997, LECT NOTES COMPUTER, V1241
   MORRISETT G, 1995, CMUCS95226
   NELSON G, 1991, SYSTEMS PROGRAMMING, V3
   Ohori A, 1995, ACM T PROGR LANG SYS, V17, P844, DOI 10.1145/218570.218572
   Pierce B. C., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P299, DOI 10.1145/158511.158653
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   REPPY J, 1996, P ACM SIGPLAN 96 C P, P171
   RIECKE JC, 1998, 5 INT WORKSH FDN OBJ
   Riecke JG, 2002, INFORM COMPUT, V172, P2, DOI 10.1006/inco.2000.2925
   Stroustrup B., 1997, The C++ Programming Language
   VOUILLON J, 2001, P POPL, P290
   WRIGHT A, 1991, TR91160 RIC U DEP CO
NR 34
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2004
VL 26
IS 5
BP 805
EP 835
DI 10.1145/1018203.1018206
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 853WB
UT WOS:000223858600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Christensen, NH
   Glück, R
AF Christensen, NH
   Glück, R
TI Offline partial evaluation can be as accurate as online partial
   evaluation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; binding-time analysis; constant propagation;
   generalization; metacomputation; offline partial evaluation; online
   partial evaluation; program specialization
ID BINDING-TIME ANALYSIS; COMPUTATION; GENERATION; SPECIALIZATION
AB We show that the accuracy of online partial evaluation, or polyvariant specialization based on constant propagation, can be simulated by offline partial evaluation using a maximally polyvariant binding-time analysis. We point out that, while their accuracy is the same, online partial evaluation offers better opportunities for powerful generalization strategies. Our results are presented using a flowchart language with recursive procedures.
C1 Univ Copenhagen, Dept Comp Sci, DIKU, DK-2100 Copenhagen, Denmark.
   Waseda Univ, Sch Sci & Engn, Inst Software Prod Technol, Tokyo 1698555, Japan.
   JST, PRESTO, Tokyo 1698555, Japan.
C3 University of Copenhagen; Waseda University; Japan Science & Technology
   Agency (JST)
RP Univ Copenhagen, Dept Comp Sci, DIKU, Univ Pk 1, DK-2100 Copenhagen, Denmark.
EM mrnc@diku.dk; glueck@acm.org
RI Gluck, Robert/N-3127-2016
OI Gluck, Robert/0000-0001-6990-3935
CR Andersen L. O., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P47, DOI 10.1145/154630.154636
   ANDERSEN LO, 1994, 9419 DIKU U COP DEP
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Asai K, 1999, LECT NOTES COMPUT SC, V1694, P117
   ASHLEY JM, 1994, ACM T PROGR LANG SYS, V16, P1431, DOI 10.1145/186025.186037
   BECKMAN L, 1976, ARTIF INTELL, V7, P319, DOI 10.1016/0004-3702(76)90011-4
   Bondorf A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P1, DOI 10.1145/141471.141483
   BONDORF A, 1991, SCI COMPUT PROGRAM, V16, P151, DOI 10.1016/0167-6423(91)90002-F
   BONDORF A, 1993, SIMILIX 5 0 MANUAL
   Bulyonkov M. A., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P59, DOI 10.1145/154630.154637
   BULYONKOV MA, 1984, ACTA INFORM, V21, P473, DOI 10.1007/BF00271642
   CHANG CL, 1973, COMPUTER SCI APPL MA, P228
   Christensen NH, 2000, LECT NOTES COMPUT SC, V1755, P80
   CONSEL C, 1991, LECT NOTES COMPUT SC, V523, P496
   Consel C., 1995, Journal of Functional Programming, V5, P461, DOI 10.1017/S0956796800001453
   Consel C., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P66, DOI 10.1145/154630.154638
   CONSEL C, 1996, LECT NOTES COMPUTER, V1110, P54
   Consel Charles., 1991, P S PRINCIPLES PROGR, P14
   ERSHOV AP, 1977, INFORM PROCESS LETT, V6, P38, DOI 10.1016/0020-0190(77)90078-3
   Futamura Y., 1971, Systems, Computers, Controls, V54-C, P721
   FUTAMURA Y, 1988, PARTIAL EVALUATION M, P133
   Glenstrup AJ, 1999, LECT NOTES COMPUT SC, V1706, P108
   GLUCK R, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P183, DOI 10.1109/ICCL.1994.288382
   GLUCK R, 1994, LECT NOTES COMPUTER, V844, P165
   Gluck R., 1993, LECT NOTES COMPUTER, V724, P112
   GLUCK R, 2002, P AS S PART EV SEM B, P9
   GLUCK R, 1996, LECT NOTES COMPUTER, V1110, P137
   GOMARD CK, 1991, STRUCT PROGRAM, V12, P123
   Hatcliff J, 1999, LECT NOTES COMPUT SC, V1706, P20
   HATCLIFF J, 1998, LNCS, V1490, P134
   Hornof L, 2000, THEOR COMPUT SCI, V248, P3, DOI 10.1016/S0304-3975(00)00048-7
   Jones N. D., 1989, LISP and Symbolic Computation, V2, P9, DOI 10.1007/BF01806312
   Jones ND, 2002, LECT NOTES COMPUT SC, V2487, P1, DOI 10.1145/583852.581505
   JONES ND, 1985, LECT NOTES COMPUT SC, V202, P124
   Jones Neil D., 1988, Partial evaluation and mixed computation, P225
   KLEINRUBATSCHER P, 1995, SIGPLAN NOTICES, V30, P61, DOI 10.1145/202176.202184
   Lawall J. L., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P227, DOI 10.1145/182409.182483
   LLOYD JW, 1991, J LOGIC PROGRAM, V11, P217, DOI 10.1016/0743-1066(91)90027-M
   Marlet R, 2000, ACM SIGPLAN NOTICES, V35, P76
   Masuhara H, 2001, LECT NOTES COMPUT SC, V2053, P138
   Meyer U, 1999, SCI COMPUT PROGRAM, V34, P55, DOI 10.1016/S0167-6423(98)00015-X
   MEYER U, 1991, P S PART EV SEM BAS, P94
   Romanenko SA, 1988, PARTIAL EVALUATION M, P445
   Ruf E., 1993, Journal of Functional Programming, V3, P251, DOI 10.1017/S0956796800000745
   RUF E, 1993, CSLTR93563 STANF U C
   RYTZ B, 1992, P WORKSH PART EV SEM, P21
   Schultz UP, 2001, LECT NOTES COMPUT SC, V2053, P173
   Sorensen M. H., 1996, Journal of Functional Programming, V6, P811, DOI 10.1017/S0956796800002008
   SPERBER M, 1996, P 1996 ACM S APPL CO, P408
   SUMII E, 2000, P ACM SIGPLAN WORKSH, P12
   THIEMANN P, 1996, LECT NOTES COMPUTER, V1181, P285
   TURCHIN VF, 1986, ACM T PROGR LANG SYS, V8, P292, DOI 10.1145/5956.5957
   WEISE D, 1991, LECT NOTES COMPUT SC, V523, P165
   [No title captured]
NR 54
TC 11
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2004
VL 26
IS 1
BP 191
EP 220
DI 10.1145/963778.963784
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 768UY
UT WOS:000188554500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Vasconcelos, VT
   Martins, F
   López, HA
   Yoshida, N
AF Vasconcelos, Vasco T.
   Martins, Francisco
   Lopez, Hugo-Andres
   Yoshida, Nobuko
TI A Type Discipline for Message Passing Parallel Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Parallel programs; message passing computation; dependent types;
   termination
ID MODEL-CHECKING; VERIFICATION
AB We present PARTYPES, a type discipline for parallel programs. The model we have in mind comprises a fixed number of processes running in parallel and communicating via collective operations or point-to-point synchronous message exchanges. A type describes a protocol to be followed by each processes in a given program. We present the type theory, a core imperative programming language and its operational semantics, and prove that type checking is decidable (up to decidability of semantic entailment) and that well-typed programs do not deadlock and always terminate. The article is accompanied by a large number of examples drawn from the literature on parallel programming.
C1 [Vasconcelos, Vasco T.] Univ Lisbon, Fac Ciencias, LASIGE, Dept Informat, Lisbon, Portugal.
   [Martins, Francisco] Univ Lisbon, Fac Ciencias, LASIGE, Lisbon, Portugal.
   [Martins, Francisco] Univ Azores, Fac Sci & Technol, Ponta Delgada, Portugal.
   [Lopez, Hugo-Andres] Univ Copenhagen, Copenhagen, Denmark.
   [Lopez, Hugo-Andres] DCR Solut AS, Dept Comp Sci, Copenhagen, Denmark.
   [Yoshida, Nobuko] Imperial Coll London, Dept Comp, London, England.
C3 Universidade de Lisboa; Universidade de Lisboa; Universidade dos Acores;
   University of Copenhagen; Imperial College London
RP Vasconcelos, VT (corresponding author), Univ Lisbon, Fac Ciencias, LASIGE, Dept Informat, Lisbon, Portugal.
EM vmvasconcelos@ciencias.ulisboa.pt; fmartins@acm.org; lopez@di.ku.dk;
   n.yoshida@imperial.ac.uk
RI Martins, Francisco/JOK-2764-2023; López, Hugo A/G-9392-2016;
   Vasconcelos, Vasco T/M-4920-2017; Martins, Francisco/JOK-9378-2023;
   Yoshida, Nobuko/AAL-6082-2020
OI López, Hugo A/0000-0001-5162-7936; Vasconcelos, Vasco
   T/0000-0002-9539-8861; Yoshida, Nobuko/0000-0002-3925-8557
FU FCT through project Advanced Type Systems for Multicore Programming
   [PTDC/EIA-CCO/122547]; LASIGE Research Unit [UID/CEC/00408/2019]; EC
   Cost Action EUTypes [CA15123]; EPSRC [EP/T006544/1, EP/K011715/1,
   EP/K034413/1, EP/L00058X/1, EP/N027833/1, EP/N028201/1, EP/T014709/1,
   EP/V000462/1, EP/X015955/1]; NCSS/EPSRC VeTSS; Innovation Fund Denmark
   [7050-00034A]; European Union [778233]
FX This work was supported by FCT through project Advanced Type Systems for
   Multicore Programming (PTDC/EIA-CCO/122547) and the LASIGE Research Unit
   (UID/CEC/00408/2019), EC Cost Action EUTypes (CA15123), EPSRC (EPSRC
   (EP/T006544/1, EP/K011715/1, EP/K034413/1, EP/L00058X/1, EP/N027833/1,
   EP/N028201/1, EP/T006544/1, EP/T014709/1, EP/V000462/1, and
   EP/X015955/1), NCSS/EPSRC VeTSS, the Innovation Fund Denmark project
   EcoKnow.org (7050-00034A), and the European Union Marie Sklodowska-Curie
   grant agreement BehAPI (778233).
CR [Anonymous], 2003, Introduction to parallel computing
   [Anonymous], 1997, ALGOL -like Languages, DOI DOI 10.1007/978-1-4612-4118-8_4
   [Anonymous], 1999, Using MPI: Portable Parallel Programming with the Message Passing Interface
   Böhm S, 2016, LECT NOTES COMPUT SC, V9995, P102, DOI 10.1007/978-3-319-48989-6_7
   Botbol V, 2017, LECT NOTES COMPUT SC, V10145, P73, DOI 10.1007/978-3-319-52234-0_5
   Bridges D, 2009, PROCEEDINGS OF THE 2009 INTERNATIONAL SYMPOSIUM ON COLLABORATIVE TECHNOLOGIES AND SYSTEMS, P571, DOI 10.1109/CTS.2009.5067529
   Caires L, 2017, LECT NOTES COMPUT SC, V10201, P229, DOI 10.1007/978-3-662-54434-1_9
   Carbone M, 2008, LECT NOTES COMPUT SC, V5201, P402, DOI 10.1007/978-3-540-85361-9_32
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Carbone M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220367
   Castro D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290342
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   DeFreez D, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P187, DOI 10.1145/3332466.3374515
   Deniélou PM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:6)2012
   Droste Alexander, 2015, 2 WORKSHOP LLVM COMP, P1, DOI DOI 10.1145/2833157.2833159
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Ferreira F, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P161, DOI 10.1145/2643135.2643153
   Forejt V, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3095075
   Forejt V, 2014, LECT NOTES COMPUT SC, V8442, P263, DOI 10.1007/978-3-319-06410-9_19
   Foster I, 1995, DESIGNING BUILDING P
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Fu XJ, 2015, IEEE HI ASS SYS ENGR, P181, DOI 10.1109/HASE.2015.35
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Giallorenzo Saverio, 2021, LEIBNIZ INT P INFORM, V194, DOI [10.4230/LIPIcs.ECOOP.2021.22, DOI 10.4230/LIPICS.ECOOP.2021.22]
   Gopalakrishnan G, 2011, COMMUN ACM, V54, P82, DOI 10.1145/2043174.2043194
   Gordon AD, 2010, NATO SCI PEAC SECUR, V25, P73, DOI 10.3233/978-1-60750-100-8-73
   Hansen Per Brinch, 1991, 120 SYR U COLL ENG C
   Hilbrich T, 2012, INT CONF HIGH PERFOR
   Hilbrich T, 2010, TOOLS FOR HIGH PERFORMANCE COMPUTING 2009, P53, DOI 10.1007/978-3-642-11261-4_5
   Hoare CAR., 1985, Communicating Sequential Processes
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K., 2012, LNCS, V7490, P291, DOI DOI 10.1007/978-3-642-33518-1_
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Honda K, 2014, LECT NOTES COMPUT SC, V8665, P105, DOI 10.1007/978-3-662-44471-9_5
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Khanna D, 2018, LECT NOTES COMPUT SC, V10951, P466, DOI 10.1007/978-3-319-95582-7_28
   Kouzapas D, 2014, ELECTRON PROC THEOR, P25, DOI 10.4204/EPTCS.155.4
   Krammer B, 2008, TOOLS FOR HIGH PERFORMANCE COMPUTING, P61, DOI 10.1007/978-3-540-68564-7_5
   Lemos F., 2014, THESIS U LISBON
   López HA, 2016, LECT NOTES COMPUT SC, V9688, P195, DOI 10.1007/978-3-319-39570-8_13
   López HA, 2015, ACM SIGPLAN NOTICES, V50, P280, DOI [10.1145/2858965.2814302, 10.1145/2814270.2814302]
   Lopez Hugo A., 2017, P S APPL COMPUTING S, P437
   Marques ERB, 2013, ELECTRON PROC THEOR, P103, DOI 10.4204/EPTCS.137.9
   Martin-Lof P., 1984, Intuitionistic type theory
   Martins F, 2017, ELECTRON P THEOR COM, P28, DOI 10.4204/EPTCS.246.6
   Message Passing Interface Forum, 2021, MPI: A message-passing interface standard version 4.0
   Message Passing Interface Forum, 2021, MPI MESSAGE PASSING
   Moskal M, 2011, LECT NOTES COMPUT SC, V6617, P56, DOI 10.1007/978-3-642-20398-5_5
   Mostrous D, 2014, LECT NOTES COMPUT SC, V8459, P115
   Nagarajan V., 2020, Synthesis Lectures on Computer Architecture, DOI [DOI 10.2200/S00962ED2V01Y201910CAC049, 10.2200/S00962ED2V01Y201910CAC049]
   Ng N, 2017, RIV PUBL SER AUTOMAT, P329
   Ng N, 2015, SERV ORIENTED COMPUT, V9, P269, DOI 10.1007/s11761-014-0172-8
   Ng N, 2015, LECT NOTES COMPUT SC, V9031, P212, DOI 10.1007/978-3-662-46663-6_11
   Ng N, 2012, LECT NOTES COMPUT SC, V7304, P202, DOI 10.1007/978-3-642-30561-0_15
   Pacheco PS., 1997, PARALLEL PROGRAMMING
   Pervez S, 2007, LECT NOTES COMPUT SC, V4757, P344
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rauber T, 2010, PARALLEL PROGRAMMING: FOR MULTICORE AND CLUSTER SYSTEMS, P1, DOI 10.1007/978-3-642-04818-0
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Santos C, 2015, ELECTRON P THEOR COM, P128, DOI 10.4204/EPTCS.189.11
   Schulz M, 2006, PROC INT CONF PARAL, P193, DOI 10.1109/ICPP.2006.6
   Scribble, 2015, SCRIBBL HOM
   Sheard T, 2008, LECT NOTES COMPUT SC, V5161, P158, DOI 10.1007/978-3-540-88059-2_5
   Siegel SF, 2008, LECT NOTES COMPUT SC, V5205, P274, DOI 10.1007/978-3-540-87475-1_37
   Siegel SF, 2015, PROCEEDINGS OF SC15: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/2807591.2807635
   Siegel SF, 2011, MATH COMPUT SCI, V5, P427, DOI 10.1007/s11786-011-0101-6
   Siegel SF, 2012, LECT NOTES COMPUT SC, V7148, P412, DOI 10.1007/978-3-642-27940-9_27
   Siegel SF, 2011, LECT NOTES COMPUT SC, V6538, P2, DOI 10.1007/978-3-642-18275-4_2
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Toninho B, 2018, LECT NOTES COMPUT SC, V10803, P128, DOI 10.1007/978-3-319-89366-2_7
   Toninho B, 2017, J LOG ALGEBR METHODS, V90, P61, DOI 10.1016/j.jlamp.2016.11.005
   Vazou N., 2016, Liquid Haskell: Haskell as a Theorem Prover
   Vo Anh., 2010, P 2010 ACMIEEE INT C, P1
   W3C, 2004, W3C WS CDL
   Weisenburger P, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3397495
   Xi HW, 2000, IEEE S LOG, P375
   Yoshida N., 2014, Trustworthy Global Computing. Ed. by, V8358, P22, DOI [10.1007/978-3-319-05119-2_3, DOI 10.1007/978-3-319-05119-2, 10.1007/978-3-319-05119-2]
   Yu HB, 2018, PROC IEEE ACM INT C, P527, DOI 10.1145/3183440.3190336
   Zhou FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428216
NR 84
TC 2
Z9 2
U1 1
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2022
VL 44
IS 4
AR 26
DI 10.1145/3552519
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7S4NU
UT WOS:000910732700006
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Abate, C
   Blanco, R
   Ciobâca, S
   Durier, A
   Garg, D
   Hritcu, C
   Patrignani, M
   Tanter, É
   Thibault, J
AF Abate, Carmine
   Blanco, Roberto
   Ciobaca, Stefan
   Durier, Adrien
   Garg, Deepak
   Hritcu, Catalin
   Patrignani, Marco
   Tanter, Eric
   Thibault, Jeremy
TI An Extended Account of Trace-relating Compiler Correctness and Secure
   Compilation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Trace properties; hyperproperties; property-preserving compilation;
   compiler correctness; secure compilation; Galois connection; formal
   languages; programming languages
ID VERIFIED COMPILATION; SEMANTICS; VERIFICATION
AB Compiler correctness, in its simplest form, is defined as the inclusion of the set of traces of the compiled program in the set of traces of the original program. This is equivalent to the preservation of all trace properties. Here, traces collect, for instance, the externally observable events of each execution. However, this definition requires the set of traces of the source and target languages to be the same, which is not the case when the languages are far apart or when observations are fine-grained. To overcome this issue, we study a generalized compiler correctness definition, which uses source and target traces drawn from potentially different sets and connected by an arbitrary relation. We set out to understand what guarantees this generalized compiler correctness definition gives us when instantiated with a non-trivial relation on traces. When this trace relation is not equality, it is no longer possible to preserve the trace properties of the source program unchanged. Instead, we provide a generic characterization of the target trace property ensured by correctly compiling a program that satisfies a given source property, and dually, of the source trace property one is required to show to obtain a certain target property for the compiled code. We show that this view on compiler correctness can naturally account for undefined behavior, resource exhaustion, different source and target values, side channels, and various abstraction mismatches. Finally, we show that the same generalization also applies to many definitions of secure compilation, which characterize the protection of a compiled program linked against adversarial code.
C1 [Abate, Carmine; Blanco, Roberto; Durier, Adrien; Hritcu, Catalin; Thibault, Jeremy] MPI SP, Univ Str 140, Bochum, Germany.
   [Ciobaca, Stefan] Alexandru Ioan Cuza Univ, Dept Comp Sci, Bulevardul CarolI 11, Iasi 700506, Romania.
   [Garg, Deepak] Max Planck Inst Software Syst, Saarland Informat Campus, Saarbrucken, Germany.
   [Patrignani, Marco] 343 Serra Mall, Stanford, CA USA.
   [Patrignani, Marco] CISPA Helmholz Ctr Informat Secur, Saarland Informat Campus, Saarbrucken, Germany.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
C3 Alexandru Ioan Cuza University; Max Planck Society; Universidad de Chile
RP Abate, C (corresponding author), MPI SP, Univ Str 140, Bochum, Germany.
EM carmine.abate@mpi-sp.org; roberto.blanco@mpi-sp.org;
   stefan.ciobaca@info.uaic.ro; adrien.durier@mpi-sp.org; dg@mpi-sws.org;
   catalin.hritcu@gmail.com; mp@cs.stanford.edu; etanter@dcc.uchile.cl;
   jeremy.thibault@mpi-sp.org
RI Hritcu, Catalin/D-5964-2012
OI Patrignani, Marco/0000-0003-3411-9678
FU European Research Council under ERC Starting Grant SECOMP [715753];
   German Federal Ministry of Education and Research (BMBF) [FKZ:
   13N1S0762]; DARPA grant SSITH/HOPE [FA8650-15-C-7558]; Office of Naval
   Research [N00014-18-1-2620]; UAIC [07/2018]
FX This work was in part supported by the European Research Council under
   ERC Starting Grant SECOMP (715753), by the German Federal Ministry of
   Education and Research (BMBF) through funding for the CISPA-Stanford
   Center for Cybersecurity (FKZ: 13N1S0762), by DARPA grant SSITH/HOPE
   (FA8650-15-C-7558), by the Office of Naval Research for support through
   grant N00014-18-1-2620, Accountable Protocol Customization, and by UAIC
   internal grant 07/2018.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abate C, 2020, LECT NOTES COMPUT SC, V12075, P1, DOI 10.1007/978-3-030-44914-8_1
   Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Ahmed Amal., 2018, DAGSTUHL REPORTS, V8, P1, DOI DOI 10.4230/DAGREP.8.5.1
   Anand Abhishek, 2017, P COQPL WORKSH
   [Anonymous], 2014, Heartbleed Bug
   [Anonymous], 1995, J COMPUT SECUR, DOI [DOI 10.3233/JCS-1994/1995-3103, 10.3233/JCS-1994/1995-3103]
   [Anonymous], 2017, FORMAL VERIFICATION
   Backhouse K, 2004, SCI COMPUT PROGRAM, V51, P153, DOI 10.1016/j.scico.2003.06.002
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Barthe G, 2018, P IEEE COMPUT SECUR, P328, DOI 10.1109/CSF.2018.00031
   Beringer L, 2014, LECT NOTES COMPUT SC, V8410, P107
   Besson F, 2019, J AUTOM REASONING, V62, P433, DOI 10.1007/s10817-017-9439-z
   Boldo S, 2015, J AUTOM REASONING, V54, P135, DOI 10.1007/s10817-014-9317-x
   Bowman William J., 2015, P ACM SIGPLAN INT C
   Busi Matteo, 2019, ABS190105082 CORR
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Cimpanu C, 2019, Microsoft: 70 percent of all security bugs are memory safety issues
   Clark D, 2009, LECT NOTES COMPUT SC, V5491, P50
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Cousot P, 2002, THEOR COMPUT SCI, V277, P47, DOI 10.1016/S0304-3975(00)00313-3
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   D'Silva V, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P73, DOI 10.1109/SPW.2015.33
   Devriese Dominique, 2016, P 43 ANN ACM SIGPLAN
   ENGELFRIET J, 1985, THEOR COMPUT SCI, V36, P21, DOI 10.1016/0304-3975(85)90028-3
   GARDINER PHB, 1994, SCI COMPUT PROGRAM, V22, P21, DOI 10.1016/0167-6423(94)90006-X
   Giacobazzi R, 2018, ACM T PRIV SECUR, V21, DOI 10.1145/3175660
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Haller Istvan, 2016, P ACM SIGSAC C COMP, P517, DOI DOI 10.1145/2976749.2978405
   Hritcu Catalin, 2019, SECURE COMPILATION
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Jeffrey A, 2005, LECT NOTES COMPUT SC, V3444, P423
   Juglaret Y, 2016, P IEEE CSFW, P45, DOI 10.1109/CSF.2016.11
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   LAMPORT L, 1984, DISTRIBUTED SYSTEMS, P203, DOI DOI 10.1007/3-540-15216-4_15
   Lattner  Chris, 2011, WHAT EVERY C PROGRAM
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lockwood Morris F., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P144
   Mastroeni I, 2018, LECT NOTES COMPUT SC, V11002, P263, DOI 10.1007/978-3-319-99725-4_17
   Matthews J, 2007, ACM SIGPLAN NOTICES, V42, P3, DOI 10.1145/1190215.1190220
   McCarthy John., 1967, P S APPL MATH VOLUME, V19, P33
   MELTON A, 1986, LECT NOTES COMPUT SC, V240, P299
   Milner R., 1972, Machine intelligence 7, P51
   Milner R, 1982, CALCULUS COMMUNICATI
   Mullen E, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI [10.1145/2980983.2908109, 10.1145/2908080.2908109]
   Murray T, 2016, P IEEE CSFW, P417, DOI 10.1109/CSF.2016.36
   Namjoshi KS, 2020, LECT NOTES COMPUT SC, V11990, P1, DOI 10.1007/978-3-030-39322-9_1
   Naumann David A., 2019, Unifying Theories of Programming. 7th International Symposium, UTP 2019. Dedicated to Tony Hoare on the Occasion of His 85th Birthday. Proceedings. Lecture Notes in Computer Science (LNCS 11885), P39, DOI 10.1007/978-3-030-31038-7_3
   Naumann D. A., 1998, Mathematical Structures in Computer Science, V8, P351, DOI 10.1017/S0960129598002552
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   New Max, 2016, P ACM SIGPLAN INT C
   Pasqua Michele, 2017, JOINT P 18 IT C THEO, V1949, P150
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2017, P IEEE CSFW, P392, DOI 10.1109/CSF.2017.13
   Patrignani M, 2015, COMPUT LANG SYST STR, V42, P22, DOI 10.1016/j.cl.2015.03.002
   Patrignani Marco, 2020, ARXIVCSSE200111334
   Patrignani Marco, 2015, THESIS KU LEUVEN LEU
   Patrignani Marco, 2019, P 28 EUR S PROGR PRO
   Patterson D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341689
   Perconti JT, 2014, LECT NOTES COMPUT SC, V8410, P128
   Ramananandro T, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P3, DOI 10.1145/2676724.2693167
   Regehr John, 2010, GUIDE UNDEFINED BEHA
   Sabelfeld A, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P255, DOI 10.1109/CSFW.2005.15
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Scherer G, 2018, LECT NOTES COMPUT SC, V10803, P146, DOI 10.1007/978-3-319-89366-2_8
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sison Robert, 2019, SCHLOSS DAGSTUHL LEI, V141, DOI 27:1-27:19
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Tan YK, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000229
   WANG X., 2012, P ASIA PACIFIC WORKS, P9, DOI DOI 10.1145/2349896.2349905
   Wang X, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P260, DOI 10.1145/2517349.2522728
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zakinthinos A, 1997, P IEEE S SECUR PRIV, P94, DOI 10.1109/SECPRI.1997.601322
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
NR 82
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2021
VL 43
IS 4
AR 14
DI 10.1145/3460860
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW8TN
UT WOS:000753685700002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Xie, NN
   Bi, X
   Oliveira, BCDS
   Schrijvers, T
AF Xie, Ningning
   Bi, Xuan
   Oliveira, Bruno C. D. S.
   Schrijvers, Tom
TI Consistent Subtyping for All
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 27th European Symposium on Programming (ESOP)
CY APR 16-19, 2018
CL Thessaloniki, GREECE
DE Gradual typing; implicit polymorphism; consistent subtyping; dynamic
   gradual guarantee
AB Consistent subtyping is employed in some gradual type systems to validate type conversions. The original definition by Siek and Taha serves as a guideline for designing gradual type systems with subtyping. Polymorphic types a la System F also induce a subtyping relation that relates polymorphic types to their instantiations. However, Siek and Taha's definition is not adequate for polymorphic subtyping. The first goal of this article is to propose a generalization of consistent subtyping that is adequate for polymorphic subtyping and subsumes the original definition by Sick and Taha. The new definition of consistent subtyping provides novel insights with respect to previous polymorphic gradual type systems, which did not employ consistent subtyping. The second goal of this article is to present a gradually typed calculus for implicit (higher-rank) polymorphism that uses our new notion of consistent subtyping. We develop both declarative and (bidirectional) algorithmic versions for the type system. The algorithmic version employs techniques developed by Dunfield and Krish-naswami for higher-rank polymorphism to deal with instantiation. We prove that the new calculus satisfies all static aspects of the refined criteria for gradual typing. We also study an extension of the type system with static and gradual type parameters, in an attempt to support a variant of the dynamic criterion for gradual typing. Assuming a coherence conjecture for the extended calculus, we show that the dynamic gradual guarantee of our source language can be reduced to that of lambda B, which, at the time of writing, is still an open question. Most of the metatheory of this article, except some marinal proofs for the algorithmic type system and extensions, has been mechanically formalized using the Coq proof assistant.
C1 [Xie, Ningning; Bi, Xuan] Univ Hong Kong, Room 430,Chow Yei Ching Bldg, Hong Kong, Peoples R China.
   [Oliveira, Bruno C. D. S.] Univ Hong Kong, Room 420,Chow Yei Ching Bldg, Hong Kong, Peoples R China.
   [Schrijvers, Tom] Katholieke Univ Leuven, Celestijnenlaan 200A, Leuven, Belgium.
C3 University of Hong Kong; University of Hong Kong; KU Leuven
RP Xie, NN (corresponding author), Univ Hong Kong, Room 430,Chow Yei Ching Bldg, Hong Kong, Peoples R China.
EM nnxie@cs.hku.hk; xbi@cs.hku.hk; bruno@cs.hku.hk;
   tom.schrijvers@cs.kuleuven.be
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013; Schrijvers,
   Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
FU Hong Kong Research Grant Council [17210617, 17258816]; Research
   Foundation-Flanders
FX This work has been sponsored by the Hong Kong Research Grant Council
   Projects No. 17210617 and No. 17258816, and by the Research
   Foundation-Flanders.
CR Abadi Martin, 1995, J FUNCT PROGRAM, V5, P111
   Ahmed A., 2017, P 22 INT C FUNCT PRO
   Ahmed Amal, 2011, P 38 S PRINC PROGR L
   Bierman Gavin, 2014, P 28 EUR C OBJ OR PR
   Bierman Gavin, 2010, P EUR C OBJ OR PROGR
   Bonnaire-Sergeant A, 2016, LECT NOTES COMPUT SC, V9632, P68, DOI 10.1007/978-3-662-49498-1_4
   Cardelli Luca, 1993, 97 DIG EQ CORP SYST
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Church Alonzo., 1941, The Calculi of Lambda-conversion. Annals of mathematics studies
   Cimini Matteo, 2017, P 44 S PRINC PROGR L
   Cimini Matteo, 2016, P 43 S PRINC PROGR L
   Curry H.B., 1958, Combinatory logic, V1
   Damas Luis, 1982, P ACM S PRINC PROGR, P6
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Devriese D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158126
   Dunfield Joshua, 2013, P INT C FUNCT PROGR
   Garcia Ronald, 2015, P 42 S PRINC PROGR L
   Garcia Ronald, 2016, P 43 S PRINC PROGR L
   Gronski Jessica, 2006, P SCHEM FUNCT PROGR
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Igarashi Yuu, 2017, P 22 INT C FUNCT PRO
   Jafery Khurram A., 2017, P 44 S PRINC PROGR L, P14
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones Simon Peyton, 1997, P HASK WORKSH, V1997
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Le Botlan D, 2009, INFORM COMPUT, V207, P726, DOI 10.1016/j.ic.2008.12.006
   Le Botlan Didier, 2003, P INT C FUNCT PROGR, P12
   Leijen Daan, 2009, P ACM S PRINC PROGR, P12
   Matthews J, 2008, LECT NOTES COMPUT SC, V4960, P16
   McBride C, 2002, J FUNCT PROGRAM, V12, P375, DOI 10.1017/S0956796802004355
   Mitchell John C., 1990, LOGICAL FDN FUNCTION
   Morris J., 1969, THESIS
   Morris J. H.  Jr., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P120
   Neis G., 2009, ICFP 09, P135, DOI [10.1145/1596550.1596572, DOI 10.1145/1596550.1596572]
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Odersky Martin, 1996, P 23 S PRINC PROGR L
   PARIGOT M, 1992, THEOR COMPUT SCI, V94, P335, DOI 10.1016/0304-3975(92)90042-E
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Remy Didier, 2008, P INT C FUNCT PROGR, P12
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds John C., 1991, P INT C THEOR ASP CO
   Schwerter Felipe Banados, 2014, P 19 INT C FUNCT PRO
   Siek J.G., 2016, KEY BLAME GRADUAL TY
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy G., 2008, P S DYN LANG
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Siek Jeremy G., 2006, P SCHEM FUNCT PROGR, P81
   Siek Jeremy G., 2007, P EUR C OBJ OR PROGR
   Verlaguet Julien, 2013, P COMMERCIAL USERS F
   Vitousek Michael M., 2014, P 10 S DYN LANG
   Vytiniotis Dimitrios, 2008, P INT C FUNCT PROGR, P12
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wells JB, 1999, ANN PURE APPL LOGIC, V98, P111, DOI 10.1016/S0168-0072(98)00047-5
NR 54
TC 3
Z9 3
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2020
VL 42
IS 1
SI SI
AR 2
DI 10.1145/3310339
PG 79
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KJ1TF
UT WOS:000511839200002
DA 2024-07-18
ER

PT J
AU Thakur, M
   Nandivada, VK
AF Thakur, Manas
   Nandivada, V. Krishna
TI PYE: A Framework for Precise-Yet-Efficient Just-In-Time Analyses for
   Java Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Java program analysis; precise and efficient program analysis
ID POINTS-TO ANALYSIS
AB Languages like Java and C# follow a two-step process of compilation: static compilation and just-in-time (JIT) compilation. As the time spent in JIT compilation gets added to the execution-time of the application, JIT compilers typically sacrifice the precision of program analyses for efficiency. The alternative of performing the analysis for the whole program statically ignores the analysis of libraries (available only at runtime), and thereby generates imprecise results. To address these issues, in this article, we propose a two-step (static+JIT) analysis framework called precise-yet-efficient (PYE) that helps generate precise analysis-results at runtime at a very low cost.
   PYE achieves the twin objectives of precision and performance during JIT compilation by using a two-pronged approach: (i) It performs expensive analyses during static compilation, while accounting for the unavailability of the runtime libraries by generating partial results, in terms of conditional values, for the input application. (ii) During JIT compilation, PYE resolves the conditions associated with these values, using the pre-computed conditional values for the libraries, to generate the final results. We have implemented the static and the runtime components of PYE in the Soot optimization framework and the OpenJDK HotSpot Server Compiler (C2), respectively. We demonstrate the usability of PYE by instantiating it to perform two context-, flow-, and field-sensitive heap-based analyses: (i) points-to analysis for null-dereference-check elimination; and (ii) escape analysis for synchronization elimination. We evaluate these instantiations against their corresponding state-of-the-art implementations in C2 over a wide range of benchmarks. The extensive evaluation results show that our strategy works quite well and fulfills both the promises it makes: enhanced precision while maintaining efficiency during JIT compilation.
C1 [Thakur, Manas; Nandivada, V. Krishna] IIT Madras, Dept CSE, Chennai, Tamil Nadu, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Madras
RP Thakur, M (corresponding author), IIT Madras, Dept CSE, Chennai, Tamil Nadu, India.
EM manas@cse.iitm.ac.in; nvk@iitm.ac.in
RI Thakur, Manas/GPC-7745-2022
OI Thakur, Manas/0000-0002-0740-9701
CR Ali, 2014, THESIS
   Alpern B, 2005, IBM SYST J, V44, P399, DOI 10.1147/sj.442.0399
   Andersen L. O., 1994, Technical Report
   [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   Arzt S, 2016, PROC INT CONF SOFTW, P725, DOI 10.1145/2884781.2884816
   Ben Hardekopf, 2007, P 2007 ACM SIGPLAN C, P290
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blanchet B, 2003, ACM T PROGR LANG SYS, V25, P713, DOI 10.1145/945885.945886
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bogda J, 1999, ACM SIGPLAN NOTICES, V34, P35, DOI 10.1145/320385.320388
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Chambers C, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/509799.503045
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Choi JD, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/320385.320386
   COOPER KD, 1986, SIGPLAN NOTICES, V21, P58, DOI 10.1145/13310.13317
   Cousot P, 2002, LECT NOTES COMPUT SC, V2304, P159
   Daly C., 2001, Proceedings of the 2001 joint ACM-ISCOPE conference on Java Grande, P106, DOI [DOI 10.1145/376656.376826, 10.1145/376656, DOI 10.1145/376656]
   Dietrich J, 2015, ACM SIGPLAN NOTICES, V50, P535, DOI [10.1145/2858965.2814307, 10.1145/2814270.2814307]
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Graal, 2020, OPENJDK GRAAL
   Guyer SZ, 2006, ACM SIGPLAN NOTICES, V41, P364, DOI 10.1145/1133981.1134024
   Khedker UP, 2008, LECT NOTES COMPUT SC, V4959, P213
   KOTZMANN T, 2005, P 1 ACM USENIX INT C, P111, DOI DOI 10.1145/1064979.1064996
   LEE K, 2006, P 15 INT C PAR ARCH, P53
   Loginov Alexey., 2008, ISSTA, P213, DOI DOI 10.1145/1390630.1390657
   Madhavan Ravichandhran, 2015, Found. Trends Program. Lang., V1, P269
   Muchnick S., 1997, ADV COMPILER DESIGN
   Nanda MG, 2009, PROC INT CONF SOFTW, P133, DOI 10.1109/ICSE.2009.5070515
   Naumovich G, 1999, LECT NOTES COMPUT SC, V1687, P338, DOI 10.1145/318774.319252
   Nystrom Erik M., 2004, Proceedings of the 2004 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis For Software Tools and Engineering, PASTE'04, P43
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Philipose M, 2002, ACM SIGPLAN NOTICES, V37, P113, DOI 10.1145/565816.503284
   Ruf E, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/358438.349327
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Salcianu A, 2001, ACM SIGPLAN NOTICES, V36, P12, DOI 10.1145/568014.379553
   Serrano M, 2000, ACM SIGPLAN NOTICES, V35, P66, DOI 10.1145/354222.353176
   Sharir M., 1981, PROGRAM FLOW ANAL TH
   Sharma Shamik D., 1998, TECHNICAL REPORT
   SPECjbb, 2005, SPEC JBB2005
   SPECjvm, 2008, SPEC JVM2008
   Sreedhar VC, 2000, ACM SIGPLAN NOTICES, V35, P196, DOI 10.1145/358438.349326
   Stadler Lukas, 2014, P ANN IEEE ACM INT S, P165, DOI DOI 10.1145/2544137.2544157
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Stinson D. R., 2018, Cryptography Theory and Practice
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Thakur M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P135, DOI 10.1145/3302516.3307359
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Vivien F, 2001, ACM SIGPLAN NOTICES, V36, P35, DOI 10.1145/381694.378804
   WALA, 2018, TJ WATS LIB AN
   Whaley J, 1999, ACM SIGPLAN NOTICES, V34, P187, DOI 10.1145/320385.320400
NR 51
TC 6
Z9 6
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2019
VL 41
IS 3
AR 16
DI 10.1145/3337794
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JU2BC
UT WOS:000501479500003
DA 2024-07-18
ER

PT J
AU Austin, TH
   Schmitz, T
   Flanagan, C
AF Austin, Thomas H.
   Schmitz, Tommy
   Flanagan, Cormac
TI Multiple Facets for Dynamic Information Flow with Exceptions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Security; Information flow control; dynamic analysis;
   JavaScript; web security
AB JavaScript is the source of many security problems, including cross-site scripting attacks and malicious advertising code. Central to these problems is the fact that code from untrusted sources runs with full privileges. Information flow controls help prevent violations of data confidentiality and integrity.
   This article explores faceted values, a mechanism for providing information flow security in a dynamic manner that avoids the stuck executions of some prior approaches, such as the no-sensitive-upgrade technique. Faceted values simultaneously simulate multiple executions for different security levels to guarantee termination-insensitive noninterference. We also explore the interaction of faceted values with exceptions, declassification, and clearance.
C1 [Austin, Thomas H.] San Jose State Univ, Comp Sci Dept, One Washington Sq, San Jose, CA 95192 USA.
   [Schmitz, Tommy; Flanagan, Cormac] Univ Calif Santa Cruz, Comp Sci Dept, 1156 High St MS SOE3, Santa Cruz, CA 95064 USA.
C3 California State University System; San Jose State University;
   University of California System; University of California Santa Cruz
RP Austin, TH (corresponding author), San Jose State Univ, Comp Sci Dept, One Washington Sq, San Jose, CA 95192 USA.
OI Austin, Thomas/0000-0003-2428-0687
FU NSF grant [CNS-0905650]
FX This work was supported by NSF grant CNS-0905650.
CR [Anonymous], 2002, THESIS
   Askarov A, 2010, LECT NOTES COMPUT SC, V6012, P64, DOI 10.1007/978-3-642-11957-6_5
   Askarov A, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P43, DOI 10.1109/CSF.2009.22
   Askarov A, 2008, LECT NOTES COMPUT SC, V5283, P333
   Askarov Aslan., 2009, Proceedings of the ACM SIGPLAN Fourth Workshop on Programming Languages and Analysis for Security, PLAS '09, P45
   Austin T. H., 2009, P WORKSH PROGR LANG
   Austin T. H., 2013, ACM PLAS
   Austin TH, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P165
   Banerjee A, 2002, P IEEE CSFW, P253
   Bichhawat Abhishek, 2014, P WORKSH PROGR LANG
   Birgisson Arnar, 2011, P ACM SIGPLAN 4 WORK
   Bohannon A, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P79
   Capizzi R, 2008, ANN COMPUT SECURITY, P322, DOI 10.1109/ACSAC.2008.50
   Chong Stephen., 2004, CCS 04 P 11 ACM C CO, P198
   Chugh Ravi, 2009, P C PROGR LANG DES I
   De Groef W., 2012, P 2012 ACM C COMP CO, P748
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Devriese D, 2010, P IEEE S SECUR PRIV, P109, DOI 10.1109/SP.2010.15
   Dhawan Mohan, 2009, P ANN COMP SEC APPL
   Eich Brendan, 2004, NARCISSUS JS IMPLEME
   FENTON JS, 1974, COMPUT J, V17, P143, DOI 10.1093/comjnl/17.2.143
   Field John, 2012, P 39 ACM SIGPLAN SIG
   Gampe Andreas, 2011, P INT WORKSH FDN OBJ
   Hammer C, 2009, INT J INF SECUR, V8, P399, DOI 10.1007/s10207-009-0086-1
   Hedin D., 2012, P COMP SEC FDN S
   Hedin D, 2015, 2015 IEEE 28TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM CSF 2015, P351, DOI 10.1109/CSF.2015.31
   Heintze N., 1998, P S PRINC PROGR LANG
   Hritcu C, 2013, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2013.10
   Hunt S, 2006, ACM SIGPLAN NOTICES, V41, P79, DOI 10.1145/1111320.1111045
   Jang D, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P270, DOI 10.1145/1866307.1866339
   Just S., 2011, P ACM SIGPLAN INT WO, P9
   Kashyap Vineeth, 2011, P IEEE SEC PRIV
   Kerschbaumer Christoph, 2013, Trust and Trustworthy Computing. 6th International Conference, TRUST 2013. Proceedings: LNCS 7904, P187, DOI 10.1007/978-3-642-38908-5_14
   Kerschbaumer Christoph, 2013, INFORM FLOW TR UNPUB
   King D, 2008, LECT NOTES COMPUT SC, V5352, P56, DOI 10.1007/978-3-540-89862-7_4
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kolbitsch C., 2011, MSRTR201194
   Le Guernic Gurvan, 2006, P AS COMP SCI C SEC
   Moore Scott, 2012, COMPUTER SECURITY FD, P881
   MYERS A, 1999, P S PRINC PROGR LANG
   Myers AC, 2004, P IEEE CSFW, P172, DOI 10.1109/CSFW.2004.1310740
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Rafnsson Willard, 2011, P ACM SIGPLAN 4 WORK
   Rajani V, 2015, 2015 IEEE 28TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM CSF 2015, P366, DOI 10.1109/CSF.2015.32
   Rinard M, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P303
   RUSSO A, 2009, P IEEE COMP SEC FDN
   Russo A., 2010, P IEEE COMP SEC FDN
   Russo A, 2009, LECT NOTES COMPUT SC, V5789, P86, DOI 10.1007/978-3-642-04444-1_6
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Shroff Paritosh, 2007, P COMP SEC FDN S
   Stefan D, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P95
   Urban C., 2011, J COMPUTER SECURITY, V12, P2, DOI DOI 10.3233/JCS-1996-42-304
   Vaughan Jeffrey, 2011, P IEEE SEC PRIV
   Vogt Philipp, 2007, CROSS SITE SCRIPTING
   Webkit. org, 2011, SUNSPIDER JAVASCRIPT
   Yang J, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P85
   Yip A, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P291
   Zanarini Dante, 2013, P COMP SEC FDN S
   Zaphod Mozilla Labs, 2010, MOZILLA LAB ZAPHOD A
   Zdancewic Steve, 2003, P 19 MATH FDN PROGR
   [No title captured]
NR 61
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2017
VL 39
IS 3
AR 10
DI 10.1145/3024086
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AP
UT WOS:000414327900001
DA 2024-07-18
ER

PT J
AU Blackburn, SM
   Diwan, A
   Hauswirth, M
   Sweeney, PF
   Amaral, JN
   Brecht, T
   Bulej, L
   Click, C
   Eeckhout, L
   Fischmeister, S
   Frampton, D
   Hendren, LJ
   Hind, M
   Hosking, AL
   Jones, RE
   Kalibera, T
   Keynes, N
   Nystrom, N
   Zeller, A
AF Blackburn, Stephen M.
   Diwan, Amer
   Hauswirth, Matthias
   Sweeney, Peter F.
   Amaral, Jose Nelson
   Brecht, Tim
   Bulej, Lubomir
   Click, Cliff
   Eeckhout, Lieven
   Fischmeister, Sebastian
   Frampton, Daniel
   Hendren, Laurie J.
   Hind, Michael
   Hosking, Antony L.
   Jones, Richard E.
   Kalibera, Tomas
   Keynes, Nathan
   Nystrom, Nathaniel
   Zeller, Andreas
TI The Truth, The Whole Truth, and Nothing But the Truth: A Pragmatic Guide
   to Assessing Empirical Evaluations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Performance evaluation (efficiency and effectiveness); Experimental
   evaluation; observation study; experimentation
AB An unsound claim can misdirect a field, encouraging the pursuit of unworthy ideas and the abandonment of promising ideas. An inadequate description of a claim can make it difficult to reason about the claim, for example, to determine whether the claim is sound. Many practitioners will acknowledge the threat of unsound claims or inadequate descriptions of claims to their field. We believe that this situation is exacerbated, and even encouraged, by the lack of a systematic approach to exploring, exposing, and addressing the source of unsound claims and poor exposition.
   This article proposes a framework that identifies three sins of reasoning that lead to unsound claims and two sins of exposition that lead to poorly described claims and evaluations. Sins of exposition obfuscate the objective of determining whether or not a claim is sound, while sins of reasoning lead directly to unsound claims.
   Our framework provides practitioners with a principled way of critiquing the integrity of their own work and the work of others. We hope that this will help individuals conduct better science and encourage a cultural shift in our research community to identify and promulgate sound claims.
C1 [Blackburn, Stephen M.; Hosking, Antony L.] Australian Natl Univ, Res Sch Comp Sci, Acton, ACT 2601, Australia.
   [Diwan, Amer] 1600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
   [Hauswirth, Matthias] Univ Svizzera Italiana USI, Fac Informat, CH-6904 Lugano, Switzerland.
   [Sweeney, Peter F.] Thomas J Watson Res Ctr, IBM Res Div, POB 218, Yorktown Hts, NY 10598 USA.
   [Amaral, Jose Nelson] Univ Alberta, Dept Comp Sci, Edmonton, AB T6G 2E8, Canada.
   [Brecht, Tim] Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
   [Bulej, Lubomir] Charles Univ Prague, Fac Math & Phys, Dept Distributed & Dependable Syst, Prague 11800 1, Czech Republic.
   [Click, Cliff] 160 S Pastoria Ave, Sunnyvale, CA 94086 USA.
   [Eeckhout, Lieven] Univ Ghent, iGent, ELIS, Technol Pk 15, B-9052 Zwijnaarde, Belgium.
   [Fischmeister, Sebastian] Univ Waterloo, Dept Elect & Comp Engn, Waterloo, ON N2L 3G1, Canada.
   [Frampton, Daniel] Microsoft, One Microsoft Way, Redmond, WA 98052 USA.
   [Hendren, Laurie J.] McGill Univ, Sch Comp Sci, Montreal, PQ H3A 0E9, Canada.
   [Hind, Michael] IBM Thomas J Watson Res Ctr, Yorktown Hts, NY USA.
   [Jones, Richard E.; Kalibera, Tomas] Univ Kent, Sch Comp, Canterbury CT2 7NF, Kent, England.
   [Keynes, Nathan] Oracle, 16-340 Adelaide St, Brisbane, Qld 4000, Australia.
   [Nystrom, Nathaniel] USI, Fac Informat, CH-6900 Lugano, Switzerland.
   [Zeller, Andreas] Saarland Univ, Comp Sci, Campus E9 1 CISPA, D-66123 Saarbrucken, Germany.
C3 Australian National University; Universita della Svizzera Italiana;
   International Business Machines (IBM); University of Alberta; University
   of Waterloo; Charles University Prague; Ghent University; University of
   Waterloo; Microsoft; McGill University; International Business Machines
   (IBM); University of Kent; Oracle; Universita della Svizzera Italiana;
   Saarland University
RP Blackburn, SM (corresponding author), Australian Natl Univ, Res Sch Comp Sci, Acton, ACT 2601, Australia.
EM Steve.Blackburn@anu.edu.au; diwan@google.com; Matthias.Hauswirth@usi.ch;
   pfs@us.ibm.com; jamaral@ualberta.ca; brecht@cs.uwaterloo.ca;
   lubomir.bulej@d3s.mff.cuni.cz; cliffc@acm.org; Lieven.Eeckhout@UGent.be;
   sfischme@uwaterloo.ca; Daniel.Frampton@microsoft.com;
   hendren@cs.mcgill.ca; hindm@us.ibm.com; Antony.Hosking@anu.edu.au;
   R.E.Jones@kent.ac.uk; T.Kalibera@kent.ac.uk; Nathan.Keynes@oracle.com;
   nate.nystrom@usi.ch; zeller@cs.uni-saarland.de
RI Bulej, Lubomír/G-3045-2014; Hosking, Antony/G-3618-2012
OI Bulej, Lubomír/0000-0002-4573-6084; Blackburn,
   Stephen/0000-0001-6632-6001; Hosking, Antony/0000-0002-4487-6923;
   Zeller, Andreas/0000-0003-4719-8803
FU Direct For Computer & Info Scie & Enginr; Division Of Computer and
   Network Systems [1161237] Funding Source: National Science Foundation
CR [Anonymous], 2013, SIAM News
   [Anonymous], 2013, The Economist
   Armour PG, 2000, COMMUN ACM, V43, P17, DOI 10.1145/352183.352194
   Bailey DH, 2009, DES AUT CON, P528
   Bailey David H., 2014, FACILITATING REPROD
   Baker M., 2012, NATURE NEWS, DOI [10.1038/nature.2012.11176, DOI 10.1038/NATURE.2012.11176]
   Begley S., 2012, Reuters
   Blackburn SM, 2008, COMMUN ACM, V51, P83, DOI 10.1145/1378704.1378723
   Bonnet P, 2011, SIGMOD REC, V40, P45, DOI 10.1145/2034863.2034873
   Brooks F, 1996, COMMUN ACM, V39, P61, DOI 10.1145/227234.227243
   Buytaert D, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P553
   de Oliveira AugustoBorn., 2013, Proceedings of the 4th ACM/SPEC International Conference on Performance Engineering, ICPE'13, P137
   Dittrich J, 2010, SIGMOD REC, V39, P31, DOI 10.1145/1978915.1978923
   Fursin Grigori, 2015, ENABLING COLLABORATI
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Hauswirth Matthias, 2013, ARTIFACT EVALUATION
   Ioannidis J. P. A., 2005, CONTRADICTED INITIAL, P218
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Keahey Kate, 2012, 326 MCS ANL
   Krishnamurthi S, 2013, ACM SIGPLAN NOTICES, V48, P17, DOI 10.1145/2502508.2502518
   Krishnamurthi Shriram, 2013, P 2013 COMP PUBL C S, P71
   Lehrer J., 2010, The New Yorker, P52
   Manegold S., 2010, SIGMOD REC, V38, P40
   Martin TL, 2001, IEEE T VLSI SYST, V9, P29, DOI 10.1109/92.920816
   Mytkowicz T, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P187, DOI 10.1145/1806596.1806618
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Nowatzki Tony, 2015, IEEE MICRO
   Pieterse Vreda, 2014, 1830 NIST
   Schulte E, 2012, J STAT SOFTW, V46, P1
   Singer Jeremy, 2011, P 10 SIGPLAN S NEW I, P91
   Touati SAA, 2013, CONCURR COMP-PRACT E, V25, P1410, DOI 10.1002/cpe.2939
   Vitek J., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P33
NR 32
TC 18
Z9 19
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2016
VL 38
IS 4
AR 15
DI 10.1145/2983574
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC1WS
UT WOS:000387900100003
OA Green Accepted, Green Published
DA 2024-07-18
ER

PT J
AU Gawlitza, TM
   Seidl, H
AF Gawlitza, Thomas Martin
   Seidl, Helmut
TI Solving Systems of Rational Equations through Strategy Iteration
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Verification; Static program analysis; abstract interpretation;
   fixpoint equation systems; strategy improvement algorithms; recursive
   stochastic games
ID MONOTONE SYSTEMS; POLICY ITERATION; STATIC ANALYSIS; ALGORITHM;
   RELAXATION; INVARIANTS
AB We present practical algorithms for computing exact least solutions of equation systems over the reals with addition, multiplication by positive constants, minimum and maximum. The algorithms are based on strategy iteration. Our algorithms can, for instance, be used for the analysis of recursive stochastic games. In the present article we apply our techniques for computing abstract least fixpoint semantics of affine programs over the relational template polyhedra domain. In particular, we thus obtain practical algorithms for computing abstract least fixpoint semantics over the abstract domains of intervals, zones, and octagons.
C1 [Gawlitza, Thomas Martin] VERIMAG, F-38610 Gieres, France.
   [Seidl, Helmut] Tech Univ Munich, Inst Informat, D-85748 Garching, Germany.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS); Technical University of Munich
RP Gawlitza, TM (corresponding author), VERIMAG, 2 Ave Vignate, F-38610 Gieres, France.
EM Thomas.Gawlitza@imag.fr; seidl@in.tum.de
CR ACETO L, 2008, LECT NOTES COMPUTER, V5125
   Adjé A, 2010, LECT NOTES COMPUT SC, V6012, P23, DOI 10.1007/978-3-642-11957-6_3
   [Anonymous], 1960, DYNAMIC PROGRAMMING
   BJORKLUND R, 2003, SCIENCE, V2890, P381
   BJORKLUND R, 2002, 200218 UPPS U DEP IN
   Cochet-Terrasson J, 1999, DYNAM STABIL SYST, V14, P407, DOI 10.1080/026811199281967
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Costan A, 2005, LECT NOTES COMPUT SC, V3576, P462
   Cousot P, 2005, LECT NOTES COMPUT SC, V3385, P1
   COUSOT P, 1979, P ACM POPL 1977, P238
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   ERNE M, 1993, ANN NY ACAD SCI, V704, P103, DOI 10.1111/j.1749-6632.1993.tb52513.x
   Esparza J, 2008, LECT NOTES COMPUT SC, V5125, P698, DOI 10.1007/978-3-540-70575-8_57
   Esparza J, 2008, STACS 2008: PROCEEDINGS OF THE 25TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF COMPUTER SCIENCE, P289
   Etessami K, 2008, LECT NOTES COMPUT SC, V5125, P711, DOI 10.1007/978-3-540-70575-8_58
   Etessami K, 2005, LECT NOTES COMPUT SC, V3580, P891
   Etessami K, 2005, LECT NOTES COMPUT SC, V3404, P340
   Etessami K, 2006, LECT NOTES COMPUT SC, V4052, P324
   Gaubert S, 2007, LECT NOTES COMPUT SC, V4421, P237
   Gawlitza T, 2007, LECT NOTES COMPUT SC, V4646, P23
   Gawlitza T, 2009, LECT NOTES COMPUT SC, V5760, P422, DOI 10.1007/978-3-642-03456-5_28
   GONNORD L, 2007, THESIS U JOSEPH FOUR
   Gonnord L, 2006, LECT NOTES COMPUT SC, V4134, P144
   Hoffman Alan J, 1966, Management Science, V12, P359, DOI DOI 10.1287/MNSC.12.5.359
   KARMARKAR N, 1984, COMBINATORICA, V4, P373, DOI 10.1007/BF02579150
   Kiefer S, 2007, ACM S THEORY COMPUT, P217, DOI 10.1145/1250790.1250822
   Klee V., 1972, INEQUALITIES, P159
   LECONTE J, 2009, 59 EC POL
   Leroux J, 2007, LECT NOTES COMPUT SC, V4634, P184
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   Monniaux D, 2009, ACM SIGPLAN NOTICES, V44, P140, DOI 10.1145/1594834.1480899
   Monniaux D, 2008, LECT NOTES ARTIF INT, V5330, P243, DOI 10.1007/978-3-540-89439-1_18
   MULLEROLM M, 2004, POPL, P330
   Puri Anuj, 1995, THESIS U CALIFORNIA
   Puterman ML., 2014, MARKOV DECISION PROC, DOI DOI 10.1002/9780470316887
   Sankaranarayanan S, 2005, LECT NOTES COMPUT SC, V3385, P25
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Shaham R, 2000, LECT NOTES COMPUT SC, V1781, P50
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   VOGE J, 2000, LECT NOTES COMPUTER, V1855, P202, DOI DOI 10.1007/1072216718
   Wojtczak D, 2007, LECT NOTES COMPUT SC, V4424, P66
   Wright S. J., 1997, Primal-Dual Interior-Point Methods, V54
   WRIGHT SJ, 1999, IFIP C P SERIES, V174, P311
NR 45
TC 15
Z9 15
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2011
VL 33
IS 3
AR 11
DI 10.1145/1961204.1961207
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 756NQ
UT WOS:000290019800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Welch, PH
   Pedersen, JB
AF Welch, Peter H.
   Pedersen, Jan B.
TI Santa Claus: Formal Analysis of a Process-Oriented Solution
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Reliability; Verification; Process orientation;
   concurrency; deadlock; event ordering; liveness; verification; novice
   programmer; occam-pi; CSP
ID MODEL CHECKING; CSP; MPI
AB With the commercial development of multicore processors, the challenges of writing multithreaded programs to take advantage of these new hardware architectures are becoming more and more pertinent. Concurrent programming is necessary to achieve the performance that the hardware offers. Traditional approaches present concurrency as an advanced topic: they have proven difficult to use, reason about with confidence, and scale up to high levels of concurrency. This article reviews process-oriented design, based on Hoare's algebra of Communicating Sequential Processes (CSP), and proposes that this approach to concurrency leads to solutions that are manageable by novice programmers; that is, they are easy to design and maintain, that they are scalable for complexity, obviously correct, and relatively easy to verify using formal reasoning and/or model checkers. These solutions can be developed in conventional programming languages (through CSP libraries) or specialized ones (such as occam-pi) in a manner that directly reflects their formal expression. Systems can be developed without needing specialist knowledge of the CSP formalism, since the supporting mathematics is burnt into the tools and languages supporting it. We illustrate these concepts with the Santa Claus problem, which has been used as a challenge for concurrency mechanisms since 1994. We consider this problem as an example control system, producing external signals reporting changes of internal state (that model the external world). We claim our occam-pi solution is correct-by-design, but follow this up with formal verification (using the FDR model checker for CSP) that the system is free from deadlock and livelock, that the produced control signals obey crucial ordering constraints, and that the system has key liveness properties.
C1 [Welch, Peter H.] Univ Kent, Comp Lab, Canterbury CT2 7NF, Kent, England.
   [Pedersen, Jan B.] Univ Nevada, Sch Comp Sci, Las Vegas, NV 89154 USA.
C3 University of Kent; Nevada System of Higher Education (NSHE); University
   of Nevada Las Vegas
RP Welch, PH (corresponding author), Univ Kent, Comp Lab, Canterbury CT2 7NF, Kent, England.
EM P.H.Welch@kent.ac.uk; matt@cs.unlv.edu
OI Pedersen, Jan/0000-0002-2800-5095
CR [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], OCC 2 1 REF MAN
   Barnes FRM, 2006, CONCUR SYST ENGN SER, V64, P377
   Barnes FRM, 2004, CONCUR SYST ENGN SER, V62, P201
   BARRETT G, 1995, IEEE T SOFTWARE ENG, V21, P69, DOI 10.1109/32.345823
   Ben-Ari M, 1998, CONCURRENCY-PRACT EX, V10, P485, DOI 10.1002/(SICI)1096-9128(199805)10:6<485::AID-CPE329>3.0.CO;2-2
   Benton N, 2004, ACM T PROGR LANG SYS, V26, P769, DOI 10.1145/1018203.1018205
   BENTON N, 2003, JINGLE BELLS SOLVING
   Biere A., 1999, Tools and Algorithms for the Construction and Analysis of Systems
   Brown N, 2003, CONCUR SYST ENGN SER, V61, P139
   Brown N, 2007, CONCUR SYST ENGN SER, V65, P183
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Buth B, 1999, LECT NOTES COMPUT SC, V1548, P124
   BUTH B, 1997, P 6 INT C ALG METH S, P60
   CAMERON N, 2006, SOLVING SANTA CLAUS
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Cimatti A., 2002, P INT C COMP AID VER, P27
   DILL D, 1992, P IEEE INT C COMP DE
   DONGARRA J, 1994, INT J SUPERCOMPUT AP, V8, P165, DOI 10.1177/109434209400800301
   *FORM SYST EUR LTD, 1998, FAIL DIV REF FDR2 MA
   GOLDER H, 1993, ARION, V2, P1
   GUNTENSPERGER R, 2004, P 2 INT WORKSH NET T, P47
   Hall A, 2002, IEEE SOFTWARE, V19, P18, DOI 10.1109/52.976937
   HEWITT C, 1977, ARTIF INTELL, V8, P323, DOI 10.1016/0004-3702(77)90033-9
   Hoare CAR., 1985, Communicating Sequential Processes
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   HUBER P, 1986, THEOR COMPUT SCI, V45, P261, DOI 10.1016/0304-3975(86)90046-0
   Hurt J, 2008, CONCUR SYST ENGN SER, V66, P381, DOI 10.3233/978-1-58603-907-3-381
   Ip CN, 1996, FORM METHOD SYST DES, V9, P41, DOI 10.1007/BF00625968
   Jacobsen CL, 2004, CONCUR SYST ENGN SER, V62, P99
   Jensen K., 1997, COLOURED PETRI NETS, V1
   Jones Simon Peyton., 2007, Beautiful Code: Leading Programmers Explain How They Think (Theory in Practice (O'Reilly))
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lowe G., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P147
   MCEWAN AA, 2006, THESIS U OXFORD
   McEwan AA, 2007, CONCUR SYST ENGN SER, V65, P379
   MELTON R, 1996, MURO ANNOTATED REFER
   MITCHELL J, 1997, P IEEE S SEC PRIV
   MULLER H, 2000, THREADS SWING
   Ritson CG, 2007, CONCUR SYST ENGN SER, V65, P249
   Ritson CG, 2009, LECT NOTES COMPUT SC, V5521, P163, DOI 10.1007/978-3-642-02053-7_9
   Roscoe A.W., 1994, TRANSPUTER COMMUNICA, V2, P25
   Roscoe A. W., 2009, EXPRESSIVENESS CSP
   Sampson AT, 2007, COMPILING OCCAM C TO
   Schneider S, 2005, LECT NOTES COMPUT SC, V3525, P243
   Schneider S., 1999, Concurrent and Real Time Systems: The CSP Approach, V1st
   Siegel SF, 2007, LECT NOTES COMPUT SC, V4349, P44
   SULZMANN M, 2008, LECT NOTES COMPUTER, V5052
   Trono J. A., 1994, SIGCSE Bulletin, V26, P8, DOI 10.1145/187387.187391
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   Welch P, 2005, CONCUR SYST ENGN SER, V63, P289
   Welch PH, 2006, IEEE INT C ENG COMP, P107
   Welch PH, 2006, CONCUR SYST ENGN SER, V64, P389
   Welch PH, 2008, CONCUR SYST ENGN SER, V66, P17, DOI 10.3233/978-1-58603-907-3-17
   Welch PH, 2005, LECT NOTES COMPUT SC, V3525, P175
   Welch PH, 2000, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED PROCESSING TECHNIQUES AND APPLICATIONS, VOLS I-V, P51
   Welch SM, 2007, ECOGRAPHY, V30, P349, DOI 10.1111/j.0906-7590.2007.04815.x
   *WIK, 2007, STEALTH AIRCR
   Wood DC, 1996, CONCUR SYST ENGN SER, V47, P143
NR 60
TC 3
Z9 3
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2010
VL 32
IS 4
AR 14
DI 10.1145/1734206.1734211
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 588GV
UT WOS:000277057700005
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Knowles, K
   Flanagan, C
AF Knowles, Kenneth
   Flanagan, Cormac
TI Hybrid Type Checking
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification; Type systems; contracts; static
   checking; dynamic checking
AB Traditional static type systems are effective for verifying basic interface specifications. Dynamically checked contracts support more precise specifications, but these are not checked until runtime, resulting in incomplete detection of defects. Hybrid type checking is a synthesis of these two approaches that enforces precise interface specifications, via static analysis where possible, but also via dynamic checks where necessary. This article explores the key ideas and implications of hybrid type checking, in the context of the lambda-calculus extended with contract types, that is, with dependent function types and with arbitrary refinements of base types.
C1 [Knowles, Kenneth; Flanagan, Cormac] Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
C3 University of California System; University of California Santa Cruz
RP Flanagan, C (corresponding author), Univ Calif Santa Cruz, Dept Comp Sci, 1156 High St, Santa Cruz, CA 95064 USA.
EM cormac@cs.ucsc.edu
FU National Science Foundation [CCR-0341179, CCR-0707885]; Sloan Foundation
FX This work was supported by the National Science Foundation under Grants
   CCR-0341179 and CCR-0707885, and by a Fellowship from the Sloan
   Foundation.
CR ABADI M, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P213, DOI 10.1145/75277.75296
   Agarwal R, 2004, LECT NOTES COMPUT SC, V2937, P149
   Aiken Alexander., 1994, P 21 ACM SIGPLAN SIG, P163, DOI DOI 10.1145/174675.177847
   [Anonymous], P C PROGR LANG DES I
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   Augustsson L., 1998, Proceedings of the third ACM SIGPLAN international conference on Functional programming, ICFP '98, P239
   BLEI D, 2000, VAMPYRE
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   BURDY L, 2003, 8 INT WORKSH FORM ME, V80, P73
   CARDELLI L, 1988, LECT NOTES COMPUT SC, V306, P45
   CARDELLI L, 1988, PHASE DISTINTI UNPUB
   DAVIES R, 2000, P INT C FUNCT PROGR, P198, DOI DOI 10.1145/351240.351259
   DENNEY E, 1998, P IFIP INT C PROGR C, V125, P148
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   FAGAN M, 1990, THESIS RICE U
   FINDLER RB, 2002, P 7 ACM SIGPLAN INT, P48
   FINDLER RB, 2002, THESIS RICE U
   FLANAGAN C, 1996, P 1996 ACM SIGPLAN C, P23
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   FLANAGAN C, 2006, POPL, P245
   FREEMAN T, 1991, P ACM SIGPLAN C PROG, P268, DOI DOI 10.1145/113445.113468
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   GOMES B, 1996, LANGUAGE MANUAL SATH
   Gosling James, 1996, The Java Language Specification
   Gronski Jessica, 2006, SCHEM FUNCT PROGR WO, P93
   Gronski Jessica., 2007, Trends in Functional Programming (TFP)
   HAINES N, 1994, ACM T PROGR LANG SYS, V16, P1719, DOI 10.1145/197320.197346
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman D., 2007, TRENDS FUNCTIONAL PR, P404
   HOLT RC, 1988, COMMUN ACM, V31, P1410, DOI 10.1145/53580.53581
   Knowles K, 2007, LECT NOTES COMPUT SC, V4421, P505
   Kolling Michael, 1997, BLUE LANGUAGE SPECIF
   Leavens GaryT., 2005, DESIGN CONTRACT JML
   Luckham D., 1990, TEXTS MONOGRAPHS COM
   Mandelbaum Yitzhak., 2003, Proceedings of the Eighth ACM SIGPLAN International Conference on Functional Programming, ICFP '03, P213, DOI DOI 10.1145/944705.944725
   Meyer B., 1988, Object-Oriented Software Construction
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   NECULA GC, 1997, S PRINC PROGR LANG
   OCALLAHAN R, 2003, P 9 ACM SIGPLAN S PR, P167
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   PARNAS DL, 1972, COMMUN ACM, V15, P330, DOI 10.1145/355602.361309
   RONDON PM, 2008, P C PROGR LANG DES I
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy G, 2006, P WORKSH SCHEM FUNCT
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   THATTE SR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P367, DOI 10.1145/96709.96747
   Vitek J, 2004, LECT NOTES COMPUT SC, V2986, P249
   VONPRAUN C, 2001, P ACM C OBJ OR PROGR, P70
   WADLER P, 2007, P WORKSH SCHEM FUNCT
   Wright A. K., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P250, DOI 10.1145/182409.182485
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xi Hongwei., 1999, Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P214
   Xi HW, 2000, IEEE S LOG, P375
NR 55
TC 51
Z9 61
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2010
VL 32
IS 2
AR 6
DI 10.1145/1667048.1667051
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 553OH
UT WOS:000274376200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Harman, M
   Binkley, D
   Gallagher, K
   Gold, N
   Krinke, J
AF Harman, Mark
   Binkley, David
   Gallagher, Keith
   Gold, Nicolas
   Krinke, Jens
TI Dependence Clusters in Source Code
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Measurement; Dependence; program comprehension;
   program slicing
ID PROGRAM; TESTABILITY; SLICES; GENERATION; SUPPORT; DESIGN; SYSTEM
AB A dependence cluster is a set of program statements, all of which are mutually inter-dependent. This article reports a large scale empirical study of dependence clusters in C program source code. The study reveals that large dependence clusters are surprisingly commonplace. Most of the 45 programs studied have clusters of dependence that consume more than 10% of the whole program. Some even have clusters consuming 80% or more. The widespread existence of clusters has implications for source code analyses such as program comprehension, software maintenance, software testing, reverse engineering, reuse, and parallelization.
C1 [Harman, Mark; Gold, Nicolas; Krinke, Jens] Kings Coll London, London WC2R 2LS, England.
   [Binkley, David] Loyola Coll, Baltimore, MD 21210 USA.
   [Gallagher, Keith] Univ Durham, Durham DH1 3LE, England.
C3 University of London; King's College London; Loyola University Maryland;
   Durham University
RP Harman, M (corresponding author), Kings Coll London, London WC2R 2LS, England.
EM mark.harman@kcl.ac.uk; binkley@cs.loyola.edu;
   k.b.gallagher@durham.ac.uk; nicolas.gold@kcl.ac.uk; jenskrinke@kcl.ac.uk
RI Krinke, Jens/E-9011-2011
OI Krinke, Jens/0000-0003-1009-2861; Harman, Mark/0000-0002-5864-4488
FU EPSRC [GR/F010443]
FX This research was supported by EPSRC grant GR/F010443.
CR [Anonymous], ACM SIGPLAN NOTICES
   [Anonymous], PLDI 98
   [Anonymous], P INT C SOFTW TEST V
   [Anonymous], 2000, AUTOMATIC REENGINEER
   Balmas F, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P145, DOI 10.1109/SCAM.2002.1134114
   BARESEL A, 2002, GECCO 2002, P1329
   Bates S., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P384, DOI 10.1145/158511.158694
   BECK J, 1993, PROC INT CONF SOFTW, P509, DOI 10.1109/ICSE.1993.346015
   Beszédes A, 2002, PROC IEEE INT CONF S, P12, DOI 10.1109/ICSM.2002.1167743
   Beszédes A, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P105, DOI 10.1109/CSMR.2001.914974
   BIEMAN JM, 1994, IEEE T SOFTWARE ENG, V20, P644, DOI 10.1109/32.310673
   BINDER RV, 1994, COMMUN ACM, V37, P87, DOI 10.1145/182987.184077
   Binkley D, 2005, PROC IEEE INT CONF S, P177
   Binkley D, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P15, DOI 10.1109/SCAM.2005.28
   Binkley D., 1995, ACM Transactions on Software Engineering and Methodology, V4, P3, DOI 10.1145/201055.201056
   Binkley D, 2004, IEEE T SOFTWARE ENG, V30, P715, DOI 10.1109/TSE.2004.78
   Binkley D, 2004, ADV COMPUT, V62, P105, DOI 10.1016/S0065-2458(03)62003-6
   Binkley D, 1998, INFORM SOFTWARE TECH, V40, P583, DOI 10.1016/S0950-5849(98)00085-8
   Binkley D, 1997, IEEE T SOFTWARE ENG, V23, P498, DOI 10.1109/32.624306
   Binkley D, 2000, PROG COMPREHEN, P161, DOI 10.1109/WPC.2000.852490
   Binkley D., 1996, Advances in Computers, V43, P1
   Binkley D, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P43
   Binkley D, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290523
   Black S, 2001, J SOFTW MAINT EVOL-R, V13, P263, DOI 10.1002/smr.233
   CANFORA G, 1994, J SOFTW MAINT-RES PR, V6, P53, DOI 10.1002/smr.4360060202
   CANFORA G, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P424, DOI 10.1109/ICSM.1994.336752
   Canfora G, 1998, J SYST SOFTWARE, V42, P153, DOI 10.1016/S0164-1212(98)10006-7
   Canfora G., 2005, P 11 IEEE INT SOFTWA, P29, DOI [DOI 10.1109/METRICS2005.18, DOI 10.1109/METRICS.2005.28]
   Cimitile A, 1996, J SOFTW MAINT-RES PR, V8, P145, DOI 10.1002/(SICI)1096-908X(199605)8:3<145::AID-SMR127>3.0.CO;2-9
   Cimitile A, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P124, DOI 10.1109/ICSM.1995.526534
   Colin S, 2004, SOFTW TEST VERIF REL, V14, P213, DOI 10.1002/stvr.300
   De Lucia A, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P363, DOI 10.1109/CSMR.2003.1192445
   De Lucia A, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P142, DOI 10.1109/SCAM.2001.972675
   DeLucia A, 1996, FOURTH WORKSHOP ON PROGRAM COMPREHENSION, PROCEEDINGS, P9, DOI 10.1109/WPC.1996.501116
   Deng YB, 2001, PROG COMPREHEN, P50, DOI 10.1109/WPC.2001.921713
   EISENBARTH T, 2003, IEEE T SOFTW ENG, V29
   Ferguson R., 1996, ACM Transactions on Software Engineering and Methodology, V5, P63, DOI 10.1145/226155.226158
   Gallagher K, 2003, J SOFTW MAINT EVOL-R, V15, P393, DOI 10.1002/smr.289
   Gallagher K, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P316, DOI 10.1109/WCRE.2003.1287262
   GALLAGHER K, 2003, P 11 INT WORKSH PROG
   GALLAGHER K, 2001, P INT WORKSH EMP STU
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   GALLAGHER KB, 1996, P C SOFTW MAINT 1996
   GALLAGHER KB, 1992, P INT C SOFTW MAINT, P236
   *GRAMM INC, 2002, COD SLIC SYST
   Gupta R., 1992, P IEEE C SOFTW MAINT, P299
   HALL T, 2005, P 11 INT SOFTW METR, P18
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   Harman M, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P85
   Harman M, 2004, IEEE T SOFTWARE ENG, V30, P3, DOI 10.1109/TSE.2004.1265732
   HARMAN M, 1995, J SOFTWARE TESTING V, V5, P143
   HARMAN M, 2001, SOFTWARE FOCUS, V2, P85
   HARMAN M., 2007, Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering, P155, DOI DOI 10.1145/1287624.1287647
   Harman M, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1029
   HORWITZ S, 1989, ACM T PROGR LANG SYS, V11, P345, DOI 10.1145/65979.65980
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   HUTCHENS DH, 1985, IEEE T SOFTWARE ENG, V11, P749, DOI 10.1109/TSE.1985.232524
   HUTCHENS M, 1998, P 1998 INT C SOFTW M
   JACKSON D, 1994, P 2 ACM SIGSOFT S FD, P2
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Komondoor R, 2003, PROG COMPREHEN, P33
   Komondoor R., PROC 27 ACM SIGPLAN, DOI [10.1145/325694.325713, DOI 10.1145/325694.325713]
   Korel B, 1997, PROG COMPREHEN, P80, DOI 10.1109/WPC.1997.601269
   Korel B, 1998, PROG COMPREHEN, P145, DOI 10.1109/WPC.1998.693339
   KOREL B, 1990, IEEE T SOFTWARE ENG, V16, P870, DOI 10.1109/32.57624
   KRINKE J, 1998, INF SOFTW TECH PROGR, V40, P12661
   Kusumoto S., 2002, Empirical Software Engineering, V7, P49, DOI 10.1023/A:1014823126938
   LAKHOTIA A, 1998, INF SOFTW TECH PROGR, V40, P12677
   LAKHOTIA A, 2003, VIRUS B          SEP
   Lakhotia Arun., 1993, Proceedings of the 15th Conference on Software Engineering (ICSE-15), P34
   Lehman M. M., 1980, Journal of Systems and Software, V1, P213, DOI 10.1016/0164-1212(79)90022-0
   Lehman MM, 1998, IEEE SOFTWARE, V15, P40, DOI 10.1109/MS.1998.646878
   Li K., 2004, EFFECTIVE SOFTWARE T
   Lyle J., 1987, Proceedings of the ICCEA, ICCEA'87, P877
   Mahdavi K, 2003, PROC IEEE INT CONF S, P315, DOI 10.1109/ICSM.2003.1235437
   Mancoridis S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P50, DOI 10.1109/ICSM.1999.792498
   Meyers TM, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P256, DOI 10.1109/WCRE.2004.34
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   MITCHELL BS, 2002, GECCO 2002, P1375
   NING JQ, 1994, COMMUN ACM, V37, P50, DOI 10.1145/175290.175295
   Ott L. M., 1989, Proceedings. 11th International Conference on Software Engineering (Cat. No.89CH2718-5), P198, DOI 10.1145/74587.74614
   Ren X, 2006, IEEE T SOFTWARE ENG, V32, P718, DOI 10.1109/TSE.2006.90
   Ren XX, 2005, PROC INT CONF SOFTW, P664, DOI 10.1145/1062455.1062598
   RILLING J, 2001, P 5 WORLD MULT SYST
   RILLING J, 2002, P 10 WORK C REV ENG, P42
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Tonella P, 2003, IEEE T SOFTWARE ENG, V29, P495, DOI 10.1109/TSE.2003.1205178
   Tracey N, 2000, SOFTWARE PRACT EXPER, V30, P61, DOI 10.1002/(SICI)1097-024X(200001)30:1<61::AID-SPE292>3.0.CO;2-9
   VOAS JM, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.382180
   WEISER M, 1982, COMMUN ACM, V25, P446, DOI 10.1145/358557.358577
   WHEELER DA, 2005, SLOC COUNT USERS GUI
   YAU SS, 1985, IEEE T SOFTWARE ENG, V11, P849, DOI 10.1109/TSE.1985.232544
   Zhao J., 2002, P INT WORKSHOP PROGR, P351
NR 93
TC 20
Z9 24
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2009
VL 32
IS 1
AR 1
DI 10.1145/1596527.1596528
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 530YN
UT WOS:000272629000001
DA 2024-07-18
ER

PT J
AU Ranganath, VP
   Amtoft, T
   Banerjee, A
   Hatcliff, J
   Dwyer, MB
AF Ranganath, Venkatesh Prasad
   Amtoft, Torben
   Banerjee, Anindya
   Hatcliff, John
   Dwyer, Matthew B.
TI A new foundation for control dependence and slicing for modern program
   structures
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 14th European Symposium on Programming (ESOP 2005)
CY APR 04-08, 2005
CL Edinburgh, SCOTLAND
DE algorithms; languages; theory
AB The notion of control dependence underlies many program analysis and transformation techniques. Despite being widely used, existing definitions and approaches to calculating control dependence are difficult to apply directly to modern program structures because these make substantial use of exception processing and increasingly support reactive systems designed to run indefinitely.
   This article revisits foundational issues surrounding control dependence, and develops definitions and algorithms for computing several variations of control dependence that can be directly applied to modem program structures. To provide a foundation for slicing reactive systems, the article proposes a notion of slicing correctness based on weak bisimulation, and proves that some of these new definitions of control dependence generate slices that conform to this notion of correctness. This new framework of control dependence definitions, with corresponding correctness results, is even able to support programs with irreducible control flow graphs. Finally, a variety of properties show that the new definitions conservatively extend classic definitions. These new definitions and algorithms form the basis of the Indus Java slicer, a publicly available program slicer that has been implemented for full Java.
C1 Kansas State Univ, Dept Comp & Informat Sci, Manhattan, KS 66506 USA.
   Univ Nebraska, Dept Comp Sci & Engn, Lincoln, NE 68588 USA.
C3 Kansas State University; University of Nebraska System; University of
   Nebraska Lincoln
RP Ranganath, VP (corresponding author), Kansas State Univ, Dept Comp & Informat Sci, 234 Nichols Hall, Manhattan, KS 66506 USA.
EM rvprasad@cis.ksu.edu; tamtoft@cis.ksu.edu; ab@cis.ksu.edu;
   hatcliff@cis.ksu.edu; dwyer@cse.unl.edu
RI Ranganath, Venkatesh-Prasad/J-5238-2014
OI Ranganath, Venkatesh-Prasad/0000-0001-7684-6086; Dwyer,
   Matthew/0000-0002-1937-1544
CR Allen M., 2003, SIGPLAN Notices, V38, P284, DOI 10.1145/966049.777394
   Andersen L. O., 1994, Ph.D. thesis
   BALL T, 1993, LECTURE NOTES COMPUT, V749, P206, DOI DOI 10.1007/BFB0019410
   Bilardi G., 1996, PLDI, P291
   Clarke EM, 1999, MODEL CHECKING, P1
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Francel MA, 1999, PROG COMPREHEN, P106, DOI 10.1109/WPC.1999.777749
   Hatcliff J, 1999, LECT NOTES COMPUT SC, V1694, P1
   HATCLIFF J, 2000, J HIGHER ORDER SYMBO, V13, P315
   HATCLIFF J, 2000, J HIGHGER ORDER SYMB, V13, P4
   HECHT MS, 1974, J ACM, V21, P367, DOI 10.1145/321832.321835
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   HORWITZ S, 1989, P ACM SIGPLAN S COMP, P28
   JAYARAMAN G, 2004, KAVERI DELIVERING IN
   Johnson Richard., 1993, Proceedings of the SIGPLAN '93 Conference on Programming Language Design and Implementation, P78
   Krinke J, 1998, ACM SIGPLAN NOTICES, V33, P35, DOI 10.1145/277633.277638
   MILLETT I, 1998, P 4 INT SPIN WORKSH
   MILNER R, 2008, COMMUNICATION CONCUR
   Muchnick S., 1997, ADV COMPILER DESIGN
   PODGURSKI A, 1990, IEEE T SOFTWARE ENG, V16, P965, DOI 10.1109/32.58784
   Ranganath VP, 2005, LECT NOTES COMPUT SC, V3444, P77
   *SANTOS LAB, 2007, IND TOOLK CUST AD JA
   STAFFORD J, 2000, THESIS U COLORADO
   TIP F, 1995, J PROGRAM LANG, V3, P121
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
NR 26
TC 54
Z9 59
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 5
AR 27
DI 10.1145/1275497.1275502
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208NR
UT WOS:000249327000005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Rival, X
   Mauborgne, L
AF Rival, Xavier
   Mauborgne, Laurent
TI The trace partitioning abstract domain
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 14th European Symposium on Programming (ESOP 2005)
CY APR 04-08, 2005
CL Edinburgh, SCOTLAND
DE verification; experimentation; theory
ID STATIC ANALYSIS
AB In order to achieve better precision of abstract interpretation-based static analysis, we introduce a new generic abstract domain, the trace partitioning abstract domain. We develop a theoretical framework allowing a wide range of instantiations of the domain, proving that all these instantiations give correct results. From this theoretical framework, we go into implementation details of a particular instance developed in the ASTREE Static analyzer. We show how the domain is automatically configured in ASTREE and the gain and cost in terms of performance and precision.
C1 Ecole Normale Super, Dept Informat, F-75230 Paris 05, France.
C3 Universite PSL; Ecole Normale Superieure (ENS)
RP Rival, X (corresponding author), Ecole Normale Super, Dept Informat, 45 Rue Ulm, F-75230 Paris 05, France.
EM Laurent.mauborgne@ens.fr
CR Ammons Glenn., 1998, PLDI 98 P ACM SIGPLA, P72, DOI DOI 10.1145/277652.277665
   [Anonymous], P ACM SIGPLAN 1988 C
   [Anonymous], 1981, Technical Report DAIMI FN-19
   [Anonymous], 2005, LECT NOTES COMPUTER
   Ball T, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P46, DOI 10.1109/MICRO.1996.566449
   BALL T, 2001, P 8 INT SPIN WORKSH, P103
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Blanchet Bruno, 2003, ACM SIGPLAN NOTICES, P196, DOI DOI 10.1145/780822.781153
   Bodík R, 1997, LECT NOTES COMPUT SC, V1301, P361, DOI 10.1145/267896.267921
   BOURDONCLE F, 1993, LECT NOTES COMPUTER, V735, P128
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 1981, Program flow analysis. Theory and applications, P303
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Das Manuvir., 2002, PLDI, P57, DOI DOI 10.1145/512529.512538
   Feret J, 2005, LECT NOTES COMPUT SC, V3385, P42
   Feret J, 2004, LECT NOTES COMPUT SC, V2986, P33
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   Halbwachs N., 1993, P 3 INT C ALG METH S, P83
   Handjieva M, 1998, LECT NOTES COMPUT SC, V1503, P200
   Holley L. Howard, 1980, P POPL, P68, DOI DOI 10.1145/567446.567454
   Jeannet B, 2003, FORM METHOD SYST DES, V23, P5, DOI 10.1023/A:1024480913162
   Jeannet B, 1999, LECT NOTES COMPUT SC, V1694, P39
   Jones N. D., 1979, P 6 ACM SIGACT SIGPL, P244
   MAUBORGNE L, 2004, BUILDING INFORM SOC, P384
   MELSKI D, 2003, P 12 INT C COMP CONS, P200
   MINE A, 2001, HIGHER ORDER SYMB CO, V19, P1
   MINE A, 2001, HIGHER ORDER SYMB CO, V19, P31
   MONNIAUX D, 2005, LECT NOTES COMPUTER, V3780
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   Rival X, 2005, LECT NOTES COMPUT SC, V3672, P303
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   VENET A, 1996, P STAT AN S SAS AACH, V1145
NR 37
TC 102
Z9 108
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 5
AR 26
DI 10.1145/1275497.1275501
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 208NR
UT WOS:000249327000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Brecht, T
   Arjomandi, E
   Li, C
   Pham, H
AF Brecht, Tim
   Arjomandi, Eshrat
   Li, Chang
   Pham, Hang
TI Controlling garbage collection and heap growth to reduce the execution
   time of Java applications
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE garbage collection; heap growth; implementation; Java; memory;
   management; performance measurement; programming languages
AB In systems that support garbage collection, a tension exists between collecting garbage too frequently and not collecting it frequently enough. Garbage collection that occurs too frequently may introduce unnecessary overheads at the risk of not collecting much garbage during each cycle. On the other hand, collecting garbage too infrequently can result in applications that execute with a large amount of virtual memory (i.e., with a large footprint) and suffer from increased execution times due to paging.
   In this article, we use a large set of Java applications and the highly tuned and widely used Boehm-Demers-Weiser (BDW) conservative mark-and-sweep garbage collector to experimentally examine the extent to which the frequency of garbage collection impacts an application's execution time, footprint, and pause times. We use these results to devise some guidelines for controlling garbage collection and heap growth in a conservative garbage collector in order to minimize application execution times. Then we describe new strategies for controlling garbage collection and heap growth that impact not only the frequency with which garbage collection occurs but also the points at which it occurs. Experimental results demonstrate that when compared with the existing
C1 Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
   York Univ, Dept Comp Sci & Engn, N York, ON M3J 1P3, Canada.
   IBM Canada Ltd, Toronto Lab, Toronto, ON, Canada.
   Univ Toronto, Dept Comp Sci, Toronto, ON, Canada.
C3 University of Waterloo; York University - Canada; International Business
   Machines (IBM); University of Toronto
RP Brecht, T (corresponding author), Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM brecht@cs.uwaterloo.ca; eshrat@cs.yorku.ca; changl@ca.ibm.com;
   hangp@cs.utoronto.ca
RI PHAM, HANG/KCY-9776-2024
CR ALONSO R, 1990, PERF E R SI, V18, P153, DOI 10.1145/98460.98753
   ANDREASSON E, 2002, USENIX JAVA VIRTUAL
   APPEL A, 2003, COMMUNICATION
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   ATTANASIO CR, 2001, LECT NOTES COMPUTER
   AZATCHI H, 2003, P ACM C OBJ OR SYST
   BACON DF, 2001, P SIGPLAN C PROGR LA
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/375431.375432
   BARABASH K, 2003, P OOPSLA ACM C OBJ O
   BOEHM HJ, 1988, SOFTWARE PRACT EXPER, V18, P807, DOI 10.1002/spe.4380180902
   BOEHM HJ, 2004, GARBAGE COLLECTOR C
   Chilimbi TM, 1999, ACM SIGPLAN NOTICES, V34, P37, DOI 10.1145/301589.286865
   COOPER E, 1992, ACM S LISP FUNCT PRO, P43
   Dimpsey R, 2000, IBM SYST J, V39, P151, DOI 10.1147/sj.391.0151
   DOMANI T, 2000, ACM SIGPLAN
   FITGERALD R, 2000, ACM SIGPLAN, V36, P1
   *GEOD SYST INC, 2002, REMIDI
   GRUNWALD D, 1993, SIGPLAN NOTICES, V28, P177, DOI 10.1145/173262.155107
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   KIM T, 2000, P 6 IEEE REAL TIM TE
   MOON DA, 1984, ACM S LISP FUNCT PRO, P235
   Moon DavidA., 1984, C RECORD 1984 ACM S, P235, DOI DOI 10.1145/800055.802040
   OSSIA Y, 2002, P ACM SIGPLAN 2002 C, P129
   PRINTEZIS T, 2001, P JAV VIRT MACH RES
   SHAHAM R, 2000, ACM SIGPLAN, V36, P1
   SHUF Y, 2001, P SIGMETRICS C
   SMITH F, 1988, ACM SIGPLAN, V34, P68
   *SUN MICR, 2005, TUN GARB COLL 5 0 J
   UNGAR D, 1992, ACM T PROGR LANG SYS, V14, P1, DOI 10.1145/111186.116734
   UNGAR D, 1988, SIGPLAN NOTICES, V23, P1, DOI 10.1145/62084.62085
   Wilson P. R., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P32, DOI 10.1145/141471.141500
   Wilson P. R., 1995, LECT NOTES COMPUTER, V986
   Wilson PaulR., 1994, Uniprocessor garbage collection techniques (Long Version)
   WILSON PR, 1991, SIGPLAN NOTICES, V26, P177, DOI 10.1145/113446.113461
   ZORN B, 1993, SOFTWARE PRACT EXPER, V23, P733, DOI 10.1002/spe.4380230704
   ZORN B, 1991, CUCS52891 U COL BOUL
   ZORN B, 1990, ACM S LISP FUNCT PR
NR 37
TC 13
Z9 14
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2006
VL 28
IS 5
BP 908
EP 941
DI 10.1145/1152649.1152652
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 083LH
UT WOS:000240456900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Merro, M
   Hennessy, M
AF Merro, M
   Hennessy, M
TI A bisimulation-based semantic theory of safe ambients
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; mobile agents; distributed systems; bisimulation
ID CALCULUS
AB We develop a semantics theory for SAP, a variant of Levi and Sangiorgi's Safe Ambients, SA.
   The dynamics of SA relies upon capabilities ( and co-capabilities) exercised by mobile agents, called ambients, to interact with each other. These capabilities contain references, the names of ambients with which they wish to interact. In SAP we generalize the notion of capability: in order to interact with an ambient n, an ambient m must exercise a capability indicating both n and a password h to access n; the interaction between n and m takes place only if n is willing to perform a corresponding co-capability with the same password h. The name h can also be looked upon as a port to access ambient n via port h.
   In SAP, by managing passwords/ports, for example generating new ones and distributing them selectively, an ambient may now program who may migrate into its computation space, and when. Moreover in SAP, an ambient may provide different services/resources depending on the port accessed by the incoming clients. Then we give an Its-based operational semantics for SAP and a labelled bisimulation equivalence, which is proved to coincide with reduction barbed congruence.
   We use our notion of bisimulation to prove a set of algebraic laws that are subsequently exploited to prove more significant examples.
C1 Univ Verona, Dipartimento Informat, I-37134 Verona, Italy.
   Univ Sussex, Dept Informat, Brighton BN1 9QH, E Sussex, England.
C3 University of Verona; University of Sussex
RP Univ Verona, Dipartimento Informat, Ca Vigal 2,Strada Grazie 15, I-37134 Verona, Italy.
EM Massimo.Merro@univr.it; matthewh@sussex.ac.uk
OI Merro, Massimo/0000-0002-1712-7492
CR Amadio RM, 1998, THEOR COMPUT SCI, V195, P291, DOI 10.1016/S0304-3975(97)00223-5
   BUGLIESI M, 2001, LNCS, V2215
   BUGLIESI M, 2005, J INFORM COMPUTATION, V202
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   CARDELLI L, 1996, UNPUB COMMITMENT REL
   CARDELLI L, 1999, P POPL 99, P79
   CASTAGNA G, 2002, LNCS, V2556
   GODSKESEN J, 2002, LNCS, V2421
   GORDON AD, 2002, J MATH STRUCT COMPUT, V12, P1
   HENNESSY M, 2003, LNCS
   HENNESSY M, 2004, LECT NOTES COMPUTER, V2987
   Hennessy M., 1998, P 25 POPL
   HONDA K, 1995, THEOR COMPUT SCI, V151, P437, DOI 10.1016/0304-3975(95)00074-7
   HONDA K, 1994, LNCS, V789
   JENSEN OH, 2004, 30 S PRINC PROGR LAN
   Leifer James J., 2000, LNCS, V1877, P243
   LEVI F, 2000, P 27 S PRINC PROGR L
   Merro M, 2005, J ACM, V52, P961, DOI 10.1145/1101821.1101825
   MERRO M, 2002, P 29 POPL 02
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MILNER R, 1991, ECSLFCS91180 ED U DE
   Milner Robin., 1993, LOGIC ALGEBRA SPECIF
   PHILLIPS A, 2005, THESIS IMPERIAL COLL
   PHILLIPS A, 2004, LNCS, V2987
   SANGIORGI D, 1992, LECT NOTES COMPUT SC, V630, P32
   SANGIORGI D, 1994, INFORM COMPUT, V111, P120, DOI 10.1006/inco.1994.1042
   Sangiorgi D, 1996, INFORM COMPUT, V131, P141, DOI 10.1006/inco.1996.0096
   SANGIORGI D, 2001, P 28 POPL
   Sangiorgi D., 2001, LNCS, V2154
   Sangiorgi D., 1992, PhD thesis
   Sangiorgi Davide, 2001, PIE CALCULUS THEORY
   SCHMITT A, 2004, LNCS
   UNYAPOTH A, 2001, P 28 POPL
   VIGLIOTTI MG, 1999, THESIS U LONDON
   VIGLIOTTI MG, 2002, ELECT NOTES THEORETI, V66
   Vitek J, 1999, LECT NOTES COMPUT SC, V1686, P47
   [No title captured]
NR 39
TC 19
Z9 21
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2006
VL 28
IS 2
BP 290
EP 330
DI 10.1145/1119479.1119482
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 021SQ
UT WOS:000236006300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Suganuma, T
   Yasue, T
   Nakatani, T
AF Suganuma, T
   Yasue, T
   Nakatani, T
TI A region-based compilation technique for dynamic compilers
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT ACM SIGPLAN Conference on Programming Language Design and Implementation
   (PLDI 03)
CY JUN 08-11, 2003
CL San Diego, CA
SP ACM, SIGPLAN
DE performance; design; experimentation; region-based compilation; dynamic
   compilation; partial inlining; on-stack replacement; JIT compiler
AB Method inlining and data flow analysis are two major optimization components for effective program transformations, but they often suffer from the existence of rarely or never executed code contained in the target method. One major problem lies in the assumption that the compilation unit is partitioned at method boundaries. This article describes the design and implementation of a region-based compilation technique in our dynamic optimization framework, in which the compiled regions are selected as code portions without rarely executed code. The key parts of this technique are the region selection, partial inlining, and region exit handling. For region selection, we employ both static heuristics and dynamic profiles to identify and eliminate rare sections of code. The region selection process and method inlining decisions are interwoven, so that method inlining exposes other targets for region selection, while the region selection in the inline target conserves the inlining budget, allowing more method inlining to be performed. The inlining process can be performed for parts of a method, not just for the entire body of the method. When the program attempts to exit from a region boundary, we trigger recompilation and then use on-stack replacement to continue the execution from the corresponding entry point in the recompiled code. We have implemented these techniques in our Java JIT compiler, and conducted a comprehensive evaluation. The experimental results show that our region-based compilation approach achieves approximately 4% performance improvement on average, while reducing the compilation overhead by 10% to 30%, in comparison to the traditional method-based compilation techniques.
C1 IBM Japan Ltd, Tokyo Res Lab, Yamato 2428502, Japan.
C3 International Business Machines (IBM)
RP IBM Japan Ltd, Tokyo Res Lab, 1623-14 Shimotsuruma, Yamato 2428502, Japan.
EM suganuma@jp.ibm.com; yasue@jp.ibm.com; nakatani@jp.ibm.com
CR [Anonymous], 2000, PLDI '00
   Arnold M, 2002, ACM SIGPLAN NOTICES, V37, P111, DOI 10.1145/583854.582432
   BALA T, 1993, P ACM SIGPLAN C PROG, P300
   Bruening D, 2003, INT SYM CODE GENER, P265, DOI 10.1109/CGO.2003.1191551
   BRUENING D, 2000, P ACM SIGPLAN WORKSH
   CHAMBERS C, 1991, SIGPLAN NOTICES, V26, P1, DOI 10.1145/118014.117955
   CHANG PP, 1991, SOFTWARE PRACT EXPER, V21, P1301, DOI 10.1002/spe.4380211204
   CHEN WK, 2000, P ACM SIGPLAN WORKSH
   Cierniak Michal., 2000, PROCEEEDINGS ACM SIG, P13
   Cohn R, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P80, DOI 10.1109/MICRO.1996.566452
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Duesterwald E., 2000, Operating Systems Review, V34, P202, DOI 10.1145/384264.379241
   Fink SJ, 2003, INT SYM CODE GENER, P241, DOI 10.1109/CGO.2003.1191549
   Hank R. E., 1993, Proceedings of the 26th Annual International Symposium on Microarchitecture (Cat. No.93TH0602-3), P247, DOI 10.1109/MICRO.1993.282738
   Hank R. E., 1995, Proceedings of the 28th Annual International Symposium on Microarchitecture (Cat. No.95TB100012), P158, DOI 10.1109/MICRO.1995.476823
   HANK RE, 1996, THESIS U ILLINOIS UR
   Holzle U., 1994, THESIS STANFORD U ST
   HWU WMW, 1993, J SUPERCOMPUT, V7, P229, DOI 10.1007/BF01205185
   *IBM CORP, 2002, WEBSPHER STUD APPL D
   ISHIZAKI K, 2000, P ACM SIGPLAN C OBJ, P294
   *JAV GRAND FOR, 2000, JAV GRAND FOR BENCHM
   *JUST SYST CORP, 1998, ICH ARK JAV JAP WORD
   Knoop J., 1994, SIGPLAN Notices, V29, P147, DOI 10.1145/773473.178256
   LOWNEY PG, 1993, J SUPERCOMPUT, V7, P51, DOI 10.1007/BF01205182
   Mikheev VV, 2002, LECT NOTES COMPUT SC, V2304, P293
   OGASAWARA T, 2001, P ACM SIGPLAN C OBJ, P83
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Pettis K., 1990, SIGPLAN Notices, V25, P16, DOI 10.1145/93548.93550
   *STAND PERF EV COR, 2000, SPECJVM98 SPECJBB200
   Suganuma T, 2005, ACM T PROGR LANG SYS, V27, P732, DOI 10.1145/1075382.1075386
   Suganuma T, 2000, IBM SYST J, V39, P175, DOI 10.1147/sj.391.0175
   Suganuma T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P91
   SUGANUMA T, 2003, P ACM SIGPLAN 2003 C, P312
   SUGANUMA T, 2001, P ACM SIGPLAN C OBJ, P180
   TRIANTAFYLLIS S, 2002, P 2 WORKSH EXPL PAR
   Way T, 2000, 2000 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P24, DOI 10.1109/PACT.2000.888257
   Way Tom., 2002, P C PARALLEL DISTRIB, P552
   Whaley J., 1999, P 14 ACM SIGPLAN C O, P187, DOI [10.1145/320384.320400, DOI 10.1145/320384.320400]
   Whaley John., 2001, Partial method compilation using dynamic profile information, P166
NR 39
TC 25
Z9 36
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2006
VL 28
IS 1
BP 134
EP 174
DI 10.1145/1111596.1111600
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 011SV
UT WOS:000235289300004
OA Bronze
DA 2024-07-18
ER

PT J
AU De Sutter, B
   De Bus, B
   De Bosschere, K
AF De Sutter, B
   De Bus, B
   De Bosschere, K
TI Link-time binary rewriting techniques for program compaction
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE experimentation; performance; program representation; compaction;
   interprocedural analysis; code abstraction; whole-program optimization;
   linker; binary rewriting
ID CODE; COMPRESSION
AB Small program size is an important requirement for embedded systems with limited amounts of memory. We describe how link-time compaction through binary rewriting can achieve code size reductions of up to 62% for statically bound languages such as C, C++, and Fortran, without compromising on performance. We demonstrate how the limited amount of information about a program at link time can be exploited to overcome overhead resulting from separate compilation. This is done with scalable, cost-effective, whole-program analyses, optimizations, and duplicate code and data elimination techniques. The discussed techniques are evaluated and their cost-effectiveness is quantified with SQUEEZE++, a prototype link-time compactor.
C1 Univ Ghent, B-9000 Ghent, Belgium.
C3 Ghent University
RP Univ Ghent, B-9000 Ghent, Belgium.
EM kdb@elis.UGent.be
RI De Bosschere, Koen OM/P-6865-2014
CR AGESEN O, 1994, P 9 ANN C OBJ OR PRO, P355
   Aho A.V., 1986, COMPILERS PRINCIPLES
   ANANIAN CS, 2003, P 2003 C LANG COMP T, P59, DOI DOI 10.1145/780732.780741
   ANCKAERT B, 2004, P EUR PAR 2004 C, P284
   [Anonymous], 1998, PROCEEDINGS OF THE 2
   [Anonymous], 2000, PLDI '00
   [Anonymous], 1997, TR971342 U WISC MAD
   Baker BS, 1998, PROCEEDINGS OF THE USENIX 1998 ANNUAL TECHNICAL CONFERENCE, P179
   Beszédes A, 2003, ACM COMPUT SURV, V35, P223, DOI 10.1145/937503.937504
   BRAY G, 1984, P 84 S COMPILER CONS, P276
   CHANG PP, 1992, SOFTWARE PRACT EXPER, V22, P349, DOI 10.1002/spe.4380220502
   Cheung W, 2003, LECT NOTES COMPUT SC, V2826, P17
   Clausen LR, 2000, ACM T PROGR LANG SYS, V22, P471, DOI 10.1145/353926.353933
   Cohn R, 1997, PROCEEDINGS OF THE USENIX WINDOWS NT WORKSHOP, P17
   COOPER K, 1999, P ACM SIGPLAN C PROG, P139
   CORLISS M, 2003, P ACM SIGPLAN 2003 C, P282
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   De Sutter B, 2002, ACM SIGPLAN NOTICES, V37, P275, DOI 10.1145/583854.582445
   De Sutter B, 2000, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED PROCESSING TECHNIQUES AND APPLICATIONS, VOLS I-V, P1013
   Debray S., 2002, PLDI 02 P ACM SIGPLA, P95
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   DEBUS B, 2004, P 2004 ACM SIGPLAN S, P211
   DESUTTER B, 2001, P ACM SIGPLAN WORKSH, P29
   DESUTTER B, 2003, P 2003 ACM SIGPLAN C, P245
   EVANS W, 2001, P 2001 ACM SIGPLAN C
   FERDINAND C, 2001, CONTACT INFINEON FEB, V3, P35
   FLOWER R, 2001, P 4 WORKSH FEEDB DIR
   Franz M, 1997, COMMUN ACM, V40, P87, DOI 10.1145/265563.265576
   Franz M, 1997, LECT NOTES COMPUT SC, V1222, P263
   Franz M, 1997, COMPUTER, V30, P74, DOI 10.1109/2.573670
   FRASER C, 1984, P ACM SIGPLAN S COMP, V19, P117
   FRASER C, 1999, P ACM SIGPLAN 1999 C, P242
   Hookway R. J., 1997, Digital Technical Journal, V9, P3
   KASTNER D, 2002, P JOINT C LANG COMP, P46
   Kemp TM, 1998, IBM J RES DEV, V42, P807, DOI 10.1147/rd.426.0807
   KIROVSKI D, 1997, P 30 ANN INT S MICR
   KISSELL KD, 1997, P REAL TIME SYSTEMS
   KOMONDOOR R, 2001, P 8 STAT ANAL S
   Krinke J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P301, DOI 10.1109/WCRE.2001.957835
   KRISHNASWAMY A, 2002, P ACM SIGPLAN C LANG, P55
   Krishnaswamy Arvind., 2005, ACM Transactions on Embedded Computing Systems (TECS), V4, P3, DOI DOI 10.1145/1053271.1053273
   LAU J, 2003, P 2003 INT C COMP AR, P84
   Lekatsas H, 2003, DES AUT CON, P306
   LEVINE J.R., 2000, LINKERS LOADERS
   MADOU M, 2004, P 2004 INT C EMB SYS, P70
   Muth R, 2001, SOFTWARE PRACT EXPER, V31, P67, DOI 10.1002/1097-024X(200101)31:1<67::AID-SPE357>3.0.CO;2-A
   MUTH R, 1999, THESIS U ARIZONA TUS
   PALEM K, 2002, P LANG COMP TOOLS EM, P28
   Pettis K., 1990, SIGPLAN Notices, V25, P16, DOI 10.1145/93548.93550
   PROEBSTING TA, 1995, PRINCIPLES PROGRAMMI, P322
   PUGH W, 1999, P 1999 ACM SIGPLAN C, P247
   ROS M, 2003, P INT C COMP ARCH SY, P95
   ROSENBERG J, 1983, THESIS CARNEGIE MELL
   Schwarz B, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P45, DOI 10.1109/WCRE.2002.1173063
   Snavely N, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P4, DOI 10.1109/WCRE.2003.1287232
   Srivastava A., 1992, ACM Letters on Programming Languages and Systems, V1, P355, DOI 10.1145/161494.161517
   SRIVASTAVA A, 1994, P ACM SIGPLAN C PROG, P49
   SWEENEY PF, 1998, P ACM SIGPLAN 98 C P, P324
   SZYMANSKI TG, 1978, COMMUN ACM, V21, P300, DOI 10.1145/359460.359474
   Tip F, 2002, ACM T PROGR LANG SYS, V24, P625, DOI 10.1145/586088.586090
   *TRIM TECHN INC, 2000, TRIMEDIA32 ARCH
   Turley J. L., 1995, MICROPROCESSOR REPOR, V9, P1
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   [No title captured]
   [No title captured]
NR 65
TC 28
Z9 55
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2005
VL 27
IS 5
BP 882
EP 945
DI 10.1145/1086642.1086645
PG 64
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 981JL
UT WOS:000233084800003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Rugina, R
   Rinard, MC
AF Rugina, R
   Rinard, MC
TI Symbolic bounds analysis of pointers, array indices, and accessed memory
   regions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE analysis; languages; symbolic analysis; parallelization; static race
   detection
AB This article presents a novel framework for the symbolic bounds analysis of pointers, array indices, and accessed memory regions. Our framework formulates each analysis problem as a system of inequality constraints between symbolic bound polynomials. It then reduces the constraint system to a linear program. The solution to the linear program provides symbolic lower and upper bounds for the values of pointer and array index variables and for the regions of memory that each statement and procedure accesses. This approach eliminates fundamental problems associated with applying standard fixed-point approaches to symbolic analysis problems. Experimental results from our implemented compiler show that the analysis can solve several important problems, including static race detection, automatic parallelization, static detection of array bounds violations, elimination of array bounds checks, and reduction of the number of bits used to store computed values.
C1 Cornell Univ, Dept Comp Sci, Ithaca, NY 14853 USA.
   MIT, Comp Sci Lab, Cambridge, MA 02139 USA.
C3 Cornell University; Massachusetts Institute of Technology (MIT)
RP Cornell Univ, Dept Comp Sci, 4141 Upson Hall, Ithaca, NY 14853 USA.
EM rugina@cs.cornell.edu; rinard@lcs.mit.edu
CR AMARASINGHE S, 1995, P 8 SIAM C PAR PROC
   [Anonymous], P 10 USENIX SEC S WA
   [Anonymous], NETW DISTR SYST SEC
   Asuru J. M., 1992, ACM Letters on Programming Languages and Systems, V1, P109, DOI 10.1145/151333.151392
   AUSTIN T, 1994, P SIGPLAN 94 C PROGR
   BALASUNDARAM V, 1989, P 1989 ACM INT C SUP
   BALASUNDARAM V, 1989, P SIGPLAN 89 C PROGR
   Banerjee U, 1979, THESIS U ILLINOIS UR
   Banerjee U.K., 1988, Dependence Analysis for Supercomputing
   BLUME W, 1995, P 9 INT PAR PROC S S
   BLUME W, 1994, P 7 WORKSH LANG COMP
   Blumofe RD, 1996, J PARALLEL DISTR COM, V37, P55, DOI 10.1006/jpdc.1996.0107
   BODIK R, 2000, P SIGPLAN 00 C PROGR
   BOURDONCLE F, 1993, P SIGPLAN 93 C PROGR
   BOYAPATI C, 2001, P 16 ANN C OBJ OR PR
   BUDIU M, 2000, P EUROPAR 2000 EUR C
   CALLAHAN D, 1990, P 2 ACM SIGPLAN S PR
   CHASE D, 1990, P SIGPLAN 90 C PROGR
   CHATTERJEE S, 1999, P 11 ANN ACM S PAR A
   CHENG G, 1998, P 10 ANN ACM S PAR A
   CHOI JD, 2002, P SIGPLAN 02 C PROGR
   DELINE R, 2001, P SIGPLAN 01 C PROGR
   DETLEFS DL, 1998, 159 COMP SYST RES CT
   DINNING A, 1991, P ACM ONR WORKSH PAR
   DUESTERWALD E, 1991, P 1991 INT S SOFTW T
   EMRATH P, 1988, P ACM SIGPLAN SIGOPS
   EMRATH P, 1989, P SUP 89 REN NEV
   FLANAGAN C, 2002, P SIGPLAN 02 C PROGR
   FLANAGAN C, 2003, P SIGPLAN 03 C PROGR
   Flanagan C., 2000, P SIGPLAN 00 C PROGR
   FLANAGAN C, 1999, P 1999 EUR S PROGR A
   FRENS JD, 1997, P 6 ACM SIGPLAN S PR
   Frigo M., 1998, P SIGPLAN 98 C PROGR
   GHIYA R, 1996, P 23 ANN ACM S PRINC
   GOFF G, 1991, P SIGPLAN 91 C PROGR
   GROSSMAN D, 2002, P SIGPLAN 02 C PROGR
   GUPTA M, 1999, P INT C PAR ARCH COM
   Gupta R., 1993, ACM Letters on Programming Languages and Systems, V2, P135, DOI 10.1145/176454.176507
   GUPTA R, 1990, P SIGPLAN 90 C PROGR
   Gustavson FG, 1997, IBM J RES DEV, V41, P737, DOI 10.1147/rd.416.0737
   HALL M, 1995, P SUP 95 SAN DIEG CA
   HALL MW, 1992, P SUP 92 MINN MINN
   HARRISON WH, 1977, IEEE T SOFTWARE ENG, V3, P243, DOI 10.1109/TSE.1977.231133
   HAVLAK P, 1991, IEEE T PARALL DISTR, V2, P350, DOI 10.1109/71.86110
   KOLTE P, 1995, P SIGPLAN 95 C PROGR
   KONG X, 1990, P 1990 INT C PAR PRO
   MARKSTEIN V, 1982, P SIGPLAN 82 S COMP
   Maydan D., 1991, P SIGPLAN 91 C PROGR
   MELLORCRUMMEEY J, 1991, P SUP 91 ALB NM
   Meyer B., 1992, Eiffel: The Language
   MIN S, 1991, P 3 ACM SIGPLAN S PR
   NECULA G, 1998, P SIGPLAN 98 C PROGR
   NETZER RHB, 1991, P 3 ACM SIGPLAN S PR
   Nielson F., 1999, Principles of Program Analysis
   O'Callahan Robert., 2003, P 9 ACM SIGPLAN S PR
   PATTERSON J, 1995, P SIGPLAN 95 C PROGR
   Pozniansky E., 2003, P 9 ACM SIGPLAN S PR
   PRAUN C, 2003, P SIGPLAN 03 C PROGR
   PRAUN CC, 2001, P 16 ANN C OBJ OR PR
   PUGH W, 1991, P SUP 91 ALB NM
   Rinard MC, 1997, ACM T PROGR LANG SYS, V19, P942, DOI 10.1145/267959.269969
   RUGINA R, 1999, P 7 ACM SIGPLAN S PR
   Rugina Radu., 1999, P SIGPLAN 99 C PROGR
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   SAGIV M, 2002, ACM T PROG LANG SYST, V24
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   STEELE G, 1990, P 17 ANN ACM S PRINC
   STEENSGAARD B, 1996, P 23 ANN ACM S PRINC
   STEPHENSON M, 2000, P SIGPLAN 00 C PROGR
   STERLING N, 1994, P 1993 WINT USENIX C
   SUZUKI N, 1977, 4 ANN ACM S PRINC PR
   TAYLOR RN, 1983, COMMUN ACM, V26, P362, DOI 10.1145/69586.69587
   TRIOLET R, 1986, P SIGPLAN 86 S COMP
   VERBRUGGE C, 1996, P 1996 INT C COMP CO
   WILSON R, 1995, P SIGPLAN 95 C PROGR
   Wolfe Michael Joseph, 1982, Ph. D. Dissertation
   XI H, 1998, P SIGPLAN 98 C PROGR
NR 77
TC 36
Z9 52
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2005
VL 27
IS 2
BP 185
EP 235
DI 10.1145/1057387.1057388
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917RK
UT WOS:000228486700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Hosoya, H
   Vouillon, J
   Pierce, BC
AF Hosoya, H
   Vouillon, J
   Pierce, BC
TI Regular expression types for XML
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE type systems; XML; subtyping
ID AUTOMATA
AB We propose regular expression types as a foundation for statically typed XML processing languages. Regular expression types, like most schema languages for XML, introduce regular expression notations such as repetition (*), alternation (\), etc., to describe XML documents. The novelty of our type system is a semantic presentation of subtyping, as inclusion between the sets of documents denoted by two types. We give several examples illustrating the usefulness of this form of subtyping in XML processing.
   The decision problem for the subtype relation reduces to the inclusion problem between tree automata, which is known to be EXPTIME-complete. To avoid this high complexity in typical cases, we develop a practical algorithm that, unlike classical algorithms based on determinization of tree automata, checks the inclusion relation by a top-down traversal of the original type expressions. The main advantage of this algorithm is that it can exploit the property that type expressions being compared often share portions of their representations. Our algorithm is a variant of Aiken and Murphy's set-inclusion constraint solver, to which are added several new implementation techniques, correctness proofs, and preliminary performance measurements on some small programs in the domain of typed XML processing.
C1 Univ Tokyo, Fac Sci, Bunkyo Ku, Tokyo 113, Japan.
   Univ Paris 07, F-75251 Paris 05, France.
   Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 University of Tokyo; Universite Paris Cite; University of Pennsylvania
RP Univ Tokyo, Fac Sci, Bunkyo Ku, 7th Bld ,Hongo 7-3-1, Tokyo 113, Japan.
EM hahosoya@is.s.u-tokyo.ac.jp; Jerome.Vouillon@pps.jussieu.fr;
   bcpierce@cis.upenn.edu
CR AIKEN A, 1991, LECT NOTES COMPUTER, V523
   AMADIO RM, 1993, ACM T PROG LAND SYST, P104
   [Anonymous], 2000, EXTENSIBLE MARKUP LA
   [Anonymous], XML SCHEMA 0
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Buneman P, 1997, LECT NOTES COMPUT SC, V1186, P336
   BUNEMAN P, 1998, LECT NOTES COMPUTER, V1686
   CAI JZ, 1995, THEOR COMPUT SCI, V145, P189, DOI 10.1016/0304-3975(94)00183-J
   Chawathe SS, 1999, PROCEEDINGS OF THE TWENTY-FIFTH INTERNATIONAL CONFERENCE ON VERY LARGE DATA BASES, P90
   CLARK J, 2001, TREX TREE REGULAR EX
   CLARK J, 1999, XSL TRANSOFRMATIONS
   CLUET S, 1998, P INT WORKSH WEB DAT, P118
   Comon H., 1999, TREE AUTOMATA TECHNI
   DAMM FM, 1994, P THEOR ASP COMP SOF, V789, P687
   Deutsch A., 1998, XML QL QUERY LANGUAG
   Fernandez M, 2001, LECT NOTES COMPUT SC, V1973, P263
   FREEMAN T, 1991, P SIGPLAN 91 S LANG
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   Fuchs Matthew, 1999, SCHEMA OBJECT ORIENT
   GAPEYEV V, 2000, P INT C FUNCT PROGR, P221
   Gilleron R, 1999, INFORM COMPUT, V149, P1, DOI 10.1006/inco.1998.2747
   Goldman R., 1997, VLDB, P436
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   HORNUNG T, 1996, PUBL MATH-DEBRECEN, V48, P309
   Hosoya H, 2003, J FUNCT PROGRAM, V13, P961, DOI 10.1017/S0956796802004410
   HOSOYA H, 2003, 1397 KYOT U RIMS
   HOSOYA H, 2000, LECT NOTES COMPUTER, V1997, P226
   KLARLUND N, 2000, DSD SCHEMA LANGUAGE
   KUPER GM, 2001, P INT C DAT THEOR IC
   MEIJER E, 1999, UNPUB XM FUNCTIONAL
   Milo Tova., 2000, Proc. 19th ACM Symposium on Principles of Database Systems (PODS'2000), P11, DOI DOI 10.1145/335168.335171
   MURATA M, 2001, RELAX
   Murata M., 2000, HEDGE AUTOMATA FORMA
   PAPAKONSTANTINO.Y, 2000, P 19 ACM SIGMOD SIGA, P35
   SEIDL H, 1990, SIAM J COMPUT, V19, P424, DOI 10.1137/0219027
   SHIELDS M, 2001, P 25 ANN ACM SIGPLAN
   Wallace M, 1999, ACM SIGPLAN NOTICES, V34, P148, DOI 10.1145/317765.317794
NR 38
TC 70
Z9 79
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2005
VL 27
IS 1
BP 46
EP 90
DI 10.1145/1053468.1053470
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 896KW
UT WOS:000226934000002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Matsushita, Y
   Tsukada, T
   Kobayashi, N
AF Matsushita, Yusuke
   Tsukada, Takeshi
   Kobayashi, Naoki
TI RustHorn: CHC-based Verification for Rust Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Rust; permission; ownership; pointer; CHC; automated verification
ID INVARIANTS
AB Reduction to satisfiability of constrained Horn clauses (CHCs) is a widely studied approach to automated program verification. Current CHC-based methods, however, do not work very well for pointer-manipulating programs, especially those with dynamic memory allocation. This article presents a novel reduction of pointer-manipulating Rust programs into CHCs, which clears away pointers and memory states by leveraging Rust's guarantees on permission. We formalize our reduction for a simplified core of Rust and prove its soundness and completeness. We have implemented a prototype verifier for a subset of Rust and confirmed the effectiveness of our method.
C1 [Matsushita, Yusuke; Kobayashi, Naoki] Univ Tokyo, Tokyo, Japan.
   [Tsukada, Takeshi] Chiba Univ, Chiba, Japan.
C3 University of Tokyo; Chiba University
RP Matsushita, Y (corresponding author), Univ Tokyo, Tokyo, Japan.
EM yskm24t@is.s.u-tokyo.ac.jp; tsukada@math.s.chiba-u.ac.jp;
   koba@is.s.u-tokyo.ac.jp
OI Matsushita, Yusuke/0000-0002-5208-3106
FU JSPS KAKENHI [JP15H05706, JP16K16004, JP20H05703, JP21J20459]
FX This work was supported by JSPS KAKENHI Grant nos. JP15H05706,
   JP16K16004, JP20H05703 and JP21J20459.
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Alberti F, 2012, LECT NOTES COMPUT SC, V7180, P46, DOI 10.1007/978-3-642-28717-6_7
   [Anonymous], 1974, ROSENFELD
   Astrauskas Vytautas, 2018, LEVERAGING RUST TYPE, DOI [10.3929/ethz-b-000311092, DOI 10.3929/ETHZ-B-000311092]
   Baranowski M, 2018, LECT NOTES COMPUT SC, V11138, P528, DOI 10.1007/978-3-030-01090-4_32
   Barnett M, 2011, COMMUN ACM, V54, P81, DOI 10.1145/1953122.1953145
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Bradley AR, 2006, LECT NOTES COMPUT SC, V3855, P427
   Burn TC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158099
   Champion A, 2018, LECT NOTES COMPUT SC, V11275, P146, DOI 10.1007/978-3-030-02768-1_8
   Champion A, 2018, LECT NOTES COMPUT SC, V10805, P365, DOI 10.1007/978-3-319-89960-2_20
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Coq Team, 2021, COQ PROOF ASSISTANT
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Dropbox, 2020, REWR HEART OUR SYNC
   Erdin Matthias, 2019, Verification of Rust Generics, Typestates, and Traits
   Fedyukovich G, 2019, LECT NOTES COMPUT SC, V11561, P259, DOI 10.1007/978-3-030-25540-4_14
   Fedyukovich G, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P100, DOI 10.23919/FMCAD.2017.8102247
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Gurfinkel A, 2018, LECT NOTES COMPUT SC, V11138, P248, DOI 10.1007/978-3-030-01090-4_15
   Gurfinkel A, 2017, LECT NOTES COMPUT SC, V10422, P148, DOI 10.1007/978-3-319-66706-5_8
   Gurfinkel A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P338, DOI 10.1145/2950290.2950330
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Hahn Florian, 2016, THESIS ETH ZURICH, DOI [10.3929/ethz-a-010669150, DOI 10.3929/ETHZ-A-010669150]
   Hoenicke J, 2017, ACM SIGPLAN NOTICES, V52, P473, DOI 10.1145/3093333.3009893
   Hojjat H, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P158
   Horn A, 1951, J SYMBOLIC LOGIC, V16, P14, DOI DOI 10.2307/2268661
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kahsai T., 2017, LPAR, volume 46 of EPiC Series in Computing, V46, P368
   Kahsai T, 2016, LECT NOTES COMPUT SC, V9779, P352, DOI 10.1007/978-3-319-41528-4_19
   Kalra S, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23082
   Kobayashi N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P222
   Komuravelli A, 2014, LECT NOTES COMPUT SC, V8559, P17
   Lahiri Shuvendu K., 2018, P LECT NOTES COMPUTE, V11138, DOI [10.1007/978-3-030-01090-4, DOI 10.1007/978-3-030-01090-4]
   Lahiri SK, 2004, LECT NOTES COMPUT SC, V2937, P267
   Lindner M, 2018, IEEE INTL CONF IND I, P108, DOI 10.1109/INDIN.2018.8471992
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Matsushita Y., 2021, THESIS U TOKYO
   Matsushita Y, 2020, LECT NOTES COMPUT SC, V12075, P484, DOI 10.1007/978-3-030-44914-8_18
   Microsoft, 2021, BOOG INT VER LANG
   Mozilla, 2021, RUST LANG MOZ RES
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   npm, 2019, RUST CAS STUD COMM M
   Rust Community, 2021, 2094 RFC
   Rust Community, 2021, STD CELL REFCELL RUS
   Rust Community, 2021, STD VEC VEC RUST
   Rust Community, 2021, 2 PHAS BORR
   Rust Community, 2021, REF CYCL CAN LEAK ME
   Rust Community, 2021, MIR MID LEV IR
   Rust Community, 2021, 2025 RFC
   Rust Community, 2021, RUST PROGR LANG
   Rust Community, 2021, STD COLLECTIONS HASH
   Rust Community, 2021, STD THREAD SPAWN RUS
   Rust Community, 2021, STD SYNC MUTEX RUST
   Sato R, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM '19), P47, DOI 10.1145/3294032.3294081
   Stump A, 2001, IEEE S LOG, P29, DOI 10.1109/LICS.2001.932480
   Suenaga K, 2009, LECT NOTES COMPUT SC, V5904, P128, DOI 10.1007/978-3-642-10672-9_11
   Terauchi T, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P1, DOI 10.1145/1375581.1375583
   Toman J, 2015, IEEE INT CONF AUTOM, P75, DOI 10.1109/ASE.2015.77
   Ullrich Sebastian, 2016, ELECTROLYSIS REFEREN
   Ullrich Sebastian, 2016, THESIS KIT
   Vafeiadis V., 2008, Ph. D. Dissertation
   VANEMDEN MH, 1976, J ACM, V23, P733, DOI 10.1145/321978.321991
   Z3 Team, 2021, Z3 THEOR PROV
NR 73
TC 14
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2021
VL 43
IS 4
AR 15
DI 10.1145/3462205
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW8TN
UT WOS:000753685700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Jangda, A
   Bondhugula, U
AF Jangda, Abhinav
   Bondhugula, Uday
TI An Effective Fusion and Tile Size Model for PolyMage
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Fusion; tiling; image processing pipelines; parallelism; locality
AB Effective models for fusion of loop nests continue to remain a challenge in both general-purpose and domain-specific language (DSL) compilers. The difficulty often arises from the combinatorial explosion of grouping choices and their interaction with parallelism and locality. This article presents a new fusion algorithm for high-performance domain-specific compilers for image processing pipelines. The fusion algorithm is driven by dynamic programming and explores spaces of fusion possibilities not covered by previous approaches, and it is also driven by a cost function more concrete and precise in capturing optimization criteria than prior approaches. The fusion model is particularly tailored to the transformation and optimization sequence applied by PolyMage and Halide, two recent DSLs for image processing pipelines. Our model-driven technique when implemented in PolyMage provides significant improvements (up to 4.32x) over PolyMage's approach (which uses auto-tuning to aid its model) and over Halide's automatic approach (by up to 2.46x) on two state-of-the-art shared-memory multicore architectures.
C1 [Jangda, Abhinav; Bondhugula, Uday] Indian Inst Sci, Dept CSA, Bengaluru 560012, India.
C3 Indian Institute of Science (IISC) - Bangalore
RP Jangda, A (corresponding author), Indian Inst Sci, Dept CSA, Bengaluru 560012, India.
EM abhijangda@gmail.com; udayb@iisc.ac.in
FU Science and Engineering Research Board (SERB), India through its
   Extramural Research funding program [EMR/2016/008015]
FX This work was supported in part by a grant (EMR/2016/008015) from the
   Science and Engineering Research Board (SERB), India through its
   Extramural Research funding program.
CR [Anonymous], 2015, POLYMAGE DSL COMPILE
   [Anonymous], 1993, P INT WORKSH LANG CO
   Basu P, 2013, INT C HIGH PERFORM, P452, DOI 10.1109/HiPC.2013.6799131
   Bondhugula U, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P343, DOI 10.1145/1854273.1854317
   Davis EC, 2018, INT SYM CODE GENER, P277, DOI 10.1145/3168832
   Doerfert J, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P25, DOI 10.1145/3178372.3179529
   Gao G., 1992, INT WORKSH LANG COMP, P281
   Google Inc, 2017, XLA ACC LIN ALG TENS
   Jangda A, 2018, ACM SIGPLAN NOTICES, V53, P261, DOI 10.1145/3200691.3178507
   Kennedy K, 2001, INT J PARALLEL PROG, V29, P463, DOI 10.1023/A:1012241830762
   Krishnamoorthy Sriram, 2007, P ACM SIGPLAN C PROG
   Megiddo N., 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P282, DOI 10.1145/258492.258520
   Mehta S, 2013, ACM T ARCHIT CODE OP, V10, DOI 10.1145/2555289.2555292
   Mullapudi RT, 2016, ACM T GRAPHIC, V35, DOI 10.1145/2897824.2925952
   Mullapudi RT, 2015, ACM SIGPLAN NOTICES, V50, P429, DOI [10.1145/2775054.2694364, 10.1145/2694344.2694364]
   Olschanowsky C, 2014, INT CONF HIGH PERFOR, P793, DOI 10.1109/SC.2014.70
   PolyMage project, 2017, POLYMAGE PROJ AP 2 0
   Qasem Apan., 2006, PROC ACM INT C SUPER, P249, DOI DOI 10.1145/1183401.1183437
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Ragan-Kelley J, 2011, ACM T GRAPHIC, V30, DOI 10.1145/1966394.1966396
   Reguly Istvan Z., 2017, ABS170400693 CORR
   Roth G., 1998, Conference Proceedings of the 1998 International Conference on Supercomputing, P125, DOI 10.1145/277830.277857
   Shirako J, 2012, LECT NOTES COMPUT SC, V7210, P101, DOI 10.1007/978-3-642-28652-0_6
   Vasista V, 2017, SC'17: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/3126908.3126968
   WOLF ME, 1991, SIGPLAN NOTICES, V26, P30
   Wonnacott David, 1999, LANGUAGES COMPILERS, P477
   Yi Q, 2004, INT J HIGH PERFORM C, V18, P237, DOI 10.1177/1094342004038956
   Zhou Xing, 2012, P 10 INT S COD GEN O, P207, DOI [DOI 10.1145/2259016.2259044, 10.1145/2259016.2259044]
NR 28
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2020
VL 42
IS 3
AR 12
DI 10.1145/3404846
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PA3QO
UT WOS:000595553200001
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Grimmer, M
   Schatz, R
   Seaton, C
   Würthinger, T
   Luján, M
AF Grimmer, Matthias
   Schatz, Roland
   Seaton, Chris
   Wuerthinger, Thomas
   Lujan, Mikel
TI Cross-Language Interoperability in a Multi-Language Runtime
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Cross-language; language interoperability; virtual machine;
   optimization; language implementation
AB In large-scale software applications, programmers often combine different programming languages because this allows them to use the most suitable language for a given problem, to gradually migrate existing projects from one language to another, or to reuse existing source code. However, different programming languages have fundamentally different implementations, which are hard to combine. The composition of language implementations often results in complex interfaces between languages, insufficient flexibility, or poor performance.
   We propose TruffleVM, a virtual machine (VM) that can execute different programming languages and is able to compose them in a seamless way. TruffleVM supports dynamically-typed languages (e.g., JavaScript and Ruby) as well as statically typed low-level languages (e.g., C). It consists of individual language implementations, which translate source code to an intermediate representation that is executed by a shared VM. TruffleVM composes these different language implementations via generic access. Generic access is a language-agnostic mechanism that language implementations use to access foreign data or call foreign functions. It features language-agnostic messages that the TruffleVM resolves to efficient foreign-language-specific operations at runtime. Generic access supports multiple languages, enables an efficient multi-language development, and ensures high performance.
   We evaluate generic access with two case studies. The first one explains the transparent composition of JavaScript, Ruby, and C. The second one shows an implementation of the C extensions application programming interface (API) for Ruby. We show that generic access guarantees good runtime performance. It avoids conversion or marshalling of foreign objects at the language boundary and allows the dynamic compiler to perform its optimizations across language boundaries.
C1 [Grimmer, Matthias; Schatz, Roland] Oracle Labs Linz, Allenbergerstr 69, A-4040 Linz, Austria.
   [Seaton, Chris] Oracle Labs, 6 Boundary Lane, Heswall CH60 5RR, Cheshire, England.
   [Wuerthinger, Thomas] Oracle Labs Switzerland, Bahnhofstr 100, CH-8001 Zurich, Switzerland.
   [Lujan, Mikel] Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
C3 Oracle; University of Manchester
RP Grimmer, M (corresponding author), Oracle Labs Linz, Allenbergerstr 69, A-4040 Linz, Austria.
EM contact@matthiasgrimmer.com; roland.schatz@oracle.com;
   chris.seaton@oracle.com; thomas.wuerthinger@oracle.com;
   mikel.lujan@manchester.ac.uk
RI Mössenböck, Hanspeter/C-6203-2013
OI Mössenböck, Hanspeter/0000-0001-7706-7308
CR ABADI M, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P213, DOI 10.1145/75277.75296
   [Anonymous], 2007, FACEBOOK WHITE PAPER
   Arnold M, 2005, P IEEE, V93, P449, DOI 10.1109/JPROC.2004.840305
   Barrett E., 2013, P 7 ACM WORKSH VIRT P 7 ACM WORKSH VIRT, P31
   Barrett Edd, 2015, ABS150308623 CORR
   Barrett Edd, 2014, ABS14090757 CORR
   Beazley DM, 1996, PROCEEDINGS OF THE FOURTH ANNUAL TCL/TK WORKSHOP, P129
   BERSHAD BN, 1990, ACM T COMPUT SYST, V8, P37, DOI [10.1145/77648.77650, 10.1145/74851.74861]
   Blume M., 2001, Electronic Notes in Theoretical Computer Science, V59, DOI 10.1016/S1571-0661(05)80452-9
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   Box D., 2002, ESSENTIAL NET COMMON, VI
   Chisnall D, 2013, COMMUN ACM, V56, P50, DOI 10.1145/2534706.2534719
   Daloze B, 2016, ACM SIGPLAN NOTICES, V51, P642, DOI 10.1145/3022671.2984001
   Duboscq Gilles, 2014, P INT C PRINC PRACT, P187, DOI DOI 10.1145/2647508.2647521
   ECMA-International, 2012, ECMA335
   Finne S, 1999, ACM SIGPLAN NOTICES, V34, P114, DOI 10.1145/317765.317790
   FLEMING PJ, 1986, COMMUN ACM, V29, P218, DOI 10.1145/5666.5673
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Gray KE, 2008, LECT NOTES COMPUT SC, V5142, P52, DOI 10.1007/978-3-540-70592-5_4
   Gray KE, 2005, ACM SIGPLAN NOTICES, V40, P231, DOI 10.1145/1103845.1094830
   Grimmer M., 2013, P 2013 INT C PRINCIP, P35, DOI [10.1145/2500828.2500832, DOI 10.1145/2500828.2500832]
   Grimmer M., 2014, P COMPANION PUBLICAT, P17
   Grimmer M., 2015, P 14 INT C MODULARIT, P1
   Grimmer Matthias, 2014, P 9 INT WORKSH IMPL, DOI [10.1145/2633301.2633302, DOI 10.1145/2633301.2633302]
   Grimmer Matthias., 2015, Proceedings of the 10th ACM Workshop on Programming Languages and Analysis for Security, P16, DOI DOI 10.1145/2786558.2786565
   Grimmer Matthias, 2017, P 14 INT C MAN LANG, P12, DOI [10.1145/3132190.3132202, DOI 10.1145/3132190.3132202]
   Grimmer Matthias, 2015, P 11 S DYN LANG DLS
   Hardy Jeff, 2008, ARCHITECTURE OPEN SO, VII
   Hirzel M, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P19
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   Holzle U., 1991, P EUROPEAN C OBJECT, P21, DOI DOI 10.1007/BFB0057013
   International Organization for Standardization, 2007, 9899TC3 ISOIEX
   Jones Simon Peyton, 1997, P HASK WORKSH
   Kalibera Tomas, 2013, P 2013 ACM SIGPLAN I
   Kell S., 2011, P COMP CO LOC WORKSH, P289
   Klock II F., 2007, SCHEM FUNCT PROGR WO
   Lee B, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P207
   Liang S., 1999, Java native interface: programmers guide and reference, V1
   Marr, 2015, P 2015 ACM INT C OBJ
   Matthews J, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P3
   Meijer E., 2001, LANGUAGE, V29, P7
   Mozilla Developer Network, 2014, XPCOM SPEC
   Object Management Group, 2014, COMM OBJ REQ BROOK A
   Reppy JohnH., 2006, Gpce, P49, DOI [10.1145/1173706.1173714, DOI 10.1145/1173706.1173714]
   Rose J. R., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P247, DOI 10.1145/141471.141559
   Seaton Chris, 2014, DLYA, P1
   Stadler L., 2012, Proceedings of the Sixth ACM Workshop on Virtual Machines and Intermediate Languages, VMIL'12, P49, DOI [10.1145/2414740.2414750, DOI 10.1145/2414740.2414750]
   Stadler L., 2013, P 7 ACM WORKSH VIRT, P1, DOI [10.1145/2542142.2542143, DOI 10.1145/2542142.2542143]
   Stadler Lukas, 2013, P 4 WORKSHOP SCALA, P1, DOI [10.1145/2489837.2489846, DOI 10.1145/2489837.2489846]
   Stadler Lukas, 2014, P ANN IEEE ACM INT S, P165, DOI DOI 10.1145/2544137.2544157
   Stepanian Levon., 2005, VEE 05, P121, DOI DOI 10.1145/1064979.1064997
   TC39, 2016, OFF ECMASCRIPT CONF
   Trifonov Valery, 1999, SAFE PRINCIPLED LANG
   Wang Nanbor., 2001, COMPONENT BASED SOFT, P557
   Wegiel M, 2010, ACM SIGPLAN NOTICES, V45, P223, DOI 10.1145/1932682.1869479
   Wimmer Christian, 2013, P 2013 COMP PUBL C S, P17, DOI [10.1145/2508075.2514572, DOI 10.1145/2508075.2514572]
   Woss Andreas, 2014, P 2014 INT C PRINCIP, P133, DOI DOI 10.1145/2647508.2647517
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
   Würthinger T, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2480360.2384587
   Würthinger T, 2017, ACM SIGPLAN NOTICES, V52, P662, DOI [10.1145/3062341.3062381, 10.1145/3140587.3062381]
   Zhang W, 2014, ACM SIGPLAN NOTICES, V49, P727, DOI [10.1145/2714064.2660223, 10.1145/2660193.2660223]
NR 62
TC 18
Z9 21
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2018
VL 40
IS 2
AR 8
DI 10.1145/3201898
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI6TB
UT WOS:000434634500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Leavens, GT
   Naumann, DA
AF Leavens, Gary T.
   Naumann, David A.
TI Behavioral Subtyping, Specification Inheritance, and Modular Reasoning
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Specification; Verification; Behavioral subtyping; supertype
   abstraction; specification inheritance; modularity; specification;
   verification; refinement; state transformer; predicate transformer;
   dynamic dispatch; Eiffel language; JML language
ID OBJECT-ORIENTED PROGRAMS; LOGIC; VERIFICATION; ABSTRACTION; INVARIANTS;
   SEMANTICS; CALCULUS; NOTION; MODEL
AB Verification of a dynamically dispatched method call, E.m(), seems to depend on E's dynamic type. To avoid case analysis and allow incremental development, object-oriented program verification uses supertype abstraction. In other words, one reasons about E.m() using m's specification for E's static type. Supertype abstraction is valid when each subtype in the program is a behavioral subtype. This article semantically formalizes supertype abstraction and behavioral subtyping for a Java-like sequential language with mutation and proves that behavioral subtyping is both necessary and sufficient for the validity of supertype abstraction. Specification inheritance, as in JML, is also formalized and proved to entail behavioral subtyping.
C1 [Leavens, Gary T.] Univ Cent Florida, Comp Sci, Orlando, FL 32816 USA.
   [Naumann, David A.] Stevens Inst Technol, Dept Comp Sci, Castle Point Hudson Hobo, NJ 07030 USA.
C3 State University System of Florida; University of Central Florida
RP Leavens, GT (corresponding author), Univ Cent Florida, Comp Sci, 4000 Cent Florida Blvd, Orlando, FL 32816 USA.
EM leavens@cs.ucf.edu; naumann@cs.stevens.edu
OI Naumann, David/0000-0002-7634-6150
FU NSF [CNS-0808913, CCF-0916350, CCF-0916715, CCF-1017262, CNS-1228695,
   CCF-0915611, CNS-1228930]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [0916715] Funding
   Source: National Science Foundation; Division Of Computer and Network
   Systems; Direct For Computer & Info Scie & Enginr [1228695] Funding
   Source: National Science Foundation
FX G. Leavens was supported in part by NSF grants CNS-0808913, CCF-0916350,
   CCF-0916715, CCF-1017262, and CNS-1228695 and performed some of this
   work while employed at Iowa State University. D. Naumann was supported
   in part by NSF grants CCF-0915611 and CNS-1228930.
CR Alagic S, 2002, LECT NOTES COMPUT SC, V2374, P585
   AMERICA P, 1987, LECT NOTES COMPUT SC, V276, P234
   AMERICA P, 1990, INFORM COMPUT, V84, P129, DOI 10.1016/0890-5401(90)90037-I
   AMERICA P, 1991, LECT NOTES COMPUT SC, V489, P60, DOI 10.1007/BFb0019440
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   [Anonymous], 2004, Concepts, techniques, and models of computer programming
   Apt K.R., 2009, Texts in Computer Science, DOI 10.1007/978-1-84882-745-5
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   Apt KR, 2012, J COMPUT SYST SCI, V78, P823, DOI 10.1016/j.jcss.2011.08.002
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1988, ACTA INFORM, V25, P593, DOI 10.1007/BF00291051
   Banerjee A, 2005, J ACM, V52, P894, DOI 10.1145/1101821.1101824
   Banerjee A, 2013, J ACM, V60, DOI [10.1145/2487241.2485981, 10.1145/2485981]
   Banerjee Anindya, 2001, Lecture Notes in Computer Science, V2215, P420, DOI [DOI 10.1007/3-540-45500-0_21, 10.1007/3-540-45500-0_21]
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   BARNETT M, 2005, LECT NOTES COMPUTER, V4171, P144
   Beckert B., 2007, LECT NOTES ARTIFICIA, V4334
   Biering B, 2005, LECT NOTES COMPUT SC, V3444, P233
   Borba P, 2004, SCI COMPUT PROGRAM, V52, P53, DOI 10.1016/j.scico.2004.03.003
   BRUCE KB, 1986, SIGPLAN NOTICES, V21, P163, DOI 10.1145/323648.323756
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   CHEN Y, 2000, FDN COMPONENT BASED, P91
   Cheon Y, 2005, SOFTWARE PRACT EXPER, V35, P583, DOI 10.1002/spe.649
   Chin WN, 2008, ACM SIGPLAN NOTICES, V43, P87, DOI 10.1145/1328897.1328452
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   Dhara KK, 1996, PROC INT CONF SOFTW, P258, DOI 10.1109/ICSE.1996.493421
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dovland J, 2008, LECT NOTES COMPUT SC, V5014, P52, DOI 10.1007/978-3-540-68237-0_6
   Dovland J, 2011, SCI COMPUT PROGRAM, V76, P915, DOI 10.1016/j.scico.2010.09.006
   Dovland J, 2010, J LOGIC ALGEBR PROGR, V79, P578, DOI 10.1016/j.jlap.2010.07.008
   ECMA International, 2006, EIFF AN DES PROGR LA
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Findler R. B., 2001, Software Engineering Notes, V26, P229, DOI 10.1145/503271.503240
   Findler RB, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/504311.504283
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Harel David., 1977, STOC, P249
   HESSELINK W, 1993, PROGRAMS RECURSION U
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kleymann T., 1999, Formal Aspects of Computing, V11, P541, DOI 10.1007/s001650050057
   Leavens GT, 2006, LECT NOTES COMPUT SC, V4260, P2
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Leavens GaryT., 2000, FDN COMPONENT BASED, P113
   LEAVENS GT, 1995, ACTA INFORM, V32, P705, DOI 10.1007/BF01178658
   LEAVENS GT, 2006, 200607 CS STEV I TEC
   LEAVENS GT, 1990, 9009 IOW STAT U DEP
   Leavens GT, 1989, 439 MIT LAB COMP SCI
   Leino KRM, 2006, LECT NOTES COMPUT SC, V3924, P115
   Leino KRM, 2002, ACM T PROGR LANG SYS, V24, P491, DOI 10.1145/570886.570888
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P17, DOI 10.1145/62139.62141
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Meyer Bertrand, 1985, Technical Report TR-CS-85-19
   MORGAN C, 1988, ACM T PROGR LANG SYS, V10, P403, DOI 10.1145/44501.44503
   Morgan Carroll, 1994, Programming from specifications
   MULLER P, 2002, LECT NOTES COMPUTER, V2262
   Müller P, 2006, SCI COMPUT PROGRAM, V62, P253, DOI 10.1016/j.scico.2006.03.001
   Naumann DA, 2005, LECT NOTES COMPUT SC, V3603, P211
   Naumann DA, 2001, INFORM PROCESS LETT, V77, P201, DOI 10.1016/S0020-0190(00)00215-5
   Naumann DA, 2006, THEOR COMPUT SCI, V365, P143, DOI 10.1016/j.tcs.2006.07.035
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   OLDEROG ER, 1983, THEOR COMPUT SCI, V24, P337, DOI 10.1016/0304-3975(83)90009-9
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   PARKINSON M. J, 2005, 654 U CAMBR COMP LAB
   Parkinson MJ, 2008, ACM SIGPLAN NOTICES, V43, P75, DOI 10.1145/1328897.1328451
   Pierik C, 2005, THEOR COMPUT SCI, V343, P413, DOI 10.1016/j.tcs.2005.06.018
   Pierik C., 2006, THESIS U UTRECHT
   Pierik Cees, 2005, P ECOOP WORKSH FORM
   Poetzsch-Heffter A, 1999, LECT NOTES COMPUT SC, V1576, P162
   Polikarpova N, 2014, LECT NOTES COMPUT SC, V8442, P514, DOI 10.1007/978-3-319-06410-9_35
   Poll Erik, 2000, ELECT NOTES THEORETI, V33, P276
   Reus B, 2003, LECT NOTES COMPUT SC, V2803, P456
   REYNOLDS JC, 1982, TOOLS NOTIONS PROGRA, P121
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Rustan K, 2005, INFORM PROCESS LETT, V93, P281, DOI 10.1016/j.ipl.2004.10.015
   RUSTAN K, 1995, CALTECHCSTR9503
   von Oheimb D., 2002, FME 2002: Formal Methods-Getting IT Right. International Symposium of Formal Methods Europe (Lecture Notes in Computer Science Volume 2391), P89
   WILLS A, 1992, OBJECT ORIENTATION Z, P127
   WING J, 1983, TR299 MIT LAB COMP S
   Zwiers J., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P595
NR 83
TC 8
Z9 9
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2015
VL 37
IS 4
AR 13
DI 10.1145/2766446
PG 88
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CP6NT
UT WOS:000360005000003
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Frechtling, M
   Leong, PHW
AF Frechtling, Michael
   Leong, Philip H. W.
TI MCALIB: Measuring Sensitivity to Rounding Error with Monte Carlo
   Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Reliability; Verification; Floating point arithmetic; dynamic
   error analysis; Monte Carlo arithmetic
ID WORD-LENGTH OPTIMIZATION; BIT-WIDTH OPTIMIZATION; ACCURACY; INTERVAL;
   LIBRARY; DESIGN
AB Runtime analysis provides an effective method for measuring the sensitivity of programs to rounding errors. To date, implementations have required significant changes to source code, detracting from their widespread application. In this work, we present an open source system that automates the quantitative analysis of floating point rounding errors through the use of C-based source-to-source compilation and a Monte Carlo arithmetic library. We demonstrate its application to the comparison of algorithms, detection of catastrophic cancellation, and determination of whether single precision floating point provides sufficient accuracy for a given application. Methods for obtaining quantifiable measurements of sensitivity to rounding error are also detailed.
C1 [Frechtling, Michael; Leong, Philip H. W.] Univ Sydney, Comp Engn Lab, Darlington, NSW 2006, Australia.
C3 University of Sydney
RP Frechtling, M (corresponding author), Univ Sydney, Comp Engn Lab, Bldg J03, Darlington, NSW 2006, Australia.
EM michael.frechtling@sydney.edu.au; philip.leong@sydney.edu.au
RI Leong, Philip H.W./IVH-1108-2023
OI Leong, Philip H.W./0000-0002-3923-3499; leong, wai
   yie/0000-0002-5389-1121
CR Amaricai A, 2009, PRIME: PROCEEDINGS OF THE CONFERENCE 2009 PHD RESEARCH IN MICROELECTRONICS AND ELECTRONICS, P12, DOI 10.1109/RME.2009.5201307
   [Anonymous], P ACM SIGPLAN C PROG
   [Anonymous], INTERVAL ARITHMETIC
   [Anonymous], 7542008 IEEE FLOAT P
   [Anonymous], P 9 ANN IEEE S FIELD
   [Anonymous], CSE 690 HOME PROJECT
   [Anonymous], 1990, COMPUTER ARCHITECTUR
   [Anonymous], MONTE CARLO ARITHMET
   [Anonymous], 1996, Accuracy and Stability of Numerical Algorithms
   [Anonymous], TRANSFORMING RECONFI
   [Anonymous], NUMERICAL METHODS UN
   [Anonymous], P IEEE INT C FIELD P
   [Anonymous], FLOATING POINT COMPU
   [Anonymous], 1993, C XSC C CLASS LIB EX
   [Anonymous], GAOL NOT JUST ANOTHE
   [Anonymous], J UNIVERSAL COMPUTER
   [Anonymous], 2009, Handbook of Floating-Point Arithmetic
   [Anonymous], C IMPLEMENTATION LIN
   [Anonymous], P APPL MATH MECH
   [Anonymous], P UCB STAT C EV HALL
   [Anonymous], P 9 INT C EL CIRC SY
   [Anonymous], P 5 INT C SUP
   [Anonymous], P WORKSH REC COMP HI
   [Anonymous], 2002, Algorithms for minimization without derivatives
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2005, PRENTICE HALL MODERN
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Brönnimann H, 2006, THEOR COMPUT SCI, V351, P111, DOI 10.1016/j.tcs.2005.09.062
   Brown A. W., 2007, Proceedings of the 1st HiPEAC Workshop on Reconfigurable Computing, P6
   Constantinides GA, 2006, ACM T DES AUTOMAT EL, V11, P26, DOI 10.1145/1124713.1124716
   Constantinides GA, 2002, ANN IEEE SYM FIELD P, P219, DOI 10.1109/FPGA.2002.1106676
   Constantinides GA, 2003, ANN IEEE SYM FIELD P, P81
   Constantinides GA, 2003, IEEE T COMPUT AID D, V22, P1432, DOI 10.1109/TCAD.2003.818119
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Daumas M, 2010, ACM T MATH SOFTWARE, V37, DOI 10.1145/1644001.1644003
   de Figueiredo LH, 2004, NUMER ALGORITHMS, V37, P147, DOI 10.1023/B:NUMA.0000049462.70970.b6
   Delmas D, 2007, LECT NOTES COMPUT SC, V4634, P437
   Delmas D, 2009, LECT NOTES COMPUT SC, V5825, P53
   Deutsch Alain, 2003, ACM SIGADA 2003 C
   Dongarra JJ, 2003, CONCURR COMP-PRACT E, V15, P803, DOI 10.1002/cpe.728
   FOSTER I, 1994, ACM T PROGR LANG SYS, V16, P577, DOI 10.1145/177492.177612
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Fox John, 2002, R S-Plus Companion Appl. Regres, V91
   Gaffar AA, 2004, ANN IEEE SYM FIELD P, P79, DOI 10.1109/FCCM.2004.59
   Gaffar AA, 2002, LECT NOTES COMPUT SC, V2438, P523
   Goubault E, 2006, LECT NOTES COMPUT SC, V4134, P18
   Hammersley J.M., 1964, MONTE CARLO METHODS, V1
   HIGHAM NJ, 1993, SIAM J SCI COMPUT, V14, P783, DOI 10.1137/0914050
   Howden W. E., 1980, ACM Transactions on Programming Languages and Systems, V2, P307, DOI 10.1145/357103.357107
   HUBER PJ, 1964, ANN MATH STAT, V35, P73, DOI 10.1214/aoms/1177703732
   Jézéquel F, 2008, COMPUT PHYS COMMUN, V178, P933, DOI 10.1016/j.cpc.2008.02.003
   KAHAN W, 1965, COMMUN ACM, V8, P40, DOI 10.1145/363707.363723
   KAHAN W., 2006, How futile are mindless assessments of roundoff in floating-point computation?
   Kildall Gary A., 1973, Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'73, P194
   Lee DU, 2006, IEEE T COMPUT AID D, V25, P1990, DOI 10.1109/TCAD.2006.873887
   Lee DU, 2005, DES AUT CON, P837, DOI 10.1109/DAC.2005.193931
   LINZ P, 1970, COMMUN ACM, V13, P361, DOI 10.1145/362384.362498
   LIU DC, 1989, MATH PROGRAM, V45, P503, DOI 10.1007/BF01589116
   MALCOLM MA, 1971, COMMUN ACM, V14, P731, DOI 10.1145/362854.362889
   Monniaux D, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353446
   MORE JJ, 1994, ACM T MATH SOFTWARE, V20, P286, DOI 10.1145/192115.192132
   Nguyen TVN, 2005, ACM T PROGR LANG SYS, V27, P527, DOI 10.1145/1065887.1065893
   Osborne WG, 2007, I C FIELD PROG LOGIC, P617, DOI 10.1109/FPL.2007.4380730
   Parker DS, 1997, Monte Carlo arithmetic: exploiting randomness in floating-point arithmetic
   Press W. H., 2007, NUM REC ART SCI COMP
   Rivlin T., 1990, Pure and Applied Mathematics: A Wiley Series of Texts, Monographs and Tracts
   ROSENBROCK HH, 1960, COMPUT J, V3, P175, DOI 10.1093/comjnl/3.3.175
   Schulte MJ, 2000, IEEE T COMPUT, V49, P387, DOI 10.1109/12.859535
   Stine JE, 1998, PR GR LAK SYMP VLSI, P208, DOI 10.1109/GLSV.1998.665227
   VIGNES J, 1996, P 2 REAL NUMB COMP C, P233
   Wilkinson J. H., 1994, Rounding Errors in Algebraic Processes
   Yeung JHC, 2011, FPGA 11: PROCEEDINGS OF THE 2011 ACM/SIGDA INTERNATIONAL SYMPOSIUM ON FIELD PROGRAMMABLE GATE ARRAYS, P199
NR 73
TC 8
Z9 11
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2015
VL 37
IS 2
AR 5
DI 10.1145/2665073
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG7HR
UT WOS:000353474100001
OA Bronze
DA 2024-07-18
ER

PT J
AU Nowatzki, T
   Sartin-Tarm, M
   De Carli, L
   Sankaralingam, K
   Estan, C
   Robatmili, B
AF Nowatzki, Tony
   Sartin-Tarm, Michael
   De Carli, Lorenzo
   Sankaralingam, Karthikeyan
   Estan, Cristian
   Robatmili, Behnam
TI A Scheduling Framework for Spatial Architectures Across Multiple
   Constraint-Solving Theories
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Algorithms; Performance; Spatial architectures; spatial
   architecture scheduling; Satisfiability Modulo Theories; integer linear
   programming
ID SILICON; MODULO
AB Spatial architectures provide energy-efficient computation but require effective scheduling algorithms. Existing heuristic-based approaches offer low compiler/architect productivity, little optimality insight, and low architectural portability.
   We seek to develop a spatial-scheduling framework by utilizing constraint-solving theories and find that architecture primitives and scheduler responsibilities can be related through five abstractions: computation placement, data routing, event timing, resource utilization, and the optimization objective. We encode these responsibilities as 20 mathematical constraints, using SMT and ILP, and create schedulers for the TRIPS, DySER, and PLUG architectures. Our results show that a general declarative approach using constraint solving is implementable, is practical, and can outperform specialized schedulers.
C1 [Nowatzki, Tony; De Carli, Lorenzo; Sankaralingam, Karthikeyan] Univ Wisconsin, 1210 W Dayton St, Madison, WI 53706 USA.
   [Sartin-Tarm, Michael] Univ Wisconsin Madison, Cedar Rapids, IA 52402 USA.
   [Estan, Cristian] Google Inc, Mountain View, CA 94043 USA.
   [Robatmili, Behnam] Qualcomm Res Silicon Valley, Santa Clara, CA 95051 USA.
C3 University of Wisconsin System; University of Wisconsin Madison; Google
   Incorporated; Qualcomm
RP Nowatzki, T (corresponding author), Univ Wisconsin, 1210 W Dayton St, Madison, WI 53706 USA.
EM tjn@cs.wisc.edu; msartintarm@gmail.com; lorenzo@cs.wisc.edu;
   karu@cs.wisc.edu; estan@google.com; ehnamr@qti.qualcomm.com
RI Nowatzki, Tony/U-1173-2019
OI Nowatzki, Tony/0000-0001-8483-3824; De Carli,
   Lorenzo/0000-0003-0432-3686
FU National Science Foundation [CCF-0845751, CNS-0917213, CNS-0917238]
FX This work is supported by the National Science Foundation, under grants:
   CCF-0845751, CNS-0917213, and CNS-0917238. The majority of work
   completed while B. Robatmili was a PhD student at UT-Austin.
CR Amarasinghe S., 2002, TECHNICAL REPORT
   AMELLAL S, 1994, IEEE T COMPUT AID D, V13, P537, DOI 10.1109/43.277628
   ANCOURT C, 1991, SIGPLAN NOTICES, V26, P39, DOI 10.1145/109626.109631
   [Anonymous], P 14 INT C ARCH SUPP
   [Anonymous], 2008, TACAS
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Azizi O, 2010, CONF PROC INT SYMP C, P26, DOI 10.1145/1816038.1815967
   Bhattacharyya Shuvra S., 1996, SOFTWARE SYNTHESIS D
   Borkar S, 2011, COMMUN ACM, V54, P67, DOI 10.1145/1941487.1941507
   Burger D, 2004, COMPUTER, V37, P44, DOI 10.1109/MC.2004.65
   Cimatti A, 2010, LECT NOTES COMPUT SC, V6015, P99, DOI 10.1007/978-3-642-12002-2_8
   Clark N, 2004, INT SYMP MICROARCH, P30
   Cong Jason, 2009, IEEE T VERY LARGE SC, V17, P9
   Coons KE, 2006, ACM SIGPLAN NOTICES, V41, P129, DOI 10.1145/1168919.1168875
   De Carli L, 2009, ACM SIGCOMM COMP COM, V39, P207, DOI 10.1145/1594977.1592593
   Deb A, 2011, PROCEEDINGS OF THE 2011 8TH ACM INTERNATIONAL CONFERENCE ON COMPUTING FRONTIERS (CF 2011), DOI 10.1145/2016604.2016606
   Eichenberger AE, 1997, ACM SIGPLAN NOTICES, V32, P194, DOI 10.1145/258916.258933
   Eisenbeis Christine, 1996, RR2781 INR
   Ellis John R., 1985, THESIS
   Engels DW, 2001, SIAM PROC S, P577
   Esmaeilzadeh H, 2012, INT SYMP MICROARCH, P449, DOI 10.1109/MICRO.2012.48
   Esmaeilzadeh H, 2011, ISCA 2011: PROCEEDINGS OF THE 38TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P365, DOI 10.1145/2024723.2000108
   Fan K, 2008, INT SYM CODE GENER, P124
   Feautrier P., 1994, LECT NOTES COMPUTER, P1
   Gordon Geoffrey J., P 25 C UNC ART INT U
   Govindarajan Ramaswamy, 1994, P C VECT PAR PROC CO
   Govindaraju V, 2012, IEEE MICRO, V32, P38, DOI 10.1109/MM.2012.51
   Govindaraju V, 2011, INT S HIGH PERF COMP, P503, DOI 10.1109/HPCA.2011.5749755
   Gupta S, 2011, INT SYMP MICROARCH, P12
   Hardavellas N, 2011, IEEE MICRO, V31, P6, DOI 10.1109/MM.2011.77
   Hooker JN, 2002, INFORMS J COMPUT, V14, P295, DOI 10.1287/ijoc.14.4.295.2828
   Hooker John N., 1999, DISCRETE APPL MATH, V96-97, P1
   Huang Z., 2004, ACM T EMBED COMPUT S, V3, P361
   Joshi R, 2002, ACM SIGPLAN NOTICES, V37, P304, DOI 10.1145/543552.512566
   Kailas K, 2001, HPCA: SEVENTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTING ARCHITECTURE, PROCEEDINGS, P133, DOI 10.1109/HPCA.2001.903258
   Kroening D., 2010, DECISION PROCEDURES
   Kudlur M, 2008, ACM SIGPLAN NOTICES, V43, P114, DOI 10.1145/1379022.1375596
   Kumar A, 2010, PACT 2010: PROCEEDINGS OF THE NINETEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P331, DOI 10.1145/1854273.1854316
   Lee W, 1998, ACM SIGPLAN NOTICES, V33, P46, DOI 10.1145/291006.291018
   Mercaldi M, 2006, ACM SIGPLAN NOTICES, V41, P141, DOI 10.1145/1168918.1168876
   Mercaldi Martha, 2006, P 18 ACM S PAR ALG A
   Mishra M, 2006, ACM SIGPLAN NOTICES, V41, P163, DOI 10.1145/1168918.1168878
   Nagarajan R, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P74
   Özer E, 1998, 31ST ANNUAL ACM/IEEE INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P308, DOI 10.1109/MICRO.1998.742792
   Palsberg Jens, 2004, ILP BASED RESOURE AW
   Park H, 2008, PACT'08: PROCEEDINGS OF THE SEVENTEENTH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, P166, DOI 10.1145/1454115.1454140
   Pugh William, 1991, P 1991 ACM IEEE C SU
   Sartin-Tarm Michael, 2013, Computer Architecture News, V41, P17
   Satish Nadathur, 2007, DATE 07
   SHOSTAK RE, 1984, J ACM, V31, P1, DOI 10.1145/2422.322411
   Swanson S, 2003, 36TH INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P291
   Thuresson M., 2007, P INT C EMB COMP SYS
   VENKATESH G., 2010, P 15 INT C ARCH SUPP
   Wagner H.M., 1959, NAV RES LOGIST Q, V6, P131, DOI [10.1002/nav.3800060205, DOI 10.1002/NAV.3800060205]
   Waingold E, 1997, COMPUTER, V30, P86, DOI 10.1109/2.612254
   Watkins MA, 2008, I C FIELD PROG LOGIC, P299, DOI 10.1109/FPL.2008.4629948
   Wolsey Laurence A., 1999, INTEGER COMBINATORIA
NR 57
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2015
VL 37
IS 1
AR 2
DI 10.1145/2658993
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5AP
UT WOS:000348919700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Alglave, J
   Maranget, L
   Tautschnig, M
AF Alglave, Jade
   Maranget, Luc
   Tautschnig, Michael
TI Herding Cats: Modelling, Simulation, Testing, and Data Mining for Weak
   Memory
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Experimentation; Verification; Concurrency; weak memory models;
   software verification
ID SHARED-MEMORY; VERIFICATION; CONSISTENCY; CHECKING; EXECUTION;
   EFFICIENT; SEMANTICS; PROGRAM
AB We propose an axiomatic generic framework for modelling weak memory We show how to instantiate this framework for Sequential Consistency (SC), Total Store Order (TSO), C++ restricted to release-acquire atomics, and Power. For Power, we compare our model to a preceding operational model in which we found a flaw. To do so, we define an operational model that we show equivalent to our axiomatic model.
   We also propose a model for ARM. Our testing on this architecture revealed a behaviour later acknowledged as a bug by ARM, and more recently, 31 additional anomalies.
   We offer a new simulation tool, called herd, which allows the user to specify the model of his choice in a concise way. Given a specification of a model, the tool becomes a simulator for that model. The tool relies on an axiomatic description; this choice allows us to outperform all previous simulation tools. Additionally, we confirm that verification time is vastly improved, in the case of bounded model checking.
   Finally, we put our models in perspective, in the light of empirical data obtained by analysing the C and C++ code of a Debian Linux distribution. We present our new analysis tool, called mole, which explores a piece of code to find the weak memory idioms that it uses.
C1 [Alglave, Jade] UCL, Dept Comp Sci, London WC1E 6BT, England.
   [Maranget, Luc] INRIA, Valbonne, France.
   [Tautschnig, Michael] Queen Mary Univ London, Sch Elect Engn & Comp Sci, London E1 4NS, England.
C3 University of London; University College London; Inria; University of
   London; Queen Mary University London
RP Alglave, J (corresponding author), UCL, Dept Comp Sci, Gower St, London WC1E 6BT, England.
EM J.Alglave@cs.ucl.ac.uk; Luc.Maranget@inria.fr;
   michael.tautschnig@qmul.ac.uk
FU EPSRC [EP/K039431/1] Funding Source: UKRI
CR Abdulla PA, 2013, LECT NOTES COMPUT SC, V7795, P530, DOI 10.1007/978-3-642-36742-7_37
   Abdulla PA, 2012, LECT NOTES COMPUT SC, V7214, P204, DOI 10.1007/978-3-642-28756-5_15
   Adir A, 2003, IEEE T PARALL DISTR, V14, P502, DOI 10.1109/TPDS.2003.1199067
   Adve SV, 2010, COMMUN ACM, V53, P90, DOI 10.1145/1787234.1787255
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   Alglave Jade, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P50, DOI 10.1007/978-3-642-22110-1_6
   Alglave J., 2010, THESIS, P7
   Alglave J, 2013, LECT NOTES COMPUT SC, V7792, P512, DOI 10.1007/978-3-642-37036-6_28
   Alglave J, 2012, FORM METHOD SYST DES, V41, P178, DOI 10.1007/s10703-012-0161-5
   Alglave J, 2012, FORM METHOD SYST DES, V40, P170, DOI 10.1007/s10703-011-0135-z
   Alglave J, 2011, LECT NOTES COMPUT SC, V6605, P41, DOI 10.1007/978-3-642-19835-9_5
   Alglave J, 2010, LECT NOTES COMPUT SC, V6174, P258, DOI 10.1007/978-3-642-14295-6_25
   Alglave Jade, 2011, Proceedings (Lecture Notes in Computer Science, V7078, P272, DOI [10.1007/ 978-3-642-25318- 8_21, DOI 10.1007/978-3-642-25318-8_21]
   Alglave Jade, 2009, P 4 WORKSH DECL ASP, P13, DOI DOI 10.1145/1481839.1481842
   [Anonymous], 2009, INT 64 IA 32 ARCH SO
   [Anonymous], 1994, The SPARC architecture manual
   [Anonymous], 1988, CSTR18088 PRINC U
   ARM Limited, 2010, ARM ARCH REF MAN ARM
   ARM Ltd, 2011, CORT A9 MPCORE PROGR
   Arvind, 2006, Computer Architecture News, V34, P29, DOI 10.1145/1150019.1136489
   Atig Mohamed Faouzi, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P99, DOI 10.1007/978-3-642-22110-1_9
   ATIG MF, 2012, P ESOP, V7211, P26
   Atig MF, 2010, ACM SIGPLAN NOTICES, V45, P7, DOI 10.1145/1707801.1706303
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bertot Y., 2004, TEXT THEORET COMP S
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Boehm HJ, 2012, COMMUN ACM, V55, P48, DOI 10.1145/2076450.2076465
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Bouajjani A, 2011, LECT NOTES COMPUT SC, V6756, P428, DOI 10.1007/978-3-642-22012-8_34
   Boudol G, 2012, ELECTRON PROC THEOR, P19, DOI 10.4204/EPTCS.89.3
   Boudol G, 2009, ACM SIGPLAN NOTICES, V44, P392, DOI 10.1145/1594834.1480930
   Burckhardt S, 2007, ACM SIGPLAN NOTICES, V42, P12, DOI 10.1145/1273442.1250737
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Burckhardt Sebastian, 2008, P WORKSH EXPL CONC E
   Burckhardt Sebastian, 2013, TR201339 MICR RES
   Cenciarelli P, 2007, LECT NOTES COMPUT SC, V4421, P331
   CHONG N, 2008, P MSPC
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Collier WilliamW., 1992, Reasoning about Parallel Architectures
   Compaq Computer Corporation, 2002, ALPH ARCH REF MAN
   Gharachorloo K., 1990, Proceedings. The 17th Annual International Symposium on Computer Architecture (Cat. No.90CH2887-8), P15, DOI 10.1109/ISCA.1990.134503
   Goodman James R, 1989, TECHNICAL REPORT
   Gopalakrishnan G, 2004, LECT NOTES COMPUT SC, V3114, P401
   Gordon MJC, 2002, COMPUT J, V45, P27, DOI 10.1093/comjnl/45.1.27
   Grisenthwaite R., 2009, ARM BARRIER LITMUS T
   Hangal S, 2004, CONF PROC INT SYMP C, P114
   Hoare C. A. R., 1974, Acta Informatica, V3, P135, DOI 10.1007/BF00264034
   Howells David, 2013, LINUX KERNEL MEMORY
   IBM Corp, 2009, POW ISA VERS 2 06
   Intel Corporation, 2002, FORM SPEC INT IT PRO
   ISO, 2011, ISO/ IEC 9899: 2011 Information technologyProgramming languages-C
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Kahlon V, 2007, LECT NOTES COMPUT SC, V4590, P226
   Kuperstein M, 2011, ACM SIGPLAN NOTICES, V46, P187, DOI 10.1145/1993316.1993521
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Liu F, 2012, ACM SIGPLAN NOTICES, V47, P429, DOI 10.1145/2345156.2254115
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Mador-Haim S, 2010, LECT NOTES COMPUT SC, V6174, P273, DOI 10.1007/978-3-642-14295-6_26
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   McKenney Paul E., 2007, WHAT IS RCU FUNDAMEN
   Nardelli Francesco Zappa, 2009, P WORKSH EXPL CONC E
   Neiger Gil, 2000, TUT WORKSH FORM SPEC
   Owens Scott, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P363, DOI 10.1007/978-3-642-22863-6_27
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   SARKAR S, 2012, P PLDI, V47, P311
   Sarkar S, 2011, ACM SIGPLAN NOTICES, V46, P175, DOI 10.1145/1993316.1993520
   Sarkar S, 2009, ACM SIGPLAN NOTICES, V44, P379, DOI 10.1145/1594834.1480929
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   SPARC International Inc, 1992, SPARC ARCH MAN VERS
   Steinke RC, 2004, J ACM, V51, P800, DOI 10.1145/1017460.1017464
   Tarjan R., 1973, SIAM Journal on Computing, V2, P211, DOI 10.1137/0202017
   Tendler JM, 2002, IBM J RES DEV, V46, P5, DOI 10.1147/rd.461.0005
   Torlak E, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1809028.1806635
   Yang Y., 2004, P IPDPS
NR 76
TC 176
Z9 191
U1 0
U2 9
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2014
VL 36
IS 2
AR 7
DI 10.1145/2627752
PG 74
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM4YE
UT WOS:000339861300003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Markstrum, S
   Marino, D
   Esquivel, M
   Millstein, T
   Andreae, C
   Noble, J
AF Markstrum, Shane
   Marino, Daniel
   Esquivel, Matthew
   Millstein, Todd
   Andreae, Chris
   Noble, James
TI JAVACOP: Declarative Pluggable Types for Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Reliability; JAVACOP; pluggable type systems
AB Pluggable types enable users to enforce multiple type systems in one programming language. We have developed a suite of tools, called the JAVACOP framework, that allows developers to create pluggable type systems for Java. JAVACOP provides a simple declarative language in which program constraints are defined over a program's abstract syntax tree. The JAVACOP compiler automatically enforces these constraints on programs during compilation. The JAVACOP framework also includes a dataflow analysis API in order to support type systems which depend on flow-sensitive information. Finally, JAVACOP includes a novel test framework which helps users gain confidence in the correctness of their pluggable type systems. We demonstrate the framework by discussing a number of pluggable type systems which have been implemented in JAVACOP in order to detect errors and enforce strong invariants in programs. These type systems range from general-purpose checkers, such as a type system for nonnull references, to domain-specific ones, such as a checker for conformance to a library's usage rules.
C1 [Markstrum, Shane] Bucknell Univ, Dept Comp Sci, Lewisburg, PA 17837 USA.
   [Marino, Daniel; Esquivel, Matthew; Millstein, Todd] Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
   [Andreae, Chris; Noble, James] Victoria Univ Wellington, Wellington, New Zealand.
C3 Bucknell University; University of California System; University of
   California Los Angeles; Victoria University Wellington
RP Markstrum, S (corresponding author), Bucknell Univ, Dept Comp Sci, POB A0551,701 Moore Ave, Lewisburg, PA 17837 USA.
EM smark-str@cs.ucla.edu
OI Noble, James/0000-0001-9036-5692
FU National Science Foundation [CCF-0427202, CCF-0545850, OISE-0813362];
   IBM; Royal Society of New Zealand
FX This material is based upon work supported by the National Science
   Foundation under Grant Nos. CCF-0427202, CCF-0545850, and OISE-0813362;
   by a gift from Microsoft Research; by an IBM Eclipse Innovation Grant
   and an IBM Faculty Award; and by the Royal Society of New Zealand
   Marsden Fund.
CR ALDRICH J, 2002, P ACM C OBJ OR PROGR, P311
   ANDREAE C, 2006, P 21 ANN ACM SIGPLAN, P57
   Andreae C, 2006, LECT NOTES COMPUT SC, V4067, P124
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   [Anonymous], 2007, P 6 JOINT M EUR SOFT
   Arnold K., 2000, The Java Programming Language, V3rd ed
   BLOCH J, 2002, 175 JSR
   Boyapati C., 2002, ISSTA 02, P123, DOI DOI 10.1145/566172.566191
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Boyland John., 2001, ECOOP'Ol - Object-Oriented Programming, 15th European Conference, number 2072 in Lecture Notes in Computer Science, P2, DOI [10.1007/3-540-45337-7_2, DOI 10.1007/3-540-45337-7_2]
   Bracha Gilad, 2004, OOPSLA WORKSH REV DY
   BRUNETON E, 2002, P AD EXT COMP SYST C
   Chalin P, 2007, LECT NOTES COMPUT SC, V4609, P227
   Charles Philippe, 2005, Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA '05, (New York, NY, USA), P519, DOI DOI 10.1145/1103845.1094852
   Chin B, 2006, LECT NOTES COMPUT SC, V3924, P264
   Cohen T, 2006, ACM SIGPLAN NOTICES, V41, P89, DOI 10.1145/1167515.1167481
   Crew RF, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P229
   DUBY CK, 1992, P USENIX C C USENIX, P99
   Eichberg M, 2005, LECT NOTES COMPUT SC, V3442, P237, DOI 10.1007/978-3-540-31984-9_18
   Ekman T, 2004, LECT NOTES COMPUT SC, V3086, P144
   Ernst M., 2007, 308 JSR
   Fahndrick M., 2003, P 18 ACM SIGPLAN C O, P302, DOI DOI 10.1145/949305.949332
   Fischer J, 2009, LECT NOTES COMPUT SC, V5653, P173, DOI 10.1007/978-3-642-03013-0_9
   FOSTER JS, 1999, P 1999 ACM SIGPLAN C, P192
   FOSTER JS, 2007, P 22 ANN ACM SIGPLAN, P423
   Gabriel RichardP., 2007, P 22 ANN ACM SIGPLAN
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gosling J., 2000, The Java Language Specification
   Green~eldboyce David, 2007, P 22 ANN ACM SIGPLAN, P321, DOI 10.1145
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   Hou DQ, 2006, IEEE T SOFTWARE ENG, V32, P404, DOI 10.1109/TSE.2006.60
   Hovemeyer David., 2004, ACM Conference on Object-Oriented Programming Systems, Lan-guages, and Applications, OOPSLA '04, P132
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Janzen D., 2003, Proceedings of the 2nd Annual Conference on Aspect-Oriented Software Development (AOSD), P178, DOI 10.1145/643603.643622
   *JSR, 2006, 302 JSR
   MARKSTRUM S, 2009, THESIS U CALIFORNIA
   Milicevic A, 2007, PROC INT CONF SOFTW, P771
   Millstein T, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1462166.1462168
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   NYSTROM N, 2006, P OOPSLA 06, P21
   Papi Matthew M., 2008, INT S SOFT TEST AN I, P201
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   *POL, 2004, POL EXT COMP FRAM
   *POL, 2007, POL JAVA 5
   Roberson Michael, 2008, P 23 ACM SIGPLAN C O, P493, DOI [10.1145/1449764.1449803, DOI 10.1145/1449764.1449803]
   TARR PL, 2006, P 21 ANN ACM SIGPLAN
   THOMAS D, 2006, P 20 EUR C OBJ OR PR, V4067
   Vallee-Rai R., 1999, CASCON 1999, P125
   VITEK J, 1999, P 14 ANN C OBJ OR PR, P82
   WAL A, 2007, TJ WATSON LIB ANAL W
   WARTH A, 2006, P 21 ANN ACM SIGPLAN, P37
   [No title captured]
NR 53
TC 20
Z9 20
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2010
VL 32
IS 2
AR 4
DI 10.1145/1667048.1667049
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 553OH
UT WOS:000274376200001
OA Bronze
DA 2024-07-18
ER

PT J
AU Tratt, L
AF Tratt, Laurence
TI Domain Specific Language Implementation via Compile-Time
   Meta-Programming
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Syntax extension; compile-time meta-programming; domain
   specific languages
AB Domain specific languages (DSLs) are mini-languages that are increasingly seen as being a valuable tool for software developers and non-developers alike. DSLs must currently be created in an ad-hoc fashion, often leading to high development costs and implementations of variable quality. In this article, I show how expressive DSLs can be hygienically embedded in the Converge programming language using its compile-time meta-programming facility, the concept of DSL blocks, and specialised error reporting techniques. By making use of pre-existing facilities, and following a simple methodology, DSL implementation costs can be significantly reduced whilst leading to higher quality DSL implementations.
C1 Bournemouth Univ, Poole BH12 5BB, Dorset, England.
C3 Bournemouth University
RP Tratt, L (corresponding author), Bournemouth Univ, Poole BH12 5BB, Dorset, England.
EM laurie@tratt.net
RI Tratt, Laurence/A-8594-2013
OI Tratt, Laurence/0000-0002-5258-3805
FU Tata Consultancy Services
FX This research was partly funded by a grant from Tata Consultancy
   Services.
CR [Anonymous], 1996, A Theory of Objects
   Aycock J, 2002, COMPUT J, V45, P620, DOI 10.1093/comjnl/45.6.620
   BACHRACH J, 2001, OOPSLA 2001 C P, P31, DOI DOI 10.1145/504311.504285
   Bachrach Jonathan, 1999, D-expressions: Lisp power, Dylan style
   BRABRAND C, 2000, P WORKSH PART EV SEM
   BRAVENBOER M, 2004, P 19 ANN C OBJ OR PR
   COINTE P, 1987, SIGPLAN NOTICES, V22, P156, DOI 10.1145/38807.38822
   CORDY JR, 2004, P ACM 4 INT WORKSH L
   Czarnecki K., 2004, DSL IMPLEMENTATION M, V3016, P50
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   EARLEY J, 1970, COMMUN ACM, V13
   FLEUTOT F, 2007, P WORKSH DYN LANG AP
   Goldberg A., 1989, Smalltalk-80 : The Language
   GRIMM R, 2005, 2 ECOOP WORKSH PROGR
   Griswold R., 1996, ICON PROGRAMMING LAN, VThird
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   MERNIK M, 2003, DEV DOMAIN SPECIFIC
   SCHROER FW, 2005, ACCENT GRAMMAR LANGU
   Seefried Sean., 2004, Proceedings, chapter Optimising Embedded DSLs Using Template Haskell, P186
   SHEARD T, 1998, ADV FUNCTIONAL PROGR, P207
   SHEARD T, 2003, P WORKSH SEM APPL IM, V2196, P2
   Sheard T., 2002, P HASK WORKSH 2002 A
   SHEARD T, 1999, P 2 C DOM SPEC LANG, V35, P81
   Skalski Kamil, 2004, METAPROGRAMMING NEME
   Steele G. L.  Jr., 1999, Higher-Order and Symbolic Computation, V12, P221, DOI 10.1023/A:1010085415024
   Tratt L., 2005, TR0502 KINGS COLL LO
   TRATT L, 2007, CONVERGE REFERENCE M
   Tratt Laurence., 2005, DLS 05, P49, DOI DOI 10.1145/1146841.1146846
   Tratt Laurence, 2005, TR0501 KINGS COLL LO
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   VANROSSUM G, 2003, PYTHON 2 3 REFERENCE
   WALKER K, 1994, IPD261 U AR
   WEISE D, 1993, P C PROGR LANG DES I, P156, DOI DOI 10.1145/155090.155105
   WILSON GV, 2005, QUEUE, V2, P48
NR 36
TC 46
Z9 49
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2008
VL 30
IS 6
AR 31
DI 10.1145/1391956.1391958
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 373GL
UT WOS:000260958900002
OA Green Submitted, Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Pan, Z
   Eigenmann, R
AF Pan, Zhelong
   Eigenmann, Rudolf
TI PEAK - A fast and effective performance tuning system via compiler
   optimization orchestration
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE performance; performance tuning; optimization orchestration; dynamic
   compilation
AB Compile-time optimizations generally improve program performance. Nevertheless, degradations caused by individual compiler optimization techniques are to be expected. Feedback-directed optimization orchestration systems generate optimized code versions under a series of optimization combinations, evaluate their performance, and search for the best version. One challenge to such systems is to tune program performance quickly in an exponential search space. Another challenge is to achieve high program performance, considering that optimizations interact. Aiming at these two goals, this article presents an automated performance tuning system, PEAK, which searches for the best compiler optimization combinations for the important code sections in a program. The major contributions made in this work are as follows: ( 1) An algorithm called Combined Elimination (CE) is developed to explore the optimization space quickly and effectively; ( 2) Three fast and accurate rating methods are designed to evaluate the performance of an optimized code section based on a partial execution of the program; ( 3) An algorithm is developed to identify important code sections as candidates for performance tuning by trading off tuning speed and tuned program performance; and ( 4) A set of compiler tools are implemented to automate optimization orchestration. Orchestrating optimization options in SUN Forte compilers at the whole-program level, our CE algorithm improves performance by 10.8% over the SPEC CPU2000 FP baseline setting, compared to 5.6% improved by manual tuning. Orchestrating GCC O3 optimizations, CE improves performance by 12% over O3, the highest optimization level. Applying the rating methods, PEAK reduces tuning time from 2.19 hours to 5.85 minutes on average, while achieving equal or better program performance.
C1 [Pan, Zhelong; Eigenmann, Rudolf] Purdue Univ, Sch Elect & Comp Engn, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Pan, Z (corresponding author), Purdue Univ, Sch Elect & Comp Engn, W Lafayette, IN 47907 USA.
EM pan@vmware.com
CR ADLTABATABAI AR, 1998, P ACM SIGPLAN 98 C P, P280
   Agakov F, 2006, INT SYM CODE GENER, P295
   [Anonymous], 2001, P 8 ACM SIGPLAN S PR
   [Anonymous], 1999, ORTHOGONAL ARRAYS TH, DOI DOI 10.1007/978-1-4612-1478-6
   [Anonymous], 2004, LIPPOLIS
   [Anonymous], P 21 ANN ACM SIGPLAN
   [Anonymous], 2000, PLDI '00
   Arnold M, 2002, ACM SIGPLAN NOTICES, V37, P111, DOI 10.1145/583854.582432
   Arnold Matthew., 2000, P 15 ACM SIGPLAN C O, P47
   AUSLANDER J, 1996, P ACM SIGPLAN 96 C P, P149
   BRUENING D, 2003, P ITN S COMP GEN OPT
   CHOW K, 1999, P 2 WORKSH FEEDB DIR
   Cierniak Michal., 2000, PROCEEEDINGS ACM SIG, P13
   CLICK C, 1995, ACM T PROGR LANG SYS, V17, P181, DOI 10.1145/201059.201061
   Cooper KD, 2002, J SUPERCOMPUT, V23, P7, DOI 10.1023/A:1015729001611
   COOPER KD, 2005, LCTES 05, P69
   Dang Francis, 2002, P 16 INT PAR DISTR P
   Diniz P, 1997, ACM SIGPLAN NOTICES, V32, P71, DOI 10.1145/258916.258923
   Duesterwald E., 2000, Operating Systems Review, V34, P202, DOI 10.1145/384264.379241
   Ebcioglu K, 1997, ACM COMP AR, P26, DOI 10.1145/384286.264126
   Engler DR, 1996, ACM SIGPLAN NOTICES, V31, P160, DOI 10.1145/249069.231411
   ENGLER DR, 1994, P 6 INT C ARCH SUPP, P263
   *GNC, 2005, GCC ONL DOC
   Graham S. L., 1982, SIGPLAN Notices, V17, P120, DOI 10.1145/872726.806987
   Granston E., 2001, P 4 WORKSH FEEDB DIR
   GRANT B, 1999, P ACM SIGPLAN 99 C P, P293
   HANEDA M, 2005, ICS 05, P161
   Joshi Rajeev., 2002, C PROGRAMMING LANGUA, P304, DOI DOI 10.1145/512529.512566
   Karp R, 1972, COMPLEXITY COMPUTER, V40, P85, DOI 10.1007/978-3-540-68279-08
   Kistler T, 2003, ACM T PROGR LANG SYS, V25, P500, DOI 10.1145/778559.778562
   Kisuki T, 2000, 2000 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P237, DOI 10.1109/PACT.2000.888348
   KISUKI T, 1999, P 2 INT S HIGH PERF, P121
   Kulkarni PA, 2006, INT SYM CODE GENER, P306
   LAU J, 2006, P 2006 ACM SIGPLAN C
   LEE P, 1996, P ACM SIGPLAN 96 C P, P137
   Merten MC, 1999, CONF PROC INT SYMP C, P136, DOI 10.1109/ISCA.1999.765946
   Merten MC, 2001, IEEE T COMPUT, V50, P567, DOI 10.1109/12.931894
   Mock M, 2000, INT SYMP MICROARCH, P291, DOI 10.1109/MICRO.2000.898079
   NANDY S, 2003, P WORKSH LANG COMP P
   NYSTROM EM, 2001, P INT C PAR ARCH COM
   PAN Z, 2004, TRECE0401 PURD U
   PAN Z, 2006, P 4 ANN INT S COD GE
   PAN Z, 2004, SC2004
   Pinkers RPJ, 2004, IEEE COMPUTER SOCIETY'S 12TH ANNUAL INTERNATIONAL SYMPOSIUM ON MODELING, ANALYSIS, AND SIMULATION OF COMPUTER AND TELECOMMUNICATIONS SYSTEMS - PROCEEDINGS, P494, DOI 10.1109/MASCOT.2004.1348305
   Rauchwerger L, 1999, IEEE T PARALL DISTR, V10, P160, DOI 10.1109/71.752782
   Rus S., 2002, Conference Proceedings of the 2002 International Conference on SUPERCOMPUTING, P274, DOI 10.1145/514191.514229
   *SPEC, 2000, SPEC CPU2000 RES
   Stephenson M, 2003, ACM SIGPLAN NOTICES, V38, P77, DOI 10.1145/780822.781141
   STROUT MM, 2003, P 2003 ACM SIGPLAN C
   *SUN, 2000, FORT C 6 SUN WORKSH
   Triantafyllis S, 2003, INT SYM CODE GENER, P204, DOI 10.1109/CGO.2003.1191546
   Voss MJ, 2000, PROC INT CONF PARAL, P163, DOI 10.1109/ICPP.2000.876107
   Whaley R.C., 1998, P SUPERCOMPUTING 199
   Wolf ME, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P274, DOI 10.1109/MICRO.1996.566468
   [No title captured]
   [No title captured]
NR 56
TC 17
Z9 23
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2008
VL 30
IS 3
AR 17
DI 10.1145/1353445.1353451
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308XV
UT WOS:000256425100006
OA Bronze
DA 2024-07-18
ER

PT J
AU Ward, M
   Zedan, H
AF Ward, Martin
   Zedan, Hussein
TI Slicing as a program transformation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; theory; verification; slicing; program
   transformation; FermaT; reverse engineering; reengineering; formal
   methods
ID FORMAL TRANSFORMATION
AB The aim of this article is to provide a unified mathematical framework for program slicing which places all slicing work for sequential programs on a sound theoretical foundation. The main advantage to a mathematical approach is that it is not tied to a particular representation. In fact the mathematics provides a sound basis for any particular representation. We use the WSL (wide-spectrum language) program transformation theory as our framework. Within this framework we define a new semantic relation, semirefinement, which lies between semantic equivalence and semantic refinement. Combining this semantic relation, a,syntactic relation (called reduction), and WSL's remove statement, we can give mathematical definitions for backwards slicing, conditioned slicing, static and dynamic slicing, and semantic slicing as program transformations in the WSL transformation theory. A novel technique of "encoding" operational semantics within a denotational semantics allows the framework to handle "operational slicing". The theory also enables the concept of slicing to be applied to nondeterministic programs. These transformations are implemented in the industry-strength FermaT transformation system.
C1 De Montfort Univ, Software Technol Res Lab, Leicester LE1 9BH, Leics, England.
C3 De Montfort University
RP Ward, M (corresponding author), De Montfort Univ, Software Technol Res Lab, Gateway, Leicester LE1 9BH, Leics, England.
EM martin@gkc.org.uk
OI Ward, Martin/0000-0001-7127-3311
CR AGRAWAL H, 1990, SIGPLAN NOTICES, V25, P246, DOI 10.1145/93548.93576
   Back R. J. R., 1990, Formal Aspects of Computing, V2, P247, DOI 10.1007/BF01888227
   Back R.J.R., 1980, Mathematical Center Tracts, V131
   BACK RJR, 1988, ACTA INFORM, V25, P593, DOI 10.1007/BF00291051
   BALZER R, 1969, P AFIPS SJCC
   BESZEDAS A, 2002, 18 INT C SOFTW MAINT
   BILARDI G, 1999, STAT SINGLE ASSIGNME
   Binkley D., 1996, ADV COMPUTERS
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   Canfora G, 1998, INFORM SOFTWARE TECH, V40, P595, DOI 10.1016/S0950-5849(98)00086-X
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DANICIC S, 1999, THESIS LONDON U
   De Lucia A, 2003, SEVENTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P363, DOI 10.1109/CSMR.2003.1192445
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   FORGACS I, 1997, P SEKE 9 INT C SOFTW
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   Harman M., 1997, 5 IEEE INT WORKSH PR
   HARMAN M, 2000, 5 IEEE INT C SOFTW M
   HARMON M, 2001, P 8 WORK C REV ENG W
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Karp C. R., 1964, LANGUAGES EXPRESSION
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Morgan Carroll, 1994, Programming from specifications
   MORGAN CC, 1987, IBM J RES DEV, V31
   PINGALI K, 1997, ACM T PROGRAM LANG S
   Stoy Joseph E., 1977, DENOTATIONAL SEMANTI
   TENNENT RD, 1976, COMMUN ACM, V19, P437, DOI 10.1145/360303.360308
   TIP F, 1995, J PROGRAM LANG, V3, P121
   VENKATESH GA, 1991, SIGPLAN NOTICES, V26, P107, DOI 10.1145/113446.113455
   Ward M, 1996, IEEE T SOFTWARE ENG, V22, P665, DOI 10.1109/32.541437
   Ward M., 1993, Journal of Software Maintenance: Research and Practice, V5, P101, DOI 10.1002/smr.4360050204
   Ward M, 1995, J SOFTW MAINT-RES PR, V7, P443, DOI 10.1002/smr.4360070606
   WARD M, 1989, THESIS OXFORD U
   WARD M, 1994, FDN PRACTICAL THEORY
   WARD M, 1990, DERIVATION SORTING A
   WARD M, 2001, IEEE INT WORKSH SOUR
   Ward MP, 2005, Ninth European Conference on Software Maintenance and Reengineering, Proceedings, P178, DOI 10.1109/CSMR.2005.19
   Ward MP, 2004, SCI COMPUT PROGRAM, V52, P213, DOI 10.1016/j.scico.2004.03.007
   WARD MP, 1994, COMPUT J, V37, P795, DOI 10.1093/comjnl/37.9.795
   WARD MP, 1995, INT J SOFTW ENG KNOW, V5, P25, DOI 10.1142/S0218194095000034
   WARD MP, 2000, P 7 WORK C REV ENG B
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   WEISER M, 1984, COMMUN ACM, V25, P352
   YANG H., 2003, Successful Evolution of Software Systems
   YOUNGER EJ, 1993, J SOFTWARE MAINTENAN, V6, P197
   ZHANG XY, 2002, IEEE INT WORKSH SOUR
NR 46
TC 21
Z9 22
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2007
VL 29
IS 2
AR 7
DI 10.1145/1216374.1216375
PG 53
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 161KL
UT WOS:000246013700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Stoyle, G
   Hicks, M
   Bierman, G
   Sewell, P
   Neamtiu, I
AF Stoyle, Gareth
   Hicks, Michael
   Bierman, Gavin
   Sewell, Peter
   Neamtiu, Iulian
TI <i>Mutatis Mutandis</i>:: Safe and predictable dynamic software updating
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages
CY JAN 12-14, 2005
CL Long Beach, CA
SP ACM SIGPLAN SIGACT
DE design; languages; reliability; theory; verification; dynamic software
   updating; updateability analysis; type inference; capability
   proteusdesign
AB This article presents Proteus, a core calculus that models dynamic software updating, a service for fixing bugs and adding features to a running program. Proteus permits a program's type structure to change dynamically but guarantees the updated program remains type-correct by ensuring a property we call con-freeness. We show how con-freeness can be enforced dynamically, and how it can be approximated via a novel static analysis. This analysis can be used to assess the implications of a program's structure on future updates in order to make update success more predictable. We have implemented Proteus for C, and briefly discuss our implementation which we have tested on several well-known programs.
C1 Univ Cambridge, Cambridge CB2 1TN, England.
   Univ Maryland, College Pk, MD 20742 USA.
C3 University of Cambridge; University System of Maryland; University of
   Maryland College Park
RP Stoyle, G (corresponding author), Univ Cambridge, Cambridge CB2 1TN, England.
EM mwh@cs.umd.edu
OI Sewell, Peter/0000-0001-9352-1013
CR AJMANI S, 2004, THESIS MIT
   AJMANI S, 2006, P EUR C OBJ OR PROGR
   Altekar G, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P287
   APPEL A, 1994, UNPUB HOT SLIDING XM
   ARMSTRONG JL, 1991, 13 INT SWITCH S STOC
   Ball T., 2002, POPL 02, P1
   BAUMANN A, 2005, P USENIX ANN TECHN C
   BIERMAN G, 2003, P USE03 2 INT WORKSH
   BIERMAN G, 2003, P ACM INT C FUNCT PR
   BLOOM T, 1993, SOFTWARE ENG J, V8, P102, DOI 10.1049/sej.1993.0014
   BLOOM T, 1983, THESIS MIT
   BOYAPATI C, 2003, P ACM C OBJ OR PROGR
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   Buck B, 2000, INT J HIGH PERFORM C, V14, P317, DOI 10.1177/109434200001400404
   DROSSOPOULOU S, 2003, P ECOOP 2003 WORKSH
   DUGGAN D, 2001, P ACM INT C FUNCT PR
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   FRIEDER O, 1991, J SYST SOFTWARE, V14, P111, DOI 10.1016/0164-1212(91)90096-O
   GAPEYEV V, 2000, P ACM INT C FUNCT PR
   GILMORE S, 1997, ECSLFCS97378 LFCS U
   GROSSMAN D, 2002, P ACM C PROGR LANG D
   GUPTA D, 1994, THESIS INDIAN I TECH
   HEINTZE N., 1992, THESIS CARNEGIE MELL
   HICKS M, 2005, ACM T PROGRAM LANG S, V27
   HICKS M, 2000, LECT NOTES COMPUTER, V2071
   HICKS M, 2005, P INT WORKSH FDN COM
   Hicks Michael, 2001, Ph. D. Dissertation
   HJALMTYSSON G, 1998, P USENIX ANN TECHN C
   Mitchell J.C., 1986, C RECORD 13 ANN ACM, P263, DOI [10.1145/512644.512669, DOI 10.1145/512644.512669]
   NEAMTIU I, 2006, P ACM C PROGR LANG D, V72
   NEAMTIU I, 2005, P INT WORKSH MIN SOF
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Oppenheimer D, 2002, IEEE T COMPUT, V51, P100, DOI 10.1109/12.980002
   ORSO A, 2002, P IEEE INT C SOFTW M
   PETERSON J, 1997, YALEUDCSRR1135 YALE
   SOULES C, 2003, P USENIX ANN TECHN C
   Stoyle G, 2005, P 32 ACM SIGPLAN SIG, P183
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   Walker D., 2000, P 27 ACM SIGPLAN SIG, P254
   Xie Yichen., 2005, ACM SIGPLAN NOTICES, P351, DOI DOI 10.1145/1047659.1040334
   ZORN B, 2005, COMMUNICATION
NR 41
TC 33
Z9 38
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 4
AR 22
DI 10.1145/1255450.1255455
PG 70
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 202OS
UT WOS:000248913500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Helsen, S
   Thiemann, P
AF Helsen, S
   Thiemann, P
TI Polymorphic specialization for ML
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; languages; theory; binding-time analysis; program
   specialization; regions
ID SIMPLIFIED ACCOUNT; INFERENCE
AB We present a framework for offline partial evaluation for call-by-value functional programming languages with an ML-style typing discipline. This includes a binding-time analysis which is ( 1) polymorphic with respect to binding times; ( 2) allows the use of polymorphic recursion with respect to binding times; ( 3) is applicable to a polymorphically typed term; and ( 4) is proven correct with respect to a novel small-step specialization semantics.
   The main innovation is to build the analysis on top of the region calculus of Tofte and Talpin [1994], thus leveraging the tools and techniques developed for it. Our approach factorizes the binding-time analysis into region inference and a subsequent constraint analysis. The key insight underlying our framework is to consider binding times as properties of regions.
   Specialization is specified as a small-step semantics, building on previous work on syntactic-type soundness results for the region calculus. Using similar syntactic proof techniques, we prove soundness of the binding-time analysis with respect to the specializer. In addition, we prove that specialization preserves the call-by-value semantics of the region calculus by showing that the reductions of the specializer are contextual equivalences in the region calculus.
C1 Univ Waterloo, Dept Elect & Comp Engn, Waterloo, ON N2L 3G1, Canada.
   Univ Freiburg, Inst Informat, D-79110 Freiburg, Germany.
C3 University of Waterloo; University of Freiburg
RP Univ Waterloo, Dept Elect & Comp Engn, 200 Univ Ave W, Waterloo, ON N2L 3G1, Canada.
EM shelsen@computer.org; thiemann@informatik.uni-freiburg.de
CR Abadi Martin., 1999, POPL, P147, DOI [10.1145/292540.292555, DOI 10.1145/292540.292555]
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1981, Technical Report DAIMI FN-19
   Banerjee A., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P88, DOI 10.1109/LICS.1999.782594
   Birkedal L., 1994, PEPM '94. ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation, P61
   Birkedal L, 2001, THEOR COMPUT SCI, V258, P299, DOI 10.1016/S0304-3975(00)00025-6
   BIRKEDAL L, 1993, 9322 DIKU U COP
   Bondorf A., 1993, Journal of Functional Programming, V3, P315, DOI 10.1017/S0956796800000769
   Bulyonkov M. A., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P59, DOI 10.1145/154630.154637
   Calcagno C, 2002, INFORM COMPUT, V173, P199, DOI 10.1006/inco.2001.3112
   CALCAGNO C, 2001, P 28 ACM SIGPLAN SIG, P155
   CONSEL C, 1991, LECT NOTES COMPUT SC, V523, P496
   CONSEL C, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P264, DOI 10.1145/91556.91668
   Consel C., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P66, DOI 10.1145/154630.154638
   CONSEL C, 1989, THESIS U PARIS 6 PAR
   CONSEL C, 1994, CRIA261 EC MIN
   CONSEL C, 1993, P ACM SIGPLAN S PART, P134
   CONSEL C, 1993, P 20 ANN ACM S PRINC, P493
   Contreras A., 2001, Advances in Technology of Materials and Materials Processing Journal, V3, P27
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   Danvy O., 1995, LISP and Symbolic Computation, V8, P209, DOI 10.1007/BF01019004
   DUSSART D, 1997, P ACM SIGPLAN 97 C P, P206
   GENGLER M, 1992, BIGRE J, V81, P322
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Glynn K, 2001, LECT NOTES COMPUT SC, V2053, P39
   Harper R, 1996, INFORM PROCESS LETT, V57, P15, DOI 10.1016/0020-0190(95)00178-6
   HARPER R, 1994, INFORM PROCESS LETT, V51, P201, DOI 10.1016/0020-0190(94)90120-1
   Hatcliff J., 1997, Mathematical Structures in Computer Science, V7, P507, DOI 10.1017/S0960129597002405
   Heldal R, 2000, THEOR COMPUT SCI, V248, P99, DOI 10.1016/S0304-3975(00)00050-5
   HELDAL R, 2001, THESIS CHALMERS U TE
   HELDAL R, 2001, LECT NOTES COMPUTER, V2244, P191
   Helsen S, 2000, LECT NOTES COMPUT SC, V1924, P51
   HELSEN S, 2002, THESIS U FREIBURG GE
   HELSEN S, 2004, HIGHER ORDER SYMBOLI, V17, P4
   Helsen Simon, 2000, ELECT NOTES THEORETI, V41, P1
   HENGLEIN F, 1991, LECT NOTES COMPUT SC, V523, P448
   HENGLEIN F, 1994, LECT NOTES COMPUTER, V788, P287
   Jouvelot Pierre., 1991, ACM SIGACTSIGPLAN S, P303, DOI DOI 10.1145/99583.99623
   Lassen S.B., 1998, HIGHER ORDER OPERATI, P91
   LAUNCHBURY J, 1991, DRAFT P 4 ANN GLASG, P210
   LAWALL J, 1997, LECT NOTES COMPUTER, V1284, P165
   Lee Chin Soon, 2001, PRINCIPLES PROGRAMMI, P81, DOI [10.1145/360204.360210, DOI 10.1145/360204.360210]
   Lee CS, 2002, LECT NOTES COMPUT SC, V2477, P493
   Lee CS, 2002, LECT NOTES COMPUT SC, V2487, P218
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MOGENSEN TAE, 1989, LECT NOTES COMPUT SC, V352, P298
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Morris James Hiram, 1969, Ph.D. Dissertation
   NIELSON F, 1992, CAMBRIDGE TRACTS THE, V34
   NIELSON HR, 1988, SCI COMPUT PROGRAM, V10, P139, DOI 10.1016/0167-6423(88)90025-1
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   RYTZ B, 1992, P WORKSH PART EV SEM, P21
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Thiemann P, 2002, LECT NOTES COMPUT SC, V2305, P228
   Thiemann P., 1999, Journal of Functional Programming, V9, P483, DOI 10.1017/S0956796899003469
   Thiemann P, 1998, LECT NOTES COMPUT SC, V1381, P267, DOI 10.1007/BFb0053576
   THIEMANN P, 1999, BRICS NOTES SERIES, P30
   THIEMANN P, 1997, LECT NOTES COMPUTER, V1214, P742
   THIEMANN P, 1997, ELECT NOTES THEORETI, V6
   THIEMANN P, 1996, LECT NOTES COMPUTER, V1140, P198
   THIEMANN P, 2001, LECT NOTES COMPUTER
   THIEMANN P, 2000, PGG SYSTEM USER MANU
   THIEMANN P, 1997, WSI97XX U TUB
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M, 2000, FOUNDAT COMPUT, P389
   Tofte M., 2001, PROGRAMMING REGIONS
   Tofte Mads, 1994, P 21 ACM SIGPLAN SIG, P188, DOI DOI 10.1145/174675.177855
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
   [No title captured]
NR 73
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2004
VL 26
IS 4
BP 652
EP 701
DI 10.1145/1011508.1011510
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 843CN
UT WOS:000223053200002
DA 2024-07-18
ER

PT J
AU Attie, PC
   Arora, A
   Emerson, EA
AF Attie, PC
   Arora, A
   Emerson, EA
TI Synthesis of fault-tolerant concurrent programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; languages; reliability; theory; verification; concurrent
   programs; fault-tolerance; program synthesis; specification; temporal
   logic
ID TEMPORAL LOGIC; SYSTEMS; CONSENSUS; SERVICES
AB Methods for mechanically synthesizing concurrent programs from temporal logic specifications obviate the need to manually construct a program and compose a proof of its correctness. A serious drawback of extant synthesis methods, however, is that they produce concurrent programs for models of computation that are often unrealistic. In particular, these methods assume completely fault-free operation, that is, the programs they produce are fault-intolerant. In this paper, we show how to mechanically synthesize fault-tolerant concurrent programs for various fault classes. We illustrate our method by synthesizing fault-tolerant solutions to the mutual exclusion and barrier synchronization problems.
C1 Northeastern Univ, Coll Comp & Informat Sci, Boston, MA 02115 USA.
   MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02139 USA.
   Ohio State Univ, Dept Comp & Informat Sci, Columbus, OH 43210 USA.
   Univ Texas, Dept Comp Sci, Austin, TX 78712 USA.
C3 Northeastern University; Massachusetts Institute of Technology (MIT);
   University System of Ohio; Ohio State University; University of Texas
   System; University of Texas Austin
RP Northeastern Univ, Coll Comp & Informat Sci, Cullinane Hall,360 Huntington Ave, Boston, MA 02115 USA.
EM attie@ccs.neu.edu; anish@cis.ohio-state.edu; emerson@cs.utexas.edu
OI Attie, Paul/0000-0003-1989-0974
CR [Anonymous], 1990, Handbook of Theoretical Comp. Sc.
   [Anonymous], 1989, CWI Q.
   [Anonymous], POPL
   [Anonymous], LNCS
   ANUCHITANUKUL A, 1994, LECT NOTES COMPUTER, V818, P156
   ARORA A, 1993, IEEE T SOFTWARE ENG, V19, P1015, DOI 10.1109/32.256850
   Arora A, 1998, IEEE T SOFTWARE ENG, V24, P63, DOI 10.1109/32.663998
   Attie P, 2002, INFORM PROCESS LETT, V83, P221, DOI 10.1016/S0020-0190(01)00334-9
   Attie PC, 2001, ACM T PROGR LANG SYS, V23, P187, DOI 10.1145/383043.383044
   Attie PC, 1998, ACM T PROGR LANG SYS, V20, P51, DOI 10.1145/271510.271519
   ATTIE PC, 1999, LECT NOTES COMPUTER, V1664
   ATTIE PC, 1996, 15 ANN ACM S PRINC D, P111
   ATTIE PC, 2000, NUCCS0002
   Chandra TD, 1996, J ACM, V43, P225, DOI 10.1145/226643.226647
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   EMERSON E, 1981, THESIS HARVARD U CAM
   EMERSON E, 1985, 12TH P ANN ACM S PRI, P84
   Emerson E. A., 1992, Journal of Logic and Computation, V2, P173, DOI 10.1093/logcom/2.2.173
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   EMERSON EA, 1993, REAL TIME SYST J, V2, P331
   Fekete A, 1999, THEOR COMPUT SCI, V220, P113, DOI 10.1016/S0304-3975(98)00239-4
   Fekete A, 2001, ACM T COMPUT SYST, V19, P171, DOI 10.1145/377769.377776
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   JAYARAM M, 1996, P 15 ACM S PRINC DIS
   KULKARNI S, 2000, LECT NOTES COMPUTER, V1926
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LIU Z, 1992, FORM ASP COMPUT, V4, P442
   Liu ZM, 1999, ACM T PROGR LANG SYS, V21, P46, DOI 10.1145/314602.314605
   Livadas C, 2002, LECT NOTES COMPUT SC, V2529, P146
   LUCHANGCO V, 2001, THESIS MIT CAMBRIDGE
   Lynch N, 2002, LECT NOTES COMPUT SC, V2508, P173
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Lynch Nancy A., 1987, PODC, P137
   MANNA Z, 1984, ACM T PROGR LANG SYS, V6, P68, DOI 10.1145/357233.357237
   MANNA Z, 1981, LECT NOTES COMPUTER, V131
   MANOLIOS P, 2001, P IEEE S LOG COMP SC
   Pfleeger C. P., 1989, SECURITY COMPUTING
   PNUELI A, 1989, LECT NOTES COMPUT SC, V372, P652
   SCHNEIDER FB, 1984, ACM T COMPUT SYST, V2, P145, DOI 10.1145/190.357399
   SCHNEIDER FB, 1990, COMPUT SURV, V22, P299, DOI 10.1145/98163.98167
   Silberschatz A., 1994, Operating system concepts
   Tanenbaum AndrewS., 1987, OPERATING SYSTEMS DE
   WELCH JL, 1993, DISTRIB COMPUT, V6, P233, DOI 10.1007/BF02242711
   WONGTOI H, 1990, LECT NOTES COMPUTER, V531, P272
   [No title captured]
NR 46
TC 33
Z9 40
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2004
VL 26
IS 1
BP 125
EP 185
DI 10.1145/963778.963782
PG 61
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 768UY
UT WOS:000188554500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Gorlatch, S
AF Gorlatch, S
TI Send-receive considered harmful: Myths and realities of message passing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; performance; experimentation; measurement;
   programming methodology; Message Passing Interface (MPI)
AB During the software crisis of the 1960s, Dijkstra's famous thesis "goto considered harmful" paved the way for structured programming. This short communication suggests that many current difficulties of parallel programming based on message passing are caused by poorly structured communication, which is a consequence of using low-level send-receive primitives. We argue that, like goto in sequential programs, send-receive should be avoided as far as possible and replaced by collective operations in the setting of message passing. We dispute some widely held opinions about the apparent superiority of pairwise communication over collective communication and present substantial theoretical and empirical evidence to the contrary in the context of MPI ( Message Passing Interface).
C1 Univ Munster, Inst Informat, D-48149 Munster, Germany.
C3 University of Munster
RP Gorlatch, S (corresponding author), Univ Munster, Inst Informat, Einstr 62, D-48149 Munster, Germany.
EM gorlatch@math.uni-muenster.de
CR [Anonymous], 1994, Introduction to parallel computing: design and analysis of algorithms
   Bernaschi M, 1999, LECT NOTES COMPUT SC, V1593, P774
   BILARDI G, 1996, 8 ACM S PAR ALG ARCH, P25
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   DAHL OJ, 1975, STRUCTURED PROGRAMMI
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   FISCHER J, 2002, PARALLEL PROCESS LET, V12, P2
   Gorlatch S, 2001, LECT NOTES COMPUT SC, V2127, P243
   Gorlatch S, 2000, IEEE T SOFTWARE ENG, V26, P276, DOI 10.1109/32.842952
   Gorlatch S, 1999, IPPS PROC, P492, DOI 10.1109/IPPS.1999.760522
   GOUDREAU M, 1999, ALGORITHMS PARALLEL, P61
   Gropp W., 1994, USING MPI PORTABLE P
   Hwang K., 1998, Scalable Parallel computing
   Ju-Young L. Park, 1996, Proceedings of the 1996 International Conference on Parallel Processing. Vol.1 Architecture, P180, DOI 10.1109/ICPP.1996.537159
   Kielmann T., 2000, Proceedings 14th International Parallel and Distributed Processing Symposium. IPDPS 2000, P492, DOI 10.1109/IPDPS.2000.846026
   Kielmann T., 1999, PPoPP '99 Proceedings of the seventh ACM SIGPLAN symposium on Principles and practice of parallel programming, P131
   Pacheco PS., 1997, PARALLEL PROGRAMMING
   Schneider FredB., 1997, CONCURRENT PROGRAMMI
   VADHIYAR SS, 2000, P SUP 2000 DALL TX
   Valiant LeslieG., 1990, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity (A), P943, DOI 10.1016/B978-0-444-88071-0.50023-0
   Van de Geijn RobertA., 1997, Using PLAPACK: Parallel Linear Algebra Package
   [No title captured]
NR 22
TC 48
Z9 51
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2004
VL 26
IS 1
BP 47
EP 56
DI 10.1145/963778.963780
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 768UY
UT WOS:000188554500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Charguéraud, A
   Chlipala, A
   Erbsen, A
   Gruetter, S
AF Chargueraud, Arthur
   Chlipala, Adam
   Erbsen, Andres
   Gruetter, Samuel
TI Omnisemantics: Smooth Handling of Nondeterminism
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Nondeterminism; termination; compiler correctness proofs
ID SEPARATION-LOGIC; SEMANTICS; SOUNDNESS
AB This article gives an in-depth presentation of the omni-big-step and omni-small-step styles of semantic judgments. These styles describe operational semantics by relating starting states to sets of outcomes rather than to individual outcomes. A single derivation of these semantics for a particular starting state and program describes all possible nondeterministic executions (hence the name omni), whereas in traditional small-step and big-step semantics, each derivation only talks about one single execution. This restructuring allows for straightforward modeling of both nondeterminism and undefined behavior as commonly encountered in sequential functional and imperative programs. Specifically, omnisemantics inherently assert safety (i.e., they guarantee that none of the execution branches gets stuck), while traditional semantics need either a separate judgment or additional error markers to specify safety in the presence of nondeterminism.
   Omnisemantics can be understood as an inductively defined weakest-precondition semantics (or more generally, predicate-transformer semantics) that does not involve invariants for loops and recursion but instead uses unrolling rules like in traditional small-step and big-step semantics. Omnisemantics were previously described in association with several projects, but we believe the technique has been underappreciated and deserves a well-motivated, extensive, and pedagogical presentation of its benefits. We also explore several novel aspects associated with these semantics, in particular, their use in type-safety proofs for lambda calculi, partial-correctness reasoning, and forward proofs of compiler correctness for terminating but potentially nondeterministic programs being compiled to nondeterministic target languages. All results in this article are formalized in Coq.
C1 [Chargueraud, Arthur] Inria, Rocquencourt, France.
   [Chargueraud, Arthur] Univ Strasbourg, ICube, CNRS, Strasbourg, France.
   [Chlipala, Adam; Erbsen, Andres; Gruetter, Samuel] MIT CSAIL, Cambridge, MA 02139 USA.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); Universites
   de Strasbourg Etablissements Associes; Universite de Strasbourg;
   Massachusetts Institute of Technology (MIT)
RP Charguéraud, A (corresponding author), Inria, Rocquencourt, France.; Charguéraud, A (corresponding author), Univ Strasbourg, ICube, CNRS, Strasbourg, France.
EM arthur.chargueraud@inria.fr; adamc@csail.mit.edu; andreser@mit.edu;
   gruetter@mit.edu
OI Gruetter, Samuel/0000-0001-8369-9117
CR Abate C, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3460860
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   [Anonymous], 2023, ACM T PROGR LANG SYS, V45
   [Anonymous], 1976, DISCIPLINE PROGRAMMI
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   BACK RJR, 1983, THEOR COMPUT SCI, V23, P187, DOI 10.1016/0304-3975(83)90055-5
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Birkedal L, 2005, IEEE S LOG, P260
   Birkedal L, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:4)2013
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Cao Qinxiang., 2018, PROOF PEARL MA UNPUB
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Charguéraud A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408998
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Charguéraud A, 2013, LECT NOTES COMPUT SC, V7792, P41, DOI 10.1007/978-3-642-37036-6_3
   Chargueraud A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P418
   Chargueraud Arthur., 2022, MODERN EYE SEPARATIO
   Chlipala A, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544174.2500592, 10.1145/2500365.2500592]
   Cousot P., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P83, DOI 10.1145/143165.143184
   Danielsson NA, 2012, ACM SIGPLAN NOTICES, V47, P127, DOI 10.1145/2398856.2364546
   Erbsen A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P604, DOI 10.1145/3453483.3454065
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   FRANCEZ N, 1979, J COMPUT SYST SCI, V19, P290, DOI 10.1016/0022-0000(79)90006-0
   Guéneau A, 2017, LECT NOTES COMPUT SC, V10201, P584, DOI 10.1007/978-3-662-54434-1_22
   Hobor A, 2013, ACM SIGPLAN NOTICES, V48, P523, DOI 10.1145/2480359.2429131
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Krebbers R., 2015, Ph. D. Dissertation
   Krishnaswami NR, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P63
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, INFORM COMPUT, V207, P284, DOI 10.1016/j.ic.2007.12.004
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle., 2005, MG COMP SCI
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Milner R., 1975, Logic Colloquium '73, V80, P157, DOI DOI 10.1016/S0049-237X(08)71948-7
   Monin Jean-Francois, 2013, LECT NOTES COMPUT SC
   Nakata Keiko., 2010, 2 WORKSHOP COQ USERS
   Ni Z., 2006, Proc. of the 33rd Symp. on Principles of Programming Languages (POPL), P320, DOI DOI 10.1145/1111320.1111066
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G.D., 1976, SIAM J COMPUTING
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Schäfer S, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P188, DOI 10.1145/2854065.2854083
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Spies S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P80, DOI 10.1145/3453483.3454031
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Svendsen K, 2016, LECT NOTES COMPUT SC, V9632, P727, DOI 10.1007/978-3-662-49498-1_28
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Wang D, 2019, ELECTRON NOTES THEOR, V347, P303, DOI 10.1016/j.entcs.2019.09.016
   Wang P, 2014, ACM SIGPLAN NOTICES, V49, P675, DOI [10.1145/2660193.2660201, 10.1145/2714064.2660201]
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 59
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2023
VL 45
IS 1
AR 5
DI 10.1145/3579834
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9V9QK
UT WOS:000948718900005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Zhou, YD
   Zhao, JX
   Oliveira, BCDS
AF Zhou, Yaoda
   Zhao, Jinxu
   Oliveira, Bruno C. D. S.
TI Revisiting Iso-Recursive Subtyping
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Iso-recursive types; formalization; subtyping
ID REFINEMENT TYPES; SOUNDNESS; INTERSECTION; UNION
AB The Amber rules are well-known and widely used for subtyping iso-recursive types. They were first briefly and informally introduced in 1985 by Cardelli in a manuscript describing the Amber language. Despite their use over many years, important aspects of the metatheory of the iso-recursive style Amber rules have not been studied in depth or turn out to be quite challenging to formalize.
   This article aims to revisit the problem of subtyping iso-recursive types. We start by introducing a novel declarative specification for Amber-style iso-recursive subtyping. Informally, the specification states that two recursive types are subtypes if all their finite unfoldings are subtypes. The Amber rules are shown to have equivalent expressive power to this declarative specification. We then show two variants of sound, complete and decidable algorithmic formulations of subtyping with respect to the declarative specification, which employ the idea of double unfoldings. Compared to the Amber rules, the double unfolding rules have the advantage of: (1) being modular; (2) not requiring reflexivity to be built in; (3) leading to an easy proof of transitivity of subtyping; and (4) being easily applicable to subtyping relations that are not antisymmetric (such as subtyping relations with record types). This work sheds new insights on the theory of subtyping iso-recursive types, and the new rules based on double unfoldings have important advantages over the original Amber rules involving recursive types. All results are mechanically formalized in the Coq theorem prover.
C1 [Zhou, Yaoda; Zhao, Jinxu; Oliveira, Bruno C. D. S.] Univ Hong Kong, Dept Comp Sci, Hong Kong 999077, Peoples R China.
C3 University of Hong Kong
RP Zhou, YD (corresponding author), Univ Hong Kong, Dept Comp Sci, Hong Kong 999077, Peoples R China.
EM ydzhou@cs.hku.hk; jxzhao@cs.hku.hk; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
OI Zhou, Yaoda/0000-0002-4170-6160; Oliveira, Bruno/0000-0002-1846-7210
FU Hong Kong Research Grant Council [17209519, 17209520]
FX This work has been sponsored by Hong Kong Research Grant Council
   projects number 17209519 and 17209520.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Aldrich J, 2008, FDPE'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON FUNCTIONAL AND DECLARATIVE PROGRAMMING IN EDUCATION, P31
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   [Anonymous], 1996, A Theory of Objects
   Appel A.W., 2000, PROC 27 ACM S PRINCI, P243
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Backes M, 2014, J COMPUT SECUR, V22, P301, DOI 10.3233/JCS-130493
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   CARDELLI L, 1986, LECT NOTES COMPUT SC, V242, P21
   CARDONE F, 1991, THEOR COMPUT SCI, V83, P29, DOI 10.1016/0304-3975(91)90038-4
   Castagna G, 2005, LECT NOTES COMPUT SC, V3580, P30
   Castagna G, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P219, DOI 10.1145/1599410.1599437
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Chen TC, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P135, DOI 10.1145/2643135.2643138
   Chugh R, 2015, LECT NOTES COMPUT SC, V9032, P257, DOI 10.1007/978-3-662-46669-8_11
   Colazzo D., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P137, DOI 10.1109/LICS.1999.782605
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P50, DOI 10.1145/301631.301641
   Danielsson NA, 2010, LECT NOTES COMPUT SC, V6120, P100, DOI 10.1007/978-3-642-13321-3_8
   Duggan D, 2002, ACM T PROGR LANG SYS, V24, P711, DOI 10.1145/586088.586093
   Gapeyev V, 2002, J FUNCT PROGRAM, V12, P511, DOI 10.1017/S0956796802004318
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Ghelli G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P146, DOI 10.1007/BFb0037104
   Hofmann M, 1996, INFORM COMPUT, V126, P11, DOI 10.1006/inco.1996.0031
   Hosoya Haruo, 1998, Datatypes and Subtyping
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lee Joseph, 2015, P EUROPEAN C OBJECT
   Ligatti J, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994596
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 2013, J FUNCT PROGRAM, V23, P38, DOI 10.1017/S0956796812000366
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Siek Jeremy G., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P388, DOI 10.1007/978-3-319-30936-1_21
   Solomon Marvin H., 1978, P 5 ACM SIGACTSIGPLA, P31, DOI DOI 10.1145/512760.512765
   Stone Chris, 1996, CMUCS96136 CARN MELL
   Swamy N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P266
   The Coq Development Team, 2019, COQ
   Vanderwaart JC, 2003, ACM SIGPLAN NOTICES, V38, P98, DOI 10.1145/640136.604187
   Yang YP, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000108
   Zhou Yaoda, 2020, P ACM PROGRAMMING LA
NR 46
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2022
VL 44
IS 4
AR 24
DI 10.1145/3549537
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7S4NU
UT WOS:000910732700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Forejt, V
   Joshi, S
   Kroening, D
   Narayanaswamy, G
   Sharma, S
AF Forejt, Vojtech
   Joshi, Saurabh
   Kroening, Daniel
   Narayanaswamy, Ganesh
   Sharma, Subodh
TI Precise Predictive Analysis for Discovering Communication Deadlocks in
   MPI Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Single-path verification; MPI programs; deadlock discovery
ID VERIFICATION
AB The Message Passing Interface (MPI) is the standard API for parallelization in high-performance and scientific computing. Communication deadlocks are a frequent problem in MPI programs, and this article addresses the problem of discovering such deadlocks. We begin by showing that if an MPI program is single path, the problem of discovering communication deadlocks is NP-complete. We then present a novel propositional encoding scheme that captures the existence of communication deadlocks. The encoding is based onmodeling executions with partial orders and implemented in a tool called MOPPER. The tool executes an MPI program, collects the trace, builds a formula from the trace using the propositional encoding scheme, and checks its satisfiability. Finally, we present experimental results that quantify the benefit of the approach in comparison to other analyzers and demonstrate that it offers a scalable solution for single-path programs.
C1 [Forejt, Vojtech; Kroening, Daniel] Diffblue Ltd, Oxford, England.
   [Joshi, Saurabh] IIT Hyderabad, Dept CSE, Kandi 502285, Telangana, India.
   [Forejt, Vojtech; Kroening, Daniel; Narayanaswamy, Ganesh] Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
   [Sharma, Subodh] IIT Delhi, Dept Comp Sci & Engn, Bharti 419, New Delhi 110016, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Hyderabad; University of Oxford; Indian Institute of
   Technology System (IIT System); Indian Institute of Technology (IIT) -
   Delhi
RP Joshi, S (corresponding author), IIT Hyderabad, Dept CSE, Kandi 502285, Telangana, India.
EM sbjoshi@iith.ac.in; svs@cse.iitd.ac.in
RI Joshi, Saurabh/Y-8959-2019
OI Joshi, Saurabh/0000-0001-8070-1525; Sharma, Subodh/0000-0003-3069-3744;
   Kroening, Daniel/0000-0002-6681-5283
FU Department of Computer Science, University of Oxford; EPSRC [H017585/1,
   J012564/1, M023656/1]; EU FP7 STREP PINCETTE; ERC [CPROVER 280053]; H
   FET OPEN [712689 SC2]; UK government
FX The majority of this work was carried out when V. Forejt, S. Joshi, and
   D. Kroening were employed and supported by the Department of Computer
   Science, University of Oxford. V. Forejt is also affiliated with Masaryk
   University, Czech Republic. The authors were supported in part by EPSRC
   H017585/1, J012564/1, and M023656/1; the EU FP7 STREP PINCETTE; ERC
   CPROVER 280053; and the H2020 FET OPEN 712689 SC<SUP>2</SUP>. G.
   Narayanaswamy is a Commonwealth Scholar, funded by the UK government.
CR Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], [No title captured]
   [Anonymous], P PAR COMP C DRESD S
   [Anonymous], [No title captured]
   Bailleux O, 2003, LECT NOTES COMPUT SC, V2833, P108
   Böhm S, 2016, LECT NOTES COMPUT SC, V9995, P102, DOI 10.1007/978-3-319-48989-6_7
   Bucur S, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P183
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Carter JD, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P351, DOI 10.1145/1693453.1693509
   Chen F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P221, DOI 10.1145/1368088.1368119
   CHENG A, 1995, THEOR COMPUT SCI, V147, P117, DOI 10.1016/0304-3975(94)00231-7
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Deniz E, 2012, ACM T DES AUTOMAT EL, V17, DOI 10.1145/2209291.2209296
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Eslamimehr M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P353, DOI 10.1145/2635868.2635918
   Forejt V, 2014, LECT NOTES COMPUT SC, V8442, P263, DOI 10.1007/978-3-319-06410-9_19
   Frisch Alan M., 2010, P 9 INT WORKSH CONST
   Fu XJ, 2015, IEEE HI ASS SYS ENGR, P181, DOI 10.1109/HASE.2015.35
   Gradara S, 2006, J COMPUT SYST SCI, V72, P1397, DOI 10.1016/j.jcss.2006.03.003
   Haque W., 2006, International Journal of Computers & Applications, V28, P19, DOI 10.2316/Journal.202.2006.1.202-1383
   Holt J, 2009, IEEE MICRO, V29, P40, DOI 10.1109/MM.2009.48
   Huang Y, 2015, LECT NOTES COMPUT SC, V9058, P219, DOI 10.1007/978-3-319-17524-9_16
   Huang Y, 2013, IEEE INT CONF AUTOM, P26, DOI 10.1109/ASE.2013.6693063
   Leung A, 2012, ACM SIGPLAN NOTICES, V47, P383, DOI 10.1145/2345156.2254110
   López HA, 2015, ACM SIGPLAN NOTICES, V50, P280, DOI [10.1145/2858965.2814302, 10.1145/2814270.2814302]
   Luecke GR, 2002, CONCURR COMP-PRACT E, V14, P911, DOI 10.1002/cpe.701
   Merz S, 2011, LECT NOTES COMPUT SC, V6722, P274, DOI 10.1007/978-3-642-21461-5_18
   Message Passing Interface Forum, 2009, MPI 2 2 DOC
   NATARAJAN N, 1984, LECT NOTES COMPUT SC, V181, P119
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   Santos Cesar, 2015, P 3 INT C ERG ICE 15
   Sharma Subodh, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P41, DOI 10.1109/FMCAD.2009.5351145
   Siegel SF, 2007, LECT NOTES COMPUT SC, V4349, P44
   Siegel SF, 2015, PROCEEDINGS OF SC15: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/2807591.2807635
   Siegel SF, 2011, MATH COMPUT SCI, V5, P427, DOI 10.1007/s11786-011-0101-6
   Siegel Stephen F., 2011, UDELCIS201101
   Vakkalanka S, 2008, LECT NOTES COMPUT SC, V5123, P66
   Vakkalanka Sarvani, 2010, THESIS U UTAH
   Vo Anh, 2010, P INT C HIGH PERF CO
   Wang C, 2009, LECT NOTES COMPUT SC, V5850, P256, DOI 10.1007/978-3-642-05089-3_17
   Xianjin Fu, 2014, 2014 21st Asia-Pacific Software Engineering Conference (APSEC), P127, DOI 10.1109/APSEC.2014.28
   Xue RN, 2009, ACM SIGPLAN NOTICES, V44, P251, DOI 10.1145/1594835.1504213
   Zirkel Timothy K., 2014, UDCIS2014002
   [No title captured]
NR 45
TC 21
Z9 23
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2017
VL 39
IS 4
AR 15
DI 10.1145/3095075
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AW
UT WOS:000414328600002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gordon, CS
   Ernst, MA
   Grossman, D
   Parkinson, MJ
AF Gordon, Colin S.
   Ernst, Michael A.
   Grossman, Dan
   Parkinson, Matthew J.
TI Verifying Invariants of Lock-Free Data Structures with Rely-Guarantee
   and Refinement Types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Type systems; rely-guarantee; refinement types; concurrency;
   verification
AB Verifying invariants of fine-grained concurrent, data structures is challenging, because interference from other threads may occur at any time. We propose a new way of proving invariants of fine-grained concurrent data structures: applying rely-guarantee reasoning to references in the concurrent setting. Rely-guarantee applied to references can verify bounds on thread interference without requiring a whole program to be verified.
   This article provides three new results. First, it provides a new approach to preserving invariants and restricting usage of concurrent data structures. Our approach targets a space between simple type systems and modern concurrent program logics, offering an intermediate point between unverified code and full verification. Furthermore, it avoids sealing concurrent data structure implementations and can interact safely with unverified imperative code. Second, we demonstrate the approach's broad applicability through a series of case studies, using two implementations: an axiomatic COQ domain-specific language and a library for Liquid Haskell. Third, these two implementations allow us to compare and contrast verifications by interactive proof (Coq) and a weaker form that can be expressed using automatically-discharged dependent refinement types (Liquid Haskell).
C1 [Gordon, Colin S.] Drexel Univ, Dept Comp Sci, 3141 Chestnut St,Suite 100, Philadelphia, PA 19104 USA.
   [Ernst, Michael A.; Grossman, Dan] Univ Washington, Paul G Allen Sch Comp Sci & Engn, Box 352350,185 E Stevens Way NE, Seattle, WA 98195 USA.
   [Parkinson, Matthew J.] Microsoft Res Ltd, 21 Stn Rd, Cambridge CB1 2FB, England.
C3 Drexel University; University of Washington; University of Washington
   Seattle; Microsoft
RP Gordon, CS (corresponding author), Drexel Univ, Dept Comp Sci, 3141 Chestnut St,Suite 100, Philadelphia, PA 19104 USA.
EM csgordon@drexel.edu; merest@cs.washington.edu; djg@cs.washington.edu;
   mattpark@microsoft.com
RI Gordon, Colin/AAM-3940-2020
OI Gordon, Colin/0000-0002-9012-4490
CR Agten Pieter, 2015, P ACM SIGPLAN SIGACT
   Anderson Richard J., 1991, P S THEOR COMP STOC
   Bertot Y., 2004, TEXT THEORET COMP S
   Boyland John, 2003, P STAT AN S SAS 03
   Brookes Stephen, 2004, P INT C CONC THEOR C
   Capretta Venanzio., 2004, A Polymorphic Representation of Induction-Recursion
   Chlipala Adam, 2009, P ACM SIGPLAN INT C
   Chlipala Adam, 2011, P ACM SIGPLAN C PROG
   Chvatal V., 1983, Linear programming
   Cohen Ernie, 2009, P INT C THEOR PROV H
   Cohen Ernie, 2010, P INT C COMP AID VER
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dinsdale-Young Thomas, 2010, P EUR C OBJ OR PROGR
   Dinsdale-Young Thomas., 2013, P ACM SIGPLAN SIGACT
   Dodds Mike, 2009, P EUR S PROGR LANG S
   Dybjer P, 2000, J SYMBOLIC LOGIC, V65, P525, DOI 10.2307/2586554
   Elmas Tayfun, 2009, P ACM SIGPLAN SIGACT
   Elmas Tayfun, 2010, TOOLS ALGORITHMS CON
   Feng Xinyu, 2009, P ACM SIGPLAN SIGACT
   Flanagan Cormac, 1999, P EUR S PROGR LANG S
   Flanagan Cormac, 2000, P ACM SIGPLAN C PROG
   Forsberg FN, 2010, LECT NOTES COMPUT SC, V6247, P454, DOI 10.1007/978-3-642-15205-4_35
   Freeman Tim, 1991, P ACM SIGPLAN C PROG
   Gordon Colin S., 2014, THESIS
   Gordon Colin S., 2013, P ACM SIGPLAN C PROG
   Gordon Colin S., 2012, P ACM INT OBJ OR PRO
   Harris Timothy L, 2001, LNCS, DOI DOI 10.1007/3-540-45414-4_21
   Heller Steve, 2006, P INT C PRINC DISTR
   Hendler Danny, 2004, P ACM S PAR ALG ARCH
   HERLIHY M, 1991, ACM T PROGR LANG SYS, V13, P124, DOI 10.1145/114005.102808
   Herlihy M., 2008, The Art of Multiprocessor Programming
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huang Wei, 2012, P ACM INT OBJ OR PRO
   Jacobs Bart, 2011, P ACM SIGPLAN SIGACT
   Jensen Jonas Braband, 2012, P EUR S PROGR LANG S
   Jhala Ranjit, 2016, PROGRAMMING REFINEME
   Jhala Ranjit, 2011, P INT C COMP AID VER
   Jhala Ranjit, 2015, LIQUIDHASKELL REFINE
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jung Ralf, 2015, P ACM SIGPLAN SIGACT
   Kawaguchi Ming, 2009, P ACM SIGPLAN C PROG
   Kawaguchi Ming, 2012, P ACM SIGPLAN C PROG
   Kawaguchi Ming, 2010, P INT C COMP AID VER
   Kloos Johannes, 2015, P EUR C OBJ OR PROGR
   Ley-Wild Ruy, 2013, P ACM SIGPLAN SIGAAC
   Liang Hongjin, 2013, P ACM SIGPLAN C PROG
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Madhavapeddy A, 2013, ACM SIGPLAN NOTICES, V48, P461, DOI 10.1145/2499368.2451167
   Michael Maged M., 1996, P S PRINC DISTR COMP
   Michael MM, 2004, IEEE T PARALL DISTR, V15, P491, DOI 10.1109/TPDS.2004.8
   Militao Filipe, 2014, P EUR C OBJ OR PROGR
   Militao Filipe, 2016, P EUR C OBJ OR PROGR
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Nanevski Aleksandar, 2009, P ACM SIGPLAN WORKSH
   Nanevski Aleksandar, 2008, P ACM SIGPLAN INT C
   Nanevski Aleksandar, 2010, P ACM SIGPLAN SIGACT
   O'Hearn Peter, 2001, P INT WORKSH COMP SC
   O'Hearn Peter W., 2010, P S PRINC DISTR COMP
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Pilkiewicz Alexandre, 2011, P ACM SIGPLAN WORKSH
   Pinto Pedro da Rocha, 2014, P EUR C OBJ OR PROGR
   Pottier Francois, 2008, P IEEE S LOG COMP SC
   Raad Azalea, 2015, P EUR S PROGR LANG S
   Reynolds John C., 1988, Tech Report, CMU-CS-88-159
   Rondon Patrick, 2012, THESIS
   Rondon Patrick, 2012, P INT C COMP AID VER
   Rondon Patrick M., 2010, P ACM SIGPLAN SIGACT
   Rondon Patrick M., 2008, P ACM SIGPLAN C PROG
   Sergey Ilya, 2015, P EUR S PROGR LANG S
   Sergey Ilya, 2015, P ACM SIGPLAN C PROG
   Smans Jan, 2014, CW622
   Svendsen Kasper, 2013, P EUR S PROGR LANG S
   Svendsen Kasper, 2014, P EUR S PROGR LANG S
   Swamy Nikhil, 2016, P ACM SIGPLAN SIGACT
   Swamy Nikhil, 2013, P ACM SIGPLAN C PROG
   Treiber R. K., 1986, TECHNICAL REPORT
   Tschantz Matthew S., 2005, P ACM INT OBJ OR PRO
   Turon Aaron, 2013, P ACM SIGPLAN INT C
   Vafeiadis Viktor, 2007, P INT C CONC THEOR C
   Vafeiadis Viktor, 2006, P ACM SIGPLAN S PRIN
   Vazou Niki, 2014, P ACM SIGPLAN INT C
   Vazou Niki, 2015, P ACM SIGPLAN INT C
   Vazou Niki, 2014, HASK WORKSH
   Vazou Niki, 2013, P EUR S PROGR LANG S
   Vazou Niki, 2016, LIQUIDHASKELL VERIFI
   Wickerson John, 2010, P EUR S PROGR LANG S
   Zibin Yoav, 2010, P ACM INT OBJ OR PRO
   Zibin Yoav, 2007, P JOINT M EUR SOFTW
NR 90
TC 9
Z9 10
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2017
VL 39
IS 3
AR 11
DI 10.1145/3064850
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AP
UT WOS:000414327900002
DA 2024-07-18
ER

PT J
AU Yiapanis, P
   Brown, G
   Luján, M
AF Yiapanis, Paraskevas
   Brown, Gavin
   Lujan, Mikel
TI Compiler-Driven Software Speculation for Thread-Level Parallelism
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Design; Algorithms; Performance; Thread-level speculation;
   speculative parallelization; runtime parallelization; automatic
   parallelization; multicore processors
ID PERFORMANCE; EXECUTION; MODEL
AB Current parallelizing compilers can tackle applications exercising regular access patterns on arrays or affine indices, where data dependencies can be expressed in a linear form. Unfortunately, there are cases that independence between statements of code cannot be guaranteed and thus the compiler conservatively produces sequential code. Programs that involve extensive pointer use, irregular access patterns, and loops with unknown number of iterations are examples of such cases. This limits the extraction of parallelism in cases where dependencies are rarely or never triggered at runtime. Speculative parallelism refers to methods employed during program execution that aim to produce a valid parallel execution schedule for programs immune to static parallelization. The motivation for this article is to review recent developments in the area of compiler-driven software speculation for thread-level parallelism and how they came about. The article is divided into two parts. In the first part the fundamentals of speculative parallelization for thread-level parallelism are explained along with a design choice categorization for implementing such systems. Design choices include the ways speculative data is handled, how data dependence violations are detected and resolved, how the correct data are made visible to other threads, or how speculative threads are scheduled. The second part is structured around those design choices providing the advances and trends in the literature with reference to key developments in the area. Although the focus of the article is in software speculative parallelization, a section is dedicated for providing the interested reader with pointers and references for exploring similar topics such as hardware thread-level speculation, transactional memory, and automatic parallelization.
C1 [Yiapanis, Paraskevas; Brown, Gavin; Lujan, Mikel] Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
C3 University of Manchester
RP Yiapanis, P (corresponding author), Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
EM pyiapa@gmail.com; gavin.brown@manchester.ac.uk;
   mikel.lujan@manchester.ac.uk
OI Yiapanis, Paris/0000-0003-4924-2214; Brown, Gavin/0000-0003-2261-9018
FU UK Engineering and Physical Sciences Research Council (EPSRC) [PAMELA
   EP/K008730/1, AnyScale Apps EP/L000725/1, iTLS EP/G000662/1]; Royal
   Society University Research Fellowship; EPSRC [EP/L000725/1,
   EP/G000662/1, EP/K008730/1] Funding Source: UKRI
FX This research was conducted with support from the UK Engineering and
   Physical Sciences Research Council (EPSRC), on grants PAMELA
   EP/K008730/1, AnyScale Apps EP/L000725/1, and iTLS EP/G000662/1. Dr.
   Lujan is supported by a Royal Society University Research Fellowship.
CR August DI, 1998, CONF PROC INT SYMP C, P227, DOI 10.1109/ISCA.1998.694777
   BACON DF, 1994, ACM COMPUT SURV, V26, P345, DOI 10.1145/197405.197406
   Boehm HJ, 1996, ACM SIGPLAN NOTICES, V31, P89, DOI 10.1145/249069.231394
   Bridges Matthew, 2008, TECHNICAL REPORT
   Bridges MJ, 2007, INT SYMP MICROARCH, P69
   Bruening Derek, 2000, WORKSH FEEDB DIR DYN
   Ceze L, 2006, CONF PROC INT SYMP C, P227, DOI 10.1145/1150019.1136506
   Chen MK, 2003, CONF PROC INT SYMP C, P434, DOI 10.1109/ISCA.2003.1207020
   Cintra M, 2005, IEEE T PARALL DISTR, V16, P562, DOI 10.1109/TPDS.2005.69
   Cintra M, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P13, DOI [10.1109/ISCA.2000.854373, 10.1145/342001.363382]
   Cintra Marcelo, 2003, P 9 ACM SIGPLAN S PR
   Cytron R., 1986, Proceedings of the 1986 International Conference on Parallel Processing (Cat. No.86CH2355-6), P836
   Dang FH, 2002, P INT PAR DISTR PROC, P20
   Dean Jeffrey, 2004, P C S OP SYST DES IM
   Ding C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P223, DOI 10.1145/1250734.1250760
   Ding-Kai Chen, 1994, Proceedings Supercomputing '94 (Cat. No.94CH34819), P518, DOI 10.1109/SUPERC.1994.344315
   Garzaran MariaJesus., 2005, ACM T ARCHIT CODE OP, V2, P247
   Gopal S, 1998, 1998 FOURTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P195, DOI 10.1109/HPCA.1998.650559
   Gupta Manish., 1998, SC 98 P 1998 ACMIEEE, P1
   Hammond L, 1998, ACM SIGPLAN NOTICES, V33, P58, DOI 10.1145/291006.291020
   Hanjun Kim, 2010, Proceedings 2010 43rd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 2010), P3, DOI 10.1109/MICRO.2010.19
   Harris T., 2010, T MEMORY
   Harris T, 2006, ACM SIGPLAN NOTICES, V41, P14, DOI 10.1145/1133981.1133984
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   Howard Jason, 2010, 2010 IEEE International Solid-State Circuits Conference (ISSCC), P108, DOI 10.1109/ISSCC.2010.5434077
   Hu Shiwen, 2003, J INSTRUCTION LEVEL, V5, P1
   Ioannou Nikolas, 2010, P IEEE INT S WORKL C
   Johnson NP, 2012, ACM SIGPLAN NOTICES, V47, P359, DOI 10.1145/2345156.2254107
   Johnson TA, 2004, ACM SIGPLAN NOTICES, V39, P59, DOI 10.1145/996893.996851
   Kennedy Ken., 2002, Optimizing compilers for modern architectures: a dependence-based approach
   Luján M, 2007, LECT NOTES COMPUT SC, V4782, P460
   Lynch C, 2008, NATURE, V455, P28, DOI 10.1038/455028a
   Marcuello P, 2002, EIGHTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P55
   Marcuello P, 1999, LECT NOTES COMPUT SC, V1593, P754
   Martinsen J. K., 2011, 2011 9th IEEE/ACS International Conference on Computer Systems and Applications (AICCSA), P241, DOI 10.1109/AICCSA.2011.6126611
   Martinsen JK, 2013, IEEE INTERNET COMPUT, V17, P10, DOI 10.1109/MIC.2012.146
   Mehrara M, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P166, DOI 10.1145/1542476.1542495
   Midkiff SamuelP., 2012, Automatic Parallelization: An Overview of Fundamental Compiler Techniques
   Nystrom EM, 2004, LECT NOTES COMPUT SC, V3148, P165
   Oancea CE, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P223
   Oplinger Jeffrey, 1997, CSLTR97715 STANF U
   Ottoni G, 2005, INT SYMP MICROARCH, P105
   Pickett CJF, 2006, LECT NOTES COMPUT SC, V4339, P304, DOI 10.1007/978-3-540-69330-7_21
   Prabhu M.K., 2005, PPOPP 05, P142
   Raman A, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P65
   Raman E, 2008, INT SYM CODE GENER, P114
   Rangan R, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P177, DOI 10.1109/PACT.2004.1342552
   Rangan R, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1400112.1400113
   Ratanaworabhan P., 2010, P 2010 USENIX C WEB
   Rauchwerger L, 1998, PARALLEL COMPUT, V24, P527, DOI 10.1016/S0167-8191(98)00024-6
   RAUCHWERGER L, 1995, SIGPLAN NOTICES, V30, P218, DOI 10.1145/223428.207148
   Rauchwerger Lawrence., 1994, P 8 INT C SUPERCOMPU, P33, DOI 10.1145/181181.181254
   Rauchwerger Lawrence, 1994, CSRD827 U ILL
   Renan Jose., 2005, Proc. of the International Conference on Supercomputing. ICS'05, P219
   Richards G, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P1, DOI 10.1145/1806596.1806598
   Rundberg Peter, 2001, J INSTRUCTION LEVEL, V3, P1
   Saha B., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P187, DOI 10.1145/1122971.1123001
   SALTZ JH, 1991, IEEE T COMPUT, V40, P603, DOI 10.1109/12.88484
   Salz Joel H., 1989, P ICS, P29
   Salz Joel H., 1991, P 1991 INT C PAR PRO, P174
   Spear ME, 2006, LECT NOTES COMPUT SC, V4167, P179
   Spear MF, 2010, SPAA '10: PROCEEDINGS OF THE TWENTY-SECOND ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P273
   Steffan Gregory, 2003, THESIS
   Steffan JG, 2005, ACM T COMPUT SYST, V23, P253, DOI 10.1145/1082469.1082471
   Steffan JG, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P1, DOI [10.1145/342001.339650, 10.1109/ISCA.2000.854372]
   Tang P., 1986, Proceedings of the 1986 International Conference on Parallel Processing (Cat. No.86CH2355-6), P528
   Thies W, 2007, INT SYMP MICROARCH, P356, DOI 10.1109/MICRO.2007.38
   Tian C, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62, DOI 10.1145/1806596.1806604
   Tian C, 2008, INT SYMP MICROARCH, P330, DOI 10.1109/MICRO.2008.4771802
   Vachharajani Neil, 2007, 2007 16th International Conference on Parallel Architectures and Compilation Techniques, P49
   Wang A, 2012, INT CONFER PARA, P127
   Wei Liu, 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P158, DOI 10.1145/1122971.1122997
   Yiapanis P, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400698
   Yiapanis Paraskevas, 2013, THESIS
   Zhang CG, 2013, IEEE ACM INT SYMP, P120, DOI 10.1109/CCGrid.2013.34
   Zhong HT, 2008, INT S HIGH PERF COMP, P267
   ZHU CQ, 1987, IEEE T SOFTWARE ENG, V13, P726, DOI 10.1109/TSE.1987.233477
NR 77
TC 6
Z9 6
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2016
VL 38
IS 2
AR 5
DI 10.1145/2821505
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DA8UG
UT WOS:000368081200002
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Elder, M
   Lim, J
   Sharma, T
   Andersen, T
   Reps, T
AF Elder, Matt
   Lim, Junghee
   Sharma, Tushar
   Andersen, Tycho
   Reps, Thomas
TI Abstract Domains of Affine Relations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Theory; Verification; Experimentation; Performance; Abstract
   domain; abstract interpretation; affine relation; static analysis;
   modular arithmetic; Howell form; symbolic abstraction
ID PRECISE INTERPROCEDURAL ANALYSIS; STATIC ANALYSIS; PROGRAMS; SYSTEM
AB This article considers some known abstract domains for affine-relation analysis (ARA), along with several variants, and studies how they relate to each other. The various domains represent sets of points that satisfy Aline relations over variables that hold machine integers and are based on an extension of linear algebra to modules over a ring (in particular, arithmetic performed modulo 2(w), for some machine-integer width w). We show that the abstract domains of Muller-Olm/Seidl (MOS) and King,/Sondergaard (KS) are, in general, incomparable. However, we give sound interconversion methods. In other words, we give an algorithm to convert a KS element v(KS) to an overapproximating MOS element v(mos) that is, y(v(Ks)) subset of gamma(v(mos)) as well as an algorithm to convert an MOS element w(mos) to an overapproximating KS element w(KS)-that is, Y(w(mos)) subset of y(w(KS))
   The article provides insight on the range of options that one has for performing ARA in a program analyzer:
   We describe how to perform a greedy, operator-by-operator abstraction method to obtain KS abstract transtbrmers.
   We also describe a more global approach to obtaining KS abstract transformers that considers the semantics of an entire instruction, basic block, or other loop-free program fragment.
   The latter method can yield best abstract transformers, and hence can be more precise than the former method. However, the latter method is more expensive.
   We also explain how to use the KS domain for interprocedural program analysis using a bit-precise concrete semantics, but without bit blasting.
   Categories and Subject Descriptors: D.2.4 [Software Engineering]: Software/Program Verification Assertion checkers; Formal methods; Validation; F.3.1 [Logics and Meanings of Programs]: Specifying and Verifying and Reasoning about Programs Invariants; Mechanical verification
C1 [Elder, Matt] Quixey, Mountain View, CA 94041 USA.
   [Lim, Junghee] GrammaTech Inc, Ithaca, NY 14850 USA.
   [Sharma, Tushar] Univ Wisconsin, Dept Comp Sci, Madison, WI 53706 USA.
   [Andersen, Tycho] Canon Grp Ltd, London SE1 0SU, England.
   [Reps, Thomas] Univ Wisconsin, Dept Comp Sci, Madison, WI 53703 USA.
   [Reps, Thomas] GrammaTech Inc, Madison, WI 53705 USA.
C3 University of Wisconsin System; University of Wisconsin Madison; Canon
   Incorporated; University of Wisconsin System; University of Wisconsin
   Madison
RP Reps, T (corresponding author), Univ Wisconsin, Dept Comp Sci, 1210 W Dayton St, Madison, WI 53703 USA.
EM fiddlemath@gmail.com; junghee@grammatech.com; tsharma@cs.wisc.edu;
   tycho@tycho.ws; reps@cs.wisc.edu
FU NSF [0810053, 0904371]; ONR [N00014409-1-0510, 10-M-0251, 11-C-0447];
   ARL [W911NE-09-1-0413]; AFRL [FA9550-09-1-0279, FA8650-10-C-7088]; DARPA
   [IIR0011-122-0012]; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [0904371] Funding Source:
   National Science Foundation; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [0810053] Funding
   Source: National Science Foundation
FX This work was supported in part by NSF under grants CCF-{0810053,
   0904371], by ONR under grants N00014409-1-0510, 10-M-0251, 11-C-0447),
   by ARL under grant W911NE-09-1-0413, by AFRL wider contracts
   FA9550-09-1-0279 and FA8650-10-C-7088, and by DARPA under cooperative
   agreement IIR0011-122-0012. Any opinions, findings, and conclusions or
   recommendations expressed in this publication are those of the authors
   and do not necessarily reflect the views of the sponsoring agencies.
CR [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   [Anonymous], 2006, YICES SMT SOLVER
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Bagnara R, 2007, LECT NOTES COMPUT SC, V4407, P219, DOI 10.1007/978-3-540-71410-1_16
   Bouajjani A, 2003, ACM SIGPLAN NOTICES, V38, P62, DOI 10.1145/640128.604137
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Clauss P., 1996, P 10 ACM INT C SUPER, P278, DOI DOI 10.1145/237578.237617
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Elder M, 2011, LECT NOTES COMPUT SC, V6887, P198, DOI 10.1007/978-3-642-23702-7_17
   Fahringer T, 1998, J SUPERCOMPUT, V12, P227, DOI 10.1023/A:1008013906463
   Fredrikson M., 2013, COMMUNICATION
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   Gulwani S, 2005, ACM SIGPLAN NOTICES, V40, P324, DOI 10.1145/1047659.1040332
   Gulwani S, 2003, ACM SIGPLAN NOTICES, V38, P74, DOI 10.1145/640128.604138
   Howell John A., 1986, Linear and Multilinear Algebra, V19, P67, DOI [10.1080/03081088608817705, DOI 10.1080/03081088608817705]
   Jeannet B., 2007, POLKA
   Jones N.D., 1986, POPL, P296, DOI DOI 10.1145/512644.512672
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Kidd N., 2007, WALi: The Weighted Automaton Library
   King A, 2008, LECT NOTES COMPUT SC, V5123, P281
   King A, 2010, LECT NOTES COMPUT SC, V5944, P197, DOI 10.1007/978-3-642-11319-2_16
   Lal A, 2005, LECT NOTES COMPUT SC, V3576, P434
   Lal A, 2006, LECT NOTES COMPUT SC, V4144, P343, DOI 10.1007/11817963_32
   Lim J, 2008, LECT NOTES COMPUT SC, V4959, P36
   Lim J, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450139
   Malmkjaer K., 1993, THESIS KANSAS STATE
   Meyer, 2000, MATRIX ANAL APPL LIN, DOI 10.1137/1.9780898719512
   Müller-Olm M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275504
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3672, P235
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3444, P46
   Müller-Olm M, 2004, ACM SIGPLAN NOTICES, V39, P330, DOI 10.1145/982962.964029
   Muller-Olm M., 2005, COMMUNICATION
   MYCROFT A, 1986, LECT NOTES COMPUT SC, V217, P156
   NIELSON F, 1989, THEOR COMPUT SCI, V69, P117, DOI 10.1016/0304-3975(89)90091-1
   PUGH W, 1994, SIGPLAN NOTICES, V29, P121, DOI 10.1145/773473.178254
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Storjohann A., 2000, THESIS ETH ZURICH ZU
   Tawbi N., 1994, Proceedings Eighth International Parallel Processing Symposium (Cat. No.94TH0652-8), P217, DOI 10.1109/IPPS.1994.288298
   Thakur Aditya, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P174, DOI 10.1007/978-3-642-31424-7_17
   Thakur A, 2012, LECT NOTES COMPUT SC, V7460, P111, DOI 10.1007/978-3-642-33125-1_10
   Warren H. S, 2003, Hacker's Delight
   [No title captured]
NR 45
TC 7
Z9 7
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2014
VL 36
IS 4
AR 11
DI 10.1145/2651361
PG 73
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT0JN
UT WOS:000344622700001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Bouajjani, A
   Emmi, M
AF Bouajjani, Ahmed
   Emmi, Michael
TI Analysis of Recursively Parallel Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Reliability; Verification; Concurrency; parallelism;
   verification
ID MODEL-CHECKING; INTERPROCEDURAL ANALYSIS; CONCURRENT PROGRAMS;
   VERIFICATION; REACHABILITY; COMPLEXITY; ABSTRACTION; ALGORITHMS;
   CALCULUS; SYSTEMS
AB We propose a general formal model of isolated hierarchical parallel computations, and identify several fragments to match the concurrency constructs present in real-world programming languages such as Cilk and X10. By associating fundamental formal models (vector addition systems with recursive transitions) to each fragment, we provide a common platform for exposing the relative difficulties of algorithmic reasoning. For each case we measure the complexity of deciding state reachability for finite-data recursive programs, and propose algorithms for the decidable cases. The complexities which include PTIME, NP, EXPSPACE, and 2EXPTIME contrast with undecidable state reachability for recursive multithreaded programs.
C1 [Bouajjani, Ahmed; Emmi, Michael] Univ Paris Diderot, LIAFA, Paris, France.
C3 Universite Paris Cite
RP Emmi, M (corresponding author), Univ Paris Diderot, LIAFA, Paris, France.
EM mje@liafa.univ-paris-diderot.fr
FU Fondation Sciences Mathematiques de Paris;  [ANR-09-SEGI-016 Veridye]
FX M. Emmi was supported by a postdoctoral fellowship from the Fondation
   Sciences Mathematiques de Paris. This work was partially supported by
   the project ANR-09-SEGI-016 Veridye.
CR Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   Agarwal S, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P183, DOI 10.1145/1229428.1229471
   Allen E., 2006, The Fortress Language Specification
   [Anonymous], 1981, P STOC, DOI DOI 10.1145/800076.802477
   [Anonymous], 1998, THESIS MIT
   [Anonymous], P 2011 ACM SIGPLAN W
   [Anonymous], 2008, FSTTCS
   [Anonymous], 1993, Computational Complexity
   [Anonymous], P 1 INT WORKSH FUT A
   [Anonymous], 1999, J FUNCT PROGRAM, DOI [DOI 10.1017/S0956796899003329, 10.1017/S0956796899003329]
   [Anonymous], 1976, 62 YAL U
   [Anonymous], P 20 INT S FDN SOFTW
   [Anonymous], 1982, PROC STOC 1982, DOI [10.1145/800070.802201, DOI 10.1145/800070.802201]
   [Anonymous], 1985, Technical report 85.7
   [Anonymous], LEIBNIZ INT P INFORM
   [Anonymous], CORR
   [Anonymous], P ACM SIGPLAN C PROG
   [Anonymous], 2001, MODEL CHECKING
   APT KR, 1986, INFORM PROCESS LETT, V22, P307, DOI 10.1016/0020-0190(86)90071-2
   Atig MF, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(4:04)2011
   Ball T., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P158
   Bouaijani A, 2005, LECT NOTES COMPUT SC, V3653, P473, DOI 10.1007/11539452_36
   Bouajjani A, 2006, LECT NOTES COMPUT SC, V4098, P136
   Burckhardt S, 2010, ACM SIGPLAN NOTICES, V45, P691, DOI 10.1145/1932682.1869515
   Chamberlain BL, 2007, INT J HIGH PERFORM C, V21, P291, DOI 10.1177/1094342007078442
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Chaudhuri S, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1328897.1328460
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Delzanno G, 2002, LECT NOTES COMPUT SC, V2280, P173
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   Emmi M, 2011, ACM SIGPLAN NOTICES, V46, P411, DOI 10.1145/1925844.1926432
   Janicki R., 1994, Journal of Information Processing and Cybernetics, V30, P143
   Esparza J, 2003, INFORM COMPUT, V186, P355, DOI 10.1016/S0890-5401(03)00139-1
   Esparza J., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P1, DOI 10.1145/325694.325697
   Esparza J, 2011, ACM SIGPLAN NOTICES, V46, P499, DOI 10.1145/1925844.1926443
   Fatahalian K., 2006, SC 06, P83
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Flanagan C, 2003, LECT NOTES COMPUT SC, V2648, P213
   Ganty P, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160915
   Ganty P, 2009, ACM SIGPLAN NOTICES, V44, P102, DOI 10.1145/1594834.1480895
   Geeraerts G, 2006, J COMPUT SYST SCI, V72, P180, DOI 10.1016/j.jcss.2005.09.001
   GERMAN SM, 1992, J ACM, V39, P675, DOI 10.1145/146637.146681
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gupta A, 2011, ACM SIGPLAN NOTICES, V46, P331, DOI 10.1145/1925844.1926424
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2725, P262
   Jhala R, 2007, ACM SIGPLAN NOTICES, V42, P339, DOI 10.1145/1190215.1190266
   Kahlon V, 2009, IEEE S LOG, P27, DOI 10.1109/LICS.2009.45
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Knoop J, 1996, ACM T PROGR LANG SYS, V18, P268, DOI 10.1145/229542.229545
   Kozen D., 1977, 18th Annual Symposium on Foundations of Computer Science, P254, DOI 10.1109/SFCS.1977.16
   La Torre S, 2010, LECT NOTES COMPUT SC, V6174, P629, DOI 10.1007/978-3-642-14295-6_54
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Larus JamesR., 2006, Transactional Memory, DOI [DOI 10.2200/S00070ED1V01Y200611CAC002, 10.2200/S00070ED1V01Y200611CAC002]
   Lee EA, 2006, COMPUTER, V39, P33, DOI 10.1109/MC.2006.180
   Lee JK, 2010, ACM SIGPLAN NOTICES, V45, P25, DOI 10.1145/1837853.1693459
   Leijen D, 2009, ACM SIGPLAN NOTICES, V44, P227, DOI 10.1145/1639949.1640106
   Leroux J, 2011, ACM SIGPLAN NOTICES, V46, P307, DOI 10.1145/1925844.1926421
   Musuvathi M, 2007, ACM SIGPLAN NOTICES, V42, P446, DOI 10.1145/1273442.1250785
   Nielson F., 1999, Principles of Program Analysis
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   Rackoff C., 1978, Theoretical Computer Science, V6, P223, DOI 10.1016/0304-3975(78)90036-1
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Savitch W. J., 1970, Journal of computer and system sciences, V4, P177, DOI [DOI 10.1016/S0022-0000(70)80006-X, 10. 1016/S0022-0000(70)80006-X]
   Seidl H, 2004, LECT NOTES COMPUT SC, V3142, P1136
   Seidl H, 2000, LECT NOTES COMPUT SC, V1782, P351
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P300, DOI 10.1007/11817963_29
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Sipser M., 2013, Introduction to the theory of computation, V3
   TAYLOR RN, 1983, ACTA INFORM, V19, P57, DOI 10.1007/BF00263928
   Verma KN, 2005, DISCRETE MATH THEOR, V7, P217
   Verma KN, 2005, LECT NOTES ARTIF INT, V3632, P337
NR 79
TC 12
Z9 12
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2013
VL 35
IS 3
AR 10
DI 10.1145/2518188
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 258BG
UT WOS:000327432300002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Bendersky, A
   Petrank, E
AF Bendersky, Anna
   Petrank, Erez
TI Space Overhead Bounds for Dynamic Memory Management with Partial
   Compaction
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Performance; Algorithms; Theory; Runtime systems; memory
   management; storage allocation; dynamic storage allocation; compaction;
   partial compaction
ID GARBAGE COLLECTION; CONCURRENT
AB Dynamic memory allocation is ubiquitous in today's runtime environments. Allocation and deallocation of objects during program execution may cause fragmentation and foil the program's ability to allocate objects. Robson [1971] has shown that a worst-case scenario can create a space overhead within a factor of log n of the space that is actually required by the program, where n is the size of the largest possible object. Compaction can eliminate fragmentation, but is too costly to be run frequently. Many runtime systems employ partial compaction, in which only a small fraction of the allocated objects are moved. Partial compaction reduces some of the existing fragmentation at an acceptable cost. In this article we study the effectiveness of partial compaction and provide the first rigorous lower and upper bounds on its effectiveness in reducing fragmentation at a low cost.
C1 [Bendersky, Anna; Petrank, Erez] Technion Israel Inst Technol, Dept Comp Sci, IL-32000 Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Bendersky, A (corresponding author), Technion Israel Inst Technol, Dept Comp Sci, IL-32000 Haifa, Israel.
EM annaben@gmail.com
FU Israel Science Foundation [283/10]
FX This work is supported by The Israel Science Foundation under grant no.
   283/10.
CR Abuaiadh D, 2004, ACM SIGPLAN NOTICES, V39, P224, DOI 10.1145/1035292.1028995
   ALBERT E, 2010, 9 INT S MEM MAN, V45, P121
   Albert E, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P129
   Bacon DF, 2003, ACM SIGPLAN NOTICES, V38, P285, DOI 10.1145/640128.604155
   Ben-Yitzak O., 2002, P 3 INT S MEM MAN BE, P100
   BOEHM H.-J., 2002, P 29 ANN ACM S PRINC
   Boehm HJ, 2004, ACM SIGPLAN NOTICES, V39, P210, DOI 10.1145/982962.964019
   BOEHM HJ, 1988, SOFTWARE PRACT EXPER, V18, P807, DOI 10.1002/spe.4380180902
   Click Cliff, 2005, P 1 ACMUSENIX INT C, P46, DOI [DOI 10.1145/1064979.1064988EVENT-PLACE:CHICAGO,IL,USA, 10.1145/1064979.1064988, DOI 10.1145/1064979.1064988]
   Detlefs David, 2004, P 4 INT S MEM MAN VA, DOI [10.1145/1029873.1029879, DOI 10.1145/1029873.1029879]
   Domani T., 2000, ISMM, V36, P155
   Jones R., 2011, GARBAGE COLLECTION H
   Kermany H, 2006, ACM SIGPLAN NOTICES, V41, P354, DOI 10.1145/1133981.1134023
   KOLODNER H., 2009, P 8 INT S MEM MAN
   Persson P, 1999, ACM SIGPLAN NOTICES, V34, P45, DOI 10.1145/315253.314440
   Petrank E, 2002, ACM SIGPLAN NOTICES, V37, P101, DOI 10.1145/565816.503283
   Pizlo F, 2008, ACM SIGPLAN NOTICES, V43, P33, DOI 10.1145/1379022.1375587
   Pizlo F, 2007, ISMM'07: PROCEEDINGS OF THE 2007 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P159
   POPL, 2002, ACM SIGPLAN NOT, P1
   ROBSON JM, 1974, J ACM, V21, P491, DOI 10.1145/321832.321846
   ROBSON JM, 1971, J ACM, V18, P416, DOI 10.1145/321650.321658
   Unnikrishnan L, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P139
   Unnikrishnaw L, 2001, ACM SIGPLAN NOTICES, V36, P102, DOI 10.1145/384196.384212
   Wilson PR, 1995, LECT NOTES COMPUT SC, V986, P1
NR 24
TC 8
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2012
VL 34
IS 3
AR 13
DI 10.1145/2362389.2362392
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 033FV
UT WOS:000310780500003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU De Fraine, B
   Ernst, E
   Südholt, M
AF De Fraine, Bruno
   Ernst, Erik
   Suedholt, Mario
TI Essential AOP: The A Calculus
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Theory; Aspect-oriented programming; semantics;
   typing
ID ADVICE; POINTCUTS; MODULES
AB Aspect-oriented programming (AOP) has produced interesting language designs, but also ad hoc semantics that needs clarification. We contribute to this clarification with a calculus that models essential AOP, both simpler and more general than existing formalizations. In AOP, advice may intercept method invocations, and proceed executes the suspended call. Proceed is an ad hoc mechanism, only usable inside advice bodies. Many pointcut mechanisms, for example, wildcards, also lack regularity. We model proceed using first-class closures, and shift complexity from pointcuts to ordinary object-oriented code. Two well-known pointcut categories, call and execution, are commonly considered similar. We formally expose their differences, and resolve the associated soundness problem. Our calculus includes type ranges, an intuitive and concise alternative to explicit type variables that allows advice to be polymorphic over intercepted methods. We use calculus parameters to cover type safety for a wide design space of other features. Type soundness is verified in Coq.
C1 [De Fraine, Bruno] Vrije Univ Brussel, Fac Sci, B-1050 Brussels, Belgium.
   [Ernst, Erik] Aarhus Univ, Dept Comp Sci, DK-8000 Aarhus C, Denmark.
   [Suedholt, Mario] Ecole Mines Nantes, Dept Informat, F-44307 Nantes 3, France.
C3 Vrije Universiteit Brussel; Aarhus University; IMT - Institut
   Mines-Telecom; IMT Atlantique
RP De Fraine, B (corresponding author), Vrije Univ Brussel, Fac Sci, Pl Laan 2, B-1050 Brussels, Belgium.
EM Bruno.De.Fraine@vub.ac.be; eernst@cs.au.dk; sudholt@mines-nantes.fr
CR Aldrich J, 2005, LECT NOTES COMPUT SC, V3586, P144
   Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   BERTOT Y, 2004, TEXTS THEORETICAL CO, V25
   BODDEN E., 2011, P 10 INT C ASP OR SO, P117
   BRICHAU J., 2005, SUVEY ASPECT ORIENTE
   Bruns G., 2004, PROC CONCUR 04, P209
   BURKE B, 2004, JBOSS ASPECT ORIENTE
   Clifton C, 2006, SCI COMPUT PROGRAM, V63, P321, DOI 10.1016/j.scico.2006.02.009
   DE FRAINE B., 2011, COQ SOURCE PROOFS RE
   De Fraine B, 2010, LECT NOTES COMPUT SC, V6183, P101
   De Fraine Bruno., 2008, P 7 INT C ASPECT ORI, P60, DOI [10.1145/1353482.1353491, DOI 10.1145/1353482.1353491]
   DEFRAINE B, 2009, THESIS VRIJE U BRUSS
   Douence R, 2002, LECT NOTES COMPUT SC, V2487, P173
   Douence R., 2001, LECT NOTES COMPUTER, V2192, P170, DOI DOI 10.1007/3-540-45429-2_13
   Douence R., 2004, C SPED ORIENTED SOFT, P141
   Ernst E, 2003, P 2 INT C ASP OR SOF, P150, DOI 10.1145/643603.643619
   Gybels Kris., 2003, P 2 INT C ASPECT ORI, P60
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jagadeesan R, 2006, SCI COMPUT PROGRAM, V63, P267, DOI 10.1016/j.scico.2006.02.008
   JOHNSON R., 2004, SPRING JAVE J2EE APP
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Lammel R., 2002, PROC AOSD 02, P41, DOI DOI 10.1145/508386.508392
   Lieberherr K, 2003, COMPUT J, V46, P542, DOI 10.1093/comjnl/46.5.542
   Ligatti J, 2006, SCI COMPUT PROGRAM, V63, P240, DOI 10.1016/j.scico.2006.01.004
   Mezini M, 1998, ACM SIGPLAN NOTICES, V33, P97, DOI 10.1145/286942.286950
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Ostermann K, 2005, LECT NOTES COMPUT SC, V3586, P214
   RINARD M, 2004, P 12 ACM SIGSOFT INT, P147
   Robinson Joan, 1966, INT AFF, V42, P159
   Sakurai Kouhei., 2004, AOSD 04, P16
   Suvee D., 2003, 2nd International Conference on Aspect-Oriented Software Development, P21
   TATSUZAWA H., 2005, P 10 INT C FUNCT PRO, P320
   Torgersen M., 2004, SAC 2004, P1289, DOI DOI 10.5381/JOT.2004.3.11.A5
   Wallach DS, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P52, DOI 10.1109/SECPRI.1998.674823
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
NR 37
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2012
VL 34
IS 3
AR 12
DI 10.1145/2362389.2362391
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 033FV
UT WOS:000310780500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Dietl, W
   Drossopoulou, S
   Müller, P
AF Dietl, Werner
   Drossopoulou, Sophia
   Mueller, Peter
TI Separating Ownership Topology and Encapsulation with Generic Universe
   Types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification; Encapsulation; generic; ownership
   types; owner-as-modifier; topology; universe types
ID MODULAR SPECIFICATION; JAVA; VERIFICATION; INVARIANTS; OBJECTS; MODEL;
   UNIQUENESS; PROGRAMS; PURITY
AB Ownership is a powerful concept to structure the object store and to control aliasing and modifications of objects. This article presents an ownership type system for a Java-like programming language with generic types.
   Like our earlier Universe type system, Generic Universe Types structure the heap hierarchically. In contrast to earlier work, we separate the enforcement of an ownership topology from an encapsulation system. The topological system uses an existential modifier to express that no ownership information is available statically. On top of the topological system, we build an encapsulation system that enforces the owner-as-modifier discipline. This discipline does not restrict aliasing, but requires modifications of an object to be initiated by its owner. This allows owner objects to control state changes of owned objects-for instance, to maintain invariants. Separating the topological system from the encapsulation system allows for a cleaner formalization, separation of concerns, and simpler reuse of the individual systems in different contexts.
C1 [Dietl, Werner] Univ Washington, Seattle, WA 98195 USA.
   [Drossopoulou, Sophia] Univ London Imperial Coll Sci Technol & Med, London SW7 2AZ, England.
   [Dietl, Werner; Mueller, Peter] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 University of Washington; University of Washington Seattle; Imperial
   College London; Swiss Federal Institutes of Technology Domain; ETH
   Zurich
RP Dietl, W (corresponding author), Univ Washington, Seattle, WA 98195 USA.
EM wmdietl@cs.washington.edu
FU European Commission, Future and Emerging Technologies [IST-2005-015905];
   EPSRC [EP/D061644/1]
FX This work was funded in part by the Information Society Technologies
   program of the European Commission, Future and Emerging Technologies
   under the IST-2005-015905 MOBIUS project, and the EPSRC grant Practical
   Ownership Types for Objects and Aspect Programs, EP/D061644/1.
CR ABI-ANTOUN M, 2007, P INT WORKSH AL CONF
   ABI-ANTOUN M, 2009, P INT WORKSH TYP LAN
   Aldrich J, 2004, LECT NOTES COMPUT SC, V3086, P1
   ALDRICH J, 2002, P ACM C OBJ OR PROGR, P311
   ALDRICH J, 2003, THESIS U WASHINGTON
   ALMEIDA P.S, 1998, THESIS IMPERIAL COLL
   Almeida PS, 1997, LECT NOTES COMPUT SC, V1241, P32, DOI 10.1007/BFb0053373
   Andreae C, 2006, LECT NOTES COMPUT SC, V4067, P124
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   [Anonymous], 2008, WORKSHOP SPECIFICATI
   [Anonymous], 2008, JML Reference Manual
   BANERJEE A, 2002, PRINCIPLES PROGRAMMI, P166
   BANERJEE A, 2004, 200414 STEV I TECHN
   Banerjee A, 2008, LECT NOTES COMPUT SC, V5142, P387, DOI 10.1007/978-3-540-70592-5_17
   BARNETT M, 2004, P FORM TECHN JAV LIK, P51
   Bierman G., 2003, 563 U CAMBR COMP LAB
   BIRKA A, 2004, P C OBJ OR PROGR SYS
   BOKOWSKI B, 1999, P 14 ANN C OBJ OR PR, P82
   BOYAPATI C., 2003, P INT WORKSH AL CONF
   BOYAPATI C, 2002, P 17 ACM SIGPLAN C O, P211
   BOYAPATI C, 2004, THESIS MIT CAMBRIDGE
   BOYAPATI C, 2003, P ACM SIGPLAN 2003 C, P324
   BOYAPATI C, 2003, POPL, P213
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   BOYLAND J, 2005, P FORM TECHN JAV LIK
   Boyland John., 2001, ECOOP'Ol - Object-Oriented Programming, 15th European Conference, number 2072 in Lecture Notes in Computer Science, P2, DOI [10.1007/3-540-45337-7_2, DOI 10.1007/3-540-45337-7_2]
   Burdy L, 2003, LECT NOTES COMPUT SC, V2805, P422
   BURDY L., 2003, P FMICS, P73
   CAMERON N, 2009, P EUR S PROGR LANG S
   CAMERON N, 2009, P INT WORKSH AL CONF
   Cameron N.R., 2007, P 22 ANN ACM SIGPLAN, P441, DOI DOI 10.1145/1297027.1297060
   Cameron N, 2008, LECT NOTES COMPUT SC, V5142, P2, DOI 10.1007/978-3-540-70592-5_2
   Cameron Nicholas Robert, 2009, Ph. D. Dissertation
   Cartwright R, 1996, ACM COMPUT SURV, V28, P349, DOI 10.1145/234528.234747
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Cheon Yoonsik., 2002, Proceedings of the International Conference on Software Engineering Research and Practice (SERP'02), P322
   Cheon Yoonsik, 2003, Ph.D. Dissertation
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clarke D, 2002, ACM SIGPLAN NOTICES, V37, P292, DOI 10.1145/583854.582447
   Clarke D., 2003, P ACM C OBJ OR PROGR, P374
   CLARKE D. G., 1998, P OBJ OR PROGR SYST
   CLARKE D. G., 2007, P C ASP OR SOFTW DEV
   Clarke David, 2001, Ph.D. Dissertation
   Cok DR, 2005, LECT NOTES COMPUT SC, V3362, P108
   Cunningham D, 2008, LECT NOTES COMPUT SC, V5382, P72, DOI 10.1007/978-3-540-92188-2_4
   Cunningham David., 2007, Verification and Analysis of Multi-threaded Java-like Programs (VAMP), P20
   Darvas A, 2007, LECT NOTES COMPUT SC, V4422, P336
   DETLEFS DL, 1998, 156 SRC
   DHARA K. K, 2001, 0102A IOW STAT U DEP
   DIETL W., 2008, P C FDN OBJ OR LANG
   Dietl W., 2009, 659 ETH ZUR DEP COMP
   DIETL W, 2009, THESIS ETH ZURICH
   DIETL W., 2004, P FORM TECHN JAV LIK, P49
   DIETL W., 2006, 532 ETH ZUR DEP COMP
   Dietl W, 2007, LECT NOTES COMPUT SC, V4609, P28
   Dietl W, 2005, J OBJECT TECHNOL, V4, P5, DOI 10.5381/jot.2005.4.8.a1
   Drossopoulou S, 2008, LECT NOTES COMPUT SC, V5142, P412, DOI 10.1007/978-3-540-70592-5_18
   Emir B, 2006, LECT NOTES COMPUT SC, V4067, P279
   Ernst D., 2005, OOPSLA, P211, DOI [DOI 10.1145/1103845.1094828, 10.1145/1094811.1094828, DOI 10.1145/1094811.1094828]
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Ernst MichaelD., 2008, Type annotations specification
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Flatt Matthew., 1999, FORMAL SYNTAX SEMANT, V1523, P241, DOI [10.1007/3-540-48737-9_7, DOI 10.1007/3-540-48737-9_7]
   GASIUNAS V., 2007, P INT C OBJ OR PROGR, P133, DOI DOI 10.1145/1297027.1297038
   GASIUNAS V., 2007, VCN CALCULUS MULTIDI
   Gosling J., 2005, Java Language Specification, Vthird
   Haack C, 2007, LECT NOTES COMPUT SC, V4421, P347
   Hatcliff J., 2009, CSTR0901 U CENTR FLO
   HERRMANN S., 2009, OBJECT TEAMS JAVA LA
   Herrmann S, 2008, J OBJECT TECHNOL, V7, P47, DOI 10.5381/jot.2008.7.9.a3
   Hill Gary, 1999, EXHIBITION CATALOGUE
   Hirschkoff D, 2005, LECT NOTES COMPUT SC, V3676, P389
   HOGG J, 1991, SIGPLAN NOTICES, V26, P271
   Hogg J., 1992, OOPS Messenger, V3, P11
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   IGARASHI A., 2007, P 22 ACM C OBJ OR PR, P113
   Jacobs B, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P137, DOI 10.1109/SEFM.2005.39
   Jacobs B, 2001, LECT NOTES COMPUT SC, V2028, P284
   Jacobs B, 2004, J LOGIC ALGEBR PROGR, V58, P61, DOI 10.1016/j.jlap.2003.07.005
   KASSIOS I. T., 2006, P S FORM METH FM
   Kennedy A, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/381694.378797
   KLEBERMA M., 2007, THESIS T U MUNICH
   KLEIN G, 2004, 0400001T1 NAT ICT AU
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Krishnaswami N, 2005, ACM SIGPLAN NOTICES, V40, P96, DOI 10.1145/1064978.1065023
   Leavens GT, 2007, FORM ASP COMPUT, V19, P159, DOI 10.1007/s00165-007-0026-7
   Leino KRM, 2008, LECT NOTES COMPUT SC, V5295, P192, DOI 10.1007/978-3-540-87873-5_17
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   Lu Y, 2006, ACM SIGPLAN NOTICES, V41, P359, DOI 10.1145/1111320.1111069
   Lu Y, 2005, LECT NOTES COMPUT SC, V3586, P479
   Lu Y, 2007, LECT NOTES COMPUT SC, V4609, P202
   Lu Y, 2006, LECT NOTES COMPUT SC, V4067, P99
   MADSEN O.L., 1989, P C OBJ OR PROGR SYS
   Meyer B., 1988, Object-Oriented Software Construction
   Müller P, 2003, CONCURR COMP-PRACT E, V15, P117, DOI 10.1002/cpe.713
   MULLER P, 2001, 279 FERN HAG
   MULLER P, 2002, LECT NOTES COMPUTER, V2262
   MULLER P., 2007, LECT NOTES COMPUTER, V4171, P93
   Muller P., 1999, Programming Languages and Fundamentals of Programming, P131
   Müller P, 2006, SCI COMPUT PROGRAM, V62, P253, DOI 10.1016/j.scico.2006.03.001
   Muller Peter., 2007, Proceedings of the 22nd Annual ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications, OOPSLA '07, P461
   NAGELI S., 2006, THESIS ETH ZURICH
   Nathan Foster J., 2006, Archive of Formal Proofs
   Naumann DA, 2007, THEOR COMPUT SCI, V376, P205, DOI 10.1016/j.tcs.2007.02.004
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   NOBLE J., 1998, LECT NOTES COMPUTER, V1445
   NYSTROM N., 2008, P ACM SIGPLAN C OBJ, P457, DOI [10.1145/1449764.1449800, DOI 10.1145/1449764.1449800]
   Odersky M, 2003, LECT NOTES COMPUT SC, V2743, P201
   Odersky Martin., 2008, SCALA LANGUAGE SPECI
   Östlund J, 2008, LECT NOTES BUS INF P, V11, P178
   Papi Matthew M., 2008, INT S SOFT TEST AN I, P201
   Poetzsch-Heffter A, 2007, LECT NOTES COMPUT SC, V4468, P157
   Poetzsch-Heffter A, 2006, LECT NOTES COMPUT SC, V4111, P313
   POTANIN A., 2007, THESIS VICTORIA U WE
   POTANIN A., 2004, P C FDN OBJ OR LANG
   Potanin A, 2006, ACM SIGPLAN NOTICES, V41, P311, DOI 10.1145/1167515.1167500
   REYNOLDS J. C., 2002, LOGIC COMPUT SCI
   Saito C, 2008, J FUNCT PROGRAM, V18, P285, DOI 10.1017/S0956796807006405
   Salcianu A, 2005, LECT NOTES COMPUT SC, V3385, P199
   Schäfer J, 2008, LECT NOTES COMPUT SC, V5153, P238
   Schaefer J, 2008, LECT NOTES COMPUT SC, V5051, P201, DOI 10.1007/978-3-540-68863-1_13
   SCHAFER J., 2008, JCOBOX COMPILER
   Schafer J., 2007, Journal of Object Technology, V6, P71
   SEWELL P, 2007, P 12 ACM S PRINC PRO, P1
   Skoglund M., 2002, Algebraic Methodology and Software Technology. 9th International Conference, AMAST 2002. Proceedings (Lecture Notes in Computer Science Vol.2422), P457
   SKOGLUND M., 2003, THESIS STOCKHOLM U
   SMANS J., 2009, LECT NOTES COMPUTER, P148
   SMITH S., 2008, P INT WORKSH AL CONF
   Sun Developer Network, 2010, SEC COD GUID JAV PRO
   von Praun C, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/504311.504288
   WADLER P., 1990, P C PROGR CONC METH
   Wrigstad T, 2007, J OBJECT TECHNOL, V6, P141, DOI 10.5381/jot.2007.6.4.a5
   Wrigstad Tobias, 2006, Ph.D. Dissertation
   ZIBIN Y., 2010, P C OBJ OR PROGR SYS
   ZIBIN Y., 2007, P EUR SOFTW ENG C FD
   [No title captured]
NR 140
TC 4
Z9 5
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2011
VL 33
IS 6
AR 20
DI 10.1145/2049706.2049709
PG 62
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 871PU
UT WOS:000298751000002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Wehr, S
   Thiemann, P
AF Wehr, Stefan
   Thiemann, Peter
TI JavaGI: The Interaction of Type Classes with Interfaces and Inheritance
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Theory; JavaGI; Java; generalized interfaces;
   retroactive interface implementations; external methods; open classes;
   multimethods; multiple dispatch; type conditionals; multiheaded
   interfaces; explicit implementing types; binary methods; static
   interfacemethods; implementation constraints; constraint entailment;
   subtyping; formalization; implementation; case studies; benchmarks
ID TRAITS; CLASSBOXES; EXTENSION; POLYTOIL
AB The language JavaGI extends Java 1.5 conservatively by a generalized interface mechanism. The generalization subsumes retroactive and type-conditional interface implementations, binary methods, symmetric multiple dispatch, interfaces over families of types, and static interface methods. These features make certain coding patterns redundant, increase the expressiveness of the type system, and permit solutions to extension and integration problems with components in binary form, for which previously several unrelated extensions had been suggested.
   This article explains JavaGI and motivates its design. Moreover, it formalizes a core calculus for JavaGI and proves type soundness, decidability of typechecking, and determinacy of evaluation. The article also presents the implementation of a JavaGI compiler and an accompanying run-time system. The compiler, based on the Eclipse Compiler for Java, offers mostly modular static typechecking and fully modular code generation. It defers certain well-formedness checks until load time to increase flexibility and to enable full support for dynamic loading. Benchmarks show that the code generated by the compiler offers good performance. Several case studies demonstrate the practical utility of the language and its implementation.
C1 [Wehr, Stefan] Factis Res GmbH, D-79100 Freiburg, Germany.
   [Wehr, Stefan; Thiemann, Peter] Univ Freiburg, D-79110 Freiburg, Germany.
C3 University of Freiburg
RP Wehr, S (corresponding author), Factis Res GmbH, Merzhauserstr 177, D-79100 Freiburg, Germany.
EM thiemann@informatik.uni-freiburg.de
CR Allen E, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1117, DOI 10.1145/1244002.1244245
   Ancona D., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P354
   [Anonymous], 1974, LNCS
   [Anonymous], 1998, Term rewriting and all thatM
   [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1981, Technical Report DAIMI FN-19
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   *APPL INC, 2009, OBJ C PROGR LANG
   *ASPECTJ TEAM, 2009, ASPECTJ DEV ENV GUID
   *ASPECTJ TEAM, 2009, ASPECTJ PROGR GUID
   BAUMGARTNER G, 2002, OSUCISRC501TR08
   Bergel A, 2005, COMPUT LANG SYST STR, V31, P107, DOI 10.1016/j.cl.2004.11.002
   Bergel A, 2003, LECT NOTES COMPUT SC, V2789, P122
   BERGEL A, 2005, P INT C OBJ OR PROGR, P177
   Bergel A, 2008, COMPUT LANG SYST STR, V34, P83, DOI 10.1016/j.cl.2007.05.003
   BERNARDY JP, 2008, P ACM SIGPLAN WORKSH, P37
   Blackburn Stephen M., 2006, P 21 ANN ACM SIGPLAN, DOI [10.1145/1167473.1167488, DOI 10.1145/1167473.1167488, DOI 10.1145/1167515.1167488, 10.1145/1167515.1167488]
   BONNIOT D, 2003, ELECT NOTES THEOR CO, V75, P21
   BONNIOT D, 2003, NICE USERS MANUAL
   Bono V, 2008, INT FED INFO PROC, V273, P367
   Bourdoncle F., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P302, DOI 10.1145/263699.263743
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   BRACHA G, 1998, P ACM S OBJ OR PROGR, P183
   Bracha Gilad., 2004, GENERICS JAVA PROGRA
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   Bruce K. B., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P523, DOI 10.1007/BFb0054106
   Bruce KB, 2004, LECT NOTES COMPUT SC, V3086, P389
   Bruce KB, 2003, ACM T PROGR LANG SYS, V25, P225, DOI 10.1145/641888.641891
   Bruce KB, 1995, LECT NOTES COMPUT SC, V952, P27
   Bruce KB, 1997, LECT NOTES COMPUT SC, V1241, P104, DOI 10.1007/BFb0053376
   BUCHI M, 1998, P 13 ACM C OBJ OR PR, P362
   CAMERON N, 2008, P EUR C OBJ OR PROGR, P2
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   CHAKRAVARTY M, 2005, P ICFP 05, P241
   CHAMBERS C, 1992, LECT NOTES COMPUT SC, V615, P33, DOI 10.1007/BFb0053029
   CHAMBERS C, 2004, CECIL LANGUAGE SPECI
   CHAMBERS C, 1996, TR961202 U WASH DEP
   Clark J., 1999, XML Path Language (XPath) Version 1.0
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   Cook W. R., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P57
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   COOK WR, 1991, LECT NOTES COMPUT SC, V489, P151
   DAY M, 1995, P ACM S OBJ OR PROGR, P156
   *DOM4J, 2008, DOM4J OP SOURC XML F
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ducasse S, 2009, LECT NOTES COMPUT SC, V5634, P5, DOI 10.1007/978-3-642-02655-3_2
   *ECL, 2009, ECL OP DEV PLATF
   *ECLIPSE FDN, 2008, ECL COMP JAV
   *ECLIPSE FDN, 2004, ECL PUBL LIC
   *ECMA INT, 2006, 335 ECMA INT
   *ECMA INT, 2002, C LANG SPEC
   *ECMA INT, 2005, 334 ECMA INT
   Emir B, 2006, LECT NOTES COMPUT SC, V4067, P279
   Ernst E, 2003, LECT NOTES COMPUT SC, V2743, P303
   ERNST E, 2001, LNCS, V2072, P00303
   ERNST E, 1999, THESIS U AARHUS DENM
   Flatt Matthew., 1998, P ACM SIGPLAN 1998 C, P236
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Garcia R, 2007, J FUNCT PROGRAM, V17, P145, DOI 10.1017/S0956796806006198
   Gasiunas V, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P133
   Gil J., 2008, P 23 ANN ACM SIGPLAN, P73, DOI [10.1145/1449764.1449771, DOI 10.1145/1449764.1449771]
   Girard J.-Y., 1972, PhD thesis
   Goldberg A., 1989, Smalltalk-80 : The Language
   Gosling J., 2005, Java Language Specification, Vthird
   Gregor D., 2006, OOPSLA '06, P291, DOI DOI 10.1145/1167473.1167499
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   HARRISON W, 1993, SIGPLAN NOTICES, V28, P411, DOI 10.1145/167962.165932
   HELM R, 1990, P EUR C OBJ OR PROGR, P169
   Huang S.S., 2007, PROC 6 INT C ASPECT, P185
   HUMMEL O, 2009, P INT C SOFTW REUS I, P211
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   IGARASHI A., 2007, P 22 ACM C OBJ OR PR, P113
   INGALLS DHH, 1986, P C OBJ OR PROGR SYS
   Järvi J, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1103845.1094813
   Järvi J, 2003, LECT NOTES COMPUT SC, V2830, P228
   *JAX, 2008, JAX UN JAV XPATH ENG
   Jones MarkP., 1994, Qualified Types: Theory and Practice
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   JONES MP, 1993, P C FUNCT PROGR LANG, P52
   JONES SP, 1997, P ACM SIGPLAN HASK W
   KAES S, 1988, LECT NOTES COMPUT SC, V300, P131
   KAHL W, 2001, P ACM SIGPLAN HASK W
   KAMINA T, 2007, P 6 INT C GEN PROGR, P145
   KAMINA T, 2008, P INT C GEN PROGR CO, P113
   KELLER R, 1998, LECT NOTES COMPUTER, V1445, P307
   KENNEDY A, 2005, P 20 ANN ACM SIGPLAN, P21
   KENNEDY AJ, 2007, P INT WORKSH FDN DEV
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   KISELYOV O., 2004, HASKELL 04, P33, DOI DOI 10.1145/1017472.1017481
   Kiselyov Oleg., 2005, HASKELLS OVERLOOKED
   Lammel R., 2006, GPCE 06, P161
   Läufer K, 2000, COMPUT J, V43, P469, DOI 10.1093/comjnl/43.6.469
   Leavens GT, 1998, ACM SIGPLAN NOTICES, V33, P374, DOI 10.1145/286942.286977
   Leroy Xavier., 2008, The Objective Caml system
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Liquori L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330022
   LISKOV B, 1977, COMMUN ACM, V20, P564, DOI 10.1145/359763.359789
   LISKOV B, 1995, REFERENCE MANUAL PRE
   Liskov B., 1981, Lecture Notes in Computer Science, V114
   LITVINOV V., 1998, P OOPSLA 98 VANC OCT, P388
   Litvinov Vassily., 2003, THESIS U WASHINGTON
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   Malayeri D, 2008, LECT NOTES COMPUT SC, V5142, P260, DOI 10.1007/978-3-540-70592-5_12
   Malayeri D, 2009, LECT NOTES COMPUT SC, V5502, P95, DOI 10.1007/978-3-642-00590-9_8
   Mattsson M, 1999, COMMUN ACM, V42, P81
   MAZURAK K, 2006, TYPE INFERENCE JAVA
   McDirmid S, 2001, ACM SIGPLAN NOTICES, V36, P211, DOI 10.1145/504311.504298
   MCNAMARA B, 2000, P WORKSH C TEMPL PRO
   MEYER B, 1995, ACM SIGPLAN OOPS MES, V6, P20
   Meyer B., 1992, Eiffel: The Language
   MEZINI M, 2000, SOFTWARE ARCHITECTUR
   MEZINI M, 2002, P 17 ACM SIGPLAN C O, P52
   Millstein T, 1999, LECT NOTES COMPUT SC, V1628, P279
   MILLSTEIN T, 2003, P OOSPLA 2003, P224
   Mohnen M., 2002, P INAUGURAL C PRINCI, P35
   Moors A, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P423
   Muschevici R, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P563
   MYERS N, 1996, C GEMS, P451
   *MZCHEME, 2009, MZSCHEME COR VIRT MA
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   NYSTROM N., 2008, P ACM SIGPLAN C OBJ, P457, DOI [10.1145/1449764.1449800, DOI 10.1145/1449764.1449800]
   NYSTROM N, 2006, P OOPSLA 06, P21
   Odersky M., 2007, SCALA LANGUAGE SPECI
   ODERSKY M, 2005, P INT WORKSH FDN OBJ
   Ossher H., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P734, DOI 10.1109/ICSE.2000.870483
   OSSHER H, 1999, P 21 INT C SOFTW ENG, P687
   Ostermann K, 2008, J OBJECT TECHNOL, V7, P121, DOI 10.5381/jot.2008.7.1.a4
   PEDERSEN CH, 1989, P OOPSLA 89, P407
   Pierce B., 2005, ADV TOPICS TYPES PRO
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pirkelbauer Peter., 2007, Proc. 6th Int. Conf. on Generative Programming and Component Engineering (GPCE), P123
   Qi X, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P281, DOI 10.1145/1542476.1542508
   REIS GD, 2006, P 33 ACM SIGPLAN SIG, P295
   Remy D, 1998, THEOR PRACT OBJ SYST, V4, P27, DOI 10.1002/(SICI)1096-9942(1998)4:1<27::AID-TAPO3>3.0.CO;2-4
   Remy D., 1997, P POPL 97, P40
   REMY D, 1998, ON UNREALITY VIRTUAL
   Reynolds John C., 1975, NEW DIRECTIONS ALGOR
   Reynolds John C., 1994, THEORETICAL ASPECTS, P13
   SAITO C, 2009, P ACM SIGPLAN C OBJ, P263
   Saito C, 2008, J FUNCT PROGRAM, V18, P285, DOI 10.1017/S0956796807006405
   Sakkinen M., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P39
   SARASWAT V, 2009, REPORT PROGRAMMING L
   SASITORN J, 2007, P ACM SIGPLAN C OBJ, P153
   Sekharaiah KC, 2002, LECT NOTES COMPUT SC, V2425, P494
   SHALIT A, 1997, DYLAN REFERENCE MANU
   Siek J., 2002, The Boost Graph Library: User Guide and Reference Manual
   SIEK J, 2005, THESIS INDIANA U
   SMITH C, 2005, LECT NOTES COMPUTER, V3586, P543
   SMITH D, 2008, P 23 C OBJ OR PROGR, P505
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   STEPANOV A, 1995, WG21N0482
   STOUTAMIRE D, 1996, TR96012 INT COMP SCI
   Strnisa R, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P499
   Sulzmann M., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P97, DOI 10.1145/1140335.1140348
   Sulzmann M, 2007, J FUNCT PROGRAM, V17, P83, DOI 10.1017/S0956796806006137
   *SUN MICROSYSTEMS, 2007, JAV SERVL SPEC VERS
   *SUN MICROSYSTEMS, 2009, JAV PLATF STAND ED
   *SUN MICROSYSTEMS, 2004, COLL FRAM
   *SUN MICROSYSTEMS, 2006, JSR 277 JAV MOD SYST
   *SUN MICROSYSTEMS, 2004, JAV 2 PLATF STAND ED
   SZYPERSKI C, 1996, P AUSTR COMP SCI C A
   SZYPERSKI C, 1994, LECT NOTES COMPUTER, V782, P208
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Thiemann P., 2005, ACM Transactions on Internet Technology, V5, P1, DOI 10.1145/1052934.1052935
   Thiemann P, 2008, LECT NOTES COMPUT SC, V5356, P256
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   Torgersen M., 2004, J OBJECT TECHNOLOGY, V3, P97
   Trifonov V., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P349
   VIROLI M, 2000, DEISLIAOO002 U BOL
   VIROLI M, 2000, P ACM SIGPLAN C OBJ, P146
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler P., 1998, EXPRESSION PROBLEM P
   WARTH A, 2006, P 21 ANN ACM SIGPLAN, P37
   WEHR S, 2005, PROBLEM SUPERCLASS E
   WEHR S, 2009, P ACM SIGPLAN INT C, P65
   WEHR S, 2010, THESIS ALBERT LUDWIG
   WEHR S, 2008, P WORKSH FORM TECHN, P125
   WEHR S, 2009, P AS S PROGR LANG SY
   Wehr S, 2007, LECT NOTES COMPUT SC, V4609, P347
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   YU D, 2004, POPL 04, P39
   Zenger M, 2005, J SOFTW MAINT EVOL-R, V17, P333, DOI 10.1002/smr.320
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 191
TC 7
Z9 8
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2011
VL 33
IS 4
AR 12
DI 10.1145/1985342.1985343
PG 83
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 792RI
UT WOS:000292766400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Boyland, JT
AF Boyland, John Tang
TI Semantics of Fractional Permissions with Nesting
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification
ID OWNERSHIP; CHECKING
AB Permissions specify mutable state that can be accessed by a program. Fractions distinguish write access (1) from read access (any smaller fraction). Nesting can model object invariants and ownership. Fractional permissions provides a foundation the meaning of many of access-based annotations: uniqueness, read-only, immutability, method effects, guarded state, etc. The semantics of fractional permissions with nesting is given in terms of "fractional heaps." We show that the fraction law Pi = 1/2 Pi + 1/2 Pi permits sound reasoning and that nesting can be carried out safely using only local reasoning.
C1 Univ Wisconsin, Dept Elect Engn & Comp Sci, Milwaukee, WI 53201 USA.
C3 University of Wisconsin System; University of Wisconsin Milwaukee
RP Boyland, JT (corresponding author), Univ Wisconsin, Dept Elect Engn & Comp Sci, POB 413, Milwaukee, WI 53201 USA.
EM boyland@cs.uwm.edu
OI Boyland, John/0000-0002-1048-8850
FU National Science Foundation [CCF-0702635]
FX This work was supported in part by the National Science Foundation
   (CCF-0702635). The opinions expressed here are not necessarily those of
   the National Science Foundation or the US Government.
CR Aldrich J, 2004, LECT NOTES COMPUT SC, V3086, P1
   [Anonymous], POPL 2001
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   BIERHOFF K, 2007, CMUISRI07105 SCH COM
   Bierhoff K, 2007, ACM SIGPLAN NOTICES, V42, P301, DOI 10.1145/1297105.1297050
   BORNAT R, 2005, POPL, P259
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   BOYLAND J, 2005, P 7 ECOOP WORKSH FOR
   BOYLAND J, 2009, P INT WORKS IN PRESS
   BOYLAND J, 2007, P INT WORKSH AL CONF
   Boyland John., 2001, ECOOP'Ol - Object-Oriented Programming, 15th European Conference, number 2072 in Lecture Notes in Computer Science, P2, DOI [10.1007/3-540-45337-7_2, DOI 10.1007/3-540-45337-7_2]
   BOYLAND JT, 2005, POPL 05, P283
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clarke D, 2002, ACM SIGPLAN NOTICES, V37, P292, DOI 10.1145/583854.582447
   Clarke David, 2001, Ph.D. Dissertation
   Fähndrich M, 2003, ACM SIGPLAN NOTICES, V38, P302, DOI 10.1145/949343.949332
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Flanagan C, 2000, ACM SIGPLAN NOTICES, V35, P219, DOI 10.1145/358438.349328
   Greenhouse A, 1999, LECT NOTES COMPUT SC, V1628, P205
   Krishnaswami NeelakantanR., 2006, SAVCBS 06, P83, DOI DOI 10.1145/1181195.1181213
   Leino KRM, 2002, ACM SIGPLAN NOTICES, V37, P246, DOI 10.1145/543552.512559
   Müller P, 2007, ACM SIGPLAN NOTICES, V42, P461, DOI 10.1145/1297105.1297061
   MULLER P, 2000, P 2 ECOOP WORKSH FOR
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   OHEARN PW, 2004, POPL, P268
   RETERT WS, 2009, THESIS U WISCONSIN M
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Zhao Y., 2007, THESIS U WISCONSIN M
NR 29
TC 19
Z9 22
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2010
VL 32
IS 6
AR 22
DI 10.1145/1749608.1749611
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 661VO
UT WOS:000282759900003
OA Bronze
DA 2024-07-18
ER

PT J
AU Pearlmutter, BA
   Siskind, JM
AF Pearlmutter, Barak A.
   Siskind, Jeffrey Mark
TI Reverse-mode AD in a functional framework: Lambda the ultimate
   backpropagator
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE experimentation; languages; performance; closures; derivatives;
   forward-mode AD; higher-order AD; higher-order functional languages;
   Jacobian; program transformation; reflection
ID AUTOMATIC DIFFERENTIATION
AB We show that reverse-mode AD (Automatic Differentiation)-a generalized gradient-calculation operator-can be incorporated as a first-class function in an augmented lambda calculus, and therefore into a functional-programming language. Closure is achieved, in that the new operator can be applied to any expression in the augmented language, yielding an expression in that language. This requires the resolution of two major technical issues: (a) how to transform nested lambda expressions, including those with free-variable references, and (b) how to support self application of the AD machinery. AD transformations preserve certain complexity properties, among them that the reverse phase of the reverse-mode AD transformation of a function have the same temporal complexity as the original untransformed function. First-class unrestricted AD operators increase the expressive power available to the numeric programmer, and may have significant practical implications for the construction of numeric software that is robust, modular, concise, correct, and efficient.
C1 [Pearlmutter, Barak A.] Natl Univ Ireland Maynooth, Hamilton Inst, Maynooth, Kildare, Ireland.
   [Pearlmutter, Barak A.] Natl Univ Ireland Maynooth, Dept Comp Sci, Maynooth, Kildare, Ireland.
   [Siskind, Jeffrey Mark] Purdue Univ, Sch Elect & Comp Engn, W Lafayette, IN 47907 USA.
C3 Maynooth University; Maynooth University; Purdue University System;
   Purdue University
RP Pearlmutter, BA (corresponding author), Natl Univ Ireland Maynooth, Hamilton Inst, Maynooth, Kildare, Ireland.
EM barak@cs.nuim.ie; qobi@purdue.edu
RI Pearlmutter, Barak A/M-8791-2014; Pearlmutter, Barak A./AAL-8999-2020
OI Pearlmutter, Barak A/0000-0003-0521-4553; Siskind,
   Jeffrey/0000-0002-0105-6503
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   [Anonymous], 2000, FRONTIERS APPL MATH
   [Anonymous], [No title captured]
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   CHRISTIANSON B, 1992, IMA J NUMER ANAL, V12, P135, DOI 10.1093/imanum/12.2.135
   Corliss G., 2001, Automatic Differentiation of Algorithms
   Griewank A, 1996, ACM T MATH SOFTWARE, V22, P131, DOI 10.1145/229473.229474
   Karczmarczuk J., 2001, Higher-Order and Symbolic Computation, V14, P35, DOI 10.1023/A:1011501232197
   KARCZMARCZUK J, 1999, SCOTT WORKSH FP
   KARCZMARCZUK J, 2000, LAZY TIME REVERSAL A
   KARCZMARCZUK J, 1998, WORKSH 3 INT SUMM SC
   Karczmarczuk J., 1998, P 3 ACM SIGPLAN INT, P195, DOI [10.1145/289423.289442, DOI 10.1145/289423.289442]
   KARCZMARCZUK J, 2001, CALCUL ADJOINTS PROG
   Karczmarczuk Jerzy, 2000, ADJOINT CODES FUNCTI
   KEDEM G, 1980, ACM T MATH SOFTWARE, V6, P150, DOI 10.1145/355887.355890
   KELSEY RA, 1995, SIGPLAN NOTICES, V30, P13, DOI 10.1145/202530.202532
   Pearlmutter Barak A., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P155, DOI 10.1145/1190216.1190242
   PEARLMUTTER BA, 1994, NEURAL COMPUT, V6, P147, DOI 10.1162/neco.1994.6.1.147
   Press W. H., 2002, Numerical Recipes in C: the Art of Scientific Computing, V2nd ed., DOI DOI 10.1119/1.14981
   Rall L.B., 1981, Automatic differentiation: Techniques and applications, V120, DOI 10.1007/3-540-10861-0
   RUMELHART DE, 1986, NATURE, V323, P533, DOI 10.1038/323533a0
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   SISKIND J. M., 1999, 99190R NEC RES I INC
   SISKIND JM, 2008, IN PRESS HIGHER ORD
   SISKIND JM, 2005, IMPLEMENTATION APPL
   Speelpenning B., 1980, Compiling fast partial derivatives of functions given by algorithms
   Sussman G., 2001, Structure and Interpretation of Classical Mechanics
   WENGERT RE, 1964, COMMUN ACM, V7, P463, DOI 10.1145/355586.364791
   Werbo P.J., 1992, Handbook of Intelligent Control, P283
   2008, ACM T PROGRAMMING LA, V30
NR 30
TC 48
Z9 55
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 2
AR 7
DI 10.1145/1330017.1330018
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 280HZ
UT WOS:000254418100001
OA Bronze
DA 2024-07-18
ER

PT J
AU Kim, SW
   Ooi, CL
   Eigenmann, R
   Falsafi, B
   Vijaykumar, TN
AF Kim, Seon Wook
   Ooi, Chong-Liang
   Eigenmann, Rudolf
   Falsafi, Babak
   Vijaykumar, T. N.
TI Exploiting reference idempotency to reduce speculative storage overflow
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE idempotent references; speculation; compiler-assisted speculative
   execution
AB Recent proposals for multithreaded architectures employ speculative execution to allow threads with unknown dependences to execute speculatively in parallel. The architectures use hardware speculative storage to buffer speculative data, track data dependences and correct incorrect executions through roll-backs. Because all memory references access the speculative storage, current proposals implement speculative storage using small memory structures to achieve fast access. The limited capacity of the speculative storage causes considerable performance loss due to speculative storage overflow whenever a thread's speculative state exceeds the speculative storage capacity. Larger threads exacerbate the overflow problem but are preferable to smaller threads, as larger threads uncover more parallelism.
   In this article, we discover a new program property called memory reference idempotency. Idempotent references are guaranteed to be eventually corrected, though the references may be temporarily incorrect in the process of speculation. Therefore, idempotent references, even from nonparallelizable program sections, need not be tracked in the speculative storage, and instead can directly access nonspeculative storage (i.e., conventional memory hierarchy). Thus, we reduce the demand for speculative storage space in large threads. We define a formal framework for reference idempotency and present a novel compiler-assisted speculative execution model. We prove the necessary and sufficient conditions for reference idempotency using our model. We present a compiler algorithm to label idempotent memory references for the hardware. Experimental results show that for our benchmarks, over 60% of the references in nonparallelizable program sections are idempotent.
C1 Korea Univ, Dept Elect & Comp Engn, Seoul 136701, South Korea.
   Purdue Univ, Sch Elect & Comp Engn, W Lafayette, IN 47907 USA.
   Carnegie Mellon Univ, Comp Architecture Lab, Pittsburgh, PA 15213 USA.
C3 Korea University; Purdue University System; Purdue University; Carnegie
   Mellon University
RP Kim, SW (corresponding author), Korea Univ, Dept Elect & Comp Engn, Anam Dong, Seoul 136701, South Korea.
EM eigenman@ecn.purdue.edu
OI Kim, Seon/0000-0001-6555-1741
CR [Anonymous], 1999, MAJC ARCH TUT
   Banerjee U.K., 1988, Dependence Analysis for Supercomputing
   BLUME W, 1996, IEEE COMPUT, V29, P78
   Gopal S, 1998, 1998 FOURTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P195, DOI 10.1109/HPCA.1998.650559
   GUPTA M, 1998, P INT C SUP
   HALL MW, 1996, IEEE COMPUT, V29, P84
   HAMMOND L, 1998, P 8 ACM C ARCH SUPP
   OOI CL, 2001, P 15 INT C SUP ICS 0, P368
   RAUCHWERGER L, 1995, P SIGPLAN C PROGR LA
   SOHI GS, 1995, ACM COMP AR, P414, DOI 10.1109/ISCA.1995.524580
   Steffan J. Gregory, 2000, P 27 ANN INT S COMP
   Tu P., 1993, LECT NOTES COMPUTER, V768, P500
   VIJAYKUMAR TN, 1998, P 31 INT S MICR
   ZHANG Y, 1999, P 5 INT S HIGH PERF
NR 14
TC 7
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2006
VL 28
IS 5
BP 942
EP 965
DI 10.1145/1152649.1152653
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 083LH
UT WOS:000240456900004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Clifton, C
   Millstein, T
   Leavens, GT
   Chambers, C
AF Clifton, Curtis
   Millstein, Todd
   Leavens, Gary T.
   Chambers, Craig
TI MultiJava: Design rationale, compiler implementation, and applications
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE open objects; extensible classes; extensible external methods; external
   methods; multimethods; method families; generic functions;
   object-oriented programming languages; single dispatch; multiple
   dispatch; encapsulation; modularity; static type-checking; subtyping;
   inheritance; Java language; MultiJava language; separate compilation;
   expression problem; binary method problem; augmenting method problem
ID MULTIPLE DISPATCH; MULTIMETHODS; TYPECHECKING; DATATYPES; VISITOR;
   MODULES; UNITS; JAVA
AB MultiJava is a conservative extension of the Java programming language that adds symmetric multiple dispatch and open classes. Among other benefits, multiple dispatch provides a solution to the binary method problem. Open classes provide a solution to the extensibility problem of object-oriented programming languages, allowing the modular addition of both new types and new operations to an existing type hierarchy. This article illustrates and motivates the design of MultiJava and describes its modular static typechecking and modular compilation strategies. Although MultiJava extends Java, the key ideas of the language design are applicable to other object-oriented languages, such as C# and C++, and even, with some modifications, to functional languages such as ML.
   This article also discusses the variety of application domains in which MultiJava has been successfully used by others, including pervasive computing, graphical user interfaces, and compilers. MultiJava allows users to express desired programming idioms in a way that is declarative and supports static typechecking, in contrast to the tedious and type-unsafe workarounds required in Java. MultiJava also provides opportunities for new kinds of extensibility that are not easily available in Java.
C1 Rose Hulman Inst Technol, Dept Comp Sci & Software Engn, Terre Haute, IN 47803 USA.
   Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
   Iowa State Univ, Dept Comp Sci, Ames, IA 50011 USA.
   Univ Washington, Dept Comp Sci & Engn, Seattle, WA 98195 USA.
C3 Rose Hulman Institute Technology; University of California System;
   University of California Los Angeles; Iowa State University; University
   of Washington; University of Washington Seattle
RP Clifton, C (corresponding author), Rose Hulman Inst Technol, Dept Comp Sci & Software Engn, 5500 Wabash Ave, Terre Haute, IN 47803 USA.
EM clifton@rose-hulman.edu; todd@cs.ucla.edu; leavens@cs.iastate.edu;
   chambers@cs.washington.edu
CR AGRAWAL R, 1991, SIGPLAN NOTICES, V26, P113, DOI 10.1145/118014.117963
   Ancona D, 2002, LECT NOTES COMPUT SC, V2374, P609
   [Anonymous], P 12 INT WORKSH FDN
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Arnold K., 2000, The Java Programming Language, V3rd ed
   Arnstein L., 2002, IEEE Pervasive Computing, V1, P13, DOI 10.1109/MPRV.2002.1037717
   *ASP J TEAM, 2004, ASP PROGR GUID
   BAUMGARTNER G, 2002, OSUCISRC501TR08 DEP
   BONNOT D, 2003, ELECT NOTES THEORETI, V75
   BONNOT D, 2003, NICE USERS MANUAL
   Bourdoncle F., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P302, DOI 10.1145/263699.263743
   Boyland J, 1997, ACM SIGPLAN NOTICES, V32, P66, DOI 10.1145/263700.263721
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   BRIDGES S, 2003, ADV NEURAL INFORM PR, V15
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   CASTAGNA G, 1995, ACM T PROGR LANG SYS, V17, P431, DOI 10.1145/203095.203096
   CASTAGNA G, 1995, INFORM COMPUT, V117, P115, DOI 10.1006/inco.1995.1033
   Castagna Giuseppe., 1997, Progress in Theoretical Computer Science
   CHAMBERS C, 1992, LECT NOTES COMPUT SC, V615, P33, DOI 10.1007/BFb0053029
   Chambers C, 1995, ACM T PROGR LANG SYS, V17, P805, DOI 10.1145/218570.218571
   Chambers C, 1999, ACM SIGPLAN NOTICES, V34, P238, DOI 10.1145/320385.320407
   CHAMBERS C, 1998, P 5 WORKSH FDN OBJ O
   Chambers C., 1997, CECIL LANGUAGE SPECI
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   CLIFTON C, 2001, 0110 IOW STAT U DEP
   COOK WR, 1991, LECT NOTES COMPUT SC, V489, P151
   DROSSOPOULOU S, 1999, LOGIC COMPUTER SCI, P147
   Duggan D, 1996, ACM SIGPLAN NOTICES, V31, P262, DOI 10.1145/232629.232654
   DUTCHYN C, 2001, 6 C OBJ OR TECHN SYS
   Ernst M., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P186, DOI 10.1007/BFb0054092
   Fähndrich M, 2003, ACM SIGPLAN NOTICES, V38, P302, DOI 10.1145/949343.949332
   FEINBERG N, 1997, DYLAN PROGRAMMING BO
   Findler RB, 1999, ACM SIGPLAN NOTICES, V34, P94, DOI 10.1145/291251.289432
   Flatt M, 1998, ACM SIGPLAN NOTICES, V33, P236, DOI 10.1145/277652.277730
   FORAX R, 2000, P INT C TECHN OBJ OR
   GAGNON E, 1998, P INT C TECHN OBJ OR
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GARRIGUE J, 2000, P WORKSH FDN SOFTW E
   GOLDBERG A, 1984, SMALLTALK80 INTERACT
   Gosling J., 2000, The Java Language Specification
   GRIMM R., 2001, UWCSE010601
   Grothoff C, 2003, LECT NOTES COMPUT SC, V2743, P103
   HARRISON W, 1993, SIGPLAN NOTICES, V28, P411, DOI 10.1145/167962.165932
   Hightower J, 2002, FOURTH IEEE WORKSHOP ON MOBILE COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P22, DOI 10.1109/MCSA.2002.1017482
   INGALLS DHH, 1986, SIGPLAN NOTICES, V21, P347, DOI 10.1145/960112.28732
   KELLER R, 1998, LECT NOTES COMPUTER, V1445, P307
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   *KOP, 2004, KOP PROJ HOM PAG
   Krishnamurthi S., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P91, DOI 10.1007/BFb0054088
   Leavens GT, 1998, ACM SIGPLAN NOTICES, V33, P374, DOI 10.1145/286942.286977
   Lee K, 2003, ACM SIGPLAN NOTICES, V38, P205, DOI 10.1145/949343.949324
   Liang S, 1998, ACM SIGPLAN NOTICES, V33, P36, DOI 10.1145/286942.286945
   LINDHOLM T, 2000, JAVA VIRTUAL MACHINE
   Litvinov V, 1998, ACM SIGPLAN NOTICES, V33, P388, DOI 10.1145/286942.286979
   Martin P, 1998, ACM SIGPLAN NOTICES, V33, P34, DOI 10.1145/278283.278288
   McDirmid S, 2001, ACM SIGPLAN NOTICES, V36, P211, DOI 10.1145/504311.504298
   Millstein T, 2004, ACM SIGPLAN NOTICES, V39, P345, DOI 10.1145/1035292.1029006
   Millstein T, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/949343.949325
   Millstein T, 2002, ACM SIGPLAN NOTICES, V37, P110, DOI 10.1145/583852.581489
   Millstein T, 2002, INFORM COMPUT, V175, P76, DOI 10.1006/inco.2002.3103
   Millstein Todd David, 2003, THESIS U WASHINGTON
   MUGRIDGE WB, 1991, LECT NOTES COMPUT SC, V512, P307
   Nordberg ME, 1998, SOFTW PATT S, P105
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Odersky M, 2003, LECT NOTES COMPUT SC, V2743, P201
   Odersky Martin., 1997, P 24 ACM S PRINCIPLE, P146
   Ossher H, 2001, COMMUN ACM, V44, P43, DOI 10.1145/383845.383856
   Paepcke Andreas., 1993, OBJECT ORIENTED PROG
   Palsberg J, 1998, P INT COMP SOFTW APP, P9, DOI 10.1109/CMPSAC.1998.716629
   Parnas D.L., 1972, COMMUN ACM, V15, P12
   PARNAS DL, 1975, LECTURE NOTES COMPUT, V23, P225
   Philipose M, 2004, IEEE PERVAS COMPUT, V3, P50, DOI 10.1109/MPRV.2004.7
   *RAIN, 2004, RAIN HOM PAG
   Reynolds J.C., 1975, NEW DIRECTIONS ALGOR, P157
   Reynolds JohnC., 1980, Lecture Notes in Computer Science, P211, DOI 10.1007/3-540-10250-7_24
   SHALT A, 1997, DYLAN REFERENCE MANU
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   STROUSTRUP B, 1997, CPLUSPLUS PROGRAMMIN
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   TROELSEN A, 2003, C NET PLATFORM
   Vlissides J, 1999, C++ REP, V11, P40
   Zenger M, 2001, ACM SIGPLAN NOTICES, V36, P241, DOI 10.1145/507669.507665
NR 85
TC 35
Z9 45
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2006
VL 28
IS 3
BP 517
EP 575
DI 10.1145/1133651.1133655
PG 59
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 052ZQ
UT WOS:000238273200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Suganuma, T
   Yasue, T
   Kawahito, M
   Komatsu, H
   Nakatani, T
AF Suganuma, T
   Yasue, T
   Kawahito, M
   Komatsu, H
   Nakatani, T
TI Design and evaluation of dynamic optimizations for a Java Just-In-Time
   compiler
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE performance; design; languages; recompilation; dynamic compilation;
   adaptive optimization; JIT compiler; profile-directed method inlining;
   code specialization
ID CONTINUOUS PROGRAM OPTIMIZATION; PERFORMANCE
AB The high performance implementation of Java Virtual Machines (JVM) and Just-In-Time (JIT)compilers is directed toward employing a dynamic compilation system on the basis of online runtime profile information. The trade-off between the compilation overhead and performance benefit is a crucial issue for such a system. This article describes the design and implementation of a dynamic optimization framework in a production-level Java JIT compiler, together with two techniques for profile-directed optimizations: method inlining and code specialization. Our approach is to employ a mixed mode interpreter and a three-level optimizing compiler, supporting level-1 to level-3 optimizations, each of which has a different set of trade-offs between compilation overhead and execution speed. A lightweight sampling profiler operates continuously during the entire period while applications are running to monitor the programs' hot spots. Detailed information on runtime behavior can be collected by dynamically generating instrumentation code that is installed to and uninstalled from the specified recompilation target code. Value profiling with this instrumentation mechanism allows fully automatic profile-directed method inlining and code specialization to be performed on the basis of call site information or specific parameter values at the higher optimization levels. The experimental results show that our approach offers high performance and low compilation overhead in both program startup and steady state measurements in comparison to the previous systems. The two profile-directed optimization techniques contribute significant portions of the improvements.
C1 IBM Japan Ltd, Tokyo Res Lab, Yamato 2428502, Japan.
C3 International Business Machines (IBM)
RP IBM Japan Ltd, Tokyo Res Lab, 1623-14 Shimotsuruma, Yamato 2428502, Japan.
EM suganuma@jp.ibm.com; yasue@jp.ibm.com; jl25131@jp.ibm.com;
   komatsu@jp.ibm.com; nakatani@jp.ibm.com
CR ADLTABATABAI AR, 1998, P ACM SIGPLAN 98 C P, P280
   AGESEN O, 2000, SMLITR200087
   Alexander WP, 2000, IBM SYST J, V39, P118, DOI 10.1147/sj.391.0118
   [Anonymous], 2000, PLDI '00
   Arnold M, 2002, ACM SIGPLAN NOTICES, V37, P111, DOI 10.1145/583854.582432
   ARNOLD M, 2000, P ACM SIGPL WORKSH F
   ARNOLD M, 2000, P ACM SIGPLAN WORKSH, P52
   ARNOLD M, 2001, P ACM SIGPLAN 2001 C, P168, DOI DOI 10.1145/378795.378832
   Arnold Matthew., 2000, P 15 ACM SIGPLAN C O, P47
   AUSLANDER J, 1996, P ACM SIGPLAN 96 C P, P149
   Autrey T, 1998, INT J PARALLEL PROG, V26, P43, DOI 10.1023/A:1018739006820
   AYERS A, 1997, P ACM SIGPLAN 97 C P, P134
   Burger RG, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P240, DOI 10.1109/ICCL.1998.674174
   Burke M. G., 1999, Proceedings of the ACM 1999 Java Grande Conference, P129, DOI 10.1145/304065.304113
   Calder B, 1997, INT SYMP MICROARCH, P259, DOI 10.1109/MICRO.1997.645816
   Calder B., 1999, Journal of Instruction Level Parallelism, V1, P1
   Chambers C., 1989, PLDI '89, P146
   CHANG PP, 1992, SOFTWARE PRACT EXPER, V22, P349, DOI 10.1002/spe.4380220502
   CIERNIAK M, 2002, P JOINT ACM JAV GRAN, P156
   Cierniak Michal., 2000, PROCEEEDINGS ACM SIG, P13
   Click Cliff, 2002, P 2002 JOINT ACMISCO, P96, DOI DOI 10.1145/583810.583821
   Dean J., 1994, PEPM '94. ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation, P85
   Dean J., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P273, DOI 10.1145/182409.182489
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   DEAN J, 1995, P ACM SIGPLAN 95 C P, P93
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Gosling James, 1996, The Java Language Specification
   GRANT B, 1999, P ACM SIGPLAN 99 C P, P293
   GROVE D, 1995, SIGPLAN NOTICES, V30, P108, DOI 10.1145/217839.217848
   Hazelwood K, 2003, INT SYM CODE GENER, P253, DOI 10.1109/CGO.2003.1191550
   Holzle U, 1996, ACM T PROGR LANG SYS, V18, P355, DOI 10.1145/233561.233562
   Holzle U., 1994, THESIS STANFORD U ST
   *IBM CORP, 2002, WEBSPH STUD APPL DEV
   ISHIZAKI K, 2000, P ACM SIGPLAN C OBJ, P294
   ISHIZAKI K, 2003, P ACM SIGPLAN C OBJ, P187
   *JUST SYST CORP, 1998, ICH JAV JAP WORD PRO
   Kaser O, 1998, COMPUT LANG, V24, P55, DOI 10.1016/S0096-0551(98)00003-4
   KAWAHITO M, 2000, P 9 INT C ARCH SUPP, P118
   Kistler T, 2003, ACM T PROGR LANG SYS, V25, P500, DOI 10.1145/778559.778562
   Kistler T, 2001, IEEE T COMPUT, V50, P549, DOI 10.1109/12.931893
   Krall A, 1998, 1998 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P205, DOI 10.1109/PACT.1998.727250
   KRINTZ C, 2001, P ACM SIGPLAN C PROG, P157
   MARLET R, 1999, P ACM SIGPLAN 99 C P, P281
   MOCK M, 2000, P 33 INT C MICR DEC, P1
   Muth R, 2000, LECT NOTES COMPUT SC, V1824, P340
   OGASAWARA T, 2001, P ACM SIGPLAN C OBJ, P83
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   PLEZBERT M, 1997, C REC 24 ACM SIGPL S, P120
   Poletto M., 1997, P ACM SIGPLAN 1997 C, P109
   SCHEIFLER RW, 1977, COMMUN ACM, V20, P647, DOI 10.1145/359810.359830
   SHIV K, 2003, P 7 ANN WORKSH INT C
   *STAND PERF EV COR, 2000, SPECJVM98 SPECJBB200
   Suganuma T, 2000, IBM SYST J, V39, P175, DOI 10.1147/sj.391.0175
   Suganuma T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P91
   SUGANUMA T, 2003, P ACM SIGPLAN 2003 C, P312
   SUGANUMA T, 2001, P ACM SIGPLAN C OBJ, P180
   Traub O., 2000, Ephemeral instrumentation for lightweight program profiling
   WATTERSON S, 2001, 10 INT C COMP CONSTR, V2027, P319
   Whaley John., 2000, JAVA 00, P78
   Whaley John., 2001, Partial method compilation using dynamic profile information, P166
   Yang B., 1999, P 6 INT WORKSH ACC A, P1
NR 61
TC 26
Z9 51
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2005
VL 27
IS 4
BP 732
EP 785
DI 10.1145/1075382.1075386
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 956AK
UT WOS:000231271100004
OA Bronze
DA 2024-07-18
ER

PT J
AU Clements, J
   Felleisen, M
AF Clements, J
   Felleisen, M
TI A tail-recursive machine with stack inspection
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE languages; security; stack inspection; tail call optimization; tail
   recursion
ID ENFORCEMENT; SECURITY
AB Security folklore holds that a security mechanism based on stack inspection is incompatible with a global tail call optimization policy; that an implementation of such a language must allocate memory for a source-code tail call, and a program that uses only tail calls ( and no other memory-allocating construct) may nevertheless exhaust the available memory. In this article, we prove this widely held belief wrong. We exhibit an abstract machine for a language with security stack inspection whose space consumption function is equivalent to that of the canonical tail call optimizing abstract machine. Our machine is surprisingly simple and suggests that tail calls are as easy to implement in a security setting as they are in a conventional one.
C1 Northeastern Univ, Coll Comp Sci, Boston, MA 02115 USA.
C3 Northeastern University
RP Clements, J (corresponding author), Northeastern Univ, Coll Comp Sci, 202 W Village H, Boston, MA 02115 USA.
EM clements@ccs.neu.edu
CR Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Clements J, 2001, LECT NOTES COMPUT SC, V2028, P320
   Clinger W.D., 1998, Proper tail recursion and space efficiency, P174, DOI [10.1145/277650.277719, DOI 10.1145/277650.277719]
   Erlingsson U, 2000, P IEEE S SECUR PRIV, P246, DOI 10.1109/SECPRI.2000.848461
   FELLEISEN M, 1989, UNPUB PROGRAMMING LA
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   FLATT M, 1995, PLT MZSCHEME LANGUAG
   Fournet Cedric., 2002, POPL 02, P307
   GAMMA E, 1995, DESIGN PATTERNS
   GONG L., 1999, INSIDE JAVA 2 PLATFO
   Karjoth G, 2000, P IEEE CSFW, P224, DOI 10.1109/CSFW.2000.856939
   Kelsey R, 1998, ACM SIGPLAN NOTICES, V33, P26, DOI 10.1145/290229.290234
   *MICR, 2002, COMM LANG RUNT SDK D
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   SCHINZ M, 2001, P SIGPLAN BABEL WORK, P155
   Skalka C, 2000, ACM SIGPLAN NOTICES, V35, P34, DOI 10.1145/357766.351244
   Steele G.L., 1977, Proceedings of the 1977 Annual ACM Conference, P153
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
   WALLACH DS, 1997, P 16 ACM S OP SYST P, P116
   [No title captured]
NR 21
TC 19
Z9 24
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2004
VL 26
IS 6
BP 1029
EP 1052
DI 10.1145/1034774.1034778
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 876FA
UT WOS:000225480700004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Li, ZY
   Song, YH
AF Li, ZY
   Song, YH
TI Automatic tiling of iterative stencil loops
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 17th IEEE International Parallel and Distributed Processing Symposium
CY APR, 2003
CL Nice, FRANCE
SP IEEE
DE languages; performance; caches; loop transformations; optimizing
   compilers
AB Iterative stencil loops are used in scientific programs to implement relaxation methods for numerical simulation and signal processing. Such loops iteratively modify the same array elements over different time steps, which presents opportunities for the compiler to improve the temporal data locality through loop tiling. This article presents a compiler framework for automatic tiling of iterative stencil loops, with the objective of improving the cache performance. The article first presents a technique which allows loop tiling to satisfy data dependences in spite of the difficulty created by imperfectly nested inner loops. It does so by skewing the inner loops over the time steps and by applying a uniform skew factor to all loops at the same nesting level. Based on a memory cost analysis, the article shows that the skew factor must be minimized at every loop level in order to minimize cache misses. A graph-theoretical algorithm, which takes polynomial time, is presented to determine the minimum skew factor. Furthermore, the memory-cost analysis derives the tile size which minimizes capacity misses. Given the tile size, an efficient and general array-padding scheme is applied to remove conflict misses. Experiments were conducted on 16 test programs and preliminary results showed an average speedup of 1.58 and a maximum speedup of 5.06 across those test programs.
C1 Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
EM li@cs.purdue.edu; songyh@cs.purdue.edu
CR AHMED N, 2000, P ACM INT C SUP, P141
   Allan VH, 1995, ACM COMPUT SURV, V27, P367, DOI 10.1145/212094.212131
   [Anonymous], P 4 INT ARCH SUPP PR
   Blume W, 1998, IEEE T PARALL DISTR, V9, P1180, DOI 10.1109/71.737695
   Boulet P, 1999, PARALLEL COMPUT, V25, P547, DOI 10.1016/S0167-8191(99)00012-5
   CHATTERJEE S, 1999, P 1999 ACM INT C SUP, P444
   COLEMAN S, 1995, P ACM SIGPLAN C PROG, P279
   COLLARD JF, 1994, PROCEEDINGS OF THE SCALABLE HIGH-PERFORMANCE COMPUTING CONFERENCE, P429, DOI 10.1109/SHPCC.1994.296675
   Ghosh S., 1998, ACM SIGOPS OPERATING, V32, P228, DOI [DOI 10.1145/291006.291051, 10.1145/291069.291051, DOI 10.1145/291069.291051]
   KODUKULA I, 1997, P ACM SIGPLAN C PROG, P346
   Manjikian N, 1997, IEEE T PARALL DISTR, V8, P193, DOI 10.1109/71.577265
   Mitchell N, 1998, INT J PARALLEL PROG, V26, P641, DOI 10.1023/A:1018782528453
   Nguyen TN, 1998, PARALLEL COMPUT, V24, P477, DOI 10.1016/S0167-8191(98)00022-2
   Panda PR, 1999, IEEE T COMPUT, V48, P142, DOI 10.1109/12.752655
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   SONG Y, 1999, P ACM SIGPLAN C PROG, P215
   TEMAM O, 1994, P SIGM C MEAS MOD CO, P261
   Wonnacott D, 2002, INT J PARALLEL PROG, V30, P181, DOI 10.1023/A:1015460304860
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 28
TC 35
Z9 40
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2004
VL 26
IS 6
BP 975
EP 1028
DI 10.1145/1034774.1034777
PG 54
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 876FA
UT WOS:000225480700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Chiari, M
   Mandrioli, D
   Pontiggia, F
   Pradella, M
AF Chiari, Michele
   Mandrioli, Dino
   Pontiggia, Francesco
   Pradella, Matteo
TI A Model Checker for Operator Precedence Languages
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Linear temporal logic; precedence oriented temporal logic; operator
   precedence languages; model checking; visibly pushdown languages;
   input-driven languages
ID TEMPORAL LOGIC; VERIFICATION; REACHABILITY; PROGRAMS; AUTOMATA
AB The problem of extending model checking from finite state machines to procedural programs has fostered much research toward the definition of temporal logics for reasoning on context-free structures. The most notable of such results are temporal logics on NestedWords, such as CaRet and NWTL. Recently, Precedence Oriented Temporal Logic (POTL) has been introduced to specify and prove properties of programs coded trough an Operator Precedence Language (OPL). POTL is complete w.r.t. the FO restriction of the MSO logic previously defined as a logic fully equivalent to OPL. POTL increases NWTL's expressive power in a perfectly parallel way as OPLs are more powerful that nested words.
   In this article, we produce amodel checker, named POMC, for OPL programs to prove properties expressed in POTL. To the best of our knowledge, POMC is the first implemented and openly available model checker for proving tree-structured properties of recursive procedural programs. We also report on the experimental evaluation we performed on POMC on a nontrivial benchmark.
C1 [Chiari, Michele; Pontiggia, Francesco] TU Wien, Treitlstr 3, A-1040 Vienna, Austria.
   [Mandrioli, Dino; Pradella, Matteo] Politecn Milan, DEIB, Via Ponzio 34-5, I-20133 Milan, Italy.
   [Pradella, Matteo] CNR, IEIIT, Via Ponzio 34-5, I-20133 Milan, Italy.
C3 Technische Universitat Wien; Polytechnic University of Milan; Consiglio
   Nazionale delle Ricerche (CNR); Istituto di Elettronica e di Ingegneria
   dell'Informazione e delle Telecomunicazioni (IEIIT-CNR)
RP Chiari, M (corresponding author), TU Wien, Treitlstr 3, A-1040 Vienna, Austria.
EM michele.chiari@polimi.it; dino.mandrioli@polimi.it;
   francesco.pontiggia@tuwien.ac.at; matteo.pradella@polimi.it
RI Chiari, Michele/ABC-3741-2022; Pradella, Matteo/C-6608-2008
OI Chiari, Michele/0000-0001-7742-9233; Pontiggia,
   Francesco/0000-0003-2569-6238; Pradella, Matteo/0000-0003-3039-1084
FU Vienna Science and Technology Fund (WWTF) [10.47379/ICT19018]; EU
   Commission in the Horizon 2020 research and innovation programme
   [101000162, 101034440]; H2020 - Industrial Leadership [101000162]
   Funding Source: H2020 - Industrial Leadership
FX This work has been partially funded by the Vienna Science and Technology
   Fund (WWTF) [10.47379/ICT19018] within project ProbInG and by the EU
   Commission in the Horizon 2020 research and innovation programme under
   grant agreement No. 101000162 (PIACERE), and under grant agreement No.
   101034440 (Marie Sklodowska-Curie Doctoral Network LogiCS@TUWien).
CR Abrahams D, 2000, LECT NOTES COMPUT SC, V1766, P69
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   Alur R., 2018, Handbook of Model Checking, P541, DOI [DOI 10.1007/978-3-319-10575-8, 10.1007/978-3-319-10575-8_17, DOI 10.1007/978-3-319-10575-817]
   Alur R, 2016, LECT NOTES COMPUT SC, V9618, P143, DOI 10.1007/978-3-319-30000-9_11
   Alur R, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039347
   Alur R, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(4:11)2008
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   Alur Rajeev, 2004, P 36 ANN ACM S THEOR, P202, DOI [10.1145/1007352.1007390, DOI 10.1145/1007352.1007390]
   Alurl R, 2005, LECT NOTES COMPUT SC, V3440, P61
   Amnell T., 2001, P 4 SUMMER SCH MODEL, P99, DOI [10.1007/3- 540-45510- 8_4, DOI 10.1007/3-540-45510-8_4]
   [Anonymous], 2000, LNCS, DOI [10.1007/10722167_20, DOI 10.1007/1072216720]
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Ball T., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P103
   Ball T, 2001, LECT NOTES COMPUT SC, V2102, P260
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   Barenghi A, 2015, SCI COMPUT PROGRAM, V112, P195, DOI 10.1016/j.scico.2015.09.002
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bozzelli L, 2014, LECT NOTES ARTIF INT, V8562, P418, DOI 10.1007/978-3-319-08587-6_33
   Burkart O, 1999, THEOR COMPUT SCI, V221, P251, DOI 10.1016/S0304-3975(99)00034-1
   Certezeanu Razvan, 2016, Theory and Practice of Formal Methods. Essays Dedicated to Frank de Boer on the Occasion of His 60th Birthday. LNCS 9660, P407, DOI 10.1007/978-3-319-30734-3_27
   Chaudhuri S, 2007, LECT NOTES COMPUT SC, V4595, P279
   Chiari M, 2021, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(3:11)2022
   Chiari M, 2021, LECT NOTES COMPUT SC, V12760, P387, DOI 10.1007/978-3-030-81688-9_18
   Chiari M, 2020, THEOR COMPUT SCI, V848, P47, DOI 10.1016/j.tcs.2020.08.034
   Chiari Michele, 2021, POMC
   Chiari Michele, 2021, Zenodo, DOI [10.5281/zenodo.4723740, DOI 10.5281/ZENODO.4723740]
   Cimatti A., 2002, P INT C COMP AID VER, P359, DOI DOI 10.1007/3-540-45657-0_29
   CRESPIREGHIZZI S, 1978, INFORM CONTROL, V37, P115, DOI 10.1016/S0019-9958(78)90474-6
   DAntoni Loris, 2014, A Symbolic Automata Library
   DeBosschere K, 1996, SOFTWARE PRACT EXPER, V26, P763, DOI 10.1002/(SICI)1097-024X(199607)26:7<763::AID-SPE33>3.0.CO;2-L
   Driscoll Evan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P665, DOI 10.1007/978-3-642-31424-7_47
   Esparza J, 2006, LECT NOTES COMPUT SC, V3920, P489
   Esparza J, 2003, INFORM COMPUT, V186, P355, DOI 10.1016/S0890-5401(03)00139-1
   Esparza J, 2001, LECT NOTES COMPUT SC, V2102, P324
   Finkel A., 1997, Electronic Notes in Theoretical Computer Science, V9, DOI 10.1016/S1571-0661(05)80426-8
   FLOYD RW, 1963, J ACM, V10, P316, DOI 10.1145/321172.321179
   Gabow HN, 2000, INFORM PROCESS LETT, V74, P107, DOI 10.1016/S0020-0190(00)00051-X
   Geatti L, 2021, INFORM COMPUT, V278, DOI 10.1016/j.ic.2020.104599
   Godefroid P, 2013, LECT NOTES COMPUT SC, V7795, P214, DOI 10.1007/978-3-642-36742-7_16
   Grune Dick, 2008, Parsing Techniques: A Practical Guide, V2nd, DOI [10.1007/978-0-387-68954-8, DOI 10.1007/978-0-387-68954-8]
   Hague Matthew, 2013, LIPIcs, V24, P313, DOI [10.4230/LIPIcs.FSTTCS.2013.313, DOI 10.4230/LIPICS.FSTTCS.2013.313]
   Hamza J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360592
   Harrison M.A., 1978, Introduction to Formal Language Theory
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Henzinger Thomas A., 2023, P ICALP23
   HEUTER U, 1991, RAIRO-INF THEOR APPL, V25, P125, DOI 10.1051/ita/1991250201251
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Nguyen HV, 2017, SPIN'17: PROCEEDINGS OF THE 24TH ACM SIGSOFT INTERNATIONAL SPIN SYMPOSIUM ON MODEL CHECKING OF SOFTWARE, P152, DOI 10.1145/3092282.3092301
   Jensen T, 1999, P IEEE S SECUR PRIV, P89, DOI 10.1109/SECPRI.1999.766902
   Kiefer Stefan, 2010, Moped
   King D. J., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P344, DOI 10.1145/199448.199530
   Kupferman O., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P371
   Kupferman O., 2018, Handbook of Model Checking, P107
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Lautemann C, 1995, LECT NOTES COMPUT SC, V933, P205, DOI 10.1007/BFb0022257
   Lonati V, 2015, SIAM J COMPUT, V44, P1026, DOI 10.1137/140978818
   Mandrioli D, 2023, Arxiv, DOI arXiv:2006.01236
   Mandrioli D, 2018, COMPUT SCI REV, V27, P61, DOI 10.1016/j.cosrev.2017.12.001
   Marlow Simon, 2010, Haskell 2010 language report
   MCNAUGHTON R, 1967, J ACM, V14, P490, DOI 10.1145/321406.321411
   McNaughton R., 1971, Counter-Free Automata
   Mehlhorn Kurt, 1980, LNCS, V85, P422, DOI [DOI 10.1007/3-540-10003-2, 10.1007/3-540-10003-2n89, DOI 10.1007/3-540-10003-2N89, DOI 10.1007/3-540-10003-289]
   Meyer B, 2005, LECT NOTES COMPUT SC, V3586, P1
   Nguyen H., 2006, Visibly pushdown automata library
   Nguyen Huu-Vu, 2017, P SAC 2017 ACM, P1393, DOI [10.1145/3019612.3019829, DOI 10.1145/3019612.3019829]
   Nguyen Huu-Vu, 2013, PoMMaDe-APushdOwn Model-checker for MAlwareDEtection
   Piterman N, 2004, LECT NOTES COMPUT SC, V3114, P387
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Pontiggia F, 2021, LECT NOTES COMPUT SC, V13085, P293, DOI 10.1007/978-3-030-92124-8_17
   Pontiggia Francesco, 2021, Master's Thesis.
   Reghizzi SC, 2012, J COMPUT SYST SCI, V78, P1837, DOI 10.1016/j.jcss.2011.12.006
   Schwoon S., 2002, THESIS TU MUNICH GER
   Sutter Herb, 1997, C++ Report, V9
   Thatcher J.W., 1967, J. Comput. Syst. Sci., V1, P317, DOI DOI 10.1016/S0022-0000(67)80022-9
   Thomas Wolfgang, 1984, CAAP 84, P31
   Van Tang N, 2011, IEICE T FUND ELECTR, VE94A, P2794, DOI 10.1587/transfun.E94.A.2794
   Vardi M. Y., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P332
   Walukiewicz I, 2001, INFORM COMPUT, V164, P234, DOI 10.1006/inco.2000.2894
NR 80
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2023
VL 45
IS 3
AR 19
DI 10.1145/3608443
PG 66
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA T8ME2
UT WOS:001080461200004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Vákár, M
   Smeding, T
AF Vakar, Matthijs
   Smeding, Tom
TI CHAD: Combinatory Homomorphic Automatic Differentiation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Automatic differentiation; software correctness; denotational semantics;
   functional programming
ID MODELS
AB We introduce Combinatory Homomorphic Automatic Differentiation (CHAD), a principled, pure, provably correct define-then-run method for performing forward and reverse mode automatic differentiation (AD) on programming languages with expressive features. It implements AD as a compositional, type-respecting source-code transformation that generates purely functional code. This code transformation is principled in the sense that it is the unique homomorphic (structure preserving) extension to expressive languages of Elliott's well-known and unambiguous definitions of AD for a first-order functional language. Correctness of the method follows by a (compositional) logical relations argument that shows that the semantics of the syntactic derivative is the usual calculus derivative of the semantics of the original program.
   In their most elegant formulation, the transformations generate code with linear types. However, the code transformations can be implemented in a standard functional language lacking linear types: While the correctness proof requires tracking of linearity, the actual transformations do not. In fact, even in a standard functional language, we can get all of the type-safety that linear types give us: We can implement all linear types used to type the transformations as abstract types by using a basic module system.
   In this article, we detail the method when applied to a simple higher-order language for manipulating statically sized arrays. However, we explain howthe methodology applies, more generally, to functional languages with other expressive features. Finally, we discuss how the scope of CHAD extends beyond applications in AD to other dynamic program analyses that accumulate data in a commutative monoid.
C1 [Vakar, Matthijs; Smeding, Tom] Univ Utrecht, Buys Ballotgebouw Princetonpl 5, NL-3584 CC Utrecht, Netherlands.
C3 Utrecht University
RP Vákár, M (corresponding author), Univ Utrecht, Buys Ballotgebouw Princetonpl 5, NL-3584 CC Utrecht, Netherlands.
EM m.i.l.vakar@uu.nl; t.j.smeding@uu.nl
OI Vakar, Matthijs/0000-0003-4603-0523; Smeding, Tom/0000-0002-4986-6820
FU European Union [895827]; Marie Curie Actions (MSCA) [895827] Funding
   Source: Marie Curie Actions (MSCA)
FX This project has received funding from the European Union's Horizon 2020
   research and innovation programme under the Marie Sklodowska-Curie grant
   agreement No. 895827. We thank Michael Betancourt, Philip de Bruin, Bob
   Carpenter, Mathieu Huot, Danny de Jong, Ohad Kammar, Gabriele Keller,
   Pieter Knops, Fernando Lucatelli Nunes, Curtis Chin Jen Sem, Amir
   Shaikhha, and Sam Staton for helpful discussions about automatic
   differentiation.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Abadi Martin, 2020, P ACM SIGPLAN S PRIN
   [Anonymous], 2012, Algebra
   Barber A, 1996, DUAL INTUITIONISTIC
   Barthe G, 2020, LECT NOTES COMPUT SC, V12075, P56, DOI 10.1007/978-3-030-44914-8_3
   Baydin AG, 2018, J MACH LEARN RES, V18
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Betancourt M, 2020, Arxiv, DOI arXiv:2002.00326
   Brunel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371132
   Carpenter B, 2015, Arxiv, DOI arXiv:1509.07164
   Chakravarty M.M.T., 2011, POPL DAMP, DOI [10.1145/1926354.1926358, DOI 10.1145/1926354.1926358]
   Chakravarty Manuel M. T., 2011, P 6 WORKSH DECL ASP, P3
   Cruttwell Geo ff S. H., 2020, P ANN C COMPUTER SCI
   CURIEN PL, 1986, INFORM CONTROL, V69, P188, DOI 10.1016/S0019-9958(86)80047-X
   DamianoMazza Michele, 2021, PROC ACM PROGRAM LAN, V5, P1
   Egger J, 2009, LECT NOTES COMPUT SC, V5771, P240, DOI 10.1007/978-3-642-04027-6_19
   Ehrhard T, 2018, MATH STRUCT COMP SCI, V28, P995, DOI 10.1017/S0960129516000372
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Fiore MP, 2007, LECT NOTES COMPUT SC, V4583, P163
   Hannemann-Tamás R, 2015, SIAM J SCI COMPUT, V37, pA2380, DOI 10.1137/140976315
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Huot M, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(1:41)2022
   Huot M, 2020, LECT NOTES COMPUT SC, V12077, P319, DOI 10.1007/978-3-030-45231-5_17
   Innes M, 2019, Arxiv, DOI [arXiv:1810.07951, DOI 10.48550/ARXIV.1810.07951]
   Johnstone PT, 2007, LECT NOTES COMPUT SC, V4624, P312
   Johnstone Peter T., 2002, Sketches of an Elephant: A Topos Theory Compendium, V2
   Krawiec F, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498710
   Kriegl A., 1997, The Convenient Setting of Global Analysis, V53
   Lambek Joachim, 1988, Introduction to Higher Order Categorical Logic, V7
   Levy Paul Blain., 2012, CALL BY PUSH VALUE F, V2
   Mak C, 2020, Arxiv, DOI arXiv:2002.08241
   Margossian CC, 2019, WIRES DATA MIN KNOWL, V9, DOI 10.1002/widm.1305
   McDonell TL, 2013, ACM SIGPLAN NOTICES, V48, P49, DOI [10.1145/2544174.2500595, 10.1145/2500365.2500595]
   Mellies P., 2009, Panoramas et Syntheses, V27, P15
   Nunes Fernando Lucatelli, 2021, arXiv
   Paszke A., 2017, NIPS W
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Skorstengaard L, 2019, Arxiv, DOI arXiv:1907.11133
   Tsiros P, 2019, J PHARMACOKINET PHAR, V46, P173, DOI 10.1007/s10928-019-09630-x
   Vakar Matthijs, 2021, Programming Languages and Systems. 30th European Symposium on Programming, ESOP 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12648), P607, DOI 10.1007/978-3-030-72019-3_22
   Vakar M, 2017, Arxiv, DOI [arXiv:1706.07997, 10.48550/arXiv.1706.07997]
   Vytiniotis Dimitrios, 2019, NEURIPS WORKSHOP PRO
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
   Wilson P., 2021, ELECTRON P THEOR COM, V333, P247, DOI [/10.4204/eptcs.333.17, DOI 10.4204/EPTCS.333.17]
NR 45
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2022
VL 44
IS 3
AR 20
DI 10.1145/3527634
PG 49
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3V9XX
UT WOS:000842012200008
OA Green Published, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Amtoft, T
   Banerjee, A
AF Amtoft, Torben
   Banerjee, Anindya
TI A Theory of Slicing for Imperative Probabilistic Programs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Probabilistic programming; program slicing; probabilistic control-flow
   graphs
ID TERMINATION; SEMANTICS
AB Dedicated to the memory of Sebastian Danicic.
   We present a theory for slicing imperative probabilistic programs containing random assignments and "observe" statements for conditioning. We represent such programs as probabilistic control-flow graphs (pCFGs) whose nodes modify probability distributions. This allows direct adaptation of standard machinery such as data dependence, postdominators, relevant variables, and so on, to the probabilistic setting. We separate the specification of slicing from its implementation:
   (1) first, we develop syntactic conditions that a slice must satisfy (they involve the existence of another disjoint slice such that the variables of the two slices are probabilistically independent of each other);
   (2) next, we prove that any such slice is semantically correct;
   (3) finally, we give an algorithm to compute the least slice.
   To generate smaller slices, we may in addition take advantage of knowledge that certain loops will terminate (almost) always.
   Our results carry over to the slicing of structured imperative probabilistic programs, as handled in recent work by Hur et al. For such a program, we can define its slice, which has the same "normalized" semantics as the original program; the proof of this property is based on a result proving the adequacy of the semantics of pCFGs w.r.t. the standard semantics of structured imperative probabilistic programs.
C1 [Amtoft, Torben] Kansas State Univ, Dept Comp Sci, 2184 Engn Hall,1701D Platt St, Manhattan, KS 66506 USA.
   [Banerjee, Anindya] IMDEA Software Inst, Campus Montegancedo S-N, Madrid 28223, Spain.
C3 Kansas State University; IMDEA Software Institute
RP Amtoft, T (corresponding author), Kansas State Univ, Dept Comp Sci, 2184 Engn Hall,1701D Platt St, Manhattan, KS 66506 USA.
EM tamtoft@ksu.edu; anindya.banerjee@imdea.org
OI Banerjee, Anindya/0000-0001-9979-1292
FU US National Science Foundation (NSF)
FX Banerjee's research was based on work supported by the US National
   Science Foundation (NSF) while working at the foundation. Any opinion,
   finding, and conclusion or recommendation expressed in this article are
   those of the authors and do not necessarily reflect the views of the
   NSF.
CR Amtoft T, 2008, INFORM PROCESS LETT, V106, P45, DOI 10.1016/j.ipl.2007.10.002
   Amtoft T, 2016, LECT NOTES COMPUT SC, V9634, P180, DOI 10.1007/978-3-662-49630-5_11
   [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   BALL T, 1993, LECTURE NOTES COMPUT, V749, P206, DOI DOI 10.1007/BFB0019410
   Barraclough RW, 2010, THEOR COMPUT SCI, V411, P1372, DOI 10.1016/j.tcs.2009.10.025
   Bichsel Benjamin, 2018, LNCS, P145, DOI DOI 10.1007/978-3-319-89884-1_6
   Blazy S, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P109
   Bouissou O, 2016, LECT NOTES COMPUT SC, V9636, P225, DOI 10.1007/978-3-662-49674-9_13
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Danicic S, 2011, THEOR COMPUT SCI, V412, P6809, DOI 10.1016/j.tcs.2011.08.033
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Gretz F, 2014, PERFORM EVALUATION, V73, P110, DOI 10.1016/j.peva.2013.11.004
   Hur CK, 2014, ACM SIGPLAN NOTICES, V49, P133, DOI [10.1145/2666356.2594303, 10.1145/2594291.2594303]
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Kaminski Benjamin Lucien, 2015, P 40 INT S MATH FD 1, P307, DOI [10.1007/978-3-662-48057- 1_24, DOI 10.1007/978-3-662-48057-1_24]
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Lechenet JC, 2016, LECT NOTES COMPUT SC, V9633, P179, DOI 10.1007/978-3-662-49665-7_11
   McIver A., 2018, J P ACM PROGRAM LANG, V2, P33
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2126, P111
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Panangaden P., 2009, LABELLED MARKOV PROC
   PODGURSKI A, 1990, IEEE T SOFTWARE ENG, V16, P965, DOI 10.1109/32.58784
   Ranganath VP, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275502
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Wasserrab D., 2010, THESIS
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 29
TC 2
Z9 2
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2020
VL 42
IS 2
AR 6
DI 10.1145/3372895
PG 71
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OJ1LU
UT WOS:000583729800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Steimann, F
AF Steimann, Friedrich
TI Constraint-Based Refactoring
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Refactoring; constraint-based repair
ID TOOLS
AB Constraint-based refactoring generalizes constraint-based type refactoring as introduced by Tip et al. [61] by extending the coverage of change from types to names, locations, accessibilities, and other properties of program elements. Starting with a generic specification of refactoring tools, we systematically develop constraint-based refactoring as a generic solution to a certain class of refactoring problems and provide a condition under which constraint-based refactoring tools are proven correct for any given target language. Although compliance with this correctness condition is hard to prove for target languages whose semantics is not formally defined, we show how the condition gives rise to automated testing procedures. We present a novel algorithm based on constraint-logic programming for the generation of constraints from a program to be refactored, and demonstrate its time and space requirements by using it in the application of refactorings to open source programs. Summarizing earlier work, we show how the principles underlying constraint-based refactoring tools extend to ad hoc refactoring, cross-language refactoring, and model/code co-refactoring.
C1 [Steimann, Friedrich] Fernuniv, Lehrgebiet Programmiersyst, D-58084 Hagen, Germany.
C3 Fern University Hagen
RP Steimann, F (corresponding author), Fernuniv, Lehrgebiet Programmiersyst, D-58084 Hagen, Germany.
EM steimann@acm.org
FU Deutsche Forschungsgemeinschaft (DFG) [STE 906/4-1, STE 906/4-2, STE
   906/5-1]
FX The work was funded by grants STE 906/4-1&2 and STE 906/5-1 from the
   Deutsche Forschungsgemeinschaft (DFG).
CR Andreae C, 2006, ACM SIGPLAN NOTICES, V41, P57, DOI 10.1145/1167515.1167479
   [Anonymous], 1989, Constraint Satisfaction in Logic Programming
   [Anonymous], 2014, The Java Language Specification, Java SE
   [Anonymous], 2006, ECMA367
   [Anonymous], 2007, P 6 JOINT M EUR SOFT
   [Anonymous], THESIS
   Balaban I, 2005, ACM SIGPLAN NOTICES, V40, P265, DOI 10.1145/1103845.1094832
   Bannwart F, 2006, LECT NOTES COMPUT SC, V4085, P492
   Borba P, 2004, SCI COMPUT PROGRAM, V52, P53, DOI 10.1016/j.scico.2004.03.003
   BORNING A, 1987, SIGPLAN NOTICES, V22, P48, DOI 10.1145/38807.38812
   Brant J, 2015, IEEE SOFTWARE, V32, P80, DOI 10.1109/MS.2015.145
   Brisset Pascal, 2016, ECLI PSE CONSTRAINT
   Bryant R. E., 2002, ACM Transactions on Computational Logic, V3, P604, DOI 10.1145/566385.566390
   Foster SR, 2012, PROC INT CONF SOFTW, P222, DOI 10.1109/ICSE.2012.6227191
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   FREEMANBENSON BN, 1990, COMMUN ACM, V33, P54, DOI 10.1145/76372.77531
   Fuhrer R, 2005, LECT NOTES COMPUT SC, V3586, P71
   Garrido A, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P165
   Gligoric M, 2013, LECT NOTES COMPUT SC, V7920, P629, DOI 10.1007/978-3-642-39038-8_26
   Grothoff C, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286823
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Kegel H, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P431, DOI 10.1145/1368088.1368147
   Kiezun A, 2007, PROC INT CONF SOFTW, P437
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Massoni Tiago, 2006, ELECTR COMMUN, V3, P1
   Mens T, 2005, J SOFTW MAINT EVOL-R, V17, P247, DOI 10.1002/smr.316
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Mews Marcus, 2016, THESIS
   Meyers Scott, 1993, P 1 WORKSH PRINC PRA, P200
   Microsoft, 2003, C LANGUAGE SPECIFICA
   OMG, 2012, OBJ CONSTR LANG SPEC
   Opdyke William F., 1992, THESIS
   Overbye J. L., 2011, THESIS
   Palsberg J., 1994, OBJECT ORIENTED TYPE
   Porres I., 2013, CEUR WORKSHOP P, P93
   Raychev V, 2013, ACM SIGPLAN NOTICES, V48, P339, DOI [10.1145/2509136.2509544, 10.1145/2544173.2509544]
   Roberts D., 1999, THESIS
   Schäfer M, 2012, IEEE T SOFTWARE ENG, V38, P1233, DOI 10.1109/TSE.2012.13
   Schäfer M, 2010, ACM SIGPLAN NOTICES, V45, P286, DOI 10.1145/1932682.1869485
   Schäfer M, 2010, LECT NOTES COMPUT SC, V6183, P225, DOI 10.1007/978-3-642-14107-2_11
   Schäfer M, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P277
   Schafer M., 2010, THESIS
   Schafer M., 2009, P 23 EUROPEAN C ECOO, P369, DOI [10.1007/978-3-642-03013-0_17, DOI 10.1007/978-3-642-03013-0_17]
   Schimpf J, 2002, LECT NOTES COMPUT SC, V2401, P224, DOI 10.1007/3-540-45619-8_16
   Soares G., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P173, DOI 10.1109/ICSM.2011.6080784
   Soares G, 2013, IEEE T SOFTWARE ENG, V39, P147, DOI 10.1109/TSE.2012.19
   Steimann F, 2016, ACM SIGPLAN NOTICES, V51, P711, DOI 10.1145/3022671.2984007
   Steimann F, 2015, SOFTW SYST MODEL, V14, P307, DOI 10.1007/s10270-013-0314-z
   Steimann F, 2012, IEEE INT CONF AUTOM, P290, DOI 10.1145/2351676.2351726
   Steimann F, 2011, LECT NOTES COMPUT SC, V6813, P255, DOI 10.1007/978-3-642-22655-7_13
   Steimann F, 2012, LECT NOTES COMPUT SC, V7313, P535, DOI 10.1007/978-3-642-31057-7_24
   Steimann F, 2009, LECT NOTES COMPUT SC, V5653, P419, DOI 10.1007/978-3-642-03013-0_19
   Steimann Friedrich, 2015, LECT NOTES COMPUTER, V10223, P179
   Sultana N, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P51, DOI 10.1145/1328408.1328417
   Thies A., 2012, P 2012 INT S SOFTWAR, P1, DOI [10.1145/2338965.2336754., DOI 10.1145/2338965.2336754]
   Thies Andreas, 2014, THESIS
   Thies Andreas, 2010, P 5 WORKSH AUT SOFTW
   Thompson S, 2013, J FUNCT PROGRAM, V23, P293, DOI 10.1017/S0956796813000117
   Tip F, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/949343.949308
   Tip F, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961205
   Ulke Bastian, 2017, P ACM IEEE 20 INT C
   Vakilian M, 2012, PROC INT CONF SOFTW, P233, DOI 10.1109/ICSE.2012.6227190
   Van Hentenryck P., 2005, CONSTRAINT BASED LOC
   Verbaere M., 2006, 28th International Conference on Software Engineering Proceedings, P172, DOI 10.1145/1134285.1134311
   von Pilgrim J, 2013, IEEE INT CONF AUTOM, P682, DOI 10.1109/ASE.2013.6693133
   Xi Ge, 2012, P 2012 34 INT C SOFT, P211
NR 67
TC 7
Z9 7
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2018
VL 40
IS 1
AR 2
DI 10.1145/3156016
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FS6AZ
UT WOS:000419881600002
DA 2024-07-18
ER

PT J
AU Lee, W
   Lee, W
   Kang, D
   Heo, K
   Oh, H
   Yi, K
AF Lee, Woosuk
   Lee, Wonchan
   Kang, Dongok
   Heo, Kihong
   Oh, Hakjoo
   Yi, Kwangkeun
TI Sound Non-Statistical Clustering of Static Analysis Alarms
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Static analysis; abstract interpretation; false alarms
AB We present a sound method for clustering alarms from static analyzers. Our method clusters alarms by discovering sound dependencies between them such that if the dominant alarms of a cluster turns out to be false, all the other alarms in the same cluster are guaranteed to be false. We have implemented our clustering algorithm on top of a realistic buffer-overflow analyzer and proved that our method reduces 45% of alarm reports. Our framework is applicable to any abstract interpretation-based static analysis and orthogonal to abstraction refinements and statistical ranking schemes.
C1 [Lee, Woosuk; Kang, Dongok; Heo, Kihong; Yi, Kwangkeun] Seoul Natl Univ, Room 312-2,Bldg 302,1 Kwanak Ro, Seoul 151744, South Korea.
   [Lee, Wonchan] Stanford Univ, Stanford, CA 94305 USA.
   [Oh, Hakjoo] Korea Univ, Coll Informat, Room 616C,Sci Lib Bldg,Anam Dong 5Ga, Seoul 136713, South Korea.
   [Lee, Woosuk] 416 Gates,353 Serra Mall, Stanford, CA 94305 USA.
C3 Seoul National University (SNU); Stanford University; Korea University
RP Oh, H (corresponding author), Korea Univ, Coll Informat, Room 616C,Sci Lib Bldg,Anam Dong 5Ga, Seoul 136713, South Korea.
EM wslee@ropas.snu.ac.kr; wonchan@cs.stanford.edu; dokang@ropas.snu.ac.kr;
   khheo@ropas.snu.ac.kr; kwang@ropas.snu.ac.kr
RI ‍, 오학주[ 부교수 / 컴퓨터학과 ]/AAW-5194-2020; Heo, Kihong/F-2901-2018; Heo,
   Kihong/AAD-8692-2019; Lee, Woosuk/ITV-2754-2023
OI Heo, Kihong/0000-0003-2671-0142; 
FU Institute for Information & communications Technology Promotion (IITP)
   grant - Korea government (MSIP) [B0717-16-0098, R0190-16-2011]; Basic
   Science Research Program through the National Research Foundation of
   Korea (NRF) - Ministry of Science, ICT & Future Planning
   [NRF-2016R1C1B2014062]; Engineering Research Center of Excellence
   Program of Korea Ministry of Science, ICT & Future Planning(MSIP) /
   National Research Foundation of Korea(NRF) [NRF-2008-0062609]; Samsung
   Electronics Software Center
FX This work was supported by Institute for Information & communications
   Technology Promotion (IITP) grant funded by the Korea government (MSIP)
   (No. B0717-16-0098 and No. R0190-16-2011, Development of Vulnerability
   Discovery Technologies for IoT Software Security) and Basic Science
   Research Program through the National Research Foundation of Korea (NRF)
   funded by the Ministry of Science, ICT & Future Planning
   (NRF-2016R1C1B2014062). This research was also supported by the
   Engineering Research Center of Excellence Program of Korea Ministry of
   Science, ICT & Future Planning(MSIP) / National Research Foundation of
   Korea(NRF) (Grant NRF-2008-0062609), and by Samsung Electronics Software
   Center.
CR [Anonymous], PROGRAMMING LANGUAGE
   Balakrishnan G, 2008, LECT NOTES COMPUT SC, V5079, P238
   Ball T, 2003, ACM SIGPLAN NOTICES, V38, P97, DOI 10.1145/640128.604140
   Beaven M., 1993, ACM Letters on Programming Languages and Systems, V2, P17, DOI 10.1145/176454.176460
   Blackshear S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI 10.1145/2499370.2462186
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Chitil O, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/507669.507659
   Cifuentes Cristina, 2009, P 2 INT WORKSHOP DEF, P16, DOI DOI 10.1145/1555860.1555866
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P, 2007, LECT NOTES COMPUT SC, V4634, P333
   D'Silva V, 2012, LECT NOTES COMPUT SC, V7214, P48, DOI 10.1007/978-3-642-28756-5_5
   Duggan Dominic, 1995, SCI COMPUT PROGRAM, P37
   GROCE A, 2003, P 10 INT NATL C MOD, V2648, P121
   Gulavani BS, 2006, LECT NOTES COMPUT SC, V3920, P474
   GULAVANI BS, 2008, P THEOR PRACT SOFTW, V4963, P443
   Johnson-acsadi G, 1986, Popul Bull UN, P44, DOI 10.1145/512644.512649
   Jung YB, 2005, LECT NOTES COMPUT SC, V3672, P203
   Kim H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P301, DOI 10.1145/1985793.1985835
   Kim Y, 2010, INFORM SOFTWARE TECH, V52, P210, DOI 10.1016/j.infsof.2009.10.004
   Kremenek T., 2004, Software Engineering Notes, V29, P83, DOI 10.1145/1041685.1029909
   KREMENEK T, 2003, P 10 INT C STAT, V2694, P295
   Le Wei., 2010, Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE'10, P307
   Lee WG, 2012, INT J PRECIS ENG MAN, V13, P299, DOI 10.1007/s12541-012-0037-z
   Liang P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/1926385.1926391
   Mangal R, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P462, DOI 10.1145/2786805.2786851
   MathWorks, 2015, POL EMB SOFTW VER
   Microsoft, 2015, COD CONTR
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Oh H, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2590811
   Oh H, 2012, ACM SIGPLAN NOTICES, V47, P229, DOI 10.1145/2345156.2254092
   Rival X, 2005, LECT NOTES COMPUT SC, V3672, P303
   ROPAS, 2017, SPARR STAT AN
   Tip F, 2001, ACM T SOFTW ENG METH, V10, P5, DOI 10.1145/366378.366379
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
NR 34
TC 16
Z9 18
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2017
VL 39
IS 4
AR 16
DI 10.1145/3095021
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL6AW
UT WOS:000414328600003
DA 2024-07-18
ER

PT J
AU Balabonski, T
   Pottier, F
   Protzenko, J
AF Balabonski, Thibaut
   Pottier, Francois
   Protzenko, Jonathan
TI The Design and Formalization of Mezzo, a Permission-Based Programming
   Language
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Aliasing; concurrency; ownership; side effects; static type systems
ID MEMORY MANAGEMENT; SEPARATION LOGIC; OWNERSHIP; SEMANTICS; CHECKING;
   SYSTEM
AB The programming language Mezzo is equipped with a rich type system that controls aliasing and access to mutable memory. We give a comprehensive tutorial overview of the language. Then we present a modular formalization of Mezzo's core type system, in the form of a concurrent lambda-calculus, which we successively extend with references, locks, and adoption and abandon, a novel mechanism that marries Mezzo's static ownership discipline with dynamic ownership tests. We prove that well-typed programs do not go wrong and are data-race free. Our definitions and proofs are machine checked.
C1 [Balabonski, Thibaut] Univ Paris Sud 11, LRI, Bat 650, F-91405 Orsay, France.
   [Pottier, Francois] INRIA Paris, Projet Gallium, 2 Rue Simone Iff,CS 42112, F-75589 Paris 12, France.
   [Protzenko, Jonathan] 1 Microsoft Way, Redmond, WA 98052 USA.
C3 Universite Paris Saclay
RP Balabonski, T (corresponding author), Univ Paris Sud 11, LRI, Bat 650, F-91405 Orsay, France.
OI Pottier, Francois/0000-0002-4069-1235
CR Achten Peter, 1995, J FUNCT PROGRAM, V5, P81
   Ahmed A, 2007, FUND INFORM, V77, P397
   Amighi A, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:2)2015
   [Anonymous], 2014, BATTERIES INCLUDED
   [Anonymous], P 21 ACM SIGPLAN SIG
   [Anonymous], 1990, PROGRAMMING CONCEPTS
   Antonopoulos T, 2014, LECT NOTES COMPUT SC, V8412, P411
   Balabonski T, 2014, LECT NOTES COMPUT SC, V8475, P253, DOI 10.1007/978-3-319-07151-0_16
   Balabonski Thibaut, 2014, COQ FORMALIZATION ME
   Barber Andrew, 1996, ECSLFCS96347 SCH INF
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bierhoff K, 2009, LECT NOTES COMPUT SC, V5653, P195, DOI 10.1007/978-3-642-03013-0_10
   Bierhoff K, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P301
   Bierhoff Kevin., 2011, ENG SOFTWARE, P35
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Bocchino Jr Robert L., 2009, USENIX C HOT TOP PAR, P1
   Bocchino Jr Robert L., 2011, PRINCIPLES PROGRAMMI, P535
   Bocchino Jr Robert L., 2009, OBJECT ORIENTED PROG, P97
   Bocchino Robert L.  Jr., 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P156, DOI 10.1007/978-3-642-36946-9_7
   Bocchino RL, 2011, LECT NOTES COMPUT SC, V6813, P306, DOI 10.1007/978-3-642-22655-7_15
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Boyland JT, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749611
   Braibant Thomas, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P167
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Bugliesi Michele, 2015, AFFINE REFI IN PRESS
   Buisse A, 2011, ELECTRON NOTES THEOR, V276, P121, DOI 10.1016/j.entcs.2011.09.018
   Calcagno Cristiano., 2015, Open-sourcing facebook infer: Identify bugs before you ship
   Chang BYE, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P247, DOI 10.1145/1328438.1328469
   Charguéraud A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P213
   Chargueraud Arthur, 2010, THESIS
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Chrzaszcz J, 1998, LECT NOTES COMPUT SC, V1450, P346, DOI 10.1007/BFb0055784
   Clarke D, 2003, LECT NOTES COMPUT SC, V3013, P197
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clarke D. G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P53
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Cook B, 2011, LECT NOTES COMPUT SC, V6901, P235, DOI 10.1007/978-3-642-23217-6_16
   Damas L., 1985, THESIS
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   DETLEFS DL, 1998, 156 SRC
   Dietl W, 2005, J OBJECT TECHNOL, V4, P5, DOI 10.5381/jot.2005.4.8.a1
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Distefano D, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P213
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Ernst D., 2005, OOPSLA, P211, DOI [DOI 10.1145/1103845.1094828, 10.1145/1094811.1094828, DOI 10.1145/1094811.1094828]
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Filliâtre JC, 2014, LECT NOTES COMPUT SC, V8559, P1, DOI 10.1007/978-3-319-08867-9_1
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1576, P91
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   GOTSMAN A, 2007, MSRTR200739
   Gueneau Armael, 2013, INS OUTS ITERATION M
   Haack C, 2009, J OBJECT TECHNOL, V8, P55, DOI 10.5381/jot.2009.8.4.a3
   Haack C, 2008, LECT NOTES COMPUT SC, V5356, P171
   Heule S, 2013, LECT NOTES COMPUT SC, V7737, P315
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Jacobs Bart, 2008, CW520 KATH U LEUV DE
   Jacobs Bart, 2015, EUR C OBJ OR PROGR E, P99
   Krishnaswami Neelakantan R., 2009, P 4 INT WORKSHOP TYP, P105, DOI [10.1145/1481861.1481874, DOI 10.1145/1481861.1481874]
   Larus James Richard, 1989, UCBCSD89502 U CAL EE
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6012, P407, DOI 10.1007/978-3-642-11957-6_22
   Maeda Toshiyuki., 2011, Proceedings of the 7th ACM SIGPLAN Workshop on Types in Language Design and Implementation, TLDI'11, P29, DOI DOI 10.1145/1929553.1929559
   Mazurak K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P77
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Minamide Y., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P75, DOI 10.1145/268946.268953
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   Müller P, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P461
   Naden K, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P557
   Nanevski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1706299.1706331
   O'Hearn P. W., 2007, TCS, V375, P1
   Pérez JAN, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P556
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Pottier F, 2008, IEEE S LOG, P331, DOI 10.1109/LICS.2008.16
   Pottier F, 2013, ACM SIGPLAN NOTICES, V48, P173, DOI [10.1145/2544174.2500598, 10.1145/2500365.2500598]
   Pottier F, 2013, J FUNCT PROGRAM, V23, P38, DOI 10.1017/S0956796812000366
   Pottier Francois, 2015, SUMMIT ADV PROGRAMMI
   Protzenko Jonathan, 2014, MEZZO SAMPLE PROJECT
   Protzenko Jonathan, 2014, MEZZO WEB TRY MEZZO
   Protzenko Jonathan, 2014, THESIS U PARIS DIDER, P7
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2009, LECT NOTES COMPUT SC, V5502, P378, DOI 10.1007/978-3-642-00590-9_27
   Schwinghammer J, 2010, LECT NOTES COMPUT SC, V6014, P2, DOI 10.1007/978-3-642-12032-9_2
   Schwinghammer J, 2009, LECT NOTES COMPUT SC, V5771, P440, DOI 10.1007/978-3-642-04027-6_32
   Smetsers S., 1994, Graph Transformations in Computer Science. International Workshop Proceedings, P358
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   The Mozilla foundation, 2014, RUST PROGR LANG
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 1988, THESIS
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Tuerk Thomas, 2010, LOCAL REASONIN UNPUB
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vafeiadis V, 2011, ELECTRON NOTES THEOR, V276, P335, DOI 10.1016/j.entcs.2011.09.029
   Vitek J, 2001, SOFTWARE PRACT EXPER, V31, P507, DOI 10.1002/spe.369
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   Walker D., 2000, TYP COMP 3 INT WORKS, V2071, P177, DOI [10.1007/3-540-45332-6\_7, DOI 10.1007/3-540-45332-6]
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 107
TC 15
Z9 16
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2016
VL 38
IS 4
AR 14
DI 10.1145/2837022
PG 94
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC1WS
UT WOS:000387900100002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gesbert, N
   Genevès, P
   Layaïda, N
AF Gesbert, Nils
   Geneves, Pierre
   Layaida, Nabil
TI A Logical Approach to Deciding Semantic Subtyping
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Design; Languages; Theory; Verification; Type-system;
   polymorphism; subtyping
ID PARAMETRIC POLYMORPHISM
AB We consider a type algebra equipped with recursive, product, function, intersection, union, and complement types, together with type variables. We consider the subtyping relation defined by Castagna and Xu [2011] over such type expressions and show how this relation can be decided in EXPTIME, answering an open question. The novelty, originality and strength of our solution reside in introducing a logical modeling for the semantic subtyping framework. We model semantic subtyping in a tree logic and use a satisfiability-testing algorithm in order to decide subtyping. We report on practical experiments made with a full implementation of the system. This provides a powerful polymorphic type system aiming at maintaining full static type-safety of functional programs that manipulate trees, even with higher-order functions, which is particularly useful in the context of XML.
C1 [Gesbert, Nils] Grenoble INP Ensimag, Grenoble, France.
   [Geneves, Pierre] CNRS, F-75700 Paris, France.
   [Layaida, Nabil] Inria, Grenoble, France.
C3 Centre National de la Recherche Scientifique (CNRS); Inria
RP Gesbert, N (corresponding author), 655 Ave Europe, F-38330 Montbonnot St Martin, France.
EM nils.gesbert@inria.fr; pierre.geneves@inria.fr; nabil.layaida@inria.fr
FU ANR project TYPEX [ANR-11-BS02-007]
FX This work was supported by the ANR project TYPEX, ANR-11-BS02-007.
CR [Anonymous], 2007, XQuery 1.0: An XML Query Language
   Benedikt M, 2010, PROC VLDB ENDOW, V3, P906, DOI 10.14778/1920841.1920956
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Bierman GM, 2010, ACM SIGPLAN NOTICES, V45, P105, DOI 10.1145/1932681.1863560
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Calcagno C, 2005, J FUNCT PROGRAM, V15, P543, DOI 10.1017/S0956796804005404
   Cardelli L., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P365, DOI 10.1145/325694.325742
   Castagna G, 2011, ACM SIGPLAN NOTICES, V46, P94, DOI 10.1145/2034574.2034788
   Clark J., 1999, XML Path Language (XPath) Version 1.0
   Clarke EM, 1999, MODEL CHECKING, P1
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dyck M., 2014, XQUERY 30 XML QUERY
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Genevès P, 2007, ACM SIGPLAN NOTICES, V42, P342, DOI 10.1145/1273442.1250773
   Genevès P, 2015, ACM T COMPUT LOG, V16, DOI 10.1145/2724712
   Genevès P, 2009, ACM SIGPLAN NOTICES, V44, P221, DOI 10.1145/1631687.1596583
   Geneves Pierre, 2006, THESIS I NATL POLYTE
   Gesbert N, 2011, ACM SIGPLAN NOTICES, V46, P107, DOI 10.1145/2034574.2034789
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   Hosoya H, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596529
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Milner R., 1975, Proving and Improving Programs, P371
   Pan G., 2006, K. J. Appl. Non-Class. Log., V16, P169
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Vouillon J, 2006, ACM SIGPLAN NOTICES, V41, P103, DOI 10.1145/1111320.1111047
NR 27
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2015
VL 38
IS 1
AR 3
DI 10.1145/2812805
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CU1EB
UT WOS:000363261400003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Strickland, TS
   Dimoulas, C
   Takikawa, A
   Felleisen, M
AF Strickland, T. Stephen
   Dimoulas, Christos
   Takikawa, Asumu
   Felleisen, Matthias
TI Contracts for First-Class Classes
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Reliability; Contracts; first-class class systems
AB First-class classes enable programmers to abstract over patterns in the class hierarchy and to experiment with new forms of object-oriented programming such as mixins and traits. This increase in expressive power calls for tools to control the complexity of the software architecture. A contract system is one possible tool that has seen much use in object-oriented programming languages, but existing contract systems cannot cope with first-class classes. On the one hand, the typical contract language deals only with plain values such as numbers, while classes are higher-order values. On the other hand, contract specifications are usually contained within class definitions, while classes as values call for a separate contract language.
   This article presents the design and implementation of a contract system for first-class classes as well as a two-pronged evaluation. The first one states and proves a "blame correctness" theorem for a model of our language. The theorem shows that when the contract system assigns blame to a component for a contract violation, the component is indeed responsible for providing the nonconforming value. The second part, consisting of benchmarks and case studies, demonstrates the need for the rich contract language and validates that our implementation approach is performant with respect to time.
C1 [Takikawa, Asumu; Felleisen, Matthias] Northeastern Univ, Coll Comp Sci, Boston, MA 02115 USA.
C3 Northeastern University
RP Strickland, TS (corresponding author), Univ Maryland, Dept Comp Sci, AV Williams 115, College Pk, MD 20742 USA.
EM princedpw@gmail.com
RI Dimoulas, Christos/P-7100-2018
OI Dimoulas, Christos/0000-0002-9338-7034
FU U.S. Air Force Office of Scientific Research; Defense Advanced Research
   Projects Agency; National Science Foundation
FX This research was conducted at Northeastern University and was supported
   in part by the U.S. Air Force Office of Scientific Research, the Defense
   Advanced Research Projects Agency, and the National Science Foundation.
CR Allen E, 2003, ACM SIGPLAN NOTICES, V38, P96, DOI 10.1145/949343.949316
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   [Anonymous], 2010, PLTTR20101 INC
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Austin Thomas H., 2010, UCSCSOE1025
   BARNETT M, 2004, LNCS, V3362, P49, DOI [DOI 10.1007/978-3-540-30569-9_3, 10.1007]
   Bartetzko D., 2001, Electronic Notes in Theoretical Computer Science, V55, DOI 10.1016/S1571-0661(04)00247-6
   Bracha G, 2004, ACM SIGPLAN NOTICES, V39, P331, DOI 10.1145/1035292.1029004
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bracha G., 2016, The Dart Programming Language. Always learning
   Cardelli Luca., 1991, Mathematical structures in computer science, V1, P3, DOI DOI 10.1017/S0960129500000049
   CarrilloCastellon M, 1996, J OBJECT-ORIENT PROG, V9, P23
   DIMOULAS C, 2011, P S PRINC PROGR LANG, V46, P215, DOI DOI 10.1145/1925844.1926410
   Dimoulas C, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039348
   Duggan D, 2001, ACM SIGPLAN NOTICES, V36, P223, DOI 10.1145/504311.504299
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Findler RB, 2006, LECT NOTES COMPUT SC, V3945, P226
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Findler RB, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/504311.504283
   Fisher Kathleen, 2004, P WORKSH FDN OBJ OR
   Flanagan D.Y. Matsumoto., 2008, The Ruby Programming Language
   Flatt M, 2006, LECT NOTES COMPUT SC, V4279, P270
   Gaster Benedict R., 1996, NOTTCSTR963 U NOTT
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Goldberg DS, 2004, ACM SIGPLAN NOTICES, V39, P116, DOI 10.1145/1035292.1028987
   GOMES B, 1996, LANGUAGE MANUAL SATH
   Gray KE, 2008, LECT NOTES COMPUT SC, V5142, P52, DOI 10.1007/978-3-540-70592-5_4
   Gray Kathryn E., 2010, P WORKSH FDN OBJ OR
   Gray KathrynE., 2005, Proc. ACM Conference on Object-Oriented Programming, Systems, P231
   Harper Robert., 1991, Proc. ACM Symposium on Principles of Programming Languages, P131
   Hill Gary, 1999, EXHIBITION CATALOGUE
   Karaorman M., 1999, Meta-Level Architectures and Reflection. Second International Conference, Reflection '99. Proceedings (Lecture Notes in Computer Science Vol.1616), P175
   Kolling Michael, 1997, BLUE LANGUAGE SPECIF
   Kramer Reto, 1998, P C TECHN OBJ OR LAN, V295
   LAMPING J, 1993, SIGPLAN NOTICES, V28, P201, DOI 10.1145/167962.165891
   Lampson B. W., 1977, SIGPLAN Notices, V12, P1, DOI 10.1145/954666.971189
   Leavens Gary T., 2006, LECT NOTES COMPUTER, V4260, P2
   Leavens GT, 2005, SCI COMPUT PROGRAM, V55, P185, DOI 10.1016/j.scico.2004.05.015
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   LUCKHAM DC, 1985, IEEE SOFTWARE, V2, P9, DOI 10.1109/MS.1985.230345
   Madsen O. Lehrmann, 1993, Object Oriented Programming in the BETA Programming Language
   MCDIRMID S, 2001, P ANN C OBJ OR PROGR, V36, P211
   Meyer B, 1992, IEEE COMPUT, V25
   Meyer B., 1992, Eiffel: The Language
   MOON DA, 1986, P ANN C OBJ OR PROGR, V21, P1
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Plosch R, 1997, ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE AND INTERNATIONAL COMPUTER SCIENCE CONFERENCE, PROCEEDINGS, P213, DOI 10.1109/APSEC.1997.640178
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   SERVETTO M, 2010, P ANN C OBJ OR PROGR, V45, P464, DOI DOI 10.1145/1932682.1869498
   Strickland TS, 2009, LECT NOTES COMPUT SC, V6041, P141
   STRICKLAND TS, 2010, P DYN LANG S, V45, P97
   STRICKLAND TS, 2012, P ANN C OBJ OR PROGR, V47, P943, DOI DOI 10.1145/2398857.2384685
   Szyperski C., 1997, Component Software
   VANCUTSEM T, 2010, P DLS 2010, V45, P59
   WAND M., 1994, THEORETICAL ASPECTS, P97
NR 59
TC 6
Z9 7
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2013
VL 35
IS 3
DI 10.1145/2518189
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 258BG
UT WOS:000327432300003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Giesl, J
   Raffelsieper, M
   Schneider-Kamp, P
   Swiderski, S
   Thiemann, R
AF Giesl, Juergen
   Raffelsieper, Matthias
   Schneider-Kamp, Peter
   Swiderski, Stephan
   Thiemann, Rene
TI Automated Termination Proofs for Haskell by Term Rewriting
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification; Functional programming; Haskell;
   termination analysis; term rewriting; dependency pairs
ID PROVING TERMINATION; DEPENDENCY PAIRS; OUTERMOST; PROGRAMS; CHECKING;
   TOOL
AB There are many powerful techniques for automated termination analysis of term rewriting. However, up to now they have hardly been used for real programming languages. We present a new approach which permits the application of existing techniques from term rewriting to prove termination of most functions defined in Haskell programs. In particular, we show how termination techniques for ordinary rewriting can be used to handle those features of Haskell which are missing in term rewriting (e.g., lazy evaluation, polymorphic types, and higher-order functions). We implemented our results in the termination prover AProVE and successfully evaluated them on existing Haskell libraries.
C1 [Giesl, Juergen; Swiderski, Stephan] Rhein Westfal TH Aachen, LuFG Informat 2, D-52074 Aachen, Germany.
   [Raffelsieper, Matthias] Tech Univ Eindhoven, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
   [Schneider-Kamp, Peter] Univ So Denmark, Dept Math & Comp Sci, DK-5230 Odense M, Denmark.
   [Thiemann, Rene] Univ Innsbruck, Inst Comp Sci, A-6020 Innsbruck, Austria.
C3 RWTH Aachen University; Eindhoven University of Technology; University
   of Southern Denmark; University of Innsbruck
RP Giesl, J (corresponding author), Rhein Westfal TH Aachen, LuFG Informat 2, Ahornstr 55, D-52074 Aachen, Germany.
EM giesl@informatik.rwth-aachen.de; m.raffelsieper@tue.nl;
   petersk@imada.sdu.dk; swiderski@informatik.rwth-aachen.de;
   rene.thiemann@uibk.ac.at
RI Schneider-Kamp, Peter/E-4111-2013
OI Schneider-Kamp, Peter/0000-0003-4000-5570; Thiemann,
   Rene/0000-0002-0323-8829; Giesl, Jurgen/0000-0003-0283-8520
FU Deutsche Forschungsgsmeinschaft DFG [Gi 274/5-2]; DFG Research Training
   Group [1298]
FX This work was supported by the Deutsche Forschungsgsmeinschaft DFG under
   grant Gi 274/5-2 and the DFG Research Training Group 1298 (AlgoSyn).
CR Abel A, 2004, RAIRO-THEOR INF APPL, V38, P277, DOI 10.1051/ita:2004015
   Alarcón B, 2006, LECT NOTES COMPUT SC, V4337, P297
   Alarcón B, 2008, LECT NOTES ARTIF INT, V5330, P636, DOI 10.1007/978-3-540-89439-1_44
   Albert E, 2008, LECT NOTES COMPUT SC, V5051, P2, DOI 10.1007/978-3-540-68863-1_2
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Berdine J, 2006, LECT NOTES COMPUT SC, V4144, P386, DOI 10.1007/11817963_35
   Blanqui F, 2004, LECT NOTES COMPUT SC, V3091, P24
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3385, P113
   Brockschmidt M, 2010, LECT NOTES ARTIF INT, V6463, P17, DOI 10.1007/978-3-642-17172-7_2
   Chawdhary A, 2008, LECT NOTES COMPUT SC, V4960, P148
   COLON M, 2002, LNCS, V2034, P442
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   DERSHOWITZ N, 1987, J SYMB COMPUT, V3, P69, DOI 10.1016/S0747-7171(87)80022-6
   Endrullis J, 2008, J AUTOM REASONING, V40, P195, DOI 10.1007/s10817-007-9087-9
   Endrullis J, 2009, LECT NOTES COMPUT SC, V5595, P305, DOI 10.1007/978-3-642-02348-4_22
   Falke S, 2008, LECT NOTES COMPUT SC, V5117, P94, DOI 10.1007/978-3-540-70590-1_7
   Fuhs C, 2009, LECT NOTES COMPUT SC, V5595, P32, DOI 10.1007/978-3-642-02348-4_3
   Geser A, 2004, APPL ALGEBR ENG COMM, V15, P149, DOI 10.1007/s00200-004-0162-8
   Giesl J, 2004, J FUNCT PROGRAM, V14, P379, DOI 10.1017/S0956796803004945
   Giesl J, 2005, LECT NOTES COMPUT SC, V3717, P216
   Giesl J, 2005, LECT NOTES COMPUT SC, V3452, P301
   GIESL J, 1995, LECT NOTES COMPUTER, V983, P154
   Giesl J, 2006, J AUTOM REASONING, V37, P155, DOI 10.1007/s10817-006-9057-7
   Giesl J, 2006, LECT NOTES ARTIF INT, V4130, P281
   Giesl J, 2006, LECT NOTES COMPUT SC, V4098, P297
   Glenstrup AJ, 2005, ACM T PROGR LANG SYS, V27, P1147, DOI 10.1145/1108970.1108973
   GNAEDIG I, 2008, ACM T COMPUT LOG, V10, P3
   Godoy G, 2004, LECT NOTES ARTIF INT, V3097, P91
   Hanus M, 2007, LECT NOTES COMPUT SC, V4670, P45, DOI 10.1007/978-3-540-74610-2_5
   Hirokawa N, 2005, INFORM COMPUT, V199, P172, DOI 10.1016/j.ic.2004.10.004
   Hirokawa N, 2007, INFORM COMPUT, V205, P474, DOI 10.1016/j.ic.2006.08.010
   Hirokawa N, 2008, LECT NOTES ARTIF INT, V5330, P667, DOI 10.1007/978-3-540-89439-1_46
   JONES MP, 1999, HUGS 98 USER MANUAL
   Jones S.Peyton., 2003, Haskell 98 Languages and Libraries: The Revised Report
   Kennaway R, 1996, J SYMB COMPUT, V21, P15, DOI 10.1006/jsco.1996.0002
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   Korp M, 2009, LECT NOTES COMPUT SC, V5595, P295, DOI 10.1007/978-3-642-02348-4_21
   Lee Chin Soon, 2001, PRINCIPLES PROGRAMMI, P81, DOI [10.1145/360204.360210, DOI 10.1145/360204.360210]
   Lloyd J.W., 1995, P ILPS 95, P465
   LUCAS S., 1998, J FUNCTIONAL LOGIC P, V1, P1
   Manolios P, 2006, LECT NOTES COMPUT SC, V4144, P401, DOI 10.1007/11817963_36
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Otto C, 2010, LEIBNIZ INT PR INFOR, V6, P259, DOI 10.4230/LIPIcs.RTA.2010.259
   PANITZ SE, 1997, THESIS U FRANKFURT
   PANITZ SE, 1997, LNCS, V1302, P345
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   RAFFELSIEPER M, 2007, THESIS RWTH AACHEN
   RAFFELSIEPER M, 2009, P INT WORKSH RED STR, V237, P3
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Schneider-Kamp P, 2010, THEOR PRACT LOG PROG, V10, P365, DOI 10.1017/S1471068410000165
   Schneider-Kamp P, 2009, ACM T COMPUT LOG, V11, DOI 10.1145/1614431.1614433
   Sereni D, 2005, LECT NOTES COMPUT SC, V3780, P281
   Sereni D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P71
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   SWIDERSKI S, 2005, THESIS RWTH AACHEN
   TELFORD A, 2000, J UNIVERS COMPUT SCI, V6, P474
   Thiemann R, 2005, APPL ALGEBR ENG COMM, V16, P229, DOI 10.1007/s00200-005-0179-7
   Thiemann R, 2009, LECT NOTES COMPUT SC, V5404, P533
   WALTHER C, 1994, ARTIF INTELL, V71, P101, DOI 10.1016/0004-3702(94)90063-9
   XI H, 2002, ARTIF INTELL, V15, P91
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
   Zantema Hans., 2003, TERM REWRITING SYSTE, P181
NR 64
TC 33
Z9 34
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2011
VL 33
IS 2
AR 7
DI 10.1145/1890028.1890030
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 732AO
UT WOS:000288153000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Sangiorgi, D
AF Sangiorgi, Davide
TI On the Origins of Bisimulation and Coinduction
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Review
DE Theory; Verification; Bisimulation; coinduction; fixed points; greatest
   fixed points; history
ID SET-THEORY; ALGOL 60
AB The origins of bisimulation and bisimilarity are examined, in the three fields where they have been independently discovered: Computer Science, Philosophical Logic (precisely, Modal Logic), Set Theory.
   Bisimulation and bisimilarity are coinductive notions, and as such are intimately related to fixed points, in particular greatest fixed points. Therefore also the appearance of coinduction and fixed points is discussed, though in this case only within Computer Science. The paper ends with some historical remarks on the main fixed-point theorems (such as Knaster-Tarski) that underpin the fixed-point theory presented.
C1 Univ Bologna, Dipartimento Sci Informaz, I-40126 Bologna, Italy.
C3 University of Bologna
RP Sangiorgi, D (corresponding author), Univ Bologna, Dipartimento Sci Informaz, Mura Anteo Zamboni 7, I-40126 Bologna, Italy.
EM davide.sangiorgi@cs.unibo.it
CR Aczel P., 1988, CSLI LECT NOTES
   ACZEL P, 1993, LECT NOTES COMPUTER, V802, P1
   ALVAREZ C, 1991, LECT NOTES COMPUT SC, V505, P288
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   [Anonymous], 1969, Machine intelligence
   [Anonymous], 1971, FILOSOFSKA STUDIER
   [Anonymous], 1974, Mathematical Theory of Computation
   [Anonymous], 1971, IJCAI
   [Anonymous], 1968, ACM Monograph Series
   [Anonymous], THEORY COMPUTING MAC
   [Anonymous], 1972, Toposes, algebraic geometry and logic, DOI DOI 10.1007/BFB0073967
   [Anonymous], 1972, IEEE 13 ANN S SWITCH, DOI [10.1109/SWAT.1972.29, DOI 10.1109/SWAT.1972.29]
   [Anonymous], 2007, Reactive Systems: Modelling, Specification and Verification
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   [Anonymous], 1974, PROC IFIP C 74
   [Anonymous], 2001, MODAL LOGIC
   BAKKER JWD, 1975, MATH CTR TRACTS, V63, P3
   BAKKER JWD, 1971, MATH CTR TRACTS, V24
   BAKKER JWD, 1973, P IRIA S AUT LANG PR, P167
   Balcazar J., 1992, Formal Aspects of Computing, V4, P638, DOI 10.1007/BF03180566
   Barwise J., 1987, LIAR ESSAY TRUTH CIR
   Barwise J., 1996, VICIOUS CIRCLES MATH
   BARWISE KJ, 1971, J SYMBOLIC LOGIC, V36, P108, DOI 10.2307/2271519
   BEKIC H, 1969, DEFINABLE OPER UNPUB
   Bernays P., 1954, J SYMBOLIC LOGIC, V19, P81, DOI DOI 10.2307/2268864
   BIRKHOFF G, 1948, AM MATH SOC C PUBLIC, V25
   BLIKLE A, 1977, 6 S MATH FDN COMP SC, V53, P17
   Boffa M., 1969, B SOC MATH BELG, V31, P16
   BOFFA M, 1968, B SOC MATH BELG, V20, P3
   BOFFA M, 1972, ACAD ROY BELG, V60, P1
   BOURBAKI N, 1950, ARCH MATH, V2, P434
   BRAND D, 1978, RC7206
   Brandt M, 1997, LECT NOTES COMPUT SC, V1210, P63
   BURGE WH, 1975, IBM J RES DEV, V19, P12, DOI 10.1147/rd.191.0012
   CADIOU JM, 1972, THESIS STANFORD U
   CLARKE EM, 1977, FOCS IEEE, P18, DOI DOI 10.1109/SFCS.1977.25
   Coquand T., 1993, LECT NOTES COMPUTER, P62, DOI DOI 10.1007/3-540-58085-9
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   DEJONGH DHJ, 1966, INDAGATIONES MATH, V28, P317
   DEROEVER WP, 1977, LECTURE NOTES COMPUT, V52, P412
   DEVIDE V, 1963, FUND MATH, V53, P147
   Ehrenfeucht A., 1960, FUND MATH, V49, P129, DOI 10.4064/fm-49-2-129-141
   Finsler P, 1926, MATH Z, V25, P683, DOI 10.1007/BF01283862
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Forti M., 1983, Annali della Scuola Normale Superiore di Pisa, Classe di Scienze 4e serie, V10, P493
   Fraenkel A, 1922, MATH ANN, V86, P230, DOI 10.1007/BF01457986
   FRAISSE R, 1953, PUBLICATIONS SCI U A, V1, P35
   FRIEDMAN H, 1973, J SYMBOLIC LOGIC, V38, P315, DOI 10.2307/2272068
   GIARRATANA V, 1976, LECT NOTES COMPUT SC, V45, P576
   GIMENEZ E, 1996, THESIS LAB INFORM PA
   GINSBURG S, 1962, J ACM, V9, P350, DOI 10.1145/321127.321132
   GOLDBLATT R, 1989, ANN PURE APPL LOGIC, V44, P173, DOI 10.1016/0168-0072(89)90032-8
   GORDEEV L, 1982, LEJ BROUWER CENTENAR, P123
   GOURLAY JS, 1979, LECT NOTES COMPUTER, V70, P51
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Hennessy Matthew, 1980, LNCS, V85, P299, DOI DOI 10.1007/3-540-10003-2_79
   HINNION R, 1986, Z MATH LOGIK, V32, P51, DOI 10.1002/malq.19860320107
   HINNION R, 1980, CR ACAD SCI A MATH, V290, P677
   HINNION R, 1981, B SOC MATH BELG, V33, P173
   Hitchcock P., 1973, Proceedings of a Symposium on Automata, Languages and Programming, P225
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   HONSELL F, 1981, THESIS U PISA
   Huffman D.A., 1954, J. Franklin Inst, V257, P275
   Huffman David., 1954, Journal of the Franklin Institute, V257, P161, DOI DOI 10.1016/0016-0032(54)90574-8
   IMMERMAN N, 1982, J COMPUT SYST SCI, V25, P76, DOI 10.1016/0022-0000(82)90011-3
   Jacobs Bart., 1996, B EATCS, V62, P222
   JENSEN K, 1980, LECT NOTES COMPUTER, V88, P348
   JONES CB, 1984, LECT NOTES COMPUTER, V177
   KANELLAKIS PC, 1990, INFORM COMPUT, V86, P43, DOI 10.1016/0890-5401(90)90025-D
   Kantorvitch L, 1939, ACTA MATH-DJURSHOLM, V71, P63, DOI 10.1007/BF02547750
   KLEENE SC, 1970, 20 ANN S FDN COMP SC, P371
   Kleene SC., 1952, Introduction to metamathematics
   Knaster B., 1928, Ann. Soc. Polon. Math., V6, P133
   Kwong Y. S., 1977, Theoretical Computer Science, V5, P25, DOI 10.1016/0304-3975(77)90041-X
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   LANDIN PJ, 1965, COMMUN ACM, V8, P89, DOI 10.1145/363744.363749
   LANDIN PJ, 1965, COMMUN ACM, V8, P158, DOI 10.1145/363791.363804
   LANDIN PJ, 1969, MACH INTELL, V5, P99
   LASSEZ JL, 1982, INFORM PROCESS LETT, V14, P112, DOI 10.1016/0020-0190(82)90065-5
   Manna Z., 1969, J. Comput. System Sci., V3, P119
   MAZURKIEWICZ A, 1973, ALGROYTMY, V11, P5
   MAZURKIEWICZ AW, 1971, INFORM CONTROL, V18, P220, DOI 10.1016/S0019-9958(71)90355-X
   MCCARTHY J, 1963, P IFIP C, V62, P21
   MCCARTHY J, 1961, P WEST JOINT COMP C, V19, P225
   Milner R., 1989, Communication and concurrency
   MILNER R, 1991, THEOR COMPUT SCI, V87, P209, DOI 10.1016/0304-3975(91)90033-X
   MILNER R, 1971, MEMO COMPUTERS LOGIC, V17
   Milner R., 1980, A calculus of communicating systems
   MILNER R, 1970, MEMO COMPUTERS LOGIC, V14
   MIRIMANOFF D, 1917, ENSEIGNEMENT MATH, V19, P209
   MIRIMANOFF D, 1920, ENSEIGNEMENT MATH, V21, P29
   Mirimanoff Dimitri., 1917, LENSEIGNEMENT MATH M, V19, P37, DOI [10.5169/seals-17315, DOI 10.5169/SEALS-17315]
   Moore E.F., 1956, Automata studies, P129
   Morris James Hiram, 1968, Ph.D. thesis
   Moschovakis Y. N, 1974, STUDIES LOGIC FDN MA, V77
   Nerode Anil, 1958, Proceedings of the American Mathematical Society, V9, P541, DOI [10.1090/S0002-9939-1958-0135681-9, DOI 10.1090/S0002-9939-1958-0135681-9]
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   PARK D, 1981, B EATCS, V14, P78
   PARK D, 1970, CSRR013 DEP COMP SCI
   PARK D, 1979, LECT NOTES COMPUTER, P504
   PASINI A, 1974, REND SEMIN MAT U PAD, V51, P167
   Pons D, 2007, LECT NOTES COMPUT SC, V4807, P351
   Reynolds J. C., 1993, LISP and Symbolic Computation, V6, P233, DOI 10.1007/BF01019459
   Rogers H., 1967, THEORY RECURSIVE FUN
   Russell B, 1908, AM J MATH, V30, P222, DOI 10.2307/2369948
   Russell B., 1903, The principles of mathematics
   Russell B., 1910, Principia Mathematica
   Russell Bertrand., 1912, PRINCIPIA MATH
   RUTTEN JJM, 1993, LECT NOTES COMPUTER, V666, P477
   SANGIORGI D, 2001, PI CALCULUS THEORY
   Sangiorgi D, 2007, IEEE S LOG, P293, DOI 10.1109/LICS.2007.17
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   SCOTT D, 1960, 1960 STANF C L UNPUB
   SCOTT D, 1969, CONSTRUCTION M UNPUB
   SCOTT D, 1972, LECT NOTES MATH, V188, P311
   SCOTT D, 1969, MODELS LAMDA C UNPUB
   SCOTT D, 1969, TYPE THEORETICAL CUC
   SCOTT D, 1969, THEORY PROGRAMS
   SCOTT DS, 1993, THEOR COMPUT SCI, V121, P411, DOI 10.1016/0304-3975(93)90095-B
   SEGERBERG K, 1970, THEORIA, V36, P301
   SEGERBERG K, 1968, THEORIA, V34, P7
   SKOLEM T, 1923, P 5 SCAND MATH C HEL, P217
   SNAGIORGI D, 1998, J MATH STRUCTURES CO, V8, P447
   Specker E., 1957, Zeitschrift fur mathematische Logik und Grundlagen der Mathematik, V3, P173, DOI [10.1002/malq.19570031302, DOI 10.1002/MALQ.19570031302]
   TARSKI A, 1949, B AM MATH SOC, V55, P1051
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   THOMAS W, 1993, LECT NOTES COMPUTER, V668, P559
   THOMASON SK, 1972, J SYMBOLIC LOGIC, V37, P150, DOI 10.2307/2272558
   Turi D, 1997, IEEE S LOG, P280, DOI 10.1109/LICS.1997.614955
   VANGLABBEEK RJ, 1990, LECT NOTES COMPUT SC, V458, P278
   VONBENTHEM J, 1976, THESIS U AMSTERDAM
   VONBENTHEM J, 1984, HDB PHILOS LOGIC, V2, P167
   VONBENTHEM J, 1983, MODAL LOGIC CLASSICA
   VONGLABBEEK RJ, 1993, LECT NOTES COMPUTER, V715, P66
   VONHEIJENOORT J, 1967, FREGE GODEL SOURCE B
   Whitehead AlfredNorth., 1913, Principia Mathematica, V2nd
   Zermelo E, 1908, MATH ANN, V65, P261, DOI 10.1007/BF01449999
NR 137
TC 87
Z9 96
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2009
VL 31
IS 4
AR 15
DI 10.1145/1516507.1516510
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 453SZ
UT WOS:000266633900003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU O'Hearn, PW
   Yang, H
   Reynolds, JC
AF O'Hearn, Peter W.
   Yang, Hongseok
   Reynolds, John C.
TI Separation and Information Hiding
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Verification; Separation logic; modularity; resource
   protection
ID SYSTEM
AB We investigate proof rules for information hiding, using the formalism of separation logic. In essence, we use the separating conjunction to partition the internal resources of a module from those accessed by the module's clients. The use of a logical connective gives rise to a form of dynamic partitioning, where we track the transfer of ownership of portions of heap storage between program components. It also enables us to enforce separation in the presence of mutable data structures with embedded addresses that may be aliased.
C1 [O'Hearn, Peter W.; Yang, Hongseok] Univ London, London WC1E 7HU, England.
   [Reynolds, John C.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 University of London; Carnegie Mellon University
RP O'Hearn, PW (corresponding author), Univ London, London WC1E 7HU, England.
EM ohearn@dsc.qmul.ac.uk
RI Yang, Hongseok/AAC-4471-2020; Yang, Hongseok/M-8791-2017
FU EPSRC; Royal Society Wolfson Research Merit Award; National Science
   Foundation [CCR-0204242]; Basic Research in Computer Science Centre of
   the Danish National Research Foundation; Basic Research Program of the
   Korea Science & Engineering Foundation.
FX P. W. O'Hearn was supported by the EPSRC and by a Royal Society Wolfson
   Research Merit Award. J. C. Reynolds was partially supported by an EPSRC
   Visiting Fellowship at Queen Mary, by National Science Foundation Grant
   CCR-0204242, and by the Basic Research in Computer Science
   (http://www.brics.dk/) Centre of the Danish National Research
   Foundation. H. Yang was supported by the EPSRC and by the Basic Research
   Program of the Korea Science & Engineering Foundation. Author's address:
   P. W. O'Hearn; email: ohearn@dsc.qmul.ac.uk.
CR Ahmed A, 2003, IEEE S LOG, P33, DOI 10.1109/LICS.2003.1210043
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   [Anonymous], 2001, P CSL 01
   BANERJEE A, 2005, P 19 EUR C OBJ OR PR
   Benton N, 2006, LECT NOTES COMPUT SC, V4207, P182
   Biering B, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275499
   BIRKEDAL L, 2005, P 20 ANN IEEE S LOG
   BIRKEDAL L, 2007, P 10 INT C FDN SOFTW
   Bornat R., 2005, ACM S PRINC PROGR LA, P59
   BORNAT R, 2000, MATH PROGRAM CONSTRU
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Clarke D. G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P53
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   GROTHOFF C, 2001, P 16 ACM SIGPLAN C O, P241
   Hansen P.B., 2002, ORIGIN CONCURRENT PR
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hoare C. A. R., 1971, Lecture notes in mathematics CLXXXVIII. Symposium on semantics of algorithmic languages, P102
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   HOARE CAR, 1972, OPERATING SYSTEMS TE
   HOGG J, 1991, P 6 C OBJ OR PROGR S
   Isthiaq S., 2001, 28 POPL, P36
   Kernighan B.W., 1988, The C Programming Language
   KRISHNASWAMI N, 2007, P 9 WORKSH FORM TECH
   LEINO K, 2004, P 18 EUR C OBJ OR PR
   Leino KRM, 2002, ACM T PROGR LANG SYS, V24, P491, DOI 10.1145/570886.570888
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   MORGAN C, 1988, ACM T PROGR LANG SYS, V10, P403, DOI 10.1145/44501.44503
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   NANEVSKI A, 2006, P 11 ACM SIGPLAN INT, P62, DOI [DOI 10.1145/1159803.1159812, 10.1145/1159803.1159812]
   NAUMANN DA, 2004, P 19 ANN IEEE S LOG
   NAUMANN DA, 2004, MATH PROGRAM CONSTRU
   Naumann DA, 2007, FORM ASP COMPUT, V19, P205, DOI 10.1007/s00165-006-0020-5
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   OHEARN PW, 2004, POPL, P268
   PARKINSON M, 2006, P 21 ANN IEEE S LOG
   PARKINSON M, 2005, THESIS CAMBRIDGE U C
   PARKINSON M, 2005, P 32 ACM S PRINC PRO, P59
   PARKINSON M, 2007, 3 INT WORKSH AL CONF
   Parnas D.L., 1972, COMMUN ACM, V15, P12
   PARNAS DL, 1972, P IFIP C 1971, V1, P339
   PETERSON R, 2008, P 17 EUR S PROGR ESO
   Plotkin G. D., 1983, PISA NOTES DOMAIN TH
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   REYNOLDS JC, 1983, P INT FED INF PROC I
   SCHWARZ J, 1977, COMPUT J, V20, P151, DOI 10.1093/comjnl/20.2.151
   SCHWARZ JS, 1974, THESIS SYRACUSE U SY
   [No title captured]
NR 47
TC 70
Z9 80
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2009
VL 31
IS 3
AR 11
DI 10.1145/1498926.1498929
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 453SY
UT WOS:000266633700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Karkare, B
   Khedker, UP
AF Karkare, Bageshri
   Khedker, Uday P.
TI An improved bound for call strings based interprocedural analysis of bit
   vector frameworks
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; theory; interprocedural data flow analysis; bit
   vector data flow frameworks
AB Interprocedural data flow analysis extends the scope of analysis across procedure boundaries in search of increased optimization opportunities. Call strings based approach is a general approach for performing flow and context sensitive interprocedural analysis. It maintains a history of calls along with the data flow information in the form of call strings, which are sequences of unfinished calls. Recursive programs may need infinite call strings for interprocedural data flow analysis. For bit vector frameworks this method is believed to require all call strings of lengths up to 3K, where K is the maximum number of distinct call sites in any call chain.
   We combine the nature of information flows in bit-vector data flow analysis with the structure of interprocedurally valid paths to bound the call strings. Instead of bounding the length of call strings, we bound the number of occurrences of any call site in a call string. We show that the call strings in which a call site appears at most three times, are sufficient for convergence on interprocedural maximum fixed point solution. Though this results in the same worst case length of call strings, it does not require constructing all call strings up to length 3K. Our empirical measurements on recursive programs show that our bound reduces the lengths and the number of call strings, and hence the analysis time, significantly.
C1 Indian Inst Technol, Bombay, Maharashtra, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay
RP Khedker, UP (corresponding author), Indian Inst Technol, Bombay, Maharashtra, India.
EM uday@cse.iitb.ac.in
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   Alt M., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P33
   ALT M, 1995, 1095 U SAARL
   [Anonymous], 1977, Flow Analysis of Computer Programs
   CALLAHAN D, 1986, SIGPLAN NOTICES, V21, P152, DOI 10.1145/13310.13327
   EMAMI M, 1994, P ACM SIGPLAN 94 C P, P242
   GRAHAM SL, 1975, P ACM SIGPLAN SIGACT, P22
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   KANADE A, 2005, APLAS, P298
   Khedker UP, 2003, COMPILER DESIGN HANDBOOK, P1
   KHEDKER UP, 1994, ACM T PROGR LANG SYS, V16, P1472, DOI 10.1145/186025.186043
   Kildall Gary A., 1973, Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'73, P194
   Muchnick S., 1997, ADV COMPILER DESIGN
   Myers EugeneM., 1981, P 8 ACM SIGPLAN SIGA, P219, DOI 10.1145/567532.567556
   PANDE H, 1992, LOSTTR193 RES RUTG U
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   Whaley John., 2004, P ACM SIGPLAN 2004 C
NR 18
TC 14
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 38
DI 10.1145/1286821.1286829
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500009
OA Bronze
DA 2024-07-18
ER

PT J
AU Tardieu, O
AF Tardieu, Olivier
TI A deterministic logical semantics for pure esterel
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; synchronous languages; structural operational
   semantics
AB Esterel is a synchronous design language for the specification of reactive systems. There exist two main semantics for Esterel. On the one hand, the logical behavioral semantics provides a simple and compact formalization of the behavior of programs using SOS rules. But it does not ensure deterministic deadlock-free executions, as it may define zero, one, or many possible behaviors for a given program and input sequence. Since nondeterministic programs have to be rejected by compilers, this means that it defines behaviors for incorrect programs, which is awkward. On the other hand, the constructive semantics is deterministic (amongst other properties) but at the expense of a much more complex formalism. In this work, we build and thoroughly analyze a new deterministic semantics for Esterel that retains the simplicity of the logical behavioral semantics from which it derives. It defines, at most, one behavior per program and input sequence. We further extend this semantics with the ability to deal with errors so that incorrect programs are no longer (negatively) characterized by a lack of behavior, but (positively) by the existence of an incorrect behavior. In our view, this new semantics, with or without explicit errors, provides a better framework for formal and automated reasoning about Esterel programs.
C1 Columbia Univ, Dept Comp Sci, New York, NY 10027 USA.
C3 Columbia University
RP Tardieu, O (corresponding author), Columbia Univ, Dept Comp Sci, 2960 Broadway, New York, NY 10027 USA.
EM tardieu@cs.columbia.edu
CR [Anonymous], 1981, Technical Report DAIMI FN-19
   BENVENISTE A, 1991, P IEEE, V79, P1270, DOI 10.1109/5.97297
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Berry G, 2000, FOUNDAT COMPUT, P425
   BERRY G, 1985, LECT NOTES COMPUT SC, V197, P389
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   BERRY G, 2000, ESTEREL LANGUAGE PRI, V5, P91
   BERRY G, 1993, LECT NOTES COMPUTER, V761, P72
   Berry Gerard, 1999, The constructive semantics of pure Esterel.
   BOUSSINOT F, 1991, P IEEE, V79, P1293, DOI 10.1109/5.97299
   EDWARDS SA, 2004, P SYNCHR LANG APPL P
   Edwards StephenA., 2000, LANGUAGES DIGITAL EM
   Gonthier G., 1988, Semantiques et modeles d'execution des langages reactifs synchrones
   GROOTE JF, 1993, THEOR COMPUT SCI, V118, P263, DOI 10.1016/0304-3975(93)90111-6
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Halbwachs Nicolas., 1993, Synchronous Programming of Reactive Systems
   *INRIA ENSMP ARMIN, 2000, EST V5 92 COMP
   LEGUERNIC P, 1991, P IEEE, V79, P1321, DOI 10.1109/5.97301
   MALIK S, 1993, 1993 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN - DIGEST OF TECHNICAL PAPERS, P618, DOI 10.1109/ICCAD.1993.580150
   Milner R., 1989, Communication and concurrency
   Potop-Butucaru Dumitru, 2002, THESIS ECOLE MINES P THESIS ECOLE MINES P
   Tardieu O, 2003, LECT NOTES COMPUT SC, V2694, P91
   TARDIEU O, 2004, THESIS ECOLE MINES P
NR 23
TC 13
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2007
VL 29
IS 2
AR 8
DI 10.1145/1216374.1216376
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 161KL
UT WOS:000246013700002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Podelski, A
   Rybalchenko, A
AF Podelski, Andreas
   Rybalchenko, Andrey
TI Transition predicate abstraction and fair termination
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE software model checking; transition predicate abstraction; fair
   termination; liveness
ID LINEAR RANKING; VERIFICATION
AB Predicate abstraction is the basis of many program verification tools. Until now, the only known way to overcome the inherent limitation of predicate abstraction to safety properties was to manually annotate the finite-state abstraction of a program. We extend predicate abstraction to transition predicate abstraction. Transition predicate abstraction goes beyond the idea of finite abstract-state programs (and checking the absence of loops). Instead, our abstraction algorithm transforms a program into a finite abstract-transition program. Then a second algorithm checks fair termination. The two algorithms together yield an automated method for the verification of liveness properties under full fairness assumptions (impartiality; justice, and compassion). In summary, we exhibit principles that extend the applicability of predicate abstraction-based program verification to the full set of temporal properties.
C1 Max Planck Inst Informat, Saarbrucken, Germany.
   Ecole Polytech Fed Lausanne, Max Planck Inst Informat, Saarbrucken, Germany.
C3 Max Planck Society; Max Planck Society
RP Podelski, A (corresponding author), Max Planck Inst Informat, Saarbrucken, Germany.
EM podelski@informatik.uni-freiburg.de; andrey.rybalchenko@epfl.ch
CR [Anonymous], 2002, POPL
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], 1986, Fairness
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], P INT C LOG METH PHI
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   BAADER F, 1998, TERM REWRITING THAT
   Ball T, 2005, LECT NOTES COMPUT SC, V3657, P1
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Ball Thomas., 2001, Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science, V2031, P268, DOI [DOI 10.1007/3-540-45319-9_19, 10.1007/3-540-45319-9_19]
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Browne I.A, 1995, LECT NOTES COMPUTER, V1026, P484
   Chaki S, 2003, PROC INT CONF SOFTW, P385, DOI 10.1109/ICSE.2003.1201217
   CODISH M, 2003, 6 INT WORKSH TERM SP
   COLON M, 2001, LNCS, V2031, P67, DOI DOI 10.1007/3-540-45319-96
   COLON M, 1988, LECT NOTES COMPUTER, V1427, P293
   Cook B, 2005, LECT NOTES COMPUT SC, V3672, P87
   COOK B, 2006, PLDI 06
   COUSOT P, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P95, DOI 10.1109/ICCL.1994.288389
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Delzanno G., 2001, International Journal on Software Tools for Technology Transfer, V3, P250, DOI 10.1007/s100090100049
   Dershowitz N, 2001, APPL ALGEBR ENG COMM, V12, P117, DOI 10.1007/s002000100065
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Henzinger ThomasA., 2002, Proc. of the Symposium on Principles of Programming Languages. POPL, P58
   Kesten Y, 2001, J COMPUT SYST SCI, V62, P668, DOI 10.1006/jcss.2000.1744
   Kesten Y, 2000, INFORM COMPUT, V163, P203, DOI 10.1006/inco.2000.3000
   Klarlund N., 1992, Proceedings of the Eleventh Annual ACM Symposium on Principles of Distributed Computing, P229, DOI 10.1145/135419.135462
   Lahiri SK, 2003, LECT NOTES COMPUT SC, V2725, P141
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   MANNA Z, 1996, UNPUB TEMPORAL VERIF
   MERZ S, 1997, LECT NOTES COMPUTER, V1345, P32
   Pnueli A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P107
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Podelski A., 2004, LICS 2004
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   SAGIV Y, 1991, LOGIC PROGRAMM, P518
   SIPMA HB, 1996, LNCS, V1102, P208
   Tiwari A, 2004, LECT NOTES COMPUT SC, V3114, P70
   URIBB T, 1999, THESIS STANFORD U ST
   VARDI MY, 1991, ANN PURE APPL LOGIC, V51, P79, DOI 10.1016/0168-0072(91)90066-U
   Yahav E, 2003, LECT NOTES COMPUT SC, V2618, P204
   Yahav E, 2001, ACM SIGPLAN NOTICES, V36, P27, DOI 10.1145/373243.360206
   [No title captured]
NR 43
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2007
VL 29
IS 3
AR 15
DI 10.1145/1232420.1232422
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 176GF
UT WOS:000247072100002
OA Bronze
DA 2024-07-18
ER

PT J
AU Hailperin, M
AF Hailperin, M
TI Comparing conservative coalescing criteria
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE copy propagation; graph coloring; register allocation; register
   coalescing
AB Graph-coloring register allocators can eliminate copy instructions from a program by coalescing the interference graph nodes corresponding to the source and destination. Briggs showed that by limiting coalescing to those situations that he dubbed "conservative," it could be prevented from causing spilling, that is, a situation where the allocator fails to assign a register to each live range. George and Appel adopted Briggs's conservativeness criterion in general, but provided an alternative criterion (the George test) to use in those cases where one of the nodes has been "precolored," that is, preassigned a specific register. They motivated this alternative criterion by efficiency considerations, and provided no indication of the relative power of the two criteria. Thus it remained an open question whether the efficiency had been bought at the expense of reduced coalescing. Their implementation also used a limited version of the Briggs test, in place of the original, full version, without any comment on the impact of this substitution. In this article, we also present an analogously limited version of the George test.
   Thus we are now confronted with four different criteria for conservative coalescing: the full and limited Briggs tests and the full and limited George tests. We present a number of theorems characterizing the relative power of these different criteria, and a number of theorems characterizing the form of safety that each achieves. For example, we show that for coalescing with precolored nodes, the full George criterion is strictly more powerful than the full Briggs criterion, while offering an equally strong safety guarantee. Thus no coalesces are lost through George and Appel's introduction of the George test, and some can be gained without sacrificing safety.
   We also show that George and Appel's limited version of the Briggs test is probably undesirable. Although a slightly stronger safety result applies to it than to the full Briggs test, this comes at the expense of eliminating all coalesces that can reduce spilling.
C1 Gustavus Adolphus Coll, St Peter, MN 56082 USA.
C3 Gustavus Adolphus College
RP Hailperin, M (corresponding author), Gustavus Adolphus Coll, 800 W Coll Ave, St Peter, MN 56082 USA.
EM max@gustavus.edu
CR [Anonymous], 1992, THESIS RICE U HOUSTO
   [Anonymous], 1982, SIGPLAN Not, DOI DOI 10.1145/872726.806984
   Appel A.W., 2002, MODERN COMPILER IMPL, V2nd
   BRIGGS P, 1994, ACM T PROGR LANG SYS, V16, P428, DOI 10.1145/177492.177575
   BRIGGS P, 1993, ILOC REGISTER ALLOCA
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   George L, 1996, ACM T PROGR LANG SYS, V18, P300, DOI 10.1145/229542.229546
   Park JY, 1998, 1998 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P196, DOI 10.1109/PACT.1998.727246
   VEGDAHL SR, 1999, P ACM SIGPLAN 1999 C, P150
NR 9
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2005
VL 27
IS 3
BP 571
EP 582
DI 10.1145/1065887.1065894
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 937OF
UT WOS:000229934700007
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ball, T
   Millstein, T
   Rajamani, SK
AF Ball, T
   Millstein, T
   Rajamani, SK
TI Polymorphic predicate abstraction
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; reliability; verification; software model checking;
   predicate abstraction; polymorphism
ID MODEL CHECKER
AB Predicate abstraction is a technique for creating abstract models of software that are amenable to model checking algorithms. We show how polymorphism, a well-known concept in programming languages and program analysis, can be incorporated in a predicate abstraction algorithm for C programs. The use of polymorphism in predicates, via the introduction of symbolic names for values, allows us to model the effect of a procedure independent of its calling contexts. Therefore, we can safely and precisely abstract a procedure once and then reuse this abstraction across multiple calls and multiple applications containing the procedure. Polymorphism also enables us to handle programs that need to be analyzed in an open environment, for all possible callers. We have proved that our algorithm is sound and have implemented it in the C2BP tool as part of the SLAM software model checking toolkit.
C1 Microsoft Corp, Redmond, WA 98052 USA.
   Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.
C3 Microsoft; University of California System; University of California Los
   Angeles
RP Microsoft Corp, 1 Microsoft Way, Redmond, WA 98052 USA.
EM tball@microsoft.com; todd@cs.ucla.edu; sriram@microsoft.com
CR [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   [Anonymous], 2002, POPL
   [Anonymous], 2001, P ACM SIGPLAN 2001 C, DOI DOI 10.1145/378795.378846
   [Anonymous], LNCS
   [Anonymous], LNCS
   [Anonymous], 1981, CSL8110 XER PAL ALT
   [Anonymous], LNCS
   [Anonymous], 2003, Technical Report HPL-2003-148
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2009, P 30 ACM SIGPLAN C P
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   BALL T, 2002, MSRTR200209
   Ball Thomas., 2001, Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science, V2031, P268, DOI [DOI 10.1007/3-540-45319-9_19, 10.1007/3-540-45319-9_19]
   Ball VE, 2002, STUD PRODUCT EFF, V2, P1
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Clarke E., 2000, Computer Aided Verification, P154
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DAS M, 2000, P ACM SIGPLAN C PROG, P35
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dwyer MB, 2001, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.2001.919092
   Engler D., 2000, OSDI 00: Operating System Design and Implementation
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Foster JS, 2000, LECT NOTES COMPUT SC, V1824, P175
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   HAVELUND K, 1998, INT J SOFTW TOOLS TE, V2
   Henzinger T. A., 2004, SIGPLAN Notices, V39, P232, DOI 10.1145/982962.964021
   Henzinger ThomasA., 2002, Proc. of the Symposium on Principles of Programming Languages. POPL, P58
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Holzmann GJ, 2000, LECT NOTES COMPUT SC, V1885, P131
   LANDI W, 1992, SIGPLAN NOTICES, V27, P235, DOI 10.1145/143103.143137
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MORRIS JM, 1982, LECT NOTES INT SUMME, P25
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   VISSER W, 2000, FMSP 00 FORMAL METHO, P3
NR 36
TC 17
Z9 19
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2005
VL 27
IS 2
BP 314
EP 343
DI 10.1145/1057387.1057391
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917RK
UT WOS:000228486700004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Jay, CB
AF Jay, CB
TI The pattern calculus
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; constructor calculus; functional programming; generic
   programming; pattern calculus; pattern-matching
ID SHAPE
AB There is a significant class of operations such as mapping that are common to all data structures. The goal of generic programming is to support these operations on arbitrary data types without having to recode for each new type. The pattern calculus and combinatory type system reach this goal by representing each data structure as a combination of names and a finite set of constructors. These can be used to define generic functions by pattern-matching programs in which each pattern has a different type. Evaluation is type-free. Polymorphism is captured by quantifying over type variables that represent unknown structures. A practical type inference algorithm is provided.
C1 Univ Technol Sydney, Broadway, NSW 2007, Australia.
C3 University of Technology Sydney
RP Jay, CB (corresponding author), Univ Technol Sydney, POB 123, Broadway, NSW 2007, Australia.
EM cbj@it.uts.edu.au
CR Abadi M., 1995, Journal of Functional Programming, V5, P111, DOI 10.1017/S095679680000126X
   [Anonymous], 1991, Commentary on Standard ML
   BACKHOUSE R, 1998, WORKSH GEN PROGR MAR
   Barr M., 1990, Category Theory for Computing Science
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   *CAML, 1997, OBJ CAML
   COCKETT JRB, 1992, 9248018 U CALG
   Forest J, 2002, LECT NOTES COMPUT SC, V2378, P174
   FOREST J, 2003, LECT NOTES COMPUTER, V2706
   GIBBONS J, 2003, WORK C GEN PROGR JUL
   Girard J-Y., 1989, TRACTS THEORETICAL C
   Hammond K., 1999, RES DIRECTIONS PARAL
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   Hindley Roger., 1986, Introduction to Combinators and Lambda-Calculus
   Hinze R, 2002, SCI COMPUT PROGRAM, V43, P129, DOI 10.1016/S0167-6423(02)00025-4
   Hinze R., 2000, P 27 ACM SIGPLAN SIG
   JANSSON P, 2000, THESIS CHALMERS U GO
   Jansson P., 1997, POPL 1997, P470
   Jay C. B., 1998, Journal of Functional Programming, V8, P573, DOI 10.1017/S0956796898003128
   Jay CB, 2001, LECT NOTES COMPUT SC, V2044, P217
   Jay CB, 1996, ACM COMPUT SURV, V28, P355, DOI 10.1145/234528.234749
   Jay CB, 1995, SCI COMPUT PROGRAM, V25, P251, DOI 10.1016/0167-6423(95)00015-1
   JAY CB, 1994, LECT NOTES COMPUTER, V788, P302
   JEURING J, 2000, PUBLICATION UTRECHT
   Kesner D, 1996, INFORM COMPUT, V124, P32, DOI 10.1006/inco.1996.0004
   KLOP J, 1980, TRACTS MATH CTR AMST, V129
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   [No title captured]
NR 29
TC 25
Z9 27
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2004
VL 26
IS 6
BP 911
EP 937
DI 10.1145/1034774.1034775
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 876FA
UT WOS:000225480700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Jeffery, CL
AF Jeffery, CL
TI Generating LR syntax error messages from examples
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; syntax error messages; LR parsers
ID COMPILER; SYSTEM
AB LR parser generators are powerful and well-understood, but the parsers they generate are not suited to provide good error messages. Many compilers incur extensive modifications to the source grammar to produce useful syntax error messages. Interpreting the parse state ( and input token) at the time of error is a nonintrusive alternative that does not entangle the error recovery mechanism in error message production. Unfortunately, every change to the grammar may significantly alter the mapping from parse states to diagnostic messages, creating a maintenance problem.
   Merr is a tool that allows a compiler writer to associate diagnostic messages with syntax errors by example, avoiding the need to add error productions to the grammar or interpret integer parse states. From a specification of errors and messages, Merr runs the compiler on each example error to obtain the relevant parse state and input token, and generates a yyerror() function that maps parse states and input tokens to diagnostic messages. Merr enables useful syntax error messages in LR-based compilers in a manner that is robust in the presence of grammar changes.
C1 New Mexico State Univ, Dept Comp Sci, Las Cruces, NM 88011 USA.
C3 New Mexico State University
RP Jeffery, CL (corresponding author), New Mexico State Univ, Dept Comp Sci, Box 30001 MSC CS, Las Cruces, NM 88011 USA.
CR [Anonymous], 1986, Efficient parsing for natural language
   BROWN PJ, 1983, COMMUN ACM, V26, P246, DOI 10.1145/2163.358083
   CONWAY RW, 1973, COMMUN ACM, V16, P169, DOI 10.1145/361972.361992
   *GNU PROJ, 2001, GNU C COMP SOURC DIS
   GRAHAM SL, 1979, ACM SIGPLAN NOTICES, V14, P168
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   Griswold R.E., 1986, The Implementation of the Icon Programming Language
   GRISWOLD RE, 1997, ICON PROGRAMMING LAN
   HEIRICH A, 1989, ERROR REPORTING LR P
   Horning J. J., 1974, Compiler construction, P525
   JOHNSON W., 1986, INTENTION BASED DIAG
   KANTOROWITZ E, 1986, SOFTWARE PRACT EXPER, V16, P627, DOI 10.1002/spe.4380160703
   Levine J.R., 1992, LEX YACC
   Parr T., 2000, ANTLR Reference Manual
   PEREDA R, 2000, 3 UN
   SHNEIDERMAN B, 1982, COMMUN ACM, V25, P610, DOI 10.1145/358628.358639
   SIPPU S, 1983, ACM T PROGR LANG SYS, V5, P656, DOI 10.1145/69575.357232
NR 17
TC 21
Z9 24
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2003
VL 25
IS 5
BP 631
EP 640
DI 10.1145/937563.937566
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720HY
UT WOS:000185256400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Levi, F
   Sangiorgi, D
AF Levi, F
   Sangiorgi, D
TI Mobile safe ambients
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; mobility; interferences; behavioral equivalences
AB Two forms of interferences are individuated in Cardelli and Gordon's Mobile Ambients (MA): plain interferences, which are similar to the interferences one finds in CCS and pi-calculus; and grave interferences, which are more dangerous and may be regarded as programming errors. To control interferences, the MA movement primitives are modified; the resulting calculus is called Mobile Safe Ambients (SA).
   The modification also has computational significance. In the MA interaction rules, an ambient may enter, exit, or open another ambient. The second ambient undergoes the action; it has no control on when the. action takes place. In SA this is rectified: any movement takes place only if both participants agree.
   Existing type systems for MA can be easily adapted to SA. The type systems for controlling mobility, however, appear to be more powerful in SA, in that (i) type systems for MA may give more precise information when transplanted onto SA, and (ii) new type systems may be defined. Two type systems are presented that remove all grave interferences.
   Other advantages of SA are a useful algebraic theory; programs sometimes more robust (they require milder conditions for correctness) and/or simpler. All these points are illustrated in several examples.
C1 Univ Genoa, Dept Comp Sci DISI, I-16146 Genoa, Italy.
   Univ Bologna, Dipartimento Sci Informaz, I-40127 Bologna, Italy.
C3 University of Genoa; University of Bologna
RP Univ Genoa, Dept Comp Sci DISI, Via Dodecaneso 35, I-16146 Genoa, Italy.
EM levifran@di.unipi.it; Davide.Sangiorgi@cs.unibo.it
CR AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Amtoft T, 2001, LECT NOTES COMPUT SC, V2028, P206
   BUGLIESI M, 2001, P 28 ANN S PRINC PRO
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CARDELLI L, 1999, MSRTR9911
   CARDELLI L, 1996, HDB COMPUTER SCI ENG
   CARDELLI L, 1999, LNCS, V1644, P230
   CARDELLI L, 1998, UNPUB TECHNICAL ANNE
   CARDELLI L, 1999, P POPL 99, P79
   Degano P, 2000, LECT NOTES COMPUT SC, V1961, P199
   Dezani-Ciancaglini M, 2000, LECT NOTES COMPUT SC, V1961, P215
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   GADDUCCI F, 2001, ELECT NOTES COMPUTER, V45
   Gordon AD, 1999, LECT NOTES COMPUT SC, V1578, P212
   Guan XD, 2001, INFORM PROCESS LETT, V80, P265, DOI 10.1016/S0020-0190(01)00172-7
   Guan Xudong, 2000, P INT C SOFTW THEOR, P377
   HENNESSY M, 1998, P POPL 98, P378
   Kobayashi N., 1996, POPL 1996, 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, Proceedings, P358
   MERRO M, 2002, P 29 ANN S PRINC PRO
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Nielson F, 1999, LECT NOTES COMPUT SC, V1664, P463
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Reynolds JohnC., 1978, Proceedings of the 5th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'78. event-place: Tucson, P39, DOI DOI 10.1145/512760.512766
   SANGIORGI D, 2001, LECT NOTES COMPUTER, V2076
   SANGIORGI D, 1997, LECT NOTES COMPUTER, V1256
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   SEWELL P, 1998, LECT NOTES COMPUTER, V1443
   VITEK J, 1999, LECT NOTES COMPUTER, V1686
   ZIMMER O, 2000, ELECT NOTES COMPUTER, V39
NR 31
TC 72
Z9 75
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2003
VL 25
IS 1
BP 1
EP 69
DI 10.1145/596980.596981
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 637RJ
UT WOS:000180526400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Jia, XD
   Kumar, A
   Tan, G
AF Jia, Xiaodong
   Kumar, Ashish
   Tan, Gang
TI A Derivative-based Parser Generator for Visibly Pushdown Grammars
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Parser generators; formal verification; derivative-based parsing
AB In this article, we present a derivative-based, functional recognizer and parser generator for visibly pushdown grammars. The generated parser accepts ambiguous grammars and produces a parse forest containing all valid parse trees for an input string in linear time. Each parse tree in the forest can then be extracted also in linear time. Besides the parser generator, to allow more flexible forms of the visibly pushdown grammars, we also present a translator that converts a tagged CFG to a visibly pushdown grammar in a sound way, and the parse trees of the tagged CFG are further produced by running the semantic actions embedded in the parse trees of the translated visibly pushdown grammar. The performance of the parser is compared with popular parsing tools, including ANTLR, GNU Bison, and other popular hand-crafted parsers. The correctness and the time complexity of the core parsing algorithm are formally verified in the proof assistant Coq.
C1 [Jia, Xiaodong; Kumar, Ashish; Tan, Gang] Penn State Univ, 201 Old Main, State Coll, PA 16802 USA.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE);
   Pennsylvania State University
RP Jia, XD (corresponding author), Penn State Univ, 201 Old Main, State Coll, PA 16802 USA.
EM xxj34@psu.edu; ashishky36@gmail.com; gtan@psu.edu
OI Jia, Xiaodong/0000-0003-2493-9111; Tan, Gang/0000-0001-6109-6091
FU DARPA research grant [HR0011-19-C-0073]
FX This work was supported by DARPA research grant HR0011-19-C-0073.
CR Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   Alur Rajeev, 2016, NESTED WORDS
   [Anonymous], 2009, LIBXMLJS
   ANTLR, 2014, GRAMM V4
   Barthwal A, 2009, LECT NOTES COMPUT SC, V5502, P160, DOI 10.1007/978-3-642-00590-9_12
   Bernardy JP, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:6)2016
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Cocke J., 1969, Programming Languages and Their Compilers: Preliminary Notes
   Danielsson NA, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P285
   Darragh P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408990
   DeRemer Franklin Lewis, 1969, THESIS MIT
   Dorfman Justin, 2015, AWESOME JSON DATASET
   Dubé D, 2000, ACTA INFORM, V37, P121, DOI 10.1007/s002360000037
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Edelmann R, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1036, DOI 10.1145/3385412.3385992
   Felix, 2010, HTMLPARSER2
   Firsov D, 2014, J LOG ALGEBR METHODS, V83, P459, DOI 10.1016/j.jlamp.2014.09.002
   Free Software Foundation, 2021, GNU BIS
   GoogleChromeLabs, 2019, JSON PARS BENCHM
   Henderson Ian, 2017, OWL
   Henriksen I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360553
   JFlex Team, 2023, US
   Jia Xiaodong, 2021, PROC ACM PROGRAM LAN, V5, P1
   Jourdan JH, 2012, LECT NOTES COMPUT SC, V7211, P397, DOI 10.1007/978-3-642-28869-2_20
   Kasami Tadao., 1965, An efficient recognition and syntax analysis algorithm for context-free languages
   Koprowski A, 2010, LECT NOTES COMPUT SC, V6012, P345, DOI 10.1007/978-3-642-11957-6_19
   Lasser S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P420, DOI 10.1145/3453483.3454053
   Lasser Sam, 2019, 10 INT C INTERACTIVE, V24, P1
   McCarthy Jay, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P144, DOI 10.1007/978-3-319-29604-3_10
   Might M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   NaturalIntelligence, 2017, FAST XML PARS
   Norell Ulf., 2007, PRACTICAL PROGRAMMIN, V32
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Parr T, 2014, ACM SIGPLAN NOTICES, V49, P579, DOI [10.1145/2714064.2660202, 10.1145/2660193.2660202]
   Parr Terence, 2022, ANTLR (ANother Tool for Language Recognition)
   Petsios T, 2017, P IEEE S SECUR PRIV, P615, DOI 10.1109/SP.2017.27
   Ramananandro T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1465
   Ridge Tom, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P103
   Schlueter Isaac Z., 2010, SAX JS
   XimpleWare, 2004, VTD XML BENCHM REP V
   Yip Milo, 2014, NATIVEJSON BENCHMARK
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 43
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2023
VL 45
IS 2
AR 9
DI 10.1145/3591472
PG 68
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA M2WV9
UT WOS:001028843500003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Simpson, A
   Voorneveld, N
AF Simpson, Alex
   Voorneveld, Niels
TI Behavioural Equivalence via Modalities for Algebraic Effects
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 27th European Symposium on Programming (ESOP)
CY APR 16-19, 2018
CL Thessaloniki, GREECE
DE Program equivalence; functional programming; call-by-value; behavioural
   logic; modalities; algebraic effects; applicative bisimilarity; Howe's
   method
ID COMPUTATION; NOTIONS; MONADS; LOGIC
AB The article investigates behavioural equivalence between programs in a call-by-value functional language extended with a signature of (algebraic) effect-triggering operations. Two programs are considered as being behaviourally equivalent if they enjoy the same behavioural properties. To formulate this, we define a logic whose formulas specify behavioural properties. A crucial ingredient is a collection of modalities expressing effect-specific aspects of behaviour. We give a general theory of such modalities. If two conditions, openness and decomposability, are satisfied by the modalities, then the logically specified behavioural equivalence coincides with a modality-defined notion of applicative bisimilarity, which can be proven to be a congruence by a generalisation of Howe's method. We show that the openness and decomposability conditions hold for several examples of algebraic effects: nondeterminism, probabilistic choice, global store, and input/output.
C1 [Simpson, Alex; Voorneveld, Niels] Univ Ljubljana, Jadranska 19, Ljubljana 1000, Slovenia.
C3 University of Ljubljana
RP Simpson, A (corresponding author), Univ Ljubljana, Jadranska 19, Ljubljana 1000, Slovenia.
EM Alex.Simpson@fmf.uni-lj.si; Niels.Voorneveld@fmf.uni-lj.si
OI Voorneveld, Niels/0000-0001-6650-3493
FU Slovenian Research Agency [P1-0294]; Air Force Office of Scientific
   Research [FA9550-17-1-0326]; European Union's Horizon 2020 research and
   innovation programme under the Marie Sklodowska-Curie grant [731143]
FX A. Simpson was supported by the Slovenian Research Agency, research core
   funding No. P1-0294.; N. Voorneveld was supported by the Air Force
   Office of Scientific Research under award number FA9550-17-1-0326. This
   project has received funding from the European Union's Horizon 2020
   research and innovation programme under the Marie Sklodowska-Curie grant
   agreement No 731143.
CR Abadi M, 2009, ACM SIGPLAN NOTICES, V44, P29, DOI 10.1145/1594834.1480887
   ABRAMSKY S, 1991, ANN PURE APPL LOGIC, V51, P1, DOI 10.1016/0168-0072(91)90065-T
   Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   Dal Lago U, 2017, P 32 ANN ACM IEEE S, P1
   Goncharov S, 2013, IEEE S LOG, P273, DOI 10.1109/LICS.2013.33
   Gordon A. D., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P386, DOI 10.1145/237721.237807
   Hasuo I, 2015, THEOR COMPUT SCI, V604, P2, DOI 10.1016/j.tcs.2015.03.047
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Hofmann Martin, 2015, Software, Services and Systems: Essays Dedicated to Martin Wirsing on the Occasion of his Retirement from the Chair of Programming and Software Engineering: LNCS 8950, P62
   Howe D. J., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P198, DOI 10.1109/LICS.1989.39174
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Jacobs Bart, 2016, Introduction to Coalgebra. Towards Mathematics of States and Observations
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Katsumata S, 2011, LECT NOTES COMPUT SC, V6756, P174, DOI 10.1007/978-3-642-22012-8_13
   Koutavas V, 2011, ELECTRON NOTES THEOR, V276, P215, DOI 10.1016/j.entcs.2011.09.023
   Lassen S.B., 1998, HIGHER ORDER OPERATI, P91
   Lassen Soren B., 1998, THESIS
   Levy P. B., 2006, Higher-Order and Symbolic Computation, V19, P377, DOI 10.1007/s10990-006-0480-6
   Levy PB, 2011, LECT NOTES COMPUT SC, V6604, P27, DOI 10.1007/978-3-642-19805-2_3
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lopez Aliaume, 2018, 27 EACSL ANN C COMPU, p29:1, DOI [10.4230/LIPIcs.CSL.2018.29, DOI 10.4230/LIPICS.CSL.2018.29]
   Maillard Kenji, 2019, P 24 ACM SIGPLAN INT
   Malecha G, 2011, J SYMB COMPUT, V46, P95, DOI 10.1016/j.jsc.2010.08.004
   Milner R, 1982, CALCULUS COMMUNICATI
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mossakowski T, 2010, FORM ASP COMPUT, V22, P363, DOI 10.1007/s00165-010-0153-4
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Ong C.-H. L., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P275, DOI 10.1109/LICS.1993.287580
   Park D., 1981, SPRINGER LECT NOTES, V154, P561
   Penninckx W, 2015, LECT NOTES COMPUT SC, V9032, P158, DOI 10.1007/978-3-662-46669-8_7
   Pitts A. M., 1991, IV Higher Order Workshop, Banff 1990. Proceedings of the IV Higher Order Workshop, P162
   Pitts A. M., 2000, Mathematical Structures in Computer Science, V10, P321, DOI 10.1017/S0960129500003066
   Pitts Andrew M., 2005, Advanced Topics in Types and Programming Languages, P245
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G., 2001, Foundations of Software Science and Computation Structures. 4th International Conference, FOSSACS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2030), P1
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5728, P1, DOI 10.1007/978-3-642-03741-2_1
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Sangiorgi D, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890002
   Sangiorgi Davide., 2011, CAMBRIDGE TRACTS THE, DOI [10.1017/CBO9780511792588, DOI 10.1017/CBO9780511792588]
   Sangiorgi Davide, 2011, Introduction to bisimulation and coinduction
   Simpson Alex, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P300, DOI 10.1007/978-3-319-89884-1_11
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Thijs Albert Marchienus, 1996, THESIS
   van Glabbeek Rob, 2010, CSP ALGEBRAIC THEORY, P333, DOI [10.1007/978-1-84882-912-115, DOI 10.1007/978-1-84882-912-115]
   Voorneveld Niels, 2019, P 35 C MATH FDN PROG
NR 51
TC 9
Z9 10
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2020
VL 42
IS 1
SI SI
AR 4
DI 10.1145/3363518
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KJ1TF
UT WOS:000511839200004
OA Green Published, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Solovyev, A
   Baranowski, MS
   Briggs, I
   Jacobsen, C
   Rakamaric, Z
   Gopalakrishnan, G
AF Solovyev, Alexey
   Baranowski, Marek S.
   Briggs, Ian
   Jacobsen, Charles
   Rakamaric, Zvonimir
   Gopalakrishnan, Ganesh
TI Rigorous Estimation of Floating-Point Round-Off Errors with Symbolic
   Taylor Expansions
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Floating-point arithmetic; IEEE floating-point standard; mixed-precision
   arithmetic; round-off error; global optimization; formal verification
ID VERIFICATION; COMPILATION; ACCURACY; PROOF
AB Rigorous estimation of maximum floating-point round-off errors is an important capability central to many formal verification tools. Unfortunately, available techniques for this task often provide very pessimistic overestimates, causing unnecessary verification failure. We have developed a new approach called Symbolic Taylor Expansions that avoids these problems, and implemented a new tool called FPTaylor embodying this approach. Key to our approach is the use of rigorous global optimization, instead of the more familiar interval arithmetic, affine arithmetic, and/or SMT solvers. FPTaylor emits per-instance analysis certificates in the form of HOL Light proofs that can be machine checked.
   In this article, we present the basic ideas behind Symbolic Taylor Expansions in detail. We also survey as well as thoroughly evaluate six tool families, namely, Gappa (two tool options studied), Fluctuat, PRECiSA, Real2Float, Rosa, and FPTaylor (two tool options studied) on 24 examples, running on the same machine, and taking care to find the best options for running each of these tools. This study demonstrates that FPTaylor estimates round-off errors within much tighter bounds compared to other tools on a significant number of case studies. We also release FPTaylor along with our benchmarks, thus contributing to future studies and tool development in this area.
C1 [Solovyev, Alexey; Baranowski, Marek S.; Briggs, Ian; Jacobsen, Charles; Rakamaric, Zvonimir; Gopalakrishnan, Ganesh] Univ Utah, Sch Comp, 50 South Cent Campus Dr, Salt Lake City, UT 84112 USA.
C3 Utah System of Higher Education; University of Utah
RP Solovyev, A (corresponding author), Univ Utah, Sch Comp, 50 South Cent Campus Dr, Salt Lake City, UT 84112 USA.
EM monad@cs.utah.edu; baranows@cs.utah.edu; ianbriggsutah@gmail.com;
   charlie.jacobsen@gmail.com; zvonimir@cs.utah.edu; ganesh@cs.utah.edu
FU National Science Foundation [CCF 1535032, 1552975, 1643056, 1704715];
   Direct For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [1704715] Funding Source: National Science
   Foundation; Direct For Computer & Info Scie & Enginr; Division of
   Computing and Communication Foundations [1552975, 1643056] Funding
   Source: National Science Foundation
FX This work was supported by the National Science Foundation awards CCF
   1535032, 1552975, 1643056, and 1704715.
CR Alliot JM, 2012, FRONT ARTIF INTEL AP, V242, P55, DOI 10.3233/978-1-61499-098-7-55
   Alliot Jean-Marc, 2012, P INT C FUNCT PROGR
   Andrysco M, 2016, ACM SIGPLAN NOTICES, V51, P555, DOI 10.1145/2914770.2837654
   [Anonymous], 2017, GELPIA GLOBAL OPTIMI
   Barr ET, 2013, ACM SIGPLAN NOTICES, V48, P549, DOI 10.1145/2480359.2429133
   Bingham J, 2014, LECT NOTES COMPUT SC, V8559, P277, DOI 10.1007/978-3-319-08867-9_18
   Boldo S, 2015, J AUTOM REASONING, V54, P135, DOI 10.1007/s10817-014-9317-x
   Boldo S, 2013, J AUTOM REASONING, V50, P423, DOI 10.1007/s10817-012-9255-4
   Boldo S, 2011, P S COMP ARITHM, P243, DOI 10.1109/ARITH.2011.40
   Boldo S, 2009, LECT NOTES COMPUT SC, V5625, P59, DOI 10.1007/978-3-642-02614-0_10
   Brillout Angelo, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P69, DOI 10.1109/FMCAD.2009.5351141
   Chen LQ, 2008, LECT NOTES COMPUT SC, V5356, P3
   Chiang WF, 2017, ACM SIGPLAN NOTICES, V52, P300, DOI 10.1145/3093333.3009846
   Chiang WF, 2014, ACM SIGPLAN NOTICES, V49, P43, DOI [10.1145/2692916.2555265, 10.1145/2555243.2555265]
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Damouche N, 2017, INT J SOFTW TOOLS TE, V19, P427, DOI 10.1007/s10009-016-0435-0
   Daramy C, 2003, P SOC PHOTO-OPT INS, V5205, P458, DOI 10.1117/12.505591
   Darulova E, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3014426
   Darulova E, 2014, ACM SIGPLAN NOTICES, V49, P235, DOI 10.1145/2535838.2535874
   Darulova E, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P325
   Daumas M, 2010, ACM T MATH SOFTWARE, V37, DOI 10.1145/1644001.1644003
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delmas D, 2009, LECT NOTES COMPUT SC, V5825, P53
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Frama C, 2017, SOFTWARE ANAL
   Gáti A, 2012, COMPUT INFORM, V31, P713
   Giannakopoulou Dimitra., 2014, Proceedings of the International Conference on Automated Software Engineering (ASE), P373
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   Goodloe Alwyn E., 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P441, DOI 10.1007/978-3-642-38088-4_31
   Goualard F., 2017, GAOL NOT JUST ANOTHE
   Goualard F, 2014, ACM T MATH SOFTWARE, V40, DOI 10.1145/2493882
   Goubault E, 2011, LECT NOTES COMPUT SC, V6538, P232, DOI 10.1007/978-3-642-18275-4_17
   Haller L, 2012, PROCEEDINGS OF THE 12TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2012), P131
   Harrison J, 2000, LECT NOTES COMPUT SC, V1954, P217
   Harrison J, 2006, LECT NOTES COMPUT SC, V3965, P211
   Harrison J, 2009, LECT NOTES COMPUT SC, V5674, P60, DOI 10.1007/978-3-642-03359-9_4
   Jacobsen C, 2015, ELECTRON NOTES THEOR, V317, P101, DOI 10.1016/j.entcs.2015.10.010
   Johnson S., 2017, The NLopt nonlinear-optimization package
   KAHAN W., 2006, How futile are mindless assessments of roundoff in floating-point computation?
   Kearfott RB, 2009, OPTIM METHOD SOFTW, V24, P687, DOI 10.1080/10556780802614051
   Lebbah Y, 2009, OPTIM METHOD SOFTW, V24, P709, DOI 10.1080/10556780902753452
   Lee W, 2016, ACM SIGPLAN NOTICES, V51, P70, DOI [10.1145/2908080.2908107, 10.1145/2980983.2908107]
   Leeser Miriam., 2014, DATE, P1
   Linderman MD, 2010, INT SYM CODE GENER, P230, DOI 10.1145/1772954.1772987
   Magron V, 2017, ACM T MATH SOFTWARE, V43, DOI 10.1145/3015465
   Martel M., 2011, 2011 13th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing (SYNASC), P118, DOI 10.1109/SYNASC.2011.52
   Martel M., 2006, Higher-Order and Symbolic Computation, V19, P7, DOI 10.1007/s10990-006-8608-2
   Martel Matthieu., 2009, P 2009 ACM SIGPLAN W, P101, DOI DOI 10.1145/1480945.1480960
   Martin-Dorel E., 2013, P 2013 15 INT S SYMB, P193
   Melquiond G, 2012, INFORM COMPUT, V216, P14, DOI 10.1016/j.ic.2011.09.005
   Microsoft Support, 2018, FLOAT POINT AR MAY G
   Mikusinski P., 2002, An Introduction to Multivariable Analysis from Vector to Manifold
   Miller W., 1975, ACM Transactions on Mathematical Software, V1, P108, DOI 10.1145/355637.355639
   Moore R. E., 1966, INTERVAL ANAL
   Mutrie M. P. W., 1992, International System Symposium on Symbolic and Algebraic Computation 92, P284, DOI 10.1145/143242.143332
   Narkawicz A., 2013, LECT NOTES COMPUTER, V8164, P326, DOI [10.1007/978-3-642-54108-7_17, DOI 10.1007/978-3-642-54108-7_17]
   NASA, 2017, NASA WORLD WIND JAV
   Neumaier A, 2004, ACT NUMERIC, V13, P271, DOI 10.1017/S0962492904000194
   Neumaier A., 2003, Reliable Computing, V9, P43, DOI 10.1023/A:1023061927787
   OpenOpt, 2017, OPENOPT UN NUM OPT P
   Paganelli G, 2014, INT SYMP SYMB NUMERI, P209, DOI 10.1109/SYNASC.2013.35
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Ponsini O, 2016, AUTOMAT SOFTW ENG, V23, P191, DOI 10.1007/s10515-014-0154-2
   Rakamaric Z, 2014, LECT NOTES COMPUT SC, V8559, P106, DOI 10.1007/978-3-319-08867-9_7
   Revol N, 2005, J LOGIC ALGEBR PROGR, V64, P135, DOI 10.1016/j.jlap.2004.07.008
   Rummer P., 2010, INFORMAL P 8 INT WOR
   Sicun Gao, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P208, DOI 10.1007/978-3-642-38574-2_14
   Solovyev Alexey, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P383, DOI 10.1007/978-3-642-38088-4_26
   Solovyev A, 2015, LECT NOTES COMPUT SC, V9109, P532, DOI 10.1007/978-3-319-19249-9_33
   Solovyev Alexey, 2017, TOPLAS FPTaylor Results Table
   Stolfi J, 2003, Trends Comput. Appl. Math., V4, P297, DOI DOI 10.5540/TEMA.2003.04.03.0297
   Stoutemyer D. R., 1977, ACM Transactions on Mathematical Software, V3, P26, DOI 10.1145/355719.355721
   Surjanovic Sonja, 2017, TRID FUNCTION
   Titolo Laura, 2017, SCHLOSS DAGSTUHL SEM
   Weisstein Eric, 2017, CHEBYSCHEV POLYNOMIA
   Weisstein Eric, 2017, LEGENDRE POLYNOMIAL
   Zuras D., 2008, 7542008 IEEE, V754-2008, P1, DOI [DOI 10.1109/IEEESTD.2008.4610935, DOI 10.1109/IEEESTD.2008.5976968]
NR 79
TC 50
Z9 58
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2019
VL 41
IS 1
AR 2
DI 10.1145/3230733
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HN7NB
UT WOS:000460376400002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Toro, M
   Garcia, R
   Tanter, E
AF Toro, Matias
   Garcia, Ronald
   Tanter, Eric
TI Type-Driven Gradual Security with References
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Noninterference; language-based security; gradual typing
ID INFORMATION-FLOW
AB In security-typed programming languages, types statically enforce noninterference between potentially conspiring values, such as the arguments and results of functions. But to adopt static security types, like other advanced type disciplines, programmers face a steep wholesale transition, often forcing them to refactor working code just to satisfy their type checker. To provide a gentler path to security typing that supports safe and stylish but hard-to-verify programming idioms, researchers have designed languages that blend static and dynamic checking of security types. Unfortunately, most of the resulting languages only support static, type-based reasoning about noninterference if a program is entirely statically secured. This limitation substantially weakens the benefits that dynamic enforcement brings to static security typing. Additionally, current proposals are focused on languages with explicit casts and therefore do not fulfill the vision of gradual typing, according to which the boundaries between static and dynamic checking only arise from the (im)precision of type annotations and are transparently mediated by implicit checks.
   In this article, we present GSL(Ref,) a gradual security-typed higher-order language with references. As a gradual language, GSL(Ref) supports the range of static-to-dynamic security checking exclusively driven by type annotations, without resorting to explicit casts. Additionally, GSL(Ref) lets programmers use types to reason statically about termination-insensitive noninterference in all programs, even those that enforce security dynamically. We prove that GSL(Ref) satisfies all but one of Siek et al.'s criteria for gradually-typed languages, which ensure that programs can seamlessly transition between simple typing and security typing. A notable exception regards the dynamic gradual guarantee, which some specific programs must violate if they are to satisfy noninterference; it remains an open question whether such a language could fully satisfy the dynamic gradual guarantee. To realize this design, we were led to draw a sharp distinction between syntactic type safety and semantic type soundness, each of which constrains the design of the gradual language.
C1 [Toro, Matias; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Beauchef 851, Santiago, Chile.
   [Garcia, Ronald] Univ British Columbia, Software Practices Lab, 201-2366 Main Mall, Vancouver, BC, Canada.
C3 Universidad de Chile; University of British Columbia
RP Toro, M (corresponding author), Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Beauchef 851, Santiago, Chile.
EM mtoro@dcc.uchile.cl; rxg@cs.ubc.ca; etanter@dcc.uchile.cl
OI Toro, Matias/0000-0002-5315-0198
FU CONICYT FONDECYT Regular Project [1150017]
FX This work is partially funded by CONICYT FONDECYT Regular Project
   1150017.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed Amal, 2017, P 22 ACM SIGPLAN C F
   [Anonymous], 2002, THESIS
   [Anonymous], 1980, Essays on Combinatory Logic, Lambda Calculus and Formalism
   [Anonymous], 2004, Ph.D. Dissertation.
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   AUSTIN TH, 2010, P 5 ACM SIGPLAN WORK, DOI DOI 10.1145/1814217.1814220
   Austin TH, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3024086
   Austin TH, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P165
   Austin Thomas H., 2009, P ACM SIGPLAN 4 WORK, P113, DOI DOI 10.1145/1554339.1554353
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Biba K. J, 1977, Technical Report ESD-TR-76-372
   Buiras P, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P289, DOI 10.1145/2784731.2784758
   Castagna G., 2017, PACMPL 1 ICFP
   Chandra D, 2007, TWENTY-THIRD ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P463, DOI 10.1109/ACSAC.2007.37
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Disney T., 2011, P INT WORKSH SCRIPTS
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Fennell Luminous, 2016, LNCS
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Garcia Ronald, 2015, DERIVING SIMPLE GRAD
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Hedin D, 2012, P IEEE CSFW, P3, DOI 10.1109/CSF.2012.19
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Hunt S, 2006, ACM SIGPLAN NOTICES, V41, P79, DOI 10.1145/1111320.1111045
   Igarashi Yuu, 2017, P 22 ACM SIGPLAN C F
   Jafery KA, 2017, ACM SIGPLAN NOTICES, V52, P804, DOI 10.1145/3093333.3009865
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Moore S, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P146, DOI 10.1109/CSF.2011.17
   Myers A. C., 1997, Operating Systems Review, V31, P129, DOI 10.1145/269005.266669
   Myers AC, 2000, ACM T SOFTW ENG METH, V9, P410, DOI 10.1145/363516.363526
   Nipkow T., 2012, NATO Science for Peace and Security Series-D: Information and Communication Security, V33, P319, DOI [10.3233/978-1-61499-028-4-319, DOI 10.3233/978-1-61499-028-4-319]
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Russo A, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P186, DOI 10.1109/CSF.2010.20
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A, 2009, J COMPUT SECUR, V17, P517, DOI 10.3233/JCS-2009-0352
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Shroff P, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P203, DOI 10.1109/CSF.2007.20
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Stefan D, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000241
   Thiemann P, 2014, LECT NOTES COMPUT SC, V8410, P47
   Toro M, 2015, ACM SIGPLAN NOTICES, V50, P935, DOI [10.1145/2814270.2814315, 10.1145/2858965.2814315]
   Toro M, 2017, LECT NOTES COMPUT SC, V10422, P382, DOI 10.1007/978-3-319-66706-5_19
   Toro Matias, 2018, TRDCC20184 U CHIL
   Urban C., 2011, J COMPUTER SECURITY, V12, P2, DOI DOI 10.3233/JCS-1996-42-304
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   Zdancewic S, 2001, LECT NOTES COMPUT SC, V2028, P46
   Zheng Lantian, 2007, INT J INF SECUR, V6, P2
NR 61
TC 28
Z9 29
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2018
VL 40
IS 4
AR 16
DI 10.1145/3229061
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HJ4CA
UT WOS:000457120400003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Jakobs, MC
   Wehrheim, H
AF Jakobs, Marie-Christine
   Wehrheim, Heike
TI Programs from Proofs: A Framework for the Safe Execution of Untrusted
   Software
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Abstract interpretation; program certification; program extraction;
   programs from proofs; program transformation; proof-carrying code
ID DATA-FLOW ANALYSIS; REFINEMENT; VERIFICATION; LANGUAGE
AB Today, software is traded worldwide on global markets, with apps being downloaded to smartphones within minutes or seconds. This poses, more than ever, the challenge of ensuring safety of software in the face of (1) unknown or untrusted software providers together with (2) resource-limited software consumers. The concept of Proof-Carrying Code (PCC), years ago suggested by Necula, provides one framework for securing the execution of untrusted code. PCC techniques attach safety proofs, constructed by software producers, to code. Based on the assumption that checking proofs is usually much simpler than constructing proofs, software consumers should thus be able to quickly check the safety of software. However, PCC techniques often suffer from the size of certificates (i.e., the attached proofs), making PCC techniques inefficient in practice.
   In this article, we introduce a new framework for the safe execution of untrusted code called Programs from Proofs (PfP). The basic assumption underlying the PfP technique is the fact that the structure of programs significantly influences the complexity of checking a specific safety property. Instead of attaching proofs to program code, the PfP technique transforms the program into an efficiently checkable form, thus guaranteeing quick safety checks for software consumers. For this transformation, the technique also uses a producer-side automatic proof of safety. More specifically, safety proving for the software producer proceeds via the construction of an abstract reachability graph (ARG) unfolding the control-flow automaton (CFA) up to the degree necessary for simple checking. To this end, we combine different sorts of software analysis: expensive analyses incrementally determining the degree of unfolding, and cheap analyses responsible for safety checking. Out of the abstract reachability graph we generate the new program. In its CFA structure, it is isomorphic to the graph and hence another, this time consumer-side, cheap analysis can quickly determine its safety.
   Like PCC, Programs from Proofs is a general framework instantiable with different sorts of (expensive and cheap) analysis. Here, we present the general framework and exemplify it by some concrete examples. We have implemented different instantiations on top of the configurable program analysis tool CPA(CHECKER) and report on experiments, in particular on comparisons with PCC techniques.
C1 [Jakobs, Marie-Christine; Wehrheim, Heike] Paderborn Univ, Fac Elect Engn Comp Sci & Math, Dept Comp Sci, Warburger Str 100, D-33098 Paderborn, Germany.
C3 University of Paderborn
RP Jakobs, MC (corresponding author), Paderborn Univ, Fac Elect Engn Comp Sci & Math, Dept Comp Sci, Warburger Str 100, D-33098 Paderborn, Germany.
EM marie.christine.jakobs@upb.de; wehrheim@upb.de
OI Jakobs, Marie-Christine/0000-0002-5890-4673
FU German Research Foundation (DFG) within the Collaborative Research
   Centre "On-The-Fly Computing" [SFB 901]
FX This work was partially supported by the German Research Foundation
   (DFG) within the Collaborative Research Centre "On-The-Fly Computing"
   (SFB 901).
CR Albert E, 2005, LECT NOTES COMPUT SC, V3452, P380
   Ammons G, 2004, ACM SIGPLAN NOTICES, V39, P568, DOI 10.1145/989393.989451
   Amtoft T, 2012, LECT NOTES COMPUT SC, V7215, P369, DOI 10.1007/978-3-642-28641-4_20
   [Anonymous], 2007, INT C AUTOMATED SOFT
   Balakrishnan G, 2008, LECT NOTES COMPUT SC, V5079, P238
   Balakrishnan Gogul, 2009, P 7 ACM INT C EMBEDD, P49, DOI [10.1145/1629335.1629343, DOI 10.1145/1629335.1629343]
   Barnes John, 2012, SPARKTHE PROVEN APPR
   BATES JL, 1985, ACM T PROGR LANG SYS, V7, P113, DOI 10.1145/2363.2528
   Bauer L, 2003, DARPA INFORMATION SURVIVABILITY CONFERENCE AND EXPOSITION, VOL II, PROCEEDINGS, P117
   Benl H, 1998, APPL LOG SER, V9, P41
   Berghofer S, 2002, LECT NOTES COMPUT SC, V2646, P21
   Beyer D, 2004, LECT NOTES COMPUT SC, V3148, P2
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Beyer Dirk, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P401, DOI 10.1007/978-3-662-46681-0_31
   Beyer D., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P189
   Beyer D., 2013, ESEC FSE, P389, DOI [10.1145/2491411.2491429, DOI 10.1145/2491411.2491429]
   Beyer D, 2007, LECT NOTES COMPUT SC, V4590, P504
   Beyer D, 2015, LECT NOTES COMPUT SC, V9232, P160, DOI 10.1007/978-3-319-23404-5_12
   Beyer D, 2015, LECT NOTES COMPUT SC, V9232, P20, DOI 10.1007/978-3-319-23404-5_3
   Beyer D, 2015, LECT NOTES COMPUT SC, V9039, P228, DOI 10.1007/978-3-319-19195-9_15
   Beyer D, 2013, LECT NOTES COMPUT SC, V7793, P146, DOI 10.1007/978-3-642-37057-1_11
   Blazy Sandrine, 2014, LECT NOTES COMPUTER, V8718, P140
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cook Byron, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P333, DOI 10.1007/978-3-642-22110-1_26
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2007, LECT NOTES COMPUT SC, V4634, P333
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Dhurjati D, 2006, LECT NOTES COMPUT SC, V4134, P425
   Drzevitzky S, 2009, 2009 INTERNATIONAL CONFERENCE ON RECONFIGURABLE COMPUTING AND FPGAS, P189, DOI 10.1109/ReConFig.2009.31
   Farchi Eitan, 2003, P 17 INT S PAR DISTR, V286, P2
   FISCHER J, 2005, ESEC FSE 2005, P227
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Groote JF, 2015, SOFTW TEST VERIF REL, V25, P4, DOI 10.1002/stvr.1536
   Gulavani BS, 2006, LECT NOTES COMPUT SC, V3920, P474
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Hall M. W., 1994, Languages and Compilers for Parallel Computing. 6th International Workshop Proceedings, P522
   Harman M, 2004, IEEE T SOFTWARE ENG, V30, P3, DOI 10.1109/TSE.2004.1265732
   Heizmann M, 2009, LECT NOTES COMPUT SC, V5673, P69, DOI 10.1007/978-3-642-03237-0_7
   Henzinger T. A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P526
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2772, P332
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Hong S, 2013, J SYST SOFTWARE, V86, P377, DOI 10.1016/j.jss.2012.08.063
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Howard William A., 1969, CURRY ESSAYS COMBINA
   Hunt S, 2006, ACM SIGPLAN NOTICES, V41, P79, DOI 10.1145/1111320.1111045
   IBM Research, 2015, T J WATS LIBR AN WAL
   Jaffar J, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P133, DOI 10.1145/2635868.2635884
   Jakobs M.C., 2014, P SPIN, P30, DOI [10.1145/2632362.2632372, DOI 10.1145/2632362.2632372]
   Jakobs MC, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1729, DOI 10.1145/2695664.2695690
   Jakobs MC, 2015, LECT NOTES COMPUT SC, V9276, P159, DOI 10.1007/978-3-319-22969-0_12
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Johnson R., 1995, DESIGN PATTERNS ELEM
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Leroy X, 2002, SOFTWARE PRACT EXPER, V32, P319, DOI 10.1002/spe.438
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   Letouzey P, 2008, LECT NOTES COMPUT SC, V5028, P359, DOI 10.1007/978-3-540-69407-6_39
   Maisonneuve V, 2012, ELECTRON NOTES THEOR, V288, P49, DOI 10.1016/j.entcs.2012.10.007
   Namjoshi KS, 2001, LECT NOTES COMPUT SC, V2102, P2
   Necula G. C., 1998, Mobile agents and security, P61
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Necula GC, 2002, ACM SIGPLAN NOTICES, V37, P128, DOI 10.1145/565816.503286
   Nielson F., 1999, Principles of Program Analysis
   Peled D., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P1
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Rose E, 2003, J AUTOM REASONING, V31, P303, DOI 10.1023/B:JARS.0000021015.15794.82
   Sankaranarayanan S, 2006, LECT NOTES COMPUT SC, V4134, P3
   Sankaranarayanan Sriram, 2013, NECLA STAT ANAL BECH, V1
   Schneck Paul B., 1973, P ACM ANN C, P106
   Sery Ondrej, 2012, Hardware and Software: Verification and Testing. 7th International Haifa Verification Conference (HVC 2011). Revised Selected Papers, P160, DOI 10.1007/978-3-642-34188-5_15
   Sharma Rahul, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P703, DOI 10.1007/978-3-642-22110-1_57
   Steffen B., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P22
   Thakur A, 2008, INT SYM CODE GENER, P55
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Wang C, 2007, LECT NOTES COMPUT SC, V4590, P352
   Winter K, 2013, LECT NOTES COMPUT SC, V8144, P415, DOI 10.1007/978-3-642-41202-8_27
   Wonisch Daniel, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P912, DOI 10.1007/978-3-642-39799-8_65
   Wonisch Daniel, 2012, P INT C FORM ENG MET, P332
   Yin X, 2009, I C DEPEND SYS NETWO, P53, DOI 10.1109/DSN.2009.5270355
   Yin X, 2008, LECT NOTES COMPUT SC, V5219, P305
   Zhang S, 2007, P INT COMP SOFTW APP, P431
NR 87
TC 5
Z9 5
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2017
VL 39
IS 2
AR 7
DI 10.1145/3014427
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FA1IG
UT WOS:000405192200002
DA 2024-07-18
ER

PT J
AU Hirzel, M
   Schneider, S
   Ged, B
AF Hirzel, Martin
   Schneider, Scott
   Ged, Bugra
TI SPL: An Extensible Language for Distributed Stream Processing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Stream processing
ID SYNCHRONOUS DATA-FLOW; PROGRAMMING LANGUAGE
AB Big data is revolutionizing how all sectors of our economy do business, including telecommunication, transportation, medical, and finance. Big data comes in two flavors: data at rest and data in motion. Processing data in motion is stream processing. Stream processing for big data analytics often requires scale that can only be delivered by a distributed system, exploiting parallelism on many hosts and many cores. One such distributed stream processing system is IBM Streams. Early customer experience with IBM Streams uncovered that another core requirement is extensibility, since customers want to build high-performance domain-specific operators for use in their streaming applications. Based on these two core requirements of distribution and extensibility, we designed and implemented the Streams Processing Language (SPL). This article describes SPL with an emphasis on the language design, distributed runtime, and extensibility mechanism. SPL is now the gateway for the IBM Streams platform, used by our customers for stream processing in a broad range of application domains.
C1 [Hirzel, Martin; Schneider, Scott] IBM Thomas J Watson Res Ctr, 1101 Kitchawan Rd, Yorktown Hts, NY 10598 USA.
   [Ged, Bugra] Bilkent Univ, Dept Comp Engn, TR-06800 Ankara, Turkey.
C3 International Business Machines (IBM); Ihsan Dogramaci Bilkent
   University
RP Hirzel, M (corresponding author), IBM Thomas J Watson Res Ctr, 1101 Kitchawan Rd, Yorktown Hts, NY 10598 USA.
EM hirzel@us.ibm.com; scott.a.s@us.ibm.com; bgedik@cs.bilkent.edu.tr
CR Abadi D.J., 2005, CIDR, P277
   Abadi DJ, 2003, VLDB J, V12, P120, DOI 10.1007/s00778-003-0095-z
   Agrawal J., 2008, SIGMOD 08, P147, DOI DOI 10.1145/1376616.1376634
   Ahmad Y, 2009, PROC VLDB ENDOW, V2, P1566, DOI 10.14778/1687553.1687592
   Ali M, 2011, PROC INT CONF DATA, P1242, DOI 10.1109/ICDE.2011.5767878
   [Anonymous], 2005, Sci. Program
   [Anonymous], 2013, VERY LARGE DATA BASE
   [Anonymous], 2008, Proceedings of the 2008 ACM SIGMOD international conference on Management of data, SIGMOD'08, ACM
   [Anonymous], 2010, NSDI
   [Anonymous], 1974, PROC IFIP C 74
   [Anonymous], 2010, P 2010 ACM SIGMOD IN
   Arasu A, 2006, VLDB J, V15, P121, DOI 10.1007/s00778-004-0147-z
   Arasu A., 2004, VLDB, P480
   Arnold M, 2016, IBM J RES DEV, V60, DOI 10.1147/JRD.2016.2527419
   Auerbach J, 2010, ACM SIGPLAN NOTICES, V45, P89, DOI 10.1145/1932682.1869469
   Babcock B., 2002, P 21 ACM SIGMOD SIGA, P1, DOI [DOI 10.1145/543613.543615, 10.1145/543613]
   Bachrach J, 2001, ACM SIGPLAN NOTICES, V36, P31, DOI 10.1145/504311.504285
   Barga R.S., 2007, CIDR 2007 3 BIENNIAL, P363
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Beyer KS, 2011, PROC VLDB ENDOW, V4, P1272
   Biem A, 2010, INT CONF ACOUST SPEE, P1654, DOI 10.1109/ICASSP.2010.5495521
   Bosboom J, 2014, ACM SIGPLAN NOTICES, V49, P177, DOI [10.1145/2714064.2660236, 10.1145/2660193.2660236]
   Bouillet E., 2012, Conference on Distributed Event-Based Systems (DEBS), P264
   Chambers C, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1806596.1806638
   CHANDRASEKARAN S, 2003, C INN DAT SYST RES C
   Chen JJ, 2000, SIGMOD REC, V29, P379, DOI 10.1145/335191.335432
   Cortes C., 2000, Proceedings. KDD-2000. Sixth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, P9, DOI 10.1145/347090.347094
   Cranor Chuck., 2003, ACM SIGMOD
   De Pauw W, 2010, LECT NOTES COMPUT SC, V6418, P18, DOI 10.1007/978-3-642-16612-9_3
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Demers A.J., 2007, P CIDR, VVolume 7, P412
   Esper, 2014, EV PROC ESP NESP
   Gedik B, 2014, IEEE T PARALL DISTR, V25, P1447, DOI 10.1109/TPDS.2013.295
   Gordon MI, 2006, ACM SIGPLAN NOTICES, V41, P151, DOI 10.1145/1168919.1168877
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hirzel M, 2013, IBM J RES DEV, V57, DOI 10.1147/JRD.2013.2243535
   Hirzel M., 2016, C DISTR EV BAS SYST, P49
   Hirzel M., 2009, RC24897 IBM RES
   Hirzel M., 2012, P WORKSH PART EV PRO, P141
   Hirzel M, 2014, ACM COMPUT SURV, V46, DOI 10.1145/2528412
   Hirzel M, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P19
   Hirzel Martin., 2012, Proceedings of the 6th ACM International Conference on Distributed Event-Based Systems, DEBS'12, P191, DOI 10.1145/2335484.2335506
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Hudak Paul, 2003, ARROWS ROBOTS FUNCTI
   Johnston WM, 2004, ACM COMPUT SURV, V36, P1, DOI 10.1145/1013208.1013209
   Khandekar R, 2009, LECT NOTES COMPUT SC, V5896, P308, DOI 10.1007/978-3-642-10445-9_16
   Kienzler R, 2012, LECT NOTES COMPUT SC, V7338, P640, DOI 10.1007/978-3-642-31235-9_50
   Lee B, 2012, LECT NOTES COMPUT SC, V7313, P589, DOI 10.1007/978-3-642-31057-7_26
   LEE EA, 1987, P IEEE, V75, P1235, DOI 10.1109/PROC.1987.13876
   Li P, 2010, SPAA '10: PROCEEDINGS OF THE TWENTY-SECOND ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P243
   LogMon, 2014, SPL LOGANALYSISBENCH
   Mendell M., 2012, C EXT DAT TECHN EDBT, P534
   Murray DG, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P439, DOI 10.1145/2517349.2522738
   Olston C., 2008, Proceedings of the 2008 ACM SIGMOD International Conference on Manage- ment of Data, P1099
   OpenMP, 2014, OPENMP API SPEC PAR
   Park Y, 2012, SOFTWARE PRACT EXPER, V42, P37, DOI 10.1002/spe.1047
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P324, DOI 10.1145/316686.316697
   Riabov A., 2008, Proceeding of the 17th international con- ference on World Wide Web, P775
   Schneider S, 2012, INT CONFER PARA, P53
   Schneider S, 2015, IEEE T COMPUT, V64, P504, DOI 10.1109/TC.2013.221
   Seyfer N., 2011, P 5 ACM INT C DISTR, P15, DOI [10.1145/2002259.2002263, DOI 10.1145/2002259.2002263]
   Soule R., 2013, P 7 ACM INT C DISTR, P159
   Soulé R, 2010, LECT NOTES COMPUT SC, V6012, P507, DOI 10.1007/978-3-642-11957-6_27
   Sow DM, 2012, IBM J RES DEV, V56, DOI 10.1147/JRD.2012.2197952
   Stephens R, 1997, ACTA INFORM, V34, P491, DOI 10.1007/s002360050095
   TAHA W, 1997, WORKSH PART EV SEM B, P203
   Tang YZ, 2013, IEEE T PARALL DISTR, V24, P2344, DOI 10.1109/TPDS.2012.333
   Tangwongsan K, 2015, PROC VLDB ENDOW, V8, P702, DOI 10.14778/2752939.2752940
   Thusoo A, 2009, PROC VLDB ENDOW, V2, P1626, DOI 10.14778/1687553.1687609
   Tobin-Hochstadt S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P132
   Toshniwa A, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P147, DOI 10.1145/2588555.2595641
   Vaziri M, 2014, LECT NOTES COMPUT SC, V8586, P360
   Xu ZH, 2013, IEEE INT CONF AUTOM, P103, DOI 10.1109/ASE.2013.6693071
   Yu Y., 2008, OSDI, V8, P1
   Zaharia M, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P423, DOI 10.1145/2517349.2522737
   Zou Qiong, 2011, C DISTR EV BAS SYST, P267
NR 76
TC 13
Z9 16
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2017
VL 39
IS 1
AR 5
DI 10.1145/3039207
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ER1IR
UT WOS:000398544100005
DA 2024-07-18
ER

PT J
AU Gange, G
   Navas, JA
   Schachte, P
   Sondergaard, H
   Stuckey, PJ
AF Gange, Graeme
   Navas, Jorge A.
   Schachte, Peter
   Sondergaard, Harald
   Stuckey, Peter J.
TI Interval Analysis and Machine Arithmetic: Why Signedness Ignorance Is
   Bliss
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Reliability; Theory; Verification; Abstract
   interpretation; interval analysis; LLVM; machine arithmetic; modular
   arithmetic; overflow; program analysis
ID AUTOMATIC ABSTRACTION
AB The most commonly used integer types have fixed bit-width, making it possible for computations to "wrap around," and many programs depend on this behaviour. Yet much work to date on program analysis and verification of integer computations treats integers as having infinite precision, and most analyses that do respect fixed width lose precision when overflow is possible. We present a novel integer interval abstract domain that correctly handles wrap-around. The analysis is signedness agnostic. By treating integers as strings of bits, only considering signedness for operations that treat them differently, we produce precise, correct results at a modest cost in execution time.
C1 [Navas, Jorge A.] NASA, Ames Res Ctr, Moffett Field, CA 94035 USA.
   [Gange, Graeme; Schachte, Peter; Sondergaard, Harald; Stuckey, Peter J.] Univ Melbourne, Dept Comp & Informat Syst, Melbourne, Vic 3010, Australia.
C3 National Aeronautics & Space Administration (NASA); NASA Ames Research
   Center; University of Melbourne
RP Gange, G (corresponding author), Univ Melbourne, Dept Comp & Informat Syst, Melbourne, Vic 3010, Australia.
EM gkgange@unimelb.edu.au; jorge.a.navaslaserna@nasa.gov;
   schachte@unimelb.edu.au; harald@unimelb.edu.au; pstuckey@unimelb.edu.au
RI Schachte, Peter/H-4848-2016
OI Schachte, Peter/0000-0001-5959-3769; Sondergaard,
   Harald/0000-0002-2352-1883; Stuckey, Peter/0000-0003-2186-0459
FU Australian Research Council, under ARC [DP110102579]
FX This work is supported by the Australian Research Council, under ARC
   grant DP110102579.
CR [Anonymous], 2010, P 9 INT WORKSH CONST
   Balakrishnan G, 2004, LECT NOTES COMPUT SC, V2985, P5
   Balakrishnan Gogul, 2007, THESIS
   Bardin S, 2010, LECT NOTES COMPUT SC, V6015, P84, DOI 10.1007/978-3-642-12002-2_7
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Blazy S, 2013, LECT NOTES COMPUT SC, V7935, P324, DOI 10.1007/978-3-642-38856-9_18
   Brauer J, 2010, LECT NOTES COMPUT SC, V6337, P167, DOI 10.1007/978-3-642-15769-1_11
   Coker Z, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P792, DOI 10.1109/ICSE.2013.6606625
   Condit J, 2003, ACM SIGPLAN NOTICES, V38, P232, DOI 10.1145/780822.781157
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dietz W, 2012, PROC INT CONF SOFTW, P760, DOI 10.1109/ICSE.2012.6227142
   Douglas D., 2011, PROCEEDINGS OF THE 2
   Fähndrich M, 2011, LECT NOTES COMPUT SC, V6528, P10
   Falke S, 2013, LECT NOTES COMPUT SC, V7795, P623, DOI 10.1007/978-3-642-36742-7_48
   Falke S, 2012, LECT NOTES COMPUT SC, V7152, P261, DOI 10.1007/978-3-642-27705-4_21
   Gange Graeme, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P215, DOI 10.1007/978-3-642-38574-2_15
   Gange G, 2013, LECT NOTES COMPUT SC, V7935, P6, DOI 10.1007/978-3-642-38856-9_3
   Gawlitza T, 2009, LECT NOTES COMPUT SC, V5760, P422, DOI 10.1007/978-3-642-03456-5_28
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   GRANGER P, 1991, LECT NOTES COMPUT SC, V493, P169
   King A, 2010, LECT NOTES COMPUT SC, V5944, P197, DOI 10.1007/978-3-642-11319-2_16
   LECONTEL M, 2006, P 1 WORKSH CONSTR SO, P22
   Leroux J, 2007, LECT NOTES COMPUT SC, V4634, P184
   Logozzo F, 2013, ELECTRON P THEOR COM, P341, DOI 10.4204/EPTCS.129.21
   Marriott K., 1998, PROGRAMMING CONSTRAI
   Michel Laurent D., 2012, Principles and Practice of Constraint Programming. Proceedings 18th International Conference, CP 2012, P527, DOI 10.1007/978-3-642-33558-7_39
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Nakanishi T., 1999, 1999 International Conference on Parallel Architectures and Compilation Techniques (Cat. No.PR00425), P91, DOI 10.1109/PACT.1999.807422
   Navas J.A., 2012, LECT NOTES COMPUTER, V7705, P115, DOI DOI 10.1007/978-3-642-35182-2_9
   Nielson F., 1999, Principles of Program Analysis
   Pereira F, 2013, INT WORKSHOP PATTERN, P1, DOI 10.1109/PRNI.2013.10
   Regehr J, 2006, ACM SIGPLAN NOTICES, V41, P34, DOI 10.1145/1134650.1134657
   Reps Thomas., 2006, P 2006 ACM SIGPLAN S, P100
   Seidl Helmut, 2012, COMPILER DESIGN ANAL, DOI DOI 10.1007/978-3-642-17548-0
   SEN R, 2007, P MEMOCODE, P39
   Simon A, 2007, LECT NOTES COMPUT SC, V4634, P121
   Su ZD, 2004, LECT NOTES COMPUT SC, V2988, P280
   Wang X, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P260, DOI 10.1145/2517349.2522728
   Warren H. S, 2003, Hacker's Delight
   Zhang C, 2011, J COMPUT SECUR, V19, P1083, DOI 10.3233/JCS-2011-0434
   Zhang C, 2010, LECT NOTES COMPUT SC, V6345, P71, DOI 10.1007/978-3-642-15497-3_5
NR 43
TC 12
Z9 13
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2015
VL 37
IS 1
AR 1
DI 10.1145/2651360
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5AP
UT WOS:000348919700001
OA Bronze
DA 2024-07-18
ER

PT J
AU Hayden, CM
   Saur, K
   Smith, EK
   Hicks, M
   Foster, JS
AF Hayden, Christopher M.
   Saur, Karla
   Smith, Edward K.
   Hicks, Michael
   Foster, Jeffrey S.
TI Kitsune: Efficient, General-Purpose Dynamic Software Updating for C
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Dynamic software updating
ID SAFE
AB Dynamic software updating (DSU) systems facilitate software updates to running programs, thereby permitting developers to add features and fix bugs without downtime. This article introduces Kitsune, a DSU system for C. Kitsune's design has three notable features. First, Kitsune updates the whole program, rather than individual functions, using a mechanism that places no restrictions on data representations or allowed compiler optimizations. Second, Kitsune makes the important aspects of updating explicit in the program text, making the program's semantics easy to understand while minimizing programmer effort. Finally, the programmer can write simple specifications to direct Kitsune to generate code that traverses and transforms old-version state for use by new code; such state transformation is often necessary and is significantly more difficult in prior DSU systems. We have used Kitsune to update six popular, open-source, single-and multithreaded programs and find that few program changes are required to use Kitsune, that it incurs essentially no performance overhead, and that update times are fast.
   Categories and Subject Descriptors: C. 4 [Performance of Systems]: Reliability, availability, and serviceability
C1 [Hayden, Christopher M.; Saur, Karla; Smith, Edward K.; Hicks, Michael; Foster, Jeffrey S.] Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Hayden, CM (corresponding author), Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
EM hayden@cs.umd.edu; ksaur@cs.umd.edu; tedks@cs.umd.edu; mwh@cs.umd.edu;
   jfoster@cs.umd.edu
FU NSF [CCF-0910530]; UMIACS; Laboratory for Telecommunication Sciences;
   Direct For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [0910530] Funding Source: National Science
   Foundation
FX We would like to thank Michail Denchev and Jonathan Turpie for help in
   the development and testing of Kitsune. Emery Berger, Miguel Castro,
   J.P. Martin, Cristi Zamfir, and the anonymous referees provided helpful
   comments on drafts of this article. Kristis Makris helped us with the
   UpStare benchmarks. This work was supported by NSF grant CCF-0910530 and
   the partnership between UMIACS and the Laboratory for Telecommunication
   Sciences.
CR Altekar G, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P287
   [Anonymous], 2002, TECHNICAL REPORT
   [Anonymous], 2013, LIVERREBEL
   Arnold J, 2009, EUROSYS'09: PROCEEDINGS OF THE FOURTH EUROSYS CONFERENCE, P187
   Baumann A, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK: 2005 UNENIX ANNUAL TECHNICAL CONFERENCE, P279
   Berger ED, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/583854.582421
   Chen HB, 2011, IEEE T SOFTWARE ENG, V37, P679, DOI 10.1109/TSE.2010.79
   Condit J, 2007, LECT NOTES COMPUT SC, V4421, P520
   GILMORE S, 1997, ECSLFCS97378 U ED LA
   Giuffrida C, 2013, ACM SIGPLAN NOTICES, V48, P279, DOI 10.1145/2499368.2451147
   Haibo Chen, 2006, VEE 2006. Proceedings of the Second International Conference on Virtual Execution Environments, P35
   Hayden C. M., 2012, Proceedings 2012 Fourth International Workshop on Hot Topics in Software Upgrades (HotSWUp 2012), P6, DOI 10.1109/HotSWUp.2012.6226617
   Hayden C. M., 2011, Proceedings 2011 27th IEEE International Conference on Data Engineering Workshops (ICDEW 2011), P179, DOI 10.1109/ICDEW.2011.5767632
   Hayden CM, 2012, IEEE T SOFTWARE ENG, V38, P1340, DOI 10.1109/TSE.2011.101
   Hayden CM, 2012, ACM SIGPLAN NOTICES, V47, P249, DOI 10.1145/2398857.2384635
   Hayden CM, 2012, LECT NOTES COMPUT SC, V7152, P278, DOI 10.1007/978-3-642-27705-4_22
   Hicks M, 2005, ACM T PROGR LANG SYS, V27, P1049, DOI 10.1145/381694.378798
   Krieger O., 2006, Operating Systems Review, V40, P133, DOI 10.1145/1218063.1217949
   MAKRIS K., 2009, P 2009 C USENIX ANN, P31
   Makris K, 2009, THESIS ARIZONA STATE
   Makris Kristis., 2007, Proceedings of the 2nd ACM SIGOPS/EuroSys European Conference on Computer Systems 2007, P327
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Neamtiu I, 2008, ACM SIGPLAN NOTICES, V43, P37, DOI 10.1145/1328897.1328447
   Neamtiu I, 2006, ACM SIGPLAN NOTICES, V41, P72, DOI 10.1145/1133981.1133991
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Nishtala R., 2013, Proceedings of the 10th USENIX Conference on Networked Systems Design and Implementation, NSDI '13, Berkeley, CA, USA, P385
   Payer M., 2013, 5 WORKSH HOT TOP SOF
   Payer M, 2013, ANN CONF PRIV SECUR, P143, DOI 10.1109/PST.2013.6596048
   Pina Luis, 2013, P WORKSH HOT TOP SOF
   Subramanian S, 2009, ACM SIGPLAN NOTICES, V44, P1, DOI 10.1145/1543135.1542478
NR 30
TC 19
Z9 20
U1 0
U2 9
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2014
VL 36
IS 4
AR 13
DI 10.1145/2629460
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT0JN
UT WOS:000344622700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Liang, HJ
   Feng, XY
   Fu, M
AF Liang, Hongjin
   Feng, Xinyu
   Fu, Ming
TI Rely-Guarantee-Based Simulation for Compositional Verification of
   Concurrent Program Transformations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Verification; Concurrency; program transformation;
   rely-guarantee reasoning; simulation
ID SEPARATION LOGIC; ABSTRACTION; CORRECTNESS; THREADS; DERIVATION;
   PARALLEL; COMPILER; OBJECTS; PROOFS; MODEL
AB Verifying program transformations usually requires proving that the resulting program (the target) refines or is equivalent to the original one (the source). However, the refinement relation between individual sequential threads cannot be preserved in general with the presence of parallel compositions, due to instruction reordering and the different granularities of atomic operations at the source and the target. On the other hand, the refinement relation defined based on fully abstract semantics of concurrent programs assumes arbitrary parallel environments, which is too strong and cannot be satisfied by many well-known transformations.
   In this article, we propose a Rely-Guarantee-based Simulation (RGSim) to verify concurrent program transformations. The relation is parametrized with constraints of the environments that the source and the target programs may compose with. It considers the interference between threads and their environments, thus is less permissive than relations over sequential programs. It is compositional with respect to parallel compositions as long as the constraints are satisfied. Also, RGSim does not require semantics preservation under all environments, and can incorporate the assumptions about environments made by specific program transformations in the form of rely/guarantee conditions. We use RGSim to reason about optimizations and prove atomicity of concurrent objects. We also propose a general garbage collector verification framework based on RGSim, and verify the Boehm et al. concurrent mark-sweep GC.
C1 [Liang, Hongjin; Feng, Xinyu; Fu, Ming] Univ Sci & Technol China, Sch Comp Sci & Technol, Hefei 230026, Anhui, Peoples R China.
C3 Chinese Academy of Sciences; University of Science & Technology of
   China, CAS
RP Feng, XY (corresponding author), Univ Sci & Technol China, Sch Comp Sci & Technol, Hefei 230026, Anhui, Peoples R China.
EM xyfeng@ustc.edu.cn
FU National Natural Science Foundation of China (NSFC) [61379039, 61229201,
   61103023, 91318301]; Program for New Century Excellent Talents in
   Universities [NCET-2010-0984]; Fundamental Research Funds for the
   Central Universities [WK0110000031]
FX This work is supported in part by grants from National Natural Science
   Foundation of China (NSFC) under grant nos. 61379039, 61229201,
   61103023, and 91318301, Program for New Century Excellent Talents in
   Universities (grant no. NCET-2010-0984), and the Fundamental Research
   Funds for the Central Universities (grant no. WK0110000031).
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abadi M, 2009, ACM SIGPLAN NOTICES, V44, P29, DOI 10.1145/1594834.1480887
   [Anonymous], 2022, COQ PROOF ASSISTANT
   [Anonymous], 1986, Technical Report RJ 5118
   [Anonymous], P 17 S LOG COMP SCI
   Barabash K, 2005, ACM T PROGR LANG SYS, V27, P1097, DOI 10.1145/1108970.1108972
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Benton N, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1631687.1596567
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Boehm Hans-Juergen, 1991, P ACM SIGPLAN 1991 C, P157
   Boehm HJ, 2005, ACM SIGPLAN NOTICES, V40, P261, DOI 10.1145/1064978.1065042
   Brookes S, 1996, INFORM COMPUT, V127, P145, DOI 10.1006/inco.1996.0056
   Burckhardt S, 2010, LECT NOTES COMPUT SC, V6011, P104, DOI 10.1007/978-3-642-11970-5_7
   Dice D, 2006, LECT NOTES COMPUT SC, V4167, P194
   Elmas T, 2010, LECT NOTES COMPUT SC, V6015, P296, DOI 10.1007/978-3-642-12002-2_25
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Gladstein David S., 1996, LECT NOTES COMPUTER, V1061, P231
   Herlihy M., 2008, ART MULTIPROCESSOR P
   Hoare Charles A.R., 1972, ACTA INFORMATION, V1, P271
   Hur CK, 2011, ACM SIGPLAN NOTICES, V46, P133, DOI 10.1145/1925844.1926402
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Kapoor K, 2011, J PHILOS LOGIC, V40, P583, DOI 10.1007/s10992-011-9195-1
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Liang HJ, 2012, ACM SIGPLAN NOTICES, V47, P455, DOI 10.1145/2103621.2103711
   Lochbihler A, 2010, LECT NOTES COMPUT SC, V6012, P427, DOI 10.1007/978-3-642-11957-6_23
   McCreight Andrew, 2007, P ACM SIGPLAN C PROG, P468
   Parkinson M, 2006, IEEE S LOG, P137, DOI 10.1109/LICS.2006.52
   Pavlovic D, 2010, LECT NOTES COMPUT SC, V6120, P353, DOI 10.1007/978-3-642-13321-3_20
   Sevcik J, 2011, ACM SIGPLAN NOTICES, V46, P43, DOI 10.1145/1925844.1926393
   Turon A, 2011, ACM SIGPLAN NOTICES, V46, P247, DOI 10.1145/1925844.1926415
   Vafeiadis Viktor, 2007, P 18 INT C CONC THEO, P256
   Vafeiadis Viktor., 2008, Technical Report UCAM-CL-TR-726
   Vechev MT, 2006, ACM SIGPLAN NOTICES, V41, P341, DOI 10.1145/1133981.1134022
   Wand Mitchell, 1995, P C FUNCT PROG LANG, P120
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 36
TC 16
Z9 16
U1 0
U2 16
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2014
VL 36
IS 1
AR 3
DI 10.1145/2576235
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AD8TE
UT WOS:000333537700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Tip, F
   Fuhrer, RM
   Kiezun, A
   Ernst, MD
   Balaban, I
   De Sutter, B
AF Tip, Frank
   Fuhrer, Robert M.
   Kiezun, Adam
   Ernst, Michael D.
   Balaban, Ittai
   De Sutter, Bjorn
TI Refactoring Using Type Constraints
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Design; Languages; Refactoring; type constraints; program
   transformation
AB Type constraints express subtype relationships between the types of program expressions, for example, those relationships that are required for type correctness. Type constraints were originally proposed as a convenient framework for solving type checking and type inference problems. This paper shows how type constraints can be used as the basis for practical refactoring tools. In our approach, a set of type constraints is derived from a type-correct program P. The main insight behind our work is the fact that P constitutes just one solution to this constraint system, and that alternative solutions may exist that correspond to refactored versions of P. We show how a number of refactorings for manipulating types and class hierarchies can be expressed naturally using type constraints. Several refactorings in the standard distribution of Eclipse are based on our work.
C1 [Tip, Frank; Fuhrer, Robert M.] IBM TJ Watson Res Ctr, Yorktown Hts, NY 10598 USA.
   [Kiezun, Adam] Harvard Univ, Brigham & Womens Hosp, Sch Med, Boston, MA 02115 USA.
   [Ernst, Michael D.] Univ Washington, Dept Comp Sci & Engn, Seattle, WA 98195 USA.
   [Balaban, Ittai] World Evolved Serv, New York, NY 10016 USA.
   [De Sutter, Bjorn] Vrije Univ Brussel, Brussels, Belgium.
   [De Sutter, Bjorn] Univ Ghent, Elect & Informat Syst Dept, B-9000 Ghent, Belgium.
C3 International Business Machines (IBM); Harvard University; Brigham &
   Women's Hospital; Harvard Medical School; University of Washington;
   University of Washington Seattle; Vrije Universiteit Brussel; Ghent
   University
RP Tip, F (corresponding author), IBM TJ Watson Res Ctr, POB 704, Yorktown Hts, NY 10598 USA.
EM ftip@us.ibm.com; rfuhrer@us.ibm.com; akiezun@rics.bwh.harvard.edu;
   mernst@cs.washington.edu; ibalaban@worldevolved.com;
   brdsutte@elis.ugent.be
FU Defense Advanced Research Projects Agency (DARPA) [NBCH30390004]; Fund
   for Scientific Research-Flanders (Belgium); Division Of Computer and
   Network Systems; Direct For Computer & Info Scie & Enginr [0855252]
   Funding Source: National Science Foundation
FX This work has been supported in part by the Defense Advanced Research
   Projects Agency (DARPA) under contract No. NBCH30390004 and by the Fund
   for Scientific Research-Flanders (Belgium).
CR [Anonymous], 1999, P OBJ OR SYST LANG
   Balaban I, 2005, ACM SIGPLAN NOTICES, V40, P265, DOI 10.1145/1103845.1094832
   Beck K., 2000, EXTREME PROGRAMMING
   BRACHA G, 2004, JSR000014
   DESUTTER B, 2004, P OOPSLA, P585
   Donovan A, 2004, ACM SIGPLAN NOTICES, V39, P15, DOI 10.1145/1035292.1028979
   DONOVAN A, 2003, MITLCSTR889
   DUGGAN D, 1999, P C OBJ OR PROGR SYS, P97
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fuhrer R, 2005, LECT NOTES COMPUT SC, V3586, P71
   Gosling J., 2005, Java Language Specification, Vthird
   Griswold W. G., 1993, ACM Transactions on Software Engineering and Methodology, V2, P228, DOI 10.1145/152388.152389
   GRISWOLD WG, 1991, 910804 U WASH
   HALLORAN TJ, 2002, MODELS THUMB ASSURIN
   Hind M, 2001, SCI COMPUT PROGRAM, V39, P31, DOI 10.1016/S0167-6423(00)00014-9
   Kerievsky J., 2004, REFACTORING PATTERNS
   KIEZUN A, 2006, REFACTORING PARAMETE
   Kiezun A, 2007, PROC INT CONF SOFTW, P437
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Opdyke W.F., 1993, CSC '93, P66, DOI DOI 10.1145/170791.170804
   PALSBERG J, 1993, OBJECT ORIENTED TYPE
   Ryder BG, 2003, LECT NOTES COMPUT SC, V2622, P126
   Snelting G, 2000, ACM T PROGR LANG SYS, V22, P540, DOI 10.1145/353926.353940
   STELMANN F, 2007, P TOOLS EUR
   STELMANN F, 2009, P 23 EUR C OBJ OR PR, P419
   STELMANN F, 2006, P ACM S APPL COMP SA, P1404
   Streckenbach M, 2004, ACM SIGPLAN NOTICES, V39, P315, DOI 10.1145/1035292.1029003
   Tip F, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/949343.949308
   TIP F, 2007, P STAT AN 14 INT S, P1
   Tokuda L., 2001, Automated Software Engineering, V8, P89, DOI 10.1023/A:1008715808855
   Torgersen M., 2004, SAC 2004, P1289, DOI DOI 10.5381/JOT.2004.3.11.A5
   VONDINCKLAGE D, 2004, P OOPSLA, P1
NR 33
TC 38
Z9 42
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD APR
PY 2011
VL 33
IS 3
AR 9
DI 10.1145/1961204.1961205
PG 47
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 756NQ
UT WOS:000290019800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Khedker, UP
   Sanyal, A
   Karkare, A
AF Khedker, Uday P.
   Sanyal, Amitabha
   Karkare, Amey
TI Heap reference analysis using access graphs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; theory; aliasing; data flow analysis; heap
   references; liveness
ID GARBAGE
AB Despite significant progress in the theory and practice of program analysis, analyzing properties of heap data has not reached the same level of maturity as the analysis of static and stack data. The spatial and temporal structure of stack and static data is well understood while that of heap data seems arbitrary and is unbounded. We devise bounded representations that summarize properties of the heap data. This summarization is based on the structure of the program that manipulates the heap. The resulting summary representations are certain kinds of graphs called access graphs. The boundedness of these representations and the monotonicity of the operations to manipulate them make it possible to compute them through data flow analysis.
   An important application that benefits from heap reference analysis is garbage collection, where currently liveness is conservatively approximated by reachability from program variables. As a consequence, current garbage collectors leave a lot of garbage uncollected, a fact that has been confirmed by several empirical studies. We propose the first ever end-to-end static analysis to distinguish live objects from reachable objects. We use this information to make dead objects unreachable by modifying the program. This application is interesting because it requires discovering data flow information representing complex semantics. In particular, we formulate the following new analyses for heap data: liveness, availability, and anticipability and propose solution methods for them. Together, they cover various combinations of directions of analysis (i.e., forward and backward) and confluence of information (i.e. union and intersection). Our analysis can also be used for plugging memory leaks in C/C++ languages.
C1 [Khedker, Uday P.; Sanyal, Amitabha; Karkare, Amey] Indian Inst Technol, Dept Comp Sci & Engn, Bombay 400076, Maharashtra, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay
RP Khedker, UP (corresponding author), Indian Inst Technol, Dept Comp Sci & Engn, Kanwai Rekhi Bldg, Bombay 400076, Maharashtra, India.
EM uday@cse.iitb.ac.in; as@cse.iitb.ac.in; karkare@cse.iitb.ac.in
OI Karkare, Amey/0000-0002-3664-6490
CR AGESEN O, 1998, PROGRAMMING LANGUAGE, P269
   Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 1977, Flow Analysis of Computer Programs
   [Anonymous], 2009, P 30 ACM SIGPLAN C P
   Blanchet B, 2003, ACM T PROGR LANG SYS, V25, P713, DOI 10.1145/945885.945886
   BLANCHET B, 1999, OOPSLA 99, P20
   BOEHM H, 2007, ARTIFICIAL GARBAGE C
   CANNAROZZI DJ, 2000, P ACM SIGPLAN 00 C P, P264
   CARLISLE MC, 1996, THESIS PRINCETON U P
   CHASE DR, 1990, P SIGPLAN 90 C PROGR, P296
   Cheng BC, 2000, ACM SIGPLAN NOTICES, V35, P57, DOI 10.1145/358438.349311
   CHEREM S, 2006, ISMM 06 P 2006 INT S, P138
   CHOI JD, 1993, P 20 ACM SIGPLAN SIG, P232
   CHOI JD, 1999, OOPSLA 99, P1
   GADBOIS D, 2006, GC FAQ, P364
   Guyer SZ, 2006, ACM SIGPLAN NOTICES, V41, P364, DOI 10.1145/1133981.1134024
   Hackett Brian., 2005, Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2005, Long Beach, California, USA, January 12-14, P310, DOI DOI 10.1145/1040305.1040331
   HALLENBERG N, 2002, PLDI 02 P ACM SIGPLA, P1441
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   Hirzel M, 2002, ACM T PROGR LANG SYS, V24, P593, DOI 10.1145/586088.586089
   HIRZEL M, 2002, ISMM 02 P 3 INT S ME, P36
   HORWITZ S, 1989, P ACM SIGPLAN S COMP, P28
   IYER PC, 2005, PVS BASED PROOFS SAF
   Jones N. D., 1979, P 6 ACM SIGACT SIGPL, P244
   JONES N. D., 1982, P 9 ACM SIGPLAN SIGA, P66, DOI DOI 10.1145/582153.582161
   KARKARE A, 2007, HAV 2007 HEAP AN VER, P64
   KARKARE A, 2007, HEAP REFERENCE ANAL
   KARKARE A, 2005, XSB PROLOG BASED PRO
   KARKARE B, 2007, THESIS INDIAN I TECH
   Khedker U., 2002, COMPILER DESIGN HDB
   Khedker UP, 2003, COMPUT LANG SYST STR, V29, P15, DOI 10.1016/S1477-8424(03)00012-5
   Larus JamesR., 1988, ACM SIGPLAN Notices, V23, P24, DOI DOI 10.1145/53990.53993
   McDowell CE, 1998, ACM SIGPLAN NOTICES, V33, P84, DOI 10.1145/290229.290239
   REID A, 1999, P ACM SIGPLAN WORKSH
   Sagiv M., 2002, COMPILER DESIGN HDB
   Shaham R, 2003, LECT NOTES COMPUT SC, V2694, P483
   SHAHAM R, 2000, ISMM 00 P 2 INT S ME, P12
   SHAHAM R, 2001, P ACM SIGPLAN 2001 C, P104
   Shaham Ran., 2002, ISMM 02 P 3 INT S ME, P64
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   YONG SH, 1999, P ACM C PROGR LANG D, P91
NR 42
TC 11
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 1
AR 1
DI 10.1145/1290520.1290521
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 248KY
UT WOS:000252153400001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Weimer, W
   Necula, GC
AF Weimer, Westiley
   Necula, George C.
TI Exceptional situations and program reliability
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; languages; reliability; verification; error handling; resource
   management; linear types; compensating transactions; linear sagas
ID FAULT-TOLERANCE; SUPPORT; JAVA
AB It is difficult to write programs that behave correctly in the presence of run-time errors. Proper behavior in the face of exceptional situations is important to the reliability of long-running programs. Existing programming language features often provide poor support for executing clean-up code and for restoring invariants.
   We present a data-flow analysis for finding a certain class of exception-handling defects: those related to a failure to release resources or to clean up properly along all paths. Many real-world programs violate such resource usage rules because of incorrect exception handling. Our flow-sensitive analysis keeps track of outstanding obligations along program paths and does a precise modeling of control flow in the presence of exceptions. Using it, we have found over 1,300 exception handling defects in over 5 million lines of Java code.
   Based on those defects we propose a programming language feature, the compensation stack, that keeps track of obligations at run time and ensures that they are discharged. We present a type system for compensation stacks that tracks collections of obligations. Finally, we present case studies to demonstrate that this feature is natural, efficient, and can improve reliability.
C1 [Weimer, Westiley] Univ Virginia, Dept Comp Sci, Charlottesville, VA 22904 USA.
   [Necula, George C.] Univ Calif Berkeley, Dept Elect Engn & Comp Sci, Berkeley, CA 94720 USA.
C3 University of Virginia; University of California System; University of
   California Berkeley
RP Weimer, W (corresponding author), Univ Virginia, Dept Comp Sci, 150 Engineers Way,POB 400740, Charlottesville, VA 22904 USA.
EM weimer@cs.virginia.edu; necula@cs.berkeley.edu
CR Abrial J. R., 1980, On the construction of programs, P343
   Aho A.V., 1986, COMPILERS PRINCIPLES
   Alonso G, 2000, IEEE CONCURR, V8, P74, DOI 10.1109/4434.865896
   ALONSO G, 1994, RJ9913 IBM ALM RES C
   [Anonymous], P INT S SOFTW TEST A
   [Anonymous], LNCS
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   Ball T., 2001, MSRTR200121
   BOEHM HJ, 2003, P S PRINC PROGR LANG
   BORG A, 1989, ACM T COMPUT SYST, V7, P1, DOI 10.1145/58564.58565
   BROWN A, 2003, USENIX ANN TECHN C
   BRUNTINK M, 2006, ICSE 06 P 28 INT C S, P242
   Burke M. G., 1999, Proceedings of the ACM 1999 Java Grande Conference, P129, DOI 10.1145/304065.304113
   Campione M., 2000, JAVA TUTORIAL, V3rd
   CANDEA G, 2003, P IEEE WORKSH INT AP
   Cardelli L, 1999, IEEE T SOFTWARE ENG, V25, P309, DOI 10.1109/32.798321
   CARGILL T, 1994, C REPORT, V6, P9
   CHANG BM, 2001, SAC 01, P620
   Chatterjee R, 2001, IEEE T SOFTWARE ENG, V27, P481, DOI 10.1109/32.926173
   Chen MY, 2002, INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P595, DOI 10.1109/DSN.2002.1029005
   CHOI JD, 1999, P ACM SIGPLAN SIGSOF, P21
   CRISTIAN F, 1982, IEEE T COMPUT, V31, P531, DOI 10.1109/TC.1982.1676035
   Cristian Flaviu, 1987, RJ5724 IBM RES
   DAN A, 1998, LNCS, V1513, P873
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   DAYAL U, 1990, SIGMOD REC, V19, P204, DOI 10.1145/93605.98730
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   DEMSKY B, 2003, P ACM C OBJ OR PROGR
   DONY C, 2001, LNCS, V2022, P18
   Engler D, 2000, P S OP SYST DES IMPL
   FAHNDRICH M, 2002, P ACM C PROGR LANG D
   Fink Stephen., 2006, INT S SOFTWARE TESTI, P133, DOI DOI 10.1145/1146238.1146254
   Fu C, 2005, IEEE T SOFTWARE ENG, V31, P292, DOI 10.1109/TSE.2005.51
   Garcia-Molina H., 1987, ACM SIGMOD Record, P249, DOI DOI 10.1145/38714.38742
   GAY D, 1998, P 1998 ACM SIGPLAN C, P313
   *GEN SERV ADM, 1996, 1037C NAT COMM SYST
   GOODENOUGH JB, 1975, COMMUN ACM, V18, P683, DOI 10.1145/361227.361230
   GOSLING J, 1996, JAVA SERIES
   Gray J., 1981, P 7 INT C VERY LARGE, P144
   Gupta M, 2000, LECT NOTES COMPUT SC, V1850, P422
   Hagen C, 2000, IEEE T SOFTWARE ENG, V26, P943, DOI 10.1109/32.879818
   HAUSWIRTH M, 2004, P S ARCH SUPP PROGR
   HEJLSBERG A, 2003, C PROGRAMMING LANG
   *HIBERNATE, 2004, OBJ REL MAPP TRANSP
   HOPCROFT JE, 2000, INTRO AUT THEOR LANG
   Hovemeyer David., 2004, ACM Conference on Object-Oriented Programming Systems, Lan-guages, and Applications, OOPSLA '04, P132
   Kildall Gary A., 1973, Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. POPL'73, P194
   KORTH HF, 1990, VERY LARGE DATA BASES, P95
   LIBLIT B, 2003, PROGRAMMING LANGUAGE
   Lindholm T., 1997, JAVA VIRTUAL MACHINE
   LISKOV B, 1983, ACM T PROGR LANG SYS, V5, P381, DOI 10.1145/2166.357215
   LIU C, 2001, P C DAT SYST ADV APP
   LOWELL DE, TECH REP U MICHIGAN, P1998
   LOWELL DE, 2000, P USENIX S OP SYST D
   Malayeri D, 2006, LECT NOTES COMPUT SC, V4119, P200
   Miller R, 1997, LECT NOTES COMPUT SC, V1241, P85
   NFCULA GC, 2002, P INT C COMP CONSTR, P213
   Odersky Martin., 1997, P 24 ACM S PRINCIPLE, P146
   OHANLEY J, 2005, ALWAYS CLOSE STREAMS
   PERRY EH, 2002, ORACLE9I JDBC DEV GU
   Reimer D., 2004, Software Engineering Notes, V29, P243, DOI 10.1145/1013886.1007545
   Reps ThomasW., 1995, P ACM S PRINCIPLES P, P49
   Robillard MP, 2003, ACM T SOFTW ENG METH, V12, P191, DOI 10.1145/941566.941569
   Ryder BG, 2000, LECT NOTES COMPUT SC, V1781, P67
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   SCHMUCK F, 1991, P 13 ACM S OP SYST P, P239
   Seltzer MI, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P213, DOI 10.1145/248155.238779
   Sinha S, 2004, PROC INT CONF SOFTW, P336, DOI 10.1109/ICSE.2004.1317456
   Sinha S., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P265, DOI 10.1109/ICSM.1999.792624
   Sinha S, 2000, IEEE T SOFTWARE ENG, V26, P849, DOI 10.1109/32.877846
   *SOURCEFORGE, 2003, A1 SOURCEFORGE
   STALLMAN R, 2002, DEBUGGING GDB
   Stroustrup B., 1991, C PROGRAMMING LANGUA, VSecond
   *SUN MICR, 2001, JAV PET STOR 1 1 2 B
   Tofte M., 1997, INF COMPUT
   Valens G, 2002, POSITIF, P73
   VANDERWAL S, 2002, CREATING C AUT PTR U
   Wagner D., 2000, P NETWORK DISTRIBUTE
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   WEIMER W, 2004, OOPSLA 04, P419
   [No title captured], DOI DOI 10.1145/319151.319163
NR 81
TC 41
Z9 45
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PY 2008
VL 30
IS 2
AR 8
DI 10.1145/1330017.1330019
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 280HZ
UT WOS:000254418100002
DA 2024-07-18
ER

PT J
AU Zhuang, XT
   Pande, S
AF Zhuang, Xiaotong
   Pande, Santosh
TI Allocating architected registers through differential encoding
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; design; algorithms; performance; register allocation;
   architected register; differential encoding
AB Micro-architecture designers are very cautious about expanding the number of architected and exposed registers in the instruction set because increasing the register field adds to the code size, raises the I-cache and memory pressure, and may complicate the processor pipeline. Especially for low-end processors, encoding space could be extremely limited due to area and power considerations. On the other hand, the number of architected registers exposed to the compiler could directly affect the effectiveness of compiler analysis and optimization. For high-performance computers, register pressure can be higher than the available registers in some regions. This could be due to optimizations like aggressive function inlining, software pipelining, etc. The compiler cannot effectively perform compilation and optimization if only a small number of registers are exposed through the ISA. Therefore, it is crucial that more architected registers are available at the compiler's disposal, without expanding the code size significantly.
   In this article, we devise a new register encoding scheme, called differential encoding, that allows more registers to be addressed in the operand field of instructions than the direct encoding currently being used. We show that this can be implemented with very low overhead. Based upon differential encoding, we apply it in several ways such that the extra architected registers can benefit the performance. Three schemes are devised to integrate differential encoding with register allocation. We demonstrate that differential register allocation is helpful in improving the performance of both high-end and low-end processors. Moreover, we can combine it with software pipelining to provide more registers and reduce spills.
   Our results show that differential encoding significantly reduces the number of spills and speeds-up program execution. For a low-end configuration, we achieve over 14% speedup while keeping code size almost unaffected. For a high-end VLIW in-order machine, it can significantly speedup loops with high register pressure (about 80% speedup) band the overall speedup is about 15%. Moreover, our scheme can be applied in an adaptive manner, making its overhead much smaller.
C1 Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology
RP Zhuang, XT (corresponding author), Georgia Inst Technol, Coll Comp, 801 Atlantic Dr, Atlanta, GA 30332 USA.
EM xt2000@cc.gatech.edu
OI Pande, Santosh/0000-0001-6723-8062
CR [Anonymous], P ACM INT C COMP ARC
   [Anonymous], IEEE 4 ANN WORKSH WO
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   *ARM LTD, 2007, ARM TDMI DAT
   BARTLEY DH, 1992, SOFTWARE PRACT EXPER, V22, P101, DOI 10.1002/spe.4380220202
   BRIGGS P, 1994, P ACM SIGPLAN 2001 C
   Burger D, 1997, 1342 U WISC MAD COMP
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   COOPER KD, 1998, P 8 INT C ARCH SUPP, P2
   George L, 1996, ACM T PROGR LANG SYS, V18, P300, DOI 10.1145/229542.229546
   GEORGE L, 1999, SMLNJ INTEL X86 BACK
   *INT INC, 1998, SA 110 MICR TECHN RE
   KIYOHARA T, 1993, P 20 ANN INT S COMP, P247
   KRISHNASWAMY A, 2002, ACM SIGPLAN JOINT C
   LAM MSL, 1987, SYSTOLIC ARRAY OPTIM
   LEE HHS, 2001, P 7 INT S HIGH PERF
   LIAO S, 1995, P ACM SIGPLAN 2001 C
   Llosa J, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P250, DOI 10.1109/MICRO.1996.566466
   *MIPS TECHN, 2001, MIPS32 ARCH PROGR A, V4
   *MOT INC, 2000, MOT DSP56300 FAM MAN
   Özer E, 1998, 31ST ANNUAL ACM/IEEE INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, PROCEEDINGS, P308, DOI 10.1109/MICRO.1998.742792
   RAU BR, 1992, P ACM SIGPLAN 92 C P, P283
   Ruttenberg J., 1996, PLDI '96, P1
   SEGARS S, 2001, IEEE INT SOL STAT C
   WANG J, 1994, P 27 ANN INT S MICR, P95
   Zalamea J, 2000, INT SYMP MICROARCH, P137, DOI 10.1109/MICRO.2000.898065
   ZALAMEA J, 2000, P PROGR LANG DES IMP, P134
   ZHUANG X, 2005, IN PRESS P ACM SIGPL
   Zhuang XT, 2004, ACM SIGPLAN NOTICES, V39, P192, DOI 10.1145/998300.997191
NR 29
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2007
VL 29
IS 2
AR 9
DI 10.1145/1216374.1216377
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 161KL
UT WOS:000246013700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Glenstrup, AJ
   Jones, ND
AF Glenstrup, AJ
   Jones, ND
TI Termination analysis and specialization-point insertion in offline
   partial evaluation
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE binding-time analysis; quasitermination; size-change graphs; termination
ID AUTOMATIC AUTOPROJECTION; PARTIAL DEDUCTION; METAML; SYSTEM; PROGRAMS;
   COMPILER; SIZE
AB Recent research suggests that the goal of fully automatic and reliable program generation for a broad range of applications is coming nearer to feasibility. However, several interesting and challenging problems remain to be solved before it becomes a reality. Solving them is also necessary, if we hope ever to elevate software engineering from its current state (a highly developed handiwork) into a successful branch of engineering, capable of solving a wide range of new problems by systematic, well-automated and well-founded methods.
   A key problem in all program generation is termination of the generation process. This article focuses on off-line partial evaluation and describes recent progress towards automatically solving the termination problem, first for individual programs, and then for specializers and "generating extensions," the program generators that most offline partial evaluators produce.
   The technique is based on size-change graphs that approximate the changes in parameter sizes at function calls. We formulate a criterion, bounded anchoring, for detecting parameters known to be bounded during specialization: a bounded parameter can act as an anchor for other parameters. Specialization points necessary for termination are computed by adding a parameter that tracks call depth, and then selecting a specialization point in every call loop where it is unanchored. By generalizing all unbounded parameters, we compute a binding-time division which together with the set of specialization points guarantees termination.
   Contributions of this article include a proof, based on the operational semantics of partial evaluation with memoization, that the analysis guarantees termination; and an in-depth description of safety of the increasing size approximation operator required for termination analysis in partial evaluation.
   Initial experiments with a prototype shows that the analysis overall yields binding-time divisions that can achieve a high degree of specialization, while still guaranteeing termination.
   The article ends with a list of challenging problems whose solution would bring the community closer to the goal of broad-spectrum, fully automatic and reliable program generation.
C1 Univ Copenhagen, IT, DK-2300 Copenhagen S, Denmark.
   Univ Copenhagen, DIKU, DK-2100 Copenhagen O, Denmark.
C3 University of Copenhagen; University of Copenhagen
RP Glenstrup, AJ (corresponding author), Univ Copenhagen, IT, Rued Langgards Vej 7, DK-2300 Copenhagen S, Denmark.
EM panic@itu.dk; neil@diku.dk
CR ABEL A, 1999, UNPUB 4 INT WORKSH T, P24
   Aho A.V., 1986, COMPILERS PRINCIPLES
   Arts T, 1997, LECT NOTES COMPUT SC, V1232, P157
   Bawden A., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P342, DOI 10.1145/62678.62726
   Ben-Amram AA, 2002, LECT NOTES COMPUT SC, V2566, P3
   BERLIN A, 1990, COMPUTER, V23, P25, DOI 10.1109/2.62091
   BIRD RS, 1977, COMMUN ACM, V20, P856, DOI 10.1145/359863.359889
   Birkedal L., 1994, Programming Language Implementation and Logic Programming. 6th International Symposium, PLILP '94. Proceedings, P198
   BONDORF A, 1991, SCI COMPUT PROGRAM, V17, P3, DOI 10.1016/0167-6423(91)90035-V
   BONDORF A, 1991, SCI COMPUT PROGRAM, V16, P151, DOI 10.1016/0167-6423(91)90002-F
   BONDORF A, 1993, 934 DIKU U COP
   BRAUBURGER J, 1997, LECT NOTES COMPUTER, V1302, P330
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Cai Jiazhen, 1991, CONSTRUCTING PROGRAM, P126
   Chin WN, 1998, LECT NOTES COMPUT SC, V1381, P75, DOI 10.1007/BFb0053564
   CHIN WN, 2002, J HIGHER ORDER SYMB, V14, P261
   Christensen NH, 2000, LECT NOTES COMPUT SC, V1755, P80
   COLON M, 2002, LNCS, V2404, P442
   Consel C., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P66, DOI 10.1145/154630.154638
   CONSEL C, 1993, P 20 ANN ACM S PRINC, P493
   COQUAND C, 2001, INTERACTIVE THEOREM
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Danvy O., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P327, DOI 10.1145/62678.62725
   DANVY O, 1996, LECT NOTES COMPUTER, V1110
   DAS M, 1996, 1329 U WISC MAD COMP
   DAS M, 1998, THESIS U WISCONSIN M
   De Schreye D, 1999, J LOGIC PROGRAM, V41, P231, DOI 10.1016/S0743-1066(99)00030-8
   DESRIVIERES J, 1984, 1984 ACM S LISP FUNC, P331
   FRADET P, 1997, P PRINC PROGR LANG P, P27
   FRIEDMAN DP, 1984, 1984 P ACM S LISP FU, P348
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P377, DOI 10.1023/A:1010043619517
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   GALLAGHER J, 1990, P META90 WORKSH MET, P229
   Gallagher J. P., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P88, DOI 10.1145/154630.154640
   Ganz SE, 2001, ACM SIGPLAN NOTICES, V36, P74, DOI 10.1145/507669.507646
   Ghiya Rakesh., 1996, POPL 96, P1
   GIESL J, 1995, LECT NOTES COMPUTER, V983
   Glenstrup AJ, 1999, LECT NOTES COMPUT SC, V1706, P108
   GLENSTRUP AJ, 1999, THESIS DIKU
   GLENSTRUP AJ, 1996, LECT NOTES COMPUTER
   GLUCK R, 1995, SYSTEM MODELLING OPT, P137
   GLUCK R, 1996, LECT NOTES COMPUTER, V1110, P137
   Grant B, 2000, THEOR COMPUT SCI, V248, P147, DOI 10.1016/S0304-3975(00)00051-7
   GROBAUER B, 2001, THESIS BRICS AARHUS
   HATCLIFF J, 1999, LECT NOTES COMPUTER, V1706
   HOLST CK, 1991, LECT NOTES COMPUT SC, V523, P473
   HOLST CK, 1988, POOR MANS GEN
   HOLST CK, 1991, P 4 ANN GLASG WORKSH, P210
   HUDAK P, 1996, ACM COMPUT SURV A, V28
   HUGHES J, 1996, P POPL 96, P410
   Jefferson S., 1996, LISP and Symbolic Computation, V9, P181, DOI 10.1007/BF01806112
   JONES ND, 1994, HDB LOGIC COMPUTER S, P527
   JONES ND, 1996, LECT NOTES COMPUTER, V1110, P216
   Jones Neil D., 1993, INT SERIES COMPUTER, pJune
   Kieburtz RB, 1996, PROC INT CONF SOFTW, P542, DOI 10.1109/ICSE.1996.493448
   LAUNCHBURY J, 1991, DISTINGUISHED DISSER
   LAWALL J, 1997, LECT NOTES COMPUTER, V1281, P165
   Lee Chin Soon, 2001, PRINCIPLES PROGRAMMI, P81, DOI [10.1145/360204.360210, DOI 10.1145/360204.360210]
   Lee CS, 2002, LECT NOTES COMPUT SC, V2477, P493
   LEE CS, 2002, THESIS U W AUSTR
   Leuschel M, 2002, THEOR PRACT LOG PROG, V2, P461, DOI 10.1017/S147106840200145X
   Leuschel M, 1998, LECT NOTES COMPUT SC, V1503, P230
   Lindenstrauss N, 1997, LECT NOTES COMPUT SC, V1254, P444
   LINDENSTRAUSS N, 1997, UNPUB AUTOMATIC TERM
   Liu Y. A., 2000, Higher-Order and Symbolic Computation, V13, P289, DOI 10.1023/A:1026547031739
   LLOYD JW, 1991, J LOGIC PROGRAM, V11, P217, DOI 10.1016/0743-1066(91)90027-M
   MCCARTHY J, 1964, COMPUTER PROGRAMMING, P33
   McNamee D, 2001, ACM T COMPUT SYST, V19, P217, DOI 10.1145/377769.377778
   Mogensen T., 1988, PARTIAL EVALUATION M, P325
   MOGENSEN TAE, 2000, J HIGHER ORDER SYMB, V13, P355
   Moggi E, 1999, LECT NOTES COMPUT SC, V1576, P193
   Nielson F., 1996, Nordic Journal of Computing, V3, P144
   Pareto Lars, 2000, Ph. D. Dissertation
   Peter Rozsa., 1951, Rekursive funktionen
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P324, DOI 10.1145/316686.316697
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   SAGONAS K, 1994, P 1994 ACM SIGMOD IN, P442
   Schultz UP, 2001, LECT NOTES COMPUT SC, V2053, P173
   SESTOFT P, 2001, BIBLIO PARTIAL EVALU
   Sheard T, 1999, LECT NOTES COMPUT SC, V1608, P207
   SISTLA AP, 1987, THEOR COMPUT SCI, V49, P217, DOI 10.1016/0304-3975(87)90008-9
   Song LT, 2000, LECT NOTES COMPUT SC, V1924, P72
   SORENSEN MH, 1995, LOG PROGR P 1995 INT, P465
   SPEIRS C, 1997, LECT NOTES COMPUTER, V1302, P160
   Sperber M, 2000, ACM T PROGR LANG SYS, V22, P224, DOI 10.1145/349214.349219
   Taha W, 2001, LECT NOTES COMPUT SC, V2053, P257
   Taha W, 1999, ACM SIGPLAN NOTICES, V34, P34, DOI 10.1145/328691.328697
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   TAHA W, 2000, LECT NOTES COMPUTER, V1924
   Taha W., 1999, THESIS OREGON GRADUA
   Thiemann P, 1999, LECT NOTES COMPUT SC, V1706, P412
   THIEMANN P, 1997, LECT NOTES COMPUTER, V1214, P742
   Turchin V. F., 1979, SIGPLAN Notices, V14, P46, DOI 10.1145/954063.954069
   WADLER P, 1988, LECT NOTES COMPUT SC, V300, P344
   Wand M., 1988, LISP and Symbolic Computation, V1, P11, DOI 10.1007/BF01806174
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 100
TC 7
Z9 9
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD NOV
PY 2005
VL 27
IS 6
BP 1147
EP 1215
DI 10.1145/1108970.1108973
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 005EG
UT WOS:000234804800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Schultz, UP
   Lawall, JL
   Consel, C
AF Schultz, UP
   Lawall, JL
   Consel, C
TI Automatic program specialization for Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE design; experimentation; automatic program specialization;
   object-oriented languages; partial evaluation; Java; optimization
ID OBJECT-ORIENTED LANGUAGES
AB The object-oriented style of programming facilitates program adaptation and enhances program genericness, but at the expense of efficiency. We demonstrate experimentally that state-of-the-art Java compilers fail to compensate for the use of object-oriented abstractions in the implementation of generic programs, and that program specialization can eliminate a significant portion of these overheads. We present an automatic program specializer for Java, illustrate its use through detailed case studies, and demonstrate experimentally that it can significantly reduce program execution time. Although automatic program specialization could be seen as being subsumed by existing optimizing compiler technology, we show that specialization and compiler optimization are in fact complementary.
C1 Aarhus Univ, DAIMI, DK-8200 Aarhus N, Denmark.
   Univ Copenhagen, DIKU, DK-2100 Copenhagen O, Denmark.
   INRIA, LaBRI, Rennes, France.
C3 Aarhus University; University of Copenhagen; Universite de Rennes;
   Inria; Centre National de la Recherche Scientifique (CNRS); Universite
   de Bordeaux
RP Aarhus Univ, DAIMI, Aabogade 34, DK-8200 Aarhus N, Denmark.
EM ups@daimi.au.dk; julia@diku.dk; consel@labri.fr
RI Schultz, Ulrik/O-7985-2018
OI Schultz, Ulrik/0000-0003-4119-2689
CR AFFELDT R, 2002, P AS PEPM 2002
   AGESEN O, 1993, LECT NOTES COMPUTER, V707, P247
   AIGNER G, 1996, P ECOOP 96
   Alpern B, 1999, ACM SIGPLAN NOTICES, V34, P314, DOI 10.1145/320385.320418
   ANDERSEN LO, 1994, 9419 DIKU U COP COMP
   [Anonymous], PLDI 00
   BAIER R, 1994, ACM SIGPLAN WORKSH P, P119
   Blount B., 1999, Scientific Programming, V7, P97
   BONDORF A, 1990, 9017 DIKU U COP
   BRAUX M, 2000, ACM SIGPLAN WORKSH P
   Budimlic Z, 2001, LECT NOTES COMPUT SC, V2179, P201, DOI 10.1007/3-540-45346-6_20
   Budimlic Z., 1999, Scientific Programming, V7, P87
   BUDIMLIC Z, 1999, P 9 SIAM C PAR PROC
   BUDIMLIC Z, 1999, SCI COMPUT, V7, P2
   Chambers C., 1989, PLDI '89, P146
   Consel C., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P66, DOI 10.1145/154630.154638
   CONSEL C, 1996, LECT NOTES COMPUTER, V1110, P54
   COOPER KD, 1992, PROCEEDINGS OF THE 1992 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P96, DOI 10.1109/ICCL.1992.185472
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   DEAN J, 1995, SIGPLAN NOTICES, V30, P93
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Dolby J, 1998, ACM SIGPLAN NOTICES, V33, P1, DOI 10.1145/286942.286943
   FUJINAMI N, 1998, LECT NOTES COMPUTER, V1473, P253
   Gamma Erich., 1994, DESIGN PATTERNS
   GROVE D, 1995, OOPSLA 95 C P AUST T, P108
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   Hornof L, 2000, THEOR COMPUT SCI, V248, P3, DOI 10.1016/S0304-3975(00)00048-7
   HORNOF L, 2000, THEORETICAL COMPUTER, V248, P1
   *IBM, 2002, JIK RVM 2 1 0
   *IBM, 2001, IBM JDK 1 3 1
   IRWIN J, 1997, LECT NOTES COMPUTER, V1343, P249
   Ishizaki K, 2000, ACM SIGPLAN NOTICES, V35, P294, DOI 10.1145/354222.353191
   *JAV GRAND FOR, 1999, JAV GRAND FOR BENCHM
   Jones Neil D., 1993, INT SERIES COMPUTER, pJune
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Lawall JL, 2000, DSN 2000: INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P61, DOI 10.1109/ICDSN.2000.857515
   LLOYD JW, 1991, J LOGIC PROGRAM, V11, P217, DOI 10.1016/0743-1066(91)90027-M
   Luján M, 2000, ACM SIGPLAN NOTICES, V35, P229, DOI 10.1145/354222.353187
   LUJAN M, 2001, P 4 WORKSH PAR OBJ O
   LUJAN M, 1999, THESIS U MANCHESTER
   MARQUARD M, 1992, THESIS U COPENHAGEN
   Masuhara H, 2002, NEW GENERAT COMPUT, V20, P101, DOI 10.1007/BF03037261
   Muller G, 1999, IEEE SOFTWARE, V16, P44, DOI 10.1109/52.754052
   Ogawa H, 2000, LECT NOTES COMPUT SC, V1850, P362
   PLEVYAK J, 1994, SIGPLAN NOTICES, V29, P324, DOI 10.1145/191081.191130
   RAJ RK, 1991, SOFTWARE PRACT EXPER, V21, P91, DOI 10.1002/spe.4380210107
   Schultz UP, 2001, LECT NOTES COMPUT SC, V2053, P173
   Schultz UP, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P197, DOI 10.1109/ASE.2000.873664
   Schultz UP, 1999, LECT NOTES COMPUT SC, V1628, P367
   SCHUOLTZ U, 2000, THESIS U RENNES 1 RE
   *SPEC, 1998, SPEC JVM 98 BENCHM
   Sullivan GT, 2001, LECT NOTES COMPUT SC, V2053, P238
   *SUN MICR INC, 1999, SUN JDK 1 2 2
   *SUN MICR INC, 2002, SUN JDK 1 4 0
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   Tip F, 1999, ACM SIGPLAN NOTICES, V34, P292, DOI 10.1145/320385.320414
   VELDHUIZEN T, 2000, LECT NOTES COMPUTER, V2177, P188
   VELDHUIZEN TL, 1999, ACM SIGPLAN WORKSH P, P13
   VOLANSCHI E, 1997, OOPSLA 97 C P, P286
   WANG T, 2001, LECT NOTES COMPUTER, V2072, P99
   *XEROX, 2000, ASP J
   Zaks A, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/354222.353177
   [No title captured]
NR 64
TC 48
Z9 56
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2003
VL 25
IS 4
BP 452
EP 499
DI 10.1145/778559.778561
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 689QT
UT WOS:000183505000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Saha, B
   Trifonov, V
   Shao, Z
AF Saha, B
   Trifonov, V
   Shao, Z
TI Intensional analysis of quantified types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; verification; certified code; runtime type dispatch; typed
   intermediate languages; intensional type analysis
AB Compilers for polymorphic languages can use run-time type inspection to support advanced implementation techniques such as tagless garbage collection, polymorphic marshalling, and flattened data structures. Intensional type analysis is a type-theoretic framework for expressing and certifying such type-analyzing computations, Unfortunately, existing approaches to intensional analysis do not work well on quantified types such as existential or polymorphic types, This makes it impossible to code (in a type-safe language) applications such as garbage collection, persistency, or marshalling which must be able to examine the type of any run-time value. We present a typed intermediate language that supports the analysis of quantified types. In particular, we provide both type-level and term-level constructs for analyzing quantified types, Our system supports structural induction on quantified types yet type-checking remains decidable. We also show that our system is compatible with a type-erasure semantics.
C1 Yale Univ, Dept Comp Sci, New Haven, CT 06520 USA.
C3 Yale University
RP Yale Univ, Dept Comp Sci, POB 208285, New Haven, CT 06520 USA.
EM saha@cs.yale.edu; trifonov@cs.yale.edu; shao@cs.yale.edu
OI Shao, Zhong/0000-0001-8184-7649
CR [Anonymous], 1974, LNCS
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   CRARY K, 1998, P 1998 ACM SIGPLAN I, P301
   Despeyroux J, 1997, LECT NOTES COMPUT SC, V1210, P147
   DUBOIS C, 1995, P 22 ACM C PRINC PRO, P118
   DUGGAN D, 1998, LECT NOTES COMPUTER, V1473, P273
   Girard J.-Y., 1972, PhD thesis
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Harper R, 1999, INFORM PROCESS LETT, V70, P1, DOI 10.1016/S0020-0190(99)00036-8
   HARPER R, 1995, P 22 ACM S PRINC PRO, P130
   HARPER R, 1993, P 20 ACM S PRINC PRO, P206
   LEAGUE C, 1999, P 1999 ACM SIGPLAN I, P183
   MINAMIDE Y, 1997, FULL LIFTING TYPE PA
   Minamide Yasuhiko, 1996, S PRINC PROGR LANG P, P271, DOI DOI 10.1145/237721.237791
   MONNIER S, 2001, P 2001 ACM C PROG LA, P81
   Morrisett G., 1998, POPL 98, P85, DOI DOI 10.1145/268946.268954
   NECULA GC, 1998, CMUCS98154 SCH COMP
   Ohori Atsushi., 1993, ACM SIGPLAN SIGACT S, P99
   PETERSON J, 1993, P ACM C PROGR LANG D, P227
   Pfenning Frank, 1989, LECT NOTES COMPUTER, DOI [10.1007/BFb0040259, DOI 10.1007/BFB0040259]
   PIERCE B, 1989, CMUCS89111 SCH COMP
   SHAO Z, 1997, P 1997 ACM SIGPLAN W
   SHAO Z, 1999, P 1999 ACM SIGPLAN I, P220
   SHAO Z, 1995, P ACM SIGPLAN 95 C P, P116
   SHAO Z, 1998, P 1998 ACM SIGPLAN I
   SHAO Z, 2002, P 29 ACM S PRINC PRO, P217
   SHAO Z, 1997, P 1997 ACM SIGPLAN I, P85
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   TARDITI D, 1996, CMUCS97108 SCH COMP
   WEIRICH S, 2000, P 5 ACM SIGPLAN INT, P58
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 31
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2003
VL 25
IS 2
BP 159
EP 209
DI 10.1145/641888.641889
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 659FD
UT WOS:000181765900001
OA Bronze
DA 2024-07-18
ER

PT J
AU Vukasovic, M
   Prokopec, A
AF Vukasovic, Maja
   Prokopec, Aleksandar
TI Exploiting Partially Context-sensitive Profiles to Improve Performance
   of Hot Code
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Ahead-of-time compilation; inlining; inline substitution
ID OPTIMIZATION; INFORMATION; EXPANSION
AB Availability of profiling information is a major advantage of just-in-time (JIT) compilation. Profiles guide the compilation order and optimizations, thus substantially improving program performance. Ahead-of-time (AOT) compilation can also utilize profiles, obtained during separate profiling runs of the programs. Profiles can be context-sensitive, i.e., each profile entry is associated with a call-stack. To ease profile collection and reduce overheads, many systems collect partially context-sensitive profiles, which record only a call-stack suffix. Despite prior related work, partially context-sensitive profiles have the potential to further improve compiler optimizations. In this article, we describe a novel technique that exploits partially context-sensitive profiles to determine which portions of code are hot and compile them with additional compilation budget. This technique is applicable to most AOT compilers that can access partially context-sensitive profiles, and its goal is to improve program performance without significantly increasing code size. The technique relies on a new hot-code-detection algorithm to reconstruct hot regions based on the partial profiles. The compilation ordering and the inlining of the compiler are modified to exploit the information about the hot code. We formally describe the proposed algorithm and its heuristics and then describe our implementation inside GraalVM Native Image, a state-of-the-art AOT compiler for Java. Evaluation of the proposed technique on 16 benchmarks from DaCapo, Scalabench, and Renaissance suites shows a performance improvement between 22% and 40% on 4 benchmarks, and between 2.5% and 10% on 5 benchmarks. Code-size increase ranges from 0.8%-9%, where 10 benchmarks exhibit an increase of less than 2.5%.
C1 [Vukasovic, Maja] Univ Belgrade, Sch Elect Engn, Belgrade 11000, Serbia.
   [Prokopec, Aleksandar] Oracle Labs, CH-8004 Zurich, Switzerland.
C3 University of Belgrade
RP Vukasovic, M (corresponding author), Univ Belgrade, Sch Elect Engn, Belgrade 11000, Serbia.
EM maja.vukasovic@etf.bg.ac.rs; aleksandar.prokopec@oracle.com
CR Alpern B, 2000, IBM SYST J, V39, P211, DOI 10.1147/sj.391.0211
   Ammons G, 2004, LECT NOTES COMPUT SC, V3086, P170
   Ammons G, 1997, ACM SIGPLAN NOTICES, V32, P85, DOI 10.1145/258916.258924
   [Anonymous], 2018, LLVM
   Arnold M, 2002, ACM SIGPLAN NOTICES, V37, P111, DOI 10.1145/583854.582432
   Arnold M, 2001, ACM SIGPLAN NOTICES, V36, P168, DOI 10.1145/381694.378832
   Arnold M, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/354222.353175
   Arnold M, 2000, ACM SIGPLAN NOTICES, V35, P52, DOI 10.1145/351403.351416
   Arnold Matthew, 2000, Approximating the Calling Context Tree Via Sampling
   Asher Yosi Ben, 2008, Aggressive Function Inlining: Preventing Loop Blockings in the Instruction Cache, P384, DOI [10.1007/978-3-540-77560-7_26, DOI 10.1007/978-3-540-77560-7_26]
   Ausiello G, 2012, ACM SIGPLAN NOTICES, V47, P867, DOI 10.1145/2398857.2384679
   Aycock J, 2003, ACM COMPUT SURV, V35, P97, DOI 10.1145/857076.857077
   Ayers A, 1997, ACM SIGPLAN NOTICES, V32, P134, DOI 10.1145/258916.258928
   Baev Ivan, 2015, Profile-based Indirect Call Promotion
   BALL T, 1994, ACM T PROGR LANG SYS, V16, P1319, DOI 10.1145/183432.183527
   Barik R, 2009, INT CONFER PARA, P41, DOI 10.1109/PACT.2009.32
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bond MD, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P97
   Bond MD, 2007, ACM SIGPLAN NOTICES, V42, P97, DOI 10.1145/1297105.1297035
   Buytaert D, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P553
   Casey K, 2003, LECT NOTES COMPUT SC, V2826, P329
   Chakrabarti DR, 2006, INT SYM CODE GENER, P221, DOI 10.1109/CGO.2006.17
   CHAMBERS C, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P1
   CHANG PP, 1991, SOFTWARE PRACT EXPER, V21, P1301, DOI 10.1002/spe.4380211204
   CHANG PP, 1992, SOFTWARE PRACT EXPER, V22, P349, DOI 10.1002/spe.4380220502
   Chen DH, 2010, INT SYM CODE GENER, P42
   CLICK C, 1995, SIGPLAN NOTICES, V30, P246, DOI 10.1145/223428.207154
   CLICK C, 1995, SIGPLAN NOTICES, V30, P35, DOI 10.1145/202530.202534
   Cooper K. D., 1992, ACM Letters on Programming Languages and Systems, V1, P22, DOI 10.1145/130616.130619
   Cooper KD, 2008, LECT NOTES COMPUT SC, V4959, P69
   Dantzig G. B., 1990, HIST SCI COMPUTING, P141, DOI DOI 10.1145/87252.88081
   Dantzig George B., 1955, Pac J Math, V5, P183, DOI DOI 10.2140/PJM.1955.5.183
   Dean J., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P273, DOI 10.1145/182409.182489
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Dmitriev M, 2004, INT SYM PERFORM ANAL, P141, DOI 10.1109/ISPASS.2004.1291366
   Duboscq Gilles, 2014, P INT C PRINC PRACT, P187, DOI DOI 10.1145/2647508.2647521
   Duesterwald E., 2000, Operating Systems Review, V34, P202, DOI 10.1145/384264.379241
   Eclipse Foundation, 2021, Eclipse Test and Performance Tool Platform
   Eisl Josef, 2017, P 14 INT C MAN LANG, P92, DOI [10.1145/3132190.3132209, DOI 10.1145/3132190.3132209]
   Eisl Josef, 2016, P 13 INT C PRINC PRA, DOI [10.1145/2972206.2972211, DOI 10.1145/2972206.2972211]
   Eugene Ball J., 1979, P SIGPLAN S COMP CON, P214, DOI [10.1145/800229.806972, DOI 10.1145/800229.806972]
   Fink SJ, 2003, INT SYM CODE GENER, P241, DOI 10.1109/CGO.2003.1191549
   Flückiger O, 2020, DLS '2020: PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P99, DOI 10.1145/3426422.3426984
   FREDKIN E, 1960, COMMUN ACM, V3, P490, DOI 10.1145/367390.367400
   Free Software Foundation, 2018, GCC
   Free Software Foundation, 2018, GCC GENERIC
   Free Software Foundation, 2018, GCC RTL
   Free Software Foundation, 2018, GCC 8 Changes
   Free Software Foundation, 2018, GCC GIMPLE
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Google LLC, 2021, V8 Engine
   GOSLING J, 1995, SIGPLAN NOTICES, V30, P111, DOI 10.1145/202530.202541
   GROVE D, 1995, SIGPLAN NOTICES, V30, P108, DOI 10.1145/217839.217848
   Hirzel M., 2001, 4th ACM Workshop on Feedback-Directed and Dynamic Optimization, P117
   Holzle U., 1994, SIGPLAN Notices, V29, P326, DOI 10.1145/773473.178478
   Hubicka J., 2005, P GCC DEVELOPERSSUMM, V216, P107
   HWU WMW, 1989, SIGPLAN NOTICES, V24, P246, DOI 10.1145/74818.74840
   IBM Corporation, 2021, Profile-Guided Optimization (PGO) using GCC
   Ingalls D, 1997, ACM SIGPLAN NOTICES, V32, P318, DOI 10.1145/263700.263754
   Jagannathan S, 1996, ACM SIGPLAN NOTICES, V31, P193, DOI 10.1145/249069.231417
   Jambor Martin, 2022, PGO in GCC 11
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Kistler T, 2003, ACM T PROGR LANG SYS, V25, P500, DOI 10.1145/778559.778562
   Knuth D. E., 1971, Software - Practice and Experience, V1, P105, DOI 10.1002/spe.4380010203
   Kosov Pavel, 2020, LLVM PGO Instrumentation: Example of CallSite-Aware Profiling
   Kotzmann T, 2007, INT SYM CODE GENER, P49
   Krintz C, 2003, INT SYM CODE GENER, P69, DOI 10.1109/CGO.2003.1191534
   Kumar Aditya, 2019, Hot Cold Splitting Optimization Pass In LLVM
   Le A, 2005, LECT NOTES COMPUT SC, V3443, P287, DOI 10.1007/11406921_22
   Leopoldseder D, 2018, INT SYM CODE GENER, P126, DOI 10.1145/3168811
   Levin R, 2008, LECT NOTES COMPUT SC, V4917, P291, DOI 10.1007/978-3-540-77560-7_20
   LLVM Project, 2021, LLVM profile-guided optimizations
   LLVM Project, 2023, LLVM PGO Context Sensitivity
   LLVM Project, 2018, LLVM Cost-Benefit Estimation Implementation at GitHub
   LLVM Project, 2018, LLVM Inliner Implementation at GitHub
   LLVM Project, 2018, LLVM Language Reference Manual
   LLVM Project, 2018, LLVM Inlining Parameters
   Milton Scott., 1994, Dynamic Dispatch in Object-Oriented Languages
   Moller A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428236
   Mytkowicz T, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P187, DOI 10.1145/1806596.1806618
   Novillo D, 2014, PROCEEDINGS OF LLVM-HPC 14 2014 LLVM COMPILER INFRASTRUCTURE IN HPC, P22, DOI 10.1109/LLVM-HPC.2014.8
   Oracle Company, 2015, Java Virtual Machine Specification (Java SE 8 Edition): Chapter 4, the Class File Format
   Oracle Company, 2021, Parallel Garbage Collector
   Oracle Company, 2021, Speculative guard motion in GraalVM
   Oracle Company, 2021, OpenJDK 8 Optional Class
   Oracle Company, 2021, Serial Native Image Garbage Collector
   Oracle Company, 2021, Netbeans: Open source Java profiler. v6.7
   Oracle Company, 2021, Control-flow-graph analysis in the Graal codebase
   Oracle Company, 2023, Java Mission Control
   Oracle Company, 2021, HotSpot Runtime Overview
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Prokopec A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P31, DOI 10.1145/3314221.3314637
   Prokopec A, 2019, INT SYM CODE GENER, P164, DOI [10.1109/CGO.2019.8661171, 10.5281/zenodo.2328430]
   Prokopec A, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P29, DOI 10.1145/3136000.3136002
   Rabbah RM, 2004, ACM SIGPLAN NOTICES, V39, P189, DOI 10.1145/1037187.1024416
   Reiss SP, 2001, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2001.919096
   Samples Alan D., 1991, Technical Report
   Sarimbekov A, 2011, ELECTRON NOTES THEOR, V279, P61, DOI 10.1016/j.entcs.2011.11.006
   SCHEIFLER RW, 1977, COMMUN ACM, V20, P647, DOI 10.1145/359810.359830
   Serrano M., 1997, Programming Languages: Implementations, Logics, and Programs. 9th International Symposium, PLILP'97, Including a Special Track on Declarative Programming Languages in Education. Proceedings, P143, DOI 10.1007/BFb0033842
   Serrano M, 2009, INT SYM CODE GENER, P221, DOI 10.1109/CGO.2009.12
   Sewe A, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P657
   Sewe Andreas., 2011, Proc. Works. on Virtual Machines and Intermediate Languages, P317
   Shabalin D, 2018, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA (SCALA '18), P61, DOI 10.1145/3241653.3241660
   Shabalin Denys, 2020, Just-In-Time PerformanceWithoutWarm-Up, P165
   Simon D, 2015, ACM T ARCHIT CODE OP, V12, DOI 10.1145/2764907
   Stadler L., 2013, P 7 ACM WORKSH VIRT, P1, DOI [10.1145/2542142.2542143, DOI 10.1145/2542142.2542143]
   Stadler Lukas, 2014, P ANN IEEE ACM INT S, P165, DOI DOI 10.1145/2544137.2544157
   Stancu C., 2014, Proceedings of the International Conference on the Principles and Practice of Programming in Java, P157, DOI [10.1145/2647508.2647524, DOI 10.1145/2647508.2647524]
   Steiner Edwin, 2007, P 5 INT S PRINC PRAC, P221, DOI [10.1145/1294325.1294356, DOI 10.1145/1294325.1294356]
   Suganuma T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P91
   Traub Omri, 2000, Technical Report
   Valgrind Developers, 2023, Valgrind
   Wade AW, 2017, ACM SIGPLAN NOTICES, V52, P1, DOI [10.1145/3078633.3081037, 10.1145/3140582.3081037]
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Whaley John., 2000, JAVA 00, P78
   Wimmer C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360610
   Würthinger T, 2008, LECT NOTES COMPUT SC, V4959, P193
   Würthinger T, 2017, ACM SIGPLAN NOTICES, V52, P662, DOI [10.1145/3062341.3062381, 10.1145/3140587.3062381]
   Yiu Graham, 2017, Partial Inlining with Multi-region Outlining based on PGO Information
   Zhao P, 2004, LECT NOTES COMPUT SC, V2958, P405, DOI 10.1007/978-3-540-24644-2_26
NR 122
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2023
VL 45
IS 4
AR 20
DI 10.1145/3612937
PG 64
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IO8S1
UT WOS:001167368600001
OA Bronze
DA 2024-07-18
ER

PT J
AU Scott, E
   Johnstone, A
   Walsh, R
AF Scott, Elizabeth
   Johnstone, Adrian
   Walsh, Robert
TI Multiple Input Parsing and Lexical Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Lexical analysis; programming language syntax specification; lexical
   disambiguation
AB This article introduces two new approaches in the areas of lexical analysis and context-free parsing. We present an extension, MGLL, of generalised parsing which allows multiple input strings to be parsed together efficiently, and we present an enhanced approach to lexical analysis which exploits this multiple parsing capability. The work provides new power to formal language specification and disambiguation, and brings new techniques into the historically well-studied areas of lexical and syntax analysis. It encompasses character-level parsing at one extreme and the classical LEX/YACC style division at the other, allowing the advantages of both approaches.
C1 [Scott, Elizabeth; Johnstone, Adrian; Walsh, Robert] Univ London, Dept Comp Sci, Royal Holloway, Egham TW20 0EX, Surrey, England.
C3 University of London; Royal Holloway University London
RP Scott, E (corresponding author), Univ London, Dept Comp Sci, Royal Holloway, Egham TW20 0EX, Surrey, England.
EM e.scott@rhul.ac.uk; johnstone@rhul.ac.uk; robert.michael.walsh@gmail.com
FU EPSRC [EP/I032509/1]
FX This work was partially supported by the EPSRC funded project
   EP/I032509/1 PLanCompS: Programming Language Components and
   Specifications.
CR Afroozeh Ali, 2013, Lecture Notes in Computer Science, V7745, P224
   [Anonymous], 1986, Efficient parsing for natural language
   Aycock J, 2001, SOFTWARE PRACT EXPER, V31, P803, DOI 10.1002/spe.390
   BILLOT S, 1990, 27TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P143
   Chanod Jean-Pierre., 1996, EUROPEAN C ARTIFICIA, P10
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Gosling James, 1996, The Java Language Specification
   Gosling James, 2022, The Java Language Specification, V18
   Johnstone A, 2014, SCI COMPUT PROGRAM, V87, P23, DOI 10.1016/j.scico.2013.09.012
   Johnstone A, 2011, LECT NOTES COMPUT SC, V6563, P306, DOI 10.1007/978-3-642-19440-5_20
   Johnstone A, 2011, LECT NOTES COMPUT SC, V6563, P42, DOI 10.1007/978-3-642-19440-5_4
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Kornai A, 1999, Extended Finite State Models of Languages, P72
   Lesk M.E., 1990, UNIX VOL 2, Vii, P375
   Cardona PAN, 2015, CUAD ACT, P154
   Parr T, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425
   Scott E, 2007, ACTA INFORM, V44, P427, DOI 10.1007/s00236-007-0054-z
   Scott E, 2006, ACM T PROGR LANG SYS, V28, P577, DOI 10.1145/1146809.1146810
   Scott E, 2018, SCI COMPUT PROGRAM, V166, P120, DOI 10.1016/j.scico.2018.06.001
   Scott E, 2016, SCI COMPUT PROGRAM, V125, P1, DOI 10.1016/j.scico.2016.04.003
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Scott E, 2010, SCI COMPUT PROGRAM, V75, P55, DOI 10.1016/j.scico.2009.07.001
   Scott Elizabeth, 2019, P 12 ACM SIGPLAN INT
   Tomita Masaru, 1991, Generalized LR parsing
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Visser Eelco, 1997, Technical Report P9707
   Walsh R. M., 2015, Ph.D. Thesis
NR 31
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2023
VL 45
IS 3
AR 14
DI 10.1145/3594734
PG 44
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA R8CZ1
UT WOS:001066592300001
OA Bronze
DA 2024-07-18
ER

PT J
AU Fan, HY
   Sun, ZH
   He, F
AF Fan, Hongyu
   Sun, Zhihang
   He, Fei
TI Satisfiability Modulo Ordering Consistency Theory for SC, TSO, and PSO
   Memory Models
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Program verification; satisfiability modulo theory; weak memory models;
   concurrency
ID CHECKING; EFFICIENT; SAT; REDUCTION; PROGRAMS
AB Automatically verifying multi-threaded programs is difficult because of the vast number of thread interleavings, a problem aggravated by weak memory consistency. Partial orders can help with verification because they can represent many thread interleavings concisely. However, there is no dedicated decision procedure for solving partial-order constraints.
   In this article, we propose a novel ordering consistency theory for concurrent program verification that is applicable not only under sequential consistency, but also under the TSO and PSO weak memory models. We further develop an efficient theory solver, which checks consistency incrementally, generates minimal conflict clauses, and includes a custom propagation procedure. We have implemented our approach in a tool, called Zord, and have conducted extensive experiments on the SV-COMP 2020 ConcurrencySafety benchmarks. Our experimental results show a significant improvement over the state-of-the-art.
C1 [Fan, Hongyu; Sun, Zhihang; He, Fei] Tsinghua Univ, Sch Software, Beijing, Peoples R China.
   [Fan, Hongyu; Sun, Zhihang; He, Fei] MoE, Key Lab Informat Syst Secur, Beijing, Peoples R China.
   [Fan, Hongyu; Sun, Zhihang; He, Fei] Beijing Natl Res Ctr Informat Sci & Technol, Beijing, Peoples R China.
C3 Tsinghua University
RP He, F (corresponding author), Tsinghua Univ, Sch Software, Beijing, Peoples R China.; He, F (corresponding author), MoE, Key Lab Informat Syst Secur, Beijing, Peoples R China.; He, F (corresponding author), Beijing Natl Res Ctr Informat Sci & Technol, Beijing, Peoples R China.
EM fhy18@mails.tsinghua.edu.cn; sunzh20@mails.tsinghua.edu.cn;
   hefei@tsinghua.edu.cn
OI He, Fei/0000-0002-4266-875X; Fan, Hongyu/0000-0002-6135-7308
FU National Natural Science Foundation of China [62072267, 62021002];
   National Key Research and Development Program of China [2018YFB1308601]
FX This work was supported in part by the National Natural Science
   Foundation of China (No. 62072267 and No. 62021002) and the National Key
   Research and Development Program of China (No. 2018YFB1308601).
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360576
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Ajwani D, 2007, LECT NOTES COMPUT SC, V4835, P464
   Ajwani D, 2008, ACM T ALGORITHMS, V4, DOI 10.1145/1383369.1383370
   Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   Alglave J, 2014, LECT NOTES COMPUT SC, V8559, P508, DOI 10.1007/978-3-319-08867-9_33
   Alglave J, 2010, LECT NOTES COMPUT SC, V6174, P258, DOI 10.1007/978-3-642-14295-6_25
   [Anonymous], 1994, The SPARC Architecture Manual, Version 9
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Bender MA, 2016, ACM T ALGORITHMS, V12, DOI 10.1145/2756553
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Beyer D, 2007, LECT NOTES COMPUT SC, V4590, P504
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Cordeiro L, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P331, DOI 10.1145/1985793.1985839
   Cunjing Ge, 2016, Languages and Compilers for Parallel Computing. 28th International Workshop, LCPC 2015. Revised Selected Papers: LNCS 9519, P287, DOI 10.1007/978-3-319-29778-1_18
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DAVIS M, 1962, COMMUN ACM, V5, P394, DOI 10.1145/368273.368557
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Ganai MK, 2008, LECT NOTES COMPUT SC, V5156, P114, DOI 10.1007/978-3-540-85114-1_10
   Ganzinger Harald, 2023, LECT NOTES COMPUT SC, V45, P175
   Gavrilenko N, 2019, LECT NOTES COMPUT SC, V11561, P355, DOI 10.1007/978-3-030-25540-4_19
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Gupta A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P331, DOI 10.1145/1926385.1926424
   Haeupler B, 2012, ACM T ALGORITHMS, V8, DOI 10.1145/2071379.2071382
   He F, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1264, DOI 10.1145/3453483.3454108
   Horn A, 2015, Arxiv, DOI arXiv:1504.00037
   Horn Alex, 2014, ARXIV
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Inverso O, 2015, IEEE INT CONF AUTOM, P807, DOI 10.1109/ASE.2015.108
   Inverso O, 2014, LECT NOTES COMPUT SC, V8559, P585, DOI 10.1007/978-3-319-08867-9_39
   Katriel I, 2006, ACM T ALGORITHMS, V2, P364, DOI 10.1145/1159892.1159896
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Kroening D., 2014, CBMC-C bounded model checker, P389, DOI DOI 10.1007/978-3-642-54862-8_26
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   MarchettiSpaccamela A, 1996, INFORM PROCESS LETT, V59, P53, DOI 10.1016/0020-0190(96)00075-0
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Pearce David J., 2007, Journal of Experimental Algorithmics, V11, P1, DOI DOI 10.1145/1187436.1210590
   Schrijver A., 1998, THEORY LINEAR INTEGE
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Sinha N, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P423, DOI 10.1145/1926385.1926433
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Tarjan R., 1971, P 12 ANN S SWITCH AU, P114, DOI DOI 10.1109/SWAT.1971.10
   Tomasco E, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P193, DOI 10.1109/FMCAD.2016.7886679
   Wang C, 2004, DES AUT CON, P535
   Wang C, 2008, LECT NOTES COMPUT SC, V4963, P382, DOI 10.1007/978-3-540-78800-3_29
   Wang C, 2009, LECT NOTES COMPUT SC, V5850, P256, DOI 10.1007/978-3-642-05089-3_17
   Yin LZ, 2018, IEEE INT CONF AUTOM, P645, DOI 10.1145/3238147.3238223
   Yin LZ, 2020, IEEE T SOFTWARE ENG, V46, P549, DOI 10.1109/TSE.2018.2864122
   Yin LZ, 2018, LECT NOTES COMPUT SC, V10806, P422, DOI 10.1007/978-3-319-89963-3_25
   Zhang NL, 2015, ACM SIGPLAN NOTICES, V50, P250, DOI [10.1145/2813885.2737956, 10.1145/2737924.2737956]
NR 62
TC 1
Z9 1
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2023
VL 45
IS 1
AR 6
DI 10.1145/3579835
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 9V9QK
UT WOS:000948718900006
OA Bronze
DA 2024-07-18
ER

PT J
AU Busi, M
   Noorman, J
   Van Bulck, J
   Galletta, L
   Degano, P
   Mühlberg, JT
   Piessens, F
AF Busi, Matteo
   Noorman, Job
   Van Bulck, Jo
   Galletta, Letterio
   Degano, Pierpaolo
   Muhlberg, Jan Tobias
   Piessens, Frank
TI Securing Interruptible Enclaved Execution on Small Microprocessors
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Language-based security; enclaves; full abstraction; secure compilation
ID COMPILATION
AB Computer systems often provide hardware support for isolation mechanisms such as privilege levels, virtual memory, or enclaved execution. Over the past years, several successful software-based side-channel attacks have been developed that break, or at least significantly weaken, the isolation that these mechanisms offer. Extending a processor with new architectural or micro-architectural features brings a risk of introducing new software-based side-channel attacks.
   This article studies the problem of extending a processor with new features without weakening the security of the isolation mechanisms that the processor offers. Our solution is heavily based on techniques from research on programming languages. More specifically, we propose to use the programming language concept of full abstraction as a general formal criterion for the security of a processor extension. We instantiate the proposed criterion to the concrete case of extending a microprocessor that supports enclaved execution with secure interruptibility. This is a very relevant instantiation, as several recent papers have shown that interruptibility of enclaves leads to a variety of software-based side-channel attacks. We propose a design for interruptible enclaves and prove that it satisfies our security criterion. We also implement the design on an open-source enclave-enabled microprocessor and evaluate the cost of our design in terms of performance and hardware size.
C1 [Busi, Matteo; Degano, Pierpaolo] Univ Pisa, Dept Comp Sci, Pisa, Italy.
   [Noorman, Job; Van Bulck, Jo; Muhlberg, Jan Tobias; Piessens, Frank] Katholieke Univ Leuven, Dept Comp Sci, IMEC, DistriNet, Leuven, Belgium.
   [Galletta, Letterio; Degano, Pierpaolo] IMT Sch Adv Studies Lucca, Lucca, Italy.
C3 University of Pisa; IMEC; KU Leuven; IMT School for Advanced Studies
   Lucca
RP Busi, M (corresponding author), Univ Pisa, Dept Comp Sci, Pisa, Italy.
EM matteo.busi@di.unipi.it; job.noorman@kuleuven.be;
   jo.vanbulck@kuleuven.be; letterio.gailetta@imtlucca.it;
   pierpaolo.degano@unipi.it; jantobias.muehlberg@kuleuven.be;
   frank.piessens@kuleuven.be
RI Busi, Matteo/IAM-3336-2023
OI Van Bulck, Jo/0000-0002-5953-9196; GALLETTA,
   LETTERIO/0000-0003-0351-9169; Muehlberg, Jan Tobias/0000-0001-5035-0576;
   Busi, Matteo/0000-0002-5557-8139
FU Department of Computer Science of the University of Pisa; Research
   Foundation -Flanders (FWO); EU Horizon 2020 [830892]; MIUR project PRIN
   [2017FTXR7S]; Research Fund KU Leuven; Agency for Innovation and
   Entrepreneurship (Flanders)
FX Matteo Busi has been partially supported by the research grant on
   Incremental type systems for secure compilation from the Department of
   Computer Science of the University of Pisa. Jo Van Bulck is supported by
   a grant of the Research Foundation -Flanders (FWO). Letterio Galletta
   has been partially supported by EU Horizon 2020 project No. 830892
   SPARTA and by MIUR project PRIN 2017FTXR7S IT MATTERS (Methods and Tools
   for Trustworthy Smart Systems). Pierpaolo Degano has been partially
   supported by the MIUR project PRIN 2017FTXR7S IT MATTERS (Methods and
   Tools for Trustworthy Smart Systems). This research is partially funded
   by the Research Fund KU Leuven, by the Agency for Innovation and
   Entrepreneurship (Flanders), and by a gift from Intel Corporation.
CR Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abate C, 2020, LECT NOTES COMPUT SC, V12075, P1, DOI 10.1007/978-3-030-44914-8_1
   Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Agten P, 2012, P IEEE CSFW, P171, DOI 10.1109/CSF.2012.12
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Ahmed A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   [Anonymous], 1989, CWI Q.
   [Anonymous], 2018, J CRYPTOGR ENG, DOI DOI 10.1007/s13389-016-0141-6
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Barthe G, 2018, P IEEE COMPUT SECUR, P328, DOI 10.1109/CSF.2018.00031
   Busi M, 2020, P IEEE COMPUT SECUR, P262, DOI 10.1109/CSF49147.2020.00026
   Canella C, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P249
   Chen GX, 2019, 2019 4TH IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P142, DOI 10.1109/EuroSP.2019.00020
   Cortiñas CT, 2020, P IEEE COMPUT SECUR, P214, DOI 10.1109/CSF49147.2020.00023
   Costan V., 2016, IACR Cryptol. ePrint Arch, DOI DOI 10.1159/000088809
   de Clercq R, 2014, IEEE INT CONF ASAP, P147, DOI 10.1109/ASAP.2014.6868649
   Devriese D, 2010, P IEEE S SECUR PRIV, P109, DOI 10.1109/SP.2010.15
   Disselkoen C, 2019, P IEEE S SECUR PRIV, P1238, DOI 10.1109/SP.2019.00047
   Ferraiuolo A, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P287, DOI 10.1145/3132747.3132782
   Fournet C, 2013, ACM SIGPLAN NOTICES, V48, P371, DOI 10.1145/2480359.2429114
   Goodspeed Travis, 2008, P 25 CHAOS COMM C VE
   Gotzfried J., 2015, P 31 C COMP SEC APPL, P241, DOI 10.1145/2818000.2856129
   Gruss D, 2017, THESIS GRAZ U TECHNO
   Guanciale R, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1853, DOI 10.1145/3372297.3417246
   Guarnieri M, 2020, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP40000.2020.00011
   Guarnieri Marco, 2019, ABS191008607 CORR
   He WJ, 2018, PR IEEE COMP DESIGN, P108, DOI 10.1109/ICCD.2018.00025
   Juglaret Y, 2016, P IEEE CSFW, P45, DOI 10.1109/CSF.2016.11
   Kashyap V, 2011, P IEEE S SECUR PRIV, P413, DOI 10.1109/SP.2011.19
   Kim Y, 2014, CONF PROC INT SYMP C, P361, DOI 10.1109/ISCA.2014.6853210
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Koeberl P, 2014, P 9 EUR C COMP SYST
   Lee S, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P557
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Lipp M, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P973
   McCune JM, 2010, P IEEE S SECUR PRIV, P143, DOI 10.1109/SP.2010.17
   McKeen F., 2013, Hasp@ isca, DOI 10.1145/2487726. 2488368
   Moghimi D, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P469
   Murdock K, 2020, P IEEE S SECUR PRIV, P1466, DOI 10.1109/SP40000.2020.00057
   Noorman  J., 2013, 22 USENIX SEC S USEN, P479
   Noorman J, 2017, ACM T PRIV SECUR, V20, DOI 10.1145/3079763
   Nunes I, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1429
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2017, P IEEE CSFW, P392, DOI 10.1109/CSF.2017.13
   Patrignani M, 2015, COMPUT LANG SYST STR, V42, P22, DOI 10.1016/j.cl.2015.03.002
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Schwarz Michael, 2017, Detection of Intrusions and Malware, and Vulnerability Assessment. 14th International Conference, DIMVA 2017. Proceedings: LNCS 10327, P3, DOI 10.1007/978-3-319-60876-1_1
   Schwarz M, 2019, LECT NOTES COMPUT SC, V11543, P177, DOI 10.1007/978-3-030-22038-9_9
   Tang A, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P1057
   Texas Instruments, 2016, MSP430X1XX FAM US
   Van Buick J, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1741, DOI 10.1145/3319535.3363206
   Van Bulck J, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P178, DOI 10.1145/3243734.3243822
   Van Bulck J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P991
   Van Bulck J, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P1041
   Van Bulck Jo, 2017, 2 WORKSHOP SYSTEM SO, P1, DOI [10.1145/3152701.3152706, DOI 10.1145/3152701.3152706]
   Van Bulck Jo, 2020, THESIS KU LEUVEN LEU
   Vassena M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434330
   Vassena M, 2018, J LOG ALGEBR METHODS, V95, P148, DOI 10.1016/j.jlamp.2017.12.003
   Weichbrodt N, 2016, LECT NOTES COMPUT SC, V9878, P440, DOI 10.1007/978-3-319-45744-4_22
   Xu YZ, 2015, P IEEE S SECUR PRIV, P640, DOI 10.1109/SP.2015.45
   Zagieboylo D, 2019, P IEEE COMPUT SECUR, P272, DOI 10.1109/CSF.2019.00026
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P503, DOI 10.1145/2694344.2694372
NR 62
TC 2
Z9 2
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2021
VL 43
IS 3
AR 12
DI 10.1145/3470534
PG 77
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YW8UD
UT WOS:000753687300003
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Florence, SP
   Fetscher, B
   Flatt, M
   Temps, WH
   St-Amour, V
   Kiguradze, T
   West, DP
   Niznik, C
   Yarnold, PR
   Findler, RB
   Belknap, SM
AF Florence, Spencer P.
   Fetscher, Burke
   Flatt, Matthew
   Temps, William H.
   St-Amour, Vincent
   Kiguradze, Tina
   West, Dennis P.
   Niznik, Charlotte
   Yarnold, Paul R.
   Findler, Robert Bruce
   Belknap, Steven M.
TI POP-PL: A Patient-Oriented Prescription Programming Language
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE DSL design; medical programming languages; medical prescriptions;
   empirical evaluation
ID VISUAL ANALOG; HEALTH-CARE; VALIDATION; SAFETY
AB A medical prescription is a set of health care instructions that govern the plan of care for an individual patient, which may include orders for drug therapy, diet, clinical assessment, and laboratory testing. Clinicians have long used algorithmic thinking to describe and implement prescriptions but without the benefit of a formal programming language. Instead, medical algorithms are expressed using a natural language patois, flowcharts, or as structured data in an electronic medical record system. The lack of a prescription programming language inhibits expressiveness; results in prescriptions that are difficult to understand, hard to debug, and awkward to reuse; and increases the risk of fatal medical error.
   This article reports on the design and evaluation of Patient-Oriented Prescription Programming Language (POP-PL), a domain-specific programming language designed for expressing prescriptions. The language is based around the idea that programs and humans have complementary strengths that, when combined properly, can make for safer, more accurate performance of prescriptions. Use of POP-PL facilitates automation of certain low-level vigilance tasks, freeing up human cognition for abstract thinking, compassion, and human communication.
   We implemented this language and evaluated its design attempting to write prescriptions in the new language and evaluated its usability by assessing whether clinicians can understand and modify prescriptions written in the language. We found that some medical prescriptions can be expressed in a formal domain-specific programming language, and we determined that medical professionals can understand and correctly modify programs written in POP-PL. We also discuss opportunities for refining and further developing POP-PL.
C1 [Florence, Spencer P.; Fetscher, Burke] Northwestern Univ, Dept Elect Engn & Comp Sci, Evanston, IL 60208 USA.
   [Flatt, Matthew] Univ Utah, Sch Comp, Salt Lake City, UT 84112 USA.
   [Temps, William H.; Kiguradze, Tina; West, Dennis P.; Belknap, Steven M.] Northwestern Univ, Feinberg Sch Med, Dept Dermatol, Evanston, IL USA.
   [St-Amour, Vincent; Findler, Robert Bruce] Northwestern Univ, Dept Elect Engn & Comp Sci, Evanston, IL USA.
   [West, Dennis P.] Northwestern Univ, Feinberg Sch Med, Dept Pediat, Evanston, IL USA.
   [Niznik, Charlotte] Northwestern Univ, Feinberg Sch Med, Dept Obstet & Gynecol, Evanston, IL USA.
   [Yarnold, Paul R.] Optimal Data Anal LLC, Chicago, IL USA.
   [Belknap, Steven M.] Northwestern Univ, Feinberg Sch Med, Dept Med, Evanston, IL USA.
C3 Northwestern University; Utah System of Higher Education; University of
   Utah; Northwestern University; Feinberg School of Medicine; Northwestern
   University; Northwestern University; Feinberg School of Medicine;
   Northwestern University; Feinberg School of Medicine; Northwestern
   University; Feinberg School of Medicine
RP Florence, SP (corresponding author), Northwestern Univ, Dept Elect Engn & Comp Sci, Evanston, IL 60208 USA.
EM spencer.florence@eecs.northwestern.edu;
   burke.fetscher@eecs.northwestern.edu; mflatt@cs.utah.edu;
   william.temps@northwestern.edu; stamourv@eecs.northwestern.edu;
   TinatinKiguradze2013@u.northwestern.edu; dwest@northwestern.edu;
   c-niznik@northwestern.edu; paul@planetyarnold.com;
   robby@eecs.northwestern.edu; sbelknap@northwestern.edu
RI Findler, Robert/B-7145-2009
OI Yarnold, Paul/0000-0002-1648-739X
FU National Science Foundation; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1526109] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1526324] Funding Source: National Science Foundation
FX This work is supported by the National Science Foundation.
CR [Anonymous], 2010, P 23ND ANN ACM S USE, DOI DOI 10.1145/1866029.1866040
   [Anonymous], 1993, A Small Matter of Programming
   Apple Computer Inc., 1988, HYP SCRIPT LANG GUID
   Belknap SM, 2008, CLIN PHARMACOL THER, V84, P385, DOI 10.1038/clpt.2008.24
   BELKNAP SM, 1991, MATH J, V1, P68
   Blackwell AF, 2001, LECT NOTES ARTIF INT, V2117, P325
   Blackwell Alan F, 2000, P 12 ANN WORKSH PSYC, V13
   BOUSSINOT F, 1991, P IEEE, V79, P1293, DOI 10.1109/5.97299
   Brus T., 1987, P FUNCT PROGR LANG C, P364
   CALLSEN CJ, 1994, J PARALLEL DISTR COM, V21, P289, DOI 10.1006/jpdc.1994.1060
   Chen Bin, 2006, P C SOFTW PROC CHANG
   Combi Carlo, 2012, P 2 ACM SIGHIT INT H, P141, DOI [10.1145/2110363.2110382event-place:Miami,Florida,USA, DOI 10.1145/2110363.2110382EVENT-PLACE:MIAMI,FLORIDA,USA]
   Committee on Identifying and Preventing Medication Errors, 2007, PREV MED ERR QUAL CH
   Cvach Maria, 2012, Biomed Instrum Technol, V46, P268, DOI 10.2345/0899-8205-46.4.268
   Division of Endocrinology Department of Medicine and Multidisciplinary ICU Committee, 2004, GUID INTR INS INF AD
   Filik R, 2006, HUM FACTORS, V48, P39, DOI 10.1518/001872006776412199
   Flatt Matthew, 2010, TR1 PLT
   Furnas GW, 2000, HUM-COMPUT INTERACT, V15, P205, DOI 10.1207/S15327051HCI1523_6
   GABA DM, 1987, ANESTHESIOLOGY, V66, P670, DOI 10.1097/00000542-198705000-00013
   Garnock-Jones Tony, 2014, P EUR S PROGR ESOP 1
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Green T. R. G., 1989, People and Computers V. Proceedings of the Fifth Conference of the British Computer Society Human-Computer Interaction Specialist Group, P443
   Green T. R. G., 1992, P 6 EUR C COGN ERG H
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Handelsman Y, 2011, ENDOCR PRACT, V17, P1, DOI 10.4158/EP.17.S2.1
   Harder Kathleen A., 2005, IMPROVING SAFETY HEP
   Healey Patrice M., 1994, COMMON MED DIAGNOSE
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hillestad R, 2005, HEALTH AFFAIR, V24, P1103, DOI 10.1377/hlthaff.24.5.1103
   James JT, 2013, J PATIENT SAF, V9, P122, DOI 10.1097/PTS.0b013e3182948a69
   Jansen Jan Martin, 2010, P LANG DESCR TOOLS A
   Jones SS, 2014, ANN INTERN MED, V160, P48, DOI 10.7326/M13-1531
   Kilmov Denis, 2013, P REV SEL AIME 2013
   Kindig David A., 1971, P HLTH C NEW YORK AC
   Ko AJ, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922658
   Koppel R, 2005, JAMA-J AM MED ASSOC, V293, P1197, DOI 10.1001/jama.293.10.1197
   Landrigan CP, 2010, NEW ENGL J MED, V363, P2124, DOI 10.1056/NEJMsa1004404
   Leape L L, 1993, QRB Qual Rev Bull, V19, P144
   LEAPE LL, 1994, JAMA-J AM MED ASSOC, V272, P1851, DOI 10.1001/jama.272.23.1851
   Listyowardojo TA, 2012, INT J QUAL HEALTH C, V24, P9, DOI 10.1093/intqhc/mzr069
   MATHER LE, 1982, BRIT J CLIN PHARMACO, V14, P385, DOI 10.1111/j.1365-2125.1982.tb01995.x
   Mertens WC, 2012, JT COMM J QUAL PATIE, V38, P497, DOI 10.1016/S1553-7250(12)38066-5
   Molino Gianpaolo, 2006, P AM MED INF ASS ANN
   Mushlin S. B., 2010, DECISION MAKING MED
   Pane JF, 2002, IEEE 2002 SYMPOSIA ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P198, DOI 10.1109/HCC.2002.1046372
   Pane JF, 2001, INT J HUM-COMPUT ST, V54, P237, DOI 10.1006/ijhc.2000.0410
   Peleg M, 2000, J AM MED INFORM ASSN, P645
   PRICE DD, 1983, PAIN, V17, P45, DOI 10.1016/0304-3959(83)90126-4
   PRICE DD, 1994, PAIN, V56, P217, DOI 10.1016/0304-3959(94)90097-3
   Roman G. C., 1985, Computer, V18, P14, DOI 10.1109/MC.1985.1662861
   Ruffolo M, 2005, LECT NOTES COMPUT SC, V3649, P334, DOI 10.1007/11538394_22
   Satyanarayan A., 2014, Symposium on User Interface Software and Technology, P669, DOI DOI 10.1145/2642918.2647360
   SCHIMMEL EM, 1964, ANN INTERN MED, V60, P100, DOI 10.7326/0003-4819-60-1-100
   Shahar Y, 1998, ARTIF INTELL MED, V14, P29, DOI 10.1016/S0933-3657(98)00015-3
   SIME ME, 1973, INT J MAN MACH STUD, V5, P105, DOI 10.1016/S0020-7373(73)80011-2
   Singer SJ, 2009, MED CARE, V47, P23, DOI 10.1097/MLR.0b013e31817e189d
   Singh H, 2009, ARCH INTERN MED, V169, P982, DOI 10.1001/archinternmed.2009.102
   SPRINT Research Group, 2015, N Engl J Med, V373, P2103, DOI 10.1056/NEJMoa1511939
   Stefik A., 2011, P 3 ACM SIGPLAN WORK, DOI DOI 10.1145/2089155.2089159
   STIELL IG, 1994, JAMA-J AM MED ASSOC, V271, P827, DOI 10.1001/jama.271.11.827
   Tu SW, 1999, J AM MED INFORM ASSN, P420
   van der Aalst WMP, 2009, COMPUT SCI-RES DEV, V23, P99, DOI 10.1007/s00450-009-0057-9
   van der Aalst Wil M. P., 2003, P 2003 INT C BUS PRO
   Washington Adventist Hospital, 2009, WEIGHT BAS BEP ORD
   Whitley KN, 1997, J VISUAL LANG COMPUT, V8, P109, DOI 10.1006/jvlc.1996.0030
   Yarnold P.R., 2016, Maximizing predictive validity
   YARNOLD PR, 2004, OPTIMAL DATA ANAL GU
NR 67
TC 1
Z9 1
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2018
VL 40
IS 3
AR 10
DI 10.1145/3210256
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA GT7HI
UT WOS:000444694800002
DA 2024-07-18
ER

PT J
AU Ligatti, J
   Blackburn, J
   Nachtigal, M
AF Ligatti, Jay
   Blackburn, Jeremy
   Nachtigal, Michael
TI On Subtyping-Relation Completeness, with an Application to Iso-Recursive
   Types
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Algorithms
AB Well-known techniques exist for proving the soundness of subtyping relations with respect to type safety. However, completeness has not been treated with widely applicable techniques, as far as we're aware.
   This article develops techniques for stating and proving that a subtyping relation is complete with respect to type safety and applies the techniques to the study of iso-recursive subtyping. A new proof technique, induction on failing derivations, is provided that may be useful in other domains as well.
   The common subtyping rules for iso-recursive types-the "Amber rules"-are shown to be incomplete with respect to type safety. That is, there exist iso-recursive types tau(1) and tau(2) such that tau(1) can safely be considered a subtype of tau(2), but tau(1) <= tau(2) is not derivable with the Amber rules.
   New, algorithmic rules are defined for subtyping iso-recursive types, and the rules are proved sound and complete with respect to type safety. The fully implemented subtyping algorithm is optimized to run in O(mn) time, where m is the number of mu-terms in the types being considered and n is the size of the types being considered.
C1 [Ligatti, Jay; Nachtigal, Michael] Univ S Florida, Tampa, FL 33620 USA.
   [Blackburn, Jeremy] Telefon Res, Barcelona, Spain.
C3 State University System of Florida; University of South Florida;
   Telefonica SA
RP Ligatti, J (corresponding author), Univ S Florida, Tampa, FL 33620 USA.
EM ligatti@cse.usf.edu; jeremyb@tid.es
FU National Science Foundation [CNS-0742736]
FX This work was supported in part by the National Science Foundation,
   under grant CNS-0742736.
CR AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Backes Michael, 2011, P THEOR SEC APPL TOS
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   CARDELLI L, 1986, LECT NOTES COMPUT SC, V242, P21
   Colazzo D, 2005, INFORM COMPUT, V198, P71, DOI 10.1016/j.ic.2004.11.003
   Cook WilliamR., 1989, Proceedings of the 17th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P125
   Dezani-Ciancaglini Mariangiola, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P194, DOI 10.1007/978-3-319-08918-8_14
   Frisch A., 2004, Ph. D. Dissertation.
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Gapeyev V, 2002, J FUNCT PROGRAM, V12, P511, DOI 10.1017/S0956796802004318
   Gauthier N, 2004, ACM SIGPLAN NOTICES, V39, P150, DOI 10.1145/1016848.1016872
   Harper R., 2013, PRACTICAL FDN PROGRA
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   Hosoya Haruo, 1998, Datatypes and Subtyping
   Kozen D., 1995, Mathematical Structures in Computer Science, V5, P113, DOI 10.1017/S0960129500000657
   League Christopher, 1998, YALECSTR1171 YAL U
   Ligatti Jay, 2016, INDUCTION FAILING DE
   Ligatti Jay, 2016, SUBTYPING ALGORITHM
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   MacQueen D., 1984, PRINCIPLES PROGRAMMI, P165, DOI DOI 10.1145/800017.800528
   Park Sungwoo, 2013, P INT C AUT LANG PRO
   Pierce B.C., 1991, THESIS
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pierik Cees, 2005, P 7 WORKSH FORM TECH
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Sekiguchi T., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P667
   Simons A., 2002, J OBJECT TECHNOLOGY, V1, P27
   Simons Anthony J. H., 1994, CS946 U SHEFF
   Stone Christopher A., 2005, EQUATIONAL THEORIES
   Tate Ross, 2011, P 2011 ACM SIGPLAN C
   van Bakel Steffen, 2000, TRARP052000 AUSTR NA
   Vanderwaart Joseph C., 2003, P ACM SIGPLAN INT WO
   Vouillon J, 2006, ACM SIGPLAN NOTICES, V41, P103, DOI 10.1145/1111320.1111047
   Vouillon Jerome, 2004, P 18 INT WORKSH COMP
NR 36
TC 12
Z9 12
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2017
VL 39
IS 1
AR 4
DI 10.1145/2994596
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ER1IR
UT WOS:000398544100004
DA 2024-07-18
ER

PT J
AU Grosser, T
   Verdoolaege, S
   Cohen, A
AF Grosser, Tobias
   Verdoolaege, Sven
   Cohen, Albert
TI Polyhedral AST Generation Is More Than Scanning Polyhedra
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Performance; Polyhedral compilation; code generation;
   unrolling; index set splitting; Presburger relations
AB mathematical representations such as integer polyhedra have been shown to be useful to precisely analyze computational kernels and to express complex loop transformations. Such transformations rely on abstract syntax tree (AST) generators to convert the mathematical representation back to an imperative program. Such generic AST generators avoid the need to resort to transformation-specific code generators, which may be very costly or technically difficult to develop as transformations become more complex. Existing AST generators have proven their effectiveness, but they hit limitations in more complex scenarios. Specifically, (1) they do not support or may fail to generate control flow for complex transformations using piecewise schedules or mappings involving modulo arithmetic; (2) they offer limited support for the specialization of the generated code exposing compact, straightline, vectorizable kernels with high arithmetic intensity necessary to exploit the peak performance of modern hardware; (3) they offer no support for memory layout transformations; and (4) they provide insufficient control over the AST generation strategy, preventing their application to complex domain-specific optimizations.
   We present a new AST generation approach that extends classical polyhedral scanning to the full generality of Presburger arithmetic, including existentially quantified variables and piecewise schedules, and introduce new optimizations for the detection of components and shifted strides. Not limiting ourselves to control flow generation, we expose functionality to generate AST expressions from arbitrary piecewise quasi-affine expressions, which enables the use of our AST generator for data-layout transformations. We complement this with support for specialization by polyhedral unrolling, user-directed versioning, and specialization of AST expressions according to the location at which they are generated, and we complete this work with finegrained user control over the AST generation strategies used. Using this generalized idea of AST generation, we present how to implement complex domain-specific transformations without the need to write specialized code generators, but instead relying on a generic AST generator parametrized to a specific problem domain.
C1 [Grosser, Tobias; Cohen, Albert] INRIA, Sophia Antipolis, France.
   [Grosser, Tobias; Cohen, Albert] Ecole Normale Super, Paris, France.
   [Verdoolaege, Sven] Ecole Normale Super, INRIA, Paris, France.
   [Verdoolaege, Sven] Katholieke Univ Leuven, Leuven, Belgium.
C3 Inria; Universite PSL; Ecole Normale Superieure (ENS); Inria; KU Leuven
RP Grosser, T (corresponding author), INRIA, Sophia Antipolis, France.
RI Verdoolaege, Sven/JMR-4629-2023
OI Verdoolaege, Sven/0000-0003-3179-2736; Grosser,
   Tobias/0000-0003-3874-6003
FU Intel Corporation; Google Europe Fellowship in Efficient Computing;
   European [287767]; ARTEMIS project COPCAMS [332913]; Swissuniversities
   through the Platform for Advanced Computing Initiative (PASC)
FX This work was partly funded by a gift received by LIACS from Intel
   Corporation; a Google Europe Fellowship in Efficient Computing; the
   European FP7 project CARP id. 287767 and the ARTEMIS project COPCAMS id.
   332913; and by Swissuniversities through the Platform for Advanced
   Computing Initiative (PASC).
NR 0
TC 38
Z9 44
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2015
VL 37
IS 4
AR 12
DI 10.1145/2743016
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CP6NT
UT WOS:000360005000002
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Aung, M
   Horwitz, S
   Joiner, R
   Reps, T
AF Aung, Min
   Horwitz, Susan
   Joiner, Rich
   Reps, Thomas
TI Specialization Slicing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Program slicing; program specialization; executable slice;
   feature removal; program dependence graph; pushdown system;
   reverse-deterministic automaton
ID PROGRAM; GRAPHS
AB This paper defines a new variant of program slicing, called specialization slicing, and presents an algorithm for the specialization-slicing problem that creates an optimal output slice. An algorithm for specialization slicing is polyvariant: for a given procedure p, the algorithm may create multiple specialized copies of p. In creating specialized procedures, the algorithm must decide for which patterns of formal parameters a given procedure should be specialized and which program elements should be included in each specialized procedure.
   We formalize the specialization-slicing problem as a partitioning problem on the elements of the possibly infinite unrolled program. To manipulate possibly infinite sets of program elements, the algorithm makes use of automata-theoretic techniques originally developed in the model-checking community. The algorithm returns a finite answer that is optimal (with respect to a criterion defined in, the article). In particular, (i) each element replicated by the specialization-slicing algorithm provides information about specialized patterns of program behavior that are intrinsic to the program, and (ii) the answer is of minimal size (i.e., among all possible answers with property (i), there is no smaller one).
   The specialization-slicing algorithm provides a new way to create executable slices. Moreover, by combining specialization slicing with forward slicing, we obtain a method for removing unwanted features from a program. While it was previously known how to solve the feature-removal problem for single-procedure programs, it wag not known how to solve it for programs with procedure calls.
C1 [Aung, Min; Horwitz, Susan; Joiner, Rich; Reps, Thomas] Univ Wisconsin, Dept Comp Sci, Madison, WI 53703 USA.
   [Reps, Thomas] GrammaTech Inc, Ithaca, NY 14850 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Aung, M (corresponding author), Univ Wisconsin, Dept Comp Sci, 1210 W Dayton St, Madison, WI 53703 USA.
EM aung@cs.wisc.edu; horwitz@cs.wisc.edu; joiner@cs.wisc.edu;
   reps@cs.wisc.edu
FU NSF [CCF-0524051, CCF-0540955, CCF-0810053, CCF-0904371]; ONR
   [N00014-01-1-0708, N00014-01-1-0796, N00014-09-1-0510, N00014-09-1-0776,
   N00014-10-M-0251, N00014-11-C-0447]; ARL [W911NF-09-1-0413]; AFRL
   [FA8750-05-C-0179, FA8750-06-C-0249, FA9550-09-1-0279,
   FA8650-10-C-7088]; DARPA [HR0011-12-2-0012]; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [0904371] Funding Source: National Science Foundation
FX The work was supported in part by NSF under grants CCF-{0524051,
   0540955, 0810053, 0904371}; by ONR under grants N00014-{01-1-0708,
   01-1-0796, 09-1-0510, 09-1-0776, 10-M-0251, 11-C-0447}; by ARL under
   grant W911NF-09-1-0413; by AFRL under grants FA8750-05-C-0179,
   FA8750-06-C-0249, FA9550-09-1-0279 and FA8650-10-C-7088; and by DARPA
   under cooperative agreement HR0011-12-2-0012. Any opinions, findings,
   and conclusions or recommendations expressed in this publication are
   those of the authors, and do not necessarily reflect the views of the
   sponsoring agencies.
CR Andersen L. O., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P47, DOI 10.1145/154630.154636
   Anderson P., 2003, TSE, V29, P8
   [Anonymous], 2000, LNCS, DOI [10.1007/10722167_20, DOI 10.1007/1072216720]
   [Anonymous], 1971, Theory of Machines and Computations, DOI DOI 10.1016/B978-0-12-417750-5.50022-1
   [Anonymous], 1993, Texts and Monographs in Computer Science
   [Anonymous], JPL
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   ANSI C, 2005, 9899TC2 ANSI C ISOIE
   Bates S., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P384, DOI 10.1145/158511.158694
   Binklev D., 2012, COMMUNICATION
   Binkley D, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P43
   Binkley D., 1993, ACM Letters on Programming Languages and Systems, V2, P31, DOI 10.1145/176454.176473
   Binkley D., 1992, Conference on Software Maintenance 1992 (Cat.No.92CH3206-0), P41, DOI 10.1109/ICSM.1992.242560
   Binkley D, 1997, IEEE T SOFTWARE ENG, V23, P498, DOI 10.1109/32.624306
   Binkley D., 1996, Advances in Computers, V43, P1
   Binkley DW, 2006, FORM ASP COMPUT, V18, P103, DOI 10.1007/s00165-005-0077-6
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouajjani A, 2000, INFORM PROCESS LETT, V74, P221, DOI 10.1016/S0020-0190(00)00055-7
   Buchi J. R., 1964, Archiv fur mathematische Logik und Grundlagenforschung, V6, P91, DOI DOI 10.1007/BF01969548
   Buchi J.R., 1988, Finite Automata, their Algebras and Grammars
   Bulyonkov M. A., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P59, DOI 10.1145/154630.154637
   CANFORA G, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P424, DOI 10.1109/ICSM.1994.336752
   CAUCAL D, 1992, THEOR COMPUT SCI, V106, P61, DOI 10.1016/0304-3975(92)90278-N
   Chaudhuri S, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1328897.1328460
   CodeSurfer, 2014, CODESURFER SYST
   Cong Sun, 2011, Proceedings of the 2011 Eighth International Conference on Information Technology: New Generations (ITNG), P321, DOI 10.1109/ITNG.2011.63
   COOPER KD, 1988, SIGPLAN NOTICES, V23, P57, DOI 10.1145/960116.53996
   Danicic S, 2005, J SYST SOFTWARE, V77, P241, DOI 10.1016/j.jss.2004.03.034
   DeLucia A, 1996, FOURTH WORKSHOP ON PROGRAM COMPREHENSION, PROCEEDINGS, P9, DOI 10.1109/WPC.1996.501116
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Field J., 1995, POPL
   Finkel A., 1997, ENTCS, V9
   Forgacs I., 1997, P 9 INT C SOFTW ENG
   Fox C., 2004, SPE, V34, P1
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Giacobazzi R., 2003, Higher-Order and Symbolic Computation, V16, P297, DOI 10.1023/A:1025872819613
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gupta A., 1994, CMUCS94208
   Harman M, 2003, J SYST SOFTWARE, V68, P45, DOI 10.1016/S0164-1212(02)00135-8
   Harman M, 1997, PROG COMPREHEN, P70, DOI 10.1109/WPC.1997.601266
   Hong HS, 2005, FIFTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P25
   HORWITZ S, 1989, ACM T PROGR LANG SYS, V11, P345, DOI 10.1145/65979.65980
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Horwitz S., 1992, International Conference on Software Engineering, P392, DOI 10.1145/143062.143156
   HORWITZ S, 1991, ACTA INFORM, V28, P713, DOI 10.1007/BF01261653
   HORWITZ S, 1990, SIGPLAN NOTICES, V25, P234, DOI 10.1145/93548.93574
   Horwitz S., 2010, TSE, V36, P1
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Jackson D., 1994, SIGSOFT Software Engineering Notes, V19, P2, DOI 10.1145/195274.195281
   Jaffar J, 2012, LECT NOTES COMPUT SC, V7460, P231, DOI 10.1007/978-3-642-33125-1_17
   Kidd N., 2007, WALi: The Weighted Automaton Library
   Krinke J, 2004, FOURTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P29
   Kuck R. H., 1981, Proceedings of the 8th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P207
   Lakhotia A, 1998, INFORM SOFTWARE TECH, V40, P677, DOI 10.1016/S0950-5849(98)00091-3
   Lyle J., 1986, P 1 C EMPIRICAL STUD, P187
   Lyle J. R., 1987, Second International Conference on Computers and Applications (Cat. No.87CH2433-1), P877
   Mund G., 2007, COMPILER DESIGN HDB
   OTTENSTEIN KJ, 1984, SIGPLAN NOTICES, V19, P177, DOI 10.1145/390011.808263
   Ouarbya L, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P181, DOI 10.1109/WCRE.2002.1173076
   Reps T., 1996, Partial Evaluation. International Seminar. Selected Papers, P409
   Reps T., 1994, SIGSOFT Software Engineering Notes, V19, P11, DOI 10.1145/195274.195287
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T., 1995, SIGSOFT SOFTW ENG NO, P41, DOI [10.1145/222124.222138, DOI 10.1145/222124.222138]
   SCHWOON S, 2002, THESIS TU MUNICH MUN
   Sebej J., 2010, Proceedings of ITAT, volume 683 of CEUR Workshop Proceedings, V683, P47
   Snelting G, 2006, ACM T SOFTW ENG METH, V15, P410, DOI 10.1145/1178625.1178628
   Sun C., 2010, P 10 INT C QUAL SOFT, P142
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
NR 70
TC 2
Z9 2
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2014
VL 36
IS 2
AR 5
DI 10.1145/2566620
PG 67
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AM4YE
UT WOS:000339861300001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Binkley, D
   Gold, N
   Harman, M
   Islam, S
   Krinke, J
   Li, Z
AF Binkley, David
   Gold, Nicolas
   Harman, Mark
   Islam, Syed
   Krinke, Jens
   Li, Zheng
TI Efficient Identification of Linchpin Vertices in Dependence Clusters
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Performance; Slicing; internal representation; performance
   enhancement; empirical study
AB Several authors have found evidence of large dependence clusters in the source code of a diverse range of systems, domains, and programming languages. This raises the question of how we might efficiently locate the fragments of code that give rise to large dependence clusters. We introduce an algorithm for the identification of linchpin vertices, which hold together large dependence clusters, and prove correctness properties for the algorithm's primary innovations. We also report the results of an empirical study concerning the reduction in analysis time that our algorithm yields over its predecessor using a collection of 38 programs containing almost half a million lines of code. Our empirical findings indicate improvements of almost two orders of magnitude, making it possible to process larger programs for which it would have previously been impractical.
C1 [Binkley, David] Loyola Univ Maryland, Baltimore, MD 21210 USA.
   [Gold, Nicolas; Harman, Mark; Islam, Syed; Krinke, Jens] UCL, Dept Comp Sci, London WC1E 6BT, England.
   [Li, Zheng] Beijing Univ Chem Technol, Beijing 100029, Peoples R China.
C3 Loyola University Maryland; University of London; University College
   London; Beijing University of Chemical Technology
RP Binkley, D (corresponding author), Loyola Univ Maryland, Baltimore, MD 21210 USA.
EM binkley@cs.loyola.edu
RI Krinke, Jens/E-9011-2011; Li, Zheng/L-8594-2015
OI Krinke, Jens/0000-0003-1009-2861; Harman, Mark/0000-0002-5864-4488; Li,
   Zheng/0000-0002-3938-7033
FU NSF [CCF 0916081]; UK Engineering and Physical Sciences Research Council
   [EP/F01044, EP/F059442]; Loyola University Hauber student research
   program; EPSRC
FX This work was supported by NSF grant CCF 0916081; the UK Engineering and
   Physical Sciences Research Council [grant numbers EP/F01044,
   EP/F059442]; and by the Loyola University Hauber student research
   program. Data from the EPSRC-funded portions of this work may be
   available by contacting Dr. Gold. Please note that intellectual property
   or other restrictions may prevent the full disclosure of this data.
CR Acharya M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P746, DOI 10.1145/1985793.1985898
   [Anonymous], 9419 DIKU U COP
   Balmas F, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P145, DOI 10.1109/SCAM.2002.1134114
   Beszédes A, 2007, PROC IEEE INT CONF S, P254
   Binkley D, 2005, PROC IEEE INT CONF S, P177
   Binkley D., 1993, ACM Letters on Programming Languages and Systems, V2, P31, DOI 10.1145/176454.176473
   Binkley David, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering - Workshops, P25, DOI 10.1109/ASEW.2008.4686318
   Binkley D., 2009, P 9 INT WORK C SOURC
   Binkley D. W, 1993, ACM LETT PROGRAM LAN, V3, p,
   Binkley D, 2007, FoSE 2007: Future of Software Engineering, P104, DOI 10.1109/FOSE.2007.27
   Binkley D, 2010, J SYST SOFTWARE, V83, P96, DOI 10.1016/j.jss.2009.03.038
   Black S, 2001, J SOFTW MAINT EVOL-R, V13, P263, DOI 10.1002/smr.233
   Black S., 2006, PROGRAM SLICING, V05451
   Black S, 2009, 2009 35TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS, PROCEEDINGS, P3, DOI 10.1109/SEAA.2009.94
   Deng YB, 2001, PROG COMPREHEN, P50, DOI 10.1109/WPC.2001.921713
   Eberle W, 2009, P 5 ANN WORKSH CYB S
   Eisenbarth T, 2003, IEEE T SOFTWARE ENG, V29, P210, DOI 10.1109/TSE.2003.1183929
   Fahndrich M, 1998, ACM SIGPLAN NOTICES, V33, P85, DOI 10.1145/277652.277667
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   *GRAMM INC, 2002, COD SLIC SYST
   Hajnal A, 2012, J SOFTW-EVOL PROC, V24, P67, DOI 10.1002/smr.533
   Harman M, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596528
   HORWITZ S, 1990, ACM T PROGR LANG SYS, V12, P26, DOI [10.1145/77606.77608, 10.1145/960116.53994]
   Islam S., 2010, P 9 ACM SIGPLAN SIGS, P53
   Islam S., 2010, P 9 ACM SIGPLAN SIGS
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Lin SD, 2003, THIRD IEEE INTERNATIONAL CONFERENCE ON DATA MINING, PROCEEDINGS, P171
   Madey G., 2003, P ARR C HUM COMPL SY
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   Praditwong K, 2011, IEEE T SOFTWARE ENG, V37, P264, DOI 10.1109/TSE.2010.26
   Rattigan M., 2005, ACM SIGKDD EXPL NEWS, V7, P2
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T., 1988, 777 U WISC
   Reps T., 1995, SIGSOFT SOFTW ENG NO, P41, DOI [10.1145/222124.222138, DOI 10.1145/222124.222138]
   Savernik L., 2007, LNI, V106, P357
   Sharir M., 1981, 2 APPROACHES INTERPR
   Szegedi A, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P233
   Tonella P, 2003, IEEE T SOFTWARE ENG, V29, P495, DOI 10.1109/TSE.2003.1205178
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Yong SH, 1999, ACM SIGPLAN NOTICES, V34, P91, DOI 10.1145/301631.301647
   Yoo S, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P201
NR 41
TC 1
Z9 1
U1 0
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2013
VL 35
IS 2
AR 7
DI 10.1145/2491522.2491524
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 191XT
UT WOS:000322449200002
OA Green Accepted, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Ben-Amram, AM
   Genaim, S
   Masud, AN
AF Ben-Amram, Amir M.
   Genaim, Samir
   Masud, Abu Naser
TI On the Termination of Integer Loops
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Verification; Theory; Integer loops; termination; linear constraints
ID UNDECIDABILITY
AB In this article we study the decidability of termination of several variants of simple integer loops, without branching in the loop body and with affine constraints as the loop guard (and possibly a precondition). We show that termination of such loops is undecidable in some cases, in particular, when the body of the loop is expressed by a set of linear inequalities where the coefficients are from Z boolean OR {r} with r an arbitrary irrational; when the loop is a sequence of instructions, that compute either linear expressions or the step function; and when the loop body is a piecewise linear deterministic update with two pieces. The undecidability result is proven by a reduction from counter programs, whose termination is known to be undecidable. For the common case of integer linear-constraint loops with rational coefficients we have not succeeded in proving either decidability or undecidability of termination, but we show that a Petri net can be simulated with such a loop; this implies some interesting lower bounds. For example, termination for a partially specified input is at least EXPSPACE-hard.
C1 [Ben-Amram, Amir M.] Acad Coll Tel Aviv Yaffo, Tel Aviv, Israel.
   [Genaim, Samir] Univ Complutense Madrid, E-28040 Madrid, Spain.
   [Masud, Abu Naser] Tech Univ Madrid, Madrid, Spain.
C3 Complutense University of Madrid; Universidad Politecnica de Madrid
RP Genaim, S (corresponding author), Univ Complutense Madrid, E-28040 Madrid, Spain.
EM genaim@gmail.com
OI Masud, Abu Naser/0000-0002-4872-1208; Genaim, Samir/0000-0002-7176-1881
FU Information and Communication Technologies program of the EC; Future and
   Emerging Technologies (FET) [ICT-231620 HATS]; Spanish Ministry of
   Science and Innovation (MICINN) [TIN-2008-05624]; GPD Research Group
   [UCM-BSCH-GR35/10-A-910502]; Madrid Regional Government [S2009TIC-1465]
FX Work of S. Genaim and A. N. Masud was funded in part by the Information
   and Communication Technologies program of the EC, Future and Emerging
   Technologies (FET), under the ICT-231620 HATS project, by the Spanish
   Ministry of Science and Innovation (MICINN) under the TIN-2008-05624
   DOVES project, the UCM-BSCH-GR35/10-A-910502 GPD Research Group and by
   the Madrid Regional Government under the S2009TIC-1465 PROMETIDOS-CM
   project.
CR Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   [Anonymous], LINEAR ALGEBRA NET T
   [Anonymous], RECURSION THEORY
   [Anonymous], 1985, MONOGRAPHS THEORETIC
   Bagnara R, 2012, INFORM COMPUT, V215, P47, DOI 10.1016/j.ic.2012.03.003
   BEN-AMRAM A. M., 2008, LNCS, V5028, P46
   Ben-Amram AM, 2008, ACM T PROGR LANG SYS, V30
   Ben-Amram AM, 2012, LECT NOTES COMPUT SC, V7148, P72, DOI 10.1007/978-3-642-27940-9_6
   Ben-Amram AM, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(3:04)2011
   Ben-Amram AM, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(3:2)2010
   Ben-Amram AM, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180480
   Blondel VD, 2001, THEOR COMPUT SCI, V255, P687, DOI 10.1016/S0304-3975(00)00399-6
   Bozga M, 2012, LECT NOTES COMPUT SC, V7214, P252, DOI 10.1007/978-3-642-28756-5_18
   Bozzelli L, 2012, LECT NOTES COMPUT SC, V7148, P88, DOI 10.1007/978-3-642-27940-9_7
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3653, P488, DOI 10.1007/11539452_37
   Braverman M, 2006, LECT NOTES COMPUT SC, V4144, P372, DOI 10.1007/11817963_34
   Bruynooghe M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216378
   Codish M, 2005, LECT NOTES COMPUT SC, V3668, P326, DOI 10.1007/11562931_25
   Colon M. A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P67
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Dufourd C., 1999, Automata, Languages and Programming. 26th International Colloquium, ICALP'99. Proceedings (Lecture Notes in Computer Science Vol.1644), P301
   Esparza J., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P374
   Esparza Javier, 1994, BRICS REPORT SERIES, V1, DOI [10.7146/brics.v1i8.21662, DOI 10.7146/BRICS.V1I8.21662]
   Giesl J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890030
   Giesl R, 2004, LECT NOTES COMPUT SC, V3091, P210
   HACK M., 1976, MITLCSTR161
   JANCAR P, 1995, THEOR COMPUT SCI, V148, P281, DOI 10.1016/0304-3975(95)00037-W
   Kurtz SA, 2007, LECT NOTES COMPUT SC, V4484, P542
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Lindenstrauss N, 1997, LOGIC PROGRAMM, P63
   Lindenstrauss N, 1997, LECT NOTES COMPUT SC, V1254, P444
   LIPTON R. J., 1976, 63 YAL U
   MATIYASEVICH, 2000, HILBERTS 10 PROBLEM
   Mehlhorn K, 2001, SYMBOLIC ALGEBRAIC METHODS AND VERIFICATION METHODS, P163
   Mesnard F, 2008, THEOR PRACT LOG PROG, V8, P111, DOI 10.1017/S1471068407003122
   MEYER RR, 1975, J OPTIMIZ THEORY APP, V16, P191, DOI 10.1007/BF01262932
   Minsky M., 1967, Computation: finite and infinite machines
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Rackoff C., 1978, Theoretical Computer Science, V6, P223, DOI 10.1016/0304-3975(78)90036-1
   Sohn K., 1991, Proceedings of the Tenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P216, DOI 10.1145/113413.113433
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   Tiwari A., 2004, LNCS, V3114, P387
NR 42
TC 13
Z9 14
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2012
VL 34
IS 4
AR 16
DI 10.1145/2400676.2400679
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 072GT
UT WOS:000313658500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Apel, S
   Hutchins, D
AF Apel, Sven
   Hutchins, Delesley
TI A Calculus for Uniform Feature Composition
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Design; Languages; Theory; Feature-oriented programming; feature
   composition; type systems; principle of uniformity
ID SUPERIMPOSITION; IMPLEMENTATION; SEMANTICS; OBJECTS; TRAITS; JAVA
AB The goal of feature-oriented programming (FOP) is to modularize software systems in terms of features. A feature refines the content of a base program. Both base programs and features may contain various kinds of software artifacts, for example, source code in different languages, models, build scripts, and documentation. We and others have noticed that when composing features, different kinds of software artifacts can be refined in a uniform way, regardless of what they represent. We present gDEEP, a core calculus for feature composition, which captures the language independence of FOP; it can be used to compose features containing many different kinds of artifact in a type-safe way. The calculus allows us to gain insight into the principles of FOP and to define general algorithms for feature composition and validation. We provide the formal syntax, operational semantics, and type system of gDEEP and outline how languages like Java, Haskell, Bali, and XML can be plugged in.
C1 [Apel, Sven] Univ Passau, Dept Math & Informat, D-94032 Passau, Germany.
   [Hutchins, Delesley] MZA Associates Corp, Albuquerque, NM 87106 USA.
C3 University of Passau
RP Apel, S (corresponding author), Univ Passau, Dept Math & Informat, Innstr 33, D-94032 Passau, Germany.
EM apel@uni-passau.de; delesley@gmail.com
OI Apel, Sven/0000-0003-3687-2233
FU German Research Foundation (DFG) [AP 206/2-1]
FX This work was funded in part by the German Research Foundation (DFG),
   project number AP 206/2-1.
CR Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   Anfurrutia FI, 2007, LECT NOTES COMPUT SC, V4607, P473
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   [Anonymous], ACM COMPUTING SURVEY
   Apel S, 2005, LECT NOTES COMPUT SC, V3676, P125
   APEL S, 2010, SCI COMPUT PROG
   APEL S, 2007, MIP0712 U PASS
   APEL SK, 2010, AUTOMAT SOFTW ENG
   Apel S, 2008, LECT NOTES COMPUT SC, V4954, P20
   Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Apel S, 2008, LECT NOTES COMPUT SC, V5140, P36
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel S, 2009, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2009.5070523
   Apel S, 2009, LECT NOTES COMPUT SC, V5563, P4, DOI 10.1007/978-3-642-02408-5_2
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P101
   Apel S, 2009, LECT NOTES COMPUT SC, V5634, P9, DOI 10.1007/978-3-642-02655-3_3
   Batory Don, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P135, DOI 10.1145/1190216.1190238
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Bergel A, 2008, COMPUT LANG SYST STR, V34, P83, DOI 10.1016/j.cl.2007.05.003
   Bono V, 1999, LECT NOTES COMPUT SC, V1628, P43
   Bosch J, 1999, INFORM SOFTWARE TECH, V41, P257, DOI 10.1016/S0950-5849(99)00007-5
   Boudol G, 2004, J FUNCT PROGRAM, V14, P263, DOI 10.1017/S0956796803004775
   BOUGE L, 1988, P INT S PRINC PROGR, P240
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Clarke D., 2007, P INT C ASP OR SOFTW, P121
   Compagnoni A, 2003, INFORM COMPUT, V184, P242, DOI 10.1016/S0890-5401(03)00062-2
   COOK WR, 1991, LECT NOTES COMPUT SC, V489, P151
   DELAWARE B, 2009, P INT S FDN SOFTW EN, P243
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ernst E, 2003, LECT NOTES COMPUT SC, V2743, P303
   ERNST E, 2001, LNCS, V2072, P00303
   FINDLER RB, 1998, P 3 ACM SIGPLAN INT, P94
   HUTCHINS D, 2006, P INT C OBJ OR PROGR, P1
   HUTCHINS D, 2009, THESIS U EDINBURGH E
   Hutchins DS, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1706299.1706334
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Kamina T, 2004, LECT NOTES COMPUT SC, V3302, P398
   KASTNER C, 2008, P INT C AUT SOFTW EN, P258
   Kastner Christian., 2009, Proceedings of the 13th International Software Product Line Conference, P181, DOI DOI 10.1145/1753235.1753261
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Krishnamurthi S., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P91, DOI 10.1007/BFb0054088
   LI H, 2002, P SIGSOFT FSE, P89
   Li H. C., 2005, Automated Software Engineering, V12, P349, DOI 10.1007/s10515-005-2643-9
   LIU J, 2006, P INT C SOFTW ENG IC, P112
   Lopez-Herrejon Roberto., 2006, Proceedings of the 2006 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation (New York, NY, USA), PEPM '06, P68
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   MCDIRMID S, 2003, P INT C ASP OR SOFTW, P70
   McDirmid S, 2006, LECT NOTES COMPUT SC, V4228, P116
   MEZINI M, 2004, P INT S FDN SOFTW EN, P127
   Millstein T, 2002, INFORM COMPUT, V175, P76, DOI 10.1006/inco.2002.3103
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   Odersky M, 2003, LECT NOTES COMPUT SC, V2743, P201
   OSSHER H, 1992, P INT C OBJ OR PROGR, P25
   PIERCE BC, 1994, INFORM COMPUT, V112, P131, DOI 10.1006/inco.1994.1055
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   Reynolds John C., 1994, THEORETICAL ASPECTS, P13
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   STEFFEN M, 1994, ECSLFCS94280 U ED
   Steffen Martin, 1997, Ph. D. Dissertation
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Terese, 2003, CAMBRIDGE TRACTS THE, V55
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   TRUJILLO S, 2006, P 5 INT C GEN PROGR, P191
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   ZENGER M, 2005, P INT WORKSH FDN OBJ
   [No title captured]
NR 70
TC 13
Z9 17
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2010
VL 32
IS 5
AR 19
DI 10.1145/1745312.1745316
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 618OY
UT WOS:000279366700004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Arenaz, M
   Touriño, J
   Doallo, R
AF Arenaz, Manuel
   Tourino, Juan
   Doallo, Ramon
TI XARK: An EXtensible Framework for Automatic Recognition of Computational
   Kernels
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Experimentation; Automatic kernel recognition;
   demand-driven algorithms; use-def chains; symbolic analysis; gated
   single assignment; strongly connected component
AB The recognition of program constructs that are frequently used by software developers is a powerful mechanism for optimizing and parallelizing compilers to improve the performance of the object code. The development of techniques for automatic recognition of computational kernels such as inductions, reductions and array recurrences has been an intensive research area in the scope of compiler technology during the 90's. This article presents a new compiler framework that, unlike previous techniques that focus on specific and isolated kernels, recognizes a comprehensive collection of computational kernels that appear frequently in full-scale real applications. The XARK compiler operates on top of the Gated Single Assignment (GSA) form of a high-level intermediate representation (IR) of the source code. Recognition is carried out through a demand-driven analysis of this high-level IR at two different levels. First, the dependences between the statements that compose the strongly connected components (SCCs) of the data-dependence graph of the GSA form are analyzed. As a result of this intra-SCC analysis, the computational kernels corresponding to the execution of the statements of the SCCs are recognized. Second, the dependences between statements of different SCCs are examined in order to recognize more complex kernels that result from combining simpler kernels in the same code. Overall, the XARK compiler builds a hierarchical representation of the source code as kernels and dependence relationships between those kernels. This article describes in detail the collection of computational kernels recognized by the XARK compiler. Besides, the internals of the recognition algorithms are presented. The design of the algorithms enables to extend the recognition capabilities of XARK to cope with new kernels, and provides an advanced symbolic analysis framework to run other compiler techniques on demand. Finally, extensive experiments showing the effectiveness of XARK for a collection of benchmarks from different application domains are presented. In particular, the SparsKit-II library for the manipulation of sparse matrices, the Perfect benchmarks, the SPEC CPU2000 collection and the PLTMG package for solving elliptic partial differential equations are analyzed in detail.
C1 [Arenaz, Manuel; Tourino, Juan; Doallo, Ramon] Univ A Coruna, Dept Elect & Syst, Fac Comp Sci, La Coruna 15071, Spain.
C3 Universidade da Coruna
RP Arenaz, M (corresponding author), Univ A Coruna, Dept Elect & Syst, Fac Comp Sci, Campus Elvina S-N, La Coruna 15071, Spain.
EM arenaz@udc.es; juan@udc.es; doallo@udc.es
RI Tourino, Juan/O-2878-2015
OI Tourino, Juan/0000-0001-9670-1933; Doallo, Ramon/0000-0002-6011-3387
FU Ministry of Education and Science of Spain; European Union
   [TIN2004-07797-C02, TIN2007-67537-C03]; Galician Government
   [PGIDIT05PXIC10504PN, PGIDIT06PXIB105228PR]
FX This research was supported by the Ministry of Education and Science of
   Spain and FEDER funds of the European Union (Projects TIN2004-07797-C02
   and TIN2007-67537-C03), and by the Galician Government (Projects
   PGIDIT05PXIC10504PN and PGIDIT06PXIB105228PR).
CR AMMARGUELLAT Z, 1990, P ACM SIGPLAN C PROG, P283
   Andrade D, 2007, CONCURR COMP-PRACT E, V19, P2407, DOI 10.1002/cpe.1173
   [Anonymous], 1994, SPARSKIT BASIC TOOL
   [Anonymous], 2006, COMPILERS PRINCIPLES
   [Anonymous], SPEC CPU2000
   ARENAZ M, 2004, P 18 INT PAR DISTR P
   ARENAZ M, 2003, THESIS U CORUNA
   ARENAZ M, 2003, P 17 ANN INT C SUP, P193
   BALLANCE RA, 1990, P ACM SIGPLAN C PROG, P257
   BANK RE, 2007, PLTMG PACKAGE
   BERRY M, 1989, INT J SUPERCOMPUT AP, V3, P5, DOI 10.1177/109434208900300302
   BHANSALI S, 1995, P WORKSH KNOWL BAS S
   Blume W, 1996, COMPUTER, V29, P78, DOI 10.1109/2.546612
   CALLAHAN D, 1992, LECT NOTES COMPUT SC, V589, P169
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DiMartino B, 1996, FOURTH WORKSHOP ON PROGRAM COMPREHENSION, PROCEEDINGS, P164, DOI 10.1109/WPC.1996.501131
   Fahringer T, 2000, IEEE T PARALL DISTR, V11, P1105, DOI 10.1109/71.888633
   FAIGIN KA, 1994, INT J PARALLEL PROG, V22, P553, DOI 10.1007/BF02577778
   Fisher AllanL., 1994, P ACM SIGPLAN 1994 C, P135, DOI [10.1145/178243.178255, DOI 10.1145/178243.178255]
   *GCC INT, GNU COMP COLL INT GC
   GERLEK MP, 1995, ACM T PROGR LANG SYS, V17, P85, DOI 10.1145/200994.201003
   Haghighat MR, 1996, ACM T PROGR LANG SYS, V18, P477, DOI 10.1145/233561.233568
   HARANDI MT, 1990, IEEE SOFTWARE, V7, P74, DOI 10.1109/52.43052
   Jouvelot Pierre, 1989, P 3 INT C SUP, P186, DOI DOI 10.1145/318789.318810
   Kennedy Ken, 2002, Optimizing Compilers for Modern Architectures
   Kessler C. W., 1996, Scientific Programming, V5, P251
   Kessler CW, 1999, PROG COMPREHEN, P200, DOI 10.1109/WPC.1999.777759
   KNOBE K, 1998, P 25 ACM SIGPLAN SIG, P107
   KNOBE K, 2000, P 8 INT WORKSH COMP
   KOZACZYNSKI W, 1992, IEEE T SOFTWARE ENG, V18, P1065, DOI 10.1109/32.184761
   LIN Y, 1998, LECT NOTES COMPUTER, V1511, P41
   Merrill Jason., 2003, Proceedings of the GCC Developers Summit May 25-27, 2003, Ottawa, Ontario Canada, P171
   METZGER R, 1995, IJCAI 95 WORKSH PROG
   Muchnick S., 1997, ADV COMPILER DESIGN
   PAUL S, 1994, IEEE T SOFTWARE ENG, V20, P463, DOI 10.1109/32.295894
   PINTER SS, 1994, ACM T PROGR LANG SYS, V16, P305, DOI 10.1145/177492.177494
   POTTENGER WM, 1995, P 9 INT C SUP, P444
   REDON X, 1993, LECT NOTES COMPUTER, V694, P132
   SABOT G, 1993, P 7 ACM INT C SUP, P147
   Suganuma T., 1996, ICS'96: Proceedings of the 10th international conference on Supercomputing, P18, DOI DOI 10.1145/237578.237581
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   TU P, 1995, P 9 ACM INT C SUP BA, P414
   van Engelen R.A., 2004, ICS 04, P106, DOI DOI 10.1145/1006209.1006226
   VANENGELEN RA, 2001, P INT C COMP CONSTR, P118
   WILLS LM, 1990, ARTIF INTELL, V45, P113, DOI 10.1016/0004-3702(90)90039-3
   Wolfe M.J., 1996, High Performance Compilers For Parallel Computing
   WU P, 2001, P ACM INT C SUP ICS, P78
   ZHANG F, 1994, LECT NOTES COMPUTER, V817, P387
   Zima E. V., 1995, Proceedings of the 1995 International Symposium on Symbolic and Algebraic Computation, ISSAC '95, P42, DOI 10.1145/220346.220352
   ZIMA EV, 1986, USSR COMP MATH MATH, V24, P193
NR 50
TC 19
Z9 20
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2008
VL 30
IS 6
AR 32
DI 10.1145/1391956.1391959
PG 56
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 373GL
UT WOS:000260958900003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Rinetzky, N
   Ramalingam, G
   Sagiv, M
   Yahav, E
AF Rinetzky, N.
   Ramalingam, G.
   Sagiv, M.
   Yahav, E.
TI On the complexity of partially-flow-sensitive alias analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; alias analysis; flow-sensitive; flow-insensitive
AB We introduce the notion of a partially-flow-sensitive analysis based on the number of read and write operations that are guaranteed to be analyzed in a sequential manner. We study the complexity of partially-flow-sensitive alias analysis and show that precise alias analysis with a very limited flow-sensitivity is as hard as precise flow-sensitive alias analysis, both when dynamic memory allocation is allowed, as well as in the absence of dynamic memory allocation.
C1 [Rinetzky, N.; Sagiv, M.] Tel Aviv Univ, IL-69978 Tel Aviv, Israel.
   [Ramalingam, G.] Microsoft Res India, Bangalore 560080, Karnataka, India.
   [Yahav, E.] IBM Corp, Thomas J Watson Res Ctr, Yorktown Hts, NY 10598 USA.
C3 Tel Aviv University; Microsoft; International Business Machines (IBM)
RP Rinetzky, N (corresponding author), Tel Aviv Univ, IL-69978 Tel Aviv, Israel.
EM maon@post.tau.ac.il; grama@microsoft.com; msagiv@post.tau.ac.il;
   eyahav@us.ibm.com
OI Yahav, Eran/0000-0003-4305-6314; Rinetzky, Noam/0000-0002-7750-4085
CR ANDERSEN LO, 1994, 9419 DIKU
   [Anonymous], 1992, ACM LETT PROGRAM LAN
   CHAKARAVARTHY VT, 2003, P 30 ACM SIGPLAN SIG, P115
   Horwitz S, 1997, ACM T PROGR LANG SYS, V19, P1, DOI 10.1145/239912.239913
   Kernighan B.W., 1988, The C Programming Language
   LANDI W, 1992, THESIS RUTGERS U
   Milne Robert., 1977, A Theory of Programming Language Semantics
   MUTH R, 2000, P ACM S PRINC PROGR, P67
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Strachey C., 1966, FORMAL LANGUAGE DESC, P198
NR 11
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2008
VL 30
IS 3
AR 13
DI 10.1145/1353445.1353447
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 308XV
UT WOS:000256425100002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Casey, K
   Ertl, MA
   Wien, T
   Gregg, D
AF Casey, Kevin
   Ertl, M. Anton
   Wien, Tu
   Gregg, David
TI Optimizing indirect branch prediction accuracy in virtual machine
   interpreters
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; performance; experimentation; interpreter; branch target
   buffer; branch prediction; code replication; superinstruction
AB Interpreters designed for efficiency execute a huge number of indirect branches and can spend more than half of the execution time in indirect branch mispredictions. Branch target buffers (BTBs) are the most widely available form of indirect branch prediction; however, their prediction accuracy for existing interpreters is only 2%-50%. In this article we investigate two methods for improving the prediction accuracy of BTBs for interpreters: replicating virtual machine (VM) instructions and combining sequences of VM instructions into superinstructions. We investigate static ( interpreter build-time) and dynamic ( interpreter runtime) variants of these techniques and compare them and several combinations of these techniques. To show their generality, we have implemented these optimizations in VMs for both Java and Forth. These techniques can eliminate nearly all of the dispatch branch mispredictions, and have other benefits, resulting in speedups by a factor of up to 4.55 over efficient threaded-code interpreters, and speedups by a factor of up to 1.34 over techniques relying on dynamic superinstructions alone.
C1 Dublin City Univ, Dept Comp Sci, Trinity Coll, Dublin 2, Ireland.
   Vienna Univ Technol, A-1060 Vienna, Austria.
C3 Trinity College Dublin; Dublin City University; Technische Universitat
   Wien
RP Gregg, D (corresponding author), Dublin City Univ, Dept Comp Sci, Trinity Coll, Dublin 2, Ireland.
EM David.Gregg@cs.tcd.ie
CR BELL JR, 1973, COMMUN ACM, V16, P370, DOI 10.1145/362248.362270
   Bell T. C., 1990, TEXT COMPRESSION
   Berndl M, 2005, INT SYM CODE GENER, P15, DOI 10.1109/CGO.2005.14
   CALDER B, 1994, ARCHITECTURAL SUPPOR, P242
   Casey K, 2005, LECT NOTES COMPUT SC, V3443, P246, DOI 10.1007/978-3-540-31985-6_18
   Casey K, 2003, LECT NOTES COMPUT SC, V2826, P329
   CASEY K, 2005, TCDCS200561 U DUBL D
   Costa VS, 1999, LECT NOTES COMPUT SC, V1702, P261
   Driesen K, 1998, CONF PROC INT SYMP C, P167, DOI 10.1109/ISCA.1998.694772
   Driesen K, 1999, LECT NOTES COMPUT SC, V1685, P1312
   Ertl M.A., 1995, STACK CACHING INTERP, P315
   Ertl MA, 2002, SOFTWARE PRACT EXPER, V32, P265, DOI 10.1002/spe.434
   ERTL MA, 2003, SIGPLAN 03 C PROGR L
   ERTL MA, 2006, TCDCS200651 U DUBL D
   ERTL MA, 2006, J NET TECHN, V4, P31
   ERTL MA, 2003, J INSTRUC LEV PARAL
   GAGNON E, 2003, THESIS MCGILL U
   GAGNON E, 2003, P COMP CONSTR 12 INT, P170
   Gagnon EM, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P27
   Gochman S., 2003, INTEL TECH J, V7, P20
   Hoogerbrugge J, 1999, SOFTWARE PRACT EXPER, V29, P1005, DOI 10.1002/(SICI)1097-024X(199909)29:11<1005::AID-SPE270>3.0.CO;2-F
   HOOGERBRUGGE J, 2000, LECT NOTES COMPUTER
   Kaeli DR, 1997, IEEE T COMPUT, V46, P469, DOI 10.1109/12.588060
   KAELI DR, 1994, Patent No. 5333283
   KALAMATIANOS J, 1999, J INSTRUC LEV PARAL
   KRALL A, 1994, C PROGR LANG DES IMP, P97
   Li Tao, 2005, ACM Transactions on Architecture and Code Optimization (TACO), V2, P109
   PIUMARTA I, 1998, SIGPLAN 98 C PROGR L, P291
   PROEBSTING TA, 1995, PRINCIPLES PROGRAMMI, P322
   Romer TH, 1996, ACM SIGPLAN NOTICES, V31, P150, DOI 10.1145/248209.237175
   ROSSI M, 1996, TKOC79 HELS U TECHN
   Smith J., 2005, VIRTUAL MACHINES VER
   *SUN MICR INC, 2001, JAVA HOTSP VIRT MACH
   YOUNG C, 1995, ACM COMP AR, P276, DOI 10.1109/ISCA.1995.524568
   YOUNG C, 1994, ARCHITECTURAL SUPPOR
   Zhou J., 2004, Proceedings of the ACM International Conference on Management of Data (SIGMOD), P191
NR 36
TC 14
Z9 16
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 37
DI 10.1145/1286821.1286828
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500008
OA Bronze, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Ager, MS
   Danvy, O
   Brics, HKR
AF Ager, Mads Sig
   Danvy, Olivier
   Brics, Henning Korsholm Rohde
TI Fast partial evaluation of pattern matching in strings
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE partial evaluation; memoization; string matching
ID PROGRAMS; COMPUTATION; ALGORITHM
AB We show how to obtain all of Knuth, Morris, and Pratt's linear-time string matcher by specializing a quadratic-time string matcher with respect to a pattern string. Although it has been known for fifteen years how to obtain this linear matcher by partial evaluation of a quadratic one, how to obtain it in linear time has remained an open problem.
   Obtaining a linear matcher by the partial evaluation of a quadratic one is achieved by performing its backtracking at specialization time and memoizing its results. We show ( 1) how to rewrite the source matcher such that its static intermediate computations can be shared at specialization time and ( 2) how to extend the memoization capabilities of a partial evaluator to static functions. Such an extended partial evaluator, if its memoization is implemented efficiently, specializes the rewritten source matcher in linear time. Finally, we show that the method also applies to a variant of Boyer and Moore's string matcher.
C1 Univ Aarhus, BRICS, Dept Comp Sci, DK-8200 Aarhus N, Denmark.
C3 Aarhus University
RP Danvy, O (corresponding author), Univ Aarhus, BRICS, Dept Comp Sci, IT Parken,Aabogade 34, DK-8200 Aarhus N, Denmark.
EM mads@brics.dk; danvy@brics.dk; hense@brics.dk
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   AGER MS, 2002, P ACM SIGPLAN AS S P
   Aho AV., 1974, DESIGN ANAL COMPUTER
   Alpuente M., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P151, DOI 10.1145/258993.259015
   Amtoft T, 2002, LECT NOTES COMPUT SC, V2566, P332
   AMTOFT T, 1993, THESIS U AARHUS AARH
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Bellman R., 1957, Dynamic programming
   BIRD RS, 1977, COMMUN ACM, V20, P856, DOI 10.1145/359863.359889
   BONDORF A, 1991, SCI COMPUT PROGRAM, V16, P151, DOI 10.1016/0167-6423(91)90002-F
   BOYER RS, 1977, COMMUN ACM, V20, P762, DOI 10.1145/359842.359859
   BULYONKOV MA, 1984, ACTA INFORM, V21, P473, DOI 10.1007/BF00271642
   Chen WD, 1996, J ACM, V43, P20, DOI 10.1145/227595.227597
   CHIN WN, 2002, ACM SIGPLAN AS S PAR
   COLUSSI L, 1991, INFORM COMPUT, V95, P225, DOI 10.1016/0890-5401(91)90046-5
   CONSEL C, 1989, INFORM PROCESS LETT, V30, P79, DOI 10.1016/0020-0190(89)90113-0
   CONSEL C, 1993, P 20 ANN ACM S PRINC, P493
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Futamura Y, 2002, NEW GENERAT COMPUT, V20, P75, DOI 10.1007/BF03037260
   FUTAMURA Y, 2002, P 2002 ACM SIGPLAN A, P1
   FUTAMURA Y, 1988, PARTIAL EVALUATION M, P133
   GLUCK R, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P183, DOI 10.1109/ICCL.1994.288382
   Gluck R., 1993, LECT NOTES COMPUTER, V724, P112
   GROBAUER B, 2002, NORDIC J COMPUTING, V8, P437
   Hernández M, 2003, INFORM PROCESS LETT, V87, P235, DOI 10.1016/S0020-0190(03)00309-0
   HERNANDEZ M, 2001, P 3 INT ACM SIGPLAN, P38
   HOLST CK, 1991, P ACM SIGPLAN S PART, V26, P223
   HUDAK P, 1991, ACM SIGPLAN S PART E, V26
   KANEKO K, 1993, ADV SOFTWARE SCI TEC, V5, P11
   Knuth D. E., 1977, SIAM Journal on Computing, V6, P323, DOI 10.1137/0206024
   Mogensen T., 2000, Higher-Order and Symbolic Computation, V13, P355, DOI 10.1023/A:1026551132647
   MOGENSEN T, 1989, THESIS U COPENHAGEN
   QUIENNEC C, 1992, P 2 INT WORKSH STAT, V81, P109
   SAGONAS K, 1994, P 1994 ACM SIGMOD IN, P442
   SECHER JP, 2002, THESIS U COPENHAGEN
   SMITH DA, 1991, P ACM SIGPLAN AS S P, P62
   Sorensen M. H., 1996, Journal of Functional Programming, V6, P811, DOI 10.1017/S0956796800002008
   SORENSEN MH, 1994, THESIS U COPENHAGEN
   Takeichi M., 1990, Journal of Information Processing, V13, P522
NR 40
TC 4
Z9 4
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2006
VL 28
IS 4
BP 696
EP 714
DI 10.1145/1146809.1146812
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074LZ
UT WOS:000239815200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Kawahito, M
   Komatsu, H
   Nakatani, T
AF Kawahito, M
   Komatsu, H
   Nakatani, T
TI Effective sign extension elimination for Java
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article; Proceedings Paper
CT 17th ACM SIGPLAN Conference on Object Oriented Programming Systems
   Languages and Applications
CY JUN, 2002
CL Seattle, WA
SP ACM, SIGPLAN
DE algorithms; performance; design; experimentation; sign extension; 64-bit
   architecture; Java; JIT compilers; IA-64
ID COMPILER
AB Computer designs are shifting from 32-bit architectures to 64-bit architectures, while most of the programs available today are still designed for 32-bit architectures. Java, for example, specifies the frequently used "int" as a 32-bit signed integer. If such Java programs are executed on a 64-bit architecture, many 32-bit signed integers must be sign-extended to 64-bit signed integers for correct operations. This causes serious performance overhead. In this article, we present a fast and effective algorithm for eliminating sign extensions. We implemented this algorithm in the IBM Java Just-in-Time (JIT) compiler for IA-64. Our experimental results show that our algorithm effectively eliminates the majority of sign extensions. They also show that it improves performance by 6.9% for jBYTEmark and 3.3% for SPECjvm98 over the previously known best algorithm, while it increases JIT compilation time by only 0.11%.
C1 IBM Japan Ltd, Tokyo Res Lab, Kanagawa 2428502, Japan.
C3 International Business Machines (IBM)
RP Kawahito, M (corresponding author), IBM Japan Ltd, Tokyo Res Lab, 1623-14 Shimotsuruma, Kanagawa 2428502, Japan.
EM JL25131@jp.ibm.com; komatsu@jp.ibm.com; nakatani@jp.ibm.com
CR *AMD CORP, 2001, AMD X86 64 ARCH PROG
   [Anonymous], PLDI 94
   [Anonymous], PLDI 92
   Behling S., 2001, POWER4 PROCESSOR INT
   Blume W., 1995, Proceedings 9th International Parallel Processing Symposium (Cat. No.95TH8052), P357, DOI 10.1109/IPPS.1995.395956
   Gosling James, 1996, The Java Language Specification
   Gupta R, 1997, 1997 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P102, DOI 10.1109/PACT.1997.644007
   HARRISON WH, 1977, IEEE T SOFTWARE ENG, V3, P243, DOI 10.1109/TSE.1977.231133
   *IBM, 2004, SA22783203 IBM
   *IBM CORP, 2001, AIX 5L POWER BAS SYS
   *INT CORP, 2001, INT IT ARCH MAN
   ISHIZAKI K, 2000, P INT C OBJ OR PROGR
   ISHIZAKI K, 1999, P ACM SIGPLAN JAV GR
   Kawahito M, 2000, ACM SIGPLAN NOTICES, V35, P139, DOI 10.1145/384264.379234
   KAWAHITO M, 2002, P SIGPLAN 2002 C PRO, P187
   Knoop J., 1994, SIGPLAN Notices, V29, P147, DOI 10.1145/773473.178256
   KNOOP J, 1994, ACM T PROGR LANG SYS, V16, P1117, DOI 10.1145/183432.183443
   OGASAWABA T, 2001, P INT C OBJ OR PROGR
   *STAND PERF EV COR, 1998, SPEC JVM98 BENCHM
   Suganuma T, 2004, IBM J RES DEV, V48, P767, DOI 10.1147/rd.485.0767
   Suganuma T, 2000, IBM SYST J, V39, P175, DOI 10.1147/sj.391.0175
   SUGANUMA T, 2001, P INT C OBJ OR PROGR
NR 22
TC 1
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2006
VL 28
IS 1
BP 106
EP 133
DI 10.1145/1111596.1111599
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 011SV
UT WOS:000235289300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Chen, YF
   Sanders, JW
AF Chen, YF
   Sanders, JW
TI Logic of global synchrony
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; bulk-synchronous parallelism; PRAM; reactive
   programming
AB An intermediate-level specification formalism (i.e., specification language supported by laws and a semantic model), LOGS, is presented for PRAM and BSP styles of parallel programming. It extends pre-post sequential semantics to reveal states at points of global synchronization. The result is an integration of the pre-post and reactive-process styles of specification. The language consists of only six commands from which other useful commands can be derived. Parallel composition is simply logical conjunction and hence compositional. A simple predicative semantics and a complete set of algebraic laws are presented. Novel ingredients include the separation, in our reactive context, of the processes for nontermination and for abortion which coincide in standard programming models; the use of partitions, combining the terminating behavior of one program with the nonterminating behavior of another; and a fixpoint operator, the partitioned fixpoint. Our semantics benefits from the recent "healthiness function" approach for predicative semantics. Use of LOGS, along with the laws for reasoning about it, is demonstrated on two problems: matrix multiplication ( a terminating numerical computation) and the dining philosophers (a reactive computation). The style of reasoning is so close to programming practice that direct transformation from LOGS specifications to real PRAM and BSP programs becomes possible.
C1 Univ Leicester, Dept Comp Sci, Leicester LE1 7RH, Leics, England.
   Univ Oxford, Oxford OX1 2JD, England.
C3 University of Leicester; University of Oxford
RP Univ Leicester, Dept Comp Sci, Univ Rd, Leicester LE1 7RH, Leics, England.
EM yc10@mcs.le.ac.uk; Jeff.Sanders@comlab.ox.ac.uk
CR Abolhassan F, 1999, ACTA INFORM, V36, P463, DOI 10.1007/s002360050181
   [Anonymous], 1978, P 10 ANN ACM S THEOR, DOI 10.1145/800133.804339
   [Anonymous], 2001, MODAL LOGIC
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Chen WS, 2001, CHINESE CHEM LETT, V12, P501
   CHEN Y, 2001, THESIS OXFORD U OXFO
   CHEN Y, 2003, THEORET COMPUT SCI, V308, P1
   CHEN Y, 2002, FORM ASPECTS COMPUT, V14, P2
   CHEN Y, 2002, FORM ASP COMPUT, V14, P108
   Chen YF, 2003, THEOR COMPUT SCI, V308, P367, DOI 10.1016/S0304-3975(02)00893-9
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dijkstra Edsger W, 1978, 625 EWD
   Farrell CA, 1996, THEOR COMPUT SCI, V169, P39, DOI 10.1016/S0304-3975(96)00113-2
   Foster I, 1995, DESIGNING BUILDING P
   Hill JMD, 1998, PARALLEL COMPUT, V24, P1947, DOI 10.1016/S0167-8191(98)00093-3
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Hoare CAR., 1985, Communicating Sequential Processes
   Inda MA, 2001, PARALLEL COMPUT, V27, P1847, DOI 10.1016/S0167-8191(01)00118-1
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Leppanen V., 1995, Nordic Journal of Computing, V2, P51
   LEPPNNEN V, 1995, NORDIC J COMPUT, V2, P1
   McColl WF, 1996, FUTURE GENER COMP SY, V12, P265, DOI 10.1016/S0167-739X(96)00030-1
   Milner R., 1989, Communication and concurrency
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   OWICKI S, 1976, ACTA INFORM, V6, P4
   Saraswat Vijay A., 1991, P 18 ACM SIGPLANSIGA, P333, DOI DOI 10.1145/99583.99627
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
NR 31
TC 6
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2004
VL 26
IS 2
BP 221
EP 262
DI 10.1145/973097.973098
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 804LO
UT WOS:000220300400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Cortes, C
   Fisher, K
   Pregibon, D
   Rogers, A
   Smith, F
AF Cortes, C
   Fisher, K
   Pregibon, D
   Rogers, A
   Smith, F
TI Hancock: A language for analyzing transactional data streams
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; performance; domain-specific languages; data mining;
   statistical models
AB Massive transaction streams present a number of opportunities for data mining techniques. The transactions in such streams might represent calls on a telephone network, commercial credit card purchases, stock market trades, or HTTP requests to a web server. While historically such data have been collected for billing or security purposes, they are now being used to discover how the transactors, for example, credit-card numbers or IP addresses, use the associated services.
   Over the past 5 years, we have computed evolving profiles (called signatures) of transactors in several very large data streams. The signature for each transactor captures the salient features of his or her behavior through time. Programs for processing signatures must be highly optimized because of the size of the data stream (several gigabytes per day) and the number of signatures to maintain (hundreds of millions). Originally, we wrote such programs directly in C, but because these programs often sacrificed readability for performance, they were difficult to verify and maintain.
   Hancock is a domain-specific language we created to express computationally efficient signature programs cleanly. In this paper, we describe the obstacles to computing signatures from massive streams and explain how Hancock addresses these problems. For expository purposes, we present Hancock using a running example from the telecommunications industry; however, the language itself is general and applies equally well to other data sources.
C1 AT&T Labs, Shannon Lab, Florham Pk, NJ 07932 USA.
C3 AT&T
RP Google Labs, 1440 Broadway, New York, NY 10018 USA.
EM corinna@google.com; kfisher@research.att.com; daryl@google.com;
   amr@cs.uchicago.edu; fsmith@mathworks.com
CR AHO AV, 1979, SOFTWARE PRACT EXPER, V9, P267, DOI 10.1002/spe.4380090403
   [Anonymous], P USENIX ANN TECHN C
   Appel A. W., 1990, LISP and Symbolic Computation, V3, P343, DOI 10.1007/BF01807697
   ATKINSON MP, 1996, ACM SIGMOD RECORD, V25, P4, DOI DOI 10.1145/245882.245905
   BABCOCK B, 2002, P 2002 ACM S PRINC D
   Belanger D, 2000, LECT NOTES COMPUT SC, V1819, P106
   BELANGER D, 1999, P DAT TEL 1999 INT W
   Bonachea D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P163
   Burge Peter, 1996, P 4 ANN MOB PERS COM
   CARNEY D, 2002, P 28 VLDB C
   CHANDRA S, 1999, PRERELEASE C FRONTEN
   CHANDRASEKARAN S, 2002, P 28 VLDB C
   Cortes C., 2000, Proceedings. KDD-2000. Sixth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, P9, DOI 10.1145/347090.347094
   CORTES C, 1999, P 5 INT C KNOWL DISC
   CORTES C, 1998, P 4 INT C KNOWL DISC
   DENNING DE, 1987, IEEE T SOFTWARE ENG, V13, P222, DOI 10.1109/TSE.1987.232894
   Fawcett T, 1997, DATA MIN KNOWL DISC, V1, P291, DOI 10.1023/A:1009700419189
   Fisher K, 2002, LECT NOTES COMPUT SC, V2397, P213
   Gupta P, 1998, IEEE INFOCOM SER, P1240, DOI 10.1109/INFCOM.1998.662938
   HELLERSTEIN J, 2000, IEEE DATA ENG B, P7
   Huang NF, 1999, IEEE INFOCOM SER, P1429, DOI 10.1109/INFCOM.1999.752163
   JACKSON M, 1975, PRINCIPLES PROGRAM D
   KNASMULLER M, 1997, P JOINT MOD LANG C 9
   Lampson B, 1999, IEEE ACM T NETWORK, V7, P324, DOI 10.1109/90.779199
   LISKOV B, 1999, P 13 EUR C OBJ OR PR
   NELSON G, 1991, SYSTEMS PROGRAMMING, V3
   RIGGS R, 1996, P USENIX 1996 C OBJ
   *SAX PROJ, 2002, SAX HOM PAG
   *SIGMOD, 2002, P 21 ACM SIGMOD INT
   VANROSSUM G, 2001, PYTHON LIB REFERENCE
   *VLDB, 2002, P 28 INT C VER LARG
   WANG DC, 1998, ASDLGEN REFERENCE MA
NR 32
TC 14
Z9 20
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2004
VL 26
IS 2
BP 301
EP 338
DI 10.1145/973097.973100
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 804LO
UT WOS:000220300400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Bugliesi, M
   Castagna, G
   Crafa, S
AF Bugliesi, M
   Castagna, G
   Crafa, S
TI Access control for mobile agents: The calculus of boxed ambients
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; security; verification; ambient calculi; mobile computation;
   access control systems; type systems; type safety
ID RESOURCE ACCESS
AB Boxed Ambients are a variant of Mobile Ambients that result from dropping the open capability and introducing new primitives for ambient communication. The new model of communication is faithful to the principles of distribution and location-awareness of Mobile Ambients, and complements the constructs in and out for mobility with finer-grained mechanisms for ambient interaction. We introduce the new calculus, study the impact of the new mechanisms for communication of typing and mobility, and show that they yield an effective framework for resource protection and access control in distributed systems.
C1 Univ Ca Foscari Venezia, Dipartimento Informat, I-30172 Venice, VE, Italy.
   Ecole Normale Super, LIENS, F-75005 Paris, France.
C3 Universita Ca Foscari Venezia; Universite PSL; Ecole Normale Superieure
   (ENS)
RP Univ Ca Foscari Venezia, Dipartimento Informat, Via Torino 155, I-30172 Venice, VE, Italy.
EM michele@dsi.unive.it; Giuseppe.Castagna@dsi.unive.it; silvia@unive.it
OI Bugliesi, Michele/0000-0002-4567-3351
CR Amadio RM, 1994, LECT NOTES COMPUT SC, V880, P205
   [Anonymous], 1985, 520028STD DOD
   Bell D. E., 1976, MTR2997 MITRE CORP
   Boudol Gerard., 1992, Tech. Rep. 1702
   Bryce C, 2001, AUTON AGENT MULTI-AG, V4, P359, DOI 10.1023/A:1012715226170
   Bugliesi M, 2003, LECT NOTES COMPUT SC, V2719, P969
   Bugliesi M, 2002, LECT NOTES COMPUT SC, V2556, P71
   Bugliesi M, 2001, ACM SIGPLAN NOTICES, V36, P222, DOI 10.1145/373243.360223
   BUGLIESI M, 2001, LNCS, V2154, P102
   Bugliesi M., 2001, LNCS, V2215, P38
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CARDELLI L, 1999, LNCS, V1644, P230
   CARDELLI L, 1999, LNCS, V1603, P51
   CARDELLI L, 1999, P POPL 99, P79
   CARDELLI L, 2000, LECT NOTES COMPUTER, V1872, P333
   CASTAGNA G, 2001, LNCS, V2154, P82
   CRAFA S, 2002, F WAN INT WORKSHOP F, V66, P3
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R, 2000, THEOR COMPUT SCI, V240, P215, DOI 10.1016/S0304-3975(99)00232-7
   Degano P, 2000, LECT NOTES COMPUT SC, V1961, P199
   DENICOLA R, 2000, LNCS, V1877, P48
   Dezani-Ciancaglini M, 2000, LECT NOTES COMPUT SC, V1961, P215
   FOCARDI R, 1997, P DARPA WORKSH FDN S, P26
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   FOURNET C, 2000, LECT NOTES COMPUTER, V1872
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gollmann D., 1999, COMPUTER SECURITY
   Gordon AD, 1999, LECT NOTES COMPUT SC, V1578, P212
   Hennessy M, 2002, ACM T PROGR LANG SYS, V24, P566, DOI 10.1145/570886.570890
   Hennessy M, 2002, INFORM COMPUT, V173, P82, DOI 10.1006/inco.2001.3089
   Levi F., 2000, P POPL 00, P352
   MERRO M, 2002, P POPL 02, P71
   MERRO M, 2002, LECT NOTES COMPUTER, V2421, P304
   Nestmann U, 2000, INFORM COMPUT, V156, P287, DOI 10.1006/inco.1999.2822
   Nielson F, 1999, LECT NOTES COMPUT SC, V1664, P463
   NIELSON HR, 2000, P POPL 00, P142
   RIELY J, 1999, POPL 99, P93
   Riely J., 1998, P POPL 98, P378
   Sangiorgi D, 2001, LECT NOTES COMPUT SC, V2076, P408
   SEWELL P, 2000, J COMPUT SEC, V11, P135
   Vitek J, 1999, LECT NOTES COMPUT SC, V1686, P47
   Zimmer P, 2000, LECT NOTES COMPUT SC, V1784, P375
NR 42
TC 58
Z9 62
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2004
VL 26
IS 1
BP 57
EP 124
DI 10.1145/963778.963781
PG 68
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 768UY
UT WOS:000188554500003
OA Bronze
DA 2024-07-18
ER

PT J
AU Fernández, FJ
   Hill, PM
AF Fernández, FJ
   Hill, PM
TI An interval constraint system for lattice domains
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; languages; theory; constraint; cooperation; indexicals;
   lattice; propagation
ID PROPAGATION; LANGUAGE
AB We present a generic framework for defining and solving interval constraints on any set of domains (finite or infinite) that are lattices. The approach is based on the use of a single form of constraint similar to that of an indexical used by CLP for finite domains and on a particular generic definition of an interval domain built from an arbitrary lattice. We provide the theoretical foundations for this framework and a schematic procedure for the operational semantics. Examples are provided that illustrate how new (compound) constraint solvers can be constructed from existing solvers using lattice combinators and how different solvers ( possibly on distinct domains) can communicate and hence, cooperate in solving a problem. We describe the language clp(pound), which is a prototype implementation of this framework and discuss ways in which this implementation may be improved.
C1 Univ Malaga, ETSII, Dept Lenguajes & Ciencias Computac, E-29071 Malaga, Spain.
   Univ Leeds, Sch Comp, Leeds LS2 9JT, W Yorkshire, England.
C3 Universidad de Malaga; University of Leeds
EM afdez@llc.uma.es; hill@comp.leeds.ac.uk
RI Fernández-Leiva, Antonio J./M-1265-2014; Fernández, Francisco José
   F.J./L-1839-2014
OI Fernández-Leiva, Antonio J./0000-0002-5330-5217; 
CR Ai't-Kaci Hassan., 1999, Warren's Abstract Machine: A Tutorial Reconstruction
   ALLEN JF, 1983, COMMUN ACM, V26, P832, DOI 10.1145/182.358434
   [Anonymous], LNCS
   [Anonymous], CONSTRAINT LOGIC PRO
   [Anonymous], 1990, Introduction to Lattices and Order
   [Anonymous], INTERVAL ARITHMETIC
   Apt KR, 2000, ACM T PROGR LANG SYS, V22, P1002, DOI 10.1145/371880.371884
   Apt KR, 1999, LECT NOTES COMPUT SC, V1713, P1
   BAADER F, 1995, LECT NOTES COMPUTER, V976, P380
   BARTH P, 1996, 2 INT C PRACT APPL C, P1
   Benhamou F, 1997, J LOGIC PROGRAM, V32, P1, DOI 10.1016/S0743-1066(96)00142-2
   Benhamou F, 1999, LOGIC PROGRAMM, P230
   BIRKHOFF G, 1967, C PUBLICATIONS AM MA, V25
   Bistarelli S, 1995, INT JOINT CONF ARTIF, P624, DOI 10.1007/978-3-540-68679-8_11
   Carlsson M., 1997, Programming Languages: Implementations, Logics, and Programs. 9th International Symposium, PLILP'97, Including a Special Track on Declarative Programming Languages in Education. Proceedings, P191, DOI 10.1007/BFb0033845
   Clearly J. G., 1987, Future Computing Systems, V2, P125
   Codognet P, 1996, J LOGIC PROGRAM, V27, P185, DOI 10.1016/0743-1066(95)00121-2
   Codognet P, 1996, J AUTOM REASONING, V17, P97, DOI 10.1007/BF00247670
   CODOGNET P, 1993, MIT PS LOG, P525
   CODOGNET P, 1994, LNCS, V844, P244
   DIAZ D, 1993, LOGIC PROGRAMM, P774
   DIAZ D, 2001, J FUNCT LOGIC PROGRA, V6
   FERNANDEZ A, 1999, ERCIM COMPULOG WORKS
   FERNANDEZ A, 2002, THESIS U MALAGA SPAI
   Fernandez A. J., 2000, Constraints, V5, P275, DOI 10.1023/A:1009816801567
   Fernández AJ, 1999, LECT NOTES COMPUT SC, V1722, P194
   FERNANDEZ AJ, 2000, CLP L VERSION 0 21 U
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   Georget Y, 1998, LECT NOTES COMPUT SC, V1520, P205
   Gervet C., 1997, Constraints, V1, P191, DOI 10.1007/BF00137870
   GOUALARD F, 1999, J FUNCT LOGIC PROGRA, V1, P1
   Hickey TJ, 2000, LECT NOTES COMPUT SC, V1753, P200
   Hofstedt P, 2000, LECT NOTES ARTIF INT, V1861, P342
   *ISO IEC, 1995, 1321111995 ISOIEC 1
   JAFFAR J, 1992, ACM T PROGR LANG SYS, V14, P339, DOI 10.1145/129393.129398
   LEE J, 1993, J LOGIC PROGRAMM, V16, P3
   LEE JHM, 1993, J LOGIC PROGRAM, V16, P255, DOI 10.1016/0743-1066(93)90045-I
   LEPROVOST T, 1993, J LOGIC PROGRAM, V16, P319, DOI 10.1016/0743-1066(93)90047-K
   Moore R. E., 1966, INTERVAL ANAL
   NDONG S, 1997, 6 JOURN FRANC PROGR, P235
   REFALO P, 1996, JOINT INT C S LOG PR, P22
   Schiex T, 1995, INT JOINT CONF ARTIF, P631
   SIEDEBOTTOM G, 1992, COMPUTAT INTELL, V8, P601
   *SIEM NIXD INF AG, 1994, IF PROL V5 0A CONSTR
   SLAVIK V, 1986, ALGEBRA UNIV, V23, P22, DOI 10.1007/BF01190907
   *SWED I COMP SCI I, 1994, SICSTUS PROL US MAN
   Van Hentenryck P, 1998, J LOGIC PROGRAM, V37, P139, DOI 10.1016/S0743-1066(98)10006-7
   WALINSKY C, 1989, 6 INT C LOG PROGR IC, P181
NR 48
TC 10
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2004
VL 26
IS 1
BP 1
EP 46
DI 10.1145/963778.963779
PG 46
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 768UY
UT WOS:000188554500001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Yang, AM
   Wrigstad, T
AF Yang, Albert Mingkun
   Wrigstad, Tobias
TI Deep Dive into ZGC: A Modern Garbage Collector in OpenJDK
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Garbage collection; ZGC; SPIN; model checking
AB ZGC is a modern, non-generational, region-based, mostly concurrent, parallel, mark-evacuate collector recently added to OpenJDK. It aims at having GC pauses that do not grow as the heap size increases, offering low latency even with large heap sizes. The ZGC C++ source code is readily accessible in the OpenJDK repository, but reading it (25 KLOC) can be very intimidating, and one might easily get lost in low-level implementation details, obscuring the key concepts. To make the ZGC algorithm more approachable, this work provides a thorough description on a high-level, focusing on the overall design with moderate implementation details. To explain the concurrency aspects, we provide a SPIN model that allows studying races between mutators and GC threads, and how they are resolved in ZGC. Such a model is not only useful for learning the current design (offering a deterministic and interactive experience) but also beneficial for prototyping new ideas and extensions. Our hope is that our detailed description and the SPIN model will enable the use of ZGC as a building block for future GC research, and research ideas implemented on top of it could even be adopted in the industry more readily, bridging the gap between academia and industry in the context of GC research.
C1 [Yang, Albert Mingkun] Oracle, Soder Malarstrand 27b, SE-11825 Stockholm, Sweden.
   [Wrigstad, Tobias] Uppsala Univ, Informat Technol, Lagerhyddsvagen 2, SE-75105 Uppsala, Sweden.
   [Yang, Albert Mingkun] Uppsala Univ, Uppsala, Sweden.
C3 Uppsala University; Uppsala University
RP Yang, AM (corresponding author), Oracle, Soder Malarstrand 27b, SE-11825 Stockholm, Sweden.
EM albert.m.yang@oracle.com; tobias.wrigstad@it.uu.se
OI Wrigstad, Tobias/0000-0002-4269-5408
FU Swedish Foundation for Strategic Research [SM19-0059]; Oracle; Swedish
   Foundation for Strategic Research (SSF) [SM19-0059] Funding Source:
   Swedish Foundation for Strategic Research (SSF)
FX Parts of this work are supported by the Swedish Foundation for Strategic
   Research, grant SM19-0059, and donations from Oracle.
CR [Anonymous], 2011, 98992011 ISOIEC
   BAKER HG, 1978, COMMUN ACM, V21, P280, DOI 10.1145/359460.359470
   Blackburn S. M., 2004, Performance Evaluation Review, V32, P25, DOI 10.1145/1012888.1005693
   Blackburn SM, 2004, PROC INT CONF SOFTW, P137, DOI 10.1109/ICSE.2004.1317436
   Clark Iris, 2021, SHENANDOAH GC
   Click Cliff, 2005, P 1 ACMUSENIX INT C, P46, DOI [DOI 10.1145/1064979.1064988EVENT-PLACE:CHICAGO,IL,USA, 10.1145/1064979.1064988, DOI 10.1145/1064979.1064988]
   Detlefs David, 2004, P 4 INT S MEM MAN VA, DOI [10.1145/1029873.1029879, DOI 10.1145/1029873.1029879]
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   Flood Christine H., 2016, P 13 INT C PRINC PRA, DOI DOI 10.1145/2972206.2972210
   Gammie P, 2015, ACM SIGPLAN NOTICES, V50, P99, DOI [10.1145/2737924.2738006, 10.1145/2813885.2738006]
   Hawblitzel C, 2009, ACM SIGPLAN NOTICES, V44, P441, DOI 10.1145/1594834.1480935
   Holzmann G, 2011, The SPIN Model Checker: Primer and Reference Manual
   Hudson R.L., 2001, JGI 01, P48, DOI [10.1145/376656.376810, DOI 10.1145/376656.376810]
   Kennke Roman, 2014, JEP 189 SHENANDOAH L
   Kennke Roman, 2021, SHENANDOAH GARBAGE C
   Kennke Roman, 2019, SHENANDOAH GC JDK 13
   Kermany H, 2006, ACM SIGPLAN NOTICES, V41, P354, DOI 10.1145/1133981.1134023
   Liden Per, 2018, JEP 333 ZGC SCALABLE
   Liden Per, 2018, GARBAGE COLLECTOR LO
   MITRE, 2020, CWE 416 USE FREE
   Ossia Yoav, 2004, P 4 INT S MEMORY MAN, P25, DOI DOI 10.1145/1029873.1029877
   Pirinen PP, 1999, ACM SIGPLAN NOTICES, V34, P20, DOI 10.1145/301589.286863
   Satish Ram, 2016, JAVA WEAKREFERENCE E
   SPEC, 2015, SPECJBB R 2015
   Tene G, 2011, ACM SIGPLAN NOTICES, V46, P79, DOI 10.1145/2076022.1993491
   Ugawa T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133877
   Ugawa T, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3226225
   Ugawa T, 2014, ACM SIGPLAN NOTICES, V49, P59, DOI [10.1145/2775049.2602991, 10.1145/2602988.2602991]
   WILSON PR, 1992, LECT NOTES COMPUT SC, V637, P1
   Yang A.M., 2020, Proc. of ACM ISMM, P74
   Yang AMK, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P301, DOI 10.1145/3385412.3385977
NR 31
TC 4
Z9 5
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD DEC
PY 2022
VL 44
IS 4
AR 22
DI 10.1145/3538532
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 7S4NU
UT WOS:000910732700002
OA hybrid
DA 2024-07-18
ER

PT J
AU Baillot, P
   Ghyselen, A
AF Baillot, Patrick
   Ghyselen, Alexis
TI Types for Complexity of Parallel Computation in Pi-calculus
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Type systems; pi-calculus; process calculi; complexity analysis;
   implicit computational complexity; sized types
ID SESSION TYPES; SYSTEM
AB Type systems as a technique to analyse or control programs have been extensively studied for functional programming languages. In particular, some systems allow one to extract from a typing derivation a complexity bound on the program. We explore how to extend such results to parallel complexity in the setting of pi-calculus, considered as a communication-based model for parallel computation. Two notions of time complexity are given: the total computation time without parallelism (the work) and the computation time under maximal parallelism (the span). We define operational semantics to capture those two notions and present two type systems from which one can extract a complexity bound on a process. The type systems are inspired both by sized types and by input/output types, with additional temporal information about communications.
C1 [Baillot, Patrick; Ghyselen, Alexis] Univ Claude Bernard Lyon 1, Univ Lyon, LIP, ENS Lyon,CNRS, F-69342 Lyon 07, France.
   [Baillot, Patrick] Univ Lille, CRIStAL, Bat ESPRIT,Ave Henri Poincare, F-59655 Villeneuve Dascq, France.
   [Ghyselen, Alexis] Univ Bologna, Alma Mater Studiorum, DIAPASoN, Via Zamboni 33, I-40126 Bologna, Italy.
C3 Universite Claude Bernard Lyon 1; Ecole Normale Superieure de Lyon (ENS
   de LYON); Centre National de la Recherche Scientifique (CNRS);
   Universite de Lille; Centrale Lille; University of Bologna
RP Baillot, P (corresponding author), Univ Claude Bernard Lyon 1, Univ Lyon, LIP, ENS Lyon,CNRS, F-69342 Lyon 07, France.; Baillot, P (corresponding author), Univ Lille, CRIStAL, Bat ESPRIT,Ave Henri Poincare, F-59655 Villeneuve Dascq, France.
EM patrick.baillot@univ-lille.fr; alexis.ghyselen@unibo.it
OI Ghyselen, Alexis/0000-0001-9767-2011
FU LABEX MILYON of Universite de Lyon [ANR-10-LABX-0070]
FX This work was supported by the LABEX MILYON (Grant No. ANR-10-LABX-0070)
   of Universite de Lyon.
CR Akl S.G., 2011, ENCY PARALLEL COMPUT, P139
   Albert E, 2017, J AUTOM REASONING, V59, P47, DOI 10.1007/s10817-016-9400-6
   Albert E, 2015, LECT NOTES COMPUT SC, V9291, P275, DOI 10.1007/978-3-662-48288-9_16
   Avanzini M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110287
   Baillot P, 2004, IEEE S LOG, P266, DOI 10.1109/LICS.2004.1319621
   Baillot P, 2004, LECT NOTES COMPUT SC, V2987, P27
   Baillot P, 2021, LECT NOTES COMPUT SC, V12648, P59, DOI 10.1007/978-3-030-72019-3_3
   Castro-Perez D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428223
   Dal Lago U, 2016, MATH STRUCT COMP SCI, V26, P1433, DOI 10.1017/S0960129514000632
   Dal Lago U, 2016, MATH STRUCT COMP SCI, V26, P969, DOI 10.1017/S0960129514000310
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Dardha O, 2017, INFORM COMPUT, V256, P253, DOI 10.1016/j.ic.2017.06.002
   Das A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236786
   Das A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P305, DOI 10.1145/3209108.3209146
   Degano P, 2003, LECT NOTES COMPUT SC, V2890, P307
   Degano P, 1995, LECT NOTES COMPUT SC, V944, P660
   Demangeon R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P344, DOI 10.1145/3209108.3209122
   Gaboardi M, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P121, DOI 10.1145/1328438.1328456
   Giachino E, 2016, LECT NOTES COMPUT SC, V9539, P199, DOI 10.1007/978-3-319-28934-2_11
   Gimenez S, 2016, ACM SIGPLAN NOTICES, V51, P243, DOI 10.1145/2914770.2837646
   Hainry E, 2013, LECT NOTES COMPUT SC, V7794, P305, DOI 10.1007/978-3-642-37075-5_20
   Harper Robert, 2012, Practical Foundations for Programming Languages, DOI DOI 10.1017/CBO9781139342131
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M, 2003, INFORM COMPUT, V183, P57, DOI 10.1016/S0890-5401(03)00009-9
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Kobayashi N, 2005, ACTA INFORM, V42, P291, DOI 10.1007/s00236-005-0179-x
   Kobayashi N, 2003, LECT NOTES COMPUT SC, V2757, P439
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Madet A, 2011, LECT NOTES COMPUT SC, V6690, P138, DOI 10.1007/978-3-642-21691-6_13
   Marion JY, 2011, IEEE S LOG, P123, DOI 10.1109/LICS.2011.41
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Sangiorgi D., 2003, PI CALCULUS THEORY M
   Vasconcelos P, 2008, THESIS U ST ANDREWS
NR 39
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2022
VL 44
IS 3
AR 15
DI 10.1145/3495529
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 3V9XX
UT WOS:000842012200003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Padovani, L
AF Padovani, Luca
TI Context-Free Session Type Inference
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Context-free session types; existential types; OCam1; session type
   inference
AB Some interesting communication protocols can be precisely described only by context-free session types, an extension of conventional session types supporting a general form of sequential composition. The complex metatheory of context-free session types, however, hinders the definition of corresponding checking and inference algorithms. In this work, we study a new syntax-directed type system for context-free session types that is easy to embed into a host programming language. We also detail 2 OCam1 embeddings that allow us to piggyback on OCam1's type system to check and infer context-free session types.
C1 [Padovani, Luca] Univ Torino, Dipartimento Informat, Corso Svizzera 185, I-10149 Turin, Italy.
C3 University of Turin
RP Padovani, L (corresponding author), Univ Torino, Dipartimento Informat, Corso Svizzera 185, I-10149 Turin, Italy.
EM luca.padovani@di.unito.it
OI Padovani, Luca/0000-0001-9097-1297
CR Ahmed A., 2007, Fundamenta Informaticae, V77, DOI DOI 10.1007/11417170_22
   Charguéraud A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P213
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   Dardha O, 2017, INFORM COMPUT, V256, P253, DOI 10.1016/j.ic.2017.06.002
   Demangeon R, 2011, LECT NOTES COMPUT SC, V6901, P280, DOI 10.1007/978-3-642-23217-6_19
   Florijn G, 1995, LECT NOTES COMPUT SC, V952, P351
   Friedman E. P., 1976, Theoretical Computer Science, V1, P297, DOI 10.1016/0304-3975(76)90074-8
   Frisch Alain, 2010, P ACM SIGPLAN WORKSH
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Igarashi A, 2005, ACM T PROGR LANG SYS, V27, P264, DOI 10.1145/1057387.1057390
   KFOURY AJ, 1993, ACM T PROGR LANG SYS, V15, P290, DOI 10.1145/169701.169687
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kobayashi Naoki, 2002, 10 ANN C UNU IIST, P439
   Korenjak A. J., 1966, SWAT, P36, DOI DOI 10.1109/SWAT.1966.22
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Moggi E, 2001, J FUNCT PROGRAM, V11, P591, DOI 10.1017/S0956796801004154
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5502, P316, DOI 10.1007/978-3-642-00590-9_23
   NIERSTRASZ O, 1993, SIGPLAN NOTICES, V28, P1, DOI 10.1145/167962.167976
   Padovani L., 2016, FUSE SIMPLE LIB IMPL
   Padovani L, 2017, LECT NOTES COMPUT SC, V10201, P804, DOI 10.1007/978-3-662-54434-1_30
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   RAVARA A, 2000, LNCS, V1877, P474
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Südholt M, 2005, LECT NOTES COMPUT SC, V3628, P99, DOI 10.1007/11550679_8
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Tov Jesse A., 2012, THESIS
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Walker D, 2001, ACM SIGPLAN NOTICES, V36, P181, DOI 10.1145/507669.507658
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yallop Jeremy, 2010, P ACM SIGPLAN WORKSH
NR 38
TC 9
Z9 9
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2019
VL 41
IS 2
SI SI
AR 9
DI 10.1145/3229062
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JT8FU
UT WOS:000501220300003
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Sekiyama, T
   Igarashi, A
   Greenberg, M
AF Sekiyama, Taro
   Igarashi, Atsushi
   Greenberg, Michael
TI Polymorphic Manifest Contracts, Revised and Resolved
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Design; Theory
AB Manifest contracts track precise program properties by refining types with predicates-for example, {x: Int | x > 0} denotes the positive integers. Contracts and polymorphism make a natural combination: programmers can give strong contracts to abstract types, precisely stating pre-and post conditions while hiding implementation details-for instance, an abstract type of stacks might specify that the pop operation has input type {x: aStack | not (empty x)}.
   This article studies a polymorphic calculus with manifest contracts and establishes fundamental properties including type soundness and relational parametricity. Indeed, this is not the first work on polymorphic manifest contracts, but existing calculi are not very satisfactory. Gronski et al. developed the SAGE language, which introduces polymorphism through the Type: Type discipline, but they do not study parametricity. Some authors of this article have produced two separate works: Belo et al. [2011] and Greenberg [2013] studied polymorphic manifest contracts and parametricity, but their calculi have metatheoretical problems in the type conversion relations. Indeed, they depend on a few conjectures, which turn out to be false. Our calculus is the first polymorphic manifest calculus with parametricity, depending on no conjectures-it resolves the issues in prior calculi with delayed substitution on casts.
C1 [Sekiyama, Taro; Igarashi, Atsushi] Kyoto Univ, Kyoto 6068501, Japan.
   [Greenberg, Michael] Pomona Coll, Dept Comp Sci, 185 E 6th St, Claremont, CA 91711 USA.
   [Sekiyama, Taro] IBM Res, Chuo Ku, 19-21 Nihonbashi,Hakozaki Cho, Tokyo 1038510, Japan.
   [Igarashi, Atsushi] Kyoto Univ, Sakyo Ku, Yoshida Honmachi, Kyoto 6068501, Japan.
C3 Kyoto University; Claremont Colleges; Pomona College; International
   Business Machines (IBM); Kyoto University
RP Sekiyama, T (corresponding author), Kyoto Univ, Kyoto 6068501, Japan.; Sekiyama, T (corresponding author), IBM Res, Chuo Ku, 19-21 Nihonbashi,Hakozaki Cho, Tokyo 1038510, Japan.
EM sekiym@jp.ibm.com; igarashi@kuis.kyoto-u.ac.jp; michael@cs.pomona.edu
RI Igarashi, Atsushi/AAP-4323-2020
OI Igarashi, Atsushi/0000-0002-5143-9764; Greenberg,
   Michael/0000-0003-0014-7670
FU MEXT of Japan [25280024]; Grants-in-Aid for Scientific Research
   [17H01723, 25280024] Funding Source: KAKEN
FX This work was supported in part by the JSPS Grant-in-Aid for Scientific
   Research (B) No. 25280024 from MEXT of Japan.
CR ABADI M, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P213, DOI 10.1145/75277.75296
   Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed Amal, 2009, P WORKSH SCRIPT TO P
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Belo JF, 2011, LECT NOTES COMPUT SC, V6602, P18, DOI 10.1007/978-3-642-19718-5_2
   Bierman GM, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P105
   Bruijn N., 1980, H B CURRY, P579, DOI DOI 10.1016/S0049-237X(08)70203-9)
   Cardelli Luca., 1986, POLYMORPHIC LAMBDA C
   Chugh R, 2012, ACM SIGPLAN NOTICES, V47, P587, DOI 10.1145/2398857.2384659
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Flatt Matthew., 2010, Technical Report PLT-TR-2010-1
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Greenberg M., 2013, THESIS
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Greenberg Michael, 2015, COMBINING MANIFEST C
   Gronski J., 2007, Proceedings of the 8th Symposium on Trends in Functional Programming (TFP), P54
   Gronski Jessica, 2006, P SCHEM FUNCT PROGR
   Grossman D, 2000, ACM T PROGR LANG SYS, V22, P1037, DOI 10.1145/371880.371887
   Guha A., 2007, Proceedings of the 2007 symposium on Dynamic languages, DLS '07, P29, DOI [10.1145/1297081.1297089, DOI 10.1145/1297081.1297089]
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Henglein Fritz, 1992, P 4 EUR S PROGR LOND, P233
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Hinze Ralf, 2003, TR20031901 CORN U
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Jhala Ranjit, 2014, PLPV, P27
   Kawaguchi M, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P304, DOI 10.1145/1542476.1542510
   Kent AM, 2016, ACM SIGPLAN NOTICES, V51, P296, DOI [10.1145/2980983.2908091, 10.1145/2908080.2908091]
   Knowles K., 2009, Proceedings of the 3rd workshop on Programming languages meets program veri cation, PLPV '09, P27, DOI [10.1145/1481848.1481853, DOI 10.1145/1481848.1481853]
   KNOWLES K, 2014, THESIS
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Mandelbaum Y, 2003, ACM SIGPLAN NOTICES, V38, P213, DOI 10.1145/944746.944725
   Matthews J, 2008, LECT NOTES COMPUT SC, V4960, P16
   Mitchell John C., 1985, POPL '85, P37, DOI DOI 10.1145/318593.318606
   Moore Scott., 2014, Proc. Symp. on Operating Systems Design and Implementation, P183
   Morris J. H.  Jr., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P120
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Neis Georg, 2009, P 14 ACM SIGPLAN C F, P135
   Nguyen PhucC., 2014, PROC ACM INT C FUNCT, P139
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Paulin-Mohring C., 1993, Typed Lambda Calculi and Applications, V664, DOI [10.1007/BFb0037116., DOI 10.1007/BFB0037116]
   Pierce B., 2000, Relating cryptography and polymorphism
   Pitts A. M., 2000, Mathematical Structures in Computer Science, V10, P321, DOI 10.1017/S0960129500003066
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sekiyama T, 2015, ACM SIGPLAN NOTICES, V50, P195, DOI [10.1145/2676726.2676996, 10.1145/2775051.2676996]
   Sekiyama Taro, 2012, LOGICAL RELATIONS MA
   Siek Jeremy G., 2006, P SCHEM FUNCT PROGR, P81
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 60
TC 8
Z9 8
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2017
VL 39
IS 1
AR 3
DI 10.1145/2994594
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ER1IR
UT WOS:000398544100003
DA 2024-07-18
ER

PT J
AU Norris, B
   Demsky, B
AF Norris, Brian
   Demsky, Brian
TI A Practical Approach for Model Checking C/C++11 Code
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Relaxed memory model; model checking
AB Writing low-level concurrent software has traditionally required intimate knowledge of the entire toolchain and often has involved coding in assembly. New language standards have extended C and C++ with support for low-level atomic operations and a weak memory model, enabling developers to write portable and efficient multithreaded code.
   In this article, we present CDSCHECKER, a tool for exhaustively exploring the behaviors of concurrent code under the C/C++ memory model. We have used CDSCHECKER to exhaustively unit test concurrent data structure implementations and have discovered errors in a published implementation of a work-stealing queue and a single producer, single consumer queue.
C1 [Norris, Brian] Univ Calif Irvine, Irvine, CA USA.
   [Demsky, Brian] Univ Calif Irvine, Dept Elect Engn & Comp Sci, Irvine, CA 92697 USA.
   [Norris, Brian] 1600 Amphiteatre Pkwy, Mountain View, CA 94043 USA.
C3 University of California System; University of California Irvine;
   University of California System; University of California Irvine
RP Norris, B (corresponding author), Univ Calif Irvine, Irvine, CA USA.; Demsky, B (corresponding author), Univ Calif Irvine, Dept Elect Engn & Comp Sci, Irvine, CA 92697 USA.; Norris, B (corresponding author), 1600 Amphiteatre Pkwy, Mountain View, CA 94043 USA.
EM briannorris@google.com; bdemsky@uci.edu
OI Demsky, Brian/0000-0003-1210-3130
FU Google Research Award; National Science Foundation [CCF-0846195,
   CCF-1217854, CNS-1228995, CCF-1319786]; Direct For Computer & Info Scie
   & Enginr; Division of Computing and Communication Foundations [1217854]
   Funding Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1319786] Funding Source: National Science Foundation
FX This project was partly supported by a Google Research Award and by the
   National Science Foundation under Grants No. CCF-0846195, No.
   CCF-1217854, No. CNS-1228995, and No. CCF-1319786.
CR [Anonymous], 2012, WRITING SPINNING THR
   [Anonymous], 2012, SYNCHRONIZATION ALGO
   [Anonymous], P 2008 ACM SIGPLAN C
   [Anonymous], 98992011 ISOIEC
   [Anonymous], 2012, LOOK SOME BOUNDED 2
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Batty Mark, 2011, P S PRINC PROGR LANG
   Batty Mark, 2013, P S PRINC PROGR LANG
   Blanchette Jasmin Christian, 2011, P 13 INT ACM SIGPLAN
   Boehm H.-J., 2013, N3710 SPECIFYING ABS
   Boehm Hans, 2012, P 2012 ACM SIGPLAN W
   Boehm Hans-J., 2014, P ACM SIGPLAN WORKSH
   Boehm Hans-J., 2013, N3786 PROHIBITING LO
   Burckhardt Sebastian, 2010, P 2010 ACM SIGPLAN C
   Click C., 2007, LOCK FREE HASH TABLE
   De Arnab, 2008, P 8 ACM SIGPLAN SIGS
   Elmas Tayfun, 2007, P 2007 ACM SIGPLAN C
   Engler D., 2003, SOSP 03
   Flanagan Cormac, 2010, P 2010 ACM SIGPLAN C
   Flanagan Cormac, 2005, P S PRINC PROGR LANG
   Flanagan Cormac., 2009, Proceedings of the 2009 ACM SIGPLAN Conference on Programming Language Design and Implementation
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032
   Godefroid Patrice, 1997, P S PRINC PROGR LANG
   Huynh Thuan Quang, 2006, P 14 INT C FORM METH
   iSO/IEC, 148822011 ISOIEC
   Jonsson Bengt, 2009, SIGARCH COMPUT ARCHI, V36, P65
   Kuperstein Michael, 2010, P C FORM METH COMP A
   Kuperstein Michael, 2011, P 2011 ACM SIGPLAN C
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Le Nhat Minh, 2013, P 18 ACM SIGPLAN S P
   Lucia Brandon, 2010, P 37 ANN INT S COMP
   Marino Daniel, 2011, P 2011 ACM SIGPLAN C
   Mellor-Crummey John M., 1991, P 4 INT C ARCH SUPP, P269
   Michael M. M., 1996, P 15 ANN ACM S PRINC
   Moir Mark., 2004, Handbook of Data Structures and Applications, p47
   Musuvathi M., 2008, P 8 USENIX C OP SYST
   Norris Brian, 2013, P 28 ACM SIGPLAN C O
   Park SJ, 1999, IEEE T COMPUT, V48, P227, DOI 10.1109/12.752664
   Savage S., 1997, ACM T COMPUT SYST, V15, P4
   Shavit N, 2011, COMMUN ACM, V54, P76, DOI 10.1145/1897852.1897873
   Vafeiadis Viktor, 2013, P 28 ACM SIGPLAN C O
   Vafeiadis Viktor, 2015, P 42 ANN ACM SIGPLAN
   Vyukov Dmitriy, RELACY RACE DETECTOR
   Wang Chao, 2008, LECT NOTES COMPUT SC, P126
   Yang Yu, 2008, P 15 INT SPIN WORKSH
   Yang YP, 2009, PROCEEDINGS OF THE ASME PRESSURE VESSELS AND PIPING CONFERENCE - 2008, VOL 6, PT A AND B, P279
NR 46
TC 22
Z9 25
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2016
VL 38
IS 3
AR 10
DI 10.1145/2806886
PG 51
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DL6BF
UT WOS:000375721600003
DA 2024-07-18
ER

PT J
AU Stork, S
   Naden, K
   Sunshine, J
   Mohr, M
   Fonseca, A
   Marques, P
   Aldrich, J
AF Stork, Sven
   Naden, Karl
   Sunshine, Joshua
   Mohr, Manuel
   Fonseca, Alcides
   Marques, Paulo
   Aldrich, Jonathan
TI AEMINIUM: A Permission-Based Concurrent-by-Default Programming Language
   Approach
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Languages; Theory; Performance; Access permissions; permissions; data
   groups; concurrency
ID OWNERSHIP TYPES
AB Writing concurrent applications is extremely challenging, not only in terms of producing bug-free and maintainable software, but also for enabling developer productivity. In this article we present the AEMINIUM concurrent-by-default programming language. Using AEMINIUM programmers express data dependencies rather than control flow between instructions. Dependencies are expressed using permissions, which are used by the type system to automatically parallelize the application. The AEMINIUM approach provides a modular and composable mechanism for writing concurrent applications, preventing data races in a provable way. This allows programmers to shift their attention from low-level, error-prone reasoning about thread interleaving and synchronization to focus on the core functionality of their applications. We study the semantics of AEMINIUM through mu AEMINIUM, a sound core calculus that leverages permission flow to enable concurrent-by-default execution. After discussing our prototype implementation we present several case studies of our system. Our case studies show up to 6.5X speedup on an eight-core machine when leveraging data group permissions to manage access to shared state, and more than 70% higher throughput in a Web server application.
C1 [Stork, Sven; Naden, Karl; Sunshine, Joshua; Aldrich, Jonathan] Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
   [Mohr, Manuel] Karlsruhe Inst Technol, D-76021 Karlsruhe, Germany.
   [Fonseca, Alcides; Marques, Paulo] Univ Coimbra, Coimbra, Portugal.
C3 Carnegie Mellon University; Helmholtz Association; Karlsruhe Institute
   of Technology; Universidade de Coimbra
RP Stork, S (corresponding author), Carnegie Mellon Univ, Dept Comp Sci, Pittsburgh, PA 15213 USA.
EM svens@cs.cmu.edu
RI Fonseca, Alcides/ABH-3614-2020
OI Fonseca, Alcides/0000-0002-0879-4015; Aldrich,
   Jonathan/0000-0003-0631-5591
FU Portuguese Research Agency - FCT [SFRH/BD/33522/2008]; CISUC (RD Unit)
   [326/97]; CMU/Portugal program (R&D Project Aeminium)
   [CMU-PT/SE/0038/2008]; US NSF [CCF-1116907]; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1116907] Funding Source: National Science Foundation; Fundação para a
   Ciência e a Tecnologia [SFRH/BD/33522/2008, CMU-PT/SE/0038/2008] Funding
   Source: FCT
FX This work was partially supported by the Portuguese Research Agency -
   FCT, through a scholarship (SFRH/BD/33522/2008), CISUC (R&D Unit 326/97)
   and the CMU/Portugal program (R&D Project Aeminium CMU-PT/SE/0038/2008).
   Supporting work on the Plaid language was funded through the US NSF
   grant no. CCF-1116907.
CR Acar U. A., 2011, P ACM INT C OBJ OR P
   Adve SV, 2010, COMMUN ACM, V53, P90, DOI 10.1145/1787234.1787255
   Aldrich J., 2012, CMUISR12103
   Aldrich J., 2009, P ACM INT C OBJ OR P
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   Anderson Z, 2008, ACM SIGPLAN NOTICES, V43, P149, DOI 10.1145/1379022.1375600
   Beckman N. E., 2008, P ACM INT C OBJ OR P
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   BLUMOFE RD, 1995, P ACM SIGPLAN S PRIN
   Bocchino Jr R. L., 2009, P ACM INT C OBJ OR P
   Bocchino RL, 2011, ACM SIGPLAN NOTICES, V46, P535, DOI 10.1145/1925844.1926447
   Boehm H.-J., 2009, HPL200945
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyland J., 2003, P 10 INT S STAT AN
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   CLICK C, 1995, SIGPLAN NOTICES, V30, P35, DOI 10.1145/202530.202534
   Craik A, 2010, LECT NOTES COMPUT SC, V6011, P145, DOI 10.1007/978-3-642-11970-5_9
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Galilee F, 1998, 1998 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P88, DOI 10.1109/PACT.1998.727176
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Hindman Benjamin., 2006, Proceedings of the 2006 workshop on Memory system performance and correctness, P82, DOI DOI 10.1145/1178597.1178611
   Igarashi A., 2001, P ACM INT C OBJ OR P
   Leino K. R. M., 1998, P ACM INT C OBJ OR P
   Leino KRM, 2002, ACM SIGPLAN NOTICES, V37, P246, DOI 10.1145/543552.512559
   MCKEEMAN WM, 1965, COMMUN ACM, V8, P443, DOI 10.1145/364995.365000
   Microsoft Corporation, 2009, AX PROGR GUID
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moore K. F., 2008, P 35 ANN ACM SIGPLAN
   Naden K, 2012, ACM SIGPLAN NOTICES, V47, P557, DOI 10.1145/2103621.2103722
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rumbaugh J., 1975, MITLCSTR150
   SARKAR V., 1989, PARTITIONING SCHEDUL
   Stork S., 2010, CMUISR10125R2
   Stork S., 2012, AEMINIUM CODE REPOSI
   Stork S, 2013, THESIS CARNEGIE MELL
   Stork Sven., 2009, Proceeding of the 24th ACM SIGPLAN conference companion on Object oriented programming systems languages and applications, P933
   Sunshine J, 2011, ACM SIGPLAN NOTICES, V46, P713, DOI 10.1145/2076021.2048122
   Vaziri M., 2010, P ACM INT C OBJ OR P
NR 40
TC 16
Z9 17
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAR
PY 2014
VL 36
IS 1
AR 2
DI 10.1145/2543920
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AD8TE
UT WOS:000333537700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Joisha, PG
   Schreiber, RS
   Banerjee, P
   Boehm, HJ
   Chakrabarti, DR
AF Joisha, Pramod G.
   Schreiber, Robert S.
   Banerjee, Prithviraj
   Boehm, Hans-J.
   Chakrabarti, Dhruva R.
TI On a Technique for Transparently Empowering Classical Compiler
   Optimizations on Multithreaded Code
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Algorithms; Languages; Performance; Theory; Data-flow analysis;
   parallel-program optimization
ID PARALLEL; EFFICIENT; FORM
AB A large body of data-flow analyses exists for analyzing and optimizing sequential code. Unfortunately, much of it cannot be directly applied on parallel code, for reasons of correctness. This article presents a technique to automatically, aggressively, yet safely apply sequentially-sound data-flow transformations, without change, on shared-memory programs. The technique is founded on the notion of program references being "siloed" on certain control-flow paths. Intuitively, siloed references are free of interference from other threads within the confines of such paths. Data-flow transformations can, in general, be unblocked on siloed references.
   The solution has been implemented in a widely used compiler. Results on benchmarks from SPLASH-2 show that performance improvements of up to 41% are possible, with an average improvement of 6% across all the tested programs over all thread counts.
C1 [Joisha, Pramod G.; Schreiber, Robert S.; Banerjee, Prithviraj; Boehm, Hans-J.; Chakrabarti, Dhruva R.] Hewlett Packard Labs, Palo Alto, CA 94304 USA.
C3 Hewlett-Packard
RP Joisha, PG (corresponding author), Hewlett Packard Labs, Palo Alto, CA 94304 USA.
EM pramod.joisha@hp.com; rob.schreiber@hp.com; prith.banerjee@hp.com;
   hans.boehm@hp.com; dhruva.chakrabarti@hp.com
CR Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 1999, 98991999 ISOIEC
   [Anonymous], 1997, Languages and Compilers for Parallel Computing
   [Anonymous], 1990, ICPP
   [Anonymous], 10031 IEEE
   Blanchet B, 1999, ACM SIGPLAN NOTICES, V34, P20, DOI 10.1145/320385.320387
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Bogda J, 1999, ACM SIGPLAN NOTICES, V34, P35, DOI 10.1145/320385.320388
   Bristow G., 1979, Proceedings of the 4th International Conference on Software Engineering, P265
   C STANDARDS COMMITTEE (WG14), 2010, COMM DRAFT PROGR LAN
   Callahan David., 1988, PADD 88, P100
   Choi JD, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/320385.320386
   Chow F., 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P253
   Chugh R, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P316, DOI 10.1145/1375581.1375620
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Duesterwald Evelyn, 1991, P S TEST ANAL VER TA, P36
   GCC CHANGES, 2009, GCC 4 4 REL SER CHAN
   Heffner Kelly, 2007, 2007 16th International Conference on Parallel Architectures and Compilation Techniques, P119
   Hendren L. J., 1990, IEEE Transactions on Parallel and Distributed Systems, V1, P35, DOI 10.1109/71.80123
   Huang L, 2008, LECT NOTES COMPUT SC, V4935, P138, DOI 10.1007/978-3-540-69303-1_14
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   KARP AH, 1990, COMMUN ACM, V33, P539, DOI 10.1145/78607.78614
   Knoop J, 1996, ACM T PROGR LANG SYS, V18, P268, DOI 10.1145/229542.229545
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Li L, 2005, LECT NOTES COMPUT SC, V3602, P194, DOI 10.1007/11532378_15
   MASTICOLA SP, 1993, SIGPLAN NOTICES, V28, P129, DOI 10.1145/173284.155346
   Naumovich G, 1999, LECT NOTES COMPUT SC, V1687, P338, DOI 10.1145/318774.319252
   Naumovich G., 1998, Software Engineering Notes, V23, P24, DOI 10.1145/291252.288213
   Novillo D, 1998, PROC INT CONF PARAL, P356, DOI 10.1109/ICPP.1998.708506
   Novillo Diego, 2007, P GCC DEV SUMM CIT, P97
   OPENMP API, 2008, OPENMP APPL PROGR IN
   PETE BECKER ED, 2011, PROGRAMMING LANGUAGE
   Rodríguez E, 2005, LECT NOTES COMPUT SC, V3586, P551
   ROGERS A, 1992, SIGPLAN NOTICES, V27, P38, DOI 10.1145/143371.143484
   Ruf E, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/358438.349327
   Rugina R, 2003, ACM T PROGR LANG SYS, V25, P70, DOI 10.1145/596980.596982
   Sarkar V., 1997, LCPC, P94
   Satoh S., 2001, Scientific Programming, V9, P131
   Sevcik Jaroslav, 2008, THESIS U EDINBURGH
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   SREEDHAR V. C., 2005, 63 CAPSL U DEL
   Srinivasan H., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P260, DOI 10.1145/158511.158644
   Sura Z., 2005, Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, PPoPP '05, P2, DOI DOI 10.1145/1065944.1065947
   TAYLOR RN, 1983, COMMUN ACM, V26, P362, DOI 10.1145/69586.69587
   Tian X., 2002, Intel Technology Journal, V6, P36
   von Praun C, 2004, LECT NOTES COMPUT SC, V2958, P390
   von Praun C, 2003, ACM SIGPLAN NOTICES, V38, P115, DOI 10.1145/780822.781145
   WOO SC, 1995, ACM COMP AR, P24, DOI 10.1109/ISCA.1995.524546
   ZHANG Y., 2007, OPTIMIZED LOCK ASSIG
NR 50
TC 1
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUN
PY 2012
VL 34
IS 2
AR 9
DI 10.1145/2220365.2220368
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 968JW
UT WOS:000305977300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Sangiorgi, D
   Kobayashi, N
   Sumii, E
AF Sangiorgi, Davide
   Kobayashi, Naoki
   Sumii, Eijiro
TI Environmental Bisimulations for Higher-Order Languages
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Theory; Verification; Higher-order languages; bisimulation; congruence;
   lambda-calculus; higher-order pi-calculus
ID LAMBDA-CALCULUS; RECURSIVE TYPES; HOWES METHOD; EQUIVALENCE
AB Developing a theory of bisimulation in higher-order languages can be hard. Particularly challenging can be: (1) the proof of congruence, as well as enhancements of the bisimulation proof method with "up-to context" techniques, and (2) obtaining definitions and results that scale to languages with different features.
   To meet these challenges, we present environment bisimulations, a form of bisimulation for higher-order languages, and its basic theory. We consider four representative calculi: pure lambda-calculi (call-by-name and call-by-value), call-by-value.-calculus with higher-order store, and then Higher-Order p-calculus. In each case: we present the basic properties of environment bisimilarity, including congruence; we show that it coincides with contextual equivalence; we develop some upto techniques, including up-to context, as examples of possible enhancements of the associated bisimulation method.
   Unlike previous approaches (such as applicative bisimulations, logical relations, Sumii-Pierce-Koutavas-Wand), our method does not require induction/indices on evaluation derivation/steps (which may complicate the proofs of congruence, transitivity, and the combination with up-to techniques), or sophisticated methods such as Howe's for proving congruence. It also scales from the pure.-calculi to the richer calculi with simple congruence proofs.
C1 [Sangiorgi, Davide] Univ Bologna, I-40126 Bologna, Italy.
   [Kobayashi, Naoki; Sumii, Eijiro] Tohoku Univ, Sendai, Miyagi 980, Japan.
C3 University of Bologna; Tohoku University
RP Sangiorgi, D (corresponding author), Univ Bologna, I-40126 Bologna, Italy.
EM davide.sangiorgi@cs.unibo.it
OI Kobayashi, Naoki/0000-0002-0537-0604
FU EU [231620]; Kakenhi [20240001, 22300005]; Grants-in-Aid for Scientific
   Research [22300005, 20240001] Funding Source: KAKEN
FX D. Sangiorgi was supported by the EU FET project 231620 "Hats". N.
   Kobayashi and E. Sumii were supported by Kakenhi 20240001 and 22300005.
CR Abadi M, 1998, LECT NOTES COMPUT SC, V1381, P12, DOI 10.1007/BFb0053560
   Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Ahmed Amal., 2003, An Indexed Model of Impredicative Polymorphism and Mutable References
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   BALDAMUS M, 1995, 9521 BERL U TECHN CO
   Birkedal L, 1999, INFORM COMPUT, V155, P3, DOI 10.1006/inco.1999.2828
   Boreale M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P157, DOI 10.1109/LICS.1999.782608
   BOREALE M, 1998, P ANN IEEE S LOG COM
   Cao ZN, 2006, LECT NOTES COMPUT SC, V3921, P63
   CRARY K, 2000, SYNTACTIC LOGICAL RE
   FERREIRA W, 1998, J FUNCTIONAL PROGRAM, V8, P447
   Godskesen JC, 2005, LECT NOTES COMPUT SC, V3821, P140, DOI 10.1007/11590156_11
   GORDON AD, 1993, THESIS U CAMBRIDGE
   HONDA K, 1995, THEOR COMPUT SCI, V151, P437, DOI 10.1016/0304-3975(95)00074-7
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Jeffrey A, 2004, THEOR COMPUT SCI, V323, P1, DOI 10.1016/j.tcs.2004.03.005
   Jeffrey A., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P56, DOI 10.1109/LICS.1999.782586
   Jeffrey A, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(1:4)2005
   Koutavas V, 2006, LECT NOTES COMPUT SC, V3924, P146
   KOUTAVAS V, 2006, P 33 ACM SIGPLAN SIG, P141
   Lassen Soren Bogh, 1998, THESIS U AARHUS
   LENGLET S, 2010, THESIS U J FOURIER G
   Lenglet S, 2009, LECT NOTES COMPUT SC, V5710, P448, DOI 10.1007/978-3-642-04081-8_30
   Merro M, 2005, J ACM, V52, P961, DOI 10.1145/1101821.1101825
   MERRO M, 2002, P POPL 02, P71
   Milner R, 2006, INFORM COMPUT, V204, P60, DOI 10.1016/j.ic.2005.07.003
   Milner R., 1989, Communication and concurrency
   Mitchell John C., 1996, Foundation of computing series
   Morris James Hiram, 1968, Ph.D. thesis
   ONG L, 1988, THESIS U LONDON
   Pierce BC, 2000, J ACM, V47, P531, DOI 10.1145/337244.337261
   PITTS AM, 1997, SEMANTICS LOGICS COM, P241, DOI DOI 10.1017/CBO9780511526619
   PITTS AM, 2005, ADV TOPICS TYPES PRO, P245
   POUS D, 2008, THESIS ENS LYON
   POUS D, ENHANCEMENTS BISIMUL
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   SANDS D, 1998, PUBLICATIONS NEWTON, P275
   SANGIORGI D, 1994, INFORM COMPUT, V111, P120, DOI 10.1006/inco.1994.1042
   Sangiorgi D, 2001, THEOR COMPUT SCI, V253, P311, DOI 10.1016/S0304-3975(00)00097-9
   Sangiorgi D, 1996, INFORM COMPUT, V131, P141, DOI 10.1006/inco.1996.0096
   Sangiorgi D., 1992, PhD thesis
   Sangiorgi D, 2007, LECT NOTES COMPUT SC, V4767, P364
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Schmitt A, 2005, LECT NOTES COMPUT SC, V3267, P146
   Stovring K, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P161
   Sumii E., 2003, Journal of Computer Security, V11, P521
   Sumii E, 2007, THEOR COMPUT SCI, V375, P169, DOI 10.1016/j.tcs.2006.12.032
   Sumii E, 2007, J ACM, V54, DOI 10.1145/1284320.1284325
   Sumii E, 2009, LECT NOTES COMPUT SC, V5771, P455, DOI 10.1007/978-3-642-04027-6_33
   THOMSEN B, 1993, ACTA INFORM, V30, P1, DOI 10.1007/BF01200262
NR 53
TC 46
Z9 47
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2011
VL 33
IS 1
AR 5
DI 10.1145/1889997.1890002
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 709TH
UT WOS:000286463800004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Reps, T
   Sagiv, M
   Loginov, A
AF Reps, Thomas
   Sagiv, Mooly
   Loginov, Alexey
TI Finite Differencing of Logical Formulas for Static Analysis
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
AB This article concerns mechanisms for maintaining the value of an instrumentation relation (also known as a derived relation or view), defined via a logical formula over core relations, in response to changes in the values of the core relations. It presents an algorithm for transforming the instrumentation relation's defining formula into a relation-maintenance formula that captures what the instrumentation relation's new value should be.
   The algorithm runs in time linear in the size of the defining formula. The technique applies to program analysis problems in which the semantics of statements is expressed using logical formulas that describe changes to core relation values. It provides a way to obtain values of the instrumentation relations that reflect the changes in core relation values produced by executing a given statement.
   We present experimental evidence that our technique is an effective one: for a variety of benchmarks, the relation-maintenance formulas produced automatically using our approach yield the same precision as the best available hand-crafted ones.
C1 [Reps, Thomas] Univ Wisconsin, Dept Comp Sci, Madison, WI 53706 USA.
   [Sagiv, Mooly] Tel Aviv Univ, Sch Comp Sci, Tel Aviv, Israel.
C3 University of Wisconsin System; University of Wisconsin Madison; Tel
   Aviv University
RP Reps, T (corresponding author), Univ Wisconsin, Dept Comp Sci, Madison, WI 53706 USA.
EM reps@cs.wisc.edu; msagiv@post.tau.ac.il; alexey@grammatech.com
FU NSF [CCR-9619219, CCR-9986308, CCF-0540955, CCF-0524051]; U.S.-Israel
   BSF [96-00337]; ONR [N00014-01-1-{0708,0796}]
FX The work was supported in part by NSF under grants CCR-{9619219,
   9986308}, and CCF-{0540955, 0524051}, by the U.S.-Israel BSF under grant
   96-00337, by ONR under contracts N00014-01-1-{0708,0796}, and by the von
   Humboldt and Guggenheim Foundations.
CR AKERS SB, 1959, J SOC IND APPL MATH, V7, P487
   [Anonymous], 2001, P ACM SIGPLAN 2001 C, DOI DOI 10.1145/378795.378846
   [Anonymous], POPL 2001
   BALL T, 2001, P 8 INT SPIN WORKSH, P103
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Boerger E., 2003, Abstract State Machines
   BOGUDLOV I, 2007, TR20070101 TEL AV U
   Bogudlov I, 2007, LECT NOTES COMPUT SC, V4590, P221
   Chaki S, 2003, PROC INT CONF SOFTW, P385, DOI 10.1109/ICSE.2003.1201217
   CLARKE EM, 2000, P COMP AID VER, P154
   Cousot P, 2003, LECT NOTES COMPUT SC, V2772, P243
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Das S., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P160
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   DONG GZ, 1995, INFORM COMPUT, V120, P101, DOI 10.1006/inco.1995.1102
   Dong GZ, 2000, SIGMOD REC, V29, P44, DOI 10.1145/344788.344808
   Dor N, 2000, LECT NOTES COMPUT SC, V1824, P115
   Goldstine H.H., 1977, A History of Numerical Analysis From the 16th Through the 19th Century
   Gopan D, 2004, LECT NOTES COMPUT SC, V2988, P512
   GOPAN D, 2005, POPL, P338, DOI DOI 10.1145/1040305.1040333
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   GUPTA A, 1999, MAT VIEWS TECHNIQUES
   Henzinger ThomasA., 2002, Proc. of the Symposium on Principles of Programming Languages. POPL, P58
   Hesse William, 2003, THESIS U MASSACHUSET
   Immerman N, 2004, LECT NOTES COMPUT SC, V3114, P281
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   JEANNET B, 2004, P STAT AN S, P246
   Jeannet B, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667050
   Kurshan R.P., 1994, COMPUTER AIDED VERIF
   LAHIRI SK, 2006, PRINCIPLES PROGRAMMI, P115
   Leggett M., 2000, PHOTOFILE, V60, P26, DOI [10.3316/ielapa.200100603, DOI 10.3316/IELAPA.200100603]
   Lim J, 2008, LECT NOTES COMPUT SC, V4959, P36
   LIU YA, 1995, SCI COMPUT PROGRAM, V24, P1, DOI 10.1016/0167-6423(94)00031-9
   LIU YA, 1996, P 23 ANN ACM S PRINC, P157
   Loginov A, 2005, LECT NOTES COMPUT SC, V3576, P519
   LOGINOV A, 2006, 1574 U WISC COMP SCI
   Loginov A, 2007, LECT NOTES COMPUT SC, V4444, P247
   Loginov A, 2006, LECT NOTES COMPUT SC, V4134, P261
   Malmkjaer K., 1993, THESIS KANSAS STATE
   MANEVICH R, 2005, P 6 VMCAI, P181
   McMillan KL, 1999, LECT NOTES COMPUT SC, V1703, P219
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   MOLLER A, 2001, PLDI, P221
   MYCROFT A, 1986, LECT NOTES COMPUT SC, V217, P156
   MYCROFT A, 1986, P C PRINC PROGR LANG, P296
   Nelson G., 1983, POPL 83, P38
   NIELSON F, 1989, THEOR COMPUT SCI, V69, P117, DOI 10.1016/0304-3975(89)90091-1
   PAIGE R, 1982, ACM T PROGR LANG SYS, V4, P402, DOI 10.1145/357172.357177
   Patnaik S, 1997, J COMPUT SYST SCI, V55, P199, DOI 10.1006/jcss.1997.1520
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Reps T, 2003, LECT NOTES COMPUT SC, V2618, P380
   Reps T, 2002, IEEE S LOG, P40, DOI 10.1109/LICS.2002.1029816
   REPS T, 2004, P C COMP AID VER, P15
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rinetzky N., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P133
   RINETZKY N, 2005, POPL, P296
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Scherpelz ER, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P135, DOI 10.1145/1250734.1250750
   SHARIR M, 1982, ACM T PROGR LANG SYS, V4, P196, DOI 10.1145/357162.357166
   Tormey S., 2000, P STAT AN S, P280
   *TVLA, TVLA SYST
   VANFRAASSEN BC, 1966, J PHILOS, V63, P481, DOI 10.2307/2024549
   Yorsh G, 2004, LECT NOTES COMPUT SC, V2988, P530
   Yorsh G, 2007, ACM T COMPUT LOG, V8, DOI 10.1145/1182613.1182618
   [No title captured]
NR 66
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD AUG
PY 2010
VL 32
IS 6
AR 24
DI 10.1145/1749608.1749613
PG 55
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 661VO
UT WOS:000282759900005
DA 2024-07-18
ER

PT J
AU Thies, W
   Vivien, F
   Amarasinghe, S
AF Thies, William
   Vivien, Frederic
   Amarasinghe, Saman
TI A step towards unifying schedule and storage optimization
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; automatic parallelization; affine scheduling; storage
   optimization; occupancy vectors; polyhedral model; affine recurrence
   equations
ID EFFICIENT SOLUTIONS; MEMORY
AB We present a unified mathematical framework for analyzing the tradeoffs between parallelism and storage allocation within a parallelizing compiler. Using this framework, we show how to find a good storage mapping for a given schedule, a good schedule for a given storage mapping, and a good storage mapping that is valid for all legal (one-dimensional affine) schedules. We consider storage mappings that collapse one dimension of a multidimensional array, and programs that are in a single assignment form and accept a one-dimensional affine schedule. Our method combines affine scheduling techniques with occupancy vector analysis and incorporates general affine dependences across statements and loop nests. We formulate the constraints imposed by the data dependences and storage mappings as a set of linear inequalities, and apply numerical programming techniques to solve for the shortest occupancy vector. We consider our method to be a first step towards automating a procedure that finds the optimal tradeoff between parallelism and storage space.
C1 MIT, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Thies, W (corresponding author), MIT, Cambridge, MA 02139 USA.
EM thies@alum.mit.edu
OI Amarasinghe, Saman/0000-0002-7231-7643; Vivien,
   Frederic/0000-0002-0663-6152
CR Balev S., 1998, SPAA '98. Tenth Annual ACM Symposium on Parallel Algorithms and Architectures, P250, DOI 10.1145/277651.277691
   Barthou D, 2000, INT J PARALLEL PROG, V28, P213, DOI 10.1023/A:1007500431910
   Clauss P., 1996, P 10 ACM INT C SUPER, P278, DOI DOI 10.1145/237578.237617
   Cohen A, 1999, LECT NOTES COMPUT SC, V1685, P375
   COHEN A, 1999, P 2 INT S HIGH PERF, P83
   Darte A, 2005, IEEE T COMPUT, V54, P1242, DOI 10.1109/TC.2005.167
   DARTE A, 1991, INTEGRATION, V12, P293, DOI 10.1016/0167-9260(91)90026-H
   Darte A., 1997, Parallel Processing Letters, V7, P379, DOI 10.1142/S0129626497000383
   DARTE A, 1998, MATH APPL, V105, P147
   Darte A., 2000, SCHEDULING AUTOMATIC
   De Greef E, 1997, PARALLEL COMPUT, V23, P1811, DOI 10.1016/S0167-8191(97)00089-6
   DeGreef E, 1997, IEEE INT CONF ASAP, P66, DOI 10.1109/ASAP.1997.606813
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   Feautrier P., 1988, Conference Proceedings. 1988 International Conference on Supercomputing, P429, DOI 10.1145/55364.55406
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P389, DOI 10.1007/BF01379404
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   FEAUTRIER P, 2001, UNPUB USE FARKAS LEM
   FEAUTRIER P, 1996, LECT NOTES COMPUTER, V1132, P79
   FEAUTRIER P, 1998, INTERPLAY EXPANSION
   FEAUTRIER P, 2001, LECT NOTES COMPUTER, V1808, P173
   IRIGOIN F, 1988, P 15 ANN ACM S PRINC, P319
   KOUACHE R, 2002, THESIS U LOUIS PASTE
   Lefebvre V, 1998, PARALLEL COMPUT, V24, P649, DOI 10.1016/S0167-8191(98)00029-5
   Lim A.W., 2001, PROC EIGTH ACM SIGPL, P103
   Lim SGL, 1998, FEMINIST STUD, V24, P3
   Loechner V, 1997, INT J PARALLEL PROG, V25, P525, DOI 10.1023/A:1025117523902
   Maydan D.E., 1993, POPL '93: Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P2
   Murthy PK, 2004, ACM T DES AUTOMAT EL, V9, P212, DOI 10.1145/989995.989999
   Murthy PK, 2001, IEEE T COMPUT AID D, V20, P177, DOI 10.1109/43.908427
   NEEDLEMAN SB, 1970, J MOL BIOL, V48, P443, DOI 10.1016/0022-2836(70)90057-4
   PIKE G, 2002, THESIS U CALIFORNIA
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   Quilleré F, 2000, ACM T PROGR LANG SYS, V22, P773, DOI 10.1145/365151.365152
   Quilleré F, 2000, INT J PARALLEL PROG, V28, P469, DOI 10.1023/A:1007554627716
   Quinton P., 1989, Journal of VLSI Signal Processing, V1, P95, DOI 10.1007/BF02477176
   QUINTON P, 1987, SYSTEMATIC DESIGN SY, P229
   Rajopadhye S., 1986, P 6 INT C FDN SOFTW, P488
   SAOUTER Y, 1992, THESIS U RENNES
   Schrijver A., 1998, THEORY LINEAR INTEGE
   SHELDON JW, 2001, P 14 INT WORKSH LANG, P254
   Wilde D., 1997, Parallel Processing Letters, V7, P203, DOI 10.1142/S0129626497000218
   Wong Y., 1992, Proceedings. Sixth International Parallel Processing Symposium (Cat. No.92TH0419-2), P275, DOI 10.1109/IPPS.1992.223033
   WONG Y, 1989, THESIS YALE U
   [No title captured]
NR 44
TC 6
Z9 10
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD OCT
PY 2007
VL 29
IS 6
AR 34
DI 10.1145/1286821.1286825
PG 45
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 231RU
UT WOS:000250967500005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Carlsson, R
   Sagonas, K
   Wilhelmsson, J
AF Carlsson, Richard
   Sagonas, Konstantinos
   Wilhelmsson, Jesper
TI Message analysis for concurrent programs using message passing
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE static analysis; runtime systems; concurrent languages; message passing;
   Erlang
AB We describe an analysis-driven storage allocation scheme for concurrent systems that use message passing with copying semantics. The basic principle is that in such a system, data which is not part of any message does not need to be allocated in a shared data area. This allows for the deallocation of thread-specific data without requiring global synchronization and often without even triggering garbage collection. On the other hand, data that is part of a message should preferably be allocated on a shared area since this allows for fast (O(1)) interprocess communication that does not require actual copying. In the context of a dynamically typed, higher-order concurrent functional language, we present a static message analysis which guides the allocation. As shown by our performance evaluation, conducted using a production-quality language implementation, the analysis is effective enough to discover most data which is to be used as a message, and to allow the allocation scheme to combine the best performance characteristics of both a process-centric and a communal memory architecture.
C1 Uppsala Univ, Dept Informat Technol, S-75105 Uppsala, Sweden.
C3 Uppsala University
RP Carlsson, R (corresponding author), Uppsala Univ, Dept Informat Technol, Box 337, S-75105 Uppsala, Sweden.
EM richardc@it.uu.se; kostis@it.uu.se; jesperw@it.uu.se
RI Sagonas, Konstantinos/IZD-8641-2023
OI Sagonas, Konstantinos/0000-0001-9657-0179
CR [Anonymous], P 21 ACM SIGPLAN SIG
   [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   [Anonymous], 1997, The Definition of Standard ML
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Back G, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P333
   Blanchet B, 2003, ACM T PROGR LANG SYS, V25, P713, DOI 10.1145/945885.945886
   BLANCHET B, 1998, 25 ACM SIGACT SIGPLA, P25
   Bogda J, 1999, ACM SIGPLAN NOTICES, V34, P35, DOI 10.1145/320385.320388
   BROOKS RA, 1984, P 1984 ACM S LISP FU, P256
   Carlsson Richard, 2001, P PLI 01 ERL WORKSH
   CHENG P, 2001, P ACM SIGPLAN C PROG, P125, DOI DOI 10.1145/378795.378823
   Choi JD, 2003, ACM T PROGR LANG SYS, V25, P876, DOI 10.1145/945885.945892
   DEUTSCH A, 1997, 24 ANN ACM S PRINC P, P358
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Flanagan Cormac, 1993, SIGPLAN Conf. Programming Language Design and Impl. (PLDI'93), P237, DOI [DOI 10.1145/155090.155113, 10.1145/155090.155113]
   Heintze N, 1997, IEEE S LOG, P342, DOI 10.1109/LICS.1997.614960
   Johansson E., 2000, Proceedings of the 2nd International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP '00), P32, DOI 10.1145/351268.351273
   JOHANSSON E, 2002, P ISMM 2002 ACM SIGP, P88
   Johansson Erik, 2000, Tech. Rep
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Mattsson H, 1999, LECT NOTES COMPUT SC, V1551, P152
   PARK YG, 1992, P ACM SIGPLAN 92 C P, P116
   Pettersson M., 2002, Functional and Logic Programming. 6th International Symposium, FLOPS 2002. Proceedings (Lecture Notes in Computer Science Vol.2441), P228
   ROSS DT, 1967, COMMUN ACM, V10, P481, DOI 10.1145/363534.363546
   RUF E, 2000, P C PROGR LANG DES I, P208
   SHIVERS O, 1988, P ACM SIGPLAN C PROG, P164, DOI DOI 10.1145/53990.54007
   Steensgaard B., 2000, P 2 INT S MEMORY MAN, P18
   WILSON PR, 1992, LECT NOTES COMPUT SC, V637, P1
   [No title captured]
NR 29
TC 6
Z9 6
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2006
VL 28
IS 4
BP 715
EP 746
DI 10.1145/1146809.1146813
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 074LZ
UT WOS:000239815200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Hirschowitz, T
   Leroy, X
AF Hirschowitz, T
   Leroy, X
TI Mixin modules in a call-by-value setting
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; theory; mixins; modules; recursion; type systems
ID CALCULUS
AB The ML module system provides powerful parameterization facilities, but lacks the ability to split mutually recursive definitions across modules and provides insufficient support for incremental programming. A promising approach to solve these issues is Ancona and Zucca's mixin module calculus CMS. However, the straightforward way to adapt it to ML fails, because it allows arbitrary recursive definitions to appear at any time, which ML does not otherwise support. In this article, we enrich CMS with a refined type system that controls recursive definitions through the use of dependency graphs. We then develop and prove sound a separate compilation scheme, directed by dependency graphs, that translates mixin modules down to a call-by-value lambda-calculus extended with a nonstandard let rec construct.
C1 ENS, Lyon, France.
C3 Ecole Normale Superieure de Lyon (ENS de LYON)
RP ENS, Lyon, France.
EM Tom.Hirschowitz@ens-lyon.fr; Xavier.Leroy@inria.fr
RI Hirschowitz, Tom/KJM-4727-2024
OI Hirschowitz, Tom/0000-0002-7220-4067
CR Ancona D, 2002, J FUNCT PROGRAM, V12, P91, DOI 10.1017/S0956796801004257
   Ancona D, 1999, LECT NOTES COMPUT SC, V1702, P62
   ANCONA D, 1998, THESIS U PISA PISA
   [Anonymous], 2003, PPDP
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Ariola ZM, 2002, ANN PURE APPL LOGIC, V117, P95, DOI 10.1016/S0168-0072(01)00104-X
   Black AP, 2003, ACM SIGPLAN NOTICES, V38, P47, DOI 10.1145/949343.949311
   Bono V., 1999, Fundamenta Informaticae, V38, P325
   Boudousq V, 2003, OSTEOPOROSIS INT, V14, P263, DOI 10.1007/s00198-002-1359-y
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bracha G., 2016, The Dart Programming Language. Always learning
   CARDELLI L, 1997, P 24 ACM SIGPLAN SIG, P266
   Cook William R., 1989, PhD dissertation
   COUSINEAU G, 1987, SCI COMPUT PROGRAM, V8, P173, DOI 10.1016/0167-6423(87)90020-7
   CRARY K, 1999, PLDI, P50
   DREYER D, 2003, CMUCS03163
   DREYER D, 2001, CMUCS01112
   DREYER D, 2004, P 31 S PRINC PROGR L, P293
   DUGGAN D, 1996, P ACM INT C FUNCT PR, P262
   FINDLER RB, 1998, P 3 ACM SIGPLAN INT, P94
   Flatt Matthew., 1998, P ACM SIGPLAN 1998 C, P236
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Hirschowitz T, 2004, LECT NOTES COMPUT SC, V2986, P64
   HIRSCHOWITZ T, 2003, THESIS U PARIS 7
   LEROY X, 1994, P ACM S PRINC PROGR, P109
   Lillibridge Mark., 1997, THESIS CARNEGIE MELL
   MOON DA, 1986, SIGPLAN NOTICES, V21, P1, DOI 10.1145/960112.28698
   RUSSO C, 2001, P 2001 INT C FUNCT P, P50
   Wells JB, 2000, LECT NOTES COMPUT SC, V1782, P412
NR 30
TC 6
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2005
VL 27
IS 5
BP 857
EP 881
DI 10.1145/1086642.1086644
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 981JL
UT WOS:000233084800002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Vera, X
   Abella, J
   Llosa, J
   González, A
AF Vera, X
   Abella, J
   Llosa, J
   González, A
TI An accurate cost model for guiding data locality transformations
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE performance; Cache memories; tiling; padding; genetic algorithms
ID MEMORY BEHAVIOR; FRAMEWORK; CACHE
AB Caches have become increasingly important with the widening gap between main memory and processor speeds. Small and fast cache memories are designed to bridge this discrepancy. However, they are only effective when programs exhibit sufficient data locality. The performance of the memory hierarchy can be improved by means of data and loop transformations. Tiling is a loop transformation that aims at reducing capacity misses by shortening the reuse distance. Padding is a data layout transformation targeted to reduce conflict misses. This article presents an accurate cost model that describes misses across different hierarchy levels and considers the effects of other hardware components such as branch predictors. The cost model drives the application of tiling and padding transformations. We combine the cost model with a genetic algorithm to compute the tile and pad factors that enhance the program performance. To validate our strategy, we ran experiments for a set of benchmarks on a large set of modern architectures. Our results show that this scheme is useful to optimize programs' performance. When compared to previous approaches, we observe that with a reasonable compile-time overhead, our approach gives significant performance improvements for all studied kernels on all architectures.
C1 Univ Politecn Cataluna, Barcelona, Spain.
C3 Universitat Politecnica de Catalunya
EM xavier.vera@mdh.se; jabella@ac.upc.es; josepll@ac.upc.es;
   antonio@ac.upc.es
RI González, Antonio/I-2961-2014; Abella, Jaume/B-7422-2016
OI González, Antonio/0000-0002-0009-0996; Llosa, Josep/0000-0001-7740-3148;
   Abella, Jaume/0000-0001-7951-4028
CR [Anonymous], 1981, Practical Optimization
   [Anonymous], 1994, Genetic Algorithms + Data Structures = Evolution Programs
   [Anonymous], 1991, Nonlinear optimization: complexity issues
   [Anonymous], 1988, Numerical techniques for stochastic optimization
   Banerjee U.K., 1988, Dependence Analysis for Supercomputing
   Belady L.A., 1966, IBM SYST J
   BERMUDO N, 2000, P IEEE INT S PERF AN
   BUTLER M, 1991, P 18 ANN INT S COMP, P276
   Carr S., 1992, Proceedings. Supercomputing '92. (Cat. No.92CH3216-9), P114, DOI 10.1109/SUPERC.1992.236704
   Carr S., 1994, SIGPLAN Notices, V29, P252, DOI 10.1145/195470.195557
   CHATTERJEE S, 1999, P 1999 ACM INT C SUP, P444
   Clauss P., 1996, P 10 ACM INT C SUPER, P278, DOI DOI 10.1145/237578.237617
   COLEMAN S, 1995, P ACM SIGPLAN C PROG, P279
   DYER ME, 1988, SIAM J COMPUT, V17, P967, DOI 10.1137/0217060
   FERNANDEZ A, 1999, UPCDAC199912
   GANNON D, 1988, J PARALLEL DISTR COM, V5, P587, DOI 10.1016/0743-7315(88)90014-7
   Ghosh S, 1999, ACM T PROGR LANG SYS, V21, P703, DOI 10.1145/325478.325479
   Glover F., 1998, Tabu Search
   Goldberg D. E., 1989, Genetic algorithms
   HANSEN P, 1995, J COMPUT
   Holland JH., 1975, Ann Arbor
   Horst R., 1995, Introduction to Global Optimization
   Kandemir M, 1999, IEEE T PARALL DISTR, V10, P115, DOI 10.1109/71.752779
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Lam M. S., 1991, P 4 INT C ARCH SUPP
   McFarling S., 1993, Technical report TN-36
   McKinley KS, 1996, ACM T PROGR LANG SYS, V18, P424, DOI 10.1145/233561.233564
   MCKINLEY KS, 1996, P 7 INT C ARCH SUPP
   MOWRY TC, 1992, P 5 INT C ARCH SUPP, P62
   PETRANK E, 2002, P INT C PRINC PROGR
   RIVERA G, 1999, P 8 INT C COMP CONST
   RIVERA G, 1998, P ACM INT C SUP ICS
   RIVERA G, 1999, P SUP SC 99
   Rivera Gabriel., 1998, Proceedings of the ACM SIGPLAN 1998 conference on Programming language design and implementation - PLDI'98, DOI [10 . 1145 / 277650.277661, DOI 10.1145/277650.277661]
   Sharangpani H., 2000, IEEE MICRO
   Temam O., 1993, Proceedings SUPERCOMPUTING '93, P410, DOI 10.1145/169627.169762
   TORN A, 1989, LECT NOTES COMPUT SC, V350, P1
   VERA, 2000, P EUR C PAR COMP EUR
   Vera X, 2004, ACM T PROGR LANG SYS, V26, P263, DOI 10.1145/973097.973099
   Wolf M. E., 1991, SIGPLAN Notices, V26, P30, DOI 10.1145/113446.113449
   WOLFE M, 1996, P INT C PAR PROC IC
NR 41
TC 3
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2005
VL 27
IS 5
BP 946
EP 987
DI 10.1145/1086642.1086646
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 981JL
UT WOS:000233084800004
OA Bronze
DA 2024-07-18
ER

PT J
AU Back, G
   Hsieh, WC
AF Back, G
   Hsieh, WC
TI The KaffeOS Java runtime system
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE algorithms; design; reliability; languages; performance; robustness;
   resource management; isolation; termination; language runtimes; virtual
   machines; garbage collection
AB Single-language runtime systems, in the form of Java virtual machines, are widely deployed platforms for executing untrusted mobile code. These runtimes provide some of the features that operating systems provide: interapplication memory protection and basic system services. They do not, however, provide the ability to isolate applications from each other. Neither do they provide the ability to limit the resource consumption of applications. Consequently, the performance of current systems degrades severely in the presence of malicious or buggy code that exhibits ill-behaved resource usage.
   We show that Java runtime systems can be extended to support processes, and that processes can provide robust and efficient support for untrusted applications. We have designed and built KaffeOS, a Java runtime system that provides support for processes. KaffeOS isolates processes and manages the physical resources available to them: CPU and memory. Unlike existing Java virtual machines, KaffeOS can safely terminate processes without adversely affecting the integrity of the system, and it can fully reclaim a terminated process's resources. Finally, KaffeOS requires no changes to the Java language. The novel aspects of the KaffeOS architecture include the application of a user/kernel boundary as a structuring principle for runtime systems, the employment of garbage collection techniques for resource management and isolation, and a model for direct sharing of objects between untrusted applications. The difficulty in designing KaffeOS lay in balancing the goals of isolation and resource management against the goal of allowing direct sharing of objects.
   For the SpecJVM benchmarks, the overhead that our KaffeOS prototype incurs ranges from 0% to 25%, when compared to the open-source JVM on which it is based. We consider this overhead acceptable for the safety that KaffeOS provides. In addition, our KaffeOS prototype can scale to run more applications than running multiple JVMs. Finally, in the presence of malicious or buggy code that engages in a denial-of-service attack, KaffeOS can contain the attack, remove resources from the attacked applications, and continue to provide robust service to other clients.
C1 Virginia Polytech Inst & State Univ, Dept Comp Sci, Blacksburg, VA 24061 USA.
   Google Inc, Mountain View, CA 94043 USA.
C3 Virginia Polytechnic Institute & State University; Google Incorporated
RP Virginia Polytech Inst & State Univ, Dept Comp Sci, 2160A Torgersen Hall, Blacksburg, VA 24061 USA.
EM gback@cs.vt.edu; hsieh@gmail.com
CR [Anonymous], THESIS MIT CAMBRIDGE
   [Anonymous], 1994, ACM SIGOPS Operating Systems Review
   BACK G, 2002, THESIS U UTAH
   BACON D.F., 1998, PLDI 98, P258
   Balfanz D, 1998, INT CON DISTR COMP S, P398, DOI 10.1109/ICDCS.1998.679754
   Berger EmeryD., 2000, 9 INT C ARCHITECTURA, P117, DOI DOI 10.1145/384264.379232
   BERGSTEN H, 2000, JAVASERVER PAGES
   BERNADAT P, 1998, P IEEE WORKSH PROGR, P101
   Bershad B. N., 1995, Proceedings Fifth Workshop on Hot Topics in Operating Systems (HotOS-V) (Cat. No.95TH8059), P62, DOI 10.1109/HOTOS.1995.513456
   Bershad B.N., 1995, P 15 ACM S OP SYST P, P267
   BLACKBURN SM, 2001, P ACM SIGPLAN C OBJ, P342
   Bollella Greg., 2000, REAL TIME SPECIFICAT
   CHAN P, 1998, JAVA CLASS LIBRARIES, V1
   CHASE JS, 1995, THESIS U WASHINGTON
   Chen H., 2002, P 9 ACM C COMPUTER C, P235
   Cheng P, 1998, ACM SIGPLAN NOTICES, V33, P162, DOI 10.1145/277652.277718
   CZAJKOWSKI G, 1998, P 8 ACM SIGOPS EUR W, P33
   CZAJKOWSKI G, 2000, P ACM C OBJ OR PROGR, P354
   CZAJKOWSKI G, 2001, P ACM C OBJ OR PROGR, P125
   CZAJKOWSKI G, 1998, P ACM C OBJ OR PROGR, P21
   Dean Drew., 1997, P 4 ACM C COMPUTER C, P18
   Dillenberger D, 2000, IBM SYST J, V39, P194, DOI 10.1147/sj.391.0194
   Domani T., 2002, P INT S MEM MAN ISMM, P183
   Dorward SM, 1997, BELL LABS TECH J, V2, P5, DOI 10.1002/bltj.2028
   Engler D, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Engler D.R., 1995, S OPERATING SYSTEMS, P251
   FLATT M, 2004, P SIGPLAN 04 C PROGR
   Ford B, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P137, DOI 10.1145/248155.238769
   FRANZ M, 1997, P WEBN 97 WORLD C WW, P33
   GAY D, 1998, P 1998 ACM SIGPLAN C, P313
   GORRIE L, 1998, ECHIDNA FREE MULTIPR
   HAWBLITEL C, 2002, P 5 S OP SYST DES IM
   Hawblitzel C, 1998, PROCEEDINGS OF THE USENIX 1998 ANNUAL TECHNICAL CONFERENCE, P259
   HENZINGER T, 2002, P 14 INT C COMP AID
   Jaeger T, 1998, PROCEEDINGS OF THE SEVENTH USENIX SECURITY SYMPOSIUM, P143
   Joy B., 2000, JAVA LANGUAGE SPECIF, V2nd
   JUL E, 1988, ACM T COMPUT SYST, V6, P109, DOI 10.1145/35037.42182
   LEPREAU J, 1993, PROCEEDINGS OF THE USENIX MACH III SYMPOSIUM, P39
   Liang S, 1998, ACM SIGPLAN NOTICES, V33, P36, DOI 10.1145/286942.286945
   Liang S., 1999, Java native interface: programmers guide and reference, V1
   LIZT J, 1999, ORACLE JSERVER SCALA
   Malkhi D, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P40, DOI 10.1109/SECPRI.1998.674822
   Marlow Simon., 2001, Proceedings of the 2001 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Snowbird, Utah, USA, June 20-22, P274, DOI DOI 10.1145/378795.378858
   MCGRAW G, 1997, JAVA SECURITY HOSTIL
   Plainfosse D, 1995, LECT NOTES COMPUT SC, V986, P211
   Price DW, 2003, P IEEE S SECUR PRIV, P263, DOI 10.1109/SECPRI.2003.1199342
   REDELL DD, 1980, COMMUN ACM, V23, P81, DOI 10.1145/358818.358822
   RITCHIE DM, 1978, BELL SYST TECH J, V57, P6
   RIVEST R, 1992, 1321 RFC INT NETW WO
   ROSCOE T, 1995, THESIS U CAMBR QUEEN
   Rudys A., 2002, ACM Transactions on Information and Systems Security, V5, P138, DOI 10.1145/505586.505589
   SARASWAT V, 1997, JAVA NOT TYPE SAFE
   Saulpaugh T., 1999, INSIDE JAVAOS OPERAT
   Seltzer MI, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P213, DOI 10.1145/248155.238779
   Shapiro JS, 2003, P IEEE S SECUR PRIV, P251, DOI 10.1109/SECPRI.2003.1199341
   SIRER EG, 1996, P ACM WORKSH COMP SU, P141
   Steensgaard B., 2000, P 2 INT S MEMORY MAN, P18
   STEFANOVIC D, 1999, P ACM SIGPLAN C OBJ, P370
   Suganuma T, 2000, IBM SYST J, V39, P175, DOI 10.1147/sj.391.0175
   SWINEHART DC, 1986, ACM T PROGR LANG SYS, V8, P419, DOI 10.1145/6465.6466
   The Standard Performance Evaluation Corporation, 1998, SPEC JVM98 BENCHM
   Tullmann P, 2001, IEEE J SEL AREA COMM, V19, P501, DOI 10.1109/49.917710
   TULLMANN P, 1998, P 8 ACM SIGOPS EUR W, P111
   TULLMANN PA, 1999, THESIS U UTAH
   van Doorn L., 2000, Proceedings of the Ninth USENIX Security Symposium, P19
   van Doorn L., 1995, Proceedings Fifth Workshop on Hot Topics in Operating Systems (HotOS-V) (Cat. No.95TH8059), P86, DOI 10.1109/HOTOS.1995.513460
   WICK A, 2002, P 2002 SCH WORKSH PI
   WILKINSON T, 1992, PARALLEL COMPUTING : FROM THEORY TO SOUND PRACTICE, P316
   WILKINSON T, 1996, KAFFE JAVA VIRTUAL M
   WILSON PR, 1992, LECT NOTES COMPUT SC, V637, P1
   *WIND RIV SYST INC, 1995, VXWORKS PROGR GUID
   WIRTH N, 1992, PROJECT OBERON
   Zee K, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/583854.582439
NR 73
TC 24
Z9 37
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2005
VL 27
IS 4
BP 583
EP 630
DI 10.1145/1075382.1075383
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 956AK
UT WOS:000231271100001
OA Bronze
DA 2024-07-18
ER

PT J
AU Das, D
   Ramakrishna, U
AF Das, D
   Ramakrishna, U
TI A practical and fast iterative algorithm for φ-function computation
   using DJ graphs
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE static single assignment form; dominance frontier; DJ graph
AB We present a new and practical method of computing phi-function for all variables in a function for Static Single Assignment (SSA) form. The new algorithm is based on computing the Merge set of each node in the control flow graph of a function (a node here represents a basic block and the terms will be used interchangeably). Merge set of a node n is the set of nodes N, where phi-functions may need to be placed if variables are defined in n. It is not necessary for n to have a definition of a variable in it. Thus, the merge set of n is dictated by the underlying structure of the CFG. The new method presented here precomputes the merge set of every node in the CFG using an iterative approach. Later, these merge sets are used to carry out the actual phi-function placement. The advantages are in examples where dense definitions of variables are present (i.e., original definitions of variables-user defined or otherwise, in a majority of basic blocks). Our experience with SSA in the High Level Optimizer (optimization levels +O3/+O4) shows that most examples from the Spec2000 benchmark suite require a high percentage of basic blocks to have their phi points computed. Previous methods of computing the same relied on the dominance frontier (DF) concept, first introduced by Cytron et al. The method presented in this paper gives a new effective iterative solution to the problem. Also, in cases, where the control flow graph does not change, our method does not require any additional computation for new definitions introduced as part of optimizations. We present implementation details with results from Spec2000 benchmarks. Our algorithm runs faster than the existing methods used.
C1 Hewlett Packard Corp, India Software Operat, Bangalore 560052, Karnataka, India.
   Colorado State Univ, Ft Collins, CO 80523 USA.
C3 Hewlett-Packard; Colorado State University
RP Hewlett Packard Corp, India Software Operat, 29 Cunningham Rd, Bangalore 560052, Karnataka, India.
EM dibyend@india.hp.com; ramakrsn@cs.colostate.edu
OI Upadrasta, Ramakrishna/0000-0002-5290-3266
CR [Anonymous], POPL, DOI DOI 10.1145/1
   Bilardi G, 2003, J ACM, V50, P375, DOI 10.1145/765568.765573
   Briggs P, 1998, SOFTWARE PRACT EXPER, V28, P859, DOI 10.1002/(SICI)1097-024X(19980710)28:8<859::AID-SPE188>3.0.CO;2-8
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   CYTRON R, 1993, P 6 WORKSH LANG COMP, P461
   Nielson F., 1999, Principles of Program Analysis
   Ramalingam G, 2002, ACM T PROGR LANG SYS, V24, P455, DOI 10.1145/570886.570887
   REIF JH, 1982, SIAM J COMPUT, V11, P81, DOI 10.1137/0211007
   ROSEN BK, 1988, POPL 88, P00012
   SHAPIRO RM, 1970, REPRESENTATION ALGOR
   SREEDHAR V, 1994, THESIS MCGILL U MONT
   Sreedhar VugranamC., 1995, Proceedings of the 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), P62
   Weiss M., 1992, ACM Letters on Programming Languages and Systems, V1, P178, DOI 10.1145/151333.151337
NR 13
TC 4
Z9 8
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2005
VL 27
IS 3
BP 426
EP 440
DI 10.1145/1065887.1065890
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 937OF
UT WOS:000229934700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Chitil, O
AF Chitil, O
TI Pretty printing with lazy dequeues
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE Haskell; lazy functional programming
AB There are several purely functional libraries for converting tree structured data into indented text, but they all make use of some backtracking. Over twenty years ago, Oppen published a more efficient imperative implementation of a pretty printer. This article shows that the same efficiency is also obtainable without destructive updates by developing a similar but purely functional Haskell implementation with the same complexity bounds. At its heart lie two lazy double ended queues.
C1 Univ Kent, Comp Lab, Canterbury CT2 7NF, Kent, England.
C3 University of Kent
RP Chitil, O (corresponding author), Univ Kent, Comp Lab, Canterbury CT2 7NF, Kent, England.
EM O.Chitil@kent.ac.uk
CR [Anonymous], 1998, Purely Functional Data Structures
   Azero Pablo R, 1998, OPTIMAL PRETTY PRINT
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   HUGHES J, 1995, LECT NOTES COMPUTER, V925
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   OKASAKI C, 2000, P 2000 ACM SIGPLAN I, P131
   Oppen D. C., 1980, ACM Transactions on Programming Languages and Systems, V2, P465, DOI 10.1145/357114.357115
   Peyton JonesS., 2003, HASKELL 98 LANGUAGE
   PEYTON JSL, 1997, PRETTY PRINTER LIB H
   Wadler Philip, 2003, The Fun of Programming Cornerstones of Computing, P223
NR 10
TC 5
Z9 6
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JAN
PY 2005
VL 27
IS 1
BP 163
EP 184
DI 10.1145/1053468.1053473
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 896KW
UT WOS:000226934000005
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Sistla, AP
   Godefroid, P
AF Sistla, AP
   Godefroid, P
TI Symmetry and reduced symmetry in model checking
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE verification; reliability; theory; state space explosion; symmetry
   reductions; model checking; algorithms and tools; temporal logics;
   formula decomposition
ID VERIFICATION; FAIRNESS
AB Symmetry reduction methods exploit symmetry in a system in order to efficiently verify its temporal properties. Two problems may prevent the use of symmetry reduction in practice: ( 1) the property to be checked may distinguish symmetric states and hence not be preserved by the symmetry, and ( 2) the system may exhibit little or no symmetry. In this article, we present a general framework that addresses both of these problems. We introduce "Guarded Annotated Quotient Structures" for compactly representing the state space of systems even when those are asymmetric. We then present algorithms for checking any temporal property on such representations, including nonsymmetric properties.
C1 Univ Illinois, Dept Comp Sci, Chicago, IL 60607 USA.
   Bell Labs, Lucent Technol, Lisle, IL 60532 USA.
C3 University of Illinois System; University of Illinois Chicago;
   University of Illinois Chicago Hospital; AT&T; Alcatel-Lucent; Lucent
   Technologies
RP Univ Illinois, Dept Comp Sci, Chicago, IL 60607 USA.
EM sistla@eecs.uic.edu
CR [Anonymous], 1990, HDB THEORETICAL COMP
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   CLARKE EM, 2005, LECT NOTES COMPUTER, V1000
   CLARKE EM, 1993, P 5 INT C COMP AID V, P450
   Emerson EA, 1996, FORM METHOD SYST DES, V9, P105, DOI 10.1007/BF00625970
   Emerson EA, 2000, IEEE S LOG, P121, DOI 10.1109/LICS.2000.855761
   Emerson EA, 1999, LECT NOTES COMPUT SC, V1703, P142
   Emerson EA, 1997, ACM T PROGR LANG SYS, V19, P617, DOI 10.1145/262004.262008
   EMERSON EA, 1987, 14 ACM S PRINC PROGR, P84
   GODEFROID P, 1999, IFIP C P, V156
   Gyuris V, 1999, FORM METHOD SYST DES, V15, P217, DOI 10.1023/A:1008701202999
   *IEEE, 1995, 1394 IEEE
   IP CN, 1993, COMPUTER HARDWARE DE, P87
   Kurshan R.P., 1994, COMPUTER AIDED VERIF
   SIGHIREANU M, 1999, VALIDATION LINK LAYE
   Sistla AP, 2000, ACM T SOFTW ENG METH, V9, P133, DOI 10.1145/350887.350891
   SISTLA AP, 2001, LECT NOTES COMPUTER
NR 17
TC 15
Z9 16
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD JUL
PY 2004
VL 26
IS 4
BP 702
EP 734
DI 10.1145/1011508.1011511
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 843CN
UT WOS:000223053200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Glesner, S
   Zimmermann, W
AF Glesner, S
   Zimmermann, W
TI Natural semantics as a static program analysis framework
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE languages; natural semantics; static program analysis; semantic
   analysis; fixed-point program analyses; constraint solving; compiler
   generators
AB Natural semantics specifications have become mainstream in the formal specification of programming language semantics during the last 10 years. In this article, we set up sorted natural semantics as a specification framework which is able to express static semantic information of programming languages declaratively in a uniform way and allows one at the same time to generate corresponding analyses. Such static semantic information comprises context-sensitive properties which are checked in the semantic analysis phase of compilers as well as further static program analyses such as, for example, classical data and control flow analyses or type and effect systems. The latter require fixed-point analyses to determine their solutions. We show that, given a sorted natural semantics specification, we can generate the corresponding analysis. Therefore, we classify the solution of such an analysis by the notion of a proof tree. We show that a proof tree can be computed by solving an equivalent residuation problem. In case of the semantic analysis, this solution can be found by a basic algorithm. We show that its efficiency can be enhanced using solution strategies. We also demonstrate our prototype implementation of the basic algorithm which proves its applicability in practical situations. With the results of this article, we have established natural semantics as a framework which closes the gap between declarative and operational specification methods for static semantic properties as well as between specification frameworks for the semantic analysis. In particular, we show that natural semantics is expressive enough to define fixed-point program analyses.
C1 Univ Karlsruhe, Inst Programmstrukturen & Datenorg, D-76128 Karlsruhe, Germany.
   Univ Halle Wittenberg, Inst Informat, D-06099 Halle An Der Saale, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology; Martin Luther
   University Halle Wittenberg
RP Glesner, S (corresponding author), Univ Karlsruhe, Inst Programmstrukturen & Datenorg, D-76128 Karlsruhe, Germany.
EM glesner@ipd.info.uni-karlsruhe.de; zimmer@informatik.uni-halle.de
CR Andreka H., 1978, Acta Cybernetica, V4, P3
   [Anonymous], 1991, Commentary on Standard ML
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   [Anonymous], 1996, A Theory of Objects
   [Anonymous], 1997, The Definition of Standard ML
   Attali I, 1996, ACM T PROGR LANG SYS, V18, P711, DOI 10.1145/236114.236118
   ATTALI I, 1988, INT C S LOG PROGR SE, P160
   ATTALI I, 1989, THESIS U NICE NICE
   Baader F, 1998, APPL LOG SER, V8, P225
   BAHLKE R, 1986, ACM T PROGR LANG SYS, V8, P547, DOI 10.1145/6465.20890
   BOCHMANN GV, 1976, COMMUN ACM, V19, P55, DOI 10.1145/359997.359999
   CASTAGNA G, 1997, OBJECT ORIENTED PROG
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DESPEYROUX T, 1984, LECT NOTES COMPUT SC, V173, P215
   Domenjoud E., 1992, Journal of Automated Reasoning, V8, P39, DOI 10.1007/BF00263448
   Drossopoulou S., 1999, Formal Syntax and Semantics of Java, volume 1523 of Lecture Notes in Computer Science, V1523, P41
   GEISS R, 1998, SHERLOCK SYSTEM PROT
   GEISS R, 1999, SHERLOCK SYSTEM II P
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   GLESNER S, 1998, P SYST IMPL C BERL G, P249
   GLESNER S, 1997, AACHENER BEITRAGE IN, V21
   GLESNER S, 1998, P WORKSH FUNCT LOG P
   GLESNER S, 1999, THESIS U KARLSRUHE
   GLESNER S, 1999, INFORMATIK 99 INFORM, P370
   GROSCH J, 1991, LECT NOTES COMPUT SC, V477, P106
   HANUS M, 1994, J LOGIC PROGRAM, V20, P583, DOI 10.1016/0743-1066(94)90034-5
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   Jouvelot Pierre., 1991, ACM SIGACTSIGPLAN S, P303, DOI DOI 10.1145/99583.99623
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   KAPUR D, 1992, J AUTOM REASONING, V9, P261
   KASTENS U, 1980, ACTA INFORM, V13, P229, DOI 10.1007/BF00288644
   Kastens U., 1982, Lecture Notes in Computer Science, V141
   KFOURY AJ, 1994, J ACM, V41, P368, DOI 10.1145/174652.174659
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   LEWIS PM, 1974, J COMPUT SYST SCI, V9, P279, DOI 10.1016/S0022-0000(74)80045-0
   MILNER R, 1990, DEFINITIOIN STANDARD
   Morgan Robert, 1998, Building an Optimizing Compiler
   Muchnick S., 1997, ADV COMPILER DESIGN
   Nielson F., 1999, Principles of Program Analysis
   NIPKOW T, 1998, P 25 ACM S PRINC PRO, P161, DOI DOI 10.1145/268946.268960
   ODERSKY M, 1993, ACM T PROGR LANG SYS, V15, P535, DOI 10.1145/169683.174159
   OZ, OZ PROGRAMMING SYSTE
   Palsberg J., 1994, OBJECT ORIENTED TYPE
   PATERSON MS, 1978, J COMPUT SYST SCI, V16, P158, DOI 10.1016/0022-0000(78)90043-0
   PETTERSSON M, 1996, LECT NOTES COMPUTER, V1060
   PETTERSSON M, 1995, THESIS LINKOPING U L
   ROBICHEK AA, 1965, MANAGE SCI, V12, P1, DOI 10.1287/mnsc.12.1.1
   SNELTING G, 1986, P INT S PRINC PROGR
   SYME D, 1999, LECT NOTES COMPUTER, V1523
   VONOHEIMB D, 1999, LECT NOTES COMPUTER, V1523
   VONOHEIMB D, 2001, THESIS TU MUNCHEN MU
   Wirsing M., 1990, HDB THEORETICAL COMP, VB, P675, DOI [10.1016/B978-0-444-88074-1.50018-4, DOI 10.1016/B978-0-444-88074-1.50018-4]
NR 52
TC 2
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
SN 0164-0925
EI 1558-4593
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD MAY
PY 2004
VL 26
IS 3
BP 510
EP 577
DI 10.1145/982158.982161
PG 68
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 812QJ
UT WOS:000220853700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Amadio, RM
   Boudol, G
   Lhoussaine, C
AF Amadio, RM
   Boudol, G
   Lhoussaine, C
TI The receptive distributed π-calculus
SO ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS
LA English
DT Article
DE theory; pi-calculus; distribution; receptivity; resource access control
AB We study an asynchronous distributed pi-calculus, with constructs for localities and migration. We show that a static analysis ensures the receptiveness of channel names, which, together with a simple type system, guarantees the message deliverability property. This property states that any migrating message will find an appropriate receiver at its destination locality. We argue that this distributed, receptive calculus is still expressive enough while allowing for an effective type inference a la ML.
C1 INRIA, F-06902 Sophia Antipolis, France.
   Univ Sussex, COGS, Brighton BN1 9QH, E Sussex, England.
   Univ Aix Marseille 1, F-13331 Marseille, France.
C3 Inria; University of Sussex; Aix-Marseille Universite
RP Amadio, RM (corresponding author), CMI, Lab Informat Fondamentale Marseille, 39 Rue Joliot Curie, F-13453 Marseille, France.
CR AMADIO R, 1997, LECT NOTES COMPUTER, V1282
   AMADIO R, 1999, LECT NOTES COMPUTER, V1738
   AMADIO R, 2000, 4080 INRIA
   Amadio RM, 2000, THEOR COMPUT SCI, V240, P147, DOI 10.1016/S0304-3975(99)00230-3
   Amadio RM, 2002, FUND INFORM, V53, P105
   BOUDOL G, 1997, LNCS, V1345, P239
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   FOURNET C, 1996, P 23 ACM S PRINC PRO, P372, DOI DOI 10.1145/237721.237805
   Hennessy M, 2002, INFORM COMPUT, V173, P82, DOI 10.1006/inco.2001.3089
   JATEGAONKAR J, 1993, FUNDAMENT INFORMAT, V19, P127
   Kobayashi N, 1998, ACM T PROGR LANG SYS, V20, P436, DOI 10.1145/276393.278524
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Lhoussaine C, 2003, LECT NOTES COMPUT SC, V2618, P253
   LHOUSSAINE C, 2002, THESIS U AIX MARSEIL
   Merro M, 1998, LECT NOTES COMPUT SC, V1443, P856, DOI 10.1007/BFb0055108
   Remy D., 1993, Theoretical Aspects Of Object-Oriented Programming. Types
   Sangiorgi D, 1997, LECT NOTES COMPUT SC, V1256, P303
   SEKIGUCHI T, 1997, P FMOODS 97
   SUMII E, 1998, ELECT NOTES COMP SCI, V16, P3
   VASCONCELOS VT, 1994, SPRINGER VERLAG LECT, V821, P100
   WAND M, 1987, P IEEE LICS
NR 22
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1515 BROADWAY, NEW YORK, NY 10036 USA
SN 0164-0925
J9 ACM T PROGR LANG SYS
JI ACM Trans. Program. Lang. Syst.
PD SEP
PY 2003
VL 25
IS 5
BP 549
EP 577
DI 10.1145/937563.937564
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 720HY
UT WOS:000185256400001
OA Bronze
DA 2024-07-18
ER

EF